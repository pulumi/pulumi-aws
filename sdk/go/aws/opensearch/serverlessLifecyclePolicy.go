// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS OpenSearch Serverless Lifecycle Policy. See AWS documentation for [lifecycle policies](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-lifecycle.html).
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/opensearch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"Rules": []interface{}{
//					map[string]interface{}{
//						"ResourceType": "index",
//						"Resource": []string{
//							"index/autoparts-inventory/*",
//						},
//						"MinIndexRetention": "81d",
//					},
//					map[string]interface{}{
//						"ResourceType": "index",
//						"Resource": []string{
//							"index/sales/orders*",
//						},
//						"NoMinIndexRetention": true,
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = opensearch.NewServerlessLifecyclePolicy(ctx, "example", &opensearch.ServerlessLifecyclePolicyArgs{
//				Type:   pulumi.String("retention"),
//				Policy: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import OpenSearch Serverless Lifecycle Policy using the `name` and `type` arguments separated by a slash (`/`). For example:
//
// ```sh
//
//	$ pulumi import aws:opensearch/serverlessLifecyclePolicy:ServerlessLifecyclePolicy example example/retention
//
// ```
type ServerlessLifecyclePolicy struct {
	pulumi.CustomResourceState

	// Description of the policy.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Name of the policy.
	Name pulumi.StringOutput `pulumi:"name"`
	// JSON policy document to use as the content for the new policy.
	Policy pulumi.StringOutput `pulumi:"policy"`
	// Version of the policy.
	PolicyVersion pulumi.StringOutput `pulumi:"policyVersion"`
	// Type of lifecycle policy. Must be `retention`.
	//
	// The following arguments are optional:
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewServerlessLifecyclePolicy registers a new resource with the given unique name, arguments, and options.
func NewServerlessLifecyclePolicy(ctx *pulumi.Context,
	name string, args *ServerlessLifecyclePolicyArgs, opts ...pulumi.ResourceOption) (*ServerlessLifecyclePolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServerlessLifecyclePolicy
	err := ctx.RegisterResource("aws:opensearch/serverlessLifecyclePolicy:ServerlessLifecyclePolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerlessLifecyclePolicy gets an existing ServerlessLifecyclePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerlessLifecyclePolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerlessLifecyclePolicyState, opts ...pulumi.ResourceOption) (*ServerlessLifecyclePolicy, error) {
	var resource ServerlessLifecyclePolicy
	err := ctx.ReadResource("aws:opensearch/serverlessLifecyclePolicy:ServerlessLifecyclePolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerlessLifecyclePolicy resources.
type serverlessLifecyclePolicyState struct {
	// Description of the policy.
	Description *string `pulumi:"description"`
	// Name of the policy.
	Name *string `pulumi:"name"`
	// JSON policy document to use as the content for the new policy.
	Policy *string `pulumi:"policy"`
	// Version of the policy.
	PolicyVersion *string `pulumi:"policyVersion"`
	// Type of lifecycle policy. Must be `retention`.
	//
	// The following arguments are optional:
	Type *string `pulumi:"type"`
}

type ServerlessLifecyclePolicyState struct {
	// Description of the policy.
	Description pulumi.StringPtrInput
	// Name of the policy.
	Name pulumi.StringPtrInput
	// JSON policy document to use as the content for the new policy.
	Policy pulumi.StringPtrInput
	// Version of the policy.
	PolicyVersion pulumi.StringPtrInput
	// Type of lifecycle policy. Must be `retention`.
	//
	// The following arguments are optional:
	Type pulumi.StringPtrInput
}

func (ServerlessLifecyclePolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverlessLifecyclePolicyState)(nil)).Elem()
}

type serverlessLifecyclePolicyArgs struct {
	// Description of the policy.
	Description *string `pulumi:"description"`
	// Name of the policy.
	Name *string `pulumi:"name"`
	// JSON policy document to use as the content for the new policy.
	Policy string `pulumi:"policy"`
	// Type of lifecycle policy. Must be `retention`.
	//
	// The following arguments are optional:
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a ServerlessLifecyclePolicy resource.
type ServerlessLifecyclePolicyArgs struct {
	// Description of the policy.
	Description pulumi.StringPtrInput
	// Name of the policy.
	Name pulumi.StringPtrInput
	// JSON policy document to use as the content for the new policy.
	Policy pulumi.StringInput
	// Type of lifecycle policy. Must be `retention`.
	//
	// The following arguments are optional:
	Type pulumi.StringInput
}

func (ServerlessLifecyclePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverlessLifecyclePolicyArgs)(nil)).Elem()
}

type ServerlessLifecyclePolicyInput interface {
	pulumi.Input

	ToServerlessLifecyclePolicyOutput() ServerlessLifecyclePolicyOutput
	ToServerlessLifecyclePolicyOutputWithContext(ctx context.Context) ServerlessLifecyclePolicyOutput
}

func (*ServerlessLifecyclePolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessLifecyclePolicy)(nil)).Elem()
}

func (i *ServerlessLifecyclePolicy) ToServerlessLifecyclePolicyOutput() ServerlessLifecyclePolicyOutput {
	return i.ToServerlessLifecyclePolicyOutputWithContext(context.Background())
}

func (i *ServerlessLifecyclePolicy) ToServerlessLifecyclePolicyOutputWithContext(ctx context.Context) ServerlessLifecyclePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessLifecyclePolicyOutput)
}

// ServerlessLifecyclePolicyArrayInput is an input type that accepts ServerlessLifecyclePolicyArray and ServerlessLifecyclePolicyArrayOutput values.
// You can construct a concrete instance of `ServerlessLifecyclePolicyArrayInput` via:
//
//	ServerlessLifecyclePolicyArray{ ServerlessLifecyclePolicyArgs{...} }
type ServerlessLifecyclePolicyArrayInput interface {
	pulumi.Input

	ToServerlessLifecyclePolicyArrayOutput() ServerlessLifecyclePolicyArrayOutput
	ToServerlessLifecyclePolicyArrayOutputWithContext(context.Context) ServerlessLifecyclePolicyArrayOutput
}

type ServerlessLifecyclePolicyArray []ServerlessLifecyclePolicyInput

func (ServerlessLifecyclePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerlessLifecyclePolicy)(nil)).Elem()
}

func (i ServerlessLifecyclePolicyArray) ToServerlessLifecyclePolicyArrayOutput() ServerlessLifecyclePolicyArrayOutput {
	return i.ToServerlessLifecyclePolicyArrayOutputWithContext(context.Background())
}

func (i ServerlessLifecyclePolicyArray) ToServerlessLifecyclePolicyArrayOutputWithContext(ctx context.Context) ServerlessLifecyclePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessLifecyclePolicyArrayOutput)
}

// ServerlessLifecyclePolicyMapInput is an input type that accepts ServerlessLifecyclePolicyMap and ServerlessLifecyclePolicyMapOutput values.
// You can construct a concrete instance of `ServerlessLifecyclePolicyMapInput` via:
//
//	ServerlessLifecyclePolicyMap{ "key": ServerlessLifecyclePolicyArgs{...} }
type ServerlessLifecyclePolicyMapInput interface {
	pulumi.Input

	ToServerlessLifecyclePolicyMapOutput() ServerlessLifecyclePolicyMapOutput
	ToServerlessLifecyclePolicyMapOutputWithContext(context.Context) ServerlessLifecyclePolicyMapOutput
}

type ServerlessLifecyclePolicyMap map[string]ServerlessLifecyclePolicyInput

func (ServerlessLifecyclePolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerlessLifecyclePolicy)(nil)).Elem()
}

func (i ServerlessLifecyclePolicyMap) ToServerlessLifecyclePolicyMapOutput() ServerlessLifecyclePolicyMapOutput {
	return i.ToServerlessLifecyclePolicyMapOutputWithContext(context.Background())
}

func (i ServerlessLifecyclePolicyMap) ToServerlessLifecyclePolicyMapOutputWithContext(ctx context.Context) ServerlessLifecyclePolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessLifecyclePolicyMapOutput)
}

type ServerlessLifecyclePolicyOutput struct{ *pulumi.OutputState }

func (ServerlessLifecyclePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessLifecyclePolicy)(nil)).Elem()
}

func (o ServerlessLifecyclePolicyOutput) ToServerlessLifecyclePolicyOutput() ServerlessLifecyclePolicyOutput {
	return o
}

func (o ServerlessLifecyclePolicyOutput) ToServerlessLifecyclePolicyOutputWithContext(ctx context.Context) ServerlessLifecyclePolicyOutput {
	return o
}

// Description of the policy.
func (o ServerlessLifecyclePolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerlessLifecyclePolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Name of the policy.
func (o ServerlessLifecyclePolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessLifecyclePolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// JSON policy document to use as the content for the new policy.
func (o ServerlessLifecyclePolicyOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessLifecyclePolicy) pulumi.StringOutput { return v.Policy }).(pulumi.StringOutput)
}

// Version of the policy.
func (o ServerlessLifecyclePolicyOutput) PolicyVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessLifecyclePolicy) pulumi.StringOutput { return v.PolicyVersion }).(pulumi.StringOutput)
}

// Type of lifecycle policy. Must be `retention`.
//
// The following arguments are optional:
func (o ServerlessLifecyclePolicyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessLifecyclePolicy) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type ServerlessLifecyclePolicyArrayOutput struct{ *pulumi.OutputState }

func (ServerlessLifecyclePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerlessLifecyclePolicy)(nil)).Elem()
}

func (o ServerlessLifecyclePolicyArrayOutput) ToServerlessLifecyclePolicyArrayOutput() ServerlessLifecyclePolicyArrayOutput {
	return o
}

func (o ServerlessLifecyclePolicyArrayOutput) ToServerlessLifecyclePolicyArrayOutputWithContext(ctx context.Context) ServerlessLifecyclePolicyArrayOutput {
	return o
}

func (o ServerlessLifecyclePolicyArrayOutput) Index(i pulumi.IntInput) ServerlessLifecyclePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServerlessLifecyclePolicy {
		return vs[0].([]*ServerlessLifecyclePolicy)[vs[1].(int)]
	}).(ServerlessLifecyclePolicyOutput)
}

type ServerlessLifecyclePolicyMapOutput struct{ *pulumi.OutputState }

func (ServerlessLifecyclePolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerlessLifecyclePolicy)(nil)).Elem()
}

func (o ServerlessLifecyclePolicyMapOutput) ToServerlessLifecyclePolicyMapOutput() ServerlessLifecyclePolicyMapOutput {
	return o
}

func (o ServerlessLifecyclePolicyMapOutput) ToServerlessLifecyclePolicyMapOutputWithContext(ctx context.Context) ServerlessLifecyclePolicyMapOutput {
	return o
}

func (o ServerlessLifecyclePolicyMapOutput) MapIndex(k pulumi.StringInput) ServerlessLifecyclePolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServerlessLifecyclePolicy {
		return vs[0].(map[string]*ServerlessLifecyclePolicy)[vs[1].(string)]
	}).(ServerlessLifecyclePolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerlessLifecyclePolicyInput)(nil)).Elem(), &ServerlessLifecyclePolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerlessLifecyclePolicyArrayInput)(nil)).Elem(), ServerlessLifecyclePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerlessLifecyclePolicyMapInput)(nil)).Elem(), ServerlessLifecyclePolicyMap{})
	pulumi.RegisterOutputType(ServerlessLifecyclePolicyOutput{})
	pulumi.RegisterOutputType(ServerlessLifecyclePolicyArrayOutput{})
	pulumi.RegisterOutputType(ServerlessLifecyclePolicyMapOutput{})
}
