// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package storagegateway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type StoredIscsiVolume struct {
	pulumi.CustomResourceState

	Arn                    pulumi.StringOutput    `pulumi:"arn"`
	ChapEnabled            pulumi.BoolOutput      `pulumi:"chapEnabled"`
	DiskId                 pulumi.StringOutput    `pulumi:"diskId"`
	GatewayArn             pulumi.StringOutput    `pulumi:"gatewayArn"`
	KmsEncrypted           pulumi.BoolPtrOutput   `pulumi:"kmsEncrypted"`
	KmsKey                 pulumi.StringPtrOutput `pulumi:"kmsKey"`
	LunNumber              pulumi.IntOutput       `pulumi:"lunNumber"`
	NetworkInterfaceId     pulumi.StringOutput    `pulumi:"networkInterfaceId"`
	NetworkInterfacePort   pulumi.IntOutput       `pulumi:"networkInterfacePort"`
	PreserveExistingData   pulumi.BoolOutput      `pulumi:"preserveExistingData"`
	SnapshotId             pulumi.StringPtrOutput `pulumi:"snapshotId"`
	Tags                   pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll                pulumi.StringMapOutput `pulumi:"tagsAll"`
	TargetArn              pulumi.StringOutput    `pulumi:"targetArn"`
	TargetName             pulumi.StringOutput    `pulumi:"targetName"`
	VolumeAttachmentStatus pulumi.StringOutput    `pulumi:"volumeAttachmentStatus"`
	VolumeId               pulumi.StringOutput    `pulumi:"volumeId"`
	VolumeSizeInBytes      pulumi.IntOutput       `pulumi:"volumeSizeInBytes"`
	VolumeStatus           pulumi.StringOutput    `pulumi:"volumeStatus"`
	VolumeType             pulumi.StringOutput    `pulumi:"volumeType"`
}

// NewStoredIscsiVolume registers a new resource with the given unique name, arguments, and options.
func NewStoredIscsiVolume(ctx *pulumi.Context,
	name string, args *StoredIscsiVolumeArgs, opts ...pulumi.ResourceOption) (*StoredIscsiVolume, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DiskId == nil {
		return nil, errors.New("invalid value for required argument 'DiskId'")
	}
	if args.GatewayArn == nil {
		return nil, errors.New("invalid value for required argument 'GatewayArn'")
	}
	if args.NetworkInterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkInterfaceId'")
	}
	if args.PreserveExistingData == nil {
		return nil, errors.New("invalid value for required argument 'PreserveExistingData'")
	}
	if args.TargetName == nil {
		return nil, errors.New("invalid value for required argument 'TargetName'")
	}
	var resource StoredIscsiVolume
	err := ctx.RegisterResource("aws:storagegateway/storedIscsiVolume:StoredIscsiVolume", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStoredIscsiVolume gets an existing StoredIscsiVolume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStoredIscsiVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StoredIscsiVolumeState, opts ...pulumi.ResourceOption) (*StoredIscsiVolume, error) {
	var resource StoredIscsiVolume
	err := ctx.ReadResource("aws:storagegateway/storedIscsiVolume:StoredIscsiVolume", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StoredIscsiVolume resources.
type storedIscsiVolumeState struct {
	Arn                    *string           `pulumi:"arn"`
	ChapEnabled            *bool             `pulumi:"chapEnabled"`
	DiskId                 *string           `pulumi:"diskId"`
	GatewayArn             *string           `pulumi:"gatewayArn"`
	KmsEncrypted           *bool             `pulumi:"kmsEncrypted"`
	KmsKey                 *string           `pulumi:"kmsKey"`
	LunNumber              *int              `pulumi:"lunNumber"`
	NetworkInterfaceId     *string           `pulumi:"networkInterfaceId"`
	NetworkInterfacePort   *int              `pulumi:"networkInterfacePort"`
	PreserveExistingData   *bool             `pulumi:"preserveExistingData"`
	SnapshotId             *string           `pulumi:"snapshotId"`
	Tags                   map[string]string `pulumi:"tags"`
	TagsAll                map[string]string `pulumi:"tagsAll"`
	TargetArn              *string           `pulumi:"targetArn"`
	TargetName             *string           `pulumi:"targetName"`
	VolumeAttachmentStatus *string           `pulumi:"volumeAttachmentStatus"`
	VolumeId               *string           `pulumi:"volumeId"`
	VolumeSizeInBytes      *int              `pulumi:"volumeSizeInBytes"`
	VolumeStatus           *string           `pulumi:"volumeStatus"`
	VolumeType             *string           `pulumi:"volumeType"`
}

type StoredIscsiVolumeState struct {
	Arn                    pulumi.StringPtrInput
	ChapEnabled            pulumi.BoolPtrInput
	DiskId                 pulumi.StringPtrInput
	GatewayArn             pulumi.StringPtrInput
	KmsEncrypted           pulumi.BoolPtrInput
	KmsKey                 pulumi.StringPtrInput
	LunNumber              pulumi.IntPtrInput
	NetworkInterfaceId     pulumi.StringPtrInput
	NetworkInterfacePort   pulumi.IntPtrInput
	PreserveExistingData   pulumi.BoolPtrInput
	SnapshotId             pulumi.StringPtrInput
	Tags                   pulumi.StringMapInput
	TagsAll                pulumi.StringMapInput
	TargetArn              pulumi.StringPtrInput
	TargetName             pulumi.StringPtrInput
	VolumeAttachmentStatus pulumi.StringPtrInput
	VolumeId               pulumi.StringPtrInput
	VolumeSizeInBytes      pulumi.IntPtrInput
	VolumeStatus           pulumi.StringPtrInput
	VolumeType             pulumi.StringPtrInput
}

func (StoredIscsiVolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*storedIscsiVolumeState)(nil)).Elem()
}

type storedIscsiVolumeArgs struct {
	DiskId               string            `pulumi:"diskId"`
	GatewayArn           string            `pulumi:"gatewayArn"`
	KmsEncrypted         *bool             `pulumi:"kmsEncrypted"`
	KmsKey               *string           `pulumi:"kmsKey"`
	NetworkInterfaceId   string            `pulumi:"networkInterfaceId"`
	PreserveExistingData bool              `pulumi:"preserveExistingData"`
	SnapshotId           *string           `pulumi:"snapshotId"`
	Tags                 map[string]string `pulumi:"tags"`
	TargetName           string            `pulumi:"targetName"`
}

// The set of arguments for constructing a StoredIscsiVolume resource.
type StoredIscsiVolumeArgs struct {
	DiskId               pulumi.StringInput
	GatewayArn           pulumi.StringInput
	KmsEncrypted         pulumi.BoolPtrInput
	KmsKey               pulumi.StringPtrInput
	NetworkInterfaceId   pulumi.StringInput
	PreserveExistingData pulumi.BoolInput
	SnapshotId           pulumi.StringPtrInput
	Tags                 pulumi.StringMapInput
	TargetName           pulumi.StringInput
}

func (StoredIscsiVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*storedIscsiVolumeArgs)(nil)).Elem()
}

type StoredIscsiVolumeInput interface {
	pulumi.Input

	ToStoredIscsiVolumeOutput() StoredIscsiVolumeOutput
	ToStoredIscsiVolumeOutputWithContext(ctx context.Context) StoredIscsiVolumeOutput
}

func (*StoredIscsiVolume) ElementType() reflect.Type {
	return reflect.TypeOf((**StoredIscsiVolume)(nil)).Elem()
}

func (i *StoredIscsiVolume) ToStoredIscsiVolumeOutput() StoredIscsiVolumeOutput {
	return i.ToStoredIscsiVolumeOutputWithContext(context.Background())
}

func (i *StoredIscsiVolume) ToStoredIscsiVolumeOutputWithContext(ctx context.Context) StoredIscsiVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoredIscsiVolumeOutput)
}

// StoredIscsiVolumeArrayInput is an input type that accepts StoredIscsiVolumeArray and StoredIscsiVolumeArrayOutput values.
// You can construct a concrete instance of `StoredIscsiVolumeArrayInput` via:
//
//	StoredIscsiVolumeArray{ StoredIscsiVolumeArgs{...} }
type StoredIscsiVolumeArrayInput interface {
	pulumi.Input

	ToStoredIscsiVolumeArrayOutput() StoredIscsiVolumeArrayOutput
	ToStoredIscsiVolumeArrayOutputWithContext(context.Context) StoredIscsiVolumeArrayOutput
}

type StoredIscsiVolumeArray []StoredIscsiVolumeInput

func (StoredIscsiVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StoredIscsiVolume)(nil)).Elem()
}

func (i StoredIscsiVolumeArray) ToStoredIscsiVolumeArrayOutput() StoredIscsiVolumeArrayOutput {
	return i.ToStoredIscsiVolumeArrayOutputWithContext(context.Background())
}

func (i StoredIscsiVolumeArray) ToStoredIscsiVolumeArrayOutputWithContext(ctx context.Context) StoredIscsiVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoredIscsiVolumeArrayOutput)
}

// StoredIscsiVolumeMapInput is an input type that accepts StoredIscsiVolumeMap and StoredIscsiVolumeMapOutput values.
// You can construct a concrete instance of `StoredIscsiVolumeMapInput` via:
//
//	StoredIscsiVolumeMap{ "key": StoredIscsiVolumeArgs{...} }
type StoredIscsiVolumeMapInput interface {
	pulumi.Input

	ToStoredIscsiVolumeMapOutput() StoredIscsiVolumeMapOutput
	ToStoredIscsiVolumeMapOutputWithContext(context.Context) StoredIscsiVolumeMapOutput
}

type StoredIscsiVolumeMap map[string]StoredIscsiVolumeInput

func (StoredIscsiVolumeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StoredIscsiVolume)(nil)).Elem()
}

func (i StoredIscsiVolumeMap) ToStoredIscsiVolumeMapOutput() StoredIscsiVolumeMapOutput {
	return i.ToStoredIscsiVolumeMapOutputWithContext(context.Background())
}

func (i StoredIscsiVolumeMap) ToStoredIscsiVolumeMapOutputWithContext(ctx context.Context) StoredIscsiVolumeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoredIscsiVolumeMapOutput)
}

type StoredIscsiVolumeOutput struct{ *pulumi.OutputState }

func (StoredIscsiVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StoredIscsiVolume)(nil)).Elem()
}

func (o StoredIscsiVolumeOutput) ToStoredIscsiVolumeOutput() StoredIscsiVolumeOutput {
	return o
}

func (o StoredIscsiVolumeOutput) ToStoredIscsiVolumeOutputWithContext(ctx context.Context) StoredIscsiVolumeOutput {
	return o
}

func (o StoredIscsiVolumeOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *StoredIscsiVolume) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o StoredIscsiVolumeOutput) ChapEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *StoredIscsiVolume) pulumi.BoolOutput { return v.ChapEnabled }).(pulumi.BoolOutput)
}

func (o StoredIscsiVolumeOutput) DiskId() pulumi.StringOutput {
	return o.ApplyT(func(v *StoredIscsiVolume) pulumi.StringOutput { return v.DiskId }).(pulumi.StringOutput)
}

func (o StoredIscsiVolumeOutput) GatewayArn() pulumi.StringOutput {
	return o.ApplyT(func(v *StoredIscsiVolume) pulumi.StringOutput { return v.GatewayArn }).(pulumi.StringOutput)
}

func (o StoredIscsiVolumeOutput) KmsEncrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StoredIscsiVolume) pulumi.BoolPtrOutput { return v.KmsEncrypted }).(pulumi.BoolPtrOutput)
}

func (o StoredIscsiVolumeOutput) KmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StoredIscsiVolume) pulumi.StringPtrOutput { return v.KmsKey }).(pulumi.StringPtrOutput)
}

func (o StoredIscsiVolumeOutput) LunNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *StoredIscsiVolume) pulumi.IntOutput { return v.LunNumber }).(pulumi.IntOutput)
}

func (o StoredIscsiVolumeOutput) NetworkInterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *StoredIscsiVolume) pulumi.StringOutput { return v.NetworkInterfaceId }).(pulumi.StringOutput)
}

func (o StoredIscsiVolumeOutput) NetworkInterfacePort() pulumi.IntOutput {
	return o.ApplyT(func(v *StoredIscsiVolume) pulumi.IntOutput { return v.NetworkInterfacePort }).(pulumi.IntOutput)
}

func (o StoredIscsiVolumeOutput) PreserveExistingData() pulumi.BoolOutput {
	return o.ApplyT(func(v *StoredIscsiVolume) pulumi.BoolOutput { return v.PreserveExistingData }).(pulumi.BoolOutput)
}

func (o StoredIscsiVolumeOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StoredIscsiVolume) pulumi.StringPtrOutput { return v.SnapshotId }).(pulumi.StringPtrOutput)
}

func (o StoredIscsiVolumeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StoredIscsiVolume) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o StoredIscsiVolumeOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StoredIscsiVolume) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o StoredIscsiVolumeOutput) TargetArn() pulumi.StringOutput {
	return o.ApplyT(func(v *StoredIscsiVolume) pulumi.StringOutput { return v.TargetArn }).(pulumi.StringOutput)
}

func (o StoredIscsiVolumeOutput) TargetName() pulumi.StringOutput {
	return o.ApplyT(func(v *StoredIscsiVolume) pulumi.StringOutput { return v.TargetName }).(pulumi.StringOutput)
}

func (o StoredIscsiVolumeOutput) VolumeAttachmentStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *StoredIscsiVolume) pulumi.StringOutput { return v.VolumeAttachmentStatus }).(pulumi.StringOutput)
}

func (o StoredIscsiVolumeOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v *StoredIscsiVolume) pulumi.StringOutput { return v.VolumeId }).(pulumi.StringOutput)
}

func (o StoredIscsiVolumeOutput) VolumeSizeInBytes() pulumi.IntOutput {
	return o.ApplyT(func(v *StoredIscsiVolume) pulumi.IntOutput { return v.VolumeSizeInBytes }).(pulumi.IntOutput)
}

func (o StoredIscsiVolumeOutput) VolumeStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *StoredIscsiVolume) pulumi.StringOutput { return v.VolumeStatus }).(pulumi.StringOutput)
}

func (o StoredIscsiVolumeOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v *StoredIscsiVolume) pulumi.StringOutput { return v.VolumeType }).(pulumi.StringOutput)
}

type StoredIscsiVolumeArrayOutput struct{ *pulumi.OutputState }

func (StoredIscsiVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StoredIscsiVolume)(nil)).Elem()
}

func (o StoredIscsiVolumeArrayOutput) ToStoredIscsiVolumeArrayOutput() StoredIscsiVolumeArrayOutput {
	return o
}

func (o StoredIscsiVolumeArrayOutput) ToStoredIscsiVolumeArrayOutputWithContext(ctx context.Context) StoredIscsiVolumeArrayOutput {
	return o
}

func (o StoredIscsiVolumeArrayOutput) Index(i pulumi.IntInput) StoredIscsiVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StoredIscsiVolume {
		return vs[0].([]*StoredIscsiVolume)[vs[1].(int)]
	}).(StoredIscsiVolumeOutput)
}

type StoredIscsiVolumeMapOutput struct{ *pulumi.OutputState }

func (StoredIscsiVolumeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StoredIscsiVolume)(nil)).Elem()
}

func (o StoredIscsiVolumeMapOutput) ToStoredIscsiVolumeMapOutput() StoredIscsiVolumeMapOutput {
	return o
}

func (o StoredIscsiVolumeMapOutput) ToStoredIscsiVolumeMapOutputWithContext(ctx context.Context) StoredIscsiVolumeMapOutput {
	return o
}

func (o StoredIscsiVolumeMapOutput) MapIndex(k pulumi.StringInput) StoredIscsiVolumeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StoredIscsiVolume {
		return vs[0].(map[string]*StoredIscsiVolume)[vs[1].(string)]
	}).(StoredIscsiVolumeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StoredIscsiVolumeInput)(nil)).Elem(), &StoredIscsiVolume{})
	pulumi.RegisterInputType(reflect.TypeOf((*StoredIscsiVolumeArrayInput)(nil)).Elem(), StoredIscsiVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StoredIscsiVolumeMapInput)(nil)).Elem(), StoredIscsiVolumeMap{})
	pulumi.RegisterOutputType(StoredIscsiVolumeOutput{})
	pulumi.RegisterOutputType(StoredIscsiVolumeArrayOutput{})
	pulumi.RegisterOutputType(StoredIscsiVolumeMapOutput{})
}
