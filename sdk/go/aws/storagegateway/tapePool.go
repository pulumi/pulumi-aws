// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package storagegateway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TapePool struct {
	pulumi.CustomResourceState

	Arn                     pulumi.StringOutput    `pulumi:"arn"`
	PoolName                pulumi.StringOutput    `pulumi:"poolName"`
	RetentionLockTimeInDays pulumi.IntPtrOutput    `pulumi:"retentionLockTimeInDays"`
	RetentionLockType       pulumi.StringPtrOutput `pulumi:"retentionLockType"`
	StorageClass            pulumi.StringOutput    `pulumi:"storageClass"`
	Tags                    pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll                 pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewTapePool registers a new resource with the given unique name, arguments, and options.
func NewTapePool(ctx *pulumi.Context,
	name string, args *TapePoolArgs, opts ...pulumi.ResourceOption) (*TapePool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PoolName == nil {
		return nil, errors.New("invalid value for required argument 'PoolName'")
	}
	if args.StorageClass == nil {
		return nil, errors.New("invalid value for required argument 'StorageClass'")
	}
	var resource TapePool
	err := ctx.RegisterResource("aws:storagegateway/tapePool:TapePool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTapePool gets an existing TapePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTapePool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TapePoolState, opts ...pulumi.ResourceOption) (*TapePool, error) {
	var resource TapePool
	err := ctx.ReadResource("aws:storagegateway/tapePool:TapePool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TapePool resources.
type tapePoolState struct {
	Arn                     *string           `pulumi:"arn"`
	PoolName                *string           `pulumi:"poolName"`
	RetentionLockTimeInDays *int              `pulumi:"retentionLockTimeInDays"`
	RetentionLockType       *string           `pulumi:"retentionLockType"`
	StorageClass            *string           `pulumi:"storageClass"`
	Tags                    map[string]string `pulumi:"tags"`
	TagsAll                 map[string]string `pulumi:"tagsAll"`
}

type TapePoolState struct {
	Arn                     pulumi.StringPtrInput
	PoolName                pulumi.StringPtrInput
	RetentionLockTimeInDays pulumi.IntPtrInput
	RetentionLockType       pulumi.StringPtrInput
	StorageClass            pulumi.StringPtrInput
	Tags                    pulumi.StringMapInput
	TagsAll                 pulumi.StringMapInput
}

func (TapePoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*tapePoolState)(nil)).Elem()
}

type tapePoolArgs struct {
	PoolName                string            `pulumi:"poolName"`
	RetentionLockTimeInDays *int              `pulumi:"retentionLockTimeInDays"`
	RetentionLockType       *string           `pulumi:"retentionLockType"`
	StorageClass            string            `pulumi:"storageClass"`
	Tags                    map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a TapePool resource.
type TapePoolArgs struct {
	PoolName                pulumi.StringInput
	RetentionLockTimeInDays pulumi.IntPtrInput
	RetentionLockType       pulumi.StringPtrInput
	StorageClass            pulumi.StringInput
	Tags                    pulumi.StringMapInput
}

func (TapePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tapePoolArgs)(nil)).Elem()
}

type TapePoolInput interface {
	pulumi.Input

	ToTapePoolOutput() TapePoolOutput
	ToTapePoolOutputWithContext(ctx context.Context) TapePoolOutput
}

func (*TapePool) ElementType() reflect.Type {
	return reflect.TypeOf((**TapePool)(nil)).Elem()
}

func (i *TapePool) ToTapePoolOutput() TapePoolOutput {
	return i.ToTapePoolOutputWithContext(context.Background())
}

func (i *TapePool) ToTapePoolOutputWithContext(ctx context.Context) TapePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TapePoolOutput)
}

// TapePoolArrayInput is an input type that accepts TapePoolArray and TapePoolArrayOutput values.
// You can construct a concrete instance of `TapePoolArrayInput` via:
//
//	TapePoolArray{ TapePoolArgs{...} }
type TapePoolArrayInput interface {
	pulumi.Input

	ToTapePoolArrayOutput() TapePoolArrayOutput
	ToTapePoolArrayOutputWithContext(context.Context) TapePoolArrayOutput
}

type TapePoolArray []TapePoolInput

func (TapePoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TapePool)(nil)).Elem()
}

func (i TapePoolArray) ToTapePoolArrayOutput() TapePoolArrayOutput {
	return i.ToTapePoolArrayOutputWithContext(context.Background())
}

func (i TapePoolArray) ToTapePoolArrayOutputWithContext(ctx context.Context) TapePoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TapePoolArrayOutput)
}

// TapePoolMapInput is an input type that accepts TapePoolMap and TapePoolMapOutput values.
// You can construct a concrete instance of `TapePoolMapInput` via:
//
//	TapePoolMap{ "key": TapePoolArgs{...} }
type TapePoolMapInput interface {
	pulumi.Input

	ToTapePoolMapOutput() TapePoolMapOutput
	ToTapePoolMapOutputWithContext(context.Context) TapePoolMapOutput
}

type TapePoolMap map[string]TapePoolInput

func (TapePoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TapePool)(nil)).Elem()
}

func (i TapePoolMap) ToTapePoolMapOutput() TapePoolMapOutput {
	return i.ToTapePoolMapOutputWithContext(context.Background())
}

func (i TapePoolMap) ToTapePoolMapOutputWithContext(ctx context.Context) TapePoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TapePoolMapOutput)
}

type TapePoolOutput struct{ *pulumi.OutputState }

func (TapePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TapePool)(nil)).Elem()
}

func (o TapePoolOutput) ToTapePoolOutput() TapePoolOutput {
	return o
}

func (o TapePoolOutput) ToTapePoolOutputWithContext(ctx context.Context) TapePoolOutput {
	return o
}

func (o TapePoolOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *TapePool) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o TapePoolOutput) PoolName() pulumi.StringOutput {
	return o.ApplyT(func(v *TapePool) pulumi.StringOutput { return v.PoolName }).(pulumi.StringOutput)
}

func (o TapePoolOutput) RetentionLockTimeInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TapePool) pulumi.IntPtrOutput { return v.RetentionLockTimeInDays }).(pulumi.IntPtrOutput)
}

func (o TapePoolOutput) RetentionLockType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TapePool) pulumi.StringPtrOutput { return v.RetentionLockType }).(pulumi.StringPtrOutput)
}

func (o TapePoolOutput) StorageClass() pulumi.StringOutput {
	return o.ApplyT(func(v *TapePool) pulumi.StringOutput { return v.StorageClass }).(pulumi.StringOutput)
}

func (o TapePoolOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TapePool) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o TapePoolOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TapePool) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type TapePoolArrayOutput struct{ *pulumi.OutputState }

func (TapePoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TapePool)(nil)).Elem()
}

func (o TapePoolArrayOutput) ToTapePoolArrayOutput() TapePoolArrayOutput {
	return o
}

func (o TapePoolArrayOutput) ToTapePoolArrayOutputWithContext(ctx context.Context) TapePoolArrayOutput {
	return o
}

func (o TapePoolArrayOutput) Index(i pulumi.IntInput) TapePoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TapePool {
		return vs[0].([]*TapePool)[vs[1].(int)]
	}).(TapePoolOutput)
}

type TapePoolMapOutput struct{ *pulumi.OutputState }

func (TapePoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TapePool)(nil)).Elem()
}

func (o TapePoolMapOutput) ToTapePoolMapOutput() TapePoolMapOutput {
	return o
}

func (o TapePoolMapOutput) ToTapePoolMapOutputWithContext(ctx context.Context) TapePoolMapOutput {
	return o
}

func (o TapePoolMapOutput) MapIndex(k pulumi.StringInput) TapePoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TapePool {
		return vs[0].(map[string]*TapePool)[vs[1].(string)]
	}).(TapePoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TapePoolInput)(nil)).Elem(), &TapePool{})
	pulumi.RegisterInputType(reflect.TypeOf((*TapePoolArrayInput)(nil)).Elem(), TapePoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TapePoolMapInput)(nil)).Elem(), TapePoolMap{})
	pulumi.RegisterOutputType(TapePoolOutput{})
	pulumi.RegisterOutputType(TapePoolArrayOutput{})
	pulumi.RegisterOutputType(TapePoolMapOutput{})
}
