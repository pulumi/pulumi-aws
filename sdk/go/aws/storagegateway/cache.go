// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package storagegateway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Cache struct {
	pulumi.CustomResourceState

	DiskId     pulumi.StringOutput `pulumi:"diskId"`
	GatewayArn pulumi.StringOutput `pulumi:"gatewayArn"`
}

// NewCache registers a new resource with the given unique name, arguments, and options.
func NewCache(ctx *pulumi.Context,
	name string, args *CacheArgs, opts ...pulumi.ResourceOption) (*Cache, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DiskId == nil {
		return nil, errors.New("invalid value for required argument 'DiskId'")
	}
	if args.GatewayArn == nil {
		return nil, errors.New("invalid value for required argument 'GatewayArn'")
	}
	var resource Cache
	err := ctx.RegisterResource("aws:storagegateway/cache:Cache", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCache gets an existing Cache resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCache(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CacheState, opts ...pulumi.ResourceOption) (*Cache, error) {
	var resource Cache
	err := ctx.ReadResource("aws:storagegateway/cache:Cache", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cache resources.
type cacheState struct {
	DiskId     *string `pulumi:"diskId"`
	GatewayArn *string `pulumi:"gatewayArn"`
}

type CacheState struct {
	DiskId     pulumi.StringPtrInput
	GatewayArn pulumi.StringPtrInput
}

func (CacheState) ElementType() reflect.Type {
	return reflect.TypeOf((*cacheState)(nil)).Elem()
}

type cacheArgs struct {
	DiskId     string `pulumi:"diskId"`
	GatewayArn string `pulumi:"gatewayArn"`
}

// The set of arguments for constructing a Cache resource.
type CacheArgs struct {
	DiskId     pulumi.StringInput
	GatewayArn pulumi.StringInput
}

func (CacheArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cacheArgs)(nil)).Elem()
}

type CacheInput interface {
	pulumi.Input

	ToCacheOutput() CacheOutput
	ToCacheOutputWithContext(ctx context.Context) CacheOutput
}

func (*Cache) ElementType() reflect.Type {
	return reflect.TypeOf((**Cache)(nil)).Elem()
}

func (i *Cache) ToCacheOutput() CacheOutput {
	return i.ToCacheOutputWithContext(context.Background())
}

func (i *Cache) ToCacheOutputWithContext(ctx context.Context) CacheOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheOutput)
}

// CacheArrayInput is an input type that accepts CacheArray and CacheArrayOutput values.
// You can construct a concrete instance of `CacheArrayInput` via:
//
//	CacheArray{ CacheArgs{...} }
type CacheArrayInput interface {
	pulumi.Input

	ToCacheArrayOutput() CacheArrayOutput
	ToCacheArrayOutputWithContext(context.Context) CacheArrayOutput
}

type CacheArray []CacheInput

func (CacheArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cache)(nil)).Elem()
}

func (i CacheArray) ToCacheArrayOutput() CacheArrayOutput {
	return i.ToCacheArrayOutputWithContext(context.Background())
}

func (i CacheArray) ToCacheArrayOutputWithContext(ctx context.Context) CacheArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheArrayOutput)
}

// CacheMapInput is an input type that accepts CacheMap and CacheMapOutput values.
// You can construct a concrete instance of `CacheMapInput` via:
//
//	CacheMap{ "key": CacheArgs{...} }
type CacheMapInput interface {
	pulumi.Input

	ToCacheMapOutput() CacheMapOutput
	ToCacheMapOutputWithContext(context.Context) CacheMapOutput
}

type CacheMap map[string]CacheInput

func (CacheMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cache)(nil)).Elem()
}

func (i CacheMap) ToCacheMapOutput() CacheMapOutput {
	return i.ToCacheMapOutputWithContext(context.Background())
}

func (i CacheMap) ToCacheMapOutputWithContext(ctx context.Context) CacheMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheMapOutput)
}

type CacheOutput struct{ *pulumi.OutputState }

func (CacheOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cache)(nil)).Elem()
}

func (o CacheOutput) ToCacheOutput() CacheOutput {
	return o
}

func (o CacheOutput) ToCacheOutputWithContext(ctx context.Context) CacheOutput {
	return o
}

func (o CacheOutput) DiskId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cache) pulumi.StringOutput { return v.DiskId }).(pulumi.StringOutput)
}

func (o CacheOutput) GatewayArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Cache) pulumi.StringOutput { return v.GatewayArn }).(pulumi.StringOutput)
}

type CacheArrayOutput struct{ *pulumi.OutputState }

func (CacheArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cache)(nil)).Elem()
}

func (o CacheArrayOutput) ToCacheArrayOutput() CacheArrayOutput {
	return o
}

func (o CacheArrayOutput) ToCacheArrayOutputWithContext(ctx context.Context) CacheArrayOutput {
	return o
}

func (o CacheArrayOutput) Index(i pulumi.IntInput) CacheOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cache {
		return vs[0].([]*Cache)[vs[1].(int)]
	}).(CacheOutput)
}

type CacheMapOutput struct{ *pulumi.OutputState }

func (CacheMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cache)(nil)).Elem()
}

func (o CacheMapOutput) ToCacheMapOutput() CacheMapOutput {
	return o
}

func (o CacheMapOutput) ToCacheMapOutputWithContext(ctx context.Context) CacheMapOutput {
	return o
}

func (o CacheMapOutput) MapIndex(k pulumi.StringInput) CacheOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cache {
		return vs[0].(map[string]*Cache)[vs[1].(string)]
	}).(CacheOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CacheInput)(nil)).Elem(), &Cache{})
	pulumi.RegisterInputType(reflect.TypeOf((*CacheArrayInput)(nil)).Elem(), CacheArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CacheMapInput)(nil)).Elem(), CacheMap{})
	pulumi.RegisterOutputType(CacheOutput{})
	pulumi.RegisterOutputType(CacheArrayOutput{})
	pulumi.RegisterOutputType(CacheMapOutput{})
}
