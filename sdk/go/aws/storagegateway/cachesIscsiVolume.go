// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package storagegateway

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an AWS Storage Gateway cached iSCSI volume.
// 
// ~> **NOTE:** The gateway must have cache added (e.g. via the [`aws_storagegateway_cache`](https://www.terraform.io/docs/providers/aws/r/storagegateway_cache.html) resource) before creating volumes otherwise the Storage Gateway API will return an error.
// 
// ~> **NOTE:** The gateway must have an upload buffer added (e.g. via the [`aws_storagegateway_upload_buffer`](https://www.terraform.io/docs/providers/aws/r/storagegateway_upload_buffer.html) resource) before the volume is operational to clients, however the Storage Gateway API will allow volume creation without error in that case and return volume status as `UPLOAD BUFFER NOT CONFIGURED`.
type CachesIscsiVolume struct {
	s *pulumi.ResourceState
}

// NewCachesIscsiVolume registers a new resource with the given unique name, arguments, and options.
func NewCachesIscsiVolume(ctx *pulumi.Context,
	name string, args *CachesIscsiVolumeArgs, opts ...pulumi.ResourceOpt) (*CachesIscsiVolume, error) {
	if args == nil || args.GatewayArn == nil {
		return nil, errors.New("missing required argument 'GatewayArn'")
	}
	if args == nil || args.NetworkInterfaceId == nil {
		return nil, errors.New("missing required argument 'NetworkInterfaceId'")
	}
	if args == nil || args.TargetName == nil {
		return nil, errors.New("missing required argument 'TargetName'")
	}
	if args == nil || args.VolumeSizeInBytes == nil {
		return nil, errors.New("missing required argument 'VolumeSizeInBytes'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["gatewayArn"] = nil
		inputs["networkInterfaceId"] = nil
		inputs["snapshotId"] = nil
		inputs["sourceVolumeArn"] = nil
		inputs["targetName"] = nil
		inputs["volumeSizeInBytes"] = nil
	} else {
		inputs["gatewayArn"] = args.GatewayArn
		inputs["networkInterfaceId"] = args.NetworkInterfaceId
		inputs["snapshotId"] = args.SnapshotId
		inputs["sourceVolumeArn"] = args.SourceVolumeArn
		inputs["targetName"] = args.TargetName
		inputs["volumeSizeInBytes"] = args.VolumeSizeInBytes
	}
	inputs["arn"] = nil
	inputs["chapEnabled"] = nil
	inputs["lunNumber"] = nil
	inputs["networkInterfacePort"] = nil
	inputs["targetArn"] = nil
	inputs["volumeArn"] = nil
	inputs["volumeId"] = nil
	s, err := ctx.RegisterResource("aws:storagegateway/cachesIscsiVolume:CachesIscsiVolume", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &CachesIscsiVolume{s: s}, nil
}

// GetCachesIscsiVolume gets an existing CachesIscsiVolume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCachesIscsiVolume(ctx *pulumi.Context,
	name string, id pulumi.ID, state *CachesIscsiVolumeState, opts ...pulumi.ResourceOpt) (*CachesIscsiVolume, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["chapEnabled"] = state.ChapEnabled
		inputs["gatewayArn"] = state.GatewayArn
		inputs["lunNumber"] = state.LunNumber
		inputs["networkInterfaceId"] = state.NetworkInterfaceId
		inputs["networkInterfacePort"] = state.NetworkInterfacePort
		inputs["snapshotId"] = state.SnapshotId
		inputs["sourceVolumeArn"] = state.SourceVolumeArn
		inputs["targetArn"] = state.TargetArn
		inputs["targetName"] = state.TargetName
		inputs["volumeArn"] = state.VolumeArn
		inputs["volumeId"] = state.VolumeId
		inputs["volumeSizeInBytes"] = state.VolumeSizeInBytes
	}
	s, err := ctx.ReadResource("aws:storagegateway/cachesIscsiVolume:CachesIscsiVolume", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &CachesIscsiVolume{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *CachesIscsiVolume) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *CachesIscsiVolume) ID() *pulumi.IDOutput {
	return r.s.ID
}

// Volume Amazon Resource Name (ARN), e.g. `arn:aws:storagegateway:us-east-1:123456789012:gateway/sgw-12345678/volume/vol-12345678`.
func (r *CachesIscsiVolume) Arn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["arn"])
}

// Whether mutual CHAP is enabled for the iSCSI target.
func (r *CachesIscsiVolume) ChapEnabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["chapEnabled"])
}

// The Amazon Resource Name (ARN) of the gateway.
func (r *CachesIscsiVolume) GatewayArn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["gatewayArn"])
}

// Logical disk number.
func (r *CachesIscsiVolume) LunNumber() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["lunNumber"])
}

// The network interface of the gateway on which to expose the iSCSI target. Only IPv4 addresses are accepted.
func (r *CachesIscsiVolume) NetworkInterfaceId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["networkInterfaceId"])
}

// The port used to communicate with iSCSI targets.
func (r *CachesIscsiVolume) NetworkInterfacePort() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["networkInterfacePort"])
}

// The snapshot ID of the snapshot to restore as the new cached volume. e.g. `snap-1122aabb`.
func (r *CachesIscsiVolume) SnapshotId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["snapshotId"])
}

// The ARN for an existing volume. Specifying this ARN makes the new volume into an exact copy of the specified existing volume's latest recovery point. The `volume_size_in_bytes` value for this new volume must be equal to or larger than the size of the existing volume, in bytes.
func (r *CachesIscsiVolume) SourceVolumeArn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sourceVolumeArn"])
}

// Target Amazon Resource Name (ARN), e.g. `arn:aws:storagegateway:us-east-1:123456789012:gateway/sgw-12345678/target/iqn.1997-05.com.amazon:TargetName`.
func (r *CachesIscsiVolume) TargetArn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["targetArn"])
}

// The name of the iSCSI target used by initiators to connect to the target and as a suffix for the target ARN. The target name must be unique across all volumes of a gateway.
func (r *CachesIscsiVolume) TargetName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["targetName"])
}

// Volume Amazon Resource Name (ARN), e.g. `arn:aws:storagegateway:us-east-1:123456789012:gateway/sgw-12345678/volume/vol-12345678`.
func (r *CachesIscsiVolume) VolumeArn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["volumeArn"])
}

// Volume ID, e.g. `vol-12345678`.
func (r *CachesIscsiVolume) VolumeId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["volumeId"])
}

// The size of the volume in bytes.
func (r *CachesIscsiVolume) VolumeSizeInBytes() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["volumeSizeInBytes"])
}

// Input properties used for looking up and filtering CachesIscsiVolume resources.
type CachesIscsiVolumeState struct {
	// Volume Amazon Resource Name (ARN), e.g. `arn:aws:storagegateway:us-east-1:123456789012:gateway/sgw-12345678/volume/vol-12345678`.
	Arn interface{}
	// Whether mutual CHAP is enabled for the iSCSI target.
	ChapEnabled interface{}
	// The Amazon Resource Name (ARN) of the gateway.
	GatewayArn interface{}
	// Logical disk number.
	LunNumber interface{}
	// The network interface of the gateway on which to expose the iSCSI target. Only IPv4 addresses are accepted.
	NetworkInterfaceId interface{}
	// The port used to communicate with iSCSI targets.
	NetworkInterfacePort interface{}
	// The snapshot ID of the snapshot to restore as the new cached volume. e.g. `snap-1122aabb`.
	SnapshotId interface{}
	// The ARN for an existing volume. Specifying this ARN makes the new volume into an exact copy of the specified existing volume's latest recovery point. The `volume_size_in_bytes` value for this new volume must be equal to or larger than the size of the existing volume, in bytes.
	SourceVolumeArn interface{}
	// Target Amazon Resource Name (ARN), e.g. `arn:aws:storagegateway:us-east-1:123456789012:gateway/sgw-12345678/target/iqn.1997-05.com.amazon:TargetName`.
	TargetArn interface{}
	// The name of the iSCSI target used by initiators to connect to the target and as a suffix for the target ARN. The target name must be unique across all volumes of a gateway.
	TargetName interface{}
	// Volume Amazon Resource Name (ARN), e.g. `arn:aws:storagegateway:us-east-1:123456789012:gateway/sgw-12345678/volume/vol-12345678`.
	VolumeArn interface{}
	// Volume ID, e.g. `vol-12345678`.
	VolumeId interface{}
	// The size of the volume in bytes.
	VolumeSizeInBytes interface{}
}

// The set of arguments for constructing a CachesIscsiVolume resource.
type CachesIscsiVolumeArgs struct {
	// The Amazon Resource Name (ARN) of the gateway.
	GatewayArn interface{}
	// The network interface of the gateway on which to expose the iSCSI target. Only IPv4 addresses are accepted.
	NetworkInterfaceId interface{}
	// The snapshot ID of the snapshot to restore as the new cached volume. e.g. `snap-1122aabb`.
	SnapshotId interface{}
	// The ARN for an existing volume. Specifying this ARN makes the new volume into an exact copy of the specified existing volume's latest recovery point. The `volume_size_in_bytes` value for this new volume must be equal to or larger than the size of the existing volume, in bytes.
	SourceVolumeArn interface{}
	// The name of the iSCSI target used by initiators to connect to the target and as a suffix for the target ARN. The target name must be unique across all volumes of a gateway.
	TargetName interface{}
	// The size of the volume in bytes.
	VolumeSizeInBytes interface{}
}
