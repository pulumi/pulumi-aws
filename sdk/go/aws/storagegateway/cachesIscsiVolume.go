// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package storagegateway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CachesIscsiVolume struct {
	pulumi.CustomResourceState

	Arn                  pulumi.StringOutput    `pulumi:"arn"`
	ChapEnabled          pulumi.BoolOutput      `pulumi:"chapEnabled"`
	GatewayArn           pulumi.StringOutput    `pulumi:"gatewayArn"`
	KmsEncrypted         pulumi.BoolPtrOutput   `pulumi:"kmsEncrypted"`
	KmsKey               pulumi.StringPtrOutput `pulumi:"kmsKey"`
	LunNumber            pulumi.IntOutput       `pulumi:"lunNumber"`
	NetworkInterfaceId   pulumi.StringOutput    `pulumi:"networkInterfaceId"`
	NetworkInterfacePort pulumi.IntOutput       `pulumi:"networkInterfacePort"`
	SnapshotId           pulumi.StringPtrOutput `pulumi:"snapshotId"`
	SourceVolumeArn      pulumi.StringPtrOutput `pulumi:"sourceVolumeArn"`
	Tags                 pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll              pulumi.StringMapOutput `pulumi:"tagsAll"`
	TargetArn            pulumi.StringOutput    `pulumi:"targetArn"`
	TargetName           pulumi.StringOutput    `pulumi:"targetName"`
	VolumeArn            pulumi.StringOutput    `pulumi:"volumeArn"`
	VolumeId             pulumi.StringOutput    `pulumi:"volumeId"`
	VolumeSizeInBytes    pulumi.IntOutput       `pulumi:"volumeSizeInBytes"`
}

// NewCachesIscsiVolume registers a new resource with the given unique name, arguments, and options.
func NewCachesIscsiVolume(ctx *pulumi.Context,
	name string, args *CachesIscsiVolumeArgs, opts ...pulumi.ResourceOption) (*CachesIscsiVolume, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GatewayArn == nil {
		return nil, errors.New("invalid value for required argument 'GatewayArn'")
	}
	if args.NetworkInterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkInterfaceId'")
	}
	if args.TargetName == nil {
		return nil, errors.New("invalid value for required argument 'TargetName'")
	}
	if args.VolumeSizeInBytes == nil {
		return nil, errors.New("invalid value for required argument 'VolumeSizeInBytes'")
	}
	var resource CachesIscsiVolume
	err := ctx.RegisterResource("aws:storagegateway/cachesIscsiVolume:CachesIscsiVolume", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCachesIscsiVolume gets an existing CachesIscsiVolume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCachesIscsiVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CachesIscsiVolumeState, opts ...pulumi.ResourceOption) (*CachesIscsiVolume, error) {
	var resource CachesIscsiVolume
	err := ctx.ReadResource("aws:storagegateway/cachesIscsiVolume:CachesIscsiVolume", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CachesIscsiVolume resources.
type cachesIscsiVolumeState struct {
	Arn                  *string           `pulumi:"arn"`
	ChapEnabled          *bool             `pulumi:"chapEnabled"`
	GatewayArn           *string           `pulumi:"gatewayArn"`
	KmsEncrypted         *bool             `pulumi:"kmsEncrypted"`
	KmsKey               *string           `pulumi:"kmsKey"`
	LunNumber            *int              `pulumi:"lunNumber"`
	NetworkInterfaceId   *string           `pulumi:"networkInterfaceId"`
	NetworkInterfacePort *int              `pulumi:"networkInterfacePort"`
	SnapshotId           *string           `pulumi:"snapshotId"`
	SourceVolumeArn      *string           `pulumi:"sourceVolumeArn"`
	Tags                 map[string]string `pulumi:"tags"`
	TagsAll              map[string]string `pulumi:"tagsAll"`
	TargetArn            *string           `pulumi:"targetArn"`
	TargetName           *string           `pulumi:"targetName"`
	VolumeArn            *string           `pulumi:"volumeArn"`
	VolumeId             *string           `pulumi:"volumeId"`
	VolumeSizeInBytes    *int              `pulumi:"volumeSizeInBytes"`
}

type CachesIscsiVolumeState struct {
	Arn                  pulumi.StringPtrInput
	ChapEnabled          pulumi.BoolPtrInput
	GatewayArn           pulumi.StringPtrInput
	KmsEncrypted         pulumi.BoolPtrInput
	KmsKey               pulumi.StringPtrInput
	LunNumber            pulumi.IntPtrInput
	NetworkInterfaceId   pulumi.StringPtrInput
	NetworkInterfacePort pulumi.IntPtrInput
	SnapshotId           pulumi.StringPtrInput
	SourceVolumeArn      pulumi.StringPtrInput
	Tags                 pulumi.StringMapInput
	TagsAll              pulumi.StringMapInput
	TargetArn            pulumi.StringPtrInput
	TargetName           pulumi.StringPtrInput
	VolumeArn            pulumi.StringPtrInput
	VolumeId             pulumi.StringPtrInput
	VolumeSizeInBytes    pulumi.IntPtrInput
}

func (CachesIscsiVolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*cachesIscsiVolumeState)(nil)).Elem()
}

type cachesIscsiVolumeArgs struct {
	GatewayArn         string            `pulumi:"gatewayArn"`
	KmsEncrypted       *bool             `pulumi:"kmsEncrypted"`
	KmsKey             *string           `pulumi:"kmsKey"`
	NetworkInterfaceId string            `pulumi:"networkInterfaceId"`
	SnapshotId         *string           `pulumi:"snapshotId"`
	SourceVolumeArn    *string           `pulumi:"sourceVolumeArn"`
	Tags               map[string]string `pulumi:"tags"`
	TargetName         string            `pulumi:"targetName"`
	VolumeSizeInBytes  int               `pulumi:"volumeSizeInBytes"`
}

// The set of arguments for constructing a CachesIscsiVolume resource.
type CachesIscsiVolumeArgs struct {
	GatewayArn         pulumi.StringInput
	KmsEncrypted       pulumi.BoolPtrInput
	KmsKey             pulumi.StringPtrInput
	NetworkInterfaceId pulumi.StringInput
	SnapshotId         pulumi.StringPtrInput
	SourceVolumeArn    pulumi.StringPtrInput
	Tags               pulumi.StringMapInput
	TargetName         pulumi.StringInput
	VolumeSizeInBytes  pulumi.IntInput
}

func (CachesIscsiVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cachesIscsiVolumeArgs)(nil)).Elem()
}

type CachesIscsiVolumeInput interface {
	pulumi.Input

	ToCachesIscsiVolumeOutput() CachesIscsiVolumeOutput
	ToCachesIscsiVolumeOutputWithContext(ctx context.Context) CachesIscsiVolumeOutput
}

func (*CachesIscsiVolume) ElementType() reflect.Type {
	return reflect.TypeOf((**CachesIscsiVolume)(nil)).Elem()
}

func (i *CachesIscsiVolume) ToCachesIscsiVolumeOutput() CachesIscsiVolumeOutput {
	return i.ToCachesIscsiVolumeOutputWithContext(context.Background())
}

func (i *CachesIscsiVolume) ToCachesIscsiVolumeOutputWithContext(ctx context.Context) CachesIscsiVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CachesIscsiVolumeOutput)
}

// CachesIscsiVolumeArrayInput is an input type that accepts CachesIscsiVolumeArray and CachesIscsiVolumeArrayOutput values.
// You can construct a concrete instance of `CachesIscsiVolumeArrayInput` via:
//
//	CachesIscsiVolumeArray{ CachesIscsiVolumeArgs{...} }
type CachesIscsiVolumeArrayInput interface {
	pulumi.Input

	ToCachesIscsiVolumeArrayOutput() CachesIscsiVolumeArrayOutput
	ToCachesIscsiVolumeArrayOutputWithContext(context.Context) CachesIscsiVolumeArrayOutput
}

type CachesIscsiVolumeArray []CachesIscsiVolumeInput

func (CachesIscsiVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CachesIscsiVolume)(nil)).Elem()
}

func (i CachesIscsiVolumeArray) ToCachesIscsiVolumeArrayOutput() CachesIscsiVolumeArrayOutput {
	return i.ToCachesIscsiVolumeArrayOutputWithContext(context.Background())
}

func (i CachesIscsiVolumeArray) ToCachesIscsiVolumeArrayOutputWithContext(ctx context.Context) CachesIscsiVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CachesIscsiVolumeArrayOutput)
}

// CachesIscsiVolumeMapInput is an input type that accepts CachesIscsiVolumeMap and CachesIscsiVolumeMapOutput values.
// You can construct a concrete instance of `CachesIscsiVolumeMapInput` via:
//
//	CachesIscsiVolumeMap{ "key": CachesIscsiVolumeArgs{...} }
type CachesIscsiVolumeMapInput interface {
	pulumi.Input

	ToCachesIscsiVolumeMapOutput() CachesIscsiVolumeMapOutput
	ToCachesIscsiVolumeMapOutputWithContext(context.Context) CachesIscsiVolumeMapOutput
}

type CachesIscsiVolumeMap map[string]CachesIscsiVolumeInput

func (CachesIscsiVolumeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CachesIscsiVolume)(nil)).Elem()
}

func (i CachesIscsiVolumeMap) ToCachesIscsiVolumeMapOutput() CachesIscsiVolumeMapOutput {
	return i.ToCachesIscsiVolumeMapOutputWithContext(context.Background())
}

func (i CachesIscsiVolumeMap) ToCachesIscsiVolumeMapOutputWithContext(ctx context.Context) CachesIscsiVolumeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CachesIscsiVolumeMapOutput)
}

type CachesIscsiVolumeOutput struct{ *pulumi.OutputState }

func (CachesIscsiVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CachesIscsiVolume)(nil)).Elem()
}

func (o CachesIscsiVolumeOutput) ToCachesIscsiVolumeOutput() CachesIscsiVolumeOutput {
	return o
}

func (o CachesIscsiVolumeOutput) ToCachesIscsiVolumeOutputWithContext(ctx context.Context) CachesIscsiVolumeOutput {
	return o
}

func (o CachesIscsiVolumeOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *CachesIscsiVolume) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o CachesIscsiVolumeOutput) ChapEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *CachesIscsiVolume) pulumi.BoolOutput { return v.ChapEnabled }).(pulumi.BoolOutput)
}

func (o CachesIscsiVolumeOutput) GatewayArn() pulumi.StringOutput {
	return o.ApplyT(func(v *CachesIscsiVolume) pulumi.StringOutput { return v.GatewayArn }).(pulumi.StringOutput)
}

func (o CachesIscsiVolumeOutput) KmsEncrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CachesIscsiVolume) pulumi.BoolPtrOutput { return v.KmsEncrypted }).(pulumi.BoolPtrOutput)
}

func (o CachesIscsiVolumeOutput) KmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CachesIscsiVolume) pulumi.StringPtrOutput { return v.KmsKey }).(pulumi.StringPtrOutput)
}

func (o CachesIscsiVolumeOutput) LunNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *CachesIscsiVolume) pulumi.IntOutput { return v.LunNumber }).(pulumi.IntOutput)
}

func (o CachesIscsiVolumeOutput) NetworkInterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *CachesIscsiVolume) pulumi.StringOutput { return v.NetworkInterfaceId }).(pulumi.StringOutput)
}

func (o CachesIscsiVolumeOutput) NetworkInterfacePort() pulumi.IntOutput {
	return o.ApplyT(func(v *CachesIscsiVolume) pulumi.IntOutput { return v.NetworkInterfacePort }).(pulumi.IntOutput)
}

func (o CachesIscsiVolumeOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CachesIscsiVolume) pulumi.StringPtrOutput { return v.SnapshotId }).(pulumi.StringPtrOutput)
}

func (o CachesIscsiVolumeOutput) SourceVolumeArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CachesIscsiVolume) pulumi.StringPtrOutput { return v.SourceVolumeArn }).(pulumi.StringPtrOutput)
}

func (o CachesIscsiVolumeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CachesIscsiVolume) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o CachesIscsiVolumeOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CachesIscsiVolume) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o CachesIscsiVolumeOutput) TargetArn() pulumi.StringOutput {
	return o.ApplyT(func(v *CachesIscsiVolume) pulumi.StringOutput { return v.TargetArn }).(pulumi.StringOutput)
}

func (o CachesIscsiVolumeOutput) TargetName() pulumi.StringOutput {
	return o.ApplyT(func(v *CachesIscsiVolume) pulumi.StringOutput { return v.TargetName }).(pulumi.StringOutput)
}

func (o CachesIscsiVolumeOutput) VolumeArn() pulumi.StringOutput {
	return o.ApplyT(func(v *CachesIscsiVolume) pulumi.StringOutput { return v.VolumeArn }).(pulumi.StringOutput)
}

func (o CachesIscsiVolumeOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v *CachesIscsiVolume) pulumi.StringOutput { return v.VolumeId }).(pulumi.StringOutput)
}

func (o CachesIscsiVolumeOutput) VolumeSizeInBytes() pulumi.IntOutput {
	return o.ApplyT(func(v *CachesIscsiVolume) pulumi.IntOutput { return v.VolumeSizeInBytes }).(pulumi.IntOutput)
}

type CachesIscsiVolumeArrayOutput struct{ *pulumi.OutputState }

func (CachesIscsiVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CachesIscsiVolume)(nil)).Elem()
}

func (o CachesIscsiVolumeArrayOutput) ToCachesIscsiVolumeArrayOutput() CachesIscsiVolumeArrayOutput {
	return o
}

func (o CachesIscsiVolumeArrayOutput) ToCachesIscsiVolumeArrayOutputWithContext(ctx context.Context) CachesIscsiVolumeArrayOutput {
	return o
}

func (o CachesIscsiVolumeArrayOutput) Index(i pulumi.IntInput) CachesIscsiVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CachesIscsiVolume {
		return vs[0].([]*CachesIscsiVolume)[vs[1].(int)]
	}).(CachesIscsiVolumeOutput)
}

type CachesIscsiVolumeMapOutput struct{ *pulumi.OutputState }

func (CachesIscsiVolumeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CachesIscsiVolume)(nil)).Elem()
}

func (o CachesIscsiVolumeMapOutput) ToCachesIscsiVolumeMapOutput() CachesIscsiVolumeMapOutput {
	return o
}

func (o CachesIscsiVolumeMapOutput) ToCachesIscsiVolumeMapOutputWithContext(ctx context.Context) CachesIscsiVolumeMapOutput {
	return o
}

func (o CachesIscsiVolumeMapOutput) MapIndex(k pulumi.StringInput) CachesIscsiVolumeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CachesIscsiVolume {
		return vs[0].(map[string]*CachesIscsiVolume)[vs[1].(string)]
	}).(CachesIscsiVolumeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CachesIscsiVolumeInput)(nil)).Elem(), &CachesIscsiVolume{})
	pulumi.RegisterInputType(reflect.TypeOf((*CachesIscsiVolumeArrayInput)(nil)).Elem(), CachesIscsiVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CachesIscsiVolumeMapInput)(nil)).Elem(), CachesIscsiVolumeMap{})
	pulumi.RegisterOutputType(CachesIscsiVolumeOutput{})
	pulumi.RegisterOutputType(CachesIscsiVolumeArrayOutput{})
	pulumi.RegisterOutputType(CachesIscsiVolumeMapOutput{})
}
