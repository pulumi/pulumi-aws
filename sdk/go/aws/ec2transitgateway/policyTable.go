// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2transitgateway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PolicyTable struct {
	pulumi.CustomResourceState

	Arn              pulumi.StringOutput    `pulumi:"arn"`
	State            pulumi.StringOutput    `pulumi:"state"`
	Tags             pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll          pulumi.StringMapOutput `pulumi:"tagsAll"`
	TransitGatewayId pulumi.StringOutput    `pulumi:"transitGatewayId"`
}

// NewPolicyTable registers a new resource with the given unique name, arguments, and options.
func NewPolicyTable(ctx *pulumi.Context,
	name string, args *PolicyTableArgs, opts ...pulumi.ResourceOption) (*PolicyTable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TransitGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'TransitGatewayId'")
	}
	var resource PolicyTable
	err := ctx.RegisterResource("aws:ec2transitgateway/policyTable:PolicyTable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyTable gets an existing PolicyTable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyTableState, opts ...pulumi.ResourceOption) (*PolicyTable, error) {
	var resource PolicyTable
	err := ctx.ReadResource("aws:ec2transitgateway/policyTable:PolicyTable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyTable resources.
type policyTableState struct {
	Arn              *string           `pulumi:"arn"`
	State            *string           `pulumi:"state"`
	Tags             map[string]string `pulumi:"tags"`
	TagsAll          map[string]string `pulumi:"tagsAll"`
	TransitGatewayId *string           `pulumi:"transitGatewayId"`
}

type PolicyTableState struct {
	Arn              pulumi.StringPtrInput
	State            pulumi.StringPtrInput
	Tags             pulumi.StringMapInput
	TagsAll          pulumi.StringMapInput
	TransitGatewayId pulumi.StringPtrInput
}

func (PolicyTableState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyTableState)(nil)).Elem()
}

type policyTableArgs struct {
	Tags             map[string]string `pulumi:"tags"`
	TransitGatewayId string            `pulumi:"transitGatewayId"`
}

// The set of arguments for constructing a PolicyTable resource.
type PolicyTableArgs struct {
	Tags             pulumi.StringMapInput
	TransitGatewayId pulumi.StringInput
}

func (PolicyTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyTableArgs)(nil)).Elem()
}

type PolicyTableInput interface {
	pulumi.Input

	ToPolicyTableOutput() PolicyTableOutput
	ToPolicyTableOutputWithContext(ctx context.Context) PolicyTableOutput
}

func (*PolicyTable) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyTable)(nil)).Elem()
}

func (i *PolicyTable) ToPolicyTableOutput() PolicyTableOutput {
	return i.ToPolicyTableOutputWithContext(context.Background())
}

func (i *PolicyTable) ToPolicyTableOutputWithContext(ctx context.Context) PolicyTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyTableOutput)
}

// PolicyTableArrayInput is an input type that accepts PolicyTableArray and PolicyTableArrayOutput values.
// You can construct a concrete instance of `PolicyTableArrayInput` via:
//
//	PolicyTableArray{ PolicyTableArgs{...} }
type PolicyTableArrayInput interface {
	pulumi.Input

	ToPolicyTableArrayOutput() PolicyTableArrayOutput
	ToPolicyTableArrayOutputWithContext(context.Context) PolicyTableArrayOutput
}

type PolicyTableArray []PolicyTableInput

func (PolicyTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyTable)(nil)).Elem()
}

func (i PolicyTableArray) ToPolicyTableArrayOutput() PolicyTableArrayOutput {
	return i.ToPolicyTableArrayOutputWithContext(context.Background())
}

func (i PolicyTableArray) ToPolicyTableArrayOutputWithContext(ctx context.Context) PolicyTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyTableArrayOutput)
}

// PolicyTableMapInput is an input type that accepts PolicyTableMap and PolicyTableMapOutput values.
// You can construct a concrete instance of `PolicyTableMapInput` via:
//
//	PolicyTableMap{ "key": PolicyTableArgs{...} }
type PolicyTableMapInput interface {
	pulumi.Input

	ToPolicyTableMapOutput() PolicyTableMapOutput
	ToPolicyTableMapOutputWithContext(context.Context) PolicyTableMapOutput
}

type PolicyTableMap map[string]PolicyTableInput

func (PolicyTableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyTable)(nil)).Elem()
}

func (i PolicyTableMap) ToPolicyTableMapOutput() PolicyTableMapOutput {
	return i.ToPolicyTableMapOutputWithContext(context.Background())
}

func (i PolicyTableMap) ToPolicyTableMapOutputWithContext(ctx context.Context) PolicyTableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyTableMapOutput)
}

type PolicyTableOutput struct{ *pulumi.OutputState }

func (PolicyTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyTable)(nil)).Elem()
}

func (o PolicyTableOutput) ToPolicyTableOutput() PolicyTableOutput {
	return o
}

func (o PolicyTableOutput) ToPolicyTableOutputWithContext(ctx context.Context) PolicyTableOutput {
	return o
}

func (o PolicyTableOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyTable) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o PolicyTableOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyTable) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o PolicyTableOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyTable) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o PolicyTableOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyTable) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o PolicyTableOutput) TransitGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyTable) pulumi.StringOutput { return v.TransitGatewayId }).(pulumi.StringOutput)
}

type PolicyTableArrayOutput struct{ *pulumi.OutputState }

func (PolicyTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyTable)(nil)).Elem()
}

func (o PolicyTableArrayOutput) ToPolicyTableArrayOutput() PolicyTableArrayOutput {
	return o
}

func (o PolicyTableArrayOutput) ToPolicyTableArrayOutputWithContext(ctx context.Context) PolicyTableArrayOutput {
	return o
}

func (o PolicyTableArrayOutput) Index(i pulumi.IntInput) PolicyTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicyTable {
		return vs[0].([]*PolicyTable)[vs[1].(int)]
	}).(PolicyTableOutput)
}

type PolicyTableMapOutput struct{ *pulumi.OutputState }

func (PolicyTableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyTable)(nil)).Elem()
}

func (o PolicyTableMapOutput) ToPolicyTableMapOutput() PolicyTableMapOutput {
	return o
}

func (o PolicyTableMapOutput) ToPolicyTableMapOutputWithContext(ctx context.Context) PolicyTableMapOutput {
	return o
}

func (o PolicyTableMapOutput) MapIndex(k pulumi.StringInput) PolicyTableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicyTable {
		return vs[0].(map[string]*PolicyTable)[vs[1].(string)]
	}).(PolicyTableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyTableInput)(nil)).Elem(), &PolicyTable{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyTableArrayInput)(nil)).Elem(), PolicyTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyTableMapInput)(nil)).Elem(), PolicyTableMap{})
	pulumi.RegisterOutputType(PolicyTableOutput{})
	pulumi.RegisterOutputType(PolicyTableArrayOutput{})
	pulumi.RegisterOutputType(PolicyTableMapOutput{})
}
