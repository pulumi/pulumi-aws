// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2transitgateway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MulticastDomain struct {
	pulumi.CustomResourceState

	Arn                          pulumi.StringOutput    `pulumi:"arn"`
	AutoAcceptSharedAssociations pulumi.StringPtrOutput `pulumi:"autoAcceptSharedAssociations"`
	Igmpv2Support                pulumi.StringPtrOutput `pulumi:"igmpv2Support"`
	OwnerId                      pulumi.StringOutput    `pulumi:"ownerId"`
	StaticSourcesSupport         pulumi.StringPtrOutput `pulumi:"staticSourcesSupport"`
	Tags                         pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll                      pulumi.StringMapOutput `pulumi:"tagsAll"`
	TransitGatewayId             pulumi.StringOutput    `pulumi:"transitGatewayId"`
}

// NewMulticastDomain registers a new resource with the given unique name, arguments, and options.
func NewMulticastDomain(ctx *pulumi.Context,
	name string, args *MulticastDomainArgs, opts ...pulumi.ResourceOption) (*MulticastDomain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TransitGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'TransitGatewayId'")
	}
	var resource MulticastDomain
	err := ctx.RegisterResource("aws:ec2transitgateway/multicastDomain:MulticastDomain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMulticastDomain gets an existing MulticastDomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMulticastDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MulticastDomainState, opts ...pulumi.ResourceOption) (*MulticastDomain, error) {
	var resource MulticastDomain
	err := ctx.ReadResource("aws:ec2transitgateway/multicastDomain:MulticastDomain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MulticastDomain resources.
type multicastDomainState struct {
	Arn                          *string           `pulumi:"arn"`
	AutoAcceptSharedAssociations *string           `pulumi:"autoAcceptSharedAssociations"`
	Igmpv2Support                *string           `pulumi:"igmpv2Support"`
	OwnerId                      *string           `pulumi:"ownerId"`
	StaticSourcesSupport         *string           `pulumi:"staticSourcesSupport"`
	Tags                         map[string]string `pulumi:"tags"`
	TagsAll                      map[string]string `pulumi:"tagsAll"`
	TransitGatewayId             *string           `pulumi:"transitGatewayId"`
}

type MulticastDomainState struct {
	Arn                          pulumi.StringPtrInput
	AutoAcceptSharedAssociations pulumi.StringPtrInput
	Igmpv2Support                pulumi.StringPtrInput
	OwnerId                      pulumi.StringPtrInput
	StaticSourcesSupport         pulumi.StringPtrInput
	Tags                         pulumi.StringMapInput
	TagsAll                      pulumi.StringMapInput
	TransitGatewayId             pulumi.StringPtrInput
}

func (MulticastDomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*multicastDomainState)(nil)).Elem()
}

type multicastDomainArgs struct {
	AutoAcceptSharedAssociations *string           `pulumi:"autoAcceptSharedAssociations"`
	Igmpv2Support                *string           `pulumi:"igmpv2Support"`
	StaticSourcesSupport         *string           `pulumi:"staticSourcesSupport"`
	Tags                         map[string]string `pulumi:"tags"`
	TransitGatewayId             string            `pulumi:"transitGatewayId"`
}

// The set of arguments for constructing a MulticastDomain resource.
type MulticastDomainArgs struct {
	AutoAcceptSharedAssociations pulumi.StringPtrInput
	Igmpv2Support                pulumi.StringPtrInput
	StaticSourcesSupport         pulumi.StringPtrInput
	Tags                         pulumi.StringMapInput
	TransitGatewayId             pulumi.StringInput
}

func (MulticastDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*multicastDomainArgs)(nil)).Elem()
}

type MulticastDomainInput interface {
	pulumi.Input

	ToMulticastDomainOutput() MulticastDomainOutput
	ToMulticastDomainOutputWithContext(ctx context.Context) MulticastDomainOutput
}

func (*MulticastDomain) ElementType() reflect.Type {
	return reflect.TypeOf((**MulticastDomain)(nil)).Elem()
}

func (i *MulticastDomain) ToMulticastDomainOutput() MulticastDomainOutput {
	return i.ToMulticastDomainOutputWithContext(context.Background())
}

func (i *MulticastDomain) ToMulticastDomainOutputWithContext(ctx context.Context) MulticastDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MulticastDomainOutput)
}

// MulticastDomainArrayInput is an input type that accepts MulticastDomainArray and MulticastDomainArrayOutput values.
// You can construct a concrete instance of `MulticastDomainArrayInput` via:
//
//	MulticastDomainArray{ MulticastDomainArgs{...} }
type MulticastDomainArrayInput interface {
	pulumi.Input

	ToMulticastDomainArrayOutput() MulticastDomainArrayOutput
	ToMulticastDomainArrayOutputWithContext(context.Context) MulticastDomainArrayOutput
}

type MulticastDomainArray []MulticastDomainInput

func (MulticastDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MulticastDomain)(nil)).Elem()
}

func (i MulticastDomainArray) ToMulticastDomainArrayOutput() MulticastDomainArrayOutput {
	return i.ToMulticastDomainArrayOutputWithContext(context.Background())
}

func (i MulticastDomainArray) ToMulticastDomainArrayOutputWithContext(ctx context.Context) MulticastDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MulticastDomainArrayOutput)
}

// MulticastDomainMapInput is an input type that accepts MulticastDomainMap and MulticastDomainMapOutput values.
// You can construct a concrete instance of `MulticastDomainMapInput` via:
//
//	MulticastDomainMap{ "key": MulticastDomainArgs{...} }
type MulticastDomainMapInput interface {
	pulumi.Input

	ToMulticastDomainMapOutput() MulticastDomainMapOutput
	ToMulticastDomainMapOutputWithContext(context.Context) MulticastDomainMapOutput
}

type MulticastDomainMap map[string]MulticastDomainInput

func (MulticastDomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MulticastDomain)(nil)).Elem()
}

func (i MulticastDomainMap) ToMulticastDomainMapOutput() MulticastDomainMapOutput {
	return i.ToMulticastDomainMapOutputWithContext(context.Background())
}

func (i MulticastDomainMap) ToMulticastDomainMapOutputWithContext(ctx context.Context) MulticastDomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MulticastDomainMapOutput)
}

type MulticastDomainOutput struct{ *pulumi.OutputState }

func (MulticastDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MulticastDomain)(nil)).Elem()
}

func (o MulticastDomainOutput) ToMulticastDomainOutput() MulticastDomainOutput {
	return o
}

func (o MulticastDomainOutput) ToMulticastDomainOutputWithContext(ctx context.Context) MulticastDomainOutput {
	return o
}

func (o MulticastDomainOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *MulticastDomain) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o MulticastDomainOutput) AutoAcceptSharedAssociations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MulticastDomain) pulumi.StringPtrOutput { return v.AutoAcceptSharedAssociations }).(pulumi.StringPtrOutput)
}

func (o MulticastDomainOutput) Igmpv2Support() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MulticastDomain) pulumi.StringPtrOutput { return v.Igmpv2Support }).(pulumi.StringPtrOutput)
}

func (o MulticastDomainOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *MulticastDomain) pulumi.StringOutput { return v.OwnerId }).(pulumi.StringOutput)
}

func (o MulticastDomainOutput) StaticSourcesSupport() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MulticastDomain) pulumi.StringPtrOutput { return v.StaticSourcesSupport }).(pulumi.StringPtrOutput)
}

func (o MulticastDomainOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MulticastDomain) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o MulticastDomainOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MulticastDomain) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o MulticastDomainOutput) TransitGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *MulticastDomain) pulumi.StringOutput { return v.TransitGatewayId }).(pulumi.StringOutput)
}

type MulticastDomainArrayOutput struct{ *pulumi.OutputState }

func (MulticastDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MulticastDomain)(nil)).Elem()
}

func (o MulticastDomainArrayOutput) ToMulticastDomainArrayOutput() MulticastDomainArrayOutput {
	return o
}

func (o MulticastDomainArrayOutput) ToMulticastDomainArrayOutputWithContext(ctx context.Context) MulticastDomainArrayOutput {
	return o
}

func (o MulticastDomainArrayOutput) Index(i pulumi.IntInput) MulticastDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MulticastDomain {
		return vs[0].([]*MulticastDomain)[vs[1].(int)]
	}).(MulticastDomainOutput)
}

type MulticastDomainMapOutput struct{ *pulumi.OutputState }

func (MulticastDomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MulticastDomain)(nil)).Elem()
}

func (o MulticastDomainMapOutput) ToMulticastDomainMapOutput() MulticastDomainMapOutput {
	return o
}

func (o MulticastDomainMapOutput) ToMulticastDomainMapOutputWithContext(ctx context.Context) MulticastDomainMapOutput {
	return o
}

func (o MulticastDomainMapOutput) MapIndex(k pulumi.StringInput) MulticastDomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MulticastDomain {
		return vs[0].(map[string]*MulticastDomain)[vs[1].(string)]
	}).(MulticastDomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MulticastDomainInput)(nil)).Elem(), &MulticastDomain{})
	pulumi.RegisterInputType(reflect.TypeOf((*MulticastDomainArrayInput)(nil)).Elem(), MulticastDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MulticastDomainMapInput)(nil)).Elem(), MulticastDomainMap{})
	pulumi.RegisterOutputType(MulticastDomainOutput{})
	pulumi.RegisterOutputType(MulticastDomainArrayOutput{})
	pulumi.RegisterOutputType(MulticastDomainMapOutput{})
}
