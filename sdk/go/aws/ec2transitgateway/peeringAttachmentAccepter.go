// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2transitgateway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages the accepter's side of an EC2 Transit Gateway Peering Attachment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2transitgateway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ec2transitgateway.NewPeeringAttachmentAccepter(ctx, "example", &ec2transitgateway.PeeringAttachmentAccepterArgs{
//				TransitGatewayAttachmentId: pulumi.Any(aws_ec2_transit_gateway_peering_attachment.Example.Id),
//				Tags: pulumi.StringMap{
//					"Name": pulumi.String("Example cross-account attachment"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// `aws_ec2_transit_gateway_peering_attachment_accepter` can be imported by using the EC2 Transit Gateway Attachment identifier, e.g.,
//
// ```sh
//
//	$ pulumi import aws:ec2transitgateway/peeringAttachmentAccepter:PeeringAttachmentAccepter example tgw-attach-12345678
//
// ```
type PeeringAttachmentAccepter struct {
	pulumi.CustomResourceState

	// Identifier of the AWS account that owns the EC2 TGW peering.
	PeerAccountId pulumi.StringOutput `pulumi:"peerAccountId"`
	PeerRegion    pulumi.StringOutput `pulumi:"peerRegion"`
	// Identifier of EC2 Transit Gateway to peer with.
	PeerTransitGatewayId pulumi.StringOutput `pulumi:"peerTransitGatewayId"`
	// Key-value tags for the EC2 Transit Gateway Peering Attachment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// The ID of the EC2 Transit Gateway Peering Attachment to manage.
	TransitGatewayAttachmentId pulumi.StringOutput `pulumi:"transitGatewayAttachmentId"`
	// Identifier of EC2 Transit Gateway.
	TransitGatewayId pulumi.StringOutput `pulumi:"transitGatewayId"`
}

// NewPeeringAttachmentAccepter registers a new resource with the given unique name, arguments, and options.
func NewPeeringAttachmentAccepter(ctx *pulumi.Context,
	name string, args *PeeringAttachmentAccepterArgs, opts ...pulumi.ResourceOption) (*PeeringAttachmentAccepter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TransitGatewayAttachmentId == nil {
		return nil, errors.New("invalid value for required argument 'TransitGatewayAttachmentId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("aws:ec2/transitGatewayPeeringAttachmentAccepter:TransitGatewayPeeringAttachmentAccepter"),
		},
	})
	opts = append(opts, aliases)
	var resource PeeringAttachmentAccepter
	err := ctx.RegisterResource("aws:ec2transitgateway/peeringAttachmentAccepter:PeeringAttachmentAccepter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPeeringAttachmentAccepter gets an existing PeeringAttachmentAccepter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPeeringAttachmentAccepter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PeeringAttachmentAccepterState, opts ...pulumi.ResourceOption) (*PeeringAttachmentAccepter, error) {
	var resource PeeringAttachmentAccepter
	err := ctx.ReadResource("aws:ec2transitgateway/peeringAttachmentAccepter:PeeringAttachmentAccepter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PeeringAttachmentAccepter resources.
type peeringAttachmentAccepterState struct {
	// Identifier of the AWS account that owns the EC2 TGW peering.
	PeerAccountId *string `pulumi:"peerAccountId"`
	PeerRegion    *string `pulumi:"peerRegion"`
	// Identifier of EC2 Transit Gateway to peer with.
	PeerTransitGatewayId *string `pulumi:"peerTransitGatewayId"`
	// Key-value tags for the EC2 Transit Gateway Peering Attachment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The ID of the EC2 Transit Gateway Peering Attachment to manage.
	TransitGatewayAttachmentId *string `pulumi:"transitGatewayAttachmentId"`
	// Identifier of EC2 Transit Gateway.
	TransitGatewayId *string `pulumi:"transitGatewayId"`
}

type PeeringAttachmentAccepterState struct {
	// Identifier of the AWS account that owns the EC2 TGW peering.
	PeerAccountId pulumi.StringPtrInput
	PeerRegion    pulumi.StringPtrInput
	// Identifier of EC2 Transit Gateway to peer with.
	PeerTransitGatewayId pulumi.StringPtrInput
	// Key-value tags for the EC2 Transit Gateway Peering Attachment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapInput
	// The ID of the EC2 Transit Gateway Peering Attachment to manage.
	TransitGatewayAttachmentId pulumi.StringPtrInput
	// Identifier of EC2 Transit Gateway.
	TransitGatewayId pulumi.StringPtrInput
}

func (PeeringAttachmentAccepterState) ElementType() reflect.Type {
	return reflect.TypeOf((*peeringAttachmentAccepterState)(nil)).Elem()
}

type peeringAttachmentAccepterArgs struct {
	// Key-value tags for the EC2 Transit Gateway Peering Attachment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The ID of the EC2 Transit Gateway Peering Attachment to manage.
	TransitGatewayAttachmentId string `pulumi:"transitGatewayAttachmentId"`
}

// The set of arguments for constructing a PeeringAttachmentAccepter resource.
type PeeringAttachmentAccepterArgs struct {
	// Key-value tags for the EC2 Transit Gateway Peering Attachment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// The ID of the EC2 Transit Gateway Peering Attachment to manage.
	TransitGatewayAttachmentId pulumi.StringInput
}

func (PeeringAttachmentAccepterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*peeringAttachmentAccepterArgs)(nil)).Elem()
}

type PeeringAttachmentAccepterInput interface {
	pulumi.Input

	ToPeeringAttachmentAccepterOutput() PeeringAttachmentAccepterOutput
	ToPeeringAttachmentAccepterOutputWithContext(ctx context.Context) PeeringAttachmentAccepterOutput
}

func (*PeeringAttachmentAccepter) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringAttachmentAccepter)(nil)).Elem()
}

func (i *PeeringAttachmentAccepter) ToPeeringAttachmentAccepterOutput() PeeringAttachmentAccepterOutput {
	return i.ToPeeringAttachmentAccepterOutputWithContext(context.Background())
}

func (i *PeeringAttachmentAccepter) ToPeeringAttachmentAccepterOutputWithContext(ctx context.Context) PeeringAttachmentAccepterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringAttachmentAccepterOutput)
}

// PeeringAttachmentAccepterArrayInput is an input type that accepts PeeringAttachmentAccepterArray and PeeringAttachmentAccepterArrayOutput values.
// You can construct a concrete instance of `PeeringAttachmentAccepterArrayInput` via:
//
//	PeeringAttachmentAccepterArray{ PeeringAttachmentAccepterArgs{...} }
type PeeringAttachmentAccepterArrayInput interface {
	pulumi.Input

	ToPeeringAttachmentAccepterArrayOutput() PeeringAttachmentAccepterArrayOutput
	ToPeeringAttachmentAccepterArrayOutputWithContext(context.Context) PeeringAttachmentAccepterArrayOutput
}

type PeeringAttachmentAccepterArray []PeeringAttachmentAccepterInput

func (PeeringAttachmentAccepterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PeeringAttachmentAccepter)(nil)).Elem()
}

func (i PeeringAttachmentAccepterArray) ToPeeringAttachmentAccepterArrayOutput() PeeringAttachmentAccepterArrayOutput {
	return i.ToPeeringAttachmentAccepterArrayOutputWithContext(context.Background())
}

func (i PeeringAttachmentAccepterArray) ToPeeringAttachmentAccepterArrayOutputWithContext(ctx context.Context) PeeringAttachmentAccepterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringAttachmentAccepterArrayOutput)
}

// PeeringAttachmentAccepterMapInput is an input type that accepts PeeringAttachmentAccepterMap and PeeringAttachmentAccepterMapOutput values.
// You can construct a concrete instance of `PeeringAttachmentAccepterMapInput` via:
//
//	PeeringAttachmentAccepterMap{ "key": PeeringAttachmentAccepterArgs{...} }
type PeeringAttachmentAccepterMapInput interface {
	pulumi.Input

	ToPeeringAttachmentAccepterMapOutput() PeeringAttachmentAccepterMapOutput
	ToPeeringAttachmentAccepterMapOutputWithContext(context.Context) PeeringAttachmentAccepterMapOutput
}

type PeeringAttachmentAccepterMap map[string]PeeringAttachmentAccepterInput

func (PeeringAttachmentAccepterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PeeringAttachmentAccepter)(nil)).Elem()
}

func (i PeeringAttachmentAccepterMap) ToPeeringAttachmentAccepterMapOutput() PeeringAttachmentAccepterMapOutput {
	return i.ToPeeringAttachmentAccepterMapOutputWithContext(context.Background())
}

func (i PeeringAttachmentAccepterMap) ToPeeringAttachmentAccepterMapOutputWithContext(ctx context.Context) PeeringAttachmentAccepterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringAttachmentAccepterMapOutput)
}

type PeeringAttachmentAccepterOutput struct{ *pulumi.OutputState }

func (PeeringAttachmentAccepterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringAttachmentAccepter)(nil)).Elem()
}

func (o PeeringAttachmentAccepterOutput) ToPeeringAttachmentAccepterOutput() PeeringAttachmentAccepterOutput {
	return o
}

func (o PeeringAttachmentAccepterOutput) ToPeeringAttachmentAccepterOutputWithContext(ctx context.Context) PeeringAttachmentAccepterOutput {
	return o
}

// Identifier of the AWS account that owns the EC2 TGW peering.
func (o PeeringAttachmentAccepterOutput) PeerAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *PeeringAttachmentAccepter) pulumi.StringOutput { return v.PeerAccountId }).(pulumi.StringOutput)
}

func (o PeeringAttachmentAccepterOutput) PeerRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *PeeringAttachmentAccepter) pulumi.StringOutput { return v.PeerRegion }).(pulumi.StringOutput)
}

// Identifier of EC2 Transit Gateway to peer with.
func (o PeeringAttachmentAccepterOutput) PeerTransitGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *PeeringAttachmentAccepter) pulumi.StringOutput { return v.PeerTransitGatewayId }).(pulumi.StringOutput)
}

// Key-value tags for the EC2 Transit Gateway Peering Attachment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o PeeringAttachmentAccepterOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PeeringAttachmentAccepter) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o PeeringAttachmentAccepterOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PeeringAttachmentAccepter) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// The ID of the EC2 Transit Gateway Peering Attachment to manage.
func (o PeeringAttachmentAccepterOutput) TransitGatewayAttachmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *PeeringAttachmentAccepter) pulumi.StringOutput { return v.TransitGatewayAttachmentId }).(pulumi.StringOutput)
}

// Identifier of EC2 Transit Gateway.
func (o PeeringAttachmentAccepterOutput) TransitGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *PeeringAttachmentAccepter) pulumi.StringOutput { return v.TransitGatewayId }).(pulumi.StringOutput)
}

type PeeringAttachmentAccepterArrayOutput struct{ *pulumi.OutputState }

func (PeeringAttachmentAccepterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PeeringAttachmentAccepter)(nil)).Elem()
}

func (o PeeringAttachmentAccepterArrayOutput) ToPeeringAttachmentAccepterArrayOutput() PeeringAttachmentAccepterArrayOutput {
	return o
}

func (o PeeringAttachmentAccepterArrayOutput) ToPeeringAttachmentAccepterArrayOutputWithContext(ctx context.Context) PeeringAttachmentAccepterArrayOutput {
	return o
}

func (o PeeringAttachmentAccepterArrayOutput) Index(i pulumi.IntInput) PeeringAttachmentAccepterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PeeringAttachmentAccepter {
		return vs[0].([]*PeeringAttachmentAccepter)[vs[1].(int)]
	}).(PeeringAttachmentAccepterOutput)
}

type PeeringAttachmentAccepterMapOutput struct{ *pulumi.OutputState }

func (PeeringAttachmentAccepterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PeeringAttachmentAccepter)(nil)).Elem()
}

func (o PeeringAttachmentAccepterMapOutput) ToPeeringAttachmentAccepterMapOutput() PeeringAttachmentAccepterMapOutput {
	return o
}

func (o PeeringAttachmentAccepterMapOutput) ToPeeringAttachmentAccepterMapOutputWithContext(ctx context.Context) PeeringAttachmentAccepterMapOutput {
	return o
}

func (o PeeringAttachmentAccepterMapOutput) MapIndex(k pulumi.StringInput) PeeringAttachmentAccepterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PeeringAttachmentAccepter {
		return vs[0].(map[string]*PeeringAttachmentAccepter)[vs[1].(string)]
	}).(PeeringAttachmentAccepterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PeeringAttachmentAccepterInput)(nil)).Elem(), &PeeringAttachmentAccepter{})
	pulumi.RegisterInputType(reflect.TypeOf((*PeeringAttachmentAccepterArrayInput)(nil)).Elem(), PeeringAttachmentAccepterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PeeringAttachmentAccepterMapInput)(nil)).Elem(), PeeringAttachmentAccepterMap{})
	pulumi.RegisterOutputType(PeeringAttachmentAccepterOutput{})
	pulumi.RegisterOutputType(PeeringAttachmentAccepterArrayOutput{})
	pulumi.RegisterOutputType(PeeringAttachmentAccepterMapOutput{})
}
