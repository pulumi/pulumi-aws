// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2transitgateway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PolicyTableAssociation struct {
	pulumi.CustomResourceState

	ResourceId                  pulumi.StringOutput `pulumi:"resourceId"`
	ResourceType                pulumi.StringOutput `pulumi:"resourceType"`
	TransitGatewayAttachmentId  pulumi.StringOutput `pulumi:"transitGatewayAttachmentId"`
	TransitGatewayPolicyTableId pulumi.StringOutput `pulumi:"transitGatewayPolicyTableId"`
}

// NewPolicyTableAssociation registers a new resource with the given unique name, arguments, and options.
func NewPolicyTableAssociation(ctx *pulumi.Context,
	name string, args *PolicyTableAssociationArgs, opts ...pulumi.ResourceOption) (*PolicyTableAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TransitGatewayAttachmentId == nil {
		return nil, errors.New("invalid value for required argument 'TransitGatewayAttachmentId'")
	}
	if args.TransitGatewayPolicyTableId == nil {
		return nil, errors.New("invalid value for required argument 'TransitGatewayPolicyTableId'")
	}
	var resource PolicyTableAssociation
	err := ctx.RegisterResource("aws:ec2transitgateway/policyTableAssociation:PolicyTableAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyTableAssociation gets an existing PolicyTableAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyTableAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyTableAssociationState, opts ...pulumi.ResourceOption) (*PolicyTableAssociation, error) {
	var resource PolicyTableAssociation
	err := ctx.ReadResource("aws:ec2transitgateway/policyTableAssociation:PolicyTableAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyTableAssociation resources.
type policyTableAssociationState struct {
	ResourceId                  *string `pulumi:"resourceId"`
	ResourceType                *string `pulumi:"resourceType"`
	TransitGatewayAttachmentId  *string `pulumi:"transitGatewayAttachmentId"`
	TransitGatewayPolicyTableId *string `pulumi:"transitGatewayPolicyTableId"`
}

type PolicyTableAssociationState struct {
	ResourceId                  pulumi.StringPtrInput
	ResourceType                pulumi.StringPtrInput
	TransitGatewayAttachmentId  pulumi.StringPtrInput
	TransitGatewayPolicyTableId pulumi.StringPtrInput
}

func (PolicyTableAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyTableAssociationState)(nil)).Elem()
}

type policyTableAssociationArgs struct {
	TransitGatewayAttachmentId  string `pulumi:"transitGatewayAttachmentId"`
	TransitGatewayPolicyTableId string `pulumi:"transitGatewayPolicyTableId"`
}

// The set of arguments for constructing a PolicyTableAssociation resource.
type PolicyTableAssociationArgs struct {
	TransitGatewayAttachmentId  pulumi.StringInput
	TransitGatewayPolicyTableId pulumi.StringInput
}

func (PolicyTableAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyTableAssociationArgs)(nil)).Elem()
}

type PolicyTableAssociationInput interface {
	pulumi.Input

	ToPolicyTableAssociationOutput() PolicyTableAssociationOutput
	ToPolicyTableAssociationOutputWithContext(ctx context.Context) PolicyTableAssociationOutput
}

func (*PolicyTableAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyTableAssociation)(nil)).Elem()
}

func (i *PolicyTableAssociation) ToPolicyTableAssociationOutput() PolicyTableAssociationOutput {
	return i.ToPolicyTableAssociationOutputWithContext(context.Background())
}

func (i *PolicyTableAssociation) ToPolicyTableAssociationOutputWithContext(ctx context.Context) PolicyTableAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyTableAssociationOutput)
}

// PolicyTableAssociationArrayInput is an input type that accepts PolicyTableAssociationArray and PolicyTableAssociationArrayOutput values.
// You can construct a concrete instance of `PolicyTableAssociationArrayInput` via:
//
//	PolicyTableAssociationArray{ PolicyTableAssociationArgs{...} }
type PolicyTableAssociationArrayInput interface {
	pulumi.Input

	ToPolicyTableAssociationArrayOutput() PolicyTableAssociationArrayOutput
	ToPolicyTableAssociationArrayOutputWithContext(context.Context) PolicyTableAssociationArrayOutput
}

type PolicyTableAssociationArray []PolicyTableAssociationInput

func (PolicyTableAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyTableAssociation)(nil)).Elem()
}

func (i PolicyTableAssociationArray) ToPolicyTableAssociationArrayOutput() PolicyTableAssociationArrayOutput {
	return i.ToPolicyTableAssociationArrayOutputWithContext(context.Background())
}

func (i PolicyTableAssociationArray) ToPolicyTableAssociationArrayOutputWithContext(ctx context.Context) PolicyTableAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyTableAssociationArrayOutput)
}

// PolicyTableAssociationMapInput is an input type that accepts PolicyTableAssociationMap and PolicyTableAssociationMapOutput values.
// You can construct a concrete instance of `PolicyTableAssociationMapInput` via:
//
//	PolicyTableAssociationMap{ "key": PolicyTableAssociationArgs{...} }
type PolicyTableAssociationMapInput interface {
	pulumi.Input

	ToPolicyTableAssociationMapOutput() PolicyTableAssociationMapOutput
	ToPolicyTableAssociationMapOutputWithContext(context.Context) PolicyTableAssociationMapOutput
}

type PolicyTableAssociationMap map[string]PolicyTableAssociationInput

func (PolicyTableAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyTableAssociation)(nil)).Elem()
}

func (i PolicyTableAssociationMap) ToPolicyTableAssociationMapOutput() PolicyTableAssociationMapOutput {
	return i.ToPolicyTableAssociationMapOutputWithContext(context.Background())
}

func (i PolicyTableAssociationMap) ToPolicyTableAssociationMapOutputWithContext(ctx context.Context) PolicyTableAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyTableAssociationMapOutput)
}

type PolicyTableAssociationOutput struct{ *pulumi.OutputState }

func (PolicyTableAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyTableAssociation)(nil)).Elem()
}

func (o PolicyTableAssociationOutput) ToPolicyTableAssociationOutput() PolicyTableAssociationOutput {
	return o
}

func (o PolicyTableAssociationOutput) ToPolicyTableAssociationOutputWithContext(ctx context.Context) PolicyTableAssociationOutput {
	return o
}

func (o PolicyTableAssociationOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyTableAssociation) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

func (o PolicyTableAssociationOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyTableAssociation) pulumi.StringOutput { return v.ResourceType }).(pulumi.StringOutput)
}

func (o PolicyTableAssociationOutput) TransitGatewayAttachmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyTableAssociation) pulumi.StringOutput { return v.TransitGatewayAttachmentId }).(pulumi.StringOutput)
}

func (o PolicyTableAssociationOutput) TransitGatewayPolicyTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyTableAssociation) pulumi.StringOutput { return v.TransitGatewayPolicyTableId }).(pulumi.StringOutput)
}

type PolicyTableAssociationArrayOutput struct{ *pulumi.OutputState }

func (PolicyTableAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyTableAssociation)(nil)).Elem()
}

func (o PolicyTableAssociationArrayOutput) ToPolicyTableAssociationArrayOutput() PolicyTableAssociationArrayOutput {
	return o
}

func (o PolicyTableAssociationArrayOutput) ToPolicyTableAssociationArrayOutputWithContext(ctx context.Context) PolicyTableAssociationArrayOutput {
	return o
}

func (o PolicyTableAssociationArrayOutput) Index(i pulumi.IntInput) PolicyTableAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicyTableAssociation {
		return vs[0].([]*PolicyTableAssociation)[vs[1].(int)]
	}).(PolicyTableAssociationOutput)
}

type PolicyTableAssociationMapOutput struct{ *pulumi.OutputState }

func (PolicyTableAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyTableAssociation)(nil)).Elem()
}

func (o PolicyTableAssociationMapOutput) ToPolicyTableAssociationMapOutput() PolicyTableAssociationMapOutput {
	return o
}

func (o PolicyTableAssociationMapOutput) ToPolicyTableAssociationMapOutputWithContext(ctx context.Context) PolicyTableAssociationMapOutput {
	return o
}

func (o PolicyTableAssociationMapOutput) MapIndex(k pulumi.StringInput) PolicyTableAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicyTableAssociation {
		return vs[0].(map[string]*PolicyTableAssociation)[vs[1].(string)]
	}).(PolicyTableAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyTableAssociationInput)(nil)).Elem(), &PolicyTableAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyTableAssociationArrayInput)(nil)).Elem(), PolicyTableAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyTableAssociationMapInput)(nil)).Elem(), PolicyTableAssociationMap{})
	pulumi.RegisterOutputType(PolicyTableAssociationOutput{})
	pulumi.RegisterOutputType(PolicyTableAssociationArrayOutput{})
	pulumi.RegisterOutputType(PolicyTableAssociationMapOutput{})
}
