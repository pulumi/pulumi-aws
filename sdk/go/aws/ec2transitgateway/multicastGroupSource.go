// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2transitgateway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Registers sources (network interfaces) with the transit gateway multicast group.
// A multicast source is a network interface attached to a supported instance that sends multicast traffic.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2transitgateway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ec2transitgateway.NewMulticastGroupSource(ctx, "example", &ec2transitgateway.MulticastGroupSourceArgs{
//				GroupIpAddress:                  pulumi.String("224.0.0.1"),
//				NetworkInterfaceId:              pulumi.Any(aws_network_interface.Example.Id),
//				TransitGatewayMulticastDomainId: pulumi.Any(aws_ec2_transit_gateway_multicast_domain.Example.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type MulticastGroupSource struct {
	pulumi.CustomResourceState

	// The IP address assigned to the transit gateway multicast group.
	GroupIpAddress pulumi.StringOutput `pulumi:"groupIpAddress"`
	// The group members' network interface ID to register with the transit gateway multicast group.
	NetworkInterfaceId pulumi.StringOutput `pulumi:"networkInterfaceId"`
	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId pulumi.StringOutput `pulumi:"transitGatewayMulticastDomainId"`
}

// NewMulticastGroupSource registers a new resource with the given unique name, arguments, and options.
func NewMulticastGroupSource(ctx *pulumi.Context,
	name string, args *MulticastGroupSourceArgs, opts ...pulumi.ResourceOption) (*MulticastGroupSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupIpAddress == nil {
		return nil, errors.New("invalid value for required argument 'GroupIpAddress'")
	}
	if args.NetworkInterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkInterfaceId'")
	}
	if args.TransitGatewayMulticastDomainId == nil {
		return nil, errors.New("invalid value for required argument 'TransitGatewayMulticastDomainId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MulticastGroupSource
	err := ctx.RegisterResource("aws:ec2transitgateway/multicastGroupSource:MulticastGroupSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMulticastGroupSource gets an existing MulticastGroupSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMulticastGroupSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MulticastGroupSourceState, opts ...pulumi.ResourceOption) (*MulticastGroupSource, error) {
	var resource MulticastGroupSource
	err := ctx.ReadResource("aws:ec2transitgateway/multicastGroupSource:MulticastGroupSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MulticastGroupSource resources.
type multicastGroupSourceState struct {
	// The IP address assigned to the transit gateway multicast group.
	GroupIpAddress *string `pulumi:"groupIpAddress"`
	// The group members' network interface ID to register with the transit gateway multicast group.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId *string `pulumi:"transitGatewayMulticastDomainId"`
}

type MulticastGroupSourceState struct {
	// The IP address assigned to the transit gateway multicast group.
	GroupIpAddress pulumi.StringPtrInput
	// The group members' network interface ID to register with the transit gateway multicast group.
	NetworkInterfaceId pulumi.StringPtrInput
	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId pulumi.StringPtrInput
}

func (MulticastGroupSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*multicastGroupSourceState)(nil)).Elem()
}

type multicastGroupSourceArgs struct {
	// The IP address assigned to the transit gateway multicast group.
	GroupIpAddress string `pulumi:"groupIpAddress"`
	// The group members' network interface ID to register with the transit gateway multicast group.
	NetworkInterfaceId string `pulumi:"networkInterfaceId"`
	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId string `pulumi:"transitGatewayMulticastDomainId"`
}

// The set of arguments for constructing a MulticastGroupSource resource.
type MulticastGroupSourceArgs struct {
	// The IP address assigned to the transit gateway multicast group.
	GroupIpAddress pulumi.StringInput
	// The group members' network interface ID to register with the transit gateway multicast group.
	NetworkInterfaceId pulumi.StringInput
	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId pulumi.StringInput
}

func (MulticastGroupSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*multicastGroupSourceArgs)(nil)).Elem()
}

type MulticastGroupSourceInput interface {
	pulumi.Input

	ToMulticastGroupSourceOutput() MulticastGroupSourceOutput
	ToMulticastGroupSourceOutputWithContext(ctx context.Context) MulticastGroupSourceOutput
}

func (*MulticastGroupSource) ElementType() reflect.Type {
	return reflect.TypeOf((**MulticastGroupSource)(nil)).Elem()
}

func (i *MulticastGroupSource) ToMulticastGroupSourceOutput() MulticastGroupSourceOutput {
	return i.ToMulticastGroupSourceOutputWithContext(context.Background())
}

func (i *MulticastGroupSource) ToMulticastGroupSourceOutputWithContext(ctx context.Context) MulticastGroupSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MulticastGroupSourceOutput)
}

func (i *MulticastGroupSource) ToOutput(ctx context.Context) pulumix.Output[*MulticastGroupSource] {
	return pulumix.Output[*MulticastGroupSource]{
		OutputState: i.ToMulticastGroupSourceOutputWithContext(ctx).OutputState,
	}
}

// MulticastGroupSourceArrayInput is an input type that accepts MulticastGroupSourceArray and MulticastGroupSourceArrayOutput values.
// You can construct a concrete instance of `MulticastGroupSourceArrayInput` via:
//
//	MulticastGroupSourceArray{ MulticastGroupSourceArgs{...} }
type MulticastGroupSourceArrayInput interface {
	pulumi.Input

	ToMulticastGroupSourceArrayOutput() MulticastGroupSourceArrayOutput
	ToMulticastGroupSourceArrayOutputWithContext(context.Context) MulticastGroupSourceArrayOutput
}

type MulticastGroupSourceArray []MulticastGroupSourceInput

func (MulticastGroupSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MulticastGroupSource)(nil)).Elem()
}

func (i MulticastGroupSourceArray) ToMulticastGroupSourceArrayOutput() MulticastGroupSourceArrayOutput {
	return i.ToMulticastGroupSourceArrayOutputWithContext(context.Background())
}

func (i MulticastGroupSourceArray) ToMulticastGroupSourceArrayOutputWithContext(ctx context.Context) MulticastGroupSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MulticastGroupSourceArrayOutput)
}

func (i MulticastGroupSourceArray) ToOutput(ctx context.Context) pulumix.Output[[]*MulticastGroupSource] {
	return pulumix.Output[[]*MulticastGroupSource]{
		OutputState: i.ToMulticastGroupSourceArrayOutputWithContext(ctx).OutputState,
	}
}

// MulticastGroupSourceMapInput is an input type that accepts MulticastGroupSourceMap and MulticastGroupSourceMapOutput values.
// You can construct a concrete instance of `MulticastGroupSourceMapInput` via:
//
//	MulticastGroupSourceMap{ "key": MulticastGroupSourceArgs{...} }
type MulticastGroupSourceMapInput interface {
	pulumi.Input

	ToMulticastGroupSourceMapOutput() MulticastGroupSourceMapOutput
	ToMulticastGroupSourceMapOutputWithContext(context.Context) MulticastGroupSourceMapOutput
}

type MulticastGroupSourceMap map[string]MulticastGroupSourceInput

func (MulticastGroupSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MulticastGroupSource)(nil)).Elem()
}

func (i MulticastGroupSourceMap) ToMulticastGroupSourceMapOutput() MulticastGroupSourceMapOutput {
	return i.ToMulticastGroupSourceMapOutputWithContext(context.Background())
}

func (i MulticastGroupSourceMap) ToMulticastGroupSourceMapOutputWithContext(ctx context.Context) MulticastGroupSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MulticastGroupSourceMapOutput)
}

func (i MulticastGroupSourceMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*MulticastGroupSource] {
	return pulumix.Output[map[string]*MulticastGroupSource]{
		OutputState: i.ToMulticastGroupSourceMapOutputWithContext(ctx).OutputState,
	}
}

type MulticastGroupSourceOutput struct{ *pulumi.OutputState }

func (MulticastGroupSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MulticastGroupSource)(nil)).Elem()
}

func (o MulticastGroupSourceOutput) ToMulticastGroupSourceOutput() MulticastGroupSourceOutput {
	return o
}

func (o MulticastGroupSourceOutput) ToMulticastGroupSourceOutputWithContext(ctx context.Context) MulticastGroupSourceOutput {
	return o
}

func (o MulticastGroupSourceOutput) ToOutput(ctx context.Context) pulumix.Output[*MulticastGroupSource] {
	return pulumix.Output[*MulticastGroupSource]{
		OutputState: o.OutputState,
	}
}

// The IP address assigned to the transit gateway multicast group.
func (o MulticastGroupSourceOutput) GroupIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *MulticastGroupSource) pulumi.StringOutput { return v.GroupIpAddress }).(pulumi.StringOutput)
}

// The group members' network interface ID to register with the transit gateway multicast group.
func (o MulticastGroupSourceOutput) NetworkInterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MulticastGroupSource) pulumi.StringOutput { return v.NetworkInterfaceId }).(pulumi.StringOutput)
}

// The ID of the transit gateway multicast domain.
func (o MulticastGroupSourceOutput) TransitGatewayMulticastDomainId() pulumi.StringOutput {
	return o.ApplyT(func(v *MulticastGroupSource) pulumi.StringOutput { return v.TransitGatewayMulticastDomainId }).(pulumi.StringOutput)
}

type MulticastGroupSourceArrayOutput struct{ *pulumi.OutputState }

func (MulticastGroupSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MulticastGroupSource)(nil)).Elem()
}

func (o MulticastGroupSourceArrayOutput) ToMulticastGroupSourceArrayOutput() MulticastGroupSourceArrayOutput {
	return o
}

func (o MulticastGroupSourceArrayOutput) ToMulticastGroupSourceArrayOutputWithContext(ctx context.Context) MulticastGroupSourceArrayOutput {
	return o
}

func (o MulticastGroupSourceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*MulticastGroupSource] {
	return pulumix.Output[[]*MulticastGroupSource]{
		OutputState: o.OutputState,
	}
}

func (o MulticastGroupSourceArrayOutput) Index(i pulumi.IntInput) MulticastGroupSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MulticastGroupSource {
		return vs[0].([]*MulticastGroupSource)[vs[1].(int)]
	}).(MulticastGroupSourceOutput)
}

type MulticastGroupSourceMapOutput struct{ *pulumi.OutputState }

func (MulticastGroupSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MulticastGroupSource)(nil)).Elem()
}

func (o MulticastGroupSourceMapOutput) ToMulticastGroupSourceMapOutput() MulticastGroupSourceMapOutput {
	return o
}

func (o MulticastGroupSourceMapOutput) ToMulticastGroupSourceMapOutputWithContext(ctx context.Context) MulticastGroupSourceMapOutput {
	return o
}

func (o MulticastGroupSourceMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*MulticastGroupSource] {
	return pulumix.Output[map[string]*MulticastGroupSource]{
		OutputState: o.OutputState,
	}
}

func (o MulticastGroupSourceMapOutput) MapIndex(k pulumi.StringInput) MulticastGroupSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MulticastGroupSource {
		return vs[0].(map[string]*MulticastGroupSource)[vs[1].(string)]
	}).(MulticastGroupSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MulticastGroupSourceInput)(nil)).Elem(), &MulticastGroupSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*MulticastGroupSourceArrayInput)(nil)).Elem(), MulticastGroupSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MulticastGroupSourceMapInput)(nil)).Elem(), MulticastGroupSourceMap{})
	pulumi.RegisterOutputType(MulticastGroupSourceOutput{})
	pulumi.RegisterOutputType(MulticastGroupSourceArrayOutput{})
	pulumi.RegisterOutputType(MulticastGroupSourceMapOutput{})
}
