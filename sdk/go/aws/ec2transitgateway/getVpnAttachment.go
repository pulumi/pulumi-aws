// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2transitgateway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information on an EC2 Transit Gateway VPN Attachment.
//
// > EC2 Transit Gateway VPN Attachments are implicitly created by VPN Connections referencing an EC2 Transit Gateway so there is no managed resource. For ease, the `ec2.VpnConnection` resource includes a `transitGatewayAttachmentId` attribute which can replace some usage of this data source. For tagging the attachment, see the `ec2.Tag` resource.
//
// ## Example Usage
// ### By Transit Gateway and VPN Connection Identifiers
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ec2transitgateway"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := aws_ec2_transit_gateway.Example.Id
// 		opt1 := aws_vpn_connection.Example.Id
// 		_, err := ec2transitgateway.GetVpnAttachment(ctx, &ec2transitgateway.GetVpnAttachmentArgs{
// 			TransitGatewayId: &opt0,
// 			VpnConnectionId:  &opt1,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Filter
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ec2transitgateway"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := ec2transitgateway.GetVpnAttachment(ctx, &ec2transitgateway.GetVpnAttachmentArgs{
// 			Filters: []ec2transitgateway.GetVpnAttachmentFilter{
// 				ec2transitgateway.GetVpnAttachmentFilter{
// 					Name: "resource-id",
// 					Values: []string{
// 						"some-resource",
// 					},
// 				},
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetVpnAttachment(ctx *pulumi.Context, args *GetVpnAttachmentArgs, opts ...pulumi.InvokeOption) (*GetVpnAttachmentResult, error) {
	var rv GetVpnAttachmentResult
	err := ctx.Invoke("aws:ec2transitgateway/getVpnAttachment:getVpnAttachment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVpnAttachment.
type GetVpnAttachmentArgs struct {
	// Configuration block(s) for filtering. Detailed below.
	Filters []GetVpnAttachmentFilter `pulumi:"filters"`
	// A map of tags, each pair of which must exactly match a pair on the desired Transit Gateway VPN Attachment.
	Tags map[string]string `pulumi:"tags"`
	// Identifier of the EC2 Transit Gateway.
	TransitGatewayId *string `pulumi:"transitGatewayId"`
	// Identifier of the EC2 VPN Connection.
	VpnConnectionId *string `pulumi:"vpnConnectionId"`
}

// A collection of values returned by getVpnAttachment.
type GetVpnAttachmentResult struct {
	Filters []GetVpnAttachmentFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Key-value tags for the EC2 Transit Gateway VPN Attachment
	Tags             map[string]string `pulumi:"tags"`
	TransitGatewayId *string           `pulumi:"transitGatewayId"`
	VpnConnectionId  *string           `pulumi:"vpnConnectionId"`
}

func GetVpnAttachmentOutput(ctx *pulumi.Context, args GetVpnAttachmentOutputArgs, opts ...pulumi.InvokeOption) GetVpnAttachmentResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetVpnAttachmentResult, error) {
			args := v.(GetVpnAttachmentArgs)
			r, err := GetVpnAttachment(ctx, &args, opts...)
			return *r, err
		}).(GetVpnAttachmentResultOutput)
}

// A collection of arguments for invoking getVpnAttachment.
type GetVpnAttachmentOutputArgs struct {
	// Configuration block(s) for filtering. Detailed below.
	Filters GetVpnAttachmentFilterArrayInput `pulumi:"filters"`
	// A map of tags, each pair of which must exactly match a pair on the desired Transit Gateway VPN Attachment.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Identifier of the EC2 Transit Gateway.
	TransitGatewayId pulumi.StringPtrInput `pulumi:"transitGatewayId"`
	// Identifier of the EC2 VPN Connection.
	VpnConnectionId pulumi.StringPtrInput `pulumi:"vpnConnectionId"`
}

func (GetVpnAttachmentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpnAttachmentArgs)(nil)).Elem()
}

// A collection of values returned by getVpnAttachment.
type GetVpnAttachmentResultOutput struct{ *pulumi.OutputState }

func (GetVpnAttachmentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpnAttachmentResult)(nil)).Elem()
}

func (o GetVpnAttachmentResultOutput) ToGetVpnAttachmentResultOutput() GetVpnAttachmentResultOutput {
	return o
}

func (o GetVpnAttachmentResultOutput) ToGetVpnAttachmentResultOutputWithContext(ctx context.Context) GetVpnAttachmentResultOutput {
	return o
}

func (o GetVpnAttachmentResultOutput) Filters() GetVpnAttachmentFilterArrayOutput {
	return o.ApplyT(func(v GetVpnAttachmentResult) []GetVpnAttachmentFilter { return v.Filters }).(GetVpnAttachmentFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetVpnAttachmentResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpnAttachmentResult) string { return v.Id }).(pulumi.StringOutput)
}

// Key-value tags for the EC2 Transit Gateway VPN Attachment
func (o GetVpnAttachmentResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetVpnAttachmentResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func (o GetVpnAttachmentResultOutput) TransitGatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVpnAttachmentResult) *string { return v.TransitGatewayId }).(pulumi.StringPtrOutput)
}

func (o GetVpnAttachmentResultOutput) VpnConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVpnAttachmentResult) *string { return v.VpnConnectionId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetVpnAttachmentResultOutput{})
}
