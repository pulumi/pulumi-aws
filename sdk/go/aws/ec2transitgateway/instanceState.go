// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2transitgateway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type InstanceState struct {
	pulumi.CustomResourceState

	Force      pulumi.BoolPtrOutput `pulumi:"force"`
	InstanceId pulumi.StringOutput  `pulumi:"instanceId"`
	State      pulumi.StringOutput  `pulumi:"state"`
}

// NewInstanceState registers a new resource with the given unique name, arguments, and options.
func NewInstanceState(ctx *pulumi.Context,
	name string, args *InstanceStateArgs, opts ...pulumi.ResourceOption) (*InstanceState, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.State == nil {
		return nil, errors.New("invalid value for required argument 'State'")
	}
	var resource InstanceState
	err := ctx.RegisterResource("aws:ec2transitgateway/instanceState:InstanceState", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceState gets an existing InstanceState resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceState(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceStateState, opts ...pulumi.ResourceOption) (*InstanceState, error) {
	var resource InstanceState
	err := ctx.ReadResource("aws:ec2transitgateway/instanceState:InstanceState", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceState resources.
type instanceStateState struct {
	Force      *bool   `pulumi:"force"`
	InstanceId *string `pulumi:"instanceId"`
	State      *string `pulumi:"state"`
}

type InstanceStateState struct {
	Force      pulumi.BoolPtrInput
	InstanceId pulumi.StringPtrInput
	State      pulumi.StringPtrInput
}

func (InstanceStateState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceStateState)(nil)).Elem()
}

type instanceStateArgs struct {
	Force      *bool  `pulumi:"force"`
	InstanceId string `pulumi:"instanceId"`
	State      string `pulumi:"state"`
}

// The set of arguments for constructing a InstanceState resource.
type InstanceStateArgs struct {
	Force      pulumi.BoolPtrInput
	InstanceId pulumi.StringInput
	State      pulumi.StringInput
}

func (InstanceStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceStateArgs)(nil)).Elem()
}

type InstanceStateInput interface {
	pulumi.Input

	ToInstanceStateOutput() InstanceStateOutput
	ToInstanceStateOutputWithContext(ctx context.Context) InstanceStateOutput
}

func (*InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceState)(nil)).Elem()
}

func (i *InstanceState) ToInstanceStateOutput() InstanceStateOutput {
	return i.ToInstanceStateOutputWithContext(context.Background())
}

func (i *InstanceState) ToInstanceStateOutputWithContext(ctx context.Context) InstanceStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceStateOutput)
}

// InstanceStateArrayInput is an input type that accepts InstanceStateArray and InstanceStateArrayOutput values.
// You can construct a concrete instance of `InstanceStateArrayInput` via:
//
//	InstanceStateArray{ InstanceStateArgs{...} }
type InstanceStateArrayInput interface {
	pulumi.Input

	ToInstanceStateArrayOutput() InstanceStateArrayOutput
	ToInstanceStateArrayOutputWithContext(context.Context) InstanceStateArrayOutput
}

type InstanceStateArray []InstanceStateInput

func (InstanceStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceState)(nil)).Elem()
}

func (i InstanceStateArray) ToInstanceStateArrayOutput() InstanceStateArrayOutput {
	return i.ToInstanceStateArrayOutputWithContext(context.Background())
}

func (i InstanceStateArray) ToInstanceStateArrayOutputWithContext(ctx context.Context) InstanceStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceStateArrayOutput)
}

// InstanceStateMapInput is an input type that accepts InstanceStateMap and InstanceStateMapOutput values.
// You can construct a concrete instance of `InstanceStateMapInput` via:
//
//	InstanceStateMap{ "key": InstanceStateArgs{...} }
type InstanceStateMapInput interface {
	pulumi.Input

	ToInstanceStateMapOutput() InstanceStateMapOutput
	ToInstanceStateMapOutputWithContext(context.Context) InstanceStateMapOutput
}

type InstanceStateMap map[string]InstanceStateInput

func (InstanceStateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceState)(nil)).Elem()
}

func (i InstanceStateMap) ToInstanceStateMapOutput() InstanceStateMapOutput {
	return i.ToInstanceStateMapOutputWithContext(context.Background())
}

func (i InstanceStateMap) ToInstanceStateMapOutputWithContext(ctx context.Context) InstanceStateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceStateMapOutput)
}

type InstanceStateOutput struct{ *pulumi.OutputState }

func (InstanceStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceState)(nil)).Elem()
}

func (o InstanceStateOutput) ToInstanceStateOutput() InstanceStateOutput {
	return o
}

func (o InstanceStateOutput) ToInstanceStateOutputWithContext(ctx context.Context) InstanceStateOutput {
	return o
}

func (o InstanceStateOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceState) pulumi.BoolPtrOutput { return v.Force }).(pulumi.BoolPtrOutput)
}

func (o InstanceStateOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceState) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o InstanceStateOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceState) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

type InstanceStateArrayOutput struct{ *pulumi.OutputState }

func (InstanceStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceState)(nil)).Elem()
}

func (o InstanceStateArrayOutput) ToInstanceStateArrayOutput() InstanceStateArrayOutput {
	return o
}

func (o InstanceStateArrayOutput) ToInstanceStateArrayOutputWithContext(ctx context.Context) InstanceStateArrayOutput {
	return o
}

func (o InstanceStateArrayOutput) Index(i pulumi.IntInput) InstanceStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InstanceState {
		return vs[0].([]*InstanceState)[vs[1].(int)]
	}).(InstanceStateOutput)
}

type InstanceStateMapOutput struct{ *pulumi.OutputState }

func (InstanceStateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceState)(nil)).Elem()
}

func (o InstanceStateMapOutput) ToInstanceStateMapOutput() InstanceStateMapOutput {
	return o
}

func (o InstanceStateMapOutput) ToInstanceStateMapOutputWithContext(ctx context.Context) InstanceStateMapOutput {
	return o
}

func (o InstanceStateMapOutput) MapIndex(k pulumi.StringInput) InstanceStateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InstanceState {
		return vs[0].(map[string]*InstanceState)[vs[1].(string)]
	}).(InstanceStateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceStateInput)(nil)).Elem(), &InstanceState{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceStateArrayInput)(nil)).Elem(), InstanceStateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceStateMapInput)(nil)).Elem(), InstanceStateMap{})
	pulumi.RegisterOutputType(InstanceStateOutput{})
	pulumi.RegisterOutputType(InstanceStateArrayOutput{})
	pulumi.RegisterOutputType(InstanceStateMapOutput{})
}
