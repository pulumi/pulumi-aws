// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2transitgateway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ConnectPeer struct {
	pulumi.CustomResourceState

	Arn                        pulumi.StringOutput      `pulumi:"arn"`
	BgpAsn                     pulumi.StringOutput      `pulumi:"bgpAsn"`
	InsideCidrBlocks           pulumi.StringArrayOutput `pulumi:"insideCidrBlocks"`
	PeerAddress                pulumi.StringOutput      `pulumi:"peerAddress"`
	Tags                       pulumi.StringMapOutput   `pulumi:"tags"`
	TagsAll                    pulumi.StringMapOutput   `pulumi:"tagsAll"`
	TransitGatewayAddress      pulumi.StringOutput      `pulumi:"transitGatewayAddress"`
	TransitGatewayAttachmentId pulumi.StringOutput      `pulumi:"transitGatewayAttachmentId"`
}

// NewConnectPeer registers a new resource with the given unique name, arguments, and options.
func NewConnectPeer(ctx *pulumi.Context,
	name string, args *ConnectPeerArgs, opts ...pulumi.ResourceOption) (*ConnectPeer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InsideCidrBlocks == nil {
		return nil, errors.New("invalid value for required argument 'InsideCidrBlocks'")
	}
	if args.PeerAddress == nil {
		return nil, errors.New("invalid value for required argument 'PeerAddress'")
	}
	if args.TransitGatewayAttachmentId == nil {
		return nil, errors.New("invalid value for required argument 'TransitGatewayAttachmentId'")
	}
	var resource ConnectPeer
	err := ctx.RegisterResource("aws:ec2transitgateway/connectPeer:ConnectPeer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectPeer gets an existing ConnectPeer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectPeer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectPeerState, opts ...pulumi.ResourceOption) (*ConnectPeer, error) {
	var resource ConnectPeer
	err := ctx.ReadResource("aws:ec2transitgateway/connectPeer:ConnectPeer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectPeer resources.
type connectPeerState struct {
	Arn                        *string           `pulumi:"arn"`
	BgpAsn                     *string           `pulumi:"bgpAsn"`
	InsideCidrBlocks           []string          `pulumi:"insideCidrBlocks"`
	PeerAddress                *string           `pulumi:"peerAddress"`
	Tags                       map[string]string `pulumi:"tags"`
	TagsAll                    map[string]string `pulumi:"tagsAll"`
	TransitGatewayAddress      *string           `pulumi:"transitGatewayAddress"`
	TransitGatewayAttachmentId *string           `pulumi:"transitGatewayAttachmentId"`
}

type ConnectPeerState struct {
	Arn                        pulumi.StringPtrInput
	BgpAsn                     pulumi.StringPtrInput
	InsideCidrBlocks           pulumi.StringArrayInput
	PeerAddress                pulumi.StringPtrInput
	Tags                       pulumi.StringMapInput
	TagsAll                    pulumi.StringMapInput
	TransitGatewayAddress      pulumi.StringPtrInput
	TransitGatewayAttachmentId pulumi.StringPtrInput
}

func (ConnectPeerState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectPeerState)(nil)).Elem()
}

type connectPeerArgs struct {
	BgpAsn                     *string           `pulumi:"bgpAsn"`
	InsideCidrBlocks           []string          `pulumi:"insideCidrBlocks"`
	PeerAddress                string            `pulumi:"peerAddress"`
	Tags                       map[string]string `pulumi:"tags"`
	TransitGatewayAddress      *string           `pulumi:"transitGatewayAddress"`
	TransitGatewayAttachmentId string            `pulumi:"transitGatewayAttachmentId"`
}

// The set of arguments for constructing a ConnectPeer resource.
type ConnectPeerArgs struct {
	BgpAsn                     pulumi.StringPtrInput
	InsideCidrBlocks           pulumi.StringArrayInput
	PeerAddress                pulumi.StringInput
	Tags                       pulumi.StringMapInput
	TransitGatewayAddress      pulumi.StringPtrInput
	TransitGatewayAttachmentId pulumi.StringInput
}

func (ConnectPeerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectPeerArgs)(nil)).Elem()
}

type ConnectPeerInput interface {
	pulumi.Input

	ToConnectPeerOutput() ConnectPeerOutput
	ToConnectPeerOutputWithContext(ctx context.Context) ConnectPeerOutput
}

func (*ConnectPeer) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectPeer)(nil)).Elem()
}

func (i *ConnectPeer) ToConnectPeerOutput() ConnectPeerOutput {
	return i.ToConnectPeerOutputWithContext(context.Background())
}

func (i *ConnectPeer) ToConnectPeerOutputWithContext(ctx context.Context) ConnectPeerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectPeerOutput)
}

// ConnectPeerArrayInput is an input type that accepts ConnectPeerArray and ConnectPeerArrayOutput values.
// You can construct a concrete instance of `ConnectPeerArrayInput` via:
//
//	ConnectPeerArray{ ConnectPeerArgs{...} }
type ConnectPeerArrayInput interface {
	pulumi.Input

	ToConnectPeerArrayOutput() ConnectPeerArrayOutput
	ToConnectPeerArrayOutputWithContext(context.Context) ConnectPeerArrayOutput
}

type ConnectPeerArray []ConnectPeerInput

func (ConnectPeerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectPeer)(nil)).Elem()
}

func (i ConnectPeerArray) ToConnectPeerArrayOutput() ConnectPeerArrayOutput {
	return i.ToConnectPeerArrayOutputWithContext(context.Background())
}

func (i ConnectPeerArray) ToConnectPeerArrayOutputWithContext(ctx context.Context) ConnectPeerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectPeerArrayOutput)
}

// ConnectPeerMapInput is an input type that accepts ConnectPeerMap and ConnectPeerMapOutput values.
// You can construct a concrete instance of `ConnectPeerMapInput` via:
//
//	ConnectPeerMap{ "key": ConnectPeerArgs{...} }
type ConnectPeerMapInput interface {
	pulumi.Input

	ToConnectPeerMapOutput() ConnectPeerMapOutput
	ToConnectPeerMapOutputWithContext(context.Context) ConnectPeerMapOutput
}

type ConnectPeerMap map[string]ConnectPeerInput

func (ConnectPeerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectPeer)(nil)).Elem()
}

func (i ConnectPeerMap) ToConnectPeerMapOutput() ConnectPeerMapOutput {
	return i.ToConnectPeerMapOutputWithContext(context.Background())
}

func (i ConnectPeerMap) ToConnectPeerMapOutputWithContext(ctx context.Context) ConnectPeerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectPeerMapOutput)
}

type ConnectPeerOutput struct{ *pulumi.OutputState }

func (ConnectPeerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectPeer)(nil)).Elem()
}

func (o ConnectPeerOutput) ToConnectPeerOutput() ConnectPeerOutput {
	return o
}

func (o ConnectPeerOutput) ToConnectPeerOutputWithContext(ctx context.Context) ConnectPeerOutput {
	return o
}

func (o ConnectPeerOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectPeer) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ConnectPeerOutput) BgpAsn() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectPeer) pulumi.StringOutput { return v.BgpAsn }).(pulumi.StringOutput)
}

func (o ConnectPeerOutput) InsideCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConnectPeer) pulumi.StringArrayOutput { return v.InsideCidrBlocks }).(pulumi.StringArrayOutput)
}

func (o ConnectPeerOutput) PeerAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectPeer) pulumi.StringOutput { return v.PeerAddress }).(pulumi.StringOutput)
}

func (o ConnectPeerOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConnectPeer) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ConnectPeerOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConnectPeer) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o ConnectPeerOutput) TransitGatewayAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectPeer) pulumi.StringOutput { return v.TransitGatewayAddress }).(pulumi.StringOutput)
}

func (o ConnectPeerOutput) TransitGatewayAttachmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectPeer) pulumi.StringOutput { return v.TransitGatewayAttachmentId }).(pulumi.StringOutput)
}

type ConnectPeerArrayOutput struct{ *pulumi.OutputState }

func (ConnectPeerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectPeer)(nil)).Elem()
}

func (o ConnectPeerArrayOutput) ToConnectPeerArrayOutput() ConnectPeerArrayOutput {
	return o
}

func (o ConnectPeerArrayOutput) ToConnectPeerArrayOutputWithContext(ctx context.Context) ConnectPeerArrayOutput {
	return o
}

func (o ConnectPeerArrayOutput) Index(i pulumi.IntInput) ConnectPeerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectPeer {
		return vs[0].([]*ConnectPeer)[vs[1].(int)]
	}).(ConnectPeerOutput)
}

type ConnectPeerMapOutput struct{ *pulumi.OutputState }

func (ConnectPeerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectPeer)(nil)).Elem()
}

func (o ConnectPeerMapOutput) ToConnectPeerMapOutput() ConnectPeerMapOutput {
	return o
}

func (o ConnectPeerMapOutput) ToConnectPeerMapOutputWithContext(ctx context.Context) ConnectPeerMapOutput {
	return o
}

func (o ConnectPeerMapOutput) MapIndex(k pulumi.StringInput) ConnectPeerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectPeer {
		return vs[0].(map[string]*ConnectPeer)[vs[1].(string)]
	}).(ConnectPeerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectPeerInput)(nil)).Elem(), &ConnectPeer{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectPeerArrayInput)(nil)).Elem(), ConnectPeerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectPeerMapInput)(nil)).Elem(), ConnectPeerMap{})
	pulumi.RegisterOutputType(ConnectPeerOutput{})
	pulumi.RegisterOutputType(ConnectPeerArrayOutput{})
	pulumi.RegisterOutputType(ConnectPeerMapOutput{})
}
