// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2transitgateway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an EC2 Transit Gateway Route Table association.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ec2transitgateway"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := ec2transitgateway.NewRouteTableAssociation(ctx, "example", &ec2transitgateway.RouteTableAssociationArgs{
// 			TransitGatewayAttachmentId: pulumi.Any(aws_ec2_transit_gateway_vpc_attachment.Example.Id),
// 			TransitGatewayRouteTableId: pulumi.Any(aws_ec2_transit_gateway_route_table.Example.Id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// `aws_ec2_transit_gateway_route_table_association` can be imported by using the EC2 Transit Gateway Route Table identifier, an underscore, and the EC2 Transit Gateway Attachment identifier, e.g.
//
// ```sh
//  $ pulumi import aws:ec2transitgateway/routeTableAssociation:RouteTableAssociation example tgw-rtb-12345678_tgw-attach-87654321
// ```
type RouteTableAssociation struct {
	pulumi.CustomResourceState

	// Identifier of the resource
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// Type of the resource
	ResourceType pulumi.StringOutput `pulumi:"resourceType"`
	// Identifier of EC2 Transit Gateway Attachment.
	TransitGatewayAttachmentId pulumi.StringOutput `pulumi:"transitGatewayAttachmentId"`
	// Identifier of EC2 Transit Gateway Route Table.
	TransitGatewayRouteTableId pulumi.StringOutput `pulumi:"transitGatewayRouteTableId"`
}

// NewRouteTableAssociation registers a new resource with the given unique name, arguments, and options.
func NewRouteTableAssociation(ctx *pulumi.Context,
	name string, args *RouteTableAssociationArgs, opts ...pulumi.ResourceOption) (*RouteTableAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TransitGatewayAttachmentId == nil {
		return nil, errors.New("invalid value for required argument 'TransitGatewayAttachmentId'")
	}
	if args.TransitGatewayRouteTableId == nil {
		return nil, errors.New("invalid value for required argument 'TransitGatewayRouteTableId'")
	}
	var resource RouteTableAssociation
	err := ctx.RegisterResource("aws:ec2transitgateway/routeTableAssociation:RouteTableAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteTableAssociation gets an existing RouteTableAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteTableAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteTableAssociationState, opts ...pulumi.ResourceOption) (*RouteTableAssociation, error) {
	var resource RouteTableAssociation
	err := ctx.ReadResource("aws:ec2transitgateway/routeTableAssociation:RouteTableAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteTableAssociation resources.
type routeTableAssociationState struct {
	// Identifier of the resource
	ResourceId *string `pulumi:"resourceId"`
	// Type of the resource
	ResourceType *string `pulumi:"resourceType"`
	// Identifier of EC2 Transit Gateway Attachment.
	TransitGatewayAttachmentId *string `pulumi:"transitGatewayAttachmentId"`
	// Identifier of EC2 Transit Gateway Route Table.
	TransitGatewayRouteTableId *string `pulumi:"transitGatewayRouteTableId"`
}

type RouteTableAssociationState struct {
	// Identifier of the resource
	ResourceId pulumi.StringPtrInput
	// Type of the resource
	ResourceType pulumi.StringPtrInput
	// Identifier of EC2 Transit Gateway Attachment.
	TransitGatewayAttachmentId pulumi.StringPtrInput
	// Identifier of EC2 Transit Gateway Route Table.
	TransitGatewayRouteTableId pulumi.StringPtrInput
}

func (RouteTableAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeTableAssociationState)(nil)).Elem()
}

type routeTableAssociationArgs struct {
	// Identifier of EC2 Transit Gateway Attachment.
	TransitGatewayAttachmentId string `pulumi:"transitGatewayAttachmentId"`
	// Identifier of EC2 Transit Gateway Route Table.
	TransitGatewayRouteTableId string `pulumi:"transitGatewayRouteTableId"`
}

// The set of arguments for constructing a RouteTableAssociation resource.
type RouteTableAssociationArgs struct {
	// Identifier of EC2 Transit Gateway Attachment.
	TransitGatewayAttachmentId pulumi.StringInput
	// Identifier of EC2 Transit Gateway Route Table.
	TransitGatewayRouteTableId pulumi.StringInput
}

func (RouteTableAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeTableAssociationArgs)(nil)).Elem()
}

type RouteTableAssociationInput interface {
	pulumi.Input

	ToRouteTableAssociationOutput() RouteTableAssociationOutput
	ToRouteTableAssociationOutputWithContext(ctx context.Context) RouteTableAssociationOutput
}

func (*RouteTableAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteTableAssociation)(nil))
}

func (i *RouteTableAssociation) ToRouteTableAssociationOutput() RouteTableAssociationOutput {
	return i.ToRouteTableAssociationOutputWithContext(context.Background())
}

func (i *RouteTableAssociation) ToRouteTableAssociationOutputWithContext(ctx context.Context) RouteTableAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableAssociationOutput)
}

func (i *RouteTableAssociation) ToRouteTableAssociationPtrOutput() RouteTableAssociationPtrOutput {
	return i.ToRouteTableAssociationPtrOutputWithContext(context.Background())
}

func (i *RouteTableAssociation) ToRouteTableAssociationPtrOutputWithContext(ctx context.Context) RouteTableAssociationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableAssociationPtrOutput)
}

type RouteTableAssociationPtrInput interface {
	pulumi.Input

	ToRouteTableAssociationPtrOutput() RouteTableAssociationPtrOutput
	ToRouteTableAssociationPtrOutputWithContext(ctx context.Context) RouteTableAssociationPtrOutput
}

type routeTableAssociationPtrType RouteTableAssociationArgs

func (*routeTableAssociationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteTableAssociation)(nil))
}

func (i *routeTableAssociationPtrType) ToRouteTableAssociationPtrOutput() RouteTableAssociationPtrOutput {
	return i.ToRouteTableAssociationPtrOutputWithContext(context.Background())
}

func (i *routeTableAssociationPtrType) ToRouteTableAssociationPtrOutputWithContext(ctx context.Context) RouteTableAssociationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableAssociationPtrOutput)
}

// RouteTableAssociationArrayInput is an input type that accepts RouteTableAssociationArray and RouteTableAssociationArrayOutput values.
// You can construct a concrete instance of `RouteTableAssociationArrayInput` via:
//
//          RouteTableAssociationArray{ RouteTableAssociationArgs{...} }
type RouteTableAssociationArrayInput interface {
	pulumi.Input

	ToRouteTableAssociationArrayOutput() RouteTableAssociationArrayOutput
	ToRouteTableAssociationArrayOutputWithContext(context.Context) RouteTableAssociationArrayOutput
}

type RouteTableAssociationArray []RouteTableAssociationInput

func (RouteTableAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteTableAssociation)(nil)).Elem()
}

func (i RouteTableAssociationArray) ToRouteTableAssociationArrayOutput() RouteTableAssociationArrayOutput {
	return i.ToRouteTableAssociationArrayOutputWithContext(context.Background())
}

func (i RouteTableAssociationArray) ToRouteTableAssociationArrayOutputWithContext(ctx context.Context) RouteTableAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableAssociationArrayOutput)
}

// RouteTableAssociationMapInput is an input type that accepts RouteTableAssociationMap and RouteTableAssociationMapOutput values.
// You can construct a concrete instance of `RouteTableAssociationMapInput` via:
//
//          RouteTableAssociationMap{ "key": RouteTableAssociationArgs{...} }
type RouteTableAssociationMapInput interface {
	pulumi.Input

	ToRouteTableAssociationMapOutput() RouteTableAssociationMapOutput
	ToRouteTableAssociationMapOutputWithContext(context.Context) RouteTableAssociationMapOutput
}

type RouteTableAssociationMap map[string]RouteTableAssociationInput

func (RouteTableAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteTableAssociation)(nil)).Elem()
}

func (i RouteTableAssociationMap) ToRouteTableAssociationMapOutput() RouteTableAssociationMapOutput {
	return i.ToRouteTableAssociationMapOutputWithContext(context.Background())
}

func (i RouteTableAssociationMap) ToRouteTableAssociationMapOutputWithContext(ctx context.Context) RouteTableAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableAssociationMapOutput)
}

type RouteTableAssociationOutput struct {
	*pulumi.OutputState
}

func (RouteTableAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteTableAssociation)(nil))
}

func (o RouteTableAssociationOutput) ToRouteTableAssociationOutput() RouteTableAssociationOutput {
	return o
}

func (o RouteTableAssociationOutput) ToRouteTableAssociationOutputWithContext(ctx context.Context) RouteTableAssociationOutput {
	return o
}

func (o RouteTableAssociationOutput) ToRouteTableAssociationPtrOutput() RouteTableAssociationPtrOutput {
	return o.ToRouteTableAssociationPtrOutputWithContext(context.Background())
}

func (o RouteTableAssociationOutput) ToRouteTableAssociationPtrOutputWithContext(ctx context.Context) RouteTableAssociationPtrOutput {
	return o.ApplyT(func(v RouteTableAssociation) *RouteTableAssociation {
		return &v
	}).(RouteTableAssociationPtrOutput)
}

type RouteTableAssociationPtrOutput struct {
	*pulumi.OutputState
}

func (RouteTableAssociationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteTableAssociation)(nil))
}

func (o RouteTableAssociationPtrOutput) ToRouteTableAssociationPtrOutput() RouteTableAssociationPtrOutput {
	return o
}

func (o RouteTableAssociationPtrOutput) ToRouteTableAssociationPtrOutputWithContext(ctx context.Context) RouteTableAssociationPtrOutput {
	return o
}

type RouteTableAssociationArrayOutput struct{ *pulumi.OutputState }

func (RouteTableAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouteTableAssociation)(nil))
}

func (o RouteTableAssociationArrayOutput) ToRouteTableAssociationArrayOutput() RouteTableAssociationArrayOutput {
	return o
}

func (o RouteTableAssociationArrayOutput) ToRouteTableAssociationArrayOutputWithContext(ctx context.Context) RouteTableAssociationArrayOutput {
	return o
}

func (o RouteTableAssociationArrayOutput) Index(i pulumi.IntInput) RouteTableAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouteTableAssociation {
		return vs[0].([]RouteTableAssociation)[vs[1].(int)]
	}).(RouteTableAssociationOutput)
}

type RouteTableAssociationMapOutput struct{ *pulumi.OutputState }

func (RouteTableAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]RouteTableAssociation)(nil))
}

func (o RouteTableAssociationMapOutput) ToRouteTableAssociationMapOutput() RouteTableAssociationMapOutput {
	return o
}

func (o RouteTableAssociationMapOutput) ToRouteTableAssociationMapOutputWithContext(ctx context.Context) RouteTableAssociationMapOutput {
	return o
}

func (o RouteTableAssociationMapOutput) MapIndex(k pulumi.StringInput) RouteTableAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) RouteTableAssociation {
		return vs[0].(map[string]RouteTableAssociation)[vs[1].(string)]
	}).(RouteTableAssociationOutput)
}

func init() {
	pulumi.RegisterOutputType(RouteTableAssociationOutput{})
	pulumi.RegisterOutputType(RouteTableAssociationPtrOutput{})
	pulumi.RegisterOutputType(RouteTableAssociationArrayOutput{})
	pulumi.RegisterOutputType(RouteTableAssociationMapOutput{})
}
