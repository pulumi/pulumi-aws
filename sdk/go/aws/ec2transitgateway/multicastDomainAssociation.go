// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2transitgateway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Associates the specified subnet and transit gateway attachment with the specified transit gateway multicast domain.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2transitgateway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleTransitGateway, err := ec2transitgateway.NewTransitGateway(ctx, "exampleTransitGateway", &ec2transitgateway.TransitGatewayArgs{
//				MulticastSupport: pulumi.String("enable"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVpcAttachment, err := ec2transitgateway.NewVpcAttachment(ctx, "exampleVpcAttachment", &ec2transitgateway.VpcAttachmentArgs{
//				SubnetIds: pulumi.StringArray{
//					aws_subnet.Example.Id,
//				},
//				TransitGatewayId: exampleTransitGateway.ID(),
//				VpcId:            pulumi.Any(aws_vpc.Example.Id),
//			})
//			if err != nil {
//				return err
//			}
//			exampleMulticastDomain, err := ec2transitgateway.NewMulticastDomain(ctx, "exampleMulticastDomain", &ec2transitgateway.MulticastDomainArgs{
//				TransitGatewayId: exampleTransitGateway.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ec2transitgateway.NewMulticastDomainAssociation(ctx, "exampleMulticastDomainAssociation", &ec2transitgateway.MulticastDomainAssociationArgs{
//				SubnetId:                        pulumi.Any(aws_subnet.Example.Id),
//				TransitGatewayAttachmentId:      exampleVpcAttachment.ID(),
//				TransitGatewayMulticastDomainId: exampleMulticastDomain.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type MulticastDomainAssociation struct {
	pulumi.CustomResourceState

	// The ID of the subnet to associate with the transit gateway multicast domain.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// The ID of the transit gateway attachment.
	TransitGatewayAttachmentId pulumi.StringOutput `pulumi:"transitGatewayAttachmentId"`
	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId pulumi.StringOutput `pulumi:"transitGatewayMulticastDomainId"`
}

// NewMulticastDomainAssociation registers a new resource with the given unique name, arguments, and options.
func NewMulticastDomainAssociation(ctx *pulumi.Context,
	name string, args *MulticastDomainAssociationArgs, opts ...pulumi.ResourceOption) (*MulticastDomainAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.TransitGatewayAttachmentId == nil {
		return nil, errors.New("invalid value for required argument 'TransitGatewayAttachmentId'")
	}
	if args.TransitGatewayMulticastDomainId == nil {
		return nil, errors.New("invalid value for required argument 'TransitGatewayMulticastDomainId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MulticastDomainAssociation
	err := ctx.RegisterResource("aws:ec2transitgateway/multicastDomainAssociation:MulticastDomainAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMulticastDomainAssociation gets an existing MulticastDomainAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMulticastDomainAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MulticastDomainAssociationState, opts ...pulumi.ResourceOption) (*MulticastDomainAssociation, error) {
	var resource MulticastDomainAssociation
	err := ctx.ReadResource("aws:ec2transitgateway/multicastDomainAssociation:MulticastDomainAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MulticastDomainAssociation resources.
type multicastDomainAssociationState struct {
	// The ID of the subnet to associate with the transit gateway multicast domain.
	SubnetId *string `pulumi:"subnetId"`
	// The ID of the transit gateway attachment.
	TransitGatewayAttachmentId *string `pulumi:"transitGatewayAttachmentId"`
	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId *string `pulumi:"transitGatewayMulticastDomainId"`
}

type MulticastDomainAssociationState struct {
	// The ID of the subnet to associate with the transit gateway multicast domain.
	SubnetId pulumi.StringPtrInput
	// The ID of the transit gateway attachment.
	TransitGatewayAttachmentId pulumi.StringPtrInput
	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId pulumi.StringPtrInput
}

func (MulticastDomainAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*multicastDomainAssociationState)(nil)).Elem()
}

type multicastDomainAssociationArgs struct {
	// The ID of the subnet to associate with the transit gateway multicast domain.
	SubnetId string `pulumi:"subnetId"`
	// The ID of the transit gateway attachment.
	TransitGatewayAttachmentId string `pulumi:"transitGatewayAttachmentId"`
	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId string `pulumi:"transitGatewayMulticastDomainId"`
}

// The set of arguments for constructing a MulticastDomainAssociation resource.
type MulticastDomainAssociationArgs struct {
	// The ID of the subnet to associate with the transit gateway multicast domain.
	SubnetId pulumi.StringInput
	// The ID of the transit gateway attachment.
	TransitGatewayAttachmentId pulumi.StringInput
	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId pulumi.StringInput
}

func (MulticastDomainAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*multicastDomainAssociationArgs)(nil)).Elem()
}

type MulticastDomainAssociationInput interface {
	pulumi.Input

	ToMulticastDomainAssociationOutput() MulticastDomainAssociationOutput
	ToMulticastDomainAssociationOutputWithContext(ctx context.Context) MulticastDomainAssociationOutput
}

func (*MulticastDomainAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**MulticastDomainAssociation)(nil)).Elem()
}

func (i *MulticastDomainAssociation) ToMulticastDomainAssociationOutput() MulticastDomainAssociationOutput {
	return i.ToMulticastDomainAssociationOutputWithContext(context.Background())
}

func (i *MulticastDomainAssociation) ToMulticastDomainAssociationOutputWithContext(ctx context.Context) MulticastDomainAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MulticastDomainAssociationOutput)
}

// MulticastDomainAssociationArrayInput is an input type that accepts MulticastDomainAssociationArray and MulticastDomainAssociationArrayOutput values.
// You can construct a concrete instance of `MulticastDomainAssociationArrayInput` via:
//
//	MulticastDomainAssociationArray{ MulticastDomainAssociationArgs{...} }
type MulticastDomainAssociationArrayInput interface {
	pulumi.Input

	ToMulticastDomainAssociationArrayOutput() MulticastDomainAssociationArrayOutput
	ToMulticastDomainAssociationArrayOutputWithContext(context.Context) MulticastDomainAssociationArrayOutput
}

type MulticastDomainAssociationArray []MulticastDomainAssociationInput

func (MulticastDomainAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MulticastDomainAssociation)(nil)).Elem()
}

func (i MulticastDomainAssociationArray) ToMulticastDomainAssociationArrayOutput() MulticastDomainAssociationArrayOutput {
	return i.ToMulticastDomainAssociationArrayOutputWithContext(context.Background())
}

func (i MulticastDomainAssociationArray) ToMulticastDomainAssociationArrayOutputWithContext(ctx context.Context) MulticastDomainAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MulticastDomainAssociationArrayOutput)
}

// MulticastDomainAssociationMapInput is an input type that accepts MulticastDomainAssociationMap and MulticastDomainAssociationMapOutput values.
// You can construct a concrete instance of `MulticastDomainAssociationMapInput` via:
//
//	MulticastDomainAssociationMap{ "key": MulticastDomainAssociationArgs{...} }
type MulticastDomainAssociationMapInput interface {
	pulumi.Input

	ToMulticastDomainAssociationMapOutput() MulticastDomainAssociationMapOutput
	ToMulticastDomainAssociationMapOutputWithContext(context.Context) MulticastDomainAssociationMapOutput
}

type MulticastDomainAssociationMap map[string]MulticastDomainAssociationInput

func (MulticastDomainAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MulticastDomainAssociation)(nil)).Elem()
}

func (i MulticastDomainAssociationMap) ToMulticastDomainAssociationMapOutput() MulticastDomainAssociationMapOutput {
	return i.ToMulticastDomainAssociationMapOutputWithContext(context.Background())
}

func (i MulticastDomainAssociationMap) ToMulticastDomainAssociationMapOutputWithContext(ctx context.Context) MulticastDomainAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MulticastDomainAssociationMapOutput)
}

type MulticastDomainAssociationOutput struct{ *pulumi.OutputState }

func (MulticastDomainAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MulticastDomainAssociation)(nil)).Elem()
}

func (o MulticastDomainAssociationOutput) ToMulticastDomainAssociationOutput() MulticastDomainAssociationOutput {
	return o
}

func (o MulticastDomainAssociationOutput) ToMulticastDomainAssociationOutputWithContext(ctx context.Context) MulticastDomainAssociationOutput {
	return o
}

// The ID of the subnet to associate with the transit gateway multicast domain.
func (o MulticastDomainAssociationOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *MulticastDomainAssociation) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// The ID of the transit gateway attachment.
func (o MulticastDomainAssociationOutput) TransitGatewayAttachmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *MulticastDomainAssociation) pulumi.StringOutput { return v.TransitGatewayAttachmentId }).(pulumi.StringOutput)
}

// The ID of the transit gateway multicast domain.
func (o MulticastDomainAssociationOutput) TransitGatewayMulticastDomainId() pulumi.StringOutput {
	return o.ApplyT(func(v *MulticastDomainAssociation) pulumi.StringOutput { return v.TransitGatewayMulticastDomainId }).(pulumi.StringOutput)
}

type MulticastDomainAssociationArrayOutput struct{ *pulumi.OutputState }

func (MulticastDomainAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MulticastDomainAssociation)(nil)).Elem()
}

func (o MulticastDomainAssociationArrayOutput) ToMulticastDomainAssociationArrayOutput() MulticastDomainAssociationArrayOutput {
	return o
}

func (o MulticastDomainAssociationArrayOutput) ToMulticastDomainAssociationArrayOutputWithContext(ctx context.Context) MulticastDomainAssociationArrayOutput {
	return o
}

func (o MulticastDomainAssociationArrayOutput) Index(i pulumi.IntInput) MulticastDomainAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MulticastDomainAssociation {
		return vs[0].([]*MulticastDomainAssociation)[vs[1].(int)]
	}).(MulticastDomainAssociationOutput)
}

type MulticastDomainAssociationMapOutput struct{ *pulumi.OutputState }

func (MulticastDomainAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MulticastDomainAssociation)(nil)).Elem()
}

func (o MulticastDomainAssociationMapOutput) ToMulticastDomainAssociationMapOutput() MulticastDomainAssociationMapOutput {
	return o
}

func (o MulticastDomainAssociationMapOutput) ToMulticastDomainAssociationMapOutputWithContext(ctx context.Context) MulticastDomainAssociationMapOutput {
	return o
}

func (o MulticastDomainAssociationMapOutput) MapIndex(k pulumi.StringInput) MulticastDomainAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MulticastDomainAssociation {
		return vs[0].(map[string]*MulticastDomainAssociation)[vs[1].(string)]
	}).(MulticastDomainAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MulticastDomainAssociationInput)(nil)).Elem(), &MulticastDomainAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*MulticastDomainAssociationArrayInput)(nil)).Elem(), MulticastDomainAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MulticastDomainAssociationMapInput)(nil)).Elem(), MulticastDomainAssociationMap{})
	pulumi.RegisterOutputType(MulticastDomainAssociationOutput{})
	pulumi.RegisterOutputType(MulticastDomainAssociationArrayOutput{})
	pulumi.RegisterOutputType(MulticastDomainAssociationMapOutput{})
}
