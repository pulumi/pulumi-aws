// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2transitgateway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides informations for routes of a specific transit gateway, such as state, type, cidr
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2transitgateway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ec2transitgateway.GetRouteTableRoutes(ctx, &ec2transitgateway.GetRouteTableRoutesArgs{
//				Filters: []ec2transitgateway.GetRouteTableRoutesFilter{
//					{
//						Name: "type",
//						Values: []string{
//							"propagated",
//						},
//					},
//				},
//				TransitGatewayRouteTableId: example.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Complexe use case with transit gateway peering
//
// # This example allow to create a mesh of transit gateway for diff√©rent regions routing all traffic to on-prem VPN
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2transitgateway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func notImplemented(message string) pulumi.AnyOutput {
//		panic(message)
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			this, err := ec2transitgateway.NewTransitGateway(ctx, "this", &ec2transitgateway.TransitGatewayArgs{
//				DefaultRouteTableAssociation: pulumi.String("disable"),
//				DefaultRouteTablePropagation: pulumi.String("disable"),
//			})
//			if err != nil {
//				return err
//			}
//			thisVpcAttachment, err := ec2transitgateway.NewVpcAttachment(ctx, "this", &ec2transitgateway.VpcAttachmentArgs{
//				SubnetIds:        "TODO: For expression",
//				TransitGatewayId: this[0].ID(),
//				VpcId:            pulumi.Any(thisAwsVpc.Id),
//				TransitGatewayDefaultRouteTableAssociation: pulumi.Bool(false),
//				TransitGatewayDefaultRouteTablePropagation: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			thisRouteTable, err := ec2transitgateway.NewRouteTable(ctx, "this", &ec2transitgateway.RouteTableArgs{
//				TransitGatewayId: pulumi.Any(myTransitGatewayId),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ec2transitgateway.NewRouteTableAssociation(ctx, "vpc", &ec2transitgateway.RouteTableAssociationArgs{
//				TransitGatewayAttachmentId: thisVpcAttachment.ID(),
//				TransitGatewayRouteTableId: pulumi.Any(myTransitGatewayIdRouteTable),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ec2transitgateway.NewRouteTableAssociation(ctx, "vpn", &ec2transitgateway.RouteTableAssociationArgs{
//				TransitGatewayAttachmentId: pulumi.Any(thisAwsVpnConnection[0].TransitGatewayAttachmentId),
//				TransitGatewayRouteTableId: pulumi.Any(myTransitGatewayIdRouteTable),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ec2transitgateway.NewRouteTablePropagation(ctx, "vpc", &ec2transitgateway.RouteTablePropagationArgs{
//				TransitGatewayAttachmentId: thisVpcAttachment.ID(),
//				TransitGatewayRouteTableId: thisRouteTable.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ec2transitgateway.NewRouteTablePropagation(ctx, "vpn", &ec2transitgateway.RouteTablePropagationArgs{
//				TransitGatewayAttachmentId: pulumi.Any(thisAwsVpnConnection[0].TransitGatewayAttachmentId),
//				TransitGatewayRouteTableId: thisRouteTable.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ec2transitgateway.NewTransitGateway(ctx, "eu-central-1", &ec2transitgateway.TransitGatewayArgs{
//				DefaultRouteTableAssociation: pulumi.String("disable"),
//				DefaultRouteTablePropagation: pulumi.String("disable"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ec2transitgateway.NewPeeringAttachment(ctx, "eu-central-1", &ec2transitgateway.PeeringAttachmentArgs{
//				PeerRegion:           pulumi.String("eu-central-1"),
//				PeerTransitGatewayId: eu_central_1.ID(),
//				TransitGatewayId:     this[0].ID(),
//				Tags: pulumi.StringMap{
//					"Name": pulumi.String("TGW mesh from eu-central-1"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ec2transitgateway.NewRouteTable(ctx, "eu-central-1", &ec2transitgateway.RouteTableArgs{
//				TransitGatewayId: eu_central_1.ID(),
//				Tags:             notImplemented("merge({Name=\"wl-transit-gateway-routetable-eu-central-1\"},local.global_tags)"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ec2transitgateway.NewPeeringAttachmentAccepter(ctx, "eu-central-1", &ec2transitgateway.PeeringAttachmentAccepterArgs{
//				TransitGatewayAttachmentId: eu_central_1PeeringAttachment.ID(),
//				Tags: pulumi.StringMap{
//					"Name": pulumi.String("Accepter TGW peering eu-central-1"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ec2transitgateway.GetVpcAttachments(ctx, &ec2transitgateway.GetVpcAttachmentsArgs{
//				Filters: []ec2transitgateway.GetVpcAttachmentsFilter{
//					{
//						Name: "state",
//						Values: []string{
//							"pendingAcceptance",
//							"available",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_ := "TODO: For expression"
//			_ := nil
//			_ = notImplemented("compact([fork,tvaindata.aws_ec2_transit_gateway_vpc_attachment.unit-eu-central-1:contains(local.trusted_aws_accounts_ids,lookup(tva,\"vpc_owner_id\",\"\"))?tva.id:\"\"])")
//			// # create a map with all vpc attachments trusted to be able to use for_each to avoid conflict on plan/apply ##
//			trustedVpcAttachementsEu_central_1 := notImplemented("toset(sort(local.trusted_vpc_attachments_list_eu-central-1))")
//			var trustedAccountsEu_central_1Tgw []*ec2transitgateway.VpcAttachmentAccepter
//			for index := 0; index < trustedVpcAttachementsEu_central_1; index++ {
//				key0 := index
//				val0 := index
//				__res, err := ec2transitgateway.NewVpcAttachmentAccepter(ctx, fmt.Sprintf("trusted_accounts_eu-central-1_tgw-%v", key0), &ec2transitgateway.VpcAttachmentAccepterArgs{
//					TransitGatewayAttachmentId:                 pulumi.Any(val0),
//					TransitGatewayDefaultRouteTablePropagation: pulumi.Bool(false),
//					TransitGatewayDefaultRouteTableAssociation: pulumi.Bool(false),
//					Tags: pulumi.Any(globalTags),
//				})
//				if err != nil {
//					return err
//				}
//				trustedAccountsEu_central_1Tgw = append(trustedAccountsEu_central_1Tgw, __res)
//			}
//			var trustedAccountsEu_central_1 []*ec2transitgateway.RouteTableAssociation
//			for key0, val0 := range trustedAccountsEu_central_1Tgw {
//				__res, err := ec2transitgateway.NewRouteTableAssociation(ctx, fmt.Sprintf("trusted_accounts_eu-central-1-%v", key0), &ec2transitgateway.RouteTableAssociationArgs{
//					TransitGatewayAttachmentId: pulumi.String(val0),
//					TransitGatewayRouteTableId: eu_central_1RouteTable.ID(),
//				})
//				if err != nil {
//					return err
//				}
//				trustedAccountsEu_central_1 = append(trustedAccountsEu_central_1, __res)
//			}
//			var trustedAccountsEu_central_1RouteTablePropagation []*ec2transitgateway.RouteTablePropagation
//			for key0, val0 := range trustedAccountsEu_central_1Tgw {
//				__res, err := ec2transitgateway.NewRouteTablePropagation(ctx, fmt.Sprintf("trusted_accounts_eu-central-1-%v", key0), &ec2transitgateway.RouteTablePropagationArgs{
//					TransitGatewayAttachmentId: pulumi.String(val0),
//					TransitGatewayRouteTableId: eu_central_1RouteTable.ID(),
//				})
//				if err != nil {
//					return err
//				}
//				trustedAccountsEu_central_1RouteTablePropagation = append(trustedAccountsEu_central_1RouteTablePropagation, __res)
//			}
//			test := ec2transitgateway.GetRouteTableRoutesOutput(ctx, ec2transitgateway.GetRouteTableRoutesOutputArgs{
//				Filters: ec2transitgateway.GetRouteTableRoutesFilterArray{
//					&ec2transitgateway.GetRouteTableRoutesFilterArgs{
//						Name: pulumi.String("type"),
//						Values: pulumi.StringArray{
//							pulumi.String("propagated"),
//						},
//					},
//				},
//				TransitGatewayRouteTableId: eu_central_1RouteTable.ID(),
//			}, nil)
//			var default_region_to_eu_central_1 []*ec2transitgateway.Route
//			for key0, _ := range test.ApplyT(func(test ec2transitgateway.GetRouteTableRoutesResult) (map[string]ec2transitgateway.GetRouteTableRoutesRoute, error) {
//				return "TODO: For expression", nil
//			}).(map[string]ec2transitgateway.GetRouteTableRoutesRouteOutput) {
//				__res, err := ec2transitgateway.NewRoute(ctx, fmt.Sprintf("default-region-to-eu-central-1-%v", key0), &ec2transitgateway.RouteArgs{
//					DestinationCidrBlock:       pulumi.String(key0),
//					TransitGatewayRouteTableId: thisRouteTable.ID(),
//					TransitGatewayAttachmentId: eu_central_1PeeringAttachment.ID(),
//				})
//				if err != nil {
//					return err
//				}
//				default_region_to_eu_central_1 = append(default_region_to_eu_central_1, __res)
//			}
//			return nil
//		})
//	}
//
// ```
func GetRouteTableRoutes(ctx *pulumi.Context, args *GetRouteTableRoutesArgs, opts ...pulumi.InvokeOption) (*GetRouteTableRoutesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetRouteTableRoutesResult
	err := ctx.Invoke("aws:ec2transitgateway/getRouteTableRoutes:getRouteTableRoutes", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRouteTableRoutes.
type GetRouteTableRoutesArgs struct {
	// Custom filter block as described below.
	Filters []GetRouteTableRoutesFilter `pulumi:"filters"`
	// Identifier of EC2 Transit Gateway Route Table.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	TransitGatewayRouteTableId string `pulumi:"transitGatewayRouteTableId"`
}

// A collection of values returned by getRouteTableRoutes.
type GetRouteTableRoutesResult struct {
	Filters []GetRouteTableRoutesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// List of Transit Gateway Routes.
	Routes                     []GetRouteTableRoutesRoute `pulumi:"routes"`
	TransitGatewayRouteTableId string                     `pulumi:"transitGatewayRouteTableId"`
}

func GetRouteTableRoutesOutput(ctx *pulumi.Context, args GetRouteTableRoutesOutputArgs, opts ...pulumi.InvokeOption) GetRouteTableRoutesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetRouteTableRoutesResult, error) {
			args := v.(GetRouteTableRoutesArgs)
			r, err := GetRouteTableRoutes(ctx, &args, opts...)
			var s GetRouteTableRoutesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetRouteTableRoutesResultOutput)
}

// A collection of arguments for invoking getRouteTableRoutes.
type GetRouteTableRoutesOutputArgs struct {
	// Custom filter block as described below.
	Filters GetRouteTableRoutesFilterArrayInput `pulumi:"filters"`
	// Identifier of EC2 Transit Gateway Route Table.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	TransitGatewayRouteTableId pulumi.StringInput `pulumi:"transitGatewayRouteTableId"`
}

func (GetRouteTableRoutesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteTableRoutesArgs)(nil)).Elem()
}

// A collection of values returned by getRouteTableRoutes.
type GetRouteTableRoutesResultOutput struct{ *pulumi.OutputState }

func (GetRouteTableRoutesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteTableRoutesResult)(nil)).Elem()
}

func (o GetRouteTableRoutesResultOutput) ToGetRouteTableRoutesResultOutput() GetRouteTableRoutesResultOutput {
	return o
}

func (o GetRouteTableRoutesResultOutput) ToGetRouteTableRoutesResultOutputWithContext(ctx context.Context) GetRouteTableRoutesResultOutput {
	return o
}

func (o GetRouteTableRoutesResultOutput) Filters() GetRouteTableRoutesFilterArrayOutput {
	return o.ApplyT(func(v GetRouteTableRoutesResult) []GetRouteTableRoutesFilter { return v.Filters }).(GetRouteTableRoutesFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetRouteTableRoutesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTableRoutesResult) string { return v.Id }).(pulumi.StringOutput)
}

// List of Transit Gateway Routes.
func (o GetRouteTableRoutesResultOutput) Routes() GetRouteTableRoutesRouteArrayOutput {
	return o.ApplyT(func(v GetRouteTableRoutesResult) []GetRouteTableRoutesRoute { return v.Routes }).(GetRouteTableRoutesRouteArrayOutput)
}

func (o GetRouteTableRoutesResultOutput) TransitGatewayRouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTableRoutesResult) string { return v.TransitGatewayRouteTableId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetRouteTableRoutesResultOutput{})
}
