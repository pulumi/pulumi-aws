// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2transitgateway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages the accepter's side of an EC2 Transit Gateway VPC Attachment.
//
// When a cross-account (requester's AWS account differs from the accepter's AWS account) EC2 Transit Gateway VPC Attachment
// is created, an EC2 Transit Gateway VPC Attachment resource is automatically created in the accepter's account.
// The requester can use the `ec2transitgateway.VpcAttachment` resource to manage its side of the connection
// and the accepter can use the `ec2transitgateway.VpcAttachmentAccepter` resource to "adopt" its side of the
// connection into management.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v3/go/aws/ec2transitgateway"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := ec2transitgateway.NewVpcAttachmentAccepter(ctx, "example", &ec2transitgateway.VpcAttachmentAccepterArgs{
// 			TransitGatewayAttachmentId: pulumi.Any(aws_ec2_transit_gateway_vpc_attachment.Example.Id),
// 			Tags: pulumi.StringMap{
// 				"Name": pulumi.String("Example cross-account attachment"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// `aws_ec2_transit_gateway_vpc_attachment_accepter` can be imported by using the EC2 Transit Gateway Attachment identifier, e.g.
//
// ```sh
//  $ pulumi import aws:ec2transitgateway/vpcAttachmentAccepter:VpcAttachmentAccepter example tgw-attach-12345678
// ```
type VpcAttachmentAccepter struct {
	pulumi.CustomResourceState

	// Whether Appliance Mode support is enabled. Valid values: `disable`, `enable`.
	ApplianceModeSupport pulumi.StringOutput `pulumi:"applianceModeSupport"`
	// Whether DNS support is enabled. Valid values: `disable`, `enable`.
	DnsSupport pulumi.StringOutput `pulumi:"dnsSupport"`
	// Whether IPv6 support is enabled. Valid values: `disable`, `enable`.
	Ipv6Support pulumi.StringOutput `pulumi:"ipv6Support"`
	// Identifiers of EC2 Subnets.
	SubnetIds pulumi.StringArrayOutput `pulumi:"subnetIds"`
	// Key-value tags for the EC2 Transit Gateway VPC Attachment.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The ID of the EC2 Transit Gateway Attachment to manage.
	TransitGatewayAttachmentId pulumi.StringOutput `pulumi:"transitGatewayAttachmentId"`
	// Boolean whether the VPC Attachment should be associated with the EC2 Transit Gateway association default route table. Default value: `true`.
	TransitGatewayDefaultRouteTableAssociation pulumi.BoolPtrOutput `pulumi:"transitGatewayDefaultRouteTableAssociation"`
	// Boolean whether the VPC Attachment should propagate routes with the EC2 Transit Gateway propagation default route table. Default value: `true`.
	TransitGatewayDefaultRouteTablePropagation pulumi.BoolPtrOutput `pulumi:"transitGatewayDefaultRouteTablePropagation"`
	// Identifier of EC2 Transit Gateway.
	TransitGatewayId pulumi.StringOutput `pulumi:"transitGatewayId"`
	// Identifier of EC2 VPC.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// Identifier of the AWS account that owns the EC2 VPC.
	VpcOwnerId pulumi.StringOutput `pulumi:"vpcOwnerId"`
}

// NewVpcAttachmentAccepter registers a new resource with the given unique name, arguments, and options.
func NewVpcAttachmentAccepter(ctx *pulumi.Context,
	name string, args *VpcAttachmentAccepterArgs, opts ...pulumi.ResourceOption) (*VpcAttachmentAccepter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TransitGatewayAttachmentId == nil {
		return nil, errors.New("invalid value for required argument 'TransitGatewayAttachmentId'")
	}
	var resource VpcAttachmentAccepter
	err := ctx.RegisterResource("aws:ec2transitgateway/vpcAttachmentAccepter:VpcAttachmentAccepter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcAttachmentAccepter gets an existing VpcAttachmentAccepter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcAttachmentAccepter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcAttachmentAccepterState, opts ...pulumi.ResourceOption) (*VpcAttachmentAccepter, error) {
	var resource VpcAttachmentAccepter
	err := ctx.ReadResource("aws:ec2transitgateway/vpcAttachmentAccepter:VpcAttachmentAccepter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcAttachmentAccepter resources.
type vpcAttachmentAccepterState struct {
	// Whether Appliance Mode support is enabled. Valid values: `disable`, `enable`.
	ApplianceModeSupport *string `pulumi:"applianceModeSupport"`
	// Whether DNS support is enabled. Valid values: `disable`, `enable`.
	DnsSupport *string `pulumi:"dnsSupport"`
	// Whether IPv6 support is enabled. Valid values: `disable`, `enable`.
	Ipv6Support *string `pulumi:"ipv6Support"`
	// Identifiers of EC2 Subnets.
	SubnetIds []string `pulumi:"subnetIds"`
	// Key-value tags for the EC2 Transit Gateway VPC Attachment.
	Tags map[string]string `pulumi:"tags"`
	// The ID of the EC2 Transit Gateway Attachment to manage.
	TransitGatewayAttachmentId *string `pulumi:"transitGatewayAttachmentId"`
	// Boolean whether the VPC Attachment should be associated with the EC2 Transit Gateway association default route table. Default value: `true`.
	TransitGatewayDefaultRouteTableAssociation *bool `pulumi:"transitGatewayDefaultRouteTableAssociation"`
	// Boolean whether the VPC Attachment should propagate routes with the EC2 Transit Gateway propagation default route table. Default value: `true`.
	TransitGatewayDefaultRouteTablePropagation *bool `pulumi:"transitGatewayDefaultRouteTablePropagation"`
	// Identifier of EC2 Transit Gateway.
	TransitGatewayId *string `pulumi:"transitGatewayId"`
	// Identifier of EC2 VPC.
	VpcId *string `pulumi:"vpcId"`
	// Identifier of the AWS account that owns the EC2 VPC.
	VpcOwnerId *string `pulumi:"vpcOwnerId"`
}

type VpcAttachmentAccepterState struct {
	// Whether Appliance Mode support is enabled. Valid values: `disable`, `enable`.
	ApplianceModeSupport pulumi.StringPtrInput
	// Whether DNS support is enabled. Valid values: `disable`, `enable`.
	DnsSupport pulumi.StringPtrInput
	// Whether IPv6 support is enabled. Valid values: `disable`, `enable`.
	Ipv6Support pulumi.StringPtrInput
	// Identifiers of EC2 Subnets.
	SubnetIds pulumi.StringArrayInput
	// Key-value tags for the EC2 Transit Gateway VPC Attachment.
	Tags pulumi.StringMapInput
	// The ID of the EC2 Transit Gateway Attachment to manage.
	TransitGatewayAttachmentId pulumi.StringPtrInput
	// Boolean whether the VPC Attachment should be associated with the EC2 Transit Gateway association default route table. Default value: `true`.
	TransitGatewayDefaultRouteTableAssociation pulumi.BoolPtrInput
	// Boolean whether the VPC Attachment should propagate routes with the EC2 Transit Gateway propagation default route table. Default value: `true`.
	TransitGatewayDefaultRouteTablePropagation pulumi.BoolPtrInput
	// Identifier of EC2 Transit Gateway.
	TransitGatewayId pulumi.StringPtrInput
	// Identifier of EC2 VPC.
	VpcId pulumi.StringPtrInput
	// Identifier of the AWS account that owns the EC2 VPC.
	VpcOwnerId pulumi.StringPtrInput
}

func (VpcAttachmentAccepterState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcAttachmentAccepterState)(nil)).Elem()
}

type vpcAttachmentAccepterArgs struct {
	// Key-value tags for the EC2 Transit Gateway VPC Attachment.
	Tags map[string]string `pulumi:"tags"`
	// The ID of the EC2 Transit Gateway Attachment to manage.
	TransitGatewayAttachmentId string `pulumi:"transitGatewayAttachmentId"`
	// Boolean whether the VPC Attachment should be associated with the EC2 Transit Gateway association default route table. Default value: `true`.
	TransitGatewayDefaultRouteTableAssociation *bool `pulumi:"transitGatewayDefaultRouteTableAssociation"`
	// Boolean whether the VPC Attachment should propagate routes with the EC2 Transit Gateway propagation default route table. Default value: `true`.
	TransitGatewayDefaultRouteTablePropagation *bool `pulumi:"transitGatewayDefaultRouteTablePropagation"`
}

// The set of arguments for constructing a VpcAttachmentAccepter resource.
type VpcAttachmentAccepterArgs struct {
	// Key-value tags for the EC2 Transit Gateway VPC Attachment.
	Tags pulumi.StringMapInput
	// The ID of the EC2 Transit Gateway Attachment to manage.
	TransitGatewayAttachmentId pulumi.StringInput
	// Boolean whether the VPC Attachment should be associated with the EC2 Transit Gateway association default route table. Default value: `true`.
	TransitGatewayDefaultRouteTableAssociation pulumi.BoolPtrInput
	// Boolean whether the VPC Attachment should propagate routes with the EC2 Transit Gateway propagation default route table. Default value: `true`.
	TransitGatewayDefaultRouteTablePropagation pulumi.BoolPtrInput
}

func (VpcAttachmentAccepterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcAttachmentAccepterArgs)(nil)).Elem()
}

type VpcAttachmentAccepterInput interface {
	pulumi.Input

	ToVpcAttachmentAccepterOutput() VpcAttachmentAccepterOutput
	ToVpcAttachmentAccepterOutputWithContext(ctx context.Context) VpcAttachmentAccepterOutput
}

func (VpcAttachmentAccepter) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcAttachmentAccepter)(nil)).Elem()
}

func (i VpcAttachmentAccepter) ToVpcAttachmentAccepterOutput() VpcAttachmentAccepterOutput {
	return i.ToVpcAttachmentAccepterOutputWithContext(context.Background())
}

func (i VpcAttachmentAccepter) ToVpcAttachmentAccepterOutputWithContext(ctx context.Context) VpcAttachmentAccepterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcAttachmentAccepterOutput)
}

type VpcAttachmentAccepterOutput struct {
	*pulumi.OutputState
}

func (VpcAttachmentAccepterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcAttachmentAccepterOutput)(nil)).Elem()
}

func (o VpcAttachmentAccepterOutput) ToVpcAttachmentAccepterOutput() VpcAttachmentAccepterOutput {
	return o
}

func (o VpcAttachmentAccepterOutput) ToVpcAttachmentAccepterOutputWithContext(ctx context.Context) VpcAttachmentAccepterOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(VpcAttachmentAccepterOutput{})
}
