// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshift

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS Redshift Data Share Authorization.
//
// ## Example Usage
//
// ### Basic Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/redshift"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := redshift.NewDataShareAuthorization(ctx, "example", &redshift.DataShareAuthorizationArgs{
//				ConsumerIdentifier: pulumi.String("012345678901"),
//				DataShareArn:       pulumi.String("arn:aws:redshift:us-west-2:012345678901:datashare:3072dae5-022b-4d45-9cd3-01f010aae4b2/example_share"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Using `pulumi import`, import Redshift Data Share Authorization using the `id`. For example:
//
// ```sh
// $ pulumi import aws:redshift/dataShareAuthorization:DataShareAuthorization example arn:aws:redshift:us-west-2:012345678901:datashare:3072dae5-022b-4d45-9cd3-01f010aae4b2/example_share,012345678901
// ```
type DataShareAuthorization struct {
	pulumi.CustomResourceState

	// Whether to allow write operations for a datashare.
	AllowWrites pulumi.BoolPtrOutput `pulumi:"allowWrites"`
	// Identifier of the data consumer that is authorized to access the datashare. This identifier is an AWS account ID or a keyword, such as `ADX`.
	ConsumerIdentifier pulumi.StringOutput `pulumi:"consumerIdentifier"`
	// Amazon Resource Name (ARN) of the datashare that producers are to authorize sharing for.
	//
	// The following arguments are optional:
	DataShareArn pulumi.StringOutput `pulumi:"dataShareArn"`
	// Identifier of a datashare to show its managing entity.
	ManagedBy pulumi.StringOutput `pulumi:"managedBy"`
	// Amazon Resource Name (ARN) of the producer.
	ProducerArn pulumi.StringOutput `pulumi:"producerArn"`
}

// NewDataShareAuthorization registers a new resource with the given unique name, arguments, and options.
func NewDataShareAuthorization(ctx *pulumi.Context,
	name string, args *DataShareAuthorizationArgs, opts ...pulumi.ResourceOption) (*DataShareAuthorization, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConsumerIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'ConsumerIdentifier'")
	}
	if args.DataShareArn == nil {
		return nil, errors.New("invalid value for required argument 'DataShareArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataShareAuthorization
	err := ctx.RegisterResource("aws:redshift/dataShareAuthorization:DataShareAuthorization", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataShareAuthorization gets an existing DataShareAuthorization resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataShareAuthorization(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataShareAuthorizationState, opts ...pulumi.ResourceOption) (*DataShareAuthorization, error) {
	var resource DataShareAuthorization
	err := ctx.ReadResource("aws:redshift/dataShareAuthorization:DataShareAuthorization", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataShareAuthorization resources.
type dataShareAuthorizationState struct {
	// Whether to allow write operations for a datashare.
	AllowWrites *bool `pulumi:"allowWrites"`
	// Identifier of the data consumer that is authorized to access the datashare. This identifier is an AWS account ID or a keyword, such as `ADX`.
	ConsumerIdentifier *string `pulumi:"consumerIdentifier"`
	// Amazon Resource Name (ARN) of the datashare that producers are to authorize sharing for.
	//
	// The following arguments are optional:
	DataShareArn *string `pulumi:"dataShareArn"`
	// Identifier of a datashare to show its managing entity.
	ManagedBy *string `pulumi:"managedBy"`
	// Amazon Resource Name (ARN) of the producer.
	ProducerArn *string `pulumi:"producerArn"`
}

type DataShareAuthorizationState struct {
	// Whether to allow write operations for a datashare.
	AllowWrites pulumi.BoolPtrInput
	// Identifier of the data consumer that is authorized to access the datashare. This identifier is an AWS account ID or a keyword, such as `ADX`.
	ConsumerIdentifier pulumi.StringPtrInput
	// Amazon Resource Name (ARN) of the datashare that producers are to authorize sharing for.
	//
	// The following arguments are optional:
	DataShareArn pulumi.StringPtrInput
	// Identifier of a datashare to show its managing entity.
	ManagedBy pulumi.StringPtrInput
	// Amazon Resource Name (ARN) of the producer.
	ProducerArn pulumi.StringPtrInput
}

func (DataShareAuthorizationState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataShareAuthorizationState)(nil)).Elem()
}

type dataShareAuthorizationArgs struct {
	// Whether to allow write operations for a datashare.
	AllowWrites *bool `pulumi:"allowWrites"`
	// Identifier of the data consumer that is authorized to access the datashare. This identifier is an AWS account ID or a keyword, such as `ADX`.
	ConsumerIdentifier string `pulumi:"consumerIdentifier"`
	// Amazon Resource Name (ARN) of the datashare that producers are to authorize sharing for.
	//
	// The following arguments are optional:
	DataShareArn string `pulumi:"dataShareArn"`
}

// The set of arguments for constructing a DataShareAuthorization resource.
type DataShareAuthorizationArgs struct {
	// Whether to allow write operations for a datashare.
	AllowWrites pulumi.BoolPtrInput
	// Identifier of the data consumer that is authorized to access the datashare. This identifier is an AWS account ID or a keyword, such as `ADX`.
	ConsumerIdentifier pulumi.StringInput
	// Amazon Resource Name (ARN) of the datashare that producers are to authorize sharing for.
	//
	// The following arguments are optional:
	DataShareArn pulumi.StringInput
}

func (DataShareAuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataShareAuthorizationArgs)(nil)).Elem()
}

type DataShareAuthorizationInput interface {
	pulumi.Input

	ToDataShareAuthorizationOutput() DataShareAuthorizationOutput
	ToDataShareAuthorizationOutputWithContext(ctx context.Context) DataShareAuthorizationOutput
}

func (*DataShareAuthorization) ElementType() reflect.Type {
	return reflect.TypeOf((**DataShareAuthorization)(nil)).Elem()
}

func (i *DataShareAuthorization) ToDataShareAuthorizationOutput() DataShareAuthorizationOutput {
	return i.ToDataShareAuthorizationOutputWithContext(context.Background())
}

func (i *DataShareAuthorization) ToDataShareAuthorizationOutputWithContext(ctx context.Context) DataShareAuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataShareAuthorizationOutput)
}

// DataShareAuthorizationArrayInput is an input type that accepts DataShareAuthorizationArray and DataShareAuthorizationArrayOutput values.
// You can construct a concrete instance of `DataShareAuthorizationArrayInput` via:
//
//	DataShareAuthorizationArray{ DataShareAuthorizationArgs{...} }
type DataShareAuthorizationArrayInput interface {
	pulumi.Input

	ToDataShareAuthorizationArrayOutput() DataShareAuthorizationArrayOutput
	ToDataShareAuthorizationArrayOutputWithContext(context.Context) DataShareAuthorizationArrayOutput
}

type DataShareAuthorizationArray []DataShareAuthorizationInput

func (DataShareAuthorizationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataShareAuthorization)(nil)).Elem()
}

func (i DataShareAuthorizationArray) ToDataShareAuthorizationArrayOutput() DataShareAuthorizationArrayOutput {
	return i.ToDataShareAuthorizationArrayOutputWithContext(context.Background())
}

func (i DataShareAuthorizationArray) ToDataShareAuthorizationArrayOutputWithContext(ctx context.Context) DataShareAuthorizationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataShareAuthorizationArrayOutput)
}

// DataShareAuthorizationMapInput is an input type that accepts DataShareAuthorizationMap and DataShareAuthorizationMapOutput values.
// You can construct a concrete instance of `DataShareAuthorizationMapInput` via:
//
//	DataShareAuthorizationMap{ "key": DataShareAuthorizationArgs{...} }
type DataShareAuthorizationMapInput interface {
	pulumi.Input

	ToDataShareAuthorizationMapOutput() DataShareAuthorizationMapOutput
	ToDataShareAuthorizationMapOutputWithContext(context.Context) DataShareAuthorizationMapOutput
}

type DataShareAuthorizationMap map[string]DataShareAuthorizationInput

func (DataShareAuthorizationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataShareAuthorization)(nil)).Elem()
}

func (i DataShareAuthorizationMap) ToDataShareAuthorizationMapOutput() DataShareAuthorizationMapOutput {
	return i.ToDataShareAuthorizationMapOutputWithContext(context.Background())
}

func (i DataShareAuthorizationMap) ToDataShareAuthorizationMapOutputWithContext(ctx context.Context) DataShareAuthorizationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataShareAuthorizationMapOutput)
}

type DataShareAuthorizationOutput struct{ *pulumi.OutputState }

func (DataShareAuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataShareAuthorization)(nil)).Elem()
}

func (o DataShareAuthorizationOutput) ToDataShareAuthorizationOutput() DataShareAuthorizationOutput {
	return o
}

func (o DataShareAuthorizationOutput) ToDataShareAuthorizationOutputWithContext(ctx context.Context) DataShareAuthorizationOutput {
	return o
}

// Whether to allow write operations for a datashare.
func (o DataShareAuthorizationOutput) AllowWrites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataShareAuthorization) pulumi.BoolPtrOutput { return v.AllowWrites }).(pulumi.BoolPtrOutput)
}

// Identifier of the data consumer that is authorized to access the datashare. This identifier is an AWS account ID or a keyword, such as `ADX`.
func (o DataShareAuthorizationOutput) ConsumerIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *DataShareAuthorization) pulumi.StringOutput { return v.ConsumerIdentifier }).(pulumi.StringOutput)
}

// Amazon Resource Name (ARN) of the datashare that producers are to authorize sharing for.
//
// The following arguments are optional:
func (o DataShareAuthorizationOutput) DataShareArn() pulumi.StringOutput {
	return o.ApplyT(func(v *DataShareAuthorization) pulumi.StringOutput { return v.DataShareArn }).(pulumi.StringOutput)
}

// Identifier of a datashare to show its managing entity.
func (o DataShareAuthorizationOutput) ManagedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *DataShareAuthorization) pulumi.StringOutput { return v.ManagedBy }).(pulumi.StringOutput)
}

// Amazon Resource Name (ARN) of the producer.
func (o DataShareAuthorizationOutput) ProducerArn() pulumi.StringOutput {
	return o.ApplyT(func(v *DataShareAuthorization) pulumi.StringOutput { return v.ProducerArn }).(pulumi.StringOutput)
}

type DataShareAuthorizationArrayOutput struct{ *pulumi.OutputState }

func (DataShareAuthorizationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataShareAuthorization)(nil)).Elem()
}

func (o DataShareAuthorizationArrayOutput) ToDataShareAuthorizationArrayOutput() DataShareAuthorizationArrayOutput {
	return o
}

func (o DataShareAuthorizationArrayOutput) ToDataShareAuthorizationArrayOutputWithContext(ctx context.Context) DataShareAuthorizationArrayOutput {
	return o
}

func (o DataShareAuthorizationArrayOutput) Index(i pulumi.IntInput) DataShareAuthorizationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataShareAuthorization {
		return vs[0].([]*DataShareAuthorization)[vs[1].(int)]
	}).(DataShareAuthorizationOutput)
}

type DataShareAuthorizationMapOutput struct{ *pulumi.OutputState }

func (DataShareAuthorizationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataShareAuthorization)(nil)).Elem()
}

func (o DataShareAuthorizationMapOutput) ToDataShareAuthorizationMapOutput() DataShareAuthorizationMapOutput {
	return o
}

func (o DataShareAuthorizationMapOutput) ToDataShareAuthorizationMapOutputWithContext(ctx context.Context) DataShareAuthorizationMapOutput {
	return o
}

func (o DataShareAuthorizationMapOutput) MapIndex(k pulumi.StringInput) DataShareAuthorizationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataShareAuthorization {
		return vs[0].(map[string]*DataShareAuthorization)[vs[1].(string)]
	}).(DataShareAuthorizationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataShareAuthorizationInput)(nil)).Elem(), &DataShareAuthorization{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataShareAuthorizationArrayInput)(nil)).Elem(), DataShareAuthorizationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataShareAuthorizationMapInput)(nil)).Elem(), DataShareAuthorizationMap{})
	pulumi.RegisterOutputType(DataShareAuthorizationOutput{})
	pulumi.RegisterOutputType(DataShareAuthorizationArrayOutput{})
	pulumi.RegisterOutputType(DataShareAuthorizationMapOutput{})
}
