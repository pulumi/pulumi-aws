// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshift

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "aws:redshift/authenticationProfile:AuthenticationProfile":
		r = &AuthenticationProfile{}
	case "aws:redshift/cluster:Cluster":
		r = &Cluster{}
	case "aws:redshift/clusterIamRoles:ClusterIamRoles":
		r = &ClusterIamRoles{}
	case "aws:redshift/endpointAccess:EndpointAccess":
		r = &EndpointAccess{}
	case "aws:redshift/endpointAuthorization:EndpointAuthorization":
		r = &EndpointAuthorization{}
	case "aws:redshift/eventSubscription:EventSubscription":
		r = &EventSubscription{}
	case "aws:redshift/hsmClientCertificate:HsmClientCertificate":
		r = &HsmClientCertificate{}
	case "aws:redshift/hsmConfiguration:HsmConfiguration":
		r = &HsmConfiguration{}
	case "aws:redshift/parameterGroup:ParameterGroup":
		r = &ParameterGroup{}
	case "aws:redshift/partner:Partner":
		r = &Partner{}
	case "aws:redshift/scheduledAction:ScheduledAction":
		r = &ScheduledAction{}
	case "aws:redshift/securityGroup:SecurityGroup":
		r = &SecurityGroup{}
	case "aws:redshift/snapshotCopyGrant:SnapshotCopyGrant":
		r = &SnapshotCopyGrant{}
	case "aws:redshift/snapshotSchedule:SnapshotSchedule":
		r = &SnapshotSchedule{}
	case "aws:redshift/snapshotScheduleAssociation:SnapshotScheduleAssociation":
		r = &SnapshotScheduleAssociation{}
	case "aws:redshift/subnetGroup:SubnetGroup":
		r = &SubnetGroup{}
	case "aws:redshift/usageLimit:UsageLimit":
		r = &UsageLimit{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

func init() {
	version, err := aws.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"aws",
		"redshift/authenticationProfile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"redshift/cluster",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"redshift/clusterIamRoles",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"redshift/endpointAccess",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"redshift/endpointAuthorization",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"redshift/eventSubscription",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"redshift/hsmClientCertificate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"redshift/hsmConfiguration",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"redshift/parameterGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"redshift/partner",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"redshift/scheduledAction",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"redshift/securityGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"redshift/snapshotCopyGrant",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"redshift/snapshotSchedule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"redshift/snapshotScheduleAssociation",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"redshift/subnetGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"redshift/usageLimit",
		&module{version},
	)
}
