// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshift

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an HSM client certificate that an Amazon Redshift cluster will use to connect to the client's HSM in order to store and retrieve the keys used to encrypt the cluster databases.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/redshift"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := redshift.NewHsmClientCertificate(ctx, "example", &redshift.HsmClientCertificateArgs{
//				HsmClientCertificateIdentifier: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Redshift Hsm Client Certificates support import by `hsm_client_certificate_identifier`, e.g., console
//
// ```sh
//
//	$ pulumi import aws:redshift/hsmClientCertificate:HsmClientCertificate test example
//
// ```
type HsmClientCertificate struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the Hsm Client Certificate.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The identifier of the HSM client certificate.
	HsmClientCertificateIdentifier pulumi.StringOutput `pulumi:"hsmClientCertificateIdentifier"`
	// The public key that the Amazon Redshift cluster will use to connect to the HSM. You must register the public key in the HSM.
	HsmClientCertificatePublicKey pulumi.StringOutput `pulumi:"hsmClientCertificatePublicKey"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewHsmClientCertificate registers a new resource with the given unique name, arguments, and options.
func NewHsmClientCertificate(ctx *pulumi.Context,
	name string, args *HsmClientCertificateArgs, opts ...pulumi.ResourceOption) (*HsmClientCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HsmClientCertificateIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'HsmClientCertificateIdentifier'")
	}
	var resource HsmClientCertificate
	err := ctx.RegisterResource("aws:redshift/hsmClientCertificate:HsmClientCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHsmClientCertificate gets an existing HsmClientCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHsmClientCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HsmClientCertificateState, opts ...pulumi.ResourceOption) (*HsmClientCertificate, error) {
	var resource HsmClientCertificate
	err := ctx.ReadResource("aws:redshift/hsmClientCertificate:HsmClientCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HsmClientCertificate resources.
type hsmClientCertificateState struct {
	// Amazon Resource Name (ARN) of the Hsm Client Certificate.
	Arn *string `pulumi:"arn"`
	// The identifier of the HSM client certificate.
	HsmClientCertificateIdentifier *string `pulumi:"hsmClientCertificateIdentifier"`
	// The public key that the Amazon Redshift cluster will use to connect to the HSM. You must register the public key in the HSM.
	HsmClientCertificatePublicKey *string `pulumi:"hsmClientCertificatePublicKey"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type HsmClientCertificateState struct {
	// Amazon Resource Name (ARN) of the Hsm Client Certificate.
	Arn pulumi.StringPtrInput
	// The identifier of the HSM client certificate.
	HsmClientCertificateIdentifier pulumi.StringPtrInput
	// The public key that the Amazon Redshift cluster will use to connect to the HSM. You must register the public key in the HSM.
	HsmClientCertificatePublicKey pulumi.StringPtrInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapInput
}

func (HsmClientCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*hsmClientCertificateState)(nil)).Elem()
}

type hsmClientCertificateArgs struct {
	// The identifier of the HSM client certificate.
	HsmClientCertificateIdentifier string `pulumi:"hsmClientCertificateIdentifier"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a HsmClientCertificate resource.
type HsmClientCertificateArgs struct {
	// The identifier of the HSM client certificate.
	HsmClientCertificateIdentifier pulumi.StringInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
}

func (HsmClientCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hsmClientCertificateArgs)(nil)).Elem()
}

type HsmClientCertificateInput interface {
	pulumi.Input

	ToHsmClientCertificateOutput() HsmClientCertificateOutput
	ToHsmClientCertificateOutputWithContext(ctx context.Context) HsmClientCertificateOutput
}

func (*HsmClientCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**HsmClientCertificate)(nil)).Elem()
}

func (i *HsmClientCertificate) ToHsmClientCertificateOutput() HsmClientCertificateOutput {
	return i.ToHsmClientCertificateOutputWithContext(context.Background())
}

func (i *HsmClientCertificate) ToHsmClientCertificateOutputWithContext(ctx context.Context) HsmClientCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HsmClientCertificateOutput)
}

// HsmClientCertificateArrayInput is an input type that accepts HsmClientCertificateArray and HsmClientCertificateArrayOutput values.
// You can construct a concrete instance of `HsmClientCertificateArrayInput` via:
//
//	HsmClientCertificateArray{ HsmClientCertificateArgs{...} }
type HsmClientCertificateArrayInput interface {
	pulumi.Input

	ToHsmClientCertificateArrayOutput() HsmClientCertificateArrayOutput
	ToHsmClientCertificateArrayOutputWithContext(context.Context) HsmClientCertificateArrayOutput
}

type HsmClientCertificateArray []HsmClientCertificateInput

func (HsmClientCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HsmClientCertificate)(nil)).Elem()
}

func (i HsmClientCertificateArray) ToHsmClientCertificateArrayOutput() HsmClientCertificateArrayOutput {
	return i.ToHsmClientCertificateArrayOutputWithContext(context.Background())
}

func (i HsmClientCertificateArray) ToHsmClientCertificateArrayOutputWithContext(ctx context.Context) HsmClientCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HsmClientCertificateArrayOutput)
}

// HsmClientCertificateMapInput is an input type that accepts HsmClientCertificateMap and HsmClientCertificateMapOutput values.
// You can construct a concrete instance of `HsmClientCertificateMapInput` via:
//
//	HsmClientCertificateMap{ "key": HsmClientCertificateArgs{...} }
type HsmClientCertificateMapInput interface {
	pulumi.Input

	ToHsmClientCertificateMapOutput() HsmClientCertificateMapOutput
	ToHsmClientCertificateMapOutputWithContext(context.Context) HsmClientCertificateMapOutput
}

type HsmClientCertificateMap map[string]HsmClientCertificateInput

func (HsmClientCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HsmClientCertificate)(nil)).Elem()
}

func (i HsmClientCertificateMap) ToHsmClientCertificateMapOutput() HsmClientCertificateMapOutput {
	return i.ToHsmClientCertificateMapOutputWithContext(context.Background())
}

func (i HsmClientCertificateMap) ToHsmClientCertificateMapOutputWithContext(ctx context.Context) HsmClientCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HsmClientCertificateMapOutput)
}

type HsmClientCertificateOutput struct{ *pulumi.OutputState }

func (HsmClientCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HsmClientCertificate)(nil)).Elem()
}

func (o HsmClientCertificateOutput) ToHsmClientCertificateOutput() HsmClientCertificateOutput {
	return o
}

func (o HsmClientCertificateOutput) ToHsmClientCertificateOutputWithContext(ctx context.Context) HsmClientCertificateOutput {
	return o
}

// Amazon Resource Name (ARN) of the Hsm Client Certificate.
func (o HsmClientCertificateOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *HsmClientCertificate) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The identifier of the HSM client certificate.
func (o HsmClientCertificateOutput) HsmClientCertificateIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *HsmClientCertificate) pulumi.StringOutput { return v.HsmClientCertificateIdentifier }).(pulumi.StringOutput)
}

// The public key that the Amazon Redshift cluster will use to connect to the HSM. You must register the public key in the HSM.
func (o HsmClientCertificateOutput) HsmClientCertificatePublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v *HsmClientCertificate) pulumi.StringOutput { return v.HsmClientCertificatePublicKey }).(pulumi.StringOutput)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o HsmClientCertificateOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HsmClientCertificate) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o HsmClientCertificateOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HsmClientCertificate) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type HsmClientCertificateArrayOutput struct{ *pulumi.OutputState }

func (HsmClientCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HsmClientCertificate)(nil)).Elem()
}

func (o HsmClientCertificateArrayOutput) ToHsmClientCertificateArrayOutput() HsmClientCertificateArrayOutput {
	return o
}

func (o HsmClientCertificateArrayOutput) ToHsmClientCertificateArrayOutputWithContext(ctx context.Context) HsmClientCertificateArrayOutput {
	return o
}

func (o HsmClientCertificateArrayOutput) Index(i pulumi.IntInput) HsmClientCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HsmClientCertificate {
		return vs[0].([]*HsmClientCertificate)[vs[1].(int)]
	}).(HsmClientCertificateOutput)
}

type HsmClientCertificateMapOutput struct{ *pulumi.OutputState }

func (HsmClientCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HsmClientCertificate)(nil)).Elem()
}

func (o HsmClientCertificateMapOutput) ToHsmClientCertificateMapOutput() HsmClientCertificateMapOutput {
	return o
}

func (o HsmClientCertificateMapOutput) ToHsmClientCertificateMapOutputWithContext(ctx context.Context) HsmClientCertificateMapOutput {
	return o
}

func (o HsmClientCertificateMapOutput) MapIndex(k pulumi.StringInput) HsmClientCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HsmClientCertificate {
		return vs[0].(map[string]*HsmClientCertificate)[vs[1].(string)]
	}).(HsmClientCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HsmClientCertificateInput)(nil)).Elem(), &HsmClientCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*HsmClientCertificateArrayInput)(nil)).Elem(), HsmClientCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HsmClientCertificateMapInput)(nil)).Elem(), HsmClientCertificateMap{})
	pulumi.RegisterOutputType(HsmClientCertificateOutput{})
	pulumi.RegisterOutputType(HsmClientCertificateArrayOutput{})
	pulumi.RegisterOutputType(HsmClientCertificateMapOutput{})
}
