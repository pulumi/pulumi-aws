// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshift

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a Redshift cluster snapshot
//
// ## Import
//
// terraform import {
//
//	to = aws_redshift_cluster_snapshot.test
//
//	id = "example" } Using `pulumi import`, import Redshift Cluster Snapshots using `snapshot_identifier`. For exampleconsole % pulumi import aws_redshift_cluster_snapshot.test example
type ClusterSnapshot struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the snapshot.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The cluster identifier for which you want a snapshot.
	ClusterIdentifier pulumi.StringOutput `pulumi:"clusterIdentifier"`
	// The Key Management Service (KMS) key ID of the encryption key that was used to encrypt data in the cluster from which the snapshot was taken.
	KmsKeyId pulumi.StringOutput `pulumi:"kmsKeyId"`
	// The number of days that a manual snapshot is retained. If the value is `-1`, the manual snapshot is retained indefinitely. Valid values are -1 and between `1` and `3653`.
	ManualSnapshotRetentionPeriod pulumi.IntPtrOutput `pulumi:"manualSnapshotRetentionPeriod"`
	// For manual snapshots, the Amazon Web Services account used to create or copy the snapshot. For automatic snapshots, the owner of the cluster. The owner can perform all snapshot actions, such as sharing a manual snapshot.
	OwnerAccount pulumi.StringOutput `pulumi:"ownerAccount"`
	// A unique identifier for the snapshot that you are requesting. This identifier must be unique for all snapshots within the Amazon Web Services account.
	SnapshotIdentifier pulumi.StringOutput `pulumi:"snapshotIdentifier"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewClusterSnapshot registers a new resource with the given unique name, arguments, and options.
func NewClusterSnapshot(ctx *pulumi.Context,
	name string, args *ClusterSnapshotArgs, opts ...pulumi.ResourceOption) (*ClusterSnapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'ClusterIdentifier'")
	}
	if args.SnapshotIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'SnapshotIdentifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClusterSnapshot
	err := ctx.RegisterResource("aws:redshift/clusterSnapshot:ClusterSnapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterSnapshot gets an existing ClusterSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterSnapshotState, opts ...pulumi.ResourceOption) (*ClusterSnapshot, error) {
	var resource ClusterSnapshot
	err := ctx.ReadResource("aws:redshift/clusterSnapshot:ClusterSnapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterSnapshot resources.
type clusterSnapshotState struct {
	// Amazon Resource Name (ARN) of the snapshot.
	Arn *string `pulumi:"arn"`
	// The cluster identifier for which you want a snapshot.
	ClusterIdentifier *string `pulumi:"clusterIdentifier"`
	// The Key Management Service (KMS) key ID of the encryption key that was used to encrypt data in the cluster from which the snapshot was taken.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The number of days that a manual snapshot is retained. If the value is `-1`, the manual snapshot is retained indefinitely. Valid values are -1 and between `1` and `3653`.
	ManualSnapshotRetentionPeriod *int `pulumi:"manualSnapshotRetentionPeriod"`
	// For manual snapshots, the Amazon Web Services account used to create or copy the snapshot. For automatic snapshots, the owner of the cluster. The owner can perform all snapshot actions, such as sharing a manual snapshot.
	OwnerAccount *string `pulumi:"ownerAccount"`
	// A unique identifier for the snapshot that you are requesting. This identifier must be unique for all snapshots within the Amazon Web Services account.
	SnapshotIdentifier *string `pulumi:"snapshotIdentifier"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type ClusterSnapshotState struct {
	// Amazon Resource Name (ARN) of the snapshot.
	Arn pulumi.StringPtrInput
	// The cluster identifier for which you want a snapshot.
	ClusterIdentifier pulumi.StringPtrInput
	// The Key Management Service (KMS) key ID of the encryption key that was used to encrypt data in the cluster from which the snapshot was taken.
	KmsKeyId pulumi.StringPtrInput
	// The number of days that a manual snapshot is retained. If the value is `-1`, the manual snapshot is retained indefinitely. Valid values are -1 and between `1` and `3653`.
	ManualSnapshotRetentionPeriod pulumi.IntPtrInput
	// For manual snapshots, the Amazon Web Services account used to create or copy the snapshot. For automatic snapshots, the owner of the cluster. The owner can perform all snapshot actions, such as sharing a manual snapshot.
	OwnerAccount pulumi.StringPtrInput
	// A unique identifier for the snapshot that you are requesting. This identifier must be unique for all snapshots within the Amazon Web Services account.
	SnapshotIdentifier pulumi.StringPtrInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapInput
}

func (ClusterSnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterSnapshotState)(nil)).Elem()
}

type clusterSnapshotArgs struct {
	// The cluster identifier for which you want a snapshot.
	ClusterIdentifier string `pulumi:"clusterIdentifier"`
	// The number of days that a manual snapshot is retained. If the value is `-1`, the manual snapshot is retained indefinitely. Valid values are -1 and between `1` and `3653`.
	ManualSnapshotRetentionPeriod *int `pulumi:"manualSnapshotRetentionPeriod"`
	// A unique identifier for the snapshot that you are requesting. This identifier must be unique for all snapshots within the Amazon Web Services account.
	SnapshotIdentifier string `pulumi:"snapshotIdentifier"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ClusterSnapshot resource.
type ClusterSnapshotArgs struct {
	// The cluster identifier for which you want a snapshot.
	ClusterIdentifier pulumi.StringInput
	// The number of days that a manual snapshot is retained. If the value is `-1`, the manual snapshot is retained indefinitely. Valid values are -1 and between `1` and `3653`.
	ManualSnapshotRetentionPeriod pulumi.IntPtrInput
	// A unique identifier for the snapshot that you are requesting. This identifier must be unique for all snapshots within the Amazon Web Services account.
	SnapshotIdentifier pulumi.StringInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
}

func (ClusterSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterSnapshotArgs)(nil)).Elem()
}

type ClusterSnapshotInput interface {
	pulumi.Input

	ToClusterSnapshotOutput() ClusterSnapshotOutput
	ToClusterSnapshotOutputWithContext(ctx context.Context) ClusterSnapshotOutput
}

func (*ClusterSnapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSnapshot)(nil)).Elem()
}

func (i *ClusterSnapshot) ToClusterSnapshotOutput() ClusterSnapshotOutput {
	return i.ToClusterSnapshotOutputWithContext(context.Background())
}

func (i *ClusterSnapshot) ToClusterSnapshotOutputWithContext(ctx context.Context) ClusterSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSnapshotOutput)
}

// ClusterSnapshotArrayInput is an input type that accepts ClusterSnapshotArray and ClusterSnapshotArrayOutput values.
// You can construct a concrete instance of `ClusterSnapshotArrayInput` via:
//
//	ClusterSnapshotArray{ ClusterSnapshotArgs{...} }
type ClusterSnapshotArrayInput interface {
	pulumi.Input

	ToClusterSnapshotArrayOutput() ClusterSnapshotArrayOutput
	ToClusterSnapshotArrayOutputWithContext(context.Context) ClusterSnapshotArrayOutput
}

type ClusterSnapshotArray []ClusterSnapshotInput

func (ClusterSnapshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterSnapshot)(nil)).Elem()
}

func (i ClusterSnapshotArray) ToClusterSnapshotArrayOutput() ClusterSnapshotArrayOutput {
	return i.ToClusterSnapshotArrayOutputWithContext(context.Background())
}

func (i ClusterSnapshotArray) ToClusterSnapshotArrayOutputWithContext(ctx context.Context) ClusterSnapshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSnapshotArrayOutput)
}

// ClusterSnapshotMapInput is an input type that accepts ClusterSnapshotMap and ClusterSnapshotMapOutput values.
// You can construct a concrete instance of `ClusterSnapshotMapInput` via:
//
//	ClusterSnapshotMap{ "key": ClusterSnapshotArgs{...} }
type ClusterSnapshotMapInput interface {
	pulumi.Input

	ToClusterSnapshotMapOutput() ClusterSnapshotMapOutput
	ToClusterSnapshotMapOutputWithContext(context.Context) ClusterSnapshotMapOutput
}

type ClusterSnapshotMap map[string]ClusterSnapshotInput

func (ClusterSnapshotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterSnapshot)(nil)).Elem()
}

func (i ClusterSnapshotMap) ToClusterSnapshotMapOutput() ClusterSnapshotMapOutput {
	return i.ToClusterSnapshotMapOutputWithContext(context.Background())
}

func (i ClusterSnapshotMap) ToClusterSnapshotMapOutputWithContext(ctx context.Context) ClusterSnapshotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSnapshotMapOutput)
}

type ClusterSnapshotOutput struct{ *pulumi.OutputState }

func (ClusterSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSnapshot)(nil)).Elem()
}

func (o ClusterSnapshotOutput) ToClusterSnapshotOutput() ClusterSnapshotOutput {
	return o
}

func (o ClusterSnapshotOutput) ToClusterSnapshotOutputWithContext(ctx context.Context) ClusterSnapshotOutput {
	return o
}

// Amazon Resource Name (ARN) of the snapshot.
func (o ClusterSnapshotOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterSnapshot) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The cluster identifier for which you want a snapshot.
func (o ClusterSnapshotOutput) ClusterIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterSnapshot) pulumi.StringOutput { return v.ClusterIdentifier }).(pulumi.StringOutput)
}

// The Key Management Service (KMS) key ID of the encryption key that was used to encrypt data in the cluster from which the snapshot was taken.
func (o ClusterSnapshotOutput) KmsKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterSnapshot) pulumi.StringOutput { return v.KmsKeyId }).(pulumi.StringOutput)
}

// The number of days that a manual snapshot is retained. If the value is `-1`, the manual snapshot is retained indefinitely. Valid values are -1 and between `1` and `3653`.
func (o ClusterSnapshotOutput) ManualSnapshotRetentionPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterSnapshot) pulumi.IntPtrOutput { return v.ManualSnapshotRetentionPeriod }).(pulumi.IntPtrOutput)
}

// For manual snapshots, the Amazon Web Services account used to create or copy the snapshot. For automatic snapshots, the owner of the cluster. The owner can perform all snapshot actions, such as sharing a manual snapshot.
func (o ClusterSnapshotOutput) OwnerAccount() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterSnapshot) pulumi.StringOutput { return v.OwnerAccount }).(pulumi.StringOutput)
}

// A unique identifier for the snapshot that you are requesting. This identifier must be unique for all snapshots within the Amazon Web Services account.
func (o ClusterSnapshotOutput) SnapshotIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterSnapshot) pulumi.StringOutput { return v.SnapshotIdentifier }).(pulumi.StringOutput)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ClusterSnapshotOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ClusterSnapshot) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ClusterSnapshotOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ClusterSnapshot) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type ClusterSnapshotArrayOutput struct{ *pulumi.OutputState }

func (ClusterSnapshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterSnapshot)(nil)).Elem()
}

func (o ClusterSnapshotArrayOutput) ToClusterSnapshotArrayOutput() ClusterSnapshotArrayOutput {
	return o
}

func (o ClusterSnapshotArrayOutput) ToClusterSnapshotArrayOutputWithContext(ctx context.Context) ClusterSnapshotArrayOutput {
	return o
}

func (o ClusterSnapshotArrayOutput) Index(i pulumi.IntInput) ClusterSnapshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterSnapshot {
		return vs[0].([]*ClusterSnapshot)[vs[1].(int)]
	}).(ClusterSnapshotOutput)
}

type ClusterSnapshotMapOutput struct{ *pulumi.OutputState }

func (ClusterSnapshotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterSnapshot)(nil)).Elem()
}

func (o ClusterSnapshotMapOutput) ToClusterSnapshotMapOutput() ClusterSnapshotMapOutput {
	return o
}

func (o ClusterSnapshotMapOutput) ToClusterSnapshotMapOutputWithContext(ctx context.Context) ClusterSnapshotMapOutput {
	return o
}

func (o ClusterSnapshotMapOutput) MapIndex(k pulumi.StringInput) ClusterSnapshotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterSnapshot {
		return vs[0].(map[string]*ClusterSnapshot)[vs[1].(string)]
	}).(ClusterSnapshotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSnapshotInput)(nil)).Elem(), &ClusterSnapshot{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSnapshotArrayInput)(nil)).Elem(), ClusterSnapshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSnapshotMapInput)(nil)).Elem(), ClusterSnapshotMap{})
	pulumi.RegisterOutputType(ClusterSnapshotOutput{})
	pulumi.RegisterOutputType(ClusterSnapshotArrayOutput{})
	pulumi.RegisterOutputType(ClusterSnapshotMapOutput{})
}
