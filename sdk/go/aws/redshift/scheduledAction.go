// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshift

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ScheduledAction struct {
	pulumi.CustomResourceState

	Description  pulumi.StringPtrOutput            `pulumi:"description"`
	Enable       pulumi.BoolPtrOutput              `pulumi:"enable"`
	EndTime      pulumi.StringPtrOutput            `pulumi:"endTime"`
	IamRole      pulumi.StringOutput               `pulumi:"iamRole"`
	Name         pulumi.StringOutput               `pulumi:"name"`
	Schedule     pulumi.StringOutput               `pulumi:"schedule"`
	StartTime    pulumi.StringPtrOutput            `pulumi:"startTime"`
	TargetAction ScheduledActionTargetActionOutput `pulumi:"targetAction"`
}

// NewScheduledAction registers a new resource with the given unique name, arguments, and options.
func NewScheduledAction(ctx *pulumi.Context,
	name string, args *ScheduledActionArgs, opts ...pulumi.ResourceOption) (*ScheduledAction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IamRole == nil {
		return nil, errors.New("invalid value for required argument 'IamRole'")
	}
	if args.Schedule == nil {
		return nil, errors.New("invalid value for required argument 'Schedule'")
	}
	if args.TargetAction == nil {
		return nil, errors.New("invalid value for required argument 'TargetAction'")
	}
	var resource ScheduledAction
	err := ctx.RegisterResource("aws:redshift/scheduledAction:ScheduledAction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScheduledAction gets an existing ScheduledAction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScheduledAction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScheduledActionState, opts ...pulumi.ResourceOption) (*ScheduledAction, error) {
	var resource ScheduledAction
	err := ctx.ReadResource("aws:redshift/scheduledAction:ScheduledAction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScheduledAction resources.
type scheduledActionState struct {
	Description  *string                      `pulumi:"description"`
	Enable       *bool                        `pulumi:"enable"`
	EndTime      *string                      `pulumi:"endTime"`
	IamRole      *string                      `pulumi:"iamRole"`
	Name         *string                      `pulumi:"name"`
	Schedule     *string                      `pulumi:"schedule"`
	StartTime    *string                      `pulumi:"startTime"`
	TargetAction *ScheduledActionTargetAction `pulumi:"targetAction"`
}

type ScheduledActionState struct {
	Description  pulumi.StringPtrInput
	Enable       pulumi.BoolPtrInput
	EndTime      pulumi.StringPtrInput
	IamRole      pulumi.StringPtrInput
	Name         pulumi.StringPtrInput
	Schedule     pulumi.StringPtrInput
	StartTime    pulumi.StringPtrInput
	TargetAction ScheduledActionTargetActionPtrInput
}

func (ScheduledActionState) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduledActionState)(nil)).Elem()
}

type scheduledActionArgs struct {
	Description  *string                     `pulumi:"description"`
	Enable       *bool                       `pulumi:"enable"`
	EndTime      *string                     `pulumi:"endTime"`
	IamRole      string                      `pulumi:"iamRole"`
	Name         *string                     `pulumi:"name"`
	Schedule     string                      `pulumi:"schedule"`
	StartTime    *string                     `pulumi:"startTime"`
	TargetAction ScheduledActionTargetAction `pulumi:"targetAction"`
}

// The set of arguments for constructing a ScheduledAction resource.
type ScheduledActionArgs struct {
	Description  pulumi.StringPtrInput
	Enable       pulumi.BoolPtrInput
	EndTime      pulumi.StringPtrInput
	IamRole      pulumi.StringInput
	Name         pulumi.StringPtrInput
	Schedule     pulumi.StringInput
	StartTime    pulumi.StringPtrInput
	TargetAction ScheduledActionTargetActionInput
}

func (ScheduledActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduledActionArgs)(nil)).Elem()
}

type ScheduledActionInput interface {
	pulumi.Input

	ToScheduledActionOutput() ScheduledActionOutput
	ToScheduledActionOutputWithContext(ctx context.Context) ScheduledActionOutput
}

func (*ScheduledAction) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledAction)(nil)).Elem()
}

func (i *ScheduledAction) ToScheduledActionOutput() ScheduledActionOutput {
	return i.ToScheduledActionOutputWithContext(context.Background())
}

func (i *ScheduledAction) ToScheduledActionOutputWithContext(ctx context.Context) ScheduledActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledActionOutput)
}

// ScheduledActionArrayInput is an input type that accepts ScheduledActionArray and ScheduledActionArrayOutput values.
// You can construct a concrete instance of `ScheduledActionArrayInput` via:
//
//	ScheduledActionArray{ ScheduledActionArgs{...} }
type ScheduledActionArrayInput interface {
	pulumi.Input

	ToScheduledActionArrayOutput() ScheduledActionArrayOutput
	ToScheduledActionArrayOutputWithContext(context.Context) ScheduledActionArrayOutput
}

type ScheduledActionArray []ScheduledActionInput

func (ScheduledActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScheduledAction)(nil)).Elem()
}

func (i ScheduledActionArray) ToScheduledActionArrayOutput() ScheduledActionArrayOutput {
	return i.ToScheduledActionArrayOutputWithContext(context.Background())
}

func (i ScheduledActionArray) ToScheduledActionArrayOutputWithContext(ctx context.Context) ScheduledActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledActionArrayOutput)
}

// ScheduledActionMapInput is an input type that accepts ScheduledActionMap and ScheduledActionMapOutput values.
// You can construct a concrete instance of `ScheduledActionMapInput` via:
//
//	ScheduledActionMap{ "key": ScheduledActionArgs{...} }
type ScheduledActionMapInput interface {
	pulumi.Input

	ToScheduledActionMapOutput() ScheduledActionMapOutput
	ToScheduledActionMapOutputWithContext(context.Context) ScheduledActionMapOutput
}

type ScheduledActionMap map[string]ScheduledActionInput

func (ScheduledActionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScheduledAction)(nil)).Elem()
}

func (i ScheduledActionMap) ToScheduledActionMapOutput() ScheduledActionMapOutput {
	return i.ToScheduledActionMapOutputWithContext(context.Background())
}

func (i ScheduledActionMap) ToScheduledActionMapOutputWithContext(ctx context.Context) ScheduledActionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledActionMapOutput)
}

type ScheduledActionOutput struct{ *pulumi.OutputState }

func (ScheduledActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledAction)(nil)).Elem()
}

func (o ScheduledActionOutput) ToScheduledActionOutput() ScheduledActionOutput {
	return o
}

func (o ScheduledActionOutput) ToScheduledActionOutputWithContext(ctx context.Context) ScheduledActionOutput {
	return o
}

func (o ScheduledActionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduledAction) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ScheduledActionOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ScheduledAction) pulumi.BoolPtrOutput { return v.Enable }).(pulumi.BoolPtrOutput)
}

func (o ScheduledActionOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduledAction) pulumi.StringPtrOutput { return v.EndTime }).(pulumi.StringPtrOutput)
}

func (o ScheduledActionOutput) IamRole() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledAction) pulumi.StringOutput { return v.IamRole }).(pulumi.StringOutput)
}

func (o ScheduledActionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledAction) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ScheduledActionOutput) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledAction) pulumi.StringOutput { return v.Schedule }).(pulumi.StringOutput)
}

func (o ScheduledActionOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduledAction) pulumi.StringPtrOutput { return v.StartTime }).(pulumi.StringPtrOutput)
}

func (o ScheduledActionOutput) TargetAction() ScheduledActionTargetActionOutput {
	return o.ApplyT(func(v *ScheduledAction) ScheduledActionTargetActionOutput { return v.TargetAction }).(ScheduledActionTargetActionOutput)
}

type ScheduledActionArrayOutput struct{ *pulumi.OutputState }

func (ScheduledActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScheduledAction)(nil)).Elem()
}

func (o ScheduledActionArrayOutput) ToScheduledActionArrayOutput() ScheduledActionArrayOutput {
	return o
}

func (o ScheduledActionArrayOutput) ToScheduledActionArrayOutputWithContext(ctx context.Context) ScheduledActionArrayOutput {
	return o
}

func (o ScheduledActionArrayOutput) Index(i pulumi.IntInput) ScheduledActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ScheduledAction {
		return vs[0].([]*ScheduledAction)[vs[1].(int)]
	}).(ScheduledActionOutput)
}

type ScheduledActionMapOutput struct{ *pulumi.OutputState }

func (ScheduledActionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScheduledAction)(nil)).Elem()
}

func (o ScheduledActionMapOutput) ToScheduledActionMapOutput() ScheduledActionMapOutput {
	return o
}

func (o ScheduledActionMapOutput) ToScheduledActionMapOutputWithContext(ctx context.Context) ScheduledActionMapOutput {
	return o
}

func (o ScheduledActionMapOutput) MapIndex(k pulumi.StringInput) ScheduledActionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ScheduledAction {
		return vs[0].(map[string]*ScheduledAction)[vs[1].(string)]
	}).(ScheduledActionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledActionInput)(nil)).Elem(), &ScheduledAction{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledActionArrayInput)(nil)).Elem(), ScheduledActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledActionMapInput)(nil)).Elem(), ScheduledActionMap{})
	pulumi.RegisterOutputType(ScheduledActionOutput{})
	pulumi.RegisterOutputType(ScheduledActionArrayOutput{})
	pulumi.RegisterOutputType(ScheduledActionMapOutput{})
}
