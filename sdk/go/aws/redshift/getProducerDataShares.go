// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshift

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for managing AWS Redshift Producer Data Shares.
//
// ## Example Usage
//
// ### Basic Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/redshift"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := redshift.GetProducerDataShares(ctx, &redshift.GetProducerDataSharesArgs{
//				ProducerArn: "",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func GetProducerDataShares(ctx *pulumi.Context, args *GetProducerDataSharesArgs, opts ...pulumi.InvokeOption) (*GetProducerDataSharesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetProducerDataSharesResult
	err := ctx.Invoke("aws:redshift/getProducerDataShares:getProducerDataShares", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProducerDataShares.
type GetProducerDataSharesArgs struct {
	// An array of all data shares in the producer. See `dataShares` below.
	DataShares []GetProducerDataSharesDataShare `pulumi:"dataShares"`
	// Amazon Resource Name (ARN) of the producer namespace that returns in the list of datashares.
	//
	// The following arguments are optional:
	ProducerArn string `pulumi:"producerArn"`
	// Status of a datashare in the producer. Valid values are `ACTIVE`, `AUTHORIZED`, `PENDING_AUTHORIZATION`, `DEAUTHORIZED`, and `REJECTED`. Omit this argument to return all statuses.
	Status *string `pulumi:"status"`
}

// A collection of values returned by getProducerDataShares.
type GetProducerDataSharesResult struct {
	// An array of all data shares in the producer. See `dataShares` below.
	DataShares []GetProducerDataSharesDataShare `pulumi:"dataShares"`
	// Producer ARN.
	Id string `pulumi:"id"`
	// ARN (Amazon Resource Name) of the producer.
	ProducerArn string  `pulumi:"producerArn"`
	Status      *string `pulumi:"status"`
}

func GetProducerDataSharesOutput(ctx *pulumi.Context, args GetProducerDataSharesOutputArgs, opts ...pulumi.InvokeOption) GetProducerDataSharesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetProducerDataSharesResult, error) {
			args := v.(GetProducerDataSharesArgs)
			r, err := GetProducerDataShares(ctx, &args, opts...)
			var s GetProducerDataSharesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetProducerDataSharesResultOutput)
}

// A collection of arguments for invoking getProducerDataShares.
type GetProducerDataSharesOutputArgs struct {
	// An array of all data shares in the producer. See `dataShares` below.
	DataShares GetProducerDataSharesDataShareArrayInput `pulumi:"dataShares"`
	// Amazon Resource Name (ARN) of the producer namespace that returns in the list of datashares.
	//
	// The following arguments are optional:
	ProducerArn pulumi.StringInput `pulumi:"producerArn"`
	// Status of a datashare in the producer. Valid values are `ACTIVE`, `AUTHORIZED`, `PENDING_AUTHORIZATION`, `DEAUTHORIZED`, and `REJECTED`. Omit this argument to return all statuses.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (GetProducerDataSharesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProducerDataSharesArgs)(nil)).Elem()
}

// A collection of values returned by getProducerDataShares.
type GetProducerDataSharesResultOutput struct{ *pulumi.OutputState }

func (GetProducerDataSharesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProducerDataSharesResult)(nil)).Elem()
}

func (o GetProducerDataSharesResultOutput) ToGetProducerDataSharesResultOutput() GetProducerDataSharesResultOutput {
	return o
}

func (o GetProducerDataSharesResultOutput) ToGetProducerDataSharesResultOutputWithContext(ctx context.Context) GetProducerDataSharesResultOutput {
	return o
}

// An array of all data shares in the producer. See `dataShares` below.
func (o GetProducerDataSharesResultOutput) DataShares() GetProducerDataSharesDataShareArrayOutput {
	return o.ApplyT(func(v GetProducerDataSharesResult) []GetProducerDataSharesDataShare { return v.DataShares }).(GetProducerDataSharesDataShareArrayOutput)
}

// Producer ARN.
func (o GetProducerDataSharesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetProducerDataSharesResult) string { return v.Id }).(pulumi.StringOutput)
}

// ARN (Amazon Resource Name) of the producer.
func (o GetProducerDataSharesResultOutput) ProducerArn() pulumi.StringOutput {
	return o.ApplyT(func(v GetProducerDataSharesResult) string { return v.ProducerArn }).(pulumi.StringOutput)
}

func (o GetProducerDataSharesResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProducerDataSharesResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetProducerDataSharesResultOutput{})
}
