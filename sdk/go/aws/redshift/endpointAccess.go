// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshift

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EndpointAccess struct {
	pulumi.CustomResourceState

	Address             pulumi.StringOutput                  `pulumi:"address"`
	ClusterIdentifier   pulumi.StringOutput                  `pulumi:"clusterIdentifier"`
	EndpointName        pulumi.StringOutput                  `pulumi:"endpointName"`
	Port                pulumi.IntOutput                     `pulumi:"port"`
	ResourceOwner       pulumi.StringOutput                  `pulumi:"resourceOwner"`
	SubnetGroupName     pulumi.StringOutput                  `pulumi:"subnetGroupName"`
	VpcEndpoints        EndpointAccessVpcEndpointArrayOutput `pulumi:"vpcEndpoints"`
	VpcSecurityGroupIds pulumi.StringArrayOutput             `pulumi:"vpcSecurityGroupIds"`
}

// NewEndpointAccess registers a new resource with the given unique name, arguments, and options.
func NewEndpointAccess(ctx *pulumi.Context,
	name string, args *EndpointAccessArgs, opts ...pulumi.ResourceOption) (*EndpointAccess, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'ClusterIdentifier'")
	}
	if args.EndpointName == nil {
		return nil, errors.New("invalid value for required argument 'EndpointName'")
	}
	if args.SubnetGroupName == nil {
		return nil, errors.New("invalid value for required argument 'SubnetGroupName'")
	}
	var resource EndpointAccess
	err := ctx.RegisterResource("aws:redshift/endpointAccess:EndpointAccess", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEndpointAccess gets an existing EndpointAccess resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEndpointAccess(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EndpointAccessState, opts ...pulumi.ResourceOption) (*EndpointAccess, error) {
	var resource EndpointAccess
	err := ctx.ReadResource("aws:redshift/endpointAccess:EndpointAccess", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EndpointAccess resources.
type endpointAccessState struct {
	Address             *string                     `pulumi:"address"`
	ClusterIdentifier   *string                     `pulumi:"clusterIdentifier"`
	EndpointName        *string                     `pulumi:"endpointName"`
	Port                *int                        `pulumi:"port"`
	ResourceOwner       *string                     `pulumi:"resourceOwner"`
	SubnetGroupName     *string                     `pulumi:"subnetGroupName"`
	VpcEndpoints        []EndpointAccessVpcEndpoint `pulumi:"vpcEndpoints"`
	VpcSecurityGroupIds []string                    `pulumi:"vpcSecurityGroupIds"`
}

type EndpointAccessState struct {
	Address             pulumi.StringPtrInput
	ClusterIdentifier   pulumi.StringPtrInput
	EndpointName        pulumi.StringPtrInput
	Port                pulumi.IntPtrInput
	ResourceOwner       pulumi.StringPtrInput
	SubnetGroupName     pulumi.StringPtrInput
	VpcEndpoints        EndpointAccessVpcEndpointArrayInput
	VpcSecurityGroupIds pulumi.StringArrayInput
}

func (EndpointAccessState) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointAccessState)(nil)).Elem()
}

type endpointAccessArgs struct {
	ClusterIdentifier   string   `pulumi:"clusterIdentifier"`
	EndpointName        string   `pulumi:"endpointName"`
	ResourceOwner       *string  `pulumi:"resourceOwner"`
	SubnetGroupName     string   `pulumi:"subnetGroupName"`
	VpcSecurityGroupIds []string `pulumi:"vpcSecurityGroupIds"`
}

// The set of arguments for constructing a EndpointAccess resource.
type EndpointAccessArgs struct {
	ClusterIdentifier   pulumi.StringInput
	EndpointName        pulumi.StringInput
	ResourceOwner       pulumi.StringPtrInput
	SubnetGroupName     pulumi.StringInput
	VpcSecurityGroupIds pulumi.StringArrayInput
}

func (EndpointAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointAccessArgs)(nil)).Elem()
}

type EndpointAccessInput interface {
	pulumi.Input

	ToEndpointAccessOutput() EndpointAccessOutput
	ToEndpointAccessOutputWithContext(ctx context.Context) EndpointAccessOutput
}

func (*EndpointAccess) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointAccess)(nil)).Elem()
}

func (i *EndpointAccess) ToEndpointAccessOutput() EndpointAccessOutput {
	return i.ToEndpointAccessOutputWithContext(context.Background())
}

func (i *EndpointAccess) ToEndpointAccessOutputWithContext(ctx context.Context) EndpointAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAccessOutput)
}

// EndpointAccessArrayInput is an input type that accepts EndpointAccessArray and EndpointAccessArrayOutput values.
// You can construct a concrete instance of `EndpointAccessArrayInput` via:
//
//	EndpointAccessArray{ EndpointAccessArgs{...} }
type EndpointAccessArrayInput interface {
	pulumi.Input

	ToEndpointAccessArrayOutput() EndpointAccessArrayOutput
	ToEndpointAccessArrayOutputWithContext(context.Context) EndpointAccessArrayOutput
}

type EndpointAccessArray []EndpointAccessInput

func (EndpointAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EndpointAccess)(nil)).Elem()
}

func (i EndpointAccessArray) ToEndpointAccessArrayOutput() EndpointAccessArrayOutput {
	return i.ToEndpointAccessArrayOutputWithContext(context.Background())
}

func (i EndpointAccessArray) ToEndpointAccessArrayOutputWithContext(ctx context.Context) EndpointAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAccessArrayOutput)
}

// EndpointAccessMapInput is an input type that accepts EndpointAccessMap and EndpointAccessMapOutput values.
// You can construct a concrete instance of `EndpointAccessMapInput` via:
//
//	EndpointAccessMap{ "key": EndpointAccessArgs{...} }
type EndpointAccessMapInput interface {
	pulumi.Input

	ToEndpointAccessMapOutput() EndpointAccessMapOutput
	ToEndpointAccessMapOutputWithContext(context.Context) EndpointAccessMapOutput
}

type EndpointAccessMap map[string]EndpointAccessInput

func (EndpointAccessMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EndpointAccess)(nil)).Elem()
}

func (i EndpointAccessMap) ToEndpointAccessMapOutput() EndpointAccessMapOutput {
	return i.ToEndpointAccessMapOutputWithContext(context.Background())
}

func (i EndpointAccessMap) ToEndpointAccessMapOutputWithContext(ctx context.Context) EndpointAccessMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAccessMapOutput)
}

type EndpointAccessOutput struct{ *pulumi.OutputState }

func (EndpointAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointAccess)(nil)).Elem()
}

func (o EndpointAccessOutput) ToEndpointAccessOutput() EndpointAccessOutput {
	return o
}

func (o EndpointAccessOutput) ToEndpointAccessOutputWithContext(ctx context.Context) EndpointAccessOutput {
	return o
}

func (o EndpointAccessOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *EndpointAccess) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

func (o EndpointAccessOutput) ClusterIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *EndpointAccess) pulumi.StringOutput { return v.ClusterIdentifier }).(pulumi.StringOutput)
}

func (o EndpointAccessOutput) EndpointName() pulumi.StringOutput {
	return o.ApplyT(func(v *EndpointAccess) pulumi.StringOutput { return v.EndpointName }).(pulumi.StringOutput)
}

func (o EndpointAccessOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *EndpointAccess) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

func (o EndpointAccessOutput) ResourceOwner() pulumi.StringOutput {
	return o.ApplyT(func(v *EndpointAccess) pulumi.StringOutput { return v.ResourceOwner }).(pulumi.StringOutput)
}

func (o EndpointAccessOutput) SubnetGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *EndpointAccess) pulumi.StringOutput { return v.SubnetGroupName }).(pulumi.StringOutput)
}

func (o EndpointAccessOutput) VpcEndpoints() EndpointAccessVpcEndpointArrayOutput {
	return o.ApplyT(func(v *EndpointAccess) EndpointAccessVpcEndpointArrayOutput { return v.VpcEndpoints }).(EndpointAccessVpcEndpointArrayOutput)
}

func (o EndpointAccessOutput) VpcSecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EndpointAccess) pulumi.StringArrayOutput { return v.VpcSecurityGroupIds }).(pulumi.StringArrayOutput)
}

type EndpointAccessArrayOutput struct{ *pulumi.OutputState }

func (EndpointAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EndpointAccess)(nil)).Elem()
}

func (o EndpointAccessArrayOutput) ToEndpointAccessArrayOutput() EndpointAccessArrayOutput {
	return o
}

func (o EndpointAccessArrayOutput) ToEndpointAccessArrayOutputWithContext(ctx context.Context) EndpointAccessArrayOutput {
	return o
}

func (o EndpointAccessArrayOutput) Index(i pulumi.IntInput) EndpointAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EndpointAccess {
		return vs[0].([]*EndpointAccess)[vs[1].(int)]
	}).(EndpointAccessOutput)
}

type EndpointAccessMapOutput struct{ *pulumi.OutputState }

func (EndpointAccessMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EndpointAccess)(nil)).Elem()
}

func (o EndpointAccessMapOutput) ToEndpointAccessMapOutput() EndpointAccessMapOutput {
	return o
}

func (o EndpointAccessMapOutput) ToEndpointAccessMapOutputWithContext(ctx context.Context) EndpointAccessMapOutput {
	return o
}

func (o EndpointAccessMapOutput) MapIndex(k pulumi.StringInput) EndpointAccessOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EndpointAccess {
		return vs[0].(map[string]*EndpointAccess)[vs[1].(string)]
	}).(EndpointAccessOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointAccessInput)(nil)).Elem(), &EndpointAccess{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointAccessArrayInput)(nil)).Elem(), EndpointAccessArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointAccessMapInput)(nil)).Elem(), EndpointAccessMap{})
	pulumi.RegisterOutputType(EndpointAccessOutput{})
	pulumi.RegisterOutputType(EndpointAccessArrayOutput{})
	pulumi.RegisterOutputType(EndpointAccessMapOutput{})
}
