// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshift

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/redshift"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		defaultCluster, err := redshift.NewCluster(ctx, "defaultCluster", &redshift.ClusterArgs{
// 			ClusterIdentifier: pulumi.String("tf-redshift-cluster"),
// 			DatabaseName:      pulumi.String("mydb"),
// 			MasterUsername:    pulumi.String("foo"),
// 			MasterPassword:    pulumi.String("Mustbe8characters"),
// 			NodeType:          pulumi.String("dc1.large"),
// 			ClusterType:       pulumi.String("single-node"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		defaultSnapshotSchedule, err := redshift.NewSnapshotSchedule(ctx, "defaultSnapshotSchedule", &redshift.SnapshotScheduleArgs{
// 			Identifier: pulumi.String("tf-redshift-snapshot-schedule"),
// 			Definitions: pulumi.StringArray{
// 				pulumi.String("rate(12 hours)"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = redshift.NewSnapshotScheduleAssociation(ctx, "defaultSnapshotScheduleAssociation", &redshift.SnapshotScheduleAssociationArgs{
// 			ClusterIdentifier:  defaultCluster.ID(),
// 			ScheduleIdentifier: defaultSnapshotSchedule.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Redshift Snapshot Schedule Association can be imported using the `<cluster-identifier>/<schedule-identifier>`, e.g.,
//
// ```sh
//  $ pulumi import aws:redshift/snapshotScheduleAssociation:SnapshotScheduleAssociation default tf-redshift-cluster/tf-redshift-snapshot-schedule
// ```
type SnapshotScheduleAssociation struct {
	pulumi.CustomResourceState

	// The cluster identifier.
	ClusterIdentifier pulumi.StringOutput `pulumi:"clusterIdentifier"`
	// The snapshot schedule identifier.
	ScheduleIdentifier pulumi.StringOutput `pulumi:"scheduleIdentifier"`
}

// NewSnapshotScheduleAssociation registers a new resource with the given unique name, arguments, and options.
func NewSnapshotScheduleAssociation(ctx *pulumi.Context,
	name string, args *SnapshotScheduleAssociationArgs, opts ...pulumi.ResourceOption) (*SnapshotScheduleAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'ClusterIdentifier'")
	}
	if args.ScheduleIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'ScheduleIdentifier'")
	}
	var resource SnapshotScheduleAssociation
	err := ctx.RegisterResource("aws:redshift/snapshotScheduleAssociation:SnapshotScheduleAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshotScheduleAssociation gets an existing SnapshotScheduleAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshotScheduleAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnapshotScheduleAssociationState, opts ...pulumi.ResourceOption) (*SnapshotScheduleAssociation, error) {
	var resource SnapshotScheduleAssociation
	err := ctx.ReadResource("aws:redshift/snapshotScheduleAssociation:SnapshotScheduleAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SnapshotScheduleAssociation resources.
type snapshotScheduleAssociationState struct {
	// The cluster identifier.
	ClusterIdentifier *string `pulumi:"clusterIdentifier"`
	// The snapshot schedule identifier.
	ScheduleIdentifier *string `pulumi:"scheduleIdentifier"`
}

type SnapshotScheduleAssociationState struct {
	// The cluster identifier.
	ClusterIdentifier pulumi.StringPtrInput
	// The snapshot schedule identifier.
	ScheduleIdentifier pulumi.StringPtrInput
}

func (SnapshotScheduleAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotScheduleAssociationState)(nil)).Elem()
}

type snapshotScheduleAssociationArgs struct {
	// The cluster identifier.
	ClusterIdentifier string `pulumi:"clusterIdentifier"`
	// The snapshot schedule identifier.
	ScheduleIdentifier string `pulumi:"scheduleIdentifier"`
}

// The set of arguments for constructing a SnapshotScheduleAssociation resource.
type SnapshotScheduleAssociationArgs struct {
	// The cluster identifier.
	ClusterIdentifier pulumi.StringInput
	// The snapshot schedule identifier.
	ScheduleIdentifier pulumi.StringInput
}

func (SnapshotScheduleAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotScheduleAssociationArgs)(nil)).Elem()
}

type SnapshotScheduleAssociationInput interface {
	pulumi.Input

	ToSnapshotScheduleAssociationOutput() SnapshotScheduleAssociationOutput
	ToSnapshotScheduleAssociationOutputWithContext(ctx context.Context) SnapshotScheduleAssociationOutput
}

func (*SnapshotScheduleAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotScheduleAssociation)(nil)).Elem()
}

func (i *SnapshotScheduleAssociation) ToSnapshotScheduleAssociationOutput() SnapshotScheduleAssociationOutput {
	return i.ToSnapshotScheduleAssociationOutputWithContext(context.Background())
}

func (i *SnapshotScheduleAssociation) ToSnapshotScheduleAssociationOutputWithContext(ctx context.Context) SnapshotScheduleAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotScheduleAssociationOutput)
}

// SnapshotScheduleAssociationArrayInput is an input type that accepts SnapshotScheduleAssociationArray and SnapshotScheduleAssociationArrayOutput values.
// You can construct a concrete instance of `SnapshotScheduleAssociationArrayInput` via:
//
//          SnapshotScheduleAssociationArray{ SnapshotScheduleAssociationArgs{...} }
type SnapshotScheduleAssociationArrayInput interface {
	pulumi.Input

	ToSnapshotScheduleAssociationArrayOutput() SnapshotScheduleAssociationArrayOutput
	ToSnapshotScheduleAssociationArrayOutputWithContext(context.Context) SnapshotScheduleAssociationArrayOutput
}

type SnapshotScheduleAssociationArray []SnapshotScheduleAssociationInput

func (SnapshotScheduleAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnapshotScheduleAssociation)(nil)).Elem()
}

func (i SnapshotScheduleAssociationArray) ToSnapshotScheduleAssociationArrayOutput() SnapshotScheduleAssociationArrayOutput {
	return i.ToSnapshotScheduleAssociationArrayOutputWithContext(context.Background())
}

func (i SnapshotScheduleAssociationArray) ToSnapshotScheduleAssociationArrayOutputWithContext(ctx context.Context) SnapshotScheduleAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotScheduleAssociationArrayOutput)
}

// SnapshotScheduleAssociationMapInput is an input type that accepts SnapshotScheduleAssociationMap and SnapshotScheduleAssociationMapOutput values.
// You can construct a concrete instance of `SnapshotScheduleAssociationMapInput` via:
//
//          SnapshotScheduleAssociationMap{ "key": SnapshotScheduleAssociationArgs{...} }
type SnapshotScheduleAssociationMapInput interface {
	pulumi.Input

	ToSnapshotScheduleAssociationMapOutput() SnapshotScheduleAssociationMapOutput
	ToSnapshotScheduleAssociationMapOutputWithContext(context.Context) SnapshotScheduleAssociationMapOutput
}

type SnapshotScheduleAssociationMap map[string]SnapshotScheduleAssociationInput

func (SnapshotScheduleAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnapshotScheduleAssociation)(nil)).Elem()
}

func (i SnapshotScheduleAssociationMap) ToSnapshotScheduleAssociationMapOutput() SnapshotScheduleAssociationMapOutput {
	return i.ToSnapshotScheduleAssociationMapOutputWithContext(context.Background())
}

func (i SnapshotScheduleAssociationMap) ToSnapshotScheduleAssociationMapOutputWithContext(ctx context.Context) SnapshotScheduleAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotScheduleAssociationMapOutput)
}

type SnapshotScheduleAssociationOutput struct{ *pulumi.OutputState }

func (SnapshotScheduleAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotScheduleAssociation)(nil)).Elem()
}

func (o SnapshotScheduleAssociationOutput) ToSnapshotScheduleAssociationOutput() SnapshotScheduleAssociationOutput {
	return o
}

func (o SnapshotScheduleAssociationOutput) ToSnapshotScheduleAssociationOutputWithContext(ctx context.Context) SnapshotScheduleAssociationOutput {
	return o
}

// The cluster identifier.
func (o SnapshotScheduleAssociationOutput) ClusterIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotScheduleAssociation) pulumi.StringOutput { return v.ClusterIdentifier }).(pulumi.StringOutput)
}

// The snapshot schedule identifier.
func (o SnapshotScheduleAssociationOutput) ScheduleIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotScheduleAssociation) pulumi.StringOutput { return v.ScheduleIdentifier }).(pulumi.StringOutput)
}

type SnapshotScheduleAssociationArrayOutput struct{ *pulumi.OutputState }

func (SnapshotScheduleAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnapshotScheduleAssociation)(nil)).Elem()
}

func (o SnapshotScheduleAssociationArrayOutput) ToSnapshotScheduleAssociationArrayOutput() SnapshotScheduleAssociationArrayOutput {
	return o
}

func (o SnapshotScheduleAssociationArrayOutput) ToSnapshotScheduleAssociationArrayOutputWithContext(ctx context.Context) SnapshotScheduleAssociationArrayOutput {
	return o
}

func (o SnapshotScheduleAssociationArrayOutput) Index(i pulumi.IntInput) SnapshotScheduleAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SnapshotScheduleAssociation {
		return vs[0].([]*SnapshotScheduleAssociation)[vs[1].(int)]
	}).(SnapshotScheduleAssociationOutput)
}

type SnapshotScheduleAssociationMapOutput struct{ *pulumi.OutputState }

func (SnapshotScheduleAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnapshotScheduleAssociation)(nil)).Elem()
}

func (o SnapshotScheduleAssociationMapOutput) ToSnapshotScheduleAssociationMapOutput() SnapshotScheduleAssociationMapOutput {
	return o
}

func (o SnapshotScheduleAssociationMapOutput) ToSnapshotScheduleAssociationMapOutputWithContext(ctx context.Context) SnapshotScheduleAssociationMapOutput {
	return o
}

func (o SnapshotScheduleAssociationMapOutput) MapIndex(k pulumi.StringInput) SnapshotScheduleAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SnapshotScheduleAssociation {
		return vs[0].(map[string]*SnapshotScheduleAssociation)[vs[1].(string)]
	}).(SnapshotScheduleAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotScheduleAssociationInput)(nil)).Elem(), &SnapshotScheduleAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotScheduleAssociationArrayInput)(nil)).Elem(), SnapshotScheduleAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotScheduleAssociationMapInput)(nil)).Elem(), SnapshotScheduleAssociationMap{})
	pulumi.RegisterOutputType(SnapshotScheduleAssociationOutput{})
	pulumi.RegisterOutputType(SnapshotScheduleAssociationArrayOutput{})
	pulumi.RegisterOutputType(SnapshotScheduleAssociationMapOutput{})
}
