// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshift

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type UsageLimit struct {
	pulumi.CustomResourceState

	Amount            pulumi.IntOutput       `pulumi:"amount"`
	Arn               pulumi.StringOutput    `pulumi:"arn"`
	BreachAction      pulumi.StringPtrOutput `pulumi:"breachAction"`
	ClusterIdentifier pulumi.StringOutput    `pulumi:"clusterIdentifier"`
	FeatureType       pulumi.StringOutput    `pulumi:"featureType"`
	LimitType         pulumi.StringOutput    `pulumi:"limitType"`
	Period            pulumi.StringPtrOutput `pulumi:"period"`
	Tags              pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll           pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewUsageLimit registers a new resource with the given unique name, arguments, and options.
func NewUsageLimit(ctx *pulumi.Context,
	name string, args *UsageLimitArgs, opts ...pulumi.ResourceOption) (*UsageLimit, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Amount == nil {
		return nil, errors.New("invalid value for required argument 'Amount'")
	}
	if args.ClusterIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'ClusterIdentifier'")
	}
	if args.FeatureType == nil {
		return nil, errors.New("invalid value for required argument 'FeatureType'")
	}
	if args.LimitType == nil {
		return nil, errors.New("invalid value for required argument 'LimitType'")
	}
	var resource UsageLimit
	err := ctx.RegisterResource("aws:redshift/usageLimit:UsageLimit", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUsageLimit gets an existing UsageLimit resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUsageLimit(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UsageLimitState, opts ...pulumi.ResourceOption) (*UsageLimit, error) {
	var resource UsageLimit
	err := ctx.ReadResource("aws:redshift/usageLimit:UsageLimit", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UsageLimit resources.
type usageLimitState struct {
	Amount            *int              `pulumi:"amount"`
	Arn               *string           `pulumi:"arn"`
	BreachAction      *string           `pulumi:"breachAction"`
	ClusterIdentifier *string           `pulumi:"clusterIdentifier"`
	FeatureType       *string           `pulumi:"featureType"`
	LimitType         *string           `pulumi:"limitType"`
	Period            *string           `pulumi:"period"`
	Tags              map[string]string `pulumi:"tags"`
	TagsAll           map[string]string `pulumi:"tagsAll"`
}

type UsageLimitState struct {
	Amount            pulumi.IntPtrInput
	Arn               pulumi.StringPtrInput
	BreachAction      pulumi.StringPtrInput
	ClusterIdentifier pulumi.StringPtrInput
	FeatureType       pulumi.StringPtrInput
	LimitType         pulumi.StringPtrInput
	Period            pulumi.StringPtrInput
	Tags              pulumi.StringMapInput
	TagsAll           pulumi.StringMapInput
}

func (UsageLimitState) ElementType() reflect.Type {
	return reflect.TypeOf((*usageLimitState)(nil)).Elem()
}

type usageLimitArgs struct {
	Amount            int               `pulumi:"amount"`
	BreachAction      *string           `pulumi:"breachAction"`
	ClusterIdentifier string            `pulumi:"clusterIdentifier"`
	FeatureType       string            `pulumi:"featureType"`
	LimitType         string            `pulumi:"limitType"`
	Period            *string           `pulumi:"period"`
	Tags              map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a UsageLimit resource.
type UsageLimitArgs struct {
	Amount            pulumi.IntInput
	BreachAction      pulumi.StringPtrInput
	ClusterIdentifier pulumi.StringInput
	FeatureType       pulumi.StringInput
	LimitType         pulumi.StringInput
	Period            pulumi.StringPtrInput
	Tags              pulumi.StringMapInput
}

func (UsageLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*usageLimitArgs)(nil)).Elem()
}

type UsageLimitInput interface {
	pulumi.Input

	ToUsageLimitOutput() UsageLimitOutput
	ToUsageLimitOutputWithContext(ctx context.Context) UsageLimitOutput
}

func (*UsageLimit) ElementType() reflect.Type {
	return reflect.TypeOf((**UsageLimit)(nil)).Elem()
}

func (i *UsageLimit) ToUsageLimitOutput() UsageLimitOutput {
	return i.ToUsageLimitOutputWithContext(context.Background())
}

func (i *UsageLimit) ToUsageLimitOutputWithContext(ctx context.Context) UsageLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsageLimitOutput)
}

// UsageLimitArrayInput is an input type that accepts UsageLimitArray and UsageLimitArrayOutput values.
// You can construct a concrete instance of `UsageLimitArrayInput` via:
//
//	UsageLimitArray{ UsageLimitArgs{...} }
type UsageLimitArrayInput interface {
	pulumi.Input

	ToUsageLimitArrayOutput() UsageLimitArrayOutput
	ToUsageLimitArrayOutputWithContext(context.Context) UsageLimitArrayOutput
}

type UsageLimitArray []UsageLimitInput

func (UsageLimitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UsageLimit)(nil)).Elem()
}

func (i UsageLimitArray) ToUsageLimitArrayOutput() UsageLimitArrayOutput {
	return i.ToUsageLimitArrayOutputWithContext(context.Background())
}

func (i UsageLimitArray) ToUsageLimitArrayOutputWithContext(ctx context.Context) UsageLimitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsageLimitArrayOutput)
}

// UsageLimitMapInput is an input type that accepts UsageLimitMap and UsageLimitMapOutput values.
// You can construct a concrete instance of `UsageLimitMapInput` via:
//
//	UsageLimitMap{ "key": UsageLimitArgs{...} }
type UsageLimitMapInput interface {
	pulumi.Input

	ToUsageLimitMapOutput() UsageLimitMapOutput
	ToUsageLimitMapOutputWithContext(context.Context) UsageLimitMapOutput
}

type UsageLimitMap map[string]UsageLimitInput

func (UsageLimitMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UsageLimit)(nil)).Elem()
}

func (i UsageLimitMap) ToUsageLimitMapOutput() UsageLimitMapOutput {
	return i.ToUsageLimitMapOutputWithContext(context.Background())
}

func (i UsageLimitMap) ToUsageLimitMapOutputWithContext(ctx context.Context) UsageLimitMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsageLimitMapOutput)
}

type UsageLimitOutput struct{ *pulumi.OutputState }

func (UsageLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UsageLimit)(nil)).Elem()
}

func (o UsageLimitOutput) ToUsageLimitOutput() UsageLimitOutput {
	return o
}

func (o UsageLimitOutput) ToUsageLimitOutputWithContext(ctx context.Context) UsageLimitOutput {
	return o
}

func (o UsageLimitOutput) Amount() pulumi.IntOutput {
	return o.ApplyT(func(v *UsageLimit) pulumi.IntOutput { return v.Amount }).(pulumi.IntOutput)
}

func (o UsageLimitOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *UsageLimit) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o UsageLimitOutput) BreachAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UsageLimit) pulumi.StringPtrOutput { return v.BreachAction }).(pulumi.StringPtrOutput)
}

func (o UsageLimitOutput) ClusterIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *UsageLimit) pulumi.StringOutput { return v.ClusterIdentifier }).(pulumi.StringOutput)
}

func (o UsageLimitOutput) FeatureType() pulumi.StringOutput {
	return o.ApplyT(func(v *UsageLimit) pulumi.StringOutput { return v.FeatureType }).(pulumi.StringOutput)
}

func (o UsageLimitOutput) LimitType() pulumi.StringOutput {
	return o.ApplyT(func(v *UsageLimit) pulumi.StringOutput { return v.LimitType }).(pulumi.StringOutput)
}

func (o UsageLimitOutput) Period() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UsageLimit) pulumi.StringPtrOutput { return v.Period }).(pulumi.StringPtrOutput)
}

func (o UsageLimitOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *UsageLimit) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o UsageLimitOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *UsageLimit) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type UsageLimitArrayOutput struct{ *pulumi.OutputState }

func (UsageLimitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UsageLimit)(nil)).Elem()
}

func (o UsageLimitArrayOutput) ToUsageLimitArrayOutput() UsageLimitArrayOutput {
	return o
}

func (o UsageLimitArrayOutput) ToUsageLimitArrayOutputWithContext(ctx context.Context) UsageLimitArrayOutput {
	return o
}

func (o UsageLimitArrayOutput) Index(i pulumi.IntInput) UsageLimitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UsageLimit {
		return vs[0].([]*UsageLimit)[vs[1].(int)]
	}).(UsageLimitOutput)
}

type UsageLimitMapOutput struct{ *pulumi.OutputState }

func (UsageLimitMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UsageLimit)(nil)).Elem()
}

func (o UsageLimitMapOutput) ToUsageLimitMapOutput() UsageLimitMapOutput {
	return o
}

func (o UsageLimitMapOutput) ToUsageLimitMapOutputWithContext(ctx context.Context) UsageLimitMapOutput {
	return o
}

func (o UsageLimitMapOutput) MapIndex(k pulumi.StringInput) UsageLimitOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UsageLimit {
		return vs[0].(map[string]*UsageLimit)[vs[1].(string)]
	}).(UsageLimitOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UsageLimitInput)(nil)).Elem(), &UsageLimit{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsageLimitArrayInput)(nil)).Elem(), UsageLimitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsageLimitMapInput)(nil)).Elem(), UsageLimitMap{})
	pulumi.RegisterOutputType(UsageLimitOutput{})
	pulumi.RegisterOutputType(UsageLimitArrayOutput{})
	pulumi.RegisterOutputType(UsageLimitMapOutput{})
}
