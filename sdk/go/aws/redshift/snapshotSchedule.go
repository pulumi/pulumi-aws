// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshift

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SnapshotSchedule struct {
	pulumi.CustomResourceState

	Arn              pulumi.StringOutput      `pulumi:"arn"`
	Definitions      pulumi.StringArrayOutput `pulumi:"definitions"`
	Description      pulumi.StringPtrOutput   `pulumi:"description"`
	ForceDestroy     pulumi.BoolPtrOutput     `pulumi:"forceDestroy"`
	Identifier       pulumi.StringOutput      `pulumi:"identifier"`
	IdentifierPrefix pulumi.StringOutput      `pulumi:"identifierPrefix"`
	Tags             pulumi.StringMapOutput   `pulumi:"tags"`
	TagsAll          pulumi.StringMapOutput   `pulumi:"tagsAll"`
}

// NewSnapshotSchedule registers a new resource with the given unique name, arguments, and options.
func NewSnapshotSchedule(ctx *pulumi.Context,
	name string, args *SnapshotScheduleArgs, opts ...pulumi.ResourceOption) (*SnapshotSchedule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Definitions == nil {
		return nil, errors.New("invalid value for required argument 'Definitions'")
	}
	var resource SnapshotSchedule
	err := ctx.RegisterResource("aws:redshift/snapshotSchedule:SnapshotSchedule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshotSchedule gets an existing SnapshotSchedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshotSchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnapshotScheduleState, opts ...pulumi.ResourceOption) (*SnapshotSchedule, error) {
	var resource SnapshotSchedule
	err := ctx.ReadResource("aws:redshift/snapshotSchedule:SnapshotSchedule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SnapshotSchedule resources.
type snapshotScheduleState struct {
	Arn              *string           `pulumi:"arn"`
	Definitions      []string          `pulumi:"definitions"`
	Description      *string           `pulumi:"description"`
	ForceDestroy     *bool             `pulumi:"forceDestroy"`
	Identifier       *string           `pulumi:"identifier"`
	IdentifierPrefix *string           `pulumi:"identifierPrefix"`
	Tags             map[string]string `pulumi:"tags"`
	TagsAll          map[string]string `pulumi:"tagsAll"`
}

type SnapshotScheduleState struct {
	Arn              pulumi.StringPtrInput
	Definitions      pulumi.StringArrayInput
	Description      pulumi.StringPtrInput
	ForceDestroy     pulumi.BoolPtrInput
	Identifier       pulumi.StringPtrInput
	IdentifierPrefix pulumi.StringPtrInput
	Tags             pulumi.StringMapInput
	TagsAll          pulumi.StringMapInput
}

func (SnapshotScheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotScheduleState)(nil)).Elem()
}

type snapshotScheduleArgs struct {
	Definitions      []string          `pulumi:"definitions"`
	Description      *string           `pulumi:"description"`
	ForceDestroy     *bool             `pulumi:"forceDestroy"`
	Identifier       *string           `pulumi:"identifier"`
	IdentifierPrefix *string           `pulumi:"identifierPrefix"`
	Tags             map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a SnapshotSchedule resource.
type SnapshotScheduleArgs struct {
	Definitions      pulumi.StringArrayInput
	Description      pulumi.StringPtrInput
	ForceDestroy     pulumi.BoolPtrInput
	Identifier       pulumi.StringPtrInput
	IdentifierPrefix pulumi.StringPtrInput
	Tags             pulumi.StringMapInput
}

func (SnapshotScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotScheduleArgs)(nil)).Elem()
}

type SnapshotScheduleInput interface {
	pulumi.Input

	ToSnapshotScheduleOutput() SnapshotScheduleOutput
	ToSnapshotScheduleOutputWithContext(ctx context.Context) SnapshotScheduleOutput
}

func (*SnapshotSchedule) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotSchedule)(nil)).Elem()
}

func (i *SnapshotSchedule) ToSnapshotScheduleOutput() SnapshotScheduleOutput {
	return i.ToSnapshotScheduleOutputWithContext(context.Background())
}

func (i *SnapshotSchedule) ToSnapshotScheduleOutputWithContext(ctx context.Context) SnapshotScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotScheduleOutput)
}

// SnapshotScheduleArrayInput is an input type that accepts SnapshotScheduleArray and SnapshotScheduleArrayOutput values.
// You can construct a concrete instance of `SnapshotScheduleArrayInput` via:
//
//	SnapshotScheduleArray{ SnapshotScheduleArgs{...} }
type SnapshotScheduleArrayInput interface {
	pulumi.Input

	ToSnapshotScheduleArrayOutput() SnapshotScheduleArrayOutput
	ToSnapshotScheduleArrayOutputWithContext(context.Context) SnapshotScheduleArrayOutput
}

type SnapshotScheduleArray []SnapshotScheduleInput

func (SnapshotScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnapshotSchedule)(nil)).Elem()
}

func (i SnapshotScheduleArray) ToSnapshotScheduleArrayOutput() SnapshotScheduleArrayOutput {
	return i.ToSnapshotScheduleArrayOutputWithContext(context.Background())
}

func (i SnapshotScheduleArray) ToSnapshotScheduleArrayOutputWithContext(ctx context.Context) SnapshotScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotScheduleArrayOutput)
}

// SnapshotScheduleMapInput is an input type that accepts SnapshotScheduleMap and SnapshotScheduleMapOutput values.
// You can construct a concrete instance of `SnapshotScheduleMapInput` via:
//
//	SnapshotScheduleMap{ "key": SnapshotScheduleArgs{...} }
type SnapshotScheduleMapInput interface {
	pulumi.Input

	ToSnapshotScheduleMapOutput() SnapshotScheduleMapOutput
	ToSnapshotScheduleMapOutputWithContext(context.Context) SnapshotScheduleMapOutput
}

type SnapshotScheduleMap map[string]SnapshotScheduleInput

func (SnapshotScheduleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnapshotSchedule)(nil)).Elem()
}

func (i SnapshotScheduleMap) ToSnapshotScheduleMapOutput() SnapshotScheduleMapOutput {
	return i.ToSnapshotScheduleMapOutputWithContext(context.Background())
}

func (i SnapshotScheduleMap) ToSnapshotScheduleMapOutputWithContext(ctx context.Context) SnapshotScheduleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotScheduleMapOutput)
}

type SnapshotScheduleOutput struct{ *pulumi.OutputState }

func (SnapshotScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotSchedule)(nil)).Elem()
}

func (o SnapshotScheduleOutput) ToSnapshotScheduleOutput() SnapshotScheduleOutput {
	return o
}

func (o SnapshotScheduleOutput) ToSnapshotScheduleOutputWithContext(ctx context.Context) SnapshotScheduleOutput {
	return o
}

func (o SnapshotScheduleOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotSchedule) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o SnapshotScheduleOutput) Definitions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SnapshotSchedule) pulumi.StringArrayOutput { return v.Definitions }).(pulumi.StringArrayOutput)
}

func (o SnapshotScheduleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotSchedule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o SnapshotScheduleOutput) ForceDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnapshotSchedule) pulumi.BoolPtrOutput { return v.ForceDestroy }).(pulumi.BoolPtrOutput)
}

func (o SnapshotScheduleOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotSchedule) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

func (o SnapshotScheduleOutput) IdentifierPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotSchedule) pulumi.StringOutput { return v.IdentifierPrefix }).(pulumi.StringOutput)
}

func (o SnapshotScheduleOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SnapshotSchedule) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o SnapshotScheduleOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SnapshotSchedule) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type SnapshotScheduleArrayOutput struct{ *pulumi.OutputState }

func (SnapshotScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnapshotSchedule)(nil)).Elem()
}

func (o SnapshotScheduleArrayOutput) ToSnapshotScheduleArrayOutput() SnapshotScheduleArrayOutput {
	return o
}

func (o SnapshotScheduleArrayOutput) ToSnapshotScheduleArrayOutputWithContext(ctx context.Context) SnapshotScheduleArrayOutput {
	return o
}

func (o SnapshotScheduleArrayOutput) Index(i pulumi.IntInput) SnapshotScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SnapshotSchedule {
		return vs[0].([]*SnapshotSchedule)[vs[1].(int)]
	}).(SnapshotScheduleOutput)
}

type SnapshotScheduleMapOutput struct{ *pulumi.OutputState }

func (SnapshotScheduleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnapshotSchedule)(nil)).Elem()
}

func (o SnapshotScheduleMapOutput) ToSnapshotScheduleMapOutput() SnapshotScheduleMapOutput {
	return o
}

func (o SnapshotScheduleMapOutput) ToSnapshotScheduleMapOutputWithContext(ctx context.Context) SnapshotScheduleMapOutput {
	return o
}

func (o SnapshotScheduleMapOutput) MapIndex(k pulumi.StringInput) SnapshotScheduleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SnapshotSchedule {
		return vs[0].(map[string]*SnapshotSchedule)[vs[1].(string)]
	}).(SnapshotScheduleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotScheduleInput)(nil)).Elem(), &SnapshotSchedule{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotScheduleArrayInput)(nil)).Elem(), SnapshotScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotScheduleMapInput)(nil)).Elem(), SnapshotScheduleMap{})
	pulumi.RegisterOutputType(SnapshotScheduleOutput{})
	pulumi.RegisterOutputType(SnapshotScheduleArrayOutput{})
	pulumi.RegisterOutputType(SnapshotScheduleMapOutput{})
}
