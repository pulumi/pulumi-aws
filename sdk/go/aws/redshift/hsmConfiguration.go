// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshift

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an HSM configuration that contains the information required by an Amazon Redshift cluster to store and use database encryption keys in a Hardware Security Module (HSM).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/redshift"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := redshift.NewHsmConfiguration(ctx, "example", &redshift.HsmConfigurationArgs{
//				Description:                pulumi.String("example"),
//				HsmConfigurationIdentifier: pulumi.String("example"),
//				HsmIpAddress:               pulumi.String("10.0.0.1"),
//				HsmPartitionName:           pulumi.String("aws"),
//				HsmPartitionPassword:       pulumi.String("example"),
//				HsmServerPublicCertificate: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Redshift Hsm Client Certificates support import by `hsm_configuration_identifier`, e.g., console
//
// ```sh
//
//	$ pulumi import aws:redshift/hsmConfiguration:HsmConfiguration example example
//
// ```
type HsmConfiguration struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the Hsm Client Certificate.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// A text description of the HSM configuration to be created.
	Description pulumi.StringOutput `pulumi:"description"`
	// The identifier to be assigned to the new Amazon Redshift HSM configuration.
	HsmConfigurationIdentifier pulumi.StringOutput `pulumi:"hsmConfigurationIdentifier"`
	// The IP address that the Amazon Redshift cluster must use to access the HSM.
	HsmIpAddress pulumi.StringOutput `pulumi:"hsmIpAddress"`
	// The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.
	HsmPartitionName pulumi.StringOutput `pulumi:"hsmPartitionName"`
	// The password required to access the HSM partition.
	HsmPartitionPassword pulumi.StringOutput `pulumi:"hsmPartitionPassword"`
	// The HSMs public certificate file. When using Cloud HSM, the file name is server.pem.
	HsmServerPublicCertificate pulumi.StringOutput `pulumi:"hsmServerPublicCertificate"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewHsmConfiguration registers a new resource with the given unique name, arguments, and options.
func NewHsmConfiguration(ctx *pulumi.Context,
	name string, args *HsmConfigurationArgs, opts ...pulumi.ResourceOption) (*HsmConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.HsmConfigurationIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'HsmConfigurationIdentifier'")
	}
	if args.HsmIpAddress == nil {
		return nil, errors.New("invalid value for required argument 'HsmIpAddress'")
	}
	if args.HsmPartitionName == nil {
		return nil, errors.New("invalid value for required argument 'HsmPartitionName'")
	}
	if args.HsmPartitionPassword == nil {
		return nil, errors.New("invalid value for required argument 'HsmPartitionPassword'")
	}
	if args.HsmServerPublicCertificate == nil {
		return nil, errors.New("invalid value for required argument 'HsmServerPublicCertificate'")
	}
	if args.HsmPartitionPassword != nil {
		args.HsmPartitionPassword = pulumi.ToSecret(args.HsmPartitionPassword).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"hsmPartitionPassword",
	})
	opts = append(opts, secrets)
	var resource HsmConfiguration
	err := ctx.RegisterResource("aws:redshift/hsmConfiguration:HsmConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHsmConfiguration gets an existing HsmConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHsmConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HsmConfigurationState, opts ...pulumi.ResourceOption) (*HsmConfiguration, error) {
	var resource HsmConfiguration
	err := ctx.ReadResource("aws:redshift/hsmConfiguration:HsmConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HsmConfiguration resources.
type hsmConfigurationState struct {
	// Amazon Resource Name (ARN) of the Hsm Client Certificate.
	Arn *string `pulumi:"arn"`
	// A text description of the HSM configuration to be created.
	Description *string `pulumi:"description"`
	// The identifier to be assigned to the new Amazon Redshift HSM configuration.
	HsmConfigurationIdentifier *string `pulumi:"hsmConfigurationIdentifier"`
	// The IP address that the Amazon Redshift cluster must use to access the HSM.
	HsmIpAddress *string `pulumi:"hsmIpAddress"`
	// The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.
	HsmPartitionName *string `pulumi:"hsmPartitionName"`
	// The password required to access the HSM partition.
	HsmPartitionPassword *string `pulumi:"hsmPartitionPassword"`
	// The HSMs public certificate file. When using Cloud HSM, the file name is server.pem.
	HsmServerPublicCertificate *string `pulumi:"hsmServerPublicCertificate"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type HsmConfigurationState struct {
	// Amazon Resource Name (ARN) of the Hsm Client Certificate.
	Arn pulumi.StringPtrInput
	// A text description of the HSM configuration to be created.
	Description pulumi.StringPtrInput
	// The identifier to be assigned to the new Amazon Redshift HSM configuration.
	HsmConfigurationIdentifier pulumi.StringPtrInput
	// The IP address that the Amazon Redshift cluster must use to access the HSM.
	HsmIpAddress pulumi.StringPtrInput
	// The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.
	HsmPartitionName pulumi.StringPtrInput
	// The password required to access the HSM partition.
	HsmPartitionPassword pulumi.StringPtrInput
	// The HSMs public certificate file. When using Cloud HSM, the file name is server.pem.
	HsmServerPublicCertificate pulumi.StringPtrInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapInput
}

func (HsmConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*hsmConfigurationState)(nil)).Elem()
}

type hsmConfigurationArgs struct {
	// A text description of the HSM configuration to be created.
	Description string `pulumi:"description"`
	// The identifier to be assigned to the new Amazon Redshift HSM configuration.
	HsmConfigurationIdentifier string `pulumi:"hsmConfigurationIdentifier"`
	// The IP address that the Amazon Redshift cluster must use to access the HSM.
	HsmIpAddress string `pulumi:"hsmIpAddress"`
	// The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.
	HsmPartitionName string `pulumi:"hsmPartitionName"`
	// The password required to access the HSM partition.
	HsmPartitionPassword string `pulumi:"hsmPartitionPassword"`
	// The HSMs public certificate file. When using Cloud HSM, the file name is server.pem.
	HsmServerPublicCertificate string `pulumi:"hsmServerPublicCertificate"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a HsmConfiguration resource.
type HsmConfigurationArgs struct {
	// A text description of the HSM configuration to be created.
	Description pulumi.StringInput
	// The identifier to be assigned to the new Amazon Redshift HSM configuration.
	HsmConfigurationIdentifier pulumi.StringInput
	// The IP address that the Amazon Redshift cluster must use to access the HSM.
	HsmIpAddress pulumi.StringInput
	// The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.
	HsmPartitionName pulumi.StringInput
	// The password required to access the HSM partition.
	HsmPartitionPassword pulumi.StringInput
	// The HSMs public certificate file. When using Cloud HSM, the file name is server.pem.
	HsmServerPublicCertificate pulumi.StringInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
}

func (HsmConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hsmConfigurationArgs)(nil)).Elem()
}

type HsmConfigurationInput interface {
	pulumi.Input

	ToHsmConfigurationOutput() HsmConfigurationOutput
	ToHsmConfigurationOutputWithContext(ctx context.Context) HsmConfigurationOutput
}

func (*HsmConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**HsmConfiguration)(nil)).Elem()
}

func (i *HsmConfiguration) ToHsmConfigurationOutput() HsmConfigurationOutput {
	return i.ToHsmConfigurationOutputWithContext(context.Background())
}

func (i *HsmConfiguration) ToHsmConfigurationOutputWithContext(ctx context.Context) HsmConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HsmConfigurationOutput)
}

// HsmConfigurationArrayInput is an input type that accepts HsmConfigurationArray and HsmConfigurationArrayOutput values.
// You can construct a concrete instance of `HsmConfigurationArrayInput` via:
//
//	HsmConfigurationArray{ HsmConfigurationArgs{...} }
type HsmConfigurationArrayInput interface {
	pulumi.Input

	ToHsmConfigurationArrayOutput() HsmConfigurationArrayOutput
	ToHsmConfigurationArrayOutputWithContext(context.Context) HsmConfigurationArrayOutput
}

type HsmConfigurationArray []HsmConfigurationInput

func (HsmConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HsmConfiguration)(nil)).Elem()
}

func (i HsmConfigurationArray) ToHsmConfigurationArrayOutput() HsmConfigurationArrayOutput {
	return i.ToHsmConfigurationArrayOutputWithContext(context.Background())
}

func (i HsmConfigurationArray) ToHsmConfigurationArrayOutputWithContext(ctx context.Context) HsmConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HsmConfigurationArrayOutput)
}

// HsmConfigurationMapInput is an input type that accepts HsmConfigurationMap and HsmConfigurationMapOutput values.
// You can construct a concrete instance of `HsmConfigurationMapInput` via:
//
//	HsmConfigurationMap{ "key": HsmConfigurationArgs{...} }
type HsmConfigurationMapInput interface {
	pulumi.Input

	ToHsmConfigurationMapOutput() HsmConfigurationMapOutput
	ToHsmConfigurationMapOutputWithContext(context.Context) HsmConfigurationMapOutput
}

type HsmConfigurationMap map[string]HsmConfigurationInput

func (HsmConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HsmConfiguration)(nil)).Elem()
}

func (i HsmConfigurationMap) ToHsmConfigurationMapOutput() HsmConfigurationMapOutput {
	return i.ToHsmConfigurationMapOutputWithContext(context.Background())
}

func (i HsmConfigurationMap) ToHsmConfigurationMapOutputWithContext(ctx context.Context) HsmConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HsmConfigurationMapOutput)
}

type HsmConfigurationOutput struct{ *pulumi.OutputState }

func (HsmConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HsmConfiguration)(nil)).Elem()
}

func (o HsmConfigurationOutput) ToHsmConfigurationOutput() HsmConfigurationOutput {
	return o
}

func (o HsmConfigurationOutput) ToHsmConfigurationOutputWithContext(ctx context.Context) HsmConfigurationOutput {
	return o
}

// Amazon Resource Name (ARN) of the Hsm Client Certificate.
func (o HsmConfigurationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *HsmConfiguration) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// A text description of the HSM configuration to be created.
func (o HsmConfigurationOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *HsmConfiguration) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The identifier to be assigned to the new Amazon Redshift HSM configuration.
func (o HsmConfigurationOutput) HsmConfigurationIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *HsmConfiguration) pulumi.StringOutput { return v.HsmConfigurationIdentifier }).(pulumi.StringOutput)
}

// The IP address that the Amazon Redshift cluster must use to access the HSM.
func (o HsmConfigurationOutput) HsmIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *HsmConfiguration) pulumi.StringOutput { return v.HsmIpAddress }).(pulumi.StringOutput)
}

// The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.
func (o HsmConfigurationOutput) HsmPartitionName() pulumi.StringOutput {
	return o.ApplyT(func(v *HsmConfiguration) pulumi.StringOutput { return v.HsmPartitionName }).(pulumi.StringOutput)
}

// The password required to access the HSM partition.
func (o HsmConfigurationOutput) HsmPartitionPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *HsmConfiguration) pulumi.StringOutput { return v.HsmPartitionPassword }).(pulumi.StringOutput)
}

// The HSMs public certificate file. When using Cloud HSM, the file name is server.pem.
func (o HsmConfigurationOutput) HsmServerPublicCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v *HsmConfiguration) pulumi.StringOutput { return v.HsmServerPublicCertificate }).(pulumi.StringOutput)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o HsmConfigurationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HsmConfiguration) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o HsmConfigurationOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HsmConfiguration) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type HsmConfigurationArrayOutput struct{ *pulumi.OutputState }

func (HsmConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HsmConfiguration)(nil)).Elem()
}

func (o HsmConfigurationArrayOutput) ToHsmConfigurationArrayOutput() HsmConfigurationArrayOutput {
	return o
}

func (o HsmConfigurationArrayOutput) ToHsmConfigurationArrayOutputWithContext(ctx context.Context) HsmConfigurationArrayOutput {
	return o
}

func (o HsmConfigurationArrayOutput) Index(i pulumi.IntInput) HsmConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HsmConfiguration {
		return vs[0].([]*HsmConfiguration)[vs[1].(int)]
	}).(HsmConfigurationOutput)
}

type HsmConfigurationMapOutput struct{ *pulumi.OutputState }

func (HsmConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HsmConfiguration)(nil)).Elem()
}

func (o HsmConfigurationMapOutput) ToHsmConfigurationMapOutput() HsmConfigurationMapOutput {
	return o
}

func (o HsmConfigurationMapOutput) ToHsmConfigurationMapOutputWithContext(ctx context.Context) HsmConfigurationMapOutput {
	return o
}

func (o HsmConfigurationMapOutput) MapIndex(k pulumi.StringInput) HsmConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HsmConfiguration {
		return vs[0].(map[string]*HsmConfiguration)[vs[1].(string)]
	}).(HsmConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HsmConfigurationInput)(nil)).Elem(), &HsmConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*HsmConfigurationArrayInput)(nil)).Elem(), HsmConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HsmConfigurationMapInput)(nil)).Elem(), HsmConfigurationMap{})
	pulumi.RegisterOutputType(HsmConfigurationOutput{})
	pulumi.RegisterOutputType(HsmConfigurationArrayOutput{})
	pulumi.RegisterOutputType(HsmConfigurationMapOutput{})
}
