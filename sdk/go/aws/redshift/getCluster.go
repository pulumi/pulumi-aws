// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshift

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides details about a specific redshift cluster.
func LookupCluster(ctx *pulumi.Context, args *LookupClusterArgs, opts ...pulumi.InvokeOption) (*LookupClusterResult, error) {
	var rv LookupClusterResult
	err := ctx.Invoke("aws:redshift/getCluster:getCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCluster.
type LookupClusterArgs struct {
	// Cluster identifier
	ClusterIdentifier string `pulumi:"clusterIdentifier"`
	// Tags associated to the cluster
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getCluster.
type LookupClusterResult struct {
	// Whether major version upgrades can be applied during maintenance period
	AllowVersionUpgrade bool `pulumi:"allowVersionUpgrade"`
	// The value represents how the cluster is configured to use AQUA.
	AquaConfigurationStatus string `pulumi:"aquaConfigurationStatus"`
	// ARN of cluster.
	Arn string `pulumi:"arn"`
	// The backup retention period
	AutomatedSnapshotRetentionPeriod int `pulumi:"automatedSnapshotRetentionPeriod"`
	// Availability zone of the cluster
	AvailabilityZone string `pulumi:"availabilityZone"`
	// Indicates whether the cluster is able to be relocated to another availability zone.
	AvailabilityZoneRelocationEnabled bool `pulumi:"availabilityZoneRelocationEnabled"`
	// Name of the S3 bucket where the log files are to be stored
	BucketName string `pulumi:"bucketName"`
	// Cluster identifier
	ClusterIdentifier string `pulumi:"clusterIdentifier"`
	// Nodes in the cluster. Cluster node blocks are documented below
	ClusterNodes []GetClusterClusterNode `pulumi:"clusterNodes"`
	// The name of the parameter group to be associated with this cluster
	ClusterParameterGroupName string `pulumi:"clusterParameterGroupName"`
	// Public key for the cluster
	ClusterPublicKey string `pulumi:"clusterPublicKey"`
	// The cluster revision number
	ClusterRevisionNumber string `pulumi:"clusterRevisionNumber"`
	// The name of a cluster subnet group to be associated with this cluster
	ClusterSubnetGroupName string `pulumi:"clusterSubnetGroupName"`
	// Cluster type
	ClusterType    string `pulumi:"clusterType"`
	ClusterVersion string `pulumi:"clusterVersion"`
	// Name of the default database in the cluster
	DatabaseName string `pulumi:"databaseName"`
	// ∂The ARN for the IAM role that was set as default for the cluster when the cluster was created.
	DefaultIamRoleArn string `pulumi:"defaultIamRoleArn"`
	// Elastic IP of the cluster
	ElasticIp string `pulumi:"elasticIp"`
	// Whether cluster logging is enabled
	EnableLogging bool `pulumi:"enableLogging"`
	// Whether the cluster data is encrypted
	Encrypted bool `pulumi:"encrypted"`
	// Cluster endpoint
	Endpoint string `pulumi:"endpoint"`
	// Whether enhanced VPC routing is enabled
	EnhancedVpcRouting bool `pulumi:"enhancedVpcRouting"`
	// IAM roles associated to the cluster
	IamRoles []string `pulumi:"iamRoles"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// KMS encryption key associated to the cluster
	KmsKeyId string `pulumi:"kmsKeyId"`
	// The log destination type.
	LogDestinationType string `pulumi:"logDestinationType"`
	// Collection of exported log types. Log types include the connection log, user log and user activity log.
	LogExports []string `pulumi:"logExports"`
	// The name of the maintenance track for the restored cluster.
	MaintenanceTrackName string `pulumi:"maintenanceTrackName"`
	// (Optional)  The default number of days to retain a manual snapshot.
	ManualSnapshotRetentionPeriod int `pulumi:"manualSnapshotRetentionPeriod"`
	// Username for the master DB user
	MasterUsername string `pulumi:"masterUsername"`
	// Cluster node type
	NodeType string `pulumi:"nodeType"`
	// Number of nodes in the cluster
	NumberOfNodes int `pulumi:"numberOfNodes"`
	// Port the cluster responds on
	Port int `pulumi:"port"`
	// The maintenance window
	PreferredMaintenanceWindow string `pulumi:"preferredMaintenanceWindow"`
	// Whether the cluster is publicly accessible
	PubliclyAccessible bool `pulumi:"publiclyAccessible"`
	// Folder inside the S3 bucket where the log files are stored
	S3KeyPrefix string `pulumi:"s3KeyPrefix"`
	// Tags associated to the cluster
	Tags map[string]string `pulumi:"tags"`
	// VPC Id associated with the cluster
	VpcId string `pulumi:"vpcId"`
	// The VPC security group Ids associated with the cluster
	VpcSecurityGroupIds []string `pulumi:"vpcSecurityGroupIds"`
}

func LookupClusterOutput(ctx *pulumi.Context, args LookupClusterOutputArgs, opts ...pulumi.InvokeOption) LookupClusterResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupClusterResult, error) {
			args := v.(LookupClusterArgs)
			r, err := LookupCluster(ctx, &args, opts...)
			var s LookupClusterResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupClusterResultOutput)
}

// A collection of arguments for invoking getCluster.
type LookupClusterOutputArgs struct {
	// Cluster identifier
	ClusterIdentifier pulumi.StringInput `pulumi:"clusterIdentifier"`
	// Tags associated to the cluster
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (LookupClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterArgs)(nil)).Elem()
}

// A collection of values returned by getCluster.
type LookupClusterResultOutput struct{ *pulumi.OutputState }

func (LookupClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterResult)(nil)).Elem()
}

func (o LookupClusterResultOutput) ToLookupClusterResultOutput() LookupClusterResultOutput {
	return o
}

func (o LookupClusterResultOutput) ToLookupClusterResultOutputWithContext(ctx context.Context) LookupClusterResultOutput {
	return o
}

// Whether major version upgrades can be applied during maintenance period
func (o LookupClusterResultOutput) AllowVersionUpgrade() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupClusterResult) bool { return v.AllowVersionUpgrade }).(pulumi.BoolOutput)
}

// The value represents how the cluster is configured to use AQUA.
func (o LookupClusterResultOutput) AquaConfigurationStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.AquaConfigurationStatus }).(pulumi.StringOutput)
}

// ARN of cluster.
func (o LookupClusterResultOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.Arn }).(pulumi.StringOutput)
}

// The backup retention period
func (o LookupClusterResultOutput) AutomatedSnapshotRetentionPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v LookupClusterResult) int { return v.AutomatedSnapshotRetentionPeriod }).(pulumi.IntOutput)
}

// Availability zone of the cluster
func (o LookupClusterResultOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// Indicates whether the cluster is able to be relocated to another availability zone.
func (o LookupClusterResultOutput) AvailabilityZoneRelocationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupClusterResult) bool { return v.AvailabilityZoneRelocationEnabled }).(pulumi.BoolOutput)
}

// Name of the S3 bucket where the log files are to be stored
func (o LookupClusterResultOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.BucketName }).(pulumi.StringOutput)
}

// Cluster identifier
func (o LookupClusterResultOutput) ClusterIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.ClusterIdentifier }).(pulumi.StringOutput)
}

// Nodes in the cluster. Cluster node blocks are documented below
func (o LookupClusterResultOutput) ClusterNodes() GetClusterClusterNodeArrayOutput {
	return o.ApplyT(func(v LookupClusterResult) []GetClusterClusterNode { return v.ClusterNodes }).(GetClusterClusterNodeArrayOutput)
}

// The name of the parameter group to be associated with this cluster
func (o LookupClusterResultOutput) ClusterParameterGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.ClusterParameterGroupName }).(pulumi.StringOutput)
}

// Public key for the cluster
func (o LookupClusterResultOutput) ClusterPublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.ClusterPublicKey }).(pulumi.StringOutput)
}

// The cluster revision number
func (o LookupClusterResultOutput) ClusterRevisionNumber() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.ClusterRevisionNumber }).(pulumi.StringOutput)
}

// The name of a cluster subnet group to be associated with this cluster
func (o LookupClusterResultOutput) ClusterSubnetGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.ClusterSubnetGroupName }).(pulumi.StringOutput)
}

// Cluster type
func (o LookupClusterResultOutput) ClusterType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.ClusterType }).(pulumi.StringOutput)
}

func (o LookupClusterResultOutput) ClusterVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.ClusterVersion }).(pulumi.StringOutput)
}

// Name of the default database in the cluster
func (o LookupClusterResultOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// ∂The ARN for the IAM role that was set as default for the cluster when the cluster was created.
func (o LookupClusterResultOutput) DefaultIamRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.DefaultIamRoleArn }).(pulumi.StringOutput)
}

// Elastic IP of the cluster
func (o LookupClusterResultOutput) ElasticIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.ElasticIp }).(pulumi.StringOutput)
}

// Whether cluster logging is enabled
func (o LookupClusterResultOutput) EnableLogging() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupClusterResult) bool { return v.EnableLogging }).(pulumi.BoolOutput)
}

// Whether the cluster data is encrypted
func (o LookupClusterResultOutput) Encrypted() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupClusterResult) bool { return v.Encrypted }).(pulumi.BoolOutput)
}

// Cluster endpoint
func (o LookupClusterResultOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.Endpoint }).(pulumi.StringOutput)
}

// Whether enhanced VPC routing is enabled
func (o LookupClusterResultOutput) EnhancedVpcRouting() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupClusterResult) bool { return v.EnhancedVpcRouting }).(pulumi.BoolOutput)
}

// IAM roles associated to the cluster
func (o LookupClusterResultOutput) IamRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupClusterResult) []string { return v.IamRoles }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupClusterResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.Id }).(pulumi.StringOutput)
}

// KMS encryption key associated to the cluster
func (o LookupClusterResultOutput) KmsKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.KmsKeyId }).(pulumi.StringOutput)
}

// The log destination type.
func (o LookupClusterResultOutput) LogDestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.LogDestinationType }).(pulumi.StringOutput)
}

// Collection of exported log types. Log types include the connection log, user log and user activity log.
func (o LookupClusterResultOutput) LogExports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupClusterResult) []string { return v.LogExports }).(pulumi.StringArrayOutput)
}

// The name of the maintenance track for the restored cluster.
func (o LookupClusterResultOutput) MaintenanceTrackName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.MaintenanceTrackName }).(pulumi.StringOutput)
}

// (Optional)  The default number of days to retain a manual snapshot.
func (o LookupClusterResultOutput) ManualSnapshotRetentionPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v LookupClusterResult) int { return v.ManualSnapshotRetentionPeriod }).(pulumi.IntOutput)
}

// Username for the master DB user
func (o LookupClusterResultOutput) MasterUsername() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.MasterUsername }).(pulumi.StringOutput)
}

// Cluster node type
func (o LookupClusterResultOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.NodeType }).(pulumi.StringOutput)
}

// Number of nodes in the cluster
func (o LookupClusterResultOutput) NumberOfNodes() pulumi.IntOutput {
	return o.ApplyT(func(v LookupClusterResult) int { return v.NumberOfNodes }).(pulumi.IntOutput)
}

// Port the cluster responds on
func (o LookupClusterResultOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v LookupClusterResult) int { return v.Port }).(pulumi.IntOutput)
}

// The maintenance window
func (o LookupClusterResultOutput) PreferredMaintenanceWindow() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.PreferredMaintenanceWindow }).(pulumi.StringOutput)
}

// Whether the cluster is publicly accessible
func (o LookupClusterResultOutput) PubliclyAccessible() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupClusterResult) bool { return v.PubliclyAccessible }).(pulumi.BoolOutput)
}

// Folder inside the S3 bucket where the log files are stored
func (o LookupClusterResultOutput) S3KeyPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.S3KeyPrefix }).(pulumi.StringOutput)
}

// Tags associated to the cluster
func (o LookupClusterResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupClusterResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// VPC Id associated with the cluster
func (o LookupClusterResultOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.VpcId }).(pulumi.StringOutput)
}

// The VPC security group Ids associated with the cluster
func (o LookupClusterResultOutput) VpcSecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupClusterResult) []string { return v.VpcSecurityGroupIds }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupClusterResultOutput{})
}
