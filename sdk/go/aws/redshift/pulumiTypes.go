// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package redshift

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ClusterClusterNode struct {
	// Whether the node is a leader node or a compute node
	NodeRole *string `pulumi:"nodeRole"`
	// The private IP address of a node within a cluster
	PrivateIpAddress *string `pulumi:"privateIpAddress"`
	// The public IP address of a node within a cluster
	PublicIpAddress *string `pulumi:"publicIpAddress"`
}

// ClusterClusterNodeInput is an input type that accepts ClusterClusterNodeArgs and ClusterClusterNodeOutput values.
// You can construct a concrete instance of `ClusterClusterNodeInput` via:
//
//          ClusterClusterNodeArgs{...}
type ClusterClusterNodeInput interface {
	pulumi.Input

	ToClusterClusterNodeOutput() ClusterClusterNodeOutput
	ToClusterClusterNodeOutputWithContext(context.Context) ClusterClusterNodeOutput
}

type ClusterClusterNodeArgs struct {
	// Whether the node is a leader node or a compute node
	NodeRole pulumi.StringPtrInput `pulumi:"nodeRole"`
	// The private IP address of a node within a cluster
	PrivateIpAddress pulumi.StringPtrInput `pulumi:"privateIpAddress"`
	// The public IP address of a node within a cluster
	PublicIpAddress pulumi.StringPtrInput `pulumi:"publicIpAddress"`
}

func (ClusterClusterNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterClusterNode)(nil)).Elem()
}

func (i ClusterClusterNodeArgs) ToClusterClusterNodeOutput() ClusterClusterNodeOutput {
	return i.ToClusterClusterNodeOutputWithContext(context.Background())
}

func (i ClusterClusterNodeArgs) ToClusterClusterNodeOutputWithContext(ctx context.Context) ClusterClusterNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterClusterNodeOutput)
}

// ClusterClusterNodeArrayInput is an input type that accepts ClusterClusterNodeArray and ClusterClusterNodeArrayOutput values.
// You can construct a concrete instance of `ClusterClusterNodeArrayInput` via:
//
//          ClusterClusterNodeArray{ ClusterClusterNodeArgs{...} }
type ClusterClusterNodeArrayInput interface {
	pulumi.Input

	ToClusterClusterNodeArrayOutput() ClusterClusterNodeArrayOutput
	ToClusterClusterNodeArrayOutputWithContext(context.Context) ClusterClusterNodeArrayOutput
}

type ClusterClusterNodeArray []ClusterClusterNodeInput

func (ClusterClusterNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterClusterNode)(nil)).Elem()
}

func (i ClusterClusterNodeArray) ToClusterClusterNodeArrayOutput() ClusterClusterNodeArrayOutput {
	return i.ToClusterClusterNodeArrayOutputWithContext(context.Background())
}

func (i ClusterClusterNodeArray) ToClusterClusterNodeArrayOutputWithContext(ctx context.Context) ClusterClusterNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterClusterNodeArrayOutput)
}

type ClusterClusterNodeOutput struct{ *pulumi.OutputState }

func (ClusterClusterNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterClusterNode)(nil)).Elem()
}

func (o ClusterClusterNodeOutput) ToClusterClusterNodeOutput() ClusterClusterNodeOutput {
	return o
}

func (o ClusterClusterNodeOutput) ToClusterClusterNodeOutputWithContext(ctx context.Context) ClusterClusterNodeOutput {
	return o
}

// Whether the node is a leader node or a compute node
func (o ClusterClusterNodeOutput) NodeRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterClusterNode) *string { return v.NodeRole }).(pulumi.StringPtrOutput)
}

// The private IP address of a node within a cluster
func (o ClusterClusterNodeOutput) PrivateIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterClusterNode) *string { return v.PrivateIpAddress }).(pulumi.StringPtrOutput)
}

// The public IP address of a node within a cluster
func (o ClusterClusterNodeOutput) PublicIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterClusterNode) *string { return v.PublicIpAddress }).(pulumi.StringPtrOutput)
}

type ClusterClusterNodeArrayOutput struct{ *pulumi.OutputState }

func (ClusterClusterNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterClusterNode)(nil)).Elem()
}

func (o ClusterClusterNodeArrayOutput) ToClusterClusterNodeArrayOutput() ClusterClusterNodeArrayOutput {
	return o
}

func (o ClusterClusterNodeArrayOutput) ToClusterClusterNodeArrayOutputWithContext(ctx context.Context) ClusterClusterNodeArrayOutput {
	return o
}

func (o ClusterClusterNodeArrayOutput) Index(i pulumi.IntInput) ClusterClusterNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterClusterNode {
		return vs[0].([]ClusterClusterNode)[vs[1].(int)]
	}).(ClusterClusterNodeOutput)
}

type ClusterLogging struct {
	// The name of an existing S3 bucket where the log files are to be stored. Must be in the same region as the cluster and the cluster must have read bucket and put object permissions.
	// For more information on the permissions required for the bucket, please read the AWS [documentation](http://docs.aws.amazon.com/redshift/latest/mgmt/db-auditing.html#db-auditing-enable-logging)
	BucketName *string `pulumi:"bucketName"`
	// Enables logging information such as queries and connection attempts, for the specified Amazon Redshift cluster.
	Enable bool `pulumi:"enable"`
	// The prefix applied to the log file names.
	S3KeyPrefix *string `pulumi:"s3KeyPrefix"`
}

// ClusterLoggingInput is an input type that accepts ClusterLoggingArgs and ClusterLoggingOutput values.
// You can construct a concrete instance of `ClusterLoggingInput` via:
//
//          ClusterLoggingArgs{...}
type ClusterLoggingInput interface {
	pulumi.Input

	ToClusterLoggingOutput() ClusterLoggingOutput
	ToClusterLoggingOutputWithContext(context.Context) ClusterLoggingOutput
}

type ClusterLoggingArgs struct {
	// The name of an existing S3 bucket where the log files are to be stored. Must be in the same region as the cluster and the cluster must have read bucket and put object permissions.
	// For more information on the permissions required for the bucket, please read the AWS [documentation](http://docs.aws.amazon.com/redshift/latest/mgmt/db-auditing.html#db-auditing-enable-logging)
	BucketName pulumi.StringPtrInput `pulumi:"bucketName"`
	// Enables logging information such as queries and connection attempts, for the specified Amazon Redshift cluster.
	Enable pulumi.BoolInput `pulumi:"enable"`
	// The prefix applied to the log file names.
	S3KeyPrefix pulumi.StringPtrInput `pulumi:"s3KeyPrefix"`
}

func (ClusterLoggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLogging)(nil)).Elem()
}

func (i ClusterLoggingArgs) ToClusterLoggingOutput() ClusterLoggingOutput {
	return i.ToClusterLoggingOutputWithContext(context.Background())
}

func (i ClusterLoggingArgs) ToClusterLoggingOutputWithContext(ctx context.Context) ClusterLoggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLoggingOutput)
}

func (i ClusterLoggingArgs) ToClusterLoggingPtrOutput() ClusterLoggingPtrOutput {
	return i.ToClusterLoggingPtrOutputWithContext(context.Background())
}

func (i ClusterLoggingArgs) ToClusterLoggingPtrOutputWithContext(ctx context.Context) ClusterLoggingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLoggingOutput).ToClusterLoggingPtrOutputWithContext(ctx)
}

// ClusterLoggingPtrInput is an input type that accepts ClusterLoggingArgs, ClusterLoggingPtr and ClusterLoggingPtrOutput values.
// You can construct a concrete instance of `ClusterLoggingPtrInput` via:
//
//          ClusterLoggingArgs{...}
//
//  or:
//
//          nil
type ClusterLoggingPtrInput interface {
	pulumi.Input

	ToClusterLoggingPtrOutput() ClusterLoggingPtrOutput
	ToClusterLoggingPtrOutputWithContext(context.Context) ClusterLoggingPtrOutput
}

type clusterLoggingPtrType ClusterLoggingArgs

func ClusterLoggingPtr(v *ClusterLoggingArgs) ClusterLoggingPtrInput {
	return (*clusterLoggingPtrType)(v)
}

func (*clusterLoggingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLogging)(nil)).Elem()
}

func (i *clusterLoggingPtrType) ToClusterLoggingPtrOutput() ClusterLoggingPtrOutput {
	return i.ToClusterLoggingPtrOutputWithContext(context.Background())
}

func (i *clusterLoggingPtrType) ToClusterLoggingPtrOutputWithContext(ctx context.Context) ClusterLoggingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLoggingPtrOutput)
}

type ClusterLoggingOutput struct{ *pulumi.OutputState }

func (ClusterLoggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLogging)(nil)).Elem()
}

func (o ClusterLoggingOutput) ToClusterLoggingOutput() ClusterLoggingOutput {
	return o
}

func (o ClusterLoggingOutput) ToClusterLoggingOutputWithContext(ctx context.Context) ClusterLoggingOutput {
	return o
}

func (o ClusterLoggingOutput) ToClusterLoggingPtrOutput() ClusterLoggingPtrOutput {
	return o.ToClusterLoggingPtrOutputWithContext(context.Background())
}

func (o ClusterLoggingOutput) ToClusterLoggingPtrOutputWithContext(ctx context.Context) ClusterLoggingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterLogging) *ClusterLogging {
		return &v
	}).(ClusterLoggingPtrOutput)
}

// The name of an existing S3 bucket where the log files are to be stored. Must be in the same region as the cluster and the cluster must have read bucket and put object permissions.
// For more information on the permissions required for the bucket, please read the AWS [documentation](http://docs.aws.amazon.com/redshift/latest/mgmt/db-auditing.html#db-auditing-enable-logging)
func (o ClusterLoggingOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterLogging) *string { return v.BucketName }).(pulumi.StringPtrOutput)
}

// Enables logging information such as queries and connection attempts, for the specified Amazon Redshift cluster.
func (o ClusterLoggingOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterLogging) bool { return v.Enable }).(pulumi.BoolOutput)
}

// The prefix applied to the log file names.
func (o ClusterLoggingOutput) S3KeyPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterLogging) *string { return v.S3KeyPrefix }).(pulumi.StringPtrOutput)
}

type ClusterLoggingPtrOutput struct{ *pulumi.OutputState }

func (ClusterLoggingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLogging)(nil)).Elem()
}

func (o ClusterLoggingPtrOutput) ToClusterLoggingPtrOutput() ClusterLoggingPtrOutput {
	return o
}

func (o ClusterLoggingPtrOutput) ToClusterLoggingPtrOutputWithContext(ctx context.Context) ClusterLoggingPtrOutput {
	return o
}

func (o ClusterLoggingPtrOutput) Elem() ClusterLoggingOutput {
	return o.ApplyT(func(v *ClusterLogging) ClusterLogging {
		if v != nil {
			return *v
		}
		var ret ClusterLogging
		return ret
	}).(ClusterLoggingOutput)
}

// The name of an existing S3 bucket where the log files are to be stored. Must be in the same region as the cluster and the cluster must have read bucket and put object permissions.
// For more information on the permissions required for the bucket, please read the AWS [documentation](http://docs.aws.amazon.com/redshift/latest/mgmt/db-auditing.html#db-auditing-enable-logging)
func (o ClusterLoggingPtrOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterLogging) *string {
		if v == nil {
			return nil
		}
		return v.BucketName
	}).(pulumi.StringPtrOutput)
}

// Enables logging information such as queries and connection attempts, for the specified Amazon Redshift cluster.
func (o ClusterLoggingPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterLogging) *bool {
		if v == nil {
			return nil
		}
		return &v.Enable
	}).(pulumi.BoolPtrOutput)
}

// The prefix applied to the log file names.
func (o ClusterLoggingPtrOutput) S3KeyPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterLogging) *string {
		if v == nil {
			return nil
		}
		return v.S3KeyPrefix
	}).(pulumi.StringPtrOutput)
}

type ClusterSnapshotCopy struct {
	// The destination region that you want to copy snapshots to.
	DestinationRegion string `pulumi:"destinationRegion"`
	// The name of the snapshot copy grant to use when snapshots of an AWS KMS-encrypted cluster are copied to the destination region.
	GrantName *string `pulumi:"grantName"`
	// The number of days to retain automated snapshots in the destination region after they are copied from the source region. Defaults to `7`.
	RetentionPeriod *int `pulumi:"retentionPeriod"`
}

// ClusterSnapshotCopyInput is an input type that accepts ClusterSnapshotCopyArgs and ClusterSnapshotCopyOutput values.
// You can construct a concrete instance of `ClusterSnapshotCopyInput` via:
//
//          ClusterSnapshotCopyArgs{...}
type ClusterSnapshotCopyInput interface {
	pulumi.Input

	ToClusterSnapshotCopyOutput() ClusterSnapshotCopyOutput
	ToClusterSnapshotCopyOutputWithContext(context.Context) ClusterSnapshotCopyOutput
}

type ClusterSnapshotCopyArgs struct {
	// The destination region that you want to copy snapshots to.
	DestinationRegion pulumi.StringInput `pulumi:"destinationRegion"`
	// The name of the snapshot copy grant to use when snapshots of an AWS KMS-encrypted cluster are copied to the destination region.
	GrantName pulumi.StringPtrInput `pulumi:"grantName"`
	// The number of days to retain automated snapshots in the destination region after they are copied from the source region. Defaults to `7`.
	RetentionPeriod pulumi.IntPtrInput `pulumi:"retentionPeriod"`
}

func (ClusterSnapshotCopyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSnapshotCopy)(nil)).Elem()
}

func (i ClusterSnapshotCopyArgs) ToClusterSnapshotCopyOutput() ClusterSnapshotCopyOutput {
	return i.ToClusterSnapshotCopyOutputWithContext(context.Background())
}

func (i ClusterSnapshotCopyArgs) ToClusterSnapshotCopyOutputWithContext(ctx context.Context) ClusterSnapshotCopyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSnapshotCopyOutput)
}

func (i ClusterSnapshotCopyArgs) ToClusterSnapshotCopyPtrOutput() ClusterSnapshotCopyPtrOutput {
	return i.ToClusterSnapshotCopyPtrOutputWithContext(context.Background())
}

func (i ClusterSnapshotCopyArgs) ToClusterSnapshotCopyPtrOutputWithContext(ctx context.Context) ClusterSnapshotCopyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSnapshotCopyOutput).ToClusterSnapshotCopyPtrOutputWithContext(ctx)
}

// ClusterSnapshotCopyPtrInput is an input type that accepts ClusterSnapshotCopyArgs, ClusterSnapshotCopyPtr and ClusterSnapshotCopyPtrOutput values.
// You can construct a concrete instance of `ClusterSnapshotCopyPtrInput` via:
//
//          ClusterSnapshotCopyArgs{...}
//
//  or:
//
//          nil
type ClusterSnapshotCopyPtrInput interface {
	pulumi.Input

	ToClusterSnapshotCopyPtrOutput() ClusterSnapshotCopyPtrOutput
	ToClusterSnapshotCopyPtrOutputWithContext(context.Context) ClusterSnapshotCopyPtrOutput
}

type clusterSnapshotCopyPtrType ClusterSnapshotCopyArgs

func ClusterSnapshotCopyPtr(v *ClusterSnapshotCopyArgs) ClusterSnapshotCopyPtrInput {
	return (*clusterSnapshotCopyPtrType)(v)
}

func (*clusterSnapshotCopyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSnapshotCopy)(nil)).Elem()
}

func (i *clusterSnapshotCopyPtrType) ToClusterSnapshotCopyPtrOutput() ClusterSnapshotCopyPtrOutput {
	return i.ToClusterSnapshotCopyPtrOutputWithContext(context.Background())
}

func (i *clusterSnapshotCopyPtrType) ToClusterSnapshotCopyPtrOutputWithContext(ctx context.Context) ClusterSnapshotCopyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSnapshotCopyPtrOutput)
}

type ClusterSnapshotCopyOutput struct{ *pulumi.OutputState }

func (ClusterSnapshotCopyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSnapshotCopy)(nil)).Elem()
}

func (o ClusterSnapshotCopyOutput) ToClusterSnapshotCopyOutput() ClusterSnapshotCopyOutput {
	return o
}

func (o ClusterSnapshotCopyOutput) ToClusterSnapshotCopyOutputWithContext(ctx context.Context) ClusterSnapshotCopyOutput {
	return o
}

func (o ClusterSnapshotCopyOutput) ToClusterSnapshotCopyPtrOutput() ClusterSnapshotCopyPtrOutput {
	return o.ToClusterSnapshotCopyPtrOutputWithContext(context.Background())
}

func (o ClusterSnapshotCopyOutput) ToClusterSnapshotCopyPtrOutputWithContext(ctx context.Context) ClusterSnapshotCopyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterSnapshotCopy) *ClusterSnapshotCopy {
		return &v
	}).(ClusterSnapshotCopyPtrOutput)
}

// The destination region that you want to copy snapshots to.
func (o ClusterSnapshotCopyOutput) DestinationRegion() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterSnapshotCopy) string { return v.DestinationRegion }).(pulumi.StringOutput)
}

// The name of the snapshot copy grant to use when snapshots of an AWS KMS-encrypted cluster are copied to the destination region.
func (o ClusterSnapshotCopyOutput) GrantName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterSnapshotCopy) *string { return v.GrantName }).(pulumi.StringPtrOutput)
}

// The number of days to retain automated snapshots in the destination region after they are copied from the source region. Defaults to `7`.
func (o ClusterSnapshotCopyOutput) RetentionPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterSnapshotCopy) *int { return v.RetentionPeriod }).(pulumi.IntPtrOutput)
}

type ClusterSnapshotCopyPtrOutput struct{ *pulumi.OutputState }

func (ClusterSnapshotCopyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSnapshotCopy)(nil)).Elem()
}

func (o ClusterSnapshotCopyPtrOutput) ToClusterSnapshotCopyPtrOutput() ClusterSnapshotCopyPtrOutput {
	return o
}

func (o ClusterSnapshotCopyPtrOutput) ToClusterSnapshotCopyPtrOutputWithContext(ctx context.Context) ClusterSnapshotCopyPtrOutput {
	return o
}

func (o ClusterSnapshotCopyPtrOutput) Elem() ClusterSnapshotCopyOutput {
	return o.ApplyT(func(v *ClusterSnapshotCopy) ClusterSnapshotCopy {
		if v != nil {
			return *v
		}
		var ret ClusterSnapshotCopy
		return ret
	}).(ClusterSnapshotCopyOutput)
}

// The destination region that you want to copy snapshots to.
func (o ClusterSnapshotCopyPtrOutput) DestinationRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterSnapshotCopy) *string {
		if v == nil {
			return nil
		}
		return &v.DestinationRegion
	}).(pulumi.StringPtrOutput)
}

// The name of the snapshot copy grant to use when snapshots of an AWS KMS-encrypted cluster are copied to the destination region.
func (o ClusterSnapshotCopyPtrOutput) GrantName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterSnapshotCopy) *string {
		if v == nil {
			return nil
		}
		return v.GrantName
	}).(pulumi.StringPtrOutput)
}

// The number of days to retain automated snapshots in the destination region after they are copied from the source region. Defaults to `7`.
func (o ClusterSnapshotCopyPtrOutput) RetentionPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterSnapshotCopy) *int {
		if v == nil {
			return nil
		}
		return v.RetentionPeriod
	}).(pulumi.IntPtrOutput)
}

type ParameterGroupParameter struct {
	// The name of the Redshift parameter.
	Name string `pulumi:"name"`
	// The value of the Redshift parameter.
	Value string `pulumi:"value"`
}

// ParameterGroupParameterInput is an input type that accepts ParameterGroupParameterArgs and ParameterGroupParameterOutput values.
// You can construct a concrete instance of `ParameterGroupParameterInput` via:
//
//          ParameterGroupParameterArgs{...}
type ParameterGroupParameterInput interface {
	pulumi.Input

	ToParameterGroupParameterOutput() ParameterGroupParameterOutput
	ToParameterGroupParameterOutputWithContext(context.Context) ParameterGroupParameterOutput
}

type ParameterGroupParameterArgs struct {
	// The name of the Redshift parameter.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the Redshift parameter.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ParameterGroupParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterGroupParameter)(nil)).Elem()
}

func (i ParameterGroupParameterArgs) ToParameterGroupParameterOutput() ParameterGroupParameterOutput {
	return i.ToParameterGroupParameterOutputWithContext(context.Background())
}

func (i ParameterGroupParameterArgs) ToParameterGroupParameterOutputWithContext(ctx context.Context) ParameterGroupParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterGroupParameterOutput)
}

// ParameterGroupParameterArrayInput is an input type that accepts ParameterGroupParameterArray and ParameterGroupParameterArrayOutput values.
// You can construct a concrete instance of `ParameterGroupParameterArrayInput` via:
//
//          ParameterGroupParameterArray{ ParameterGroupParameterArgs{...} }
type ParameterGroupParameterArrayInput interface {
	pulumi.Input

	ToParameterGroupParameterArrayOutput() ParameterGroupParameterArrayOutput
	ToParameterGroupParameterArrayOutputWithContext(context.Context) ParameterGroupParameterArrayOutput
}

type ParameterGroupParameterArray []ParameterGroupParameterInput

func (ParameterGroupParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ParameterGroupParameter)(nil)).Elem()
}

func (i ParameterGroupParameterArray) ToParameterGroupParameterArrayOutput() ParameterGroupParameterArrayOutput {
	return i.ToParameterGroupParameterArrayOutputWithContext(context.Background())
}

func (i ParameterGroupParameterArray) ToParameterGroupParameterArrayOutputWithContext(ctx context.Context) ParameterGroupParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterGroupParameterArrayOutput)
}

type ParameterGroupParameterOutput struct{ *pulumi.OutputState }

func (ParameterGroupParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterGroupParameter)(nil)).Elem()
}

func (o ParameterGroupParameterOutput) ToParameterGroupParameterOutput() ParameterGroupParameterOutput {
	return o
}

func (o ParameterGroupParameterOutput) ToParameterGroupParameterOutputWithContext(ctx context.Context) ParameterGroupParameterOutput {
	return o
}

// The name of the Redshift parameter.
func (o ParameterGroupParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterGroupParameter) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the Redshift parameter.
func (o ParameterGroupParameterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterGroupParameter) string { return v.Value }).(pulumi.StringOutput)
}

type ParameterGroupParameterArrayOutput struct{ *pulumi.OutputState }

func (ParameterGroupParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ParameterGroupParameter)(nil)).Elem()
}

func (o ParameterGroupParameterArrayOutput) ToParameterGroupParameterArrayOutput() ParameterGroupParameterArrayOutput {
	return o
}

func (o ParameterGroupParameterArrayOutput) ToParameterGroupParameterArrayOutputWithContext(ctx context.Context) ParameterGroupParameterArrayOutput {
	return o
}

func (o ParameterGroupParameterArrayOutput) Index(i pulumi.IntInput) ParameterGroupParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ParameterGroupParameter {
		return vs[0].([]ParameterGroupParameter)[vs[1].(int)]
	}).(ParameterGroupParameterOutput)
}

type ScheduledActionTargetAction struct {
	// An action that runs a `PauseCluster` API operation. Documented below.
	PauseCluster *ScheduledActionTargetActionPauseCluster `pulumi:"pauseCluster"`
	// An action that runs a `ResizeCluster` API operation. Documented below.
	ResizeCluster *ScheduledActionTargetActionResizeCluster `pulumi:"resizeCluster"`
	// An action that runs a `ResumeCluster` API operation. Documented below.
	ResumeCluster *ScheduledActionTargetActionResumeCluster `pulumi:"resumeCluster"`
}

// ScheduledActionTargetActionInput is an input type that accepts ScheduledActionTargetActionArgs and ScheduledActionTargetActionOutput values.
// You can construct a concrete instance of `ScheduledActionTargetActionInput` via:
//
//          ScheduledActionTargetActionArgs{...}
type ScheduledActionTargetActionInput interface {
	pulumi.Input

	ToScheduledActionTargetActionOutput() ScheduledActionTargetActionOutput
	ToScheduledActionTargetActionOutputWithContext(context.Context) ScheduledActionTargetActionOutput
}

type ScheduledActionTargetActionArgs struct {
	// An action that runs a `PauseCluster` API operation. Documented below.
	PauseCluster ScheduledActionTargetActionPauseClusterPtrInput `pulumi:"pauseCluster"`
	// An action that runs a `ResizeCluster` API operation. Documented below.
	ResizeCluster ScheduledActionTargetActionResizeClusterPtrInput `pulumi:"resizeCluster"`
	// An action that runs a `ResumeCluster` API operation. Documented below.
	ResumeCluster ScheduledActionTargetActionResumeClusterPtrInput `pulumi:"resumeCluster"`
}

func (ScheduledActionTargetActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledActionTargetAction)(nil)).Elem()
}

func (i ScheduledActionTargetActionArgs) ToScheduledActionTargetActionOutput() ScheduledActionTargetActionOutput {
	return i.ToScheduledActionTargetActionOutputWithContext(context.Background())
}

func (i ScheduledActionTargetActionArgs) ToScheduledActionTargetActionOutputWithContext(ctx context.Context) ScheduledActionTargetActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledActionTargetActionOutput)
}

func (i ScheduledActionTargetActionArgs) ToScheduledActionTargetActionPtrOutput() ScheduledActionTargetActionPtrOutput {
	return i.ToScheduledActionTargetActionPtrOutputWithContext(context.Background())
}

func (i ScheduledActionTargetActionArgs) ToScheduledActionTargetActionPtrOutputWithContext(ctx context.Context) ScheduledActionTargetActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledActionTargetActionOutput).ToScheduledActionTargetActionPtrOutputWithContext(ctx)
}

// ScheduledActionTargetActionPtrInput is an input type that accepts ScheduledActionTargetActionArgs, ScheduledActionTargetActionPtr and ScheduledActionTargetActionPtrOutput values.
// You can construct a concrete instance of `ScheduledActionTargetActionPtrInput` via:
//
//          ScheduledActionTargetActionArgs{...}
//
//  or:
//
//          nil
type ScheduledActionTargetActionPtrInput interface {
	pulumi.Input

	ToScheduledActionTargetActionPtrOutput() ScheduledActionTargetActionPtrOutput
	ToScheduledActionTargetActionPtrOutputWithContext(context.Context) ScheduledActionTargetActionPtrOutput
}

type scheduledActionTargetActionPtrType ScheduledActionTargetActionArgs

func ScheduledActionTargetActionPtr(v *ScheduledActionTargetActionArgs) ScheduledActionTargetActionPtrInput {
	return (*scheduledActionTargetActionPtrType)(v)
}

func (*scheduledActionTargetActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledActionTargetAction)(nil)).Elem()
}

func (i *scheduledActionTargetActionPtrType) ToScheduledActionTargetActionPtrOutput() ScheduledActionTargetActionPtrOutput {
	return i.ToScheduledActionTargetActionPtrOutputWithContext(context.Background())
}

func (i *scheduledActionTargetActionPtrType) ToScheduledActionTargetActionPtrOutputWithContext(ctx context.Context) ScheduledActionTargetActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledActionTargetActionPtrOutput)
}

type ScheduledActionTargetActionOutput struct{ *pulumi.OutputState }

func (ScheduledActionTargetActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledActionTargetAction)(nil)).Elem()
}

func (o ScheduledActionTargetActionOutput) ToScheduledActionTargetActionOutput() ScheduledActionTargetActionOutput {
	return o
}

func (o ScheduledActionTargetActionOutput) ToScheduledActionTargetActionOutputWithContext(ctx context.Context) ScheduledActionTargetActionOutput {
	return o
}

func (o ScheduledActionTargetActionOutput) ToScheduledActionTargetActionPtrOutput() ScheduledActionTargetActionPtrOutput {
	return o.ToScheduledActionTargetActionPtrOutputWithContext(context.Background())
}

func (o ScheduledActionTargetActionOutput) ToScheduledActionTargetActionPtrOutputWithContext(ctx context.Context) ScheduledActionTargetActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduledActionTargetAction) *ScheduledActionTargetAction {
		return &v
	}).(ScheduledActionTargetActionPtrOutput)
}

// An action that runs a `PauseCluster` API operation. Documented below.
func (o ScheduledActionTargetActionOutput) PauseCluster() ScheduledActionTargetActionPauseClusterPtrOutput {
	return o.ApplyT(func(v ScheduledActionTargetAction) *ScheduledActionTargetActionPauseCluster { return v.PauseCluster }).(ScheduledActionTargetActionPauseClusterPtrOutput)
}

// An action that runs a `ResizeCluster` API operation. Documented below.
func (o ScheduledActionTargetActionOutput) ResizeCluster() ScheduledActionTargetActionResizeClusterPtrOutput {
	return o.ApplyT(func(v ScheduledActionTargetAction) *ScheduledActionTargetActionResizeCluster { return v.ResizeCluster }).(ScheduledActionTargetActionResizeClusterPtrOutput)
}

// An action that runs a `ResumeCluster` API operation. Documented below.
func (o ScheduledActionTargetActionOutput) ResumeCluster() ScheduledActionTargetActionResumeClusterPtrOutput {
	return o.ApplyT(func(v ScheduledActionTargetAction) *ScheduledActionTargetActionResumeCluster { return v.ResumeCluster }).(ScheduledActionTargetActionResumeClusterPtrOutput)
}

type ScheduledActionTargetActionPtrOutput struct{ *pulumi.OutputState }

func (ScheduledActionTargetActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledActionTargetAction)(nil)).Elem()
}

func (o ScheduledActionTargetActionPtrOutput) ToScheduledActionTargetActionPtrOutput() ScheduledActionTargetActionPtrOutput {
	return o
}

func (o ScheduledActionTargetActionPtrOutput) ToScheduledActionTargetActionPtrOutputWithContext(ctx context.Context) ScheduledActionTargetActionPtrOutput {
	return o
}

func (o ScheduledActionTargetActionPtrOutput) Elem() ScheduledActionTargetActionOutput {
	return o.ApplyT(func(v *ScheduledActionTargetAction) ScheduledActionTargetAction {
		if v != nil {
			return *v
		}
		var ret ScheduledActionTargetAction
		return ret
	}).(ScheduledActionTargetActionOutput)
}

// An action that runs a `PauseCluster` API operation. Documented below.
func (o ScheduledActionTargetActionPtrOutput) PauseCluster() ScheduledActionTargetActionPauseClusterPtrOutput {
	return o.ApplyT(func(v *ScheduledActionTargetAction) *ScheduledActionTargetActionPauseCluster {
		if v == nil {
			return nil
		}
		return v.PauseCluster
	}).(ScheduledActionTargetActionPauseClusterPtrOutput)
}

// An action that runs a `ResizeCluster` API operation. Documented below.
func (o ScheduledActionTargetActionPtrOutput) ResizeCluster() ScheduledActionTargetActionResizeClusterPtrOutput {
	return o.ApplyT(func(v *ScheduledActionTargetAction) *ScheduledActionTargetActionResizeCluster {
		if v == nil {
			return nil
		}
		return v.ResizeCluster
	}).(ScheduledActionTargetActionResizeClusterPtrOutput)
}

// An action that runs a `ResumeCluster` API operation. Documented below.
func (o ScheduledActionTargetActionPtrOutput) ResumeCluster() ScheduledActionTargetActionResumeClusterPtrOutput {
	return o.ApplyT(func(v *ScheduledActionTargetAction) *ScheduledActionTargetActionResumeCluster {
		if v == nil {
			return nil
		}
		return v.ResumeCluster
	}).(ScheduledActionTargetActionResumeClusterPtrOutput)
}

type ScheduledActionTargetActionPauseCluster struct {
	// The identifier of the cluster to be resumed.
	ClusterIdentifier string `pulumi:"clusterIdentifier"`
}

// ScheduledActionTargetActionPauseClusterInput is an input type that accepts ScheduledActionTargetActionPauseClusterArgs and ScheduledActionTargetActionPauseClusterOutput values.
// You can construct a concrete instance of `ScheduledActionTargetActionPauseClusterInput` via:
//
//          ScheduledActionTargetActionPauseClusterArgs{...}
type ScheduledActionTargetActionPauseClusterInput interface {
	pulumi.Input

	ToScheduledActionTargetActionPauseClusterOutput() ScheduledActionTargetActionPauseClusterOutput
	ToScheduledActionTargetActionPauseClusterOutputWithContext(context.Context) ScheduledActionTargetActionPauseClusterOutput
}

type ScheduledActionTargetActionPauseClusterArgs struct {
	// The identifier of the cluster to be resumed.
	ClusterIdentifier pulumi.StringInput `pulumi:"clusterIdentifier"`
}

func (ScheduledActionTargetActionPauseClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledActionTargetActionPauseCluster)(nil)).Elem()
}

func (i ScheduledActionTargetActionPauseClusterArgs) ToScheduledActionTargetActionPauseClusterOutput() ScheduledActionTargetActionPauseClusterOutput {
	return i.ToScheduledActionTargetActionPauseClusterOutputWithContext(context.Background())
}

func (i ScheduledActionTargetActionPauseClusterArgs) ToScheduledActionTargetActionPauseClusterOutputWithContext(ctx context.Context) ScheduledActionTargetActionPauseClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledActionTargetActionPauseClusterOutput)
}

func (i ScheduledActionTargetActionPauseClusterArgs) ToScheduledActionTargetActionPauseClusterPtrOutput() ScheduledActionTargetActionPauseClusterPtrOutput {
	return i.ToScheduledActionTargetActionPauseClusterPtrOutputWithContext(context.Background())
}

func (i ScheduledActionTargetActionPauseClusterArgs) ToScheduledActionTargetActionPauseClusterPtrOutputWithContext(ctx context.Context) ScheduledActionTargetActionPauseClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledActionTargetActionPauseClusterOutput).ToScheduledActionTargetActionPauseClusterPtrOutputWithContext(ctx)
}

// ScheduledActionTargetActionPauseClusterPtrInput is an input type that accepts ScheduledActionTargetActionPauseClusterArgs, ScheduledActionTargetActionPauseClusterPtr and ScheduledActionTargetActionPauseClusterPtrOutput values.
// You can construct a concrete instance of `ScheduledActionTargetActionPauseClusterPtrInput` via:
//
//          ScheduledActionTargetActionPauseClusterArgs{...}
//
//  or:
//
//          nil
type ScheduledActionTargetActionPauseClusterPtrInput interface {
	pulumi.Input

	ToScheduledActionTargetActionPauseClusterPtrOutput() ScheduledActionTargetActionPauseClusterPtrOutput
	ToScheduledActionTargetActionPauseClusterPtrOutputWithContext(context.Context) ScheduledActionTargetActionPauseClusterPtrOutput
}

type scheduledActionTargetActionPauseClusterPtrType ScheduledActionTargetActionPauseClusterArgs

func ScheduledActionTargetActionPauseClusterPtr(v *ScheduledActionTargetActionPauseClusterArgs) ScheduledActionTargetActionPauseClusterPtrInput {
	return (*scheduledActionTargetActionPauseClusterPtrType)(v)
}

func (*scheduledActionTargetActionPauseClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledActionTargetActionPauseCluster)(nil)).Elem()
}

func (i *scheduledActionTargetActionPauseClusterPtrType) ToScheduledActionTargetActionPauseClusterPtrOutput() ScheduledActionTargetActionPauseClusterPtrOutput {
	return i.ToScheduledActionTargetActionPauseClusterPtrOutputWithContext(context.Background())
}

func (i *scheduledActionTargetActionPauseClusterPtrType) ToScheduledActionTargetActionPauseClusterPtrOutputWithContext(ctx context.Context) ScheduledActionTargetActionPauseClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledActionTargetActionPauseClusterPtrOutput)
}

type ScheduledActionTargetActionPauseClusterOutput struct{ *pulumi.OutputState }

func (ScheduledActionTargetActionPauseClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledActionTargetActionPauseCluster)(nil)).Elem()
}

func (o ScheduledActionTargetActionPauseClusterOutput) ToScheduledActionTargetActionPauseClusterOutput() ScheduledActionTargetActionPauseClusterOutput {
	return o
}

func (o ScheduledActionTargetActionPauseClusterOutput) ToScheduledActionTargetActionPauseClusterOutputWithContext(ctx context.Context) ScheduledActionTargetActionPauseClusterOutput {
	return o
}

func (o ScheduledActionTargetActionPauseClusterOutput) ToScheduledActionTargetActionPauseClusterPtrOutput() ScheduledActionTargetActionPauseClusterPtrOutput {
	return o.ToScheduledActionTargetActionPauseClusterPtrOutputWithContext(context.Background())
}

func (o ScheduledActionTargetActionPauseClusterOutput) ToScheduledActionTargetActionPauseClusterPtrOutputWithContext(ctx context.Context) ScheduledActionTargetActionPauseClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduledActionTargetActionPauseCluster) *ScheduledActionTargetActionPauseCluster {
		return &v
	}).(ScheduledActionTargetActionPauseClusterPtrOutput)
}

// The identifier of the cluster to be resumed.
func (o ScheduledActionTargetActionPauseClusterOutput) ClusterIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduledActionTargetActionPauseCluster) string { return v.ClusterIdentifier }).(pulumi.StringOutput)
}

type ScheduledActionTargetActionPauseClusterPtrOutput struct{ *pulumi.OutputState }

func (ScheduledActionTargetActionPauseClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledActionTargetActionPauseCluster)(nil)).Elem()
}

func (o ScheduledActionTargetActionPauseClusterPtrOutput) ToScheduledActionTargetActionPauseClusterPtrOutput() ScheduledActionTargetActionPauseClusterPtrOutput {
	return o
}

func (o ScheduledActionTargetActionPauseClusterPtrOutput) ToScheduledActionTargetActionPauseClusterPtrOutputWithContext(ctx context.Context) ScheduledActionTargetActionPauseClusterPtrOutput {
	return o
}

func (o ScheduledActionTargetActionPauseClusterPtrOutput) Elem() ScheduledActionTargetActionPauseClusterOutput {
	return o.ApplyT(func(v *ScheduledActionTargetActionPauseCluster) ScheduledActionTargetActionPauseCluster {
		if v != nil {
			return *v
		}
		var ret ScheduledActionTargetActionPauseCluster
		return ret
	}).(ScheduledActionTargetActionPauseClusterOutput)
}

// The identifier of the cluster to be resumed.
func (o ScheduledActionTargetActionPauseClusterPtrOutput) ClusterIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduledActionTargetActionPauseCluster) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterIdentifier
	}).(pulumi.StringPtrOutput)
}

type ScheduledActionTargetActionResizeCluster struct {
	// A boolean value indicating whether the resize operation is using the classic resize process. Default: `false`.
	Classic *bool `pulumi:"classic"`
	// The identifier of the cluster to be resumed.
	ClusterIdentifier string `pulumi:"clusterIdentifier"`
	// The new cluster type for the specified cluster.
	ClusterType *string `pulumi:"clusterType"`
	// The new node type for the nodes you are adding.
	NodeType *string `pulumi:"nodeType"`
	// The new number of nodes for the cluster.
	NumberOfNodes *int `pulumi:"numberOfNodes"`
}

// ScheduledActionTargetActionResizeClusterInput is an input type that accepts ScheduledActionTargetActionResizeClusterArgs and ScheduledActionTargetActionResizeClusterOutput values.
// You can construct a concrete instance of `ScheduledActionTargetActionResizeClusterInput` via:
//
//          ScheduledActionTargetActionResizeClusterArgs{...}
type ScheduledActionTargetActionResizeClusterInput interface {
	pulumi.Input

	ToScheduledActionTargetActionResizeClusterOutput() ScheduledActionTargetActionResizeClusterOutput
	ToScheduledActionTargetActionResizeClusterOutputWithContext(context.Context) ScheduledActionTargetActionResizeClusterOutput
}

type ScheduledActionTargetActionResizeClusterArgs struct {
	// A boolean value indicating whether the resize operation is using the classic resize process. Default: `false`.
	Classic pulumi.BoolPtrInput `pulumi:"classic"`
	// The identifier of the cluster to be resumed.
	ClusterIdentifier pulumi.StringInput `pulumi:"clusterIdentifier"`
	// The new cluster type for the specified cluster.
	ClusterType pulumi.StringPtrInput `pulumi:"clusterType"`
	// The new node type for the nodes you are adding.
	NodeType pulumi.StringPtrInput `pulumi:"nodeType"`
	// The new number of nodes for the cluster.
	NumberOfNodes pulumi.IntPtrInput `pulumi:"numberOfNodes"`
}

func (ScheduledActionTargetActionResizeClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledActionTargetActionResizeCluster)(nil)).Elem()
}

func (i ScheduledActionTargetActionResizeClusterArgs) ToScheduledActionTargetActionResizeClusterOutput() ScheduledActionTargetActionResizeClusterOutput {
	return i.ToScheduledActionTargetActionResizeClusterOutputWithContext(context.Background())
}

func (i ScheduledActionTargetActionResizeClusterArgs) ToScheduledActionTargetActionResizeClusterOutputWithContext(ctx context.Context) ScheduledActionTargetActionResizeClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledActionTargetActionResizeClusterOutput)
}

func (i ScheduledActionTargetActionResizeClusterArgs) ToScheduledActionTargetActionResizeClusterPtrOutput() ScheduledActionTargetActionResizeClusterPtrOutput {
	return i.ToScheduledActionTargetActionResizeClusterPtrOutputWithContext(context.Background())
}

func (i ScheduledActionTargetActionResizeClusterArgs) ToScheduledActionTargetActionResizeClusterPtrOutputWithContext(ctx context.Context) ScheduledActionTargetActionResizeClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledActionTargetActionResizeClusterOutput).ToScheduledActionTargetActionResizeClusterPtrOutputWithContext(ctx)
}

// ScheduledActionTargetActionResizeClusterPtrInput is an input type that accepts ScheduledActionTargetActionResizeClusterArgs, ScheduledActionTargetActionResizeClusterPtr and ScheduledActionTargetActionResizeClusterPtrOutput values.
// You can construct a concrete instance of `ScheduledActionTargetActionResizeClusterPtrInput` via:
//
//          ScheduledActionTargetActionResizeClusterArgs{...}
//
//  or:
//
//          nil
type ScheduledActionTargetActionResizeClusterPtrInput interface {
	pulumi.Input

	ToScheduledActionTargetActionResizeClusterPtrOutput() ScheduledActionTargetActionResizeClusterPtrOutput
	ToScheduledActionTargetActionResizeClusterPtrOutputWithContext(context.Context) ScheduledActionTargetActionResizeClusterPtrOutput
}

type scheduledActionTargetActionResizeClusterPtrType ScheduledActionTargetActionResizeClusterArgs

func ScheduledActionTargetActionResizeClusterPtr(v *ScheduledActionTargetActionResizeClusterArgs) ScheduledActionTargetActionResizeClusterPtrInput {
	return (*scheduledActionTargetActionResizeClusterPtrType)(v)
}

func (*scheduledActionTargetActionResizeClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledActionTargetActionResizeCluster)(nil)).Elem()
}

func (i *scheduledActionTargetActionResizeClusterPtrType) ToScheduledActionTargetActionResizeClusterPtrOutput() ScheduledActionTargetActionResizeClusterPtrOutput {
	return i.ToScheduledActionTargetActionResizeClusterPtrOutputWithContext(context.Background())
}

func (i *scheduledActionTargetActionResizeClusterPtrType) ToScheduledActionTargetActionResizeClusterPtrOutputWithContext(ctx context.Context) ScheduledActionTargetActionResizeClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledActionTargetActionResizeClusterPtrOutput)
}

type ScheduledActionTargetActionResizeClusterOutput struct{ *pulumi.OutputState }

func (ScheduledActionTargetActionResizeClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledActionTargetActionResizeCluster)(nil)).Elem()
}

func (o ScheduledActionTargetActionResizeClusterOutput) ToScheduledActionTargetActionResizeClusterOutput() ScheduledActionTargetActionResizeClusterOutput {
	return o
}

func (o ScheduledActionTargetActionResizeClusterOutput) ToScheduledActionTargetActionResizeClusterOutputWithContext(ctx context.Context) ScheduledActionTargetActionResizeClusterOutput {
	return o
}

func (o ScheduledActionTargetActionResizeClusterOutput) ToScheduledActionTargetActionResizeClusterPtrOutput() ScheduledActionTargetActionResizeClusterPtrOutput {
	return o.ToScheduledActionTargetActionResizeClusterPtrOutputWithContext(context.Background())
}

func (o ScheduledActionTargetActionResizeClusterOutput) ToScheduledActionTargetActionResizeClusterPtrOutputWithContext(ctx context.Context) ScheduledActionTargetActionResizeClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduledActionTargetActionResizeCluster) *ScheduledActionTargetActionResizeCluster {
		return &v
	}).(ScheduledActionTargetActionResizeClusterPtrOutput)
}

// A boolean value indicating whether the resize operation is using the classic resize process. Default: `false`.
func (o ScheduledActionTargetActionResizeClusterOutput) Classic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScheduledActionTargetActionResizeCluster) *bool { return v.Classic }).(pulumi.BoolPtrOutput)
}

// The identifier of the cluster to be resumed.
func (o ScheduledActionTargetActionResizeClusterOutput) ClusterIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduledActionTargetActionResizeCluster) string { return v.ClusterIdentifier }).(pulumi.StringOutput)
}

// The new cluster type for the specified cluster.
func (o ScheduledActionTargetActionResizeClusterOutput) ClusterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduledActionTargetActionResizeCluster) *string { return v.ClusterType }).(pulumi.StringPtrOutput)
}

// The new node type for the nodes you are adding.
func (o ScheduledActionTargetActionResizeClusterOutput) NodeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduledActionTargetActionResizeCluster) *string { return v.NodeType }).(pulumi.StringPtrOutput)
}

// The new number of nodes for the cluster.
func (o ScheduledActionTargetActionResizeClusterOutput) NumberOfNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScheduledActionTargetActionResizeCluster) *int { return v.NumberOfNodes }).(pulumi.IntPtrOutput)
}

type ScheduledActionTargetActionResizeClusterPtrOutput struct{ *pulumi.OutputState }

func (ScheduledActionTargetActionResizeClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledActionTargetActionResizeCluster)(nil)).Elem()
}

func (o ScheduledActionTargetActionResizeClusterPtrOutput) ToScheduledActionTargetActionResizeClusterPtrOutput() ScheduledActionTargetActionResizeClusterPtrOutput {
	return o
}

func (o ScheduledActionTargetActionResizeClusterPtrOutput) ToScheduledActionTargetActionResizeClusterPtrOutputWithContext(ctx context.Context) ScheduledActionTargetActionResizeClusterPtrOutput {
	return o
}

func (o ScheduledActionTargetActionResizeClusterPtrOutput) Elem() ScheduledActionTargetActionResizeClusterOutput {
	return o.ApplyT(func(v *ScheduledActionTargetActionResizeCluster) ScheduledActionTargetActionResizeCluster {
		if v != nil {
			return *v
		}
		var ret ScheduledActionTargetActionResizeCluster
		return ret
	}).(ScheduledActionTargetActionResizeClusterOutput)
}

// A boolean value indicating whether the resize operation is using the classic resize process. Default: `false`.
func (o ScheduledActionTargetActionResizeClusterPtrOutput) Classic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ScheduledActionTargetActionResizeCluster) *bool {
		if v == nil {
			return nil
		}
		return v.Classic
	}).(pulumi.BoolPtrOutput)
}

// The identifier of the cluster to be resumed.
func (o ScheduledActionTargetActionResizeClusterPtrOutput) ClusterIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduledActionTargetActionResizeCluster) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterIdentifier
	}).(pulumi.StringPtrOutput)
}

// The new cluster type for the specified cluster.
func (o ScheduledActionTargetActionResizeClusterPtrOutput) ClusterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduledActionTargetActionResizeCluster) *string {
		if v == nil {
			return nil
		}
		return v.ClusterType
	}).(pulumi.StringPtrOutput)
}

// The new node type for the nodes you are adding.
func (o ScheduledActionTargetActionResizeClusterPtrOutput) NodeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduledActionTargetActionResizeCluster) *string {
		if v == nil {
			return nil
		}
		return v.NodeType
	}).(pulumi.StringPtrOutput)
}

// The new number of nodes for the cluster.
func (o ScheduledActionTargetActionResizeClusterPtrOutput) NumberOfNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScheduledActionTargetActionResizeCluster) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfNodes
	}).(pulumi.IntPtrOutput)
}

type ScheduledActionTargetActionResumeCluster struct {
	// The identifier of the cluster to be resumed.
	ClusterIdentifier string `pulumi:"clusterIdentifier"`
}

// ScheduledActionTargetActionResumeClusterInput is an input type that accepts ScheduledActionTargetActionResumeClusterArgs and ScheduledActionTargetActionResumeClusterOutput values.
// You can construct a concrete instance of `ScheduledActionTargetActionResumeClusterInput` via:
//
//          ScheduledActionTargetActionResumeClusterArgs{...}
type ScheduledActionTargetActionResumeClusterInput interface {
	pulumi.Input

	ToScheduledActionTargetActionResumeClusterOutput() ScheduledActionTargetActionResumeClusterOutput
	ToScheduledActionTargetActionResumeClusterOutputWithContext(context.Context) ScheduledActionTargetActionResumeClusterOutput
}

type ScheduledActionTargetActionResumeClusterArgs struct {
	// The identifier of the cluster to be resumed.
	ClusterIdentifier pulumi.StringInput `pulumi:"clusterIdentifier"`
}

func (ScheduledActionTargetActionResumeClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledActionTargetActionResumeCluster)(nil)).Elem()
}

func (i ScheduledActionTargetActionResumeClusterArgs) ToScheduledActionTargetActionResumeClusterOutput() ScheduledActionTargetActionResumeClusterOutput {
	return i.ToScheduledActionTargetActionResumeClusterOutputWithContext(context.Background())
}

func (i ScheduledActionTargetActionResumeClusterArgs) ToScheduledActionTargetActionResumeClusterOutputWithContext(ctx context.Context) ScheduledActionTargetActionResumeClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledActionTargetActionResumeClusterOutput)
}

func (i ScheduledActionTargetActionResumeClusterArgs) ToScheduledActionTargetActionResumeClusterPtrOutput() ScheduledActionTargetActionResumeClusterPtrOutput {
	return i.ToScheduledActionTargetActionResumeClusterPtrOutputWithContext(context.Background())
}

func (i ScheduledActionTargetActionResumeClusterArgs) ToScheduledActionTargetActionResumeClusterPtrOutputWithContext(ctx context.Context) ScheduledActionTargetActionResumeClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledActionTargetActionResumeClusterOutput).ToScheduledActionTargetActionResumeClusterPtrOutputWithContext(ctx)
}

// ScheduledActionTargetActionResumeClusterPtrInput is an input type that accepts ScheduledActionTargetActionResumeClusterArgs, ScheduledActionTargetActionResumeClusterPtr and ScheduledActionTargetActionResumeClusterPtrOutput values.
// You can construct a concrete instance of `ScheduledActionTargetActionResumeClusterPtrInput` via:
//
//          ScheduledActionTargetActionResumeClusterArgs{...}
//
//  or:
//
//          nil
type ScheduledActionTargetActionResumeClusterPtrInput interface {
	pulumi.Input

	ToScheduledActionTargetActionResumeClusterPtrOutput() ScheduledActionTargetActionResumeClusterPtrOutput
	ToScheduledActionTargetActionResumeClusterPtrOutputWithContext(context.Context) ScheduledActionTargetActionResumeClusterPtrOutput
}

type scheduledActionTargetActionResumeClusterPtrType ScheduledActionTargetActionResumeClusterArgs

func ScheduledActionTargetActionResumeClusterPtr(v *ScheduledActionTargetActionResumeClusterArgs) ScheduledActionTargetActionResumeClusterPtrInput {
	return (*scheduledActionTargetActionResumeClusterPtrType)(v)
}

func (*scheduledActionTargetActionResumeClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledActionTargetActionResumeCluster)(nil)).Elem()
}

func (i *scheduledActionTargetActionResumeClusterPtrType) ToScheduledActionTargetActionResumeClusterPtrOutput() ScheduledActionTargetActionResumeClusterPtrOutput {
	return i.ToScheduledActionTargetActionResumeClusterPtrOutputWithContext(context.Background())
}

func (i *scheduledActionTargetActionResumeClusterPtrType) ToScheduledActionTargetActionResumeClusterPtrOutputWithContext(ctx context.Context) ScheduledActionTargetActionResumeClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledActionTargetActionResumeClusterPtrOutput)
}

type ScheduledActionTargetActionResumeClusterOutput struct{ *pulumi.OutputState }

func (ScheduledActionTargetActionResumeClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledActionTargetActionResumeCluster)(nil)).Elem()
}

func (o ScheduledActionTargetActionResumeClusterOutput) ToScheduledActionTargetActionResumeClusterOutput() ScheduledActionTargetActionResumeClusterOutput {
	return o
}

func (o ScheduledActionTargetActionResumeClusterOutput) ToScheduledActionTargetActionResumeClusterOutputWithContext(ctx context.Context) ScheduledActionTargetActionResumeClusterOutput {
	return o
}

func (o ScheduledActionTargetActionResumeClusterOutput) ToScheduledActionTargetActionResumeClusterPtrOutput() ScheduledActionTargetActionResumeClusterPtrOutput {
	return o.ToScheduledActionTargetActionResumeClusterPtrOutputWithContext(context.Background())
}

func (o ScheduledActionTargetActionResumeClusterOutput) ToScheduledActionTargetActionResumeClusterPtrOutputWithContext(ctx context.Context) ScheduledActionTargetActionResumeClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduledActionTargetActionResumeCluster) *ScheduledActionTargetActionResumeCluster {
		return &v
	}).(ScheduledActionTargetActionResumeClusterPtrOutput)
}

// The identifier of the cluster to be resumed.
func (o ScheduledActionTargetActionResumeClusterOutput) ClusterIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduledActionTargetActionResumeCluster) string { return v.ClusterIdentifier }).(pulumi.StringOutput)
}

type ScheduledActionTargetActionResumeClusterPtrOutput struct{ *pulumi.OutputState }

func (ScheduledActionTargetActionResumeClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledActionTargetActionResumeCluster)(nil)).Elem()
}

func (o ScheduledActionTargetActionResumeClusterPtrOutput) ToScheduledActionTargetActionResumeClusterPtrOutput() ScheduledActionTargetActionResumeClusterPtrOutput {
	return o
}

func (o ScheduledActionTargetActionResumeClusterPtrOutput) ToScheduledActionTargetActionResumeClusterPtrOutputWithContext(ctx context.Context) ScheduledActionTargetActionResumeClusterPtrOutput {
	return o
}

func (o ScheduledActionTargetActionResumeClusterPtrOutput) Elem() ScheduledActionTargetActionResumeClusterOutput {
	return o.ApplyT(func(v *ScheduledActionTargetActionResumeCluster) ScheduledActionTargetActionResumeCluster {
		if v != nil {
			return *v
		}
		var ret ScheduledActionTargetActionResumeCluster
		return ret
	}).(ScheduledActionTargetActionResumeClusterOutput)
}

// The identifier of the cluster to be resumed.
func (o ScheduledActionTargetActionResumeClusterPtrOutput) ClusterIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduledActionTargetActionResumeCluster) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterIdentifier
	}).(pulumi.StringPtrOutput)
}

type SecurityGroupIngress struct {
	// The CIDR block to accept
	Cidr *string `pulumi:"cidr"`
	// The name of the security group to authorize
	SecurityGroupName *string `pulumi:"securityGroupName"`
	// The owner Id of the security group provided
	// by `securityGroupName`.
	SecurityGroupOwnerId *string `pulumi:"securityGroupOwnerId"`
}

// SecurityGroupIngressInput is an input type that accepts SecurityGroupIngressArgs and SecurityGroupIngressOutput values.
// You can construct a concrete instance of `SecurityGroupIngressInput` via:
//
//          SecurityGroupIngressArgs{...}
type SecurityGroupIngressInput interface {
	pulumi.Input

	ToSecurityGroupIngressOutput() SecurityGroupIngressOutput
	ToSecurityGroupIngressOutputWithContext(context.Context) SecurityGroupIngressOutput
}

type SecurityGroupIngressArgs struct {
	// The CIDR block to accept
	Cidr pulumi.StringPtrInput `pulumi:"cidr"`
	// The name of the security group to authorize
	SecurityGroupName pulumi.StringPtrInput `pulumi:"securityGroupName"`
	// The owner Id of the security group provided
	// by `securityGroupName`.
	SecurityGroupOwnerId pulumi.StringPtrInput `pulumi:"securityGroupOwnerId"`
}

func (SecurityGroupIngressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupIngress)(nil)).Elem()
}

func (i SecurityGroupIngressArgs) ToSecurityGroupIngressOutput() SecurityGroupIngressOutput {
	return i.ToSecurityGroupIngressOutputWithContext(context.Background())
}

func (i SecurityGroupIngressArgs) ToSecurityGroupIngressOutputWithContext(ctx context.Context) SecurityGroupIngressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupIngressOutput)
}

// SecurityGroupIngressArrayInput is an input type that accepts SecurityGroupIngressArray and SecurityGroupIngressArrayOutput values.
// You can construct a concrete instance of `SecurityGroupIngressArrayInput` via:
//
//          SecurityGroupIngressArray{ SecurityGroupIngressArgs{...} }
type SecurityGroupIngressArrayInput interface {
	pulumi.Input

	ToSecurityGroupIngressArrayOutput() SecurityGroupIngressArrayOutput
	ToSecurityGroupIngressArrayOutputWithContext(context.Context) SecurityGroupIngressArrayOutput
}

type SecurityGroupIngressArray []SecurityGroupIngressInput

func (SecurityGroupIngressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityGroupIngress)(nil)).Elem()
}

func (i SecurityGroupIngressArray) ToSecurityGroupIngressArrayOutput() SecurityGroupIngressArrayOutput {
	return i.ToSecurityGroupIngressArrayOutputWithContext(context.Background())
}

func (i SecurityGroupIngressArray) ToSecurityGroupIngressArrayOutputWithContext(ctx context.Context) SecurityGroupIngressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupIngressArrayOutput)
}

type SecurityGroupIngressOutput struct{ *pulumi.OutputState }

func (SecurityGroupIngressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupIngress)(nil)).Elem()
}

func (o SecurityGroupIngressOutput) ToSecurityGroupIngressOutput() SecurityGroupIngressOutput {
	return o
}

func (o SecurityGroupIngressOutput) ToSecurityGroupIngressOutputWithContext(ctx context.Context) SecurityGroupIngressOutput {
	return o
}

// The CIDR block to accept
func (o SecurityGroupIngressOutput) Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupIngress) *string { return v.Cidr }).(pulumi.StringPtrOutput)
}

// The name of the security group to authorize
func (o SecurityGroupIngressOutput) SecurityGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupIngress) *string { return v.SecurityGroupName }).(pulumi.StringPtrOutput)
}

// The owner Id of the security group provided
// by `securityGroupName`.
func (o SecurityGroupIngressOutput) SecurityGroupOwnerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupIngress) *string { return v.SecurityGroupOwnerId }).(pulumi.StringPtrOutput)
}

type SecurityGroupIngressArrayOutput struct{ *pulumi.OutputState }

func (SecurityGroupIngressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityGroupIngress)(nil)).Elem()
}

func (o SecurityGroupIngressArrayOutput) ToSecurityGroupIngressArrayOutput() SecurityGroupIngressArrayOutput {
	return o
}

func (o SecurityGroupIngressArrayOutput) ToSecurityGroupIngressArrayOutputWithContext(ctx context.Context) SecurityGroupIngressArrayOutput {
	return o
}

func (o SecurityGroupIngressArrayOutput) Index(i pulumi.IntInput) SecurityGroupIngressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecurityGroupIngress {
		return vs[0].([]SecurityGroupIngress)[vs[1].(int)]
	}).(SecurityGroupIngressOutput)
}

func init() {
	pulumi.RegisterOutputType(ClusterClusterNodeOutput{})
	pulumi.RegisterOutputType(ClusterClusterNodeArrayOutput{})
	pulumi.RegisterOutputType(ClusterLoggingOutput{})
	pulumi.RegisterOutputType(ClusterLoggingPtrOutput{})
	pulumi.RegisterOutputType(ClusterSnapshotCopyOutput{})
	pulumi.RegisterOutputType(ClusterSnapshotCopyPtrOutput{})
	pulumi.RegisterOutputType(ParameterGroupParameterOutput{})
	pulumi.RegisterOutputType(ParameterGroupParameterArrayOutput{})
	pulumi.RegisterOutputType(ScheduledActionTargetActionOutput{})
	pulumi.RegisterOutputType(ScheduledActionTargetActionPtrOutput{})
	pulumi.RegisterOutputType(ScheduledActionTargetActionPauseClusterOutput{})
	pulumi.RegisterOutputType(ScheduledActionTargetActionPauseClusterPtrOutput{})
	pulumi.RegisterOutputType(ScheduledActionTargetActionResizeClusterOutput{})
	pulumi.RegisterOutputType(ScheduledActionTargetActionResizeClusterPtrOutput{})
	pulumi.RegisterOutputType(ScheduledActionTargetActionResumeClusterOutput{})
	pulumi.RegisterOutputType(ScheduledActionTargetActionResumeClusterPtrOutput{})
	pulumi.RegisterOutputType(SecurityGroupIngressOutput{})
	pulumi.RegisterOutputType(SecurityGroupIngressArrayOutput{})
}
