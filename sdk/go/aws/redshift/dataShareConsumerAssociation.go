// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshift

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS Redshift Data Share Consumer Association.
//
// ## Example Usage
//
// ### Basic Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/redshift"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := redshift.NewDataShareConsumerAssociation(ctx, "example", &redshift.DataShareConsumerAssociationArgs{
//				DataShareArn:           pulumi.String("arn:aws:redshift:us-west-2:012345678901:datashare:b3bfde75-73fd-408b-9086-d6fccfd6d588/example"),
//				AssociateEntireAccount: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Consumer Region
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/redshift"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := redshift.NewDataShareConsumerAssociation(ctx, "example", &redshift.DataShareConsumerAssociationArgs{
//				DataShareArn:   pulumi.String("arn:aws:redshift:us-west-2:012345678901:datashare:b3bfde75-73fd-408b-9086-d6fccfd6d588/example"),
//				ConsumerRegion: pulumi.String("us-west-2"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Using `pulumi import`, import Redshift Data Share Consumer Association using the `id`. For example:
//
// ```sh
// $ pulumi import aws:redshift/dataShareConsumerAssociation:DataShareConsumerAssociation example arn:aws:redshift:us-west-2:012345678901:datashare:b3bfde75-73fd-408b-9086-d6fccfd6d588/example,,,us-west-2
// ```
type DataShareConsumerAssociation struct {
	pulumi.CustomResourceState

	// Whether to allow write operations for a datashare.
	AllowWrites pulumi.BoolPtrOutput `pulumi:"allowWrites"`
	// Whether the datashare is associated with the entire account. Conflicts with `consumerArn` and `consumerRegion`.
	AssociateEntireAccount pulumi.BoolPtrOutput `pulumi:"associateEntireAccount"`
	// Amazon Resource Name (ARN) of the consumer that is associated with the datashare. Conflicts with `associateEntireAccount` and `consumerRegion`.
	ConsumerArn pulumi.StringPtrOutput `pulumi:"consumerArn"`
	// From a datashare consumer account, associates a datashare with all existing and future namespaces in the specified AWS Region. Conflicts with `associateEntireAccount` and `consumerArn`.
	ConsumerRegion pulumi.StringPtrOutput `pulumi:"consumerRegion"`
	// Amazon Resource Name (ARN) of the datashare that the consumer is to use with the account or the namespace.
	//
	// The following arguments are optional:
	DataShareArn pulumi.StringOutput `pulumi:"dataShareArn"`
	// Identifier of a datashare to show its managing entity.
	ManagedBy pulumi.StringOutput `pulumi:"managedBy"`
	// Amazon Resource Name (ARN) of the producer.
	ProducerArn pulumi.StringOutput `pulumi:"producerArn"`
}

// NewDataShareConsumerAssociation registers a new resource with the given unique name, arguments, and options.
func NewDataShareConsumerAssociation(ctx *pulumi.Context,
	name string, args *DataShareConsumerAssociationArgs, opts ...pulumi.ResourceOption) (*DataShareConsumerAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataShareArn == nil {
		return nil, errors.New("invalid value for required argument 'DataShareArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataShareConsumerAssociation
	err := ctx.RegisterResource("aws:redshift/dataShareConsumerAssociation:DataShareConsumerAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataShareConsumerAssociation gets an existing DataShareConsumerAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataShareConsumerAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataShareConsumerAssociationState, opts ...pulumi.ResourceOption) (*DataShareConsumerAssociation, error) {
	var resource DataShareConsumerAssociation
	err := ctx.ReadResource("aws:redshift/dataShareConsumerAssociation:DataShareConsumerAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataShareConsumerAssociation resources.
type dataShareConsumerAssociationState struct {
	// Whether to allow write operations for a datashare.
	AllowWrites *bool `pulumi:"allowWrites"`
	// Whether the datashare is associated with the entire account. Conflicts with `consumerArn` and `consumerRegion`.
	AssociateEntireAccount *bool `pulumi:"associateEntireAccount"`
	// Amazon Resource Name (ARN) of the consumer that is associated with the datashare. Conflicts with `associateEntireAccount` and `consumerRegion`.
	ConsumerArn *string `pulumi:"consumerArn"`
	// From a datashare consumer account, associates a datashare with all existing and future namespaces in the specified AWS Region. Conflicts with `associateEntireAccount` and `consumerArn`.
	ConsumerRegion *string `pulumi:"consumerRegion"`
	// Amazon Resource Name (ARN) of the datashare that the consumer is to use with the account or the namespace.
	//
	// The following arguments are optional:
	DataShareArn *string `pulumi:"dataShareArn"`
	// Identifier of a datashare to show its managing entity.
	ManagedBy *string `pulumi:"managedBy"`
	// Amazon Resource Name (ARN) of the producer.
	ProducerArn *string `pulumi:"producerArn"`
}

type DataShareConsumerAssociationState struct {
	// Whether to allow write operations for a datashare.
	AllowWrites pulumi.BoolPtrInput
	// Whether the datashare is associated with the entire account. Conflicts with `consumerArn` and `consumerRegion`.
	AssociateEntireAccount pulumi.BoolPtrInput
	// Amazon Resource Name (ARN) of the consumer that is associated with the datashare. Conflicts with `associateEntireAccount` and `consumerRegion`.
	ConsumerArn pulumi.StringPtrInput
	// From a datashare consumer account, associates a datashare with all existing and future namespaces in the specified AWS Region. Conflicts with `associateEntireAccount` and `consumerArn`.
	ConsumerRegion pulumi.StringPtrInput
	// Amazon Resource Name (ARN) of the datashare that the consumer is to use with the account or the namespace.
	//
	// The following arguments are optional:
	DataShareArn pulumi.StringPtrInput
	// Identifier of a datashare to show its managing entity.
	ManagedBy pulumi.StringPtrInput
	// Amazon Resource Name (ARN) of the producer.
	ProducerArn pulumi.StringPtrInput
}

func (DataShareConsumerAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataShareConsumerAssociationState)(nil)).Elem()
}

type dataShareConsumerAssociationArgs struct {
	// Whether to allow write operations for a datashare.
	AllowWrites *bool `pulumi:"allowWrites"`
	// Whether the datashare is associated with the entire account. Conflicts with `consumerArn` and `consumerRegion`.
	AssociateEntireAccount *bool `pulumi:"associateEntireAccount"`
	// Amazon Resource Name (ARN) of the consumer that is associated with the datashare. Conflicts with `associateEntireAccount` and `consumerRegion`.
	ConsumerArn *string `pulumi:"consumerArn"`
	// From a datashare consumer account, associates a datashare with all existing and future namespaces in the specified AWS Region. Conflicts with `associateEntireAccount` and `consumerArn`.
	ConsumerRegion *string `pulumi:"consumerRegion"`
	// Amazon Resource Name (ARN) of the datashare that the consumer is to use with the account or the namespace.
	//
	// The following arguments are optional:
	DataShareArn string `pulumi:"dataShareArn"`
}

// The set of arguments for constructing a DataShareConsumerAssociation resource.
type DataShareConsumerAssociationArgs struct {
	// Whether to allow write operations for a datashare.
	AllowWrites pulumi.BoolPtrInput
	// Whether the datashare is associated with the entire account. Conflicts with `consumerArn` and `consumerRegion`.
	AssociateEntireAccount pulumi.BoolPtrInput
	// Amazon Resource Name (ARN) of the consumer that is associated with the datashare. Conflicts with `associateEntireAccount` and `consumerRegion`.
	ConsumerArn pulumi.StringPtrInput
	// From a datashare consumer account, associates a datashare with all existing and future namespaces in the specified AWS Region. Conflicts with `associateEntireAccount` and `consumerArn`.
	ConsumerRegion pulumi.StringPtrInput
	// Amazon Resource Name (ARN) of the datashare that the consumer is to use with the account or the namespace.
	//
	// The following arguments are optional:
	DataShareArn pulumi.StringInput
}

func (DataShareConsumerAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataShareConsumerAssociationArgs)(nil)).Elem()
}

type DataShareConsumerAssociationInput interface {
	pulumi.Input

	ToDataShareConsumerAssociationOutput() DataShareConsumerAssociationOutput
	ToDataShareConsumerAssociationOutputWithContext(ctx context.Context) DataShareConsumerAssociationOutput
}

func (*DataShareConsumerAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**DataShareConsumerAssociation)(nil)).Elem()
}

func (i *DataShareConsumerAssociation) ToDataShareConsumerAssociationOutput() DataShareConsumerAssociationOutput {
	return i.ToDataShareConsumerAssociationOutputWithContext(context.Background())
}

func (i *DataShareConsumerAssociation) ToDataShareConsumerAssociationOutputWithContext(ctx context.Context) DataShareConsumerAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataShareConsumerAssociationOutput)
}

// DataShareConsumerAssociationArrayInput is an input type that accepts DataShareConsumerAssociationArray and DataShareConsumerAssociationArrayOutput values.
// You can construct a concrete instance of `DataShareConsumerAssociationArrayInput` via:
//
//	DataShareConsumerAssociationArray{ DataShareConsumerAssociationArgs{...} }
type DataShareConsumerAssociationArrayInput interface {
	pulumi.Input

	ToDataShareConsumerAssociationArrayOutput() DataShareConsumerAssociationArrayOutput
	ToDataShareConsumerAssociationArrayOutputWithContext(context.Context) DataShareConsumerAssociationArrayOutput
}

type DataShareConsumerAssociationArray []DataShareConsumerAssociationInput

func (DataShareConsumerAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataShareConsumerAssociation)(nil)).Elem()
}

func (i DataShareConsumerAssociationArray) ToDataShareConsumerAssociationArrayOutput() DataShareConsumerAssociationArrayOutput {
	return i.ToDataShareConsumerAssociationArrayOutputWithContext(context.Background())
}

func (i DataShareConsumerAssociationArray) ToDataShareConsumerAssociationArrayOutputWithContext(ctx context.Context) DataShareConsumerAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataShareConsumerAssociationArrayOutput)
}

// DataShareConsumerAssociationMapInput is an input type that accepts DataShareConsumerAssociationMap and DataShareConsumerAssociationMapOutput values.
// You can construct a concrete instance of `DataShareConsumerAssociationMapInput` via:
//
//	DataShareConsumerAssociationMap{ "key": DataShareConsumerAssociationArgs{...} }
type DataShareConsumerAssociationMapInput interface {
	pulumi.Input

	ToDataShareConsumerAssociationMapOutput() DataShareConsumerAssociationMapOutput
	ToDataShareConsumerAssociationMapOutputWithContext(context.Context) DataShareConsumerAssociationMapOutput
}

type DataShareConsumerAssociationMap map[string]DataShareConsumerAssociationInput

func (DataShareConsumerAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataShareConsumerAssociation)(nil)).Elem()
}

func (i DataShareConsumerAssociationMap) ToDataShareConsumerAssociationMapOutput() DataShareConsumerAssociationMapOutput {
	return i.ToDataShareConsumerAssociationMapOutputWithContext(context.Background())
}

func (i DataShareConsumerAssociationMap) ToDataShareConsumerAssociationMapOutputWithContext(ctx context.Context) DataShareConsumerAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataShareConsumerAssociationMapOutput)
}

type DataShareConsumerAssociationOutput struct{ *pulumi.OutputState }

func (DataShareConsumerAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataShareConsumerAssociation)(nil)).Elem()
}

func (o DataShareConsumerAssociationOutput) ToDataShareConsumerAssociationOutput() DataShareConsumerAssociationOutput {
	return o
}

func (o DataShareConsumerAssociationOutput) ToDataShareConsumerAssociationOutputWithContext(ctx context.Context) DataShareConsumerAssociationOutput {
	return o
}

// Whether to allow write operations for a datashare.
func (o DataShareConsumerAssociationOutput) AllowWrites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataShareConsumerAssociation) pulumi.BoolPtrOutput { return v.AllowWrites }).(pulumi.BoolPtrOutput)
}

// Whether the datashare is associated with the entire account. Conflicts with `consumerArn` and `consumerRegion`.
func (o DataShareConsumerAssociationOutput) AssociateEntireAccount() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataShareConsumerAssociation) pulumi.BoolPtrOutput { return v.AssociateEntireAccount }).(pulumi.BoolPtrOutput)
}

// Amazon Resource Name (ARN) of the consumer that is associated with the datashare. Conflicts with `associateEntireAccount` and `consumerRegion`.
func (o DataShareConsumerAssociationOutput) ConsumerArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataShareConsumerAssociation) pulumi.StringPtrOutput { return v.ConsumerArn }).(pulumi.StringPtrOutput)
}

// From a datashare consumer account, associates a datashare with all existing and future namespaces in the specified AWS Region. Conflicts with `associateEntireAccount` and `consumerArn`.
func (o DataShareConsumerAssociationOutput) ConsumerRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataShareConsumerAssociation) pulumi.StringPtrOutput { return v.ConsumerRegion }).(pulumi.StringPtrOutput)
}

// Amazon Resource Name (ARN) of the datashare that the consumer is to use with the account or the namespace.
//
// The following arguments are optional:
func (o DataShareConsumerAssociationOutput) DataShareArn() pulumi.StringOutput {
	return o.ApplyT(func(v *DataShareConsumerAssociation) pulumi.StringOutput { return v.DataShareArn }).(pulumi.StringOutput)
}

// Identifier of a datashare to show its managing entity.
func (o DataShareConsumerAssociationOutput) ManagedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *DataShareConsumerAssociation) pulumi.StringOutput { return v.ManagedBy }).(pulumi.StringOutput)
}

// Amazon Resource Name (ARN) of the producer.
func (o DataShareConsumerAssociationOutput) ProducerArn() pulumi.StringOutput {
	return o.ApplyT(func(v *DataShareConsumerAssociation) pulumi.StringOutput { return v.ProducerArn }).(pulumi.StringOutput)
}

type DataShareConsumerAssociationArrayOutput struct{ *pulumi.OutputState }

func (DataShareConsumerAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataShareConsumerAssociation)(nil)).Elem()
}

func (o DataShareConsumerAssociationArrayOutput) ToDataShareConsumerAssociationArrayOutput() DataShareConsumerAssociationArrayOutput {
	return o
}

func (o DataShareConsumerAssociationArrayOutput) ToDataShareConsumerAssociationArrayOutputWithContext(ctx context.Context) DataShareConsumerAssociationArrayOutput {
	return o
}

func (o DataShareConsumerAssociationArrayOutput) Index(i pulumi.IntInput) DataShareConsumerAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataShareConsumerAssociation {
		return vs[0].([]*DataShareConsumerAssociation)[vs[1].(int)]
	}).(DataShareConsumerAssociationOutput)
}

type DataShareConsumerAssociationMapOutput struct{ *pulumi.OutputState }

func (DataShareConsumerAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataShareConsumerAssociation)(nil)).Elem()
}

func (o DataShareConsumerAssociationMapOutput) ToDataShareConsumerAssociationMapOutput() DataShareConsumerAssociationMapOutput {
	return o
}

func (o DataShareConsumerAssociationMapOutput) ToDataShareConsumerAssociationMapOutputWithContext(ctx context.Context) DataShareConsumerAssociationMapOutput {
	return o
}

func (o DataShareConsumerAssociationMapOutput) MapIndex(k pulumi.StringInput) DataShareConsumerAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataShareConsumerAssociation {
		return vs[0].(map[string]*DataShareConsumerAssociation)[vs[1].(string)]
	}).(DataShareConsumerAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataShareConsumerAssociationInput)(nil)).Elem(), &DataShareConsumerAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataShareConsumerAssociationArrayInput)(nil)).Elem(), DataShareConsumerAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataShareConsumerAssociationMapInput)(nil)).Elem(), DataShareConsumerAssociationMap{})
	pulumi.RegisterOutputType(DataShareConsumerAssociationOutput{})
	pulumi.RegisterOutputType(DataShareConsumerAssociationArrayOutput{})
	pulumi.RegisterOutputType(DataShareConsumerAssociationMapOutput{})
}
