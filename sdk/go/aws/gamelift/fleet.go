// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gamelift

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Fleet struct {
	pulumi.CustomResourceState

	Arn                            pulumi.StringOutput                       `pulumi:"arn"`
	BuildArn                       pulumi.StringOutput                       `pulumi:"buildArn"`
	BuildId                        pulumi.StringPtrOutput                    `pulumi:"buildId"`
	CertificateConfiguration       FleetCertificateConfigurationOutput       `pulumi:"certificateConfiguration"`
	Description                    pulumi.StringPtrOutput                    `pulumi:"description"`
	Ec2InboundPermissions          FleetEc2InboundPermissionArrayOutput      `pulumi:"ec2InboundPermissions"`
	Ec2InstanceType                pulumi.StringOutput                       `pulumi:"ec2InstanceType"`
	FleetType                      pulumi.StringPtrOutput                    `pulumi:"fleetType"`
	InstanceRoleArn                pulumi.StringPtrOutput                    `pulumi:"instanceRoleArn"`
	LogPaths                       pulumi.StringArrayOutput                  `pulumi:"logPaths"`
	MetricGroups                   pulumi.StringArrayOutput                  `pulumi:"metricGroups"`
	Name                           pulumi.StringOutput                       `pulumi:"name"`
	NewGameSessionProtectionPolicy pulumi.StringPtrOutput                    `pulumi:"newGameSessionProtectionPolicy"`
	OperatingSystem                pulumi.StringOutput                       `pulumi:"operatingSystem"`
	ResourceCreationLimitPolicy    FleetResourceCreationLimitPolicyPtrOutput `pulumi:"resourceCreationLimitPolicy"`
	RuntimeConfiguration           FleetRuntimeConfigurationPtrOutput        `pulumi:"runtimeConfiguration"`
	ScriptArn                      pulumi.StringOutput                       `pulumi:"scriptArn"`
	ScriptId                       pulumi.StringPtrOutput                    `pulumi:"scriptId"`
	Tags                           pulumi.StringMapOutput                    `pulumi:"tags"`
	TagsAll                        pulumi.StringMapOutput                    `pulumi:"tagsAll"`
}

// NewFleet registers a new resource with the given unique name, arguments, and options.
func NewFleet(ctx *pulumi.Context,
	name string, args *FleetArgs, opts ...pulumi.ResourceOption) (*Fleet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Ec2InstanceType == nil {
		return nil, errors.New("invalid value for required argument 'Ec2InstanceType'")
	}
	var resource Fleet
	err := ctx.RegisterResource("aws:gamelift/fleet:Fleet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFleet gets an existing Fleet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFleet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FleetState, opts ...pulumi.ResourceOption) (*Fleet, error) {
	var resource Fleet
	err := ctx.ReadResource("aws:gamelift/fleet:Fleet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Fleet resources.
type fleetState struct {
	Arn                            *string                           `pulumi:"arn"`
	BuildArn                       *string                           `pulumi:"buildArn"`
	BuildId                        *string                           `pulumi:"buildId"`
	CertificateConfiguration       *FleetCertificateConfiguration    `pulumi:"certificateConfiguration"`
	Description                    *string                           `pulumi:"description"`
	Ec2InboundPermissions          []FleetEc2InboundPermission       `pulumi:"ec2InboundPermissions"`
	Ec2InstanceType                *string                           `pulumi:"ec2InstanceType"`
	FleetType                      *string                           `pulumi:"fleetType"`
	InstanceRoleArn                *string                           `pulumi:"instanceRoleArn"`
	LogPaths                       []string                          `pulumi:"logPaths"`
	MetricGroups                   []string                          `pulumi:"metricGroups"`
	Name                           *string                           `pulumi:"name"`
	NewGameSessionProtectionPolicy *string                           `pulumi:"newGameSessionProtectionPolicy"`
	OperatingSystem                *string                           `pulumi:"operatingSystem"`
	ResourceCreationLimitPolicy    *FleetResourceCreationLimitPolicy `pulumi:"resourceCreationLimitPolicy"`
	RuntimeConfiguration           *FleetRuntimeConfiguration        `pulumi:"runtimeConfiguration"`
	ScriptArn                      *string                           `pulumi:"scriptArn"`
	ScriptId                       *string                           `pulumi:"scriptId"`
	Tags                           map[string]string                 `pulumi:"tags"`
	TagsAll                        map[string]string                 `pulumi:"tagsAll"`
}

type FleetState struct {
	Arn                            pulumi.StringPtrInput
	BuildArn                       pulumi.StringPtrInput
	BuildId                        pulumi.StringPtrInput
	CertificateConfiguration       FleetCertificateConfigurationPtrInput
	Description                    pulumi.StringPtrInput
	Ec2InboundPermissions          FleetEc2InboundPermissionArrayInput
	Ec2InstanceType                pulumi.StringPtrInput
	FleetType                      pulumi.StringPtrInput
	InstanceRoleArn                pulumi.StringPtrInput
	LogPaths                       pulumi.StringArrayInput
	MetricGroups                   pulumi.StringArrayInput
	Name                           pulumi.StringPtrInput
	NewGameSessionProtectionPolicy pulumi.StringPtrInput
	OperatingSystem                pulumi.StringPtrInput
	ResourceCreationLimitPolicy    FleetResourceCreationLimitPolicyPtrInput
	RuntimeConfiguration           FleetRuntimeConfigurationPtrInput
	ScriptArn                      pulumi.StringPtrInput
	ScriptId                       pulumi.StringPtrInput
	Tags                           pulumi.StringMapInput
	TagsAll                        pulumi.StringMapInput
}

func (FleetState) ElementType() reflect.Type {
	return reflect.TypeOf((*fleetState)(nil)).Elem()
}

type fleetArgs struct {
	BuildId                        *string                           `pulumi:"buildId"`
	CertificateConfiguration       *FleetCertificateConfiguration    `pulumi:"certificateConfiguration"`
	Description                    *string                           `pulumi:"description"`
	Ec2InboundPermissions          []FleetEc2InboundPermission       `pulumi:"ec2InboundPermissions"`
	Ec2InstanceType                string                            `pulumi:"ec2InstanceType"`
	FleetType                      *string                           `pulumi:"fleetType"`
	InstanceRoleArn                *string                           `pulumi:"instanceRoleArn"`
	MetricGroups                   []string                          `pulumi:"metricGroups"`
	Name                           *string                           `pulumi:"name"`
	NewGameSessionProtectionPolicy *string                           `pulumi:"newGameSessionProtectionPolicy"`
	ResourceCreationLimitPolicy    *FleetResourceCreationLimitPolicy `pulumi:"resourceCreationLimitPolicy"`
	RuntimeConfiguration           *FleetRuntimeConfiguration        `pulumi:"runtimeConfiguration"`
	ScriptId                       *string                           `pulumi:"scriptId"`
	Tags                           map[string]string                 `pulumi:"tags"`
}

// The set of arguments for constructing a Fleet resource.
type FleetArgs struct {
	BuildId                        pulumi.StringPtrInput
	CertificateConfiguration       FleetCertificateConfigurationPtrInput
	Description                    pulumi.StringPtrInput
	Ec2InboundPermissions          FleetEc2InboundPermissionArrayInput
	Ec2InstanceType                pulumi.StringInput
	FleetType                      pulumi.StringPtrInput
	InstanceRoleArn                pulumi.StringPtrInput
	MetricGroups                   pulumi.StringArrayInput
	Name                           pulumi.StringPtrInput
	NewGameSessionProtectionPolicy pulumi.StringPtrInput
	ResourceCreationLimitPolicy    FleetResourceCreationLimitPolicyPtrInput
	RuntimeConfiguration           FleetRuntimeConfigurationPtrInput
	ScriptId                       pulumi.StringPtrInput
	Tags                           pulumi.StringMapInput
}

func (FleetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fleetArgs)(nil)).Elem()
}

type FleetInput interface {
	pulumi.Input

	ToFleetOutput() FleetOutput
	ToFleetOutputWithContext(ctx context.Context) FleetOutput
}

func (*Fleet) ElementType() reflect.Type {
	return reflect.TypeOf((**Fleet)(nil)).Elem()
}

func (i *Fleet) ToFleetOutput() FleetOutput {
	return i.ToFleetOutputWithContext(context.Background())
}

func (i *Fleet) ToFleetOutputWithContext(ctx context.Context) FleetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetOutput)
}

// FleetArrayInput is an input type that accepts FleetArray and FleetArrayOutput values.
// You can construct a concrete instance of `FleetArrayInput` via:
//
//	FleetArray{ FleetArgs{...} }
type FleetArrayInput interface {
	pulumi.Input

	ToFleetArrayOutput() FleetArrayOutput
	ToFleetArrayOutputWithContext(context.Context) FleetArrayOutput
}

type FleetArray []FleetInput

func (FleetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Fleet)(nil)).Elem()
}

func (i FleetArray) ToFleetArrayOutput() FleetArrayOutput {
	return i.ToFleetArrayOutputWithContext(context.Background())
}

func (i FleetArray) ToFleetArrayOutputWithContext(ctx context.Context) FleetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetArrayOutput)
}

// FleetMapInput is an input type that accepts FleetMap and FleetMapOutput values.
// You can construct a concrete instance of `FleetMapInput` via:
//
//	FleetMap{ "key": FleetArgs{...} }
type FleetMapInput interface {
	pulumi.Input

	ToFleetMapOutput() FleetMapOutput
	ToFleetMapOutputWithContext(context.Context) FleetMapOutput
}

type FleetMap map[string]FleetInput

func (FleetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Fleet)(nil)).Elem()
}

func (i FleetMap) ToFleetMapOutput() FleetMapOutput {
	return i.ToFleetMapOutputWithContext(context.Background())
}

func (i FleetMap) ToFleetMapOutputWithContext(ctx context.Context) FleetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetMapOutput)
}

type FleetOutput struct{ *pulumi.OutputState }

func (FleetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Fleet)(nil)).Elem()
}

func (o FleetOutput) ToFleetOutput() FleetOutput {
	return o
}

func (o FleetOutput) ToFleetOutputWithContext(ctx context.Context) FleetOutput {
	return o
}

func (o FleetOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o FleetOutput) BuildArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringOutput { return v.BuildArn }).(pulumi.StringOutput)
}

func (o FleetOutput) BuildId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringPtrOutput { return v.BuildId }).(pulumi.StringPtrOutput)
}

func (o FleetOutput) CertificateConfiguration() FleetCertificateConfigurationOutput {
	return o.ApplyT(func(v *Fleet) FleetCertificateConfigurationOutput { return v.CertificateConfiguration }).(FleetCertificateConfigurationOutput)
}

func (o FleetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o FleetOutput) Ec2InboundPermissions() FleetEc2InboundPermissionArrayOutput {
	return o.ApplyT(func(v *Fleet) FleetEc2InboundPermissionArrayOutput { return v.Ec2InboundPermissions }).(FleetEc2InboundPermissionArrayOutput)
}

func (o FleetOutput) Ec2InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringOutput { return v.Ec2InstanceType }).(pulumi.StringOutput)
}

func (o FleetOutput) FleetType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringPtrOutput { return v.FleetType }).(pulumi.StringPtrOutput)
}

func (o FleetOutput) InstanceRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringPtrOutput { return v.InstanceRoleArn }).(pulumi.StringPtrOutput)
}

func (o FleetOutput) LogPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringArrayOutput { return v.LogPaths }).(pulumi.StringArrayOutput)
}

func (o FleetOutput) MetricGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringArrayOutput { return v.MetricGroups }).(pulumi.StringArrayOutput)
}

func (o FleetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o FleetOutput) NewGameSessionProtectionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringPtrOutput { return v.NewGameSessionProtectionPolicy }).(pulumi.StringPtrOutput)
}

func (o FleetOutput) OperatingSystem() pulumi.StringOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringOutput { return v.OperatingSystem }).(pulumi.StringOutput)
}

func (o FleetOutput) ResourceCreationLimitPolicy() FleetResourceCreationLimitPolicyPtrOutput {
	return o.ApplyT(func(v *Fleet) FleetResourceCreationLimitPolicyPtrOutput { return v.ResourceCreationLimitPolicy }).(FleetResourceCreationLimitPolicyPtrOutput)
}

func (o FleetOutput) RuntimeConfiguration() FleetRuntimeConfigurationPtrOutput {
	return o.ApplyT(func(v *Fleet) FleetRuntimeConfigurationPtrOutput { return v.RuntimeConfiguration }).(FleetRuntimeConfigurationPtrOutput)
}

func (o FleetOutput) ScriptArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringOutput { return v.ScriptArn }).(pulumi.StringOutput)
}

func (o FleetOutput) ScriptId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringPtrOutput { return v.ScriptId }).(pulumi.StringPtrOutput)
}

func (o FleetOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o FleetOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type FleetArrayOutput struct{ *pulumi.OutputState }

func (FleetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Fleet)(nil)).Elem()
}

func (o FleetArrayOutput) ToFleetArrayOutput() FleetArrayOutput {
	return o
}

func (o FleetArrayOutput) ToFleetArrayOutputWithContext(ctx context.Context) FleetArrayOutput {
	return o
}

func (o FleetArrayOutput) Index(i pulumi.IntInput) FleetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Fleet {
		return vs[0].([]*Fleet)[vs[1].(int)]
	}).(FleetOutput)
}

type FleetMapOutput struct{ *pulumi.OutputState }

func (FleetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Fleet)(nil)).Elem()
}

func (o FleetMapOutput) ToFleetMapOutput() FleetMapOutput {
	return o
}

func (o FleetMapOutput) ToFleetMapOutputWithContext(ctx context.Context) FleetMapOutput {
	return o
}

func (o FleetMapOutput) MapIndex(k pulumi.StringInput) FleetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Fleet {
		return vs[0].(map[string]*Fleet)[vs[1].(string)]
	}).(FleetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FleetInput)(nil)).Elem(), &Fleet{})
	pulumi.RegisterInputType(reflect.TypeOf((*FleetArrayInput)(nil)).Elem(), FleetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FleetMapInput)(nil)).Elem(), FleetMap{})
	pulumi.RegisterOutputType(FleetOutput{})
	pulumi.RegisterOutputType(FleetArrayOutput{})
	pulumi.RegisterOutputType(FleetMapOutput{})
}
