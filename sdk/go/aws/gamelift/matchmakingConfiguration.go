// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gamelift

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a GameLift Alias resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/gamelift"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gamelift.NewGameSessionQueue(ctx, "exampleGameSessionQueue", &gamelift.GameSessionQueueArgs{
//				Destinations: pulumi.StringArray{},
//				PlayerLatencyPolicies: gamelift.GameSessionQueuePlayerLatencyPolicyArray{
//					&gamelift.GameSessionQueuePlayerLatencyPolicyArgs{
//						MaximumIndividualPlayerLatencyMilliseconds: pulumi.Int(3),
//						PolicyDurationSeconds:                      pulumi.Int(7),
//					},
//					&gamelift.GameSessionQueuePlayerLatencyPolicyArgs{
//						MaximumIndividualPlayerLatencyMilliseconds: pulumi.Int(10),
//					},
//				},
//				TimeoutInSeconds: pulumi.Int(25),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"name":                "test",
//				"ruleLanguageVersion": "1.0",
//				"teams": []map[string]interface{}{
//					map[string]interface{}{
//						"name":       "alpha",
//						"minPlayers": 1,
//						"maxPlayers": 5,
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = gamelift.NewMatchmakingRuleSet(ctx, "exampleMatchmakingRuleSet", &gamelift.MatchmakingRuleSetArgs{
//				RuleSetBody: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = gamelift.NewMatchmakingConfiguration(ctx, "exampleMatchmakingConfiguration", &gamelift.MatchmakingConfigurationArgs{
//				AcceptanceRequired:    pulumi.Bool(false),
//				CustomEventData:       pulumi.String("pvp"),
//				GameSessionData:       pulumi.String("game_session_data"),
//				BackfillMode:          pulumi.String("MANUAL"),
//				RequestTimeoutSeconds: pulumi.Int(30),
//				RuleSetName:           pulumi.Any(aws_gamelift_matchmaking_rule_set.Test.Name),
//				GameSessionQueueArns: pulumi.StringArray{
//					aws_gamelift_game_session_queue.Test.Arn,
//				},
//				Tags: pulumi.StringMap{
//					"key1": pulumi.String("value1"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// GameLift Matchmaking Configurations can be imported using the ID, e.g.,
//
// ```sh
//
//	$ pulumi import aws:gamelift/matchmakingConfiguration:MatchmakingConfiguration example <matchmakingconfiguration-id>
//
// ```
type MatchmakingConfiguration struct {
	pulumi.CustomResourceState

	// Specifies if the match that was created with this configuration must be accepted by matched players.
	AcceptanceRequired pulumi.BoolPtrOutput `pulumi:"acceptanceRequired"`
	// The length of time (in seconds) to wait for players to accept a proposed match, if acceptance is required.
	AcceptanceTimeoutSeconds pulumi.IntPtrOutput `pulumi:"acceptanceTimeoutSeconds"`
	// The number of player slots in a match to keep open for future players.
	AdditionalPlayerCount pulumi.IntPtrOutput `pulumi:"additionalPlayerCount"`
	// Matchmaking Configuration ARN.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The method used to backfill game sessions that are created with this matchmaking configuration.
	BackfillMode pulumi.StringPtrOutput `pulumi:"backfillMode"`
	// The time when the Matchmaking Configuration was created.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// Information to be added to all events related to this matchmaking configuration.
	CustomEventData pulumi.StringPtrOutput `pulumi:"customEventData"`
	// A human-readable description of the matchmaking configuration.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Indicates whether this matchmaking configuration is being used with GameLift hosting or as a standalone matchmaking solution.
	FlexMatchMode pulumi.StringOutput `pulumi:"flexMatchMode"`
	// One or more custom game properties. See below.
	GameProperties MatchmakingConfigurationGamePropertyArrayOutput `pulumi:"gameProperties"`
	// A set of custom game session properties.
	GameSessionData pulumi.StringPtrOutput `pulumi:"gameSessionData"`
	// The ARNs of the GameLift game session queue resources.
	GameSessionQueueArns pulumi.StringArrayOutput `pulumi:"gameSessionQueueArns"`
	// Name of the matchmaking configuration
	Name pulumi.StringOutput `pulumi:"name"`
	// An SNS topic ARN that is set up to receive matchmaking notifications.
	NotificationTarget pulumi.StringPtrOutput `pulumi:"notificationTarget"`
	// The maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out.
	RequestTimeoutSeconds pulumi.IntOutput    `pulumi:"requestTimeoutSeconds"`
	RuleSetArn            pulumi.StringOutput `pulumi:"ruleSetArn"`
	// A rule set names for the matchmaking rule set to use with this configuration.
	RuleSetName pulumi.StringOutput `pulumi:"ruleSetName"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewMatchmakingConfiguration registers a new resource with the given unique name, arguments, and options.
func NewMatchmakingConfiguration(ctx *pulumi.Context,
	name string, args *MatchmakingConfigurationArgs, opts ...pulumi.ResourceOption) (*MatchmakingConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RequestTimeoutSeconds == nil {
		return nil, errors.New("invalid value for required argument 'RequestTimeoutSeconds'")
	}
	if args.RuleSetName == nil {
		return nil, errors.New("invalid value for required argument 'RuleSetName'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"tagsAll",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MatchmakingConfiguration
	err := ctx.RegisterResource("aws:gamelift/matchmakingConfiguration:MatchmakingConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMatchmakingConfiguration gets an existing MatchmakingConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMatchmakingConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MatchmakingConfigurationState, opts ...pulumi.ResourceOption) (*MatchmakingConfiguration, error) {
	var resource MatchmakingConfiguration
	err := ctx.ReadResource("aws:gamelift/matchmakingConfiguration:MatchmakingConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MatchmakingConfiguration resources.
type matchmakingConfigurationState struct {
	// Specifies if the match that was created with this configuration must be accepted by matched players.
	AcceptanceRequired *bool `pulumi:"acceptanceRequired"`
	// The length of time (in seconds) to wait for players to accept a proposed match, if acceptance is required.
	AcceptanceTimeoutSeconds *int `pulumi:"acceptanceTimeoutSeconds"`
	// The number of player slots in a match to keep open for future players.
	AdditionalPlayerCount *int `pulumi:"additionalPlayerCount"`
	// Matchmaking Configuration ARN.
	Arn *string `pulumi:"arn"`
	// The method used to backfill game sessions that are created with this matchmaking configuration.
	BackfillMode *string `pulumi:"backfillMode"`
	// The time when the Matchmaking Configuration was created.
	CreationTime *string `pulumi:"creationTime"`
	// Information to be added to all events related to this matchmaking configuration.
	CustomEventData *string `pulumi:"customEventData"`
	// A human-readable description of the matchmaking configuration.
	Description *string `pulumi:"description"`
	// Indicates whether this matchmaking configuration is being used with GameLift hosting or as a standalone matchmaking solution.
	FlexMatchMode *string `pulumi:"flexMatchMode"`
	// One or more custom game properties. See below.
	GameProperties []MatchmakingConfigurationGameProperty `pulumi:"gameProperties"`
	// A set of custom game session properties.
	GameSessionData *string `pulumi:"gameSessionData"`
	// The ARNs of the GameLift game session queue resources.
	GameSessionQueueArns []string `pulumi:"gameSessionQueueArns"`
	// Name of the matchmaking configuration
	Name *string `pulumi:"name"`
	// An SNS topic ARN that is set up to receive matchmaking notifications.
	NotificationTarget *string `pulumi:"notificationTarget"`
	// The maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out.
	RequestTimeoutSeconds *int    `pulumi:"requestTimeoutSeconds"`
	RuleSetArn            *string `pulumi:"ruleSetArn"`
	// A rule set names for the matchmaking rule set to use with this configuration.
	RuleSetName *string `pulumi:"ruleSetName"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type MatchmakingConfigurationState struct {
	// Specifies if the match that was created with this configuration must be accepted by matched players.
	AcceptanceRequired pulumi.BoolPtrInput
	// The length of time (in seconds) to wait for players to accept a proposed match, if acceptance is required.
	AcceptanceTimeoutSeconds pulumi.IntPtrInput
	// The number of player slots in a match to keep open for future players.
	AdditionalPlayerCount pulumi.IntPtrInput
	// Matchmaking Configuration ARN.
	Arn pulumi.StringPtrInput
	// The method used to backfill game sessions that are created with this matchmaking configuration.
	BackfillMode pulumi.StringPtrInput
	// The time when the Matchmaking Configuration was created.
	CreationTime pulumi.StringPtrInput
	// Information to be added to all events related to this matchmaking configuration.
	CustomEventData pulumi.StringPtrInput
	// A human-readable description of the matchmaking configuration.
	Description pulumi.StringPtrInput
	// Indicates whether this matchmaking configuration is being used with GameLift hosting or as a standalone matchmaking solution.
	FlexMatchMode pulumi.StringPtrInput
	// One or more custom game properties. See below.
	GameProperties MatchmakingConfigurationGamePropertyArrayInput
	// A set of custom game session properties.
	GameSessionData pulumi.StringPtrInput
	// The ARNs of the GameLift game session queue resources.
	GameSessionQueueArns pulumi.StringArrayInput
	// Name of the matchmaking configuration
	Name pulumi.StringPtrInput
	// An SNS topic ARN that is set up to receive matchmaking notifications.
	NotificationTarget pulumi.StringPtrInput
	// The maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out.
	RequestTimeoutSeconds pulumi.IntPtrInput
	RuleSetArn            pulumi.StringPtrInput
	// A rule set names for the matchmaking rule set to use with this configuration.
	RuleSetName pulumi.StringPtrInput
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
}

func (MatchmakingConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*matchmakingConfigurationState)(nil)).Elem()
}

type matchmakingConfigurationArgs struct {
	// Specifies if the match that was created with this configuration must be accepted by matched players.
	AcceptanceRequired *bool `pulumi:"acceptanceRequired"`
	// The length of time (in seconds) to wait for players to accept a proposed match, if acceptance is required.
	AcceptanceTimeoutSeconds *int `pulumi:"acceptanceTimeoutSeconds"`
	// The number of player slots in a match to keep open for future players.
	AdditionalPlayerCount *int `pulumi:"additionalPlayerCount"`
	// The method used to backfill game sessions that are created with this matchmaking configuration.
	BackfillMode *string `pulumi:"backfillMode"`
	// Information to be added to all events related to this matchmaking configuration.
	CustomEventData *string `pulumi:"customEventData"`
	// A human-readable description of the matchmaking configuration.
	Description *string `pulumi:"description"`
	// Indicates whether this matchmaking configuration is being used with GameLift hosting or as a standalone matchmaking solution.
	FlexMatchMode *string `pulumi:"flexMatchMode"`
	// One or more custom game properties. See below.
	GameProperties []MatchmakingConfigurationGameProperty `pulumi:"gameProperties"`
	// A set of custom game session properties.
	GameSessionData *string `pulumi:"gameSessionData"`
	// The ARNs of the GameLift game session queue resources.
	GameSessionQueueArns []string `pulumi:"gameSessionQueueArns"`
	// Name of the matchmaking configuration
	Name *string `pulumi:"name"`
	// An SNS topic ARN that is set up to receive matchmaking notifications.
	NotificationTarget *string `pulumi:"notificationTarget"`
	// The maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out.
	RequestTimeoutSeconds int `pulumi:"requestTimeoutSeconds"`
	// A rule set names for the matchmaking rule set to use with this configuration.
	RuleSetName string `pulumi:"ruleSetName"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a MatchmakingConfiguration resource.
type MatchmakingConfigurationArgs struct {
	// Specifies if the match that was created with this configuration must be accepted by matched players.
	AcceptanceRequired pulumi.BoolPtrInput
	// The length of time (in seconds) to wait for players to accept a proposed match, if acceptance is required.
	AcceptanceTimeoutSeconds pulumi.IntPtrInput
	// The number of player slots in a match to keep open for future players.
	AdditionalPlayerCount pulumi.IntPtrInput
	// The method used to backfill game sessions that are created with this matchmaking configuration.
	BackfillMode pulumi.StringPtrInput
	// Information to be added to all events related to this matchmaking configuration.
	CustomEventData pulumi.StringPtrInput
	// A human-readable description of the matchmaking configuration.
	Description pulumi.StringPtrInput
	// Indicates whether this matchmaking configuration is being used with GameLift hosting or as a standalone matchmaking solution.
	FlexMatchMode pulumi.StringPtrInput
	// One or more custom game properties. See below.
	GameProperties MatchmakingConfigurationGamePropertyArrayInput
	// A set of custom game session properties.
	GameSessionData pulumi.StringPtrInput
	// The ARNs of the GameLift game session queue resources.
	GameSessionQueueArns pulumi.StringArrayInput
	// Name of the matchmaking configuration
	Name pulumi.StringPtrInput
	// An SNS topic ARN that is set up to receive matchmaking notifications.
	NotificationTarget pulumi.StringPtrInput
	// The maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out.
	RequestTimeoutSeconds pulumi.IntInput
	// A rule set names for the matchmaking rule set to use with this configuration.
	RuleSetName pulumi.StringInput
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
}

func (MatchmakingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*matchmakingConfigurationArgs)(nil)).Elem()
}

type MatchmakingConfigurationInput interface {
	pulumi.Input

	ToMatchmakingConfigurationOutput() MatchmakingConfigurationOutput
	ToMatchmakingConfigurationOutputWithContext(ctx context.Context) MatchmakingConfigurationOutput
}

func (*MatchmakingConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**MatchmakingConfiguration)(nil)).Elem()
}

func (i *MatchmakingConfiguration) ToMatchmakingConfigurationOutput() MatchmakingConfigurationOutput {
	return i.ToMatchmakingConfigurationOutputWithContext(context.Background())
}

func (i *MatchmakingConfiguration) ToMatchmakingConfigurationOutputWithContext(ctx context.Context) MatchmakingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchmakingConfigurationOutput)
}

func (i *MatchmakingConfiguration) ToOutput(ctx context.Context) pulumix.Output[*MatchmakingConfiguration] {
	return pulumix.Output[*MatchmakingConfiguration]{
		OutputState: i.ToMatchmakingConfigurationOutputWithContext(ctx).OutputState,
	}
}

// MatchmakingConfigurationArrayInput is an input type that accepts MatchmakingConfigurationArray and MatchmakingConfigurationArrayOutput values.
// You can construct a concrete instance of `MatchmakingConfigurationArrayInput` via:
//
//	MatchmakingConfigurationArray{ MatchmakingConfigurationArgs{...} }
type MatchmakingConfigurationArrayInput interface {
	pulumi.Input

	ToMatchmakingConfigurationArrayOutput() MatchmakingConfigurationArrayOutput
	ToMatchmakingConfigurationArrayOutputWithContext(context.Context) MatchmakingConfigurationArrayOutput
}

type MatchmakingConfigurationArray []MatchmakingConfigurationInput

func (MatchmakingConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MatchmakingConfiguration)(nil)).Elem()
}

func (i MatchmakingConfigurationArray) ToMatchmakingConfigurationArrayOutput() MatchmakingConfigurationArrayOutput {
	return i.ToMatchmakingConfigurationArrayOutputWithContext(context.Background())
}

func (i MatchmakingConfigurationArray) ToMatchmakingConfigurationArrayOutputWithContext(ctx context.Context) MatchmakingConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchmakingConfigurationArrayOutput)
}

func (i MatchmakingConfigurationArray) ToOutput(ctx context.Context) pulumix.Output[[]*MatchmakingConfiguration] {
	return pulumix.Output[[]*MatchmakingConfiguration]{
		OutputState: i.ToMatchmakingConfigurationArrayOutputWithContext(ctx).OutputState,
	}
}

// MatchmakingConfigurationMapInput is an input type that accepts MatchmakingConfigurationMap and MatchmakingConfigurationMapOutput values.
// You can construct a concrete instance of `MatchmakingConfigurationMapInput` via:
//
//	MatchmakingConfigurationMap{ "key": MatchmakingConfigurationArgs{...} }
type MatchmakingConfigurationMapInput interface {
	pulumi.Input

	ToMatchmakingConfigurationMapOutput() MatchmakingConfigurationMapOutput
	ToMatchmakingConfigurationMapOutputWithContext(context.Context) MatchmakingConfigurationMapOutput
}

type MatchmakingConfigurationMap map[string]MatchmakingConfigurationInput

func (MatchmakingConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MatchmakingConfiguration)(nil)).Elem()
}

func (i MatchmakingConfigurationMap) ToMatchmakingConfigurationMapOutput() MatchmakingConfigurationMapOutput {
	return i.ToMatchmakingConfigurationMapOutputWithContext(context.Background())
}

func (i MatchmakingConfigurationMap) ToMatchmakingConfigurationMapOutputWithContext(ctx context.Context) MatchmakingConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchmakingConfigurationMapOutput)
}

func (i MatchmakingConfigurationMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*MatchmakingConfiguration] {
	return pulumix.Output[map[string]*MatchmakingConfiguration]{
		OutputState: i.ToMatchmakingConfigurationMapOutputWithContext(ctx).OutputState,
	}
}

type MatchmakingConfigurationOutput struct{ *pulumi.OutputState }

func (MatchmakingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MatchmakingConfiguration)(nil)).Elem()
}

func (o MatchmakingConfigurationOutput) ToMatchmakingConfigurationOutput() MatchmakingConfigurationOutput {
	return o
}

func (o MatchmakingConfigurationOutput) ToMatchmakingConfigurationOutputWithContext(ctx context.Context) MatchmakingConfigurationOutput {
	return o
}

func (o MatchmakingConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[*MatchmakingConfiguration] {
	return pulumix.Output[*MatchmakingConfiguration]{
		OutputState: o.OutputState,
	}
}

// Specifies if the match that was created with this configuration must be accepted by matched players.
func (o MatchmakingConfigurationOutput) AcceptanceRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MatchmakingConfiguration) pulumi.BoolPtrOutput { return v.AcceptanceRequired }).(pulumi.BoolPtrOutput)
}

// The length of time (in seconds) to wait for players to accept a proposed match, if acceptance is required.
func (o MatchmakingConfigurationOutput) AcceptanceTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MatchmakingConfiguration) pulumi.IntPtrOutput { return v.AcceptanceTimeoutSeconds }).(pulumi.IntPtrOutput)
}

// The number of player slots in a match to keep open for future players.
func (o MatchmakingConfigurationOutput) AdditionalPlayerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MatchmakingConfiguration) pulumi.IntPtrOutput { return v.AdditionalPlayerCount }).(pulumi.IntPtrOutput)
}

// Matchmaking Configuration ARN.
func (o MatchmakingConfigurationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *MatchmakingConfiguration) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The method used to backfill game sessions that are created with this matchmaking configuration.
func (o MatchmakingConfigurationOutput) BackfillMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MatchmakingConfiguration) pulumi.StringPtrOutput { return v.BackfillMode }).(pulumi.StringPtrOutput)
}

// The time when the Matchmaking Configuration was created.
func (o MatchmakingConfigurationOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *MatchmakingConfiguration) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// Information to be added to all events related to this matchmaking configuration.
func (o MatchmakingConfigurationOutput) CustomEventData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MatchmakingConfiguration) pulumi.StringPtrOutput { return v.CustomEventData }).(pulumi.StringPtrOutput)
}

// A human-readable description of the matchmaking configuration.
func (o MatchmakingConfigurationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MatchmakingConfiguration) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether this matchmaking configuration is being used with GameLift hosting or as a standalone matchmaking solution.
func (o MatchmakingConfigurationOutput) FlexMatchMode() pulumi.StringOutput {
	return o.ApplyT(func(v *MatchmakingConfiguration) pulumi.StringOutput { return v.FlexMatchMode }).(pulumi.StringOutput)
}

// One or more custom game properties. See below.
func (o MatchmakingConfigurationOutput) GameProperties() MatchmakingConfigurationGamePropertyArrayOutput {
	return o.ApplyT(func(v *MatchmakingConfiguration) MatchmakingConfigurationGamePropertyArrayOutput {
		return v.GameProperties
	}).(MatchmakingConfigurationGamePropertyArrayOutput)
}

// A set of custom game session properties.
func (o MatchmakingConfigurationOutput) GameSessionData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MatchmakingConfiguration) pulumi.StringPtrOutput { return v.GameSessionData }).(pulumi.StringPtrOutput)
}

// The ARNs of the GameLift game session queue resources.
func (o MatchmakingConfigurationOutput) GameSessionQueueArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MatchmakingConfiguration) pulumi.StringArrayOutput { return v.GameSessionQueueArns }).(pulumi.StringArrayOutput)
}

// Name of the matchmaking configuration
func (o MatchmakingConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MatchmakingConfiguration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// An SNS topic ARN that is set up to receive matchmaking notifications.
func (o MatchmakingConfigurationOutput) NotificationTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MatchmakingConfiguration) pulumi.StringPtrOutput { return v.NotificationTarget }).(pulumi.StringPtrOutput)
}

// The maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out.
func (o MatchmakingConfigurationOutput) RequestTimeoutSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *MatchmakingConfiguration) pulumi.IntOutput { return v.RequestTimeoutSeconds }).(pulumi.IntOutput)
}

func (o MatchmakingConfigurationOutput) RuleSetArn() pulumi.StringOutput {
	return o.ApplyT(func(v *MatchmakingConfiguration) pulumi.StringOutput { return v.RuleSetArn }).(pulumi.StringOutput)
}

// A rule set names for the matchmaking rule set to use with this configuration.
func (o MatchmakingConfigurationOutput) RuleSetName() pulumi.StringOutput {
	return o.ApplyT(func(v *MatchmakingConfiguration) pulumi.StringOutput { return v.RuleSetName }).(pulumi.StringOutput)
}

// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o MatchmakingConfigurationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MatchmakingConfiguration) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o MatchmakingConfigurationOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MatchmakingConfiguration) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type MatchmakingConfigurationArrayOutput struct{ *pulumi.OutputState }

func (MatchmakingConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MatchmakingConfiguration)(nil)).Elem()
}

func (o MatchmakingConfigurationArrayOutput) ToMatchmakingConfigurationArrayOutput() MatchmakingConfigurationArrayOutput {
	return o
}

func (o MatchmakingConfigurationArrayOutput) ToMatchmakingConfigurationArrayOutputWithContext(ctx context.Context) MatchmakingConfigurationArrayOutput {
	return o
}

func (o MatchmakingConfigurationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*MatchmakingConfiguration] {
	return pulumix.Output[[]*MatchmakingConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o MatchmakingConfigurationArrayOutput) Index(i pulumi.IntInput) MatchmakingConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MatchmakingConfiguration {
		return vs[0].([]*MatchmakingConfiguration)[vs[1].(int)]
	}).(MatchmakingConfigurationOutput)
}

type MatchmakingConfigurationMapOutput struct{ *pulumi.OutputState }

func (MatchmakingConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MatchmakingConfiguration)(nil)).Elem()
}

func (o MatchmakingConfigurationMapOutput) ToMatchmakingConfigurationMapOutput() MatchmakingConfigurationMapOutput {
	return o
}

func (o MatchmakingConfigurationMapOutput) ToMatchmakingConfigurationMapOutputWithContext(ctx context.Context) MatchmakingConfigurationMapOutput {
	return o
}

func (o MatchmakingConfigurationMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*MatchmakingConfiguration] {
	return pulumix.Output[map[string]*MatchmakingConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o MatchmakingConfigurationMapOutput) MapIndex(k pulumi.StringInput) MatchmakingConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MatchmakingConfiguration {
		return vs[0].(map[string]*MatchmakingConfiguration)[vs[1].(string)]
	}).(MatchmakingConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MatchmakingConfigurationInput)(nil)).Elem(), &MatchmakingConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*MatchmakingConfigurationArrayInput)(nil)).Elem(), MatchmakingConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MatchmakingConfigurationMapInput)(nil)).Elem(), MatchmakingConfigurationMap{})
	pulumi.RegisterOutputType(MatchmakingConfigurationOutput{})
	pulumi.RegisterOutputType(MatchmakingConfigurationArrayOutput{})
	pulumi.RegisterOutputType(MatchmakingConfigurationMapOutput{})
}
