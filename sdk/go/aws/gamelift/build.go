// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gamelift

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Build struct {
	pulumi.CustomResourceState

	Arn             pulumi.StringOutput        `pulumi:"arn"`
	Name            pulumi.StringOutput        `pulumi:"name"`
	OperatingSystem pulumi.StringOutput        `pulumi:"operatingSystem"`
	StorageLocation BuildStorageLocationOutput `pulumi:"storageLocation"`
	Tags            pulumi.StringMapOutput     `pulumi:"tags"`
	TagsAll         pulumi.StringMapOutput     `pulumi:"tagsAll"`
	Version         pulumi.StringPtrOutput     `pulumi:"version"`
}

// NewBuild registers a new resource with the given unique name, arguments, and options.
func NewBuild(ctx *pulumi.Context,
	name string, args *BuildArgs, opts ...pulumi.ResourceOption) (*Build, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OperatingSystem == nil {
		return nil, errors.New("invalid value for required argument 'OperatingSystem'")
	}
	if args.StorageLocation == nil {
		return nil, errors.New("invalid value for required argument 'StorageLocation'")
	}
	var resource Build
	err := ctx.RegisterResource("aws:gamelift/build:Build", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBuild gets an existing Build resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBuild(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BuildState, opts ...pulumi.ResourceOption) (*Build, error) {
	var resource Build
	err := ctx.ReadResource("aws:gamelift/build:Build", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Build resources.
type buildState struct {
	Arn             *string               `pulumi:"arn"`
	Name            *string               `pulumi:"name"`
	OperatingSystem *string               `pulumi:"operatingSystem"`
	StorageLocation *BuildStorageLocation `pulumi:"storageLocation"`
	Tags            map[string]string     `pulumi:"tags"`
	TagsAll         map[string]string     `pulumi:"tagsAll"`
	Version         *string               `pulumi:"version"`
}

type BuildState struct {
	Arn             pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	OperatingSystem pulumi.StringPtrInput
	StorageLocation BuildStorageLocationPtrInput
	Tags            pulumi.StringMapInput
	TagsAll         pulumi.StringMapInput
	Version         pulumi.StringPtrInput
}

func (BuildState) ElementType() reflect.Type {
	return reflect.TypeOf((*buildState)(nil)).Elem()
}

type buildArgs struct {
	Name            *string              `pulumi:"name"`
	OperatingSystem string               `pulumi:"operatingSystem"`
	StorageLocation BuildStorageLocation `pulumi:"storageLocation"`
	Tags            map[string]string    `pulumi:"tags"`
	Version         *string              `pulumi:"version"`
}

// The set of arguments for constructing a Build resource.
type BuildArgs struct {
	Name            pulumi.StringPtrInput
	OperatingSystem pulumi.StringInput
	StorageLocation BuildStorageLocationInput
	Tags            pulumi.StringMapInput
	Version         pulumi.StringPtrInput
}

func (BuildArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*buildArgs)(nil)).Elem()
}

type BuildInput interface {
	pulumi.Input

	ToBuildOutput() BuildOutput
	ToBuildOutputWithContext(ctx context.Context) BuildOutput
}

func (*Build) ElementType() reflect.Type {
	return reflect.TypeOf((**Build)(nil)).Elem()
}

func (i *Build) ToBuildOutput() BuildOutput {
	return i.ToBuildOutputWithContext(context.Background())
}

func (i *Build) ToBuildOutputWithContext(ctx context.Context) BuildOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildOutput)
}

// BuildArrayInput is an input type that accepts BuildArray and BuildArrayOutput values.
// You can construct a concrete instance of `BuildArrayInput` via:
//
//	BuildArray{ BuildArgs{...} }
type BuildArrayInput interface {
	pulumi.Input

	ToBuildArrayOutput() BuildArrayOutput
	ToBuildArrayOutputWithContext(context.Context) BuildArrayOutput
}

type BuildArray []BuildInput

func (BuildArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Build)(nil)).Elem()
}

func (i BuildArray) ToBuildArrayOutput() BuildArrayOutput {
	return i.ToBuildArrayOutputWithContext(context.Background())
}

func (i BuildArray) ToBuildArrayOutputWithContext(ctx context.Context) BuildArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildArrayOutput)
}

// BuildMapInput is an input type that accepts BuildMap and BuildMapOutput values.
// You can construct a concrete instance of `BuildMapInput` via:
//
//	BuildMap{ "key": BuildArgs{...} }
type BuildMapInput interface {
	pulumi.Input

	ToBuildMapOutput() BuildMapOutput
	ToBuildMapOutputWithContext(context.Context) BuildMapOutput
}

type BuildMap map[string]BuildInput

func (BuildMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Build)(nil)).Elem()
}

func (i BuildMap) ToBuildMapOutput() BuildMapOutput {
	return i.ToBuildMapOutputWithContext(context.Background())
}

func (i BuildMap) ToBuildMapOutputWithContext(ctx context.Context) BuildMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildMapOutput)
}

type BuildOutput struct{ *pulumi.OutputState }

func (BuildOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Build)(nil)).Elem()
}

func (o BuildOutput) ToBuildOutput() BuildOutput {
	return o
}

func (o BuildOutput) ToBuildOutputWithContext(ctx context.Context) BuildOutput {
	return o
}

func (o BuildOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o BuildOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o BuildOutput) OperatingSystem() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.OperatingSystem }).(pulumi.StringOutput)
}

func (o BuildOutput) StorageLocation() BuildStorageLocationOutput {
	return o.ApplyT(func(v *Build) BuildStorageLocationOutput { return v.StorageLocation }).(BuildStorageLocationOutput)
}

func (o BuildOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Build) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o BuildOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Build) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o BuildOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Build) pulumi.StringPtrOutput { return v.Version }).(pulumi.StringPtrOutput)
}

type BuildArrayOutput struct{ *pulumi.OutputState }

func (BuildArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Build)(nil)).Elem()
}

func (o BuildArrayOutput) ToBuildArrayOutput() BuildArrayOutput {
	return o
}

func (o BuildArrayOutput) ToBuildArrayOutputWithContext(ctx context.Context) BuildArrayOutput {
	return o
}

func (o BuildArrayOutput) Index(i pulumi.IntInput) BuildOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Build {
		return vs[0].([]*Build)[vs[1].(int)]
	}).(BuildOutput)
}

type BuildMapOutput struct{ *pulumi.OutputState }

func (BuildMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Build)(nil)).Elem()
}

func (o BuildMapOutput) ToBuildMapOutput() BuildMapOutput {
	return o
}

func (o BuildMapOutput) ToBuildMapOutputWithContext(ctx context.Context) BuildMapOutput {
	return o
}

func (o BuildMapOutput) MapIndex(k pulumi.StringInput) BuildOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Build {
		return vs[0].(map[string]*Build)[vs[1].(string)]
	}).(BuildOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BuildInput)(nil)).Elem(), &Build{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildArrayInput)(nil)).Elem(), BuildArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildMapInput)(nil)).Elem(), BuildMap{})
	pulumi.RegisterOutputType(BuildOutput{})
	pulumi.RegisterOutputType(BuildArrayOutput{})
	pulumi.RegisterOutputType(BuildMapOutput{})
}
