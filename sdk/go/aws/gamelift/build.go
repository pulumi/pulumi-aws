// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gamelift

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an GameLift Build resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/gamelift"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := gamelift.NewBuild(ctx, "test", &gamelift.BuildArgs{
//				OperatingSystem: pulumi.String("WINDOWS_2012"),
//				StorageLocation: &gamelift.BuildStorageLocationArgs{
//					Bucket:  pulumi.Any(aws_s3_bucket.Test.Id),
//					Key:     pulumi.Any(aws_s3_object.Test.Key),
//					RoleArn: pulumi.Any(aws_iam_role.Test.Arn),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import GameLift Builds using the ID. For example:
//
// ```sh
//
//	$ pulumi import aws:gamelift/build:Build example <build-id>
//
// ```
type Build struct {
	pulumi.CustomResourceState

	// GameLift Build ARN.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Name of the build
	Name pulumi.StringOutput `pulumi:"name"`
	// Operating system that the game server binaries are built to run on. Valid values: `WINDOWS_2012`, `AMAZON_LINUX`, `AMAZON_LINUX_2`, `WINDOWS_2016`, `AMAZON_LINUX_2023`.
	OperatingSystem pulumi.StringOutput `pulumi:"operatingSystem"`
	// Information indicating where your game build files are stored. See below.
	StorageLocation BuildStorageLocationOutput `pulumi:"storageLocation"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// Version that is associated with this build.
	Version pulumi.StringPtrOutput `pulumi:"version"`
}

// NewBuild registers a new resource with the given unique name, arguments, and options.
func NewBuild(ctx *pulumi.Context,
	name string, args *BuildArgs, opts ...pulumi.ResourceOption) (*Build, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OperatingSystem == nil {
		return nil, errors.New("invalid value for required argument 'OperatingSystem'")
	}
	if args.StorageLocation == nil {
		return nil, errors.New("invalid value for required argument 'StorageLocation'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"tagsAll",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Build
	err := ctx.RegisterResource("aws:gamelift/build:Build", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBuild gets an existing Build resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBuild(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BuildState, opts ...pulumi.ResourceOption) (*Build, error) {
	var resource Build
	err := ctx.ReadResource("aws:gamelift/build:Build", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Build resources.
type buildState struct {
	// GameLift Build ARN.
	Arn *string `pulumi:"arn"`
	// Name of the build
	Name *string `pulumi:"name"`
	// Operating system that the game server binaries are built to run on. Valid values: `WINDOWS_2012`, `AMAZON_LINUX`, `AMAZON_LINUX_2`, `WINDOWS_2016`, `AMAZON_LINUX_2023`.
	OperatingSystem *string `pulumi:"operatingSystem"`
	// Information indicating where your game build files are stored. See below.
	StorageLocation *BuildStorageLocation `pulumi:"storageLocation"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Version that is associated with this build.
	Version *string `pulumi:"version"`
}

type BuildState struct {
	// GameLift Build ARN.
	Arn pulumi.StringPtrInput
	// Name of the build
	Name pulumi.StringPtrInput
	// Operating system that the game server binaries are built to run on. Valid values: `WINDOWS_2012`, `AMAZON_LINUX`, `AMAZON_LINUX_2`, `WINDOWS_2016`, `AMAZON_LINUX_2023`.
	OperatingSystem pulumi.StringPtrInput
	// Information indicating where your game build files are stored. See below.
	StorageLocation BuildStorageLocationPtrInput
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
	// Version that is associated with this build.
	Version pulumi.StringPtrInput
}

func (BuildState) ElementType() reflect.Type {
	return reflect.TypeOf((*buildState)(nil)).Elem()
}

type buildArgs struct {
	// Name of the build
	Name *string `pulumi:"name"`
	// Operating system that the game server binaries are built to run on. Valid values: `WINDOWS_2012`, `AMAZON_LINUX`, `AMAZON_LINUX_2`, `WINDOWS_2016`, `AMAZON_LINUX_2023`.
	OperatingSystem string `pulumi:"operatingSystem"`
	// Information indicating where your game build files are stored. See below.
	StorageLocation BuildStorageLocation `pulumi:"storageLocation"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Version that is associated with this build.
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a Build resource.
type BuildArgs struct {
	// Name of the build
	Name pulumi.StringPtrInput
	// Operating system that the game server binaries are built to run on. Valid values: `WINDOWS_2012`, `AMAZON_LINUX`, `AMAZON_LINUX_2`, `WINDOWS_2016`, `AMAZON_LINUX_2023`.
	OperatingSystem pulumi.StringInput
	// Information indicating where your game build files are stored. See below.
	StorageLocation BuildStorageLocationInput
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Version that is associated with this build.
	Version pulumi.StringPtrInput
}

func (BuildArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*buildArgs)(nil)).Elem()
}

type BuildInput interface {
	pulumi.Input

	ToBuildOutput() BuildOutput
	ToBuildOutputWithContext(ctx context.Context) BuildOutput
}

func (*Build) ElementType() reflect.Type {
	return reflect.TypeOf((**Build)(nil)).Elem()
}

func (i *Build) ToBuildOutput() BuildOutput {
	return i.ToBuildOutputWithContext(context.Background())
}

func (i *Build) ToBuildOutputWithContext(ctx context.Context) BuildOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildOutput)
}

// BuildArrayInput is an input type that accepts BuildArray and BuildArrayOutput values.
// You can construct a concrete instance of `BuildArrayInput` via:
//
//	BuildArray{ BuildArgs{...} }
type BuildArrayInput interface {
	pulumi.Input

	ToBuildArrayOutput() BuildArrayOutput
	ToBuildArrayOutputWithContext(context.Context) BuildArrayOutput
}

type BuildArray []BuildInput

func (BuildArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Build)(nil)).Elem()
}

func (i BuildArray) ToBuildArrayOutput() BuildArrayOutput {
	return i.ToBuildArrayOutputWithContext(context.Background())
}

func (i BuildArray) ToBuildArrayOutputWithContext(ctx context.Context) BuildArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildArrayOutput)
}

// BuildMapInput is an input type that accepts BuildMap and BuildMapOutput values.
// You can construct a concrete instance of `BuildMapInput` via:
//
//	BuildMap{ "key": BuildArgs{...} }
type BuildMapInput interface {
	pulumi.Input

	ToBuildMapOutput() BuildMapOutput
	ToBuildMapOutputWithContext(context.Context) BuildMapOutput
}

type BuildMap map[string]BuildInput

func (BuildMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Build)(nil)).Elem()
}

func (i BuildMap) ToBuildMapOutput() BuildMapOutput {
	return i.ToBuildMapOutputWithContext(context.Background())
}

func (i BuildMap) ToBuildMapOutputWithContext(ctx context.Context) BuildMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildMapOutput)
}

type BuildOutput struct{ *pulumi.OutputState }

func (BuildOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Build)(nil)).Elem()
}

func (o BuildOutput) ToBuildOutput() BuildOutput {
	return o
}

func (o BuildOutput) ToBuildOutputWithContext(ctx context.Context) BuildOutput {
	return o
}

// GameLift Build ARN.
func (o BuildOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Name of the build
func (o BuildOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Operating system that the game server binaries are built to run on. Valid values: `WINDOWS_2012`, `AMAZON_LINUX`, `AMAZON_LINUX_2`, `WINDOWS_2016`, `AMAZON_LINUX_2023`.
func (o BuildOutput) OperatingSystem() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.OperatingSystem }).(pulumi.StringOutput)
}

// Information indicating where your game build files are stored. See below.
func (o BuildOutput) StorageLocation() BuildStorageLocationOutput {
	return o.ApplyT(func(v *Build) BuildStorageLocationOutput { return v.StorageLocation }).(BuildStorageLocationOutput)
}

// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o BuildOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Build) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o BuildOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Build) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// Version that is associated with this build.
func (o BuildOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Build) pulumi.StringPtrOutput { return v.Version }).(pulumi.StringPtrOutput)
}

type BuildArrayOutput struct{ *pulumi.OutputState }

func (BuildArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Build)(nil)).Elem()
}

func (o BuildArrayOutput) ToBuildArrayOutput() BuildArrayOutput {
	return o
}

func (o BuildArrayOutput) ToBuildArrayOutputWithContext(ctx context.Context) BuildArrayOutput {
	return o
}

func (o BuildArrayOutput) Index(i pulumi.IntInput) BuildOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Build {
		return vs[0].([]*Build)[vs[1].(int)]
	}).(BuildOutput)
}

type BuildMapOutput struct{ *pulumi.OutputState }

func (BuildMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Build)(nil)).Elem()
}

func (o BuildMapOutput) ToBuildMapOutput() BuildMapOutput {
	return o
}

func (o BuildMapOutput) ToBuildMapOutputWithContext(ctx context.Context) BuildMapOutput {
	return o
}

func (o BuildMapOutput) MapIndex(k pulumi.StringInput) BuildOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Build {
		return vs[0].(map[string]*Build)[vs[1].(string)]
	}).(BuildOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BuildInput)(nil)).Elem(), &Build{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildArrayInput)(nil)).Elem(), BuildArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildMapInput)(nil)).Elem(), BuildMap{})
	pulumi.RegisterOutputType(BuildOutput{})
	pulumi.RegisterOutputType(BuildArrayOutput{})
	pulumi.RegisterOutputType(BuildMapOutput{})
}
