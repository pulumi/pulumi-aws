// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gamelift

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GameSessionQueue struct {
	pulumi.CustomResourceState

	Arn                   pulumi.StringOutput                            `pulumi:"arn"`
	Destinations          pulumi.StringArrayOutput                       `pulumi:"destinations"`
	Name                  pulumi.StringOutput                            `pulumi:"name"`
	NotificationTarget    pulumi.StringPtrOutput                         `pulumi:"notificationTarget"`
	PlayerLatencyPolicies GameSessionQueuePlayerLatencyPolicyArrayOutput `pulumi:"playerLatencyPolicies"`
	Tags                  pulumi.StringMapOutput                         `pulumi:"tags"`
	TagsAll               pulumi.StringMapOutput                         `pulumi:"tagsAll"`
	TimeoutInSeconds      pulumi.IntPtrOutput                            `pulumi:"timeoutInSeconds"`
}

// NewGameSessionQueue registers a new resource with the given unique name, arguments, and options.
func NewGameSessionQueue(ctx *pulumi.Context,
	name string, args *GameSessionQueueArgs, opts ...pulumi.ResourceOption) (*GameSessionQueue, error) {
	if args == nil {
		args = &GameSessionQueueArgs{}
	}

	var resource GameSessionQueue
	err := ctx.RegisterResource("aws:gamelift/gameSessionQueue:GameSessionQueue", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGameSessionQueue gets an existing GameSessionQueue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGameSessionQueue(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GameSessionQueueState, opts ...pulumi.ResourceOption) (*GameSessionQueue, error) {
	var resource GameSessionQueue
	err := ctx.ReadResource("aws:gamelift/gameSessionQueue:GameSessionQueue", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GameSessionQueue resources.
type gameSessionQueueState struct {
	Arn                   *string                               `pulumi:"arn"`
	Destinations          []string                              `pulumi:"destinations"`
	Name                  *string                               `pulumi:"name"`
	NotificationTarget    *string                               `pulumi:"notificationTarget"`
	PlayerLatencyPolicies []GameSessionQueuePlayerLatencyPolicy `pulumi:"playerLatencyPolicies"`
	Tags                  map[string]string                     `pulumi:"tags"`
	TagsAll               map[string]string                     `pulumi:"tagsAll"`
	TimeoutInSeconds      *int                                  `pulumi:"timeoutInSeconds"`
}

type GameSessionQueueState struct {
	Arn                   pulumi.StringPtrInput
	Destinations          pulumi.StringArrayInput
	Name                  pulumi.StringPtrInput
	NotificationTarget    pulumi.StringPtrInput
	PlayerLatencyPolicies GameSessionQueuePlayerLatencyPolicyArrayInput
	Tags                  pulumi.StringMapInput
	TagsAll               pulumi.StringMapInput
	TimeoutInSeconds      pulumi.IntPtrInput
}

func (GameSessionQueueState) ElementType() reflect.Type {
	return reflect.TypeOf((*gameSessionQueueState)(nil)).Elem()
}

type gameSessionQueueArgs struct {
	Destinations          []string                              `pulumi:"destinations"`
	Name                  *string                               `pulumi:"name"`
	NotificationTarget    *string                               `pulumi:"notificationTarget"`
	PlayerLatencyPolicies []GameSessionQueuePlayerLatencyPolicy `pulumi:"playerLatencyPolicies"`
	Tags                  map[string]string                     `pulumi:"tags"`
	TimeoutInSeconds      *int                                  `pulumi:"timeoutInSeconds"`
}

// The set of arguments for constructing a GameSessionQueue resource.
type GameSessionQueueArgs struct {
	Destinations          pulumi.StringArrayInput
	Name                  pulumi.StringPtrInput
	NotificationTarget    pulumi.StringPtrInput
	PlayerLatencyPolicies GameSessionQueuePlayerLatencyPolicyArrayInput
	Tags                  pulumi.StringMapInput
	TimeoutInSeconds      pulumi.IntPtrInput
}

func (GameSessionQueueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gameSessionQueueArgs)(nil)).Elem()
}

type GameSessionQueueInput interface {
	pulumi.Input

	ToGameSessionQueueOutput() GameSessionQueueOutput
	ToGameSessionQueueOutputWithContext(ctx context.Context) GameSessionQueueOutput
}

func (*GameSessionQueue) ElementType() reflect.Type {
	return reflect.TypeOf((**GameSessionQueue)(nil)).Elem()
}

func (i *GameSessionQueue) ToGameSessionQueueOutput() GameSessionQueueOutput {
	return i.ToGameSessionQueueOutputWithContext(context.Background())
}

func (i *GameSessionQueue) ToGameSessionQueueOutputWithContext(ctx context.Context) GameSessionQueueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GameSessionQueueOutput)
}

// GameSessionQueueArrayInput is an input type that accepts GameSessionQueueArray and GameSessionQueueArrayOutput values.
// You can construct a concrete instance of `GameSessionQueueArrayInput` via:
//
//	GameSessionQueueArray{ GameSessionQueueArgs{...} }
type GameSessionQueueArrayInput interface {
	pulumi.Input

	ToGameSessionQueueArrayOutput() GameSessionQueueArrayOutput
	ToGameSessionQueueArrayOutputWithContext(context.Context) GameSessionQueueArrayOutput
}

type GameSessionQueueArray []GameSessionQueueInput

func (GameSessionQueueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GameSessionQueue)(nil)).Elem()
}

func (i GameSessionQueueArray) ToGameSessionQueueArrayOutput() GameSessionQueueArrayOutput {
	return i.ToGameSessionQueueArrayOutputWithContext(context.Background())
}

func (i GameSessionQueueArray) ToGameSessionQueueArrayOutputWithContext(ctx context.Context) GameSessionQueueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GameSessionQueueArrayOutput)
}

// GameSessionQueueMapInput is an input type that accepts GameSessionQueueMap and GameSessionQueueMapOutput values.
// You can construct a concrete instance of `GameSessionQueueMapInput` via:
//
//	GameSessionQueueMap{ "key": GameSessionQueueArgs{...} }
type GameSessionQueueMapInput interface {
	pulumi.Input

	ToGameSessionQueueMapOutput() GameSessionQueueMapOutput
	ToGameSessionQueueMapOutputWithContext(context.Context) GameSessionQueueMapOutput
}

type GameSessionQueueMap map[string]GameSessionQueueInput

func (GameSessionQueueMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GameSessionQueue)(nil)).Elem()
}

func (i GameSessionQueueMap) ToGameSessionQueueMapOutput() GameSessionQueueMapOutput {
	return i.ToGameSessionQueueMapOutputWithContext(context.Background())
}

func (i GameSessionQueueMap) ToGameSessionQueueMapOutputWithContext(ctx context.Context) GameSessionQueueMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GameSessionQueueMapOutput)
}

type GameSessionQueueOutput struct{ *pulumi.OutputState }

func (GameSessionQueueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GameSessionQueue)(nil)).Elem()
}

func (o GameSessionQueueOutput) ToGameSessionQueueOutput() GameSessionQueueOutput {
	return o
}

func (o GameSessionQueueOutput) ToGameSessionQueueOutputWithContext(ctx context.Context) GameSessionQueueOutput {
	return o
}

func (o GameSessionQueueOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *GameSessionQueue) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o GameSessionQueueOutput) Destinations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GameSessionQueue) pulumi.StringArrayOutput { return v.Destinations }).(pulumi.StringArrayOutput)
}

func (o GameSessionQueueOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GameSessionQueue) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o GameSessionQueueOutput) NotificationTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GameSessionQueue) pulumi.StringPtrOutput { return v.NotificationTarget }).(pulumi.StringPtrOutput)
}

func (o GameSessionQueueOutput) PlayerLatencyPolicies() GameSessionQueuePlayerLatencyPolicyArrayOutput {
	return o.ApplyT(func(v *GameSessionQueue) GameSessionQueuePlayerLatencyPolicyArrayOutput {
		return v.PlayerLatencyPolicies
	}).(GameSessionQueuePlayerLatencyPolicyArrayOutput)
}

func (o GameSessionQueueOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GameSessionQueue) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o GameSessionQueueOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GameSessionQueue) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o GameSessionQueueOutput) TimeoutInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GameSessionQueue) pulumi.IntPtrOutput { return v.TimeoutInSeconds }).(pulumi.IntPtrOutput)
}

type GameSessionQueueArrayOutput struct{ *pulumi.OutputState }

func (GameSessionQueueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GameSessionQueue)(nil)).Elem()
}

func (o GameSessionQueueArrayOutput) ToGameSessionQueueArrayOutput() GameSessionQueueArrayOutput {
	return o
}

func (o GameSessionQueueArrayOutput) ToGameSessionQueueArrayOutputWithContext(ctx context.Context) GameSessionQueueArrayOutput {
	return o
}

func (o GameSessionQueueArrayOutput) Index(i pulumi.IntInput) GameSessionQueueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GameSessionQueue {
		return vs[0].([]*GameSessionQueue)[vs[1].(int)]
	}).(GameSessionQueueOutput)
}

type GameSessionQueueMapOutput struct{ *pulumi.OutputState }

func (GameSessionQueueMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GameSessionQueue)(nil)).Elem()
}

func (o GameSessionQueueMapOutput) ToGameSessionQueueMapOutput() GameSessionQueueMapOutput {
	return o
}

func (o GameSessionQueueMapOutput) ToGameSessionQueueMapOutputWithContext(ctx context.Context) GameSessionQueueMapOutput {
	return o
}

func (o GameSessionQueueMapOutput) MapIndex(k pulumi.StringInput) GameSessionQueueOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GameSessionQueue {
		return vs[0].(map[string]*GameSessionQueue)[vs[1].(string)]
	}).(GameSessionQueueOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GameSessionQueueInput)(nil)).Elem(), &GameSessionQueue{})
	pulumi.RegisterInputType(reflect.TypeOf((*GameSessionQueueArrayInput)(nil)).Elem(), GameSessionQueueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GameSessionQueueMapInput)(nil)).Elem(), GameSessionQueueMap{})
	pulumi.RegisterOutputType(GameSessionQueueOutput{})
	pulumi.RegisterOutputType(GameSessionQueueArrayOutput{})
	pulumi.RegisterOutputType(GameSessionQueueMapOutput{})
}
