// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gamelift

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GameServerGroup struct {
	pulumi.CustomResourceState

	Arn                        pulumi.StringOutput                          `pulumi:"arn"`
	AutoScalingGroupArn        pulumi.StringOutput                          `pulumi:"autoScalingGroupArn"`
	AutoScalingPolicy          GameServerGroupAutoScalingPolicyPtrOutput    `pulumi:"autoScalingPolicy"`
	BalancingStrategy          pulumi.StringOutput                          `pulumi:"balancingStrategy"`
	GameServerGroupName        pulumi.StringOutput                          `pulumi:"gameServerGroupName"`
	GameServerProtectionPolicy pulumi.StringOutput                          `pulumi:"gameServerProtectionPolicy"`
	InstanceDefinitions        GameServerGroupInstanceDefinitionArrayOutput `pulumi:"instanceDefinitions"`
	LaunchTemplate             GameServerGroupLaunchTemplateOutput          `pulumi:"launchTemplate"`
	MaxSize                    pulumi.IntOutput                             `pulumi:"maxSize"`
	MinSize                    pulumi.IntOutput                             `pulumi:"minSize"`
	RoleArn                    pulumi.StringOutput                          `pulumi:"roleArn"`
	Tags                       pulumi.StringMapOutput                       `pulumi:"tags"`
	TagsAll                    pulumi.StringMapOutput                       `pulumi:"tagsAll"`
	VpcSubnets                 pulumi.StringArrayOutput                     `pulumi:"vpcSubnets"`
}

// NewGameServerGroup registers a new resource with the given unique name, arguments, and options.
func NewGameServerGroup(ctx *pulumi.Context,
	name string, args *GameServerGroupArgs, opts ...pulumi.ResourceOption) (*GameServerGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GameServerGroupName == nil {
		return nil, errors.New("invalid value for required argument 'GameServerGroupName'")
	}
	if args.InstanceDefinitions == nil {
		return nil, errors.New("invalid value for required argument 'InstanceDefinitions'")
	}
	if args.LaunchTemplate == nil {
		return nil, errors.New("invalid value for required argument 'LaunchTemplate'")
	}
	if args.MaxSize == nil {
		return nil, errors.New("invalid value for required argument 'MaxSize'")
	}
	if args.MinSize == nil {
		return nil, errors.New("invalid value for required argument 'MinSize'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	var resource GameServerGroup
	err := ctx.RegisterResource("aws:gamelift/gameServerGroup:GameServerGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGameServerGroup gets an existing GameServerGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGameServerGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GameServerGroupState, opts ...pulumi.ResourceOption) (*GameServerGroup, error) {
	var resource GameServerGroup
	err := ctx.ReadResource("aws:gamelift/gameServerGroup:GameServerGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GameServerGroup resources.
type gameServerGroupState struct {
	Arn                        *string                             `pulumi:"arn"`
	AutoScalingGroupArn        *string                             `pulumi:"autoScalingGroupArn"`
	AutoScalingPolicy          *GameServerGroupAutoScalingPolicy   `pulumi:"autoScalingPolicy"`
	BalancingStrategy          *string                             `pulumi:"balancingStrategy"`
	GameServerGroupName        *string                             `pulumi:"gameServerGroupName"`
	GameServerProtectionPolicy *string                             `pulumi:"gameServerProtectionPolicy"`
	InstanceDefinitions        []GameServerGroupInstanceDefinition `pulumi:"instanceDefinitions"`
	LaunchTemplate             *GameServerGroupLaunchTemplate      `pulumi:"launchTemplate"`
	MaxSize                    *int                                `pulumi:"maxSize"`
	MinSize                    *int                                `pulumi:"minSize"`
	RoleArn                    *string                             `pulumi:"roleArn"`
	Tags                       map[string]string                   `pulumi:"tags"`
	TagsAll                    map[string]string                   `pulumi:"tagsAll"`
	VpcSubnets                 []string                            `pulumi:"vpcSubnets"`
}

type GameServerGroupState struct {
	Arn                        pulumi.StringPtrInput
	AutoScalingGroupArn        pulumi.StringPtrInput
	AutoScalingPolicy          GameServerGroupAutoScalingPolicyPtrInput
	BalancingStrategy          pulumi.StringPtrInput
	GameServerGroupName        pulumi.StringPtrInput
	GameServerProtectionPolicy pulumi.StringPtrInput
	InstanceDefinitions        GameServerGroupInstanceDefinitionArrayInput
	LaunchTemplate             GameServerGroupLaunchTemplatePtrInput
	MaxSize                    pulumi.IntPtrInput
	MinSize                    pulumi.IntPtrInput
	RoleArn                    pulumi.StringPtrInput
	Tags                       pulumi.StringMapInput
	TagsAll                    pulumi.StringMapInput
	VpcSubnets                 pulumi.StringArrayInput
}

func (GameServerGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*gameServerGroupState)(nil)).Elem()
}

type gameServerGroupArgs struct {
	AutoScalingPolicy          *GameServerGroupAutoScalingPolicy   `pulumi:"autoScalingPolicy"`
	BalancingStrategy          *string                             `pulumi:"balancingStrategy"`
	GameServerGroupName        string                              `pulumi:"gameServerGroupName"`
	GameServerProtectionPolicy *string                             `pulumi:"gameServerProtectionPolicy"`
	InstanceDefinitions        []GameServerGroupInstanceDefinition `pulumi:"instanceDefinitions"`
	LaunchTemplate             GameServerGroupLaunchTemplate       `pulumi:"launchTemplate"`
	MaxSize                    int                                 `pulumi:"maxSize"`
	MinSize                    int                                 `pulumi:"minSize"`
	RoleArn                    string                              `pulumi:"roleArn"`
	Tags                       map[string]string                   `pulumi:"tags"`
	VpcSubnets                 []string                            `pulumi:"vpcSubnets"`
}

// The set of arguments for constructing a GameServerGroup resource.
type GameServerGroupArgs struct {
	AutoScalingPolicy          GameServerGroupAutoScalingPolicyPtrInput
	BalancingStrategy          pulumi.StringPtrInput
	GameServerGroupName        pulumi.StringInput
	GameServerProtectionPolicy pulumi.StringPtrInput
	InstanceDefinitions        GameServerGroupInstanceDefinitionArrayInput
	LaunchTemplate             GameServerGroupLaunchTemplateInput
	MaxSize                    pulumi.IntInput
	MinSize                    pulumi.IntInput
	RoleArn                    pulumi.StringInput
	Tags                       pulumi.StringMapInput
	VpcSubnets                 pulumi.StringArrayInput
}

func (GameServerGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gameServerGroupArgs)(nil)).Elem()
}

type GameServerGroupInput interface {
	pulumi.Input

	ToGameServerGroupOutput() GameServerGroupOutput
	ToGameServerGroupOutputWithContext(ctx context.Context) GameServerGroupOutput
}

func (*GameServerGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**GameServerGroup)(nil)).Elem()
}

func (i *GameServerGroup) ToGameServerGroupOutput() GameServerGroupOutput {
	return i.ToGameServerGroupOutputWithContext(context.Background())
}

func (i *GameServerGroup) ToGameServerGroupOutputWithContext(ctx context.Context) GameServerGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GameServerGroupOutput)
}

// GameServerGroupArrayInput is an input type that accepts GameServerGroupArray and GameServerGroupArrayOutput values.
// You can construct a concrete instance of `GameServerGroupArrayInput` via:
//
//	GameServerGroupArray{ GameServerGroupArgs{...} }
type GameServerGroupArrayInput interface {
	pulumi.Input

	ToGameServerGroupArrayOutput() GameServerGroupArrayOutput
	ToGameServerGroupArrayOutputWithContext(context.Context) GameServerGroupArrayOutput
}

type GameServerGroupArray []GameServerGroupInput

func (GameServerGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GameServerGroup)(nil)).Elem()
}

func (i GameServerGroupArray) ToGameServerGroupArrayOutput() GameServerGroupArrayOutput {
	return i.ToGameServerGroupArrayOutputWithContext(context.Background())
}

func (i GameServerGroupArray) ToGameServerGroupArrayOutputWithContext(ctx context.Context) GameServerGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GameServerGroupArrayOutput)
}

// GameServerGroupMapInput is an input type that accepts GameServerGroupMap and GameServerGroupMapOutput values.
// You can construct a concrete instance of `GameServerGroupMapInput` via:
//
//	GameServerGroupMap{ "key": GameServerGroupArgs{...} }
type GameServerGroupMapInput interface {
	pulumi.Input

	ToGameServerGroupMapOutput() GameServerGroupMapOutput
	ToGameServerGroupMapOutputWithContext(context.Context) GameServerGroupMapOutput
}

type GameServerGroupMap map[string]GameServerGroupInput

func (GameServerGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GameServerGroup)(nil)).Elem()
}

func (i GameServerGroupMap) ToGameServerGroupMapOutput() GameServerGroupMapOutput {
	return i.ToGameServerGroupMapOutputWithContext(context.Background())
}

func (i GameServerGroupMap) ToGameServerGroupMapOutputWithContext(ctx context.Context) GameServerGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GameServerGroupMapOutput)
}

type GameServerGroupOutput struct{ *pulumi.OutputState }

func (GameServerGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GameServerGroup)(nil)).Elem()
}

func (o GameServerGroupOutput) ToGameServerGroupOutput() GameServerGroupOutput {
	return o
}

func (o GameServerGroupOutput) ToGameServerGroupOutputWithContext(ctx context.Context) GameServerGroupOutput {
	return o
}

func (o GameServerGroupOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *GameServerGroup) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o GameServerGroupOutput) AutoScalingGroupArn() pulumi.StringOutput {
	return o.ApplyT(func(v *GameServerGroup) pulumi.StringOutput { return v.AutoScalingGroupArn }).(pulumi.StringOutput)
}

func (o GameServerGroupOutput) AutoScalingPolicy() GameServerGroupAutoScalingPolicyPtrOutput {
	return o.ApplyT(func(v *GameServerGroup) GameServerGroupAutoScalingPolicyPtrOutput { return v.AutoScalingPolicy }).(GameServerGroupAutoScalingPolicyPtrOutput)
}

func (o GameServerGroupOutput) BalancingStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v *GameServerGroup) pulumi.StringOutput { return v.BalancingStrategy }).(pulumi.StringOutput)
}

func (o GameServerGroupOutput) GameServerGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *GameServerGroup) pulumi.StringOutput { return v.GameServerGroupName }).(pulumi.StringOutput)
}

func (o GameServerGroupOutput) GameServerProtectionPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *GameServerGroup) pulumi.StringOutput { return v.GameServerProtectionPolicy }).(pulumi.StringOutput)
}

func (o GameServerGroupOutput) InstanceDefinitions() GameServerGroupInstanceDefinitionArrayOutput {
	return o.ApplyT(func(v *GameServerGroup) GameServerGroupInstanceDefinitionArrayOutput { return v.InstanceDefinitions }).(GameServerGroupInstanceDefinitionArrayOutput)
}

func (o GameServerGroupOutput) LaunchTemplate() GameServerGroupLaunchTemplateOutput {
	return o.ApplyT(func(v *GameServerGroup) GameServerGroupLaunchTemplateOutput { return v.LaunchTemplate }).(GameServerGroupLaunchTemplateOutput)
}

func (o GameServerGroupOutput) MaxSize() pulumi.IntOutput {
	return o.ApplyT(func(v *GameServerGroup) pulumi.IntOutput { return v.MaxSize }).(pulumi.IntOutput)
}

func (o GameServerGroupOutput) MinSize() pulumi.IntOutput {
	return o.ApplyT(func(v *GameServerGroup) pulumi.IntOutput { return v.MinSize }).(pulumi.IntOutput)
}

func (o GameServerGroupOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *GameServerGroup) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

func (o GameServerGroupOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GameServerGroup) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o GameServerGroupOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GameServerGroup) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o GameServerGroupOutput) VpcSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GameServerGroup) pulumi.StringArrayOutput { return v.VpcSubnets }).(pulumi.StringArrayOutput)
}

type GameServerGroupArrayOutput struct{ *pulumi.OutputState }

func (GameServerGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GameServerGroup)(nil)).Elem()
}

func (o GameServerGroupArrayOutput) ToGameServerGroupArrayOutput() GameServerGroupArrayOutput {
	return o
}

func (o GameServerGroupArrayOutput) ToGameServerGroupArrayOutputWithContext(ctx context.Context) GameServerGroupArrayOutput {
	return o
}

func (o GameServerGroupArrayOutput) Index(i pulumi.IntInput) GameServerGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GameServerGroup {
		return vs[0].([]*GameServerGroup)[vs[1].(int)]
	}).(GameServerGroupOutput)
}

type GameServerGroupMapOutput struct{ *pulumi.OutputState }

func (GameServerGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GameServerGroup)(nil)).Elem()
}

func (o GameServerGroupMapOutput) ToGameServerGroupMapOutput() GameServerGroupMapOutput {
	return o
}

func (o GameServerGroupMapOutput) ToGameServerGroupMapOutputWithContext(ctx context.Context) GameServerGroupMapOutput {
	return o
}

func (o GameServerGroupMapOutput) MapIndex(k pulumi.StringInput) GameServerGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GameServerGroup {
		return vs[0].(map[string]*GameServerGroup)[vs[1].(string)]
	}).(GameServerGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GameServerGroupInput)(nil)).Elem(), &GameServerGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*GameServerGroupArrayInput)(nil)).Elem(), GameServerGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GameServerGroupMapInput)(nil)).Elem(), GameServerGroupMap{})
	pulumi.RegisterOutputType(GameServerGroupOutput{})
	pulumi.RegisterOutputType(GameServerGroupArrayOutput{})
	pulumi.RegisterOutputType(GameServerGroupMapOutput{})
}
