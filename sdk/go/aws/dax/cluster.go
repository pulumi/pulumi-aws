// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package dax

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a DAX Cluster resource.
type Cluster struct {
	s *pulumi.ResourceState
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOpt) (*Cluster, error) {
	if args == nil || args.ClusterName == nil {
		return nil, errors.New("missing required argument 'ClusterName'")
	}
	if args == nil || args.IamRoleArn == nil {
		return nil, errors.New("missing required argument 'IamRoleArn'")
	}
	if args == nil || args.NodeType == nil {
		return nil, errors.New("missing required argument 'NodeType'")
	}
	if args == nil || args.ReplicationFactor == nil {
		return nil, errors.New("missing required argument 'ReplicationFactor'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["availabilityZones"] = nil
		inputs["clusterName"] = nil
		inputs["description"] = nil
		inputs["iamRoleArn"] = nil
		inputs["maintenanceWindow"] = nil
		inputs["nodeType"] = nil
		inputs["notificationTopicArn"] = nil
		inputs["parameterGroupName"] = nil
		inputs["replicationFactor"] = nil
		inputs["securityGroupIds"] = nil
		inputs["serverSideEncryption"] = nil
		inputs["subnetGroupName"] = nil
		inputs["tags"] = nil
	} else {
		inputs["availabilityZones"] = args.AvailabilityZones
		inputs["clusterName"] = args.ClusterName
		inputs["description"] = args.Description
		inputs["iamRoleArn"] = args.IamRoleArn
		inputs["maintenanceWindow"] = args.MaintenanceWindow
		inputs["nodeType"] = args.NodeType
		inputs["notificationTopicArn"] = args.NotificationTopicArn
		inputs["parameterGroupName"] = args.ParameterGroupName
		inputs["replicationFactor"] = args.ReplicationFactor
		inputs["securityGroupIds"] = args.SecurityGroupIds
		inputs["serverSideEncryption"] = args.ServerSideEncryption
		inputs["subnetGroupName"] = args.SubnetGroupName
		inputs["tags"] = args.Tags
	}
	inputs["arn"] = nil
	inputs["clusterAddress"] = nil
	inputs["configurationEndpoint"] = nil
	inputs["nodes"] = nil
	inputs["port"] = nil
	s, err := ctx.RegisterResource("aws:dax/cluster:Cluster", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Cluster{s: s}, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ClusterState, opts ...pulumi.ResourceOpt) (*Cluster, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["availabilityZones"] = state.AvailabilityZones
		inputs["clusterAddress"] = state.ClusterAddress
		inputs["clusterName"] = state.ClusterName
		inputs["configurationEndpoint"] = state.ConfigurationEndpoint
		inputs["description"] = state.Description
		inputs["iamRoleArn"] = state.IamRoleArn
		inputs["maintenanceWindow"] = state.MaintenanceWindow
		inputs["nodeType"] = state.NodeType
		inputs["nodes"] = state.Nodes
		inputs["notificationTopicArn"] = state.NotificationTopicArn
		inputs["parameterGroupName"] = state.ParameterGroupName
		inputs["port"] = state.Port
		inputs["replicationFactor"] = state.ReplicationFactor
		inputs["securityGroupIds"] = state.SecurityGroupIds
		inputs["serverSideEncryption"] = state.ServerSideEncryption
		inputs["subnetGroupName"] = state.SubnetGroupName
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("aws:dax/cluster:Cluster", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Cluster{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Cluster) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Cluster) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The ARN of the DAX cluster
func (r *Cluster) Arn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["arn"])
}

// List of Availability Zones in which the
// nodes will be created
func (r *Cluster) AvailabilityZones() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["availabilityZones"])
}

// The DNS name of the DAX cluster without the port appended
func (r *Cluster) ClusterAddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["clusterAddress"])
}

// Group identifier. DAX converts this name to
// lowercase
func (r *Cluster) ClusterName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["clusterName"])
}

// The configuration endpoint for this DAX cluster,
// consisting of a DNS name and a port number
func (r *Cluster) ConfigurationEndpoint() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["configurationEndpoint"])
}

// Description for the cluster
func (r *Cluster) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// A valid Amazon Resource Name (ARN) that identifies
// an IAM role. At runtime, DAX will assume this role and use the role's
// permissions to access DynamoDB on your behalf
func (r *Cluster) IamRoleArn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["iamRoleArn"])
}

// Specifies the weekly time range for when
// maintenance on the cluster is performed. The format is `ddd:hh24:mi-ddd:hh24:mi`
// (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example:
// `sun:05:00-sun:09:00`
func (r *Cluster) MaintenanceWindow() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["maintenanceWindow"])
}

// The compute and memory capacity of the nodes. See
// [Nodes][1] for supported node types
func (r *Cluster) NodeType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["nodeType"])
}

// List of node objects including `id`, `address`, `port` and
// `availability_zone`. Referenceable e.g. as
// `${aws_dax_cluster.test.nodes.0.address}`
func (r *Cluster) Nodes() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["nodes"])
}

// An Amazon Resource Name (ARN) of an
// SNS topic to send DAX notifications to. Example:
// `arn:aws:sns:us-east-1:012345678999:my_sns_topic`
func (r *Cluster) NotificationTopicArn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["notificationTopicArn"])
}

// Name of the parameter group to associate
// with this DAX cluster
func (r *Cluster) ParameterGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["parameterGroupName"])
}

// The port used by the configuration endpoint
func (r *Cluster) Port() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["port"])
}

// The number of nodes in the DAX cluster. A
// replication factor of 1 will create a single-node cluster, without any read
// replicas
func (r *Cluster) ReplicationFactor() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["replicationFactor"])
}

// One or more VPC security groups associated
// with the cluster
func (r *Cluster) SecurityGroupIds() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["securityGroupIds"])
}

// Encrypt at rest options
func (r *Cluster) ServerSideEncryption() *pulumi.Output {
	return r.s.State["serverSideEncryption"]
}

// Name of the subnet group to be used for the
// cluster
func (r *Cluster) SubnetGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["subnetGroupName"])
}

// A mapping of tags to assign to the resource
func (r *Cluster) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering Cluster resources.
type ClusterState struct {
	// The ARN of the DAX cluster
	Arn interface{}
	// List of Availability Zones in which the
	// nodes will be created
	AvailabilityZones interface{}
	// The DNS name of the DAX cluster without the port appended
	ClusterAddress interface{}
	// Group identifier. DAX converts this name to
	// lowercase
	ClusterName interface{}
	// The configuration endpoint for this DAX cluster,
	// consisting of a DNS name and a port number
	ConfigurationEndpoint interface{}
	// Description for the cluster
	Description interface{}
	// A valid Amazon Resource Name (ARN) that identifies
	// an IAM role. At runtime, DAX will assume this role and use the role's
	// permissions to access DynamoDB on your behalf
	IamRoleArn interface{}
	// Specifies the weekly time range for when
	// maintenance on the cluster is performed. The format is `ddd:hh24:mi-ddd:hh24:mi`
	// (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example:
	// `sun:05:00-sun:09:00`
	MaintenanceWindow interface{}
	// The compute and memory capacity of the nodes. See
	// [Nodes][1] for supported node types
	NodeType interface{}
	// List of node objects including `id`, `address`, `port` and
	// `availability_zone`. Referenceable e.g. as
	// `${aws_dax_cluster.test.nodes.0.address}`
	Nodes interface{}
	// An Amazon Resource Name (ARN) of an
	// SNS topic to send DAX notifications to. Example:
	// `arn:aws:sns:us-east-1:012345678999:my_sns_topic`
	NotificationTopicArn interface{}
	// Name of the parameter group to associate
	// with this DAX cluster
	ParameterGroupName interface{}
	// The port used by the configuration endpoint
	Port interface{}
	// The number of nodes in the DAX cluster. A
	// replication factor of 1 will create a single-node cluster, without any read
	// replicas
	ReplicationFactor interface{}
	// One or more VPC security groups associated
	// with the cluster
	SecurityGroupIds interface{}
	// Encrypt at rest options
	ServerSideEncryption interface{}
	// Name of the subnet group to be used for the
	// cluster
	SubnetGroupName interface{}
	// A mapping of tags to assign to the resource
	Tags interface{}
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// List of Availability Zones in which the
	// nodes will be created
	AvailabilityZones interface{}
	// Group identifier. DAX converts this name to
	// lowercase
	ClusterName interface{}
	// Description for the cluster
	Description interface{}
	// A valid Amazon Resource Name (ARN) that identifies
	// an IAM role. At runtime, DAX will assume this role and use the role's
	// permissions to access DynamoDB on your behalf
	IamRoleArn interface{}
	// Specifies the weekly time range for when
	// maintenance on the cluster is performed. The format is `ddd:hh24:mi-ddd:hh24:mi`
	// (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example:
	// `sun:05:00-sun:09:00`
	MaintenanceWindow interface{}
	// The compute and memory capacity of the nodes. See
	// [Nodes][1] for supported node types
	NodeType interface{}
	// An Amazon Resource Name (ARN) of an
	// SNS topic to send DAX notifications to. Example:
	// `arn:aws:sns:us-east-1:012345678999:my_sns_topic`
	NotificationTopicArn interface{}
	// Name of the parameter group to associate
	// with this DAX cluster
	ParameterGroupName interface{}
	// The number of nodes in the DAX cluster. A
	// replication factor of 1 will create a single-node cluster, without any read
	// replicas
	ReplicationFactor interface{}
	// One or more VPC security groups associated
	// with the cluster
	SecurityGroupIds interface{}
	// Encrypt at rest options
	ServerSideEncryption interface{}
	// Name of the subnet group to be used for the
	// cluster
	SubnetGroupName interface{}
	// A mapping of tags to assign to the resource
	Tags interface{}
}
