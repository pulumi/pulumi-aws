// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dax

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Cluster struct {
	pulumi.CustomResourceState

	Arn                           pulumi.StringOutput                  `pulumi:"arn"`
	AvailabilityZones             pulumi.StringArrayOutput             `pulumi:"availabilityZones"`
	ClusterAddress                pulumi.StringOutput                  `pulumi:"clusterAddress"`
	ClusterEndpointEncryptionType pulumi.StringPtrOutput               `pulumi:"clusterEndpointEncryptionType"`
	ClusterName                   pulumi.StringOutput                  `pulumi:"clusterName"`
	ConfigurationEndpoint         pulumi.StringOutput                  `pulumi:"configurationEndpoint"`
	Description                   pulumi.StringPtrOutput               `pulumi:"description"`
	IamRoleArn                    pulumi.StringOutput                  `pulumi:"iamRoleArn"`
	MaintenanceWindow             pulumi.StringOutput                  `pulumi:"maintenanceWindow"`
	NodeType                      pulumi.StringOutput                  `pulumi:"nodeType"`
	Nodes                         ClusterNodeArrayOutput               `pulumi:"nodes"`
	NotificationTopicArn          pulumi.StringPtrOutput               `pulumi:"notificationTopicArn"`
	ParameterGroupName            pulumi.StringOutput                  `pulumi:"parameterGroupName"`
	Port                          pulumi.IntOutput                     `pulumi:"port"`
	ReplicationFactor             pulumi.IntOutput                     `pulumi:"replicationFactor"`
	SecurityGroupIds              pulumi.StringArrayOutput             `pulumi:"securityGroupIds"`
	ServerSideEncryption          ClusterServerSideEncryptionPtrOutput `pulumi:"serverSideEncryption"`
	SubnetGroupName               pulumi.StringOutput                  `pulumi:"subnetGroupName"`
	Tags                          pulumi.StringMapOutput               `pulumi:"tags"`
	TagsAll                       pulumi.StringMapOutput               `pulumi:"tagsAll"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	if args.IamRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'IamRoleArn'")
	}
	if args.NodeType == nil {
		return nil, errors.New("invalid value for required argument 'NodeType'")
	}
	if args.ReplicationFactor == nil {
		return nil, errors.New("invalid value for required argument 'ReplicationFactor'")
	}
	var resource Cluster
	err := ctx.RegisterResource("aws:dax/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("aws:dax/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	Arn                           *string                      `pulumi:"arn"`
	AvailabilityZones             []string                     `pulumi:"availabilityZones"`
	ClusterAddress                *string                      `pulumi:"clusterAddress"`
	ClusterEndpointEncryptionType *string                      `pulumi:"clusterEndpointEncryptionType"`
	ClusterName                   *string                      `pulumi:"clusterName"`
	ConfigurationEndpoint         *string                      `pulumi:"configurationEndpoint"`
	Description                   *string                      `pulumi:"description"`
	IamRoleArn                    *string                      `pulumi:"iamRoleArn"`
	MaintenanceWindow             *string                      `pulumi:"maintenanceWindow"`
	NodeType                      *string                      `pulumi:"nodeType"`
	Nodes                         []ClusterNode                `pulumi:"nodes"`
	NotificationTopicArn          *string                      `pulumi:"notificationTopicArn"`
	ParameterGroupName            *string                      `pulumi:"parameterGroupName"`
	Port                          *int                         `pulumi:"port"`
	ReplicationFactor             *int                         `pulumi:"replicationFactor"`
	SecurityGroupIds              []string                     `pulumi:"securityGroupIds"`
	ServerSideEncryption          *ClusterServerSideEncryption `pulumi:"serverSideEncryption"`
	SubnetGroupName               *string                      `pulumi:"subnetGroupName"`
	Tags                          map[string]string            `pulumi:"tags"`
	TagsAll                       map[string]string            `pulumi:"tagsAll"`
}

type ClusterState struct {
	Arn                           pulumi.StringPtrInput
	AvailabilityZones             pulumi.StringArrayInput
	ClusterAddress                pulumi.StringPtrInput
	ClusterEndpointEncryptionType pulumi.StringPtrInput
	ClusterName                   pulumi.StringPtrInput
	ConfigurationEndpoint         pulumi.StringPtrInput
	Description                   pulumi.StringPtrInput
	IamRoleArn                    pulumi.StringPtrInput
	MaintenanceWindow             pulumi.StringPtrInput
	NodeType                      pulumi.StringPtrInput
	Nodes                         ClusterNodeArrayInput
	NotificationTopicArn          pulumi.StringPtrInput
	ParameterGroupName            pulumi.StringPtrInput
	Port                          pulumi.IntPtrInput
	ReplicationFactor             pulumi.IntPtrInput
	SecurityGroupIds              pulumi.StringArrayInput
	ServerSideEncryption          ClusterServerSideEncryptionPtrInput
	SubnetGroupName               pulumi.StringPtrInput
	Tags                          pulumi.StringMapInput
	TagsAll                       pulumi.StringMapInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	AvailabilityZones             []string                     `pulumi:"availabilityZones"`
	ClusterEndpointEncryptionType *string                      `pulumi:"clusterEndpointEncryptionType"`
	ClusterName                   string                       `pulumi:"clusterName"`
	Description                   *string                      `pulumi:"description"`
	IamRoleArn                    string                       `pulumi:"iamRoleArn"`
	MaintenanceWindow             *string                      `pulumi:"maintenanceWindow"`
	NodeType                      string                       `pulumi:"nodeType"`
	NotificationTopicArn          *string                      `pulumi:"notificationTopicArn"`
	ParameterGroupName            *string                      `pulumi:"parameterGroupName"`
	ReplicationFactor             int                          `pulumi:"replicationFactor"`
	SecurityGroupIds              []string                     `pulumi:"securityGroupIds"`
	ServerSideEncryption          *ClusterServerSideEncryption `pulumi:"serverSideEncryption"`
	SubnetGroupName               *string                      `pulumi:"subnetGroupName"`
	Tags                          map[string]string            `pulumi:"tags"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	AvailabilityZones             pulumi.StringArrayInput
	ClusterEndpointEncryptionType pulumi.StringPtrInput
	ClusterName                   pulumi.StringInput
	Description                   pulumi.StringPtrInput
	IamRoleArn                    pulumi.StringInput
	MaintenanceWindow             pulumi.StringPtrInput
	NodeType                      pulumi.StringInput
	NotificationTopicArn          pulumi.StringPtrInput
	ParameterGroupName            pulumi.StringPtrInput
	ReplicationFactor             pulumi.IntInput
	SecurityGroupIds              pulumi.StringArrayInput
	ServerSideEncryption          ClusterServerSideEncryptionPtrInput
	SubnetGroupName               pulumi.StringPtrInput
	Tags                          pulumi.StringMapInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//	ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

func (o ClusterOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ClusterOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringArrayOutput { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

func (o ClusterOutput) ClusterAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ClusterAddress }).(pulumi.StringOutput)
}

func (o ClusterOutput) ClusterEndpointEncryptionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.ClusterEndpointEncryptionType }).(pulumi.StringPtrOutput)
}

func (o ClusterOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

func (o ClusterOutput) ConfigurationEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ConfigurationEndpoint }).(pulumi.StringOutput)
}

func (o ClusterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ClusterOutput) IamRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.IamRoleArn }).(pulumi.StringOutput)
}

func (o ClusterOutput) MaintenanceWindow() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.MaintenanceWindow }).(pulumi.StringOutput)
}

func (o ClusterOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.NodeType }).(pulumi.StringOutput)
}

func (o ClusterOutput) Nodes() ClusterNodeArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterNodeArrayOutput { return v.Nodes }).(ClusterNodeArrayOutput)
}

func (o ClusterOutput) NotificationTopicArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.NotificationTopicArn }).(pulumi.StringPtrOutput)
}

func (o ClusterOutput) ParameterGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ParameterGroupName }).(pulumi.StringOutput)
}

func (o ClusterOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

func (o ClusterOutput) ReplicationFactor() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.ReplicationFactor }).(pulumi.IntOutput)
}

func (o ClusterOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

func (o ClusterOutput) ServerSideEncryption() ClusterServerSideEncryptionPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterServerSideEncryptionPtrOutput { return v.ServerSideEncryption }).(ClusterServerSideEncryptionPtrOutput)
}

func (o ClusterOutput) SubnetGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.SubnetGroupName }).(pulumi.StringOutput)
}

func (o ClusterOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ClusterOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}
