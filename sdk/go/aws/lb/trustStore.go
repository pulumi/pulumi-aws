// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a ELBv2 Trust Store for use with Application Load Balancer Listener resources.
//
// ## Example Usage
// ### Trust Store Load Balancer Listener
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/lb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := lb.NewTrustStore(ctx, "test", &lb.TrustStoreArgs{
//				CaCertificatesBundleS3Bucket: pulumi.String("..."),
//				CaCertificatesBundleS3Key:    pulumi.String("..."),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = lb.NewListener(ctx, "example", &lb.ListenerArgs{
//				LoadBalancerArn: pulumi.Any(aws_lb.Example.Id),
//				DefaultActions: lb.ListenerDefaultActionArray{
//					&lb.ListenerDefaultActionArgs{
//						TargetGroupArn: pulumi.Any(aws_lb_target_group.Example.Id),
//						Type:           pulumi.String("forward"),
//					},
//				},
//				MutualAuthentication: &lb.ListenerMutualAuthenticationArgs{
//					Mode:          pulumi.String("verify"),
//					TrustStoreArn: test.Arn,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Target Groups using their ARN. For example:
//
// ```sh
//
//	$ pulumi import aws:lb/trustStore:TrustStore example arn:aws:elasticloadbalancing:us-west-2:187416307283:truststore/my-trust-store/20cfe21448b66314
//
// ```
type TrustStore struct {
	pulumi.CustomResourceState

	// ARN of the Trust Store (matches `id`).
	Arn pulumi.StringOutput `pulumi:"arn"`
	// ARN suffix for use with CloudWatch Metrics.
	ArnSuffix pulumi.StringOutput `pulumi:"arnSuffix"`
	// S3 Bucket name holding the client certificate CA bundle.
	CaCertificatesBundleS3Bucket pulumi.StringOutput `pulumi:"caCertificatesBundleS3Bucket"`
	// S3 object key holding the client certificate CA bundle.
	CaCertificatesBundleS3Key pulumi.StringOutput `pulumi:"caCertificatesBundleS3Key"`
	// Version Id of CA bundle S3 bucket object, if versioned, defaults to latest if omitted.
	CaCertificatesBundleS3ObjectVersion pulumi.StringPtrOutput `pulumi:"caCertificatesBundleS3ObjectVersion"`
	// Name of the Trust Store. If omitted, the provider will assign a random, unique name. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
	Name pulumi.StringOutput `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`. Cannot be longer than 6 characters.
	NamePrefix pulumi.StringOutput `pulumi:"namePrefix"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewTrustStore registers a new resource with the given unique name, arguments, and options.
func NewTrustStore(ctx *pulumi.Context,
	name string, args *TrustStoreArgs, opts ...pulumi.ResourceOption) (*TrustStore, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CaCertificatesBundleS3Bucket == nil {
		return nil, errors.New("invalid value for required argument 'CaCertificatesBundleS3Bucket'")
	}
	if args.CaCertificatesBundleS3Key == nil {
		return nil, errors.New("invalid value for required argument 'CaCertificatesBundleS3Key'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"tagsAll",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TrustStore
	err := ctx.RegisterResource("aws:lb/trustStore:TrustStore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrustStore gets an existing TrustStore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrustStore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrustStoreState, opts ...pulumi.ResourceOption) (*TrustStore, error) {
	var resource TrustStore
	err := ctx.ReadResource("aws:lb/trustStore:TrustStore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TrustStore resources.
type trustStoreState struct {
	// ARN of the Trust Store (matches `id`).
	Arn *string `pulumi:"arn"`
	// ARN suffix for use with CloudWatch Metrics.
	ArnSuffix *string `pulumi:"arnSuffix"`
	// S3 Bucket name holding the client certificate CA bundle.
	CaCertificatesBundleS3Bucket *string `pulumi:"caCertificatesBundleS3Bucket"`
	// S3 object key holding the client certificate CA bundle.
	CaCertificatesBundleS3Key *string `pulumi:"caCertificatesBundleS3Key"`
	// Version Id of CA bundle S3 bucket object, if versioned, defaults to latest if omitted.
	CaCertificatesBundleS3ObjectVersion *string `pulumi:"caCertificatesBundleS3ObjectVersion"`
	// Name of the Trust Store. If omitted, the provider will assign a random, unique name. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`. Cannot be longer than 6 characters.
	NamePrefix *string `pulumi:"namePrefix"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type TrustStoreState struct {
	// ARN of the Trust Store (matches `id`).
	Arn pulumi.StringPtrInput
	// ARN suffix for use with CloudWatch Metrics.
	ArnSuffix pulumi.StringPtrInput
	// S3 Bucket name holding the client certificate CA bundle.
	CaCertificatesBundleS3Bucket pulumi.StringPtrInput
	// S3 object key holding the client certificate CA bundle.
	CaCertificatesBundleS3Key pulumi.StringPtrInput
	// Version Id of CA bundle S3 bucket object, if versioned, defaults to latest if omitted.
	CaCertificatesBundleS3ObjectVersion pulumi.StringPtrInput
	// Name of the Trust Store. If omitted, the provider will assign a random, unique name. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
	Name pulumi.StringPtrInput
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`. Cannot be longer than 6 characters.
	NamePrefix pulumi.StringPtrInput
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
}

func (TrustStoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*trustStoreState)(nil)).Elem()
}

type trustStoreArgs struct {
	// S3 Bucket name holding the client certificate CA bundle.
	CaCertificatesBundleS3Bucket string `pulumi:"caCertificatesBundleS3Bucket"`
	// S3 object key holding the client certificate CA bundle.
	CaCertificatesBundleS3Key string `pulumi:"caCertificatesBundleS3Key"`
	// Version Id of CA bundle S3 bucket object, if versioned, defaults to latest if omitted.
	CaCertificatesBundleS3ObjectVersion *string `pulumi:"caCertificatesBundleS3ObjectVersion"`
	// Name of the Trust Store. If omitted, the provider will assign a random, unique name. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`. Cannot be longer than 6 characters.
	NamePrefix *string `pulumi:"namePrefix"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a TrustStore resource.
type TrustStoreArgs struct {
	// S3 Bucket name holding the client certificate CA bundle.
	CaCertificatesBundleS3Bucket pulumi.StringInput
	// S3 object key holding the client certificate CA bundle.
	CaCertificatesBundleS3Key pulumi.StringInput
	// Version Id of CA bundle S3 bucket object, if versioned, defaults to latest if omitted.
	CaCertificatesBundleS3ObjectVersion pulumi.StringPtrInput
	// Name of the Trust Store. If omitted, the provider will assign a random, unique name. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
	Name pulumi.StringPtrInput
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`. Cannot be longer than 6 characters.
	NamePrefix pulumi.StringPtrInput
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
}

func (TrustStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trustStoreArgs)(nil)).Elem()
}

type TrustStoreInput interface {
	pulumi.Input

	ToTrustStoreOutput() TrustStoreOutput
	ToTrustStoreOutputWithContext(ctx context.Context) TrustStoreOutput
}

func (*TrustStore) ElementType() reflect.Type {
	return reflect.TypeOf((**TrustStore)(nil)).Elem()
}

func (i *TrustStore) ToTrustStoreOutput() TrustStoreOutput {
	return i.ToTrustStoreOutputWithContext(context.Background())
}

func (i *TrustStore) ToTrustStoreOutputWithContext(ctx context.Context) TrustStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustStoreOutput)
}

// TrustStoreArrayInput is an input type that accepts TrustStoreArray and TrustStoreArrayOutput values.
// You can construct a concrete instance of `TrustStoreArrayInput` via:
//
//	TrustStoreArray{ TrustStoreArgs{...} }
type TrustStoreArrayInput interface {
	pulumi.Input

	ToTrustStoreArrayOutput() TrustStoreArrayOutput
	ToTrustStoreArrayOutputWithContext(context.Context) TrustStoreArrayOutput
}

type TrustStoreArray []TrustStoreInput

func (TrustStoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TrustStore)(nil)).Elem()
}

func (i TrustStoreArray) ToTrustStoreArrayOutput() TrustStoreArrayOutput {
	return i.ToTrustStoreArrayOutputWithContext(context.Background())
}

func (i TrustStoreArray) ToTrustStoreArrayOutputWithContext(ctx context.Context) TrustStoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustStoreArrayOutput)
}

// TrustStoreMapInput is an input type that accepts TrustStoreMap and TrustStoreMapOutput values.
// You can construct a concrete instance of `TrustStoreMapInput` via:
//
//	TrustStoreMap{ "key": TrustStoreArgs{...} }
type TrustStoreMapInput interface {
	pulumi.Input

	ToTrustStoreMapOutput() TrustStoreMapOutput
	ToTrustStoreMapOutputWithContext(context.Context) TrustStoreMapOutput
}

type TrustStoreMap map[string]TrustStoreInput

func (TrustStoreMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TrustStore)(nil)).Elem()
}

func (i TrustStoreMap) ToTrustStoreMapOutput() TrustStoreMapOutput {
	return i.ToTrustStoreMapOutputWithContext(context.Background())
}

func (i TrustStoreMap) ToTrustStoreMapOutputWithContext(ctx context.Context) TrustStoreMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustStoreMapOutput)
}

type TrustStoreOutput struct{ *pulumi.OutputState }

func (TrustStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrustStore)(nil)).Elem()
}

func (o TrustStoreOutput) ToTrustStoreOutput() TrustStoreOutput {
	return o
}

func (o TrustStoreOutput) ToTrustStoreOutputWithContext(ctx context.Context) TrustStoreOutput {
	return o
}

// ARN of the Trust Store (matches `id`).
func (o TrustStoreOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *TrustStore) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// ARN suffix for use with CloudWatch Metrics.
func (o TrustStoreOutput) ArnSuffix() pulumi.StringOutput {
	return o.ApplyT(func(v *TrustStore) pulumi.StringOutput { return v.ArnSuffix }).(pulumi.StringOutput)
}

// S3 Bucket name holding the client certificate CA bundle.
func (o TrustStoreOutput) CaCertificatesBundleS3Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *TrustStore) pulumi.StringOutput { return v.CaCertificatesBundleS3Bucket }).(pulumi.StringOutput)
}

// S3 object key holding the client certificate CA bundle.
func (o TrustStoreOutput) CaCertificatesBundleS3Key() pulumi.StringOutput {
	return o.ApplyT(func(v *TrustStore) pulumi.StringOutput { return v.CaCertificatesBundleS3Key }).(pulumi.StringOutput)
}

// Version Id of CA bundle S3 bucket object, if versioned, defaults to latest if omitted.
func (o TrustStoreOutput) CaCertificatesBundleS3ObjectVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrustStore) pulumi.StringPtrOutput { return v.CaCertificatesBundleS3ObjectVersion }).(pulumi.StringPtrOutput)
}

// Name of the Trust Store. If omitted, the provider will assign a random, unique name. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
func (o TrustStoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TrustStore) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Creates a unique name beginning with the specified prefix. Conflicts with `name`. Cannot be longer than 6 characters.
func (o TrustStoreOutput) NamePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *TrustStore) pulumi.StringOutput { return v.NamePrefix }).(pulumi.StringOutput)
}

// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o TrustStoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TrustStore) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o TrustStoreOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TrustStore) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type TrustStoreArrayOutput struct{ *pulumi.OutputState }

func (TrustStoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TrustStore)(nil)).Elem()
}

func (o TrustStoreArrayOutput) ToTrustStoreArrayOutput() TrustStoreArrayOutput {
	return o
}

func (o TrustStoreArrayOutput) ToTrustStoreArrayOutputWithContext(ctx context.Context) TrustStoreArrayOutput {
	return o
}

func (o TrustStoreArrayOutput) Index(i pulumi.IntInput) TrustStoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TrustStore {
		return vs[0].([]*TrustStore)[vs[1].(int)]
	}).(TrustStoreOutput)
}

type TrustStoreMapOutput struct{ *pulumi.OutputState }

func (TrustStoreMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TrustStore)(nil)).Elem()
}

func (o TrustStoreMapOutput) ToTrustStoreMapOutput() TrustStoreMapOutput {
	return o
}

func (o TrustStoreMapOutput) ToTrustStoreMapOutputWithContext(ctx context.Context) TrustStoreMapOutput {
	return o
}

func (o TrustStoreMapOutput) MapIndex(k pulumi.StringInput) TrustStoreOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TrustStore {
		return vs[0].(map[string]*TrustStore)[vs[1].(string)]
	}).(TrustStoreOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TrustStoreInput)(nil)).Elem(), &TrustStore{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrustStoreArrayInput)(nil)).Elem(), TrustStoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrustStoreMapInput)(nil)).Elem(), TrustStoreMap{})
	pulumi.RegisterOutputType(TrustStoreOutput{})
	pulumi.RegisterOutputType(TrustStoreArrayOutput{})
	pulumi.RegisterOutputType(TrustStoreMapOutput{})
}
