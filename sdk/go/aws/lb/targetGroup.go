// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TargetGroup struct {
	pulumi.CustomResourceState

	Arn                            pulumi.StringOutput                  `pulumi:"arn"`
	ArnSuffix                      pulumi.StringOutput                  `pulumi:"arnSuffix"`
	ConnectionTermination          pulumi.BoolPtrOutput                 `pulumi:"connectionTermination"`
	DeregistrationDelay            pulumi.IntPtrOutput                  `pulumi:"deregistrationDelay"`
	HealthCheck                    TargetGroupHealthCheckOutput         `pulumi:"healthCheck"`
	IpAddressType                  pulumi.StringOutput                  `pulumi:"ipAddressType"`
	LambdaMultiValueHeadersEnabled pulumi.BoolPtrOutput                 `pulumi:"lambdaMultiValueHeadersEnabled"`
	LoadBalancingAlgorithmType     pulumi.StringOutput                  `pulumi:"loadBalancingAlgorithmType"`
	Name                           pulumi.StringOutput                  `pulumi:"name"`
	NamePrefix                     pulumi.StringPtrOutput               `pulumi:"namePrefix"`
	Port                           pulumi.IntPtrOutput                  `pulumi:"port"`
	PreserveClientIp               pulumi.StringOutput                  `pulumi:"preserveClientIp"`
	Protocol                       pulumi.StringPtrOutput               `pulumi:"protocol"`
	ProtocolVersion                pulumi.StringOutput                  `pulumi:"protocolVersion"`
	ProxyProtocolV2                pulumi.BoolPtrOutput                 `pulumi:"proxyProtocolV2"`
	SlowStart                      pulumi.IntPtrOutput                  `pulumi:"slowStart"`
	Stickiness                     TargetGroupStickinessOutput          `pulumi:"stickiness"`
	Tags                           pulumi.StringMapOutput               `pulumi:"tags"`
	TagsAll                        pulumi.StringMapOutput               `pulumi:"tagsAll"`
	TargetFailovers                TargetGroupTargetFailoverArrayOutput `pulumi:"targetFailovers"`
	TargetType                     pulumi.StringPtrOutput               `pulumi:"targetType"`
	VpcId                          pulumi.StringPtrOutput               `pulumi:"vpcId"`
}

// NewTargetGroup registers a new resource with the given unique name, arguments, and options.
func NewTargetGroup(ctx *pulumi.Context,
	name string, args *TargetGroupArgs, opts ...pulumi.ResourceOption) (*TargetGroup, error) {
	if args == nil {
		args = &TargetGroupArgs{}
	}

	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("aws:elasticloadbalancingv2/targetGroup:TargetGroup"),
		},
	})
	opts = append(opts, aliases)
	var resource TargetGroup
	err := ctx.RegisterResource("aws:lb/targetGroup:TargetGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTargetGroup gets an existing TargetGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTargetGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TargetGroupState, opts ...pulumi.ResourceOption) (*TargetGroup, error) {
	var resource TargetGroup
	err := ctx.ReadResource("aws:lb/targetGroup:TargetGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TargetGroup resources.
type targetGroupState struct {
	Arn                            *string                     `pulumi:"arn"`
	ArnSuffix                      *string                     `pulumi:"arnSuffix"`
	ConnectionTermination          *bool                       `pulumi:"connectionTermination"`
	DeregistrationDelay            *int                        `pulumi:"deregistrationDelay"`
	HealthCheck                    *TargetGroupHealthCheck     `pulumi:"healthCheck"`
	IpAddressType                  *string                     `pulumi:"ipAddressType"`
	LambdaMultiValueHeadersEnabled *bool                       `pulumi:"lambdaMultiValueHeadersEnabled"`
	LoadBalancingAlgorithmType     *string                     `pulumi:"loadBalancingAlgorithmType"`
	Name                           *string                     `pulumi:"name"`
	NamePrefix                     *string                     `pulumi:"namePrefix"`
	Port                           *int                        `pulumi:"port"`
	PreserveClientIp               *string                     `pulumi:"preserveClientIp"`
	Protocol                       *string                     `pulumi:"protocol"`
	ProtocolVersion                *string                     `pulumi:"protocolVersion"`
	ProxyProtocolV2                *bool                       `pulumi:"proxyProtocolV2"`
	SlowStart                      *int                        `pulumi:"slowStart"`
	Stickiness                     *TargetGroupStickiness      `pulumi:"stickiness"`
	Tags                           map[string]string           `pulumi:"tags"`
	TagsAll                        map[string]string           `pulumi:"tagsAll"`
	TargetFailovers                []TargetGroupTargetFailover `pulumi:"targetFailovers"`
	TargetType                     *string                     `pulumi:"targetType"`
	VpcId                          *string                     `pulumi:"vpcId"`
}

type TargetGroupState struct {
	Arn                            pulumi.StringPtrInput
	ArnSuffix                      pulumi.StringPtrInput
	ConnectionTermination          pulumi.BoolPtrInput
	DeregistrationDelay            pulumi.IntPtrInput
	HealthCheck                    TargetGroupHealthCheckPtrInput
	IpAddressType                  pulumi.StringPtrInput
	LambdaMultiValueHeadersEnabled pulumi.BoolPtrInput
	LoadBalancingAlgorithmType     pulumi.StringPtrInput
	Name                           pulumi.StringPtrInput
	NamePrefix                     pulumi.StringPtrInput
	Port                           pulumi.IntPtrInput
	PreserveClientIp               pulumi.StringPtrInput
	Protocol                       pulumi.StringPtrInput
	ProtocolVersion                pulumi.StringPtrInput
	ProxyProtocolV2                pulumi.BoolPtrInput
	SlowStart                      pulumi.IntPtrInput
	Stickiness                     TargetGroupStickinessPtrInput
	Tags                           pulumi.StringMapInput
	TagsAll                        pulumi.StringMapInput
	TargetFailovers                TargetGroupTargetFailoverArrayInput
	TargetType                     pulumi.StringPtrInput
	VpcId                          pulumi.StringPtrInput
}

func (TargetGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*targetGroupState)(nil)).Elem()
}

type targetGroupArgs struct {
	ConnectionTermination          *bool                       `pulumi:"connectionTermination"`
	DeregistrationDelay            *int                        `pulumi:"deregistrationDelay"`
	HealthCheck                    *TargetGroupHealthCheck     `pulumi:"healthCheck"`
	IpAddressType                  *string                     `pulumi:"ipAddressType"`
	LambdaMultiValueHeadersEnabled *bool                       `pulumi:"lambdaMultiValueHeadersEnabled"`
	LoadBalancingAlgorithmType     *string                     `pulumi:"loadBalancingAlgorithmType"`
	Name                           *string                     `pulumi:"name"`
	NamePrefix                     *string                     `pulumi:"namePrefix"`
	Port                           *int                        `pulumi:"port"`
	PreserveClientIp               *string                     `pulumi:"preserveClientIp"`
	Protocol                       *string                     `pulumi:"protocol"`
	ProtocolVersion                *string                     `pulumi:"protocolVersion"`
	ProxyProtocolV2                *bool                       `pulumi:"proxyProtocolV2"`
	SlowStart                      *int                        `pulumi:"slowStart"`
	Stickiness                     *TargetGroupStickiness      `pulumi:"stickiness"`
	Tags                           map[string]string           `pulumi:"tags"`
	TargetFailovers                []TargetGroupTargetFailover `pulumi:"targetFailovers"`
	TargetType                     *string                     `pulumi:"targetType"`
	VpcId                          *string                     `pulumi:"vpcId"`
}

// The set of arguments for constructing a TargetGroup resource.
type TargetGroupArgs struct {
	ConnectionTermination          pulumi.BoolPtrInput
	DeregistrationDelay            pulumi.IntPtrInput
	HealthCheck                    TargetGroupHealthCheckPtrInput
	IpAddressType                  pulumi.StringPtrInput
	LambdaMultiValueHeadersEnabled pulumi.BoolPtrInput
	LoadBalancingAlgorithmType     pulumi.StringPtrInput
	Name                           pulumi.StringPtrInput
	NamePrefix                     pulumi.StringPtrInput
	Port                           pulumi.IntPtrInput
	PreserveClientIp               pulumi.StringPtrInput
	Protocol                       pulumi.StringPtrInput
	ProtocolVersion                pulumi.StringPtrInput
	ProxyProtocolV2                pulumi.BoolPtrInput
	SlowStart                      pulumi.IntPtrInput
	Stickiness                     TargetGroupStickinessPtrInput
	Tags                           pulumi.StringMapInput
	TargetFailovers                TargetGroupTargetFailoverArrayInput
	TargetType                     pulumi.StringPtrInput
	VpcId                          pulumi.StringPtrInput
}

func (TargetGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*targetGroupArgs)(nil)).Elem()
}

type TargetGroupInput interface {
	pulumi.Input

	ToTargetGroupOutput() TargetGroupOutput
	ToTargetGroupOutputWithContext(ctx context.Context) TargetGroupOutput
}

func (*TargetGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetGroup)(nil)).Elem()
}

func (i *TargetGroup) ToTargetGroupOutput() TargetGroupOutput {
	return i.ToTargetGroupOutputWithContext(context.Background())
}

func (i *TargetGroup) ToTargetGroupOutputWithContext(ctx context.Context) TargetGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetGroupOutput)
}

// TargetGroupArrayInput is an input type that accepts TargetGroupArray and TargetGroupArrayOutput values.
// You can construct a concrete instance of `TargetGroupArrayInput` via:
//
//	TargetGroupArray{ TargetGroupArgs{...} }
type TargetGroupArrayInput interface {
	pulumi.Input

	ToTargetGroupArrayOutput() TargetGroupArrayOutput
	ToTargetGroupArrayOutputWithContext(context.Context) TargetGroupArrayOutput
}

type TargetGroupArray []TargetGroupInput

func (TargetGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TargetGroup)(nil)).Elem()
}

func (i TargetGroupArray) ToTargetGroupArrayOutput() TargetGroupArrayOutput {
	return i.ToTargetGroupArrayOutputWithContext(context.Background())
}

func (i TargetGroupArray) ToTargetGroupArrayOutputWithContext(ctx context.Context) TargetGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetGroupArrayOutput)
}

// TargetGroupMapInput is an input type that accepts TargetGroupMap and TargetGroupMapOutput values.
// You can construct a concrete instance of `TargetGroupMapInput` via:
//
//	TargetGroupMap{ "key": TargetGroupArgs{...} }
type TargetGroupMapInput interface {
	pulumi.Input

	ToTargetGroupMapOutput() TargetGroupMapOutput
	ToTargetGroupMapOutputWithContext(context.Context) TargetGroupMapOutput
}

type TargetGroupMap map[string]TargetGroupInput

func (TargetGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TargetGroup)(nil)).Elem()
}

func (i TargetGroupMap) ToTargetGroupMapOutput() TargetGroupMapOutput {
	return i.ToTargetGroupMapOutputWithContext(context.Background())
}

func (i TargetGroupMap) ToTargetGroupMapOutputWithContext(ctx context.Context) TargetGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetGroupMapOutput)
}

type TargetGroupOutput struct{ *pulumi.OutputState }

func (TargetGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetGroup)(nil)).Elem()
}

func (o TargetGroupOutput) ToTargetGroupOutput() TargetGroupOutput {
	return o
}

func (o TargetGroupOutput) ToTargetGroupOutputWithContext(ctx context.Context) TargetGroupOutput {
	return o
}

func (o TargetGroupOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetGroup) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o TargetGroupOutput) ArnSuffix() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetGroup) pulumi.StringOutput { return v.ArnSuffix }).(pulumi.StringOutput)
}

func (o TargetGroupOutput) ConnectionTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TargetGroup) pulumi.BoolPtrOutput { return v.ConnectionTermination }).(pulumi.BoolPtrOutput)
}

func (o TargetGroupOutput) DeregistrationDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TargetGroup) pulumi.IntPtrOutput { return v.DeregistrationDelay }).(pulumi.IntPtrOutput)
}

func (o TargetGroupOutput) HealthCheck() TargetGroupHealthCheckOutput {
	return o.ApplyT(func(v *TargetGroup) TargetGroupHealthCheckOutput { return v.HealthCheck }).(TargetGroupHealthCheckOutput)
}

func (o TargetGroupOutput) IpAddressType() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetGroup) pulumi.StringOutput { return v.IpAddressType }).(pulumi.StringOutput)
}

func (o TargetGroupOutput) LambdaMultiValueHeadersEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TargetGroup) pulumi.BoolPtrOutput { return v.LambdaMultiValueHeadersEnabled }).(pulumi.BoolPtrOutput)
}

func (o TargetGroupOutput) LoadBalancingAlgorithmType() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetGroup) pulumi.StringOutput { return v.LoadBalancingAlgorithmType }).(pulumi.StringOutput)
}

func (o TargetGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o TargetGroupOutput) NamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetGroup) pulumi.StringPtrOutput { return v.NamePrefix }).(pulumi.StringPtrOutput)
}

func (o TargetGroupOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TargetGroup) pulumi.IntPtrOutput { return v.Port }).(pulumi.IntPtrOutput)
}

func (o TargetGroupOutput) PreserveClientIp() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetGroup) pulumi.StringOutput { return v.PreserveClientIp }).(pulumi.StringOutput)
}

func (o TargetGroupOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetGroup) pulumi.StringPtrOutput { return v.Protocol }).(pulumi.StringPtrOutput)
}

func (o TargetGroupOutput) ProtocolVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetGroup) pulumi.StringOutput { return v.ProtocolVersion }).(pulumi.StringOutput)
}

func (o TargetGroupOutput) ProxyProtocolV2() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TargetGroup) pulumi.BoolPtrOutput { return v.ProxyProtocolV2 }).(pulumi.BoolPtrOutput)
}

func (o TargetGroupOutput) SlowStart() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TargetGroup) pulumi.IntPtrOutput { return v.SlowStart }).(pulumi.IntPtrOutput)
}

func (o TargetGroupOutput) Stickiness() TargetGroupStickinessOutput {
	return o.ApplyT(func(v *TargetGroup) TargetGroupStickinessOutput { return v.Stickiness }).(TargetGroupStickinessOutput)
}

func (o TargetGroupOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TargetGroup) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o TargetGroupOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TargetGroup) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o TargetGroupOutput) TargetFailovers() TargetGroupTargetFailoverArrayOutput {
	return o.ApplyT(func(v *TargetGroup) TargetGroupTargetFailoverArrayOutput { return v.TargetFailovers }).(TargetGroupTargetFailoverArrayOutput)
}

func (o TargetGroupOutput) TargetType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetGroup) pulumi.StringPtrOutput { return v.TargetType }).(pulumi.StringPtrOutput)
}

func (o TargetGroupOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetGroup) pulumi.StringPtrOutput { return v.VpcId }).(pulumi.StringPtrOutput)
}

type TargetGroupArrayOutput struct{ *pulumi.OutputState }

func (TargetGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TargetGroup)(nil)).Elem()
}

func (o TargetGroupArrayOutput) ToTargetGroupArrayOutput() TargetGroupArrayOutput {
	return o
}

func (o TargetGroupArrayOutput) ToTargetGroupArrayOutputWithContext(ctx context.Context) TargetGroupArrayOutput {
	return o
}

func (o TargetGroupArrayOutput) Index(i pulumi.IntInput) TargetGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TargetGroup {
		return vs[0].([]*TargetGroup)[vs[1].(int)]
	}).(TargetGroupOutput)
}

type TargetGroupMapOutput struct{ *pulumi.OutputState }

func (TargetGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TargetGroup)(nil)).Elem()
}

func (o TargetGroupMapOutput) ToTargetGroupMapOutput() TargetGroupMapOutput {
	return o
}

func (o TargetGroupMapOutput) ToTargetGroupMapOutputWithContext(ctx context.Context) TargetGroupMapOutput {
	return o
}

func (o TargetGroupMapOutput) MapIndex(k pulumi.StringInput) TargetGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TargetGroup {
		return vs[0].(map[string]*TargetGroup)[vs[1].(string)]
	}).(TargetGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TargetGroupInput)(nil)).Elem(), &TargetGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetGroupArrayInput)(nil)).Elem(), TargetGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetGroupMapInput)(nil)).Elem(), TargetGroupMap{})
	pulumi.RegisterOutputType(TargetGroupOutput{})
	pulumi.RegisterOutputType(TargetGroupArrayOutput{})
	pulumi.RegisterOutputType(TargetGroupMapOutput{})
}
