// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codecatalyst

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS CodeCatalyst Dev Environment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/codecatalyst"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := codecatalyst.NewDevEnvironment(ctx, "test", &codecatalyst.DevEnvironmentArgs{
//				Alias: pulumi.String("devenv"),
//				Ides: &codecatalyst.DevEnvironmentIdesArgs{
//					Name:    pulumi.String("PyCharm"),
//					Runtime: pulumi.String("public.ecr.aws/jetbrains/py"),
//				},
//				InactivityTimeoutMinutes: pulumi.Int(40),
//				InstanceType:             pulumi.String("dev.standard1.small"),
//				PersistentStorage: &codecatalyst.DevEnvironmentPersistentStorageArgs{
//					Size: pulumi.Int(16),
//				},
//				ProjectName: pulumi.String("myproject"),
//				Repositories: codecatalyst.DevEnvironmentRepositoryArray{
//					&codecatalyst.DevEnvironmentRepositoryArgs{
//						BranchName:     pulumi.String("main"),
//						RepositoryName: pulumi.String("pulumi-provider-aws"),
//					},
//				},
//				SpaceName: pulumi.String("myspace"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DevEnvironment struct {
	pulumi.CustomResourceState

	Alias pulumi.StringPtrOutput `pulumi:"alias"`
	// Information about the integrated development environment (IDE) configured for a Dev Environment.
	Ides DevEnvironmentIdesOutput `pulumi:"ides"`
	// The amount of time the Dev Environment will run without any activity detected before stopping, in minutes. Only whole integers are allowed. Dev Environments consume compute minutes when running.
	InactivityTimeoutMinutes pulumi.IntPtrOutput `pulumi:"inactivityTimeoutMinutes"`
	// The Amazon EC2 instace type to use for the Dev Environment. Valid values include dev.standard1.small,dev.standard1.medium,dev.standard1.large,dev.standard1.xlarge
	//
	// The following arguments are optional:
	InstanceType pulumi.StringOutput `pulumi:"instanceType"`
	// Information about the amount of storage allocated to the Dev Environment.
	PersistentStorage DevEnvironmentPersistentStorageOutput `pulumi:"persistentStorage"`
	// The name of the project in the space.
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// The source repository that contains the branch to clone into the Dev Environment.
	Repositories DevEnvironmentRepositoryArrayOutput `pulumi:"repositories"`
	// The name of the space.
	SpaceName pulumi.StringOutput `pulumi:"spaceName"`
}

// NewDevEnvironment registers a new resource with the given unique name, arguments, and options.
func NewDevEnvironment(ctx *pulumi.Context,
	name string, args *DevEnvironmentArgs, opts ...pulumi.ResourceOption) (*DevEnvironment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Ides == nil {
		return nil, errors.New("invalid value for required argument 'Ides'")
	}
	if args.InstanceType == nil {
		return nil, errors.New("invalid value for required argument 'InstanceType'")
	}
	if args.PersistentStorage == nil {
		return nil, errors.New("invalid value for required argument 'PersistentStorage'")
	}
	if args.ProjectName == nil {
		return nil, errors.New("invalid value for required argument 'ProjectName'")
	}
	if args.SpaceName == nil {
		return nil, errors.New("invalid value for required argument 'SpaceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DevEnvironment
	err := ctx.RegisterResource("aws:codecatalyst/devEnvironment:DevEnvironment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDevEnvironment gets an existing DevEnvironment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDevEnvironment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DevEnvironmentState, opts ...pulumi.ResourceOption) (*DevEnvironment, error) {
	var resource DevEnvironment
	err := ctx.ReadResource("aws:codecatalyst/devEnvironment:DevEnvironment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DevEnvironment resources.
type devEnvironmentState struct {
	Alias *string `pulumi:"alias"`
	// Information about the integrated development environment (IDE) configured for a Dev Environment.
	Ides *DevEnvironmentIdes `pulumi:"ides"`
	// The amount of time the Dev Environment will run without any activity detected before stopping, in minutes. Only whole integers are allowed. Dev Environments consume compute minutes when running.
	InactivityTimeoutMinutes *int `pulumi:"inactivityTimeoutMinutes"`
	// The Amazon EC2 instace type to use for the Dev Environment. Valid values include dev.standard1.small,dev.standard1.medium,dev.standard1.large,dev.standard1.xlarge
	//
	// The following arguments are optional:
	InstanceType *string `pulumi:"instanceType"`
	// Information about the amount of storage allocated to the Dev Environment.
	PersistentStorage *DevEnvironmentPersistentStorage `pulumi:"persistentStorage"`
	// The name of the project in the space.
	ProjectName *string `pulumi:"projectName"`
	// The source repository that contains the branch to clone into the Dev Environment.
	Repositories []DevEnvironmentRepository `pulumi:"repositories"`
	// The name of the space.
	SpaceName *string `pulumi:"spaceName"`
}

type DevEnvironmentState struct {
	Alias pulumi.StringPtrInput
	// Information about the integrated development environment (IDE) configured for a Dev Environment.
	Ides DevEnvironmentIdesPtrInput
	// The amount of time the Dev Environment will run without any activity detected before stopping, in minutes. Only whole integers are allowed. Dev Environments consume compute minutes when running.
	InactivityTimeoutMinutes pulumi.IntPtrInput
	// The Amazon EC2 instace type to use for the Dev Environment. Valid values include dev.standard1.small,dev.standard1.medium,dev.standard1.large,dev.standard1.xlarge
	//
	// The following arguments are optional:
	InstanceType pulumi.StringPtrInput
	// Information about the amount of storage allocated to the Dev Environment.
	PersistentStorage DevEnvironmentPersistentStoragePtrInput
	// The name of the project in the space.
	ProjectName pulumi.StringPtrInput
	// The source repository that contains the branch to clone into the Dev Environment.
	Repositories DevEnvironmentRepositoryArrayInput
	// The name of the space.
	SpaceName pulumi.StringPtrInput
}

func (DevEnvironmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*devEnvironmentState)(nil)).Elem()
}

type devEnvironmentArgs struct {
	Alias *string `pulumi:"alias"`
	// Information about the integrated development environment (IDE) configured for a Dev Environment.
	Ides DevEnvironmentIdes `pulumi:"ides"`
	// The amount of time the Dev Environment will run without any activity detected before stopping, in minutes. Only whole integers are allowed. Dev Environments consume compute minutes when running.
	InactivityTimeoutMinutes *int `pulumi:"inactivityTimeoutMinutes"`
	// The Amazon EC2 instace type to use for the Dev Environment. Valid values include dev.standard1.small,dev.standard1.medium,dev.standard1.large,dev.standard1.xlarge
	//
	// The following arguments are optional:
	InstanceType string `pulumi:"instanceType"`
	// Information about the amount of storage allocated to the Dev Environment.
	PersistentStorage DevEnvironmentPersistentStorage `pulumi:"persistentStorage"`
	// The name of the project in the space.
	ProjectName string `pulumi:"projectName"`
	// The source repository that contains the branch to clone into the Dev Environment.
	Repositories []DevEnvironmentRepository `pulumi:"repositories"`
	// The name of the space.
	SpaceName string `pulumi:"spaceName"`
}

// The set of arguments for constructing a DevEnvironment resource.
type DevEnvironmentArgs struct {
	Alias pulumi.StringPtrInput
	// Information about the integrated development environment (IDE) configured for a Dev Environment.
	Ides DevEnvironmentIdesInput
	// The amount of time the Dev Environment will run without any activity detected before stopping, in minutes. Only whole integers are allowed. Dev Environments consume compute minutes when running.
	InactivityTimeoutMinutes pulumi.IntPtrInput
	// The Amazon EC2 instace type to use for the Dev Environment. Valid values include dev.standard1.small,dev.standard1.medium,dev.standard1.large,dev.standard1.xlarge
	//
	// The following arguments are optional:
	InstanceType pulumi.StringInput
	// Information about the amount of storage allocated to the Dev Environment.
	PersistentStorage DevEnvironmentPersistentStorageInput
	// The name of the project in the space.
	ProjectName pulumi.StringInput
	// The source repository that contains the branch to clone into the Dev Environment.
	Repositories DevEnvironmentRepositoryArrayInput
	// The name of the space.
	SpaceName pulumi.StringInput
}

func (DevEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*devEnvironmentArgs)(nil)).Elem()
}

type DevEnvironmentInput interface {
	pulumi.Input

	ToDevEnvironmentOutput() DevEnvironmentOutput
	ToDevEnvironmentOutputWithContext(ctx context.Context) DevEnvironmentOutput
}

func (*DevEnvironment) ElementType() reflect.Type {
	return reflect.TypeOf((**DevEnvironment)(nil)).Elem()
}

func (i *DevEnvironment) ToDevEnvironmentOutput() DevEnvironmentOutput {
	return i.ToDevEnvironmentOutputWithContext(context.Background())
}

func (i *DevEnvironment) ToDevEnvironmentOutputWithContext(ctx context.Context) DevEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevEnvironmentOutput)
}

// DevEnvironmentArrayInput is an input type that accepts DevEnvironmentArray and DevEnvironmentArrayOutput values.
// You can construct a concrete instance of `DevEnvironmentArrayInput` via:
//
//	DevEnvironmentArray{ DevEnvironmentArgs{...} }
type DevEnvironmentArrayInput interface {
	pulumi.Input

	ToDevEnvironmentArrayOutput() DevEnvironmentArrayOutput
	ToDevEnvironmentArrayOutputWithContext(context.Context) DevEnvironmentArrayOutput
}

type DevEnvironmentArray []DevEnvironmentInput

func (DevEnvironmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DevEnvironment)(nil)).Elem()
}

func (i DevEnvironmentArray) ToDevEnvironmentArrayOutput() DevEnvironmentArrayOutput {
	return i.ToDevEnvironmentArrayOutputWithContext(context.Background())
}

func (i DevEnvironmentArray) ToDevEnvironmentArrayOutputWithContext(ctx context.Context) DevEnvironmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevEnvironmentArrayOutput)
}

// DevEnvironmentMapInput is an input type that accepts DevEnvironmentMap and DevEnvironmentMapOutput values.
// You can construct a concrete instance of `DevEnvironmentMapInput` via:
//
//	DevEnvironmentMap{ "key": DevEnvironmentArgs{...} }
type DevEnvironmentMapInput interface {
	pulumi.Input

	ToDevEnvironmentMapOutput() DevEnvironmentMapOutput
	ToDevEnvironmentMapOutputWithContext(context.Context) DevEnvironmentMapOutput
}

type DevEnvironmentMap map[string]DevEnvironmentInput

func (DevEnvironmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DevEnvironment)(nil)).Elem()
}

func (i DevEnvironmentMap) ToDevEnvironmentMapOutput() DevEnvironmentMapOutput {
	return i.ToDevEnvironmentMapOutputWithContext(context.Background())
}

func (i DevEnvironmentMap) ToDevEnvironmentMapOutputWithContext(ctx context.Context) DevEnvironmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevEnvironmentMapOutput)
}

type DevEnvironmentOutput struct{ *pulumi.OutputState }

func (DevEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DevEnvironment)(nil)).Elem()
}

func (o DevEnvironmentOutput) ToDevEnvironmentOutput() DevEnvironmentOutput {
	return o
}

func (o DevEnvironmentOutput) ToDevEnvironmentOutputWithContext(ctx context.Context) DevEnvironmentOutput {
	return o
}

func (o DevEnvironmentOutput) Alias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevEnvironment) pulumi.StringPtrOutput { return v.Alias }).(pulumi.StringPtrOutput)
}

// Information about the integrated development environment (IDE) configured for a Dev Environment.
func (o DevEnvironmentOutput) Ides() DevEnvironmentIdesOutput {
	return o.ApplyT(func(v *DevEnvironment) DevEnvironmentIdesOutput { return v.Ides }).(DevEnvironmentIdesOutput)
}

// The amount of time the Dev Environment will run without any activity detected before stopping, in minutes. Only whole integers are allowed. Dev Environments consume compute minutes when running.
func (o DevEnvironmentOutput) InactivityTimeoutMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DevEnvironment) pulumi.IntPtrOutput { return v.InactivityTimeoutMinutes }).(pulumi.IntPtrOutput)
}

// The Amazon EC2 instace type to use for the Dev Environment. Valid values include dev.standard1.small,dev.standard1.medium,dev.standard1.large,dev.standard1.xlarge
//
// The following arguments are optional:
func (o DevEnvironmentOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v *DevEnvironment) pulumi.StringOutput { return v.InstanceType }).(pulumi.StringOutput)
}

// Information about the amount of storage allocated to the Dev Environment.
func (o DevEnvironmentOutput) PersistentStorage() DevEnvironmentPersistentStorageOutput {
	return o.ApplyT(func(v *DevEnvironment) DevEnvironmentPersistentStorageOutput { return v.PersistentStorage }).(DevEnvironmentPersistentStorageOutput)
}

// The name of the project in the space.
func (o DevEnvironmentOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *DevEnvironment) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// The source repository that contains the branch to clone into the Dev Environment.
func (o DevEnvironmentOutput) Repositories() DevEnvironmentRepositoryArrayOutput {
	return o.ApplyT(func(v *DevEnvironment) DevEnvironmentRepositoryArrayOutput { return v.Repositories }).(DevEnvironmentRepositoryArrayOutput)
}

// The name of the space.
func (o DevEnvironmentOutput) SpaceName() pulumi.StringOutput {
	return o.ApplyT(func(v *DevEnvironment) pulumi.StringOutput { return v.SpaceName }).(pulumi.StringOutput)
}

type DevEnvironmentArrayOutput struct{ *pulumi.OutputState }

func (DevEnvironmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DevEnvironment)(nil)).Elem()
}

func (o DevEnvironmentArrayOutput) ToDevEnvironmentArrayOutput() DevEnvironmentArrayOutput {
	return o
}

func (o DevEnvironmentArrayOutput) ToDevEnvironmentArrayOutputWithContext(ctx context.Context) DevEnvironmentArrayOutput {
	return o
}

func (o DevEnvironmentArrayOutput) Index(i pulumi.IntInput) DevEnvironmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DevEnvironment {
		return vs[0].([]*DevEnvironment)[vs[1].(int)]
	}).(DevEnvironmentOutput)
}

type DevEnvironmentMapOutput struct{ *pulumi.OutputState }

func (DevEnvironmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DevEnvironment)(nil)).Elem()
}

func (o DevEnvironmentMapOutput) ToDevEnvironmentMapOutput() DevEnvironmentMapOutput {
	return o
}

func (o DevEnvironmentMapOutput) ToDevEnvironmentMapOutputWithContext(ctx context.Context) DevEnvironmentMapOutput {
	return o
}

func (o DevEnvironmentMapOutput) MapIndex(k pulumi.StringInput) DevEnvironmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DevEnvironment {
		return vs[0].(map[string]*DevEnvironment)[vs[1].(string)]
	}).(DevEnvironmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DevEnvironmentInput)(nil)).Elem(), &DevEnvironment{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevEnvironmentArrayInput)(nil)).Elem(), DevEnvironmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevEnvironmentMapInput)(nil)).Elem(), DevEnvironmentMap{})
	pulumi.RegisterOutputType(DevEnvironmentOutput{})
	pulumi.RegisterOutputType(DevEnvironmentArrayOutput{})
	pulumi.RegisterOutputType(DevEnvironmentMapOutput{})
}
