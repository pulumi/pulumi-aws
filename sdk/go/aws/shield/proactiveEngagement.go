// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package shield

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing a AWS Shield Proactive Engagement.
// Proactive engagement authorizes the Shield Response Team (SRT) to use email and phone to notify contacts about escalations to the SRT and to initiate proactive customer support.
//
// ## Example Usage
//
// ### Basic Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/iam"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/shield"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"version": "2012-10-17",
//				"statement": []map[string]interface{}{
//					map[string]interface{}{
//						"Sid":    "",
//						"Effect": "Allow",
//						"Principal": map[string]interface{}{
//							"Service": "drt.shield.amazonaws.com",
//						},
//						"Action": "sts:AssumeRole",
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			example, err := iam.NewRole(ctx, "example", &iam.RoleArgs{
//				Name:             pulumi.Any(awsShieldDrtAccessRoleArn),
//				AssumeRolePolicy: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = iam.NewRolePolicyAttachment(ctx, "example", &iam.RolePolicyAttachmentArgs{
//				Role:      example.Name,
//				PolicyArn: pulumi.String("arn:aws:iam::aws:policy/service-role/AWSShieldDRTAccessPolicy"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = shield.NewDrtAccessRoleArnAssociation(ctx, "example", &shield.DrtAccessRoleArnAssociationArgs{
//				RoleArn: example.Arn,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = shield.NewProtectionGroup(ctx, "test", &shield.ProtectionGroupArgs{
//				ProtectionGroupId: pulumi.String("example"),
//				Aggregation:       pulumi.String("MAX"),
//				Pattern:           pulumi.String("ALL"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = shield.NewProactiveEngagement(ctx, "test", &shield.ProactiveEngagementArgs{
//				Enabled: pulumi.Bool(true),
//				EmergencyContacts: shield.ProactiveEngagementEmergencyContactArray{
//					&shield.ProactiveEngagementEmergencyContactArgs{
//						ContactNotes: pulumi.String("Notes"),
//						EmailAddress: pulumi.String("test@company.com"),
//						PhoneNumber:  pulumi.String("+12358132134"),
//					},
//					&shield.ProactiveEngagementEmergencyContactArgs{
//						ContactNotes: pulumi.String("Notes 2"),
//						EmailAddress: pulumi.String("test2@company.com"),
//						PhoneNumber:  pulumi.String("+12358132134"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Using `pulumi import`, import Shield proactive engagement using the AWS account ID. For example:
//
// ```sh
// $ pulumi import aws:shield/proactiveEngagement:ProactiveEngagement example 123456789012
// ```
type ProactiveEngagement struct {
	pulumi.CustomResourceState

	// One or more emergency contacts. You must provide at least one phone number in the emergency contact list. See `emergencyContacts`.
	EmergencyContacts ProactiveEngagementEmergencyContactArrayOutput `pulumi:"emergencyContacts"`
	// Boolean value indicating if Proactive Engagement should be enabled or not.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
}

// NewProactiveEngagement registers a new resource with the given unique name, arguments, and options.
func NewProactiveEngagement(ctx *pulumi.Context,
	name string, args *ProactiveEngagementArgs, opts ...pulumi.ResourceOption) (*ProactiveEngagement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProactiveEngagement
	err := ctx.RegisterResource("aws:shield/proactiveEngagement:ProactiveEngagement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProactiveEngagement gets an existing ProactiveEngagement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProactiveEngagement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProactiveEngagementState, opts ...pulumi.ResourceOption) (*ProactiveEngagement, error) {
	var resource ProactiveEngagement
	err := ctx.ReadResource("aws:shield/proactiveEngagement:ProactiveEngagement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProactiveEngagement resources.
type proactiveEngagementState struct {
	// One or more emergency contacts. You must provide at least one phone number in the emergency contact list. See `emergencyContacts`.
	EmergencyContacts []ProactiveEngagementEmergencyContact `pulumi:"emergencyContacts"`
	// Boolean value indicating if Proactive Engagement should be enabled or not.
	Enabled *bool `pulumi:"enabled"`
}

type ProactiveEngagementState struct {
	// One or more emergency contacts. You must provide at least one phone number in the emergency contact list. See `emergencyContacts`.
	EmergencyContacts ProactiveEngagementEmergencyContactArrayInput
	// Boolean value indicating if Proactive Engagement should be enabled or not.
	Enabled pulumi.BoolPtrInput
}

func (ProactiveEngagementState) ElementType() reflect.Type {
	return reflect.TypeOf((*proactiveEngagementState)(nil)).Elem()
}

type proactiveEngagementArgs struct {
	// One or more emergency contacts. You must provide at least one phone number in the emergency contact list. See `emergencyContacts`.
	EmergencyContacts []ProactiveEngagementEmergencyContact `pulumi:"emergencyContacts"`
	// Boolean value indicating if Proactive Engagement should be enabled or not.
	Enabled bool `pulumi:"enabled"`
}

// The set of arguments for constructing a ProactiveEngagement resource.
type ProactiveEngagementArgs struct {
	// One or more emergency contacts. You must provide at least one phone number in the emergency contact list. See `emergencyContacts`.
	EmergencyContacts ProactiveEngagementEmergencyContactArrayInput
	// Boolean value indicating if Proactive Engagement should be enabled or not.
	Enabled pulumi.BoolInput
}

func (ProactiveEngagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*proactiveEngagementArgs)(nil)).Elem()
}

type ProactiveEngagementInput interface {
	pulumi.Input

	ToProactiveEngagementOutput() ProactiveEngagementOutput
	ToProactiveEngagementOutputWithContext(ctx context.Context) ProactiveEngagementOutput
}

func (*ProactiveEngagement) ElementType() reflect.Type {
	return reflect.TypeOf((**ProactiveEngagement)(nil)).Elem()
}

func (i *ProactiveEngagement) ToProactiveEngagementOutput() ProactiveEngagementOutput {
	return i.ToProactiveEngagementOutputWithContext(context.Background())
}

func (i *ProactiveEngagement) ToProactiveEngagementOutputWithContext(ctx context.Context) ProactiveEngagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProactiveEngagementOutput)
}

// ProactiveEngagementArrayInput is an input type that accepts ProactiveEngagementArray and ProactiveEngagementArrayOutput values.
// You can construct a concrete instance of `ProactiveEngagementArrayInput` via:
//
//	ProactiveEngagementArray{ ProactiveEngagementArgs{...} }
type ProactiveEngagementArrayInput interface {
	pulumi.Input

	ToProactiveEngagementArrayOutput() ProactiveEngagementArrayOutput
	ToProactiveEngagementArrayOutputWithContext(context.Context) ProactiveEngagementArrayOutput
}

type ProactiveEngagementArray []ProactiveEngagementInput

func (ProactiveEngagementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProactiveEngagement)(nil)).Elem()
}

func (i ProactiveEngagementArray) ToProactiveEngagementArrayOutput() ProactiveEngagementArrayOutput {
	return i.ToProactiveEngagementArrayOutputWithContext(context.Background())
}

func (i ProactiveEngagementArray) ToProactiveEngagementArrayOutputWithContext(ctx context.Context) ProactiveEngagementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProactiveEngagementArrayOutput)
}

// ProactiveEngagementMapInput is an input type that accepts ProactiveEngagementMap and ProactiveEngagementMapOutput values.
// You can construct a concrete instance of `ProactiveEngagementMapInput` via:
//
//	ProactiveEngagementMap{ "key": ProactiveEngagementArgs{...} }
type ProactiveEngagementMapInput interface {
	pulumi.Input

	ToProactiveEngagementMapOutput() ProactiveEngagementMapOutput
	ToProactiveEngagementMapOutputWithContext(context.Context) ProactiveEngagementMapOutput
}

type ProactiveEngagementMap map[string]ProactiveEngagementInput

func (ProactiveEngagementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProactiveEngagement)(nil)).Elem()
}

func (i ProactiveEngagementMap) ToProactiveEngagementMapOutput() ProactiveEngagementMapOutput {
	return i.ToProactiveEngagementMapOutputWithContext(context.Background())
}

func (i ProactiveEngagementMap) ToProactiveEngagementMapOutputWithContext(ctx context.Context) ProactiveEngagementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProactiveEngagementMapOutput)
}

type ProactiveEngagementOutput struct{ *pulumi.OutputState }

func (ProactiveEngagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProactiveEngagement)(nil)).Elem()
}

func (o ProactiveEngagementOutput) ToProactiveEngagementOutput() ProactiveEngagementOutput {
	return o
}

func (o ProactiveEngagementOutput) ToProactiveEngagementOutputWithContext(ctx context.Context) ProactiveEngagementOutput {
	return o
}

// One or more emergency contacts. You must provide at least one phone number in the emergency contact list. See `emergencyContacts`.
func (o ProactiveEngagementOutput) EmergencyContacts() ProactiveEngagementEmergencyContactArrayOutput {
	return o.ApplyT(func(v *ProactiveEngagement) ProactiveEngagementEmergencyContactArrayOutput {
		return v.EmergencyContacts
	}).(ProactiveEngagementEmergencyContactArrayOutput)
}

// Boolean value indicating if Proactive Engagement should be enabled or not.
func (o ProactiveEngagementOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProactiveEngagement) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

type ProactiveEngagementArrayOutput struct{ *pulumi.OutputState }

func (ProactiveEngagementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProactiveEngagement)(nil)).Elem()
}

func (o ProactiveEngagementArrayOutput) ToProactiveEngagementArrayOutput() ProactiveEngagementArrayOutput {
	return o
}

func (o ProactiveEngagementArrayOutput) ToProactiveEngagementArrayOutputWithContext(ctx context.Context) ProactiveEngagementArrayOutput {
	return o
}

func (o ProactiveEngagementArrayOutput) Index(i pulumi.IntInput) ProactiveEngagementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProactiveEngagement {
		return vs[0].([]*ProactiveEngagement)[vs[1].(int)]
	}).(ProactiveEngagementOutput)
}

type ProactiveEngagementMapOutput struct{ *pulumi.OutputState }

func (ProactiveEngagementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProactiveEngagement)(nil)).Elem()
}

func (o ProactiveEngagementMapOutput) ToProactiveEngagementMapOutput() ProactiveEngagementMapOutput {
	return o
}

func (o ProactiveEngagementMapOutput) ToProactiveEngagementMapOutputWithContext(ctx context.Context) ProactiveEngagementMapOutput {
	return o
}

func (o ProactiveEngagementMapOutput) MapIndex(k pulumi.StringInput) ProactiveEngagementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProactiveEngagement {
		return vs[0].(map[string]*ProactiveEngagement)[vs[1].(string)]
	}).(ProactiveEngagementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProactiveEngagementInput)(nil)).Elem(), &ProactiveEngagement{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProactiveEngagementArrayInput)(nil)).Elem(), ProactiveEngagementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProactiveEngagementMapInput)(nil)).Elem(), ProactiveEngagementMap{})
	pulumi.RegisterOutputType(ProactiveEngagementOutput{})
	pulumi.RegisterOutputType(ProactiveEngagementArrayOutput{})
	pulumi.RegisterOutputType(ProactiveEngagementMapOutput{})
}
