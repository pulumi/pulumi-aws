// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package shield

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Authorizes the Shield Response Team (SRT) using the specified role, to access your AWS account to assist with DDoS attack mitigation during potential attacks. For more information see [Configure AWS SRT Support](https://docs.aws.amazon.com/waf/latest/developerguide/authorize-srt.html)
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/iam"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/shield"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"Version": "2012-10-17",
//				"Statement": []map[string]interface{}{
//					map[string]interface{}{
//						"Sid":    "",
//						"Effect": "Allow",
//						"Principal": map[string]interface{}{
//							"Service": "drt.shield.amazonaws.com",
//						},
//						"Action": "sts:AssumeRole",
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			testRole, err := iam.NewRole(ctx, "testRole", &iam.RoleArgs{
//				AssumeRolePolicy: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = iam.NewRolePolicyAttachment(ctx, "testRolePolicyAttachment", &iam.RolePolicyAttachmentArgs{
//				Role:      testRole.Name,
//				PolicyArn: pulumi.String("arn:aws:iam::aws:policy/service-role/AWSShieldDRTAccessPolicy"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = shield.NewDrtAccessRoleArnAssociation(ctx, "testDrtAccessRoleArnAssociation", &shield.DrtAccessRoleArnAssociationArgs{
//				RoleArn: testRole.Arn,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DrtAccessRoleArnAssociation struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the role the SRT will use to access your AWS account. Prior to making the AssociateDRTRole request, you must attach the `AWSShieldDRTAccessPolicy` managed policy to this role.
	RoleArn  pulumi.StringOutput                          `pulumi:"roleArn"`
	Timeouts DrtAccessRoleArnAssociationTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewDrtAccessRoleArnAssociation registers a new resource with the given unique name, arguments, and options.
func NewDrtAccessRoleArnAssociation(ctx *pulumi.Context,
	name string, args *DrtAccessRoleArnAssociationArgs, opts ...pulumi.ResourceOption) (*DrtAccessRoleArnAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DrtAccessRoleArnAssociation
	err := ctx.RegisterResource("aws:shield/drtAccessRoleArnAssociation:DrtAccessRoleArnAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDrtAccessRoleArnAssociation gets an existing DrtAccessRoleArnAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDrtAccessRoleArnAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DrtAccessRoleArnAssociationState, opts ...pulumi.ResourceOption) (*DrtAccessRoleArnAssociation, error) {
	var resource DrtAccessRoleArnAssociation
	err := ctx.ReadResource("aws:shield/drtAccessRoleArnAssociation:DrtAccessRoleArnAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DrtAccessRoleArnAssociation resources.
type drtAccessRoleArnAssociationState struct {
	// The Amazon Resource Name (ARN) of the role the SRT will use to access your AWS account. Prior to making the AssociateDRTRole request, you must attach the `AWSShieldDRTAccessPolicy` managed policy to this role.
	RoleArn  *string                              `pulumi:"roleArn"`
	Timeouts *DrtAccessRoleArnAssociationTimeouts `pulumi:"timeouts"`
}

type DrtAccessRoleArnAssociationState struct {
	// The Amazon Resource Name (ARN) of the role the SRT will use to access your AWS account. Prior to making the AssociateDRTRole request, you must attach the `AWSShieldDRTAccessPolicy` managed policy to this role.
	RoleArn  pulumi.StringPtrInput
	Timeouts DrtAccessRoleArnAssociationTimeoutsPtrInput
}

func (DrtAccessRoleArnAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*drtAccessRoleArnAssociationState)(nil)).Elem()
}

type drtAccessRoleArnAssociationArgs struct {
	// The Amazon Resource Name (ARN) of the role the SRT will use to access your AWS account. Prior to making the AssociateDRTRole request, you must attach the `AWSShieldDRTAccessPolicy` managed policy to this role.
	RoleArn  string                               `pulumi:"roleArn"`
	Timeouts *DrtAccessRoleArnAssociationTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a DrtAccessRoleArnAssociation resource.
type DrtAccessRoleArnAssociationArgs struct {
	// The Amazon Resource Name (ARN) of the role the SRT will use to access your AWS account. Prior to making the AssociateDRTRole request, you must attach the `AWSShieldDRTAccessPolicy` managed policy to this role.
	RoleArn  pulumi.StringInput
	Timeouts DrtAccessRoleArnAssociationTimeoutsPtrInput
}

func (DrtAccessRoleArnAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*drtAccessRoleArnAssociationArgs)(nil)).Elem()
}

type DrtAccessRoleArnAssociationInput interface {
	pulumi.Input

	ToDrtAccessRoleArnAssociationOutput() DrtAccessRoleArnAssociationOutput
	ToDrtAccessRoleArnAssociationOutputWithContext(ctx context.Context) DrtAccessRoleArnAssociationOutput
}

func (*DrtAccessRoleArnAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**DrtAccessRoleArnAssociation)(nil)).Elem()
}

func (i *DrtAccessRoleArnAssociation) ToDrtAccessRoleArnAssociationOutput() DrtAccessRoleArnAssociationOutput {
	return i.ToDrtAccessRoleArnAssociationOutputWithContext(context.Background())
}

func (i *DrtAccessRoleArnAssociation) ToDrtAccessRoleArnAssociationOutputWithContext(ctx context.Context) DrtAccessRoleArnAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DrtAccessRoleArnAssociationOutput)
}

// DrtAccessRoleArnAssociationArrayInput is an input type that accepts DrtAccessRoleArnAssociationArray and DrtAccessRoleArnAssociationArrayOutput values.
// You can construct a concrete instance of `DrtAccessRoleArnAssociationArrayInput` via:
//
//	DrtAccessRoleArnAssociationArray{ DrtAccessRoleArnAssociationArgs{...} }
type DrtAccessRoleArnAssociationArrayInput interface {
	pulumi.Input

	ToDrtAccessRoleArnAssociationArrayOutput() DrtAccessRoleArnAssociationArrayOutput
	ToDrtAccessRoleArnAssociationArrayOutputWithContext(context.Context) DrtAccessRoleArnAssociationArrayOutput
}

type DrtAccessRoleArnAssociationArray []DrtAccessRoleArnAssociationInput

func (DrtAccessRoleArnAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DrtAccessRoleArnAssociation)(nil)).Elem()
}

func (i DrtAccessRoleArnAssociationArray) ToDrtAccessRoleArnAssociationArrayOutput() DrtAccessRoleArnAssociationArrayOutput {
	return i.ToDrtAccessRoleArnAssociationArrayOutputWithContext(context.Background())
}

func (i DrtAccessRoleArnAssociationArray) ToDrtAccessRoleArnAssociationArrayOutputWithContext(ctx context.Context) DrtAccessRoleArnAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DrtAccessRoleArnAssociationArrayOutput)
}

// DrtAccessRoleArnAssociationMapInput is an input type that accepts DrtAccessRoleArnAssociationMap and DrtAccessRoleArnAssociationMapOutput values.
// You can construct a concrete instance of `DrtAccessRoleArnAssociationMapInput` via:
//
//	DrtAccessRoleArnAssociationMap{ "key": DrtAccessRoleArnAssociationArgs{...} }
type DrtAccessRoleArnAssociationMapInput interface {
	pulumi.Input

	ToDrtAccessRoleArnAssociationMapOutput() DrtAccessRoleArnAssociationMapOutput
	ToDrtAccessRoleArnAssociationMapOutputWithContext(context.Context) DrtAccessRoleArnAssociationMapOutput
}

type DrtAccessRoleArnAssociationMap map[string]DrtAccessRoleArnAssociationInput

func (DrtAccessRoleArnAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DrtAccessRoleArnAssociation)(nil)).Elem()
}

func (i DrtAccessRoleArnAssociationMap) ToDrtAccessRoleArnAssociationMapOutput() DrtAccessRoleArnAssociationMapOutput {
	return i.ToDrtAccessRoleArnAssociationMapOutputWithContext(context.Background())
}

func (i DrtAccessRoleArnAssociationMap) ToDrtAccessRoleArnAssociationMapOutputWithContext(ctx context.Context) DrtAccessRoleArnAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DrtAccessRoleArnAssociationMapOutput)
}

type DrtAccessRoleArnAssociationOutput struct{ *pulumi.OutputState }

func (DrtAccessRoleArnAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DrtAccessRoleArnAssociation)(nil)).Elem()
}

func (o DrtAccessRoleArnAssociationOutput) ToDrtAccessRoleArnAssociationOutput() DrtAccessRoleArnAssociationOutput {
	return o
}

func (o DrtAccessRoleArnAssociationOutput) ToDrtAccessRoleArnAssociationOutputWithContext(ctx context.Context) DrtAccessRoleArnAssociationOutput {
	return o
}

// The Amazon Resource Name (ARN) of the role the SRT will use to access your AWS account. Prior to making the AssociateDRTRole request, you must attach the `AWSShieldDRTAccessPolicy` managed policy to this role.
func (o DrtAccessRoleArnAssociationOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *DrtAccessRoleArnAssociation) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

func (o DrtAccessRoleArnAssociationOutput) Timeouts() DrtAccessRoleArnAssociationTimeoutsPtrOutput {
	return o.ApplyT(func(v *DrtAccessRoleArnAssociation) DrtAccessRoleArnAssociationTimeoutsPtrOutput { return v.Timeouts }).(DrtAccessRoleArnAssociationTimeoutsPtrOutput)
}

type DrtAccessRoleArnAssociationArrayOutput struct{ *pulumi.OutputState }

func (DrtAccessRoleArnAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DrtAccessRoleArnAssociation)(nil)).Elem()
}

func (o DrtAccessRoleArnAssociationArrayOutput) ToDrtAccessRoleArnAssociationArrayOutput() DrtAccessRoleArnAssociationArrayOutput {
	return o
}

func (o DrtAccessRoleArnAssociationArrayOutput) ToDrtAccessRoleArnAssociationArrayOutputWithContext(ctx context.Context) DrtAccessRoleArnAssociationArrayOutput {
	return o
}

func (o DrtAccessRoleArnAssociationArrayOutput) Index(i pulumi.IntInput) DrtAccessRoleArnAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DrtAccessRoleArnAssociation {
		return vs[0].([]*DrtAccessRoleArnAssociation)[vs[1].(int)]
	}).(DrtAccessRoleArnAssociationOutput)
}

type DrtAccessRoleArnAssociationMapOutput struct{ *pulumi.OutputState }

func (DrtAccessRoleArnAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DrtAccessRoleArnAssociation)(nil)).Elem()
}

func (o DrtAccessRoleArnAssociationMapOutput) ToDrtAccessRoleArnAssociationMapOutput() DrtAccessRoleArnAssociationMapOutput {
	return o
}

func (o DrtAccessRoleArnAssociationMapOutput) ToDrtAccessRoleArnAssociationMapOutputWithContext(ctx context.Context) DrtAccessRoleArnAssociationMapOutput {
	return o
}

func (o DrtAccessRoleArnAssociationMapOutput) MapIndex(k pulumi.StringInput) DrtAccessRoleArnAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DrtAccessRoleArnAssociation {
		return vs[0].(map[string]*DrtAccessRoleArnAssociation)[vs[1].(string)]
	}).(DrtAccessRoleArnAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DrtAccessRoleArnAssociationInput)(nil)).Elem(), &DrtAccessRoleArnAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*DrtAccessRoleArnAssociationArrayInput)(nil)).Elem(), DrtAccessRoleArnAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DrtAccessRoleArnAssociationMapInput)(nil)).Elem(), DrtAccessRoleArnAssociationMap{})
	pulumi.RegisterOutputType(DrtAccessRoleArnAssociationOutput{})
	pulumi.RegisterOutputType(DrtAccessRoleArnAssociationArrayOutput{})
	pulumi.RegisterOutputType(DrtAccessRoleArnAssociationMapOutput{})
}
