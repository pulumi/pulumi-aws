// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package shield

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Protection struct {
	pulumi.CustomResourceState

	Arn         pulumi.StringOutput    `pulumi:"arn"`
	Name        pulumi.StringOutput    `pulumi:"name"`
	ResourceArn pulumi.StringOutput    `pulumi:"resourceArn"`
	Tags        pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll     pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewProtection registers a new resource with the given unique name, arguments, and options.
func NewProtection(ctx *pulumi.Context,
	name string, args *ProtectionArgs, opts ...pulumi.ResourceOption) (*Protection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceArn == nil {
		return nil, errors.New("invalid value for required argument 'ResourceArn'")
	}
	var resource Protection
	err := ctx.RegisterResource("aws:shield/protection:Protection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProtection gets an existing Protection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProtection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProtectionState, opts ...pulumi.ResourceOption) (*Protection, error) {
	var resource Protection
	err := ctx.ReadResource("aws:shield/protection:Protection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Protection resources.
type protectionState struct {
	Arn         *string           `pulumi:"arn"`
	Name        *string           `pulumi:"name"`
	ResourceArn *string           `pulumi:"resourceArn"`
	Tags        map[string]string `pulumi:"tags"`
	TagsAll     map[string]string `pulumi:"tagsAll"`
}

type ProtectionState struct {
	Arn         pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	ResourceArn pulumi.StringPtrInput
	Tags        pulumi.StringMapInput
	TagsAll     pulumi.StringMapInput
}

func (ProtectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*protectionState)(nil)).Elem()
}

type protectionArgs struct {
	Name        *string           `pulumi:"name"`
	ResourceArn string            `pulumi:"resourceArn"`
	Tags        map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Protection resource.
type ProtectionArgs struct {
	Name        pulumi.StringPtrInput
	ResourceArn pulumi.StringInput
	Tags        pulumi.StringMapInput
}

func (ProtectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*protectionArgs)(nil)).Elem()
}

type ProtectionInput interface {
	pulumi.Input

	ToProtectionOutput() ProtectionOutput
	ToProtectionOutputWithContext(ctx context.Context) ProtectionOutput
}

func (*Protection) ElementType() reflect.Type {
	return reflect.TypeOf((**Protection)(nil)).Elem()
}

func (i *Protection) ToProtectionOutput() ProtectionOutput {
	return i.ToProtectionOutputWithContext(context.Background())
}

func (i *Protection) ToProtectionOutputWithContext(ctx context.Context) ProtectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProtectionOutput)
}

// ProtectionArrayInput is an input type that accepts ProtectionArray and ProtectionArrayOutput values.
// You can construct a concrete instance of `ProtectionArrayInput` via:
//
//	ProtectionArray{ ProtectionArgs{...} }
type ProtectionArrayInput interface {
	pulumi.Input

	ToProtectionArrayOutput() ProtectionArrayOutput
	ToProtectionArrayOutputWithContext(context.Context) ProtectionArrayOutput
}

type ProtectionArray []ProtectionInput

func (ProtectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Protection)(nil)).Elem()
}

func (i ProtectionArray) ToProtectionArrayOutput() ProtectionArrayOutput {
	return i.ToProtectionArrayOutputWithContext(context.Background())
}

func (i ProtectionArray) ToProtectionArrayOutputWithContext(ctx context.Context) ProtectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProtectionArrayOutput)
}

// ProtectionMapInput is an input type that accepts ProtectionMap and ProtectionMapOutput values.
// You can construct a concrete instance of `ProtectionMapInput` via:
//
//	ProtectionMap{ "key": ProtectionArgs{...} }
type ProtectionMapInput interface {
	pulumi.Input

	ToProtectionMapOutput() ProtectionMapOutput
	ToProtectionMapOutputWithContext(context.Context) ProtectionMapOutput
}

type ProtectionMap map[string]ProtectionInput

func (ProtectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Protection)(nil)).Elem()
}

func (i ProtectionMap) ToProtectionMapOutput() ProtectionMapOutput {
	return i.ToProtectionMapOutputWithContext(context.Background())
}

func (i ProtectionMap) ToProtectionMapOutputWithContext(ctx context.Context) ProtectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProtectionMapOutput)
}

type ProtectionOutput struct{ *pulumi.OutputState }

func (ProtectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Protection)(nil)).Elem()
}

func (o ProtectionOutput) ToProtectionOutput() ProtectionOutput {
	return o
}

func (o ProtectionOutput) ToProtectionOutputWithContext(ctx context.Context) ProtectionOutput {
	return o
}

func (o ProtectionOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Protection) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ProtectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Protection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ProtectionOutput) ResourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Protection) pulumi.StringOutput { return v.ResourceArn }).(pulumi.StringOutput)
}

func (o ProtectionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Protection) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ProtectionOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Protection) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type ProtectionArrayOutput struct{ *pulumi.OutputState }

func (ProtectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Protection)(nil)).Elem()
}

func (o ProtectionArrayOutput) ToProtectionArrayOutput() ProtectionArrayOutput {
	return o
}

func (o ProtectionArrayOutput) ToProtectionArrayOutputWithContext(ctx context.Context) ProtectionArrayOutput {
	return o
}

func (o ProtectionArrayOutput) Index(i pulumi.IntInput) ProtectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Protection {
		return vs[0].([]*Protection)[vs[1].(int)]
	}).(ProtectionOutput)
}

type ProtectionMapOutput struct{ *pulumi.OutputState }

func (ProtectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Protection)(nil)).Elem()
}

func (o ProtectionMapOutput) ToProtectionMapOutput() ProtectionMapOutput {
	return o
}

func (o ProtectionMapOutput) ToProtectionMapOutputWithContext(ctx context.Context) ProtectionMapOutput {
	return o
}

func (o ProtectionMapOutput) MapIndex(k pulumi.StringInput) ProtectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Protection {
		return vs[0].(map[string]*Protection)[vs[1].(string)]
	}).(ProtectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProtectionInput)(nil)).Elem(), &Protection{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProtectionArrayInput)(nil)).Elem(), ProtectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProtectionMapInput)(nil)).Elem(), ProtectionMap{})
	pulumi.RegisterOutputType(ProtectionOutput{})
	pulumi.RegisterOutputType(ProtectionArrayOutput{})
	pulumi.RegisterOutputType(ProtectionMapOutput{})
}
