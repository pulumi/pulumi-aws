// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package shield

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS Shield DRT Access Log Bucket Association. Up to 10 log buckets can be associated for DRT Access sharing with the Shield Response Team (SRT).
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/shield"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testDrtAccessRoleArnAssociation, err := shield.NewDrtAccessRoleArnAssociation(ctx, "testDrtAccessRoleArnAssociation", &shield.DrtAccessRoleArnAssociationArgs{
//				RoleArn: pulumi.String(fmt.Sprintf("arn:aws:iam:%v:%v:%v", data.Aws_region.Current.Name, data.Aws_caller_identity.Current.Account_id, _var.Shield_drt_access_role_name)),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = shield.NewDrtAccessLogBucketAssociation(ctx, "testDrtAccessLogBucketAssociation", &shield.DrtAccessLogBucketAssociationArgs{
//				LogBucket:            pulumi.Any(_var.Shield_drt_access_log_bucket),
//				RoleArnAssociationId: testDrtAccessRoleArnAssociation.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DrtAccessLogBucketAssociation struct {
	pulumi.CustomResourceState

	// The Amazon S3 bucket that contains the logs that you want to share.
	LogBucket pulumi.StringOutput `pulumi:"logBucket"`
	// The ID of the Role Arn association used for allowing Shield DRT Access.
	RoleArnAssociationId pulumi.StringOutput                            `pulumi:"roleArnAssociationId"`
	Timeouts             DrtAccessLogBucketAssociationTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewDrtAccessLogBucketAssociation registers a new resource with the given unique name, arguments, and options.
func NewDrtAccessLogBucketAssociation(ctx *pulumi.Context,
	name string, args *DrtAccessLogBucketAssociationArgs, opts ...pulumi.ResourceOption) (*DrtAccessLogBucketAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LogBucket == nil {
		return nil, errors.New("invalid value for required argument 'LogBucket'")
	}
	if args.RoleArnAssociationId == nil {
		return nil, errors.New("invalid value for required argument 'RoleArnAssociationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DrtAccessLogBucketAssociation
	err := ctx.RegisterResource("aws:shield/drtAccessLogBucketAssociation:DrtAccessLogBucketAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDrtAccessLogBucketAssociation gets an existing DrtAccessLogBucketAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDrtAccessLogBucketAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DrtAccessLogBucketAssociationState, opts ...pulumi.ResourceOption) (*DrtAccessLogBucketAssociation, error) {
	var resource DrtAccessLogBucketAssociation
	err := ctx.ReadResource("aws:shield/drtAccessLogBucketAssociation:DrtAccessLogBucketAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DrtAccessLogBucketAssociation resources.
type drtAccessLogBucketAssociationState struct {
	// The Amazon S3 bucket that contains the logs that you want to share.
	LogBucket *string `pulumi:"logBucket"`
	// The ID of the Role Arn association used for allowing Shield DRT Access.
	RoleArnAssociationId *string                                `pulumi:"roleArnAssociationId"`
	Timeouts             *DrtAccessLogBucketAssociationTimeouts `pulumi:"timeouts"`
}

type DrtAccessLogBucketAssociationState struct {
	// The Amazon S3 bucket that contains the logs that you want to share.
	LogBucket pulumi.StringPtrInput
	// The ID of the Role Arn association used for allowing Shield DRT Access.
	RoleArnAssociationId pulumi.StringPtrInput
	Timeouts             DrtAccessLogBucketAssociationTimeoutsPtrInput
}

func (DrtAccessLogBucketAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*drtAccessLogBucketAssociationState)(nil)).Elem()
}

type drtAccessLogBucketAssociationArgs struct {
	// The Amazon S3 bucket that contains the logs that you want to share.
	LogBucket string `pulumi:"logBucket"`
	// The ID of the Role Arn association used for allowing Shield DRT Access.
	RoleArnAssociationId string                                 `pulumi:"roleArnAssociationId"`
	Timeouts             *DrtAccessLogBucketAssociationTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a DrtAccessLogBucketAssociation resource.
type DrtAccessLogBucketAssociationArgs struct {
	// The Amazon S3 bucket that contains the logs that you want to share.
	LogBucket pulumi.StringInput
	// The ID of the Role Arn association used for allowing Shield DRT Access.
	RoleArnAssociationId pulumi.StringInput
	Timeouts             DrtAccessLogBucketAssociationTimeoutsPtrInput
}

func (DrtAccessLogBucketAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*drtAccessLogBucketAssociationArgs)(nil)).Elem()
}

type DrtAccessLogBucketAssociationInput interface {
	pulumi.Input

	ToDrtAccessLogBucketAssociationOutput() DrtAccessLogBucketAssociationOutput
	ToDrtAccessLogBucketAssociationOutputWithContext(ctx context.Context) DrtAccessLogBucketAssociationOutput
}

func (*DrtAccessLogBucketAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**DrtAccessLogBucketAssociation)(nil)).Elem()
}

func (i *DrtAccessLogBucketAssociation) ToDrtAccessLogBucketAssociationOutput() DrtAccessLogBucketAssociationOutput {
	return i.ToDrtAccessLogBucketAssociationOutputWithContext(context.Background())
}

func (i *DrtAccessLogBucketAssociation) ToDrtAccessLogBucketAssociationOutputWithContext(ctx context.Context) DrtAccessLogBucketAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DrtAccessLogBucketAssociationOutput)
}

// DrtAccessLogBucketAssociationArrayInput is an input type that accepts DrtAccessLogBucketAssociationArray and DrtAccessLogBucketAssociationArrayOutput values.
// You can construct a concrete instance of `DrtAccessLogBucketAssociationArrayInput` via:
//
//	DrtAccessLogBucketAssociationArray{ DrtAccessLogBucketAssociationArgs{...} }
type DrtAccessLogBucketAssociationArrayInput interface {
	pulumi.Input

	ToDrtAccessLogBucketAssociationArrayOutput() DrtAccessLogBucketAssociationArrayOutput
	ToDrtAccessLogBucketAssociationArrayOutputWithContext(context.Context) DrtAccessLogBucketAssociationArrayOutput
}

type DrtAccessLogBucketAssociationArray []DrtAccessLogBucketAssociationInput

func (DrtAccessLogBucketAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DrtAccessLogBucketAssociation)(nil)).Elem()
}

func (i DrtAccessLogBucketAssociationArray) ToDrtAccessLogBucketAssociationArrayOutput() DrtAccessLogBucketAssociationArrayOutput {
	return i.ToDrtAccessLogBucketAssociationArrayOutputWithContext(context.Background())
}

func (i DrtAccessLogBucketAssociationArray) ToDrtAccessLogBucketAssociationArrayOutputWithContext(ctx context.Context) DrtAccessLogBucketAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DrtAccessLogBucketAssociationArrayOutput)
}

// DrtAccessLogBucketAssociationMapInput is an input type that accepts DrtAccessLogBucketAssociationMap and DrtAccessLogBucketAssociationMapOutput values.
// You can construct a concrete instance of `DrtAccessLogBucketAssociationMapInput` via:
//
//	DrtAccessLogBucketAssociationMap{ "key": DrtAccessLogBucketAssociationArgs{...} }
type DrtAccessLogBucketAssociationMapInput interface {
	pulumi.Input

	ToDrtAccessLogBucketAssociationMapOutput() DrtAccessLogBucketAssociationMapOutput
	ToDrtAccessLogBucketAssociationMapOutputWithContext(context.Context) DrtAccessLogBucketAssociationMapOutput
}

type DrtAccessLogBucketAssociationMap map[string]DrtAccessLogBucketAssociationInput

func (DrtAccessLogBucketAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DrtAccessLogBucketAssociation)(nil)).Elem()
}

func (i DrtAccessLogBucketAssociationMap) ToDrtAccessLogBucketAssociationMapOutput() DrtAccessLogBucketAssociationMapOutput {
	return i.ToDrtAccessLogBucketAssociationMapOutputWithContext(context.Background())
}

func (i DrtAccessLogBucketAssociationMap) ToDrtAccessLogBucketAssociationMapOutputWithContext(ctx context.Context) DrtAccessLogBucketAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DrtAccessLogBucketAssociationMapOutput)
}

type DrtAccessLogBucketAssociationOutput struct{ *pulumi.OutputState }

func (DrtAccessLogBucketAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DrtAccessLogBucketAssociation)(nil)).Elem()
}

func (o DrtAccessLogBucketAssociationOutput) ToDrtAccessLogBucketAssociationOutput() DrtAccessLogBucketAssociationOutput {
	return o
}

func (o DrtAccessLogBucketAssociationOutput) ToDrtAccessLogBucketAssociationOutputWithContext(ctx context.Context) DrtAccessLogBucketAssociationOutput {
	return o
}

// The Amazon S3 bucket that contains the logs that you want to share.
func (o DrtAccessLogBucketAssociationOutput) LogBucket() pulumi.StringOutput {
	return o.ApplyT(func(v *DrtAccessLogBucketAssociation) pulumi.StringOutput { return v.LogBucket }).(pulumi.StringOutput)
}

// The ID of the Role Arn association used for allowing Shield DRT Access.
func (o DrtAccessLogBucketAssociationOutput) RoleArnAssociationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DrtAccessLogBucketAssociation) pulumi.StringOutput { return v.RoleArnAssociationId }).(pulumi.StringOutput)
}

func (o DrtAccessLogBucketAssociationOutput) Timeouts() DrtAccessLogBucketAssociationTimeoutsPtrOutput {
	return o.ApplyT(func(v *DrtAccessLogBucketAssociation) DrtAccessLogBucketAssociationTimeoutsPtrOutput {
		return v.Timeouts
	}).(DrtAccessLogBucketAssociationTimeoutsPtrOutput)
}

type DrtAccessLogBucketAssociationArrayOutput struct{ *pulumi.OutputState }

func (DrtAccessLogBucketAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DrtAccessLogBucketAssociation)(nil)).Elem()
}

func (o DrtAccessLogBucketAssociationArrayOutput) ToDrtAccessLogBucketAssociationArrayOutput() DrtAccessLogBucketAssociationArrayOutput {
	return o
}

func (o DrtAccessLogBucketAssociationArrayOutput) ToDrtAccessLogBucketAssociationArrayOutputWithContext(ctx context.Context) DrtAccessLogBucketAssociationArrayOutput {
	return o
}

func (o DrtAccessLogBucketAssociationArrayOutput) Index(i pulumi.IntInput) DrtAccessLogBucketAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DrtAccessLogBucketAssociation {
		return vs[0].([]*DrtAccessLogBucketAssociation)[vs[1].(int)]
	}).(DrtAccessLogBucketAssociationOutput)
}

type DrtAccessLogBucketAssociationMapOutput struct{ *pulumi.OutputState }

func (DrtAccessLogBucketAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DrtAccessLogBucketAssociation)(nil)).Elem()
}

func (o DrtAccessLogBucketAssociationMapOutput) ToDrtAccessLogBucketAssociationMapOutput() DrtAccessLogBucketAssociationMapOutput {
	return o
}

func (o DrtAccessLogBucketAssociationMapOutput) ToDrtAccessLogBucketAssociationMapOutputWithContext(ctx context.Context) DrtAccessLogBucketAssociationMapOutput {
	return o
}

func (o DrtAccessLogBucketAssociationMapOutput) MapIndex(k pulumi.StringInput) DrtAccessLogBucketAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DrtAccessLogBucketAssociation {
		return vs[0].(map[string]*DrtAccessLogBucketAssociation)[vs[1].(string)]
	}).(DrtAccessLogBucketAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DrtAccessLogBucketAssociationInput)(nil)).Elem(), &DrtAccessLogBucketAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*DrtAccessLogBucketAssociationArrayInput)(nil)).Elem(), DrtAccessLogBucketAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DrtAccessLogBucketAssociationMapInput)(nil)).Elem(), DrtAccessLogBucketAssociationMap{})
	pulumi.RegisterOutputType(DrtAccessLogBucketAssociationOutput{})
	pulumi.RegisterOutputType(DrtAccessLogBucketAssociationArrayOutput{})
	pulumi.RegisterOutputType(DrtAccessLogBucketAssociationMapOutput{})
}
