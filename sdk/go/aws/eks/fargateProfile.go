// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eks

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FargateProfile struct {
	pulumi.CustomResourceState

	Arn                 pulumi.StringOutput               `pulumi:"arn"`
	ClusterName         pulumi.StringOutput               `pulumi:"clusterName"`
	FargateProfileName  pulumi.StringOutput               `pulumi:"fargateProfileName"`
	PodExecutionRoleArn pulumi.StringOutput               `pulumi:"podExecutionRoleArn"`
	Selectors           FargateProfileSelectorArrayOutput `pulumi:"selectors"`
	Status              pulumi.StringOutput               `pulumi:"status"`
	SubnetIds           pulumi.StringArrayOutput          `pulumi:"subnetIds"`
	Tags                pulumi.StringMapOutput            `pulumi:"tags"`
	TagsAll             pulumi.StringMapOutput            `pulumi:"tagsAll"`
}

// NewFargateProfile registers a new resource with the given unique name, arguments, and options.
func NewFargateProfile(ctx *pulumi.Context,
	name string, args *FargateProfileArgs, opts ...pulumi.ResourceOption) (*FargateProfile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	if args.PodExecutionRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'PodExecutionRoleArn'")
	}
	if args.Selectors == nil {
		return nil, errors.New("invalid value for required argument 'Selectors'")
	}
	var resource FargateProfile
	err := ctx.RegisterResource("aws:eks/fargateProfile:FargateProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFargateProfile gets an existing FargateProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFargateProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FargateProfileState, opts ...pulumi.ResourceOption) (*FargateProfile, error) {
	var resource FargateProfile
	err := ctx.ReadResource("aws:eks/fargateProfile:FargateProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FargateProfile resources.
type fargateProfileState struct {
	Arn                 *string                  `pulumi:"arn"`
	ClusterName         *string                  `pulumi:"clusterName"`
	FargateProfileName  *string                  `pulumi:"fargateProfileName"`
	PodExecutionRoleArn *string                  `pulumi:"podExecutionRoleArn"`
	Selectors           []FargateProfileSelector `pulumi:"selectors"`
	Status              *string                  `pulumi:"status"`
	SubnetIds           []string                 `pulumi:"subnetIds"`
	Tags                map[string]string        `pulumi:"tags"`
	TagsAll             map[string]string        `pulumi:"tagsAll"`
}

type FargateProfileState struct {
	Arn                 pulumi.StringPtrInput
	ClusterName         pulumi.StringPtrInput
	FargateProfileName  pulumi.StringPtrInput
	PodExecutionRoleArn pulumi.StringPtrInput
	Selectors           FargateProfileSelectorArrayInput
	Status              pulumi.StringPtrInput
	SubnetIds           pulumi.StringArrayInput
	Tags                pulumi.StringMapInput
	TagsAll             pulumi.StringMapInput
}

func (FargateProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*fargateProfileState)(nil)).Elem()
}

type fargateProfileArgs struct {
	ClusterName         string                   `pulumi:"clusterName"`
	FargateProfileName  *string                  `pulumi:"fargateProfileName"`
	PodExecutionRoleArn string                   `pulumi:"podExecutionRoleArn"`
	Selectors           []FargateProfileSelector `pulumi:"selectors"`
	SubnetIds           []string                 `pulumi:"subnetIds"`
	Tags                map[string]string        `pulumi:"tags"`
}

// The set of arguments for constructing a FargateProfile resource.
type FargateProfileArgs struct {
	ClusterName         pulumi.StringInput
	FargateProfileName  pulumi.StringPtrInput
	PodExecutionRoleArn pulumi.StringInput
	Selectors           FargateProfileSelectorArrayInput
	SubnetIds           pulumi.StringArrayInput
	Tags                pulumi.StringMapInput
}

func (FargateProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fargateProfileArgs)(nil)).Elem()
}

type FargateProfileInput interface {
	pulumi.Input

	ToFargateProfileOutput() FargateProfileOutput
	ToFargateProfileOutputWithContext(ctx context.Context) FargateProfileOutput
}

func (*FargateProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**FargateProfile)(nil)).Elem()
}

func (i *FargateProfile) ToFargateProfileOutput() FargateProfileOutput {
	return i.ToFargateProfileOutputWithContext(context.Background())
}

func (i *FargateProfile) ToFargateProfileOutputWithContext(ctx context.Context) FargateProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FargateProfileOutput)
}

// FargateProfileArrayInput is an input type that accepts FargateProfileArray and FargateProfileArrayOutput values.
// You can construct a concrete instance of `FargateProfileArrayInput` via:
//
//	FargateProfileArray{ FargateProfileArgs{...} }
type FargateProfileArrayInput interface {
	pulumi.Input

	ToFargateProfileArrayOutput() FargateProfileArrayOutput
	ToFargateProfileArrayOutputWithContext(context.Context) FargateProfileArrayOutput
}

type FargateProfileArray []FargateProfileInput

func (FargateProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FargateProfile)(nil)).Elem()
}

func (i FargateProfileArray) ToFargateProfileArrayOutput() FargateProfileArrayOutput {
	return i.ToFargateProfileArrayOutputWithContext(context.Background())
}

func (i FargateProfileArray) ToFargateProfileArrayOutputWithContext(ctx context.Context) FargateProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FargateProfileArrayOutput)
}

// FargateProfileMapInput is an input type that accepts FargateProfileMap and FargateProfileMapOutput values.
// You can construct a concrete instance of `FargateProfileMapInput` via:
//
//	FargateProfileMap{ "key": FargateProfileArgs{...} }
type FargateProfileMapInput interface {
	pulumi.Input

	ToFargateProfileMapOutput() FargateProfileMapOutput
	ToFargateProfileMapOutputWithContext(context.Context) FargateProfileMapOutput
}

type FargateProfileMap map[string]FargateProfileInput

func (FargateProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FargateProfile)(nil)).Elem()
}

func (i FargateProfileMap) ToFargateProfileMapOutput() FargateProfileMapOutput {
	return i.ToFargateProfileMapOutputWithContext(context.Background())
}

func (i FargateProfileMap) ToFargateProfileMapOutputWithContext(ctx context.Context) FargateProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FargateProfileMapOutput)
}

type FargateProfileOutput struct{ *pulumi.OutputState }

func (FargateProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FargateProfile)(nil)).Elem()
}

func (o FargateProfileOutput) ToFargateProfileOutput() FargateProfileOutput {
	return o
}

func (o FargateProfileOutput) ToFargateProfileOutputWithContext(ctx context.Context) FargateProfileOutput {
	return o
}

func (o FargateProfileOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *FargateProfile) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o FargateProfileOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *FargateProfile) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

func (o FargateProfileOutput) FargateProfileName() pulumi.StringOutput {
	return o.ApplyT(func(v *FargateProfile) pulumi.StringOutput { return v.FargateProfileName }).(pulumi.StringOutput)
}

func (o FargateProfileOutput) PodExecutionRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *FargateProfile) pulumi.StringOutput { return v.PodExecutionRoleArn }).(pulumi.StringOutput)
}

func (o FargateProfileOutput) Selectors() FargateProfileSelectorArrayOutput {
	return o.ApplyT(func(v *FargateProfile) FargateProfileSelectorArrayOutput { return v.Selectors }).(FargateProfileSelectorArrayOutput)
}

func (o FargateProfileOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *FargateProfile) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o FargateProfileOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FargateProfile) pulumi.StringArrayOutput { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

func (o FargateProfileOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FargateProfile) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o FargateProfileOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FargateProfile) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type FargateProfileArrayOutput struct{ *pulumi.OutputState }

func (FargateProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FargateProfile)(nil)).Elem()
}

func (o FargateProfileArrayOutput) ToFargateProfileArrayOutput() FargateProfileArrayOutput {
	return o
}

func (o FargateProfileArrayOutput) ToFargateProfileArrayOutputWithContext(ctx context.Context) FargateProfileArrayOutput {
	return o
}

func (o FargateProfileArrayOutput) Index(i pulumi.IntInput) FargateProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FargateProfile {
		return vs[0].([]*FargateProfile)[vs[1].(int)]
	}).(FargateProfileOutput)
}

type FargateProfileMapOutput struct{ *pulumi.OutputState }

func (FargateProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FargateProfile)(nil)).Elem()
}

func (o FargateProfileMapOutput) ToFargateProfileMapOutput() FargateProfileMapOutput {
	return o
}

func (o FargateProfileMapOutput) ToFargateProfileMapOutputWithContext(ctx context.Context) FargateProfileMapOutput {
	return o
}

func (o FargateProfileMapOutput) MapIndex(k pulumi.StringInput) FargateProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FargateProfile {
		return vs[0].(map[string]*FargateProfile)[vs[1].(string)]
	}).(FargateProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FargateProfileInput)(nil)).Elem(), &FargateProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*FargateProfileArrayInput)(nil)).Elem(), FargateProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FargateProfileMapInput)(nil)).Elem(), FargateProfileMap{})
	pulumi.RegisterOutputType(FargateProfileOutput{})
	pulumi.RegisterOutputType(FargateProfileArrayOutput{})
	pulumi.RegisterOutputType(FargateProfileMapOutput{})
}
