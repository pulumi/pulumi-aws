// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for managing AWS EKS (Elastic Kubernetes) Cluster Versions.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/eks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := eks.GetClusterVersions(ctx, &eks.GetClusterVersionsArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Filter by Cluster Type
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/eks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := eks.GetClusterVersions(ctx, &eks.GetClusterVersionsArgs{
//				ClusterType: pulumi.StringRef("eks"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Filter by Version Status
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/eks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := eks.GetClusterVersions(ctx, &eks.GetClusterVersionsArgs{
//				VersionStatus: pulumi.StringRef("STANDARD_SUPPORT"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetClusterVersions(ctx *pulumi.Context, args *GetClusterVersionsArgs, opts ...pulumi.InvokeOption) (*GetClusterVersionsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetClusterVersionsResult
	err := ctx.Invoke("aws:eks/getClusterVersions:getClusterVersions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getClusterVersions.
type GetClusterVersionsArgs struct {
	// Type of clusters to filter by.
	// Currently, the only valid value is `eks`.
	ClusterType           *string  `pulumi:"clusterType"`
	ClusterVersionsOnlies []string `pulumi:"clusterVersionsOnlies"`
	// Whether to show only the default versions of Kubernetes supported by EKS.
	DefaultOnly *bool `pulumi:"defaultOnly"`
	// Whether to include all kubernetes versions in the response.
	IncludeAll *bool `pulumi:"includeAll"`
	// Status of the EKS cluster versions to list.
	// Valid values are `STANDARD_SUPPORT` or `UNSUPPORTED` or `EXTENDED_SUPPORT`.
	VersionStatus *string `pulumi:"versionStatus"`
}

// A collection of values returned by getClusterVersions.
type GetClusterVersionsResult struct {
	// Type of cluster that the version belongs to.
	ClusterType           *string                            `pulumi:"clusterType"`
	ClusterVersions       []GetClusterVersionsClusterVersion `pulumi:"clusterVersions"`
	ClusterVersionsOnlies []string                           `pulumi:"clusterVersionsOnlies"`
	DefaultOnly           *bool                              `pulumi:"defaultOnly"`
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	IncludeAll *bool  `pulumi:"includeAll"`
	// Status of the EKS cluster version.
	VersionStatus *string `pulumi:"versionStatus"`
}

func GetClusterVersionsOutput(ctx *pulumi.Context, args GetClusterVersionsOutputArgs, opts ...pulumi.InvokeOption) GetClusterVersionsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetClusterVersionsResultOutput, error) {
			args := v.(GetClusterVersionsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws:eks/getClusterVersions:getClusterVersions", args, GetClusterVersionsResultOutput{}, options).(GetClusterVersionsResultOutput), nil
		}).(GetClusterVersionsResultOutput)
}

// A collection of arguments for invoking getClusterVersions.
type GetClusterVersionsOutputArgs struct {
	// Type of clusters to filter by.
	// Currently, the only valid value is `eks`.
	ClusterType           pulumi.StringPtrInput   `pulumi:"clusterType"`
	ClusterVersionsOnlies pulumi.StringArrayInput `pulumi:"clusterVersionsOnlies"`
	// Whether to show only the default versions of Kubernetes supported by EKS.
	DefaultOnly pulumi.BoolPtrInput `pulumi:"defaultOnly"`
	// Whether to include all kubernetes versions in the response.
	IncludeAll pulumi.BoolPtrInput `pulumi:"includeAll"`
	// Status of the EKS cluster versions to list.
	// Valid values are `STANDARD_SUPPORT` or `UNSUPPORTED` or `EXTENDED_SUPPORT`.
	VersionStatus pulumi.StringPtrInput `pulumi:"versionStatus"`
}

func (GetClusterVersionsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterVersionsArgs)(nil)).Elem()
}

// A collection of values returned by getClusterVersions.
type GetClusterVersionsResultOutput struct{ *pulumi.OutputState }

func (GetClusterVersionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterVersionsResult)(nil)).Elem()
}

func (o GetClusterVersionsResultOutput) ToGetClusterVersionsResultOutput() GetClusterVersionsResultOutput {
	return o
}

func (o GetClusterVersionsResultOutput) ToGetClusterVersionsResultOutputWithContext(ctx context.Context) GetClusterVersionsResultOutput {
	return o
}

// Type of cluster that the version belongs to.
func (o GetClusterVersionsResultOutput) ClusterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetClusterVersionsResult) *string { return v.ClusterType }).(pulumi.StringPtrOutput)
}

func (o GetClusterVersionsResultOutput) ClusterVersions() GetClusterVersionsClusterVersionArrayOutput {
	return o.ApplyT(func(v GetClusterVersionsResult) []GetClusterVersionsClusterVersion { return v.ClusterVersions }).(GetClusterVersionsClusterVersionArrayOutput)
}

func (o GetClusterVersionsResultOutput) ClusterVersionsOnlies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetClusterVersionsResult) []string { return v.ClusterVersionsOnlies }).(pulumi.StringArrayOutput)
}

func (o GetClusterVersionsResultOutput) DefaultOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetClusterVersionsResult) *bool { return v.DefaultOnly }).(pulumi.BoolPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetClusterVersionsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterVersionsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetClusterVersionsResultOutput) IncludeAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetClusterVersionsResult) *bool { return v.IncludeAll }).(pulumi.BoolPtrOutput)
}

// Status of the EKS cluster version.
func (o GetClusterVersionsResultOutput) VersionStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetClusterVersionsResult) *string { return v.VersionStatus }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetClusterVersionsResultOutput{})
}
