// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eks

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NodeGroup struct {
	pulumi.CustomResourceState

	AmiType             pulumi.StringOutput              `pulumi:"amiType"`
	Arn                 pulumi.StringOutput              `pulumi:"arn"`
	CapacityType        pulumi.StringOutput              `pulumi:"capacityType"`
	ClusterName         pulumi.StringOutput              `pulumi:"clusterName"`
	DiskSize            pulumi.IntOutput                 `pulumi:"diskSize"`
	ForceUpdateVersion  pulumi.BoolPtrOutput             `pulumi:"forceUpdateVersion"`
	InstanceTypes       pulumi.StringArrayOutput         `pulumi:"instanceTypes"`
	Labels              pulumi.StringMapOutput           `pulumi:"labels"`
	LaunchTemplate      NodeGroupLaunchTemplatePtrOutput `pulumi:"launchTemplate"`
	NodeGroupName       pulumi.StringOutput              `pulumi:"nodeGroupName"`
	NodeGroupNamePrefix pulumi.StringOutput              `pulumi:"nodeGroupNamePrefix"`
	NodeRoleArn         pulumi.StringOutput              `pulumi:"nodeRoleArn"`
	ReleaseVersion      pulumi.StringOutput              `pulumi:"releaseVersion"`
	RemoteAccess        NodeGroupRemoteAccessPtrOutput   `pulumi:"remoteAccess"`
	Resources           NodeGroupResourceArrayOutput     `pulumi:"resources"`
	ScalingConfig       NodeGroupScalingConfigOutput     `pulumi:"scalingConfig"`
	Status              pulumi.StringOutput              `pulumi:"status"`
	SubnetIds           pulumi.StringArrayOutput         `pulumi:"subnetIds"`
	Tags                pulumi.StringMapOutput           `pulumi:"tags"`
	TagsAll             pulumi.StringMapOutput           `pulumi:"tagsAll"`
	Taints              NodeGroupTaintArrayOutput        `pulumi:"taints"`
	UpdateConfig        NodeGroupUpdateConfigOutput      `pulumi:"updateConfig"`
	Version             pulumi.StringOutput              `pulumi:"version"`
}

// NewNodeGroup registers a new resource with the given unique name, arguments, and options.
func NewNodeGroup(ctx *pulumi.Context,
	name string, args *NodeGroupArgs, opts ...pulumi.ResourceOption) (*NodeGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	if args.NodeRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'NodeRoleArn'")
	}
	if args.ScalingConfig == nil {
		return nil, errors.New("invalid value for required argument 'ScalingConfig'")
	}
	if args.SubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'SubnetIds'")
	}
	var resource NodeGroup
	err := ctx.RegisterResource("aws:eks/nodeGroup:NodeGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNodeGroup gets an existing NodeGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNodeGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NodeGroupState, opts ...pulumi.ResourceOption) (*NodeGroup, error) {
	var resource NodeGroup
	err := ctx.ReadResource("aws:eks/nodeGroup:NodeGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NodeGroup resources.
type nodeGroupState struct {
	AmiType             *string                  `pulumi:"amiType"`
	Arn                 *string                  `pulumi:"arn"`
	CapacityType        *string                  `pulumi:"capacityType"`
	ClusterName         *string                  `pulumi:"clusterName"`
	DiskSize            *int                     `pulumi:"diskSize"`
	ForceUpdateVersion  *bool                    `pulumi:"forceUpdateVersion"`
	InstanceTypes       []string                 `pulumi:"instanceTypes"`
	Labels              map[string]string        `pulumi:"labels"`
	LaunchTemplate      *NodeGroupLaunchTemplate `pulumi:"launchTemplate"`
	NodeGroupName       *string                  `pulumi:"nodeGroupName"`
	NodeGroupNamePrefix *string                  `pulumi:"nodeGroupNamePrefix"`
	NodeRoleArn         *string                  `pulumi:"nodeRoleArn"`
	ReleaseVersion      *string                  `pulumi:"releaseVersion"`
	RemoteAccess        *NodeGroupRemoteAccess   `pulumi:"remoteAccess"`
	Resources           []NodeGroupResource      `pulumi:"resources"`
	ScalingConfig       *NodeGroupScalingConfig  `pulumi:"scalingConfig"`
	Status              *string                  `pulumi:"status"`
	SubnetIds           []string                 `pulumi:"subnetIds"`
	Tags                map[string]string        `pulumi:"tags"`
	TagsAll             map[string]string        `pulumi:"tagsAll"`
	Taints              []NodeGroupTaint         `pulumi:"taints"`
	UpdateConfig        *NodeGroupUpdateConfig   `pulumi:"updateConfig"`
	Version             *string                  `pulumi:"version"`
}

type NodeGroupState struct {
	AmiType             pulumi.StringPtrInput
	Arn                 pulumi.StringPtrInput
	CapacityType        pulumi.StringPtrInput
	ClusterName         pulumi.StringPtrInput
	DiskSize            pulumi.IntPtrInput
	ForceUpdateVersion  pulumi.BoolPtrInput
	InstanceTypes       pulumi.StringArrayInput
	Labels              pulumi.StringMapInput
	LaunchTemplate      NodeGroupLaunchTemplatePtrInput
	NodeGroupName       pulumi.StringPtrInput
	NodeGroupNamePrefix pulumi.StringPtrInput
	NodeRoleArn         pulumi.StringPtrInput
	ReleaseVersion      pulumi.StringPtrInput
	RemoteAccess        NodeGroupRemoteAccessPtrInput
	Resources           NodeGroupResourceArrayInput
	ScalingConfig       NodeGroupScalingConfigPtrInput
	Status              pulumi.StringPtrInput
	SubnetIds           pulumi.StringArrayInput
	Tags                pulumi.StringMapInput
	TagsAll             pulumi.StringMapInput
	Taints              NodeGroupTaintArrayInput
	UpdateConfig        NodeGroupUpdateConfigPtrInput
	Version             pulumi.StringPtrInput
}

func (NodeGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeGroupState)(nil)).Elem()
}

type nodeGroupArgs struct {
	AmiType             *string                  `pulumi:"amiType"`
	CapacityType        *string                  `pulumi:"capacityType"`
	ClusterName         string                   `pulumi:"clusterName"`
	DiskSize            *int                     `pulumi:"diskSize"`
	ForceUpdateVersion  *bool                    `pulumi:"forceUpdateVersion"`
	InstanceTypes       []string                 `pulumi:"instanceTypes"`
	Labels              map[string]string        `pulumi:"labels"`
	LaunchTemplate      *NodeGroupLaunchTemplate `pulumi:"launchTemplate"`
	NodeGroupName       *string                  `pulumi:"nodeGroupName"`
	NodeGroupNamePrefix *string                  `pulumi:"nodeGroupNamePrefix"`
	NodeRoleArn         string                   `pulumi:"nodeRoleArn"`
	ReleaseVersion      *string                  `pulumi:"releaseVersion"`
	RemoteAccess        *NodeGroupRemoteAccess   `pulumi:"remoteAccess"`
	ScalingConfig       NodeGroupScalingConfig   `pulumi:"scalingConfig"`
	SubnetIds           []string                 `pulumi:"subnetIds"`
	Tags                map[string]string        `pulumi:"tags"`
	Taints              []NodeGroupTaint         `pulumi:"taints"`
	UpdateConfig        *NodeGroupUpdateConfig   `pulumi:"updateConfig"`
	Version             *string                  `pulumi:"version"`
}

// The set of arguments for constructing a NodeGroup resource.
type NodeGroupArgs struct {
	AmiType             pulumi.StringPtrInput
	CapacityType        pulumi.StringPtrInput
	ClusterName         pulumi.StringInput
	DiskSize            pulumi.IntPtrInput
	ForceUpdateVersion  pulumi.BoolPtrInput
	InstanceTypes       pulumi.StringArrayInput
	Labels              pulumi.StringMapInput
	LaunchTemplate      NodeGroupLaunchTemplatePtrInput
	NodeGroupName       pulumi.StringPtrInput
	NodeGroupNamePrefix pulumi.StringPtrInput
	NodeRoleArn         pulumi.StringInput
	ReleaseVersion      pulumi.StringPtrInput
	RemoteAccess        NodeGroupRemoteAccessPtrInput
	ScalingConfig       NodeGroupScalingConfigInput
	SubnetIds           pulumi.StringArrayInput
	Tags                pulumi.StringMapInput
	Taints              NodeGroupTaintArrayInput
	UpdateConfig        NodeGroupUpdateConfigPtrInput
	Version             pulumi.StringPtrInput
}

func (NodeGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeGroupArgs)(nil)).Elem()
}

type NodeGroupInput interface {
	pulumi.Input

	ToNodeGroupOutput() NodeGroupOutput
	ToNodeGroupOutputWithContext(ctx context.Context) NodeGroupOutput
}

func (*NodeGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeGroup)(nil)).Elem()
}

func (i *NodeGroup) ToNodeGroupOutput() NodeGroupOutput {
	return i.ToNodeGroupOutputWithContext(context.Background())
}

func (i *NodeGroup) ToNodeGroupOutputWithContext(ctx context.Context) NodeGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupOutput)
}

// NodeGroupArrayInput is an input type that accepts NodeGroupArray and NodeGroupArrayOutput values.
// You can construct a concrete instance of `NodeGroupArrayInput` via:
//
//	NodeGroupArray{ NodeGroupArgs{...} }
type NodeGroupArrayInput interface {
	pulumi.Input

	ToNodeGroupArrayOutput() NodeGroupArrayOutput
	ToNodeGroupArrayOutputWithContext(context.Context) NodeGroupArrayOutput
}

type NodeGroupArray []NodeGroupInput

func (NodeGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NodeGroup)(nil)).Elem()
}

func (i NodeGroupArray) ToNodeGroupArrayOutput() NodeGroupArrayOutput {
	return i.ToNodeGroupArrayOutputWithContext(context.Background())
}

func (i NodeGroupArray) ToNodeGroupArrayOutputWithContext(ctx context.Context) NodeGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupArrayOutput)
}

// NodeGroupMapInput is an input type that accepts NodeGroupMap and NodeGroupMapOutput values.
// You can construct a concrete instance of `NodeGroupMapInput` via:
//
//	NodeGroupMap{ "key": NodeGroupArgs{...} }
type NodeGroupMapInput interface {
	pulumi.Input

	ToNodeGroupMapOutput() NodeGroupMapOutput
	ToNodeGroupMapOutputWithContext(context.Context) NodeGroupMapOutput
}

type NodeGroupMap map[string]NodeGroupInput

func (NodeGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NodeGroup)(nil)).Elem()
}

func (i NodeGroupMap) ToNodeGroupMapOutput() NodeGroupMapOutput {
	return i.ToNodeGroupMapOutputWithContext(context.Background())
}

func (i NodeGroupMap) ToNodeGroupMapOutputWithContext(ctx context.Context) NodeGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupMapOutput)
}

type NodeGroupOutput struct{ *pulumi.OutputState }

func (NodeGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeGroup)(nil)).Elem()
}

func (o NodeGroupOutput) ToNodeGroupOutput() NodeGroupOutput {
	return o
}

func (o NodeGroupOutput) ToNodeGroupOutputWithContext(ctx context.Context) NodeGroupOutput {
	return o
}

func (o NodeGroupOutput) AmiType() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringOutput { return v.AmiType }).(pulumi.StringOutput)
}

func (o NodeGroupOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o NodeGroupOutput) CapacityType() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringOutput { return v.CapacityType }).(pulumi.StringOutput)
}

func (o NodeGroupOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

func (o NodeGroupOutput) DiskSize() pulumi.IntOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.IntOutput { return v.DiskSize }).(pulumi.IntOutput)
}

func (o NodeGroupOutput) ForceUpdateVersion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.BoolPtrOutput { return v.ForceUpdateVersion }).(pulumi.BoolPtrOutput)
}

func (o NodeGroupOutput) InstanceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringArrayOutput { return v.InstanceTypes }).(pulumi.StringArrayOutput)
}

func (o NodeGroupOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o NodeGroupOutput) LaunchTemplate() NodeGroupLaunchTemplatePtrOutput {
	return o.ApplyT(func(v *NodeGroup) NodeGroupLaunchTemplatePtrOutput { return v.LaunchTemplate }).(NodeGroupLaunchTemplatePtrOutput)
}

func (o NodeGroupOutput) NodeGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringOutput { return v.NodeGroupName }).(pulumi.StringOutput)
}

func (o NodeGroupOutput) NodeGroupNamePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringOutput { return v.NodeGroupNamePrefix }).(pulumi.StringOutput)
}

func (o NodeGroupOutput) NodeRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringOutput { return v.NodeRoleArn }).(pulumi.StringOutput)
}

func (o NodeGroupOutput) ReleaseVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringOutput { return v.ReleaseVersion }).(pulumi.StringOutput)
}

func (o NodeGroupOutput) RemoteAccess() NodeGroupRemoteAccessPtrOutput {
	return o.ApplyT(func(v *NodeGroup) NodeGroupRemoteAccessPtrOutput { return v.RemoteAccess }).(NodeGroupRemoteAccessPtrOutput)
}

func (o NodeGroupOutput) Resources() NodeGroupResourceArrayOutput {
	return o.ApplyT(func(v *NodeGroup) NodeGroupResourceArrayOutput { return v.Resources }).(NodeGroupResourceArrayOutput)
}

func (o NodeGroupOutput) ScalingConfig() NodeGroupScalingConfigOutput {
	return o.ApplyT(func(v *NodeGroup) NodeGroupScalingConfigOutput { return v.ScalingConfig }).(NodeGroupScalingConfigOutput)
}

func (o NodeGroupOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o NodeGroupOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringArrayOutput { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

func (o NodeGroupOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o NodeGroupOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o NodeGroupOutput) Taints() NodeGroupTaintArrayOutput {
	return o.ApplyT(func(v *NodeGroup) NodeGroupTaintArrayOutput { return v.Taints }).(NodeGroupTaintArrayOutput)
}

func (o NodeGroupOutput) UpdateConfig() NodeGroupUpdateConfigOutput {
	return o.ApplyT(func(v *NodeGroup) NodeGroupUpdateConfigOutput { return v.UpdateConfig }).(NodeGroupUpdateConfigOutput)
}

func (o NodeGroupOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeGroup) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type NodeGroupArrayOutput struct{ *pulumi.OutputState }

func (NodeGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NodeGroup)(nil)).Elem()
}

func (o NodeGroupArrayOutput) ToNodeGroupArrayOutput() NodeGroupArrayOutput {
	return o
}

func (o NodeGroupArrayOutput) ToNodeGroupArrayOutputWithContext(ctx context.Context) NodeGroupArrayOutput {
	return o
}

func (o NodeGroupArrayOutput) Index(i pulumi.IntInput) NodeGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NodeGroup {
		return vs[0].([]*NodeGroup)[vs[1].(int)]
	}).(NodeGroupOutput)
}

type NodeGroupMapOutput struct{ *pulumi.OutputState }

func (NodeGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NodeGroup)(nil)).Elem()
}

func (o NodeGroupMapOutput) ToNodeGroupMapOutput() NodeGroupMapOutput {
	return o
}

func (o NodeGroupMapOutput) ToNodeGroupMapOutputWithContext(ctx context.Context) NodeGroupMapOutput {
	return o
}

func (o NodeGroupMapOutput) MapIndex(k pulumi.StringInput) NodeGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NodeGroup {
		return vs[0].(map[string]*NodeGroup)[vs[1].(string)]
	}).(NodeGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NodeGroupInput)(nil)).Elem(), &NodeGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeGroupArrayInput)(nil)).Elem(), NodeGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeGroupMapInput)(nil)).Elem(), NodeGroupMap{})
	pulumi.RegisterOutputType(NodeGroupOutput{})
	pulumi.RegisterOutputType(NodeGroupArrayOutput{})
	pulumi.RegisterOutputType(NodeGroupMapOutput{})
}
