// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eks

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Addon struct {
	pulumi.CustomResourceState

	AddonName             pulumi.StringOutput    `pulumi:"addonName"`
	AddonVersion          pulumi.StringOutput    `pulumi:"addonVersion"`
	Arn                   pulumi.StringOutput    `pulumi:"arn"`
	ClusterName           pulumi.StringOutput    `pulumi:"clusterName"`
	ConfigurationValues   pulumi.StringOutput    `pulumi:"configurationValues"`
	CreatedAt             pulumi.StringOutput    `pulumi:"createdAt"`
	ModifiedAt            pulumi.StringOutput    `pulumi:"modifiedAt"`
	Preserve              pulumi.BoolPtrOutput   `pulumi:"preserve"`
	ResolveConflicts      pulumi.StringPtrOutput `pulumi:"resolveConflicts"`
	ServiceAccountRoleArn pulumi.StringPtrOutput `pulumi:"serviceAccountRoleArn"`
	Tags                  pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll               pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewAddon registers a new resource with the given unique name, arguments, and options.
func NewAddon(ctx *pulumi.Context,
	name string, args *AddonArgs, opts ...pulumi.ResourceOption) (*Addon, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AddonName == nil {
		return nil, errors.New("invalid value for required argument 'AddonName'")
	}
	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	var resource Addon
	err := ctx.RegisterResource("aws:eks/addon:Addon", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAddon gets an existing Addon resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAddon(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AddonState, opts ...pulumi.ResourceOption) (*Addon, error) {
	var resource Addon
	err := ctx.ReadResource("aws:eks/addon:Addon", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Addon resources.
type addonState struct {
	AddonName             *string           `pulumi:"addonName"`
	AddonVersion          *string           `pulumi:"addonVersion"`
	Arn                   *string           `pulumi:"arn"`
	ClusterName           *string           `pulumi:"clusterName"`
	ConfigurationValues   *string           `pulumi:"configurationValues"`
	CreatedAt             *string           `pulumi:"createdAt"`
	ModifiedAt            *string           `pulumi:"modifiedAt"`
	Preserve              *bool             `pulumi:"preserve"`
	ResolveConflicts      *string           `pulumi:"resolveConflicts"`
	ServiceAccountRoleArn *string           `pulumi:"serviceAccountRoleArn"`
	Tags                  map[string]string `pulumi:"tags"`
	TagsAll               map[string]string `pulumi:"tagsAll"`
}

type AddonState struct {
	AddonName             pulumi.StringPtrInput
	AddonVersion          pulumi.StringPtrInput
	Arn                   pulumi.StringPtrInput
	ClusterName           pulumi.StringPtrInput
	ConfigurationValues   pulumi.StringPtrInput
	CreatedAt             pulumi.StringPtrInput
	ModifiedAt            pulumi.StringPtrInput
	Preserve              pulumi.BoolPtrInput
	ResolveConflicts      pulumi.StringPtrInput
	ServiceAccountRoleArn pulumi.StringPtrInput
	Tags                  pulumi.StringMapInput
	TagsAll               pulumi.StringMapInput
}

func (AddonState) ElementType() reflect.Type {
	return reflect.TypeOf((*addonState)(nil)).Elem()
}

type addonArgs struct {
	AddonName             string            `pulumi:"addonName"`
	AddonVersion          *string           `pulumi:"addonVersion"`
	ClusterName           string            `pulumi:"clusterName"`
	ConfigurationValues   *string           `pulumi:"configurationValues"`
	Preserve              *bool             `pulumi:"preserve"`
	ResolveConflicts      *string           `pulumi:"resolveConflicts"`
	ServiceAccountRoleArn *string           `pulumi:"serviceAccountRoleArn"`
	Tags                  map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Addon resource.
type AddonArgs struct {
	AddonName             pulumi.StringInput
	AddonVersion          pulumi.StringPtrInput
	ClusterName           pulumi.StringInput
	ConfigurationValues   pulumi.StringPtrInput
	Preserve              pulumi.BoolPtrInput
	ResolveConflicts      pulumi.StringPtrInput
	ServiceAccountRoleArn pulumi.StringPtrInput
	Tags                  pulumi.StringMapInput
}

func (AddonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*addonArgs)(nil)).Elem()
}

type AddonInput interface {
	pulumi.Input

	ToAddonOutput() AddonOutput
	ToAddonOutputWithContext(ctx context.Context) AddonOutput
}

func (*Addon) ElementType() reflect.Type {
	return reflect.TypeOf((**Addon)(nil)).Elem()
}

func (i *Addon) ToAddonOutput() AddonOutput {
	return i.ToAddonOutputWithContext(context.Background())
}

func (i *Addon) ToAddonOutputWithContext(ctx context.Context) AddonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonOutput)
}

// AddonArrayInput is an input type that accepts AddonArray and AddonArrayOutput values.
// You can construct a concrete instance of `AddonArrayInput` via:
//
//	AddonArray{ AddonArgs{...} }
type AddonArrayInput interface {
	pulumi.Input

	ToAddonArrayOutput() AddonArrayOutput
	ToAddonArrayOutputWithContext(context.Context) AddonArrayOutput
}

type AddonArray []AddonInput

func (AddonArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Addon)(nil)).Elem()
}

func (i AddonArray) ToAddonArrayOutput() AddonArrayOutput {
	return i.ToAddonArrayOutputWithContext(context.Background())
}

func (i AddonArray) ToAddonArrayOutputWithContext(ctx context.Context) AddonArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonArrayOutput)
}

// AddonMapInput is an input type that accepts AddonMap and AddonMapOutput values.
// You can construct a concrete instance of `AddonMapInput` via:
//
//	AddonMap{ "key": AddonArgs{...} }
type AddonMapInput interface {
	pulumi.Input

	ToAddonMapOutput() AddonMapOutput
	ToAddonMapOutputWithContext(context.Context) AddonMapOutput
}

type AddonMap map[string]AddonInput

func (AddonMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Addon)(nil)).Elem()
}

func (i AddonMap) ToAddonMapOutput() AddonMapOutput {
	return i.ToAddonMapOutputWithContext(context.Background())
}

func (i AddonMap) ToAddonMapOutputWithContext(ctx context.Context) AddonMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonMapOutput)
}

type AddonOutput struct{ *pulumi.OutputState }

func (AddonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Addon)(nil)).Elem()
}

func (o AddonOutput) ToAddonOutput() AddonOutput {
	return o
}

func (o AddonOutput) ToAddonOutputWithContext(ctx context.Context) AddonOutput {
	return o
}

func (o AddonOutput) AddonName() pulumi.StringOutput {
	return o.ApplyT(func(v *Addon) pulumi.StringOutput { return v.AddonName }).(pulumi.StringOutput)
}

func (o AddonOutput) AddonVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Addon) pulumi.StringOutput { return v.AddonVersion }).(pulumi.StringOutput)
}

func (o AddonOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Addon) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o AddonOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *Addon) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

func (o AddonOutput) ConfigurationValues() pulumi.StringOutput {
	return o.ApplyT(func(v *Addon) pulumi.StringOutput { return v.ConfigurationValues }).(pulumi.StringOutput)
}

func (o AddonOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Addon) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o AddonOutput) ModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Addon) pulumi.StringOutput { return v.ModifiedAt }).(pulumi.StringOutput)
}

func (o AddonOutput) Preserve() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Addon) pulumi.BoolPtrOutput { return v.Preserve }).(pulumi.BoolPtrOutput)
}

func (o AddonOutput) ResolveConflicts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Addon) pulumi.StringPtrOutput { return v.ResolveConflicts }).(pulumi.StringPtrOutput)
}

func (o AddonOutput) ServiceAccountRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Addon) pulumi.StringPtrOutput { return v.ServiceAccountRoleArn }).(pulumi.StringPtrOutput)
}

func (o AddonOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Addon) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o AddonOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Addon) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type AddonArrayOutput struct{ *pulumi.OutputState }

func (AddonArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Addon)(nil)).Elem()
}

func (o AddonArrayOutput) ToAddonArrayOutput() AddonArrayOutput {
	return o
}

func (o AddonArrayOutput) ToAddonArrayOutputWithContext(ctx context.Context) AddonArrayOutput {
	return o
}

func (o AddonArrayOutput) Index(i pulumi.IntInput) AddonOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Addon {
		return vs[0].([]*Addon)[vs[1].(int)]
	}).(AddonOutput)
}

type AddonMapOutput struct{ *pulumi.OutputState }

func (AddonMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Addon)(nil)).Elem()
}

func (o AddonMapOutput) ToAddonMapOutput() AddonMapOutput {
	return o
}

func (o AddonMapOutput) ToAddonMapOutputWithContext(ctx context.Context) AddonMapOutput {
	return o
}

func (o AddonMapOutput) MapIndex(k pulumi.StringInput) AddonOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Addon {
		return vs[0].(map[string]*Addon)[vs[1].(string)]
	}).(AddonOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AddonInput)(nil)).Elem(), &Addon{})
	pulumi.RegisterInputType(reflect.TypeOf((*AddonArrayInput)(nil)).Elem(), AddonArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AddonMapInput)(nil)).Elem(), AddonMap{})
	pulumi.RegisterOutputType(AddonOutput{})
	pulumi.RegisterOutputType(AddonArrayOutput{})
	pulumi.RegisterOutputType(AddonMapOutput{})
}
