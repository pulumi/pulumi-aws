// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type WorkspaceApiKey struct {
	pulumi.CustomResourceState

	Key           pulumi.StringOutput `pulumi:"key"`
	KeyName       pulumi.StringOutput `pulumi:"keyName"`
	KeyRole       pulumi.StringOutput `pulumi:"keyRole"`
	SecondsToLive pulumi.IntOutput    `pulumi:"secondsToLive"`
	WorkspaceId   pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewWorkspaceApiKey registers a new resource with the given unique name, arguments, and options.
func NewWorkspaceApiKey(ctx *pulumi.Context,
	name string, args *WorkspaceApiKeyArgs, opts ...pulumi.ResourceOption) (*WorkspaceApiKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KeyName == nil {
		return nil, errors.New("invalid value for required argument 'KeyName'")
	}
	if args.KeyRole == nil {
		return nil, errors.New("invalid value for required argument 'KeyRole'")
	}
	if args.SecondsToLive == nil {
		return nil, errors.New("invalid value for required argument 'SecondsToLive'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	var resource WorkspaceApiKey
	err := ctx.RegisterResource("aws:grafana/workspaceApiKey:WorkspaceApiKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspaceApiKey gets an existing WorkspaceApiKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspaceApiKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceApiKeyState, opts ...pulumi.ResourceOption) (*WorkspaceApiKey, error) {
	var resource WorkspaceApiKey
	err := ctx.ReadResource("aws:grafana/workspaceApiKey:WorkspaceApiKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkspaceApiKey resources.
type workspaceApiKeyState struct {
	Key           *string `pulumi:"key"`
	KeyName       *string `pulumi:"keyName"`
	KeyRole       *string `pulumi:"keyRole"`
	SecondsToLive *int    `pulumi:"secondsToLive"`
	WorkspaceId   *string `pulumi:"workspaceId"`
}

type WorkspaceApiKeyState struct {
	Key           pulumi.StringPtrInput
	KeyName       pulumi.StringPtrInput
	KeyRole       pulumi.StringPtrInput
	SecondsToLive pulumi.IntPtrInput
	WorkspaceId   pulumi.StringPtrInput
}

func (WorkspaceApiKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceApiKeyState)(nil)).Elem()
}

type workspaceApiKeyArgs struct {
	KeyName       string `pulumi:"keyName"`
	KeyRole       string `pulumi:"keyRole"`
	SecondsToLive int    `pulumi:"secondsToLive"`
	WorkspaceId   string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a WorkspaceApiKey resource.
type WorkspaceApiKeyArgs struct {
	KeyName       pulumi.StringInput
	KeyRole       pulumi.StringInput
	SecondsToLive pulumi.IntInput
	WorkspaceId   pulumi.StringInput
}

func (WorkspaceApiKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceApiKeyArgs)(nil)).Elem()
}

type WorkspaceApiKeyInput interface {
	pulumi.Input

	ToWorkspaceApiKeyOutput() WorkspaceApiKeyOutput
	ToWorkspaceApiKeyOutputWithContext(ctx context.Context) WorkspaceApiKeyOutput
}

func (*WorkspaceApiKey) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceApiKey)(nil)).Elem()
}

func (i *WorkspaceApiKey) ToWorkspaceApiKeyOutput() WorkspaceApiKeyOutput {
	return i.ToWorkspaceApiKeyOutputWithContext(context.Background())
}

func (i *WorkspaceApiKey) ToWorkspaceApiKeyOutputWithContext(ctx context.Context) WorkspaceApiKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceApiKeyOutput)
}

// WorkspaceApiKeyArrayInput is an input type that accepts WorkspaceApiKeyArray and WorkspaceApiKeyArrayOutput values.
// You can construct a concrete instance of `WorkspaceApiKeyArrayInput` via:
//
//	WorkspaceApiKeyArray{ WorkspaceApiKeyArgs{...} }
type WorkspaceApiKeyArrayInput interface {
	pulumi.Input

	ToWorkspaceApiKeyArrayOutput() WorkspaceApiKeyArrayOutput
	ToWorkspaceApiKeyArrayOutputWithContext(context.Context) WorkspaceApiKeyArrayOutput
}

type WorkspaceApiKeyArray []WorkspaceApiKeyInput

func (WorkspaceApiKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkspaceApiKey)(nil)).Elem()
}

func (i WorkspaceApiKeyArray) ToWorkspaceApiKeyArrayOutput() WorkspaceApiKeyArrayOutput {
	return i.ToWorkspaceApiKeyArrayOutputWithContext(context.Background())
}

func (i WorkspaceApiKeyArray) ToWorkspaceApiKeyArrayOutputWithContext(ctx context.Context) WorkspaceApiKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceApiKeyArrayOutput)
}

// WorkspaceApiKeyMapInput is an input type that accepts WorkspaceApiKeyMap and WorkspaceApiKeyMapOutput values.
// You can construct a concrete instance of `WorkspaceApiKeyMapInput` via:
//
//	WorkspaceApiKeyMap{ "key": WorkspaceApiKeyArgs{...} }
type WorkspaceApiKeyMapInput interface {
	pulumi.Input

	ToWorkspaceApiKeyMapOutput() WorkspaceApiKeyMapOutput
	ToWorkspaceApiKeyMapOutputWithContext(context.Context) WorkspaceApiKeyMapOutput
}

type WorkspaceApiKeyMap map[string]WorkspaceApiKeyInput

func (WorkspaceApiKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkspaceApiKey)(nil)).Elem()
}

func (i WorkspaceApiKeyMap) ToWorkspaceApiKeyMapOutput() WorkspaceApiKeyMapOutput {
	return i.ToWorkspaceApiKeyMapOutputWithContext(context.Background())
}

func (i WorkspaceApiKeyMap) ToWorkspaceApiKeyMapOutputWithContext(ctx context.Context) WorkspaceApiKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceApiKeyMapOutput)
}

type WorkspaceApiKeyOutput struct{ *pulumi.OutputState }

func (WorkspaceApiKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceApiKey)(nil)).Elem()
}

func (o WorkspaceApiKeyOutput) ToWorkspaceApiKeyOutput() WorkspaceApiKeyOutput {
	return o
}

func (o WorkspaceApiKeyOutput) ToWorkspaceApiKeyOutputWithContext(ctx context.Context) WorkspaceApiKeyOutput {
	return o
}

func (o WorkspaceApiKeyOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceApiKey) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

func (o WorkspaceApiKeyOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceApiKey) pulumi.StringOutput { return v.KeyName }).(pulumi.StringOutput)
}

func (o WorkspaceApiKeyOutput) KeyRole() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceApiKey) pulumi.StringOutput { return v.KeyRole }).(pulumi.StringOutput)
}

func (o WorkspaceApiKeyOutput) SecondsToLive() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkspaceApiKey) pulumi.IntOutput { return v.SecondsToLive }).(pulumi.IntOutput)
}

func (o WorkspaceApiKeyOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceApiKey) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type WorkspaceApiKeyArrayOutput struct{ *pulumi.OutputState }

func (WorkspaceApiKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkspaceApiKey)(nil)).Elem()
}

func (o WorkspaceApiKeyArrayOutput) ToWorkspaceApiKeyArrayOutput() WorkspaceApiKeyArrayOutput {
	return o
}

func (o WorkspaceApiKeyArrayOutput) ToWorkspaceApiKeyArrayOutputWithContext(ctx context.Context) WorkspaceApiKeyArrayOutput {
	return o
}

func (o WorkspaceApiKeyArrayOutput) Index(i pulumi.IntInput) WorkspaceApiKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkspaceApiKey {
		return vs[0].([]*WorkspaceApiKey)[vs[1].(int)]
	}).(WorkspaceApiKeyOutput)
}

type WorkspaceApiKeyMapOutput struct{ *pulumi.OutputState }

func (WorkspaceApiKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkspaceApiKey)(nil)).Elem()
}

func (o WorkspaceApiKeyMapOutput) ToWorkspaceApiKeyMapOutput() WorkspaceApiKeyMapOutput {
	return o
}

func (o WorkspaceApiKeyMapOutput) ToWorkspaceApiKeyMapOutputWithContext(ctx context.Context) WorkspaceApiKeyMapOutput {
	return o
}

func (o WorkspaceApiKeyMapOutput) MapIndex(k pulumi.StringInput) WorkspaceApiKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkspaceApiKey {
		return vs[0].(map[string]*WorkspaceApiKey)[vs[1].(string)]
	}).(WorkspaceApiKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceApiKeyInput)(nil)).Elem(), &WorkspaceApiKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceApiKeyArrayInput)(nil)).Elem(), WorkspaceApiKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceApiKeyMapInput)(nil)).Elem(), WorkspaceApiKeyMap{})
	pulumi.RegisterOutputType(WorkspaceApiKeyOutput{})
	pulumi.RegisterOutputType(WorkspaceApiKeyArrayOutput{})
	pulumi.RegisterOutputType(WorkspaceApiKeyMapOutput{})
}
