// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := grafana.NewWorkspaceServiceAccount(ctx, "example", &grafana.WorkspaceServiceAccountArgs{
//				Name:        pulumi.String("example-admin"),
//				GrafanaRole: pulumi.String("ADMIN"),
//				WorkspaceId: pulumi.Any(exampleAwsGrafanaWorkspace.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Managed Grafana Workspace Service Account using the `workspace_id` and `service_account_id` separated by a comma (`,`). For example:
//
// ```sh
// $ pulumi import aws:grafana/workspaceServiceAccount:WorkspaceServiceAccount example g-abc12345,1
// ```
type WorkspaceServiceAccount struct {
	pulumi.CustomResourceState

	// The permission level to use for this service account. For more information about the roles and the permissions each has, see the [User roles](https://docs.aws.amazon.com/grafana/latest/userguide/Grafana-user-roles.html) documentation.
	GrafanaRole pulumi.StringOutput `pulumi:"grafanaRole"`
	// A name for the service account. The name must be unique within the workspace, as it determines the ID associated with the service account.
	Name pulumi.StringOutput `pulumi:"name"`
	// Identifier of the service account in the given Grafana workspace
	ServiceAccountId pulumi.StringOutput `pulumi:"serviceAccountId"`
	// The Grafana workspace with which the service account is associated.
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewWorkspaceServiceAccount registers a new resource with the given unique name, arguments, and options.
func NewWorkspaceServiceAccount(ctx *pulumi.Context,
	name string, args *WorkspaceServiceAccountArgs, opts ...pulumi.ResourceOption) (*WorkspaceServiceAccount, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GrafanaRole == nil {
		return nil, errors.New("invalid value for required argument 'GrafanaRole'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkspaceServiceAccount
	err := ctx.RegisterResource("aws:grafana/workspaceServiceAccount:WorkspaceServiceAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspaceServiceAccount gets an existing WorkspaceServiceAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspaceServiceAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceServiceAccountState, opts ...pulumi.ResourceOption) (*WorkspaceServiceAccount, error) {
	var resource WorkspaceServiceAccount
	err := ctx.ReadResource("aws:grafana/workspaceServiceAccount:WorkspaceServiceAccount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkspaceServiceAccount resources.
type workspaceServiceAccountState struct {
	// The permission level to use for this service account. For more information about the roles and the permissions each has, see the [User roles](https://docs.aws.amazon.com/grafana/latest/userguide/Grafana-user-roles.html) documentation.
	GrafanaRole *string `pulumi:"grafanaRole"`
	// A name for the service account. The name must be unique within the workspace, as it determines the ID associated with the service account.
	Name *string `pulumi:"name"`
	// Identifier of the service account in the given Grafana workspace
	ServiceAccountId *string `pulumi:"serviceAccountId"`
	// The Grafana workspace with which the service account is associated.
	WorkspaceId *string `pulumi:"workspaceId"`
}

type WorkspaceServiceAccountState struct {
	// The permission level to use for this service account. For more information about the roles and the permissions each has, see the [User roles](https://docs.aws.amazon.com/grafana/latest/userguide/Grafana-user-roles.html) documentation.
	GrafanaRole pulumi.StringPtrInput
	// A name for the service account. The name must be unique within the workspace, as it determines the ID associated with the service account.
	Name pulumi.StringPtrInput
	// Identifier of the service account in the given Grafana workspace
	ServiceAccountId pulumi.StringPtrInput
	// The Grafana workspace with which the service account is associated.
	WorkspaceId pulumi.StringPtrInput
}

func (WorkspaceServiceAccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceServiceAccountState)(nil)).Elem()
}

type workspaceServiceAccountArgs struct {
	// The permission level to use for this service account. For more information about the roles and the permissions each has, see the [User roles](https://docs.aws.amazon.com/grafana/latest/userguide/Grafana-user-roles.html) documentation.
	GrafanaRole string `pulumi:"grafanaRole"`
	// A name for the service account. The name must be unique within the workspace, as it determines the ID associated with the service account.
	Name *string `pulumi:"name"`
	// The Grafana workspace with which the service account is associated.
	WorkspaceId string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a WorkspaceServiceAccount resource.
type WorkspaceServiceAccountArgs struct {
	// The permission level to use for this service account. For more information about the roles and the permissions each has, see the [User roles](https://docs.aws.amazon.com/grafana/latest/userguide/Grafana-user-roles.html) documentation.
	GrafanaRole pulumi.StringInput
	// A name for the service account. The name must be unique within the workspace, as it determines the ID associated with the service account.
	Name pulumi.StringPtrInput
	// The Grafana workspace with which the service account is associated.
	WorkspaceId pulumi.StringInput
}

func (WorkspaceServiceAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceServiceAccountArgs)(nil)).Elem()
}

type WorkspaceServiceAccountInput interface {
	pulumi.Input

	ToWorkspaceServiceAccountOutput() WorkspaceServiceAccountOutput
	ToWorkspaceServiceAccountOutputWithContext(ctx context.Context) WorkspaceServiceAccountOutput
}

func (*WorkspaceServiceAccount) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceServiceAccount)(nil)).Elem()
}

func (i *WorkspaceServiceAccount) ToWorkspaceServiceAccountOutput() WorkspaceServiceAccountOutput {
	return i.ToWorkspaceServiceAccountOutputWithContext(context.Background())
}

func (i *WorkspaceServiceAccount) ToWorkspaceServiceAccountOutputWithContext(ctx context.Context) WorkspaceServiceAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceServiceAccountOutput)
}

// WorkspaceServiceAccountArrayInput is an input type that accepts WorkspaceServiceAccountArray and WorkspaceServiceAccountArrayOutput values.
// You can construct a concrete instance of `WorkspaceServiceAccountArrayInput` via:
//
//	WorkspaceServiceAccountArray{ WorkspaceServiceAccountArgs{...} }
type WorkspaceServiceAccountArrayInput interface {
	pulumi.Input

	ToWorkspaceServiceAccountArrayOutput() WorkspaceServiceAccountArrayOutput
	ToWorkspaceServiceAccountArrayOutputWithContext(context.Context) WorkspaceServiceAccountArrayOutput
}

type WorkspaceServiceAccountArray []WorkspaceServiceAccountInput

func (WorkspaceServiceAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkspaceServiceAccount)(nil)).Elem()
}

func (i WorkspaceServiceAccountArray) ToWorkspaceServiceAccountArrayOutput() WorkspaceServiceAccountArrayOutput {
	return i.ToWorkspaceServiceAccountArrayOutputWithContext(context.Background())
}

func (i WorkspaceServiceAccountArray) ToWorkspaceServiceAccountArrayOutputWithContext(ctx context.Context) WorkspaceServiceAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceServiceAccountArrayOutput)
}

// WorkspaceServiceAccountMapInput is an input type that accepts WorkspaceServiceAccountMap and WorkspaceServiceAccountMapOutput values.
// You can construct a concrete instance of `WorkspaceServiceAccountMapInput` via:
//
//	WorkspaceServiceAccountMap{ "key": WorkspaceServiceAccountArgs{...} }
type WorkspaceServiceAccountMapInput interface {
	pulumi.Input

	ToWorkspaceServiceAccountMapOutput() WorkspaceServiceAccountMapOutput
	ToWorkspaceServiceAccountMapOutputWithContext(context.Context) WorkspaceServiceAccountMapOutput
}

type WorkspaceServiceAccountMap map[string]WorkspaceServiceAccountInput

func (WorkspaceServiceAccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkspaceServiceAccount)(nil)).Elem()
}

func (i WorkspaceServiceAccountMap) ToWorkspaceServiceAccountMapOutput() WorkspaceServiceAccountMapOutput {
	return i.ToWorkspaceServiceAccountMapOutputWithContext(context.Background())
}

func (i WorkspaceServiceAccountMap) ToWorkspaceServiceAccountMapOutputWithContext(ctx context.Context) WorkspaceServiceAccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceServiceAccountMapOutput)
}

type WorkspaceServiceAccountOutput struct{ *pulumi.OutputState }

func (WorkspaceServiceAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceServiceAccount)(nil)).Elem()
}

func (o WorkspaceServiceAccountOutput) ToWorkspaceServiceAccountOutput() WorkspaceServiceAccountOutput {
	return o
}

func (o WorkspaceServiceAccountOutput) ToWorkspaceServiceAccountOutputWithContext(ctx context.Context) WorkspaceServiceAccountOutput {
	return o
}

// The permission level to use for this service account. For more information about the roles and the permissions each has, see the [User roles](https://docs.aws.amazon.com/grafana/latest/userguide/Grafana-user-roles.html) documentation.
func (o WorkspaceServiceAccountOutput) GrafanaRole() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceServiceAccount) pulumi.StringOutput { return v.GrafanaRole }).(pulumi.StringOutput)
}

// A name for the service account. The name must be unique within the workspace, as it determines the ID associated with the service account.
func (o WorkspaceServiceAccountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceServiceAccount) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Identifier of the service account in the given Grafana workspace
func (o WorkspaceServiceAccountOutput) ServiceAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceServiceAccount) pulumi.StringOutput { return v.ServiceAccountId }).(pulumi.StringOutput)
}

// The Grafana workspace with which the service account is associated.
func (o WorkspaceServiceAccountOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceServiceAccount) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type WorkspaceServiceAccountArrayOutput struct{ *pulumi.OutputState }

func (WorkspaceServiceAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkspaceServiceAccount)(nil)).Elem()
}

func (o WorkspaceServiceAccountArrayOutput) ToWorkspaceServiceAccountArrayOutput() WorkspaceServiceAccountArrayOutput {
	return o
}

func (o WorkspaceServiceAccountArrayOutput) ToWorkspaceServiceAccountArrayOutputWithContext(ctx context.Context) WorkspaceServiceAccountArrayOutput {
	return o
}

func (o WorkspaceServiceAccountArrayOutput) Index(i pulumi.IntInput) WorkspaceServiceAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkspaceServiceAccount {
		return vs[0].([]*WorkspaceServiceAccount)[vs[1].(int)]
	}).(WorkspaceServiceAccountOutput)
}

type WorkspaceServiceAccountMapOutput struct{ *pulumi.OutputState }

func (WorkspaceServiceAccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkspaceServiceAccount)(nil)).Elem()
}

func (o WorkspaceServiceAccountMapOutput) ToWorkspaceServiceAccountMapOutput() WorkspaceServiceAccountMapOutput {
	return o
}

func (o WorkspaceServiceAccountMapOutput) ToWorkspaceServiceAccountMapOutputWithContext(ctx context.Context) WorkspaceServiceAccountMapOutput {
	return o
}

func (o WorkspaceServiceAccountMapOutput) MapIndex(k pulumi.StringInput) WorkspaceServiceAccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkspaceServiceAccount {
		return vs[0].(map[string]*WorkspaceServiceAccount)[vs[1].(string)]
	}).(WorkspaceServiceAccountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceServiceAccountInput)(nil)).Elem(), &WorkspaceServiceAccount{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceServiceAccountArrayInput)(nil)).Elem(), WorkspaceServiceAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceServiceAccountMapInput)(nil)).Elem(), WorkspaceServiceAccountMap{})
	pulumi.RegisterOutputType(WorkspaceServiceAccountOutput{})
	pulumi.RegisterOutputType(WorkspaceServiceAccountArrayOutput{})
	pulumi.RegisterOutputType(WorkspaceServiceAccountMapOutput{})
}
