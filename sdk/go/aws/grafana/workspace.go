// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Workspace struct {
	pulumi.CustomResourceState

	AccountAccessType        pulumi.StringOutput                `pulumi:"accountAccessType"`
	Arn                      pulumi.StringOutput                `pulumi:"arn"`
	AuthenticationProviders  pulumi.StringArrayOutput           `pulumi:"authenticationProviders"`
	DataSources              pulumi.StringArrayOutput           `pulumi:"dataSources"`
	Description              pulumi.StringPtrOutput             `pulumi:"description"`
	Endpoint                 pulumi.StringOutput                `pulumi:"endpoint"`
	GrafanaVersion           pulumi.StringOutput                `pulumi:"grafanaVersion"`
	Name                     pulumi.StringOutput                `pulumi:"name"`
	NotificationDestinations pulumi.StringArrayOutput           `pulumi:"notificationDestinations"`
	OrganizationRoleName     pulumi.StringPtrOutput             `pulumi:"organizationRoleName"`
	OrganizationalUnits      pulumi.StringArrayOutput           `pulumi:"organizationalUnits"`
	PermissionType           pulumi.StringOutput                `pulumi:"permissionType"`
	RoleArn                  pulumi.StringPtrOutput             `pulumi:"roleArn"`
	SamlConfigurationStatus  pulumi.StringOutput                `pulumi:"samlConfigurationStatus"`
	StackSetName             pulumi.StringPtrOutput             `pulumi:"stackSetName"`
	Tags                     pulumi.StringMapOutput             `pulumi:"tags"`
	TagsAll                  pulumi.StringMapOutput             `pulumi:"tagsAll"`
	VpcConfiguration         WorkspaceVpcConfigurationPtrOutput `pulumi:"vpcConfiguration"`
}

// NewWorkspace registers a new resource with the given unique name, arguments, and options.
func NewWorkspace(ctx *pulumi.Context,
	name string, args *WorkspaceArgs, opts ...pulumi.ResourceOption) (*Workspace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountAccessType == nil {
		return nil, errors.New("invalid value for required argument 'AccountAccessType'")
	}
	if args.AuthenticationProviders == nil {
		return nil, errors.New("invalid value for required argument 'AuthenticationProviders'")
	}
	if args.PermissionType == nil {
		return nil, errors.New("invalid value for required argument 'PermissionType'")
	}
	var resource Workspace
	err := ctx.RegisterResource("aws:grafana/workspace:Workspace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspace gets an existing Workspace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceState, opts ...pulumi.ResourceOption) (*Workspace, error) {
	var resource Workspace
	err := ctx.ReadResource("aws:grafana/workspace:Workspace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Workspace resources.
type workspaceState struct {
	AccountAccessType        *string                    `pulumi:"accountAccessType"`
	Arn                      *string                    `pulumi:"arn"`
	AuthenticationProviders  []string                   `pulumi:"authenticationProviders"`
	DataSources              []string                   `pulumi:"dataSources"`
	Description              *string                    `pulumi:"description"`
	Endpoint                 *string                    `pulumi:"endpoint"`
	GrafanaVersion           *string                    `pulumi:"grafanaVersion"`
	Name                     *string                    `pulumi:"name"`
	NotificationDestinations []string                   `pulumi:"notificationDestinations"`
	OrganizationRoleName     *string                    `pulumi:"organizationRoleName"`
	OrganizationalUnits      []string                   `pulumi:"organizationalUnits"`
	PermissionType           *string                    `pulumi:"permissionType"`
	RoleArn                  *string                    `pulumi:"roleArn"`
	SamlConfigurationStatus  *string                    `pulumi:"samlConfigurationStatus"`
	StackSetName             *string                    `pulumi:"stackSetName"`
	Tags                     map[string]string          `pulumi:"tags"`
	TagsAll                  map[string]string          `pulumi:"tagsAll"`
	VpcConfiguration         *WorkspaceVpcConfiguration `pulumi:"vpcConfiguration"`
}

type WorkspaceState struct {
	AccountAccessType        pulumi.StringPtrInput
	Arn                      pulumi.StringPtrInput
	AuthenticationProviders  pulumi.StringArrayInput
	DataSources              pulumi.StringArrayInput
	Description              pulumi.StringPtrInput
	Endpoint                 pulumi.StringPtrInput
	GrafanaVersion           pulumi.StringPtrInput
	Name                     pulumi.StringPtrInput
	NotificationDestinations pulumi.StringArrayInput
	OrganizationRoleName     pulumi.StringPtrInput
	OrganizationalUnits      pulumi.StringArrayInput
	PermissionType           pulumi.StringPtrInput
	RoleArn                  pulumi.StringPtrInput
	SamlConfigurationStatus  pulumi.StringPtrInput
	StackSetName             pulumi.StringPtrInput
	Tags                     pulumi.StringMapInput
	TagsAll                  pulumi.StringMapInput
	VpcConfiguration         WorkspaceVpcConfigurationPtrInput
}

func (WorkspaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceState)(nil)).Elem()
}

type workspaceArgs struct {
	AccountAccessType        string                     `pulumi:"accountAccessType"`
	AuthenticationProviders  []string                   `pulumi:"authenticationProviders"`
	DataSources              []string                   `pulumi:"dataSources"`
	Description              *string                    `pulumi:"description"`
	Name                     *string                    `pulumi:"name"`
	NotificationDestinations []string                   `pulumi:"notificationDestinations"`
	OrganizationRoleName     *string                    `pulumi:"organizationRoleName"`
	OrganizationalUnits      []string                   `pulumi:"organizationalUnits"`
	PermissionType           string                     `pulumi:"permissionType"`
	RoleArn                  *string                    `pulumi:"roleArn"`
	StackSetName             *string                    `pulumi:"stackSetName"`
	Tags                     map[string]string          `pulumi:"tags"`
	VpcConfiguration         *WorkspaceVpcConfiguration `pulumi:"vpcConfiguration"`
}

// The set of arguments for constructing a Workspace resource.
type WorkspaceArgs struct {
	AccountAccessType        pulumi.StringInput
	AuthenticationProviders  pulumi.StringArrayInput
	DataSources              pulumi.StringArrayInput
	Description              pulumi.StringPtrInput
	Name                     pulumi.StringPtrInput
	NotificationDestinations pulumi.StringArrayInput
	OrganizationRoleName     pulumi.StringPtrInput
	OrganizationalUnits      pulumi.StringArrayInput
	PermissionType           pulumi.StringInput
	RoleArn                  pulumi.StringPtrInput
	StackSetName             pulumi.StringPtrInput
	Tags                     pulumi.StringMapInput
	VpcConfiguration         WorkspaceVpcConfigurationPtrInput
}

func (WorkspaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceArgs)(nil)).Elem()
}

type WorkspaceInput interface {
	pulumi.Input

	ToWorkspaceOutput() WorkspaceOutput
	ToWorkspaceOutputWithContext(ctx context.Context) WorkspaceOutput
}

func (*Workspace) ElementType() reflect.Type {
	return reflect.TypeOf((**Workspace)(nil)).Elem()
}

func (i *Workspace) ToWorkspaceOutput() WorkspaceOutput {
	return i.ToWorkspaceOutputWithContext(context.Background())
}

func (i *Workspace) ToWorkspaceOutputWithContext(ctx context.Context) WorkspaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceOutput)
}

// WorkspaceArrayInput is an input type that accepts WorkspaceArray and WorkspaceArrayOutput values.
// You can construct a concrete instance of `WorkspaceArrayInput` via:
//
//	WorkspaceArray{ WorkspaceArgs{...} }
type WorkspaceArrayInput interface {
	pulumi.Input

	ToWorkspaceArrayOutput() WorkspaceArrayOutput
	ToWorkspaceArrayOutputWithContext(context.Context) WorkspaceArrayOutput
}

type WorkspaceArray []WorkspaceInput

func (WorkspaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Workspace)(nil)).Elem()
}

func (i WorkspaceArray) ToWorkspaceArrayOutput() WorkspaceArrayOutput {
	return i.ToWorkspaceArrayOutputWithContext(context.Background())
}

func (i WorkspaceArray) ToWorkspaceArrayOutputWithContext(ctx context.Context) WorkspaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceArrayOutput)
}

// WorkspaceMapInput is an input type that accepts WorkspaceMap and WorkspaceMapOutput values.
// You can construct a concrete instance of `WorkspaceMapInput` via:
//
//	WorkspaceMap{ "key": WorkspaceArgs{...} }
type WorkspaceMapInput interface {
	pulumi.Input

	ToWorkspaceMapOutput() WorkspaceMapOutput
	ToWorkspaceMapOutputWithContext(context.Context) WorkspaceMapOutput
}

type WorkspaceMap map[string]WorkspaceInput

func (WorkspaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Workspace)(nil)).Elem()
}

func (i WorkspaceMap) ToWorkspaceMapOutput() WorkspaceMapOutput {
	return i.ToWorkspaceMapOutputWithContext(context.Background())
}

func (i WorkspaceMap) ToWorkspaceMapOutputWithContext(ctx context.Context) WorkspaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceMapOutput)
}

type WorkspaceOutput struct{ *pulumi.OutputState }

func (WorkspaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Workspace)(nil)).Elem()
}

func (o WorkspaceOutput) ToWorkspaceOutput() WorkspaceOutput {
	return o
}

func (o WorkspaceOutput) ToWorkspaceOutputWithContext(ctx context.Context) WorkspaceOutput {
	return o
}

func (o WorkspaceOutput) AccountAccessType() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.AccountAccessType }).(pulumi.StringOutput)
}

func (o WorkspaceOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o WorkspaceOutput) AuthenticationProviders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringArrayOutput { return v.AuthenticationProviders }).(pulumi.StringArrayOutput)
}

func (o WorkspaceOutput) DataSources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringArrayOutput { return v.DataSources }).(pulumi.StringArrayOutput)
}

func (o WorkspaceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o WorkspaceOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

func (o WorkspaceOutput) GrafanaVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.GrafanaVersion }).(pulumi.StringOutput)
}

func (o WorkspaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o WorkspaceOutput) NotificationDestinations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringArrayOutput { return v.NotificationDestinations }).(pulumi.StringArrayOutput)
}

func (o WorkspaceOutput) OrganizationRoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringPtrOutput { return v.OrganizationRoleName }).(pulumi.StringPtrOutput)
}

func (o WorkspaceOutput) OrganizationalUnits() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringArrayOutput { return v.OrganizationalUnits }).(pulumi.StringArrayOutput)
}

func (o WorkspaceOutput) PermissionType() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.PermissionType }).(pulumi.StringOutput)
}

func (o WorkspaceOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringPtrOutput { return v.RoleArn }).(pulumi.StringPtrOutput)
}

func (o WorkspaceOutput) SamlConfigurationStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.SamlConfigurationStatus }).(pulumi.StringOutput)
}

func (o WorkspaceOutput) StackSetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringPtrOutput { return v.StackSetName }).(pulumi.StringPtrOutput)
}

func (o WorkspaceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o WorkspaceOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o WorkspaceOutput) VpcConfiguration() WorkspaceVpcConfigurationPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceVpcConfigurationPtrOutput { return v.VpcConfiguration }).(WorkspaceVpcConfigurationPtrOutput)
}

type WorkspaceArrayOutput struct{ *pulumi.OutputState }

func (WorkspaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Workspace)(nil)).Elem()
}

func (o WorkspaceArrayOutput) ToWorkspaceArrayOutput() WorkspaceArrayOutput {
	return o
}

func (o WorkspaceArrayOutput) ToWorkspaceArrayOutputWithContext(ctx context.Context) WorkspaceArrayOutput {
	return o
}

func (o WorkspaceArrayOutput) Index(i pulumi.IntInput) WorkspaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Workspace {
		return vs[0].([]*Workspace)[vs[1].(int)]
	}).(WorkspaceOutput)
}

type WorkspaceMapOutput struct{ *pulumi.OutputState }

func (WorkspaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Workspace)(nil)).Elem()
}

func (o WorkspaceMapOutput) ToWorkspaceMapOutput() WorkspaceMapOutput {
	return o
}

func (o WorkspaceMapOutput) ToWorkspaceMapOutputWithContext(ctx context.Context) WorkspaceMapOutput {
	return o
}

func (o WorkspaceMapOutput) MapIndex(k pulumi.StringInput) WorkspaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Workspace {
		return vs[0].(map[string]*Workspace)[vs[1].(string)]
	}).(WorkspaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceInput)(nil)).Elem(), &Workspace{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceArrayInput)(nil)).Elem(), WorkspaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceMapInput)(nil)).Elem(), WorkspaceMap{})
	pulumi.RegisterOutputType(WorkspaceOutput{})
	pulumi.RegisterOutputType(WorkspaceArrayOutput{})
	pulumi.RegisterOutputType(WorkspaceMapOutput{})
}
