// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := grafana.NewWorkspaceServiceAccount(ctx, "example", &grafana.WorkspaceServiceAccountArgs{
//				Name:        pulumi.String("example-admin"),
//				GrafanaRole: pulumi.String("ADMIN"),
//				WorkspaceId: pulumi.Any(exampleAwsGrafanaWorkspace.Id),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewWorkspaceServiceAccountToken(ctx, "example", &grafana.WorkspaceServiceAccountTokenArgs{
//				Name:             pulumi.String("example-key"),
//				ServiceAccountId: example.ServiceAccountId,
//				SecondsToLive:    pulumi.Int(3600),
//				WorkspaceId:      pulumi.Any(exampleAwsGrafanaWorkspace.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type WorkspaceServiceAccountToken struct {
	pulumi.CustomResourceState

	// Specifies when the service account token was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Specifies when the service account token will expire.
	ExpiresAt pulumi.StringOutput `pulumi:"expiresAt"`
	// The key for the service account token. Used when making calls to the Grafana HTTP APIs to authenticate and authorize the requests.
	Key pulumi.StringOutput `pulumi:"key"`
	// A name for the token to create. The name must be unique within the workspace.
	Name pulumi.StringOutput `pulumi:"name"`
	// Sets how long the token will be valid, in seconds. You can set the time up to 30 days in the future.
	SecondsToLive pulumi.IntOutput `pulumi:"secondsToLive"`
	// The ID of the service account for which to create a token.
	ServiceAccountId pulumi.StringOutput `pulumi:"serviceAccountId"`
	// Identifier of the service account token in the given Grafana workspace.
	ServiceAccountTokenId pulumi.StringOutput `pulumi:"serviceAccountTokenId"`
	// The Grafana workspace with which the service account token is associated.
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewWorkspaceServiceAccountToken registers a new resource with the given unique name, arguments, and options.
func NewWorkspaceServiceAccountToken(ctx *pulumi.Context,
	name string, args *WorkspaceServiceAccountTokenArgs, opts ...pulumi.ResourceOption) (*WorkspaceServiceAccountToken, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SecondsToLive == nil {
		return nil, errors.New("invalid value for required argument 'SecondsToLive'")
	}
	if args.ServiceAccountId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceAccountId'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"key",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkspaceServiceAccountToken
	err := ctx.RegisterResource("aws:grafana/workspaceServiceAccountToken:WorkspaceServiceAccountToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspaceServiceAccountToken gets an existing WorkspaceServiceAccountToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspaceServiceAccountToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceServiceAccountTokenState, opts ...pulumi.ResourceOption) (*WorkspaceServiceAccountToken, error) {
	var resource WorkspaceServiceAccountToken
	err := ctx.ReadResource("aws:grafana/workspaceServiceAccountToken:WorkspaceServiceAccountToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkspaceServiceAccountToken resources.
type workspaceServiceAccountTokenState struct {
	// Specifies when the service account token was created.
	CreatedAt *string `pulumi:"createdAt"`
	// Specifies when the service account token will expire.
	ExpiresAt *string `pulumi:"expiresAt"`
	// The key for the service account token. Used when making calls to the Grafana HTTP APIs to authenticate and authorize the requests.
	Key *string `pulumi:"key"`
	// A name for the token to create. The name must be unique within the workspace.
	Name *string `pulumi:"name"`
	// Sets how long the token will be valid, in seconds. You can set the time up to 30 days in the future.
	SecondsToLive *int `pulumi:"secondsToLive"`
	// The ID of the service account for which to create a token.
	ServiceAccountId *string `pulumi:"serviceAccountId"`
	// Identifier of the service account token in the given Grafana workspace.
	ServiceAccountTokenId *string `pulumi:"serviceAccountTokenId"`
	// The Grafana workspace with which the service account token is associated.
	WorkspaceId *string `pulumi:"workspaceId"`
}

type WorkspaceServiceAccountTokenState struct {
	// Specifies when the service account token was created.
	CreatedAt pulumi.StringPtrInput
	// Specifies when the service account token will expire.
	ExpiresAt pulumi.StringPtrInput
	// The key for the service account token. Used when making calls to the Grafana HTTP APIs to authenticate and authorize the requests.
	Key pulumi.StringPtrInput
	// A name for the token to create. The name must be unique within the workspace.
	Name pulumi.StringPtrInput
	// Sets how long the token will be valid, in seconds. You can set the time up to 30 days in the future.
	SecondsToLive pulumi.IntPtrInput
	// The ID of the service account for which to create a token.
	ServiceAccountId pulumi.StringPtrInput
	// Identifier of the service account token in the given Grafana workspace.
	ServiceAccountTokenId pulumi.StringPtrInput
	// The Grafana workspace with which the service account token is associated.
	WorkspaceId pulumi.StringPtrInput
}

func (WorkspaceServiceAccountTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceServiceAccountTokenState)(nil)).Elem()
}

type workspaceServiceAccountTokenArgs struct {
	// A name for the token to create. The name must be unique within the workspace.
	Name *string `pulumi:"name"`
	// Sets how long the token will be valid, in seconds. You can set the time up to 30 days in the future.
	SecondsToLive int `pulumi:"secondsToLive"`
	// The ID of the service account for which to create a token.
	ServiceAccountId string `pulumi:"serviceAccountId"`
	// The Grafana workspace with which the service account token is associated.
	WorkspaceId string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a WorkspaceServiceAccountToken resource.
type WorkspaceServiceAccountTokenArgs struct {
	// A name for the token to create. The name must be unique within the workspace.
	Name pulumi.StringPtrInput
	// Sets how long the token will be valid, in seconds. You can set the time up to 30 days in the future.
	SecondsToLive pulumi.IntInput
	// The ID of the service account for which to create a token.
	ServiceAccountId pulumi.StringInput
	// The Grafana workspace with which the service account token is associated.
	WorkspaceId pulumi.StringInput
}

func (WorkspaceServiceAccountTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceServiceAccountTokenArgs)(nil)).Elem()
}

type WorkspaceServiceAccountTokenInput interface {
	pulumi.Input

	ToWorkspaceServiceAccountTokenOutput() WorkspaceServiceAccountTokenOutput
	ToWorkspaceServiceAccountTokenOutputWithContext(ctx context.Context) WorkspaceServiceAccountTokenOutput
}

func (*WorkspaceServiceAccountToken) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceServiceAccountToken)(nil)).Elem()
}

func (i *WorkspaceServiceAccountToken) ToWorkspaceServiceAccountTokenOutput() WorkspaceServiceAccountTokenOutput {
	return i.ToWorkspaceServiceAccountTokenOutputWithContext(context.Background())
}

func (i *WorkspaceServiceAccountToken) ToWorkspaceServiceAccountTokenOutputWithContext(ctx context.Context) WorkspaceServiceAccountTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceServiceAccountTokenOutput)
}

// WorkspaceServiceAccountTokenArrayInput is an input type that accepts WorkspaceServiceAccountTokenArray and WorkspaceServiceAccountTokenArrayOutput values.
// You can construct a concrete instance of `WorkspaceServiceAccountTokenArrayInput` via:
//
//	WorkspaceServiceAccountTokenArray{ WorkspaceServiceAccountTokenArgs{...} }
type WorkspaceServiceAccountTokenArrayInput interface {
	pulumi.Input

	ToWorkspaceServiceAccountTokenArrayOutput() WorkspaceServiceAccountTokenArrayOutput
	ToWorkspaceServiceAccountTokenArrayOutputWithContext(context.Context) WorkspaceServiceAccountTokenArrayOutput
}

type WorkspaceServiceAccountTokenArray []WorkspaceServiceAccountTokenInput

func (WorkspaceServiceAccountTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkspaceServiceAccountToken)(nil)).Elem()
}

func (i WorkspaceServiceAccountTokenArray) ToWorkspaceServiceAccountTokenArrayOutput() WorkspaceServiceAccountTokenArrayOutput {
	return i.ToWorkspaceServiceAccountTokenArrayOutputWithContext(context.Background())
}

func (i WorkspaceServiceAccountTokenArray) ToWorkspaceServiceAccountTokenArrayOutputWithContext(ctx context.Context) WorkspaceServiceAccountTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceServiceAccountTokenArrayOutput)
}

// WorkspaceServiceAccountTokenMapInput is an input type that accepts WorkspaceServiceAccountTokenMap and WorkspaceServiceAccountTokenMapOutput values.
// You can construct a concrete instance of `WorkspaceServiceAccountTokenMapInput` via:
//
//	WorkspaceServiceAccountTokenMap{ "key": WorkspaceServiceAccountTokenArgs{...} }
type WorkspaceServiceAccountTokenMapInput interface {
	pulumi.Input

	ToWorkspaceServiceAccountTokenMapOutput() WorkspaceServiceAccountTokenMapOutput
	ToWorkspaceServiceAccountTokenMapOutputWithContext(context.Context) WorkspaceServiceAccountTokenMapOutput
}

type WorkspaceServiceAccountTokenMap map[string]WorkspaceServiceAccountTokenInput

func (WorkspaceServiceAccountTokenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkspaceServiceAccountToken)(nil)).Elem()
}

func (i WorkspaceServiceAccountTokenMap) ToWorkspaceServiceAccountTokenMapOutput() WorkspaceServiceAccountTokenMapOutput {
	return i.ToWorkspaceServiceAccountTokenMapOutputWithContext(context.Background())
}

func (i WorkspaceServiceAccountTokenMap) ToWorkspaceServiceAccountTokenMapOutputWithContext(ctx context.Context) WorkspaceServiceAccountTokenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceServiceAccountTokenMapOutput)
}

type WorkspaceServiceAccountTokenOutput struct{ *pulumi.OutputState }

func (WorkspaceServiceAccountTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceServiceAccountToken)(nil)).Elem()
}

func (o WorkspaceServiceAccountTokenOutput) ToWorkspaceServiceAccountTokenOutput() WorkspaceServiceAccountTokenOutput {
	return o
}

func (o WorkspaceServiceAccountTokenOutput) ToWorkspaceServiceAccountTokenOutputWithContext(ctx context.Context) WorkspaceServiceAccountTokenOutput {
	return o
}

// Specifies when the service account token was created.
func (o WorkspaceServiceAccountTokenOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceServiceAccountToken) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Specifies when the service account token will expire.
func (o WorkspaceServiceAccountTokenOutput) ExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceServiceAccountToken) pulumi.StringOutput { return v.ExpiresAt }).(pulumi.StringOutput)
}

// The key for the service account token. Used when making calls to the Grafana HTTP APIs to authenticate and authorize the requests.
func (o WorkspaceServiceAccountTokenOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceServiceAccountToken) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// A name for the token to create. The name must be unique within the workspace.
func (o WorkspaceServiceAccountTokenOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceServiceAccountToken) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Sets how long the token will be valid, in seconds. You can set the time up to 30 days in the future.
func (o WorkspaceServiceAccountTokenOutput) SecondsToLive() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkspaceServiceAccountToken) pulumi.IntOutput { return v.SecondsToLive }).(pulumi.IntOutput)
}

// The ID of the service account for which to create a token.
func (o WorkspaceServiceAccountTokenOutput) ServiceAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceServiceAccountToken) pulumi.StringOutput { return v.ServiceAccountId }).(pulumi.StringOutput)
}

// Identifier of the service account token in the given Grafana workspace.
func (o WorkspaceServiceAccountTokenOutput) ServiceAccountTokenId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceServiceAccountToken) pulumi.StringOutput { return v.ServiceAccountTokenId }).(pulumi.StringOutput)
}

// The Grafana workspace with which the service account token is associated.
func (o WorkspaceServiceAccountTokenOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceServiceAccountToken) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type WorkspaceServiceAccountTokenArrayOutput struct{ *pulumi.OutputState }

func (WorkspaceServiceAccountTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkspaceServiceAccountToken)(nil)).Elem()
}

func (o WorkspaceServiceAccountTokenArrayOutput) ToWorkspaceServiceAccountTokenArrayOutput() WorkspaceServiceAccountTokenArrayOutput {
	return o
}

func (o WorkspaceServiceAccountTokenArrayOutput) ToWorkspaceServiceAccountTokenArrayOutputWithContext(ctx context.Context) WorkspaceServiceAccountTokenArrayOutput {
	return o
}

func (o WorkspaceServiceAccountTokenArrayOutput) Index(i pulumi.IntInput) WorkspaceServiceAccountTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkspaceServiceAccountToken {
		return vs[0].([]*WorkspaceServiceAccountToken)[vs[1].(int)]
	}).(WorkspaceServiceAccountTokenOutput)
}

type WorkspaceServiceAccountTokenMapOutput struct{ *pulumi.OutputState }

func (WorkspaceServiceAccountTokenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkspaceServiceAccountToken)(nil)).Elem()
}

func (o WorkspaceServiceAccountTokenMapOutput) ToWorkspaceServiceAccountTokenMapOutput() WorkspaceServiceAccountTokenMapOutput {
	return o
}

func (o WorkspaceServiceAccountTokenMapOutput) ToWorkspaceServiceAccountTokenMapOutputWithContext(ctx context.Context) WorkspaceServiceAccountTokenMapOutput {
	return o
}

func (o WorkspaceServiceAccountTokenMapOutput) MapIndex(k pulumi.StringInput) WorkspaceServiceAccountTokenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkspaceServiceAccountToken {
		return vs[0].(map[string]*WorkspaceServiceAccountToken)[vs[1].(string)]
	}).(WorkspaceServiceAccountTokenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceServiceAccountTokenInput)(nil)).Elem(), &WorkspaceServiceAccountToken{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceServiceAccountTokenArrayInput)(nil)).Elem(), WorkspaceServiceAccountTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceServiceAccountTokenMapInput)(nil)).Elem(), WorkspaceServiceAccountTokenMap{})
	pulumi.RegisterOutputType(WorkspaceServiceAccountTokenOutput{})
	pulumi.RegisterOutputType(WorkspaceServiceAccountTokenArrayOutput{})
	pulumi.RegisterOutputType(WorkspaceServiceAccountTokenMapOutput{})
}
