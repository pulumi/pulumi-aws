// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package memorydb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ClusterClusterEndpoint struct {
	// DNS hostname of the node.
	Address *string `pulumi:"address"`
	// The port number on which each of the nodes accepts connections. Defaults to `6379`.
	Port *int `pulumi:"port"`
}

// ClusterClusterEndpointInput is an input type that accepts ClusterClusterEndpointArgs and ClusterClusterEndpointOutput values.
// You can construct a concrete instance of `ClusterClusterEndpointInput` via:
//
//          ClusterClusterEndpointArgs{...}
type ClusterClusterEndpointInput interface {
	pulumi.Input

	ToClusterClusterEndpointOutput() ClusterClusterEndpointOutput
	ToClusterClusterEndpointOutputWithContext(context.Context) ClusterClusterEndpointOutput
}

type ClusterClusterEndpointArgs struct {
	// DNS hostname of the node.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The port number on which each of the nodes accepts connections. Defaults to `6379`.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (ClusterClusterEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterClusterEndpoint)(nil)).Elem()
}

func (i ClusterClusterEndpointArgs) ToClusterClusterEndpointOutput() ClusterClusterEndpointOutput {
	return i.ToClusterClusterEndpointOutputWithContext(context.Background())
}

func (i ClusterClusterEndpointArgs) ToClusterClusterEndpointOutputWithContext(ctx context.Context) ClusterClusterEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterClusterEndpointOutput)
}

// ClusterClusterEndpointArrayInput is an input type that accepts ClusterClusterEndpointArray and ClusterClusterEndpointArrayOutput values.
// You can construct a concrete instance of `ClusterClusterEndpointArrayInput` via:
//
//          ClusterClusterEndpointArray{ ClusterClusterEndpointArgs{...} }
type ClusterClusterEndpointArrayInput interface {
	pulumi.Input

	ToClusterClusterEndpointArrayOutput() ClusterClusterEndpointArrayOutput
	ToClusterClusterEndpointArrayOutputWithContext(context.Context) ClusterClusterEndpointArrayOutput
}

type ClusterClusterEndpointArray []ClusterClusterEndpointInput

func (ClusterClusterEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterClusterEndpoint)(nil)).Elem()
}

func (i ClusterClusterEndpointArray) ToClusterClusterEndpointArrayOutput() ClusterClusterEndpointArrayOutput {
	return i.ToClusterClusterEndpointArrayOutputWithContext(context.Background())
}

func (i ClusterClusterEndpointArray) ToClusterClusterEndpointArrayOutputWithContext(ctx context.Context) ClusterClusterEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterClusterEndpointArrayOutput)
}

type ClusterClusterEndpointOutput struct{ *pulumi.OutputState }

func (ClusterClusterEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterClusterEndpoint)(nil)).Elem()
}

func (o ClusterClusterEndpointOutput) ToClusterClusterEndpointOutput() ClusterClusterEndpointOutput {
	return o
}

func (o ClusterClusterEndpointOutput) ToClusterClusterEndpointOutputWithContext(ctx context.Context) ClusterClusterEndpointOutput {
	return o
}

// DNS hostname of the node.
func (o ClusterClusterEndpointOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterClusterEndpoint) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The port number on which each of the nodes accepts connections. Defaults to `6379`.
func (o ClusterClusterEndpointOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterClusterEndpoint) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type ClusterClusterEndpointArrayOutput struct{ *pulumi.OutputState }

func (ClusterClusterEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterClusterEndpoint)(nil)).Elem()
}

func (o ClusterClusterEndpointArrayOutput) ToClusterClusterEndpointArrayOutput() ClusterClusterEndpointArrayOutput {
	return o
}

func (o ClusterClusterEndpointArrayOutput) ToClusterClusterEndpointArrayOutputWithContext(ctx context.Context) ClusterClusterEndpointArrayOutput {
	return o
}

func (o ClusterClusterEndpointArrayOutput) Index(i pulumi.IntInput) ClusterClusterEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterClusterEndpoint {
		return vs[0].([]ClusterClusterEndpoint)[vs[1].(int)]
	}).(ClusterClusterEndpointOutput)
}

type ClusterShard struct {
	// Name of this node.
	// * `endpoint`
	Name *string `pulumi:"name"`
	// Set of nodes in this shard.
	Nodes []ClusterShardNode `pulumi:"nodes"`
	// Number of individual nodes in this shard.
	NumNodes *int `pulumi:"numNodes"`
	// Keyspace for this shard. Example: `0-16383`.
	Slots *string `pulumi:"slots"`
}

// ClusterShardInput is an input type that accepts ClusterShardArgs and ClusterShardOutput values.
// You can construct a concrete instance of `ClusterShardInput` via:
//
//          ClusterShardArgs{...}
type ClusterShardInput interface {
	pulumi.Input

	ToClusterShardOutput() ClusterShardOutput
	ToClusterShardOutputWithContext(context.Context) ClusterShardOutput
}

type ClusterShardArgs struct {
	// Name of this node.
	// * `endpoint`
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Set of nodes in this shard.
	Nodes ClusterShardNodeArrayInput `pulumi:"nodes"`
	// Number of individual nodes in this shard.
	NumNodes pulumi.IntPtrInput `pulumi:"numNodes"`
	// Keyspace for this shard. Example: `0-16383`.
	Slots pulumi.StringPtrInput `pulumi:"slots"`
}

func (ClusterShardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterShard)(nil)).Elem()
}

func (i ClusterShardArgs) ToClusterShardOutput() ClusterShardOutput {
	return i.ToClusterShardOutputWithContext(context.Background())
}

func (i ClusterShardArgs) ToClusterShardOutputWithContext(ctx context.Context) ClusterShardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterShardOutput)
}

// ClusterShardArrayInput is an input type that accepts ClusterShardArray and ClusterShardArrayOutput values.
// You can construct a concrete instance of `ClusterShardArrayInput` via:
//
//          ClusterShardArray{ ClusterShardArgs{...} }
type ClusterShardArrayInput interface {
	pulumi.Input

	ToClusterShardArrayOutput() ClusterShardArrayOutput
	ToClusterShardArrayOutputWithContext(context.Context) ClusterShardArrayOutput
}

type ClusterShardArray []ClusterShardInput

func (ClusterShardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterShard)(nil)).Elem()
}

func (i ClusterShardArray) ToClusterShardArrayOutput() ClusterShardArrayOutput {
	return i.ToClusterShardArrayOutputWithContext(context.Background())
}

func (i ClusterShardArray) ToClusterShardArrayOutputWithContext(ctx context.Context) ClusterShardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterShardArrayOutput)
}

type ClusterShardOutput struct{ *pulumi.OutputState }

func (ClusterShardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterShard)(nil)).Elem()
}

func (o ClusterShardOutput) ToClusterShardOutput() ClusterShardOutput {
	return o
}

func (o ClusterShardOutput) ToClusterShardOutputWithContext(ctx context.Context) ClusterShardOutput {
	return o
}

// Name of this node.
// * `endpoint`
func (o ClusterShardOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterShard) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Set of nodes in this shard.
func (o ClusterShardOutput) Nodes() ClusterShardNodeArrayOutput {
	return o.ApplyT(func(v ClusterShard) []ClusterShardNode { return v.Nodes }).(ClusterShardNodeArrayOutput)
}

// Number of individual nodes in this shard.
func (o ClusterShardOutput) NumNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterShard) *int { return v.NumNodes }).(pulumi.IntPtrOutput)
}

// Keyspace for this shard. Example: `0-16383`.
func (o ClusterShardOutput) Slots() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterShard) *string { return v.Slots }).(pulumi.StringPtrOutput)
}

type ClusterShardArrayOutput struct{ *pulumi.OutputState }

func (ClusterShardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterShard)(nil)).Elem()
}

func (o ClusterShardArrayOutput) ToClusterShardArrayOutput() ClusterShardArrayOutput {
	return o
}

func (o ClusterShardArrayOutput) ToClusterShardArrayOutputWithContext(ctx context.Context) ClusterShardArrayOutput {
	return o
}

func (o ClusterShardArrayOutput) Index(i pulumi.IntInput) ClusterShardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterShard {
		return vs[0].([]ClusterShard)[vs[1].(int)]
	}).(ClusterShardOutput)
}

type ClusterShardNode struct {
	// The Availability Zone in which the node resides.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The date and time when the node was created. Example: `2022-01-01T21:00:00Z`.
	CreateTime *string                    `pulumi:"createTime"`
	Endpoints  []ClusterShardNodeEndpoint `pulumi:"endpoints"`
	// Name of this node.
	// * `endpoint`
	Name *string `pulumi:"name"`
}

// ClusterShardNodeInput is an input type that accepts ClusterShardNodeArgs and ClusterShardNodeOutput values.
// You can construct a concrete instance of `ClusterShardNodeInput` via:
//
//          ClusterShardNodeArgs{...}
type ClusterShardNodeInput interface {
	pulumi.Input

	ToClusterShardNodeOutput() ClusterShardNodeOutput
	ToClusterShardNodeOutputWithContext(context.Context) ClusterShardNodeOutput
}

type ClusterShardNodeArgs struct {
	// The Availability Zone in which the node resides.
	AvailabilityZone pulumi.StringPtrInput `pulumi:"availabilityZone"`
	// The date and time when the node was created. Example: `2022-01-01T21:00:00Z`.
	CreateTime pulumi.StringPtrInput              `pulumi:"createTime"`
	Endpoints  ClusterShardNodeEndpointArrayInput `pulumi:"endpoints"`
	// Name of this node.
	// * `endpoint`
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ClusterShardNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterShardNode)(nil)).Elem()
}

func (i ClusterShardNodeArgs) ToClusterShardNodeOutput() ClusterShardNodeOutput {
	return i.ToClusterShardNodeOutputWithContext(context.Background())
}

func (i ClusterShardNodeArgs) ToClusterShardNodeOutputWithContext(ctx context.Context) ClusterShardNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterShardNodeOutput)
}

// ClusterShardNodeArrayInput is an input type that accepts ClusterShardNodeArray and ClusterShardNodeArrayOutput values.
// You can construct a concrete instance of `ClusterShardNodeArrayInput` via:
//
//          ClusterShardNodeArray{ ClusterShardNodeArgs{...} }
type ClusterShardNodeArrayInput interface {
	pulumi.Input

	ToClusterShardNodeArrayOutput() ClusterShardNodeArrayOutput
	ToClusterShardNodeArrayOutputWithContext(context.Context) ClusterShardNodeArrayOutput
}

type ClusterShardNodeArray []ClusterShardNodeInput

func (ClusterShardNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterShardNode)(nil)).Elem()
}

func (i ClusterShardNodeArray) ToClusterShardNodeArrayOutput() ClusterShardNodeArrayOutput {
	return i.ToClusterShardNodeArrayOutputWithContext(context.Background())
}

func (i ClusterShardNodeArray) ToClusterShardNodeArrayOutputWithContext(ctx context.Context) ClusterShardNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterShardNodeArrayOutput)
}

type ClusterShardNodeOutput struct{ *pulumi.OutputState }

func (ClusterShardNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterShardNode)(nil)).Elem()
}

func (o ClusterShardNodeOutput) ToClusterShardNodeOutput() ClusterShardNodeOutput {
	return o
}

func (o ClusterShardNodeOutput) ToClusterShardNodeOutputWithContext(ctx context.Context) ClusterShardNodeOutput {
	return o
}

// The Availability Zone in which the node resides.
func (o ClusterShardNodeOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterShardNode) *string { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

// The date and time when the node was created. Example: `2022-01-01T21:00:00Z`.
func (o ClusterShardNodeOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterShardNode) *string { return v.CreateTime }).(pulumi.StringPtrOutput)
}

func (o ClusterShardNodeOutput) Endpoints() ClusterShardNodeEndpointArrayOutput {
	return o.ApplyT(func(v ClusterShardNode) []ClusterShardNodeEndpoint { return v.Endpoints }).(ClusterShardNodeEndpointArrayOutput)
}

// Name of this node.
// * `endpoint`
func (o ClusterShardNodeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterShardNode) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ClusterShardNodeArrayOutput struct{ *pulumi.OutputState }

func (ClusterShardNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterShardNode)(nil)).Elem()
}

func (o ClusterShardNodeArrayOutput) ToClusterShardNodeArrayOutput() ClusterShardNodeArrayOutput {
	return o
}

func (o ClusterShardNodeArrayOutput) ToClusterShardNodeArrayOutputWithContext(ctx context.Context) ClusterShardNodeArrayOutput {
	return o
}

func (o ClusterShardNodeArrayOutput) Index(i pulumi.IntInput) ClusterShardNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterShardNode {
		return vs[0].([]ClusterShardNode)[vs[1].(int)]
	}).(ClusterShardNodeOutput)
}

type ClusterShardNodeEndpoint struct {
	// DNS hostname of the node.
	Address *string `pulumi:"address"`
	// The port number on which each of the nodes accepts connections. Defaults to `6379`.
	Port *int `pulumi:"port"`
}

// ClusterShardNodeEndpointInput is an input type that accepts ClusterShardNodeEndpointArgs and ClusterShardNodeEndpointOutput values.
// You can construct a concrete instance of `ClusterShardNodeEndpointInput` via:
//
//          ClusterShardNodeEndpointArgs{...}
type ClusterShardNodeEndpointInput interface {
	pulumi.Input

	ToClusterShardNodeEndpointOutput() ClusterShardNodeEndpointOutput
	ToClusterShardNodeEndpointOutputWithContext(context.Context) ClusterShardNodeEndpointOutput
}

type ClusterShardNodeEndpointArgs struct {
	// DNS hostname of the node.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The port number on which each of the nodes accepts connections. Defaults to `6379`.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (ClusterShardNodeEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterShardNodeEndpoint)(nil)).Elem()
}

func (i ClusterShardNodeEndpointArgs) ToClusterShardNodeEndpointOutput() ClusterShardNodeEndpointOutput {
	return i.ToClusterShardNodeEndpointOutputWithContext(context.Background())
}

func (i ClusterShardNodeEndpointArgs) ToClusterShardNodeEndpointOutputWithContext(ctx context.Context) ClusterShardNodeEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterShardNodeEndpointOutput)
}

// ClusterShardNodeEndpointArrayInput is an input type that accepts ClusterShardNodeEndpointArray and ClusterShardNodeEndpointArrayOutput values.
// You can construct a concrete instance of `ClusterShardNodeEndpointArrayInput` via:
//
//          ClusterShardNodeEndpointArray{ ClusterShardNodeEndpointArgs{...} }
type ClusterShardNodeEndpointArrayInput interface {
	pulumi.Input

	ToClusterShardNodeEndpointArrayOutput() ClusterShardNodeEndpointArrayOutput
	ToClusterShardNodeEndpointArrayOutputWithContext(context.Context) ClusterShardNodeEndpointArrayOutput
}

type ClusterShardNodeEndpointArray []ClusterShardNodeEndpointInput

func (ClusterShardNodeEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterShardNodeEndpoint)(nil)).Elem()
}

func (i ClusterShardNodeEndpointArray) ToClusterShardNodeEndpointArrayOutput() ClusterShardNodeEndpointArrayOutput {
	return i.ToClusterShardNodeEndpointArrayOutputWithContext(context.Background())
}

func (i ClusterShardNodeEndpointArray) ToClusterShardNodeEndpointArrayOutputWithContext(ctx context.Context) ClusterShardNodeEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterShardNodeEndpointArrayOutput)
}

type ClusterShardNodeEndpointOutput struct{ *pulumi.OutputState }

func (ClusterShardNodeEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterShardNodeEndpoint)(nil)).Elem()
}

func (o ClusterShardNodeEndpointOutput) ToClusterShardNodeEndpointOutput() ClusterShardNodeEndpointOutput {
	return o
}

func (o ClusterShardNodeEndpointOutput) ToClusterShardNodeEndpointOutputWithContext(ctx context.Context) ClusterShardNodeEndpointOutput {
	return o
}

// DNS hostname of the node.
func (o ClusterShardNodeEndpointOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterShardNodeEndpoint) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The port number on which each of the nodes accepts connections. Defaults to `6379`.
func (o ClusterShardNodeEndpointOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterShardNodeEndpoint) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type ClusterShardNodeEndpointArrayOutput struct{ *pulumi.OutputState }

func (ClusterShardNodeEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterShardNodeEndpoint)(nil)).Elem()
}

func (o ClusterShardNodeEndpointArrayOutput) ToClusterShardNodeEndpointArrayOutput() ClusterShardNodeEndpointArrayOutput {
	return o
}

func (o ClusterShardNodeEndpointArrayOutput) ToClusterShardNodeEndpointArrayOutputWithContext(ctx context.Context) ClusterShardNodeEndpointArrayOutput {
	return o
}

func (o ClusterShardNodeEndpointArrayOutput) Index(i pulumi.IntInput) ClusterShardNodeEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterShardNodeEndpoint {
		return vs[0].([]ClusterShardNodeEndpoint)[vs[1].(int)]
	}).(ClusterShardNodeEndpointOutput)
}

type ParameterGroupParameter struct {
	// The name of the parameter.
	Name string `pulumi:"name"`
	// The value of the parameter.
	Value string `pulumi:"value"`
}

// ParameterGroupParameterInput is an input type that accepts ParameterGroupParameterArgs and ParameterGroupParameterOutput values.
// You can construct a concrete instance of `ParameterGroupParameterInput` via:
//
//          ParameterGroupParameterArgs{...}
type ParameterGroupParameterInput interface {
	pulumi.Input

	ToParameterGroupParameterOutput() ParameterGroupParameterOutput
	ToParameterGroupParameterOutputWithContext(context.Context) ParameterGroupParameterOutput
}

type ParameterGroupParameterArgs struct {
	// The name of the parameter.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the parameter.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ParameterGroupParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterGroupParameter)(nil)).Elem()
}

func (i ParameterGroupParameterArgs) ToParameterGroupParameterOutput() ParameterGroupParameterOutput {
	return i.ToParameterGroupParameterOutputWithContext(context.Background())
}

func (i ParameterGroupParameterArgs) ToParameterGroupParameterOutputWithContext(ctx context.Context) ParameterGroupParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterGroupParameterOutput)
}

// ParameterGroupParameterArrayInput is an input type that accepts ParameterGroupParameterArray and ParameterGroupParameterArrayOutput values.
// You can construct a concrete instance of `ParameterGroupParameterArrayInput` via:
//
//          ParameterGroupParameterArray{ ParameterGroupParameterArgs{...} }
type ParameterGroupParameterArrayInput interface {
	pulumi.Input

	ToParameterGroupParameterArrayOutput() ParameterGroupParameterArrayOutput
	ToParameterGroupParameterArrayOutputWithContext(context.Context) ParameterGroupParameterArrayOutput
}

type ParameterGroupParameterArray []ParameterGroupParameterInput

func (ParameterGroupParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ParameterGroupParameter)(nil)).Elem()
}

func (i ParameterGroupParameterArray) ToParameterGroupParameterArrayOutput() ParameterGroupParameterArrayOutput {
	return i.ToParameterGroupParameterArrayOutputWithContext(context.Background())
}

func (i ParameterGroupParameterArray) ToParameterGroupParameterArrayOutputWithContext(ctx context.Context) ParameterGroupParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterGroupParameterArrayOutput)
}

type ParameterGroupParameterOutput struct{ *pulumi.OutputState }

func (ParameterGroupParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterGroupParameter)(nil)).Elem()
}

func (o ParameterGroupParameterOutput) ToParameterGroupParameterOutput() ParameterGroupParameterOutput {
	return o
}

func (o ParameterGroupParameterOutput) ToParameterGroupParameterOutputWithContext(ctx context.Context) ParameterGroupParameterOutput {
	return o
}

// The name of the parameter.
func (o ParameterGroupParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterGroupParameter) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the parameter.
func (o ParameterGroupParameterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterGroupParameter) string { return v.Value }).(pulumi.StringOutput)
}

type ParameterGroupParameterArrayOutput struct{ *pulumi.OutputState }

func (ParameterGroupParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ParameterGroupParameter)(nil)).Elem()
}

func (o ParameterGroupParameterArrayOutput) ToParameterGroupParameterArrayOutput() ParameterGroupParameterArrayOutput {
	return o
}

func (o ParameterGroupParameterArrayOutput) ToParameterGroupParameterArrayOutputWithContext(ctx context.Context) ParameterGroupParameterArrayOutput {
	return o
}

func (o ParameterGroupParameterArrayOutput) Index(i pulumi.IntInput) ParameterGroupParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ParameterGroupParameter {
		return vs[0].([]ParameterGroupParameter)[vs[1].(int)]
	}).(ParameterGroupParameterOutput)
}

type UserAuthenticationMode struct {
	// The number of passwords belonging to the user.
	PasswordCount *int `pulumi:"passwordCount"`
	// The set of passwords used for authentication. You can create up to two passwords for each user.
	Passwords []string `pulumi:"passwords"`
	// Indicates whether the user requires a password to authenticate. Must be set to `password`.
	Type string `pulumi:"type"`
}

// UserAuthenticationModeInput is an input type that accepts UserAuthenticationModeArgs and UserAuthenticationModeOutput values.
// You can construct a concrete instance of `UserAuthenticationModeInput` via:
//
//          UserAuthenticationModeArgs{...}
type UserAuthenticationModeInput interface {
	pulumi.Input

	ToUserAuthenticationModeOutput() UserAuthenticationModeOutput
	ToUserAuthenticationModeOutputWithContext(context.Context) UserAuthenticationModeOutput
}

type UserAuthenticationModeArgs struct {
	// The number of passwords belonging to the user.
	PasswordCount pulumi.IntPtrInput `pulumi:"passwordCount"`
	// The set of passwords used for authentication. You can create up to two passwords for each user.
	Passwords pulumi.StringArrayInput `pulumi:"passwords"`
	// Indicates whether the user requires a password to authenticate. Must be set to `password`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (UserAuthenticationModeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAuthenticationMode)(nil)).Elem()
}

func (i UserAuthenticationModeArgs) ToUserAuthenticationModeOutput() UserAuthenticationModeOutput {
	return i.ToUserAuthenticationModeOutputWithContext(context.Background())
}

func (i UserAuthenticationModeArgs) ToUserAuthenticationModeOutputWithContext(ctx context.Context) UserAuthenticationModeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAuthenticationModeOutput)
}

func (i UserAuthenticationModeArgs) ToUserAuthenticationModePtrOutput() UserAuthenticationModePtrOutput {
	return i.ToUserAuthenticationModePtrOutputWithContext(context.Background())
}

func (i UserAuthenticationModeArgs) ToUserAuthenticationModePtrOutputWithContext(ctx context.Context) UserAuthenticationModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAuthenticationModeOutput).ToUserAuthenticationModePtrOutputWithContext(ctx)
}

// UserAuthenticationModePtrInput is an input type that accepts UserAuthenticationModeArgs, UserAuthenticationModePtr and UserAuthenticationModePtrOutput values.
// You can construct a concrete instance of `UserAuthenticationModePtrInput` via:
//
//          UserAuthenticationModeArgs{...}
//
//  or:
//
//          nil
type UserAuthenticationModePtrInput interface {
	pulumi.Input

	ToUserAuthenticationModePtrOutput() UserAuthenticationModePtrOutput
	ToUserAuthenticationModePtrOutputWithContext(context.Context) UserAuthenticationModePtrOutput
}

type userAuthenticationModePtrType UserAuthenticationModeArgs

func UserAuthenticationModePtr(v *UserAuthenticationModeArgs) UserAuthenticationModePtrInput {
	return (*userAuthenticationModePtrType)(v)
}

func (*userAuthenticationModePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAuthenticationMode)(nil)).Elem()
}

func (i *userAuthenticationModePtrType) ToUserAuthenticationModePtrOutput() UserAuthenticationModePtrOutput {
	return i.ToUserAuthenticationModePtrOutputWithContext(context.Background())
}

func (i *userAuthenticationModePtrType) ToUserAuthenticationModePtrOutputWithContext(ctx context.Context) UserAuthenticationModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAuthenticationModePtrOutput)
}

type UserAuthenticationModeOutput struct{ *pulumi.OutputState }

func (UserAuthenticationModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAuthenticationMode)(nil)).Elem()
}

func (o UserAuthenticationModeOutput) ToUserAuthenticationModeOutput() UserAuthenticationModeOutput {
	return o
}

func (o UserAuthenticationModeOutput) ToUserAuthenticationModeOutputWithContext(ctx context.Context) UserAuthenticationModeOutput {
	return o
}

func (o UserAuthenticationModeOutput) ToUserAuthenticationModePtrOutput() UserAuthenticationModePtrOutput {
	return o.ToUserAuthenticationModePtrOutputWithContext(context.Background())
}

func (o UserAuthenticationModeOutput) ToUserAuthenticationModePtrOutputWithContext(ctx context.Context) UserAuthenticationModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserAuthenticationMode) *UserAuthenticationMode {
		return &v
	}).(UserAuthenticationModePtrOutput)
}

// The number of passwords belonging to the user.
func (o UserAuthenticationModeOutput) PasswordCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UserAuthenticationMode) *int { return v.PasswordCount }).(pulumi.IntPtrOutput)
}

// The set of passwords used for authentication. You can create up to two passwords for each user.
func (o UserAuthenticationModeOutput) Passwords() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserAuthenticationMode) []string { return v.Passwords }).(pulumi.StringArrayOutput)
}

// Indicates whether the user requires a password to authenticate. Must be set to `password`.
func (o UserAuthenticationModeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v UserAuthenticationMode) string { return v.Type }).(pulumi.StringOutput)
}

type UserAuthenticationModePtrOutput struct{ *pulumi.OutputState }

func (UserAuthenticationModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAuthenticationMode)(nil)).Elem()
}

func (o UserAuthenticationModePtrOutput) ToUserAuthenticationModePtrOutput() UserAuthenticationModePtrOutput {
	return o
}

func (o UserAuthenticationModePtrOutput) ToUserAuthenticationModePtrOutputWithContext(ctx context.Context) UserAuthenticationModePtrOutput {
	return o
}

func (o UserAuthenticationModePtrOutput) Elem() UserAuthenticationModeOutput {
	return o.ApplyT(func(v *UserAuthenticationMode) UserAuthenticationMode {
		if v != nil {
			return *v
		}
		var ret UserAuthenticationMode
		return ret
	}).(UserAuthenticationModeOutput)
}

// The number of passwords belonging to the user.
func (o UserAuthenticationModePtrOutput) PasswordCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UserAuthenticationMode) *int {
		if v == nil {
			return nil
		}
		return v.PasswordCount
	}).(pulumi.IntPtrOutput)
}

// The set of passwords used for authentication. You can create up to two passwords for each user.
func (o UserAuthenticationModePtrOutput) Passwords() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UserAuthenticationMode) []string {
		if v == nil {
			return nil
		}
		return v.Passwords
	}).(pulumi.StringArrayOutput)
}

// Indicates whether the user requires a password to authenticate. Must be set to `password`.
func (o UserAuthenticationModePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAuthenticationMode) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterClusterEndpointInput)(nil)).Elem(), ClusterClusterEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterClusterEndpointArrayInput)(nil)).Elem(), ClusterClusterEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterShardInput)(nil)).Elem(), ClusterShardArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterShardArrayInput)(nil)).Elem(), ClusterShardArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterShardNodeInput)(nil)).Elem(), ClusterShardNodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterShardNodeArrayInput)(nil)).Elem(), ClusterShardNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterShardNodeEndpointInput)(nil)).Elem(), ClusterShardNodeEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterShardNodeEndpointArrayInput)(nil)).Elem(), ClusterShardNodeEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParameterGroupParameterInput)(nil)).Elem(), ParameterGroupParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParameterGroupParameterArrayInput)(nil)).Elem(), ParameterGroupParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserAuthenticationModeInput)(nil)).Elem(), UserAuthenticationModeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserAuthenticationModePtrInput)(nil)).Elem(), UserAuthenticationModeArgs{})
	pulumi.RegisterOutputType(ClusterClusterEndpointOutput{})
	pulumi.RegisterOutputType(ClusterClusterEndpointArrayOutput{})
	pulumi.RegisterOutputType(ClusterShardOutput{})
	pulumi.RegisterOutputType(ClusterShardArrayOutput{})
	pulumi.RegisterOutputType(ClusterShardNodeOutput{})
	pulumi.RegisterOutputType(ClusterShardNodeArrayOutput{})
	pulumi.RegisterOutputType(ClusterShardNodeEndpointOutput{})
	pulumi.RegisterOutputType(ClusterShardNodeEndpointArrayOutput{})
	pulumi.RegisterOutputType(ParameterGroupParameterOutput{})
	pulumi.RegisterOutputType(ParameterGroupParameterArrayOutput{})
	pulumi.RegisterOutputType(UserAuthenticationModeOutput{})
	pulumi.RegisterOutputType(UserAuthenticationModePtrOutput{})
}
