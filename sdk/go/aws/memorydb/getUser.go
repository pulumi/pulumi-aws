// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package memorydb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides information about a MemoryDB User.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/memorydb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := memorydb.LookupUser(ctx, &memorydb.LookupUserArgs{
//				UserName: "my-user",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupUser(ctx *pulumi.Context, args *LookupUserArgs, opts ...pulumi.InvokeOption) (*LookupUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUserResult
	err := ctx.Invoke("aws:memorydb/getUser:getUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUser.
type LookupUserArgs struct {
	// Map of tags assigned to the subnet group.
	Tags map[string]string `pulumi:"tags"`
	// Name of the user.
	UserName string `pulumi:"userName"`
}

// A collection of values returned by getUser.
type LookupUserResult struct {
	// Access permissions string used for this user.
	AccessString string `pulumi:"accessString"`
	// ARN of the user.
	Arn string `pulumi:"arn"`
	// Denotes the user's authentication properties.
	AuthenticationModes []GetUserAuthenticationMode `pulumi:"authenticationModes"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The minimum engine version supported for the user.
	MinimumEngineVersion string `pulumi:"minimumEngineVersion"`
	// Map of tags assigned to the subnet group.
	Tags     map[string]string `pulumi:"tags"`
	UserName string            `pulumi:"userName"`
}

func LookupUserOutput(ctx *pulumi.Context, args LookupUserOutputArgs, opts ...pulumi.InvokeOption) LookupUserResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupUserResult, error) {
			args := v.(LookupUserArgs)
			r, err := LookupUser(ctx, &args, opts...)
			var s LookupUserResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupUserResultOutput)
}

// A collection of arguments for invoking getUser.
type LookupUserOutputArgs struct {
	// Map of tags assigned to the subnet group.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Name of the user.
	UserName pulumi.StringInput `pulumi:"userName"`
}

func (LookupUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserArgs)(nil)).Elem()
}

// A collection of values returned by getUser.
type LookupUserResultOutput struct{ *pulumi.OutputState }

func (LookupUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserResult)(nil)).Elem()
}

func (o LookupUserResultOutput) ToLookupUserResultOutput() LookupUserResultOutput {
	return o
}

func (o LookupUserResultOutput) ToLookupUserResultOutputWithContext(ctx context.Context) LookupUserResultOutput {
	return o
}

// Access permissions string used for this user.
func (o LookupUserResultOutput) AccessString() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.AccessString }).(pulumi.StringOutput)
}

// ARN of the user.
func (o LookupUserResultOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Arn }).(pulumi.StringOutput)
}

// Denotes the user's authentication properties.
func (o LookupUserResultOutput) AuthenticationModes() GetUserAuthenticationModeArrayOutput {
	return o.ApplyT(func(v LookupUserResult) []GetUserAuthenticationMode { return v.AuthenticationModes }).(GetUserAuthenticationModeArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Id }).(pulumi.StringOutput)
}

// The minimum engine version supported for the user.
func (o LookupUserResultOutput) MinimumEngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.MinimumEngineVersion }).(pulumi.StringOutput)
}

// Map of tags assigned to the subnet group.
func (o LookupUserResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupUserResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func (o LookupUserResultOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.UserName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUserResultOutput{})
}
