// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package memorydb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a MemoryDB Multi Region Cluster.
//
// More information about MemoryDB can be found in the [Developer Guide](https://docs.aws.amazon.com/memorydb/latest/devguide/what-is-memorydb-for-redis.html).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/memorydb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := memorydb.NewMultiRegionCluster(ctx, "example", &memorydb.MultiRegionClusterArgs{
//				MultiRegionClusterNameSuffix: pulumi.String("example"),
//				NodeType:                     pulumi.String("db.r7g.xlarge"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = memorydb.NewCluster(ctx, "example", &memorydb.ClusterArgs{
//				AclName:                 pulumi.Any(exampleAwsMemorydbAcl.Id),
//				AutoMinorVersionUpgrade: pulumi.Bool(false),
//				Name:                    pulumi.String("example"),
//				NodeType:                pulumi.String("db.t4g.small"),
//				NumShards:               pulumi.Int(2),
//				SecurityGroupIds: pulumi.StringArray{
//					exampleAwsSecurityGroup.Id,
//				},
//				SnapshotRetentionLimit: pulumi.Int(7),
//				SubnetGroupName:        pulumi.Any(exampleAwsMemorydbSubnetGroup.Id),
//				MultiRegionClusterName: example.MultiRegionClusterName,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import a cluster using the `multi_region_cluster_name`. For example:
//
// ```sh
// $ pulumi import aws:memorydb/multiRegionCluster:MultiRegionCluster example virxk-example
// ```
type MultiRegionCluster struct {
	pulumi.CustomResourceState

	// The ARN of the multi-region cluster.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// description for the multi-region cluster.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the engine to be used for the multi-region cluster. Valid values are `redis` and `valkey`.
	Engine pulumi.StringOutput `pulumi:"engine"`
	// The version of the engine to be used for the multi-region cluster. Downgrades are not supported.
	EngineVersion pulumi.StringOutput `pulumi:"engineVersion"`
	// The name of the multi-region cluster.
	MultiRegionClusterName pulumi.StringOutput `pulumi:"multiRegionClusterName"`
	// A suffix to be added to the multi-region cluster name. An AWS generated prefix is automatically applied to the multi-region cluster name when it is created.
	MultiRegionClusterNameSuffix pulumi.StringOutput `pulumi:"multiRegionClusterNameSuffix"`
	// The name of the multi-region parameter group to be associated with the cluster.
	MultiRegionParameterGroupName pulumi.StringOutput `pulumi:"multiRegionParameterGroupName"`
	// The node type to be used for the multi-region cluster.
	//
	// The following arguments are optional:
	NodeType pulumi.StringOutput `pulumi:"nodeType"`
	// The number of shards for the multi-region cluster.
	NumShards pulumi.IntOutput    `pulumi:"numShards"`
	Status    pulumi.StringOutput `pulumi:"status"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapOutput              `pulumi:"tagsAll"`
	Timeouts MultiRegionClusterTimeoutsPtrOutput `pulumi:"timeouts"`
	// A flag to enable in-transit encryption on the cluster.
	TlsEnabled     pulumi.BoolOutput      `pulumi:"tlsEnabled"`
	UpdateStrategy pulumi.StringPtrOutput `pulumi:"updateStrategy"`
}

// NewMultiRegionCluster registers a new resource with the given unique name, arguments, and options.
func NewMultiRegionCluster(ctx *pulumi.Context,
	name string, args *MultiRegionClusterArgs, opts ...pulumi.ResourceOption) (*MultiRegionCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MultiRegionClusterNameSuffix == nil {
		return nil, errors.New("invalid value for required argument 'MultiRegionClusterNameSuffix'")
	}
	if args.NodeType == nil {
		return nil, errors.New("invalid value for required argument 'NodeType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MultiRegionCluster
	err := ctx.RegisterResource("aws:memorydb/multiRegionCluster:MultiRegionCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMultiRegionCluster gets an existing MultiRegionCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMultiRegionCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MultiRegionClusterState, opts ...pulumi.ResourceOption) (*MultiRegionCluster, error) {
	var resource MultiRegionCluster
	err := ctx.ReadResource("aws:memorydb/multiRegionCluster:MultiRegionCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MultiRegionCluster resources.
type multiRegionClusterState struct {
	// The ARN of the multi-region cluster.
	Arn *string `pulumi:"arn"`
	// description for the multi-region cluster.
	Description *string `pulumi:"description"`
	// The name of the engine to be used for the multi-region cluster. Valid values are `redis` and `valkey`.
	Engine *string `pulumi:"engine"`
	// The version of the engine to be used for the multi-region cluster. Downgrades are not supported.
	EngineVersion *string `pulumi:"engineVersion"`
	// The name of the multi-region cluster.
	MultiRegionClusterName *string `pulumi:"multiRegionClusterName"`
	// A suffix to be added to the multi-region cluster name. An AWS generated prefix is automatically applied to the multi-region cluster name when it is created.
	MultiRegionClusterNameSuffix *string `pulumi:"multiRegionClusterNameSuffix"`
	// The name of the multi-region parameter group to be associated with the cluster.
	MultiRegionParameterGroupName *string `pulumi:"multiRegionParameterGroupName"`
	// The node type to be used for the multi-region cluster.
	//
	// The following arguments are optional:
	NodeType *string `pulumi:"nodeType"`
	// The number of shards for the multi-region cluster.
	NumShards *int    `pulumi:"numShards"`
	Status    *string `pulumi:"status"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  map[string]string           `pulumi:"tagsAll"`
	Timeouts *MultiRegionClusterTimeouts `pulumi:"timeouts"`
	// A flag to enable in-transit encryption on the cluster.
	TlsEnabled     *bool   `pulumi:"tlsEnabled"`
	UpdateStrategy *string `pulumi:"updateStrategy"`
}

type MultiRegionClusterState struct {
	// The ARN of the multi-region cluster.
	Arn pulumi.StringPtrInput
	// description for the multi-region cluster.
	Description pulumi.StringPtrInput
	// The name of the engine to be used for the multi-region cluster. Valid values are `redis` and `valkey`.
	Engine pulumi.StringPtrInput
	// The version of the engine to be used for the multi-region cluster. Downgrades are not supported.
	EngineVersion pulumi.StringPtrInput
	// The name of the multi-region cluster.
	MultiRegionClusterName pulumi.StringPtrInput
	// A suffix to be added to the multi-region cluster name. An AWS generated prefix is automatically applied to the multi-region cluster name when it is created.
	MultiRegionClusterNameSuffix pulumi.StringPtrInput
	// The name of the multi-region parameter group to be associated with the cluster.
	MultiRegionParameterGroupName pulumi.StringPtrInput
	// The node type to be used for the multi-region cluster.
	//
	// The following arguments are optional:
	NodeType pulumi.StringPtrInput
	// The number of shards for the multi-region cluster.
	NumShards pulumi.IntPtrInput
	Status    pulumi.StringPtrInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapInput
	Timeouts MultiRegionClusterTimeoutsPtrInput
	// A flag to enable in-transit encryption on the cluster.
	TlsEnabled     pulumi.BoolPtrInput
	UpdateStrategy pulumi.StringPtrInput
}

func (MultiRegionClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*multiRegionClusterState)(nil)).Elem()
}

type multiRegionClusterArgs struct {
	// description for the multi-region cluster.
	Description *string `pulumi:"description"`
	// The name of the engine to be used for the multi-region cluster. Valid values are `redis` and `valkey`.
	Engine *string `pulumi:"engine"`
	// The version of the engine to be used for the multi-region cluster. Downgrades are not supported.
	EngineVersion *string `pulumi:"engineVersion"`
	// A suffix to be added to the multi-region cluster name. An AWS generated prefix is automatically applied to the multi-region cluster name when it is created.
	MultiRegionClusterNameSuffix string `pulumi:"multiRegionClusterNameSuffix"`
	// The name of the multi-region parameter group to be associated with the cluster.
	MultiRegionParameterGroupName *string `pulumi:"multiRegionParameterGroupName"`
	// The node type to be used for the multi-region cluster.
	//
	// The following arguments are optional:
	NodeType string `pulumi:"nodeType"`
	// The number of shards for the multi-region cluster.
	NumShards *int `pulumi:"numShards"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     map[string]string           `pulumi:"tags"`
	Timeouts *MultiRegionClusterTimeouts `pulumi:"timeouts"`
	// A flag to enable in-transit encryption on the cluster.
	TlsEnabled     *bool   `pulumi:"tlsEnabled"`
	UpdateStrategy *string `pulumi:"updateStrategy"`
}

// The set of arguments for constructing a MultiRegionCluster resource.
type MultiRegionClusterArgs struct {
	// description for the multi-region cluster.
	Description pulumi.StringPtrInput
	// The name of the engine to be used for the multi-region cluster. Valid values are `redis` and `valkey`.
	Engine pulumi.StringPtrInput
	// The version of the engine to be used for the multi-region cluster. Downgrades are not supported.
	EngineVersion pulumi.StringPtrInput
	// A suffix to be added to the multi-region cluster name. An AWS generated prefix is automatically applied to the multi-region cluster name when it is created.
	MultiRegionClusterNameSuffix pulumi.StringInput
	// The name of the multi-region parameter group to be associated with the cluster.
	MultiRegionParameterGroupName pulumi.StringPtrInput
	// The node type to be used for the multi-region cluster.
	//
	// The following arguments are optional:
	NodeType pulumi.StringInput
	// The number of shards for the multi-region cluster.
	NumShards pulumi.IntPtrInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     pulumi.StringMapInput
	Timeouts MultiRegionClusterTimeoutsPtrInput
	// A flag to enable in-transit encryption on the cluster.
	TlsEnabled     pulumi.BoolPtrInput
	UpdateStrategy pulumi.StringPtrInput
}

func (MultiRegionClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*multiRegionClusterArgs)(nil)).Elem()
}

type MultiRegionClusterInput interface {
	pulumi.Input

	ToMultiRegionClusterOutput() MultiRegionClusterOutput
	ToMultiRegionClusterOutputWithContext(ctx context.Context) MultiRegionClusterOutput
}

func (*MultiRegionCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiRegionCluster)(nil)).Elem()
}

func (i *MultiRegionCluster) ToMultiRegionClusterOutput() MultiRegionClusterOutput {
	return i.ToMultiRegionClusterOutputWithContext(context.Background())
}

func (i *MultiRegionCluster) ToMultiRegionClusterOutputWithContext(ctx context.Context) MultiRegionClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiRegionClusterOutput)
}

// MultiRegionClusterArrayInput is an input type that accepts MultiRegionClusterArray and MultiRegionClusterArrayOutput values.
// You can construct a concrete instance of `MultiRegionClusterArrayInput` via:
//
//	MultiRegionClusterArray{ MultiRegionClusterArgs{...} }
type MultiRegionClusterArrayInput interface {
	pulumi.Input

	ToMultiRegionClusterArrayOutput() MultiRegionClusterArrayOutput
	ToMultiRegionClusterArrayOutputWithContext(context.Context) MultiRegionClusterArrayOutput
}

type MultiRegionClusterArray []MultiRegionClusterInput

func (MultiRegionClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MultiRegionCluster)(nil)).Elem()
}

func (i MultiRegionClusterArray) ToMultiRegionClusterArrayOutput() MultiRegionClusterArrayOutput {
	return i.ToMultiRegionClusterArrayOutputWithContext(context.Background())
}

func (i MultiRegionClusterArray) ToMultiRegionClusterArrayOutputWithContext(ctx context.Context) MultiRegionClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiRegionClusterArrayOutput)
}

// MultiRegionClusterMapInput is an input type that accepts MultiRegionClusterMap and MultiRegionClusterMapOutput values.
// You can construct a concrete instance of `MultiRegionClusterMapInput` via:
//
//	MultiRegionClusterMap{ "key": MultiRegionClusterArgs{...} }
type MultiRegionClusterMapInput interface {
	pulumi.Input

	ToMultiRegionClusterMapOutput() MultiRegionClusterMapOutput
	ToMultiRegionClusterMapOutputWithContext(context.Context) MultiRegionClusterMapOutput
}

type MultiRegionClusterMap map[string]MultiRegionClusterInput

func (MultiRegionClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MultiRegionCluster)(nil)).Elem()
}

func (i MultiRegionClusterMap) ToMultiRegionClusterMapOutput() MultiRegionClusterMapOutput {
	return i.ToMultiRegionClusterMapOutputWithContext(context.Background())
}

func (i MultiRegionClusterMap) ToMultiRegionClusterMapOutputWithContext(ctx context.Context) MultiRegionClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiRegionClusterMapOutput)
}

type MultiRegionClusterOutput struct{ *pulumi.OutputState }

func (MultiRegionClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiRegionCluster)(nil)).Elem()
}

func (o MultiRegionClusterOutput) ToMultiRegionClusterOutput() MultiRegionClusterOutput {
	return o
}

func (o MultiRegionClusterOutput) ToMultiRegionClusterOutputWithContext(ctx context.Context) MultiRegionClusterOutput {
	return o
}

// The ARN of the multi-region cluster.
func (o MultiRegionClusterOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *MultiRegionCluster) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// description for the multi-region cluster.
func (o MultiRegionClusterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MultiRegionCluster) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the engine to be used for the multi-region cluster. Valid values are `redis` and `valkey`.
func (o MultiRegionClusterOutput) Engine() pulumi.StringOutput {
	return o.ApplyT(func(v *MultiRegionCluster) pulumi.StringOutput { return v.Engine }).(pulumi.StringOutput)
}

// The version of the engine to be used for the multi-region cluster. Downgrades are not supported.
func (o MultiRegionClusterOutput) EngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *MultiRegionCluster) pulumi.StringOutput { return v.EngineVersion }).(pulumi.StringOutput)
}

// The name of the multi-region cluster.
func (o MultiRegionClusterOutput) MultiRegionClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *MultiRegionCluster) pulumi.StringOutput { return v.MultiRegionClusterName }).(pulumi.StringOutput)
}

// A suffix to be added to the multi-region cluster name. An AWS generated prefix is automatically applied to the multi-region cluster name when it is created.
func (o MultiRegionClusterOutput) MultiRegionClusterNameSuffix() pulumi.StringOutput {
	return o.ApplyT(func(v *MultiRegionCluster) pulumi.StringOutput { return v.MultiRegionClusterNameSuffix }).(pulumi.StringOutput)
}

// The name of the multi-region parameter group to be associated with the cluster.
func (o MultiRegionClusterOutput) MultiRegionParameterGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *MultiRegionCluster) pulumi.StringOutput { return v.MultiRegionParameterGroupName }).(pulumi.StringOutput)
}

// The node type to be used for the multi-region cluster.
//
// The following arguments are optional:
func (o MultiRegionClusterOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v *MultiRegionCluster) pulumi.StringOutput { return v.NodeType }).(pulumi.StringOutput)
}

// The number of shards for the multi-region cluster.
func (o MultiRegionClusterOutput) NumShards() pulumi.IntOutput {
	return o.ApplyT(func(v *MultiRegionCluster) pulumi.IntOutput { return v.NumShards }).(pulumi.IntOutput)
}

func (o MultiRegionClusterOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *MultiRegionCluster) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o MultiRegionClusterOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MultiRegionCluster) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o MultiRegionClusterOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MultiRegionCluster) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o MultiRegionClusterOutput) Timeouts() MultiRegionClusterTimeoutsPtrOutput {
	return o.ApplyT(func(v *MultiRegionCluster) MultiRegionClusterTimeoutsPtrOutput { return v.Timeouts }).(MultiRegionClusterTimeoutsPtrOutput)
}

// A flag to enable in-transit encryption on the cluster.
func (o MultiRegionClusterOutput) TlsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *MultiRegionCluster) pulumi.BoolOutput { return v.TlsEnabled }).(pulumi.BoolOutput)
}

func (o MultiRegionClusterOutput) UpdateStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MultiRegionCluster) pulumi.StringPtrOutput { return v.UpdateStrategy }).(pulumi.StringPtrOutput)
}

type MultiRegionClusterArrayOutput struct{ *pulumi.OutputState }

func (MultiRegionClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MultiRegionCluster)(nil)).Elem()
}

func (o MultiRegionClusterArrayOutput) ToMultiRegionClusterArrayOutput() MultiRegionClusterArrayOutput {
	return o
}

func (o MultiRegionClusterArrayOutput) ToMultiRegionClusterArrayOutputWithContext(ctx context.Context) MultiRegionClusterArrayOutput {
	return o
}

func (o MultiRegionClusterArrayOutput) Index(i pulumi.IntInput) MultiRegionClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MultiRegionCluster {
		return vs[0].([]*MultiRegionCluster)[vs[1].(int)]
	}).(MultiRegionClusterOutput)
}

type MultiRegionClusterMapOutput struct{ *pulumi.OutputState }

func (MultiRegionClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MultiRegionCluster)(nil)).Elem()
}

func (o MultiRegionClusterMapOutput) ToMultiRegionClusterMapOutput() MultiRegionClusterMapOutput {
	return o
}

func (o MultiRegionClusterMapOutput) ToMultiRegionClusterMapOutputWithContext(ctx context.Context) MultiRegionClusterMapOutput {
	return o
}

func (o MultiRegionClusterMapOutput) MapIndex(k pulumi.StringInput) MultiRegionClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MultiRegionCluster {
		return vs[0].(map[string]*MultiRegionCluster)[vs[1].(string)]
	}).(MultiRegionClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MultiRegionClusterInput)(nil)).Elem(), &MultiRegionCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*MultiRegionClusterArrayInput)(nil)).Elem(), MultiRegionClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MultiRegionClusterMapInput)(nil)).Elem(), MultiRegionClusterMap{})
	pulumi.RegisterOutputType(MultiRegionClusterOutput{})
	pulumi.RegisterOutputType(MultiRegionClusterArrayOutput{})
	pulumi.RegisterOutputType(MultiRegionClusterMapOutput{})
}
