// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package amp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Amazon Managed Service for Prometheus (AMP) Query Logging Configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/amp"
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/cloudwatch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := amp.NewWorkspace(ctx, "example", &amp.WorkspaceArgs{
//				Alias: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleLogGroup, err := cloudwatch.NewLogGroup(ctx, "example", &cloudwatch.LogGroupArgs{
//				Name: pulumi.String("/aws/prometheus/query-logs/example"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = amp.NewQueryLoggingConfiguration(ctx, "example", &amp.QueryLoggingConfigurationArgs{
//				WorkspaceId: example.ID(),
//				Destinations: amp.QueryLoggingConfigurationDestinationArray{
//					&amp.QueryLoggingConfigurationDestinationArgs{
//						CloudwatchLogs: &amp.QueryLoggingConfigurationDestinationCloudwatchLogsArgs{
//							LogGroupArn: exampleLogGroup.Arn.ApplyT(func(arn string) (string, error) {
//								return fmt.Sprintf("%v:*", arn), nil
//							}).(pulumi.StringOutput),
//						},
//						Filters: &amp.QueryLoggingConfigurationDestinationFiltersArgs{
//							QspThreshold: pulumi.Int(1000),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type QueryLoggingConfiguration struct {
	pulumi.CustomResourceState

	// Configuration block for the logging destinations. See `destinations`.
	Destinations QueryLoggingConfigurationDestinationArrayOutput `pulumi:"destinations"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region   pulumi.StringOutput                        `pulumi:"region"`
	Timeouts QueryLoggingConfigurationTimeoutsPtrOutput `pulumi:"timeouts"`
	// The ID of the AMP workspace for which to configure query logging.
	//
	// The following arguments are optional:
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewQueryLoggingConfiguration registers a new resource with the given unique name, arguments, and options.
func NewQueryLoggingConfiguration(ctx *pulumi.Context,
	name string, args *QueryLoggingConfigurationArgs, opts ...pulumi.ResourceOption) (*QueryLoggingConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource QueryLoggingConfiguration
	err := ctx.RegisterResource("aws:amp/queryLoggingConfiguration:QueryLoggingConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQueryLoggingConfiguration gets an existing QueryLoggingConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQueryLoggingConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QueryLoggingConfigurationState, opts ...pulumi.ResourceOption) (*QueryLoggingConfiguration, error) {
	var resource QueryLoggingConfiguration
	err := ctx.ReadResource("aws:amp/queryLoggingConfiguration:QueryLoggingConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering QueryLoggingConfiguration resources.
type queryLoggingConfigurationState struct {
	// Configuration block for the logging destinations. See `destinations`.
	Destinations []QueryLoggingConfigurationDestination `pulumi:"destinations"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region   *string                            `pulumi:"region"`
	Timeouts *QueryLoggingConfigurationTimeouts `pulumi:"timeouts"`
	// The ID of the AMP workspace for which to configure query logging.
	//
	// The following arguments are optional:
	WorkspaceId *string `pulumi:"workspaceId"`
}

type QueryLoggingConfigurationState struct {
	// Configuration block for the logging destinations. See `destinations`.
	Destinations QueryLoggingConfigurationDestinationArrayInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region   pulumi.StringPtrInput
	Timeouts QueryLoggingConfigurationTimeoutsPtrInput
	// The ID of the AMP workspace for which to configure query logging.
	//
	// The following arguments are optional:
	WorkspaceId pulumi.StringPtrInput
}

func (QueryLoggingConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*queryLoggingConfigurationState)(nil)).Elem()
}

type queryLoggingConfigurationArgs struct {
	// Configuration block for the logging destinations. See `destinations`.
	Destinations []QueryLoggingConfigurationDestination `pulumi:"destinations"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region   *string                            `pulumi:"region"`
	Timeouts *QueryLoggingConfigurationTimeouts `pulumi:"timeouts"`
	// The ID of the AMP workspace for which to configure query logging.
	//
	// The following arguments are optional:
	WorkspaceId string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a QueryLoggingConfiguration resource.
type QueryLoggingConfigurationArgs struct {
	// Configuration block for the logging destinations. See `destinations`.
	Destinations QueryLoggingConfigurationDestinationArrayInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region   pulumi.StringPtrInput
	Timeouts QueryLoggingConfigurationTimeoutsPtrInput
	// The ID of the AMP workspace for which to configure query logging.
	//
	// The following arguments are optional:
	WorkspaceId pulumi.StringInput
}

func (QueryLoggingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*queryLoggingConfigurationArgs)(nil)).Elem()
}

type QueryLoggingConfigurationInput interface {
	pulumi.Input

	ToQueryLoggingConfigurationOutput() QueryLoggingConfigurationOutput
	ToQueryLoggingConfigurationOutputWithContext(ctx context.Context) QueryLoggingConfigurationOutput
}

func (*QueryLoggingConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryLoggingConfiguration)(nil)).Elem()
}

func (i *QueryLoggingConfiguration) ToQueryLoggingConfigurationOutput() QueryLoggingConfigurationOutput {
	return i.ToQueryLoggingConfigurationOutputWithContext(context.Background())
}

func (i *QueryLoggingConfiguration) ToQueryLoggingConfigurationOutputWithContext(ctx context.Context) QueryLoggingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryLoggingConfigurationOutput)
}

// QueryLoggingConfigurationArrayInput is an input type that accepts QueryLoggingConfigurationArray and QueryLoggingConfigurationArrayOutput values.
// You can construct a concrete instance of `QueryLoggingConfigurationArrayInput` via:
//
//	QueryLoggingConfigurationArray{ QueryLoggingConfigurationArgs{...} }
type QueryLoggingConfigurationArrayInput interface {
	pulumi.Input

	ToQueryLoggingConfigurationArrayOutput() QueryLoggingConfigurationArrayOutput
	ToQueryLoggingConfigurationArrayOutputWithContext(context.Context) QueryLoggingConfigurationArrayOutput
}

type QueryLoggingConfigurationArray []QueryLoggingConfigurationInput

func (QueryLoggingConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QueryLoggingConfiguration)(nil)).Elem()
}

func (i QueryLoggingConfigurationArray) ToQueryLoggingConfigurationArrayOutput() QueryLoggingConfigurationArrayOutput {
	return i.ToQueryLoggingConfigurationArrayOutputWithContext(context.Background())
}

func (i QueryLoggingConfigurationArray) ToQueryLoggingConfigurationArrayOutputWithContext(ctx context.Context) QueryLoggingConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryLoggingConfigurationArrayOutput)
}

// QueryLoggingConfigurationMapInput is an input type that accepts QueryLoggingConfigurationMap and QueryLoggingConfigurationMapOutput values.
// You can construct a concrete instance of `QueryLoggingConfigurationMapInput` via:
//
//	QueryLoggingConfigurationMap{ "key": QueryLoggingConfigurationArgs{...} }
type QueryLoggingConfigurationMapInput interface {
	pulumi.Input

	ToQueryLoggingConfigurationMapOutput() QueryLoggingConfigurationMapOutput
	ToQueryLoggingConfigurationMapOutputWithContext(context.Context) QueryLoggingConfigurationMapOutput
}

type QueryLoggingConfigurationMap map[string]QueryLoggingConfigurationInput

func (QueryLoggingConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QueryLoggingConfiguration)(nil)).Elem()
}

func (i QueryLoggingConfigurationMap) ToQueryLoggingConfigurationMapOutput() QueryLoggingConfigurationMapOutput {
	return i.ToQueryLoggingConfigurationMapOutputWithContext(context.Background())
}

func (i QueryLoggingConfigurationMap) ToQueryLoggingConfigurationMapOutputWithContext(ctx context.Context) QueryLoggingConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryLoggingConfigurationMapOutput)
}

type QueryLoggingConfigurationOutput struct{ *pulumi.OutputState }

func (QueryLoggingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryLoggingConfiguration)(nil)).Elem()
}

func (o QueryLoggingConfigurationOutput) ToQueryLoggingConfigurationOutput() QueryLoggingConfigurationOutput {
	return o
}

func (o QueryLoggingConfigurationOutput) ToQueryLoggingConfigurationOutputWithContext(ctx context.Context) QueryLoggingConfigurationOutput {
	return o
}

// Configuration block for the logging destinations. See `destinations`.
func (o QueryLoggingConfigurationOutput) Destinations() QueryLoggingConfigurationDestinationArrayOutput {
	return o.ApplyT(func(v *QueryLoggingConfiguration) QueryLoggingConfigurationDestinationArrayOutput {
		return v.Destinations
	}).(QueryLoggingConfigurationDestinationArrayOutput)
}

// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
func (o QueryLoggingConfigurationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *QueryLoggingConfiguration) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o QueryLoggingConfigurationOutput) Timeouts() QueryLoggingConfigurationTimeoutsPtrOutput {
	return o.ApplyT(func(v *QueryLoggingConfiguration) QueryLoggingConfigurationTimeoutsPtrOutput { return v.Timeouts }).(QueryLoggingConfigurationTimeoutsPtrOutput)
}

// The ID of the AMP workspace for which to configure query logging.
//
// The following arguments are optional:
func (o QueryLoggingConfigurationOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *QueryLoggingConfiguration) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type QueryLoggingConfigurationArrayOutput struct{ *pulumi.OutputState }

func (QueryLoggingConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QueryLoggingConfiguration)(nil)).Elem()
}

func (o QueryLoggingConfigurationArrayOutput) ToQueryLoggingConfigurationArrayOutput() QueryLoggingConfigurationArrayOutput {
	return o
}

func (o QueryLoggingConfigurationArrayOutput) ToQueryLoggingConfigurationArrayOutputWithContext(ctx context.Context) QueryLoggingConfigurationArrayOutput {
	return o
}

func (o QueryLoggingConfigurationArrayOutput) Index(i pulumi.IntInput) QueryLoggingConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *QueryLoggingConfiguration {
		return vs[0].([]*QueryLoggingConfiguration)[vs[1].(int)]
	}).(QueryLoggingConfigurationOutput)
}

type QueryLoggingConfigurationMapOutput struct{ *pulumi.OutputState }

func (QueryLoggingConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QueryLoggingConfiguration)(nil)).Elem()
}

func (o QueryLoggingConfigurationMapOutput) ToQueryLoggingConfigurationMapOutput() QueryLoggingConfigurationMapOutput {
	return o
}

func (o QueryLoggingConfigurationMapOutput) ToQueryLoggingConfigurationMapOutputWithContext(ctx context.Context) QueryLoggingConfigurationMapOutput {
	return o
}

func (o QueryLoggingConfigurationMapOutput) MapIndex(k pulumi.StringInput) QueryLoggingConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *QueryLoggingConfiguration {
		return vs[0].(map[string]*QueryLoggingConfiguration)[vs[1].(string)]
	}).(QueryLoggingConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QueryLoggingConfigurationInput)(nil)).Elem(), &QueryLoggingConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryLoggingConfigurationArrayInput)(nil)).Elem(), QueryLoggingConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryLoggingConfigurationMapInput)(nil)).Elem(), QueryLoggingConfigurationMap{})
	pulumi.RegisterOutputType(QueryLoggingConfigurationOutput{})
	pulumi.RegisterOutputType(QueryLoggingConfigurationArrayOutput{})
	pulumi.RegisterOutputType(QueryLoggingConfigurationMapOutput{})
}
