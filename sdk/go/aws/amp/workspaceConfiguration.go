// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package amp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an AWS Managed Service for Prometheus Workspace Configuration.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/amp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := amp.NewWorkspace(ctx, "example", nil)
//			if err != nil {
//				return err
//			}
//			_, err = amp.NewWorkspaceConfiguration(ctx, "example", &amp.WorkspaceConfigurationArgs{
//				WorkspaceId:           example.ID(),
//				RetentionPeriodInDays: pulumi.Int(60),
//				LimitsPerLabelSets: amp.WorkspaceConfigurationLimitsPerLabelSetArray{
//					&amp.WorkspaceConfigurationLimitsPerLabelSetArgs{
//						LabelSet: pulumi.StringMap{
//							"env": pulumi.String("dev"),
//						},
//						Limits: &amp.WorkspaceConfigurationLimitsPerLabelSetLimitsArgs{
//							MaxSeries: pulumi.Int(100000),
//						},
//					},
//					&amp.WorkspaceConfigurationLimitsPerLabelSetArgs{
//						LabelSet: pulumi.StringMap{
//							"env": pulumi.String("prod"),
//						},
//						Limits: &amp.WorkspaceConfigurationLimitsPerLabelSetLimitsArgs{
//							MaxSeries: pulumi.Int(400000),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Setting up default bucket
//
// The default bucket limit is the maximum number of active time series that can be
// ingested in the workspace, counting only time series that donâ€™t match a defined
// label set.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/amp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := amp.NewWorkspace(ctx, "example", nil)
//			if err != nil {
//				return err
//			}
//			_, err = amp.NewWorkspaceConfiguration(ctx, "example", &amp.WorkspaceConfigurationArgs{
//				WorkspaceId: example.ID(),
//				LimitsPerLabelSets: amp.WorkspaceConfigurationLimitsPerLabelSetArray{
//					&amp.WorkspaceConfigurationLimitsPerLabelSetArgs{
//						LabelSet: pulumi.StringMap{},
//						Limits: &amp.WorkspaceConfigurationLimitsPerLabelSetLimitsArgs{
//							MaxSeries: pulumi.Int(50000),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import AMP (Managed Prometheus) Workspace Configuration using the `workspace_id`. For example
//
// ```sh
// $ pulumi import aws:amp/workspaceConfiguration:WorkspaceConfiguration example ws-12345678-abcd-1234-abcd-123456789012
// ```
type WorkspaceConfiguration struct {
	pulumi.CustomResourceState

	// Configuration block for setting limits on metrics with specific label sets. Detailed below.
	LimitsPerLabelSets WorkspaceConfigurationLimitsPerLabelSetArrayOutput `pulumi:"limitsPerLabelSets"`
	// Number of days to retain metric data in the workspace.
	RetentionPeriodInDays pulumi.IntOutput                        `pulumi:"retentionPeriodInDays"`
	Timeouts              WorkspaceConfigurationTimeoutsPtrOutput `pulumi:"timeouts"`
	// ID of the workspace to configure.
	//
	// The following arguments are optional:
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewWorkspaceConfiguration registers a new resource with the given unique name, arguments, and options.
func NewWorkspaceConfiguration(ctx *pulumi.Context,
	name string, args *WorkspaceConfigurationArgs, opts ...pulumi.ResourceOption) (*WorkspaceConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkspaceConfiguration
	err := ctx.RegisterResource("aws:amp/workspaceConfiguration:WorkspaceConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspaceConfiguration gets an existing WorkspaceConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspaceConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceConfigurationState, opts ...pulumi.ResourceOption) (*WorkspaceConfiguration, error) {
	var resource WorkspaceConfiguration
	err := ctx.ReadResource("aws:amp/workspaceConfiguration:WorkspaceConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkspaceConfiguration resources.
type workspaceConfigurationState struct {
	// Configuration block for setting limits on metrics with specific label sets. Detailed below.
	LimitsPerLabelSets []WorkspaceConfigurationLimitsPerLabelSet `pulumi:"limitsPerLabelSets"`
	// Number of days to retain metric data in the workspace.
	RetentionPeriodInDays *int                            `pulumi:"retentionPeriodInDays"`
	Timeouts              *WorkspaceConfigurationTimeouts `pulumi:"timeouts"`
	// ID of the workspace to configure.
	//
	// The following arguments are optional:
	WorkspaceId *string `pulumi:"workspaceId"`
}

type WorkspaceConfigurationState struct {
	// Configuration block for setting limits on metrics with specific label sets. Detailed below.
	LimitsPerLabelSets WorkspaceConfigurationLimitsPerLabelSetArrayInput
	// Number of days to retain metric data in the workspace.
	RetentionPeriodInDays pulumi.IntPtrInput
	Timeouts              WorkspaceConfigurationTimeoutsPtrInput
	// ID of the workspace to configure.
	//
	// The following arguments are optional:
	WorkspaceId pulumi.StringPtrInput
}

func (WorkspaceConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceConfigurationState)(nil)).Elem()
}

type workspaceConfigurationArgs struct {
	// Configuration block for setting limits on metrics with specific label sets. Detailed below.
	LimitsPerLabelSets []WorkspaceConfigurationLimitsPerLabelSet `pulumi:"limitsPerLabelSets"`
	// Number of days to retain metric data in the workspace.
	RetentionPeriodInDays *int                            `pulumi:"retentionPeriodInDays"`
	Timeouts              *WorkspaceConfigurationTimeouts `pulumi:"timeouts"`
	// ID of the workspace to configure.
	//
	// The following arguments are optional:
	WorkspaceId string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a WorkspaceConfiguration resource.
type WorkspaceConfigurationArgs struct {
	// Configuration block for setting limits on metrics with specific label sets. Detailed below.
	LimitsPerLabelSets WorkspaceConfigurationLimitsPerLabelSetArrayInput
	// Number of days to retain metric data in the workspace.
	RetentionPeriodInDays pulumi.IntPtrInput
	Timeouts              WorkspaceConfigurationTimeoutsPtrInput
	// ID of the workspace to configure.
	//
	// The following arguments are optional:
	WorkspaceId pulumi.StringInput
}

func (WorkspaceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceConfigurationArgs)(nil)).Elem()
}

type WorkspaceConfigurationInput interface {
	pulumi.Input

	ToWorkspaceConfigurationOutput() WorkspaceConfigurationOutput
	ToWorkspaceConfigurationOutputWithContext(ctx context.Context) WorkspaceConfigurationOutput
}

func (*WorkspaceConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceConfiguration)(nil)).Elem()
}

func (i *WorkspaceConfiguration) ToWorkspaceConfigurationOutput() WorkspaceConfigurationOutput {
	return i.ToWorkspaceConfigurationOutputWithContext(context.Background())
}

func (i *WorkspaceConfiguration) ToWorkspaceConfigurationOutputWithContext(ctx context.Context) WorkspaceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceConfigurationOutput)
}

// WorkspaceConfigurationArrayInput is an input type that accepts WorkspaceConfigurationArray and WorkspaceConfigurationArrayOutput values.
// You can construct a concrete instance of `WorkspaceConfigurationArrayInput` via:
//
//	WorkspaceConfigurationArray{ WorkspaceConfigurationArgs{...} }
type WorkspaceConfigurationArrayInput interface {
	pulumi.Input

	ToWorkspaceConfigurationArrayOutput() WorkspaceConfigurationArrayOutput
	ToWorkspaceConfigurationArrayOutputWithContext(context.Context) WorkspaceConfigurationArrayOutput
}

type WorkspaceConfigurationArray []WorkspaceConfigurationInput

func (WorkspaceConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkspaceConfiguration)(nil)).Elem()
}

func (i WorkspaceConfigurationArray) ToWorkspaceConfigurationArrayOutput() WorkspaceConfigurationArrayOutput {
	return i.ToWorkspaceConfigurationArrayOutputWithContext(context.Background())
}

func (i WorkspaceConfigurationArray) ToWorkspaceConfigurationArrayOutputWithContext(ctx context.Context) WorkspaceConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceConfigurationArrayOutput)
}

// WorkspaceConfigurationMapInput is an input type that accepts WorkspaceConfigurationMap and WorkspaceConfigurationMapOutput values.
// You can construct a concrete instance of `WorkspaceConfigurationMapInput` via:
//
//	WorkspaceConfigurationMap{ "key": WorkspaceConfigurationArgs{...} }
type WorkspaceConfigurationMapInput interface {
	pulumi.Input

	ToWorkspaceConfigurationMapOutput() WorkspaceConfigurationMapOutput
	ToWorkspaceConfigurationMapOutputWithContext(context.Context) WorkspaceConfigurationMapOutput
}

type WorkspaceConfigurationMap map[string]WorkspaceConfigurationInput

func (WorkspaceConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkspaceConfiguration)(nil)).Elem()
}

func (i WorkspaceConfigurationMap) ToWorkspaceConfigurationMapOutput() WorkspaceConfigurationMapOutput {
	return i.ToWorkspaceConfigurationMapOutputWithContext(context.Background())
}

func (i WorkspaceConfigurationMap) ToWorkspaceConfigurationMapOutputWithContext(ctx context.Context) WorkspaceConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceConfigurationMapOutput)
}

type WorkspaceConfigurationOutput struct{ *pulumi.OutputState }

func (WorkspaceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceConfiguration)(nil)).Elem()
}

func (o WorkspaceConfigurationOutput) ToWorkspaceConfigurationOutput() WorkspaceConfigurationOutput {
	return o
}

func (o WorkspaceConfigurationOutput) ToWorkspaceConfigurationOutputWithContext(ctx context.Context) WorkspaceConfigurationOutput {
	return o
}

// Configuration block for setting limits on metrics with specific label sets. Detailed below.
func (o WorkspaceConfigurationOutput) LimitsPerLabelSets() WorkspaceConfigurationLimitsPerLabelSetArrayOutput {
	return o.ApplyT(func(v *WorkspaceConfiguration) WorkspaceConfigurationLimitsPerLabelSetArrayOutput {
		return v.LimitsPerLabelSets
	}).(WorkspaceConfigurationLimitsPerLabelSetArrayOutput)
}

// Number of days to retain metric data in the workspace.
func (o WorkspaceConfigurationOutput) RetentionPeriodInDays() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkspaceConfiguration) pulumi.IntOutput { return v.RetentionPeriodInDays }).(pulumi.IntOutput)
}

func (o WorkspaceConfigurationOutput) Timeouts() WorkspaceConfigurationTimeoutsPtrOutput {
	return o.ApplyT(func(v *WorkspaceConfiguration) WorkspaceConfigurationTimeoutsPtrOutput { return v.Timeouts }).(WorkspaceConfigurationTimeoutsPtrOutput)
}

// ID of the workspace to configure.
//
// The following arguments are optional:
func (o WorkspaceConfigurationOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceConfiguration) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type WorkspaceConfigurationArrayOutput struct{ *pulumi.OutputState }

func (WorkspaceConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkspaceConfiguration)(nil)).Elem()
}

func (o WorkspaceConfigurationArrayOutput) ToWorkspaceConfigurationArrayOutput() WorkspaceConfigurationArrayOutput {
	return o
}

func (o WorkspaceConfigurationArrayOutput) ToWorkspaceConfigurationArrayOutputWithContext(ctx context.Context) WorkspaceConfigurationArrayOutput {
	return o
}

func (o WorkspaceConfigurationArrayOutput) Index(i pulumi.IntInput) WorkspaceConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkspaceConfiguration {
		return vs[0].([]*WorkspaceConfiguration)[vs[1].(int)]
	}).(WorkspaceConfigurationOutput)
}

type WorkspaceConfigurationMapOutput struct{ *pulumi.OutputState }

func (WorkspaceConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkspaceConfiguration)(nil)).Elem()
}

func (o WorkspaceConfigurationMapOutput) ToWorkspaceConfigurationMapOutput() WorkspaceConfigurationMapOutput {
	return o
}

func (o WorkspaceConfigurationMapOutput) ToWorkspaceConfigurationMapOutputWithContext(ctx context.Context) WorkspaceConfigurationMapOutput {
	return o
}

func (o WorkspaceConfigurationMapOutput) MapIndex(k pulumi.StringInput) WorkspaceConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkspaceConfiguration {
		return vs[0].(map[string]*WorkspaceConfiguration)[vs[1].(string)]
	}).(WorkspaceConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceConfigurationInput)(nil)).Elem(), &WorkspaceConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceConfigurationArrayInput)(nil)).Elem(), WorkspaceConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceConfigurationMapInput)(nil)).Elem(), WorkspaceConfigurationMap{})
	pulumi.RegisterOutputType(WorkspaceConfigurationOutput{})
	pulumi.RegisterOutputType(WorkspaceConfigurationArrayOutput{})
	pulumi.RegisterOutputType(WorkspaceConfigurationMapOutput{})
}
