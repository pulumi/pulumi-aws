// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package amp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Using `pulumi import`, import the Managed Scraper using its identifier.
// For example:
//
// ```sh
// $ pulumi import aws:amp/scraper:Scraper example s-0123abc-0000-0123-a000-000000000000
// ```
type Scraper struct {
	pulumi.CustomResourceState

	// a name to associate with the managed scraper. This is for your use, and does not need to be unique.
	Alias pulumi.StringPtrOutput `pulumi:"alias"`
	// The Amazon Resource Name (ARN) of the new scraper.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Configuration block for the managed scraper to send metrics to. See `destination`.
	Destination ScraperDestinationPtrOutput `pulumi:"destination"`
	// The Amazon Resource Name (ARN) of the IAM role that provides permissions for the scraper to discover, collect, and produce metrics
	RoleArn pulumi.StringOutput `pulumi:"roleArn"`
	// The configuration file to use in the new scraper. For more information, see [Scraper configuration](https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-collector-how-to.html#AMP-collector-configuration).
	ScrapeConfiguration pulumi.StringOutput `pulumi:"scrapeConfiguration"`
	// Configuration block to specify where the managed scraper will collect metrics from. See `source`.
	//
	// The following arguments are optional:
	Source ScraperSourcePtrOutput `pulumi:"source"`
	Tags   pulumi.StringMapOutput `pulumi:"tags"`
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapOutput   `pulumi:"tagsAll"`
	Timeouts ScraperTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewScraper registers a new resource with the given unique name, arguments, and options.
func NewScraper(ctx *pulumi.Context,
	name string, args *ScraperArgs, opts ...pulumi.ResourceOption) (*Scraper, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ScrapeConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'ScrapeConfiguration'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Scraper
	err := ctx.RegisterResource("aws:amp/scraper:Scraper", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScraper gets an existing Scraper resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScraper(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScraperState, opts ...pulumi.ResourceOption) (*Scraper, error) {
	var resource Scraper
	err := ctx.ReadResource("aws:amp/scraper:Scraper", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Scraper resources.
type scraperState struct {
	// a name to associate with the managed scraper. This is for your use, and does not need to be unique.
	Alias *string `pulumi:"alias"`
	// The Amazon Resource Name (ARN) of the new scraper.
	Arn *string `pulumi:"arn"`
	// Configuration block for the managed scraper to send metrics to. See `destination`.
	Destination *ScraperDestination `pulumi:"destination"`
	// The Amazon Resource Name (ARN) of the IAM role that provides permissions for the scraper to discover, collect, and produce metrics
	RoleArn *string `pulumi:"roleArn"`
	// The configuration file to use in the new scraper. For more information, see [Scraper configuration](https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-collector-how-to.html#AMP-collector-configuration).
	ScrapeConfiguration *string `pulumi:"scrapeConfiguration"`
	// Configuration block to specify where the managed scraper will collect metrics from. See `source`.
	//
	// The following arguments are optional:
	Source *ScraperSource    `pulumi:"source"`
	Tags   map[string]string `pulumi:"tags"`
	// Deprecated: Please use `tags` instead.
	TagsAll  map[string]string `pulumi:"tagsAll"`
	Timeouts *ScraperTimeouts  `pulumi:"timeouts"`
}

type ScraperState struct {
	// a name to associate with the managed scraper. This is for your use, and does not need to be unique.
	Alias pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) of the new scraper.
	Arn pulumi.StringPtrInput
	// Configuration block for the managed scraper to send metrics to. See `destination`.
	Destination ScraperDestinationPtrInput
	// The Amazon Resource Name (ARN) of the IAM role that provides permissions for the scraper to discover, collect, and produce metrics
	RoleArn pulumi.StringPtrInput
	// The configuration file to use in the new scraper. For more information, see [Scraper configuration](https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-collector-how-to.html#AMP-collector-configuration).
	ScrapeConfiguration pulumi.StringPtrInput
	// Configuration block to specify where the managed scraper will collect metrics from. See `source`.
	//
	// The following arguments are optional:
	Source ScraperSourcePtrInput
	Tags   pulumi.StringMapInput
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapInput
	Timeouts ScraperTimeoutsPtrInput
}

func (ScraperState) ElementType() reflect.Type {
	return reflect.TypeOf((*scraperState)(nil)).Elem()
}

type scraperArgs struct {
	// a name to associate with the managed scraper. This is for your use, and does not need to be unique.
	Alias *string `pulumi:"alias"`
	// Configuration block for the managed scraper to send metrics to. See `destination`.
	Destination *ScraperDestination `pulumi:"destination"`
	// The configuration file to use in the new scraper. For more information, see [Scraper configuration](https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-collector-how-to.html#AMP-collector-configuration).
	ScrapeConfiguration string `pulumi:"scrapeConfiguration"`
	// Configuration block to specify where the managed scraper will collect metrics from. See `source`.
	//
	// The following arguments are optional:
	Source   *ScraperSource    `pulumi:"source"`
	Tags     map[string]string `pulumi:"tags"`
	Timeouts *ScraperTimeouts  `pulumi:"timeouts"`
}

// The set of arguments for constructing a Scraper resource.
type ScraperArgs struct {
	// a name to associate with the managed scraper. This is for your use, and does not need to be unique.
	Alias pulumi.StringPtrInput
	// Configuration block for the managed scraper to send metrics to. See `destination`.
	Destination ScraperDestinationPtrInput
	// The configuration file to use in the new scraper. For more information, see [Scraper configuration](https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-collector-how-to.html#AMP-collector-configuration).
	ScrapeConfiguration pulumi.StringInput
	// Configuration block to specify where the managed scraper will collect metrics from. See `source`.
	//
	// The following arguments are optional:
	Source   ScraperSourcePtrInput
	Tags     pulumi.StringMapInput
	Timeouts ScraperTimeoutsPtrInput
}

func (ScraperArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scraperArgs)(nil)).Elem()
}

type ScraperInput interface {
	pulumi.Input

	ToScraperOutput() ScraperOutput
	ToScraperOutputWithContext(ctx context.Context) ScraperOutput
}

func (*Scraper) ElementType() reflect.Type {
	return reflect.TypeOf((**Scraper)(nil)).Elem()
}

func (i *Scraper) ToScraperOutput() ScraperOutput {
	return i.ToScraperOutputWithContext(context.Background())
}

func (i *Scraper) ToScraperOutputWithContext(ctx context.Context) ScraperOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScraperOutput)
}

// ScraperArrayInput is an input type that accepts ScraperArray and ScraperArrayOutput values.
// You can construct a concrete instance of `ScraperArrayInput` via:
//
//	ScraperArray{ ScraperArgs{...} }
type ScraperArrayInput interface {
	pulumi.Input

	ToScraperArrayOutput() ScraperArrayOutput
	ToScraperArrayOutputWithContext(context.Context) ScraperArrayOutput
}

type ScraperArray []ScraperInput

func (ScraperArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Scraper)(nil)).Elem()
}

func (i ScraperArray) ToScraperArrayOutput() ScraperArrayOutput {
	return i.ToScraperArrayOutputWithContext(context.Background())
}

func (i ScraperArray) ToScraperArrayOutputWithContext(ctx context.Context) ScraperArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScraperArrayOutput)
}

// ScraperMapInput is an input type that accepts ScraperMap and ScraperMapOutput values.
// You can construct a concrete instance of `ScraperMapInput` via:
//
//	ScraperMap{ "key": ScraperArgs{...} }
type ScraperMapInput interface {
	pulumi.Input

	ToScraperMapOutput() ScraperMapOutput
	ToScraperMapOutputWithContext(context.Context) ScraperMapOutput
}

type ScraperMap map[string]ScraperInput

func (ScraperMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Scraper)(nil)).Elem()
}

func (i ScraperMap) ToScraperMapOutput() ScraperMapOutput {
	return i.ToScraperMapOutputWithContext(context.Background())
}

func (i ScraperMap) ToScraperMapOutputWithContext(ctx context.Context) ScraperMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScraperMapOutput)
}

type ScraperOutput struct{ *pulumi.OutputState }

func (ScraperOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Scraper)(nil)).Elem()
}

func (o ScraperOutput) ToScraperOutput() ScraperOutput {
	return o
}

func (o ScraperOutput) ToScraperOutputWithContext(ctx context.Context) ScraperOutput {
	return o
}

// a name to associate with the managed scraper. This is for your use, and does not need to be unique.
func (o ScraperOutput) Alias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Scraper) pulumi.StringPtrOutput { return v.Alias }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the new scraper.
func (o ScraperOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Scraper) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Configuration block for the managed scraper to send metrics to. See `destination`.
func (o ScraperOutput) Destination() ScraperDestinationPtrOutput {
	return o.ApplyT(func(v *Scraper) ScraperDestinationPtrOutput { return v.Destination }).(ScraperDestinationPtrOutput)
}

// The Amazon Resource Name (ARN) of the IAM role that provides permissions for the scraper to discover, collect, and produce metrics
func (o ScraperOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Scraper) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

// The configuration file to use in the new scraper. For more information, see [Scraper configuration](https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-collector-how-to.html#AMP-collector-configuration).
func (o ScraperOutput) ScrapeConfiguration() pulumi.StringOutput {
	return o.ApplyT(func(v *Scraper) pulumi.StringOutput { return v.ScrapeConfiguration }).(pulumi.StringOutput)
}

// Configuration block to specify where the managed scraper will collect metrics from. See `source`.
//
// The following arguments are optional:
func (o ScraperOutput) Source() ScraperSourcePtrOutput {
	return o.ApplyT(func(v *Scraper) ScraperSourcePtrOutput { return v.Source }).(ScraperSourcePtrOutput)
}

func (o ScraperOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Scraper) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Deprecated: Please use `tags` instead.
func (o ScraperOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Scraper) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o ScraperOutput) Timeouts() ScraperTimeoutsPtrOutput {
	return o.ApplyT(func(v *Scraper) ScraperTimeoutsPtrOutput { return v.Timeouts }).(ScraperTimeoutsPtrOutput)
}

type ScraperArrayOutput struct{ *pulumi.OutputState }

func (ScraperArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Scraper)(nil)).Elem()
}

func (o ScraperArrayOutput) ToScraperArrayOutput() ScraperArrayOutput {
	return o
}

func (o ScraperArrayOutput) ToScraperArrayOutputWithContext(ctx context.Context) ScraperArrayOutput {
	return o
}

func (o ScraperArrayOutput) Index(i pulumi.IntInput) ScraperOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Scraper {
		return vs[0].([]*Scraper)[vs[1].(int)]
	}).(ScraperOutput)
}

type ScraperMapOutput struct{ *pulumi.OutputState }

func (ScraperMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Scraper)(nil)).Elem()
}

func (o ScraperMapOutput) ToScraperMapOutput() ScraperMapOutput {
	return o
}

func (o ScraperMapOutput) ToScraperMapOutputWithContext(ctx context.Context) ScraperMapOutput {
	return o
}

func (o ScraperMapOutput) MapIndex(k pulumi.StringInput) ScraperOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Scraper {
		return vs[0].(map[string]*Scraper)[vs[1].(string)]
	}).(ScraperOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScraperInput)(nil)).Elem(), &Scraper{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScraperArrayInput)(nil)).Elem(), ScraperArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScraperMapInput)(nil)).Elem(), ScraperMap{})
	pulumi.RegisterOutputType(ScraperOutput{})
	pulumi.RegisterOutputType(ScraperArrayOutput{})
	pulumi.RegisterOutputType(ScraperMapOutput{})
}
