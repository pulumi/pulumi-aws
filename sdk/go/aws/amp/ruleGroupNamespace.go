// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package amp

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RuleGroupNamespace struct {
	pulumi.CustomResourceState

	Data        pulumi.StringOutput `pulumi:"data"`
	Name        pulumi.StringOutput `pulumi:"name"`
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewRuleGroupNamespace registers a new resource with the given unique name, arguments, and options.
func NewRuleGroupNamespace(ctx *pulumi.Context,
	name string, args *RuleGroupNamespaceArgs, opts ...pulumi.ResourceOption) (*RuleGroupNamespace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Data == nil {
		return nil, errors.New("invalid value for required argument 'Data'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	var resource RuleGroupNamespace
	err := ctx.RegisterResource("aws:amp/ruleGroupNamespace:RuleGroupNamespace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRuleGroupNamespace gets an existing RuleGroupNamespace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRuleGroupNamespace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleGroupNamespaceState, opts ...pulumi.ResourceOption) (*RuleGroupNamespace, error) {
	var resource RuleGroupNamespace
	err := ctx.ReadResource("aws:amp/ruleGroupNamespace:RuleGroupNamespace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RuleGroupNamespace resources.
type ruleGroupNamespaceState struct {
	Data        *string `pulumi:"data"`
	Name        *string `pulumi:"name"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type RuleGroupNamespaceState struct {
	Data        pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (RuleGroupNamespaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleGroupNamespaceState)(nil)).Elem()
}

type ruleGroupNamespaceArgs struct {
	Data        string  `pulumi:"data"`
	Name        *string `pulumi:"name"`
	WorkspaceId string  `pulumi:"workspaceId"`
}

// The set of arguments for constructing a RuleGroupNamespace resource.
type RuleGroupNamespaceArgs struct {
	Data        pulumi.StringInput
	Name        pulumi.StringPtrInput
	WorkspaceId pulumi.StringInput
}

func (RuleGroupNamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleGroupNamespaceArgs)(nil)).Elem()
}

type RuleGroupNamespaceInput interface {
	pulumi.Input

	ToRuleGroupNamespaceOutput() RuleGroupNamespaceOutput
	ToRuleGroupNamespaceOutputWithContext(ctx context.Context) RuleGroupNamespaceOutput
}

func (*RuleGroupNamespace) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleGroupNamespace)(nil)).Elem()
}

func (i *RuleGroupNamespace) ToRuleGroupNamespaceOutput() RuleGroupNamespaceOutput {
	return i.ToRuleGroupNamespaceOutputWithContext(context.Background())
}

func (i *RuleGroupNamespace) ToRuleGroupNamespaceOutputWithContext(ctx context.Context) RuleGroupNamespaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleGroupNamespaceOutput)
}

// RuleGroupNamespaceArrayInput is an input type that accepts RuleGroupNamespaceArray and RuleGroupNamespaceArrayOutput values.
// You can construct a concrete instance of `RuleGroupNamespaceArrayInput` via:
//
//	RuleGroupNamespaceArray{ RuleGroupNamespaceArgs{...} }
type RuleGroupNamespaceArrayInput interface {
	pulumi.Input

	ToRuleGroupNamespaceArrayOutput() RuleGroupNamespaceArrayOutput
	ToRuleGroupNamespaceArrayOutputWithContext(context.Context) RuleGroupNamespaceArrayOutput
}

type RuleGroupNamespaceArray []RuleGroupNamespaceInput

func (RuleGroupNamespaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuleGroupNamespace)(nil)).Elem()
}

func (i RuleGroupNamespaceArray) ToRuleGroupNamespaceArrayOutput() RuleGroupNamespaceArrayOutput {
	return i.ToRuleGroupNamespaceArrayOutputWithContext(context.Background())
}

func (i RuleGroupNamespaceArray) ToRuleGroupNamespaceArrayOutputWithContext(ctx context.Context) RuleGroupNamespaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleGroupNamespaceArrayOutput)
}

// RuleGroupNamespaceMapInput is an input type that accepts RuleGroupNamespaceMap and RuleGroupNamespaceMapOutput values.
// You can construct a concrete instance of `RuleGroupNamespaceMapInput` via:
//
//	RuleGroupNamespaceMap{ "key": RuleGroupNamespaceArgs{...} }
type RuleGroupNamespaceMapInput interface {
	pulumi.Input

	ToRuleGroupNamespaceMapOutput() RuleGroupNamespaceMapOutput
	ToRuleGroupNamespaceMapOutputWithContext(context.Context) RuleGroupNamespaceMapOutput
}

type RuleGroupNamespaceMap map[string]RuleGroupNamespaceInput

func (RuleGroupNamespaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuleGroupNamespace)(nil)).Elem()
}

func (i RuleGroupNamespaceMap) ToRuleGroupNamespaceMapOutput() RuleGroupNamespaceMapOutput {
	return i.ToRuleGroupNamespaceMapOutputWithContext(context.Background())
}

func (i RuleGroupNamespaceMap) ToRuleGroupNamespaceMapOutputWithContext(ctx context.Context) RuleGroupNamespaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleGroupNamespaceMapOutput)
}

type RuleGroupNamespaceOutput struct{ *pulumi.OutputState }

func (RuleGroupNamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleGroupNamespace)(nil)).Elem()
}

func (o RuleGroupNamespaceOutput) ToRuleGroupNamespaceOutput() RuleGroupNamespaceOutput {
	return o
}

func (o RuleGroupNamespaceOutput) ToRuleGroupNamespaceOutputWithContext(ctx context.Context) RuleGroupNamespaceOutput {
	return o
}

func (o RuleGroupNamespaceOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v *RuleGroupNamespace) pulumi.StringOutput { return v.Data }).(pulumi.StringOutput)
}

func (o RuleGroupNamespaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RuleGroupNamespace) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RuleGroupNamespaceOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RuleGroupNamespace) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type RuleGroupNamespaceArrayOutput struct{ *pulumi.OutputState }

func (RuleGroupNamespaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuleGroupNamespace)(nil)).Elem()
}

func (o RuleGroupNamespaceArrayOutput) ToRuleGroupNamespaceArrayOutput() RuleGroupNamespaceArrayOutput {
	return o
}

func (o RuleGroupNamespaceArrayOutput) ToRuleGroupNamespaceArrayOutputWithContext(ctx context.Context) RuleGroupNamespaceArrayOutput {
	return o
}

func (o RuleGroupNamespaceArrayOutput) Index(i pulumi.IntInput) RuleGroupNamespaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RuleGroupNamespace {
		return vs[0].([]*RuleGroupNamespace)[vs[1].(int)]
	}).(RuleGroupNamespaceOutput)
}

type RuleGroupNamespaceMapOutput struct{ *pulumi.OutputState }

func (RuleGroupNamespaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuleGroupNamespace)(nil)).Elem()
}

func (o RuleGroupNamespaceMapOutput) ToRuleGroupNamespaceMapOutput() RuleGroupNamespaceMapOutput {
	return o
}

func (o RuleGroupNamespaceMapOutput) ToRuleGroupNamespaceMapOutputWithContext(ctx context.Context) RuleGroupNamespaceMapOutput {
	return o
}

func (o RuleGroupNamespaceMapOutput) MapIndex(k pulumi.StringInput) RuleGroupNamespaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RuleGroupNamespace {
		return vs[0].(map[string]*RuleGroupNamespace)[vs[1].(string)]
	}).(RuleGroupNamespaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RuleGroupNamespaceInput)(nil)).Elem(), &RuleGroupNamespace{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleGroupNamespaceArrayInput)(nil)).Elem(), RuleGroupNamespaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleGroupNamespaceMapInput)(nil)).Elem(), RuleGroupNamespaceMap{})
	pulumi.RegisterOutputType(RuleGroupNamespaceOutput{})
	pulumi.RegisterOutputType(RuleGroupNamespaceArrayOutput{})
	pulumi.RegisterOutputType(RuleGroupNamespaceMapOutput{})
}
