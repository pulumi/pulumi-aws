// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package transcribe

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LanguageModel struct {
	pulumi.CustomResourceState

	Arn             pulumi.StringOutput                `pulumi:"arn"`
	BaseModelName   pulumi.StringOutput                `pulumi:"baseModelName"`
	InputDataConfig LanguageModelInputDataConfigOutput `pulumi:"inputDataConfig"`
	LanguageCode    pulumi.StringOutput                `pulumi:"languageCode"`
	ModelName       pulumi.StringOutput                `pulumi:"modelName"`
	Tags            pulumi.StringMapOutput             `pulumi:"tags"`
	TagsAll         pulumi.StringMapOutput             `pulumi:"tagsAll"`
}

// NewLanguageModel registers a new resource with the given unique name, arguments, and options.
func NewLanguageModel(ctx *pulumi.Context,
	name string, args *LanguageModelArgs, opts ...pulumi.ResourceOption) (*LanguageModel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BaseModelName == nil {
		return nil, errors.New("invalid value for required argument 'BaseModelName'")
	}
	if args.InputDataConfig == nil {
		return nil, errors.New("invalid value for required argument 'InputDataConfig'")
	}
	if args.LanguageCode == nil {
		return nil, errors.New("invalid value for required argument 'LanguageCode'")
	}
	if args.ModelName == nil {
		return nil, errors.New("invalid value for required argument 'ModelName'")
	}
	var resource LanguageModel
	err := ctx.RegisterResource("aws:transcribe/languageModel:LanguageModel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLanguageModel gets an existing LanguageModel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLanguageModel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LanguageModelState, opts ...pulumi.ResourceOption) (*LanguageModel, error) {
	var resource LanguageModel
	err := ctx.ReadResource("aws:transcribe/languageModel:LanguageModel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LanguageModel resources.
type languageModelState struct {
	Arn             *string                       `pulumi:"arn"`
	BaseModelName   *string                       `pulumi:"baseModelName"`
	InputDataConfig *LanguageModelInputDataConfig `pulumi:"inputDataConfig"`
	LanguageCode    *string                       `pulumi:"languageCode"`
	ModelName       *string                       `pulumi:"modelName"`
	Tags            map[string]string             `pulumi:"tags"`
	TagsAll         map[string]string             `pulumi:"tagsAll"`
}

type LanguageModelState struct {
	Arn             pulumi.StringPtrInput
	BaseModelName   pulumi.StringPtrInput
	InputDataConfig LanguageModelInputDataConfigPtrInput
	LanguageCode    pulumi.StringPtrInput
	ModelName       pulumi.StringPtrInput
	Tags            pulumi.StringMapInput
	TagsAll         pulumi.StringMapInput
}

func (LanguageModelState) ElementType() reflect.Type {
	return reflect.TypeOf((*languageModelState)(nil)).Elem()
}

type languageModelArgs struct {
	BaseModelName   string                       `pulumi:"baseModelName"`
	InputDataConfig LanguageModelInputDataConfig `pulumi:"inputDataConfig"`
	LanguageCode    string                       `pulumi:"languageCode"`
	ModelName       string                       `pulumi:"modelName"`
	Tags            map[string]string            `pulumi:"tags"`
}

// The set of arguments for constructing a LanguageModel resource.
type LanguageModelArgs struct {
	BaseModelName   pulumi.StringInput
	InputDataConfig LanguageModelInputDataConfigInput
	LanguageCode    pulumi.StringInput
	ModelName       pulumi.StringInput
	Tags            pulumi.StringMapInput
}

func (LanguageModelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*languageModelArgs)(nil)).Elem()
}

type LanguageModelInput interface {
	pulumi.Input

	ToLanguageModelOutput() LanguageModelOutput
	ToLanguageModelOutputWithContext(ctx context.Context) LanguageModelOutput
}

func (*LanguageModel) ElementType() reflect.Type {
	return reflect.TypeOf((**LanguageModel)(nil)).Elem()
}

func (i *LanguageModel) ToLanguageModelOutput() LanguageModelOutput {
	return i.ToLanguageModelOutputWithContext(context.Background())
}

func (i *LanguageModel) ToLanguageModelOutputWithContext(ctx context.Context) LanguageModelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LanguageModelOutput)
}

// LanguageModelArrayInput is an input type that accepts LanguageModelArray and LanguageModelArrayOutput values.
// You can construct a concrete instance of `LanguageModelArrayInput` via:
//
//	LanguageModelArray{ LanguageModelArgs{...} }
type LanguageModelArrayInput interface {
	pulumi.Input

	ToLanguageModelArrayOutput() LanguageModelArrayOutput
	ToLanguageModelArrayOutputWithContext(context.Context) LanguageModelArrayOutput
}

type LanguageModelArray []LanguageModelInput

func (LanguageModelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LanguageModel)(nil)).Elem()
}

func (i LanguageModelArray) ToLanguageModelArrayOutput() LanguageModelArrayOutput {
	return i.ToLanguageModelArrayOutputWithContext(context.Background())
}

func (i LanguageModelArray) ToLanguageModelArrayOutputWithContext(ctx context.Context) LanguageModelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LanguageModelArrayOutput)
}

// LanguageModelMapInput is an input type that accepts LanguageModelMap and LanguageModelMapOutput values.
// You can construct a concrete instance of `LanguageModelMapInput` via:
//
//	LanguageModelMap{ "key": LanguageModelArgs{...} }
type LanguageModelMapInput interface {
	pulumi.Input

	ToLanguageModelMapOutput() LanguageModelMapOutput
	ToLanguageModelMapOutputWithContext(context.Context) LanguageModelMapOutput
}

type LanguageModelMap map[string]LanguageModelInput

func (LanguageModelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LanguageModel)(nil)).Elem()
}

func (i LanguageModelMap) ToLanguageModelMapOutput() LanguageModelMapOutput {
	return i.ToLanguageModelMapOutputWithContext(context.Background())
}

func (i LanguageModelMap) ToLanguageModelMapOutputWithContext(ctx context.Context) LanguageModelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LanguageModelMapOutput)
}

type LanguageModelOutput struct{ *pulumi.OutputState }

func (LanguageModelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LanguageModel)(nil)).Elem()
}

func (o LanguageModelOutput) ToLanguageModelOutput() LanguageModelOutput {
	return o
}

func (o LanguageModelOutput) ToLanguageModelOutputWithContext(ctx context.Context) LanguageModelOutput {
	return o
}

func (o LanguageModelOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *LanguageModel) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o LanguageModelOutput) BaseModelName() pulumi.StringOutput {
	return o.ApplyT(func(v *LanguageModel) pulumi.StringOutput { return v.BaseModelName }).(pulumi.StringOutput)
}

func (o LanguageModelOutput) InputDataConfig() LanguageModelInputDataConfigOutput {
	return o.ApplyT(func(v *LanguageModel) LanguageModelInputDataConfigOutput { return v.InputDataConfig }).(LanguageModelInputDataConfigOutput)
}

func (o LanguageModelOutput) LanguageCode() pulumi.StringOutput {
	return o.ApplyT(func(v *LanguageModel) pulumi.StringOutput { return v.LanguageCode }).(pulumi.StringOutput)
}

func (o LanguageModelOutput) ModelName() pulumi.StringOutput {
	return o.ApplyT(func(v *LanguageModel) pulumi.StringOutput { return v.ModelName }).(pulumi.StringOutput)
}

func (o LanguageModelOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LanguageModel) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o LanguageModelOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LanguageModel) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type LanguageModelArrayOutput struct{ *pulumi.OutputState }

func (LanguageModelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LanguageModel)(nil)).Elem()
}

func (o LanguageModelArrayOutput) ToLanguageModelArrayOutput() LanguageModelArrayOutput {
	return o
}

func (o LanguageModelArrayOutput) ToLanguageModelArrayOutputWithContext(ctx context.Context) LanguageModelArrayOutput {
	return o
}

func (o LanguageModelArrayOutput) Index(i pulumi.IntInput) LanguageModelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LanguageModel {
		return vs[0].([]*LanguageModel)[vs[1].(int)]
	}).(LanguageModelOutput)
}

type LanguageModelMapOutput struct{ *pulumi.OutputState }

func (LanguageModelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LanguageModel)(nil)).Elem()
}

func (o LanguageModelMapOutput) ToLanguageModelMapOutput() LanguageModelMapOutput {
	return o
}

func (o LanguageModelMapOutput) ToLanguageModelMapOutputWithContext(ctx context.Context) LanguageModelMapOutput {
	return o
}

func (o LanguageModelMapOutput) MapIndex(k pulumi.StringInput) LanguageModelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LanguageModel {
		return vs[0].(map[string]*LanguageModel)[vs[1].(string)]
	}).(LanguageModelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LanguageModelInput)(nil)).Elem(), &LanguageModel{})
	pulumi.RegisterInputType(reflect.TypeOf((*LanguageModelArrayInput)(nil)).Elem(), LanguageModelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LanguageModelMapInput)(nil)).Elem(), LanguageModelMap{})
	pulumi.RegisterOutputType(LanguageModelOutput{})
	pulumi.RegisterOutputType(LanguageModelArrayOutput{})
	pulumi.RegisterOutputType(LanguageModelMapOutput{})
}
