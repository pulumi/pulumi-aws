// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package macie2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Member struct {
	pulumi.CustomResourceState

	AccountId                          pulumi.StringOutput    `pulumi:"accountId"`
	AdministratorAccountId             pulumi.StringOutput    `pulumi:"administratorAccountId"`
	Arn                                pulumi.StringOutput    `pulumi:"arn"`
	Email                              pulumi.StringOutput    `pulumi:"email"`
	InvitationDisableEmailNotification pulumi.BoolPtrOutput   `pulumi:"invitationDisableEmailNotification"`
	InvitationMessage                  pulumi.StringPtrOutput `pulumi:"invitationMessage"`
	Invite                             pulumi.BoolOutput      `pulumi:"invite"`
	InvitedAt                          pulumi.StringOutput    `pulumi:"invitedAt"`
	MasterAccountId                    pulumi.StringOutput    `pulumi:"masterAccountId"`
	RelationshipStatus                 pulumi.StringOutput    `pulumi:"relationshipStatus"`
	Status                             pulumi.StringOutput    `pulumi:"status"`
	Tags                               pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll                            pulumi.StringMapOutput `pulumi:"tagsAll"`
	UpdatedAt                          pulumi.StringOutput    `pulumi:"updatedAt"`
}

// NewMember registers a new resource with the given unique name, arguments, and options.
func NewMember(ctx *pulumi.Context,
	name string, args *MemberArgs, opts ...pulumi.ResourceOption) (*Member, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	var resource Member
	err := ctx.RegisterResource("aws:macie2/member:Member", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMember gets an existing Member resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MemberState, opts ...pulumi.ResourceOption) (*Member, error) {
	var resource Member
	err := ctx.ReadResource("aws:macie2/member:Member", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Member resources.
type memberState struct {
	AccountId                          *string           `pulumi:"accountId"`
	AdministratorAccountId             *string           `pulumi:"administratorAccountId"`
	Arn                                *string           `pulumi:"arn"`
	Email                              *string           `pulumi:"email"`
	InvitationDisableEmailNotification *bool             `pulumi:"invitationDisableEmailNotification"`
	InvitationMessage                  *string           `pulumi:"invitationMessage"`
	Invite                             *bool             `pulumi:"invite"`
	InvitedAt                          *string           `pulumi:"invitedAt"`
	MasterAccountId                    *string           `pulumi:"masterAccountId"`
	RelationshipStatus                 *string           `pulumi:"relationshipStatus"`
	Status                             *string           `pulumi:"status"`
	Tags                               map[string]string `pulumi:"tags"`
	TagsAll                            map[string]string `pulumi:"tagsAll"`
	UpdatedAt                          *string           `pulumi:"updatedAt"`
}

type MemberState struct {
	AccountId                          pulumi.StringPtrInput
	AdministratorAccountId             pulumi.StringPtrInput
	Arn                                pulumi.StringPtrInput
	Email                              pulumi.StringPtrInput
	InvitationDisableEmailNotification pulumi.BoolPtrInput
	InvitationMessage                  pulumi.StringPtrInput
	Invite                             pulumi.BoolPtrInput
	InvitedAt                          pulumi.StringPtrInput
	MasterAccountId                    pulumi.StringPtrInput
	RelationshipStatus                 pulumi.StringPtrInput
	Status                             pulumi.StringPtrInput
	Tags                               pulumi.StringMapInput
	TagsAll                            pulumi.StringMapInput
	UpdatedAt                          pulumi.StringPtrInput
}

func (MemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*memberState)(nil)).Elem()
}

type memberArgs struct {
	AccountId                          string            `pulumi:"accountId"`
	Email                              string            `pulumi:"email"`
	InvitationDisableEmailNotification *bool             `pulumi:"invitationDisableEmailNotification"`
	InvitationMessage                  *string           `pulumi:"invitationMessage"`
	Invite                             *bool             `pulumi:"invite"`
	Status                             *string           `pulumi:"status"`
	Tags                               map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Member resource.
type MemberArgs struct {
	AccountId                          pulumi.StringInput
	Email                              pulumi.StringInput
	InvitationDisableEmailNotification pulumi.BoolPtrInput
	InvitationMessage                  pulumi.StringPtrInput
	Invite                             pulumi.BoolPtrInput
	Status                             pulumi.StringPtrInput
	Tags                               pulumi.StringMapInput
}

func (MemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*memberArgs)(nil)).Elem()
}

type MemberInput interface {
	pulumi.Input

	ToMemberOutput() MemberOutput
	ToMemberOutputWithContext(ctx context.Context) MemberOutput
}

func (*Member) ElementType() reflect.Type {
	return reflect.TypeOf((**Member)(nil)).Elem()
}

func (i *Member) ToMemberOutput() MemberOutput {
	return i.ToMemberOutputWithContext(context.Background())
}

func (i *Member) ToMemberOutputWithContext(ctx context.Context) MemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemberOutput)
}

// MemberArrayInput is an input type that accepts MemberArray and MemberArrayOutput values.
// You can construct a concrete instance of `MemberArrayInput` via:
//
//	MemberArray{ MemberArgs{...} }
type MemberArrayInput interface {
	pulumi.Input

	ToMemberArrayOutput() MemberArrayOutput
	ToMemberArrayOutputWithContext(context.Context) MemberArrayOutput
}

type MemberArray []MemberInput

func (MemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Member)(nil)).Elem()
}

func (i MemberArray) ToMemberArrayOutput() MemberArrayOutput {
	return i.ToMemberArrayOutputWithContext(context.Background())
}

func (i MemberArray) ToMemberArrayOutputWithContext(ctx context.Context) MemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemberArrayOutput)
}

// MemberMapInput is an input type that accepts MemberMap and MemberMapOutput values.
// You can construct a concrete instance of `MemberMapInput` via:
//
//	MemberMap{ "key": MemberArgs{...} }
type MemberMapInput interface {
	pulumi.Input

	ToMemberMapOutput() MemberMapOutput
	ToMemberMapOutputWithContext(context.Context) MemberMapOutput
}

type MemberMap map[string]MemberInput

func (MemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Member)(nil)).Elem()
}

func (i MemberMap) ToMemberMapOutput() MemberMapOutput {
	return i.ToMemberMapOutputWithContext(context.Background())
}

func (i MemberMap) ToMemberMapOutputWithContext(ctx context.Context) MemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemberMapOutput)
}

type MemberOutput struct{ *pulumi.OutputState }

func (MemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Member)(nil)).Elem()
}

func (o MemberOutput) ToMemberOutput() MemberOutput {
	return o
}

func (o MemberOutput) ToMemberOutputWithContext(ctx context.Context) MemberOutput {
	return o
}

func (o MemberOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Member) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

func (o MemberOutput) AdministratorAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Member) pulumi.StringOutput { return v.AdministratorAccountId }).(pulumi.StringOutput)
}

func (o MemberOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Member) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o MemberOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *Member) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

func (o MemberOutput) InvitationDisableEmailNotification() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Member) pulumi.BoolPtrOutput { return v.InvitationDisableEmailNotification }).(pulumi.BoolPtrOutput)
}

func (o MemberOutput) InvitationMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Member) pulumi.StringPtrOutput { return v.InvitationMessage }).(pulumi.StringPtrOutput)
}

func (o MemberOutput) Invite() pulumi.BoolOutput {
	return o.ApplyT(func(v *Member) pulumi.BoolOutput { return v.Invite }).(pulumi.BoolOutput)
}

func (o MemberOutput) InvitedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Member) pulumi.StringOutput { return v.InvitedAt }).(pulumi.StringOutput)
}

func (o MemberOutput) MasterAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Member) pulumi.StringOutput { return v.MasterAccountId }).(pulumi.StringOutput)
}

func (o MemberOutput) RelationshipStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Member) pulumi.StringOutput { return v.RelationshipStatus }).(pulumi.StringOutput)
}

func (o MemberOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Member) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o MemberOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Member) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o MemberOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Member) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o MemberOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Member) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type MemberArrayOutput struct{ *pulumi.OutputState }

func (MemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Member)(nil)).Elem()
}

func (o MemberArrayOutput) ToMemberArrayOutput() MemberArrayOutput {
	return o
}

func (o MemberArrayOutput) ToMemberArrayOutputWithContext(ctx context.Context) MemberArrayOutput {
	return o
}

func (o MemberArrayOutput) Index(i pulumi.IntInput) MemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Member {
		return vs[0].([]*Member)[vs[1].(int)]
	}).(MemberOutput)
}

type MemberMapOutput struct{ *pulumi.OutputState }

func (MemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Member)(nil)).Elem()
}

func (o MemberMapOutput) ToMemberMapOutput() MemberMapOutput {
	return o
}

func (o MemberMapOutput) ToMemberMapOutputWithContext(ctx context.Context) MemberMapOutput {
	return o
}

func (o MemberMapOutput) MapIndex(k pulumi.StringInput) MemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Member {
		return vs[0].(map[string]*Member)[vs[1].(string)]
	}).(MemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MemberInput)(nil)).Elem(), &Member{})
	pulumi.RegisterInputType(reflect.TypeOf((*MemberArrayInput)(nil)).Elem(), MemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MemberMapInput)(nil)).Elem(), MemberMap{})
	pulumi.RegisterOutputType(MemberOutput{})
	pulumi.RegisterOutputType(MemberArrayOutput{})
	pulumi.RegisterOutputType(MemberMapOutput{})
}
