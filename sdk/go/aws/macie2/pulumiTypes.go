// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package macie2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ClassificationJobS3JobDefinition struct {
	// An array of objects, one for each AWS account that owns buckets to analyze. Each object specifies the account ID for an account and one or more buckets to analyze for the account. (documented below)
	BucketDefinitions []ClassificationJobS3JobDefinitionBucketDefinition `pulumi:"bucketDefinitions"`
	// The property- and tag-based conditions that determine which objects to include or exclude from the analysis. (documented below)
	Scoping *ClassificationJobS3JobDefinitionScoping `pulumi:"scoping"`
}

// ClassificationJobS3JobDefinitionInput is an input type that accepts ClassificationJobS3JobDefinitionArgs and ClassificationJobS3JobDefinitionOutput values.
// You can construct a concrete instance of `ClassificationJobS3JobDefinitionInput` via:
//
//          ClassificationJobS3JobDefinitionArgs{...}
type ClassificationJobS3JobDefinitionInput interface {
	pulumi.Input

	ToClassificationJobS3JobDefinitionOutput() ClassificationJobS3JobDefinitionOutput
	ToClassificationJobS3JobDefinitionOutputWithContext(context.Context) ClassificationJobS3JobDefinitionOutput
}

type ClassificationJobS3JobDefinitionArgs struct {
	// An array of objects, one for each AWS account that owns buckets to analyze. Each object specifies the account ID for an account and one or more buckets to analyze for the account. (documented below)
	BucketDefinitions ClassificationJobS3JobDefinitionBucketDefinitionArrayInput `pulumi:"bucketDefinitions"`
	// The property- and tag-based conditions that determine which objects to include or exclude from the analysis. (documented below)
	Scoping ClassificationJobS3JobDefinitionScopingPtrInput `pulumi:"scoping"`
}

func (ClassificationJobS3JobDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinition)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionArgs) ToClassificationJobS3JobDefinitionOutput() ClassificationJobS3JobDefinitionOutput {
	return i.ToClassificationJobS3JobDefinitionOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionArgs) ToClassificationJobS3JobDefinitionOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionOutput)
}

func (i ClassificationJobS3JobDefinitionArgs) ToClassificationJobS3JobDefinitionPtrOutput() ClassificationJobS3JobDefinitionPtrOutput {
	return i.ToClassificationJobS3JobDefinitionPtrOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionArgs) ToClassificationJobS3JobDefinitionPtrOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionOutput).ToClassificationJobS3JobDefinitionPtrOutputWithContext(ctx)
}

// ClassificationJobS3JobDefinitionPtrInput is an input type that accepts ClassificationJobS3JobDefinitionArgs, ClassificationJobS3JobDefinitionPtr and ClassificationJobS3JobDefinitionPtrOutput values.
// You can construct a concrete instance of `ClassificationJobS3JobDefinitionPtrInput` via:
//
//          ClassificationJobS3JobDefinitionArgs{...}
//
//  or:
//
//          nil
type ClassificationJobS3JobDefinitionPtrInput interface {
	pulumi.Input

	ToClassificationJobS3JobDefinitionPtrOutput() ClassificationJobS3JobDefinitionPtrOutput
	ToClassificationJobS3JobDefinitionPtrOutputWithContext(context.Context) ClassificationJobS3JobDefinitionPtrOutput
}

type classificationJobS3JobDefinitionPtrType ClassificationJobS3JobDefinitionArgs

func ClassificationJobS3JobDefinitionPtr(v *ClassificationJobS3JobDefinitionArgs) ClassificationJobS3JobDefinitionPtrInput {
	return (*classificationJobS3JobDefinitionPtrType)(v)
}

func (*classificationJobS3JobDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassificationJobS3JobDefinition)(nil)).Elem()
}

func (i *classificationJobS3JobDefinitionPtrType) ToClassificationJobS3JobDefinitionPtrOutput() ClassificationJobS3JobDefinitionPtrOutput {
	return i.ToClassificationJobS3JobDefinitionPtrOutputWithContext(context.Background())
}

func (i *classificationJobS3JobDefinitionPtrType) ToClassificationJobS3JobDefinitionPtrOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionPtrOutput)
}

type ClassificationJobS3JobDefinitionOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinition)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionOutput) ToClassificationJobS3JobDefinitionOutput() ClassificationJobS3JobDefinitionOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionOutput) ToClassificationJobS3JobDefinitionOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionOutput) ToClassificationJobS3JobDefinitionPtrOutput() ClassificationJobS3JobDefinitionPtrOutput {
	return o.ToClassificationJobS3JobDefinitionPtrOutputWithContext(context.Background())
}

func (o ClassificationJobS3JobDefinitionOutput) ToClassificationJobS3JobDefinitionPtrOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClassificationJobS3JobDefinition) *ClassificationJobS3JobDefinition {
		return &v
	}).(ClassificationJobS3JobDefinitionPtrOutput)
}

// An array of objects, one for each AWS account that owns buckets to analyze. Each object specifies the account ID for an account and one or more buckets to analyze for the account. (documented below)
func (o ClassificationJobS3JobDefinitionOutput) BucketDefinitions() ClassificationJobS3JobDefinitionBucketDefinitionArrayOutput {
	return o.ApplyT(func(v ClassificationJobS3JobDefinition) []ClassificationJobS3JobDefinitionBucketDefinition {
		return v.BucketDefinitions
	}).(ClassificationJobS3JobDefinitionBucketDefinitionArrayOutput)
}

// The property- and tag-based conditions that determine which objects to include or exclude from the analysis. (documented below)
func (o ClassificationJobS3JobDefinitionOutput) Scoping() ClassificationJobS3JobDefinitionScopingPtrOutput {
	return o.ApplyT(func(v ClassificationJobS3JobDefinition) *ClassificationJobS3JobDefinitionScoping { return v.Scoping }).(ClassificationJobS3JobDefinitionScopingPtrOutput)
}

type ClassificationJobS3JobDefinitionPtrOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassificationJobS3JobDefinition)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionPtrOutput) ToClassificationJobS3JobDefinitionPtrOutput() ClassificationJobS3JobDefinitionPtrOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionPtrOutput) ToClassificationJobS3JobDefinitionPtrOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionPtrOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionPtrOutput) Elem() ClassificationJobS3JobDefinitionOutput {
	return o.ApplyT(func(v *ClassificationJobS3JobDefinition) ClassificationJobS3JobDefinition {
		if v != nil {
			return *v
		}
		var ret ClassificationJobS3JobDefinition
		return ret
	}).(ClassificationJobS3JobDefinitionOutput)
}

// An array of objects, one for each AWS account that owns buckets to analyze. Each object specifies the account ID for an account and one or more buckets to analyze for the account. (documented below)
func (o ClassificationJobS3JobDefinitionPtrOutput) BucketDefinitions() ClassificationJobS3JobDefinitionBucketDefinitionArrayOutput {
	return o.ApplyT(func(v *ClassificationJobS3JobDefinition) []ClassificationJobS3JobDefinitionBucketDefinition {
		if v == nil {
			return nil
		}
		return v.BucketDefinitions
	}).(ClassificationJobS3JobDefinitionBucketDefinitionArrayOutput)
}

// The property- and tag-based conditions that determine which objects to include or exclude from the analysis. (documented below)
func (o ClassificationJobS3JobDefinitionPtrOutput) Scoping() ClassificationJobS3JobDefinitionScopingPtrOutput {
	return o.ApplyT(func(v *ClassificationJobS3JobDefinition) *ClassificationJobS3JobDefinitionScoping {
		if v == nil {
			return nil
		}
		return v.Scoping
	}).(ClassificationJobS3JobDefinitionScopingPtrOutput)
}

type ClassificationJobS3JobDefinitionBucketDefinition struct {
	// The unique identifier for the AWS account that owns the buckets.
	AccountId string `pulumi:"accountId"`
	// An array that lists the names of the buckets.
	Buckets []string `pulumi:"buckets"`
}

// ClassificationJobS3JobDefinitionBucketDefinitionInput is an input type that accepts ClassificationJobS3JobDefinitionBucketDefinitionArgs and ClassificationJobS3JobDefinitionBucketDefinitionOutput values.
// You can construct a concrete instance of `ClassificationJobS3JobDefinitionBucketDefinitionInput` via:
//
//          ClassificationJobS3JobDefinitionBucketDefinitionArgs{...}
type ClassificationJobS3JobDefinitionBucketDefinitionInput interface {
	pulumi.Input

	ToClassificationJobS3JobDefinitionBucketDefinitionOutput() ClassificationJobS3JobDefinitionBucketDefinitionOutput
	ToClassificationJobS3JobDefinitionBucketDefinitionOutputWithContext(context.Context) ClassificationJobS3JobDefinitionBucketDefinitionOutput
}

type ClassificationJobS3JobDefinitionBucketDefinitionArgs struct {
	// The unique identifier for the AWS account that owns the buckets.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// An array that lists the names of the buckets.
	Buckets pulumi.StringArrayInput `pulumi:"buckets"`
}

func (ClassificationJobS3JobDefinitionBucketDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionBucketDefinition)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionBucketDefinitionArgs) ToClassificationJobS3JobDefinitionBucketDefinitionOutput() ClassificationJobS3JobDefinitionBucketDefinitionOutput {
	return i.ToClassificationJobS3JobDefinitionBucketDefinitionOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionBucketDefinitionArgs) ToClassificationJobS3JobDefinitionBucketDefinitionOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionBucketDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionBucketDefinitionOutput)
}

// ClassificationJobS3JobDefinitionBucketDefinitionArrayInput is an input type that accepts ClassificationJobS3JobDefinitionBucketDefinitionArray and ClassificationJobS3JobDefinitionBucketDefinitionArrayOutput values.
// You can construct a concrete instance of `ClassificationJobS3JobDefinitionBucketDefinitionArrayInput` via:
//
//          ClassificationJobS3JobDefinitionBucketDefinitionArray{ ClassificationJobS3JobDefinitionBucketDefinitionArgs{...} }
type ClassificationJobS3JobDefinitionBucketDefinitionArrayInput interface {
	pulumi.Input

	ToClassificationJobS3JobDefinitionBucketDefinitionArrayOutput() ClassificationJobS3JobDefinitionBucketDefinitionArrayOutput
	ToClassificationJobS3JobDefinitionBucketDefinitionArrayOutputWithContext(context.Context) ClassificationJobS3JobDefinitionBucketDefinitionArrayOutput
}

type ClassificationJobS3JobDefinitionBucketDefinitionArray []ClassificationJobS3JobDefinitionBucketDefinitionInput

func (ClassificationJobS3JobDefinitionBucketDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClassificationJobS3JobDefinitionBucketDefinition)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionBucketDefinitionArray) ToClassificationJobS3JobDefinitionBucketDefinitionArrayOutput() ClassificationJobS3JobDefinitionBucketDefinitionArrayOutput {
	return i.ToClassificationJobS3JobDefinitionBucketDefinitionArrayOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionBucketDefinitionArray) ToClassificationJobS3JobDefinitionBucketDefinitionArrayOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionBucketDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionBucketDefinitionArrayOutput)
}

type ClassificationJobS3JobDefinitionBucketDefinitionOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionBucketDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionBucketDefinition)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionBucketDefinitionOutput) ToClassificationJobS3JobDefinitionBucketDefinitionOutput() ClassificationJobS3JobDefinitionBucketDefinitionOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionBucketDefinitionOutput) ToClassificationJobS3JobDefinitionBucketDefinitionOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionBucketDefinitionOutput {
	return o
}

// The unique identifier for the AWS account that owns the buckets.
func (o ClassificationJobS3JobDefinitionBucketDefinitionOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v ClassificationJobS3JobDefinitionBucketDefinition) string { return v.AccountId }).(pulumi.StringOutput)
}

// An array that lists the names of the buckets.
func (o ClassificationJobS3JobDefinitionBucketDefinitionOutput) Buckets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClassificationJobS3JobDefinitionBucketDefinition) []string { return v.Buckets }).(pulumi.StringArrayOutput)
}

type ClassificationJobS3JobDefinitionBucketDefinitionArrayOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionBucketDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClassificationJobS3JobDefinitionBucketDefinition)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionBucketDefinitionArrayOutput) ToClassificationJobS3JobDefinitionBucketDefinitionArrayOutput() ClassificationJobS3JobDefinitionBucketDefinitionArrayOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionBucketDefinitionArrayOutput) ToClassificationJobS3JobDefinitionBucketDefinitionArrayOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionBucketDefinitionArrayOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionBucketDefinitionArrayOutput) Index(i pulumi.IntInput) ClassificationJobS3JobDefinitionBucketDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClassificationJobS3JobDefinitionBucketDefinition {
		return vs[0].([]ClassificationJobS3JobDefinitionBucketDefinition)[vs[1].(int)]
	}).(ClassificationJobS3JobDefinitionBucketDefinitionOutput)
}

type ClassificationJobS3JobDefinitionScoping struct {
	// The property- or tag-based conditions that determine which objects to exclude from the analysis. (documented below)
	Excludes *ClassificationJobS3JobDefinitionScopingExcludes `pulumi:"excludes"`
	// The property- or tag-based conditions that determine which objects to include in the analysis. (documented below)
	Includes *ClassificationJobS3JobDefinitionScopingIncludes `pulumi:"includes"`
}

// ClassificationJobS3JobDefinitionScopingInput is an input type that accepts ClassificationJobS3JobDefinitionScopingArgs and ClassificationJobS3JobDefinitionScopingOutput values.
// You can construct a concrete instance of `ClassificationJobS3JobDefinitionScopingInput` via:
//
//          ClassificationJobS3JobDefinitionScopingArgs{...}
type ClassificationJobS3JobDefinitionScopingInput interface {
	pulumi.Input

	ToClassificationJobS3JobDefinitionScopingOutput() ClassificationJobS3JobDefinitionScopingOutput
	ToClassificationJobS3JobDefinitionScopingOutputWithContext(context.Context) ClassificationJobS3JobDefinitionScopingOutput
}

type ClassificationJobS3JobDefinitionScopingArgs struct {
	// The property- or tag-based conditions that determine which objects to exclude from the analysis. (documented below)
	Excludes ClassificationJobS3JobDefinitionScopingExcludesPtrInput `pulumi:"excludes"`
	// The property- or tag-based conditions that determine which objects to include in the analysis. (documented below)
	Includes ClassificationJobS3JobDefinitionScopingIncludesPtrInput `pulumi:"includes"`
}

func (ClassificationJobS3JobDefinitionScopingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScoping)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionScopingArgs) ToClassificationJobS3JobDefinitionScopingOutput() ClassificationJobS3JobDefinitionScopingOutput {
	return i.ToClassificationJobS3JobDefinitionScopingOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionScopingArgs) ToClassificationJobS3JobDefinitionScopingOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingOutput)
}

func (i ClassificationJobS3JobDefinitionScopingArgs) ToClassificationJobS3JobDefinitionScopingPtrOutput() ClassificationJobS3JobDefinitionScopingPtrOutput {
	return i.ToClassificationJobS3JobDefinitionScopingPtrOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionScopingArgs) ToClassificationJobS3JobDefinitionScopingPtrOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingOutput).ToClassificationJobS3JobDefinitionScopingPtrOutputWithContext(ctx)
}

// ClassificationJobS3JobDefinitionScopingPtrInput is an input type that accepts ClassificationJobS3JobDefinitionScopingArgs, ClassificationJobS3JobDefinitionScopingPtr and ClassificationJobS3JobDefinitionScopingPtrOutput values.
// You can construct a concrete instance of `ClassificationJobS3JobDefinitionScopingPtrInput` via:
//
//          ClassificationJobS3JobDefinitionScopingArgs{...}
//
//  or:
//
//          nil
type ClassificationJobS3JobDefinitionScopingPtrInput interface {
	pulumi.Input

	ToClassificationJobS3JobDefinitionScopingPtrOutput() ClassificationJobS3JobDefinitionScopingPtrOutput
	ToClassificationJobS3JobDefinitionScopingPtrOutputWithContext(context.Context) ClassificationJobS3JobDefinitionScopingPtrOutput
}

type classificationJobS3JobDefinitionScopingPtrType ClassificationJobS3JobDefinitionScopingArgs

func ClassificationJobS3JobDefinitionScopingPtr(v *ClassificationJobS3JobDefinitionScopingArgs) ClassificationJobS3JobDefinitionScopingPtrInput {
	return (*classificationJobS3JobDefinitionScopingPtrType)(v)
}

func (*classificationJobS3JobDefinitionScopingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassificationJobS3JobDefinitionScoping)(nil)).Elem()
}

func (i *classificationJobS3JobDefinitionScopingPtrType) ToClassificationJobS3JobDefinitionScopingPtrOutput() ClassificationJobS3JobDefinitionScopingPtrOutput {
	return i.ToClassificationJobS3JobDefinitionScopingPtrOutputWithContext(context.Background())
}

func (i *classificationJobS3JobDefinitionScopingPtrType) ToClassificationJobS3JobDefinitionScopingPtrOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingPtrOutput)
}

type ClassificationJobS3JobDefinitionScopingOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionScopingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScoping)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionScopingOutput) ToClassificationJobS3JobDefinitionScopingOutput() ClassificationJobS3JobDefinitionScopingOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingOutput) ToClassificationJobS3JobDefinitionScopingOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingOutput) ToClassificationJobS3JobDefinitionScopingPtrOutput() ClassificationJobS3JobDefinitionScopingPtrOutput {
	return o.ToClassificationJobS3JobDefinitionScopingPtrOutputWithContext(context.Background())
}

func (o ClassificationJobS3JobDefinitionScopingOutput) ToClassificationJobS3JobDefinitionScopingPtrOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClassificationJobS3JobDefinitionScoping) *ClassificationJobS3JobDefinitionScoping {
		return &v
	}).(ClassificationJobS3JobDefinitionScopingPtrOutput)
}

// The property- or tag-based conditions that determine which objects to exclude from the analysis. (documented below)
func (o ClassificationJobS3JobDefinitionScopingOutput) Excludes() ClassificationJobS3JobDefinitionScopingExcludesPtrOutput {
	return o.ApplyT(func(v ClassificationJobS3JobDefinitionScoping) *ClassificationJobS3JobDefinitionScopingExcludes {
		return v.Excludes
	}).(ClassificationJobS3JobDefinitionScopingExcludesPtrOutput)
}

// The property- or tag-based conditions that determine which objects to include in the analysis. (documented below)
func (o ClassificationJobS3JobDefinitionScopingOutput) Includes() ClassificationJobS3JobDefinitionScopingIncludesPtrOutput {
	return o.ApplyT(func(v ClassificationJobS3JobDefinitionScoping) *ClassificationJobS3JobDefinitionScopingIncludes {
		return v.Includes
	}).(ClassificationJobS3JobDefinitionScopingIncludesPtrOutput)
}

type ClassificationJobS3JobDefinitionScopingPtrOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionScopingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassificationJobS3JobDefinitionScoping)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionScopingPtrOutput) ToClassificationJobS3JobDefinitionScopingPtrOutput() ClassificationJobS3JobDefinitionScopingPtrOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingPtrOutput) ToClassificationJobS3JobDefinitionScopingPtrOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingPtrOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingPtrOutput) Elem() ClassificationJobS3JobDefinitionScopingOutput {
	return o.ApplyT(func(v *ClassificationJobS3JobDefinitionScoping) ClassificationJobS3JobDefinitionScoping {
		if v != nil {
			return *v
		}
		var ret ClassificationJobS3JobDefinitionScoping
		return ret
	}).(ClassificationJobS3JobDefinitionScopingOutput)
}

// The property- or tag-based conditions that determine which objects to exclude from the analysis. (documented below)
func (o ClassificationJobS3JobDefinitionScopingPtrOutput) Excludes() ClassificationJobS3JobDefinitionScopingExcludesPtrOutput {
	return o.ApplyT(func(v *ClassificationJobS3JobDefinitionScoping) *ClassificationJobS3JobDefinitionScopingExcludes {
		if v == nil {
			return nil
		}
		return v.Excludes
	}).(ClassificationJobS3JobDefinitionScopingExcludesPtrOutput)
}

// The property- or tag-based conditions that determine which objects to include in the analysis. (documented below)
func (o ClassificationJobS3JobDefinitionScopingPtrOutput) Includes() ClassificationJobS3JobDefinitionScopingIncludesPtrOutput {
	return o.ApplyT(func(v *ClassificationJobS3JobDefinitionScoping) *ClassificationJobS3JobDefinitionScopingIncludes {
		if v == nil {
			return nil
		}
		return v.Includes
	}).(ClassificationJobS3JobDefinitionScopingIncludesPtrOutput)
}

type ClassificationJobS3JobDefinitionScopingExcludes struct {
	// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
	Ands []ClassificationJobS3JobDefinitionScopingExcludesAnd `pulumi:"ands"`
}

// ClassificationJobS3JobDefinitionScopingExcludesInput is an input type that accepts ClassificationJobS3JobDefinitionScopingExcludesArgs and ClassificationJobS3JobDefinitionScopingExcludesOutput values.
// You can construct a concrete instance of `ClassificationJobS3JobDefinitionScopingExcludesInput` via:
//
//          ClassificationJobS3JobDefinitionScopingExcludesArgs{...}
type ClassificationJobS3JobDefinitionScopingExcludesInput interface {
	pulumi.Input

	ToClassificationJobS3JobDefinitionScopingExcludesOutput() ClassificationJobS3JobDefinitionScopingExcludesOutput
	ToClassificationJobS3JobDefinitionScopingExcludesOutputWithContext(context.Context) ClassificationJobS3JobDefinitionScopingExcludesOutput
}

type ClassificationJobS3JobDefinitionScopingExcludesArgs struct {
	// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
	Ands ClassificationJobS3JobDefinitionScopingExcludesAndArrayInput `pulumi:"ands"`
}

func (ClassificationJobS3JobDefinitionScopingExcludesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingExcludes)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionScopingExcludesArgs) ToClassificationJobS3JobDefinitionScopingExcludesOutput() ClassificationJobS3JobDefinitionScopingExcludesOutput {
	return i.ToClassificationJobS3JobDefinitionScopingExcludesOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionScopingExcludesArgs) ToClassificationJobS3JobDefinitionScopingExcludesOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingExcludesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingExcludesOutput)
}

func (i ClassificationJobS3JobDefinitionScopingExcludesArgs) ToClassificationJobS3JobDefinitionScopingExcludesPtrOutput() ClassificationJobS3JobDefinitionScopingExcludesPtrOutput {
	return i.ToClassificationJobS3JobDefinitionScopingExcludesPtrOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionScopingExcludesArgs) ToClassificationJobS3JobDefinitionScopingExcludesPtrOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingExcludesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingExcludesOutput).ToClassificationJobS3JobDefinitionScopingExcludesPtrOutputWithContext(ctx)
}

// ClassificationJobS3JobDefinitionScopingExcludesPtrInput is an input type that accepts ClassificationJobS3JobDefinitionScopingExcludesArgs, ClassificationJobS3JobDefinitionScopingExcludesPtr and ClassificationJobS3JobDefinitionScopingExcludesPtrOutput values.
// You can construct a concrete instance of `ClassificationJobS3JobDefinitionScopingExcludesPtrInput` via:
//
//          ClassificationJobS3JobDefinitionScopingExcludesArgs{...}
//
//  or:
//
//          nil
type ClassificationJobS3JobDefinitionScopingExcludesPtrInput interface {
	pulumi.Input

	ToClassificationJobS3JobDefinitionScopingExcludesPtrOutput() ClassificationJobS3JobDefinitionScopingExcludesPtrOutput
	ToClassificationJobS3JobDefinitionScopingExcludesPtrOutputWithContext(context.Context) ClassificationJobS3JobDefinitionScopingExcludesPtrOutput
}

type classificationJobS3JobDefinitionScopingExcludesPtrType ClassificationJobS3JobDefinitionScopingExcludesArgs

func ClassificationJobS3JobDefinitionScopingExcludesPtr(v *ClassificationJobS3JobDefinitionScopingExcludesArgs) ClassificationJobS3JobDefinitionScopingExcludesPtrInput {
	return (*classificationJobS3JobDefinitionScopingExcludesPtrType)(v)
}

func (*classificationJobS3JobDefinitionScopingExcludesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassificationJobS3JobDefinitionScopingExcludes)(nil)).Elem()
}

func (i *classificationJobS3JobDefinitionScopingExcludesPtrType) ToClassificationJobS3JobDefinitionScopingExcludesPtrOutput() ClassificationJobS3JobDefinitionScopingExcludesPtrOutput {
	return i.ToClassificationJobS3JobDefinitionScopingExcludesPtrOutputWithContext(context.Background())
}

func (i *classificationJobS3JobDefinitionScopingExcludesPtrType) ToClassificationJobS3JobDefinitionScopingExcludesPtrOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingExcludesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingExcludesPtrOutput)
}

type ClassificationJobS3JobDefinitionScopingExcludesOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionScopingExcludesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingExcludes)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionScopingExcludesOutput) ToClassificationJobS3JobDefinitionScopingExcludesOutput() ClassificationJobS3JobDefinitionScopingExcludesOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingExcludesOutput) ToClassificationJobS3JobDefinitionScopingExcludesOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingExcludesOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingExcludesOutput) ToClassificationJobS3JobDefinitionScopingExcludesPtrOutput() ClassificationJobS3JobDefinitionScopingExcludesPtrOutput {
	return o.ToClassificationJobS3JobDefinitionScopingExcludesPtrOutputWithContext(context.Background())
}

func (o ClassificationJobS3JobDefinitionScopingExcludesOutput) ToClassificationJobS3JobDefinitionScopingExcludesPtrOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingExcludesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClassificationJobS3JobDefinitionScopingExcludes) *ClassificationJobS3JobDefinitionScopingExcludes {
		return &v
	}).(ClassificationJobS3JobDefinitionScopingExcludesPtrOutput)
}

// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
func (o ClassificationJobS3JobDefinitionScopingExcludesOutput) Ands() ClassificationJobS3JobDefinitionScopingExcludesAndArrayOutput {
	return o.ApplyT(func(v ClassificationJobS3JobDefinitionScopingExcludes) []ClassificationJobS3JobDefinitionScopingExcludesAnd {
		return v.Ands
	}).(ClassificationJobS3JobDefinitionScopingExcludesAndArrayOutput)
}

type ClassificationJobS3JobDefinitionScopingExcludesPtrOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionScopingExcludesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassificationJobS3JobDefinitionScopingExcludes)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionScopingExcludesPtrOutput) ToClassificationJobS3JobDefinitionScopingExcludesPtrOutput() ClassificationJobS3JobDefinitionScopingExcludesPtrOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingExcludesPtrOutput) ToClassificationJobS3JobDefinitionScopingExcludesPtrOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingExcludesPtrOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingExcludesPtrOutput) Elem() ClassificationJobS3JobDefinitionScopingExcludesOutput {
	return o.ApplyT(func(v *ClassificationJobS3JobDefinitionScopingExcludes) ClassificationJobS3JobDefinitionScopingExcludes {
		if v != nil {
			return *v
		}
		var ret ClassificationJobS3JobDefinitionScopingExcludes
		return ret
	}).(ClassificationJobS3JobDefinitionScopingExcludesOutput)
}

// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
func (o ClassificationJobS3JobDefinitionScopingExcludesPtrOutput) Ands() ClassificationJobS3JobDefinitionScopingExcludesAndArrayOutput {
	return o.ApplyT(func(v *ClassificationJobS3JobDefinitionScopingExcludes) []ClassificationJobS3JobDefinitionScopingExcludesAnd {
		if v == nil {
			return nil
		}
		return v.Ands
	}).(ClassificationJobS3JobDefinitionScopingExcludesAndArrayOutput)
}

type ClassificationJobS3JobDefinitionScopingExcludesAnd struct {
	// A property-based condition that defines a property, operator, and one or more values for including or excluding an object from the job.  (documented below)
	SimpleScopeTerm *ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTerm `pulumi:"simpleScopeTerm"`
	// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an object from the job.  (documented below)
	TagScopeTerm *ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTerm `pulumi:"tagScopeTerm"`
}

// ClassificationJobS3JobDefinitionScopingExcludesAndInput is an input type that accepts ClassificationJobS3JobDefinitionScopingExcludesAndArgs and ClassificationJobS3JobDefinitionScopingExcludesAndOutput values.
// You can construct a concrete instance of `ClassificationJobS3JobDefinitionScopingExcludesAndInput` via:
//
//          ClassificationJobS3JobDefinitionScopingExcludesAndArgs{...}
type ClassificationJobS3JobDefinitionScopingExcludesAndInput interface {
	pulumi.Input

	ToClassificationJobS3JobDefinitionScopingExcludesAndOutput() ClassificationJobS3JobDefinitionScopingExcludesAndOutput
	ToClassificationJobS3JobDefinitionScopingExcludesAndOutputWithContext(context.Context) ClassificationJobS3JobDefinitionScopingExcludesAndOutput
}

type ClassificationJobS3JobDefinitionScopingExcludesAndArgs struct {
	// A property-based condition that defines a property, operator, and one or more values for including or excluding an object from the job.  (documented below)
	SimpleScopeTerm ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrInput `pulumi:"simpleScopeTerm"`
	// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an object from the job.  (documented below)
	TagScopeTerm ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrInput `pulumi:"tagScopeTerm"`
}

func (ClassificationJobS3JobDefinitionScopingExcludesAndArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingExcludesAnd)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionScopingExcludesAndArgs) ToClassificationJobS3JobDefinitionScopingExcludesAndOutput() ClassificationJobS3JobDefinitionScopingExcludesAndOutput {
	return i.ToClassificationJobS3JobDefinitionScopingExcludesAndOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionScopingExcludesAndArgs) ToClassificationJobS3JobDefinitionScopingExcludesAndOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingExcludesAndOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingExcludesAndOutput)
}

// ClassificationJobS3JobDefinitionScopingExcludesAndArrayInput is an input type that accepts ClassificationJobS3JobDefinitionScopingExcludesAndArray and ClassificationJobS3JobDefinitionScopingExcludesAndArrayOutput values.
// You can construct a concrete instance of `ClassificationJobS3JobDefinitionScopingExcludesAndArrayInput` via:
//
//          ClassificationJobS3JobDefinitionScopingExcludesAndArray{ ClassificationJobS3JobDefinitionScopingExcludesAndArgs{...} }
type ClassificationJobS3JobDefinitionScopingExcludesAndArrayInput interface {
	pulumi.Input

	ToClassificationJobS3JobDefinitionScopingExcludesAndArrayOutput() ClassificationJobS3JobDefinitionScopingExcludesAndArrayOutput
	ToClassificationJobS3JobDefinitionScopingExcludesAndArrayOutputWithContext(context.Context) ClassificationJobS3JobDefinitionScopingExcludesAndArrayOutput
}

type ClassificationJobS3JobDefinitionScopingExcludesAndArray []ClassificationJobS3JobDefinitionScopingExcludesAndInput

func (ClassificationJobS3JobDefinitionScopingExcludesAndArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClassificationJobS3JobDefinitionScopingExcludesAnd)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionScopingExcludesAndArray) ToClassificationJobS3JobDefinitionScopingExcludesAndArrayOutput() ClassificationJobS3JobDefinitionScopingExcludesAndArrayOutput {
	return i.ToClassificationJobS3JobDefinitionScopingExcludesAndArrayOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionScopingExcludesAndArray) ToClassificationJobS3JobDefinitionScopingExcludesAndArrayOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingExcludesAndArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingExcludesAndArrayOutput)
}

type ClassificationJobS3JobDefinitionScopingExcludesAndOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionScopingExcludesAndOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingExcludesAnd)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionScopingExcludesAndOutput) ToClassificationJobS3JobDefinitionScopingExcludesAndOutput() ClassificationJobS3JobDefinitionScopingExcludesAndOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingExcludesAndOutput) ToClassificationJobS3JobDefinitionScopingExcludesAndOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingExcludesAndOutput {
	return o
}

// A property-based condition that defines a property, operator, and one or more values for including or excluding an object from the job.  (documented below)
func (o ClassificationJobS3JobDefinitionScopingExcludesAndOutput) SimpleScopeTerm() ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutput {
	return o.ApplyT(func(v ClassificationJobS3JobDefinitionScopingExcludesAnd) *ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTerm {
		return v.SimpleScopeTerm
	}).(ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutput)
}

// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an object from the job.  (documented below)
func (o ClassificationJobS3JobDefinitionScopingExcludesAndOutput) TagScopeTerm() ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutput {
	return o.ApplyT(func(v ClassificationJobS3JobDefinitionScopingExcludesAnd) *ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTerm {
		return v.TagScopeTerm
	}).(ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutput)
}

type ClassificationJobS3JobDefinitionScopingExcludesAndArrayOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionScopingExcludesAndArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClassificationJobS3JobDefinitionScopingExcludesAnd)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionScopingExcludesAndArrayOutput) ToClassificationJobS3JobDefinitionScopingExcludesAndArrayOutput() ClassificationJobS3JobDefinitionScopingExcludesAndArrayOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingExcludesAndArrayOutput) ToClassificationJobS3JobDefinitionScopingExcludesAndArrayOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingExcludesAndArrayOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingExcludesAndArrayOutput) Index(i pulumi.IntInput) ClassificationJobS3JobDefinitionScopingExcludesAndOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClassificationJobS3JobDefinitionScopingExcludesAnd {
		return vs[0].([]ClassificationJobS3JobDefinitionScopingExcludesAnd)[vs[1].(int)]
	}).(ClassificationJobS3JobDefinitionScopingExcludesAndOutput)
}

type ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTerm struct {
	// The operator to use in a condition. Valid values are: `EQ`, `GT`, `GTE`, `LT`, `LTE`, `NE`, `CONTAINS`, `STARTS_WITH`
	Comparator *string `pulumi:"comparator"`
	// The object property to use in the condition.
	Key *string `pulumi:"key"`
	// An array that lists the values to use in the condition.
	Values []string `pulumi:"values"`
}

// ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermInput is an input type that accepts ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermArgs and ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput values.
// You can construct a concrete instance of `ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermInput` via:
//
//          ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermArgs{...}
type ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermInput interface {
	pulumi.Input

	ToClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput() ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput
	ToClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutputWithContext(context.Context) ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput
}

type ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermArgs struct {
	// The operator to use in a condition. Valid values are: `EQ`, `GT`, `GTE`, `LT`, `LTE`, `NE`, `CONTAINS`, `STARTS_WITH`
	Comparator pulumi.StringPtrInput `pulumi:"comparator"`
	// The object property to use in the condition.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// An array that lists the values to use in the condition.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTerm)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermArgs) ToClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput() ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput {
	return i.ToClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermArgs) ToClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput)
}

func (i ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermArgs) ToClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutput() ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutput {
	return i.ToClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermArgs) ToClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput).ToClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutputWithContext(ctx)
}

// ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrInput is an input type that accepts ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermArgs, ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtr and ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutput values.
// You can construct a concrete instance of `ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrInput` via:
//
//          ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermArgs{...}
//
//  or:
//
//          nil
type ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrInput interface {
	pulumi.Input

	ToClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutput() ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutput
	ToClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutputWithContext(context.Context) ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutput
}

type classificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrType ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermArgs

func ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtr(v *ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermArgs) ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrInput {
	return (*classificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrType)(v)
}

func (*classificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTerm)(nil)).Elem()
}

func (i *classificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrType) ToClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutput() ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutput {
	return i.ToClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutputWithContext(context.Background())
}

func (i *classificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrType) ToClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutput)
}

type ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTerm)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput) ToClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput() ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput) ToClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput) ToClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutput() ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutput {
	return o.ToClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutputWithContext(context.Background())
}

func (o ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput) ToClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTerm) *ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTerm {
		return &v
	}).(ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutput)
}

// The operator to use in a condition. Valid values are: `EQ`, `GT`, `GTE`, `LT`, `LTE`, `NE`, `CONTAINS`, `STARTS_WITH`
func (o ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput) Comparator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTerm) *string { return v.Comparator }).(pulumi.StringPtrOutput)
}

// The object property to use in the condition.
func (o ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTerm) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// An array that lists the values to use in the condition.
func (o ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTerm) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTerm)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutput) ToClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutput() ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutput) ToClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutput) Elem() ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput {
	return o.ApplyT(func(v *ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTerm) ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTerm {
		if v != nil {
			return *v
		}
		var ret ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTerm
		return ret
	}).(ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput)
}

// The operator to use in a condition. Valid values are: `EQ`, `GT`, `GTE`, `LT`, `LTE`, `NE`, `CONTAINS`, `STARTS_WITH`
func (o ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutput) Comparator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTerm) *string {
		if v == nil {
			return nil
		}
		return v.Comparator
	}).(pulumi.StringPtrOutput)
}

// The object property to use in the condition.
func (o ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTerm) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// An array that lists the values to use in the condition.
func (o ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTerm) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTerm struct {
	// The operator to use in the condition.
	Comparator *string `pulumi:"comparator"`
	// The tag key to use in the condition.
	Key *string `pulumi:"key"`
	// The tag keys or tag key and value pairs to use in the condition.
	TagValues []ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValue `pulumi:"tagValues"`
	// The type of object to apply the condition to.
	Target *string `pulumi:"target"`
}

// ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermInput is an input type that accepts ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermArgs and ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput values.
// You can construct a concrete instance of `ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermInput` via:
//
//          ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermArgs{...}
type ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermInput interface {
	pulumi.Input

	ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput() ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput
	ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutputWithContext(context.Context) ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput
}

type ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermArgs struct {
	// The operator to use in the condition.
	Comparator pulumi.StringPtrInput `pulumi:"comparator"`
	// The tag key to use in the condition.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The tag keys or tag key and value pairs to use in the condition.
	TagValues ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArrayInput `pulumi:"tagValues"`
	// The type of object to apply the condition to.
	Target pulumi.StringPtrInput `pulumi:"target"`
}

func (ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTerm)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermArgs) ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput() ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput {
	return i.ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermArgs) ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput)
}

func (i ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermArgs) ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutput() ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutput {
	return i.ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermArgs) ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput).ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutputWithContext(ctx)
}

// ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrInput is an input type that accepts ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermArgs, ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtr and ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutput values.
// You can construct a concrete instance of `ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrInput` via:
//
//          ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermArgs{...}
//
//  or:
//
//          nil
type ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrInput interface {
	pulumi.Input

	ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutput() ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutput
	ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutputWithContext(context.Context) ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutput
}

type classificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrType ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermArgs

func ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtr(v *ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermArgs) ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrInput {
	return (*classificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrType)(v)
}

func (*classificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTerm)(nil)).Elem()
}

func (i *classificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrType) ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutput() ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutput {
	return i.ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutputWithContext(context.Background())
}

func (i *classificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrType) ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutput)
}

type ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTerm)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput) ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput() ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput) ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput) ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutput() ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutput {
	return o.ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutputWithContext(context.Background())
}

func (o ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput) ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTerm) *ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTerm {
		return &v
	}).(ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutput)
}

// The operator to use in the condition.
func (o ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput) Comparator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTerm) *string { return v.Comparator }).(pulumi.StringPtrOutput)
}

// The tag key to use in the condition.
func (o ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTerm) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The tag keys or tag key and value pairs to use in the condition.
func (o ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput) TagValues() ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArrayOutput {
	return o.ApplyT(func(v ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTerm) []ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValue {
		return v.TagValues
	}).(ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArrayOutput)
}

// The type of object to apply the condition to.
func (o ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTerm) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTerm)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutput) ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutput() ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutput) ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutput) Elem() ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput {
	return o.ApplyT(func(v *ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTerm) ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTerm {
		if v != nil {
			return *v
		}
		var ret ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTerm
		return ret
	}).(ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput)
}

// The operator to use in the condition.
func (o ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutput) Comparator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTerm) *string {
		if v == nil {
			return nil
		}
		return v.Comparator
	}).(pulumi.StringPtrOutput)
}

// The tag key to use in the condition.
func (o ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTerm) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The tag keys or tag key and value pairs to use in the condition.
func (o ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutput) TagValues() ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArrayOutput {
	return o.ApplyT(func(v *ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTerm) []ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValue {
		if v == nil {
			return nil
		}
		return v.TagValues
	}).(ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArrayOutput)
}

// The type of object to apply the condition to.
func (o ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTerm) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

type ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValue struct {
	// The object property to use in the condition.
	Key   *string `pulumi:"key"`
	Value *string `pulumi:"value"`
}

// ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueInput is an input type that accepts ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArgs and ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutput values.
// You can construct a concrete instance of `ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueInput` via:
//
//          ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArgs{...}
type ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueInput interface {
	pulumi.Input

	ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutput() ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutput
	ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutputWithContext(context.Context) ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutput
}

type ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArgs struct {
	// The object property to use in the condition.
	Key   pulumi.StringPtrInput `pulumi:"key"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValue)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArgs) ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutput() ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutput {
	return i.ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArgs) ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutput)
}

// ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArrayInput is an input type that accepts ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArray and ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArrayOutput values.
// You can construct a concrete instance of `ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArrayInput` via:
//
//          ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArray{ ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArgs{...} }
type ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArrayInput interface {
	pulumi.Input

	ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArrayOutput() ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArrayOutput
	ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArrayOutputWithContext(context.Context) ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArrayOutput
}

type ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArray []ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueInput

func (ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValue)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArray) ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArrayOutput() ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArrayOutput {
	return i.ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArrayOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArray) ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArrayOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArrayOutput)
}

type ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValue)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutput) ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutput() ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutput) ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutput {
	return o
}

// The object property to use in the condition.
func (o ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValue) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValue) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArrayOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValue)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArrayOutput) ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArrayOutput() ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArrayOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArrayOutput) ToClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArrayOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArrayOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArrayOutput) Index(i pulumi.IntInput) ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValue {
		return vs[0].([]ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValue)[vs[1].(int)]
	}).(ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutput)
}

type ClassificationJobS3JobDefinitionScopingIncludes struct {
	// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
	Ands []ClassificationJobS3JobDefinitionScopingIncludesAnd `pulumi:"ands"`
}

// ClassificationJobS3JobDefinitionScopingIncludesInput is an input type that accepts ClassificationJobS3JobDefinitionScopingIncludesArgs and ClassificationJobS3JobDefinitionScopingIncludesOutput values.
// You can construct a concrete instance of `ClassificationJobS3JobDefinitionScopingIncludesInput` via:
//
//          ClassificationJobS3JobDefinitionScopingIncludesArgs{...}
type ClassificationJobS3JobDefinitionScopingIncludesInput interface {
	pulumi.Input

	ToClassificationJobS3JobDefinitionScopingIncludesOutput() ClassificationJobS3JobDefinitionScopingIncludesOutput
	ToClassificationJobS3JobDefinitionScopingIncludesOutputWithContext(context.Context) ClassificationJobS3JobDefinitionScopingIncludesOutput
}

type ClassificationJobS3JobDefinitionScopingIncludesArgs struct {
	// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
	Ands ClassificationJobS3JobDefinitionScopingIncludesAndArrayInput `pulumi:"ands"`
}

func (ClassificationJobS3JobDefinitionScopingIncludesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingIncludes)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionScopingIncludesArgs) ToClassificationJobS3JobDefinitionScopingIncludesOutput() ClassificationJobS3JobDefinitionScopingIncludesOutput {
	return i.ToClassificationJobS3JobDefinitionScopingIncludesOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionScopingIncludesArgs) ToClassificationJobS3JobDefinitionScopingIncludesOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingIncludesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingIncludesOutput)
}

func (i ClassificationJobS3JobDefinitionScopingIncludesArgs) ToClassificationJobS3JobDefinitionScopingIncludesPtrOutput() ClassificationJobS3JobDefinitionScopingIncludesPtrOutput {
	return i.ToClassificationJobS3JobDefinitionScopingIncludesPtrOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionScopingIncludesArgs) ToClassificationJobS3JobDefinitionScopingIncludesPtrOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingIncludesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingIncludesOutput).ToClassificationJobS3JobDefinitionScopingIncludesPtrOutputWithContext(ctx)
}

// ClassificationJobS3JobDefinitionScopingIncludesPtrInput is an input type that accepts ClassificationJobS3JobDefinitionScopingIncludesArgs, ClassificationJobS3JobDefinitionScopingIncludesPtr and ClassificationJobS3JobDefinitionScopingIncludesPtrOutput values.
// You can construct a concrete instance of `ClassificationJobS3JobDefinitionScopingIncludesPtrInput` via:
//
//          ClassificationJobS3JobDefinitionScopingIncludesArgs{...}
//
//  or:
//
//          nil
type ClassificationJobS3JobDefinitionScopingIncludesPtrInput interface {
	pulumi.Input

	ToClassificationJobS3JobDefinitionScopingIncludesPtrOutput() ClassificationJobS3JobDefinitionScopingIncludesPtrOutput
	ToClassificationJobS3JobDefinitionScopingIncludesPtrOutputWithContext(context.Context) ClassificationJobS3JobDefinitionScopingIncludesPtrOutput
}

type classificationJobS3JobDefinitionScopingIncludesPtrType ClassificationJobS3JobDefinitionScopingIncludesArgs

func ClassificationJobS3JobDefinitionScopingIncludesPtr(v *ClassificationJobS3JobDefinitionScopingIncludesArgs) ClassificationJobS3JobDefinitionScopingIncludesPtrInput {
	return (*classificationJobS3JobDefinitionScopingIncludesPtrType)(v)
}

func (*classificationJobS3JobDefinitionScopingIncludesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassificationJobS3JobDefinitionScopingIncludes)(nil)).Elem()
}

func (i *classificationJobS3JobDefinitionScopingIncludesPtrType) ToClassificationJobS3JobDefinitionScopingIncludesPtrOutput() ClassificationJobS3JobDefinitionScopingIncludesPtrOutput {
	return i.ToClassificationJobS3JobDefinitionScopingIncludesPtrOutputWithContext(context.Background())
}

func (i *classificationJobS3JobDefinitionScopingIncludesPtrType) ToClassificationJobS3JobDefinitionScopingIncludesPtrOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingIncludesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingIncludesPtrOutput)
}

type ClassificationJobS3JobDefinitionScopingIncludesOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionScopingIncludesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingIncludes)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionScopingIncludesOutput) ToClassificationJobS3JobDefinitionScopingIncludesOutput() ClassificationJobS3JobDefinitionScopingIncludesOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingIncludesOutput) ToClassificationJobS3JobDefinitionScopingIncludesOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingIncludesOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingIncludesOutput) ToClassificationJobS3JobDefinitionScopingIncludesPtrOutput() ClassificationJobS3JobDefinitionScopingIncludesPtrOutput {
	return o.ToClassificationJobS3JobDefinitionScopingIncludesPtrOutputWithContext(context.Background())
}

func (o ClassificationJobS3JobDefinitionScopingIncludesOutput) ToClassificationJobS3JobDefinitionScopingIncludesPtrOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingIncludesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClassificationJobS3JobDefinitionScopingIncludes) *ClassificationJobS3JobDefinitionScopingIncludes {
		return &v
	}).(ClassificationJobS3JobDefinitionScopingIncludesPtrOutput)
}

// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
func (o ClassificationJobS3JobDefinitionScopingIncludesOutput) Ands() ClassificationJobS3JobDefinitionScopingIncludesAndArrayOutput {
	return o.ApplyT(func(v ClassificationJobS3JobDefinitionScopingIncludes) []ClassificationJobS3JobDefinitionScopingIncludesAnd {
		return v.Ands
	}).(ClassificationJobS3JobDefinitionScopingIncludesAndArrayOutput)
}

type ClassificationJobS3JobDefinitionScopingIncludesPtrOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionScopingIncludesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassificationJobS3JobDefinitionScopingIncludes)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionScopingIncludesPtrOutput) ToClassificationJobS3JobDefinitionScopingIncludesPtrOutput() ClassificationJobS3JobDefinitionScopingIncludesPtrOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingIncludesPtrOutput) ToClassificationJobS3JobDefinitionScopingIncludesPtrOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingIncludesPtrOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingIncludesPtrOutput) Elem() ClassificationJobS3JobDefinitionScopingIncludesOutput {
	return o.ApplyT(func(v *ClassificationJobS3JobDefinitionScopingIncludes) ClassificationJobS3JobDefinitionScopingIncludes {
		if v != nil {
			return *v
		}
		var ret ClassificationJobS3JobDefinitionScopingIncludes
		return ret
	}).(ClassificationJobS3JobDefinitionScopingIncludesOutput)
}

// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
func (o ClassificationJobS3JobDefinitionScopingIncludesPtrOutput) Ands() ClassificationJobS3JobDefinitionScopingIncludesAndArrayOutput {
	return o.ApplyT(func(v *ClassificationJobS3JobDefinitionScopingIncludes) []ClassificationJobS3JobDefinitionScopingIncludesAnd {
		if v == nil {
			return nil
		}
		return v.Ands
	}).(ClassificationJobS3JobDefinitionScopingIncludesAndArrayOutput)
}

type ClassificationJobS3JobDefinitionScopingIncludesAnd struct {
	// A property-based condition that defines a property, operator, and one or more values for including or excluding an object from the job.  (documented below)
	SimpleScopeTerm *ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTerm `pulumi:"simpleScopeTerm"`
	// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an object from the job.  (documented below)
	TagScopeTerm *ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTerm `pulumi:"tagScopeTerm"`
}

// ClassificationJobS3JobDefinitionScopingIncludesAndInput is an input type that accepts ClassificationJobS3JobDefinitionScopingIncludesAndArgs and ClassificationJobS3JobDefinitionScopingIncludesAndOutput values.
// You can construct a concrete instance of `ClassificationJobS3JobDefinitionScopingIncludesAndInput` via:
//
//          ClassificationJobS3JobDefinitionScopingIncludesAndArgs{...}
type ClassificationJobS3JobDefinitionScopingIncludesAndInput interface {
	pulumi.Input

	ToClassificationJobS3JobDefinitionScopingIncludesAndOutput() ClassificationJobS3JobDefinitionScopingIncludesAndOutput
	ToClassificationJobS3JobDefinitionScopingIncludesAndOutputWithContext(context.Context) ClassificationJobS3JobDefinitionScopingIncludesAndOutput
}

type ClassificationJobS3JobDefinitionScopingIncludesAndArgs struct {
	// A property-based condition that defines a property, operator, and one or more values for including or excluding an object from the job.  (documented below)
	SimpleScopeTerm ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrInput `pulumi:"simpleScopeTerm"`
	// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an object from the job.  (documented below)
	TagScopeTerm ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrInput `pulumi:"tagScopeTerm"`
}

func (ClassificationJobS3JobDefinitionScopingIncludesAndArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingIncludesAnd)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionScopingIncludesAndArgs) ToClassificationJobS3JobDefinitionScopingIncludesAndOutput() ClassificationJobS3JobDefinitionScopingIncludesAndOutput {
	return i.ToClassificationJobS3JobDefinitionScopingIncludesAndOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionScopingIncludesAndArgs) ToClassificationJobS3JobDefinitionScopingIncludesAndOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingIncludesAndOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingIncludesAndOutput)
}

// ClassificationJobS3JobDefinitionScopingIncludesAndArrayInput is an input type that accepts ClassificationJobS3JobDefinitionScopingIncludesAndArray and ClassificationJobS3JobDefinitionScopingIncludesAndArrayOutput values.
// You can construct a concrete instance of `ClassificationJobS3JobDefinitionScopingIncludesAndArrayInput` via:
//
//          ClassificationJobS3JobDefinitionScopingIncludesAndArray{ ClassificationJobS3JobDefinitionScopingIncludesAndArgs{...} }
type ClassificationJobS3JobDefinitionScopingIncludesAndArrayInput interface {
	pulumi.Input

	ToClassificationJobS3JobDefinitionScopingIncludesAndArrayOutput() ClassificationJobS3JobDefinitionScopingIncludesAndArrayOutput
	ToClassificationJobS3JobDefinitionScopingIncludesAndArrayOutputWithContext(context.Context) ClassificationJobS3JobDefinitionScopingIncludesAndArrayOutput
}

type ClassificationJobS3JobDefinitionScopingIncludesAndArray []ClassificationJobS3JobDefinitionScopingIncludesAndInput

func (ClassificationJobS3JobDefinitionScopingIncludesAndArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClassificationJobS3JobDefinitionScopingIncludesAnd)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionScopingIncludesAndArray) ToClassificationJobS3JobDefinitionScopingIncludesAndArrayOutput() ClassificationJobS3JobDefinitionScopingIncludesAndArrayOutput {
	return i.ToClassificationJobS3JobDefinitionScopingIncludesAndArrayOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionScopingIncludesAndArray) ToClassificationJobS3JobDefinitionScopingIncludesAndArrayOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingIncludesAndArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingIncludesAndArrayOutput)
}

type ClassificationJobS3JobDefinitionScopingIncludesAndOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionScopingIncludesAndOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingIncludesAnd)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionScopingIncludesAndOutput) ToClassificationJobS3JobDefinitionScopingIncludesAndOutput() ClassificationJobS3JobDefinitionScopingIncludesAndOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingIncludesAndOutput) ToClassificationJobS3JobDefinitionScopingIncludesAndOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingIncludesAndOutput {
	return o
}

// A property-based condition that defines a property, operator, and one or more values for including or excluding an object from the job.  (documented below)
func (o ClassificationJobS3JobDefinitionScopingIncludesAndOutput) SimpleScopeTerm() ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutput {
	return o.ApplyT(func(v ClassificationJobS3JobDefinitionScopingIncludesAnd) *ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTerm {
		return v.SimpleScopeTerm
	}).(ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutput)
}

// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an object from the job.  (documented below)
func (o ClassificationJobS3JobDefinitionScopingIncludesAndOutput) TagScopeTerm() ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutput {
	return o.ApplyT(func(v ClassificationJobS3JobDefinitionScopingIncludesAnd) *ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTerm {
		return v.TagScopeTerm
	}).(ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutput)
}

type ClassificationJobS3JobDefinitionScopingIncludesAndArrayOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionScopingIncludesAndArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClassificationJobS3JobDefinitionScopingIncludesAnd)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionScopingIncludesAndArrayOutput) ToClassificationJobS3JobDefinitionScopingIncludesAndArrayOutput() ClassificationJobS3JobDefinitionScopingIncludesAndArrayOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingIncludesAndArrayOutput) ToClassificationJobS3JobDefinitionScopingIncludesAndArrayOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingIncludesAndArrayOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingIncludesAndArrayOutput) Index(i pulumi.IntInput) ClassificationJobS3JobDefinitionScopingIncludesAndOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClassificationJobS3JobDefinitionScopingIncludesAnd {
		return vs[0].([]ClassificationJobS3JobDefinitionScopingIncludesAnd)[vs[1].(int)]
	}).(ClassificationJobS3JobDefinitionScopingIncludesAndOutput)
}

type ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTerm struct {
	// The operator to use in a condition. Valid values are: `EQ`, `GT`, `GTE`, `LT`, `LTE`, `NE`, `CONTAINS`, `STARTS_WITH`
	Comparator *string `pulumi:"comparator"`
	// The object property to use in the condition.
	Key *string `pulumi:"key"`
	// An array that lists the values to use in the condition.
	Values []string `pulumi:"values"`
}

// ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermInput is an input type that accepts ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermArgs and ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput values.
// You can construct a concrete instance of `ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermInput` via:
//
//          ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermArgs{...}
type ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermInput interface {
	pulumi.Input

	ToClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput() ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput
	ToClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutputWithContext(context.Context) ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput
}

type ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermArgs struct {
	// The operator to use in a condition. Valid values are: `EQ`, `GT`, `GTE`, `LT`, `LTE`, `NE`, `CONTAINS`, `STARTS_WITH`
	Comparator pulumi.StringPtrInput `pulumi:"comparator"`
	// The object property to use in the condition.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// An array that lists the values to use in the condition.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTerm)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermArgs) ToClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput() ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput {
	return i.ToClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermArgs) ToClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput)
}

func (i ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermArgs) ToClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutput() ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutput {
	return i.ToClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermArgs) ToClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput).ToClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutputWithContext(ctx)
}

// ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrInput is an input type that accepts ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermArgs, ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtr and ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutput values.
// You can construct a concrete instance of `ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrInput` via:
//
//          ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermArgs{...}
//
//  or:
//
//          nil
type ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrInput interface {
	pulumi.Input

	ToClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutput() ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutput
	ToClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutputWithContext(context.Context) ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutput
}

type classificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrType ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermArgs

func ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtr(v *ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermArgs) ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrInput {
	return (*classificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrType)(v)
}

func (*classificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTerm)(nil)).Elem()
}

func (i *classificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrType) ToClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutput() ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutput {
	return i.ToClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutputWithContext(context.Background())
}

func (i *classificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrType) ToClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutput)
}

type ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTerm)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput) ToClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput() ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput) ToClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput) ToClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutput() ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutput {
	return o.ToClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutputWithContext(context.Background())
}

func (o ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput) ToClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTerm) *ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTerm {
		return &v
	}).(ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutput)
}

// The operator to use in a condition. Valid values are: `EQ`, `GT`, `GTE`, `LT`, `LTE`, `NE`, `CONTAINS`, `STARTS_WITH`
func (o ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput) Comparator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTerm) *string { return v.Comparator }).(pulumi.StringPtrOutput)
}

// The object property to use in the condition.
func (o ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTerm) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// An array that lists the values to use in the condition.
func (o ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTerm) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTerm)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutput) ToClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutput() ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutput) ToClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutput) Elem() ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput {
	return o.ApplyT(func(v *ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTerm) ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTerm {
		if v != nil {
			return *v
		}
		var ret ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTerm
		return ret
	}).(ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput)
}

// The operator to use in a condition. Valid values are: `EQ`, `GT`, `GTE`, `LT`, `LTE`, `NE`, `CONTAINS`, `STARTS_WITH`
func (o ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutput) Comparator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTerm) *string {
		if v == nil {
			return nil
		}
		return v.Comparator
	}).(pulumi.StringPtrOutput)
}

// The object property to use in the condition.
func (o ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTerm) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// An array that lists the values to use in the condition.
func (o ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTerm) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTerm struct {
	// The operator to use in the condition.
	Comparator *string `pulumi:"comparator"`
	// The tag key to use in the condition.
	Key *string `pulumi:"key"`
	// The tag keys or tag key and value pairs to use in the condition.
	TagValues []ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValue `pulumi:"tagValues"`
	// The type of object to apply the condition to.
	Target *string `pulumi:"target"`
}

// ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermInput is an input type that accepts ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermArgs and ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput values.
// You can construct a concrete instance of `ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermInput` via:
//
//          ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermArgs{...}
type ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermInput interface {
	pulumi.Input

	ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput() ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput
	ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutputWithContext(context.Context) ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput
}

type ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermArgs struct {
	// The operator to use in the condition.
	Comparator pulumi.StringPtrInput `pulumi:"comparator"`
	// The tag key to use in the condition.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The tag keys or tag key and value pairs to use in the condition.
	TagValues ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArrayInput `pulumi:"tagValues"`
	// The type of object to apply the condition to.
	Target pulumi.StringPtrInput `pulumi:"target"`
}

func (ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTerm)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermArgs) ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput() ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput {
	return i.ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermArgs) ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput)
}

func (i ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermArgs) ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutput() ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutput {
	return i.ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermArgs) ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput).ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutputWithContext(ctx)
}

// ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrInput is an input type that accepts ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermArgs, ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtr and ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutput values.
// You can construct a concrete instance of `ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrInput` via:
//
//          ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermArgs{...}
//
//  or:
//
//          nil
type ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrInput interface {
	pulumi.Input

	ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutput() ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutput
	ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutputWithContext(context.Context) ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutput
}

type classificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrType ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermArgs

func ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtr(v *ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermArgs) ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrInput {
	return (*classificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrType)(v)
}

func (*classificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTerm)(nil)).Elem()
}

func (i *classificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrType) ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutput() ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutput {
	return i.ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutputWithContext(context.Background())
}

func (i *classificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrType) ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutput)
}

type ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTerm)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput) ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput() ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput) ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput) ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutput() ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutput {
	return o.ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutputWithContext(context.Background())
}

func (o ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput) ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTerm) *ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTerm {
		return &v
	}).(ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutput)
}

// The operator to use in the condition.
func (o ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput) Comparator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTerm) *string { return v.Comparator }).(pulumi.StringPtrOutput)
}

// The tag key to use in the condition.
func (o ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTerm) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The tag keys or tag key and value pairs to use in the condition.
func (o ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput) TagValues() ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArrayOutput {
	return o.ApplyT(func(v ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTerm) []ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValue {
		return v.TagValues
	}).(ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArrayOutput)
}

// The type of object to apply the condition to.
func (o ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTerm) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTerm)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutput) ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutput() ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutput) ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutput) Elem() ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput {
	return o.ApplyT(func(v *ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTerm) ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTerm {
		if v != nil {
			return *v
		}
		var ret ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTerm
		return ret
	}).(ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput)
}

// The operator to use in the condition.
func (o ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutput) Comparator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTerm) *string {
		if v == nil {
			return nil
		}
		return v.Comparator
	}).(pulumi.StringPtrOutput)
}

// The tag key to use in the condition.
func (o ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTerm) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The tag keys or tag key and value pairs to use in the condition.
func (o ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutput) TagValues() ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArrayOutput {
	return o.ApplyT(func(v *ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTerm) []ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValue {
		if v == nil {
			return nil
		}
		return v.TagValues
	}).(ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArrayOutput)
}

// The type of object to apply the condition to.
func (o ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTerm) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

type ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValue struct {
	// The object property to use in the condition.
	Key   *string `pulumi:"key"`
	Value *string `pulumi:"value"`
}

// ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueInput is an input type that accepts ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArgs and ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutput values.
// You can construct a concrete instance of `ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueInput` via:
//
//          ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArgs{...}
type ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueInput interface {
	pulumi.Input

	ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutput() ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutput
	ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutputWithContext(context.Context) ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutput
}

type ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArgs struct {
	// The object property to use in the condition.
	Key   pulumi.StringPtrInput `pulumi:"key"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValue)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArgs) ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutput() ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutput {
	return i.ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArgs) ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutput)
}

// ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArrayInput is an input type that accepts ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArray and ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArrayOutput values.
// You can construct a concrete instance of `ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArrayInput` via:
//
//          ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArray{ ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArgs{...} }
type ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArrayInput interface {
	pulumi.Input

	ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArrayOutput() ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArrayOutput
	ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArrayOutputWithContext(context.Context) ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArrayOutput
}

type ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArray []ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueInput

func (ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValue)(nil)).Elem()
}

func (i ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArray) ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArrayOutput() ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArrayOutput {
	return i.ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArrayOutputWithContext(context.Background())
}

func (i ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArray) ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArrayOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArrayOutput)
}

type ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValue)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutput) ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutput() ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutput) ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutput {
	return o
}

// The object property to use in the condition.
func (o ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValue) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValue) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArrayOutput struct{ *pulumi.OutputState }

func (ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValue)(nil)).Elem()
}

func (o ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArrayOutput) ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArrayOutput() ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArrayOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArrayOutput) ToClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArrayOutputWithContext(ctx context.Context) ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArrayOutput {
	return o
}

func (o ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArrayOutput) Index(i pulumi.IntInput) ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValue {
		return vs[0].([]ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValue)[vs[1].(int)]
	}).(ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutput)
}

type ClassificationJobScheduleFrequency struct {
	// Specifies a daily recurrence pattern for running the job.
	DailySchedule *bool `pulumi:"dailySchedule"`
	// Specifies a monthly recurrence pattern for running the job.
	MonthlySchedule *int `pulumi:"monthlySchedule"`
	// Specifies a weekly recurrence pattern for running the job.
	WeeklySchedule *string `pulumi:"weeklySchedule"`
}

// ClassificationJobScheduleFrequencyInput is an input type that accepts ClassificationJobScheduleFrequencyArgs and ClassificationJobScheduleFrequencyOutput values.
// You can construct a concrete instance of `ClassificationJobScheduleFrequencyInput` via:
//
//          ClassificationJobScheduleFrequencyArgs{...}
type ClassificationJobScheduleFrequencyInput interface {
	pulumi.Input

	ToClassificationJobScheduleFrequencyOutput() ClassificationJobScheduleFrequencyOutput
	ToClassificationJobScheduleFrequencyOutputWithContext(context.Context) ClassificationJobScheduleFrequencyOutput
}

type ClassificationJobScheduleFrequencyArgs struct {
	// Specifies a daily recurrence pattern for running the job.
	DailySchedule pulumi.BoolPtrInput `pulumi:"dailySchedule"`
	// Specifies a monthly recurrence pattern for running the job.
	MonthlySchedule pulumi.IntPtrInput `pulumi:"monthlySchedule"`
	// Specifies a weekly recurrence pattern for running the job.
	WeeklySchedule pulumi.StringPtrInput `pulumi:"weeklySchedule"`
}

func (ClassificationJobScheduleFrequencyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobScheduleFrequency)(nil)).Elem()
}

func (i ClassificationJobScheduleFrequencyArgs) ToClassificationJobScheduleFrequencyOutput() ClassificationJobScheduleFrequencyOutput {
	return i.ToClassificationJobScheduleFrequencyOutputWithContext(context.Background())
}

func (i ClassificationJobScheduleFrequencyArgs) ToClassificationJobScheduleFrequencyOutputWithContext(ctx context.Context) ClassificationJobScheduleFrequencyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobScheduleFrequencyOutput)
}

func (i ClassificationJobScheduleFrequencyArgs) ToClassificationJobScheduleFrequencyPtrOutput() ClassificationJobScheduleFrequencyPtrOutput {
	return i.ToClassificationJobScheduleFrequencyPtrOutputWithContext(context.Background())
}

func (i ClassificationJobScheduleFrequencyArgs) ToClassificationJobScheduleFrequencyPtrOutputWithContext(ctx context.Context) ClassificationJobScheduleFrequencyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobScheduleFrequencyOutput).ToClassificationJobScheduleFrequencyPtrOutputWithContext(ctx)
}

// ClassificationJobScheduleFrequencyPtrInput is an input type that accepts ClassificationJobScheduleFrequencyArgs, ClassificationJobScheduleFrequencyPtr and ClassificationJobScheduleFrequencyPtrOutput values.
// You can construct a concrete instance of `ClassificationJobScheduleFrequencyPtrInput` via:
//
//          ClassificationJobScheduleFrequencyArgs{...}
//
//  or:
//
//          nil
type ClassificationJobScheduleFrequencyPtrInput interface {
	pulumi.Input

	ToClassificationJobScheduleFrequencyPtrOutput() ClassificationJobScheduleFrequencyPtrOutput
	ToClassificationJobScheduleFrequencyPtrOutputWithContext(context.Context) ClassificationJobScheduleFrequencyPtrOutput
}

type classificationJobScheduleFrequencyPtrType ClassificationJobScheduleFrequencyArgs

func ClassificationJobScheduleFrequencyPtr(v *ClassificationJobScheduleFrequencyArgs) ClassificationJobScheduleFrequencyPtrInput {
	return (*classificationJobScheduleFrequencyPtrType)(v)
}

func (*classificationJobScheduleFrequencyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassificationJobScheduleFrequency)(nil)).Elem()
}

func (i *classificationJobScheduleFrequencyPtrType) ToClassificationJobScheduleFrequencyPtrOutput() ClassificationJobScheduleFrequencyPtrOutput {
	return i.ToClassificationJobScheduleFrequencyPtrOutputWithContext(context.Background())
}

func (i *classificationJobScheduleFrequencyPtrType) ToClassificationJobScheduleFrequencyPtrOutputWithContext(ctx context.Context) ClassificationJobScheduleFrequencyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobScheduleFrequencyPtrOutput)
}

type ClassificationJobScheduleFrequencyOutput struct{ *pulumi.OutputState }

func (ClassificationJobScheduleFrequencyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobScheduleFrequency)(nil)).Elem()
}

func (o ClassificationJobScheduleFrequencyOutput) ToClassificationJobScheduleFrequencyOutput() ClassificationJobScheduleFrequencyOutput {
	return o
}

func (o ClassificationJobScheduleFrequencyOutput) ToClassificationJobScheduleFrequencyOutputWithContext(ctx context.Context) ClassificationJobScheduleFrequencyOutput {
	return o
}

func (o ClassificationJobScheduleFrequencyOutput) ToClassificationJobScheduleFrequencyPtrOutput() ClassificationJobScheduleFrequencyPtrOutput {
	return o.ToClassificationJobScheduleFrequencyPtrOutputWithContext(context.Background())
}

func (o ClassificationJobScheduleFrequencyOutput) ToClassificationJobScheduleFrequencyPtrOutputWithContext(ctx context.Context) ClassificationJobScheduleFrequencyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClassificationJobScheduleFrequency) *ClassificationJobScheduleFrequency {
		return &v
	}).(ClassificationJobScheduleFrequencyPtrOutput)
}

// Specifies a daily recurrence pattern for running the job.
func (o ClassificationJobScheduleFrequencyOutput) DailySchedule() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClassificationJobScheduleFrequency) *bool { return v.DailySchedule }).(pulumi.BoolPtrOutput)
}

// Specifies a monthly recurrence pattern for running the job.
func (o ClassificationJobScheduleFrequencyOutput) MonthlySchedule() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClassificationJobScheduleFrequency) *int { return v.MonthlySchedule }).(pulumi.IntPtrOutput)
}

// Specifies a weekly recurrence pattern for running the job.
func (o ClassificationJobScheduleFrequencyOutput) WeeklySchedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassificationJobScheduleFrequency) *string { return v.WeeklySchedule }).(pulumi.StringPtrOutput)
}

type ClassificationJobScheduleFrequencyPtrOutput struct{ *pulumi.OutputState }

func (ClassificationJobScheduleFrequencyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassificationJobScheduleFrequency)(nil)).Elem()
}

func (o ClassificationJobScheduleFrequencyPtrOutput) ToClassificationJobScheduleFrequencyPtrOutput() ClassificationJobScheduleFrequencyPtrOutput {
	return o
}

func (o ClassificationJobScheduleFrequencyPtrOutput) ToClassificationJobScheduleFrequencyPtrOutputWithContext(ctx context.Context) ClassificationJobScheduleFrequencyPtrOutput {
	return o
}

func (o ClassificationJobScheduleFrequencyPtrOutput) Elem() ClassificationJobScheduleFrequencyOutput {
	return o.ApplyT(func(v *ClassificationJobScheduleFrequency) ClassificationJobScheduleFrequency {
		if v != nil {
			return *v
		}
		var ret ClassificationJobScheduleFrequency
		return ret
	}).(ClassificationJobScheduleFrequencyOutput)
}

// Specifies a daily recurrence pattern for running the job.
func (o ClassificationJobScheduleFrequencyPtrOutput) DailySchedule() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClassificationJobScheduleFrequency) *bool {
		if v == nil {
			return nil
		}
		return v.DailySchedule
	}).(pulumi.BoolPtrOutput)
}

// Specifies a monthly recurrence pattern for running the job.
func (o ClassificationJobScheduleFrequencyPtrOutput) MonthlySchedule() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClassificationJobScheduleFrequency) *int {
		if v == nil {
			return nil
		}
		return v.MonthlySchedule
	}).(pulumi.IntPtrOutput)
}

// Specifies a weekly recurrence pattern for running the job.
func (o ClassificationJobScheduleFrequencyPtrOutput) WeeklySchedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassificationJobScheduleFrequency) *string {
		if v == nil {
			return nil
		}
		return v.WeeklySchedule
	}).(pulumi.StringPtrOutput)
}

type ClassificationJobUserPausedDetail struct {
	JobExpiresAt                        *string `pulumi:"jobExpiresAt"`
	JobImminentExpirationHealthEventArn *string `pulumi:"jobImminentExpirationHealthEventArn"`
	JobPausedAt                         *string `pulumi:"jobPausedAt"`
}

// ClassificationJobUserPausedDetailInput is an input type that accepts ClassificationJobUserPausedDetailArgs and ClassificationJobUserPausedDetailOutput values.
// You can construct a concrete instance of `ClassificationJobUserPausedDetailInput` via:
//
//          ClassificationJobUserPausedDetailArgs{...}
type ClassificationJobUserPausedDetailInput interface {
	pulumi.Input

	ToClassificationJobUserPausedDetailOutput() ClassificationJobUserPausedDetailOutput
	ToClassificationJobUserPausedDetailOutputWithContext(context.Context) ClassificationJobUserPausedDetailOutput
}

type ClassificationJobUserPausedDetailArgs struct {
	JobExpiresAt                        pulumi.StringPtrInput `pulumi:"jobExpiresAt"`
	JobImminentExpirationHealthEventArn pulumi.StringPtrInput `pulumi:"jobImminentExpirationHealthEventArn"`
	JobPausedAt                         pulumi.StringPtrInput `pulumi:"jobPausedAt"`
}

func (ClassificationJobUserPausedDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobUserPausedDetail)(nil)).Elem()
}

func (i ClassificationJobUserPausedDetailArgs) ToClassificationJobUserPausedDetailOutput() ClassificationJobUserPausedDetailOutput {
	return i.ToClassificationJobUserPausedDetailOutputWithContext(context.Background())
}

func (i ClassificationJobUserPausedDetailArgs) ToClassificationJobUserPausedDetailOutputWithContext(ctx context.Context) ClassificationJobUserPausedDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobUserPausedDetailOutput)
}

// ClassificationJobUserPausedDetailArrayInput is an input type that accepts ClassificationJobUserPausedDetailArray and ClassificationJobUserPausedDetailArrayOutput values.
// You can construct a concrete instance of `ClassificationJobUserPausedDetailArrayInput` via:
//
//          ClassificationJobUserPausedDetailArray{ ClassificationJobUserPausedDetailArgs{...} }
type ClassificationJobUserPausedDetailArrayInput interface {
	pulumi.Input

	ToClassificationJobUserPausedDetailArrayOutput() ClassificationJobUserPausedDetailArrayOutput
	ToClassificationJobUserPausedDetailArrayOutputWithContext(context.Context) ClassificationJobUserPausedDetailArrayOutput
}

type ClassificationJobUserPausedDetailArray []ClassificationJobUserPausedDetailInput

func (ClassificationJobUserPausedDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClassificationJobUserPausedDetail)(nil)).Elem()
}

func (i ClassificationJobUserPausedDetailArray) ToClassificationJobUserPausedDetailArrayOutput() ClassificationJobUserPausedDetailArrayOutput {
	return i.ToClassificationJobUserPausedDetailArrayOutputWithContext(context.Background())
}

func (i ClassificationJobUserPausedDetailArray) ToClassificationJobUserPausedDetailArrayOutputWithContext(ctx context.Context) ClassificationJobUserPausedDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobUserPausedDetailArrayOutput)
}

type ClassificationJobUserPausedDetailOutput struct{ *pulumi.OutputState }

func (ClassificationJobUserPausedDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJobUserPausedDetail)(nil)).Elem()
}

func (o ClassificationJobUserPausedDetailOutput) ToClassificationJobUserPausedDetailOutput() ClassificationJobUserPausedDetailOutput {
	return o
}

func (o ClassificationJobUserPausedDetailOutput) ToClassificationJobUserPausedDetailOutputWithContext(ctx context.Context) ClassificationJobUserPausedDetailOutput {
	return o
}

func (o ClassificationJobUserPausedDetailOutput) JobExpiresAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassificationJobUserPausedDetail) *string { return v.JobExpiresAt }).(pulumi.StringPtrOutput)
}

func (o ClassificationJobUserPausedDetailOutput) JobImminentExpirationHealthEventArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassificationJobUserPausedDetail) *string { return v.JobImminentExpirationHealthEventArn }).(pulumi.StringPtrOutput)
}

func (o ClassificationJobUserPausedDetailOutput) JobPausedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassificationJobUserPausedDetail) *string { return v.JobPausedAt }).(pulumi.StringPtrOutput)
}

type ClassificationJobUserPausedDetailArrayOutput struct{ *pulumi.OutputState }

func (ClassificationJobUserPausedDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClassificationJobUserPausedDetail)(nil)).Elem()
}

func (o ClassificationJobUserPausedDetailArrayOutput) ToClassificationJobUserPausedDetailArrayOutput() ClassificationJobUserPausedDetailArrayOutput {
	return o
}

func (o ClassificationJobUserPausedDetailArrayOutput) ToClassificationJobUserPausedDetailArrayOutputWithContext(ctx context.Context) ClassificationJobUserPausedDetailArrayOutput {
	return o
}

func (o ClassificationJobUserPausedDetailArrayOutput) Index(i pulumi.IntInput) ClassificationJobUserPausedDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClassificationJobUserPausedDetail {
		return vs[0].([]ClassificationJobUserPausedDetail)[vs[1].(int)]
	}).(ClassificationJobUserPausedDetailOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClassificationJobS3JobDefinitionInput)(nil)).Elem(), ClassificationJobS3JobDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassificationJobS3JobDefinitionPtrInput)(nil)).Elem(), ClassificationJobS3JobDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassificationJobS3JobDefinitionBucketDefinitionInput)(nil)).Elem(), ClassificationJobS3JobDefinitionBucketDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassificationJobS3JobDefinitionBucketDefinitionArrayInput)(nil)).Elem(), ClassificationJobS3JobDefinitionBucketDefinitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingInput)(nil)).Elem(), ClassificationJobS3JobDefinitionScopingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingPtrInput)(nil)).Elem(), ClassificationJobS3JobDefinitionScopingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingExcludesInput)(nil)).Elem(), ClassificationJobS3JobDefinitionScopingExcludesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingExcludesPtrInput)(nil)).Elem(), ClassificationJobS3JobDefinitionScopingExcludesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingExcludesAndInput)(nil)).Elem(), ClassificationJobS3JobDefinitionScopingExcludesAndArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingExcludesAndArrayInput)(nil)).Elem(), ClassificationJobS3JobDefinitionScopingExcludesAndArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermInput)(nil)).Elem(), ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrInput)(nil)).Elem(), ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermInput)(nil)).Elem(), ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrInput)(nil)).Elem(), ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueInput)(nil)).Elem(), ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArrayInput)(nil)).Elem(), ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingIncludesInput)(nil)).Elem(), ClassificationJobS3JobDefinitionScopingIncludesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingIncludesPtrInput)(nil)).Elem(), ClassificationJobS3JobDefinitionScopingIncludesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingIncludesAndInput)(nil)).Elem(), ClassificationJobS3JobDefinitionScopingIncludesAndArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingIncludesAndArrayInput)(nil)).Elem(), ClassificationJobS3JobDefinitionScopingIncludesAndArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermInput)(nil)).Elem(), ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrInput)(nil)).Elem(), ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermInput)(nil)).Elem(), ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrInput)(nil)).Elem(), ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueInput)(nil)).Elem(), ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArrayInput)(nil)).Elem(), ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassificationJobScheduleFrequencyInput)(nil)).Elem(), ClassificationJobScheduleFrequencyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassificationJobScheduleFrequencyPtrInput)(nil)).Elem(), ClassificationJobScheduleFrequencyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassificationJobUserPausedDetailInput)(nil)).Elem(), ClassificationJobUserPausedDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassificationJobUserPausedDetailArrayInput)(nil)).Elem(), ClassificationJobUserPausedDetailArray{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionPtrOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionBucketDefinitionOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionBucketDefinitionArrayOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionScopingOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionScopingPtrOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionScopingExcludesOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionScopingExcludesPtrOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionScopingExcludesAndOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionScopingExcludesAndArrayOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionScopingExcludesAndSimpleScopeTermPtrOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermPtrOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionScopingExcludesAndTagScopeTermTagValueArrayOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionScopingIncludesOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionScopingIncludesPtrOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionScopingIncludesAndOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionScopingIncludesAndArrayOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionScopingIncludesAndSimpleScopeTermPtrOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermPtrOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueOutput{})
	pulumi.RegisterOutputType(ClassificationJobS3JobDefinitionScopingIncludesAndTagScopeTermTagValueArrayOutput{})
	pulumi.RegisterOutputType(ClassificationJobScheduleFrequencyOutput{})
	pulumi.RegisterOutputType(ClassificationJobScheduleFrequencyPtrOutput{})
	pulumi.RegisterOutputType(ClassificationJobUserPausedDetailOutput{})
	pulumi.RegisterOutputType(ClassificationJobUserPausedDetailArrayOutput{})
}
