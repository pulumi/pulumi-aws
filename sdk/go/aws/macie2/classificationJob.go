// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package macie2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ClassificationJob struct {
	pulumi.CustomResourceState

	CreatedAt               pulumi.StringOutput                          `pulumi:"createdAt"`
	CustomDataIdentifierIds pulumi.StringArrayOutput                     `pulumi:"customDataIdentifierIds"`
	Description             pulumi.StringOutput                          `pulumi:"description"`
	InitialRun              pulumi.BoolPtrOutput                         `pulumi:"initialRun"`
	JobArn                  pulumi.StringOutput                          `pulumi:"jobArn"`
	JobId                   pulumi.StringOutput                          `pulumi:"jobId"`
	JobStatus               pulumi.StringOutput                          `pulumi:"jobStatus"`
	JobType                 pulumi.StringOutput                          `pulumi:"jobType"`
	Name                    pulumi.StringOutput                          `pulumi:"name"`
	NamePrefix              pulumi.StringOutput                          `pulumi:"namePrefix"`
	S3JobDefinition         ClassificationJobS3JobDefinitionOutput       `pulumi:"s3JobDefinition"`
	SamplingPercentage      pulumi.IntOutput                             `pulumi:"samplingPercentage"`
	ScheduleFrequency       ClassificationJobScheduleFrequencyOutput     `pulumi:"scheduleFrequency"`
	Tags                    pulumi.StringMapOutput                       `pulumi:"tags"`
	TagsAll                 pulumi.StringMapOutput                       `pulumi:"tagsAll"`
	UserPausedDetails       ClassificationJobUserPausedDetailArrayOutput `pulumi:"userPausedDetails"`
}

// NewClassificationJob registers a new resource with the given unique name, arguments, and options.
func NewClassificationJob(ctx *pulumi.Context,
	name string, args *ClassificationJobArgs, opts ...pulumi.ResourceOption) (*ClassificationJob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.JobType == nil {
		return nil, errors.New("invalid value for required argument 'JobType'")
	}
	if args.S3JobDefinition == nil {
		return nil, errors.New("invalid value for required argument 'S3JobDefinition'")
	}
	var resource ClassificationJob
	err := ctx.RegisterResource("aws:macie2/classificationJob:ClassificationJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClassificationJob gets an existing ClassificationJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClassificationJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClassificationJobState, opts ...pulumi.ResourceOption) (*ClassificationJob, error) {
	var resource ClassificationJob
	err := ctx.ReadResource("aws:macie2/classificationJob:ClassificationJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClassificationJob resources.
type classificationJobState struct {
	CreatedAt               *string                             `pulumi:"createdAt"`
	CustomDataIdentifierIds []string                            `pulumi:"customDataIdentifierIds"`
	Description             *string                             `pulumi:"description"`
	InitialRun              *bool                               `pulumi:"initialRun"`
	JobArn                  *string                             `pulumi:"jobArn"`
	JobId                   *string                             `pulumi:"jobId"`
	JobStatus               *string                             `pulumi:"jobStatus"`
	JobType                 *string                             `pulumi:"jobType"`
	Name                    *string                             `pulumi:"name"`
	NamePrefix              *string                             `pulumi:"namePrefix"`
	S3JobDefinition         *ClassificationJobS3JobDefinition   `pulumi:"s3JobDefinition"`
	SamplingPercentage      *int                                `pulumi:"samplingPercentage"`
	ScheduleFrequency       *ClassificationJobScheduleFrequency `pulumi:"scheduleFrequency"`
	Tags                    map[string]string                   `pulumi:"tags"`
	TagsAll                 map[string]string                   `pulumi:"tagsAll"`
	UserPausedDetails       []ClassificationJobUserPausedDetail `pulumi:"userPausedDetails"`
}

type ClassificationJobState struct {
	CreatedAt               pulumi.StringPtrInput
	CustomDataIdentifierIds pulumi.StringArrayInput
	Description             pulumi.StringPtrInput
	InitialRun              pulumi.BoolPtrInput
	JobArn                  pulumi.StringPtrInput
	JobId                   pulumi.StringPtrInput
	JobStatus               pulumi.StringPtrInput
	JobType                 pulumi.StringPtrInput
	Name                    pulumi.StringPtrInput
	NamePrefix              pulumi.StringPtrInput
	S3JobDefinition         ClassificationJobS3JobDefinitionPtrInput
	SamplingPercentage      pulumi.IntPtrInput
	ScheduleFrequency       ClassificationJobScheduleFrequencyPtrInput
	Tags                    pulumi.StringMapInput
	TagsAll                 pulumi.StringMapInput
	UserPausedDetails       ClassificationJobUserPausedDetailArrayInput
}

func (ClassificationJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*classificationJobState)(nil)).Elem()
}

type classificationJobArgs struct {
	CustomDataIdentifierIds []string                            `pulumi:"customDataIdentifierIds"`
	Description             *string                             `pulumi:"description"`
	InitialRun              *bool                               `pulumi:"initialRun"`
	JobStatus               *string                             `pulumi:"jobStatus"`
	JobType                 string                              `pulumi:"jobType"`
	Name                    *string                             `pulumi:"name"`
	NamePrefix              *string                             `pulumi:"namePrefix"`
	S3JobDefinition         ClassificationJobS3JobDefinition    `pulumi:"s3JobDefinition"`
	SamplingPercentage      *int                                `pulumi:"samplingPercentage"`
	ScheduleFrequency       *ClassificationJobScheduleFrequency `pulumi:"scheduleFrequency"`
	Tags                    map[string]string                   `pulumi:"tags"`
}

// The set of arguments for constructing a ClassificationJob resource.
type ClassificationJobArgs struct {
	CustomDataIdentifierIds pulumi.StringArrayInput
	Description             pulumi.StringPtrInput
	InitialRun              pulumi.BoolPtrInput
	JobStatus               pulumi.StringPtrInput
	JobType                 pulumi.StringInput
	Name                    pulumi.StringPtrInput
	NamePrefix              pulumi.StringPtrInput
	S3JobDefinition         ClassificationJobS3JobDefinitionInput
	SamplingPercentage      pulumi.IntPtrInput
	ScheduleFrequency       ClassificationJobScheduleFrequencyPtrInput
	Tags                    pulumi.StringMapInput
}

func (ClassificationJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*classificationJobArgs)(nil)).Elem()
}

type ClassificationJobInput interface {
	pulumi.Input

	ToClassificationJobOutput() ClassificationJobOutput
	ToClassificationJobOutputWithContext(ctx context.Context) ClassificationJobOutput
}

func (*ClassificationJob) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassificationJob)(nil)).Elem()
}

func (i *ClassificationJob) ToClassificationJobOutput() ClassificationJobOutput {
	return i.ToClassificationJobOutputWithContext(context.Background())
}

func (i *ClassificationJob) ToClassificationJobOutputWithContext(ctx context.Context) ClassificationJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobOutput)
}

// ClassificationJobArrayInput is an input type that accepts ClassificationJobArray and ClassificationJobArrayOutput values.
// You can construct a concrete instance of `ClassificationJobArrayInput` via:
//
//	ClassificationJobArray{ ClassificationJobArgs{...} }
type ClassificationJobArrayInput interface {
	pulumi.Input

	ToClassificationJobArrayOutput() ClassificationJobArrayOutput
	ToClassificationJobArrayOutputWithContext(context.Context) ClassificationJobArrayOutput
}

type ClassificationJobArray []ClassificationJobInput

func (ClassificationJobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClassificationJob)(nil)).Elem()
}

func (i ClassificationJobArray) ToClassificationJobArrayOutput() ClassificationJobArrayOutput {
	return i.ToClassificationJobArrayOutputWithContext(context.Background())
}

func (i ClassificationJobArray) ToClassificationJobArrayOutputWithContext(ctx context.Context) ClassificationJobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobArrayOutput)
}

// ClassificationJobMapInput is an input type that accepts ClassificationJobMap and ClassificationJobMapOutput values.
// You can construct a concrete instance of `ClassificationJobMapInput` via:
//
//	ClassificationJobMap{ "key": ClassificationJobArgs{...} }
type ClassificationJobMapInput interface {
	pulumi.Input

	ToClassificationJobMapOutput() ClassificationJobMapOutput
	ToClassificationJobMapOutputWithContext(context.Context) ClassificationJobMapOutput
}

type ClassificationJobMap map[string]ClassificationJobInput

func (ClassificationJobMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClassificationJob)(nil)).Elem()
}

func (i ClassificationJobMap) ToClassificationJobMapOutput() ClassificationJobMapOutput {
	return i.ToClassificationJobMapOutputWithContext(context.Background())
}

func (i ClassificationJobMap) ToClassificationJobMapOutputWithContext(ctx context.Context) ClassificationJobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationJobMapOutput)
}

type ClassificationJobOutput struct{ *pulumi.OutputState }

func (ClassificationJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassificationJob)(nil)).Elem()
}

func (o ClassificationJobOutput) ToClassificationJobOutput() ClassificationJobOutput {
	return o
}

func (o ClassificationJobOutput) ToClassificationJobOutputWithContext(ctx context.Context) ClassificationJobOutput {
	return o
}

func (o ClassificationJobOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ClassificationJob) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o ClassificationJobOutput) CustomDataIdentifierIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClassificationJob) pulumi.StringArrayOutput { return v.CustomDataIdentifierIds }).(pulumi.StringArrayOutput)
}

func (o ClassificationJobOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ClassificationJob) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o ClassificationJobOutput) InitialRun() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClassificationJob) pulumi.BoolPtrOutput { return v.InitialRun }).(pulumi.BoolPtrOutput)
}

func (o ClassificationJobOutput) JobArn() pulumi.StringOutput {
	return o.ApplyT(func(v *ClassificationJob) pulumi.StringOutput { return v.JobArn }).(pulumi.StringOutput)
}

func (o ClassificationJobOutput) JobId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClassificationJob) pulumi.StringOutput { return v.JobId }).(pulumi.StringOutput)
}

func (o ClassificationJobOutput) JobStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *ClassificationJob) pulumi.StringOutput { return v.JobStatus }).(pulumi.StringOutput)
}

func (o ClassificationJobOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v *ClassificationJob) pulumi.StringOutput { return v.JobType }).(pulumi.StringOutput)
}

func (o ClassificationJobOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ClassificationJob) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ClassificationJobOutput) NamePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *ClassificationJob) pulumi.StringOutput { return v.NamePrefix }).(pulumi.StringOutput)
}

func (o ClassificationJobOutput) S3JobDefinition() ClassificationJobS3JobDefinitionOutput {
	return o.ApplyT(func(v *ClassificationJob) ClassificationJobS3JobDefinitionOutput { return v.S3JobDefinition }).(ClassificationJobS3JobDefinitionOutput)
}

func (o ClassificationJobOutput) SamplingPercentage() pulumi.IntOutput {
	return o.ApplyT(func(v *ClassificationJob) pulumi.IntOutput { return v.SamplingPercentage }).(pulumi.IntOutput)
}

func (o ClassificationJobOutput) ScheduleFrequency() ClassificationJobScheduleFrequencyOutput {
	return o.ApplyT(func(v *ClassificationJob) ClassificationJobScheduleFrequencyOutput { return v.ScheduleFrequency }).(ClassificationJobScheduleFrequencyOutput)
}

func (o ClassificationJobOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ClassificationJob) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ClassificationJobOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ClassificationJob) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o ClassificationJobOutput) UserPausedDetails() ClassificationJobUserPausedDetailArrayOutput {
	return o.ApplyT(func(v *ClassificationJob) ClassificationJobUserPausedDetailArrayOutput { return v.UserPausedDetails }).(ClassificationJobUserPausedDetailArrayOutput)
}

type ClassificationJobArrayOutput struct{ *pulumi.OutputState }

func (ClassificationJobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClassificationJob)(nil)).Elem()
}

func (o ClassificationJobArrayOutput) ToClassificationJobArrayOutput() ClassificationJobArrayOutput {
	return o
}

func (o ClassificationJobArrayOutput) ToClassificationJobArrayOutputWithContext(ctx context.Context) ClassificationJobArrayOutput {
	return o
}

func (o ClassificationJobArrayOutput) Index(i pulumi.IntInput) ClassificationJobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClassificationJob {
		return vs[0].([]*ClassificationJob)[vs[1].(int)]
	}).(ClassificationJobOutput)
}

type ClassificationJobMapOutput struct{ *pulumi.OutputState }

func (ClassificationJobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClassificationJob)(nil)).Elem()
}

func (o ClassificationJobMapOutput) ToClassificationJobMapOutput() ClassificationJobMapOutput {
	return o
}

func (o ClassificationJobMapOutput) ToClassificationJobMapOutputWithContext(ctx context.Context) ClassificationJobMapOutput {
	return o
}

func (o ClassificationJobMapOutput) MapIndex(k pulumi.StringInput) ClassificationJobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClassificationJob {
		return vs[0].(map[string]*ClassificationJob)[vs[1].(string)]
	}).(ClassificationJobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClassificationJobInput)(nil)).Elem(), &ClassificationJob{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassificationJobArrayInput)(nil)).Elem(), ClassificationJobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassificationJobMapInput)(nil)).Elem(), ClassificationJobMap{})
	pulumi.RegisterOutputType(ClassificationJobOutput{})
	pulumi.RegisterOutputType(ClassificationJobArrayOutput{})
	pulumi.RegisterOutputType(ClassificationJobMapOutput{})
}
