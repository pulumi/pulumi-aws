// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3tables

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an Amazon S3 Tables Table Policy.
//
// ## Example Usage
//
// ## Import
//
// Using `pulumi import`, import S3 Tables Table Policy using the `table_bucket_arn`, the value of `namespace`, and the value of `name`, separated by a semicolon (`;`). For example:
//
// ```sh
// $ pulumi import aws:s3tables/tablePolicy:TablePolicy example 'arn:aws:s3tables:us-west-2:123456789012:bucket/example-bucket;example-namespace;example-table'
// ```
type TablePolicy struct {
	pulumi.CustomResourceState

	// Name of the table.
	// Must be between 1 and 255 characters in length.
	// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
	Name pulumi.StringOutput `pulumi:"name"`
	// Name of the namespace for this table.
	// Must be between 1 and 255 characters in length.
	// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
	Namespace pulumi.StringOutput `pulumi:"namespace"`
	// Amazon Web Services resource-based policy document in JSON format.
	ResourcePolicy pulumi.StringOutput `pulumi:"resourcePolicy"`
	// ARN referencing the Table Bucket that contains this Namespace.
	TableBucketArn pulumi.StringOutput `pulumi:"tableBucketArn"`
}

// NewTablePolicy registers a new resource with the given unique name, arguments, and options.
func NewTablePolicy(ctx *pulumi.Context,
	name string, args *TablePolicyArgs, opts ...pulumi.ResourceOption) (*TablePolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Namespace == nil {
		return nil, errors.New("invalid value for required argument 'Namespace'")
	}
	if args.ResourcePolicy == nil {
		return nil, errors.New("invalid value for required argument 'ResourcePolicy'")
	}
	if args.TableBucketArn == nil {
		return nil, errors.New("invalid value for required argument 'TableBucketArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TablePolicy
	err := ctx.RegisterResource("aws:s3tables/tablePolicy:TablePolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTablePolicy gets an existing TablePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTablePolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TablePolicyState, opts ...pulumi.ResourceOption) (*TablePolicy, error) {
	var resource TablePolicy
	err := ctx.ReadResource("aws:s3tables/tablePolicy:TablePolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TablePolicy resources.
type tablePolicyState struct {
	// Name of the table.
	// Must be between 1 and 255 characters in length.
	// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
	Name *string `pulumi:"name"`
	// Name of the namespace for this table.
	// Must be between 1 and 255 characters in length.
	// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
	Namespace *string `pulumi:"namespace"`
	// Amazon Web Services resource-based policy document in JSON format.
	ResourcePolicy *string `pulumi:"resourcePolicy"`
	// ARN referencing the Table Bucket that contains this Namespace.
	TableBucketArn *string `pulumi:"tableBucketArn"`
}

type TablePolicyState struct {
	// Name of the table.
	// Must be between 1 and 255 characters in length.
	// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
	Name pulumi.StringPtrInput
	// Name of the namespace for this table.
	// Must be between 1 and 255 characters in length.
	// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
	Namespace pulumi.StringPtrInput
	// Amazon Web Services resource-based policy document in JSON format.
	ResourcePolicy pulumi.StringPtrInput
	// ARN referencing the Table Bucket that contains this Namespace.
	TableBucketArn pulumi.StringPtrInput
}

func (TablePolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*tablePolicyState)(nil)).Elem()
}

type tablePolicyArgs struct {
	// Name of the table.
	// Must be between 1 and 255 characters in length.
	// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
	Name *string `pulumi:"name"`
	// Name of the namespace for this table.
	// Must be between 1 and 255 characters in length.
	// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
	Namespace string `pulumi:"namespace"`
	// Amazon Web Services resource-based policy document in JSON format.
	ResourcePolicy string `pulumi:"resourcePolicy"`
	// ARN referencing the Table Bucket that contains this Namespace.
	TableBucketArn string `pulumi:"tableBucketArn"`
}

// The set of arguments for constructing a TablePolicy resource.
type TablePolicyArgs struct {
	// Name of the table.
	// Must be between 1 and 255 characters in length.
	// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
	Name pulumi.StringPtrInput
	// Name of the namespace for this table.
	// Must be between 1 and 255 characters in length.
	// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
	Namespace pulumi.StringInput
	// Amazon Web Services resource-based policy document in JSON format.
	ResourcePolicy pulumi.StringInput
	// ARN referencing the Table Bucket that contains this Namespace.
	TableBucketArn pulumi.StringInput
}

func (TablePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tablePolicyArgs)(nil)).Elem()
}

type TablePolicyInput interface {
	pulumi.Input

	ToTablePolicyOutput() TablePolicyOutput
	ToTablePolicyOutputWithContext(ctx context.Context) TablePolicyOutput
}

func (*TablePolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**TablePolicy)(nil)).Elem()
}

func (i *TablePolicy) ToTablePolicyOutput() TablePolicyOutput {
	return i.ToTablePolicyOutputWithContext(context.Background())
}

func (i *TablePolicy) ToTablePolicyOutputWithContext(ctx context.Context) TablePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TablePolicyOutput)
}

// TablePolicyArrayInput is an input type that accepts TablePolicyArray and TablePolicyArrayOutput values.
// You can construct a concrete instance of `TablePolicyArrayInput` via:
//
//	TablePolicyArray{ TablePolicyArgs{...} }
type TablePolicyArrayInput interface {
	pulumi.Input

	ToTablePolicyArrayOutput() TablePolicyArrayOutput
	ToTablePolicyArrayOutputWithContext(context.Context) TablePolicyArrayOutput
}

type TablePolicyArray []TablePolicyInput

func (TablePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TablePolicy)(nil)).Elem()
}

func (i TablePolicyArray) ToTablePolicyArrayOutput() TablePolicyArrayOutput {
	return i.ToTablePolicyArrayOutputWithContext(context.Background())
}

func (i TablePolicyArray) ToTablePolicyArrayOutputWithContext(ctx context.Context) TablePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TablePolicyArrayOutput)
}

// TablePolicyMapInput is an input type that accepts TablePolicyMap and TablePolicyMapOutput values.
// You can construct a concrete instance of `TablePolicyMapInput` via:
//
//	TablePolicyMap{ "key": TablePolicyArgs{...} }
type TablePolicyMapInput interface {
	pulumi.Input

	ToTablePolicyMapOutput() TablePolicyMapOutput
	ToTablePolicyMapOutputWithContext(context.Context) TablePolicyMapOutput
}

type TablePolicyMap map[string]TablePolicyInput

func (TablePolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TablePolicy)(nil)).Elem()
}

func (i TablePolicyMap) ToTablePolicyMapOutput() TablePolicyMapOutput {
	return i.ToTablePolicyMapOutputWithContext(context.Background())
}

func (i TablePolicyMap) ToTablePolicyMapOutputWithContext(ctx context.Context) TablePolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TablePolicyMapOutput)
}

type TablePolicyOutput struct{ *pulumi.OutputState }

func (TablePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TablePolicy)(nil)).Elem()
}

func (o TablePolicyOutput) ToTablePolicyOutput() TablePolicyOutput {
	return o
}

func (o TablePolicyOutput) ToTablePolicyOutputWithContext(ctx context.Context) TablePolicyOutput {
	return o
}

// Name of the table.
// Must be between 1 and 255 characters in length.
// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
func (o TablePolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TablePolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Name of the namespace for this table.
// Must be between 1 and 255 characters in length.
// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
func (o TablePolicyOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v *TablePolicy) pulumi.StringOutput { return v.Namespace }).(pulumi.StringOutput)
}

// Amazon Web Services resource-based policy document in JSON format.
func (o TablePolicyOutput) ResourcePolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *TablePolicy) pulumi.StringOutput { return v.ResourcePolicy }).(pulumi.StringOutput)
}

// ARN referencing the Table Bucket that contains this Namespace.
func (o TablePolicyOutput) TableBucketArn() pulumi.StringOutput {
	return o.ApplyT(func(v *TablePolicy) pulumi.StringOutput { return v.TableBucketArn }).(pulumi.StringOutput)
}

type TablePolicyArrayOutput struct{ *pulumi.OutputState }

func (TablePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TablePolicy)(nil)).Elem()
}

func (o TablePolicyArrayOutput) ToTablePolicyArrayOutput() TablePolicyArrayOutput {
	return o
}

func (o TablePolicyArrayOutput) ToTablePolicyArrayOutputWithContext(ctx context.Context) TablePolicyArrayOutput {
	return o
}

func (o TablePolicyArrayOutput) Index(i pulumi.IntInput) TablePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TablePolicy {
		return vs[0].([]*TablePolicy)[vs[1].(int)]
	}).(TablePolicyOutput)
}

type TablePolicyMapOutput struct{ *pulumi.OutputState }

func (TablePolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TablePolicy)(nil)).Elem()
}

func (o TablePolicyMapOutput) ToTablePolicyMapOutput() TablePolicyMapOutput {
	return o
}

func (o TablePolicyMapOutput) ToTablePolicyMapOutputWithContext(ctx context.Context) TablePolicyMapOutput {
	return o
}

func (o TablePolicyMapOutput) MapIndex(k pulumi.StringInput) TablePolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TablePolicy {
		return vs[0].(map[string]*TablePolicy)[vs[1].(string)]
	}).(TablePolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TablePolicyInput)(nil)).Elem(), &TablePolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*TablePolicyArrayInput)(nil)).Elem(), TablePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TablePolicyMapInput)(nil)).Elem(), TablePolicyMap{})
	pulumi.RegisterOutputType(TablePolicyOutput{})
	pulumi.RegisterOutputType(TablePolicyArrayOutput{})
	pulumi.RegisterOutputType(TablePolicyMapOutput{})
}
