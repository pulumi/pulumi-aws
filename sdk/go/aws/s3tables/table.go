// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3tables

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an Amazon S3 Tables Table.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/s3tables"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleTableBucket, err := s3tables.NewTableBucket(ctx, "example", &s3tables.TableBucketArgs{
//				Name: pulumi.String("example-bucket"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleNamespace, err := s3tables.NewNamespace(ctx, "example", &s3tables.NamespaceArgs{
//				Namespace:      pulumi.String("example_namespace"),
//				TableBucketArn: exampleTableBucket.Arn,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = s3tables.NewTable(ctx, "example", &s3tables.TableArgs{
//				Name:           pulumi.String("example_table"),
//				Namespace:      exampleNamespace.Namespace,
//				TableBucketArn: exampleNamespace.TableBucketArn,
//				Format:         pulumi.String("ICEBERG"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import S3 Tables Table using the `table_bucket_arn`, the value of `namespace`, and the value of `name`, separated by a semicolon (`;`). For example:
//
// ```sh
// $ pulumi import aws:s3tables/table:Table example 'arn:aws:s3tables:us-west-2:123456789012:bucket/example-bucket;example-namespace;example-table'
// ```
type Table struct {
	pulumi.CustomResourceState

	// ARN of the table.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Date and time when the namespace was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Account ID of the account that created the namespace.
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// Format of the table.
	// Must be `ICEBERG`.
	Format pulumi.StringOutput `pulumi:"format"`
	// A single table bucket maintenance configuration block.
	// See `maintenanceConfiguration` below.
	MaintenanceConfiguration TableMaintenanceConfigurationOutput `pulumi:"maintenanceConfiguration"`
	// Location of table metadata.
	MetadataLocation pulumi.StringOutput `pulumi:"metadataLocation"`
	// Date and time when the namespace was last modified.
	ModifiedAt pulumi.StringOutput `pulumi:"modifiedAt"`
	// Account ID of the account that last modified the namespace.
	ModifiedBy pulumi.StringOutput `pulumi:"modifiedBy"`
	// Name of the table.
	// Must be between 1 and 255 characters in length.
	// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
	// A full list of table naming rules can be found in the [S3 Tables documentation](https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-tables-buckets-naming.html#naming-rules-table).
	Name pulumi.StringOutput `pulumi:"name"`
	// Name of the namespace for this table.
	// Must be between 1 and 255 characters in length.
	// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
	Namespace pulumi.StringOutput `pulumi:"namespace"`
	// Account ID of the account that owns the namespace.
	OwnerAccountId pulumi.StringOutput `pulumi:"ownerAccountId"`
	// ARN referencing the Table Bucket that contains this Namespace.
	//
	// The following argument is optional:
	TableBucketArn pulumi.StringOutput `pulumi:"tableBucketArn"`
	// Type of the table.
	// One of `customer` or `aws`.
	Type pulumi.StringOutput `pulumi:"type"`
	// Identifier for the current version of table data.
	VersionToken pulumi.StringOutput `pulumi:"versionToken"`
	// S3 URI pointing to the S3 Bucket that contains the table data.
	WarehouseLocation pulumi.StringOutput `pulumi:"warehouseLocation"`
}

// NewTable registers a new resource with the given unique name, arguments, and options.
func NewTable(ctx *pulumi.Context,
	name string, args *TableArgs, opts ...pulumi.ResourceOption) (*Table, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Format == nil {
		return nil, errors.New("invalid value for required argument 'Format'")
	}
	if args.Namespace == nil {
		return nil, errors.New("invalid value for required argument 'Namespace'")
	}
	if args.TableBucketArn == nil {
		return nil, errors.New("invalid value for required argument 'TableBucketArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Table
	err := ctx.RegisterResource("aws:s3tables/table:Table", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTable gets an existing Table resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TableState, opts ...pulumi.ResourceOption) (*Table, error) {
	var resource Table
	err := ctx.ReadResource("aws:s3tables/table:Table", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Table resources.
type tableState struct {
	// ARN of the table.
	Arn *string `pulumi:"arn"`
	// Date and time when the namespace was created.
	CreatedAt *string `pulumi:"createdAt"`
	// Account ID of the account that created the namespace.
	CreatedBy *string `pulumi:"createdBy"`
	// Format of the table.
	// Must be `ICEBERG`.
	Format *string `pulumi:"format"`
	// A single table bucket maintenance configuration block.
	// See `maintenanceConfiguration` below.
	MaintenanceConfiguration *TableMaintenanceConfiguration `pulumi:"maintenanceConfiguration"`
	// Location of table metadata.
	MetadataLocation *string `pulumi:"metadataLocation"`
	// Date and time when the namespace was last modified.
	ModifiedAt *string `pulumi:"modifiedAt"`
	// Account ID of the account that last modified the namespace.
	ModifiedBy *string `pulumi:"modifiedBy"`
	// Name of the table.
	// Must be between 1 and 255 characters in length.
	// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
	// A full list of table naming rules can be found in the [S3 Tables documentation](https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-tables-buckets-naming.html#naming-rules-table).
	Name *string `pulumi:"name"`
	// Name of the namespace for this table.
	// Must be between 1 and 255 characters in length.
	// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
	Namespace *string `pulumi:"namespace"`
	// Account ID of the account that owns the namespace.
	OwnerAccountId *string `pulumi:"ownerAccountId"`
	// ARN referencing the Table Bucket that contains this Namespace.
	//
	// The following argument is optional:
	TableBucketArn *string `pulumi:"tableBucketArn"`
	// Type of the table.
	// One of `customer` or `aws`.
	Type *string `pulumi:"type"`
	// Identifier for the current version of table data.
	VersionToken *string `pulumi:"versionToken"`
	// S3 URI pointing to the S3 Bucket that contains the table data.
	WarehouseLocation *string `pulumi:"warehouseLocation"`
}

type TableState struct {
	// ARN of the table.
	Arn pulumi.StringPtrInput
	// Date and time when the namespace was created.
	CreatedAt pulumi.StringPtrInput
	// Account ID of the account that created the namespace.
	CreatedBy pulumi.StringPtrInput
	// Format of the table.
	// Must be `ICEBERG`.
	Format pulumi.StringPtrInput
	// A single table bucket maintenance configuration block.
	// See `maintenanceConfiguration` below.
	MaintenanceConfiguration TableMaintenanceConfigurationPtrInput
	// Location of table metadata.
	MetadataLocation pulumi.StringPtrInput
	// Date and time when the namespace was last modified.
	ModifiedAt pulumi.StringPtrInput
	// Account ID of the account that last modified the namespace.
	ModifiedBy pulumi.StringPtrInput
	// Name of the table.
	// Must be between 1 and 255 characters in length.
	// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
	// A full list of table naming rules can be found in the [S3 Tables documentation](https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-tables-buckets-naming.html#naming-rules-table).
	Name pulumi.StringPtrInput
	// Name of the namespace for this table.
	// Must be between 1 and 255 characters in length.
	// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
	Namespace pulumi.StringPtrInput
	// Account ID of the account that owns the namespace.
	OwnerAccountId pulumi.StringPtrInput
	// ARN referencing the Table Bucket that contains this Namespace.
	//
	// The following argument is optional:
	TableBucketArn pulumi.StringPtrInput
	// Type of the table.
	// One of `customer` or `aws`.
	Type pulumi.StringPtrInput
	// Identifier for the current version of table data.
	VersionToken pulumi.StringPtrInput
	// S3 URI pointing to the S3 Bucket that contains the table data.
	WarehouseLocation pulumi.StringPtrInput
}

func (TableState) ElementType() reflect.Type {
	return reflect.TypeOf((*tableState)(nil)).Elem()
}

type tableArgs struct {
	// Format of the table.
	// Must be `ICEBERG`.
	Format string `pulumi:"format"`
	// A single table bucket maintenance configuration block.
	// See `maintenanceConfiguration` below.
	MaintenanceConfiguration *TableMaintenanceConfiguration `pulumi:"maintenanceConfiguration"`
	// Name of the table.
	// Must be between 1 and 255 characters in length.
	// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
	// A full list of table naming rules can be found in the [S3 Tables documentation](https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-tables-buckets-naming.html#naming-rules-table).
	Name *string `pulumi:"name"`
	// Name of the namespace for this table.
	// Must be between 1 and 255 characters in length.
	// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
	Namespace string `pulumi:"namespace"`
	// ARN referencing the Table Bucket that contains this Namespace.
	//
	// The following argument is optional:
	TableBucketArn string `pulumi:"tableBucketArn"`
}

// The set of arguments for constructing a Table resource.
type TableArgs struct {
	// Format of the table.
	// Must be `ICEBERG`.
	Format pulumi.StringInput
	// A single table bucket maintenance configuration block.
	// See `maintenanceConfiguration` below.
	MaintenanceConfiguration TableMaintenanceConfigurationPtrInput
	// Name of the table.
	// Must be between 1 and 255 characters in length.
	// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
	// A full list of table naming rules can be found in the [S3 Tables documentation](https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-tables-buckets-naming.html#naming-rules-table).
	Name pulumi.StringPtrInput
	// Name of the namespace for this table.
	// Must be between 1 and 255 characters in length.
	// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
	Namespace pulumi.StringInput
	// ARN referencing the Table Bucket that contains this Namespace.
	//
	// The following argument is optional:
	TableBucketArn pulumi.StringInput
}

func (TableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tableArgs)(nil)).Elem()
}

type TableInput interface {
	pulumi.Input

	ToTableOutput() TableOutput
	ToTableOutputWithContext(ctx context.Context) TableOutput
}

func (*Table) ElementType() reflect.Type {
	return reflect.TypeOf((**Table)(nil)).Elem()
}

func (i *Table) ToTableOutput() TableOutput {
	return i.ToTableOutputWithContext(context.Background())
}

func (i *Table) ToTableOutputWithContext(ctx context.Context) TableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableOutput)
}

// TableArrayInput is an input type that accepts TableArray and TableArrayOutput values.
// You can construct a concrete instance of `TableArrayInput` via:
//
//	TableArray{ TableArgs{...} }
type TableArrayInput interface {
	pulumi.Input

	ToTableArrayOutput() TableArrayOutput
	ToTableArrayOutputWithContext(context.Context) TableArrayOutput
}

type TableArray []TableInput

func (TableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Table)(nil)).Elem()
}

func (i TableArray) ToTableArrayOutput() TableArrayOutput {
	return i.ToTableArrayOutputWithContext(context.Background())
}

func (i TableArray) ToTableArrayOutputWithContext(ctx context.Context) TableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableArrayOutput)
}

// TableMapInput is an input type that accepts TableMap and TableMapOutput values.
// You can construct a concrete instance of `TableMapInput` via:
//
//	TableMap{ "key": TableArgs{...} }
type TableMapInput interface {
	pulumi.Input

	ToTableMapOutput() TableMapOutput
	ToTableMapOutputWithContext(context.Context) TableMapOutput
}

type TableMap map[string]TableInput

func (TableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Table)(nil)).Elem()
}

func (i TableMap) ToTableMapOutput() TableMapOutput {
	return i.ToTableMapOutputWithContext(context.Background())
}

func (i TableMap) ToTableMapOutputWithContext(ctx context.Context) TableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableMapOutput)
}

type TableOutput struct{ *pulumi.OutputState }

func (TableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Table)(nil)).Elem()
}

func (o TableOutput) ToTableOutput() TableOutput {
	return o
}

func (o TableOutput) ToTableOutputWithContext(ctx context.Context) TableOutput {
	return o
}

// ARN of the table.
func (o TableOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Date and time when the namespace was created.
func (o TableOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Account ID of the account that created the namespace.
func (o TableOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// Format of the table.
// Must be `ICEBERG`.
func (o TableOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.Format }).(pulumi.StringOutput)
}

// A single table bucket maintenance configuration block.
// See `maintenanceConfiguration` below.
func (o TableOutput) MaintenanceConfiguration() TableMaintenanceConfigurationOutput {
	return o.ApplyT(func(v *Table) TableMaintenanceConfigurationOutput { return v.MaintenanceConfiguration }).(TableMaintenanceConfigurationOutput)
}

// Location of table metadata.
func (o TableOutput) MetadataLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.MetadataLocation }).(pulumi.StringOutput)
}

// Date and time when the namespace was last modified.
func (o TableOutput) ModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.ModifiedAt }).(pulumi.StringOutput)
}

// Account ID of the account that last modified the namespace.
func (o TableOutput) ModifiedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.ModifiedBy }).(pulumi.StringOutput)
}

// Name of the table.
// Must be between 1 and 255 characters in length.
// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
// A full list of table naming rules can be found in the [S3 Tables documentation](https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-tables-buckets-naming.html#naming-rules-table).
func (o TableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Name of the namespace for this table.
// Must be between 1 and 255 characters in length.
// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
func (o TableOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.Namespace }).(pulumi.StringOutput)
}

// Account ID of the account that owns the namespace.
func (o TableOutput) OwnerAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.OwnerAccountId }).(pulumi.StringOutput)
}

// ARN referencing the Table Bucket that contains this Namespace.
//
// The following argument is optional:
func (o TableOutput) TableBucketArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.TableBucketArn }).(pulumi.StringOutput)
}

// Type of the table.
// One of `customer` or `aws`.
func (o TableOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Identifier for the current version of table data.
func (o TableOutput) VersionToken() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.VersionToken }).(pulumi.StringOutput)
}

// S3 URI pointing to the S3 Bucket that contains the table data.
func (o TableOutput) WarehouseLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.WarehouseLocation }).(pulumi.StringOutput)
}

type TableArrayOutput struct{ *pulumi.OutputState }

func (TableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Table)(nil)).Elem()
}

func (o TableArrayOutput) ToTableArrayOutput() TableArrayOutput {
	return o
}

func (o TableArrayOutput) ToTableArrayOutputWithContext(ctx context.Context) TableArrayOutput {
	return o
}

func (o TableArrayOutput) Index(i pulumi.IntInput) TableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Table {
		return vs[0].([]*Table)[vs[1].(int)]
	}).(TableOutput)
}

type TableMapOutput struct{ *pulumi.OutputState }

func (TableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Table)(nil)).Elem()
}

func (o TableMapOutput) ToTableMapOutput() TableMapOutput {
	return o
}

func (o TableMapOutput) ToTableMapOutputWithContext(ctx context.Context) TableMapOutput {
	return o
}

func (o TableMapOutput) MapIndex(k pulumi.StringInput) TableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Table {
		return vs[0].(map[string]*Table)[vs[1].(string)]
	}).(TableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TableInput)(nil)).Elem(), &Table{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableArrayInput)(nil)).Elem(), TableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableMapInput)(nil)).Elem(), TableMap{})
	pulumi.RegisterOutputType(TableOutput{})
	pulumi.RegisterOutputType(TableArrayOutput{})
	pulumi.RegisterOutputType(TableMapOutput{})
}
