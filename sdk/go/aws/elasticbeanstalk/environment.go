// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package elasticbeanstalk

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an Elastic Beanstalk Environment Resource. Elastic Beanstalk allows
// you to deploy and manage applications in the AWS cloud without worrying about
// the infrastructure that runs those applications.
// 
// Environments are often things such as `development`, `integration`, or
// `production`.
type Environment struct {
	s *pulumi.ResourceState
}

// NewEnvironment registers a new resource with the given unique name, arguments, and options.
func NewEnvironment(ctx *pulumi.Context,
	name string, args *EnvironmentArgs, opts ...pulumi.ResourceOpt) (*Environment, error) {
	if args == nil || args.Application == nil {
		return nil, errors.New("missing required argument 'Application'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["application"] = nil
		inputs["cnamePrefix"] = nil
		inputs["description"] = nil
		inputs["name"] = nil
		inputs["pollInterval"] = nil
		inputs["settings"] = nil
		inputs["solutionStackName"] = nil
		inputs["tags"] = nil
		inputs["templateName"] = nil
		inputs["tier"] = nil
		inputs["version"] = nil
		inputs["waitForReadyTimeout"] = nil
	} else {
		inputs["application"] = args.Application
		inputs["cnamePrefix"] = args.CnamePrefix
		inputs["description"] = args.Description
		inputs["name"] = args.Name
		inputs["pollInterval"] = args.PollInterval
		inputs["settings"] = args.Settings
		inputs["solutionStackName"] = args.SolutionStackName
		inputs["tags"] = args.Tags
		inputs["templateName"] = args.TemplateName
		inputs["tier"] = args.Tier
		inputs["version"] = args.Version
		inputs["waitForReadyTimeout"] = args.WaitForReadyTimeout
	}
	inputs["allSettings"] = nil
	inputs["arn"] = nil
	inputs["autoscalingGroups"] = nil
	inputs["cname"] = nil
	inputs["instances"] = nil
	inputs["launchConfigurations"] = nil
	inputs["loadBalancers"] = nil
	inputs["queues"] = nil
	inputs["triggers"] = nil
	s, err := ctx.RegisterResource("aws:elasticbeanstalk/environment:Environment", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Environment{s: s}, nil
}

// GetEnvironment gets an existing Environment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvironment(ctx *pulumi.Context,
	name string, id pulumi.ID, state *EnvironmentState, opts ...pulumi.ResourceOpt) (*Environment, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["allSettings"] = state.AllSettings
		inputs["application"] = state.Application
		inputs["arn"] = state.Arn
		inputs["autoscalingGroups"] = state.AutoscalingGroups
		inputs["cname"] = state.Cname
		inputs["cnamePrefix"] = state.CnamePrefix
		inputs["description"] = state.Description
		inputs["instances"] = state.Instances
		inputs["launchConfigurations"] = state.LaunchConfigurations
		inputs["loadBalancers"] = state.LoadBalancers
		inputs["name"] = state.Name
		inputs["pollInterval"] = state.PollInterval
		inputs["queues"] = state.Queues
		inputs["settings"] = state.Settings
		inputs["solutionStackName"] = state.SolutionStackName
		inputs["tags"] = state.Tags
		inputs["templateName"] = state.TemplateName
		inputs["tier"] = state.Tier
		inputs["triggers"] = state.Triggers
		inputs["version"] = state.Version
		inputs["waitForReadyTimeout"] = state.WaitForReadyTimeout
	}
	s, err := ctx.ReadResource("aws:elasticbeanstalk/environment:Environment", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Environment{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Environment) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Environment) ID() *pulumi.IDOutput {
	return r.s.ID
}

// List of all option settings configured in the Environment. These
// are a combination of default settings and their overrides from `setting` in
// the configuration.
func (r *Environment) AllSettings() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["allSettings"])
}

// Name of the application that contains the version
// to be deployed
func (r *Environment) Application() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["application"])
}

func (r *Environment) Arn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["arn"])
}

// The autoscaling groups used by this environment.
func (r *Environment) AutoscalingGroups() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["autoscalingGroups"])
}

// Fully qualified DNS name for the Environment.
func (r *Environment) Cname() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["cname"])
}

// Prefix to use for the fully qualified DNS name of
// the Environment.
func (r *Environment) CnamePrefix() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["cnamePrefix"])
}

// Short description of the Environment
func (r *Environment) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// Instances used by this environment.
func (r *Environment) Instances() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["instances"])
}

// Launch configurations in use by this environment.
func (r *Environment) LaunchConfigurations() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["launchConfigurations"])
}

// Elastic load balancers in use by this environment.
func (r *Environment) LoadBalancers() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["loadBalancers"])
}

// A unique name for this Environment. This name is used
// in the application URL
func (r *Environment) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The time between polling the AWS API to
// check if changes have been applied. Use this to adjust the rate of API calls
// for any `create` or `update` action. Minimum `10s`, maximum `180s`. Omit this to
// use the default behavior, which is an exponential backoff
func (r *Environment) PollInterval() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["pollInterval"])
}

// SQS queues in use by this environment.
func (r *Environment) Queues() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["queues"])
}

// Option settings to configure the new Environment. These
// override specific values that are set as defaults. The format is detailed
// below in [Option Settings](#option-settings)
func (r *Environment) Settings() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["settings"])
}

// A solution stack to base your environment
// off of. Example stacks can be found in the [Amazon API documentation][1]
func (r *Environment) SolutionStackName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["solutionStackName"])
}

// A set of tags to apply to the Environment.
func (r *Environment) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// The name of the Elastic Beanstalk Configuration
// template to use in deployment
func (r *Environment) TemplateName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["templateName"])
}

// Elastic Beanstalk Environment tier. Valid values are `Worker`
// or `WebServer`. If tier is left blank `WebServer` will be used.
func (r *Environment) Tier() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tier"])
}

// Autoscaling triggers in use by this environment.
func (r *Environment) Triggers() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["triggers"])
}

// The name of the Elastic Beanstalk Application Version
// to use in deployment.
func (r *Environment) Version() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["version"])
}

// The maximum
// [duration](https://golang.org/pkg/time/#ParseDuration) that Terraform should
// wait for an Elastic Beanstalk Environment to be in a ready state before timing
// out.
func (r *Environment) WaitForReadyTimeout() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["waitForReadyTimeout"])
}

// Input properties used for looking up and filtering Environment resources.
type EnvironmentState struct {
	// List of all option settings configured in the Environment. These
	// are a combination of default settings and their overrides from `setting` in
	// the configuration.
	AllSettings interface{}
	// Name of the application that contains the version
	// to be deployed
	Application interface{}
	Arn interface{}
	// The autoscaling groups used by this environment.
	AutoscalingGroups interface{}
	// Fully qualified DNS name for the Environment.
	Cname interface{}
	// Prefix to use for the fully qualified DNS name of
	// the Environment.
	CnamePrefix interface{}
	// Short description of the Environment
	Description interface{}
	// Instances used by this environment.
	Instances interface{}
	// Launch configurations in use by this environment.
	LaunchConfigurations interface{}
	// Elastic load balancers in use by this environment.
	LoadBalancers interface{}
	// A unique name for this Environment. This name is used
	// in the application URL
	Name interface{}
	// The time between polling the AWS API to
	// check if changes have been applied. Use this to adjust the rate of API calls
	// for any `create` or `update` action. Minimum `10s`, maximum `180s`. Omit this to
	// use the default behavior, which is an exponential backoff
	PollInterval interface{}
	// SQS queues in use by this environment.
	Queues interface{}
	// Option settings to configure the new Environment. These
	// override specific values that are set as defaults. The format is detailed
	// below in [Option Settings](#option-settings)
	Settings interface{}
	// A solution stack to base your environment
	// off of. Example stacks can be found in the [Amazon API documentation][1]
	SolutionStackName interface{}
	// A set of tags to apply to the Environment.
	Tags interface{}
	// The name of the Elastic Beanstalk Configuration
	// template to use in deployment
	TemplateName interface{}
	// Elastic Beanstalk Environment tier. Valid values are `Worker`
	// or `WebServer`. If tier is left blank `WebServer` will be used.
	Tier interface{}
	// Autoscaling triggers in use by this environment.
	Triggers interface{}
	// The name of the Elastic Beanstalk Application Version
	// to use in deployment.
	Version interface{}
	// The maximum
	// [duration](https://golang.org/pkg/time/#ParseDuration) that Terraform should
	// wait for an Elastic Beanstalk Environment to be in a ready state before timing
	// out.
	WaitForReadyTimeout interface{}
}

// The set of arguments for constructing a Environment resource.
type EnvironmentArgs struct {
	// Name of the application that contains the version
	// to be deployed
	Application interface{}
	// Prefix to use for the fully qualified DNS name of
	// the Environment.
	CnamePrefix interface{}
	// Short description of the Environment
	Description interface{}
	// A unique name for this Environment. This name is used
	// in the application URL
	Name interface{}
	// The time between polling the AWS API to
	// check if changes have been applied. Use this to adjust the rate of API calls
	// for any `create` or `update` action. Minimum `10s`, maximum `180s`. Omit this to
	// use the default behavior, which is an exponential backoff
	PollInterval interface{}
	// Option settings to configure the new Environment. These
	// override specific values that are set as defaults. The format is detailed
	// below in [Option Settings](#option-settings)
	Settings interface{}
	// A solution stack to base your environment
	// off of. Example stacks can be found in the [Amazon API documentation][1]
	SolutionStackName interface{}
	// A set of tags to apply to the Environment.
	Tags interface{}
	// The name of the Elastic Beanstalk Configuration
	// template to use in deployment
	TemplateName interface{}
	// Elastic Beanstalk Environment tier. Valid values are `Worker`
	// or `WebServer`. If tier is left blank `WebServer` will be used.
	Tier interface{}
	// The name of the Elastic Beanstalk Application Version
	// to use in deployment.
	Version interface{}
	// The maximum
	// [duration](https://golang.org/pkg/time/#ParseDuration) that Terraform should
	// wait for an Elastic Beanstalk Environment to be in a ready state before timing
	// out.
	WaitForReadyTimeout interface{}
}
