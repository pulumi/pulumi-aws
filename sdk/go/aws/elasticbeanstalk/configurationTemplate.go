// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticbeanstalk

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ConfigurationTemplate struct {
	pulumi.CustomResourceState

	Application       pulumi.StringOutput                     `pulumi:"application"`
	Description       pulumi.StringPtrOutput                  `pulumi:"description"`
	EnvironmentId     pulumi.StringPtrOutput                  `pulumi:"environmentId"`
	Name              pulumi.StringOutput                     `pulumi:"name"`
	Settings          ConfigurationTemplateSettingArrayOutput `pulumi:"settings"`
	SolutionStackName pulumi.StringPtrOutput                  `pulumi:"solutionStackName"`
}

// NewConfigurationTemplate registers a new resource with the given unique name, arguments, and options.
func NewConfigurationTemplate(ctx *pulumi.Context,
	name string, args *ConfigurationTemplateArgs, opts ...pulumi.ResourceOption) (*ConfigurationTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Application == nil {
		return nil, errors.New("invalid value for required argument 'Application'")
	}
	var resource ConfigurationTemplate
	err := ctx.RegisterResource("aws:elasticbeanstalk/configurationTemplate:ConfigurationTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigurationTemplate gets an existing ConfigurationTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigurationTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigurationTemplateState, opts ...pulumi.ResourceOption) (*ConfigurationTemplate, error) {
	var resource ConfigurationTemplate
	err := ctx.ReadResource("aws:elasticbeanstalk/configurationTemplate:ConfigurationTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigurationTemplate resources.
type configurationTemplateState struct {
	Application       *string                        `pulumi:"application"`
	Description       *string                        `pulumi:"description"`
	EnvironmentId     *string                        `pulumi:"environmentId"`
	Name              *string                        `pulumi:"name"`
	Settings          []ConfigurationTemplateSetting `pulumi:"settings"`
	SolutionStackName *string                        `pulumi:"solutionStackName"`
}

type ConfigurationTemplateState struct {
	Application       pulumi.StringPtrInput
	Description       pulumi.StringPtrInput
	EnvironmentId     pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	Settings          ConfigurationTemplateSettingArrayInput
	SolutionStackName pulumi.StringPtrInput
}

func (ConfigurationTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationTemplateState)(nil)).Elem()
}

type configurationTemplateArgs struct {
	Application       string                         `pulumi:"application"`
	Description       *string                        `pulumi:"description"`
	EnvironmentId     *string                        `pulumi:"environmentId"`
	Name              *string                        `pulumi:"name"`
	Settings          []ConfigurationTemplateSetting `pulumi:"settings"`
	SolutionStackName *string                        `pulumi:"solutionStackName"`
}

// The set of arguments for constructing a ConfigurationTemplate resource.
type ConfigurationTemplateArgs struct {
	Application       pulumi.StringInput
	Description       pulumi.StringPtrInput
	EnvironmentId     pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	Settings          ConfigurationTemplateSettingArrayInput
	SolutionStackName pulumi.StringPtrInput
}

func (ConfigurationTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationTemplateArgs)(nil)).Elem()
}

type ConfigurationTemplateInput interface {
	pulumi.Input

	ToConfigurationTemplateOutput() ConfigurationTemplateOutput
	ToConfigurationTemplateOutputWithContext(ctx context.Context) ConfigurationTemplateOutput
}

func (*ConfigurationTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationTemplate)(nil)).Elem()
}

func (i *ConfigurationTemplate) ToConfigurationTemplateOutput() ConfigurationTemplateOutput {
	return i.ToConfigurationTemplateOutputWithContext(context.Background())
}

func (i *ConfigurationTemplate) ToConfigurationTemplateOutputWithContext(ctx context.Context) ConfigurationTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationTemplateOutput)
}

// ConfigurationTemplateArrayInput is an input type that accepts ConfigurationTemplateArray and ConfigurationTemplateArrayOutput values.
// You can construct a concrete instance of `ConfigurationTemplateArrayInput` via:
//
//	ConfigurationTemplateArray{ ConfigurationTemplateArgs{...} }
type ConfigurationTemplateArrayInput interface {
	pulumi.Input

	ToConfigurationTemplateArrayOutput() ConfigurationTemplateArrayOutput
	ToConfigurationTemplateArrayOutputWithContext(context.Context) ConfigurationTemplateArrayOutput
}

type ConfigurationTemplateArray []ConfigurationTemplateInput

func (ConfigurationTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigurationTemplate)(nil)).Elem()
}

func (i ConfigurationTemplateArray) ToConfigurationTemplateArrayOutput() ConfigurationTemplateArrayOutput {
	return i.ToConfigurationTemplateArrayOutputWithContext(context.Background())
}

func (i ConfigurationTemplateArray) ToConfigurationTemplateArrayOutputWithContext(ctx context.Context) ConfigurationTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationTemplateArrayOutput)
}

// ConfigurationTemplateMapInput is an input type that accepts ConfigurationTemplateMap and ConfigurationTemplateMapOutput values.
// You can construct a concrete instance of `ConfigurationTemplateMapInput` via:
//
//	ConfigurationTemplateMap{ "key": ConfigurationTemplateArgs{...} }
type ConfigurationTemplateMapInput interface {
	pulumi.Input

	ToConfigurationTemplateMapOutput() ConfigurationTemplateMapOutput
	ToConfigurationTemplateMapOutputWithContext(context.Context) ConfigurationTemplateMapOutput
}

type ConfigurationTemplateMap map[string]ConfigurationTemplateInput

func (ConfigurationTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigurationTemplate)(nil)).Elem()
}

func (i ConfigurationTemplateMap) ToConfigurationTemplateMapOutput() ConfigurationTemplateMapOutput {
	return i.ToConfigurationTemplateMapOutputWithContext(context.Background())
}

func (i ConfigurationTemplateMap) ToConfigurationTemplateMapOutputWithContext(ctx context.Context) ConfigurationTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationTemplateMapOutput)
}

type ConfigurationTemplateOutput struct{ *pulumi.OutputState }

func (ConfigurationTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationTemplate)(nil)).Elem()
}

func (o ConfigurationTemplateOutput) ToConfigurationTemplateOutput() ConfigurationTemplateOutput {
	return o
}

func (o ConfigurationTemplateOutput) ToConfigurationTemplateOutputWithContext(ctx context.Context) ConfigurationTemplateOutput {
	return o
}

func (o ConfigurationTemplateOutput) Application() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigurationTemplate) pulumi.StringOutput { return v.Application }).(pulumi.StringOutput)
}

func (o ConfigurationTemplateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigurationTemplate) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ConfigurationTemplateOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigurationTemplate) pulumi.StringPtrOutput { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

func (o ConfigurationTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigurationTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ConfigurationTemplateOutput) Settings() ConfigurationTemplateSettingArrayOutput {
	return o.ApplyT(func(v *ConfigurationTemplate) ConfigurationTemplateSettingArrayOutput { return v.Settings }).(ConfigurationTemplateSettingArrayOutput)
}

func (o ConfigurationTemplateOutput) SolutionStackName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigurationTemplate) pulumi.StringPtrOutput { return v.SolutionStackName }).(pulumi.StringPtrOutput)
}

type ConfigurationTemplateArrayOutput struct{ *pulumi.OutputState }

func (ConfigurationTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigurationTemplate)(nil)).Elem()
}

func (o ConfigurationTemplateArrayOutput) ToConfigurationTemplateArrayOutput() ConfigurationTemplateArrayOutput {
	return o
}

func (o ConfigurationTemplateArrayOutput) ToConfigurationTemplateArrayOutputWithContext(ctx context.Context) ConfigurationTemplateArrayOutput {
	return o
}

func (o ConfigurationTemplateArrayOutput) Index(i pulumi.IntInput) ConfigurationTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConfigurationTemplate {
		return vs[0].([]*ConfigurationTemplate)[vs[1].(int)]
	}).(ConfigurationTemplateOutput)
}

type ConfigurationTemplateMapOutput struct{ *pulumi.OutputState }

func (ConfigurationTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigurationTemplate)(nil)).Elem()
}

func (o ConfigurationTemplateMapOutput) ToConfigurationTemplateMapOutput() ConfigurationTemplateMapOutput {
	return o
}

func (o ConfigurationTemplateMapOutput) ToConfigurationTemplateMapOutputWithContext(ctx context.Context) ConfigurationTemplateMapOutput {
	return o
}

func (o ConfigurationTemplateMapOutput) MapIndex(k pulumi.StringInput) ConfigurationTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConfigurationTemplate {
		return vs[0].(map[string]*ConfigurationTemplate)[vs[1].(string)]
	}).(ConfigurationTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationTemplateInput)(nil)).Elem(), &ConfigurationTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationTemplateArrayInput)(nil)).Elem(), ConfigurationTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationTemplateMapInput)(nil)).Elem(), ConfigurationTemplateMap{})
	pulumi.RegisterOutputType(ConfigurationTemplateOutput{})
	pulumi.RegisterOutputType(ConfigurationTemplateArrayOutput{})
	pulumi.RegisterOutputType(ConfigurationTemplateMapOutput{})
}
