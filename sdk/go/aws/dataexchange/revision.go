// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataexchange

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Revision struct {
	pulumi.CustomResourceState

	Arn        pulumi.StringOutput    `pulumi:"arn"`
	Comment    pulumi.StringPtrOutput `pulumi:"comment"`
	DataSetId  pulumi.StringOutput    `pulumi:"dataSetId"`
	RevisionId pulumi.StringOutput    `pulumi:"revisionId"`
	Tags       pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll    pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewRevision registers a new resource with the given unique name, arguments, and options.
func NewRevision(ctx *pulumi.Context,
	name string, args *RevisionArgs, opts ...pulumi.ResourceOption) (*Revision, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataSetId == nil {
		return nil, errors.New("invalid value for required argument 'DataSetId'")
	}
	var resource Revision
	err := ctx.RegisterResource("aws:dataexchange/revision:Revision", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRevision gets an existing Revision resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRevision(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RevisionState, opts ...pulumi.ResourceOption) (*Revision, error) {
	var resource Revision
	err := ctx.ReadResource("aws:dataexchange/revision:Revision", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Revision resources.
type revisionState struct {
	Arn        *string           `pulumi:"arn"`
	Comment    *string           `pulumi:"comment"`
	DataSetId  *string           `pulumi:"dataSetId"`
	RevisionId *string           `pulumi:"revisionId"`
	Tags       map[string]string `pulumi:"tags"`
	TagsAll    map[string]string `pulumi:"tagsAll"`
}

type RevisionState struct {
	Arn        pulumi.StringPtrInput
	Comment    pulumi.StringPtrInput
	DataSetId  pulumi.StringPtrInput
	RevisionId pulumi.StringPtrInput
	Tags       pulumi.StringMapInput
	TagsAll    pulumi.StringMapInput
}

func (RevisionState) ElementType() reflect.Type {
	return reflect.TypeOf((*revisionState)(nil)).Elem()
}

type revisionArgs struct {
	Comment   *string           `pulumi:"comment"`
	DataSetId string            `pulumi:"dataSetId"`
	Tags      map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Revision resource.
type RevisionArgs struct {
	Comment   pulumi.StringPtrInput
	DataSetId pulumi.StringInput
	Tags      pulumi.StringMapInput
}

func (RevisionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*revisionArgs)(nil)).Elem()
}

type RevisionInput interface {
	pulumi.Input

	ToRevisionOutput() RevisionOutput
	ToRevisionOutputWithContext(ctx context.Context) RevisionOutput
}

func (*Revision) ElementType() reflect.Type {
	return reflect.TypeOf((**Revision)(nil)).Elem()
}

func (i *Revision) ToRevisionOutput() RevisionOutput {
	return i.ToRevisionOutputWithContext(context.Background())
}

func (i *Revision) ToRevisionOutputWithContext(ctx context.Context) RevisionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RevisionOutput)
}

// RevisionArrayInput is an input type that accepts RevisionArray and RevisionArrayOutput values.
// You can construct a concrete instance of `RevisionArrayInput` via:
//
//	RevisionArray{ RevisionArgs{...} }
type RevisionArrayInput interface {
	pulumi.Input

	ToRevisionArrayOutput() RevisionArrayOutput
	ToRevisionArrayOutputWithContext(context.Context) RevisionArrayOutput
}

type RevisionArray []RevisionInput

func (RevisionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Revision)(nil)).Elem()
}

func (i RevisionArray) ToRevisionArrayOutput() RevisionArrayOutput {
	return i.ToRevisionArrayOutputWithContext(context.Background())
}

func (i RevisionArray) ToRevisionArrayOutputWithContext(ctx context.Context) RevisionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RevisionArrayOutput)
}

// RevisionMapInput is an input type that accepts RevisionMap and RevisionMapOutput values.
// You can construct a concrete instance of `RevisionMapInput` via:
//
//	RevisionMap{ "key": RevisionArgs{...} }
type RevisionMapInput interface {
	pulumi.Input

	ToRevisionMapOutput() RevisionMapOutput
	ToRevisionMapOutputWithContext(context.Context) RevisionMapOutput
}

type RevisionMap map[string]RevisionInput

func (RevisionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Revision)(nil)).Elem()
}

func (i RevisionMap) ToRevisionMapOutput() RevisionMapOutput {
	return i.ToRevisionMapOutputWithContext(context.Background())
}

func (i RevisionMap) ToRevisionMapOutputWithContext(ctx context.Context) RevisionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RevisionMapOutput)
}

type RevisionOutput struct{ *pulumi.OutputState }

func (RevisionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Revision)(nil)).Elem()
}

func (o RevisionOutput) ToRevisionOutput() RevisionOutput {
	return o
}

func (o RevisionOutput) ToRevisionOutputWithContext(ctx context.Context) RevisionOutput {
	return o
}

func (o RevisionOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Revision) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o RevisionOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Revision) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o RevisionOutput) DataSetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Revision) pulumi.StringOutput { return v.DataSetId }).(pulumi.StringOutput)
}

func (o RevisionOutput) RevisionId() pulumi.StringOutput {
	return o.ApplyT(func(v *Revision) pulumi.StringOutput { return v.RevisionId }).(pulumi.StringOutput)
}

func (o RevisionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Revision) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o RevisionOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Revision) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type RevisionArrayOutput struct{ *pulumi.OutputState }

func (RevisionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Revision)(nil)).Elem()
}

func (o RevisionArrayOutput) ToRevisionArrayOutput() RevisionArrayOutput {
	return o
}

func (o RevisionArrayOutput) ToRevisionArrayOutputWithContext(ctx context.Context) RevisionArrayOutput {
	return o
}

func (o RevisionArrayOutput) Index(i pulumi.IntInput) RevisionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Revision {
		return vs[0].([]*Revision)[vs[1].(int)]
	}).(RevisionOutput)
}

type RevisionMapOutput struct{ *pulumi.OutputState }

func (RevisionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Revision)(nil)).Elem()
}

func (o RevisionMapOutput) ToRevisionMapOutput() RevisionMapOutput {
	return o
}

func (o RevisionMapOutput) ToRevisionMapOutputWithContext(ctx context.Context) RevisionMapOutput {
	return o
}

func (o RevisionMapOutput) MapIndex(k pulumi.StringInput) RevisionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Revision {
		return vs[0].(map[string]*Revision)[vs[1].(string)]
	}).(RevisionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RevisionInput)(nil)).Elem(), &Revision{})
	pulumi.RegisterInputType(reflect.TypeOf((*RevisionArrayInput)(nil)).Elem(), RevisionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RevisionMapInput)(nil)).Elem(), RevisionMap{})
	pulumi.RegisterOutputType(RevisionOutput{})
	pulumi.RegisterOutputType(RevisionArrayOutput{})
	pulumi.RegisterOutputType(RevisionMapOutput{})
}
