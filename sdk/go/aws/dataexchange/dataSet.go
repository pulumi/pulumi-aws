// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataexchange

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DataSet struct {
	pulumi.CustomResourceState

	Arn         pulumi.StringOutput    `pulumi:"arn"`
	AssetType   pulumi.StringOutput    `pulumi:"assetType"`
	Description pulumi.StringOutput    `pulumi:"description"`
	Name        pulumi.StringOutput    `pulumi:"name"`
	Tags        pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll     pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewDataSet registers a new resource with the given unique name, arguments, and options.
func NewDataSet(ctx *pulumi.Context,
	name string, args *DataSetArgs, opts ...pulumi.ResourceOption) (*DataSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AssetType == nil {
		return nil, errors.New("invalid value for required argument 'AssetType'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	var resource DataSet
	err := ctx.RegisterResource("aws:dataexchange/dataSet:DataSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataSet gets an existing DataSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataSetState, opts ...pulumi.ResourceOption) (*DataSet, error) {
	var resource DataSet
	err := ctx.ReadResource("aws:dataexchange/dataSet:DataSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataSet resources.
type dataSetState struct {
	Arn         *string           `pulumi:"arn"`
	AssetType   *string           `pulumi:"assetType"`
	Description *string           `pulumi:"description"`
	Name        *string           `pulumi:"name"`
	Tags        map[string]string `pulumi:"tags"`
	TagsAll     map[string]string `pulumi:"tagsAll"`
}

type DataSetState struct {
	Arn         pulumi.StringPtrInput
	AssetType   pulumi.StringPtrInput
	Description pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	Tags        pulumi.StringMapInput
	TagsAll     pulumi.StringMapInput
}

func (DataSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSetState)(nil)).Elem()
}

type dataSetArgs struct {
	AssetType   string            `pulumi:"assetType"`
	Description string            `pulumi:"description"`
	Name        *string           `pulumi:"name"`
	Tags        map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a DataSet resource.
type DataSetArgs struct {
	AssetType   pulumi.StringInput
	Description pulumi.StringInput
	Name        pulumi.StringPtrInput
	Tags        pulumi.StringMapInput
}

func (DataSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSetArgs)(nil)).Elem()
}

type DataSetInput interface {
	pulumi.Input

	ToDataSetOutput() DataSetOutput
	ToDataSetOutputWithContext(ctx context.Context) DataSetOutput
}

func (*DataSet) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSet)(nil)).Elem()
}

func (i *DataSet) ToDataSetOutput() DataSetOutput {
	return i.ToDataSetOutputWithContext(context.Background())
}

func (i *DataSet) ToDataSetOutputWithContext(ctx context.Context) DataSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetOutput)
}

// DataSetArrayInput is an input type that accepts DataSetArray and DataSetArrayOutput values.
// You can construct a concrete instance of `DataSetArrayInput` via:
//
//	DataSetArray{ DataSetArgs{...} }
type DataSetArrayInput interface {
	pulumi.Input

	ToDataSetArrayOutput() DataSetArrayOutput
	ToDataSetArrayOutputWithContext(context.Context) DataSetArrayOutput
}

type DataSetArray []DataSetInput

func (DataSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataSet)(nil)).Elem()
}

func (i DataSetArray) ToDataSetArrayOutput() DataSetArrayOutput {
	return i.ToDataSetArrayOutputWithContext(context.Background())
}

func (i DataSetArray) ToDataSetArrayOutputWithContext(ctx context.Context) DataSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetArrayOutput)
}

// DataSetMapInput is an input type that accepts DataSetMap and DataSetMapOutput values.
// You can construct a concrete instance of `DataSetMapInput` via:
//
//	DataSetMap{ "key": DataSetArgs{...} }
type DataSetMapInput interface {
	pulumi.Input

	ToDataSetMapOutput() DataSetMapOutput
	ToDataSetMapOutputWithContext(context.Context) DataSetMapOutput
}

type DataSetMap map[string]DataSetInput

func (DataSetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataSet)(nil)).Elem()
}

func (i DataSetMap) ToDataSetMapOutput() DataSetMapOutput {
	return i.ToDataSetMapOutputWithContext(context.Background())
}

func (i DataSetMap) ToDataSetMapOutputWithContext(ctx context.Context) DataSetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetMapOutput)
}

type DataSetOutput struct{ *pulumi.OutputState }

func (DataSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSet)(nil)).Elem()
}

func (o DataSetOutput) ToDataSetOutput() DataSetOutput {
	return o
}

func (o DataSetOutput) ToDataSetOutputWithContext(ctx context.Context) DataSetOutput {
	return o
}

func (o DataSetOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSet) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o DataSetOutput) AssetType() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSet) pulumi.StringOutput { return v.AssetType }).(pulumi.StringOutput)
}

func (o DataSetOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSet) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o DataSetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DataSetOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataSet) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o DataSetOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataSet) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type DataSetArrayOutput struct{ *pulumi.OutputState }

func (DataSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataSet)(nil)).Elem()
}

func (o DataSetArrayOutput) ToDataSetArrayOutput() DataSetArrayOutput {
	return o
}

func (o DataSetArrayOutput) ToDataSetArrayOutputWithContext(ctx context.Context) DataSetArrayOutput {
	return o
}

func (o DataSetArrayOutput) Index(i pulumi.IntInput) DataSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataSet {
		return vs[0].([]*DataSet)[vs[1].(int)]
	}).(DataSetOutput)
}

type DataSetMapOutput struct{ *pulumi.OutputState }

func (DataSetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataSet)(nil)).Elem()
}

func (o DataSetMapOutput) ToDataSetMapOutput() DataSetMapOutput {
	return o
}

func (o DataSetMapOutput) ToDataSetMapOutputWithContext(ctx context.Context) DataSetMapOutput {
	return o
}

func (o DataSetMapOutput) MapIndex(k pulumi.StringInput) DataSetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataSet {
		return vs[0].(map[string]*DataSet)[vs[1].(string)]
	}).(DataSetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetInput)(nil)).Elem(), &DataSet{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetArrayInput)(nil)).Elem(), DataSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetMapInput)(nil)).Elem(), DataSetMap{})
	pulumi.RegisterOutputType(DataSetOutput{})
	pulumi.RegisterOutputType(DataSetArrayOutput{})
	pulumi.RegisterOutputType(DataSetMapOutput{})
}
