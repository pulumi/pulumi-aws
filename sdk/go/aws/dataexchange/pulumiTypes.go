// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataexchange

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type EventActionAction struct {
	// Configuration for an Export Revision to S3 action.
	// Described in `exportRevisionToS3` Configuration Block
	ExportRevisionToS3 *EventActionActionExportRevisionToS3 `pulumi:"exportRevisionToS3"`
}

// EventActionActionInput is an input type that accepts EventActionActionArgs and EventActionActionOutput values.
// You can construct a concrete instance of `EventActionActionInput` via:
//
//	EventActionActionArgs{...}
type EventActionActionInput interface {
	pulumi.Input

	ToEventActionActionOutput() EventActionActionOutput
	ToEventActionActionOutputWithContext(context.Context) EventActionActionOutput
}

type EventActionActionArgs struct {
	// Configuration for an Export Revision to S3 action.
	// Described in `exportRevisionToS3` Configuration Block
	ExportRevisionToS3 EventActionActionExportRevisionToS3PtrInput `pulumi:"exportRevisionToS3"`
}

func (EventActionActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventActionAction)(nil)).Elem()
}

func (i EventActionActionArgs) ToEventActionActionOutput() EventActionActionOutput {
	return i.ToEventActionActionOutputWithContext(context.Background())
}

func (i EventActionActionArgs) ToEventActionActionOutputWithContext(ctx context.Context) EventActionActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventActionActionOutput)
}

func (i EventActionActionArgs) ToEventActionActionPtrOutput() EventActionActionPtrOutput {
	return i.ToEventActionActionPtrOutputWithContext(context.Background())
}

func (i EventActionActionArgs) ToEventActionActionPtrOutputWithContext(ctx context.Context) EventActionActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventActionActionOutput).ToEventActionActionPtrOutputWithContext(ctx)
}

// EventActionActionPtrInput is an input type that accepts EventActionActionArgs, EventActionActionPtr and EventActionActionPtrOutput values.
// You can construct a concrete instance of `EventActionActionPtrInput` via:
//
//	        EventActionActionArgs{...}
//
//	or:
//
//	        nil
type EventActionActionPtrInput interface {
	pulumi.Input

	ToEventActionActionPtrOutput() EventActionActionPtrOutput
	ToEventActionActionPtrOutputWithContext(context.Context) EventActionActionPtrOutput
}

type eventActionActionPtrType EventActionActionArgs

func EventActionActionPtr(v *EventActionActionArgs) EventActionActionPtrInput {
	return (*eventActionActionPtrType)(v)
}

func (*eventActionActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventActionAction)(nil)).Elem()
}

func (i *eventActionActionPtrType) ToEventActionActionPtrOutput() EventActionActionPtrOutput {
	return i.ToEventActionActionPtrOutputWithContext(context.Background())
}

func (i *eventActionActionPtrType) ToEventActionActionPtrOutputWithContext(ctx context.Context) EventActionActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventActionActionPtrOutput)
}

type EventActionActionOutput struct{ *pulumi.OutputState }

func (EventActionActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventActionAction)(nil)).Elem()
}

func (o EventActionActionOutput) ToEventActionActionOutput() EventActionActionOutput {
	return o
}

func (o EventActionActionOutput) ToEventActionActionOutputWithContext(ctx context.Context) EventActionActionOutput {
	return o
}

func (o EventActionActionOutput) ToEventActionActionPtrOutput() EventActionActionPtrOutput {
	return o.ToEventActionActionPtrOutputWithContext(context.Background())
}

func (o EventActionActionOutput) ToEventActionActionPtrOutputWithContext(ctx context.Context) EventActionActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventActionAction) *EventActionAction {
		return &v
	}).(EventActionActionPtrOutput)
}

// Configuration for an Export Revision to S3 action.
// Described in `exportRevisionToS3` Configuration Block
func (o EventActionActionOutput) ExportRevisionToS3() EventActionActionExportRevisionToS3PtrOutput {
	return o.ApplyT(func(v EventActionAction) *EventActionActionExportRevisionToS3 { return v.ExportRevisionToS3 }).(EventActionActionExportRevisionToS3PtrOutput)
}

type EventActionActionPtrOutput struct{ *pulumi.OutputState }

func (EventActionActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventActionAction)(nil)).Elem()
}

func (o EventActionActionPtrOutput) ToEventActionActionPtrOutput() EventActionActionPtrOutput {
	return o
}

func (o EventActionActionPtrOutput) ToEventActionActionPtrOutputWithContext(ctx context.Context) EventActionActionPtrOutput {
	return o
}

func (o EventActionActionPtrOutput) Elem() EventActionActionOutput {
	return o.ApplyT(func(v *EventActionAction) EventActionAction {
		if v != nil {
			return *v
		}
		var ret EventActionAction
		return ret
	}).(EventActionActionOutput)
}

// Configuration for an Export Revision to S3 action.
// Described in `exportRevisionToS3` Configuration Block
func (o EventActionActionPtrOutput) ExportRevisionToS3() EventActionActionExportRevisionToS3PtrOutput {
	return o.ApplyT(func(v *EventActionAction) *EventActionActionExportRevisionToS3 {
		if v == nil {
			return nil
		}
		return v.ExportRevisionToS3
	}).(EventActionActionExportRevisionToS3PtrOutput)
}

type EventActionActionExportRevisionToS3 struct {
	// Configures server-side encryption of the exported revision.
	// Described in `encryption` Configuration Block below.
	Encryption *EventActionActionExportRevisionToS3Encryption `pulumi:"encryption"`
	// Configures the S3 destination of the exported revision.
	// Described in `revisionDestination` Configuration Block below.
	RevisionDestination *EventActionActionExportRevisionToS3RevisionDestination `pulumi:"revisionDestination"`
}

// EventActionActionExportRevisionToS3Input is an input type that accepts EventActionActionExportRevisionToS3Args and EventActionActionExportRevisionToS3Output values.
// You can construct a concrete instance of `EventActionActionExportRevisionToS3Input` via:
//
//	EventActionActionExportRevisionToS3Args{...}
type EventActionActionExportRevisionToS3Input interface {
	pulumi.Input

	ToEventActionActionExportRevisionToS3Output() EventActionActionExportRevisionToS3Output
	ToEventActionActionExportRevisionToS3OutputWithContext(context.Context) EventActionActionExportRevisionToS3Output
}

type EventActionActionExportRevisionToS3Args struct {
	// Configures server-side encryption of the exported revision.
	// Described in `encryption` Configuration Block below.
	Encryption EventActionActionExportRevisionToS3EncryptionPtrInput `pulumi:"encryption"`
	// Configures the S3 destination of the exported revision.
	// Described in `revisionDestination` Configuration Block below.
	RevisionDestination EventActionActionExportRevisionToS3RevisionDestinationPtrInput `pulumi:"revisionDestination"`
}

func (EventActionActionExportRevisionToS3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*EventActionActionExportRevisionToS3)(nil)).Elem()
}

func (i EventActionActionExportRevisionToS3Args) ToEventActionActionExportRevisionToS3Output() EventActionActionExportRevisionToS3Output {
	return i.ToEventActionActionExportRevisionToS3OutputWithContext(context.Background())
}

func (i EventActionActionExportRevisionToS3Args) ToEventActionActionExportRevisionToS3OutputWithContext(ctx context.Context) EventActionActionExportRevisionToS3Output {
	return pulumi.ToOutputWithContext(ctx, i).(EventActionActionExportRevisionToS3Output)
}

func (i EventActionActionExportRevisionToS3Args) ToEventActionActionExportRevisionToS3PtrOutput() EventActionActionExportRevisionToS3PtrOutput {
	return i.ToEventActionActionExportRevisionToS3PtrOutputWithContext(context.Background())
}

func (i EventActionActionExportRevisionToS3Args) ToEventActionActionExportRevisionToS3PtrOutputWithContext(ctx context.Context) EventActionActionExportRevisionToS3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventActionActionExportRevisionToS3Output).ToEventActionActionExportRevisionToS3PtrOutputWithContext(ctx)
}

// EventActionActionExportRevisionToS3PtrInput is an input type that accepts EventActionActionExportRevisionToS3Args, EventActionActionExportRevisionToS3Ptr and EventActionActionExportRevisionToS3PtrOutput values.
// You can construct a concrete instance of `EventActionActionExportRevisionToS3PtrInput` via:
//
//	        EventActionActionExportRevisionToS3Args{...}
//
//	or:
//
//	        nil
type EventActionActionExportRevisionToS3PtrInput interface {
	pulumi.Input

	ToEventActionActionExportRevisionToS3PtrOutput() EventActionActionExportRevisionToS3PtrOutput
	ToEventActionActionExportRevisionToS3PtrOutputWithContext(context.Context) EventActionActionExportRevisionToS3PtrOutput
}

type eventActionActionExportRevisionToS3PtrType EventActionActionExportRevisionToS3Args

func EventActionActionExportRevisionToS3Ptr(v *EventActionActionExportRevisionToS3Args) EventActionActionExportRevisionToS3PtrInput {
	return (*eventActionActionExportRevisionToS3PtrType)(v)
}

func (*eventActionActionExportRevisionToS3PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventActionActionExportRevisionToS3)(nil)).Elem()
}

func (i *eventActionActionExportRevisionToS3PtrType) ToEventActionActionExportRevisionToS3PtrOutput() EventActionActionExportRevisionToS3PtrOutput {
	return i.ToEventActionActionExportRevisionToS3PtrOutputWithContext(context.Background())
}

func (i *eventActionActionExportRevisionToS3PtrType) ToEventActionActionExportRevisionToS3PtrOutputWithContext(ctx context.Context) EventActionActionExportRevisionToS3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventActionActionExportRevisionToS3PtrOutput)
}

type EventActionActionExportRevisionToS3Output struct{ *pulumi.OutputState }

func (EventActionActionExportRevisionToS3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*EventActionActionExportRevisionToS3)(nil)).Elem()
}

func (o EventActionActionExportRevisionToS3Output) ToEventActionActionExportRevisionToS3Output() EventActionActionExportRevisionToS3Output {
	return o
}

func (o EventActionActionExportRevisionToS3Output) ToEventActionActionExportRevisionToS3OutputWithContext(ctx context.Context) EventActionActionExportRevisionToS3Output {
	return o
}

func (o EventActionActionExportRevisionToS3Output) ToEventActionActionExportRevisionToS3PtrOutput() EventActionActionExportRevisionToS3PtrOutput {
	return o.ToEventActionActionExportRevisionToS3PtrOutputWithContext(context.Background())
}

func (o EventActionActionExportRevisionToS3Output) ToEventActionActionExportRevisionToS3PtrOutputWithContext(ctx context.Context) EventActionActionExportRevisionToS3PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventActionActionExportRevisionToS3) *EventActionActionExportRevisionToS3 {
		return &v
	}).(EventActionActionExportRevisionToS3PtrOutput)
}

// Configures server-side encryption of the exported revision.
// Described in `encryption` Configuration Block below.
func (o EventActionActionExportRevisionToS3Output) Encryption() EventActionActionExportRevisionToS3EncryptionPtrOutput {
	return o.ApplyT(func(v EventActionActionExportRevisionToS3) *EventActionActionExportRevisionToS3Encryption {
		return v.Encryption
	}).(EventActionActionExportRevisionToS3EncryptionPtrOutput)
}

// Configures the S3 destination of the exported revision.
// Described in `revisionDestination` Configuration Block below.
func (o EventActionActionExportRevisionToS3Output) RevisionDestination() EventActionActionExportRevisionToS3RevisionDestinationPtrOutput {
	return o.ApplyT(func(v EventActionActionExportRevisionToS3) *EventActionActionExportRevisionToS3RevisionDestination {
		return v.RevisionDestination
	}).(EventActionActionExportRevisionToS3RevisionDestinationPtrOutput)
}

type EventActionActionExportRevisionToS3PtrOutput struct{ *pulumi.OutputState }

func (EventActionActionExportRevisionToS3PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventActionActionExportRevisionToS3)(nil)).Elem()
}

func (o EventActionActionExportRevisionToS3PtrOutput) ToEventActionActionExportRevisionToS3PtrOutput() EventActionActionExportRevisionToS3PtrOutput {
	return o
}

func (o EventActionActionExportRevisionToS3PtrOutput) ToEventActionActionExportRevisionToS3PtrOutputWithContext(ctx context.Context) EventActionActionExportRevisionToS3PtrOutput {
	return o
}

func (o EventActionActionExportRevisionToS3PtrOutput) Elem() EventActionActionExportRevisionToS3Output {
	return o.ApplyT(func(v *EventActionActionExportRevisionToS3) EventActionActionExportRevisionToS3 {
		if v != nil {
			return *v
		}
		var ret EventActionActionExportRevisionToS3
		return ret
	}).(EventActionActionExportRevisionToS3Output)
}

// Configures server-side encryption of the exported revision.
// Described in `encryption` Configuration Block below.
func (o EventActionActionExportRevisionToS3PtrOutput) Encryption() EventActionActionExportRevisionToS3EncryptionPtrOutput {
	return o.ApplyT(func(v *EventActionActionExportRevisionToS3) *EventActionActionExportRevisionToS3Encryption {
		if v == nil {
			return nil
		}
		return v.Encryption
	}).(EventActionActionExportRevisionToS3EncryptionPtrOutput)
}

// Configures the S3 destination of the exported revision.
// Described in `revisionDestination` Configuration Block below.
func (o EventActionActionExportRevisionToS3PtrOutput) RevisionDestination() EventActionActionExportRevisionToS3RevisionDestinationPtrOutput {
	return o.ApplyT(func(v *EventActionActionExportRevisionToS3) *EventActionActionExportRevisionToS3RevisionDestination {
		if v == nil {
			return nil
		}
		return v.RevisionDestination
	}).(EventActionActionExportRevisionToS3RevisionDestinationPtrOutput)
}

type EventActionActionExportRevisionToS3Encryption struct {
	// ARN of the KMS key used for encryption.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// Type of server-side encryption.
	// Valid values are `aws:kms` or `aws:s3`.
	Type *string `pulumi:"type"`
}

// EventActionActionExportRevisionToS3EncryptionInput is an input type that accepts EventActionActionExportRevisionToS3EncryptionArgs and EventActionActionExportRevisionToS3EncryptionOutput values.
// You can construct a concrete instance of `EventActionActionExportRevisionToS3EncryptionInput` via:
//
//	EventActionActionExportRevisionToS3EncryptionArgs{...}
type EventActionActionExportRevisionToS3EncryptionInput interface {
	pulumi.Input

	ToEventActionActionExportRevisionToS3EncryptionOutput() EventActionActionExportRevisionToS3EncryptionOutput
	ToEventActionActionExportRevisionToS3EncryptionOutputWithContext(context.Context) EventActionActionExportRevisionToS3EncryptionOutput
}

type EventActionActionExportRevisionToS3EncryptionArgs struct {
	// ARN of the KMS key used for encryption.
	KmsKeyArn pulumi.StringPtrInput `pulumi:"kmsKeyArn"`
	// Type of server-side encryption.
	// Valid values are `aws:kms` or `aws:s3`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (EventActionActionExportRevisionToS3EncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventActionActionExportRevisionToS3Encryption)(nil)).Elem()
}

func (i EventActionActionExportRevisionToS3EncryptionArgs) ToEventActionActionExportRevisionToS3EncryptionOutput() EventActionActionExportRevisionToS3EncryptionOutput {
	return i.ToEventActionActionExportRevisionToS3EncryptionOutputWithContext(context.Background())
}

func (i EventActionActionExportRevisionToS3EncryptionArgs) ToEventActionActionExportRevisionToS3EncryptionOutputWithContext(ctx context.Context) EventActionActionExportRevisionToS3EncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventActionActionExportRevisionToS3EncryptionOutput)
}

func (i EventActionActionExportRevisionToS3EncryptionArgs) ToEventActionActionExportRevisionToS3EncryptionPtrOutput() EventActionActionExportRevisionToS3EncryptionPtrOutput {
	return i.ToEventActionActionExportRevisionToS3EncryptionPtrOutputWithContext(context.Background())
}

func (i EventActionActionExportRevisionToS3EncryptionArgs) ToEventActionActionExportRevisionToS3EncryptionPtrOutputWithContext(ctx context.Context) EventActionActionExportRevisionToS3EncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventActionActionExportRevisionToS3EncryptionOutput).ToEventActionActionExportRevisionToS3EncryptionPtrOutputWithContext(ctx)
}

// EventActionActionExportRevisionToS3EncryptionPtrInput is an input type that accepts EventActionActionExportRevisionToS3EncryptionArgs, EventActionActionExportRevisionToS3EncryptionPtr and EventActionActionExportRevisionToS3EncryptionPtrOutput values.
// You can construct a concrete instance of `EventActionActionExportRevisionToS3EncryptionPtrInput` via:
//
//	        EventActionActionExportRevisionToS3EncryptionArgs{...}
//
//	or:
//
//	        nil
type EventActionActionExportRevisionToS3EncryptionPtrInput interface {
	pulumi.Input

	ToEventActionActionExportRevisionToS3EncryptionPtrOutput() EventActionActionExportRevisionToS3EncryptionPtrOutput
	ToEventActionActionExportRevisionToS3EncryptionPtrOutputWithContext(context.Context) EventActionActionExportRevisionToS3EncryptionPtrOutput
}

type eventActionActionExportRevisionToS3EncryptionPtrType EventActionActionExportRevisionToS3EncryptionArgs

func EventActionActionExportRevisionToS3EncryptionPtr(v *EventActionActionExportRevisionToS3EncryptionArgs) EventActionActionExportRevisionToS3EncryptionPtrInput {
	return (*eventActionActionExportRevisionToS3EncryptionPtrType)(v)
}

func (*eventActionActionExportRevisionToS3EncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventActionActionExportRevisionToS3Encryption)(nil)).Elem()
}

func (i *eventActionActionExportRevisionToS3EncryptionPtrType) ToEventActionActionExportRevisionToS3EncryptionPtrOutput() EventActionActionExportRevisionToS3EncryptionPtrOutput {
	return i.ToEventActionActionExportRevisionToS3EncryptionPtrOutputWithContext(context.Background())
}

func (i *eventActionActionExportRevisionToS3EncryptionPtrType) ToEventActionActionExportRevisionToS3EncryptionPtrOutputWithContext(ctx context.Context) EventActionActionExportRevisionToS3EncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventActionActionExportRevisionToS3EncryptionPtrOutput)
}

type EventActionActionExportRevisionToS3EncryptionOutput struct{ *pulumi.OutputState }

func (EventActionActionExportRevisionToS3EncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventActionActionExportRevisionToS3Encryption)(nil)).Elem()
}

func (o EventActionActionExportRevisionToS3EncryptionOutput) ToEventActionActionExportRevisionToS3EncryptionOutput() EventActionActionExportRevisionToS3EncryptionOutput {
	return o
}

func (o EventActionActionExportRevisionToS3EncryptionOutput) ToEventActionActionExportRevisionToS3EncryptionOutputWithContext(ctx context.Context) EventActionActionExportRevisionToS3EncryptionOutput {
	return o
}

func (o EventActionActionExportRevisionToS3EncryptionOutput) ToEventActionActionExportRevisionToS3EncryptionPtrOutput() EventActionActionExportRevisionToS3EncryptionPtrOutput {
	return o.ToEventActionActionExportRevisionToS3EncryptionPtrOutputWithContext(context.Background())
}

func (o EventActionActionExportRevisionToS3EncryptionOutput) ToEventActionActionExportRevisionToS3EncryptionPtrOutputWithContext(ctx context.Context) EventActionActionExportRevisionToS3EncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventActionActionExportRevisionToS3Encryption) *EventActionActionExportRevisionToS3Encryption {
		return &v
	}).(EventActionActionExportRevisionToS3EncryptionPtrOutput)
}

// ARN of the KMS key used for encryption.
func (o EventActionActionExportRevisionToS3EncryptionOutput) KmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventActionActionExportRevisionToS3Encryption) *string { return v.KmsKeyArn }).(pulumi.StringPtrOutput)
}

// Type of server-side encryption.
// Valid values are `aws:kms` or `aws:s3`.
func (o EventActionActionExportRevisionToS3EncryptionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventActionActionExportRevisionToS3Encryption) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type EventActionActionExportRevisionToS3EncryptionPtrOutput struct{ *pulumi.OutputState }

func (EventActionActionExportRevisionToS3EncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventActionActionExportRevisionToS3Encryption)(nil)).Elem()
}

func (o EventActionActionExportRevisionToS3EncryptionPtrOutput) ToEventActionActionExportRevisionToS3EncryptionPtrOutput() EventActionActionExportRevisionToS3EncryptionPtrOutput {
	return o
}

func (o EventActionActionExportRevisionToS3EncryptionPtrOutput) ToEventActionActionExportRevisionToS3EncryptionPtrOutputWithContext(ctx context.Context) EventActionActionExportRevisionToS3EncryptionPtrOutput {
	return o
}

func (o EventActionActionExportRevisionToS3EncryptionPtrOutput) Elem() EventActionActionExportRevisionToS3EncryptionOutput {
	return o.ApplyT(func(v *EventActionActionExportRevisionToS3Encryption) EventActionActionExportRevisionToS3Encryption {
		if v != nil {
			return *v
		}
		var ret EventActionActionExportRevisionToS3Encryption
		return ret
	}).(EventActionActionExportRevisionToS3EncryptionOutput)
}

// ARN of the KMS key used for encryption.
func (o EventActionActionExportRevisionToS3EncryptionPtrOutput) KmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventActionActionExportRevisionToS3Encryption) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyArn
	}).(pulumi.StringPtrOutput)
}

// Type of server-side encryption.
// Valid values are `aws:kms` or `aws:s3`.
func (o EventActionActionExportRevisionToS3EncryptionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventActionActionExportRevisionToS3Encryption) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type EventActionActionExportRevisionToS3RevisionDestination struct {
	// The S3 bucket where the revision will be exported.
	Bucket string `pulumi:"bucket"`
	// Pattern for naming revisions in the S3 bucket.
	// Defaults to `${Revision.CreatedAt}/${Asset.Name}`.
	KeyPattern *string `pulumi:"keyPattern"`
}

// EventActionActionExportRevisionToS3RevisionDestinationInput is an input type that accepts EventActionActionExportRevisionToS3RevisionDestinationArgs and EventActionActionExportRevisionToS3RevisionDestinationOutput values.
// You can construct a concrete instance of `EventActionActionExportRevisionToS3RevisionDestinationInput` via:
//
//	EventActionActionExportRevisionToS3RevisionDestinationArgs{...}
type EventActionActionExportRevisionToS3RevisionDestinationInput interface {
	pulumi.Input

	ToEventActionActionExportRevisionToS3RevisionDestinationOutput() EventActionActionExportRevisionToS3RevisionDestinationOutput
	ToEventActionActionExportRevisionToS3RevisionDestinationOutputWithContext(context.Context) EventActionActionExportRevisionToS3RevisionDestinationOutput
}

type EventActionActionExportRevisionToS3RevisionDestinationArgs struct {
	// The S3 bucket where the revision will be exported.
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// Pattern for naming revisions in the S3 bucket.
	// Defaults to `${Revision.CreatedAt}/${Asset.Name}`.
	KeyPattern pulumi.StringPtrInput `pulumi:"keyPattern"`
}

func (EventActionActionExportRevisionToS3RevisionDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventActionActionExportRevisionToS3RevisionDestination)(nil)).Elem()
}

func (i EventActionActionExportRevisionToS3RevisionDestinationArgs) ToEventActionActionExportRevisionToS3RevisionDestinationOutput() EventActionActionExportRevisionToS3RevisionDestinationOutput {
	return i.ToEventActionActionExportRevisionToS3RevisionDestinationOutputWithContext(context.Background())
}

func (i EventActionActionExportRevisionToS3RevisionDestinationArgs) ToEventActionActionExportRevisionToS3RevisionDestinationOutputWithContext(ctx context.Context) EventActionActionExportRevisionToS3RevisionDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventActionActionExportRevisionToS3RevisionDestinationOutput)
}

func (i EventActionActionExportRevisionToS3RevisionDestinationArgs) ToEventActionActionExportRevisionToS3RevisionDestinationPtrOutput() EventActionActionExportRevisionToS3RevisionDestinationPtrOutput {
	return i.ToEventActionActionExportRevisionToS3RevisionDestinationPtrOutputWithContext(context.Background())
}

func (i EventActionActionExportRevisionToS3RevisionDestinationArgs) ToEventActionActionExportRevisionToS3RevisionDestinationPtrOutputWithContext(ctx context.Context) EventActionActionExportRevisionToS3RevisionDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventActionActionExportRevisionToS3RevisionDestinationOutput).ToEventActionActionExportRevisionToS3RevisionDestinationPtrOutputWithContext(ctx)
}

// EventActionActionExportRevisionToS3RevisionDestinationPtrInput is an input type that accepts EventActionActionExportRevisionToS3RevisionDestinationArgs, EventActionActionExportRevisionToS3RevisionDestinationPtr and EventActionActionExportRevisionToS3RevisionDestinationPtrOutput values.
// You can construct a concrete instance of `EventActionActionExportRevisionToS3RevisionDestinationPtrInput` via:
//
//	        EventActionActionExportRevisionToS3RevisionDestinationArgs{...}
//
//	or:
//
//	        nil
type EventActionActionExportRevisionToS3RevisionDestinationPtrInput interface {
	pulumi.Input

	ToEventActionActionExportRevisionToS3RevisionDestinationPtrOutput() EventActionActionExportRevisionToS3RevisionDestinationPtrOutput
	ToEventActionActionExportRevisionToS3RevisionDestinationPtrOutputWithContext(context.Context) EventActionActionExportRevisionToS3RevisionDestinationPtrOutput
}

type eventActionActionExportRevisionToS3RevisionDestinationPtrType EventActionActionExportRevisionToS3RevisionDestinationArgs

func EventActionActionExportRevisionToS3RevisionDestinationPtr(v *EventActionActionExportRevisionToS3RevisionDestinationArgs) EventActionActionExportRevisionToS3RevisionDestinationPtrInput {
	return (*eventActionActionExportRevisionToS3RevisionDestinationPtrType)(v)
}

func (*eventActionActionExportRevisionToS3RevisionDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventActionActionExportRevisionToS3RevisionDestination)(nil)).Elem()
}

func (i *eventActionActionExportRevisionToS3RevisionDestinationPtrType) ToEventActionActionExportRevisionToS3RevisionDestinationPtrOutput() EventActionActionExportRevisionToS3RevisionDestinationPtrOutput {
	return i.ToEventActionActionExportRevisionToS3RevisionDestinationPtrOutputWithContext(context.Background())
}

func (i *eventActionActionExportRevisionToS3RevisionDestinationPtrType) ToEventActionActionExportRevisionToS3RevisionDestinationPtrOutputWithContext(ctx context.Context) EventActionActionExportRevisionToS3RevisionDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventActionActionExportRevisionToS3RevisionDestinationPtrOutput)
}

type EventActionActionExportRevisionToS3RevisionDestinationOutput struct{ *pulumi.OutputState }

func (EventActionActionExportRevisionToS3RevisionDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventActionActionExportRevisionToS3RevisionDestination)(nil)).Elem()
}

func (o EventActionActionExportRevisionToS3RevisionDestinationOutput) ToEventActionActionExportRevisionToS3RevisionDestinationOutput() EventActionActionExportRevisionToS3RevisionDestinationOutput {
	return o
}

func (o EventActionActionExportRevisionToS3RevisionDestinationOutput) ToEventActionActionExportRevisionToS3RevisionDestinationOutputWithContext(ctx context.Context) EventActionActionExportRevisionToS3RevisionDestinationOutput {
	return o
}

func (o EventActionActionExportRevisionToS3RevisionDestinationOutput) ToEventActionActionExportRevisionToS3RevisionDestinationPtrOutput() EventActionActionExportRevisionToS3RevisionDestinationPtrOutput {
	return o.ToEventActionActionExportRevisionToS3RevisionDestinationPtrOutputWithContext(context.Background())
}

func (o EventActionActionExportRevisionToS3RevisionDestinationOutput) ToEventActionActionExportRevisionToS3RevisionDestinationPtrOutputWithContext(ctx context.Context) EventActionActionExportRevisionToS3RevisionDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventActionActionExportRevisionToS3RevisionDestination) *EventActionActionExportRevisionToS3RevisionDestination {
		return &v
	}).(EventActionActionExportRevisionToS3RevisionDestinationPtrOutput)
}

// The S3 bucket where the revision will be exported.
func (o EventActionActionExportRevisionToS3RevisionDestinationOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v EventActionActionExportRevisionToS3RevisionDestination) string { return v.Bucket }).(pulumi.StringOutput)
}

// Pattern for naming revisions in the S3 bucket.
// Defaults to `${Revision.CreatedAt}/${Asset.Name}`.
func (o EventActionActionExportRevisionToS3RevisionDestinationOutput) KeyPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventActionActionExportRevisionToS3RevisionDestination) *string { return v.KeyPattern }).(pulumi.StringPtrOutput)
}

type EventActionActionExportRevisionToS3RevisionDestinationPtrOutput struct{ *pulumi.OutputState }

func (EventActionActionExportRevisionToS3RevisionDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventActionActionExportRevisionToS3RevisionDestination)(nil)).Elem()
}

func (o EventActionActionExportRevisionToS3RevisionDestinationPtrOutput) ToEventActionActionExportRevisionToS3RevisionDestinationPtrOutput() EventActionActionExportRevisionToS3RevisionDestinationPtrOutput {
	return o
}

func (o EventActionActionExportRevisionToS3RevisionDestinationPtrOutput) ToEventActionActionExportRevisionToS3RevisionDestinationPtrOutputWithContext(ctx context.Context) EventActionActionExportRevisionToS3RevisionDestinationPtrOutput {
	return o
}

func (o EventActionActionExportRevisionToS3RevisionDestinationPtrOutput) Elem() EventActionActionExportRevisionToS3RevisionDestinationOutput {
	return o.ApplyT(func(v *EventActionActionExportRevisionToS3RevisionDestination) EventActionActionExportRevisionToS3RevisionDestination {
		if v != nil {
			return *v
		}
		var ret EventActionActionExportRevisionToS3RevisionDestination
		return ret
	}).(EventActionActionExportRevisionToS3RevisionDestinationOutput)
}

// The S3 bucket where the revision will be exported.
func (o EventActionActionExportRevisionToS3RevisionDestinationPtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventActionActionExportRevisionToS3RevisionDestination) *string {
		if v == nil {
			return nil
		}
		return &v.Bucket
	}).(pulumi.StringPtrOutput)
}

// Pattern for naming revisions in the S3 bucket.
// Defaults to `${Revision.CreatedAt}/${Asset.Name}`.
func (o EventActionActionExportRevisionToS3RevisionDestinationPtrOutput) KeyPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventActionActionExportRevisionToS3RevisionDestination) *string {
		if v == nil {
			return nil
		}
		return v.KeyPattern
	}).(pulumi.StringPtrOutput)
}

type EventActionEvent struct {
	// Configuration for a Revision Published event.
	// Described in `revisionPublished` Configuration Block below.
	RevisionPublished *EventActionEventRevisionPublished `pulumi:"revisionPublished"`
}

// EventActionEventInput is an input type that accepts EventActionEventArgs and EventActionEventOutput values.
// You can construct a concrete instance of `EventActionEventInput` via:
//
//	EventActionEventArgs{...}
type EventActionEventInput interface {
	pulumi.Input

	ToEventActionEventOutput() EventActionEventOutput
	ToEventActionEventOutputWithContext(context.Context) EventActionEventOutput
}

type EventActionEventArgs struct {
	// Configuration for a Revision Published event.
	// Described in `revisionPublished` Configuration Block below.
	RevisionPublished EventActionEventRevisionPublishedPtrInput `pulumi:"revisionPublished"`
}

func (EventActionEventArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventActionEvent)(nil)).Elem()
}

func (i EventActionEventArgs) ToEventActionEventOutput() EventActionEventOutput {
	return i.ToEventActionEventOutputWithContext(context.Background())
}

func (i EventActionEventArgs) ToEventActionEventOutputWithContext(ctx context.Context) EventActionEventOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventActionEventOutput)
}

func (i EventActionEventArgs) ToEventActionEventPtrOutput() EventActionEventPtrOutput {
	return i.ToEventActionEventPtrOutputWithContext(context.Background())
}

func (i EventActionEventArgs) ToEventActionEventPtrOutputWithContext(ctx context.Context) EventActionEventPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventActionEventOutput).ToEventActionEventPtrOutputWithContext(ctx)
}

// EventActionEventPtrInput is an input type that accepts EventActionEventArgs, EventActionEventPtr and EventActionEventPtrOutput values.
// You can construct a concrete instance of `EventActionEventPtrInput` via:
//
//	        EventActionEventArgs{...}
//
//	or:
//
//	        nil
type EventActionEventPtrInput interface {
	pulumi.Input

	ToEventActionEventPtrOutput() EventActionEventPtrOutput
	ToEventActionEventPtrOutputWithContext(context.Context) EventActionEventPtrOutput
}

type eventActionEventPtrType EventActionEventArgs

func EventActionEventPtr(v *EventActionEventArgs) EventActionEventPtrInput {
	return (*eventActionEventPtrType)(v)
}

func (*eventActionEventPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventActionEvent)(nil)).Elem()
}

func (i *eventActionEventPtrType) ToEventActionEventPtrOutput() EventActionEventPtrOutput {
	return i.ToEventActionEventPtrOutputWithContext(context.Background())
}

func (i *eventActionEventPtrType) ToEventActionEventPtrOutputWithContext(ctx context.Context) EventActionEventPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventActionEventPtrOutput)
}

type EventActionEventOutput struct{ *pulumi.OutputState }

func (EventActionEventOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventActionEvent)(nil)).Elem()
}

func (o EventActionEventOutput) ToEventActionEventOutput() EventActionEventOutput {
	return o
}

func (o EventActionEventOutput) ToEventActionEventOutputWithContext(ctx context.Context) EventActionEventOutput {
	return o
}

func (o EventActionEventOutput) ToEventActionEventPtrOutput() EventActionEventPtrOutput {
	return o.ToEventActionEventPtrOutputWithContext(context.Background())
}

func (o EventActionEventOutput) ToEventActionEventPtrOutputWithContext(ctx context.Context) EventActionEventPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventActionEvent) *EventActionEvent {
		return &v
	}).(EventActionEventPtrOutput)
}

// Configuration for a Revision Published event.
// Described in `revisionPublished` Configuration Block below.
func (o EventActionEventOutput) RevisionPublished() EventActionEventRevisionPublishedPtrOutput {
	return o.ApplyT(func(v EventActionEvent) *EventActionEventRevisionPublished { return v.RevisionPublished }).(EventActionEventRevisionPublishedPtrOutput)
}

type EventActionEventPtrOutput struct{ *pulumi.OutputState }

func (EventActionEventPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventActionEvent)(nil)).Elem()
}

func (o EventActionEventPtrOutput) ToEventActionEventPtrOutput() EventActionEventPtrOutput {
	return o
}

func (o EventActionEventPtrOutput) ToEventActionEventPtrOutputWithContext(ctx context.Context) EventActionEventPtrOutput {
	return o
}

func (o EventActionEventPtrOutput) Elem() EventActionEventOutput {
	return o.ApplyT(func(v *EventActionEvent) EventActionEvent {
		if v != nil {
			return *v
		}
		var ret EventActionEvent
		return ret
	}).(EventActionEventOutput)
}

// Configuration for a Revision Published event.
// Described in `revisionPublished` Configuration Block below.
func (o EventActionEventPtrOutput) RevisionPublished() EventActionEventRevisionPublishedPtrOutput {
	return o.ApplyT(func(v *EventActionEvent) *EventActionEventRevisionPublished {
		if v == nil {
			return nil
		}
		return v.RevisionPublished
	}).(EventActionEventRevisionPublishedPtrOutput)
}

type EventActionEventRevisionPublished struct {
	// The ID of the data set to monitor for revision publications.
	// Changing this value will recreate the resource.
	DataSetId string `pulumi:"dataSetId"`
}

// EventActionEventRevisionPublishedInput is an input type that accepts EventActionEventRevisionPublishedArgs and EventActionEventRevisionPublishedOutput values.
// You can construct a concrete instance of `EventActionEventRevisionPublishedInput` via:
//
//	EventActionEventRevisionPublishedArgs{...}
type EventActionEventRevisionPublishedInput interface {
	pulumi.Input

	ToEventActionEventRevisionPublishedOutput() EventActionEventRevisionPublishedOutput
	ToEventActionEventRevisionPublishedOutputWithContext(context.Context) EventActionEventRevisionPublishedOutput
}

type EventActionEventRevisionPublishedArgs struct {
	// The ID of the data set to monitor for revision publications.
	// Changing this value will recreate the resource.
	DataSetId pulumi.StringInput `pulumi:"dataSetId"`
}

func (EventActionEventRevisionPublishedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventActionEventRevisionPublished)(nil)).Elem()
}

func (i EventActionEventRevisionPublishedArgs) ToEventActionEventRevisionPublishedOutput() EventActionEventRevisionPublishedOutput {
	return i.ToEventActionEventRevisionPublishedOutputWithContext(context.Background())
}

func (i EventActionEventRevisionPublishedArgs) ToEventActionEventRevisionPublishedOutputWithContext(ctx context.Context) EventActionEventRevisionPublishedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventActionEventRevisionPublishedOutput)
}

func (i EventActionEventRevisionPublishedArgs) ToEventActionEventRevisionPublishedPtrOutput() EventActionEventRevisionPublishedPtrOutput {
	return i.ToEventActionEventRevisionPublishedPtrOutputWithContext(context.Background())
}

func (i EventActionEventRevisionPublishedArgs) ToEventActionEventRevisionPublishedPtrOutputWithContext(ctx context.Context) EventActionEventRevisionPublishedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventActionEventRevisionPublishedOutput).ToEventActionEventRevisionPublishedPtrOutputWithContext(ctx)
}

// EventActionEventRevisionPublishedPtrInput is an input type that accepts EventActionEventRevisionPublishedArgs, EventActionEventRevisionPublishedPtr and EventActionEventRevisionPublishedPtrOutput values.
// You can construct a concrete instance of `EventActionEventRevisionPublishedPtrInput` via:
//
//	        EventActionEventRevisionPublishedArgs{...}
//
//	or:
//
//	        nil
type EventActionEventRevisionPublishedPtrInput interface {
	pulumi.Input

	ToEventActionEventRevisionPublishedPtrOutput() EventActionEventRevisionPublishedPtrOutput
	ToEventActionEventRevisionPublishedPtrOutputWithContext(context.Context) EventActionEventRevisionPublishedPtrOutput
}

type eventActionEventRevisionPublishedPtrType EventActionEventRevisionPublishedArgs

func EventActionEventRevisionPublishedPtr(v *EventActionEventRevisionPublishedArgs) EventActionEventRevisionPublishedPtrInput {
	return (*eventActionEventRevisionPublishedPtrType)(v)
}

func (*eventActionEventRevisionPublishedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventActionEventRevisionPublished)(nil)).Elem()
}

func (i *eventActionEventRevisionPublishedPtrType) ToEventActionEventRevisionPublishedPtrOutput() EventActionEventRevisionPublishedPtrOutput {
	return i.ToEventActionEventRevisionPublishedPtrOutputWithContext(context.Background())
}

func (i *eventActionEventRevisionPublishedPtrType) ToEventActionEventRevisionPublishedPtrOutputWithContext(ctx context.Context) EventActionEventRevisionPublishedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventActionEventRevisionPublishedPtrOutput)
}

type EventActionEventRevisionPublishedOutput struct{ *pulumi.OutputState }

func (EventActionEventRevisionPublishedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventActionEventRevisionPublished)(nil)).Elem()
}

func (o EventActionEventRevisionPublishedOutput) ToEventActionEventRevisionPublishedOutput() EventActionEventRevisionPublishedOutput {
	return o
}

func (o EventActionEventRevisionPublishedOutput) ToEventActionEventRevisionPublishedOutputWithContext(ctx context.Context) EventActionEventRevisionPublishedOutput {
	return o
}

func (o EventActionEventRevisionPublishedOutput) ToEventActionEventRevisionPublishedPtrOutput() EventActionEventRevisionPublishedPtrOutput {
	return o.ToEventActionEventRevisionPublishedPtrOutputWithContext(context.Background())
}

func (o EventActionEventRevisionPublishedOutput) ToEventActionEventRevisionPublishedPtrOutputWithContext(ctx context.Context) EventActionEventRevisionPublishedPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventActionEventRevisionPublished) *EventActionEventRevisionPublished {
		return &v
	}).(EventActionEventRevisionPublishedPtrOutput)
}

// The ID of the data set to monitor for revision publications.
// Changing this value will recreate the resource.
func (o EventActionEventRevisionPublishedOutput) DataSetId() pulumi.StringOutput {
	return o.ApplyT(func(v EventActionEventRevisionPublished) string { return v.DataSetId }).(pulumi.StringOutput)
}

type EventActionEventRevisionPublishedPtrOutput struct{ *pulumi.OutputState }

func (EventActionEventRevisionPublishedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventActionEventRevisionPublished)(nil)).Elem()
}

func (o EventActionEventRevisionPublishedPtrOutput) ToEventActionEventRevisionPublishedPtrOutput() EventActionEventRevisionPublishedPtrOutput {
	return o
}

func (o EventActionEventRevisionPublishedPtrOutput) ToEventActionEventRevisionPublishedPtrOutputWithContext(ctx context.Context) EventActionEventRevisionPublishedPtrOutput {
	return o
}

func (o EventActionEventRevisionPublishedPtrOutput) Elem() EventActionEventRevisionPublishedOutput {
	return o.ApplyT(func(v *EventActionEventRevisionPublished) EventActionEventRevisionPublished {
		if v != nil {
			return *v
		}
		var ret EventActionEventRevisionPublished
		return ret
	}).(EventActionEventRevisionPublishedOutput)
}

// The ID of the data set to monitor for revision publications.
// Changing this value will recreate the resource.
func (o EventActionEventRevisionPublishedPtrOutput) DataSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventActionEventRevisionPublished) *string {
		if v == nil {
			return nil
		}
		return &v.DataSetId
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventActionActionInput)(nil)).Elem(), EventActionActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventActionActionPtrInput)(nil)).Elem(), EventActionActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventActionActionExportRevisionToS3Input)(nil)).Elem(), EventActionActionExportRevisionToS3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventActionActionExportRevisionToS3PtrInput)(nil)).Elem(), EventActionActionExportRevisionToS3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventActionActionExportRevisionToS3EncryptionInput)(nil)).Elem(), EventActionActionExportRevisionToS3EncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventActionActionExportRevisionToS3EncryptionPtrInput)(nil)).Elem(), EventActionActionExportRevisionToS3EncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventActionActionExportRevisionToS3RevisionDestinationInput)(nil)).Elem(), EventActionActionExportRevisionToS3RevisionDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventActionActionExportRevisionToS3RevisionDestinationPtrInput)(nil)).Elem(), EventActionActionExportRevisionToS3RevisionDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventActionEventInput)(nil)).Elem(), EventActionEventArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventActionEventPtrInput)(nil)).Elem(), EventActionEventArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventActionEventRevisionPublishedInput)(nil)).Elem(), EventActionEventRevisionPublishedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventActionEventRevisionPublishedPtrInput)(nil)).Elem(), EventActionEventRevisionPublishedArgs{})
	pulumi.RegisterOutputType(EventActionActionOutput{})
	pulumi.RegisterOutputType(EventActionActionPtrOutput{})
	pulumi.RegisterOutputType(EventActionActionExportRevisionToS3Output{})
	pulumi.RegisterOutputType(EventActionActionExportRevisionToS3PtrOutput{})
	pulumi.RegisterOutputType(EventActionActionExportRevisionToS3EncryptionOutput{})
	pulumi.RegisterOutputType(EventActionActionExportRevisionToS3EncryptionPtrOutput{})
	pulumi.RegisterOutputType(EventActionActionExportRevisionToS3RevisionDestinationOutput{})
	pulumi.RegisterOutputType(EventActionActionExportRevisionToS3RevisionDestinationPtrOutput{})
	pulumi.RegisterOutputType(EventActionEventOutput{})
	pulumi.RegisterOutputType(EventActionEventPtrOutput{})
	pulumi.RegisterOutputType(EventActionEventRevisionPublishedOutput{})
	pulumi.RegisterOutputType(EventActionEventRevisionPublishedPtrOutput{})
}
