// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataexchange

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS Data Exchange Event Action.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/dataexchange"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataexchange.NewEventAction(ctx, "example", &dataexchange.EventActionArgs{
//				Event: &dataexchange.EventActionEventArgs{
//					RevisionPublished: &dataexchange.EventActionEventRevisionPublishedArgs{
//						DataSetId: pulumi.Any(exampleAwsDataexchangeDataSet.Id),
//					},
//				},
//				Action: &dataexchange.EventActionActionArgs{
//					ExportRevisionToS3: &dataexchange.EventActionActionExportRevisionToS3Args{
//						RevisionDestination: &dataexchange.EventActionActionExportRevisionToS3RevisionDestinationArgs{
//							Bucket:     pulumi.Any(exampleAwsS3Bucket.Bucket),
//							KeyPattern: pulumi.String("${Revision.CreatedAt}/${Asset.Name}"),
//						},
//						Encryption: &dataexchange.EventActionActionExportRevisionToS3EncryptionArgs{
//							Type:      pulumi.String("aws:kms"),
//							KmsKeyArn: pulumi.Any(exampleAwsKmsKey.Arn),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Data Exchange Event Action using the id. For example:
//
// ```sh
// $ pulumi import aws:dataexchange/eventAction:EventAction example example-event-action-id
// ```
type EventAction struct {
	pulumi.CustomResourceState

	// Describes the action to take.
	// Described in `action` Configuration Block below.
	Action EventActionActionPtrOutput `pulumi:"action"`
	// Amazon Resource Name (ARN) of the event action.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Date and time when the resource was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Describes the event that triggers the `action`.
	// Described in `event` Configuration Block below.
	Event EventActionEventPtrOutput `pulumi:"event"`
	// Data and time when the resource was last updated.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewEventAction registers a new resource with the given unique name, arguments, and options.
func NewEventAction(ctx *pulumi.Context,
	name string, args *EventActionArgs, opts ...pulumi.ResourceOption) (*EventAction, error) {
	if args == nil {
		args = &EventActionArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EventAction
	err := ctx.RegisterResource("aws:dataexchange/eventAction:EventAction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventAction gets an existing EventAction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventAction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventActionState, opts ...pulumi.ResourceOption) (*EventAction, error) {
	var resource EventAction
	err := ctx.ReadResource("aws:dataexchange/eventAction:EventAction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventAction resources.
type eventActionState struct {
	// Describes the action to take.
	// Described in `action` Configuration Block below.
	Action *EventActionAction `pulumi:"action"`
	// Amazon Resource Name (ARN) of the event action.
	Arn *string `pulumi:"arn"`
	// Date and time when the resource was created.
	CreatedAt *string `pulumi:"createdAt"`
	// Describes the event that triggers the `action`.
	// Described in `event` Configuration Block below.
	Event *EventActionEvent `pulumi:"event"`
	// Data and time when the resource was last updated.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type EventActionState struct {
	// Describes the action to take.
	// Described in `action` Configuration Block below.
	Action EventActionActionPtrInput
	// Amazon Resource Name (ARN) of the event action.
	Arn pulumi.StringPtrInput
	// Date and time when the resource was created.
	CreatedAt pulumi.StringPtrInput
	// Describes the event that triggers the `action`.
	// Described in `event` Configuration Block below.
	Event EventActionEventPtrInput
	// Data and time when the resource was last updated.
	UpdatedAt pulumi.StringPtrInput
}

func (EventActionState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventActionState)(nil)).Elem()
}

type eventActionArgs struct {
	// Describes the action to take.
	// Described in `action` Configuration Block below.
	Action *EventActionAction `pulumi:"action"`
	// Describes the event that triggers the `action`.
	// Described in `event` Configuration Block below.
	Event *EventActionEvent `pulumi:"event"`
}

// The set of arguments for constructing a EventAction resource.
type EventActionArgs struct {
	// Describes the action to take.
	// Described in `action` Configuration Block below.
	Action EventActionActionPtrInput
	// Describes the event that triggers the `action`.
	// Described in `event` Configuration Block below.
	Event EventActionEventPtrInput
}

func (EventActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventActionArgs)(nil)).Elem()
}

type EventActionInput interface {
	pulumi.Input

	ToEventActionOutput() EventActionOutput
	ToEventActionOutputWithContext(ctx context.Context) EventActionOutput
}

func (*EventAction) ElementType() reflect.Type {
	return reflect.TypeOf((**EventAction)(nil)).Elem()
}

func (i *EventAction) ToEventActionOutput() EventActionOutput {
	return i.ToEventActionOutputWithContext(context.Background())
}

func (i *EventAction) ToEventActionOutputWithContext(ctx context.Context) EventActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventActionOutput)
}

// EventActionArrayInput is an input type that accepts EventActionArray and EventActionArrayOutput values.
// You can construct a concrete instance of `EventActionArrayInput` via:
//
//	EventActionArray{ EventActionArgs{...} }
type EventActionArrayInput interface {
	pulumi.Input

	ToEventActionArrayOutput() EventActionArrayOutput
	ToEventActionArrayOutputWithContext(context.Context) EventActionArrayOutput
}

type EventActionArray []EventActionInput

func (EventActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventAction)(nil)).Elem()
}

func (i EventActionArray) ToEventActionArrayOutput() EventActionArrayOutput {
	return i.ToEventActionArrayOutputWithContext(context.Background())
}

func (i EventActionArray) ToEventActionArrayOutputWithContext(ctx context.Context) EventActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventActionArrayOutput)
}

// EventActionMapInput is an input type that accepts EventActionMap and EventActionMapOutput values.
// You can construct a concrete instance of `EventActionMapInput` via:
//
//	EventActionMap{ "key": EventActionArgs{...} }
type EventActionMapInput interface {
	pulumi.Input

	ToEventActionMapOutput() EventActionMapOutput
	ToEventActionMapOutputWithContext(context.Context) EventActionMapOutput
}

type EventActionMap map[string]EventActionInput

func (EventActionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventAction)(nil)).Elem()
}

func (i EventActionMap) ToEventActionMapOutput() EventActionMapOutput {
	return i.ToEventActionMapOutputWithContext(context.Background())
}

func (i EventActionMap) ToEventActionMapOutputWithContext(ctx context.Context) EventActionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventActionMapOutput)
}

type EventActionOutput struct{ *pulumi.OutputState }

func (EventActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventAction)(nil)).Elem()
}

func (o EventActionOutput) ToEventActionOutput() EventActionOutput {
	return o
}

func (o EventActionOutput) ToEventActionOutputWithContext(ctx context.Context) EventActionOutput {
	return o
}

// Describes the action to take.
// Described in `action` Configuration Block below.
func (o EventActionOutput) Action() EventActionActionPtrOutput {
	return o.ApplyT(func(v *EventAction) EventActionActionPtrOutput { return v.Action }).(EventActionActionPtrOutput)
}

// Amazon Resource Name (ARN) of the event action.
func (o EventActionOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *EventAction) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Date and time when the resource was created.
func (o EventActionOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *EventAction) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Describes the event that triggers the `action`.
// Described in `event` Configuration Block below.
func (o EventActionOutput) Event() EventActionEventPtrOutput {
	return o.ApplyT(func(v *EventAction) EventActionEventPtrOutput { return v.Event }).(EventActionEventPtrOutput)
}

// Data and time when the resource was last updated.
func (o EventActionOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *EventAction) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type EventActionArrayOutput struct{ *pulumi.OutputState }

func (EventActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventAction)(nil)).Elem()
}

func (o EventActionArrayOutput) ToEventActionArrayOutput() EventActionArrayOutput {
	return o
}

func (o EventActionArrayOutput) ToEventActionArrayOutputWithContext(ctx context.Context) EventActionArrayOutput {
	return o
}

func (o EventActionArrayOutput) Index(i pulumi.IntInput) EventActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EventAction {
		return vs[0].([]*EventAction)[vs[1].(int)]
	}).(EventActionOutput)
}

type EventActionMapOutput struct{ *pulumi.OutputState }

func (EventActionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventAction)(nil)).Elem()
}

func (o EventActionMapOutput) ToEventActionMapOutput() EventActionMapOutput {
	return o
}

func (o EventActionMapOutput) ToEventActionMapOutputWithContext(ctx context.Context) EventActionMapOutput {
	return o
}

func (o EventActionMapOutput) MapIndex(k pulumi.StringInput) EventActionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EventAction {
		return vs[0].(map[string]*EventAction)[vs[1].(string)]
	}).(EventActionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventActionInput)(nil)).Elem(), &EventAction{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventActionArrayInput)(nil)).Elem(), EventActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventActionMapInput)(nil)).Elem(), EventActionMap{})
	pulumi.RegisterOutputType(EventActionOutput{})
	pulumi.RegisterOutputType(EventActionArrayOutput{})
	pulumi.RegisterOutputType(EventActionMapOutput{})
}
