// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2clientvpn

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AWS Client VPN endpoint for OpenVPN clients. For more information on usage, please see the
// [AWS Client VPN Administrator's Guide](https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/what-is.html).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2clientvpn"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ec2clientvpn.NewEndpoint(ctx, "example", &ec2clientvpn.EndpointArgs{
//				Description:          pulumi.String("clientvpn-example"),
//				ServerCertificateArn: pulumi.Any(aws_acm_certificate.Cert.Arn),
//				ClientCidrBlock:      pulumi.String("10.0.0.0/16"),
//				AuthenticationOptions: ec2clientvpn.EndpointAuthenticationOptionArray{
//					&ec2clientvpn.EndpointAuthenticationOptionArgs{
//						Type:                    pulumi.String("certificate-authentication"),
//						RootCertificateChainArn: pulumi.Any(aws_acm_certificate.Root_cert.Arn),
//					},
//				},
//				ConnectionLogOptions: &ec2clientvpn.EndpointConnectionLogOptionsArgs{
//					Enabled:             pulumi.Bool(true),
//					CloudwatchLogGroup:  pulumi.Any(aws_cloudwatch_log_group.Lg.Name),
//					CloudwatchLogStream: pulumi.Any(aws_cloudwatch_log_stream.Ls.Name),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import AWS Client VPN endpoints using the `id` value found via `aws ec2 describe-client-vpn-endpoints`. For example:
//
// ```sh
//
//	$ pulumi import aws:ec2clientvpn/endpoint:Endpoint example cvpn-endpoint-0ac3a1abbccddd666
//
// ```
type Endpoint struct {
	pulumi.CustomResourceState

	// The ARN of the Client VPN endpoint.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Information about the authentication method to be used to authenticate clients.
	AuthenticationOptions EndpointAuthenticationOptionArrayOutput `pulumi:"authenticationOptions"`
	// The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater.
	ClientCidrBlock pulumi.StringOutput `pulumi:"clientCidrBlock"`
	// The options for managing connection authorization for new client connections.
	ClientConnectOptions EndpointClientConnectOptionsOutput `pulumi:"clientConnectOptions"`
	// Options for enabling a customizable text banner that will be displayed on AWS provided clients when a VPN session is established.
	ClientLoginBannerOptions EndpointClientLoginBannerOptionsOutput `pulumi:"clientLoginBannerOptions"`
	// Information about the client connection logging options.
	ConnectionLogOptions EndpointConnectionLogOptionsOutput `pulumi:"connectionLogOptions"`
	// A brief description of the Client VPN endpoint.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The DNS name to be used by clients when establishing their VPN session.
	DnsName pulumi.StringOutput `pulumi:"dnsName"`
	// Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can have up to two DNS servers. If no DNS server is specified, the DNS address of the connecting device is used.
	DnsServers pulumi.StringArrayOutput `pulumi:"dnsServers"`
	// The IDs of one or more security groups to apply to the target network. You must also specify the ID of the VPC that contains the security groups.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// Specify whether to enable the self-service portal for the Client VPN endpoint. Values can be `enabled` or `disabled`. Default value is `disabled`.
	SelfServicePortal pulumi.StringPtrOutput `pulumi:"selfServicePortal"`
	// The URL of the self-service portal.
	SelfServicePortalUrl pulumi.StringOutput `pulumi:"selfServicePortalUrl"`
	// The ARN of the ACM server certificate.
	ServerCertificateArn pulumi.StringOutput `pulumi:"serverCertificateArn"`
	// The maximum session duration is a trigger by which end-users are required to re-authenticate prior to establishing a VPN session. Default value is `24` - Valid values: `8 | 10 | 12 | 24`
	SessionTimeoutHours pulumi.IntPtrOutput `pulumi:"sessionTimeoutHours"`
	// Indicates whether split-tunnel is enabled on VPN endpoint. Default value is `false`.
	SplitTunnel pulumi.BoolPtrOutput `pulumi:"splitTunnel"`
	// A mapping of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// The transport protocol to be used by the VPN session. Default value is `udp`.
	TransportProtocol pulumi.StringPtrOutput `pulumi:"transportProtocol"`
	// The ID of the VPC to associate with the Client VPN endpoint. If no security group IDs are specified in the request, the default security group for the VPC is applied.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// The port number for the Client VPN endpoint. Valid values are `443` and `1194`. Default value is `443`.
	VpnPort pulumi.IntPtrOutput `pulumi:"vpnPort"`
}

// NewEndpoint registers a new resource with the given unique name, arguments, and options.
func NewEndpoint(ctx *pulumi.Context,
	name string, args *EndpointArgs, opts ...pulumi.ResourceOption) (*Endpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthenticationOptions == nil {
		return nil, errors.New("invalid value for required argument 'AuthenticationOptions'")
	}
	if args.ClientCidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'ClientCidrBlock'")
	}
	if args.ConnectionLogOptions == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionLogOptions'")
	}
	if args.ServerCertificateArn == nil {
		return nil, errors.New("invalid value for required argument 'ServerCertificateArn'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"tagsAll",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Endpoint
	err := ctx.RegisterResource("aws:ec2clientvpn/endpoint:Endpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEndpoint gets an existing Endpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EndpointState, opts ...pulumi.ResourceOption) (*Endpoint, error) {
	var resource Endpoint
	err := ctx.ReadResource("aws:ec2clientvpn/endpoint:Endpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Endpoint resources.
type endpointState struct {
	// The ARN of the Client VPN endpoint.
	Arn *string `pulumi:"arn"`
	// Information about the authentication method to be used to authenticate clients.
	AuthenticationOptions []EndpointAuthenticationOption `pulumi:"authenticationOptions"`
	// The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater.
	ClientCidrBlock *string `pulumi:"clientCidrBlock"`
	// The options for managing connection authorization for new client connections.
	ClientConnectOptions *EndpointClientConnectOptions `pulumi:"clientConnectOptions"`
	// Options for enabling a customizable text banner that will be displayed on AWS provided clients when a VPN session is established.
	ClientLoginBannerOptions *EndpointClientLoginBannerOptions `pulumi:"clientLoginBannerOptions"`
	// Information about the client connection logging options.
	ConnectionLogOptions *EndpointConnectionLogOptions `pulumi:"connectionLogOptions"`
	// A brief description of the Client VPN endpoint.
	Description *string `pulumi:"description"`
	// The DNS name to be used by clients when establishing their VPN session.
	DnsName *string `pulumi:"dnsName"`
	// Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can have up to two DNS servers. If no DNS server is specified, the DNS address of the connecting device is used.
	DnsServers []string `pulumi:"dnsServers"`
	// The IDs of one or more security groups to apply to the target network. You must also specify the ID of the VPC that contains the security groups.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Specify whether to enable the self-service portal for the Client VPN endpoint. Values can be `enabled` or `disabled`. Default value is `disabled`.
	SelfServicePortal *string `pulumi:"selfServicePortal"`
	// The URL of the self-service portal.
	SelfServicePortalUrl *string `pulumi:"selfServicePortalUrl"`
	// The ARN of the ACM server certificate.
	ServerCertificateArn *string `pulumi:"serverCertificateArn"`
	// The maximum session duration is a trigger by which end-users are required to re-authenticate prior to establishing a VPN session. Default value is `24` - Valid values: `8 | 10 | 12 | 24`
	SessionTimeoutHours *int `pulumi:"sessionTimeoutHours"`
	// Indicates whether split-tunnel is enabled on VPN endpoint. Default value is `false`.
	SplitTunnel *bool `pulumi:"splitTunnel"`
	// A mapping of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The transport protocol to be used by the VPN session. Default value is `udp`.
	TransportProtocol *string `pulumi:"transportProtocol"`
	// The ID of the VPC to associate with the Client VPN endpoint. If no security group IDs are specified in the request, the default security group for the VPC is applied.
	VpcId *string `pulumi:"vpcId"`
	// The port number for the Client VPN endpoint. Valid values are `443` and `1194`. Default value is `443`.
	VpnPort *int `pulumi:"vpnPort"`
}

type EndpointState struct {
	// The ARN of the Client VPN endpoint.
	Arn pulumi.StringPtrInput
	// Information about the authentication method to be used to authenticate clients.
	AuthenticationOptions EndpointAuthenticationOptionArrayInput
	// The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater.
	ClientCidrBlock pulumi.StringPtrInput
	// The options for managing connection authorization for new client connections.
	ClientConnectOptions EndpointClientConnectOptionsPtrInput
	// Options for enabling a customizable text banner that will be displayed on AWS provided clients when a VPN session is established.
	ClientLoginBannerOptions EndpointClientLoginBannerOptionsPtrInput
	// Information about the client connection logging options.
	ConnectionLogOptions EndpointConnectionLogOptionsPtrInput
	// A brief description of the Client VPN endpoint.
	Description pulumi.StringPtrInput
	// The DNS name to be used by clients when establishing their VPN session.
	DnsName pulumi.StringPtrInput
	// Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can have up to two DNS servers. If no DNS server is specified, the DNS address of the connecting device is used.
	DnsServers pulumi.StringArrayInput
	// The IDs of one or more security groups to apply to the target network. You must also specify the ID of the VPC that contains the security groups.
	SecurityGroupIds pulumi.StringArrayInput
	// Specify whether to enable the self-service portal for the Client VPN endpoint. Values can be `enabled` or `disabled`. Default value is `disabled`.
	SelfServicePortal pulumi.StringPtrInput
	// The URL of the self-service portal.
	SelfServicePortalUrl pulumi.StringPtrInput
	// The ARN of the ACM server certificate.
	ServerCertificateArn pulumi.StringPtrInput
	// The maximum session duration is a trigger by which end-users are required to re-authenticate prior to establishing a VPN session. Default value is `24` - Valid values: `8 | 10 | 12 | 24`
	SessionTimeoutHours pulumi.IntPtrInput
	// Indicates whether split-tunnel is enabled on VPN endpoint. Default value is `false`.
	SplitTunnel pulumi.BoolPtrInput
	// A mapping of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
	// The transport protocol to be used by the VPN session. Default value is `udp`.
	TransportProtocol pulumi.StringPtrInput
	// The ID of the VPC to associate with the Client VPN endpoint. If no security group IDs are specified in the request, the default security group for the VPC is applied.
	VpcId pulumi.StringPtrInput
	// The port number for the Client VPN endpoint. Valid values are `443` and `1194`. Default value is `443`.
	VpnPort pulumi.IntPtrInput
}

func (EndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointState)(nil)).Elem()
}

type endpointArgs struct {
	// Information about the authentication method to be used to authenticate clients.
	AuthenticationOptions []EndpointAuthenticationOption `pulumi:"authenticationOptions"`
	// The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater.
	ClientCidrBlock string `pulumi:"clientCidrBlock"`
	// The options for managing connection authorization for new client connections.
	ClientConnectOptions *EndpointClientConnectOptions `pulumi:"clientConnectOptions"`
	// Options for enabling a customizable text banner that will be displayed on AWS provided clients when a VPN session is established.
	ClientLoginBannerOptions *EndpointClientLoginBannerOptions `pulumi:"clientLoginBannerOptions"`
	// Information about the client connection logging options.
	ConnectionLogOptions EndpointConnectionLogOptions `pulumi:"connectionLogOptions"`
	// A brief description of the Client VPN endpoint.
	Description *string `pulumi:"description"`
	// Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can have up to two DNS servers. If no DNS server is specified, the DNS address of the connecting device is used.
	DnsServers []string `pulumi:"dnsServers"`
	// The IDs of one or more security groups to apply to the target network. You must also specify the ID of the VPC that contains the security groups.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Specify whether to enable the self-service portal for the Client VPN endpoint. Values can be `enabled` or `disabled`. Default value is `disabled`.
	SelfServicePortal *string `pulumi:"selfServicePortal"`
	// The ARN of the ACM server certificate.
	ServerCertificateArn string `pulumi:"serverCertificateArn"`
	// The maximum session duration is a trigger by which end-users are required to re-authenticate prior to establishing a VPN session. Default value is `24` - Valid values: `8 | 10 | 12 | 24`
	SessionTimeoutHours *int `pulumi:"sessionTimeoutHours"`
	// Indicates whether split-tunnel is enabled on VPN endpoint. Default value is `false`.
	SplitTunnel *bool `pulumi:"splitTunnel"`
	// A mapping of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The transport protocol to be used by the VPN session. Default value is `udp`.
	TransportProtocol *string `pulumi:"transportProtocol"`
	// The ID of the VPC to associate with the Client VPN endpoint. If no security group IDs are specified in the request, the default security group for the VPC is applied.
	VpcId *string `pulumi:"vpcId"`
	// The port number for the Client VPN endpoint. Valid values are `443` and `1194`. Default value is `443`.
	VpnPort *int `pulumi:"vpnPort"`
}

// The set of arguments for constructing a Endpoint resource.
type EndpointArgs struct {
	// Information about the authentication method to be used to authenticate clients.
	AuthenticationOptions EndpointAuthenticationOptionArrayInput
	// The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater.
	ClientCidrBlock pulumi.StringInput
	// The options for managing connection authorization for new client connections.
	ClientConnectOptions EndpointClientConnectOptionsPtrInput
	// Options for enabling a customizable text banner that will be displayed on AWS provided clients when a VPN session is established.
	ClientLoginBannerOptions EndpointClientLoginBannerOptionsPtrInput
	// Information about the client connection logging options.
	ConnectionLogOptions EndpointConnectionLogOptionsInput
	// A brief description of the Client VPN endpoint.
	Description pulumi.StringPtrInput
	// Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can have up to two DNS servers. If no DNS server is specified, the DNS address of the connecting device is used.
	DnsServers pulumi.StringArrayInput
	// The IDs of one or more security groups to apply to the target network. You must also specify the ID of the VPC that contains the security groups.
	SecurityGroupIds pulumi.StringArrayInput
	// Specify whether to enable the self-service portal for the Client VPN endpoint. Values can be `enabled` or `disabled`. Default value is `disabled`.
	SelfServicePortal pulumi.StringPtrInput
	// The ARN of the ACM server certificate.
	ServerCertificateArn pulumi.StringInput
	// The maximum session duration is a trigger by which end-users are required to re-authenticate prior to establishing a VPN session. Default value is `24` - Valid values: `8 | 10 | 12 | 24`
	SessionTimeoutHours pulumi.IntPtrInput
	// Indicates whether split-tunnel is enabled on VPN endpoint. Default value is `false`.
	SplitTunnel pulumi.BoolPtrInput
	// A mapping of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// The transport protocol to be used by the VPN session. Default value is `udp`.
	TransportProtocol pulumi.StringPtrInput
	// The ID of the VPC to associate with the Client VPN endpoint. If no security group IDs are specified in the request, the default security group for the VPC is applied.
	VpcId pulumi.StringPtrInput
	// The port number for the Client VPN endpoint. Valid values are `443` and `1194`. Default value is `443`.
	VpnPort pulumi.IntPtrInput
}

func (EndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointArgs)(nil)).Elem()
}

type EndpointInput interface {
	pulumi.Input

	ToEndpointOutput() EndpointOutput
	ToEndpointOutputWithContext(ctx context.Context) EndpointOutput
}

func (*Endpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**Endpoint)(nil)).Elem()
}

func (i *Endpoint) ToEndpointOutput() EndpointOutput {
	return i.ToEndpointOutputWithContext(context.Background())
}

func (i *Endpoint) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointOutput)
}

func (i *Endpoint) ToOutput(ctx context.Context) pulumix.Output[*Endpoint] {
	return pulumix.Output[*Endpoint]{
		OutputState: i.ToEndpointOutputWithContext(ctx).OutputState,
	}
}

// EndpointArrayInput is an input type that accepts EndpointArray and EndpointArrayOutput values.
// You can construct a concrete instance of `EndpointArrayInput` via:
//
//	EndpointArray{ EndpointArgs{...} }
type EndpointArrayInput interface {
	pulumi.Input

	ToEndpointArrayOutput() EndpointArrayOutput
	ToEndpointArrayOutputWithContext(context.Context) EndpointArrayOutput
}

type EndpointArray []EndpointInput

func (EndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Endpoint)(nil)).Elem()
}

func (i EndpointArray) ToEndpointArrayOutput() EndpointArrayOutput {
	return i.ToEndpointArrayOutputWithContext(context.Background())
}

func (i EndpointArray) ToEndpointArrayOutputWithContext(ctx context.Context) EndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointArrayOutput)
}

func (i EndpointArray) ToOutput(ctx context.Context) pulumix.Output[[]*Endpoint] {
	return pulumix.Output[[]*Endpoint]{
		OutputState: i.ToEndpointArrayOutputWithContext(ctx).OutputState,
	}
}

// EndpointMapInput is an input type that accepts EndpointMap and EndpointMapOutput values.
// You can construct a concrete instance of `EndpointMapInput` via:
//
//	EndpointMap{ "key": EndpointArgs{...} }
type EndpointMapInput interface {
	pulumi.Input

	ToEndpointMapOutput() EndpointMapOutput
	ToEndpointMapOutputWithContext(context.Context) EndpointMapOutput
}

type EndpointMap map[string]EndpointInput

func (EndpointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Endpoint)(nil)).Elem()
}

func (i EndpointMap) ToEndpointMapOutput() EndpointMapOutput {
	return i.ToEndpointMapOutputWithContext(context.Background())
}

func (i EndpointMap) ToEndpointMapOutputWithContext(ctx context.Context) EndpointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointMapOutput)
}

func (i EndpointMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Endpoint] {
	return pulumix.Output[map[string]*Endpoint]{
		OutputState: i.ToEndpointMapOutputWithContext(ctx).OutputState,
	}
}

type EndpointOutput struct{ *pulumi.OutputState }

func (EndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Endpoint)(nil)).Elem()
}

func (o EndpointOutput) ToEndpointOutput() EndpointOutput {
	return o
}

func (o EndpointOutput) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return o
}

func (o EndpointOutput) ToOutput(ctx context.Context) pulumix.Output[*Endpoint] {
	return pulumix.Output[*Endpoint]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Client VPN endpoint.
func (o EndpointOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Information about the authentication method to be used to authenticate clients.
func (o EndpointOutput) AuthenticationOptions() EndpointAuthenticationOptionArrayOutput {
	return o.ApplyT(func(v *Endpoint) EndpointAuthenticationOptionArrayOutput { return v.AuthenticationOptions }).(EndpointAuthenticationOptionArrayOutput)
}

// The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater.
func (o EndpointOutput) ClientCidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.ClientCidrBlock }).(pulumi.StringOutput)
}

// The options for managing connection authorization for new client connections.
func (o EndpointOutput) ClientConnectOptions() EndpointClientConnectOptionsOutput {
	return o.ApplyT(func(v *Endpoint) EndpointClientConnectOptionsOutput { return v.ClientConnectOptions }).(EndpointClientConnectOptionsOutput)
}

// Options for enabling a customizable text banner that will be displayed on AWS provided clients when a VPN session is established.
func (o EndpointOutput) ClientLoginBannerOptions() EndpointClientLoginBannerOptionsOutput {
	return o.ApplyT(func(v *Endpoint) EndpointClientLoginBannerOptionsOutput { return v.ClientLoginBannerOptions }).(EndpointClientLoginBannerOptionsOutput)
}

// Information about the client connection logging options.
func (o EndpointOutput) ConnectionLogOptions() EndpointConnectionLogOptionsOutput {
	return o.ApplyT(func(v *Endpoint) EndpointConnectionLogOptionsOutput { return v.ConnectionLogOptions }).(EndpointConnectionLogOptionsOutput)
}

// A brief description of the Client VPN endpoint.
func (o EndpointOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The DNS name to be used by clients when establishing their VPN session.
func (o EndpointOutput) DnsName() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.DnsName }).(pulumi.StringOutput)
}

// Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can have up to two DNS servers. If no DNS server is specified, the DNS address of the connecting device is used.
func (o EndpointOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringArrayOutput { return v.DnsServers }).(pulumi.StringArrayOutput)
}

// The IDs of one or more security groups to apply to the target network. You must also specify the ID of the VPC that contains the security groups.
func (o EndpointOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// Specify whether to enable the self-service portal for the Client VPN endpoint. Values can be `enabled` or `disabled`. Default value is `disabled`.
func (o EndpointOutput) SelfServicePortal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringPtrOutput { return v.SelfServicePortal }).(pulumi.StringPtrOutput)
}

// The URL of the self-service portal.
func (o EndpointOutput) SelfServicePortalUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.SelfServicePortalUrl }).(pulumi.StringOutput)
}

// The ARN of the ACM server certificate.
func (o EndpointOutput) ServerCertificateArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.ServerCertificateArn }).(pulumi.StringOutput)
}

// The maximum session duration is a trigger by which end-users are required to re-authenticate prior to establishing a VPN session. Default value is `24` - Valid values: `8 | 10 | 12 | 24`
func (o EndpointOutput) SessionTimeoutHours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.IntPtrOutput { return v.SessionTimeoutHours }).(pulumi.IntPtrOutput)
}

// Indicates whether split-tunnel is enabled on VPN endpoint. Default value is `false`.
func (o EndpointOutput) SplitTunnel() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.BoolPtrOutput { return v.SplitTunnel }).(pulumi.BoolPtrOutput)
}

// A mapping of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o EndpointOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o EndpointOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// The transport protocol to be used by the VPN session. Default value is `udp`.
func (o EndpointOutput) TransportProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringPtrOutput { return v.TransportProtocol }).(pulumi.StringPtrOutput)
}

// The ID of the VPC to associate with the Client VPN endpoint. If no security group IDs are specified in the request, the default security group for the VPC is applied.
func (o EndpointOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// The port number for the Client VPN endpoint. Valid values are `443` and `1194`. Default value is `443`.
func (o EndpointOutput) VpnPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.IntPtrOutput { return v.VpnPort }).(pulumi.IntPtrOutput)
}

type EndpointArrayOutput struct{ *pulumi.OutputState }

func (EndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Endpoint)(nil)).Elem()
}

func (o EndpointArrayOutput) ToEndpointArrayOutput() EndpointArrayOutput {
	return o
}

func (o EndpointArrayOutput) ToEndpointArrayOutputWithContext(ctx context.Context) EndpointArrayOutput {
	return o
}

func (o EndpointArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Endpoint] {
	return pulumix.Output[[]*Endpoint]{
		OutputState: o.OutputState,
	}
}

func (o EndpointArrayOutput) Index(i pulumi.IntInput) EndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Endpoint {
		return vs[0].([]*Endpoint)[vs[1].(int)]
	}).(EndpointOutput)
}

type EndpointMapOutput struct{ *pulumi.OutputState }

func (EndpointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Endpoint)(nil)).Elem()
}

func (o EndpointMapOutput) ToEndpointMapOutput() EndpointMapOutput {
	return o
}

func (o EndpointMapOutput) ToEndpointMapOutputWithContext(ctx context.Context) EndpointMapOutput {
	return o
}

func (o EndpointMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Endpoint] {
	return pulumix.Output[map[string]*Endpoint]{
		OutputState: o.OutputState,
	}
}

func (o EndpointMapOutput) MapIndex(k pulumi.StringInput) EndpointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Endpoint {
		return vs[0].(map[string]*Endpoint)[vs[1].(string)]
	}).(EndpointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointInput)(nil)).Elem(), &Endpoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointArrayInput)(nil)).Elem(), EndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointMapInput)(nil)).Elem(), EndpointMap{})
	pulumi.RegisterOutputType(EndpointOutput{})
	pulumi.RegisterOutputType(EndpointArrayOutput{})
	pulumi.RegisterOutputType(EndpointMapOutput{})
}
