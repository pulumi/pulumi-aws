// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasync

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS DataSync Location FSx Ontap File System.
//
// ## Example Usage
//
// ## Import
//
// In TODO v1.5.0 and later, use an `import` block to import `aws_datasync_location_fsx_ontap_file_system` using the `DataSync-ARN#FSx-ontap-svm-ARN`. For exampleterraform import {
//
//	to = aws_datasync_location_fsx_ontap_file_system.example
//
//	id = "arn:aws:datasync:us-west-2:123456789012:location/loc-12345678901234567#arn:aws:fsx:us-west-2:123456789012:storage-virtual-machine/svm-12345678abcdef123" } Using `TODO import`, import `aws_datasync_location_fsx_ontap_file_system` using the `DataSync-ARN#FSx-ontap-svm-ARN`. For exampleconsole % TODO import aws_datasync_location_fsx_ontap_file_system.example arn:aws:datasync:us-west-2:123456789012:location/loc-12345678901234567#arn:aws:fsx:us-west-2:123456789012:storage-virtual-machine/svm-12345678abcdef123
type LocationFsxOntapFileSystem struct {
	pulumi.CustomResourceState

	// ARN of the DataSync Location for the FSx Ontap File System.
	Arn          pulumi.StringOutput `pulumi:"arn"`
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// ARN of the FSx Ontap File System.
	FsxFilesystemArn pulumi.StringOutput `pulumi:"fsxFilesystemArn"`
	// The data transfer protocol that DataSync uses to access your Amazon FSx file system. See Protocol below.
	Protocol LocationFsxOntapFileSystemProtocolOutput `pulumi:"protocol"`
	// The security groups that provide access to your file system's preferred subnet. The security groups must allow outbbound traffic on the following ports (depending on the protocol you use):
	// * Network File System (NFS): TCP ports 111, 635, and 2049
	// * Server Message Block (SMB): TCP port 445
	SecurityGroupArns pulumi.StringArrayOutput `pulumi:"securityGroupArns"`
	// The ARN of the SVM in your file system where you want to copy data to of from.
	//
	// The following arguments are optional:
	StorageVirtualMachineArn pulumi.StringOutput `pulumi:"storageVirtualMachineArn"`
	// Path to the file share in the SVM where you'll copy your data. You can specify a junction path (also known as a mount point), qtree path (for NFS file shares), or share name (for SMB file shares) (e.g. `/vol1`, `/vol1/tree1`, `share1`).
	Subdirectory pulumi.StringOutput `pulumi:"subdirectory"`
	// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// URI of the FSx ONTAP file system location
	Uri pulumi.StringOutput `pulumi:"uri"`
}

// NewLocationFsxOntapFileSystem registers a new resource with the given unique name, arguments, and options.
func NewLocationFsxOntapFileSystem(ctx *pulumi.Context,
	name string, args *LocationFsxOntapFileSystemArgs, opts ...pulumi.ResourceOption) (*LocationFsxOntapFileSystem, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.SecurityGroupArns == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroupArns'")
	}
	if args.StorageVirtualMachineArn == nil {
		return nil, errors.New("invalid value for required argument 'StorageVirtualMachineArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LocationFsxOntapFileSystem
	err := ctx.RegisterResource("aws:datasync/locationFsxOntapFileSystem:LocationFsxOntapFileSystem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLocationFsxOntapFileSystem gets an existing LocationFsxOntapFileSystem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLocationFsxOntapFileSystem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LocationFsxOntapFileSystemState, opts ...pulumi.ResourceOption) (*LocationFsxOntapFileSystem, error) {
	var resource LocationFsxOntapFileSystem
	err := ctx.ReadResource("aws:datasync/locationFsxOntapFileSystem:LocationFsxOntapFileSystem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LocationFsxOntapFileSystem resources.
type locationFsxOntapFileSystemState struct {
	// ARN of the DataSync Location for the FSx Ontap File System.
	Arn          *string `pulumi:"arn"`
	CreationTime *string `pulumi:"creationTime"`
	// ARN of the FSx Ontap File System.
	FsxFilesystemArn *string `pulumi:"fsxFilesystemArn"`
	// The data transfer protocol that DataSync uses to access your Amazon FSx file system. See Protocol below.
	Protocol *LocationFsxOntapFileSystemProtocol `pulumi:"protocol"`
	// The security groups that provide access to your file system's preferred subnet. The security groups must allow outbbound traffic on the following ports (depending on the protocol you use):
	// * Network File System (NFS): TCP ports 111, 635, and 2049
	// * Server Message Block (SMB): TCP port 445
	SecurityGroupArns []string `pulumi:"securityGroupArns"`
	// The ARN of the SVM in your file system where you want to copy data to of from.
	//
	// The following arguments are optional:
	StorageVirtualMachineArn *string `pulumi:"storageVirtualMachineArn"`
	// Path to the file share in the SVM where you'll copy your data. You can specify a junction path (also known as a mount point), qtree path (for NFS file shares), or share name (for SMB file shares) (e.g. `/vol1`, `/vol1/tree1`, `share1`).
	Subdirectory *string `pulumi:"subdirectory"`
	// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
	// URI of the FSx ONTAP file system location
	Uri *string `pulumi:"uri"`
}

type LocationFsxOntapFileSystemState struct {
	// ARN of the DataSync Location for the FSx Ontap File System.
	Arn          pulumi.StringPtrInput
	CreationTime pulumi.StringPtrInput
	// ARN of the FSx Ontap File System.
	FsxFilesystemArn pulumi.StringPtrInput
	// The data transfer protocol that DataSync uses to access your Amazon FSx file system. See Protocol below.
	Protocol LocationFsxOntapFileSystemProtocolPtrInput
	// The security groups that provide access to your file system's preferred subnet. The security groups must allow outbbound traffic on the following ports (depending on the protocol you use):
	// * Network File System (NFS): TCP ports 111, 635, and 2049
	// * Server Message Block (SMB): TCP port 445
	SecurityGroupArns pulumi.StringArrayInput
	// The ARN of the SVM in your file system where you want to copy data to of from.
	//
	// The following arguments are optional:
	StorageVirtualMachineArn pulumi.StringPtrInput
	// Path to the file share in the SVM where you'll copy your data. You can specify a junction path (also known as a mount point), qtree path (for NFS file shares), or share name (for SMB file shares) (e.g. `/vol1`, `/vol1/tree1`, `share1`).
	Subdirectory pulumi.StringPtrInput
	// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumi.StringMapInput
	TagsAll pulumi.StringMapInput
	// URI of the FSx ONTAP file system location
	Uri pulumi.StringPtrInput
}

func (LocationFsxOntapFileSystemState) ElementType() reflect.Type {
	return reflect.TypeOf((*locationFsxOntapFileSystemState)(nil)).Elem()
}

type locationFsxOntapFileSystemArgs struct {
	// The data transfer protocol that DataSync uses to access your Amazon FSx file system. See Protocol below.
	Protocol LocationFsxOntapFileSystemProtocol `pulumi:"protocol"`
	// The security groups that provide access to your file system's preferred subnet. The security groups must allow outbbound traffic on the following ports (depending on the protocol you use):
	// * Network File System (NFS): TCP ports 111, 635, and 2049
	// * Server Message Block (SMB): TCP port 445
	SecurityGroupArns []string `pulumi:"securityGroupArns"`
	// The ARN of the SVM in your file system where you want to copy data to of from.
	//
	// The following arguments are optional:
	StorageVirtualMachineArn string `pulumi:"storageVirtualMachineArn"`
	// Path to the file share in the SVM where you'll copy your data. You can specify a junction path (also known as a mount point), qtree path (for NFS file shares), or share name (for SMB file shares) (e.g. `/vol1`, `/vol1/tree1`, `share1`).
	Subdirectory *string `pulumi:"subdirectory"`
	// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a LocationFsxOntapFileSystem resource.
type LocationFsxOntapFileSystemArgs struct {
	// The data transfer protocol that DataSync uses to access your Amazon FSx file system. See Protocol below.
	Protocol LocationFsxOntapFileSystemProtocolInput
	// The security groups that provide access to your file system's preferred subnet. The security groups must allow outbbound traffic on the following ports (depending on the protocol you use):
	// * Network File System (NFS): TCP ports 111, 635, and 2049
	// * Server Message Block (SMB): TCP port 445
	SecurityGroupArns pulumi.StringArrayInput
	// The ARN of the SVM in your file system where you want to copy data to of from.
	//
	// The following arguments are optional:
	StorageVirtualMachineArn pulumi.StringInput
	// Path to the file share in the SVM where you'll copy your data. You can specify a junction path (also known as a mount point), qtree path (for NFS file shares), or share name (for SMB file shares) (e.g. `/vol1`, `/vol1/tree1`, `share1`).
	Subdirectory pulumi.StringPtrInput
	// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
}

func (LocationFsxOntapFileSystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*locationFsxOntapFileSystemArgs)(nil)).Elem()
}

type LocationFsxOntapFileSystemInput interface {
	pulumi.Input

	ToLocationFsxOntapFileSystemOutput() LocationFsxOntapFileSystemOutput
	ToLocationFsxOntapFileSystemOutputWithContext(ctx context.Context) LocationFsxOntapFileSystemOutput
}

func (*LocationFsxOntapFileSystem) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationFsxOntapFileSystem)(nil)).Elem()
}

func (i *LocationFsxOntapFileSystem) ToLocationFsxOntapFileSystemOutput() LocationFsxOntapFileSystemOutput {
	return i.ToLocationFsxOntapFileSystemOutputWithContext(context.Background())
}

func (i *LocationFsxOntapFileSystem) ToLocationFsxOntapFileSystemOutputWithContext(ctx context.Context) LocationFsxOntapFileSystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFsxOntapFileSystemOutput)
}

func (i *LocationFsxOntapFileSystem) ToOutput(ctx context.Context) pulumix.Output[*LocationFsxOntapFileSystem] {
	return pulumix.Output[*LocationFsxOntapFileSystem]{
		OutputState: i.ToLocationFsxOntapFileSystemOutputWithContext(ctx).OutputState,
	}
}

// LocationFsxOntapFileSystemArrayInput is an input type that accepts LocationFsxOntapFileSystemArray and LocationFsxOntapFileSystemArrayOutput values.
// You can construct a concrete instance of `LocationFsxOntapFileSystemArrayInput` via:
//
//	LocationFsxOntapFileSystemArray{ LocationFsxOntapFileSystemArgs{...} }
type LocationFsxOntapFileSystemArrayInput interface {
	pulumi.Input

	ToLocationFsxOntapFileSystemArrayOutput() LocationFsxOntapFileSystemArrayOutput
	ToLocationFsxOntapFileSystemArrayOutputWithContext(context.Context) LocationFsxOntapFileSystemArrayOutput
}

type LocationFsxOntapFileSystemArray []LocationFsxOntapFileSystemInput

func (LocationFsxOntapFileSystemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LocationFsxOntapFileSystem)(nil)).Elem()
}

func (i LocationFsxOntapFileSystemArray) ToLocationFsxOntapFileSystemArrayOutput() LocationFsxOntapFileSystemArrayOutput {
	return i.ToLocationFsxOntapFileSystemArrayOutputWithContext(context.Background())
}

func (i LocationFsxOntapFileSystemArray) ToLocationFsxOntapFileSystemArrayOutputWithContext(ctx context.Context) LocationFsxOntapFileSystemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFsxOntapFileSystemArrayOutput)
}

func (i LocationFsxOntapFileSystemArray) ToOutput(ctx context.Context) pulumix.Output[[]*LocationFsxOntapFileSystem] {
	return pulumix.Output[[]*LocationFsxOntapFileSystem]{
		OutputState: i.ToLocationFsxOntapFileSystemArrayOutputWithContext(ctx).OutputState,
	}
}

// LocationFsxOntapFileSystemMapInput is an input type that accepts LocationFsxOntapFileSystemMap and LocationFsxOntapFileSystemMapOutput values.
// You can construct a concrete instance of `LocationFsxOntapFileSystemMapInput` via:
//
//	LocationFsxOntapFileSystemMap{ "key": LocationFsxOntapFileSystemArgs{...} }
type LocationFsxOntapFileSystemMapInput interface {
	pulumi.Input

	ToLocationFsxOntapFileSystemMapOutput() LocationFsxOntapFileSystemMapOutput
	ToLocationFsxOntapFileSystemMapOutputWithContext(context.Context) LocationFsxOntapFileSystemMapOutput
}

type LocationFsxOntapFileSystemMap map[string]LocationFsxOntapFileSystemInput

func (LocationFsxOntapFileSystemMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LocationFsxOntapFileSystem)(nil)).Elem()
}

func (i LocationFsxOntapFileSystemMap) ToLocationFsxOntapFileSystemMapOutput() LocationFsxOntapFileSystemMapOutput {
	return i.ToLocationFsxOntapFileSystemMapOutputWithContext(context.Background())
}

func (i LocationFsxOntapFileSystemMap) ToLocationFsxOntapFileSystemMapOutputWithContext(ctx context.Context) LocationFsxOntapFileSystemMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFsxOntapFileSystemMapOutput)
}

func (i LocationFsxOntapFileSystemMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*LocationFsxOntapFileSystem] {
	return pulumix.Output[map[string]*LocationFsxOntapFileSystem]{
		OutputState: i.ToLocationFsxOntapFileSystemMapOutputWithContext(ctx).OutputState,
	}
}

type LocationFsxOntapFileSystemOutput struct{ *pulumi.OutputState }

func (LocationFsxOntapFileSystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationFsxOntapFileSystem)(nil)).Elem()
}

func (o LocationFsxOntapFileSystemOutput) ToLocationFsxOntapFileSystemOutput() LocationFsxOntapFileSystemOutput {
	return o
}

func (o LocationFsxOntapFileSystemOutput) ToLocationFsxOntapFileSystemOutputWithContext(ctx context.Context) LocationFsxOntapFileSystemOutput {
	return o
}

func (o LocationFsxOntapFileSystemOutput) ToOutput(ctx context.Context) pulumix.Output[*LocationFsxOntapFileSystem] {
	return pulumix.Output[*LocationFsxOntapFileSystem]{
		OutputState: o.OutputState,
	}
}

// ARN of the DataSync Location for the FSx Ontap File System.
func (o LocationFsxOntapFileSystemOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *LocationFsxOntapFileSystem) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o LocationFsxOntapFileSystemOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *LocationFsxOntapFileSystem) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// ARN of the FSx Ontap File System.
func (o LocationFsxOntapFileSystemOutput) FsxFilesystemArn() pulumi.StringOutput {
	return o.ApplyT(func(v *LocationFsxOntapFileSystem) pulumi.StringOutput { return v.FsxFilesystemArn }).(pulumi.StringOutput)
}

// The data transfer protocol that DataSync uses to access your Amazon FSx file system. See Protocol below.
func (o LocationFsxOntapFileSystemOutput) Protocol() LocationFsxOntapFileSystemProtocolOutput {
	return o.ApplyT(func(v *LocationFsxOntapFileSystem) LocationFsxOntapFileSystemProtocolOutput { return v.Protocol }).(LocationFsxOntapFileSystemProtocolOutput)
}

// The security groups that provide access to your file system's preferred subnet. The security groups must allow outbbound traffic on the following ports (depending on the protocol you use):
// * Network File System (NFS): TCP ports 111, 635, and 2049
// * Server Message Block (SMB): TCP port 445
func (o LocationFsxOntapFileSystemOutput) SecurityGroupArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LocationFsxOntapFileSystem) pulumi.StringArrayOutput { return v.SecurityGroupArns }).(pulumi.StringArrayOutput)
}

// The ARN of the SVM in your file system where you want to copy data to of from.
//
// The following arguments are optional:
func (o LocationFsxOntapFileSystemOutput) StorageVirtualMachineArn() pulumi.StringOutput {
	return o.ApplyT(func(v *LocationFsxOntapFileSystem) pulumi.StringOutput { return v.StorageVirtualMachineArn }).(pulumi.StringOutput)
}

// Path to the file share in the SVM where you'll copy your data. You can specify a junction path (also known as a mount point), qtree path (for NFS file shares), or share name (for SMB file shares) (e.g. `/vol1`, `/vol1/tree1`, `share1`).
func (o LocationFsxOntapFileSystemOutput) Subdirectory() pulumi.StringOutput {
	return o.ApplyT(func(v *LocationFsxOntapFileSystem) pulumi.StringOutput { return v.Subdirectory }).(pulumi.StringOutput)
}

// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o LocationFsxOntapFileSystemOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LocationFsxOntapFileSystem) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o LocationFsxOntapFileSystemOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LocationFsxOntapFileSystem) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// URI of the FSx ONTAP file system location
func (o LocationFsxOntapFileSystemOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v *LocationFsxOntapFileSystem) pulumi.StringOutput { return v.Uri }).(pulumi.StringOutput)
}

type LocationFsxOntapFileSystemArrayOutput struct{ *pulumi.OutputState }

func (LocationFsxOntapFileSystemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LocationFsxOntapFileSystem)(nil)).Elem()
}

func (o LocationFsxOntapFileSystemArrayOutput) ToLocationFsxOntapFileSystemArrayOutput() LocationFsxOntapFileSystemArrayOutput {
	return o
}

func (o LocationFsxOntapFileSystemArrayOutput) ToLocationFsxOntapFileSystemArrayOutputWithContext(ctx context.Context) LocationFsxOntapFileSystemArrayOutput {
	return o
}

func (o LocationFsxOntapFileSystemArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*LocationFsxOntapFileSystem] {
	return pulumix.Output[[]*LocationFsxOntapFileSystem]{
		OutputState: o.OutputState,
	}
}

func (o LocationFsxOntapFileSystemArrayOutput) Index(i pulumi.IntInput) LocationFsxOntapFileSystemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LocationFsxOntapFileSystem {
		return vs[0].([]*LocationFsxOntapFileSystem)[vs[1].(int)]
	}).(LocationFsxOntapFileSystemOutput)
}

type LocationFsxOntapFileSystemMapOutput struct{ *pulumi.OutputState }

func (LocationFsxOntapFileSystemMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LocationFsxOntapFileSystem)(nil)).Elem()
}

func (o LocationFsxOntapFileSystemMapOutput) ToLocationFsxOntapFileSystemMapOutput() LocationFsxOntapFileSystemMapOutput {
	return o
}

func (o LocationFsxOntapFileSystemMapOutput) ToLocationFsxOntapFileSystemMapOutputWithContext(ctx context.Context) LocationFsxOntapFileSystemMapOutput {
	return o
}

func (o LocationFsxOntapFileSystemMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*LocationFsxOntapFileSystem] {
	return pulumix.Output[map[string]*LocationFsxOntapFileSystem]{
		OutputState: o.OutputState,
	}
}

func (o LocationFsxOntapFileSystemMapOutput) MapIndex(k pulumi.StringInput) LocationFsxOntapFileSystemOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LocationFsxOntapFileSystem {
		return vs[0].(map[string]*LocationFsxOntapFileSystem)[vs[1].(string)]
	}).(LocationFsxOntapFileSystemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LocationFsxOntapFileSystemInput)(nil)).Elem(), &LocationFsxOntapFileSystem{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationFsxOntapFileSystemArrayInput)(nil)).Elem(), LocationFsxOntapFileSystemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationFsxOntapFileSystemMapInput)(nil)).Elem(), LocationFsxOntapFileSystemMap{})
	pulumi.RegisterOutputType(LocationFsxOntapFileSystemOutput{})
	pulumi.RegisterOutputType(LocationFsxOntapFileSystemArrayOutput{})
	pulumi.RegisterOutputType(LocationFsxOntapFileSystemMapOutput{})
}
