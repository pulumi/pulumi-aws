// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasync

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LocationFsxWindows struct {
	pulumi.CustomResourceState

	Arn               pulumi.StringOutput      `pulumi:"arn"`
	CreationTime      pulumi.StringOutput      `pulumi:"creationTime"`
	Domain            pulumi.StringPtrOutput   `pulumi:"domain"`
	FsxFilesystemArn  pulumi.StringOutput      `pulumi:"fsxFilesystemArn"`
	Password          pulumi.StringOutput      `pulumi:"password"`
	SecurityGroupArns pulumi.StringArrayOutput `pulumi:"securityGroupArns"`
	Subdirectory      pulumi.StringOutput      `pulumi:"subdirectory"`
	Tags              pulumi.StringMapOutput   `pulumi:"tags"`
	TagsAll           pulumi.StringMapOutput   `pulumi:"tagsAll"`
	Uri               pulumi.StringOutput      `pulumi:"uri"`
	User              pulumi.StringOutput      `pulumi:"user"`
}

// NewLocationFsxWindows registers a new resource with the given unique name, arguments, and options.
func NewLocationFsxWindows(ctx *pulumi.Context,
	name string, args *LocationFsxWindowsArgs, opts ...pulumi.ResourceOption) (*LocationFsxWindows, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FsxFilesystemArn == nil {
		return nil, errors.New("invalid value for required argument 'FsxFilesystemArn'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.SecurityGroupArns == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroupArns'")
	}
	if args.User == nil {
		return nil, errors.New("invalid value for required argument 'User'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	var resource LocationFsxWindows
	err := ctx.RegisterResource("aws:datasync/locationFsxWindows:LocationFsxWindows", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLocationFsxWindows gets an existing LocationFsxWindows resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLocationFsxWindows(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LocationFsxWindowsState, opts ...pulumi.ResourceOption) (*LocationFsxWindows, error) {
	var resource LocationFsxWindows
	err := ctx.ReadResource("aws:datasync/locationFsxWindows:LocationFsxWindows", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LocationFsxWindows resources.
type locationFsxWindowsState struct {
	Arn               *string           `pulumi:"arn"`
	CreationTime      *string           `pulumi:"creationTime"`
	Domain            *string           `pulumi:"domain"`
	FsxFilesystemArn  *string           `pulumi:"fsxFilesystemArn"`
	Password          *string           `pulumi:"password"`
	SecurityGroupArns []string          `pulumi:"securityGroupArns"`
	Subdirectory      *string           `pulumi:"subdirectory"`
	Tags              map[string]string `pulumi:"tags"`
	TagsAll           map[string]string `pulumi:"tagsAll"`
	Uri               *string           `pulumi:"uri"`
	User              *string           `pulumi:"user"`
}

type LocationFsxWindowsState struct {
	Arn               pulumi.StringPtrInput
	CreationTime      pulumi.StringPtrInput
	Domain            pulumi.StringPtrInput
	FsxFilesystemArn  pulumi.StringPtrInput
	Password          pulumi.StringPtrInput
	SecurityGroupArns pulumi.StringArrayInput
	Subdirectory      pulumi.StringPtrInput
	Tags              pulumi.StringMapInput
	TagsAll           pulumi.StringMapInput
	Uri               pulumi.StringPtrInput
	User              pulumi.StringPtrInput
}

func (LocationFsxWindowsState) ElementType() reflect.Type {
	return reflect.TypeOf((*locationFsxWindowsState)(nil)).Elem()
}

type locationFsxWindowsArgs struct {
	Domain            *string           `pulumi:"domain"`
	FsxFilesystemArn  string            `pulumi:"fsxFilesystemArn"`
	Password          string            `pulumi:"password"`
	SecurityGroupArns []string          `pulumi:"securityGroupArns"`
	Subdirectory      *string           `pulumi:"subdirectory"`
	Tags              map[string]string `pulumi:"tags"`
	User              string            `pulumi:"user"`
}

// The set of arguments for constructing a LocationFsxWindows resource.
type LocationFsxWindowsArgs struct {
	Domain            pulumi.StringPtrInput
	FsxFilesystemArn  pulumi.StringInput
	Password          pulumi.StringInput
	SecurityGroupArns pulumi.StringArrayInput
	Subdirectory      pulumi.StringPtrInput
	Tags              pulumi.StringMapInput
	User              pulumi.StringInput
}

func (LocationFsxWindowsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*locationFsxWindowsArgs)(nil)).Elem()
}

type LocationFsxWindowsInput interface {
	pulumi.Input

	ToLocationFsxWindowsOutput() LocationFsxWindowsOutput
	ToLocationFsxWindowsOutputWithContext(ctx context.Context) LocationFsxWindowsOutput
}

func (*LocationFsxWindows) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationFsxWindows)(nil)).Elem()
}

func (i *LocationFsxWindows) ToLocationFsxWindowsOutput() LocationFsxWindowsOutput {
	return i.ToLocationFsxWindowsOutputWithContext(context.Background())
}

func (i *LocationFsxWindows) ToLocationFsxWindowsOutputWithContext(ctx context.Context) LocationFsxWindowsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFsxWindowsOutput)
}

// LocationFsxWindowsArrayInput is an input type that accepts LocationFsxWindowsArray and LocationFsxWindowsArrayOutput values.
// You can construct a concrete instance of `LocationFsxWindowsArrayInput` via:
//
//	LocationFsxWindowsArray{ LocationFsxWindowsArgs{...} }
type LocationFsxWindowsArrayInput interface {
	pulumi.Input

	ToLocationFsxWindowsArrayOutput() LocationFsxWindowsArrayOutput
	ToLocationFsxWindowsArrayOutputWithContext(context.Context) LocationFsxWindowsArrayOutput
}

type LocationFsxWindowsArray []LocationFsxWindowsInput

func (LocationFsxWindowsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LocationFsxWindows)(nil)).Elem()
}

func (i LocationFsxWindowsArray) ToLocationFsxWindowsArrayOutput() LocationFsxWindowsArrayOutput {
	return i.ToLocationFsxWindowsArrayOutputWithContext(context.Background())
}

func (i LocationFsxWindowsArray) ToLocationFsxWindowsArrayOutputWithContext(ctx context.Context) LocationFsxWindowsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFsxWindowsArrayOutput)
}

// LocationFsxWindowsMapInput is an input type that accepts LocationFsxWindowsMap and LocationFsxWindowsMapOutput values.
// You can construct a concrete instance of `LocationFsxWindowsMapInput` via:
//
//	LocationFsxWindowsMap{ "key": LocationFsxWindowsArgs{...} }
type LocationFsxWindowsMapInput interface {
	pulumi.Input

	ToLocationFsxWindowsMapOutput() LocationFsxWindowsMapOutput
	ToLocationFsxWindowsMapOutputWithContext(context.Context) LocationFsxWindowsMapOutput
}

type LocationFsxWindowsMap map[string]LocationFsxWindowsInput

func (LocationFsxWindowsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LocationFsxWindows)(nil)).Elem()
}

func (i LocationFsxWindowsMap) ToLocationFsxWindowsMapOutput() LocationFsxWindowsMapOutput {
	return i.ToLocationFsxWindowsMapOutputWithContext(context.Background())
}

func (i LocationFsxWindowsMap) ToLocationFsxWindowsMapOutputWithContext(ctx context.Context) LocationFsxWindowsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFsxWindowsMapOutput)
}

type LocationFsxWindowsOutput struct{ *pulumi.OutputState }

func (LocationFsxWindowsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationFsxWindows)(nil)).Elem()
}

func (o LocationFsxWindowsOutput) ToLocationFsxWindowsOutput() LocationFsxWindowsOutput {
	return o
}

func (o LocationFsxWindowsOutput) ToLocationFsxWindowsOutputWithContext(ctx context.Context) LocationFsxWindowsOutput {
	return o
}

func (o LocationFsxWindowsOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *LocationFsxWindows) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o LocationFsxWindowsOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *LocationFsxWindows) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

func (o LocationFsxWindowsOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationFsxWindows) pulumi.StringPtrOutput { return v.Domain }).(pulumi.StringPtrOutput)
}

func (o LocationFsxWindowsOutput) FsxFilesystemArn() pulumi.StringOutput {
	return o.ApplyT(func(v *LocationFsxWindows) pulumi.StringOutput { return v.FsxFilesystemArn }).(pulumi.StringOutput)
}

func (o LocationFsxWindowsOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *LocationFsxWindows) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

func (o LocationFsxWindowsOutput) SecurityGroupArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LocationFsxWindows) pulumi.StringArrayOutput { return v.SecurityGroupArns }).(pulumi.StringArrayOutput)
}

func (o LocationFsxWindowsOutput) Subdirectory() pulumi.StringOutput {
	return o.ApplyT(func(v *LocationFsxWindows) pulumi.StringOutput { return v.Subdirectory }).(pulumi.StringOutput)
}

func (o LocationFsxWindowsOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LocationFsxWindows) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o LocationFsxWindowsOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LocationFsxWindows) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o LocationFsxWindowsOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v *LocationFsxWindows) pulumi.StringOutput { return v.Uri }).(pulumi.StringOutput)
}

func (o LocationFsxWindowsOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v *LocationFsxWindows) pulumi.StringOutput { return v.User }).(pulumi.StringOutput)
}

type LocationFsxWindowsArrayOutput struct{ *pulumi.OutputState }

func (LocationFsxWindowsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LocationFsxWindows)(nil)).Elem()
}

func (o LocationFsxWindowsArrayOutput) ToLocationFsxWindowsArrayOutput() LocationFsxWindowsArrayOutput {
	return o
}

func (o LocationFsxWindowsArrayOutput) ToLocationFsxWindowsArrayOutputWithContext(ctx context.Context) LocationFsxWindowsArrayOutput {
	return o
}

func (o LocationFsxWindowsArrayOutput) Index(i pulumi.IntInput) LocationFsxWindowsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LocationFsxWindows {
		return vs[0].([]*LocationFsxWindows)[vs[1].(int)]
	}).(LocationFsxWindowsOutput)
}

type LocationFsxWindowsMapOutput struct{ *pulumi.OutputState }

func (LocationFsxWindowsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LocationFsxWindows)(nil)).Elem()
}

func (o LocationFsxWindowsMapOutput) ToLocationFsxWindowsMapOutput() LocationFsxWindowsMapOutput {
	return o
}

func (o LocationFsxWindowsMapOutput) ToLocationFsxWindowsMapOutputWithContext(ctx context.Context) LocationFsxWindowsMapOutput {
	return o
}

func (o LocationFsxWindowsMapOutput) MapIndex(k pulumi.StringInput) LocationFsxWindowsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LocationFsxWindows {
		return vs[0].(map[string]*LocationFsxWindows)[vs[1].(string)]
	}).(LocationFsxWindowsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LocationFsxWindowsInput)(nil)).Elem(), &LocationFsxWindows{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationFsxWindowsArrayInput)(nil)).Elem(), LocationFsxWindowsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationFsxWindowsMapInput)(nil)).Elem(), LocationFsxWindowsMap{})
	pulumi.RegisterOutputType(LocationFsxWindowsOutput{})
	pulumi.RegisterOutputType(LocationFsxWindowsArrayOutput{})
	pulumi.RegisterOutputType(LocationFsxWindowsMapOutput{})
}
