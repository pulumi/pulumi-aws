// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasync

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FsxOpenZfsFileSystem struct {
	pulumi.CustomResourceState

	Arn               pulumi.StringOutput                `pulumi:"arn"`
	CreationTime      pulumi.StringOutput                `pulumi:"creationTime"`
	FsxFilesystemArn  pulumi.StringOutput                `pulumi:"fsxFilesystemArn"`
	Protocol          FsxOpenZfsFileSystemProtocolOutput `pulumi:"protocol"`
	SecurityGroupArns pulumi.StringArrayOutput           `pulumi:"securityGroupArns"`
	Subdirectory      pulumi.StringOutput                `pulumi:"subdirectory"`
	Tags              pulumi.StringMapOutput             `pulumi:"tags"`
	TagsAll           pulumi.StringMapOutput             `pulumi:"tagsAll"`
	Uri               pulumi.StringOutput                `pulumi:"uri"`
}

// NewFsxOpenZfsFileSystem registers a new resource with the given unique name, arguments, and options.
func NewFsxOpenZfsFileSystem(ctx *pulumi.Context,
	name string, args *FsxOpenZfsFileSystemArgs, opts ...pulumi.ResourceOption) (*FsxOpenZfsFileSystem, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FsxFilesystemArn == nil {
		return nil, errors.New("invalid value for required argument 'FsxFilesystemArn'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.SecurityGroupArns == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroupArns'")
	}
	var resource FsxOpenZfsFileSystem
	err := ctx.RegisterResource("aws:datasync/fsxOpenZfsFileSystem:FsxOpenZfsFileSystem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFsxOpenZfsFileSystem gets an existing FsxOpenZfsFileSystem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFsxOpenZfsFileSystem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FsxOpenZfsFileSystemState, opts ...pulumi.ResourceOption) (*FsxOpenZfsFileSystem, error) {
	var resource FsxOpenZfsFileSystem
	err := ctx.ReadResource("aws:datasync/fsxOpenZfsFileSystem:FsxOpenZfsFileSystem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FsxOpenZfsFileSystem resources.
type fsxOpenZfsFileSystemState struct {
	Arn               *string                       `pulumi:"arn"`
	CreationTime      *string                       `pulumi:"creationTime"`
	FsxFilesystemArn  *string                       `pulumi:"fsxFilesystemArn"`
	Protocol          *FsxOpenZfsFileSystemProtocol `pulumi:"protocol"`
	SecurityGroupArns []string                      `pulumi:"securityGroupArns"`
	Subdirectory      *string                       `pulumi:"subdirectory"`
	Tags              map[string]string             `pulumi:"tags"`
	TagsAll           map[string]string             `pulumi:"tagsAll"`
	Uri               *string                       `pulumi:"uri"`
}

type FsxOpenZfsFileSystemState struct {
	Arn               pulumi.StringPtrInput
	CreationTime      pulumi.StringPtrInput
	FsxFilesystemArn  pulumi.StringPtrInput
	Protocol          FsxOpenZfsFileSystemProtocolPtrInput
	SecurityGroupArns pulumi.StringArrayInput
	Subdirectory      pulumi.StringPtrInput
	Tags              pulumi.StringMapInput
	TagsAll           pulumi.StringMapInput
	Uri               pulumi.StringPtrInput
}

func (FsxOpenZfsFileSystemState) ElementType() reflect.Type {
	return reflect.TypeOf((*fsxOpenZfsFileSystemState)(nil)).Elem()
}

type fsxOpenZfsFileSystemArgs struct {
	FsxFilesystemArn  string                       `pulumi:"fsxFilesystemArn"`
	Protocol          FsxOpenZfsFileSystemProtocol `pulumi:"protocol"`
	SecurityGroupArns []string                     `pulumi:"securityGroupArns"`
	Subdirectory      *string                      `pulumi:"subdirectory"`
	Tags              map[string]string            `pulumi:"tags"`
}

// The set of arguments for constructing a FsxOpenZfsFileSystem resource.
type FsxOpenZfsFileSystemArgs struct {
	FsxFilesystemArn  pulumi.StringInput
	Protocol          FsxOpenZfsFileSystemProtocolInput
	SecurityGroupArns pulumi.StringArrayInput
	Subdirectory      pulumi.StringPtrInput
	Tags              pulumi.StringMapInput
}

func (FsxOpenZfsFileSystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fsxOpenZfsFileSystemArgs)(nil)).Elem()
}

type FsxOpenZfsFileSystemInput interface {
	pulumi.Input

	ToFsxOpenZfsFileSystemOutput() FsxOpenZfsFileSystemOutput
	ToFsxOpenZfsFileSystemOutputWithContext(ctx context.Context) FsxOpenZfsFileSystemOutput
}

func (*FsxOpenZfsFileSystem) ElementType() reflect.Type {
	return reflect.TypeOf((**FsxOpenZfsFileSystem)(nil)).Elem()
}

func (i *FsxOpenZfsFileSystem) ToFsxOpenZfsFileSystemOutput() FsxOpenZfsFileSystemOutput {
	return i.ToFsxOpenZfsFileSystemOutputWithContext(context.Background())
}

func (i *FsxOpenZfsFileSystem) ToFsxOpenZfsFileSystemOutputWithContext(ctx context.Context) FsxOpenZfsFileSystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FsxOpenZfsFileSystemOutput)
}

// FsxOpenZfsFileSystemArrayInput is an input type that accepts FsxOpenZfsFileSystemArray and FsxOpenZfsFileSystemArrayOutput values.
// You can construct a concrete instance of `FsxOpenZfsFileSystemArrayInput` via:
//
//	FsxOpenZfsFileSystemArray{ FsxOpenZfsFileSystemArgs{...} }
type FsxOpenZfsFileSystemArrayInput interface {
	pulumi.Input

	ToFsxOpenZfsFileSystemArrayOutput() FsxOpenZfsFileSystemArrayOutput
	ToFsxOpenZfsFileSystemArrayOutputWithContext(context.Context) FsxOpenZfsFileSystemArrayOutput
}

type FsxOpenZfsFileSystemArray []FsxOpenZfsFileSystemInput

func (FsxOpenZfsFileSystemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FsxOpenZfsFileSystem)(nil)).Elem()
}

func (i FsxOpenZfsFileSystemArray) ToFsxOpenZfsFileSystemArrayOutput() FsxOpenZfsFileSystemArrayOutput {
	return i.ToFsxOpenZfsFileSystemArrayOutputWithContext(context.Background())
}

func (i FsxOpenZfsFileSystemArray) ToFsxOpenZfsFileSystemArrayOutputWithContext(ctx context.Context) FsxOpenZfsFileSystemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FsxOpenZfsFileSystemArrayOutput)
}

// FsxOpenZfsFileSystemMapInput is an input type that accepts FsxOpenZfsFileSystemMap and FsxOpenZfsFileSystemMapOutput values.
// You can construct a concrete instance of `FsxOpenZfsFileSystemMapInput` via:
//
//	FsxOpenZfsFileSystemMap{ "key": FsxOpenZfsFileSystemArgs{...} }
type FsxOpenZfsFileSystemMapInput interface {
	pulumi.Input

	ToFsxOpenZfsFileSystemMapOutput() FsxOpenZfsFileSystemMapOutput
	ToFsxOpenZfsFileSystemMapOutputWithContext(context.Context) FsxOpenZfsFileSystemMapOutput
}

type FsxOpenZfsFileSystemMap map[string]FsxOpenZfsFileSystemInput

func (FsxOpenZfsFileSystemMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FsxOpenZfsFileSystem)(nil)).Elem()
}

func (i FsxOpenZfsFileSystemMap) ToFsxOpenZfsFileSystemMapOutput() FsxOpenZfsFileSystemMapOutput {
	return i.ToFsxOpenZfsFileSystemMapOutputWithContext(context.Background())
}

func (i FsxOpenZfsFileSystemMap) ToFsxOpenZfsFileSystemMapOutputWithContext(ctx context.Context) FsxOpenZfsFileSystemMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FsxOpenZfsFileSystemMapOutput)
}

type FsxOpenZfsFileSystemOutput struct{ *pulumi.OutputState }

func (FsxOpenZfsFileSystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FsxOpenZfsFileSystem)(nil)).Elem()
}

func (o FsxOpenZfsFileSystemOutput) ToFsxOpenZfsFileSystemOutput() FsxOpenZfsFileSystemOutput {
	return o
}

func (o FsxOpenZfsFileSystemOutput) ToFsxOpenZfsFileSystemOutputWithContext(ctx context.Context) FsxOpenZfsFileSystemOutput {
	return o
}

func (o FsxOpenZfsFileSystemOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *FsxOpenZfsFileSystem) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o FsxOpenZfsFileSystemOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *FsxOpenZfsFileSystem) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

func (o FsxOpenZfsFileSystemOutput) FsxFilesystemArn() pulumi.StringOutput {
	return o.ApplyT(func(v *FsxOpenZfsFileSystem) pulumi.StringOutput { return v.FsxFilesystemArn }).(pulumi.StringOutput)
}

func (o FsxOpenZfsFileSystemOutput) Protocol() FsxOpenZfsFileSystemProtocolOutput {
	return o.ApplyT(func(v *FsxOpenZfsFileSystem) FsxOpenZfsFileSystemProtocolOutput { return v.Protocol }).(FsxOpenZfsFileSystemProtocolOutput)
}

func (o FsxOpenZfsFileSystemOutput) SecurityGroupArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FsxOpenZfsFileSystem) pulumi.StringArrayOutput { return v.SecurityGroupArns }).(pulumi.StringArrayOutput)
}

func (o FsxOpenZfsFileSystemOutput) Subdirectory() pulumi.StringOutput {
	return o.ApplyT(func(v *FsxOpenZfsFileSystem) pulumi.StringOutput { return v.Subdirectory }).(pulumi.StringOutput)
}

func (o FsxOpenZfsFileSystemOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FsxOpenZfsFileSystem) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o FsxOpenZfsFileSystemOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FsxOpenZfsFileSystem) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o FsxOpenZfsFileSystemOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v *FsxOpenZfsFileSystem) pulumi.StringOutput { return v.Uri }).(pulumi.StringOutput)
}

type FsxOpenZfsFileSystemArrayOutput struct{ *pulumi.OutputState }

func (FsxOpenZfsFileSystemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FsxOpenZfsFileSystem)(nil)).Elem()
}

func (o FsxOpenZfsFileSystemArrayOutput) ToFsxOpenZfsFileSystemArrayOutput() FsxOpenZfsFileSystemArrayOutput {
	return o
}

func (o FsxOpenZfsFileSystemArrayOutput) ToFsxOpenZfsFileSystemArrayOutputWithContext(ctx context.Context) FsxOpenZfsFileSystemArrayOutput {
	return o
}

func (o FsxOpenZfsFileSystemArrayOutput) Index(i pulumi.IntInput) FsxOpenZfsFileSystemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FsxOpenZfsFileSystem {
		return vs[0].([]*FsxOpenZfsFileSystem)[vs[1].(int)]
	}).(FsxOpenZfsFileSystemOutput)
}

type FsxOpenZfsFileSystemMapOutput struct{ *pulumi.OutputState }

func (FsxOpenZfsFileSystemMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FsxOpenZfsFileSystem)(nil)).Elem()
}

func (o FsxOpenZfsFileSystemMapOutput) ToFsxOpenZfsFileSystemMapOutput() FsxOpenZfsFileSystemMapOutput {
	return o
}

func (o FsxOpenZfsFileSystemMapOutput) ToFsxOpenZfsFileSystemMapOutputWithContext(ctx context.Context) FsxOpenZfsFileSystemMapOutput {
	return o
}

func (o FsxOpenZfsFileSystemMapOutput) MapIndex(k pulumi.StringInput) FsxOpenZfsFileSystemOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FsxOpenZfsFileSystem {
		return vs[0].(map[string]*FsxOpenZfsFileSystem)[vs[1].(string)]
	}).(FsxOpenZfsFileSystemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FsxOpenZfsFileSystemInput)(nil)).Elem(), &FsxOpenZfsFileSystem{})
	pulumi.RegisterInputType(reflect.TypeOf((*FsxOpenZfsFileSystemArrayInput)(nil)).Elem(), FsxOpenZfsFileSystemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FsxOpenZfsFileSystemMapInput)(nil)).Elem(), FsxOpenZfsFileSystemMap{})
	pulumi.RegisterOutputType(FsxOpenZfsFileSystemOutput{})
	pulumi.RegisterOutputType(FsxOpenZfsFileSystemArrayOutput{})
	pulumi.RegisterOutputType(FsxOpenZfsFileSystemMapOutput{})
}
