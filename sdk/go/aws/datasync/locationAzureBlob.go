// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasync

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a Microsoft Azure Blob Storage Location within AWS DataSync.
//
// > **NOTE:** The DataSync Agents must be available before creating this resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/datasync"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datasync.NewLocationAzureBlob(ctx, "example", &datasync.LocationAzureBlobArgs{
//				AgentArns: pulumi.StringArray{
//					aws_datasync_agent.Example.Arn,
//				},
//				AuthenticationType: pulumi.String("SAS"),
//				ContainerUrl:       pulumi.String("https://example.com/path"),
//				SasConfiguration: &datasync.LocationAzureBlobSasConfigurationArgs{
//					Token: pulumi.String("sp=r&st=2023-12-20T14:54:52Z&se=2023-12-20T22:54:52Z&spr=https&sv=2021-06-08&sr=c&sig=aBBKDWQvyuVcTPH9EBp%2FXTI9E%2F%2Fmq171%2BZU178wcwqU%3D"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// In TODO v1.5.0 and later, use an `import` block to import `aws_datasync_location_azure_blob` using the Amazon Resource Name (ARN). For exampleterraform import {
//
//	to = aws_datasync_location_azure_blob.example
//
//	id = "arn:aws:datasync:us-east-1:123456789012:location/loc-12345678901234567" } Using `TODO import`, import `aws_datasync_location_azure_blob` using the Amazon Resource Name (ARN). For exampleconsole % TODO import aws_datasync_location_azure_blob.example arn:aws:datasync:us-east-1:123456789012:location/loc-12345678901234567
type LocationAzureBlob struct {
	pulumi.CustomResourceState

	// The access tier that you want your objects or files transferred into. Valid values: `HOT`, `COOL` and `ARCHIVE`. Default: `HOT`.
	AccessTier pulumi.StringPtrOutput `pulumi:"accessTier"`
	// A list of DataSync Agent ARNs with which this location will be associated.
	AgentArns pulumi.StringArrayOutput `pulumi:"agentArns"`
	// Amazon Resource Name (ARN) of the DataSync Location.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The authentication method DataSync uses to access your Azure Blob Storage. Valid values: `SAS`.
	AuthenticationType pulumi.StringOutput `pulumi:"authenticationType"`
	// The type of blob that you want your objects or files to be when transferring them into Azure Blob Storage. Valid values: `BLOB`. Default: `BLOB`.
	BlobType pulumi.StringPtrOutput `pulumi:"blobType"`
	// The URL of the Azure Blob Storage container involved in your transfer.
	ContainerUrl pulumi.StringOutput `pulumi:"containerUrl"`
	// The SAS configuration that allows DataSync to access your Azure Blob Storage. See configuration below.
	SasConfiguration LocationAzureBlobSasConfigurationPtrOutput `pulumi:"sasConfiguration"`
	// Path segments if you want to limit your transfer to a virtual directory in the container.
	Subdirectory pulumi.StringOutput `pulumi:"subdirectory"`
	// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	Uri     pulumi.StringOutput    `pulumi:"uri"`
}

// NewLocationAzureBlob registers a new resource with the given unique name, arguments, and options.
func NewLocationAzureBlob(ctx *pulumi.Context,
	name string, args *LocationAzureBlobArgs, opts ...pulumi.ResourceOption) (*LocationAzureBlob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AgentArns == nil {
		return nil, errors.New("invalid value for required argument 'AgentArns'")
	}
	if args.AuthenticationType == nil {
		return nil, errors.New("invalid value for required argument 'AuthenticationType'")
	}
	if args.ContainerUrl == nil {
		return nil, errors.New("invalid value for required argument 'ContainerUrl'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"tagsAll",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LocationAzureBlob
	err := ctx.RegisterResource("aws:datasync/locationAzureBlob:LocationAzureBlob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLocationAzureBlob gets an existing LocationAzureBlob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLocationAzureBlob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LocationAzureBlobState, opts ...pulumi.ResourceOption) (*LocationAzureBlob, error) {
	var resource LocationAzureBlob
	err := ctx.ReadResource("aws:datasync/locationAzureBlob:LocationAzureBlob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LocationAzureBlob resources.
type locationAzureBlobState struct {
	// The access tier that you want your objects or files transferred into. Valid values: `HOT`, `COOL` and `ARCHIVE`. Default: `HOT`.
	AccessTier *string `pulumi:"accessTier"`
	// A list of DataSync Agent ARNs with which this location will be associated.
	AgentArns []string `pulumi:"agentArns"`
	// Amazon Resource Name (ARN) of the DataSync Location.
	Arn *string `pulumi:"arn"`
	// The authentication method DataSync uses to access your Azure Blob Storage. Valid values: `SAS`.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The type of blob that you want your objects or files to be when transferring them into Azure Blob Storage. Valid values: `BLOB`. Default: `BLOB`.
	BlobType *string `pulumi:"blobType"`
	// The URL of the Azure Blob Storage container involved in your transfer.
	ContainerUrl *string `pulumi:"containerUrl"`
	// The SAS configuration that allows DataSync to access your Azure Blob Storage. See configuration below.
	SasConfiguration *LocationAzureBlobSasConfiguration `pulumi:"sasConfiguration"`
	// Path segments if you want to limit your transfer to a virtual directory in the container.
	Subdirectory *string `pulumi:"subdirectory"`
	// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
	Uri     *string           `pulumi:"uri"`
}

type LocationAzureBlobState struct {
	// The access tier that you want your objects or files transferred into. Valid values: `HOT`, `COOL` and `ARCHIVE`. Default: `HOT`.
	AccessTier pulumi.StringPtrInput
	// A list of DataSync Agent ARNs with which this location will be associated.
	AgentArns pulumi.StringArrayInput
	// Amazon Resource Name (ARN) of the DataSync Location.
	Arn pulumi.StringPtrInput
	// The authentication method DataSync uses to access your Azure Blob Storage. Valid values: `SAS`.
	AuthenticationType pulumi.StringPtrInput
	// The type of blob that you want your objects or files to be when transferring them into Azure Blob Storage. Valid values: `BLOB`. Default: `BLOB`.
	BlobType pulumi.StringPtrInput
	// The URL of the Azure Blob Storage container involved in your transfer.
	ContainerUrl pulumi.StringPtrInput
	// The SAS configuration that allows DataSync to access your Azure Blob Storage. See configuration below.
	SasConfiguration LocationAzureBlobSasConfigurationPtrInput
	// Path segments if you want to limit your transfer to a virtual directory in the container.
	Subdirectory pulumi.StringPtrInput
	// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
	Uri     pulumi.StringPtrInput
}

func (LocationAzureBlobState) ElementType() reflect.Type {
	return reflect.TypeOf((*locationAzureBlobState)(nil)).Elem()
}

type locationAzureBlobArgs struct {
	// The access tier that you want your objects or files transferred into. Valid values: `HOT`, `COOL` and `ARCHIVE`. Default: `HOT`.
	AccessTier *string `pulumi:"accessTier"`
	// A list of DataSync Agent ARNs with which this location will be associated.
	AgentArns []string `pulumi:"agentArns"`
	// The authentication method DataSync uses to access your Azure Blob Storage. Valid values: `SAS`.
	AuthenticationType string `pulumi:"authenticationType"`
	// The type of blob that you want your objects or files to be when transferring them into Azure Blob Storage. Valid values: `BLOB`. Default: `BLOB`.
	BlobType *string `pulumi:"blobType"`
	// The URL of the Azure Blob Storage container involved in your transfer.
	ContainerUrl string `pulumi:"containerUrl"`
	// The SAS configuration that allows DataSync to access your Azure Blob Storage. See configuration below.
	SasConfiguration *LocationAzureBlobSasConfiguration `pulumi:"sasConfiguration"`
	// Path segments if you want to limit your transfer to a virtual directory in the container.
	Subdirectory *string `pulumi:"subdirectory"`
	// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a LocationAzureBlob resource.
type LocationAzureBlobArgs struct {
	// The access tier that you want your objects or files transferred into. Valid values: `HOT`, `COOL` and `ARCHIVE`. Default: `HOT`.
	AccessTier pulumi.StringPtrInput
	// A list of DataSync Agent ARNs with which this location will be associated.
	AgentArns pulumi.StringArrayInput
	// The authentication method DataSync uses to access your Azure Blob Storage. Valid values: `SAS`.
	AuthenticationType pulumi.StringInput
	// The type of blob that you want your objects or files to be when transferring them into Azure Blob Storage. Valid values: `BLOB`. Default: `BLOB`.
	BlobType pulumi.StringPtrInput
	// The URL of the Azure Blob Storage container involved in your transfer.
	ContainerUrl pulumi.StringInput
	// The SAS configuration that allows DataSync to access your Azure Blob Storage. See configuration below.
	SasConfiguration LocationAzureBlobSasConfigurationPtrInput
	// Path segments if you want to limit your transfer to a virtual directory in the container.
	Subdirectory pulumi.StringPtrInput
	// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
}

func (LocationAzureBlobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*locationAzureBlobArgs)(nil)).Elem()
}

type LocationAzureBlobInput interface {
	pulumi.Input

	ToLocationAzureBlobOutput() LocationAzureBlobOutput
	ToLocationAzureBlobOutputWithContext(ctx context.Context) LocationAzureBlobOutput
}

func (*LocationAzureBlob) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationAzureBlob)(nil)).Elem()
}

func (i *LocationAzureBlob) ToLocationAzureBlobOutput() LocationAzureBlobOutput {
	return i.ToLocationAzureBlobOutputWithContext(context.Background())
}

func (i *LocationAzureBlob) ToLocationAzureBlobOutputWithContext(ctx context.Context) LocationAzureBlobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationAzureBlobOutput)
}

func (i *LocationAzureBlob) ToOutput(ctx context.Context) pulumix.Output[*LocationAzureBlob] {
	return pulumix.Output[*LocationAzureBlob]{
		OutputState: i.ToLocationAzureBlobOutputWithContext(ctx).OutputState,
	}
}

// LocationAzureBlobArrayInput is an input type that accepts LocationAzureBlobArray and LocationAzureBlobArrayOutput values.
// You can construct a concrete instance of `LocationAzureBlobArrayInput` via:
//
//	LocationAzureBlobArray{ LocationAzureBlobArgs{...} }
type LocationAzureBlobArrayInput interface {
	pulumi.Input

	ToLocationAzureBlobArrayOutput() LocationAzureBlobArrayOutput
	ToLocationAzureBlobArrayOutputWithContext(context.Context) LocationAzureBlobArrayOutput
}

type LocationAzureBlobArray []LocationAzureBlobInput

func (LocationAzureBlobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LocationAzureBlob)(nil)).Elem()
}

func (i LocationAzureBlobArray) ToLocationAzureBlobArrayOutput() LocationAzureBlobArrayOutput {
	return i.ToLocationAzureBlobArrayOutputWithContext(context.Background())
}

func (i LocationAzureBlobArray) ToLocationAzureBlobArrayOutputWithContext(ctx context.Context) LocationAzureBlobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationAzureBlobArrayOutput)
}

func (i LocationAzureBlobArray) ToOutput(ctx context.Context) pulumix.Output[[]*LocationAzureBlob] {
	return pulumix.Output[[]*LocationAzureBlob]{
		OutputState: i.ToLocationAzureBlobArrayOutputWithContext(ctx).OutputState,
	}
}

// LocationAzureBlobMapInput is an input type that accepts LocationAzureBlobMap and LocationAzureBlobMapOutput values.
// You can construct a concrete instance of `LocationAzureBlobMapInput` via:
//
//	LocationAzureBlobMap{ "key": LocationAzureBlobArgs{...} }
type LocationAzureBlobMapInput interface {
	pulumi.Input

	ToLocationAzureBlobMapOutput() LocationAzureBlobMapOutput
	ToLocationAzureBlobMapOutputWithContext(context.Context) LocationAzureBlobMapOutput
}

type LocationAzureBlobMap map[string]LocationAzureBlobInput

func (LocationAzureBlobMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LocationAzureBlob)(nil)).Elem()
}

func (i LocationAzureBlobMap) ToLocationAzureBlobMapOutput() LocationAzureBlobMapOutput {
	return i.ToLocationAzureBlobMapOutputWithContext(context.Background())
}

func (i LocationAzureBlobMap) ToLocationAzureBlobMapOutputWithContext(ctx context.Context) LocationAzureBlobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationAzureBlobMapOutput)
}

func (i LocationAzureBlobMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*LocationAzureBlob] {
	return pulumix.Output[map[string]*LocationAzureBlob]{
		OutputState: i.ToLocationAzureBlobMapOutputWithContext(ctx).OutputState,
	}
}

type LocationAzureBlobOutput struct{ *pulumi.OutputState }

func (LocationAzureBlobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationAzureBlob)(nil)).Elem()
}

func (o LocationAzureBlobOutput) ToLocationAzureBlobOutput() LocationAzureBlobOutput {
	return o
}

func (o LocationAzureBlobOutput) ToLocationAzureBlobOutputWithContext(ctx context.Context) LocationAzureBlobOutput {
	return o
}

func (o LocationAzureBlobOutput) ToOutput(ctx context.Context) pulumix.Output[*LocationAzureBlob] {
	return pulumix.Output[*LocationAzureBlob]{
		OutputState: o.OutputState,
	}
}

// The access tier that you want your objects or files transferred into. Valid values: `HOT`, `COOL` and `ARCHIVE`. Default: `HOT`.
func (o LocationAzureBlobOutput) AccessTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationAzureBlob) pulumi.StringPtrOutput { return v.AccessTier }).(pulumi.StringPtrOutput)
}

// A list of DataSync Agent ARNs with which this location will be associated.
func (o LocationAzureBlobOutput) AgentArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LocationAzureBlob) pulumi.StringArrayOutput { return v.AgentArns }).(pulumi.StringArrayOutput)
}

// Amazon Resource Name (ARN) of the DataSync Location.
func (o LocationAzureBlobOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *LocationAzureBlob) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The authentication method DataSync uses to access your Azure Blob Storage. Valid values: `SAS`.
func (o LocationAzureBlobOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v *LocationAzureBlob) pulumi.StringOutput { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The type of blob that you want your objects or files to be when transferring them into Azure Blob Storage. Valid values: `BLOB`. Default: `BLOB`.
func (o LocationAzureBlobOutput) BlobType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationAzureBlob) pulumi.StringPtrOutput { return v.BlobType }).(pulumi.StringPtrOutput)
}

// The URL of the Azure Blob Storage container involved in your transfer.
func (o LocationAzureBlobOutput) ContainerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *LocationAzureBlob) pulumi.StringOutput { return v.ContainerUrl }).(pulumi.StringOutput)
}

// The SAS configuration that allows DataSync to access your Azure Blob Storage. See configuration below.
func (o LocationAzureBlobOutput) SasConfiguration() LocationAzureBlobSasConfigurationPtrOutput {
	return o.ApplyT(func(v *LocationAzureBlob) LocationAzureBlobSasConfigurationPtrOutput { return v.SasConfiguration }).(LocationAzureBlobSasConfigurationPtrOutput)
}

// Path segments if you want to limit your transfer to a virtual directory in the container.
func (o LocationAzureBlobOutput) Subdirectory() pulumi.StringOutput {
	return o.ApplyT(func(v *LocationAzureBlob) pulumi.StringOutput { return v.Subdirectory }).(pulumi.StringOutput)
}

// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o LocationAzureBlobOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LocationAzureBlob) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o LocationAzureBlobOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LocationAzureBlob) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o LocationAzureBlobOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v *LocationAzureBlob) pulumi.StringOutput { return v.Uri }).(pulumi.StringOutput)
}

type LocationAzureBlobArrayOutput struct{ *pulumi.OutputState }

func (LocationAzureBlobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LocationAzureBlob)(nil)).Elem()
}

func (o LocationAzureBlobArrayOutput) ToLocationAzureBlobArrayOutput() LocationAzureBlobArrayOutput {
	return o
}

func (o LocationAzureBlobArrayOutput) ToLocationAzureBlobArrayOutputWithContext(ctx context.Context) LocationAzureBlobArrayOutput {
	return o
}

func (o LocationAzureBlobArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*LocationAzureBlob] {
	return pulumix.Output[[]*LocationAzureBlob]{
		OutputState: o.OutputState,
	}
}

func (o LocationAzureBlobArrayOutput) Index(i pulumi.IntInput) LocationAzureBlobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LocationAzureBlob {
		return vs[0].([]*LocationAzureBlob)[vs[1].(int)]
	}).(LocationAzureBlobOutput)
}

type LocationAzureBlobMapOutput struct{ *pulumi.OutputState }

func (LocationAzureBlobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LocationAzureBlob)(nil)).Elem()
}

func (o LocationAzureBlobMapOutput) ToLocationAzureBlobMapOutput() LocationAzureBlobMapOutput {
	return o
}

func (o LocationAzureBlobMapOutput) ToLocationAzureBlobMapOutputWithContext(ctx context.Context) LocationAzureBlobMapOutput {
	return o
}

func (o LocationAzureBlobMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*LocationAzureBlob] {
	return pulumix.Output[map[string]*LocationAzureBlob]{
		OutputState: o.OutputState,
	}
}

func (o LocationAzureBlobMapOutput) MapIndex(k pulumi.StringInput) LocationAzureBlobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LocationAzureBlob {
		return vs[0].(map[string]*LocationAzureBlob)[vs[1].(string)]
	}).(LocationAzureBlobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LocationAzureBlobInput)(nil)).Elem(), &LocationAzureBlob{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationAzureBlobArrayInput)(nil)).Elem(), LocationAzureBlobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationAzureBlobMapInput)(nil)).Elem(), LocationAzureBlobMap{})
	pulumi.RegisterOutputType(LocationAzureBlobOutput{})
	pulumi.RegisterOutputType(LocationAzureBlobArrayOutput{})
	pulumi.RegisterOutputType(LocationAzureBlobMapOutput{})
}
