// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasync

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LocationSmb struct {
	pulumi.CustomResourceState

	AgentArns      pulumi.StringArrayOutput         `pulumi:"agentArns"`
	Arn            pulumi.StringOutput              `pulumi:"arn"`
	Domain         pulumi.StringOutput              `pulumi:"domain"`
	MountOptions   LocationSmbMountOptionsPtrOutput `pulumi:"mountOptions"`
	Password       pulumi.StringOutput              `pulumi:"password"`
	ServerHostname pulumi.StringOutput              `pulumi:"serverHostname"`
	Subdirectory   pulumi.StringOutput              `pulumi:"subdirectory"`
	Tags           pulumi.StringMapOutput           `pulumi:"tags"`
	TagsAll        pulumi.StringMapOutput           `pulumi:"tagsAll"`
	Uri            pulumi.StringOutput              `pulumi:"uri"`
	User           pulumi.StringOutput              `pulumi:"user"`
}

// NewLocationSmb registers a new resource with the given unique name, arguments, and options.
func NewLocationSmb(ctx *pulumi.Context,
	name string, args *LocationSmbArgs, opts ...pulumi.ResourceOption) (*LocationSmb, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AgentArns == nil {
		return nil, errors.New("invalid value for required argument 'AgentArns'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.ServerHostname == nil {
		return nil, errors.New("invalid value for required argument 'ServerHostname'")
	}
	if args.Subdirectory == nil {
		return nil, errors.New("invalid value for required argument 'Subdirectory'")
	}
	if args.User == nil {
		return nil, errors.New("invalid value for required argument 'User'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	var resource LocationSmb
	err := ctx.RegisterResource("aws:datasync/locationSmb:LocationSmb", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLocationSmb gets an existing LocationSmb resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLocationSmb(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LocationSmbState, opts ...pulumi.ResourceOption) (*LocationSmb, error) {
	var resource LocationSmb
	err := ctx.ReadResource("aws:datasync/locationSmb:LocationSmb", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LocationSmb resources.
type locationSmbState struct {
	AgentArns      []string                 `pulumi:"agentArns"`
	Arn            *string                  `pulumi:"arn"`
	Domain         *string                  `pulumi:"domain"`
	MountOptions   *LocationSmbMountOptions `pulumi:"mountOptions"`
	Password       *string                  `pulumi:"password"`
	ServerHostname *string                  `pulumi:"serverHostname"`
	Subdirectory   *string                  `pulumi:"subdirectory"`
	Tags           map[string]string        `pulumi:"tags"`
	TagsAll        map[string]string        `pulumi:"tagsAll"`
	Uri            *string                  `pulumi:"uri"`
	User           *string                  `pulumi:"user"`
}

type LocationSmbState struct {
	AgentArns      pulumi.StringArrayInput
	Arn            pulumi.StringPtrInput
	Domain         pulumi.StringPtrInput
	MountOptions   LocationSmbMountOptionsPtrInput
	Password       pulumi.StringPtrInput
	ServerHostname pulumi.StringPtrInput
	Subdirectory   pulumi.StringPtrInput
	Tags           pulumi.StringMapInput
	TagsAll        pulumi.StringMapInput
	Uri            pulumi.StringPtrInput
	User           pulumi.StringPtrInput
}

func (LocationSmbState) ElementType() reflect.Type {
	return reflect.TypeOf((*locationSmbState)(nil)).Elem()
}

type locationSmbArgs struct {
	AgentArns      []string                 `pulumi:"agentArns"`
	Domain         *string                  `pulumi:"domain"`
	MountOptions   *LocationSmbMountOptions `pulumi:"mountOptions"`
	Password       string                   `pulumi:"password"`
	ServerHostname string                   `pulumi:"serverHostname"`
	Subdirectory   string                   `pulumi:"subdirectory"`
	Tags           map[string]string        `pulumi:"tags"`
	User           string                   `pulumi:"user"`
}

// The set of arguments for constructing a LocationSmb resource.
type LocationSmbArgs struct {
	AgentArns      pulumi.StringArrayInput
	Domain         pulumi.StringPtrInput
	MountOptions   LocationSmbMountOptionsPtrInput
	Password       pulumi.StringInput
	ServerHostname pulumi.StringInput
	Subdirectory   pulumi.StringInput
	Tags           pulumi.StringMapInput
	User           pulumi.StringInput
}

func (LocationSmbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*locationSmbArgs)(nil)).Elem()
}

type LocationSmbInput interface {
	pulumi.Input

	ToLocationSmbOutput() LocationSmbOutput
	ToLocationSmbOutputWithContext(ctx context.Context) LocationSmbOutput
}

func (*LocationSmb) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationSmb)(nil)).Elem()
}

func (i *LocationSmb) ToLocationSmbOutput() LocationSmbOutput {
	return i.ToLocationSmbOutputWithContext(context.Background())
}

func (i *LocationSmb) ToLocationSmbOutputWithContext(ctx context.Context) LocationSmbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationSmbOutput)
}

// LocationSmbArrayInput is an input type that accepts LocationSmbArray and LocationSmbArrayOutput values.
// You can construct a concrete instance of `LocationSmbArrayInput` via:
//
//	LocationSmbArray{ LocationSmbArgs{...} }
type LocationSmbArrayInput interface {
	pulumi.Input

	ToLocationSmbArrayOutput() LocationSmbArrayOutput
	ToLocationSmbArrayOutputWithContext(context.Context) LocationSmbArrayOutput
}

type LocationSmbArray []LocationSmbInput

func (LocationSmbArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LocationSmb)(nil)).Elem()
}

func (i LocationSmbArray) ToLocationSmbArrayOutput() LocationSmbArrayOutput {
	return i.ToLocationSmbArrayOutputWithContext(context.Background())
}

func (i LocationSmbArray) ToLocationSmbArrayOutputWithContext(ctx context.Context) LocationSmbArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationSmbArrayOutput)
}

// LocationSmbMapInput is an input type that accepts LocationSmbMap and LocationSmbMapOutput values.
// You can construct a concrete instance of `LocationSmbMapInput` via:
//
//	LocationSmbMap{ "key": LocationSmbArgs{...} }
type LocationSmbMapInput interface {
	pulumi.Input

	ToLocationSmbMapOutput() LocationSmbMapOutput
	ToLocationSmbMapOutputWithContext(context.Context) LocationSmbMapOutput
}

type LocationSmbMap map[string]LocationSmbInput

func (LocationSmbMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LocationSmb)(nil)).Elem()
}

func (i LocationSmbMap) ToLocationSmbMapOutput() LocationSmbMapOutput {
	return i.ToLocationSmbMapOutputWithContext(context.Background())
}

func (i LocationSmbMap) ToLocationSmbMapOutputWithContext(ctx context.Context) LocationSmbMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationSmbMapOutput)
}

type LocationSmbOutput struct{ *pulumi.OutputState }

func (LocationSmbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationSmb)(nil)).Elem()
}

func (o LocationSmbOutput) ToLocationSmbOutput() LocationSmbOutput {
	return o
}

func (o LocationSmbOutput) ToLocationSmbOutputWithContext(ctx context.Context) LocationSmbOutput {
	return o
}

func (o LocationSmbOutput) AgentArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LocationSmb) pulumi.StringArrayOutput { return v.AgentArns }).(pulumi.StringArrayOutput)
}

func (o LocationSmbOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *LocationSmb) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o LocationSmbOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *LocationSmb) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

func (o LocationSmbOutput) MountOptions() LocationSmbMountOptionsPtrOutput {
	return o.ApplyT(func(v *LocationSmb) LocationSmbMountOptionsPtrOutput { return v.MountOptions }).(LocationSmbMountOptionsPtrOutput)
}

func (o LocationSmbOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *LocationSmb) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

func (o LocationSmbOutput) ServerHostname() pulumi.StringOutput {
	return o.ApplyT(func(v *LocationSmb) pulumi.StringOutput { return v.ServerHostname }).(pulumi.StringOutput)
}

func (o LocationSmbOutput) Subdirectory() pulumi.StringOutput {
	return o.ApplyT(func(v *LocationSmb) pulumi.StringOutput { return v.Subdirectory }).(pulumi.StringOutput)
}

func (o LocationSmbOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LocationSmb) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o LocationSmbOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LocationSmb) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o LocationSmbOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v *LocationSmb) pulumi.StringOutput { return v.Uri }).(pulumi.StringOutput)
}

func (o LocationSmbOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v *LocationSmb) pulumi.StringOutput { return v.User }).(pulumi.StringOutput)
}

type LocationSmbArrayOutput struct{ *pulumi.OutputState }

func (LocationSmbArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LocationSmb)(nil)).Elem()
}

func (o LocationSmbArrayOutput) ToLocationSmbArrayOutput() LocationSmbArrayOutput {
	return o
}

func (o LocationSmbArrayOutput) ToLocationSmbArrayOutputWithContext(ctx context.Context) LocationSmbArrayOutput {
	return o
}

func (o LocationSmbArrayOutput) Index(i pulumi.IntInput) LocationSmbOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LocationSmb {
		return vs[0].([]*LocationSmb)[vs[1].(int)]
	}).(LocationSmbOutput)
}

type LocationSmbMapOutput struct{ *pulumi.OutputState }

func (LocationSmbMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LocationSmb)(nil)).Elem()
}

func (o LocationSmbMapOutput) ToLocationSmbMapOutput() LocationSmbMapOutput {
	return o
}

func (o LocationSmbMapOutput) ToLocationSmbMapOutputWithContext(ctx context.Context) LocationSmbMapOutput {
	return o
}

func (o LocationSmbMapOutput) MapIndex(k pulumi.StringInput) LocationSmbOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LocationSmb {
		return vs[0].(map[string]*LocationSmb)[vs[1].(string)]
	}).(LocationSmbOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LocationSmbInput)(nil)).Elem(), &LocationSmb{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationSmbArrayInput)(nil)).Elem(), LocationSmbArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationSmbMapInput)(nil)).Elem(), LocationSmbMap{})
	pulumi.RegisterOutputType(LocationSmbOutput{})
	pulumi.RegisterOutputType(LocationSmbArrayOutput{})
	pulumi.RegisterOutputType(LocationSmbMapOutput{})
}
