// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasync

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type S3Location struct {
	pulumi.CustomResourceState

	AgentArns      pulumi.StringArrayOutput `pulumi:"agentArns"`
	Arn            pulumi.StringOutput      `pulumi:"arn"`
	S3BucketArn    pulumi.StringOutput      `pulumi:"s3BucketArn"`
	S3Config       S3LocationS3ConfigOutput `pulumi:"s3Config"`
	S3StorageClass pulumi.StringOutput      `pulumi:"s3StorageClass"`
	Subdirectory   pulumi.StringOutput      `pulumi:"subdirectory"`
	Tags           pulumi.StringMapOutput   `pulumi:"tags"`
	TagsAll        pulumi.StringMapOutput   `pulumi:"tagsAll"`
	Uri            pulumi.StringOutput      `pulumi:"uri"`
}

// NewS3Location registers a new resource with the given unique name, arguments, and options.
func NewS3Location(ctx *pulumi.Context,
	name string, args *S3LocationArgs, opts ...pulumi.ResourceOption) (*S3Location, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.S3BucketArn == nil {
		return nil, errors.New("invalid value for required argument 'S3BucketArn'")
	}
	if args.S3Config == nil {
		return nil, errors.New("invalid value for required argument 'S3Config'")
	}
	if args.Subdirectory == nil {
		return nil, errors.New("invalid value for required argument 'Subdirectory'")
	}
	var resource S3Location
	err := ctx.RegisterResource("aws:datasync/s3Location:S3Location", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetS3Location gets an existing S3Location resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetS3Location(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *S3LocationState, opts ...pulumi.ResourceOption) (*S3Location, error) {
	var resource S3Location
	err := ctx.ReadResource("aws:datasync/s3Location:S3Location", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering S3Location resources.
type s3locationState struct {
	AgentArns      []string            `pulumi:"agentArns"`
	Arn            *string             `pulumi:"arn"`
	S3BucketArn    *string             `pulumi:"s3BucketArn"`
	S3Config       *S3LocationS3Config `pulumi:"s3Config"`
	S3StorageClass *string             `pulumi:"s3StorageClass"`
	Subdirectory   *string             `pulumi:"subdirectory"`
	Tags           map[string]string   `pulumi:"tags"`
	TagsAll        map[string]string   `pulumi:"tagsAll"`
	Uri            *string             `pulumi:"uri"`
}

type S3LocationState struct {
	AgentArns      pulumi.StringArrayInput
	Arn            pulumi.StringPtrInput
	S3BucketArn    pulumi.StringPtrInput
	S3Config       S3LocationS3ConfigPtrInput
	S3StorageClass pulumi.StringPtrInput
	Subdirectory   pulumi.StringPtrInput
	Tags           pulumi.StringMapInput
	TagsAll        pulumi.StringMapInput
	Uri            pulumi.StringPtrInput
}

func (S3LocationState) ElementType() reflect.Type {
	return reflect.TypeOf((*s3locationState)(nil)).Elem()
}

type s3locationArgs struct {
	AgentArns      []string           `pulumi:"agentArns"`
	S3BucketArn    string             `pulumi:"s3BucketArn"`
	S3Config       S3LocationS3Config `pulumi:"s3Config"`
	S3StorageClass *string            `pulumi:"s3StorageClass"`
	Subdirectory   string             `pulumi:"subdirectory"`
	Tags           map[string]string  `pulumi:"tags"`
}

// The set of arguments for constructing a S3Location resource.
type S3LocationArgs struct {
	AgentArns      pulumi.StringArrayInput
	S3BucketArn    pulumi.StringInput
	S3Config       S3LocationS3ConfigInput
	S3StorageClass pulumi.StringPtrInput
	Subdirectory   pulumi.StringInput
	Tags           pulumi.StringMapInput
}

func (S3LocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*s3locationArgs)(nil)).Elem()
}

type S3LocationInput interface {
	pulumi.Input

	ToS3LocationOutput() S3LocationOutput
	ToS3LocationOutputWithContext(ctx context.Context) S3LocationOutput
}

func (*S3Location) ElementType() reflect.Type {
	return reflect.TypeOf((**S3Location)(nil)).Elem()
}

func (i *S3Location) ToS3LocationOutput() S3LocationOutput {
	return i.ToS3LocationOutputWithContext(context.Background())
}

func (i *S3Location) ToS3LocationOutputWithContext(ctx context.Context) S3LocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3LocationOutput)
}

// S3LocationArrayInput is an input type that accepts S3LocationArray and S3LocationArrayOutput values.
// You can construct a concrete instance of `S3LocationArrayInput` via:
//
//	S3LocationArray{ S3LocationArgs{...} }
type S3LocationArrayInput interface {
	pulumi.Input

	ToS3LocationArrayOutput() S3LocationArrayOutput
	ToS3LocationArrayOutputWithContext(context.Context) S3LocationArrayOutput
}

type S3LocationArray []S3LocationInput

func (S3LocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*S3Location)(nil)).Elem()
}

func (i S3LocationArray) ToS3LocationArrayOutput() S3LocationArrayOutput {
	return i.ToS3LocationArrayOutputWithContext(context.Background())
}

func (i S3LocationArray) ToS3LocationArrayOutputWithContext(ctx context.Context) S3LocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3LocationArrayOutput)
}

// S3LocationMapInput is an input type that accepts S3LocationMap and S3LocationMapOutput values.
// You can construct a concrete instance of `S3LocationMapInput` via:
//
//	S3LocationMap{ "key": S3LocationArgs{...} }
type S3LocationMapInput interface {
	pulumi.Input

	ToS3LocationMapOutput() S3LocationMapOutput
	ToS3LocationMapOutputWithContext(context.Context) S3LocationMapOutput
}

type S3LocationMap map[string]S3LocationInput

func (S3LocationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*S3Location)(nil)).Elem()
}

func (i S3LocationMap) ToS3LocationMapOutput() S3LocationMapOutput {
	return i.ToS3LocationMapOutputWithContext(context.Background())
}

func (i S3LocationMap) ToS3LocationMapOutputWithContext(ctx context.Context) S3LocationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3LocationMapOutput)
}

type S3LocationOutput struct{ *pulumi.OutputState }

func (S3LocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**S3Location)(nil)).Elem()
}

func (o S3LocationOutput) ToS3LocationOutput() S3LocationOutput {
	return o
}

func (o S3LocationOutput) ToS3LocationOutputWithContext(ctx context.Context) S3LocationOutput {
	return o
}

func (o S3LocationOutput) AgentArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *S3Location) pulumi.StringArrayOutput { return v.AgentArns }).(pulumi.StringArrayOutput)
}

func (o S3LocationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *S3Location) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o S3LocationOutput) S3BucketArn() pulumi.StringOutput {
	return o.ApplyT(func(v *S3Location) pulumi.StringOutput { return v.S3BucketArn }).(pulumi.StringOutput)
}

func (o S3LocationOutput) S3Config() S3LocationS3ConfigOutput {
	return o.ApplyT(func(v *S3Location) S3LocationS3ConfigOutput { return v.S3Config }).(S3LocationS3ConfigOutput)
}

func (o S3LocationOutput) S3StorageClass() pulumi.StringOutput {
	return o.ApplyT(func(v *S3Location) pulumi.StringOutput { return v.S3StorageClass }).(pulumi.StringOutput)
}

func (o S3LocationOutput) Subdirectory() pulumi.StringOutput {
	return o.ApplyT(func(v *S3Location) pulumi.StringOutput { return v.Subdirectory }).(pulumi.StringOutput)
}

func (o S3LocationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *S3Location) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o S3LocationOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *S3Location) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o S3LocationOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v *S3Location) pulumi.StringOutput { return v.Uri }).(pulumi.StringOutput)
}

type S3LocationArrayOutput struct{ *pulumi.OutputState }

func (S3LocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*S3Location)(nil)).Elem()
}

func (o S3LocationArrayOutput) ToS3LocationArrayOutput() S3LocationArrayOutput {
	return o
}

func (o S3LocationArrayOutput) ToS3LocationArrayOutputWithContext(ctx context.Context) S3LocationArrayOutput {
	return o
}

func (o S3LocationArrayOutput) Index(i pulumi.IntInput) S3LocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *S3Location {
		return vs[0].([]*S3Location)[vs[1].(int)]
	}).(S3LocationOutput)
}

type S3LocationMapOutput struct{ *pulumi.OutputState }

func (S3LocationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*S3Location)(nil)).Elem()
}

func (o S3LocationMapOutput) ToS3LocationMapOutput() S3LocationMapOutput {
	return o
}

func (o S3LocationMapOutput) ToS3LocationMapOutputWithContext(ctx context.Context) S3LocationMapOutput {
	return o
}

func (o S3LocationMapOutput) MapIndex(k pulumi.StringInput) S3LocationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *S3Location {
		return vs[0].(map[string]*S3Location)[vs[1].(string)]
	}).(S3LocationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*S3LocationInput)(nil)).Elem(), &S3Location{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3LocationArrayInput)(nil)).Elem(), S3LocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3LocationMapInput)(nil)).Elem(), S3LocationMap{})
	pulumi.RegisterOutputType(S3LocationOutput{})
	pulumi.RegisterOutputType(S3LocationArrayOutput{})
	pulumi.RegisterOutputType(S3LocationMapOutput{})
}
