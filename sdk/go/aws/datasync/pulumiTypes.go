// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasync

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EfsLocationEc2Config struct {
	// List of Amazon Resource Names (ARNs) of the EC2 Security Groups that are associated with the EFS Mount Target.
	SecurityGroupArns []string `pulumi:"securityGroupArns"`
	// Amazon Resource Name (ARN) of the EC2 Subnet that is associated with the EFS Mount Target.
	SubnetArn string `pulumi:"subnetArn"`
}

// EfsLocationEc2ConfigInput is an input type that accepts EfsLocationEc2ConfigArgs and EfsLocationEc2ConfigOutput values.
// You can construct a concrete instance of `EfsLocationEc2ConfigInput` via:
//
//          EfsLocationEc2ConfigArgs{...}
type EfsLocationEc2ConfigInput interface {
	pulumi.Input

	ToEfsLocationEc2ConfigOutput() EfsLocationEc2ConfigOutput
	ToEfsLocationEc2ConfigOutputWithContext(context.Context) EfsLocationEc2ConfigOutput
}

type EfsLocationEc2ConfigArgs struct {
	// List of Amazon Resource Names (ARNs) of the EC2 Security Groups that are associated with the EFS Mount Target.
	SecurityGroupArns pulumi.StringArrayInput `pulumi:"securityGroupArns"`
	// Amazon Resource Name (ARN) of the EC2 Subnet that is associated with the EFS Mount Target.
	SubnetArn pulumi.StringInput `pulumi:"subnetArn"`
}

func (EfsLocationEc2ConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EfsLocationEc2Config)(nil)).Elem()
}

func (i EfsLocationEc2ConfigArgs) ToEfsLocationEc2ConfigOutput() EfsLocationEc2ConfigOutput {
	return i.ToEfsLocationEc2ConfigOutputWithContext(context.Background())
}

func (i EfsLocationEc2ConfigArgs) ToEfsLocationEc2ConfigOutputWithContext(ctx context.Context) EfsLocationEc2ConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EfsLocationEc2ConfigOutput)
}

func (i EfsLocationEc2ConfigArgs) ToEfsLocationEc2ConfigPtrOutput() EfsLocationEc2ConfigPtrOutput {
	return i.ToEfsLocationEc2ConfigPtrOutputWithContext(context.Background())
}

func (i EfsLocationEc2ConfigArgs) ToEfsLocationEc2ConfigPtrOutputWithContext(ctx context.Context) EfsLocationEc2ConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EfsLocationEc2ConfigOutput).ToEfsLocationEc2ConfigPtrOutputWithContext(ctx)
}

// EfsLocationEc2ConfigPtrInput is an input type that accepts EfsLocationEc2ConfigArgs, EfsLocationEc2ConfigPtr and EfsLocationEc2ConfigPtrOutput values.
// You can construct a concrete instance of `EfsLocationEc2ConfigPtrInput` via:
//
//          EfsLocationEc2ConfigArgs{...}
//
//  or:
//
//          nil
type EfsLocationEc2ConfigPtrInput interface {
	pulumi.Input

	ToEfsLocationEc2ConfigPtrOutput() EfsLocationEc2ConfigPtrOutput
	ToEfsLocationEc2ConfigPtrOutputWithContext(context.Context) EfsLocationEc2ConfigPtrOutput
}

type efsLocationEc2ConfigPtrType EfsLocationEc2ConfigArgs

func EfsLocationEc2ConfigPtr(v *EfsLocationEc2ConfigArgs) EfsLocationEc2ConfigPtrInput {
	return (*efsLocationEc2ConfigPtrType)(v)
}

func (*efsLocationEc2ConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EfsLocationEc2Config)(nil)).Elem()
}

func (i *efsLocationEc2ConfigPtrType) ToEfsLocationEc2ConfigPtrOutput() EfsLocationEc2ConfigPtrOutput {
	return i.ToEfsLocationEc2ConfigPtrOutputWithContext(context.Background())
}

func (i *efsLocationEc2ConfigPtrType) ToEfsLocationEc2ConfigPtrOutputWithContext(ctx context.Context) EfsLocationEc2ConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EfsLocationEc2ConfigPtrOutput)
}

type EfsLocationEc2ConfigOutput struct{ *pulumi.OutputState }

func (EfsLocationEc2ConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EfsLocationEc2Config)(nil)).Elem()
}

func (o EfsLocationEc2ConfigOutput) ToEfsLocationEc2ConfigOutput() EfsLocationEc2ConfigOutput {
	return o
}

func (o EfsLocationEc2ConfigOutput) ToEfsLocationEc2ConfigOutputWithContext(ctx context.Context) EfsLocationEc2ConfigOutput {
	return o
}

func (o EfsLocationEc2ConfigOutput) ToEfsLocationEc2ConfigPtrOutput() EfsLocationEc2ConfigPtrOutput {
	return o.ToEfsLocationEc2ConfigPtrOutputWithContext(context.Background())
}

func (o EfsLocationEc2ConfigOutput) ToEfsLocationEc2ConfigPtrOutputWithContext(ctx context.Context) EfsLocationEc2ConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EfsLocationEc2Config) *EfsLocationEc2Config {
		return &v
	}).(EfsLocationEc2ConfigPtrOutput)
}

// List of Amazon Resource Names (ARNs) of the EC2 Security Groups that are associated with the EFS Mount Target.
func (o EfsLocationEc2ConfigOutput) SecurityGroupArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EfsLocationEc2Config) []string { return v.SecurityGroupArns }).(pulumi.StringArrayOutput)
}

// Amazon Resource Name (ARN) of the EC2 Subnet that is associated with the EFS Mount Target.
func (o EfsLocationEc2ConfigOutput) SubnetArn() pulumi.StringOutput {
	return o.ApplyT(func(v EfsLocationEc2Config) string { return v.SubnetArn }).(pulumi.StringOutput)
}

type EfsLocationEc2ConfigPtrOutput struct{ *pulumi.OutputState }

func (EfsLocationEc2ConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EfsLocationEc2Config)(nil)).Elem()
}

func (o EfsLocationEc2ConfigPtrOutput) ToEfsLocationEc2ConfigPtrOutput() EfsLocationEc2ConfigPtrOutput {
	return o
}

func (o EfsLocationEc2ConfigPtrOutput) ToEfsLocationEc2ConfigPtrOutputWithContext(ctx context.Context) EfsLocationEc2ConfigPtrOutput {
	return o
}

func (o EfsLocationEc2ConfigPtrOutput) Elem() EfsLocationEc2ConfigOutput {
	return o.ApplyT(func(v *EfsLocationEc2Config) EfsLocationEc2Config {
		if v != nil {
			return *v
		}
		var ret EfsLocationEc2Config
		return ret
	}).(EfsLocationEc2ConfigOutput)
}

// List of Amazon Resource Names (ARNs) of the EC2 Security Groups that are associated with the EFS Mount Target.
func (o EfsLocationEc2ConfigPtrOutput) SecurityGroupArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EfsLocationEc2Config) []string {
		if v == nil {
			return nil
		}
		return v.SecurityGroupArns
	}).(pulumi.StringArrayOutput)
}

// Amazon Resource Name (ARN) of the EC2 Subnet that is associated with the EFS Mount Target.
func (o EfsLocationEc2ConfigPtrOutput) SubnetArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EfsLocationEc2Config) *string {
		if v == nil {
			return nil
		}
		return &v.SubnetArn
	}).(pulumi.StringPtrOutput)
}

type FsxOpenZfsFileSystemProtocol struct {
	// Represents the Network File System (NFS) protocol that DataSync uses to access your FSx for OpenZFS file system. See below.
	Nfs FsxOpenZfsFileSystemProtocolNfs `pulumi:"nfs"`
}

// FsxOpenZfsFileSystemProtocolInput is an input type that accepts FsxOpenZfsFileSystemProtocolArgs and FsxOpenZfsFileSystemProtocolOutput values.
// You can construct a concrete instance of `FsxOpenZfsFileSystemProtocolInput` via:
//
//          FsxOpenZfsFileSystemProtocolArgs{...}
type FsxOpenZfsFileSystemProtocolInput interface {
	pulumi.Input

	ToFsxOpenZfsFileSystemProtocolOutput() FsxOpenZfsFileSystemProtocolOutput
	ToFsxOpenZfsFileSystemProtocolOutputWithContext(context.Context) FsxOpenZfsFileSystemProtocolOutput
}

type FsxOpenZfsFileSystemProtocolArgs struct {
	// Represents the Network File System (NFS) protocol that DataSync uses to access your FSx for OpenZFS file system. See below.
	Nfs FsxOpenZfsFileSystemProtocolNfsInput `pulumi:"nfs"`
}

func (FsxOpenZfsFileSystemProtocolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FsxOpenZfsFileSystemProtocol)(nil)).Elem()
}

func (i FsxOpenZfsFileSystemProtocolArgs) ToFsxOpenZfsFileSystemProtocolOutput() FsxOpenZfsFileSystemProtocolOutput {
	return i.ToFsxOpenZfsFileSystemProtocolOutputWithContext(context.Background())
}

func (i FsxOpenZfsFileSystemProtocolArgs) ToFsxOpenZfsFileSystemProtocolOutputWithContext(ctx context.Context) FsxOpenZfsFileSystemProtocolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FsxOpenZfsFileSystemProtocolOutput)
}

func (i FsxOpenZfsFileSystemProtocolArgs) ToFsxOpenZfsFileSystemProtocolPtrOutput() FsxOpenZfsFileSystemProtocolPtrOutput {
	return i.ToFsxOpenZfsFileSystemProtocolPtrOutputWithContext(context.Background())
}

func (i FsxOpenZfsFileSystemProtocolArgs) ToFsxOpenZfsFileSystemProtocolPtrOutputWithContext(ctx context.Context) FsxOpenZfsFileSystemProtocolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FsxOpenZfsFileSystemProtocolOutput).ToFsxOpenZfsFileSystemProtocolPtrOutputWithContext(ctx)
}

// FsxOpenZfsFileSystemProtocolPtrInput is an input type that accepts FsxOpenZfsFileSystemProtocolArgs, FsxOpenZfsFileSystemProtocolPtr and FsxOpenZfsFileSystemProtocolPtrOutput values.
// You can construct a concrete instance of `FsxOpenZfsFileSystemProtocolPtrInput` via:
//
//          FsxOpenZfsFileSystemProtocolArgs{...}
//
//  or:
//
//          nil
type FsxOpenZfsFileSystemProtocolPtrInput interface {
	pulumi.Input

	ToFsxOpenZfsFileSystemProtocolPtrOutput() FsxOpenZfsFileSystemProtocolPtrOutput
	ToFsxOpenZfsFileSystemProtocolPtrOutputWithContext(context.Context) FsxOpenZfsFileSystemProtocolPtrOutput
}

type fsxOpenZfsFileSystemProtocolPtrType FsxOpenZfsFileSystemProtocolArgs

func FsxOpenZfsFileSystemProtocolPtr(v *FsxOpenZfsFileSystemProtocolArgs) FsxOpenZfsFileSystemProtocolPtrInput {
	return (*fsxOpenZfsFileSystemProtocolPtrType)(v)
}

func (*fsxOpenZfsFileSystemProtocolPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FsxOpenZfsFileSystemProtocol)(nil)).Elem()
}

func (i *fsxOpenZfsFileSystemProtocolPtrType) ToFsxOpenZfsFileSystemProtocolPtrOutput() FsxOpenZfsFileSystemProtocolPtrOutput {
	return i.ToFsxOpenZfsFileSystemProtocolPtrOutputWithContext(context.Background())
}

func (i *fsxOpenZfsFileSystemProtocolPtrType) ToFsxOpenZfsFileSystemProtocolPtrOutputWithContext(ctx context.Context) FsxOpenZfsFileSystemProtocolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FsxOpenZfsFileSystemProtocolPtrOutput)
}

type FsxOpenZfsFileSystemProtocolOutput struct{ *pulumi.OutputState }

func (FsxOpenZfsFileSystemProtocolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FsxOpenZfsFileSystemProtocol)(nil)).Elem()
}

func (o FsxOpenZfsFileSystemProtocolOutput) ToFsxOpenZfsFileSystemProtocolOutput() FsxOpenZfsFileSystemProtocolOutput {
	return o
}

func (o FsxOpenZfsFileSystemProtocolOutput) ToFsxOpenZfsFileSystemProtocolOutputWithContext(ctx context.Context) FsxOpenZfsFileSystemProtocolOutput {
	return o
}

func (o FsxOpenZfsFileSystemProtocolOutput) ToFsxOpenZfsFileSystemProtocolPtrOutput() FsxOpenZfsFileSystemProtocolPtrOutput {
	return o.ToFsxOpenZfsFileSystemProtocolPtrOutputWithContext(context.Background())
}

func (o FsxOpenZfsFileSystemProtocolOutput) ToFsxOpenZfsFileSystemProtocolPtrOutputWithContext(ctx context.Context) FsxOpenZfsFileSystemProtocolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FsxOpenZfsFileSystemProtocol) *FsxOpenZfsFileSystemProtocol {
		return &v
	}).(FsxOpenZfsFileSystemProtocolPtrOutput)
}

// Represents the Network File System (NFS) protocol that DataSync uses to access your FSx for OpenZFS file system. See below.
func (o FsxOpenZfsFileSystemProtocolOutput) Nfs() FsxOpenZfsFileSystemProtocolNfsOutput {
	return o.ApplyT(func(v FsxOpenZfsFileSystemProtocol) FsxOpenZfsFileSystemProtocolNfs { return v.Nfs }).(FsxOpenZfsFileSystemProtocolNfsOutput)
}

type FsxOpenZfsFileSystemProtocolPtrOutput struct{ *pulumi.OutputState }

func (FsxOpenZfsFileSystemProtocolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FsxOpenZfsFileSystemProtocol)(nil)).Elem()
}

func (o FsxOpenZfsFileSystemProtocolPtrOutput) ToFsxOpenZfsFileSystemProtocolPtrOutput() FsxOpenZfsFileSystemProtocolPtrOutput {
	return o
}

func (o FsxOpenZfsFileSystemProtocolPtrOutput) ToFsxOpenZfsFileSystemProtocolPtrOutputWithContext(ctx context.Context) FsxOpenZfsFileSystemProtocolPtrOutput {
	return o
}

func (o FsxOpenZfsFileSystemProtocolPtrOutput) Elem() FsxOpenZfsFileSystemProtocolOutput {
	return o.ApplyT(func(v *FsxOpenZfsFileSystemProtocol) FsxOpenZfsFileSystemProtocol {
		if v != nil {
			return *v
		}
		var ret FsxOpenZfsFileSystemProtocol
		return ret
	}).(FsxOpenZfsFileSystemProtocolOutput)
}

// Represents the Network File System (NFS) protocol that DataSync uses to access your FSx for OpenZFS file system. See below.
func (o FsxOpenZfsFileSystemProtocolPtrOutput) Nfs() FsxOpenZfsFileSystemProtocolNfsPtrOutput {
	return o.ApplyT(func(v *FsxOpenZfsFileSystemProtocol) *FsxOpenZfsFileSystemProtocolNfs {
		if v == nil {
			return nil
		}
		return &v.Nfs
	}).(FsxOpenZfsFileSystemProtocolNfsPtrOutput)
}

type FsxOpenZfsFileSystemProtocolNfs struct {
	// Represents the mount options that are available for DataSync to access an NFS location. See below.
	MountOptions FsxOpenZfsFileSystemProtocolNfsMountOptions `pulumi:"mountOptions"`
}

// FsxOpenZfsFileSystemProtocolNfsInput is an input type that accepts FsxOpenZfsFileSystemProtocolNfsArgs and FsxOpenZfsFileSystemProtocolNfsOutput values.
// You can construct a concrete instance of `FsxOpenZfsFileSystemProtocolNfsInput` via:
//
//          FsxOpenZfsFileSystemProtocolNfsArgs{...}
type FsxOpenZfsFileSystemProtocolNfsInput interface {
	pulumi.Input

	ToFsxOpenZfsFileSystemProtocolNfsOutput() FsxOpenZfsFileSystemProtocolNfsOutput
	ToFsxOpenZfsFileSystemProtocolNfsOutputWithContext(context.Context) FsxOpenZfsFileSystemProtocolNfsOutput
}

type FsxOpenZfsFileSystemProtocolNfsArgs struct {
	// Represents the mount options that are available for DataSync to access an NFS location. See below.
	MountOptions FsxOpenZfsFileSystemProtocolNfsMountOptionsInput `pulumi:"mountOptions"`
}

func (FsxOpenZfsFileSystemProtocolNfsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FsxOpenZfsFileSystemProtocolNfs)(nil)).Elem()
}

func (i FsxOpenZfsFileSystemProtocolNfsArgs) ToFsxOpenZfsFileSystemProtocolNfsOutput() FsxOpenZfsFileSystemProtocolNfsOutput {
	return i.ToFsxOpenZfsFileSystemProtocolNfsOutputWithContext(context.Background())
}

func (i FsxOpenZfsFileSystemProtocolNfsArgs) ToFsxOpenZfsFileSystemProtocolNfsOutputWithContext(ctx context.Context) FsxOpenZfsFileSystemProtocolNfsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FsxOpenZfsFileSystemProtocolNfsOutput)
}

func (i FsxOpenZfsFileSystemProtocolNfsArgs) ToFsxOpenZfsFileSystemProtocolNfsPtrOutput() FsxOpenZfsFileSystemProtocolNfsPtrOutput {
	return i.ToFsxOpenZfsFileSystemProtocolNfsPtrOutputWithContext(context.Background())
}

func (i FsxOpenZfsFileSystemProtocolNfsArgs) ToFsxOpenZfsFileSystemProtocolNfsPtrOutputWithContext(ctx context.Context) FsxOpenZfsFileSystemProtocolNfsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FsxOpenZfsFileSystemProtocolNfsOutput).ToFsxOpenZfsFileSystemProtocolNfsPtrOutputWithContext(ctx)
}

// FsxOpenZfsFileSystemProtocolNfsPtrInput is an input type that accepts FsxOpenZfsFileSystemProtocolNfsArgs, FsxOpenZfsFileSystemProtocolNfsPtr and FsxOpenZfsFileSystemProtocolNfsPtrOutput values.
// You can construct a concrete instance of `FsxOpenZfsFileSystemProtocolNfsPtrInput` via:
//
//          FsxOpenZfsFileSystemProtocolNfsArgs{...}
//
//  or:
//
//          nil
type FsxOpenZfsFileSystemProtocolNfsPtrInput interface {
	pulumi.Input

	ToFsxOpenZfsFileSystemProtocolNfsPtrOutput() FsxOpenZfsFileSystemProtocolNfsPtrOutput
	ToFsxOpenZfsFileSystemProtocolNfsPtrOutputWithContext(context.Context) FsxOpenZfsFileSystemProtocolNfsPtrOutput
}

type fsxOpenZfsFileSystemProtocolNfsPtrType FsxOpenZfsFileSystemProtocolNfsArgs

func FsxOpenZfsFileSystemProtocolNfsPtr(v *FsxOpenZfsFileSystemProtocolNfsArgs) FsxOpenZfsFileSystemProtocolNfsPtrInput {
	return (*fsxOpenZfsFileSystemProtocolNfsPtrType)(v)
}

func (*fsxOpenZfsFileSystemProtocolNfsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FsxOpenZfsFileSystemProtocolNfs)(nil)).Elem()
}

func (i *fsxOpenZfsFileSystemProtocolNfsPtrType) ToFsxOpenZfsFileSystemProtocolNfsPtrOutput() FsxOpenZfsFileSystemProtocolNfsPtrOutput {
	return i.ToFsxOpenZfsFileSystemProtocolNfsPtrOutputWithContext(context.Background())
}

func (i *fsxOpenZfsFileSystemProtocolNfsPtrType) ToFsxOpenZfsFileSystemProtocolNfsPtrOutputWithContext(ctx context.Context) FsxOpenZfsFileSystemProtocolNfsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FsxOpenZfsFileSystemProtocolNfsPtrOutput)
}

type FsxOpenZfsFileSystemProtocolNfsOutput struct{ *pulumi.OutputState }

func (FsxOpenZfsFileSystemProtocolNfsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FsxOpenZfsFileSystemProtocolNfs)(nil)).Elem()
}

func (o FsxOpenZfsFileSystemProtocolNfsOutput) ToFsxOpenZfsFileSystemProtocolNfsOutput() FsxOpenZfsFileSystemProtocolNfsOutput {
	return o
}

func (o FsxOpenZfsFileSystemProtocolNfsOutput) ToFsxOpenZfsFileSystemProtocolNfsOutputWithContext(ctx context.Context) FsxOpenZfsFileSystemProtocolNfsOutput {
	return o
}

func (o FsxOpenZfsFileSystemProtocolNfsOutput) ToFsxOpenZfsFileSystemProtocolNfsPtrOutput() FsxOpenZfsFileSystemProtocolNfsPtrOutput {
	return o.ToFsxOpenZfsFileSystemProtocolNfsPtrOutputWithContext(context.Background())
}

func (o FsxOpenZfsFileSystemProtocolNfsOutput) ToFsxOpenZfsFileSystemProtocolNfsPtrOutputWithContext(ctx context.Context) FsxOpenZfsFileSystemProtocolNfsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FsxOpenZfsFileSystemProtocolNfs) *FsxOpenZfsFileSystemProtocolNfs {
		return &v
	}).(FsxOpenZfsFileSystemProtocolNfsPtrOutput)
}

// Represents the mount options that are available for DataSync to access an NFS location. See below.
func (o FsxOpenZfsFileSystemProtocolNfsOutput) MountOptions() FsxOpenZfsFileSystemProtocolNfsMountOptionsOutput {
	return o.ApplyT(func(v FsxOpenZfsFileSystemProtocolNfs) FsxOpenZfsFileSystemProtocolNfsMountOptions {
		return v.MountOptions
	}).(FsxOpenZfsFileSystemProtocolNfsMountOptionsOutput)
}

type FsxOpenZfsFileSystemProtocolNfsPtrOutput struct{ *pulumi.OutputState }

func (FsxOpenZfsFileSystemProtocolNfsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FsxOpenZfsFileSystemProtocolNfs)(nil)).Elem()
}

func (o FsxOpenZfsFileSystemProtocolNfsPtrOutput) ToFsxOpenZfsFileSystemProtocolNfsPtrOutput() FsxOpenZfsFileSystemProtocolNfsPtrOutput {
	return o
}

func (o FsxOpenZfsFileSystemProtocolNfsPtrOutput) ToFsxOpenZfsFileSystemProtocolNfsPtrOutputWithContext(ctx context.Context) FsxOpenZfsFileSystemProtocolNfsPtrOutput {
	return o
}

func (o FsxOpenZfsFileSystemProtocolNfsPtrOutput) Elem() FsxOpenZfsFileSystemProtocolNfsOutput {
	return o.ApplyT(func(v *FsxOpenZfsFileSystemProtocolNfs) FsxOpenZfsFileSystemProtocolNfs {
		if v != nil {
			return *v
		}
		var ret FsxOpenZfsFileSystemProtocolNfs
		return ret
	}).(FsxOpenZfsFileSystemProtocolNfsOutput)
}

// Represents the mount options that are available for DataSync to access an NFS location. See below.
func (o FsxOpenZfsFileSystemProtocolNfsPtrOutput) MountOptions() FsxOpenZfsFileSystemProtocolNfsMountOptionsPtrOutput {
	return o.ApplyT(func(v *FsxOpenZfsFileSystemProtocolNfs) *FsxOpenZfsFileSystemProtocolNfsMountOptions {
		if v == nil {
			return nil
		}
		return &v.MountOptions
	}).(FsxOpenZfsFileSystemProtocolNfsMountOptionsPtrOutput)
}

type FsxOpenZfsFileSystemProtocolNfsMountOptions struct {
	// The specific NFS version that you want DataSync to use for mounting your NFS share. Valid values: `AUTOMATIC`, `NFS3`, `NFS4_0` and `NFS4_1`. Default: `AUTOMATIC`
	Version *string `pulumi:"version"`
}

// FsxOpenZfsFileSystemProtocolNfsMountOptionsInput is an input type that accepts FsxOpenZfsFileSystemProtocolNfsMountOptionsArgs and FsxOpenZfsFileSystemProtocolNfsMountOptionsOutput values.
// You can construct a concrete instance of `FsxOpenZfsFileSystemProtocolNfsMountOptionsInput` via:
//
//          FsxOpenZfsFileSystemProtocolNfsMountOptionsArgs{...}
type FsxOpenZfsFileSystemProtocolNfsMountOptionsInput interface {
	pulumi.Input

	ToFsxOpenZfsFileSystemProtocolNfsMountOptionsOutput() FsxOpenZfsFileSystemProtocolNfsMountOptionsOutput
	ToFsxOpenZfsFileSystemProtocolNfsMountOptionsOutputWithContext(context.Context) FsxOpenZfsFileSystemProtocolNfsMountOptionsOutput
}

type FsxOpenZfsFileSystemProtocolNfsMountOptionsArgs struct {
	// The specific NFS version that you want DataSync to use for mounting your NFS share. Valid values: `AUTOMATIC`, `NFS3`, `NFS4_0` and `NFS4_1`. Default: `AUTOMATIC`
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (FsxOpenZfsFileSystemProtocolNfsMountOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FsxOpenZfsFileSystemProtocolNfsMountOptions)(nil)).Elem()
}

func (i FsxOpenZfsFileSystemProtocolNfsMountOptionsArgs) ToFsxOpenZfsFileSystemProtocolNfsMountOptionsOutput() FsxOpenZfsFileSystemProtocolNfsMountOptionsOutput {
	return i.ToFsxOpenZfsFileSystemProtocolNfsMountOptionsOutputWithContext(context.Background())
}

func (i FsxOpenZfsFileSystemProtocolNfsMountOptionsArgs) ToFsxOpenZfsFileSystemProtocolNfsMountOptionsOutputWithContext(ctx context.Context) FsxOpenZfsFileSystemProtocolNfsMountOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FsxOpenZfsFileSystemProtocolNfsMountOptionsOutput)
}

func (i FsxOpenZfsFileSystemProtocolNfsMountOptionsArgs) ToFsxOpenZfsFileSystemProtocolNfsMountOptionsPtrOutput() FsxOpenZfsFileSystemProtocolNfsMountOptionsPtrOutput {
	return i.ToFsxOpenZfsFileSystemProtocolNfsMountOptionsPtrOutputWithContext(context.Background())
}

func (i FsxOpenZfsFileSystemProtocolNfsMountOptionsArgs) ToFsxOpenZfsFileSystemProtocolNfsMountOptionsPtrOutputWithContext(ctx context.Context) FsxOpenZfsFileSystemProtocolNfsMountOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FsxOpenZfsFileSystemProtocolNfsMountOptionsOutput).ToFsxOpenZfsFileSystemProtocolNfsMountOptionsPtrOutputWithContext(ctx)
}

// FsxOpenZfsFileSystemProtocolNfsMountOptionsPtrInput is an input type that accepts FsxOpenZfsFileSystemProtocolNfsMountOptionsArgs, FsxOpenZfsFileSystemProtocolNfsMountOptionsPtr and FsxOpenZfsFileSystemProtocolNfsMountOptionsPtrOutput values.
// You can construct a concrete instance of `FsxOpenZfsFileSystemProtocolNfsMountOptionsPtrInput` via:
//
//          FsxOpenZfsFileSystemProtocolNfsMountOptionsArgs{...}
//
//  or:
//
//          nil
type FsxOpenZfsFileSystemProtocolNfsMountOptionsPtrInput interface {
	pulumi.Input

	ToFsxOpenZfsFileSystemProtocolNfsMountOptionsPtrOutput() FsxOpenZfsFileSystemProtocolNfsMountOptionsPtrOutput
	ToFsxOpenZfsFileSystemProtocolNfsMountOptionsPtrOutputWithContext(context.Context) FsxOpenZfsFileSystemProtocolNfsMountOptionsPtrOutput
}

type fsxOpenZfsFileSystemProtocolNfsMountOptionsPtrType FsxOpenZfsFileSystemProtocolNfsMountOptionsArgs

func FsxOpenZfsFileSystemProtocolNfsMountOptionsPtr(v *FsxOpenZfsFileSystemProtocolNfsMountOptionsArgs) FsxOpenZfsFileSystemProtocolNfsMountOptionsPtrInput {
	return (*fsxOpenZfsFileSystemProtocolNfsMountOptionsPtrType)(v)
}

func (*fsxOpenZfsFileSystemProtocolNfsMountOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FsxOpenZfsFileSystemProtocolNfsMountOptions)(nil)).Elem()
}

func (i *fsxOpenZfsFileSystemProtocolNfsMountOptionsPtrType) ToFsxOpenZfsFileSystemProtocolNfsMountOptionsPtrOutput() FsxOpenZfsFileSystemProtocolNfsMountOptionsPtrOutput {
	return i.ToFsxOpenZfsFileSystemProtocolNfsMountOptionsPtrOutputWithContext(context.Background())
}

func (i *fsxOpenZfsFileSystemProtocolNfsMountOptionsPtrType) ToFsxOpenZfsFileSystemProtocolNfsMountOptionsPtrOutputWithContext(ctx context.Context) FsxOpenZfsFileSystemProtocolNfsMountOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FsxOpenZfsFileSystemProtocolNfsMountOptionsPtrOutput)
}

type FsxOpenZfsFileSystemProtocolNfsMountOptionsOutput struct{ *pulumi.OutputState }

func (FsxOpenZfsFileSystemProtocolNfsMountOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FsxOpenZfsFileSystemProtocolNfsMountOptions)(nil)).Elem()
}

func (o FsxOpenZfsFileSystemProtocolNfsMountOptionsOutput) ToFsxOpenZfsFileSystemProtocolNfsMountOptionsOutput() FsxOpenZfsFileSystemProtocolNfsMountOptionsOutput {
	return o
}

func (o FsxOpenZfsFileSystemProtocolNfsMountOptionsOutput) ToFsxOpenZfsFileSystemProtocolNfsMountOptionsOutputWithContext(ctx context.Context) FsxOpenZfsFileSystemProtocolNfsMountOptionsOutput {
	return o
}

func (o FsxOpenZfsFileSystemProtocolNfsMountOptionsOutput) ToFsxOpenZfsFileSystemProtocolNfsMountOptionsPtrOutput() FsxOpenZfsFileSystemProtocolNfsMountOptionsPtrOutput {
	return o.ToFsxOpenZfsFileSystemProtocolNfsMountOptionsPtrOutputWithContext(context.Background())
}

func (o FsxOpenZfsFileSystemProtocolNfsMountOptionsOutput) ToFsxOpenZfsFileSystemProtocolNfsMountOptionsPtrOutputWithContext(ctx context.Context) FsxOpenZfsFileSystemProtocolNfsMountOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FsxOpenZfsFileSystemProtocolNfsMountOptions) *FsxOpenZfsFileSystemProtocolNfsMountOptions {
		return &v
	}).(FsxOpenZfsFileSystemProtocolNfsMountOptionsPtrOutput)
}

// The specific NFS version that you want DataSync to use for mounting your NFS share. Valid values: `AUTOMATIC`, `NFS3`, `NFS4_0` and `NFS4_1`. Default: `AUTOMATIC`
func (o FsxOpenZfsFileSystemProtocolNfsMountOptionsOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FsxOpenZfsFileSystemProtocolNfsMountOptions) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type FsxOpenZfsFileSystemProtocolNfsMountOptionsPtrOutput struct{ *pulumi.OutputState }

func (FsxOpenZfsFileSystemProtocolNfsMountOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FsxOpenZfsFileSystemProtocolNfsMountOptions)(nil)).Elem()
}

func (o FsxOpenZfsFileSystemProtocolNfsMountOptionsPtrOutput) ToFsxOpenZfsFileSystemProtocolNfsMountOptionsPtrOutput() FsxOpenZfsFileSystemProtocolNfsMountOptionsPtrOutput {
	return o
}

func (o FsxOpenZfsFileSystemProtocolNfsMountOptionsPtrOutput) ToFsxOpenZfsFileSystemProtocolNfsMountOptionsPtrOutputWithContext(ctx context.Context) FsxOpenZfsFileSystemProtocolNfsMountOptionsPtrOutput {
	return o
}

func (o FsxOpenZfsFileSystemProtocolNfsMountOptionsPtrOutput) Elem() FsxOpenZfsFileSystemProtocolNfsMountOptionsOutput {
	return o.ApplyT(func(v *FsxOpenZfsFileSystemProtocolNfsMountOptions) FsxOpenZfsFileSystemProtocolNfsMountOptions {
		if v != nil {
			return *v
		}
		var ret FsxOpenZfsFileSystemProtocolNfsMountOptions
		return ret
	}).(FsxOpenZfsFileSystemProtocolNfsMountOptionsOutput)
}

// The specific NFS version that you want DataSync to use for mounting your NFS share. Valid values: `AUTOMATIC`, `NFS3`, `NFS4_0` and `NFS4_1`. Default: `AUTOMATIC`
func (o FsxOpenZfsFileSystemProtocolNfsMountOptionsPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FsxOpenZfsFileSystemProtocolNfsMountOptions) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type LocationHdfsNameNode struct {
	// The hostname of the NameNode in the HDFS cluster. This value is the IP address or Domain Name Service (DNS) name of the NameNode. An agent that's installed on-premises uses this hostname to communicate with the NameNode in the network.
	Hostname string `pulumi:"hostname"`
	// The port that the NameNode uses to listen to client requests.
	Port int `pulumi:"port"`
}

// LocationHdfsNameNodeInput is an input type that accepts LocationHdfsNameNodeArgs and LocationHdfsNameNodeOutput values.
// You can construct a concrete instance of `LocationHdfsNameNodeInput` via:
//
//          LocationHdfsNameNodeArgs{...}
type LocationHdfsNameNodeInput interface {
	pulumi.Input

	ToLocationHdfsNameNodeOutput() LocationHdfsNameNodeOutput
	ToLocationHdfsNameNodeOutputWithContext(context.Context) LocationHdfsNameNodeOutput
}

type LocationHdfsNameNodeArgs struct {
	// The hostname of the NameNode in the HDFS cluster. This value is the IP address or Domain Name Service (DNS) name of the NameNode. An agent that's installed on-premises uses this hostname to communicate with the NameNode in the network.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// The port that the NameNode uses to listen to client requests.
	Port pulumi.IntInput `pulumi:"port"`
}

func (LocationHdfsNameNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationHdfsNameNode)(nil)).Elem()
}

func (i LocationHdfsNameNodeArgs) ToLocationHdfsNameNodeOutput() LocationHdfsNameNodeOutput {
	return i.ToLocationHdfsNameNodeOutputWithContext(context.Background())
}

func (i LocationHdfsNameNodeArgs) ToLocationHdfsNameNodeOutputWithContext(ctx context.Context) LocationHdfsNameNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationHdfsNameNodeOutput)
}

// LocationHdfsNameNodeArrayInput is an input type that accepts LocationHdfsNameNodeArray and LocationHdfsNameNodeArrayOutput values.
// You can construct a concrete instance of `LocationHdfsNameNodeArrayInput` via:
//
//          LocationHdfsNameNodeArray{ LocationHdfsNameNodeArgs{...} }
type LocationHdfsNameNodeArrayInput interface {
	pulumi.Input

	ToLocationHdfsNameNodeArrayOutput() LocationHdfsNameNodeArrayOutput
	ToLocationHdfsNameNodeArrayOutputWithContext(context.Context) LocationHdfsNameNodeArrayOutput
}

type LocationHdfsNameNodeArray []LocationHdfsNameNodeInput

func (LocationHdfsNameNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationHdfsNameNode)(nil)).Elem()
}

func (i LocationHdfsNameNodeArray) ToLocationHdfsNameNodeArrayOutput() LocationHdfsNameNodeArrayOutput {
	return i.ToLocationHdfsNameNodeArrayOutputWithContext(context.Background())
}

func (i LocationHdfsNameNodeArray) ToLocationHdfsNameNodeArrayOutputWithContext(ctx context.Context) LocationHdfsNameNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationHdfsNameNodeArrayOutput)
}

type LocationHdfsNameNodeOutput struct{ *pulumi.OutputState }

func (LocationHdfsNameNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationHdfsNameNode)(nil)).Elem()
}

func (o LocationHdfsNameNodeOutput) ToLocationHdfsNameNodeOutput() LocationHdfsNameNodeOutput {
	return o
}

func (o LocationHdfsNameNodeOutput) ToLocationHdfsNameNodeOutputWithContext(ctx context.Context) LocationHdfsNameNodeOutput {
	return o
}

// The hostname of the NameNode in the HDFS cluster. This value is the IP address or Domain Name Service (DNS) name of the NameNode. An agent that's installed on-premises uses this hostname to communicate with the NameNode in the network.
func (o LocationHdfsNameNodeOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v LocationHdfsNameNode) string { return v.Hostname }).(pulumi.StringOutput)
}

// The port that the NameNode uses to listen to client requests.
func (o LocationHdfsNameNodeOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v LocationHdfsNameNode) int { return v.Port }).(pulumi.IntOutput)
}

type LocationHdfsNameNodeArrayOutput struct{ *pulumi.OutputState }

func (LocationHdfsNameNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationHdfsNameNode)(nil)).Elem()
}

func (o LocationHdfsNameNodeArrayOutput) ToLocationHdfsNameNodeArrayOutput() LocationHdfsNameNodeArrayOutput {
	return o
}

func (o LocationHdfsNameNodeArrayOutput) ToLocationHdfsNameNodeArrayOutputWithContext(ctx context.Context) LocationHdfsNameNodeArrayOutput {
	return o
}

func (o LocationHdfsNameNodeArrayOutput) Index(i pulumi.IntInput) LocationHdfsNameNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LocationHdfsNameNode {
		return vs[0].([]LocationHdfsNameNode)[vs[1].(int)]
	}).(LocationHdfsNameNodeOutput)
}

type LocationHdfsQopConfiguration struct {
	// The data transfer protection setting configured on the HDFS cluster. This setting corresponds to your dfs.data.transfer.protection setting in the hdfs-site.xml file on your Hadoop cluster. Valid values are `DISABLED`, `AUTHENTICATION`, `INTEGRITY` and `PRIVACY`.
	DataTransferProtection *string `pulumi:"dataTransferProtection"`
	// The RPC protection setting configured on the HDFS cluster. This setting corresponds to your hadoop.rpc.protection setting in your core-site.xml file on your Hadoop cluster. Valid values are `DISABLED`, `AUTHENTICATION`, `INTEGRITY` and `PRIVACY`.
	RpcProtection *string `pulumi:"rpcProtection"`
}

// LocationHdfsQopConfigurationInput is an input type that accepts LocationHdfsQopConfigurationArgs and LocationHdfsQopConfigurationOutput values.
// You can construct a concrete instance of `LocationHdfsQopConfigurationInput` via:
//
//          LocationHdfsQopConfigurationArgs{...}
type LocationHdfsQopConfigurationInput interface {
	pulumi.Input

	ToLocationHdfsQopConfigurationOutput() LocationHdfsQopConfigurationOutput
	ToLocationHdfsQopConfigurationOutputWithContext(context.Context) LocationHdfsQopConfigurationOutput
}

type LocationHdfsQopConfigurationArgs struct {
	// The data transfer protection setting configured on the HDFS cluster. This setting corresponds to your dfs.data.transfer.protection setting in the hdfs-site.xml file on your Hadoop cluster. Valid values are `DISABLED`, `AUTHENTICATION`, `INTEGRITY` and `PRIVACY`.
	DataTransferProtection pulumi.StringPtrInput `pulumi:"dataTransferProtection"`
	// The RPC protection setting configured on the HDFS cluster. This setting corresponds to your hadoop.rpc.protection setting in your core-site.xml file on your Hadoop cluster. Valid values are `DISABLED`, `AUTHENTICATION`, `INTEGRITY` and `PRIVACY`.
	RpcProtection pulumi.StringPtrInput `pulumi:"rpcProtection"`
}

func (LocationHdfsQopConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationHdfsQopConfiguration)(nil)).Elem()
}

func (i LocationHdfsQopConfigurationArgs) ToLocationHdfsQopConfigurationOutput() LocationHdfsQopConfigurationOutput {
	return i.ToLocationHdfsQopConfigurationOutputWithContext(context.Background())
}

func (i LocationHdfsQopConfigurationArgs) ToLocationHdfsQopConfigurationOutputWithContext(ctx context.Context) LocationHdfsQopConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationHdfsQopConfigurationOutput)
}

func (i LocationHdfsQopConfigurationArgs) ToLocationHdfsQopConfigurationPtrOutput() LocationHdfsQopConfigurationPtrOutput {
	return i.ToLocationHdfsQopConfigurationPtrOutputWithContext(context.Background())
}

func (i LocationHdfsQopConfigurationArgs) ToLocationHdfsQopConfigurationPtrOutputWithContext(ctx context.Context) LocationHdfsQopConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationHdfsQopConfigurationOutput).ToLocationHdfsQopConfigurationPtrOutputWithContext(ctx)
}

// LocationHdfsQopConfigurationPtrInput is an input type that accepts LocationHdfsQopConfigurationArgs, LocationHdfsQopConfigurationPtr and LocationHdfsQopConfigurationPtrOutput values.
// You can construct a concrete instance of `LocationHdfsQopConfigurationPtrInput` via:
//
//          LocationHdfsQopConfigurationArgs{...}
//
//  or:
//
//          nil
type LocationHdfsQopConfigurationPtrInput interface {
	pulumi.Input

	ToLocationHdfsQopConfigurationPtrOutput() LocationHdfsQopConfigurationPtrOutput
	ToLocationHdfsQopConfigurationPtrOutputWithContext(context.Context) LocationHdfsQopConfigurationPtrOutput
}

type locationHdfsQopConfigurationPtrType LocationHdfsQopConfigurationArgs

func LocationHdfsQopConfigurationPtr(v *LocationHdfsQopConfigurationArgs) LocationHdfsQopConfigurationPtrInput {
	return (*locationHdfsQopConfigurationPtrType)(v)
}

func (*locationHdfsQopConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationHdfsQopConfiguration)(nil)).Elem()
}

func (i *locationHdfsQopConfigurationPtrType) ToLocationHdfsQopConfigurationPtrOutput() LocationHdfsQopConfigurationPtrOutput {
	return i.ToLocationHdfsQopConfigurationPtrOutputWithContext(context.Background())
}

func (i *locationHdfsQopConfigurationPtrType) ToLocationHdfsQopConfigurationPtrOutputWithContext(ctx context.Context) LocationHdfsQopConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationHdfsQopConfigurationPtrOutput)
}

type LocationHdfsQopConfigurationOutput struct{ *pulumi.OutputState }

func (LocationHdfsQopConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationHdfsQopConfiguration)(nil)).Elem()
}

func (o LocationHdfsQopConfigurationOutput) ToLocationHdfsQopConfigurationOutput() LocationHdfsQopConfigurationOutput {
	return o
}

func (o LocationHdfsQopConfigurationOutput) ToLocationHdfsQopConfigurationOutputWithContext(ctx context.Context) LocationHdfsQopConfigurationOutput {
	return o
}

func (o LocationHdfsQopConfigurationOutput) ToLocationHdfsQopConfigurationPtrOutput() LocationHdfsQopConfigurationPtrOutput {
	return o.ToLocationHdfsQopConfigurationPtrOutputWithContext(context.Background())
}

func (o LocationHdfsQopConfigurationOutput) ToLocationHdfsQopConfigurationPtrOutputWithContext(ctx context.Context) LocationHdfsQopConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LocationHdfsQopConfiguration) *LocationHdfsQopConfiguration {
		return &v
	}).(LocationHdfsQopConfigurationPtrOutput)
}

// The data transfer protection setting configured on the HDFS cluster. This setting corresponds to your dfs.data.transfer.protection setting in the hdfs-site.xml file on your Hadoop cluster. Valid values are `DISABLED`, `AUTHENTICATION`, `INTEGRITY` and `PRIVACY`.
func (o LocationHdfsQopConfigurationOutput) DataTransferProtection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationHdfsQopConfiguration) *string { return v.DataTransferProtection }).(pulumi.StringPtrOutput)
}

// The RPC protection setting configured on the HDFS cluster. This setting corresponds to your hadoop.rpc.protection setting in your core-site.xml file on your Hadoop cluster. Valid values are `DISABLED`, `AUTHENTICATION`, `INTEGRITY` and `PRIVACY`.
func (o LocationHdfsQopConfigurationOutput) RpcProtection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationHdfsQopConfiguration) *string { return v.RpcProtection }).(pulumi.StringPtrOutput)
}

type LocationHdfsQopConfigurationPtrOutput struct{ *pulumi.OutputState }

func (LocationHdfsQopConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationHdfsQopConfiguration)(nil)).Elem()
}

func (o LocationHdfsQopConfigurationPtrOutput) ToLocationHdfsQopConfigurationPtrOutput() LocationHdfsQopConfigurationPtrOutput {
	return o
}

func (o LocationHdfsQopConfigurationPtrOutput) ToLocationHdfsQopConfigurationPtrOutputWithContext(ctx context.Context) LocationHdfsQopConfigurationPtrOutput {
	return o
}

func (o LocationHdfsQopConfigurationPtrOutput) Elem() LocationHdfsQopConfigurationOutput {
	return o.ApplyT(func(v *LocationHdfsQopConfiguration) LocationHdfsQopConfiguration {
		if v != nil {
			return *v
		}
		var ret LocationHdfsQopConfiguration
		return ret
	}).(LocationHdfsQopConfigurationOutput)
}

// The data transfer protection setting configured on the HDFS cluster. This setting corresponds to your dfs.data.transfer.protection setting in the hdfs-site.xml file on your Hadoop cluster. Valid values are `DISABLED`, `AUTHENTICATION`, `INTEGRITY` and `PRIVACY`.
func (o LocationHdfsQopConfigurationPtrOutput) DataTransferProtection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationHdfsQopConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.DataTransferProtection
	}).(pulumi.StringPtrOutput)
}

// The RPC protection setting configured on the HDFS cluster. This setting corresponds to your hadoop.rpc.protection setting in your core-site.xml file on your Hadoop cluster. Valid values are `DISABLED`, `AUTHENTICATION`, `INTEGRITY` and `PRIVACY`.
func (o LocationHdfsQopConfigurationPtrOutput) RpcProtection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationHdfsQopConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RpcProtection
	}).(pulumi.StringPtrOutput)
}

type LocationSmbMountOptions struct {
	// The specific SMB version that you want DataSync to use for mounting your SMB share. Valid values: `AUTOMATIC`, `SMB2`, and `SMB3`. Default: `AUTOMATIC`
	Version *string `pulumi:"version"`
}

// LocationSmbMountOptionsInput is an input type that accepts LocationSmbMountOptionsArgs and LocationSmbMountOptionsOutput values.
// You can construct a concrete instance of `LocationSmbMountOptionsInput` via:
//
//          LocationSmbMountOptionsArgs{...}
type LocationSmbMountOptionsInput interface {
	pulumi.Input

	ToLocationSmbMountOptionsOutput() LocationSmbMountOptionsOutput
	ToLocationSmbMountOptionsOutputWithContext(context.Context) LocationSmbMountOptionsOutput
}

type LocationSmbMountOptionsArgs struct {
	// The specific SMB version that you want DataSync to use for mounting your SMB share. Valid values: `AUTOMATIC`, `SMB2`, and `SMB3`. Default: `AUTOMATIC`
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (LocationSmbMountOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationSmbMountOptions)(nil)).Elem()
}

func (i LocationSmbMountOptionsArgs) ToLocationSmbMountOptionsOutput() LocationSmbMountOptionsOutput {
	return i.ToLocationSmbMountOptionsOutputWithContext(context.Background())
}

func (i LocationSmbMountOptionsArgs) ToLocationSmbMountOptionsOutputWithContext(ctx context.Context) LocationSmbMountOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationSmbMountOptionsOutput)
}

func (i LocationSmbMountOptionsArgs) ToLocationSmbMountOptionsPtrOutput() LocationSmbMountOptionsPtrOutput {
	return i.ToLocationSmbMountOptionsPtrOutputWithContext(context.Background())
}

func (i LocationSmbMountOptionsArgs) ToLocationSmbMountOptionsPtrOutputWithContext(ctx context.Context) LocationSmbMountOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationSmbMountOptionsOutput).ToLocationSmbMountOptionsPtrOutputWithContext(ctx)
}

// LocationSmbMountOptionsPtrInput is an input type that accepts LocationSmbMountOptionsArgs, LocationSmbMountOptionsPtr and LocationSmbMountOptionsPtrOutput values.
// You can construct a concrete instance of `LocationSmbMountOptionsPtrInput` via:
//
//          LocationSmbMountOptionsArgs{...}
//
//  or:
//
//          nil
type LocationSmbMountOptionsPtrInput interface {
	pulumi.Input

	ToLocationSmbMountOptionsPtrOutput() LocationSmbMountOptionsPtrOutput
	ToLocationSmbMountOptionsPtrOutputWithContext(context.Context) LocationSmbMountOptionsPtrOutput
}

type locationSmbMountOptionsPtrType LocationSmbMountOptionsArgs

func LocationSmbMountOptionsPtr(v *LocationSmbMountOptionsArgs) LocationSmbMountOptionsPtrInput {
	return (*locationSmbMountOptionsPtrType)(v)
}

func (*locationSmbMountOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationSmbMountOptions)(nil)).Elem()
}

func (i *locationSmbMountOptionsPtrType) ToLocationSmbMountOptionsPtrOutput() LocationSmbMountOptionsPtrOutput {
	return i.ToLocationSmbMountOptionsPtrOutputWithContext(context.Background())
}

func (i *locationSmbMountOptionsPtrType) ToLocationSmbMountOptionsPtrOutputWithContext(ctx context.Context) LocationSmbMountOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationSmbMountOptionsPtrOutput)
}

type LocationSmbMountOptionsOutput struct{ *pulumi.OutputState }

func (LocationSmbMountOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationSmbMountOptions)(nil)).Elem()
}

func (o LocationSmbMountOptionsOutput) ToLocationSmbMountOptionsOutput() LocationSmbMountOptionsOutput {
	return o
}

func (o LocationSmbMountOptionsOutput) ToLocationSmbMountOptionsOutputWithContext(ctx context.Context) LocationSmbMountOptionsOutput {
	return o
}

func (o LocationSmbMountOptionsOutput) ToLocationSmbMountOptionsPtrOutput() LocationSmbMountOptionsPtrOutput {
	return o.ToLocationSmbMountOptionsPtrOutputWithContext(context.Background())
}

func (o LocationSmbMountOptionsOutput) ToLocationSmbMountOptionsPtrOutputWithContext(ctx context.Context) LocationSmbMountOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LocationSmbMountOptions) *LocationSmbMountOptions {
		return &v
	}).(LocationSmbMountOptionsPtrOutput)
}

// The specific SMB version that you want DataSync to use for mounting your SMB share. Valid values: `AUTOMATIC`, `SMB2`, and `SMB3`. Default: `AUTOMATIC`
func (o LocationSmbMountOptionsOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationSmbMountOptions) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type LocationSmbMountOptionsPtrOutput struct{ *pulumi.OutputState }

func (LocationSmbMountOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationSmbMountOptions)(nil)).Elem()
}

func (o LocationSmbMountOptionsPtrOutput) ToLocationSmbMountOptionsPtrOutput() LocationSmbMountOptionsPtrOutput {
	return o
}

func (o LocationSmbMountOptionsPtrOutput) ToLocationSmbMountOptionsPtrOutputWithContext(ctx context.Context) LocationSmbMountOptionsPtrOutput {
	return o
}

func (o LocationSmbMountOptionsPtrOutput) Elem() LocationSmbMountOptionsOutput {
	return o.ApplyT(func(v *LocationSmbMountOptions) LocationSmbMountOptions {
		if v != nil {
			return *v
		}
		var ret LocationSmbMountOptions
		return ret
	}).(LocationSmbMountOptionsOutput)
}

// The specific SMB version that you want DataSync to use for mounting your SMB share. Valid values: `AUTOMATIC`, `SMB2`, and `SMB3`. Default: `AUTOMATIC`
func (o LocationSmbMountOptionsPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationSmbMountOptions) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type NfsLocationMountOptions struct {
	// The specific NFS version that you want DataSync to use for mounting your NFS share. Valid values: `AUTOMATIC`, `NFS3`, `NFS4_0` and `NFS4_1`. Default: `AUTOMATIC`
	Version *string `pulumi:"version"`
}

// NfsLocationMountOptionsInput is an input type that accepts NfsLocationMountOptionsArgs and NfsLocationMountOptionsOutput values.
// You can construct a concrete instance of `NfsLocationMountOptionsInput` via:
//
//          NfsLocationMountOptionsArgs{...}
type NfsLocationMountOptionsInput interface {
	pulumi.Input

	ToNfsLocationMountOptionsOutput() NfsLocationMountOptionsOutput
	ToNfsLocationMountOptionsOutputWithContext(context.Context) NfsLocationMountOptionsOutput
}

type NfsLocationMountOptionsArgs struct {
	// The specific NFS version that you want DataSync to use for mounting your NFS share. Valid values: `AUTOMATIC`, `NFS3`, `NFS4_0` and `NFS4_1`. Default: `AUTOMATIC`
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (NfsLocationMountOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsLocationMountOptions)(nil)).Elem()
}

func (i NfsLocationMountOptionsArgs) ToNfsLocationMountOptionsOutput() NfsLocationMountOptionsOutput {
	return i.ToNfsLocationMountOptionsOutputWithContext(context.Background())
}

func (i NfsLocationMountOptionsArgs) ToNfsLocationMountOptionsOutputWithContext(ctx context.Context) NfsLocationMountOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NfsLocationMountOptionsOutput)
}

func (i NfsLocationMountOptionsArgs) ToNfsLocationMountOptionsPtrOutput() NfsLocationMountOptionsPtrOutput {
	return i.ToNfsLocationMountOptionsPtrOutputWithContext(context.Background())
}

func (i NfsLocationMountOptionsArgs) ToNfsLocationMountOptionsPtrOutputWithContext(ctx context.Context) NfsLocationMountOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NfsLocationMountOptionsOutput).ToNfsLocationMountOptionsPtrOutputWithContext(ctx)
}

// NfsLocationMountOptionsPtrInput is an input type that accepts NfsLocationMountOptionsArgs, NfsLocationMountOptionsPtr and NfsLocationMountOptionsPtrOutput values.
// You can construct a concrete instance of `NfsLocationMountOptionsPtrInput` via:
//
//          NfsLocationMountOptionsArgs{...}
//
//  or:
//
//          nil
type NfsLocationMountOptionsPtrInput interface {
	pulumi.Input

	ToNfsLocationMountOptionsPtrOutput() NfsLocationMountOptionsPtrOutput
	ToNfsLocationMountOptionsPtrOutputWithContext(context.Context) NfsLocationMountOptionsPtrOutput
}

type nfsLocationMountOptionsPtrType NfsLocationMountOptionsArgs

func NfsLocationMountOptionsPtr(v *NfsLocationMountOptionsArgs) NfsLocationMountOptionsPtrInput {
	return (*nfsLocationMountOptionsPtrType)(v)
}

func (*nfsLocationMountOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NfsLocationMountOptions)(nil)).Elem()
}

func (i *nfsLocationMountOptionsPtrType) ToNfsLocationMountOptionsPtrOutput() NfsLocationMountOptionsPtrOutput {
	return i.ToNfsLocationMountOptionsPtrOutputWithContext(context.Background())
}

func (i *nfsLocationMountOptionsPtrType) ToNfsLocationMountOptionsPtrOutputWithContext(ctx context.Context) NfsLocationMountOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NfsLocationMountOptionsPtrOutput)
}

type NfsLocationMountOptionsOutput struct{ *pulumi.OutputState }

func (NfsLocationMountOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsLocationMountOptions)(nil)).Elem()
}

func (o NfsLocationMountOptionsOutput) ToNfsLocationMountOptionsOutput() NfsLocationMountOptionsOutput {
	return o
}

func (o NfsLocationMountOptionsOutput) ToNfsLocationMountOptionsOutputWithContext(ctx context.Context) NfsLocationMountOptionsOutput {
	return o
}

func (o NfsLocationMountOptionsOutput) ToNfsLocationMountOptionsPtrOutput() NfsLocationMountOptionsPtrOutput {
	return o.ToNfsLocationMountOptionsPtrOutputWithContext(context.Background())
}

func (o NfsLocationMountOptionsOutput) ToNfsLocationMountOptionsPtrOutputWithContext(ctx context.Context) NfsLocationMountOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NfsLocationMountOptions) *NfsLocationMountOptions {
		return &v
	}).(NfsLocationMountOptionsPtrOutput)
}

// The specific NFS version that you want DataSync to use for mounting your NFS share. Valid values: `AUTOMATIC`, `NFS3`, `NFS4_0` and `NFS4_1`. Default: `AUTOMATIC`
func (o NfsLocationMountOptionsOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NfsLocationMountOptions) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type NfsLocationMountOptionsPtrOutput struct{ *pulumi.OutputState }

func (NfsLocationMountOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NfsLocationMountOptions)(nil)).Elem()
}

func (o NfsLocationMountOptionsPtrOutput) ToNfsLocationMountOptionsPtrOutput() NfsLocationMountOptionsPtrOutput {
	return o
}

func (o NfsLocationMountOptionsPtrOutput) ToNfsLocationMountOptionsPtrOutputWithContext(ctx context.Context) NfsLocationMountOptionsPtrOutput {
	return o
}

func (o NfsLocationMountOptionsPtrOutput) Elem() NfsLocationMountOptionsOutput {
	return o.ApplyT(func(v *NfsLocationMountOptions) NfsLocationMountOptions {
		if v != nil {
			return *v
		}
		var ret NfsLocationMountOptions
		return ret
	}).(NfsLocationMountOptionsOutput)
}

// The specific NFS version that you want DataSync to use for mounting your NFS share. Valid values: `AUTOMATIC`, `NFS3`, `NFS4_0` and `NFS4_1`. Default: `AUTOMATIC`
func (o NfsLocationMountOptionsPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NfsLocationMountOptions) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type NfsLocationOnPremConfig struct {
	// List of Amazon Resource Names (ARNs) of the DataSync Agents used to connect to the NFS server.
	AgentArns []string `pulumi:"agentArns"`
}

// NfsLocationOnPremConfigInput is an input type that accepts NfsLocationOnPremConfigArgs and NfsLocationOnPremConfigOutput values.
// You can construct a concrete instance of `NfsLocationOnPremConfigInput` via:
//
//          NfsLocationOnPremConfigArgs{...}
type NfsLocationOnPremConfigInput interface {
	pulumi.Input

	ToNfsLocationOnPremConfigOutput() NfsLocationOnPremConfigOutput
	ToNfsLocationOnPremConfigOutputWithContext(context.Context) NfsLocationOnPremConfigOutput
}

type NfsLocationOnPremConfigArgs struct {
	// List of Amazon Resource Names (ARNs) of the DataSync Agents used to connect to the NFS server.
	AgentArns pulumi.StringArrayInput `pulumi:"agentArns"`
}

func (NfsLocationOnPremConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsLocationOnPremConfig)(nil)).Elem()
}

func (i NfsLocationOnPremConfigArgs) ToNfsLocationOnPremConfigOutput() NfsLocationOnPremConfigOutput {
	return i.ToNfsLocationOnPremConfigOutputWithContext(context.Background())
}

func (i NfsLocationOnPremConfigArgs) ToNfsLocationOnPremConfigOutputWithContext(ctx context.Context) NfsLocationOnPremConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NfsLocationOnPremConfigOutput)
}

func (i NfsLocationOnPremConfigArgs) ToNfsLocationOnPremConfigPtrOutput() NfsLocationOnPremConfigPtrOutput {
	return i.ToNfsLocationOnPremConfigPtrOutputWithContext(context.Background())
}

func (i NfsLocationOnPremConfigArgs) ToNfsLocationOnPremConfigPtrOutputWithContext(ctx context.Context) NfsLocationOnPremConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NfsLocationOnPremConfigOutput).ToNfsLocationOnPremConfigPtrOutputWithContext(ctx)
}

// NfsLocationOnPremConfigPtrInput is an input type that accepts NfsLocationOnPremConfigArgs, NfsLocationOnPremConfigPtr and NfsLocationOnPremConfigPtrOutput values.
// You can construct a concrete instance of `NfsLocationOnPremConfigPtrInput` via:
//
//          NfsLocationOnPremConfigArgs{...}
//
//  or:
//
//          nil
type NfsLocationOnPremConfigPtrInput interface {
	pulumi.Input

	ToNfsLocationOnPremConfigPtrOutput() NfsLocationOnPremConfigPtrOutput
	ToNfsLocationOnPremConfigPtrOutputWithContext(context.Context) NfsLocationOnPremConfigPtrOutput
}

type nfsLocationOnPremConfigPtrType NfsLocationOnPremConfigArgs

func NfsLocationOnPremConfigPtr(v *NfsLocationOnPremConfigArgs) NfsLocationOnPremConfigPtrInput {
	return (*nfsLocationOnPremConfigPtrType)(v)
}

func (*nfsLocationOnPremConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NfsLocationOnPremConfig)(nil)).Elem()
}

func (i *nfsLocationOnPremConfigPtrType) ToNfsLocationOnPremConfigPtrOutput() NfsLocationOnPremConfigPtrOutput {
	return i.ToNfsLocationOnPremConfigPtrOutputWithContext(context.Background())
}

func (i *nfsLocationOnPremConfigPtrType) ToNfsLocationOnPremConfigPtrOutputWithContext(ctx context.Context) NfsLocationOnPremConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NfsLocationOnPremConfigPtrOutput)
}

type NfsLocationOnPremConfigOutput struct{ *pulumi.OutputState }

func (NfsLocationOnPremConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsLocationOnPremConfig)(nil)).Elem()
}

func (o NfsLocationOnPremConfigOutput) ToNfsLocationOnPremConfigOutput() NfsLocationOnPremConfigOutput {
	return o
}

func (o NfsLocationOnPremConfigOutput) ToNfsLocationOnPremConfigOutputWithContext(ctx context.Context) NfsLocationOnPremConfigOutput {
	return o
}

func (o NfsLocationOnPremConfigOutput) ToNfsLocationOnPremConfigPtrOutput() NfsLocationOnPremConfigPtrOutput {
	return o.ToNfsLocationOnPremConfigPtrOutputWithContext(context.Background())
}

func (o NfsLocationOnPremConfigOutput) ToNfsLocationOnPremConfigPtrOutputWithContext(ctx context.Context) NfsLocationOnPremConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NfsLocationOnPremConfig) *NfsLocationOnPremConfig {
		return &v
	}).(NfsLocationOnPremConfigPtrOutput)
}

// List of Amazon Resource Names (ARNs) of the DataSync Agents used to connect to the NFS server.
func (o NfsLocationOnPremConfigOutput) AgentArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NfsLocationOnPremConfig) []string { return v.AgentArns }).(pulumi.StringArrayOutput)
}

type NfsLocationOnPremConfigPtrOutput struct{ *pulumi.OutputState }

func (NfsLocationOnPremConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NfsLocationOnPremConfig)(nil)).Elem()
}

func (o NfsLocationOnPremConfigPtrOutput) ToNfsLocationOnPremConfigPtrOutput() NfsLocationOnPremConfigPtrOutput {
	return o
}

func (o NfsLocationOnPremConfigPtrOutput) ToNfsLocationOnPremConfigPtrOutputWithContext(ctx context.Context) NfsLocationOnPremConfigPtrOutput {
	return o
}

func (o NfsLocationOnPremConfigPtrOutput) Elem() NfsLocationOnPremConfigOutput {
	return o.ApplyT(func(v *NfsLocationOnPremConfig) NfsLocationOnPremConfig {
		if v != nil {
			return *v
		}
		var ret NfsLocationOnPremConfig
		return ret
	}).(NfsLocationOnPremConfigOutput)
}

// List of Amazon Resource Names (ARNs) of the DataSync Agents used to connect to the NFS server.
func (o NfsLocationOnPremConfigPtrOutput) AgentArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NfsLocationOnPremConfig) []string {
		if v == nil {
			return nil
		}
		return v.AgentArns
	}).(pulumi.StringArrayOutput)
}

type S3LocationS3Config struct {
	// Amazon Resource Names (ARN) of the IAM Role used to connect to the S3 Bucket.
	BucketAccessRoleArn string `pulumi:"bucketAccessRoleArn"`
}

// S3LocationS3ConfigInput is an input type that accepts S3LocationS3ConfigArgs and S3LocationS3ConfigOutput values.
// You can construct a concrete instance of `S3LocationS3ConfigInput` via:
//
//          S3LocationS3ConfigArgs{...}
type S3LocationS3ConfigInput interface {
	pulumi.Input

	ToS3LocationS3ConfigOutput() S3LocationS3ConfigOutput
	ToS3LocationS3ConfigOutputWithContext(context.Context) S3LocationS3ConfigOutput
}

type S3LocationS3ConfigArgs struct {
	// Amazon Resource Names (ARN) of the IAM Role used to connect to the S3 Bucket.
	BucketAccessRoleArn pulumi.StringInput `pulumi:"bucketAccessRoleArn"`
}

func (S3LocationS3ConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*S3LocationS3Config)(nil)).Elem()
}

func (i S3LocationS3ConfigArgs) ToS3LocationS3ConfigOutput() S3LocationS3ConfigOutput {
	return i.ToS3LocationS3ConfigOutputWithContext(context.Background())
}

func (i S3LocationS3ConfigArgs) ToS3LocationS3ConfigOutputWithContext(ctx context.Context) S3LocationS3ConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3LocationS3ConfigOutput)
}

func (i S3LocationS3ConfigArgs) ToS3LocationS3ConfigPtrOutput() S3LocationS3ConfigPtrOutput {
	return i.ToS3LocationS3ConfigPtrOutputWithContext(context.Background())
}

func (i S3LocationS3ConfigArgs) ToS3LocationS3ConfigPtrOutputWithContext(ctx context.Context) S3LocationS3ConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3LocationS3ConfigOutput).ToS3LocationS3ConfigPtrOutputWithContext(ctx)
}

// S3LocationS3ConfigPtrInput is an input type that accepts S3LocationS3ConfigArgs, S3LocationS3ConfigPtr and S3LocationS3ConfigPtrOutput values.
// You can construct a concrete instance of `S3LocationS3ConfigPtrInput` via:
//
//          S3LocationS3ConfigArgs{...}
//
//  or:
//
//          nil
type S3LocationS3ConfigPtrInput interface {
	pulumi.Input

	ToS3LocationS3ConfigPtrOutput() S3LocationS3ConfigPtrOutput
	ToS3LocationS3ConfigPtrOutputWithContext(context.Context) S3LocationS3ConfigPtrOutput
}

type s3locationS3ConfigPtrType S3LocationS3ConfigArgs

func S3LocationS3ConfigPtr(v *S3LocationS3ConfigArgs) S3LocationS3ConfigPtrInput {
	return (*s3locationS3ConfigPtrType)(v)
}

func (*s3locationS3ConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**S3LocationS3Config)(nil)).Elem()
}

func (i *s3locationS3ConfigPtrType) ToS3LocationS3ConfigPtrOutput() S3LocationS3ConfigPtrOutput {
	return i.ToS3LocationS3ConfigPtrOutputWithContext(context.Background())
}

func (i *s3locationS3ConfigPtrType) ToS3LocationS3ConfigPtrOutputWithContext(ctx context.Context) S3LocationS3ConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3LocationS3ConfigPtrOutput)
}

type S3LocationS3ConfigOutput struct{ *pulumi.OutputState }

func (S3LocationS3ConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*S3LocationS3Config)(nil)).Elem()
}

func (o S3LocationS3ConfigOutput) ToS3LocationS3ConfigOutput() S3LocationS3ConfigOutput {
	return o
}

func (o S3LocationS3ConfigOutput) ToS3LocationS3ConfigOutputWithContext(ctx context.Context) S3LocationS3ConfigOutput {
	return o
}

func (o S3LocationS3ConfigOutput) ToS3LocationS3ConfigPtrOutput() S3LocationS3ConfigPtrOutput {
	return o.ToS3LocationS3ConfigPtrOutputWithContext(context.Background())
}

func (o S3LocationS3ConfigOutput) ToS3LocationS3ConfigPtrOutputWithContext(ctx context.Context) S3LocationS3ConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v S3LocationS3Config) *S3LocationS3Config {
		return &v
	}).(S3LocationS3ConfigPtrOutput)
}

// Amazon Resource Names (ARN) of the IAM Role used to connect to the S3 Bucket.
func (o S3LocationS3ConfigOutput) BucketAccessRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v S3LocationS3Config) string { return v.BucketAccessRoleArn }).(pulumi.StringOutput)
}

type S3LocationS3ConfigPtrOutput struct{ *pulumi.OutputState }

func (S3LocationS3ConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**S3LocationS3Config)(nil)).Elem()
}

func (o S3LocationS3ConfigPtrOutput) ToS3LocationS3ConfigPtrOutput() S3LocationS3ConfigPtrOutput {
	return o
}

func (o S3LocationS3ConfigPtrOutput) ToS3LocationS3ConfigPtrOutputWithContext(ctx context.Context) S3LocationS3ConfigPtrOutput {
	return o
}

func (o S3LocationS3ConfigPtrOutput) Elem() S3LocationS3ConfigOutput {
	return o.ApplyT(func(v *S3LocationS3Config) S3LocationS3Config {
		if v != nil {
			return *v
		}
		var ret S3LocationS3Config
		return ret
	}).(S3LocationS3ConfigOutput)
}

// Amazon Resource Names (ARN) of the IAM Role used to connect to the S3 Bucket.
func (o S3LocationS3ConfigPtrOutput) BucketAccessRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3LocationS3Config) *string {
		if v == nil {
			return nil
		}
		return &v.BucketAccessRoleArn
	}).(pulumi.StringPtrOutput)
}

type TaskExcludes struct {
	// The type of filter rule to apply. Valid values: `SIMPLE_PATTERN`.
	FilterType *string `pulumi:"filterType"`
	// A single filter string that consists of the patterns to include or exclude. The patterns are delimited by "|" (that is, a pipe), for example: `/folder1|/folder2`
	Value *string `pulumi:"value"`
}

// TaskExcludesInput is an input type that accepts TaskExcludesArgs and TaskExcludesOutput values.
// You can construct a concrete instance of `TaskExcludesInput` via:
//
//          TaskExcludesArgs{...}
type TaskExcludesInput interface {
	pulumi.Input

	ToTaskExcludesOutput() TaskExcludesOutput
	ToTaskExcludesOutputWithContext(context.Context) TaskExcludesOutput
}

type TaskExcludesArgs struct {
	// The type of filter rule to apply. Valid values: `SIMPLE_PATTERN`.
	FilterType pulumi.StringPtrInput `pulumi:"filterType"`
	// A single filter string that consists of the patterns to include or exclude. The patterns are delimited by "|" (that is, a pipe), for example: `/folder1|/folder2`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TaskExcludesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskExcludes)(nil)).Elem()
}

func (i TaskExcludesArgs) ToTaskExcludesOutput() TaskExcludesOutput {
	return i.ToTaskExcludesOutputWithContext(context.Background())
}

func (i TaskExcludesArgs) ToTaskExcludesOutputWithContext(ctx context.Context) TaskExcludesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskExcludesOutput)
}

func (i TaskExcludesArgs) ToTaskExcludesPtrOutput() TaskExcludesPtrOutput {
	return i.ToTaskExcludesPtrOutputWithContext(context.Background())
}

func (i TaskExcludesArgs) ToTaskExcludesPtrOutputWithContext(ctx context.Context) TaskExcludesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskExcludesOutput).ToTaskExcludesPtrOutputWithContext(ctx)
}

// TaskExcludesPtrInput is an input type that accepts TaskExcludesArgs, TaskExcludesPtr and TaskExcludesPtrOutput values.
// You can construct a concrete instance of `TaskExcludesPtrInput` via:
//
//          TaskExcludesArgs{...}
//
//  or:
//
//          nil
type TaskExcludesPtrInput interface {
	pulumi.Input

	ToTaskExcludesPtrOutput() TaskExcludesPtrOutput
	ToTaskExcludesPtrOutputWithContext(context.Context) TaskExcludesPtrOutput
}

type taskExcludesPtrType TaskExcludesArgs

func TaskExcludesPtr(v *TaskExcludesArgs) TaskExcludesPtrInput {
	return (*taskExcludesPtrType)(v)
}

func (*taskExcludesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskExcludes)(nil)).Elem()
}

func (i *taskExcludesPtrType) ToTaskExcludesPtrOutput() TaskExcludesPtrOutput {
	return i.ToTaskExcludesPtrOutputWithContext(context.Background())
}

func (i *taskExcludesPtrType) ToTaskExcludesPtrOutputWithContext(ctx context.Context) TaskExcludesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskExcludesPtrOutput)
}

type TaskExcludesOutput struct{ *pulumi.OutputState }

func (TaskExcludesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskExcludes)(nil)).Elem()
}

func (o TaskExcludesOutput) ToTaskExcludesOutput() TaskExcludesOutput {
	return o
}

func (o TaskExcludesOutput) ToTaskExcludesOutputWithContext(ctx context.Context) TaskExcludesOutput {
	return o
}

func (o TaskExcludesOutput) ToTaskExcludesPtrOutput() TaskExcludesPtrOutput {
	return o.ToTaskExcludesPtrOutputWithContext(context.Background())
}

func (o TaskExcludesOutput) ToTaskExcludesPtrOutputWithContext(ctx context.Context) TaskExcludesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskExcludes) *TaskExcludes {
		return &v
	}).(TaskExcludesPtrOutput)
}

// The type of filter rule to apply. Valid values: `SIMPLE_PATTERN`.
func (o TaskExcludesOutput) FilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskExcludes) *string { return v.FilterType }).(pulumi.StringPtrOutput)
}

// A single filter string that consists of the patterns to include or exclude. The patterns are delimited by "|" (that is, a pipe), for example: `/folder1|/folder2`
func (o TaskExcludesOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskExcludes) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TaskExcludesPtrOutput struct{ *pulumi.OutputState }

func (TaskExcludesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskExcludes)(nil)).Elem()
}

func (o TaskExcludesPtrOutput) ToTaskExcludesPtrOutput() TaskExcludesPtrOutput {
	return o
}

func (o TaskExcludesPtrOutput) ToTaskExcludesPtrOutputWithContext(ctx context.Context) TaskExcludesPtrOutput {
	return o
}

func (o TaskExcludesPtrOutput) Elem() TaskExcludesOutput {
	return o.ApplyT(func(v *TaskExcludes) TaskExcludes {
		if v != nil {
			return *v
		}
		var ret TaskExcludes
		return ret
	}).(TaskExcludesOutput)
}

// The type of filter rule to apply. Valid values: `SIMPLE_PATTERN`.
func (o TaskExcludesPtrOutput) FilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskExcludes) *string {
		if v == nil {
			return nil
		}
		return v.FilterType
	}).(pulumi.StringPtrOutput)
}

// A single filter string that consists of the patterns to include or exclude. The patterns are delimited by "|" (that is, a pipe), for example: `/folder1|/folder2`
func (o TaskExcludesPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskExcludes) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type TaskOptions struct {
	// A file metadata that shows the last time a file was accessed (that is when the file was read or written to). If set to `BEST_EFFORT`, the DataSync Task attempts to preserve the original (that is, the version before sync `PREPARING` phase) `atime` attribute on all source files. Valid values: `BEST_EFFORT`, `NONE`. Default: `BEST_EFFORT`.
	Atime *string `pulumi:"atime"`
	// Limits the bandwidth utilized. For example, to set a maximum of 1 MB, set this value to `1048576`. Value values: `-1` or greater. Default: `-1` (unlimited).
	BytesPerSecond *int `pulumi:"bytesPerSecond"`
	// Group identifier of the file's owners. Valid values: `BOTH`, `INT_VALUE`, `NAME`, `NONE`. Default: `INT_VALUE` (preserve integer value of the ID).
	Gid *string `pulumi:"gid"`
	// Determines the type of logs that DataSync publishes to a log stream in the Amazon CloudWatch log group that you provide. Valid values: `OFF`, `BASIC`, `TRANSFER`. Default: `OFF`.
	LogLevel *string `pulumi:"logLevel"`
	// A file metadata that indicates the last time a file was modified (written to) before the sync `PREPARING` phase. Value values: `NONE`, `PRESERVE`. Default: `PRESERVE`.
	Mtime *string `pulumi:"mtime"`
	// Determines whether files at the destination should be overwritten or preserved when copying files. Valid values: `ALWAYS`, `NEVER`. Default: `ALWAYS`.
	OverwriteMode *string `pulumi:"overwriteMode"`
	// Determines which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file. Valid values: `NONE`, `PRESERVE`. Default: `PRESERVE`.
	PosixPermissions *string `pulumi:"posixPermissions"`
	// Whether files deleted in the source should be removed or preserved in the destination file system. Valid values: `PRESERVE`, `REMOVE`. Default: `PRESERVE`.
	PreserveDeletedFiles *string `pulumi:"preserveDeletedFiles"`
	// Whether the DataSync Task should preserve the metadata of block and character devices in the source files system, and recreate the files with that device name and metadata on the destination. The DataSync Task can’t sync the actual contents of such devices, because many of the devices are non-terminal and don’t return an end of file (EOF) marker. Valid values: `NONE`, `PRESERVE`. Default: `NONE` (ignore special devices).
	PreserveDevices *string `pulumi:"preserveDevices"`
	// Determines whether tasks should be queued before executing the tasks. Valid values: `ENABLED`, `DISABLED`. Default `ENABLED`.
	TaskQueueing *string `pulumi:"taskQueueing"`
	// Determines whether DataSync transfers only the data and metadata that differ between the source and the destination location, or whether DataSync transfers all the content from the source, without comparing to the destination location. Valid values: `CHANGED`, `ALL`. Default: `CHANGED`
	TransferMode *string `pulumi:"transferMode"`
	// User identifier of the file's owners. Valid values: `BOTH`, `INT_VALUE`, `NAME`, `NONE`. Default: `INT_VALUE` (preserve integer value of the ID).
	Uid *string `pulumi:"uid"`
	// Whether a data integrity verification should be performed at the end of a task execution after all data and metadata have been transferred. Valid values: `NONE`, `POINT_IN_TIME_CONSISTENT`, `ONLY_FILES_TRANSFERRED`. Default: `POINT_IN_TIME_CONSISTENT`.
	VerifyMode *string `pulumi:"verifyMode"`
}

// TaskOptionsInput is an input type that accepts TaskOptionsArgs and TaskOptionsOutput values.
// You can construct a concrete instance of `TaskOptionsInput` via:
//
//          TaskOptionsArgs{...}
type TaskOptionsInput interface {
	pulumi.Input

	ToTaskOptionsOutput() TaskOptionsOutput
	ToTaskOptionsOutputWithContext(context.Context) TaskOptionsOutput
}

type TaskOptionsArgs struct {
	// A file metadata that shows the last time a file was accessed (that is when the file was read or written to). If set to `BEST_EFFORT`, the DataSync Task attempts to preserve the original (that is, the version before sync `PREPARING` phase) `atime` attribute on all source files. Valid values: `BEST_EFFORT`, `NONE`. Default: `BEST_EFFORT`.
	Atime pulumi.StringPtrInput `pulumi:"atime"`
	// Limits the bandwidth utilized. For example, to set a maximum of 1 MB, set this value to `1048576`. Value values: `-1` or greater. Default: `-1` (unlimited).
	BytesPerSecond pulumi.IntPtrInput `pulumi:"bytesPerSecond"`
	// Group identifier of the file's owners. Valid values: `BOTH`, `INT_VALUE`, `NAME`, `NONE`. Default: `INT_VALUE` (preserve integer value of the ID).
	Gid pulumi.StringPtrInput `pulumi:"gid"`
	// Determines the type of logs that DataSync publishes to a log stream in the Amazon CloudWatch log group that you provide. Valid values: `OFF`, `BASIC`, `TRANSFER`. Default: `OFF`.
	LogLevel pulumi.StringPtrInput `pulumi:"logLevel"`
	// A file metadata that indicates the last time a file was modified (written to) before the sync `PREPARING` phase. Value values: `NONE`, `PRESERVE`. Default: `PRESERVE`.
	Mtime pulumi.StringPtrInput `pulumi:"mtime"`
	// Determines whether files at the destination should be overwritten or preserved when copying files. Valid values: `ALWAYS`, `NEVER`. Default: `ALWAYS`.
	OverwriteMode pulumi.StringPtrInput `pulumi:"overwriteMode"`
	// Determines which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file. Valid values: `NONE`, `PRESERVE`. Default: `PRESERVE`.
	PosixPermissions pulumi.StringPtrInput `pulumi:"posixPermissions"`
	// Whether files deleted in the source should be removed or preserved in the destination file system. Valid values: `PRESERVE`, `REMOVE`. Default: `PRESERVE`.
	PreserveDeletedFiles pulumi.StringPtrInput `pulumi:"preserveDeletedFiles"`
	// Whether the DataSync Task should preserve the metadata of block and character devices in the source files system, and recreate the files with that device name and metadata on the destination. The DataSync Task can’t sync the actual contents of such devices, because many of the devices are non-terminal and don’t return an end of file (EOF) marker. Valid values: `NONE`, `PRESERVE`. Default: `NONE` (ignore special devices).
	PreserveDevices pulumi.StringPtrInput `pulumi:"preserveDevices"`
	// Determines whether tasks should be queued before executing the tasks. Valid values: `ENABLED`, `DISABLED`. Default `ENABLED`.
	TaskQueueing pulumi.StringPtrInput `pulumi:"taskQueueing"`
	// Determines whether DataSync transfers only the data and metadata that differ between the source and the destination location, or whether DataSync transfers all the content from the source, without comparing to the destination location. Valid values: `CHANGED`, `ALL`. Default: `CHANGED`
	TransferMode pulumi.StringPtrInput `pulumi:"transferMode"`
	// User identifier of the file's owners. Valid values: `BOTH`, `INT_VALUE`, `NAME`, `NONE`. Default: `INT_VALUE` (preserve integer value of the ID).
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// Whether a data integrity verification should be performed at the end of a task execution after all data and metadata have been transferred. Valid values: `NONE`, `POINT_IN_TIME_CONSISTENT`, `ONLY_FILES_TRANSFERRED`. Default: `POINT_IN_TIME_CONSISTENT`.
	VerifyMode pulumi.StringPtrInput `pulumi:"verifyMode"`
}

func (TaskOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskOptions)(nil)).Elem()
}

func (i TaskOptionsArgs) ToTaskOptionsOutput() TaskOptionsOutput {
	return i.ToTaskOptionsOutputWithContext(context.Background())
}

func (i TaskOptionsArgs) ToTaskOptionsOutputWithContext(ctx context.Context) TaskOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskOptionsOutput)
}

func (i TaskOptionsArgs) ToTaskOptionsPtrOutput() TaskOptionsPtrOutput {
	return i.ToTaskOptionsPtrOutputWithContext(context.Background())
}

func (i TaskOptionsArgs) ToTaskOptionsPtrOutputWithContext(ctx context.Context) TaskOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskOptionsOutput).ToTaskOptionsPtrOutputWithContext(ctx)
}

// TaskOptionsPtrInput is an input type that accepts TaskOptionsArgs, TaskOptionsPtr and TaskOptionsPtrOutput values.
// You can construct a concrete instance of `TaskOptionsPtrInput` via:
//
//          TaskOptionsArgs{...}
//
//  or:
//
//          nil
type TaskOptionsPtrInput interface {
	pulumi.Input

	ToTaskOptionsPtrOutput() TaskOptionsPtrOutput
	ToTaskOptionsPtrOutputWithContext(context.Context) TaskOptionsPtrOutput
}

type taskOptionsPtrType TaskOptionsArgs

func TaskOptionsPtr(v *TaskOptionsArgs) TaskOptionsPtrInput {
	return (*taskOptionsPtrType)(v)
}

func (*taskOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskOptions)(nil)).Elem()
}

func (i *taskOptionsPtrType) ToTaskOptionsPtrOutput() TaskOptionsPtrOutput {
	return i.ToTaskOptionsPtrOutputWithContext(context.Background())
}

func (i *taskOptionsPtrType) ToTaskOptionsPtrOutputWithContext(ctx context.Context) TaskOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskOptionsPtrOutput)
}

type TaskOptionsOutput struct{ *pulumi.OutputState }

func (TaskOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskOptions)(nil)).Elem()
}

func (o TaskOptionsOutput) ToTaskOptionsOutput() TaskOptionsOutput {
	return o
}

func (o TaskOptionsOutput) ToTaskOptionsOutputWithContext(ctx context.Context) TaskOptionsOutput {
	return o
}

func (o TaskOptionsOutput) ToTaskOptionsPtrOutput() TaskOptionsPtrOutput {
	return o.ToTaskOptionsPtrOutputWithContext(context.Background())
}

func (o TaskOptionsOutput) ToTaskOptionsPtrOutputWithContext(ctx context.Context) TaskOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskOptions) *TaskOptions {
		return &v
	}).(TaskOptionsPtrOutput)
}

// A file metadata that shows the last time a file was accessed (that is when the file was read or written to). If set to `BEST_EFFORT`, the DataSync Task attempts to preserve the original (that is, the version before sync `PREPARING` phase) `atime` attribute on all source files. Valid values: `BEST_EFFORT`, `NONE`. Default: `BEST_EFFORT`.
func (o TaskOptionsOutput) Atime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskOptions) *string { return v.Atime }).(pulumi.StringPtrOutput)
}

// Limits the bandwidth utilized. For example, to set a maximum of 1 MB, set this value to `1048576`. Value values: `-1` or greater. Default: `-1` (unlimited).
func (o TaskOptionsOutput) BytesPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskOptions) *int { return v.BytesPerSecond }).(pulumi.IntPtrOutput)
}

// Group identifier of the file's owners. Valid values: `BOTH`, `INT_VALUE`, `NAME`, `NONE`. Default: `INT_VALUE` (preserve integer value of the ID).
func (o TaskOptionsOutput) Gid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskOptions) *string { return v.Gid }).(pulumi.StringPtrOutput)
}

// Determines the type of logs that DataSync publishes to a log stream in the Amazon CloudWatch log group that you provide. Valid values: `OFF`, `BASIC`, `TRANSFER`. Default: `OFF`.
func (o TaskOptionsOutput) LogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskOptions) *string { return v.LogLevel }).(pulumi.StringPtrOutput)
}

// A file metadata that indicates the last time a file was modified (written to) before the sync `PREPARING` phase. Value values: `NONE`, `PRESERVE`. Default: `PRESERVE`.
func (o TaskOptionsOutput) Mtime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskOptions) *string { return v.Mtime }).(pulumi.StringPtrOutput)
}

// Determines whether files at the destination should be overwritten or preserved when copying files. Valid values: `ALWAYS`, `NEVER`. Default: `ALWAYS`.
func (o TaskOptionsOutput) OverwriteMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskOptions) *string { return v.OverwriteMode }).(pulumi.StringPtrOutput)
}

// Determines which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file. Valid values: `NONE`, `PRESERVE`. Default: `PRESERVE`.
func (o TaskOptionsOutput) PosixPermissions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskOptions) *string { return v.PosixPermissions }).(pulumi.StringPtrOutput)
}

// Whether files deleted in the source should be removed or preserved in the destination file system. Valid values: `PRESERVE`, `REMOVE`. Default: `PRESERVE`.
func (o TaskOptionsOutput) PreserveDeletedFiles() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskOptions) *string { return v.PreserveDeletedFiles }).(pulumi.StringPtrOutput)
}

// Whether the DataSync Task should preserve the metadata of block and character devices in the source files system, and recreate the files with that device name and metadata on the destination. The DataSync Task can’t sync the actual contents of such devices, because many of the devices are non-terminal and don’t return an end of file (EOF) marker. Valid values: `NONE`, `PRESERVE`. Default: `NONE` (ignore special devices).
func (o TaskOptionsOutput) PreserveDevices() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskOptions) *string { return v.PreserveDevices }).(pulumi.StringPtrOutput)
}

// Determines whether tasks should be queued before executing the tasks. Valid values: `ENABLED`, `DISABLED`. Default `ENABLED`.
func (o TaskOptionsOutput) TaskQueueing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskOptions) *string { return v.TaskQueueing }).(pulumi.StringPtrOutput)
}

// Determines whether DataSync transfers only the data and metadata that differ between the source and the destination location, or whether DataSync transfers all the content from the source, without comparing to the destination location. Valid values: `CHANGED`, `ALL`. Default: `CHANGED`
func (o TaskOptionsOutput) TransferMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskOptions) *string { return v.TransferMode }).(pulumi.StringPtrOutput)
}

// User identifier of the file's owners. Valid values: `BOTH`, `INT_VALUE`, `NAME`, `NONE`. Default: `INT_VALUE` (preserve integer value of the ID).
func (o TaskOptionsOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskOptions) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// Whether a data integrity verification should be performed at the end of a task execution after all data and metadata have been transferred. Valid values: `NONE`, `POINT_IN_TIME_CONSISTENT`, `ONLY_FILES_TRANSFERRED`. Default: `POINT_IN_TIME_CONSISTENT`.
func (o TaskOptionsOutput) VerifyMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskOptions) *string { return v.VerifyMode }).(pulumi.StringPtrOutput)
}

type TaskOptionsPtrOutput struct{ *pulumi.OutputState }

func (TaskOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskOptions)(nil)).Elem()
}

func (o TaskOptionsPtrOutput) ToTaskOptionsPtrOutput() TaskOptionsPtrOutput {
	return o
}

func (o TaskOptionsPtrOutput) ToTaskOptionsPtrOutputWithContext(ctx context.Context) TaskOptionsPtrOutput {
	return o
}

func (o TaskOptionsPtrOutput) Elem() TaskOptionsOutput {
	return o.ApplyT(func(v *TaskOptions) TaskOptions {
		if v != nil {
			return *v
		}
		var ret TaskOptions
		return ret
	}).(TaskOptionsOutput)
}

// A file metadata that shows the last time a file was accessed (that is when the file was read or written to). If set to `BEST_EFFORT`, the DataSync Task attempts to preserve the original (that is, the version before sync `PREPARING` phase) `atime` attribute on all source files. Valid values: `BEST_EFFORT`, `NONE`. Default: `BEST_EFFORT`.
func (o TaskOptionsPtrOutput) Atime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskOptions) *string {
		if v == nil {
			return nil
		}
		return v.Atime
	}).(pulumi.StringPtrOutput)
}

// Limits the bandwidth utilized. For example, to set a maximum of 1 MB, set this value to `1048576`. Value values: `-1` or greater. Default: `-1` (unlimited).
func (o TaskOptionsPtrOutput) BytesPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskOptions) *int {
		if v == nil {
			return nil
		}
		return v.BytesPerSecond
	}).(pulumi.IntPtrOutput)
}

// Group identifier of the file's owners. Valid values: `BOTH`, `INT_VALUE`, `NAME`, `NONE`. Default: `INT_VALUE` (preserve integer value of the ID).
func (o TaskOptionsPtrOutput) Gid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskOptions) *string {
		if v == nil {
			return nil
		}
		return v.Gid
	}).(pulumi.StringPtrOutput)
}

// Determines the type of logs that DataSync publishes to a log stream in the Amazon CloudWatch log group that you provide. Valid values: `OFF`, `BASIC`, `TRANSFER`. Default: `OFF`.
func (o TaskOptionsPtrOutput) LogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskOptions) *string {
		if v == nil {
			return nil
		}
		return v.LogLevel
	}).(pulumi.StringPtrOutput)
}

// A file metadata that indicates the last time a file was modified (written to) before the sync `PREPARING` phase. Value values: `NONE`, `PRESERVE`. Default: `PRESERVE`.
func (o TaskOptionsPtrOutput) Mtime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskOptions) *string {
		if v == nil {
			return nil
		}
		return v.Mtime
	}).(pulumi.StringPtrOutput)
}

// Determines whether files at the destination should be overwritten or preserved when copying files. Valid values: `ALWAYS`, `NEVER`. Default: `ALWAYS`.
func (o TaskOptionsPtrOutput) OverwriteMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskOptions) *string {
		if v == nil {
			return nil
		}
		return v.OverwriteMode
	}).(pulumi.StringPtrOutput)
}

// Determines which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file. Valid values: `NONE`, `PRESERVE`. Default: `PRESERVE`.
func (o TaskOptionsPtrOutput) PosixPermissions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskOptions) *string {
		if v == nil {
			return nil
		}
		return v.PosixPermissions
	}).(pulumi.StringPtrOutput)
}

// Whether files deleted in the source should be removed or preserved in the destination file system. Valid values: `PRESERVE`, `REMOVE`. Default: `PRESERVE`.
func (o TaskOptionsPtrOutput) PreserveDeletedFiles() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskOptions) *string {
		if v == nil {
			return nil
		}
		return v.PreserveDeletedFiles
	}).(pulumi.StringPtrOutput)
}

// Whether the DataSync Task should preserve the metadata of block and character devices in the source files system, and recreate the files with that device name and metadata on the destination. The DataSync Task can’t sync the actual contents of such devices, because many of the devices are non-terminal and don’t return an end of file (EOF) marker. Valid values: `NONE`, `PRESERVE`. Default: `NONE` (ignore special devices).
func (o TaskOptionsPtrOutput) PreserveDevices() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskOptions) *string {
		if v == nil {
			return nil
		}
		return v.PreserveDevices
	}).(pulumi.StringPtrOutput)
}

// Determines whether tasks should be queued before executing the tasks. Valid values: `ENABLED`, `DISABLED`. Default `ENABLED`.
func (o TaskOptionsPtrOutput) TaskQueueing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskOptions) *string {
		if v == nil {
			return nil
		}
		return v.TaskQueueing
	}).(pulumi.StringPtrOutput)
}

// Determines whether DataSync transfers only the data and metadata that differ between the source and the destination location, or whether DataSync transfers all the content from the source, without comparing to the destination location. Valid values: `CHANGED`, `ALL`. Default: `CHANGED`
func (o TaskOptionsPtrOutput) TransferMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskOptions) *string {
		if v == nil {
			return nil
		}
		return v.TransferMode
	}).(pulumi.StringPtrOutput)
}

// User identifier of the file's owners. Valid values: `BOTH`, `INT_VALUE`, `NAME`, `NONE`. Default: `INT_VALUE` (preserve integer value of the ID).
func (o TaskOptionsPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskOptions) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// Whether a data integrity verification should be performed at the end of a task execution after all data and metadata have been transferred. Valid values: `NONE`, `POINT_IN_TIME_CONSISTENT`, `ONLY_FILES_TRANSFERRED`. Default: `POINT_IN_TIME_CONSISTENT`.
func (o TaskOptionsPtrOutput) VerifyMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskOptions) *string {
		if v == nil {
			return nil
		}
		return v.VerifyMode
	}).(pulumi.StringPtrOutput)
}

type TaskSchedule struct {
	// Specifies the schedule you want your task to use for repeated executions. For more information, see [Schedule Expressions for Rules](https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html).
	ScheduleExpression string `pulumi:"scheduleExpression"`
}

// TaskScheduleInput is an input type that accepts TaskScheduleArgs and TaskScheduleOutput values.
// You can construct a concrete instance of `TaskScheduleInput` via:
//
//          TaskScheduleArgs{...}
type TaskScheduleInput interface {
	pulumi.Input

	ToTaskScheduleOutput() TaskScheduleOutput
	ToTaskScheduleOutputWithContext(context.Context) TaskScheduleOutput
}

type TaskScheduleArgs struct {
	// Specifies the schedule you want your task to use for repeated executions. For more information, see [Schedule Expressions for Rules](https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html).
	ScheduleExpression pulumi.StringInput `pulumi:"scheduleExpression"`
}

func (TaskScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSchedule)(nil)).Elem()
}

func (i TaskScheduleArgs) ToTaskScheduleOutput() TaskScheduleOutput {
	return i.ToTaskScheduleOutputWithContext(context.Background())
}

func (i TaskScheduleArgs) ToTaskScheduleOutputWithContext(ctx context.Context) TaskScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskScheduleOutput)
}

func (i TaskScheduleArgs) ToTaskSchedulePtrOutput() TaskSchedulePtrOutput {
	return i.ToTaskSchedulePtrOutputWithContext(context.Background())
}

func (i TaskScheduleArgs) ToTaskSchedulePtrOutputWithContext(ctx context.Context) TaskSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskScheduleOutput).ToTaskSchedulePtrOutputWithContext(ctx)
}

// TaskSchedulePtrInput is an input type that accepts TaskScheduleArgs, TaskSchedulePtr and TaskSchedulePtrOutput values.
// You can construct a concrete instance of `TaskSchedulePtrInput` via:
//
//          TaskScheduleArgs{...}
//
//  or:
//
//          nil
type TaskSchedulePtrInput interface {
	pulumi.Input

	ToTaskSchedulePtrOutput() TaskSchedulePtrOutput
	ToTaskSchedulePtrOutputWithContext(context.Context) TaskSchedulePtrOutput
}

type taskSchedulePtrType TaskScheduleArgs

func TaskSchedulePtr(v *TaskScheduleArgs) TaskSchedulePtrInput {
	return (*taskSchedulePtrType)(v)
}

func (*taskSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskSchedule)(nil)).Elem()
}

func (i *taskSchedulePtrType) ToTaskSchedulePtrOutput() TaskSchedulePtrOutput {
	return i.ToTaskSchedulePtrOutputWithContext(context.Background())
}

func (i *taskSchedulePtrType) ToTaskSchedulePtrOutputWithContext(ctx context.Context) TaskSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSchedulePtrOutput)
}

type TaskScheduleOutput struct{ *pulumi.OutputState }

func (TaskScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSchedule)(nil)).Elem()
}

func (o TaskScheduleOutput) ToTaskScheduleOutput() TaskScheduleOutput {
	return o
}

func (o TaskScheduleOutput) ToTaskScheduleOutputWithContext(ctx context.Context) TaskScheduleOutput {
	return o
}

func (o TaskScheduleOutput) ToTaskSchedulePtrOutput() TaskSchedulePtrOutput {
	return o.ToTaskSchedulePtrOutputWithContext(context.Background())
}

func (o TaskScheduleOutput) ToTaskSchedulePtrOutputWithContext(ctx context.Context) TaskSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskSchedule) *TaskSchedule {
		return &v
	}).(TaskSchedulePtrOutput)
}

// Specifies the schedule you want your task to use for repeated executions. For more information, see [Schedule Expressions for Rules](https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html).
func (o TaskScheduleOutput) ScheduleExpression() pulumi.StringOutput {
	return o.ApplyT(func(v TaskSchedule) string { return v.ScheduleExpression }).(pulumi.StringOutput)
}

type TaskSchedulePtrOutput struct{ *pulumi.OutputState }

func (TaskSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskSchedule)(nil)).Elem()
}

func (o TaskSchedulePtrOutput) ToTaskSchedulePtrOutput() TaskSchedulePtrOutput {
	return o
}

func (o TaskSchedulePtrOutput) ToTaskSchedulePtrOutputWithContext(ctx context.Context) TaskSchedulePtrOutput {
	return o
}

func (o TaskSchedulePtrOutput) Elem() TaskScheduleOutput {
	return o.ApplyT(func(v *TaskSchedule) TaskSchedule {
		if v != nil {
			return *v
		}
		var ret TaskSchedule
		return ret
	}).(TaskScheduleOutput)
}

// Specifies the schedule you want your task to use for repeated executions. For more information, see [Schedule Expressions for Rules](https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html).
func (o TaskSchedulePtrOutput) ScheduleExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskSchedule) *string {
		if v == nil {
			return nil
		}
		return &v.ScheduleExpression
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EfsLocationEc2ConfigInput)(nil)).Elem(), EfsLocationEc2ConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EfsLocationEc2ConfigPtrInput)(nil)).Elem(), EfsLocationEc2ConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FsxOpenZfsFileSystemProtocolInput)(nil)).Elem(), FsxOpenZfsFileSystemProtocolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FsxOpenZfsFileSystemProtocolPtrInput)(nil)).Elem(), FsxOpenZfsFileSystemProtocolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FsxOpenZfsFileSystemProtocolNfsInput)(nil)).Elem(), FsxOpenZfsFileSystemProtocolNfsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FsxOpenZfsFileSystemProtocolNfsPtrInput)(nil)).Elem(), FsxOpenZfsFileSystemProtocolNfsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FsxOpenZfsFileSystemProtocolNfsMountOptionsInput)(nil)).Elem(), FsxOpenZfsFileSystemProtocolNfsMountOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FsxOpenZfsFileSystemProtocolNfsMountOptionsPtrInput)(nil)).Elem(), FsxOpenZfsFileSystemProtocolNfsMountOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationHdfsNameNodeInput)(nil)).Elem(), LocationHdfsNameNodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationHdfsNameNodeArrayInput)(nil)).Elem(), LocationHdfsNameNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationHdfsQopConfigurationInput)(nil)).Elem(), LocationHdfsQopConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationHdfsQopConfigurationPtrInput)(nil)).Elem(), LocationHdfsQopConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationSmbMountOptionsInput)(nil)).Elem(), LocationSmbMountOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationSmbMountOptionsPtrInput)(nil)).Elem(), LocationSmbMountOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NfsLocationMountOptionsInput)(nil)).Elem(), NfsLocationMountOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NfsLocationMountOptionsPtrInput)(nil)).Elem(), NfsLocationMountOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NfsLocationOnPremConfigInput)(nil)).Elem(), NfsLocationOnPremConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NfsLocationOnPremConfigPtrInput)(nil)).Elem(), NfsLocationOnPremConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3LocationS3ConfigInput)(nil)).Elem(), S3LocationS3ConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3LocationS3ConfigPtrInput)(nil)).Elem(), S3LocationS3ConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskExcludesInput)(nil)).Elem(), TaskExcludesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskExcludesPtrInput)(nil)).Elem(), TaskExcludesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskOptionsInput)(nil)).Elem(), TaskOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskOptionsPtrInput)(nil)).Elem(), TaskOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskScheduleInput)(nil)).Elem(), TaskScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskSchedulePtrInput)(nil)).Elem(), TaskScheduleArgs{})
	pulumi.RegisterOutputType(EfsLocationEc2ConfigOutput{})
	pulumi.RegisterOutputType(EfsLocationEc2ConfigPtrOutput{})
	pulumi.RegisterOutputType(FsxOpenZfsFileSystemProtocolOutput{})
	pulumi.RegisterOutputType(FsxOpenZfsFileSystemProtocolPtrOutput{})
	pulumi.RegisterOutputType(FsxOpenZfsFileSystemProtocolNfsOutput{})
	pulumi.RegisterOutputType(FsxOpenZfsFileSystemProtocolNfsPtrOutput{})
	pulumi.RegisterOutputType(FsxOpenZfsFileSystemProtocolNfsMountOptionsOutput{})
	pulumi.RegisterOutputType(FsxOpenZfsFileSystemProtocolNfsMountOptionsPtrOutput{})
	pulumi.RegisterOutputType(LocationHdfsNameNodeOutput{})
	pulumi.RegisterOutputType(LocationHdfsNameNodeArrayOutput{})
	pulumi.RegisterOutputType(LocationHdfsQopConfigurationOutput{})
	pulumi.RegisterOutputType(LocationHdfsQopConfigurationPtrOutput{})
	pulumi.RegisterOutputType(LocationSmbMountOptionsOutput{})
	pulumi.RegisterOutputType(LocationSmbMountOptionsPtrOutput{})
	pulumi.RegisterOutputType(NfsLocationMountOptionsOutput{})
	pulumi.RegisterOutputType(NfsLocationMountOptionsPtrOutput{})
	pulumi.RegisterOutputType(NfsLocationOnPremConfigOutput{})
	pulumi.RegisterOutputType(NfsLocationOnPremConfigPtrOutput{})
	pulumi.RegisterOutputType(S3LocationS3ConfigOutput{})
	pulumi.RegisterOutputType(S3LocationS3ConfigPtrOutput{})
	pulumi.RegisterOutputType(TaskExcludesOutput{})
	pulumi.RegisterOutputType(TaskExcludesPtrOutput{})
	pulumi.RegisterOutputType(TaskOptionsOutput{})
	pulumi.RegisterOutputType(TaskOptionsPtrOutput{})
	pulumi.RegisterOutputType(TaskScheduleOutput{})
	pulumi.RegisterOutputType(TaskSchedulePtrOutput{})
}
