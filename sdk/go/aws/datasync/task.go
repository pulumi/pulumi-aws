// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasync

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Task struct {
	pulumi.CustomResourceState

	Arn                    pulumi.StringOutput    `pulumi:"arn"`
	CloudwatchLogGroupArn  pulumi.StringPtrOutput `pulumi:"cloudwatchLogGroupArn"`
	DestinationLocationArn pulumi.StringOutput    `pulumi:"destinationLocationArn"`
	Excludes               TaskExcludesPtrOutput  `pulumi:"excludes"`
	Includes               TaskIncludesPtrOutput  `pulumi:"includes"`
	Name                   pulumi.StringOutput    `pulumi:"name"`
	Options                TaskOptionsPtrOutput   `pulumi:"options"`
	Schedule               TaskSchedulePtrOutput  `pulumi:"schedule"`
	SourceLocationArn      pulumi.StringOutput    `pulumi:"sourceLocationArn"`
	Tags                   pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll                pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewTask registers a new resource with the given unique name, arguments, and options.
func NewTask(ctx *pulumi.Context,
	name string, args *TaskArgs, opts ...pulumi.ResourceOption) (*Task, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationLocationArn == nil {
		return nil, errors.New("invalid value for required argument 'DestinationLocationArn'")
	}
	if args.SourceLocationArn == nil {
		return nil, errors.New("invalid value for required argument 'SourceLocationArn'")
	}
	var resource Task
	err := ctx.RegisterResource("aws:datasync/task:Task", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTask gets an existing Task resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TaskState, opts ...pulumi.ResourceOption) (*Task, error) {
	var resource Task
	err := ctx.ReadResource("aws:datasync/task:Task", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Task resources.
type taskState struct {
	Arn                    *string           `pulumi:"arn"`
	CloudwatchLogGroupArn  *string           `pulumi:"cloudwatchLogGroupArn"`
	DestinationLocationArn *string           `pulumi:"destinationLocationArn"`
	Excludes               *TaskExcludes     `pulumi:"excludes"`
	Includes               *TaskIncludes     `pulumi:"includes"`
	Name                   *string           `pulumi:"name"`
	Options                *TaskOptions      `pulumi:"options"`
	Schedule               *TaskSchedule     `pulumi:"schedule"`
	SourceLocationArn      *string           `pulumi:"sourceLocationArn"`
	Tags                   map[string]string `pulumi:"tags"`
	TagsAll                map[string]string `pulumi:"tagsAll"`
}

type TaskState struct {
	Arn                    pulumi.StringPtrInput
	CloudwatchLogGroupArn  pulumi.StringPtrInput
	DestinationLocationArn pulumi.StringPtrInput
	Excludes               TaskExcludesPtrInput
	Includes               TaskIncludesPtrInput
	Name                   pulumi.StringPtrInput
	Options                TaskOptionsPtrInput
	Schedule               TaskSchedulePtrInput
	SourceLocationArn      pulumi.StringPtrInput
	Tags                   pulumi.StringMapInput
	TagsAll                pulumi.StringMapInput
}

func (TaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*taskState)(nil)).Elem()
}

type taskArgs struct {
	CloudwatchLogGroupArn  *string           `pulumi:"cloudwatchLogGroupArn"`
	DestinationLocationArn string            `pulumi:"destinationLocationArn"`
	Excludes               *TaskExcludes     `pulumi:"excludes"`
	Includes               *TaskIncludes     `pulumi:"includes"`
	Name                   *string           `pulumi:"name"`
	Options                *TaskOptions      `pulumi:"options"`
	Schedule               *TaskSchedule     `pulumi:"schedule"`
	SourceLocationArn      string            `pulumi:"sourceLocationArn"`
	Tags                   map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Task resource.
type TaskArgs struct {
	CloudwatchLogGroupArn  pulumi.StringPtrInput
	DestinationLocationArn pulumi.StringInput
	Excludes               TaskExcludesPtrInput
	Includes               TaskIncludesPtrInput
	Name                   pulumi.StringPtrInput
	Options                TaskOptionsPtrInput
	Schedule               TaskSchedulePtrInput
	SourceLocationArn      pulumi.StringInput
	Tags                   pulumi.StringMapInput
}

func (TaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*taskArgs)(nil)).Elem()
}

type TaskInput interface {
	pulumi.Input

	ToTaskOutput() TaskOutput
	ToTaskOutputWithContext(ctx context.Context) TaskOutput
}

func (*Task) ElementType() reflect.Type {
	return reflect.TypeOf((**Task)(nil)).Elem()
}

func (i *Task) ToTaskOutput() TaskOutput {
	return i.ToTaskOutputWithContext(context.Background())
}

func (i *Task) ToTaskOutputWithContext(ctx context.Context) TaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskOutput)
}

// TaskArrayInput is an input type that accepts TaskArray and TaskArrayOutput values.
// You can construct a concrete instance of `TaskArrayInput` via:
//
//	TaskArray{ TaskArgs{...} }
type TaskArrayInput interface {
	pulumi.Input

	ToTaskArrayOutput() TaskArrayOutput
	ToTaskArrayOutputWithContext(context.Context) TaskArrayOutput
}

type TaskArray []TaskInput

func (TaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Task)(nil)).Elem()
}

func (i TaskArray) ToTaskArrayOutput() TaskArrayOutput {
	return i.ToTaskArrayOutputWithContext(context.Background())
}

func (i TaskArray) ToTaskArrayOutputWithContext(ctx context.Context) TaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskArrayOutput)
}

// TaskMapInput is an input type that accepts TaskMap and TaskMapOutput values.
// You can construct a concrete instance of `TaskMapInput` via:
//
//	TaskMap{ "key": TaskArgs{...} }
type TaskMapInput interface {
	pulumi.Input

	ToTaskMapOutput() TaskMapOutput
	ToTaskMapOutputWithContext(context.Context) TaskMapOutput
}

type TaskMap map[string]TaskInput

func (TaskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Task)(nil)).Elem()
}

func (i TaskMap) ToTaskMapOutput() TaskMapOutput {
	return i.ToTaskMapOutputWithContext(context.Background())
}

func (i TaskMap) ToTaskMapOutputWithContext(ctx context.Context) TaskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskMapOutput)
}

type TaskOutput struct{ *pulumi.OutputState }

func (TaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Task)(nil)).Elem()
}

func (o TaskOutput) ToTaskOutput() TaskOutput {
	return o
}

func (o TaskOutput) ToTaskOutputWithContext(ctx context.Context) TaskOutput {
	return o
}

func (o TaskOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o TaskOutput) CloudwatchLogGroupArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Task) pulumi.StringPtrOutput { return v.CloudwatchLogGroupArn }).(pulumi.StringPtrOutput)
}

func (o TaskOutput) DestinationLocationArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.DestinationLocationArn }).(pulumi.StringOutput)
}

func (o TaskOutput) Excludes() TaskExcludesPtrOutput {
	return o.ApplyT(func(v *Task) TaskExcludesPtrOutput { return v.Excludes }).(TaskExcludesPtrOutput)
}

func (o TaskOutput) Includes() TaskIncludesPtrOutput {
	return o.ApplyT(func(v *Task) TaskIncludesPtrOutput { return v.Includes }).(TaskIncludesPtrOutput)
}

func (o TaskOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o TaskOutput) Options() TaskOptionsPtrOutput {
	return o.ApplyT(func(v *Task) TaskOptionsPtrOutput { return v.Options }).(TaskOptionsPtrOutput)
}

func (o TaskOutput) Schedule() TaskSchedulePtrOutput {
	return o.ApplyT(func(v *Task) TaskSchedulePtrOutput { return v.Schedule }).(TaskSchedulePtrOutput)
}

func (o TaskOutput) SourceLocationArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.SourceLocationArn }).(pulumi.StringOutput)
}

func (o TaskOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Task) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o TaskOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Task) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type TaskArrayOutput struct{ *pulumi.OutputState }

func (TaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Task)(nil)).Elem()
}

func (o TaskArrayOutput) ToTaskArrayOutput() TaskArrayOutput {
	return o
}

func (o TaskArrayOutput) ToTaskArrayOutputWithContext(ctx context.Context) TaskArrayOutput {
	return o
}

func (o TaskArrayOutput) Index(i pulumi.IntInput) TaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Task {
		return vs[0].([]*Task)[vs[1].(int)]
	}).(TaskOutput)
}

type TaskMapOutput struct{ *pulumi.OutputState }

func (TaskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Task)(nil)).Elem()
}

func (o TaskMapOutput) ToTaskMapOutput() TaskMapOutput {
	return o
}

func (o TaskMapOutput) ToTaskMapOutputWithContext(ctx context.Context) TaskMapOutput {
	return o
}

func (o TaskMapOutput) MapIndex(k pulumi.StringInput) TaskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Task {
		return vs[0].(map[string]*Task)[vs[1].(string)]
	}).(TaskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TaskInput)(nil)).Elem(), &Task{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskArrayInput)(nil)).Elem(), TaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskMapInput)(nil)).Elem(), TaskMap{})
	pulumi.RegisterOutputType(TaskOutput{})
	pulumi.RegisterOutputType(TaskArrayOutput{})
	pulumi.RegisterOutputType(TaskMapOutput{})
}
