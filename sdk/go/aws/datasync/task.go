// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasync

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an AWS DataSync Task, which represents a configuration for synchronization. Starting an execution of these DataSync Tasks (actually synchronizing files) is performed outside of this resource.
//
// ## Example Usage
// ### With Scheduling
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws"
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/datasync"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datasync.NewTask(ctx, "example", &datasync.TaskArgs{
//				DestinationLocationArn: pulumi.Any(aws_datasync_location_s3.Destination.Arn),
//				SourceLocationArn:      pulumi.Any(aws_datasync_location_nfs.Source.Arn),
//				Schedule: &datasync.TaskScheduleArgs{
//					ScheduleExpression: pulumi.String("cron(0 12 ? * SUN,WED *)"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### With Filtering
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws"
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/datasync"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datasync.NewTask(ctx, "example", &datasync.TaskArgs{
//				DestinationLocationArn: pulumi.Any(aws_datasync_location_s3.Destination.Arn),
//				SourceLocationArn:      pulumi.Any(aws_datasync_location_nfs.Source.Arn),
//				Excludes: &datasync.TaskExcludesArgs{
//					FilterType: pulumi.String("SIMPLE_PATTERN"),
//					Value:      pulumi.String("/folder1|/folder2"),
//				},
//				Includes: &datasync.TaskIncludesArgs{
//					FilterType: pulumi.String("SIMPLE_PATTERN"),
//					Value:      pulumi.String("/folder1|/folder2"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// `aws_datasync_task` can be imported by using the DataSync Task Amazon Resource Name (ARN), e.g.,
//
// ```sh
//
//	$ pulumi import aws:datasync/task:Task example arn:aws:datasync:us-east-1:123456789012:task/task-12345678901234567
//
// ```
type Task struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the DataSync Task.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Amazon Resource Name (ARN) of the CloudWatch Log Group that is used to monitor and log events in the sync task.
	CloudwatchLogGroupArn pulumi.StringPtrOutput `pulumi:"cloudwatchLogGroupArn"`
	// Amazon Resource Name (ARN) of destination DataSync Location.
	DestinationLocationArn pulumi.StringOutput `pulumi:"destinationLocationArn"`
	// Filter rules that determines which files to exclude from a task.
	Excludes TaskExcludesPtrOutput `pulumi:"excludes"`
	// Filter rules that determines which files to include in a task.
	Includes TaskIncludesPtrOutput `pulumi:"includes"`
	// Name of the DataSync Task.
	Name pulumi.StringOutput `pulumi:"name"`
	// Configuration block containing option that controls the default behavior when you start an execution of this DataSync Task. For each individual task execution, you can override these options by specifying an overriding configuration in those executions.
	Options TaskOptionsPtrOutput `pulumi:"options"`
	// Specifies a schedule used to periodically transfer files from a source to a destination location.
	Schedule TaskSchedulePtrOutput `pulumi:"schedule"`
	// Amazon Resource Name (ARN) of source DataSync Location.
	SourceLocationArn pulumi.StringOutput `pulumi:"sourceLocationArn"`
	// Key-value pairs of resource tags to assign to the DataSync Task. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewTask registers a new resource with the given unique name, arguments, and options.
func NewTask(ctx *pulumi.Context,
	name string, args *TaskArgs, opts ...pulumi.ResourceOption) (*Task, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationLocationArn == nil {
		return nil, errors.New("invalid value for required argument 'DestinationLocationArn'")
	}
	if args.SourceLocationArn == nil {
		return nil, errors.New("invalid value for required argument 'SourceLocationArn'")
	}
	var resource Task
	err := ctx.RegisterResource("aws:datasync/task:Task", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTask gets an existing Task resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TaskState, opts ...pulumi.ResourceOption) (*Task, error) {
	var resource Task
	err := ctx.ReadResource("aws:datasync/task:Task", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Task resources.
type taskState struct {
	// Amazon Resource Name (ARN) of the DataSync Task.
	Arn *string `pulumi:"arn"`
	// Amazon Resource Name (ARN) of the CloudWatch Log Group that is used to monitor and log events in the sync task.
	CloudwatchLogGroupArn *string `pulumi:"cloudwatchLogGroupArn"`
	// Amazon Resource Name (ARN) of destination DataSync Location.
	DestinationLocationArn *string `pulumi:"destinationLocationArn"`
	// Filter rules that determines which files to exclude from a task.
	Excludes *TaskExcludes `pulumi:"excludes"`
	// Filter rules that determines which files to include in a task.
	Includes *TaskIncludes `pulumi:"includes"`
	// Name of the DataSync Task.
	Name *string `pulumi:"name"`
	// Configuration block containing option that controls the default behavior when you start an execution of this DataSync Task. For each individual task execution, you can override these options by specifying an overriding configuration in those executions.
	Options *TaskOptions `pulumi:"options"`
	// Specifies a schedule used to periodically transfer files from a source to a destination location.
	Schedule *TaskSchedule `pulumi:"schedule"`
	// Amazon Resource Name (ARN) of source DataSync Location.
	SourceLocationArn *string `pulumi:"sourceLocationArn"`
	// Key-value pairs of resource tags to assign to the DataSync Task. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type TaskState struct {
	// Amazon Resource Name (ARN) of the DataSync Task.
	Arn pulumi.StringPtrInput
	// Amazon Resource Name (ARN) of the CloudWatch Log Group that is used to monitor and log events in the sync task.
	CloudwatchLogGroupArn pulumi.StringPtrInput
	// Amazon Resource Name (ARN) of destination DataSync Location.
	DestinationLocationArn pulumi.StringPtrInput
	// Filter rules that determines which files to exclude from a task.
	Excludes TaskExcludesPtrInput
	// Filter rules that determines which files to include in a task.
	Includes TaskIncludesPtrInput
	// Name of the DataSync Task.
	Name pulumi.StringPtrInput
	// Configuration block containing option that controls the default behavior when you start an execution of this DataSync Task. For each individual task execution, you can override these options by specifying an overriding configuration in those executions.
	Options TaskOptionsPtrInput
	// Specifies a schedule used to periodically transfer files from a source to a destination location.
	Schedule TaskSchedulePtrInput
	// Amazon Resource Name (ARN) of source DataSync Location.
	SourceLocationArn pulumi.StringPtrInput
	// Key-value pairs of resource tags to assign to the DataSync Task. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapInput
}

func (TaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*taskState)(nil)).Elem()
}

type taskArgs struct {
	// Amazon Resource Name (ARN) of the CloudWatch Log Group that is used to monitor and log events in the sync task.
	CloudwatchLogGroupArn *string `pulumi:"cloudwatchLogGroupArn"`
	// Amazon Resource Name (ARN) of destination DataSync Location.
	DestinationLocationArn string `pulumi:"destinationLocationArn"`
	// Filter rules that determines which files to exclude from a task.
	Excludes *TaskExcludes `pulumi:"excludes"`
	// Filter rules that determines which files to include in a task.
	Includes *TaskIncludes `pulumi:"includes"`
	// Name of the DataSync Task.
	Name *string `pulumi:"name"`
	// Configuration block containing option that controls the default behavior when you start an execution of this DataSync Task. For each individual task execution, you can override these options by specifying an overriding configuration in those executions.
	Options *TaskOptions `pulumi:"options"`
	// Specifies a schedule used to periodically transfer files from a source to a destination location.
	Schedule *TaskSchedule `pulumi:"schedule"`
	// Amazon Resource Name (ARN) of source DataSync Location.
	SourceLocationArn string `pulumi:"sourceLocationArn"`
	// Key-value pairs of resource tags to assign to the DataSync Task. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Task resource.
type TaskArgs struct {
	// Amazon Resource Name (ARN) of the CloudWatch Log Group that is used to monitor and log events in the sync task.
	CloudwatchLogGroupArn pulumi.StringPtrInput
	// Amazon Resource Name (ARN) of destination DataSync Location.
	DestinationLocationArn pulumi.StringInput
	// Filter rules that determines which files to exclude from a task.
	Excludes TaskExcludesPtrInput
	// Filter rules that determines which files to include in a task.
	Includes TaskIncludesPtrInput
	// Name of the DataSync Task.
	Name pulumi.StringPtrInput
	// Configuration block containing option that controls the default behavior when you start an execution of this DataSync Task. For each individual task execution, you can override these options by specifying an overriding configuration in those executions.
	Options TaskOptionsPtrInput
	// Specifies a schedule used to periodically transfer files from a source to a destination location.
	Schedule TaskSchedulePtrInput
	// Amazon Resource Name (ARN) of source DataSync Location.
	SourceLocationArn pulumi.StringInput
	// Key-value pairs of resource tags to assign to the DataSync Task. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
}

func (TaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*taskArgs)(nil)).Elem()
}

type TaskInput interface {
	pulumi.Input

	ToTaskOutput() TaskOutput
	ToTaskOutputWithContext(ctx context.Context) TaskOutput
}

func (*Task) ElementType() reflect.Type {
	return reflect.TypeOf((**Task)(nil)).Elem()
}

func (i *Task) ToTaskOutput() TaskOutput {
	return i.ToTaskOutputWithContext(context.Background())
}

func (i *Task) ToTaskOutputWithContext(ctx context.Context) TaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskOutput)
}

// TaskArrayInput is an input type that accepts TaskArray and TaskArrayOutput values.
// You can construct a concrete instance of `TaskArrayInput` via:
//
//	TaskArray{ TaskArgs{...} }
type TaskArrayInput interface {
	pulumi.Input

	ToTaskArrayOutput() TaskArrayOutput
	ToTaskArrayOutputWithContext(context.Context) TaskArrayOutput
}

type TaskArray []TaskInput

func (TaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Task)(nil)).Elem()
}

func (i TaskArray) ToTaskArrayOutput() TaskArrayOutput {
	return i.ToTaskArrayOutputWithContext(context.Background())
}

func (i TaskArray) ToTaskArrayOutputWithContext(ctx context.Context) TaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskArrayOutput)
}

// TaskMapInput is an input type that accepts TaskMap and TaskMapOutput values.
// You can construct a concrete instance of `TaskMapInput` via:
//
//	TaskMap{ "key": TaskArgs{...} }
type TaskMapInput interface {
	pulumi.Input

	ToTaskMapOutput() TaskMapOutput
	ToTaskMapOutputWithContext(context.Context) TaskMapOutput
}

type TaskMap map[string]TaskInput

func (TaskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Task)(nil)).Elem()
}

func (i TaskMap) ToTaskMapOutput() TaskMapOutput {
	return i.ToTaskMapOutputWithContext(context.Background())
}

func (i TaskMap) ToTaskMapOutputWithContext(ctx context.Context) TaskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskMapOutput)
}

type TaskOutput struct{ *pulumi.OutputState }

func (TaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Task)(nil)).Elem()
}

func (o TaskOutput) ToTaskOutput() TaskOutput {
	return o
}

func (o TaskOutput) ToTaskOutputWithContext(ctx context.Context) TaskOutput {
	return o
}

// Amazon Resource Name (ARN) of the DataSync Task.
func (o TaskOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Amazon Resource Name (ARN) of the CloudWatch Log Group that is used to monitor and log events in the sync task.
func (o TaskOutput) CloudwatchLogGroupArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Task) pulumi.StringPtrOutput { return v.CloudwatchLogGroupArn }).(pulumi.StringPtrOutput)
}

// Amazon Resource Name (ARN) of destination DataSync Location.
func (o TaskOutput) DestinationLocationArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.DestinationLocationArn }).(pulumi.StringOutput)
}

// Filter rules that determines which files to exclude from a task.
func (o TaskOutput) Excludes() TaskExcludesPtrOutput {
	return o.ApplyT(func(v *Task) TaskExcludesPtrOutput { return v.Excludes }).(TaskExcludesPtrOutput)
}

// Filter rules that determines which files to include in a task.
func (o TaskOutput) Includes() TaskIncludesPtrOutput {
	return o.ApplyT(func(v *Task) TaskIncludesPtrOutput { return v.Includes }).(TaskIncludesPtrOutput)
}

// Name of the DataSync Task.
func (o TaskOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Configuration block containing option that controls the default behavior when you start an execution of this DataSync Task. For each individual task execution, you can override these options by specifying an overriding configuration in those executions.
func (o TaskOutput) Options() TaskOptionsPtrOutput {
	return o.ApplyT(func(v *Task) TaskOptionsPtrOutput { return v.Options }).(TaskOptionsPtrOutput)
}

// Specifies a schedule used to periodically transfer files from a source to a destination location.
func (o TaskOutput) Schedule() TaskSchedulePtrOutput {
	return o.ApplyT(func(v *Task) TaskSchedulePtrOutput { return v.Schedule }).(TaskSchedulePtrOutput)
}

// Amazon Resource Name (ARN) of source DataSync Location.
func (o TaskOutput) SourceLocationArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.SourceLocationArn }).(pulumi.StringOutput)
}

// Key-value pairs of resource tags to assign to the DataSync Task. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o TaskOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Task) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o TaskOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Task) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type TaskArrayOutput struct{ *pulumi.OutputState }

func (TaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Task)(nil)).Elem()
}

func (o TaskArrayOutput) ToTaskArrayOutput() TaskArrayOutput {
	return o
}

func (o TaskArrayOutput) ToTaskArrayOutputWithContext(ctx context.Context) TaskArrayOutput {
	return o
}

func (o TaskArrayOutput) Index(i pulumi.IntInput) TaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Task {
		return vs[0].([]*Task)[vs[1].(int)]
	}).(TaskOutput)
}

type TaskMapOutput struct{ *pulumi.OutputState }

func (TaskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Task)(nil)).Elem()
}

func (o TaskMapOutput) ToTaskMapOutput() TaskMapOutput {
	return o
}

func (o TaskMapOutput) ToTaskMapOutputWithContext(ctx context.Context) TaskMapOutput {
	return o
}

func (o TaskMapOutput) MapIndex(k pulumi.StringInput) TaskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Task {
		return vs[0].(map[string]*Task)[vs[1].(string)]
	}).(TaskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TaskInput)(nil)).Elem(), &Task{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskArrayInput)(nil)).Elem(), TaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskMapInput)(nil)).Elem(), TaskMap{})
	pulumi.RegisterOutputType(TaskOutput{})
	pulumi.RegisterOutputType(TaskArrayOutput{})
	pulumi.RegisterOutputType(TaskMapOutput{})
}
