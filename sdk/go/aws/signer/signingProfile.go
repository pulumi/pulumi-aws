// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package signer

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a Signer Signing Profile. A signing profile contains information about the code signing configuration parameters that can be used by a given code signing user.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v3/go/aws/signer"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := signer.NewSigningProfile(ctx, "testSp", &signer.SigningProfileArgs{
// 			PlatformId: pulumi.String("AWSLambda-SHA384-ECDSA"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = signer.NewSigningProfile(ctx, "prodSp", &signer.SigningProfileArgs{
// 			NamePrefix: pulumi.String("prod_sp_"),
// 			PlatformId: pulumi.String("AWSLambda-SHA384-ECDSA"),
// 			SignatureValidityPeriod: &signer.SigningProfileSignatureValidityPeriodArgs{
// 				Type:  pulumi.String("YEARS"),
// 				Value: pulumi.Int(5),
// 			},
// 			Tags: pulumi.StringMap{
// 				"tag1": pulumi.String("value1"),
// 				"tag2": pulumi.String("value2"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Signer signing profiles can be imported using the `name`, e.g.
//
// ```sh
//  $ pulumi import aws:signer/signingProfile:SigningProfile test_signer_signing_profile test_sp_DdW3Mk1foYL88fajut4mTVFGpuwfd4ACO6ANL0D1uIj7lrn8adK
// ```
type SigningProfile struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) for the signing profile.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The name of the target signing profile.
	Name       pulumi.StringOutput    `pulumi:"name"`
	NamePrefix pulumi.StringPtrOutput `pulumi:"namePrefix"`
	// A human-readable name for the signing platform associated with the signing profile.
	PlatformDisplayName pulumi.StringOutput `pulumi:"platformDisplayName"`
	// The ID of the platform that is used by the target signing profile.
	PlatformId pulumi.StringOutput `pulumi:"platformId"`
	// Revocation information for a signing profile.
	RevocationRecords SigningProfileRevocationRecordArrayOutput `pulumi:"revocationRecords"`
	// The validity period for a signing job.
	SignatureValidityPeriod SigningProfileSignatureValidityPeriodOutput `pulumi:"signatureValidityPeriod"`
	// The status of the target signing profile.
	Status pulumi.StringOutput `pulumi:"status"`
	// A list of tags associated with the signing profile.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The current version of the signing profile.
	Version pulumi.StringOutput `pulumi:"version"`
	// The signing profile ARN, including the profile version.
	VersionArn pulumi.StringOutput `pulumi:"versionArn"`
}

// NewSigningProfile registers a new resource with the given unique name, arguments, and options.
func NewSigningProfile(ctx *pulumi.Context,
	name string, args *SigningProfileArgs, opts ...pulumi.ResourceOption) (*SigningProfile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PlatformId == nil {
		return nil, errors.New("invalid value for required argument 'PlatformId'")
	}
	var resource SigningProfile
	err := ctx.RegisterResource("aws:signer/signingProfile:SigningProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSigningProfile gets an existing SigningProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSigningProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SigningProfileState, opts ...pulumi.ResourceOption) (*SigningProfile, error) {
	var resource SigningProfile
	err := ctx.ReadResource("aws:signer/signingProfile:SigningProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SigningProfile resources.
type signingProfileState struct {
	// The Amazon Resource Name (ARN) for the signing profile.
	Arn *string `pulumi:"arn"`
	// The name of the target signing profile.
	Name       *string `pulumi:"name"`
	NamePrefix *string `pulumi:"namePrefix"`
	// A human-readable name for the signing platform associated with the signing profile.
	PlatformDisplayName *string `pulumi:"platformDisplayName"`
	// The ID of the platform that is used by the target signing profile.
	PlatformId *string `pulumi:"platformId"`
	// Revocation information for a signing profile.
	RevocationRecords []SigningProfileRevocationRecord `pulumi:"revocationRecords"`
	// The validity period for a signing job.
	SignatureValidityPeriod *SigningProfileSignatureValidityPeriod `pulumi:"signatureValidityPeriod"`
	// The status of the target signing profile.
	Status *string `pulumi:"status"`
	// A list of tags associated with the signing profile.
	Tags map[string]string `pulumi:"tags"`
	// The current version of the signing profile.
	Version *string `pulumi:"version"`
	// The signing profile ARN, including the profile version.
	VersionArn *string `pulumi:"versionArn"`
}

type SigningProfileState struct {
	// The Amazon Resource Name (ARN) for the signing profile.
	Arn pulumi.StringPtrInput
	// The name of the target signing profile.
	Name       pulumi.StringPtrInput
	NamePrefix pulumi.StringPtrInput
	// A human-readable name for the signing platform associated with the signing profile.
	PlatformDisplayName pulumi.StringPtrInput
	// The ID of the platform that is used by the target signing profile.
	PlatformId pulumi.StringPtrInput
	// Revocation information for a signing profile.
	RevocationRecords SigningProfileRevocationRecordArrayInput
	// The validity period for a signing job.
	SignatureValidityPeriod SigningProfileSignatureValidityPeriodPtrInput
	// The status of the target signing profile.
	Status pulumi.StringPtrInput
	// A list of tags associated with the signing profile.
	Tags pulumi.StringMapInput
	// The current version of the signing profile.
	Version pulumi.StringPtrInput
	// The signing profile ARN, including the profile version.
	VersionArn pulumi.StringPtrInput
}

func (SigningProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*signingProfileState)(nil)).Elem()
}

type signingProfileArgs struct {
	// The name of the target signing profile.
	Name       *string `pulumi:"name"`
	NamePrefix *string `pulumi:"namePrefix"`
	// The ID of the platform that is used by the target signing profile.
	PlatformId string `pulumi:"platformId"`
	// The validity period for a signing job.
	SignatureValidityPeriod *SigningProfileSignatureValidityPeriod `pulumi:"signatureValidityPeriod"`
	// A list of tags associated with the signing profile.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a SigningProfile resource.
type SigningProfileArgs struct {
	// The name of the target signing profile.
	Name       pulumi.StringPtrInput
	NamePrefix pulumi.StringPtrInput
	// The ID of the platform that is used by the target signing profile.
	PlatformId pulumi.StringInput
	// The validity period for a signing job.
	SignatureValidityPeriod SigningProfileSignatureValidityPeriodPtrInput
	// A list of tags associated with the signing profile.
	Tags pulumi.StringMapInput
}

func (SigningProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*signingProfileArgs)(nil)).Elem()
}

type SigningProfileInput interface {
	pulumi.Input

	ToSigningProfileOutput() SigningProfileOutput
	ToSigningProfileOutputWithContext(ctx context.Context) SigningProfileOutput
}

func (SigningProfile) ElementType() reflect.Type {
	return reflect.TypeOf((*SigningProfile)(nil)).Elem()
}

func (i SigningProfile) ToSigningProfileOutput() SigningProfileOutput {
	return i.ToSigningProfileOutputWithContext(context.Background())
}

func (i SigningProfile) ToSigningProfileOutputWithContext(ctx context.Context) SigningProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SigningProfileOutput)
}

type SigningProfileOutput struct {
	*pulumi.OutputState
}

func (SigningProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SigningProfileOutput)(nil)).Elem()
}

func (o SigningProfileOutput) ToSigningProfileOutput() SigningProfileOutput {
	return o
}

func (o SigningProfileOutput) ToSigningProfileOutputWithContext(ctx context.Context) SigningProfileOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(SigningProfileOutput{})
}
