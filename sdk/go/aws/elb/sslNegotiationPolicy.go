// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SslNegotiationPolicy struct {
	pulumi.CustomResourceState

	Attributes   SslNegotiationPolicyAttributeArrayOutput `pulumi:"attributes"`
	LbPort       pulumi.IntOutput                         `pulumi:"lbPort"`
	LoadBalancer pulumi.StringOutput                      `pulumi:"loadBalancer"`
	Name         pulumi.StringOutput                      `pulumi:"name"`
}

// NewSslNegotiationPolicy registers a new resource with the given unique name, arguments, and options.
func NewSslNegotiationPolicy(ctx *pulumi.Context,
	name string, args *SslNegotiationPolicyArgs, opts ...pulumi.ResourceOption) (*SslNegotiationPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LbPort == nil {
		return nil, errors.New("invalid value for required argument 'LbPort'")
	}
	if args.LoadBalancer == nil {
		return nil, errors.New("invalid value for required argument 'LoadBalancer'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("aws:elasticloadbalancing/sslNegotiationPolicy:SslNegotiationPolicy"),
		},
	})
	opts = append(opts, aliases)
	var resource SslNegotiationPolicy
	err := ctx.RegisterResource("aws:elb/sslNegotiationPolicy:SslNegotiationPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSslNegotiationPolicy gets an existing SslNegotiationPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSslNegotiationPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SslNegotiationPolicyState, opts ...pulumi.ResourceOption) (*SslNegotiationPolicy, error) {
	var resource SslNegotiationPolicy
	err := ctx.ReadResource("aws:elb/sslNegotiationPolicy:SslNegotiationPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SslNegotiationPolicy resources.
type sslNegotiationPolicyState struct {
	Attributes   []SslNegotiationPolicyAttribute `pulumi:"attributes"`
	LbPort       *int                            `pulumi:"lbPort"`
	LoadBalancer *string                         `pulumi:"loadBalancer"`
	Name         *string                         `pulumi:"name"`
}

type SslNegotiationPolicyState struct {
	Attributes   SslNegotiationPolicyAttributeArrayInput
	LbPort       pulumi.IntPtrInput
	LoadBalancer pulumi.StringPtrInput
	Name         pulumi.StringPtrInput
}

func (SslNegotiationPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*sslNegotiationPolicyState)(nil)).Elem()
}

type sslNegotiationPolicyArgs struct {
	Attributes   []SslNegotiationPolicyAttribute `pulumi:"attributes"`
	LbPort       int                             `pulumi:"lbPort"`
	LoadBalancer string                          `pulumi:"loadBalancer"`
	Name         *string                         `pulumi:"name"`
}

// The set of arguments for constructing a SslNegotiationPolicy resource.
type SslNegotiationPolicyArgs struct {
	Attributes   SslNegotiationPolicyAttributeArrayInput
	LbPort       pulumi.IntInput
	LoadBalancer pulumi.StringInput
	Name         pulumi.StringPtrInput
}

func (SslNegotiationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sslNegotiationPolicyArgs)(nil)).Elem()
}

type SslNegotiationPolicyInput interface {
	pulumi.Input

	ToSslNegotiationPolicyOutput() SslNegotiationPolicyOutput
	ToSslNegotiationPolicyOutputWithContext(ctx context.Context) SslNegotiationPolicyOutput
}

func (*SslNegotiationPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**SslNegotiationPolicy)(nil)).Elem()
}

func (i *SslNegotiationPolicy) ToSslNegotiationPolicyOutput() SslNegotiationPolicyOutput {
	return i.ToSslNegotiationPolicyOutputWithContext(context.Background())
}

func (i *SslNegotiationPolicy) ToSslNegotiationPolicyOutputWithContext(ctx context.Context) SslNegotiationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslNegotiationPolicyOutput)
}

// SslNegotiationPolicyArrayInput is an input type that accepts SslNegotiationPolicyArray and SslNegotiationPolicyArrayOutput values.
// You can construct a concrete instance of `SslNegotiationPolicyArrayInput` via:
//
//	SslNegotiationPolicyArray{ SslNegotiationPolicyArgs{...} }
type SslNegotiationPolicyArrayInput interface {
	pulumi.Input

	ToSslNegotiationPolicyArrayOutput() SslNegotiationPolicyArrayOutput
	ToSslNegotiationPolicyArrayOutputWithContext(context.Context) SslNegotiationPolicyArrayOutput
}

type SslNegotiationPolicyArray []SslNegotiationPolicyInput

func (SslNegotiationPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SslNegotiationPolicy)(nil)).Elem()
}

func (i SslNegotiationPolicyArray) ToSslNegotiationPolicyArrayOutput() SslNegotiationPolicyArrayOutput {
	return i.ToSslNegotiationPolicyArrayOutputWithContext(context.Background())
}

func (i SslNegotiationPolicyArray) ToSslNegotiationPolicyArrayOutputWithContext(ctx context.Context) SslNegotiationPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslNegotiationPolicyArrayOutput)
}

// SslNegotiationPolicyMapInput is an input type that accepts SslNegotiationPolicyMap and SslNegotiationPolicyMapOutput values.
// You can construct a concrete instance of `SslNegotiationPolicyMapInput` via:
//
//	SslNegotiationPolicyMap{ "key": SslNegotiationPolicyArgs{...} }
type SslNegotiationPolicyMapInput interface {
	pulumi.Input

	ToSslNegotiationPolicyMapOutput() SslNegotiationPolicyMapOutput
	ToSslNegotiationPolicyMapOutputWithContext(context.Context) SslNegotiationPolicyMapOutput
}

type SslNegotiationPolicyMap map[string]SslNegotiationPolicyInput

func (SslNegotiationPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SslNegotiationPolicy)(nil)).Elem()
}

func (i SslNegotiationPolicyMap) ToSslNegotiationPolicyMapOutput() SslNegotiationPolicyMapOutput {
	return i.ToSslNegotiationPolicyMapOutputWithContext(context.Background())
}

func (i SslNegotiationPolicyMap) ToSslNegotiationPolicyMapOutputWithContext(ctx context.Context) SslNegotiationPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslNegotiationPolicyMapOutput)
}

type SslNegotiationPolicyOutput struct{ *pulumi.OutputState }

func (SslNegotiationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SslNegotiationPolicy)(nil)).Elem()
}

func (o SslNegotiationPolicyOutput) ToSslNegotiationPolicyOutput() SslNegotiationPolicyOutput {
	return o
}

func (o SslNegotiationPolicyOutput) ToSslNegotiationPolicyOutputWithContext(ctx context.Context) SslNegotiationPolicyOutput {
	return o
}

func (o SslNegotiationPolicyOutput) Attributes() SslNegotiationPolicyAttributeArrayOutput {
	return o.ApplyT(func(v *SslNegotiationPolicy) SslNegotiationPolicyAttributeArrayOutput { return v.Attributes }).(SslNegotiationPolicyAttributeArrayOutput)
}

func (o SslNegotiationPolicyOutput) LbPort() pulumi.IntOutput {
	return o.ApplyT(func(v *SslNegotiationPolicy) pulumi.IntOutput { return v.LbPort }).(pulumi.IntOutput)
}

func (o SslNegotiationPolicyOutput) LoadBalancer() pulumi.StringOutput {
	return o.ApplyT(func(v *SslNegotiationPolicy) pulumi.StringOutput { return v.LoadBalancer }).(pulumi.StringOutput)
}

func (o SslNegotiationPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SslNegotiationPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type SslNegotiationPolicyArrayOutput struct{ *pulumi.OutputState }

func (SslNegotiationPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SslNegotiationPolicy)(nil)).Elem()
}

func (o SslNegotiationPolicyArrayOutput) ToSslNegotiationPolicyArrayOutput() SslNegotiationPolicyArrayOutput {
	return o
}

func (o SslNegotiationPolicyArrayOutput) ToSslNegotiationPolicyArrayOutputWithContext(ctx context.Context) SslNegotiationPolicyArrayOutput {
	return o
}

func (o SslNegotiationPolicyArrayOutput) Index(i pulumi.IntInput) SslNegotiationPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SslNegotiationPolicy {
		return vs[0].([]*SslNegotiationPolicy)[vs[1].(int)]
	}).(SslNegotiationPolicyOutput)
}

type SslNegotiationPolicyMapOutput struct{ *pulumi.OutputState }

func (SslNegotiationPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SslNegotiationPolicy)(nil)).Elem()
}

func (o SslNegotiationPolicyMapOutput) ToSslNegotiationPolicyMapOutput() SslNegotiationPolicyMapOutput {
	return o
}

func (o SslNegotiationPolicyMapOutput) ToSslNegotiationPolicyMapOutputWithContext(ctx context.Context) SslNegotiationPolicyMapOutput {
	return o
}

func (o SslNegotiationPolicyMapOutput) MapIndex(k pulumi.StringInput) SslNegotiationPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SslNegotiationPolicy {
		return vs[0].(map[string]*SslNegotiationPolicy)[vs[1].(string)]
	}).(SslNegotiationPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SslNegotiationPolicyInput)(nil)).Elem(), &SslNegotiationPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*SslNegotiationPolicyArrayInput)(nil)).Elem(), SslNegotiationPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SslNegotiationPolicyMapInput)(nil)).Elem(), SslNegotiationPolicyMap{})
	pulumi.RegisterOutputType(SslNegotiationPolicyOutput{})
	pulumi.RegisterOutputType(SslNegotiationPolicyArrayOutput{})
	pulumi.RegisterOutputType(SslNegotiationPolicyMapOutput{})
}
