// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ListenerPolicy struct {
	pulumi.CustomResourceState

	LoadBalancerName pulumi.StringOutput      `pulumi:"loadBalancerName"`
	LoadBalancerPort pulumi.IntOutput         `pulumi:"loadBalancerPort"`
	PolicyNames      pulumi.StringArrayOutput `pulumi:"policyNames"`
}

// NewListenerPolicy registers a new resource with the given unique name, arguments, and options.
func NewListenerPolicy(ctx *pulumi.Context,
	name string, args *ListenerPolicyArgs, opts ...pulumi.ResourceOption) (*ListenerPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LoadBalancerName == nil {
		return nil, errors.New("invalid value for required argument 'LoadBalancerName'")
	}
	if args.LoadBalancerPort == nil {
		return nil, errors.New("invalid value for required argument 'LoadBalancerPort'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("aws:elasticloadbalancing/listenerPolicy:ListenerPolicy"),
		},
	})
	opts = append(opts, aliases)
	var resource ListenerPolicy
	err := ctx.RegisterResource("aws:elb/listenerPolicy:ListenerPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetListenerPolicy gets an existing ListenerPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetListenerPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ListenerPolicyState, opts ...pulumi.ResourceOption) (*ListenerPolicy, error) {
	var resource ListenerPolicy
	err := ctx.ReadResource("aws:elb/listenerPolicy:ListenerPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ListenerPolicy resources.
type listenerPolicyState struct {
	LoadBalancerName *string  `pulumi:"loadBalancerName"`
	LoadBalancerPort *int     `pulumi:"loadBalancerPort"`
	PolicyNames      []string `pulumi:"policyNames"`
}

type ListenerPolicyState struct {
	LoadBalancerName pulumi.StringPtrInput
	LoadBalancerPort pulumi.IntPtrInput
	PolicyNames      pulumi.StringArrayInput
}

func (ListenerPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*listenerPolicyState)(nil)).Elem()
}

type listenerPolicyArgs struct {
	LoadBalancerName string   `pulumi:"loadBalancerName"`
	LoadBalancerPort int      `pulumi:"loadBalancerPort"`
	PolicyNames      []string `pulumi:"policyNames"`
}

// The set of arguments for constructing a ListenerPolicy resource.
type ListenerPolicyArgs struct {
	LoadBalancerName pulumi.StringInput
	LoadBalancerPort pulumi.IntInput
	PolicyNames      pulumi.StringArrayInput
}

func (ListenerPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*listenerPolicyArgs)(nil)).Elem()
}

type ListenerPolicyInput interface {
	pulumi.Input

	ToListenerPolicyOutput() ListenerPolicyOutput
	ToListenerPolicyOutputWithContext(ctx context.Context) ListenerPolicyOutput
}

func (*ListenerPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ListenerPolicy)(nil)).Elem()
}

func (i *ListenerPolicy) ToListenerPolicyOutput() ListenerPolicyOutput {
	return i.ToListenerPolicyOutputWithContext(context.Background())
}

func (i *ListenerPolicy) ToListenerPolicyOutputWithContext(ctx context.Context) ListenerPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerPolicyOutput)
}

// ListenerPolicyArrayInput is an input type that accepts ListenerPolicyArray and ListenerPolicyArrayOutput values.
// You can construct a concrete instance of `ListenerPolicyArrayInput` via:
//
//	ListenerPolicyArray{ ListenerPolicyArgs{...} }
type ListenerPolicyArrayInput interface {
	pulumi.Input

	ToListenerPolicyArrayOutput() ListenerPolicyArrayOutput
	ToListenerPolicyArrayOutputWithContext(context.Context) ListenerPolicyArrayOutput
}

type ListenerPolicyArray []ListenerPolicyInput

func (ListenerPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ListenerPolicy)(nil)).Elem()
}

func (i ListenerPolicyArray) ToListenerPolicyArrayOutput() ListenerPolicyArrayOutput {
	return i.ToListenerPolicyArrayOutputWithContext(context.Background())
}

func (i ListenerPolicyArray) ToListenerPolicyArrayOutputWithContext(ctx context.Context) ListenerPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerPolicyArrayOutput)
}

// ListenerPolicyMapInput is an input type that accepts ListenerPolicyMap and ListenerPolicyMapOutput values.
// You can construct a concrete instance of `ListenerPolicyMapInput` via:
//
//	ListenerPolicyMap{ "key": ListenerPolicyArgs{...} }
type ListenerPolicyMapInput interface {
	pulumi.Input

	ToListenerPolicyMapOutput() ListenerPolicyMapOutput
	ToListenerPolicyMapOutputWithContext(context.Context) ListenerPolicyMapOutput
}

type ListenerPolicyMap map[string]ListenerPolicyInput

func (ListenerPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ListenerPolicy)(nil)).Elem()
}

func (i ListenerPolicyMap) ToListenerPolicyMapOutput() ListenerPolicyMapOutput {
	return i.ToListenerPolicyMapOutputWithContext(context.Background())
}

func (i ListenerPolicyMap) ToListenerPolicyMapOutputWithContext(ctx context.Context) ListenerPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerPolicyMapOutput)
}

type ListenerPolicyOutput struct{ *pulumi.OutputState }

func (ListenerPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ListenerPolicy)(nil)).Elem()
}

func (o ListenerPolicyOutput) ToListenerPolicyOutput() ListenerPolicyOutput {
	return o
}

func (o ListenerPolicyOutput) ToListenerPolicyOutputWithContext(ctx context.Context) ListenerPolicyOutput {
	return o
}

func (o ListenerPolicyOutput) LoadBalancerName() pulumi.StringOutput {
	return o.ApplyT(func(v *ListenerPolicy) pulumi.StringOutput { return v.LoadBalancerName }).(pulumi.StringOutput)
}

func (o ListenerPolicyOutput) LoadBalancerPort() pulumi.IntOutput {
	return o.ApplyT(func(v *ListenerPolicy) pulumi.IntOutput { return v.LoadBalancerPort }).(pulumi.IntOutput)
}

func (o ListenerPolicyOutput) PolicyNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ListenerPolicy) pulumi.StringArrayOutput { return v.PolicyNames }).(pulumi.StringArrayOutput)
}

type ListenerPolicyArrayOutput struct{ *pulumi.OutputState }

func (ListenerPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ListenerPolicy)(nil)).Elem()
}

func (o ListenerPolicyArrayOutput) ToListenerPolicyArrayOutput() ListenerPolicyArrayOutput {
	return o
}

func (o ListenerPolicyArrayOutput) ToListenerPolicyArrayOutputWithContext(ctx context.Context) ListenerPolicyArrayOutput {
	return o
}

func (o ListenerPolicyArrayOutput) Index(i pulumi.IntInput) ListenerPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ListenerPolicy {
		return vs[0].([]*ListenerPolicy)[vs[1].(int)]
	}).(ListenerPolicyOutput)
}

type ListenerPolicyMapOutput struct{ *pulumi.OutputState }

func (ListenerPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ListenerPolicy)(nil)).Elem()
}

func (o ListenerPolicyMapOutput) ToListenerPolicyMapOutput() ListenerPolicyMapOutput {
	return o
}

func (o ListenerPolicyMapOutput) ToListenerPolicyMapOutputWithContext(ctx context.Context) ListenerPolicyMapOutput {
	return o
}

func (o ListenerPolicyMapOutput) MapIndex(k pulumi.StringInput) ListenerPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ListenerPolicy {
		return vs[0].(map[string]*ListenerPolicy)[vs[1].(string)]
	}).(ListenerPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerPolicyInput)(nil)).Elem(), &ListenerPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerPolicyArrayInput)(nil)).Elem(), ListenerPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerPolicyMapInput)(nil)).Elem(), ListenerPolicyMap{})
	pulumi.RegisterOutputType(ListenerPolicyOutput{})
	pulumi.RegisterOutputType(ListenerPolicyArrayOutput{})
	pulumi.RegisterOutputType(ListenerPolicyMapOutput{})
}
