// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package elb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides information about a "classic" Elastic Load Balancer (ELB).
// See `LB` Data Source if you are looking for "v2"
// Application Load Balancer (ALB) or Network Load Balancer (NLB).
//
// This data source can prove useful when a module accepts an LB as an input
// variable and needs to, for example, determine the security groups associated
// with it, etc.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/elb"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		cfg := config.New(ctx, "")
// 		lbName := ""
// 		if param := cfg.Get("lbName"); param != "" {
// 			lbName = param
// 		}
// 		_, err := elb.LookupLoadBalancer(ctx, &elb.LookupLoadBalancerArgs{
// 			Name: lbName,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupLoadBalancer(ctx *pulumi.Context, args *LookupLoadBalancerArgs, opts ...pulumi.InvokeOption) (*LookupLoadBalancerResult, error) {
	var rv LookupLoadBalancerResult
	err := ctx.Invoke("aws:elb/getLoadBalancer:getLoadBalancer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLoadBalancer.
type LookupLoadBalancerArgs struct {
	// The unique name of the load balancer.
	Name string            `pulumi:"name"`
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getLoadBalancer.
type LookupLoadBalancerResult struct {
	AccessLogs                GetLoadBalancerAccessLogs  `pulumi:"accessLogs"`
	Arn                       string                     `pulumi:"arn"`
	AvailabilityZones         []string                   `pulumi:"availabilityZones"`
	ConnectionDraining        bool                       `pulumi:"connectionDraining"`
	ConnectionDrainingTimeout int                        `pulumi:"connectionDrainingTimeout"`
	CrossZoneLoadBalancing    bool                       `pulumi:"crossZoneLoadBalancing"`
	DnsName                   string                     `pulumi:"dnsName"`
	HealthCheck               GetLoadBalancerHealthCheck `pulumi:"healthCheck"`
	// The provider-assigned unique ID for this managed resource.
	Id                    string                    `pulumi:"id"`
	IdleTimeout           int                       `pulumi:"idleTimeout"`
	Instances             []string                  `pulumi:"instances"`
	Internal              bool                      `pulumi:"internal"`
	Listeners             []GetLoadBalancerListener `pulumi:"listeners"`
	Name                  string                    `pulumi:"name"`
	SecurityGroups        []string                  `pulumi:"securityGroups"`
	SourceSecurityGroup   string                    `pulumi:"sourceSecurityGroup"`
	SourceSecurityGroupId string                    `pulumi:"sourceSecurityGroupId"`
	Subnets               []string                  `pulumi:"subnets"`
	Tags                  map[string]string         `pulumi:"tags"`
	ZoneId                string                    `pulumi:"zoneId"`
}

func LookupLoadBalancerOutput(ctx *pulumi.Context, args LookupLoadBalancerOutputArgs, opts ...pulumi.InvokeOption) LookupLoadBalancerResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupLoadBalancerResult, error) {
			args := v.(LookupLoadBalancerArgs)
			r, err := LookupLoadBalancer(ctx, &args, opts...)
			return *r, err
		}).(LookupLoadBalancerResultOutput)
}

// A collection of arguments for invoking getLoadBalancer.
type LookupLoadBalancerOutputArgs struct {
	// The unique name of the load balancer.
	Name pulumi.StringInput    `pulumi:"name"`
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (LookupLoadBalancerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLoadBalancerArgs)(nil)).Elem()
}

// A collection of values returned by getLoadBalancer.
type LookupLoadBalancerResultOutput struct{ *pulumi.OutputState }

func (LookupLoadBalancerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLoadBalancerResult)(nil)).Elem()
}

func (o LookupLoadBalancerResultOutput) ToLookupLoadBalancerResultOutput() LookupLoadBalancerResultOutput {
	return o
}

func (o LookupLoadBalancerResultOutput) ToLookupLoadBalancerResultOutputWithContext(ctx context.Context) LookupLoadBalancerResultOutput {
	return o
}

func (o LookupLoadBalancerResultOutput) AccessLogs() GetLoadBalancerAccessLogsOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) GetLoadBalancerAccessLogs { return v.AccessLogs }).(GetLoadBalancerAccessLogsOutput)
}

func (o LookupLoadBalancerResultOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.Arn }).(pulumi.StringOutput)
}

func (o LookupLoadBalancerResultOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) []string { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

func (o LookupLoadBalancerResultOutput) ConnectionDraining() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) bool { return v.ConnectionDraining }).(pulumi.BoolOutput)
}

func (o LookupLoadBalancerResultOutput) ConnectionDrainingTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) int { return v.ConnectionDrainingTimeout }).(pulumi.IntOutput)
}

func (o LookupLoadBalancerResultOutput) CrossZoneLoadBalancing() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) bool { return v.CrossZoneLoadBalancing }).(pulumi.BoolOutput)
}

func (o LookupLoadBalancerResultOutput) DnsName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.DnsName }).(pulumi.StringOutput)
}

func (o LookupLoadBalancerResultOutput) HealthCheck() GetLoadBalancerHealthCheckOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) GetLoadBalancerHealthCheck { return v.HealthCheck }).(GetLoadBalancerHealthCheckOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupLoadBalancerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupLoadBalancerResultOutput) IdleTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) int { return v.IdleTimeout }).(pulumi.IntOutput)
}

func (o LookupLoadBalancerResultOutput) Instances() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) []string { return v.Instances }).(pulumi.StringArrayOutput)
}

func (o LookupLoadBalancerResultOutput) Internal() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) bool { return v.Internal }).(pulumi.BoolOutput)
}

func (o LookupLoadBalancerResultOutput) Listeners() GetLoadBalancerListenerArrayOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) []GetLoadBalancerListener { return v.Listeners }).(GetLoadBalancerListenerArrayOutput)
}

func (o LookupLoadBalancerResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupLoadBalancerResultOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) []string { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

func (o LookupLoadBalancerResultOutput) SourceSecurityGroup() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.SourceSecurityGroup }).(pulumi.StringOutput)
}

func (o LookupLoadBalancerResultOutput) SourceSecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.SourceSecurityGroupId }).(pulumi.StringOutput)
}

func (o LookupLoadBalancerResultOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

func (o LookupLoadBalancerResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func (o LookupLoadBalancerResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLoadBalancerResultOutput{})
}
