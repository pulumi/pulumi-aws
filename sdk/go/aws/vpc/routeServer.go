// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource for managing a VPC (Virtual Private Cloud) Route Server.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vpc.NewRouteServer(ctx, "test", &vpc.RouteServerArgs{
//				AmazonSideAsn: pulumi.Int(65534),
//				Tags: pulumi.StringMap{
//					"Name": pulumi.String("Test"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Persist Route and SNS Notification
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vpc.NewRouteServer(ctx, "test", &vpc.RouteServerArgs{
//				AmazonSideAsn:           pulumi.Int(65534),
//				PersistRoutes:           pulumi.String("enable"),
//				PersistRoutesDuration:   pulumi.Int(2),
//				SnsNotificationsEnabled: pulumi.Bool(true),
//				Tags: pulumi.StringMap{
//					"Name": pulumi.String("Main Route Server"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import VPC (Virtual Private Cloud) Route Server using the `route_server_id`. For example:
//
// ```sh
// $ pulumi import aws:vpc/routeServer:RouteServer example rs-12345678
// ```
type RouteServer struct {
	pulumi.CustomResourceState

	// The Border Gateway Protocol (BGP) Autonomous System Number (ASN) for the appliance. Valid values are from 1 to 4294967295.
	//
	// The following arguments are optional:
	AmazonSideAsn pulumi.IntOutput `pulumi:"amazonSideAsn"`
	// The ARN of the route server.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Indicates whether routes should be persisted after all BGP sessions are terminated. Valid values are `enable`, `disable`, `reset`
	PersistRoutes pulumi.StringOutput `pulumi:"persistRoutes"`
	// The number of minutes a route server will wait after BGP is re-established to unpersist the routes in the FIB and RIB. Value must be in the range of 1-5. Required if `persistRoutes` is enabled.
	PersistRoutesDuration pulumi.IntPtrOutput `pulumi:"persistRoutesDuration"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
	// The unique identifier of the route server.
	RouteServerId pulumi.StringOutput `pulumi:"routeServerId"`
	// Indicates whether SNS notifications should be enabled for route server events. Enabling SNS notifications persists BGP status changes to an SNS topic provisioned by AWS`.
	SnsNotificationsEnabled pulumi.BoolOutput `pulumi:"snsNotificationsEnabled"`
	// The ARN of the SNS topic where notifications are published.
	SnsTopicArn pulumi.StringOutput `pulumi:"snsTopicArn"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll  pulumi.StringMapOutput       `pulumi:"tagsAll"`
	Timeouts RouteServerTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewRouteServer registers a new resource with the given unique name, arguments, and options.
func NewRouteServer(ctx *pulumi.Context,
	name string, args *RouteServerArgs, opts ...pulumi.ResourceOption) (*RouteServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AmazonSideAsn == nil {
		return nil, errors.New("invalid value for required argument 'AmazonSideAsn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouteServer
	err := ctx.RegisterResource("aws:vpc/routeServer:RouteServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteServer gets an existing RouteServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteServerState, opts ...pulumi.ResourceOption) (*RouteServer, error) {
	var resource RouteServer
	err := ctx.ReadResource("aws:vpc/routeServer:RouteServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteServer resources.
type routeServerState struct {
	// The Border Gateway Protocol (BGP) Autonomous System Number (ASN) for the appliance. Valid values are from 1 to 4294967295.
	//
	// The following arguments are optional:
	AmazonSideAsn *int `pulumi:"amazonSideAsn"`
	// The ARN of the route server.
	Arn *string `pulumi:"arn"`
	// Indicates whether routes should be persisted after all BGP sessions are terminated. Valid values are `enable`, `disable`, `reset`
	PersistRoutes *string `pulumi:"persistRoutes"`
	// The number of minutes a route server will wait after BGP is re-established to unpersist the routes in the FIB and RIB. Value must be in the range of 1-5. Required if `persistRoutes` is enabled.
	PersistRoutesDuration *int `pulumi:"persistRoutesDuration"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// The unique identifier of the route server.
	RouteServerId *string `pulumi:"routeServerId"`
	// Indicates whether SNS notifications should be enabled for route server events. Enabling SNS notifications persists BGP status changes to an SNS topic provisioned by AWS`.
	SnsNotificationsEnabled *bool `pulumi:"snsNotificationsEnabled"`
	// The ARN of the SNS topic where notifications are published.
	SnsTopicArn *string `pulumi:"snsTopicArn"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll  map[string]string    `pulumi:"tagsAll"`
	Timeouts *RouteServerTimeouts `pulumi:"timeouts"`
}

type RouteServerState struct {
	// The Border Gateway Protocol (BGP) Autonomous System Number (ASN) for the appliance. Valid values are from 1 to 4294967295.
	//
	// The following arguments are optional:
	AmazonSideAsn pulumi.IntPtrInput
	// The ARN of the route server.
	Arn pulumi.StringPtrInput
	// Indicates whether routes should be persisted after all BGP sessions are terminated. Valid values are `enable`, `disable`, `reset`
	PersistRoutes pulumi.StringPtrInput
	// The number of minutes a route server will wait after BGP is re-established to unpersist the routes in the FIB and RIB. Value must be in the range of 1-5. Required if `persistRoutes` is enabled.
	PersistRoutesDuration pulumi.IntPtrInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// The unique identifier of the route server.
	RouteServerId pulumi.StringPtrInput
	// Indicates whether SNS notifications should be enabled for route server events. Enabling SNS notifications persists BGP status changes to an SNS topic provisioned by AWS`.
	SnsNotificationsEnabled pulumi.BoolPtrInput
	// The ARN of the SNS topic where notifications are published.
	SnsTopicArn pulumi.StringPtrInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll  pulumi.StringMapInput
	Timeouts RouteServerTimeoutsPtrInput
}

func (RouteServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeServerState)(nil)).Elem()
}

type routeServerArgs struct {
	// The Border Gateway Protocol (BGP) Autonomous System Number (ASN) for the appliance. Valid values are from 1 to 4294967295.
	//
	// The following arguments are optional:
	AmazonSideAsn int `pulumi:"amazonSideAsn"`
	// Indicates whether routes should be persisted after all BGP sessions are terminated. Valid values are `enable`, `disable`, `reset`
	PersistRoutes *string `pulumi:"persistRoutes"`
	// The number of minutes a route server will wait after BGP is re-established to unpersist the routes in the FIB and RIB. Value must be in the range of 1-5. Required if `persistRoutes` is enabled.
	PersistRoutesDuration *int `pulumi:"persistRoutesDuration"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// Indicates whether SNS notifications should be enabled for route server events. Enabling SNS notifications persists BGP status changes to an SNS topic provisioned by AWS`.
	SnsNotificationsEnabled *bool `pulumi:"snsNotificationsEnabled"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     map[string]string    `pulumi:"tags"`
	Timeouts *RouteServerTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a RouteServer resource.
type RouteServerArgs struct {
	// The Border Gateway Protocol (BGP) Autonomous System Number (ASN) for the appliance. Valid values are from 1 to 4294967295.
	//
	// The following arguments are optional:
	AmazonSideAsn pulumi.IntInput
	// Indicates whether routes should be persisted after all BGP sessions are terminated. Valid values are `enable`, `disable`, `reset`
	PersistRoutes pulumi.StringPtrInput
	// The number of minutes a route server will wait after BGP is re-established to unpersist the routes in the FIB and RIB. Value must be in the range of 1-5. Required if `persistRoutes` is enabled.
	PersistRoutesDuration pulumi.IntPtrInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// Indicates whether SNS notifications should be enabled for route server events. Enabling SNS notifications persists BGP status changes to an SNS topic provisioned by AWS`.
	SnsNotificationsEnabled pulumi.BoolPtrInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     pulumi.StringMapInput
	Timeouts RouteServerTimeoutsPtrInput
}

func (RouteServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeServerArgs)(nil)).Elem()
}

type RouteServerInput interface {
	pulumi.Input

	ToRouteServerOutput() RouteServerOutput
	ToRouteServerOutputWithContext(ctx context.Context) RouteServerOutput
}

func (*RouteServer) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteServer)(nil)).Elem()
}

func (i *RouteServer) ToRouteServerOutput() RouteServerOutput {
	return i.ToRouteServerOutputWithContext(context.Background())
}

func (i *RouteServer) ToRouteServerOutputWithContext(ctx context.Context) RouteServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteServerOutput)
}

// RouteServerArrayInput is an input type that accepts RouteServerArray and RouteServerArrayOutput values.
// You can construct a concrete instance of `RouteServerArrayInput` via:
//
//	RouteServerArray{ RouteServerArgs{...} }
type RouteServerArrayInput interface {
	pulumi.Input

	ToRouteServerArrayOutput() RouteServerArrayOutput
	ToRouteServerArrayOutputWithContext(context.Context) RouteServerArrayOutput
}

type RouteServerArray []RouteServerInput

func (RouteServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteServer)(nil)).Elem()
}

func (i RouteServerArray) ToRouteServerArrayOutput() RouteServerArrayOutput {
	return i.ToRouteServerArrayOutputWithContext(context.Background())
}

func (i RouteServerArray) ToRouteServerArrayOutputWithContext(ctx context.Context) RouteServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteServerArrayOutput)
}

// RouteServerMapInput is an input type that accepts RouteServerMap and RouteServerMapOutput values.
// You can construct a concrete instance of `RouteServerMapInput` via:
//
//	RouteServerMap{ "key": RouteServerArgs{...} }
type RouteServerMapInput interface {
	pulumi.Input

	ToRouteServerMapOutput() RouteServerMapOutput
	ToRouteServerMapOutputWithContext(context.Context) RouteServerMapOutput
}

type RouteServerMap map[string]RouteServerInput

func (RouteServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteServer)(nil)).Elem()
}

func (i RouteServerMap) ToRouteServerMapOutput() RouteServerMapOutput {
	return i.ToRouteServerMapOutputWithContext(context.Background())
}

func (i RouteServerMap) ToRouteServerMapOutputWithContext(ctx context.Context) RouteServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteServerMapOutput)
}

type RouteServerOutput struct{ *pulumi.OutputState }

func (RouteServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteServer)(nil)).Elem()
}

func (o RouteServerOutput) ToRouteServerOutput() RouteServerOutput {
	return o
}

func (o RouteServerOutput) ToRouteServerOutputWithContext(ctx context.Context) RouteServerOutput {
	return o
}

// The Border Gateway Protocol (BGP) Autonomous System Number (ASN) for the appliance. Valid values are from 1 to 4294967295.
//
// The following arguments are optional:
func (o RouteServerOutput) AmazonSideAsn() pulumi.IntOutput {
	return o.ApplyT(func(v *RouteServer) pulumi.IntOutput { return v.AmazonSideAsn }).(pulumi.IntOutput)
}

// The ARN of the route server.
func (o RouteServerOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteServer) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Indicates whether routes should be persisted after all BGP sessions are terminated. Valid values are `enable`, `disable`, `reset`
func (o RouteServerOutput) PersistRoutes() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteServer) pulumi.StringOutput { return v.PersistRoutes }).(pulumi.StringOutput)
}

// The number of minutes a route server will wait after BGP is re-established to unpersist the routes in the FIB and RIB. Value must be in the range of 1-5. Required if `persistRoutes` is enabled.
func (o RouteServerOutput) PersistRoutesDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RouteServer) pulumi.IntPtrOutput { return v.PersistRoutesDuration }).(pulumi.IntPtrOutput)
}

// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
func (o RouteServerOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteServer) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The unique identifier of the route server.
func (o RouteServerOutput) RouteServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteServer) pulumi.StringOutput { return v.RouteServerId }).(pulumi.StringOutput)
}

// Indicates whether SNS notifications should be enabled for route server events. Enabling SNS notifications persists BGP status changes to an SNS topic provisioned by AWS`.
func (o RouteServerOutput) SnsNotificationsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *RouteServer) pulumi.BoolOutput { return v.SnsNotificationsEnabled }).(pulumi.BoolOutput)
}

// The ARN of the SNS topic where notifications are published.
func (o RouteServerOutput) SnsTopicArn() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteServer) pulumi.StringOutput { return v.SnsTopicArn }).(pulumi.StringOutput)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o RouteServerOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RouteServer) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o RouteServerOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RouteServer) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o RouteServerOutput) Timeouts() RouteServerTimeoutsPtrOutput {
	return o.ApplyT(func(v *RouteServer) RouteServerTimeoutsPtrOutput { return v.Timeouts }).(RouteServerTimeoutsPtrOutput)
}

type RouteServerArrayOutput struct{ *pulumi.OutputState }

func (RouteServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteServer)(nil)).Elem()
}

func (o RouteServerArrayOutput) ToRouteServerArrayOutput() RouteServerArrayOutput {
	return o
}

func (o RouteServerArrayOutput) ToRouteServerArrayOutputWithContext(ctx context.Context) RouteServerArrayOutput {
	return o
}

func (o RouteServerArrayOutput) Index(i pulumi.IntInput) RouteServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouteServer {
		return vs[0].([]*RouteServer)[vs[1].(int)]
	}).(RouteServerOutput)
}

type RouteServerMapOutput struct{ *pulumi.OutputState }

func (RouteServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteServer)(nil)).Elem()
}

func (o RouteServerMapOutput) ToRouteServerMapOutput() RouteServerMapOutput {
	return o
}

func (o RouteServerMapOutput) ToRouteServerMapOutputWithContext(ctx context.Context) RouteServerMapOutput {
	return o
}

func (o RouteServerMapOutput) MapIndex(k pulumi.StringInput) RouteServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouteServer {
		return vs[0].(map[string]*RouteServer)[vs[1].(string)]
	}).(RouteServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteServerInput)(nil)).Elem(), &RouteServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteServerArrayInput)(nil)).Elem(), RouteServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteServerMapInput)(nil)).Elem(), RouteServerMap{})
	pulumi.RegisterOutputType(RouteServerOutput{})
	pulumi.RegisterOutputType(RouteServerArrayOutput{})
	pulumi.RegisterOutputType(RouteServerMapOutput{})
}
