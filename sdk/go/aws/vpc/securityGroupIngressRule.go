// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an inbound (ingress) rule for a security group.
//
// When specifying an inbound rule for your security group in a VPC, the configuration must include a source for the traffic.
//
// > **NOTE on Security Groups and Security Group Rules:** this provider currently provides a Security Group resource with `ingress` and `egress` rules defined in-line and a Security Group Rule resource which manages one or more `ingress` or
// `egress` rules. Both of these resource were added before AWS assigned a [security group rule unique ID](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules.html), and they do not work well in all scenarios using the`description` and `tags` attributes, which rely on the unique ID.
// The `vpc.SecurityGroupIngressRule` resource has been added to address these limitations and should be used for all new security group rules.
// You should not use the `vpc.SecurityGroupIngressRule` resource in conjunction with an `ec2.SecurityGroup` resource with in-line rules or with `ec2.SecurityGroupRule` resources defined for the same Security Group, as rule conflicts may occur and rules will be overwritten.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleSecurityGroup, err := ec2.NewSecurityGroup(ctx, "exampleSecurityGroup", &ec2.SecurityGroupArgs{
//				Description: pulumi.String("example"),
//				VpcId:       pulumi.Any(aws_vpc.Main.Id),
//				Tags: pulumi.StringMap{
//					"Name": pulumi.String("example"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vpc.NewSecurityGroupIngressRule(ctx, "exampleSecurityGroupIngressRule", &vpc.SecurityGroupIngressRuleArgs{
//				SecurityGroupId: exampleSecurityGroup.ID(),
//				CidrIpv4:        pulumi.String("10.0.0.0/8"),
//				FromPort:        pulumi.Int(80),
//				IpProtocol:      pulumi.String("tcp"),
//				ToPort:          pulumi.Int(80),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import security group ingress rules using the `security_group_rule_id`. For example:
//
// ```sh
//
//	$ pulumi import aws:vpc/securityGroupIngressRule:SecurityGroupIngressRule example sgr-02108b27edd666983
//
// ```
type SecurityGroupIngressRule struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the security group rule.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The source IPv4 CIDR range.
	CidrIpv4 pulumi.StringPtrOutput `pulumi:"cidrIpv4"`
	// The source IPv6 CIDR range.
	CidrIpv6 pulumi.StringPtrOutput `pulumi:"cidrIpv6"`
	// The security group rule description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type.
	FromPort pulumi.IntPtrOutput `pulumi:"fromPort"`
	// The IP protocol name or number. Use `-1` to specify all protocols. Note that if `ipProtocol` is set to `-1`, it translates to all protocols, all port ranges, and `fromPort` and `toPort` values should not be defined.
	IpProtocol pulumi.StringOutput `pulumi:"ipProtocol"`
	// The ID of the source prefix list.
	PrefixListId pulumi.StringPtrOutput `pulumi:"prefixListId"`
	// The source security group that is referenced in the rule.
	ReferencedSecurityGroupId pulumi.StringPtrOutput `pulumi:"referencedSecurityGroupId"`
	// The ID of the security group.
	SecurityGroupId pulumi.StringOutput `pulumi:"securityGroupId"`
	// The ID of the security group rule.
	SecurityGroupRuleId pulumi.StringOutput `pulumi:"securityGroupRuleId"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code.
	ToPort pulumi.IntPtrOutput `pulumi:"toPort"`
}

// NewSecurityGroupIngressRule registers a new resource with the given unique name, arguments, and options.
func NewSecurityGroupIngressRule(ctx *pulumi.Context,
	name string, args *SecurityGroupIngressRuleArgs, opts ...pulumi.ResourceOption) (*SecurityGroupIngressRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpProtocol == nil {
		return nil, errors.New("invalid value for required argument 'IpProtocol'")
	}
	if args.SecurityGroupId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroupId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"tagsAll",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecurityGroupIngressRule
	err := ctx.RegisterResource("aws:vpc/securityGroupIngressRule:SecurityGroupIngressRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityGroupIngressRule gets an existing SecurityGroupIngressRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityGroupIngressRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityGroupIngressRuleState, opts ...pulumi.ResourceOption) (*SecurityGroupIngressRule, error) {
	var resource SecurityGroupIngressRule
	err := ctx.ReadResource("aws:vpc/securityGroupIngressRule:SecurityGroupIngressRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityGroupIngressRule resources.
type securityGroupIngressRuleState struct {
	// The Amazon Resource Name (ARN) of the security group rule.
	Arn *string `pulumi:"arn"`
	// The source IPv4 CIDR range.
	CidrIpv4 *string `pulumi:"cidrIpv4"`
	// The source IPv6 CIDR range.
	CidrIpv6 *string `pulumi:"cidrIpv6"`
	// The security group rule description.
	Description *string `pulumi:"description"`
	// The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type.
	FromPort *int `pulumi:"fromPort"`
	// The IP protocol name or number. Use `-1` to specify all protocols. Note that if `ipProtocol` is set to `-1`, it translates to all protocols, all port ranges, and `fromPort` and `toPort` values should not be defined.
	IpProtocol *string `pulumi:"ipProtocol"`
	// The ID of the source prefix list.
	PrefixListId *string `pulumi:"prefixListId"`
	// The source security group that is referenced in the rule.
	ReferencedSecurityGroupId *string `pulumi:"referencedSecurityGroupId"`
	// The ID of the security group.
	SecurityGroupId *string `pulumi:"securityGroupId"`
	// The ID of the security group rule.
	SecurityGroupRuleId *string `pulumi:"securityGroupRuleId"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code.
	ToPort *int `pulumi:"toPort"`
}

type SecurityGroupIngressRuleState struct {
	// The Amazon Resource Name (ARN) of the security group rule.
	Arn pulumi.StringPtrInput
	// The source IPv4 CIDR range.
	CidrIpv4 pulumi.StringPtrInput
	// The source IPv6 CIDR range.
	CidrIpv6 pulumi.StringPtrInput
	// The security group rule description.
	Description pulumi.StringPtrInput
	// The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type.
	FromPort pulumi.IntPtrInput
	// The IP protocol name or number. Use `-1` to specify all protocols. Note that if `ipProtocol` is set to `-1`, it translates to all protocols, all port ranges, and `fromPort` and `toPort` values should not be defined.
	IpProtocol pulumi.StringPtrInput
	// The ID of the source prefix list.
	PrefixListId pulumi.StringPtrInput
	// The source security group that is referenced in the rule.
	ReferencedSecurityGroupId pulumi.StringPtrInput
	// The ID of the security group.
	SecurityGroupId pulumi.StringPtrInput
	// The ID of the security group rule.
	SecurityGroupRuleId pulumi.StringPtrInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
	// The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code.
	ToPort pulumi.IntPtrInput
}

func (SecurityGroupIngressRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupIngressRuleState)(nil)).Elem()
}

type securityGroupIngressRuleArgs struct {
	// The source IPv4 CIDR range.
	CidrIpv4 *string `pulumi:"cidrIpv4"`
	// The source IPv6 CIDR range.
	CidrIpv6 *string `pulumi:"cidrIpv6"`
	// The security group rule description.
	Description *string `pulumi:"description"`
	// The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type.
	FromPort *int `pulumi:"fromPort"`
	// The IP protocol name or number. Use `-1` to specify all protocols. Note that if `ipProtocol` is set to `-1`, it translates to all protocols, all port ranges, and `fromPort` and `toPort` values should not be defined.
	IpProtocol string `pulumi:"ipProtocol"`
	// The ID of the source prefix list.
	PrefixListId *string `pulumi:"prefixListId"`
	// The source security group that is referenced in the rule.
	ReferencedSecurityGroupId *string `pulumi:"referencedSecurityGroupId"`
	// The ID of the security group.
	SecurityGroupId string `pulumi:"securityGroupId"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code.
	ToPort *int `pulumi:"toPort"`
}

// The set of arguments for constructing a SecurityGroupIngressRule resource.
type SecurityGroupIngressRuleArgs struct {
	// The source IPv4 CIDR range.
	CidrIpv4 pulumi.StringPtrInput
	// The source IPv6 CIDR range.
	CidrIpv6 pulumi.StringPtrInput
	// The security group rule description.
	Description pulumi.StringPtrInput
	// The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type.
	FromPort pulumi.IntPtrInput
	// The IP protocol name or number. Use `-1` to specify all protocols. Note that if `ipProtocol` is set to `-1`, it translates to all protocols, all port ranges, and `fromPort` and `toPort` values should not be defined.
	IpProtocol pulumi.StringInput
	// The ID of the source prefix list.
	PrefixListId pulumi.StringPtrInput
	// The source security group that is referenced in the rule.
	ReferencedSecurityGroupId pulumi.StringPtrInput
	// The ID of the security group.
	SecurityGroupId pulumi.StringInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code.
	ToPort pulumi.IntPtrInput
}

func (SecurityGroupIngressRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupIngressRuleArgs)(nil)).Elem()
}

type SecurityGroupIngressRuleInput interface {
	pulumi.Input

	ToSecurityGroupIngressRuleOutput() SecurityGroupIngressRuleOutput
	ToSecurityGroupIngressRuleOutputWithContext(ctx context.Context) SecurityGroupIngressRuleOutput
}

func (*SecurityGroupIngressRule) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGroupIngressRule)(nil)).Elem()
}

func (i *SecurityGroupIngressRule) ToSecurityGroupIngressRuleOutput() SecurityGroupIngressRuleOutput {
	return i.ToSecurityGroupIngressRuleOutputWithContext(context.Background())
}

func (i *SecurityGroupIngressRule) ToSecurityGroupIngressRuleOutputWithContext(ctx context.Context) SecurityGroupIngressRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupIngressRuleOutput)
}

// SecurityGroupIngressRuleArrayInput is an input type that accepts SecurityGroupIngressRuleArray and SecurityGroupIngressRuleArrayOutput values.
// You can construct a concrete instance of `SecurityGroupIngressRuleArrayInput` via:
//
//	SecurityGroupIngressRuleArray{ SecurityGroupIngressRuleArgs{...} }
type SecurityGroupIngressRuleArrayInput interface {
	pulumi.Input

	ToSecurityGroupIngressRuleArrayOutput() SecurityGroupIngressRuleArrayOutput
	ToSecurityGroupIngressRuleArrayOutputWithContext(context.Context) SecurityGroupIngressRuleArrayOutput
}

type SecurityGroupIngressRuleArray []SecurityGroupIngressRuleInput

func (SecurityGroupIngressRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityGroupIngressRule)(nil)).Elem()
}

func (i SecurityGroupIngressRuleArray) ToSecurityGroupIngressRuleArrayOutput() SecurityGroupIngressRuleArrayOutput {
	return i.ToSecurityGroupIngressRuleArrayOutputWithContext(context.Background())
}

func (i SecurityGroupIngressRuleArray) ToSecurityGroupIngressRuleArrayOutputWithContext(ctx context.Context) SecurityGroupIngressRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupIngressRuleArrayOutput)
}

// SecurityGroupIngressRuleMapInput is an input type that accepts SecurityGroupIngressRuleMap and SecurityGroupIngressRuleMapOutput values.
// You can construct a concrete instance of `SecurityGroupIngressRuleMapInput` via:
//
//	SecurityGroupIngressRuleMap{ "key": SecurityGroupIngressRuleArgs{...} }
type SecurityGroupIngressRuleMapInput interface {
	pulumi.Input

	ToSecurityGroupIngressRuleMapOutput() SecurityGroupIngressRuleMapOutput
	ToSecurityGroupIngressRuleMapOutputWithContext(context.Context) SecurityGroupIngressRuleMapOutput
}

type SecurityGroupIngressRuleMap map[string]SecurityGroupIngressRuleInput

func (SecurityGroupIngressRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityGroupIngressRule)(nil)).Elem()
}

func (i SecurityGroupIngressRuleMap) ToSecurityGroupIngressRuleMapOutput() SecurityGroupIngressRuleMapOutput {
	return i.ToSecurityGroupIngressRuleMapOutputWithContext(context.Background())
}

func (i SecurityGroupIngressRuleMap) ToSecurityGroupIngressRuleMapOutputWithContext(ctx context.Context) SecurityGroupIngressRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupIngressRuleMapOutput)
}

type SecurityGroupIngressRuleOutput struct{ *pulumi.OutputState }

func (SecurityGroupIngressRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGroupIngressRule)(nil)).Elem()
}

func (o SecurityGroupIngressRuleOutput) ToSecurityGroupIngressRuleOutput() SecurityGroupIngressRuleOutput {
	return o
}

func (o SecurityGroupIngressRuleOutput) ToSecurityGroupIngressRuleOutputWithContext(ctx context.Context) SecurityGroupIngressRuleOutput {
	return o
}

// The Amazon Resource Name (ARN) of the security group rule.
func (o SecurityGroupIngressRuleOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroupIngressRule) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The source IPv4 CIDR range.
func (o SecurityGroupIngressRuleOutput) CidrIpv4() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroupIngressRule) pulumi.StringPtrOutput { return v.CidrIpv4 }).(pulumi.StringPtrOutput)
}

// The source IPv6 CIDR range.
func (o SecurityGroupIngressRuleOutput) CidrIpv6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroupIngressRule) pulumi.StringPtrOutput { return v.CidrIpv6 }).(pulumi.StringPtrOutput)
}

// The security group rule description.
func (o SecurityGroupIngressRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroupIngressRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type.
func (o SecurityGroupIngressRuleOutput) FromPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecurityGroupIngressRule) pulumi.IntPtrOutput { return v.FromPort }).(pulumi.IntPtrOutput)
}

// The IP protocol name or number. Use `-1` to specify all protocols. Note that if `ipProtocol` is set to `-1`, it translates to all protocols, all port ranges, and `fromPort` and `toPort` values should not be defined.
func (o SecurityGroupIngressRuleOutput) IpProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroupIngressRule) pulumi.StringOutput { return v.IpProtocol }).(pulumi.StringOutput)
}

// The ID of the source prefix list.
func (o SecurityGroupIngressRuleOutput) PrefixListId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroupIngressRule) pulumi.StringPtrOutput { return v.PrefixListId }).(pulumi.StringPtrOutput)
}

// The source security group that is referenced in the rule.
func (o SecurityGroupIngressRuleOutput) ReferencedSecurityGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroupIngressRule) pulumi.StringPtrOutput { return v.ReferencedSecurityGroupId }).(pulumi.StringPtrOutput)
}

// The ID of the security group.
func (o SecurityGroupIngressRuleOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroupIngressRule) pulumi.StringOutput { return v.SecurityGroupId }).(pulumi.StringOutput)
}

// The ID of the security group rule.
func (o SecurityGroupIngressRuleOutput) SecurityGroupRuleId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroupIngressRule) pulumi.StringOutput { return v.SecurityGroupRuleId }).(pulumi.StringOutput)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o SecurityGroupIngressRuleOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SecurityGroupIngressRule) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o SecurityGroupIngressRuleOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SecurityGroupIngressRule) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code.
func (o SecurityGroupIngressRuleOutput) ToPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecurityGroupIngressRule) pulumi.IntPtrOutput { return v.ToPort }).(pulumi.IntPtrOutput)
}

type SecurityGroupIngressRuleArrayOutput struct{ *pulumi.OutputState }

func (SecurityGroupIngressRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityGroupIngressRule)(nil)).Elem()
}

func (o SecurityGroupIngressRuleArrayOutput) ToSecurityGroupIngressRuleArrayOutput() SecurityGroupIngressRuleArrayOutput {
	return o
}

func (o SecurityGroupIngressRuleArrayOutput) ToSecurityGroupIngressRuleArrayOutputWithContext(ctx context.Context) SecurityGroupIngressRuleArrayOutput {
	return o
}

func (o SecurityGroupIngressRuleArrayOutput) Index(i pulumi.IntInput) SecurityGroupIngressRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecurityGroupIngressRule {
		return vs[0].([]*SecurityGroupIngressRule)[vs[1].(int)]
	}).(SecurityGroupIngressRuleOutput)
}

type SecurityGroupIngressRuleMapOutput struct{ *pulumi.OutputState }

func (SecurityGroupIngressRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityGroupIngressRule)(nil)).Elem()
}

func (o SecurityGroupIngressRuleMapOutput) ToSecurityGroupIngressRuleMapOutput() SecurityGroupIngressRuleMapOutput {
	return o
}

func (o SecurityGroupIngressRuleMapOutput) ToSecurityGroupIngressRuleMapOutputWithContext(ctx context.Context) SecurityGroupIngressRuleMapOutput {
	return o
}

func (o SecurityGroupIngressRuleMapOutput) MapIndex(k pulumi.StringInput) SecurityGroupIngressRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecurityGroupIngressRule {
		return vs[0].(map[string]*SecurityGroupIngressRule)[vs[1].(string)]
	}).(SecurityGroupIngressRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupIngressRuleInput)(nil)).Elem(), &SecurityGroupIngressRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupIngressRuleArrayInput)(nil)).Elem(), SecurityGroupIngressRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupIngressRuleMapInput)(nil)).Elem(), SecurityGroupIngressRuleMap{})
	pulumi.RegisterOutputType(SecurityGroupIngressRuleOutput{})
	pulumi.RegisterOutputType(SecurityGroupIngressRuleArrayOutput{})
	pulumi.RegisterOutputType(SecurityGroupIngressRuleMapOutput{})
}
