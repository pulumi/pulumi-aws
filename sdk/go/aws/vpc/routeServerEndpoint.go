// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource for managing a VPC (Virtual Private Cloud) Route Server Endpoint.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vpc.NewRouteServerEndpoint(ctx, "test", &vpc.RouteServerEndpointArgs{
//				RouteServerId: pulumi.Any(example.RouteServerId),
//				SubnetId:      pulumi.Any(main.Id),
//				Tags: pulumi.StringMap{
//					"Name": pulumi.String("Endpoint A"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import VPC (Virtual Private Cloud) Route Server Endpoint using the `route_server_endpoint_id`. For example:
//
// ```sh
// $ pulumi import aws:vpc/routeServerEndpoint:RouteServerEndpoint example rse-12345678
// ```
type RouteServerEndpoint struct {
	pulumi.CustomResourceState

	// The ARN of the route server endpoint.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The IP address of the Elastic network interface for the endpoint.
	EniAddress pulumi.StringOutput `pulumi:"eniAddress"`
	// The ID of the Elastic network interface for the endpoint.
	EniId pulumi.StringOutput `pulumi:"eniId"`
	// The unique identifier of the route server endpoint.
	RouteServerEndpointId pulumi.StringOutput `pulumi:"routeServerEndpointId"`
	// The ID of the route server for which to create an endpoint.
	RouteServerId pulumi.StringOutput `pulumi:"routeServerId"`
	// The ID of the subnet in which to create the route server endpoint.
	//
	// The following arguments are optional:
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapOutput               `pulumi:"tagsAll"`
	Timeouts RouteServerEndpointTimeoutsPtrOutput `pulumi:"timeouts"`
	// The ID of the VPC containing the endpoint.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewRouteServerEndpoint registers a new resource with the given unique name, arguments, and options.
func NewRouteServerEndpoint(ctx *pulumi.Context,
	name string, args *RouteServerEndpointArgs, opts ...pulumi.ResourceOption) (*RouteServerEndpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RouteServerId == nil {
		return nil, errors.New("invalid value for required argument 'RouteServerId'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouteServerEndpoint
	err := ctx.RegisterResource("aws:vpc/routeServerEndpoint:RouteServerEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteServerEndpoint gets an existing RouteServerEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteServerEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteServerEndpointState, opts ...pulumi.ResourceOption) (*RouteServerEndpoint, error) {
	var resource RouteServerEndpoint
	err := ctx.ReadResource("aws:vpc/routeServerEndpoint:RouteServerEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteServerEndpoint resources.
type routeServerEndpointState struct {
	// The ARN of the route server endpoint.
	Arn *string `pulumi:"arn"`
	// The IP address of the Elastic network interface for the endpoint.
	EniAddress *string `pulumi:"eniAddress"`
	// The ID of the Elastic network interface for the endpoint.
	EniId *string `pulumi:"eniId"`
	// The unique identifier of the route server endpoint.
	RouteServerEndpointId *string `pulumi:"routeServerEndpointId"`
	// The ID of the route server for which to create an endpoint.
	RouteServerId *string `pulumi:"routeServerId"`
	// The ID of the subnet in which to create the route server endpoint.
	//
	// The following arguments are optional:
	SubnetId *string `pulumi:"subnetId"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  map[string]string            `pulumi:"tagsAll"`
	Timeouts *RouteServerEndpointTimeouts `pulumi:"timeouts"`
	// The ID of the VPC containing the endpoint.
	VpcId *string `pulumi:"vpcId"`
}

type RouteServerEndpointState struct {
	// The ARN of the route server endpoint.
	Arn pulumi.StringPtrInput
	// The IP address of the Elastic network interface for the endpoint.
	EniAddress pulumi.StringPtrInput
	// The ID of the Elastic network interface for the endpoint.
	EniId pulumi.StringPtrInput
	// The unique identifier of the route server endpoint.
	RouteServerEndpointId pulumi.StringPtrInput
	// The ID of the route server for which to create an endpoint.
	RouteServerId pulumi.StringPtrInput
	// The ID of the subnet in which to create the route server endpoint.
	//
	// The following arguments are optional:
	SubnetId pulumi.StringPtrInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapInput
	Timeouts RouteServerEndpointTimeoutsPtrInput
	// The ID of the VPC containing the endpoint.
	VpcId pulumi.StringPtrInput
}

func (RouteServerEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeServerEndpointState)(nil)).Elem()
}

type routeServerEndpointArgs struct {
	// The ID of the route server for which to create an endpoint.
	RouteServerId string `pulumi:"routeServerId"`
	// The ID of the subnet in which to create the route server endpoint.
	//
	// The following arguments are optional:
	SubnetId string `pulumi:"subnetId"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     map[string]string            `pulumi:"tags"`
	Timeouts *RouteServerEndpointTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a RouteServerEndpoint resource.
type RouteServerEndpointArgs struct {
	// The ID of the route server for which to create an endpoint.
	RouteServerId pulumi.StringInput
	// The ID of the subnet in which to create the route server endpoint.
	//
	// The following arguments are optional:
	SubnetId pulumi.StringInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     pulumi.StringMapInput
	Timeouts RouteServerEndpointTimeoutsPtrInput
}

func (RouteServerEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeServerEndpointArgs)(nil)).Elem()
}

type RouteServerEndpointInput interface {
	pulumi.Input

	ToRouteServerEndpointOutput() RouteServerEndpointOutput
	ToRouteServerEndpointOutputWithContext(ctx context.Context) RouteServerEndpointOutput
}

func (*RouteServerEndpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteServerEndpoint)(nil)).Elem()
}

func (i *RouteServerEndpoint) ToRouteServerEndpointOutput() RouteServerEndpointOutput {
	return i.ToRouteServerEndpointOutputWithContext(context.Background())
}

func (i *RouteServerEndpoint) ToRouteServerEndpointOutputWithContext(ctx context.Context) RouteServerEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteServerEndpointOutput)
}

// RouteServerEndpointArrayInput is an input type that accepts RouteServerEndpointArray and RouteServerEndpointArrayOutput values.
// You can construct a concrete instance of `RouteServerEndpointArrayInput` via:
//
//	RouteServerEndpointArray{ RouteServerEndpointArgs{...} }
type RouteServerEndpointArrayInput interface {
	pulumi.Input

	ToRouteServerEndpointArrayOutput() RouteServerEndpointArrayOutput
	ToRouteServerEndpointArrayOutputWithContext(context.Context) RouteServerEndpointArrayOutput
}

type RouteServerEndpointArray []RouteServerEndpointInput

func (RouteServerEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteServerEndpoint)(nil)).Elem()
}

func (i RouteServerEndpointArray) ToRouteServerEndpointArrayOutput() RouteServerEndpointArrayOutput {
	return i.ToRouteServerEndpointArrayOutputWithContext(context.Background())
}

func (i RouteServerEndpointArray) ToRouteServerEndpointArrayOutputWithContext(ctx context.Context) RouteServerEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteServerEndpointArrayOutput)
}

// RouteServerEndpointMapInput is an input type that accepts RouteServerEndpointMap and RouteServerEndpointMapOutput values.
// You can construct a concrete instance of `RouteServerEndpointMapInput` via:
//
//	RouteServerEndpointMap{ "key": RouteServerEndpointArgs{...} }
type RouteServerEndpointMapInput interface {
	pulumi.Input

	ToRouteServerEndpointMapOutput() RouteServerEndpointMapOutput
	ToRouteServerEndpointMapOutputWithContext(context.Context) RouteServerEndpointMapOutput
}

type RouteServerEndpointMap map[string]RouteServerEndpointInput

func (RouteServerEndpointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteServerEndpoint)(nil)).Elem()
}

func (i RouteServerEndpointMap) ToRouteServerEndpointMapOutput() RouteServerEndpointMapOutput {
	return i.ToRouteServerEndpointMapOutputWithContext(context.Background())
}

func (i RouteServerEndpointMap) ToRouteServerEndpointMapOutputWithContext(ctx context.Context) RouteServerEndpointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteServerEndpointMapOutput)
}

type RouteServerEndpointOutput struct{ *pulumi.OutputState }

func (RouteServerEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteServerEndpoint)(nil)).Elem()
}

func (o RouteServerEndpointOutput) ToRouteServerEndpointOutput() RouteServerEndpointOutput {
	return o
}

func (o RouteServerEndpointOutput) ToRouteServerEndpointOutputWithContext(ctx context.Context) RouteServerEndpointOutput {
	return o
}

// The ARN of the route server endpoint.
func (o RouteServerEndpointOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteServerEndpoint) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The IP address of the Elastic network interface for the endpoint.
func (o RouteServerEndpointOutput) EniAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteServerEndpoint) pulumi.StringOutput { return v.EniAddress }).(pulumi.StringOutput)
}

// The ID of the Elastic network interface for the endpoint.
func (o RouteServerEndpointOutput) EniId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteServerEndpoint) pulumi.StringOutput { return v.EniId }).(pulumi.StringOutput)
}

// The unique identifier of the route server endpoint.
func (o RouteServerEndpointOutput) RouteServerEndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteServerEndpoint) pulumi.StringOutput { return v.RouteServerEndpointId }).(pulumi.StringOutput)
}

// The ID of the route server for which to create an endpoint.
func (o RouteServerEndpointOutput) RouteServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteServerEndpoint) pulumi.StringOutput { return v.RouteServerId }).(pulumi.StringOutput)
}

// The ID of the subnet in which to create the route server endpoint.
//
// The following arguments are optional:
func (o RouteServerEndpointOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteServerEndpoint) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o RouteServerEndpointOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RouteServerEndpoint) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o RouteServerEndpointOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RouteServerEndpoint) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o RouteServerEndpointOutput) Timeouts() RouteServerEndpointTimeoutsPtrOutput {
	return o.ApplyT(func(v *RouteServerEndpoint) RouteServerEndpointTimeoutsPtrOutput { return v.Timeouts }).(RouteServerEndpointTimeoutsPtrOutput)
}

// The ID of the VPC containing the endpoint.
func (o RouteServerEndpointOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteServerEndpoint) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type RouteServerEndpointArrayOutput struct{ *pulumi.OutputState }

func (RouteServerEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteServerEndpoint)(nil)).Elem()
}

func (o RouteServerEndpointArrayOutput) ToRouteServerEndpointArrayOutput() RouteServerEndpointArrayOutput {
	return o
}

func (o RouteServerEndpointArrayOutput) ToRouteServerEndpointArrayOutputWithContext(ctx context.Context) RouteServerEndpointArrayOutput {
	return o
}

func (o RouteServerEndpointArrayOutput) Index(i pulumi.IntInput) RouteServerEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouteServerEndpoint {
		return vs[0].([]*RouteServerEndpoint)[vs[1].(int)]
	}).(RouteServerEndpointOutput)
}

type RouteServerEndpointMapOutput struct{ *pulumi.OutputState }

func (RouteServerEndpointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteServerEndpoint)(nil)).Elem()
}

func (o RouteServerEndpointMapOutput) ToRouteServerEndpointMapOutput() RouteServerEndpointMapOutput {
	return o
}

func (o RouteServerEndpointMapOutput) ToRouteServerEndpointMapOutputWithContext(ctx context.Context) RouteServerEndpointMapOutput {
	return o
}

func (o RouteServerEndpointMapOutput) MapIndex(k pulumi.StringInput) RouteServerEndpointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouteServerEndpoint {
		return vs[0].(map[string]*RouteServerEndpoint)[vs[1].(string)]
	}).(RouteServerEndpointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteServerEndpointInput)(nil)).Elem(), &RouteServerEndpoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteServerEndpointArrayInput)(nil)).Elem(), RouteServerEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteServerEndpointMapInput)(nil)).Elem(), RouteServerEndpointMap{})
	pulumi.RegisterOutputType(RouteServerEndpointOutput{})
	pulumi.RegisterOutputType(RouteServerEndpointArrayOutput{})
	pulumi.RegisterOutputType(RouteServerEndpointMapOutput{})
}
