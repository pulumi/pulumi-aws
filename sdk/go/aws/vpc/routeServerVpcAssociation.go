// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource for managing association between VPC (Virtual Private Cloud) route server and a VPC.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vpc.NewRouteServerVpcAssociation(ctx, "example", &vpc.RouteServerVpcAssociationArgs{
//				RouteServerId: pulumi.Any(exampleAwsVpcRouteServer.RouteServerId),
//				VpcId:         pulumi.Any(exampleAwsVpc.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, to  to import VPC (Virtual Private Cloud) Route Server Association using the associated resource ID and VPC Id separated by a comma (,). For example:
//
// ```sh
// $ pulumi import aws:vpc/routeServerVpcAssociation:RouteServerVpcAssociation example rs-12345678,vpc-0f001273ec18911b1
// ```
type RouteServerVpcAssociation struct {
	pulumi.CustomResourceState

	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
	// The unique identifier for the route server to be associated.
	RouteServerId pulumi.StringOutput                        `pulumi:"routeServerId"`
	Timeouts      RouteServerVpcAssociationTimeoutsPtrOutput `pulumi:"timeouts"`
	// The ID of the VPC to associate with the route server.
	//
	// The following arguments are optional:
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewRouteServerVpcAssociation registers a new resource with the given unique name, arguments, and options.
func NewRouteServerVpcAssociation(ctx *pulumi.Context,
	name string, args *RouteServerVpcAssociationArgs, opts ...pulumi.ResourceOption) (*RouteServerVpcAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RouteServerId == nil {
		return nil, errors.New("invalid value for required argument 'RouteServerId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouteServerVpcAssociation
	err := ctx.RegisterResource("aws:vpc/routeServerVpcAssociation:RouteServerVpcAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteServerVpcAssociation gets an existing RouteServerVpcAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteServerVpcAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteServerVpcAssociationState, opts ...pulumi.ResourceOption) (*RouteServerVpcAssociation, error) {
	var resource RouteServerVpcAssociation
	err := ctx.ReadResource("aws:vpc/routeServerVpcAssociation:RouteServerVpcAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteServerVpcAssociation resources.
type routeServerVpcAssociationState struct {
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// The unique identifier for the route server to be associated.
	RouteServerId *string                            `pulumi:"routeServerId"`
	Timeouts      *RouteServerVpcAssociationTimeouts `pulumi:"timeouts"`
	// The ID of the VPC to associate with the route server.
	//
	// The following arguments are optional:
	VpcId *string `pulumi:"vpcId"`
}

type RouteServerVpcAssociationState struct {
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// The unique identifier for the route server to be associated.
	RouteServerId pulumi.StringPtrInput
	Timeouts      RouteServerVpcAssociationTimeoutsPtrInput
	// The ID of the VPC to associate with the route server.
	//
	// The following arguments are optional:
	VpcId pulumi.StringPtrInput
}

func (RouteServerVpcAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeServerVpcAssociationState)(nil)).Elem()
}

type routeServerVpcAssociationArgs struct {
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// The unique identifier for the route server to be associated.
	RouteServerId string                             `pulumi:"routeServerId"`
	Timeouts      *RouteServerVpcAssociationTimeouts `pulumi:"timeouts"`
	// The ID of the VPC to associate with the route server.
	//
	// The following arguments are optional:
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a RouteServerVpcAssociation resource.
type RouteServerVpcAssociationArgs struct {
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// The unique identifier for the route server to be associated.
	RouteServerId pulumi.StringInput
	Timeouts      RouteServerVpcAssociationTimeoutsPtrInput
	// The ID of the VPC to associate with the route server.
	//
	// The following arguments are optional:
	VpcId pulumi.StringInput
}

func (RouteServerVpcAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeServerVpcAssociationArgs)(nil)).Elem()
}

type RouteServerVpcAssociationInput interface {
	pulumi.Input

	ToRouteServerVpcAssociationOutput() RouteServerVpcAssociationOutput
	ToRouteServerVpcAssociationOutputWithContext(ctx context.Context) RouteServerVpcAssociationOutput
}

func (*RouteServerVpcAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteServerVpcAssociation)(nil)).Elem()
}

func (i *RouteServerVpcAssociation) ToRouteServerVpcAssociationOutput() RouteServerVpcAssociationOutput {
	return i.ToRouteServerVpcAssociationOutputWithContext(context.Background())
}

func (i *RouteServerVpcAssociation) ToRouteServerVpcAssociationOutputWithContext(ctx context.Context) RouteServerVpcAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteServerVpcAssociationOutput)
}

// RouteServerVpcAssociationArrayInput is an input type that accepts RouteServerVpcAssociationArray and RouteServerVpcAssociationArrayOutput values.
// You can construct a concrete instance of `RouteServerVpcAssociationArrayInput` via:
//
//	RouteServerVpcAssociationArray{ RouteServerVpcAssociationArgs{...} }
type RouteServerVpcAssociationArrayInput interface {
	pulumi.Input

	ToRouteServerVpcAssociationArrayOutput() RouteServerVpcAssociationArrayOutput
	ToRouteServerVpcAssociationArrayOutputWithContext(context.Context) RouteServerVpcAssociationArrayOutput
}

type RouteServerVpcAssociationArray []RouteServerVpcAssociationInput

func (RouteServerVpcAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteServerVpcAssociation)(nil)).Elem()
}

func (i RouteServerVpcAssociationArray) ToRouteServerVpcAssociationArrayOutput() RouteServerVpcAssociationArrayOutput {
	return i.ToRouteServerVpcAssociationArrayOutputWithContext(context.Background())
}

func (i RouteServerVpcAssociationArray) ToRouteServerVpcAssociationArrayOutputWithContext(ctx context.Context) RouteServerVpcAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteServerVpcAssociationArrayOutput)
}

// RouteServerVpcAssociationMapInput is an input type that accepts RouteServerVpcAssociationMap and RouteServerVpcAssociationMapOutput values.
// You can construct a concrete instance of `RouteServerVpcAssociationMapInput` via:
//
//	RouteServerVpcAssociationMap{ "key": RouteServerVpcAssociationArgs{...} }
type RouteServerVpcAssociationMapInput interface {
	pulumi.Input

	ToRouteServerVpcAssociationMapOutput() RouteServerVpcAssociationMapOutput
	ToRouteServerVpcAssociationMapOutputWithContext(context.Context) RouteServerVpcAssociationMapOutput
}

type RouteServerVpcAssociationMap map[string]RouteServerVpcAssociationInput

func (RouteServerVpcAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteServerVpcAssociation)(nil)).Elem()
}

func (i RouteServerVpcAssociationMap) ToRouteServerVpcAssociationMapOutput() RouteServerVpcAssociationMapOutput {
	return i.ToRouteServerVpcAssociationMapOutputWithContext(context.Background())
}

func (i RouteServerVpcAssociationMap) ToRouteServerVpcAssociationMapOutputWithContext(ctx context.Context) RouteServerVpcAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteServerVpcAssociationMapOutput)
}

type RouteServerVpcAssociationOutput struct{ *pulumi.OutputState }

func (RouteServerVpcAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteServerVpcAssociation)(nil)).Elem()
}

func (o RouteServerVpcAssociationOutput) ToRouteServerVpcAssociationOutput() RouteServerVpcAssociationOutput {
	return o
}

func (o RouteServerVpcAssociationOutput) ToRouteServerVpcAssociationOutputWithContext(ctx context.Context) RouteServerVpcAssociationOutput {
	return o
}

// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
func (o RouteServerVpcAssociationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteServerVpcAssociation) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The unique identifier for the route server to be associated.
func (o RouteServerVpcAssociationOutput) RouteServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteServerVpcAssociation) pulumi.StringOutput { return v.RouteServerId }).(pulumi.StringOutput)
}

func (o RouteServerVpcAssociationOutput) Timeouts() RouteServerVpcAssociationTimeoutsPtrOutput {
	return o.ApplyT(func(v *RouteServerVpcAssociation) RouteServerVpcAssociationTimeoutsPtrOutput { return v.Timeouts }).(RouteServerVpcAssociationTimeoutsPtrOutput)
}

// The ID of the VPC to associate with the route server.
//
// The following arguments are optional:
func (o RouteServerVpcAssociationOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteServerVpcAssociation) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type RouteServerVpcAssociationArrayOutput struct{ *pulumi.OutputState }

func (RouteServerVpcAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteServerVpcAssociation)(nil)).Elem()
}

func (o RouteServerVpcAssociationArrayOutput) ToRouteServerVpcAssociationArrayOutput() RouteServerVpcAssociationArrayOutput {
	return o
}

func (o RouteServerVpcAssociationArrayOutput) ToRouteServerVpcAssociationArrayOutputWithContext(ctx context.Context) RouteServerVpcAssociationArrayOutput {
	return o
}

func (o RouteServerVpcAssociationArrayOutput) Index(i pulumi.IntInput) RouteServerVpcAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouteServerVpcAssociation {
		return vs[0].([]*RouteServerVpcAssociation)[vs[1].(int)]
	}).(RouteServerVpcAssociationOutput)
}

type RouteServerVpcAssociationMapOutput struct{ *pulumi.OutputState }

func (RouteServerVpcAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteServerVpcAssociation)(nil)).Elem()
}

func (o RouteServerVpcAssociationMapOutput) ToRouteServerVpcAssociationMapOutput() RouteServerVpcAssociationMapOutput {
	return o
}

func (o RouteServerVpcAssociationMapOutput) ToRouteServerVpcAssociationMapOutputWithContext(ctx context.Context) RouteServerVpcAssociationMapOutput {
	return o
}

func (o RouteServerVpcAssociationMapOutput) MapIndex(k pulumi.StringInput) RouteServerVpcAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouteServerVpcAssociation {
		return vs[0].(map[string]*RouteServerVpcAssociation)[vs[1].(string)]
	}).(RouteServerVpcAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteServerVpcAssociationInput)(nil)).Elem(), &RouteServerVpcAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteServerVpcAssociationArrayInput)(nil)).Elem(), RouteServerVpcAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteServerVpcAssociationMapInput)(nil)).Elem(), RouteServerVpcAssociationMap{})
	pulumi.RegisterOutputType(RouteServerVpcAssociationOutput{})
	pulumi.RegisterOutputType(RouteServerVpcAssociationArrayOutput{})
	pulumi.RegisterOutputType(RouteServerVpcAssociationMapOutput{})
}
