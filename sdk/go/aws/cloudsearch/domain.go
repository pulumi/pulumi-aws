// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudsearch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Domain struct {
	pulumi.CustomResourceState

	Arn                     pulumi.StringOutput           `pulumi:"arn"`
	DocumentServiceEndpoint pulumi.StringOutput           `pulumi:"documentServiceEndpoint"`
	DomainId                pulumi.StringOutput           `pulumi:"domainId"`
	EndpointOptions         DomainEndpointOptionsOutput   `pulumi:"endpointOptions"`
	IndexFields             DomainIndexFieldArrayOutput   `pulumi:"indexFields"`
	MultiAz                 pulumi.BoolOutput             `pulumi:"multiAz"`
	Name                    pulumi.StringOutput           `pulumi:"name"`
	ScalingParameters       DomainScalingParametersOutput `pulumi:"scalingParameters"`
	SearchServiceEndpoint   pulumi.StringOutput           `pulumi:"searchServiceEndpoint"`
}

// NewDomain registers a new resource with the given unique name, arguments, and options.
func NewDomain(ctx *pulumi.Context,
	name string, args *DomainArgs, opts ...pulumi.ResourceOption) (*Domain, error) {
	if args == nil {
		args = &DomainArgs{}
	}

	var resource Domain
	err := ctx.RegisterResource("aws:cloudsearch/domain:Domain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomain gets an existing Domain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainState, opts ...pulumi.ResourceOption) (*Domain, error) {
	var resource Domain
	err := ctx.ReadResource("aws:cloudsearch/domain:Domain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Domain resources.
type domainState struct {
	Arn                     *string                  `pulumi:"arn"`
	DocumentServiceEndpoint *string                  `pulumi:"documentServiceEndpoint"`
	DomainId                *string                  `pulumi:"domainId"`
	EndpointOptions         *DomainEndpointOptions   `pulumi:"endpointOptions"`
	IndexFields             []DomainIndexField       `pulumi:"indexFields"`
	MultiAz                 *bool                    `pulumi:"multiAz"`
	Name                    *string                  `pulumi:"name"`
	ScalingParameters       *DomainScalingParameters `pulumi:"scalingParameters"`
	SearchServiceEndpoint   *string                  `pulumi:"searchServiceEndpoint"`
}

type DomainState struct {
	Arn                     pulumi.StringPtrInput
	DocumentServiceEndpoint pulumi.StringPtrInput
	DomainId                pulumi.StringPtrInput
	EndpointOptions         DomainEndpointOptionsPtrInput
	IndexFields             DomainIndexFieldArrayInput
	MultiAz                 pulumi.BoolPtrInput
	Name                    pulumi.StringPtrInput
	ScalingParameters       DomainScalingParametersPtrInput
	SearchServiceEndpoint   pulumi.StringPtrInput
}

func (DomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainState)(nil)).Elem()
}

type domainArgs struct {
	EndpointOptions   *DomainEndpointOptions   `pulumi:"endpointOptions"`
	IndexFields       []DomainIndexField       `pulumi:"indexFields"`
	MultiAz           *bool                    `pulumi:"multiAz"`
	Name              *string                  `pulumi:"name"`
	ScalingParameters *DomainScalingParameters `pulumi:"scalingParameters"`
}

// The set of arguments for constructing a Domain resource.
type DomainArgs struct {
	EndpointOptions   DomainEndpointOptionsPtrInput
	IndexFields       DomainIndexFieldArrayInput
	MultiAz           pulumi.BoolPtrInput
	Name              pulumi.StringPtrInput
	ScalingParameters DomainScalingParametersPtrInput
}

func (DomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainArgs)(nil)).Elem()
}

type DomainInput interface {
	pulumi.Input

	ToDomainOutput() DomainOutput
	ToDomainOutputWithContext(ctx context.Context) DomainOutput
}

func (*Domain) ElementType() reflect.Type {
	return reflect.TypeOf((**Domain)(nil)).Elem()
}

func (i *Domain) ToDomainOutput() DomainOutput {
	return i.ToDomainOutputWithContext(context.Background())
}

func (i *Domain) ToDomainOutputWithContext(ctx context.Context) DomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainOutput)
}

// DomainArrayInput is an input type that accepts DomainArray and DomainArrayOutput values.
// You can construct a concrete instance of `DomainArrayInput` via:
//
//	DomainArray{ DomainArgs{...} }
type DomainArrayInput interface {
	pulumi.Input

	ToDomainArrayOutput() DomainArrayOutput
	ToDomainArrayOutputWithContext(context.Context) DomainArrayOutput
}

type DomainArray []DomainInput

func (DomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Domain)(nil)).Elem()
}

func (i DomainArray) ToDomainArrayOutput() DomainArrayOutput {
	return i.ToDomainArrayOutputWithContext(context.Background())
}

func (i DomainArray) ToDomainArrayOutputWithContext(ctx context.Context) DomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainArrayOutput)
}

// DomainMapInput is an input type that accepts DomainMap and DomainMapOutput values.
// You can construct a concrete instance of `DomainMapInput` via:
//
//	DomainMap{ "key": DomainArgs{...} }
type DomainMapInput interface {
	pulumi.Input

	ToDomainMapOutput() DomainMapOutput
	ToDomainMapOutputWithContext(context.Context) DomainMapOutput
}

type DomainMap map[string]DomainInput

func (DomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Domain)(nil)).Elem()
}

func (i DomainMap) ToDomainMapOutput() DomainMapOutput {
	return i.ToDomainMapOutputWithContext(context.Background())
}

func (i DomainMap) ToDomainMapOutputWithContext(ctx context.Context) DomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainMapOutput)
}

type DomainOutput struct{ *pulumi.OutputState }

func (DomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Domain)(nil)).Elem()
}

func (o DomainOutput) ToDomainOutput() DomainOutput {
	return o
}

func (o DomainOutput) ToDomainOutputWithContext(ctx context.Context) DomainOutput {
	return o
}

func (o DomainOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o DomainOutput) DocumentServiceEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.DocumentServiceEndpoint }).(pulumi.StringOutput)
}

func (o DomainOutput) DomainId() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.DomainId }).(pulumi.StringOutput)
}

func (o DomainOutput) EndpointOptions() DomainEndpointOptionsOutput {
	return o.ApplyT(func(v *Domain) DomainEndpointOptionsOutput { return v.EndpointOptions }).(DomainEndpointOptionsOutput)
}

func (o DomainOutput) IndexFields() DomainIndexFieldArrayOutput {
	return o.ApplyT(func(v *Domain) DomainIndexFieldArrayOutput { return v.IndexFields }).(DomainIndexFieldArrayOutput)
}

func (o DomainOutput) MultiAz() pulumi.BoolOutput {
	return o.ApplyT(func(v *Domain) pulumi.BoolOutput { return v.MultiAz }).(pulumi.BoolOutput)
}

func (o DomainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DomainOutput) ScalingParameters() DomainScalingParametersOutput {
	return o.ApplyT(func(v *Domain) DomainScalingParametersOutput { return v.ScalingParameters }).(DomainScalingParametersOutput)
}

func (o DomainOutput) SearchServiceEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.SearchServiceEndpoint }).(pulumi.StringOutput)
}

type DomainArrayOutput struct{ *pulumi.OutputState }

func (DomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Domain)(nil)).Elem()
}

func (o DomainArrayOutput) ToDomainArrayOutput() DomainArrayOutput {
	return o
}

func (o DomainArrayOutput) ToDomainArrayOutputWithContext(ctx context.Context) DomainArrayOutput {
	return o
}

func (o DomainArrayOutput) Index(i pulumi.IntInput) DomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Domain {
		return vs[0].([]*Domain)[vs[1].(int)]
	}).(DomainOutput)
}

type DomainMapOutput struct{ *pulumi.OutputState }

func (DomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Domain)(nil)).Elem()
}

func (o DomainMapOutput) ToDomainMapOutput() DomainMapOutput {
	return o
}

func (o DomainMapOutput) ToDomainMapOutputWithContext(ctx context.Context) DomainMapOutput {
	return o
}

func (o DomainMapOutput) MapIndex(k pulumi.StringInput) DomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Domain {
		return vs[0].(map[string]*Domain)[vs[1].(string)]
	}).(DomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainInput)(nil)).Elem(), &Domain{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainArrayInput)(nil)).Elem(), DomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainMapInput)(nil)).Elem(), DomainMap{})
	pulumi.RegisterOutputType(DomainOutput{})
	pulumi.RegisterOutputType(DomainArrayOutput{})
	pulumi.RegisterOutputType(DomainMapOutput{})
}
