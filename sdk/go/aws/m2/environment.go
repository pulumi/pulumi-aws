// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package m2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an [AWS Mainframe Modernization Environment](https://docs.aws.amazon.com/m2/latest/userguide/environments-m2.html).
//
// ## Example Usage
//
// ## Import
//
// Using `pulumi import`, import Mainframe Modernization Environment using the `01234567890abcdef012345678`. For example:
//
// ```sh
// $ pulumi import aws:m2/environment:Environment example 01234567890abcdef012345678
// ```
type Environment struct {
	pulumi.CustomResourceState

	ApplyChangesDuringMaintenanceWindow pulumi.BoolPtrOutput `pulumi:"applyChangesDuringMaintenanceWindow"`
	// ARN of the Environment.
	Arn         pulumi.StringOutput    `pulumi:"arn"`
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Engine type must be `microfocus` or `bluage`.
	EngineType pulumi.StringOutput `pulumi:"engineType"`
	// The specific version of the engine for the Environment.
	EngineVersion pulumi.StringOutput `pulumi:"engineVersion"`
	// The id of the Environment.
	EnvironmentId pulumi.StringOutput `pulumi:"environmentId"`
	// Force update the environment even if applications are running.
	ForceUpdate            pulumi.BoolPtrOutput                       `pulumi:"forceUpdate"`
	HighAvailabilityConfig EnvironmentHighAvailabilityConfigPtrOutput `pulumi:"highAvailabilityConfig"`
	// M2 Instance Type.
	//
	// The following arguments are optional:
	InstanceType pulumi.StringOutput `pulumi:"instanceType"`
	// ARN of the KMS key to use for the Environment.
	KmsKeyId pulumi.StringPtrOutput `pulumi:"kmsKeyId"`
	// ARN of the load balancer created by the Environment.
	LoadBalancerArn pulumi.StringOutput `pulumi:"loadBalancerArn"`
	// Name of the runtime environment. Must be unique within the account.
	Name pulumi.StringOutput `pulumi:"name"`
	// Configures the maintenance window that you want for the runtime environment. The maintenance window must have the format `ddd:hh24:mi-ddd:hh24:mi` and must be less than 24 hours. If not provided a random value will be used.
	PreferredMaintenanceWindow pulumi.StringOutput `pulumi:"preferredMaintenanceWindow"`
	// Allow applications deployed to this environment to be publicly accessible.
	PubliclyAccessible pulumi.BoolOutput `pulumi:"publiclyAccessible"`
	// List of security group ids.
	SecurityGroupIds     pulumi.StringArrayOutput                 `pulumi:"securityGroupIds"`
	StorageConfiguration EnvironmentStorageConfigurationPtrOutput `pulumi:"storageConfiguration"`
	// List of subnet ids to deploy environment to.
	SubnetIds pulumi.StringArrayOutput `pulumi:"subnetIds"`
	// Key-value tags for the place index. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapOutput       `pulumi:"tagsAll"`
	Timeouts EnvironmentTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewEnvironment registers a new resource with the given unique name, arguments, and options.
func NewEnvironment(ctx *pulumi.Context,
	name string, args *EnvironmentArgs, opts ...pulumi.ResourceOption) (*Environment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EngineType == nil {
		return nil, errors.New("invalid value for required argument 'EngineType'")
	}
	if args.InstanceType == nil {
		return nil, errors.New("invalid value for required argument 'InstanceType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Environment
	err := ctx.RegisterResource("aws:m2/environment:Environment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvironment gets an existing Environment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvironment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnvironmentState, opts ...pulumi.ResourceOption) (*Environment, error) {
	var resource Environment
	err := ctx.ReadResource("aws:m2/environment:Environment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Environment resources.
type environmentState struct {
	ApplyChangesDuringMaintenanceWindow *bool `pulumi:"applyChangesDuringMaintenanceWindow"`
	// ARN of the Environment.
	Arn         *string `pulumi:"arn"`
	Description *string `pulumi:"description"`
	// Engine type must be `microfocus` or `bluage`.
	EngineType *string `pulumi:"engineType"`
	// The specific version of the engine for the Environment.
	EngineVersion *string `pulumi:"engineVersion"`
	// The id of the Environment.
	EnvironmentId *string `pulumi:"environmentId"`
	// Force update the environment even if applications are running.
	ForceUpdate            *bool                              `pulumi:"forceUpdate"`
	HighAvailabilityConfig *EnvironmentHighAvailabilityConfig `pulumi:"highAvailabilityConfig"`
	// M2 Instance Type.
	//
	// The following arguments are optional:
	InstanceType *string `pulumi:"instanceType"`
	// ARN of the KMS key to use for the Environment.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// ARN of the load balancer created by the Environment.
	LoadBalancerArn *string `pulumi:"loadBalancerArn"`
	// Name of the runtime environment. Must be unique within the account.
	Name *string `pulumi:"name"`
	// Configures the maintenance window that you want for the runtime environment. The maintenance window must have the format `ddd:hh24:mi-ddd:hh24:mi` and must be less than 24 hours. If not provided a random value will be used.
	PreferredMaintenanceWindow *string `pulumi:"preferredMaintenanceWindow"`
	// Allow applications deployed to this environment to be publicly accessible.
	PubliclyAccessible *bool `pulumi:"publiclyAccessible"`
	// List of security group ids.
	SecurityGroupIds     []string                         `pulumi:"securityGroupIds"`
	StorageConfiguration *EnvironmentStorageConfiguration `pulumi:"storageConfiguration"`
	// List of subnet ids to deploy environment to.
	SubnetIds []string `pulumi:"subnetIds"`
	// Key-value tags for the place index. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Deprecated: Please use `tags` instead.
	TagsAll  map[string]string    `pulumi:"tagsAll"`
	Timeouts *EnvironmentTimeouts `pulumi:"timeouts"`
}

type EnvironmentState struct {
	ApplyChangesDuringMaintenanceWindow pulumi.BoolPtrInput
	// ARN of the Environment.
	Arn         pulumi.StringPtrInput
	Description pulumi.StringPtrInput
	// Engine type must be `microfocus` or `bluage`.
	EngineType pulumi.StringPtrInput
	// The specific version of the engine for the Environment.
	EngineVersion pulumi.StringPtrInput
	// The id of the Environment.
	EnvironmentId pulumi.StringPtrInput
	// Force update the environment even if applications are running.
	ForceUpdate            pulumi.BoolPtrInput
	HighAvailabilityConfig EnvironmentHighAvailabilityConfigPtrInput
	// M2 Instance Type.
	//
	// The following arguments are optional:
	InstanceType pulumi.StringPtrInput
	// ARN of the KMS key to use for the Environment.
	KmsKeyId pulumi.StringPtrInput
	// ARN of the load balancer created by the Environment.
	LoadBalancerArn pulumi.StringPtrInput
	// Name of the runtime environment. Must be unique within the account.
	Name pulumi.StringPtrInput
	// Configures the maintenance window that you want for the runtime environment. The maintenance window must have the format `ddd:hh24:mi-ddd:hh24:mi` and must be less than 24 hours. If not provided a random value will be used.
	PreferredMaintenanceWindow pulumi.StringPtrInput
	// Allow applications deployed to this environment to be publicly accessible.
	PubliclyAccessible pulumi.BoolPtrInput
	// List of security group ids.
	SecurityGroupIds     pulumi.StringArrayInput
	StorageConfiguration EnvironmentStorageConfigurationPtrInput
	// List of subnet ids to deploy environment to.
	SubnetIds pulumi.StringArrayInput
	// Key-value tags for the place index. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapInput
	Timeouts EnvironmentTimeoutsPtrInput
}

func (EnvironmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentState)(nil)).Elem()
}

type environmentArgs struct {
	ApplyChangesDuringMaintenanceWindow *bool   `pulumi:"applyChangesDuringMaintenanceWindow"`
	Description                         *string `pulumi:"description"`
	// Engine type must be `microfocus` or `bluage`.
	EngineType string `pulumi:"engineType"`
	// The specific version of the engine for the Environment.
	EngineVersion *string `pulumi:"engineVersion"`
	// Force update the environment even if applications are running.
	ForceUpdate            *bool                              `pulumi:"forceUpdate"`
	HighAvailabilityConfig *EnvironmentHighAvailabilityConfig `pulumi:"highAvailabilityConfig"`
	// M2 Instance Type.
	//
	// The following arguments are optional:
	InstanceType string `pulumi:"instanceType"`
	// ARN of the KMS key to use for the Environment.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Name of the runtime environment. Must be unique within the account.
	Name *string `pulumi:"name"`
	// Configures the maintenance window that you want for the runtime environment. The maintenance window must have the format `ddd:hh24:mi-ddd:hh24:mi` and must be less than 24 hours. If not provided a random value will be used.
	PreferredMaintenanceWindow *string `pulumi:"preferredMaintenanceWindow"`
	// Allow applications deployed to this environment to be publicly accessible.
	PubliclyAccessible *bool `pulumi:"publiclyAccessible"`
	// List of security group ids.
	SecurityGroupIds     []string                         `pulumi:"securityGroupIds"`
	StorageConfiguration *EnvironmentStorageConfiguration `pulumi:"storageConfiguration"`
	// List of subnet ids to deploy environment to.
	SubnetIds []string `pulumi:"subnetIds"`
	// Key-value tags for the place index. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     map[string]string    `pulumi:"tags"`
	Timeouts *EnvironmentTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a Environment resource.
type EnvironmentArgs struct {
	ApplyChangesDuringMaintenanceWindow pulumi.BoolPtrInput
	Description                         pulumi.StringPtrInput
	// Engine type must be `microfocus` or `bluage`.
	EngineType pulumi.StringInput
	// The specific version of the engine for the Environment.
	EngineVersion pulumi.StringPtrInput
	// Force update the environment even if applications are running.
	ForceUpdate            pulumi.BoolPtrInput
	HighAvailabilityConfig EnvironmentHighAvailabilityConfigPtrInput
	// M2 Instance Type.
	//
	// The following arguments are optional:
	InstanceType pulumi.StringInput
	// ARN of the KMS key to use for the Environment.
	KmsKeyId pulumi.StringPtrInput
	// Name of the runtime environment. Must be unique within the account.
	Name pulumi.StringPtrInput
	// Configures the maintenance window that you want for the runtime environment. The maintenance window must have the format `ddd:hh24:mi-ddd:hh24:mi` and must be less than 24 hours. If not provided a random value will be used.
	PreferredMaintenanceWindow pulumi.StringPtrInput
	// Allow applications deployed to this environment to be publicly accessible.
	PubliclyAccessible pulumi.BoolPtrInput
	// List of security group ids.
	SecurityGroupIds     pulumi.StringArrayInput
	StorageConfiguration EnvironmentStorageConfigurationPtrInput
	// List of subnet ids to deploy environment to.
	SubnetIds pulumi.StringArrayInput
	// Key-value tags for the place index. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     pulumi.StringMapInput
	Timeouts EnvironmentTimeoutsPtrInput
}

func (EnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentArgs)(nil)).Elem()
}

type EnvironmentInput interface {
	pulumi.Input

	ToEnvironmentOutput() EnvironmentOutput
	ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput
}

func (*Environment) ElementType() reflect.Type {
	return reflect.TypeOf((**Environment)(nil)).Elem()
}

func (i *Environment) ToEnvironmentOutput() EnvironmentOutput {
	return i.ToEnvironmentOutputWithContext(context.Background())
}

func (i *Environment) ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentOutput)
}

// EnvironmentArrayInput is an input type that accepts EnvironmentArray and EnvironmentArrayOutput values.
// You can construct a concrete instance of `EnvironmentArrayInput` via:
//
//	EnvironmentArray{ EnvironmentArgs{...} }
type EnvironmentArrayInput interface {
	pulumi.Input

	ToEnvironmentArrayOutput() EnvironmentArrayOutput
	ToEnvironmentArrayOutputWithContext(context.Context) EnvironmentArrayOutput
}

type EnvironmentArray []EnvironmentInput

func (EnvironmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Environment)(nil)).Elem()
}

func (i EnvironmentArray) ToEnvironmentArrayOutput() EnvironmentArrayOutput {
	return i.ToEnvironmentArrayOutputWithContext(context.Background())
}

func (i EnvironmentArray) ToEnvironmentArrayOutputWithContext(ctx context.Context) EnvironmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentArrayOutput)
}

// EnvironmentMapInput is an input type that accepts EnvironmentMap and EnvironmentMapOutput values.
// You can construct a concrete instance of `EnvironmentMapInput` via:
//
//	EnvironmentMap{ "key": EnvironmentArgs{...} }
type EnvironmentMapInput interface {
	pulumi.Input

	ToEnvironmentMapOutput() EnvironmentMapOutput
	ToEnvironmentMapOutputWithContext(context.Context) EnvironmentMapOutput
}

type EnvironmentMap map[string]EnvironmentInput

func (EnvironmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Environment)(nil)).Elem()
}

func (i EnvironmentMap) ToEnvironmentMapOutput() EnvironmentMapOutput {
	return i.ToEnvironmentMapOutputWithContext(context.Background())
}

func (i EnvironmentMap) ToEnvironmentMapOutputWithContext(ctx context.Context) EnvironmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentMapOutput)
}

type EnvironmentOutput struct{ *pulumi.OutputState }

func (EnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Environment)(nil)).Elem()
}

func (o EnvironmentOutput) ToEnvironmentOutput() EnvironmentOutput {
	return o
}

func (o EnvironmentOutput) ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput {
	return o
}

func (o EnvironmentOutput) ApplyChangesDuringMaintenanceWindow() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Environment) pulumi.BoolPtrOutput { return v.ApplyChangesDuringMaintenanceWindow }).(pulumi.BoolPtrOutput)
}

// ARN of the Environment.
func (o EnvironmentOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o EnvironmentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Engine type must be `microfocus` or `bluage`.
func (o EnvironmentOutput) EngineType() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.EngineType }).(pulumi.StringOutput)
}

// The specific version of the engine for the Environment.
func (o EnvironmentOutput) EngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.EngineVersion }).(pulumi.StringOutput)
}

// The id of the Environment.
func (o EnvironmentOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.EnvironmentId }).(pulumi.StringOutput)
}

// Force update the environment even if applications are running.
func (o EnvironmentOutput) ForceUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Environment) pulumi.BoolPtrOutput { return v.ForceUpdate }).(pulumi.BoolPtrOutput)
}

func (o EnvironmentOutput) HighAvailabilityConfig() EnvironmentHighAvailabilityConfigPtrOutput {
	return o.ApplyT(func(v *Environment) EnvironmentHighAvailabilityConfigPtrOutput { return v.HighAvailabilityConfig }).(EnvironmentHighAvailabilityConfigPtrOutput)
}

// M2 Instance Type.
//
// The following arguments are optional:
func (o EnvironmentOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.InstanceType }).(pulumi.StringOutput)
}

// ARN of the KMS key to use for the Environment.
func (o EnvironmentOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringPtrOutput { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

// ARN of the load balancer created by the Environment.
func (o EnvironmentOutput) LoadBalancerArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.LoadBalancerArn }).(pulumi.StringOutput)
}

// Name of the runtime environment. Must be unique within the account.
func (o EnvironmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Configures the maintenance window that you want for the runtime environment. The maintenance window must have the format `ddd:hh24:mi-ddd:hh24:mi` and must be less than 24 hours. If not provided a random value will be used.
func (o EnvironmentOutput) PreferredMaintenanceWindow() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.PreferredMaintenanceWindow }).(pulumi.StringOutput)
}

// Allow applications deployed to this environment to be publicly accessible.
func (o EnvironmentOutput) PubliclyAccessible() pulumi.BoolOutput {
	return o.ApplyT(func(v *Environment) pulumi.BoolOutput { return v.PubliclyAccessible }).(pulumi.BoolOutput)
}

// List of security group ids.
func (o EnvironmentOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

func (o EnvironmentOutput) StorageConfiguration() EnvironmentStorageConfigurationPtrOutput {
	return o.ApplyT(func(v *Environment) EnvironmentStorageConfigurationPtrOutput { return v.StorageConfiguration }).(EnvironmentStorageConfigurationPtrOutput)
}

// List of subnet ids to deploy environment to.
func (o EnvironmentOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringArrayOutput { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// Key-value tags for the place index. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o EnvironmentOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Deprecated: Please use `tags` instead.
func (o EnvironmentOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o EnvironmentOutput) Timeouts() EnvironmentTimeoutsPtrOutput {
	return o.ApplyT(func(v *Environment) EnvironmentTimeoutsPtrOutput { return v.Timeouts }).(EnvironmentTimeoutsPtrOutput)
}

type EnvironmentArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Environment)(nil)).Elem()
}

func (o EnvironmentArrayOutput) ToEnvironmentArrayOutput() EnvironmentArrayOutput {
	return o
}

func (o EnvironmentArrayOutput) ToEnvironmentArrayOutputWithContext(ctx context.Context) EnvironmentArrayOutput {
	return o
}

func (o EnvironmentArrayOutput) Index(i pulumi.IntInput) EnvironmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Environment {
		return vs[0].([]*Environment)[vs[1].(int)]
	}).(EnvironmentOutput)
}

type EnvironmentMapOutput struct{ *pulumi.OutputState }

func (EnvironmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Environment)(nil)).Elem()
}

func (o EnvironmentMapOutput) ToEnvironmentMapOutput() EnvironmentMapOutput {
	return o
}

func (o EnvironmentMapOutput) ToEnvironmentMapOutputWithContext(ctx context.Context) EnvironmentMapOutput {
	return o
}

func (o EnvironmentMapOutput) MapIndex(k pulumi.StringInput) EnvironmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Environment {
		return vs[0].(map[string]*Environment)[vs[1].(string)]
	}).(EnvironmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentInput)(nil)).Elem(), &Environment{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentArrayInput)(nil)).Elem(), EnvironmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentMapInput)(nil)).Elem(), EnvironmentMap{})
	pulumi.RegisterOutputType(EnvironmentOutput{})
	pulumi.RegisterOutputType(EnvironmentArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentMapOutput{})
}
