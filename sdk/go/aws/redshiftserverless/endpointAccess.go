// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshiftserverless

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new Amazon Redshift Serverless Endpoint Access.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/redshiftserverless"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := redshiftserverless.NewEndpointAccess(ctx, "example", &redshiftserverless.EndpointAccessArgs{
//				EndpointName:  pulumi.String("example"),
//				WorkgroupName: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Redshift Serverless Endpoint Access using the `endpoint_name`. For example:
//
// ```sh
//
//	$ pulumi import aws:redshiftserverless/endpointAccess:EndpointAccess example example
//
// ```
type EndpointAccess struct {
	pulumi.CustomResourceState

	// The DNS address of the VPC endpoint.
	Address pulumi.StringOutput `pulumi:"address"`
	// Amazon Resource Name (ARN) of the Redshift Serverless Endpoint Access.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The name of the endpoint.
	EndpointName pulumi.StringOutput `pulumi:"endpointName"`
	// The port that Amazon Redshift Serverless listens on.
	Port pulumi.IntOutput `pulumi:"port"`
	// An array of VPC subnet IDs to associate with the endpoint.
	SubnetIds pulumi.StringArrayOutput `pulumi:"subnetIds"`
	// The VPC endpoint or the Redshift Serverless workgroup. See `VPC Endpoint` below.
	VpcEndpoints EndpointAccessVpcEndpointArrayOutput `pulumi:"vpcEndpoints"`
	// An array of security group IDs to associate with the workgroup.
	VpcSecurityGroupIds pulumi.StringArrayOutput `pulumi:"vpcSecurityGroupIds"`
	// The name of the workgroup.
	WorkgroupName pulumi.StringOutput `pulumi:"workgroupName"`
}

// NewEndpointAccess registers a new resource with the given unique name, arguments, and options.
func NewEndpointAccess(ctx *pulumi.Context,
	name string, args *EndpointAccessArgs, opts ...pulumi.ResourceOption) (*EndpointAccess, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EndpointName == nil {
		return nil, errors.New("invalid value for required argument 'EndpointName'")
	}
	if args.SubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'SubnetIds'")
	}
	if args.WorkgroupName == nil {
		return nil, errors.New("invalid value for required argument 'WorkgroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EndpointAccess
	err := ctx.RegisterResource("aws:redshiftserverless/endpointAccess:EndpointAccess", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEndpointAccess gets an existing EndpointAccess resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEndpointAccess(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EndpointAccessState, opts ...pulumi.ResourceOption) (*EndpointAccess, error) {
	var resource EndpointAccess
	err := ctx.ReadResource("aws:redshiftserverless/endpointAccess:EndpointAccess", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EndpointAccess resources.
type endpointAccessState struct {
	// The DNS address of the VPC endpoint.
	Address *string `pulumi:"address"`
	// Amazon Resource Name (ARN) of the Redshift Serverless Endpoint Access.
	Arn *string `pulumi:"arn"`
	// The name of the endpoint.
	EndpointName *string `pulumi:"endpointName"`
	// The port that Amazon Redshift Serverless listens on.
	Port *int `pulumi:"port"`
	// An array of VPC subnet IDs to associate with the endpoint.
	SubnetIds []string `pulumi:"subnetIds"`
	// The VPC endpoint or the Redshift Serverless workgroup. See `VPC Endpoint` below.
	VpcEndpoints []EndpointAccessVpcEndpoint `pulumi:"vpcEndpoints"`
	// An array of security group IDs to associate with the workgroup.
	VpcSecurityGroupIds []string `pulumi:"vpcSecurityGroupIds"`
	// The name of the workgroup.
	WorkgroupName *string `pulumi:"workgroupName"`
}

type EndpointAccessState struct {
	// The DNS address of the VPC endpoint.
	Address pulumi.StringPtrInput
	// Amazon Resource Name (ARN) of the Redshift Serverless Endpoint Access.
	Arn pulumi.StringPtrInput
	// The name of the endpoint.
	EndpointName pulumi.StringPtrInput
	// The port that Amazon Redshift Serverless listens on.
	Port pulumi.IntPtrInput
	// An array of VPC subnet IDs to associate with the endpoint.
	SubnetIds pulumi.StringArrayInput
	// The VPC endpoint or the Redshift Serverless workgroup. See `VPC Endpoint` below.
	VpcEndpoints EndpointAccessVpcEndpointArrayInput
	// An array of security group IDs to associate with the workgroup.
	VpcSecurityGroupIds pulumi.StringArrayInput
	// The name of the workgroup.
	WorkgroupName pulumi.StringPtrInput
}

func (EndpointAccessState) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointAccessState)(nil)).Elem()
}

type endpointAccessArgs struct {
	// The name of the endpoint.
	EndpointName string `pulumi:"endpointName"`
	// An array of VPC subnet IDs to associate with the endpoint.
	SubnetIds []string `pulumi:"subnetIds"`
	// An array of security group IDs to associate with the workgroup.
	VpcSecurityGroupIds []string `pulumi:"vpcSecurityGroupIds"`
	// The name of the workgroup.
	WorkgroupName string `pulumi:"workgroupName"`
}

// The set of arguments for constructing a EndpointAccess resource.
type EndpointAccessArgs struct {
	// The name of the endpoint.
	EndpointName pulumi.StringInput
	// An array of VPC subnet IDs to associate with the endpoint.
	SubnetIds pulumi.StringArrayInput
	// An array of security group IDs to associate with the workgroup.
	VpcSecurityGroupIds pulumi.StringArrayInput
	// The name of the workgroup.
	WorkgroupName pulumi.StringInput
}

func (EndpointAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointAccessArgs)(nil)).Elem()
}

type EndpointAccessInput interface {
	pulumi.Input

	ToEndpointAccessOutput() EndpointAccessOutput
	ToEndpointAccessOutputWithContext(ctx context.Context) EndpointAccessOutput
}

func (*EndpointAccess) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointAccess)(nil)).Elem()
}

func (i *EndpointAccess) ToEndpointAccessOutput() EndpointAccessOutput {
	return i.ToEndpointAccessOutputWithContext(context.Background())
}

func (i *EndpointAccess) ToEndpointAccessOutputWithContext(ctx context.Context) EndpointAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAccessOutput)
}

// EndpointAccessArrayInput is an input type that accepts EndpointAccessArray and EndpointAccessArrayOutput values.
// You can construct a concrete instance of `EndpointAccessArrayInput` via:
//
//	EndpointAccessArray{ EndpointAccessArgs{...} }
type EndpointAccessArrayInput interface {
	pulumi.Input

	ToEndpointAccessArrayOutput() EndpointAccessArrayOutput
	ToEndpointAccessArrayOutputWithContext(context.Context) EndpointAccessArrayOutput
}

type EndpointAccessArray []EndpointAccessInput

func (EndpointAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EndpointAccess)(nil)).Elem()
}

func (i EndpointAccessArray) ToEndpointAccessArrayOutput() EndpointAccessArrayOutput {
	return i.ToEndpointAccessArrayOutputWithContext(context.Background())
}

func (i EndpointAccessArray) ToEndpointAccessArrayOutputWithContext(ctx context.Context) EndpointAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAccessArrayOutput)
}

// EndpointAccessMapInput is an input type that accepts EndpointAccessMap and EndpointAccessMapOutput values.
// You can construct a concrete instance of `EndpointAccessMapInput` via:
//
//	EndpointAccessMap{ "key": EndpointAccessArgs{...} }
type EndpointAccessMapInput interface {
	pulumi.Input

	ToEndpointAccessMapOutput() EndpointAccessMapOutput
	ToEndpointAccessMapOutputWithContext(context.Context) EndpointAccessMapOutput
}

type EndpointAccessMap map[string]EndpointAccessInput

func (EndpointAccessMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EndpointAccess)(nil)).Elem()
}

func (i EndpointAccessMap) ToEndpointAccessMapOutput() EndpointAccessMapOutput {
	return i.ToEndpointAccessMapOutputWithContext(context.Background())
}

func (i EndpointAccessMap) ToEndpointAccessMapOutputWithContext(ctx context.Context) EndpointAccessMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAccessMapOutput)
}

type EndpointAccessOutput struct{ *pulumi.OutputState }

func (EndpointAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointAccess)(nil)).Elem()
}

func (o EndpointAccessOutput) ToEndpointAccessOutput() EndpointAccessOutput {
	return o
}

func (o EndpointAccessOutput) ToEndpointAccessOutputWithContext(ctx context.Context) EndpointAccessOutput {
	return o
}

// The DNS address of the VPC endpoint.
func (o EndpointAccessOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *EndpointAccess) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// Amazon Resource Name (ARN) of the Redshift Serverless Endpoint Access.
func (o EndpointAccessOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *EndpointAccess) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The name of the endpoint.
func (o EndpointAccessOutput) EndpointName() pulumi.StringOutput {
	return o.ApplyT(func(v *EndpointAccess) pulumi.StringOutput { return v.EndpointName }).(pulumi.StringOutput)
}

// The port that Amazon Redshift Serverless listens on.
func (o EndpointAccessOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *EndpointAccess) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// An array of VPC subnet IDs to associate with the endpoint.
func (o EndpointAccessOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EndpointAccess) pulumi.StringArrayOutput { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// The VPC endpoint or the Redshift Serverless workgroup. See `VPC Endpoint` below.
func (o EndpointAccessOutput) VpcEndpoints() EndpointAccessVpcEndpointArrayOutput {
	return o.ApplyT(func(v *EndpointAccess) EndpointAccessVpcEndpointArrayOutput { return v.VpcEndpoints }).(EndpointAccessVpcEndpointArrayOutput)
}

// An array of security group IDs to associate with the workgroup.
func (o EndpointAccessOutput) VpcSecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EndpointAccess) pulumi.StringArrayOutput { return v.VpcSecurityGroupIds }).(pulumi.StringArrayOutput)
}

// The name of the workgroup.
func (o EndpointAccessOutput) WorkgroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *EndpointAccess) pulumi.StringOutput { return v.WorkgroupName }).(pulumi.StringOutput)
}

type EndpointAccessArrayOutput struct{ *pulumi.OutputState }

func (EndpointAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EndpointAccess)(nil)).Elem()
}

func (o EndpointAccessArrayOutput) ToEndpointAccessArrayOutput() EndpointAccessArrayOutput {
	return o
}

func (o EndpointAccessArrayOutput) ToEndpointAccessArrayOutputWithContext(ctx context.Context) EndpointAccessArrayOutput {
	return o
}

func (o EndpointAccessArrayOutput) Index(i pulumi.IntInput) EndpointAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EndpointAccess {
		return vs[0].([]*EndpointAccess)[vs[1].(int)]
	}).(EndpointAccessOutput)
}

type EndpointAccessMapOutput struct{ *pulumi.OutputState }

func (EndpointAccessMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EndpointAccess)(nil)).Elem()
}

func (o EndpointAccessMapOutput) ToEndpointAccessMapOutput() EndpointAccessMapOutput {
	return o
}

func (o EndpointAccessMapOutput) ToEndpointAccessMapOutputWithContext(ctx context.Context) EndpointAccessMapOutput {
	return o
}

func (o EndpointAccessMapOutput) MapIndex(k pulumi.StringInput) EndpointAccessOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EndpointAccess {
		return vs[0].(map[string]*EndpointAccess)[vs[1].(string)]
	}).(EndpointAccessOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointAccessInput)(nil)).Elem(), &EndpointAccess{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointAccessArrayInput)(nil)).Elem(), EndpointAccessArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointAccessMapInput)(nil)).Elem(), EndpointAccessMap{})
	pulumi.RegisterOutputType(EndpointAccessOutput{})
	pulumi.RegisterOutputType(EndpointAccessArrayOutput{})
	pulumi.RegisterOutputType(EndpointAccessMapOutput{})
}
