// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshiftserverless

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Workgroup struct {
	pulumi.CustomResourceState

	Arn                pulumi.StringOutput                 `pulumi:"arn"`
	BaseCapacity       pulumi.IntOutput                    `pulumi:"baseCapacity"`
	ConfigParameters   WorkgroupConfigParameterArrayOutput `pulumi:"configParameters"`
	Endpoints          WorkgroupEndpointArrayOutput        `pulumi:"endpoints"`
	EnhancedVpcRouting pulumi.BoolPtrOutput                `pulumi:"enhancedVpcRouting"`
	NamespaceName      pulumi.StringOutput                 `pulumi:"namespaceName"`
	PubliclyAccessible pulumi.BoolPtrOutput                `pulumi:"publiclyAccessible"`
	SecurityGroupIds   pulumi.StringArrayOutput            `pulumi:"securityGroupIds"`
	SubnetIds          pulumi.StringArrayOutput            `pulumi:"subnetIds"`
	Tags               pulumi.StringMapOutput              `pulumi:"tags"`
	TagsAll            pulumi.StringMapOutput              `pulumi:"tagsAll"`
	WorkgroupId        pulumi.StringOutput                 `pulumi:"workgroupId"`
	WorkgroupName      pulumi.StringOutput                 `pulumi:"workgroupName"`
}

// NewWorkgroup registers a new resource with the given unique name, arguments, and options.
func NewWorkgroup(ctx *pulumi.Context,
	name string, args *WorkgroupArgs, opts ...pulumi.ResourceOption) (*Workgroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NamespaceName == nil {
		return nil, errors.New("invalid value for required argument 'NamespaceName'")
	}
	if args.WorkgroupName == nil {
		return nil, errors.New("invalid value for required argument 'WorkgroupName'")
	}
	var resource Workgroup
	err := ctx.RegisterResource("aws:redshiftserverless/workgroup:Workgroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkgroup gets an existing Workgroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkgroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkgroupState, opts ...pulumi.ResourceOption) (*Workgroup, error) {
	var resource Workgroup
	err := ctx.ReadResource("aws:redshiftserverless/workgroup:Workgroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Workgroup resources.
type workgroupState struct {
	Arn                *string                    `pulumi:"arn"`
	BaseCapacity       *int                       `pulumi:"baseCapacity"`
	ConfigParameters   []WorkgroupConfigParameter `pulumi:"configParameters"`
	Endpoints          []WorkgroupEndpoint        `pulumi:"endpoints"`
	EnhancedVpcRouting *bool                      `pulumi:"enhancedVpcRouting"`
	NamespaceName      *string                    `pulumi:"namespaceName"`
	PubliclyAccessible *bool                      `pulumi:"publiclyAccessible"`
	SecurityGroupIds   []string                   `pulumi:"securityGroupIds"`
	SubnetIds          []string                   `pulumi:"subnetIds"`
	Tags               map[string]string          `pulumi:"tags"`
	TagsAll            map[string]string          `pulumi:"tagsAll"`
	WorkgroupId        *string                    `pulumi:"workgroupId"`
	WorkgroupName      *string                    `pulumi:"workgroupName"`
}

type WorkgroupState struct {
	Arn                pulumi.StringPtrInput
	BaseCapacity       pulumi.IntPtrInput
	ConfigParameters   WorkgroupConfigParameterArrayInput
	Endpoints          WorkgroupEndpointArrayInput
	EnhancedVpcRouting pulumi.BoolPtrInput
	NamespaceName      pulumi.StringPtrInput
	PubliclyAccessible pulumi.BoolPtrInput
	SecurityGroupIds   pulumi.StringArrayInput
	SubnetIds          pulumi.StringArrayInput
	Tags               pulumi.StringMapInput
	TagsAll            pulumi.StringMapInput
	WorkgroupId        pulumi.StringPtrInput
	WorkgroupName      pulumi.StringPtrInput
}

func (WorkgroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*workgroupState)(nil)).Elem()
}

type workgroupArgs struct {
	BaseCapacity       *int                       `pulumi:"baseCapacity"`
	ConfigParameters   []WorkgroupConfigParameter `pulumi:"configParameters"`
	EnhancedVpcRouting *bool                      `pulumi:"enhancedVpcRouting"`
	NamespaceName      string                     `pulumi:"namespaceName"`
	PubliclyAccessible *bool                      `pulumi:"publiclyAccessible"`
	SecurityGroupIds   []string                   `pulumi:"securityGroupIds"`
	SubnetIds          []string                   `pulumi:"subnetIds"`
	Tags               map[string]string          `pulumi:"tags"`
	WorkgroupName      string                     `pulumi:"workgroupName"`
}

// The set of arguments for constructing a Workgroup resource.
type WorkgroupArgs struct {
	BaseCapacity       pulumi.IntPtrInput
	ConfigParameters   WorkgroupConfigParameterArrayInput
	EnhancedVpcRouting pulumi.BoolPtrInput
	NamespaceName      pulumi.StringInput
	PubliclyAccessible pulumi.BoolPtrInput
	SecurityGroupIds   pulumi.StringArrayInput
	SubnetIds          pulumi.StringArrayInput
	Tags               pulumi.StringMapInput
	WorkgroupName      pulumi.StringInput
}

func (WorkgroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workgroupArgs)(nil)).Elem()
}

type WorkgroupInput interface {
	pulumi.Input

	ToWorkgroupOutput() WorkgroupOutput
	ToWorkgroupOutputWithContext(ctx context.Context) WorkgroupOutput
}

func (*Workgroup) ElementType() reflect.Type {
	return reflect.TypeOf((**Workgroup)(nil)).Elem()
}

func (i *Workgroup) ToWorkgroupOutput() WorkgroupOutput {
	return i.ToWorkgroupOutputWithContext(context.Background())
}

func (i *Workgroup) ToWorkgroupOutputWithContext(ctx context.Context) WorkgroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkgroupOutput)
}

// WorkgroupArrayInput is an input type that accepts WorkgroupArray and WorkgroupArrayOutput values.
// You can construct a concrete instance of `WorkgroupArrayInput` via:
//
//	WorkgroupArray{ WorkgroupArgs{...} }
type WorkgroupArrayInput interface {
	pulumi.Input

	ToWorkgroupArrayOutput() WorkgroupArrayOutput
	ToWorkgroupArrayOutputWithContext(context.Context) WorkgroupArrayOutput
}

type WorkgroupArray []WorkgroupInput

func (WorkgroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Workgroup)(nil)).Elem()
}

func (i WorkgroupArray) ToWorkgroupArrayOutput() WorkgroupArrayOutput {
	return i.ToWorkgroupArrayOutputWithContext(context.Background())
}

func (i WorkgroupArray) ToWorkgroupArrayOutputWithContext(ctx context.Context) WorkgroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkgroupArrayOutput)
}

// WorkgroupMapInput is an input type that accepts WorkgroupMap and WorkgroupMapOutput values.
// You can construct a concrete instance of `WorkgroupMapInput` via:
//
//	WorkgroupMap{ "key": WorkgroupArgs{...} }
type WorkgroupMapInput interface {
	pulumi.Input

	ToWorkgroupMapOutput() WorkgroupMapOutput
	ToWorkgroupMapOutputWithContext(context.Context) WorkgroupMapOutput
}

type WorkgroupMap map[string]WorkgroupInput

func (WorkgroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Workgroup)(nil)).Elem()
}

func (i WorkgroupMap) ToWorkgroupMapOutput() WorkgroupMapOutput {
	return i.ToWorkgroupMapOutputWithContext(context.Background())
}

func (i WorkgroupMap) ToWorkgroupMapOutputWithContext(ctx context.Context) WorkgroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkgroupMapOutput)
}

type WorkgroupOutput struct{ *pulumi.OutputState }

func (WorkgroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Workgroup)(nil)).Elem()
}

func (o WorkgroupOutput) ToWorkgroupOutput() WorkgroupOutput {
	return o
}

func (o WorkgroupOutput) ToWorkgroupOutputWithContext(ctx context.Context) WorkgroupOutput {
	return o
}

func (o WorkgroupOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Workgroup) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o WorkgroupOutput) BaseCapacity() pulumi.IntOutput {
	return o.ApplyT(func(v *Workgroup) pulumi.IntOutput { return v.BaseCapacity }).(pulumi.IntOutput)
}

func (o WorkgroupOutput) ConfigParameters() WorkgroupConfigParameterArrayOutput {
	return o.ApplyT(func(v *Workgroup) WorkgroupConfigParameterArrayOutput { return v.ConfigParameters }).(WorkgroupConfigParameterArrayOutput)
}

func (o WorkgroupOutput) Endpoints() WorkgroupEndpointArrayOutput {
	return o.ApplyT(func(v *Workgroup) WorkgroupEndpointArrayOutput { return v.Endpoints }).(WorkgroupEndpointArrayOutput)
}

func (o WorkgroupOutput) EnhancedVpcRouting() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Workgroup) pulumi.BoolPtrOutput { return v.EnhancedVpcRouting }).(pulumi.BoolPtrOutput)
}

func (o WorkgroupOutput) NamespaceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Workgroup) pulumi.StringOutput { return v.NamespaceName }).(pulumi.StringOutput)
}

func (o WorkgroupOutput) PubliclyAccessible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Workgroup) pulumi.BoolPtrOutput { return v.PubliclyAccessible }).(pulumi.BoolPtrOutput)
}

func (o WorkgroupOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Workgroup) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

func (o WorkgroupOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Workgroup) pulumi.StringArrayOutput { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

func (o WorkgroupOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Workgroup) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o WorkgroupOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Workgroup) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o WorkgroupOutput) WorkgroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Workgroup) pulumi.StringOutput { return v.WorkgroupId }).(pulumi.StringOutput)
}

func (o WorkgroupOutput) WorkgroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Workgroup) pulumi.StringOutput { return v.WorkgroupName }).(pulumi.StringOutput)
}

type WorkgroupArrayOutput struct{ *pulumi.OutputState }

func (WorkgroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Workgroup)(nil)).Elem()
}

func (o WorkgroupArrayOutput) ToWorkgroupArrayOutput() WorkgroupArrayOutput {
	return o
}

func (o WorkgroupArrayOutput) ToWorkgroupArrayOutputWithContext(ctx context.Context) WorkgroupArrayOutput {
	return o
}

func (o WorkgroupArrayOutput) Index(i pulumi.IntInput) WorkgroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Workgroup {
		return vs[0].([]*Workgroup)[vs[1].(int)]
	}).(WorkgroupOutput)
}

type WorkgroupMapOutput struct{ *pulumi.OutputState }

func (WorkgroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Workgroup)(nil)).Elem()
}

func (o WorkgroupMapOutput) ToWorkgroupMapOutput() WorkgroupMapOutput {
	return o
}

func (o WorkgroupMapOutput) ToWorkgroupMapOutputWithContext(ctx context.Context) WorkgroupMapOutput {
	return o
}

func (o WorkgroupMapOutput) MapIndex(k pulumi.StringInput) WorkgroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Workgroup {
		return vs[0].(map[string]*Workgroup)[vs[1].(string)]
	}).(WorkgroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkgroupInput)(nil)).Elem(), &Workgroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkgroupArrayInput)(nil)).Elem(), WorkgroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkgroupMapInput)(nil)).Elem(), WorkgroupMap{})
	pulumi.RegisterOutputType(WorkgroupOutput{})
	pulumi.RegisterOutputType(WorkgroupArrayOutput{})
	pulumi.RegisterOutputType(WorkgroupMapOutput{})
}
