// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshiftserverless

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a new Amazon Redshift Serverless Usage Limit.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/redshiftserverless"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleWorkgroup, err := redshiftserverless.NewWorkgroup(ctx, "exampleWorkgroup", &redshiftserverless.WorkgroupArgs{
//				NamespaceName: pulumi.Any(aws_redshiftserverless_namespace.Example.Namespace_name),
//				WorkgroupName: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = redshiftserverless.NewUsageLimit(ctx, "exampleUsageLimit", &redshiftserverless.UsageLimitArgs{
//				ResourceArn: exampleWorkgroup.Arn,
//				UsageType:   pulumi.String("serverless-compute"),
//				Amount:      pulumi.Int(60),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Redshift Serverless Usage Limits using the `id`. For example:
//
// ```sh
//
//	$ pulumi import aws:redshiftserverless/usageLimit:UsageLimit example example-id
//
// ```
type UsageLimit struct {
	pulumi.CustomResourceState

	// The limit amount. If time-based, this amount is in Redshift Processing Units (RPU) consumed per hour. If data-based, this amount is in terabytes (TB) of data transferred between Regions in cross-account sharing. The value must be a positive number.
	Amount pulumi.IntOutput `pulumi:"amount"`
	// Amazon Resource Name (ARN) of the Redshift Serverless Usage Limit.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The action that Amazon Redshift Serverless takes when the limit is reached. Valid values are `log`, `emit-metric`, and `deactivate`. The default is `log`.
	BreachAction pulumi.StringPtrOutput `pulumi:"breachAction"`
	// The time period that the amount applies to. A weekly period begins on Sunday. Valid values are `daily`, `weekly`, and `monthly`. The default is `monthly`.
	Period pulumi.StringPtrOutput `pulumi:"period"`
	// The Amazon Resource Name (ARN) of the Amazon Redshift Serverless resource to create the usage limit for.
	ResourceArn pulumi.StringOutput `pulumi:"resourceArn"`
	// The type of Amazon Redshift Serverless usage to create a usage limit for. Valid values are `serverless-compute` or `cross-region-datasharing`.
	UsageType pulumi.StringOutput `pulumi:"usageType"`
}

// NewUsageLimit registers a new resource with the given unique name, arguments, and options.
func NewUsageLimit(ctx *pulumi.Context,
	name string, args *UsageLimitArgs, opts ...pulumi.ResourceOption) (*UsageLimit, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Amount == nil {
		return nil, errors.New("invalid value for required argument 'Amount'")
	}
	if args.ResourceArn == nil {
		return nil, errors.New("invalid value for required argument 'ResourceArn'")
	}
	if args.UsageType == nil {
		return nil, errors.New("invalid value for required argument 'UsageType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UsageLimit
	err := ctx.RegisterResource("aws:redshiftserverless/usageLimit:UsageLimit", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUsageLimit gets an existing UsageLimit resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUsageLimit(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UsageLimitState, opts ...pulumi.ResourceOption) (*UsageLimit, error) {
	var resource UsageLimit
	err := ctx.ReadResource("aws:redshiftserverless/usageLimit:UsageLimit", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UsageLimit resources.
type usageLimitState struct {
	// The limit amount. If time-based, this amount is in Redshift Processing Units (RPU) consumed per hour. If data-based, this amount is in terabytes (TB) of data transferred between Regions in cross-account sharing. The value must be a positive number.
	Amount *int `pulumi:"amount"`
	// Amazon Resource Name (ARN) of the Redshift Serverless Usage Limit.
	Arn *string `pulumi:"arn"`
	// The action that Amazon Redshift Serverless takes when the limit is reached. Valid values are `log`, `emit-metric`, and `deactivate`. The default is `log`.
	BreachAction *string `pulumi:"breachAction"`
	// The time period that the amount applies to. A weekly period begins on Sunday. Valid values are `daily`, `weekly`, and `monthly`. The default is `monthly`.
	Period *string `pulumi:"period"`
	// The Amazon Resource Name (ARN) of the Amazon Redshift Serverless resource to create the usage limit for.
	ResourceArn *string `pulumi:"resourceArn"`
	// The type of Amazon Redshift Serverless usage to create a usage limit for. Valid values are `serverless-compute` or `cross-region-datasharing`.
	UsageType *string `pulumi:"usageType"`
}

type UsageLimitState struct {
	// The limit amount. If time-based, this amount is in Redshift Processing Units (RPU) consumed per hour. If data-based, this amount is in terabytes (TB) of data transferred between Regions in cross-account sharing. The value must be a positive number.
	Amount pulumi.IntPtrInput
	// Amazon Resource Name (ARN) of the Redshift Serverless Usage Limit.
	Arn pulumi.StringPtrInput
	// The action that Amazon Redshift Serverless takes when the limit is reached. Valid values are `log`, `emit-metric`, and `deactivate`. The default is `log`.
	BreachAction pulumi.StringPtrInput
	// The time period that the amount applies to. A weekly period begins on Sunday. Valid values are `daily`, `weekly`, and `monthly`. The default is `monthly`.
	Period pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) of the Amazon Redshift Serverless resource to create the usage limit for.
	ResourceArn pulumi.StringPtrInput
	// The type of Amazon Redshift Serverless usage to create a usage limit for. Valid values are `serverless-compute` or `cross-region-datasharing`.
	UsageType pulumi.StringPtrInput
}

func (UsageLimitState) ElementType() reflect.Type {
	return reflect.TypeOf((*usageLimitState)(nil)).Elem()
}

type usageLimitArgs struct {
	// The limit amount. If time-based, this amount is in Redshift Processing Units (RPU) consumed per hour. If data-based, this amount is in terabytes (TB) of data transferred between Regions in cross-account sharing. The value must be a positive number.
	Amount int `pulumi:"amount"`
	// The action that Amazon Redshift Serverless takes when the limit is reached. Valid values are `log`, `emit-metric`, and `deactivate`. The default is `log`.
	BreachAction *string `pulumi:"breachAction"`
	// The time period that the amount applies to. A weekly period begins on Sunday. Valid values are `daily`, `weekly`, and `monthly`. The default is `monthly`.
	Period *string `pulumi:"period"`
	// The Amazon Resource Name (ARN) of the Amazon Redshift Serverless resource to create the usage limit for.
	ResourceArn string `pulumi:"resourceArn"`
	// The type of Amazon Redshift Serverless usage to create a usage limit for. Valid values are `serverless-compute` or `cross-region-datasharing`.
	UsageType string `pulumi:"usageType"`
}

// The set of arguments for constructing a UsageLimit resource.
type UsageLimitArgs struct {
	// The limit amount. If time-based, this amount is in Redshift Processing Units (RPU) consumed per hour. If data-based, this amount is in terabytes (TB) of data transferred between Regions in cross-account sharing. The value must be a positive number.
	Amount pulumi.IntInput
	// The action that Amazon Redshift Serverless takes when the limit is reached. Valid values are `log`, `emit-metric`, and `deactivate`. The default is `log`.
	BreachAction pulumi.StringPtrInput
	// The time period that the amount applies to. A weekly period begins on Sunday. Valid values are `daily`, `weekly`, and `monthly`. The default is `monthly`.
	Period pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) of the Amazon Redshift Serverless resource to create the usage limit for.
	ResourceArn pulumi.StringInput
	// The type of Amazon Redshift Serverless usage to create a usage limit for. Valid values are `serverless-compute` or `cross-region-datasharing`.
	UsageType pulumi.StringInput
}

func (UsageLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*usageLimitArgs)(nil)).Elem()
}

type UsageLimitInput interface {
	pulumi.Input

	ToUsageLimitOutput() UsageLimitOutput
	ToUsageLimitOutputWithContext(ctx context.Context) UsageLimitOutput
}

func (*UsageLimit) ElementType() reflect.Type {
	return reflect.TypeOf((**UsageLimit)(nil)).Elem()
}

func (i *UsageLimit) ToUsageLimitOutput() UsageLimitOutput {
	return i.ToUsageLimitOutputWithContext(context.Background())
}

func (i *UsageLimit) ToUsageLimitOutputWithContext(ctx context.Context) UsageLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsageLimitOutput)
}

func (i *UsageLimit) ToOutput(ctx context.Context) pulumix.Output[*UsageLimit] {
	return pulumix.Output[*UsageLimit]{
		OutputState: i.ToUsageLimitOutputWithContext(ctx).OutputState,
	}
}

// UsageLimitArrayInput is an input type that accepts UsageLimitArray and UsageLimitArrayOutput values.
// You can construct a concrete instance of `UsageLimitArrayInput` via:
//
//	UsageLimitArray{ UsageLimitArgs{...} }
type UsageLimitArrayInput interface {
	pulumi.Input

	ToUsageLimitArrayOutput() UsageLimitArrayOutput
	ToUsageLimitArrayOutputWithContext(context.Context) UsageLimitArrayOutput
}

type UsageLimitArray []UsageLimitInput

func (UsageLimitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UsageLimit)(nil)).Elem()
}

func (i UsageLimitArray) ToUsageLimitArrayOutput() UsageLimitArrayOutput {
	return i.ToUsageLimitArrayOutputWithContext(context.Background())
}

func (i UsageLimitArray) ToUsageLimitArrayOutputWithContext(ctx context.Context) UsageLimitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsageLimitArrayOutput)
}

func (i UsageLimitArray) ToOutput(ctx context.Context) pulumix.Output[[]*UsageLimit] {
	return pulumix.Output[[]*UsageLimit]{
		OutputState: i.ToUsageLimitArrayOutputWithContext(ctx).OutputState,
	}
}

// UsageLimitMapInput is an input type that accepts UsageLimitMap and UsageLimitMapOutput values.
// You can construct a concrete instance of `UsageLimitMapInput` via:
//
//	UsageLimitMap{ "key": UsageLimitArgs{...} }
type UsageLimitMapInput interface {
	pulumi.Input

	ToUsageLimitMapOutput() UsageLimitMapOutput
	ToUsageLimitMapOutputWithContext(context.Context) UsageLimitMapOutput
}

type UsageLimitMap map[string]UsageLimitInput

func (UsageLimitMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UsageLimit)(nil)).Elem()
}

func (i UsageLimitMap) ToUsageLimitMapOutput() UsageLimitMapOutput {
	return i.ToUsageLimitMapOutputWithContext(context.Background())
}

func (i UsageLimitMap) ToUsageLimitMapOutputWithContext(ctx context.Context) UsageLimitMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsageLimitMapOutput)
}

func (i UsageLimitMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*UsageLimit] {
	return pulumix.Output[map[string]*UsageLimit]{
		OutputState: i.ToUsageLimitMapOutputWithContext(ctx).OutputState,
	}
}

type UsageLimitOutput struct{ *pulumi.OutputState }

func (UsageLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UsageLimit)(nil)).Elem()
}

func (o UsageLimitOutput) ToUsageLimitOutput() UsageLimitOutput {
	return o
}

func (o UsageLimitOutput) ToUsageLimitOutputWithContext(ctx context.Context) UsageLimitOutput {
	return o
}

func (o UsageLimitOutput) ToOutput(ctx context.Context) pulumix.Output[*UsageLimit] {
	return pulumix.Output[*UsageLimit]{
		OutputState: o.OutputState,
	}
}

// The limit amount. If time-based, this amount is in Redshift Processing Units (RPU) consumed per hour. If data-based, this amount is in terabytes (TB) of data transferred between Regions in cross-account sharing. The value must be a positive number.
func (o UsageLimitOutput) Amount() pulumi.IntOutput {
	return o.ApplyT(func(v *UsageLimit) pulumi.IntOutput { return v.Amount }).(pulumi.IntOutput)
}

// Amazon Resource Name (ARN) of the Redshift Serverless Usage Limit.
func (o UsageLimitOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *UsageLimit) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The action that Amazon Redshift Serverless takes when the limit is reached. Valid values are `log`, `emit-metric`, and `deactivate`. The default is `log`.
func (o UsageLimitOutput) BreachAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UsageLimit) pulumi.StringPtrOutput { return v.BreachAction }).(pulumi.StringPtrOutput)
}

// The time period that the amount applies to. A weekly period begins on Sunday. Valid values are `daily`, `weekly`, and `monthly`. The default is `monthly`.
func (o UsageLimitOutput) Period() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UsageLimit) pulumi.StringPtrOutput { return v.Period }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the Amazon Redshift Serverless resource to create the usage limit for.
func (o UsageLimitOutput) ResourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v *UsageLimit) pulumi.StringOutput { return v.ResourceArn }).(pulumi.StringOutput)
}

// The type of Amazon Redshift Serverless usage to create a usage limit for. Valid values are `serverless-compute` or `cross-region-datasharing`.
func (o UsageLimitOutput) UsageType() pulumi.StringOutput {
	return o.ApplyT(func(v *UsageLimit) pulumi.StringOutput { return v.UsageType }).(pulumi.StringOutput)
}

type UsageLimitArrayOutput struct{ *pulumi.OutputState }

func (UsageLimitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UsageLimit)(nil)).Elem()
}

func (o UsageLimitArrayOutput) ToUsageLimitArrayOutput() UsageLimitArrayOutput {
	return o
}

func (o UsageLimitArrayOutput) ToUsageLimitArrayOutputWithContext(ctx context.Context) UsageLimitArrayOutput {
	return o
}

func (o UsageLimitArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*UsageLimit] {
	return pulumix.Output[[]*UsageLimit]{
		OutputState: o.OutputState,
	}
}

func (o UsageLimitArrayOutput) Index(i pulumi.IntInput) UsageLimitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UsageLimit {
		return vs[0].([]*UsageLimit)[vs[1].(int)]
	}).(UsageLimitOutput)
}

type UsageLimitMapOutput struct{ *pulumi.OutputState }

func (UsageLimitMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UsageLimit)(nil)).Elem()
}

func (o UsageLimitMapOutput) ToUsageLimitMapOutput() UsageLimitMapOutput {
	return o
}

func (o UsageLimitMapOutput) ToUsageLimitMapOutputWithContext(ctx context.Context) UsageLimitMapOutput {
	return o
}

func (o UsageLimitMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*UsageLimit] {
	return pulumix.Output[map[string]*UsageLimit]{
		OutputState: o.OutputState,
	}
}

func (o UsageLimitMapOutput) MapIndex(k pulumi.StringInput) UsageLimitOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UsageLimit {
		return vs[0].(map[string]*UsageLimit)[vs[1].(string)]
	}).(UsageLimitOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UsageLimitInput)(nil)).Elem(), &UsageLimit{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsageLimitArrayInput)(nil)).Elem(), UsageLimitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsageLimitMapInput)(nil)).Elem(), UsageLimitMap{})
	pulumi.RegisterOutputType(UsageLimitOutput{})
	pulumi.RegisterOutputType(UsageLimitArrayOutput{})
	pulumi.RegisterOutputType(UsageLimitMapOutput{})
}
