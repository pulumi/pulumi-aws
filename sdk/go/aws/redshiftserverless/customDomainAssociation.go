// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshiftserverless

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS Redshift Serverless Custom Domain Association.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/acm"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/redshiftserverless"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := acm.NewCertificate(ctx, "example", &acm.CertificateArgs{
//				DomainName: pulumi.String("example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleNamespace, err := redshiftserverless.NewNamespace(ctx, "example", &redshiftserverless.NamespaceArgs{
//				NamespaceName: pulumi.String("example-namespace"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleWorkgroup, err := redshiftserverless.NewWorkgroup(ctx, "example", &redshiftserverless.WorkgroupArgs{
//				WorkgroupName: pulumi.String("example-workgroup"),
//				NamespaceName: exampleNamespace.NamespaceName,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = redshiftserverless.NewCustomDomainAssociation(ctx, "example", &redshiftserverless.CustomDomainAssociationArgs{
//				WorkgroupName:              exampleWorkgroup.WorkgroupName,
//				CustomDomainName:           pulumi.String("example.com"),
//				CustomDomainCertificateArn: example.Arn,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Redshift Serverless Custom Domain Association using the `workgroup_name` and `custom_domain_name`, separated by the coma. For example:
//
// ```sh
// $ pulumi import aws:redshiftserverless/customDomainAssociation:CustomDomainAssociation example example-workgroup,example.com
// ```
type CustomDomainAssociation struct {
	pulumi.CustomResourceState

	// ARN of the certificate for the custom domain association.
	CustomDomainCertificateArn pulumi.StringOutput `pulumi:"customDomainCertificateArn"`
	// Expiration time for the certificate.
	CustomDomainCertificateExpiryTime pulumi.StringOutput `pulumi:"customDomainCertificateExpiryTime"`
	// Custom domain to associate with the workgroup.
	CustomDomainName pulumi.StringOutput `pulumi:"customDomainName"`
	// Name of the workgroup.
	WorkgroupName pulumi.StringOutput `pulumi:"workgroupName"`
}

// NewCustomDomainAssociation registers a new resource with the given unique name, arguments, and options.
func NewCustomDomainAssociation(ctx *pulumi.Context,
	name string, args *CustomDomainAssociationArgs, opts ...pulumi.ResourceOption) (*CustomDomainAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CustomDomainCertificateArn == nil {
		return nil, errors.New("invalid value for required argument 'CustomDomainCertificateArn'")
	}
	if args.CustomDomainName == nil {
		return nil, errors.New("invalid value for required argument 'CustomDomainName'")
	}
	if args.WorkgroupName == nil {
		return nil, errors.New("invalid value for required argument 'WorkgroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CustomDomainAssociation
	err := ctx.RegisterResource("aws:redshiftserverless/customDomainAssociation:CustomDomainAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCustomDomainAssociation gets an existing CustomDomainAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCustomDomainAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CustomDomainAssociationState, opts ...pulumi.ResourceOption) (*CustomDomainAssociation, error) {
	var resource CustomDomainAssociation
	err := ctx.ReadResource("aws:redshiftserverless/customDomainAssociation:CustomDomainAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CustomDomainAssociation resources.
type customDomainAssociationState struct {
	// ARN of the certificate for the custom domain association.
	CustomDomainCertificateArn *string `pulumi:"customDomainCertificateArn"`
	// Expiration time for the certificate.
	CustomDomainCertificateExpiryTime *string `pulumi:"customDomainCertificateExpiryTime"`
	// Custom domain to associate with the workgroup.
	CustomDomainName *string `pulumi:"customDomainName"`
	// Name of the workgroup.
	WorkgroupName *string `pulumi:"workgroupName"`
}

type CustomDomainAssociationState struct {
	// ARN of the certificate for the custom domain association.
	CustomDomainCertificateArn pulumi.StringPtrInput
	// Expiration time for the certificate.
	CustomDomainCertificateExpiryTime pulumi.StringPtrInput
	// Custom domain to associate with the workgroup.
	CustomDomainName pulumi.StringPtrInput
	// Name of the workgroup.
	WorkgroupName pulumi.StringPtrInput
}

func (CustomDomainAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*customDomainAssociationState)(nil)).Elem()
}

type customDomainAssociationArgs struct {
	// ARN of the certificate for the custom domain association.
	CustomDomainCertificateArn string `pulumi:"customDomainCertificateArn"`
	// Custom domain to associate with the workgroup.
	CustomDomainName string `pulumi:"customDomainName"`
	// Name of the workgroup.
	WorkgroupName string `pulumi:"workgroupName"`
}

// The set of arguments for constructing a CustomDomainAssociation resource.
type CustomDomainAssociationArgs struct {
	// ARN of the certificate for the custom domain association.
	CustomDomainCertificateArn pulumi.StringInput
	// Custom domain to associate with the workgroup.
	CustomDomainName pulumi.StringInput
	// Name of the workgroup.
	WorkgroupName pulumi.StringInput
}

func (CustomDomainAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*customDomainAssociationArgs)(nil)).Elem()
}

type CustomDomainAssociationInput interface {
	pulumi.Input

	ToCustomDomainAssociationOutput() CustomDomainAssociationOutput
	ToCustomDomainAssociationOutputWithContext(ctx context.Context) CustomDomainAssociationOutput
}

func (*CustomDomainAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomDomainAssociation)(nil)).Elem()
}

func (i *CustomDomainAssociation) ToCustomDomainAssociationOutput() CustomDomainAssociationOutput {
	return i.ToCustomDomainAssociationOutputWithContext(context.Background())
}

func (i *CustomDomainAssociation) ToCustomDomainAssociationOutputWithContext(ctx context.Context) CustomDomainAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomDomainAssociationOutput)
}

// CustomDomainAssociationArrayInput is an input type that accepts CustomDomainAssociationArray and CustomDomainAssociationArrayOutput values.
// You can construct a concrete instance of `CustomDomainAssociationArrayInput` via:
//
//	CustomDomainAssociationArray{ CustomDomainAssociationArgs{...} }
type CustomDomainAssociationArrayInput interface {
	pulumi.Input

	ToCustomDomainAssociationArrayOutput() CustomDomainAssociationArrayOutput
	ToCustomDomainAssociationArrayOutputWithContext(context.Context) CustomDomainAssociationArrayOutput
}

type CustomDomainAssociationArray []CustomDomainAssociationInput

func (CustomDomainAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomDomainAssociation)(nil)).Elem()
}

func (i CustomDomainAssociationArray) ToCustomDomainAssociationArrayOutput() CustomDomainAssociationArrayOutput {
	return i.ToCustomDomainAssociationArrayOutputWithContext(context.Background())
}

func (i CustomDomainAssociationArray) ToCustomDomainAssociationArrayOutputWithContext(ctx context.Context) CustomDomainAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomDomainAssociationArrayOutput)
}

// CustomDomainAssociationMapInput is an input type that accepts CustomDomainAssociationMap and CustomDomainAssociationMapOutput values.
// You can construct a concrete instance of `CustomDomainAssociationMapInput` via:
//
//	CustomDomainAssociationMap{ "key": CustomDomainAssociationArgs{...} }
type CustomDomainAssociationMapInput interface {
	pulumi.Input

	ToCustomDomainAssociationMapOutput() CustomDomainAssociationMapOutput
	ToCustomDomainAssociationMapOutputWithContext(context.Context) CustomDomainAssociationMapOutput
}

type CustomDomainAssociationMap map[string]CustomDomainAssociationInput

func (CustomDomainAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomDomainAssociation)(nil)).Elem()
}

func (i CustomDomainAssociationMap) ToCustomDomainAssociationMapOutput() CustomDomainAssociationMapOutput {
	return i.ToCustomDomainAssociationMapOutputWithContext(context.Background())
}

func (i CustomDomainAssociationMap) ToCustomDomainAssociationMapOutputWithContext(ctx context.Context) CustomDomainAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomDomainAssociationMapOutput)
}

type CustomDomainAssociationOutput struct{ *pulumi.OutputState }

func (CustomDomainAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomDomainAssociation)(nil)).Elem()
}

func (o CustomDomainAssociationOutput) ToCustomDomainAssociationOutput() CustomDomainAssociationOutput {
	return o
}

func (o CustomDomainAssociationOutput) ToCustomDomainAssociationOutputWithContext(ctx context.Context) CustomDomainAssociationOutput {
	return o
}

// ARN of the certificate for the custom domain association.
func (o CustomDomainAssociationOutput) CustomDomainCertificateArn() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomDomainAssociation) pulumi.StringOutput { return v.CustomDomainCertificateArn }).(pulumi.StringOutput)
}

// Expiration time for the certificate.
func (o CustomDomainAssociationOutput) CustomDomainCertificateExpiryTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomDomainAssociation) pulumi.StringOutput { return v.CustomDomainCertificateExpiryTime }).(pulumi.StringOutput)
}

// Custom domain to associate with the workgroup.
func (o CustomDomainAssociationOutput) CustomDomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomDomainAssociation) pulumi.StringOutput { return v.CustomDomainName }).(pulumi.StringOutput)
}

// Name of the workgroup.
func (o CustomDomainAssociationOutput) WorkgroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomDomainAssociation) pulumi.StringOutput { return v.WorkgroupName }).(pulumi.StringOutput)
}

type CustomDomainAssociationArrayOutput struct{ *pulumi.OutputState }

func (CustomDomainAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomDomainAssociation)(nil)).Elem()
}

func (o CustomDomainAssociationArrayOutput) ToCustomDomainAssociationArrayOutput() CustomDomainAssociationArrayOutput {
	return o
}

func (o CustomDomainAssociationArrayOutput) ToCustomDomainAssociationArrayOutputWithContext(ctx context.Context) CustomDomainAssociationArrayOutput {
	return o
}

func (o CustomDomainAssociationArrayOutput) Index(i pulumi.IntInput) CustomDomainAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CustomDomainAssociation {
		return vs[0].([]*CustomDomainAssociation)[vs[1].(int)]
	}).(CustomDomainAssociationOutput)
}

type CustomDomainAssociationMapOutput struct{ *pulumi.OutputState }

func (CustomDomainAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomDomainAssociation)(nil)).Elem()
}

func (o CustomDomainAssociationMapOutput) ToCustomDomainAssociationMapOutput() CustomDomainAssociationMapOutput {
	return o
}

func (o CustomDomainAssociationMapOutput) ToCustomDomainAssociationMapOutputWithContext(ctx context.Context) CustomDomainAssociationMapOutput {
	return o
}

func (o CustomDomainAssociationMapOutput) MapIndex(k pulumi.StringInput) CustomDomainAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CustomDomainAssociation {
		return vs[0].(map[string]*CustomDomainAssociation)[vs[1].(string)]
	}).(CustomDomainAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CustomDomainAssociationInput)(nil)).Elem(), &CustomDomainAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomDomainAssociationArrayInput)(nil)).Elem(), CustomDomainAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomDomainAssociationMapInput)(nil)).Elem(), CustomDomainAssociationMap{})
	pulumi.RegisterOutputType(CustomDomainAssociationOutput{})
	pulumi.RegisterOutputType(CustomDomainAssociationArrayOutput{})
	pulumi.RegisterOutputType(CustomDomainAssociationMapOutput{})
}
