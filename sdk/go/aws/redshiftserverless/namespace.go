// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshiftserverless

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a new Amazon Redshift Serverless Namespace.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/redshiftserverless"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := redshiftserverless.NewNamespace(ctx, "example", &redshiftserverless.NamespaceArgs{
//				NamespaceName: pulumi.String("concurrency-scaling"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Redshift Serverless Namespaces using the `namespace_name`. For example:
//
// ```sh
//
//	$ pulumi import aws:redshiftserverless/namespace:Namespace example example
//
// ```
type Namespace struct {
	pulumi.CustomResourceState

	// The password of the administrator for the first database created in the namespace.
	AdminUserPassword pulumi.StringPtrOutput `pulumi:"adminUserPassword"`
	// The username of the administrator for the first database created in the namespace.
	AdminUsername pulumi.StringOutput `pulumi:"adminUsername"`
	// Amazon Resource Name (ARN) of the Redshift Serverless Namespace.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The name of the first database created in the namespace.
	DbName pulumi.StringOutput `pulumi:"dbName"`
	// The Amazon Resource Name (ARN) of the IAM role to set as a default in the namespace. When specifying `defaultIamRoleArn`, it also must be part of `iamRoles`.
	DefaultIamRoleArn pulumi.StringPtrOutput `pulumi:"defaultIamRoleArn"`
	// A list of IAM roles to associate with the namespace.
	IamRoles pulumi.StringArrayOutput `pulumi:"iamRoles"`
	// The ARN of the Amazon Web Services Key Management Service key used to encrypt your data.
	KmsKeyId pulumi.StringOutput `pulumi:"kmsKeyId"`
	// The types of logs the namespace can export. Available export types are `userlog`, `connectionlog`, and `useractivitylog`.
	LogExports pulumi.StringArrayOutput `pulumi:"logExports"`
	// The Redshift Namespace ID.
	NamespaceId pulumi.StringOutput `pulumi:"namespaceId"`
	// The name of the namespace.
	NamespaceName pulumi.StringOutput `pulumi:"namespaceName"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewNamespace registers a new resource with the given unique name, arguments, and options.
func NewNamespace(ctx *pulumi.Context,
	name string, args *NamespaceArgs, opts ...pulumi.ResourceOption) (*Namespace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NamespaceName == nil {
		return nil, errors.New("invalid value for required argument 'NamespaceName'")
	}
	if args.AdminUserPassword != nil {
		args.AdminUserPassword = pulumi.ToSecret(args.AdminUserPassword).(pulumi.StringPtrInput)
	}
	if args.AdminUsername != nil {
		args.AdminUsername = pulumi.ToSecret(args.AdminUsername).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"adminUserPassword",
		"adminUsername",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Namespace
	err := ctx.RegisterResource("aws:redshiftserverless/namespace:Namespace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNamespace gets an existing Namespace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNamespace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NamespaceState, opts ...pulumi.ResourceOption) (*Namespace, error) {
	var resource Namespace
	err := ctx.ReadResource("aws:redshiftserverless/namespace:Namespace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Namespace resources.
type namespaceState struct {
	// The password of the administrator for the first database created in the namespace.
	AdminUserPassword *string `pulumi:"adminUserPassword"`
	// The username of the administrator for the first database created in the namespace.
	AdminUsername *string `pulumi:"adminUsername"`
	// Amazon Resource Name (ARN) of the Redshift Serverless Namespace.
	Arn *string `pulumi:"arn"`
	// The name of the first database created in the namespace.
	DbName *string `pulumi:"dbName"`
	// The Amazon Resource Name (ARN) of the IAM role to set as a default in the namespace. When specifying `defaultIamRoleArn`, it also must be part of `iamRoles`.
	DefaultIamRoleArn *string `pulumi:"defaultIamRoleArn"`
	// A list of IAM roles to associate with the namespace.
	IamRoles []string `pulumi:"iamRoles"`
	// The ARN of the Amazon Web Services Key Management Service key used to encrypt your data.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The types of logs the namespace can export. Available export types are `userlog`, `connectionlog`, and `useractivitylog`.
	LogExports []string `pulumi:"logExports"`
	// The Redshift Namespace ID.
	NamespaceId *string `pulumi:"namespaceId"`
	// The name of the namespace.
	NamespaceName *string `pulumi:"namespaceName"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type NamespaceState struct {
	// The password of the administrator for the first database created in the namespace.
	AdminUserPassword pulumi.StringPtrInput
	// The username of the administrator for the first database created in the namespace.
	AdminUsername pulumi.StringPtrInput
	// Amazon Resource Name (ARN) of the Redshift Serverless Namespace.
	Arn pulumi.StringPtrInput
	// The name of the first database created in the namespace.
	DbName pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) of the IAM role to set as a default in the namespace. When specifying `defaultIamRoleArn`, it also must be part of `iamRoles`.
	DefaultIamRoleArn pulumi.StringPtrInput
	// A list of IAM roles to associate with the namespace.
	IamRoles pulumi.StringArrayInput
	// The ARN of the Amazon Web Services Key Management Service key used to encrypt your data.
	KmsKeyId pulumi.StringPtrInput
	// The types of logs the namespace can export. Available export types are `userlog`, `connectionlog`, and `useractivitylog`.
	LogExports pulumi.StringArrayInput
	// The Redshift Namespace ID.
	NamespaceId pulumi.StringPtrInput
	// The name of the namespace.
	NamespaceName pulumi.StringPtrInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapInput
}

func (NamespaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceState)(nil)).Elem()
}

type namespaceArgs struct {
	// The password of the administrator for the first database created in the namespace.
	AdminUserPassword *string `pulumi:"adminUserPassword"`
	// The username of the administrator for the first database created in the namespace.
	AdminUsername *string `pulumi:"adminUsername"`
	// The name of the first database created in the namespace.
	DbName *string `pulumi:"dbName"`
	// The Amazon Resource Name (ARN) of the IAM role to set as a default in the namespace. When specifying `defaultIamRoleArn`, it also must be part of `iamRoles`.
	DefaultIamRoleArn *string `pulumi:"defaultIamRoleArn"`
	// A list of IAM roles to associate with the namespace.
	IamRoles []string `pulumi:"iamRoles"`
	// The ARN of the Amazon Web Services Key Management Service key used to encrypt your data.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The types of logs the namespace can export. Available export types are `userlog`, `connectionlog`, and `useractivitylog`.
	LogExports []string `pulumi:"logExports"`
	// The name of the namespace.
	NamespaceName string `pulumi:"namespaceName"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Namespace resource.
type NamespaceArgs struct {
	// The password of the administrator for the first database created in the namespace.
	AdminUserPassword pulumi.StringPtrInput
	// The username of the administrator for the first database created in the namespace.
	AdminUsername pulumi.StringPtrInput
	// The name of the first database created in the namespace.
	DbName pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) of the IAM role to set as a default in the namespace. When specifying `defaultIamRoleArn`, it also must be part of `iamRoles`.
	DefaultIamRoleArn pulumi.StringPtrInput
	// A list of IAM roles to associate with the namespace.
	IamRoles pulumi.StringArrayInput
	// The ARN of the Amazon Web Services Key Management Service key used to encrypt your data.
	KmsKeyId pulumi.StringPtrInput
	// The types of logs the namespace can export. Available export types are `userlog`, `connectionlog`, and `useractivitylog`.
	LogExports pulumi.StringArrayInput
	// The name of the namespace.
	NamespaceName pulumi.StringInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
}

func (NamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceArgs)(nil)).Elem()
}

type NamespaceInput interface {
	pulumi.Input

	ToNamespaceOutput() NamespaceOutput
	ToNamespaceOutputWithContext(ctx context.Context) NamespaceOutput
}

func (*Namespace) ElementType() reflect.Type {
	return reflect.TypeOf((**Namespace)(nil)).Elem()
}

func (i *Namespace) ToNamespaceOutput() NamespaceOutput {
	return i.ToNamespaceOutputWithContext(context.Background())
}

func (i *Namespace) ToNamespaceOutputWithContext(ctx context.Context) NamespaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceOutput)
}

func (i *Namespace) ToOutput(ctx context.Context) pulumix.Output[*Namespace] {
	return pulumix.Output[*Namespace]{
		OutputState: i.ToNamespaceOutputWithContext(ctx).OutputState,
	}
}

// NamespaceArrayInput is an input type that accepts NamespaceArray and NamespaceArrayOutput values.
// You can construct a concrete instance of `NamespaceArrayInput` via:
//
//	NamespaceArray{ NamespaceArgs{...} }
type NamespaceArrayInput interface {
	pulumi.Input

	ToNamespaceArrayOutput() NamespaceArrayOutput
	ToNamespaceArrayOutputWithContext(context.Context) NamespaceArrayOutput
}

type NamespaceArray []NamespaceInput

func (NamespaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Namespace)(nil)).Elem()
}

func (i NamespaceArray) ToNamespaceArrayOutput() NamespaceArrayOutput {
	return i.ToNamespaceArrayOutputWithContext(context.Background())
}

func (i NamespaceArray) ToNamespaceArrayOutputWithContext(ctx context.Context) NamespaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceArrayOutput)
}

func (i NamespaceArray) ToOutput(ctx context.Context) pulumix.Output[[]*Namespace] {
	return pulumix.Output[[]*Namespace]{
		OutputState: i.ToNamespaceArrayOutputWithContext(ctx).OutputState,
	}
}

// NamespaceMapInput is an input type that accepts NamespaceMap and NamespaceMapOutput values.
// You can construct a concrete instance of `NamespaceMapInput` via:
//
//	NamespaceMap{ "key": NamespaceArgs{...} }
type NamespaceMapInput interface {
	pulumi.Input

	ToNamespaceMapOutput() NamespaceMapOutput
	ToNamespaceMapOutputWithContext(context.Context) NamespaceMapOutput
}

type NamespaceMap map[string]NamespaceInput

func (NamespaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Namespace)(nil)).Elem()
}

func (i NamespaceMap) ToNamespaceMapOutput() NamespaceMapOutput {
	return i.ToNamespaceMapOutputWithContext(context.Background())
}

func (i NamespaceMap) ToNamespaceMapOutputWithContext(ctx context.Context) NamespaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceMapOutput)
}

func (i NamespaceMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Namespace] {
	return pulumix.Output[map[string]*Namespace]{
		OutputState: i.ToNamespaceMapOutputWithContext(ctx).OutputState,
	}
}

type NamespaceOutput struct{ *pulumi.OutputState }

func (NamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Namespace)(nil)).Elem()
}

func (o NamespaceOutput) ToNamespaceOutput() NamespaceOutput {
	return o
}

func (o NamespaceOutput) ToNamespaceOutputWithContext(ctx context.Context) NamespaceOutput {
	return o
}

func (o NamespaceOutput) ToOutput(ctx context.Context) pulumix.Output[*Namespace] {
	return pulumix.Output[*Namespace]{
		OutputState: o.OutputState,
	}
}

// The password of the administrator for the first database created in the namespace.
func (o NamespaceOutput) AdminUserPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringPtrOutput { return v.AdminUserPassword }).(pulumi.StringPtrOutput)
}

// The username of the administrator for the first database created in the namespace.
func (o NamespaceOutput) AdminUsername() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.AdminUsername }).(pulumi.StringOutput)
}

// Amazon Resource Name (ARN) of the Redshift Serverless Namespace.
func (o NamespaceOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The name of the first database created in the namespace.
func (o NamespaceOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.DbName }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) of the IAM role to set as a default in the namespace. When specifying `defaultIamRoleArn`, it also must be part of `iamRoles`.
func (o NamespaceOutput) DefaultIamRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringPtrOutput { return v.DefaultIamRoleArn }).(pulumi.StringPtrOutput)
}

// A list of IAM roles to associate with the namespace.
func (o NamespaceOutput) IamRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringArrayOutput { return v.IamRoles }).(pulumi.StringArrayOutput)
}

// The ARN of the Amazon Web Services Key Management Service key used to encrypt your data.
func (o NamespaceOutput) KmsKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.KmsKeyId }).(pulumi.StringOutput)
}

// The types of logs the namespace can export. Available export types are `userlog`, `connectionlog`, and `useractivitylog`.
func (o NamespaceOutput) LogExports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringArrayOutput { return v.LogExports }).(pulumi.StringArrayOutput)
}

// The Redshift Namespace ID.
func (o NamespaceOutput) NamespaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.NamespaceId }).(pulumi.StringOutput)
}

// The name of the namespace.
func (o NamespaceOutput) NamespaceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.NamespaceName }).(pulumi.StringOutput)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o NamespaceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o NamespaceOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type NamespaceArrayOutput struct{ *pulumi.OutputState }

func (NamespaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Namespace)(nil)).Elem()
}

func (o NamespaceArrayOutput) ToNamespaceArrayOutput() NamespaceArrayOutput {
	return o
}

func (o NamespaceArrayOutput) ToNamespaceArrayOutputWithContext(ctx context.Context) NamespaceArrayOutput {
	return o
}

func (o NamespaceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Namespace] {
	return pulumix.Output[[]*Namespace]{
		OutputState: o.OutputState,
	}
}

func (o NamespaceArrayOutput) Index(i pulumi.IntInput) NamespaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Namespace {
		return vs[0].([]*Namespace)[vs[1].(int)]
	}).(NamespaceOutput)
}

type NamespaceMapOutput struct{ *pulumi.OutputState }

func (NamespaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Namespace)(nil)).Elem()
}

func (o NamespaceMapOutput) ToNamespaceMapOutput() NamespaceMapOutput {
	return o
}

func (o NamespaceMapOutput) ToNamespaceMapOutputWithContext(ctx context.Context) NamespaceMapOutput {
	return o
}

func (o NamespaceMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Namespace] {
	return pulumix.Output[map[string]*Namespace]{
		OutputState: o.OutputState,
	}
}

func (o NamespaceMapOutput) MapIndex(k pulumi.StringInput) NamespaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Namespace {
		return vs[0].(map[string]*Namespace)[vs[1].(string)]
	}).(NamespaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceInput)(nil)).Elem(), &Namespace{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceArrayInput)(nil)).Elem(), NamespaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceMapInput)(nil)).Elem(), NamespaceMap{})
	pulumi.RegisterOutputType(NamespaceOutput{})
	pulumi.RegisterOutputType(NamespaceArrayOutput{})
	pulumi.RegisterOutputType(NamespaceMapOutput{})
}
