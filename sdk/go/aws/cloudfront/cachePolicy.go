// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudfront

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CachePolicy struct {
	pulumi.CustomResourceState

	Comment                                  pulumi.StringPtrOutput                                    `pulumi:"comment"`
	DefaultTtl                               pulumi.IntPtrOutput                                       `pulumi:"defaultTtl"`
	Etag                                     pulumi.StringOutput                                       `pulumi:"etag"`
	MaxTtl                                   pulumi.IntPtrOutput                                       `pulumi:"maxTtl"`
	MinTtl                                   pulumi.IntPtrOutput                                       `pulumi:"minTtl"`
	Name                                     pulumi.StringOutput                                       `pulumi:"name"`
	ParametersInCacheKeyAndForwardedToOrigin CachePolicyParametersInCacheKeyAndForwardedToOriginOutput `pulumi:"parametersInCacheKeyAndForwardedToOrigin"`
}

// NewCachePolicy registers a new resource with the given unique name, arguments, and options.
func NewCachePolicy(ctx *pulumi.Context,
	name string, args *CachePolicyArgs, opts ...pulumi.ResourceOption) (*CachePolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ParametersInCacheKeyAndForwardedToOrigin == nil {
		return nil, errors.New("invalid value for required argument 'ParametersInCacheKeyAndForwardedToOrigin'")
	}
	var resource CachePolicy
	err := ctx.RegisterResource("aws:cloudfront/cachePolicy:CachePolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCachePolicy gets an existing CachePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCachePolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CachePolicyState, opts ...pulumi.ResourceOption) (*CachePolicy, error) {
	var resource CachePolicy
	err := ctx.ReadResource("aws:cloudfront/cachePolicy:CachePolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CachePolicy resources.
type cachePolicyState struct {
	Comment                                  *string                                              `pulumi:"comment"`
	DefaultTtl                               *int                                                 `pulumi:"defaultTtl"`
	Etag                                     *string                                              `pulumi:"etag"`
	MaxTtl                                   *int                                                 `pulumi:"maxTtl"`
	MinTtl                                   *int                                                 `pulumi:"minTtl"`
	Name                                     *string                                              `pulumi:"name"`
	ParametersInCacheKeyAndForwardedToOrigin *CachePolicyParametersInCacheKeyAndForwardedToOrigin `pulumi:"parametersInCacheKeyAndForwardedToOrigin"`
}

type CachePolicyState struct {
	Comment                                  pulumi.StringPtrInput
	DefaultTtl                               pulumi.IntPtrInput
	Etag                                     pulumi.StringPtrInput
	MaxTtl                                   pulumi.IntPtrInput
	MinTtl                                   pulumi.IntPtrInput
	Name                                     pulumi.StringPtrInput
	ParametersInCacheKeyAndForwardedToOrigin CachePolicyParametersInCacheKeyAndForwardedToOriginPtrInput
}

func (CachePolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*cachePolicyState)(nil)).Elem()
}

type cachePolicyArgs struct {
	Comment                                  *string                                             `pulumi:"comment"`
	DefaultTtl                               *int                                                `pulumi:"defaultTtl"`
	MaxTtl                                   *int                                                `pulumi:"maxTtl"`
	MinTtl                                   *int                                                `pulumi:"minTtl"`
	Name                                     *string                                             `pulumi:"name"`
	ParametersInCacheKeyAndForwardedToOrigin CachePolicyParametersInCacheKeyAndForwardedToOrigin `pulumi:"parametersInCacheKeyAndForwardedToOrigin"`
}

// The set of arguments for constructing a CachePolicy resource.
type CachePolicyArgs struct {
	Comment                                  pulumi.StringPtrInput
	DefaultTtl                               pulumi.IntPtrInput
	MaxTtl                                   pulumi.IntPtrInput
	MinTtl                                   pulumi.IntPtrInput
	Name                                     pulumi.StringPtrInput
	ParametersInCacheKeyAndForwardedToOrigin CachePolicyParametersInCacheKeyAndForwardedToOriginInput
}

func (CachePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cachePolicyArgs)(nil)).Elem()
}

type CachePolicyInput interface {
	pulumi.Input

	ToCachePolicyOutput() CachePolicyOutput
	ToCachePolicyOutputWithContext(ctx context.Context) CachePolicyOutput
}

func (*CachePolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**CachePolicy)(nil)).Elem()
}

func (i *CachePolicy) ToCachePolicyOutput() CachePolicyOutput {
	return i.ToCachePolicyOutputWithContext(context.Background())
}

func (i *CachePolicy) ToCachePolicyOutputWithContext(ctx context.Context) CachePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CachePolicyOutput)
}

// CachePolicyArrayInput is an input type that accepts CachePolicyArray and CachePolicyArrayOutput values.
// You can construct a concrete instance of `CachePolicyArrayInput` via:
//
//	CachePolicyArray{ CachePolicyArgs{...} }
type CachePolicyArrayInput interface {
	pulumi.Input

	ToCachePolicyArrayOutput() CachePolicyArrayOutput
	ToCachePolicyArrayOutputWithContext(context.Context) CachePolicyArrayOutput
}

type CachePolicyArray []CachePolicyInput

func (CachePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CachePolicy)(nil)).Elem()
}

func (i CachePolicyArray) ToCachePolicyArrayOutput() CachePolicyArrayOutput {
	return i.ToCachePolicyArrayOutputWithContext(context.Background())
}

func (i CachePolicyArray) ToCachePolicyArrayOutputWithContext(ctx context.Context) CachePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CachePolicyArrayOutput)
}

// CachePolicyMapInput is an input type that accepts CachePolicyMap and CachePolicyMapOutput values.
// You can construct a concrete instance of `CachePolicyMapInput` via:
//
//	CachePolicyMap{ "key": CachePolicyArgs{...} }
type CachePolicyMapInput interface {
	pulumi.Input

	ToCachePolicyMapOutput() CachePolicyMapOutput
	ToCachePolicyMapOutputWithContext(context.Context) CachePolicyMapOutput
}

type CachePolicyMap map[string]CachePolicyInput

func (CachePolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CachePolicy)(nil)).Elem()
}

func (i CachePolicyMap) ToCachePolicyMapOutput() CachePolicyMapOutput {
	return i.ToCachePolicyMapOutputWithContext(context.Background())
}

func (i CachePolicyMap) ToCachePolicyMapOutputWithContext(ctx context.Context) CachePolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CachePolicyMapOutput)
}

type CachePolicyOutput struct{ *pulumi.OutputState }

func (CachePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CachePolicy)(nil)).Elem()
}

func (o CachePolicyOutput) ToCachePolicyOutput() CachePolicyOutput {
	return o
}

func (o CachePolicyOutput) ToCachePolicyOutputWithContext(ctx context.Context) CachePolicyOutput {
	return o
}

func (o CachePolicyOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CachePolicy) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o CachePolicyOutput) DefaultTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CachePolicy) pulumi.IntPtrOutput { return v.DefaultTtl }).(pulumi.IntPtrOutput)
}

func (o CachePolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *CachePolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o CachePolicyOutput) MaxTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CachePolicy) pulumi.IntPtrOutput { return v.MaxTtl }).(pulumi.IntPtrOutput)
}

func (o CachePolicyOutput) MinTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CachePolicy) pulumi.IntPtrOutput { return v.MinTtl }).(pulumi.IntPtrOutput)
}

func (o CachePolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CachePolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CachePolicyOutput) ParametersInCacheKeyAndForwardedToOrigin() CachePolicyParametersInCacheKeyAndForwardedToOriginOutput {
	return o.ApplyT(func(v *CachePolicy) CachePolicyParametersInCacheKeyAndForwardedToOriginOutput {
		return v.ParametersInCacheKeyAndForwardedToOrigin
	}).(CachePolicyParametersInCacheKeyAndForwardedToOriginOutput)
}

type CachePolicyArrayOutput struct{ *pulumi.OutputState }

func (CachePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CachePolicy)(nil)).Elem()
}

func (o CachePolicyArrayOutput) ToCachePolicyArrayOutput() CachePolicyArrayOutput {
	return o
}

func (o CachePolicyArrayOutput) ToCachePolicyArrayOutputWithContext(ctx context.Context) CachePolicyArrayOutput {
	return o
}

func (o CachePolicyArrayOutput) Index(i pulumi.IntInput) CachePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CachePolicy {
		return vs[0].([]*CachePolicy)[vs[1].(int)]
	}).(CachePolicyOutput)
}

type CachePolicyMapOutput struct{ *pulumi.OutputState }

func (CachePolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CachePolicy)(nil)).Elem()
}

func (o CachePolicyMapOutput) ToCachePolicyMapOutput() CachePolicyMapOutput {
	return o
}

func (o CachePolicyMapOutput) ToCachePolicyMapOutputWithContext(ctx context.Context) CachePolicyMapOutput {
	return o
}

func (o CachePolicyMapOutput) MapIndex(k pulumi.StringInput) CachePolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CachePolicy {
		return vs[0].(map[string]*CachePolicy)[vs[1].(string)]
	}).(CachePolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CachePolicyInput)(nil)).Elem(), &CachePolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*CachePolicyArrayInput)(nil)).Elem(), CachePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CachePolicyMapInput)(nil)).Elem(), CachePolicyMap{})
	pulumi.RegisterOutputType(CachePolicyOutput{})
	pulumi.RegisterOutputType(CachePolicyArrayOutput{})
	pulumi.RegisterOutputType(CachePolicyMapOutput{})
}
