// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package guardduty

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PublishingDestination struct {
	pulumi.CustomResourceState

	DestinationArn  pulumi.StringOutput    `pulumi:"destinationArn"`
	DestinationType pulumi.StringPtrOutput `pulumi:"destinationType"`
	DetectorId      pulumi.StringOutput    `pulumi:"detectorId"`
	KmsKeyArn       pulumi.StringOutput    `pulumi:"kmsKeyArn"`
}

// NewPublishingDestination registers a new resource with the given unique name, arguments, and options.
func NewPublishingDestination(ctx *pulumi.Context,
	name string, args *PublishingDestinationArgs, opts ...pulumi.ResourceOption) (*PublishingDestination, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationArn == nil {
		return nil, errors.New("invalid value for required argument 'DestinationArn'")
	}
	if args.DetectorId == nil {
		return nil, errors.New("invalid value for required argument 'DetectorId'")
	}
	if args.KmsKeyArn == nil {
		return nil, errors.New("invalid value for required argument 'KmsKeyArn'")
	}
	var resource PublishingDestination
	err := ctx.RegisterResource("aws:guardduty/publishingDestination:PublishingDestination", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPublishingDestination gets an existing PublishingDestination resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPublishingDestination(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PublishingDestinationState, opts ...pulumi.ResourceOption) (*PublishingDestination, error) {
	var resource PublishingDestination
	err := ctx.ReadResource("aws:guardduty/publishingDestination:PublishingDestination", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PublishingDestination resources.
type publishingDestinationState struct {
	DestinationArn  *string `pulumi:"destinationArn"`
	DestinationType *string `pulumi:"destinationType"`
	DetectorId      *string `pulumi:"detectorId"`
	KmsKeyArn       *string `pulumi:"kmsKeyArn"`
}

type PublishingDestinationState struct {
	DestinationArn  pulumi.StringPtrInput
	DestinationType pulumi.StringPtrInput
	DetectorId      pulumi.StringPtrInput
	KmsKeyArn       pulumi.StringPtrInput
}

func (PublishingDestinationState) ElementType() reflect.Type {
	return reflect.TypeOf((*publishingDestinationState)(nil)).Elem()
}

type publishingDestinationArgs struct {
	DestinationArn  string  `pulumi:"destinationArn"`
	DestinationType *string `pulumi:"destinationType"`
	DetectorId      string  `pulumi:"detectorId"`
	KmsKeyArn       string  `pulumi:"kmsKeyArn"`
}

// The set of arguments for constructing a PublishingDestination resource.
type PublishingDestinationArgs struct {
	DestinationArn  pulumi.StringInput
	DestinationType pulumi.StringPtrInput
	DetectorId      pulumi.StringInput
	KmsKeyArn       pulumi.StringInput
}

func (PublishingDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*publishingDestinationArgs)(nil)).Elem()
}

type PublishingDestinationInput interface {
	pulumi.Input

	ToPublishingDestinationOutput() PublishingDestinationOutput
	ToPublishingDestinationOutputWithContext(ctx context.Context) PublishingDestinationOutput
}

func (*PublishingDestination) ElementType() reflect.Type {
	return reflect.TypeOf((**PublishingDestination)(nil)).Elem()
}

func (i *PublishingDestination) ToPublishingDestinationOutput() PublishingDestinationOutput {
	return i.ToPublishingDestinationOutputWithContext(context.Background())
}

func (i *PublishingDestination) ToPublishingDestinationOutputWithContext(ctx context.Context) PublishingDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublishingDestinationOutput)
}

// PublishingDestinationArrayInput is an input type that accepts PublishingDestinationArray and PublishingDestinationArrayOutput values.
// You can construct a concrete instance of `PublishingDestinationArrayInput` via:
//
//	PublishingDestinationArray{ PublishingDestinationArgs{...} }
type PublishingDestinationArrayInput interface {
	pulumi.Input

	ToPublishingDestinationArrayOutput() PublishingDestinationArrayOutput
	ToPublishingDestinationArrayOutputWithContext(context.Context) PublishingDestinationArrayOutput
}

type PublishingDestinationArray []PublishingDestinationInput

func (PublishingDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PublishingDestination)(nil)).Elem()
}

func (i PublishingDestinationArray) ToPublishingDestinationArrayOutput() PublishingDestinationArrayOutput {
	return i.ToPublishingDestinationArrayOutputWithContext(context.Background())
}

func (i PublishingDestinationArray) ToPublishingDestinationArrayOutputWithContext(ctx context.Context) PublishingDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublishingDestinationArrayOutput)
}

// PublishingDestinationMapInput is an input type that accepts PublishingDestinationMap and PublishingDestinationMapOutput values.
// You can construct a concrete instance of `PublishingDestinationMapInput` via:
//
//	PublishingDestinationMap{ "key": PublishingDestinationArgs{...} }
type PublishingDestinationMapInput interface {
	pulumi.Input

	ToPublishingDestinationMapOutput() PublishingDestinationMapOutput
	ToPublishingDestinationMapOutputWithContext(context.Context) PublishingDestinationMapOutput
}

type PublishingDestinationMap map[string]PublishingDestinationInput

func (PublishingDestinationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PublishingDestination)(nil)).Elem()
}

func (i PublishingDestinationMap) ToPublishingDestinationMapOutput() PublishingDestinationMapOutput {
	return i.ToPublishingDestinationMapOutputWithContext(context.Background())
}

func (i PublishingDestinationMap) ToPublishingDestinationMapOutputWithContext(ctx context.Context) PublishingDestinationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublishingDestinationMapOutput)
}

type PublishingDestinationOutput struct{ *pulumi.OutputState }

func (PublishingDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublishingDestination)(nil)).Elem()
}

func (o PublishingDestinationOutput) ToPublishingDestinationOutput() PublishingDestinationOutput {
	return o
}

func (o PublishingDestinationOutput) ToPublishingDestinationOutputWithContext(ctx context.Context) PublishingDestinationOutput {
	return o
}

func (o PublishingDestinationOutput) DestinationArn() pulumi.StringOutput {
	return o.ApplyT(func(v *PublishingDestination) pulumi.StringOutput { return v.DestinationArn }).(pulumi.StringOutput)
}

func (o PublishingDestinationOutput) DestinationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PublishingDestination) pulumi.StringPtrOutput { return v.DestinationType }).(pulumi.StringPtrOutput)
}

func (o PublishingDestinationOutput) DetectorId() pulumi.StringOutput {
	return o.ApplyT(func(v *PublishingDestination) pulumi.StringOutput { return v.DetectorId }).(pulumi.StringOutput)
}

func (o PublishingDestinationOutput) KmsKeyArn() pulumi.StringOutput {
	return o.ApplyT(func(v *PublishingDestination) pulumi.StringOutput { return v.KmsKeyArn }).(pulumi.StringOutput)
}

type PublishingDestinationArrayOutput struct{ *pulumi.OutputState }

func (PublishingDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PublishingDestination)(nil)).Elem()
}

func (o PublishingDestinationArrayOutput) ToPublishingDestinationArrayOutput() PublishingDestinationArrayOutput {
	return o
}

func (o PublishingDestinationArrayOutput) ToPublishingDestinationArrayOutputWithContext(ctx context.Context) PublishingDestinationArrayOutput {
	return o
}

func (o PublishingDestinationArrayOutput) Index(i pulumi.IntInput) PublishingDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PublishingDestination {
		return vs[0].([]*PublishingDestination)[vs[1].(int)]
	}).(PublishingDestinationOutput)
}

type PublishingDestinationMapOutput struct{ *pulumi.OutputState }

func (PublishingDestinationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PublishingDestination)(nil)).Elem()
}

func (o PublishingDestinationMapOutput) ToPublishingDestinationMapOutput() PublishingDestinationMapOutput {
	return o
}

func (o PublishingDestinationMapOutput) ToPublishingDestinationMapOutputWithContext(ctx context.Context) PublishingDestinationMapOutput {
	return o
}

func (o PublishingDestinationMapOutput) MapIndex(k pulumi.StringInput) PublishingDestinationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PublishingDestination {
		return vs[0].(map[string]*PublishingDestination)[vs[1].(string)]
	}).(PublishingDestinationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PublishingDestinationInput)(nil)).Elem(), &PublishingDestination{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublishingDestinationArrayInput)(nil)).Elem(), PublishingDestinationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublishingDestinationMapInput)(nil)).Elem(), PublishingDestinationMap{})
	pulumi.RegisterOutputType(PublishingDestinationOutput{})
	pulumi.RegisterOutputType(PublishingDestinationArrayOutput{})
	pulumi.RegisterOutputType(PublishingDestinationMapOutput{})
}
