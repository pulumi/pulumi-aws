// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package guardduty

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to manage a GuardDuty ThreatIntelSet.
//
// > **Note:** Currently in GuardDuty, users from member accounts cannot upload and further manage ThreatIntelSets. ThreatIntelSets that are uploaded by the primary account are imposed on GuardDuty functionality in its member accounts. See the [GuardDuty API Documentation](https://docs.aws.amazon.com/guardduty/latest/ug/create-threat-intel-set.html)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/guardduty"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/s3"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			primary, err := guardduty.NewDetector(ctx, "primary", &guardduty.DetectorArgs{
//				Enable: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			bucket, err := s3.NewBucketV2(ctx, "bucket", nil)
//			if err != nil {
//				return err
//			}
//			_, err = s3.NewBucketAclV2(ctx, "bucketAcl", &s3.BucketAclV2Args{
//				Bucket: bucket.ID(),
//				Acl:    pulumi.String("private"),
//			})
//			if err != nil {
//				return err
//			}
//			myThreatIntelSetBucketObjectv2, err := s3.NewBucketObjectv2(ctx, "myThreatIntelSetBucketObjectv2", &s3.BucketObjectv2Args{
//				Acl:     pulumi.String("public-read"),
//				Content: pulumi.String("10.0.0.0/8\n"),
//				Bucket:  bucket.ID(),
//				Key:     pulumi.String("MyThreatIntelSet"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = guardduty.NewThreatIntelSet(ctx, "myThreatIntelSetThreatIntelSet", &guardduty.ThreatIntelSetArgs{
//				Activate:   pulumi.Bool(true),
//				DetectorId: primary.ID(),
//				Format:     pulumi.String("TXT"),
//				Location: pulumi.All(myThreatIntelSetBucketObjectv2.Bucket, myThreatIntelSetBucketObjectv2.Key).ApplyT(func(_args []interface{}) (string, error) {
//					bucket := _args[0].(string)
//					key := _args[1].(string)
//					return fmt.Sprintf("https://s3.amazonaws.com/%v/%v", bucket, key), nil
//				}).(pulumi.StringOutput),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import GuardDuty ThreatIntelSet using the primary GuardDuty detector ID and ThreatIntelSetID. For example:
//
// ```sh
//
//	$ pulumi import aws:guardduty/threatIntelSet:ThreatIntelSet MyThreatIntelSet 00b00fd5aecc0ab60a708659477e9617:123456789012
//
// ```
type ThreatIntelSet struct {
	pulumi.CustomResourceState

	// Specifies whether GuardDuty is to start using the uploaded ThreatIntelSet.
	Activate pulumi.BoolOutput `pulumi:"activate"`
	// Amazon Resource Name (ARN) of the GuardDuty ThreatIntelSet.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The detector ID of the GuardDuty.
	DetectorId pulumi.StringOutput `pulumi:"detectorId"`
	// The format of the file that contains the ThreatIntelSet. Valid values: `TXT` | `STIX` | `OTX_CSV` | `ALIEN_VAULT` | `PROOF_POINT` | `FIRE_EYE`
	Format pulumi.StringOutput `pulumi:"format"`
	// The URI of the file that contains the ThreatIntelSet.
	Location pulumi.StringOutput `pulumi:"location"`
	// The friendly name to identify the ThreatIntelSet.
	Name pulumi.StringOutput `pulumi:"name"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewThreatIntelSet registers a new resource with the given unique name, arguments, and options.
func NewThreatIntelSet(ctx *pulumi.Context,
	name string, args *ThreatIntelSetArgs, opts ...pulumi.ResourceOption) (*ThreatIntelSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Activate == nil {
		return nil, errors.New("invalid value for required argument 'Activate'")
	}
	if args.DetectorId == nil {
		return nil, errors.New("invalid value for required argument 'DetectorId'")
	}
	if args.Format == nil {
		return nil, errors.New("invalid value for required argument 'Format'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ThreatIntelSet
	err := ctx.RegisterResource("aws:guardduty/threatIntelSet:ThreatIntelSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetThreatIntelSet gets an existing ThreatIntelSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetThreatIntelSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ThreatIntelSetState, opts ...pulumi.ResourceOption) (*ThreatIntelSet, error) {
	var resource ThreatIntelSet
	err := ctx.ReadResource("aws:guardduty/threatIntelSet:ThreatIntelSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ThreatIntelSet resources.
type threatIntelSetState struct {
	// Specifies whether GuardDuty is to start using the uploaded ThreatIntelSet.
	Activate *bool `pulumi:"activate"`
	// Amazon Resource Name (ARN) of the GuardDuty ThreatIntelSet.
	Arn *string `pulumi:"arn"`
	// The detector ID of the GuardDuty.
	DetectorId *string `pulumi:"detectorId"`
	// The format of the file that contains the ThreatIntelSet. Valid values: `TXT` | `STIX` | `OTX_CSV` | `ALIEN_VAULT` | `PROOF_POINT` | `FIRE_EYE`
	Format *string `pulumi:"format"`
	// The URI of the file that contains the ThreatIntelSet.
	Location *string `pulumi:"location"`
	// The friendly name to identify the ThreatIntelSet.
	Name *string `pulumi:"name"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type ThreatIntelSetState struct {
	// Specifies whether GuardDuty is to start using the uploaded ThreatIntelSet.
	Activate pulumi.BoolPtrInput
	// Amazon Resource Name (ARN) of the GuardDuty ThreatIntelSet.
	Arn pulumi.StringPtrInput
	// The detector ID of the GuardDuty.
	DetectorId pulumi.StringPtrInput
	// The format of the file that contains the ThreatIntelSet. Valid values: `TXT` | `STIX` | `OTX_CSV` | `ALIEN_VAULT` | `PROOF_POINT` | `FIRE_EYE`
	Format pulumi.StringPtrInput
	// The URI of the file that contains the ThreatIntelSet.
	Location pulumi.StringPtrInput
	// The friendly name to identify the ThreatIntelSet.
	Name pulumi.StringPtrInput
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapInput
}

func (ThreatIntelSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*threatIntelSetState)(nil)).Elem()
}

type threatIntelSetArgs struct {
	// Specifies whether GuardDuty is to start using the uploaded ThreatIntelSet.
	Activate bool `pulumi:"activate"`
	// The detector ID of the GuardDuty.
	DetectorId string `pulumi:"detectorId"`
	// The format of the file that contains the ThreatIntelSet. Valid values: `TXT` | `STIX` | `OTX_CSV` | `ALIEN_VAULT` | `PROOF_POINT` | `FIRE_EYE`
	Format string `pulumi:"format"`
	// The URI of the file that contains the ThreatIntelSet.
	Location string `pulumi:"location"`
	// The friendly name to identify the ThreatIntelSet.
	Name *string `pulumi:"name"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ThreatIntelSet resource.
type ThreatIntelSetArgs struct {
	// Specifies whether GuardDuty is to start using the uploaded ThreatIntelSet.
	Activate pulumi.BoolInput
	// The detector ID of the GuardDuty.
	DetectorId pulumi.StringInput
	// The format of the file that contains the ThreatIntelSet. Valid values: `TXT` | `STIX` | `OTX_CSV` | `ALIEN_VAULT` | `PROOF_POINT` | `FIRE_EYE`
	Format pulumi.StringInput
	// The URI of the file that contains the ThreatIntelSet.
	Location pulumi.StringInput
	// The friendly name to identify the ThreatIntelSet.
	Name pulumi.StringPtrInput
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
}

func (ThreatIntelSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*threatIntelSetArgs)(nil)).Elem()
}

type ThreatIntelSetInput interface {
	pulumi.Input

	ToThreatIntelSetOutput() ThreatIntelSetOutput
	ToThreatIntelSetOutputWithContext(ctx context.Context) ThreatIntelSetOutput
}

func (*ThreatIntelSet) ElementType() reflect.Type {
	return reflect.TypeOf((**ThreatIntelSet)(nil)).Elem()
}

func (i *ThreatIntelSet) ToThreatIntelSetOutput() ThreatIntelSetOutput {
	return i.ToThreatIntelSetOutputWithContext(context.Background())
}

func (i *ThreatIntelSet) ToThreatIntelSetOutputWithContext(ctx context.Context) ThreatIntelSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThreatIntelSetOutput)
}

func (i *ThreatIntelSet) ToOutput(ctx context.Context) pulumix.Output[*ThreatIntelSet] {
	return pulumix.Output[*ThreatIntelSet]{
		OutputState: i.ToThreatIntelSetOutputWithContext(ctx).OutputState,
	}
}

// ThreatIntelSetArrayInput is an input type that accepts ThreatIntelSetArray and ThreatIntelSetArrayOutput values.
// You can construct a concrete instance of `ThreatIntelSetArrayInput` via:
//
//	ThreatIntelSetArray{ ThreatIntelSetArgs{...} }
type ThreatIntelSetArrayInput interface {
	pulumi.Input

	ToThreatIntelSetArrayOutput() ThreatIntelSetArrayOutput
	ToThreatIntelSetArrayOutputWithContext(context.Context) ThreatIntelSetArrayOutput
}

type ThreatIntelSetArray []ThreatIntelSetInput

func (ThreatIntelSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ThreatIntelSet)(nil)).Elem()
}

func (i ThreatIntelSetArray) ToThreatIntelSetArrayOutput() ThreatIntelSetArrayOutput {
	return i.ToThreatIntelSetArrayOutputWithContext(context.Background())
}

func (i ThreatIntelSetArray) ToThreatIntelSetArrayOutputWithContext(ctx context.Context) ThreatIntelSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThreatIntelSetArrayOutput)
}

func (i ThreatIntelSetArray) ToOutput(ctx context.Context) pulumix.Output[[]*ThreatIntelSet] {
	return pulumix.Output[[]*ThreatIntelSet]{
		OutputState: i.ToThreatIntelSetArrayOutputWithContext(ctx).OutputState,
	}
}

// ThreatIntelSetMapInput is an input type that accepts ThreatIntelSetMap and ThreatIntelSetMapOutput values.
// You can construct a concrete instance of `ThreatIntelSetMapInput` via:
//
//	ThreatIntelSetMap{ "key": ThreatIntelSetArgs{...} }
type ThreatIntelSetMapInput interface {
	pulumi.Input

	ToThreatIntelSetMapOutput() ThreatIntelSetMapOutput
	ToThreatIntelSetMapOutputWithContext(context.Context) ThreatIntelSetMapOutput
}

type ThreatIntelSetMap map[string]ThreatIntelSetInput

func (ThreatIntelSetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ThreatIntelSet)(nil)).Elem()
}

func (i ThreatIntelSetMap) ToThreatIntelSetMapOutput() ThreatIntelSetMapOutput {
	return i.ToThreatIntelSetMapOutputWithContext(context.Background())
}

func (i ThreatIntelSetMap) ToThreatIntelSetMapOutputWithContext(ctx context.Context) ThreatIntelSetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThreatIntelSetMapOutput)
}

func (i ThreatIntelSetMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ThreatIntelSet] {
	return pulumix.Output[map[string]*ThreatIntelSet]{
		OutputState: i.ToThreatIntelSetMapOutputWithContext(ctx).OutputState,
	}
}

type ThreatIntelSetOutput struct{ *pulumi.OutputState }

func (ThreatIntelSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThreatIntelSet)(nil)).Elem()
}

func (o ThreatIntelSetOutput) ToThreatIntelSetOutput() ThreatIntelSetOutput {
	return o
}

func (o ThreatIntelSetOutput) ToThreatIntelSetOutputWithContext(ctx context.Context) ThreatIntelSetOutput {
	return o
}

func (o ThreatIntelSetOutput) ToOutput(ctx context.Context) pulumix.Output[*ThreatIntelSet] {
	return pulumix.Output[*ThreatIntelSet]{
		OutputState: o.OutputState,
	}
}

// Specifies whether GuardDuty is to start using the uploaded ThreatIntelSet.
func (o ThreatIntelSetOutput) Activate() pulumi.BoolOutput {
	return o.ApplyT(func(v *ThreatIntelSet) pulumi.BoolOutput { return v.Activate }).(pulumi.BoolOutput)
}

// Amazon Resource Name (ARN) of the GuardDuty ThreatIntelSet.
func (o ThreatIntelSetOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ThreatIntelSet) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The detector ID of the GuardDuty.
func (o ThreatIntelSetOutput) DetectorId() pulumi.StringOutput {
	return o.ApplyT(func(v *ThreatIntelSet) pulumi.StringOutput { return v.DetectorId }).(pulumi.StringOutput)
}

// The format of the file that contains the ThreatIntelSet. Valid values: `TXT` | `STIX` | `OTX_CSV` | `ALIEN_VAULT` | `PROOF_POINT` | `FIRE_EYE`
func (o ThreatIntelSetOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v *ThreatIntelSet) pulumi.StringOutput { return v.Format }).(pulumi.StringOutput)
}

// The URI of the file that contains the ThreatIntelSet.
func (o ThreatIntelSetOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ThreatIntelSet) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The friendly name to identify the ThreatIntelSet.
func (o ThreatIntelSetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ThreatIntelSet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ThreatIntelSetOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ThreatIntelSet) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ThreatIntelSetOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ThreatIntelSet) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type ThreatIntelSetArrayOutput struct{ *pulumi.OutputState }

func (ThreatIntelSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ThreatIntelSet)(nil)).Elem()
}

func (o ThreatIntelSetArrayOutput) ToThreatIntelSetArrayOutput() ThreatIntelSetArrayOutput {
	return o
}

func (o ThreatIntelSetArrayOutput) ToThreatIntelSetArrayOutputWithContext(ctx context.Context) ThreatIntelSetArrayOutput {
	return o
}

func (o ThreatIntelSetArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ThreatIntelSet] {
	return pulumix.Output[[]*ThreatIntelSet]{
		OutputState: o.OutputState,
	}
}

func (o ThreatIntelSetArrayOutput) Index(i pulumi.IntInput) ThreatIntelSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ThreatIntelSet {
		return vs[0].([]*ThreatIntelSet)[vs[1].(int)]
	}).(ThreatIntelSetOutput)
}

type ThreatIntelSetMapOutput struct{ *pulumi.OutputState }

func (ThreatIntelSetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ThreatIntelSet)(nil)).Elem()
}

func (o ThreatIntelSetMapOutput) ToThreatIntelSetMapOutput() ThreatIntelSetMapOutput {
	return o
}

func (o ThreatIntelSetMapOutput) ToThreatIntelSetMapOutputWithContext(ctx context.Context) ThreatIntelSetMapOutput {
	return o
}

func (o ThreatIntelSetMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ThreatIntelSet] {
	return pulumix.Output[map[string]*ThreatIntelSet]{
		OutputState: o.OutputState,
	}
}

func (o ThreatIntelSetMapOutput) MapIndex(k pulumi.StringInput) ThreatIntelSetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ThreatIntelSet {
		return vs[0].(map[string]*ThreatIntelSet)[vs[1].(string)]
	}).(ThreatIntelSetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ThreatIntelSetInput)(nil)).Elem(), &ThreatIntelSet{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThreatIntelSetArrayInput)(nil)).Elem(), ThreatIntelSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThreatIntelSetMapInput)(nil)).Elem(), ThreatIntelSetMap{})
	pulumi.RegisterOutputType(ThreatIntelSetOutput{})
	pulumi.RegisterOutputType(ThreatIntelSetArrayOutput{})
	pulumi.RegisterOutputType(ThreatIntelSetMapOutput{})
}
