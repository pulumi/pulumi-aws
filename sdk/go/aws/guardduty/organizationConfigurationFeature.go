// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package guardduty

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to manage a single Amazon GuardDuty [organization configuration feature](https://docs.aws.amazon.com/guardduty/latest/ug/guardduty-features-activation-model.html#guardduty-features).
//
// > **NOTE:** Deleting this resource does not disable the organization configuration feature, the resource in simply removed from state instead.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/guardduty"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := guardduty.NewDetector(ctx, "example", &guardduty.DetectorArgs{
//				Enable: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = guardduty.NewOrganizationConfigurationFeature(ctx, "eksRuntimeMonitoring", &guardduty.OrganizationConfigurationFeatureArgs{
//				DetectorId: example.ID(),
//				AutoEnable: pulumi.String("ALL"),
//				AdditionalConfigurations: guardduty.OrganizationConfigurationFeatureAdditionalConfigurationArray{
//					&guardduty.OrganizationConfigurationFeatureAdditionalConfigurationArgs{
//						Name:       pulumi.String("EKS_ADDON_MANAGEMENT"),
//						AutoEnable: pulumi.String("NEW"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type OrganizationConfigurationFeature struct {
	pulumi.CustomResourceState

	// The additional information that will be configured for the organization See below.
	AdditionalConfigurations OrganizationConfigurationFeatureAdditionalConfigurationArrayOutput `pulumi:"additionalConfigurations"`
	// The status of the feature that is configured for the member accounts within the organization. Valid values: `NEW`, `ALL`, `NONE`.
	AutoEnable pulumi.StringOutput `pulumi:"autoEnable"`
	// The ID of the detector that configures the delegated administrator.
	DetectorId pulumi.StringOutput `pulumi:"detectorId"`
	// The name of the feature that will be configured for the organization. Valid values: `S3_DATA_EVENTS`, `EKS_AUDIT_LOGS`, `EBS_MALWARE_PROTECTION`, `RDS_LOGIN_EVENTS`, `EKS_RUNTIME_MONITORING`, `LAMBDA_NETWORK_LOGS`.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewOrganizationConfigurationFeature registers a new resource with the given unique name, arguments, and options.
func NewOrganizationConfigurationFeature(ctx *pulumi.Context,
	name string, args *OrganizationConfigurationFeatureArgs, opts ...pulumi.ResourceOption) (*OrganizationConfigurationFeature, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AutoEnable == nil {
		return nil, errors.New("invalid value for required argument 'AutoEnable'")
	}
	if args.DetectorId == nil {
		return nil, errors.New("invalid value for required argument 'DetectorId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OrganizationConfigurationFeature
	err := ctx.RegisterResource("aws:guardduty/organizationConfigurationFeature:OrganizationConfigurationFeature", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrganizationConfigurationFeature gets an existing OrganizationConfigurationFeature resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganizationConfigurationFeature(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrganizationConfigurationFeatureState, opts ...pulumi.ResourceOption) (*OrganizationConfigurationFeature, error) {
	var resource OrganizationConfigurationFeature
	err := ctx.ReadResource("aws:guardduty/organizationConfigurationFeature:OrganizationConfigurationFeature", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrganizationConfigurationFeature resources.
type organizationConfigurationFeatureState struct {
	// The additional information that will be configured for the organization See below.
	AdditionalConfigurations []OrganizationConfigurationFeatureAdditionalConfiguration `pulumi:"additionalConfigurations"`
	// The status of the feature that is configured for the member accounts within the organization. Valid values: `NEW`, `ALL`, `NONE`.
	AutoEnable *string `pulumi:"autoEnable"`
	// The ID of the detector that configures the delegated administrator.
	DetectorId *string `pulumi:"detectorId"`
	// The name of the feature that will be configured for the organization. Valid values: `S3_DATA_EVENTS`, `EKS_AUDIT_LOGS`, `EBS_MALWARE_PROTECTION`, `RDS_LOGIN_EVENTS`, `EKS_RUNTIME_MONITORING`, `LAMBDA_NETWORK_LOGS`.
	Name *string `pulumi:"name"`
}

type OrganizationConfigurationFeatureState struct {
	// The additional information that will be configured for the organization See below.
	AdditionalConfigurations OrganizationConfigurationFeatureAdditionalConfigurationArrayInput
	// The status of the feature that is configured for the member accounts within the organization. Valid values: `NEW`, `ALL`, `NONE`.
	AutoEnable pulumi.StringPtrInput
	// The ID of the detector that configures the delegated administrator.
	DetectorId pulumi.StringPtrInput
	// The name of the feature that will be configured for the organization. Valid values: `S3_DATA_EVENTS`, `EKS_AUDIT_LOGS`, `EBS_MALWARE_PROTECTION`, `RDS_LOGIN_EVENTS`, `EKS_RUNTIME_MONITORING`, `LAMBDA_NETWORK_LOGS`.
	Name pulumi.StringPtrInput
}

func (OrganizationConfigurationFeatureState) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationConfigurationFeatureState)(nil)).Elem()
}

type organizationConfigurationFeatureArgs struct {
	// The additional information that will be configured for the organization See below.
	AdditionalConfigurations []OrganizationConfigurationFeatureAdditionalConfiguration `pulumi:"additionalConfigurations"`
	// The status of the feature that is configured for the member accounts within the organization. Valid values: `NEW`, `ALL`, `NONE`.
	AutoEnable string `pulumi:"autoEnable"`
	// The ID of the detector that configures the delegated administrator.
	DetectorId string `pulumi:"detectorId"`
	// The name of the feature that will be configured for the organization. Valid values: `S3_DATA_EVENTS`, `EKS_AUDIT_LOGS`, `EBS_MALWARE_PROTECTION`, `RDS_LOGIN_EVENTS`, `EKS_RUNTIME_MONITORING`, `LAMBDA_NETWORK_LOGS`.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a OrganizationConfigurationFeature resource.
type OrganizationConfigurationFeatureArgs struct {
	// The additional information that will be configured for the organization See below.
	AdditionalConfigurations OrganizationConfigurationFeatureAdditionalConfigurationArrayInput
	// The status of the feature that is configured for the member accounts within the organization. Valid values: `NEW`, `ALL`, `NONE`.
	AutoEnable pulumi.StringInput
	// The ID of the detector that configures the delegated administrator.
	DetectorId pulumi.StringInput
	// The name of the feature that will be configured for the organization. Valid values: `S3_DATA_EVENTS`, `EKS_AUDIT_LOGS`, `EBS_MALWARE_PROTECTION`, `RDS_LOGIN_EVENTS`, `EKS_RUNTIME_MONITORING`, `LAMBDA_NETWORK_LOGS`.
	Name pulumi.StringPtrInput
}

func (OrganizationConfigurationFeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationConfigurationFeatureArgs)(nil)).Elem()
}

type OrganizationConfigurationFeatureInput interface {
	pulumi.Input

	ToOrganizationConfigurationFeatureOutput() OrganizationConfigurationFeatureOutput
	ToOrganizationConfigurationFeatureOutputWithContext(ctx context.Context) OrganizationConfigurationFeatureOutput
}

func (*OrganizationConfigurationFeature) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationConfigurationFeature)(nil)).Elem()
}

func (i *OrganizationConfigurationFeature) ToOrganizationConfigurationFeatureOutput() OrganizationConfigurationFeatureOutput {
	return i.ToOrganizationConfigurationFeatureOutputWithContext(context.Background())
}

func (i *OrganizationConfigurationFeature) ToOrganizationConfigurationFeatureOutputWithContext(ctx context.Context) OrganizationConfigurationFeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationConfigurationFeatureOutput)
}

func (i *OrganizationConfigurationFeature) ToOutput(ctx context.Context) pulumix.Output[*OrganizationConfigurationFeature] {
	return pulumix.Output[*OrganizationConfigurationFeature]{
		OutputState: i.ToOrganizationConfigurationFeatureOutputWithContext(ctx).OutputState,
	}
}

// OrganizationConfigurationFeatureArrayInput is an input type that accepts OrganizationConfigurationFeatureArray and OrganizationConfigurationFeatureArrayOutput values.
// You can construct a concrete instance of `OrganizationConfigurationFeatureArrayInput` via:
//
//	OrganizationConfigurationFeatureArray{ OrganizationConfigurationFeatureArgs{...} }
type OrganizationConfigurationFeatureArrayInput interface {
	pulumi.Input

	ToOrganizationConfigurationFeatureArrayOutput() OrganizationConfigurationFeatureArrayOutput
	ToOrganizationConfigurationFeatureArrayOutputWithContext(context.Context) OrganizationConfigurationFeatureArrayOutput
}

type OrganizationConfigurationFeatureArray []OrganizationConfigurationFeatureInput

func (OrganizationConfigurationFeatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrganizationConfigurationFeature)(nil)).Elem()
}

func (i OrganizationConfigurationFeatureArray) ToOrganizationConfigurationFeatureArrayOutput() OrganizationConfigurationFeatureArrayOutput {
	return i.ToOrganizationConfigurationFeatureArrayOutputWithContext(context.Background())
}

func (i OrganizationConfigurationFeatureArray) ToOrganizationConfigurationFeatureArrayOutputWithContext(ctx context.Context) OrganizationConfigurationFeatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationConfigurationFeatureArrayOutput)
}

func (i OrganizationConfigurationFeatureArray) ToOutput(ctx context.Context) pulumix.Output[[]*OrganizationConfigurationFeature] {
	return pulumix.Output[[]*OrganizationConfigurationFeature]{
		OutputState: i.ToOrganizationConfigurationFeatureArrayOutputWithContext(ctx).OutputState,
	}
}

// OrganizationConfigurationFeatureMapInput is an input type that accepts OrganizationConfigurationFeatureMap and OrganizationConfigurationFeatureMapOutput values.
// You can construct a concrete instance of `OrganizationConfigurationFeatureMapInput` via:
//
//	OrganizationConfigurationFeatureMap{ "key": OrganizationConfigurationFeatureArgs{...} }
type OrganizationConfigurationFeatureMapInput interface {
	pulumi.Input

	ToOrganizationConfigurationFeatureMapOutput() OrganizationConfigurationFeatureMapOutput
	ToOrganizationConfigurationFeatureMapOutputWithContext(context.Context) OrganizationConfigurationFeatureMapOutput
}

type OrganizationConfigurationFeatureMap map[string]OrganizationConfigurationFeatureInput

func (OrganizationConfigurationFeatureMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrganizationConfigurationFeature)(nil)).Elem()
}

func (i OrganizationConfigurationFeatureMap) ToOrganizationConfigurationFeatureMapOutput() OrganizationConfigurationFeatureMapOutput {
	return i.ToOrganizationConfigurationFeatureMapOutputWithContext(context.Background())
}

func (i OrganizationConfigurationFeatureMap) ToOrganizationConfigurationFeatureMapOutputWithContext(ctx context.Context) OrganizationConfigurationFeatureMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationConfigurationFeatureMapOutput)
}

func (i OrganizationConfigurationFeatureMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*OrganizationConfigurationFeature] {
	return pulumix.Output[map[string]*OrganizationConfigurationFeature]{
		OutputState: i.ToOrganizationConfigurationFeatureMapOutputWithContext(ctx).OutputState,
	}
}

type OrganizationConfigurationFeatureOutput struct{ *pulumi.OutputState }

func (OrganizationConfigurationFeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationConfigurationFeature)(nil)).Elem()
}

func (o OrganizationConfigurationFeatureOutput) ToOrganizationConfigurationFeatureOutput() OrganizationConfigurationFeatureOutput {
	return o
}

func (o OrganizationConfigurationFeatureOutput) ToOrganizationConfigurationFeatureOutputWithContext(ctx context.Context) OrganizationConfigurationFeatureOutput {
	return o
}

func (o OrganizationConfigurationFeatureOutput) ToOutput(ctx context.Context) pulumix.Output[*OrganizationConfigurationFeature] {
	return pulumix.Output[*OrganizationConfigurationFeature]{
		OutputState: o.OutputState,
	}
}

// The additional information that will be configured for the organization See below.
func (o OrganizationConfigurationFeatureOutput) AdditionalConfigurations() OrganizationConfigurationFeatureAdditionalConfigurationArrayOutput {
	return o.ApplyT(func(v *OrganizationConfigurationFeature) OrganizationConfigurationFeatureAdditionalConfigurationArrayOutput {
		return v.AdditionalConfigurations
	}).(OrganizationConfigurationFeatureAdditionalConfigurationArrayOutput)
}

// The status of the feature that is configured for the member accounts within the organization. Valid values: `NEW`, `ALL`, `NONE`.
func (o OrganizationConfigurationFeatureOutput) AutoEnable() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationConfigurationFeature) pulumi.StringOutput { return v.AutoEnable }).(pulumi.StringOutput)
}

// The ID of the detector that configures the delegated administrator.
func (o OrganizationConfigurationFeatureOutput) DetectorId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationConfigurationFeature) pulumi.StringOutput { return v.DetectorId }).(pulumi.StringOutput)
}

// The name of the feature that will be configured for the organization. Valid values: `S3_DATA_EVENTS`, `EKS_AUDIT_LOGS`, `EBS_MALWARE_PROTECTION`, `RDS_LOGIN_EVENTS`, `EKS_RUNTIME_MONITORING`, `LAMBDA_NETWORK_LOGS`.
func (o OrganizationConfigurationFeatureOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationConfigurationFeature) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type OrganizationConfigurationFeatureArrayOutput struct{ *pulumi.OutputState }

func (OrganizationConfigurationFeatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrganizationConfigurationFeature)(nil)).Elem()
}

func (o OrganizationConfigurationFeatureArrayOutput) ToOrganizationConfigurationFeatureArrayOutput() OrganizationConfigurationFeatureArrayOutput {
	return o
}

func (o OrganizationConfigurationFeatureArrayOutput) ToOrganizationConfigurationFeatureArrayOutputWithContext(ctx context.Context) OrganizationConfigurationFeatureArrayOutput {
	return o
}

func (o OrganizationConfigurationFeatureArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*OrganizationConfigurationFeature] {
	return pulumix.Output[[]*OrganizationConfigurationFeature]{
		OutputState: o.OutputState,
	}
}

func (o OrganizationConfigurationFeatureArrayOutput) Index(i pulumi.IntInput) OrganizationConfigurationFeatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrganizationConfigurationFeature {
		return vs[0].([]*OrganizationConfigurationFeature)[vs[1].(int)]
	}).(OrganizationConfigurationFeatureOutput)
}

type OrganizationConfigurationFeatureMapOutput struct{ *pulumi.OutputState }

func (OrganizationConfigurationFeatureMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrganizationConfigurationFeature)(nil)).Elem()
}

func (o OrganizationConfigurationFeatureMapOutput) ToOrganizationConfigurationFeatureMapOutput() OrganizationConfigurationFeatureMapOutput {
	return o
}

func (o OrganizationConfigurationFeatureMapOutput) ToOrganizationConfigurationFeatureMapOutputWithContext(ctx context.Context) OrganizationConfigurationFeatureMapOutput {
	return o
}

func (o OrganizationConfigurationFeatureMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*OrganizationConfigurationFeature] {
	return pulumix.Output[map[string]*OrganizationConfigurationFeature]{
		OutputState: o.OutputState,
	}
}

func (o OrganizationConfigurationFeatureMapOutput) MapIndex(k pulumi.StringInput) OrganizationConfigurationFeatureOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrganizationConfigurationFeature {
		return vs[0].(map[string]*OrganizationConfigurationFeature)[vs[1].(string)]
	}).(OrganizationConfigurationFeatureOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationConfigurationFeatureInput)(nil)).Elem(), &OrganizationConfigurationFeature{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationConfigurationFeatureArrayInput)(nil)).Elem(), OrganizationConfigurationFeatureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationConfigurationFeatureMapInput)(nil)).Elem(), OrganizationConfigurationFeatureMap{})
	pulumi.RegisterOutputType(OrganizationConfigurationFeatureOutput{})
	pulumi.RegisterOutputType(OrganizationConfigurationFeatureArrayOutput{})
	pulumi.RegisterOutputType(OrganizationConfigurationFeatureMapOutput{})
}
