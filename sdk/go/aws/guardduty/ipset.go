// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package guardduty

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IPSet struct {
	pulumi.CustomResourceState

	Activate   pulumi.BoolOutput      `pulumi:"activate"`
	Arn        pulumi.StringOutput    `pulumi:"arn"`
	DetectorId pulumi.StringOutput    `pulumi:"detectorId"`
	Format     pulumi.StringOutput    `pulumi:"format"`
	Location   pulumi.StringOutput    `pulumi:"location"`
	Name       pulumi.StringOutput    `pulumi:"name"`
	Tags       pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll    pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewIPSet registers a new resource with the given unique name, arguments, and options.
func NewIPSet(ctx *pulumi.Context,
	name string, args *IPSetArgs, opts ...pulumi.ResourceOption) (*IPSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Activate == nil {
		return nil, errors.New("invalid value for required argument 'Activate'")
	}
	if args.DetectorId == nil {
		return nil, errors.New("invalid value for required argument 'DetectorId'")
	}
	if args.Format == nil {
		return nil, errors.New("invalid value for required argument 'Format'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	var resource IPSet
	err := ctx.RegisterResource("aws:guardduty/iPSet:IPSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIPSet gets an existing IPSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIPSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IPSetState, opts ...pulumi.ResourceOption) (*IPSet, error) {
	var resource IPSet
	err := ctx.ReadResource("aws:guardduty/iPSet:IPSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IPSet resources.
type ipsetState struct {
	Activate   *bool             `pulumi:"activate"`
	Arn        *string           `pulumi:"arn"`
	DetectorId *string           `pulumi:"detectorId"`
	Format     *string           `pulumi:"format"`
	Location   *string           `pulumi:"location"`
	Name       *string           `pulumi:"name"`
	Tags       map[string]string `pulumi:"tags"`
	TagsAll    map[string]string `pulumi:"tagsAll"`
}

type IPSetState struct {
	Activate   pulumi.BoolPtrInput
	Arn        pulumi.StringPtrInput
	DetectorId pulumi.StringPtrInput
	Format     pulumi.StringPtrInput
	Location   pulumi.StringPtrInput
	Name       pulumi.StringPtrInput
	Tags       pulumi.StringMapInput
	TagsAll    pulumi.StringMapInput
}

func (IPSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipsetState)(nil)).Elem()
}

type ipsetArgs struct {
	Activate   bool              `pulumi:"activate"`
	DetectorId string            `pulumi:"detectorId"`
	Format     string            `pulumi:"format"`
	Location   string            `pulumi:"location"`
	Name       *string           `pulumi:"name"`
	Tags       map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a IPSet resource.
type IPSetArgs struct {
	Activate   pulumi.BoolInput
	DetectorId pulumi.StringInput
	Format     pulumi.StringInput
	Location   pulumi.StringInput
	Name       pulumi.StringPtrInput
	Tags       pulumi.StringMapInput
}

func (IPSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipsetArgs)(nil)).Elem()
}

type IPSetInput interface {
	pulumi.Input

	ToIPSetOutput() IPSetOutput
	ToIPSetOutputWithContext(ctx context.Context) IPSetOutput
}

func (*IPSet) ElementType() reflect.Type {
	return reflect.TypeOf((**IPSet)(nil)).Elem()
}

func (i *IPSet) ToIPSetOutput() IPSetOutput {
	return i.ToIPSetOutputWithContext(context.Background())
}

func (i *IPSet) ToIPSetOutputWithContext(ctx context.Context) IPSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPSetOutput)
}

// IPSetArrayInput is an input type that accepts IPSetArray and IPSetArrayOutput values.
// You can construct a concrete instance of `IPSetArrayInput` via:
//
//	IPSetArray{ IPSetArgs{...} }
type IPSetArrayInput interface {
	pulumi.Input

	ToIPSetArrayOutput() IPSetArrayOutput
	ToIPSetArrayOutputWithContext(context.Context) IPSetArrayOutput
}

type IPSetArray []IPSetInput

func (IPSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPSet)(nil)).Elem()
}

func (i IPSetArray) ToIPSetArrayOutput() IPSetArrayOutput {
	return i.ToIPSetArrayOutputWithContext(context.Background())
}

func (i IPSetArray) ToIPSetArrayOutputWithContext(ctx context.Context) IPSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPSetArrayOutput)
}

// IPSetMapInput is an input type that accepts IPSetMap and IPSetMapOutput values.
// You can construct a concrete instance of `IPSetMapInput` via:
//
//	IPSetMap{ "key": IPSetArgs{...} }
type IPSetMapInput interface {
	pulumi.Input

	ToIPSetMapOutput() IPSetMapOutput
	ToIPSetMapOutputWithContext(context.Context) IPSetMapOutput
}

type IPSetMap map[string]IPSetInput

func (IPSetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPSet)(nil)).Elem()
}

func (i IPSetMap) ToIPSetMapOutput() IPSetMapOutput {
	return i.ToIPSetMapOutputWithContext(context.Background())
}

func (i IPSetMap) ToIPSetMapOutputWithContext(ctx context.Context) IPSetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPSetMapOutput)
}

type IPSetOutput struct{ *pulumi.OutputState }

func (IPSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPSet)(nil)).Elem()
}

func (o IPSetOutput) ToIPSetOutput() IPSetOutput {
	return o
}

func (o IPSetOutput) ToIPSetOutputWithContext(ctx context.Context) IPSetOutput {
	return o
}

func (o IPSetOutput) Activate() pulumi.BoolOutput {
	return o.ApplyT(func(v *IPSet) pulumi.BoolOutput { return v.Activate }).(pulumi.BoolOutput)
}

func (o IPSetOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *IPSet) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o IPSetOutput) DetectorId() pulumi.StringOutput {
	return o.ApplyT(func(v *IPSet) pulumi.StringOutput { return v.DetectorId }).(pulumi.StringOutput)
}

func (o IPSetOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v *IPSet) pulumi.StringOutput { return v.Format }).(pulumi.StringOutput)
}

func (o IPSetOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *IPSet) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o IPSetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IPSet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o IPSetOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *IPSet) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o IPSetOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *IPSet) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type IPSetArrayOutput struct{ *pulumi.OutputState }

func (IPSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPSet)(nil)).Elem()
}

func (o IPSetArrayOutput) ToIPSetArrayOutput() IPSetArrayOutput {
	return o
}

func (o IPSetArrayOutput) ToIPSetArrayOutputWithContext(ctx context.Context) IPSetArrayOutput {
	return o
}

func (o IPSetArrayOutput) Index(i pulumi.IntInput) IPSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IPSet {
		return vs[0].([]*IPSet)[vs[1].(int)]
	}).(IPSetOutput)
}

type IPSetMapOutput struct{ *pulumi.OutputState }

func (IPSetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPSet)(nil)).Elem()
}

func (o IPSetMapOutput) ToIPSetMapOutput() IPSetMapOutput {
	return o
}

func (o IPSetMapOutput) ToIPSetMapOutputWithContext(ctx context.Context) IPSetMapOutput {
	return o
}

func (o IPSetMapOutput) MapIndex(k pulumi.StringInput) IPSetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IPSet {
		return vs[0].(map[string]*IPSet)[vs[1].(string)]
	}).(IPSetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IPSetInput)(nil)).Elem(), &IPSet{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPSetArrayInput)(nil)).Elem(), IPSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPSetMapInput)(nil)).Elem(), IPSetMap{})
	pulumi.RegisterOutputType(IPSetOutput{})
	pulumi.RegisterOutputType(IPSetArrayOutput{})
	pulumi.RegisterOutputType(IPSetMapOutput{})
}
