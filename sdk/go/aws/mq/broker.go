// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mq

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Broker struct {
	pulumi.CustomResourceState

	ApplyImmediately           pulumi.BoolPtrOutput                   `pulumi:"applyImmediately"`
	Arn                        pulumi.StringOutput                    `pulumi:"arn"`
	AuthenticationStrategy     pulumi.StringOutput                    `pulumi:"authenticationStrategy"`
	AutoMinorVersionUpgrade    pulumi.BoolPtrOutput                   `pulumi:"autoMinorVersionUpgrade"`
	BrokerName                 pulumi.StringOutput                    `pulumi:"brokerName"`
	Configuration              BrokerConfigurationOutput              `pulumi:"configuration"`
	DeploymentMode             pulumi.StringPtrOutput                 `pulumi:"deploymentMode"`
	EncryptionOptions          BrokerEncryptionOptionsPtrOutput       `pulumi:"encryptionOptions"`
	EngineType                 pulumi.StringOutput                    `pulumi:"engineType"`
	EngineVersion              pulumi.StringOutput                    `pulumi:"engineVersion"`
	HostInstanceType           pulumi.StringOutput                    `pulumi:"hostInstanceType"`
	Instances                  BrokerInstanceArrayOutput              `pulumi:"instances"`
	LdapServerMetadata         BrokerLdapServerMetadataPtrOutput      `pulumi:"ldapServerMetadata"`
	Logs                       BrokerLogsPtrOutput                    `pulumi:"logs"`
	MaintenanceWindowStartTime BrokerMaintenanceWindowStartTimeOutput `pulumi:"maintenanceWindowStartTime"`
	PubliclyAccessible         pulumi.BoolPtrOutput                   `pulumi:"publiclyAccessible"`
	SecurityGroups             pulumi.StringArrayOutput               `pulumi:"securityGroups"`
	StorageType                pulumi.StringOutput                    `pulumi:"storageType"`
	SubnetIds                  pulumi.StringArrayOutput               `pulumi:"subnetIds"`
	Tags                       pulumi.StringMapOutput                 `pulumi:"tags"`
	TagsAll                    pulumi.StringMapOutput                 `pulumi:"tagsAll"`
	Users                      BrokerUserArrayOutput                  `pulumi:"users"`
}

// NewBroker registers a new resource with the given unique name, arguments, and options.
func NewBroker(ctx *pulumi.Context,
	name string, args *BrokerArgs, opts ...pulumi.ResourceOption) (*Broker, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EngineType == nil {
		return nil, errors.New("invalid value for required argument 'EngineType'")
	}
	if args.EngineVersion == nil {
		return nil, errors.New("invalid value for required argument 'EngineVersion'")
	}
	if args.HostInstanceType == nil {
		return nil, errors.New("invalid value for required argument 'HostInstanceType'")
	}
	if args.Users == nil {
		return nil, errors.New("invalid value for required argument 'Users'")
	}
	var resource Broker
	err := ctx.RegisterResource("aws:mq/broker:Broker", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBroker gets an existing Broker resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBroker(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BrokerState, opts ...pulumi.ResourceOption) (*Broker, error) {
	var resource Broker
	err := ctx.ReadResource("aws:mq/broker:Broker", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Broker resources.
type brokerState struct {
	ApplyImmediately           *bool                             `pulumi:"applyImmediately"`
	Arn                        *string                           `pulumi:"arn"`
	AuthenticationStrategy     *string                           `pulumi:"authenticationStrategy"`
	AutoMinorVersionUpgrade    *bool                             `pulumi:"autoMinorVersionUpgrade"`
	BrokerName                 *string                           `pulumi:"brokerName"`
	Configuration              *BrokerConfiguration              `pulumi:"configuration"`
	DeploymentMode             *string                           `pulumi:"deploymentMode"`
	EncryptionOptions          *BrokerEncryptionOptions          `pulumi:"encryptionOptions"`
	EngineType                 *string                           `pulumi:"engineType"`
	EngineVersion              *string                           `pulumi:"engineVersion"`
	HostInstanceType           *string                           `pulumi:"hostInstanceType"`
	Instances                  []BrokerInstance                  `pulumi:"instances"`
	LdapServerMetadata         *BrokerLdapServerMetadata         `pulumi:"ldapServerMetadata"`
	Logs                       *BrokerLogs                       `pulumi:"logs"`
	MaintenanceWindowStartTime *BrokerMaintenanceWindowStartTime `pulumi:"maintenanceWindowStartTime"`
	PubliclyAccessible         *bool                             `pulumi:"publiclyAccessible"`
	SecurityGroups             []string                          `pulumi:"securityGroups"`
	StorageType                *string                           `pulumi:"storageType"`
	SubnetIds                  []string                          `pulumi:"subnetIds"`
	Tags                       map[string]string                 `pulumi:"tags"`
	TagsAll                    map[string]string                 `pulumi:"tagsAll"`
	Users                      []BrokerUser                      `pulumi:"users"`
}

type BrokerState struct {
	ApplyImmediately           pulumi.BoolPtrInput
	Arn                        pulumi.StringPtrInput
	AuthenticationStrategy     pulumi.StringPtrInput
	AutoMinorVersionUpgrade    pulumi.BoolPtrInput
	BrokerName                 pulumi.StringPtrInput
	Configuration              BrokerConfigurationPtrInput
	DeploymentMode             pulumi.StringPtrInput
	EncryptionOptions          BrokerEncryptionOptionsPtrInput
	EngineType                 pulumi.StringPtrInput
	EngineVersion              pulumi.StringPtrInput
	HostInstanceType           pulumi.StringPtrInput
	Instances                  BrokerInstanceArrayInput
	LdapServerMetadata         BrokerLdapServerMetadataPtrInput
	Logs                       BrokerLogsPtrInput
	MaintenanceWindowStartTime BrokerMaintenanceWindowStartTimePtrInput
	PubliclyAccessible         pulumi.BoolPtrInput
	SecurityGroups             pulumi.StringArrayInput
	StorageType                pulumi.StringPtrInput
	SubnetIds                  pulumi.StringArrayInput
	Tags                       pulumi.StringMapInput
	TagsAll                    pulumi.StringMapInput
	Users                      BrokerUserArrayInput
}

func (BrokerState) ElementType() reflect.Type {
	return reflect.TypeOf((*brokerState)(nil)).Elem()
}

type brokerArgs struct {
	ApplyImmediately           *bool                             `pulumi:"applyImmediately"`
	AuthenticationStrategy     *string                           `pulumi:"authenticationStrategy"`
	AutoMinorVersionUpgrade    *bool                             `pulumi:"autoMinorVersionUpgrade"`
	BrokerName                 *string                           `pulumi:"brokerName"`
	Configuration              *BrokerConfiguration              `pulumi:"configuration"`
	DeploymentMode             *string                           `pulumi:"deploymentMode"`
	EncryptionOptions          *BrokerEncryptionOptions          `pulumi:"encryptionOptions"`
	EngineType                 string                            `pulumi:"engineType"`
	EngineVersion              string                            `pulumi:"engineVersion"`
	HostInstanceType           string                            `pulumi:"hostInstanceType"`
	LdapServerMetadata         *BrokerLdapServerMetadata         `pulumi:"ldapServerMetadata"`
	Logs                       *BrokerLogs                       `pulumi:"logs"`
	MaintenanceWindowStartTime *BrokerMaintenanceWindowStartTime `pulumi:"maintenanceWindowStartTime"`
	PubliclyAccessible         *bool                             `pulumi:"publiclyAccessible"`
	SecurityGroups             []string                          `pulumi:"securityGroups"`
	StorageType                *string                           `pulumi:"storageType"`
	SubnetIds                  []string                          `pulumi:"subnetIds"`
	Tags                       map[string]string                 `pulumi:"tags"`
	Users                      []BrokerUser                      `pulumi:"users"`
}

// The set of arguments for constructing a Broker resource.
type BrokerArgs struct {
	ApplyImmediately           pulumi.BoolPtrInput
	AuthenticationStrategy     pulumi.StringPtrInput
	AutoMinorVersionUpgrade    pulumi.BoolPtrInput
	BrokerName                 pulumi.StringPtrInput
	Configuration              BrokerConfigurationPtrInput
	DeploymentMode             pulumi.StringPtrInput
	EncryptionOptions          BrokerEncryptionOptionsPtrInput
	EngineType                 pulumi.StringInput
	EngineVersion              pulumi.StringInput
	HostInstanceType           pulumi.StringInput
	LdapServerMetadata         BrokerLdapServerMetadataPtrInput
	Logs                       BrokerLogsPtrInput
	MaintenanceWindowStartTime BrokerMaintenanceWindowStartTimePtrInput
	PubliclyAccessible         pulumi.BoolPtrInput
	SecurityGroups             pulumi.StringArrayInput
	StorageType                pulumi.StringPtrInput
	SubnetIds                  pulumi.StringArrayInput
	Tags                       pulumi.StringMapInput
	Users                      BrokerUserArrayInput
}

func (BrokerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*brokerArgs)(nil)).Elem()
}

type BrokerInput interface {
	pulumi.Input

	ToBrokerOutput() BrokerOutput
	ToBrokerOutputWithContext(ctx context.Context) BrokerOutput
}

func (*Broker) ElementType() reflect.Type {
	return reflect.TypeOf((**Broker)(nil)).Elem()
}

func (i *Broker) ToBrokerOutput() BrokerOutput {
	return i.ToBrokerOutputWithContext(context.Background())
}

func (i *Broker) ToBrokerOutputWithContext(ctx context.Context) BrokerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerOutput)
}

// BrokerArrayInput is an input type that accepts BrokerArray and BrokerArrayOutput values.
// You can construct a concrete instance of `BrokerArrayInput` via:
//
//	BrokerArray{ BrokerArgs{...} }
type BrokerArrayInput interface {
	pulumi.Input

	ToBrokerArrayOutput() BrokerArrayOutput
	ToBrokerArrayOutputWithContext(context.Context) BrokerArrayOutput
}

type BrokerArray []BrokerInput

func (BrokerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Broker)(nil)).Elem()
}

func (i BrokerArray) ToBrokerArrayOutput() BrokerArrayOutput {
	return i.ToBrokerArrayOutputWithContext(context.Background())
}

func (i BrokerArray) ToBrokerArrayOutputWithContext(ctx context.Context) BrokerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerArrayOutput)
}

// BrokerMapInput is an input type that accepts BrokerMap and BrokerMapOutput values.
// You can construct a concrete instance of `BrokerMapInput` via:
//
//	BrokerMap{ "key": BrokerArgs{...} }
type BrokerMapInput interface {
	pulumi.Input

	ToBrokerMapOutput() BrokerMapOutput
	ToBrokerMapOutputWithContext(context.Context) BrokerMapOutput
}

type BrokerMap map[string]BrokerInput

func (BrokerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Broker)(nil)).Elem()
}

func (i BrokerMap) ToBrokerMapOutput() BrokerMapOutput {
	return i.ToBrokerMapOutputWithContext(context.Background())
}

func (i BrokerMap) ToBrokerMapOutputWithContext(ctx context.Context) BrokerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerMapOutput)
}

type BrokerOutput struct{ *pulumi.OutputState }

func (BrokerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Broker)(nil)).Elem()
}

func (o BrokerOutput) ToBrokerOutput() BrokerOutput {
	return o
}

func (o BrokerOutput) ToBrokerOutputWithContext(ctx context.Context) BrokerOutput {
	return o
}

func (o BrokerOutput) ApplyImmediately() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Broker) pulumi.BoolPtrOutput { return v.ApplyImmediately }).(pulumi.BoolPtrOutput)
}

func (o BrokerOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o BrokerOutput) AuthenticationStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringOutput { return v.AuthenticationStrategy }).(pulumi.StringOutput)
}

func (o BrokerOutput) AutoMinorVersionUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Broker) pulumi.BoolPtrOutput { return v.AutoMinorVersionUpgrade }).(pulumi.BoolPtrOutput)
}

func (o BrokerOutput) BrokerName() pulumi.StringOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringOutput { return v.BrokerName }).(pulumi.StringOutput)
}

func (o BrokerOutput) Configuration() BrokerConfigurationOutput {
	return o.ApplyT(func(v *Broker) BrokerConfigurationOutput { return v.Configuration }).(BrokerConfigurationOutput)
}

func (o BrokerOutput) DeploymentMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringPtrOutput { return v.DeploymentMode }).(pulumi.StringPtrOutput)
}

func (o BrokerOutput) EncryptionOptions() BrokerEncryptionOptionsPtrOutput {
	return o.ApplyT(func(v *Broker) BrokerEncryptionOptionsPtrOutput { return v.EncryptionOptions }).(BrokerEncryptionOptionsPtrOutput)
}

func (o BrokerOutput) EngineType() pulumi.StringOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringOutput { return v.EngineType }).(pulumi.StringOutput)
}

func (o BrokerOutput) EngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringOutput { return v.EngineVersion }).(pulumi.StringOutput)
}

func (o BrokerOutput) HostInstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringOutput { return v.HostInstanceType }).(pulumi.StringOutput)
}

func (o BrokerOutput) Instances() BrokerInstanceArrayOutput {
	return o.ApplyT(func(v *Broker) BrokerInstanceArrayOutput { return v.Instances }).(BrokerInstanceArrayOutput)
}

func (o BrokerOutput) LdapServerMetadata() BrokerLdapServerMetadataPtrOutput {
	return o.ApplyT(func(v *Broker) BrokerLdapServerMetadataPtrOutput { return v.LdapServerMetadata }).(BrokerLdapServerMetadataPtrOutput)
}

func (o BrokerOutput) Logs() BrokerLogsPtrOutput {
	return o.ApplyT(func(v *Broker) BrokerLogsPtrOutput { return v.Logs }).(BrokerLogsPtrOutput)
}

func (o BrokerOutput) MaintenanceWindowStartTime() BrokerMaintenanceWindowStartTimeOutput {
	return o.ApplyT(func(v *Broker) BrokerMaintenanceWindowStartTimeOutput { return v.MaintenanceWindowStartTime }).(BrokerMaintenanceWindowStartTimeOutput)
}

func (o BrokerOutput) PubliclyAccessible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Broker) pulumi.BoolPtrOutput { return v.PubliclyAccessible }).(pulumi.BoolPtrOutput)
}

func (o BrokerOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringArrayOutput { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

func (o BrokerOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringOutput { return v.StorageType }).(pulumi.StringOutput)
}

func (o BrokerOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringArrayOutput { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

func (o BrokerOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o BrokerOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o BrokerOutput) Users() BrokerUserArrayOutput {
	return o.ApplyT(func(v *Broker) BrokerUserArrayOutput { return v.Users }).(BrokerUserArrayOutput)
}

type BrokerArrayOutput struct{ *pulumi.OutputState }

func (BrokerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Broker)(nil)).Elem()
}

func (o BrokerArrayOutput) ToBrokerArrayOutput() BrokerArrayOutput {
	return o
}

func (o BrokerArrayOutput) ToBrokerArrayOutputWithContext(ctx context.Context) BrokerArrayOutput {
	return o
}

func (o BrokerArrayOutput) Index(i pulumi.IntInput) BrokerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Broker {
		return vs[0].([]*Broker)[vs[1].(int)]
	}).(BrokerOutput)
}

type BrokerMapOutput struct{ *pulumi.OutputState }

func (BrokerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Broker)(nil)).Elem()
}

func (o BrokerMapOutput) ToBrokerMapOutput() BrokerMapOutput {
	return o
}

func (o BrokerMapOutput) ToBrokerMapOutputWithContext(ctx context.Context) BrokerMapOutput {
	return o
}

func (o BrokerMapOutput) MapIndex(k pulumi.StringInput) BrokerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Broker {
		return vs[0].(map[string]*Broker)[vs[1].(string)]
	}).(BrokerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BrokerInput)(nil)).Elem(), &Broker{})
	pulumi.RegisterInputType(reflect.TypeOf((*BrokerArrayInput)(nil)).Elem(), BrokerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BrokerMapInput)(nil)).Elem(), BrokerMap{})
	pulumi.RegisterOutputType(BrokerOutput{})
	pulumi.RegisterOutputType(BrokerArrayOutput{})
	pulumi.RegisterOutputType(BrokerMapOutput{})
}
