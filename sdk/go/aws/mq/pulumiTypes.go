// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mq

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BrokerConfiguration struct {
	// The Configuration ID.
	Id *string `pulumi:"id"`
	// Revision of the Configuration.
	Revision *int `pulumi:"revision"`
}

// BrokerConfigurationInput is an input type that accepts BrokerConfigurationArgs and BrokerConfigurationOutput values.
// You can construct a concrete instance of `BrokerConfigurationInput` via:
//
//          BrokerConfigurationArgs{...}
type BrokerConfigurationInput interface {
	pulumi.Input

	ToBrokerConfigurationOutput() BrokerConfigurationOutput
	ToBrokerConfigurationOutputWithContext(context.Context) BrokerConfigurationOutput
}

type BrokerConfigurationArgs struct {
	// The Configuration ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Revision of the Configuration.
	Revision pulumi.IntPtrInput `pulumi:"revision"`
}

func (BrokerConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerConfiguration)(nil)).Elem()
}

func (i BrokerConfigurationArgs) ToBrokerConfigurationOutput() BrokerConfigurationOutput {
	return i.ToBrokerConfigurationOutputWithContext(context.Background())
}

func (i BrokerConfigurationArgs) ToBrokerConfigurationOutputWithContext(ctx context.Context) BrokerConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerConfigurationOutput)
}

func (i BrokerConfigurationArgs) ToBrokerConfigurationPtrOutput() BrokerConfigurationPtrOutput {
	return i.ToBrokerConfigurationPtrOutputWithContext(context.Background())
}

func (i BrokerConfigurationArgs) ToBrokerConfigurationPtrOutputWithContext(ctx context.Context) BrokerConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerConfigurationOutput).ToBrokerConfigurationPtrOutputWithContext(ctx)
}

// BrokerConfigurationPtrInput is an input type that accepts BrokerConfigurationArgs, BrokerConfigurationPtr and BrokerConfigurationPtrOutput values.
// You can construct a concrete instance of `BrokerConfigurationPtrInput` via:
//
//          BrokerConfigurationArgs{...}
//
//  or:
//
//          nil
type BrokerConfigurationPtrInput interface {
	pulumi.Input

	ToBrokerConfigurationPtrOutput() BrokerConfigurationPtrOutput
	ToBrokerConfigurationPtrOutputWithContext(context.Context) BrokerConfigurationPtrOutput
}

type brokerConfigurationPtrType BrokerConfigurationArgs

func BrokerConfigurationPtr(v *BrokerConfigurationArgs) BrokerConfigurationPtrInput {
	return (*brokerConfigurationPtrType)(v)
}

func (*brokerConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerConfiguration)(nil)).Elem()
}

func (i *brokerConfigurationPtrType) ToBrokerConfigurationPtrOutput() BrokerConfigurationPtrOutput {
	return i.ToBrokerConfigurationPtrOutputWithContext(context.Background())
}

func (i *brokerConfigurationPtrType) ToBrokerConfigurationPtrOutputWithContext(ctx context.Context) BrokerConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerConfigurationPtrOutput)
}

type BrokerConfigurationOutput struct{ *pulumi.OutputState }

func (BrokerConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerConfiguration)(nil)).Elem()
}

func (o BrokerConfigurationOutput) ToBrokerConfigurationOutput() BrokerConfigurationOutput {
	return o
}

func (o BrokerConfigurationOutput) ToBrokerConfigurationOutputWithContext(ctx context.Context) BrokerConfigurationOutput {
	return o
}

func (o BrokerConfigurationOutput) ToBrokerConfigurationPtrOutput() BrokerConfigurationPtrOutput {
	return o.ToBrokerConfigurationPtrOutputWithContext(context.Background())
}

func (o BrokerConfigurationOutput) ToBrokerConfigurationPtrOutputWithContext(ctx context.Context) BrokerConfigurationPtrOutput {
	return o.ApplyT(func(v BrokerConfiguration) *BrokerConfiguration {
		return &v
	}).(BrokerConfigurationPtrOutput)
}

// The Configuration ID.
func (o BrokerConfigurationOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerConfiguration) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Revision of the Configuration.
func (o BrokerConfigurationOutput) Revision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BrokerConfiguration) *int { return v.Revision }).(pulumi.IntPtrOutput)
}

type BrokerConfigurationPtrOutput struct{ *pulumi.OutputState }

func (BrokerConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerConfiguration)(nil)).Elem()
}

func (o BrokerConfigurationPtrOutput) ToBrokerConfigurationPtrOutput() BrokerConfigurationPtrOutput {
	return o
}

func (o BrokerConfigurationPtrOutput) ToBrokerConfigurationPtrOutputWithContext(ctx context.Context) BrokerConfigurationPtrOutput {
	return o
}

func (o BrokerConfigurationPtrOutput) Elem() BrokerConfigurationOutput {
	return o.ApplyT(func(v *BrokerConfiguration) BrokerConfiguration { return *v }).(BrokerConfigurationOutput)
}

// The Configuration ID.
func (o BrokerConfigurationPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Revision of the Configuration.
func (o BrokerConfigurationPtrOutput) Revision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BrokerConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.IntPtrOutput)
}

type BrokerEncryptionOptions struct {
	// Amazon Resource Name (ARN) of Key Management Service (KMS) Customer Master Key (CMK) to use for encryption at rest. Requires setting `useAwsOwnedKey` to `false`. To perform drift detection when AWS-managed CMKs or customer-managed CMKs are in use, this value must be configured.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Whether to enable an AWS-owned KMS CMK that is not in your account. Defaults to `true`. Setting to `false` without configuring `kmsKeyId` will create an AWS-managed CMK aliased to `aws/mq` in your account.
	UseAwsOwnedKey *bool `pulumi:"useAwsOwnedKey"`
}

// BrokerEncryptionOptionsInput is an input type that accepts BrokerEncryptionOptionsArgs and BrokerEncryptionOptionsOutput values.
// You can construct a concrete instance of `BrokerEncryptionOptionsInput` via:
//
//          BrokerEncryptionOptionsArgs{...}
type BrokerEncryptionOptionsInput interface {
	pulumi.Input

	ToBrokerEncryptionOptionsOutput() BrokerEncryptionOptionsOutput
	ToBrokerEncryptionOptionsOutputWithContext(context.Context) BrokerEncryptionOptionsOutput
}

type BrokerEncryptionOptionsArgs struct {
	// Amazon Resource Name (ARN) of Key Management Service (KMS) Customer Master Key (CMK) to use for encryption at rest. Requires setting `useAwsOwnedKey` to `false`. To perform drift detection when AWS-managed CMKs or customer-managed CMKs are in use, this value must be configured.
	KmsKeyId pulumi.StringPtrInput `pulumi:"kmsKeyId"`
	// Whether to enable an AWS-owned KMS CMK that is not in your account. Defaults to `true`. Setting to `false` without configuring `kmsKeyId` will create an AWS-managed CMK aliased to `aws/mq` in your account.
	UseAwsOwnedKey pulumi.BoolPtrInput `pulumi:"useAwsOwnedKey"`
}

func (BrokerEncryptionOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerEncryptionOptions)(nil)).Elem()
}

func (i BrokerEncryptionOptionsArgs) ToBrokerEncryptionOptionsOutput() BrokerEncryptionOptionsOutput {
	return i.ToBrokerEncryptionOptionsOutputWithContext(context.Background())
}

func (i BrokerEncryptionOptionsArgs) ToBrokerEncryptionOptionsOutputWithContext(ctx context.Context) BrokerEncryptionOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerEncryptionOptionsOutput)
}

func (i BrokerEncryptionOptionsArgs) ToBrokerEncryptionOptionsPtrOutput() BrokerEncryptionOptionsPtrOutput {
	return i.ToBrokerEncryptionOptionsPtrOutputWithContext(context.Background())
}

func (i BrokerEncryptionOptionsArgs) ToBrokerEncryptionOptionsPtrOutputWithContext(ctx context.Context) BrokerEncryptionOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerEncryptionOptionsOutput).ToBrokerEncryptionOptionsPtrOutputWithContext(ctx)
}

// BrokerEncryptionOptionsPtrInput is an input type that accepts BrokerEncryptionOptionsArgs, BrokerEncryptionOptionsPtr and BrokerEncryptionOptionsPtrOutput values.
// You can construct a concrete instance of `BrokerEncryptionOptionsPtrInput` via:
//
//          BrokerEncryptionOptionsArgs{...}
//
//  or:
//
//          nil
type BrokerEncryptionOptionsPtrInput interface {
	pulumi.Input

	ToBrokerEncryptionOptionsPtrOutput() BrokerEncryptionOptionsPtrOutput
	ToBrokerEncryptionOptionsPtrOutputWithContext(context.Context) BrokerEncryptionOptionsPtrOutput
}

type brokerEncryptionOptionsPtrType BrokerEncryptionOptionsArgs

func BrokerEncryptionOptionsPtr(v *BrokerEncryptionOptionsArgs) BrokerEncryptionOptionsPtrInput {
	return (*brokerEncryptionOptionsPtrType)(v)
}

func (*brokerEncryptionOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerEncryptionOptions)(nil)).Elem()
}

func (i *brokerEncryptionOptionsPtrType) ToBrokerEncryptionOptionsPtrOutput() BrokerEncryptionOptionsPtrOutput {
	return i.ToBrokerEncryptionOptionsPtrOutputWithContext(context.Background())
}

func (i *brokerEncryptionOptionsPtrType) ToBrokerEncryptionOptionsPtrOutputWithContext(ctx context.Context) BrokerEncryptionOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerEncryptionOptionsPtrOutput)
}

type BrokerEncryptionOptionsOutput struct{ *pulumi.OutputState }

func (BrokerEncryptionOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerEncryptionOptions)(nil)).Elem()
}

func (o BrokerEncryptionOptionsOutput) ToBrokerEncryptionOptionsOutput() BrokerEncryptionOptionsOutput {
	return o
}

func (o BrokerEncryptionOptionsOutput) ToBrokerEncryptionOptionsOutputWithContext(ctx context.Context) BrokerEncryptionOptionsOutput {
	return o
}

func (o BrokerEncryptionOptionsOutput) ToBrokerEncryptionOptionsPtrOutput() BrokerEncryptionOptionsPtrOutput {
	return o.ToBrokerEncryptionOptionsPtrOutputWithContext(context.Background())
}

func (o BrokerEncryptionOptionsOutput) ToBrokerEncryptionOptionsPtrOutputWithContext(ctx context.Context) BrokerEncryptionOptionsPtrOutput {
	return o.ApplyT(func(v BrokerEncryptionOptions) *BrokerEncryptionOptions {
		return &v
	}).(BrokerEncryptionOptionsPtrOutput)
}

// Amazon Resource Name (ARN) of Key Management Service (KMS) Customer Master Key (CMK) to use for encryption at rest. Requires setting `useAwsOwnedKey` to `false`. To perform drift detection when AWS-managed CMKs or customer-managed CMKs are in use, this value must be configured.
func (o BrokerEncryptionOptionsOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerEncryptionOptions) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

// Whether to enable an AWS-owned KMS CMK that is not in your account. Defaults to `true`. Setting to `false` without configuring `kmsKeyId` will create an AWS-managed CMK aliased to `aws/mq` in your account.
func (o BrokerEncryptionOptionsOutput) UseAwsOwnedKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerEncryptionOptions) *bool { return v.UseAwsOwnedKey }).(pulumi.BoolPtrOutput)
}

type BrokerEncryptionOptionsPtrOutput struct{ *pulumi.OutputState }

func (BrokerEncryptionOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerEncryptionOptions)(nil)).Elem()
}

func (o BrokerEncryptionOptionsPtrOutput) ToBrokerEncryptionOptionsPtrOutput() BrokerEncryptionOptionsPtrOutput {
	return o
}

func (o BrokerEncryptionOptionsPtrOutput) ToBrokerEncryptionOptionsPtrOutputWithContext(ctx context.Context) BrokerEncryptionOptionsPtrOutput {
	return o
}

func (o BrokerEncryptionOptionsPtrOutput) Elem() BrokerEncryptionOptionsOutput {
	return o.ApplyT(func(v *BrokerEncryptionOptions) BrokerEncryptionOptions { return *v }).(BrokerEncryptionOptionsOutput)
}

// Amazon Resource Name (ARN) of Key Management Service (KMS) Customer Master Key (CMK) to use for encryption at rest. Requires setting `useAwsOwnedKey` to `false`. To perform drift detection when AWS-managed CMKs or customer-managed CMKs are in use, this value must be configured.
func (o BrokerEncryptionOptionsPtrOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerEncryptionOptions) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyId
	}).(pulumi.StringPtrOutput)
}

// Whether to enable an AWS-owned KMS CMK that is not in your account. Defaults to `true`. Setting to `false` without configuring `kmsKeyId` will create an AWS-managed CMK aliased to `aws/mq` in your account.
func (o BrokerEncryptionOptionsPtrOutput) UseAwsOwnedKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BrokerEncryptionOptions) *bool {
		if v == nil {
			return nil
		}
		return v.UseAwsOwnedKey
	}).(pulumi.BoolPtrOutput)
}

type BrokerInstance struct {
	ConsoleUrl *string  `pulumi:"consoleUrl"`
	Endpoints  []string `pulumi:"endpoints"`
	IpAddress  *string  `pulumi:"ipAddress"`
}

// BrokerInstanceInput is an input type that accepts BrokerInstanceArgs and BrokerInstanceOutput values.
// You can construct a concrete instance of `BrokerInstanceInput` via:
//
//          BrokerInstanceArgs{...}
type BrokerInstanceInput interface {
	pulumi.Input

	ToBrokerInstanceOutput() BrokerInstanceOutput
	ToBrokerInstanceOutputWithContext(context.Context) BrokerInstanceOutput
}

type BrokerInstanceArgs struct {
	ConsoleUrl pulumi.StringPtrInput   `pulumi:"consoleUrl"`
	Endpoints  pulumi.StringArrayInput `pulumi:"endpoints"`
	IpAddress  pulumi.StringPtrInput   `pulumi:"ipAddress"`
}

func (BrokerInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerInstance)(nil)).Elem()
}

func (i BrokerInstanceArgs) ToBrokerInstanceOutput() BrokerInstanceOutput {
	return i.ToBrokerInstanceOutputWithContext(context.Background())
}

func (i BrokerInstanceArgs) ToBrokerInstanceOutputWithContext(ctx context.Context) BrokerInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerInstanceOutput)
}

// BrokerInstanceArrayInput is an input type that accepts BrokerInstanceArray and BrokerInstanceArrayOutput values.
// You can construct a concrete instance of `BrokerInstanceArrayInput` via:
//
//          BrokerInstanceArray{ BrokerInstanceArgs{...} }
type BrokerInstanceArrayInput interface {
	pulumi.Input

	ToBrokerInstanceArrayOutput() BrokerInstanceArrayOutput
	ToBrokerInstanceArrayOutputWithContext(context.Context) BrokerInstanceArrayOutput
}

type BrokerInstanceArray []BrokerInstanceInput

func (BrokerInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BrokerInstance)(nil)).Elem()
}

func (i BrokerInstanceArray) ToBrokerInstanceArrayOutput() BrokerInstanceArrayOutput {
	return i.ToBrokerInstanceArrayOutputWithContext(context.Background())
}

func (i BrokerInstanceArray) ToBrokerInstanceArrayOutputWithContext(ctx context.Context) BrokerInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerInstanceArrayOutput)
}

type BrokerInstanceOutput struct{ *pulumi.OutputState }

func (BrokerInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerInstance)(nil)).Elem()
}

func (o BrokerInstanceOutput) ToBrokerInstanceOutput() BrokerInstanceOutput {
	return o
}

func (o BrokerInstanceOutput) ToBrokerInstanceOutputWithContext(ctx context.Context) BrokerInstanceOutput {
	return o
}

func (o BrokerInstanceOutput) ConsoleUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerInstance) *string { return v.ConsoleUrl }).(pulumi.StringPtrOutput)
}

func (o BrokerInstanceOutput) Endpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BrokerInstance) []string { return v.Endpoints }).(pulumi.StringArrayOutput)
}

func (o BrokerInstanceOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerInstance) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

type BrokerInstanceArrayOutput struct{ *pulumi.OutputState }

func (BrokerInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BrokerInstance)(nil)).Elem()
}

func (o BrokerInstanceArrayOutput) ToBrokerInstanceArrayOutput() BrokerInstanceArrayOutput {
	return o
}

func (o BrokerInstanceArrayOutput) ToBrokerInstanceArrayOutputWithContext(ctx context.Context) BrokerInstanceArrayOutput {
	return o
}

func (o BrokerInstanceArrayOutput) Index(i pulumi.IntInput) BrokerInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BrokerInstance {
		return vs[0].([]BrokerInstance)[vs[1].(int)]
	}).(BrokerInstanceOutput)
}

type BrokerLdapServerMetadata struct {
	// List of a fully qualified domain name of the LDAP server and an optional failover server.
	Hosts []string `pulumi:"hosts"`
	// Fully qualified name of the directory to search for a user’s groups.
	RoleBase *string `pulumi:"roleBase"`
	// Specifies the LDAP attribute that identifies the group name attribute in the object returned from the group membership query.
	RoleName *string `pulumi:"roleName"`
	// Search criteria for groups.
	RoleSearchMatching *string `pulumi:"roleSearchMatching"`
	// Whether the directory search scope is the entire sub-tree.
	RoleSearchSubtree *bool `pulumi:"roleSearchSubtree"`
	// Service account password.
	ServiceAccountPassword *string `pulumi:"serviceAccountPassword"`
	// Service account username.
	ServiceAccountUsername *string `pulumi:"serviceAccountUsername"`
	// Fully qualified name of the directory where you want to search for users.
	UserBase *string `pulumi:"userBase"`
	// Specifies the name of the LDAP attribute for the user group membership.
	UserRoleName *string `pulumi:"userRoleName"`
	// Search criteria for users.
	UserSearchMatching *string `pulumi:"userSearchMatching"`
	// Whether the directory search scope is the entire sub-tree.
	UserSearchSubtree *bool `pulumi:"userSearchSubtree"`
}

// BrokerLdapServerMetadataInput is an input type that accepts BrokerLdapServerMetadataArgs and BrokerLdapServerMetadataOutput values.
// You can construct a concrete instance of `BrokerLdapServerMetadataInput` via:
//
//          BrokerLdapServerMetadataArgs{...}
type BrokerLdapServerMetadataInput interface {
	pulumi.Input

	ToBrokerLdapServerMetadataOutput() BrokerLdapServerMetadataOutput
	ToBrokerLdapServerMetadataOutputWithContext(context.Context) BrokerLdapServerMetadataOutput
}

type BrokerLdapServerMetadataArgs struct {
	// List of a fully qualified domain name of the LDAP server and an optional failover server.
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// Fully qualified name of the directory to search for a user’s groups.
	RoleBase pulumi.StringPtrInput `pulumi:"roleBase"`
	// Specifies the LDAP attribute that identifies the group name attribute in the object returned from the group membership query.
	RoleName pulumi.StringPtrInput `pulumi:"roleName"`
	// Search criteria for groups.
	RoleSearchMatching pulumi.StringPtrInput `pulumi:"roleSearchMatching"`
	// Whether the directory search scope is the entire sub-tree.
	RoleSearchSubtree pulumi.BoolPtrInput `pulumi:"roleSearchSubtree"`
	// Service account password.
	ServiceAccountPassword pulumi.StringPtrInput `pulumi:"serviceAccountPassword"`
	// Service account username.
	ServiceAccountUsername pulumi.StringPtrInput `pulumi:"serviceAccountUsername"`
	// Fully qualified name of the directory where you want to search for users.
	UserBase pulumi.StringPtrInput `pulumi:"userBase"`
	// Specifies the name of the LDAP attribute for the user group membership.
	UserRoleName pulumi.StringPtrInput `pulumi:"userRoleName"`
	// Search criteria for users.
	UserSearchMatching pulumi.StringPtrInput `pulumi:"userSearchMatching"`
	// Whether the directory search scope is the entire sub-tree.
	UserSearchSubtree pulumi.BoolPtrInput `pulumi:"userSearchSubtree"`
}

func (BrokerLdapServerMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerLdapServerMetadata)(nil)).Elem()
}

func (i BrokerLdapServerMetadataArgs) ToBrokerLdapServerMetadataOutput() BrokerLdapServerMetadataOutput {
	return i.ToBrokerLdapServerMetadataOutputWithContext(context.Background())
}

func (i BrokerLdapServerMetadataArgs) ToBrokerLdapServerMetadataOutputWithContext(ctx context.Context) BrokerLdapServerMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerLdapServerMetadataOutput)
}

func (i BrokerLdapServerMetadataArgs) ToBrokerLdapServerMetadataPtrOutput() BrokerLdapServerMetadataPtrOutput {
	return i.ToBrokerLdapServerMetadataPtrOutputWithContext(context.Background())
}

func (i BrokerLdapServerMetadataArgs) ToBrokerLdapServerMetadataPtrOutputWithContext(ctx context.Context) BrokerLdapServerMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerLdapServerMetadataOutput).ToBrokerLdapServerMetadataPtrOutputWithContext(ctx)
}

// BrokerLdapServerMetadataPtrInput is an input type that accepts BrokerLdapServerMetadataArgs, BrokerLdapServerMetadataPtr and BrokerLdapServerMetadataPtrOutput values.
// You can construct a concrete instance of `BrokerLdapServerMetadataPtrInput` via:
//
//          BrokerLdapServerMetadataArgs{...}
//
//  or:
//
//          nil
type BrokerLdapServerMetadataPtrInput interface {
	pulumi.Input

	ToBrokerLdapServerMetadataPtrOutput() BrokerLdapServerMetadataPtrOutput
	ToBrokerLdapServerMetadataPtrOutputWithContext(context.Context) BrokerLdapServerMetadataPtrOutput
}

type brokerLdapServerMetadataPtrType BrokerLdapServerMetadataArgs

func BrokerLdapServerMetadataPtr(v *BrokerLdapServerMetadataArgs) BrokerLdapServerMetadataPtrInput {
	return (*brokerLdapServerMetadataPtrType)(v)
}

func (*brokerLdapServerMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerLdapServerMetadata)(nil)).Elem()
}

func (i *brokerLdapServerMetadataPtrType) ToBrokerLdapServerMetadataPtrOutput() BrokerLdapServerMetadataPtrOutput {
	return i.ToBrokerLdapServerMetadataPtrOutputWithContext(context.Background())
}

func (i *brokerLdapServerMetadataPtrType) ToBrokerLdapServerMetadataPtrOutputWithContext(ctx context.Context) BrokerLdapServerMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerLdapServerMetadataPtrOutput)
}

type BrokerLdapServerMetadataOutput struct{ *pulumi.OutputState }

func (BrokerLdapServerMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerLdapServerMetadata)(nil)).Elem()
}

func (o BrokerLdapServerMetadataOutput) ToBrokerLdapServerMetadataOutput() BrokerLdapServerMetadataOutput {
	return o
}

func (o BrokerLdapServerMetadataOutput) ToBrokerLdapServerMetadataOutputWithContext(ctx context.Context) BrokerLdapServerMetadataOutput {
	return o
}

func (o BrokerLdapServerMetadataOutput) ToBrokerLdapServerMetadataPtrOutput() BrokerLdapServerMetadataPtrOutput {
	return o.ToBrokerLdapServerMetadataPtrOutputWithContext(context.Background())
}

func (o BrokerLdapServerMetadataOutput) ToBrokerLdapServerMetadataPtrOutputWithContext(ctx context.Context) BrokerLdapServerMetadataPtrOutput {
	return o.ApplyT(func(v BrokerLdapServerMetadata) *BrokerLdapServerMetadata {
		return &v
	}).(BrokerLdapServerMetadataPtrOutput)
}

// List of a fully qualified domain name of the LDAP server and an optional failover server.
func (o BrokerLdapServerMetadataOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BrokerLdapServerMetadata) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// Fully qualified name of the directory to search for a user’s groups.
func (o BrokerLdapServerMetadataOutput) RoleBase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerLdapServerMetadata) *string { return v.RoleBase }).(pulumi.StringPtrOutput)
}

// Specifies the LDAP attribute that identifies the group name attribute in the object returned from the group membership query.
func (o BrokerLdapServerMetadataOutput) RoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerLdapServerMetadata) *string { return v.RoleName }).(pulumi.StringPtrOutput)
}

// Search criteria for groups.
func (o BrokerLdapServerMetadataOutput) RoleSearchMatching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerLdapServerMetadata) *string { return v.RoleSearchMatching }).(pulumi.StringPtrOutput)
}

// Whether the directory search scope is the entire sub-tree.
func (o BrokerLdapServerMetadataOutput) RoleSearchSubtree() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerLdapServerMetadata) *bool { return v.RoleSearchSubtree }).(pulumi.BoolPtrOutput)
}

// Service account password.
func (o BrokerLdapServerMetadataOutput) ServiceAccountPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerLdapServerMetadata) *string { return v.ServiceAccountPassword }).(pulumi.StringPtrOutput)
}

// Service account username.
func (o BrokerLdapServerMetadataOutput) ServiceAccountUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerLdapServerMetadata) *string { return v.ServiceAccountUsername }).(pulumi.StringPtrOutput)
}

// Fully qualified name of the directory where you want to search for users.
func (o BrokerLdapServerMetadataOutput) UserBase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerLdapServerMetadata) *string { return v.UserBase }).(pulumi.StringPtrOutput)
}

// Specifies the name of the LDAP attribute for the user group membership.
func (o BrokerLdapServerMetadataOutput) UserRoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerLdapServerMetadata) *string { return v.UserRoleName }).(pulumi.StringPtrOutput)
}

// Search criteria for users.
func (o BrokerLdapServerMetadataOutput) UserSearchMatching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerLdapServerMetadata) *string { return v.UserSearchMatching }).(pulumi.StringPtrOutput)
}

// Whether the directory search scope is the entire sub-tree.
func (o BrokerLdapServerMetadataOutput) UserSearchSubtree() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerLdapServerMetadata) *bool { return v.UserSearchSubtree }).(pulumi.BoolPtrOutput)
}

type BrokerLdapServerMetadataPtrOutput struct{ *pulumi.OutputState }

func (BrokerLdapServerMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerLdapServerMetadata)(nil)).Elem()
}

func (o BrokerLdapServerMetadataPtrOutput) ToBrokerLdapServerMetadataPtrOutput() BrokerLdapServerMetadataPtrOutput {
	return o
}

func (o BrokerLdapServerMetadataPtrOutput) ToBrokerLdapServerMetadataPtrOutputWithContext(ctx context.Context) BrokerLdapServerMetadataPtrOutput {
	return o
}

func (o BrokerLdapServerMetadataPtrOutput) Elem() BrokerLdapServerMetadataOutput {
	return o.ApplyT(func(v *BrokerLdapServerMetadata) BrokerLdapServerMetadata { return *v }).(BrokerLdapServerMetadataOutput)
}

// List of a fully qualified domain name of the LDAP server and an optional failover server.
func (o BrokerLdapServerMetadataPtrOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BrokerLdapServerMetadata) []string {
		if v == nil {
			return nil
		}
		return v.Hosts
	}).(pulumi.StringArrayOutput)
}

// Fully qualified name of the directory to search for a user’s groups.
func (o BrokerLdapServerMetadataPtrOutput) RoleBase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerLdapServerMetadata) *string {
		if v == nil {
			return nil
		}
		return v.RoleBase
	}).(pulumi.StringPtrOutput)
}

// Specifies the LDAP attribute that identifies the group name attribute in the object returned from the group membership query.
func (o BrokerLdapServerMetadataPtrOutput) RoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerLdapServerMetadata) *string {
		if v == nil {
			return nil
		}
		return v.RoleName
	}).(pulumi.StringPtrOutput)
}

// Search criteria for groups.
func (o BrokerLdapServerMetadataPtrOutput) RoleSearchMatching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerLdapServerMetadata) *string {
		if v == nil {
			return nil
		}
		return v.RoleSearchMatching
	}).(pulumi.StringPtrOutput)
}

// Whether the directory search scope is the entire sub-tree.
func (o BrokerLdapServerMetadataPtrOutput) RoleSearchSubtree() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BrokerLdapServerMetadata) *bool {
		if v == nil {
			return nil
		}
		return v.RoleSearchSubtree
	}).(pulumi.BoolPtrOutput)
}

// Service account password.
func (o BrokerLdapServerMetadataPtrOutput) ServiceAccountPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerLdapServerMetadata) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountPassword
	}).(pulumi.StringPtrOutput)
}

// Service account username.
func (o BrokerLdapServerMetadataPtrOutput) ServiceAccountUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerLdapServerMetadata) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountUsername
	}).(pulumi.StringPtrOutput)
}

// Fully qualified name of the directory where you want to search for users.
func (o BrokerLdapServerMetadataPtrOutput) UserBase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerLdapServerMetadata) *string {
		if v == nil {
			return nil
		}
		return v.UserBase
	}).(pulumi.StringPtrOutput)
}

// Specifies the name of the LDAP attribute for the user group membership.
func (o BrokerLdapServerMetadataPtrOutput) UserRoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerLdapServerMetadata) *string {
		if v == nil {
			return nil
		}
		return v.UserRoleName
	}).(pulumi.StringPtrOutput)
}

// Search criteria for users.
func (o BrokerLdapServerMetadataPtrOutput) UserSearchMatching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerLdapServerMetadata) *string {
		if v == nil {
			return nil
		}
		return v.UserSearchMatching
	}).(pulumi.StringPtrOutput)
}

// Whether the directory search scope is the entire sub-tree.
func (o BrokerLdapServerMetadataPtrOutput) UserSearchSubtree() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BrokerLdapServerMetadata) *bool {
		if v == nil {
			return nil
		}
		return v.UserSearchSubtree
	}).(pulumi.BoolPtrOutput)
}

type BrokerLogs struct {
	// Enables audit logging. Auditing is only possible for `engineType` of `ActiveMQ`. User management action made using JMX or the ActiveMQ Web Console is logged. Defaults to `false`.
	Audit *bool `pulumi:"audit"`
	// Enables general logging via CloudWatch. Defaults to `false`.
	General *bool `pulumi:"general"`
}

// BrokerLogsInput is an input type that accepts BrokerLogsArgs and BrokerLogsOutput values.
// You can construct a concrete instance of `BrokerLogsInput` via:
//
//          BrokerLogsArgs{...}
type BrokerLogsInput interface {
	pulumi.Input

	ToBrokerLogsOutput() BrokerLogsOutput
	ToBrokerLogsOutputWithContext(context.Context) BrokerLogsOutput
}

type BrokerLogsArgs struct {
	// Enables audit logging. Auditing is only possible for `engineType` of `ActiveMQ`. User management action made using JMX or the ActiveMQ Web Console is logged. Defaults to `false`.
	Audit pulumi.BoolPtrInput `pulumi:"audit"`
	// Enables general logging via CloudWatch. Defaults to `false`.
	General pulumi.BoolPtrInput `pulumi:"general"`
}

func (BrokerLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerLogs)(nil)).Elem()
}

func (i BrokerLogsArgs) ToBrokerLogsOutput() BrokerLogsOutput {
	return i.ToBrokerLogsOutputWithContext(context.Background())
}

func (i BrokerLogsArgs) ToBrokerLogsOutputWithContext(ctx context.Context) BrokerLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerLogsOutput)
}

func (i BrokerLogsArgs) ToBrokerLogsPtrOutput() BrokerLogsPtrOutput {
	return i.ToBrokerLogsPtrOutputWithContext(context.Background())
}

func (i BrokerLogsArgs) ToBrokerLogsPtrOutputWithContext(ctx context.Context) BrokerLogsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerLogsOutput).ToBrokerLogsPtrOutputWithContext(ctx)
}

// BrokerLogsPtrInput is an input type that accepts BrokerLogsArgs, BrokerLogsPtr and BrokerLogsPtrOutput values.
// You can construct a concrete instance of `BrokerLogsPtrInput` via:
//
//          BrokerLogsArgs{...}
//
//  or:
//
//          nil
type BrokerLogsPtrInput interface {
	pulumi.Input

	ToBrokerLogsPtrOutput() BrokerLogsPtrOutput
	ToBrokerLogsPtrOutputWithContext(context.Context) BrokerLogsPtrOutput
}

type brokerLogsPtrType BrokerLogsArgs

func BrokerLogsPtr(v *BrokerLogsArgs) BrokerLogsPtrInput {
	return (*brokerLogsPtrType)(v)
}

func (*brokerLogsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerLogs)(nil)).Elem()
}

func (i *brokerLogsPtrType) ToBrokerLogsPtrOutput() BrokerLogsPtrOutput {
	return i.ToBrokerLogsPtrOutputWithContext(context.Background())
}

func (i *brokerLogsPtrType) ToBrokerLogsPtrOutputWithContext(ctx context.Context) BrokerLogsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerLogsPtrOutput)
}

type BrokerLogsOutput struct{ *pulumi.OutputState }

func (BrokerLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerLogs)(nil)).Elem()
}

func (o BrokerLogsOutput) ToBrokerLogsOutput() BrokerLogsOutput {
	return o
}

func (o BrokerLogsOutput) ToBrokerLogsOutputWithContext(ctx context.Context) BrokerLogsOutput {
	return o
}

func (o BrokerLogsOutput) ToBrokerLogsPtrOutput() BrokerLogsPtrOutput {
	return o.ToBrokerLogsPtrOutputWithContext(context.Background())
}

func (o BrokerLogsOutput) ToBrokerLogsPtrOutputWithContext(ctx context.Context) BrokerLogsPtrOutput {
	return o.ApplyT(func(v BrokerLogs) *BrokerLogs {
		return &v
	}).(BrokerLogsPtrOutput)
}

// Enables audit logging. Auditing is only possible for `engineType` of `ActiveMQ`. User management action made using JMX or the ActiveMQ Web Console is logged. Defaults to `false`.
func (o BrokerLogsOutput) Audit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerLogs) *bool { return v.Audit }).(pulumi.BoolPtrOutput)
}

// Enables general logging via CloudWatch. Defaults to `false`.
func (o BrokerLogsOutput) General() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerLogs) *bool { return v.General }).(pulumi.BoolPtrOutput)
}

type BrokerLogsPtrOutput struct{ *pulumi.OutputState }

func (BrokerLogsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerLogs)(nil)).Elem()
}

func (o BrokerLogsPtrOutput) ToBrokerLogsPtrOutput() BrokerLogsPtrOutput {
	return o
}

func (o BrokerLogsPtrOutput) ToBrokerLogsPtrOutputWithContext(ctx context.Context) BrokerLogsPtrOutput {
	return o
}

func (o BrokerLogsPtrOutput) Elem() BrokerLogsOutput {
	return o.ApplyT(func(v *BrokerLogs) BrokerLogs { return *v }).(BrokerLogsOutput)
}

// Enables audit logging. Auditing is only possible for `engineType` of `ActiveMQ`. User management action made using JMX or the ActiveMQ Web Console is logged. Defaults to `false`.
func (o BrokerLogsPtrOutput) Audit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BrokerLogs) *bool {
		if v == nil {
			return nil
		}
		return v.Audit
	}).(pulumi.BoolPtrOutput)
}

// Enables general logging via CloudWatch. Defaults to `false`.
func (o BrokerLogsPtrOutput) General() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BrokerLogs) *bool {
		if v == nil {
			return nil
		}
		return v.General
	}).(pulumi.BoolPtrOutput)
}

type BrokerMaintenanceWindowStartTime struct {
	// Day of the week, e.g. `MONDAY`, `TUESDAY`, or `WEDNESDAY`.
	DayOfWeek string `pulumi:"dayOfWeek"`
	// Time, in 24-hour format, e.g. `02:00`.
	TimeOfDay string `pulumi:"timeOfDay"`
	// Time zone in either the Country/City format or the UTC offset format, e.g. `CET`.
	TimeZone string `pulumi:"timeZone"`
}

// BrokerMaintenanceWindowStartTimeInput is an input type that accepts BrokerMaintenanceWindowStartTimeArgs and BrokerMaintenanceWindowStartTimeOutput values.
// You can construct a concrete instance of `BrokerMaintenanceWindowStartTimeInput` via:
//
//          BrokerMaintenanceWindowStartTimeArgs{...}
type BrokerMaintenanceWindowStartTimeInput interface {
	pulumi.Input

	ToBrokerMaintenanceWindowStartTimeOutput() BrokerMaintenanceWindowStartTimeOutput
	ToBrokerMaintenanceWindowStartTimeOutputWithContext(context.Context) BrokerMaintenanceWindowStartTimeOutput
}

type BrokerMaintenanceWindowStartTimeArgs struct {
	// Day of the week, e.g. `MONDAY`, `TUESDAY`, or `WEDNESDAY`.
	DayOfWeek pulumi.StringInput `pulumi:"dayOfWeek"`
	// Time, in 24-hour format, e.g. `02:00`.
	TimeOfDay pulumi.StringInput `pulumi:"timeOfDay"`
	// Time zone in either the Country/City format or the UTC offset format, e.g. `CET`.
	TimeZone pulumi.StringInput `pulumi:"timeZone"`
}

func (BrokerMaintenanceWindowStartTimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerMaintenanceWindowStartTime)(nil)).Elem()
}

func (i BrokerMaintenanceWindowStartTimeArgs) ToBrokerMaintenanceWindowStartTimeOutput() BrokerMaintenanceWindowStartTimeOutput {
	return i.ToBrokerMaintenanceWindowStartTimeOutputWithContext(context.Background())
}

func (i BrokerMaintenanceWindowStartTimeArgs) ToBrokerMaintenanceWindowStartTimeOutputWithContext(ctx context.Context) BrokerMaintenanceWindowStartTimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerMaintenanceWindowStartTimeOutput)
}

func (i BrokerMaintenanceWindowStartTimeArgs) ToBrokerMaintenanceWindowStartTimePtrOutput() BrokerMaintenanceWindowStartTimePtrOutput {
	return i.ToBrokerMaintenanceWindowStartTimePtrOutputWithContext(context.Background())
}

func (i BrokerMaintenanceWindowStartTimeArgs) ToBrokerMaintenanceWindowStartTimePtrOutputWithContext(ctx context.Context) BrokerMaintenanceWindowStartTimePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerMaintenanceWindowStartTimeOutput).ToBrokerMaintenanceWindowStartTimePtrOutputWithContext(ctx)
}

// BrokerMaintenanceWindowStartTimePtrInput is an input type that accepts BrokerMaintenanceWindowStartTimeArgs, BrokerMaintenanceWindowStartTimePtr and BrokerMaintenanceWindowStartTimePtrOutput values.
// You can construct a concrete instance of `BrokerMaintenanceWindowStartTimePtrInput` via:
//
//          BrokerMaintenanceWindowStartTimeArgs{...}
//
//  or:
//
//          nil
type BrokerMaintenanceWindowStartTimePtrInput interface {
	pulumi.Input

	ToBrokerMaintenanceWindowStartTimePtrOutput() BrokerMaintenanceWindowStartTimePtrOutput
	ToBrokerMaintenanceWindowStartTimePtrOutputWithContext(context.Context) BrokerMaintenanceWindowStartTimePtrOutput
}

type brokerMaintenanceWindowStartTimePtrType BrokerMaintenanceWindowStartTimeArgs

func BrokerMaintenanceWindowStartTimePtr(v *BrokerMaintenanceWindowStartTimeArgs) BrokerMaintenanceWindowStartTimePtrInput {
	return (*brokerMaintenanceWindowStartTimePtrType)(v)
}

func (*brokerMaintenanceWindowStartTimePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerMaintenanceWindowStartTime)(nil)).Elem()
}

func (i *brokerMaintenanceWindowStartTimePtrType) ToBrokerMaintenanceWindowStartTimePtrOutput() BrokerMaintenanceWindowStartTimePtrOutput {
	return i.ToBrokerMaintenanceWindowStartTimePtrOutputWithContext(context.Background())
}

func (i *brokerMaintenanceWindowStartTimePtrType) ToBrokerMaintenanceWindowStartTimePtrOutputWithContext(ctx context.Context) BrokerMaintenanceWindowStartTimePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerMaintenanceWindowStartTimePtrOutput)
}

type BrokerMaintenanceWindowStartTimeOutput struct{ *pulumi.OutputState }

func (BrokerMaintenanceWindowStartTimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerMaintenanceWindowStartTime)(nil)).Elem()
}

func (o BrokerMaintenanceWindowStartTimeOutput) ToBrokerMaintenanceWindowStartTimeOutput() BrokerMaintenanceWindowStartTimeOutput {
	return o
}

func (o BrokerMaintenanceWindowStartTimeOutput) ToBrokerMaintenanceWindowStartTimeOutputWithContext(ctx context.Context) BrokerMaintenanceWindowStartTimeOutput {
	return o
}

func (o BrokerMaintenanceWindowStartTimeOutput) ToBrokerMaintenanceWindowStartTimePtrOutput() BrokerMaintenanceWindowStartTimePtrOutput {
	return o.ToBrokerMaintenanceWindowStartTimePtrOutputWithContext(context.Background())
}

func (o BrokerMaintenanceWindowStartTimeOutput) ToBrokerMaintenanceWindowStartTimePtrOutputWithContext(ctx context.Context) BrokerMaintenanceWindowStartTimePtrOutput {
	return o.ApplyT(func(v BrokerMaintenanceWindowStartTime) *BrokerMaintenanceWindowStartTime {
		return &v
	}).(BrokerMaintenanceWindowStartTimePtrOutput)
}

// Day of the week, e.g. `MONDAY`, `TUESDAY`, or `WEDNESDAY`.
func (o BrokerMaintenanceWindowStartTimeOutput) DayOfWeek() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerMaintenanceWindowStartTime) string { return v.DayOfWeek }).(pulumi.StringOutput)
}

// Time, in 24-hour format, e.g. `02:00`.
func (o BrokerMaintenanceWindowStartTimeOutput) TimeOfDay() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerMaintenanceWindowStartTime) string { return v.TimeOfDay }).(pulumi.StringOutput)
}

// Time zone in either the Country/City format or the UTC offset format, e.g. `CET`.
func (o BrokerMaintenanceWindowStartTimeOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerMaintenanceWindowStartTime) string { return v.TimeZone }).(pulumi.StringOutput)
}

type BrokerMaintenanceWindowStartTimePtrOutput struct{ *pulumi.OutputState }

func (BrokerMaintenanceWindowStartTimePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerMaintenanceWindowStartTime)(nil)).Elem()
}

func (o BrokerMaintenanceWindowStartTimePtrOutput) ToBrokerMaintenanceWindowStartTimePtrOutput() BrokerMaintenanceWindowStartTimePtrOutput {
	return o
}

func (o BrokerMaintenanceWindowStartTimePtrOutput) ToBrokerMaintenanceWindowStartTimePtrOutputWithContext(ctx context.Context) BrokerMaintenanceWindowStartTimePtrOutput {
	return o
}

func (o BrokerMaintenanceWindowStartTimePtrOutput) Elem() BrokerMaintenanceWindowStartTimeOutput {
	return o.ApplyT(func(v *BrokerMaintenanceWindowStartTime) BrokerMaintenanceWindowStartTime { return *v }).(BrokerMaintenanceWindowStartTimeOutput)
}

// Day of the week, e.g. `MONDAY`, `TUESDAY`, or `WEDNESDAY`.
func (o BrokerMaintenanceWindowStartTimePtrOutput) DayOfWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerMaintenanceWindowStartTime) *string {
		if v == nil {
			return nil
		}
		return &v.DayOfWeek
	}).(pulumi.StringPtrOutput)
}

// Time, in 24-hour format, e.g. `02:00`.
func (o BrokerMaintenanceWindowStartTimePtrOutput) TimeOfDay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerMaintenanceWindowStartTime) *string {
		if v == nil {
			return nil
		}
		return &v.TimeOfDay
	}).(pulumi.StringPtrOutput)
}

// Time zone in either the Country/City format or the UTC offset format, e.g. `CET`.
func (o BrokerMaintenanceWindowStartTimePtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerMaintenanceWindowStartTime) *string {
		if v == nil {
			return nil
		}
		return &v.TimeZone
	}).(pulumi.StringPtrOutput)
}

type BrokerUser struct {
	// Whether to enable access to the [ActiveMQ Web Console](http://activemq.apache.org/web-console.html) for the user. Applies to `engineType` of `ActiveMQ` only.
	ConsoleAccess *bool `pulumi:"consoleAccess"`
	// List of groups (20 maximum) to which the ActiveMQ user belongs. Applies to `engineType` of `ActiveMQ` only.
	Groups []string `pulumi:"groups"`
	// Password of the user. It must be 12 to 250 characters long, at least 4 unique characters, and must not contain commas.
	Password string `pulumi:"password"`
	// Username of the user.
	Username string `pulumi:"username"`
}

// BrokerUserInput is an input type that accepts BrokerUserArgs and BrokerUserOutput values.
// You can construct a concrete instance of `BrokerUserInput` via:
//
//          BrokerUserArgs{...}
type BrokerUserInput interface {
	pulumi.Input

	ToBrokerUserOutput() BrokerUserOutput
	ToBrokerUserOutputWithContext(context.Context) BrokerUserOutput
}

type BrokerUserArgs struct {
	// Whether to enable access to the [ActiveMQ Web Console](http://activemq.apache.org/web-console.html) for the user. Applies to `engineType` of `ActiveMQ` only.
	ConsoleAccess pulumi.BoolPtrInput `pulumi:"consoleAccess"`
	// List of groups (20 maximum) to which the ActiveMQ user belongs. Applies to `engineType` of `ActiveMQ` only.
	Groups pulumi.StringArrayInput `pulumi:"groups"`
	// Password of the user. It must be 12 to 250 characters long, at least 4 unique characters, and must not contain commas.
	Password pulumi.StringInput `pulumi:"password"`
	// Username of the user.
	Username pulumi.StringInput `pulumi:"username"`
}

func (BrokerUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerUser)(nil)).Elem()
}

func (i BrokerUserArgs) ToBrokerUserOutput() BrokerUserOutput {
	return i.ToBrokerUserOutputWithContext(context.Background())
}

func (i BrokerUserArgs) ToBrokerUserOutputWithContext(ctx context.Context) BrokerUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerUserOutput)
}

// BrokerUserArrayInput is an input type that accepts BrokerUserArray and BrokerUserArrayOutput values.
// You can construct a concrete instance of `BrokerUserArrayInput` via:
//
//          BrokerUserArray{ BrokerUserArgs{...} }
type BrokerUserArrayInput interface {
	pulumi.Input

	ToBrokerUserArrayOutput() BrokerUserArrayOutput
	ToBrokerUserArrayOutputWithContext(context.Context) BrokerUserArrayOutput
}

type BrokerUserArray []BrokerUserInput

func (BrokerUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BrokerUser)(nil)).Elem()
}

func (i BrokerUserArray) ToBrokerUserArrayOutput() BrokerUserArrayOutput {
	return i.ToBrokerUserArrayOutputWithContext(context.Background())
}

func (i BrokerUserArray) ToBrokerUserArrayOutputWithContext(ctx context.Context) BrokerUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerUserArrayOutput)
}

type BrokerUserOutput struct{ *pulumi.OutputState }

func (BrokerUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerUser)(nil)).Elem()
}

func (o BrokerUserOutput) ToBrokerUserOutput() BrokerUserOutput {
	return o
}

func (o BrokerUserOutput) ToBrokerUserOutputWithContext(ctx context.Context) BrokerUserOutput {
	return o
}

// Whether to enable access to the [ActiveMQ Web Console](http://activemq.apache.org/web-console.html) for the user. Applies to `engineType` of `ActiveMQ` only.
func (o BrokerUserOutput) ConsoleAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerUser) *bool { return v.ConsoleAccess }).(pulumi.BoolPtrOutput)
}

// List of groups (20 maximum) to which the ActiveMQ user belongs. Applies to `engineType` of `ActiveMQ` only.
func (o BrokerUserOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BrokerUser) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

// Password of the user. It must be 12 to 250 characters long, at least 4 unique characters, and must not contain commas.
func (o BrokerUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerUser) string { return v.Password }).(pulumi.StringOutput)
}

// Username of the user.
func (o BrokerUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerUser) string { return v.Username }).(pulumi.StringOutput)
}

type BrokerUserArrayOutput struct{ *pulumi.OutputState }

func (BrokerUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BrokerUser)(nil)).Elem()
}

func (o BrokerUserArrayOutput) ToBrokerUserArrayOutput() BrokerUserArrayOutput {
	return o
}

func (o BrokerUserArrayOutput) ToBrokerUserArrayOutputWithContext(ctx context.Context) BrokerUserArrayOutput {
	return o
}

func (o BrokerUserArrayOutput) Index(i pulumi.IntInput) BrokerUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BrokerUser {
		return vs[0].([]BrokerUser)[vs[1].(int)]
	}).(BrokerUserOutput)
}

type GetBrokerConfiguration struct {
	Id       string `pulumi:"id"`
	Revision int    `pulumi:"revision"`
}

// GetBrokerConfigurationInput is an input type that accepts GetBrokerConfigurationArgs and GetBrokerConfigurationOutput values.
// You can construct a concrete instance of `GetBrokerConfigurationInput` via:
//
//          GetBrokerConfigurationArgs{...}
type GetBrokerConfigurationInput interface {
	pulumi.Input

	ToGetBrokerConfigurationOutput() GetBrokerConfigurationOutput
	ToGetBrokerConfigurationOutputWithContext(context.Context) GetBrokerConfigurationOutput
}

type GetBrokerConfigurationArgs struct {
	Id       pulumi.StringInput `pulumi:"id"`
	Revision pulumi.IntInput    `pulumi:"revision"`
}

func (GetBrokerConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerConfiguration)(nil)).Elem()
}

func (i GetBrokerConfigurationArgs) ToGetBrokerConfigurationOutput() GetBrokerConfigurationOutput {
	return i.ToGetBrokerConfigurationOutputWithContext(context.Background())
}

func (i GetBrokerConfigurationArgs) ToGetBrokerConfigurationOutputWithContext(ctx context.Context) GetBrokerConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBrokerConfigurationOutput)
}

type GetBrokerConfigurationOutput struct{ *pulumi.OutputState }

func (GetBrokerConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerConfiguration)(nil)).Elem()
}

func (o GetBrokerConfigurationOutput) ToGetBrokerConfigurationOutput() GetBrokerConfigurationOutput {
	return o
}

func (o GetBrokerConfigurationOutput) ToGetBrokerConfigurationOutputWithContext(ctx context.Context) GetBrokerConfigurationOutput {
	return o
}

func (o GetBrokerConfigurationOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBrokerConfiguration) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetBrokerConfigurationOutput) Revision() pulumi.IntOutput {
	return o.ApplyT(func(v GetBrokerConfiguration) int { return v.Revision }).(pulumi.IntOutput)
}

type GetBrokerEncryptionOption struct {
	KmsKeyId       string `pulumi:"kmsKeyId"`
	UseAwsOwnedKey bool   `pulumi:"useAwsOwnedKey"`
}

// GetBrokerEncryptionOptionInput is an input type that accepts GetBrokerEncryptionOptionArgs and GetBrokerEncryptionOptionOutput values.
// You can construct a concrete instance of `GetBrokerEncryptionOptionInput` via:
//
//          GetBrokerEncryptionOptionArgs{...}
type GetBrokerEncryptionOptionInput interface {
	pulumi.Input

	ToGetBrokerEncryptionOptionOutput() GetBrokerEncryptionOptionOutput
	ToGetBrokerEncryptionOptionOutputWithContext(context.Context) GetBrokerEncryptionOptionOutput
}

type GetBrokerEncryptionOptionArgs struct {
	KmsKeyId       pulumi.StringInput `pulumi:"kmsKeyId"`
	UseAwsOwnedKey pulumi.BoolInput   `pulumi:"useAwsOwnedKey"`
}

func (GetBrokerEncryptionOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerEncryptionOption)(nil)).Elem()
}

func (i GetBrokerEncryptionOptionArgs) ToGetBrokerEncryptionOptionOutput() GetBrokerEncryptionOptionOutput {
	return i.ToGetBrokerEncryptionOptionOutputWithContext(context.Background())
}

func (i GetBrokerEncryptionOptionArgs) ToGetBrokerEncryptionOptionOutputWithContext(ctx context.Context) GetBrokerEncryptionOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBrokerEncryptionOptionOutput)
}

// GetBrokerEncryptionOptionArrayInput is an input type that accepts GetBrokerEncryptionOptionArray and GetBrokerEncryptionOptionArrayOutput values.
// You can construct a concrete instance of `GetBrokerEncryptionOptionArrayInput` via:
//
//          GetBrokerEncryptionOptionArray{ GetBrokerEncryptionOptionArgs{...} }
type GetBrokerEncryptionOptionArrayInput interface {
	pulumi.Input

	ToGetBrokerEncryptionOptionArrayOutput() GetBrokerEncryptionOptionArrayOutput
	ToGetBrokerEncryptionOptionArrayOutputWithContext(context.Context) GetBrokerEncryptionOptionArrayOutput
}

type GetBrokerEncryptionOptionArray []GetBrokerEncryptionOptionInput

func (GetBrokerEncryptionOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBrokerEncryptionOption)(nil)).Elem()
}

func (i GetBrokerEncryptionOptionArray) ToGetBrokerEncryptionOptionArrayOutput() GetBrokerEncryptionOptionArrayOutput {
	return i.ToGetBrokerEncryptionOptionArrayOutputWithContext(context.Background())
}

func (i GetBrokerEncryptionOptionArray) ToGetBrokerEncryptionOptionArrayOutputWithContext(ctx context.Context) GetBrokerEncryptionOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBrokerEncryptionOptionArrayOutput)
}

type GetBrokerEncryptionOptionOutput struct{ *pulumi.OutputState }

func (GetBrokerEncryptionOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerEncryptionOption)(nil)).Elem()
}

func (o GetBrokerEncryptionOptionOutput) ToGetBrokerEncryptionOptionOutput() GetBrokerEncryptionOptionOutput {
	return o
}

func (o GetBrokerEncryptionOptionOutput) ToGetBrokerEncryptionOptionOutputWithContext(ctx context.Context) GetBrokerEncryptionOptionOutput {
	return o
}

func (o GetBrokerEncryptionOptionOutput) KmsKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBrokerEncryptionOption) string { return v.KmsKeyId }).(pulumi.StringOutput)
}

func (o GetBrokerEncryptionOptionOutput) UseAwsOwnedKey() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBrokerEncryptionOption) bool { return v.UseAwsOwnedKey }).(pulumi.BoolOutput)
}

type GetBrokerEncryptionOptionArrayOutput struct{ *pulumi.OutputState }

func (GetBrokerEncryptionOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBrokerEncryptionOption)(nil)).Elem()
}

func (o GetBrokerEncryptionOptionArrayOutput) ToGetBrokerEncryptionOptionArrayOutput() GetBrokerEncryptionOptionArrayOutput {
	return o
}

func (o GetBrokerEncryptionOptionArrayOutput) ToGetBrokerEncryptionOptionArrayOutputWithContext(ctx context.Context) GetBrokerEncryptionOptionArrayOutput {
	return o
}

func (o GetBrokerEncryptionOptionArrayOutput) Index(i pulumi.IntInput) GetBrokerEncryptionOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBrokerEncryptionOption {
		return vs[0].([]GetBrokerEncryptionOption)[vs[1].(int)]
	}).(GetBrokerEncryptionOptionOutput)
}

type GetBrokerInstance struct {
	ConsoleUrl string   `pulumi:"consoleUrl"`
	Endpoints  []string `pulumi:"endpoints"`
	IpAddress  string   `pulumi:"ipAddress"`
}

// GetBrokerInstanceInput is an input type that accepts GetBrokerInstanceArgs and GetBrokerInstanceOutput values.
// You can construct a concrete instance of `GetBrokerInstanceInput` via:
//
//          GetBrokerInstanceArgs{...}
type GetBrokerInstanceInput interface {
	pulumi.Input

	ToGetBrokerInstanceOutput() GetBrokerInstanceOutput
	ToGetBrokerInstanceOutputWithContext(context.Context) GetBrokerInstanceOutput
}

type GetBrokerInstanceArgs struct {
	ConsoleUrl pulumi.StringInput      `pulumi:"consoleUrl"`
	Endpoints  pulumi.StringArrayInput `pulumi:"endpoints"`
	IpAddress  pulumi.StringInput      `pulumi:"ipAddress"`
}

func (GetBrokerInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerInstance)(nil)).Elem()
}

func (i GetBrokerInstanceArgs) ToGetBrokerInstanceOutput() GetBrokerInstanceOutput {
	return i.ToGetBrokerInstanceOutputWithContext(context.Background())
}

func (i GetBrokerInstanceArgs) ToGetBrokerInstanceOutputWithContext(ctx context.Context) GetBrokerInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBrokerInstanceOutput)
}

// GetBrokerInstanceArrayInput is an input type that accepts GetBrokerInstanceArray and GetBrokerInstanceArrayOutput values.
// You can construct a concrete instance of `GetBrokerInstanceArrayInput` via:
//
//          GetBrokerInstanceArray{ GetBrokerInstanceArgs{...} }
type GetBrokerInstanceArrayInput interface {
	pulumi.Input

	ToGetBrokerInstanceArrayOutput() GetBrokerInstanceArrayOutput
	ToGetBrokerInstanceArrayOutputWithContext(context.Context) GetBrokerInstanceArrayOutput
}

type GetBrokerInstanceArray []GetBrokerInstanceInput

func (GetBrokerInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBrokerInstance)(nil)).Elem()
}

func (i GetBrokerInstanceArray) ToGetBrokerInstanceArrayOutput() GetBrokerInstanceArrayOutput {
	return i.ToGetBrokerInstanceArrayOutputWithContext(context.Background())
}

func (i GetBrokerInstanceArray) ToGetBrokerInstanceArrayOutputWithContext(ctx context.Context) GetBrokerInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBrokerInstanceArrayOutput)
}

type GetBrokerInstanceOutput struct{ *pulumi.OutputState }

func (GetBrokerInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerInstance)(nil)).Elem()
}

func (o GetBrokerInstanceOutput) ToGetBrokerInstanceOutput() GetBrokerInstanceOutput {
	return o
}

func (o GetBrokerInstanceOutput) ToGetBrokerInstanceOutputWithContext(ctx context.Context) GetBrokerInstanceOutput {
	return o
}

func (o GetBrokerInstanceOutput) ConsoleUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetBrokerInstance) string { return v.ConsoleUrl }).(pulumi.StringOutput)
}

func (o GetBrokerInstanceOutput) Endpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetBrokerInstance) []string { return v.Endpoints }).(pulumi.StringArrayOutput)
}

func (o GetBrokerInstanceOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetBrokerInstance) string { return v.IpAddress }).(pulumi.StringOutput)
}

type GetBrokerInstanceArrayOutput struct{ *pulumi.OutputState }

func (GetBrokerInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBrokerInstance)(nil)).Elem()
}

func (o GetBrokerInstanceArrayOutput) ToGetBrokerInstanceArrayOutput() GetBrokerInstanceArrayOutput {
	return o
}

func (o GetBrokerInstanceArrayOutput) ToGetBrokerInstanceArrayOutputWithContext(ctx context.Context) GetBrokerInstanceArrayOutput {
	return o
}

func (o GetBrokerInstanceArrayOutput) Index(i pulumi.IntInput) GetBrokerInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBrokerInstance {
		return vs[0].([]GetBrokerInstance)[vs[1].(int)]
	}).(GetBrokerInstanceOutput)
}

type GetBrokerLdapServerMetadata struct {
	Hosts                  []string `pulumi:"hosts"`
	RoleBase               string   `pulumi:"roleBase"`
	RoleName               string   `pulumi:"roleName"`
	RoleSearchMatching     string   `pulumi:"roleSearchMatching"`
	RoleSearchSubtree      bool     `pulumi:"roleSearchSubtree"`
	ServiceAccountPassword string   `pulumi:"serviceAccountPassword"`
	ServiceAccountUsername string   `pulumi:"serviceAccountUsername"`
	UserBase               string   `pulumi:"userBase"`
	UserRoleName           string   `pulumi:"userRoleName"`
	UserSearchMatching     string   `pulumi:"userSearchMatching"`
	UserSearchSubtree      bool     `pulumi:"userSearchSubtree"`
}

// GetBrokerLdapServerMetadataInput is an input type that accepts GetBrokerLdapServerMetadataArgs and GetBrokerLdapServerMetadataOutput values.
// You can construct a concrete instance of `GetBrokerLdapServerMetadataInput` via:
//
//          GetBrokerLdapServerMetadataArgs{...}
type GetBrokerLdapServerMetadataInput interface {
	pulumi.Input

	ToGetBrokerLdapServerMetadataOutput() GetBrokerLdapServerMetadataOutput
	ToGetBrokerLdapServerMetadataOutputWithContext(context.Context) GetBrokerLdapServerMetadataOutput
}

type GetBrokerLdapServerMetadataArgs struct {
	Hosts                  pulumi.StringArrayInput `pulumi:"hosts"`
	RoleBase               pulumi.StringInput      `pulumi:"roleBase"`
	RoleName               pulumi.StringInput      `pulumi:"roleName"`
	RoleSearchMatching     pulumi.StringInput      `pulumi:"roleSearchMatching"`
	RoleSearchSubtree      pulumi.BoolInput        `pulumi:"roleSearchSubtree"`
	ServiceAccountPassword pulumi.StringInput      `pulumi:"serviceAccountPassword"`
	ServiceAccountUsername pulumi.StringInput      `pulumi:"serviceAccountUsername"`
	UserBase               pulumi.StringInput      `pulumi:"userBase"`
	UserRoleName           pulumi.StringInput      `pulumi:"userRoleName"`
	UserSearchMatching     pulumi.StringInput      `pulumi:"userSearchMatching"`
	UserSearchSubtree      pulumi.BoolInput        `pulumi:"userSearchSubtree"`
}

func (GetBrokerLdapServerMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerLdapServerMetadata)(nil)).Elem()
}

func (i GetBrokerLdapServerMetadataArgs) ToGetBrokerLdapServerMetadataOutput() GetBrokerLdapServerMetadataOutput {
	return i.ToGetBrokerLdapServerMetadataOutputWithContext(context.Background())
}

func (i GetBrokerLdapServerMetadataArgs) ToGetBrokerLdapServerMetadataOutputWithContext(ctx context.Context) GetBrokerLdapServerMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBrokerLdapServerMetadataOutput)
}

// GetBrokerLdapServerMetadataArrayInput is an input type that accepts GetBrokerLdapServerMetadataArray and GetBrokerLdapServerMetadataArrayOutput values.
// You can construct a concrete instance of `GetBrokerLdapServerMetadataArrayInput` via:
//
//          GetBrokerLdapServerMetadataArray{ GetBrokerLdapServerMetadataArgs{...} }
type GetBrokerLdapServerMetadataArrayInput interface {
	pulumi.Input

	ToGetBrokerLdapServerMetadataArrayOutput() GetBrokerLdapServerMetadataArrayOutput
	ToGetBrokerLdapServerMetadataArrayOutputWithContext(context.Context) GetBrokerLdapServerMetadataArrayOutput
}

type GetBrokerLdapServerMetadataArray []GetBrokerLdapServerMetadataInput

func (GetBrokerLdapServerMetadataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBrokerLdapServerMetadata)(nil)).Elem()
}

func (i GetBrokerLdapServerMetadataArray) ToGetBrokerLdapServerMetadataArrayOutput() GetBrokerLdapServerMetadataArrayOutput {
	return i.ToGetBrokerLdapServerMetadataArrayOutputWithContext(context.Background())
}

func (i GetBrokerLdapServerMetadataArray) ToGetBrokerLdapServerMetadataArrayOutputWithContext(ctx context.Context) GetBrokerLdapServerMetadataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBrokerLdapServerMetadataArrayOutput)
}

type GetBrokerLdapServerMetadataOutput struct{ *pulumi.OutputState }

func (GetBrokerLdapServerMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerLdapServerMetadata)(nil)).Elem()
}

func (o GetBrokerLdapServerMetadataOutput) ToGetBrokerLdapServerMetadataOutput() GetBrokerLdapServerMetadataOutput {
	return o
}

func (o GetBrokerLdapServerMetadataOutput) ToGetBrokerLdapServerMetadataOutputWithContext(ctx context.Context) GetBrokerLdapServerMetadataOutput {
	return o
}

func (o GetBrokerLdapServerMetadataOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetBrokerLdapServerMetadata) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

func (o GetBrokerLdapServerMetadataOutput) RoleBase() pulumi.StringOutput {
	return o.ApplyT(func(v GetBrokerLdapServerMetadata) string { return v.RoleBase }).(pulumi.StringOutput)
}

func (o GetBrokerLdapServerMetadataOutput) RoleName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBrokerLdapServerMetadata) string { return v.RoleName }).(pulumi.StringOutput)
}

func (o GetBrokerLdapServerMetadataOutput) RoleSearchMatching() pulumi.StringOutput {
	return o.ApplyT(func(v GetBrokerLdapServerMetadata) string { return v.RoleSearchMatching }).(pulumi.StringOutput)
}

func (o GetBrokerLdapServerMetadataOutput) RoleSearchSubtree() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBrokerLdapServerMetadata) bool { return v.RoleSearchSubtree }).(pulumi.BoolOutput)
}

func (o GetBrokerLdapServerMetadataOutput) ServiceAccountPassword() pulumi.StringOutput {
	return o.ApplyT(func(v GetBrokerLdapServerMetadata) string { return v.ServiceAccountPassword }).(pulumi.StringOutput)
}

func (o GetBrokerLdapServerMetadataOutput) ServiceAccountUsername() pulumi.StringOutput {
	return o.ApplyT(func(v GetBrokerLdapServerMetadata) string { return v.ServiceAccountUsername }).(pulumi.StringOutput)
}

func (o GetBrokerLdapServerMetadataOutput) UserBase() pulumi.StringOutput {
	return o.ApplyT(func(v GetBrokerLdapServerMetadata) string { return v.UserBase }).(pulumi.StringOutput)
}

func (o GetBrokerLdapServerMetadataOutput) UserRoleName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBrokerLdapServerMetadata) string { return v.UserRoleName }).(pulumi.StringOutput)
}

func (o GetBrokerLdapServerMetadataOutput) UserSearchMatching() pulumi.StringOutput {
	return o.ApplyT(func(v GetBrokerLdapServerMetadata) string { return v.UserSearchMatching }).(pulumi.StringOutput)
}

func (o GetBrokerLdapServerMetadataOutput) UserSearchSubtree() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBrokerLdapServerMetadata) bool { return v.UserSearchSubtree }).(pulumi.BoolOutput)
}

type GetBrokerLdapServerMetadataArrayOutput struct{ *pulumi.OutputState }

func (GetBrokerLdapServerMetadataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBrokerLdapServerMetadata)(nil)).Elem()
}

func (o GetBrokerLdapServerMetadataArrayOutput) ToGetBrokerLdapServerMetadataArrayOutput() GetBrokerLdapServerMetadataArrayOutput {
	return o
}

func (o GetBrokerLdapServerMetadataArrayOutput) ToGetBrokerLdapServerMetadataArrayOutputWithContext(ctx context.Context) GetBrokerLdapServerMetadataArrayOutput {
	return o
}

func (o GetBrokerLdapServerMetadataArrayOutput) Index(i pulumi.IntInput) GetBrokerLdapServerMetadataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBrokerLdapServerMetadata {
		return vs[0].([]GetBrokerLdapServerMetadata)[vs[1].(int)]
	}).(GetBrokerLdapServerMetadataOutput)
}

type GetBrokerLogs struct {
	Audit   bool `pulumi:"audit"`
	General bool `pulumi:"general"`
}

// GetBrokerLogsInput is an input type that accepts GetBrokerLogsArgs and GetBrokerLogsOutput values.
// You can construct a concrete instance of `GetBrokerLogsInput` via:
//
//          GetBrokerLogsArgs{...}
type GetBrokerLogsInput interface {
	pulumi.Input

	ToGetBrokerLogsOutput() GetBrokerLogsOutput
	ToGetBrokerLogsOutputWithContext(context.Context) GetBrokerLogsOutput
}

type GetBrokerLogsArgs struct {
	Audit   pulumi.BoolInput `pulumi:"audit"`
	General pulumi.BoolInput `pulumi:"general"`
}

func (GetBrokerLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerLogs)(nil)).Elem()
}

func (i GetBrokerLogsArgs) ToGetBrokerLogsOutput() GetBrokerLogsOutput {
	return i.ToGetBrokerLogsOutputWithContext(context.Background())
}

func (i GetBrokerLogsArgs) ToGetBrokerLogsOutputWithContext(ctx context.Context) GetBrokerLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBrokerLogsOutput)
}

type GetBrokerLogsOutput struct{ *pulumi.OutputState }

func (GetBrokerLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerLogs)(nil)).Elem()
}

func (o GetBrokerLogsOutput) ToGetBrokerLogsOutput() GetBrokerLogsOutput {
	return o
}

func (o GetBrokerLogsOutput) ToGetBrokerLogsOutputWithContext(ctx context.Context) GetBrokerLogsOutput {
	return o
}

func (o GetBrokerLogsOutput) Audit() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBrokerLogs) bool { return v.Audit }).(pulumi.BoolOutput)
}

func (o GetBrokerLogsOutput) General() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBrokerLogs) bool { return v.General }).(pulumi.BoolOutput)
}

type GetBrokerMaintenanceWindowStartTime struct {
	DayOfWeek string `pulumi:"dayOfWeek"`
	TimeOfDay string `pulumi:"timeOfDay"`
	TimeZone  string `pulumi:"timeZone"`
}

// GetBrokerMaintenanceWindowStartTimeInput is an input type that accepts GetBrokerMaintenanceWindowStartTimeArgs and GetBrokerMaintenanceWindowStartTimeOutput values.
// You can construct a concrete instance of `GetBrokerMaintenanceWindowStartTimeInput` via:
//
//          GetBrokerMaintenanceWindowStartTimeArgs{...}
type GetBrokerMaintenanceWindowStartTimeInput interface {
	pulumi.Input

	ToGetBrokerMaintenanceWindowStartTimeOutput() GetBrokerMaintenanceWindowStartTimeOutput
	ToGetBrokerMaintenanceWindowStartTimeOutputWithContext(context.Context) GetBrokerMaintenanceWindowStartTimeOutput
}

type GetBrokerMaintenanceWindowStartTimeArgs struct {
	DayOfWeek pulumi.StringInput `pulumi:"dayOfWeek"`
	TimeOfDay pulumi.StringInput `pulumi:"timeOfDay"`
	TimeZone  pulumi.StringInput `pulumi:"timeZone"`
}

func (GetBrokerMaintenanceWindowStartTimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerMaintenanceWindowStartTime)(nil)).Elem()
}

func (i GetBrokerMaintenanceWindowStartTimeArgs) ToGetBrokerMaintenanceWindowStartTimeOutput() GetBrokerMaintenanceWindowStartTimeOutput {
	return i.ToGetBrokerMaintenanceWindowStartTimeOutputWithContext(context.Background())
}

func (i GetBrokerMaintenanceWindowStartTimeArgs) ToGetBrokerMaintenanceWindowStartTimeOutputWithContext(ctx context.Context) GetBrokerMaintenanceWindowStartTimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBrokerMaintenanceWindowStartTimeOutput)
}

type GetBrokerMaintenanceWindowStartTimeOutput struct{ *pulumi.OutputState }

func (GetBrokerMaintenanceWindowStartTimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerMaintenanceWindowStartTime)(nil)).Elem()
}

func (o GetBrokerMaintenanceWindowStartTimeOutput) ToGetBrokerMaintenanceWindowStartTimeOutput() GetBrokerMaintenanceWindowStartTimeOutput {
	return o
}

func (o GetBrokerMaintenanceWindowStartTimeOutput) ToGetBrokerMaintenanceWindowStartTimeOutputWithContext(ctx context.Context) GetBrokerMaintenanceWindowStartTimeOutput {
	return o
}

func (o GetBrokerMaintenanceWindowStartTimeOutput) DayOfWeek() pulumi.StringOutput {
	return o.ApplyT(func(v GetBrokerMaintenanceWindowStartTime) string { return v.DayOfWeek }).(pulumi.StringOutput)
}

func (o GetBrokerMaintenanceWindowStartTimeOutput) TimeOfDay() pulumi.StringOutput {
	return o.ApplyT(func(v GetBrokerMaintenanceWindowStartTime) string { return v.TimeOfDay }).(pulumi.StringOutput)
}

func (o GetBrokerMaintenanceWindowStartTimeOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v GetBrokerMaintenanceWindowStartTime) string { return v.TimeZone }).(pulumi.StringOutput)
}

type GetBrokerUser struct {
	ConsoleAccess bool     `pulumi:"consoleAccess"`
	Groups        []string `pulumi:"groups"`
	Username      string   `pulumi:"username"`
}

// GetBrokerUserInput is an input type that accepts GetBrokerUserArgs and GetBrokerUserOutput values.
// You can construct a concrete instance of `GetBrokerUserInput` via:
//
//          GetBrokerUserArgs{...}
type GetBrokerUserInput interface {
	pulumi.Input

	ToGetBrokerUserOutput() GetBrokerUserOutput
	ToGetBrokerUserOutputWithContext(context.Context) GetBrokerUserOutput
}

type GetBrokerUserArgs struct {
	ConsoleAccess pulumi.BoolInput        `pulumi:"consoleAccess"`
	Groups        pulumi.StringArrayInput `pulumi:"groups"`
	Username      pulumi.StringInput      `pulumi:"username"`
}

func (GetBrokerUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerUser)(nil)).Elem()
}

func (i GetBrokerUserArgs) ToGetBrokerUserOutput() GetBrokerUserOutput {
	return i.ToGetBrokerUserOutputWithContext(context.Background())
}

func (i GetBrokerUserArgs) ToGetBrokerUserOutputWithContext(ctx context.Context) GetBrokerUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBrokerUserOutput)
}

// GetBrokerUserArrayInput is an input type that accepts GetBrokerUserArray and GetBrokerUserArrayOutput values.
// You can construct a concrete instance of `GetBrokerUserArrayInput` via:
//
//          GetBrokerUserArray{ GetBrokerUserArgs{...} }
type GetBrokerUserArrayInput interface {
	pulumi.Input

	ToGetBrokerUserArrayOutput() GetBrokerUserArrayOutput
	ToGetBrokerUserArrayOutputWithContext(context.Context) GetBrokerUserArrayOutput
}

type GetBrokerUserArray []GetBrokerUserInput

func (GetBrokerUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBrokerUser)(nil)).Elem()
}

func (i GetBrokerUserArray) ToGetBrokerUserArrayOutput() GetBrokerUserArrayOutput {
	return i.ToGetBrokerUserArrayOutputWithContext(context.Background())
}

func (i GetBrokerUserArray) ToGetBrokerUserArrayOutputWithContext(ctx context.Context) GetBrokerUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBrokerUserArrayOutput)
}

type GetBrokerUserOutput struct{ *pulumi.OutputState }

func (GetBrokerUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerUser)(nil)).Elem()
}

func (o GetBrokerUserOutput) ToGetBrokerUserOutput() GetBrokerUserOutput {
	return o
}

func (o GetBrokerUserOutput) ToGetBrokerUserOutputWithContext(ctx context.Context) GetBrokerUserOutput {
	return o
}

func (o GetBrokerUserOutput) ConsoleAccess() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBrokerUser) bool { return v.ConsoleAccess }).(pulumi.BoolOutput)
}

func (o GetBrokerUserOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetBrokerUser) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

func (o GetBrokerUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetBrokerUser) string { return v.Username }).(pulumi.StringOutput)
}

type GetBrokerUserArrayOutput struct{ *pulumi.OutputState }

func (GetBrokerUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBrokerUser)(nil)).Elem()
}

func (o GetBrokerUserArrayOutput) ToGetBrokerUserArrayOutput() GetBrokerUserArrayOutput {
	return o
}

func (o GetBrokerUserArrayOutput) ToGetBrokerUserArrayOutputWithContext(ctx context.Context) GetBrokerUserArrayOutput {
	return o
}

func (o GetBrokerUserArrayOutput) Index(i pulumi.IntInput) GetBrokerUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBrokerUser {
		return vs[0].([]GetBrokerUser)[vs[1].(int)]
	}).(GetBrokerUserOutput)
}

func init() {
	pulumi.RegisterOutputType(BrokerConfigurationOutput{})
	pulumi.RegisterOutputType(BrokerConfigurationPtrOutput{})
	pulumi.RegisterOutputType(BrokerEncryptionOptionsOutput{})
	pulumi.RegisterOutputType(BrokerEncryptionOptionsPtrOutput{})
	pulumi.RegisterOutputType(BrokerInstanceOutput{})
	pulumi.RegisterOutputType(BrokerInstanceArrayOutput{})
	pulumi.RegisterOutputType(BrokerLdapServerMetadataOutput{})
	pulumi.RegisterOutputType(BrokerLdapServerMetadataPtrOutput{})
	pulumi.RegisterOutputType(BrokerLogsOutput{})
	pulumi.RegisterOutputType(BrokerLogsPtrOutput{})
	pulumi.RegisterOutputType(BrokerMaintenanceWindowStartTimeOutput{})
	pulumi.RegisterOutputType(BrokerMaintenanceWindowStartTimePtrOutput{})
	pulumi.RegisterOutputType(BrokerUserOutput{})
	pulumi.RegisterOutputType(BrokerUserArrayOutput{})
	pulumi.RegisterOutputType(GetBrokerConfigurationOutput{})
	pulumi.RegisterOutputType(GetBrokerEncryptionOptionOutput{})
	pulumi.RegisterOutputType(GetBrokerEncryptionOptionArrayOutput{})
	pulumi.RegisterOutputType(GetBrokerInstanceOutput{})
	pulumi.RegisterOutputType(GetBrokerInstanceArrayOutput{})
	pulumi.RegisterOutputType(GetBrokerLdapServerMetadataOutput{})
	pulumi.RegisterOutputType(GetBrokerLdapServerMetadataArrayOutput{})
	pulumi.RegisterOutputType(GetBrokerLogsOutput{})
	pulumi.RegisterOutputType(GetBrokerMaintenanceWindowStartTimeOutput{})
	pulumi.RegisterOutputType(GetBrokerUserOutput{})
	pulumi.RegisterOutputType(GetBrokerUserArrayOutput{})
}
