// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mq

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieve information about available broker engines.
//
// ## Example Usage
//
// ### Basic Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/mq"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mq.GetBrokerEngineTypes(ctx, &mq.GetBrokerEngineTypesArgs{
//				EngineType: pulumi.StringRef("ACTIVEMQ"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func GetBrokerEngineTypes(ctx *pulumi.Context, args *GetBrokerEngineTypesArgs, opts ...pulumi.InvokeOption) (*GetBrokerEngineTypesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetBrokerEngineTypesResult
	err := ctx.Invoke("aws:mq/getBrokerEngineTypes:getBrokerEngineTypes", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBrokerEngineTypes.
type GetBrokerEngineTypesArgs struct {
	// The MQ engine type to return version details for.
	EngineType *string `pulumi:"engineType"`
}

// A collection of values returned by getBrokerEngineTypes.
type GetBrokerEngineTypesResult struct {
	// A list of available engine types and versions. See Engine Types.
	BrokerEngineTypes []GetBrokerEngineTypesBrokerEngineType `pulumi:"brokerEngineTypes"`
	// The broker's engine type.
	EngineType *string `pulumi:"engineType"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
}

func GetBrokerEngineTypesOutput(ctx *pulumi.Context, args GetBrokerEngineTypesOutputArgs, opts ...pulumi.InvokeOption) GetBrokerEngineTypesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetBrokerEngineTypesResult, error) {
			args := v.(GetBrokerEngineTypesArgs)
			r, err := GetBrokerEngineTypes(ctx, &args, opts...)
			var s GetBrokerEngineTypesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetBrokerEngineTypesResultOutput)
}

// A collection of arguments for invoking getBrokerEngineTypes.
type GetBrokerEngineTypesOutputArgs struct {
	// The MQ engine type to return version details for.
	EngineType pulumi.StringPtrInput `pulumi:"engineType"`
}

func (GetBrokerEngineTypesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerEngineTypesArgs)(nil)).Elem()
}

// A collection of values returned by getBrokerEngineTypes.
type GetBrokerEngineTypesResultOutput struct{ *pulumi.OutputState }

func (GetBrokerEngineTypesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBrokerEngineTypesResult)(nil)).Elem()
}

func (o GetBrokerEngineTypesResultOutput) ToGetBrokerEngineTypesResultOutput() GetBrokerEngineTypesResultOutput {
	return o
}

func (o GetBrokerEngineTypesResultOutput) ToGetBrokerEngineTypesResultOutputWithContext(ctx context.Context) GetBrokerEngineTypesResultOutput {
	return o
}

// A list of available engine types and versions. See Engine Types.
func (o GetBrokerEngineTypesResultOutput) BrokerEngineTypes() GetBrokerEngineTypesBrokerEngineTypeArrayOutput {
	return o.ApplyT(func(v GetBrokerEngineTypesResult) []GetBrokerEngineTypesBrokerEngineType { return v.BrokerEngineTypes }).(GetBrokerEngineTypesBrokerEngineTypeArrayOutput)
}

// The broker's engine type.
func (o GetBrokerEngineTypesResultOutput) EngineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBrokerEngineTypesResult) *string { return v.EngineType }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetBrokerEngineTypesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBrokerEngineTypesResult) string { return v.Id }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetBrokerEngineTypesResultOutput{})
}
