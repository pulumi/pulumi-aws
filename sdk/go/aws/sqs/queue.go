// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sqs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Queue struct {
	pulumi.CustomResourceState

	Arn                          pulumi.StringOutput    `pulumi:"arn"`
	ContentBasedDeduplication    pulumi.BoolPtrOutput   `pulumi:"contentBasedDeduplication"`
	DeduplicationScope           pulumi.StringOutput    `pulumi:"deduplicationScope"`
	DelaySeconds                 pulumi.IntPtrOutput    `pulumi:"delaySeconds"`
	FifoQueue                    pulumi.BoolPtrOutput   `pulumi:"fifoQueue"`
	FifoThroughputLimit          pulumi.StringOutput    `pulumi:"fifoThroughputLimit"`
	KmsDataKeyReusePeriodSeconds pulumi.IntOutput       `pulumi:"kmsDataKeyReusePeriodSeconds"`
	KmsMasterKeyId               pulumi.StringPtrOutput `pulumi:"kmsMasterKeyId"`
	MaxMessageSize               pulumi.IntPtrOutput    `pulumi:"maxMessageSize"`
	MessageRetentionSeconds      pulumi.IntPtrOutput    `pulumi:"messageRetentionSeconds"`
	Name                         pulumi.StringOutput    `pulumi:"name"`
	NamePrefix                   pulumi.StringOutput    `pulumi:"namePrefix"`
	Policy                       pulumi.StringOutput    `pulumi:"policy"`
	ReceiveWaitTimeSeconds       pulumi.IntPtrOutput    `pulumi:"receiveWaitTimeSeconds"`
	RedriveAllowPolicy           pulumi.StringOutput    `pulumi:"redriveAllowPolicy"`
	RedrivePolicy                pulumi.StringOutput    `pulumi:"redrivePolicy"`
	SqsManagedSseEnabled         pulumi.BoolOutput      `pulumi:"sqsManagedSseEnabled"`
	Tags                         pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll                      pulumi.StringMapOutput `pulumi:"tagsAll"`
	Url                          pulumi.StringOutput    `pulumi:"url"`
	VisibilityTimeoutSeconds     pulumi.IntPtrOutput    `pulumi:"visibilityTimeoutSeconds"`
}

// NewQueue registers a new resource with the given unique name, arguments, and options.
func NewQueue(ctx *pulumi.Context,
	name string, args *QueueArgs, opts ...pulumi.ResourceOption) (*Queue, error) {
	if args == nil {
		args = &QueueArgs{}
	}

	var resource Queue
	err := ctx.RegisterResource("aws:sqs/queue:Queue", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQueue gets an existing Queue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQueue(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QueueState, opts ...pulumi.ResourceOption) (*Queue, error) {
	var resource Queue
	err := ctx.ReadResource("aws:sqs/queue:Queue", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Queue resources.
type queueState struct {
	Arn                          *string           `pulumi:"arn"`
	ContentBasedDeduplication    *bool             `pulumi:"contentBasedDeduplication"`
	DeduplicationScope           *string           `pulumi:"deduplicationScope"`
	DelaySeconds                 *int              `pulumi:"delaySeconds"`
	FifoQueue                    *bool             `pulumi:"fifoQueue"`
	FifoThroughputLimit          *string           `pulumi:"fifoThroughputLimit"`
	KmsDataKeyReusePeriodSeconds *int              `pulumi:"kmsDataKeyReusePeriodSeconds"`
	KmsMasterKeyId               *string           `pulumi:"kmsMasterKeyId"`
	MaxMessageSize               *int              `pulumi:"maxMessageSize"`
	MessageRetentionSeconds      *int              `pulumi:"messageRetentionSeconds"`
	Name                         *string           `pulumi:"name"`
	NamePrefix                   *string           `pulumi:"namePrefix"`
	Policy                       *string           `pulumi:"policy"`
	ReceiveWaitTimeSeconds       *int              `pulumi:"receiveWaitTimeSeconds"`
	RedriveAllowPolicy           *string           `pulumi:"redriveAllowPolicy"`
	RedrivePolicy                *string           `pulumi:"redrivePolicy"`
	SqsManagedSseEnabled         *bool             `pulumi:"sqsManagedSseEnabled"`
	Tags                         map[string]string `pulumi:"tags"`
	TagsAll                      map[string]string `pulumi:"tagsAll"`
	Url                          *string           `pulumi:"url"`
	VisibilityTimeoutSeconds     *int              `pulumi:"visibilityTimeoutSeconds"`
}

type QueueState struct {
	Arn                          pulumi.StringPtrInput
	ContentBasedDeduplication    pulumi.BoolPtrInput
	DeduplicationScope           pulumi.StringPtrInput
	DelaySeconds                 pulumi.IntPtrInput
	FifoQueue                    pulumi.BoolPtrInput
	FifoThroughputLimit          pulumi.StringPtrInput
	KmsDataKeyReusePeriodSeconds pulumi.IntPtrInput
	KmsMasterKeyId               pulumi.StringPtrInput
	MaxMessageSize               pulumi.IntPtrInput
	MessageRetentionSeconds      pulumi.IntPtrInput
	Name                         pulumi.StringPtrInput
	NamePrefix                   pulumi.StringPtrInput
	Policy                       pulumi.StringPtrInput
	ReceiveWaitTimeSeconds       pulumi.IntPtrInput
	RedriveAllowPolicy           pulumi.StringPtrInput
	RedrivePolicy                pulumi.StringPtrInput
	SqsManagedSseEnabled         pulumi.BoolPtrInput
	Tags                         pulumi.StringMapInput
	TagsAll                      pulumi.StringMapInput
	Url                          pulumi.StringPtrInput
	VisibilityTimeoutSeconds     pulumi.IntPtrInput
}

func (QueueState) ElementType() reflect.Type {
	return reflect.TypeOf((*queueState)(nil)).Elem()
}

type queueArgs struct {
	ContentBasedDeduplication    *bool             `pulumi:"contentBasedDeduplication"`
	DeduplicationScope           *string           `pulumi:"deduplicationScope"`
	DelaySeconds                 *int              `pulumi:"delaySeconds"`
	FifoQueue                    *bool             `pulumi:"fifoQueue"`
	FifoThroughputLimit          *string           `pulumi:"fifoThroughputLimit"`
	KmsDataKeyReusePeriodSeconds *int              `pulumi:"kmsDataKeyReusePeriodSeconds"`
	KmsMasterKeyId               *string           `pulumi:"kmsMasterKeyId"`
	MaxMessageSize               *int              `pulumi:"maxMessageSize"`
	MessageRetentionSeconds      *int              `pulumi:"messageRetentionSeconds"`
	Name                         *string           `pulumi:"name"`
	NamePrefix                   *string           `pulumi:"namePrefix"`
	Policy                       *string           `pulumi:"policy"`
	ReceiveWaitTimeSeconds       *int              `pulumi:"receiveWaitTimeSeconds"`
	RedriveAllowPolicy           *string           `pulumi:"redriveAllowPolicy"`
	RedrivePolicy                *string           `pulumi:"redrivePolicy"`
	SqsManagedSseEnabled         *bool             `pulumi:"sqsManagedSseEnabled"`
	Tags                         map[string]string `pulumi:"tags"`
	VisibilityTimeoutSeconds     *int              `pulumi:"visibilityTimeoutSeconds"`
}

// The set of arguments for constructing a Queue resource.
type QueueArgs struct {
	ContentBasedDeduplication    pulumi.BoolPtrInput
	DeduplicationScope           pulumi.StringPtrInput
	DelaySeconds                 pulumi.IntPtrInput
	FifoQueue                    pulumi.BoolPtrInput
	FifoThroughputLimit          pulumi.StringPtrInput
	KmsDataKeyReusePeriodSeconds pulumi.IntPtrInput
	KmsMasterKeyId               pulumi.StringPtrInput
	MaxMessageSize               pulumi.IntPtrInput
	MessageRetentionSeconds      pulumi.IntPtrInput
	Name                         pulumi.StringPtrInput
	NamePrefix                   pulumi.StringPtrInput
	Policy                       pulumi.StringPtrInput
	ReceiveWaitTimeSeconds       pulumi.IntPtrInput
	RedriveAllowPolicy           pulumi.StringPtrInput
	RedrivePolicy                pulumi.StringPtrInput
	SqsManagedSseEnabled         pulumi.BoolPtrInput
	Tags                         pulumi.StringMapInput
	VisibilityTimeoutSeconds     pulumi.IntPtrInput
}

func (QueueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*queueArgs)(nil)).Elem()
}

type QueueInput interface {
	pulumi.Input

	ToQueueOutput() QueueOutput
	ToQueueOutputWithContext(ctx context.Context) QueueOutput
}

func (*Queue) ElementType() reflect.Type {
	return reflect.TypeOf((**Queue)(nil)).Elem()
}

func (i *Queue) ToQueueOutput() QueueOutput {
	return i.ToQueueOutputWithContext(context.Background())
}

func (i *Queue) ToQueueOutputWithContext(ctx context.Context) QueueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueOutput)
}

// QueueArrayInput is an input type that accepts QueueArray and QueueArrayOutput values.
// You can construct a concrete instance of `QueueArrayInput` via:
//
//	QueueArray{ QueueArgs{...} }
type QueueArrayInput interface {
	pulumi.Input

	ToQueueArrayOutput() QueueArrayOutput
	ToQueueArrayOutputWithContext(context.Context) QueueArrayOutput
}

type QueueArray []QueueInput

func (QueueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Queue)(nil)).Elem()
}

func (i QueueArray) ToQueueArrayOutput() QueueArrayOutput {
	return i.ToQueueArrayOutputWithContext(context.Background())
}

func (i QueueArray) ToQueueArrayOutputWithContext(ctx context.Context) QueueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueArrayOutput)
}

// QueueMapInput is an input type that accepts QueueMap and QueueMapOutput values.
// You can construct a concrete instance of `QueueMapInput` via:
//
//	QueueMap{ "key": QueueArgs{...} }
type QueueMapInput interface {
	pulumi.Input

	ToQueueMapOutput() QueueMapOutput
	ToQueueMapOutputWithContext(context.Context) QueueMapOutput
}

type QueueMap map[string]QueueInput

func (QueueMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Queue)(nil)).Elem()
}

func (i QueueMap) ToQueueMapOutput() QueueMapOutput {
	return i.ToQueueMapOutputWithContext(context.Background())
}

func (i QueueMap) ToQueueMapOutputWithContext(ctx context.Context) QueueMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueMapOutput)
}

type QueueOutput struct{ *pulumi.OutputState }

func (QueueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Queue)(nil)).Elem()
}

func (o QueueOutput) ToQueueOutput() QueueOutput {
	return o
}

func (o QueueOutput) ToQueueOutputWithContext(ctx context.Context) QueueOutput {
	return o
}

func (o QueueOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o QueueOutput) ContentBasedDeduplication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Queue) pulumi.BoolPtrOutput { return v.ContentBasedDeduplication }).(pulumi.BoolPtrOutput)
}

func (o QueueOutput) DeduplicationScope() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.DeduplicationScope }).(pulumi.StringOutput)
}

func (o QueueOutput) DelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Queue) pulumi.IntPtrOutput { return v.DelaySeconds }).(pulumi.IntPtrOutput)
}

func (o QueueOutput) FifoQueue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Queue) pulumi.BoolPtrOutput { return v.FifoQueue }).(pulumi.BoolPtrOutput)
}

func (o QueueOutput) FifoThroughputLimit() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.FifoThroughputLimit }).(pulumi.StringOutput)
}

func (o QueueOutput) KmsDataKeyReusePeriodSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *Queue) pulumi.IntOutput { return v.KmsDataKeyReusePeriodSeconds }).(pulumi.IntOutput)
}

func (o QueueOutput) KmsMasterKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringPtrOutput { return v.KmsMasterKeyId }).(pulumi.StringPtrOutput)
}

func (o QueueOutput) MaxMessageSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Queue) pulumi.IntPtrOutput { return v.MaxMessageSize }).(pulumi.IntPtrOutput)
}

func (o QueueOutput) MessageRetentionSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Queue) pulumi.IntPtrOutput { return v.MessageRetentionSeconds }).(pulumi.IntPtrOutput)
}

func (o QueueOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o QueueOutput) NamePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.NamePrefix }).(pulumi.StringOutput)
}

func (o QueueOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.Policy }).(pulumi.StringOutput)
}

func (o QueueOutput) ReceiveWaitTimeSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Queue) pulumi.IntPtrOutput { return v.ReceiveWaitTimeSeconds }).(pulumi.IntPtrOutput)
}

func (o QueueOutput) RedriveAllowPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.RedriveAllowPolicy }).(pulumi.StringOutput)
}

func (o QueueOutput) RedrivePolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.RedrivePolicy }).(pulumi.StringOutput)
}

func (o QueueOutput) SqsManagedSseEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Queue) pulumi.BoolOutput { return v.SqsManagedSseEnabled }).(pulumi.BoolOutput)
}

func (o QueueOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o QueueOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o QueueOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

func (o QueueOutput) VisibilityTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Queue) pulumi.IntPtrOutput { return v.VisibilityTimeoutSeconds }).(pulumi.IntPtrOutput)
}

type QueueArrayOutput struct{ *pulumi.OutputState }

func (QueueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Queue)(nil)).Elem()
}

func (o QueueArrayOutput) ToQueueArrayOutput() QueueArrayOutput {
	return o
}

func (o QueueArrayOutput) ToQueueArrayOutputWithContext(ctx context.Context) QueueArrayOutput {
	return o
}

func (o QueueArrayOutput) Index(i pulumi.IntInput) QueueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Queue {
		return vs[0].([]*Queue)[vs[1].(int)]
	}).(QueueOutput)
}

type QueueMapOutput struct{ *pulumi.OutputState }

func (QueueMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Queue)(nil)).Elem()
}

func (o QueueMapOutput) ToQueueMapOutput() QueueMapOutput {
	return o
}

func (o QueueMapOutput) ToQueueMapOutputWithContext(ctx context.Context) QueueMapOutput {
	return o
}

func (o QueueMapOutput) MapIndex(k pulumi.StringInput) QueueOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Queue {
		return vs[0].(map[string]*Queue)[vs[1].(string)]
	}).(QueueOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QueueInput)(nil)).Elem(), &Queue{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueueArrayInput)(nil)).Elem(), QueueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueueMapInput)(nil)).Elem(), QueueMap{})
	pulumi.RegisterOutputType(QueueOutput{})
	pulumi.RegisterOutputType(QueueArrayOutput{})
	pulumi.RegisterOutputType(QueueMapOutput{})
}
