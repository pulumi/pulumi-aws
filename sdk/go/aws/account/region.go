// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package account

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Enable (Opt-In) or Disable (Opt-Out) a particular Region for an AWS account.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/account"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := account.NewRegion(ctx, "example", &account.RegionArgs{
//				RegionName: pulumi.String("ap-southeast-3"),
//				Enabled:    pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Using `pulumi import`. For example:
//
// ```sh
// $ pulumi import aws:account/region:Region example ap-southeast-3
// ```
type Region struct {
	pulumi.CustomResourceState

	// The ID of the target account when managing member accounts. Will manage current user's account by default if omitted. To use this parameter, the caller must be an identity in the organization's management account or a delegated administrator account. The specified account ID must also be a member account in the same organization. The organization must have all features enabled, and the organization must have trusted access enabled for the Account Management service, and optionally a delegated admin account assigned.
	AccountId pulumi.StringPtrOutput `pulumi:"accountId"`
	// Whether the region is enabled.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The region opt status.
	OptStatus pulumi.StringOutput `pulumi:"optStatus"`
	// The region name to manage.
	RegionName pulumi.StringOutput `pulumi:"regionName"`
}

// NewRegion registers a new resource with the given unique name, arguments, and options.
func NewRegion(ctx *pulumi.Context,
	name string, args *RegionArgs, opts ...pulumi.ResourceOption) (*Region, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.RegionName == nil {
		return nil, errors.New("invalid value for required argument 'RegionName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Region
	err := ctx.RegisterResource("aws:account/region:Region", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegion gets an existing Region resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegionState, opts ...pulumi.ResourceOption) (*Region, error) {
	var resource Region
	err := ctx.ReadResource("aws:account/region:Region", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Region resources.
type regionState struct {
	// The ID of the target account when managing member accounts. Will manage current user's account by default if omitted. To use this parameter, the caller must be an identity in the organization's management account or a delegated administrator account. The specified account ID must also be a member account in the same organization. The organization must have all features enabled, and the organization must have trusted access enabled for the Account Management service, and optionally a delegated admin account assigned.
	AccountId *string `pulumi:"accountId"`
	// Whether the region is enabled.
	Enabled *bool `pulumi:"enabled"`
	// The region opt status.
	OptStatus *string `pulumi:"optStatus"`
	// The region name to manage.
	RegionName *string `pulumi:"regionName"`
}

type RegionState struct {
	// The ID of the target account when managing member accounts. Will manage current user's account by default if omitted. To use this parameter, the caller must be an identity in the organization's management account or a delegated administrator account. The specified account ID must also be a member account in the same organization. The organization must have all features enabled, and the organization must have trusted access enabled for the Account Management service, and optionally a delegated admin account assigned.
	AccountId pulumi.StringPtrInput
	// Whether the region is enabled.
	Enabled pulumi.BoolPtrInput
	// The region opt status.
	OptStatus pulumi.StringPtrInput
	// The region name to manage.
	RegionName pulumi.StringPtrInput
}

func (RegionState) ElementType() reflect.Type {
	return reflect.TypeOf((*regionState)(nil)).Elem()
}

type regionArgs struct {
	// The ID of the target account when managing member accounts. Will manage current user's account by default if omitted. To use this parameter, the caller must be an identity in the organization's management account or a delegated administrator account. The specified account ID must also be a member account in the same organization. The organization must have all features enabled, and the organization must have trusted access enabled for the Account Management service, and optionally a delegated admin account assigned.
	AccountId *string `pulumi:"accountId"`
	// Whether the region is enabled.
	Enabled bool `pulumi:"enabled"`
	// The region name to manage.
	RegionName string `pulumi:"regionName"`
}

// The set of arguments for constructing a Region resource.
type RegionArgs struct {
	// The ID of the target account when managing member accounts. Will manage current user's account by default if omitted. To use this parameter, the caller must be an identity in the organization's management account or a delegated administrator account. The specified account ID must also be a member account in the same organization. The organization must have all features enabled, and the organization must have trusted access enabled for the Account Management service, and optionally a delegated admin account assigned.
	AccountId pulumi.StringPtrInput
	// Whether the region is enabled.
	Enabled pulumi.BoolInput
	// The region name to manage.
	RegionName pulumi.StringInput
}

func (RegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*regionArgs)(nil)).Elem()
}

type RegionInput interface {
	pulumi.Input

	ToRegionOutput() RegionOutput
	ToRegionOutputWithContext(ctx context.Context) RegionOutput
}

func (*Region) ElementType() reflect.Type {
	return reflect.TypeOf((**Region)(nil)).Elem()
}

func (i *Region) ToRegionOutput() RegionOutput {
	return i.ToRegionOutputWithContext(context.Background())
}

func (i *Region) ToRegionOutputWithContext(ctx context.Context) RegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionOutput)
}

// RegionArrayInput is an input type that accepts RegionArray and RegionArrayOutput values.
// You can construct a concrete instance of `RegionArrayInput` via:
//
//	RegionArray{ RegionArgs{...} }
type RegionArrayInput interface {
	pulumi.Input

	ToRegionArrayOutput() RegionArrayOutput
	ToRegionArrayOutputWithContext(context.Context) RegionArrayOutput
}

type RegionArray []RegionInput

func (RegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Region)(nil)).Elem()
}

func (i RegionArray) ToRegionArrayOutput() RegionArrayOutput {
	return i.ToRegionArrayOutputWithContext(context.Background())
}

func (i RegionArray) ToRegionArrayOutputWithContext(ctx context.Context) RegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionArrayOutput)
}

// RegionMapInput is an input type that accepts RegionMap and RegionMapOutput values.
// You can construct a concrete instance of `RegionMapInput` via:
//
//	RegionMap{ "key": RegionArgs{...} }
type RegionMapInput interface {
	pulumi.Input

	ToRegionMapOutput() RegionMapOutput
	ToRegionMapOutputWithContext(context.Context) RegionMapOutput
}

type RegionMap map[string]RegionInput

func (RegionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Region)(nil)).Elem()
}

func (i RegionMap) ToRegionMapOutput() RegionMapOutput {
	return i.ToRegionMapOutputWithContext(context.Background())
}

func (i RegionMap) ToRegionMapOutputWithContext(ctx context.Context) RegionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionMapOutput)
}

type RegionOutput struct{ *pulumi.OutputState }

func (RegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Region)(nil)).Elem()
}

func (o RegionOutput) ToRegionOutput() RegionOutput {
	return o
}

func (o RegionOutput) ToRegionOutputWithContext(ctx context.Context) RegionOutput {
	return o
}

// The ID of the target account when managing member accounts. Will manage current user's account by default if omitted. To use this parameter, the caller must be an identity in the organization's management account or a delegated administrator account. The specified account ID must also be a member account in the same organization. The organization must have all features enabled, and the organization must have trusted access enabled for the Account Management service, and optionally a delegated admin account assigned.
func (o RegionOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Region) pulumi.StringPtrOutput { return v.AccountId }).(pulumi.StringPtrOutput)
}

// Whether the region is enabled.
func (o RegionOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Region) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The region opt status.
func (o RegionOutput) OptStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Region) pulumi.StringOutput { return v.OptStatus }).(pulumi.StringOutput)
}

// The region name to manage.
func (o RegionOutput) RegionName() pulumi.StringOutput {
	return o.ApplyT(func(v *Region) pulumi.StringOutput { return v.RegionName }).(pulumi.StringOutput)
}

type RegionArrayOutput struct{ *pulumi.OutputState }

func (RegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Region)(nil)).Elem()
}

func (o RegionArrayOutput) ToRegionArrayOutput() RegionArrayOutput {
	return o
}

func (o RegionArrayOutput) ToRegionArrayOutputWithContext(ctx context.Context) RegionArrayOutput {
	return o
}

func (o RegionArrayOutput) Index(i pulumi.IntInput) RegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Region {
		return vs[0].([]*Region)[vs[1].(int)]
	}).(RegionOutput)
}

type RegionMapOutput struct{ *pulumi.OutputState }

func (RegionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Region)(nil)).Elem()
}

func (o RegionMapOutput) ToRegionMapOutput() RegionMapOutput {
	return o
}

func (o RegionMapOutput) ToRegionMapOutputWithContext(ctx context.Context) RegionMapOutput {
	return o
}

func (o RegionMapOutput) MapIndex(k pulumi.StringInput) RegionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Region {
		return vs[0].(map[string]*Region)[vs[1].(string)]
	}).(RegionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegionInput)(nil)).Elem(), &Region{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionArrayInput)(nil)).Elem(), RegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionMapInput)(nil)).Elem(), RegionMap{})
	pulumi.RegisterOutputType(RegionOutput{})
	pulumi.RegisterOutputType(RegionArrayOutput{})
	pulumi.RegisterOutputType(RegionMapOutput{})
}
