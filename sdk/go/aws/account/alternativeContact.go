// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package account

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages the specified alternate contact attached to an AWS Account.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/account"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := account.NewAlternativeContact(ctx, "operations", &account.AlternativeContactArgs{
// 			AlternateContactType: pulumi.String("OPERATIONS"),
// 			EmailAddress:         pulumi.String("test@example.com"),
// 			PhoneNumber:          pulumi.String("+1234567890"),
// 			Title:                pulumi.String("Example"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// The current Alternate Contact can be imported using the `alternate_contact_type`, e.g.,
//
// ```sh
//  $ pulumi import aws:account/alternativeContact:AlternativeContact operations OPERATIONS
// ```
type AlternativeContact struct {
	pulumi.CustomResourceState

	// The type of the alternate contact. Allowed values are: `BILLING`, `OPERATIONS`, `SECURITY`.
	AlternateContactType pulumi.StringOutput `pulumi:"alternateContactType"`
	// An email address for the alternate contact.
	EmailAddress pulumi.StringOutput `pulumi:"emailAddress"`
	// The name of the alternate contact.
	Name pulumi.StringOutput `pulumi:"name"`
	// A phone number for the alternate contact.
	PhoneNumber pulumi.StringOutput `pulumi:"phoneNumber"`
	// A title for the alternate contact.
	Title pulumi.StringOutput `pulumi:"title"`
}

// NewAlternativeContact registers a new resource with the given unique name, arguments, and options.
func NewAlternativeContact(ctx *pulumi.Context,
	name string, args *AlternativeContactArgs, opts ...pulumi.ResourceOption) (*AlternativeContact, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AlternateContactType == nil {
		return nil, errors.New("invalid value for required argument 'AlternateContactType'")
	}
	if args.EmailAddress == nil {
		return nil, errors.New("invalid value for required argument 'EmailAddress'")
	}
	if args.PhoneNumber == nil {
		return nil, errors.New("invalid value for required argument 'PhoneNumber'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	var resource AlternativeContact
	err := ctx.RegisterResource("aws:account/alternativeContact:AlternativeContact", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlternativeContact gets an existing AlternativeContact resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlternativeContact(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlternativeContactState, opts ...pulumi.ResourceOption) (*AlternativeContact, error) {
	var resource AlternativeContact
	err := ctx.ReadResource("aws:account/alternativeContact:AlternativeContact", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AlternativeContact resources.
type alternativeContactState struct {
	// The type of the alternate contact. Allowed values are: `BILLING`, `OPERATIONS`, `SECURITY`.
	AlternateContactType *string `pulumi:"alternateContactType"`
	// An email address for the alternate contact.
	EmailAddress *string `pulumi:"emailAddress"`
	// The name of the alternate contact.
	Name *string `pulumi:"name"`
	// A phone number for the alternate contact.
	PhoneNumber *string `pulumi:"phoneNumber"`
	// A title for the alternate contact.
	Title *string `pulumi:"title"`
}

type AlternativeContactState struct {
	// The type of the alternate contact. Allowed values are: `BILLING`, `OPERATIONS`, `SECURITY`.
	AlternateContactType pulumi.StringPtrInput
	// An email address for the alternate contact.
	EmailAddress pulumi.StringPtrInput
	// The name of the alternate contact.
	Name pulumi.StringPtrInput
	// A phone number for the alternate contact.
	PhoneNumber pulumi.StringPtrInput
	// A title for the alternate contact.
	Title pulumi.StringPtrInput
}

func (AlternativeContactState) ElementType() reflect.Type {
	return reflect.TypeOf((*alternativeContactState)(nil)).Elem()
}

type alternativeContactArgs struct {
	// The type of the alternate contact. Allowed values are: `BILLING`, `OPERATIONS`, `SECURITY`.
	AlternateContactType string `pulumi:"alternateContactType"`
	// An email address for the alternate contact.
	EmailAddress string `pulumi:"emailAddress"`
	// The name of the alternate contact.
	Name *string `pulumi:"name"`
	// A phone number for the alternate contact.
	PhoneNumber string `pulumi:"phoneNumber"`
	// A title for the alternate contact.
	Title string `pulumi:"title"`
}

// The set of arguments for constructing a AlternativeContact resource.
type AlternativeContactArgs struct {
	// The type of the alternate contact. Allowed values are: `BILLING`, `OPERATIONS`, `SECURITY`.
	AlternateContactType pulumi.StringInput
	// An email address for the alternate contact.
	EmailAddress pulumi.StringInput
	// The name of the alternate contact.
	Name pulumi.StringPtrInput
	// A phone number for the alternate contact.
	PhoneNumber pulumi.StringInput
	// A title for the alternate contact.
	Title pulumi.StringInput
}

func (AlternativeContactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*alternativeContactArgs)(nil)).Elem()
}

type AlternativeContactInput interface {
	pulumi.Input

	ToAlternativeContactOutput() AlternativeContactOutput
	ToAlternativeContactOutputWithContext(ctx context.Context) AlternativeContactOutput
}

func (*AlternativeContact) ElementType() reflect.Type {
	return reflect.TypeOf((*AlternativeContact)(nil))
}

func (i *AlternativeContact) ToAlternativeContactOutput() AlternativeContactOutput {
	return i.ToAlternativeContactOutputWithContext(context.Background())
}

func (i *AlternativeContact) ToAlternativeContactOutputWithContext(ctx context.Context) AlternativeContactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlternativeContactOutput)
}

func (i *AlternativeContact) ToAlternativeContactPtrOutput() AlternativeContactPtrOutput {
	return i.ToAlternativeContactPtrOutputWithContext(context.Background())
}

func (i *AlternativeContact) ToAlternativeContactPtrOutputWithContext(ctx context.Context) AlternativeContactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlternativeContactPtrOutput)
}

type AlternativeContactPtrInput interface {
	pulumi.Input

	ToAlternativeContactPtrOutput() AlternativeContactPtrOutput
	ToAlternativeContactPtrOutputWithContext(ctx context.Context) AlternativeContactPtrOutput
}

type alternativeContactPtrType AlternativeContactArgs

func (*alternativeContactPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlternativeContact)(nil))
}

func (i *alternativeContactPtrType) ToAlternativeContactPtrOutput() AlternativeContactPtrOutput {
	return i.ToAlternativeContactPtrOutputWithContext(context.Background())
}

func (i *alternativeContactPtrType) ToAlternativeContactPtrOutputWithContext(ctx context.Context) AlternativeContactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlternativeContactPtrOutput)
}

// AlternativeContactArrayInput is an input type that accepts AlternativeContactArray and AlternativeContactArrayOutput values.
// You can construct a concrete instance of `AlternativeContactArrayInput` via:
//
//          AlternativeContactArray{ AlternativeContactArgs{...} }
type AlternativeContactArrayInput interface {
	pulumi.Input

	ToAlternativeContactArrayOutput() AlternativeContactArrayOutput
	ToAlternativeContactArrayOutputWithContext(context.Context) AlternativeContactArrayOutput
}

type AlternativeContactArray []AlternativeContactInput

func (AlternativeContactArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlternativeContact)(nil)).Elem()
}

func (i AlternativeContactArray) ToAlternativeContactArrayOutput() AlternativeContactArrayOutput {
	return i.ToAlternativeContactArrayOutputWithContext(context.Background())
}

func (i AlternativeContactArray) ToAlternativeContactArrayOutputWithContext(ctx context.Context) AlternativeContactArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlternativeContactArrayOutput)
}

// AlternativeContactMapInput is an input type that accepts AlternativeContactMap and AlternativeContactMapOutput values.
// You can construct a concrete instance of `AlternativeContactMapInput` via:
//
//          AlternativeContactMap{ "key": AlternativeContactArgs{...} }
type AlternativeContactMapInput interface {
	pulumi.Input

	ToAlternativeContactMapOutput() AlternativeContactMapOutput
	ToAlternativeContactMapOutputWithContext(context.Context) AlternativeContactMapOutput
}

type AlternativeContactMap map[string]AlternativeContactInput

func (AlternativeContactMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlternativeContact)(nil)).Elem()
}

func (i AlternativeContactMap) ToAlternativeContactMapOutput() AlternativeContactMapOutput {
	return i.ToAlternativeContactMapOutputWithContext(context.Background())
}

func (i AlternativeContactMap) ToAlternativeContactMapOutputWithContext(ctx context.Context) AlternativeContactMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlternativeContactMapOutput)
}

type AlternativeContactOutput struct{ *pulumi.OutputState }

func (AlternativeContactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlternativeContact)(nil))
}

func (o AlternativeContactOutput) ToAlternativeContactOutput() AlternativeContactOutput {
	return o
}

func (o AlternativeContactOutput) ToAlternativeContactOutputWithContext(ctx context.Context) AlternativeContactOutput {
	return o
}

func (o AlternativeContactOutput) ToAlternativeContactPtrOutput() AlternativeContactPtrOutput {
	return o.ToAlternativeContactPtrOutputWithContext(context.Background())
}

func (o AlternativeContactOutput) ToAlternativeContactPtrOutputWithContext(ctx context.Context) AlternativeContactPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlternativeContact) *AlternativeContact {
		return &v
	}).(AlternativeContactPtrOutput)
}

type AlternativeContactPtrOutput struct{ *pulumi.OutputState }

func (AlternativeContactPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlternativeContact)(nil))
}

func (o AlternativeContactPtrOutput) ToAlternativeContactPtrOutput() AlternativeContactPtrOutput {
	return o
}

func (o AlternativeContactPtrOutput) ToAlternativeContactPtrOutputWithContext(ctx context.Context) AlternativeContactPtrOutput {
	return o
}

func (o AlternativeContactPtrOutput) Elem() AlternativeContactOutput {
	return o.ApplyT(func(v *AlternativeContact) AlternativeContact {
		if v != nil {
			return *v
		}
		var ret AlternativeContact
		return ret
	}).(AlternativeContactOutput)
}

type AlternativeContactArrayOutput struct{ *pulumi.OutputState }

func (AlternativeContactArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlternativeContact)(nil))
}

func (o AlternativeContactArrayOutput) ToAlternativeContactArrayOutput() AlternativeContactArrayOutput {
	return o
}

func (o AlternativeContactArrayOutput) ToAlternativeContactArrayOutputWithContext(ctx context.Context) AlternativeContactArrayOutput {
	return o
}

func (o AlternativeContactArrayOutput) Index(i pulumi.IntInput) AlternativeContactOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlternativeContact {
		return vs[0].([]AlternativeContact)[vs[1].(int)]
	}).(AlternativeContactOutput)
}

type AlternativeContactMapOutput struct{ *pulumi.OutputState }

func (AlternativeContactMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AlternativeContact)(nil))
}

func (o AlternativeContactMapOutput) ToAlternativeContactMapOutput() AlternativeContactMapOutput {
	return o
}

func (o AlternativeContactMapOutput) ToAlternativeContactMapOutputWithContext(ctx context.Context) AlternativeContactMapOutput {
	return o
}

func (o AlternativeContactMapOutput) MapIndex(k pulumi.StringInput) AlternativeContactOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AlternativeContact {
		return vs[0].(map[string]AlternativeContact)[vs[1].(string)]
	}).(AlternativeContactOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlternativeContactInput)(nil)).Elem(), &AlternativeContact{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlternativeContactPtrInput)(nil)).Elem(), &AlternativeContact{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlternativeContactArrayInput)(nil)).Elem(), AlternativeContactArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlternativeContactMapInput)(nil)).Elem(), AlternativeContactMap{})
	pulumi.RegisterOutputType(AlternativeContactOutput{})
	pulumi.RegisterOutputType(AlternativeContactPtrOutput{})
	pulumi.RegisterOutputType(AlternativeContactArrayOutput{})
	pulumi.RegisterOutputType(AlternativeContactMapOutput{})
}
