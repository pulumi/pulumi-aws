// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package athena

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Athena data catalog.
//
// More information about Athena and Athena data catalogs can be found in the [Athena User Guide](https://docs.aws.amazon.com/athena/latest/ug/what-is.html).
//
// > **Tip:** for a more detailed explanation on the usage of `parameters`, see the [DataCatalog API documentation](https://docs.aws.amazon.com/athena/latest/APIReference/API_DataCatalog.html)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/athena"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := athena.NewDataCatalog(ctx, "example", &athena.DataCatalogArgs{
//				Description: pulumi.String("Example Athena data catalog"),
//				Parameters: pulumi.StringMap{
//					"function": pulumi.String("arn:aws:lambda:eu-central-1:123456789012:function:not-important-lambda-function"),
//				},
//				Tags: pulumi.StringMap{
//					"Name": pulumi.String("example-athena-data-catalog"),
//				},
//				Type: pulumi.String("LAMBDA"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Hive based Data Catalog
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/athena"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := athena.NewDataCatalog(ctx, "example", &athena.DataCatalogArgs{
//				Description: pulumi.String("Hive based Data Catalog"),
//				Parameters: pulumi.StringMap{
//					"metadata-function": pulumi.String("arn:aws:lambda:eu-central-1:123456789012:function:not-important-lambda-function"),
//				},
//				Type: pulumi.String("HIVE"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Glue based Data Catalog
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/athena"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := athena.NewDataCatalog(ctx, "example", &athena.DataCatalogArgs{
//				Description: pulumi.String("Glue based Data Catalog"),
//				Parameters: pulumi.StringMap{
//					"catalog-id": pulumi.String("123456789012"),
//				},
//				Type: pulumi.String("GLUE"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Lambda based Data Catalog
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/athena"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := athena.NewDataCatalog(ctx, "example", &athena.DataCatalogArgs{
//				Description: pulumi.String("Lambda based Data Catalog"),
//				Parameters: pulumi.StringMap{
//					"metadata-function": pulumi.String("arn:aws:lambda:eu-central-1:123456789012:function:not-important-lambda-function-1"),
//					"record-function":   pulumi.String("arn:aws:lambda:eu-central-1:123456789012:function:not-important-lambda-function-2"),
//				},
//				Type: pulumi.String("LAMBDA"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Data catalogs can be imported using their `name`, e.g.,
//
// ```sh
//
//	$ pulumi import aws:athena/dataCatalog:DataCatalog example example-data-catalog
//
// ```
type DataCatalog struct {
	pulumi.CustomResourceState

	// ARN of the data catalog.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Description of the data catalog.
	Description pulumi.StringOutput `pulumi:"description"`
	// Name of the data catalog. The catalog name must be unique for the AWS account and can use a maximum of 128 alphanumeric, underscore, at sign, or hyphen characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// Key value pairs that specifies the Lambda function or functions to use for the data catalog. The mapping used depends on the catalog type.
	Parameters pulumi.StringMapOutput `pulumi:"parameters"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// Type of data catalog: `LAMBDA` for a federated catalog, `GLUE` for AWS Glue Catalog, or `HIVE` for an external hive metastore.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDataCatalog registers a new resource with the given unique name, arguments, and options.
func NewDataCatalog(ctx *pulumi.Context,
	name string, args *DataCatalogArgs, opts ...pulumi.ResourceOption) (*DataCatalog, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource DataCatalog
	err := ctx.RegisterResource("aws:athena/dataCatalog:DataCatalog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataCatalog gets an existing DataCatalog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataCatalog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataCatalogState, opts ...pulumi.ResourceOption) (*DataCatalog, error) {
	var resource DataCatalog
	err := ctx.ReadResource("aws:athena/dataCatalog:DataCatalog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataCatalog resources.
type dataCatalogState struct {
	// ARN of the data catalog.
	Arn *string `pulumi:"arn"`
	// Description of the data catalog.
	Description *string `pulumi:"description"`
	// Name of the data catalog. The catalog name must be unique for the AWS account and can use a maximum of 128 alphanumeric, underscore, at sign, or hyphen characters.
	Name *string `pulumi:"name"`
	// Key value pairs that specifies the Lambda function or functions to use for the data catalog. The mapping used depends on the catalog type.
	Parameters map[string]string `pulumi:"parameters"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Type of data catalog: `LAMBDA` for a federated catalog, `GLUE` for AWS Glue Catalog, or `HIVE` for an external hive metastore.
	Type *string `pulumi:"type"`
}

type DataCatalogState struct {
	// ARN of the data catalog.
	Arn pulumi.StringPtrInput
	// Description of the data catalog.
	Description pulumi.StringPtrInput
	// Name of the data catalog. The catalog name must be unique for the AWS account and can use a maximum of 128 alphanumeric, underscore, at sign, or hyphen characters.
	Name pulumi.StringPtrInput
	// Key value pairs that specifies the Lambda function or functions to use for the data catalog. The mapping used depends on the catalog type.
	Parameters pulumi.StringMapInput
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapInput
	// Type of data catalog: `LAMBDA` for a federated catalog, `GLUE` for AWS Glue Catalog, or `HIVE` for an external hive metastore.
	Type pulumi.StringPtrInput
}

func (DataCatalogState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataCatalogState)(nil)).Elem()
}

type dataCatalogArgs struct {
	// Description of the data catalog.
	Description string `pulumi:"description"`
	// Name of the data catalog. The catalog name must be unique for the AWS account and can use a maximum of 128 alphanumeric, underscore, at sign, or hyphen characters.
	Name *string `pulumi:"name"`
	// Key value pairs that specifies the Lambda function or functions to use for the data catalog. The mapping used depends on the catalog type.
	Parameters map[string]string `pulumi:"parameters"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Type of data catalog: `LAMBDA` for a federated catalog, `GLUE` for AWS Glue Catalog, or `HIVE` for an external hive metastore.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a DataCatalog resource.
type DataCatalogArgs struct {
	// Description of the data catalog.
	Description pulumi.StringInput
	// Name of the data catalog. The catalog name must be unique for the AWS account and can use a maximum of 128 alphanumeric, underscore, at sign, or hyphen characters.
	Name pulumi.StringPtrInput
	// Key value pairs that specifies the Lambda function or functions to use for the data catalog. The mapping used depends on the catalog type.
	Parameters pulumi.StringMapInput
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Type of data catalog: `LAMBDA` for a federated catalog, `GLUE` for AWS Glue Catalog, or `HIVE` for an external hive metastore.
	Type pulumi.StringInput
}

func (DataCatalogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataCatalogArgs)(nil)).Elem()
}

type DataCatalogInput interface {
	pulumi.Input

	ToDataCatalogOutput() DataCatalogOutput
	ToDataCatalogOutputWithContext(ctx context.Context) DataCatalogOutput
}

func (*DataCatalog) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCatalog)(nil)).Elem()
}

func (i *DataCatalog) ToDataCatalogOutput() DataCatalogOutput {
	return i.ToDataCatalogOutputWithContext(context.Background())
}

func (i *DataCatalog) ToDataCatalogOutputWithContext(ctx context.Context) DataCatalogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCatalogOutput)
}

// DataCatalogArrayInput is an input type that accepts DataCatalogArray and DataCatalogArrayOutput values.
// You can construct a concrete instance of `DataCatalogArrayInput` via:
//
//	DataCatalogArray{ DataCatalogArgs{...} }
type DataCatalogArrayInput interface {
	pulumi.Input

	ToDataCatalogArrayOutput() DataCatalogArrayOutput
	ToDataCatalogArrayOutputWithContext(context.Context) DataCatalogArrayOutput
}

type DataCatalogArray []DataCatalogInput

func (DataCatalogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataCatalog)(nil)).Elem()
}

func (i DataCatalogArray) ToDataCatalogArrayOutput() DataCatalogArrayOutput {
	return i.ToDataCatalogArrayOutputWithContext(context.Background())
}

func (i DataCatalogArray) ToDataCatalogArrayOutputWithContext(ctx context.Context) DataCatalogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCatalogArrayOutput)
}

// DataCatalogMapInput is an input type that accepts DataCatalogMap and DataCatalogMapOutput values.
// You can construct a concrete instance of `DataCatalogMapInput` via:
//
//	DataCatalogMap{ "key": DataCatalogArgs{...} }
type DataCatalogMapInput interface {
	pulumi.Input

	ToDataCatalogMapOutput() DataCatalogMapOutput
	ToDataCatalogMapOutputWithContext(context.Context) DataCatalogMapOutput
}

type DataCatalogMap map[string]DataCatalogInput

func (DataCatalogMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataCatalog)(nil)).Elem()
}

func (i DataCatalogMap) ToDataCatalogMapOutput() DataCatalogMapOutput {
	return i.ToDataCatalogMapOutputWithContext(context.Background())
}

func (i DataCatalogMap) ToDataCatalogMapOutputWithContext(ctx context.Context) DataCatalogMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCatalogMapOutput)
}

type DataCatalogOutput struct{ *pulumi.OutputState }

func (DataCatalogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCatalog)(nil)).Elem()
}

func (o DataCatalogOutput) ToDataCatalogOutput() DataCatalogOutput {
	return o
}

func (o DataCatalogOutput) ToDataCatalogOutputWithContext(ctx context.Context) DataCatalogOutput {
	return o
}

// ARN of the data catalog.
func (o DataCatalogOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalog) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Description of the data catalog.
func (o DataCatalogOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalog) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Name of the data catalog. The catalog name must be unique for the AWS account and can use a maximum of 128 alphanumeric, underscore, at sign, or hyphen characters.
func (o DataCatalogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalog) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Key value pairs that specifies the Lambda function or functions to use for the data catalog. The mapping used depends on the catalog type.
func (o DataCatalogOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataCatalog) pulumi.StringMapOutput { return v.Parameters }).(pulumi.StringMapOutput)
}

// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o DataCatalogOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataCatalog) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o DataCatalogOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataCatalog) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// Type of data catalog: `LAMBDA` for a federated catalog, `GLUE` for AWS Glue Catalog, or `HIVE` for an external hive metastore.
func (o DataCatalogOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalog) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type DataCatalogArrayOutput struct{ *pulumi.OutputState }

func (DataCatalogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataCatalog)(nil)).Elem()
}

func (o DataCatalogArrayOutput) ToDataCatalogArrayOutput() DataCatalogArrayOutput {
	return o
}

func (o DataCatalogArrayOutput) ToDataCatalogArrayOutputWithContext(ctx context.Context) DataCatalogArrayOutput {
	return o
}

func (o DataCatalogArrayOutput) Index(i pulumi.IntInput) DataCatalogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataCatalog {
		return vs[0].([]*DataCatalog)[vs[1].(int)]
	}).(DataCatalogOutput)
}

type DataCatalogMapOutput struct{ *pulumi.OutputState }

func (DataCatalogMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataCatalog)(nil)).Elem()
}

func (o DataCatalogMapOutput) ToDataCatalogMapOutput() DataCatalogMapOutput {
	return o
}

func (o DataCatalogMapOutput) ToDataCatalogMapOutputWithContext(ctx context.Context) DataCatalogMapOutput {
	return o
}

func (o DataCatalogMapOutput) MapIndex(k pulumi.StringInput) DataCatalogOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataCatalog {
		return vs[0].(map[string]*DataCatalog)[vs[1].(string)]
	}).(DataCatalogOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataCatalogInput)(nil)).Elem(), &DataCatalog{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCatalogArrayInput)(nil)).Elem(), DataCatalogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCatalogMapInput)(nil)).Elem(), DataCatalogMap{})
	pulumi.RegisterOutputType(DataCatalogOutput{})
	pulumi.RegisterOutputType(DataCatalogArrayOutput{})
	pulumi.RegisterOutputType(DataCatalogMapOutput{})
}
