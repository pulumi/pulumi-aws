// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package athena

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DataCatalog struct {
	pulumi.CustomResourceState

	Arn         pulumi.StringOutput    `pulumi:"arn"`
	Description pulumi.StringOutput    `pulumi:"description"`
	Name        pulumi.StringOutput    `pulumi:"name"`
	Parameters  pulumi.StringMapOutput `pulumi:"parameters"`
	Tags        pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll     pulumi.StringMapOutput `pulumi:"tagsAll"`
	Type        pulumi.StringOutput    `pulumi:"type"`
}

// NewDataCatalog registers a new resource with the given unique name, arguments, and options.
func NewDataCatalog(ctx *pulumi.Context,
	name string, args *DataCatalogArgs, opts ...pulumi.ResourceOption) (*DataCatalog, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource DataCatalog
	err := ctx.RegisterResource("aws:athena/dataCatalog:DataCatalog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataCatalog gets an existing DataCatalog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataCatalog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataCatalogState, opts ...pulumi.ResourceOption) (*DataCatalog, error) {
	var resource DataCatalog
	err := ctx.ReadResource("aws:athena/dataCatalog:DataCatalog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataCatalog resources.
type dataCatalogState struct {
	Arn         *string           `pulumi:"arn"`
	Description *string           `pulumi:"description"`
	Name        *string           `pulumi:"name"`
	Parameters  map[string]string `pulumi:"parameters"`
	Tags        map[string]string `pulumi:"tags"`
	TagsAll     map[string]string `pulumi:"tagsAll"`
	Type        *string           `pulumi:"type"`
}

type DataCatalogState struct {
	Arn         pulumi.StringPtrInput
	Description pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	Parameters  pulumi.StringMapInput
	Tags        pulumi.StringMapInput
	TagsAll     pulumi.StringMapInput
	Type        pulumi.StringPtrInput
}

func (DataCatalogState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataCatalogState)(nil)).Elem()
}

type dataCatalogArgs struct {
	Description string            `pulumi:"description"`
	Name        *string           `pulumi:"name"`
	Parameters  map[string]string `pulumi:"parameters"`
	Tags        map[string]string `pulumi:"tags"`
	Type        string            `pulumi:"type"`
}

// The set of arguments for constructing a DataCatalog resource.
type DataCatalogArgs struct {
	Description pulumi.StringInput
	Name        pulumi.StringPtrInput
	Parameters  pulumi.StringMapInput
	Tags        pulumi.StringMapInput
	Type        pulumi.StringInput
}

func (DataCatalogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataCatalogArgs)(nil)).Elem()
}

type DataCatalogInput interface {
	pulumi.Input

	ToDataCatalogOutput() DataCatalogOutput
	ToDataCatalogOutputWithContext(ctx context.Context) DataCatalogOutput
}

func (*DataCatalog) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCatalog)(nil)).Elem()
}

func (i *DataCatalog) ToDataCatalogOutput() DataCatalogOutput {
	return i.ToDataCatalogOutputWithContext(context.Background())
}

func (i *DataCatalog) ToDataCatalogOutputWithContext(ctx context.Context) DataCatalogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCatalogOutput)
}

// DataCatalogArrayInput is an input type that accepts DataCatalogArray and DataCatalogArrayOutput values.
// You can construct a concrete instance of `DataCatalogArrayInput` via:
//
//	DataCatalogArray{ DataCatalogArgs{...} }
type DataCatalogArrayInput interface {
	pulumi.Input

	ToDataCatalogArrayOutput() DataCatalogArrayOutput
	ToDataCatalogArrayOutputWithContext(context.Context) DataCatalogArrayOutput
}

type DataCatalogArray []DataCatalogInput

func (DataCatalogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataCatalog)(nil)).Elem()
}

func (i DataCatalogArray) ToDataCatalogArrayOutput() DataCatalogArrayOutput {
	return i.ToDataCatalogArrayOutputWithContext(context.Background())
}

func (i DataCatalogArray) ToDataCatalogArrayOutputWithContext(ctx context.Context) DataCatalogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCatalogArrayOutput)
}

// DataCatalogMapInput is an input type that accepts DataCatalogMap and DataCatalogMapOutput values.
// You can construct a concrete instance of `DataCatalogMapInput` via:
//
//	DataCatalogMap{ "key": DataCatalogArgs{...} }
type DataCatalogMapInput interface {
	pulumi.Input

	ToDataCatalogMapOutput() DataCatalogMapOutput
	ToDataCatalogMapOutputWithContext(context.Context) DataCatalogMapOutput
}

type DataCatalogMap map[string]DataCatalogInput

func (DataCatalogMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataCatalog)(nil)).Elem()
}

func (i DataCatalogMap) ToDataCatalogMapOutput() DataCatalogMapOutput {
	return i.ToDataCatalogMapOutputWithContext(context.Background())
}

func (i DataCatalogMap) ToDataCatalogMapOutputWithContext(ctx context.Context) DataCatalogMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCatalogMapOutput)
}

type DataCatalogOutput struct{ *pulumi.OutputState }

func (DataCatalogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCatalog)(nil)).Elem()
}

func (o DataCatalogOutput) ToDataCatalogOutput() DataCatalogOutput {
	return o
}

func (o DataCatalogOutput) ToDataCatalogOutputWithContext(ctx context.Context) DataCatalogOutput {
	return o
}

func (o DataCatalogOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalog) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o DataCatalogOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalog) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o DataCatalogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalog) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DataCatalogOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataCatalog) pulumi.StringMapOutput { return v.Parameters }).(pulumi.StringMapOutput)
}

func (o DataCatalogOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataCatalog) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o DataCatalogOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataCatalog) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o DataCatalogOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DataCatalog) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type DataCatalogArrayOutput struct{ *pulumi.OutputState }

func (DataCatalogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataCatalog)(nil)).Elem()
}

func (o DataCatalogArrayOutput) ToDataCatalogArrayOutput() DataCatalogArrayOutput {
	return o
}

func (o DataCatalogArrayOutput) ToDataCatalogArrayOutputWithContext(ctx context.Context) DataCatalogArrayOutput {
	return o
}

func (o DataCatalogArrayOutput) Index(i pulumi.IntInput) DataCatalogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataCatalog {
		return vs[0].([]*DataCatalog)[vs[1].(int)]
	}).(DataCatalogOutput)
}

type DataCatalogMapOutput struct{ *pulumi.OutputState }

func (DataCatalogMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataCatalog)(nil)).Elem()
}

func (o DataCatalogMapOutput) ToDataCatalogMapOutput() DataCatalogMapOutput {
	return o
}

func (o DataCatalogMapOutput) ToDataCatalogMapOutputWithContext(ctx context.Context) DataCatalogMapOutput {
	return o
}

func (o DataCatalogMapOutput) MapIndex(k pulumi.StringInput) DataCatalogOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataCatalog {
		return vs[0].(map[string]*DataCatalog)[vs[1].(string)]
	}).(DataCatalogOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataCatalogInput)(nil)).Elem(), &DataCatalog{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCatalogArrayInput)(nil)).Elem(), DataCatalogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCatalogMapInput)(nil)).Elem(), DataCatalogMap{})
	pulumi.RegisterOutputType(DataCatalogOutput{})
	pulumi.RegisterOutputType(DataCatalogArrayOutput{})
	pulumi.RegisterOutputType(DataCatalogMapOutput{})
}
