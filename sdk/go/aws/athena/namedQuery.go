// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package athena

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NamedQuery struct {
	pulumi.CustomResourceState

	Database    pulumi.StringOutput    `pulumi:"database"`
	Description pulumi.StringPtrOutput `pulumi:"description"`
	Name        pulumi.StringOutput    `pulumi:"name"`
	Query       pulumi.StringOutput    `pulumi:"query"`
	Workgroup   pulumi.StringPtrOutput `pulumi:"workgroup"`
}

// NewNamedQuery registers a new resource with the given unique name, arguments, and options.
func NewNamedQuery(ctx *pulumi.Context,
	name string, args *NamedQueryArgs, opts ...pulumi.ResourceOption) (*NamedQuery, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.Query == nil {
		return nil, errors.New("invalid value for required argument 'Query'")
	}
	var resource NamedQuery
	err := ctx.RegisterResource("aws:athena/namedQuery:NamedQuery", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNamedQuery gets an existing NamedQuery resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNamedQuery(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NamedQueryState, opts ...pulumi.ResourceOption) (*NamedQuery, error) {
	var resource NamedQuery
	err := ctx.ReadResource("aws:athena/namedQuery:NamedQuery", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NamedQuery resources.
type namedQueryState struct {
	Database    *string `pulumi:"database"`
	Description *string `pulumi:"description"`
	Name        *string `pulumi:"name"`
	Query       *string `pulumi:"query"`
	Workgroup   *string `pulumi:"workgroup"`
}

type NamedQueryState struct {
	Database    pulumi.StringPtrInput
	Description pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	Query       pulumi.StringPtrInput
	Workgroup   pulumi.StringPtrInput
}

func (NamedQueryState) ElementType() reflect.Type {
	return reflect.TypeOf((*namedQueryState)(nil)).Elem()
}

type namedQueryArgs struct {
	Database    string  `pulumi:"database"`
	Description *string `pulumi:"description"`
	Name        *string `pulumi:"name"`
	Query       string  `pulumi:"query"`
	Workgroup   *string `pulumi:"workgroup"`
}

// The set of arguments for constructing a NamedQuery resource.
type NamedQueryArgs struct {
	Database    pulumi.StringInput
	Description pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	Query       pulumi.StringInput
	Workgroup   pulumi.StringPtrInput
}

func (NamedQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*namedQueryArgs)(nil)).Elem()
}

type NamedQueryInput interface {
	pulumi.Input

	ToNamedQueryOutput() NamedQueryOutput
	ToNamedQueryOutputWithContext(ctx context.Context) NamedQueryOutput
}

func (*NamedQuery) ElementType() reflect.Type {
	return reflect.TypeOf((**NamedQuery)(nil)).Elem()
}

func (i *NamedQuery) ToNamedQueryOutput() NamedQueryOutput {
	return i.ToNamedQueryOutputWithContext(context.Background())
}

func (i *NamedQuery) ToNamedQueryOutputWithContext(ctx context.Context) NamedQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedQueryOutput)
}

// NamedQueryArrayInput is an input type that accepts NamedQueryArray and NamedQueryArrayOutput values.
// You can construct a concrete instance of `NamedQueryArrayInput` via:
//
//	NamedQueryArray{ NamedQueryArgs{...} }
type NamedQueryArrayInput interface {
	pulumi.Input

	ToNamedQueryArrayOutput() NamedQueryArrayOutput
	ToNamedQueryArrayOutputWithContext(context.Context) NamedQueryArrayOutput
}

type NamedQueryArray []NamedQueryInput

func (NamedQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NamedQuery)(nil)).Elem()
}

func (i NamedQueryArray) ToNamedQueryArrayOutput() NamedQueryArrayOutput {
	return i.ToNamedQueryArrayOutputWithContext(context.Background())
}

func (i NamedQueryArray) ToNamedQueryArrayOutputWithContext(ctx context.Context) NamedQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedQueryArrayOutput)
}

// NamedQueryMapInput is an input type that accepts NamedQueryMap and NamedQueryMapOutput values.
// You can construct a concrete instance of `NamedQueryMapInput` via:
//
//	NamedQueryMap{ "key": NamedQueryArgs{...} }
type NamedQueryMapInput interface {
	pulumi.Input

	ToNamedQueryMapOutput() NamedQueryMapOutput
	ToNamedQueryMapOutputWithContext(context.Context) NamedQueryMapOutput
}

type NamedQueryMap map[string]NamedQueryInput

func (NamedQueryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NamedQuery)(nil)).Elem()
}

func (i NamedQueryMap) ToNamedQueryMapOutput() NamedQueryMapOutput {
	return i.ToNamedQueryMapOutputWithContext(context.Background())
}

func (i NamedQueryMap) ToNamedQueryMapOutputWithContext(ctx context.Context) NamedQueryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedQueryMapOutput)
}

type NamedQueryOutput struct{ *pulumi.OutputState }

func (NamedQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamedQuery)(nil)).Elem()
}

func (o NamedQueryOutput) ToNamedQueryOutput() NamedQueryOutput {
	return o
}

func (o NamedQueryOutput) ToNamedQueryOutputWithContext(ctx context.Context) NamedQueryOutput {
	return o
}

func (o NamedQueryOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *NamedQuery) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

func (o NamedQueryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamedQuery) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o NamedQueryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NamedQuery) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o NamedQueryOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v *NamedQuery) pulumi.StringOutput { return v.Query }).(pulumi.StringOutput)
}

func (o NamedQueryOutput) Workgroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamedQuery) pulumi.StringPtrOutput { return v.Workgroup }).(pulumi.StringPtrOutput)
}

type NamedQueryArrayOutput struct{ *pulumi.OutputState }

func (NamedQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NamedQuery)(nil)).Elem()
}

func (o NamedQueryArrayOutput) ToNamedQueryArrayOutput() NamedQueryArrayOutput {
	return o
}

func (o NamedQueryArrayOutput) ToNamedQueryArrayOutputWithContext(ctx context.Context) NamedQueryArrayOutput {
	return o
}

func (o NamedQueryArrayOutput) Index(i pulumi.IntInput) NamedQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NamedQuery {
		return vs[0].([]*NamedQuery)[vs[1].(int)]
	}).(NamedQueryOutput)
}

type NamedQueryMapOutput struct{ *pulumi.OutputState }

func (NamedQueryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NamedQuery)(nil)).Elem()
}

func (o NamedQueryMapOutput) ToNamedQueryMapOutput() NamedQueryMapOutput {
	return o
}

func (o NamedQueryMapOutput) ToNamedQueryMapOutputWithContext(ctx context.Context) NamedQueryMapOutput {
	return o
}

func (o NamedQueryMapOutput) MapIndex(k pulumi.StringInput) NamedQueryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NamedQuery {
		return vs[0].(map[string]*NamedQuery)[vs[1].(string)]
	}).(NamedQueryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NamedQueryInput)(nil)).Elem(), &NamedQuery{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedQueryArrayInput)(nil)).Elem(), NamedQueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamedQueryMapInput)(nil)).Elem(), NamedQueryMap{})
	pulumi.RegisterOutputType(NamedQueryOutput{})
	pulumi.RegisterOutputType(NamedQueryArrayOutput{})
	pulumi.RegisterOutputType(NamedQueryMapOutput{})
}
