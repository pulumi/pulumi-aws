// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package athena

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Athena Named Query data source.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/athena"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := athena.LookupNamedQuery(ctx, &athena.LookupNamedQueryArgs{
//				Name: "athenaQueryName",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupNamedQuery(ctx *pulumi.Context, args *LookupNamedQueryArgs, opts ...pulumi.InvokeOption) (*LookupNamedQueryResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNamedQueryResult
	err := ctx.Invoke("aws:athena/getNamedQuery:getNamedQuery", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNamedQuery.
type LookupNamedQueryArgs struct {
	// The plain language name for the query. Maximum length of 128.
	Name string `pulumi:"name"`
	// The workgroup to which the query belongs. Defaults to `primary`.
	Workgroup *string `pulumi:"workgroup"`
}

// A collection of values returned by getNamedQuery.
type LookupNamedQueryResult struct {
	// Database to which the query belongs.
	Database string `pulumi:"database"`
	// Brief explanation of the query.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id          string  `pulumi:"id"`
	Name        string  `pulumi:"name"`
	Querystring string  `pulumi:"querystring"`
	Workgroup   *string `pulumi:"workgroup"`
}

func LookupNamedQueryOutput(ctx *pulumi.Context, args LookupNamedQueryOutputArgs, opts ...pulumi.InvokeOption) LookupNamedQueryResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNamedQueryResult, error) {
			args := v.(LookupNamedQueryArgs)
			r, err := LookupNamedQuery(ctx, &args, opts...)
			var s LookupNamedQueryResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupNamedQueryResultOutput)
}

// A collection of arguments for invoking getNamedQuery.
type LookupNamedQueryOutputArgs struct {
	// The plain language name for the query. Maximum length of 128.
	Name pulumi.StringInput `pulumi:"name"`
	// The workgroup to which the query belongs. Defaults to `primary`.
	Workgroup pulumi.StringPtrInput `pulumi:"workgroup"`
}

func (LookupNamedQueryOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNamedQueryArgs)(nil)).Elem()
}

// A collection of values returned by getNamedQuery.
type LookupNamedQueryResultOutput struct{ *pulumi.OutputState }

func (LookupNamedQueryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNamedQueryResult)(nil)).Elem()
}

func (o LookupNamedQueryResultOutput) ToLookupNamedQueryResultOutput() LookupNamedQueryResultOutput {
	return o
}

func (o LookupNamedQueryResultOutput) ToLookupNamedQueryResultOutputWithContext(ctx context.Context) LookupNamedQueryResultOutput {
	return o
}

// Database to which the query belongs.
func (o LookupNamedQueryResultOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNamedQueryResult) string { return v.Database }).(pulumi.StringOutput)
}

// Brief explanation of the query.
func (o LookupNamedQueryResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNamedQueryResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupNamedQueryResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNamedQueryResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupNamedQueryResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNamedQueryResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupNamedQueryResultOutput) Querystring() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNamedQueryResult) string { return v.Querystring }).(pulumi.StringOutput)
}

func (o LookupNamedQueryResultOutput) Workgroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNamedQueryResult) *string { return v.Workgroup }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNamedQueryResultOutput{})
}
