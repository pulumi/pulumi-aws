// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package athena

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an Athena Prepared Statement.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/athena"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/s3"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testBucketV2, err := s3.NewBucketV2(ctx, "testBucketV2", &s3.BucketV2Args{
//				ForceDestroy: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			testWorkgroup, err := athena.NewWorkgroup(ctx, "testWorkgroup", nil)
//			if err != nil {
//				return err
//			}
//			testDatabase, err := athena.NewDatabase(ctx, "testDatabase", &athena.DatabaseArgs{
//				Name:   pulumi.String("example"),
//				Bucket: testBucketV2.Bucket,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = athena.NewPreparedStatement(ctx, "testPreparedStatement", &athena.PreparedStatementArgs{
//				QueryStatement: testDatabase.Name.ApplyT(func(name string) (string, error) {
//					return fmt.Sprintf("SELECT * FROM %v WHERE x = ?", name), nil
//				}).(pulumi.StringOutput),
//				Workgroup: testWorkgroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Athena Prepared Statement using the `WORKGROUP-NAME/STATEMENT-NAME`. For example:
//
// ```sh
//
//	$ pulumi import aws:athena/preparedStatement:PreparedStatement example 12345abcde/example
//
// ```
type PreparedStatement struct {
	pulumi.CustomResourceState

	// Brief explanation of prepared statement. Maximum length of 1024.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the prepared statement. Maximum length of 256.
	Name pulumi.StringOutput `pulumi:"name"`
	// The query string for the prepared statement.
	QueryStatement pulumi.StringOutput `pulumi:"queryStatement"`
	// The name of the workgroup to which the prepared statement belongs.
	Workgroup pulumi.StringOutput `pulumi:"workgroup"`
}

// NewPreparedStatement registers a new resource with the given unique name, arguments, and options.
func NewPreparedStatement(ctx *pulumi.Context,
	name string, args *PreparedStatementArgs, opts ...pulumi.ResourceOption) (*PreparedStatement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.QueryStatement == nil {
		return nil, errors.New("invalid value for required argument 'QueryStatement'")
	}
	if args.Workgroup == nil {
		return nil, errors.New("invalid value for required argument 'Workgroup'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PreparedStatement
	err := ctx.RegisterResource("aws:athena/preparedStatement:PreparedStatement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPreparedStatement gets an existing PreparedStatement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPreparedStatement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PreparedStatementState, opts ...pulumi.ResourceOption) (*PreparedStatement, error) {
	var resource PreparedStatement
	err := ctx.ReadResource("aws:athena/preparedStatement:PreparedStatement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PreparedStatement resources.
type preparedStatementState struct {
	// Brief explanation of prepared statement. Maximum length of 1024.
	Description *string `pulumi:"description"`
	// The name of the prepared statement. Maximum length of 256.
	Name *string `pulumi:"name"`
	// The query string for the prepared statement.
	QueryStatement *string `pulumi:"queryStatement"`
	// The name of the workgroup to which the prepared statement belongs.
	Workgroup *string `pulumi:"workgroup"`
}

type PreparedStatementState struct {
	// Brief explanation of prepared statement. Maximum length of 1024.
	Description pulumi.StringPtrInput
	// The name of the prepared statement. Maximum length of 256.
	Name pulumi.StringPtrInput
	// The query string for the prepared statement.
	QueryStatement pulumi.StringPtrInput
	// The name of the workgroup to which the prepared statement belongs.
	Workgroup pulumi.StringPtrInput
}

func (PreparedStatementState) ElementType() reflect.Type {
	return reflect.TypeOf((*preparedStatementState)(nil)).Elem()
}

type preparedStatementArgs struct {
	// Brief explanation of prepared statement. Maximum length of 1024.
	Description *string `pulumi:"description"`
	// The name of the prepared statement. Maximum length of 256.
	Name *string `pulumi:"name"`
	// The query string for the prepared statement.
	QueryStatement string `pulumi:"queryStatement"`
	// The name of the workgroup to which the prepared statement belongs.
	Workgroup string `pulumi:"workgroup"`
}

// The set of arguments for constructing a PreparedStatement resource.
type PreparedStatementArgs struct {
	// Brief explanation of prepared statement. Maximum length of 1024.
	Description pulumi.StringPtrInput
	// The name of the prepared statement. Maximum length of 256.
	Name pulumi.StringPtrInput
	// The query string for the prepared statement.
	QueryStatement pulumi.StringInput
	// The name of the workgroup to which the prepared statement belongs.
	Workgroup pulumi.StringInput
}

func (PreparedStatementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*preparedStatementArgs)(nil)).Elem()
}

type PreparedStatementInput interface {
	pulumi.Input

	ToPreparedStatementOutput() PreparedStatementOutput
	ToPreparedStatementOutputWithContext(ctx context.Context) PreparedStatementOutput
}

func (*PreparedStatement) ElementType() reflect.Type {
	return reflect.TypeOf((**PreparedStatement)(nil)).Elem()
}

func (i *PreparedStatement) ToPreparedStatementOutput() PreparedStatementOutput {
	return i.ToPreparedStatementOutputWithContext(context.Background())
}

func (i *PreparedStatement) ToPreparedStatementOutputWithContext(ctx context.Context) PreparedStatementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreparedStatementOutput)
}

// PreparedStatementArrayInput is an input type that accepts PreparedStatementArray and PreparedStatementArrayOutput values.
// You can construct a concrete instance of `PreparedStatementArrayInput` via:
//
//	PreparedStatementArray{ PreparedStatementArgs{...} }
type PreparedStatementArrayInput interface {
	pulumi.Input

	ToPreparedStatementArrayOutput() PreparedStatementArrayOutput
	ToPreparedStatementArrayOutputWithContext(context.Context) PreparedStatementArrayOutput
}

type PreparedStatementArray []PreparedStatementInput

func (PreparedStatementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PreparedStatement)(nil)).Elem()
}

func (i PreparedStatementArray) ToPreparedStatementArrayOutput() PreparedStatementArrayOutput {
	return i.ToPreparedStatementArrayOutputWithContext(context.Background())
}

func (i PreparedStatementArray) ToPreparedStatementArrayOutputWithContext(ctx context.Context) PreparedStatementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreparedStatementArrayOutput)
}

// PreparedStatementMapInput is an input type that accepts PreparedStatementMap and PreparedStatementMapOutput values.
// You can construct a concrete instance of `PreparedStatementMapInput` via:
//
//	PreparedStatementMap{ "key": PreparedStatementArgs{...} }
type PreparedStatementMapInput interface {
	pulumi.Input

	ToPreparedStatementMapOutput() PreparedStatementMapOutput
	ToPreparedStatementMapOutputWithContext(context.Context) PreparedStatementMapOutput
}

type PreparedStatementMap map[string]PreparedStatementInput

func (PreparedStatementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PreparedStatement)(nil)).Elem()
}

func (i PreparedStatementMap) ToPreparedStatementMapOutput() PreparedStatementMapOutput {
	return i.ToPreparedStatementMapOutputWithContext(context.Background())
}

func (i PreparedStatementMap) ToPreparedStatementMapOutputWithContext(ctx context.Context) PreparedStatementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreparedStatementMapOutput)
}

type PreparedStatementOutput struct{ *pulumi.OutputState }

func (PreparedStatementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PreparedStatement)(nil)).Elem()
}

func (o PreparedStatementOutput) ToPreparedStatementOutput() PreparedStatementOutput {
	return o
}

func (o PreparedStatementOutput) ToPreparedStatementOutputWithContext(ctx context.Context) PreparedStatementOutput {
	return o
}

// Brief explanation of prepared statement. Maximum length of 1024.
func (o PreparedStatementOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PreparedStatement) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the prepared statement. Maximum length of 256.
func (o PreparedStatementOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PreparedStatement) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The query string for the prepared statement.
func (o PreparedStatementOutput) QueryStatement() pulumi.StringOutput {
	return o.ApplyT(func(v *PreparedStatement) pulumi.StringOutput { return v.QueryStatement }).(pulumi.StringOutput)
}

// The name of the workgroup to which the prepared statement belongs.
func (o PreparedStatementOutput) Workgroup() pulumi.StringOutput {
	return o.ApplyT(func(v *PreparedStatement) pulumi.StringOutput { return v.Workgroup }).(pulumi.StringOutput)
}

type PreparedStatementArrayOutput struct{ *pulumi.OutputState }

func (PreparedStatementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PreparedStatement)(nil)).Elem()
}

func (o PreparedStatementArrayOutput) ToPreparedStatementArrayOutput() PreparedStatementArrayOutput {
	return o
}

func (o PreparedStatementArrayOutput) ToPreparedStatementArrayOutputWithContext(ctx context.Context) PreparedStatementArrayOutput {
	return o
}

func (o PreparedStatementArrayOutput) Index(i pulumi.IntInput) PreparedStatementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PreparedStatement {
		return vs[0].([]*PreparedStatement)[vs[1].(int)]
	}).(PreparedStatementOutput)
}

type PreparedStatementMapOutput struct{ *pulumi.OutputState }

func (PreparedStatementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PreparedStatement)(nil)).Elem()
}

func (o PreparedStatementMapOutput) ToPreparedStatementMapOutput() PreparedStatementMapOutput {
	return o
}

func (o PreparedStatementMapOutput) ToPreparedStatementMapOutputWithContext(ctx context.Context) PreparedStatementMapOutput {
	return o
}

func (o PreparedStatementMapOutput) MapIndex(k pulumi.StringInput) PreparedStatementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PreparedStatement {
		return vs[0].(map[string]*PreparedStatement)[vs[1].(string)]
	}).(PreparedStatementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PreparedStatementInput)(nil)).Elem(), &PreparedStatement{})
	pulumi.RegisterInputType(reflect.TypeOf((*PreparedStatementArrayInput)(nil)).Elem(), PreparedStatementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PreparedStatementMapInput)(nil)).Elem(), PreparedStatementMap{})
	pulumi.RegisterOutputType(PreparedStatementOutput{})
	pulumi.RegisterOutputType(PreparedStatementArrayOutput{})
	pulumi.RegisterOutputType(PreparedStatementMapOutput{})
}
