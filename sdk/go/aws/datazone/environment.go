// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datazone

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS DataZone Environment.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/datazone"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datazone.NewEnvironment(ctx, "example", &datazone.EnvironmentArgs{
//				Name:                pulumi.String("example"),
//				AccountIdentifier:   pulumi.Any(test.AccountId),
//				AccountRegion:       pulumi.Any(testAwsRegion.Name),
//				BlueprintIdentifier: pulumi.Any(testAwsDatazoneEnvironmentBlueprintConfiguration.EnvironmentBlueprintId),
//				ProfileIdentifier:   pulumi.Any(testAwsDatazoneEnvironmentProfile.Id),
//				ProjectIdentifier:   pulumi.Any(testAwsDatazoneProject.Id),
//				DomainIdentifier:    pulumi.Any(testAwsDatazoneDomain.Id),
//				UserParameters: datazone.EnvironmentUserParameterArray{
//					&datazone.EnvironmentUserParameterArgs{
//						Name:  pulumi.String("consumerGlueDbName"),
//						Value: pulumi.String("consumer"),
//					},
//					&datazone.EnvironmentUserParameterArgs{
//						Name:  pulumi.String("producerGlueDbName"),
//						Value: pulumi.String("producer"),
//					},
//					&datazone.EnvironmentUserParameterArgs{
//						Name:  pulumi.String("workgroupName"),
//						Value: pulumi.String("workgroup"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import DataZone Environment using the `domain_idntifier,id`. For example:
//
// ```sh
// $ pulumi import aws:datazone/environment:Environment example dzd_d2i7tzk3tnjjf4,5vpywijpwryec0
// ```
type Environment struct {
	pulumi.CustomResourceState

	// The ID of the Amazon Web Services account where the environment exists
	AccountIdentifier pulumi.StringOutput `pulumi:"accountIdentifier"`
	// The Amazon Web Services region where the environment exists.
	AccountRegion pulumi.StringOutput `pulumi:"accountRegion"`
	// The blueprint with which the environment is created.
	BlueprintIdentifier pulumi.StringOutput `pulumi:"blueprintIdentifier"`
	// The time the environment was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The user who created the environment.
	CreatedBy   pulumi.StringOutput    `pulumi:"createdBy"`
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The ID of the domain where the environment exists.
	DomainIdentifier pulumi.StringOutput `pulumi:"domainIdentifier"`
	// The business glossary terms that can be used in this environment.
	GlossaryTerms pulumi.StringArrayOutput `pulumi:"glossaryTerms"`
	// The details of the last deployment of the environment.
	LastDeployments EnvironmentLastDeploymentArrayOutput `pulumi:"lastDeployments"`
	// The name of the environment.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the profile with which the environment is created.
	ProfileIdentifier pulumi.StringOutput `pulumi:"profileIdentifier"`
	// The ID of the project where the environment exists.
	//
	// The following arguments are optional:
	ProjectIdentifier pulumi.StringOutput `pulumi:"projectIdentifier"`
	// The provider of the environment.
	ProviderEnvironment  pulumi.StringOutput                       `pulumi:"providerEnvironment"`
	ProvisionedResources EnvironmentProvisionedResourceArrayOutput `pulumi:"provisionedResources"`
	Timeouts             EnvironmentTimeoutsPtrOutput              `pulumi:"timeouts"`
	// The user parameters that are used in the environment. See User Parameters for more information.
	UserParameters EnvironmentUserParameterArrayOutput `pulumi:"userParameters"`
}

// NewEnvironment registers a new resource with the given unique name, arguments, and options.
func NewEnvironment(ctx *pulumi.Context,
	name string, args *EnvironmentArgs, opts ...pulumi.ResourceOption) (*Environment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'DomainIdentifier'")
	}
	if args.ProfileIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'ProfileIdentifier'")
	}
	if args.ProjectIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'ProjectIdentifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Environment
	err := ctx.RegisterResource("aws:datazone/environment:Environment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvironment gets an existing Environment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvironment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnvironmentState, opts ...pulumi.ResourceOption) (*Environment, error) {
	var resource Environment
	err := ctx.ReadResource("aws:datazone/environment:Environment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Environment resources.
type environmentState struct {
	// The ID of the Amazon Web Services account where the environment exists
	AccountIdentifier *string `pulumi:"accountIdentifier"`
	// The Amazon Web Services region where the environment exists.
	AccountRegion *string `pulumi:"accountRegion"`
	// The blueprint with which the environment is created.
	BlueprintIdentifier *string `pulumi:"blueprintIdentifier"`
	// The time the environment was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The user who created the environment.
	CreatedBy   *string `pulumi:"createdBy"`
	Description *string `pulumi:"description"`
	// The ID of the domain where the environment exists.
	DomainIdentifier *string `pulumi:"domainIdentifier"`
	// The business glossary terms that can be used in this environment.
	GlossaryTerms []string `pulumi:"glossaryTerms"`
	// The details of the last deployment of the environment.
	LastDeployments []EnvironmentLastDeployment `pulumi:"lastDeployments"`
	// The name of the environment.
	Name *string `pulumi:"name"`
	// The ID of the profile with which the environment is created.
	ProfileIdentifier *string `pulumi:"profileIdentifier"`
	// The ID of the project where the environment exists.
	//
	// The following arguments are optional:
	ProjectIdentifier *string `pulumi:"projectIdentifier"`
	// The provider of the environment.
	ProviderEnvironment  *string                          `pulumi:"providerEnvironment"`
	ProvisionedResources []EnvironmentProvisionedResource `pulumi:"provisionedResources"`
	Timeouts             *EnvironmentTimeouts             `pulumi:"timeouts"`
	// The user parameters that are used in the environment. See User Parameters for more information.
	UserParameters []EnvironmentUserParameter `pulumi:"userParameters"`
}

type EnvironmentState struct {
	// The ID of the Amazon Web Services account where the environment exists
	AccountIdentifier pulumi.StringPtrInput
	// The Amazon Web Services region where the environment exists.
	AccountRegion pulumi.StringPtrInput
	// The blueprint with which the environment is created.
	BlueprintIdentifier pulumi.StringPtrInput
	// The time the environment was created.
	CreatedAt pulumi.StringPtrInput
	// The user who created the environment.
	CreatedBy   pulumi.StringPtrInput
	Description pulumi.StringPtrInput
	// The ID of the domain where the environment exists.
	DomainIdentifier pulumi.StringPtrInput
	// The business glossary terms that can be used in this environment.
	GlossaryTerms pulumi.StringArrayInput
	// The details of the last deployment of the environment.
	LastDeployments EnvironmentLastDeploymentArrayInput
	// The name of the environment.
	Name pulumi.StringPtrInput
	// The ID of the profile with which the environment is created.
	ProfileIdentifier pulumi.StringPtrInput
	// The ID of the project where the environment exists.
	//
	// The following arguments are optional:
	ProjectIdentifier pulumi.StringPtrInput
	// The provider of the environment.
	ProviderEnvironment  pulumi.StringPtrInput
	ProvisionedResources EnvironmentProvisionedResourceArrayInput
	Timeouts             EnvironmentTimeoutsPtrInput
	// The user parameters that are used in the environment. See User Parameters for more information.
	UserParameters EnvironmentUserParameterArrayInput
}

func (EnvironmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentState)(nil)).Elem()
}

type environmentArgs struct {
	// The ID of the Amazon Web Services account where the environment exists
	AccountIdentifier *string `pulumi:"accountIdentifier"`
	// The Amazon Web Services region where the environment exists.
	AccountRegion *string `pulumi:"accountRegion"`
	// The blueprint with which the environment is created.
	BlueprintIdentifier *string `pulumi:"blueprintIdentifier"`
	Description         *string `pulumi:"description"`
	// The ID of the domain where the environment exists.
	DomainIdentifier string `pulumi:"domainIdentifier"`
	// The business glossary terms that can be used in this environment.
	GlossaryTerms []string `pulumi:"glossaryTerms"`
	// The name of the environment.
	Name *string `pulumi:"name"`
	// The ID of the profile with which the environment is created.
	ProfileIdentifier string `pulumi:"profileIdentifier"`
	// The ID of the project where the environment exists.
	//
	// The following arguments are optional:
	ProjectIdentifier string               `pulumi:"projectIdentifier"`
	Timeouts          *EnvironmentTimeouts `pulumi:"timeouts"`
	// The user parameters that are used in the environment. See User Parameters for more information.
	UserParameters []EnvironmentUserParameter `pulumi:"userParameters"`
}

// The set of arguments for constructing a Environment resource.
type EnvironmentArgs struct {
	// The ID of the Amazon Web Services account where the environment exists
	AccountIdentifier pulumi.StringPtrInput
	// The Amazon Web Services region where the environment exists.
	AccountRegion pulumi.StringPtrInput
	// The blueprint with which the environment is created.
	BlueprintIdentifier pulumi.StringPtrInput
	Description         pulumi.StringPtrInput
	// The ID of the domain where the environment exists.
	DomainIdentifier pulumi.StringInput
	// The business glossary terms that can be used in this environment.
	GlossaryTerms pulumi.StringArrayInput
	// The name of the environment.
	Name pulumi.StringPtrInput
	// The ID of the profile with which the environment is created.
	ProfileIdentifier pulumi.StringInput
	// The ID of the project where the environment exists.
	//
	// The following arguments are optional:
	ProjectIdentifier pulumi.StringInput
	Timeouts          EnvironmentTimeoutsPtrInput
	// The user parameters that are used in the environment. See User Parameters for more information.
	UserParameters EnvironmentUserParameterArrayInput
}

func (EnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentArgs)(nil)).Elem()
}

type EnvironmentInput interface {
	pulumi.Input

	ToEnvironmentOutput() EnvironmentOutput
	ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput
}

func (*Environment) ElementType() reflect.Type {
	return reflect.TypeOf((**Environment)(nil)).Elem()
}

func (i *Environment) ToEnvironmentOutput() EnvironmentOutput {
	return i.ToEnvironmentOutputWithContext(context.Background())
}

func (i *Environment) ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentOutput)
}

// EnvironmentArrayInput is an input type that accepts EnvironmentArray and EnvironmentArrayOutput values.
// You can construct a concrete instance of `EnvironmentArrayInput` via:
//
//	EnvironmentArray{ EnvironmentArgs{...} }
type EnvironmentArrayInput interface {
	pulumi.Input

	ToEnvironmentArrayOutput() EnvironmentArrayOutput
	ToEnvironmentArrayOutputWithContext(context.Context) EnvironmentArrayOutput
}

type EnvironmentArray []EnvironmentInput

func (EnvironmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Environment)(nil)).Elem()
}

func (i EnvironmentArray) ToEnvironmentArrayOutput() EnvironmentArrayOutput {
	return i.ToEnvironmentArrayOutputWithContext(context.Background())
}

func (i EnvironmentArray) ToEnvironmentArrayOutputWithContext(ctx context.Context) EnvironmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentArrayOutput)
}

// EnvironmentMapInput is an input type that accepts EnvironmentMap and EnvironmentMapOutput values.
// You can construct a concrete instance of `EnvironmentMapInput` via:
//
//	EnvironmentMap{ "key": EnvironmentArgs{...} }
type EnvironmentMapInput interface {
	pulumi.Input

	ToEnvironmentMapOutput() EnvironmentMapOutput
	ToEnvironmentMapOutputWithContext(context.Context) EnvironmentMapOutput
}

type EnvironmentMap map[string]EnvironmentInput

func (EnvironmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Environment)(nil)).Elem()
}

func (i EnvironmentMap) ToEnvironmentMapOutput() EnvironmentMapOutput {
	return i.ToEnvironmentMapOutputWithContext(context.Background())
}

func (i EnvironmentMap) ToEnvironmentMapOutputWithContext(ctx context.Context) EnvironmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentMapOutput)
}

type EnvironmentOutput struct{ *pulumi.OutputState }

func (EnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Environment)(nil)).Elem()
}

func (o EnvironmentOutput) ToEnvironmentOutput() EnvironmentOutput {
	return o
}

func (o EnvironmentOutput) ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput {
	return o
}

// The ID of the Amazon Web Services account where the environment exists
func (o EnvironmentOutput) AccountIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.AccountIdentifier }).(pulumi.StringOutput)
}

// The Amazon Web Services region where the environment exists.
func (o EnvironmentOutput) AccountRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.AccountRegion }).(pulumi.StringOutput)
}

// The blueprint with which the environment is created.
func (o EnvironmentOutput) BlueprintIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.BlueprintIdentifier }).(pulumi.StringOutput)
}

// The time the environment was created.
func (o EnvironmentOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The user who created the environment.
func (o EnvironmentOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

func (o EnvironmentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The ID of the domain where the environment exists.
func (o EnvironmentOutput) DomainIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.DomainIdentifier }).(pulumi.StringOutput)
}

// The business glossary terms that can be used in this environment.
func (o EnvironmentOutput) GlossaryTerms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringArrayOutput { return v.GlossaryTerms }).(pulumi.StringArrayOutput)
}

// The details of the last deployment of the environment.
func (o EnvironmentOutput) LastDeployments() EnvironmentLastDeploymentArrayOutput {
	return o.ApplyT(func(v *Environment) EnvironmentLastDeploymentArrayOutput { return v.LastDeployments }).(EnvironmentLastDeploymentArrayOutput)
}

// The name of the environment.
func (o EnvironmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the profile with which the environment is created.
func (o EnvironmentOutput) ProfileIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.ProfileIdentifier }).(pulumi.StringOutput)
}

// The ID of the project where the environment exists.
//
// The following arguments are optional:
func (o EnvironmentOutput) ProjectIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.ProjectIdentifier }).(pulumi.StringOutput)
}

// The provider of the environment.
func (o EnvironmentOutput) ProviderEnvironment() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.ProviderEnvironment }).(pulumi.StringOutput)
}

func (o EnvironmentOutput) ProvisionedResources() EnvironmentProvisionedResourceArrayOutput {
	return o.ApplyT(func(v *Environment) EnvironmentProvisionedResourceArrayOutput { return v.ProvisionedResources }).(EnvironmentProvisionedResourceArrayOutput)
}

func (o EnvironmentOutput) Timeouts() EnvironmentTimeoutsPtrOutput {
	return o.ApplyT(func(v *Environment) EnvironmentTimeoutsPtrOutput { return v.Timeouts }).(EnvironmentTimeoutsPtrOutput)
}

// The user parameters that are used in the environment. See User Parameters for more information.
func (o EnvironmentOutput) UserParameters() EnvironmentUserParameterArrayOutput {
	return o.ApplyT(func(v *Environment) EnvironmentUserParameterArrayOutput { return v.UserParameters }).(EnvironmentUserParameterArrayOutput)
}

type EnvironmentArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Environment)(nil)).Elem()
}

func (o EnvironmentArrayOutput) ToEnvironmentArrayOutput() EnvironmentArrayOutput {
	return o
}

func (o EnvironmentArrayOutput) ToEnvironmentArrayOutputWithContext(ctx context.Context) EnvironmentArrayOutput {
	return o
}

func (o EnvironmentArrayOutput) Index(i pulumi.IntInput) EnvironmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Environment {
		return vs[0].([]*Environment)[vs[1].(int)]
	}).(EnvironmentOutput)
}

type EnvironmentMapOutput struct{ *pulumi.OutputState }

func (EnvironmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Environment)(nil)).Elem()
}

func (o EnvironmentMapOutput) ToEnvironmentMapOutput() EnvironmentMapOutput {
	return o
}

func (o EnvironmentMapOutput) ToEnvironmentMapOutputWithContext(ctx context.Context) EnvironmentMapOutput {
	return o
}

func (o EnvironmentMapOutput) MapIndex(k pulumi.StringInput) EnvironmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Environment {
		return vs[0].(map[string]*Environment)[vs[1].(string)]
	}).(EnvironmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentInput)(nil)).Elem(), &Environment{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentArrayInput)(nil)).Elem(), EnvironmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentMapInput)(nil)).Elem(), EnvironmentMap{})
	pulumi.RegisterOutputType(EnvironmentOutput{})
	pulumi.RegisterOutputType(EnvironmentArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentMapOutput{})
}
