// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datazone

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS DataZone Project.
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/datazone"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datazone.NewProject(ctx, "test", &datazone.ProjectArgs{
//				DomainIdentifier: pulumi.Any(testAwsDatazoneDomain.Id),
//				Name:             pulumi.String("name"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import DataZone Project using a colon-delimited string combining `domain_id` and `id`. For example:
//
// ```sh
// $ pulumi import aws:datazone/project:Project example domain-1234:project-1234
// ```
type Project struct {
	pulumi.CustomResourceState

	// Timestamp of when the project was made.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Creator of the project.
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// Description of project.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Identifier of domain which the project is part of. Must follow the regex of `^dzd[-_][a-zA-Z0-9_-]{1,36}$`.
	DomainIdentifier pulumi.StringOutput `pulumi:"domainIdentifier"`
	// List of error messages if operation cannot be completed.
	FailureReasons ProjectFailureReasonArrayOutput `pulumi:"failureReasons"`
	// List of glossary terms that can be used in the project. The list cannot be empty or include over 20 values. Each value must follow the regex of `[a-zA-Z0-9_-]{1,36}$`.
	GlossaryTerms pulumi.StringArrayOutput `pulumi:"glossaryTerms"`
	// Timestamp of when the project was last updated.
	LastUpdatedAt pulumi.StringOutput `pulumi:"lastUpdatedAt"`
	// Name of the project. Must follow the regex of `^[\w -]+$`. and have a length of at most 64.
	//
	// The following arguments are optional:
	Name pulumi.StringOutput `pulumi:"name"`
	// Enum that conveys state of project. Can be `ACTIVE`, `DELETING`, or `DELETE_FAILED`.
	ProjectStatus pulumi.StringOutput `pulumi:"projectStatus"`
	// Optional flag to delete all child entities within the project.
	SkipDeletionCheck pulumi.BoolPtrOutput     `pulumi:"skipDeletionCheck"`
	Timeouts          ProjectTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewProject registers a new resource with the given unique name, arguments, and options.
func NewProject(ctx *pulumi.Context,
	name string, args *ProjectArgs, opts ...pulumi.ResourceOption) (*Project, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'DomainIdentifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Project
	err := ctx.RegisterResource("aws:datazone/project:Project", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProject gets an existing Project resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectState, opts ...pulumi.ResourceOption) (*Project, error) {
	var resource Project
	err := ctx.ReadResource("aws:datazone/project:Project", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Project resources.
type projectState struct {
	// Timestamp of when the project was made.
	CreatedAt *string `pulumi:"createdAt"`
	// Creator of the project.
	CreatedBy *string `pulumi:"createdBy"`
	// Description of project.
	Description *string `pulumi:"description"`
	// Identifier of domain which the project is part of. Must follow the regex of `^dzd[-_][a-zA-Z0-9_-]{1,36}$`.
	DomainIdentifier *string `pulumi:"domainIdentifier"`
	// List of error messages if operation cannot be completed.
	FailureReasons []ProjectFailureReason `pulumi:"failureReasons"`
	// List of glossary terms that can be used in the project. The list cannot be empty or include over 20 values. Each value must follow the regex of `[a-zA-Z0-9_-]{1,36}$`.
	GlossaryTerms []string `pulumi:"glossaryTerms"`
	// Timestamp of when the project was last updated.
	LastUpdatedAt *string `pulumi:"lastUpdatedAt"`
	// Name of the project. Must follow the regex of `^[\w -]+$`. and have a length of at most 64.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// Enum that conveys state of project. Can be `ACTIVE`, `DELETING`, or `DELETE_FAILED`.
	ProjectStatus *string `pulumi:"projectStatus"`
	// Optional flag to delete all child entities within the project.
	SkipDeletionCheck *bool            `pulumi:"skipDeletionCheck"`
	Timeouts          *ProjectTimeouts `pulumi:"timeouts"`
}

type ProjectState struct {
	// Timestamp of when the project was made.
	CreatedAt pulumi.StringPtrInput
	// Creator of the project.
	CreatedBy pulumi.StringPtrInput
	// Description of project.
	Description pulumi.StringPtrInput
	// Identifier of domain which the project is part of. Must follow the regex of `^dzd[-_][a-zA-Z0-9_-]{1,36}$`.
	DomainIdentifier pulumi.StringPtrInput
	// List of error messages if operation cannot be completed.
	FailureReasons ProjectFailureReasonArrayInput
	// List of glossary terms that can be used in the project. The list cannot be empty or include over 20 values. Each value must follow the regex of `[a-zA-Z0-9_-]{1,36}$`.
	GlossaryTerms pulumi.StringArrayInput
	// Timestamp of when the project was last updated.
	LastUpdatedAt pulumi.StringPtrInput
	// Name of the project. Must follow the regex of `^[\w -]+$`. and have a length of at most 64.
	//
	// The following arguments are optional:
	Name pulumi.StringPtrInput
	// Enum that conveys state of project. Can be `ACTIVE`, `DELETING`, or `DELETE_FAILED`.
	ProjectStatus pulumi.StringPtrInput
	// Optional flag to delete all child entities within the project.
	SkipDeletionCheck pulumi.BoolPtrInput
	Timeouts          ProjectTimeoutsPtrInput
}

func (ProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectState)(nil)).Elem()
}

type projectArgs struct {
	// Description of project.
	Description *string `pulumi:"description"`
	// Identifier of domain which the project is part of. Must follow the regex of `^dzd[-_][a-zA-Z0-9_-]{1,36}$`.
	DomainIdentifier string `pulumi:"domainIdentifier"`
	// List of glossary terms that can be used in the project. The list cannot be empty or include over 20 values. Each value must follow the regex of `[a-zA-Z0-9_-]{1,36}$`.
	GlossaryTerms []string `pulumi:"glossaryTerms"`
	// Name of the project. Must follow the regex of `^[\w -]+$`. and have a length of at most 64.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// Optional flag to delete all child entities within the project.
	SkipDeletionCheck *bool            `pulumi:"skipDeletionCheck"`
	Timeouts          *ProjectTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a Project resource.
type ProjectArgs struct {
	// Description of project.
	Description pulumi.StringPtrInput
	// Identifier of domain which the project is part of. Must follow the regex of `^dzd[-_][a-zA-Z0-9_-]{1,36}$`.
	DomainIdentifier pulumi.StringInput
	// List of glossary terms that can be used in the project. The list cannot be empty or include over 20 values. Each value must follow the regex of `[a-zA-Z0-9_-]{1,36}$`.
	GlossaryTerms pulumi.StringArrayInput
	// Name of the project. Must follow the regex of `^[\w -]+$`. and have a length of at most 64.
	//
	// The following arguments are optional:
	Name pulumi.StringPtrInput
	// Optional flag to delete all child entities within the project.
	SkipDeletionCheck pulumi.BoolPtrInput
	Timeouts          ProjectTimeoutsPtrInput
}

func (ProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectArgs)(nil)).Elem()
}

type ProjectInput interface {
	pulumi.Input

	ToProjectOutput() ProjectOutput
	ToProjectOutputWithContext(ctx context.Context) ProjectOutput
}

func (*Project) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (i *Project) ToProjectOutput() ProjectOutput {
	return i.ToProjectOutputWithContext(context.Background())
}

func (i *Project) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectOutput)
}

// ProjectArrayInput is an input type that accepts ProjectArray and ProjectArrayOutput values.
// You can construct a concrete instance of `ProjectArrayInput` via:
//
//	ProjectArray{ ProjectArgs{...} }
type ProjectArrayInput interface {
	pulumi.Input

	ToProjectArrayOutput() ProjectArrayOutput
	ToProjectArrayOutputWithContext(context.Context) ProjectArrayOutput
}

type ProjectArray []ProjectInput

func (ProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Project)(nil)).Elem()
}

func (i ProjectArray) ToProjectArrayOutput() ProjectArrayOutput {
	return i.ToProjectArrayOutputWithContext(context.Background())
}

func (i ProjectArray) ToProjectArrayOutputWithContext(ctx context.Context) ProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectArrayOutput)
}

// ProjectMapInput is an input type that accepts ProjectMap and ProjectMapOutput values.
// You can construct a concrete instance of `ProjectMapInput` via:
//
//	ProjectMap{ "key": ProjectArgs{...} }
type ProjectMapInput interface {
	pulumi.Input

	ToProjectMapOutput() ProjectMapOutput
	ToProjectMapOutputWithContext(context.Context) ProjectMapOutput
}

type ProjectMap map[string]ProjectInput

func (ProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Project)(nil)).Elem()
}

func (i ProjectMap) ToProjectMapOutput() ProjectMapOutput {
	return i.ToProjectMapOutputWithContext(context.Background())
}

func (i ProjectMap) ToProjectMapOutputWithContext(ctx context.Context) ProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMapOutput)
}

type ProjectOutput struct{ *pulumi.OutputState }

func (ProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (o ProjectOutput) ToProjectOutput() ProjectOutput {
	return o
}

func (o ProjectOutput) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return o
}

// Timestamp of when the project was made.
func (o ProjectOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Creator of the project.
func (o ProjectOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// Description of project.
func (o ProjectOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Identifier of domain which the project is part of. Must follow the regex of `^dzd[-_][a-zA-Z0-9_-]{1,36}$`.
func (o ProjectOutput) DomainIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.DomainIdentifier }).(pulumi.StringOutput)
}

// List of error messages if operation cannot be completed.
func (o ProjectOutput) FailureReasons() ProjectFailureReasonArrayOutput {
	return o.ApplyT(func(v *Project) ProjectFailureReasonArrayOutput { return v.FailureReasons }).(ProjectFailureReasonArrayOutput)
}

// List of glossary terms that can be used in the project. The list cannot be empty or include over 20 values. Each value must follow the regex of `[a-zA-Z0-9_-]{1,36}$`.
func (o ProjectOutput) GlossaryTerms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Project) pulumi.StringArrayOutput { return v.GlossaryTerms }).(pulumi.StringArrayOutput)
}

// Timestamp of when the project was last updated.
func (o ProjectOutput) LastUpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.LastUpdatedAt }).(pulumi.StringOutput)
}

// Name of the project. Must follow the regex of `^[\w -]+$`. and have a length of at most 64.
//
// The following arguments are optional:
func (o ProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Enum that conveys state of project. Can be `ACTIVE`, `DELETING`, or `DELETE_FAILED`.
func (o ProjectOutput) ProjectStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.ProjectStatus }).(pulumi.StringOutput)
}

// Optional flag to delete all child entities within the project.
func (o ProjectOutput) SkipDeletionCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolPtrOutput { return v.SkipDeletionCheck }).(pulumi.BoolPtrOutput)
}

func (o ProjectOutput) Timeouts() ProjectTimeoutsPtrOutput {
	return o.ApplyT(func(v *Project) ProjectTimeoutsPtrOutput { return v.Timeouts }).(ProjectTimeoutsPtrOutput)
}

type ProjectArrayOutput struct{ *pulumi.OutputState }

func (ProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Project)(nil)).Elem()
}

func (o ProjectArrayOutput) ToProjectArrayOutput() ProjectArrayOutput {
	return o
}

func (o ProjectArrayOutput) ToProjectArrayOutputWithContext(ctx context.Context) ProjectArrayOutput {
	return o
}

func (o ProjectArrayOutput) Index(i pulumi.IntInput) ProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Project {
		return vs[0].([]*Project)[vs[1].(int)]
	}).(ProjectOutput)
}

type ProjectMapOutput struct{ *pulumi.OutputState }

func (ProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Project)(nil)).Elem()
}

func (o ProjectMapOutput) ToProjectMapOutput() ProjectMapOutput {
	return o
}

func (o ProjectMapOutput) ToProjectMapOutputWithContext(ctx context.Context) ProjectMapOutput {
	return o
}

func (o ProjectMapOutput) MapIndex(k pulumi.StringInput) ProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Project {
		return vs[0].(map[string]*Project)[vs[1].(string)]
	}).(ProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectInput)(nil)).Elem(), &Project{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectArrayInput)(nil)).Elem(), ProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMapInput)(nil)).Elem(), ProjectMap{})
	pulumi.RegisterOutputType(ProjectOutput{})
	pulumi.RegisterOutputType(ProjectArrayOutput{})
	pulumi.RegisterOutputType(ProjectMapOutput{})
}
