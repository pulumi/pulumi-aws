// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datazone

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS DataZone Domain.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/datazone"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/iam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"Version": "2012-10-17",
//				"Statement": []map[string]interface{}{
//					map[string]interface{}{
//						"Action": []string{
//							"sts:AssumeRole",
//							"sts:TagSession",
//						},
//						"Effect": "Allow",
//						"Principal": map[string]interface{}{
//							"Service": "datazone.amazonaws.com",
//						},
//					},
//					map[string]interface{}{
//						"Action": []string{
//							"sts:AssumeRole",
//							"sts:TagSession",
//						},
//						"Effect": "Allow",
//						"Principal": map[string]interface{}{
//							"Service": "cloudformation.amazonaws.com",
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			tmpJSON1, err := json.Marshal(map[string]interface{}{
//				"Version": "2012-10-17",
//				"Statement": []map[string]interface{}{
//					map[string]interface{}{
//						"Action": []string{
//							"datazone:*",
//							"ram:*",
//							"sso:*",
//							"kms:*",
//						},
//						"Effect":   "Allow",
//						"Resource": "*",
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json1 := string(tmpJSON1)
//			domainExecutionRole, err := iam.NewRole(ctx, "domain_execution_role", &iam.RoleArgs{
//				Name:             pulumi.String("my_domain_execution_role"),
//				AssumeRolePolicy: pulumi.String(json0),
//				InlinePolicies: iam.RoleInlinePolicyArray{
//					&iam.RoleInlinePolicyArgs{
//						Name:   pulumi.String("domain_execution_policy"),
//						Policy: pulumi.String(json1),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = datazone.NewDomain(ctx, "example", &datazone.DomainArgs{
//				Name:                pulumi.String("example"),
//				DomainExecutionRole: domainExecutionRole.Arn,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import DataZone Domain using the `domain_id`. For example:
//
// ```sh
// $ pulumi import aws:datazone/domain:Domain example domain-id-12345678
// ```
type Domain struct {
	pulumi.CustomResourceState

	// ARN of the Domain.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Description of the Domain.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// ARN of the role used by DataZone to configure the Domain.
	//
	// The following arguments are optional:
	DomainExecutionRole pulumi.StringOutput `pulumi:"domainExecutionRole"`
	// ARN of the KMS key used to encrypt the Amazon DataZone domain, metadata and reporting data.
	KmsKeyIdentifier pulumi.StringPtrOutput `pulumi:"kmsKeyIdentifier"`
	// Name of the Domain.
	Name pulumi.StringOutput `pulumi:"name"`
	// URL of the data portal for the Domain.
	PortalUrl pulumi.StringOutput `pulumi:"portalUrl"`
	// Single sign on options, used to [enable AWS IAM Identity Center](https://docs.aws.amazon.com/datazone/latest/userguide/enable-IAM-identity-center-for-datazone.html) for DataZone.
	SingleSignOn DomainSingleSignOnPtrOutput `pulumi:"singleSignOn"`
	Tags         pulumi.StringMapOutput      `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapOutput  `pulumi:"tagsAll"`
	Timeouts DomainTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewDomain registers a new resource with the given unique name, arguments, and options.
func NewDomain(ctx *pulumi.Context,
	name string, args *DomainArgs, opts ...pulumi.ResourceOption) (*Domain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainExecutionRole == nil {
		return nil, errors.New("invalid value for required argument 'DomainExecutionRole'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Domain
	err := ctx.RegisterResource("aws:datazone/domain:Domain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomain gets an existing Domain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainState, opts ...pulumi.ResourceOption) (*Domain, error) {
	var resource Domain
	err := ctx.ReadResource("aws:datazone/domain:Domain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Domain resources.
type domainState struct {
	// ARN of the Domain.
	Arn *string `pulumi:"arn"`
	// Description of the Domain.
	Description *string `pulumi:"description"`
	// ARN of the role used by DataZone to configure the Domain.
	//
	// The following arguments are optional:
	DomainExecutionRole *string `pulumi:"domainExecutionRole"`
	// ARN of the KMS key used to encrypt the Amazon DataZone domain, metadata and reporting data.
	KmsKeyIdentifier *string `pulumi:"kmsKeyIdentifier"`
	// Name of the Domain.
	Name *string `pulumi:"name"`
	// URL of the data portal for the Domain.
	PortalUrl *string `pulumi:"portalUrl"`
	// Single sign on options, used to [enable AWS IAM Identity Center](https://docs.aws.amazon.com/datazone/latest/userguide/enable-IAM-identity-center-for-datazone.html) for DataZone.
	SingleSignOn *DomainSingleSignOn `pulumi:"singleSignOn"`
	Tags         map[string]string   `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  map[string]string `pulumi:"tagsAll"`
	Timeouts *DomainTimeouts   `pulumi:"timeouts"`
}

type DomainState struct {
	// ARN of the Domain.
	Arn pulumi.StringPtrInput
	// Description of the Domain.
	Description pulumi.StringPtrInput
	// ARN of the role used by DataZone to configure the Domain.
	//
	// The following arguments are optional:
	DomainExecutionRole pulumi.StringPtrInput
	// ARN of the KMS key used to encrypt the Amazon DataZone domain, metadata and reporting data.
	KmsKeyIdentifier pulumi.StringPtrInput
	// Name of the Domain.
	Name pulumi.StringPtrInput
	// URL of the data portal for the Domain.
	PortalUrl pulumi.StringPtrInput
	// Single sign on options, used to [enable AWS IAM Identity Center](https://docs.aws.amazon.com/datazone/latest/userguide/enable-IAM-identity-center-for-datazone.html) for DataZone.
	SingleSignOn DomainSingleSignOnPtrInput
	Tags         pulumi.StringMapInput
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapInput
	Timeouts DomainTimeoutsPtrInput
}

func (DomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainState)(nil)).Elem()
}

type domainArgs struct {
	// Description of the Domain.
	Description *string `pulumi:"description"`
	// ARN of the role used by DataZone to configure the Domain.
	//
	// The following arguments are optional:
	DomainExecutionRole string `pulumi:"domainExecutionRole"`
	// ARN of the KMS key used to encrypt the Amazon DataZone domain, metadata and reporting data.
	KmsKeyIdentifier *string `pulumi:"kmsKeyIdentifier"`
	// Name of the Domain.
	Name *string `pulumi:"name"`
	// Single sign on options, used to [enable AWS IAM Identity Center](https://docs.aws.amazon.com/datazone/latest/userguide/enable-IAM-identity-center-for-datazone.html) for DataZone.
	SingleSignOn *DomainSingleSignOn `pulumi:"singleSignOn"`
	Tags         map[string]string   `pulumi:"tags"`
	Timeouts     *DomainTimeouts     `pulumi:"timeouts"`
}

// The set of arguments for constructing a Domain resource.
type DomainArgs struct {
	// Description of the Domain.
	Description pulumi.StringPtrInput
	// ARN of the role used by DataZone to configure the Domain.
	//
	// The following arguments are optional:
	DomainExecutionRole pulumi.StringInput
	// ARN of the KMS key used to encrypt the Amazon DataZone domain, metadata and reporting data.
	KmsKeyIdentifier pulumi.StringPtrInput
	// Name of the Domain.
	Name pulumi.StringPtrInput
	// Single sign on options, used to [enable AWS IAM Identity Center](https://docs.aws.amazon.com/datazone/latest/userguide/enable-IAM-identity-center-for-datazone.html) for DataZone.
	SingleSignOn DomainSingleSignOnPtrInput
	Tags         pulumi.StringMapInput
	Timeouts     DomainTimeoutsPtrInput
}

func (DomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainArgs)(nil)).Elem()
}

type DomainInput interface {
	pulumi.Input

	ToDomainOutput() DomainOutput
	ToDomainOutputWithContext(ctx context.Context) DomainOutput
}

func (*Domain) ElementType() reflect.Type {
	return reflect.TypeOf((**Domain)(nil)).Elem()
}

func (i *Domain) ToDomainOutput() DomainOutput {
	return i.ToDomainOutputWithContext(context.Background())
}

func (i *Domain) ToDomainOutputWithContext(ctx context.Context) DomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainOutput)
}

// DomainArrayInput is an input type that accepts DomainArray and DomainArrayOutput values.
// You can construct a concrete instance of `DomainArrayInput` via:
//
//	DomainArray{ DomainArgs{...} }
type DomainArrayInput interface {
	pulumi.Input

	ToDomainArrayOutput() DomainArrayOutput
	ToDomainArrayOutputWithContext(context.Context) DomainArrayOutput
}

type DomainArray []DomainInput

func (DomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Domain)(nil)).Elem()
}

func (i DomainArray) ToDomainArrayOutput() DomainArrayOutput {
	return i.ToDomainArrayOutputWithContext(context.Background())
}

func (i DomainArray) ToDomainArrayOutputWithContext(ctx context.Context) DomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainArrayOutput)
}

// DomainMapInput is an input type that accepts DomainMap and DomainMapOutput values.
// You can construct a concrete instance of `DomainMapInput` via:
//
//	DomainMap{ "key": DomainArgs{...} }
type DomainMapInput interface {
	pulumi.Input

	ToDomainMapOutput() DomainMapOutput
	ToDomainMapOutputWithContext(context.Context) DomainMapOutput
}

type DomainMap map[string]DomainInput

func (DomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Domain)(nil)).Elem()
}

func (i DomainMap) ToDomainMapOutput() DomainMapOutput {
	return i.ToDomainMapOutputWithContext(context.Background())
}

func (i DomainMap) ToDomainMapOutputWithContext(ctx context.Context) DomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainMapOutput)
}

type DomainOutput struct{ *pulumi.OutputState }

func (DomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Domain)(nil)).Elem()
}

func (o DomainOutput) ToDomainOutput() DomainOutput {
	return o
}

func (o DomainOutput) ToDomainOutputWithContext(ctx context.Context) DomainOutput {
	return o
}

// ARN of the Domain.
func (o DomainOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Description of the Domain.
func (o DomainOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// ARN of the role used by DataZone to configure the Domain.
//
// The following arguments are optional:
func (o DomainOutput) DomainExecutionRole() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.DomainExecutionRole }).(pulumi.StringOutput)
}

// ARN of the KMS key used to encrypt the Amazon DataZone domain, metadata and reporting data.
func (o DomainOutput) KmsKeyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringPtrOutput { return v.KmsKeyIdentifier }).(pulumi.StringPtrOutput)
}

// Name of the Domain.
func (o DomainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// URL of the data portal for the Domain.
func (o DomainOutput) PortalUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.PortalUrl }).(pulumi.StringOutput)
}

// Single sign on options, used to [enable AWS IAM Identity Center](https://docs.aws.amazon.com/datazone/latest/userguide/enable-IAM-identity-center-for-datazone.html) for DataZone.
func (o DomainOutput) SingleSignOn() DomainSingleSignOnPtrOutput {
	return o.ApplyT(func(v *Domain) DomainSingleSignOnPtrOutput { return v.SingleSignOn }).(DomainSingleSignOnPtrOutput)
}

func (o DomainOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o DomainOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o DomainOutput) Timeouts() DomainTimeoutsPtrOutput {
	return o.ApplyT(func(v *Domain) DomainTimeoutsPtrOutput { return v.Timeouts }).(DomainTimeoutsPtrOutput)
}

type DomainArrayOutput struct{ *pulumi.OutputState }

func (DomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Domain)(nil)).Elem()
}

func (o DomainArrayOutput) ToDomainArrayOutput() DomainArrayOutput {
	return o
}

func (o DomainArrayOutput) ToDomainArrayOutputWithContext(ctx context.Context) DomainArrayOutput {
	return o
}

func (o DomainArrayOutput) Index(i pulumi.IntInput) DomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Domain {
		return vs[0].([]*Domain)[vs[1].(int)]
	}).(DomainOutput)
}

type DomainMapOutput struct{ *pulumi.OutputState }

func (DomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Domain)(nil)).Elem()
}

func (o DomainMapOutput) ToDomainMapOutput() DomainMapOutput {
	return o
}

func (o DomainMapOutput) ToDomainMapOutputWithContext(ctx context.Context) DomainMapOutput {
	return o
}

func (o DomainMapOutput) MapIndex(k pulumi.StringInput) DomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Domain {
		return vs[0].(map[string]*Domain)[vs[1].(string)]
	}).(DomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainInput)(nil)).Elem(), &Domain{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainArrayInput)(nil)).Elem(), DomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainMapInput)(nil)).Elem(), DomainMap{})
	pulumi.RegisterOutputType(DomainOutput{})
	pulumi.RegisterOutputType(DomainArrayOutput{})
	pulumi.RegisterOutputType(DomainMapOutput{})
}
