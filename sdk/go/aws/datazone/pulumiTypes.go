// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datazone

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type DomainSingleSignOn struct {
	Type           *string `pulumi:"type"`
	UserAssignment *string `pulumi:"userAssignment"`
}

// DomainSingleSignOnInput is an input type that accepts DomainSingleSignOnArgs and DomainSingleSignOnOutput values.
// You can construct a concrete instance of `DomainSingleSignOnInput` via:
//
//	DomainSingleSignOnArgs{...}
type DomainSingleSignOnInput interface {
	pulumi.Input

	ToDomainSingleSignOnOutput() DomainSingleSignOnOutput
	ToDomainSingleSignOnOutputWithContext(context.Context) DomainSingleSignOnOutput
}

type DomainSingleSignOnArgs struct {
	Type           pulumi.StringPtrInput `pulumi:"type"`
	UserAssignment pulumi.StringPtrInput `pulumi:"userAssignment"`
}

func (DomainSingleSignOnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainSingleSignOn)(nil)).Elem()
}

func (i DomainSingleSignOnArgs) ToDomainSingleSignOnOutput() DomainSingleSignOnOutput {
	return i.ToDomainSingleSignOnOutputWithContext(context.Background())
}

func (i DomainSingleSignOnArgs) ToDomainSingleSignOnOutputWithContext(ctx context.Context) DomainSingleSignOnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainSingleSignOnOutput)
}

func (i DomainSingleSignOnArgs) ToDomainSingleSignOnPtrOutput() DomainSingleSignOnPtrOutput {
	return i.ToDomainSingleSignOnPtrOutputWithContext(context.Background())
}

func (i DomainSingleSignOnArgs) ToDomainSingleSignOnPtrOutputWithContext(ctx context.Context) DomainSingleSignOnPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainSingleSignOnOutput).ToDomainSingleSignOnPtrOutputWithContext(ctx)
}

// DomainSingleSignOnPtrInput is an input type that accepts DomainSingleSignOnArgs, DomainSingleSignOnPtr and DomainSingleSignOnPtrOutput values.
// You can construct a concrete instance of `DomainSingleSignOnPtrInput` via:
//
//	        DomainSingleSignOnArgs{...}
//
//	or:
//
//	        nil
type DomainSingleSignOnPtrInput interface {
	pulumi.Input

	ToDomainSingleSignOnPtrOutput() DomainSingleSignOnPtrOutput
	ToDomainSingleSignOnPtrOutputWithContext(context.Context) DomainSingleSignOnPtrOutput
}

type domainSingleSignOnPtrType DomainSingleSignOnArgs

func DomainSingleSignOnPtr(v *DomainSingleSignOnArgs) DomainSingleSignOnPtrInput {
	return (*domainSingleSignOnPtrType)(v)
}

func (*domainSingleSignOnPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainSingleSignOn)(nil)).Elem()
}

func (i *domainSingleSignOnPtrType) ToDomainSingleSignOnPtrOutput() DomainSingleSignOnPtrOutput {
	return i.ToDomainSingleSignOnPtrOutputWithContext(context.Background())
}

func (i *domainSingleSignOnPtrType) ToDomainSingleSignOnPtrOutputWithContext(ctx context.Context) DomainSingleSignOnPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainSingleSignOnPtrOutput)
}

type DomainSingleSignOnOutput struct{ *pulumi.OutputState }

func (DomainSingleSignOnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainSingleSignOn)(nil)).Elem()
}

func (o DomainSingleSignOnOutput) ToDomainSingleSignOnOutput() DomainSingleSignOnOutput {
	return o
}

func (o DomainSingleSignOnOutput) ToDomainSingleSignOnOutputWithContext(ctx context.Context) DomainSingleSignOnOutput {
	return o
}

func (o DomainSingleSignOnOutput) ToDomainSingleSignOnPtrOutput() DomainSingleSignOnPtrOutput {
	return o.ToDomainSingleSignOnPtrOutputWithContext(context.Background())
}

func (o DomainSingleSignOnOutput) ToDomainSingleSignOnPtrOutputWithContext(ctx context.Context) DomainSingleSignOnPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainSingleSignOn) *DomainSingleSignOn {
		return &v
	}).(DomainSingleSignOnPtrOutput)
}

func (o DomainSingleSignOnOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainSingleSignOn) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o DomainSingleSignOnOutput) UserAssignment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainSingleSignOn) *string { return v.UserAssignment }).(pulumi.StringPtrOutput)
}

type DomainSingleSignOnPtrOutput struct{ *pulumi.OutputState }

func (DomainSingleSignOnPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainSingleSignOn)(nil)).Elem()
}

func (o DomainSingleSignOnPtrOutput) ToDomainSingleSignOnPtrOutput() DomainSingleSignOnPtrOutput {
	return o
}

func (o DomainSingleSignOnPtrOutput) ToDomainSingleSignOnPtrOutputWithContext(ctx context.Context) DomainSingleSignOnPtrOutput {
	return o
}

func (o DomainSingleSignOnPtrOutput) Elem() DomainSingleSignOnOutput {
	return o.ApplyT(func(v *DomainSingleSignOn) DomainSingleSignOn {
		if v != nil {
			return *v
		}
		var ret DomainSingleSignOn
		return ret
	}).(DomainSingleSignOnOutput)
}

func (o DomainSingleSignOnPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainSingleSignOn) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

func (o DomainSingleSignOnPtrOutput) UserAssignment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainSingleSignOn) *string {
		if v == nil {
			return nil
		}
		return v.UserAssignment
	}).(pulumi.StringPtrOutput)
}

type DomainTimeouts struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create *string `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete *string `pulumi:"delete"`
}

// DomainTimeoutsInput is an input type that accepts DomainTimeoutsArgs and DomainTimeoutsOutput values.
// You can construct a concrete instance of `DomainTimeoutsInput` via:
//
//	DomainTimeoutsArgs{...}
type DomainTimeoutsInput interface {
	pulumi.Input

	ToDomainTimeoutsOutput() DomainTimeoutsOutput
	ToDomainTimeoutsOutputWithContext(context.Context) DomainTimeoutsOutput
}

type DomainTimeoutsArgs struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create pulumi.StringPtrInput `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete pulumi.StringPtrInput `pulumi:"delete"`
}

func (DomainTimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainTimeouts)(nil)).Elem()
}

func (i DomainTimeoutsArgs) ToDomainTimeoutsOutput() DomainTimeoutsOutput {
	return i.ToDomainTimeoutsOutputWithContext(context.Background())
}

func (i DomainTimeoutsArgs) ToDomainTimeoutsOutputWithContext(ctx context.Context) DomainTimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainTimeoutsOutput)
}

func (i DomainTimeoutsArgs) ToDomainTimeoutsPtrOutput() DomainTimeoutsPtrOutput {
	return i.ToDomainTimeoutsPtrOutputWithContext(context.Background())
}

func (i DomainTimeoutsArgs) ToDomainTimeoutsPtrOutputWithContext(ctx context.Context) DomainTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainTimeoutsOutput).ToDomainTimeoutsPtrOutputWithContext(ctx)
}

// DomainTimeoutsPtrInput is an input type that accepts DomainTimeoutsArgs, DomainTimeoutsPtr and DomainTimeoutsPtrOutput values.
// You can construct a concrete instance of `DomainTimeoutsPtrInput` via:
//
//	        DomainTimeoutsArgs{...}
//
//	or:
//
//	        nil
type DomainTimeoutsPtrInput interface {
	pulumi.Input

	ToDomainTimeoutsPtrOutput() DomainTimeoutsPtrOutput
	ToDomainTimeoutsPtrOutputWithContext(context.Context) DomainTimeoutsPtrOutput
}

type domainTimeoutsPtrType DomainTimeoutsArgs

func DomainTimeoutsPtr(v *DomainTimeoutsArgs) DomainTimeoutsPtrInput {
	return (*domainTimeoutsPtrType)(v)
}

func (*domainTimeoutsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainTimeouts)(nil)).Elem()
}

func (i *domainTimeoutsPtrType) ToDomainTimeoutsPtrOutput() DomainTimeoutsPtrOutput {
	return i.ToDomainTimeoutsPtrOutputWithContext(context.Background())
}

func (i *domainTimeoutsPtrType) ToDomainTimeoutsPtrOutputWithContext(ctx context.Context) DomainTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainTimeoutsPtrOutput)
}

type DomainTimeoutsOutput struct{ *pulumi.OutputState }

func (DomainTimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainTimeouts)(nil)).Elem()
}

func (o DomainTimeoutsOutput) ToDomainTimeoutsOutput() DomainTimeoutsOutput {
	return o
}

func (o DomainTimeoutsOutput) ToDomainTimeoutsOutputWithContext(ctx context.Context) DomainTimeoutsOutput {
	return o
}

func (o DomainTimeoutsOutput) ToDomainTimeoutsPtrOutput() DomainTimeoutsPtrOutput {
	return o.ToDomainTimeoutsPtrOutputWithContext(context.Background())
}

func (o DomainTimeoutsOutput) ToDomainTimeoutsPtrOutputWithContext(ctx context.Context) DomainTimeoutsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainTimeouts) *DomainTimeouts {
		return &v
	}).(DomainTimeoutsPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o DomainTimeoutsOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainTimeouts) *string { return v.Create }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o DomainTimeoutsOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainTimeouts) *string { return v.Delete }).(pulumi.StringPtrOutput)
}

type DomainTimeoutsPtrOutput struct{ *pulumi.OutputState }

func (DomainTimeoutsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainTimeouts)(nil)).Elem()
}

func (o DomainTimeoutsPtrOutput) ToDomainTimeoutsPtrOutput() DomainTimeoutsPtrOutput {
	return o
}

func (o DomainTimeoutsPtrOutput) ToDomainTimeoutsPtrOutputWithContext(ctx context.Context) DomainTimeoutsPtrOutput {
	return o
}

func (o DomainTimeoutsPtrOutput) Elem() DomainTimeoutsOutput {
	return o.ApplyT(func(v *DomainTimeouts) DomainTimeouts {
		if v != nil {
			return *v
		}
		var ret DomainTimeouts
		return ret
	}).(DomainTimeoutsOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o DomainTimeoutsPtrOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Create
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o DomainTimeoutsPtrOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Delete
	}).(pulumi.StringPtrOutput)
}

type ProjectFailureReason struct {
	Code    string `pulumi:"code"`
	Message string `pulumi:"message"`
}

// ProjectFailureReasonInput is an input type that accepts ProjectFailureReasonArgs and ProjectFailureReasonOutput values.
// You can construct a concrete instance of `ProjectFailureReasonInput` via:
//
//	ProjectFailureReasonArgs{...}
type ProjectFailureReasonInput interface {
	pulumi.Input

	ToProjectFailureReasonOutput() ProjectFailureReasonOutput
	ToProjectFailureReasonOutputWithContext(context.Context) ProjectFailureReasonOutput
}

type ProjectFailureReasonArgs struct {
	Code    pulumi.StringInput `pulumi:"code"`
	Message pulumi.StringInput `pulumi:"message"`
}

func (ProjectFailureReasonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectFailureReason)(nil)).Elem()
}

func (i ProjectFailureReasonArgs) ToProjectFailureReasonOutput() ProjectFailureReasonOutput {
	return i.ToProjectFailureReasonOutputWithContext(context.Background())
}

func (i ProjectFailureReasonArgs) ToProjectFailureReasonOutputWithContext(ctx context.Context) ProjectFailureReasonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectFailureReasonOutput)
}

// ProjectFailureReasonArrayInput is an input type that accepts ProjectFailureReasonArray and ProjectFailureReasonArrayOutput values.
// You can construct a concrete instance of `ProjectFailureReasonArrayInput` via:
//
//	ProjectFailureReasonArray{ ProjectFailureReasonArgs{...} }
type ProjectFailureReasonArrayInput interface {
	pulumi.Input

	ToProjectFailureReasonArrayOutput() ProjectFailureReasonArrayOutput
	ToProjectFailureReasonArrayOutputWithContext(context.Context) ProjectFailureReasonArrayOutput
}

type ProjectFailureReasonArray []ProjectFailureReasonInput

func (ProjectFailureReasonArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectFailureReason)(nil)).Elem()
}

func (i ProjectFailureReasonArray) ToProjectFailureReasonArrayOutput() ProjectFailureReasonArrayOutput {
	return i.ToProjectFailureReasonArrayOutputWithContext(context.Background())
}

func (i ProjectFailureReasonArray) ToProjectFailureReasonArrayOutputWithContext(ctx context.Context) ProjectFailureReasonArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectFailureReasonArrayOutput)
}

type ProjectFailureReasonOutput struct{ *pulumi.OutputState }

func (ProjectFailureReasonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectFailureReason)(nil)).Elem()
}

func (o ProjectFailureReasonOutput) ToProjectFailureReasonOutput() ProjectFailureReasonOutput {
	return o
}

func (o ProjectFailureReasonOutput) ToProjectFailureReasonOutputWithContext(ctx context.Context) ProjectFailureReasonOutput {
	return o
}

func (o ProjectFailureReasonOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectFailureReason) string { return v.Code }).(pulumi.StringOutput)
}

func (o ProjectFailureReasonOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectFailureReason) string { return v.Message }).(pulumi.StringOutput)
}

type ProjectFailureReasonArrayOutput struct{ *pulumi.OutputState }

func (ProjectFailureReasonArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectFailureReason)(nil)).Elem()
}

func (o ProjectFailureReasonArrayOutput) ToProjectFailureReasonArrayOutput() ProjectFailureReasonArrayOutput {
	return o
}

func (o ProjectFailureReasonArrayOutput) ToProjectFailureReasonArrayOutputWithContext(ctx context.Context) ProjectFailureReasonArrayOutput {
	return o
}

func (o ProjectFailureReasonArrayOutput) Index(i pulumi.IntInput) ProjectFailureReasonOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectFailureReason {
		return vs[0].([]ProjectFailureReason)[vs[1].(int)]
	}).(ProjectFailureReasonOutput)
}

type ProjectTimeouts struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create *string `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete *string `pulumi:"delete"`
}

// ProjectTimeoutsInput is an input type that accepts ProjectTimeoutsArgs and ProjectTimeoutsOutput values.
// You can construct a concrete instance of `ProjectTimeoutsInput` via:
//
//	ProjectTimeoutsArgs{...}
type ProjectTimeoutsInput interface {
	pulumi.Input

	ToProjectTimeoutsOutput() ProjectTimeoutsOutput
	ToProjectTimeoutsOutputWithContext(context.Context) ProjectTimeoutsOutput
}

type ProjectTimeoutsArgs struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create pulumi.StringPtrInput `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete pulumi.StringPtrInput `pulumi:"delete"`
}

func (ProjectTimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectTimeouts)(nil)).Elem()
}

func (i ProjectTimeoutsArgs) ToProjectTimeoutsOutput() ProjectTimeoutsOutput {
	return i.ToProjectTimeoutsOutputWithContext(context.Background())
}

func (i ProjectTimeoutsArgs) ToProjectTimeoutsOutputWithContext(ctx context.Context) ProjectTimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTimeoutsOutput)
}

func (i ProjectTimeoutsArgs) ToProjectTimeoutsPtrOutput() ProjectTimeoutsPtrOutput {
	return i.ToProjectTimeoutsPtrOutputWithContext(context.Background())
}

func (i ProjectTimeoutsArgs) ToProjectTimeoutsPtrOutputWithContext(ctx context.Context) ProjectTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTimeoutsOutput).ToProjectTimeoutsPtrOutputWithContext(ctx)
}

// ProjectTimeoutsPtrInput is an input type that accepts ProjectTimeoutsArgs, ProjectTimeoutsPtr and ProjectTimeoutsPtrOutput values.
// You can construct a concrete instance of `ProjectTimeoutsPtrInput` via:
//
//	        ProjectTimeoutsArgs{...}
//
//	or:
//
//	        nil
type ProjectTimeoutsPtrInput interface {
	pulumi.Input

	ToProjectTimeoutsPtrOutput() ProjectTimeoutsPtrOutput
	ToProjectTimeoutsPtrOutputWithContext(context.Context) ProjectTimeoutsPtrOutput
}

type projectTimeoutsPtrType ProjectTimeoutsArgs

func ProjectTimeoutsPtr(v *ProjectTimeoutsArgs) ProjectTimeoutsPtrInput {
	return (*projectTimeoutsPtrType)(v)
}

func (*projectTimeoutsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectTimeouts)(nil)).Elem()
}

func (i *projectTimeoutsPtrType) ToProjectTimeoutsPtrOutput() ProjectTimeoutsPtrOutput {
	return i.ToProjectTimeoutsPtrOutputWithContext(context.Background())
}

func (i *projectTimeoutsPtrType) ToProjectTimeoutsPtrOutputWithContext(ctx context.Context) ProjectTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTimeoutsPtrOutput)
}

type ProjectTimeoutsOutput struct{ *pulumi.OutputState }

func (ProjectTimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectTimeouts)(nil)).Elem()
}

func (o ProjectTimeoutsOutput) ToProjectTimeoutsOutput() ProjectTimeoutsOutput {
	return o
}

func (o ProjectTimeoutsOutput) ToProjectTimeoutsOutputWithContext(ctx context.Context) ProjectTimeoutsOutput {
	return o
}

func (o ProjectTimeoutsOutput) ToProjectTimeoutsPtrOutput() ProjectTimeoutsPtrOutput {
	return o.ToProjectTimeoutsPtrOutputWithContext(context.Background())
}

func (o ProjectTimeoutsOutput) ToProjectTimeoutsPtrOutputWithContext(ctx context.Context) ProjectTimeoutsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectTimeouts) *ProjectTimeouts {
		return &v
	}).(ProjectTimeoutsPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o ProjectTimeoutsOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectTimeouts) *string { return v.Create }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o ProjectTimeoutsOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectTimeouts) *string { return v.Delete }).(pulumi.StringPtrOutput)
}

type ProjectTimeoutsPtrOutput struct{ *pulumi.OutputState }

func (ProjectTimeoutsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectTimeouts)(nil)).Elem()
}

func (o ProjectTimeoutsPtrOutput) ToProjectTimeoutsPtrOutput() ProjectTimeoutsPtrOutput {
	return o
}

func (o ProjectTimeoutsPtrOutput) ToProjectTimeoutsPtrOutputWithContext(ctx context.Context) ProjectTimeoutsPtrOutput {
	return o
}

func (o ProjectTimeoutsPtrOutput) Elem() ProjectTimeoutsOutput {
	return o.ApplyT(func(v *ProjectTimeouts) ProjectTimeouts {
		if v != nil {
			return *v
		}
		var ret ProjectTimeouts
		return ret
	}).(ProjectTimeoutsOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o ProjectTimeoutsPtrOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Create
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o ProjectTimeoutsPtrOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Delete
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainSingleSignOnInput)(nil)).Elem(), DomainSingleSignOnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainSingleSignOnPtrInput)(nil)).Elem(), DomainSingleSignOnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainTimeoutsInput)(nil)).Elem(), DomainTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainTimeoutsPtrInput)(nil)).Elem(), DomainTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectFailureReasonInput)(nil)).Elem(), ProjectFailureReasonArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectFailureReasonArrayInput)(nil)).Elem(), ProjectFailureReasonArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectTimeoutsInput)(nil)).Elem(), ProjectTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectTimeoutsPtrInput)(nil)).Elem(), ProjectTimeoutsArgs{})
	pulumi.RegisterOutputType(DomainSingleSignOnOutput{})
	pulumi.RegisterOutputType(DomainSingleSignOnPtrOutput{})
	pulumi.RegisterOutputType(DomainTimeoutsOutput{})
	pulumi.RegisterOutputType(DomainTimeoutsPtrOutput{})
	pulumi.RegisterOutputType(ProjectFailureReasonOutput{})
	pulumi.RegisterOutputType(ProjectFailureReasonArrayOutput{})
	pulumi.RegisterOutputType(ProjectTimeoutsOutput{})
	pulumi.RegisterOutputType(ProjectTimeoutsPtrOutput{})
}
