// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datazone

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS DataZone Glossary Term.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/datazone"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/iam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"Version": "2012-10-17",
//				"Statement": []map[string]interface{}{
//					map[string]interface{}{
//						"Action": []string{
//							"sts:AssumeRole",
//							"sts:TagSession",
//						},
//						"Effect": "Allow",
//						"Principal": map[string]interface{}{
//							"Service": "datazone.amazonaws.com",
//						},
//					},
//					map[string]interface{}{
//						"Action": []string{
//							"sts:AssumeRole",
//							"sts:TagSession",
//						},
//						"Effect": "Allow",
//						"Principal": map[string]interface{}{
//							"Service": "cloudformation.amazonaws.com",
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			tmpJSON1, err := json.Marshal(map[string]interface{}{
//				"Version": "2012-10-17",
//				"Statement": []map[string]interface{}{
//					map[string]interface{}{
//						"Action": []string{
//							"datazone:*",
//							"ram:*",
//							"sso:*",
//							"kms:*",
//						},
//						"Effect":   "Allow",
//						"Resource": "*",
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json1 := string(tmpJSON1)
//			example, err := iam.NewRole(ctx, "example", &iam.RoleArgs{
//				Name:             pulumi.String("example"),
//				AssumeRolePolicy: pulumi.String(json0),
//				InlinePolicies: iam.RoleInlinePolicyArray{
//					&iam.RoleInlinePolicyArgs{
//						Name:   pulumi.String("example"),
//						Policy: pulumi.String(json1),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleDomain, err := datazone.NewDomain(ctx, "example", &datazone.DomainArgs{
//				Name:                pulumi.String("example_name"),
//				DomainExecutionRole: example.Arn,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ec2.NewSecurityGroup(ctx, "example", &ec2.SecurityGroupArgs{
//				Name: pulumi.String("example_name"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleProject, err := datazone.NewProject(ctx, "example", &datazone.ProjectArgs{
//				DomainIdentifier: exampleDomain.ID(),
//				GlossaryTerms: pulumi.StringArray{
//					pulumi.String("2N8w6XJCwZf"),
//				},
//				Name:              pulumi.String("example"),
//				SkipDeletionCheck: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			exampleGlossary, err := datazone.NewGlossary(ctx, "example", &datazone.GlossaryArgs{
//				Description:             pulumi.String("description"),
//				Name:                    pulumi.String("example"),
//				OwningProjectIdentifier: exampleProject.ID(),
//				Status:                  pulumi.String("ENABLED"),
//				DomainIdentifier:        exampleProject.DomainIdentifier,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = datazone.NewGlossaryTerm(ctx, "example", &datazone.GlossaryTermArgs{
//				DomainIdentifier:   exampleDomain.ID(),
//				GlossaryIdentifier: exampleGlossary.ID(),
//				Name:               pulumi.String("example"),
//				Status:             pulumi.String("ENABLED"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import DataZone Glossary Term using a comma-delimited string combining the `domain_identifier`, `id`, and the `glossary_identifier`. For example:
//
// ```sh
// $ pulumi import aws:datazone/glossaryTerm:GlossaryTerm example domain-id,glossary-term-id,glossary-id
// ```
type GlossaryTerm struct {
	pulumi.CustomResourceState

	// Time of glossary term creation.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Creator of glossary term.
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// Identifier of domain.
	DomainIdentifier pulumi.StringPtrOutput `pulumi:"domainIdentifier"`
	// Identifier of glossary.
	GlossaryIdentifier pulumi.StringOutput `pulumi:"glossaryIdentifier"`
	// Long description of entry.
	LongDescription pulumi.StringPtrOutput `pulumi:"longDescription"`
	// Name of glossary term.
	//
	// The following arguments are optional:
	Name pulumi.StringOutput `pulumi:"name"`
	// Short description of entry.
	ShortDescription pulumi.StringPtrOutput `pulumi:"shortDescription"`
	// If glossary term is ENABLED or DISABLED.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// Object classifying the term relations through the following attributes:
	TermRelations GlossaryTermTermRelationsPtrOutput `pulumi:"termRelations"`
	Timeouts      GlossaryTermTimeoutsPtrOutput      `pulumi:"timeouts"`
}

// NewGlossaryTerm registers a new resource with the given unique name, arguments, and options.
func NewGlossaryTerm(ctx *pulumi.Context,
	name string, args *GlossaryTermArgs, opts ...pulumi.ResourceOption) (*GlossaryTerm, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GlossaryIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'GlossaryIdentifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GlossaryTerm
	err := ctx.RegisterResource("aws:datazone/glossaryTerm:GlossaryTerm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGlossaryTerm gets an existing GlossaryTerm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGlossaryTerm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GlossaryTermState, opts ...pulumi.ResourceOption) (*GlossaryTerm, error) {
	var resource GlossaryTerm
	err := ctx.ReadResource("aws:datazone/glossaryTerm:GlossaryTerm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GlossaryTerm resources.
type glossaryTermState struct {
	// Time of glossary term creation.
	CreatedAt *string `pulumi:"createdAt"`
	// Creator of glossary term.
	CreatedBy *string `pulumi:"createdBy"`
	// Identifier of domain.
	DomainIdentifier *string `pulumi:"domainIdentifier"`
	// Identifier of glossary.
	GlossaryIdentifier *string `pulumi:"glossaryIdentifier"`
	// Long description of entry.
	LongDescription *string `pulumi:"longDescription"`
	// Name of glossary term.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// Short description of entry.
	ShortDescription *string `pulumi:"shortDescription"`
	// If glossary term is ENABLED or DISABLED.
	Status *string `pulumi:"status"`
	// Object classifying the term relations through the following attributes:
	TermRelations *GlossaryTermTermRelations `pulumi:"termRelations"`
	Timeouts      *GlossaryTermTimeouts      `pulumi:"timeouts"`
}

type GlossaryTermState struct {
	// Time of glossary term creation.
	CreatedAt pulumi.StringPtrInput
	// Creator of glossary term.
	CreatedBy pulumi.StringPtrInput
	// Identifier of domain.
	DomainIdentifier pulumi.StringPtrInput
	// Identifier of glossary.
	GlossaryIdentifier pulumi.StringPtrInput
	// Long description of entry.
	LongDescription pulumi.StringPtrInput
	// Name of glossary term.
	//
	// The following arguments are optional:
	Name pulumi.StringPtrInput
	// Short description of entry.
	ShortDescription pulumi.StringPtrInput
	// If glossary term is ENABLED or DISABLED.
	Status pulumi.StringPtrInput
	// Object classifying the term relations through the following attributes:
	TermRelations GlossaryTermTermRelationsPtrInput
	Timeouts      GlossaryTermTimeoutsPtrInput
}

func (GlossaryTermState) ElementType() reflect.Type {
	return reflect.TypeOf((*glossaryTermState)(nil)).Elem()
}

type glossaryTermArgs struct {
	// Identifier of domain.
	DomainIdentifier *string `pulumi:"domainIdentifier"`
	// Identifier of glossary.
	GlossaryIdentifier string `pulumi:"glossaryIdentifier"`
	// Long description of entry.
	LongDescription *string `pulumi:"longDescription"`
	// Name of glossary term.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// Short description of entry.
	ShortDescription *string `pulumi:"shortDescription"`
	// If glossary term is ENABLED or DISABLED.
	Status *string `pulumi:"status"`
	// Object classifying the term relations through the following attributes:
	TermRelations *GlossaryTermTermRelations `pulumi:"termRelations"`
	Timeouts      *GlossaryTermTimeouts      `pulumi:"timeouts"`
}

// The set of arguments for constructing a GlossaryTerm resource.
type GlossaryTermArgs struct {
	// Identifier of domain.
	DomainIdentifier pulumi.StringPtrInput
	// Identifier of glossary.
	GlossaryIdentifier pulumi.StringInput
	// Long description of entry.
	LongDescription pulumi.StringPtrInput
	// Name of glossary term.
	//
	// The following arguments are optional:
	Name pulumi.StringPtrInput
	// Short description of entry.
	ShortDescription pulumi.StringPtrInput
	// If glossary term is ENABLED or DISABLED.
	Status pulumi.StringPtrInput
	// Object classifying the term relations through the following attributes:
	TermRelations GlossaryTermTermRelationsPtrInput
	Timeouts      GlossaryTermTimeoutsPtrInput
}

func (GlossaryTermArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*glossaryTermArgs)(nil)).Elem()
}

type GlossaryTermInput interface {
	pulumi.Input

	ToGlossaryTermOutput() GlossaryTermOutput
	ToGlossaryTermOutputWithContext(ctx context.Context) GlossaryTermOutput
}

func (*GlossaryTerm) ElementType() reflect.Type {
	return reflect.TypeOf((**GlossaryTerm)(nil)).Elem()
}

func (i *GlossaryTerm) ToGlossaryTermOutput() GlossaryTermOutput {
	return i.ToGlossaryTermOutputWithContext(context.Background())
}

func (i *GlossaryTerm) ToGlossaryTermOutputWithContext(ctx context.Context) GlossaryTermOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlossaryTermOutput)
}

// GlossaryTermArrayInput is an input type that accepts GlossaryTermArray and GlossaryTermArrayOutput values.
// You can construct a concrete instance of `GlossaryTermArrayInput` via:
//
//	GlossaryTermArray{ GlossaryTermArgs{...} }
type GlossaryTermArrayInput interface {
	pulumi.Input

	ToGlossaryTermArrayOutput() GlossaryTermArrayOutput
	ToGlossaryTermArrayOutputWithContext(context.Context) GlossaryTermArrayOutput
}

type GlossaryTermArray []GlossaryTermInput

func (GlossaryTermArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GlossaryTerm)(nil)).Elem()
}

func (i GlossaryTermArray) ToGlossaryTermArrayOutput() GlossaryTermArrayOutput {
	return i.ToGlossaryTermArrayOutputWithContext(context.Background())
}

func (i GlossaryTermArray) ToGlossaryTermArrayOutputWithContext(ctx context.Context) GlossaryTermArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlossaryTermArrayOutput)
}

// GlossaryTermMapInput is an input type that accepts GlossaryTermMap and GlossaryTermMapOutput values.
// You can construct a concrete instance of `GlossaryTermMapInput` via:
//
//	GlossaryTermMap{ "key": GlossaryTermArgs{...} }
type GlossaryTermMapInput interface {
	pulumi.Input

	ToGlossaryTermMapOutput() GlossaryTermMapOutput
	ToGlossaryTermMapOutputWithContext(context.Context) GlossaryTermMapOutput
}

type GlossaryTermMap map[string]GlossaryTermInput

func (GlossaryTermMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GlossaryTerm)(nil)).Elem()
}

func (i GlossaryTermMap) ToGlossaryTermMapOutput() GlossaryTermMapOutput {
	return i.ToGlossaryTermMapOutputWithContext(context.Background())
}

func (i GlossaryTermMap) ToGlossaryTermMapOutputWithContext(ctx context.Context) GlossaryTermMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlossaryTermMapOutput)
}

type GlossaryTermOutput struct{ *pulumi.OutputState }

func (GlossaryTermOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlossaryTerm)(nil)).Elem()
}

func (o GlossaryTermOutput) ToGlossaryTermOutput() GlossaryTermOutput {
	return o
}

func (o GlossaryTermOutput) ToGlossaryTermOutputWithContext(ctx context.Context) GlossaryTermOutput {
	return o
}

// Time of glossary term creation.
func (o GlossaryTermOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryTerm) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Creator of glossary term.
func (o GlossaryTermOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryTerm) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// Identifier of domain.
func (o GlossaryTermOutput) DomainIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlossaryTerm) pulumi.StringPtrOutput { return v.DomainIdentifier }).(pulumi.StringPtrOutput)
}

// Identifier of glossary.
func (o GlossaryTermOutput) GlossaryIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryTerm) pulumi.StringOutput { return v.GlossaryIdentifier }).(pulumi.StringOutput)
}

// Long description of entry.
func (o GlossaryTermOutput) LongDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlossaryTerm) pulumi.StringPtrOutput { return v.LongDescription }).(pulumi.StringPtrOutput)
}

// Name of glossary term.
//
// The following arguments are optional:
func (o GlossaryTermOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryTerm) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Short description of entry.
func (o GlossaryTermOutput) ShortDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlossaryTerm) pulumi.StringPtrOutput { return v.ShortDescription }).(pulumi.StringPtrOutput)
}

// If glossary term is ENABLED or DISABLED.
func (o GlossaryTermOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlossaryTerm) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

// Object classifying the term relations through the following attributes:
func (o GlossaryTermOutput) TermRelations() GlossaryTermTermRelationsPtrOutput {
	return o.ApplyT(func(v *GlossaryTerm) GlossaryTermTermRelationsPtrOutput { return v.TermRelations }).(GlossaryTermTermRelationsPtrOutput)
}

func (o GlossaryTermOutput) Timeouts() GlossaryTermTimeoutsPtrOutput {
	return o.ApplyT(func(v *GlossaryTerm) GlossaryTermTimeoutsPtrOutput { return v.Timeouts }).(GlossaryTermTimeoutsPtrOutput)
}

type GlossaryTermArrayOutput struct{ *pulumi.OutputState }

func (GlossaryTermArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GlossaryTerm)(nil)).Elem()
}

func (o GlossaryTermArrayOutput) ToGlossaryTermArrayOutput() GlossaryTermArrayOutput {
	return o
}

func (o GlossaryTermArrayOutput) ToGlossaryTermArrayOutputWithContext(ctx context.Context) GlossaryTermArrayOutput {
	return o
}

func (o GlossaryTermArrayOutput) Index(i pulumi.IntInput) GlossaryTermOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GlossaryTerm {
		return vs[0].([]*GlossaryTerm)[vs[1].(int)]
	}).(GlossaryTermOutput)
}

type GlossaryTermMapOutput struct{ *pulumi.OutputState }

func (GlossaryTermMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GlossaryTerm)(nil)).Elem()
}

func (o GlossaryTermMapOutput) ToGlossaryTermMapOutput() GlossaryTermMapOutput {
	return o
}

func (o GlossaryTermMapOutput) ToGlossaryTermMapOutputWithContext(ctx context.Context) GlossaryTermMapOutput {
	return o
}

func (o GlossaryTermMapOutput) MapIndex(k pulumi.StringInput) GlossaryTermOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GlossaryTerm {
		return vs[0].(map[string]*GlossaryTerm)[vs[1].(string)]
	}).(GlossaryTermOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GlossaryTermInput)(nil)).Elem(), &GlossaryTerm{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlossaryTermArrayInput)(nil)).Elem(), GlossaryTermArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlossaryTermMapInput)(nil)).Elem(), GlossaryTermMap{})
	pulumi.RegisterOutputType(GlossaryTermOutput{})
	pulumi.RegisterOutputType(GlossaryTermArrayOutput{})
	pulumi.RegisterOutputType(GlossaryTermMapOutput{})
}
