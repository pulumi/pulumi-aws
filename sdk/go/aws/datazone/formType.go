// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datazone

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS DataZone Form Type.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/datazone"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/iam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"Version": "2012-10-17",
//				"Statement": []map[string]interface{}{
//					map[string]interface{}{
//						"Action": []string{
//							"sts:AssumeRole",
//							"sts:TagSession",
//						},
//						"Effect": "Allow",
//						"Principal": map[string]interface{}{
//							"Service": "datazone.amazonaws.com",
//						},
//					},
//					map[string]interface{}{
//						"Action": []string{
//							"sts:AssumeRole",
//							"sts:TagSession",
//						},
//						"Effect": "Allow",
//						"Principal": map[string]interface{}{
//							"Service": "cloudformation.amazonaws.com",
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			tmpJSON1, err := json.Marshal(map[string]interface{}{
//				"Version": "2012-10-17",
//				"Statement": []map[string]interface{}{
//					map[string]interface{}{
//						"Action": []string{
//							"datazone:*",
//							"ram:*",
//							"sso:*",
//							"kms:*",
//						},
//						"Effect":   "Allow",
//						"Resource": "*",
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json1 := string(tmpJSON1)
//			domainExecutionRole, err := iam.NewRole(ctx, "domain_execution_role", &iam.RoleArgs{
//				Name:             pulumi.String("example-role"),
//				AssumeRolePolicy: pulumi.String(json0),
//				InlinePolicies: iam.RoleInlinePolicyArray{
//					&iam.RoleInlinePolicyArgs{
//						Name:   pulumi.String("example-policy"),
//						Policy: pulumi.String(json1),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			test, err := datazone.NewDomain(ctx, "test", &datazone.DomainArgs{
//				Name:                pulumi.String("example"),
//				DomainExecutionRole: domainExecutionRole.Arn,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ec2.NewSecurityGroup(ctx, "test", &ec2.SecurityGroupArgs{
//				Name: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			testProject, err := datazone.NewProject(ctx, "test", &datazone.ProjectArgs{
//				DomainIdentifier: test.ID(),
//				GlossaryTerms: pulumi.StringArray{
//					pulumi.String("2N8w6XJCwZf"),
//				},
//				Name:              pulumi.String("example name"),
//				Description:       pulumi.String("desc"),
//				SkipDeletionCheck: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = datazone.NewFormType(ctx, "test", &datazone.FormTypeArgs{
//				Description:             pulumi.String("desc"),
//				Name:                    pulumi.String("SageMakerModelFormType"),
//				DomainIdentifier:        test.ID(),
//				OwningProjectIdentifier: testProject.ID(),
//				Status:                  pulumi.String("DISABLED"),
//				Model: &datazone.FormTypeModelArgs{
//					Smithy: pulumi.String(`	structure SageMakerModelFormType {
//				@required
//				@amazon.datazone#searchable
//				modelName: String
//
//				@required
//				modelArn: String
//
//				@required
//				creationTime: String
//				}
//
// `),
//
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import DataZone Form Type using a comma separated value of `domain_identifier`,`name`,`revision`. For example:
//
// ```sh
// $ pulumi import aws:datazone/formType:FormType example domain_identifier,name,revision
// ```
type FormType struct {
	pulumi.CustomResourceState

	// Creation time of the Form Type.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Creator of the Form Type.
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// Description of form type. Must have a length of between 1 and 2048 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Identifier of the domain.
	DomainIdentifier pulumi.StringOutput       `pulumi:"domainIdentifier"`
	Imports          FormTypeImportArrayOutput `pulumi:"imports"`
	// Object of the model of the form type that contains the following attributes.
	Model FormTypeModelPtrOutput `pulumi:"model"`
	// Name of the form type. Must be the name of the structure in smithy document.
	Name pulumi.StringOutput `pulumi:"name"`
	// Origin domain id of the Form Type.
	OriginDomainId pulumi.StringOutput `pulumi:"originDomainId"`
	// Origin project id of the Form Type.
	OriginProjectId pulumi.StringOutput `pulumi:"originProjectId"`
	// Identifier of project that owns the form type. Must follow regex of ^[a-zA-Z0-9_-]{1,36}.
	OwningProjectIdentifier pulumi.StringOutput `pulumi:"owningProjectIdentifier"`
	// Revision of the Form Type.
	Revision pulumi.StringOutput       `pulumi:"revision"`
	Status   pulumi.StringOutput       `pulumi:"status"`
	Timeouts FormTypeTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewFormType registers a new resource with the given unique name, arguments, and options.
func NewFormType(ctx *pulumi.Context,
	name string, args *FormTypeArgs, opts ...pulumi.ResourceOption) (*FormType, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'DomainIdentifier'")
	}
	if args.OwningProjectIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'OwningProjectIdentifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FormType
	err := ctx.RegisterResource("aws:datazone/formType:FormType", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFormType gets an existing FormType resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFormType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FormTypeState, opts ...pulumi.ResourceOption) (*FormType, error) {
	var resource FormType
	err := ctx.ReadResource("aws:datazone/formType:FormType", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FormType resources.
type formTypeState struct {
	// Creation time of the Form Type.
	CreatedAt *string `pulumi:"createdAt"`
	// Creator of the Form Type.
	CreatedBy *string `pulumi:"createdBy"`
	// Description of form type. Must have a length of between 1 and 2048 characters.
	Description *string `pulumi:"description"`
	// Identifier of the domain.
	DomainIdentifier *string          `pulumi:"domainIdentifier"`
	Imports          []FormTypeImport `pulumi:"imports"`
	// Object of the model of the form type that contains the following attributes.
	Model *FormTypeModel `pulumi:"model"`
	// Name of the form type. Must be the name of the structure in smithy document.
	Name *string `pulumi:"name"`
	// Origin domain id of the Form Type.
	OriginDomainId *string `pulumi:"originDomainId"`
	// Origin project id of the Form Type.
	OriginProjectId *string `pulumi:"originProjectId"`
	// Identifier of project that owns the form type. Must follow regex of ^[a-zA-Z0-9_-]{1,36}.
	OwningProjectIdentifier *string `pulumi:"owningProjectIdentifier"`
	// Revision of the Form Type.
	Revision *string           `pulumi:"revision"`
	Status   *string           `pulumi:"status"`
	Timeouts *FormTypeTimeouts `pulumi:"timeouts"`
}

type FormTypeState struct {
	// Creation time of the Form Type.
	CreatedAt pulumi.StringPtrInput
	// Creator of the Form Type.
	CreatedBy pulumi.StringPtrInput
	// Description of form type. Must have a length of between 1 and 2048 characters.
	Description pulumi.StringPtrInput
	// Identifier of the domain.
	DomainIdentifier pulumi.StringPtrInput
	Imports          FormTypeImportArrayInput
	// Object of the model of the form type that contains the following attributes.
	Model FormTypeModelPtrInput
	// Name of the form type. Must be the name of the structure in smithy document.
	Name pulumi.StringPtrInput
	// Origin domain id of the Form Type.
	OriginDomainId pulumi.StringPtrInput
	// Origin project id of the Form Type.
	OriginProjectId pulumi.StringPtrInput
	// Identifier of project that owns the form type. Must follow regex of ^[a-zA-Z0-9_-]{1,36}.
	OwningProjectIdentifier pulumi.StringPtrInput
	// Revision of the Form Type.
	Revision pulumi.StringPtrInput
	Status   pulumi.StringPtrInput
	Timeouts FormTypeTimeoutsPtrInput
}

func (FormTypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*formTypeState)(nil)).Elem()
}

type formTypeArgs struct {
	// Description of form type. Must have a length of between 1 and 2048 characters.
	Description *string `pulumi:"description"`
	// Identifier of the domain.
	DomainIdentifier string `pulumi:"domainIdentifier"`
	// Object of the model of the form type that contains the following attributes.
	Model *FormTypeModel `pulumi:"model"`
	// Name of the form type. Must be the name of the structure in smithy document.
	Name *string `pulumi:"name"`
	// Identifier of project that owns the form type. Must follow regex of ^[a-zA-Z0-9_-]{1,36}.
	OwningProjectIdentifier string            `pulumi:"owningProjectIdentifier"`
	Status                  *string           `pulumi:"status"`
	Timeouts                *FormTypeTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a FormType resource.
type FormTypeArgs struct {
	// Description of form type. Must have a length of between 1 and 2048 characters.
	Description pulumi.StringPtrInput
	// Identifier of the domain.
	DomainIdentifier pulumi.StringInput
	// Object of the model of the form type that contains the following attributes.
	Model FormTypeModelPtrInput
	// Name of the form type. Must be the name of the structure in smithy document.
	Name pulumi.StringPtrInput
	// Identifier of project that owns the form type. Must follow regex of ^[a-zA-Z0-9_-]{1,36}.
	OwningProjectIdentifier pulumi.StringInput
	Status                  pulumi.StringPtrInput
	Timeouts                FormTypeTimeoutsPtrInput
}

func (FormTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*formTypeArgs)(nil)).Elem()
}

type FormTypeInput interface {
	pulumi.Input

	ToFormTypeOutput() FormTypeOutput
	ToFormTypeOutputWithContext(ctx context.Context) FormTypeOutput
}

func (*FormType) ElementType() reflect.Type {
	return reflect.TypeOf((**FormType)(nil)).Elem()
}

func (i *FormType) ToFormTypeOutput() FormTypeOutput {
	return i.ToFormTypeOutputWithContext(context.Background())
}

func (i *FormType) ToFormTypeOutputWithContext(ctx context.Context) FormTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormTypeOutput)
}

// FormTypeArrayInput is an input type that accepts FormTypeArray and FormTypeArrayOutput values.
// You can construct a concrete instance of `FormTypeArrayInput` via:
//
//	FormTypeArray{ FormTypeArgs{...} }
type FormTypeArrayInput interface {
	pulumi.Input

	ToFormTypeArrayOutput() FormTypeArrayOutput
	ToFormTypeArrayOutputWithContext(context.Context) FormTypeArrayOutput
}

type FormTypeArray []FormTypeInput

func (FormTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FormType)(nil)).Elem()
}

func (i FormTypeArray) ToFormTypeArrayOutput() FormTypeArrayOutput {
	return i.ToFormTypeArrayOutputWithContext(context.Background())
}

func (i FormTypeArray) ToFormTypeArrayOutputWithContext(ctx context.Context) FormTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormTypeArrayOutput)
}

// FormTypeMapInput is an input type that accepts FormTypeMap and FormTypeMapOutput values.
// You can construct a concrete instance of `FormTypeMapInput` via:
//
//	FormTypeMap{ "key": FormTypeArgs{...} }
type FormTypeMapInput interface {
	pulumi.Input

	ToFormTypeMapOutput() FormTypeMapOutput
	ToFormTypeMapOutputWithContext(context.Context) FormTypeMapOutput
}

type FormTypeMap map[string]FormTypeInput

func (FormTypeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FormType)(nil)).Elem()
}

func (i FormTypeMap) ToFormTypeMapOutput() FormTypeMapOutput {
	return i.ToFormTypeMapOutputWithContext(context.Background())
}

func (i FormTypeMap) ToFormTypeMapOutputWithContext(ctx context.Context) FormTypeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormTypeMapOutput)
}

type FormTypeOutput struct{ *pulumi.OutputState }

func (FormTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FormType)(nil)).Elem()
}

func (o FormTypeOutput) ToFormTypeOutput() FormTypeOutput {
	return o
}

func (o FormTypeOutput) ToFormTypeOutputWithContext(ctx context.Context) FormTypeOutput {
	return o
}

// Creation time of the Form Type.
func (o FormTypeOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *FormType) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Creator of the Form Type.
func (o FormTypeOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *FormType) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// Description of form type. Must have a length of between 1 and 2048 characters.
func (o FormTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FormType) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Identifier of the domain.
func (o FormTypeOutput) DomainIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *FormType) pulumi.StringOutput { return v.DomainIdentifier }).(pulumi.StringOutput)
}

func (o FormTypeOutput) Imports() FormTypeImportArrayOutput {
	return o.ApplyT(func(v *FormType) FormTypeImportArrayOutput { return v.Imports }).(FormTypeImportArrayOutput)
}

// Object of the model of the form type that contains the following attributes.
func (o FormTypeOutput) Model() FormTypeModelPtrOutput {
	return o.ApplyT(func(v *FormType) FormTypeModelPtrOutput { return v.Model }).(FormTypeModelPtrOutput)
}

// Name of the form type. Must be the name of the structure in smithy document.
func (o FormTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FormType) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Origin domain id of the Form Type.
func (o FormTypeOutput) OriginDomainId() pulumi.StringOutput {
	return o.ApplyT(func(v *FormType) pulumi.StringOutput { return v.OriginDomainId }).(pulumi.StringOutput)
}

// Origin project id of the Form Type.
func (o FormTypeOutput) OriginProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *FormType) pulumi.StringOutput { return v.OriginProjectId }).(pulumi.StringOutput)
}

// Identifier of project that owns the form type. Must follow regex of ^[a-zA-Z0-9_-]{1,36}.
func (o FormTypeOutput) OwningProjectIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *FormType) pulumi.StringOutput { return v.OwningProjectIdentifier }).(pulumi.StringOutput)
}

// Revision of the Form Type.
func (o FormTypeOutput) Revision() pulumi.StringOutput {
	return o.ApplyT(func(v *FormType) pulumi.StringOutput { return v.Revision }).(pulumi.StringOutput)
}

func (o FormTypeOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *FormType) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o FormTypeOutput) Timeouts() FormTypeTimeoutsPtrOutput {
	return o.ApplyT(func(v *FormType) FormTypeTimeoutsPtrOutput { return v.Timeouts }).(FormTypeTimeoutsPtrOutput)
}

type FormTypeArrayOutput struct{ *pulumi.OutputState }

func (FormTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FormType)(nil)).Elem()
}

func (o FormTypeArrayOutput) ToFormTypeArrayOutput() FormTypeArrayOutput {
	return o
}

func (o FormTypeArrayOutput) ToFormTypeArrayOutputWithContext(ctx context.Context) FormTypeArrayOutput {
	return o
}

func (o FormTypeArrayOutput) Index(i pulumi.IntInput) FormTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FormType {
		return vs[0].([]*FormType)[vs[1].(int)]
	}).(FormTypeOutput)
}

type FormTypeMapOutput struct{ *pulumi.OutputState }

func (FormTypeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FormType)(nil)).Elem()
}

func (o FormTypeMapOutput) ToFormTypeMapOutput() FormTypeMapOutput {
	return o
}

func (o FormTypeMapOutput) ToFormTypeMapOutputWithContext(ctx context.Context) FormTypeMapOutput {
	return o
}

func (o FormTypeMapOutput) MapIndex(k pulumi.StringInput) FormTypeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FormType {
		return vs[0].(map[string]*FormType)[vs[1].(string)]
	}).(FormTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FormTypeInput)(nil)).Elem(), &FormType{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormTypeArrayInput)(nil)).Elem(), FormTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormTypeMapInput)(nil)).Elem(), FormTypeMap{})
	pulumi.RegisterOutputType(FormTypeOutput{})
	pulumi.RegisterOutputType(FormTypeArrayOutput{})
	pulumi.RegisterOutputType(FormTypeMapOutput{})
}
