// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package amplify

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DomainAssociation struct {
	pulumi.CustomResourceState

	AppId                            pulumi.StringOutput                   `pulumi:"appId"`
	Arn                              pulumi.StringOutput                   `pulumi:"arn"`
	CertificateVerificationDnsRecord pulumi.StringOutput                   `pulumi:"certificateVerificationDnsRecord"`
	DomainName                       pulumi.StringOutput                   `pulumi:"domainName"`
	SubDomains                       DomainAssociationSubDomainArrayOutput `pulumi:"subDomains"`
	WaitForVerification              pulumi.BoolPtrOutput                  `pulumi:"waitForVerification"`
}

// NewDomainAssociation registers a new resource with the given unique name, arguments, and options.
func NewDomainAssociation(ctx *pulumi.Context,
	name string, args *DomainAssociationArgs, opts ...pulumi.ResourceOption) (*DomainAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	if args.SubDomains == nil {
		return nil, errors.New("invalid value for required argument 'SubDomains'")
	}
	var resource DomainAssociation
	err := ctx.RegisterResource("aws:amplify/domainAssociation:DomainAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainAssociation gets an existing DomainAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainAssociationState, opts ...pulumi.ResourceOption) (*DomainAssociation, error) {
	var resource DomainAssociation
	err := ctx.ReadResource("aws:amplify/domainAssociation:DomainAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainAssociation resources.
type domainAssociationState struct {
	AppId                            *string                      `pulumi:"appId"`
	Arn                              *string                      `pulumi:"arn"`
	CertificateVerificationDnsRecord *string                      `pulumi:"certificateVerificationDnsRecord"`
	DomainName                       *string                      `pulumi:"domainName"`
	SubDomains                       []DomainAssociationSubDomain `pulumi:"subDomains"`
	WaitForVerification              *bool                        `pulumi:"waitForVerification"`
}

type DomainAssociationState struct {
	AppId                            pulumi.StringPtrInput
	Arn                              pulumi.StringPtrInput
	CertificateVerificationDnsRecord pulumi.StringPtrInput
	DomainName                       pulumi.StringPtrInput
	SubDomains                       DomainAssociationSubDomainArrayInput
	WaitForVerification              pulumi.BoolPtrInput
}

func (DomainAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainAssociationState)(nil)).Elem()
}

type domainAssociationArgs struct {
	AppId               string                       `pulumi:"appId"`
	DomainName          string                       `pulumi:"domainName"`
	SubDomains          []DomainAssociationSubDomain `pulumi:"subDomains"`
	WaitForVerification *bool                        `pulumi:"waitForVerification"`
}

// The set of arguments for constructing a DomainAssociation resource.
type DomainAssociationArgs struct {
	AppId               pulumi.StringInput
	DomainName          pulumi.StringInput
	SubDomains          DomainAssociationSubDomainArrayInput
	WaitForVerification pulumi.BoolPtrInput
}

func (DomainAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainAssociationArgs)(nil)).Elem()
}

type DomainAssociationInput interface {
	pulumi.Input

	ToDomainAssociationOutput() DomainAssociationOutput
	ToDomainAssociationOutputWithContext(ctx context.Context) DomainAssociationOutput
}

func (*DomainAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainAssociation)(nil)).Elem()
}

func (i *DomainAssociation) ToDomainAssociationOutput() DomainAssociationOutput {
	return i.ToDomainAssociationOutputWithContext(context.Background())
}

func (i *DomainAssociation) ToDomainAssociationOutputWithContext(ctx context.Context) DomainAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainAssociationOutput)
}

// DomainAssociationArrayInput is an input type that accepts DomainAssociationArray and DomainAssociationArrayOutput values.
// You can construct a concrete instance of `DomainAssociationArrayInput` via:
//
//	DomainAssociationArray{ DomainAssociationArgs{...} }
type DomainAssociationArrayInput interface {
	pulumi.Input

	ToDomainAssociationArrayOutput() DomainAssociationArrayOutput
	ToDomainAssociationArrayOutputWithContext(context.Context) DomainAssociationArrayOutput
}

type DomainAssociationArray []DomainAssociationInput

func (DomainAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainAssociation)(nil)).Elem()
}

func (i DomainAssociationArray) ToDomainAssociationArrayOutput() DomainAssociationArrayOutput {
	return i.ToDomainAssociationArrayOutputWithContext(context.Background())
}

func (i DomainAssociationArray) ToDomainAssociationArrayOutputWithContext(ctx context.Context) DomainAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainAssociationArrayOutput)
}

// DomainAssociationMapInput is an input type that accepts DomainAssociationMap and DomainAssociationMapOutput values.
// You can construct a concrete instance of `DomainAssociationMapInput` via:
//
//	DomainAssociationMap{ "key": DomainAssociationArgs{...} }
type DomainAssociationMapInput interface {
	pulumi.Input

	ToDomainAssociationMapOutput() DomainAssociationMapOutput
	ToDomainAssociationMapOutputWithContext(context.Context) DomainAssociationMapOutput
}

type DomainAssociationMap map[string]DomainAssociationInput

func (DomainAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainAssociation)(nil)).Elem()
}

func (i DomainAssociationMap) ToDomainAssociationMapOutput() DomainAssociationMapOutput {
	return i.ToDomainAssociationMapOutputWithContext(context.Background())
}

func (i DomainAssociationMap) ToDomainAssociationMapOutputWithContext(ctx context.Context) DomainAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainAssociationMapOutput)
}

type DomainAssociationOutput struct{ *pulumi.OutputState }

func (DomainAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainAssociation)(nil)).Elem()
}

func (o DomainAssociationOutput) ToDomainAssociationOutput() DomainAssociationOutput {
	return o
}

func (o DomainAssociationOutput) ToDomainAssociationOutputWithContext(ctx context.Context) DomainAssociationOutput {
	return o
}

func (o DomainAssociationOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainAssociation) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

func (o DomainAssociationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainAssociation) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o DomainAssociationOutput) CertificateVerificationDnsRecord() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainAssociation) pulumi.StringOutput { return v.CertificateVerificationDnsRecord }).(pulumi.StringOutput)
}

func (o DomainAssociationOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainAssociation) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

func (o DomainAssociationOutput) SubDomains() DomainAssociationSubDomainArrayOutput {
	return o.ApplyT(func(v *DomainAssociation) DomainAssociationSubDomainArrayOutput { return v.SubDomains }).(DomainAssociationSubDomainArrayOutput)
}

func (o DomainAssociationOutput) WaitForVerification() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainAssociation) pulumi.BoolPtrOutput { return v.WaitForVerification }).(pulumi.BoolPtrOutput)
}

type DomainAssociationArrayOutput struct{ *pulumi.OutputState }

func (DomainAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainAssociation)(nil)).Elem()
}

func (o DomainAssociationArrayOutput) ToDomainAssociationArrayOutput() DomainAssociationArrayOutput {
	return o
}

func (o DomainAssociationArrayOutput) ToDomainAssociationArrayOutputWithContext(ctx context.Context) DomainAssociationArrayOutput {
	return o
}

func (o DomainAssociationArrayOutput) Index(i pulumi.IntInput) DomainAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DomainAssociation {
		return vs[0].([]*DomainAssociation)[vs[1].(int)]
	}).(DomainAssociationOutput)
}

type DomainAssociationMapOutput struct{ *pulumi.OutputState }

func (DomainAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainAssociation)(nil)).Elem()
}

func (o DomainAssociationMapOutput) ToDomainAssociationMapOutput() DomainAssociationMapOutput {
	return o
}

func (o DomainAssociationMapOutput) ToDomainAssociationMapOutputWithContext(ctx context.Context) DomainAssociationMapOutput {
	return o
}

func (o DomainAssociationMapOutput) MapIndex(k pulumi.StringInput) DomainAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DomainAssociation {
		return vs[0].(map[string]*DomainAssociation)[vs[1].(string)]
	}).(DomainAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainAssociationInput)(nil)).Elem(), &DomainAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainAssociationArrayInput)(nil)).Elem(), DomainAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainAssociationMapInput)(nil)).Elem(), DomainAssociationMap{})
	pulumi.RegisterOutputType(DomainAssociationOutput{})
	pulumi.RegisterOutputType(DomainAssociationArrayOutput{})
	pulumi.RegisterOutputType(DomainAssociationMapOutput{})
}
