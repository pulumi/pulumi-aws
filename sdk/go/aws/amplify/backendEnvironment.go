// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package amplify

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BackendEnvironment struct {
	pulumi.CustomResourceState

	AppId               pulumi.StringOutput `pulumi:"appId"`
	Arn                 pulumi.StringOutput `pulumi:"arn"`
	DeploymentArtifacts pulumi.StringOutput `pulumi:"deploymentArtifacts"`
	EnvironmentName     pulumi.StringOutput `pulumi:"environmentName"`
	StackName           pulumi.StringOutput `pulumi:"stackName"`
}

// NewBackendEnvironment registers a new resource with the given unique name, arguments, and options.
func NewBackendEnvironment(ctx *pulumi.Context,
	name string, args *BackendEnvironmentArgs, opts ...pulumi.ResourceOption) (*BackendEnvironment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	if args.EnvironmentName == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentName'")
	}
	var resource BackendEnvironment
	err := ctx.RegisterResource("aws:amplify/backendEnvironment:BackendEnvironment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackendEnvironment gets an existing BackendEnvironment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackendEnvironment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackendEnvironmentState, opts ...pulumi.ResourceOption) (*BackendEnvironment, error) {
	var resource BackendEnvironment
	err := ctx.ReadResource("aws:amplify/backendEnvironment:BackendEnvironment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackendEnvironment resources.
type backendEnvironmentState struct {
	AppId               *string `pulumi:"appId"`
	Arn                 *string `pulumi:"arn"`
	DeploymentArtifacts *string `pulumi:"deploymentArtifacts"`
	EnvironmentName     *string `pulumi:"environmentName"`
	StackName           *string `pulumi:"stackName"`
}

type BackendEnvironmentState struct {
	AppId               pulumi.StringPtrInput
	Arn                 pulumi.StringPtrInput
	DeploymentArtifacts pulumi.StringPtrInput
	EnvironmentName     pulumi.StringPtrInput
	StackName           pulumi.StringPtrInput
}

func (BackendEnvironmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*backendEnvironmentState)(nil)).Elem()
}

type backendEnvironmentArgs struct {
	AppId               string  `pulumi:"appId"`
	DeploymentArtifacts *string `pulumi:"deploymentArtifacts"`
	EnvironmentName     string  `pulumi:"environmentName"`
	StackName           *string `pulumi:"stackName"`
}

// The set of arguments for constructing a BackendEnvironment resource.
type BackendEnvironmentArgs struct {
	AppId               pulumi.StringInput
	DeploymentArtifacts pulumi.StringPtrInput
	EnvironmentName     pulumi.StringInput
	StackName           pulumi.StringPtrInput
}

func (BackendEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backendEnvironmentArgs)(nil)).Elem()
}

type BackendEnvironmentInput interface {
	pulumi.Input

	ToBackendEnvironmentOutput() BackendEnvironmentOutput
	ToBackendEnvironmentOutputWithContext(ctx context.Context) BackendEnvironmentOutput
}

func (*BackendEnvironment) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendEnvironment)(nil)).Elem()
}

func (i *BackendEnvironment) ToBackendEnvironmentOutput() BackendEnvironmentOutput {
	return i.ToBackendEnvironmentOutputWithContext(context.Background())
}

func (i *BackendEnvironment) ToBackendEnvironmentOutputWithContext(ctx context.Context) BackendEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendEnvironmentOutput)
}

// BackendEnvironmentArrayInput is an input type that accepts BackendEnvironmentArray and BackendEnvironmentArrayOutput values.
// You can construct a concrete instance of `BackendEnvironmentArrayInput` via:
//
//	BackendEnvironmentArray{ BackendEnvironmentArgs{...} }
type BackendEnvironmentArrayInput interface {
	pulumi.Input

	ToBackendEnvironmentArrayOutput() BackendEnvironmentArrayOutput
	ToBackendEnvironmentArrayOutputWithContext(context.Context) BackendEnvironmentArrayOutput
}

type BackendEnvironmentArray []BackendEnvironmentInput

func (BackendEnvironmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackendEnvironment)(nil)).Elem()
}

func (i BackendEnvironmentArray) ToBackendEnvironmentArrayOutput() BackendEnvironmentArrayOutput {
	return i.ToBackendEnvironmentArrayOutputWithContext(context.Background())
}

func (i BackendEnvironmentArray) ToBackendEnvironmentArrayOutputWithContext(ctx context.Context) BackendEnvironmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendEnvironmentArrayOutput)
}

// BackendEnvironmentMapInput is an input type that accepts BackendEnvironmentMap and BackendEnvironmentMapOutput values.
// You can construct a concrete instance of `BackendEnvironmentMapInput` via:
//
//	BackendEnvironmentMap{ "key": BackendEnvironmentArgs{...} }
type BackendEnvironmentMapInput interface {
	pulumi.Input

	ToBackendEnvironmentMapOutput() BackendEnvironmentMapOutput
	ToBackendEnvironmentMapOutputWithContext(context.Context) BackendEnvironmentMapOutput
}

type BackendEnvironmentMap map[string]BackendEnvironmentInput

func (BackendEnvironmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackendEnvironment)(nil)).Elem()
}

func (i BackendEnvironmentMap) ToBackendEnvironmentMapOutput() BackendEnvironmentMapOutput {
	return i.ToBackendEnvironmentMapOutputWithContext(context.Background())
}

func (i BackendEnvironmentMap) ToBackendEnvironmentMapOutputWithContext(ctx context.Context) BackendEnvironmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendEnvironmentMapOutput)
}

type BackendEnvironmentOutput struct{ *pulumi.OutputState }

func (BackendEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendEnvironment)(nil)).Elem()
}

func (o BackendEnvironmentOutput) ToBackendEnvironmentOutput() BackendEnvironmentOutput {
	return o
}

func (o BackendEnvironmentOutput) ToBackendEnvironmentOutputWithContext(ctx context.Context) BackendEnvironmentOutput {
	return o
}

func (o BackendEnvironmentOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendEnvironment) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

func (o BackendEnvironmentOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendEnvironment) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o BackendEnvironmentOutput) DeploymentArtifacts() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendEnvironment) pulumi.StringOutput { return v.DeploymentArtifacts }).(pulumi.StringOutput)
}

func (o BackendEnvironmentOutput) EnvironmentName() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendEnvironment) pulumi.StringOutput { return v.EnvironmentName }).(pulumi.StringOutput)
}

func (o BackendEnvironmentOutput) StackName() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendEnvironment) pulumi.StringOutput { return v.StackName }).(pulumi.StringOutput)
}

type BackendEnvironmentArrayOutput struct{ *pulumi.OutputState }

func (BackendEnvironmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackendEnvironment)(nil)).Elem()
}

func (o BackendEnvironmentArrayOutput) ToBackendEnvironmentArrayOutput() BackendEnvironmentArrayOutput {
	return o
}

func (o BackendEnvironmentArrayOutput) ToBackendEnvironmentArrayOutputWithContext(ctx context.Context) BackendEnvironmentArrayOutput {
	return o
}

func (o BackendEnvironmentArrayOutput) Index(i pulumi.IntInput) BackendEnvironmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BackendEnvironment {
		return vs[0].([]*BackendEnvironment)[vs[1].(int)]
	}).(BackendEnvironmentOutput)
}

type BackendEnvironmentMapOutput struct{ *pulumi.OutputState }

func (BackendEnvironmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackendEnvironment)(nil)).Elem()
}

func (o BackendEnvironmentMapOutput) ToBackendEnvironmentMapOutput() BackendEnvironmentMapOutput {
	return o
}

func (o BackendEnvironmentMapOutput) ToBackendEnvironmentMapOutputWithContext(ctx context.Context) BackendEnvironmentMapOutput {
	return o
}

func (o BackendEnvironmentMapOutput) MapIndex(k pulumi.StringInput) BackendEnvironmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BackendEnvironment {
		return vs[0].(map[string]*BackendEnvironment)[vs[1].(string)]
	}).(BackendEnvironmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackendEnvironmentInput)(nil)).Elem(), &BackendEnvironment{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendEnvironmentArrayInput)(nil)).Elem(), BackendEnvironmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendEnvironmentMapInput)(nil)).Elem(), BackendEnvironmentMap{})
	pulumi.RegisterOutputType(BackendEnvironmentOutput{})
	pulumi.RegisterOutputType(BackendEnvironmentArrayOutput{})
	pulumi.RegisterOutputType(BackendEnvironmentMapOutput{})
}
