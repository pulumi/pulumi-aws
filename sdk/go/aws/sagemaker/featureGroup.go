// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sagemaker

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FeatureGroup struct {
	pulumi.CustomResourceState

	Arn                         pulumi.StringOutput                      `pulumi:"arn"`
	Description                 pulumi.StringPtrOutput                   `pulumi:"description"`
	EventTimeFeatureName        pulumi.StringOutput                      `pulumi:"eventTimeFeatureName"`
	FeatureDefinitions          FeatureGroupFeatureDefinitionArrayOutput `pulumi:"featureDefinitions"`
	FeatureGroupName            pulumi.StringOutput                      `pulumi:"featureGroupName"`
	OfflineStoreConfig          FeatureGroupOfflineStoreConfigPtrOutput  `pulumi:"offlineStoreConfig"`
	OnlineStoreConfig           FeatureGroupOnlineStoreConfigPtrOutput   `pulumi:"onlineStoreConfig"`
	RecordIdentifierFeatureName pulumi.StringOutput                      `pulumi:"recordIdentifierFeatureName"`
	RoleArn                     pulumi.StringOutput                      `pulumi:"roleArn"`
	Tags                        pulumi.StringMapOutput                   `pulumi:"tags"`
	TagsAll                     pulumi.StringMapOutput                   `pulumi:"tagsAll"`
}

// NewFeatureGroup registers a new resource with the given unique name, arguments, and options.
func NewFeatureGroup(ctx *pulumi.Context,
	name string, args *FeatureGroupArgs, opts ...pulumi.ResourceOption) (*FeatureGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EventTimeFeatureName == nil {
		return nil, errors.New("invalid value for required argument 'EventTimeFeatureName'")
	}
	if args.FeatureDefinitions == nil {
		return nil, errors.New("invalid value for required argument 'FeatureDefinitions'")
	}
	if args.FeatureGroupName == nil {
		return nil, errors.New("invalid value for required argument 'FeatureGroupName'")
	}
	if args.RecordIdentifierFeatureName == nil {
		return nil, errors.New("invalid value for required argument 'RecordIdentifierFeatureName'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	var resource FeatureGroup
	err := ctx.RegisterResource("aws:sagemaker/featureGroup:FeatureGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFeatureGroup gets an existing FeatureGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFeatureGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FeatureGroupState, opts ...pulumi.ResourceOption) (*FeatureGroup, error) {
	var resource FeatureGroup
	err := ctx.ReadResource("aws:sagemaker/featureGroup:FeatureGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FeatureGroup resources.
type featureGroupState struct {
	Arn                         *string                         `pulumi:"arn"`
	Description                 *string                         `pulumi:"description"`
	EventTimeFeatureName        *string                         `pulumi:"eventTimeFeatureName"`
	FeatureDefinitions          []FeatureGroupFeatureDefinition `pulumi:"featureDefinitions"`
	FeatureGroupName            *string                         `pulumi:"featureGroupName"`
	OfflineStoreConfig          *FeatureGroupOfflineStoreConfig `pulumi:"offlineStoreConfig"`
	OnlineStoreConfig           *FeatureGroupOnlineStoreConfig  `pulumi:"onlineStoreConfig"`
	RecordIdentifierFeatureName *string                         `pulumi:"recordIdentifierFeatureName"`
	RoleArn                     *string                         `pulumi:"roleArn"`
	Tags                        map[string]string               `pulumi:"tags"`
	TagsAll                     map[string]string               `pulumi:"tagsAll"`
}

type FeatureGroupState struct {
	Arn                         pulumi.StringPtrInput
	Description                 pulumi.StringPtrInput
	EventTimeFeatureName        pulumi.StringPtrInput
	FeatureDefinitions          FeatureGroupFeatureDefinitionArrayInput
	FeatureGroupName            pulumi.StringPtrInput
	OfflineStoreConfig          FeatureGroupOfflineStoreConfigPtrInput
	OnlineStoreConfig           FeatureGroupOnlineStoreConfigPtrInput
	RecordIdentifierFeatureName pulumi.StringPtrInput
	RoleArn                     pulumi.StringPtrInput
	Tags                        pulumi.StringMapInput
	TagsAll                     pulumi.StringMapInput
}

func (FeatureGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*featureGroupState)(nil)).Elem()
}

type featureGroupArgs struct {
	Description                 *string                         `pulumi:"description"`
	EventTimeFeatureName        string                          `pulumi:"eventTimeFeatureName"`
	FeatureDefinitions          []FeatureGroupFeatureDefinition `pulumi:"featureDefinitions"`
	FeatureGroupName            string                          `pulumi:"featureGroupName"`
	OfflineStoreConfig          *FeatureGroupOfflineStoreConfig `pulumi:"offlineStoreConfig"`
	OnlineStoreConfig           *FeatureGroupOnlineStoreConfig  `pulumi:"onlineStoreConfig"`
	RecordIdentifierFeatureName string                          `pulumi:"recordIdentifierFeatureName"`
	RoleArn                     string                          `pulumi:"roleArn"`
	Tags                        map[string]string               `pulumi:"tags"`
}

// The set of arguments for constructing a FeatureGroup resource.
type FeatureGroupArgs struct {
	Description                 pulumi.StringPtrInput
	EventTimeFeatureName        pulumi.StringInput
	FeatureDefinitions          FeatureGroupFeatureDefinitionArrayInput
	FeatureGroupName            pulumi.StringInput
	OfflineStoreConfig          FeatureGroupOfflineStoreConfigPtrInput
	OnlineStoreConfig           FeatureGroupOnlineStoreConfigPtrInput
	RecordIdentifierFeatureName pulumi.StringInput
	RoleArn                     pulumi.StringInput
	Tags                        pulumi.StringMapInput
}

func (FeatureGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*featureGroupArgs)(nil)).Elem()
}

type FeatureGroupInput interface {
	pulumi.Input

	ToFeatureGroupOutput() FeatureGroupOutput
	ToFeatureGroupOutputWithContext(ctx context.Context) FeatureGroupOutput
}

func (*FeatureGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureGroup)(nil)).Elem()
}

func (i *FeatureGroup) ToFeatureGroupOutput() FeatureGroupOutput {
	return i.ToFeatureGroupOutputWithContext(context.Background())
}

func (i *FeatureGroup) ToFeatureGroupOutputWithContext(ctx context.Context) FeatureGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureGroupOutput)
}

// FeatureGroupArrayInput is an input type that accepts FeatureGroupArray and FeatureGroupArrayOutput values.
// You can construct a concrete instance of `FeatureGroupArrayInput` via:
//
//	FeatureGroupArray{ FeatureGroupArgs{...} }
type FeatureGroupArrayInput interface {
	pulumi.Input

	ToFeatureGroupArrayOutput() FeatureGroupArrayOutput
	ToFeatureGroupArrayOutputWithContext(context.Context) FeatureGroupArrayOutput
}

type FeatureGroupArray []FeatureGroupInput

func (FeatureGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureGroup)(nil)).Elem()
}

func (i FeatureGroupArray) ToFeatureGroupArrayOutput() FeatureGroupArrayOutput {
	return i.ToFeatureGroupArrayOutputWithContext(context.Background())
}

func (i FeatureGroupArray) ToFeatureGroupArrayOutputWithContext(ctx context.Context) FeatureGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureGroupArrayOutput)
}

// FeatureGroupMapInput is an input type that accepts FeatureGroupMap and FeatureGroupMapOutput values.
// You can construct a concrete instance of `FeatureGroupMapInput` via:
//
//	FeatureGroupMap{ "key": FeatureGroupArgs{...} }
type FeatureGroupMapInput interface {
	pulumi.Input

	ToFeatureGroupMapOutput() FeatureGroupMapOutput
	ToFeatureGroupMapOutputWithContext(context.Context) FeatureGroupMapOutput
}

type FeatureGroupMap map[string]FeatureGroupInput

func (FeatureGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureGroup)(nil)).Elem()
}

func (i FeatureGroupMap) ToFeatureGroupMapOutput() FeatureGroupMapOutput {
	return i.ToFeatureGroupMapOutputWithContext(context.Background())
}

func (i FeatureGroupMap) ToFeatureGroupMapOutputWithContext(ctx context.Context) FeatureGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureGroupMapOutput)
}

type FeatureGroupOutput struct{ *pulumi.OutputState }

func (FeatureGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureGroup)(nil)).Elem()
}

func (o FeatureGroupOutput) ToFeatureGroupOutput() FeatureGroupOutput {
	return o
}

func (o FeatureGroupOutput) ToFeatureGroupOutputWithContext(ctx context.Context) FeatureGroupOutput {
	return o
}

func (o FeatureGroupOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureGroup) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o FeatureGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o FeatureGroupOutput) EventTimeFeatureName() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureGroup) pulumi.StringOutput { return v.EventTimeFeatureName }).(pulumi.StringOutput)
}

func (o FeatureGroupOutput) FeatureDefinitions() FeatureGroupFeatureDefinitionArrayOutput {
	return o.ApplyT(func(v *FeatureGroup) FeatureGroupFeatureDefinitionArrayOutput { return v.FeatureDefinitions }).(FeatureGroupFeatureDefinitionArrayOutput)
}

func (o FeatureGroupOutput) FeatureGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureGroup) pulumi.StringOutput { return v.FeatureGroupName }).(pulumi.StringOutput)
}

func (o FeatureGroupOutput) OfflineStoreConfig() FeatureGroupOfflineStoreConfigPtrOutput {
	return o.ApplyT(func(v *FeatureGroup) FeatureGroupOfflineStoreConfigPtrOutput { return v.OfflineStoreConfig }).(FeatureGroupOfflineStoreConfigPtrOutput)
}

func (o FeatureGroupOutput) OnlineStoreConfig() FeatureGroupOnlineStoreConfigPtrOutput {
	return o.ApplyT(func(v *FeatureGroup) FeatureGroupOnlineStoreConfigPtrOutput { return v.OnlineStoreConfig }).(FeatureGroupOnlineStoreConfigPtrOutput)
}

func (o FeatureGroupOutput) RecordIdentifierFeatureName() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureGroup) pulumi.StringOutput { return v.RecordIdentifierFeatureName }).(pulumi.StringOutput)
}

func (o FeatureGroupOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureGroup) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

func (o FeatureGroupOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FeatureGroup) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o FeatureGroupOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FeatureGroup) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type FeatureGroupArrayOutput struct{ *pulumi.OutputState }

func (FeatureGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureGroup)(nil)).Elem()
}

func (o FeatureGroupArrayOutput) ToFeatureGroupArrayOutput() FeatureGroupArrayOutput {
	return o
}

func (o FeatureGroupArrayOutput) ToFeatureGroupArrayOutputWithContext(ctx context.Context) FeatureGroupArrayOutput {
	return o
}

func (o FeatureGroupArrayOutput) Index(i pulumi.IntInput) FeatureGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FeatureGroup {
		return vs[0].([]*FeatureGroup)[vs[1].(int)]
	}).(FeatureGroupOutput)
}

type FeatureGroupMapOutput struct{ *pulumi.OutputState }

func (FeatureGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureGroup)(nil)).Elem()
}

func (o FeatureGroupMapOutput) ToFeatureGroupMapOutput() FeatureGroupMapOutput {
	return o
}

func (o FeatureGroupMapOutput) ToFeatureGroupMapOutputWithContext(ctx context.Context) FeatureGroupMapOutput {
	return o
}

func (o FeatureGroupMapOutput) MapIndex(k pulumi.StringInput) FeatureGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FeatureGroup {
		return vs[0].(map[string]*FeatureGroup)[vs[1].(string)]
	}).(FeatureGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureGroupInput)(nil)).Elem(), &FeatureGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureGroupArrayInput)(nil)).Elem(), FeatureGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureGroupMapInput)(nil)).Elem(), FeatureGroupMap{})
	pulumi.RegisterOutputType(FeatureGroupOutput{})
	pulumi.RegisterOutputType(FeatureGroupArrayOutput{})
	pulumi.RegisterOutputType(FeatureGroupMapOutput{})
}
