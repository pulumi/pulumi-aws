// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sagemaker

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Model struct {
	pulumi.CustomResourceState

	Arn                      pulumi.StringOutput                 `pulumi:"arn"`
	Containers               ModelContainerArrayOutput           `pulumi:"containers"`
	EnableNetworkIsolation   pulumi.BoolPtrOutput                `pulumi:"enableNetworkIsolation"`
	ExecutionRoleArn         pulumi.StringOutput                 `pulumi:"executionRoleArn"`
	InferenceExecutionConfig ModelInferenceExecutionConfigOutput `pulumi:"inferenceExecutionConfig"`
	Name                     pulumi.StringOutput                 `pulumi:"name"`
	PrimaryContainer         ModelPrimaryContainerPtrOutput      `pulumi:"primaryContainer"`
	Tags                     pulumi.StringMapOutput              `pulumi:"tags"`
	TagsAll                  pulumi.StringMapOutput              `pulumi:"tagsAll"`
	VpcConfig                ModelVpcConfigPtrOutput             `pulumi:"vpcConfig"`
}

// NewModel registers a new resource with the given unique name, arguments, and options.
func NewModel(ctx *pulumi.Context,
	name string, args *ModelArgs, opts ...pulumi.ResourceOption) (*Model, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExecutionRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'ExecutionRoleArn'")
	}
	var resource Model
	err := ctx.RegisterResource("aws:sagemaker/model:Model", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetModel gets an existing Model resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetModel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ModelState, opts ...pulumi.ResourceOption) (*Model, error) {
	var resource Model
	err := ctx.ReadResource("aws:sagemaker/model:Model", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Model resources.
type modelState struct {
	Arn                      *string                        `pulumi:"arn"`
	Containers               []ModelContainer               `pulumi:"containers"`
	EnableNetworkIsolation   *bool                          `pulumi:"enableNetworkIsolation"`
	ExecutionRoleArn         *string                        `pulumi:"executionRoleArn"`
	InferenceExecutionConfig *ModelInferenceExecutionConfig `pulumi:"inferenceExecutionConfig"`
	Name                     *string                        `pulumi:"name"`
	PrimaryContainer         *ModelPrimaryContainer         `pulumi:"primaryContainer"`
	Tags                     map[string]string              `pulumi:"tags"`
	TagsAll                  map[string]string              `pulumi:"tagsAll"`
	VpcConfig                *ModelVpcConfig                `pulumi:"vpcConfig"`
}

type ModelState struct {
	Arn                      pulumi.StringPtrInput
	Containers               ModelContainerArrayInput
	EnableNetworkIsolation   pulumi.BoolPtrInput
	ExecutionRoleArn         pulumi.StringPtrInput
	InferenceExecutionConfig ModelInferenceExecutionConfigPtrInput
	Name                     pulumi.StringPtrInput
	PrimaryContainer         ModelPrimaryContainerPtrInput
	Tags                     pulumi.StringMapInput
	TagsAll                  pulumi.StringMapInput
	VpcConfig                ModelVpcConfigPtrInput
}

func (ModelState) ElementType() reflect.Type {
	return reflect.TypeOf((*modelState)(nil)).Elem()
}

type modelArgs struct {
	Containers               []ModelContainer               `pulumi:"containers"`
	EnableNetworkIsolation   *bool                          `pulumi:"enableNetworkIsolation"`
	ExecutionRoleArn         string                         `pulumi:"executionRoleArn"`
	InferenceExecutionConfig *ModelInferenceExecutionConfig `pulumi:"inferenceExecutionConfig"`
	Name                     *string                        `pulumi:"name"`
	PrimaryContainer         *ModelPrimaryContainer         `pulumi:"primaryContainer"`
	Tags                     map[string]string              `pulumi:"tags"`
	VpcConfig                *ModelVpcConfig                `pulumi:"vpcConfig"`
}

// The set of arguments for constructing a Model resource.
type ModelArgs struct {
	Containers               ModelContainerArrayInput
	EnableNetworkIsolation   pulumi.BoolPtrInput
	ExecutionRoleArn         pulumi.StringInput
	InferenceExecutionConfig ModelInferenceExecutionConfigPtrInput
	Name                     pulumi.StringPtrInput
	PrimaryContainer         ModelPrimaryContainerPtrInput
	Tags                     pulumi.StringMapInput
	VpcConfig                ModelVpcConfigPtrInput
}

func (ModelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*modelArgs)(nil)).Elem()
}

type ModelInput interface {
	pulumi.Input

	ToModelOutput() ModelOutput
	ToModelOutputWithContext(ctx context.Context) ModelOutput
}

func (*Model) ElementType() reflect.Type {
	return reflect.TypeOf((**Model)(nil)).Elem()
}

func (i *Model) ToModelOutput() ModelOutput {
	return i.ToModelOutputWithContext(context.Background())
}

func (i *Model) ToModelOutputWithContext(ctx context.Context) ModelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelOutput)
}

// ModelArrayInput is an input type that accepts ModelArray and ModelArrayOutput values.
// You can construct a concrete instance of `ModelArrayInput` via:
//
//	ModelArray{ ModelArgs{...} }
type ModelArrayInput interface {
	pulumi.Input

	ToModelArrayOutput() ModelArrayOutput
	ToModelArrayOutputWithContext(context.Context) ModelArrayOutput
}

type ModelArray []ModelInput

func (ModelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Model)(nil)).Elem()
}

func (i ModelArray) ToModelArrayOutput() ModelArrayOutput {
	return i.ToModelArrayOutputWithContext(context.Background())
}

func (i ModelArray) ToModelArrayOutputWithContext(ctx context.Context) ModelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelArrayOutput)
}

// ModelMapInput is an input type that accepts ModelMap and ModelMapOutput values.
// You can construct a concrete instance of `ModelMapInput` via:
//
//	ModelMap{ "key": ModelArgs{...} }
type ModelMapInput interface {
	pulumi.Input

	ToModelMapOutput() ModelMapOutput
	ToModelMapOutputWithContext(context.Context) ModelMapOutput
}

type ModelMap map[string]ModelInput

func (ModelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Model)(nil)).Elem()
}

func (i ModelMap) ToModelMapOutput() ModelMapOutput {
	return i.ToModelMapOutputWithContext(context.Background())
}

func (i ModelMap) ToModelMapOutputWithContext(ctx context.Context) ModelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelMapOutput)
}

type ModelOutput struct{ *pulumi.OutputState }

func (ModelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Model)(nil)).Elem()
}

func (o ModelOutput) ToModelOutput() ModelOutput {
	return o
}

func (o ModelOutput) ToModelOutputWithContext(ctx context.Context) ModelOutput {
	return o
}

func (o ModelOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Model) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ModelOutput) Containers() ModelContainerArrayOutput {
	return o.ApplyT(func(v *Model) ModelContainerArrayOutput { return v.Containers }).(ModelContainerArrayOutput)
}

func (o ModelOutput) EnableNetworkIsolation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Model) pulumi.BoolPtrOutput { return v.EnableNetworkIsolation }).(pulumi.BoolPtrOutput)
}

func (o ModelOutput) ExecutionRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Model) pulumi.StringOutput { return v.ExecutionRoleArn }).(pulumi.StringOutput)
}

func (o ModelOutput) InferenceExecutionConfig() ModelInferenceExecutionConfigOutput {
	return o.ApplyT(func(v *Model) ModelInferenceExecutionConfigOutput { return v.InferenceExecutionConfig }).(ModelInferenceExecutionConfigOutput)
}

func (o ModelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Model) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ModelOutput) PrimaryContainer() ModelPrimaryContainerPtrOutput {
	return o.ApplyT(func(v *Model) ModelPrimaryContainerPtrOutput { return v.PrimaryContainer }).(ModelPrimaryContainerPtrOutput)
}

func (o ModelOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Model) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ModelOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Model) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o ModelOutput) VpcConfig() ModelVpcConfigPtrOutput {
	return o.ApplyT(func(v *Model) ModelVpcConfigPtrOutput { return v.VpcConfig }).(ModelVpcConfigPtrOutput)
}

type ModelArrayOutput struct{ *pulumi.OutputState }

func (ModelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Model)(nil)).Elem()
}

func (o ModelArrayOutput) ToModelArrayOutput() ModelArrayOutput {
	return o
}

func (o ModelArrayOutput) ToModelArrayOutputWithContext(ctx context.Context) ModelArrayOutput {
	return o
}

func (o ModelArrayOutput) Index(i pulumi.IntInput) ModelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Model {
		return vs[0].([]*Model)[vs[1].(int)]
	}).(ModelOutput)
}

type ModelMapOutput struct{ *pulumi.OutputState }

func (ModelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Model)(nil)).Elem()
}

func (o ModelMapOutput) ToModelMapOutput() ModelMapOutput {
	return o
}

func (o ModelMapOutput) ToModelMapOutputWithContext(ctx context.Context) ModelMapOutput {
	return o
}

func (o ModelMapOutput) MapIndex(k pulumi.StringInput) ModelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Model {
		return vs[0].(map[string]*Model)[vs[1].(string)]
	}).(ModelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ModelInput)(nil)).Elem(), &Model{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelArrayInput)(nil)).Elem(), ModelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelMapInput)(nil)).Elem(), ModelMap{})
	pulumi.RegisterOutputType(ModelOutput{})
	pulumi.RegisterOutputType(ModelArrayOutput{})
	pulumi.RegisterOutputType(ModelMapOutput{})
}
