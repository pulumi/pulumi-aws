// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sagemaker

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Workteam struct {
	pulumi.CustomResourceState

	Arn                       pulumi.StringOutput                        `pulumi:"arn"`
	Description               pulumi.StringOutput                        `pulumi:"description"`
	MemberDefinitions         WorkteamMemberDefinitionArrayOutput        `pulumi:"memberDefinitions"`
	NotificationConfiguration WorkteamNotificationConfigurationPtrOutput `pulumi:"notificationConfiguration"`
	Subdomain                 pulumi.StringOutput                        `pulumi:"subdomain"`
	Tags                      pulumi.StringMapOutput                     `pulumi:"tags"`
	TagsAll                   pulumi.StringMapOutput                     `pulumi:"tagsAll"`
	WorkforceName             pulumi.StringOutput                        `pulumi:"workforceName"`
	WorkteamName              pulumi.StringOutput                        `pulumi:"workteamName"`
}

// NewWorkteam registers a new resource with the given unique name, arguments, and options.
func NewWorkteam(ctx *pulumi.Context,
	name string, args *WorkteamArgs, opts ...pulumi.ResourceOption) (*Workteam, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.MemberDefinitions == nil {
		return nil, errors.New("invalid value for required argument 'MemberDefinitions'")
	}
	if args.WorkforceName == nil {
		return nil, errors.New("invalid value for required argument 'WorkforceName'")
	}
	if args.WorkteamName == nil {
		return nil, errors.New("invalid value for required argument 'WorkteamName'")
	}
	var resource Workteam
	err := ctx.RegisterResource("aws:sagemaker/workteam:Workteam", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkteam gets an existing Workteam resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkteam(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkteamState, opts ...pulumi.ResourceOption) (*Workteam, error) {
	var resource Workteam
	err := ctx.ReadResource("aws:sagemaker/workteam:Workteam", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Workteam resources.
type workteamState struct {
	Arn                       *string                            `pulumi:"arn"`
	Description               *string                            `pulumi:"description"`
	MemberDefinitions         []WorkteamMemberDefinition         `pulumi:"memberDefinitions"`
	NotificationConfiguration *WorkteamNotificationConfiguration `pulumi:"notificationConfiguration"`
	Subdomain                 *string                            `pulumi:"subdomain"`
	Tags                      map[string]string                  `pulumi:"tags"`
	TagsAll                   map[string]string                  `pulumi:"tagsAll"`
	WorkforceName             *string                            `pulumi:"workforceName"`
	WorkteamName              *string                            `pulumi:"workteamName"`
}

type WorkteamState struct {
	Arn                       pulumi.StringPtrInput
	Description               pulumi.StringPtrInput
	MemberDefinitions         WorkteamMemberDefinitionArrayInput
	NotificationConfiguration WorkteamNotificationConfigurationPtrInput
	Subdomain                 pulumi.StringPtrInput
	Tags                      pulumi.StringMapInput
	TagsAll                   pulumi.StringMapInput
	WorkforceName             pulumi.StringPtrInput
	WorkteamName              pulumi.StringPtrInput
}

func (WorkteamState) ElementType() reflect.Type {
	return reflect.TypeOf((*workteamState)(nil)).Elem()
}

type workteamArgs struct {
	Description               string                             `pulumi:"description"`
	MemberDefinitions         []WorkteamMemberDefinition         `pulumi:"memberDefinitions"`
	NotificationConfiguration *WorkteamNotificationConfiguration `pulumi:"notificationConfiguration"`
	Tags                      map[string]string                  `pulumi:"tags"`
	WorkforceName             string                             `pulumi:"workforceName"`
	WorkteamName              string                             `pulumi:"workteamName"`
}

// The set of arguments for constructing a Workteam resource.
type WorkteamArgs struct {
	Description               pulumi.StringInput
	MemberDefinitions         WorkteamMemberDefinitionArrayInput
	NotificationConfiguration WorkteamNotificationConfigurationPtrInput
	Tags                      pulumi.StringMapInput
	WorkforceName             pulumi.StringInput
	WorkteamName              pulumi.StringInput
}

func (WorkteamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workteamArgs)(nil)).Elem()
}

type WorkteamInput interface {
	pulumi.Input

	ToWorkteamOutput() WorkteamOutput
	ToWorkteamOutputWithContext(ctx context.Context) WorkteamOutput
}

func (*Workteam) ElementType() reflect.Type {
	return reflect.TypeOf((**Workteam)(nil)).Elem()
}

func (i *Workteam) ToWorkteamOutput() WorkteamOutput {
	return i.ToWorkteamOutputWithContext(context.Background())
}

func (i *Workteam) ToWorkteamOutputWithContext(ctx context.Context) WorkteamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkteamOutput)
}

// WorkteamArrayInput is an input type that accepts WorkteamArray and WorkteamArrayOutput values.
// You can construct a concrete instance of `WorkteamArrayInput` via:
//
//	WorkteamArray{ WorkteamArgs{...} }
type WorkteamArrayInput interface {
	pulumi.Input

	ToWorkteamArrayOutput() WorkteamArrayOutput
	ToWorkteamArrayOutputWithContext(context.Context) WorkteamArrayOutput
}

type WorkteamArray []WorkteamInput

func (WorkteamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Workteam)(nil)).Elem()
}

func (i WorkteamArray) ToWorkteamArrayOutput() WorkteamArrayOutput {
	return i.ToWorkteamArrayOutputWithContext(context.Background())
}

func (i WorkteamArray) ToWorkteamArrayOutputWithContext(ctx context.Context) WorkteamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkteamArrayOutput)
}

// WorkteamMapInput is an input type that accepts WorkteamMap and WorkteamMapOutput values.
// You can construct a concrete instance of `WorkteamMapInput` via:
//
//	WorkteamMap{ "key": WorkteamArgs{...} }
type WorkteamMapInput interface {
	pulumi.Input

	ToWorkteamMapOutput() WorkteamMapOutput
	ToWorkteamMapOutputWithContext(context.Context) WorkteamMapOutput
}

type WorkteamMap map[string]WorkteamInput

func (WorkteamMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Workteam)(nil)).Elem()
}

func (i WorkteamMap) ToWorkteamMapOutput() WorkteamMapOutput {
	return i.ToWorkteamMapOutputWithContext(context.Background())
}

func (i WorkteamMap) ToWorkteamMapOutputWithContext(ctx context.Context) WorkteamMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkteamMapOutput)
}

type WorkteamOutput struct{ *pulumi.OutputState }

func (WorkteamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Workteam)(nil)).Elem()
}

func (o WorkteamOutput) ToWorkteamOutput() WorkteamOutput {
	return o
}

func (o WorkteamOutput) ToWorkteamOutputWithContext(ctx context.Context) WorkteamOutput {
	return o
}

func (o WorkteamOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Workteam) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o WorkteamOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Workteam) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o WorkteamOutput) MemberDefinitions() WorkteamMemberDefinitionArrayOutput {
	return o.ApplyT(func(v *Workteam) WorkteamMemberDefinitionArrayOutput { return v.MemberDefinitions }).(WorkteamMemberDefinitionArrayOutput)
}

func (o WorkteamOutput) NotificationConfiguration() WorkteamNotificationConfigurationPtrOutput {
	return o.ApplyT(func(v *Workteam) WorkteamNotificationConfigurationPtrOutput { return v.NotificationConfiguration }).(WorkteamNotificationConfigurationPtrOutput)
}

func (o WorkteamOutput) Subdomain() pulumi.StringOutput {
	return o.ApplyT(func(v *Workteam) pulumi.StringOutput { return v.Subdomain }).(pulumi.StringOutput)
}

func (o WorkteamOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Workteam) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o WorkteamOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Workteam) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o WorkteamOutput) WorkforceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Workteam) pulumi.StringOutput { return v.WorkforceName }).(pulumi.StringOutput)
}

func (o WorkteamOutput) WorkteamName() pulumi.StringOutput {
	return o.ApplyT(func(v *Workteam) pulumi.StringOutput { return v.WorkteamName }).(pulumi.StringOutput)
}

type WorkteamArrayOutput struct{ *pulumi.OutputState }

func (WorkteamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Workteam)(nil)).Elem()
}

func (o WorkteamArrayOutput) ToWorkteamArrayOutput() WorkteamArrayOutput {
	return o
}

func (o WorkteamArrayOutput) ToWorkteamArrayOutputWithContext(ctx context.Context) WorkteamArrayOutput {
	return o
}

func (o WorkteamArrayOutput) Index(i pulumi.IntInput) WorkteamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Workteam {
		return vs[0].([]*Workteam)[vs[1].(int)]
	}).(WorkteamOutput)
}

type WorkteamMapOutput struct{ *pulumi.OutputState }

func (WorkteamMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Workteam)(nil)).Elem()
}

func (o WorkteamMapOutput) ToWorkteamMapOutput() WorkteamMapOutput {
	return o
}

func (o WorkteamMapOutput) ToWorkteamMapOutputWithContext(ctx context.Context) WorkteamMapOutput {
	return o
}

func (o WorkteamMapOutput) MapIndex(k pulumi.StringInput) WorkteamOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Workteam {
		return vs[0].(map[string]*Workteam)[vs[1].(string)]
	}).(WorkteamOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkteamInput)(nil)).Elem(), &Workteam{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkteamArrayInput)(nil)).Elem(), WorkteamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkteamMapInput)(nil)).Elem(), WorkteamMap{})
	pulumi.RegisterOutputType(WorkteamOutput{})
	pulumi.RegisterOutputType(WorkteamArrayOutput{})
	pulumi.RegisterOutputType(WorkteamMapOutput{})
}
