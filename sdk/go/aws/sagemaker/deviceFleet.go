// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sagemaker

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DeviceFleet struct {
	pulumi.CustomResourceState

	Arn                pulumi.StringOutput           `pulumi:"arn"`
	Description        pulumi.StringPtrOutput        `pulumi:"description"`
	DeviceFleetName    pulumi.StringOutput           `pulumi:"deviceFleetName"`
	EnableIotRoleAlias pulumi.BoolPtrOutput          `pulumi:"enableIotRoleAlias"`
	IotRoleAlias       pulumi.StringOutput           `pulumi:"iotRoleAlias"`
	OutputConfig       DeviceFleetOutputConfigOutput `pulumi:"outputConfig"`
	RoleArn            pulumi.StringOutput           `pulumi:"roleArn"`
	Tags               pulumi.StringMapOutput        `pulumi:"tags"`
	TagsAll            pulumi.StringMapOutput        `pulumi:"tagsAll"`
}

// NewDeviceFleet registers a new resource with the given unique name, arguments, and options.
func NewDeviceFleet(ctx *pulumi.Context,
	name string, args *DeviceFleetArgs, opts ...pulumi.ResourceOption) (*DeviceFleet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeviceFleetName == nil {
		return nil, errors.New("invalid value for required argument 'DeviceFleetName'")
	}
	if args.OutputConfig == nil {
		return nil, errors.New("invalid value for required argument 'OutputConfig'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	var resource DeviceFleet
	err := ctx.RegisterResource("aws:sagemaker/deviceFleet:DeviceFleet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeviceFleet gets an existing DeviceFleet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeviceFleet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeviceFleetState, opts ...pulumi.ResourceOption) (*DeviceFleet, error) {
	var resource DeviceFleet
	err := ctx.ReadResource("aws:sagemaker/deviceFleet:DeviceFleet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeviceFleet resources.
type deviceFleetState struct {
	Arn                *string                  `pulumi:"arn"`
	Description        *string                  `pulumi:"description"`
	DeviceFleetName    *string                  `pulumi:"deviceFleetName"`
	EnableIotRoleAlias *bool                    `pulumi:"enableIotRoleAlias"`
	IotRoleAlias       *string                  `pulumi:"iotRoleAlias"`
	OutputConfig       *DeviceFleetOutputConfig `pulumi:"outputConfig"`
	RoleArn            *string                  `pulumi:"roleArn"`
	Tags               map[string]string        `pulumi:"tags"`
	TagsAll            map[string]string        `pulumi:"tagsAll"`
}

type DeviceFleetState struct {
	Arn                pulumi.StringPtrInput
	Description        pulumi.StringPtrInput
	DeviceFleetName    pulumi.StringPtrInput
	EnableIotRoleAlias pulumi.BoolPtrInput
	IotRoleAlias       pulumi.StringPtrInput
	OutputConfig       DeviceFleetOutputConfigPtrInput
	RoleArn            pulumi.StringPtrInput
	Tags               pulumi.StringMapInput
	TagsAll            pulumi.StringMapInput
}

func (DeviceFleetState) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceFleetState)(nil)).Elem()
}

type deviceFleetArgs struct {
	Description        *string                 `pulumi:"description"`
	DeviceFleetName    string                  `pulumi:"deviceFleetName"`
	EnableIotRoleAlias *bool                   `pulumi:"enableIotRoleAlias"`
	OutputConfig       DeviceFleetOutputConfig `pulumi:"outputConfig"`
	RoleArn            string                  `pulumi:"roleArn"`
	Tags               map[string]string       `pulumi:"tags"`
}

// The set of arguments for constructing a DeviceFleet resource.
type DeviceFleetArgs struct {
	Description        pulumi.StringPtrInput
	DeviceFleetName    pulumi.StringInput
	EnableIotRoleAlias pulumi.BoolPtrInput
	OutputConfig       DeviceFleetOutputConfigInput
	RoleArn            pulumi.StringInput
	Tags               pulumi.StringMapInput
}

func (DeviceFleetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceFleetArgs)(nil)).Elem()
}

type DeviceFleetInput interface {
	pulumi.Input

	ToDeviceFleetOutput() DeviceFleetOutput
	ToDeviceFleetOutputWithContext(ctx context.Context) DeviceFleetOutput
}

func (*DeviceFleet) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceFleet)(nil)).Elem()
}

func (i *DeviceFleet) ToDeviceFleetOutput() DeviceFleetOutput {
	return i.ToDeviceFleetOutputWithContext(context.Background())
}

func (i *DeviceFleet) ToDeviceFleetOutputWithContext(ctx context.Context) DeviceFleetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceFleetOutput)
}

// DeviceFleetArrayInput is an input type that accepts DeviceFleetArray and DeviceFleetArrayOutput values.
// You can construct a concrete instance of `DeviceFleetArrayInput` via:
//
//	DeviceFleetArray{ DeviceFleetArgs{...} }
type DeviceFleetArrayInput interface {
	pulumi.Input

	ToDeviceFleetArrayOutput() DeviceFleetArrayOutput
	ToDeviceFleetArrayOutputWithContext(context.Context) DeviceFleetArrayOutput
}

type DeviceFleetArray []DeviceFleetInput

func (DeviceFleetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeviceFleet)(nil)).Elem()
}

func (i DeviceFleetArray) ToDeviceFleetArrayOutput() DeviceFleetArrayOutput {
	return i.ToDeviceFleetArrayOutputWithContext(context.Background())
}

func (i DeviceFleetArray) ToDeviceFleetArrayOutputWithContext(ctx context.Context) DeviceFleetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceFleetArrayOutput)
}

// DeviceFleetMapInput is an input type that accepts DeviceFleetMap and DeviceFleetMapOutput values.
// You can construct a concrete instance of `DeviceFleetMapInput` via:
//
//	DeviceFleetMap{ "key": DeviceFleetArgs{...} }
type DeviceFleetMapInput interface {
	pulumi.Input

	ToDeviceFleetMapOutput() DeviceFleetMapOutput
	ToDeviceFleetMapOutputWithContext(context.Context) DeviceFleetMapOutput
}

type DeviceFleetMap map[string]DeviceFleetInput

func (DeviceFleetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeviceFleet)(nil)).Elem()
}

func (i DeviceFleetMap) ToDeviceFleetMapOutput() DeviceFleetMapOutput {
	return i.ToDeviceFleetMapOutputWithContext(context.Background())
}

func (i DeviceFleetMap) ToDeviceFleetMapOutputWithContext(ctx context.Context) DeviceFleetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceFleetMapOutput)
}

type DeviceFleetOutput struct{ *pulumi.OutputState }

func (DeviceFleetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceFleet)(nil)).Elem()
}

func (o DeviceFleetOutput) ToDeviceFleetOutput() DeviceFleetOutput {
	return o
}

func (o DeviceFleetOutput) ToDeviceFleetOutputWithContext(ctx context.Context) DeviceFleetOutput {
	return o
}

func (o DeviceFleetOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceFleet) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o DeviceFleetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceFleet) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o DeviceFleetOutput) DeviceFleetName() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceFleet) pulumi.StringOutput { return v.DeviceFleetName }).(pulumi.StringOutput)
}

func (o DeviceFleetOutput) EnableIotRoleAlias() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceFleet) pulumi.BoolPtrOutput { return v.EnableIotRoleAlias }).(pulumi.BoolPtrOutput)
}

func (o DeviceFleetOutput) IotRoleAlias() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceFleet) pulumi.StringOutput { return v.IotRoleAlias }).(pulumi.StringOutput)
}

func (o DeviceFleetOutput) OutputConfig() DeviceFleetOutputConfigOutput {
	return o.ApplyT(func(v *DeviceFleet) DeviceFleetOutputConfigOutput { return v.OutputConfig }).(DeviceFleetOutputConfigOutput)
}

func (o DeviceFleetOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceFleet) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

func (o DeviceFleetOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DeviceFleet) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o DeviceFleetOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DeviceFleet) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type DeviceFleetArrayOutput struct{ *pulumi.OutputState }

func (DeviceFleetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeviceFleet)(nil)).Elem()
}

func (o DeviceFleetArrayOutput) ToDeviceFleetArrayOutput() DeviceFleetArrayOutput {
	return o
}

func (o DeviceFleetArrayOutput) ToDeviceFleetArrayOutputWithContext(ctx context.Context) DeviceFleetArrayOutput {
	return o
}

func (o DeviceFleetArrayOutput) Index(i pulumi.IntInput) DeviceFleetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DeviceFleet {
		return vs[0].([]*DeviceFleet)[vs[1].(int)]
	}).(DeviceFleetOutput)
}

type DeviceFleetMapOutput struct{ *pulumi.OutputState }

func (DeviceFleetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeviceFleet)(nil)).Elem()
}

func (o DeviceFleetMapOutput) ToDeviceFleetMapOutput() DeviceFleetMapOutput {
	return o
}

func (o DeviceFleetMapOutput) ToDeviceFleetMapOutputWithContext(ctx context.Context) DeviceFleetMapOutput {
	return o
}

func (o DeviceFleetMapOutput) MapIndex(k pulumi.StringInput) DeviceFleetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DeviceFleet {
		return vs[0].(map[string]*DeviceFleet)[vs[1].(string)]
	}).(DeviceFleetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceFleetInput)(nil)).Elem(), &DeviceFleet{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceFleetArrayInput)(nil)).Elem(), DeviceFleetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceFleetMapInput)(nil)).Elem(), DeviceFleetMap{})
	pulumi.RegisterOutputType(DeviceFleetOutput{})
	pulumi.RegisterOutputType(DeviceFleetArrayOutput{})
	pulumi.RegisterOutputType(DeviceFleetMapOutput{})
}
