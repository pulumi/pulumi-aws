// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sagemaker

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a SageMaker Studio Lifecycle Config resource.
//
// ## Example Usage
//
// ## Import
//
// SageMaker Code Studio Lifecycle Configs can be imported using the `studio_lifecycle_config_name`, e.g.,
//
// ```sh
//  $ pulumi import aws:sagemaker/studioLifecycleConfig:StudioLifecycleConfig example example
// ```
type StudioLifecycleConfig struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) assigned by AWS to this Studio Lifecycle Config.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The App type that the Lifecycle Configuration is attached to. Valid values are `JupyterServer` and `KernelGateway`.
	StudioLifecycleConfigAppType pulumi.StringOutput `pulumi:"studioLifecycleConfigAppType"`
	// The content of your Studio Lifecycle Configuration script. This content must be base64 encoded.
	StudioLifecycleConfigContent pulumi.StringOutput `pulumi:"studioLifecycleConfigContent"`
	// The name of the Studio Lifecycle Configuration to create.
	StudioLifecycleConfigName pulumi.StringOutput `pulumi:"studioLifecycleConfigName"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewStudioLifecycleConfig registers a new resource with the given unique name, arguments, and options.
func NewStudioLifecycleConfig(ctx *pulumi.Context,
	name string, args *StudioLifecycleConfigArgs, opts ...pulumi.ResourceOption) (*StudioLifecycleConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.StudioLifecycleConfigAppType == nil {
		return nil, errors.New("invalid value for required argument 'StudioLifecycleConfigAppType'")
	}
	if args.StudioLifecycleConfigContent == nil {
		return nil, errors.New("invalid value for required argument 'StudioLifecycleConfigContent'")
	}
	if args.StudioLifecycleConfigName == nil {
		return nil, errors.New("invalid value for required argument 'StudioLifecycleConfigName'")
	}
	var resource StudioLifecycleConfig
	err := ctx.RegisterResource("aws:sagemaker/studioLifecycleConfig:StudioLifecycleConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStudioLifecycleConfig gets an existing StudioLifecycleConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStudioLifecycleConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StudioLifecycleConfigState, opts ...pulumi.ResourceOption) (*StudioLifecycleConfig, error) {
	var resource StudioLifecycleConfig
	err := ctx.ReadResource("aws:sagemaker/studioLifecycleConfig:StudioLifecycleConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StudioLifecycleConfig resources.
type studioLifecycleConfigState struct {
	// The Amazon Resource Name (ARN) assigned by AWS to this Studio Lifecycle Config.
	Arn *string `pulumi:"arn"`
	// The App type that the Lifecycle Configuration is attached to. Valid values are `JupyterServer` and `KernelGateway`.
	StudioLifecycleConfigAppType *string `pulumi:"studioLifecycleConfigAppType"`
	// The content of your Studio Lifecycle Configuration script. This content must be base64 encoded.
	StudioLifecycleConfigContent *string `pulumi:"studioLifecycleConfigContent"`
	// The name of the Studio Lifecycle Configuration to create.
	StudioLifecycleConfigName *string `pulumi:"studioLifecycleConfigName"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type StudioLifecycleConfigState struct {
	// The Amazon Resource Name (ARN) assigned by AWS to this Studio Lifecycle Config.
	Arn pulumi.StringPtrInput
	// The App type that the Lifecycle Configuration is attached to. Valid values are `JupyterServer` and `KernelGateway`.
	StudioLifecycleConfigAppType pulumi.StringPtrInput
	// The content of your Studio Lifecycle Configuration script. This content must be base64 encoded.
	StudioLifecycleConfigContent pulumi.StringPtrInput
	// The name of the Studio Lifecycle Configuration to create.
	StudioLifecycleConfigName pulumi.StringPtrInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapInput
}

func (StudioLifecycleConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*studioLifecycleConfigState)(nil)).Elem()
}

type studioLifecycleConfigArgs struct {
	// The App type that the Lifecycle Configuration is attached to. Valid values are `JupyterServer` and `KernelGateway`.
	StudioLifecycleConfigAppType string `pulumi:"studioLifecycleConfigAppType"`
	// The content of your Studio Lifecycle Configuration script. This content must be base64 encoded.
	StudioLifecycleConfigContent string `pulumi:"studioLifecycleConfigContent"`
	// The name of the Studio Lifecycle Configuration to create.
	StudioLifecycleConfigName string `pulumi:"studioLifecycleConfigName"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a StudioLifecycleConfig resource.
type StudioLifecycleConfigArgs struct {
	// The App type that the Lifecycle Configuration is attached to. Valid values are `JupyterServer` and `KernelGateway`.
	StudioLifecycleConfigAppType pulumi.StringInput
	// The content of your Studio Lifecycle Configuration script. This content must be base64 encoded.
	StudioLifecycleConfigContent pulumi.StringInput
	// The name of the Studio Lifecycle Configuration to create.
	StudioLifecycleConfigName pulumi.StringInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
}

func (StudioLifecycleConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*studioLifecycleConfigArgs)(nil)).Elem()
}

type StudioLifecycleConfigInput interface {
	pulumi.Input

	ToStudioLifecycleConfigOutput() StudioLifecycleConfigOutput
	ToStudioLifecycleConfigOutputWithContext(ctx context.Context) StudioLifecycleConfigOutput
}

func (*StudioLifecycleConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioLifecycleConfig)(nil)).Elem()
}

func (i *StudioLifecycleConfig) ToStudioLifecycleConfigOutput() StudioLifecycleConfigOutput {
	return i.ToStudioLifecycleConfigOutputWithContext(context.Background())
}

func (i *StudioLifecycleConfig) ToStudioLifecycleConfigOutputWithContext(ctx context.Context) StudioLifecycleConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioLifecycleConfigOutput)
}

// StudioLifecycleConfigArrayInput is an input type that accepts StudioLifecycleConfigArray and StudioLifecycleConfigArrayOutput values.
// You can construct a concrete instance of `StudioLifecycleConfigArrayInput` via:
//
//          StudioLifecycleConfigArray{ StudioLifecycleConfigArgs{...} }
type StudioLifecycleConfigArrayInput interface {
	pulumi.Input

	ToStudioLifecycleConfigArrayOutput() StudioLifecycleConfigArrayOutput
	ToStudioLifecycleConfigArrayOutputWithContext(context.Context) StudioLifecycleConfigArrayOutput
}

type StudioLifecycleConfigArray []StudioLifecycleConfigInput

func (StudioLifecycleConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StudioLifecycleConfig)(nil)).Elem()
}

func (i StudioLifecycleConfigArray) ToStudioLifecycleConfigArrayOutput() StudioLifecycleConfigArrayOutput {
	return i.ToStudioLifecycleConfigArrayOutputWithContext(context.Background())
}

func (i StudioLifecycleConfigArray) ToStudioLifecycleConfigArrayOutputWithContext(ctx context.Context) StudioLifecycleConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioLifecycleConfigArrayOutput)
}

// StudioLifecycleConfigMapInput is an input type that accepts StudioLifecycleConfigMap and StudioLifecycleConfigMapOutput values.
// You can construct a concrete instance of `StudioLifecycleConfigMapInput` via:
//
//          StudioLifecycleConfigMap{ "key": StudioLifecycleConfigArgs{...} }
type StudioLifecycleConfigMapInput interface {
	pulumi.Input

	ToStudioLifecycleConfigMapOutput() StudioLifecycleConfigMapOutput
	ToStudioLifecycleConfigMapOutputWithContext(context.Context) StudioLifecycleConfigMapOutput
}

type StudioLifecycleConfigMap map[string]StudioLifecycleConfigInput

func (StudioLifecycleConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StudioLifecycleConfig)(nil)).Elem()
}

func (i StudioLifecycleConfigMap) ToStudioLifecycleConfigMapOutput() StudioLifecycleConfigMapOutput {
	return i.ToStudioLifecycleConfigMapOutputWithContext(context.Background())
}

func (i StudioLifecycleConfigMap) ToStudioLifecycleConfigMapOutputWithContext(ctx context.Context) StudioLifecycleConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioLifecycleConfigMapOutput)
}

type StudioLifecycleConfigOutput struct{ *pulumi.OutputState }

func (StudioLifecycleConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioLifecycleConfig)(nil)).Elem()
}

func (o StudioLifecycleConfigOutput) ToStudioLifecycleConfigOutput() StudioLifecycleConfigOutput {
	return o
}

func (o StudioLifecycleConfigOutput) ToStudioLifecycleConfigOutputWithContext(ctx context.Context) StudioLifecycleConfigOutput {
	return o
}

// The Amazon Resource Name (ARN) assigned by AWS to this Studio Lifecycle Config.
func (o StudioLifecycleConfigOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *StudioLifecycleConfig) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The App type that the Lifecycle Configuration is attached to. Valid values are `JupyterServer` and `KernelGateway`.
func (o StudioLifecycleConfigOutput) StudioLifecycleConfigAppType() pulumi.StringOutput {
	return o.ApplyT(func(v *StudioLifecycleConfig) pulumi.StringOutput { return v.StudioLifecycleConfigAppType }).(pulumi.StringOutput)
}

// The content of your Studio Lifecycle Configuration script. This content must be base64 encoded.
func (o StudioLifecycleConfigOutput) StudioLifecycleConfigContent() pulumi.StringOutput {
	return o.ApplyT(func(v *StudioLifecycleConfig) pulumi.StringOutput { return v.StudioLifecycleConfigContent }).(pulumi.StringOutput)
}

// The name of the Studio Lifecycle Configuration to create.
func (o StudioLifecycleConfigOutput) StudioLifecycleConfigName() pulumi.StringOutput {
	return o.ApplyT(func(v *StudioLifecycleConfig) pulumi.StringOutput { return v.StudioLifecycleConfigName }).(pulumi.StringOutput)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o StudioLifecycleConfigOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StudioLifecycleConfig) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o StudioLifecycleConfigOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StudioLifecycleConfig) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type StudioLifecycleConfigArrayOutput struct{ *pulumi.OutputState }

func (StudioLifecycleConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StudioLifecycleConfig)(nil)).Elem()
}

func (o StudioLifecycleConfigArrayOutput) ToStudioLifecycleConfigArrayOutput() StudioLifecycleConfigArrayOutput {
	return o
}

func (o StudioLifecycleConfigArrayOutput) ToStudioLifecycleConfigArrayOutputWithContext(ctx context.Context) StudioLifecycleConfigArrayOutput {
	return o
}

func (o StudioLifecycleConfigArrayOutput) Index(i pulumi.IntInput) StudioLifecycleConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StudioLifecycleConfig {
		return vs[0].([]*StudioLifecycleConfig)[vs[1].(int)]
	}).(StudioLifecycleConfigOutput)
}

type StudioLifecycleConfigMapOutput struct{ *pulumi.OutputState }

func (StudioLifecycleConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StudioLifecycleConfig)(nil)).Elem()
}

func (o StudioLifecycleConfigMapOutput) ToStudioLifecycleConfigMapOutput() StudioLifecycleConfigMapOutput {
	return o
}

func (o StudioLifecycleConfigMapOutput) ToStudioLifecycleConfigMapOutputWithContext(ctx context.Context) StudioLifecycleConfigMapOutput {
	return o
}

func (o StudioLifecycleConfigMapOutput) MapIndex(k pulumi.StringInput) StudioLifecycleConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StudioLifecycleConfig {
		return vs[0].(map[string]*StudioLifecycleConfig)[vs[1].(string)]
	}).(StudioLifecycleConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StudioLifecycleConfigInput)(nil)).Elem(), &StudioLifecycleConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioLifecycleConfigArrayInput)(nil)).Elem(), StudioLifecycleConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioLifecycleConfigMapInput)(nil)).Elem(), StudioLifecycleConfigMap{})
	pulumi.RegisterOutputType(StudioLifecycleConfigOutput{})
	pulumi.RegisterOutputType(StudioLifecycleConfigArrayOutput{})
	pulumi.RegisterOutputType(StudioLifecycleConfigMapOutput{})
}
