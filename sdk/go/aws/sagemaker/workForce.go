// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sagemaker

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Sagemaker Workforce resource.
//
// ## Example Usage
// ### Cognito Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/cognito"
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/sagemaker"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleUserPool, err := cognito.NewUserPool(ctx, "exampleUserPool", nil)
// 		if err != nil {
// 			return err
// 		}
// 		exampleUserPoolClient, err := cognito.NewUserPoolClient(ctx, "exampleUserPoolClient", &cognito.UserPoolClientArgs{
// 			GenerateSecret: pulumi.Bool(true),
// 			UserPoolId:     exampleUserPool.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleUserPoolDomain, err := cognito.NewUserPoolDomain(ctx, "exampleUserPoolDomain", &cognito.UserPoolDomainArgs{
// 			Domain:     pulumi.String("example"),
// 			UserPoolId: exampleUserPool.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = sagemaker.NewWorkForce(ctx, "exampleWorkForce", &sagemaker.WorkForceArgs{
// 			WorkforceName: pulumi.String("example"),
// 			CognitoConfig: &sagemaker.WorkForceCognitoConfigArgs{
// 				ClientId: exampleUserPoolClient.ID(),
// 				UserPool: exampleUserPoolDomain.UserPoolId,
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Oidc Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/sagemaker"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sagemaker.NewWorkForce(ctx, "example", &sagemaker.WorkForceArgs{
// 			OidcConfig: &sagemaker.WorkForceOidcConfigArgs{
// 				AuthorizationEndpoint: pulumi.String("https://example.com"),
// 				ClientId:              pulumi.String("example"),
// 				ClientSecret:          pulumi.String("example"),
// 				Issuer:                pulumi.String("https://example.com"),
// 				JwksUri:               pulumi.String("https://example.com"),
// 				LogoutEndpoint:        pulumi.String("https://example.com"),
// 				TokenEndpoint:         pulumi.String("https://example.com"),
// 				UserInfoEndpoint:      pulumi.String("https://example.com"),
// 			},
// 			WorkforceName: pulumi.String("example"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Sagemaker Workforces can be imported using the `workforce_name`, e.g.
//
// ```sh
//  $ pulumi import aws:sagemaker/workForce:WorkForce example example
// ```
type WorkForce struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) assigned by AWS to this Workforce.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Use this parameter to configure an Amazon Cognito private workforce. A single Cognito workforce is created using and corresponds to a single Amazon Cognito user pool. Conflicts with `oidcConfig`. see Cognito Config details below.
	CognitoConfig WorkForceCognitoConfigPtrOutput `pulumi:"cognitoConfig"`
	// Use this parameter to configure a private workforce using your own OIDC Identity Provider. Conflicts with `cognitoConfig`. see OIDC Config details below.
	OidcConfig WorkForceOidcConfigPtrOutput `pulumi:"oidcConfig"`
	// A list of IP address ranges Used to create an allow list of IP addresses for a private workforce. By default, a workforce isn't restricted to specific IP addresses. see Source Ip Config details below.
	SourceIpConfig WorkForceSourceIpConfigOutput `pulumi:"sourceIpConfig"`
	// The subdomain for your OIDC Identity Provider.
	Subdomain pulumi.StringOutput `pulumi:"subdomain"`
	// The name of the Workforce (must be unique).
	WorkforceName pulumi.StringOutput `pulumi:"workforceName"`
}

// NewWorkForce registers a new resource with the given unique name, arguments, and options.
func NewWorkForce(ctx *pulumi.Context,
	name string, args *WorkForceArgs, opts ...pulumi.ResourceOption) (*WorkForce, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.WorkforceName == nil {
		return nil, errors.New("invalid value for required argument 'WorkforceName'")
	}
	var resource WorkForce
	err := ctx.RegisterResource("aws:sagemaker/workForce:WorkForce", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkForce gets an existing WorkForce resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkForce(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkForceState, opts ...pulumi.ResourceOption) (*WorkForce, error) {
	var resource WorkForce
	err := ctx.ReadResource("aws:sagemaker/workForce:WorkForce", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkForce resources.
type workForceState struct {
	// The Amazon Resource Name (ARN) assigned by AWS to this Workforce.
	Arn *string `pulumi:"arn"`
	// Use this parameter to configure an Amazon Cognito private workforce. A single Cognito workforce is created using and corresponds to a single Amazon Cognito user pool. Conflicts with `oidcConfig`. see Cognito Config details below.
	CognitoConfig *WorkForceCognitoConfig `pulumi:"cognitoConfig"`
	// Use this parameter to configure a private workforce using your own OIDC Identity Provider. Conflicts with `cognitoConfig`. see OIDC Config details below.
	OidcConfig *WorkForceOidcConfig `pulumi:"oidcConfig"`
	// A list of IP address ranges Used to create an allow list of IP addresses for a private workforce. By default, a workforce isn't restricted to specific IP addresses. see Source Ip Config details below.
	SourceIpConfig *WorkForceSourceIpConfig `pulumi:"sourceIpConfig"`
	// The subdomain for your OIDC Identity Provider.
	Subdomain *string `pulumi:"subdomain"`
	// The name of the Workforce (must be unique).
	WorkforceName *string `pulumi:"workforceName"`
}

type WorkForceState struct {
	// The Amazon Resource Name (ARN) assigned by AWS to this Workforce.
	Arn pulumi.StringPtrInput
	// Use this parameter to configure an Amazon Cognito private workforce. A single Cognito workforce is created using and corresponds to a single Amazon Cognito user pool. Conflicts with `oidcConfig`. see Cognito Config details below.
	CognitoConfig WorkForceCognitoConfigPtrInput
	// Use this parameter to configure a private workforce using your own OIDC Identity Provider. Conflicts with `cognitoConfig`. see OIDC Config details below.
	OidcConfig WorkForceOidcConfigPtrInput
	// A list of IP address ranges Used to create an allow list of IP addresses for a private workforce. By default, a workforce isn't restricted to specific IP addresses. see Source Ip Config details below.
	SourceIpConfig WorkForceSourceIpConfigPtrInput
	// The subdomain for your OIDC Identity Provider.
	Subdomain pulumi.StringPtrInput
	// The name of the Workforce (must be unique).
	WorkforceName pulumi.StringPtrInput
}

func (WorkForceState) ElementType() reflect.Type {
	return reflect.TypeOf((*workForceState)(nil)).Elem()
}

type workForceArgs struct {
	// Use this parameter to configure an Amazon Cognito private workforce. A single Cognito workforce is created using and corresponds to a single Amazon Cognito user pool. Conflicts with `oidcConfig`. see Cognito Config details below.
	CognitoConfig *WorkForceCognitoConfig `pulumi:"cognitoConfig"`
	// Use this parameter to configure a private workforce using your own OIDC Identity Provider. Conflicts with `cognitoConfig`. see OIDC Config details below.
	OidcConfig *WorkForceOidcConfig `pulumi:"oidcConfig"`
	// A list of IP address ranges Used to create an allow list of IP addresses for a private workforce. By default, a workforce isn't restricted to specific IP addresses. see Source Ip Config details below.
	SourceIpConfig *WorkForceSourceIpConfig `pulumi:"sourceIpConfig"`
	// The name of the Workforce (must be unique).
	WorkforceName string `pulumi:"workforceName"`
}

// The set of arguments for constructing a WorkForce resource.
type WorkForceArgs struct {
	// Use this parameter to configure an Amazon Cognito private workforce. A single Cognito workforce is created using and corresponds to a single Amazon Cognito user pool. Conflicts with `oidcConfig`. see Cognito Config details below.
	CognitoConfig WorkForceCognitoConfigPtrInput
	// Use this parameter to configure a private workforce using your own OIDC Identity Provider. Conflicts with `cognitoConfig`. see OIDC Config details below.
	OidcConfig WorkForceOidcConfigPtrInput
	// A list of IP address ranges Used to create an allow list of IP addresses for a private workforce. By default, a workforce isn't restricted to specific IP addresses. see Source Ip Config details below.
	SourceIpConfig WorkForceSourceIpConfigPtrInput
	// The name of the Workforce (must be unique).
	WorkforceName pulumi.StringInput
}

func (WorkForceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workForceArgs)(nil)).Elem()
}

type WorkForceInput interface {
	pulumi.Input

	ToWorkForceOutput() WorkForceOutput
	ToWorkForceOutputWithContext(ctx context.Context) WorkForceOutput
}

func (*WorkForce) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkForce)(nil))
}

func (i *WorkForce) ToWorkForceOutput() WorkForceOutput {
	return i.ToWorkForceOutputWithContext(context.Background())
}

func (i *WorkForce) ToWorkForceOutputWithContext(ctx context.Context) WorkForceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkForceOutput)
}

func (i *WorkForce) ToWorkForcePtrOutput() WorkForcePtrOutput {
	return i.ToWorkForcePtrOutputWithContext(context.Background())
}

func (i *WorkForce) ToWorkForcePtrOutputWithContext(ctx context.Context) WorkForcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkForcePtrOutput)
}

type WorkForcePtrInput interface {
	pulumi.Input

	ToWorkForcePtrOutput() WorkForcePtrOutput
	ToWorkForcePtrOutputWithContext(ctx context.Context) WorkForcePtrOutput
}

type workForcePtrType WorkForceArgs

func (*workForcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkForce)(nil))
}

func (i *workForcePtrType) ToWorkForcePtrOutput() WorkForcePtrOutput {
	return i.ToWorkForcePtrOutputWithContext(context.Background())
}

func (i *workForcePtrType) ToWorkForcePtrOutputWithContext(ctx context.Context) WorkForcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkForcePtrOutput)
}

// WorkForceArrayInput is an input type that accepts WorkForceArray and WorkForceArrayOutput values.
// You can construct a concrete instance of `WorkForceArrayInput` via:
//
//          WorkForceArray{ WorkForceArgs{...} }
type WorkForceArrayInput interface {
	pulumi.Input

	ToWorkForceArrayOutput() WorkForceArrayOutput
	ToWorkForceArrayOutputWithContext(context.Context) WorkForceArrayOutput
}

type WorkForceArray []WorkForceInput

func (WorkForceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkForce)(nil)).Elem()
}

func (i WorkForceArray) ToWorkForceArrayOutput() WorkForceArrayOutput {
	return i.ToWorkForceArrayOutputWithContext(context.Background())
}

func (i WorkForceArray) ToWorkForceArrayOutputWithContext(ctx context.Context) WorkForceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkForceArrayOutput)
}

// WorkForceMapInput is an input type that accepts WorkForceMap and WorkForceMapOutput values.
// You can construct a concrete instance of `WorkForceMapInput` via:
//
//          WorkForceMap{ "key": WorkForceArgs{...} }
type WorkForceMapInput interface {
	pulumi.Input

	ToWorkForceMapOutput() WorkForceMapOutput
	ToWorkForceMapOutputWithContext(context.Context) WorkForceMapOutput
}

type WorkForceMap map[string]WorkForceInput

func (WorkForceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkForce)(nil)).Elem()
}

func (i WorkForceMap) ToWorkForceMapOutput() WorkForceMapOutput {
	return i.ToWorkForceMapOutputWithContext(context.Background())
}

func (i WorkForceMap) ToWorkForceMapOutputWithContext(ctx context.Context) WorkForceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkForceMapOutput)
}

type WorkForceOutput struct{ *pulumi.OutputState }

func (WorkForceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkForce)(nil))
}

func (o WorkForceOutput) ToWorkForceOutput() WorkForceOutput {
	return o
}

func (o WorkForceOutput) ToWorkForceOutputWithContext(ctx context.Context) WorkForceOutput {
	return o
}

func (o WorkForceOutput) ToWorkForcePtrOutput() WorkForcePtrOutput {
	return o.ToWorkForcePtrOutputWithContext(context.Background())
}

func (o WorkForceOutput) ToWorkForcePtrOutputWithContext(ctx context.Context) WorkForcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkForce) *WorkForce {
		return &v
	}).(WorkForcePtrOutput)
}

type WorkForcePtrOutput struct{ *pulumi.OutputState }

func (WorkForcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkForce)(nil))
}

func (o WorkForcePtrOutput) ToWorkForcePtrOutput() WorkForcePtrOutput {
	return o
}

func (o WorkForcePtrOutput) ToWorkForcePtrOutputWithContext(ctx context.Context) WorkForcePtrOutput {
	return o
}

func (o WorkForcePtrOutput) Elem() WorkForceOutput {
	return o.ApplyT(func(v *WorkForce) WorkForce {
		if v != nil {
			return *v
		}
		var ret WorkForce
		return ret
	}).(WorkForceOutput)
}

type WorkForceArrayOutput struct{ *pulumi.OutputState }

func (WorkForceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WorkForce)(nil))
}

func (o WorkForceArrayOutput) ToWorkForceArrayOutput() WorkForceArrayOutput {
	return o
}

func (o WorkForceArrayOutput) ToWorkForceArrayOutputWithContext(ctx context.Context) WorkForceArrayOutput {
	return o
}

func (o WorkForceArrayOutput) Index(i pulumi.IntInput) WorkForceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WorkForce {
		return vs[0].([]WorkForce)[vs[1].(int)]
	}).(WorkForceOutput)
}

type WorkForceMapOutput struct{ *pulumi.OutputState }

func (WorkForceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]WorkForce)(nil))
}

func (o WorkForceMapOutput) ToWorkForceMapOutput() WorkForceMapOutput {
	return o
}

func (o WorkForceMapOutput) ToWorkForceMapOutputWithContext(ctx context.Context) WorkForceMapOutput {
	return o
}

func (o WorkForceMapOutput) MapIndex(k pulumi.StringInput) WorkForceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) WorkForce {
		return vs[0].(map[string]WorkForce)[vs[1].(string)]
	}).(WorkForceOutput)
}

func init() {
	pulumi.RegisterOutputType(WorkForceOutput{})
	pulumi.RegisterOutputType(WorkForcePtrOutput{})
	pulumi.RegisterOutputType(WorkForceArrayOutput{})
	pulumi.RegisterOutputType(WorkForceMapOutput{})
}
