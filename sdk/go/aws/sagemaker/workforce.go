// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sagemaker

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Workforce struct {
	pulumi.CustomResourceState

	Arn                pulumi.StringOutput                  `pulumi:"arn"`
	CognitoConfig      WorkforceCognitoConfigPtrOutput      `pulumi:"cognitoConfig"`
	OidcConfig         WorkforceOidcConfigPtrOutput         `pulumi:"oidcConfig"`
	SourceIpConfig     WorkforceSourceIpConfigOutput        `pulumi:"sourceIpConfig"`
	Subdomain          pulumi.StringOutput                  `pulumi:"subdomain"`
	WorkforceName      pulumi.StringOutput                  `pulumi:"workforceName"`
	WorkforceVpcConfig WorkforceWorkforceVpcConfigPtrOutput `pulumi:"workforceVpcConfig"`
}

// NewWorkforce registers a new resource with the given unique name, arguments, and options.
func NewWorkforce(ctx *pulumi.Context,
	name string, args *WorkforceArgs, opts ...pulumi.ResourceOption) (*Workforce, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.WorkforceName == nil {
		return nil, errors.New("invalid value for required argument 'WorkforceName'")
	}
	var resource Workforce
	err := ctx.RegisterResource("aws:sagemaker/workforce:Workforce", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkforce gets an existing Workforce resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkforce(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkforceState, opts ...pulumi.ResourceOption) (*Workforce, error) {
	var resource Workforce
	err := ctx.ReadResource("aws:sagemaker/workforce:Workforce", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Workforce resources.
type workforceState struct {
	Arn                *string                      `pulumi:"arn"`
	CognitoConfig      *WorkforceCognitoConfig      `pulumi:"cognitoConfig"`
	OidcConfig         *WorkforceOidcConfig         `pulumi:"oidcConfig"`
	SourceIpConfig     *WorkforceSourceIpConfig     `pulumi:"sourceIpConfig"`
	Subdomain          *string                      `pulumi:"subdomain"`
	WorkforceName      *string                      `pulumi:"workforceName"`
	WorkforceVpcConfig *WorkforceWorkforceVpcConfig `pulumi:"workforceVpcConfig"`
}

type WorkforceState struct {
	Arn                pulumi.StringPtrInput
	CognitoConfig      WorkforceCognitoConfigPtrInput
	OidcConfig         WorkforceOidcConfigPtrInput
	SourceIpConfig     WorkforceSourceIpConfigPtrInput
	Subdomain          pulumi.StringPtrInput
	WorkforceName      pulumi.StringPtrInput
	WorkforceVpcConfig WorkforceWorkforceVpcConfigPtrInput
}

func (WorkforceState) ElementType() reflect.Type {
	return reflect.TypeOf((*workforceState)(nil)).Elem()
}

type workforceArgs struct {
	CognitoConfig      *WorkforceCognitoConfig      `pulumi:"cognitoConfig"`
	OidcConfig         *WorkforceOidcConfig         `pulumi:"oidcConfig"`
	SourceIpConfig     *WorkforceSourceIpConfig     `pulumi:"sourceIpConfig"`
	WorkforceName      string                       `pulumi:"workforceName"`
	WorkforceVpcConfig *WorkforceWorkforceVpcConfig `pulumi:"workforceVpcConfig"`
}

// The set of arguments for constructing a Workforce resource.
type WorkforceArgs struct {
	CognitoConfig      WorkforceCognitoConfigPtrInput
	OidcConfig         WorkforceOidcConfigPtrInput
	SourceIpConfig     WorkforceSourceIpConfigPtrInput
	WorkforceName      pulumi.StringInput
	WorkforceVpcConfig WorkforceWorkforceVpcConfigPtrInput
}

func (WorkforceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workforceArgs)(nil)).Elem()
}

type WorkforceInput interface {
	pulumi.Input

	ToWorkforceOutput() WorkforceOutput
	ToWorkforceOutputWithContext(ctx context.Context) WorkforceOutput
}

func (*Workforce) ElementType() reflect.Type {
	return reflect.TypeOf((**Workforce)(nil)).Elem()
}

func (i *Workforce) ToWorkforceOutput() WorkforceOutput {
	return i.ToWorkforceOutputWithContext(context.Background())
}

func (i *Workforce) ToWorkforceOutputWithContext(ctx context.Context) WorkforceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkforceOutput)
}

// WorkforceArrayInput is an input type that accepts WorkforceArray and WorkforceArrayOutput values.
// You can construct a concrete instance of `WorkforceArrayInput` via:
//
//	WorkforceArray{ WorkforceArgs{...} }
type WorkforceArrayInput interface {
	pulumi.Input

	ToWorkforceArrayOutput() WorkforceArrayOutput
	ToWorkforceArrayOutputWithContext(context.Context) WorkforceArrayOutput
}

type WorkforceArray []WorkforceInput

func (WorkforceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Workforce)(nil)).Elem()
}

func (i WorkforceArray) ToWorkforceArrayOutput() WorkforceArrayOutput {
	return i.ToWorkforceArrayOutputWithContext(context.Background())
}

func (i WorkforceArray) ToWorkforceArrayOutputWithContext(ctx context.Context) WorkforceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkforceArrayOutput)
}

// WorkforceMapInput is an input type that accepts WorkforceMap and WorkforceMapOutput values.
// You can construct a concrete instance of `WorkforceMapInput` via:
//
//	WorkforceMap{ "key": WorkforceArgs{...} }
type WorkforceMapInput interface {
	pulumi.Input

	ToWorkforceMapOutput() WorkforceMapOutput
	ToWorkforceMapOutputWithContext(context.Context) WorkforceMapOutput
}

type WorkforceMap map[string]WorkforceInput

func (WorkforceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Workforce)(nil)).Elem()
}

func (i WorkforceMap) ToWorkforceMapOutput() WorkforceMapOutput {
	return i.ToWorkforceMapOutputWithContext(context.Background())
}

func (i WorkforceMap) ToWorkforceMapOutputWithContext(ctx context.Context) WorkforceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkforceMapOutput)
}

type WorkforceOutput struct{ *pulumi.OutputState }

func (WorkforceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Workforce)(nil)).Elem()
}

func (o WorkforceOutput) ToWorkforceOutput() WorkforceOutput {
	return o
}

func (o WorkforceOutput) ToWorkforceOutputWithContext(ctx context.Context) WorkforceOutput {
	return o
}

func (o WorkforceOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Workforce) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o WorkforceOutput) CognitoConfig() WorkforceCognitoConfigPtrOutput {
	return o.ApplyT(func(v *Workforce) WorkforceCognitoConfigPtrOutput { return v.CognitoConfig }).(WorkforceCognitoConfigPtrOutput)
}

func (o WorkforceOutput) OidcConfig() WorkforceOidcConfigPtrOutput {
	return o.ApplyT(func(v *Workforce) WorkforceOidcConfigPtrOutput { return v.OidcConfig }).(WorkforceOidcConfigPtrOutput)
}

func (o WorkforceOutput) SourceIpConfig() WorkforceSourceIpConfigOutput {
	return o.ApplyT(func(v *Workforce) WorkforceSourceIpConfigOutput { return v.SourceIpConfig }).(WorkforceSourceIpConfigOutput)
}

func (o WorkforceOutput) Subdomain() pulumi.StringOutput {
	return o.ApplyT(func(v *Workforce) pulumi.StringOutput { return v.Subdomain }).(pulumi.StringOutput)
}

func (o WorkforceOutput) WorkforceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Workforce) pulumi.StringOutput { return v.WorkforceName }).(pulumi.StringOutput)
}

func (o WorkforceOutput) WorkforceVpcConfig() WorkforceWorkforceVpcConfigPtrOutput {
	return o.ApplyT(func(v *Workforce) WorkforceWorkforceVpcConfigPtrOutput { return v.WorkforceVpcConfig }).(WorkforceWorkforceVpcConfigPtrOutput)
}

type WorkforceArrayOutput struct{ *pulumi.OutputState }

func (WorkforceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Workforce)(nil)).Elem()
}

func (o WorkforceArrayOutput) ToWorkforceArrayOutput() WorkforceArrayOutput {
	return o
}

func (o WorkforceArrayOutput) ToWorkforceArrayOutputWithContext(ctx context.Context) WorkforceArrayOutput {
	return o
}

func (o WorkforceArrayOutput) Index(i pulumi.IntInput) WorkforceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Workforce {
		return vs[0].([]*Workforce)[vs[1].(int)]
	}).(WorkforceOutput)
}

type WorkforceMapOutput struct{ *pulumi.OutputState }

func (WorkforceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Workforce)(nil)).Elem()
}

func (o WorkforceMapOutput) ToWorkforceMapOutput() WorkforceMapOutput {
	return o
}

func (o WorkforceMapOutput) ToWorkforceMapOutputWithContext(ctx context.Context) WorkforceMapOutput {
	return o
}

func (o WorkforceMapOutput) MapIndex(k pulumi.StringInput) WorkforceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Workforce {
		return vs[0].(map[string]*Workforce)[vs[1].(string)]
	}).(WorkforceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkforceInput)(nil)).Elem(), &Workforce{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkforceArrayInput)(nil)).Elem(), WorkforceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkforceMapInput)(nil)).Elem(), WorkforceMap{})
	pulumi.RegisterOutputType(WorkforceOutput{})
	pulumi.RegisterOutputType(WorkforceArrayOutput{})
	pulumi.RegisterOutputType(WorkforceMapOutput{})
}
