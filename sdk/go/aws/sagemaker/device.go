// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sagemaker

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Sagemaker Device resource.
//
// ## Example Usage
// ### Basic usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/sagemaker"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sagemaker.NewDevice(ctx, "example", &sagemaker.DeviceArgs{
// 			DeviceFleetName: pulumi.Any(aws_sagemaker_device_fleet.Example.Device_fleet_name),
// 			Device: &sagemaker.DeviceDeviceArgs{
// 				DeviceName: pulumi.String("example"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Sagemaker Devices can be imported using the `device-fleet-name/device-name`, e.g.,
//
// ```sh
//  $ pulumi import aws:sagemaker/device:Device example my-fleet/my-device
// ```
type Device struct {
	pulumi.CustomResourceState

	AgentVersion pulumi.StringOutput `pulumi:"agentVersion"`
	// The Amazon Resource Name (ARN) assigned by AWS to this Device.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The device to register with SageMaker Edge Manager. See Device details below.
	Device DeviceDeviceOutput `pulumi:"device"`
	// The name of the Device Fleet.
	DeviceFleetName pulumi.StringOutput `pulumi:"deviceFleetName"`
}

// NewDevice registers a new resource with the given unique name, arguments, and options.
func NewDevice(ctx *pulumi.Context,
	name string, args *DeviceArgs, opts ...pulumi.ResourceOption) (*Device, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Device == nil {
		return nil, errors.New("invalid value for required argument 'Device'")
	}
	if args.DeviceFleetName == nil {
		return nil, errors.New("invalid value for required argument 'DeviceFleetName'")
	}
	var resource Device
	err := ctx.RegisterResource("aws:sagemaker/device:Device", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDevice gets an existing Device resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDevice(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeviceState, opts ...pulumi.ResourceOption) (*Device, error) {
	var resource Device
	err := ctx.ReadResource("aws:sagemaker/device:Device", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Device resources.
type deviceState struct {
	AgentVersion *string `pulumi:"agentVersion"`
	// The Amazon Resource Name (ARN) assigned by AWS to this Device.
	Arn *string `pulumi:"arn"`
	// The device to register with SageMaker Edge Manager. See Device details below.
	Device *DeviceDevice `pulumi:"device"`
	// The name of the Device Fleet.
	DeviceFleetName *string `pulumi:"deviceFleetName"`
}

type DeviceState struct {
	AgentVersion pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) assigned by AWS to this Device.
	Arn pulumi.StringPtrInput
	// The device to register with SageMaker Edge Manager. See Device details below.
	Device DeviceDevicePtrInput
	// The name of the Device Fleet.
	DeviceFleetName pulumi.StringPtrInput
}

func (DeviceState) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceState)(nil)).Elem()
}

type deviceArgs struct {
	// The device to register with SageMaker Edge Manager. See Device details below.
	Device DeviceDevice `pulumi:"device"`
	// The name of the Device Fleet.
	DeviceFleetName string `pulumi:"deviceFleetName"`
}

// The set of arguments for constructing a Device resource.
type DeviceArgs struct {
	// The device to register with SageMaker Edge Manager. See Device details below.
	Device DeviceDeviceInput
	// The name of the Device Fleet.
	DeviceFleetName pulumi.StringInput
}

func (DeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceArgs)(nil)).Elem()
}

type DeviceInput interface {
	pulumi.Input

	ToDeviceOutput() DeviceOutput
	ToDeviceOutputWithContext(ctx context.Context) DeviceOutput
}

func (*Device) ElementType() reflect.Type {
	return reflect.TypeOf((*Device)(nil))
}

func (i *Device) ToDeviceOutput() DeviceOutput {
	return i.ToDeviceOutputWithContext(context.Background())
}

func (i *Device) ToDeviceOutputWithContext(ctx context.Context) DeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceOutput)
}

func (i *Device) ToDevicePtrOutput() DevicePtrOutput {
	return i.ToDevicePtrOutputWithContext(context.Background())
}

func (i *Device) ToDevicePtrOutputWithContext(ctx context.Context) DevicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicePtrOutput)
}

type DevicePtrInput interface {
	pulumi.Input

	ToDevicePtrOutput() DevicePtrOutput
	ToDevicePtrOutputWithContext(ctx context.Context) DevicePtrOutput
}

type devicePtrType DeviceArgs

func (*devicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Device)(nil))
}

func (i *devicePtrType) ToDevicePtrOutput() DevicePtrOutput {
	return i.ToDevicePtrOutputWithContext(context.Background())
}

func (i *devicePtrType) ToDevicePtrOutputWithContext(ctx context.Context) DevicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicePtrOutput)
}

// DeviceArrayInput is an input type that accepts DeviceArray and DeviceArrayOutput values.
// You can construct a concrete instance of `DeviceArrayInput` via:
//
//          DeviceArray{ DeviceArgs{...} }
type DeviceArrayInput interface {
	pulumi.Input

	ToDeviceArrayOutput() DeviceArrayOutput
	ToDeviceArrayOutputWithContext(context.Context) DeviceArrayOutput
}

type DeviceArray []DeviceInput

func (DeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Device)(nil)).Elem()
}

func (i DeviceArray) ToDeviceArrayOutput() DeviceArrayOutput {
	return i.ToDeviceArrayOutputWithContext(context.Background())
}

func (i DeviceArray) ToDeviceArrayOutputWithContext(ctx context.Context) DeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceArrayOutput)
}

// DeviceMapInput is an input type that accepts DeviceMap and DeviceMapOutput values.
// You can construct a concrete instance of `DeviceMapInput` via:
//
//          DeviceMap{ "key": DeviceArgs{...} }
type DeviceMapInput interface {
	pulumi.Input

	ToDeviceMapOutput() DeviceMapOutput
	ToDeviceMapOutputWithContext(context.Context) DeviceMapOutput
}

type DeviceMap map[string]DeviceInput

func (DeviceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Device)(nil)).Elem()
}

func (i DeviceMap) ToDeviceMapOutput() DeviceMapOutput {
	return i.ToDeviceMapOutputWithContext(context.Background())
}

func (i DeviceMap) ToDeviceMapOutputWithContext(ctx context.Context) DeviceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceMapOutput)
}

type DeviceOutput struct{ *pulumi.OutputState }

func (DeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Device)(nil))
}

func (o DeviceOutput) ToDeviceOutput() DeviceOutput {
	return o
}

func (o DeviceOutput) ToDeviceOutputWithContext(ctx context.Context) DeviceOutput {
	return o
}

func (o DeviceOutput) ToDevicePtrOutput() DevicePtrOutput {
	return o.ToDevicePtrOutputWithContext(context.Background())
}

func (o DeviceOutput) ToDevicePtrOutputWithContext(ctx context.Context) DevicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Device) *Device {
		return &v
	}).(DevicePtrOutput)
}

type DevicePtrOutput struct{ *pulumi.OutputState }

func (DevicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Device)(nil))
}

func (o DevicePtrOutput) ToDevicePtrOutput() DevicePtrOutput {
	return o
}

func (o DevicePtrOutput) ToDevicePtrOutputWithContext(ctx context.Context) DevicePtrOutput {
	return o
}

func (o DevicePtrOutput) Elem() DeviceOutput {
	return o.ApplyT(func(v *Device) Device {
		if v != nil {
			return *v
		}
		var ret Device
		return ret
	}).(DeviceOutput)
}

type DeviceArrayOutput struct{ *pulumi.OutputState }

func (DeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Device)(nil))
}

func (o DeviceArrayOutput) ToDeviceArrayOutput() DeviceArrayOutput {
	return o
}

func (o DeviceArrayOutput) ToDeviceArrayOutputWithContext(ctx context.Context) DeviceArrayOutput {
	return o
}

func (o DeviceArrayOutput) Index(i pulumi.IntInput) DeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Device {
		return vs[0].([]Device)[vs[1].(int)]
	}).(DeviceOutput)
}

type DeviceMapOutput struct{ *pulumi.OutputState }

func (DeviceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Device)(nil))
}

func (o DeviceMapOutput) ToDeviceMapOutput() DeviceMapOutput {
	return o
}

func (o DeviceMapOutput) ToDeviceMapOutputWithContext(ctx context.Context) DeviceMapOutput {
	return o
}

func (o DeviceMapOutput) MapIndex(k pulumi.StringInput) DeviceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Device {
		return vs[0].(map[string]Device)[vs[1].(string)]
	}).(DeviceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceInput)(nil)).Elem(), &Device{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevicePtrInput)(nil)).Elem(), &Device{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceArrayInput)(nil)).Elem(), DeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceMapInput)(nil)).Elem(), DeviceMap{})
	pulumi.RegisterOutputType(DeviceOutput{})
	pulumi.RegisterOutputType(DevicePtrOutput{})
	pulumi.RegisterOutputType(DeviceArrayOutput{})
	pulumi.RegisterOutputType(DeviceMapOutput{})
}
