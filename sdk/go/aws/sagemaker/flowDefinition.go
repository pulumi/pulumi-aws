// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sagemaker

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FlowDefinition struct {
	pulumi.CustomResourceState

	Arn                       pulumi.StringOutput                              `pulumi:"arn"`
	FlowDefinitionName        pulumi.StringOutput                              `pulumi:"flowDefinitionName"`
	HumanLoopActivationConfig FlowDefinitionHumanLoopActivationConfigPtrOutput `pulumi:"humanLoopActivationConfig"`
	HumanLoopConfig           FlowDefinitionHumanLoopConfigOutput              `pulumi:"humanLoopConfig"`
	HumanLoopRequestSource    FlowDefinitionHumanLoopRequestSourcePtrOutput    `pulumi:"humanLoopRequestSource"`
	OutputConfig              FlowDefinitionOutputConfigOutput                 `pulumi:"outputConfig"`
	RoleArn                   pulumi.StringOutput                              `pulumi:"roleArn"`
	Tags                      pulumi.StringMapOutput                           `pulumi:"tags"`
	TagsAll                   pulumi.StringMapOutput                           `pulumi:"tagsAll"`
}

// NewFlowDefinition registers a new resource with the given unique name, arguments, and options.
func NewFlowDefinition(ctx *pulumi.Context,
	name string, args *FlowDefinitionArgs, opts ...pulumi.ResourceOption) (*FlowDefinition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FlowDefinitionName == nil {
		return nil, errors.New("invalid value for required argument 'FlowDefinitionName'")
	}
	if args.HumanLoopConfig == nil {
		return nil, errors.New("invalid value for required argument 'HumanLoopConfig'")
	}
	if args.OutputConfig == nil {
		return nil, errors.New("invalid value for required argument 'OutputConfig'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	var resource FlowDefinition
	err := ctx.RegisterResource("aws:sagemaker/flowDefinition:FlowDefinition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFlowDefinition gets an existing FlowDefinition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFlowDefinition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FlowDefinitionState, opts ...pulumi.ResourceOption) (*FlowDefinition, error) {
	var resource FlowDefinition
	err := ctx.ReadResource("aws:sagemaker/flowDefinition:FlowDefinition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FlowDefinition resources.
type flowDefinitionState struct {
	Arn                       *string                                  `pulumi:"arn"`
	FlowDefinitionName        *string                                  `pulumi:"flowDefinitionName"`
	HumanLoopActivationConfig *FlowDefinitionHumanLoopActivationConfig `pulumi:"humanLoopActivationConfig"`
	HumanLoopConfig           *FlowDefinitionHumanLoopConfig           `pulumi:"humanLoopConfig"`
	HumanLoopRequestSource    *FlowDefinitionHumanLoopRequestSource    `pulumi:"humanLoopRequestSource"`
	OutputConfig              *FlowDefinitionOutputConfig              `pulumi:"outputConfig"`
	RoleArn                   *string                                  `pulumi:"roleArn"`
	Tags                      map[string]string                        `pulumi:"tags"`
	TagsAll                   map[string]string                        `pulumi:"tagsAll"`
}

type FlowDefinitionState struct {
	Arn                       pulumi.StringPtrInput
	FlowDefinitionName        pulumi.StringPtrInput
	HumanLoopActivationConfig FlowDefinitionHumanLoopActivationConfigPtrInput
	HumanLoopConfig           FlowDefinitionHumanLoopConfigPtrInput
	HumanLoopRequestSource    FlowDefinitionHumanLoopRequestSourcePtrInput
	OutputConfig              FlowDefinitionOutputConfigPtrInput
	RoleArn                   pulumi.StringPtrInput
	Tags                      pulumi.StringMapInput
	TagsAll                   pulumi.StringMapInput
}

func (FlowDefinitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*flowDefinitionState)(nil)).Elem()
}

type flowDefinitionArgs struct {
	FlowDefinitionName        string                                   `pulumi:"flowDefinitionName"`
	HumanLoopActivationConfig *FlowDefinitionHumanLoopActivationConfig `pulumi:"humanLoopActivationConfig"`
	HumanLoopConfig           FlowDefinitionHumanLoopConfig            `pulumi:"humanLoopConfig"`
	HumanLoopRequestSource    *FlowDefinitionHumanLoopRequestSource    `pulumi:"humanLoopRequestSource"`
	OutputConfig              FlowDefinitionOutputConfig               `pulumi:"outputConfig"`
	RoleArn                   string                                   `pulumi:"roleArn"`
	Tags                      map[string]string                        `pulumi:"tags"`
}

// The set of arguments for constructing a FlowDefinition resource.
type FlowDefinitionArgs struct {
	FlowDefinitionName        pulumi.StringInput
	HumanLoopActivationConfig FlowDefinitionHumanLoopActivationConfigPtrInput
	HumanLoopConfig           FlowDefinitionHumanLoopConfigInput
	HumanLoopRequestSource    FlowDefinitionHumanLoopRequestSourcePtrInput
	OutputConfig              FlowDefinitionOutputConfigInput
	RoleArn                   pulumi.StringInput
	Tags                      pulumi.StringMapInput
}

func (FlowDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*flowDefinitionArgs)(nil)).Elem()
}

type FlowDefinitionInput interface {
	pulumi.Input

	ToFlowDefinitionOutput() FlowDefinitionOutput
	ToFlowDefinitionOutputWithContext(ctx context.Context) FlowDefinitionOutput
}

func (*FlowDefinition) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowDefinition)(nil)).Elem()
}

func (i *FlowDefinition) ToFlowDefinitionOutput() FlowDefinitionOutput {
	return i.ToFlowDefinitionOutputWithContext(context.Background())
}

func (i *FlowDefinition) ToFlowDefinitionOutputWithContext(ctx context.Context) FlowDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDefinitionOutput)
}

// FlowDefinitionArrayInput is an input type that accepts FlowDefinitionArray and FlowDefinitionArrayOutput values.
// You can construct a concrete instance of `FlowDefinitionArrayInput` via:
//
//	FlowDefinitionArray{ FlowDefinitionArgs{...} }
type FlowDefinitionArrayInput interface {
	pulumi.Input

	ToFlowDefinitionArrayOutput() FlowDefinitionArrayOutput
	ToFlowDefinitionArrayOutputWithContext(context.Context) FlowDefinitionArrayOutput
}

type FlowDefinitionArray []FlowDefinitionInput

func (FlowDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlowDefinition)(nil)).Elem()
}

func (i FlowDefinitionArray) ToFlowDefinitionArrayOutput() FlowDefinitionArrayOutput {
	return i.ToFlowDefinitionArrayOutputWithContext(context.Background())
}

func (i FlowDefinitionArray) ToFlowDefinitionArrayOutputWithContext(ctx context.Context) FlowDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDefinitionArrayOutput)
}

// FlowDefinitionMapInput is an input type that accepts FlowDefinitionMap and FlowDefinitionMapOutput values.
// You can construct a concrete instance of `FlowDefinitionMapInput` via:
//
//	FlowDefinitionMap{ "key": FlowDefinitionArgs{...} }
type FlowDefinitionMapInput interface {
	pulumi.Input

	ToFlowDefinitionMapOutput() FlowDefinitionMapOutput
	ToFlowDefinitionMapOutputWithContext(context.Context) FlowDefinitionMapOutput
}

type FlowDefinitionMap map[string]FlowDefinitionInput

func (FlowDefinitionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlowDefinition)(nil)).Elem()
}

func (i FlowDefinitionMap) ToFlowDefinitionMapOutput() FlowDefinitionMapOutput {
	return i.ToFlowDefinitionMapOutputWithContext(context.Background())
}

func (i FlowDefinitionMap) ToFlowDefinitionMapOutputWithContext(ctx context.Context) FlowDefinitionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowDefinitionMapOutput)
}

type FlowDefinitionOutput struct{ *pulumi.OutputState }

func (FlowDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowDefinition)(nil)).Elem()
}

func (o FlowDefinitionOutput) ToFlowDefinitionOutput() FlowDefinitionOutput {
	return o
}

func (o FlowDefinitionOutput) ToFlowDefinitionOutputWithContext(ctx context.Context) FlowDefinitionOutput {
	return o
}

func (o FlowDefinitionOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowDefinition) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o FlowDefinitionOutput) FlowDefinitionName() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowDefinition) pulumi.StringOutput { return v.FlowDefinitionName }).(pulumi.StringOutput)
}

func (o FlowDefinitionOutput) HumanLoopActivationConfig() FlowDefinitionHumanLoopActivationConfigPtrOutput {
	return o.ApplyT(func(v *FlowDefinition) FlowDefinitionHumanLoopActivationConfigPtrOutput {
		return v.HumanLoopActivationConfig
	}).(FlowDefinitionHumanLoopActivationConfigPtrOutput)
}

func (o FlowDefinitionOutput) HumanLoopConfig() FlowDefinitionHumanLoopConfigOutput {
	return o.ApplyT(func(v *FlowDefinition) FlowDefinitionHumanLoopConfigOutput { return v.HumanLoopConfig }).(FlowDefinitionHumanLoopConfigOutput)
}

func (o FlowDefinitionOutput) HumanLoopRequestSource() FlowDefinitionHumanLoopRequestSourcePtrOutput {
	return o.ApplyT(func(v *FlowDefinition) FlowDefinitionHumanLoopRequestSourcePtrOutput { return v.HumanLoopRequestSource }).(FlowDefinitionHumanLoopRequestSourcePtrOutput)
}

func (o FlowDefinitionOutput) OutputConfig() FlowDefinitionOutputConfigOutput {
	return o.ApplyT(func(v *FlowDefinition) FlowDefinitionOutputConfigOutput { return v.OutputConfig }).(FlowDefinitionOutputConfigOutput)
}

func (o FlowDefinitionOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowDefinition) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

func (o FlowDefinitionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FlowDefinition) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o FlowDefinitionOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FlowDefinition) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type FlowDefinitionArrayOutput struct{ *pulumi.OutputState }

func (FlowDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlowDefinition)(nil)).Elem()
}

func (o FlowDefinitionArrayOutput) ToFlowDefinitionArrayOutput() FlowDefinitionArrayOutput {
	return o
}

func (o FlowDefinitionArrayOutput) ToFlowDefinitionArrayOutputWithContext(ctx context.Context) FlowDefinitionArrayOutput {
	return o
}

func (o FlowDefinitionArrayOutput) Index(i pulumi.IntInput) FlowDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FlowDefinition {
		return vs[0].([]*FlowDefinition)[vs[1].(int)]
	}).(FlowDefinitionOutput)
}

type FlowDefinitionMapOutput struct{ *pulumi.OutputState }

func (FlowDefinitionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlowDefinition)(nil)).Elem()
}

func (o FlowDefinitionMapOutput) ToFlowDefinitionMapOutput() FlowDefinitionMapOutput {
	return o
}

func (o FlowDefinitionMapOutput) ToFlowDefinitionMapOutputWithContext(ctx context.Context) FlowDefinitionMapOutput {
	return o
}

func (o FlowDefinitionMapOutput) MapIndex(k pulumi.StringInput) FlowDefinitionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FlowDefinition {
		return vs[0].(map[string]*FlowDefinition)[vs[1].(string)]
	}).(FlowDefinitionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FlowDefinitionInput)(nil)).Elem(), &FlowDefinition{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowDefinitionArrayInput)(nil)).Elem(), FlowDefinitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowDefinitionMapInput)(nil)).Elem(), FlowDefinitionMap{})
	pulumi.RegisterOutputType(FlowDefinitionOutput{})
	pulumi.RegisterOutputType(FlowDefinitionArrayOutput{})
	pulumi.RegisterOutputType(FlowDefinitionMapOutput{})
}
