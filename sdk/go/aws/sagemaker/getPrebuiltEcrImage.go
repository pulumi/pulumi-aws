// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sagemaker

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about prebuilt Amazon SageMaker AI  Docker images.
//
// > **NOTE:** The AWS provider creates a validly constructed `registryPath` but does not verify that the `registryPath` corresponds to an existing image. For example, using a `registryPath` containing an `imageTag` that does not correspond to a Docker image in the ECR repository, will result in an error.
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/sagemaker"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sagemaker.GetPrebuiltEcrImage(ctx, &sagemaker.GetPrebuiltEcrImageArgs{
//				RepositoryName: "sagemaker-scikit-learn",
//				ImageTag:       pulumi.StringRef("2.2-1.0.11.0"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetPrebuiltEcrImage(ctx *pulumi.Context, args *GetPrebuiltEcrImageArgs, opts ...pulumi.InvokeOption) (*GetPrebuiltEcrImageResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetPrebuiltEcrImageResult
	err := ctx.Invoke("aws:sagemaker/getPrebuiltEcrImage:getPrebuiltEcrImage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPrebuiltEcrImage.
type GetPrebuiltEcrImageArgs struct {
	// DNS suffix to use in the registry path. If not specified, the AWS provider sets it to the DNS suffix for the current region.
	DnsSuffix *string `pulumi:"dnsSuffix"`
	// Image tag for the Docker image. If not specified, the AWS provider sets the value to `1`, which for many repositories indicates the latest version. Some repositories, such as XGBoost, do not support `1` or `latest` and specific version must be used.
	ImageTag *string `pulumi:"imageTag"`
	// Region to use in the registry path. If not specified, the AWS provider sets it to the current region.
	Region *string `pulumi:"region"`
	// Name of the repository, which is generally the algorithm or library. Values include `autogluon-inference`, `autogluon-training`, `blazingtext`, `djl-inference`, `factorization-machines`, `forecasting-deepar`, `huggingface-pytorch-inference`, `huggingface-pytorch-inference-neuron`, `huggingface-pytorch-inference-neuronx`, `huggingface-pytorch-tgi-inference`, `huggingface-pytorch-training`, `huggingface-pytorch-training-neuronx`, `huggingface-pytorch-trcomp-training`, `huggingface-tensorflow-inference`, `huggingface-tensorflow-training`, `huggingface-tensorflow-trcomp-training`, `image-classification`, `image-classification-neo`, `ipinsights`, `kmeans`, `knn`, `lda`, `linear-learner`, `mxnet-inference`, `mxnet-inference-eia`, `mxnet-training`, `ntm`, `object-detection`, `object2vec`, `pca`, `pytorch-inference`, `pytorch-inference-eia`, `pytorch-inference-graviton`, `pytorch-inference-neuronx`, `pytorch-training`, `pytorch-training-neuronx`, `pytorch-trcomp-training`, `randomcutforest`, `sagemaker-base-python`, `sagemaker-chainer`, `sagemaker-clarify-processing`, `sagemaker-data-wrangler-container`, `sagemaker-debugger-rules`, `sagemaker-geospatial-v1-0`, `sagemaker-inference-mxnet`, `sagemaker-inference-pytorch`, `sagemaker-inference-tensorflow`, `sagemaker-model-monitor-analyzer`, `sagemaker-mxnet`, `sagemaker-mxnet-eia`, `sagemaker-mxnet-serving`, `sagemaker-mxnet-serving-eia`, `sagemaker-neo-mxnet`, `sagemaker-neo-pytorch`, `sagemaker-neo-tensorflow`, `sagemaker-pytorch`, `sagemaker-rl-coach-container`, `sagemaker-rl-mxnet`, `sagemaker-rl-ray-container`, `sagemaker-rl-tensorflow`, `sagemaker-rl-vw-container`, `sagemaker-scikit-learn`, `sagemaker-spark-processing`, `sagemaker-sparkml-serving`, `sagemaker-tensorflow`, `sagemaker-tensorflow-eia`, `sagemaker-tensorflow-scriptmode`, `sagemaker-tensorflow-serving`, `sagemaker-tensorflow-serving-eia`, `sagemaker-tritonserver`, `sagemaker-xgboost`, `semantic-segmentation`, `seq2seq`, `stabilityai-pytorch-inference`, `tei`, `tei-cpu`, `tensorflow-inference`, `tensorflow-inference-eia`, `tensorflow-inference-graviton`, `tensorflow-training`, and `xgboost-neo`.
	RepositoryName string `pulumi:"repositoryName"`
}

// A collection of values returned by getPrebuiltEcrImage.
type GetPrebuiltEcrImageResult struct {
	DnsSuffix *string `pulumi:"dnsSuffix"`
	// The provider-assigned unique ID for this managed resource.
	Id       string  `pulumi:"id"`
	ImageTag *string `pulumi:"imageTag"`
	Region   *string `pulumi:"region"`
	// Account ID containing the image. For example, `469771592824`.
	RegistryId string `pulumi:"registryId"`
	// Docker image URL. For example, `341280168497.dkr.ecr.ca-central-1.amazonaws.com/sagemaker-sparkml-serving:2.4`.
	RegistryPath   string `pulumi:"registryPath"`
	RepositoryName string `pulumi:"repositoryName"`
}

func GetPrebuiltEcrImageOutput(ctx *pulumi.Context, args GetPrebuiltEcrImageOutputArgs, opts ...pulumi.InvokeOption) GetPrebuiltEcrImageResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetPrebuiltEcrImageResultOutput, error) {
			args := v.(GetPrebuiltEcrImageArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws:sagemaker/getPrebuiltEcrImage:getPrebuiltEcrImage", args, GetPrebuiltEcrImageResultOutput{}, options).(GetPrebuiltEcrImageResultOutput), nil
		}).(GetPrebuiltEcrImageResultOutput)
}

// A collection of arguments for invoking getPrebuiltEcrImage.
type GetPrebuiltEcrImageOutputArgs struct {
	// DNS suffix to use in the registry path. If not specified, the AWS provider sets it to the DNS suffix for the current region.
	DnsSuffix pulumi.StringPtrInput `pulumi:"dnsSuffix"`
	// Image tag for the Docker image. If not specified, the AWS provider sets the value to `1`, which for many repositories indicates the latest version. Some repositories, such as XGBoost, do not support `1` or `latest` and specific version must be used.
	ImageTag pulumi.StringPtrInput `pulumi:"imageTag"`
	// Region to use in the registry path. If not specified, the AWS provider sets it to the current region.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Name of the repository, which is generally the algorithm or library. Values include `autogluon-inference`, `autogluon-training`, `blazingtext`, `djl-inference`, `factorization-machines`, `forecasting-deepar`, `huggingface-pytorch-inference`, `huggingface-pytorch-inference-neuron`, `huggingface-pytorch-inference-neuronx`, `huggingface-pytorch-tgi-inference`, `huggingface-pytorch-training`, `huggingface-pytorch-training-neuronx`, `huggingface-pytorch-trcomp-training`, `huggingface-tensorflow-inference`, `huggingface-tensorflow-training`, `huggingface-tensorflow-trcomp-training`, `image-classification`, `image-classification-neo`, `ipinsights`, `kmeans`, `knn`, `lda`, `linear-learner`, `mxnet-inference`, `mxnet-inference-eia`, `mxnet-training`, `ntm`, `object-detection`, `object2vec`, `pca`, `pytorch-inference`, `pytorch-inference-eia`, `pytorch-inference-graviton`, `pytorch-inference-neuronx`, `pytorch-training`, `pytorch-training-neuronx`, `pytorch-trcomp-training`, `randomcutforest`, `sagemaker-base-python`, `sagemaker-chainer`, `sagemaker-clarify-processing`, `sagemaker-data-wrangler-container`, `sagemaker-debugger-rules`, `sagemaker-geospatial-v1-0`, `sagemaker-inference-mxnet`, `sagemaker-inference-pytorch`, `sagemaker-inference-tensorflow`, `sagemaker-model-monitor-analyzer`, `sagemaker-mxnet`, `sagemaker-mxnet-eia`, `sagemaker-mxnet-serving`, `sagemaker-mxnet-serving-eia`, `sagemaker-neo-mxnet`, `sagemaker-neo-pytorch`, `sagemaker-neo-tensorflow`, `sagemaker-pytorch`, `sagemaker-rl-coach-container`, `sagemaker-rl-mxnet`, `sagemaker-rl-ray-container`, `sagemaker-rl-tensorflow`, `sagemaker-rl-vw-container`, `sagemaker-scikit-learn`, `sagemaker-spark-processing`, `sagemaker-sparkml-serving`, `sagemaker-tensorflow`, `sagemaker-tensorflow-eia`, `sagemaker-tensorflow-scriptmode`, `sagemaker-tensorflow-serving`, `sagemaker-tensorflow-serving-eia`, `sagemaker-tritonserver`, `sagemaker-xgboost`, `semantic-segmentation`, `seq2seq`, `stabilityai-pytorch-inference`, `tei`, `tei-cpu`, `tensorflow-inference`, `tensorflow-inference-eia`, `tensorflow-inference-graviton`, `tensorflow-training`, and `xgboost-neo`.
	RepositoryName pulumi.StringInput `pulumi:"repositoryName"`
}

func (GetPrebuiltEcrImageOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrebuiltEcrImageArgs)(nil)).Elem()
}

// A collection of values returned by getPrebuiltEcrImage.
type GetPrebuiltEcrImageResultOutput struct{ *pulumi.OutputState }

func (GetPrebuiltEcrImageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrebuiltEcrImageResult)(nil)).Elem()
}

func (o GetPrebuiltEcrImageResultOutput) ToGetPrebuiltEcrImageResultOutput() GetPrebuiltEcrImageResultOutput {
	return o
}

func (o GetPrebuiltEcrImageResultOutput) ToGetPrebuiltEcrImageResultOutputWithContext(ctx context.Context) GetPrebuiltEcrImageResultOutput {
	return o
}

func (o GetPrebuiltEcrImageResultOutput) DnsSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPrebuiltEcrImageResult) *string { return v.DnsSuffix }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetPrebuiltEcrImageResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrebuiltEcrImageResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetPrebuiltEcrImageResultOutput) ImageTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPrebuiltEcrImageResult) *string { return v.ImageTag }).(pulumi.StringPtrOutput)
}

func (o GetPrebuiltEcrImageResultOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPrebuiltEcrImageResult) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// Account ID containing the image. For example, `469771592824`.
func (o GetPrebuiltEcrImageResultOutput) RegistryId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrebuiltEcrImageResult) string { return v.RegistryId }).(pulumi.StringOutput)
}

// Docker image URL. For example, `341280168497.dkr.ecr.ca-central-1.amazonaws.com/sagemaker-sparkml-serving:2.4`.
func (o GetPrebuiltEcrImageResultOutput) RegistryPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrebuiltEcrImageResult) string { return v.RegistryPath }).(pulumi.StringOutput)
}

func (o GetPrebuiltEcrImageResultOutput) RepositoryName() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrebuiltEcrImageResult) string { return v.RepositoryName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetPrebuiltEcrImageResultOutput{})
}
