// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appfabric

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS AppFabric AppBundle.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/appfabric"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := appfabric.NewAppBundle(ctx, "example", &appfabric.AppBundleArgs{
//				CustomerManagedKeyArn: pulumi.Any(exampleAwmsKmsKey.Arn),
//				Tags: pulumi.StringMap{
//					"Environment": pulumi.String("test"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import AppFabric AppBundle using the `arn`. For example:
//
// ```sh
// $ pulumi import aws:appfabric/appBundle:AppBundle example arn:aws:appfabric:[region]:[account]:appbundle/ee5587b4-5765-4288-a202-xxxxxxxxxx
// ```
type AppBundle struct {
	pulumi.CustomResourceState

	// ARN of the AppBundle.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The Amazon Resource Name (ARN) of the AWS Key Management Service (AWS KMS) key to use to encrypt the application data. If this is not specified, an AWS owned key is used for encryption.
	CustomerManagedKeyArn pulumi.StringPtrOutput `pulumi:"customerManagedKeyArn"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewAppBundle registers a new resource with the given unique name, arguments, and options.
func NewAppBundle(ctx *pulumi.Context,
	name string, args *AppBundleArgs, opts ...pulumi.ResourceOption) (*AppBundle, error) {
	if args == nil {
		args = &AppBundleArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppBundle
	err := ctx.RegisterResource("aws:appfabric/appBundle:AppBundle", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppBundle gets an existing AppBundle resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppBundle(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppBundleState, opts ...pulumi.ResourceOption) (*AppBundle, error) {
	var resource AppBundle
	err := ctx.ReadResource("aws:appfabric/appBundle:AppBundle", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppBundle resources.
type appBundleState struct {
	// ARN of the AppBundle.
	Arn *string `pulumi:"arn"`
	// The Amazon Resource Name (ARN) of the AWS Key Management Service (AWS KMS) key to use to encrypt the application data. If this is not specified, an AWS owned key is used for encryption.
	CustomerManagedKeyArn *string `pulumi:"customerManagedKeyArn"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type AppBundleState struct {
	// ARN of the AppBundle.
	Arn pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) of the AWS Key Management Service (AWS KMS) key to use to encrypt the application data. If this is not specified, an AWS owned key is used for encryption.
	CustomerManagedKeyArn pulumi.StringPtrInput
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
}

func (AppBundleState) ElementType() reflect.Type {
	return reflect.TypeOf((*appBundleState)(nil)).Elem()
}

type appBundleArgs struct {
	// The Amazon Resource Name (ARN) of the AWS Key Management Service (AWS KMS) key to use to encrypt the application data. If this is not specified, an AWS owned key is used for encryption.
	CustomerManagedKeyArn *string `pulumi:"customerManagedKeyArn"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a AppBundle resource.
type AppBundleArgs struct {
	// The Amazon Resource Name (ARN) of the AWS Key Management Service (AWS KMS) key to use to encrypt the application data. If this is not specified, an AWS owned key is used for encryption.
	CustomerManagedKeyArn pulumi.StringPtrInput
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
}

func (AppBundleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appBundleArgs)(nil)).Elem()
}

type AppBundleInput interface {
	pulumi.Input

	ToAppBundleOutput() AppBundleOutput
	ToAppBundleOutputWithContext(ctx context.Context) AppBundleOutput
}

func (*AppBundle) ElementType() reflect.Type {
	return reflect.TypeOf((**AppBundle)(nil)).Elem()
}

func (i *AppBundle) ToAppBundleOutput() AppBundleOutput {
	return i.ToAppBundleOutputWithContext(context.Background())
}

func (i *AppBundle) ToAppBundleOutputWithContext(ctx context.Context) AppBundleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppBundleOutput)
}

// AppBundleArrayInput is an input type that accepts AppBundleArray and AppBundleArrayOutput values.
// You can construct a concrete instance of `AppBundleArrayInput` via:
//
//	AppBundleArray{ AppBundleArgs{...} }
type AppBundleArrayInput interface {
	pulumi.Input

	ToAppBundleArrayOutput() AppBundleArrayOutput
	ToAppBundleArrayOutputWithContext(context.Context) AppBundleArrayOutput
}

type AppBundleArray []AppBundleInput

func (AppBundleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppBundle)(nil)).Elem()
}

func (i AppBundleArray) ToAppBundleArrayOutput() AppBundleArrayOutput {
	return i.ToAppBundleArrayOutputWithContext(context.Background())
}

func (i AppBundleArray) ToAppBundleArrayOutputWithContext(ctx context.Context) AppBundleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppBundleArrayOutput)
}

// AppBundleMapInput is an input type that accepts AppBundleMap and AppBundleMapOutput values.
// You can construct a concrete instance of `AppBundleMapInput` via:
//
//	AppBundleMap{ "key": AppBundleArgs{...} }
type AppBundleMapInput interface {
	pulumi.Input

	ToAppBundleMapOutput() AppBundleMapOutput
	ToAppBundleMapOutputWithContext(context.Context) AppBundleMapOutput
}

type AppBundleMap map[string]AppBundleInput

func (AppBundleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppBundle)(nil)).Elem()
}

func (i AppBundleMap) ToAppBundleMapOutput() AppBundleMapOutput {
	return i.ToAppBundleMapOutputWithContext(context.Background())
}

func (i AppBundleMap) ToAppBundleMapOutputWithContext(ctx context.Context) AppBundleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppBundleMapOutput)
}

type AppBundleOutput struct{ *pulumi.OutputState }

func (AppBundleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppBundle)(nil)).Elem()
}

func (o AppBundleOutput) ToAppBundleOutput() AppBundleOutput {
	return o
}

func (o AppBundleOutput) ToAppBundleOutputWithContext(ctx context.Context) AppBundleOutput {
	return o
}

// ARN of the AppBundle.
func (o AppBundleOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *AppBundle) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) of the AWS Key Management Service (AWS KMS) key to use to encrypt the application data. If this is not specified, an AWS owned key is used for encryption.
func (o AppBundleOutput) CustomerManagedKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppBundle) pulumi.StringPtrOutput { return v.CustomerManagedKeyArn }).(pulumi.StringPtrOutput)
}

// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o AppBundleOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AppBundle) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o AppBundleOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AppBundle) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type AppBundleArrayOutput struct{ *pulumi.OutputState }

func (AppBundleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppBundle)(nil)).Elem()
}

func (o AppBundleArrayOutput) ToAppBundleArrayOutput() AppBundleArrayOutput {
	return o
}

func (o AppBundleArrayOutput) ToAppBundleArrayOutputWithContext(ctx context.Context) AppBundleArrayOutput {
	return o
}

func (o AppBundleArrayOutput) Index(i pulumi.IntInput) AppBundleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppBundle {
		return vs[0].([]*AppBundle)[vs[1].(int)]
	}).(AppBundleOutput)
}

type AppBundleMapOutput struct{ *pulumi.OutputState }

func (AppBundleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppBundle)(nil)).Elem()
}

func (o AppBundleMapOutput) ToAppBundleMapOutput() AppBundleMapOutput {
	return o
}

func (o AppBundleMapOutput) ToAppBundleMapOutputWithContext(ctx context.Context) AppBundleMapOutput {
	return o
}

func (o AppBundleMapOutput) MapIndex(k pulumi.StringInput) AppBundleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppBundle {
		return vs[0].(map[string]*AppBundle)[vs[1].(string)]
	}).(AppBundleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppBundleInput)(nil)).Elem(), &AppBundle{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppBundleArrayInput)(nil)).Elem(), AppBundleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppBundleMapInput)(nil)).Elem(), AppBundleMap{})
	pulumi.RegisterOutputType(AppBundleOutput{})
	pulumi.RegisterOutputType(AppBundleArrayOutput{})
	pulumi.RegisterOutputType(AppBundleMapOutput{})
}
