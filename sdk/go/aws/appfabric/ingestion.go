// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appfabric

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS AppFabric Ingestion.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/appfabric"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := appfabric.NewIngestion(ctx, "example", &appfabric.IngestionArgs{
//				App:           pulumi.String("OKTA"),
//				AppBundleArn:  pulumi.Any(exampleAwsAppfabricAppBundle.Arn),
//				TenantId:      pulumi.String("example.okta.com"),
//				IngestionType: pulumi.String("auditLog"),
//				Tags: pulumi.StringMap{
//					"Environment": pulumi.String("test"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import AppFabric Ingestion using the `app_bundle_identifier` and `arn` separated by `,`. For example:
//
// ```sh
// $ pulumi import aws:appfabric/ingestion:Ingestion example arn:aws:appfabric:[region]:[account]:appbundle/a9b91477-8831-43c0-970c-xxxxxxxxxx,arn:aws:appfabric:[region]:[account]:appbundle/a9b91477-8831-43c0-970c-xxxxxxxxxx/ingestion/32251416-710b-4425-96ca-xxxxxxxxxx
// ```
type Ingestion struct {
	pulumi.CustomResourceState

	// Name of the application.
	// Refer to the AWS Documentation for the [list of valid values](https://docs.aws.amazon.com/appfabric/latest/api/API_CreateIngestion.html#appfabric-CreateIngestion-request-app)
	App pulumi.StringOutput `pulumi:"app"`
	// Amazon Resource Name (ARN) of the app bundle to use for the request.
	AppBundleArn pulumi.StringOutput `pulumi:"appBundleArn"`
	// ARN of the Ingestion.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Ingestion type. Valid values are `auditLog`.
	IngestionType pulumi.StringOutput `pulumi:"ingestionType"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// ID of the application tenant.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewIngestion registers a new resource with the given unique name, arguments, and options.
func NewIngestion(ctx *pulumi.Context,
	name string, args *IngestionArgs, opts ...pulumi.ResourceOption) (*Ingestion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.App == nil {
		return nil, errors.New("invalid value for required argument 'App'")
	}
	if args.AppBundleArn == nil {
		return nil, errors.New("invalid value for required argument 'AppBundleArn'")
	}
	if args.IngestionType == nil {
		return nil, errors.New("invalid value for required argument 'IngestionType'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ingestion
	err := ctx.RegisterResource("aws:appfabric/ingestion:Ingestion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIngestion gets an existing Ingestion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIngestion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IngestionState, opts ...pulumi.ResourceOption) (*Ingestion, error) {
	var resource Ingestion
	err := ctx.ReadResource("aws:appfabric/ingestion:Ingestion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ingestion resources.
type ingestionState struct {
	// Name of the application.
	// Refer to the AWS Documentation for the [list of valid values](https://docs.aws.amazon.com/appfabric/latest/api/API_CreateIngestion.html#appfabric-CreateIngestion-request-app)
	App *string `pulumi:"app"`
	// Amazon Resource Name (ARN) of the app bundle to use for the request.
	AppBundleArn *string `pulumi:"appBundleArn"`
	// ARN of the Ingestion.
	Arn *string `pulumi:"arn"`
	// Ingestion type. Valid values are `auditLog`.
	IngestionType *string `pulumi:"ingestionType"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// ID of the application tenant.
	TenantId *string `pulumi:"tenantId"`
}

type IngestionState struct {
	// Name of the application.
	// Refer to the AWS Documentation for the [list of valid values](https://docs.aws.amazon.com/appfabric/latest/api/API_CreateIngestion.html#appfabric-CreateIngestion-request-app)
	App pulumi.StringPtrInput
	// Amazon Resource Name (ARN) of the app bundle to use for the request.
	AppBundleArn pulumi.StringPtrInput
	// ARN of the Ingestion.
	Arn pulumi.StringPtrInput
	// Ingestion type. Valid values are `auditLog`.
	IngestionType pulumi.StringPtrInput
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
	// ID of the application tenant.
	TenantId pulumi.StringPtrInput
}

func (IngestionState) ElementType() reflect.Type {
	return reflect.TypeOf((*ingestionState)(nil)).Elem()
}

type ingestionArgs struct {
	// Name of the application.
	// Refer to the AWS Documentation for the [list of valid values](https://docs.aws.amazon.com/appfabric/latest/api/API_CreateIngestion.html#appfabric-CreateIngestion-request-app)
	App string `pulumi:"app"`
	// Amazon Resource Name (ARN) of the app bundle to use for the request.
	AppBundleArn string `pulumi:"appBundleArn"`
	// Ingestion type. Valid values are `auditLog`.
	IngestionType string `pulumi:"ingestionType"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// ID of the application tenant.
	TenantId string `pulumi:"tenantId"`
}

// The set of arguments for constructing a Ingestion resource.
type IngestionArgs struct {
	// Name of the application.
	// Refer to the AWS Documentation for the [list of valid values](https://docs.aws.amazon.com/appfabric/latest/api/API_CreateIngestion.html#appfabric-CreateIngestion-request-app)
	App pulumi.StringInput
	// Amazon Resource Name (ARN) of the app bundle to use for the request.
	AppBundleArn pulumi.StringInput
	// Ingestion type. Valid values are `auditLog`.
	IngestionType pulumi.StringInput
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// ID of the application tenant.
	TenantId pulumi.StringInput
}

func (IngestionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ingestionArgs)(nil)).Elem()
}

type IngestionInput interface {
	pulumi.Input

	ToIngestionOutput() IngestionOutput
	ToIngestionOutputWithContext(ctx context.Context) IngestionOutput
}

func (*Ingestion) ElementType() reflect.Type {
	return reflect.TypeOf((**Ingestion)(nil)).Elem()
}

func (i *Ingestion) ToIngestionOutput() IngestionOutput {
	return i.ToIngestionOutputWithContext(context.Background())
}

func (i *Ingestion) ToIngestionOutputWithContext(ctx context.Context) IngestionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngestionOutput)
}

// IngestionArrayInput is an input type that accepts IngestionArray and IngestionArrayOutput values.
// You can construct a concrete instance of `IngestionArrayInput` via:
//
//	IngestionArray{ IngestionArgs{...} }
type IngestionArrayInput interface {
	pulumi.Input

	ToIngestionArrayOutput() IngestionArrayOutput
	ToIngestionArrayOutputWithContext(context.Context) IngestionArrayOutput
}

type IngestionArray []IngestionInput

func (IngestionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ingestion)(nil)).Elem()
}

func (i IngestionArray) ToIngestionArrayOutput() IngestionArrayOutput {
	return i.ToIngestionArrayOutputWithContext(context.Background())
}

func (i IngestionArray) ToIngestionArrayOutputWithContext(ctx context.Context) IngestionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngestionArrayOutput)
}

// IngestionMapInput is an input type that accepts IngestionMap and IngestionMapOutput values.
// You can construct a concrete instance of `IngestionMapInput` via:
//
//	IngestionMap{ "key": IngestionArgs{...} }
type IngestionMapInput interface {
	pulumi.Input

	ToIngestionMapOutput() IngestionMapOutput
	ToIngestionMapOutputWithContext(context.Context) IngestionMapOutput
}

type IngestionMap map[string]IngestionInput

func (IngestionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ingestion)(nil)).Elem()
}

func (i IngestionMap) ToIngestionMapOutput() IngestionMapOutput {
	return i.ToIngestionMapOutputWithContext(context.Background())
}

func (i IngestionMap) ToIngestionMapOutputWithContext(ctx context.Context) IngestionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngestionMapOutput)
}

type IngestionOutput struct{ *pulumi.OutputState }

func (IngestionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ingestion)(nil)).Elem()
}

func (o IngestionOutput) ToIngestionOutput() IngestionOutput {
	return o
}

func (o IngestionOutput) ToIngestionOutputWithContext(ctx context.Context) IngestionOutput {
	return o
}

// Name of the application.
// Refer to the AWS Documentation for the [list of valid values](https://docs.aws.amazon.com/appfabric/latest/api/API_CreateIngestion.html#appfabric-CreateIngestion-request-app)
func (o IngestionOutput) App() pulumi.StringOutput {
	return o.ApplyT(func(v *Ingestion) pulumi.StringOutput { return v.App }).(pulumi.StringOutput)
}

// Amazon Resource Name (ARN) of the app bundle to use for the request.
func (o IngestionOutput) AppBundleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Ingestion) pulumi.StringOutput { return v.AppBundleArn }).(pulumi.StringOutput)
}

// ARN of the Ingestion.
func (o IngestionOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Ingestion) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Ingestion type. Valid values are `auditLog`.
func (o IngestionOutput) IngestionType() pulumi.StringOutput {
	return o.ApplyT(func(v *Ingestion) pulumi.StringOutput { return v.IngestionType }).(pulumi.StringOutput)
}

// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o IngestionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Ingestion) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o IngestionOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Ingestion) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// ID of the application tenant.
func (o IngestionOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *Ingestion) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type IngestionArrayOutput struct{ *pulumi.OutputState }

func (IngestionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ingestion)(nil)).Elem()
}

func (o IngestionArrayOutput) ToIngestionArrayOutput() IngestionArrayOutput {
	return o
}

func (o IngestionArrayOutput) ToIngestionArrayOutputWithContext(ctx context.Context) IngestionArrayOutput {
	return o
}

func (o IngestionArrayOutput) Index(i pulumi.IntInput) IngestionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ingestion {
		return vs[0].([]*Ingestion)[vs[1].(int)]
	}).(IngestionOutput)
}

type IngestionMapOutput struct{ *pulumi.OutputState }

func (IngestionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ingestion)(nil)).Elem()
}

func (o IngestionMapOutput) ToIngestionMapOutput() IngestionMapOutput {
	return o
}

func (o IngestionMapOutput) ToIngestionMapOutputWithContext(ctx context.Context) IngestionMapOutput {
	return o
}

func (o IngestionMapOutput) MapIndex(k pulumi.StringInput) IngestionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ingestion {
		return vs[0].(map[string]*Ingestion)[vs[1].(string)]
	}).(IngestionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IngestionInput)(nil)).Elem(), &Ingestion{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngestionArrayInput)(nil)).Elem(), IngestionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngestionMapInput)(nil)).Elem(), IngestionMap{})
	pulumi.RegisterOutputType(IngestionOutput{})
	pulumi.RegisterOutputType(IngestionArrayOutput{})
	pulumi.RegisterOutputType(IngestionMapOutput{})
}
