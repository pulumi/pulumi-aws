// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fsx

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DataRepositoryAssociation struct {
	pulumi.CustomResourceState

	Arn                         pulumi.StringOutput               `pulumi:"arn"`
	AssociationId               pulumi.StringOutput               `pulumi:"associationId"`
	BatchImportMetaDataOnCreate pulumi.BoolPtrOutput              `pulumi:"batchImportMetaDataOnCreate"`
	DataRepositoryPath          pulumi.StringOutput               `pulumi:"dataRepositoryPath"`
	DeleteDataInFilesystem      pulumi.BoolPtrOutput              `pulumi:"deleteDataInFilesystem"`
	FileSystemId                pulumi.StringOutput               `pulumi:"fileSystemId"`
	FileSystemPath              pulumi.StringOutput               `pulumi:"fileSystemPath"`
	ImportedFileChunkSize       pulumi.IntOutput                  `pulumi:"importedFileChunkSize"`
	S3                          DataRepositoryAssociationS3Output `pulumi:"s3"`
	Tags                        pulumi.StringMapOutput            `pulumi:"tags"`
	TagsAll                     pulumi.StringMapOutput            `pulumi:"tagsAll"`
}

// NewDataRepositoryAssociation registers a new resource with the given unique name, arguments, and options.
func NewDataRepositoryAssociation(ctx *pulumi.Context,
	name string, args *DataRepositoryAssociationArgs, opts ...pulumi.ResourceOption) (*DataRepositoryAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataRepositoryPath == nil {
		return nil, errors.New("invalid value for required argument 'DataRepositoryPath'")
	}
	if args.FileSystemId == nil {
		return nil, errors.New("invalid value for required argument 'FileSystemId'")
	}
	if args.FileSystemPath == nil {
		return nil, errors.New("invalid value for required argument 'FileSystemPath'")
	}
	var resource DataRepositoryAssociation
	err := ctx.RegisterResource("aws:fsx/dataRepositoryAssociation:DataRepositoryAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataRepositoryAssociation gets an existing DataRepositoryAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataRepositoryAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataRepositoryAssociationState, opts ...pulumi.ResourceOption) (*DataRepositoryAssociation, error) {
	var resource DataRepositoryAssociation
	err := ctx.ReadResource("aws:fsx/dataRepositoryAssociation:DataRepositoryAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataRepositoryAssociation resources.
type dataRepositoryAssociationState struct {
	Arn                         *string                      `pulumi:"arn"`
	AssociationId               *string                      `pulumi:"associationId"`
	BatchImportMetaDataOnCreate *bool                        `pulumi:"batchImportMetaDataOnCreate"`
	DataRepositoryPath          *string                      `pulumi:"dataRepositoryPath"`
	DeleteDataInFilesystem      *bool                        `pulumi:"deleteDataInFilesystem"`
	FileSystemId                *string                      `pulumi:"fileSystemId"`
	FileSystemPath              *string                      `pulumi:"fileSystemPath"`
	ImportedFileChunkSize       *int                         `pulumi:"importedFileChunkSize"`
	S3                          *DataRepositoryAssociationS3 `pulumi:"s3"`
	Tags                        map[string]string            `pulumi:"tags"`
	TagsAll                     map[string]string            `pulumi:"tagsAll"`
}

type DataRepositoryAssociationState struct {
	Arn                         pulumi.StringPtrInput
	AssociationId               pulumi.StringPtrInput
	BatchImportMetaDataOnCreate pulumi.BoolPtrInput
	DataRepositoryPath          pulumi.StringPtrInput
	DeleteDataInFilesystem      pulumi.BoolPtrInput
	FileSystemId                pulumi.StringPtrInput
	FileSystemPath              pulumi.StringPtrInput
	ImportedFileChunkSize       pulumi.IntPtrInput
	S3                          DataRepositoryAssociationS3PtrInput
	Tags                        pulumi.StringMapInput
	TagsAll                     pulumi.StringMapInput
}

func (DataRepositoryAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataRepositoryAssociationState)(nil)).Elem()
}

type dataRepositoryAssociationArgs struct {
	BatchImportMetaDataOnCreate *bool                        `pulumi:"batchImportMetaDataOnCreate"`
	DataRepositoryPath          string                       `pulumi:"dataRepositoryPath"`
	DeleteDataInFilesystem      *bool                        `pulumi:"deleteDataInFilesystem"`
	FileSystemId                string                       `pulumi:"fileSystemId"`
	FileSystemPath              string                       `pulumi:"fileSystemPath"`
	ImportedFileChunkSize       *int                         `pulumi:"importedFileChunkSize"`
	S3                          *DataRepositoryAssociationS3 `pulumi:"s3"`
	Tags                        map[string]string            `pulumi:"tags"`
}

// The set of arguments for constructing a DataRepositoryAssociation resource.
type DataRepositoryAssociationArgs struct {
	BatchImportMetaDataOnCreate pulumi.BoolPtrInput
	DataRepositoryPath          pulumi.StringInput
	DeleteDataInFilesystem      pulumi.BoolPtrInput
	FileSystemId                pulumi.StringInput
	FileSystemPath              pulumi.StringInput
	ImportedFileChunkSize       pulumi.IntPtrInput
	S3                          DataRepositoryAssociationS3PtrInput
	Tags                        pulumi.StringMapInput
}

func (DataRepositoryAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataRepositoryAssociationArgs)(nil)).Elem()
}

type DataRepositoryAssociationInput interface {
	pulumi.Input

	ToDataRepositoryAssociationOutput() DataRepositoryAssociationOutput
	ToDataRepositoryAssociationOutputWithContext(ctx context.Context) DataRepositoryAssociationOutput
}

func (*DataRepositoryAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**DataRepositoryAssociation)(nil)).Elem()
}

func (i *DataRepositoryAssociation) ToDataRepositoryAssociationOutput() DataRepositoryAssociationOutput {
	return i.ToDataRepositoryAssociationOutputWithContext(context.Background())
}

func (i *DataRepositoryAssociation) ToDataRepositoryAssociationOutputWithContext(ctx context.Context) DataRepositoryAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataRepositoryAssociationOutput)
}

// DataRepositoryAssociationArrayInput is an input type that accepts DataRepositoryAssociationArray and DataRepositoryAssociationArrayOutput values.
// You can construct a concrete instance of `DataRepositoryAssociationArrayInput` via:
//
//	DataRepositoryAssociationArray{ DataRepositoryAssociationArgs{...} }
type DataRepositoryAssociationArrayInput interface {
	pulumi.Input

	ToDataRepositoryAssociationArrayOutput() DataRepositoryAssociationArrayOutput
	ToDataRepositoryAssociationArrayOutputWithContext(context.Context) DataRepositoryAssociationArrayOutput
}

type DataRepositoryAssociationArray []DataRepositoryAssociationInput

func (DataRepositoryAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataRepositoryAssociation)(nil)).Elem()
}

func (i DataRepositoryAssociationArray) ToDataRepositoryAssociationArrayOutput() DataRepositoryAssociationArrayOutput {
	return i.ToDataRepositoryAssociationArrayOutputWithContext(context.Background())
}

func (i DataRepositoryAssociationArray) ToDataRepositoryAssociationArrayOutputWithContext(ctx context.Context) DataRepositoryAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataRepositoryAssociationArrayOutput)
}

// DataRepositoryAssociationMapInput is an input type that accepts DataRepositoryAssociationMap and DataRepositoryAssociationMapOutput values.
// You can construct a concrete instance of `DataRepositoryAssociationMapInput` via:
//
//	DataRepositoryAssociationMap{ "key": DataRepositoryAssociationArgs{...} }
type DataRepositoryAssociationMapInput interface {
	pulumi.Input

	ToDataRepositoryAssociationMapOutput() DataRepositoryAssociationMapOutput
	ToDataRepositoryAssociationMapOutputWithContext(context.Context) DataRepositoryAssociationMapOutput
}

type DataRepositoryAssociationMap map[string]DataRepositoryAssociationInput

func (DataRepositoryAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataRepositoryAssociation)(nil)).Elem()
}

func (i DataRepositoryAssociationMap) ToDataRepositoryAssociationMapOutput() DataRepositoryAssociationMapOutput {
	return i.ToDataRepositoryAssociationMapOutputWithContext(context.Background())
}

func (i DataRepositoryAssociationMap) ToDataRepositoryAssociationMapOutputWithContext(ctx context.Context) DataRepositoryAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataRepositoryAssociationMapOutput)
}

type DataRepositoryAssociationOutput struct{ *pulumi.OutputState }

func (DataRepositoryAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataRepositoryAssociation)(nil)).Elem()
}

func (o DataRepositoryAssociationOutput) ToDataRepositoryAssociationOutput() DataRepositoryAssociationOutput {
	return o
}

func (o DataRepositoryAssociationOutput) ToDataRepositoryAssociationOutputWithContext(ctx context.Context) DataRepositoryAssociationOutput {
	return o
}

func (o DataRepositoryAssociationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *DataRepositoryAssociation) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o DataRepositoryAssociationOutput) AssociationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataRepositoryAssociation) pulumi.StringOutput { return v.AssociationId }).(pulumi.StringOutput)
}

func (o DataRepositoryAssociationOutput) BatchImportMetaDataOnCreate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataRepositoryAssociation) pulumi.BoolPtrOutput { return v.BatchImportMetaDataOnCreate }).(pulumi.BoolPtrOutput)
}

func (o DataRepositoryAssociationOutput) DataRepositoryPath() pulumi.StringOutput {
	return o.ApplyT(func(v *DataRepositoryAssociation) pulumi.StringOutput { return v.DataRepositoryPath }).(pulumi.StringOutput)
}

func (o DataRepositoryAssociationOutput) DeleteDataInFilesystem() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataRepositoryAssociation) pulumi.BoolPtrOutput { return v.DeleteDataInFilesystem }).(pulumi.BoolPtrOutput)
}

func (o DataRepositoryAssociationOutput) FileSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataRepositoryAssociation) pulumi.StringOutput { return v.FileSystemId }).(pulumi.StringOutput)
}

func (o DataRepositoryAssociationOutput) FileSystemPath() pulumi.StringOutput {
	return o.ApplyT(func(v *DataRepositoryAssociation) pulumi.StringOutput { return v.FileSystemPath }).(pulumi.StringOutput)
}

func (o DataRepositoryAssociationOutput) ImportedFileChunkSize() pulumi.IntOutput {
	return o.ApplyT(func(v *DataRepositoryAssociation) pulumi.IntOutput { return v.ImportedFileChunkSize }).(pulumi.IntOutput)
}

func (o DataRepositoryAssociationOutput) S3() DataRepositoryAssociationS3Output {
	return o.ApplyT(func(v *DataRepositoryAssociation) DataRepositoryAssociationS3Output { return v.S3 }).(DataRepositoryAssociationS3Output)
}

func (o DataRepositoryAssociationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataRepositoryAssociation) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o DataRepositoryAssociationOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataRepositoryAssociation) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type DataRepositoryAssociationArrayOutput struct{ *pulumi.OutputState }

func (DataRepositoryAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataRepositoryAssociation)(nil)).Elem()
}

func (o DataRepositoryAssociationArrayOutput) ToDataRepositoryAssociationArrayOutput() DataRepositoryAssociationArrayOutput {
	return o
}

func (o DataRepositoryAssociationArrayOutput) ToDataRepositoryAssociationArrayOutputWithContext(ctx context.Context) DataRepositoryAssociationArrayOutput {
	return o
}

func (o DataRepositoryAssociationArrayOutput) Index(i pulumi.IntInput) DataRepositoryAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataRepositoryAssociation {
		return vs[0].([]*DataRepositoryAssociation)[vs[1].(int)]
	}).(DataRepositoryAssociationOutput)
}

type DataRepositoryAssociationMapOutput struct{ *pulumi.OutputState }

func (DataRepositoryAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataRepositoryAssociation)(nil)).Elem()
}

func (o DataRepositoryAssociationMapOutput) ToDataRepositoryAssociationMapOutput() DataRepositoryAssociationMapOutput {
	return o
}

func (o DataRepositoryAssociationMapOutput) ToDataRepositoryAssociationMapOutputWithContext(ctx context.Context) DataRepositoryAssociationMapOutput {
	return o
}

func (o DataRepositoryAssociationMapOutput) MapIndex(k pulumi.StringInput) DataRepositoryAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataRepositoryAssociation {
		return vs[0].(map[string]*DataRepositoryAssociation)[vs[1].(string)]
	}).(DataRepositoryAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataRepositoryAssociationInput)(nil)).Elem(), &DataRepositoryAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataRepositoryAssociationArrayInput)(nil)).Elem(), DataRepositoryAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataRepositoryAssociationMapInput)(nil)).Elem(), DataRepositoryAssociationMap{})
	pulumi.RegisterOutputType(DataRepositoryAssociationOutput{})
	pulumi.RegisterOutputType(DataRepositoryAssociationArrayOutput{})
	pulumi.RegisterOutputType(DataRepositoryAssociationMapOutput{})
}
