// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fsx

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Amazon FSx for OpenZFS volume.
// See the [FSx OpenZFS User Guide](https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/what-is-fsx.html) for more information.
//
// ## Example Usage
// ### Root volume Example
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/fsx"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleOpenZfsFileSystem, err := fsx.NewOpenZfsFileSystem(ctx, "exampleOpenZfsFileSystem", &fsx.OpenZfsFileSystemArgs{
// 			StorageCapacity: pulumi.Int(64),
// 			SubnetIds: pulumi.String{
// 				aws_subnet.Example.Id,
// 			},
// 			DeploymentType:     pulumi.String("SINGLE_AZ_1"),
// 			ThroughputCapacity: pulumi.Int(64),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = fsx.NewOpenZfsSnapshot(ctx, "exampleOpenZfsSnapshot", &fsx.OpenZfsSnapshotArgs{
// 			VolumeId: exampleOpenZfsFileSystem.RootVolumeId,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Child volume Example
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/fsx"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleOpenZfsFileSystem, err := fsx.NewOpenZfsFileSystem(ctx, "exampleOpenZfsFileSystem", &fsx.OpenZfsFileSystemArgs{
// 			StorageCapacity: pulumi.Int(64),
// 			SubnetIds: pulumi.String{
// 				aws_subnet.Example.Id,
// 			},
// 			DeploymentType:     pulumi.String("SINGLE_AZ_1"),
// 			ThroughputCapacity: pulumi.Int(64),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleOpenZfsVolume, err := fsx.NewOpenZfsVolume(ctx, "exampleOpenZfsVolume", &fsx.OpenZfsVolumeArgs{
// 			ParentVolumeId: exampleOpenZfsFileSystem.RootVolumeId,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = fsx.NewOpenZfsSnapshot(ctx, "exampleOpenZfsSnapshot", &fsx.OpenZfsSnapshotArgs{
// 			VolumeId: exampleOpenZfsVolume.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// FSx OpenZFS snapshot can be imported using the `id`, e.g.,
//
// ```sh
//  $ pulumi import aws:fsx/openZfsSnapshot:OpenZfsSnapshot example fs-543ab12b1ca672f33
// ```
type OpenZfsSnapshot struct {
	pulumi.CustomResourceState

	// Amazon Resource Name of the snapshot.
	Arn          pulumi.StringOutput `pulumi:"arn"`
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// The name of the Snapshot. You can use a maximum of 203 alphanumeric characters plus either _ or -  or : or . for the name.
	Name pulumi.StringOutput `pulumi:"name"`
	// A map of tags to assign to the file system. If configured with a provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level. If you have set `copyTagsToBackups` to true, and you specify one or more tags, no existing file system tags are copied from the file system to the backup.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// The ID of the volume to snapshot. This can be the root volume or a child volume.
	VolumeId pulumi.StringOutput `pulumi:"volumeId"`
}

// NewOpenZfsSnapshot registers a new resource with the given unique name, arguments, and options.
func NewOpenZfsSnapshot(ctx *pulumi.Context,
	name string, args *OpenZfsSnapshotArgs, opts ...pulumi.ResourceOption) (*OpenZfsSnapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VolumeId == nil {
		return nil, errors.New("invalid value for required argument 'VolumeId'")
	}
	var resource OpenZfsSnapshot
	err := ctx.RegisterResource("aws:fsx/openZfsSnapshot:OpenZfsSnapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenZfsSnapshot gets an existing OpenZfsSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenZfsSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenZfsSnapshotState, opts ...pulumi.ResourceOption) (*OpenZfsSnapshot, error) {
	var resource OpenZfsSnapshot
	err := ctx.ReadResource("aws:fsx/openZfsSnapshot:OpenZfsSnapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenZfsSnapshot resources.
type openZfsSnapshotState struct {
	// Amazon Resource Name of the snapshot.
	Arn          *string `pulumi:"arn"`
	CreationTime *string `pulumi:"creationTime"`
	// The name of the Snapshot. You can use a maximum of 203 alphanumeric characters plus either _ or -  or : or . for the name.
	Name *string `pulumi:"name"`
	// A map of tags to assign to the file system. If configured with a provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level. If you have set `copyTagsToBackups` to true, and you specify one or more tags, no existing file system tags are copied from the file system to the backup.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The ID of the volume to snapshot. This can be the root volume or a child volume.
	VolumeId *string `pulumi:"volumeId"`
}

type OpenZfsSnapshotState struct {
	// Amazon Resource Name of the snapshot.
	Arn          pulumi.StringPtrInput
	CreationTime pulumi.StringPtrInput
	// The name of the Snapshot. You can use a maximum of 203 alphanumeric characters plus either _ or -  or : or . for the name.
	Name pulumi.StringPtrInput
	// A map of tags to assign to the file system. If configured with a provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level. If you have set `copyTagsToBackups` to true, and you specify one or more tags, no existing file system tags are copied from the file system to the backup.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).
	TagsAll pulumi.StringMapInput
	// The ID of the volume to snapshot. This can be the root volume or a child volume.
	VolumeId pulumi.StringPtrInput
}

func (OpenZfsSnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*openZfsSnapshotState)(nil)).Elem()
}

type openZfsSnapshotArgs struct {
	// The name of the Snapshot. You can use a maximum of 203 alphanumeric characters plus either _ or -  or : or . for the name.
	Name *string `pulumi:"name"`
	// A map of tags to assign to the file system. If configured with a provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level. If you have set `copyTagsToBackups` to true, and you specify one or more tags, no existing file system tags are copied from the file system to the backup.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The ID of the volume to snapshot. This can be the root volume or a child volume.
	VolumeId string `pulumi:"volumeId"`
}

// The set of arguments for constructing a OpenZfsSnapshot resource.
type OpenZfsSnapshotArgs struct {
	// The name of the Snapshot. You can use a maximum of 203 alphanumeric characters plus either _ or -  or : or . for the name.
	Name pulumi.StringPtrInput
	// A map of tags to assign to the file system. If configured with a provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level. If you have set `copyTagsToBackups` to true, and you specify one or more tags, no existing file system tags are copied from the file system to the backup.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).
	TagsAll pulumi.StringMapInput
	// The ID of the volume to snapshot. This can be the root volume or a child volume.
	VolumeId pulumi.StringInput
}

func (OpenZfsSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openZfsSnapshotArgs)(nil)).Elem()
}

type OpenZfsSnapshotInput interface {
	pulumi.Input

	ToOpenZfsSnapshotOutput() OpenZfsSnapshotOutput
	ToOpenZfsSnapshotOutputWithContext(ctx context.Context) OpenZfsSnapshotOutput
}

func (*OpenZfsSnapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenZfsSnapshot)(nil)).Elem()
}

func (i *OpenZfsSnapshot) ToOpenZfsSnapshotOutput() OpenZfsSnapshotOutput {
	return i.ToOpenZfsSnapshotOutputWithContext(context.Background())
}

func (i *OpenZfsSnapshot) ToOpenZfsSnapshotOutputWithContext(ctx context.Context) OpenZfsSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenZfsSnapshotOutput)
}

// OpenZfsSnapshotArrayInput is an input type that accepts OpenZfsSnapshotArray and OpenZfsSnapshotArrayOutput values.
// You can construct a concrete instance of `OpenZfsSnapshotArrayInput` via:
//
//          OpenZfsSnapshotArray{ OpenZfsSnapshotArgs{...} }
type OpenZfsSnapshotArrayInput interface {
	pulumi.Input

	ToOpenZfsSnapshotArrayOutput() OpenZfsSnapshotArrayOutput
	ToOpenZfsSnapshotArrayOutputWithContext(context.Context) OpenZfsSnapshotArrayOutput
}

type OpenZfsSnapshotArray []OpenZfsSnapshotInput

func (OpenZfsSnapshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenZfsSnapshot)(nil)).Elem()
}

func (i OpenZfsSnapshotArray) ToOpenZfsSnapshotArrayOutput() OpenZfsSnapshotArrayOutput {
	return i.ToOpenZfsSnapshotArrayOutputWithContext(context.Background())
}

func (i OpenZfsSnapshotArray) ToOpenZfsSnapshotArrayOutputWithContext(ctx context.Context) OpenZfsSnapshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenZfsSnapshotArrayOutput)
}

// OpenZfsSnapshotMapInput is an input type that accepts OpenZfsSnapshotMap and OpenZfsSnapshotMapOutput values.
// You can construct a concrete instance of `OpenZfsSnapshotMapInput` via:
//
//          OpenZfsSnapshotMap{ "key": OpenZfsSnapshotArgs{...} }
type OpenZfsSnapshotMapInput interface {
	pulumi.Input

	ToOpenZfsSnapshotMapOutput() OpenZfsSnapshotMapOutput
	ToOpenZfsSnapshotMapOutputWithContext(context.Context) OpenZfsSnapshotMapOutput
}

type OpenZfsSnapshotMap map[string]OpenZfsSnapshotInput

func (OpenZfsSnapshotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenZfsSnapshot)(nil)).Elem()
}

func (i OpenZfsSnapshotMap) ToOpenZfsSnapshotMapOutput() OpenZfsSnapshotMapOutput {
	return i.ToOpenZfsSnapshotMapOutputWithContext(context.Background())
}

func (i OpenZfsSnapshotMap) ToOpenZfsSnapshotMapOutputWithContext(ctx context.Context) OpenZfsSnapshotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenZfsSnapshotMapOutput)
}

type OpenZfsSnapshotOutput struct{ *pulumi.OutputState }

func (OpenZfsSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenZfsSnapshot)(nil)).Elem()
}

func (o OpenZfsSnapshotOutput) ToOpenZfsSnapshotOutput() OpenZfsSnapshotOutput {
	return o
}

func (o OpenZfsSnapshotOutput) ToOpenZfsSnapshotOutputWithContext(ctx context.Context) OpenZfsSnapshotOutput {
	return o
}

type OpenZfsSnapshotArrayOutput struct{ *pulumi.OutputState }

func (OpenZfsSnapshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenZfsSnapshot)(nil)).Elem()
}

func (o OpenZfsSnapshotArrayOutput) ToOpenZfsSnapshotArrayOutput() OpenZfsSnapshotArrayOutput {
	return o
}

func (o OpenZfsSnapshotArrayOutput) ToOpenZfsSnapshotArrayOutputWithContext(ctx context.Context) OpenZfsSnapshotArrayOutput {
	return o
}

func (o OpenZfsSnapshotArrayOutput) Index(i pulumi.IntInput) OpenZfsSnapshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenZfsSnapshot {
		return vs[0].([]*OpenZfsSnapshot)[vs[1].(int)]
	}).(OpenZfsSnapshotOutput)
}

type OpenZfsSnapshotMapOutput struct{ *pulumi.OutputState }

func (OpenZfsSnapshotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenZfsSnapshot)(nil)).Elem()
}

func (o OpenZfsSnapshotMapOutput) ToOpenZfsSnapshotMapOutput() OpenZfsSnapshotMapOutput {
	return o
}

func (o OpenZfsSnapshotMapOutput) ToOpenZfsSnapshotMapOutputWithContext(ctx context.Context) OpenZfsSnapshotMapOutput {
	return o
}

func (o OpenZfsSnapshotMapOutput) MapIndex(k pulumi.StringInput) OpenZfsSnapshotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenZfsSnapshot {
		return vs[0].(map[string]*OpenZfsSnapshot)[vs[1].(string)]
	}).(OpenZfsSnapshotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenZfsSnapshotInput)(nil)).Elem(), &OpenZfsSnapshot{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenZfsSnapshotArrayInput)(nil)).Elem(), OpenZfsSnapshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenZfsSnapshotMapInput)(nil)).Elem(), OpenZfsSnapshotMap{})
	pulumi.RegisterOutputType(OpenZfsSnapshotOutput{})
	pulumi.RegisterOutputType(OpenZfsSnapshotArrayOutput{})
	pulumi.RegisterOutputType(OpenZfsSnapshotMapOutput{})
}
