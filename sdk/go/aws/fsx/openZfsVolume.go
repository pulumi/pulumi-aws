// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fsx

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type OpenZfsVolume struct {
	pulumi.CustomResourceState

	Arn                           pulumi.StringOutput                       `pulumi:"arn"`
	CopyTagsToSnapshots           pulumi.BoolPtrOutput                      `pulumi:"copyTagsToSnapshots"`
	DataCompressionType           pulumi.StringPtrOutput                    `pulumi:"dataCompressionType"`
	Name                          pulumi.StringOutput                       `pulumi:"name"`
	NfsExports                    OpenZfsVolumeNfsExportsPtrOutput          `pulumi:"nfsExports"`
	OriginSnapshot                OpenZfsVolumeOriginSnapshotPtrOutput      `pulumi:"originSnapshot"`
	ParentVolumeId                pulumi.StringOutput                       `pulumi:"parentVolumeId"`
	ReadOnly                      pulumi.BoolOutput                         `pulumi:"readOnly"`
	RecordSizeKib                 pulumi.IntPtrOutput                       `pulumi:"recordSizeKib"`
	StorageCapacityQuotaGib       pulumi.IntOutput                          `pulumi:"storageCapacityQuotaGib"`
	StorageCapacityReservationGib pulumi.IntOutput                          `pulumi:"storageCapacityReservationGib"`
	Tags                          pulumi.StringMapOutput                    `pulumi:"tags"`
	TagsAll                       pulumi.StringMapOutput                    `pulumi:"tagsAll"`
	UserAndGroupQuotas            OpenZfsVolumeUserAndGroupQuotaArrayOutput `pulumi:"userAndGroupQuotas"`
	VolumeType                    pulumi.StringPtrOutput                    `pulumi:"volumeType"`
}

// NewOpenZfsVolume registers a new resource with the given unique name, arguments, and options.
func NewOpenZfsVolume(ctx *pulumi.Context,
	name string, args *OpenZfsVolumeArgs, opts ...pulumi.ResourceOption) (*OpenZfsVolume, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ParentVolumeId == nil {
		return nil, errors.New("invalid value for required argument 'ParentVolumeId'")
	}
	var resource OpenZfsVolume
	err := ctx.RegisterResource("aws:fsx/openZfsVolume:OpenZfsVolume", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenZfsVolume gets an existing OpenZfsVolume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenZfsVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenZfsVolumeState, opts ...pulumi.ResourceOption) (*OpenZfsVolume, error) {
	var resource OpenZfsVolume
	err := ctx.ReadResource("aws:fsx/openZfsVolume:OpenZfsVolume", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenZfsVolume resources.
type openZfsVolumeState struct {
	Arn                           *string                          `pulumi:"arn"`
	CopyTagsToSnapshots           *bool                            `pulumi:"copyTagsToSnapshots"`
	DataCompressionType           *string                          `pulumi:"dataCompressionType"`
	Name                          *string                          `pulumi:"name"`
	NfsExports                    *OpenZfsVolumeNfsExports         `pulumi:"nfsExports"`
	OriginSnapshot                *OpenZfsVolumeOriginSnapshot     `pulumi:"originSnapshot"`
	ParentVolumeId                *string                          `pulumi:"parentVolumeId"`
	ReadOnly                      *bool                            `pulumi:"readOnly"`
	RecordSizeKib                 *int                             `pulumi:"recordSizeKib"`
	StorageCapacityQuotaGib       *int                             `pulumi:"storageCapacityQuotaGib"`
	StorageCapacityReservationGib *int                             `pulumi:"storageCapacityReservationGib"`
	Tags                          map[string]string                `pulumi:"tags"`
	TagsAll                       map[string]string                `pulumi:"tagsAll"`
	UserAndGroupQuotas            []OpenZfsVolumeUserAndGroupQuota `pulumi:"userAndGroupQuotas"`
	VolumeType                    *string                          `pulumi:"volumeType"`
}

type OpenZfsVolumeState struct {
	Arn                           pulumi.StringPtrInput
	CopyTagsToSnapshots           pulumi.BoolPtrInput
	DataCompressionType           pulumi.StringPtrInput
	Name                          pulumi.StringPtrInput
	NfsExports                    OpenZfsVolumeNfsExportsPtrInput
	OriginSnapshot                OpenZfsVolumeOriginSnapshotPtrInput
	ParentVolumeId                pulumi.StringPtrInput
	ReadOnly                      pulumi.BoolPtrInput
	RecordSizeKib                 pulumi.IntPtrInput
	StorageCapacityQuotaGib       pulumi.IntPtrInput
	StorageCapacityReservationGib pulumi.IntPtrInput
	Tags                          pulumi.StringMapInput
	TagsAll                       pulumi.StringMapInput
	UserAndGroupQuotas            OpenZfsVolumeUserAndGroupQuotaArrayInput
	VolumeType                    pulumi.StringPtrInput
}

func (OpenZfsVolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*openZfsVolumeState)(nil)).Elem()
}

type openZfsVolumeArgs struct {
	CopyTagsToSnapshots           *bool                            `pulumi:"copyTagsToSnapshots"`
	DataCompressionType           *string                          `pulumi:"dataCompressionType"`
	Name                          *string                          `pulumi:"name"`
	NfsExports                    *OpenZfsVolumeNfsExports         `pulumi:"nfsExports"`
	OriginSnapshot                *OpenZfsVolumeOriginSnapshot     `pulumi:"originSnapshot"`
	ParentVolumeId                string                           `pulumi:"parentVolumeId"`
	ReadOnly                      *bool                            `pulumi:"readOnly"`
	RecordSizeKib                 *int                             `pulumi:"recordSizeKib"`
	StorageCapacityQuotaGib       *int                             `pulumi:"storageCapacityQuotaGib"`
	StorageCapacityReservationGib *int                             `pulumi:"storageCapacityReservationGib"`
	Tags                          map[string]string                `pulumi:"tags"`
	UserAndGroupQuotas            []OpenZfsVolumeUserAndGroupQuota `pulumi:"userAndGroupQuotas"`
	VolumeType                    *string                          `pulumi:"volumeType"`
}

// The set of arguments for constructing a OpenZfsVolume resource.
type OpenZfsVolumeArgs struct {
	CopyTagsToSnapshots           pulumi.BoolPtrInput
	DataCompressionType           pulumi.StringPtrInput
	Name                          pulumi.StringPtrInput
	NfsExports                    OpenZfsVolumeNfsExportsPtrInput
	OriginSnapshot                OpenZfsVolumeOriginSnapshotPtrInput
	ParentVolumeId                pulumi.StringInput
	ReadOnly                      pulumi.BoolPtrInput
	RecordSizeKib                 pulumi.IntPtrInput
	StorageCapacityQuotaGib       pulumi.IntPtrInput
	StorageCapacityReservationGib pulumi.IntPtrInput
	Tags                          pulumi.StringMapInput
	UserAndGroupQuotas            OpenZfsVolumeUserAndGroupQuotaArrayInput
	VolumeType                    pulumi.StringPtrInput
}

func (OpenZfsVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openZfsVolumeArgs)(nil)).Elem()
}

type OpenZfsVolumeInput interface {
	pulumi.Input

	ToOpenZfsVolumeOutput() OpenZfsVolumeOutput
	ToOpenZfsVolumeOutputWithContext(ctx context.Context) OpenZfsVolumeOutput
}

func (*OpenZfsVolume) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenZfsVolume)(nil)).Elem()
}

func (i *OpenZfsVolume) ToOpenZfsVolumeOutput() OpenZfsVolumeOutput {
	return i.ToOpenZfsVolumeOutputWithContext(context.Background())
}

func (i *OpenZfsVolume) ToOpenZfsVolumeOutputWithContext(ctx context.Context) OpenZfsVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenZfsVolumeOutput)
}

// OpenZfsVolumeArrayInput is an input type that accepts OpenZfsVolumeArray and OpenZfsVolumeArrayOutput values.
// You can construct a concrete instance of `OpenZfsVolumeArrayInput` via:
//
//	OpenZfsVolumeArray{ OpenZfsVolumeArgs{...} }
type OpenZfsVolumeArrayInput interface {
	pulumi.Input

	ToOpenZfsVolumeArrayOutput() OpenZfsVolumeArrayOutput
	ToOpenZfsVolumeArrayOutputWithContext(context.Context) OpenZfsVolumeArrayOutput
}

type OpenZfsVolumeArray []OpenZfsVolumeInput

func (OpenZfsVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenZfsVolume)(nil)).Elem()
}

func (i OpenZfsVolumeArray) ToOpenZfsVolumeArrayOutput() OpenZfsVolumeArrayOutput {
	return i.ToOpenZfsVolumeArrayOutputWithContext(context.Background())
}

func (i OpenZfsVolumeArray) ToOpenZfsVolumeArrayOutputWithContext(ctx context.Context) OpenZfsVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenZfsVolumeArrayOutput)
}

// OpenZfsVolumeMapInput is an input type that accepts OpenZfsVolumeMap and OpenZfsVolumeMapOutput values.
// You can construct a concrete instance of `OpenZfsVolumeMapInput` via:
//
//	OpenZfsVolumeMap{ "key": OpenZfsVolumeArgs{...} }
type OpenZfsVolumeMapInput interface {
	pulumi.Input

	ToOpenZfsVolumeMapOutput() OpenZfsVolumeMapOutput
	ToOpenZfsVolumeMapOutputWithContext(context.Context) OpenZfsVolumeMapOutput
}

type OpenZfsVolumeMap map[string]OpenZfsVolumeInput

func (OpenZfsVolumeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenZfsVolume)(nil)).Elem()
}

func (i OpenZfsVolumeMap) ToOpenZfsVolumeMapOutput() OpenZfsVolumeMapOutput {
	return i.ToOpenZfsVolumeMapOutputWithContext(context.Background())
}

func (i OpenZfsVolumeMap) ToOpenZfsVolumeMapOutputWithContext(ctx context.Context) OpenZfsVolumeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenZfsVolumeMapOutput)
}

type OpenZfsVolumeOutput struct{ *pulumi.OutputState }

func (OpenZfsVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenZfsVolume)(nil)).Elem()
}

func (o OpenZfsVolumeOutput) ToOpenZfsVolumeOutput() OpenZfsVolumeOutput {
	return o
}

func (o OpenZfsVolumeOutput) ToOpenZfsVolumeOutputWithContext(ctx context.Context) OpenZfsVolumeOutput {
	return o
}

func (o OpenZfsVolumeOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenZfsVolume) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o OpenZfsVolumeOutput) CopyTagsToSnapshots() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OpenZfsVolume) pulumi.BoolPtrOutput { return v.CopyTagsToSnapshots }).(pulumi.BoolPtrOutput)
}

func (o OpenZfsVolumeOutput) DataCompressionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenZfsVolume) pulumi.StringPtrOutput { return v.DataCompressionType }).(pulumi.StringPtrOutput)
}

func (o OpenZfsVolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenZfsVolume) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o OpenZfsVolumeOutput) NfsExports() OpenZfsVolumeNfsExportsPtrOutput {
	return o.ApplyT(func(v *OpenZfsVolume) OpenZfsVolumeNfsExportsPtrOutput { return v.NfsExports }).(OpenZfsVolumeNfsExportsPtrOutput)
}

func (o OpenZfsVolumeOutput) OriginSnapshot() OpenZfsVolumeOriginSnapshotPtrOutput {
	return o.ApplyT(func(v *OpenZfsVolume) OpenZfsVolumeOriginSnapshotPtrOutput { return v.OriginSnapshot }).(OpenZfsVolumeOriginSnapshotPtrOutput)
}

func (o OpenZfsVolumeOutput) ParentVolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenZfsVolume) pulumi.StringOutput { return v.ParentVolumeId }).(pulumi.StringOutput)
}

func (o OpenZfsVolumeOutput) ReadOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v *OpenZfsVolume) pulumi.BoolOutput { return v.ReadOnly }).(pulumi.BoolOutput)
}

func (o OpenZfsVolumeOutput) RecordSizeKib() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OpenZfsVolume) pulumi.IntPtrOutput { return v.RecordSizeKib }).(pulumi.IntPtrOutput)
}

func (o OpenZfsVolumeOutput) StorageCapacityQuotaGib() pulumi.IntOutput {
	return o.ApplyT(func(v *OpenZfsVolume) pulumi.IntOutput { return v.StorageCapacityQuotaGib }).(pulumi.IntOutput)
}

func (o OpenZfsVolumeOutput) StorageCapacityReservationGib() pulumi.IntOutput {
	return o.ApplyT(func(v *OpenZfsVolume) pulumi.IntOutput { return v.StorageCapacityReservationGib }).(pulumi.IntOutput)
}

func (o OpenZfsVolumeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *OpenZfsVolume) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o OpenZfsVolumeOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *OpenZfsVolume) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o OpenZfsVolumeOutput) UserAndGroupQuotas() OpenZfsVolumeUserAndGroupQuotaArrayOutput {
	return o.ApplyT(func(v *OpenZfsVolume) OpenZfsVolumeUserAndGroupQuotaArrayOutput { return v.UserAndGroupQuotas }).(OpenZfsVolumeUserAndGroupQuotaArrayOutput)
}

func (o OpenZfsVolumeOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenZfsVolume) pulumi.StringPtrOutput { return v.VolumeType }).(pulumi.StringPtrOutput)
}

type OpenZfsVolumeArrayOutput struct{ *pulumi.OutputState }

func (OpenZfsVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenZfsVolume)(nil)).Elem()
}

func (o OpenZfsVolumeArrayOutput) ToOpenZfsVolumeArrayOutput() OpenZfsVolumeArrayOutput {
	return o
}

func (o OpenZfsVolumeArrayOutput) ToOpenZfsVolumeArrayOutputWithContext(ctx context.Context) OpenZfsVolumeArrayOutput {
	return o
}

func (o OpenZfsVolumeArrayOutput) Index(i pulumi.IntInput) OpenZfsVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenZfsVolume {
		return vs[0].([]*OpenZfsVolume)[vs[1].(int)]
	}).(OpenZfsVolumeOutput)
}

type OpenZfsVolumeMapOutput struct{ *pulumi.OutputState }

func (OpenZfsVolumeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenZfsVolume)(nil)).Elem()
}

func (o OpenZfsVolumeMapOutput) ToOpenZfsVolumeMapOutput() OpenZfsVolumeMapOutput {
	return o
}

func (o OpenZfsVolumeMapOutput) ToOpenZfsVolumeMapOutputWithContext(ctx context.Context) OpenZfsVolumeMapOutput {
	return o
}

func (o OpenZfsVolumeMapOutput) MapIndex(k pulumi.StringInput) OpenZfsVolumeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenZfsVolume {
		return vs[0].(map[string]*OpenZfsVolume)[vs[1].(string)]
	}).(OpenZfsVolumeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenZfsVolumeInput)(nil)).Elem(), &OpenZfsVolume{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenZfsVolumeArrayInput)(nil)).Elem(), OpenZfsVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenZfsVolumeMapInput)(nil)).Elem(), OpenZfsVolumeMap{})
	pulumi.RegisterOutputType(OpenZfsVolumeOutput{})
	pulumi.RegisterOutputType(OpenZfsVolumeArrayOutput{})
	pulumi.RegisterOutputType(OpenZfsVolumeMapOutput{})
}
