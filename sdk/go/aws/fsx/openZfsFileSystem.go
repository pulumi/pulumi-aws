// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fsx

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an Amazon FSx for OpenZFS file system.
// See the [FSx OpenZFS User Guide](https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/what-is-fsx.html) for more information.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/fsx"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fsx.NewOpenZfsFileSystem(ctx, "test", &fsx.OpenZfsFileSystemArgs{
//				StorageCapacity: pulumi.Int(64),
//				SubnetIds: pulumi.String{
//					aws_subnet.Test1.Id,
//				},
//				DeploymentType:     pulumi.String("SINGLE_AZ_1"),
//				ThroughputCapacity: pulumi.Int(64),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import FSx File Systems using the `id`. For example:
//
// ```sh
//
//	$ pulumi import aws:fsx/openZfsFileSystem:OpenZfsFileSystem example fs-543ab12b1ca672f33
//
// ```
//
//	Certain resource arguments, like `security_group_ids`, do not have a FSx API method for reading the information after creation. If the argument is set in the TODO configuration on an imported resource, TODO will always show a difference. To workaround this behavior, either omit the argument from the TODO configuration or use `ignore_changes` to hide the difference. For example:
type OpenZfsFileSystem struct {
	pulumi.CustomResourceState

	// Amazon Resource Name of the file system.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The number of days to retain automatic backups. Setting this to 0 disables automatic backups. You can retain automatic backups for a maximum of 90 days.
	AutomaticBackupRetentionDays pulumi.IntPtrOutput `pulumi:"automaticBackupRetentionDays"`
	// The ID of the source backup to create the filesystem from.
	BackupId pulumi.StringPtrOutput `pulumi:"backupId"`
	// A boolean flag indicating whether tags for the file system should be copied to backups. The default value is false.
	CopyTagsToBackups pulumi.BoolPtrOutput `pulumi:"copyTagsToBackups"`
	// A boolean flag indicating whether tags for the file system should be copied to snapshots. The default value is false.
	CopyTagsToVolumes pulumi.BoolPtrOutput `pulumi:"copyTagsToVolumes"`
	// A recurring daily time, in the format HH:MM. HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 05:00 specifies 5 AM daily. Requires `automaticBackupRetentionDays` to be set.
	DailyAutomaticBackupStartTime pulumi.StringOutput `pulumi:"dailyAutomaticBackupStartTime"`
	// The filesystem deployment type. Valid values: `SINGLE_AZ_1`, `SINGLE_AZ_2` and `MULTI_AZ_1`.
	DeploymentType pulumi.StringOutput `pulumi:"deploymentType"`
	// The SSD IOPS configuration for the Amazon FSx for OpenZFS file system. See Disk Iops Configuration below.
	DiskIopsConfiguration OpenZfsFileSystemDiskIopsConfigurationOutput `pulumi:"diskIopsConfiguration"`
	// DNS name for the file system, e.g., `fs-12345678.fsx.us-west-2.amazonaws.com`
	DnsName pulumi.StringOutput `pulumi:"dnsName"`
	// (Multi-AZ only) Specifies the IP address range in which the endpoints to access your file system will be created.
	EndpointIpAddressRange pulumi.StringOutput `pulumi:"endpointIpAddressRange"`
	// ARN for the KMS Key to encrypt the file system at rest, Defaults to an AWS managed KMS Key.
	KmsKeyId pulumi.StringOutput `pulumi:"kmsKeyId"`
	// Set of Elastic Network Interface identifiers from which the file system is accessible The first network interface returned is the primary network interface.
	NetworkInterfaceIds pulumi.StringArrayOutput `pulumi:"networkInterfaceIds"`
	// AWS account identifier that created the file system.
	OwnerId pulumi.StringOutput `pulumi:"ownerId"`
	// (Multi-AZ only) Required when `deploymentType` is set to `MULTI_AZ_1`. This specifies the subnet in which you want the preferred file server to be located.
	PreferredSubnetId pulumi.StringPtrOutput `pulumi:"preferredSubnetId"`
	// The configuration for the root volume of the file system. All other volumes are children or the root volume. See Root Volume Configuration below.
	RootVolumeConfiguration OpenZfsFileSystemRootVolumeConfigurationOutput `pulumi:"rootVolumeConfiguration"`
	// Identifier of the root volume, e.g., `fsvol-12345678`
	RootVolumeId pulumi.StringOutput `pulumi:"rootVolumeId"`
	// (Multi-AZ only) Specifies the route tables in which Amazon FSx creates the rules for routing traffic to the correct file server. You should specify all virtual private cloud (VPC) route tables associated with the subnets in which your clients are located. By default, Amazon FSx selects your VPC's default route table.
	RouteTableIds pulumi.StringArrayOutput `pulumi:"routeTableIds"`
	// A list of IDs for the security groups that apply to the specified network interfaces created for file system access. These security groups will apply to all network interfaces.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// The storage capacity (GiB) of the file system. Valid values between `64` and `524288`.
	StorageCapacity pulumi.IntPtrOutput `pulumi:"storageCapacity"`
	// The filesystem storage type. Only `SSD` is supported.
	StorageType pulumi.StringPtrOutput `pulumi:"storageType"`
	// A list of IDs for the subnets that the file system will be accessible from.
	SubnetIds pulumi.StringOutput `pulumi:"subnetIds"`
	// A map of tags to assign to the file system. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// Throughput (MB/s) of the file system. Valid values depend on `deploymentType`. Must be one of `64`, `128`, `256`, `512`, `1024`, `2048`, `3072`, `4096` for `SINGLE_AZ_1`. Must be one of `160`, `320`, `640`, `1280`, `2560`, `3840`, `5120`, `7680`, `10240` for `SINGLE_AZ_2`.
	ThroughputCapacity pulumi.IntOutput `pulumi:"throughputCapacity"`
	// Identifier of the Virtual Private Cloud for the file system.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// The preferred start time (in `d:HH:MM` format) to perform weekly maintenance, in the UTC time zone.
	WeeklyMaintenanceStartTime pulumi.StringOutput `pulumi:"weeklyMaintenanceStartTime"`
}

// NewOpenZfsFileSystem registers a new resource with the given unique name, arguments, and options.
func NewOpenZfsFileSystem(ctx *pulumi.Context,
	name string, args *OpenZfsFileSystemArgs, opts ...pulumi.ResourceOption) (*OpenZfsFileSystem, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeploymentType == nil {
		return nil, errors.New("invalid value for required argument 'DeploymentType'")
	}
	if args.SubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'SubnetIds'")
	}
	if args.ThroughputCapacity == nil {
		return nil, errors.New("invalid value for required argument 'ThroughputCapacity'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenZfsFileSystem
	err := ctx.RegisterResource("aws:fsx/openZfsFileSystem:OpenZfsFileSystem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenZfsFileSystem gets an existing OpenZfsFileSystem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenZfsFileSystem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenZfsFileSystemState, opts ...pulumi.ResourceOption) (*OpenZfsFileSystem, error) {
	var resource OpenZfsFileSystem
	err := ctx.ReadResource("aws:fsx/openZfsFileSystem:OpenZfsFileSystem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenZfsFileSystem resources.
type openZfsFileSystemState struct {
	// Amazon Resource Name of the file system.
	Arn *string `pulumi:"arn"`
	// The number of days to retain automatic backups. Setting this to 0 disables automatic backups. You can retain automatic backups for a maximum of 90 days.
	AutomaticBackupRetentionDays *int `pulumi:"automaticBackupRetentionDays"`
	// The ID of the source backup to create the filesystem from.
	BackupId *string `pulumi:"backupId"`
	// A boolean flag indicating whether tags for the file system should be copied to backups. The default value is false.
	CopyTagsToBackups *bool `pulumi:"copyTagsToBackups"`
	// A boolean flag indicating whether tags for the file system should be copied to snapshots. The default value is false.
	CopyTagsToVolumes *bool `pulumi:"copyTagsToVolumes"`
	// A recurring daily time, in the format HH:MM. HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 05:00 specifies 5 AM daily. Requires `automaticBackupRetentionDays` to be set.
	DailyAutomaticBackupStartTime *string `pulumi:"dailyAutomaticBackupStartTime"`
	// The filesystem deployment type. Valid values: `SINGLE_AZ_1`, `SINGLE_AZ_2` and `MULTI_AZ_1`.
	DeploymentType *string `pulumi:"deploymentType"`
	// The SSD IOPS configuration for the Amazon FSx for OpenZFS file system. See Disk Iops Configuration below.
	DiskIopsConfiguration *OpenZfsFileSystemDiskIopsConfiguration `pulumi:"diskIopsConfiguration"`
	// DNS name for the file system, e.g., `fs-12345678.fsx.us-west-2.amazonaws.com`
	DnsName *string `pulumi:"dnsName"`
	// (Multi-AZ only) Specifies the IP address range in which the endpoints to access your file system will be created.
	EndpointIpAddressRange *string `pulumi:"endpointIpAddressRange"`
	// ARN for the KMS Key to encrypt the file system at rest, Defaults to an AWS managed KMS Key.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Set of Elastic Network Interface identifiers from which the file system is accessible The first network interface returned is the primary network interface.
	NetworkInterfaceIds []string `pulumi:"networkInterfaceIds"`
	// AWS account identifier that created the file system.
	OwnerId *string `pulumi:"ownerId"`
	// (Multi-AZ only) Required when `deploymentType` is set to `MULTI_AZ_1`. This specifies the subnet in which you want the preferred file server to be located.
	PreferredSubnetId *string `pulumi:"preferredSubnetId"`
	// The configuration for the root volume of the file system. All other volumes are children or the root volume. See Root Volume Configuration below.
	RootVolumeConfiguration *OpenZfsFileSystemRootVolumeConfiguration `pulumi:"rootVolumeConfiguration"`
	// Identifier of the root volume, e.g., `fsvol-12345678`
	RootVolumeId *string `pulumi:"rootVolumeId"`
	// (Multi-AZ only) Specifies the route tables in which Amazon FSx creates the rules for routing traffic to the correct file server. You should specify all virtual private cloud (VPC) route tables associated with the subnets in which your clients are located. By default, Amazon FSx selects your VPC's default route table.
	RouteTableIds []string `pulumi:"routeTableIds"`
	// A list of IDs for the security groups that apply to the specified network interfaces created for file system access. These security groups will apply to all network interfaces.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The storage capacity (GiB) of the file system. Valid values between `64` and `524288`.
	StorageCapacity *int `pulumi:"storageCapacity"`
	// The filesystem storage type. Only `SSD` is supported.
	StorageType *string `pulumi:"storageType"`
	// A list of IDs for the subnets that the file system will be accessible from.
	SubnetIds *string `pulumi:"subnetIds"`
	// A map of tags to assign to the file system. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Throughput (MB/s) of the file system. Valid values depend on `deploymentType`. Must be one of `64`, `128`, `256`, `512`, `1024`, `2048`, `3072`, `4096` for `SINGLE_AZ_1`. Must be one of `160`, `320`, `640`, `1280`, `2560`, `3840`, `5120`, `7680`, `10240` for `SINGLE_AZ_2`.
	ThroughputCapacity *int `pulumi:"throughputCapacity"`
	// Identifier of the Virtual Private Cloud for the file system.
	VpcId *string `pulumi:"vpcId"`
	// The preferred start time (in `d:HH:MM` format) to perform weekly maintenance, in the UTC time zone.
	WeeklyMaintenanceStartTime *string `pulumi:"weeklyMaintenanceStartTime"`
}

type OpenZfsFileSystemState struct {
	// Amazon Resource Name of the file system.
	Arn pulumi.StringPtrInput
	// The number of days to retain automatic backups. Setting this to 0 disables automatic backups. You can retain automatic backups for a maximum of 90 days.
	AutomaticBackupRetentionDays pulumi.IntPtrInput
	// The ID of the source backup to create the filesystem from.
	BackupId pulumi.StringPtrInput
	// A boolean flag indicating whether tags for the file system should be copied to backups. The default value is false.
	CopyTagsToBackups pulumi.BoolPtrInput
	// A boolean flag indicating whether tags for the file system should be copied to snapshots. The default value is false.
	CopyTagsToVolumes pulumi.BoolPtrInput
	// A recurring daily time, in the format HH:MM. HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 05:00 specifies 5 AM daily. Requires `automaticBackupRetentionDays` to be set.
	DailyAutomaticBackupStartTime pulumi.StringPtrInput
	// The filesystem deployment type. Valid values: `SINGLE_AZ_1`, `SINGLE_AZ_2` and `MULTI_AZ_1`.
	DeploymentType pulumi.StringPtrInput
	// The SSD IOPS configuration for the Amazon FSx for OpenZFS file system. See Disk Iops Configuration below.
	DiskIopsConfiguration OpenZfsFileSystemDiskIopsConfigurationPtrInput
	// DNS name for the file system, e.g., `fs-12345678.fsx.us-west-2.amazonaws.com`
	DnsName pulumi.StringPtrInput
	// (Multi-AZ only) Specifies the IP address range in which the endpoints to access your file system will be created.
	EndpointIpAddressRange pulumi.StringPtrInput
	// ARN for the KMS Key to encrypt the file system at rest, Defaults to an AWS managed KMS Key.
	KmsKeyId pulumi.StringPtrInput
	// Set of Elastic Network Interface identifiers from which the file system is accessible The first network interface returned is the primary network interface.
	NetworkInterfaceIds pulumi.StringArrayInput
	// AWS account identifier that created the file system.
	OwnerId pulumi.StringPtrInput
	// (Multi-AZ only) Required when `deploymentType` is set to `MULTI_AZ_1`. This specifies the subnet in which you want the preferred file server to be located.
	PreferredSubnetId pulumi.StringPtrInput
	// The configuration for the root volume of the file system. All other volumes are children or the root volume. See Root Volume Configuration below.
	RootVolumeConfiguration OpenZfsFileSystemRootVolumeConfigurationPtrInput
	// Identifier of the root volume, e.g., `fsvol-12345678`
	RootVolumeId pulumi.StringPtrInput
	// (Multi-AZ only) Specifies the route tables in which Amazon FSx creates the rules for routing traffic to the correct file server. You should specify all virtual private cloud (VPC) route tables associated with the subnets in which your clients are located. By default, Amazon FSx selects your VPC's default route table.
	RouteTableIds pulumi.StringArrayInput
	// A list of IDs for the security groups that apply to the specified network interfaces created for file system access. These security groups will apply to all network interfaces.
	SecurityGroupIds pulumi.StringArrayInput
	// The storage capacity (GiB) of the file system. Valid values between `64` and `524288`.
	StorageCapacity pulumi.IntPtrInput
	// The filesystem storage type. Only `SSD` is supported.
	StorageType pulumi.StringPtrInput
	// A list of IDs for the subnets that the file system will be accessible from.
	SubnetIds pulumi.StringPtrInput
	// A map of tags to assign to the file system. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapInput
	// Throughput (MB/s) of the file system. Valid values depend on `deploymentType`. Must be one of `64`, `128`, `256`, `512`, `1024`, `2048`, `3072`, `4096` for `SINGLE_AZ_1`. Must be one of `160`, `320`, `640`, `1280`, `2560`, `3840`, `5120`, `7680`, `10240` for `SINGLE_AZ_2`.
	ThroughputCapacity pulumi.IntPtrInput
	// Identifier of the Virtual Private Cloud for the file system.
	VpcId pulumi.StringPtrInput
	// The preferred start time (in `d:HH:MM` format) to perform weekly maintenance, in the UTC time zone.
	WeeklyMaintenanceStartTime pulumi.StringPtrInput
}

func (OpenZfsFileSystemState) ElementType() reflect.Type {
	return reflect.TypeOf((*openZfsFileSystemState)(nil)).Elem()
}

type openZfsFileSystemArgs struct {
	// The number of days to retain automatic backups. Setting this to 0 disables automatic backups. You can retain automatic backups for a maximum of 90 days.
	AutomaticBackupRetentionDays *int `pulumi:"automaticBackupRetentionDays"`
	// The ID of the source backup to create the filesystem from.
	BackupId *string `pulumi:"backupId"`
	// A boolean flag indicating whether tags for the file system should be copied to backups. The default value is false.
	CopyTagsToBackups *bool `pulumi:"copyTagsToBackups"`
	// A boolean flag indicating whether tags for the file system should be copied to snapshots. The default value is false.
	CopyTagsToVolumes *bool `pulumi:"copyTagsToVolumes"`
	// A recurring daily time, in the format HH:MM. HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 05:00 specifies 5 AM daily. Requires `automaticBackupRetentionDays` to be set.
	DailyAutomaticBackupStartTime *string `pulumi:"dailyAutomaticBackupStartTime"`
	// The filesystem deployment type. Valid values: `SINGLE_AZ_1`, `SINGLE_AZ_2` and `MULTI_AZ_1`.
	DeploymentType string `pulumi:"deploymentType"`
	// The SSD IOPS configuration for the Amazon FSx for OpenZFS file system. See Disk Iops Configuration below.
	DiskIopsConfiguration *OpenZfsFileSystemDiskIopsConfiguration `pulumi:"diskIopsConfiguration"`
	// (Multi-AZ only) Specifies the IP address range in which the endpoints to access your file system will be created.
	EndpointIpAddressRange *string `pulumi:"endpointIpAddressRange"`
	// ARN for the KMS Key to encrypt the file system at rest, Defaults to an AWS managed KMS Key.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// (Multi-AZ only) Required when `deploymentType` is set to `MULTI_AZ_1`. This specifies the subnet in which you want the preferred file server to be located.
	PreferredSubnetId *string `pulumi:"preferredSubnetId"`
	// The configuration for the root volume of the file system. All other volumes are children or the root volume. See Root Volume Configuration below.
	RootVolumeConfiguration *OpenZfsFileSystemRootVolumeConfiguration `pulumi:"rootVolumeConfiguration"`
	// (Multi-AZ only) Specifies the route tables in which Amazon FSx creates the rules for routing traffic to the correct file server. You should specify all virtual private cloud (VPC) route tables associated with the subnets in which your clients are located. By default, Amazon FSx selects your VPC's default route table.
	RouteTableIds []string `pulumi:"routeTableIds"`
	// A list of IDs for the security groups that apply to the specified network interfaces created for file system access. These security groups will apply to all network interfaces.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The storage capacity (GiB) of the file system. Valid values between `64` and `524288`.
	StorageCapacity *int `pulumi:"storageCapacity"`
	// The filesystem storage type. Only `SSD` is supported.
	StorageType *string `pulumi:"storageType"`
	// A list of IDs for the subnets that the file system will be accessible from.
	SubnetIds string `pulumi:"subnetIds"`
	// A map of tags to assign to the file system. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Throughput (MB/s) of the file system. Valid values depend on `deploymentType`. Must be one of `64`, `128`, `256`, `512`, `1024`, `2048`, `3072`, `4096` for `SINGLE_AZ_1`. Must be one of `160`, `320`, `640`, `1280`, `2560`, `3840`, `5120`, `7680`, `10240` for `SINGLE_AZ_2`.
	ThroughputCapacity int `pulumi:"throughputCapacity"`
	// The preferred start time (in `d:HH:MM` format) to perform weekly maintenance, in the UTC time zone.
	WeeklyMaintenanceStartTime *string `pulumi:"weeklyMaintenanceStartTime"`
}

// The set of arguments for constructing a OpenZfsFileSystem resource.
type OpenZfsFileSystemArgs struct {
	// The number of days to retain automatic backups. Setting this to 0 disables automatic backups. You can retain automatic backups for a maximum of 90 days.
	AutomaticBackupRetentionDays pulumi.IntPtrInput
	// The ID of the source backup to create the filesystem from.
	BackupId pulumi.StringPtrInput
	// A boolean flag indicating whether tags for the file system should be copied to backups. The default value is false.
	CopyTagsToBackups pulumi.BoolPtrInput
	// A boolean flag indicating whether tags for the file system should be copied to snapshots. The default value is false.
	CopyTagsToVolumes pulumi.BoolPtrInput
	// A recurring daily time, in the format HH:MM. HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 05:00 specifies 5 AM daily. Requires `automaticBackupRetentionDays` to be set.
	DailyAutomaticBackupStartTime pulumi.StringPtrInput
	// The filesystem deployment type. Valid values: `SINGLE_AZ_1`, `SINGLE_AZ_2` and `MULTI_AZ_1`.
	DeploymentType pulumi.StringInput
	// The SSD IOPS configuration for the Amazon FSx for OpenZFS file system. See Disk Iops Configuration below.
	DiskIopsConfiguration OpenZfsFileSystemDiskIopsConfigurationPtrInput
	// (Multi-AZ only) Specifies the IP address range in which the endpoints to access your file system will be created.
	EndpointIpAddressRange pulumi.StringPtrInput
	// ARN for the KMS Key to encrypt the file system at rest, Defaults to an AWS managed KMS Key.
	KmsKeyId pulumi.StringPtrInput
	// (Multi-AZ only) Required when `deploymentType` is set to `MULTI_AZ_1`. This specifies the subnet in which you want the preferred file server to be located.
	PreferredSubnetId pulumi.StringPtrInput
	// The configuration for the root volume of the file system. All other volumes are children or the root volume. See Root Volume Configuration below.
	RootVolumeConfiguration OpenZfsFileSystemRootVolumeConfigurationPtrInput
	// (Multi-AZ only) Specifies the route tables in which Amazon FSx creates the rules for routing traffic to the correct file server. You should specify all virtual private cloud (VPC) route tables associated with the subnets in which your clients are located. By default, Amazon FSx selects your VPC's default route table.
	RouteTableIds pulumi.StringArrayInput
	// A list of IDs for the security groups that apply to the specified network interfaces created for file system access. These security groups will apply to all network interfaces.
	SecurityGroupIds pulumi.StringArrayInput
	// The storage capacity (GiB) of the file system. Valid values between `64` and `524288`.
	StorageCapacity pulumi.IntPtrInput
	// The filesystem storage type. Only `SSD` is supported.
	StorageType pulumi.StringPtrInput
	// A list of IDs for the subnets that the file system will be accessible from.
	SubnetIds pulumi.StringInput
	// A map of tags to assign to the file system. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Throughput (MB/s) of the file system. Valid values depend on `deploymentType`. Must be one of `64`, `128`, `256`, `512`, `1024`, `2048`, `3072`, `4096` for `SINGLE_AZ_1`. Must be one of `160`, `320`, `640`, `1280`, `2560`, `3840`, `5120`, `7680`, `10240` for `SINGLE_AZ_2`.
	ThroughputCapacity pulumi.IntInput
	// The preferred start time (in `d:HH:MM` format) to perform weekly maintenance, in the UTC time zone.
	WeeklyMaintenanceStartTime pulumi.StringPtrInput
}

func (OpenZfsFileSystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openZfsFileSystemArgs)(nil)).Elem()
}

type OpenZfsFileSystemInput interface {
	pulumi.Input

	ToOpenZfsFileSystemOutput() OpenZfsFileSystemOutput
	ToOpenZfsFileSystemOutputWithContext(ctx context.Context) OpenZfsFileSystemOutput
}

func (*OpenZfsFileSystem) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenZfsFileSystem)(nil)).Elem()
}

func (i *OpenZfsFileSystem) ToOpenZfsFileSystemOutput() OpenZfsFileSystemOutput {
	return i.ToOpenZfsFileSystemOutputWithContext(context.Background())
}

func (i *OpenZfsFileSystem) ToOpenZfsFileSystemOutputWithContext(ctx context.Context) OpenZfsFileSystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenZfsFileSystemOutput)
}

func (i *OpenZfsFileSystem) ToOutput(ctx context.Context) pulumix.Output[*OpenZfsFileSystem] {
	return pulumix.Output[*OpenZfsFileSystem]{
		OutputState: i.ToOpenZfsFileSystemOutputWithContext(ctx).OutputState,
	}
}

// OpenZfsFileSystemArrayInput is an input type that accepts OpenZfsFileSystemArray and OpenZfsFileSystemArrayOutput values.
// You can construct a concrete instance of `OpenZfsFileSystemArrayInput` via:
//
//	OpenZfsFileSystemArray{ OpenZfsFileSystemArgs{...} }
type OpenZfsFileSystemArrayInput interface {
	pulumi.Input

	ToOpenZfsFileSystemArrayOutput() OpenZfsFileSystemArrayOutput
	ToOpenZfsFileSystemArrayOutputWithContext(context.Context) OpenZfsFileSystemArrayOutput
}

type OpenZfsFileSystemArray []OpenZfsFileSystemInput

func (OpenZfsFileSystemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenZfsFileSystem)(nil)).Elem()
}

func (i OpenZfsFileSystemArray) ToOpenZfsFileSystemArrayOutput() OpenZfsFileSystemArrayOutput {
	return i.ToOpenZfsFileSystemArrayOutputWithContext(context.Background())
}

func (i OpenZfsFileSystemArray) ToOpenZfsFileSystemArrayOutputWithContext(ctx context.Context) OpenZfsFileSystemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenZfsFileSystemArrayOutput)
}

func (i OpenZfsFileSystemArray) ToOutput(ctx context.Context) pulumix.Output[[]*OpenZfsFileSystem] {
	return pulumix.Output[[]*OpenZfsFileSystem]{
		OutputState: i.ToOpenZfsFileSystemArrayOutputWithContext(ctx).OutputState,
	}
}

// OpenZfsFileSystemMapInput is an input type that accepts OpenZfsFileSystemMap and OpenZfsFileSystemMapOutput values.
// You can construct a concrete instance of `OpenZfsFileSystemMapInput` via:
//
//	OpenZfsFileSystemMap{ "key": OpenZfsFileSystemArgs{...} }
type OpenZfsFileSystemMapInput interface {
	pulumi.Input

	ToOpenZfsFileSystemMapOutput() OpenZfsFileSystemMapOutput
	ToOpenZfsFileSystemMapOutputWithContext(context.Context) OpenZfsFileSystemMapOutput
}

type OpenZfsFileSystemMap map[string]OpenZfsFileSystemInput

func (OpenZfsFileSystemMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenZfsFileSystem)(nil)).Elem()
}

func (i OpenZfsFileSystemMap) ToOpenZfsFileSystemMapOutput() OpenZfsFileSystemMapOutput {
	return i.ToOpenZfsFileSystemMapOutputWithContext(context.Background())
}

func (i OpenZfsFileSystemMap) ToOpenZfsFileSystemMapOutputWithContext(ctx context.Context) OpenZfsFileSystemMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenZfsFileSystemMapOutput)
}

func (i OpenZfsFileSystemMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*OpenZfsFileSystem] {
	return pulumix.Output[map[string]*OpenZfsFileSystem]{
		OutputState: i.ToOpenZfsFileSystemMapOutputWithContext(ctx).OutputState,
	}
}

type OpenZfsFileSystemOutput struct{ *pulumi.OutputState }

func (OpenZfsFileSystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenZfsFileSystem)(nil)).Elem()
}

func (o OpenZfsFileSystemOutput) ToOpenZfsFileSystemOutput() OpenZfsFileSystemOutput {
	return o
}

func (o OpenZfsFileSystemOutput) ToOpenZfsFileSystemOutputWithContext(ctx context.Context) OpenZfsFileSystemOutput {
	return o
}

func (o OpenZfsFileSystemOutput) ToOutput(ctx context.Context) pulumix.Output[*OpenZfsFileSystem] {
	return pulumix.Output[*OpenZfsFileSystem]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name of the file system.
func (o OpenZfsFileSystemOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenZfsFileSystem) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The number of days to retain automatic backups. Setting this to 0 disables automatic backups. You can retain automatic backups for a maximum of 90 days.
func (o OpenZfsFileSystemOutput) AutomaticBackupRetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OpenZfsFileSystem) pulumi.IntPtrOutput { return v.AutomaticBackupRetentionDays }).(pulumi.IntPtrOutput)
}

// The ID of the source backup to create the filesystem from.
func (o OpenZfsFileSystemOutput) BackupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenZfsFileSystem) pulumi.StringPtrOutput { return v.BackupId }).(pulumi.StringPtrOutput)
}

// A boolean flag indicating whether tags for the file system should be copied to backups. The default value is false.
func (o OpenZfsFileSystemOutput) CopyTagsToBackups() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OpenZfsFileSystem) pulumi.BoolPtrOutput { return v.CopyTagsToBackups }).(pulumi.BoolPtrOutput)
}

// A boolean flag indicating whether tags for the file system should be copied to snapshots. The default value is false.
func (o OpenZfsFileSystemOutput) CopyTagsToVolumes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OpenZfsFileSystem) pulumi.BoolPtrOutput { return v.CopyTagsToVolumes }).(pulumi.BoolPtrOutput)
}

// A recurring daily time, in the format HH:MM. HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 05:00 specifies 5 AM daily. Requires `automaticBackupRetentionDays` to be set.
func (o OpenZfsFileSystemOutput) DailyAutomaticBackupStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenZfsFileSystem) pulumi.StringOutput { return v.DailyAutomaticBackupStartTime }).(pulumi.StringOutput)
}

// The filesystem deployment type. Valid values: `SINGLE_AZ_1`, `SINGLE_AZ_2` and `MULTI_AZ_1`.
func (o OpenZfsFileSystemOutput) DeploymentType() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenZfsFileSystem) pulumi.StringOutput { return v.DeploymentType }).(pulumi.StringOutput)
}

// The SSD IOPS configuration for the Amazon FSx for OpenZFS file system. See Disk Iops Configuration below.
func (o OpenZfsFileSystemOutput) DiskIopsConfiguration() OpenZfsFileSystemDiskIopsConfigurationOutput {
	return o.ApplyT(func(v *OpenZfsFileSystem) OpenZfsFileSystemDiskIopsConfigurationOutput {
		return v.DiskIopsConfiguration
	}).(OpenZfsFileSystemDiskIopsConfigurationOutput)
}

// DNS name for the file system, e.g., `fs-12345678.fsx.us-west-2.amazonaws.com`
func (o OpenZfsFileSystemOutput) DnsName() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenZfsFileSystem) pulumi.StringOutput { return v.DnsName }).(pulumi.StringOutput)
}

// (Multi-AZ only) Specifies the IP address range in which the endpoints to access your file system will be created.
func (o OpenZfsFileSystemOutput) EndpointIpAddressRange() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenZfsFileSystem) pulumi.StringOutput { return v.EndpointIpAddressRange }).(pulumi.StringOutput)
}

// ARN for the KMS Key to encrypt the file system at rest, Defaults to an AWS managed KMS Key.
func (o OpenZfsFileSystemOutput) KmsKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenZfsFileSystem) pulumi.StringOutput { return v.KmsKeyId }).(pulumi.StringOutput)
}

// Set of Elastic Network Interface identifiers from which the file system is accessible The first network interface returned is the primary network interface.
func (o OpenZfsFileSystemOutput) NetworkInterfaceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OpenZfsFileSystem) pulumi.StringArrayOutput { return v.NetworkInterfaceIds }).(pulumi.StringArrayOutput)
}

// AWS account identifier that created the file system.
func (o OpenZfsFileSystemOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenZfsFileSystem) pulumi.StringOutput { return v.OwnerId }).(pulumi.StringOutput)
}

// (Multi-AZ only) Required when `deploymentType` is set to `MULTI_AZ_1`. This specifies the subnet in which you want the preferred file server to be located.
func (o OpenZfsFileSystemOutput) PreferredSubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenZfsFileSystem) pulumi.StringPtrOutput { return v.PreferredSubnetId }).(pulumi.StringPtrOutput)
}

// The configuration for the root volume of the file system. All other volumes are children or the root volume. See Root Volume Configuration below.
func (o OpenZfsFileSystemOutput) RootVolumeConfiguration() OpenZfsFileSystemRootVolumeConfigurationOutput {
	return o.ApplyT(func(v *OpenZfsFileSystem) OpenZfsFileSystemRootVolumeConfigurationOutput {
		return v.RootVolumeConfiguration
	}).(OpenZfsFileSystemRootVolumeConfigurationOutput)
}

// Identifier of the root volume, e.g., `fsvol-12345678`
func (o OpenZfsFileSystemOutput) RootVolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenZfsFileSystem) pulumi.StringOutput { return v.RootVolumeId }).(pulumi.StringOutput)
}

// (Multi-AZ only) Specifies the route tables in which Amazon FSx creates the rules for routing traffic to the correct file server. You should specify all virtual private cloud (VPC) route tables associated with the subnets in which your clients are located. By default, Amazon FSx selects your VPC's default route table.
func (o OpenZfsFileSystemOutput) RouteTableIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OpenZfsFileSystem) pulumi.StringArrayOutput { return v.RouteTableIds }).(pulumi.StringArrayOutput)
}

// A list of IDs for the security groups that apply to the specified network interfaces created for file system access. These security groups will apply to all network interfaces.
func (o OpenZfsFileSystemOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OpenZfsFileSystem) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// The storage capacity (GiB) of the file system. Valid values between `64` and `524288`.
func (o OpenZfsFileSystemOutput) StorageCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OpenZfsFileSystem) pulumi.IntPtrOutput { return v.StorageCapacity }).(pulumi.IntPtrOutput)
}

// The filesystem storage type. Only `SSD` is supported.
func (o OpenZfsFileSystemOutput) StorageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenZfsFileSystem) pulumi.StringPtrOutput { return v.StorageType }).(pulumi.StringPtrOutput)
}

// A list of IDs for the subnets that the file system will be accessible from.
func (o OpenZfsFileSystemOutput) SubnetIds() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenZfsFileSystem) pulumi.StringOutput { return v.SubnetIds }).(pulumi.StringOutput)
}

// A map of tags to assign to the file system. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o OpenZfsFileSystemOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *OpenZfsFileSystem) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o OpenZfsFileSystemOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *OpenZfsFileSystem) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// Throughput (MB/s) of the file system. Valid values depend on `deploymentType`. Must be one of `64`, `128`, `256`, `512`, `1024`, `2048`, `3072`, `4096` for `SINGLE_AZ_1`. Must be one of `160`, `320`, `640`, `1280`, `2560`, `3840`, `5120`, `7680`, `10240` for `SINGLE_AZ_2`.
func (o OpenZfsFileSystemOutput) ThroughputCapacity() pulumi.IntOutput {
	return o.ApplyT(func(v *OpenZfsFileSystem) pulumi.IntOutput { return v.ThroughputCapacity }).(pulumi.IntOutput)
}

// Identifier of the Virtual Private Cloud for the file system.
func (o OpenZfsFileSystemOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenZfsFileSystem) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// The preferred start time (in `d:HH:MM` format) to perform weekly maintenance, in the UTC time zone.
func (o OpenZfsFileSystemOutput) WeeklyMaintenanceStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenZfsFileSystem) pulumi.StringOutput { return v.WeeklyMaintenanceStartTime }).(pulumi.StringOutput)
}

type OpenZfsFileSystemArrayOutput struct{ *pulumi.OutputState }

func (OpenZfsFileSystemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenZfsFileSystem)(nil)).Elem()
}

func (o OpenZfsFileSystemArrayOutput) ToOpenZfsFileSystemArrayOutput() OpenZfsFileSystemArrayOutput {
	return o
}

func (o OpenZfsFileSystemArrayOutput) ToOpenZfsFileSystemArrayOutputWithContext(ctx context.Context) OpenZfsFileSystemArrayOutput {
	return o
}

func (o OpenZfsFileSystemArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*OpenZfsFileSystem] {
	return pulumix.Output[[]*OpenZfsFileSystem]{
		OutputState: o.OutputState,
	}
}

func (o OpenZfsFileSystemArrayOutput) Index(i pulumi.IntInput) OpenZfsFileSystemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenZfsFileSystem {
		return vs[0].([]*OpenZfsFileSystem)[vs[1].(int)]
	}).(OpenZfsFileSystemOutput)
}

type OpenZfsFileSystemMapOutput struct{ *pulumi.OutputState }

func (OpenZfsFileSystemMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenZfsFileSystem)(nil)).Elem()
}

func (o OpenZfsFileSystemMapOutput) ToOpenZfsFileSystemMapOutput() OpenZfsFileSystemMapOutput {
	return o
}

func (o OpenZfsFileSystemMapOutput) ToOpenZfsFileSystemMapOutputWithContext(ctx context.Context) OpenZfsFileSystemMapOutput {
	return o
}

func (o OpenZfsFileSystemMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*OpenZfsFileSystem] {
	return pulumix.Output[map[string]*OpenZfsFileSystem]{
		OutputState: o.OutputState,
	}
}

func (o OpenZfsFileSystemMapOutput) MapIndex(k pulumi.StringInput) OpenZfsFileSystemOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenZfsFileSystem {
		return vs[0].(map[string]*OpenZfsFileSystem)[vs[1].(string)]
	}).(OpenZfsFileSystemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenZfsFileSystemInput)(nil)).Elem(), &OpenZfsFileSystem{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenZfsFileSystemArrayInput)(nil)).Elem(), OpenZfsFileSystemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenZfsFileSystemMapInput)(nil)).Elem(), OpenZfsFileSystemMap{})
	pulumi.RegisterOutputType(OpenZfsFileSystemOutput{})
	pulumi.RegisterOutputType(OpenZfsFileSystemArrayOutput{})
	pulumi.RegisterOutputType(OpenZfsFileSystemMapOutput{})
}
