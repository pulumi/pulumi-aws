// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fsx

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type OntapVolume struct {
	pulumi.CustomResourceState

	Arn                      pulumi.StringOutput               `pulumi:"arn"`
	FileSystemId             pulumi.StringOutput               `pulumi:"fileSystemId"`
	FlexcacheEndpointType    pulumi.StringOutput               `pulumi:"flexcacheEndpointType"`
	JunctionPath             pulumi.StringOutput               `pulumi:"junctionPath"`
	Name                     pulumi.StringOutput               `pulumi:"name"`
	OntapVolumeType          pulumi.StringOutput               `pulumi:"ontapVolumeType"`
	SecurityStyle            pulumi.StringPtrOutput            `pulumi:"securityStyle"`
	SizeInMegabytes          pulumi.IntOutput                  `pulumi:"sizeInMegabytes"`
	StorageEfficiencyEnabled pulumi.BoolOutput                 `pulumi:"storageEfficiencyEnabled"`
	StorageVirtualMachineId  pulumi.StringOutput               `pulumi:"storageVirtualMachineId"`
	Tags                     pulumi.StringMapOutput            `pulumi:"tags"`
	TagsAll                  pulumi.StringMapOutput            `pulumi:"tagsAll"`
	TieringPolicy            OntapVolumeTieringPolicyPtrOutput `pulumi:"tieringPolicy"`
	Uuid                     pulumi.StringOutput               `pulumi:"uuid"`
	VolumeType               pulumi.StringPtrOutput            `pulumi:"volumeType"`
}

// NewOntapVolume registers a new resource with the given unique name, arguments, and options.
func NewOntapVolume(ctx *pulumi.Context,
	name string, args *OntapVolumeArgs, opts ...pulumi.ResourceOption) (*OntapVolume, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.JunctionPath == nil {
		return nil, errors.New("invalid value for required argument 'JunctionPath'")
	}
	if args.SizeInMegabytes == nil {
		return nil, errors.New("invalid value for required argument 'SizeInMegabytes'")
	}
	if args.StorageEfficiencyEnabled == nil {
		return nil, errors.New("invalid value for required argument 'StorageEfficiencyEnabled'")
	}
	if args.StorageVirtualMachineId == nil {
		return nil, errors.New("invalid value for required argument 'StorageVirtualMachineId'")
	}
	var resource OntapVolume
	err := ctx.RegisterResource("aws:fsx/ontapVolume:OntapVolume", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOntapVolume gets an existing OntapVolume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOntapVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OntapVolumeState, opts ...pulumi.ResourceOption) (*OntapVolume, error) {
	var resource OntapVolume
	err := ctx.ReadResource("aws:fsx/ontapVolume:OntapVolume", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OntapVolume resources.
type ontapVolumeState struct {
	Arn                      *string                   `pulumi:"arn"`
	FileSystemId             *string                   `pulumi:"fileSystemId"`
	FlexcacheEndpointType    *string                   `pulumi:"flexcacheEndpointType"`
	JunctionPath             *string                   `pulumi:"junctionPath"`
	Name                     *string                   `pulumi:"name"`
	OntapVolumeType          *string                   `pulumi:"ontapVolumeType"`
	SecurityStyle            *string                   `pulumi:"securityStyle"`
	SizeInMegabytes          *int                      `pulumi:"sizeInMegabytes"`
	StorageEfficiencyEnabled *bool                     `pulumi:"storageEfficiencyEnabled"`
	StorageVirtualMachineId  *string                   `pulumi:"storageVirtualMachineId"`
	Tags                     map[string]string         `pulumi:"tags"`
	TagsAll                  map[string]string         `pulumi:"tagsAll"`
	TieringPolicy            *OntapVolumeTieringPolicy `pulumi:"tieringPolicy"`
	Uuid                     *string                   `pulumi:"uuid"`
	VolumeType               *string                   `pulumi:"volumeType"`
}

type OntapVolumeState struct {
	Arn                      pulumi.StringPtrInput
	FileSystemId             pulumi.StringPtrInput
	FlexcacheEndpointType    pulumi.StringPtrInput
	JunctionPath             pulumi.StringPtrInput
	Name                     pulumi.StringPtrInput
	OntapVolumeType          pulumi.StringPtrInput
	SecurityStyle            pulumi.StringPtrInput
	SizeInMegabytes          pulumi.IntPtrInput
	StorageEfficiencyEnabled pulumi.BoolPtrInput
	StorageVirtualMachineId  pulumi.StringPtrInput
	Tags                     pulumi.StringMapInput
	TagsAll                  pulumi.StringMapInput
	TieringPolicy            OntapVolumeTieringPolicyPtrInput
	Uuid                     pulumi.StringPtrInput
	VolumeType               pulumi.StringPtrInput
}

func (OntapVolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*ontapVolumeState)(nil)).Elem()
}

type ontapVolumeArgs struct {
	JunctionPath             string                    `pulumi:"junctionPath"`
	Name                     *string                   `pulumi:"name"`
	SecurityStyle            *string                   `pulumi:"securityStyle"`
	SizeInMegabytes          int                       `pulumi:"sizeInMegabytes"`
	StorageEfficiencyEnabled bool                      `pulumi:"storageEfficiencyEnabled"`
	StorageVirtualMachineId  string                    `pulumi:"storageVirtualMachineId"`
	Tags                     map[string]string         `pulumi:"tags"`
	TieringPolicy            *OntapVolumeTieringPolicy `pulumi:"tieringPolicy"`
	VolumeType               *string                   `pulumi:"volumeType"`
}

// The set of arguments for constructing a OntapVolume resource.
type OntapVolumeArgs struct {
	JunctionPath             pulumi.StringInput
	Name                     pulumi.StringPtrInput
	SecurityStyle            pulumi.StringPtrInput
	SizeInMegabytes          pulumi.IntInput
	StorageEfficiencyEnabled pulumi.BoolInput
	StorageVirtualMachineId  pulumi.StringInput
	Tags                     pulumi.StringMapInput
	TieringPolicy            OntapVolumeTieringPolicyPtrInput
	VolumeType               pulumi.StringPtrInput
}

func (OntapVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ontapVolumeArgs)(nil)).Elem()
}

type OntapVolumeInput interface {
	pulumi.Input

	ToOntapVolumeOutput() OntapVolumeOutput
	ToOntapVolumeOutputWithContext(ctx context.Context) OntapVolumeOutput
}

func (*OntapVolume) ElementType() reflect.Type {
	return reflect.TypeOf((**OntapVolume)(nil)).Elem()
}

func (i *OntapVolume) ToOntapVolumeOutput() OntapVolumeOutput {
	return i.ToOntapVolumeOutputWithContext(context.Background())
}

func (i *OntapVolume) ToOntapVolumeOutputWithContext(ctx context.Context) OntapVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OntapVolumeOutput)
}

// OntapVolumeArrayInput is an input type that accepts OntapVolumeArray and OntapVolumeArrayOutput values.
// You can construct a concrete instance of `OntapVolumeArrayInput` via:
//
//	OntapVolumeArray{ OntapVolumeArgs{...} }
type OntapVolumeArrayInput interface {
	pulumi.Input

	ToOntapVolumeArrayOutput() OntapVolumeArrayOutput
	ToOntapVolumeArrayOutputWithContext(context.Context) OntapVolumeArrayOutput
}

type OntapVolumeArray []OntapVolumeInput

func (OntapVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OntapVolume)(nil)).Elem()
}

func (i OntapVolumeArray) ToOntapVolumeArrayOutput() OntapVolumeArrayOutput {
	return i.ToOntapVolumeArrayOutputWithContext(context.Background())
}

func (i OntapVolumeArray) ToOntapVolumeArrayOutputWithContext(ctx context.Context) OntapVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OntapVolumeArrayOutput)
}

// OntapVolumeMapInput is an input type that accepts OntapVolumeMap and OntapVolumeMapOutput values.
// You can construct a concrete instance of `OntapVolumeMapInput` via:
//
//	OntapVolumeMap{ "key": OntapVolumeArgs{...} }
type OntapVolumeMapInput interface {
	pulumi.Input

	ToOntapVolumeMapOutput() OntapVolumeMapOutput
	ToOntapVolumeMapOutputWithContext(context.Context) OntapVolumeMapOutput
}

type OntapVolumeMap map[string]OntapVolumeInput

func (OntapVolumeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OntapVolume)(nil)).Elem()
}

func (i OntapVolumeMap) ToOntapVolumeMapOutput() OntapVolumeMapOutput {
	return i.ToOntapVolumeMapOutputWithContext(context.Background())
}

func (i OntapVolumeMap) ToOntapVolumeMapOutputWithContext(ctx context.Context) OntapVolumeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OntapVolumeMapOutput)
}

type OntapVolumeOutput struct{ *pulumi.OutputState }

func (OntapVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OntapVolume)(nil)).Elem()
}

func (o OntapVolumeOutput) ToOntapVolumeOutput() OntapVolumeOutput {
	return o
}

func (o OntapVolumeOutput) ToOntapVolumeOutputWithContext(ctx context.Context) OntapVolumeOutput {
	return o
}

func (o OntapVolumeOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *OntapVolume) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o OntapVolumeOutput) FileSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v *OntapVolume) pulumi.StringOutput { return v.FileSystemId }).(pulumi.StringOutput)
}

func (o OntapVolumeOutput) FlexcacheEndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v *OntapVolume) pulumi.StringOutput { return v.FlexcacheEndpointType }).(pulumi.StringOutput)
}

func (o OntapVolumeOutput) JunctionPath() pulumi.StringOutput {
	return o.ApplyT(func(v *OntapVolume) pulumi.StringOutput { return v.JunctionPath }).(pulumi.StringOutput)
}

func (o OntapVolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OntapVolume) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o OntapVolumeOutput) OntapVolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v *OntapVolume) pulumi.StringOutput { return v.OntapVolumeType }).(pulumi.StringOutput)
}

func (o OntapVolumeOutput) SecurityStyle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OntapVolume) pulumi.StringPtrOutput { return v.SecurityStyle }).(pulumi.StringPtrOutput)
}

func (o OntapVolumeOutput) SizeInMegabytes() pulumi.IntOutput {
	return o.ApplyT(func(v *OntapVolume) pulumi.IntOutput { return v.SizeInMegabytes }).(pulumi.IntOutput)
}

func (o OntapVolumeOutput) StorageEfficiencyEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *OntapVolume) pulumi.BoolOutput { return v.StorageEfficiencyEnabled }).(pulumi.BoolOutput)
}

func (o OntapVolumeOutput) StorageVirtualMachineId() pulumi.StringOutput {
	return o.ApplyT(func(v *OntapVolume) pulumi.StringOutput { return v.StorageVirtualMachineId }).(pulumi.StringOutput)
}

func (o OntapVolumeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *OntapVolume) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o OntapVolumeOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *OntapVolume) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o OntapVolumeOutput) TieringPolicy() OntapVolumeTieringPolicyPtrOutput {
	return o.ApplyT(func(v *OntapVolume) OntapVolumeTieringPolicyPtrOutput { return v.TieringPolicy }).(OntapVolumeTieringPolicyPtrOutput)
}

func (o OntapVolumeOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *OntapVolume) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

func (o OntapVolumeOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OntapVolume) pulumi.StringPtrOutput { return v.VolumeType }).(pulumi.StringPtrOutput)
}

type OntapVolumeArrayOutput struct{ *pulumi.OutputState }

func (OntapVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OntapVolume)(nil)).Elem()
}

func (o OntapVolumeArrayOutput) ToOntapVolumeArrayOutput() OntapVolumeArrayOutput {
	return o
}

func (o OntapVolumeArrayOutput) ToOntapVolumeArrayOutputWithContext(ctx context.Context) OntapVolumeArrayOutput {
	return o
}

func (o OntapVolumeArrayOutput) Index(i pulumi.IntInput) OntapVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OntapVolume {
		return vs[0].([]*OntapVolume)[vs[1].(int)]
	}).(OntapVolumeOutput)
}

type OntapVolumeMapOutput struct{ *pulumi.OutputState }

func (OntapVolumeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OntapVolume)(nil)).Elem()
}

func (o OntapVolumeMapOutput) ToOntapVolumeMapOutput() OntapVolumeMapOutput {
	return o
}

func (o OntapVolumeMapOutput) ToOntapVolumeMapOutputWithContext(ctx context.Context) OntapVolumeMapOutput {
	return o
}

func (o OntapVolumeMapOutput) MapIndex(k pulumi.StringInput) OntapVolumeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OntapVolume {
		return vs[0].(map[string]*OntapVolume)[vs[1].(string)]
	}).(OntapVolumeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OntapVolumeInput)(nil)).Elem(), &OntapVolume{})
	pulumi.RegisterInputType(reflect.TypeOf((*OntapVolumeArrayInput)(nil)).Elem(), OntapVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OntapVolumeMapInput)(nil)).Elem(), OntapVolumeMap{})
	pulumi.RegisterOutputType(OntapVolumeOutput{})
	pulumi.RegisterOutputType(OntapVolumeArrayOutput{})
	pulumi.RegisterOutputType(OntapVolumeMapOutput{})
}
