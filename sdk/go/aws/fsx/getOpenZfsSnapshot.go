// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fsx

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information about an Amazon FSx for OpenZFS Snapshot for use when provisioning new Volumes.
//
// ## Example Usage
// ### Root volume Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/fsx"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err = fsx.LookupOpenZfsSnapshot(ctx, &fsx.LookupOpenZfsSnapshotArgs{
//				Filters: []fsx.GetOpenZfsSnapshotFilter{
//					fsx.GetOpenZfsSnapshotFilter{
//						Name: "volume-id",
//						Values: []string{
//							"fsvol-073a32b6098a73feb",
//						},
//					},
//				},
//				MostRecent: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupOpenZfsSnapshot(ctx *pulumi.Context, args *LookupOpenZfsSnapshotArgs, opts ...pulumi.InvokeOption) (*LookupOpenZfsSnapshotResult, error) {
	var rv LookupOpenZfsSnapshotResult
	err := ctx.Invoke("aws:fsx/getOpenZfsSnapshot:getOpenZfsSnapshot", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getOpenZfsSnapshot.
type LookupOpenZfsSnapshotArgs struct {
	// One or more name/value pairs to filter off of. The
	// supported names are file-system-id or volume-id.
	Filters []GetOpenZfsSnapshotFilter `pulumi:"filters"`
	// If more than one result is returned, use the most recent snapshot.
	MostRecent *bool `pulumi:"mostRecent"`
	// Name of the snapshot.
	Name *string `pulumi:"name"`
	// Returns information on a specific snapshot_id.
	SnapshotIds []string `pulumi:"snapshotIds"`
	// List of Tag values, with a maximum of 50 elements.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getOpenZfsSnapshot.
type LookupOpenZfsSnapshotResult struct {
	// Amazon Resource Name of the snapshot.
	Arn string `pulumi:"arn"`
	// Time that the resource was created.
	CreationTime string                     `pulumi:"creationTime"`
	Filters      []GetOpenZfsSnapshotFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	MostRecent *bool  `pulumi:"mostRecent"`
	// Name of the snapshot.
	Name *string `pulumi:"name"`
	// ID of the snapshot.
	SnapshotId  string   `pulumi:"snapshotId"`
	SnapshotIds []string `pulumi:"snapshotIds"`
	// List of Tag values, with a maximum of 50 elements.
	Tags map[string]string `pulumi:"tags"`
	// ID of the volume that the snapshot is of.
	VolumeId string `pulumi:"volumeId"`
}

func LookupOpenZfsSnapshotOutput(ctx *pulumi.Context, args LookupOpenZfsSnapshotOutputArgs, opts ...pulumi.InvokeOption) LookupOpenZfsSnapshotResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupOpenZfsSnapshotResult, error) {
			args := v.(LookupOpenZfsSnapshotArgs)
			r, err := LookupOpenZfsSnapshot(ctx, &args, opts...)
			var s LookupOpenZfsSnapshotResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupOpenZfsSnapshotResultOutput)
}

// A collection of arguments for invoking getOpenZfsSnapshot.
type LookupOpenZfsSnapshotOutputArgs struct {
	// One or more name/value pairs to filter off of. The
	// supported names are file-system-id or volume-id.
	Filters GetOpenZfsSnapshotFilterArrayInput `pulumi:"filters"`
	// If more than one result is returned, use the most recent snapshot.
	MostRecent pulumi.BoolPtrInput `pulumi:"mostRecent"`
	// Name of the snapshot.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Returns information on a specific snapshot_id.
	SnapshotIds pulumi.StringArrayInput `pulumi:"snapshotIds"`
	// List of Tag values, with a maximum of 50 elements.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (LookupOpenZfsSnapshotOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOpenZfsSnapshotArgs)(nil)).Elem()
}

// A collection of values returned by getOpenZfsSnapshot.
type LookupOpenZfsSnapshotResultOutput struct{ *pulumi.OutputState }

func (LookupOpenZfsSnapshotResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOpenZfsSnapshotResult)(nil)).Elem()
}

func (o LookupOpenZfsSnapshotResultOutput) ToLookupOpenZfsSnapshotResultOutput() LookupOpenZfsSnapshotResultOutput {
	return o
}

func (o LookupOpenZfsSnapshotResultOutput) ToLookupOpenZfsSnapshotResultOutputWithContext(ctx context.Context) LookupOpenZfsSnapshotResultOutput {
	return o
}

// Amazon Resource Name of the snapshot.
func (o LookupOpenZfsSnapshotResultOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpenZfsSnapshotResult) string { return v.Arn }).(pulumi.StringOutput)
}

// Time that the resource was created.
func (o LookupOpenZfsSnapshotResultOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpenZfsSnapshotResult) string { return v.CreationTime }).(pulumi.StringOutput)
}

func (o LookupOpenZfsSnapshotResultOutput) Filters() GetOpenZfsSnapshotFilterArrayOutput {
	return o.ApplyT(func(v LookupOpenZfsSnapshotResult) []GetOpenZfsSnapshotFilter { return v.Filters }).(GetOpenZfsSnapshotFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupOpenZfsSnapshotResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpenZfsSnapshotResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupOpenZfsSnapshotResultOutput) MostRecent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupOpenZfsSnapshotResult) *bool { return v.MostRecent }).(pulumi.BoolPtrOutput)
}

// Name of the snapshot.
func (o LookupOpenZfsSnapshotResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupOpenZfsSnapshotResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// ID of the snapshot.
func (o LookupOpenZfsSnapshotResultOutput) SnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpenZfsSnapshotResult) string { return v.SnapshotId }).(pulumi.StringOutput)
}

func (o LookupOpenZfsSnapshotResultOutput) SnapshotIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupOpenZfsSnapshotResult) []string { return v.SnapshotIds }).(pulumi.StringArrayOutput)
}

// List of Tag values, with a maximum of 50 elements.
func (o LookupOpenZfsSnapshotResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupOpenZfsSnapshotResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// ID of the volume that the snapshot is of.
func (o LookupOpenZfsSnapshotResultOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpenZfsSnapshotResult) string { return v.VolumeId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupOpenZfsSnapshotResultOutput{})
}
