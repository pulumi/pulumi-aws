// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package opsworks

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an OpsWorks ECS Cluster layer resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/opsworks"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := opsworks.NewEcsClusterLayer(ctx, "example", &opsworks.EcsClusterLayerArgs{
// 			StackId:       pulumi.Any(aws_opsworks_stack.Example.Id),
// 			EcsClusterArn: pulumi.Any(aws_ecs_cluster.Example.Arn),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type EcsClusterLayer struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name(ARN) of the layer.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Whether to automatically assign an elastic IP address to the layer's instances.
	AutoAssignElasticIps pulumi.BoolPtrOutput `pulumi:"autoAssignElasticIps"`
	// For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances.
	AutoAssignPublicIps pulumi.BoolPtrOutput `pulumi:"autoAssignPublicIps"`
	// Whether to enable auto-healing for the layer.
	AutoHealing             pulumi.BoolPtrOutput                            `pulumi:"autoHealing"`
	CloudwatchConfiguration EcsClusterLayerCloudwatchConfigurationPtrOutput `pulumi:"cloudwatchConfiguration"`
	CustomConfigureRecipes  pulumi.StringArrayOutput                        `pulumi:"customConfigureRecipes"`
	CustomDeployRecipes     pulumi.StringArrayOutput                        `pulumi:"customDeployRecipes"`
	// The ARN of an IAM profile that will be used for the layer's instances.
	CustomInstanceProfileArn pulumi.StringPtrOutput `pulumi:"customInstanceProfileArn"`
	// Custom JSON attributes to apply to the layer.
	CustomJson pulumi.StringPtrOutput `pulumi:"customJson"`
	// Ids for a set of security groups to apply to the layer's instances.
	CustomSecurityGroupIds pulumi.StringArrayOutput `pulumi:"customSecurityGroupIds"`
	CustomSetupRecipes     pulumi.StringArrayOutput `pulumi:"customSetupRecipes"`
	CustomShutdownRecipes  pulumi.StringArrayOutput `pulumi:"customShutdownRecipes"`
	CustomUndeployRecipes  pulumi.StringArrayOutput `pulumi:"customUndeployRecipes"`
	// Whether to enable Elastic Load Balancing connection draining.
	DrainElbOnShutdown pulumi.BoolPtrOutput `pulumi:"drainElbOnShutdown"`
	// `ebsVolume` blocks, as described below, will each create an EBS volume and connect it to the layer's instances.
	EbsVolumes EcsClusterLayerEbsVolumeArrayOutput `pulumi:"ebsVolumes"`
	// The ECS Cluster ARN of the layer.
	EcsClusterArn pulumi.StringOutput `pulumi:"ecsClusterArn"`
	// Name of an Elastic Load Balancer to attach to this layer
	ElasticLoadBalancer pulumi.StringPtrOutput `pulumi:"elasticLoadBalancer"`
	// Whether to install OS and package updates on each instance when it boots.
	InstallUpdatesOnBoot pulumi.BoolPtrOutput `pulumi:"installUpdatesOnBoot"`
	// The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event.
	InstanceShutdownTimeout pulumi.IntPtrOutput `pulumi:"instanceShutdownTimeout"`
	// A human-readable name for the layer.
	Name pulumi.StringOutput `pulumi:"name"`
	// The id of the stack the layer will belong to.
	StackId pulumi.StringOutput `pulumi:"stackId"`
	// Names of a set of system packages to install on the layer's instances.
	SystemPackages pulumi.StringArrayOutput `pulumi:"systemPackages"`
	// A mapping of tags to assign to the resource.
	Tags    pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// Whether to use EBS-optimized instances.
	UseEbsOptimizedInstances pulumi.BoolPtrOutput `pulumi:"useEbsOptimizedInstances"`
}

// NewEcsClusterLayer registers a new resource with the given unique name, arguments, and options.
func NewEcsClusterLayer(ctx *pulumi.Context,
	name string, args *EcsClusterLayerArgs, opts ...pulumi.ResourceOption) (*EcsClusterLayer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EcsClusterArn == nil {
		return nil, errors.New("invalid value for required argument 'EcsClusterArn'")
	}
	if args.StackId == nil {
		return nil, errors.New("invalid value for required argument 'StackId'")
	}
	var resource EcsClusterLayer
	err := ctx.RegisterResource("aws:opsworks/ecsClusterLayer:EcsClusterLayer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEcsClusterLayer gets an existing EcsClusterLayer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEcsClusterLayer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EcsClusterLayerState, opts ...pulumi.ResourceOption) (*EcsClusterLayer, error) {
	var resource EcsClusterLayer
	err := ctx.ReadResource("aws:opsworks/ecsClusterLayer:EcsClusterLayer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EcsClusterLayer resources.
type ecsClusterLayerState struct {
	// The Amazon Resource Name(ARN) of the layer.
	Arn *string `pulumi:"arn"`
	// Whether to automatically assign an elastic IP address to the layer's instances.
	AutoAssignElasticIps *bool `pulumi:"autoAssignElasticIps"`
	// For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances.
	AutoAssignPublicIps *bool `pulumi:"autoAssignPublicIps"`
	// Whether to enable auto-healing for the layer.
	AutoHealing             *bool                                   `pulumi:"autoHealing"`
	CloudwatchConfiguration *EcsClusterLayerCloudwatchConfiguration `pulumi:"cloudwatchConfiguration"`
	CustomConfigureRecipes  []string                                `pulumi:"customConfigureRecipes"`
	CustomDeployRecipes     []string                                `pulumi:"customDeployRecipes"`
	// The ARN of an IAM profile that will be used for the layer's instances.
	CustomInstanceProfileArn *string `pulumi:"customInstanceProfileArn"`
	// Custom JSON attributes to apply to the layer.
	CustomJson *string `pulumi:"customJson"`
	// Ids for a set of security groups to apply to the layer's instances.
	CustomSecurityGroupIds []string `pulumi:"customSecurityGroupIds"`
	CustomSetupRecipes     []string `pulumi:"customSetupRecipes"`
	CustomShutdownRecipes  []string `pulumi:"customShutdownRecipes"`
	CustomUndeployRecipes  []string `pulumi:"customUndeployRecipes"`
	// Whether to enable Elastic Load Balancing connection draining.
	DrainElbOnShutdown *bool `pulumi:"drainElbOnShutdown"`
	// `ebsVolume` blocks, as described below, will each create an EBS volume and connect it to the layer's instances.
	EbsVolumes []EcsClusterLayerEbsVolume `pulumi:"ebsVolumes"`
	// The ECS Cluster ARN of the layer.
	EcsClusterArn *string `pulumi:"ecsClusterArn"`
	// Name of an Elastic Load Balancer to attach to this layer
	ElasticLoadBalancer *string `pulumi:"elasticLoadBalancer"`
	// Whether to install OS and package updates on each instance when it boots.
	InstallUpdatesOnBoot *bool `pulumi:"installUpdatesOnBoot"`
	// The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event.
	InstanceShutdownTimeout *int `pulumi:"instanceShutdownTimeout"`
	// A human-readable name for the layer.
	Name *string `pulumi:"name"`
	// The id of the stack the layer will belong to.
	StackId *string `pulumi:"stackId"`
	// Names of a set of system packages to install on the layer's instances.
	SystemPackages []string `pulumi:"systemPackages"`
	// A mapping of tags to assign to the resource.
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Whether to use EBS-optimized instances.
	UseEbsOptimizedInstances *bool `pulumi:"useEbsOptimizedInstances"`
}

type EcsClusterLayerState struct {
	// The Amazon Resource Name(ARN) of the layer.
	Arn pulumi.StringPtrInput
	// Whether to automatically assign an elastic IP address to the layer's instances.
	AutoAssignElasticIps pulumi.BoolPtrInput
	// For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances.
	AutoAssignPublicIps pulumi.BoolPtrInput
	// Whether to enable auto-healing for the layer.
	AutoHealing             pulumi.BoolPtrInput
	CloudwatchConfiguration EcsClusterLayerCloudwatchConfigurationPtrInput
	CustomConfigureRecipes  pulumi.StringArrayInput
	CustomDeployRecipes     pulumi.StringArrayInput
	// The ARN of an IAM profile that will be used for the layer's instances.
	CustomInstanceProfileArn pulumi.StringPtrInput
	// Custom JSON attributes to apply to the layer.
	CustomJson pulumi.StringPtrInput
	// Ids for a set of security groups to apply to the layer's instances.
	CustomSecurityGroupIds pulumi.StringArrayInput
	CustomSetupRecipes     pulumi.StringArrayInput
	CustomShutdownRecipes  pulumi.StringArrayInput
	CustomUndeployRecipes  pulumi.StringArrayInput
	// Whether to enable Elastic Load Balancing connection draining.
	DrainElbOnShutdown pulumi.BoolPtrInput
	// `ebsVolume` blocks, as described below, will each create an EBS volume and connect it to the layer's instances.
	EbsVolumes EcsClusterLayerEbsVolumeArrayInput
	// The ECS Cluster ARN of the layer.
	EcsClusterArn pulumi.StringPtrInput
	// Name of an Elastic Load Balancer to attach to this layer
	ElasticLoadBalancer pulumi.StringPtrInput
	// Whether to install OS and package updates on each instance when it boots.
	InstallUpdatesOnBoot pulumi.BoolPtrInput
	// The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event.
	InstanceShutdownTimeout pulumi.IntPtrInput
	// A human-readable name for the layer.
	Name pulumi.StringPtrInput
	// The id of the stack the layer will belong to.
	StackId pulumi.StringPtrInput
	// Names of a set of system packages to install on the layer's instances.
	SystemPackages pulumi.StringArrayInput
	// A mapping of tags to assign to the resource.
	Tags    pulumi.StringMapInput
	TagsAll pulumi.StringMapInput
	// Whether to use EBS-optimized instances.
	UseEbsOptimizedInstances pulumi.BoolPtrInput
}

func (EcsClusterLayerState) ElementType() reflect.Type {
	return reflect.TypeOf((*ecsClusterLayerState)(nil)).Elem()
}

type ecsClusterLayerArgs struct {
	// Whether to automatically assign an elastic IP address to the layer's instances.
	AutoAssignElasticIps *bool `pulumi:"autoAssignElasticIps"`
	// For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances.
	AutoAssignPublicIps *bool `pulumi:"autoAssignPublicIps"`
	// Whether to enable auto-healing for the layer.
	AutoHealing             *bool                                   `pulumi:"autoHealing"`
	CloudwatchConfiguration *EcsClusterLayerCloudwatchConfiguration `pulumi:"cloudwatchConfiguration"`
	CustomConfigureRecipes  []string                                `pulumi:"customConfigureRecipes"`
	CustomDeployRecipes     []string                                `pulumi:"customDeployRecipes"`
	// The ARN of an IAM profile that will be used for the layer's instances.
	CustomInstanceProfileArn *string `pulumi:"customInstanceProfileArn"`
	// Custom JSON attributes to apply to the layer.
	CustomJson *string `pulumi:"customJson"`
	// Ids for a set of security groups to apply to the layer's instances.
	CustomSecurityGroupIds []string `pulumi:"customSecurityGroupIds"`
	CustomSetupRecipes     []string `pulumi:"customSetupRecipes"`
	CustomShutdownRecipes  []string `pulumi:"customShutdownRecipes"`
	CustomUndeployRecipes  []string `pulumi:"customUndeployRecipes"`
	// Whether to enable Elastic Load Balancing connection draining.
	DrainElbOnShutdown *bool `pulumi:"drainElbOnShutdown"`
	// `ebsVolume` blocks, as described below, will each create an EBS volume and connect it to the layer's instances.
	EbsVolumes []EcsClusterLayerEbsVolume `pulumi:"ebsVolumes"`
	// The ECS Cluster ARN of the layer.
	EcsClusterArn string `pulumi:"ecsClusterArn"`
	// Name of an Elastic Load Balancer to attach to this layer
	ElasticLoadBalancer *string `pulumi:"elasticLoadBalancer"`
	// Whether to install OS and package updates on each instance when it boots.
	InstallUpdatesOnBoot *bool `pulumi:"installUpdatesOnBoot"`
	// The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event.
	InstanceShutdownTimeout *int `pulumi:"instanceShutdownTimeout"`
	// A human-readable name for the layer.
	Name *string `pulumi:"name"`
	// The id of the stack the layer will belong to.
	StackId string `pulumi:"stackId"`
	// Names of a set of system packages to install on the layer's instances.
	SystemPackages []string `pulumi:"systemPackages"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// Whether to use EBS-optimized instances.
	UseEbsOptimizedInstances *bool `pulumi:"useEbsOptimizedInstances"`
}

// The set of arguments for constructing a EcsClusterLayer resource.
type EcsClusterLayerArgs struct {
	// Whether to automatically assign an elastic IP address to the layer's instances.
	AutoAssignElasticIps pulumi.BoolPtrInput
	// For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances.
	AutoAssignPublicIps pulumi.BoolPtrInput
	// Whether to enable auto-healing for the layer.
	AutoHealing             pulumi.BoolPtrInput
	CloudwatchConfiguration EcsClusterLayerCloudwatchConfigurationPtrInput
	CustomConfigureRecipes  pulumi.StringArrayInput
	CustomDeployRecipes     pulumi.StringArrayInput
	// The ARN of an IAM profile that will be used for the layer's instances.
	CustomInstanceProfileArn pulumi.StringPtrInput
	// Custom JSON attributes to apply to the layer.
	CustomJson pulumi.StringPtrInput
	// Ids for a set of security groups to apply to the layer's instances.
	CustomSecurityGroupIds pulumi.StringArrayInput
	CustomSetupRecipes     pulumi.StringArrayInput
	CustomShutdownRecipes  pulumi.StringArrayInput
	CustomUndeployRecipes  pulumi.StringArrayInput
	// Whether to enable Elastic Load Balancing connection draining.
	DrainElbOnShutdown pulumi.BoolPtrInput
	// `ebsVolume` blocks, as described below, will each create an EBS volume and connect it to the layer's instances.
	EbsVolumes EcsClusterLayerEbsVolumeArrayInput
	// The ECS Cluster ARN of the layer.
	EcsClusterArn pulumi.StringInput
	// Name of an Elastic Load Balancer to attach to this layer
	ElasticLoadBalancer pulumi.StringPtrInput
	// Whether to install OS and package updates on each instance when it boots.
	InstallUpdatesOnBoot pulumi.BoolPtrInput
	// The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event.
	InstanceShutdownTimeout pulumi.IntPtrInput
	// A human-readable name for the layer.
	Name pulumi.StringPtrInput
	// The id of the stack the layer will belong to.
	StackId pulumi.StringInput
	// Names of a set of system packages to install on the layer's instances.
	SystemPackages pulumi.StringArrayInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// Whether to use EBS-optimized instances.
	UseEbsOptimizedInstances pulumi.BoolPtrInput
}

func (EcsClusterLayerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ecsClusterLayerArgs)(nil)).Elem()
}

type EcsClusterLayerInput interface {
	pulumi.Input

	ToEcsClusterLayerOutput() EcsClusterLayerOutput
	ToEcsClusterLayerOutputWithContext(ctx context.Context) EcsClusterLayerOutput
}

func (*EcsClusterLayer) ElementType() reflect.Type {
	return reflect.TypeOf((**EcsClusterLayer)(nil)).Elem()
}

func (i *EcsClusterLayer) ToEcsClusterLayerOutput() EcsClusterLayerOutput {
	return i.ToEcsClusterLayerOutputWithContext(context.Background())
}

func (i *EcsClusterLayer) ToEcsClusterLayerOutputWithContext(ctx context.Context) EcsClusterLayerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsClusterLayerOutput)
}

// EcsClusterLayerArrayInput is an input type that accepts EcsClusterLayerArray and EcsClusterLayerArrayOutput values.
// You can construct a concrete instance of `EcsClusterLayerArrayInput` via:
//
//          EcsClusterLayerArray{ EcsClusterLayerArgs{...} }
type EcsClusterLayerArrayInput interface {
	pulumi.Input

	ToEcsClusterLayerArrayOutput() EcsClusterLayerArrayOutput
	ToEcsClusterLayerArrayOutputWithContext(context.Context) EcsClusterLayerArrayOutput
}

type EcsClusterLayerArray []EcsClusterLayerInput

func (EcsClusterLayerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EcsClusterLayer)(nil)).Elem()
}

func (i EcsClusterLayerArray) ToEcsClusterLayerArrayOutput() EcsClusterLayerArrayOutput {
	return i.ToEcsClusterLayerArrayOutputWithContext(context.Background())
}

func (i EcsClusterLayerArray) ToEcsClusterLayerArrayOutputWithContext(ctx context.Context) EcsClusterLayerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsClusterLayerArrayOutput)
}

// EcsClusterLayerMapInput is an input type that accepts EcsClusterLayerMap and EcsClusterLayerMapOutput values.
// You can construct a concrete instance of `EcsClusterLayerMapInput` via:
//
//          EcsClusterLayerMap{ "key": EcsClusterLayerArgs{...} }
type EcsClusterLayerMapInput interface {
	pulumi.Input

	ToEcsClusterLayerMapOutput() EcsClusterLayerMapOutput
	ToEcsClusterLayerMapOutputWithContext(context.Context) EcsClusterLayerMapOutput
}

type EcsClusterLayerMap map[string]EcsClusterLayerInput

func (EcsClusterLayerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EcsClusterLayer)(nil)).Elem()
}

func (i EcsClusterLayerMap) ToEcsClusterLayerMapOutput() EcsClusterLayerMapOutput {
	return i.ToEcsClusterLayerMapOutputWithContext(context.Background())
}

func (i EcsClusterLayerMap) ToEcsClusterLayerMapOutputWithContext(ctx context.Context) EcsClusterLayerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsClusterLayerMapOutput)
}

type EcsClusterLayerOutput struct{ *pulumi.OutputState }

func (EcsClusterLayerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EcsClusterLayer)(nil)).Elem()
}

func (o EcsClusterLayerOutput) ToEcsClusterLayerOutput() EcsClusterLayerOutput {
	return o
}

func (o EcsClusterLayerOutput) ToEcsClusterLayerOutputWithContext(ctx context.Context) EcsClusterLayerOutput {
	return o
}

type EcsClusterLayerArrayOutput struct{ *pulumi.OutputState }

func (EcsClusterLayerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EcsClusterLayer)(nil)).Elem()
}

func (o EcsClusterLayerArrayOutput) ToEcsClusterLayerArrayOutput() EcsClusterLayerArrayOutput {
	return o
}

func (o EcsClusterLayerArrayOutput) ToEcsClusterLayerArrayOutputWithContext(ctx context.Context) EcsClusterLayerArrayOutput {
	return o
}

func (o EcsClusterLayerArrayOutput) Index(i pulumi.IntInput) EcsClusterLayerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EcsClusterLayer {
		return vs[0].([]*EcsClusterLayer)[vs[1].(int)]
	}).(EcsClusterLayerOutput)
}

type EcsClusterLayerMapOutput struct{ *pulumi.OutputState }

func (EcsClusterLayerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EcsClusterLayer)(nil)).Elem()
}

func (o EcsClusterLayerMapOutput) ToEcsClusterLayerMapOutput() EcsClusterLayerMapOutput {
	return o
}

func (o EcsClusterLayerMapOutput) ToEcsClusterLayerMapOutputWithContext(ctx context.Context) EcsClusterLayerMapOutput {
	return o
}

func (o EcsClusterLayerMapOutput) MapIndex(k pulumi.StringInput) EcsClusterLayerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EcsClusterLayer {
		return vs[0].(map[string]*EcsClusterLayer)[vs[1].(string)]
	}).(EcsClusterLayerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EcsClusterLayerInput)(nil)).Elem(), &EcsClusterLayer{})
	pulumi.RegisterInputType(reflect.TypeOf((*EcsClusterLayerArrayInput)(nil)).Elem(), EcsClusterLayerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EcsClusterLayerMapInput)(nil)).Elem(), EcsClusterLayerMap{})
	pulumi.RegisterOutputType(EcsClusterLayerOutput{})
	pulumi.RegisterOutputType(EcsClusterLayerArrayOutput{})
	pulumi.RegisterOutputType(EcsClusterLayerMapOutput{})
}
