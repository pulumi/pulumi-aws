// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opsworks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an OpsWorks ECS Cluster layer resource.
type EcsClusterLayer struct {
	pulumi.CustomResourceState
}

// NewEcsClusterLayer registers a new resource with the given unique name, arguments, and options.
func NewEcsClusterLayer(ctx *pulumi.Context,
	name string, args *EcsClusterLayerArgs, opts ...pulumi.ResourceOption) (*EcsClusterLayer, error) {
	if args == nil {
		args = &EcsClusterLayerArgs{}
	}

	var resource EcsClusterLayer
	err := ctx.RegisterResource("aws:opsworks/ecsClusterLayer:EcsClusterLayer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEcsClusterLayer gets an existing EcsClusterLayer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEcsClusterLayer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EcsClusterLayerState, opts ...pulumi.ResourceOption) (*EcsClusterLayer, error) {
	var resource EcsClusterLayer
	err := ctx.ReadResource("aws:opsworks/ecsClusterLayer:EcsClusterLayer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EcsClusterLayer resources.
type ecsClusterLayerState struct {
}

type EcsClusterLayerState struct {
}

func (EcsClusterLayerState) ElementType() reflect.Type {
	return reflect.TypeOf((*ecsClusterLayerState)(nil)).Elem()
}

type ecsClusterLayerArgs struct {
}

// The set of arguments for constructing a EcsClusterLayer resource.
type EcsClusterLayerArgs struct {
}

func (EcsClusterLayerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ecsClusterLayerArgs)(nil)).Elem()
}

type EcsClusterLayerInput interface {
	pulumi.Input

	ToEcsClusterLayerOutput() EcsClusterLayerOutput
	ToEcsClusterLayerOutputWithContext(ctx context.Context) EcsClusterLayerOutput
}

func (*EcsClusterLayer) ElementType() reflect.Type {
	return reflect.TypeOf((**EcsClusterLayer)(nil)).Elem()
}

func (i *EcsClusterLayer) ToEcsClusterLayerOutput() EcsClusterLayerOutput {
	return i.ToEcsClusterLayerOutputWithContext(context.Background())
}

func (i *EcsClusterLayer) ToEcsClusterLayerOutputWithContext(ctx context.Context) EcsClusterLayerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsClusterLayerOutput)
}

// EcsClusterLayerArrayInput is an input type that accepts EcsClusterLayerArray and EcsClusterLayerArrayOutput values.
// You can construct a concrete instance of `EcsClusterLayerArrayInput` via:
//
//	EcsClusterLayerArray{ EcsClusterLayerArgs{...} }
type EcsClusterLayerArrayInput interface {
	pulumi.Input

	ToEcsClusterLayerArrayOutput() EcsClusterLayerArrayOutput
	ToEcsClusterLayerArrayOutputWithContext(context.Context) EcsClusterLayerArrayOutput
}

type EcsClusterLayerArray []EcsClusterLayerInput

func (EcsClusterLayerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EcsClusterLayer)(nil)).Elem()
}

func (i EcsClusterLayerArray) ToEcsClusterLayerArrayOutput() EcsClusterLayerArrayOutput {
	return i.ToEcsClusterLayerArrayOutputWithContext(context.Background())
}

func (i EcsClusterLayerArray) ToEcsClusterLayerArrayOutputWithContext(ctx context.Context) EcsClusterLayerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsClusterLayerArrayOutput)
}

// EcsClusterLayerMapInput is an input type that accepts EcsClusterLayerMap and EcsClusterLayerMapOutput values.
// You can construct a concrete instance of `EcsClusterLayerMapInput` via:
//
//	EcsClusterLayerMap{ "key": EcsClusterLayerArgs{...} }
type EcsClusterLayerMapInput interface {
	pulumi.Input

	ToEcsClusterLayerMapOutput() EcsClusterLayerMapOutput
	ToEcsClusterLayerMapOutputWithContext(context.Context) EcsClusterLayerMapOutput
}

type EcsClusterLayerMap map[string]EcsClusterLayerInput

func (EcsClusterLayerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EcsClusterLayer)(nil)).Elem()
}

func (i EcsClusterLayerMap) ToEcsClusterLayerMapOutput() EcsClusterLayerMapOutput {
	return i.ToEcsClusterLayerMapOutputWithContext(context.Background())
}

func (i EcsClusterLayerMap) ToEcsClusterLayerMapOutputWithContext(ctx context.Context) EcsClusterLayerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsClusterLayerMapOutput)
}

type EcsClusterLayerOutput struct{ *pulumi.OutputState }

func (EcsClusterLayerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EcsClusterLayer)(nil)).Elem()
}

func (o EcsClusterLayerOutput) ToEcsClusterLayerOutput() EcsClusterLayerOutput {
	return o
}

func (o EcsClusterLayerOutput) ToEcsClusterLayerOutputWithContext(ctx context.Context) EcsClusterLayerOutput {
	return o
}

type EcsClusterLayerArrayOutput struct{ *pulumi.OutputState }

func (EcsClusterLayerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EcsClusterLayer)(nil)).Elem()
}

func (o EcsClusterLayerArrayOutput) ToEcsClusterLayerArrayOutput() EcsClusterLayerArrayOutput {
	return o
}

func (o EcsClusterLayerArrayOutput) ToEcsClusterLayerArrayOutputWithContext(ctx context.Context) EcsClusterLayerArrayOutput {
	return o
}

func (o EcsClusterLayerArrayOutput) Index(i pulumi.IntInput) EcsClusterLayerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EcsClusterLayer {
		return vs[0].([]*EcsClusterLayer)[vs[1].(int)]
	}).(EcsClusterLayerOutput)
}

type EcsClusterLayerMapOutput struct{ *pulumi.OutputState }

func (EcsClusterLayerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EcsClusterLayer)(nil)).Elem()
}

func (o EcsClusterLayerMapOutput) ToEcsClusterLayerMapOutput() EcsClusterLayerMapOutput {
	return o
}

func (o EcsClusterLayerMapOutput) ToEcsClusterLayerMapOutputWithContext(ctx context.Context) EcsClusterLayerMapOutput {
	return o
}

func (o EcsClusterLayerMapOutput) MapIndex(k pulumi.StringInput) EcsClusterLayerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EcsClusterLayer {
		return vs[0].(map[string]*EcsClusterLayer)[vs[1].(string)]
	}).(EcsClusterLayerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EcsClusterLayerInput)(nil)).Elem(), &EcsClusterLayer{})
	pulumi.RegisterInputType(reflect.TypeOf((*EcsClusterLayerArrayInput)(nil)).Elem(), EcsClusterLayerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EcsClusterLayerMapInput)(nil)).Elem(), EcsClusterLayerMap{})
	pulumi.RegisterOutputType(EcsClusterLayerOutput{})
	pulumi.RegisterOutputType(EcsClusterLayerArrayOutput{})
	pulumi.RegisterOutputType(EcsClusterLayerMapOutput{})
}
