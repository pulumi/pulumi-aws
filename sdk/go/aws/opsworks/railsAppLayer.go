// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opsworks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an OpsWorks Ruby on Rails application layer resource.
type RailsAppLayer struct {
	pulumi.CustomResourceState
}

// NewRailsAppLayer registers a new resource with the given unique name, arguments, and options.
func NewRailsAppLayer(ctx *pulumi.Context,
	name string, args *RailsAppLayerArgs, opts ...pulumi.ResourceOption) (*RailsAppLayer, error) {
	if args == nil {
		args = &RailsAppLayerArgs{}
	}

	var resource RailsAppLayer
	err := ctx.RegisterResource("aws:opsworks/railsAppLayer:RailsAppLayer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRailsAppLayer gets an existing RailsAppLayer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRailsAppLayer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RailsAppLayerState, opts ...pulumi.ResourceOption) (*RailsAppLayer, error) {
	var resource RailsAppLayer
	err := ctx.ReadResource("aws:opsworks/railsAppLayer:RailsAppLayer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RailsAppLayer resources.
type railsAppLayerState struct {
}

type RailsAppLayerState struct {
}

func (RailsAppLayerState) ElementType() reflect.Type {
	return reflect.TypeOf((*railsAppLayerState)(nil)).Elem()
}

type railsAppLayerArgs struct {
}

// The set of arguments for constructing a RailsAppLayer resource.
type RailsAppLayerArgs struct {
}

func (RailsAppLayerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*railsAppLayerArgs)(nil)).Elem()
}

type RailsAppLayerInput interface {
	pulumi.Input

	ToRailsAppLayerOutput() RailsAppLayerOutput
	ToRailsAppLayerOutputWithContext(ctx context.Context) RailsAppLayerOutput
}

func (*RailsAppLayer) ElementType() reflect.Type {
	return reflect.TypeOf((**RailsAppLayer)(nil)).Elem()
}

func (i *RailsAppLayer) ToRailsAppLayerOutput() RailsAppLayerOutput {
	return i.ToRailsAppLayerOutputWithContext(context.Background())
}

func (i *RailsAppLayer) ToRailsAppLayerOutputWithContext(ctx context.Context) RailsAppLayerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RailsAppLayerOutput)
}

// RailsAppLayerArrayInput is an input type that accepts RailsAppLayerArray and RailsAppLayerArrayOutput values.
// You can construct a concrete instance of `RailsAppLayerArrayInput` via:
//
//	RailsAppLayerArray{ RailsAppLayerArgs{...} }
type RailsAppLayerArrayInput interface {
	pulumi.Input

	ToRailsAppLayerArrayOutput() RailsAppLayerArrayOutput
	ToRailsAppLayerArrayOutputWithContext(context.Context) RailsAppLayerArrayOutput
}

type RailsAppLayerArray []RailsAppLayerInput

func (RailsAppLayerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RailsAppLayer)(nil)).Elem()
}

func (i RailsAppLayerArray) ToRailsAppLayerArrayOutput() RailsAppLayerArrayOutput {
	return i.ToRailsAppLayerArrayOutputWithContext(context.Background())
}

func (i RailsAppLayerArray) ToRailsAppLayerArrayOutputWithContext(ctx context.Context) RailsAppLayerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RailsAppLayerArrayOutput)
}

// RailsAppLayerMapInput is an input type that accepts RailsAppLayerMap and RailsAppLayerMapOutput values.
// You can construct a concrete instance of `RailsAppLayerMapInput` via:
//
//	RailsAppLayerMap{ "key": RailsAppLayerArgs{...} }
type RailsAppLayerMapInput interface {
	pulumi.Input

	ToRailsAppLayerMapOutput() RailsAppLayerMapOutput
	ToRailsAppLayerMapOutputWithContext(context.Context) RailsAppLayerMapOutput
}

type RailsAppLayerMap map[string]RailsAppLayerInput

func (RailsAppLayerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RailsAppLayer)(nil)).Elem()
}

func (i RailsAppLayerMap) ToRailsAppLayerMapOutput() RailsAppLayerMapOutput {
	return i.ToRailsAppLayerMapOutputWithContext(context.Background())
}

func (i RailsAppLayerMap) ToRailsAppLayerMapOutputWithContext(ctx context.Context) RailsAppLayerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RailsAppLayerMapOutput)
}

type RailsAppLayerOutput struct{ *pulumi.OutputState }

func (RailsAppLayerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RailsAppLayer)(nil)).Elem()
}

func (o RailsAppLayerOutput) ToRailsAppLayerOutput() RailsAppLayerOutput {
	return o
}

func (o RailsAppLayerOutput) ToRailsAppLayerOutputWithContext(ctx context.Context) RailsAppLayerOutput {
	return o
}

type RailsAppLayerArrayOutput struct{ *pulumi.OutputState }

func (RailsAppLayerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RailsAppLayer)(nil)).Elem()
}

func (o RailsAppLayerArrayOutput) ToRailsAppLayerArrayOutput() RailsAppLayerArrayOutput {
	return o
}

func (o RailsAppLayerArrayOutput) ToRailsAppLayerArrayOutputWithContext(ctx context.Context) RailsAppLayerArrayOutput {
	return o
}

func (o RailsAppLayerArrayOutput) Index(i pulumi.IntInput) RailsAppLayerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RailsAppLayer {
		return vs[0].([]*RailsAppLayer)[vs[1].(int)]
	}).(RailsAppLayerOutput)
}

type RailsAppLayerMapOutput struct{ *pulumi.OutputState }

func (RailsAppLayerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RailsAppLayer)(nil)).Elem()
}

func (o RailsAppLayerMapOutput) ToRailsAppLayerMapOutput() RailsAppLayerMapOutput {
	return o
}

func (o RailsAppLayerMapOutput) ToRailsAppLayerMapOutputWithContext(ctx context.Context) RailsAppLayerMapOutput {
	return o
}

func (o RailsAppLayerMapOutput) MapIndex(k pulumi.StringInput) RailsAppLayerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RailsAppLayer {
		return vs[0].(map[string]*RailsAppLayer)[vs[1].(string)]
	}).(RailsAppLayerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RailsAppLayerInput)(nil)).Elem(), &RailsAppLayer{})
	pulumi.RegisterInputType(reflect.TypeOf((*RailsAppLayerArrayInput)(nil)).Elem(), RailsAppLayerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RailsAppLayerMapInput)(nil)).Elem(), RailsAppLayerMap{})
	pulumi.RegisterOutputType(RailsAppLayerOutput{})
	pulumi.RegisterOutputType(RailsAppLayerArrayOutput{})
	pulumi.RegisterOutputType(RailsAppLayerMapOutput{})
}
