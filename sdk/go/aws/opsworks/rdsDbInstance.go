// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package opsworks

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an OpsWorks RDS DB Instance resource.
// 
// ~> **Note:** All arguments including the username and password will be stored in the raw state as plain-text.
// [Read more about sensitive data in state](/docs/state/sensitive-data.html).
type RdsDbInstance struct {
	s *pulumi.ResourceState
}

// NewRdsDbInstance registers a new resource with the given unique name, arguments, and options.
func NewRdsDbInstance(ctx *pulumi.Context,
	name string, args *RdsDbInstanceArgs, opts ...pulumi.ResourceOpt) (*RdsDbInstance, error) {
	if args == nil || args.DbPassword == nil {
		return nil, errors.New("missing required argument 'DbPassword'")
	}
	if args == nil || args.DbUser == nil {
		return nil, errors.New("missing required argument 'DbUser'")
	}
	if args == nil || args.RdsDbInstanceArn == nil {
		return nil, errors.New("missing required argument 'RdsDbInstanceArn'")
	}
	if args == nil || args.StackId == nil {
		return nil, errors.New("missing required argument 'StackId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["dbPassword"] = nil
		inputs["dbUser"] = nil
		inputs["rdsDbInstanceArn"] = nil
		inputs["stackId"] = nil
	} else {
		inputs["dbPassword"] = args.DbPassword
		inputs["dbUser"] = args.DbUser
		inputs["rdsDbInstanceArn"] = args.RdsDbInstanceArn
		inputs["stackId"] = args.StackId
	}
	s, err := ctx.RegisterResource("aws:opsworks/rdsDbInstance:RdsDbInstance", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RdsDbInstance{s: s}, nil
}

// GetRdsDbInstance gets an existing RdsDbInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRdsDbInstance(ctx *pulumi.Context,
	name string, id pulumi.ID, state *RdsDbInstanceState, opts ...pulumi.ResourceOpt) (*RdsDbInstance, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["dbPassword"] = state.DbPassword
		inputs["dbUser"] = state.DbUser
		inputs["rdsDbInstanceArn"] = state.RdsDbInstanceArn
		inputs["stackId"] = state.StackId
	}
	s, err := ctx.ReadResource("aws:opsworks/rdsDbInstance:RdsDbInstance", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RdsDbInstance{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *RdsDbInstance) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *RdsDbInstance) ID() *pulumi.IDOutput {
	return r.s.ID
}

// A db password
func (r *RdsDbInstance) DbPassword() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["dbPassword"])
}

// A db username
func (r *RdsDbInstance) DbUser() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["dbUser"])
}

// The db instance to register for this stack. Changing this will force a new resource.
func (r *RdsDbInstance) RdsDbInstanceArn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["rdsDbInstanceArn"])
}

// The stack to register a db inatance for. Changing this will force a new resource.
func (r *RdsDbInstance) StackId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["stackId"])
}

// Input properties used for looking up and filtering RdsDbInstance resources.
type RdsDbInstanceState struct {
	// A db password
	DbPassword interface{}
	// A db username
	DbUser interface{}
	// The db instance to register for this stack. Changing this will force a new resource.
	RdsDbInstanceArn interface{}
	// The stack to register a db inatance for. Changing this will force a new resource.
	StackId interface{}
}

// The set of arguments for constructing a RdsDbInstance resource.
type RdsDbInstanceArgs struct {
	// A db password
	DbPassword interface{}
	// A db username
	DbUser interface{}
	// The db instance to register for this stack. Changing this will force a new resource.
	RdsDbInstanceArn interface{}
	// The stack to register a db inatance for. Changing this will force a new resource.
	StackId interface{}
}
