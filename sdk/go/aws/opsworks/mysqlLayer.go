// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opsworks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an OpsWorks MySQL layer resource.
type MysqlLayer struct {
	pulumi.CustomResourceState
}

// NewMysqlLayer registers a new resource with the given unique name, arguments, and options.
func NewMysqlLayer(ctx *pulumi.Context,
	name string, args *MysqlLayerArgs, opts ...pulumi.ResourceOption) (*MysqlLayer, error) {
	if args == nil {
		args = &MysqlLayerArgs{}
	}

	var resource MysqlLayer
	err := ctx.RegisterResource("aws:opsworks/mysqlLayer:MysqlLayer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMysqlLayer gets an existing MysqlLayer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMysqlLayer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MysqlLayerState, opts ...pulumi.ResourceOption) (*MysqlLayer, error) {
	var resource MysqlLayer
	err := ctx.ReadResource("aws:opsworks/mysqlLayer:MysqlLayer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MysqlLayer resources.
type mysqlLayerState struct {
}

type MysqlLayerState struct {
}

func (MysqlLayerState) ElementType() reflect.Type {
	return reflect.TypeOf((*mysqlLayerState)(nil)).Elem()
}

type mysqlLayerArgs struct {
}

// The set of arguments for constructing a MysqlLayer resource.
type MysqlLayerArgs struct {
}

func (MysqlLayerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mysqlLayerArgs)(nil)).Elem()
}

type MysqlLayerInput interface {
	pulumi.Input

	ToMysqlLayerOutput() MysqlLayerOutput
	ToMysqlLayerOutputWithContext(ctx context.Context) MysqlLayerOutput
}

func (*MysqlLayer) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlLayer)(nil)).Elem()
}

func (i *MysqlLayer) ToMysqlLayerOutput() MysqlLayerOutput {
	return i.ToMysqlLayerOutputWithContext(context.Background())
}

func (i *MysqlLayer) ToMysqlLayerOutputWithContext(ctx context.Context) MysqlLayerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlLayerOutput)
}

// MysqlLayerArrayInput is an input type that accepts MysqlLayerArray and MysqlLayerArrayOutput values.
// You can construct a concrete instance of `MysqlLayerArrayInput` via:
//
//	MysqlLayerArray{ MysqlLayerArgs{...} }
type MysqlLayerArrayInput interface {
	pulumi.Input

	ToMysqlLayerArrayOutput() MysqlLayerArrayOutput
	ToMysqlLayerArrayOutputWithContext(context.Context) MysqlLayerArrayOutput
}

type MysqlLayerArray []MysqlLayerInput

func (MysqlLayerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MysqlLayer)(nil)).Elem()
}

func (i MysqlLayerArray) ToMysqlLayerArrayOutput() MysqlLayerArrayOutput {
	return i.ToMysqlLayerArrayOutputWithContext(context.Background())
}

func (i MysqlLayerArray) ToMysqlLayerArrayOutputWithContext(ctx context.Context) MysqlLayerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlLayerArrayOutput)
}

// MysqlLayerMapInput is an input type that accepts MysqlLayerMap and MysqlLayerMapOutput values.
// You can construct a concrete instance of `MysqlLayerMapInput` via:
//
//	MysqlLayerMap{ "key": MysqlLayerArgs{...} }
type MysqlLayerMapInput interface {
	pulumi.Input

	ToMysqlLayerMapOutput() MysqlLayerMapOutput
	ToMysqlLayerMapOutputWithContext(context.Context) MysqlLayerMapOutput
}

type MysqlLayerMap map[string]MysqlLayerInput

func (MysqlLayerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MysqlLayer)(nil)).Elem()
}

func (i MysqlLayerMap) ToMysqlLayerMapOutput() MysqlLayerMapOutput {
	return i.ToMysqlLayerMapOutputWithContext(context.Background())
}

func (i MysqlLayerMap) ToMysqlLayerMapOutputWithContext(ctx context.Context) MysqlLayerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlLayerMapOutput)
}

type MysqlLayerOutput struct{ *pulumi.OutputState }

func (MysqlLayerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlLayer)(nil)).Elem()
}

func (o MysqlLayerOutput) ToMysqlLayerOutput() MysqlLayerOutput {
	return o
}

func (o MysqlLayerOutput) ToMysqlLayerOutputWithContext(ctx context.Context) MysqlLayerOutput {
	return o
}

type MysqlLayerArrayOutput struct{ *pulumi.OutputState }

func (MysqlLayerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MysqlLayer)(nil)).Elem()
}

func (o MysqlLayerArrayOutput) ToMysqlLayerArrayOutput() MysqlLayerArrayOutput {
	return o
}

func (o MysqlLayerArrayOutput) ToMysqlLayerArrayOutputWithContext(ctx context.Context) MysqlLayerArrayOutput {
	return o
}

func (o MysqlLayerArrayOutput) Index(i pulumi.IntInput) MysqlLayerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MysqlLayer {
		return vs[0].([]*MysqlLayer)[vs[1].(int)]
	}).(MysqlLayerOutput)
}

type MysqlLayerMapOutput struct{ *pulumi.OutputState }

func (MysqlLayerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MysqlLayer)(nil)).Elem()
}

func (o MysqlLayerMapOutput) ToMysqlLayerMapOutput() MysqlLayerMapOutput {
	return o
}

func (o MysqlLayerMapOutput) ToMysqlLayerMapOutputWithContext(ctx context.Context) MysqlLayerMapOutput {
	return o
}

func (o MysqlLayerMapOutput) MapIndex(k pulumi.StringInput) MysqlLayerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MysqlLayer {
		return vs[0].(map[string]*MysqlLayer)[vs[1].(string)]
	}).(MysqlLayerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlLayerInput)(nil)).Elem(), &MysqlLayer{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlLayerArrayInput)(nil)).Elem(), MysqlLayerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlLayerMapInput)(nil)).Elem(), MysqlLayerMap{})
	pulumi.RegisterOutputType(MysqlLayerOutput{})
	pulumi.RegisterOutputType(MysqlLayerArrayOutput{})
	pulumi.RegisterOutputType(MysqlLayerMapOutput{})
}
