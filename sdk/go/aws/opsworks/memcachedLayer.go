// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opsworks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an OpsWorks memcached layer resource.
type MemcachedLayer struct {
	pulumi.CustomResourceState
}

// NewMemcachedLayer registers a new resource with the given unique name, arguments, and options.
func NewMemcachedLayer(ctx *pulumi.Context,
	name string, args *MemcachedLayerArgs, opts ...pulumi.ResourceOption) (*MemcachedLayer, error) {
	if args == nil {
		args = &MemcachedLayerArgs{}
	}

	var resource MemcachedLayer
	err := ctx.RegisterResource("aws:opsworks/memcachedLayer:MemcachedLayer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMemcachedLayer gets an existing MemcachedLayer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMemcachedLayer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MemcachedLayerState, opts ...pulumi.ResourceOption) (*MemcachedLayer, error) {
	var resource MemcachedLayer
	err := ctx.ReadResource("aws:opsworks/memcachedLayer:MemcachedLayer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MemcachedLayer resources.
type memcachedLayerState struct {
}

type MemcachedLayerState struct {
}

func (MemcachedLayerState) ElementType() reflect.Type {
	return reflect.TypeOf((*memcachedLayerState)(nil)).Elem()
}

type memcachedLayerArgs struct {
}

// The set of arguments for constructing a MemcachedLayer resource.
type MemcachedLayerArgs struct {
}

func (MemcachedLayerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*memcachedLayerArgs)(nil)).Elem()
}

type MemcachedLayerInput interface {
	pulumi.Input

	ToMemcachedLayerOutput() MemcachedLayerOutput
	ToMemcachedLayerOutputWithContext(ctx context.Context) MemcachedLayerOutput
}

func (*MemcachedLayer) ElementType() reflect.Type {
	return reflect.TypeOf((**MemcachedLayer)(nil)).Elem()
}

func (i *MemcachedLayer) ToMemcachedLayerOutput() MemcachedLayerOutput {
	return i.ToMemcachedLayerOutputWithContext(context.Background())
}

func (i *MemcachedLayer) ToMemcachedLayerOutputWithContext(ctx context.Context) MemcachedLayerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemcachedLayerOutput)
}

// MemcachedLayerArrayInput is an input type that accepts MemcachedLayerArray and MemcachedLayerArrayOutput values.
// You can construct a concrete instance of `MemcachedLayerArrayInput` via:
//
//	MemcachedLayerArray{ MemcachedLayerArgs{...} }
type MemcachedLayerArrayInput interface {
	pulumi.Input

	ToMemcachedLayerArrayOutput() MemcachedLayerArrayOutput
	ToMemcachedLayerArrayOutputWithContext(context.Context) MemcachedLayerArrayOutput
}

type MemcachedLayerArray []MemcachedLayerInput

func (MemcachedLayerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MemcachedLayer)(nil)).Elem()
}

func (i MemcachedLayerArray) ToMemcachedLayerArrayOutput() MemcachedLayerArrayOutput {
	return i.ToMemcachedLayerArrayOutputWithContext(context.Background())
}

func (i MemcachedLayerArray) ToMemcachedLayerArrayOutputWithContext(ctx context.Context) MemcachedLayerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemcachedLayerArrayOutput)
}

// MemcachedLayerMapInput is an input type that accepts MemcachedLayerMap and MemcachedLayerMapOutput values.
// You can construct a concrete instance of `MemcachedLayerMapInput` via:
//
//	MemcachedLayerMap{ "key": MemcachedLayerArgs{...} }
type MemcachedLayerMapInput interface {
	pulumi.Input

	ToMemcachedLayerMapOutput() MemcachedLayerMapOutput
	ToMemcachedLayerMapOutputWithContext(context.Context) MemcachedLayerMapOutput
}

type MemcachedLayerMap map[string]MemcachedLayerInput

func (MemcachedLayerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MemcachedLayer)(nil)).Elem()
}

func (i MemcachedLayerMap) ToMemcachedLayerMapOutput() MemcachedLayerMapOutput {
	return i.ToMemcachedLayerMapOutputWithContext(context.Background())
}

func (i MemcachedLayerMap) ToMemcachedLayerMapOutputWithContext(ctx context.Context) MemcachedLayerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemcachedLayerMapOutput)
}

type MemcachedLayerOutput struct{ *pulumi.OutputState }

func (MemcachedLayerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MemcachedLayer)(nil)).Elem()
}

func (o MemcachedLayerOutput) ToMemcachedLayerOutput() MemcachedLayerOutput {
	return o
}

func (o MemcachedLayerOutput) ToMemcachedLayerOutputWithContext(ctx context.Context) MemcachedLayerOutput {
	return o
}

type MemcachedLayerArrayOutput struct{ *pulumi.OutputState }

func (MemcachedLayerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MemcachedLayer)(nil)).Elem()
}

func (o MemcachedLayerArrayOutput) ToMemcachedLayerArrayOutput() MemcachedLayerArrayOutput {
	return o
}

func (o MemcachedLayerArrayOutput) ToMemcachedLayerArrayOutputWithContext(ctx context.Context) MemcachedLayerArrayOutput {
	return o
}

func (o MemcachedLayerArrayOutput) Index(i pulumi.IntInput) MemcachedLayerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MemcachedLayer {
		return vs[0].([]*MemcachedLayer)[vs[1].(int)]
	}).(MemcachedLayerOutput)
}

type MemcachedLayerMapOutput struct{ *pulumi.OutputState }

func (MemcachedLayerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MemcachedLayer)(nil)).Elem()
}

func (o MemcachedLayerMapOutput) ToMemcachedLayerMapOutput() MemcachedLayerMapOutput {
	return o
}

func (o MemcachedLayerMapOutput) ToMemcachedLayerMapOutputWithContext(ctx context.Context) MemcachedLayerMapOutput {
	return o
}

func (o MemcachedLayerMapOutput) MapIndex(k pulumi.StringInput) MemcachedLayerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MemcachedLayer {
		return vs[0].(map[string]*MemcachedLayer)[vs[1].(string)]
	}).(MemcachedLayerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MemcachedLayerInput)(nil)).Elem(), &MemcachedLayer{})
	pulumi.RegisterInputType(reflect.TypeOf((*MemcachedLayerArrayInput)(nil)).Elem(), MemcachedLayerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MemcachedLayerMapInput)(nil)).Elem(), MemcachedLayerMap{})
	pulumi.RegisterOutputType(MemcachedLayerOutput{})
	pulumi.RegisterOutputType(MemcachedLayerArrayOutput{})
	pulumi.RegisterOutputType(MemcachedLayerMapOutput{})
}
