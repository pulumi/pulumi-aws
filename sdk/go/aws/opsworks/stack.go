// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package opsworks

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an OpsWorks stack resource.
type Stack struct {
	s *pulumi.ResourceState
}

// NewStack registers a new resource with the given unique name, arguments, and options.
func NewStack(ctx *pulumi.Context,
	name string, args *StackArgs, opts ...pulumi.ResourceOpt) (*Stack, error) {
	if args == nil || args.DefaultInstanceProfileArn == nil {
		return nil, errors.New("missing required argument 'DefaultInstanceProfileArn'")
	}
	if args == nil || args.Region == nil {
		return nil, errors.New("missing required argument 'Region'")
	}
	if args == nil || args.ServiceRoleArn == nil {
		return nil, errors.New("missing required argument 'ServiceRoleArn'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["agentVersion"] = nil
		inputs["berkshelfVersion"] = nil
		inputs["color"] = nil
		inputs["configurationManagerName"] = nil
		inputs["configurationManagerVersion"] = nil
		inputs["customCookbooksSources"] = nil
		inputs["customJson"] = nil
		inputs["defaultAvailabilityZone"] = nil
		inputs["defaultInstanceProfileArn"] = nil
		inputs["defaultOs"] = nil
		inputs["defaultRootDeviceType"] = nil
		inputs["defaultSshKeyName"] = nil
		inputs["defaultSubnetId"] = nil
		inputs["hostnameTheme"] = nil
		inputs["manageBerkshelf"] = nil
		inputs["name"] = nil
		inputs["region"] = nil
		inputs["serviceRoleArn"] = nil
		inputs["tags"] = nil
		inputs["useCustomCookbooks"] = nil
		inputs["useOpsworksSecurityGroups"] = nil
		inputs["vpcId"] = nil
	} else {
		inputs["agentVersion"] = args.AgentVersion
		inputs["berkshelfVersion"] = args.BerkshelfVersion
		inputs["color"] = args.Color
		inputs["configurationManagerName"] = args.ConfigurationManagerName
		inputs["configurationManagerVersion"] = args.ConfigurationManagerVersion
		inputs["customCookbooksSources"] = args.CustomCookbooksSources
		inputs["customJson"] = args.CustomJson
		inputs["defaultAvailabilityZone"] = args.DefaultAvailabilityZone
		inputs["defaultInstanceProfileArn"] = args.DefaultInstanceProfileArn
		inputs["defaultOs"] = args.DefaultOs
		inputs["defaultRootDeviceType"] = args.DefaultRootDeviceType
		inputs["defaultSshKeyName"] = args.DefaultSshKeyName
		inputs["defaultSubnetId"] = args.DefaultSubnetId
		inputs["hostnameTheme"] = args.HostnameTheme
		inputs["manageBerkshelf"] = args.ManageBerkshelf
		inputs["name"] = args.Name
		inputs["region"] = args.Region
		inputs["serviceRoleArn"] = args.ServiceRoleArn
		inputs["tags"] = args.Tags
		inputs["useCustomCookbooks"] = args.UseCustomCookbooks
		inputs["useOpsworksSecurityGroups"] = args.UseOpsworksSecurityGroups
		inputs["vpcId"] = args.VpcId
	}
	inputs["arn"] = nil
	inputs["stackEndpoint"] = nil
	s, err := ctx.RegisterResource("aws:opsworks/stack:Stack", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Stack{s: s}, nil
}

// GetStack gets an existing Stack resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStack(ctx *pulumi.Context,
	name string, id pulumi.ID, state *StackState, opts ...pulumi.ResourceOpt) (*Stack, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["agentVersion"] = state.AgentVersion
		inputs["arn"] = state.Arn
		inputs["berkshelfVersion"] = state.BerkshelfVersion
		inputs["color"] = state.Color
		inputs["configurationManagerName"] = state.ConfigurationManagerName
		inputs["configurationManagerVersion"] = state.ConfigurationManagerVersion
		inputs["customCookbooksSources"] = state.CustomCookbooksSources
		inputs["customJson"] = state.CustomJson
		inputs["defaultAvailabilityZone"] = state.DefaultAvailabilityZone
		inputs["defaultInstanceProfileArn"] = state.DefaultInstanceProfileArn
		inputs["defaultOs"] = state.DefaultOs
		inputs["defaultRootDeviceType"] = state.DefaultRootDeviceType
		inputs["defaultSshKeyName"] = state.DefaultSshKeyName
		inputs["defaultSubnetId"] = state.DefaultSubnetId
		inputs["hostnameTheme"] = state.HostnameTheme
		inputs["manageBerkshelf"] = state.ManageBerkshelf
		inputs["name"] = state.Name
		inputs["region"] = state.Region
		inputs["serviceRoleArn"] = state.ServiceRoleArn
		inputs["stackEndpoint"] = state.StackEndpoint
		inputs["tags"] = state.Tags
		inputs["useCustomCookbooks"] = state.UseCustomCookbooks
		inputs["useOpsworksSecurityGroups"] = state.UseOpsworksSecurityGroups
		inputs["vpcId"] = state.VpcId
	}
	s, err := ctx.ReadResource("aws:opsworks/stack:Stack", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Stack{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Stack) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Stack) ID() *pulumi.IDOutput {
	return r.s.ID
}

// If set to `"LATEST"`, OpsWorks will automatically install the latest version.
func (r *Stack) AgentVersion() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["agentVersion"])
}

func (r *Stack) Arn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["arn"])
}

// If `manage_berkshelf` is enabled, the version of Berkshelf to use.
func (r *Stack) BerkshelfVersion() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["berkshelfVersion"])
}

// Color to paint next to the stack's resources in the OpsWorks console.
func (r *Stack) Color() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["color"])
}

// Name of the configuration manager to use. Defaults to "Chef".
func (r *Stack) ConfigurationManagerName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["configurationManagerName"])
}

// Version of the configuration manager to use. Defaults to "11.4".
func (r *Stack) ConfigurationManagerVersion() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["configurationManagerVersion"])
}

// When `use_custom_cookbooks` is set, provide this sub-object as
// described below.
func (r *Stack) CustomCookbooksSources() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["customCookbooksSources"])
}

// Custom JSON attributes to apply to the entire stack.
func (r *Stack) CustomJson() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["customJson"])
}

// Name of the availability zone where instances will be created
// by default. This is required unless you set `vpc_id`.
func (r *Stack) DefaultAvailabilityZone() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["defaultAvailabilityZone"])
}

// The ARN of an IAM Instance Profile that created instances
// will have by default.
func (r *Stack) DefaultInstanceProfileArn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["defaultInstanceProfileArn"])
}

// Name of OS that will be installed on instances by default.
func (r *Stack) DefaultOs() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["defaultOs"])
}

// Name of the type of root device instances will have by default.
func (r *Stack) DefaultRootDeviceType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["defaultRootDeviceType"])
}

// Name of the SSH keypair that instances will have by default.
func (r *Stack) DefaultSshKeyName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["defaultSshKeyName"])
}

// Id of the subnet in which instances will be created by default. Mandatory
// if `vpc_id` is set, and forbidden if it isn't.
func (r *Stack) DefaultSubnetId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["defaultSubnetId"])
}

// Keyword representing the naming scheme that will be used for instance hostnames
// within this stack.
func (r *Stack) HostnameTheme() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["hostnameTheme"])
}

// Boolean value controlling whether Opsworks will run Berkshelf for this stack.
func (r *Stack) ManageBerkshelf() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["manageBerkshelf"])
}

// The name of the stack.
func (r *Stack) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The name of the region where the stack will exist.
func (r *Stack) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// The ARN of an IAM role that the OpsWorks service will act as.
func (r *Stack) ServiceRoleArn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["serviceRoleArn"])
}

func (r *Stack) StackEndpoint() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["stackEndpoint"])
}

// A mapping of tags to assign to the resource.
func (r *Stack) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// Boolean value controlling whether the custom cookbook settings are
// enabled.
func (r *Stack) UseCustomCookbooks() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["useCustomCookbooks"])
}

// Boolean value controlling whether the standard OpsWorks
// security groups apply to created instances.
func (r *Stack) UseOpsworksSecurityGroups() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["useOpsworksSecurityGroups"])
}

// The id of the VPC that this stack belongs to.
func (r *Stack) VpcId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["vpcId"])
}

// Input properties used for looking up and filtering Stack resources.
type StackState struct {
	// If set to `"LATEST"`, OpsWorks will automatically install the latest version.
	AgentVersion interface{}
	Arn interface{}
	// If `manage_berkshelf` is enabled, the version of Berkshelf to use.
	BerkshelfVersion interface{}
	// Color to paint next to the stack's resources in the OpsWorks console.
	Color interface{}
	// Name of the configuration manager to use. Defaults to "Chef".
	ConfigurationManagerName interface{}
	// Version of the configuration manager to use. Defaults to "11.4".
	ConfigurationManagerVersion interface{}
	// When `use_custom_cookbooks` is set, provide this sub-object as
	// described below.
	CustomCookbooksSources interface{}
	// Custom JSON attributes to apply to the entire stack.
	CustomJson interface{}
	// Name of the availability zone where instances will be created
	// by default. This is required unless you set `vpc_id`.
	DefaultAvailabilityZone interface{}
	// The ARN of an IAM Instance Profile that created instances
	// will have by default.
	DefaultInstanceProfileArn interface{}
	// Name of OS that will be installed on instances by default.
	DefaultOs interface{}
	// Name of the type of root device instances will have by default.
	DefaultRootDeviceType interface{}
	// Name of the SSH keypair that instances will have by default.
	DefaultSshKeyName interface{}
	// Id of the subnet in which instances will be created by default. Mandatory
	// if `vpc_id` is set, and forbidden if it isn't.
	DefaultSubnetId interface{}
	// Keyword representing the naming scheme that will be used for instance hostnames
	// within this stack.
	HostnameTheme interface{}
	// Boolean value controlling whether Opsworks will run Berkshelf for this stack.
	ManageBerkshelf interface{}
	// The name of the stack.
	Name interface{}
	// The name of the region where the stack will exist.
	Region interface{}
	// The ARN of an IAM role that the OpsWorks service will act as.
	ServiceRoleArn interface{}
	StackEndpoint interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// Boolean value controlling whether the custom cookbook settings are
	// enabled.
	UseCustomCookbooks interface{}
	// Boolean value controlling whether the standard OpsWorks
	// security groups apply to created instances.
	UseOpsworksSecurityGroups interface{}
	// The id of the VPC that this stack belongs to.
	VpcId interface{}
}

// The set of arguments for constructing a Stack resource.
type StackArgs struct {
	// If set to `"LATEST"`, OpsWorks will automatically install the latest version.
	AgentVersion interface{}
	// If `manage_berkshelf` is enabled, the version of Berkshelf to use.
	BerkshelfVersion interface{}
	// Color to paint next to the stack's resources in the OpsWorks console.
	Color interface{}
	// Name of the configuration manager to use. Defaults to "Chef".
	ConfigurationManagerName interface{}
	// Version of the configuration manager to use. Defaults to "11.4".
	ConfigurationManagerVersion interface{}
	// When `use_custom_cookbooks` is set, provide this sub-object as
	// described below.
	CustomCookbooksSources interface{}
	// Custom JSON attributes to apply to the entire stack.
	CustomJson interface{}
	// Name of the availability zone where instances will be created
	// by default. This is required unless you set `vpc_id`.
	DefaultAvailabilityZone interface{}
	// The ARN of an IAM Instance Profile that created instances
	// will have by default.
	DefaultInstanceProfileArn interface{}
	// Name of OS that will be installed on instances by default.
	DefaultOs interface{}
	// Name of the type of root device instances will have by default.
	DefaultRootDeviceType interface{}
	// Name of the SSH keypair that instances will have by default.
	DefaultSshKeyName interface{}
	// Id of the subnet in which instances will be created by default. Mandatory
	// if `vpc_id` is set, and forbidden if it isn't.
	DefaultSubnetId interface{}
	// Keyword representing the naming scheme that will be used for instance hostnames
	// within this stack.
	HostnameTheme interface{}
	// Boolean value controlling whether Opsworks will run Berkshelf for this stack.
	ManageBerkshelf interface{}
	// The name of the stack.
	Name interface{}
	// The name of the region where the stack will exist.
	Region interface{}
	// The ARN of an IAM role that the OpsWorks service will act as.
	ServiceRoleArn interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// Boolean value controlling whether the custom cookbook settings are
	// enabled.
	UseCustomCookbooks interface{}
	// Boolean value controlling whether the standard OpsWorks
	// security groups apply to created instances.
	UseOpsworksSecurityGroups interface{}
	// The id of the VPC that this stack belongs to.
	VpcId interface{}
}
