// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opsworks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an OpsWorks static web server layer resource.
//
// ## Import
//
// OpsWorks static web server Layers can be imported using the `id`, e.g.,
//
// ```sh
//
//	$ pulumi import aws:opsworks/staticWebLayer:StaticWebLayer bar 00000000-0000-0000-0000-000000000000
//
// ```
type StaticWebLayer struct {
	pulumi.CustomResourceState
}

// NewStaticWebLayer registers a new resource with the given unique name, arguments, and options.
func NewStaticWebLayer(ctx *pulumi.Context,
	name string, args *StaticWebLayerArgs, opts ...pulumi.ResourceOption) (*StaticWebLayer, error) {
	if args == nil {
		args = &StaticWebLayerArgs{}
	}

	var resource StaticWebLayer
	err := ctx.RegisterResource("aws:opsworks/staticWebLayer:StaticWebLayer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStaticWebLayer gets an existing StaticWebLayer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStaticWebLayer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StaticWebLayerState, opts ...pulumi.ResourceOption) (*StaticWebLayer, error) {
	var resource StaticWebLayer
	err := ctx.ReadResource("aws:opsworks/staticWebLayer:StaticWebLayer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StaticWebLayer resources.
type staticWebLayerState struct {
}

type StaticWebLayerState struct {
}

func (StaticWebLayerState) ElementType() reflect.Type {
	return reflect.TypeOf((*staticWebLayerState)(nil)).Elem()
}

type staticWebLayerArgs struct {
}

// The set of arguments for constructing a StaticWebLayer resource.
type StaticWebLayerArgs struct {
}

func (StaticWebLayerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*staticWebLayerArgs)(nil)).Elem()
}

type StaticWebLayerInput interface {
	pulumi.Input

	ToStaticWebLayerOutput() StaticWebLayerOutput
	ToStaticWebLayerOutputWithContext(ctx context.Context) StaticWebLayerOutput
}

func (*StaticWebLayer) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticWebLayer)(nil)).Elem()
}

func (i *StaticWebLayer) ToStaticWebLayerOutput() StaticWebLayerOutput {
	return i.ToStaticWebLayerOutputWithContext(context.Background())
}

func (i *StaticWebLayer) ToStaticWebLayerOutputWithContext(ctx context.Context) StaticWebLayerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticWebLayerOutput)
}

// StaticWebLayerArrayInput is an input type that accepts StaticWebLayerArray and StaticWebLayerArrayOutput values.
// You can construct a concrete instance of `StaticWebLayerArrayInput` via:
//
//	StaticWebLayerArray{ StaticWebLayerArgs{...} }
type StaticWebLayerArrayInput interface {
	pulumi.Input

	ToStaticWebLayerArrayOutput() StaticWebLayerArrayOutput
	ToStaticWebLayerArrayOutputWithContext(context.Context) StaticWebLayerArrayOutput
}

type StaticWebLayerArray []StaticWebLayerInput

func (StaticWebLayerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StaticWebLayer)(nil)).Elem()
}

func (i StaticWebLayerArray) ToStaticWebLayerArrayOutput() StaticWebLayerArrayOutput {
	return i.ToStaticWebLayerArrayOutputWithContext(context.Background())
}

func (i StaticWebLayerArray) ToStaticWebLayerArrayOutputWithContext(ctx context.Context) StaticWebLayerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticWebLayerArrayOutput)
}

// StaticWebLayerMapInput is an input type that accepts StaticWebLayerMap and StaticWebLayerMapOutput values.
// You can construct a concrete instance of `StaticWebLayerMapInput` via:
//
//	StaticWebLayerMap{ "key": StaticWebLayerArgs{...} }
type StaticWebLayerMapInput interface {
	pulumi.Input

	ToStaticWebLayerMapOutput() StaticWebLayerMapOutput
	ToStaticWebLayerMapOutputWithContext(context.Context) StaticWebLayerMapOutput
}

type StaticWebLayerMap map[string]StaticWebLayerInput

func (StaticWebLayerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StaticWebLayer)(nil)).Elem()
}

func (i StaticWebLayerMap) ToStaticWebLayerMapOutput() StaticWebLayerMapOutput {
	return i.ToStaticWebLayerMapOutputWithContext(context.Background())
}

func (i StaticWebLayerMap) ToStaticWebLayerMapOutputWithContext(ctx context.Context) StaticWebLayerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticWebLayerMapOutput)
}

type StaticWebLayerOutput struct{ *pulumi.OutputState }

func (StaticWebLayerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticWebLayer)(nil)).Elem()
}

func (o StaticWebLayerOutput) ToStaticWebLayerOutput() StaticWebLayerOutput {
	return o
}

func (o StaticWebLayerOutput) ToStaticWebLayerOutputWithContext(ctx context.Context) StaticWebLayerOutput {
	return o
}

type StaticWebLayerArrayOutput struct{ *pulumi.OutputState }

func (StaticWebLayerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StaticWebLayer)(nil)).Elem()
}

func (o StaticWebLayerArrayOutput) ToStaticWebLayerArrayOutput() StaticWebLayerArrayOutput {
	return o
}

func (o StaticWebLayerArrayOutput) ToStaticWebLayerArrayOutputWithContext(ctx context.Context) StaticWebLayerArrayOutput {
	return o
}

func (o StaticWebLayerArrayOutput) Index(i pulumi.IntInput) StaticWebLayerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StaticWebLayer {
		return vs[0].([]*StaticWebLayer)[vs[1].(int)]
	}).(StaticWebLayerOutput)
}

type StaticWebLayerMapOutput struct{ *pulumi.OutputState }

func (StaticWebLayerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StaticWebLayer)(nil)).Elem()
}

func (o StaticWebLayerMapOutput) ToStaticWebLayerMapOutput() StaticWebLayerMapOutput {
	return o
}

func (o StaticWebLayerMapOutput) ToStaticWebLayerMapOutputWithContext(ctx context.Context) StaticWebLayerMapOutput {
	return o
}

func (o StaticWebLayerMapOutput) MapIndex(k pulumi.StringInput) StaticWebLayerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StaticWebLayer {
		return vs[0].(map[string]*StaticWebLayer)[vs[1].(string)]
	}).(StaticWebLayerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StaticWebLayerInput)(nil)).Elem(), &StaticWebLayer{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticWebLayerArrayInput)(nil)).Elem(), StaticWebLayerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticWebLayerMapInput)(nil)).Elem(), StaticWebLayerMap{})
	pulumi.RegisterOutputType(StaticWebLayerOutput{})
	pulumi.RegisterOutputType(StaticWebLayerArrayOutput{})
	pulumi.RegisterOutputType(StaticWebLayerMapOutput{})
}
