// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package opsworks

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an OpsWorks permission resource.
type Permission struct {
	s *pulumi.ResourceState
}

// NewPermission registers a new resource with the given unique name, arguments, and options.
func NewPermission(ctx *pulumi.Context,
	name string, args *PermissionArgs, opts ...pulumi.ResourceOpt) (*Permission, error) {
	if args == nil || args.UserArn == nil {
		return nil, errors.New("missing required argument 'UserArn'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["allowSsh"] = nil
		inputs["allowSudo"] = nil
		inputs["level"] = nil
		inputs["stackId"] = nil
		inputs["userArn"] = nil
	} else {
		inputs["allowSsh"] = args.AllowSsh
		inputs["allowSudo"] = args.AllowSudo
		inputs["level"] = args.Level
		inputs["stackId"] = args.StackId
		inputs["userArn"] = args.UserArn
	}
	s, err := ctx.RegisterResource("aws:opsworks/permission:Permission", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Permission{s: s}, nil
}

// GetPermission gets an existing Permission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPermission(ctx *pulumi.Context,
	name string, id pulumi.ID, state *PermissionState, opts ...pulumi.ResourceOpt) (*Permission, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["allowSsh"] = state.AllowSsh
		inputs["allowSudo"] = state.AllowSudo
		inputs["level"] = state.Level
		inputs["stackId"] = state.StackId
		inputs["userArn"] = state.UserArn
	}
	s, err := ctx.ReadResource("aws:opsworks/permission:Permission", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Permission{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Permission) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Permission) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Whether the user is allowed to use SSH to communicate with the instance
func (r *Permission) AllowSsh() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["allowSsh"])
}

// Whether the user is allowed to use sudo to elevate privileges
func (r *Permission) AllowSudo() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["allowSudo"])
}

// The users permission level. Mus be one of `deny`, `show`, `deploy`, `manage`, `iam_only`
func (r *Permission) Level() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["level"])
}

// The stack to set the permissions for
func (r *Permission) StackId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["stackId"])
}

// The user's IAM ARN to set permissions for
func (r *Permission) UserArn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["userArn"])
}

// Input properties used for looking up and filtering Permission resources.
type PermissionState struct {
	// Whether the user is allowed to use SSH to communicate with the instance
	AllowSsh interface{}
	// Whether the user is allowed to use sudo to elevate privileges
	AllowSudo interface{}
	// The users permission level. Mus be one of `deny`, `show`, `deploy`, `manage`, `iam_only`
	Level interface{}
	// The stack to set the permissions for
	StackId interface{}
	// The user's IAM ARN to set permissions for
	UserArn interface{}
}

// The set of arguments for constructing a Permission resource.
type PermissionArgs struct {
	// Whether the user is allowed to use SSH to communicate with the instance
	AllowSsh interface{}
	// Whether the user is allowed to use sudo to elevate privileges
	AllowSudo interface{}
	// The users permission level. Mus be one of `deny`, `show`, `deploy`, `manage`, `iam_only`
	Level interface{}
	// The stack to set the permissions for
	StackId interface{}
	// The user's IAM ARN to set permissions for
	UserArn interface{}
}
