// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opsworks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an OpsWorks Ganglia layer resource.
type GangliaLayer struct {
	pulumi.CustomResourceState
}

// NewGangliaLayer registers a new resource with the given unique name, arguments, and options.
func NewGangliaLayer(ctx *pulumi.Context,
	name string, args *GangliaLayerArgs, opts ...pulumi.ResourceOption) (*GangliaLayer, error) {
	if args == nil {
		args = &GangliaLayerArgs{}
	}

	var resource GangliaLayer
	err := ctx.RegisterResource("aws:opsworks/gangliaLayer:GangliaLayer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGangliaLayer gets an existing GangliaLayer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGangliaLayer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GangliaLayerState, opts ...pulumi.ResourceOption) (*GangliaLayer, error) {
	var resource GangliaLayer
	err := ctx.ReadResource("aws:opsworks/gangliaLayer:GangliaLayer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GangliaLayer resources.
type gangliaLayerState struct {
}

type GangliaLayerState struct {
}

func (GangliaLayerState) ElementType() reflect.Type {
	return reflect.TypeOf((*gangliaLayerState)(nil)).Elem()
}

type gangliaLayerArgs struct {
}

// The set of arguments for constructing a GangliaLayer resource.
type GangliaLayerArgs struct {
}

func (GangliaLayerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gangliaLayerArgs)(nil)).Elem()
}

type GangliaLayerInput interface {
	pulumi.Input

	ToGangliaLayerOutput() GangliaLayerOutput
	ToGangliaLayerOutputWithContext(ctx context.Context) GangliaLayerOutput
}

func (*GangliaLayer) ElementType() reflect.Type {
	return reflect.TypeOf((**GangliaLayer)(nil)).Elem()
}

func (i *GangliaLayer) ToGangliaLayerOutput() GangliaLayerOutput {
	return i.ToGangliaLayerOutputWithContext(context.Background())
}

func (i *GangliaLayer) ToGangliaLayerOutputWithContext(ctx context.Context) GangliaLayerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GangliaLayerOutput)
}

// GangliaLayerArrayInput is an input type that accepts GangliaLayerArray and GangliaLayerArrayOutput values.
// You can construct a concrete instance of `GangliaLayerArrayInput` via:
//
//	GangliaLayerArray{ GangliaLayerArgs{...} }
type GangliaLayerArrayInput interface {
	pulumi.Input

	ToGangliaLayerArrayOutput() GangliaLayerArrayOutput
	ToGangliaLayerArrayOutputWithContext(context.Context) GangliaLayerArrayOutput
}

type GangliaLayerArray []GangliaLayerInput

func (GangliaLayerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GangliaLayer)(nil)).Elem()
}

func (i GangliaLayerArray) ToGangliaLayerArrayOutput() GangliaLayerArrayOutput {
	return i.ToGangliaLayerArrayOutputWithContext(context.Background())
}

func (i GangliaLayerArray) ToGangliaLayerArrayOutputWithContext(ctx context.Context) GangliaLayerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GangliaLayerArrayOutput)
}

// GangliaLayerMapInput is an input type that accepts GangliaLayerMap and GangliaLayerMapOutput values.
// You can construct a concrete instance of `GangliaLayerMapInput` via:
//
//	GangliaLayerMap{ "key": GangliaLayerArgs{...} }
type GangliaLayerMapInput interface {
	pulumi.Input

	ToGangliaLayerMapOutput() GangliaLayerMapOutput
	ToGangliaLayerMapOutputWithContext(context.Context) GangliaLayerMapOutput
}

type GangliaLayerMap map[string]GangliaLayerInput

func (GangliaLayerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GangliaLayer)(nil)).Elem()
}

func (i GangliaLayerMap) ToGangliaLayerMapOutput() GangliaLayerMapOutput {
	return i.ToGangliaLayerMapOutputWithContext(context.Background())
}

func (i GangliaLayerMap) ToGangliaLayerMapOutputWithContext(ctx context.Context) GangliaLayerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GangliaLayerMapOutput)
}

type GangliaLayerOutput struct{ *pulumi.OutputState }

func (GangliaLayerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GangliaLayer)(nil)).Elem()
}

func (o GangliaLayerOutput) ToGangliaLayerOutput() GangliaLayerOutput {
	return o
}

func (o GangliaLayerOutput) ToGangliaLayerOutputWithContext(ctx context.Context) GangliaLayerOutput {
	return o
}

type GangliaLayerArrayOutput struct{ *pulumi.OutputState }

func (GangliaLayerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GangliaLayer)(nil)).Elem()
}

func (o GangliaLayerArrayOutput) ToGangliaLayerArrayOutput() GangliaLayerArrayOutput {
	return o
}

func (o GangliaLayerArrayOutput) ToGangliaLayerArrayOutputWithContext(ctx context.Context) GangliaLayerArrayOutput {
	return o
}

func (o GangliaLayerArrayOutput) Index(i pulumi.IntInput) GangliaLayerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GangliaLayer {
		return vs[0].([]*GangliaLayer)[vs[1].(int)]
	}).(GangliaLayerOutput)
}

type GangliaLayerMapOutput struct{ *pulumi.OutputState }

func (GangliaLayerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GangliaLayer)(nil)).Elem()
}

func (o GangliaLayerMapOutput) ToGangliaLayerMapOutput() GangliaLayerMapOutput {
	return o
}

func (o GangliaLayerMapOutput) ToGangliaLayerMapOutputWithContext(ctx context.Context) GangliaLayerMapOutput {
	return o
}

func (o GangliaLayerMapOutput) MapIndex(k pulumi.StringInput) GangliaLayerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GangliaLayer {
		return vs[0].(map[string]*GangliaLayer)[vs[1].(string)]
	}).(GangliaLayerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GangliaLayerInput)(nil)).Elem(), &GangliaLayer{})
	pulumi.RegisterInputType(reflect.TypeOf((*GangliaLayerArrayInput)(nil)).Elem(), GangliaLayerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GangliaLayerMapInput)(nil)).Elem(), GangliaLayerMap{})
	pulumi.RegisterOutputType(GangliaLayerOutput{})
	pulumi.RegisterOutputType(GangliaLayerArrayOutput{})
	pulumi.RegisterOutputType(GangliaLayerMapOutput{})
}
