// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ebs

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates a Snapshot of an EBS Volume.
type Snapshot struct {
	s *pulumi.ResourceState
}

// NewSnapshot registers a new resource with the given unique name, arguments, and options.
func NewSnapshot(ctx *pulumi.Context,
	name string, args *SnapshotArgs, opts ...pulumi.ResourceOpt) (*Snapshot, error) {
	if args == nil || args.VolumeId == nil {
		return nil, errors.New("missing required argument 'VolumeId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["tags"] = nil
		inputs["volumeId"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["tags"] = args.Tags
		inputs["volumeId"] = args.VolumeId
	}
	inputs["dataEncryptionKeyId"] = nil
	inputs["encrypted"] = nil
	inputs["kmsKeyId"] = nil
	inputs["ownerAlias"] = nil
	inputs["ownerId"] = nil
	inputs["volumeSize"] = nil
	s, err := ctx.RegisterResource("aws:ebs/snapshot:Snapshot", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Snapshot{s: s}, nil
}

// GetSnapshot gets an existing Snapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshot(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SnapshotState, opts ...pulumi.ResourceOpt) (*Snapshot, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["dataEncryptionKeyId"] = state.DataEncryptionKeyId
		inputs["description"] = state.Description
		inputs["encrypted"] = state.Encrypted
		inputs["kmsKeyId"] = state.KmsKeyId
		inputs["ownerAlias"] = state.OwnerAlias
		inputs["ownerId"] = state.OwnerId
		inputs["tags"] = state.Tags
		inputs["volumeId"] = state.VolumeId
		inputs["volumeSize"] = state.VolumeSize
	}
	s, err := ctx.ReadResource("aws:ebs/snapshot:Snapshot", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Snapshot{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Snapshot) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Snapshot) ID() *pulumi.IDOutput {
	return r.s.ID
}

// The data encryption key identifier for the snapshot.
func (r *Snapshot) DataEncryptionKeyId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["dataEncryptionKeyId"])
}

// A description of what the snapshot is.
func (r *Snapshot) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// Whether the snapshot is encrypted.
func (r *Snapshot) Encrypted() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["encrypted"])
}

// The ARN for the KMS encryption key.
func (r *Snapshot) KmsKeyId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["kmsKeyId"])
}

// Value from an Amazon-maintained list (`amazon`, `aws-marketplace`, `microsoft`) of snapshot owners.
func (r *Snapshot) OwnerAlias() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ownerAlias"])
}

// The AWS account ID of the EBS snapshot owner.
func (r *Snapshot) OwnerId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ownerId"])
}

// A mapping of tags to assign to the snapshot
func (r *Snapshot) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// The Volume ID of which to make a snapshot.
func (r *Snapshot) VolumeId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["volumeId"])
}

// The size of the drive in GiBs.
func (r *Snapshot) VolumeSize() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["volumeSize"])
}

// Input properties used for looking up and filtering Snapshot resources.
type SnapshotState struct {
	// The data encryption key identifier for the snapshot.
	DataEncryptionKeyId interface{}
	// A description of what the snapshot is.
	Description interface{}
	// Whether the snapshot is encrypted.
	Encrypted interface{}
	// The ARN for the KMS encryption key.
	KmsKeyId interface{}
	// Value from an Amazon-maintained list (`amazon`, `aws-marketplace`, `microsoft`) of snapshot owners.
	OwnerAlias interface{}
	// The AWS account ID of the EBS snapshot owner.
	OwnerId interface{}
	// A mapping of tags to assign to the snapshot
	Tags interface{}
	// The Volume ID of which to make a snapshot.
	VolumeId interface{}
	// The size of the drive in GiBs.
	VolumeSize interface{}
}

// The set of arguments for constructing a Snapshot resource.
type SnapshotArgs struct {
	// A description of what the snapshot is.
	Description interface{}
	// A mapping of tags to assign to the snapshot
	Tags interface{}
	// The Volume ID of which to make a snapshot.
	VolumeId interface{}
}
