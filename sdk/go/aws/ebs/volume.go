// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ebs

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Volume struct {
	pulumi.CustomResourceState

	Arn                pulumi.StringOutput    `pulumi:"arn"`
	AvailabilityZone   pulumi.StringOutput    `pulumi:"availabilityZone"`
	Encrypted          pulumi.BoolOutput      `pulumi:"encrypted"`
	FinalSnapshot      pulumi.BoolPtrOutput   `pulumi:"finalSnapshot"`
	Iops               pulumi.IntOutput       `pulumi:"iops"`
	KmsKeyId           pulumi.StringOutput    `pulumi:"kmsKeyId"`
	MultiAttachEnabled pulumi.BoolPtrOutput   `pulumi:"multiAttachEnabled"`
	OutpostArn         pulumi.StringPtrOutput `pulumi:"outpostArn"`
	Size               pulumi.IntOutput       `pulumi:"size"`
	SnapshotId         pulumi.StringOutput    `pulumi:"snapshotId"`
	Tags               pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll            pulumi.StringMapOutput `pulumi:"tagsAll"`
	Throughput         pulumi.IntOutput       `pulumi:"throughput"`
	Type               pulumi.StringOutput    `pulumi:"type"`
}

// NewVolume registers a new resource with the given unique name, arguments, and options.
func NewVolume(ctx *pulumi.Context,
	name string, args *VolumeArgs, opts ...pulumi.ResourceOption) (*Volume, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailabilityZone == nil {
		return nil, errors.New("invalid value for required argument 'AvailabilityZone'")
	}
	var resource Volume
	err := ctx.RegisterResource("aws:ebs/volume:Volume", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolume gets an existing Volume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeState, opts ...pulumi.ResourceOption) (*Volume, error) {
	var resource Volume
	err := ctx.ReadResource("aws:ebs/volume:Volume", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Volume resources.
type volumeState struct {
	Arn                *string           `pulumi:"arn"`
	AvailabilityZone   *string           `pulumi:"availabilityZone"`
	Encrypted          *bool             `pulumi:"encrypted"`
	FinalSnapshot      *bool             `pulumi:"finalSnapshot"`
	Iops               *int              `pulumi:"iops"`
	KmsKeyId           *string           `pulumi:"kmsKeyId"`
	MultiAttachEnabled *bool             `pulumi:"multiAttachEnabled"`
	OutpostArn         *string           `pulumi:"outpostArn"`
	Size               *int              `pulumi:"size"`
	SnapshotId         *string           `pulumi:"snapshotId"`
	Tags               map[string]string `pulumi:"tags"`
	TagsAll            map[string]string `pulumi:"tagsAll"`
	Throughput         *int              `pulumi:"throughput"`
	Type               *string           `pulumi:"type"`
}

type VolumeState struct {
	Arn                pulumi.StringPtrInput
	AvailabilityZone   pulumi.StringPtrInput
	Encrypted          pulumi.BoolPtrInput
	FinalSnapshot      pulumi.BoolPtrInput
	Iops               pulumi.IntPtrInput
	KmsKeyId           pulumi.StringPtrInput
	MultiAttachEnabled pulumi.BoolPtrInput
	OutpostArn         pulumi.StringPtrInput
	Size               pulumi.IntPtrInput
	SnapshotId         pulumi.StringPtrInput
	Tags               pulumi.StringMapInput
	TagsAll            pulumi.StringMapInput
	Throughput         pulumi.IntPtrInput
	Type               pulumi.StringPtrInput
}

func (VolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeState)(nil)).Elem()
}

type volumeArgs struct {
	AvailabilityZone   string            `pulumi:"availabilityZone"`
	Encrypted          *bool             `pulumi:"encrypted"`
	FinalSnapshot      *bool             `pulumi:"finalSnapshot"`
	Iops               *int              `pulumi:"iops"`
	KmsKeyId           *string           `pulumi:"kmsKeyId"`
	MultiAttachEnabled *bool             `pulumi:"multiAttachEnabled"`
	OutpostArn         *string           `pulumi:"outpostArn"`
	Size               *int              `pulumi:"size"`
	SnapshotId         *string           `pulumi:"snapshotId"`
	Tags               map[string]string `pulumi:"tags"`
	Throughput         *int              `pulumi:"throughput"`
	Type               *string           `pulumi:"type"`
}

// The set of arguments for constructing a Volume resource.
type VolumeArgs struct {
	AvailabilityZone   pulumi.StringInput
	Encrypted          pulumi.BoolPtrInput
	FinalSnapshot      pulumi.BoolPtrInput
	Iops               pulumi.IntPtrInput
	KmsKeyId           pulumi.StringPtrInput
	MultiAttachEnabled pulumi.BoolPtrInput
	OutpostArn         pulumi.StringPtrInput
	Size               pulumi.IntPtrInput
	SnapshotId         pulumi.StringPtrInput
	Tags               pulumi.StringMapInput
	Throughput         pulumi.IntPtrInput
	Type               pulumi.StringPtrInput
}

func (VolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeArgs)(nil)).Elem()
}

type VolumeInput interface {
	pulumi.Input

	ToVolumeOutput() VolumeOutput
	ToVolumeOutputWithContext(ctx context.Context) VolumeOutput
}

func (*Volume) ElementType() reflect.Type {
	return reflect.TypeOf((**Volume)(nil)).Elem()
}

func (i *Volume) ToVolumeOutput() VolumeOutput {
	return i.ToVolumeOutputWithContext(context.Background())
}

func (i *Volume) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeOutput)
}

// VolumeArrayInput is an input type that accepts VolumeArray and VolumeArrayOutput values.
// You can construct a concrete instance of `VolumeArrayInput` via:
//
//	VolumeArray{ VolumeArgs{...} }
type VolumeArrayInput interface {
	pulumi.Input

	ToVolumeArrayOutput() VolumeArrayOutput
	ToVolumeArrayOutputWithContext(context.Context) VolumeArrayOutput
}

type VolumeArray []VolumeInput

func (VolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Volume)(nil)).Elem()
}

func (i VolumeArray) ToVolumeArrayOutput() VolumeArrayOutput {
	return i.ToVolumeArrayOutputWithContext(context.Background())
}

func (i VolumeArray) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeArrayOutput)
}

// VolumeMapInput is an input type that accepts VolumeMap and VolumeMapOutput values.
// You can construct a concrete instance of `VolumeMapInput` via:
//
//	VolumeMap{ "key": VolumeArgs{...} }
type VolumeMapInput interface {
	pulumi.Input

	ToVolumeMapOutput() VolumeMapOutput
	ToVolumeMapOutputWithContext(context.Context) VolumeMapOutput
}

type VolumeMap map[string]VolumeInput

func (VolumeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Volume)(nil)).Elem()
}

func (i VolumeMap) ToVolumeMapOutput() VolumeMapOutput {
	return i.ToVolumeMapOutputWithContext(context.Background())
}

func (i VolumeMap) ToVolumeMapOutputWithContext(ctx context.Context) VolumeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMapOutput)
}

type VolumeOutput struct{ *pulumi.OutputState }

func (VolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Volume)(nil)).Elem()
}

func (o VolumeOutput) ToVolumeOutput() VolumeOutput {
	return o
}

func (o VolumeOutput) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return o
}

func (o VolumeOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o VolumeOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

func (o VolumeOutput) Encrypted() pulumi.BoolOutput {
	return o.ApplyT(func(v *Volume) pulumi.BoolOutput { return v.Encrypted }).(pulumi.BoolOutput)
}

func (o VolumeOutput) FinalSnapshot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.BoolPtrOutput { return v.FinalSnapshot }).(pulumi.BoolPtrOutput)
}

func (o VolumeOutput) Iops() pulumi.IntOutput {
	return o.ApplyT(func(v *Volume) pulumi.IntOutput { return v.Iops }).(pulumi.IntOutput)
}

func (o VolumeOutput) KmsKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.KmsKeyId }).(pulumi.StringOutput)
}

func (o VolumeOutput) MultiAttachEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.BoolPtrOutput { return v.MultiAttachEnabled }).(pulumi.BoolPtrOutput)
}

func (o VolumeOutput) OutpostArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.OutpostArn }).(pulumi.StringPtrOutput)
}

func (o VolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *Volume) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

func (o VolumeOutput) SnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.SnapshotId }).(pulumi.StringOutput)
}

func (o VolumeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o VolumeOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o VolumeOutput) Throughput() pulumi.IntOutput {
	return o.ApplyT(func(v *Volume) pulumi.IntOutput { return v.Throughput }).(pulumi.IntOutput)
}

func (o VolumeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type VolumeArrayOutput struct{ *pulumi.OutputState }

func (VolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Volume)(nil)).Elem()
}

func (o VolumeArrayOutput) ToVolumeArrayOutput() VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) Index(i pulumi.IntInput) VolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Volume {
		return vs[0].([]*Volume)[vs[1].(int)]
	}).(VolumeOutput)
}

type VolumeMapOutput struct{ *pulumi.OutputState }

func (VolumeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Volume)(nil)).Elem()
}

func (o VolumeMapOutput) ToVolumeMapOutput() VolumeMapOutput {
	return o
}

func (o VolumeMapOutput) ToVolumeMapOutputWithContext(ctx context.Context) VolumeMapOutput {
	return o
}

func (o VolumeMapOutput) MapIndex(k pulumi.StringInput) VolumeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Volume {
		return vs[0].(map[string]*Volume)[vs[1].(string)]
	}).(VolumeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeInput)(nil)).Elem(), &Volume{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeArrayInput)(nil)).Elem(), VolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeMapInput)(nil)).Elem(), VolumeMap{})
	pulumi.RegisterOutputType(VolumeOutput{})
	pulumi.RegisterOutputType(VolumeArrayOutput{})
	pulumi.RegisterOutputType(VolumeMapOutput{})
}
