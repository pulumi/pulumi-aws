// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ebs

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a single EBS volume.
type Volume struct {
	s *pulumi.ResourceState
}

// NewVolume registers a new resource with the given unique name, arguments, and options.
func NewVolume(ctx *pulumi.Context,
	name string, args *VolumeArgs, opts ...pulumi.ResourceOpt) (*Volume, error) {
	if args == nil || args.AvailabilityZone == nil {
		return nil, errors.New("missing required argument 'AvailabilityZone'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["availabilityZone"] = nil
		inputs["encrypted"] = nil
		inputs["iops"] = nil
		inputs["kmsKeyId"] = nil
		inputs["size"] = nil
		inputs["snapshotId"] = nil
		inputs["tags"] = nil
		inputs["type"] = nil
	} else {
		inputs["availabilityZone"] = args.AvailabilityZone
		inputs["encrypted"] = args.Encrypted
		inputs["iops"] = args.Iops
		inputs["kmsKeyId"] = args.KmsKeyId
		inputs["size"] = args.Size
		inputs["snapshotId"] = args.SnapshotId
		inputs["tags"] = args.Tags
		inputs["type"] = args.Type
	}
	inputs["arn"] = nil
	s, err := ctx.RegisterResource("aws:ebs/volume:Volume", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Volume{s: s}, nil
}

// GetVolume gets an existing Volume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolume(ctx *pulumi.Context,
	name string, id pulumi.ID, state *VolumeState, opts ...pulumi.ResourceOpt) (*Volume, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["availabilityZone"] = state.AvailabilityZone
		inputs["encrypted"] = state.Encrypted
		inputs["iops"] = state.Iops
		inputs["kmsKeyId"] = state.KmsKeyId
		inputs["size"] = state.Size
		inputs["snapshotId"] = state.SnapshotId
		inputs["tags"] = state.Tags
		inputs["type"] = state.Type
	}
	s, err := ctx.ReadResource("aws:ebs/volume:Volume", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Volume{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Volume) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Volume) ID() *pulumi.IDOutput {
	return r.s.ID
}

// The volume ARN (e.g. arn:aws:ec2:us-east-1:0123456789012:volume/vol-59fcb34e).
func (r *Volume) Arn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["arn"])
}

// The AZ where the EBS volume will exist.
func (r *Volume) AvailabilityZone() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["availabilityZone"])
}

// If true, the disk will be encrypted.
func (r *Volume) Encrypted() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["encrypted"])
}

// The amount of IOPS to provision for the disk.
func (r *Volume) Iops() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["iops"])
}

// The ARN for the KMS encryption key. When specifying `kms_key_id`, `encrypted` needs to be set to true.
func (r *Volume) KmsKeyId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["kmsKeyId"])
}

// The size of the drive in GiBs.
func (r *Volume) Size() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["size"])
}

// A snapshot to base the EBS volume off of.
func (r *Volume) SnapshotId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["snapshotId"])
}

// A mapping of tags to assign to the resource.
func (r *Volume) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// The type of EBS volume. Can be "standard", "gp2", "io1", "sc1" or "st1" (Default: "standard").
func (r *Volume) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

// Input properties used for looking up and filtering Volume resources.
type VolumeState struct {
	// The volume ARN (e.g. arn:aws:ec2:us-east-1:0123456789012:volume/vol-59fcb34e).
	Arn interface{}
	// The AZ where the EBS volume will exist.
	AvailabilityZone interface{}
	// If true, the disk will be encrypted.
	Encrypted interface{}
	// The amount of IOPS to provision for the disk.
	Iops interface{}
	// The ARN for the KMS encryption key. When specifying `kms_key_id`, `encrypted` needs to be set to true.
	KmsKeyId interface{}
	// The size of the drive in GiBs.
	Size interface{}
	// A snapshot to base the EBS volume off of.
	SnapshotId interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// The type of EBS volume. Can be "standard", "gp2", "io1", "sc1" or "st1" (Default: "standard").
	Type interface{}
}

// The set of arguments for constructing a Volume resource.
type VolumeArgs struct {
	// The AZ where the EBS volume will exist.
	AvailabilityZone interface{}
	// If true, the disk will be encrypted.
	Encrypted interface{}
	// The amount of IOPS to provision for the disk.
	Iops interface{}
	// The ARN for the KMS encryption key. When specifying `kms_key_id`, `encrypted` needs to be set to true.
	KmsKeyId interface{}
	// The size of the drive in GiBs.
	Size interface{}
	// A snapshot to base the EBS volume off of.
	SnapshotId interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// The type of EBS volume. Can be "standard", "gp2", "io1", "sc1" or "st1" (Default: "standard").
	Type interface{}
}
