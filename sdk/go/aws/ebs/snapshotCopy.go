// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ebs

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SnapshotCopy struct {
	pulumi.CustomResourceState

	Arn                  pulumi.StringOutput    `pulumi:"arn"`
	DataEncryptionKeyId  pulumi.StringOutput    `pulumi:"dataEncryptionKeyId"`
	Description          pulumi.StringPtrOutput `pulumi:"description"`
	Encrypted            pulumi.BoolPtrOutput   `pulumi:"encrypted"`
	KmsKeyId             pulumi.StringPtrOutput `pulumi:"kmsKeyId"`
	OutpostArn           pulumi.StringOutput    `pulumi:"outpostArn"`
	OwnerAlias           pulumi.StringOutput    `pulumi:"ownerAlias"`
	OwnerId              pulumi.StringOutput    `pulumi:"ownerId"`
	PermanentRestore     pulumi.BoolPtrOutput   `pulumi:"permanentRestore"`
	SourceRegion         pulumi.StringOutput    `pulumi:"sourceRegion"`
	SourceSnapshotId     pulumi.StringOutput    `pulumi:"sourceSnapshotId"`
	StorageTier          pulumi.StringOutput    `pulumi:"storageTier"`
	Tags                 pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll              pulumi.StringMapOutput `pulumi:"tagsAll"`
	TemporaryRestoreDays pulumi.IntPtrOutput    `pulumi:"temporaryRestoreDays"`
	VolumeId             pulumi.StringOutput    `pulumi:"volumeId"`
	VolumeSize           pulumi.IntOutput       `pulumi:"volumeSize"`
}

// NewSnapshotCopy registers a new resource with the given unique name, arguments, and options.
func NewSnapshotCopy(ctx *pulumi.Context,
	name string, args *SnapshotCopyArgs, opts ...pulumi.ResourceOption) (*SnapshotCopy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SourceRegion == nil {
		return nil, errors.New("invalid value for required argument 'SourceRegion'")
	}
	if args.SourceSnapshotId == nil {
		return nil, errors.New("invalid value for required argument 'SourceSnapshotId'")
	}
	var resource SnapshotCopy
	err := ctx.RegisterResource("aws:ebs/snapshotCopy:SnapshotCopy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshotCopy gets an existing SnapshotCopy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshotCopy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnapshotCopyState, opts ...pulumi.ResourceOption) (*SnapshotCopy, error) {
	var resource SnapshotCopy
	err := ctx.ReadResource("aws:ebs/snapshotCopy:SnapshotCopy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SnapshotCopy resources.
type snapshotCopyState struct {
	Arn                  *string           `pulumi:"arn"`
	DataEncryptionKeyId  *string           `pulumi:"dataEncryptionKeyId"`
	Description          *string           `pulumi:"description"`
	Encrypted            *bool             `pulumi:"encrypted"`
	KmsKeyId             *string           `pulumi:"kmsKeyId"`
	OutpostArn           *string           `pulumi:"outpostArn"`
	OwnerAlias           *string           `pulumi:"ownerAlias"`
	OwnerId              *string           `pulumi:"ownerId"`
	PermanentRestore     *bool             `pulumi:"permanentRestore"`
	SourceRegion         *string           `pulumi:"sourceRegion"`
	SourceSnapshotId     *string           `pulumi:"sourceSnapshotId"`
	StorageTier          *string           `pulumi:"storageTier"`
	Tags                 map[string]string `pulumi:"tags"`
	TagsAll              map[string]string `pulumi:"tagsAll"`
	TemporaryRestoreDays *int              `pulumi:"temporaryRestoreDays"`
	VolumeId             *string           `pulumi:"volumeId"`
	VolumeSize           *int              `pulumi:"volumeSize"`
}

type SnapshotCopyState struct {
	Arn                  pulumi.StringPtrInput
	DataEncryptionKeyId  pulumi.StringPtrInput
	Description          pulumi.StringPtrInput
	Encrypted            pulumi.BoolPtrInput
	KmsKeyId             pulumi.StringPtrInput
	OutpostArn           pulumi.StringPtrInput
	OwnerAlias           pulumi.StringPtrInput
	OwnerId              pulumi.StringPtrInput
	PermanentRestore     pulumi.BoolPtrInput
	SourceRegion         pulumi.StringPtrInput
	SourceSnapshotId     pulumi.StringPtrInput
	StorageTier          pulumi.StringPtrInput
	Tags                 pulumi.StringMapInput
	TagsAll              pulumi.StringMapInput
	TemporaryRestoreDays pulumi.IntPtrInput
	VolumeId             pulumi.StringPtrInput
	VolumeSize           pulumi.IntPtrInput
}

func (SnapshotCopyState) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotCopyState)(nil)).Elem()
}

type snapshotCopyArgs struct {
	Description          *string           `pulumi:"description"`
	Encrypted            *bool             `pulumi:"encrypted"`
	KmsKeyId             *string           `pulumi:"kmsKeyId"`
	PermanentRestore     *bool             `pulumi:"permanentRestore"`
	SourceRegion         string            `pulumi:"sourceRegion"`
	SourceSnapshotId     string            `pulumi:"sourceSnapshotId"`
	StorageTier          *string           `pulumi:"storageTier"`
	Tags                 map[string]string `pulumi:"tags"`
	TemporaryRestoreDays *int              `pulumi:"temporaryRestoreDays"`
}

// The set of arguments for constructing a SnapshotCopy resource.
type SnapshotCopyArgs struct {
	Description          pulumi.StringPtrInput
	Encrypted            pulumi.BoolPtrInput
	KmsKeyId             pulumi.StringPtrInput
	PermanentRestore     pulumi.BoolPtrInput
	SourceRegion         pulumi.StringInput
	SourceSnapshotId     pulumi.StringInput
	StorageTier          pulumi.StringPtrInput
	Tags                 pulumi.StringMapInput
	TemporaryRestoreDays pulumi.IntPtrInput
}

func (SnapshotCopyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotCopyArgs)(nil)).Elem()
}

type SnapshotCopyInput interface {
	pulumi.Input

	ToSnapshotCopyOutput() SnapshotCopyOutput
	ToSnapshotCopyOutputWithContext(ctx context.Context) SnapshotCopyOutput
}

func (*SnapshotCopy) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotCopy)(nil)).Elem()
}

func (i *SnapshotCopy) ToSnapshotCopyOutput() SnapshotCopyOutput {
	return i.ToSnapshotCopyOutputWithContext(context.Background())
}

func (i *SnapshotCopy) ToSnapshotCopyOutputWithContext(ctx context.Context) SnapshotCopyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotCopyOutput)
}

// SnapshotCopyArrayInput is an input type that accepts SnapshotCopyArray and SnapshotCopyArrayOutput values.
// You can construct a concrete instance of `SnapshotCopyArrayInput` via:
//
//	SnapshotCopyArray{ SnapshotCopyArgs{...} }
type SnapshotCopyArrayInput interface {
	pulumi.Input

	ToSnapshotCopyArrayOutput() SnapshotCopyArrayOutput
	ToSnapshotCopyArrayOutputWithContext(context.Context) SnapshotCopyArrayOutput
}

type SnapshotCopyArray []SnapshotCopyInput

func (SnapshotCopyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnapshotCopy)(nil)).Elem()
}

func (i SnapshotCopyArray) ToSnapshotCopyArrayOutput() SnapshotCopyArrayOutput {
	return i.ToSnapshotCopyArrayOutputWithContext(context.Background())
}

func (i SnapshotCopyArray) ToSnapshotCopyArrayOutputWithContext(ctx context.Context) SnapshotCopyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotCopyArrayOutput)
}

// SnapshotCopyMapInput is an input type that accepts SnapshotCopyMap and SnapshotCopyMapOutput values.
// You can construct a concrete instance of `SnapshotCopyMapInput` via:
//
//	SnapshotCopyMap{ "key": SnapshotCopyArgs{...} }
type SnapshotCopyMapInput interface {
	pulumi.Input

	ToSnapshotCopyMapOutput() SnapshotCopyMapOutput
	ToSnapshotCopyMapOutputWithContext(context.Context) SnapshotCopyMapOutput
}

type SnapshotCopyMap map[string]SnapshotCopyInput

func (SnapshotCopyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnapshotCopy)(nil)).Elem()
}

func (i SnapshotCopyMap) ToSnapshotCopyMapOutput() SnapshotCopyMapOutput {
	return i.ToSnapshotCopyMapOutputWithContext(context.Background())
}

func (i SnapshotCopyMap) ToSnapshotCopyMapOutputWithContext(ctx context.Context) SnapshotCopyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotCopyMapOutput)
}

type SnapshotCopyOutput struct{ *pulumi.OutputState }

func (SnapshotCopyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotCopy)(nil)).Elem()
}

func (o SnapshotCopyOutput) ToSnapshotCopyOutput() SnapshotCopyOutput {
	return o
}

func (o SnapshotCopyOutput) ToSnapshotCopyOutputWithContext(ctx context.Context) SnapshotCopyOutput {
	return o
}

func (o SnapshotCopyOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotCopy) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o SnapshotCopyOutput) DataEncryptionKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotCopy) pulumi.StringOutput { return v.DataEncryptionKeyId }).(pulumi.StringOutput)
}

func (o SnapshotCopyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotCopy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o SnapshotCopyOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnapshotCopy) pulumi.BoolPtrOutput { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

func (o SnapshotCopyOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotCopy) pulumi.StringPtrOutput { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

func (o SnapshotCopyOutput) OutpostArn() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotCopy) pulumi.StringOutput { return v.OutpostArn }).(pulumi.StringOutput)
}

func (o SnapshotCopyOutput) OwnerAlias() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotCopy) pulumi.StringOutput { return v.OwnerAlias }).(pulumi.StringOutput)
}

func (o SnapshotCopyOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotCopy) pulumi.StringOutput { return v.OwnerId }).(pulumi.StringOutput)
}

func (o SnapshotCopyOutput) PermanentRestore() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnapshotCopy) pulumi.BoolPtrOutput { return v.PermanentRestore }).(pulumi.BoolPtrOutput)
}

func (o SnapshotCopyOutput) SourceRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotCopy) pulumi.StringOutput { return v.SourceRegion }).(pulumi.StringOutput)
}

func (o SnapshotCopyOutput) SourceSnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotCopy) pulumi.StringOutput { return v.SourceSnapshotId }).(pulumi.StringOutput)
}

func (o SnapshotCopyOutput) StorageTier() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotCopy) pulumi.StringOutput { return v.StorageTier }).(pulumi.StringOutput)
}

func (o SnapshotCopyOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SnapshotCopy) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o SnapshotCopyOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SnapshotCopy) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o SnapshotCopyOutput) TemporaryRestoreDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SnapshotCopy) pulumi.IntPtrOutput { return v.TemporaryRestoreDays }).(pulumi.IntPtrOutput)
}

func (o SnapshotCopyOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotCopy) pulumi.StringOutput { return v.VolumeId }).(pulumi.StringOutput)
}

func (o SnapshotCopyOutput) VolumeSize() pulumi.IntOutput {
	return o.ApplyT(func(v *SnapshotCopy) pulumi.IntOutput { return v.VolumeSize }).(pulumi.IntOutput)
}

type SnapshotCopyArrayOutput struct{ *pulumi.OutputState }

func (SnapshotCopyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnapshotCopy)(nil)).Elem()
}

func (o SnapshotCopyArrayOutput) ToSnapshotCopyArrayOutput() SnapshotCopyArrayOutput {
	return o
}

func (o SnapshotCopyArrayOutput) ToSnapshotCopyArrayOutputWithContext(ctx context.Context) SnapshotCopyArrayOutput {
	return o
}

func (o SnapshotCopyArrayOutput) Index(i pulumi.IntInput) SnapshotCopyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SnapshotCopy {
		return vs[0].([]*SnapshotCopy)[vs[1].(int)]
	}).(SnapshotCopyOutput)
}

type SnapshotCopyMapOutput struct{ *pulumi.OutputState }

func (SnapshotCopyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnapshotCopy)(nil)).Elem()
}

func (o SnapshotCopyMapOutput) ToSnapshotCopyMapOutput() SnapshotCopyMapOutput {
	return o
}

func (o SnapshotCopyMapOutput) ToSnapshotCopyMapOutputWithContext(ctx context.Context) SnapshotCopyMapOutput {
	return o
}

func (o SnapshotCopyMapOutput) MapIndex(k pulumi.StringInput) SnapshotCopyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SnapshotCopy {
		return vs[0].(map[string]*SnapshotCopy)[vs[1].(string)]
	}).(SnapshotCopyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotCopyInput)(nil)).Elem(), &SnapshotCopy{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotCopyArrayInput)(nil)).Elem(), SnapshotCopyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotCopyMapInput)(nil)).Elem(), SnapshotCopyMap{})
	pulumi.RegisterOutputType(SnapshotCopyOutput{})
	pulumi.RegisterOutputType(SnapshotCopyArrayOutput{})
	pulumi.RegisterOutputType(SnapshotCopyMapOutput{})
}
