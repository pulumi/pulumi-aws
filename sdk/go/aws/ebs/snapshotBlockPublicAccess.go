// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ebs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ebs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ebs.NewSnapshotBlockPublicAccess(ctx, "example", &ebs.SnapshotBlockPublicAccessArgs{
//				State: pulumi.String("block-all-sharing"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import the state. For example:
//
// ```sh
// $ pulumi import aws:ebs/snapshotBlockPublicAccess:SnapshotBlockPublicAccess example default
// ```
type SnapshotBlockPublicAccess struct {
	pulumi.CustomResourceState

	// The mode in which to enable "Block public access for snapshots" for the region. Allowed values are `block-all-sharing`, `block-new-sharing`, `unblocked`.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewSnapshotBlockPublicAccess registers a new resource with the given unique name, arguments, and options.
func NewSnapshotBlockPublicAccess(ctx *pulumi.Context,
	name string, args *SnapshotBlockPublicAccessArgs, opts ...pulumi.ResourceOption) (*SnapshotBlockPublicAccess, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.State == nil {
		return nil, errors.New("invalid value for required argument 'State'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SnapshotBlockPublicAccess
	err := ctx.RegisterResource("aws:ebs/snapshotBlockPublicAccess:SnapshotBlockPublicAccess", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshotBlockPublicAccess gets an existing SnapshotBlockPublicAccess resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshotBlockPublicAccess(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnapshotBlockPublicAccessState, opts ...pulumi.ResourceOption) (*SnapshotBlockPublicAccess, error) {
	var resource SnapshotBlockPublicAccess
	err := ctx.ReadResource("aws:ebs/snapshotBlockPublicAccess:SnapshotBlockPublicAccess", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SnapshotBlockPublicAccess resources.
type snapshotBlockPublicAccessState struct {
	// The mode in which to enable "Block public access for snapshots" for the region. Allowed values are `block-all-sharing`, `block-new-sharing`, `unblocked`.
	State *string `pulumi:"state"`
}

type SnapshotBlockPublicAccessState struct {
	// The mode in which to enable "Block public access for snapshots" for the region. Allowed values are `block-all-sharing`, `block-new-sharing`, `unblocked`.
	State pulumi.StringPtrInput
}

func (SnapshotBlockPublicAccessState) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotBlockPublicAccessState)(nil)).Elem()
}

type snapshotBlockPublicAccessArgs struct {
	// The mode in which to enable "Block public access for snapshots" for the region. Allowed values are `block-all-sharing`, `block-new-sharing`, `unblocked`.
	State string `pulumi:"state"`
}

// The set of arguments for constructing a SnapshotBlockPublicAccess resource.
type SnapshotBlockPublicAccessArgs struct {
	// The mode in which to enable "Block public access for snapshots" for the region. Allowed values are `block-all-sharing`, `block-new-sharing`, `unblocked`.
	State pulumi.StringInput
}

func (SnapshotBlockPublicAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotBlockPublicAccessArgs)(nil)).Elem()
}

type SnapshotBlockPublicAccessInput interface {
	pulumi.Input

	ToSnapshotBlockPublicAccessOutput() SnapshotBlockPublicAccessOutput
	ToSnapshotBlockPublicAccessOutputWithContext(ctx context.Context) SnapshotBlockPublicAccessOutput
}

func (*SnapshotBlockPublicAccess) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotBlockPublicAccess)(nil)).Elem()
}

func (i *SnapshotBlockPublicAccess) ToSnapshotBlockPublicAccessOutput() SnapshotBlockPublicAccessOutput {
	return i.ToSnapshotBlockPublicAccessOutputWithContext(context.Background())
}

func (i *SnapshotBlockPublicAccess) ToSnapshotBlockPublicAccessOutputWithContext(ctx context.Context) SnapshotBlockPublicAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotBlockPublicAccessOutput)
}

// SnapshotBlockPublicAccessArrayInput is an input type that accepts SnapshotBlockPublicAccessArray and SnapshotBlockPublicAccessArrayOutput values.
// You can construct a concrete instance of `SnapshotBlockPublicAccessArrayInput` via:
//
//	SnapshotBlockPublicAccessArray{ SnapshotBlockPublicAccessArgs{...} }
type SnapshotBlockPublicAccessArrayInput interface {
	pulumi.Input

	ToSnapshotBlockPublicAccessArrayOutput() SnapshotBlockPublicAccessArrayOutput
	ToSnapshotBlockPublicAccessArrayOutputWithContext(context.Context) SnapshotBlockPublicAccessArrayOutput
}

type SnapshotBlockPublicAccessArray []SnapshotBlockPublicAccessInput

func (SnapshotBlockPublicAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnapshotBlockPublicAccess)(nil)).Elem()
}

func (i SnapshotBlockPublicAccessArray) ToSnapshotBlockPublicAccessArrayOutput() SnapshotBlockPublicAccessArrayOutput {
	return i.ToSnapshotBlockPublicAccessArrayOutputWithContext(context.Background())
}

func (i SnapshotBlockPublicAccessArray) ToSnapshotBlockPublicAccessArrayOutputWithContext(ctx context.Context) SnapshotBlockPublicAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotBlockPublicAccessArrayOutput)
}

// SnapshotBlockPublicAccessMapInput is an input type that accepts SnapshotBlockPublicAccessMap and SnapshotBlockPublicAccessMapOutput values.
// You can construct a concrete instance of `SnapshotBlockPublicAccessMapInput` via:
//
//	SnapshotBlockPublicAccessMap{ "key": SnapshotBlockPublicAccessArgs{...} }
type SnapshotBlockPublicAccessMapInput interface {
	pulumi.Input

	ToSnapshotBlockPublicAccessMapOutput() SnapshotBlockPublicAccessMapOutput
	ToSnapshotBlockPublicAccessMapOutputWithContext(context.Context) SnapshotBlockPublicAccessMapOutput
}

type SnapshotBlockPublicAccessMap map[string]SnapshotBlockPublicAccessInput

func (SnapshotBlockPublicAccessMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnapshotBlockPublicAccess)(nil)).Elem()
}

func (i SnapshotBlockPublicAccessMap) ToSnapshotBlockPublicAccessMapOutput() SnapshotBlockPublicAccessMapOutput {
	return i.ToSnapshotBlockPublicAccessMapOutputWithContext(context.Background())
}

func (i SnapshotBlockPublicAccessMap) ToSnapshotBlockPublicAccessMapOutputWithContext(ctx context.Context) SnapshotBlockPublicAccessMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotBlockPublicAccessMapOutput)
}

type SnapshotBlockPublicAccessOutput struct{ *pulumi.OutputState }

func (SnapshotBlockPublicAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotBlockPublicAccess)(nil)).Elem()
}

func (o SnapshotBlockPublicAccessOutput) ToSnapshotBlockPublicAccessOutput() SnapshotBlockPublicAccessOutput {
	return o
}

func (o SnapshotBlockPublicAccessOutput) ToSnapshotBlockPublicAccessOutputWithContext(ctx context.Context) SnapshotBlockPublicAccessOutput {
	return o
}

// The mode in which to enable "Block public access for snapshots" for the region. Allowed values are `block-all-sharing`, `block-new-sharing`, `unblocked`.
func (o SnapshotBlockPublicAccessOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotBlockPublicAccess) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

type SnapshotBlockPublicAccessArrayOutput struct{ *pulumi.OutputState }

func (SnapshotBlockPublicAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnapshotBlockPublicAccess)(nil)).Elem()
}

func (o SnapshotBlockPublicAccessArrayOutput) ToSnapshotBlockPublicAccessArrayOutput() SnapshotBlockPublicAccessArrayOutput {
	return o
}

func (o SnapshotBlockPublicAccessArrayOutput) ToSnapshotBlockPublicAccessArrayOutputWithContext(ctx context.Context) SnapshotBlockPublicAccessArrayOutput {
	return o
}

func (o SnapshotBlockPublicAccessArrayOutput) Index(i pulumi.IntInput) SnapshotBlockPublicAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SnapshotBlockPublicAccess {
		return vs[0].([]*SnapshotBlockPublicAccess)[vs[1].(int)]
	}).(SnapshotBlockPublicAccessOutput)
}

type SnapshotBlockPublicAccessMapOutput struct{ *pulumi.OutputState }

func (SnapshotBlockPublicAccessMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnapshotBlockPublicAccess)(nil)).Elem()
}

func (o SnapshotBlockPublicAccessMapOutput) ToSnapshotBlockPublicAccessMapOutput() SnapshotBlockPublicAccessMapOutput {
	return o
}

func (o SnapshotBlockPublicAccessMapOutput) ToSnapshotBlockPublicAccessMapOutputWithContext(ctx context.Context) SnapshotBlockPublicAccessMapOutput {
	return o
}

func (o SnapshotBlockPublicAccessMapOutput) MapIndex(k pulumi.StringInput) SnapshotBlockPublicAccessOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SnapshotBlockPublicAccess {
		return vs[0].(map[string]*SnapshotBlockPublicAccess)[vs[1].(string)]
	}).(SnapshotBlockPublicAccessOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotBlockPublicAccessInput)(nil)).Elem(), &SnapshotBlockPublicAccess{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotBlockPublicAccessArrayInput)(nil)).Elem(), SnapshotBlockPublicAccessArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotBlockPublicAccessMapInput)(nil)).Elem(), SnapshotBlockPublicAccessMap{})
	pulumi.RegisterOutputType(SnapshotBlockPublicAccessOutput{})
	pulumi.RegisterOutputType(SnapshotBlockPublicAccessArrayOutput{})
	pulumi.RegisterOutputType(SnapshotBlockPublicAccessMapOutput{})
}
