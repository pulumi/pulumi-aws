// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package transfer

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Access struct {
	pulumi.CustomResourceState

	ExternalId            pulumi.StringOutput                   `pulumi:"externalId"`
	HomeDirectory         pulumi.StringPtrOutput                `pulumi:"homeDirectory"`
	HomeDirectoryMappings AccessHomeDirectoryMappingArrayOutput `pulumi:"homeDirectoryMappings"`
	HomeDirectoryType     pulumi.StringPtrOutput                `pulumi:"homeDirectoryType"`
	Policy                pulumi.StringPtrOutput                `pulumi:"policy"`
	PosixProfile          AccessPosixProfilePtrOutput           `pulumi:"posixProfile"`
	Role                  pulumi.StringPtrOutput                `pulumi:"role"`
	ServerId              pulumi.StringOutput                   `pulumi:"serverId"`
}

// NewAccess registers a new resource with the given unique name, arguments, and options.
func NewAccess(ctx *pulumi.Context,
	name string, args *AccessArgs, opts ...pulumi.ResourceOption) (*Access, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExternalId == nil {
		return nil, errors.New("invalid value for required argument 'ExternalId'")
	}
	if args.ServerId == nil {
		return nil, errors.New("invalid value for required argument 'ServerId'")
	}
	var resource Access
	err := ctx.RegisterResource("aws:transfer/access:Access", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccess gets an existing Access resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccess(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessState, opts ...pulumi.ResourceOption) (*Access, error) {
	var resource Access
	err := ctx.ReadResource("aws:transfer/access:Access", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Access resources.
type accessState struct {
	ExternalId            *string                      `pulumi:"externalId"`
	HomeDirectory         *string                      `pulumi:"homeDirectory"`
	HomeDirectoryMappings []AccessHomeDirectoryMapping `pulumi:"homeDirectoryMappings"`
	HomeDirectoryType     *string                      `pulumi:"homeDirectoryType"`
	Policy                *string                      `pulumi:"policy"`
	PosixProfile          *AccessPosixProfile          `pulumi:"posixProfile"`
	Role                  *string                      `pulumi:"role"`
	ServerId              *string                      `pulumi:"serverId"`
}

type AccessState struct {
	ExternalId            pulumi.StringPtrInput
	HomeDirectory         pulumi.StringPtrInput
	HomeDirectoryMappings AccessHomeDirectoryMappingArrayInput
	HomeDirectoryType     pulumi.StringPtrInput
	Policy                pulumi.StringPtrInput
	PosixProfile          AccessPosixProfilePtrInput
	Role                  pulumi.StringPtrInput
	ServerId              pulumi.StringPtrInput
}

func (AccessState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessState)(nil)).Elem()
}

type accessArgs struct {
	ExternalId            string                       `pulumi:"externalId"`
	HomeDirectory         *string                      `pulumi:"homeDirectory"`
	HomeDirectoryMappings []AccessHomeDirectoryMapping `pulumi:"homeDirectoryMappings"`
	HomeDirectoryType     *string                      `pulumi:"homeDirectoryType"`
	Policy                *string                      `pulumi:"policy"`
	PosixProfile          *AccessPosixProfile          `pulumi:"posixProfile"`
	Role                  *string                      `pulumi:"role"`
	ServerId              string                       `pulumi:"serverId"`
}

// The set of arguments for constructing a Access resource.
type AccessArgs struct {
	ExternalId            pulumi.StringInput
	HomeDirectory         pulumi.StringPtrInput
	HomeDirectoryMappings AccessHomeDirectoryMappingArrayInput
	HomeDirectoryType     pulumi.StringPtrInput
	Policy                pulumi.StringPtrInput
	PosixProfile          AccessPosixProfilePtrInput
	Role                  pulumi.StringPtrInput
	ServerId              pulumi.StringInput
}

func (AccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessArgs)(nil)).Elem()
}

type AccessInput interface {
	pulumi.Input

	ToAccessOutput() AccessOutput
	ToAccessOutputWithContext(ctx context.Context) AccessOutput
}

func (*Access) ElementType() reflect.Type {
	return reflect.TypeOf((**Access)(nil)).Elem()
}

func (i *Access) ToAccessOutput() AccessOutput {
	return i.ToAccessOutputWithContext(context.Background())
}

func (i *Access) ToAccessOutputWithContext(ctx context.Context) AccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessOutput)
}

// AccessArrayInput is an input type that accepts AccessArray and AccessArrayOutput values.
// You can construct a concrete instance of `AccessArrayInput` via:
//
//	AccessArray{ AccessArgs{...} }
type AccessArrayInput interface {
	pulumi.Input

	ToAccessArrayOutput() AccessArrayOutput
	ToAccessArrayOutputWithContext(context.Context) AccessArrayOutput
}

type AccessArray []AccessInput

func (AccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Access)(nil)).Elem()
}

func (i AccessArray) ToAccessArrayOutput() AccessArrayOutput {
	return i.ToAccessArrayOutputWithContext(context.Background())
}

func (i AccessArray) ToAccessArrayOutputWithContext(ctx context.Context) AccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessArrayOutput)
}

// AccessMapInput is an input type that accepts AccessMap and AccessMapOutput values.
// You can construct a concrete instance of `AccessMapInput` via:
//
//	AccessMap{ "key": AccessArgs{...} }
type AccessMapInput interface {
	pulumi.Input

	ToAccessMapOutput() AccessMapOutput
	ToAccessMapOutputWithContext(context.Context) AccessMapOutput
}

type AccessMap map[string]AccessInput

func (AccessMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Access)(nil)).Elem()
}

func (i AccessMap) ToAccessMapOutput() AccessMapOutput {
	return i.ToAccessMapOutputWithContext(context.Background())
}

func (i AccessMap) ToAccessMapOutputWithContext(ctx context.Context) AccessMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessMapOutput)
}

type AccessOutput struct{ *pulumi.OutputState }

func (AccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Access)(nil)).Elem()
}

func (o AccessOutput) ToAccessOutput() AccessOutput {
	return o
}

func (o AccessOutput) ToAccessOutputWithContext(ctx context.Context) AccessOutput {
	return o
}

func (o AccessOutput) ExternalId() pulumi.StringOutput {
	return o.ApplyT(func(v *Access) pulumi.StringOutput { return v.ExternalId }).(pulumi.StringOutput)
}

func (o AccessOutput) HomeDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Access) pulumi.StringPtrOutput { return v.HomeDirectory }).(pulumi.StringPtrOutput)
}

func (o AccessOutput) HomeDirectoryMappings() AccessHomeDirectoryMappingArrayOutput {
	return o.ApplyT(func(v *Access) AccessHomeDirectoryMappingArrayOutput { return v.HomeDirectoryMappings }).(AccessHomeDirectoryMappingArrayOutput)
}

func (o AccessOutput) HomeDirectoryType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Access) pulumi.StringPtrOutput { return v.HomeDirectoryType }).(pulumi.StringPtrOutput)
}

func (o AccessOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Access) pulumi.StringPtrOutput { return v.Policy }).(pulumi.StringPtrOutput)
}

func (o AccessOutput) PosixProfile() AccessPosixProfilePtrOutput {
	return o.ApplyT(func(v *Access) AccessPosixProfilePtrOutput { return v.PosixProfile }).(AccessPosixProfilePtrOutput)
}

func (o AccessOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Access) pulumi.StringPtrOutput { return v.Role }).(pulumi.StringPtrOutput)
}

func (o AccessOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Access) pulumi.StringOutput { return v.ServerId }).(pulumi.StringOutput)
}

type AccessArrayOutput struct{ *pulumi.OutputState }

func (AccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Access)(nil)).Elem()
}

func (o AccessArrayOutput) ToAccessArrayOutput() AccessArrayOutput {
	return o
}

func (o AccessArrayOutput) ToAccessArrayOutputWithContext(ctx context.Context) AccessArrayOutput {
	return o
}

func (o AccessArrayOutput) Index(i pulumi.IntInput) AccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Access {
		return vs[0].([]*Access)[vs[1].(int)]
	}).(AccessOutput)
}

type AccessMapOutput struct{ *pulumi.OutputState }

func (AccessMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Access)(nil)).Elem()
}

func (o AccessMapOutput) ToAccessMapOutput() AccessMapOutput {
	return o
}

func (o AccessMapOutput) ToAccessMapOutputWithContext(ctx context.Context) AccessMapOutput {
	return o
}

func (o AccessMapOutput) MapIndex(k pulumi.StringInput) AccessOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Access {
		return vs[0].(map[string]*Access)[vs[1].(string)]
	}).(AccessOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessInput)(nil)).Elem(), &Access{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessArrayInput)(nil)).Elem(), AccessArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessMapInput)(nil)).Elem(), AccessMap{})
	pulumi.RegisterOutputType(AccessOutput{})
	pulumi.RegisterOutputType(AccessArrayOutput{})
	pulumi.RegisterOutputType(AccessMapOutput{})
}
