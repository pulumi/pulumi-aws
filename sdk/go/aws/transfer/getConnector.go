// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package transfer

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for managing an AWS Transfer Family Connector.
func LookupConnector(ctx *pulumi.Context, args *LookupConnectorArgs, opts ...pulumi.InvokeOption) (*LookupConnectorResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupConnectorResult
	err := ctx.Invoke("aws:transfer/getConnector:getConnector", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getConnector.
type LookupConnectorArgs struct {
	// Unique identifier for connector
	Id string `pulumi:"id"`
}

// A collection of values returned by getConnector.
type LookupConnectorResult struct {
	// ARN of the AWS Identity and Access Management role.
	AccessRole string `pulumi:"accessRole"`
	// ARN of the Connector.
	Arn string `pulumi:"arn"`
	// Structure containing the parameters for an AS2 connector object. Contains the following attributes:
	As2Configs []GetConnectorAs2Config `pulumi:"as2Configs"`
	Id         string                  `pulumi:"id"`
	// ARN of the IAM role that allows a connector to turn on CLoudwatch logging for Amazon S3 events.
	LoggingRole string `pulumi:"loggingRole"`
	// Name of security policy.
	SecurityPolicyName string `pulumi:"securityPolicyName"`
	// List of egress Ip addresses.
	ServiceManagedEgressIpAddresses []string `pulumi:"serviceManagedEgressIpAddresses"`
	// Object containing the following attributes:
	SftpConfigs []GetConnectorSftpConfig `pulumi:"sftpConfigs"`
	// Object containing the following attributes:
	Tags map[string]string `pulumi:"tags"`
	// URL of the partner's AS2 or SFTP endpoint.
	Url string `pulumi:"url"`
}

func LookupConnectorOutput(ctx *pulumi.Context, args LookupConnectorOutputArgs, opts ...pulumi.InvokeOption) LookupConnectorResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupConnectorResultOutput, error) {
			args := v.(LookupConnectorArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws:transfer/getConnector:getConnector", args, LookupConnectorResultOutput{}, options).(LookupConnectorResultOutput), nil
		}).(LookupConnectorResultOutput)
}

// A collection of arguments for invoking getConnector.
type LookupConnectorOutputArgs struct {
	// Unique identifier for connector
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupConnectorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectorArgs)(nil)).Elem()
}

// A collection of values returned by getConnector.
type LookupConnectorResultOutput struct{ *pulumi.OutputState }

func (LookupConnectorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectorResult)(nil)).Elem()
}

func (o LookupConnectorResultOutput) ToLookupConnectorResultOutput() LookupConnectorResultOutput {
	return o
}

func (o LookupConnectorResultOutput) ToLookupConnectorResultOutputWithContext(ctx context.Context) LookupConnectorResultOutput {
	return o
}

// ARN of the AWS Identity and Access Management role.
func (o LookupConnectorResultOutput) AccessRole() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectorResult) string { return v.AccessRole }).(pulumi.StringOutput)
}

// ARN of the Connector.
func (o LookupConnectorResultOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectorResult) string { return v.Arn }).(pulumi.StringOutput)
}

// Structure containing the parameters for an AS2 connector object. Contains the following attributes:
func (o LookupConnectorResultOutput) As2Configs() GetConnectorAs2ConfigArrayOutput {
	return o.ApplyT(func(v LookupConnectorResult) []GetConnectorAs2Config { return v.As2Configs }).(GetConnectorAs2ConfigArrayOutput)
}

func (o LookupConnectorResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectorResult) string { return v.Id }).(pulumi.StringOutput)
}

// ARN of the IAM role that allows a connector to turn on CLoudwatch logging for Amazon S3 events.
func (o LookupConnectorResultOutput) LoggingRole() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectorResult) string { return v.LoggingRole }).(pulumi.StringOutput)
}

// Name of security policy.
func (o LookupConnectorResultOutput) SecurityPolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectorResult) string { return v.SecurityPolicyName }).(pulumi.StringOutput)
}

// List of egress Ip addresses.
func (o LookupConnectorResultOutput) ServiceManagedEgressIpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupConnectorResult) []string { return v.ServiceManagedEgressIpAddresses }).(pulumi.StringArrayOutput)
}

// Object containing the following attributes:
func (o LookupConnectorResultOutput) SftpConfigs() GetConnectorSftpConfigArrayOutput {
	return o.ApplyT(func(v LookupConnectorResult) []GetConnectorSftpConfig { return v.SftpConfigs }).(GetConnectorSftpConfigArrayOutput)
}

// Object containing the following attributes:
func (o LookupConnectorResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupConnectorResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// URL of the partner's AS2 or SFTP endpoint.
func (o LookupConnectorResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectorResult) string { return v.Url }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupConnectorResultOutput{})
}
