// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package transfer

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a AWS Transfer Server resource.
type Server struct {
	s *pulumi.ResourceState
}

// NewServer registers a new resource with the given unique name, arguments, and options.
func NewServer(ctx *pulumi.Context,
	name string, args *ServerArgs, opts ...pulumi.ResourceOpt) (*Server, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["endpointDetails"] = nil
		inputs["endpointType"] = nil
		inputs["forceDestroy"] = nil
		inputs["identityProviderType"] = nil
		inputs["invocationRole"] = nil
		inputs["loggingRole"] = nil
		inputs["tags"] = nil
		inputs["url"] = nil
	} else {
		inputs["endpointDetails"] = args.EndpointDetails
		inputs["endpointType"] = args.EndpointType
		inputs["forceDestroy"] = args.ForceDestroy
		inputs["identityProviderType"] = args.IdentityProviderType
		inputs["invocationRole"] = args.InvocationRole
		inputs["loggingRole"] = args.LoggingRole
		inputs["tags"] = args.Tags
		inputs["url"] = args.Url
	}
	inputs["arn"] = nil
	inputs["endpoint"] = nil
	s, err := ctx.RegisterResource("aws:transfer/server:Server", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Server{s: s}, nil
}

// GetServer gets an existing Server resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServer(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ServerState, opts ...pulumi.ResourceOpt) (*Server, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["endpoint"] = state.Endpoint
		inputs["endpointDetails"] = state.EndpointDetails
		inputs["endpointType"] = state.EndpointType
		inputs["forceDestroy"] = state.ForceDestroy
		inputs["identityProviderType"] = state.IdentityProviderType
		inputs["invocationRole"] = state.InvocationRole
		inputs["loggingRole"] = state.LoggingRole
		inputs["tags"] = state.Tags
		inputs["url"] = state.Url
	}
	s, err := ctx.ReadResource("aws:transfer/server:Server", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Server{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Server) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Server) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Amazon Resource Name (ARN) of Transfer Server
func (r *Server) Arn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["arn"])
}

// The endpoint of the Transfer Server (e.g. `s-12345678.server.transfer.REGION.amazonaws.com`)
func (r *Server) Endpoint() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["endpoint"])
}

// The virtual private cloud (VPC) endpoint settings that you want to configure for your SFTP server. Fields documented below.
func (r *Server) EndpointDetails() *pulumi.Output {
	return r.s.State["endpointDetails"]
}

// The type of endpoint that you want your SFTP server connect to. If you connect to a `VPC_ENDPOINT`, your SFTP server isn't accessible over the public internet. If you want to connect your SFTP server via public internet, set `PUBLIC`.
func (r *Server) EndpointType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["endpointType"])
}

// A boolean that indicates all users associated with the server should be deleted so that the Server can be destroyed without error. The default value is `false`.
func (r *Server) ForceDestroy() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["forceDestroy"])
}

// The mode of authentication enabled for this service. The default value is `SERVICE_MANAGED`, which allows you to store and access SFTP user credentials within the service. `API_GATEWAY` indicates that user authentication requires a call to an API Gateway endpoint URL provided by you to integrate an identity provider of your choice.
func (r *Server) IdentityProviderType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["identityProviderType"])
}

// Amazon Resource Name (ARN) of the IAM role used to authenticate the user account with an `identity_provider_type` of `API_GATEWAY`.
func (r *Server) InvocationRole() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["invocationRole"])
}

// Amazon Resource Name (ARN) of an IAM role that allows the service to write your SFTP users’ activity to your Amazon CloudWatch logs for monitoring and auditing purposes.
func (r *Server) LoggingRole() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["loggingRole"])
}

// A mapping of tags to assign to the resource.
func (r *Server) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// - URL of the service endpoint used to authenticate users with an `identity_provider_type` of `API_GATEWAY`.
func (r *Server) Url() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["url"])
}

// Input properties used for looking up and filtering Server resources.
type ServerState struct {
	// Amazon Resource Name (ARN) of Transfer Server
	Arn interface{}
	// The endpoint of the Transfer Server (e.g. `s-12345678.server.transfer.REGION.amazonaws.com`)
	Endpoint interface{}
	// The virtual private cloud (VPC) endpoint settings that you want to configure for your SFTP server. Fields documented below.
	EndpointDetails interface{}
	// The type of endpoint that you want your SFTP server connect to. If you connect to a `VPC_ENDPOINT`, your SFTP server isn't accessible over the public internet. If you want to connect your SFTP server via public internet, set `PUBLIC`.
	EndpointType interface{}
	// A boolean that indicates all users associated with the server should be deleted so that the Server can be destroyed without error. The default value is `false`.
	ForceDestroy interface{}
	// The mode of authentication enabled for this service. The default value is `SERVICE_MANAGED`, which allows you to store and access SFTP user credentials within the service. `API_GATEWAY` indicates that user authentication requires a call to an API Gateway endpoint URL provided by you to integrate an identity provider of your choice.
	IdentityProviderType interface{}
	// Amazon Resource Name (ARN) of the IAM role used to authenticate the user account with an `identity_provider_type` of `API_GATEWAY`.
	InvocationRole interface{}
	// Amazon Resource Name (ARN) of an IAM role that allows the service to write your SFTP users’ activity to your Amazon CloudWatch logs for monitoring and auditing purposes.
	LoggingRole interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// - URL of the service endpoint used to authenticate users with an `identity_provider_type` of `API_GATEWAY`.
	Url interface{}
}

// The set of arguments for constructing a Server resource.
type ServerArgs struct {
	// The virtual private cloud (VPC) endpoint settings that you want to configure for your SFTP server. Fields documented below.
	EndpointDetails interface{}
	// The type of endpoint that you want your SFTP server connect to. If you connect to a `VPC_ENDPOINT`, your SFTP server isn't accessible over the public internet. If you want to connect your SFTP server via public internet, set `PUBLIC`.
	EndpointType interface{}
	// A boolean that indicates all users associated with the server should be deleted so that the Server can be destroyed without error. The default value is `false`.
	ForceDestroy interface{}
	// The mode of authentication enabled for this service. The default value is `SERVICE_MANAGED`, which allows you to store and access SFTP user credentials within the service. `API_GATEWAY` indicates that user authentication requires a call to an API Gateway endpoint URL provided by you to integrate an identity provider of your choice.
	IdentityProviderType interface{}
	// Amazon Resource Name (ARN) of the IAM role used to authenticate the user account with an `identity_provider_type` of `API_GATEWAY`.
	InvocationRole interface{}
	// Amazon Resource Name (ARN) of an IAM role that allows the service to write your SFTP users’ activity to your Amazon CloudWatch logs for monitoring and auditing purposes.
	LoggingRole interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// - URL of the service endpoint used to authenticate users with an `identity_provider_type` of `API_GATEWAY`.
	Url interface{}
}
