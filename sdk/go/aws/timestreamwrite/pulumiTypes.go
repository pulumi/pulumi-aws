// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package timestreamwrite

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type TableMagneticStoreWriteProperties struct {
	// A flag to enable magnetic store writes.
	EnableMagneticStoreWrites *bool `pulumi:"enableMagneticStoreWrites"`
	// The location to write error reports for records rejected asynchronously during magnetic store writes. See Magnetic Store Rejected Data Location below for more details.
	MagneticStoreRejectedDataLocation *TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocation `pulumi:"magneticStoreRejectedDataLocation"`
}

// TableMagneticStoreWritePropertiesInput is an input type that accepts TableMagneticStoreWritePropertiesArgs and TableMagneticStoreWritePropertiesOutput values.
// You can construct a concrete instance of `TableMagneticStoreWritePropertiesInput` via:
//
//	TableMagneticStoreWritePropertiesArgs{...}
type TableMagneticStoreWritePropertiesInput interface {
	pulumi.Input

	ToTableMagneticStoreWritePropertiesOutput() TableMagneticStoreWritePropertiesOutput
	ToTableMagneticStoreWritePropertiesOutputWithContext(context.Context) TableMagneticStoreWritePropertiesOutput
}

type TableMagneticStoreWritePropertiesArgs struct {
	// A flag to enable magnetic store writes.
	EnableMagneticStoreWrites pulumi.BoolPtrInput `pulumi:"enableMagneticStoreWrites"`
	// The location to write error reports for records rejected asynchronously during magnetic store writes. See Magnetic Store Rejected Data Location below for more details.
	MagneticStoreRejectedDataLocation TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrInput `pulumi:"magneticStoreRejectedDataLocation"`
}

func (TableMagneticStoreWritePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableMagneticStoreWriteProperties)(nil)).Elem()
}

func (i TableMagneticStoreWritePropertiesArgs) ToTableMagneticStoreWritePropertiesOutput() TableMagneticStoreWritePropertiesOutput {
	return i.ToTableMagneticStoreWritePropertiesOutputWithContext(context.Background())
}

func (i TableMagneticStoreWritePropertiesArgs) ToTableMagneticStoreWritePropertiesOutputWithContext(ctx context.Context) TableMagneticStoreWritePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableMagneticStoreWritePropertiesOutput)
}

func (i TableMagneticStoreWritePropertiesArgs) ToTableMagneticStoreWritePropertiesPtrOutput() TableMagneticStoreWritePropertiesPtrOutput {
	return i.ToTableMagneticStoreWritePropertiesPtrOutputWithContext(context.Background())
}

func (i TableMagneticStoreWritePropertiesArgs) ToTableMagneticStoreWritePropertiesPtrOutputWithContext(ctx context.Context) TableMagneticStoreWritePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableMagneticStoreWritePropertiesOutput).ToTableMagneticStoreWritePropertiesPtrOutputWithContext(ctx)
}

// TableMagneticStoreWritePropertiesPtrInput is an input type that accepts TableMagneticStoreWritePropertiesArgs, TableMagneticStoreWritePropertiesPtr and TableMagneticStoreWritePropertiesPtrOutput values.
// You can construct a concrete instance of `TableMagneticStoreWritePropertiesPtrInput` via:
//
//	        TableMagneticStoreWritePropertiesArgs{...}
//
//	or:
//
//	        nil
type TableMagneticStoreWritePropertiesPtrInput interface {
	pulumi.Input

	ToTableMagneticStoreWritePropertiesPtrOutput() TableMagneticStoreWritePropertiesPtrOutput
	ToTableMagneticStoreWritePropertiesPtrOutputWithContext(context.Context) TableMagneticStoreWritePropertiesPtrOutput
}

type tableMagneticStoreWritePropertiesPtrType TableMagneticStoreWritePropertiesArgs

func TableMagneticStoreWritePropertiesPtr(v *TableMagneticStoreWritePropertiesArgs) TableMagneticStoreWritePropertiesPtrInput {
	return (*tableMagneticStoreWritePropertiesPtrType)(v)
}

func (*tableMagneticStoreWritePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableMagneticStoreWriteProperties)(nil)).Elem()
}

func (i *tableMagneticStoreWritePropertiesPtrType) ToTableMagneticStoreWritePropertiesPtrOutput() TableMagneticStoreWritePropertiesPtrOutput {
	return i.ToTableMagneticStoreWritePropertiesPtrOutputWithContext(context.Background())
}

func (i *tableMagneticStoreWritePropertiesPtrType) ToTableMagneticStoreWritePropertiesPtrOutputWithContext(ctx context.Context) TableMagneticStoreWritePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableMagneticStoreWritePropertiesPtrOutput)
}

type TableMagneticStoreWritePropertiesOutput struct{ *pulumi.OutputState }

func (TableMagneticStoreWritePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableMagneticStoreWriteProperties)(nil)).Elem()
}

func (o TableMagneticStoreWritePropertiesOutput) ToTableMagneticStoreWritePropertiesOutput() TableMagneticStoreWritePropertiesOutput {
	return o
}

func (o TableMagneticStoreWritePropertiesOutput) ToTableMagneticStoreWritePropertiesOutputWithContext(ctx context.Context) TableMagneticStoreWritePropertiesOutput {
	return o
}

func (o TableMagneticStoreWritePropertiesOutput) ToTableMagneticStoreWritePropertiesPtrOutput() TableMagneticStoreWritePropertiesPtrOutput {
	return o.ToTableMagneticStoreWritePropertiesPtrOutputWithContext(context.Background())
}

func (o TableMagneticStoreWritePropertiesOutput) ToTableMagneticStoreWritePropertiesPtrOutputWithContext(ctx context.Context) TableMagneticStoreWritePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableMagneticStoreWriteProperties) *TableMagneticStoreWriteProperties {
		return &v
	}).(TableMagneticStoreWritePropertiesPtrOutput)
}

// A flag to enable magnetic store writes.
func (o TableMagneticStoreWritePropertiesOutput) EnableMagneticStoreWrites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableMagneticStoreWriteProperties) *bool { return v.EnableMagneticStoreWrites }).(pulumi.BoolPtrOutput)
}

// The location to write error reports for records rejected asynchronously during magnetic store writes. See Magnetic Store Rejected Data Location below for more details.
func (o TableMagneticStoreWritePropertiesOutput) MagneticStoreRejectedDataLocation() TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutput {
	return o.ApplyT(func(v TableMagneticStoreWriteProperties) *TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocation {
		return v.MagneticStoreRejectedDataLocation
	}).(TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutput)
}

type TableMagneticStoreWritePropertiesPtrOutput struct{ *pulumi.OutputState }

func (TableMagneticStoreWritePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableMagneticStoreWriteProperties)(nil)).Elem()
}

func (o TableMagneticStoreWritePropertiesPtrOutput) ToTableMagneticStoreWritePropertiesPtrOutput() TableMagneticStoreWritePropertiesPtrOutput {
	return o
}

func (o TableMagneticStoreWritePropertiesPtrOutput) ToTableMagneticStoreWritePropertiesPtrOutputWithContext(ctx context.Context) TableMagneticStoreWritePropertiesPtrOutput {
	return o
}

func (o TableMagneticStoreWritePropertiesPtrOutput) Elem() TableMagneticStoreWritePropertiesOutput {
	return o.ApplyT(func(v *TableMagneticStoreWriteProperties) TableMagneticStoreWriteProperties {
		if v != nil {
			return *v
		}
		var ret TableMagneticStoreWriteProperties
		return ret
	}).(TableMagneticStoreWritePropertiesOutput)
}

// A flag to enable magnetic store writes.
func (o TableMagneticStoreWritePropertiesPtrOutput) EnableMagneticStoreWrites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableMagneticStoreWriteProperties) *bool {
		if v == nil {
			return nil
		}
		return v.EnableMagneticStoreWrites
	}).(pulumi.BoolPtrOutput)
}

// The location to write error reports for records rejected asynchronously during magnetic store writes. See Magnetic Store Rejected Data Location below for more details.
func (o TableMagneticStoreWritePropertiesPtrOutput) MagneticStoreRejectedDataLocation() TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutput {
	return o.ApplyT(func(v *TableMagneticStoreWriteProperties) *TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocation {
		if v == nil {
			return nil
		}
		return v.MagneticStoreRejectedDataLocation
	}).(TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutput)
}

type TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocation struct {
	// Configuration of an S3 location to write error reports for records rejected, asynchronously, during magnetic store writes. See S3 Configuration below for more details.
	S3Configuration *TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration `pulumi:"s3Configuration"`
}

// TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationInput is an input type that accepts TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationArgs and TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput values.
// You can construct a concrete instance of `TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationInput` via:
//
//	TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationArgs{...}
type TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationInput interface {
	pulumi.Input

	ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput() TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput
	ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutputWithContext(context.Context) TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput
}

type TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationArgs struct {
	// Configuration of an S3 location to write error reports for records rejected, asynchronously, during magnetic store writes. See S3 Configuration below for more details.
	S3Configuration TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrInput `pulumi:"s3Configuration"`
}

func (TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocation)(nil)).Elem()
}

func (i TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationArgs) ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput() TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput {
	return i.ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutputWithContext(context.Background())
}

func (i TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationArgs) ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutputWithContext(ctx context.Context) TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput)
}

func (i TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationArgs) ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutput() TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutput {
	return i.ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutputWithContext(context.Background())
}

func (i TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationArgs) ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutputWithContext(ctx context.Context) TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput).ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutputWithContext(ctx)
}

// TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrInput is an input type that accepts TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationArgs, TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtr and TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutput values.
// You can construct a concrete instance of `TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrInput` via:
//
//	        TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationArgs{...}
//
//	or:
//
//	        nil
type TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrInput interface {
	pulumi.Input

	ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutput() TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutput
	ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutputWithContext(context.Context) TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutput
}

type tableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrType TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationArgs

func TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtr(v *TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationArgs) TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrInput {
	return (*tableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrType)(v)
}

func (*tableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocation)(nil)).Elem()
}

func (i *tableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrType) ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutput() TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutput {
	return i.ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutputWithContext(context.Background())
}

func (i *tableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrType) ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutputWithContext(ctx context.Context) TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutput)
}

type TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput struct{ *pulumi.OutputState }

func (TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocation)(nil)).Elem()
}

func (o TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput) ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput() TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput {
	return o
}

func (o TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput) ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutputWithContext(ctx context.Context) TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput {
	return o
}

func (o TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput) ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutput() TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutput {
	return o.ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutputWithContext(context.Background())
}

func (o TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput) ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutputWithContext(ctx context.Context) TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocation) *TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocation {
		return &v
	}).(TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutput)
}

// Configuration of an S3 location to write error reports for records rejected, asynchronously, during magnetic store writes. See S3 Configuration below for more details.
func (o TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput) S3Configuration() TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutput {
	return o.ApplyT(func(v TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocation) *TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration {
		return v.S3Configuration
	}).(TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutput)
}

type TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutput struct{ *pulumi.OutputState }

func (TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocation)(nil)).Elem()
}

func (o TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutput) ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutput() TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutput {
	return o
}

func (o TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutput) ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutputWithContext(ctx context.Context) TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutput {
	return o
}

func (o TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutput) Elem() TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput {
	return o.ApplyT(func(v *TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocation) TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocation {
		if v != nil {
			return *v
		}
		var ret TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocation
		return ret
	}).(TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput)
}

// Configuration of an S3 location to write error reports for records rejected, asynchronously, during magnetic store writes. See S3 Configuration below for more details.
func (o TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutput) S3Configuration() TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutput {
	return o.ApplyT(func(v *TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocation) *TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration {
		if v == nil {
			return nil
		}
		return v.S3Configuration
	}).(TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutput)
}

type TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration struct {
	// Bucket name of the customer S3 bucket.
	BucketName *string `pulumi:"bucketName"`
	// Encryption option for the customer s3 location. Options are S3 server side encryption with an S3-managed key or KMS managed key. Valid values are `SSE_KMS` and `SSE_S3`.
	EncryptionOption *string `pulumi:"encryptionOption"`
	// KMS key arn for the customer s3 location when encrypting with a KMS managed key.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Object key prefix for the customer S3 location.
	ObjectKeyPrefix *string `pulumi:"objectKeyPrefix"`
}

// TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationInput is an input type that accepts TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationArgs and TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput values.
// You can construct a concrete instance of `TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationInput` via:
//
//	TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationArgs{...}
type TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationInput interface {
	pulumi.Input

	ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput() TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput
	ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutputWithContext(context.Context) TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput
}

type TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationArgs struct {
	// Bucket name of the customer S3 bucket.
	BucketName pulumi.StringPtrInput `pulumi:"bucketName"`
	// Encryption option for the customer s3 location. Options are S3 server side encryption with an S3-managed key or KMS managed key. Valid values are `SSE_KMS` and `SSE_S3`.
	EncryptionOption pulumi.StringPtrInput `pulumi:"encryptionOption"`
	// KMS key arn for the customer s3 location when encrypting with a KMS managed key.
	KmsKeyId pulumi.StringPtrInput `pulumi:"kmsKeyId"`
	// Object key prefix for the customer S3 location.
	ObjectKeyPrefix pulumi.StringPtrInput `pulumi:"objectKeyPrefix"`
}

func (TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration)(nil)).Elem()
}

func (i TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationArgs) ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput() TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput {
	return i.ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutputWithContext(context.Background())
}

func (i TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationArgs) ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutputWithContext(ctx context.Context) TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput)
}

func (i TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationArgs) ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutput() TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutput {
	return i.ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutputWithContext(context.Background())
}

func (i TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationArgs) ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutputWithContext(ctx context.Context) TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput).ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutputWithContext(ctx)
}

// TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrInput is an input type that accepts TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationArgs, TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtr and TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutput values.
// You can construct a concrete instance of `TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrInput` via:
//
//	        TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationArgs{...}
//
//	or:
//
//	        nil
type TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrInput interface {
	pulumi.Input

	ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutput() TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutput
	ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutputWithContext(context.Context) TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutput
}

type tableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrType TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationArgs

func TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtr(v *TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationArgs) TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrInput {
	return (*tableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrType)(v)
}

func (*tableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration)(nil)).Elem()
}

func (i *tableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrType) ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutput() TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutput {
	return i.ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutputWithContext(context.Background())
}

func (i *tableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrType) ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutputWithContext(ctx context.Context) TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutput)
}

type TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput struct{ *pulumi.OutputState }

func (TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration)(nil)).Elem()
}

func (o TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput) ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput() TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput {
	return o
}

func (o TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput) ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutputWithContext(ctx context.Context) TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput {
	return o
}

func (o TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput) ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutput() TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutput {
	return o.ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutputWithContext(context.Background())
}

func (o TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput) ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutputWithContext(ctx context.Context) TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration) *TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration {
		return &v
	}).(TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutput)
}

// Bucket name of the customer S3 bucket.
func (o TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration) *string {
		return v.BucketName
	}).(pulumi.StringPtrOutput)
}

// Encryption option for the customer s3 location. Options are S3 server side encryption with an S3-managed key or KMS managed key. Valid values are `SSE_KMS` and `SSE_S3`.
func (o TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput) EncryptionOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration) *string {
		return v.EncryptionOption
	}).(pulumi.StringPtrOutput)
}

// KMS key arn for the customer s3 location when encrypting with a KMS managed key.
func (o TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration) *string {
		return v.KmsKeyId
	}).(pulumi.StringPtrOutput)
}

// Object key prefix for the customer S3 location.
func (o TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput) ObjectKeyPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration) *string {
		return v.ObjectKeyPrefix
	}).(pulumi.StringPtrOutput)
}

type TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration)(nil)).Elem()
}

func (o TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutput) ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutput() TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutput {
	return o
}

func (o TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutput) ToTableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutputWithContext(ctx context.Context) TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutput {
	return o
}

func (o TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutput) Elem() TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput {
	return o.ApplyT(func(v *TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration) TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration {
		if v != nil {
			return *v
		}
		var ret TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration
		return ret
	}).(TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput)
}

// Bucket name of the customer S3 bucket.
func (o TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration) *string {
		if v == nil {
			return nil
		}
		return v.BucketName
	}).(pulumi.StringPtrOutput)
}

// Encryption option for the customer s3 location. Options are S3 server side encryption with an S3-managed key or KMS managed key. Valid values are `SSE_KMS` and `SSE_S3`.
func (o TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutput) EncryptionOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration) *string {
		if v == nil {
			return nil
		}
		return v.EncryptionOption
	}).(pulumi.StringPtrOutput)
}

// KMS key arn for the customer s3 location when encrypting with a KMS managed key.
func (o TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyId
	}).(pulumi.StringPtrOutput)
}

// Object key prefix for the customer S3 location.
func (o TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutput) ObjectKeyPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3Configuration) *string {
		if v == nil {
			return nil
		}
		return v.ObjectKeyPrefix
	}).(pulumi.StringPtrOutput)
}

type TableRetentionProperties struct {
	// The duration for which data must be stored in the magnetic store. Minimum value of 1. Maximum value of 73000.
	MagneticStoreRetentionPeriodInDays int `pulumi:"magneticStoreRetentionPeriodInDays"`
	// The duration for which data must be stored in the memory store. Minimum value of 1. Maximum value of 8766.
	MemoryStoreRetentionPeriodInHours int `pulumi:"memoryStoreRetentionPeriodInHours"`
}

// TableRetentionPropertiesInput is an input type that accepts TableRetentionPropertiesArgs and TableRetentionPropertiesOutput values.
// You can construct a concrete instance of `TableRetentionPropertiesInput` via:
//
//	TableRetentionPropertiesArgs{...}
type TableRetentionPropertiesInput interface {
	pulumi.Input

	ToTableRetentionPropertiesOutput() TableRetentionPropertiesOutput
	ToTableRetentionPropertiesOutputWithContext(context.Context) TableRetentionPropertiesOutput
}

type TableRetentionPropertiesArgs struct {
	// The duration for which data must be stored in the magnetic store. Minimum value of 1. Maximum value of 73000.
	MagneticStoreRetentionPeriodInDays pulumi.IntInput `pulumi:"magneticStoreRetentionPeriodInDays"`
	// The duration for which data must be stored in the memory store. Minimum value of 1. Maximum value of 8766.
	MemoryStoreRetentionPeriodInHours pulumi.IntInput `pulumi:"memoryStoreRetentionPeriodInHours"`
}

func (TableRetentionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableRetentionProperties)(nil)).Elem()
}

func (i TableRetentionPropertiesArgs) ToTableRetentionPropertiesOutput() TableRetentionPropertiesOutput {
	return i.ToTableRetentionPropertiesOutputWithContext(context.Background())
}

func (i TableRetentionPropertiesArgs) ToTableRetentionPropertiesOutputWithContext(ctx context.Context) TableRetentionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableRetentionPropertiesOutput)
}

func (i TableRetentionPropertiesArgs) ToTableRetentionPropertiesPtrOutput() TableRetentionPropertiesPtrOutput {
	return i.ToTableRetentionPropertiesPtrOutputWithContext(context.Background())
}

func (i TableRetentionPropertiesArgs) ToTableRetentionPropertiesPtrOutputWithContext(ctx context.Context) TableRetentionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableRetentionPropertiesOutput).ToTableRetentionPropertiesPtrOutputWithContext(ctx)
}

// TableRetentionPropertiesPtrInput is an input type that accepts TableRetentionPropertiesArgs, TableRetentionPropertiesPtr and TableRetentionPropertiesPtrOutput values.
// You can construct a concrete instance of `TableRetentionPropertiesPtrInput` via:
//
//	        TableRetentionPropertiesArgs{...}
//
//	or:
//
//	        nil
type TableRetentionPropertiesPtrInput interface {
	pulumi.Input

	ToTableRetentionPropertiesPtrOutput() TableRetentionPropertiesPtrOutput
	ToTableRetentionPropertiesPtrOutputWithContext(context.Context) TableRetentionPropertiesPtrOutput
}

type tableRetentionPropertiesPtrType TableRetentionPropertiesArgs

func TableRetentionPropertiesPtr(v *TableRetentionPropertiesArgs) TableRetentionPropertiesPtrInput {
	return (*tableRetentionPropertiesPtrType)(v)
}

func (*tableRetentionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableRetentionProperties)(nil)).Elem()
}

func (i *tableRetentionPropertiesPtrType) ToTableRetentionPropertiesPtrOutput() TableRetentionPropertiesPtrOutput {
	return i.ToTableRetentionPropertiesPtrOutputWithContext(context.Background())
}

func (i *tableRetentionPropertiesPtrType) ToTableRetentionPropertiesPtrOutputWithContext(ctx context.Context) TableRetentionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableRetentionPropertiesPtrOutput)
}

type TableRetentionPropertiesOutput struct{ *pulumi.OutputState }

func (TableRetentionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableRetentionProperties)(nil)).Elem()
}

func (o TableRetentionPropertiesOutput) ToTableRetentionPropertiesOutput() TableRetentionPropertiesOutput {
	return o
}

func (o TableRetentionPropertiesOutput) ToTableRetentionPropertiesOutputWithContext(ctx context.Context) TableRetentionPropertiesOutput {
	return o
}

func (o TableRetentionPropertiesOutput) ToTableRetentionPropertiesPtrOutput() TableRetentionPropertiesPtrOutput {
	return o.ToTableRetentionPropertiesPtrOutputWithContext(context.Background())
}

func (o TableRetentionPropertiesOutput) ToTableRetentionPropertiesPtrOutputWithContext(ctx context.Context) TableRetentionPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableRetentionProperties) *TableRetentionProperties {
		return &v
	}).(TableRetentionPropertiesPtrOutput)
}

// The duration for which data must be stored in the magnetic store. Minimum value of 1. Maximum value of 73000.
func (o TableRetentionPropertiesOutput) MagneticStoreRetentionPeriodInDays() pulumi.IntOutput {
	return o.ApplyT(func(v TableRetentionProperties) int { return v.MagneticStoreRetentionPeriodInDays }).(pulumi.IntOutput)
}

// The duration for which data must be stored in the memory store. Minimum value of 1. Maximum value of 8766.
func (o TableRetentionPropertiesOutput) MemoryStoreRetentionPeriodInHours() pulumi.IntOutput {
	return o.ApplyT(func(v TableRetentionProperties) int { return v.MemoryStoreRetentionPeriodInHours }).(pulumi.IntOutput)
}

type TableRetentionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (TableRetentionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableRetentionProperties)(nil)).Elem()
}

func (o TableRetentionPropertiesPtrOutput) ToTableRetentionPropertiesPtrOutput() TableRetentionPropertiesPtrOutput {
	return o
}

func (o TableRetentionPropertiesPtrOutput) ToTableRetentionPropertiesPtrOutputWithContext(ctx context.Context) TableRetentionPropertiesPtrOutput {
	return o
}

func (o TableRetentionPropertiesPtrOutput) Elem() TableRetentionPropertiesOutput {
	return o.ApplyT(func(v *TableRetentionProperties) TableRetentionProperties {
		if v != nil {
			return *v
		}
		var ret TableRetentionProperties
		return ret
	}).(TableRetentionPropertiesOutput)
}

// The duration for which data must be stored in the magnetic store. Minimum value of 1. Maximum value of 73000.
func (o TableRetentionPropertiesPtrOutput) MagneticStoreRetentionPeriodInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableRetentionProperties) *int {
		if v == nil {
			return nil
		}
		return &v.MagneticStoreRetentionPeriodInDays
	}).(pulumi.IntPtrOutput)
}

// The duration for which data must be stored in the memory store. Minimum value of 1. Maximum value of 8766.
func (o TableRetentionPropertiesPtrOutput) MemoryStoreRetentionPeriodInHours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableRetentionProperties) *int {
		if v == nil {
			return nil
		}
		return &v.MemoryStoreRetentionPeriodInHours
	}).(pulumi.IntPtrOutput)
}

type TableSchema struct {
	// A non-empty list of partition keys defining the attributes used to partition the table data. The order of the list determines the partition hierarchy. The name and type of each partition key as well as the partition key order cannot be changed after the table is created. However, the enforcement level of each partition key can be changed. See Composite Partition Key below for more details.
	CompositePartitionKey *TableSchemaCompositePartitionKey `pulumi:"compositePartitionKey"`
}

// TableSchemaInput is an input type that accepts TableSchemaArgs and TableSchemaOutput values.
// You can construct a concrete instance of `TableSchemaInput` via:
//
//	TableSchemaArgs{...}
type TableSchemaInput interface {
	pulumi.Input

	ToTableSchemaOutput() TableSchemaOutput
	ToTableSchemaOutputWithContext(context.Context) TableSchemaOutput
}

type TableSchemaArgs struct {
	// A non-empty list of partition keys defining the attributes used to partition the table data. The order of the list determines the partition hierarchy. The name and type of each partition key as well as the partition key order cannot be changed after the table is created. However, the enforcement level of each partition key can be changed. See Composite Partition Key below for more details.
	CompositePartitionKey TableSchemaCompositePartitionKeyPtrInput `pulumi:"compositePartitionKey"`
}

func (TableSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchema)(nil)).Elem()
}

func (i TableSchemaArgs) ToTableSchemaOutput() TableSchemaOutput {
	return i.ToTableSchemaOutputWithContext(context.Background())
}

func (i TableSchemaArgs) ToTableSchemaOutputWithContext(ctx context.Context) TableSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaOutput)
}

func (i TableSchemaArgs) ToTableSchemaPtrOutput() TableSchemaPtrOutput {
	return i.ToTableSchemaPtrOutputWithContext(context.Background())
}

func (i TableSchemaArgs) ToTableSchemaPtrOutputWithContext(ctx context.Context) TableSchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaOutput).ToTableSchemaPtrOutputWithContext(ctx)
}

// TableSchemaPtrInput is an input type that accepts TableSchemaArgs, TableSchemaPtr and TableSchemaPtrOutput values.
// You can construct a concrete instance of `TableSchemaPtrInput` via:
//
//	        TableSchemaArgs{...}
//
//	or:
//
//	        nil
type TableSchemaPtrInput interface {
	pulumi.Input

	ToTableSchemaPtrOutput() TableSchemaPtrOutput
	ToTableSchemaPtrOutputWithContext(context.Context) TableSchemaPtrOutput
}

type tableSchemaPtrType TableSchemaArgs

func TableSchemaPtr(v *TableSchemaArgs) TableSchemaPtrInput {
	return (*tableSchemaPtrType)(v)
}

func (*tableSchemaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableSchema)(nil)).Elem()
}

func (i *tableSchemaPtrType) ToTableSchemaPtrOutput() TableSchemaPtrOutput {
	return i.ToTableSchemaPtrOutputWithContext(context.Background())
}

func (i *tableSchemaPtrType) ToTableSchemaPtrOutputWithContext(ctx context.Context) TableSchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaPtrOutput)
}

type TableSchemaOutput struct{ *pulumi.OutputState }

func (TableSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchema)(nil)).Elem()
}

func (o TableSchemaOutput) ToTableSchemaOutput() TableSchemaOutput {
	return o
}

func (o TableSchemaOutput) ToTableSchemaOutputWithContext(ctx context.Context) TableSchemaOutput {
	return o
}

func (o TableSchemaOutput) ToTableSchemaPtrOutput() TableSchemaPtrOutput {
	return o.ToTableSchemaPtrOutputWithContext(context.Background())
}

func (o TableSchemaOutput) ToTableSchemaPtrOutputWithContext(ctx context.Context) TableSchemaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableSchema) *TableSchema {
		return &v
	}).(TableSchemaPtrOutput)
}

// A non-empty list of partition keys defining the attributes used to partition the table data. The order of the list determines the partition hierarchy. The name and type of each partition key as well as the partition key order cannot be changed after the table is created. However, the enforcement level of each partition key can be changed. See Composite Partition Key below for more details.
func (o TableSchemaOutput) CompositePartitionKey() TableSchemaCompositePartitionKeyPtrOutput {
	return o.ApplyT(func(v TableSchema) *TableSchemaCompositePartitionKey { return v.CompositePartitionKey }).(TableSchemaCompositePartitionKeyPtrOutput)
}

type TableSchemaPtrOutput struct{ *pulumi.OutputState }

func (TableSchemaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableSchema)(nil)).Elem()
}

func (o TableSchemaPtrOutput) ToTableSchemaPtrOutput() TableSchemaPtrOutput {
	return o
}

func (o TableSchemaPtrOutput) ToTableSchemaPtrOutputWithContext(ctx context.Context) TableSchemaPtrOutput {
	return o
}

func (o TableSchemaPtrOutput) Elem() TableSchemaOutput {
	return o.ApplyT(func(v *TableSchema) TableSchema {
		if v != nil {
			return *v
		}
		var ret TableSchema
		return ret
	}).(TableSchemaOutput)
}

// A non-empty list of partition keys defining the attributes used to partition the table data. The order of the list determines the partition hierarchy. The name and type of each partition key as well as the partition key order cannot be changed after the table is created. However, the enforcement level of each partition key can be changed. See Composite Partition Key below for more details.
func (o TableSchemaPtrOutput) CompositePartitionKey() TableSchemaCompositePartitionKeyPtrOutput {
	return o.ApplyT(func(v *TableSchema) *TableSchemaCompositePartitionKey {
		if v == nil {
			return nil
		}
		return v.CompositePartitionKey
	}).(TableSchemaCompositePartitionKeyPtrOutput)
}

type TableSchemaCompositePartitionKey struct {
	// The level of enforcement for the specification of a dimension key in ingested records. Valid values: `REQUIRED`, `OPTIONAL`.
	EnforcementInRecord *string `pulumi:"enforcementInRecord"`
	// The name of the attribute used for a dimension key.
	Name *string `pulumi:"name"`
	// The type of the partition key. Valid values: `DIMENSION`, `MEASURE`.
	Type string `pulumi:"type"`
}

// TableSchemaCompositePartitionKeyInput is an input type that accepts TableSchemaCompositePartitionKeyArgs and TableSchemaCompositePartitionKeyOutput values.
// You can construct a concrete instance of `TableSchemaCompositePartitionKeyInput` via:
//
//	TableSchemaCompositePartitionKeyArgs{...}
type TableSchemaCompositePartitionKeyInput interface {
	pulumi.Input

	ToTableSchemaCompositePartitionKeyOutput() TableSchemaCompositePartitionKeyOutput
	ToTableSchemaCompositePartitionKeyOutputWithContext(context.Context) TableSchemaCompositePartitionKeyOutput
}

type TableSchemaCompositePartitionKeyArgs struct {
	// The level of enforcement for the specification of a dimension key in ingested records. Valid values: `REQUIRED`, `OPTIONAL`.
	EnforcementInRecord pulumi.StringPtrInput `pulumi:"enforcementInRecord"`
	// The name of the attribute used for a dimension key.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The type of the partition key. Valid values: `DIMENSION`, `MEASURE`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TableSchemaCompositePartitionKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchemaCompositePartitionKey)(nil)).Elem()
}

func (i TableSchemaCompositePartitionKeyArgs) ToTableSchemaCompositePartitionKeyOutput() TableSchemaCompositePartitionKeyOutput {
	return i.ToTableSchemaCompositePartitionKeyOutputWithContext(context.Background())
}

func (i TableSchemaCompositePartitionKeyArgs) ToTableSchemaCompositePartitionKeyOutputWithContext(ctx context.Context) TableSchemaCompositePartitionKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaCompositePartitionKeyOutput)
}

func (i TableSchemaCompositePartitionKeyArgs) ToTableSchemaCompositePartitionKeyPtrOutput() TableSchemaCompositePartitionKeyPtrOutput {
	return i.ToTableSchemaCompositePartitionKeyPtrOutputWithContext(context.Background())
}

func (i TableSchemaCompositePartitionKeyArgs) ToTableSchemaCompositePartitionKeyPtrOutputWithContext(ctx context.Context) TableSchemaCompositePartitionKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaCompositePartitionKeyOutput).ToTableSchemaCompositePartitionKeyPtrOutputWithContext(ctx)
}

// TableSchemaCompositePartitionKeyPtrInput is an input type that accepts TableSchemaCompositePartitionKeyArgs, TableSchemaCompositePartitionKeyPtr and TableSchemaCompositePartitionKeyPtrOutput values.
// You can construct a concrete instance of `TableSchemaCompositePartitionKeyPtrInput` via:
//
//	        TableSchemaCompositePartitionKeyArgs{...}
//
//	or:
//
//	        nil
type TableSchemaCompositePartitionKeyPtrInput interface {
	pulumi.Input

	ToTableSchemaCompositePartitionKeyPtrOutput() TableSchemaCompositePartitionKeyPtrOutput
	ToTableSchemaCompositePartitionKeyPtrOutputWithContext(context.Context) TableSchemaCompositePartitionKeyPtrOutput
}

type tableSchemaCompositePartitionKeyPtrType TableSchemaCompositePartitionKeyArgs

func TableSchemaCompositePartitionKeyPtr(v *TableSchemaCompositePartitionKeyArgs) TableSchemaCompositePartitionKeyPtrInput {
	return (*tableSchemaCompositePartitionKeyPtrType)(v)
}

func (*tableSchemaCompositePartitionKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableSchemaCompositePartitionKey)(nil)).Elem()
}

func (i *tableSchemaCompositePartitionKeyPtrType) ToTableSchemaCompositePartitionKeyPtrOutput() TableSchemaCompositePartitionKeyPtrOutput {
	return i.ToTableSchemaCompositePartitionKeyPtrOutputWithContext(context.Background())
}

func (i *tableSchemaCompositePartitionKeyPtrType) ToTableSchemaCompositePartitionKeyPtrOutputWithContext(ctx context.Context) TableSchemaCompositePartitionKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaCompositePartitionKeyPtrOutput)
}

type TableSchemaCompositePartitionKeyOutput struct{ *pulumi.OutputState }

func (TableSchemaCompositePartitionKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchemaCompositePartitionKey)(nil)).Elem()
}

func (o TableSchemaCompositePartitionKeyOutput) ToTableSchemaCompositePartitionKeyOutput() TableSchemaCompositePartitionKeyOutput {
	return o
}

func (o TableSchemaCompositePartitionKeyOutput) ToTableSchemaCompositePartitionKeyOutputWithContext(ctx context.Context) TableSchemaCompositePartitionKeyOutput {
	return o
}

func (o TableSchemaCompositePartitionKeyOutput) ToTableSchemaCompositePartitionKeyPtrOutput() TableSchemaCompositePartitionKeyPtrOutput {
	return o.ToTableSchemaCompositePartitionKeyPtrOutputWithContext(context.Background())
}

func (o TableSchemaCompositePartitionKeyOutput) ToTableSchemaCompositePartitionKeyPtrOutputWithContext(ctx context.Context) TableSchemaCompositePartitionKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableSchemaCompositePartitionKey) *TableSchemaCompositePartitionKey {
		return &v
	}).(TableSchemaCompositePartitionKeyPtrOutput)
}

// The level of enforcement for the specification of a dimension key in ingested records. Valid values: `REQUIRED`, `OPTIONAL`.
func (o TableSchemaCompositePartitionKeyOutput) EnforcementInRecord() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableSchemaCompositePartitionKey) *string { return v.EnforcementInRecord }).(pulumi.StringPtrOutput)
}

// The name of the attribute used for a dimension key.
func (o TableSchemaCompositePartitionKeyOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableSchemaCompositePartitionKey) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The type of the partition key. Valid values: `DIMENSION`, `MEASURE`.
func (o TableSchemaCompositePartitionKeyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TableSchemaCompositePartitionKey) string { return v.Type }).(pulumi.StringOutput)
}

type TableSchemaCompositePartitionKeyPtrOutput struct{ *pulumi.OutputState }

func (TableSchemaCompositePartitionKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableSchemaCompositePartitionKey)(nil)).Elem()
}

func (o TableSchemaCompositePartitionKeyPtrOutput) ToTableSchemaCompositePartitionKeyPtrOutput() TableSchemaCompositePartitionKeyPtrOutput {
	return o
}

func (o TableSchemaCompositePartitionKeyPtrOutput) ToTableSchemaCompositePartitionKeyPtrOutputWithContext(ctx context.Context) TableSchemaCompositePartitionKeyPtrOutput {
	return o
}

func (o TableSchemaCompositePartitionKeyPtrOutput) Elem() TableSchemaCompositePartitionKeyOutput {
	return o.ApplyT(func(v *TableSchemaCompositePartitionKey) TableSchemaCompositePartitionKey {
		if v != nil {
			return *v
		}
		var ret TableSchemaCompositePartitionKey
		return ret
	}).(TableSchemaCompositePartitionKeyOutput)
}

// The level of enforcement for the specification of a dimension key in ingested records. Valid values: `REQUIRED`, `OPTIONAL`.
func (o TableSchemaCompositePartitionKeyPtrOutput) EnforcementInRecord() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableSchemaCompositePartitionKey) *string {
		if v == nil {
			return nil
		}
		return v.EnforcementInRecord
	}).(pulumi.StringPtrOutput)
}

// The name of the attribute used for a dimension key.
func (o TableSchemaCompositePartitionKeyPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableSchemaCompositePartitionKey) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The type of the partition key. Valid values: `DIMENSION`, `MEASURE`.
func (o TableSchemaCompositePartitionKeyPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableSchemaCompositePartitionKey) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TableMagneticStoreWritePropertiesInput)(nil)).Elem(), TableMagneticStoreWritePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableMagneticStoreWritePropertiesPtrInput)(nil)).Elem(), TableMagneticStoreWritePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationInput)(nil)).Elem(), TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrInput)(nil)).Elem(), TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationInput)(nil)).Elem(), TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrInput)(nil)).Elem(), TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableRetentionPropertiesInput)(nil)).Elem(), TableRetentionPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableRetentionPropertiesPtrInput)(nil)).Elem(), TableRetentionPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableSchemaInput)(nil)).Elem(), TableSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableSchemaPtrInput)(nil)).Elem(), TableSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableSchemaCompositePartitionKeyInput)(nil)).Elem(), TableSchemaCompositePartitionKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableSchemaCompositePartitionKeyPtrInput)(nil)).Elem(), TableSchemaCompositePartitionKeyArgs{})
	pulumi.RegisterOutputType(TableMagneticStoreWritePropertiesOutput{})
	pulumi.RegisterOutputType(TableMagneticStoreWritePropertiesPtrOutput{})
	pulumi.RegisterOutputType(TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationOutput{})
	pulumi.RegisterOutputType(TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationPtrOutput{})
	pulumi.RegisterOutputType(TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationOutput{})
	pulumi.RegisterOutputType(TableMagneticStoreWritePropertiesMagneticStoreRejectedDataLocationS3ConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TableRetentionPropertiesOutput{})
	pulumi.RegisterOutputType(TableRetentionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(TableSchemaOutput{})
	pulumi.RegisterOutputType(TableSchemaPtrOutput{})
	pulumi.RegisterOutputType(TableSchemaCompositePartitionKeyOutput{})
	pulumi.RegisterOutputType(TableSchemaCompositePartitionKeyPtrOutput{})
}
