// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package macie

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FindingsFilter struct {
	pulumi.CustomResourceState

	Action          pulumi.StringOutput                 `pulumi:"action"`
	Arn             pulumi.StringOutput                 `pulumi:"arn"`
	Description     pulumi.StringPtrOutput              `pulumi:"description"`
	FindingCriteria FindingsFilterFindingCriteriaOutput `pulumi:"findingCriteria"`
	Name            pulumi.StringOutput                 `pulumi:"name"`
	NamePrefix      pulumi.StringOutput                 `pulumi:"namePrefix"`
	Position        pulumi.IntOutput                    `pulumi:"position"`
	Tags            pulumi.StringMapOutput              `pulumi:"tags"`
	TagsAll         pulumi.StringMapOutput              `pulumi:"tagsAll"`
}

// NewFindingsFilter registers a new resource with the given unique name, arguments, and options.
func NewFindingsFilter(ctx *pulumi.Context,
	name string, args *FindingsFilterArgs, opts ...pulumi.ResourceOption) (*FindingsFilter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.FindingCriteria == nil {
		return nil, errors.New("invalid value for required argument 'FindingCriteria'")
	}
	var resource FindingsFilter
	err := ctx.RegisterResource("aws:macie/findingsFilter:FindingsFilter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFindingsFilter gets an existing FindingsFilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFindingsFilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FindingsFilterState, opts ...pulumi.ResourceOption) (*FindingsFilter, error) {
	var resource FindingsFilter
	err := ctx.ReadResource("aws:macie/findingsFilter:FindingsFilter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FindingsFilter resources.
type findingsFilterState struct {
	Action          *string                        `pulumi:"action"`
	Arn             *string                        `pulumi:"arn"`
	Description     *string                        `pulumi:"description"`
	FindingCriteria *FindingsFilterFindingCriteria `pulumi:"findingCriteria"`
	Name            *string                        `pulumi:"name"`
	NamePrefix      *string                        `pulumi:"namePrefix"`
	Position        *int                           `pulumi:"position"`
	Tags            map[string]string              `pulumi:"tags"`
	TagsAll         map[string]string              `pulumi:"tagsAll"`
}

type FindingsFilterState struct {
	Action          pulumi.StringPtrInput
	Arn             pulumi.StringPtrInput
	Description     pulumi.StringPtrInput
	FindingCriteria FindingsFilterFindingCriteriaPtrInput
	Name            pulumi.StringPtrInput
	NamePrefix      pulumi.StringPtrInput
	Position        pulumi.IntPtrInput
	Tags            pulumi.StringMapInput
	TagsAll         pulumi.StringMapInput
}

func (FindingsFilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*findingsFilterState)(nil)).Elem()
}

type findingsFilterArgs struct {
	Action          string                        `pulumi:"action"`
	Description     *string                       `pulumi:"description"`
	FindingCriteria FindingsFilterFindingCriteria `pulumi:"findingCriteria"`
	Name            *string                       `pulumi:"name"`
	NamePrefix      *string                       `pulumi:"namePrefix"`
	Position        *int                          `pulumi:"position"`
	Tags            map[string]string             `pulumi:"tags"`
}

// The set of arguments for constructing a FindingsFilter resource.
type FindingsFilterArgs struct {
	Action          pulumi.StringInput
	Description     pulumi.StringPtrInput
	FindingCriteria FindingsFilterFindingCriteriaInput
	Name            pulumi.StringPtrInput
	NamePrefix      pulumi.StringPtrInput
	Position        pulumi.IntPtrInput
	Tags            pulumi.StringMapInput
}

func (FindingsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*findingsFilterArgs)(nil)).Elem()
}

type FindingsFilterInput interface {
	pulumi.Input

	ToFindingsFilterOutput() FindingsFilterOutput
	ToFindingsFilterOutputWithContext(ctx context.Context) FindingsFilterOutput
}

func (*FindingsFilter) ElementType() reflect.Type {
	return reflect.TypeOf((**FindingsFilter)(nil)).Elem()
}

func (i *FindingsFilter) ToFindingsFilterOutput() FindingsFilterOutput {
	return i.ToFindingsFilterOutputWithContext(context.Background())
}

func (i *FindingsFilter) ToFindingsFilterOutputWithContext(ctx context.Context) FindingsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FindingsFilterOutput)
}

// FindingsFilterArrayInput is an input type that accepts FindingsFilterArray and FindingsFilterArrayOutput values.
// You can construct a concrete instance of `FindingsFilterArrayInput` via:
//
//	FindingsFilterArray{ FindingsFilterArgs{...} }
type FindingsFilterArrayInput interface {
	pulumi.Input

	ToFindingsFilterArrayOutput() FindingsFilterArrayOutput
	ToFindingsFilterArrayOutputWithContext(context.Context) FindingsFilterArrayOutput
}

type FindingsFilterArray []FindingsFilterInput

func (FindingsFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FindingsFilter)(nil)).Elem()
}

func (i FindingsFilterArray) ToFindingsFilterArrayOutput() FindingsFilterArrayOutput {
	return i.ToFindingsFilterArrayOutputWithContext(context.Background())
}

func (i FindingsFilterArray) ToFindingsFilterArrayOutputWithContext(ctx context.Context) FindingsFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FindingsFilterArrayOutput)
}

// FindingsFilterMapInput is an input type that accepts FindingsFilterMap and FindingsFilterMapOutput values.
// You can construct a concrete instance of `FindingsFilterMapInput` via:
//
//	FindingsFilterMap{ "key": FindingsFilterArgs{...} }
type FindingsFilterMapInput interface {
	pulumi.Input

	ToFindingsFilterMapOutput() FindingsFilterMapOutput
	ToFindingsFilterMapOutputWithContext(context.Context) FindingsFilterMapOutput
}

type FindingsFilterMap map[string]FindingsFilterInput

func (FindingsFilterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FindingsFilter)(nil)).Elem()
}

func (i FindingsFilterMap) ToFindingsFilterMapOutput() FindingsFilterMapOutput {
	return i.ToFindingsFilterMapOutputWithContext(context.Background())
}

func (i FindingsFilterMap) ToFindingsFilterMapOutputWithContext(ctx context.Context) FindingsFilterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FindingsFilterMapOutput)
}

type FindingsFilterOutput struct{ *pulumi.OutputState }

func (FindingsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FindingsFilter)(nil)).Elem()
}

func (o FindingsFilterOutput) ToFindingsFilterOutput() FindingsFilterOutput {
	return o
}

func (o FindingsFilterOutput) ToFindingsFilterOutputWithContext(ctx context.Context) FindingsFilterOutput {
	return o
}

func (o FindingsFilterOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *FindingsFilter) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

func (o FindingsFilterOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *FindingsFilter) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o FindingsFilterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FindingsFilter) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o FindingsFilterOutput) FindingCriteria() FindingsFilterFindingCriteriaOutput {
	return o.ApplyT(func(v *FindingsFilter) FindingsFilterFindingCriteriaOutput { return v.FindingCriteria }).(FindingsFilterFindingCriteriaOutput)
}

func (o FindingsFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FindingsFilter) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o FindingsFilterOutput) NamePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *FindingsFilter) pulumi.StringOutput { return v.NamePrefix }).(pulumi.StringOutput)
}

func (o FindingsFilterOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *FindingsFilter) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

func (o FindingsFilterOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FindingsFilter) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o FindingsFilterOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FindingsFilter) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type FindingsFilterArrayOutput struct{ *pulumi.OutputState }

func (FindingsFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FindingsFilter)(nil)).Elem()
}

func (o FindingsFilterArrayOutput) ToFindingsFilterArrayOutput() FindingsFilterArrayOutput {
	return o
}

func (o FindingsFilterArrayOutput) ToFindingsFilterArrayOutputWithContext(ctx context.Context) FindingsFilterArrayOutput {
	return o
}

func (o FindingsFilterArrayOutput) Index(i pulumi.IntInput) FindingsFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FindingsFilter {
		return vs[0].([]*FindingsFilter)[vs[1].(int)]
	}).(FindingsFilterOutput)
}

type FindingsFilterMapOutput struct{ *pulumi.OutputState }

func (FindingsFilterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FindingsFilter)(nil)).Elem()
}

func (o FindingsFilterMapOutput) ToFindingsFilterMapOutput() FindingsFilterMapOutput {
	return o
}

func (o FindingsFilterMapOutput) ToFindingsFilterMapOutputWithContext(ctx context.Context) FindingsFilterMapOutput {
	return o
}

func (o FindingsFilterMapOutput) MapIndex(k pulumi.StringInput) FindingsFilterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FindingsFilter {
		return vs[0].(map[string]*FindingsFilter)[vs[1].(string)]
	}).(FindingsFilterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FindingsFilterInput)(nil)).Elem(), &FindingsFilter{})
	pulumi.RegisterInputType(reflect.TypeOf((*FindingsFilterArrayInput)(nil)).Elem(), FindingsFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FindingsFilterMapInput)(nil)).Elem(), FindingsFilterMap{})
	pulumi.RegisterOutputType(FindingsFilterOutput{})
	pulumi.RegisterOutputType(FindingsFilterArrayOutput{})
	pulumi.RegisterOutputType(FindingsFilterMapOutput{})
}
