// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package macie

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to manage an [Amazon Macie Findings Filter](https://docs.aws.amazon.com/macie/latest/APIReference/findingsfilters-id.html).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/macie"
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/macie2"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := macie2.NewAccount(ctx, "example", nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = macie.NewFindingsFilter(ctx, "test", &macie.FindingsFilterArgs{
// 			Description: pulumi.String("DESCRIPTION"),
// 			Position:    pulumi.Int(1),
// 			Action:      pulumi.String("ARCHIVE"),
// 			FindingCriteria: &macie.FindingsFilterFindingCriteriaArgs{
// 				Criterions: macie.FindingsFilterFindingCriteriaCriterionArray{
// 					&macie.FindingsFilterFindingCriteriaCriterionArgs{
// 						Field: pulumi.String("region"),
// 						Eqs: pulumi.StringArray{
// 							pulumi.Any(data.Aws_region.Current.Name),
// 						},
// 					},
// 				},
// 			},
// 		}, pulumi.DependsOn([]pulumi.Resource{
// 			aws_macie2_account.Test,
// 		}))
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// `aws_macie2_findings_filter` can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import aws:macie/findingsFilter:FindingsFilter example abcd1
// ```
type FindingsFilter struct {
	pulumi.CustomResourceState

	// The action to perform on findings that meet the filter criteria (`findingCriteria`). Valid values are: `ARCHIVE`, suppress (automatically archive) the findings; and, `NOOP`, don't perform any action on the findings.
	Action pulumi.StringOutput `pulumi:"action"`
	// The Amazon Resource Name (ARN) of the Findings Filter.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// A custom description of the filter. The description can contain as many as 512 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The criteria to use to filter findings.
	FindingCriteria FindingsFilterFindingCriteriaOutput `pulumi:"findingCriteria"`
	Name            pulumi.StringOutput                 `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumi.StringOutput `pulumi:"namePrefix"`
	// The position of the filter in the list of saved filters on the Amazon Macie console. This value also determines the order in which the filter is applied to findings, relative to other filters that are also applied to the findings.
	Position pulumi.IntOutput `pulumi:"position"`
	// A map of key-value pairs that specifies the tags to associate with the filter.
	Tags    pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewFindingsFilter registers a new resource with the given unique name, arguments, and options.
func NewFindingsFilter(ctx *pulumi.Context,
	name string, args *FindingsFilterArgs, opts ...pulumi.ResourceOption) (*FindingsFilter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.FindingCriteria == nil {
		return nil, errors.New("invalid value for required argument 'FindingCriteria'")
	}
	var resource FindingsFilter
	err := ctx.RegisterResource("aws:macie/findingsFilter:FindingsFilter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFindingsFilter gets an existing FindingsFilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFindingsFilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FindingsFilterState, opts ...pulumi.ResourceOption) (*FindingsFilter, error) {
	var resource FindingsFilter
	err := ctx.ReadResource("aws:macie/findingsFilter:FindingsFilter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FindingsFilter resources.
type findingsFilterState struct {
	// The action to perform on findings that meet the filter criteria (`findingCriteria`). Valid values are: `ARCHIVE`, suppress (automatically archive) the findings; and, `NOOP`, don't perform any action on the findings.
	Action *string `pulumi:"action"`
	// The Amazon Resource Name (ARN) of the Findings Filter.
	Arn *string `pulumi:"arn"`
	// A custom description of the filter. The description can contain as many as 512 characters.
	Description *string `pulumi:"description"`
	// The criteria to use to filter findings.
	FindingCriteria *FindingsFilterFindingCriteria `pulumi:"findingCriteria"`
	Name            *string                        `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// The position of the filter in the list of saved filters on the Amazon Macie console. This value also determines the order in which the filter is applied to findings, relative to other filters that are also applied to the findings.
	Position *int `pulumi:"position"`
	// A map of key-value pairs that specifies the tags to associate with the filter.
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type FindingsFilterState struct {
	// The action to perform on findings that meet the filter criteria (`findingCriteria`). Valid values are: `ARCHIVE`, suppress (automatically archive) the findings; and, `NOOP`, don't perform any action on the findings.
	Action pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) of the Findings Filter.
	Arn pulumi.StringPtrInput
	// A custom description of the filter. The description can contain as many as 512 characters.
	Description pulumi.StringPtrInput
	// The criteria to use to filter findings.
	FindingCriteria FindingsFilterFindingCriteriaPtrInput
	Name            pulumi.StringPtrInput
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumi.StringPtrInput
	// The position of the filter in the list of saved filters on the Amazon Macie console. This value also determines the order in which the filter is applied to findings, relative to other filters that are also applied to the findings.
	Position pulumi.IntPtrInput
	// A map of key-value pairs that specifies the tags to associate with the filter.
	Tags    pulumi.StringMapInput
	TagsAll pulumi.StringMapInput
}

func (FindingsFilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*findingsFilterState)(nil)).Elem()
}

type findingsFilterArgs struct {
	// The action to perform on findings that meet the filter criteria (`findingCriteria`). Valid values are: `ARCHIVE`, suppress (automatically archive) the findings; and, `NOOP`, don't perform any action on the findings.
	Action string `pulumi:"action"`
	// A custom description of the filter. The description can contain as many as 512 characters.
	Description *string `pulumi:"description"`
	// The criteria to use to filter findings.
	FindingCriteria FindingsFilterFindingCriteria `pulumi:"findingCriteria"`
	Name            *string                       `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// The position of the filter in the list of saved filters on the Amazon Macie console. This value also determines the order in which the filter is applied to findings, relative to other filters that are also applied to the findings.
	Position *int `pulumi:"position"`
	// A map of key-value pairs that specifies the tags to associate with the filter.
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
}

// The set of arguments for constructing a FindingsFilter resource.
type FindingsFilterArgs struct {
	// The action to perform on findings that meet the filter criteria (`findingCriteria`). Valid values are: `ARCHIVE`, suppress (automatically archive) the findings; and, `NOOP`, don't perform any action on the findings.
	Action pulumi.StringInput
	// A custom description of the filter. The description can contain as many as 512 characters.
	Description pulumi.StringPtrInput
	// The criteria to use to filter findings.
	FindingCriteria FindingsFilterFindingCriteriaInput
	Name            pulumi.StringPtrInput
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumi.StringPtrInput
	// The position of the filter in the list of saved filters on the Amazon Macie console. This value also determines the order in which the filter is applied to findings, relative to other filters that are also applied to the findings.
	Position pulumi.IntPtrInput
	// A map of key-value pairs that specifies the tags to associate with the filter.
	Tags    pulumi.StringMapInput
	TagsAll pulumi.StringMapInput
}

func (FindingsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*findingsFilterArgs)(nil)).Elem()
}

type FindingsFilterInput interface {
	pulumi.Input

	ToFindingsFilterOutput() FindingsFilterOutput
	ToFindingsFilterOutputWithContext(ctx context.Context) FindingsFilterOutput
}

func (*FindingsFilter) ElementType() reflect.Type {
	return reflect.TypeOf((*FindingsFilter)(nil))
}

func (i *FindingsFilter) ToFindingsFilterOutput() FindingsFilterOutput {
	return i.ToFindingsFilterOutputWithContext(context.Background())
}

func (i *FindingsFilter) ToFindingsFilterOutputWithContext(ctx context.Context) FindingsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FindingsFilterOutput)
}

func (i *FindingsFilter) ToFindingsFilterPtrOutput() FindingsFilterPtrOutput {
	return i.ToFindingsFilterPtrOutputWithContext(context.Background())
}

func (i *FindingsFilter) ToFindingsFilterPtrOutputWithContext(ctx context.Context) FindingsFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FindingsFilterPtrOutput)
}

type FindingsFilterPtrInput interface {
	pulumi.Input

	ToFindingsFilterPtrOutput() FindingsFilterPtrOutput
	ToFindingsFilterPtrOutputWithContext(ctx context.Context) FindingsFilterPtrOutput
}

type findingsFilterPtrType FindingsFilterArgs

func (*findingsFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FindingsFilter)(nil))
}

func (i *findingsFilterPtrType) ToFindingsFilterPtrOutput() FindingsFilterPtrOutput {
	return i.ToFindingsFilterPtrOutputWithContext(context.Background())
}

func (i *findingsFilterPtrType) ToFindingsFilterPtrOutputWithContext(ctx context.Context) FindingsFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FindingsFilterPtrOutput)
}

// FindingsFilterArrayInput is an input type that accepts FindingsFilterArray and FindingsFilterArrayOutput values.
// You can construct a concrete instance of `FindingsFilterArrayInput` via:
//
//          FindingsFilterArray{ FindingsFilterArgs{...} }
type FindingsFilterArrayInput interface {
	pulumi.Input

	ToFindingsFilterArrayOutput() FindingsFilterArrayOutput
	ToFindingsFilterArrayOutputWithContext(context.Context) FindingsFilterArrayOutput
}

type FindingsFilterArray []FindingsFilterInput

func (FindingsFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*FindingsFilter)(nil))
}

func (i FindingsFilterArray) ToFindingsFilterArrayOutput() FindingsFilterArrayOutput {
	return i.ToFindingsFilterArrayOutputWithContext(context.Background())
}

func (i FindingsFilterArray) ToFindingsFilterArrayOutputWithContext(ctx context.Context) FindingsFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FindingsFilterArrayOutput)
}

// FindingsFilterMapInput is an input type that accepts FindingsFilterMap and FindingsFilterMapOutput values.
// You can construct a concrete instance of `FindingsFilterMapInput` via:
//
//          FindingsFilterMap{ "key": FindingsFilterArgs{...} }
type FindingsFilterMapInput interface {
	pulumi.Input

	ToFindingsFilterMapOutput() FindingsFilterMapOutput
	ToFindingsFilterMapOutputWithContext(context.Context) FindingsFilterMapOutput
}

type FindingsFilterMap map[string]FindingsFilterInput

func (FindingsFilterMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*FindingsFilter)(nil))
}

func (i FindingsFilterMap) ToFindingsFilterMapOutput() FindingsFilterMapOutput {
	return i.ToFindingsFilterMapOutputWithContext(context.Background())
}

func (i FindingsFilterMap) ToFindingsFilterMapOutputWithContext(ctx context.Context) FindingsFilterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FindingsFilterMapOutput)
}

type FindingsFilterOutput struct {
	*pulumi.OutputState
}

func (FindingsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FindingsFilter)(nil))
}

func (o FindingsFilterOutput) ToFindingsFilterOutput() FindingsFilterOutput {
	return o
}

func (o FindingsFilterOutput) ToFindingsFilterOutputWithContext(ctx context.Context) FindingsFilterOutput {
	return o
}

func (o FindingsFilterOutput) ToFindingsFilterPtrOutput() FindingsFilterPtrOutput {
	return o.ToFindingsFilterPtrOutputWithContext(context.Background())
}

func (o FindingsFilterOutput) ToFindingsFilterPtrOutputWithContext(ctx context.Context) FindingsFilterPtrOutput {
	return o.ApplyT(func(v FindingsFilter) *FindingsFilter {
		return &v
	}).(FindingsFilterPtrOutput)
}

type FindingsFilterPtrOutput struct {
	*pulumi.OutputState
}

func (FindingsFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FindingsFilter)(nil))
}

func (o FindingsFilterPtrOutput) ToFindingsFilterPtrOutput() FindingsFilterPtrOutput {
	return o
}

func (o FindingsFilterPtrOutput) ToFindingsFilterPtrOutputWithContext(ctx context.Context) FindingsFilterPtrOutput {
	return o
}

type FindingsFilterArrayOutput struct{ *pulumi.OutputState }

func (FindingsFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FindingsFilter)(nil))
}

func (o FindingsFilterArrayOutput) ToFindingsFilterArrayOutput() FindingsFilterArrayOutput {
	return o
}

func (o FindingsFilterArrayOutput) ToFindingsFilterArrayOutputWithContext(ctx context.Context) FindingsFilterArrayOutput {
	return o
}

func (o FindingsFilterArrayOutput) Index(i pulumi.IntInput) FindingsFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FindingsFilter {
		return vs[0].([]FindingsFilter)[vs[1].(int)]
	}).(FindingsFilterOutput)
}

type FindingsFilterMapOutput struct{ *pulumi.OutputState }

func (FindingsFilterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]FindingsFilter)(nil))
}

func (o FindingsFilterMapOutput) ToFindingsFilterMapOutput() FindingsFilterMapOutput {
	return o
}

func (o FindingsFilterMapOutput) ToFindingsFilterMapOutputWithContext(ctx context.Context) FindingsFilterMapOutput {
	return o
}

func (o FindingsFilterMapOutput) MapIndex(k pulumi.StringInput) FindingsFilterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) FindingsFilter {
		return vs[0].(map[string]FindingsFilter)[vs[1].(string)]
	}).(FindingsFilterOutput)
}

func init() {
	pulumi.RegisterOutputType(FindingsFilterOutput{})
	pulumi.RegisterOutputType(FindingsFilterPtrOutput{})
	pulumi.RegisterOutputType(FindingsFilterArrayOutput{})
	pulumi.RegisterOutputType(FindingsFilterMapOutput{})
}
