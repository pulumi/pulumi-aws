// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudhsmv2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an HSM module in Amazon CloudHSM v2 cluster.
//
// ## Example Usage
//
// The following example below creates an HSM module in CloudHSM cluster.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/cloudhsmv2"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		cluster, err := cloudhsmv2.LookupCluster(ctx, &cloudhsmv2.LookupClusterArgs{
// 			ClusterId: _var.Cloudhsm_cluster_id,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = cloudhsmv2.NewHsm(ctx, "cloudhsmV2Hsm", &cloudhsmv2.HsmArgs{
// 			SubnetId:  pulumi.String(cluster.SubnetIds[0]),
// 			ClusterId: pulumi.String(cluster.ClusterId),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// HSM modules can be imported using their HSM ID, e.g.
//
// ```sh
//  $ pulumi import aws:cloudhsmv2/hsm:Hsm bar hsm-quo8dahtaca
// ```
type Hsm struct {
	pulumi.CustomResourceState

	// The IDs of AZ in which HSM module will be located. Do not use together with subnet_id.
	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`
	// The ID of Cloud HSM v2 cluster to which HSM will be added.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The id of the ENI interface allocated for HSM module.
	HsmEniId pulumi.StringOutput `pulumi:"hsmEniId"`
	// The id of the HSM module.
	HsmId pulumi.StringOutput `pulumi:"hsmId"`
	// The state of the HSM module.
	HsmState pulumi.StringOutput `pulumi:"hsmState"`
	// The IP address of HSM module. Must be within the CIDR of selected subnet.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// The ID of subnet in which HSM module will be located.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
}

// NewHsm registers a new resource with the given unique name, arguments, and options.
func NewHsm(ctx *pulumi.Context,
	name string, args *HsmArgs, opts ...pulumi.ResourceOption) (*Hsm, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	var resource Hsm
	err := ctx.RegisterResource("aws:cloudhsmv2/hsm:Hsm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHsm gets an existing Hsm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHsm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HsmState, opts ...pulumi.ResourceOption) (*Hsm, error) {
	var resource Hsm
	err := ctx.ReadResource("aws:cloudhsmv2/hsm:Hsm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Hsm resources.
type hsmState struct {
	// The IDs of AZ in which HSM module will be located. Do not use together with subnet_id.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The ID of Cloud HSM v2 cluster to which HSM will be added.
	ClusterId *string `pulumi:"clusterId"`
	// The id of the ENI interface allocated for HSM module.
	HsmEniId *string `pulumi:"hsmEniId"`
	// The id of the HSM module.
	HsmId *string `pulumi:"hsmId"`
	// The state of the HSM module.
	HsmState *string `pulumi:"hsmState"`
	// The IP address of HSM module. Must be within the CIDR of selected subnet.
	IpAddress *string `pulumi:"ipAddress"`
	// The ID of subnet in which HSM module will be located.
	SubnetId *string `pulumi:"subnetId"`
}

type HsmState struct {
	// The IDs of AZ in which HSM module will be located. Do not use together with subnet_id.
	AvailabilityZone pulumi.StringPtrInput
	// The ID of Cloud HSM v2 cluster to which HSM will be added.
	ClusterId pulumi.StringPtrInput
	// The id of the ENI interface allocated for HSM module.
	HsmEniId pulumi.StringPtrInput
	// The id of the HSM module.
	HsmId pulumi.StringPtrInput
	// The state of the HSM module.
	HsmState pulumi.StringPtrInput
	// The IP address of HSM module. Must be within the CIDR of selected subnet.
	IpAddress pulumi.StringPtrInput
	// The ID of subnet in which HSM module will be located.
	SubnetId pulumi.StringPtrInput
}

func (HsmState) ElementType() reflect.Type {
	return reflect.TypeOf((*hsmState)(nil)).Elem()
}

type hsmArgs struct {
	// The IDs of AZ in which HSM module will be located. Do not use together with subnet_id.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The ID of Cloud HSM v2 cluster to which HSM will be added.
	ClusterId string `pulumi:"clusterId"`
	// The IP address of HSM module. Must be within the CIDR of selected subnet.
	IpAddress *string `pulumi:"ipAddress"`
	// The ID of subnet in which HSM module will be located.
	SubnetId *string `pulumi:"subnetId"`
}

// The set of arguments for constructing a Hsm resource.
type HsmArgs struct {
	// The IDs of AZ in which HSM module will be located. Do not use together with subnet_id.
	AvailabilityZone pulumi.StringPtrInput
	// The ID of Cloud HSM v2 cluster to which HSM will be added.
	ClusterId pulumi.StringInput
	// The IP address of HSM module. Must be within the CIDR of selected subnet.
	IpAddress pulumi.StringPtrInput
	// The ID of subnet in which HSM module will be located.
	SubnetId pulumi.StringPtrInput
}

func (HsmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hsmArgs)(nil)).Elem()
}

type HsmInput interface {
	pulumi.Input

	ToHsmOutput() HsmOutput
	ToHsmOutputWithContext(ctx context.Context) HsmOutput
}

func (*Hsm) ElementType() reflect.Type {
	return reflect.TypeOf((*Hsm)(nil))
}

func (i *Hsm) ToHsmOutput() HsmOutput {
	return i.ToHsmOutputWithContext(context.Background())
}

func (i *Hsm) ToHsmOutputWithContext(ctx context.Context) HsmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HsmOutput)
}

func (i *Hsm) ToHsmPtrOutput() HsmPtrOutput {
	return i.ToHsmPtrOutputWithContext(context.Background())
}

func (i *Hsm) ToHsmPtrOutputWithContext(ctx context.Context) HsmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HsmPtrOutput)
}

type HsmPtrInput interface {
	pulumi.Input

	ToHsmPtrOutput() HsmPtrOutput
	ToHsmPtrOutputWithContext(ctx context.Context) HsmPtrOutput
}

type hsmPtrType HsmArgs

func (*hsmPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Hsm)(nil))
}

func (i *hsmPtrType) ToHsmPtrOutput() HsmPtrOutput {
	return i.ToHsmPtrOutputWithContext(context.Background())
}

func (i *hsmPtrType) ToHsmPtrOutputWithContext(ctx context.Context) HsmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HsmPtrOutput)
}

// HsmArrayInput is an input type that accepts HsmArray and HsmArrayOutput values.
// You can construct a concrete instance of `HsmArrayInput` via:
//
//          HsmArray{ HsmArgs{...} }
type HsmArrayInput interface {
	pulumi.Input

	ToHsmArrayOutput() HsmArrayOutput
	ToHsmArrayOutputWithContext(context.Context) HsmArrayOutput
}

type HsmArray []HsmInput

func (HsmArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Hsm)(nil)).Elem()
}

func (i HsmArray) ToHsmArrayOutput() HsmArrayOutput {
	return i.ToHsmArrayOutputWithContext(context.Background())
}

func (i HsmArray) ToHsmArrayOutputWithContext(ctx context.Context) HsmArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HsmArrayOutput)
}

// HsmMapInput is an input type that accepts HsmMap and HsmMapOutput values.
// You can construct a concrete instance of `HsmMapInput` via:
//
//          HsmMap{ "key": HsmArgs{...} }
type HsmMapInput interface {
	pulumi.Input

	ToHsmMapOutput() HsmMapOutput
	ToHsmMapOutputWithContext(context.Context) HsmMapOutput
}

type HsmMap map[string]HsmInput

func (HsmMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Hsm)(nil)).Elem()
}

func (i HsmMap) ToHsmMapOutput() HsmMapOutput {
	return i.ToHsmMapOutputWithContext(context.Background())
}

func (i HsmMap) ToHsmMapOutputWithContext(ctx context.Context) HsmMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HsmMapOutput)
}

type HsmOutput struct {
	*pulumi.OutputState
}

func (HsmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Hsm)(nil))
}

func (o HsmOutput) ToHsmOutput() HsmOutput {
	return o
}

func (o HsmOutput) ToHsmOutputWithContext(ctx context.Context) HsmOutput {
	return o
}

func (o HsmOutput) ToHsmPtrOutput() HsmPtrOutput {
	return o.ToHsmPtrOutputWithContext(context.Background())
}

func (o HsmOutput) ToHsmPtrOutputWithContext(ctx context.Context) HsmPtrOutput {
	return o.ApplyT(func(v Hsm) *Hsm {
		return &v
	}).(HsmPtrOutput)
}

type HsmPtrOutput struct {
	*pulumi.OutputState
}

func (HsmPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hsm)(nil))
}

func (o HsmPtrOutput) ToHsmPtrOutput() HsmPtrOutput {
	return o
}

func (o HsmPtrOutput) ToHsmPtrOutputWithContext(ctx context.Context) HsmPtrOutput {
	return o
}

type HsmArrayOutput struct{ *pulumi.OutputState }

func (HsmArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Hsm)(nil))
}

func (o HsmArrayOutput) ToHsmArrayOutput() HsmArrayOutput {
	return o
}

func (o HsmArrayOutput) ToHsmArrayOutputWithContext(ctx context.Context) HsmArrayOutput {
	return o
}

func (o HsmArrayOutput) Index(i pulumi.IntInput) HsmOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Hsm {
		return vs[0].([]Hsm)[vs[1].(int)]
	}).(HsmOutput)
}

type HsmMapOutput struct{ *pulumi.OutputState }

func (HsmMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Hsm)(nil))
}

func (o HsmMapOutput) ToHsmMapOutput() HsmMapOutput {
	return o
}

func (o HsmMapOutput) ToHsmMapOutputWithContext(ctx context.Context) HsmMapOutput {
	return o
}

func (o HsmMapOutput) MapIndex(k pulumi.StringInput) HsmOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Hsm {
		return vs[0].(map[string]Hsm)[vs[1].(string)]
	}).(HsmOutput)
}

func init() {
	pulumi.RegisterOutputType(HsmOutput{})
	pulumi.RegisterOutputType(HsmPtrOutput{})
	pulumi.RegisterOutputType(HsmArrayOutput{})
	pulumi.RegisterOutputType(HsmMapOutput{})
}
