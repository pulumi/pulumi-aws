// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicecatalog

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PortfolioShare struct {
	pulumi.CustomResourceState

	AcceptLanguage    pulumi.StringPtrOutput `pulumi:"acceptLanguage"`
	Accepted          pulumi.BoolOutput      `pulumi:"accepted"`
	PortfolioId       pulumi.StringOutput    `pulumi:"portfolioId"`
	PrincipalId       pulumi.StringOutput    `pulumi:"principalId"`
	ShareTagOptions   pulumi.BoolPtrOutput   `pulumi:"shareTagOptions"`
	Type              pulumi.StringOutput    `pulumi:"type"`
	WaitForAcceptance pulumi.BoolPtrOutput   `pulumi:"waitForAcceptance"`
}

// NewPortfolioShare registers a new resource with the given unique name, arguments, and options.
func NewPortfolioShare(ctx *pulumi.Context,
	name string, args *PortfolioShareArgs, opts ...pulumi.ResourceOption) (*PortfolioShare, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PortfolioId == nil {
		return nil, errors.New("invalid value for required argument 'PortfolioId'")
	}
	if args.PrincipalId == nil {
		return nil, errors.New("invalid value for required argument 'PrincipalId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource PortfolioShare
	err := ctx.RegisterResource("aws:servicecatalog/portfolioShare:PortfolioShare", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPortfolioShare gets an existing PortfolioShare resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPortfolioShare(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PortfolioShareState, opts ...pulumi.ResourceOption) (*PortfolioShare, error) {
	var resource PortfolioShare
	err := ctx.ReadResource("aws:servicecatalog/portfolioShare:PortfolioShare", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PortfolioShare resources.
type portfolioShareState struct {
	AcceptLanguage    *string `pulumi:"acceptLanguage"`
	Accepted          *bool   `pulumi:"accepted"`
	PortfolioId       *string `pulumi:"portfolioId"`
	PrincipalId       *string `pulumi:"principalId"`
	ShareTagOptions   *bool   `pulumi:"shareTagOptions"`
	Type              *string `pulumi:"type"`
	WaitForAcceptance *bool   `pulumi:"waitForAcceptance"`
}

type PortfolioShareState struct {
	AcceptLanguage    pulumi.StringPtrInput
	Accepted          pulumi.BoolPtrInput
	PortfolioId       pulumi.StringPtrInput
	PrincipalId       pulumi.StringPtrInput
	ShareTagOptions   pulumi.BoolPtrInput
	Type              pulumi.StringPtrInput
	WaitForAcceptance pulumi.BoolPtrInput
}

func (PortfolioShareState) ElementType() reflect.Type {
	return reflect.TypeOf((*portfolioShareState)(nil)).Elem()
}

type portfolioShareArgs struct {
	AcceptLanguage    *string `pulumi:"acceptLanguage"`
	PortfolioId       string  `pulumi:"portfolioId"`
	PrincipalId       string  `pulumi:"principalId"`
	ShareTagOptions   *bool   `pulumi:"shareTagOptions"`
	Type              string  `pulumi:"type"`
	WaitForAcceptance *bool   `pulumi:"waitForAcceptance"`
}

// The set of arguments for constructing a PortfolioShare resource.
type PortfolioShareArgs struct {
	AcceptLanguage    pulumi.StringPtrInput
	PortfolioId       pulumi.StringInput
	PrincipalId       pulumi.StringInput
	ShareTagOptions   pulumi.BoolPtrInput
	Type              pulumi.StringInput
	WaitForAcceptance pulumi.BoolPtrInput
}

func (PortfolioShareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*portfolioShareArgs)(nil)).Elem()
}

type PortfolioShareInput interface {
	pulumi.Input

	ToPortfolioShareOutput() PortfolioShareOutput
	ToPortfolioShareOutputWithContext(ctx context.Context) PortfolioShareOutput
}

func (*PortfolioShare) ElementType() reflect.Type {
	return reflect.TypeOf((**PortfolioShare)(nil)).Elem()
}

func (i *PortfolioShare) ToPortfolioShareOutput() PortfolioShareOutput {
	return i.ToPortfolioShareOutputWithContext(context.Background())
}

func (i *PortfolioShare) ToPortfolioShareOutputWithContext(ctx context.Context) PortfolioShareOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortfolioShareOutput)
}

// PortfolioShareArrayInput is an input type that accepts PortfolioShareArray and PortfolioShareArrayOutput values.
// You can construct a concrete instance of `PortfolioShareArrayInput` via:
//
//	PortfolioShareArray{ PortfolioShareArgs{...} }
type PortfolioShareArrayInput interface {
	pulumi.Input

	ToPortfolioShareArrayOutput() PortfolioShareArrayOutput
	ToPortfolioShareArrayOutputWithContext(context.Context) PortfolioShareArrayOutput
}

type PortfolioShareArray []PortfolioShareInput

func (PortfolioShareArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PortfolioShare)(nil)).Elem()
}

func (i PortfolioShareArray) ToPortfolioShareArrayOutput() PortfolioShareArrayOutput {
	return i.ToPortfolioShareArrayOutputWithContext(context.Background())
}

func (i PortfolioShareArray) ToPortfolioShareArrayOutputWithContext(ctx context.Context) PortfolioShareArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortfolioShareArrayOutput)
}

// PortfolioShareMapInput is an input type that accepts PortfolioShareMap and PortfolioShareMapOutput values.
// You can construct a concrete instance of `PortfolioShareMapInput` via:
//
//	PortfolioShareMap{ "key": PortfolioShareArgs{...} }
type PortfolioShareMapInput interface {
	pulumi.Input

	ToPortfolioShareMapOutput() PortfolioShareMapOutput
	ToPortfolioShareMapOutputWithContext(context.Context) PortfolioShareMapOutput
}

type PortfolioShareMap map[string]PortfolioShareInput

func (PortfolioShareMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PortfolioShare)(nil)).Elem()
}

func (i PortfolioShareMap) ToPortfolioShareMapOutput() PortfolioShareMapOutput {
	return i.ToPortfolioShareMapOutputWithContext(context.Background())
}

func (i PortfolioShareMap) ToPortfolioShareMapOutputWithContext(ctx context.Context) PortfolioShareMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortfolioShareMapOutput)
}

type PortfolioShareOutput struct{ *pulumi.OutputState }

func (PortfolioShareOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PortfolioShare)(nil)).Elem()
}

func (o PortfolioShareOutput) ToPortfolioShareOutput() PortfolioShareOutput {
	return o
}

func (o PortfolioShareOutput) ToPortfolioShareOutputWithContext(ctx context.Context) PortfolioShareOutput {
	return o
}

func (o PortfolioShareOutput) AcceptLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PortfolioShare) pulumi.StringPtrOutput { return v.AcceptLanguage }).(pulumi.StringPtrOutput)
}

func (o PortfolioShareOutput) Accepted() pulumi.BoolOutput {
	return o.ApplyT(func(v *PortfolioShare) pulumi.BoolOutput { return v.Accepted }).(pulumi.BoolOutput)
}

func (o PortfolioShareOutput) PortfolioId() pulumi.StringOutput {
	return o.ApplyT(func(v *PortfolioShare) pulumi.StringOutput { return v.PortfolioId }).(pulumi.StringOutput)
}

func (o PortfolioShareOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v *PortfolioShare) pulumi.StringOutput { return v.PrincipalId }).(pulumi.StringOutput)
}

func (o PortfolioShareOutput) ShareTagOptions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PortfolioShare) pulumi.BoolPtrOutput { return v.ShareTagOptions }).(pulumi.BoolPtrOutput)
}

func (o PortfolioShareOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *PortfolioShare) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o PortfolioShareOutput) WaitForAcceptance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PortfolioShare) pulumi.BoolPtrOutput { return v.WaitForAcceptance }).(pulumi.BoolPtrOutput)
}

type PortfolioShareArrayOutput struct{ *pulumi.OutputState }

func (PortfolioShareArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PortfolioShare)(nil)).Elem()
}

func (o PortfolioShareArrayOutput) ToPortfolioShareArrayOutput() PortfolioShareArrayOutput {
	return o
}

func (o PortfolioShareArrayOutput) ToPortfolioShareArrayOutputWithContext(ctx context.Context) PortfolioShareArrayOutput {
	return o
}

func (o PortfolioShareArrayOutput) Index(i pulumi.IntInput) PortfolioShareOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PortfolioShare {
		return vs[0].([]*PortfolioShare)[vs[1].(int)]
	}).(PortfolioShareOutput)
}

type PortfolioShareMapOutput struct{ *pulumi.OutputState }

func (PortfolioShareMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PortfolioShare)(nil)).Elem()
}

func (o PortfolioShareMapOutput) ToPortfolioShareMapOutput() PortfolioShareMapOutput {
	return o
}

func (o PortfolioShareMapOutput) ToPortfolioShareMapOutputWithContext(ctx context.Context) PortfolioShareMapOutput {
	return o
}

func (o PortfolioShareMapOutput) MapIndex(k pulumi.StringInput) PortfolioShareOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PortfolioShare {
		return vs[0].(map[string]*PortfolioShare)[vs[1].(string)]
	}).(PortfolioShareOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PortfolioShareInput)(nil)).Elem(), &PortfolioShare{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortfolioShareArrayInput)(nil)).Elem(), PortfolioShareArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortfolioShareMapInput)(nil)).Elem(), PortfolioShareMap{})
	pulumi.RegisterOutputType(PortfolioShareOutput{})
	pulumi.RegisterOutputType(PortfolioShareArrayOutput{})
	pulumi.RegisterOutputType(PortfolioShareMapOutput{})
}
