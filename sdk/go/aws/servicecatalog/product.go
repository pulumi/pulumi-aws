// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicecatalog

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Product struct {
	pulumi.CustomResourceState

	AcceptLanguage                 pulumi.StringPtrOutput                      `pulumi:"acceptLanguage"`
	Arn                            pulumi.StringOutput                         `pulumi:"arn"`
	CreatedTime                    pulumi.StringOutput                         `pulumi:"createdTime"`
	Description                    pulumi.StringOutput                         `pulumi:"description"`
	Distributor                    pulumi.StringOutput                         `pulumi:"distributor"`
	HasDefaultPath                 pulumi.BoolOutput                           `pulumi:"hasDefaultPath"`
	Name                           pulumi.StringOutput                         `pulumi:"name"`
	Owner                          pulumi.StringOutput                         `pulumi:"owner"`
	ProvisioningArtifactParameters ProductProvisioningArtifactParametersOutput `pulumi:"provisioningArtifactParameters"`
	Status                         pulumi.StringOutput                         `pulumi:"status"`
	SupportDescription             pulumi.StringOutput                         `pulumi:"supportDescription"`
	SupportEmail                   pulumi.StringOutput                         `pulumi:"supportEmail"`
	SupportUrl                     pulumi.StringOutput                         `pulumi:"supportUrl"`
	Tags                           pulumi.StringMapOutput                      `pulumi:"tags"`
	TagsAll                        pulumi.StringMapOutput                      `pulumi:"tagsAll"`
	Type                           pulumi.StringOutput                         `pulumi:"type"`
}

// NewProduct registers a new resource with the given unique name, arguments, and options.
func NewProduct(ctx *pulumi.Context,
	name string, args *ProductArgs, opts ...pulumi.ResourceOption) (*Product, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Owner == nil {
		return nil, errors.New("invalid value for required argument 'Owner'")
	}
	if args.ProvisioningArtifactParameters == nil {
		return nil, errors.New("invalid value for required argument 'ProvisioningArtifactParameters'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource Product
	err := ctx.RegisterResource("aws:servicecatalog/product:Product", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProduct gets an existing Product resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProduct(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProductState, opts ...pulumi.ResourceOption) (*Product, error) {
	var resource Product
	err := ctx.ReadResource("aws:servicecatalog/product:Product", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Product resources.
type productState struct {
	AcceptLanguage                 *string                                `pulumi:"acceptLanguage"`
	Arn                            *string                                `pulumi:"arn"`
	CreatedTime                    *string                                `pulumi:"createdTime"`
	Description                    *string                                `pulumi:"description"`
	Distributor                    *string                                `pulumi:"distributor"`
	HasDefaultPath                 *bool                                  `pulumi:"hasDefaultPath"`
	Name                           *string                                `pulumi:"name"`
	Owner                          *string                                `pulumi:"owner"`
	ProvisioningArtifactParameters *ProductProvisioningArtifactParameters `pulumi:"provisioningArtifactParameters"`
	Status                         *string                                `pulumi:"status"`
	SupportDescription             *string                                `pulumi:"supportDescription"`
	SupportEmail                   *string                                `pulumi:"supportEmail"`
	SupportUrl                     *string                                `pulumi:"supportUrl"`
	Tags                           map[string]string                      `pulumi:"tags"`
	TagsAll                        map[string]string                      `pulumi:"tagsAll"`
	Type                           *string                                `pulumi:"type"`
}

type ProductState struct {
	AcceptLanguage                 pulumi.StringPtrInput
	Arn                            pulumi.StringPtrInput
	CreatedTime                    pulumi.StringPtrInput
	Description                    pulumi.StringPtrInput
	Distributor                    pulumi.StringPtrInput
	HasDefaultPath                 pulumi.BoolPtrInput
	Name                           pulumi.StringPtrInput
	Owner                          pulumi.StringPtrInput
	ProvisioningArtifactParameters ProductProvisioningArtifactParametersPtrInput
	Status                         pulumi.StringPtrInput
	SupportDescription             pulumi.StringPtrInput
	SupportEmail                   pulumi.StringPtrInput
	SupportUrl                     pulumi.StringPtrInput
	Tags                           pulumi.StringMapInput
	TagsAll                        pulumi.StringMapInput
	Type                           pulumi.StringPtrInput
}

func (ProductState) ElementType() reflect.Type {
	return reflect.TypeOf((*productState)(nil)).Elem()
}

type productArgs struct {
	AcceptLanguage                 *string                               `pulumi:"acceptLanguage"`
	Description                    *string                               `pulumi:"description"`
	Distributor                    *string                               `pulumi:"distributor"`
	Name                           *string                               `pulumi:"name"`
	Owner                          string                                `pulumi:"owner"`
	ProvisioningArtifactParameters ProductProvisioningArtifactParameters `pulumi:"provisioningArtifactParameters"`
	SupportDescription             *string                               `pulumi:"supportDescription"`
	SupportEmail                   *string                               `pulumi:"supportEmail"`
	SupportUrl                     *string                               `pulumi:"supportUrl"`
	Tags                           map[string]string                     `pulumi:"tags"`
	Type                           string                                `pulumi:"type"`
}

// The set of arguments for constructing a Product resource.
type ProductArgs struct {
	AcceptLanguage                 pulumi.StringPtrInput
	Description                    pulumi.StringPtrInput
	Distributor                    pulumi.StringPtrInput
	Name                           pulumi.StringPtrInput
	Owner                          pulumi.StringInput
	ProvisioningArtifactParameters ProductProvisioningArtifactParametersInput
	SupportDescription             pulumi.StringPtrInput
	SupportEmail                   pulumi.StringPtrInput
	SupportUrl                     pulumi.StringPtrInput
	Tags                           pulumi.StringMapInput
	Type                           pulumi.StringInput
}

func (ProductArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*productArgs)(nil)).Elem()
}

type ProductInput interface {
	pulumi.Input

	ToProductOutput() ProductOutput
	ToProductOutputWithContext(ctx context.Context) ProductOutput
}

func (*Product) ElementType() reflect.Type {
	return reflect.TypeOf((**Product)(nil)).Elem()
}

func (i *Product) ToProductOutput() ProductOutput {
	return i.ToProductOutputWithContext(context.Background())
}

func (i *Product) ToProductOutputWithContext(ctx context.Context) ProductOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductOutput)
}

// ProductArrayInput is an input type that accepts ProductArray and ProductArrayOutput values.
// You can construct a concrete instance of `ProductArrayInput` via:
//
//	ProductArray{ ProductArgs{...} }
type ProductArrayInput interface {
	pulumi.Input

	ToProductArrayOutput() ProductArrayOutput
	ToProductArrayOutputWithContext(context.Context) ProductArrayOutput
}

type ProductArray []ProductInput

func (ProductArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Product)(nil)).Elem()
}

func (i ProductArray) ToProductArrayOutput() ProductArrayOutput {
	return i.ToProductArrayOutputWithContext(context.Background())
}

func (i ProductArray) ToProductArrayOutputWithContext(ctx context.Context) ProductArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductArrayOutput)
}

// ProductMapInput is an input type that accepts ProductMap and ProductMapOutput values.
// You can construct a concrete instance of `ProductMapInput` via:
//
//	ProductMap{ "key": ProductArgs{...} }
type ProductMapInput interface {
	pulumi.Input

	ToProductMapOutput() ProductMapOutput
	ToProductMapOutputWithContext(context.Context) ProductMapOutput
}

type ProductMap map[string]ProductInput

func (ProductMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Product)(nil)).Elem()
}

func (i ProductMap) ToProductMapOutput() ProductMapOutput {
	return i.ToProductMapOutputWithContext(context.Background())
}

func (i ProductMap) ToProductMapOutputWithContext(ctx context.Context) ProductMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductMapOutput)
}

type ProductOutput struct{ *pulumi.OutputState }

func (ProductOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Product)(nil)).Elem()
}

func (o ProductOutput) ToProductOutput() ProductOutput {
	return o
}

func (o ProductOutput) ToProductOutputWithContext(ctx context.Context) ProductOutput {
	return o
}

func (o ProductOutput) AcceptLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Product) pulumi.StringPtrOutput { return v.AcceptLanguage }).(pulumi.StringPtrOutput)
}

func (o ProductOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Product) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ProductOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Product) pulumi.StringOutput { return v.CreatedTime }).(pulumi.StringOutput)
}

func (o ProductOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Product) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o ProductOutput) Distributor() pulumi.StringOutput {
	return o.ApplyT(func(v *Product) pulumi.StringOutput { return v.Distributor }).(pulumi.StringOutput)
}

func (o ProductOutput) HasDefaultPath() pulumi.BoolOutput {
	return o.ApplyT(func(v *Product) pulumi.BoolOutput { return v.HasDefaultPath }).(pulumi.BoolOutput)
}

func (o ProductOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Product) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ProductOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *Product) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

func (o ProductOutput) ProvisioningArtifactParameters() ProductProvisioningArtifactParametersOutput {
	return o.ApplyT(func(v *Product) ProductProvisioningArtifactParametersOutput { return v.ProvisioningArtifactParameters }).(ProductProvisioningArtifactParametersOutput)
}

func (o ProductOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Product) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o ProductOutput) SupportDescription() pulumi.StringOutput {
	return o.ApplyT(func(v *Product) pulumi.StringOutput { return v.SupportDescription }).(pulumi.StringOutput)
}

func (o ProductOutput) SupportEmail() pulumi.StringOutput {
	return o.ApplyT(func(v *Product) pulumi.StringOutput { return v.SupportEmail }).(pulumi.StringOutput)
}

func (o ProductOutput) SupportUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Product) pulumi.StringOutput { return v.SupportUrl }).(pulumi.StringOutput)
}

func (o ProductOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Product) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ProductOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Product) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o ProductOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Product) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type ProductArrayOutput struct{ *pulumi.OutputState }

func (ProductArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Product)(nil)).Elem()
}

func (o ProductArrayOutput) ToProductArrayOutput() ProductArrayOutput {
	return o
}

func (o ProductArrayOutput) ToProductArrayOutputWithContext(ctx context.Context) ProductArrayOutput {
	return o
}

func (o ProductArrayOutput) Index(i pulumi.IntInput) ProductOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Product {
		return vs[0].([]*Product)[vs[1].(int)]
	}).(ProductOutput)
}

type ProductMapOutput struct{ *pulumi.OutputState }

func (ProductMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Product)(nil)).Elem()
}

func (o ProductMapOutput) ToProductMapOutput() ProductMapOutput {
	return o
}

func (o ProductMapOutput) ToProductMapOutputWithContext(ctx context.Context) ProductMapOutput {
	return o
}

func (o ProductMapOutput) MapIndex(k pulumi.StringInput) ProductOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Product {
		return vs[0].(map[string]*Product)[vs[1].(string)]
	}).(ProductOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProductInput)(nil)).Elem(), &Product{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProductArrayInput)(nil)).Elem(), ProductArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProductMapInput)(nil)).Elem(), ProductMap{})
	pulumi.RegisterOutputType(ProductOutput{})
	pulumi.RegisterOutputType(ProductArrayOutput{})
	pulumi.RegisterOutputType(ProductMapOutput{})
}
