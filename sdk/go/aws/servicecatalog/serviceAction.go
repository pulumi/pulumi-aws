// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicecatalog

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ServiceAction struct {
	pulumi.CustomResourceState

	AcceptLanguage pulumi.StringPtrOutput        `pulumi:"acceptLanguage"`
	Definition     ServiceActionDefinitionOutput `pulumi:"definition"`
	Description    pulumi.StringOutput           `pulumi:"description"`
	Name           pulumi.StringOutput           `pulumi:"name"`
}

// NewServiceAction registers a new resource with the given unique name, arguments, and options.
func NewServiceAction(ctx *pulumi.Context,
	name string, args *ServiceActionArgs, opts ...pulumi.ResourceOption) (*ServiceAction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Definition == nil {
		return nil, errors.New("invalid value for required argument 'Definition'")
	}
	var resource ServiceAction
	err := ctx.RegisterResource("aws:servicecatalog/serviceAction:ServiceAction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceAction gets an existing ServiceAction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceAction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceActionState, opts ...pulumi.ResourceOption) (*ServiceAction, error) {
	var resource ServiceAction
	err := ctx.ReadResource("aws:servicecatalog/serviceAction:ServiceAction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceAction resources.
type serviceActionState struct {
	AcceptLanguage *string                  `pulumi:"acceptLanguage"`
	Definition     *ServiceActionDefinition `pulumi:"definition"`
	Description    *string                  `pulumi:"description"`
	Name           *string                  `pulumi:"name"`
}

type ServiceActionState struct {
	AcceptLanguage pulumi.StringPtrInput
	Definition     ServiceActionDefinitionPtrInput
	Description    pulumi.StringPtrInput
	Name           pulumi.StringPtrInput
}

func (ServiceActionState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceActionState)(nil)).Elem()
}

type serviceActionArgs struct {
	AcceptLanguage *string                 `pulumi:"acceptLanguage"`
	Definition     ServiceActionDefinition `pulumi:"definition"`
	Description    *string                 `pulumi:"description"`
	Name           *string                 `pulumi:"name"`
}

// The set of arguments for constructing a ServiceAction resource.
type ServiceActionArgs struct {
	AcceptLanguage pulumi.StringPtrInput
	Definition     ServiceActionDefinitionInput
	Description    pulumi.StringPtrInput
	Name           pulumi.StringPtrInput
}

func (ServiceActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceActionArgs)(nil)).Elem()
}

type ServiceActionInput interface {
	pulumi.Input

	ToServiceActionOutput() ServiceActionOutput
	ToServiceActionOutputWithContext(ctx context.Context) ServiceActionOutput
}

func (*ServiceAction) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAction)(nil)).Elem()
}

func (i *ServiceAction) ToServiceActionOutput() ServiceActionOutput {
	return i.ToServiceActionOutputWithContext(context.Background())
}

func (i *ServiceAction) ToServiceActionOutputWithContext(ctx context.Context) ServiceActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceActionOutput)
}

// ServiceActionArrayInput is an input type that accepts ServiceActionArray and ServiceActionArrayOutput values.
// You can construct a concrete instance of `ServiceActionArrayInput` via:
//
//	ServiceActionArray{ ServiceActionArgs{...} }
type ServiceActionArrayInput interface {
	pulumi.Input

	ToServiceActionArrayOutput() ServiceActionArrayOutput
	ToServiceActionArrayOutputWithContext(context.Context) ServiceActionArrayOutput
}

type ServiceActionArray []ServiceActionInput

func (ServiceActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceAction)(nil)).Elem()
}

func (i ServiceActionArray) ToServiceActionArrayOutput() ServiceActionArrayOutput {
	return i.ToServiceActionArrayOutputWithContext(context.Background())
}

func (i ServiceActionArray) ToServiceActionArrayOutputWithContext(ctx context.Context) ServiceActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceActionArrayOutput)
}

// ServiceActionMapInput is an input type that accepts ServiceActionMap and ServiceActionMapOutput values.
// You can construct a concrete instance of `ServiceActionMapInput` via:
//
//	ServiceActionMap{ "key": ServiceActionArgs{...} }
type ServiceActionMapInput interface {
	pulumi.Input

	ToServiceActionMapOutput() ServiceActionMapOutput
	ToServiceActionMapOutputWithContext(context.Context) ServiceActionMapOutput
}

type ServiceActionMap map[string]ServiceActionInput

func (ServiceActionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceAction)(nil)).Elem()
}

func (i ServiceActionMap) ToServiceActionMapOutput() ServiceActionMapOutput {
	return i.ToServiceActionMapOutputWithContext(context.Background())
}

func (i ServiceActionMap) ToServiceActionMapOutputWithContext(ctx context.Context) ServiceActionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceActionMapOutput)
}

type ServiceActionOutput struct{ *pulumi.OutputState }

func (ServiceActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAction)(nil)).Elem()
}

func (o ServiceActionOutput) ToServiceActionOutput() ServiceActionOutput {
	return o
}

func (o ServiceActionOutput) ToServiceActionOutputWithContext(ctx context.Context) ServiceActionOutput {
	return o
}

func (o ServiceActionOutput) AcceptLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAction) pulumi.StringPtrOutput { return v.AcceptLanguage }).(pulumi.StringPtrOutput)
}

func (o ServiceActionOutput) Definition() ServiceActionDefinitionOutput {
	return o.ApplyT(func(v *ServiceAction) ServiceActionDefinitionOutput { return v.Definition }).(ServiceActionDefinitionOutput)
}

func (o ServiceActionOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceAction) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o ServiceActionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceAction) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type ServiceActionArrayOutput struct{ *pulumi.OutputState }

func (ServiceActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceAction)(nil)).Elem()
}

func (o ServiceActionArrayOutput) ToServiceActionArrayOutput() ServiceActionArrayOutput {
	return o
}

func (o ServiceActionArrayOutput) ToServiceActionArrayOutputWithContext(ctx context.Context) ServiceActionArrayOutput {
	return o
}

func (o ServiceActionArrayOutput) Index(i pulumi.IntInput) ServiceActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceAction {
		return vs[0].([]*ServiceAction)[vs[1].(int)]
	}).(ServiceActionOutput)
}

type ServiceActionMapOutput struct{ *pulumi.OutputState }

func (ServiceActionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceAction)(nil)).Elem()
}

func (o ServiceActionMapOutput) ToServiceActionMapOutput() ServiceActionMapOutput {
	return o
}

func (o ServiceActionMapOutput) ToServiceActionMapOutputWithContext(ctx context.Context) ServiceActionMapOutput {
	return o
}

func (o ServiceActionMapOutput) MapIndex(k pulumi.StringInput) ServiceActionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceAction {
		return vs[0].(map[string]*ServiceAction)[vs[1].(string)]
	}).(ServiceActionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceActionInput)(nil)).Elem(), &ServiceAction{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceActionArrayInput)(nil)).Elem(), ServiceActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceActionMapInput)(nil)).Elem(), ServiceActionMap{})
	pulumi.RegisterOutputType(ServiceActionOutput{})
	pulumi.RegisterOutputType(ServiceActionArrayOutput{})
	pulumi.RegisterOutputType(ServiceActionMapOutput{})
}
