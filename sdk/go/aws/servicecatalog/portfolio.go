// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package servicecatalog

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a resource to create a Service Catalog Portfolio.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v3/go/aws/servicecatalog"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := servicecatalog.NewPortfolio(ctx, "portfolio", &servicecatalog.PortfolioArgs{
// 			Description:  pulumi.String("List of my organizations apps"),
// 			ProviderName: pulumi.String("Brett"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Service Catalog Portfolios can be imported using the `service catalog portfolio id`, e.g.
//
// ```sh
//  $ pulumi import aws:servicecatalog/portfolio:Portfolio testfolio port-12344321
// ```
type Portfolio struct {
	pulumi.CustomResourceState

	Arn         pulumi.StringOutput `pulumi:"arn"`
	CreatedTime pulumi.StringOutput `pulumi:"createdTime"`
	// Description of the portfolio
	Description pulumi.StringOutput `pulumi:"description"`
	// The name of the portfolio.
	Name pulumi.StringOutput `pulumi:"name"`
	// Name of the person or organization who owns the portfolio.
	ProviderName pulumi.StringPtrOutput `pulumi:"providerName"`
	// Tags to apply to the connection.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewPortfolio registers a new resource with the given unique name, arguments, and options.
func NewPortfolio(ctx *pulumi.Context,
	name string, args *PortfolioArgs, opts ...pulumi.ResourceOption) (*Portfolio, error) {
	if args == nil {
		args = &PortfolioArgs{}
	}

	var resource Portfolio
	err := ctx.RegisterResource("aws:servicecatalog/portfolio:Portfolio", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPortfolio gets an existing Portfolio resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPortfolio(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PortfolioState, opts ...pulumi.ResourceOption) (*Portfolio, error) {
	var resource Portfolio
	err := ctx.ReadResource("aws:servicecatalog/portfolio:Portfolio", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Portfolio resources.
type portfolioState struct {
	Arn         *string `pulumi:"arn"`
	CreatedTime *string `pulumi:"createdTime"`
	// Description of the portfolio
	Description *string `pulumi:"description"`
	// The name of the portfolio.
	Name *string `pulumi:"name"`
	// Name of the person or organization who owns the portfolio.
	ProviderName *string `pulumi:"providerName"`
	// Tags to apply to the connection.
	Tags map[string]string `pulumi:"tags"`
}

type PortfolioState struct {
	Arn         pulumi.StringPtrInput
	CreatedTime pulumi.StringPtrInput
	// Description of the portfolio
	Description pulumi.StringPtrInput
	// The name of the portfolio.
	Name pulumi.StringPtrInput
	// Name of the person or organization who owns the portfolio.
	ProviderName pulumi.StringPtrInput
	// Tags to apply to the connection.
	Tags pulumi.StringMapInput
}

func (PortfolioState) ElementType() reflect.Type {
	return reflect.TypeOf((*portfolioState)(nil)).Elem()
}

type portfolioArgs struct {
	// Description of the portfolio
	Description *string `pulumi:"description"`
	// The name of the portfolio.
	Name *string `pulumi:"name"`
	// Name of the person or organization who owns the portfolio.
	ProviderName *string `pulumi:"providerName"`
	// Tags to apply to the connection.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Portfolio resource.
type PortfolioArgs struct {
	// Description of the portfolio
	Description pulumi.StringPtrInput
	// The name of the portfolio.
	Name pulumi.StringPtrInput
	// Name of the person or organization who owns the portfolio.
	ProviderName pulumi.StringPtrInput
	// Tags to apply to the connection.
	Tags pulumi.StringMapInput
}

func (PortfolioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*portfolioArgs)(nil)).Elem()
}

type PortfolioInput interface {
	pulumi.Input

	ToPortfolioOutput() PortfolioOutput
	ToPortfolioOutputWithContext(ctx context.Context) PortfolioOutput
}

func (Portfolio) ElementType() reflect.Type {
	return reflect.TypeOf((*Portfolio)(nil)).Elem()
}

func (i Portfolio) ToPortfolioOutput() PortfolioOutput {
	return i.ToPortfolioOutputWithContext(context.Background())
}

func (i Portfolio) ToPortfolioOutputWithContext(ctx context.Context) PortfolioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortfolioOutput)
}

type PortfolioOutput struct {
	*pulumi.OutputState
}

func (PortfolioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PortfolioOutput)(nil)).Elem()
}

func (o PortfolioOutput) ToPortfolioOutput() PortfolioOutput {
	return o
}

func (o PortfolioOutput) ToPortfolioOutputWithContext(ctx context.Context) PortfolioOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(PortfolioOutput{})
}
