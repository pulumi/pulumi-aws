// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package servicecatalog

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Service Catalog Principal Portfolio Association.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/servicecatalog"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := servicecatalog.NewPrincipalPortfolioAssociation(ctx, "example", &servicecatalog.PrincipalPortfolioAssociationArgs{
// 			PortfolioId:  pulumi.String("port-68656c6c6f"),
// 			PrincipalArn: pulumi.String("arn:aws:iam::123456789012:user/Eleanor"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// `aws_servicecatalog_principal_portfolio_association` can be imported using the accept language, principal ARN, and portfolio ID, separated by a comma, e.g.
//
// ```sh
//  $ pulumi import aws:servicecatalog/principalPortfolioAssociation:PrincipalPortfolioAssociation example en,arn:aws:iam::123456789012:user/Eleanor,port-68656c6c6f
// ```
type PrincipalPortfolioAssociation struct {
	pulumi.CustomResourceState

	// Language code. Valid values: `en` (English), `jp` (Japanese), `zh` (Chinese). Default value is `en`.
	AcceptLanguage pulumi.StringPtrOutput `pulumi:"acceptLanguage"`
	// Portfolio identifier.
	PortfolioId pulumi.StringOutput `pulumi:"portfolioId"`
	// Principal ARN.
	PrincipalArn pulumi.StringOutput `pulumi:"principalArn"`
	// Principal type. Setting this argument empty (e.g., `principalType = ""`) will result in an error. Valid value is `IAM`. Default is `IAM`.
	PrincipalType pulumi.StringPtrOutput `pulumi:"principalType"`
}

// NewPrincipalPortfolioAssociation registers a new resource with the given unique name, arguments, and options.
func NewPrincipalPortfolioAssociation(ctx *pulumi.Context,
	name string, args *PrincipalPortfolioAssociationArgs, opts ...pulumi.ResourceOption) (*PrincipalPortfolioAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PortfolioId == nil {
		return nil, errors.New("invalid value for required argument 'PortfolioId'")
	}
	if args.PrincipalArn == nil {
		return nil, errors.New("invalid value for required argument 'PrincipalArn'")
	}
	var resource PrincipalPortfolioAssociation
	err := ctx.RegisterResource("aws:servicecatalog/principalPortfolioAssociation:PrincipalPortfolioAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrincipalPortfolioAssociation gets an existing PrincipalPortfolioAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrincipalPortfolioAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrincipalPortfolioAssociationState, opts ...pulumi.ResourceOption) (*PrincipalPortfolioAssociation, error) {
	var resource PrincipalPortfolioAssociation
	err := ctx.ReadResource("aws:servicecatalog/principalPortfolioAssociation:PrincipalPortfolioAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrincipalPortfolioAssociation resources.
type principalPortfolioAssociationState struct {
	// Language code. Valid values: `en` (English), `jp` (Japanese), `zh` (Chinese). Default value is `en`.
	AcceptLanguage *string `pulumi:"acceptLanguage"`
	// Portfolio identifier.
	PortfolioId *string `pulumi:"portfolioId"`
	// Principal ARN.
	PrincipalArn *string `pulumi:"principalArn"`
	// Principal type. Setting this argument empty (e.g., `principalType = ""`) will result in an error. Valid value is `IAM`. Default is `IAM`.
	PrincipalType *string `pulumi:"principalType"`
}

type PrincipalPortfolioAssociationState struct {
	// Language code. Valid values: `en` (English), `jp` (Japanese), `zh` (Chinese). Default value is `en`.
	AcceptLanguage pulumi.StringPtrInput
	// Portfolio identifier.
	PortfolioId pulumi.StringPtrInput
	// Principal ARN.
	PrincipalArn pulumi.StringPtrInput
	// Principal type. Setting this argument empty (e.g., `principalType = ""`) will result in an error. Valid value is `IAM`. Default is `IAM`.
	PrincipalType pulumi.StringPtrInput
}

func (PrincipalPortfolioAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*principalPortfolioAssociationState)(nil)).Elem()
}

type principalPortfolioAssociationArgs struct {
	// Language code. Valid values: `en` (English), `jp` (Japanese), `zh` (Chinese). Default value is `en`.
	AcceptLanguage *string `pulumi:"acceptLanguage"`
	// Portfolio identifier.
	PortfolioId string `pulumi:"portfolioId"`
	// Principal ARN.
	PrincipalArn string `pulumi:"principalArn"`
	// Principal type. Setting this argument empty (e.g., `principalType = ""`) will result in an error. Valid value is `IAM`. Default is `IAM`.
	PrincipalType *string `pulumi:"principalType"`
}

// The set of arguments for constructing a PrincipalPortfolioAssociation resource.
type PrincipalPortfolioAssociationArgs struct {
	// Language code. Valid values: `en` (English), `jp` (Japanese), `zh` (Chinese). Default value is `en`.
	AcceptLanguage pulumi.StringPtrInput
	// Portfolio identifier.
	PortfolioId pulumi.StringInput
	// Principal ARN.
	PrincipalArn pulumi.StringInput
	// Principal type. Setting this argument empty (e.g., `principalType = ""`) will result in an error. Valid value is `IAM`. Default is `IAM`.
	PrincipalType pulumi.StringPtrInput
}

func (PrincipalPortfolioAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*principalPortfolioAssociationArgs)(nil)).Elem()
}

type PrincipalPortfolioAssociationInput interface {
	pulumi.Input

	ToPrincipalPortfolioAssociationOutput() PrincipalPortfolioAssociationOutput
	ToPrincipalPortfolioAssociationOutputWithContext(ctx context.Context) PrincipalPortfolioAssociationOutput
}

func (*PrincipalPortfolioAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((*PrincipalPortfolioAssociation)(nil))
}

func (i *PrincipalPortfolioAssociation) ToPrincipalPortfolioAssociationOutput() PrincipalPortfolioAssociationOutput {
	return i.ToPrincipalPortfolioAssociationOutputWithContext(context.Background())
}

func (i *PrincipalPortfolioAssociation) ToPrincipalPortfolioAssociationOutputWithContext(ctx context.Context) PrincipalPortfolioAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrincipalPortfolioAssociationOutput)
}

func (i *PrincipalPortfolioAssociation) ToPrincipalPortfolioAssociationPtrOutput() PrincipalPortfolioAssociationPtrOutput {
	return i.ToPrincipalPortfolioAssociationPtrOutputWithContext(context.Background())
}

func (i *PrincipalPortfolioAssociation) ToPrincipalPortfolioAssociationPtrOutputWithContext(ctx context.Context) PrincipalPortfolioAssociationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrincipalPortfolioAssociationPtrOutput)
}

type PrincipalPortfolioAssociationPtrInput interface {
	pulumi.Input

	ToPrincipalPortfolioAssociationPtrOutput() PrincipalPortfolioAssociationPtrOutput
	ToPrincipalPortfolioAssociationPtrOutputWithContext(ctx context.Context) PrincipalPortfolioAssociationPtrOutput
}

type principalPortfolioAssociationPtrType PrincipalPortfolioAssociationArgs

func (*principalPortfolioAssociationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrincipalPortfolioAssociation)(nil))
}

func (i *principalPortfolioAssociationPtrType) ToPrincipalPortfolioAssociationPtrOutput() PrincipalPortfolioAssociationPtrOutput {
	return i.ToPrincipalPortfolioAssociationPtrOutputWithContext(context.Background())
}

func (i *principalPortfolioAssociationPtrType) ToPrincipalPortfolioAssociationPtrOutputWithContext(ctx context.Context) PrincipalPortfolioAssociationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrincipalPortfolioAssociationPtrOutput)
}

// PrincipalPortfolioAssociationArrayInput is an input type that accepts PrincipalPortfolioAssociationArray and PrincipalPortfolioAssociationArrayOutput values.
// You can construct a concrete instance of `PrincipalPortfolioAssociationArrayInput` via:
//
//          PrincipalPortfolioAssociationArray{ PrincipalPortfolioAssociationArgs{...} }
type PrincipalPortfolioAssociationArrayInput interface {
	pulumi.Input

	ToPrincipalPortfolioAssociationArrayOutput() PrincipalPortfolioAssociationArrayOutput
	ToPrincipalPortfolioAssociationArrayOutputWithContext(context.Context) PrincipalPortfolioAssociationArrayOutput
}

type PrincipalPortfolioAssociationArray []PrincipalPortfolioAssociationInput

func (PrincipalPortfolioAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrincipalPortfolioAssociation)(nil)).Elem()
}

func (i PrincipalPortfolioAssociationArray) ToPrincipalPortfolioAssociationArrayOutput() PrincipalPortfolioAssociationArrayOutput {
	return i.ToPrincipalPortfolioAssociationArrayOutputWithContext(context.Background())
}

func (i PrincipalPortfolioAssociationArray) ToPrincipalPortfolioAssociationArrayOutputWithContext(ctx context.Context) PrincipalPortfolioAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrincipalPortfolioAssociationArrayOutput)
}

// PrincipalPortfolioAssociationMapInput is an input type that accepts PrincipalPortfolioAssociationMap and PrincipalPortfolioAssociationMapOutput values.
// You can construct a concrete instance of `PrincipalPortfolioAssociationMapInput` via:
//
//          PrincipalPortfolioAssociationMap{ "key": PrincipalPortfolioAssociationArgs{...} }
type PrincipalPortfolioAssociationMapInput interface {
	pulumi.Input

	ToPrincipalPortfolioAssociationMapOutput() PrincipalPortfolioAssociationMapOutput
	ToPrincipalPortfolioAssociationMapOutputWithContext(context.Context) PrincipalPortfolioAssociationMapOutput
}

type PrincipalPortfolioAssociationMap map[string]PrincipalPortfolioAssociationInput

func (PrincipalPortfolioAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrincipalPortfolioAssociation)(nil)).Elem()
}

func (i PrincipalPortfolioAssociationMap) ToPrincipalPortfolioAssociationMapOutput() PrincipalPortfolioAssociationMapOutput {
	return i.ToPrincipalPortfolioAssociationMapOutputWithContext(context.Background())
}

func (i PrincipalPortfolioAssociationMap) ToPrincipalPortfolioAssociationMapOutputWithContext(ctx context.Context) PrincipalPortfolioAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrincipalPortfolioAssociationMapOutput)
}

type PrincipalPortfolioAssociationOutput struct {
	*pulumi.OutputState
}

func (PrincipalPortfolioAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrincipalPortfolioAssociation)(nil))
}

func (o PrincipalPortfolioAssociationOutput) ToPrincipalPortfolioAssociationOutput() PrincipalPortfolioAssociationOutput {
	return o
}

func (o PrincipalPortfolioAssociationOutput) ToPrincipalPortfolioAssociationOutputWithContext(ctx context.Context) PrincipalPortfolioAssociationOutput {
	return o
}

func (o PrincipalPortfolioAssociationOutput) ToPrincipalPortfolioAssociationPtrOutput() PrincipalPortfolioAssociationPtrOutput {
	return o.ToPrincipalPortfolioAssociationPtrOutputWithContext(context.Background())
}

func (o PrincipalPortfolioAssociationOutput) ToPrincipalPortfolioAssociationPtrOutputWithContext(ctx context.Context) PrincipalPortfolioAssociationPtrOutput {
	return o.ApplyT(func(v PrincipalPortfolioAssociation) *PrincipalPortfolioAssociation {
		return &v
	}).(PrincipalPortfolioAssociationPtrOutput)
}

type PrincipalPortfolioAssociationPtrOutput struct {
	*pulumi.OutputState
}

func (PrincipalPortfolioAssociationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrincipalPortfolioAssociation)(nil))
}

func (o PrincipalPortfolioAssociationPtrOutput) ToPrincipalPortfolioAssociationPtrOutput() PrincipalPortfolioAssociationPtrOutput {
	return o
}

func (o PrincipalPortfolioAssociationPtrOutput) ToPrincipalPortfolioAssociationPtrOutputWithContext(ctx context.Context) PrincipalPortfolioAssociationPtrOutput {
	return o
}

type PrincipalPortfolioAssociationArrayOutput struct{ *pulumi.OutputState }

func (PrincipalPortfolioAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrincipalPortfolioAssociation)(nil))
}

func (o PrincipalPortfolioAssociationArrayOutput) ToPrincipalPortfolioAssociationArrayOutput() PrincipalPortfolioAssociationArrayOutput {
	return o
}

func (o PrincipalPortfolioAssociationArrayOutput) ToPrincipalPortfolioAssociationArrayOutputWithContext(ctx context.Context) PrincipalPortfolioAssociationArrayOutput {
	return o
}

func (o PrincipalPortfolioAssociationArrayOutput) Index(i pulumi.IntInput) PrincipalPortfolioAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrincipalPortfolioAssociation {
		return vs[0].([]PrincipalPortfolioAssociation)[vs[1].(int)]
	}).(PrincipalPortfolioAssociationOutput)
}

type PrincipalPortfolioAssociationMapOutput struct{ *pulumi.OutputState }

func (PrincipalPortfolioAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]PrincipalPortfolioAssociation)(nil))
}

func (o PrincipalPortfolioAssociationMapOutput) ToPrincipalPortfolioAssociationMapOutput() PrincipalPortfolioAssociationMapOutput {
	return o
}

func (o PrincipalPortfolioAssociationMapOutput) ToPrincipalPortfolioAssociationMapOutputWithContext(ctx context.Context) PrincipalPortfolioAssociationMapOutput {
	return o
}

func (o PrincipalPortfolioAssociationMapOutput) MapIndex(k pulumi.StringInput) PrincipalPortfolioAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) PrincipalPortfolioAssociation {
		return vs[0].(map[string]PrincipalPortfolioAssociation)[vs[1].(string)]
	}).(PrincipalPortfolioAssociationOutput)
}

func init() {
	pulumi.RegisterOutputType(PrincipalPortfolioAssociationOutput{})
	pulumi.RegisterOutputType(PrincipalPortfolioAssociationPtrOutput{})
	pulumi.RegisterOutputType(PrincipalPortfolioAssociationArrayOutput{})
	pulumi.RegisterOutputType(PrincipalPortfolioAssociationMapOutput{})
}
