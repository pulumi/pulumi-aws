// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicecatalog

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PrincipalPortfolioAssociation struct {
	pulumi.CustomResourceState

	AcceptLanguage pulumi.StringPtrOutput `pulumi:"acceptLanguage"`
	PortfolioId    pulumi.StringOutput    `pulumi:"portfolioId"`
	PrincipalArn   pulumi.StringOutput    `pulumi:"principalArn"`
	PrincipalType  pulumi.StringPtrOutput `pulumi:"principalType"`
}

// NewPrincipalPortfolioAssociation registers a new resource with the given unique name, arguments, and options.
func NewPrincipalPortfolioAssociation(ctx *pulumi.Context,
	name string, args *PrincipalPortfolioAssociationArgs, opts ...pulumi.ResourceOption) (*PrincipalPortfolioAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PortfolioId == nil {
		return nil, errors.New("invalid value for required argument 'PortfolioId'")
	}
	if args.PrincipalArn == nil {
		return nil, errors.New("invalid value for required argument 'PrincipalArn'")
	}
	var resource PrincipalPortfolioAssociation
	err := ctx.RegisterResource("aws:servicecatalog/principalPortfolioAssociation:PrincipalPortfolioAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrincipalPortfolioAssociation gets an existing PrincipalPortfolioAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrincipalPortfolioAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrincipalPortfolioAssociationState, opts ...pulumi.ResourceOption) (*PrincipalPortfolioAssociation, error) {
	var resource PrincipalPortfolioAssociation
	err := ctx.ReadResource("aws:servicecatalog/principalPortfolioAssociation:PrincipalPortfolioAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrincipalPortfolioAssociation resources.
type principalPortfolioAssociationState struct {
	AcceptLanguage *string `pulumi:"acceptLanguage"`
	PortfolioId    *string `pulumi:"portfolioId"`
	PrincipalArn   *string `pulumi:"principalArn"`
	PrincipalType  *string `pulumi:"principalType"`
}

type PrincipalPortfolioAssociationState struct {
	AcceptLanguage pulumi.StringPtrInput
	PortfolioId    pulumi.StringPtrInput
	PrincipalArn   pulumi.StringPtrInput
	PrincipalType  pulumi.StringPtrInput
}

func (PrincipalPortfolioAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*principalPortfolioAssociationState)(nil)).Elem()
}

type principalPortfolioAssociationArgs struct {
	AcceptLanguage *string `pulumi:"acceptLanguage"`
	PortfolioId    string  `pulumi:"portfolioId"`
	PrincipalArn   string  `pulumi:"principalArn"`
	PrincipalType  *string `pulumi:"principalType"`
}

// The set of arguments for constructing a PrincipalPortfolioAssociation resource.
type PrincipalPortfolioAssociationArgs struct {
	AcceptLanguage pulumi.StringPtrInput
	PortfolioId    pulumi.StringInput
	PrincipalArn   pulumi.StringInput
	PrincipalType  pulumi.StringPtrInput
}

func (PrincipalPortfolioAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*principalPortfolioAssociationArgs)(nil)).Elem()
}

type PrincipalPortfolioAssociationInput interface {
	pulumi.Input

	ToPrincipalPortfolioAssociationOutput() PrincipalPortfolioAssociationOutput
	ToPrincipalPortfolioAssociationOutputWithContext(ctx context.Context) PrincipalPortfolioAssociationOutput
}

func (*PrincipalPortfolioAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**PrincipalPortfolioAssociation)(nil)).Elem()
}

func (i *PrincipalPortfolioAssociation) ToPrincipalPortfolioAssociationOutput() PrincipalPortfolioAssociationOutput {
	return i.ToPrincipalPortfolioAssociationOutputWithContext(context.Background())
}

func (i *PrincipalPortfolioAssociation) ToPrincipalPortfolioAssociationOutputWithContext(ctx context.Context) PrincipalPortfolioAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrincipalPortfolioAssociationOutput)
}

// PrincipalPortfolioAssociationArrayInput is an input type that accepts PrincipalPortfolioAssociationArray and PrincipalPortfolioAssociationArrayOutput values.
// You can construct a concrete instance of `PrincipalPortfolioAssociationArrayInput` via:
//
//	PrincipalPortfolioAssociationArray{ PrincipalPortfolioAssociationArgs{...} }
type PrincipalPortfolioAssociationArrayInput interface {
	pulumi.Input

	ToPrincipalPortfolioAssociationArrayOutput() PrincipalPortfolioAssociationArrayOutput
	ToPrincipalPortfolioAssociationArrayOutputWithContext(context.Context) PrincipalPortfolioAssociationArrayOutput
}

type PrincipalPortfolioAssociationArray []PrincipalPortfolioAssociationInput

func (PrincipalPortfolioAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrincipalPortfolioAssociation)(nil)).Elem()
}

func (i PrincipalPortfolioAssociationArray) ToPrincipalPortfolioAssociationArrayOutput() PrincipalPortfolioAssociationArrayOutput {
	return i.ToPrincipalPortfolioAssociationArrayOutputWithContext(context.Background())
}

func (i PrincipalPortfolioAssociationArray) ToPrincipalPortfolioAssociationArrayOutputWithContext(ctx context.Context) PrincipalPortfolioAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrincipalPortfolioAssociationArrayOutput)
}

// PrincipalPortfolioAssociationMapInput is an input type that accepts PrincipalPortfolioAssociationMap and PrincipalPortfolioAssociationMapOutput values.
// You can construct a concrete instance of `PrincipalPortfolioAssociationMapInput` via:
//
//	PrincipalPortfolioAssociationMap{ "key": PrincipalPortfolioAssociationArgs{...} }
type PrincipalPortfolioAssociationMapInput interface {
	pulumi.Input

	ToPrincipalPortfolioAssociationMapOutput() PrincipalPortfolioAssociationMapOutput
	ToPrincipalPortfolioAssociationMapOutputWithContext(context.Context) PrincipalPortfolioAssociationMapOutput
}

type PrincipalPortfolioAssociationMap map[string]PrincipalPortfolioAssociationInput

func (PrincipalPortfolioAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrincipalPortfolioAssociation)(nil)).Elem()
}

func (i PrincipalPortfolioAssociationMap) ToPrincipalPortfolioAssociationMapOutput() PrincipalPortfolioAssociationMapOutput {
	return i.ToPrincipalPortfolioAssociationMapOutputWithContext(context.Background())
}

func (i PrincipalPortfolioAssociationMap) ToPrincipalPortfolioAssociationMapOutputWithContext(ctx context.Context) PrincipalPortfolioAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrincipalPortfolioAssociationMapOutput)
}

type PrincipalPortfolioAssociationOutput struct{ *pulumi.OutputState }

func (PrincipalPortfolioAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrincipalPortfolioAssociation)(nil)).Elem()
}

func (o PrincipalPortfolioAssociationOutput) ToPrincipalPortfolioAssociationOutput() PrincipalPortfolioAssociationOutput {
	return o
}

func (o PrincipalPortfolioAssociationOutput) ToPrincipalPortfolioAssociationOutputWithContext(ctx context.Context) PrincipalPortfolioAssociationOutput {
	return o
}

func (o PrincipalPortfolioAssociationOutput) AcceptLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrincipalPortfolioAssociation) pulumi.StringPtrOutput { return v.AcceptLanguage }).(pulumi.StringPtrOutput)
}

func (o PrincipalPortfolioAssociationOutput) PortfolioId() pulumi.StringOutput {
	return o.ApplyT(func(v *PrincipalPortfolioAssociation) pulumi.StringOutput { return v.PortfolioId }).(pulumi.StringOutput)
}

func (o PrincipalPortfolioAssociationOutput) PrincipalArn() pulumi.StringOutput {
	return o.ApplyT(func(v *PrincipalPortfolioAssociation) pulumi.StringOutput { return v.PrincipalArn }).(pulumi.StringOutput)
}

func (o PrincipalPortfolioAssociationOutput) PrincipalType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrincipalPortfolioAssociation) pulumi.StringPtrOutput { return v.PrincipalType }).(pulumi.StringPtrOutput)
}

type PrincipalPortfolioAssociationArrayOutput struct{ *pulumi.OutputState }

func (PrincipalPortfolioAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrincipalPortfolioAssociation)(nil)).Elem()
}

func (o PrincipalPortfolioAssociationArrayOutput) ToPrincipalPortfolioAssociationArrayOutput() PrincipalPortfolioAssociationArrayOutput {
	return o
}

func (o PrincipalPortfolioAssociationArrayOutput) ToPrincipalPortfolioAssociationArrayOutputWithContext(ctx context.Context) PrincipalPortfolioAssociationArrayOutput {
	return o
}

func (o PrincipalPortfolioAssociationArrayOutput) Index(i pulumi.IntInput) PrincipalPortfolioAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PrincipalPortfolioAssociation {
		return vs[0].([]*PrincipalPortfolioAssociation)[vs[1].(int)]
	}).(PrincipalPortfolioAssociationOutput)
}

type PrincipalPortfolioAssociationMapOutput struct{ *pulumi.OutputState }

func (PrincipalPortfolioAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrincipalPortfolioAssociation)(nil)).Elem()
}

func (o PrincipalPortfolioAssociationMapOutput) ToPrincipalPortfolioAssociationMapOutput() PrincipalPortfolioAssociationMapOutput {
	return o
}

func (o PrincipalPortfolioAssociationMapOutput) ToPrincipalPortfolioAssociationMapOutputWithContext(ctx context.Context) PrincipalPortfolioAssociationMapOutput {
	return o
}

func (o PrincipalPortfolioAssociationMapOutput) MapIndex(k pulumi.StringInput) PrincipalPortfolioAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PrincipalPortfolioAssociation {
		return vs[0].(map[string]*PrincipalPortfolioAssociation)[vs[1].(string)]
	}).(PrincipalPortfolioAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrincipalPortfolioAssociationInput)(nil)).Elem(), &PrincipalPortfolioAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrincipalPortfolioAssociationArrayInput)(nil)).Elem(), PrincipalPortfolioAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrincipalPortfolioAssociationMapInput)(nil)).Elem(), PrincipalPortfolioAssociationMap{})
	pulumi.RegisterOutputType(PrincipalPortfolioAssociationOutput{})
	pulumi.RegisterOutputType(PrincipalPortfolioAssociationArrayOutput{})
	pulumi.RegisterOutputType(PrincipalPortfolioAssociationMapOutput{})
}
