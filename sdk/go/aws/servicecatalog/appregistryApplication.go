// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicecatalog

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS Service Catalog AppRegistry Application.
//
// > An AWS Service Catalog AppRegistry Application is displayed in the AWS Console under "MyApplications".
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/servicecatalog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := servicecatalog.NewAppregistryApplication(ctx, "example", &servicecatalog.AppregistryApplicationArgs{
//				Name: pulumi.String("example-app"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Connecting Resources
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/s3"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/servicecatalog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := servicecatalog.NewAppregistryApplication(ctx, "example", &servicecatalog.AppregistryApplicationArgs{
//				Name: pulumi.String("example-app"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = s3.NewBucketV2(ctx, "bucket", &s3.BucketV2Args{
//				Bucket: pulumi.String("example-bucket"),
//				Tags:   example.ApplicationTag,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import AWS Service Catalog AppRegistry Application using the `id`. For example:
//
// ```sh
// $ pulumi import aws:servicecatalog/appregistryApplication:AppregistryApplication example application-id-12345678
// ```
type AppregistryApplication struct {
	pulumi.CustomResourceState

	// A map with a single tag key-value pair used to associate resources with the application. This attribute can be passed directly into the `tags` argument of another resource, or merged into a map of existing tags.
	ApplicationTag pulumi.StringMapOutput `pulumi:"applicationTag"`
	// ARN (Amazon Resource Name) of the application.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Description of the application.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Name of the application. The name must be unique within an AWS region.
	//
	// The following arguments are optional:
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewAppregistryApplication registers a new resource with the given unique name, arguments, and options.
func NewAppregistryApplication(ctx *pulumi.Context,
	name string, args *AppregistryApplicationArgs, opts ...pulumi.ResourceOption) (*AppregistryApplication, error) {
	if args == nil {
		args = &AppregistryApplicationArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppregistryApplication
	err := ctx.RegisterResource("aws:servicecatalog/appregistryApplication:AppregistryApplication", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppregistryApplication gets an existing AppregistryApplication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppregistryApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppregistryApplicationState, opts ...pulumi.ResourceOption) (*AppregistryApplication, error) {
	var resource AppregistryApplication
	err := ctx.ReadResource("aws:servicecatalog/appregistryApplication:AppregistryApplication", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppregistryApplication resources.
type appregistryApplicationState struct {
	// A map with a single tag key-value pair used to associate resources with the application. This attribute can be passed directly into the `tags` argument of another resource, or merged into a map of existing tags.
	ApplicationTag map[string]string `pulumi:"applicationTag"`
	// ARN (Amazon Resource Name) of the application.
	Arn *string `pulumi:"arn"`
	// Description of the application.
	Description *string `pulumi:"description"`
	// Name of the application. The name must be unique within an AWS region.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
}

type AppregistryApplicationState struct {
	// A map with a single tag key-value pair used to associate resources with the application. This attribute can be passed directly into the `tags` argument of another resource, or merged into a map of existing tags.
	ApplicationTag pulumi.StringMapInput
	// ARN (Amazon Resource Name) of the application.
	Arn pulumi.StringPtrInput
	// Description of the application.
	Description pulumi.StringPtrInput
	// Name of the application. The name must be unique within an AWS region.
	//
	// The following arguments are optional:
	Name pulumi.StringPtrInput
}

func (AppregistryApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*appregistryApplicationState)(nil)).Elem()
}

type appregistryApplicationArgs struct {
	// Description of the application.
	Description *string `pulumi:"description"`
	// Name of the application. The name must be unique within an AWS region.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a AppregistryApplication resource.
type AppregistryApplicationArgs struct {
	// Description of the application.
	Description pulumi.StringPtrInput
	// Name of the application. The name must be unique within an AWS region.
	//
	// The following arguments are optional:
	Name pulumi.StringPtrInput
}

func (AppregistryApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appregistryApplicationArgs)(nil)).Elem()
}

type AppregistryApplicationInput interface {
	pulumi.Input

	ToAppregistryApplicationOutput() AppregistryApplicationOutput
	ToAppregistryApplicationOutputWithContext(ctx context.Context) AppregistryApplicationOutput
}

func (*AppregistryApplication) ElementType() reflect.Type {
	return reflect.TypeOf((**AppregistryApplication)(nil)).Elem()
}

func (i *AppregistryApplication) ToAppregistryApplicationOutput() AppregistryApplicationOutput {
	return i.ToAppregistryApplicationOutputWithContext(context.Background())
}

func (i *AppregistryApplication) ToAppregistryApplicationOutputWithContext(ctx context.Context) AppregistryApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppregistryApplicationOutput)
}

// AppregistryApplicationArrayInput is an input type that accepts AppregistryApplicationArray and AppregistryApplicationArrayOutput values.
// You can construct a concrete instance of `AppregistryApplicationArrayInput` via:
//
//	AppregistryApplicationArray{ AppregistryApplicationArgs{...} }
type AppregistryApplicationArrayInput interface {
	pulumi.Input

	ToAppregistryApplicationArrayOutput() AppregistryApplicationArrayOutput
	ToAppregistryApplicationArrayOutputWithContext(context.Context) AppregistryApplicationArrayOutput
}

type AppregistryApplicationArray []AppregistryApplicationInput

func (AppregistryApplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppregistryApplication)(nil)).Elem()
}

func (i AppregistryApplicationArray) ToAppregistryApplicationArrayOutput() AppregistryApplicationArrayOutput {
	return i.ToAppregistryApplicationArrayOutputWithContext(context.Background())
}

func (i AppregistryApplicationArray) ToAppregistryApplicationArrayOutputWithContext(ctx context.Context) AppregistryApplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppregistryApplicationArrayOutput)
}

// AppregistryApplicationMapInput is an input type that accepts AppregistryApplicationMap and AppregistryApplicationMapOutput values.
// You can construct a concrete instance of `AppregistryApplicationMapInput` via:
//
//	AppregistryApplicationMap{ "key": AppregistryApplicationArgs{...} }
type AppregistryApplicationMapInput interface {
	pulumi.Input

	ToAppregistryApplicationMapOutput() AppregistryApplicationMapOutput
	ToAppregistryApplicationMapOutputWithContext(context.Context) AppregistryApplicationMapOutput
}

type AppregistryApplicationMap map[string]AppregistryApplicationInput

func (AppregistryApplicationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppregistryApplication)(nil)).Elem()
}

func (i AppregistryApplicationMap) ToAppregistryApplicationMapOutput() AppregistryApplicationMapOutput {
	return i.ToAppregistryApplicationMapOutputWithContext(context.Background())
}

func (i AppregistryApplicationMap) ToAppregistryApplicationMapOutputWithContext(ctx context.Context) AppregistryApplicationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppregistryApplicationMapOutput)
}

type AppregistryApplicationOutput struct{ *pulumi.OutputState }

func (AppregistryApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppregistryApplication)(nil)).Elem()
}

func (o AppregistryApplicationOutput) ToAppregistryApplicationOutput() AppregistryApplicationOutput {
	return o
}

func (o AppregistryApplicationOutput) ToAppregistryApplicationOutputWithContext(ctx context.Context) AppregistryApplicationOutput {
	return o
}

// A map with a single tag key-value pair used to associate resources with the application. This attribute can be passed directly into the `tags` argument of another resource, or merged into a map of existing tags.
func (o AppregistryApplicationOutput) ApplicationTag() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AppregistryApplication) pulumi.StringMapOutput { return v.ApplicationTag }).(pulumi.StringMapOutput)
}

// ARN (Amazon Resource Name) of the application.
func (o AppregistryApplicationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *AppregistryApplication) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Description of the application.
func (o AppregistryApplicationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppregistryApplication) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Name of the application. The name must be unique within an AWS region.
//
// The following arguments are optional:
func (o AppregistryApplicationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AppregistryApplication) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type AppregistryApplicationArrayOutput struct{ *pulumi.OutputState }

func (AppregistryApplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppregistryApplication)(nil)).Elem()
}

func (o AppregistryApplicationArrayOutput) ToAppregistryApplicationArrayOutput() AppregistryApplicationArrayOutput {
	return o
}

func (o AppregistryApplicationArrayOutput) ToAppregistryApplicationArrayOutputWithContext(ctx context.Context) AppregistryApplicationArrayOutput {
	return o
}

func (o AppregistryApplicationArrayOutput) Index(i pulumi.IntInput) AppregistryApplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppregistryApplication {
		return vs[0].([]*AppregistryApplication)[vs[1].(int)]
	}).(AppregistryApplicationOutput)
}

type AppregistryApplicationMapOutput struct{ *pulumi.OutputState }

func (AppregistryApplicationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppregistryApplication)(nil)).Elem()
}

func (o AppregistryApplicationMapOutput) ToAppregistryApplicationMapOutput() AppregistryApplicationMapOutput {
	return o
}

func (o AppregistryApplicationMapOutput) ToAppregistryApplicationMapOutputWithContext(ctx context.Context) AppregistryApplicationMapOutput {
	return o
}

func (o AppregistryApplicationMapOutput) MapIndex(k pulumi.StringInput) AppregistryApplicationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppregistryApplication {
		return vs[0].(map[string]*AppregistryApplication)[vs[1].(string)]
	}).(AppregistryApplicationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppregistryApplicationInput)(nil)).Elem(), &AppregistryApplication{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppregistryApplicationArrayInput)(nil)).Elem(), AppregistryApplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppregistryApplicationMapInput)(nil)).Elem(), AppregistryApplicationMap{})
	pulumi.RegisterOutputType(AppregistryApplicationOutput{})
	pulumi.RegisterOutputType(AppregistryApplicationArrayOutput{})
	pulumi.RegisterOutputType(AppregistryApplicationMapOutput{})
}
