// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicecatalog

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Constraint struct {
	pulumi.CustomResourceState

	AcceptLanguage pulumi.StringPtrOutput `pulumi:"acceptLanguage"`
	Description    pulumi.StringOutput    `pulumi:"description"`
	Owner          pulumi.StringOutput    `pulumi:"owner"`
	Parameters     pulumi.StringOutput    `pulumi:"parameters"`
	PortfolioId    pulumi.StringOutput    `pulumi:"portfolioId"`
	ProductId      pulumi.StringOutput    `pulumi:"productId"`
	Status         pulumi.StringOutput    `pulumi:"status"`
	Type           pulumi.StringOutput    `pulumi:"type"`
}

// NewConstraint registers a new resource with the given unique name, arguments, and options.
func NewConstraint(ctx *pulumi.Context,
	name string, args *ConstraintArgs, opts ...pulumi.ResourceOption) (*Constraint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	if args.PortfolioId == nil {
		return nil, errors.New("invalid value for required argument 'PortfolioId'")
	}
	if args.ProductId == nil {
		return nil, errors.New("invalid value for required argument 'ProductId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource Constraint
	err := ctx.RegisterResource("aws:servicecatalog/constraint:Constraint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConstraint gets an existing Constraint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConstraint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConstraintState, opts ...pulumi.ResourceOption) (*Constraint, error) {
	var resource Constraint
	err := ctx.ReadResource("aws:servicecatalog/constraint:Constraint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Constraint resources.
type constraintState struct {
	AcceptLanguage *string `pulumi:"acceptLanguage"`
	Description    *string `pulumi:"description"`
	Owner          *string `pulumi:"owner"`
	Parameters     *string `pulumi:"parameters"`
	PortfolioId    *string `pulumi:"portfolioId"`
	ProductId      *string `pulumi:"productId"`
	Status         *string `pulumi:"status"`
	Type           *string `pulumi:"type"`
}

type ConstraintState struct {
	AcceptLanguage pulumi.StringPtrInput
	Description    pulumi.StringPtrInput
	Owner          pulumi.StringPtrInput
	Parameters     pulumi.StringPtrInput
	PortfolioId    pulumi.StringPtrInput
	ProductId      pulumi.StringPtrInput
	Status         pulumi.StringPtrInput
	Type           pulumi.StringPtrInput
}

func (ConstraintState) ElementType() reflect.Type {
	return reflect.TypeOf((*constraintState)(nil)).Elem()
}

type constraintArgs struct {
	AcceptLanguage *string `pulumi:"acceptLanguage"`
	Description    *string `pulumi:"description"`
	Parameters     string  `pulumi:"parameters"`
	PortfolioId    string  `pulumi:"portfolioId"`
	ProductId      string  `pulumi:"productId"`
	Type           string  `pulumi:"type"`
}

// The set of arguments for constructing a Constraint resource.
type ConstraintArgs struct {
	AcceptLanguage pulumi.StringPtrInput
	Description    pulumi.StringPtrInput
	Parameters     pulumi.StringInput
	PortfolioId    pulumi.StringInput
	ProductId      pulumi.StringInput
	Type           pulumi.StringInput
}

func (ConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*constraintArgs)(nil)).Elem()
}

type ConstraintInput interface {
	pulumi.Input

	ToConstraintOutput() ConstraintOutput
	ToConstraintOutputWithContext(ctx context.Context) ConstraintOutput
}

func (*Constraint) ElementType() reflect.Type {
	return reflect.TypeOf((**Constraint)(nil)).Elem()
}

func (i *Constraint) ToConstraintOutput() ConstraintOutput {
	return i.ToConstraintOutputWithContext(context.Background())
}

func (i *Constraint) ToConstraintOutputWithContext(ctx context.Context) ConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConstraintOutput)
}

// ConstraintArrayInput is an input type that accepts ConstraintArray and ConstraintArrayOutput values.
// You can construct a concrete instance of `ConstraintArrayInput` via:
//
//	ConstraintArray{ ConstraintArgs{...} }
type ConstraintArrayInput interface {
	pulumi.Input

	ToConstraintArrayOutput() ConstraintArrayOutput
	ToConstraintArrayOutputWithContext(context.Context) ConstraintArrayOutput
}

type ConstraintArray []ConstraintInput

func (ConstraintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Constraint)(nil)).Elem()
}

func (i ConstraintArray) ToConstraintArrayOutput() ConstraintArrayOutput {
	return i.ToConstraintArrayOutputWithContext(context.Background())
}

func (i ConstraintArray) ToConstraintArrayOutputWithContext(ctx context.Context) ConstraintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConstraintArrayOutput)
}

// ConstraintMapInput is an input type that accepts ConstraintMap and ConstraintMapOutput values.
// You can construct a concrete instance of `ConstraintMapInput` via:
//
//	ConstraintMap{ "key": ConstraintArgs{...} }
type ConstraintMapInput interface {
	pulumi.Input

	ToConstraintMapOutput() ConstraintMapOutput
	ToConstraintMapOutputWithContext(context.Context) ConstraintMapOutput
}

type ConstraintMap map[string]ConstraintInput

func (ConstraintMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Constraint)(nil)).Elem()
}

func (i ConstraintMap) ToConstraintMapOutput() ConstraintMapOutput {
	return i.ToConstraintMapOutputWithContext(context.Background())
}

func (i ConstraintMap) ToConstraintMapOutputWithContext(ctx context.Context) ConstraintMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConstraintMapOutput)
}

type ConstraintOutput struct{ *pulumi.OutputState }

func (ConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Constraint)(nil)).Elem()
}

func (o ConstraintOutput) ToConstraintOutput() ConstraintOutput {
	return o
}

func (o ConstraintOutput) ToConstraintOutputWithContext(ctx context.Context) ConstraintOutput {
	return o
}

func (o ConstraintOutput) AcceptLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Constraint) pulumi.StringPtrOutput { return v.AcceptLanguage }).(pulumi.StringPtrOutput)
}

func (o ConstraintOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Constraint) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o ConstraintOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *Constraint) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

func (o ConstraintOutput) Parameters() pulumi.StringOutput {
	return o.ApplyT(func(v *Constraint) pulumi.StringOutput { return v.Parameters }).(pulumi.StringOutput)
}

func (o ConstraintOutput) PortfolioId() pulumi.StringOutput {
	return o.ApplyT(func(v *Constraint) pulumi.StringOutput { return v.PortfolioId }).(pulumi.StringOutput)
}

func (o ConstraintOutput) ProductId() pulumi.StringOutput {
	return o.ApplyT(func(v *Constraint) pulumi.StringOutput { return v.ProductId }).(pulumi.StringOutput)
}

func (o ConstraintOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Constraint) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o ConstraintOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Constraint) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type ConstraintArrayOutput struct{ *pulumi.OutputState }

func (ConstraintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Constraint)(nil)).Elem()
}

func (o ConstraintArrayOutput) ToConstraintArrayOutput() ConstraintArrayOutput {
	return o
}

func (o ConstraintArrayOutput) ToConstraintArrayOutputWithContext(ctx context.Context) ConstraintArrayOutput {
	return o
}

func (o ConstraintArrayOutput) Index(i pulumi.IntInput) ConstraintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Constraint {
		return vs[0].([]*Constraint)[vs[1].(int)]
	}).(ConstraintOutput)
}

type ConstraintMapOutput struct{ *pulumi.OutputState }

func (ConstraintMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Constraint)(nil)).Elem()
}

func (o ConstraintMapOutput) ToConstraintMapOutput() ConstraintMapOutput {
	return o
}

func (o ConstraintMapOutput) ToConstraintMapOutputWithContext(ctx context.Context) ConstraintMapOutput {
	return o
}

func (o ConstraintMapOutput) MapIndex(k pulumi.StringInput) ConstraintOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Constraint {
		return vs[0].(map[string]*Constraint)[vs[1].(string)]
	}).(ConstraintOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConstraintInput)(nil)).Elem(), &Constraint{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConstraintArrayInput)(nil)).Elem(), ConstraintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConstraintMapInput)(nil)).Elem(), ConstraintMap{})
	pulumi.RegisterOutputType(ConstraintOutput{})
	pulumi.RegisterOutputType(ConstraintArrayOutput{})
	pulumi.RegisterOutputType(ConstraintMapOutput{})
}
