// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicecatalog

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupConstraint(ctx *pulumi.Context, args *LookupConstraintArgs, opts ...pulumi.InvokeOption) (*LookupConstraintResult, error) {
	var rv LookupConstraintResult
	err := ctx.Invoke("aws:servicecatalog/getConstraint:getConstraint", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getConstraint.
type LookupConstraintArgs struct {
	AcceptLanguage *string `pulumi:"acceptLanguage"`
	Description    *string `pulumi:"description"`
	Id             string  `pulumi:"id"`
}

// A collection of values returned by getConstraint.
type LookupConstraintResult struct {
	AcceptLanguage *string `pulumi:"acceptLanguage"`
	Description    string  `pulumi:"description"`
	Id             string  `pulumi:"id"`
	Owner          string  `pulumi:"owner"`
	Parameters     string  `pulumi:"parameters"`
	PortfolioId    string  `pulumi:"portfolioId"`
	ProductId      string  `pulumi:"productId"`
	Status         string  `pulumi:"status"`
	Type           string  `pulumi:"type"`
}

func LookupConstraintOutput(ctx *pulumi.Context, args LookupConstraintOutputArgs, opts ...pulumi.InvokeOption) LookupConstraintResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupConstraintResult, error) {
			args := v.(LookupConstraintArgs)
			r, err := LookupConstraint(ctx, &args, opts...)
			var s LookupConstraintResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupConstraintResultOutput)
}

// A collection of arguments for invoking getConstraint.
type LookupConstraintOutputArgs struct {
	AcceptLanguage pulumi.StringPtrInput `pulumi:"acceptLanguage"`
	Description    pulumi.StringPtrInput `pulumi:"description"`
	Id             pulumi.StringInput    `pulumi:"id"`
}

func (LookupConstraintOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConstraintArgs)(nil)).Elem()
}

// A collection of values returned by getConstraint.
type LookupConstraintResultOutput struct{ *pulumi.OutputState }

func (LookupConstraintResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConstraintResult)(nil)).Elem()
}

func (o LookupConstraintResultOutput) ToLookupConstraintResultOutput() LookupConstraintResultOutput {
	return o
}

func (o LookupConstraintResultOutput) ToLookupConstraintResultOutputWithContext(ctx context.Context) LookupConstraintResultOutput {
	return o
}

func (o LookupConstraintResultOutput) AcceptLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupConstraintResult) *string { return v.AcceptLanguage }).(pulumi.StringPtrOutput)
}

func (o LookupConstraintResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConstraintResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupConstraintResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConstraintResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupConstraintResultOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConstraintResult) string { return v.Owner }).(pulumi.StringOutput)
}

func (o LookupConstraintResultOutput) Parameters() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConstraintResult) string { return v.Parameters }).(pulumi.StringOutput)
}

func (o LookupConstraintResultOutput) PortfolioId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConstraintResult) string { return v.PortfolioId }).(pulumi.StringOutput)
}

func (o LookupConstraintResultOutput) ProductId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConstraintResult) string { return v.ProductId }).(pulumi.StringOutput)
}

func (o LookupConstraintResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConstraintResult) string { return v.Status }).(pulumi.StringOutput)
}

func (o LookupConstraintResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConstraintResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupConstraintResultOutput{})
}
