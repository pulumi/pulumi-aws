// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides an AWS Backup Region Settings resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v3/go/aws/backup"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := backup.NewRegionSettings(ctx, "test", &backup.RegionSettingsArgs{
// 			ResourceTypeOptInPreference: pulumi.BoolMap{
// 				"Aurora":          pulumi.Bool(true),
// 				"DynamoDB":        pulumi.Bool(true),
// 				"EBS":             pulumi.Bool(true),
// 				"EC2":             pulumi.Bool(true),
// 				"EFS":             pulumi.Bool(true),
// 				"FSx":             pulumi.Bool(true),
// 				"RDS":             pulumi.Bool(true),
// 				"Storage Gateway": pulumi.Bool(true),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Backup Region Settings can be imported using the `region`, e.g.
//
// ```sh
//  $ pulumi import aws:backup/regionSettings:RegionSettings test us-west-2
// ```
type RegionSettings struct {
	pulumi.CustomResourceState

	// A map of services along with the opt-in preferences for the Region.
	ResourceTypeOptInPreference pulumi.BoolMapOutput `pulumi:"resourceTypeOptInPreference"`
}

// NewRegionSettings registers a new resource with the given unique name, arguments, and options.
func NewRegionSettings(ctx *pulumi.Context,
	name string, args *RegionSettingsArgs, opts ...pulumi.ResourceOption) (*RegionSettings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceTypeOptInPreference == nil {
		return nil, errors.New("invalid value for required argument 'ResourceTypeOptInPreference'")
	}
	var resource RegionSettings
	err := ctx.RegisterResource("aws:backup/regionSettings:RegionSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegionSettings gets an existing RegionSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegionSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegionSettingsState, opts ...pulumi.ResourceOption) (*RegionSettings, error) {
	var resource RegionSettings
	err := ctx.ReadResource("aws:backup/regionSettings:RegionSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegionSettings resources.
type regionSettingsState struct {
	// A map of services along with the opt-in preferences for the Region.
	ResourceTypeOptInPreference map[string]bool `pulumi:"resourceTypeOptInPreference"`
}

type RegionSettingsState struct {
	// A map of services along with the opt-in preferences for the Region.
	ResourceTypeOptInPreference pulumi.BoolMapInput
}

func (RegionSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*regionSettingsState)(nil)).Elem()
}

type regionSettingsArgs struct {
	// A map of services along with the opt-in preferences for the Region.
	ResourceTypeOptInPreference map[string]bool `pulumi:"resourceTypeOptInPreference"`
}

// The set of arguments for constructing a RegionSettings resource.
type RegionSettingsArgs struct {
	// A map of services along with the opt-in preferences for the Region.
	ResourceTypeOptInPreference pulumi.BoolMapInput
}

func (RegionSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*regionSettingsArgs)(nil)).Elem()
}

type RegionSettingsInput interface {
	pulumi.Input

	ToRegionSettingsOutput() RegionSettingsOutput
	ToRegionSettingsOutputWithContext(ctx context.Context) RegionSettingsOutput
}

func (RegionSettings) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionSettings)(nil)).Elem()
}

func (i RegionSettings) ToRegionSettingsOutput() RegionSettingsOutput {
	return i.ToRegionSettingsOutputWithContext(context.Background())
}

func (i RegionSettings) ToRegionSettingsOutputWithContext(ctx context.Context) RegionSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionSettingsOutput)
}

type RegionSettingsOutput struct {
	*pulumi.OutputState
}

func (RegionSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionSettingsOutput)(nil)).Elem()
}

func (o RegionSettingsOutput) ToRegionSettingsOutput() RegionSettingsOutput {
	return o
}

func (o RegionSettingsOutput) ToRegionSettingsOutputWithContext(ctx context.Context) RegionSettingsOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(RegionSettingsOutput{})
}
