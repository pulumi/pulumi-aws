// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an AWS Backup Region Settings resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/backup"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := backup.NewRegionSettings(ctx, "test", &backup.RegionSettingsArgs{
//				ResourceTypeOptInPreference: pulumi.BoolMap{
//					"Aurora":                 pulumi.Bool(true),
//					"CloudFormation":         pulumi.Bool(true),
//					"DocumentDB":             pulumi.Bool(true),
//					"DSQL":                   pulumi.Bool(true),
//					"DynamoDB":               pulumi.Bool(true),
//					"EBS":                    pulumi.Bool(true),
//					"EC2":                    pulumi.Bool(true),
//					"EFS":                    pulumi.Bool(true),
//					"FSx":                    pulumi.Bool(true),
//					"Neptune":                pulumi.Bool(true),
//					"Redshift":               pulumi.Bool(true),
//					"Redshift Serverless":    pulumi.Bool(false),
//					"RDS":                    pulumi.Bool(false),
//					"S3":                     pulumi.Bool(false),
//					"SAP HANA on Amazon EC2": pulumi.Bool(false),
//					"Storage Gateway":        pulumi.Bool(false),
//					"VirtualMachine":         pulumi.Bool(false),
//				},
//				ResourceTypeManagementPreference: pulumi.BoolMap{
//					"CloudFormation": pulumi.Bool(true),
//					"DSQL":           pulumi.Bool(true),
//					"DynamoDB":       pulumi.Bool(false),
//					"EFS":            pulumi.Bool(false),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Backup Region Settings using the `region`. For example:
//
// ```sh
// $ pulumi import aws:backup/regionSettings:RegionSettings test us-west-2
// ```
type RegionSettings struct {
	pulumi.CustomResourceState

	// A map of service names to their full management preferences for the Region. For more information, see the AWS Documentation on [what full management is](https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#full-management) and [which services support full management](https://docs.aws.amazon.com/aws-backup/latest/devguide/backup-feature-availability.html#features-by-resource).
	ResourceTypeManagementPreference pulumi.BoolMapOutput `pulumi:"resourceTypeManagementPreference"`
	// A map of service names to their opt-in preferences for the Region. See [AWS Documentation on which services support backup](https://docs.aws.amazon.com/aws-backup/latest/devguide/backup-feature-availability.html).
	ResourceTypeOptInPreference pulumi.BoolMapOutput `pulumi:"resourceTypeOptInPreference"`
}

// NewRegionSettings registers a new resource with the given unique name, arguments, and options.
func NewRegionSettings(ctx *pulumi.Context,
	name string, args *RegionSettingsArgs, opts ...pulumi.ResourceOption) (*RegionSettings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceTypeOptInPreference == nil {
		return nil, errors.New("invalid value for required argument 'ResourceTypeOptInPreference'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegionSettings
	err := ctx.RegisterResource("aws:backup/regionSettings:RegionSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegionSettings gets an existing RegionSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegionSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegionSettingsState, opts ...pulumi.ResourceOption) (*RegionSettings, error) {
	var resource RegionSettings
	err := ctx.ReadResource("aws:backup/regionSettings:RegionSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegionSettings resources.
type regionSettingsState struct {
	// A map of service names to their full management preferences for the Region. For more information, see the AWS Documentation on [what full management is](https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#full-management) and [which services support full management](https://docs.aws.amazon.com/aws-backup/latest/devguide/backup-feature-availability.html#features-by-resource).
	ResourceTypeManagementPreference map[string]bool `pulumi:"resourceTypeManagementPreference"`
	// A map of service names to their opt-in preferences for the Region. See [AWS Documentation on which services support backup](https://docs.aws.amazon.com/aws-backup/latest/devguide/backup-feature-availability.html).
	ResourceTypeOptInPreference map[string]bool `pulumi:"resourceTypeOptInPreference"`
}

type RegionSettingsState struct {
	// A map of service names to their full management preferences for the Region. For more information, see the AWS Documentation on [what full management is](https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#full-management) and [which services support full management](https://docs.aws.amazon.com/aws-backup/latest/devguide/backup-feature-availability.html#features-by-resource).
	ResourceTypeManagementPreference pulumi.BoolMapInput
	// A map of service names to their opt-in preferences for the Region. See [AWS Documentation on which services support backup](https://docs.aws.amazon.com/aws-backup/latest/devguide/backup-feature-availability.html).
	ResourceTypeOptInPreference pulumi.BoolMapInput
}

func (RegionSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*regionSettingsState)(nil)).Elem()
}

type regionSettingsArgs struct {
	// A map of service names to their full management preferences for the Region. For more information, see the AWS Documentation on [what full management is](https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#full-management) and [which services support full management](https://docs.aws.amazon.com/aws-backup/latest/devguide/backup-feature-availability.html#features-by-resource).
	ResourceTypeManagementPreference map[string]bool `pulumi:"resourceTypeManagementPreference"`
	// A map of service names to their opt-in preferences for the Region. See [AWS Documentation on which services support backup](https://docs.aws.amazon.com/aws-backup/latest/devguide/backup-feature-availability.html).
	ResourceTypeOptInPreference map[string]bool `pulumi:"resourceTypeOptInPreference"`
}

// The set of arguments for constructing a RegionSettings resource.
type RegionSettingsArgs struct {
	// A map of service names to their full management preferences for the Region. For more information, see the AWS Documentation on [what full management is](https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#full-management) and [which services support full management](https://docs.aws.amazon.com/aws-backup/latest/devguide/backup-feature-availability.html#features-by-resource).
	ResourceTypeManagementPreference pulumi.BoolMapInput
	// A map of service names to their opt-in preferences for the Region. See [AWS Documentation on which services support backup](https://docs.aws.amazon.com/aws-backup/latest/devguide/backup-feature-availability.html).
	ResourceTypeOptInPreference pulumi.BoolMapInput
}

func (RegionSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*regionSettingsArgs)(nil)).Elem()
}

type RegionSettingsInput interface {
	pulumi.Input

	ToRegionSettingsOutput() RegionSettingsOutput
	ToRegionSettingsOutputWithContext(ctx context.Context) RegionSettingsOutput
}

func (*RegionSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionSettings)(nil)).Elem()
}

func (i *RegionSettings) ToRegionSettingsOutput() RegionSettingsOutput {
	return i.ToRegionSettingsOutputWithContext(context.Background())
}

func (i *RegionSettings) ToRegionSettingsOutputWithContext(ctx context.Context) RegionSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionSettingsOutput)
}

// RegionSettingsArrayInput is an input type that accepts RegionSettingsArray and RegionSettingsArrayOutput values.
// You can construct a concrete instance of `RegionSettingsArrayInput` via:
//
//	RegionSettingsArray{ RegionSettingsArgs{...} }
type RegionSettingsArrayInput interface {
	pulumi.Input

	ToRegionSettingsArrayOutput() RegionSettingsArrayOutput
	ToRegionSettingsArrayOutputWithContext(context.Context) RegionSettingsArrayOutput
}

type RegionSettingsArray []RegionSettingsInput

func (RegionSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionSettings)(nil)).Elem()
}

func (i RegionSettingsArray) ToRegionSettingsArrayOutput() RegionSettingsArrayOutput {
	return i.ToRegionSettingsArrayOutputWithContext(context.Background())
}

func (i RegionSettingsArray) ToRegionSettingsArrayOutputWithContext(ctx context.Context) RegionSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionSettingsArrayOutput)
}

// RegionSettingsMapInput is an input type that accepts RegionSettingsMap and RegionSettingsMapOutput values.
// You can construct a concrete instance of `RegionSettingsMapInput` via:
//
//	RegionSettingsMap{ "key": RegionSettingsArgs{...} }
type RegionSettingsMapInput interface {
	pulumi.Input

	ToRegionSettingsMapOutput() RegionSettingsMapOutput
	ToRegionSettingsMapOutputWithContext(context.Context) RegionSettingsMapOutput
}

type RegionSettingsMap map[string]RegionSettingsInput

func (RegionSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionSettings)(nil)).Elem()
}

func (i RegionSettingsMap) ToRegionSettingsMapOutput() RegionSettingsMapOutput {
	return i.ToRegionSettingsMapOutputWithContext(context.Background())
}

func (i RegionSettingsMap) ToRegionSettingsMapOutputWithContext(ctx context.Context) RegionSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionSettingsMapOutput)
}

type RegionSettingsOutput struct{ *pulumi.OutputState }

func (RegionSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionSettings)(nil)).Elem()
}

func (o RegionSettingsOutput) ToRegionSettingsOutput() RegionSettingsOutput {
	return o
}

func (o RegionSettingsOutput) ToRegionSettingsOutputWithContext(ctx context.Context) RegionSettingsOutput {
	return o
}

// A map of service names to their full management preferences for the Region. For more information, see the AWS Documentation on [what full management is](https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#full-management) and [which services support full management](https://docs.aws.amazon.com/aws-backup/latest/devguide/backup-feature-availability.html#features-by-resource).
func (o RegionSettingsOutput) ResourceTypeManagementPreference() pulumi.BoolMapOutput {
	return o.ApplyT(func(v *RegionSettings) pulumi.BoolMapOutput { return v.ResourceTypeManagementPreference }).(pulumi.BoolMapOutput)
}

// A map of service names to their opt-in preferences for the Region. See [AWS Documentation on which services support backup](https://docs.aws.amazon.com/aws-backup/latest/devguide/backup-feature-availability.html).
func (o RegionSettingsOutput) ResourceTypeOptInPreference() pulumi.BoolMapOutput {
	return o.ApplyT(func(v *RegionSettings) pulumi.BoolMapOutput { return v.ResourceTypeOptInPreference }).(pulumi.BoolMapOutput)
}

type RegionSettingsArrayOutput struct{ *pulumi.OutputState }

func (RegionSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionSettings)(nil)).Elem()
}

func (o RegionSettingsArrayOutput) ToRegionSettingsArrayOutput() RegionSettingsArrayOutput {
	return o
}

func (o RegionSettingsArrayOutput) ToRegionSettingsArrayOutputWithContext(ctx context.Context) RegionSettingsArrayOutput {
	return o
}

func (o RegionSettingsArrayOutput) Index(i pulumi.IntInput) RegionSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegionSettings {
		return vs[0].([]*RegionSettings)[vs[1].(int)]
	}).(RegionSettingsOutput)
}

type RegionSettingsMapOutput struct{ *pulumi.OutputState }

func (RegionSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionSettings)(nil)).Elem()
}

func (o RegionSettingsMapOutput) ToRegionSettingsMapOutput() RegionSettingsMapOutput {
	return o
}

func (o RegionSettingsMapOutput) ToRegionSettingsMapOutputWithContext(ctx context.Context) RegionSettingsMapOutput {
	return o
}

func (o RegionSettingsMapOutput) MapIndex(k pulumi.StringInput) RegionSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegionSettings {
		return vs[0].(map[string]*RegionSettings)[vs[1].(string)]
	}).(RegionSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegionSettingsInput)(nil)).Elem(), &RegionSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionSettingsArrayInput)(nil)).Elem(), RegionSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionSettingsMapInput)(nil)).Elem(), RegionSettingsMap{})
	pulumi.RegisterOutputType(RegionSettingsOutput{})
	pulumi.RegisterOutputType(RegionSettingsArrayOutput{})
	pulumi.RegisterOutputType(RegionSettingsMapOutput{})
}
