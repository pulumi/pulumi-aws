// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Selection struct {
	pulumi.CustomResourceState

	Conditions    SelectionConditionArrayOutput    `pulumi:"conditions"`
	IamRoleArn    pulumi.StringOutput              `pulumi:"iamRoleArn"`
	Name          pulumi.StringOutput              `pulumi:"name"`
	NotResources  pulumi.StringArrayOutput         `pulumi:"notResources"`
	PlanId        pulumi.StringOutput              `pulumi:"planId"`
	Resources     pulumi.StringArrayOutput         `pulumi:"resources"`
	SelectionTags SelectionSelectionTagArrayOutput `pulumi:"selectionTags"`
}

// NewSelection registers a new resource with the given unique name, arguments, and options.
func NewSelection(ctx *pulumi.Context,
	name string, args *SelectionArgs, opts ...pulumi.ResourceOption) (*Selection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IamRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'IamRoleArn'")
	}
	if args.PlanId == nil {
		return nil, errors.New("invalid value for required argument 'PlanId'")
	}
	var resource Selection
	err := ctx.RegisterResource("aws:backup/selection:Selection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSelection gets an existing Selection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSelection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SelectionState, opts ...pulumi.ResourceOption) (*Selection, error) {
	var resource Selection
	err := ctx.ReadResource("aws:backup/selection:Selection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Selection resources.
type selectionState struct {
	Conditions    []SelectionCondition    `pulumi:"conditions"`
	IamRoleArn    *string                 `pulumi:"iamRoleArn"`
	Name          *string                 `pulumi:"name"`
	NotResources  []string                `pulumi:"notResources"`
	PlanId        *string                 `pulumi:"planId"`
	Resources     []string                `pulumi:"resources"`
	SelectionTags []SelectionSelectionTag `pulumi:"selectionTags"`
}

type SelectionState struct {
	Conditions    SelectionConditionArrayInput
	IamRoleArn    pulumi.StringPtrInput
	Name          pulumi.StringPtrInput
	NotResources  pulumi.StringArrayInput
	PlanId        pulumi.StringPtrInput
	Resources     pulumi.StringArrayInput
	SelectionTags SelectionSelectionTagArrayInput
}

func (SelectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*selectionState)(nil)).Elem()
}

type selectionArgs struct {
	Conditions    []SelectionCondition    `pulumi:"conditions"`
	IamRoleArn    string                  `pulumi:"iamRoleArn"`
	Name          *string                 `pulumi:"name"`
	NotResources  []string                `pulumi:"notResources"`
	PlanId        string                  `pulumi:"planId"`
	Resources     []string                `pulumi:"resources"`
	SelectionTags []SelectionSelectionTag `pulumi:"selectionTags"`
}

// The set of arguments for constructing a Selection resource.
type SelectionArgs struct {
	Conditions    SelectionConditionArrayInput
	IamRoleArn    pulumi.StringInput
	Name          pulumi.StringPtrInput
	NotResources  pulumi.StringArrayInput
	PlanId        pulumi.StringInput
	Resources     pulumi.StringArrayInput
	SelectionTags SelectionSelectionTagArrayInput
}

func (SelectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*selectionArgs)(nil)).Elem()
}

type SelectionInput interface {
	pulumi.Input

	ToSelectionOutput() SelectionOutput
	ToSelectionOutputWithContext(ctx context.Context) SelectionOutput
}

func (*Selection) ElementType() reflect.Type {
	return reflect.TypeOf((**Selection)(nil)).Elem()
}

func (i *Selection) ToSelectionOutput() SelectionOutput {
	return i.ToSelectionOutputWithContext(context.Background())
}

func (i *Selection) ToSelectionOutputWithContext(ctx context.Context) SelectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelectionOutput)
}

// SelectionArrayInput is an input type that accepts SelectionArray and SelectionArrayOutput values.
// You can construct a concrete instance of `SelectionArrayInput` via:
//
//	SelectionArray{ SelectionArgs{...} }
type SelectionArrayInput interface {
	pulumi.Input

	ToSelectionArrayOutput() SelectionArrayOutput
	ToSelectionArrayOutputWithContext(context.Context) SelectionArrayOutput
}

type SelectionArray []SelectionInput

func (SelectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Selection)(nil)).Elem()
}

func (i SelectionArray) ToSelectionArrayOutput() SelectionArrayOutput {
	return i.ToSelectionArrayOutputWithContext(context.Background())
}

func (i SelectionArray) ToSelectionArrayOutputWithContext(ctx context.Context) SelectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelectionArrayOutput)
}

// SelectionMapInput is an input type that accepts SelectionMap and SelectionMapOutput values.
// You can construct a concrete instance of `SelectionMapInput` via:
//
//	SelectionMap{ "key": SelectionArgs{...} }
type SelectionMapInput interface {
	pulumi.Input

	ToSelectionMapOutput() SelectionMapOutput
	ToSelectionMapOutputWithContext(context.Context) SelectionMapOutput
}

type SelectionMap map[string]SelectionInput

func (SelectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Selection)(nil)).Elem()
}

func (i SelectionMap) ToSelectionMapOutput() SelectionMapOutput {
	return i.ToSelectionMapOutputWithContext(context.Background())
}

func (i SelectionMap) ToSelectionMapOutputWithContext(ctx context.Context) SelectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelectionMapOutput)
}

type SelectionOutput struct{ *pulumi.OutputState }

func (SelectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Selection)(nil)).Elem()
}

func (o SelectionOutput) ToSelectionOutput() SelectionOutput {
	return o
}

func (o SelectionOutput) ToSelectionOutputWithContext(ctx context.Context) SelectionOutput {
	return o
}

func (o SelectionOutput) Conditions() SelectionConditionArrayOutput {
	return o.ApplyT(func(v *Selection) SelectionConditionArrayOutput { return v.Conditions }).(SelectionConditionArrayOutput)
}

func (o SelectionOutput) IamRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Selection) pulumi.StringOutput { return v.IamRoleArn }).(pulumi.StringOutput)
}

func (o SelectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Selection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SelectionOutput) NotResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Selection) pulumi.StringArrayOutput { return v.NotResources }).(pulumi.StringArrayOutput)
}

func (o SelectionOutput) PlanId() pulumi.StringOutput {
	return o.ApplyT(func(v *Selection) pulumi.StringOutput { return v.PlanId }).(pulumi.StringOutput)
}

func (o SelectionOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Selection) pulumi.StringArrayOutput { return v.Resources }).(pulumi.StringArrayOutput)
}

func (o SelectionOutput) SelectionTags() SelectionSelectionTagArrayOutput {
	return o.ApplyT(func(v *Selection) SelectionSelectionTagArrayOutput { return v.SelectionTags }).(SelectionSelectionTagArrayOutput)
}

type SelectionArrayOutput struct{ *pulumi.OutputState }

func (SelectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Selection)(nil)).Elem()
}

func (o SelectionArrayOutput) ToSelectionArrayOutput() SelectionArrayOutput {
	return o
}

func (o SelectionArrayOutput) ToSelectionArrayOutputWithContext(ctx context.Context) SelectionArrayOutput {
	return o
}

func (o SelectionArrayOutput) Index(i pulumi.IntInput) SelectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Selection {
		return vs[0].([]*Selection)[vs[1].(int)]
	}).(SelectionOutput)
}

type SelectionMapOutput struct{ *pulumi.OutputState }

func (SelectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Selection)(nil)).Elem()
}

func (o SelectionMapOutput) ToSelectionMapOutput() SelectionMapOutput {
	return o
}

func (o SelectionMapOutput) ToSelectionMapOutputWithContext(ctx context.Context) SelectionMapOutput {
	return o
}

func (o SelectionMapOutput) MapIndex(k pulumi.StringInput) SelectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Selection {
		return vs[0].(map[string]*Selection)[vs[1].(string)]
	}).(SelectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SelectionInput)(nil)).Elem(), &Selection{})
	pulumi.RegisterInputType(reflect.TypeOf((*SelectionArrayInput)(nil)).Elem(), SelectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SelectionMapInput)(nil)).Elem(), SelectionMap{})
	pulumi.RegisterOutputType(SelectionOutput{})
	pulumi.RegisterOutputType(SelectionArrayOutput{})
	pulumi.RegisterOutputType(SelectionMapOutput{})
}
