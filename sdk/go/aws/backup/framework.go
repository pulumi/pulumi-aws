// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Framework struct {
	pulumi.CustomResourceState

	Arn              pulumi.StringOutput         `pulumi:"arn"`
	Controls         FrameworkControlArrayOutput `pulumi:"controls"`
	CreationTime     pulumi.StringOutput         `pulumi:"creationTime"`
	DeploymentStatus pulumi.StringOutput         `pulumi:"deploymentStatus"`
	Description      pulumi.StringPtrOutput      `pulumi:"description"`
	Name             pulumi.StringOutput         `pulumi:"name"`
	Status           pulumi.StringOutput         `pulumi:"status"`
	Tags             pulumi.StringMapOutput      `pulumi:"tags"`
	TagsAll          pulumi.StringMapOutput      `pulumi:"tagsAll"`
}

// NewFramework registers a new resource with the given unique name, arguments, and options.
func NewFramework(ctx *pulumi.Context,
	name string, args *FrameworkArgs, opts ...pulumi.ResourceOption) (*Framework, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Controls == nil {
		return nil, errors.New("invalid value for required argument 'Controls'")
	}
	var resource Framework
	err := ctx.RegisterResource("aws:backup/framework:Framework", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFramework gets an existing Framework resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFramework(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FrameworkState, opts ...pulumi.ResourceOption) (*Framework, error) {
	var resource Framework
	err := ctx.ReadResource("aws:backup/framework:Framework", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Framework resources.
type frameworkState struct {
	Arn              *string            `pulumi:"arn"`
	Controls         []FrameworkControl `pulumi:"controls"`
	CreationTime     *string            `pulumi:"creationTime"`
	DeploymentStatus *string            `pulumi:"deploymentStatus"`
	Description      *string            `pulumi:"description"`
	Name             *string            `pulumi:"name"`
	Status           *string            `pulumi:"status"`
	Tags             map[string]string  `pulumi:"tags"`
	TagsAll          map[string]string  `pulumi:"tagsAll"`
}

type FrameworkState struct {
	Arn              pulumi.StringPtrInput
	Controls         FrameworkControlArrayInput
	CreationTime     pulumi.StringPtrInput
	DeploymentStatus pulumi.StringPtrInput
	Description      pulumi.StringPtrInput
	Name             pulumi.StringPtrInput
	Status           pulumi.StringPtrInput
	Tags             pulumi.StringMapInput
	TagsAll          pulumi.StringMapInput
}

func (FrameworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*frameworkState)(nil)).Elem()
}

type frameworkArgs struct {
	Controls    []FrameworkControl `pulumi:"controls"`
	Description *string            `pulumi:"description"`
	Name        *string            `pulumi:"name"`
	Tags        map[string]string  `pulumi:"tags"`
}

// The set of arguments for constructing a Framework resource.
type FrameworkArgs struct {
	Controls    FrameworkControlArrayInput
	Description pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	Tags        pulumi.StringMapInput
}

func (FrameworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*frameworkArgs)(nil)).Elem()
}

type FrameworkInput interface {
	pulumi.Input

	ToFrameworkOutput() FrameworkOutput
	ToFrameworkOutputWithContext(ctx context.Context) FrameworkOutput
}

func (*Framework) ElementType() reflect.Type {
	return reflect.TypeOf((**Framework)(nil)).Elem()
}

func (i *Framework) ToFrameworkOutput() FrameworkOutput {
	return i.ToFrameworkOutputWithContext(context.Background())
}

func (i *Framework) ToFrameworkOutputWithContext(ctx context.Context) FrameworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrameworkOutput)
}

// FrameworkArrayInput is an input type that accepts FrameworkArray and FrameworkArrayOutput values.
// You can construct a concrete instance of `FrameworkArrayInput` via:
//
//	FrameworkArray{ FrameworkArgs{...} }
type FrameworkArrayInput interface {
	pulumi.Input

	ToFrameworkArrayOutput() FrameworkArrayOutput
	ToFrameworkArrayOutputWithContext(context.Context) FrameworkArrayOutput
}

type FrameworkArray []FrameworkInput

func (FrameworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Framework)(nil)).Elem()
}

func (i FrameworkArray) ToFrameworkArrayOutput() FrameworkArrayOutput {
	return i.ToFrameworkArrayOutputWithContext(context.Background())
}

func (i FrameworkArray) ToFrameworkArrayOutputWithContext(ctx context.Context) FrameworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrameworkArrayOutput)
}

// FrameworkMapInput is an input type that accepts FrameworkMap and FrameworkMapOutput values.
// You can construct a concrete instance of `FrameworkMapInput` via:
//
//	FrameworkMap{ "key": FrameworkArgs{...} }
type FrameworkMapInput interface {
	pulumi.Input

	ToFrameworkMapOutput() FrameworkMapOutput
	ToFrameworkMapOutputWithContext(context.Context) FrameworkMapOutput
}

type FrameworkMap map[string]FrameworkInput

func (FrameworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Framework)(nil)).Elem()
}

func (i FrameworkMap) ToFrameworkMapOutput() FrameworkMapOutput {
	return i.ToFrameworkMapOutputWithContext(context.Background())
}

func (i FrameworkMap) ToFrameworkMapOutputWithContext(ctx context.Context) FrameworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrameworkMapOutput)
}

type FrameworkOutput struct{ *pulumi.OutputState }

func (FrameworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Framework)(nil)).Elem()
}

func (o FrameworkOutput) ToFrameworkOutput() FrameworkOutput {
	return o
}

func (o FrameworkOutput) ToFrameworkOutputWithContext(ctx context.Context) FrameworkOutput {
	return o
}

func (o FrameworkOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Framework) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o FrameworkOutput) Controls() FrameworkControlArrayOutput {
	return o.ApplyT(func(v *Framework) FrameworkControlArrayOutput { return v.Controls }).(FrameworkControlArrayOutput)
}

func (o FrameworkOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Framework) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

func (o FrameworkOutput) DeploymentStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Framework) pulumi.StringOutput { return v.DeploymentStatus }).(pulumi.StringOutput)
}

func (o FrameworkOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Framework) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o FrameworkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Framework) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o FrameworkOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Framework) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o FrameworkOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Framework) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o FrameworkOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Framework) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type FrameworkArrayOutput struct{ *pulumi.OutputState }

func (FrameworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Framework)(nil)).Elem()
}

func (o FrameworkArrayOutput) ToFrameworkArrayOutput() FrameworkArrayOutput {
	return o
}

func (o FrameworkArrayOutput) ToFrameworkArrayOutputWithContext(ctx context.Context) FrameworkArrayOutput {
	return o
}

func (o FrameworkArrayOutput) Index(i pulumi.IntInput) FrameworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Framework {
		return vs[0].([]*Framework)[vs[1].(int)]
	}).(FrameworkOutput)
}

type FrameworkMapOutput struct{ *pulumi.OutputState }

func (FrameworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Framework)(nil)).Elem()
}

func (o FrameworkMapOutput) ToFrameworkMapOutput() FrameworkMapOutput {
	return o
}

func (o FrameworkMapOutput) ToFrameworkMapOutputWithContext(ctx context.Context) FrameworkMapOutput {
	return o
}

func (o FrameworkMapOutput) MapIndex(k pulumi.StringInput) FrameworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Framework {
		return vs[0].(map[string]*Framework)[vs[1].(string)]
	}).(FrameworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FrameworkInput)(nil)).Elem(), &Framework{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrameworkArrayInput)(nil)).Elem(), FrameworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrameworkMapInput)(nil)).Elem(), FrameworkMap{})
	pulumi.RegisterOutputType(FrameworkOutput{})
	pulumi.RegisterOutputType(FrameworkArrayOutput{})
	pulumi.RegisterOutputType(FrameworkMapOutput{})
}
