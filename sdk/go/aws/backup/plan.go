// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an AWS Backup plan resource.
type Plan struct {
	s *pulumi.ResourceState
}

// NewPlan registers a new resource with the given unique name, arguments, and options.
func NewPlan(ctx *pulumi.Context,
	name string, args *PlanArgs, opts ...pulumi.ResourceOpt) (*Plan, error) {
	if args == nil || args.Rules == nil {
		return nil, errors.New("missing required argument 'Rules'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["name"] = nil
		inputs["rules"] = nil
		inputs["tags"] = nil
	} else {
		inputs["name"] = args.Name
		inputs["rules"] = args.Rules
		inputs["tags"] = args.Tags
	}
	inputs["arn"] = nil
	inputs["version"] = nil
	s, err := ctx.RegisterResource("aws:backup/plan:Plan", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Plan{s: s}, nil
}

// GetPlan gets an existing Plan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlan(ctx *pulumi.Context,
	name string, id pulumi.ID, state *PlanState, opts ...pulumi.ResourceOpt) (*Plan, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["name"] = state.Name
		inputs["rules"] = state.Rules
		inputs["tags"] = state.Tags
		inputs["version"] = state.Version
	}
	s, err := ctx.ReadResource("aws:backup/plan:Plan", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Plan{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Plan) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Plan) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The ARN of the backup plan.
func (r *Plan) Arn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["arn"])
}

// The display name of a backup plan.
func (r *Plan) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// A rule object that specifies a scheduled task that is used to back up a selection of resources.
func (r *Plan) Rules() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["rules"])
}

// Metadata that you can assign to help organize the plans you create.
func (r *Plan) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// Unique, randomly generated, Unicode, UTF-8 encoded string that serves as the version ID of the backup plan.
func (r *Plan) Version() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["version"])
}

// Input properties used for looking up and filtering Plan resources.
type PlanState struct {
	// The ARN of the backup plan.
	Arn interface{}
	// The display name of a backup plan.
	Name interface{}
	// A rule object that specifies a scheduled task that is used to back up a selection of resources.
	Rules interface{}
	// Metadata that you can assign to help organize the plans you create.
	Tags interface{}
	// Unique, randomly generated, Unicode, UTF-8 encoded string that serves as the version ID of the backup plan.
	Version interface{}
}

// The set of arguments for constructing a Plan resource.
type PlanArgs struct {
	// The display name of a backup plan.
	Name interface{}
	// A rule object that specifies a scheduled task that is used to back up a selection of resources.
	Rules interface{}
	// Metadata that you can assign to help organize the plans you create.
	Tags interface{}
}
