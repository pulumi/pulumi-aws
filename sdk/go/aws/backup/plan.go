// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Plan struct {
	pulumi.CustomResourceState

	AdvancedBackupSettings PlanAdvancedBackupSettingArrayOutput `pulumi:"advancedBackupSettings"`
	Arn                    pulumi.StringOutput                  `pulumi:"arn"`
	Name                   pulumi.StringOutput                  `pulumi:"name"`
	Rules                  PlanRuleArrayOutput                  `pulumi:"rules"`
	Tags                   pulumi.StringMapOutput               `pulumi:"tags"`
	TagsAll                pulumi.StringMapOutput               `pulumi:"tagsAll"`
	Version                pulumi.StringOutput                  `pulumi:"version"`
}

// NewPlan registers a new resource with the given unique name, arguments, and options.
func NewPlan(ctx *pulumi.Context,
	name string, args *PlanArgs, opts ...pulumi.ResourceOption) (*Plan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	var resource Plan
	err := ctx.RegisterResource("aws:backup/plan:Plan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlan gets an existing Plan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PlanState, opts ...pulumi.ResourceOption) (*Plan, error) {
	var resource Plan
	err := ctx.ReadResource("aws:backup/plan:Plan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Plan resources.
type planState struct {
	AdvancedBackupSettings []PlanAdvancedBackupSetting `pulumi:"advancedBackupSettings"`
	Arn                    *string                     `pulumi:"arn"`
	Name                   *string                     `pulumi:"name"`
	Rules                  []PlanRule                  `pulumi:"rules"`
	Tags                   map[string]string           `pulumi:"tags"`
	TagsAll                map[string]string           `pulumi:"tagsAll"`
	Version                *string                     `pulumi:"version"`
}

type PlanState struct {
	AdvancedBackupSettings PlanAdvancedBackupSettingArrayInput
	Arn                    pulumi.StringPtrInput
	Name                   pulumi.StringPtrInput
	Rules                  PlanRuleArrayInput
	Tags                   pulumi.StringMapInput
	TagsAll                pulumi.StringMapInput
	Version                pulumi.StringPtrInput
}

func (PlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*planState)(nil)).Elem()
}

type planArgs struct {
	AdvancedBackupSettings []PlanAdvancedBackupSetting `pulumi:"advancedBackupSettings"`
	Name                   *string                     `pulumi:"name"`
	Rules                  []PlanRule                  `pulumi:"rules"`
	Tags                   map[string]string           `pulumi:"tags"`
}

// The set of arguments for constructing a Plan resource.
type PlanArgs struct {
	AdvancedBackupSettings PlanAdvancedBackupSettingArrayInput
	Name                   pulumi.StringPtrInput
	Rules                  PlanRuleArrayInput
	Tags                   pulumi.StringMapInput
}

func (PlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*planArgs)(nil)).Elem()
}

type PlanInput interface {
	pulumi.Input

	ToPlanOutput() PlanOutput
	ToPlanOutputWithContext(ctx context.Context) PlanOutput
}

func (*Plan) ElementType() reflect.Type {
	return reflect.TypeOf((**Plan)(nil)).Elem()
}

func (i *Plan) ToPlanOutput() PlanOutput {
	return i.ToPlanOutputWithContext(context.Background())
}

func (i *Plan) ToPlanOutputWithContext(ctx context.Context) PlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanOutput)
}

// PlanArrayInput is an input type that accepts PlanArray and PlanArrayOutput values.
// You can construct a concrete instance of `PlanArrayInput` via:
//
//	PlanArray{ PlanArgs{...} }
type PlanArrayInput interface {
	pulumi.Input

	ToPlanArrayOutput() PlanArrayOutput
	ToPlanArrayOutputWithContext(context.Context) PlanArrayOutput
}

type PlanArray []PlanInput

func (PlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Plan)(nil)).Elem()
}

func (i PlanArray) ToPlanArrayOutput() PlanArrayOutput {
	return i.ToPlanArrayOutputWithContext(context.Background())
}

func (i PlanArray) ToPlanArrayOutputWithContext(ctx context.Context) PlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanArrayOutput)
}

// PlanMapInput is an input type that accepts PlanMap and PlanMapOutput values.
// You can construct a concrete instance of `PlanMapInput` via:
//
//	PlanMap{ "key": PlanArgs{...} }
type PlanMapInput interface {
	pulumi.Input

	ToPlanMapOutput() PlanMapOutput
	ToPlanMapOutputWithContext(context.Context) PlanMapOutput
}

type PlanMap map[string]PlanInput

func (PlanMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Plan)(nil)).Elem()
}

func (i PlanMap) ToPlanMapOutput() PlanMapOutput {
	return i.ToPlanMapOutputWithContext(context.Background())
}

func (i PlanMap) ToPlanMapOutputWithContext(ctx context.Context) PlanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanMapOutput)
}

type PlanOutput struct{ *pulumi.OutputState }

func (PlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Plan)(nil)).Elem()
}

func (o PlanOutput) ToPlanOutput() PlanOutput {
	return o
}

func (o PlanOutput) ToPlanOutputWithContext(ctx context.Context) PlanOutput {
	return o
}

func (o PlanOutput) AdvancedBackupSettings() PlanAdvancedBackupSettingArrayOutput {
	return o.ApplyT(func(v *Plan) PlanAdvancedBackupSettingArrayOutput { return v.AdvancedBackupSettings }).(PlanAdvancedBackupSettingArrayOutput)
}

func (o PlanOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Plan) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o PlanOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Plan) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o PlanOutput) Rules() PlanRuleArrayOutput {
	return o.ApplyT(func(v *Plan) PlanRuleArrayOutput { return v.Rules }).(PlanRuleArrayOutput)
}

func (o PlanOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Plan) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o PlanOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Plan) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o PlanOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Plan) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type PlanArrayOutput struct{ *pulumi.OutputState }

func (PlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Plan)(nil)).Elem()
}

func (o PlanArrayOutput) ToPlanArrayOutput() PlanArrayOutput {
	return o
}

func (o PlanArrayOutput) ToPlanArrayOutputWithContext(ctx context.Context) PlanArrayOutput {
	return o
}

func (o PlanArrayOutput) Index(i pulumi.IntInput) PlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Plan {
		return vs[0].([]*Plan)[vs[1].(int)]
	}).(PlanOutput)
}

type PlanMapOutput struct{ *pulumi.OutputState }

func (PlanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Plan)(nil)).Elem()
}

func (o PlanMapOutput) ToPlanMapOutput() PlanMapOutput {
	return o
}

func (o PlanMapOutput) ToPlanMapOutputWithContext(ctx context.Context) PlanMapOutput {
	return o
}

func (o PlanMapOutput) MapIndex(k pulumi.StringInput) PlanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Plan {
		return vs[0].(map[string]*Plan)[vs[1].(string)]
	}).(PlanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PlanInput)(nil)).Elem(), &Plan{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanArrayInput)(nil)).Elem(), PlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanMapInput)(nil)).Elem(), PlanMap{})
	pulumi.RegisterOutputType(PlanOutput{})
	pulumi.RegisterOutputType(PlanArrayOutput{})
	pulumi.RegisterOutputType(PlanMapOutput{})
}
