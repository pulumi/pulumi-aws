// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an AWS Backup Report Plan resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/backup"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := backup.NewReportPlan(ctx, "example", &backup.ReportPlanArgs{
//				Description: pulumi.String("example description"),
//				ReportDeliveryChannel: &backup.ReportPlanReportDeliveryChannelArgs{
//					Formats: pulumi.StringArray{
//						pulumi.String("CSV"),
//						pulumi.String("JSON"),
//					},
//					S3BucketName: pulumi.String("example-bucket-name"),
//				},
//				ReportSetting: &backup.ReportPlanReportSettingArgs{
//					ReportTemplate: pulumi.String("RESTORE_JOB_REPORT"),
//				},
//				Tags: pulumi.StringMap{
//					"Name": pulumi.String("Example Report Plan"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// terraform import {
//
//	to = aws_backup_report_plan.test
//
//	id = "<id>" } Using `pulumi import`, import Backup Report Plan using the `id` which corresponds to the name of the Backup Report Plan. For exampleconsole % pulumi import aws_backup_report_plan.test <id>
type ReportPlan struct {
	pulumi.CustomResourceState

	// The ARN of the backup report plan.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The date and time that a report plan is created, in Unix format and Coordinated Universal Time (UTC).
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// The deployment status of a report plan. The statuses are: `CREATE_IN_PROGRESS` | `UPDATE_IN_PROGRESS` | `DELETE_IN_PROGRESS` | `COMPLETED`.
	DeploymentStatus pulumi.StringOutput `pulumi:"deploymentStatus"`
	// The description of the report plan with a maximum of 1,024 characters
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The unique name of the report plan. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters, numbers, and underscores.
	Name pulumi.StringOutput `pulumi:"name"`
	// An object that contains information about where and how to deliver your reports, specifically your Amazon S3 bucket name, S3 key prefix, and the formats of your reports. Detailed below.
	ReportDeliveryChannel ReportPlanReportDeliveryChannelOutput `pulumi:"reportDeliveryChannel"`
	// An object that identifies the report template for the report. Reports are built using a report template. Detailed below.
	ReportSetting ReportPlanReportSettingOutput `pulumi:"reportSetting"`
	// Metadata that you can assign to help organize the report plans you create. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewReportPlan registers a new resource with the given unique name, arguments, and options.
func NewReportPlan(ctx *pulumi.Context,
	name string, args *ReportPlanArgs, opts ...pulumi.ResourceOption) (*ReportPlan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ReportDeliveryChannel == nil {
		return nil, errors.New("invalid value for required argument 'ReportDeliveryChannel'")
	}
	if args.ReportSetting == nil {
		return nil, errors.New("invalid value for required argument 'ReportSetting'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ReportPlan
	err := ctx.RegisterResource("aws:backup/reportPlan:ReportPlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReportPlan gets an existing ReportPlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReportPlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReportPlanState, opts ...pulumi.ResourceOption) (*ReportPlan, error) {
	var resource ReportPlan
	err := ctx.ReadResource("aws:backup/reportPlan:ReportPlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReportPlan resources.
type reportPlanState struct {
	// The ARN of the backup report plan.
	Arn *string `pulumi:"arn"`
	// The date and time that a report plan is created, in Unix format and Coordinated Universal Time (UTC).
	CreationTime *string `pulumi:"creationTime"`
	// The deployment status of a report plan. The statuses are: `CREATE_IN_PROGRESS` | `UPDATE_IN_PROGRESS` | `DELETE_IN_PROGRESS` | `COMPLETED`.
	DeploymentStatus *string `pulumi:"deploymentStatus"`
	// The description of the report plan with a maximum of 1,024 characters
	Description *string `pulumi:"description"`
	// The unique name of the report plan. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters, numbers, and underscores.
	Name *string `pulumi:"name"`
	// An object that contains information about where and how to deliver your reports, specifically your Amazon S3 bucket name, S3 key prefix, and the formats of your reports. Detailed below.
	ReportDeliveryChannel *ReportPlanReportDeliveryChannel `pulumi:"reportDeliveryChannel"`
	// An object that identifies the report template for the report. Reports are built using a report template. Detailed below.
	ReportSetting *ReportPlanReportSetting `pulumi:"reportSetting"`
	// Metadata that you can assign to help organize the report plans you create. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type ReportPlanState struct {
	// The ARN of the backup report plan.
	Arn pulumi.StringPtrInput
	// The date and time that a report plan is created, in Unix format and Coordinated Universal Time (UTC).
	CreationTime pulumi.StringPtrInput
	// The deployment status of a report plan. The statuses are: `CREATE_IN_PROGRESS` | `UPDATE_IN_PROGRESS` | `DELETE_IN_PROGRESS` | `COMPLETED`.
	DeploymentStatus pulumi.StringPtrInput
	// The description of the report plan with a maximum of 1,024 characters
	Description pulumi.StringPtrInput
	// The unique name of the report plan. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters, numbers, and underscores.
	Name pulumi.StringPtrInput
	// An object that contains information about where and how to deliver your reports, specifically your Amazon S3 bucket name, S3 key prefix, and the formats of your reports. Detailed below.
	ReportDeliveryChannel ReportPlanReportDeliveryChannelPtrInput
	// An object that identifies the report template for the report. Reports are built using a report template. Detailed below.
	ReportSetting ReportPlanReportSettingPtrInput
	// Metadata that you can assign to help organize the report plans you create. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapInput
}

func (ReportPlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*reportPlanState)(nil)).Elem()
}

type reportPlanArgs struct {
	// The description of the report plan with a maximum of 1,024 characters
	Description *string `pulumi:"description"`
	// The unique name of the report plan. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters, numbers, and underscores.
	Name *string `pulumi:"name"`
	// An object that contains information about where and how to deliver your reports, specifically your Amazon S3 bucket name, S3 key prefix, and the formats of your reports. Detailed below.
	ReportDeliveryChannel ReportPlanReportDeliveryChannel `pulumi:"reportDeliveryChannel"`
	// An object that identifies the report template for the report. Reports are built using a report template. Detailed below.
	ReportSetting ReportPlanReportSetting `pulumi:"reportSetting"`
	// Metadata that you can assign to help organize the report plans you create. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ReportPlan resource.
type ReportPlanArgs struct {
	// The description of the report plan with a maximum of 1,024 characters
	Description pulumi.StringPtrInput
	// The unique name of the report plan. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters, numbers, and underscores.
	Name pulumi.StringPtrInput
	// An object that contains information about where and how to deliver your reports, specifically your Amazon S3 bucket name, S3 key prefix, and the formats of your reports. Detailed below.
	ReportDeliveryChannel ReportPlanReportDeliveryChannelInput
	// An object that identifies the report template for the report. Reports are built using a report template. Detailed below.
	ReportSetting ReportPlanReportSettingInput
	// Metadata that you can assign to help organize the report plans you create. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
}

func (ReportPlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*reportPlanArgs)(nil)).Elem()
}

type ReportPlanInput interface {
	pulumi.Input

	ToReportPlanOutput() ReportPlanOutput
	ToReportPlanOutputWithContext(ctx context.Context) ReportPlanOutput
}

func (*ReportPlan) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportPlan)(nil)).Elem()
}

func (i *ReportPlan) ToReportPlanOutput() ReportPlanOutput {
	return i.ToReportPlanOutputWithContext(context.Background())
}

func (i *ReportPlan) ToReportPlanOutputWithContext(ctx context.Context) ReportPlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportPlanOutput)
}

// ReportPlanArrayInput is an input type that accepts ReportPlanArray and ReportPlanArrayOutput values.
// You can construct a concrete instance of `ReportPlanArrayInput` via:
//
//	ReportPlanArray{ ReportPlanArgs{...} }
type ReportPlanArrayInput interface {
	pulumi.Input

	ToReportPlanArrayOutput() ReportPlanArrayOutput
	ToReportPlanArrayOutputWithContext(context.Context) ReportPlanArrayOutput
}

type ReportPlanArray []ReportPlanInput

func (ReportPlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReportPlan)(nil)).Elem()
}

func (i ReportPlanArray) ToReportPlanArrayOutput() ReportPlanArrayOutput {
	return i.ToReportPlanArrayOutputWithContext(context.Background())
}

func (i ReportPlanArray) ToReportPlanArrayOutputWithContext(ctx context.Context) ReportPlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportPlanArrayOutput)
}

// ReportPlanMapInput is an input type that accepts ReportPlanMap and ReportPlanMapOutput values.
// You can construct a concrete instance of `ReportPlanMapInput` via:
//
//	ReportPlanMap{ "key": ReportPlanArgs{...} }
type ReportPlanMapInput interface {
	pulumi.Input

	ToReportPlanMapOutput() ReportPlanMapOutput
	ToReportPlanMapOutputWithContext(context.Context) ReportPlanMapOutput
}

type ReportPlanMap map[string]ReportPlanInput

func (ReportPlanMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReportPlan)(nil)).Elem()
}

func (i ReportPlanMap) ToReportPlanMapOutput() ReportPlanMapOutput {
	return i.ToReportPlanMapOutputWithContext(context.Background())
}

func (i ReportPlanMap) ToReportPlanMapOutputWithContext(ctx context.Context) ReportPlanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportPlanMapOutput)
}

type ReportPlanOutput struct{ *pulumi.OutputState }

func (ReportPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportPlan)(nil)).Elem()
}

func (o ReportPlanOutput) ToReportPlanOutput() ReportPlanOutput {
	return o
}

func (o ReportPlanOutput) ToReportPlanOutputWithContext(ctx context.Context) ReportPlanOutput {
	return o
}

// The ARN of the backup report plan.
func (o ReportPlanOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ReportPlan) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The date and time that a report plan is created, in Unix format and Coordinated Universal Time (UTC).
func (o ReportPlanOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ReportPlan) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// The deployment status of a report plan. The statuses are: `CREATE_IN_PROGRESS` | `UPDATE_IN_PROGRESS` | `DELETE_IN_PROGRESS` | `COMPLETED`.
func (o ReportPlanOutput) DeploymentStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *ReportPlan) pulumi.StringOutput { return v.DeploymentStatus }).(pulumi.StringOutput)
}

// The description of the report plan with a maximum of 1,024 characters
func (o ReportPlanOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportPlan) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The unique name of the report plan. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters, numbers, and underscores.
func (o ReportPlanOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ReportPlan) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// An object that contains information about where and how to deliver your reports, specifically your Amazon S3 bucket name, S3 key prefix, and the formats of your reports. Detailed below.
func (o ReportPlanOutput) ReportDeliveryChannel() ReportPlanReportDeliveryChannelOutput {
	return o.ApplyT(func(v *ReportPlan) ReportPlanReportDeliveryChannelOutput { return v.ReportDeliveryChannel }).(ReportPlanReportDeliveryChannelOutput)
}

// An object that identifies the report template for the report. Reports are built using a report template. Detailed below.
func (o ReportPlanOutput) ReportSetting() ReportPlanReportSettingOutput {
	return o.ApplyT(func(v *ReportPlan) ReportPlanReportSettingOutput { return v.ReportSetting }).(ReportPlanReportSettingOutput)
}

// Metadata that you can assign to help organize the report plans you create. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ReportPlanOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ReportPlan) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ReportPlanOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ReportPlan) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type ReportPlanArrayOutput struct{ *pulumi.OutputState }

func (ReportPlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReportPlan)(nil)).Elem()
}

func (o ReportPlanArrayOutput) ToReportPlanArrayOutput() ReportPlanArrayOutput {
	return o
}

func (o ReportPlanArrayOutput) ToReportPlanArrayOutputWithContext(ctx context.Context) ReportPlanArrayOutput {
	return o
}

func (o ReportPlanArrayOutput) Index(i pulumi.IntInput) ReportPlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReportPlan {
		return vs[0].([]*ReportPlan)[vs[1].(int)]
	}).(ReportPlanOutput)
}

type ReportPlanMapOutput struct{ *pulumi.OutputState }

func (ReportPlanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReportPlan)(nil)).Elem()
}

func (o ReportPlanMapOutput) ToReportPlanMapOutput() ReportPlanMapOutput {
	return o
}

func (o ReportPlanMapOutput) ToReportPlanMapOutputWithContext(ctx context.Context) ReportPlanMapOutput {
	return o
}

func (o ReportPlanMapOutput) MapIndex(k pulumi.StringInput) ReportPlanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReportPlan {
		return vs[0].(map[string]*ReportPlan)[vs[1].(string)]
	}).(ReportPlanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReportPlanInput)(nil)).Elem(), &ReportPlan{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReportPlanArrayInput)(nil)).Elem(), ReportPlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReportPlanMapInput)(nil)).Elem(), ReportPlanMap{})
	pulumi.RegisterOutputType(ReportPlanOutput{})
	pulumi.RegisterOutputType(ReportPlanArrayOutput{})
	pulumi.RegisterOutputType(ReportPlanMapOutput{})
}
