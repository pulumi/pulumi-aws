// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ReportPlan struct {
	pulumi.CustomResourceState

	Arn                   pulumi.StringOutput                   `pulumi:"arn"`
	CreationTime          pulumi.StringOutput                   `pulumi:"creationTime"`
	DeploymentStatus      pulumi.StringOutput                   `pulumi:"deploymentStatus"`
	Description           pulumi.StringPtrOutput                `pulumi:"description"`
	Name                  pulumi.StringOutput                   `pulumi:"name"`
	ReportDeliveryChannel ReportPlanReportDeliveryChannelOutput `pulumi:"reportDeliveryChannel"`
	ReportSetting         ReportPlanReportSettingOutput         `pulumi:"reportSetting"`
	Tags                  pulumi.StringMapOutput                `pulumi:"tags"`
	TagsAll               pulumi.StringMapOutput                `pulumi:"tagsAll"`
}

// NewReportPlan registers a new resource with the given unique name, arguments, and options.
func NewReportPlan(ctx *pulumi.Context,
	name string, args *ReportPlanArgs, opts ...pulumi.ResourceOption) (*ReportPlan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ReportDeliveryChannel == nil {
		return nil, errors.New("invalid value for required argument 'ReportDeliveryChannel'")
	}
	if args.ReportSetting == nil {
		return nil, errors.New("invalid value for required argument 'ReportSetting'")
	}
	var resource ReportPlan
	err := ctx.RegisterResource("aws:backup/reportPlan:ReportPlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReportPlan gets an existing ReportPlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReportPlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReportPlanState, opts ...pulumi.ResourceOption) (*ReportPlan, error) {
	var resource ReportPlan
	err := ctx.ReadResource("aws:backup/reportPlan:ReportPlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReportPlan resources.
type reportPlanState struct {
	Arn                   *string                          `pulumi:"arn"`
	CreationTime          *string                          `pulumi:"creationTime"`
	DeploymentStatus      *string                          `pulumi:"deploymentStatus"`
	Description           *string                          `pulumi:"description"`
	Name                  *string                          `pulumi:"name"`
	ReportDeliveryChannel *ReportPlanReportDeliveryChannel `pulumi:"reportDeliveryChannel"`
	ReportSetting         *ReportPlanReportSetting         `pulumi:"reportSetting"`
	Tags                  map[string]string                `pulumi:"tags"`
	TagsAll               map[string]string                `pulumi:"tagsAll"`
}

type ReportPlanState struct {
	Arn                   pulumi.StringPtrInput
	CreationTime          pulumi.StringPtrInput
	DeploymentStatus      pulumi.StringPtrInput
	Description           pulumi.StringPtrInput
	Name                  pulumi.StringPtrInput
	ReportDeliveryChannel ReportPlanReportDeliveryChannelPtrInput
	ReportSetting         ReportPlanReportSettingPtrInput
	Tags                  pulumi.StringMapInput
	TagsAll               pulumi.StringMapInput
}

func (ReportPlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*reportPlanState)(nil)).Elem()
}

type reportPlanArgs struct {
	Description           *string                         `pulumi:"description"`
	Name                  *string                         `pulumi:"name"`
	ReportDeliveryChannel ReportPlanReportDeliveryChannel `pulumi:"reportDeliveryChannel"`
	ReportSetting         ReportPlanReportSetting         `pulumi:"reportSetting"`
	Tags                  map[string]string               `pulumi:"tags"`
}

// The set of arguments for constructing a ReportPlan resource.
type ReportPlanArgs struct {
	Description           pulumi.StringPtrInput
	Name                  pulumi.StringPtrInput
	ReportDeliveryChannel ReportPlanReportDeliveryChannelInput
	ReportSetting         ReportPlanReportSettingInput
	Tags                  pulumi.StringMapInput
}

func (ReportPlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*reportPlanArgs)(nil)).Elem()
}

type ReportPlanInput interface {
	pulumi.Input

	ToReportPlanOutput() ReportPlanOutput
	ToReportPlanOutputWithContext(ctx context.Context) ReportPlanOutput
}

func (*ReportPlan) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportPlan)(nil)).Elem()
}

func (i *ReportPlan) ToReportPlanOutput() ReportPlanOutput {
	return i.ToReportPlanOutputWithContext(context.Background())
}

func (i *ReportPlan) ToReportPlanOutputWithContext(ctx context.Context) ReportPlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportPlanOutput)
}

// ReportPlanArrayInput is an input type that accepts ReportPlanArray and ReportPlanArrayOutput values.
// You can construct a concrete instance of `ReportPlanArrayInput` via:
//
//	ReportPlanArray{ ReportPlanArgs{...} }
type ReportPlanArrayInput interface {
	pulumi.Input

	ToReportPlanArrayOutput() ReportPlanArrayOutput
	ToReportPlanArrayOutputWithContext(context.Context) ReportPlanArrayOutput
}

type ReportPlanArray []ReportPlanInput

func (ReportPlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReportPlan)(nil)).Elem()
}

func (i ReportPlanArray) ToReportPlanArrayOutput() ReportPlanArrayOutput {
	return i.ToReportPlanArrayOutputWithContext(context.Background())
}

func (i ReportPlanArray) ToReportPlanArrayOutputWithContext(ctx context.Context) ReportPlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportPlanArrayOutput)
}

// ReportPlanMapInput is an input type that accepts ReportPlanMap and ReportPlanMapOutput values.
// You can construct a concrete instance of `ReportPlanMapInput` via:
//
//	ReportPlanMap{ "key": ReportPlanArgs{...} }
type ReportPlanMapInput interface {
	pulumi.Input

	ToReportPlanMapOutput() ReportPlanMapOutput
	ToReportPlanMapOutputWithContext(context.Context) ReportPlanMapOutput
}

type ReportPlanMap map[string]ReportPlanInput

func (ReportPlanMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReportPlan)(nil)).Elem()
}

func (i ReportPlanMap) ToReportPlanMapOutput() ReportPlanMapOutput {
	return i.ToReportPlanMapOutputWithContext(context.Background())
}

func (i ReportPlanMap) ToReportPlanMapOutputWithContext(ctx context.Context) ReportPlanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportPlanMapOutput)
}

type ReportPlanOutput struct{ *pulumi.OutputState }

func (ReportPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportPlan)(nil)).Elem()
}

func (o ReportPlanOutput) ToReportPlanOutput() ReportPlanOutput {
	return o
}

func (o ReportPlanOutput) ToReportPlanOutputWithContext(ctx context.Context) ReportPlanOutput {
	return o
}

func (o ReportPlanOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ReportPlan) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ReportPlanOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ReportPlan) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

func (o ReportPlanOutput) DeploymentStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *ReportPlan) pulumi.StringOutput { return v.DeploymentStatus }).(pulumi.StringOutput)
}

func (o ReportPlanOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportPlan) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ReportPlanOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ReportPlan) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ReportPlanOutput) ReportDeliveryChannel() ReportPlanReportDeliveryChannelOutput {
	return o.ApplyT(func(v *ReportPlan) ReportPlanReportDeliveryChannelOutput { return v.ReportDeliveryChannel }).(ReportPlanReportDeliveryChannelOutput)
}

func (o ReportPlanOutput) ReportSetting() ReportPlanReportSettingOutput {
	return o.ApplyT(func(v *ReportPlan) ReportPlanReportSettingOutput { return v.ReportSetting }).(ReportPlanReportSettingOutput)
}

func (o ReportPlanOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ReportPlan) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ReportPlanOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ReportPlan) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type ReportPlanArrayOutput struct{ *pulumi.OutputState }

func (ReportPlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReportPlan)(nil)).Elem()
}

func (o ReportPlanArrayOutput) ToReportPlanArrayOutput() ReportPlanArrayOutput {
	return o
}

func (o ReportPlanArrayOutput) ToReportPlanArrayOutputWithContext(ctx context.Context) ReportPlanArrayOutput {
	return o
}

func (o ReportPlanArrayOutput) Index(i pulumi.IntInput) ReportPlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReportPlan {
		return vs[0].([]*ReportPlan)[vs[1].(int)]
	}).(ReportPlanOutput)
}

type ReportPlanMapOutput struct{ *pulumi.OutputState }

func (ReportPlanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReportPlan)(nil)).Elem()
}

func (o ReportPlanMapOutput) ToReportPlanMapOutput() ReportPlanMapOutput {
	return o
}

func (o ReportPlanMapOutput) ToReportPlanMapOutputWithContext(ctx context.Context) ReportPlanMapOutput {
	return o
}

func (o ReportPlanMapOutput) MapIndex(k pulumi.StringInput) ReportPlanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReportPlan {
		return vs[0].(map[string]*ReportPlan)[vs[1].(string)]
	}).(ReportPlanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReportPlanInput)(nil)).Elem(), &ReportPlan{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReportPlanArrayInput)(nil)).Elem(), ReportPlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReportPlanMapInput)(nil)).Elem(), ReportPlanMap{})
	pulumi.RegisterOutputType(ReportPlanOutput{})
	pulumi.RegisterOutputType(ReportPlanArrayOutput{})
	pulumi.RegisterOutputType(ReportPlanMapOutput{})
}
