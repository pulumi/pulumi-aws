// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS Backup Logically Air Gapped Vault.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/backup"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := backup.NewLogicallyAirGappedVault(ctx, "example", &backup.LogicallyAirGappedVaultArgs{
//				Name:             pulumi.String("lag-example-vault"),
//				MaxRetentionDays: pulumi.Int(7),
//				MinRetentionDays: pulumi.Int(7),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Backup Logically Air Gapped Vault using the `id`. For example:
//
// ```sh
// $ pulumi import aws:backup/logicallyAirGappedVault:LogicallyAirGappedVault example lag-example-vault
// ```
type LogicallyAirGappedVault struct {
	pulumi.CustomResourceState

	// The ARN of the Logically Air Gapped Backup Vault.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Maximum retention period that the Logically Air Gapped Backup Vault retains recovery points.
	MaxRetentionDays pulumi.IntOutput `pulumi:"maxRetentionDays"`
	// Minimum retention period that the Logically Air Gapped Backup Vault retains recovery points.
	MinRetentionDays pulumi.IntOutput `pulumi:"minRetentionDays"`
	// Name of the Logically Air Gapped Backup Vault to create.
	Name pulumi.StringOutput `pulumi:"name"`
	// Metadata that you can assign to help organize the resources that you create. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapOutput                   `pulumi:"tagsAll"`
	Timeouts LogicallyAirGappedVaultTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewLogicallyAirGappedVault registers a new resource with the given unique name, arguments, and options.
func NewLogicallyAirGappedVault(ctx *pulumi.Context,
	name string, args *LogicallyAirGappedVaultArgs, opts ...pulumi.ResourceOption) (*LogicallyAirGappedVault, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MaxRetentionDays == nil {
		return nil, errors.New("invalid value for required argument 'MaxRetentionDays'")
	}
	if args.MinRetentionDays == nil {
		return nil, errors.New("invalid value for required argument 'MinRetentionDays'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogicallyAirGappedVault
	err := ctx.RegisterResource("aws:backup/logicallyAirGappedVault:LogicallyAirGappedVault", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogicallyAirGappedVault gets an existing LogicallyAirGappedVault resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogicallyAirGappedVault(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogicallyAirGappedVaultState, opts ...pulumi.ResourceOption) (*LogicallyAirGappedVault, error) {
	var resource LogicallyAirGappedVault
	err := ctx.ReadResource("aws:backup/logicallyAirGappedVault:LogicallyAirGappedVault", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogicallyAirGappedVault resources.
type logicallyAirGappedVaultState struct {
	// The ARN of the Logically Air Gapped Backup Vault.
	Arn *string `pulumi:"arn"`
	// Maximum retention period that the Logically Air Gapped Backup Vault retains recovery points.
	MaxRetentionDays *int `pulumi:"maxRetentionDays"`
	// Minimum retention period that the Logically Air Gapped Backup Vault retains recovery points.
	MinRetentionDays *int `pulumi:"minRetentionDays"`
	// Name of the Logically Air Gapped Backup Vault to create.
	Name *string `pulumi:"name"`
	// Metadata that you can assign to help organize the resources that you create. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  map[string]string                `pulumi:"tagsAll"`
	Timeouts *LogicallyAirGappedVaultTimeouts `pulumi:"timeouts"`
}

type LogicallyAirGappedVaultState struct {
	// The ARN of the Logically Air Gapped Backup Vault.
	Arn pulumi.StringPtrInput
	// Maximum retention period that the Logically Air Gapped Backup Vault retains recovery points.
	MaxRetentionDays pulumi.IntPtrInput
	// Minimum retention period that the Logically Air Gapped Backup Vault retains recovery points.
	MinRetentionDays pulumi.IntPtrInput
	// Name of the Logically Air Gapped Backup Vault to create.
	Name pulumi.StringPtrInput
	// Metadata that you can assign to help organize the resources that you create. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapInput
	Timeouts LogicallyAirGappedVaultTimeoutsPtrInput
}

func (LogicallyAirGappedVaultState) ElementType() reflect.Type {
	return reflect.TypeOf((*logicallyAirGappedVaultState)(nil)).Elem()
}

type logicallyAirGappedVaultArgs struct {
	// Maximum retention period that the Logically Air Gapped Backup Vault retains recovery points.
	MaxRetentionDays int `pulumi:"maxRetentionDays"`
	// Minimum retention period that the Logically Air Gapped Backup Vault retains recovery points.
	MinRetentionDays int `pulumi:"minRetentionDays"`
	// Name of the Logically Air Gapped Backup Vault to create.
	Name *string `pulumi:"name"`
	// Metadata that you can assign to help organize the resources that you create. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     map[string]string                `pulumi:"tags"`
	Timeouts *LogicallyAirGappedVaultTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a LogicallyAirGappedVault resource.
type LogicallyAirGappedVaultArgs struct {
	// Maximum retention period that the Logically Air Gapped Backup Vault retains recovery points.
	MaxRetentionDays pulumi.IntInput
	// Minimum retention period that the Logically Air Gapped Backup Vault retains recovery points.
	MinRetentionDays pulumi.IntInput
	// Name of the Logically Air Gapped Backup Vault to create.
	Name pulumi.StringPtrInput
	// Metadata that you can assign to help organize the resources that you create. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     pulumi.StringMapInput
	Timeouts LogicallyAirGappedVaultTimeoutsPtrInput
}

func (LogicallyAirGappedVaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logicallyAirGappedVaultArgs)(nil)).Elem()
}

type LogicallyAirGappedVaultInput interface {
	pulumi.Input

	ToLogicallyAirGappedVaultOutput() LogicallyAirGappedVaultOutput
	ToLogicallyAirGappedVaultOutputWithContext(ctx context.Context) LogicallyAirGappedVaultOutput
}

func (*LogicallyAirGappedVault) ElementType() reflect.Type {
	return reflect.TypeOf((**LogicallyAirGappedVault)(nil)).Elem()
}

func (i *LogicallyAirGappedVault) ToLogicallyAirGappedVaultOutput() LogicallyAirGappedVaultOutput {
	return i.ToLogicallyAirGappedVaultOutputWithContext(context.Background())
}

func (i *LogicallyAirGappedVault) ToLogicallyAirGappedVaultOutputWithContext(ctx context.Context) LogicallyAirGappedVaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogicallyAirGappedVaultOutput)
}

// LogicallyAirGappedVaultArrayInput is an input type that accepts LogicallyAirGappedVaultArray and LogicallyAirGappedVaultArrayOutput values.
// You can construct a concrete instance of `LogicallyAirGappedVaultArrayInput` via:
//
//	LogicallyAirGappedVaultArray{ LogicallyAirGappedVaultArgs{...} }
type LogicallyAirGappedVaultArrayInput interface {
	pulumi.Input

	ToLogicallyAirGappedVaultArrayOutput() LogicallyAirGappedVaultArrayOutput
	ToLogicallyAirGappedVaultArrayOutputWithContext(context.Context) LogicallyAirGappedVaultArrayOutput
}

type LogicallyAirGappedVaultArray []LogicallyAirGappedVaultInput

func (LogicallyAirGappedVaultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogicallyAirGappedVault)(nil)).Elem()
}

func (i LogicallyAirGappedVaultArray) ToLogicallyAirGappedVaultArrayOutput() LogicallyAirGappedVaultArrayOutput {
	return i.ToLogicallyAirGappedVaultArrayOutputWithContext(context.Background())
}

func (i LogicallyAirGappedVaultArray) ToLogicallyAirGappedVaultArrayOutputWithContext(ctx context.Context) LogicallyAirGappedVaultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogicallyAirGappedVaultArrayOutput)
}

// LogicallyAirGappedVaultMapInput is an input type that accepts LogicallyAirGappedVaultMap and LogicallyAirGappedVaultMapOutput values.
// You can construct a concrete instance of `LogicallyAirGappedVaultMapInput` via:
//
//	LogicallyAirGappedVaultMap{ "key": LogicallyAirGappedVaultArgs{...} }
type LogicallyAirGappedVaultMapInput interface {
	pulumi.Input

	ToLogicallyAirGappedVaultMapOutput() LogicallyAirGappedVaultMapOutput
	ToLogicallyAirGappedVaultMapOutputWithContext(context.Context) LogicallyAirGappedVaultMapOutput
}

type LogicallyAirGappedVaultMap map[string]LogicallyAirGappedVaultInput

func (LogicallyAirGappedVaultMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogicallyAirGappedVault)(nil)).Elem()
}

func (i LogicallyAirGappedVaultMap) ToLogicallyAirGappedVaultMapOutput() LogicallyAirGappedVaultMapOutput {
	return i.ToLogicallyAirGappedVaultMapOutputWithContext(context.Background())
}

func (i LogicallyAirGappedVaultMap) ToLogicallyAirGappedVaultMapOutputWithContext(ctx context.Context) LogicallyAirGappedVaultMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogicallyAirGappedVaultMapOutput)
}

type LogicallyAirGappedVaultOutput struct{ *pulumi.OutputState }

func (LogicallyAirGappedVaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogicallyAirGappedVault)(nil)).Elem()
}

func (o LogicallyAirGappedVaultOutput) ToLogicallyAirGappedVaultOutput() LogicallyAirGappedVaultOutput {
	return o
}

func (o LogicallyAirGappedVaultOutput) ToLogicallyAirGappedVaultOutputWithContext(ctx context.Context) LogicallyAirGappedVaultOutput {
	return o
}

// The ARN of the Logically Air Gapped Backup Vault.
func (o LogicallyAirGappedVaultOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *LogicallyAirGappedVault) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Maximum retention period that the Logically Air Gapped Backup Vault retains recovery points.
func (o LogicallyAirGappedVaultOutput) MaxRetentionDays() pulumi.IntOutput {
	return o.ApplyT(func(v *LogicallyAirGappedVault) pulumi.IntOutput { return v.MaxRetentionDays }).(pulumi.IntOutput)
}

// Minimum retention period that the Logically Air Gapped Backup Vault retains recovery points.
func (o LogicallyAirGappedVaultOutput) MinRetentionDays() pulumi.IntOutput {
	return o.ApplyT(func(v *LogicallyAirGappedVault) pulumi.IntOutput { return v.MinRetentionDays }).(pulumi.IntOutput)
}

// Name of the Logically Air Gapped Backup Vault to create.
func (o LogicallyAirGappedVaultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LogicallyAirGappedVault) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Metadata that you can assign to help organize the resources that you create. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o LogicallyAirGappedVaultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LogicallyAirGappedVault) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o LogicallyAirGappedVaultOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LogicallyAirGappedVault) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o LogicallyAirGappedVaultOutput) Timeouts() LogicallyAirGappedVaultTimeoutsPtrOutput {
	return o.ApplyT(func(v *LogicallyAirGappedVault) LogicallyAirGappedVaultTimeoutsPtrOutput { return v.Timeouts }).(LogicallyAirGappedVaultTimeoutsPtrOutput)
}

type LogicallyAirGappedVaultArrayOutput struct{ *pulumi.OutputState }

func (LogicallyAirGappedVaultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogicallyAirGappedVault)(nil)).Elem()
}

func (o LogicallyAirGappedVaultArrayOutput) ToLogicallyAirGappedVaultArrayOutput() LogicallyAirGappedVaultArrayOutput {
	return o
}

func (o LogicallyAirGappedVaultArrayOutput) ToLogicallyAirGappedVaultArrayOutputWithContext(ctx context.Context) LogicallyAirGappedVaultArrayOutput {
	return o
}

func (o LogicallyAirGappedVaultArrayOutput) Index(i pulumi.IntInput) LogicallyAirGappedVaultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogicallyAirGappedVault {
		return vs[0].([]*LogicallyAirGappedVault)[vs[1].(int)]
	}).(LogicallyAirGappedVaultOutput)
}

type LogicallyAirGappedVaultMapOutput struct{ *pulumi.OutputState }

func (LogicallyAirGappedVaultMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogicallyAirGappedVault)(nil)).Elem()
}

func (o LogicallyAirGappedVaultMapOutput) ToLogicallyAirGappedVaultMapOutput() LogicallyAirGappedVaultMapOutput {
	return o
}

func (o LogicallyAirGappedVaultMapOutput) ToLogicallyAirGappedVaultMapOutputWithContext(ctx context.Context) LogicallyAirGappedVaultMapOutput {
	return o
}

func (o LogicallyAirGappedVaultMapOutput) MapIndex(k pulumi.StringInput) LogicallyAirGappedVaultOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogicallyAirGappedVault {
		return vs[0].(map[string]*LogicallyAirGappedVault)[vs[1].(string)]
	}).(LogicallyAirGappedVaultOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogicallyAirGappedVaultInput)(nil)).Elem(), &LogicallyAirGappedVault{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogicallyAirGappedVaultArrayInput)(nil)).Elem(), LogicallyAirGappedVaultArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogicallyAirGappedVaultMapInput)(nil)).Elem(), LogicallyAirGappedVaultMap{})
	pulumi.RegisterOutputType(LogicallyAirGappedVaultOutput{})
	pulumi.RegisterOutputType(LogicallyAirGappedVaultArrayOutput{})
	pulumi.RegisterOutputType(LogicallyAirGappedVaultMapOutput{})
}
