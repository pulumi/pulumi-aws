// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FrameworkControl struct {
	// One or more input parameter blocks. An example of a control with two parameters is: "backup plan frequency is at least daily and the retention period is at least 1 year". The first parameter is daily. The second parameter is 1 year. Detailed below.
	InputParameters []FrameworkControlInputParameter `pulumi:"inputParameters"`
	// The name of a parameter, for example, BackupPlanFrequency.
	Name string `pulumi:"name"`
	// The scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans. Detailed below.
	Scope *FrameworkControlScope `pulumi:"scope"`
}

// FrameworkControlInput is an input type that accepts FrameworkControlArgs and FrameworkControlOutput values.
// You can construct a concrete instance of `FrameworkControlInput` via:
//
//          FrameworkControlArgs{...}
type FrameworkControlInput interface {
	pulumi.Input

	ToFrameworkControlOutput() FrameworkControlOutput
	ToFrameworkControlOutputWithContext(context.Context) FrameworkControlOutput
}

type FrameworkControlArgs struct {
	// One or more input parameter blocks. An example of a control with two parameters is: "backup plan frequency is at least daily and the retention period is at least 1 year". The first parameter is daily. The second parameter is 1 year. Detailed below.
	InputParameters FrameworkControlInputParameterArrayInput `pulumi:"inputParameters"`
	// The name of a parameter, for example, BackupPlanFrequency.
	Name pulumi.StringInput `pulumi:"name"`
	// The scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans. Detailed below.
	Scope FrameworkControlScopePtrInput `pulumi:"scope"`
}

func (FrameworkControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrameworkControl)(nil)).Elem()
}

func (i FrameworkControlArgs) ToFrameworkControlOutput() FrameworkControlOutput {
	return i.ToFrameworkControlOutputWithContext(context.Background())
}

func (i FrameworkControlArgs) ToFrameworkControlOutputWithContext(ctx context.Context) FrameworkControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrameworkControlOutput)
}

// FrameworkControlArrayInput is an input type that accepts FrameworkControlArray and FrameworkControlArrayOutput values.
// You can construct a concrete instance of `FrameworkControlArrayInput` via:
//
//          FrameworkControlArray{ FrameworkControlArgs{...} }
type FrameworkControlArrayInput interface {
	pulumi.Input

	ToFrameworkControlArrayOutput() FrameworkControlArrayOutput
	ToFrameworkControlArrayOutputWithContext(context.Context) FrameworkControlArrayOutput
}

type FrameworkControlArray []FrameworkControlInput

func (FrameworkControlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrameworkControl)(nil)).Elem()
}

func (i FrameworkControlArray) ToFrameworkControlArrayOutput() FrameworkControlArrayOutput {
	return i.ToFrameworkControlArrayOutputWithContext(context.Background())
}

func (i FrameworkControlArray) ToFrameworkControlArrayOutputWithContext(ctx context.Context) FrameworkControlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrameworkControlArrayOutput)
}

type FrameworkControlOutput struct{ *pulumi.OutputState }

func (FrameworkControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrameworkControl)(nil)).Elem()
}

func (o FrameworkControlOutput) ToFrameworkControlOutput() FrameworkControlOutput {
	return o
}

func (o FrameworkControlOutput) ToFrameworkControlOutputWithContext(ctx context.Context) FrameworkControlOutput {
	return o
}

// One or more input parameter blocks. An example of a control with two parameters is: "backup plan frequency is at least daily and the retention period is at least 1 year". The first parameter is daily. The second parameter is 1 year. Detailed below.
func (o FrameworkControlOutput) InputParameters() FrameworkControlInputParameterArrayOutput {
	return o.ApplyT(func(v FrameworkControl) []FrameworkControlInputParameter { return v.InputParameters }).(FrameworkControlInputParameterArrayOutput)
}

// The name of a parameter, for example, BackupPlanFrequency.
func (o FrameworkControlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FrameworkControl) string { return v.Name }).(pulumi.StringOutput)
}

// The scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans. Detailed below.
func (o FrameworkControlOutput) Scope() FrameworkControlScopePtrOutput {
	return o.ApplyT(func(v FrameworkControl) *FrameworkControlScope { return v.Scope }).(FrameworkControlScopePtrOutput)
}

type FrameworkControlArrayOutput struct{ *pulumi.OutputState }

func (FrameworkControlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrameworkControl)(nil)).Elem()
}

func (o FrameworkControlArrayOutput) ToFrameworkControlArrayOutput() FrameworkControlArrayOutput {
	return o
}

func (o FrameworkControlArrayOutput) ToFrameworkControlArrayOutputWithContext(ctx context.Context) FrameworkControlArrayOutput {
	return o
}

func (o FrameworkControlArrayOutput) Index(i pulumi.IntInput) FrameworkControlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FrameworkControl {
		return vs[0].([]FrameworkControl)[vs[1].(int)]
	}).(FrameworkControlOutput)
}

type FrameworkControlInputParameter struct {
	// The name of a parameter, for example, BackupPlanFrequency.
	Name *string `pulumi:"name"`
	// The value of parameter, for example, hourly.
	Value *string `pulumi:"value"`
}

// FrameworkControlInputParameterInput is an input type that accepts FrameworkControlInputParameterArgs and FrameworkControlInputParameterOutput values.
// You can construct a concrete instance of `FrameworkControlInputParameterInput` via:
//
//          FrameworkControlInputParameterArgs{...}
type FrameworkControlInputParameterInput interface {
	pulumi.Input

	ToFrameworkControlInputParameterOutput() FrameworkControlInputParameterOutput
	ToFrameworkControlInputParameterOutputWithContext(context.Context) FrameworkControlInputParameterOutput
}

type FrameworkControlInputParameterArgs struct {
	// The name of a parameter, for example, BackupPlanFrequency.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The value of parameter, for example, hourly.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (FrameworkControlInputParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrameworkControlInputParameter)(nil)).Elem()
}

func (i FrameworkControlInputParameterArgs) ToFrameworkControlInputParameterOutput() FrameworkControlInputParameterOutput {
	return i.ToFrameworkControlInputParameterOutputWithContext(context.Background())
}

func (i FrameworkControlInputParameterArgs) ToFrameworkControlInputParameterOutputWithContext(ctx context.Context) FrameworkControlInputParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrameworkControlInputParameterOutput)
}

// FrameworkControlInputParameterArrayInput is an input type that accepts FrameworkControlInputParameterArray and FrameworkControlInputParameterArrayOutput values.
// You can construct a concrete instance of `FrameworkControlInputParameterArrayInput` via:
//
//          FrameworkControlInputParameterArray{ FrameworkControlInputParameterArgs{...} }
type FrameworkControlInputParameterArrayInput interface {
	pulumi.Input

	ToFrameworkControlInputParameterArrayOutput() FrameworkControlInputParameterArrayOutput
	ToFrameworkControlInputParameterArrayOutputWithContext(context.Context) FrameworkControlInputParameterArrayOutput
}

type FrameworkControlInputParameterArray []FrameworkControlInputParameterInput

func (FrameworkControlInputParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrameworkControlInputParameter)(nil)).Elem()
}

func (i FrameworkControlInputParameterArray) ToFrameworkControlInputParameterArrayOutput() FrameworkControlInputParameterArrayOutput {
	return i.ToFrameworkControlInputParameterArrayOutputWithContext(context.Background())
}

func (i FrameworkControlInputParameterArray) ToFrameworkControlInputParameterArrayOutputWithContext(ctx context.Context) FrameworkControlInputParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrameworkControlInputParameterArrayOutput)
}

type FrameworkControlInputParameterOutput struct{ *pulumi.OutputState }

func (FrameworkControlInputParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrameworkControlInputParameter)(nil)).Elem()
}

func (o FrameworkControlInputParameterOutput) ToFrameworkControlInputParameterOutput() FrameworkControlInputParameterOutput {
	return o
}

func (o FrameworkControlInputParameterOutput) ToFrameworkControlInputParameterOutputWithContext(ctx context.Context) FrameworkControlInputParameterOutput {
	return o
}

// The name of a parameter, for example, BackupPlanFrequency.
func (o FrameworkControlInputParameterOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrameworkControlInputParameter) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The value of parameter, for example, hourly.
func (o FrameworkControlInputParameterOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrameworkControlInputParameter) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type FrameworkControlInputParameterArrayOutput struct{ *pulumi.OutputState }

func (FrameworkControlInputParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrameworkControlInputParameter)(nil)).Elem()
}

func (o FrameworkControlInputParameterArrayOutput) ToFrameworkControlInputParameterArrayOutput() FrameworkControlInputParameterArrayOutput {
	return o
}

func (o FrameworkControlInputParameterArrayOutput) ToFrameworkControlInputParameterArrayOutputWithContext(ctx context.Context) FrameworkControlInputParameterArrayOutput {
	return o
}

func (o FrameworkControlInputParameterArrayOutput) Index(i pulumi.IntInput) FrameworkControlInputParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FrameworkControlInputParameter {
		return vs[0].([]FrameworkControlInputParameter)[vs[1].(int)]
	}).(FrameworkControlInputParameterOutput)
}

type FrameworkControlScope struct {
	// The ID of the only AWS resource that you want your control scope to contain. Minimum number of 1 item. Maximum number of 100 items.
	ComplianceResourceIds []string `pulumi:"complianceResourceIds"`
	// Describes whether the control scope includes one or more types of resources, such as EFS or RDS.
	ComplianceResourceTypes []string `pulumi:"complianceResourceTypes"`
	// The tag key-value pair applied to those AWS resources that you want to trigger an evaluation for a rule. A maximum of one key-value pair can be provided.
	Tags map[string]string `pulumi:"tags"`
}

// FrameworkControlScopeInput is an input type that accepts FrameworkControlScopeArgs and FrameworkControlScopeOutput values.
// You can construct a concrete instance of `FrameworkControlScopeInput` via:
//
//          FrameworkControlScopeArgs{...}
type FrameworkControlScopeInput interface {
	pulumi.Input

	ToFrameworkControlScopeOutput() FrameworkControlScopeOutput
	ToFrameworkControlScopeOutputWithContext(context.Context) FrameworkControlScopeOutput
}

type FrameworkControlScopeArgs struct {
	// The ID of the only AWS resource that you want your control scope to contain. Minimum number of 1 item. Maximum number of 100 items.
	ComplianceResourceIds pulumi.StringArrayInput `pulumi:"complianceResourceIds"`
	// Describes whether the control scope includes one or more types of resources, such as EFS or RDS.
	ComplianceResourceTypes pulumi.StringArrayInput `pulumi:"complianceResourceTypes"`
	// The tag key-value pair applied to those AWS resources that you want to trigger an evaluation for a rule. A maximum of one key-value pair can be provided.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (FrameworkControlScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrameworkControlScope)(nil)).Elem()
}

func (i FrameworkControlScopeArgs) ToFrameworkControlScopeOutput() FrameworkControlScopeOutput {
	return i.ToFrameworkControlScopeOutputWithContext(context.Background())
}

func (i FrameworkControlScopeArgs) ToFrameworkControlScopeOutputWithContext(ctx context.Context) FrameworkControlScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrameworkControlScopeOutput)
}

func (i FrameworkControlScopeArgs) ToFrameworkControlScopePtrOutput() FrameworkControlScopePtrOutput {
	return i.ToFrameworkControlScopePtrOutputWithContext(context.Background())
}

func (i FrameworkControlScopeArgs) ToFrameworkControlScopePtrOutputWithContext(ctx context.Context) FrameworkControlScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrameworkControlScopeOutput).ToFrameworkControlScopePtrOutputWithContext(ctx)
}

// FrameworkControlScopePtrInput is an input type that accepts FrameworkControlScopeArgs, FrameworkControlScopePtr and FrameworkControlScopePtrOutput values.
// You can construct a concrete instance of `FrameworkControlScopePtrInput` via:
//
//          FrameworkControlScopeArgs{...}
//
//  or:
//
//          nil
type FrameworkControlScopePtrInput interface {
	pulumi.Input

	ToFrameworkControlScopePtrOutput() FrameworkControlScopePtrOutput
	ToFrameworkControlScopePtrOutputWithContext(context.Context) FrameworkControlScopePtrOutput
}

type frameworkControlScopePtrType FrameworkControlScopeArgs

func FrameworkControlScopePtr(v *FrameworkControlScopeArgs) FrameworkControlScopePtrInput {
	return (*frameworkControlScopePtrType)(v)
}

func (*frameworkControlScopePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FrameworkControlScope)(nil)).Elem()
}

func (i *frameworkControlScopePtrType) ToFrameworkControlScopePtrOutput() FrameworkControlScopePtrOutput {
	return i.ToFrameworkControlScopePtrOutputWithContext(context.Background())
}

func (i *frameworkControlScopePtrType) ToFrameworkControlScopePtrOutputWithContext(ctx context.Context) FrameworkControlScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrameworkControlScopePtrOutput)
}

type FrameworkControlScopeOutput struct{ *pulumi.OutputState }

func (FrameworkControlScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrameworkControlScope)(nil)).Elem()
}

func (o FrameworkControlScopeOutput) ToFrameworkControlScopeOutput() FrameworkControlScopeOutput {
	return o
}

func (o FrameworkControlScopeOutput) ToFrameworkControlScopeOutputWithContext(ctx context.Context) FrameworkControlScopeOutput {
	return o
}

func (o FrameworkControlScopeOutput) ToFrameworkControlScopePtrOutput() FrameworkControlScopePtrOutput {
	return o.ToFrameworkControlScopePtrOutputWithContext(context.Background())
}

func (o FrameworkControlScopeOutput) ToFrameworkControlScopePtrOutputWithContext(ctx context.Context) FrameworkControlScopePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FrameworkControlScope) *FrameworkControlScope {
		return &v
	}).(FrameworkControlScopePtrOutput)
}

// The ID of the only AWS resource that you want your control scope to contain. Minimum number of 1 item. Maximum number of 100 items.
func (o FrameworkControlScopeOutput) ComplianceResourceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FrameworkControlScope) []string { return v.ComplianceResourceIds }).(pulumi.StringArrayOutput)
}

// Describes whether the control scope includes one or more types of resources, such as EFS or RDS.
func (o FrameworkControlScopeOutput) ComplianceResourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FrameworkControlScope) []string { return v.ComplianceResourceTypes }).(pulumi.StringArrayOutput)
}

// The tag key-value pair applied to those AWS resources that you want to trigger an evaluation for a rule. A maximum of one key-value pair can be provided.
func (o FrameworkControlScopeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v FrameworkControlScope) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type FrameworkControlScopePtrOutput struct{ *pulumi.OutputState }

func (FrameworkControlScopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FrameworkControlScope)(nil)).Elem()
}

func (o FrameworkControlScopePtrOutput) ToFrameworkControlScopePtrOutput() FrameworkControlScopePtrOutput {
	return o
}

func (o FrameworkControlScopePtrOutput) ToFrameworkControlScopePtrOutputWithContext(ctx context.Context) FrameworkControlScopePtrOutput {
	return o
}

func (o FrameworkControlScopePtrOutput) Elem() FrameworkControlScopeOutput {
	return o.ApplyT(func(v *FrameworkControlScope) FrameworkControlScope {
		if v != nil {
			return *v
		}
		var ret FrameworkControlScope
		return ret
	}).(FrameworkControlScopeOutput)
}

// The ID of the only AWS resource that you want your control scope to contain. Minimum number of 1 item. Maximum number of 100 items.
func (o FrameworkControlScopePtrOutput) ComplianceResourceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FrameworkControlScope) []string {
		if v == nil {
			return nil
		}
		return v.ComplianceResourceIds
	}).(pulumi.StringArrayOutput)
}

// Describes whether the control scope includes one or more types of resources, such as EFS or RDS.
func (o FrameworkControlScopePtrOutput) ComplianceResourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FrameworkControlScope) []string {
		if v == nil {
			return nil
		}
		return v.ComplianceResourceTypes
	}).(pulumi.StringArrayOutput)
}

// The tag key-value pair applied to those AWS resources that you want to trigger an evaluation for a rule. A maximum of one key-value pair can be provided.
func (o FrameworkControlScopePtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FrameworkControlScope) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type PlanAdvancedBackupSetting struct {
	// Specifies the backup option for a selected resource. This option is only available for Windows VSS backup jobs. Set to `{ WindowsVSS = "enabled" }` to enable Windows VSS backup option and create a VSS Windows backup.
	BackupOptions map[string]string `pulumi:"backupOptions"`
	// The type of AWS resource to be backed up. For VSS Windows backups, the only supported resource type is Amazon EC2. Valid values: `EC2`.
	ResourceType string `pulumi:"resourceType"`
}

// PlanAdvancedBackupSettingInput is an input type that accepts PlanAdvancedBackupSettingArgs and PlanAdvancedBackupSettingOutput values.
// You can construct a concrete instance of `PlanAdvancedBackupSettingInput` via:
//
//          PlanAdvancedBackupSettingArgs{...}
type PlanAdvancedBackupSettingInput interface {
	pulumi.Input

	ToPlanAdvancedBackupSettingOutput() PlanAdvancedBackupSettingOutput
	ToPlanAdvancedBackupSettingOutputWithContext(context.Context) PlanAdvancedBackupSettingOutput
}

type PlanAdvancedBackupSettingArgs struct {
	// Specifies the backup option for a selected resource. This option is only available for Windows VSS backup jobs. Set to `{ WindowsVSS = "enabled" }` to enable Windows VSS backup option and create a VSS Windows backup.
	BackupOptions pulumi.StringMapInput `pulumi:"backupOptions"`
	// The type of AWS resource to be backed up. For VSS Windows backups, the only supported resource type is Amazon EC2. Valid values: `EC2`.
	ResourceType pulumi.StringInput `pulumi:"resourceType"`
}

func (PlanAdvancedBackupSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanAdvancedBackupSetting)(nil)).Elem()
}

func (i PlanAdvancedBackupSettingArgs) ToPlanAdvancedBackupSettingOutput() PlanAdvancedBackupSettingOutput {
	return i.ToPlanAdvancedBackupSettingOutputWithContext(context.Background())
}

func (i PlanAdvancedBackupSettingArgs) ToPlanAdvancedBackupSettingOutputWithContext(ctx context.Context) PlanAdvancedBackupSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanAdvancedBackupSettingOutput)
}

// PlanAdvancedBackupSettingArrayInput is an input type that accepts PlanAdvancedBackupSettingArray and PlanAdvancedBackupSettingArrayOutput values.
// You can construct a concrete instance of `PlanAdvancedBackupSettingArrayInput` via:
//
//          PlanAdvancedBackupSettingArray{ PlanAdvancedBackupSettingArgs{...} }
type PlanAdvancedBackupSettingArrayInput interface {
	pulumi.Input

	ToPlanAdvancedBackupSettingArrayOutput() PlanAdvancedBackupSettingArrayOutput
	ToPlanAdvancedBackupSettingArrayOutputWithContext(context.Context) PlanAdvancedBackupSettingArrayOutput
}

type PlanAdvancedBackupSettingArray []PlanAdvancedBackupSettingInput

func (PlanAdvancedBackupSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanAdvancedBackupSetting)(nil)).Elem()
}

func (i PlanAdvancedBackupSettingArray) ToPlanAdvancedBackupSettingArrayOutput() PlanAdvancedBackupSettingArrayOutput {
	return i.ToPlanAdvancedBackupSettingArrayOutputWithContext(context.Background())
}

func (i PlanAdvancedBackupSettingArray) ToPlanAdvancedBackupSettingArrayOutputWithContext(ctx context.Context) PlanAdvancedBackupSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanAdvancedBackupSettingArrayOutput)
}

type PlanAdvancedBackupSettingOutput struct{ *pulumi.OutputState }

func (PlanAdvancedBackupSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanAdvancedBackupSetting)(nil)).Elem()
}

func (o PlanAdvancedBackupSettingOutput) ToPlanAdvancedBackupSettingOutput() PlanAdvancedBackupSettingOutput {
	return o
}

func (o PlanAdvancedBackupSettingOutput) ToPlanAdvancedBackupSettingOutputWithContext(ctx context.Context) PlanAdvancedBackupSettingOutput {
	return o
}

// Specifies the backup option for a selected resource. This option is only available for Windows VSS backup jobs. Set to `{ WindowsVSS = "enabled" }` to enable Windows VSS backup option and create a VSS Windows backup.
func (o PlanAdvancedBackupSettingOutput) BackupOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v PlanAdvancedBackupSetting) map[string]string { return v.BackupOptions }).(pulumi.StringMapOutput)
}

// The type of AWS resource to be backed up. For VSS Windows backups, the only supported resource type is Amazon EC2. Valid values: `EC2`.
func (o PlanAdvancedBackupSettingOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v PlanAdvancedBackupSetting) string { return v.ResourceType }).(pulumi.StringOutput)
}

type PlanAdvancedBackupSettingArrayOutput struct{ *pulumi.OutputState }

func (PlanAdvancedBackupSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanAdvancedBackupSetting)(nil)).Elem()
}

func (o PlanAdvancedBackupSettingArrayOutput) ToPlanAdvancedBackupSettingArrayOutput() PlanAdvancedBackupSettingArrayOutput {
	return o
}

func (o PlanAdvancedBackupSettingArrayOutput) ToPlanAdvancedBackupSettingArrayOutputWithContext(ctx context.Context) PlanAdvancedBackupSettingArrayOutput {
	return o
}

func (o PlanAdvancedBackupSettingArrayOutput) Index(i pulumi.IntInput) PlanAdvancedBackupSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlanAdvancedBackupSetting {
		return vs[0].([]PlanAdvancedBackupSetting)[vs[1].(int)]
	}).(PlanAdvancedBackupSettingOutput)
}

type PlanRule struct {
	// The amount of time AWS Backup attempts a backup before canceling the job and returning an error.
	CompletionWindow *int `pulumi:"completionWindow"`
	// Configuration block(s) with copy operation settings. Detailed below.
	CopyActions []PlanRuleCopyAction `pulumi:"copyActions"`
	// Enable continuous backups for supported resources.
	EnableContinuousBackup *bool `pulumi:"enableContinuousBackup"`
	// The lifecycle defines when a protected resource is copied over to a backup vault and when it expires.  Fields documented above.
	Lifecycle *PlanRuleLifecycle `pulumi:"lifecycle"`
	// Metadata that you can assign to help organize the resources that you create.
	RecoveryPointTags map[string]string `pulumi:"recoveryPointTags"`
	// An display name for a backup rule.
	RuleName string `pulumi:"ruleName"`
	// A CRON expression specifying when AWS Backup initiates a backup job.
	Schedule *string `pulumi:"schedule"`
	// The amount of time in minutes before beginning a backup.
	StartWindow *int `pulumi:"startWindow"`
	// The name of a logical container where backups are stored.
	TargetVaultName string `pulumi:"targetVaultName"`
}

// PlanRuleInput is an input type that accepts PlanRuleArgs and PlanRuleOutput values.
// You can construct a concrete instance of `PlanRuleInput` via:
//
//          PlanRuleArgs{...}
type PlanRuleInput interface {
	pulumi.Input

	ToPlanRuleOutput() PlanRuleOutput
	ToPlanRuleOutputWithContext(context.Context) PlanRuleOutput
}

type PlanRuleArgs struct {
	// The amount of time AWS Backup attempts a backup before canceling the job and returning an error.
	CompletionWindow pulumi.IntPtrInput `pulumi:"completionWindow"`
	// Configuration block(s) with copy operation settings. Detailed below.
	CopyActions PlanRuleCopyActionArrayInput `pulumi:"copyActions"`
	// Enable continuous backups for supported resources.
	EnableContinuousBackup pulumi.BoolPtrInput `pulumi:"enableContinuousBackup"`
	// The lifecycle defines when a protected resource is copied over to a backup vault and when it expires.  Fields documented above.
	Lifecycle PlanRuleLifecyclePtrInput `pulumi:"lifecycle"`
	// Metadata that you can assign to help organize the resources that you create.
	RecoveryPointTags pulumi.StringMapInput `pulumi:"recoveryPointTags"`
	// An display name for a backup rule.
	RuleName pulumi.StringInput `pulumi:"ruleName"`
	// A CRON expression specifying when AWS Backup initiates a backup job.
	Schedule pulumi.StringPtrInput `pulumi:"schedule"`
	// The amount of time in minutes before beginning a backup.
	StartWindow pulumi.IntPtrInput `pulumi:"startWindow"`
	// The name of a logical container where backups are stored.
	TargetVaultName pulumi.StringInput `pulumi:"targetVaultName"`
}

func (PlanRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanRule)(nil)).Elem()
}

func (i PlanRuleArgs) ToPlanRuleOutput() PlanRuleOutput {
	return i.ToPlanRuleOutputWithContext(context.Background())
}

func (i PlanRuleArgs) ToPlanRuleOutputWithContext(ctx context.Context) PlanRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanRuleOutput)
}

// PlanRuleArrayInput is an input type that accepts PlanRuleArray and PlanRuleArrayOutput values.
// You can construct a concrete instance of `PlanRuleArrayInput` via:
//
//          PlanRuleArray{ PlanRuleArgs{...} }
type PlanRuleArrayInput interface {
	pulumi.Input

	ToPlanRuleArrayOutput() PlanRuleArrayOutput
	ToPlanRuleArrayOutputWithContext(context.Context) PlanRuleArrayOutput
}

type PlanRuleArray []PlanRuleInput

func (PlanRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanRule)(nil)).Elem()
}

func (i PlanRuleArray) ToPlanRuleArrayOutput() PlanRuleArrayOutput {
	return i.ToPlanRuleArrayOutputWithContext(context.Background())
}

func (i PlanRuleArray) ToPlanRuleArrayOutputWithContext(ctx context.Context) PlanRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanRuleArrayOutput)
}

type PlanRuleOutput struct{ *pulumi.OutputState }

func (PlanRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanRule)(nil)).Elem()
}

func (o PlanRuleOutput) ToPlanRuleOutput() PlanRuleOutput {
	return o
}

func (o PlanRuleOutput) ToPlanRuleOutputWithContext(ctx context.Context) PlanRuleOutput {
	return o
}

// The amount of time AWS Backup attempts a backup before canceling the job and returning an error.
func (o PlanRuleOutput) CompletionWindow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PlanRule) *int { return v.CompletionWindow }).(pulumi.IntPtrOutput)
}

// Configuration block(s) with copy operation settings. Detailed below.
func (o PlanRuleOutput) CopyActions() PlanRuleCopyActionArrayOutput {
	return o.ApplyT(func(v PlanRule) []PlanRuleCopyAction { return v.CopyActions }).(PlanRuleCopyActionArrayOutput)
}

// Enable continuous backups for supported resources.
func (o PlanRuleOutput) EnableContinuousBackup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PlanRule) *bool { return v.EnableContinuousBackup }).(pulumi.BoolPtrOutput)
}

// The lifecycle defines when a protected resource is copied over to a backup vault and when it expires.  Fields documented above.
func (o PlanRuleOutput) Lifecycle() PlanRuleLifecyclePtrOutput {
	return o.ApplyT(func(v PlanRule) *PlanRuleLifecycle { return v.Lifecycle }).(PlanRuleLifecyclePtrOutput)
}

// Metadata that you can assign to help organize the resources that you create.
func (o PlanRuleOutput) RecoveryPointTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v PlanRule) map[string]string { return v.RecoveryPointTags }).(pulumi.StringMapOutput)
}

// An display name for a backup rule.
func (o PlanRuleOutput) RuleName() pulumi.StringOutput {
	return o.ApplyT(func(v PlanRule) string { return v.RuleName }).(pulumi.StringOutput)
}

// A CRON expression specifying when AWS Backup initiates a backup job.
func (o PlanRuleOutput) Schedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanRule) *string { return v.Schedule }).(pulumi.StringPtrOutput)
}

// The amount of time in minutes before beginning a backup.
func (o PlanRuleOutput) StartWindow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PlanRule) *int { return v.StartWindow }).(pulumi.IntPtrOutput)
}

// The name of a logical container where backups are stored.
func (o PlanRuleOutput) TargetVaultName() pulumi.StringOutput {
	return o.ApplyT(func(v PlanRule) string { return v.TargetVaultName }).(pulumi.StringOutput)
}

type PlanRuleArrayOutput struct{ *pulumi.OutputState }

func (PlanRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanRule)(nil)).Elem()
}

func (o PlanRuleArrayOutput) ToPlanRuleArrayOutput() PlanRuleArrayOutput {
	return o
}

func (o PlanRuleArrayOutput) ToPlanRuleArrayOutputWithContext(ctx context.Context) PlanRuleArrayOutput {
	return o
}

func (o PlanRuleArrayOutput) Index(i pulumi.IntInput) PlanRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlanRule {
		return vs[0].([]PlanRule)[vs[1].(int)]
	}).(PlanRuleOutput)
}

type PlanRuleCopyAction struct {
	// An Amazon Resource Name (ARN) that uniquely identifies the destination backup vault for the copied backup.
	DestinationVaultArn string `pulumi:"destinationVaultArn"`
	// The lifecycle defines when a protected resource is copied over to a backup vault and when it expires.  Fields documented above.
	Lifecycle *PlanRuleCopyActionLifecycle `pulumi:"lifecycle"`
}

// PlanRuleCopyActionInput is an input type that accepts PlanRuleCopyActionArgs and PlanRuleCopyActionOutput values.
// You can construct a concrete instance of `PlanRuleCopyActionInput` via:
//
//          PlanRuleCopyActionArgs{...}
type PlanRuleCopyActionInput interface {
	pulumi.Input

	ToPlanRuleCopyActionOutput() PlanRuleCopyActionOutput
	ToPlanRuleCopyActionOutputWithContext(context.Context) PlanRuleCopyActionOutput
}

type PlanRuleCopyActionArgs struct {
	// An Amazon Resource Name (ARN) that uniquely identifies the destination backup vault for the copied backup.
	DestinationVaultArn pulumi.StringInput `pulumi:"destinationVaultArn"`
	// The lifecycle defines when a protected resource is copied over to a backup vault and when it expires.  Fields documented above.
	Lifecycle PlanRuleCopyActionLifecyclePtrInput `pulumi:"lifecycle"`
}

func (PlanRuleCopyActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanRuleCopyAction)(nil)).Elem()
}

func (i PlanRuleCopyActionArgs) ToPlanRuleCopyActionOutput() PlanRuleCopyActionOutput {
	return i.ToPlanRuleCopyActionOutputWithContext(context.Background())
}

func (i PlanRuleCopyActionArgs) ToPlanRuleCopyActionOutputWithContext(ctx context.Context) PlanRuleCopyActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanRuleCopyActionOutput)
}

// PlanRuleCopyActionArrayInput is an input type that accepts PlanRuleCopyActionArray and PlanRuleCopyActionArrayOutput values.
// You can construct a concrete instance of `PlanRuleCopyActionArrayInput` via:
//
//          PlanRuleCopyActionArray{ PlanRuleCopyActionArgs{...} }
type PlanRuleCopyActionArrayInput interface {
	pulumi.Input

	ToPlanRuleCopyActionArrayOutput() PlanRuleCopyActionArrayOutput
	ToPlanRuleCopyActionArrayOutputWithContext(context.Context) PlanRuleCopyActionArrayOutput
}

type PlanRuleCopyActionArray []PlanRuleCopyActionInput

func (PlanRuleCopyActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanRuleCopyAction)(nil)).Elem()
}

func (i PlanRuleCopyActionArray) ToPlanRuleCopyActionArrayOutput() PlanRuleCopyActionArrayOutput {
	return i.ToPlanRuleCopyActionArrayOutputWithContext(context.Background())
}

func (i PlanRuleCopyActionArray) ToPlanRuleCopyActionArrayOutputWithContext(ctx context.Context) PlanRuleCopyActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanRuleCopyActionArrayOutput)
}

type PlanRuleCopyActionOutput struct{ *pulumi.OutputState }

func (PlanRuleCopyActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanRuleCopyAction)(nil)).Elem()
}

func (o PlanRuleCopyActionOutput) ToPlanRuleCopyActionOutput() PlanRuleCopyActionOutput {
	return o
}

func (o PlanRuleCopyActionOutput) ToPlanRuleCopyActionOutputWithContext(ctx context.Context) PlanRuleCopyActionOutput {
	return o
}

// An Amazon Resource Name (ARN) that uniquely identifies the destination backup vault for the copied backup.
func (o PlanRuleCopyActionOutput) DestinationVaultArn() pulumi.StringOutput {
	return o.ApplyT(func(v PlanRuleCopyAction) string { return v.DestinationVaultArn }).(pulumi.StringOutput)
}

// The lifecycle defines when a protected resource is copied over to a backup vault and when it expires.  Fields documented above.
func (o PlanRuleCopyActionOutput) Lifecycle() PlanRuleCopyActionLifecyclePtrOutput {
	return o.ApplyT(func(v PlanRuleCopyAction) *PlanRuleCopyActionLifecycle { return v.Lifecycle }).(PlanRuleCopyActionLifecyclePtrOutput)
}

type PlanRuleCopyActionArrayOutput struct{ *pulumi.OutputState }

func (PlanRuleCopyActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanRuleCopyAction)(nil)).Elem()
}

func (o PlanRuleCopyActionArrayOutput) ToPlanRuleCopyActionArrayOutput() PlanRuleCopyActionArrayOutput {
	return o
}

func (o PlanRuleCopyActionArrayOutput) ToPlanRuleCopyActionArrayOutputWithContext(ctx context.Context) PlanRuleCopyActionArrayOutput {
	return o
}

func (o PlanRuleCopyActionArrayOutput) Index(i pulumi.IntInput) PlanRuleCopyActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlanRuleCopyAction {
		return vs[0].([]PlanRuleCopyAction)[vs[1].(int)]
	}).(PlanRuleCopyActionOutput)
}

type PlanRuleCopyActionLifecycle struct {
	// Specifies the number of days after creation that a recovery point is moved to cold storage.
	ColdStorageAfter *int `pulumi:"coldStorageAfter"`
	// Specifies the number of days after creation that a recovery point is deleted. Must be 90 days greater than `coldStorageAfter`.
	DeleteAfter *int `pulumi:"deleteAfter"`
}

// PlanRuleCopyActionLifecycleInput is an input type that accepts PlanRuleCopyActionLifecycleArgs and PlanRuleCopyActionLifecycleOutput values.
// You can construct a concrete instance of `PlanRuleCopyActionLifecycleInput` via:
//
//          PlanRuleCopyActionLifecycleArgs{...}
type PlanRuleCopyActionLifecycleInput interface {
	pulumi.Input

	ToPlanRuleCopyActionLifecycleOutput() PlanRuleCopyActionLifecycleOutput
	ToPlanRuleCopyActionLifecycleOutputWithContext(context.Context) PlanRuleCopyActionLifecycleOutput
}

type PlanRuleCopyActionLifecycleArgs struct {
	// Specifies the number of days after creation that a recovery point is moved to cold storage.
	ColdStorageAfter pulumi.IntPtrInput `pulumi:"coldStorageAfter"`
	// Specifies the number of days after creation that a recovery point is deleted. Must be 90 days greater than `coldStorageAfter`.
	DeleteAfter pulumi.IntPtrInput `pulumi:"deleteAfter"`
}

func (PlanRuleCopyActionLifecycleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanRuleCopyActionLifecycle)(nil)).Elem()
}

func (i PlanRuleCopyActionLifecycleArgs) ToPlanRuleCopyActionLifecycleOutput() PlanRuleCopyActionLifecycleOutput {
	return i.ToPlanRuleCopyActionLifecycleOutputWithContext(context.Background())
}

func (i PlanRuleCopyActionLifecycleArgs) ToPlanRuleCopyActionLifecycleOutputWithContext(ctx context.Context) PlanRuleCopyActionLifecycleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanRuleCopyActionLifecycleOutput)
}

func (i PlanRuleCopyActionLifecycleArgs) ToPlanRuleCopyActionLifecyclePtrOutput() PlanRuleCopyActionLifecyclePtrOutput {
	return i.ToPlanRuleCopyActionLifecyclePtrOutputWithContext(context.Background())
}

func (i PlanRuleCopyActionLifecycleArgs) ToPlanRuleCopyActionLifecyclePtrOutputWithContext(ctx context.Context) PlanRuleCopyActionLifecyclePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanRuleCopyActionLifecycleOutput).ToPlanRuleCopyActionLifecyclePtrOutputWithContext(ctx)
}

// PlanRuleCopyActionLifecyclePtrInput is an input type that accepts PlanRuleCopyActionLifecycleArgs, PlanRuleCopyActionLifecyclePtr and PlanRuleCopyActionLifecyclePtrOutput values.
// You can construct a concrete instance of `PlanRuleCopyActionLifecyclePtrInput` via:
//
//          PlanRuleCopyActionLifecycleArgs{...}
//
//  or:
//
//          nil
type PlanRuleCopyActionLifecyclePtrInput interface {
	pulumi.Input

	ToPlanRuleCopyActionLifecyclePtrOutput() PlanRuleCopyActionLifecyclePtrOutput
	ToPlanRuleCopyActionLifecyclePtrOutputWithContext(context.Context) PlanRuleCopyActionLifecyclePtrOutput
}

type planRuleCopyActionLifecyclePtrType PlanRuleCopyActionLifecycleArgs

func PlanRuleCopyActionLifecyclePtr(v *PlanRuleCopyActionLifecycleArgs) PlanRuleCopyActionLifecyclePtrInput {
	return (*planRuleCopyActionLifecyclePtrType)(v)
}

func (*planRuleCopyActionLifecyclePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanRuleCopyActionLifecycle)(nil)).Elem()
}

func (i *planRuleCopyActionLifecyclePtrType) ToPlanRuleCopyActionLifecyclePtrOutput() PlanRuleCopyActionLifecyclePtrOutput {
	return i.ToPlanRuleCopyActionLifecyclePtrOutputWithContext(context.Background())
}

func (i *planRuleCopyActionLifecyclePtrType) ToPlanRuleCopyActionLifecyclePtrOutputWithContext(ctx context.Context) PlanRuleCopyActionLifecyclePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanRuleCopyActionLifecyclePtrOutput)
}

type PlanRuleCopyActionLifecycleOutput struct{ *pulumi.OutputState }

func (PlanRuleCopyActionLifecycleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanRuleCopyActionLifecycle)(nil)).Elem()
}

func (o PlanRuleCopyActionLifecycleOutput) ToPlanRuleCopyActionLifecycleOutput() PlanRuleCopyActionLifecycleOutput {
	return o
}

func (o PlanRuleCopyActionLifecycleOutput) ToPlanRuleCopyActionLifecycleOutputWithContext(ctx context.Context) PlanRuleCopyActionLifecycleOutput {
	return o
}

func (o PlanRuleCopyActionLifecycleOutput) ToPlanRuleCopyActionLifecyclePtrOutput() PlanRuleCopyActionLifecyclePtrOutput {
	return o.ToPlanRuleCopyActionLifecyclePtrOutputWithContext(context.Background())
}

func (o PlanRuleCopyActionLifecycleOutput) ToPlanRuleCopyActionLifecyclePtrOutputWithContext(ctx context.Context) PlanRuleCopyActionLifecyclePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlanRuleCopyActionLifecycle) *PlanRuleCopyActionLifecycle {
		return &v
	}).(PlanRuleCopyActionLifecyclePtrOutput)
}

// Specifies the number of days after creation that a recovery point is moved to cold storage.
func (o PlanRuleCopyActionLifecycleOutput) ColdStorageAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PlanRuleCopyActionLifecycle) *int { return v.ColdStorageAfter }).(pulumi.IntPtrOutput)
}

// Specifies the number of days after creation that a recovery point is deleted. Must be 90 days greater than `coldStorageAfter`.
func (o PlanRuleCopyActionLifecycleOutput) DeleteAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PlanRuleCopyActionLifecycle) *int { return v.DeleteAfter }).(pulumi.IntPtrOutput)
}

type PlanRuleCopyActionLifecyclePtrOutput struct{ *pulumi.OutputState }

func (PlanRuleCopyActionLifecyclePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanRuleCopyActionLifecycle)(nil)).Elem()
}

func (o PlanRuleCopyActionLifecyclePtrOutput) ToPlanRuleCopyActionLifecyclePtrOutput() PlanRuleCopyActionLifecyclePtrOutput {
	return o
}

func (o PlanRuleCopyActionLifecyclePtrOutput) ToPlanRuleCopyActionLifecyclePtrOutputWithContext(ctx context.Context) PlanRuleCopyActionLifecyclePtrOutput {
	return o
}

func (o PlanRuleCopyActionLifecyclePtrOutput) Elem() PlanRuleCopyActionLifecycleOutput {
	return o.ApplyT(func(v *PlanRuleCopyActionLifecycle) PlanRuleCopyActionLifecycle {
		if v != nil {
			return *v
		}
		var ret PlanRuleCopyActionLifecycle
		return ret
	}).(PlanRuleCopyActionLifecycleOutput)
}

// Specifies the number of days after creation that a recovery point is moved to cold storage.
func (o PlanRuleCopyActionLifecyclePtrOutput) ColdStorageAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PlanRuleCopyActionLifecycle) *int {
		if v == nil {
			return nil
		}
		return v.ColdStorageAfter
	}).(pulumi.IntPtrOutput)
}

// Specifies the number of days after creation that a recovery point is deleted. Must be 90 days greater than `coldStorageAfter`.
func (o PlanRuleCopyActionLifecyclePtrOutput) DeleteAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PlanRuleCopyActionLifecycle) *int {
		if v == nil {
			return nil
		}
		return v.DeleteAfter
	}).(pulumi.IntPtrOutput)
}

type PlanRuleLifecycle struct {
	// Specifies the number of days after creation that a recovery point is moved to cold storage.
	ColdStorageAfter *int `pulumi:"coldStorageAfter"`
	// Specifies the number of days after creation that a recovery point is deleted. Must be 90 days greater than `coldStorageAfter`.
	DeleteAfter *int `pulumi:"deleteAfter"`
}

// PlanRuleLifecycleInput is an input type that accepts PlanRuleLifecycleArgs and PlanRuleLifecycleOutput values.
// You can construct a concrete instance of `PlanRuleLifecycleInput` via:
//
//          PlanRuleLifecycleArgs{...}
type PlanRuleLifecycleInput interface {
	pulumi.Input

	ToPlanRuleLifecycleOutput() PlanRuleLifecycleOutput
	ToPlanRuleLifecycleOutputWithContext(context.Context) PlanRuleLifecycleOutput
}

type PlanRuleLifecycleArgs struct {
	// Specifies the number of days after creation that a recovery point is moved to cold storage.
	ColdStorageAfter pulumi.IntPtrInput `pulumi:"coldStorageAfter"`
	// Specifies the number of days after creation that a recovery point is deleted. Must be 90 days greater than `coldStorageAfter`.
	DeleteAfter pulumi.IntPtrInput `pulumi:"deleteAfter"`
}

func (PlanRuleLifecycleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanRuleLifecycle)(nil)).Elem()
}

func (i PlanRuleLifecycleArgs) ToPlanRuleLifecycleOutput() PlanRuleLifecycleOutput {
	return i.ToPlanRuleLifecycleOutputWithContext(context.Background())
}

func (i PlanRuleLifecycleArgs) ToPlanRuleLifecycleOutputWithContext(ctx context.Context) PlanRuleLifecycleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanRuleLifecycleOutput)
}

func (i PlanRuleLifecycleArgs) ToPlanRuleLifecyclePtrOutput() PlanRuleLifecyclePtrOutput {
	return i.ToPlanRuleLifecyclePtrOutputWithContext(context.Background())
}

func (i PlanRuleLifecycleArgs) ToPlanRuleLifecyclePtrOutputWithContext(ctx context.Context) PlanRuleLifecyclePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanRuleLifecycleOutput).ToPlanRuleLifecyclePtrOutputWithContext(ctx)
}

// PlanRuleLifecyclePtrInput is an input type that accepts PlanRuleLifecycleArgs, PlanRuleLifecyclePtr and PlanRuleLifecyclePtrOutput values.
// You can construct a concrete instance of `PlanRuleLifecyclePtrInput` via:
//
//          PlanRuleLifecycleArgs{...}
//
//  or:
//
//          nil
type PlanRuleLifecyclePtrInput interface {
	pulumi.Input

	ToPlanRuleLifecyclePtrOutput() PlanRuleLifecyclePtrOutput
	ToPlanRuleLifecyclePtrOutputWithContext(context.Context) PlanRuleLifecyclePtrOutput
}

type planRuleLifecyclePtrType PlanRuleLifecycleArgs

func PlanRuleLifecyclePtr(v *PlanRuleLifecycleArgs) PlanRuleLifecyclePtrInput {
	return (*planRuleLifecyclePtrType)(v)
}

func (*planRuleLifecyclePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanRuleLifecycle)(nil)).Elem()
}

func (i *planRuleLifecyclePtrType) ToPlanRuleLifecyclePtrOutput() PlanRuleLifecyclePtrOutput {
	return i.ToPlanRuleLifecyclePtrOutputWithContext(context.Background())
}

func (i *planRuleLifecyclePtrType) ToPlanRuleLifecyclePtrOutputWithContext(ctx context.Context) PlanRuleLifecyclePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanRuleLifecyclePtrOutput)
}

type PlanRuleLifecycleOutput struct{ *pulumi.OutputState }

func (PlanRuleLifecycleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanRuleLifecycle)(nil)).Elem()
}

func (o PlanRuleLifecycleOutput) ToPlanRuleLifecycleOutput() PlanRuleLifecycleOutput {
	return o
}

func (o PlanRuleLifecycleOutput) ToPlanRuleLifecycleOutputWithContext(ctx context.Context) PlanRuleLifecycleOutput {
	return o
}

func (o PlanRuleLifecycleOutput) ToPlanRuleLifecyclePtrOutput() PlanRuleLifecyclePtrOutput {
	return o.ToPlanRuleLifecyclePtrOutputWithContext(context.Background())
}

func (o PlanRuleLifecycleOutput) ToPlanRuleLifecyclePtrOutputWithContext(ctx context.Context) PlanRuleLifecyclePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlanRuleLifecycle) *PlanRuleLifecycle {
		return &v
	}).(PlanRuleLifecyclePtrOutput)
}

// Specifies the number of days after creation that a recovery point is moved to cold storage.
func (o PlanRuleLifecycleOutput) ColdStorageAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PlanRuleLifecycle) *int { return v.ColdStorageAfter }).(pulumi.IntPtrOutput)
}

// Specifies the number of days after creation that a recovery point is deleted. Must be 90 days greater than `coldStorageAfter`.
func (o PlanRuleLifecycleOutput) DeleteAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PlanRuleLifecycle) *int { return v.DeleteAfter }).(pulumi.IntPtrOutput)
}

type PlanRuleLifecyclePtrOutput struct{ *pulumi.OutputState }

func (PlanRuleLifecyclePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanRuleLifecycle)(nil)).Elem()
}

func (o PlanRuleLifecyclePtrOutput) ToPlanRuleLifecyclePtrOutput() PlanRuleLifecyclePtrOutput {
	return o
}

func (o PlanRuleLifecyclePtrOutput) ToPlanRuleLifecyclePtrOutputWithContext(ctx context.Context) PlanRuleLifecyclePtrOutput {
	return o
}

func (o PlanRuleLifecyclePtrOutput) Elem() PlanRuleLifecycleOutput {
	return o.ApplyT(func(v *PlanRuleLifecycle) PlanRuleLifecycle {
		if v != nil {
			return *v
		}
		var ret PlanRuleLifecycle
		return ret
	}).(PlanRuleLifecycleOutput)
}

// Specifies the number of days after creation that a recovery point is moved to cold storage.
func (o PlanRuleLifecyclePtrOutput) ColdStorageAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PlanRuleLifecycle) *int {
		if v == nil {
			return nil
		}
		return v.ColdStorageAfter
	}).(pulumi.IntPtrOutput)
}

// Specifies the number of days after creation that a recovery point is deleted. Must be 90 days greater than `coldStorageAfter`.
func (o PlanRuleLifecyclePtrOutput) DeleteAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PlanRuleLifecycle) *int {
		if v == nil {
			return nil
		}
		return v.DeleteAfter
	}).(pulumi.IntPtrOutput)
}

type ReportPlanReportDeliveryChannel struct {
	// A list of the format of your reports: CSV, JSON, or both. If not specified, the default format is CSV.
	Formats []string `pulumi:"formats"`
	// The unique name of the S3 bucket that receives your reports.
	S3BucketName string `pulumi:"s3BucketName"`
	// The prefix for where Backup Audit Manager delivers your reports to Amazon S3. The prefix is this part of the following path: s3://your-bucket-name/prefix/Backup/us-west-2/year/month/day/report-name. If not specified, there is no prefix.
	S3KeyPrefix *string `pulumi:"s3KeyPrefix"`
}

// ReportPlanReportDeliveryChannelInput is an input type that accepts ReportPlanReportDeliveryChannelArgs and ReportPlanReportDeliveryChannelOutput values.
// You can construct a concrete instance of `ReportPlanReportDeliveryChannelInput` via:
//
//          ReportPlanReportDeliveryChannelArgs{...}
type ReportPlanReportDeliveryChannelInput interface {
	pulumi.Input

	ToReportPlanReportDeliveryChannelOutput() ReportPlanReportDeliveryChannelOutput
	ToReportPlanReportDeliveryChannelOutputWithContext(context.Context) ReportPlanReportDeliveryChannelOutput
}

type ReportPlanReportDeliveryChannelArgs struct {
	// A list of the format of your reports: CSV, JSON, or both. If not specified, the default format is CSV.
	Formats pulumi.StringArrayInput `pulumi:"formats"`
	// The unique name of the S3 bucket that receives your reports.
	S3BucketName pulumi.StringInput `pulumi:"s3BucketName"`
	// The prefix for where Backup Audit Manager delivers your reports to Amazon S3. The prefix is this part of the following path: s3://your-bucket-name/prefix/Backup/us-west-2/year/month/day/report-name. If not specified, there is no prefix.
	S3KeyPrefix pulumi.StringPtrInput `pulumi:"s3KeyPrefix"`
}

func (ReportPlanReportDeliveryChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportPlanReportDeliveryChannel)(nil)).Elem()
}

func (i ReportPlanReportDeliveryChannelArgs) ToReportPlanReportDeliveryChannelOutput() ReportPlanReportDeliveryChannelOutput {
	return i.ToReportPlanReportDeliveryChannelOutputWithContext(context.Background())
}

func (i ReportPlanReportDeliveryChannelArgs) ToReportPlanReportDeliveryChannelOutputWithContext(ctx context.Context) ReportPlanReportDeliveryChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportPlanReportDeliveryChannelOutput)
}

func (i ReportPlanReportDeliveryChannelArgs) ToReportPlanReportDeliveryChannelPtrOutput() ReportPlanReportDeliveryChannelPtrOutput {
	return i.ToReportPlanReportDeliveryChannelPtrOutputWithContext(context.Background())
}

func (i ReportPlanReportDeliveryChannelArgs) ToReportPlanReportDeliveryChannelPtrOutputWithContext(ctx context.Context) ReportPlanReportDeliveryChannelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportPlanReportDeliveryChannelOutput).ToReportPlanReportDeliveryChannelPtrOutputWithContext(ctx)
}

// ReportPlanReportDeliveryChannelPtrInput is an input type that accepts ReportPlanReportDeliveryChannelArgs, ReportPlanReportDeliveryChannelPtr and ReportPlanReportDeliveryChannelPtrOutput values.
// You can construct a concrete instance of `ReportPlanReportDeliveryChannelPtrInput` via:
//
//          ReportPlanReportDeliveryChannelArgs{...}
//
//  or:
//
//          nil
type ReportPlanReportDeliveryChannelPtrInput interface {
	pulumi.Input

	ToReportPlanReportDeliveryChannelPtrOutput() ReportPlanReportDeliveryChannelPtrOutput
	ToReportPlanReportDeliveryChannelPtrOutputWithContext(context.Context) ReportPlanReportDeliveryChannelPtrOutput
}

type reportPlanReportDeliveryChannelPtrType ReportPlanReportDeliveryChannelArgs

func ReportPlanReportDeliveryChannelPtr(v *ReportPlanReportDeliveryChannelArgs) ReportPlanReportDeliveryChannelPtrInput {
	return (*reportPlanReportDeliveryChannelPtrType)(v)
}

func (*reportPlanReportDeliveryChannelPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportPlanReportDeliveryChannel)(nil)).Elem()
}

func (i *reportPlanReportDeliveryChannelPtrType) ToReportPlanReportDeliveryChannelPtrOutput() ReportPlanReportDeliveryChannelPtrOutput {
	return i.ToReportPlanReportDeliveryChannelPtrOutputWithContext(context.Background())
}

func (i *reportPlanReportDeliveryChannelPtrType) ToReportPlanReportDeliveryChannelPtrOutputWithContext(ctx context.Context) ReportPlanReportDeliveryChannelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportPlanReportDeliveryChannelPtrOutput)
}

type ReportPlanReportDeliveryChannelOutput struct{ *pulumi.OutputState }

func (ReportPlanReportDeliveryChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportPlanReportDeliveryChannel)(nil)).Elem()
}

func (o ReportPlanReportDeliveryChannelOutput) ToReportPlanReportDeliveryChannelOutput() ReportPlanReportDeliveryChannelOutput {
	return o
}

func (o ReportPlanReportDeliveryChannelOutput) ToReportPlanReportDeliveryChannelOutputWithContext(ctx context.Context) ReportPlanReportDeliveryChannelOutput {
	return o
}

func (o ReportPlanReportDeliveryChannelOutput) ToReportPlanReportDeliveryChannelPtrOutput() ReportPlanReportDeliveryChannelPtrOutput {
	return o.ToReportPlanReportDeliveryChannelPtrOutputWithContext(context.Background())
}

func (o ReportPlanReportDeliveryChannelOutput) ToReportPlanReportDeliveryChannelPtrOutputWithContext(ctx context.Context) ReportPlanReportDeliveryChannelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReportPlanReportDeliveryChannel) *ReportPlanReportDeliveryChannel {
		return &v
	}).(ReportPlanReportDeliveryChannelPtrOutput)
}

// A list of the format of your reports: CSV, JSON, or both. If not specified, the default format is CSV.
func (o ReportPlanReportDeliveryChannelOutput) Formats() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReportPlanReportDeliveryChannel) []string { return v.Formats }).(pulumi.StringArrayOutput)
}

// The unique name of the S3 bucket that receives your reports.
func (o ReportPlanReportDeliveryChannelOutput) S3BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v ReportPlanReportDeliveryChannel) string { return v.S3BucketName }).(pulumi.StringOutput)
}

// The prefix for where Backup Audit Manager delivers your reports to Amazon S3. The prefix is this part of the following path: s3://your-bucket-name/prefix/Backup/us-west-2/year/month/day/report-name. If not specified, there is no prefix.
func (o ReportPlanReportDeliveryChannelOutput) S3KeyPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportPlanReportDeliveryChannel) *string { return v.S3KeyPrefix }).(pulumi.StringPtrOutput)
}

type ReportPlanReportDeliveryChannelPtrOutput struct{ *pulumi.OutputState }

func (ReportPlanReportDeliveryChannelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportPlanReportDeliveryChannel)(nil)).Elem()
}

func (o ReportPlanReportDeliveryChannelPtrOutput) ToReportPlanReportDeliveryChannelPtrOutput() ReportPlanReportDeliveryChannelPtrOutput {
	return o
}

func (o ReportPlanReportDeliveryChannelPtrOutput) ToReportPlanReportDeliveryChannelPtrOutputWithContext(ctx context.Context) ReportPlanReportDeliveryChannelPtrOutput {
	return o
}

func (o ReportPlanReportDeliveryChannelPtrOutput) Elem() ReportPlanReportDeliveryChannelOutput {
	return o.ApplyT(func(v *ReportPlanReportDeliveryChannel) ReportPlanReportDeliveryChannel {
		if v != nil {
			return *v
		}
		var ret ReportPlanReportDeliveryChannel
		return ret
	}).(ReportPlanReportDeliveryChannelOutput)
}

// A list of the format of your reports: CSV, JSON, or both. If not specified, the default format is CSV.
func (o ReportPlanReportDeliveryChannelPtrOutput) Formats() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReportPlanReportDeliveryChannel) []string {
		if v == nil {
			return nil
		}
		return v.Formats
	}).(pulumi.StringArrayOutput)
}

// The unique name of the S3 bucket that receives your reports.
func (o ReportPlanReportDeliveryChannelPtrOutput) S3BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportPlanReportDeliveryChannel) *string {
		if v == nil {
			return nil
		}
		return &v.S3BucketName
	}).(pulumi.StringPtrOutput)
}

// The prefix for where Backup Audit Manager delivers your reports to Amazon S3. The prefix is this part of the following path: s3://your-bucket-name/prefix/Backup/us-west-2/year/month/day/report-name. If not specified, there is no prefix.
func (o ReportPlanReportDeliveryChannelPtrOutput) S3KeyPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportPlanReportDeliveryChannel) *string {
		if v == nil {
			return nil
		}
		return v.S3KeyPrefix
	}).(pulumi.StringPtrOutput)
}

type ReportPlanReportSetting struct {
	// Specifies the Amazon Resource Names (ARNs) of the frameworks a report covers.
	FrameworkArns []string `pulumi:"frameworkArns"`
	// Specifies the number of frameworks a report covers.
	NumberOfFrameworks *int `pulumi:"numberOfFrameworks"`
	// Identifies the report template for the report. Reports are built using a report template. The report templates are: `RESOURCE_COMPLIANCE_REPORT` | `CONTROL_COMPLIANCE_REPORT` | `BACKUP_JOB_REPORT` | `COPY_JOB_REPORT` | `RESTORE_JOB_REPORT`.
	ReportTemplate string `pulumi:"reportTemplate"`
}

// ReportPlanReportSettingInput is an input type that accepts ReportPlanReportSettingArgs and ReportPlanReportSettingOutput values.
// You can construct a concrete instance of `ReportPlanReportSettingInput` via:
//
//          ReportPlanReportSettingArgs{...}
type ReportPlanReportSettingInput interface {
	pulumi.Input

	ToReportPlanReportSettingOutput() ReportPlanReportSettingOutput
	ToReportPlanReportSettingOutputWithContext(context.Context) ReportPlanReportSettingOutput
}

type ReportPlanReportSettingArgs struct {
	// Specifies the Amazon Resource Names (ARNs) of the frameworks a report covers.
	FrameworkArns pulumi.StringArrayInput `pulumi:"frameworkArns"`
	// Specifies the number of frameworks a report covers.
	NumberOfFrameworks pulumi.IntPtrInput `pulumi:"numberOfFrameworks"`
	// Identifies the report template for the report. Reports are built using a report template. The report templates are: `RESOURCE_COMPLIANCE_REPORT` | `CONTROL_COMPLIANCE_REPORT` | `BACKUP_JOB_REPORT` | `COPY_JOB_REPORT` | `RESTORE_JOB_REPORT`.
	ReportTemplate pulumi.StringInput `pulumi:"reportTemplate"`
}

func (ReportPlanReportSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportPlanReportSetting)(nil)).Elem()
}

func (i ReportPlanReportSettingArgs) ToReportPlanReportSettingOutput() ReportPlanReportSettingOutput {
	return i.ToReportPlanReportSettingOutputWithContext(context.Background())
}

func (i ReportPlanReportSettingArgs) ToReportPlanReportSettingOutputWithContext(ctx context.Context) ReportPlanReportSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportPlanReportSettingOutput)
}

func (i ReportPlanReportSettingArgs) ToReportPlanReportSettingPtrOutput() ReportPlanReportSettingPtrOutput {
	return i.ToReportPlanReportSettingPtrOutputWithContext(context.Background())
}

func (i ReportPlanReportSettingArgs) ToReportPlanReportSettingPtrOutputWithContext(ctx context.Context) ReportPlanReportSettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportPlanReportSettingOutput).ToReportPlanReportSettingPtrOutputWithContext(ctx)
}

// ReportPlanReportSettingPtrInput is an input type that accepts ReportPlanReportSettingArgs, ReportPlanReportSettingPtr and ReportPlanReportSettingPtrOutput values.
// You can construct a concrete instance of `ReportPlanReportSettingPtrInput` via:
//
//          ReportPlanReportSettingArgs{...}
//
//  or:
//
//          nil
type ReportPlanReportSettingPtrInput interface {
	pulumi.Input

	ToReportPlanReportSettingPtrOutput() ReportPlanReportSettingPtrOutput
	ToReportPlanReportSettingPtrOutputWithContext(context.Context) ReportPlanReportSettingPtrOutput
}

type reportPlanReportSettingPtrType ReportPlanReportSettingArgs

func ReportPlanReportSettingPtr(v *ReportPlanReportSettingArgs) ReportPlanReportSettingPtrInput {
	return (*reportPlanReportSettingPtrType)(v)
}

func (*reportPlanReportSettingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportPlanReportSetting)(nil)).Elem()
}

func (i *reportPlanReportSettingPtrType) ToReportPlanReportSettingPtrOutput() ReportPlanReportSettingPtrOutput {
	return i.ToReportPlanReportSettingPtrOutputWithContext(context.Background())
}

func (i *reportPlanReportSettingPtrType) ToReportPlanReportSettingPtrOutputWithContext(ctx context.Context) ReportPlanReportSettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportPlanReportSettingPtrOutput)
}

type ReportPlanReportSettingOutput struct{ *pulumi.OutputState }

func (ReportPlanReportSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportPlanReportSetting)(nil)).Elem()
}

func (o ReportPlanReportSettingOutput) ToReportPlanReportSettingOutput() ReportPlanReportSettingOutput {
	return o
}

func (o ReportPlanReportSettingOutput) ToReportPlanReportSettingOutputWithContext(ctx context.Context) ReportPlanReportSettingOutput {
	return o
}

func (o ReportPlanReportSettingOutput) ToReportPlanReportSettingPtrOutput() ReportPlanReportSettingPtrOutput {
	return o.ToReportPlanReportSettingPtrOutputWithContext(context.Background())
}

func (o ReportPlanReportSettingOutput) ToReportPlanReportSettingPtrOutputWithContext(ctx context.Context) ReportPlanReportSettingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReportPlanReportSetting) *ReportPlanReportSetting {
		return &v
	}).(ReportPlanReportSettingPtrOutput)
}

// Specifies the Amazon Resource Names (ARNs) of the frameworks a report covers.
func (o ReportPlanReportSettingOutput) FrameworkArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReportPlanReportSetting) []string { return v.FrameworkArns }).(pulumi.StringArrayOutput)
}

// Specifies the number of frameworks a report covers.
func (o ReportPlanReportSettingOutput) NumberOfFrameworks() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReportPlanReportSetting) *int { return v.NumberOfFrameworks }).(pulumi.IntPtrOutput)
}

// Identifies the report template for the report. Reports are built using a report template. The report templates are: `RESOURCE_COMPLIANCE_REPORT` | `CONTROL_COMPLIANCE_REPORT` | `BACKUP_JOB_REPORT` | `COPY_JOB_REPORT` | `RESTORE_JOB_REPORT`.
func (o ReportPlanReportSettingOutput) ReportTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v ReportPlanReportSetting) string { return v.ReportTemplate }).(pulumi.StringOutput)
}

type ReportPlanReportSettingPtrOutput struct{ *pulumi.OutputState }

func (ReportPlanReportSettingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportPlanReportSetting)(nil)).Elem()
}

func (o ReportPlanReportSettingPtrOutput) ToReportPlanReportSettingPtrOutput() ReportPlanReportSettingPtrOutput {
	return o
}

func (o ReportPlanReportSettingPtrOutput) ToReportPlanReportSettingPtrOutputWithContext(ctx context.Context) ReportPlanReportSettingPtrOutput {
	return o
}

func (o ReportPlanReportSettingPtrOutput) Elem() ReportPlanReportSettingOutput {
	return o.ApplyT(func(v *ReportPlanReportSetting) ReportPlanReportSetting {
		if v != nil {
			return *v
		}
		var ret ReportPlanReportSetting
		return ret
	}).(ReportPlanReportSettingOutput)
}

// Specifies the Amazon Resource Names (ARNs) of the frameworks a report covers.
func (o ReportPlanReportSettingPtrOutput) FrameworkArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReportPlanReportSetting) []string {
		if v == nil {
			return nil
		}
		return v.FrameworkArns
	}).(pulumi.StringArrayOutput)
}

// Specifies the number of frameworks a report covers.
func (o ReportPlanReportSettingPtrOutput) NumberOfFrameworks() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReportPlanReportSetting) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfFrameworks
	}).(pulumi.IntPtrOutput)
}

// Identifies the report template for the report. Reports are built using a report template. The report templates are: `RESOURCE_COMPLIANCE_REPORT` | `CONTROL_COMPLIANCE_REPORT` | `BACKUP_JOB_REPORT` | `COPY_JOB_REPORT` | `RESTORE_JOB_REPORT`.
func (o ReportPlanReportSettingPtrOutput) ReportTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportPlanReportSetting) *string {
		if v == nil {
			return nil
		}
		return &v.ReportTemplate
	}).(pulumi.StringPtrOutput)
}

type SelectionCondition struct {
	StringEquals    []SelectionConditionStringEqual    `pulumi:"stringEquals"`
	StringLikes     []SelectionConditionStringLike     `pulumi:"stringLikes"`
	StringNotEquals []SelectionConditionStringNotEqual `pulumi:"stringNotEquals"`
	StringNotLikes  []SelectionConditionStringNotLike  `pulumi:"stringNotLikes"`
}

// SelectionConditionInput is an input type that accepts SelectionConditionArgs and SelectionConditionOutput values.
// You can construct a concrete instance of `SelectionConditionInput` via:
//
//          SelectionConditionArgs{...}
type SelectionConditionInput interface {
	pulumi.Input

	ToSelectionConditionOutput() SelectionConditionOutput
	ToSelectionConditionOutputWithContext(context.Context) SelectionConditionOutput
}

type SelectionConditionArgs struct {
	StringEquals    SelectionConditionStringEqualArrayInput    `pulumi:"stringEquals"`
	StringLikes     SelectionConditionStringLikeArrayInput     `pulumi:"stringLikes"`
	StringNotEquals SelectionConditionStringNotEqualArrayInput `pulumi:"stringNotEquals"`
	StringNotLikes  SelectionConditionStringNotLikeArrayInput  `pulumi:"stringNotLikes"`
}

func (SelectionConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectionCondition)(nil)).Elem()
}

func (i SelectionConditionArgs) ToSelectionConditionOutput() SelectionConditionOutput {
	return i.ToSelectionConditionOutputWithContext(context.Background())
}

func (i SelectionConditionArgs) ToSelectionConditionOutputWithContext(ctx context.Context) SelectionConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelectionConditionOutput)
}

// SelectionConditionArrayInput is an input type that accepts SelectionConditionArray and SelectionConditionArrayOutput values.
// You can construct a concrete instance of `SelectionConditionArrayInput` via:
//
//          SelectionConditionArray{ SelectionConditionArgs{...} }
type SelectionConditionArrayInput interface {
	pulumi.Input

	ToSelectionConditionArrayOutput() SelectionConditionArrayOutput
	ToSelectionConditionArrayOutputWithContext(context.Context) SelectionConditionArrayOutput
}

type SelectionConditionArray []SelectionConditionInput

func (SelectionConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SelectionCondition)(nil)).Elem()
}

func (i SelectionConditionArray) ToSelectionConditionArrayOutput() SelectionConditionArrayOutput {
	return i.ToSelectionConditionArrayOutputWithContext(context.Background())
}

func (i SelectionConditionArray) ToSelectionConditionArrayOutputWithContext(ctx context.Context) SelectionConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelectionConditionArrayOutput)
}

type SelectionConditionOutput struct{ *pulumi.OutputState }

func (SelectionConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectionCondition)(nil)).Elem()
}

func (o SelectionConditionOutput) ToSelectionConditionOutput() SelectionConditionOutput {
	return o
}

func (o SelectionConditionOutput) ToSelectionConditionOutputWithContext(ctx context.Context) SelectionConditionOutput {
	return o
}

func (o SelectionConditionOutput) StringEquals() SelectionConditionStringEqualArrayOutput {
	return o.ApplyT(func(v SelectionCondition) []SelectionConditionStringEqual { return v.StringEquals }).(SelectionConditionStringEqualArrayOutput)
}

func (o SelectionConditionOutput) StringLikes() SelectionConditionStringLikeArrayOutput {
	return o.ApplyT(func(v SelectionCondition) []SelectionConditionStringLike { return v.StringLikes }).(SelectionConditionStringLikeArrayOutput)
}

func (o SelectionConditionOutput) StringNotEquals() SelectionConditionStringNotEqualArrayOutput {
	return o.ApplyT(func(v SelectionCondition) []SelectionConditionStringNotEqual { return v.StringNotEquals }).(SelectionConditionStringNotEqualArrayOutput)
}

func (o SelectionConditionOutput) StringNotLikes() SelectionConditionStringNotLikeArrayOutput {
	return o.ApplyT(func(v SelectionCondition) []SelectionConditionStringNotLike { return v.StringNotLikes }).(SelectionConditionStringNotLikeArrayOutput)
}

type SelectionConditionArrayOutput struct{ *pulumi.OutputState }

func (SelectionConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SelectionCondition)(nil)).Elem()
}

func (o SelectionConditionArrayOutput) ToSelectionConditionArrayOutput() SelectionConditionArrayOutput {
	return o
}

func (o SelectionConditionArrayOutput) ToSelectionConditionArrayOutputWithContext(ctx context.Context) SelectionConditionArrayOutput {
	return o
}

func (o SelectionConditionArrayOutput) Index(i pulumi.IntInput) SelectionConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SelectionCondition {
		return vs[0].([]SelectionCondition)[vs[1].(int)]
	}).(SelectionConditionOutput)
}

type SelectionConditionStringEqual struct {
	// The key in a key-value pair.
	Key string `pulumi:"key"`
	// The value in a key-value pair.
	Value string `pulumi:"value"`
}

// SelectionConditionStringEqualInput is an input type that accepts SelectionConditionStringEqualArgs and SelectionConditionStringEqualOutput values.
// You can construct a concrete instance of `SelectionConditionStringEqualInput` via:
//
//          SelectionConditionStringEqualArgs{...}
type SelectionConditionStringEqualInput interface {
	pulumi.Input

	ToSelectionConditionStringEqualOutput() SelectionConditionStringEqualOutput
	ToSelectionConditionStringEqualOutputWithContext(context.Context) SelectionConditionStringEqualOutput
}

type SelectionConditionStringEqualArgs struct {
	// The key in a key-value pair.
	Key pulumi.StringInput `pulumi:"key"`
	// The value in a key-value pair.
	Value pulumi.StringInput `pulumi:"value"`
}

func (SelectionConditionStringEqualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectionConditionStringEqual)(nil)).Elem()
}

func (i SelectionConditionStringEqualArgs) ToSelectionConditionStringEqualOutput() SelectionConditionStringEqualOutput {
	return i.ToSelectionConditionStringEqualOutputWithContext(context.Background())
}

func (i SelectionConditionStringEqualArgs) ToSelectionConditionStringEqualOutputWithContext(ctx context.Context) SelectionConditionStringEqualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelectionConditionStringEqualOutput)
}

// SelectionConditionStringEqualArrayInput is an input type that accepts SelectionConditionStringEqualArray and SelectionConditionStringEqualArrayOutput values.
// You can construct a concrete instance of `SelectionConditionStringEqualArrayInput` via:
//
//          SelectionConditionStringEqualArray{ SelectionConditionStringEqualArgs{...} }
type SelectionConditionStringEqualArrayInput interface {
	pulumi.Input

	ToSelectionConditionStringEqualArrayOutput() SelectionConditionStringEqualArrayOutput
	ToSelectionConditionStringEqualArrayOutputWithContext(context.Context) SelectionConditionStringEqualArrayOutput
}

type SelectionConditionStringEqualArray []SelectionConditionStringEqualInput

func (SelectionConditionStringEqualArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SelectionConditionStringEqual)(nil)).Elem()
}

func (i SelectionConditionStringEqualArray) ToSelectionConditionStringEqualArrayOutput() SelectionConditionStringEqualArrayOutput {
	return i.ToSelectionConditionStringEqualArrayOutputWithContext(context.Background())
}

func (i SelectionConditionStringEqualArray) ToSelectionConditionStringEqualArrayOutputWithContext(ctx context.Context) SelectionConditionStringEqualArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelectionConditionStringEqualArrayOutput)
}

type SelectionConditionStringEqualOutput struct{ *pulumi.OutputState }

func (SelectionConditionStringEqualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectionConditionStringEqual)(nil)).Elem()
}

func (o SelectionConditionStringEqualOutput) ToSelectionConditionStringEqualOutput() SelectionConditionStringEqualOutput {
	return o
}

func (o SelectionConditionStringEqualOutput) ToSelectionConditionStringEqualOutputWithContext(ctx context.Context) SelectionConditionStringEqualOutput {
	return o
}

// The key in a key-value pair.
func (o SelectionConditionStringEqualOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SelectionConditionStringEqual) string { return v.Key }).(pulumi.StringOutput)
}

// The value in a key-value pair.
func (o SelectionConditionStringEqualOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SelectionConditionStringEqual) string { return v.Value }).(pulumi.StringOutput)
}

type SelectionConditionStringEqualArrayOutput struct{ *pulumi.OutputState }

func (SelectionConditionStringEqualArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SelectionConditionStringEqual)(nil)).Elem()
}

func (o SelectionConditionStringEqualArrayOutput) ToSelectionConditionStringEqualArrayOutput() SelectionConditionStringEqualArrayOutput {
	return o
}

func (o SelectionConditionStringEqualArrayOutput) ToSelectionConditionStringEqualArrayOutputWithContext(ctx context.Context) SelectionConditionStringEqualArrayOutput {
	return o
}

func (o SelectionConditionStringEqualArrayOutput) Index(i pulumi.IntInput) SelectionConditionStringEqualOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SelectionConditionStringEqual {
		return vs[0].([]SelectionConditionStringEqual)[vs[1].(int)]
	}).(SelectionConditionStringEqualOutput)
}

type SelectionConditionStringLike struct {
	// The key in a key-value pair.
	Key string `pulumi:"key"`
	// The value in a key-value pair.
	Value string `pulumi:"value"`
}

// SelectionConditionStringLikeInput is an input type that accepts SelectionConditionStringLikeArgs and SelectionConditionStringLikeOutput values.
// You can construct a concrete instance of `SelectionConditionStringLikeInput` via:
//
//          SelectionConditionStringLikeArgs{...}
type SelectionConditionStringLikeInput interface {
	pulumi.Input

	ToSelectionConditionStringLikeOutput() SelectionConditionStringLikeOutput
	ToSelectionConditionStringLikeOutputWithContext(context.Context) SelectionConditionStringLikeOutput
}

type SelectionConditionStringLikeArgs struct {
	// The key in a key-value pair.
	Key pulumi.StringInput `pulumi:"key"`
	// The value in a key-value pair.
	Value pulumi.StringInput `pulumi:"value"`
}

func (SelectionConditionStringLikeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectionConditionStringLike)(nil)).Elem()
}

func (i SelectionConditionStringLikeArgs) ToSelectionConditionStringLikeOutput() SelectionConditionStringLikeOutput {
	return i.ToSelectionConditionStringLikeOutputWithContext(context.Background())
}

func (i SelectionConditionStringLikeArgs) ToSelectionConditionStringLikeOutputWithContext(ctx context.Context) SelectionConditionStringLikeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelectionConditionStringLikeOutput)
}

// SelectionConditionStringLikeArrayInput is an input type that accepts SelectionConditionStringLikeArray and SelectionConditionStringLikeArrayOutput values.
// You can construct a concrete instance of `SelectionConditionStringLikeArrayInput` via:
//
//          SelectionConditionStringLikeArray{ SelectionConditionStringLikeArgs{...} }
type SelectionConditionStringLikeArrayInput interface {
	pulumi.Input

	ToSelectionConditionStringLikeArrayOutput() SelectionConditionStringLikeArrayOutput
	ToSelectionConditionStringLikeArrayOutputWithContext(context.Context) SelectionConditionStringLikeArrayOutput
}

type SelectionConditionStringLikeArray []SelectionConditionStringLikeInput

func (SelectionConditionStringLikeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SelectionConditionStringLike)(nil)).Elem()
}

func (i SelectionConditionStringLikeArray) ToSelectionConditionStringLikeArrayOutput() SelectionConditionStringLikeArrayOutput {
	return i.ToSelectionConditionStringLikeArrayOutputWithContext(context.Background())
}

func (i SelectionConditionStringLikeArray) ToSelectionConditionStringLikeArrayOutputWithContext(ctx context.Context) SelectionConditionStringLikeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelectionConditionStringLikeArrayOutput)
}

type SelectionConditionStringLikeOutput struct{ *pulumi.OutputState }

func (SelectionConditionStringLikeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectionConditionStringLike)(nil)).Elem()
}

func (o SelectionConditionStringLikeOutput) ToSelectionConditionStringLikeOutput() SelectionConditionStringLikeOutput {
	return o
}

func (o SelectionConditionStringLikeOutput) ToSelectionConditionStringLikeOutputWithContext(ctx context.Context) SelectionConditionStringLikeOutput {
	return o
}

// The key in a key-value pair.
func (o SelectionConditionStringLikeOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SelectionConditionStringLike) string { return v.Key }).(pulumi.StringOutput)
}

// The value in a key-value pair.
func (o SelectionConditionStringLikeOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SelectionConditionStringLike) string { return v.Value }).(pulumi.StringOutput)
}

type SelectionConditionStringLikeArrayOutput struct{ *pulumi.OutputState }

func (SelectionConditionStringLikeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SelectionConditionStringLike)(nil)).Elem()
}

func (o SelectionConditionStringLikeArrayOutput) ToSelectionConditionStringLikeArrayOutput() SelectionConditionStringLikeArrayOutput {
	return o
}

func (o SelectionConditionStringLikeArrayOutput) ToSelectionConditionStringLikeArrayOutputWithContext(ctx context.Context) SelectionConditionStringLikeArrayOutput {
	return o
}

func (o SelectionConditionStringLikeArrayOutput) Index(i pulumi.IntInput) SelectionConditionStringLikeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SelectionConditionStringLike {
		return vs[0].([]SelectionConditionStringLike)[vs[1].(int)]
	}).(SelectionConditionStringLikeOutput)
}

type SelectionConditionStringNotEqual struct {
	// The key in a key-value pair.
	Key string `pulumi:"key"`
	// The value in a key-value pair.
	Value string `pulumi:"value"`
}

// SelectionConditionStringNotEqualInput is an input type that accepts SelectionConditionStringNotEqualArgs and SelectionConditionStringNotEqualOutput values.
// You can construct a concrete instance of `SelectionConditionStringNotEqualInput` via:
//
//          SelectionConditionStringNotEqualArgs{...}
type SelectionConditionStringNotEqualInput interface {
	pulumi.Input

	ToSelectionConditionStringNotEqualOutput() SelectionConditionStringNotEqualOutput
	ToSelectionConditionStringNotEqualOutputWithContext(context.Context) SelectionConditionStringNotEqualOutput
}

type SelectionConditionStringNotEqualArgs struct {
	// The key in a key-value pair.
	Key pulumi.StringInput `pulumi:"key"`
	// The value in a key-value pair.
	Value pulumi.StringInput `pulumi:"value"`
}

func (SelectionConditionStringNotEqualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectionConditionStringNotEqual)(nil)).Elem()
}

func (i SelectionConditionStringNotEqualArgs) ToSelectionConditionStringNotEqualOutput() SelectionConditionStringNotEqualOutput {
	return i.ToSelectionConditionStringNotEqualOutputWithContext(context.Background())
}

func (i SelectionConditionStringNotEqualArgs) ToSelectionConditionStringNotEqualOutputWithContext(ctx context.Context) SelectionConditionStringNotEqualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelectionConditionStringNotEqualOutput)
}

// SelectionConditionStringNotEqualArrayInput is an input type that accepts SelectionConditionStringNotEqualArray and SelectionConditionStringNotEqualArrayOutput values.
// You can construct a concrete instance of `SelectionConditionStringNotEqualArrayInput` via:
//
//          SelectionConditionStringNotEqualArray{ SelectionConditionStringNotEqualArgs{...} }
type SelectionConditionStringNotEqualArrayInput interface {
	pulumi.Input

	ToSelectionConditionStringNotEqualArrayOutput() SelectionConditionStringNotEqualArrayOutput
	ToSelectionConditionStringNotEqualArrayOutputWithContext(context.Context) SelectionConditionStringNotEqualArrayOutput
}

type SelectionConditionStringNotEqualArray []SelectionConditionStringNotEqualInput

func (SelectionConditionStringNotEqualArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SelectionConditionStringNotEqual)(nil)).Elem()
}

func (i SelectionConditionStringNotEqualArray) ToSelectionConditionStringNotEqualArrayOutput() SelectionConditionStringNotEqualArrayOutput {
	return i.ToSelectionConditionStringNotEqualArrayOutputWithContext(context.Background())
}

func (i SelectionConditionStringNotEqualArray) ToSelectionConditionStringNotEqualArrayOutputWithContext(ctx context.Context) SelectionConditionStringNotEqualArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelectionConditionStringNotEqualArrayOutput)
}

type SelectionConditionStringNotEqualOutput struct{ *pulumi.OutputState }

func (SelectionConditionStringNotEqualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectionConditionStringNotEqual)(nil)).Elem()
}

func (o SelectionConditionStringNotEqualOutput) ToSelectionConditionStringNotEqualOutput() SelectionConditionStringNotEqualOutput {
	return o
}

func (o SelectionConditionStringNotEqualOutput) ToSelectionConditionStringNotEqualOutputWithContext(ctx context.Context) SelectionConditionStringNotEqualOutput {
	return o
}

// The key in a key-value pair.
func (o SelectionConditionStringNotEqualOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SelectionConditionStringNotEqual) string { return v.Key }).(pulumi.StringOutput)
}

// The value in a key-value pair.
func (o SelectionConditionStringNotEqualOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SelectionConditionStringNotEqual) string { return v.Value }).(pulumi.StringOutput)
}

type SelectionConditionStringNotEqualArrayOutput struct{ *pulumi.OutputState }

func (SelectionConditionStringNotEqualArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SelectionConditionStringNotEqual)(nil)).Elem()
}

func (o SelectionConditionStringNotEqualArrayOutput) ToSelectionConditionStringNotEqualArrayOutput() SelectionConditionStringNotEqualArrayOutput {
	return o
}

func (o SelectionConditionStringNotEqualArrayOutput) ToSelectionConditionStringNotEqualArrayOutputWithContext(ctx context.Context) SelectionConditionStringNotEqualArrayOutput {
	return o
}

func (o SelectionConditionStringNotEqualArrayOutput) Index(i pulumi.IntInput) SelectionConditionStringNotEqualOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SelectionConditionStringNotEqual {
		return vs[0].([]SelectionConditionStringNotEqual)[vs[1].(int)]
	}).(SelectionConditionStringNotEqualOutput)
}

type SelectionConditionStringNotLike struct {
	// The key in a key-value pair.
	Key string `pulumi:"key"`
	// The value in a key-value pair.
	Value string `pulumi:"value"`
}

// SelectionConditionStringNotLikeInput is an input type that accepts SelectionConditionStringNotLikeArgs and SelectionConditionStringNotLikeOutput values.
// You can construct a concrete instance of `SelectionConditionStringNotLikeInput` via:
//
//          SelectionConditionStringNotLikeArgs{...}
type SelectionConditionStringNotLikeInput interface {
	pulumi.Input

	ToSelectionConditionStringNotLikeOutput() SelectionConditionStringNotLikeOutput
	ToSelectionConditionStringNotLikeOutputWithContext(context.Context) SelectionConditionStringNotLikeOutput
}

type SelectionConditionStringNotLikeArgs struct {
	// The key in a key-value pair.
	Key pulumi.StringInput `pulumi:"key"`
	// The value in a key-value pair.
	Value pulumi.StringInput `pulumi:"value"`
}

func (SelectionConditionStringNotLikeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectionConditionStringNotLike)(nil)).Elem()
}

func (i SelectionConditionStringNotLikeArgs) ToSelectionConditionStringNotLikeOutput() SelectionConditionStringNotLikeOutput {
	return i.ToSelectionConditionStringNotLikeOutputWithContext(context.Background())
}

func (i SelectionConditionStringNotLikeArgs) ToSelectionConditionStringNotLikeOutputWithContext(ctx context.Context) SelectionConditionStringNotLikeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelectionConditionStringNotLikeOutput)
}

// SelectionConditionStringNotLikeArrayInput is an input type that accepts SelectionConditionStringNotLikeArray and SelectionConditionStringNotLikeArrayOutput values.
// You can construct a concrete instance of `SelectionConditionStringNotLikeArrayInput` via:
//
//          SelectionConditionStringNotLikeArray{ SelectionConditionStringNotLikeArgs{...} }
type SelectionConditionStringNotLikeArrayInput interface {
	pulumi.Input

	ToSelectionConditionStringNotLikeArrayOutput() SelectionConditionStringNotLikeArrayOutput
	ToSelectionConditionStringNotLikeArrayOutputWithContext(context.Context) SelectionConditionStringNotLikeArrayOutput
}

type SelectionConditionStringNotLikeArray []SelectionConditionStringNotLikeInput

func (SelectionConditionStringNotLikeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SelectionConditionStringNotLike)(nil)).Elem()
}

func (i SelectionConditionStringNotLikeArray) ToSelectionConditionStringNotLikeArrayOutput() SelectionConditionStringNotLikeArrayOutput {
	return i.ToSelectionConditionStringNotLikeArrayOutputWithContext(context.Background())
}

func (i SelectionConditionStringNotLikeArray) ToSelectionConditionStringNotLikeArrayOutputWithContext(ctx context.Context) SelectionConditionStringNotLikeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelectionConditionStringNotLikeArrayOutput)
}

type SelectionConditionStringNotLikeOutput struct{ *pulumi.OutputState }

func (SelectionConditionStringNotLikeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectionConditionStringNotLike)(nil)).Elem()
}

func (o SelectionConditionStringNotLikeOutput) ToSelectionConditionStringNotLikeOutput() SelectionConditionStringNotLikeOutput {
	return o
}

func (o SelectionConditionStringNotLikeOutput) ToSelectionConditionStringNotLikeOutputWithContext(ctx context.Context) SelectionConditionStringNotLikeOutput {
	return o
}

// The key in a key-value pair.
func (o SelectionConditionStringNotLikeOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SelectionConditionStringNotLike) string { return v.Key }).(pulumi.StringOutput)
}

// The value in a key-value pair.
func (o SelectionConditionStringNotLikeOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SelectionConditionStringNotLike) string { return v.Value }).(pulumi.StringOutput)
}

type SelectionConditionStringNotLikeArrayOutput struct{ *pulumi.OutputState }

func (SelectionConditionStringNotLikeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SelectionConditionStringNotLike)(nil)).Elem()
}

func (o SelectionConditionStringNotLikeArrayOutput) ToSelectionConditionStringNotLikeArrayOutput() SelectionConditionStringNotLikeArrayOutput {
	return o
}

func (o SelectionConditionStringNotLikeArrayOutput) ToSelectionConditionStringNotLikeArrayOutputWithContext(ctx context.Context) SelectionConditionStringNotLikeArrayOutput {
	return o
}

func (o SelectionConditionStringNotLikeArrayOutput) Index(i pulumi.IntInput) SelectionConditionStringNotLikeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SelectionConditionStringNotLike {
		return vs[0].([]SelectionConditionStringNotLike)[vs[1].(int)]
	}).(SelectionConditionStringNotLikeOutput)
}

type SelectionSelectionTag struct {
	// The key in a key-value pair.
	Key string `pulumi:"key"`
	// An operation, such as `StringEquals`, that is applied to a key-value pair used to filter resources in a selection.
	Type string `pulumi:"type"`
	// The value in a key-value pair.
	Value string `pulumi:"value"`
}

// SelectionSelectionTagInput is an input type that accepts SelectionSelectionTagArgs and SelectionSelectionTagOutput values.
// You can construct a concrete instance of `SelectionSelectionTagInput` via:
//
//          SelectionSelectionTagArgs{...}
type SelectionSelectionTagInput interface {
	pulumi.Input

	ToSelectionSelectionTagOutput() SelectionSelectionTagOutput
	ToSelectionSelectionTagOutputWithContext(context.Context) SelectionSelectionTagOutput
}

type SelectionSelectionTagArgs struct {
	// The key in a key-value pair.
	Key pulumi.StringInput `pulumi:"key"`
	// An operation, such as `StringEquals`, that is applied to a key-value pair used to filter resources in a selection.
	Type pulumi.StringInput `pulumi:"type"`
	// The value in a key-value pair.
	Value pulumi.StringInput `pulumi:"value"`
}

func (SelectionSelectionTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectionSelectionTag)(nil)).Elem()
}

func (i SelectionSelectionTagArgs) ToSelectionSelectionTagOutput() SelectionSelectionTagOutput {
	return i.ToSelectionSelectionTagOutputWithContext(context.Background())
}

func (i SelectionSelectionTagArgs) ToSelectionSelectionTagOutputWithContext(ctx context.Context) SelectionSelectionTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelectionSelectionTagOutput)
}

// SelectionSelectionTagArrayInput is an input type that accepts SelectionSelectionTagArray and SelectionSelectionTagArrayOutput values.
// You can construct a concrete instance of `SelectionSelectionTagArrayInput` via:
//
//          SelectionSelectionTagArray{ SelectionSelectionTagArgs{...} }
type SelectionSelectionTagArrayInput interface {
	pulumi.Input

	ToSelectionSelectionTagArrayOutput() SelectionSelectionTagArrayOutput
	ToSelectionSelectionTagArrayOutputWithContext(context.Context) SelectionSelectionTagArrayOutput
}

type SelectionSelectionTagArray []SelectionSelectionTagInput

func (SelectionSelectionTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SelectionSelectionTag)(nil)).Elem()
}

func (i SelectionSelectionTagArray) ToSelectionSelectionTagArrayOutput() SelectionSelectionTagArrayOutput {
	return i.ToSelectionSelectionTagArrayOutputWithContext(context.Background())
}

func (i SelectionSelectionTagArray) ToSelectionSelectionTagArrayOutputWithContext(ctx context.Context) SelectionSelectionTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelectionSelectionTagArrayOutput)
}

type SelectionSelectionTagOutput struct{ *pulumi.OutputState }

func (SelectionSelectionTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectionSelectionTag)(nil)).Elem()
}

func (o SelectionSelectionTagOutput) ToSelectionSelectionTagOutput() SelectionSelectionTagOutput {
	return o
}

func (o SelectionSelectionTagOutput) ToSelectionSelectionTagOutputWithContext(ctx context.Context) SelectionSelectionTagOutput {
	return o
}

// The key in a key-value pair.
func (o SelectionSelectionTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SelectionSelectionTag) string { return v.Key }).(pulumi.StringOutput)
}

// An operation, such as `StringEquals`, that is applied to a key-value pair used to filter resources in a selection.
func (o SelectionSelectionTagOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SelectionSelectionTag) string { return v.Type }).(pulumi.StringOutput)
}

// The value in a key-value pair.
func (o SelectionSelectionTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SelectionSelectionTag) string { return v.Value }).(pulumi.StringOutput)
}

type SelectionSelectionTagArrayOutput struct{ *pulumi.OutputState }

func (SelectionSelectionTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SelectionSelectionTag)(nil)).Elem()
}

func (o SelectionSelectionTagArrayOutput) ToSelectionSelectionTagArrayOutput() SelectionSelectionTagArrayOutput {
	return o
}

func (o SelectionSelectionTagArrayOutput) ToSelectionSelectionTagArrayOutputWithContext(ctx context.Context) SelectionSelectionTagArrayOutput {
	return o
}

func (o SelectionSelectionTagArrayOutput) Index(i pulumi.IntInput) SelectionSelectionTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SelectionSelectionTag {
		return vs[0].([]SelectionSelectionTag)[vs[1].(int)]
	}).(SelectionSelectionTagOutput)
}

type GetFrameworkControl struct {
	// One or more input parameter blocks. An example of a control with two parameters is: "backup plan frequency is at least daily and the retention period is at least 1 year". The first parameter is daily. The second parameter is 1 year. Detailed below.
	InputParameters []GetFrameworkControlInputParameter `pulumi:"inputParameters"`
	// The backup framework name.
	Name string `pulumi:"name"`
	// The scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans. Detailed below.
	Scopes []GetFrameworkControlScope `pulumi:"scopes"`
}

// GetFrameworkControlInput is an input type that accepts GetFrameworkControlArgs and GetFrameworkControlOutput values.
// You can construct a concrete instance of `GetFrameworkControlInput` via:
//
//          GetFrameworkControlArgs{...}
type GetFrameworkControlInput interface {
	pulumi.Input

	ToGetFrameworkControlOutput() GetFrameworkControlOutput
	ToGetFrameworkControlOutputWithContext(context.Context) GetFrameworkControlOutput
}

type GetFrameworkControlArgs struct {
	// One or more input parameter blocks. An example of a control with two parameters is: "backup plan frequency is at least daily and the retention period is at least 1 year". The first parameter is daily. The second parameter is 1 year. Detailed below.
	InputParameters GetFrameworkControlInputParameterArrayInput `pulumi:"inputParameters"`
	// The backup framework name.
	Name pulumi.StringInput `pulumi:"name"`
	// The scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans. Detailed below.
	Scopes GetFrameworkControlScopeArrayInput `pulumi:"scopes"`
}

func (GetFrameworkControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrameworkControl)(nil)).Elem()
}

func (i GetFrameworkControlArgs) ToGetFrameworkControlOutput() GetFrameworkControlOutput {
	return i.ToGetFrameworkControlOutputWithContext(context.Background())
}

func (i GetFrameworkControlArgs) ToGetFrameworkControlOutputWithContext(ctx context.Context) GetFrameworkControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFrameworkControlOutput)
}

// GetFrameworkControlArrayInput is an input type that accepts GetFrameworkControlArray and GetFrameworkControlArrayOutput values.
// You can construct a concrete instance of `GetFrameworkControlArrayInput` via:
//
//          GetFrameworkControlArray{ GetFrameworkControlArgs{...} }
type GetFrameworkControlArrayInput interface {
	pulumi.Input

	ToGetFrameworkControlArrayOutput() GetFrameworkControlArrayOutput
	ToGetFrameworkControlArrayOutputWithContext(context.Context) GetFrameworkControlArrayOutput
}

type GetFrameworkControlArray []GetFrameworkControlInput

func (GetFrameworkControlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFrameworkControl)(nil)).Elem()
}

func (i GetFrameworkControlArray) ToGetFrameworkControlArrayOutput() GetFrameworkControlArrayOutput {
	return i.ToGetFrameworkControlArrayOutputWithContext(context.Background())
}

func (i GetFrameworkControlArray) ToGetFrameworkControlArrayOutputWithContext(ctx context.Context) GetFrameworkControlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFrameworkControlArrayOutput)
}

type GetFrameworkControlOutput struct{ *pulumi.OutputState }

func (GetFrameworkControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrameworkControl)(nil)).Elem()
}

func (o GetFrameworkControlOutput) ToGetFrameworkControlOutput() GetFrameworkControlOutput {
	return o
}

func (o GetFrameworkControlOutput) ToGetFrameworkControlOutputWithContext(ctx context.Context) GetFrameworkControlOutput {
	return o
}

// One or more input parameter blocks. An example of a control with two parameters is: "backup plan frequency is at least daily and the retention period is at least 1 year". The first parameter is daily. The second parameter is 1 year. Detailed below.
func (o GetFrameworkControlOutput) InputParameters() GetFrameworkControlInputParameterArrayOutput {
	return o.ApplyT(func(v GetFrameworkControl) []GetFrameworkControlInputParameter { return v.InputParameters }).(GetFrameworkControlInputParameterArrayOutput)
}

// The backup framework name.
func (o GetFrameworkControlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrameworkControl) string { return v.Name }).(pulumi.StringOutput)
}

// The scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans. Detailed below.
func (o GetFrameworkControlOutput) Scopes() GetFrameworkControlScopeArrayOutput {
	return o.ApplyT(func(v GetFrameworkControl) []GetFrameworkControlScope { return v.Scopes }).(GetFrameworkControlScopeArrayOutput)
}

type GetFrameworkControlArrayOutput struct{ *pulumi.OutputState }

func (GetFrameworkControlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFrameworkControl)(nil)).Elem()
}

func (o GetFrameworkControlArrayOutput) ToGetFrameworkControlArrayOutput() GetFrameworkControlArrayOutput {
	return o
}

func (o GetFrameworkControlArrayOutput) ToGetFrameworkControlArrayOutputWithContext(ctx context.Context) GetFrameworkControlArrayOutput {
	return o
}

func (o GetFrameworkControlArrayOutput) Index(i pulumi.IntInput) GetFrameworkControlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFrameworkControl {
		return vs[0].([]GetFrameworkControl)[vs[1].(int)]
	}).(GetFrameworkControlOutput)
}

type GetFrameworkControlInputParameter struct {
	// The backup framework name.
	Name string `pulumi:"name"`
	// The value of parameter, for example, hourly.
	Value string `pulumi:"value"`
}

// GetFrameworkControlInputParameterInput is an input type that accepts GetFrameworkControlInputParameterArgs and GetFrameworkControlInputParameterOutput values.
// You can construct a concrete instance of `GetFrameworkControlInputParameterInput` via:
//
//          GetFrameworkControlInputParameterArgs{...}
type GetFrameworkControlInputParameterInput interface {
	pulumi.Input

	ToGetFrameworkControlInputParameterOutput() GetFrameworkControlInputParameterOutput
	ToGetFrameworkControlInputParameterOutputWithContext(context.Context) GetFrameworkControlInputParameterOutput
}

type GetFrameworkControlInputParameterArgs struct {
	// The backup framework name.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of parameter, for example, hourly.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetFrameworkControlInputParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrameworkControlInputParameter)(nil)).Elem()
}

func (i GetFrameworkControlInputParameterArgs) ToGetFrameworkControlInputParameterOutput() GetFrameworkControlInputParameterOutput {
	return i.ToGetFrameworkControlInputParameterOutputWithContext(context.Background())
}

func (i GetFrameworkControlInputParameterArgs) ToGetFrameworkControlInputParameterOutputWithContext(ctx context.Context) GetFrameworkControlInputParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFrameworkControlInputParameterOutput)
}

// GetFrameworkControlInputParameterArrayInput is an input type that accepts GetFrameworkControlInputParameterArray and GetFrameworkControlInputParameterArrayOutput values.
// You can construct a concrete instance of `GetFrameworkControlInputParameterArrayInput` via:
//
//          GetFrameworkControlInputParameterArray{ GetFrameworkControlInputParameterArgs{...} }
type GetFrameworkControlInputParameterArrayInput interface {
	pulumi.Input

	ToGetFrameworkControlInputParameterArrayOutput() GetFrameworkControlInputParameterArrayOutput
	ToGetFrameworkControlInputParameterArrayOutputWithContext(context.Context) GetFrameworkControlInputParameterArrayOutput
}

type GetFrameworkControlInputParameterArray []GetFrameworkControlInputParameterInput

func (GetFrameworkControlInputParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFrameworkControlInputParameter)(nil)).Elem()
}

func (i GetFrameworkControlInputParameterArray) ToGetFrameworkControlInputParameterArrayOutput() GetFrameworkControlInputParameterArrayOutput {
	return i.ToGetFrameworkControlInputParameterArrayOutputWithContext(context.Background())
}

func (i GetFrameworkControlInputParameterArray) ToGetFrameworkControlInputParameterArrayOutputWithContext(ctx context.Context) GetFrameworkControlInputParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFrameworkControlInputParameterArrayOutput)
}

type GetFrameworkControlInputParameterOutput struct{ *pulumi.OutputState }

func (GetFrameworkControlInputParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrameworkControlInputParameter)(nil)).Elem()
}

func (o GetFrameworkControlInputParameterOutput) ToGetFrameworkControlInputParameterOutput() GetFrameworkControlInputParameterOutput {
	return o
}

func (o GetFrameworkControlInputParameterOutput) ToGetFrameworkControlInputParameterOutputWithContext(ctx context.Context) GetFrameworkControlInputParameterOutput {
	return o
}

// The backup framework name.
func (o GetFrameworkControlInputParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrameworkControlInputParameter) string { return v.Name }).(pulumi.StringOutput)
}

// The value of parameter, for example, hourly.
func (o GetFrameworkControlInputParameterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrameworkControlInputParameter) string { return v.Value }).(pulumi.StringOutput)
}

type GetFrameworkControlInputParameterArrayOutput struct{ *pulumi.OutputState }

func (GetFrameworkControlInputParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFrameworkControlInputParameter)(nil)).Elem()
}

func (o GetFrameworkControlInputParameterArrayOutput) ToGetFrameworkControlInputParameterArrayOutput() GetFrameworkControlInputParameterArrayOutput {
	return o
}

func (o GetFrameworkControlInputParameterArrayOutput) ToGetFrameworkControlInputParameterArrayOutputWithContext(ctx context.Context) GetFrameworkControlInputParameterArrayOutput {
	return o
}

func (o GetFrameworkControlInputParameterArrayOutput) Index(i pulumi.IntInput) GetFrameworkControlInputParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFrameworkControlInputParameter {
		return vs[0].([]GetFrameworkControlInputParameter)[vs[1].(int)]
	}).(GetFrameworkControlInputParameterOutput)
}

type GetFrameworkControlScope struct {
	// The ID of the only AWS resource that you want your control scope to contain.
	ComplianceResourceIds []string `pulumi:"complianceResourceIds"`
	// Describes whether the control scope includes one or more types of resources, such as EFS or RDS.
	ComplianceResourceTypes []string `pulumi:"complianceResourceTypes"`
	// The tag key-value pair applied to those AWS resources that you want to trigger an evaluation for a rule. A maximum of one key-value pair can be provided.
	Tags map[string]string `pulumi:"tags"`
}

// GetFrameworkControlScopeInput is an input type that accepts GetFrameworkControlScopeArgs and GetFrameworkControlScopeOutput values.
// You can construct a concrete instance of `GetFrameworkControlScopeInput` via:
//
//          GetFrameworkControlScopeArgs{...}
type GetFrameworkControlScopeInput interface {
	pulumi.Input

	ToGetFrameworkControlScopeOutput() GetFrameworkControlScopeOutput
	ToGetFrameworkControlScopeOutputWithContext(context.Context) GetFrameworkControlScopeOutput
}

type GetFrameworkControlScopeArgs struct {
	// The ID of the only AWS resource that you want your control scope to contain.
	ComplianceResourceIds pulumi.StringArrayInput `pulumi:"complianceResourceIds"`
	// Describes whether the control scope includes one or more types of resources, such as EFS or RDS.
	ComplianceResourceTypes pulumi.StringArrayInput `pulumi:"complianceResourceTypes"`
	// The tag key-value pair applied to those AWS resources that you want to trigger an evaluation for a rule. A maximum of one key-value pair can be provided.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetFrameworkControlScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrameworkControlScope)(nil)).Elem()
}

func (i GetFrameworkControlScopeArgs) ToGetFrameworkControlScopeOutput() GetFrameworkControlScopeOutput {
	return i.ToGetFrameworkControlScopeOutputWithContext(context.Background())
}

func (i GetFrameworkControlScopeArgs) ToGetFrameworkControlScopeOutputWithContext(ctx context.Context) GetFrameworkControlScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFrameworkControlScopeOutput)
}

// GetFrameworkControlScopeArrayInput is an input type that accepts GetFrameworkControlScopeArray and GetFrameworkControlScopeArrayOutput values.
// You can construct a concrete instance of `GetFrameworkControlScopeArrayInput` via:
//
//          GetFrameworkControlScopeArray{ GetFrameworkControlScopeArgs{...} }
type GetFrameworkControlScopeArrayInput interface {
	pulumi.Input

	ToGetFrameworkControlScopeArrayOutput() GetFrameworkControlScopeArrayOutput
	ToGetFrameworkControlScopeArrayOutputWithContext(context.Context) GetFrameworkControlScopeArrayOutput
}

type GetFrameworkControlScopeArray []GetFrameworkControlScopeInput

func (GetFrameworkControlScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFrameworkControlScope)(nil)).Elem()
}

func (i GetFrameworkControlScopeArray) ToGetFrameworkControlScopeArrayOutput() GetFrameworkControlScopeArrayOutput {
	return i.ToGetFrameworkControlScopeArrayOutputWithContext(context.Background())
}

func (i GetFrameworkControlScopeArray) ToGetFrameworkControlScopeArrayOutputWithContext(ctx context.Context) GetFrameworkControlScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFrameworkControlScopeArrayOutput)
}

type GetFrameworkControlScopeOutput struct{ *pulumi.OutputState }

func (GetFrameworkControlScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrameworkControlScope)(nil)).Elem()
}

func (o GetFrameworkControlScopeOutput) ToGetFrameworkControlScopeOutput() GetFrameworkControlScopeOutput {
	return o
}

func (o GetFrameworkControlScopeOutput) ToGetFrameworkControlScopeOutputWithContext(ctx context.Context) GetFrameworkControlScopeOutput {
	return o
}

// The ID of the only AWS resource that you want your control scope to contain.
func (o GetFrameworkControlScopeOutput) ComplianceResourceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetFrameworkControlScope) []string { return v.ComplianceResourceIds }).(pulumi.StringArrayOutput)
}

// Describes whether the control scope includes one or more types of resources, such as EFS or RDS.
func (o GetFrameworkControlScopeOutput) ComplianceResourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetFrameworkControlScope) []string { return v.ComplianceResourceTypes }).(pulumi.StringArrayOutput)
}

// The tag key-value pair applied to those AWS resources that you want to trigger an evaluation for a rule. A maximum of one key-value pair can be provided.
func (o GetFrameworkControlScopeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetFrameworkControlScope) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetFrameworkControlScopeArrayOutput struct{ *pulumi.OutputState }

func (GetFrameworkControlScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFrameworkControlScope)(nil)).Elem()
}

func (o GetFrameworkControlScopeArrayOutput) ToGetFrameworkControlScopeArrayOutput() GetFrameworkControlScopeArrayOutput {
	return o
}

func (o GetFrameworkControlScopeArrayOutput) ToGetFrameworkControlScopeArrayOutputWithContext(ctx context.Context) GetFrameworkControlScopeArrayOutput {
	return o
}

func (o GetFrameworkControlScopeArrayOutput) Index(i pulumi.IntInput) GetFrameworkControlScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFrameworkControlScope {
		return vs[0].([]GetFrameworkControlScope)[vs[1].(int)]
	}).(GetFrameworkControlScopeOutput)
}

type GetReportPlanReportDeliveryChannel struct {
	// A list of the format of your reports: CSV, JSON, or both.
	Formats []string `pulumi:"formats"`
	// The unique name of the S3 bucket that receives your reports.
	S3BucketName string `pulumi:"s3BucketName"`
	// The prefix for where Backup Audit Manager delivers your reports to Amazon S3. The prefix is this part of the following path: s3://your-bucket-name/prefix/Backup/us-west-2/year/month/day/report-name.
	S3KeyPrefix string `pulumi:"s3KeyPrefix"`
}

// GetReportPlanReportDeliveryChannelInput is an input type that accepts GetReportPlanReportDeliveryChannelArgs and GetReportPlanReportDeliveryChannelOutput values.
// You can construct a concrete instance of `GetReportPlanReportDeliveryChannelInput` via:
//
//          GetReportPlanReportDeliveryChannelArgs{...}
type GetReportPlanReportDeliveryChannelInput interface {
	pulumi.Input

	ToGetReportPlanReportDeliveryChannelOutput() GetReportPlanReportDeliveryChannelOutput
	ToGetReportPlanReportDeliveryChannelOutputWithContext(context.Context) GetReportPlanReportDeliveryChannelOutput
}

type GetReportPlanReportDeliveryChannelArgs struct {
	// A list of the format of your reports: CSV, JSON, or both.
	Formats pulumi.StringArrayInput `pulumi:"formats"`
	// The unique name of the S3 bucket that receives your reports.
	S3BucketName pulumi.StringInput `pulumi:"s3BucketName"`
	// The prefix for where Backup Audit Manager delivers your reports to Amazon S3. The prefix is this part of the following path: s3://your-bucket-name/prefix/Backup/us-west-2/year/month/day/report-name.
	S3KeyPrefix pulumi.StringInput `pulumi:"s3KeyPrefix"`
}

func (GetReportPlanReportDeliveryChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReportPlanReportDeliveryChannel)(nil)).Elem()
}

func (i GetReportPlanReportDeliveryChannelArgs) ToGetReportPlanReportDeliveryChannelOutput() GetReportPlanReportDeliveryChannelOutput {
	return i.ToGetReportPlanReportDeliveryChannelOutputWithContext(context.Background())
}

func (i GetReportPlanReportDeliveryChannelArgs) ToGetReportPlanReportDeliveryChannelOutputWithContext(ctx context.Context) GetReportPlanReportDeliveryChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReportPlanReportDeliveryChannelOutput)
}

// GetReportPlanReportDeliveryChannelArrayInput is an input type that accepts GetReportPlanReportDeliveryChannelArray and GetReportPlanReportDeliveryChannelArrayOutput values.
// You can construct a concrete instance of `GetReportPlanReportDeliveryChannelArrayInput` via:
//
//          GetReportPlanReportDeliveryChannelArray{ GetReportPlanReportDeliveryChannelArgs{...} }
type GetReportPlanReportDeliveryChannelArrayInput interface {
	pulumi.Input

	ToGetReportPlanReportDeliveryChannelArrayOutput() GetReportPlanReportDeliveryChannelArrayOutput
	ToGetReportPlanReportDeliveryChannelArrayOutputWithContext(context.Context) GetReportPlanReportDeliveryChannelArrayOutput
}

type GetReportPlanReportDeliveryChannelArray []GetReportPlanReportDeliveryChannelInput

func (GetReportPlanReportDeliveryChannelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReportPlanReportDeliveryChannel)(nil)).Elem()
}

func (i GetReportPlanReportDeliveryChannelArray) ToGetReportPlanReportDeliveryChannelArrayOutput() GetReportPlanReportDeliveryChannelArrayOutput {
	return i.ToGetReportPlanReportDeliveryChannelArrayOutputWithContext(context.Background())
}

func (i GetReportPlanReportDeliveryChannelArray) ToGetReportPlanReportDeliveryChannelArrayOutputWithContext(ctx context.Context) GetReportPlanReportDeliveryChannelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReportPlanReportDeliveryChannelArrayOutput)
}

type GetReportPlanReportDeliveryChannelOutput struct{ *pulumi.OutputState }

func (GetReportPlanReportDeliveryChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReportPlanReportDeliveryChannel)(nil)).Elem()
}

func (o GetReportPlanReportDeliveryChannelOutput) ToGetReportPlanReportDeliveryChannelOutput() GetReportPlanReportDeliveryChannelOutput {
	return o
}

func (o GetReportPlanReportDeliveryChannelOutput) ToGetReportPlanReportDeliveryChannelOutputWithContext(ctx context.Context) GetReportPlanReportDeliveryChannelOutput {
	return o
}

// A list of the format of your reports: CSV, JSON, or both.
func (o GetReportPlanReportDeliveryChannelOutput) Formats() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetReportPlanReportDeliveryChannel) []string { return v.Formats }).(pulumi.StringArrayOutput)
}

// The unique name of the S3 bucket that receives your reports.
func (o GetReportPlanReportDeliveryChannelOutput) S3BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v GetReportPlanReportDeliveryChannel) string { return v.S3BucketName }).(pulumi.StringOutput)
}

// The prefix for where Backup Audit Manager delivers your reports to Amazon S3. The prefix is this part of the following path: s3://your-bucket-name/prefix/Backup/us-west-2/year/month/day/report-name.
func (o GetReportPlanReportDeliveryChannelOutput) S3KeyPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetReportPlanReportDeliveryChannel) string { return v.S3KeyPrefix }).(pulumi.StringOutput)
}

type GetReportPlanReportDeliveryChannelArrayOutput struct{ *pulumi.OutputState }

func (GetReportPlanReportDeliveryChannelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReportPlanReportDeliveryChannel)(nil)).Elem()
}

func (o GetReportPlanReportDeliveryChannelArrayOutput) ToGetReportPlanReportDeliveryChannelArrayOutput() GetReportPlanReportDeliveryChannelArrayOutput {
	return o
}

func (o GetReportPlanReportDeliveryChannelArrayOutput) ToGetReportPlanReportDeliveryChannelArrayOutputWithContext(ctx context.Context) GetReportPlanReportDeliveryChannelArrayOutput {
	return o
}

func (o GetReportPlanReportDeliveryChannelArrayOutput) Index(i pulumi.IntInput) GetReportPlanReportDeliveryChannelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetReportPlanReportDeliveryChannel {
		return vs[0].([]GetReportPlanReportDeliveryChannel)[vs[1].(int)]
	}).(GetReportPlanReportDeliveryChannelOutput)
}

type GetReportPlanReportSetting struct {
	// Specifies the Amazon Resource Names (ARNs) of the frameworks a report covers.
	FrameworkArns []string `pulumi:"frameworkArns"`
	// Specifies the number of frameworks a report covers.
	NumberOfFrameworks int `pulumi:"numberOfFrameworks"`
	// Identifies the report template for the report. Reports are built using a report template.
	ReportTemplate string `pulumi:"reportTemplate"`
}

// GetReportPlanReportSettingInput is an input type that accepts GetReportPlanReportSettingArgs and GetReportPlanReportSettingOutput values.
// You can construct a concrete instance of `GetReportPlanReportSettingInput` via:
//
//          GetReportPlanReportSettingArgs{...}
type GetReportPlanReportSettingInput interface {
	pulumi.Input

	ToGetReportPlanReportSettingOutput() GetReportPlanReportSettingOutput
	ToGetReportPlanReportSettingOutputWithContext(context.Context) GetReportPlanReportSettingOutput
}

type GetReportPlanReportSettingArgs struct {
	// Specifies the Amazon Resource Names (ARNs) of the frameworks a report covers.
	FrameworkArns pulumi.StringArrayInput `pulumi:"frameworkArns"`
	// Specifies the number of frameworks a report covers.
	NumberOfFrameworks pulumi.IntInput `pulumi:"numberOfFrameworks"`
	// Identifies the report template for the report. Reports are built using a report template.
	ReportTemplate pulumi.StringInput `pulumi:"reportTemplate"`
}

func (GetReportPlanReportSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReportPlanReportSetting)(nil)).Elem()
}

func (i GetReportPlanReportSettingArgs) ToGetReportPlanReportSettingOutput() GetReportPlanReportSettingOutput {
	return i.ToGetReportPlanReportSettingOutputWithContext(context.Background())
}

func (i GetReportPlanReportSettingArgs) ToGetReportPlanReportSettingOutputWithContext(ctx context.Context) GetReportPlanReportSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReportPlanReportSettingOutput)
}

// GetReportPlanReportSettingArrayInput is an input type that accepts GetReportPlanReportSettingArray and GetReportPlanReportSettingArrayOutput values.
// You can construct a concrete instance of `GetReportPlanReportSettingArrayInput` via:
//
//          GetReportPlanReportSettingArray{ GetReportPlanReportSettingArgs{...} }
type GetReportPlanReportSettingArrayInput interface {
	pulumi.Input

	ToGetReportPlanReportSettingArrayOutput() GetReportPlanReportSettingArrayOutput
	ToGetReportPlanReportSettingArrayOutputWithContext(context.Context) GetReportPlanReportSettingArrayOutput
}

type GetReportPlanReportSettingArray []GetReportPlanReportSettingInput

func (GetReportPlanReportSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReportPlanReportSetting)(nil)).Elem()
}

func (i GetReportPlanReportSettingArray) ToGetReportPlanReportSettingArrayOutput() GetReportPlanReportSettingArrayOutput {
	return i.ToGetReportPlanReportSettingArrayOutputWithContext(context.Background())
}

func (i GetReportPlanReportSettingArray) ToGetReportPlanReportSettingArrayOutputWithContext(ctx context.Context) GetReportPlanReportSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReportPlanReportSettingArrayOutput)
}

type GetReportPlanReportSettingOutput struct{ *pulumi.OutputState }

func (GetReportPlanReportSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReportPlanReportSetting)(nil)).Elem()
}

func (o GetReportPlanReportSettingOutput) ToGetReportPlanReportSettingOutput() GetReportPlanReportSettingOutput {
	return o
}

func (o GetReportPlanReportSettingOutput) ToGetReportPlanReportSettingOutputWithContext(ctx context.Context) GetReportPlanReportSettingOutput {
	return o
}

// Specifies the Amazon Resource Names (ARNs) of the frameworks a report covers.
func (o GetReportPlanReportSettingOutput) FrameworkArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetReportPlanReportSetting) []string { return v.FrameworkArns }).(pulumi.StringArrayOutput)
}

// Specifies the number of frameworks a report covers.
func (o GetReportPlanReportSettingOutput) NumberOfFrameworks() pulumi.IntOutput {
	return o.ApplyT(func(v GetReportPlanReportSetting) int { return v.NumberOfFrameworks }).(pulumi.IntOutput)
}

// Identifies the report template for the report. Reports are built using a report template.
func (o GetReportPlanReportSettingOutput) ReportTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v GetReportPlanReportSetting) string { return v.ReportTemplate }).(pulumi.StringOutput)
}

type GetReportPlanReportSettingArrayOutput struct{ *pulumi.OutputState }

func (GetReportPlanReportSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReportPlanReportSetting)(nil)).Elem()
}

func (o GetReportPlanReportSettingArrayOutput) ToGetReportPlanReportSettingArrayOutput() GetReportPlanReportSettingArrayOutput {
	return o
}

func (o GetReportPlanReportSettingArrayOutput) ToGetReportPlanReportSettingArrayOutputWithContext(ctx context.Context) GetReportPlanReportSettingArrayOutput {
	return o
}

func (o GetReportPlanReportSettingArrayOutput) Index(i pulumi.IntInput) GetReportPlanReportSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetReportPlanReportSetting {
		return vs[0].([]GetReportPlanReportSetting)[vs[1].(int)]
	}).(GetReportPlanReportSettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FrameworkControlInput)(nil)).Elem(), FrameworkControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrameworkControlArrayInput)(nil)).Elem(), FrameworkControlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrameworkControlInputParameterInput)(nil)).Elem(), FrameworkControlInputParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrameworkControlInputParameterArrayInput)(nil)).Elem(), FrameworkControlInputParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrameworkControlScopeInput)(nil)).Elem(), FrameworkControlScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrameworkControlScopePtrInput)(nil)).Elem(), FrameworkControlScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanAdvancedBackupSettingInput)(nil)).Elem(), PlanAdvancedBackupSettingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanAdvancedBackupSettingArrayInput)(nil)).Elem(), PlanAdvancedBackupSettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanRuleInput)(nil)).Elem(), PlanRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanRuleArrayInput)(nil)).Elem(), PlanRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanRuleCopyActionInput)(nil)).Elem(), PlanRuleCopyActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanRuleCopyActionArrayInput)(nil)).Elem(), PlanRuleCopyActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanRuleCopyActionLifecycleInput)(nil)).Elem(), PlanRuleCopyActionLifecycleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanRuleCopyActionLifecyclePtrInput)(nil)).Elem(), PlanRuleCopyActionLifecycleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanRuleLifecycleInput)(nil)).Elem(), PlanRuleLifecycleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanRuleLifecyclePtrInput)(nil)).Elem(), PlanRuleLifecycleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReportPlanReportDeliveryChannelInput)(nil)).Elem(), ReportPlanReportDeliveryChannelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReportPlanReportDeliveryChannelPtrInput)(nil)).Elem(), ReportPlanReportDeliveryChannelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReportPlanReportSettingInput)(nil)).Elem(), ReportPlanReportSettingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReportPlanReportSettingPtrInput)(nil)).Elem(), ReportPlanReportSettingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SelectionConditionInput)(nil)).Elem(), SelectionConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SelectionConditionArrayInput)(nil)).Elem(), SelectionConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SelectionConditionStringEqualInput)(nil)).Elem(), SelectionConditionStringEqualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SelectionConditionStringEqualArrayInput)(nil)).Elem(), SelectionConditionStringEqualArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SelectionConditionStringLikeInput)(nil)).Elem(), SelectionConditionStringLikeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SelectionConditionStringLikeArrayInput)(nil)).Elem(), SelectionConditionStringLikeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SelectionConditionStringNotEqualInput)(nil)).Elem(), SelectionConditionStringNotEqualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SelectionConditionStringNotEqualArrayInput)(nil)).Elem(), SelectionConditionStringNotEqualArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SelectionConditionStringNotLikeInput)(nil)).Elem(), SelectionConditionStringNotLikeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SelectionConditionStringNotLikeArrayInput)(nil)).Elem(), SelectionConditionStringNotLikeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SelectionSelectionTagInput)(nil)).Elem(), SelectionSelectionTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SelectionSelectionTagArrayInput)(nil)).Elem(), SelectionSelectionTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFrameworkControlInput)(nil)).Elem(), GetFrameworkControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFrameworkControlArrayInput)(nil)).Elem(), GetFrameworkControlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFrameworkControlInputParameterInput)(nil)).Elem(), GetFrameworkControlInputParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFrameworkControlInputParameterArrayInput)(nil)).Elem(), GetFrameworkControlInputParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFrameworkControlScopeInput)(nil)).Elem(), GetFrameworkControlScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFrameworkControlScopeArrayInput)(nil)).Elem(), GetFrameworkControlScopeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReportPlanReportDeliveryChannelInput)(nil)).Elem(), GetReportPlanReportDeliveryChannelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReportPlanReportDeliveryChannelArrayInput)(nil)).Elem(), GetReportPlanReportDeliveryChannelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReportPlanReportSettingInput)(nil)).Elem(), GetReportPlanReportSettingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReportPlanReportSettingArrayInput)(nil)).Elem(), GetReportPlanReportSettingArray{})
	pulumi.RegisterOutputType(FrameworkControlOutput{})
	pulumi.RegisterOutputType(FrameworkControlArrayOutput{})
	pulumi.RegisterOutputType(FrameworkControlInputParameterOutput{})
	pulumi.RegisterOutputType(FrameworkControlInputParameterArrayOutput{})
	pulumi.RegisterOutputType(FrameworkControlScopeOutput{})
	pulumi.RegisterOutputType(FrameworkControlScopePtrOutput{})
	pulumi.RegisterOutputType(PlanAdvancedBackupSettingOutput{})
	pulumi.RegisterOutputType(PlanAdvancedBackupSettingArrayOutput{})
	pulumi.RegisterOutputType(PlanRuleOutput{})
	pulumi.RegisterOutputType(PlanRuleArrayOutput{})
	pulumi.RegisterOutputType(PlanRuleCopyActionOutput{})
	pulumi.RegisterOutputType(PlanRuleCopyActionArrayOutput{})
	pulumi.RegisterOutputType(PlanRuleCopyActionLifecycleOutput{})
	pulumi.RegisterOutputType(PlanRuleCopyActionLifecyclePtrOutput{})
	pulumi.RegisterOutputType(PlanRuleLifecycleOutput{})
	pulumi.RegisterOutputType(PlanRuleLifecyclePtrOutput{})
	pulumi.RegisterOutputType(ReportPlanReportDeliveryChannelOutput{})
	pulumi.RegisterOutputType(ReportPlanReportDeliveryChannelPtrOutput{})
	pulumi.RegisterOutputType(ReportPlanReportSettingOutput{})
	pulumi.RegisterOutputType(ReportPlanReportSettingPtrOutput{})
	pulumi.RegisterOutputType(SelectionConditionOutput{})
	pulumi.RegisterOutputType(SelectionConditionArrayOutput{})
	pulumi.RegisterOutputType(SelectionConditionStringEqualOutput{})
	pulumi.RegisterOutputType(SelectionConditionStringEqualArrayOutput{})
	pulumi.RegisterOutputType(SelectionConditionStringLikeOutput{})
	pulumi.RegisterOutputType(SelectionConditionStringLikeArrayOutput{})
	pulumi.RegisterOutputType(SelectionConditionStringNotEqualOutput{})
	pulumi.RegisterOutputType(SelectionConditionStringNotEqualArrayOutput{})
	pulumi.RegisterOutputType(SelectionConditionStringNotLikeOutput{})
	pulumi.RegisterOutputType(SelectionConditionStringNotLikeArrayOutput{})
	pulumi.RegisterOutputType(SelectionSelectionTagOutput{})
	pulumi.RegisterOutputType(SelectionSelectionTagArrayOutput{})
	pulumi.RegisterOutputType(GetFrameworkControlOutput{})
	pulumi.RegisterOutputType(GetFrameworkControlArrayOutput{})
	pulumi.RegisterOutputType(GetFrameworkControlInputParameterOutput{})
	pulumi.RegisterOutputType(GetFrameworkControlInputParameterArrayOutput{})
	pulumi.RegisterOutputType(GetFrameworkControlScopeOutput{})
	pulumi.RegisterOutputType(GetFrameworkControlScopeArrayOutput{})
	pulumi.RegisterOutputType(GetReportPlanReportDeliveryChannelOutput{})
	pulumi.RegisterOutputType(GetReportPlanReportDeliveryChannelArrayOutput{})
	pulumi.RegisterOutputType(GetReportPlanReportSettingOutput{})
	pulumi.RegisterOutputType(GetReportPlanReportSettingArrayOutput{})
}
