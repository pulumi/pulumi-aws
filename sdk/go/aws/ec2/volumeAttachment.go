// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an AWS EBS Volume Attachment as a top level resource, to attach and
// detach volumes from AWS Instances.
// 
// > **NOTE on EBS block devices:** If you use `ebs_block_device` on an `aws_instance`, Terraform will assume management over the full set of non-root EBS block devices for the instance, and treats additional block devices as drift. For this reason, `ebs_block_device` cannot be mixed with external `aws_ebs_volume` + `aws_ebs_volume_attachment` resources for a given instance.
type VolumeAttachment struct {
	s *pulumi.ResourceState
}

// NewVolumeAttachment registers a new resource with the given unique name, arguments, and options.
func NewVolumeAttachment(ctx *pulumi.Context,
	name string, args *VolumeAttachmentArgs, opts ...pulumi.ResourceOpt) (*VolumeAttachment, error) {
	if args == nil || args.DeviceName == nil {
		return nil, errors.New("missing required argument 'DeviceName'")
	}
	if args == nil || args.InstanceId == nil {
		return nil, errors.New("missing required argument 'InstanceId'")
	}
	if args == nil || args.VolumeId == nil {
		return nil, errors.New("missing required argument 'VolumeId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["deviceName"] = nil
		inputs["forceDetach"] = nil
		inputs["instanceId"] = nil
		inputs["skipDestroy"] = nil
		inputs["volumeId"] = nil
	} else {
		inputs["deviceName"] = args.DeviceName
		inputs["forceDetach"] = args.ForceDetach
		inputs["instanceId"] = args.InstanceId
		inputs["skipDestroy"] = args.SkipDestroy
		inputs["volumeId"] = args.VolumeId
	}
	s, err := ctx.RegisterResource("aws:ec2/volumeAttachment:VolumeAttachment", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VolumeAttachment{s: s}, nil
}

// GetVolumeAttachment gets an existing VolumeAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolumeAttachment(ctx *pulumi.Context,
	name string, id pulumi.ID, state *VolumeAttachmentState, opts ...pulumi.ResourceOpt) (*VolumeAttachment, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["deviceName"] = state.DeviceName
		inputs["forceDetach"] = state.ForceDetach
		inputs["instanceId"] = state.InstanceId
		inputs["skipDestroy"] = state.SkipDestroy
		inputs["volumeId"] = state.VolumeId
	}
	s, err := ctx.ReadResource("aws:ec2/volumeAttachment:VolumeAttachment", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VolumeAttachment{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *VolumeAttachment) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *VolumeAttachment) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The device name to expose to the instance (for
// example, `/dev/sdh` or `xvdh`)
func (r *VolumeAttachment) DeviceName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["deviceName"])
}

// Set to `true` if you want to force the
// volume to detach. Useful if previous attempts failed, but use this option only
// as a last resort, as this can result in **data loss**. See
// [Detaching an Amazon EBS Volume from an Instance][1] for more information.
func (r *VolumeAttachment) ForceDetach() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["forceDetach"])
}

// ID of the Instance to attach to
func (r *VolumeAttachment) InstanceId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["instanceId"])
}

// Set this to true if you do not wish
// to detach the volume from the instance to which it is attached at destroy
// time, and instead just remove the attachment from Terraform state. This is
// useful when destroying an instance which has volumes created by some other
// means attached.
func (r *VolumeAttachment) SkipDestroy() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["skipDestroy"])
}

// ID of the Volume to be attached
func (r *VolumeAttachment) VolumeId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["volumeId"])
}

// Input properties used for looking up and filtering VolumeAttachment resources.
type VolumeAttachmentState struct {
	// The device name to expose to the instance (for
	// example, `/dev/sdh` or `xvdh`)
	DeviceName interface{}
	// Set to `true` if you want to force the
	// volume to detach. Useful if previous attempts failed, but use this option only
	// as a last resort, as this can result in **data loss**. See
	// [Detaching an Amazon EBS Volume from an Instance][1] for more information.
	ForceDetach interface{}
	// ID of the Instance to attach to
	InstanceId interface{}
	// Set this to true if you do not wish
	// to detach the volume from the instance to which it is attached at destroy
	// time, and instead just remove the attachment from Terraform state. This is
	// useful when destroying an instance which has volumes created by some other
	// means attached.
	SkipDestroy interface{}
	// ID of the Volume to be attached
	VolumeId interface{}
}

// The set of arguments for constructing a VolumeAttachment resource.
type VolumeAttachmentArgs struct {
	// The device name to expose to the instance (for
	// example, `/dev/sdh` or `xvdh`)
	DeviceName interface{}
	// Set to `true` if you want to force the
	// volume to detach. Useful if previous attempts failed, but use this option only
	// as a last resort, as this can result in **data loss**. See
	// [Detaching an Amazon EBS Volume from an Instance][1] for more information.
	ForceDetach interface{}
	// ID of the Instance to attach to
	InstanceId interface{}
	// Set this to true if you do not wish
	// to detach the volume from the instance to which it is attached at destroy
	// time, and instead just remove the attachment from Terraform state. This is
	// useful when destroying an instance which has volumes created by some other
	// means attached.
	SkipDestroy interface{}
	// ID of the Volume to be attached
	VolumeId interface{}
}
