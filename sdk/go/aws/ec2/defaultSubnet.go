// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to manage a [default subnet](http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/default-vpc.html#default-vpc-basics) in the current region.
//
// **This is an advanced resource** and has special caveats to be aware of when using it. Please read this document in its entirety before using this resource.
//
// The `ec2.DefaultSubnet` resource behaves differently from normal resources in that if a default subnet exists in the specified Availability Zone, this provider does not _create_ this resource, but instead "adopts" it into management.
// If no default subnet exists, this provider creates a new default subnet.
// By default, `pulumi destroy` does not delete the default subnet but does remove the resource from the state.
// Set the `forceDestroy` argument to `true` to delete the default subnet.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ec2.NewDefaultSubnet(ctx, "defaultAz1", &ec2.DefaultSubnetArgs{
//				AvailabilityZone: pulumi.String("us-west-2a"),
//				Tags: pulumi.StringMap{
//					"Name": pulumi.String("Default subnet for us-west-2a"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Subnets can be imported using the `subnet id`, e.g.,
//
// ```sh
//
//	$ pulumi import aws:ec2/defaultSubnet:DefaultSubnet public_subnet subnet-9d4a7b6c
//
// ```
type DefaultSubnet struct {
	pulumi.CustomResourceState

	Arn                         pulumi.StringOutput  `pulumi:"arn"`
	AssignIpv6AddressOnCreation pulumi.BoolPtrOutput `pulumi:"assignIpv6AddressOnCreation"`
	// is required
	// * The `availabilityZoneId`, `cidrBlock` and `vpcId` arguments become computed attributes
	// * The default value for `mapPublicIpOnLaunch` is `true`
	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`
	// The AZ ID of the subnet
	AvailabilityZoneId pulumi.StringOutput `pulumi:"availabilityZoneId"`
	// The IPv4 CIDR block assigned to the subnet
	CidrBlock                               pulumi.StringOutput    `pulumi:"cidrBlock"`
	CustomerOwnedIpv4Pool                   pulumi.StringPtrOutput `pulumi:"customerOwnedIpv4Pool"`
	EnableDns64                             pulumi.BoolPtrOutput   `pulumi:"enableDns64"`
	EnableResourceNameDnsARecordOnLaunch    pulumi.BoolPtrOutput   `pulumi:"enableResourceNameDnsARecordOnLaunch"`
	EnableResourceNameDnsAaaaRecordOnLaunch pulumi.BoolPtrOutput   `pulumi:"enableResourceNameDnsAaaaRecordOnLaunch"`
	ExistingDefaultSubnet                   pulumi.BoolOutput      `pulumi:"existingDefaultSubnet"`
	// Whether destroying the resource deletes the default subnet. Default: `false`
	ForceDestroy                   pulumi.BoolPtrOutput   `pulumi:"forceDestroy"`
	Ipv6CidrBlock                  pulumi.StringOutput    `pulumi:"ipv6CidrBlock"`
	Ipv6CidrBlockAssociationId     pulumi.StringOutput    `pulumi:"ipv6CidrBlockAssociationId"`
	Ipv6Native                     pulumi.BoolPtrOutput   `pulumi:"ipv6Native"`
	MapCustomerOwnedIpOnLaunch     pulumi.BoolPtrOutput   `pulumi:"mapCustomerOwnedIpOnLaunch"`
	MapPublicIpOnLaunch            pulumi.BoolPtrOutput   `pulumi:"mapPublicIpOnLaunch"`
	OutpostArn                     pulumi.StringOutput    `pulumi:"outpostArn"`
	OwnerId                        pulumi.StringOutput    `pulumi:"ownerId"`
	PrivateDnsHostnameTypeOnLaunch pulumi.StringOutput    `pulumi:"privateDnsHostnameTypeOnLaunch"`
	Tags                           pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll                        pulumi.StringMapOutput `pulumi:"tagsAll"`
	// The ID of the VPC the subnet is in
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewDefaultSubnet registers a new resource with the given unique name, arguments, and options.
func NewDefaultSubnet(ctx *pulumi.Context,
	name string, args *DefaultSubnetArgs, opts ...pulumi.ResourceOption) (*DefaultSubnet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailabilityZone == nil {
		return nil, errors.New("invalid value for required argument 'AvailabilityZone'")
	}
	var resource DefaultSubnet
	err := ctx.RegisterResource("aws:ec2/defaultSubnet:DefaultSubnet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDefaultSubnet gets an existing DefaultSubnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDefaultSubnet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DefaultSubnetState, opts ...pulumi.ResourceOption) (*DefaultSubnet, error) {
	var resource DefaultSubnet
	err := ctx.ReadResource("aws:ec2/defaultSubnet:DefaultSubnet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DefaultSubnet resources.
type defaultSubnetState struct {
	Arn                         *string `pulumi:"arn"`
	AssignIpv6AddressOnCreation *bool   `pulumi:"assignIpv6AddressOnCreation"`
	// is required
	// * The `availabilityZoneId`, `cidrBlock` and `vpcId` arguments become computed attributes
	// * The default value for `mapPublicIpOnLaunch` is `true`
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The AZ ID of the subnet
	AvailabilityZoneId *string `pulumi:"availabilityZoneId"`
	// The IPv4 CIDR block assigned to the subnet
	CidrBlock                               *string `pulumi:"cidrBlock"`
	CustomerOwnedIpv4Pool                   *string `pulumi:"customerOwnedIpv4Pool"`
	EnableDns64                             *bool   `pulumi:"enableDns64"`
	EnableResourceNameDnsARecordOnLaunch    *bool   `pulumi:"enableResourceNameDnsARecordOnLaunch"`
	EnableResourceNameDnsAaaaRecordOnLaunch *bool   `pulumi:"enableResourceNameDnsAaaaRecordOnLaunch"`
	ExistingDefaultSubnet                   *bool   `pulumi:"existingDefaultSubnet"`
	// Whether destroying the resource deletes the default subnet. Default: `false`
	ForceDestroy                   *bool             `pulumi:"forceDestroy"`
	Ipv6CidrBlock                  *string           `pulumi:"ipv6CidrBlock"`
	Ipv6CidrBlockAssociationId     *string           `pulumi:"ipv6CidrBlockAssociationId"`
	Ipv6Native                     *bool             `pulumi:"ipv6Native"`
	MapCustomerOwnedIpOnLaunch     *bool             `pulumi:"mapCustomerOwnedIpOnLaunch"`
	MapPublicIpOnLaunch            *bool             `pulumi:"mapPublicIpOnLaunch"`
	OutpostArn                     *string           `pulumi:"outpostArn"`
	OwnerId                        *string           `pulumi:"ownerId"`
	PrivateDnsHostnameTypeOnLaunch *string           `pulumi:"privateDnsHostnameTypeOnLaunch"`
	Tags                           map[string]string `pulumi:"tags"`
	TagsAll                        map[string]string `pulumi:"tagsAll"`
	// The ID of the VPC the subnet is in
	VpcId *string `pulumi:"vpcId"`
}

type DefaultSubnetState struct {
	Arn                         pulumi.StringPtrInput
	AssignIpv6AddressOnCreation pulumi.BoolPtrInput
	// is required
	// * The `availabilityZoneId`, `cidrBlock` and `vpcId` arguments become computed attributes
	// * The default value for `mapPublicIpOnLaunch` is `true`
	AvailabilityZone pulumi.StringPtrInput
	// The AZ ID of the subnet
	AvailabilityZoneId pulumi.StringPtrInput
	// The IPv4 CIDR block assigned to the subnet
	CidrBlock                               pulumi.StringPtrInput
	CustomerOwnedIpv4Pool                   pulumi.StringPtrInput
	EnableDns64                             pulumi.BoolPtrInput
	EnableResourceNameDnsARecordOnLaunch    pulumi.BoolPtrInput
	EnableResourceNameDnsAaaaRecordOnLaunch pulumi.BoolPtrInput
	ExistingDefaultSubnet                   pulumi.BoolPtrInput
	// Whether destroying the resource deletes the default subnet. Default: `false`
	ForceDestroy                   pulumi.BoolPtrInput
	Ipv6CidrBlock                  pulumi.StringPtrInput
	Ipv6CidrBlockAssociationId     pulumi.StringPtrInput
	Ipv6Native                     pulumi.BoolPtrInput
	MapCustomerOwnedIpOnLaunch     pulumi.BoolPtrInput
	MapPublicIpOnLaunch            pulumi.BoolPtrInput
	OutpostArn                     pulumi.StringPtrInput
	OwnerId                        pulumi.StringPtrInput
	PrivateDnsHostnameTypeOnLaunch pulumi.StringPtrInput
	Tags                           pulumi.StringMapInput
	TagsAll                        pulumi.StringMapInput
	// The ID of the VPC the subnet is in
	VpcId pulumi.StringPtrInput
}

func (DefaultSubnetState) ElementType() reflect.Type {
	return reflect.TypeOf((*defaultSubnetState)(nil)).Elem()
}

type defaultSubnetArgs struct {
	AssignIpv6AddressOnCreation *bool `pulumi:"assignIpv6AddressOnCreation"`
	// is required
	// * The `availabilityZoneId`, `cidrBlock` and `vpcId` arguments become computed attributes
	// * The default value for `mapPublicIpOnLaunch` is `true`
	AvailabilityZone                        string  `pulumi:"availabilityZone"`
	CustomerOwnedIpv4Pool                   *string `pulumi:"customerOwnedIpv4Pool"`
	EnableDns64                             *bool   `pulumi:"enableDns64"`
	EnableResourceNameDnsARecordOnLaunch    *bool   `pulumi:"enableResourceNameDnsARecordOnLaunch"`
	EnableResourceNameDnsAaaaRecordOnLaunch *bool   `pulumi:"enableResourceNameDnsAaaaRecordOnLaunch"`
	// Whether destroying the resource deletes the default subnet. Default: `false`
	ForceDestroy                   *bool             `pulumi:"forceDestroy"`
	Ipv6CidrBlock                  *string           `pulumi:"ipv6CidrBlock"`
	Ipv6Native                     *bool             `pulumi:"ipv6Native"`
	MapCustomerOwnedIpOnLaunch     *bool             `pulumi:"mapCustomerOwnedIpOnLaunch"`
	MapPublicIpOnLaunch            *bool             `pulumi:"mapPublicIpOnLaunch"`
	PrivateDnsHostnameTypeOnLaunch *string           `pulumi:"privateDnsHostnameTypeOnLaunch"`
	Tags                           map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a DefaultSubnet resource.
type DefaultSubnetArgs struct {
	AssignIpv6AddressOnCreation pulumi.BoolPtrInput
	// is required
	// * The `availabilityZoneId`, `cidrBlock` and `vpcId` arguments become computed attributes
	// * The default value for `mapPublicIpOnLaunch` is `true`
	AvailabilityZone                        pulumi.StringInput
	CustomerOwnedIpv4Pool                   pulumi.StringPtrInput
	EnableDns64                             pulumi.BoolPtrInput
	EnableResourceNameDnsARecordOnLaunch    pulumi.BoolPtrInput
	EnableResourceNameDnsAaaaRecordOnLaunch pulumi.BoolPtrInput
	// Whether destroying the resource deletes the default subnet. Default: `false`
	ForceDestroy                   pulumi.BoolPtrInput
	Ipv6CidrBlock                  pulumi.StringPtrInput
	Ipv6Native                     pulumi.BoolPtrInput
	MapCustomerOwnedIpOnLaunch     pulumi.BoolPtrInput
	MapPublicIpOnLaunch            pulumi.BoolPtrInput
	PrivateDnsHostnameTypeOnLaunch pulumi.StringPtrInput
	Tags                           pulumi.StringMapInput
}

func (DefaultSubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*defaultSubnetArgs)(nil)).Elem()
}

type DefaultSubnetInput interface {
	pulumi.Input

	ToDefaultSubnetOutput() DefaultSubnetOutput
	ToDefaultSubnetOutputWithContext(ctx context.Context) DefaultSubnetOutput
}

func (*DefaultSubnet) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultSubnet)(nil)).Elem()
}

func (i *DefaultSubnet) ToDefaultSubnetOutput() DefaultSubnetOutput {
	return i.ToDefaultSubnetOutputWithContext(context.Background())
}

func (i *DefaultSubnet) ToDefaultSubnetOutputWithContext(ctx context.Context) DefaultSubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultSubnetOutput)
}

// DefaultSubnetArrayInput is an input type that accepts DefaultSubnetArray and DefaultSubnetArrayOutput values.
// You can construct a concrete instance of `DefaultSubnetArrayInput` via:
//
//	DefaultSubnetArray{ DefaultSubnetArgs{...} }
type DefaultSubnetArrayInput interface {
	pulumi.Input

	ToDefaultSubnetArrayOutput() DefaultSubnetArrayOutput
	ToDefaultSubnetArrayOutputWithContext(context.Context) DefaultSubnetArrayOutput
}

type DefaultSubnetArray []DefaultSubnetInput

func (DefaultSubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DefaultSubnet)(nil)).Elem()
}

func (i DefaultSubnetArray) ToDefaultSubnetArrayOutput() DefaultSubnetArrayOutput {
	return i.ToDefaultSubnetArrayOutputWithContext(context.Background())
}

func (i DefaultSubnetArray) ToDefaultSubnetArrayOutputWithContext(ctx context.Context) DefaultSubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultSubnetArrayOutput)
}

// DefaultSubnetMapInput is an input type that accepts DefaultSubnetMap and DefaultSubnetMapOutput values.
// You can construct a concrete instance of `DefaultSubnetMapInput` via:
//
//	DefaultSubnetMap{ "key": DefaultSubnetArgs{...} }
type DefaultSubnetMapInput interface {
	pulumi.Input

	ToDefaultSubnetMapOutput() DefaultSubnetMapOutput
	ToDefaultSubnetMapOutputWithContext(context.Context) DefaultSubnetMapOutput
}

type DefaultSubnetMap map[string]DefaultSubnetInput

func (DefaultSubnetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DefaultSubnet)(nil)).Elem()
}

func (i DefaultSubnetMap) ToDefaultSubnetMapOutput() DefaultSubnetMapOutput {
	return i.ToDefaultSubnetMapOutputWithContext(context.Background())
}

func (i DefaultSubnetMap) ToDefaultSubnetMapOutputWithContext(ctx context.Context) DefaultSubnetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultSubnetMapOutput)
}

type DefaultSubnetOutput struct{ *pulumi.OutputState }

func (DefaultSubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultSubnet)(nil)).Elem()
}

func (o DefaultSubnetOutput) ToDefaultSubnetOutput() DefaultSubnetOutput {
	return o
}

func (o DefaultSubnetOutput) ToDefaultSubnetOutputWithContext(ctx context.Context) DefaultSubnetOutput {
	return o
}

func (o DefaultSubnetOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *DefaultSubnet) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o DefaultSubnetOutput) AssignIpv6AddressOnCreation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DefaultSubnet) pulumi.BoolPtrOutput { return v.AssignIpv6AddressOnCreation }).(pulumi.BoolPtrOutput)
}

// is required
// * The `availabilityZoneId`, `cidrBlock` and `vpcId` arguments become computed attributes
// * The default value for `mapPublicIpOnLaunch` is `true`
func (o DefaultSubnetOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *DefaultSubnet) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// The AZ ID of the subnet
func (o DefaultSubnetOutput) AvailabilityZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *DefaultSubnet) pulumi.StringOutput { return v.AvailabilityZoneId }).(pulumi.StringOutput)
}

// The IPv4 CIDR block assigned to the subnet
func (o DefaultSubnetOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *DefaultSubnet) pulumi.StringOutput { return v.CidrBlock }).(pulumi.StringOutput)
}

func (o DefaultSubnetOutput) CustomerOwnedIpv4Pool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DefaultSubnet) pulumi.StringPtrOutput { return v.CustomerOwnedIpv4Pool }).(pulumi.StringPtrOutput)
}

func (o DefaultSubnetOutput) EnableDns64() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DefaultSubnet) pulumi.BoolPtrOutput { return v.EnableDns64 }).(pulumi.BoolPtrOutput)
}

func (o DefaultSubnetOutput) EnableResourceNameDnsARecordOnLaunch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DefaultSubnet) pulumi.BoolPtrOutput { return v.EnableResourceNameDnsARecordOnLaunch }).(pulumi.BoolPtrOutput)
}

func (o DefaultSubnetOutput) EnableResourceNameDnsAaaaRecordOnLaunch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DefaultSubnet) pulumi.BoolPtrOutput { return v.EnableResourceNameDnsAaaaRecordOnLaunch }).(pulumi.BoolPtrOutput)
}

func (o DefaultSubnetOutput) ExistingDefaultSubnet() pulumi.BoolOutput {
	return o.ApplyT(func(v *DefaultSubnet) pulumi.BoolOutput { return v.ExistingDefaultSubnet }).(pulumi.BoolOutput)
}

// Whether destroying the resource deletes the default subnet. Default: `false`
func (o DefaultSubnetOutput) ForceDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DefaultSubnet) pulumi.BoolPtrOutput { return v.ForceDestroy }).(pulumi.BoolPtrOutput)
}

func (o DefaultSubnetOutput) Ipv6CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *DefaultSubnet) pulumi.StringOutput { return v.Ipv6CidrBlock }).(pulumi.StringOutput)
}

func (o DefaultSubnetOutput) Ipv6CidrBlockAssociationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DefaultSubnet) pulumi.StringOutput { return v.Ipv6CidrBlockAssociationId }).(pulumi.StringOutput)
}

func (o DefaultSubnetOutput) Ipv6Native() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DefaultSubnet) pulumi.BoolPtrOutput { return v.Ipv6Native }).(pulumi.BoolPtrOutput)
}

func (o DefaultSubnetOutput) MapCustomerOwnedIpOnLaunch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DefaultSubnet) pulumi.BoolPtrOutput { return v.MapCustomerOwnedIpOnLaunch }).(pulumi.BoolPtrOutput)
}

func (o DefaultSubnetOutput) MapPublicIpOnLaunch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DefaultSubnet) pulumi.BoolPtrOutput { return v.MapPublicIpOnLaunch }).(pulumi.BoolPtrOutput)
}

func (o DefaultSubnetOutput) OutpostArn() pulumi.StringOutput {
	return o.ApplyT(func(v *DefaultSubnet) pulumi.StringOutput { return v.OutpostArn }).(pulumi.StringOutput)
}

func (o DefaultSubnetOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *DefaultSubnet) pulumi.StringOutput { return v.OwnerId }).(pulumi.StringOutput)
}

func (o DefaultSubnetOutput) PrivateDnsHostnameTypeOnLaunch() pulumi.StringOutput {
	return o.ApplyT(func(v *DefaultSubnet) pulumi.StringOutput { return v.PrivateDnsHostnameTypeOnLaunch }).(pulumi.StringOutput)
}

func (o DefaultSubnetOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DefaultSubnet) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o DefaultSubnetOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DefaultSubnet) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// The ID of the VPC the subnet is in
func (o DefaultSubnetOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *DefaultSubnet) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type DefaultSubnetArrayOutput struct{ *pulumi.OutputState }

func (DefaultSubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DefaultSubnet)(nil)).Elem()
}

func (o DefaultSubnetArrayOutput) ToDefaultSubnetArrayOutput() DefaultSubnetArrayOutput {
	return o
}

func (o DefaultSubnetArrayOutput) ToDefaultSubnetArrayOutputWithContext(ctx context.Context) DefaultSubnetArrayOutput {
	return o
}

func (o DefaultSubnetArrayOutput) Index(i pulumi.IntInput) DefaultSubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DefaultSubnet {
		return vs[0].([]*DefaultSubnet)[vs[1].(int)]
	}).(DefaultSubnetOutput)
}

type DefaultSubnetMapOutput struct{ *pulumi.OutputState }

func (DefaultSubnetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DefaultSubnet)(nil)).Elem()
}

func (o DefaultSubnetMapOutput) ToDefaultSubnetMapOutput() DefaultSubnetMapOutput {
	return o
}

func (o DefaultSubnetMapOutput) ToDefaultSubnetMapOutputWithContext(ctx context.Context) DefaultSubnetMapOutput {
	return o
}

func (o DefaultSubnetMapOutput) MapIndex(k pulumi.StringInput) DefaultSubnetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DefaultSubnet {
		return vs[0].(map[string]*DefaultSubnet)[vs[1].(string)]
	}).(DefaultSubnetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DefaultSubnetInput)(nil)).Elem(), &DefaultSubnet{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefaultSubnetArrayInput)(nil)).Elem(), DefaultSubnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefaultSubnetMapInput)(nil)).Elem(), DefaultSubnetMap{})
	pulumi.RegisterOutputType(DefaultSubnetOutput{})
	pulumi.RegisterOutputType(DefaultSubnetArrayOutput{})
	pulumi.RegisterOutputType(DefaultSubnetMapOutput{})
}
