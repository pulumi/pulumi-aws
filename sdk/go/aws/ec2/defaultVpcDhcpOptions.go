// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource to manage the [default AWS DHCP Options Set](http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_DHCP_Options.html#AmazonDNS)
// in the current region.
// 
// Each AWS region comes with a default set of DHCP options.
// **This is an advanced resource**, and has special caveats to be aware of when
// using it. Please read this document in its entirety before using this resource.
// 
// The `aws_default_vpc_dhcp_options` behaves differently from normal resources, in that
// Terraform does not _create_ this resource, but instead "adopts" it
// into management. 
type DefaultVpcDhcpOptions struct {
	s *pulumi.ResourceState
}

// NewDefaultVpcDhcpOptions registers a new resource with the given unique name, arguments, and options.
func NewDefaultVpcDhcpOptions(ctx *pulumi.Context,
	name string, args *DefaultVpcDhcpOptionsArgs, opts ...pulumi.ResourceOpt) (*DefaultVpcDhcpOptions, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["netbiosNameServers"] = nil
		inputs["netbiosNodeType"] = nil
		inputs["tags"] = nil
	} else {
		inputs["netbiosNameServers"] = args.NetbiosNameServers
		inputs["netbiosNodeType"] = args.NetbiosNodeType
		inputs["tags"] = args.Tags
	}
	inputs["domainName"] = nil
	inputs["domainNameServers"] = nil
	inputs["ntpServers"] = nil
	s, err := ctx.RegisterResource("aws:ec2/defaultVpcDhcpOptions:DefaultVpcDhcpOptions", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DefaultVpcDhcpOptions{s: s}, nil
}

// GetDefaultVpcDhcpOptions gets an existing DefaultVpcDhcpOptions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDefaultVpcDhcpOptions(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DefaultVpcDhcpOptionsState, opts ...pulumi.ResourceOpt) (*DefaultVpcDhcpOptions, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["domainName"] = state.DomainName
		inputs["domainNameServers"] = state.DomainNameServers
		inputs["netbiosNameServers"] = state.NetbiosNameServers
		inputs["netbiosNodeType"] = state.NetbiosNodeType
		inputs["ntpServers"] = state.NtpServers
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("aws:ec2/defaultVpcDhcpOptions:DefaultVpcDhcpOptions", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DefaultVpcDhcpOptions{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *DefaultVpcDhcpOptions) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *DefaultVpcDhcpOptions) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *DefaultVpcDhcpOptions) DomainName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["domainName"])
}

func (r *DefaultVpcDhcpOptions) DomainNameServers() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["domainNameServers"])
}

// List of NETBIOS name servers.
func (r *DefaultVpcDhcpOptions) NetbiosNameServers() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["netbiosNameServers"])
}

// The NetBIOS node type (1, 2, 4, or 8). AWS recommends to specify 2 since broadcast and multicast are not supported in their network. For more information about these node types, see [RFC 2132](http://www.ietf.org/rfc/rfc2132.txt).
func (r *DefaultVpcDhcpOptions) NetbiosNodeType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["netbiosNodeType"])
}

func (r *DefaultVpcDhcpOptions) NtpServers() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ntpServers"])
}

// A mapping of tags to assign to the resource.
func (r *DefaultVpcDhcpOptions) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering DefaultVpcDhcpOptions resources.
type DefaultVpcDhcpOptionsState struct {
	DomainName interface{}
	DomainNameServers interface{}
	// List of NETBIOS name servers.
	NetbiosNameServers interface{}
	// The NetBIOS node type (1, 2, 4, or 8). AWS recommends to specify 2 since broadcast and multicast are not supported in their network. For more information about these node types, see [RFC 2132](http://www.ietf.org/rfc/rfc2132.txt).
	NetbiosNodeType interface{}
	NtpServers interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
}

// The set of arguments for constructing a DefaultVpcDhcpOptions resource.
type DefaultVpcDhcpOptionsArgs struct {
	// List of NETBIOS name servers.
	NetbiosNameServers interface{}
	// The NetBIOS node type (1, 2, 4, or 8). AWS recommends to specify 2 since broadcast and multicast are not supported in their network. For more information about these node types, see [RFC 2132](http://www.ietf.org/rfc/rfc2132.txt).
	NetbiosNodeType interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
}
