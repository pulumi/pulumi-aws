// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a proxy protocol policy, which allows an ELB to carry a client connection information to a backend.
type ProxyProtocolPolicy struct {
	s *pulumi.ResourceState
}

// NewProxyProtocolPolicy registers a new resource with the given unique name, arguments, and options.
func NewProxyProtocolPolicy(ctx *pulumi.Context,
	name string, args *ProxyProtocolPolicyArgs, opts ...pulumi.ResourceOpt) (*ProxyProtocolPolicy, error) {
	if args == nil || args.InstancePorts == nil {
		return nil, errors.New("missing required argument 'InstancePorts'")
	}
	if args == nil || args.LoadBalancer == nil {
		return nil, errors.New("missing required argument 'LoadBalancer'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["instancePorts"] = nil
		inputs["loadBalancer"] = nil
	} else {
		inputs["instancePorts"] = args.InstancePorts
		inputs["loadBalancer"] = args.LoadBalancer
	}
	s, err := ctx.RegisterResource("aws:ec2/proxyProtocolPolicy:ProxyProtocolPolicy", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProxyProtocolPolicy{s: s}, nil
}

// GetProxyProtocolPolicy gets an existing ProxyProtocolPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProxyProtocolPolicy(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ProxyProtocolPolicyState, opts ...pulumi.ResourceOpt) (*ProxyProtocolPolicy, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["instancePorts"] = state.InstancePorts
		inputs["loadBalancer"] = state.LoadBalancer
	}
	s, err := ctx.ReadResource("aws:ec2/proxyProtocolPolicy:ProxyProtocolPolicy", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProxyProtocolPolicy{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ProxyProtocolPolicy) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ProxyProtocolPolicy) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// List of instance ports to which the policy
// should be applied. This can be specified if the protocol is SSL or TCP.
func (r *ProxyProtocolPolicy) InstancePorts() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["instancePorts"])
}

// The load balancer to which the policy
// should be attached.
func (r *ProxyProtocolPolicy) LoadBalancer() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["loadBalancer"])
}

// Input properties used for looking up and filtering ProxyProtocolPolicy resources.
type ProxyProtocolPolicyState struct {
	// List of instance ports to which the policy
	// should be applied. This can be specified if the protocol is SSL or TCP.
	InstancePorts interface{}
	// The load balancer to which the policy
	// should be attached.
	LoadBalancer interface{}
}

// The set of arguments for constructing a ProxyProtocolPolicy resource.
type ProxyProtocolPolicyArgs struct {
	// List of instance ports to which the policy
	// should be applied. This can be specified if the protocol is SSL or TCP.
	InstancePorts interface{}
	// The load balancer to which the policy
	// should be attached.
	LoadBalancer interface{}
}
