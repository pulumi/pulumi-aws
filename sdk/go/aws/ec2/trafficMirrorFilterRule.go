// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TrafficMirrorFilterRule struct {
	pulumi.CustomResourceState

	Arn                   pulumi.StringOutput                                  `pulumi:"arn"`
	Description           pulumi.StringPtrOutput                               `pulumi:"description"`
	DestinationCidrBlock  pulumi.StringOutput                                  `pulumi:"destinationCidrBlock"`
	DestinationPortRange  TrafficMirrorFilterRuleDestinationPortRangePtrOutput `pulumi:"destinationPortRange"`
	Protocol              pulumi.IntPtrOutput                                  `pulumi:"protocol"`
	RuleAction            pulumi.StringOutput                                  `pulumi:"ruleAction"`
	RuleNumber            pulumi.IntOutput                                     `pulumi:"ruleNumber"`
	SourceCidrBlock       pulumi.StringOutput                                  `pulumi:"sourceCidrBlock"`
	SourcePortRange       TrafficMirrorFilterRuleSourcePortRangePtrOutput      `pulumi:"sourcePortRange"`
	TrafficDirection      pulumi.StringOutput                                  `pulumi:"trafficDirection"`
	TrafficMirrorFilterId pulumi.StringOutput                                  `pulumi:"trafficMirrorFilterId"`
}

// NewTrafficMirrorFilterRule registers a new resource with the given unique name, arguments, and options.
func NewTrafficMirrorFilterRule(ctx *pulumi.Context,
	name string, args *TrafficMirrorFilterRuleArgs, opts ...pulumi.ResourceOption) (*TrafficMirrorFilterRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationCidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'DestinationCidrBlock'")
	}
	if args.RuleAction == nil {
		return nil, errors.New("invalid value for required argument 'RuleAction'")
	}
	if args.RuleNumber == nil {
		return nil, errors.New("invalid value for required argument 'RuleNumber'")
	}
	if args.SourceCidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'SourceCidrBlock'")
	}
	if args.TrafficDirection == nil {
		return nil, errors.New("invalid value for required argument 'TrafficDirection'")
	}
	if args.TrafficMirrorFilterId == nil {
		return nil, errors.New("invalid value for required argument 'TrafficMirrorFilterId'")
	}
	var resource TrafficMirrorFilterRule
	err := ctx.RegisterResource("aws:ec2/trafficMirrorFilterRule:TrafficMirrorFilterRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrafficMirrorFilterRule gets an existing TrafficMirrorFilterRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrafficMirrorFilterRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrafficMirrorFilterRuleState, opts ...pulumi.ResourceOption) (*TrafficMirrorFilterRule, error) {
	var resource TrafficMirrorFilterRule
	err := ctx.ReadResource("aws:ec2/trafficMirrorFilterRule:TrafficMirrorFilterRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TrafficMirrorFilterRule resources.
type trafficMirrorFilterRuleState struct {
	Arn                   *string                                      `pulumi:"arn"`
	Description           *string                                      `pulumi:"description"`
	DestinationCidrBlock  *string                                      `pulumi:"destinationCidrBlock"`
	DestinationPortRange  *TrafficMirrorFilterRuleDestinationPortRange `pulumi:"destinationPortRange"`
	Protocol              *int                                         `pulumi:"protocol"`
	RuleAction            *string                                      `pulumi:"ruleAction"`
	RuleNumber            *int                                         `pulumi:"ruleNumber"`
	SourceCidrBlock       *string                                      `pulumi:"sourceCidrBlock"`
	SourcePortRange       *TrafficMirrorFilterRuleSourcePortRange      `pulumi:"sourcePortRange"`
	TrafficDirection      *string                                      `pulumi:"trafficDirection"`
	TrafficMirrorFilterId *string                                      `pulumi:"trafficMirrorFilterId"`
}

type TrafficMirrorFilterRuleState struct {
	Arn                   pulumi.StringPtrInput
	Description           pulumi.StringPtrInput
	DestinationCidrBlock  pulumi.StringPtrInput
	DestinationPortRange  TrafficMirrorFilterRuleDestinationPortRangePtrInput
	Protocol              pulumi.IntPtrInput
	RuleAction            pulumi.StringPtrInput
	RuleNumber            pulumi.IntPtrInput
	SourceCidrBlock       pulumi.StringPtrInput
	SourcePortRange       TrafficMirrorFilterRuleSourcePortRangePtrInput
	TrafficDirection      pulumi.StringPtrInput
	TrafficMirrorFilterId pulumi.StringPtrInput
}

func (TrafficMirrorFilterRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficMirrorFilterRuleState)(nil)).Elem()
}

type trafficMirrorFilterRuleArgs struct {
	Description           *string                                      `pulumi:"description"`
	DestinationCidrBlock  string                                       `pulumi:"destinationCidrBlock"`
	DestinationPortRange  *TrafficMirrorFilterRuleDestinationPortRange `pulumi:"destinationPortRange"`
	Protocol              *int                                         `pulumi:"protocol"`
	RuleAction            string                                       `pulumi:"ruleAction"`
	RuleNumber            int                                          `pulumi:"ruleNumber"`
	SourceCidrBlock       string                                       `pulumi:"sourceCidrBlock"`
	SourcePortRange       *TrafficMirrorFilterRuleSourcePortRange      `pulumi:"sourcePortRange"`
	TrafficDirection      string                                       `pulumi:"trafficDirection"`
	TrafficMirrorFilterId string                                       `pulumi:"trafficMirrorFilterId"`
}

// The set of arguments for constructing a TrafficMirrorFilterRule resource.
type TrafficMirrorFilterRuleArgs struct {
	Description           pulumi.StringPtrInput
	DestinationCidrBlock  pulumi.StringInput
	DestinationPortRange  TrafficMirrorFilterRuleDestinationPortRangePtrInput
	Protocol              pulumi.IntPtrInput
	RuleAction            pulumi.StringInput
	RuleNumber            pulumi.IntInput
	SourceCidrBlock       pulumi.StringInput
	SourcePortRange       TrafficMirrorFilterRuleSourcePortRangePtrInput
	TrafficDirection      pulumi.StringInput
	TrafficMirrorFilterId pulumi.StringInput
}

func (TrafficMirrorFilterRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficMirrorFilterRuleArgs)(nil)).Elem()
}

type TrafficMirrorFilterRuleInput interface {
	pulumi.Input

	ToTrafficMirrorFilterRuleOutput() TrafficMirrorFilterRuleOutput
	ToTrafficMirrorFilterRuleOutputWithContext(ctx context.Context) TrafficMirrorFilterRuleOutput
}

func (*TrafficMirrorFilterRule) ElementType() reflect.Type {
	return reflect.TypeOf((**TrafficMirrorFilterRule)(nil)).Elem()
}

func (i *TrafficMirrorFilterRule) ToTrafficMirrorFilterRuleOutput() TrafficMirrorFilterRuleOutput {
	return i.ToTrafficMirrorFilterRuleOutputWithContext(context.Background())
}

func (i *TrafficMirrorFilterRule) ToTrafficMirrorFilterRuleOutputWithContext(ctx context.Context) TrafficMirrorFilterRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficMirrorFilterRuleOutput)
}

// TrafficMirrorFilterRuleArrayInput is an input type that accepts TrafficMirrorFilterRuleArray and TrafficMirrorFilterRuleArrayOutput values.
// You can construct a concrete instance of `TrafficMirrorFilterRuleArrayInput` via:
//
//	TrafficMirrorFilterRuleArray{ TrafficMirrorFilterRuleArgs{...} }
type TrafficMirrorFilterRuleArrayInput interface {
	pulumi.Input

	ToTrafficMirrorFilterRuleArrayOutput() TrafficMirrorFilterRuleArrayOutput
	ToTrafficMirrorFilterRuleArrayOutputWithContext(context.Context) TrafficMirrorFilterRuleArrayOutput
}

type TrafficMirrorFilterRuleArray []TrafficMirrorFilterRuleInput

func (TrafficMirrorFilterRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TrafficMirrorFilterRule)(nil)).Elem()
}

func (i TrafficMirrorFilterRuleArray) ToTrafficMirrorFilterRuleArrayOutput() TrafficMirrorFilterRuleArrayOutput {
	return i.ToTrafficMirrorFilterRuleArrayOutputWithContext(context.Background())
}

func (i TrafficMirrorFilterRuleArray) ToTrafficMirrorFilterRuleArrayOutputWithContext(ctx context.Context) TrafficMirrorFilterRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficMirrorFilterRuleArrayOutput)
}

// TrafficMirrorFilterRuleMapInput is an input type that accepts TrafficMirrorFilterRuleMap and TrafficMirrorFilterRuleMapOutput values.
// You can construct a concrete instance of `TrafficMirrorFilterRuleMapInput` via:
//
//	TrafficMirrorFilterRuleMap{ "key": TrafficMirrorFilterRuleArgs{...} }
type TrafficMirrorFilterRuleMapInput interface {
	pulumi.Input

	ToTrafficMirrorFilterRuleMapOutput() TrafficMirrorFilterRuleMapOutput
	ToTrafficMirrorFilterRuleMapOutputWithContext(context.Context) TrafficMirrorFilterRuleMapOutput
}

type TrafficMirrorFilterRuleMap map[string]TrafficMirrorFilterRuleInput

func (TrafficMirrorFilterRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TrafficMirrorFilterRule)(nil)).Elem()
}

func (i TrafficMirrorFilterRuleMap) ToTrafficMirrorFilterRuleMapOutput() TrafficMirrorFilterRuleMapOutput {
	return i.ToTrafficMirrorFilterRuleMapOutputWithContext(context.Background())
}

func (i TrafficMirrorFilterRuleMap) ToTrafficMirrorFilterRuleMapOutputWithContext(ctx context.Context) TrafficMirrorFilterRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficMirrorFilterRuleMapOutput)
}

type TrafficMirrorFilterRuleOutput struct{ *pulumi.OutputState }

func (TrafficMirrorFilterRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrafficMirrorFilterRule)(nil)).Elem()
}

func (o TrafficMirrorFilterRuleOutput) ToTrafficMirrorFilterRuleOutput() TrafficMirrorFilterRuleOutput {
	return o
}

func (o TrafficMirrorFilterRuleOutput) ToTrafficMirrorFilterRuleOutputWithContext(ctx context.Context) TrafficMirrorFilterRuleOutput {
	return o
}

func (o TrafficMirrorFilterRuleOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorFilterRule) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o TrafficMirrorFilterRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrafficMirrorFilterRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o TrafficMirrorFilterRuleOutput) DestinationCidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorFilterRule) pulumi.StringOutput { return v.DestinationCidrBlock }).(pulumi.StringOutput)
}

func (o TrafficMirrorFilterRuleOutput) DestinationPortRange() TrafficMirrorFilterRuleDestinationPortRangePtrOutput {
	return o.ApplyT(func(v *TrafficMirrorFilterRule) TrafficMirrorFilterRuleDestinationPortRangePtrOutput {
		return v.DestinationPortRange
	}).(TrafficMirrorFilterRuleDestinationPortRangePtrOutput)
}

func (o TrafficMirrorFilterRuleOutput) Protocol() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TrafficMirrorFilterRule) pulumi.IntPtrOutput { return v.Protocol }).(pulumi.IntPtrOutput)
}

func (o TrafficMirrorFilterRuleOutput) RuleAction() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorFilterRule) pulumi.StringOutput { return v.RuleAction }).(pulumi.StringOutput)
}

func (o TrafficMirrorFilterRuleOutput) RuleNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *TrafficMirrorFilterRule) pulumi.IntOutput { return v.RuleNumber }).(pulumi.IntOutput)
}

func (o TrafficMirrorFilterRuleOutput) SourceCidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorFilterRule) pulumi.StringOutput { return v.SourceCidrBlock }).(pulumi.StringOutput)
}

func (o TrafficMirrorFilterRuleOutput) SourcePortRange() TrafficMirrorFilterRuleSourcePortRangePtrOutput {
	return o.ApplyT(func(v *TrafficMirrorFilterRule) TrafficMirrorFilterRuleSourcePortRangePtrOutput {
		return v.SourcePortRange
	}).(TrafficMirrorFilterRuleSourcePortRangePtrOutput)
}

func (o TrafficMirrorFilterRuleOutput) TrafficDirection() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorFilterRule) pulumi.StringOutput { return v.TrafficDirection }).(pulumi.StringOutput)
}

func (o TrafficMirrorFilterRuleOutput) TrafficMirrorFilterId() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorFilterRule) pulumi.StringOutput { return v.TrafficMirrorFilterId }).(pulumi.StringOutput)
}

type TrafficMirrorFilterRuleArrayOutput struct{ *pulumi.OutputState }

func (TrafficMirrorFilterRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TrafficMirrorFilterRule)(nil)).Elem()
}

func (o TrafficMirrorFilterRuleArrayOutput) ToTrafficMirrorFilterRuleArrayOutput() TrafficMirrorFilterRuleArrayOutput {
	return o
}

func (o TrafficMirrorFilterRuleArrayOutput) ToTrafficMirrorFilterRuleArrayOutputWithContext(ctx context.Context) TrafficMirrorFilterRuleArrayOutput {
	return o
}

func (o TrafficMirrorFilterRuleArrayOutput) Index(i pulumi.IntInput) TrafficMirrorFilterRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TrafficMirrorFilterRule {
		return vs[0].([]*TrafficMirrorFilterRule)[vs[1].(int)]
	}).(TrafficMirrorFilterRuleOutput)
}

type TrafficMirrorFilterRuleMapOutput struct{ *pulumi.OutputState }

func (TrafficMirrorFilterRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TrafficMirrorFilterRule)(nil)).Elem()
}

func (o TrafficMirrorFilterRuleMapOutput) ToTrafficMirrorFilterRuleMapOutput() TrafficMirrorFilterRuleMapOutput {
	return o
}

func (o TrafficMirrorFilterRuleMapOutput) ToTrafficMirrorFilterRuleMapOutputWithContext(ctx context.Context) TrafficMirrorFilterRuleMapOutput {
	return o
}

func (o TrafficMirrorFilterRuleMapOutput) MapIndex(k pulumi.StringInput) TrafficMirrorFilterRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TrafficMirrorFilterRule {
		return vs[0].(map[string]*TrafficMirrorFilterRule)[vs[1].(string)]
	}).(TrafficMirrorFilterRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficMirrorFilterRuleInput)(nil)).Elem(), &TrafficMirrorFilterRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficMirrorFilterRuleArrayInput)(nil)).Elem(), TrafficMirrorFilterRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficMirrorFilterRuleMapInput)(nil)).Elem(), TrafficMirrorFilterRuleMap{})
	pulumi.RegisterOutputType(TrafficMirrorFilterRuleOutput{})
	pulumi.RegisterOutputType(TrafficMirrorFilterRuleArrayOutput{})
	pulumi.RegisterOutputType(TrafficMirrorFilterRuleMapOutput{})
}
