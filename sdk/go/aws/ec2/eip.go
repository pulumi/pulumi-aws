// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Eip struct {
	pulumi.CustomResourceState

	Address                pulumi.StringPtrOutput `pulumi:"address"`
	AllocationId           pulumi.StringOutput    `pulumi:"allocationId"`
	AssociateWithPrivateIp pulumi.StringPtrOutput `pulumi:"associateWithPrivateIp"`
	AssociationId          pulumi.StringOutput    `pulumi:"associationId"`
	CarrierIp              pulumi.StringOutput    `pulumi:"carrierIp"`
	CustomerOwnedIp        pulumi.StringOutput    `pulumi:"customerOwnedIp"`
	CustomerOwnedIpv4Pool  pulumi.StringPtrOutput `pulumi:"customerOwnedIpv4Pool"`
	Domain                 pulumi.StringOutput    `pulumi:"domain"`
	Instance               pulumi.StringOutput    `pulumi:"instance"`
	NetworkBorderGroup     pulumi.StringOutput    `pulumi:"networkBorderGroup"`
	NetworkInterface       pulumi.StringOutput    `pulumi:"networkInterface"`
	PrivateDns             pulumi.StringOutput    `pulumi:"privateDns"`
	PrivateIp              pulumi.StringOutput    `pulumi:"privateIp"`
	PublicDns              pulumi.StringOutput    `pulumi:"publicDns"`
	PublicIp               pulumi.StringOutput    `pulumi:"publicIp"`
	PublicIpv4Pool         pulumi.StringOutput    `pulumi:"publicIpv4Pool"`
	Tags                   pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll                pulumi.StringMapOutput `pulumi:"tagsAll"`
	Vpc                    pulumi.BoolOutput      `pulumi:"vpc"`
}

// NewEip registers a new resource with the given unique name, arguments, and options.
func NewEip(ctx *pulumi.Context,
	name string, args *EipArgs, opts ...pulumi.ResourceOption) (*Eip, error) {
	if args == nil {
		args = &EipArgs{}
	}

	var resource Eip
	err := ctx.RegisterResource("aws:ec2/eip:Eip", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEip gets an existing Eip resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEip(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EipState, opts ...pulumi.ResourceOption) (*Eip, error) {
	var resource Eip
	err := ctx.ReadResource("aws:ec2/eip:Eip", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Eip resources.
type eipState struct {
	Address                *string           `pulumi:"address"`
	AllocationId           *string           `pulumi:"allocationId"`
	AssociateWithPrivateIp *string           `pulumi:"associateWithPrivateIp"`
	AssociationId          *string           `pulumi:"associationId"`
	CarrierIp              *string           `pulumi:"carrierIp"`
	CustomerOwnedIp        *string           `pulumi:"customerOwnedIp"`
	CustomerOwnedIpv4Pool  *string           `pulumi:"customerOwnedIpv4Pool"`
	Domain                 *string           `pulumi:"domain"`
	Instance               *string           `pulumi:"instance"`
	NetworkBorderGroup     *string           `pulumi:"networkBorderGroup"`
	NetworkInterface       *string           `pulumi:"networkInterface"`
	PrivateDns             *string           `pulumi:"privateDns"`
	PrivateIp              *string           `pulumi:"privateIp"`
	PublicDns              *string           `pulumi:"publicDns"`
	PublicIp               *string           `pulumi:"publicIp"`
	PublicIpv4Pool         *string           `pulumi:"publicIpv4Pool"`
	Tags                   map[string]string `pulumi:"tags"`
	TagsAll                map[string]string `pulumi:"tagsAll"`
	Vpc                    *bool             `pulumi:"vpc"`
}

type EipState struct {
	Address                pulumi.StringPtrInput
	AllocationId           pulumi.StringPtrInput
	AssociateWithPrivateIp pulumi.StringPtrInput
	AssociationId          pulumi.StringPtrInput
	CarrierIp              pulumi.StringPtrInput
	CustomerOwnedIp        pulumi.StringPtrInput
	CustomerOwnedIpv4Pool  pulumi.StringPtrInput
	Domain                 pulumi.StringPtrInput
	Instance               pulumi.StringPtrInput
	NetworkBorderGroup     pulumi.StringPtrInput
	NetworkInterface       pulumi.StringPtrInput
	PrivateDns             pulumi.StringPtrInput
	PrivateIp              pulumi.StringPtrInput
	PublicDns              pulumi.StringPtrInput
	PublicIp               pulumi.StringPtrInput
	PublicIpv4Pool         pulumi.StringPtrInput
	Tags                   pulumi.StringMapInput
	TagsAll                pulumi.StringMapInput
	Vpc                    pulumi.BoolPtrInput
}

func (EipState) ElementType() reflect.Type {
	return reflect.TypeOf((*eipState)(nil)).Elem()
}

type eipArgs struct {
	Address                *string           `pulumi:"address"`
	AssociateWithPrivateIp *string           `pulumi:"associateWithPrivateIp"`
	CustomerOwnedIpv4Pool  *string           `pulumi:"customerOwnedIpv4Pool"`
	Instance               *string           `pulumi:"instance"`
	NetworkBorderGroup     *string           `pulumi:"networkBorderGroup"`
	NetworkInterface       *string           `pulumi:"networkInterface"`
	PublicIpv4Pool         *string           `pulumi:"publicIpv4Pool"`
	Tags                   map[string]string `pulumi:"tags"`
	Vpc                    *bool             `pulumi:"vpc"`
}

// The set of arguments for constructing a Eip resource.
type EipArgs struct {
	Address                pulumi.StringPtrInput
	AssociateWithPrivateIp pulumi.StringPtrInput
	CustomerOwnedIpv4Pool  pulumi.StringPtrInput
	Instance               pulumi.StringPtrInput
	NetworkBorderGroup     pulumi.StringPtrInput
	NetworkInterface       pulumi.StringPtrInput
	PublicIpv4Pool         pulumi.StringPtrInput
	Tags                   pulumi.StringMapInput
	Vpc                    pulumi.BoolPtrInput
}

func (EipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eipArgs)(nil)).Elem()
}

type EipInput interface {
	pulumi.Input

	ToEipOutput() EipOutput
	ToEipOutputWithContext(ctx context.Context) EipOutput
}

func (*Eip) ElementType() reflect.Type {
	return reflect.TypeOf((**Eip)(nil)).Elem()
}

func (i *Eip) ToEipOutput() EipOutput {
	return i.ToEipOutputWithContext(context.Background())
}

func (i *Eip) ToEipOutputWithContext(ctx context.Context) EipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EipOutput)
}

// EipArrayInput is an input type that accepts EipArray and EipArrayOutput values.
// You can construct a concrete instance of `EipArrayInput` via:
//
//	EipArray{ EipArgs{...} }
type EipArrayInput interface {
	pulumi.Input

	ToEipArrayOutput() EipArrayOutput
	ToEipArrayOutputWithContext(context.Context) EipArrayOutput
}

type EipArray []EipInput

func (EipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Eip)(nil)).Elem()
}

func (i EipArray) ToEipArrayOutput() EipArrayOutput {
	return i.ToEipArrayOutputWithContext(context.Background())
}

func (i EipArray) ToEipArrayOutputWithContext(ctx context.Context) EipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EipArrayOutput)
}

// EipMapInput is an input type that accepts EipMap and EipMapOutput values.
// You can construct a concrete instance of `EipMapInput` via:
//
//	EipMap{ "key": EipArgs{...} }
type EipMapInput interface {
	pulumi.Input

	ToEipMapOutput() EipMapOutput
	ToEipMapOutputWithContext(context.Context) EipMapOutput
}

type EipMap map[string]EipInput

func (EipMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Eip)(nil)).Elem()
}

func (i EipMap) ToEipMapOutput() EipMapOutput {
	return i.ToEipMapOutputWithContext(context.Background())
}

func (i EipMap) ToEipMapOutputWithContext(ctx context.Context) EipMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EipMapOutput)
}

type EipOutput struct{ *pulumi.OutputState }

func (EipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Eip)(nil)).Elem()
}

func (o EipOutput) ToEipOutput() EipOutput {
	return o
}

func (o EipOutput) ToEipOutputWithContext(ctx context.Context) EipOutput {
	return o
}

func (o EipOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Eip) pulumi.StringPtrOutput { return v.Address }).(pulumi.StringPtrOutput)
}

func (o EipOutput) AllocationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Eip) pulumi.StringOutput { return v.AllocationId }).(pulumi.StringOutput)
}

func (o EipOutput) AssociateWithPrivateIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Eip) pulumi.StringPtrOutput { return v.AssociateWithPrivateIp }).(pulumi.StringPtrOutput)
}

func (o EipOutput) AssociationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Eip) pulumi.StringOutput { return v.AssociationId }).(pulumi.StringOutput)
}

func (o EipOutput) CarrierIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Eip) pulumi.StringOutput { return v.CarrierIp }).(pulumi.StringOutput)
}

func (o EipOutput) CustomerOwnedIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Eip) pulumi.StringOutput { return v.CustomerOwnedIp }).(pulumi.StringOutput)
}

func (o EipOutput) CustomerOwnedIpv4Pool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Eip) pulumi.StringPtrOutput { return v.CustomerOwnedIpv4Pool }).(pulumi.StringPtrOutput)
}

func (o EipOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *Eip) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

func (o EipOutput) Instance() pulumi.StringOutput {
	return o.ApplyT(func(v *Eip) pulumi.StringOutput { return v.Instance }).(pulumi.StringOutput)
}

func (o EipOutput) NetworkBorderGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *Eip) pulumi.StringOutput { return v.NetworkBorderGroup }).(pulumi.StringOutput)
}

func (o EipOutput) NetworkInterface() pulumi.StringOutput {
	return o.ApplyT(func(v *Eip) pulumi.StringOutput { return v.NetworkInterface }).(pulumi.StringOutput)
}

func (o EipOutput) PrivateDns() pulumi.StringOutput {
	return o.ApplyT(func(v *Eip) pulumi.StringOutput { return v.PrivateDns }).(pulumi.StringOutput)
}

func (o EipOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Eip) pulumi.StringOutput { return v.PrivateIp }).(pulumi.StringOutput)
}

func (o EipOutput) PublicDns() pulumi.StringOutput {
	return o.ApplyT(func(v *Eip) pulumi.StringOutput { return v.PublicDns }).(pulumi.StringOutput)
}

func (o EipOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Eip) pulumi.StringOutput { return v.PublicIp }).(pulumi.StringOutput)
}

func (o EipOutput) PublicIpv4Pool() pulumi.StringOutput {
	return o.ApplyT(func(v *Eip) pulumi.StringOutput { return v.PublicIpv4Pool }).(pulumi.StringOutput)
}

func (o EipOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Eip) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o EipOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Eip) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o EipOutput) Vpc() pulumi.BoolOutput {
	return o.ApplyT(func(v *Eip) pulumi.BoolOutput { return v.Vpc }).(pulumi.BoolOutput)
}

type EipArrayOutput struct{ *pulumi.OutputState }

func (EipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Eip)(nil)).Elem()
}

func (o EipArrayOutput) ToEipArrayOutput() EipArrayOutput {
	return o
}

func (o EipArrayOutput) ToEipArrayOutputWithContext(ctx context.Context) EipArrayOutput {
	return o
}

func (o EipArrayOutput) Index(i pulumi.IntInput) EipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Eip {
		return vs[0].([]*Eip)[vs[1].(int)]
	}).(EipOutput)
}

type EipMapOutput struct{ *pulumi.OutputState }

func (EipMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Eip)(nil)).Elem()
}

func (o EipMapOutput) ToEipMapOutput() EipMapOutput {
	return o
}

func (o EipMapOutput) ToEipMapOutputWithContext(ctx context.Context) EipMapOutput {
	return o
}

func (o EipMapOutput) MapIndex(k pulumi.StringInput) EipOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Eip {
		return vs[0].(map[string]*Eip)[vs[1].(string)]
	}).(EipOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EipInput)(nil)).Elem(), &Eip{})
	pulumi.RegisterInputType(reflect.TypeOf((*EipArrayInput)(nil)).Elem(), EipArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EipMapInput)(nil)).Elem(), EipMap{})
	pulumi.RegisterOutputType(EipOutput{})
	pulumi.RegisterOutputType(EipArrayOutput{})
	pulumi.RegisterOutputType(EipMapOutput{})
}
