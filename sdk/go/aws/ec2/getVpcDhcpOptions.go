// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieve information about an EC2 DHCP Options configuration.
//
// ## Example Usage
// ### Lookup by DHCP Options ID
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ec2.LookupVpcDhcpOptions(ctx, &ec2.LookupVpcDhcpOptionsArgs{
//				DhcpOptionsId: pulumi.StringRef("dopts-12345678"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Lookup by Filter
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ec2.LookupVpcDhcpOptions(ctx, &ec2.LookupVpcDhcpOptionsArgs{
//				Filters: []ec2.GetVpcDhcpOptionsFilter{
//					ec2.GetVpcDhcpOptionsFilter{
//						Name: "key",
//						Values: []string{
//							"domain-name",
//						},
//					},
//					ec2.GetVpcDhcpOptionsFilter{
//						Name: "value",
//						Values: []string{
//							"example.com",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupVpcDhcpOptions(ctx *pulumi.Context, args *LookupVpcDhcpOptionsArgs, opts ...pulumi.InvokeOption) (*LookupVpcDhcpOptionsResult, error) {
	var rv LookupVpcDhcpOptionsResult
	err := ctx.Invoke("aws:ec2/getVpcDhcpOptions:getVpcDhcpOptions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVpcDhcpOptions.
type LookupVpcDhcpOptionsArgs struct {
	// EC2 DHCP Options ID.
	DhcpOptionsId *string `pulumi:"dhcpOptionsId"`
	// List of custom filters as described below.
	Filters []GetVpcDhcpOptionsFilter `pulumi:"filters"`
	// Map of tags assigned to the resource.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getVpcDhcpOptions.
type LookupVpcDhcpOptionsResult struct {
	// ARN of the DHCP Options Set.
	Arn string `pulumi:"arn"`
	// EC2 DHCP Options ID
	DhcpOptionsId string `pulumi:"dhcpOptionsId"`
	// Suffix domain name to used when resolving non Fully Qualified Domain NamesE.g., the `search` value in the `/etc/resolv.conf` file.
	DomainName string `pulumi:"domainName"`
	// List of name servers.
	DomainNameServers []string                  `pulumi:"domainNameServers"`
	Filters           []GetVpcDhcpOptionsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// List of NETBIOS name servers.
	NetbiosNameServers []string `pulumi:"netbiosNameServers"`
	// NetBIOS node type (1, 2, 4, or 8). For more information about these node types, see [RFC 2132](http://www.ietf.org/rfc/rfc2132.txt).
	NetbiosNodeType string `pulumi:"netbiosNodeType"`
	// List of NTP servers.
	NtpServers []string `pulumi:"ntpServers"`
	// ID of the AWS account that owns the DHCP options set.
	OwnerId string `pulumi:"ownerId"`
	// Map of tags assigned to the resource.
	Tags map[string]string `pulumi:"tags"`
}

func LookupVpcDhcpOptionsOutput(ctx *pulumi.Context, args LookupVpcDhcpOptionsOutputArgs, opts ...pulumi.InvokeOption) LookupVpcDhcpOptionsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupVpcDhcpOptionsResult, error) {
			args := v.(LookupVpcDhcpOptionsArgs)
			r, err := LookupVpcDhcpOptions(ctx, &args, opts...)
			var s LookupVpcDhcpOptionsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupVpcDhcpOptionsResultOutput)
}

// A collection of arguments for invoking getVpcDhcpOptions.
type LookupVpcDhcpOptionsOutputArgs struct {
	// EC2 DHCP Options ID.
	DhcpOptionsId pulumi.StringPtrInput `pulumi:"dhcpOptionsId"`
	// List of custom filters as described below.
	Filters GetVpcDhcpOptionsFilterArrayInput `pulumi:"filters"`
	// Map of tags assigned to the resource.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (LookupVpcDhcpOptionsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVpcDhcpOptionsArgs)(nil)).Elem()
}

// A collection of values returned by getVpcDhcpOptions.
type LookupVpcDhcpOptionsResultOutput struct{ *pulumi.OutputState }

func (LookupVpcDhcpOptionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVpcDhcpOptionsResult)(nil)).Elem()
}

func (o LookupVpcDhcpOptionsResultOutput) ToLookupVpcDhcpOptionsResultOutput() LookupVpcDhcpOptionsResultOutput {
	return o
}

func (o LookupVpcDhcpOptionsResultOutput) ToLookupVpcDhcpOptionsResultOutputWithContext(ctx context.Context) LookupVpcDhcpOptionsResultOutput {
	return o
}

// ARN of the DHCP Options Set.
func (o LookupVpcDhcpOptionsResultOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcDhcpOptionsResult) string { return v.Arn }).(pulumi.StringOutput)
}

// EC2 DHCP Options ID
func (o LookupVpcDhcpOptionsResultOutput) DhcpOptionsId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcDhcpOptionsResult) string { return v.DhcpOptionsId }).(pulumi.StringOutput)
}

// Suffix domain name to used when resolving non Fully Qualified Domain NamesE.g., the `search` value in the `/etc/resolv.conf` file.
func (o LookupVpcDhcpOptionsResultOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcDhcpOptionsResult) string { return v.DomainName }).(pulumi.StringOutput)
}

// List of name servers.
func (o LookupVpcDhcpOptionsResultOutput) DomainNameServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVpcDhcpOptionsResult) []string { return v.DomainNameServers }).(pulumi.StringArrayOutput)
}

func (o LookupVpcDhcpOptionsResultOutput) Filters() GetVpcDhcpOptionsFilterArrayOutput {
	return o.ApplyT(func(v LookupVpcDhcpOptionsResult) []GetVpcDhcpOptionsFilter { return v.Filters }).(GetVpcDhcpOptionsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupVpcDhcpOptionsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcDhcpOptionsResult) string { return v.Id }).(pulumi.StringOutput)
}

// List of NETBIOS name servers.
func (o LookupVpcDhcpOptionsResultOutput) NetbiosNameServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVpcDhcpOptionsResult) []string { return v.NetbiosNameServers }).(pulumi.StringArrayOutput)
}

// NetBIOS node type (1, 2, 4, or 8). For more information about these node types, see [RFC 2132](http://www.ietf.org/rfc/rfc2132.txt).
func (o LookupVpcDhcpOptionsResultOutput) NetbiosNodeType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcDhcpOptionsResult) string { return v.NetbiosNodeType }).(pulumi.StringOutput)
}

// List of NTP servers.
func (o LookupVpcDhcpOptionsResultOutput) NtpServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVpcDhcpOptionsResult) []string { return v.NtpServers }).(pulumi.StringArrayOutput)
}

// ID of the AWS account that owns the DHCP options set.
func (o LookupVpcDhcpOptionsResultOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcDhcpOptionsResult) string { return v.OwnerId }).(pulumi.StringOutput)
}

// Map of tags assigned to the resource.
func (o LookupVpcDhcpOptionsResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupVpcDhcpOptionsResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVpcDhcpOptionsResultOutput{})
}
