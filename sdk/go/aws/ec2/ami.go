// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The AMI resource allows the creation and management of a completely-custom
// *Amazon Machine Image* (AMI).
// 
// If you just want to duplicate an existing AMI, possibly copying it to another
// region, it's better to use `aws_ami_copy` instead.
// 
// If you just want to share an existing AMI with another AWS account,
// it's better to use `aws_ami_launch_permission` instead.
type Ami struct {
	s *pulumi.ResourceState
}

// NewAmi registers a new resource with the given unique name, arguments, and options.
func NewAmi(ctx *pulumi.Context,
	name string, args *AmiArgs, opts ...pulumi.ResourceOpt) (*Ami, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["architecture"] = nil
		inputs["description"] = nil
		inputs["ebsBlockDevices"] = nil
		inputs["enaSupport"] = nil
		inputs["ephemeralBlockDevices"] = nil
		inputs["imageLocation"] = nil
		inputs["kernelId"] = nil
		inputs["name"] = nil
		inputs["ramdiskId"] = nil
		inputs["rootDeviceName"] = nil
		inputs["sriovNetSupport"] = nil
		inputs["tags"] = nil
		inputs["virtualizationType"] = nil
	} else {
		inputs["architecture"] = args.Architecture
		inputs["description"] = args.Description
		inputs["ebsBlockDevices"] = args.EbsBlockDevices
		inputs["enaSupport"] = args.EnaSupport
		inputs["ephemeralBlockDevices"] = args.EphemeralBlockDevices
		inputs["imageLocation"] = args.ImageLocation
		inputs["kernelId"] = args.KernelId
		inputs["name"] = args.Name
		inputs["ramdiskId"] = args.RamdiskId
		inputs["rootDeviceName"] = args.RootDeviceName
		inputs["sriovNetSupport"] = args.SriovNetSupport
		inputs["tags"] = args.Tags
		inputs["virtualizationType"] = args.VirtualizationType
	}
	inputs["manageEbsSnapshots"] = nil
	inputs["rootSnapshotId"] = nil
	s, err := ctx.RegisterResource("aws:ec2/ami:Ami", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Ami{s: s}, nil
}

// GetAmi gets an existing Ami resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAmi(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AmiState, opts ...pulumi.ResourceOpt) (*Ami, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["architecture"] = state.Architecture
		inputs["description"] = state.Description
		inputs["ebsBlockDevices"] = state.EbsBlockDevices
		inputs["enaSupport"] = state.EnaSupport
		inputs["ephemeralBlockDevices"] = state.EphemeralBlockDevices
		inputs["imageLocation"] = state.ImageLocation
		inputs["kernelId"] = state.KernelId
		inputs["manageEbsSnapshots"] = state.ManageEbsSnapshots
		inputs["name"] = state.Name
		inputs["ramdiskId"] = state.RamdiskId
		inputs["rootDeviceName"] = state.RootDeviceName
		inputs["rootSnapshotId"] = state.RootSnapshotId
		inputs["sriovNetSupport"] = state.SriovNetSupport
		inputs["tags"] = state.Tags
		inputs["virtualizationType"] = state.VirtualizationType
	}
	s, err := ctx.ReadResource("aws:ec2/ami:Ami", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Ami{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Ami) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Ami) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Machine architecture for created instances. Defaults to "x86_64".
func (r *Ami) Architecture() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["architecture"])
}

// A longer, human-readable description for the AMI.
func (r *Ami) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// Nested block describing an EBS block device that should be
// attached to created instances. The structure of this block is described below.
func (r *Ami) EbsBlockDevices() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["ebsBlockDevices"])
}

// Specifies whether enhanced networking with ENA is enabled. Defaults to `false`.
func (r *Ami) EnaSupport() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enaSupport"])
}

// Nested block describing an ephemeral block device that
// should be attached to created instances. The structure of this block is described below.
func (r *Ami) EphemeralBlockDevices() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["ephemeralBlockDevices"])
}

// Path to an S3 object containing an image manifest, e.g. created
// by the `ec2-upload-bundle` command in the EC2 command line tools.
func (r *Ami) ImageLocation() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["imageLocation"])
}

// The id of the kernel image (AKI) that will be used as the paravirtual
// kernel in created instances.
func (r *Ami) KernelId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["kernelId"])
}

func (r *Ami) ManageEbsSnapshots() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["manageEbsSnapshots"])
}

// A region-unique name for the AMI.
func (r *Ami) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The id of an initrd image (ARI) that will be used when booting the
// created instances.
func (r *Ami) RamdiskId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ramdiskId"])
}

// The name of the root device (for example, `/dev/sda1`, or `/dev/xvda`).
func (r *Ami) RootDeviceName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["rootDeviceName"])
}

// The Snapshot ID for the root volume (for EBS-backed AMIs)
func (r *Ami) RootSnapshotId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["rootSnapshotId"])
}

// When set to "simple" (the default), enables enhanced networking
// for created instances. No other value is supported at this time.
func (r *Ami) SriovNetSupport() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sriovNetSupport"])
}

// A mapping of tags to assign to the resource.
func (r *Ami) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// Keyword to choose what virtualization mode created instances
// will use. Can be either "paravirtual" (the default) or "hvm". The choice of virtualization type
// changes the set of further arguments that are required, as described below.
func (r *Ami) VirtualizationType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["virtualizationType"])
}

// Input properties used for looking up and filtering Ami resources.
type AmiState struct {
	// Machine architecture for created instances. Defaults to "x86_64".
	Architecture interface{}
	// A longer, human-readable description for the AMI.
	Description interface{}
	// Nested block describing an EBS block device that should be
	// attached to created instances. The structure of this block is described below.
	EbsBlockDevices interface{}
	// Specifies whether enhanced networking with ENA is enabled. Defaults to `false`.
	EnaSupport interface{}
	// Nested block describing an ephemeral block device that
	// should be attached to created instances. The structure of this block is described below.
	EphemeralBlockDevices interface{}
	// Path to an S3 object containing an image manifest, e.g. created
	// by the `ec2-upload-bundle` command in the EC2 command line tools.
	ImageLocation interface{}
	// The id of the kernel image (AKI) that will be used as the paravirtual
	// kernel in created instances.
	KernelId interface{}
	ManageEbsSnapshots interface{}
	// A region-unique name for the AMI.
	Name interface{}
	// The id of an initrd image (ARI) that will be used when booting the
	// created instances.
	RamdiskId interface{}
	// The name of the root device (for example, `/dev/sda1`, or `/dev/xvda`).
	RootDeviceName interface{}
	// The Snapshot ID for the root volume (for EBS-backed AMIs)
	RootSnapshotId interface{}
	// When set to "simple" (the default), enables enhanced networking
	// for created instances. No other value is supported at this time.
	SriovNetSupport interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// Keyword to choose what virtualization mode created instances
	// will use. Can be either "paravirtual" (the default) or "hvm". The choice of virtualization type
	// changes the set of further arguments that are required, as described below.
	VirtualizationType interface{}
}

// The set of arguments for constructing a Ami resource.
type AmiArgs struct {
	// Machine architecture for created instances. Defaults to "x86_64".
	Architecture interface{}
	// A longer, human-readable description for the AMI.
	Description interface{}
	// Nested block describing an EBS block device that should be
	// attached to created instances. The structure of this block is described below.
	EbsBlockDevices interface{}
	// Specifies whether enhanced networking with ENA is enabled. Defaults to `false`.
	EnaSupport interface{}
	// Nested block describing an ephemeral block device that
	// should be attached to created instances. The structure of this block is described below.
	EphemeralBlockDevices interface{}
	// Path to an S3 object containing an image manifest, e.g. created
	// by the `ec2-upload-bundle` command in the EC2 command line tools.
	ImageLocation interface{}
	// The id of the kernel image (AKI) that will be used as the paravirtual
	// kernel in created instances.
	KernelId interface{}
	// A region-unique name for the AMI.
	Name interface{}
	// The id of an initrd image (ARI) that will be used when booting the
	// created instances.
	RamdiskId interface{}
	// The name of the root device (for example, `/dev/sda1`, or `/dev/xvda`).
	RootDeviceName interface{}
	// When set to "simple" (the default), enables enhanced networking
	// for created instances. No other value is supported at this time.
	SriovNetSupport interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// Keyword to choose what virtualization mode created instances
	// will use. Can be either "paravirtual" (the default) or "hvm". The choice of virtualization type
	// changes the set of further arguments that are required, as described below.
	VirtualizationType interface{}
}
