// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a way to check whether serial console access is enabled for your AWS account in the current AWS region.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/ec2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ec2.LookupSerialConsoleAccess(ctx, &ec2.LookupSerialConsoleAccessArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSerialConsoleAccess(ctx *pulumi.Context, args *LookupSerialConsoleAccessArgs, opts ...pulumi.InvokeOption) (*LookupSerialConsoleAccessResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSerialConsoleAccessResult
	err := ctx.Invoke("aws:ec2/getSerialConsoleAccess:getSerialConsoleAccess", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSerialConsoleAccess.
type LookupSerialConsoleAccessArgs struct {
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getSerialConsoleAccess.
type LookupSerialConsoleAccessResult struct {
	// Whether or not serial console access is enabled. Returns as `true` or `false`.
	Enabled bool `pulumi:"enabled"`
	// The provider-assigned unique ID for this managed resource.
	Id     string `pulumi:"id"`
	Region string `pulumi:"region"`
}

func LookupSerialConsoleAccessOutput(ctx *pulumi.Context, args LookupSerialConsoleAccessOutputArgs, opts ...pulumi.InvokeOption) LookupSerialConsoleAccessResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSerialConsoleAccessResultOutput, error) {
			args := v.(LookupSerialConsoleAccessArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws:ec2/getSerialConsoleAccess:getSerialConsoleAccess", args, LookupSerialConsoleAccessResultOutput{}, options).(LookupSerialConsoleAccessResultOutput), nil
		}).(LookupSerialConsoleAccessResultOutput)
}

// A collection of arguments for invoking getSerialConsoleAccess.
type LookupSerialConsoleAccessOutputArgs struct {
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (LookupSerialConsoleAccessOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSerialConsoleAccessArgs)(nil)).Elem()
}

// A collection of values returned by getSerialConsoleAccess.
type LookupSerialConsoleAccessResultOutput struct{ *pulumi.OutputState }

func (LookupSerialConsoleAccessResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSerialConsoleAccessResult)(nil)).Elem()
}

func (o LookupSerialConsoleAccessResultOutput) ToLookupSerialConsoleAccessResultOutput() LookupSerialConsoleAccessResultOutput {
	return o
}

func (o LookupSerialConsoleAccessResultOutput) ToLookupSerialConsoleAccessResultOutputWithContext(ctx context.Context) LookupSerialConsoleAccessResultOutput {
	return o
}

// Whether or not serial console access is enabled. Returns as `true` or `false`.
func (o LookupSerialConsoleAccessResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSerialConsoleAccessResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSerialConsoleAccessResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSerialConsoleAccessResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupSerialConsoleAccessResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSerialConsoleAccessResult) string { return v.Region }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSerialConsoleAccessResultOutput{})
}
