// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// `aws_vpc` provides details about a specific VPC.
// 
// This resource can prove useful when a module accepts a vpc id as
// an input variable and needs to, for example, determine the CIDR block of that
// VPC.
func Lookuppc(ctx *pulumi.Context, args *GetVpcArgs) (*GetVpcResult, error) {
	inputs := make(map[string]interface{})
	if args != nil {
		inputs["cidrBlock"] = args.CidrBlock
		inputs["default"] = args.Default
		inputs["dhcpOptionsId"] = args.DhcpOptionsId
		inputs["filters"] = args.Filters
		inputs["id"] = args.Id
		inputs["state"] = args.State
		inputs["tags"] = args.Tags
	}
	outputs, err := ctx.Invoke("aws:ec2/getVpc:getVpc", inputs)
	if err != nil {
		return nil, err
	}
	ret := GetVpcResult{}
	if v, ok := outputs["cidrBlock"]; ok {
		ret.CidrBlock = v
	}
	if v, ok := outputs["default"]; ok {
		ret.Default = v
	}
	if v, ok := outputs["dhcpOptionsId"]; ok {
		ret.DhcpOptionsId = v
	}
	if v, ok := outputs["enableDnsHostnames"]; ok {
		ret.EnableDnsHostnames = v
	}
	if v, ok := outputs["enableDnsSupport"]; ok {
		ret.EnableDnsSupport = v
	}
	if v, ok := outputs["id"]; ok {
		ret.Id = v
	}
	if v, ok := outputs["instanceTenancy"]; ok {
		ret.InstanceTenancy = v
	}
	if v, ok := outputs["ipv6AssociationId"]; ok {
		ret.Ipv6AssociationId = v
	}
	if v, ok := outputs["ipv6CidrBlock"]; ok {
		ret.Ipv6CidrBlock = v
	}
	if v, ok := outputs["state"]; ok {
		ret.State = v
	}
	if v, ok := outputs["tags"]; ok {
		ret.Tags = v
	}
	return &ret, nil
}

// A collection of arguments for invoking getVpc.
type GetVpcArgs struct {
	// The cidr block of the desired VPC.
	CidrBlock interface{}
	// Boolean constraint on whether the desired VPC is
	// the default VPC for the region.
	Default interface{}
	// The DHCP options id of the desired VPC.
	DhcpOptionsId interface{}
	// Custom filter block as described below.
	Filters interface{}
	// The id of the specific VPC to retrieve.
	Id interface{}
	// The current state of the desired VPC.
	// Can be either `"pending"` or `"available"`.
	State interface{}
	// A mapping of tags, each pair of which must exactly match
	// a pair on the desired VPC.
	Tags interface{}
}

// A collection of values returned by getVpc.
type GetVpcResult struct {
	CidrBlock interface{}
	Default interface{}
	DhcpOptionsId interface{}
	// Whether or not the VPC has DNS hostname support
	EnableDnsHostnames interface{}
	// Whether or not the VPC has DNS support
	EnableDnsSupport interface{}
	Id interface{}
	// The allowed tenancy of instances launched into the
	// selected VPC. May be any of `"default"`, `"dedicated"`, or `"host"`.
	InstanceTenancy interface{}
	// The association ID for the IPv6 CIDR block.
	Ipv6AssociationId interface{}
	// The IPv6 CIDR block.
	Ipv6CidrBlock interface{}
	State interface{}
	Tags interface{}
}
