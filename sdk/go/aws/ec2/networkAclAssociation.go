// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an network ACL association resource which allows you to associate your network ACL with any subnet(s).
//
// > **NOTE on Network ACLs and Network ACL Associations:** the provider provides both a standalone network ACL association resource
// and a network ACL resource with a `subnetIds` attribute. Do not use the same subnet ID in both a network ACL
// resource and a network ACL association resource. Doing so will cause a conflict of associations and will overwrite the association.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ec2.NewNetworkAclAssociation(ctx, "main", &ec2.NetworkAclAssociationArgs{
//				NetworkAclId: pulumi.Any(mainAwsNetworkAcl.Id),
//				SubnetId:     pulumi.Any(mainAwsSubnet.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Network ACL associations using the `id`. For example:
//
// ```sh
//
//	$ pulumi import aws:ec2/networkAclAssociation:NetworkAclAssociation main aclassoc-02baf37f20966b3e6
//
// ```
type NetworkAclAssociation struct {
	pulumi.CustomResourceState

	// The ID of the network ACL.
	NetworkAclId pulumi.StringOutput `pulumi:"networkAclId"`
	// The ID of the associated Subnet.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
}

// NewNetworkAclAssociation registers a new resource with the given unique name, arguments, and options.
func NewNetworkAclAssociation(ctx *pulumi.Context,
	name string, args *NetworkAclAssociationArgs, opts ...pulumi.ResourceOption) (*NetworkAclAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkAclId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkAclId'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkAclAssociation
	err := ctx.RegisterResource("aws:ec2/networkAclAssociation:NetworkAclAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkAclAssociation gets an existing NetworkAclAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkAclAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkAclAssociationState, opts ...pulumi.ResourceOption) (*NetworkAclAssociation, error) {
	var resource NetworkAclAssociation
	err := ctx.ReadResource("aws:ec2/networkAclAssociation:NetworkAclAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkAclAssociation resources.
type networkAclAssociationState struct {
	// The ID of the network ACL.
	NetworkAclId *string `pulumi:"networkAclId"`
	// The ID of the associated Subnet.
	SubnetId *string `pulumi:"subnetId"`
}

type NetworkAclAssociationState struct {
	// The ID of the network ACL.
	NetworkAclId pulumi.StringPtrInput
	// The ID of the associated Subnet.
	SubnetId pulumi.StringPtrInput
}

func (NetworkAclAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAclAssociationState)(nil)).Elem()
}

type networkAclAssociationArgs struct {
	// The ID of the network ACL.
	NetworkAclId string `pulumi:"networkAclId"`
	// The ID of the associated Subnet.
	SubnetId string `pulumi:"subnetId"`
}

// The set of arguments for constructing a NetworkAclAssociation resource.
type NetworkAclAssociationArgs struct {
	// The ID of the network ACL.
	NetworkAclId pulumi.StringInput
	// The ID of the associated Subnet.
	SubnetId pulumi.StringInput
}

func (NetworkAclAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAclAssociationArgs)(nil)).Elem()
}

type NetworkAclAssociationInput interface {
	pulumi.Input

	ToNetworkAclAssociationOutput() NetworkAclAssociationOutput
	ToNetworkAclAssociationOutputWithContext(ctx context.Context) NetworkAclAssociationOutput
}

func (*NetworkAclAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkAclAssociation)(nil)).Elem()
}

func (i *NetworkAclAssociation) ToNetworkAclAssociationOutput() NetworkAclAssociationOutput {
	return i.ToNetworkAclAssociationOutputWithContext(context.Background())
}

func (i *NetworkAclAssociation) ToNetworkAclAssociationOutputWithContext(ctx context.Context) NetworkAclAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclAssociationOutput)
}

// NetworkAclAssociationArrayInput is an input type that accepts NetworkAclAssociationArray and NetworkAclAssociationArrayOutput values.
// You can construct a concrete instance of `NetworkAclAssociationArrayInput` via:
//
//	NetworkAclAssociationArray{ NetworkAclAssociationArgs{...} }
type NetworkAclAssociationArrayInput interface {
	pulumi.Input

	ToNetworkAclAssociationArrayOutput() NetworkAclAssociationArrayOutput
	ToNetworkAclAssociationArrayOutputWithContext(context.Context) NetworkAclAssociationArrayOutput
}

type NetworkAclAssociationArray []NetworkAclAssociationInput

func (NetworkAclAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkAclAssociation)(nil)).Elem()
}

func (i NetworkAclAssociationArray) ToNetworkAclAssociationArrayOutput() NetworkAclAssociationArrayOutput {
	return i.ToNetworkAclAssociationArrayOutputWithContext(context.Background())
}

func (i NetworkAclAssociationArray) ToNetworkAclAssociationArrayOutputWithContext(ctx context.Context) NetworkAclAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclAssociationArrayOutput)
}

// NetworkAclAssociationMapInput is an input type that accepts NetworkAclAssociationMap and NetworkAclAssociationMapOutput values.
// You can construct a concrete instance of `NetworkAclAssociationMapInput` via:
//
//	NetworkAclAssociationMap{ "key": NetworkAclAssociationArgs{...} }
type NetworkAclAssociationMapInput interface {
	pulumi.Input

	ToNetworkAclAssociationMapOutput() NetworkAclAssociationMapOutput
	ToNetworkAclAssociationMapOutputWithContext(context.Context) NetworkAclAssociationMapOutput
}

type NetworkAclAssociationMap map[string]NetworkAclAssociationInput

func (NetworkAclAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkAclAssociation)(nil)).Elem()
}

func (i NetworkAclAssociationMap) ToNetworkAclAssociationMapOutput() NetworkAclAssociationMapOutput {
	return i.ToNetworkAclAssociationMapOutputWithContext(context.Background())
}

func (i NetworkAclAssociationMap) ToNetworkAclAssociationMapOutputWithContext(ctx context.Context) NetworkAclAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclAssociationMapOutput)
}

type NetworkAclAssociationOutput struct{ *pulumi.OutputState }

func (NetworkAclAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkAclAssociation)(nil)).Elem()
}

func (o NetworkAclAssociationOutput) ToNetworkAclAssociationOutput() NetworkAclAssociationOutput {
	return o
}

func (o NetworkAclAssociationOutput) ToNetworkAclAssociationOutputWithContext(ctx context.Context) NetworkAclAssociationOutput {
	return o
}

// The ID of the network ACL.
func (o NetworkAclAssociationOutput) NetworkAclId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkAclAssociation) pulumi.StringOutput { return v.NetworkAclId }).(pulumi.StringOutput)
}

// The ID of the associated Subnet.
func (o NetworkAclAssociationOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkAclAssociation) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

type NetworkAclAssociationArrayOutput struct{ *pulumi.OutputState }

func (NetworkAclAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkAclAssociation)(nil)).Elem()
}

func (o NetworkAclAssociationArrayOutput) ToNetworkAclAssociationArrayOutput() NetworkAclAssociationArrayOutput {
	return o
}

func (o NetworkAclAssociationArrayOutput) ToNetworkAclAssociationArrayOutputWithContext(ctx context.Context) NetworkAclAssociationArrayOutput {
	return o
}

func (o NetworkAclAssociationArrayOutput) Index(i pulumi.IntInput) NetworkAclAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkAclAssociation {
		return vs[0].([]*NetworkAclAssociation)[vs[1].(int)]
	}).(NetworkAclAssociationOutput)
}

type NetworkAclAssociationMapOutput struct{ *pulumi.OutputState }

func (NetworkAclAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkAclAssociation)(nil)).Elem()
}

func (o NetworkAclAssociationMapOutput) ToNetworkAclAssociationMapOutput() NetworkAclAssociationMapOutput {
	return o
}

func (o NetworkAclAssociationMapOutput) ToNetworkAclAssociationMapOutputWithContext(ctx context.Context) NetworkAclAssociationMapOutput {
	return o
}

func (o NetworkAclAssociationMapOutput) MapIndex(k pulumi.StringInput) NetworkAclAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkAclAssociation {
		return vs[0].(map[string]*NetworkAclAssociation)[vs[1].(string)]
	}).(NetworkAclAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclAssociationInput)(nil)).Elem(), &NetworkAclAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclAssociationArrayInput)(nil)).Elem(), NetworkAclAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclAssociationMapInput)(nil)).Elem(), NetworkAclAssociationMap{})
	pulumi.RegisterOutputType(NetworkAclAssociationOutput{})
	pulumi.RegisterOutputType(NetworkAclAssociationArrayOutput{})
	pulumi.RegisterOutputType(NetworkAclAssociationMapOutput{})
}
