// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to manage EC2 Fleets.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ec2.NewFleet(ctx, "example", &ec2.FleetArgs{
//				LaunchTemplateConfigs: ec2.FleetLaunchTemplateConfigArray{
//					&ec2.FleetLaunchTemplateConfigArgs{
//						LaunchTemplateSpecification: &ec2.FleetLaunchTemplateConfigLaunchTemplateSpecificationArgs{
//							LaunchTemplateId: pulumi.Any(aws_launch_template.Example.Id),
//							Version:          pulumi.Any(aws_launch_template.Example.Latest_version),
//						},
//					},
//				},
//				TargetCapacitySpecification: &ec2.FleetTargetCapacitySpecificationArgs{
//					DefaultTargetCapacityType: pulumi.String("spot"),
//					TotalTargetCapacity:       pulumi.Int(5),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import `aws_ec2_fleet` using the Fleet identifier. For example:
//
// ```sh
//
//	$ pulumi import aws:ec2/fleet:Fleet example fleet-b9b55d27-c5fc-41ac-a6f3-48fcc91f080c
//
// ```
type Fleet struct {
	pulumi.CustomResourceState

	// The ARN of the fleet
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Reserved.
	Context pulumi.StringPtrOutput `pulumi:"context"`
	// Whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2. Valid values: `no-termination`, `termination`. Defaults to `termination`. Supported only for fleets of type `maintain`.
	ExcessCapacityTerminationPolicy pulumi.StringPtrOutput `pulumi:"excessCapacityTerminationPolicy"`
	// Information about the instances that were launched by the fleet. Available only when `type` is set to `instant`.
	FleetInstanceSets FleetFleetInstanceSetArrayOutput `pulumi:"fleetInstanceSets"`
	// The state of the EC2 Fleet.
	FleetState pulumi.StringOutput `pulumi:"fleetState"`
	// The number of units fulfilled by this request compared to the set target capacity.
	FulfilledCapacity pulumi.Float64Output `pulumi:"fulfilledCapacity"`
	// The number of units fulfilled by this request compared to the set target On-Demand capacity.
	FulfilledOnDemandCapacity pulumi.Float64Output `pulumi:"fulfilledOnDemandCapacity"`
	// Nested argument containing EC2 Launch Template configurations. Defined below.
	LaunchTemplateConfigs FleetLaunchTemplateConfigArrayOutput `pulumi:"launchTemplateConfigs"`
	// Nested argument containing On-Demand configurations. Defined below.
	OnDemandOptions FleetOnDemandOptionsPtrOutput `pulumi:"onDemandOptions"`
	// Whether EC2 Fleet should replace unhealthy instances. Defaults to `false`. Supported only for fleets of type `maintain`.
	ReplaceUnhealthyInstances pulumi.BoolPtrOutput `pulumi:"replaceUnhealthyInstances"`
	// Nested argument containing Spot configurations. Defined below.
	SpotOptions FleetSpotOptionsPtrOutput `pulumi:"spotOptions"`
	// Map of Fleet tags. To tag instances at launch, specify the tags in the Launch Template. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// Nested argument containing target capacity configurations. Defined below.
	TargetCapacitySpecification FleetTargetCapacitySpecificationOutput `pulumi:"targetCapacitySpecification"`
	// Whether to terminate instances for an EC2 Fleet if it is deleted successfully. Defaults to `false`.
	TerminateInstances pulumi.BoolPtrOutput `pulumi:"terminateInstances"`
	// Whether running instances should be terminated when the EC2 Fleet expires. Defaults to `false`.
	TerminateInstancesWithExpiration pulumi.BoolPtrOutput `pulumi:"terminateInstancesWithExpiration"`
	// The type of request. Indicates whether the EC2 Fleet only requests the target capacity, or also attempts to maintain it. Valid values: `maintain`, `request`, `instant`. Defaults to `maintain`.
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// The start date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
	ValidFrom pulumi.StringPtrOutput `pulumi:"validFrom"`
	// The end date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new EC2 Fleet requests are placed or able to fulfill the request. If no value is specified, the request remains until you cancel it.
	ValidUntil pulumi.StringPtrOutput `pulumi:"validUntil"`
}

// NewFleet registers a new resource with the given unique name, arguments, and options.
func NewFleet(ctx *pulumi.Context,
	name string, args *FleetArgs, opts ...pulumi.ResourceOption) (*Fleet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LaunchTemplateConfigs == nil {
		return nil, errors.New("invalid value for required argument 'LaunchTemplateConfigs'")
	}
	if args.TargetCapacitySpecification == nil {
		return nil, errors.New("invalid value for required argument 'TargetCapacitySpecification'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"tagsAll",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Fleet
	err := ctx.RegisterResource("aws:ec2/fleet:Fleet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFleet gets an existing Fleet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFleet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FleetState, opts ...pulumi.ResourceOption) (*Fleet, error) {
	var resource Fleet
	err := ctx.ReadResource("aws:ec2/fleet:Fleet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Fleet resources.
type fleetState struct {
	// The ARN of the fleet
	Arn *string `pulumi:"arn"`
	// Reserved.
	Context *string `pulumi:"context"`
	// Whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2. Valid values: `no-termination`, `termination`. Defaults to `termination`. Supported only for fleets of type `maintain`.
	ExcessCapacityTerminationPolicy *string `pulumi:"excessCapacityTerminationPolicy"`
	// Information about the instances that were launched by the fleet. Available only when `type` is set to `instant`.
	FleetInstanceSets []FleetFleetInstanceSet `pulumi:"fleetInstanceSets"`
	// The state of the EC2 Fleet.
	FleetState *string `pulumi:"fleetState"`
	// The number of units fulfilled by this request compared to the set target capacity.
	FulfilledCapacity *float64 `pulumi:"fulfilledCapacity"`
	// The number of units fulfilled by this request compared to the set target On-Demand capacity.
	FulfilledOnDemandCapacity *float64 `pulumi:"fulfilledOnDemandCapacity"`
	// Nested argument containing EC2 Launch Template configurations. Defined below.
	LaunchTemplateConfigs []FleetLaunchTemplateConfig `pulumi:"launchTemplateConfigs"`
	// Nested argument containing On-Demand configurations. Defined below.
	OnDemandOptions *FleetOnDemandOptions `pulumi:"onDemandOptions"`
	// Whether EC2 Fleet should replace unhealthy instances. Defaults to `false`. Supported only for fleets of type `maintain`.
	ReplaceUnhealthyInstances *bool `pulumi:"replaceUnhealthyInstances"`
	// Nested argument containing Spot configurations. Defined below.
	SpotOptions *FleetSpotOptions `pulumi:"spotOptions"`
	// Map of Fleet tags. To tag instances at launch, specify the tags in the Launch Template. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Nested argument containing target capacity configurations. Defined below.
	TargetCapacitySpecification *FleetTargetCapacitySpecification `pulumi:"targetCapacitySpecification"`
	// Whether to terminate instances for an EC2 Fleet if it is deleted successfully. Defaults to `false`.
	TerminateInstances *bool `pulumi:"terminateInstances"`
	// Whether running instances should be terminated when the EC2 Fleet expires. Defaults to `false`.
	TerminateInstancesWithExpiration *bool `pulumi:"terminateInstancesWithExpiration"`
	// The type of request. Indicates whether the EC2 Fleet only requests the target capacity, or also attempts to maintain it. Valid values: `maintain`, `request`, `instant`. Defaults to `maintain`.
	Type *string `pulumi:"type"`
	// The start date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
	ValidFrom *string `pulumi:"validFrom"`
	// The end date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new EC2 Fleet requests are placed or able to fulfill the request. If no value is specified, the request remains until you cancel it.
	ValidUntil *string `pulumi:"validUntil"`
}

type FleetState struct {
	// The ARN of the fleet
	Arn pulumi.StringPtrInput
	// Reserved.
	Context pulumi.StringPtrInput
	// Whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2. Valid values: `no-termination`, `termination`. Defaults to `termination`. Supported only for fleets of type `maintain`.
	ExcessCapacityTerminationPolicy pulumi.StringPtrInput
	// Information about the instances that were launched by the fleet. Available only when `type` is set to `instant`.
	FleetInstanceSets FleetFleetInstanceSetArrayInput
	// The state of the EC2 Fleet.
	FleetState pulumi.StringPtrInput
	// The number of units fulfilled by this request compared to the set target capacity.
	FulfilledCapacity pulumi.Float64PtrInput
	// The number of units fulfilled by this request compared to the set target On-Demand capacity.
	FulfilledOnDemandCapacity pulumi.Float64PtrInput
	// Nested argument containing EC2 Launch Template configurations. Defined below.
	LaunchTemplateConfigs FleetLaunchTemplateConfigArrayInput
	// Nested argument containing On-Demand configurations. Defined below.
	OnDemandOptions FleetOnDemandOptionsPtrInput
	// Whether EC2 Fleet should replace unhealthy instances. Defaults to `false`. Supported only for fleets of type `maintain`.
	ReplaceUnhealthyInstances pulumi.BoolPtrInput
	// Nested argument containing Spot configurations. Defined below.
	SpotOptions FleetSpotOptionsPtrInput
	// Map of Fleet tags. To tag instances at launch, specify the tags in the Launch Template. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
	// Nested argument containing target capacity configurations. Defined below.
	TargetCapacitySpecification FleetTargetCapacitySpecificationPtrInput
	// Whether to terminate instances for an EC2 Fleet if it is deleted successfully. Defaults to `false`.
	TerminateInstances pulumi.BoolPtrInput
	// Whether running instances should be terminated when the EC2 Fleet expires. Defaults to `false`.
	TerminateInstancesWithExpiration pulumi.BoolPtrInput
	// The type of request. Indicates whether the EC2 Fleet only requests the target capacity, or also attempts to maintain it. Valid values: `maintain`, `request`, `instant`. Defaults to `maintain`.
	Type pulumi.StringPtrInput
	// The start date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
	ValidFrom pulumi.StringPtrInput
	// The end date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new EC2 Fleet requests are placed or able to fulfill the request. If no value is specified, the request remains until you cancel it.
	ValidUntil pulumi.StringPtrInput
}

func (FleetState) ElementType() reflect.Type {
	return reflect.TypeOf((*fleetState)(nil)).Elem()
}

type fleetArgs struct {
	// Reserved.
	Context *string `pulumi:"context"`
	// Whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2. Valid values: `no-termination`, `termination`. Defaults to `termination`. Supported only for fleets of type `maintain`.
	ExcessCapacityTerminationPolicy *string `pulumi:"excessCapacityTerminationPolicy"`
	// Information about the instances that were launched by the fleet. Available only when `type` is set to `instant`.
	FleetInstanceSets []FleetFleetInstanceSet `pulumi:"fleetInstanceSets"`
	// The state of the EC2 Fleet.
	FleetState *string `pulumi:"fleetState"`
	// The number of units fulfilled by this request compared to the set target capacity.
	FulfilledCapacity *float64 `pulumi:"fulfilledCapacity"`
	// The number of units fulfilled by this request compared to the set target On-Demand capacity.
	FulfilledOnDemandCapacity *float64 `pulumi:"fulfilledOnDemandCapacity"`
	// Nested argument containing EC2 Launch Template configurations. Defined below.
	LaunchTemplateConfigs []FleetLaunchTemplateConfig `pulumi:"launchTemplateConfigs"`
	// Nested argument containing On-Demand configurations. Defined below.
	OnDemandOptions *FleetOnDemandOptions `pulumi:"onDemandOptions"`
	// Whether EC2 Fleet should replace unhealthy instances. Defaults to `false`. Supported only for fleets of type `maintain`.
	ReplaceUnhealthyInstances *bool `pulumi:"replaceUnhealthyInstances"`
	// Nested argument containing Spot configurations. Defined below.
	SpotOptions *FleetSpotOptions `pulumi:"spotOptions"`
	// Map of Fleet tags. To tag instances at launch, specify the tags in the Launch Template. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Nested argument containing target capacity configurations. Defined below.
	TargetCapacitySpecification FleetTargetCapacitySpecification `pulumi:"targetCapacitySpecification"`
	// Whether to terminate instances for an EC2 Fleet if it is deleted successfully. Defaults to `false`.
	TerminateInstances *bool `pulumi:"terminateInstances"`
	// Whether running instances should be terminated when the EC2 Fleet expires. Defaults to `false`.
	TerminateInstancesWithExpiration *bool `pulumi:"terminateInstancesWithExpiration"`
	// The type of request. Indicates whether the EC2 Fleet only requests the target capacity, or also attempts to maintain it. Valid values: `maintain`, `request`, `instant`. Defaults to `maintain`.
	Type *string `pulumi:"type"`
	// The start date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
	ValidFrom *string `pulumi:"validFrom"`
	// The end date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new EC2 Fleet requests are placed or able to fulfill the request. If no value is specified, the request remains until you cancel it.
	ValidUntil *string `pulumi:"validUntil"`
}

// The set of arguments for constructing a Fleet resource.
type FleetArgs struct {
	// Reserved.
	Context pulumi.StringPtrInput
	// Whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2. Valid values: `no-termination`, `termination`. Defaults to `termination`. Supported only for fleets of type `maintain`.
	ExcessCapacityTerminationPolicy pulumi.StringPtrInput
	// Information about the instances that were launched by the fleet. Available only when `type` is set to `instant`.
	FleetInstanceSets FleetFleetInstanceSetArrayInput
	// The state of the EC2 Fleet.
	FleetState pulumi.StringPtrInput
	// The number of units fulfilled by this request compared to the set target capacity.
	FulfilledCapacity pulumi.Float64PtrInput
	// The number of units fulfilled by this request compared to the set target On-Demand capacity.
	FulfilledOnDemandCapacity pulumi.Float64PtrInput
	// Nested argument containing EC2 Launch Template configurations. Defined below.
	LaunchTemplateConfigs FleetLaunchTemplateConfigArrayInput
	// Nested argument containing On-Demand configurations. Defined below.
	OnDemandOptions FleetOnDemandOptionsPtrInput
	// Whether EC2 Fleet should replace unhealthy instances. Defaults to `false`. Supported only for fleets of type `maintain`.
	ReplaceUnhealthyInstances pulumi.BoolPtrInput
	// Nested argument containing Spot configurations. Defined below.
	SpotOptions FleetSpotOptionsPtrInput
	// Map of Fleet tags. To tag instances at launch, specify the tags in the Launch Template. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Nested argument containing target capacity configurations. Defined below.
	TargetCapacitySpecification FleetTargetCapacitySpecificationInput
	// Whether to terminate instances for an EC2 Fleet if it is deleted successfully. Defaults to `false`.
	TerminateInstances pulumi.BoolPtrInput
	// Whether running instances should be terminated when the EC2 Fleet expires. Defaults to `false`.
	TerminateInstancesWithExpiration pulumi.BoolPtrInput
	// The type of request. Indicates whether the EC2 Fleet only requests the target capacity, or also attempts to maintain it. Valid values: `maintain`, `request`, `instant`. Defaults to `maintain`.
	Type pulumi.StringPtrInput
	// The start date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
	ValidFrom pulumi.StringPtrInput
	// The end date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new EC2 Fleet requests are placed or able to fulfill the request. If no value is specified, the request remains until you cancel it.
	ValidUntil pulumi.StringPtrInput
}

func (FleetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fleetArgs)(nil)).Elem()
}

type FleetInput interface {
	pulumi.Input

	ToFleetOutput() FleetOutput
	ToFleetOutputWithContext(ctx context.Context) FleetOutput
}

func (*Fleet) ElementType() reflect.Type {
	return reflect.TypeOf((**Fleet)(nil)).Elem()
}

func (i *Fleet) ToFleetOutput() FleetOutput {
	return i.ToFleetOutputWithContext(context.Background())
}

func (i *Fleet) ToFleetOutputWithContext(ctx context.Context) FleetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetOutput)
}

// FleetArrayInput is an input type that accepts FleetArray and FleetArrayOutput values.
// You can construct a concrete instance of `FleetArrayInput` via:
//
//	FleetArray{ FleetArgs{...} }
type FleetArrayInput interface {
	pulumi.Input

	ToFleetArrayOutput() FleetArrayOutput
	ToFleetArrayOutputWithContext(context.Context) FleetArrayOutput
}

type FleetArray []FleetInput

func (FleetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Fleet)(nil)).Elem()
}

func (i FleetArray) ToFleetArrayOutput() FleetArrayOutput {
	return i.ToFleetArrayOutputWithContext(context.Background())
}

func (i FleetArray) ToFleetArrayOutputWithContext(ctx context.Context) FleetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetArrayOutput)
}

// FleetMapInput is an input type that accepts FleetMap and FleetMapOutput values.
// You can construct a concrete instance of `FleetMapInput` via:
//
//	FleetMap{ "key": FleetArgs{...} }
type FleetMapInput interface {
	pulumi.Input

	ToFleetMapOutput() FleetMapOutput
	ToFleetMapOutputWithContext(context.Context) FleetMapOutput
}

type FleetMap map[string]FleetInput

func (FleetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Fleet)(nil)).Elem()
}

func (i FleetMap) ToFleetMapOutput() FleetMapOutput {
	return i.ToFleetMapOutputWithContext(context.Background())
}

func (i FleetMap) ToFleetMapOutputWithContext(ctx context.Context) FleetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetMapOutput)
}

type FleetOutput struct{ *pulumi.OutputState }

func (FleetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Fleet)(nil)).Elem()
}

func (o FleetOutput) ToFleetOutput() FleetOutput {
	return o
}

func (o FleetOutput) ToFleetOutputWithContext(ctx context.Context) FleetOutput {
	return o
}

// The ARN of the fleet
func (o FleetOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Reserved.
func (o FleetOutput) Context() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringPtrOutput { return v.Context }).(pulumi.StringPtrOutput)
}

// Whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2. Valid values: `no-termination`, `termination`. Defaults to `termination`. Supported only for fleets of type `maintain`.
func (o FleetOutput) ExcessCapacityTerminationPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringPtrOutput { return v.ExcessCapacityTerminationPolicy }).(pulumi.StringPtrOutput)
}

// Information about the instances that were launched by the fleet. Available only when `type` is set to `instant`.
func (o FleetOutput) FleetInstanceSets() FleetFleetInstanceSetArrayOutput {
	return o.ApplyT(func(v *Fleet) FleetFleetInstanceSetArrayOutput { return v.FleetInstanceSets }).(FleetFleetInstanceSetArrayOutput)
}

// The state of the EC2 Fleet.
func (o FleetOutput) FleetState() pulumi.StringOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringOutput { return v.FleetState }).(pulumi.StringOutput)
}

// The number of units fulfilled by this request compared to the set target capacity.
func (o FleetOutput) FulfilledCapacity() pulumi.Float64Output {
	return o.ApplyT(func(v *Fleet) pulumi.Float64Output { return v.FulfilledCapacity }).(pulumi.Float64Output)
}

// The number of units fulfilled by this request compared to the set target On-Demand capacity.
func (o FleetOutput) FulfilledOnDemandCapacity() pulumi.Float64Output {
	return o.ApplyT(func(v *Fleet) pulumi.Float64Output { return v.FulfilledOnDemandCapacity }).(pulumi.Float64Output)
}

// Nested argument containing EC2 Launch Template configurations. Defined below.
func (o FleetOutput) LaunchTemplateConfigs() FleetLaunchTemplateConfigArrayOutput {
	return o.ApplyT(func(v *Fleet) FleetLaunchTemplateConfigArrayOutput { return v.LaunchTemplateConfigs }).(FleetLaunchTemplateConfigArrayOutput)
}

// Nested argument containing On-Demand configurations. Defined below.
func (o FleetOutput) OnDemandOptions() FleetOnDemandOptionsPtrOutput {
	return o.ApplyT(func(v *Fleet) FleetOnDemandOptionsPtrOutput { return v.OnDemandOptions }).(FleetOnDemandOptionsPtrOutput)
}

// Whether EC2 Fleet should replace unhealthy instances. Defaults to `false`. Supported only for fleets of type `maintain`.
func (o FleetOutput) ReplaceUnhealthyInstances() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Fleet) pulumi.BoolPtrOutput { return v.ReplaceUnhealthyInstances }).(pulumi.BoolPtrOutput)
}

// Nested argument containing Spot configurations. Defined below.
func (o FleetOutput) SpotOptions() FleetSpotOptionsPtrOutput {
	return o.ApplyT(func(v *Fleet) FleetSpotOptionsPtrOutput { return v.SpotOptions }).(FleetSpotOptionsPtrOutput)
}

// Map of Fleet tags. To tag instances at launch, specify the tags in the Launch Template. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o FleetOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o FleetOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// Nested argument containing target capacity configurations. Defined below.
func (o FleetOutput) TargetCapacitySpecification() FleetTargetCapacitySpecificationOutput {
	return o.ApplyT(func(v *Fleet) FleetTargetCapacitySpecificationOutput { return v.TargetCapacitySpecification }).(FleetTargetCapacitySpecificationOutput)
}

// Whether to terminate instances for an EC2 Fleet if it is deleted successfully. Defaults to `false`.
func (o FleetOutput) TerminateInstances() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Fleet) pulumi.BoolPtrOutput { return v.TerminateInstances }).(pulumi.BoolPtrOutput)
}

// Whether running instances should be terminated when the EC2 Fleet expires. Defaults to `false`.
func (o FleetOutput) TerminateInstancesWithExpiration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Fleet) pulumi.BoolPtrOutput { return v.TerminateInstancesWithExpiration }).(pulumi.BoolPtrOutput)
}

// The type of request. Indicates whether the EC2 Fleet only requests the target capacity, or also attempts to maintain it. Valid values: `maintain`, `request`, `instant`. Defaults to `maintain`.
func (o FleetOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

// The start date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
func (o FleetOutput) ValidFrom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringPtrOutput { return v.ValidFrom }).(pulumi.StringPtrOutput)
}

// The end date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new EC2 Fleet requests are placed or able to fulfill the request. If no value is specified, the request remains until you cancel it.
func (o FleetOutput) ValidUntil() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringPtrOutput { return v.ValidUntil }).(pulumi.StringPtrOutput)
}

type FleetArrayOutput struct{ *pulumi.OutputState }

func (FleetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Fleet)(nil)).Elem()
}

func (o FleetArrayOutput) ToFleetArrayOutput() FleetArrayOutput {
	return o
}

func (o FleetArrayOutput) ToFleetArrayOutputWithContext(ctx context.Context) FleetArrayOutput {
	return o
}

func (o FleetArrayOutput) Index(i pulumi.IntInput) FleetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Fleet {
		return vs[0].([]*Fleet)[vs[1].(int)]
	}).(FleetOutput)
}

type FleetMapOutput struct{ *pulumi.OutputState }

func (FleetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Fleet)(nil)).Elem()
}

func (o FleetMapOutput) ToFleetMapOutput() FleetMapOutput {
	return o
}

func (o FleetMapOutput) ToFleetMapOutputWithContext(ctx context.Context) FleetMapOutput {
	return o
}

func (o FleetMapOutput) MapIndex(k pulumi.StringInput) FleetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Fleet {
		return vs[0].(map[string]*Fleet)[vs[1].(string)]
	}).(FleetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FleetInput)(nil)).Elem(), &Fleet{})
	pulumi.RegisterInputType(reflect.TypeOf((*FleetArrayInput)(nil)).Elem(), FleetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FleetMapInput)(nil)).Elem(), FleetMap{})
	pulumi.RegisterOutputType(FleetOutput{})
	pulumi.RegisterOutputType(FleetArrayOutput{})
	pulumi.RegisterOutputType(FleetMapOutput{})
}
