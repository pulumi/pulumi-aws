// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource to manage EC2 Fleets.
type Fleet struct {
	s *pulumi.ResourceState
}

// NewFleet registers a new resource with the given unique name, arguments, and options.
func NewFleet(ctx *pulumi.Context,
	name string, args *FleetArgs, opts ...pulumi.ResourceOpt) (*Fleet, error) {
	if args == nil || args.LaunchTemplateConfig == nil {
		return nil, errors.New("missing required argument 'LaunchTemplateConfig'")
	}
	if args == nil || args.TargetCapacitySpecification == nil {
		return nil, errors.New("missing required argument 'TargetCapacitySpecification'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["excessCapacityTerminationPolicy"] = nil
		inputs["launchTemplateConfig"] = nil
		inputs["onDemandOptions"] = nil
		inputs["replaceUnhealthyInstances"] = nil
		inputs["spotOptions"] = nil
		inputs["tags"] = nil
		inputs["targetCapacitySpecification"] = nil
		inputs["terminateInstances"] = nil
		inputs["terminateInstancesWithExpiration"] = nil
		inputs["type"] = nil
	} else {
		inputs["excessCapacityTerminationPolicy"] = args.ExcessCapacityTerminationPolicy
		inputs["launchTemplateConfig"] = args.LaunchTemplateConfig
		inputs["onDemandOptions"] = args.OnDemandOptions
		inputs["replaceUnhealthyInstances"] = args.ReplaceUnhealthyInstances
		inputs["spotOptions"] = args.SpotOptions
		inputs["tags"] = args.Tags
		inputs["targetCapacitySpecification"] = args.TargetCapacitySpecification
		inputs["terminateInstances"] = args.TerminateInstances
		inputs["terminateInstancesWithExpiration"] = args.TerminateInstancesWithExpiration
		inputs["type"] = args.Type
	}
	s, err := ctx.RegisterResource("aws:ec2/fleet:Fleet", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Fleet{s: s}, nil
}

// GetFleet gets an existing Fleet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFleet(ctx *pulumi.Context,
	name string, id pulumi.ID, state *FleetState, opts ...pulumi.ResourceOpt) (*Fleet, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["excessCapacityTerminationPolicy"] = state.ExcessCapacityTerminationPolicy
		inputs["launchTemplateConfig"] = state.LaunchTemplateConfig
		inputs["onDemandOptions"] = state.OnDemandOptions
		inputs["replaceUnhealthyInstances"] = state.ReplaceUnhealthyInstances
		inputs["spotOptions"] = state.SpotOptions
		inputs["tags"] = state.Tags
		inputs["targetCapacitySpecification"] = state.TargetCapacitySpecification
		inputs["terminateInstances"] = state.TerminateInstances
		inputs["terminateInstancesWithExpiration"] = state.TerminateInstancesWithExpiration
		inputs["type"] = state.Type
	}
	s, err := ctx.ReadResource("aws:ec2/fleet:Fleet", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Fleet{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Fleet) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Fleet) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2. Valid values: `no-termination`, `termination`. Defaults to `termination`.
func (r *Fleet) ExcessCapacityTerminationPolicy() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["excessCapacityTerminationPolicy"])
}

// Nested argument containing EC2 Launch Template configurations. Defined below.
func (r *Fleet) LaunchTemplateConfig() *pulumi.Output {
	return r.s.State["launchTemplateConfig"]
}

// Nested argument containing On-Demand configurations. Defined below.
func (r *Fleet) OnDemandOptions() *pulumi.Output {
	return r.s.State["onDemandOptions"]
}

// Whether EC2 Fleet should replace unhealthy instances. Defaults to `false`.
func (r *Fleet) ReplaceUnhealthyInstances() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["replaceUnhealthyInstances"])
}

// Nested argument containing Spot configurations. Defined below.
func (r *Fleet) SpotOptions() *pulumi.Output {
	return r.s.State["spotOptions"]
}

// Map of Fleet tags. To tag instances at launch, specify the tags in the Launch Template.
func (r *Fleet) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// Nested argument containing target capacity configurations. Defined below.
func (r *Fleet) TargetCapacitySpecification() *pulumi.Output {
	return r.s.State["targetCapacitySpecification"]
}

// Whether to terminate instances for an EC2 Fleet if it is deleted successfully. Defaults to `false`.
func (r *Fleet) TerminateInstances() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["terminateInstances"])
}

// Whether running instances should be terminated when the EC2 Fleet expires. Defaults to `false`.
func (r *Fleet) TerminateInstancesWithExpiration() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["terminateInstancesWithExpiration"])
}

// The type of request. Indicates whether the EC2 Fleet only requests the target capacity, or also attempts to maintain it. Valid values: `maintain`, `request`. Defaults to `maintain`.
func (r *Fleet) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

// Input properties used for looking up and filtering Fleet resources.
type FleetState struct {
	// Whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2. Valid values: `no-termination`, `termination`. Defaults to `termination`.
	ExcessCapacityTerminationPolicy interface{}
	// Nested argument containing EC2 Launch Template configurations. Defined below.
	LaunchTemplateConfig interface{}
	// Nested argument containing On-Demand configurations. Defined below.
	OnDemandOptions interface{}
	// Whether EC2 Fleet should replace unhealthy instances. Defaults to `false`.
	ReplaceUnhealthyInstances interface{}
	// Nested argument containing Spot configurations. Defined below.
	SpotOptions interface{}
	// Map of Fleet tags. To tag instances at launch, specify the tags in the Launch Template.
	Tags interface{}
	// Nested argument containing target capacity configurations. Defined below.
	TargetCapacitySpecification interface{}
	// Whether to terminate instances for an EC2 Fleet if it is deleted successfully. Defaults to `false`.
	TerminateInstances interface{}
	// Whether running instances should be terminated when the EC2 Fleet expires. Defaults to `false`.
	TerminateInstancesWithExpiration interface{}
	// The type of request. Indicates whether the EC2 Fleet only requests the target capacity, or also attempts to maintain it. Valid values: `maintain`, `request`. Defaults to `maintain`.
	Type interface{}
}

// The set of arguments for constructing a Fleet resource.
type FleetArgs struct {
	// Whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2. Valid values: `no-termination`, `termination`. Defaults to `termination`.
	ExcessCapacityTerminationPolicy interface{}
	// Nested argument containing EC2 Launch Template configurations. Defined below.
	LaunchTemplateConfig interface{}
	// Nested argument containing On-Demand configurations. Defined below.
	OnDemandOptions interface{}
	// Whether EC2 Fleet should replace unhealthy instances. Defaults to `false`.
	ReplaceUnhealthyInstances interface{}
	// Nested argument containing Spot configurations. Defined below.
	SpotOptions interface{}
	// Map of Fleet tags. To tag instances at launch, specify the tags in the Launch Template.
	Tags interface{}
	// Nested argument containing target capacity configurations. Defined below.
	TargetCapacitySpecification interface{}
	// Whether to terminate instances for an EC2 Fleet if it is deleted successfully. Defaults to `false`.
	TerminateInstances interface{}
	// Whether running instances should be terminated when the EC2 Fleet expires. Defaults to `false`.
	TerminateInstancesWithExpiration interface{}
	// The type of request. Indicates whether the EC2 Fleet only requests the target capacity, or also attempts to maintain it. Valid values: `maintain`, `request`. Defaults to `maintain`.
	Type interface{}
}
