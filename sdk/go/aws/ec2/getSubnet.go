// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupSubnet(ctx *pulumi.Context, args *LookupSubnetArgs, opts ...pulumi.InvokeOption) (*LookupSubnetResult, error) {
	var rv LookupSubnetResult
	err := ctx.Invoke("aws:ec2/getSubnet:getSubnet", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSubnet.
type LookupSubnetArgs struct {
	AvailabilityZone   *string           `pulumi:"availabilityZone"`
	AvailabilityZoneId *string           `pulumi:"availabilityZoneId"`
	CidrBlock          *string           `pulumi:"cidrBlock"`
	DefaultForAz       *bool             `pulumi:"defaultForAz"`
	Filters            []GetSubnetFilter `pulumi:"filters"`
	Id                 *string           `pulumi:"id"`
	Ipv6CidrBlock      *string           `pulumi:"ipv6CidrBlock"`
	State              *string           `pulumi:"state"`
	Tags               map[string]string `pulumi:"tags"`
	VpcId              *string           `pulumi:"vpcId"`
}

// A collection of values returned by getSubnet.
type LookupSubnetResult struct {
	Arn                                     string            `pulumi:"arn"`
	AssignIpv6AddressOnCreation             bool              `pulumi:"assignIpv6AddressOnCreation"`
	AvailabilityZone                        string            `pulumi:"availabilityZone"`
	AvailabilityZoneId                      string            `pulumi:"availabilityZoneId"`
	AvailableIpAddressCount                 int               `pulumi:"availableIpAddressCount"`
	CidrBlock                               string            `pulumi:"cidrBlock"`
	CustomerOwnedIpv4Pool                   string            `pulumi:"customerOwnedIpv4Pool"`
	DefaultForAz                            bool              `pulumi:"defaultForAz"`
	EnableDns64                             bool              `pulumi:"enableDns64"`
	EnableResourceNameDnsARecordOnLaunch    bool              `pulumi:"enableResourceNameDnsARecordOnLaunch"`
	EnableResourceNameDnsAaaaRecordOnLaunch bool              `pulumi:"enableResourceNameDnsAaaaRecordOnLaunch"`
	Filters                                 []GetSubnetFilter `pulumi:"filters"`
	Id                                      string            `pulumi:"id"`
	Ipv6CidrBlock                           string            `pulumi:"ipv6CidrBlock"`
	Ipv6CidrBlockAssociationId              string            `pulumi:"ipv6CidrBlockAssociationId"`
	Ipv6Native                              bool              `pulumi:"ipv6Native"`
	MapCustomerOwnedIpOnLaunch              bool              `pulumi:"mapCustomerOwnedIpOnLaunch"`
	MapPublicIpOnLaunch                     bool              `pulumi:"mapPublicIpOnLaunch"`
	OutpostArn                              string            `pulumi:"outpostArn"`
	OwnerId                                 string            `pulumi:"ownerId"`
	PrivateDnsHostnameTypeOnLaunch          string            `pulumi:"privateDnsHostnameTypeOnLaunch"`
	State                                   string            `pulumi:"state"`
	Tags                                    map[string]string `pulumi:"tags"`
	VpcId                                   string            `pulumi:"vpcId"`
}

func LookupSubnetOutput(ctx *pulumi.Context, args LookupSubnetOutputArgs, opts ...pulumi.InvokeOption) LookupSubnetResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSubnetResult, error) {
			args := v.(LookupSubnetArgs)
			r, err := LookupSubnet(ctx, &args, opts...)
			var s LookupSubnetResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSubnetResultOutput)
}

// A collection of arguments for invoking getSubnet.
type LookupSubnetOutputArgs struct {
	AvailabilityZone   pulumi.StringPtrInput     `pulumi:"availabilityZone"`
	AvailabilityZoneId pulumi.StringPtrInput     `pulumi:"availabilityZoneId"`
	CidrBlock          pulumi.StringPtrInput     `pulumi:"cidrBlock"`
	DefaultForAz       pulumi.BoolPtrInput       `pulumi:"defaultForAz"`
	Filters            GetSubnetFilterArrayInput `pulumi:"filters"`
	Id                 pulumi.StringPtrInput     `pulumi:"id"`
	Ipv6CidrBlock      pulumi.StringPtrInput     `pulumi:"ipv6CidrBlock"`
	State              pulumi.StringPtrInput     `pulumi:"state"`
	Tags               pulumi.StringMapInput     `pulumi:"tags"`
	VpcId              pulumi.StringPtrInput     `pulumi:"vpcId"`
}

func (LookupSubnetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubnetArgs)(nil)).Elem()
}

// A collection of values returned by getSubnet.
type LookupSubnetResultOutput struct{ *pulumi.OutputState }

func (LookupSubnetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubnetResult)(nil)).Elem()
}

func (o LookupSubnetResultOutput) ToLookupSubnetResultOutput() LookupSubnetResultOutput {
	return o
}

func (o LookupSubnetResultOutput) ToLookupSubnetResultOutputWithContext(ctx context.Context) LookupSubnetResultOutput {
	return o
}

func (o LookupSubnetResultOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Arn }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) AssignIpv6AddressOnCreation() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubnetResult) bool { return v.AssignIpv6AddressOnCreation }).(pulumi.BoolOutput)
}

func (o LookupSubnetResultOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.AvailabilityZone }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) AvailabilityZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.AvailabilityZoneId }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) AvailableIpAddressCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSubnetResult) int { return v.AvailableIpAddressCount }).(pulumi.IntOutput)
}

func (o LookupSubnetResultOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.CidrBlock }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) CustomerOwnedIpv4Pool() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.CustomerOwnedIpv4Pool }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) DefaultForAz() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubnetResult) bool { return v.DefaultForAz }).(pulumi.BoolOutput)
}

func (o LookupSubnetResultOutput) EnableDns64() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubnetResult) bool { return v.EnableDns64 }).(pulumi.BoolOutput)
}

func (o LookupSubnetResultOutput) EnableResourceNameDnsARecordOnLaunch() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubnetResult) bool { return v.EnableResourceNameDnsARecordOnLaunch }).(pulumi.BoolOutput)
}

func (o LookupSubnetResultOutput) EnableResourceNameDnsAaaaRecordOnLaunch() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubnetResult) bool { return v.EnableResourceNameDnsAaaaRecordOnLaunch }).(pulumi.BoolOutput)
}

func (o LookupSubnetResultOutput) Filters() GetSubnetFilterArrayOutput {
	return o.ApplyT(func(v LookupSubnetResult) []GetSubnetFilter { return v.Filters }).(GetSubnetFilterArrayOutput)
}

func (o LookupSubnetResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) Ipv6CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Ipv6CidrBlock }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) Ipv6CidrBlockAssociationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Ipv6CidrBlockAssociationId }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) Ipv6Native() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubnetResult) bool { return v.Ipv6Native }).(pulumi.BoolOutput)
}

func (o LookupSubnetResultOutput) MapCustomerOwnedIpOnLaunch() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubnetResult) bool { return v.MapCustomerOwnedIpOnLaunch }).(pulumi.BoolOutput)
}

func (o LookupSubnetResultOutput) MapPublicIpOnLaunch() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubnetResult) bool { return v.MapPublicIpOnLaunch }).(pulumi.BoolOutput)
}

func (o LookupSubnetResultOutput) OutpostArn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.OutpostArn }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.OwnerId }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) PrivateDnsHostnameTypeOnLaunch() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.PrivateDnsHostnameTypeOnLaunch }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.State }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSubnetResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func (o LookupSubnetResultOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.VpcId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSubnetResultOutput{})
}
