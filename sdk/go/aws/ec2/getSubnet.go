// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// `aws_subnet` provides details about a specific VPC subnet.
// 
// This resource can prove useful when a module accepts a subnet id as
// an input variable and needs to, for example, determine the id of the
// VPC that the subnet belongs to.
func LookupSubnet(ctx *pulumi.Context, args *GetSubnetArgs) (*GetSubnetResult, error) {
	inputs := make(map[string]interface{})
	if args != nil {
		inputs["availabilityZone"] = args.AvailabilityZone
		inputs["availabilityZoneId"] = args.AvailabilityZoneId
		inputs["cidrBlock"] = args.CidrBlock
		inputs["defaultForAz"] = args.DefaultForAz
		inputs["filters"] = args.Filters
		inputs["id"] = args.Id
		inputs["ipv6CidrBlock"] = args.Ipv6CidrBlock
		inputs["state"] = args.State
		inputs["tags"] = args.Tags
		inputs["vpcId"] = args.VpcId
	}
	outputs, err := ctx.Invoke("aws:ec2/getSubnet:getSubnet", inputs)
	if err != nil {
		return nil, err
	}
	return &GetSubnetResult{
		Arn: outputs["arn"],
		AssignIpv6AddressOnCreation: outputs["assignIpv6AddressOnCreation"],
		AvailabilityZone: outputs["availabilityZone"],
		AvailabilityZoneId: outputs["availabilityZoneId"],
		CidrBlock: outputs["cidrBlock"],
		DefaultForAz: outputs["defaultForAz"],
		Filters: outputs["filters"],
		Id: outputs["id"],
		Ipv6CidrBlock: outputs["ipv6CidrBlock"],
		Ipv6CidrBlockAssociationId: outputs["ipv6CidrBlockAssociationId"],
		MapPublicIpOnLaunch: outputs["mapPublicIpOnLaunch"],
		OwnerId: outputs["ownerId"],
		State: outputs["state"],
		Tags: outputs["tags"],
		VpcId: outputs["vpcId"],
	}, nil
}

// A collection of arguments for invoking getSubnet.
type GetSubnetArgs struct {
	// The availability zone where the
	// subnet must reside.
	AvailabilityZone interface{}
	// The ID of the Availability Zone for the subnet.
	AvailabilityZoneId interface{}
	// The cidr block of the desired subnet.
	CidrBlock interface{}
	// Boolean constraint for whether the desired
	// subnet must be the default subnet for its associated availability zone.
	DefaultForAz interface{}
	// Custom filter block as described below.
	Filters interface{}
	// The id of the specific subnet to retrieve.
	Id interface{}
	// The Ipv6 cidr block of the desired subnet
	Ipv6CidrBlock interface{}
	// The state that the desired subnet must have.
	State interface{}
	// A mapping of tags, each pair of which must exactly match
	// a pair on the desired subnet.
	Tags interface{}
	// The id of the VPC that the desired subnet belongs to.
	VpcId interface{}
}

// A collection of values returned by getSubnet.
type GetSubnetResult struct {
	// The ARN of the subnet.
	Arn interface{}
	AssignIpv6AddressOnCreation interface{}
	AvailabilityZone interface{}
	AvailabilityZoneId interface{}
	CidrBlock interface{}
	DefaultForAz interface{}
	Filters interface{}
	Id interface{}
	Ipv6CidrBlock interface{}
	Ipv6CidrBlockAssociationId interface{}
	MapPublicIpOnLaunch interface{}
	// The ID of the AWS account that owns the subnet.
	OwnerId interface{}
	State interface{}
	Tags interface{}
	VpcId interface{}
}
