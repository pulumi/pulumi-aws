// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an EC2 Capacity Reservation. This allows you to reserve capacity for your Amazon EC2 instances in a specific Availability Zone for any duration.
type CapacityReservation struct {
	s *pulumi.ResourceState
}

// NewCapacityReservation registers a new resource with the given unique name, arguments, and options.
func NewCapacityReservation(ctx *pulumi.Context,
	name string, args *CapacityReservationArgs, opts ...pulumi.ResourceOpt) (*CapacityReservation, error) {
	if args == nil || args.AvailabilityZone == nil {
		return nil, errors.New("missing required argument 'AvailabilityZone'")
	}
	if args == nil || args.InstanceCount == nil {
		return nil, errors.New("missing required argument 'InstanceCount'")
	}
	if args == nil || args.InstancePlatform == nil {
		return nil, errors.New("missing required argument 'InstancePlatform'")
	}
	if args == nil || args.InstanceType == nil {
		return nil, errors.New("missing required argument 'InstanceType'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["availabilityZone"] = nil
		inputs["ebsOptimized"] = nil
		inputs["endDate"] = nil
		inputs["endDateType"] = nil
		inputs["ephemeralStorage"] = nil
		inputs["instanceCount"] = nil
		inputs["instanceMatchCriteria"] = nil
		inputs["instancePlatform"] = nil
		inputs["instanceType"] = nil
		inputs["tags"] = nil
		inputs["tenancy"] = nil
	} else {
		inputs["availabilityZone"] = args.AvailabilityZone
		inputs["ebsOptimized"] = args.EbsOptimized
		inputs["endDate"] = args.EndDate
		inputs["endDateType"] = args.EndDateType
		inputs["ephemeralStorage"] = args.EphemeralStorage
		inputs["instanceCount"] = args.InstanceCount
		inputs["instanceMatchCriteria"] = args.InstanceMatchCriteria
		inputs["instancePlatform"] = args.InstancePlatform
		inputs["instanceType"] = args.InstanceType
		inputs["tags"] = args.Tags
		inputs["tenancy"] = args.Tenancy
	}
	s, err := ctx.RegisterResource("aws:ec2/capacityReservation:CapacityReservation", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &CapacityReservation{s: s}, nil
}

// GetCapacityReservation gets an existing CapacityReservation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCapacityReservation(ctx *pulumi.Context,
	name string, id pulumi.ID, state *CapacityReservationState, opts ...pulumi.ResourceOpt) (*CapacityReservation, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["availabilityZone"] = state.AvailabilityZone
		inputs["ebsOptimized"] = state.EbsOptimized
		inputs["endDate"] = state.EndDate
		inputs["endDateType"] = state.EndDateType
		inputs["ephemeralStorage"] = state.EphemeralStorage
		inputs["instanceCount"] = state.InstanceCount
		inputs["instanceMatchCriteria"] = state.InstanceMatchCriteria
		inputs["instancePlatform"] = state.InstancePlatform
		inputs["instanceType"] = state.InstanceType
		inputs["tags"] = state.Tags
		inputs["tenancy"] = state.Tenancy
	}
	s, err := ctx.ReadResource("aws:ec2/capacityReservation:CapacityReservation", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &CapacityReservation{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *CapacityReservation) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *CapacityReservation) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The Availability Zone in which to create the Capacity Reservation.
func (r *CapacityReservation) AvailabilityZone() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["availabilityZone"])
}

// Indicates whether the Capacity Reservation supports EBS-optimized instances.
func (r *CapacityReservation) EbsOptimized() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["ebsOptimized"])
}

// The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. Valid values: [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`)
func (r *CapacityReservation) EndDate() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["endDate"])
}

// Indicates the way in which the Capacity Reservation ends. Specify either `unlimited` or `limited`.
func (r *CapacityReservation) EndDateType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["endDateType"])
}

// Indicates whether the Capacity Reservation supports instances with temporary, block-level storage.
func (r *CapacityReservation) EphemeralStorage() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["ephemeralStorage"])
}

// The number of instances for which to reserve capacity.
func (r *CapacityReservation) InstanceCount() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["instanceCount"])
}

// Indicates the type of instance launches that the Capacity Reservation accepts. Specify either `open` or `targeted`.
func (r *CapacityReservation) InstanceMatchCriteria() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["instanceMatchCriteria"])
}

// The type of operating system for which to reserve capacity. Valid options are `Linux/UNIX`, `Red Hat Enterprise Linux`, `SUSE Linux`, `Windows`, `Windows with SQL Server`, `Windows with SQL Server Enterprise`, `Windows with SQL Server Standard` or `Windows with SQL Server Web`.
func (r *CapacityReservation) InstancePlatform() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["instancePlatform"])
}

// The instance type for which to reserve capacity.
func (r *CapacityReservation) InstanceType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["instanceType"])
}

// A mapping of tags to assign to the resource.
func (r *CapacityReservation) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// Indicates the tenancy of the Capacity Reservation. Specify either `default` or `dedicated`.
func (r *CapacityReservation) Tenancy() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tenancy"])
}

// Input properties used for looking up and filtering CapacityReservation resources.
type CapacityReservationState struct {
	// The Availability Zone in which to create the Capacity Reservation.
	AvailabilityZone interface{}
	// Indicates whether the Capacity Reservation supports EBS-optimized instances.
	EbsOptimized interface{}
	// The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. Valid values: [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`)
	EndDate interface{}
	// Indicates the way in which the Capacity Reservation ends. Specify either `unlimited` or `limited`.
	EndDateType interface{}
	// Indicates whether the Capacity Reservation supports instances with temporary, block-level storage.
	EphemeralStorage interface{}
	// The number of instances for which to reserve capacity.
	InstanceCount interface{}
	// Indicates the type of instance launches that the Capacity Reservation accepts. Specify either `open` or `targeted`.
	InstanceMatchCriteria interface{}
	// The type of operating system for which to reserve capacity. Valid options are `Linux/UNIX`, `Red Hat Enterprise Linux`, `SUSE Linux`, `Windows`, `Windows with SQL Server`, `Windows with SQL Server Enterprise`, `Windows with SQL Server Standard` or `Windows with SQL Server Web`.
	InstancePlatform interface{}
	// The instance type for which to reserve capacity.
	InstanceType interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// Indicates the tenancy of the Capacity Reservation. Specify either `default` or `dedicated`.
	Tenancy interface{}
}

// The set of arguments for constructing a CapacityReservation resource.
type CapacityReservationArgs struct {
	// The Availability Zone in which to create the Capacity Reservation.
	AvailabilityZone interface{}
	// Indicates whether the Capacity Reservation supports EBS-optimized instances.
	EbsOptimized interface{}
	// The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. Valid values: [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`)
	EndDate interface{}
	// Indicates the way in which the Capacity Reservation ends. Specify either `unlimited` or `limited`.
	EndDateType interface{}
	// Indicates whether the Capacity Reservation supports instances with temporary, block-level storage.
	EphemeralStorage interface{}
	// The number of instances for which to reserve capacity.
	InstanceCount interface{}
	// Indicates the type of instance launches that the Capacity Reservation accepts. Specify either `open` or `targeted`.
	InstanceMatchCriteria interface{}
	// The type of operating system for which to reserve capacity. Valid options are `Linux/UNIX`, `Red Hat Enterprise Linux`, `SUSE Linux`, `Windows`, `Windows with SQL Server`, `Windows with SQL Server Enterprise`, `Windows with SQL Server Standard` or `Windows with SQL Server Web`.
	InstancePlatform interface{}
	// The instance type for which to reserve capacity.
	InstanceType interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// Indicates the tenancy of the Capacity Reservation. Specify either `default` or `dedicated`.
	Tenancy interface{}
}
