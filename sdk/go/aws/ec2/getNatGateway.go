// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides details about a specific Nat Gateway.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ec2"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		cfg := config.New(ctx, "")
// 		subnetId := cfg.RequireObject("subnetId")
// 		_, err := ec2.LookupNatGateway(ctx, &ec2.LookupNatGatewayArgs{
// 			SubnetId: pulumi.StringRef(aws_subnet.Public.Id),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Usage with tags:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ec2"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := ec2.LookupNatGateway(ctx, &ec2.LookupNatGatewayArgs{
// 			SubnetId: pulumi.StringRef(aws_subnet.Public.Id),
// 			Tags: map[string]interface{}{
// 				"Name": "gw NAT",
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupNatGateway(ctx *pulumi.Context, args *LookupNatGatewayArgs, opts ...pulumi.InvokeOption) (*LookupNatGatewayResult, error) {
	var rv LookupNatGatewayResult
	err := ctx.Invoke("aws:ec2/getNatGateway:getNatGateway", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNatGateway.
type LookupNatGatewayArgs struct {
	// Custom filter block as described below.
	Filters []GetNatGatewayFilter `pulumi:"filters"`
	// The id of the specific Nat Gateway to retrieve.
	Id *string `pulumi:"id"`
	// The state of the NAT gateway (pending | failed | available | deleting | deleted ).
	State *string `pulumi:"state"`
	// The id of subnet that the Nat Gateway resides in.
	SubnetId *string `pulumi:"subnetId"`
	// A map of tags, each pair of which must exactly match
	// a pair on the desired Nat Gateway.
	Tags map[string]string `pulumi:"tags"`
	// The id of the VPC that the Nat Gateway resides in.
	VpcId *string `pulumi:"vpcId"`
}

// A collection of values returned by getNatGateway.
type LookupNatGatewayResult struct {
	// The Id of the EIP allocated to the selected Nat Gateway.
	AllocationId string `pulumi:"allocationId"`
	// The connectivity type of the NAT Gateway.
	ConnectivityType string                `pulumi:"connectivityType"`
	Filters          []GetNatGatewayFilter `pulumi:"filters"`
	Id               string                `pulumi:"id"`
	// The Id of the ENI allocated to the selected Nat Gateway.
	NetworkInterfaceId string `pulumi:"networkInterfaceId"`
	// The private Ip address of the selected Nat Gateway.
	PrivateIp string `pulumi:"privateIp"`
	// The public Ip (EIP) address of the selected Nat Gateway.
	PublicIp string            `pulumi:"publicIp"`
	State    string            `pulumi:"state"`
	SubnetId string            `pulumi:"subnetId"`
	Tags     map[string]string `pulumi:"tags"`
	VpcId    string            `pulumi:"vpcId"`
}

func LookupNatGatewayOutput(ctx *pulumi.Context, args LookupNatGatewayOutputArgs, opts ...pulumi.InvokeOption) LookupNatGatewayResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNatGatewayResult, error) {
			args := v.(LookupNatGatewayArgs)
			r, err := LookupNatGateway(ctx, &args, opts...)
			return *r, err
		}).(LookupNatGatewayResultOutput)
}

// A collection of arguments for invoking getNatGateway.
type LookupNatGatewayOutputArgs struct {
	// Custom filter block as described below.
	Filters GetNatGatewayFilterArrayInput `pulumi:"filters"`
	// The id of the specific Nat Gateway to retrieve.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The state of the NAT gateway (pending | failed | available | deleting | deleted ).
	State pulumi.StringPtrInput `pulumi:"state"`
	// The id of subnet that the Nat Gateway resides in.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// A map of tags, each pair of which must exactly match
	// a pair on the desired Nat Gateway.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The id of the VPC that the Nat Gateway resides in.
	VpcId pulumi.StringPtrInput `pulumi:"vpcId"`
}

func (LookupNatGatewayOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNatGatewayArgs)(nil)).Elem()
}

// A collection of values returned by getNatGateway.
type LookupNatGatewayResultOutput struct{ *pulumi.OutputState }

func (LookupNatGatewayResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNatGatewayResult)(nil)).Elem()
}

func (o LookupNatGatewayResultOutput) ToLookupNatGatewayResultOutput() LookupNatGatewayResultOutput {
	return o
}

func (o LookupNatGatewayResultOutput) ToLookupNatGatewayResultOutputWithContext(ctx context.Context) LookupNatGatewayResultOutput {
	return o
}

// The Id of the EIP allocated to the selected Nat Gateway.
func (o LookupNatGatewayResultOutput) AllocationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNatGatewayResult) string { return v.AllocationId }).(pulumi.StringOutput)
}

// The connectivity type of the NAT Gateway.
func (o LookupNatGatewayResultOutput) ConnectivityType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNatGatewayResult) string { return v.ConnectivityType }).(pulumi.StringOutput)
}

func (o LookupNatGatewayResultOutput) Filters() GetNatGatewayFilterArrayOutput {
	return o.ApplyT(func(v LookupNatGatewayResult) []GetNatGatewayFilter { return v.Filters }).(GetNatGatewayFilterArrayOutput)
}

func (o LookupNatGatewayResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNatGatewayResult) string { return v.Id }).(pulumi.StringOutput)
}

// The Id of the ENI allocated to the selected Nat Gateway.
func (o LookupNatGatewayResultOutput) NetworkInterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNatGatewayResult) string { return v.NetworkInterfaceId }).(pulumi.StringOutput)
}

// The private Ip address of the selected Nat Gateway.
func (o LookupNatGatewayResultOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNatGatewayResult) string { return v.PrivateIp }).(pulumi.StringOutput)
}

// The public Ip (EIP) address of the selected Nat Gateway.
func (o LookupNatGatewayResultOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNatGatewayResult) string { return v.PublicIp }).(pulumi.StringOutput)
}

func (o LookupNatGatewayResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNatGatewayResult) string { return v.State }).(pulumi.StringOutput)
}

func (o LookupNatGatewayResultOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNatGatewayResult) string { return v.SubnetId }).(pulumi.StringOutput)
}

func (o LookupNatGatewayResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupNatGatewayResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func (o LookupNatGatewayResultOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNatGatewayResult) string { return v.VpcId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNatGatewayResultOutput{})
}
