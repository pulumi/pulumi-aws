// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a customer gateway inside a VPC. These objects can be connected to VPN gateways via VPN connections, and allow you to establish tunnels between your network and the VPC.
type CustomerGateway struct {
	s *pulumi.ResourceState
}

// NewCustomerGateway registers a new resource with the given unique name, arguments, and options.
func NewCustomerGateway(ctx *pulumi.Context,
	name string, args *CustomerGatewayArgs, opts ...pulumi.ResourceOpt) (*CustomerGateway, error) {
	if args == nil || args.BgpAsn == nil {
		return nil, errors.New("missing required argument 'BgpAsn'")
	}
	if args == nil || args.IpAddress == nil {
		return nil, errors.New("missing required argument 'IpAddress'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["bgpAsn"] = nil
		inputs["ipAddress"] = nil
		inputs["tags"] = nil
		inputs["type"] = nil
	} else {
		inputs["bgpAsn"] = args.BgpAsn
		inputs["ipAddress"] = args.IpAddress
		inputs["tags"] = args.Tags
		inputs["type"] = args.Type
	}
	s, err := ctx.RegisterResource("aws:ec2/customerGateway:CustomerGateway", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &CustomerGateway{s: s}, nil
}

// GetCustomerGateway gets an existing CustomerGateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCustomerGateway(ctx *pulumi.Context,
	name string, id pulumi.ID, state *CustomerGatewayState, opts ...pulumi.ResourceOpt) (*CustomerGateway, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["bgpAsn"] = state.BgpAsn
		inputs["ipAddress"] = state.IpAddress
		inputs["tags"] = state.Tags
		inputs["type"] = state.Type
	}
	s, err := ctx.ReadResource("aws:ec2/customerGateway:CustomerGateway", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &CustomerGateway{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *CustomerGateway) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *CustomerGateway) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN).
func (r *CustomerGateway) BgpAsn() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["bgpAsn"])
}

// The IP address of the gateway's Internet-routable external interface.
func (r *CustomerGateway) IpAddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipAddress"])
}

// Tags to apply to the gateway.
func (r *CustomerGateway) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// The type of customer gateway. The only type AWS
// supports at this time is "ipsec.1".
func (r *CustomerGateway) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

// Input properties used for looking up and filtering CustomerGateway resources.
type CustomerGatewayState struct {
	// The gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN).
	BgpAsn interface{}
	// The IP address of the gateway's Internet-routable external interface.
	IpAddress interface{}
	// Tags to apply to the gateway.
	Tags interface{}
	// The type of customer gateway. The only type AWS
	// supports at this time is "ipsec.1".
	Type interface{}
}

// The set of arguments for constructing a CustomerGateway resource.
type CustomerGatewayArgs struct {
	// The gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN).
	BgpAsn interface{}
	// The IP address of the gateway's Internet-routable external interface.
	IpAddress interface{}
	// Tags to apply to the gateway.
	Tags interface{}
	// The type of customer gateway. The only type AWS
	// supports at this time is "ipsec.1".
	Type interface{}
}
