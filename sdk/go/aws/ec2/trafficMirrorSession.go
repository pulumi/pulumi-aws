// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TrafficMirrorSession struct {
	pulumi.CustomResourceState

	Arn                   pulumi.StringOutput    `pulumi:"arn"`
	Description           pulumi.StringPtrOutput `pulumi:"description"`
	NetworkInterfaceId    pulumi.StringOutput    `pulumi:"networkInterfaceId"`
	OwnerId               pulumi.StringOutput    `pulumi:"ownerId"`
	PacketLength          pulumi.IntPtrOutput    `pulumi:"packetLength"`
	SessionNumber         pulumi.IntOutput       `pulumi:"sessionNumber"`
	Tags                  pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll               pulumi.StringMapOutput `pulumi:"tagsAll"`
	TrafficMirrorFilterId pulumi.StringOutput    `pulumi:"trafficMirrorFilterId"`
	TrafficMirrorTargetId pulumi.StringOutput    `pulumi:"trafficMirrorTargetId"`
	VirtualNetworkId      pulumi.IntOutput       `pulumi:"virtualNetworkId"`
}

// NewTrafficMirrorSession registers a new resource with the given unique name, arguments, and options.
func NewTrafficMirrorSession(ctx *pulumi.Context,
	name string, args *TrafficMirrorSessionArgs, opts ...pulumi.ResourceOption) (*TrafficMirrorSession, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkInterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkInterfaceId'")
	}
	if args.SessionNumber == nil {
		return nil, errors.New("invalid value for required argument 'SessionNumber'")
	}
	if args.TrafficMirrorFilterId == nil {
		return nil, errors.New("invalid value for required argument 'TrafficMirrorFilterId'")
	}
	if args.TrafficMirrorTargetId == nil {
		return nil, errors.New("invalid value for required argument 'TrafficMirrorTargetId'")
	}
	var resource TrafficMirrorSession
	err := ctx.RegisterResource("aws:ec2/trafficMirrorSession:TrafficMirrorSession", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrafficMirrorSession gets an existing TrafficMirrorSession resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrafficMirrorSession(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrafficMirrorSessionState, opts ...pulumi.ResourceOption) (*TrafficMirrorSession, error) {
	var resource TrafficMirrorSession
	err := ctx.ReadResource("aws:ec2/trafficMirrorSession:TrafficMirrorSession", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TrafficMirrorSession resources.
type trafficMirrorSessionState struct {
	Arn                   *string           `pulumi:"arn"`
	Description           *string           `pulumi:"description"`
	NetworkInterfaceId    *string           `pulumi:"networkInterfaceId"`
	OwnerId               *string           `pulumi:"ownerId"`
	PacketLength          *int              `pulumi:"packetLength"`
	SessionNumber         *int              `pulumi:"sessionNumber"`
	Tags                  map[string]string `pulumi:"tags"`
	TagsAll               map[string]string `pulumi:"tagsAll"`
	TrafficMirrorFilterId *string           `pulumi:"trafficMirrorFilterId"`
	TrafficMirrorTargetId *string           `pulumi:"trafficMirrorTargetId"`
	VirtualNetworkId      *int              `pulumi:"virtualNetworkId"`
}

type TrafficMirrorSessionState struct {
	Arn                   pulumi.StringPtrInput
	Description           pulumi.StringPtrInput
	NetworkInterfaceId    pulumi.StringPtrInput
	OwnerId               pulumi.StringPtrInput
	PacketLength          pulumi.IntPtrInput
	SessionNumber         pulumi.IntPtrInput
	Tags                  pulumi.StringMapInput
	TagsAll               pulumi.StringMapInput
	TrafficMirrorFilterId pulumi.StringPtrInput
	TrafficMirrorTargetId pulumi.StringPtrInput
	VirtualNetworkId      pulumi.IntPtrInput
}

func (TrafficMirrorSessionState) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficMirrorSessionState)(nil)).Elem()
}

type trafficMirrorSessionArgs struct {
	Description           *string           `pulumi:"description"`
	NetworkInterfaceId    string            `pulumi:"networkInterfaceId"`
	PacketLength          *int              `pulumi:"packetLength"`
	SessionNumber         int               `pulumi:"sessionNumber"`
	Tags                  map[string]string `pulumi:"tags"`
	TrafficMirrorFilterId string            `pulumi:"trafficMirrorFilterId"`
	TrafficMirrorTargetId string            `pulumi:"trafficMirrorTargetId"`
	VirtualNetworkId      *int              `pulumi:"virtualNetworkId"`
}

// The set of arguments for constructing a TrafficMirrorSession resource.
type TrafficMirrorSessionArgs struct {
	Description           pulumi.StringPtrInput
	NetworkInterfaceId    pulumi.StringInput
	PacketLength          pulumi.IntPtrInput
	SessionNumber         pulumi.IntInput
	Tags                  pulumi.StringMapInput
	TrafficMirrorFilterId pulumi.StringInput
	TrafficMirrorTargetId pulumi.StringInput
	VirtualNetworkId      pulumi.IntPtrInput
}

func (TrafficMirrorSessionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficMirrorSessionArgs)(nil)).Elem()
}

type TrafficMirrorSessionInput interface {
	pulumi.Input

	ToTrafficMirrorSessionOutput() TrafficMirrorSessionOutput
	ToTrafficMirrorSessionOutputWithContext(ctx context.Context) TrafficMirrorSessionOutput
}

func (*TrafficMirrorSession) ElementType() reflect.Type {
	return reflect.TypeOf((**TrafficMirrorSession)(nil)).Elem()
}

func (i *TrafficMirrorSession) ToTrafficMirrorSessionOutput() TrafficMirrorSessionOutput {
	return i.ToTrafficMirrorSessionOutputWithContext(context.Background())
}

func (i *TrafficMirrorSession) ToTrafficMirrorSessionOutputWithContext(ctx context.Context) TrafficMirrorSessionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficMirrorSessionOutput)
}

// TrafficMirrorSessionArrayInput is an input type that accepts TrafficMirrorSessionArray and TrafficMirrorSessionArrayOutput values.
// You can construct a concrete instance of `TrafficMirrorSessionArrayInput` via:
//
//	TrafficMirrorSessionArray{ TrafficMirrorSessionArgs{...} }
type TrafficMirrorSessionArrayInput interface {
	pulumi.Input

	ToTrafficMirrorSessionArrayOutput() TrafficMirrorSessionArrayOutput
	ToTrafficMirrorSessionArrayOutputWithContext(context.Context) TrafficMirrorSessionArrayOutput
}

type TrafficMirrorSessionArray []TrafficMirrorSessionInput

func (TrafficMirrorSessionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TrafficMirrorSession)(nil)).Elem()
}

func (i TrafficMirrorSessionArray) ToTrafficMirrorSessionArrayOutput() TrafficMirrorSessionArrayOutput {
	return i.ToTrafficMirrorSessionArrayOutputWithContext(context.Background())
}

func (i TrafficMirrorSessionArray) ToTrafficMirrorSessionArrayOutputWithContext(ctx context.Context) TrafficMirrorSessionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficMirrorSessionArrayOutput)
}

// TrafficMirrorSessionMapInput is an input type that accepts TrafficMirrorSessionMap and TrafficMirrorSessionMapOutput values.
// You can construct a concrete instance of `TrafficMirrorSessionMapInput` via:
//
//	TrafficMirrorSessionMap{ "key": TrafficMirrorSessionArgs{...} }
type TrafficMirrorSessionMapInput interface {
	pulumi.Input

	ToTrafficMirrorSessionMapOutput() TrafficMirrorSessionMapOutput
	ToTrafficMirrorSessionMapOutputWithContext(context.Context) TrafficMirrorSessionMapOutput
}

type TrafficMirrorSessionMap map[string]TrafficMirrorSessionInput

func (TrafficMirrorSessionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TrafficMirrorSession)(nil)).Elem()
}

func (i TrafficMirrorSessionMap) ToTrafficMirrorSessionMapOutput() TrafficMirrorSessionMapOutput {
	return i.ToTrafficMirrorSessionMapOutputWithContext(context.Background())
}

func (i TrafficMirrorSessionMap) ToTrafficMirrorSessionMapOutputWithContext(ctx context.Context) TrafficMirrorSessionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficMirrorSessionMapOutput)
}

type TrafficMirrorSessionOutput struct{ *pulumi.OutputState }

func (TrafficMirrorSessionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrafficMirrorSession)(nil)).Elem()
}

func (o TrafficMirrorSessionOutput) ToTrafficMirrorSessionOutput() TrafficMirrorSessionOutput {
	return o
}

func (o TrafficMirrorSessionOutput) ToTrafficMirrorSessionOutputWithContext(ctx context.Context) TrafficMirrorSessionOutput {
	return o
}

func (o TrafficMirrorSessionOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o TrafficMirrorSessionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o TrafficMirrorSessionOutput) NetworkInterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.StringOutput { return v.NetworkInterfaceId }).(pulumi.StringOutput)
}

func (o TrafficMirrorSessionOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.StringOutput { return v.OwnerId }).(pulumi.StringOutput)
}

func (o TrafficMirrorSessionOutput) PacketLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.IntPtrOutput { return v.PacketLength }).(pulumi.IntPtrOutput)
}

func (o TrafficMirrorSessionOutput) SessionNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.IntOutput { return v.SessionNumber }).(pulumi.IntOutput)
}

func (o TrafficMirrorSessionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o TrafficMirrorSessionOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o TrafficMirrorSessionOutput) TrafficMirrorFilterId() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.StringOutput { return v.TrafficMirrorFilterId }).(pulumi.StringOutput)
}

func (o TrafficMirrorSessionOutput) TrafficMirrorTargetId() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.StringOutput { return v.TrafficMirrorTargetId }).(pulumi.StringOutput)
}

func (o TrafficMirrorSessionOutput) VirtualNetworkId() pulumi.IntOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.IntOutput { return v.VirtualNetworkId }).(pulumi.IntOutput)
}

type TrafficMirrorSessionArrayOutput struct{ *pulumi.OutputState }

func (TrafficMirrorSessionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TrafficMirrorSession)(nil)).Elem()
}

func (o TrafficMirrorSessionArrayOutput) ToTrafficMirrorSessionArrayOutput() TrafficMirrorSessionArrayOutput {
	return o
}

func (o TrafficMirrorSessionArrayOutput) ToTrafficMirrorSessionArrayOutputWithContext(ctx context.Context) TrafficMirrorSessionArrayOutput {
	return o
}

func (o TrafficMirrorSessionArrayOutput) Index(i pulumi.IntInput) TrafficMirrorSessionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TrafficMirrorSession {
		return vs[0].([]*TrafficMirrorSession)[vs[1].(int)]
	}).(TrafficMirrorSessionOutput)
}

type TrafficMirrorSessionMapOutput struct{ *pulumi.OutputState }

func (TrafficMirrorSessionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TrafficMirrorSession)(nil)).Elem()
}

func (o TrafficMirrorSessionMapOutput) ToTrafficMirrorSessionMapOutput() TrafficMirrorSessionMapOutput {
	return o
}

func (o TrafficMirrorSessionMapOutput) ToTrafficMirrorSessionMapOutputWithContext(ctx context.Context) TrafficMirrorSessionMapOutput {
	return o
}

func (o TrafficMirrorSessionMapOutput) MapIndex(k pulumi.StringInput) TrafficMirrorSessionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TrafficMirrorSession {
		return vs[0].(map[string]*TrafficMirrorSession)[vs[1].(string)]
	}).(TrafficMirrorSessionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficMirrorSessionInput)(nil)).Elem(), &TrafficMirrorSession{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficMirrorSessionArrayInput)(nil)).Elem(), TrafficMirrorSessionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficMirrorSessionMapInput)(nil)).Elem(), TrafficMirrorSessionMap{})
	pulumi.RegisterOutputType(TrafficMirrorSessionOutput{})
	pulumi.RegisterOutputType(TrafficMirrorSessionArrayOutput{})
	pulumi.RegisterOutputType(TrafficMirrorSessionMapOutput{})
}
