// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides information about a Launch Configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ec2.LookupLaunchConfiguration(ctx, &ec2.LookupLaunchConfigurationArgs{
//				Name: "test-launch-config",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupLaunchConfiguration(ctx *pulumi.Context, args *LookupLaunchConfigurationArgs, opts ...pulumi.InvokeOption) (*LookupLaunchConfigurationResult, error) {
	var rv LookupLaunchConfigurationResult
	err := ctx.Invoke("aws:ec2/getLaunchConfiguration:getLaunchConfiguration", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLaunchConfiguration.
type LookupLaunchConfigurationArgs struct {
	// Name of the launch configuration.
	Name string `pulumi:"name"`
}

// A collection of values returned by getLaunchConfiguration.
type LookupLaunchConfigurationResult struct {
	// Amazon Resource Name of the launch configuration.
	Arn string `pulumi:"arn"`
	// Whether a Public IP address is associated with the instance.
	AssociatePublicIpAddress bool `pulumi:"associatePublicIpAddress"`
	// EBS Block Devices attached to the instance.
	EbsBlockDevices []GetLaunchConfigurationEbsBlockDevice `pulumi:"ebsBlockDevices"`
	// Whether the launched EC2 instance will be EBS-optimized.
	EbsOptimized bool `pulumi:"ebsOptimized"`
	// Whether Detailed Monitoring is Enabled.
	EnableMonitoring bool `pulumi:"enableMonitoring"`
	// The Ephemeral volumes on the instance.
	EphemeralBlockDevices []GetLaunchConfigurationEphemeralBlockDevice `pulumi:"ephemeralBlockDevices"`
	// The IAM Instance Profile to associate with launched instances.
	IamInstanceProfile string `pulumi:"iamInstanceProfile"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// EC2 Image ID of the instance.
	ImageId string `pulumi:"imageId"`
	// Instance Type of the instance to launch.
	InstanceType string `pulumi:"instanceType"`
	// Key Name that should be used for the instance.
	KeyName string `pulumi:"keyName"`
	// Metadata options for the instance.
	MetadataOptions []GetLaunchConfigurationMetadataOption `pulumi:"metadataOptions"`
	// Name of the launch configuration.
	Name string `pulumi:"name"`
	// Tenancy of the instance.
	PlacementTenancy string `pulumi:"placementTenancy"`
	// Root Block Device of the instance.
	RootBlockDevices []GetLaunchConfigurationRootBlockDevice `pulumi:"rootBlockDevices"`
	// List of associated Security Group IDS.
	SecurityGroups []string `pulumi:"securityGroups"`
	// Price to use for reserving Spot instances.
	SpotPrice string `pulumi:"spotPrice"`
	// User Data of the instance.
	UserData string `pulumi:"userData"`
	// ID of a ClassicLink-enabled VPC.
	VpcClassicLinkId string `pulumi:"vpcClassicLinkId"`
	// The IDs of one or more Security Groups for the specified ClassicLink-enabled VPC.
	VpcClassicLinkSecurityGroups []string `pulumi:"vpcClassicLinkSecurityGroups"`
}

func LookupLaunchConfigurationOutput(ctx *pulumi.Context, args LookupLaunchConfigurationOutputArgs, opts ...pulumi.InvokeOption) LookupLaunchConfigurationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupLaunchConfigurationResult, error) {
			args := v.(LookupLaunchConfigurationArgs)
			r, err := LookupLaunchConfiguration(ctx, &args, opts...)
			var s LookupLaunchConfigurationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupLaunchConfigurationResultOutput)
}

// A collection of arguments for invoking getLaunchConfiguration.
type LookupLaunchConfigurationOutputArgs struct {
	// Name of the launch configuration.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupLaunchConfigurationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLaunchConfigurationArgs)(nil)).Elem()
}

// A collection of values returned by getLaunchConfiguration.
type LookupLaunchConfigurationResultOutput struct{ *pulumi.OutputState }

func (LookupLaunchConfigurationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLaunchConfigurationResult)(nil)).Elem()
}

func (o LookupLaunchConfigurationResultOutput) ToLookupLaunchConfigurationResultOutput() LookupLaunchConfigurationResultOutput {
	return o
}

func (o LookupLaunchConfigurationResultOutput) ToLookupLaunchConfigurationResultOutputWithContext(ctx context.Context) LookupLaunchConfigurationResultOutput {
	return o
}

// Amazon Resource Name of the launch configuration.
func (o LookupLaunchConfigurationResultOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLaunchConfigurationResult) string { return v.Arn }).(pulumi.StringOutput)
}

// Whether a Public IP address is associated with the instance.
func (o LookupLaunchConfigurationResultOutput) AssociatePublicIpAddress() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupLaunchConfigurationResult) bool { return v.AssociatePublicIpAddress }).(pulumi.BoolOutput)
}

// EBS Block Devices attached to the instance.
func (o LookupLaunchConfigurationResultOutput) EbsBlockDevices() GetLaunchConfigurationEbsBlockDeviceArrayOutput {
	return o.ApplyT(func(v LookupLaunchConfigurationResult) []GetLaunchConfigurationEbsBlockDevice {
		return v.EbsBlockDevices
	}).(GetLaunchConfigurationEbsBlockDeviceArrayOutput)
}

// Whether the launched EC2 instance will be EBS-optimized.
func (o LookupLaunchConfigurationResultOutput) EbsOptimized() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupLaunchConfigurationResult) bool { return v.EbsOptimized }).(pulumi.BoolOutput)
}

// Whether Detailed Monitoring is Enabled.
func (o LookupLaunchConfigurationResultOutput) EnableMonitoring() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupLaunchConfigurationResult) bool { return v.EnableMonitoring }).(pulumi.BoolOutput)
}

// The Ephemeral volumes on the instance.
func (o LookupLaunchConfigurationResultOutput) EphemeralBlockDevices() GetLaunchConfigurationEphemeralBlockDeviceArrayOutput {
	return o.ApplyT(func(v LookupLaunchConfigurationResult) []GetLaunchConfigurationEphemeralBlockDevice {
		return v.EphemeralBlockDevices
	}).(GetLaunchConfigurationEphemeralBlockDeviceArrayOutput)
}

// The IAM Instance Profile to associate with launched instances.
func (o LookupLaunchConfigurationResultOutput) IamInstanceProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLaunchConfigurationResult) string { return v.IamInstanceProfile }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupLaunchConfigurationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLaunchConfigurationResult) string { return v.Id }).(pulumi.StringOutput)
}

// EC2 Image ID of the instance.
func (o LookupLaunchConfigurationResultOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLaunchConfigurationResult) string { return v.ImageId }).(pulumi.StringOutput)
}

// Instance Type of the instance to launch.
func (o LookupLaunchConfigurationResultOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLaunchConfigurationResult) string { return v.InstanceType }).(pulumi.StringOutput)
}

// Key Name that should be used for the instance.
func (o LookupLaunchConfigurationResultOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLaunchConfigurationResult) string { return v.KeyName }).(pulumi.StringOutput)
}

// Metadata options for the instance.
func (o LookupLaunchConfigurationResultOutput) MetadataOptions() GetLaunchConfigurationMetadataOptionArrayOutput {
	return o.ApplyT(func(v LookupLaunchConfigurationResult) []GetLaunchConfigurationMetadataOption {
		return v.MetadataOptions
	}).(GetLaunchConfigurationMetadataOptionArrayOutput)
}

// Name of the launch configuration.
func (o LookupLaunchConfigurationResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLaunchConfigurationResult) string { return v.Name }).(pulumi.StringOutput)
}

// Tenancy of the instance.
func (o LookupLaunchConfigurationResultOutput) PlacementTenancy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLaunchConfigurationResult) string { return v.PlacementTenancy }).(pulumi.StringOutput)
}

// Root Block Device of the instance.
func (o LookupLaunchConfigurationResultOutput) RootBlockDevices() GetLaunchConfigurationRootBlockDeviceArrayOutput {
	return o.ApplyT(func(v LookupLaunchConfigurationResult) []GetLaunchConfigurationRootBlockDevice {
		return v.RootBlockDevices
	}).(GetLaunchConfigurationRootBlockDeviceArrayOutput)
}

// List of associated Security Group IDS.
func (o LookupLaunchConfigurationResultOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupLaunchConfigurationResult) []string { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// Price to use for reserving Spot instances.
func (o LookupLaunchConfigurationResultOutput) SpotPrice() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLaunchConfigurationResult) string { return v.SpotPrice }).(pulumi.StringOutput)
}

// User Data of the instance.
func (o LookupLaunchConfigurationResultOutput) UserData() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLaunchConfigurationResult) string { return v.UserData }).(pulumi.StringOutput)
}

// ID of a ClassicLink-enabled VPC.
func (o LookupLaunchConfigurationResultOutput) VpcClassicLinkId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLaunchConfigurationResult) string { return v.VpcClassicLinkId }).(pulumi.StringOutput)
}

// The IDs of one or more Security Groups for the specified ClassicLink-enabled VPC.
func (o LookupLaunchConfigurationResultOutput) VpcClassicLinkSecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupLaunchConfigurationResult) []string { return v.VpcClassicLinkSecurityGroups }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLaunchConfigurationResultOutput{})
}
