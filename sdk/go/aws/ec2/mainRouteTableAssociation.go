// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MainRouteTableAssociation struct {
	pulumi.CustomResourceState

	// Used internally, see __Notes__ below
	OriginalRouteTableId pulumi.StringOutput `pulumi:"originalRouteTableId"`
	// The ID of the Route Table to set as the new
	// main route table for the target VPC
	RouteTableId pulumi.StringOutput `pulumi:"routeTableId"`
	// The ID of the VPC whose main route table should be set
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewMainRouteTableAssociation registers a new resource with the given unique name, arguments, and options.
func NewMainRouteTableAssociation(ctx *pulumi.Context,
	name string, args *MainRouteTableAssociationArgs, opts ...pulumi.ResourceOption) (*MainRouteTableAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RouteTableId == nil {
		return nil, errors.New("invalid value for required argument 'RouteTableId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	var resource MainRouteTableAssociation
	err := ctx.RegisterResource("aws:ec2/mainRouteTableAssociation:MainRouteTableAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMainRouteTableAssociation gets an existing MainRouteTableAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMainRouteTableAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MainRouteTableAssociationState, opts ...pulumi.ResourceOption) (*MainRouteTableAssociation, error) {
	var resource MainRouteTableAssociation
	err := ctx.ReadResource("aws:ec2/mainRouteTableAssociation:MainRouteTableAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MainRouteTableAssociation resources.
type mainRouteTableAssociationState struct {
	// Used internally, see __Notes__ below
	OriginalRouteTableId *string `pulumi:"originalRouteTableId"`
	// The ID of the Route Table to set as the new
	// main route table for the target VPC
	RouteTableId *string `pulumi:"routeTableId"`
	// The ID of the VPC whose main route table should be set
	VpcId *string `pulumi:"vpcId"`
}

type MainRouteTableAssociationState struct {
	// Used internally, see __Notes__ below
	OriginalRouteTableId pulumi.StringPtrInput
	// The ID of the Route Table to set as the new
	// main route table for the target VPC
	RouteTableId pulumi.StringPtrInput
	// The ID of the VPC whose main route table should be set
	VpcId pulumi.StringPtrInput
}

func (MainRouteTableAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*mainRouteTableAssociationState)(nil)).Elem()
}

type mainRouteTableAssociationArgs struct {
	// The ID of the Route Table to set as the new
	// main route table for the target VPC
	RouteTableId string `pulumi:"routeTableId"`
	// The ID of the VPC whose main route table should be set
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a MainRouteTableAssociation resource.
type MainRouteTableAssociationArgs struct {
	// The ID of the Route Table to set as the new
	// main route table for the target VPC
	RouteTableId pulumi.StringInput
	// The ID of the VPC whose main route table should be set
	VpcId pulumi.StringInput
}

func (MainRouteTableAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mainRouteTableAssociationArgs)(nil)).Elem()
}

type MainRouteTableAssociationInput interface {
	pulumi.Input

	ToMainRouteTableAssociationOutput() MainRouteTableAssociationOutput
	ToMainRouteTableAssociationOutputWithContext(ctx context.Context) MainRouteTableAssociationOutput
}

func (*MainRouteTableAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((*MainRouteTableAssociation)(nil))
}

func (i *MainRouteTableAssociation) ToMainRouteTableAssociationOutput() MainRouteTableAssociationOutput {
	return i.ToMainRouteTableAssociationOutputWithContext(context.Background())
}

func (i *MainRouteTableAssociation) ToMainRouteTableAssociationOutputWithContext(ctx context.Context) MainRouteTableAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MainRouteTableAssociationOutput)
}

func (i *MainRouteTableAssociation) ToMainRouteTableAssociationPtrOutput() MainRouteTableAssociationPtrOutput {
	return i.ToMainRouteTableAssociationPtrOutputWithContext(context.Background())
}

func (i *MainRouteTableAssociation) ToMainRouteTableAssociationPtrOutputWithContext(ctx context.Context) MainRouteTableAssociationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MainRouteTableAssociationPtrOutput)
}

type MainRouteTableAssociationPtrInput interface {
	pulumi.Input

	ToMainRouteTableAssociationPtrOutput() MainRouteTableAssociationPtrOutput
	ToMainRouteTableAssociationPtrOutputWithContext(ctx context.Context) MainRouteTableAssociationPtrOutput
}

type mainRouteTableAssociationPtrType MainRouteTableAssociationArgs

func (*mainRouteTableAssociationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MainRouteTableAssociation)(nil))
}

func (i *mainRouteTableAssociationPtrType) ToMainRouteTableAssociationPtrOutput() MainRouteTableAssociationPtrOutput {
	return i.ToMainRouteTableAssociationPtrOutputWithContext(context.Background())
}

func (i *mainRouteTableAssociationPtrType) ToMainRouteTableAssociationPtrOutputWithContext(ctx context.Context) MainRouteTableAssociationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MainRouteTableAssociationPtrOutput)
}

// MainRouteTableAssociationArrayInput is an input type that accepts MainRouteTableAssociationArray and MainRouteTableAssociationArrayOutput values.
// You can construct a concrete instance of `MainRouteTableAssociationArrayInput` via:
//
//          MainRouteTableAssociationArray{ MainRouteTableAssociationArgs{...} }
type MainRouteTableAssociationArrayInput interface {
	pulumi.Input

	ToMainRouteTableAssociationArrayOutput() MainRouteTableAssociationArrayOutput
	ToMainRouteTableAssociationArrayOutputWithContext(context.Context) MainRouteTableAssociationArrayOutput
}

type MainRouteTableAssociationArray []MainRouteTableAssociationInput

func (MainRouteTableAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*MainRouteTableAssociation)(nil))
}

func (i MainRouteTableAssociationArray) ToMainRouteTableAssociationArrayOutput() MainRouteTableAssociationArrayOutput {
	return i.ToMainRouteTableAssociationArrayOutputWithContext(context.Background())
}

func (i MainRouteTableAssociationArray) ToMainRouteTableAssociationArrayOutputWithContext(ctx context.Context) MainRouteTableAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MainRouteTableAssociationArrayOutput)
}

// MainRouteTableAssociationMapInput is an input type that accepts MainRouteTableAssociationMap and MainRouteTableAssociationMapOutput values.
// You can construct a concrete instance of `MainRouteTableAssociationMapInput` via:
//
//          MainRouteTableAssociationMap{ "key": MainRouteTableAssociationArgs{...} }
type MainRouteTableAssociationMapInput interface {
	pulumi.Input

	ToMainRouteTableAssociationMapOutput() MainRouteTableAssociationMapOutput
	ToMainRouteTableAssociationMapOutputWithContext(context.Context) MainRouteTableAssociationMapOutput
}

type MainRouteTableAssociationMap map[string]MainRouteTableAssociationInput

func (MainRouteTableAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*MainRouteTableAssociation)(nil))
}

func (i MainRouteTableAssociationMap) ToMainRouteTableAssociationMapOutput() MainRouteTableAssociationMapOutput {
	return i.ToMainRouteTableAssociationMapOutputWithContext(context.Background())
}

func (i MainRouteTableAssociationMap) ToMainRouteTableAssociationMapOutputWithContext(ctx context.Context) MainRouteTableAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MainRouteTableAssociationMapOutput)
}

type MainRouteTableAssociationOutput struct {
	*pulumi.OutputState
}

func (MainRouteTableAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MainRouteTableAssociation)(nil))
}

func (o MainRouteTableAssociationOutput) ToMainRouteTableAssociationOutput() MainRouteTableAssociationOutput {
	return o
}

func (o MainRouteTableAssociationOutput) ToMainRouteTableAssociationOutputWithContext(ctx context.Context) MainRouteTableAssociationOutput {
	return o
}

func (o MainRouteTableAssociationOutput) ToMainRouteTableAssociationPtrOutput() MainRouteTableAssociationPtrOutput {
	return o.ToMainRouteTableAssociationPtrOutputWithContext(context.Background())
}

func (o MainRouteTableAssociationOutput) ToMainRouteTableAssociationPtrOutputWithContext(ctx context.Context) MainRouteTableAssociationPtrOutput {
	return o.ApplyT(func(v MainRouteTableAssociation) *MainRouteTableAssociation {
		return &v
	}).(MainRouteTableAssociationPtrOutput)
}

type MainRouteTableAssociationPtrOutput struct {
	*pulumi.OutputState
}

func (MainRouteTableAssociationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MainRouteTableAssociation)(nil))
}

func (o MainRouteTableAssociationPtrOutput) ToMainRouteTableAssociationPtrOutput() MainRouteTableAssociationPtrOutput {
	return o
}

func (o MainRouteTableAssociationPtrOutput) ToMainRouteTableAssociationPtrOutputWithContext(ctx context.Context) MainRouteTableAssociationPtrOutput {
	return o
}

type MainRouteTableAssociationArrayOutput struct{ *pulumi.OutputState }

func (MainRouteTableAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MainRouteTableAssociation)(nil))
}

func (o MainRouteTableAssociationArrayOutput) ToMainRouteTableAssociationArrayOutput() MainRouteTableAssociationArrayOutput {
	return o
}

func (o MainRouteTableAssociationArrayOutput) ToMainRouteTableAssociationArrayOutputWithContext(ctx context.Context) MainRouteTableAssociationArrayOutput {
	return o
}

func (o MainRouteTableAssociationArrayOutput) Index(i pulumi.IntInput) MainRouteTableAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MainRouteTableAssociation {
		return vs[0].([]MainRouteTableAssociation)[vs[1].(int)]
	}).(MainRouteTableAssociationOutput)
}

type MainRouteTableAssociationMapOutput struct{ *pulumi.OutputState }

func (MainRouteTableAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MainRouteTableAssociation)(nil))
}

func (o MainRouteTableAssociationMapOutput) ToMainRouteTableAssociationMapOutput() MainRouteTableAssociationMapOutput {
	return o
}

func (o MainRouteTableAssociationMapOutput) ToMainRouteTableAssociationMapOutputWithContext(ctx context.Context) MainRouteTableAssociationMapOutput {
	return o
}

func (o MainRouteTableAssociationMapOutput) MapIndex(k pulumi.StringInput) MainRouteTableAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MainRouteTableAssociation {
		return vs[0].(map[string]MainRouteTableAssociation)[vs[1].(string)]
	}).(MainRouteTableAssociationOutput)
}

func init() {
	pulumi.RegisterOutputType(MainRouteTableAssociationOutput{})
	pulumi.RegisterOutputType(MainRouteTableAssociationPtrOutput{})
	pulumi.RegisterOutputType(MainRouteTableAssociationArrayOutput{})
	pulumi.RegisterOutputType(MainRouteTableAssociationMapOutput{})
}
