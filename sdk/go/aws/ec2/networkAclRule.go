// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NetworkAclRule struct {
	pulumi.CustomResourceState

	CidrBlock     pulumi.StringPtrOutput `pulumi:"cidrBlock"`
	Egress        pulumi.BoolPtrOutput   `pulumi:"egress"`
	FromPort      pulumi.IntPtrOutput    `pulumi:"fromPort"`
	IcmpCode      pulumi.IntPtrOutput    `pulumi:"icmpCode"`
	IcmpType      pulumi.IntPtrOutput    `pulumi:"icmpType"`
	Ipv6CidrBlock pulumi.StringPtrOutput `pulumi:"ipv6CidrBlock"`
	NetworkAclId  pulumi.StringOutput    `pulumi:"networkAclId"`
	Protocol      pulumi.StringOutput    `pulumi:"protocol"`
	RuleAction    pulumi.StringOutput    `pulumi:"ruleAction"`
	RuleNumber    pulumi.IntOutput       `pulumi:"ruleNumber"`
	ToPort        pulumi.IntPtrOutput    `pulumi:"toPort"`
}

// NewNetworkAclRule registers a new resource with the given unique name, arguments, and options.
func NewNetworkAclRule(ctx *pulumi.Context,
	name string, args *NetworkAclRuleArgs, opts ...pulumi.ResourceOption) (*NetworkAclRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkAclId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkAclId'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.RuleAction == nil {
		return nil, errors.New("invalid value for required argument 'RuleAction'")
	}
	if args.RuleNumber == nil {
		return nil, errors.New("invalid value for required argument 'RuleNumber'")
	}
	var resource NetworkAclRule
	err := ctx.RegisterResource("aws:ec2/networkAclRule:NetworkAclRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkAclRule gets an existing NetworkAclRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkAclRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkAclRuleState, opts ...pulumi.ResourceOption) (*NetworkAclRule, error) {
	var resource NetworkAclRule
	err := ctx.ReadResource("aws:ec2/networkAclRule:NetworkAclRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkAclRule resources.
type networkAclRuleState struct {
	CidrBlock     *string `pulumi:"cidrBlock"`
	Egress        *bool   `pulumi:"egress"`
	FromPort      *int    `pulumi:"fromPort"`
	IcmpCode      *int    `pulumi:"icmpCode"`
	IcmpType      *int    `pulumi:"icmpType"`
	Ipv6CidrBlock *string `pulumi:"ipv6CidrBlock"`
	NetworkAclId  *string `pulumi:"networkAclId"`
	Protocol      *string `pulumi:"protocol"`
	RuleAction    *string `pulumi:"ruleAction"`
	RuleNumber    *int    `pulumi:"ruleNumber"`
	ToPort        *int    `pulumi:"toPort"`
}

type NetworkAclRuleState struct {
	CidrBlock     pulumi.StringPtrInput
	Egress        pulumi.BoolPtrInput
	FromPort      pulumi.IntPtrInput
	IcmpCode      pulumi.IntPtrInput
	IcmpType      pulumi.IntPtrInput
	Ipv6CidrBlock pulumi.StringPtrInput
	NetworkAclId  pulumi.StringPtrInput
	Protocol      pulumi.StringPtrInput
	RuleAction    pulumi.StringPtrInput
	RuleNumber    pulumi.IntPtrInput
	ToPort        pulumi.IntPtrInput
}

func (NetworkAclRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAclRuleState)(nil)).Elem()
}

type networkAclRuleArgs struct {
	CidrBlock     *string `pulumi:"cidrBlock"`
	Egress        *bool   `pulumi:"egress"`
	FromPort      *int    `pulumi:"fromPort"`
	IcmpCode      *int    `pulumi:"icmpCode"`
	IcmpType      *int    `pulumi:"icmpType"`
	Ipv6CidrBlock *string `pulumi:"ipv6CidrBlock"`
	NetworkAclId  string  `pulumi:"networkAclId"`
	Protocol      string  `pulumi:"protocol"`
	RuleAction    string  `pulumi:"ruleAction"`
	RuleNumber    int     `pulumi:"ruleNumber"`
	ToPort        *int    `pulumi:"toPort"`
}

// The set of arguments for constructing a NetworkAclRule resource.
type NetworkAclRuleArgs struct {
	CidrBlock     pulumi.StringPtrInput
	Egress        pulumi.BoolPtrInput
	FromPort      pulumi.IntPtrInput
	IcmpCode      pulumi.IntPtrInput
	IcmpType      pulumi.IntPtrInput
	Ipv6CidrBlock pulumi.StringPtrInput
	NetworkAclId  pulumi.StringInput
	Protocol      pulumi.StringInput
	RuleAction    pulumi.StringInput
	RuleNumber    pulumi.IntInput
	ToPort        pulumi.IntPtrInput
}

func (NetworkAclRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAclRuleArgs)(nil)).Elem()
}

type NetworkAclRuleInput interface {
	pulumi.Input

	ToNetworkAclRuleOutput() NetworkAclRuleOutput
	ToNetworkAclRuleOutputWithContext(ctx context.Context) NetworkAclRuleOutput
}

func (*NetworkAclRule) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkAclRule)(nil)).Elem()
}

func (i *NetworkAclRule) ToNetworkAclRuleOutput() NetworkAclRuleOutput {
	return i.ToNetworkAclRuleOutputWithContext(context.Background())
}

func (i *NetworkAclRule) ToNetworkAclRuleOutputWithContext(ctx context.Context) NetworkAclRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclRuleOutput)
}

// NetworkAclRuleArrayInput is an input type that accepts NetworkAclRuleArray and NetworkAclRuleArrayOutput values.
// You can construct a concrete instance of `NetworkAclRuleArrayInput` via:
//
//	NetworkAclRuleArray{ NetworkAclRuleArgs{...} }
type NetworkAclRuleArrayInput interface {
	pulumi.Input

	ToNetworkAclRuleArrayOutput() NetworkAclRuleArrayOutput
	ToNetworkAclRuleArrayOutputWithContext(context.Context) NetworkAclRuleArrayOutput
}

type NetworkAclRuleArray []NetworkAclRuleInput

func (NetworkAclRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkAclRule)(nil)).Elem()
}

func (i NetworkAclRuleArray) ToNetworkAclRuleArrayOutput() NetworkAclRuleArrayOutput {
	return i.ToNetworkAclRuleArrayOutputWithContext(context.Background())
}

func (i NetworkAclRuleArray) ToNetworkAclRuleArrayOutputWithContext(ctx context.Context) NetworkAclRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclRuleArrayOutput)
}

// NetworkAclRuleMapInput is an input type that accepts NetworkAclRuleMap and NetworkAclRuleMapOutput values.
// You can construct a concrete instance of `NetworkAclRuleMapInput` via:
//
//	NetworkAclRuleMap{ "key": NetworkAclRuleArgs{...} }
type NetworkAclRuleMapInput interface {
	pulumi.Input

	ToNetworkAclRuleMapOutput() NetworkAclRuleMapOutput
	ToNetworkAclRuleMapOutputWithContext(context.Context) NetworkAclRuleMapOutput
}

type NetworkAclRuleMap map[string]NetworkAclRuleInput

func (NetworkAclRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkAclRule)(nil)).Elem()
}

func (i NetworkAclRuleMap) ToNetworkAclRuleMapOutput() NetworkAclRuleMapOutput {
	return i.ToNetworkAclRuleMapOutputWithContext(context.Background())
}

func (i NetworkAclRuleMap) ToNetworkAclRuleMapOutputWithContext(ctx context.Context) NetworkAclRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclRuleMapOutput)
}

type NetworkAclRuleOutput struct{ *pulumi.OutputState }

func (NetworkAclRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkAclRule)(nil)).Elem()
}

func (o NetworkAclRuleOutput) ToNetworkAclRuleOutput() NetworkAclRuleOutput {
	return o
}

func (o NetworkAclRuleOutput) ToNetworkAclRuleOutputWithContext(ctx context.Context) NetworkAclRuleOutput {
	return o
}

func (o NetworkAclRuleOutput) CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkAclRule) pulumi.StringPtrOutput { return v.CidrBlock }).(pulumi.StringPtrOutput)
}

func (o NetworkAclRuleOutput) Egress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkAclRule) pulumi.BoolPtrOutput { return v.Egress }).(pulumi.BoolPtrOutput)
}

func (o NetworkAclRuleOutput) FromPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkAclRule) pulumi.IntPtrOutput { return v.FromPort }).(pulumi.IntPtrOutput)
}

func (o NetworkAclRuleOutput) IcmpCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkAclRule) pulumi.IntPtrOutput { return v.IcmpCode }).(pulumi.IntPtrOutput)
}

func (o NetworkAclRuleOutput) IcmpType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkAclRule) pulumi.IntPtrOutput { return v.IcmpType }).(pulumi.IntPtrOutput)
}

func (o NetworkAclRuleOutput) Ipv6CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkAclRule) pulumi.StringPtrOutput { return v.Ipv6CidrBlock }).(pulumi.StringPtrOutput)
}

func (o NetworkAclRuleOutput) NetworkAclId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkAclRule) pulumi.StringOutput { return v.NetworkAclId }).(pulumi.StringOutput)
}

func (o NetworkAclRuleOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkAclRule) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

func (o NetworkAclRuleOutput) RuleAction() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkAclRule) pulumi.StringOutput { return v.RuleAction }).(pulumi.StringOutput)
}

func (o NetworkAclRuleOutput) RuleNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *NetworkAclRule) pulumi.IntOutput { return v.RuleNumber }).(pulumi.IntOutput)
}

func (o NetworkAclRuleOutput) ToPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkAclRule) pulumi.IntPtrOutput { return v.ToPort }).(pulumi.IntPtrOutput)
}

type NetworkAclRuleArrayOutput struct{ *pulumi.OutputState }

func (NetworkAclRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkAclRule)(nil)).Elem()
}

func (o NetworkAclRuleArrayOutput) ToNetworkAclRuleArrayOutput() NetworkAclRuleArrayOutput {
	return o
}

func (o NetworkAclRuleArrayOutput) ToNetworkAclRuleArrayOutputWithContext(ctx context.Context) NetworkAclRuleArrayOutput {
	return o
}

func (o NetworkAclRuleArrayOutput) Index(i pulumi.IntInput) NetworkAclRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkAclRule {
		return vs[0].([]*NetworkAclRule)[vs[1].(int)]
	}).(NetworkAclRuleOutput)
}

type NetworkAclRuleMapOutput struct{ *pulumi.OutputState }

func (NetworkAclRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkAclRule)(nil)).Elem()
}

func (o NetworkAclRuleMapOutput) ToNetworkAclRuleMapOutput() NetworkAclRuleMapOutput {
	return o
}

func (o NetworkAclRuleMapOutput) ToNetworkAclRuleMapOutputWithContext(ctx context.Context) NetworkAclRuleMapOutput {
	return o
}

func (o NetworkAclRuleMapOutput) MapIndex(k pulumi.StringInput) NetworkAclRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkAclRule {
		return vs[0].(map[string]*NetworkAclRule)[vs[1].(string)]
	}).(NetworkAclRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclRuleInput)(nil)).Elem(), &NetworkAclRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclRuleArrayInput)(nil)).Elem(), NetworkAclRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclRuleMapInput)(nil)).Elem(), NetworkAclRuleMap{})
	pulumi.RegisterOutputType(NetworkAclRuleOutput{})
	pulumi.RegisterOutputType(NetworkAclRuleArrayOutput{})
	pulumi.RegisterOutputType(NetworkAclRuleMapOutput{})
}
