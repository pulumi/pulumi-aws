// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// -> **Note:** There is only a single subscription allowed per account.
// 
// To help you understand the charges for your Spot instances, Amazon EC2 provides a data feed that describes your Spot instance usage and pricing.
// This data feed is sent to an Amazon S3 bucket that you specify when you subscribe to the data feed.
type SpotDatafeedSubscription struct {
	s *pulumi.ResourceState
}

// NewSpotDatafeedSubscription registers a new resource with the given unique name, arguments, and options.
func NewSpotDatafeedSubscription(ctx *pulumi.Context,
	name string, args *SpotDatafeedSubscriptionArgs, opts ...pulumi.ResourceOpt) (*SpotDatafeedSubscription, error) {
	if args == nil || args.Bucket == nil {
		return nil, errors.New("missing required argument 'Bucket'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["bucket"] = nil
		inputs["prefix"] = nil
	} else {
		inputs["bucket"] = args.Bucket
		inputs["prefix"] = args.Prefix
	}
	s, err := ctx.RegisterResource("aws:ec2/spotDatafeedSubscription:SpotDatafeedSubscription", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SpotDatafeedSubscription{s: s}, nil
}

// GetSpotDatafeedSubscription gets an existing SpotDatafeedSubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpotDatafeedSubscription(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SpotDatafeedSubscriptionState, opts ...pulumi.ResourceOpt) (*SpotDatafeedSubscription, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["bucket"] = state.Bucket
		inputs["prefix"] = state.Prefix
	}
	s, err := ctx.ReadResource("aws:ec2/spotDatafeedSubscription:SpotDatafeedSubscription", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SpotDatafeedSubscription{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SpotDatafeedSubscription) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SpotDatafeedSubscription) ID() *pulumi.IDOutput {
	return r.s.ID
}

// The Amazon S3 bucket in which to store the Spot instance data feed.
func (r *SpotDatafeedSubscription) Bucket() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["bucket"])
}

// Path of folder inside bucket to place spot pricing data.
func (r *SpotDatafeedSubscription) Prefix() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["prefix"])
}

// Input properties used for looking up and filtering SpotDatafeedSubscription resources.
type SpotDatafeedSubscriptionState struct {
	// The Amazon S3 bucket in which to store the Spot instance data feed.
	Bucket interface{}
	// Path of folder inside bucket to place spot pricing data.
	Prefix interface{}
}

// The set of arguments for constructing a SpotDatafeedSubscription resource.
type SpotDatafeedSubscriptionArgs struct {
	// The Amazon S3 bucket in which to store the Spot instance data feed.
	Bucket interface{}
	// Path of folder inside bucket to place spot pricing data.
	Prefix interface{}
}
