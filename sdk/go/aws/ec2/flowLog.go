// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FlowLog struct {
	pulumi.CustomResourceState

	Arn                pulumi.StringOutput                `pulumi:"arn"`
	DestinationOptions FlowLogDestinationOptionsPtrOutput `pulumi:"destinationOptions"`
	EniId              pulumi.StringPtrOutput             `pulumi:"eniId"`
	IamRoleArn         pulumi.StringPtrOutput             `pulumi:"iamRoleArn"`
	LogDestination     pulumi.StringOutput                `pulumi:"logDestination"`
	LogDestinationType pulumi.StringPtrOutput             `pulumi:"logDestinationType"`
	LogFormat          pulumi.StringOutput                `pulumi:"logFormat"`
	// Deprecated: use 'log_destination' argument instead
	LogGroupName               pulumi.StringOutput    `pulumi:"logGroupName"`
	MaxAggregationInterval     pulumi.IntPtrOutput    `pulumi:"maxAggregationInterval"`
	SubnetId                   pulumi.StringPtrOutput `pulumi:"subnetId"`
	Tags                       pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll                    pulumi.StringMapOutput `pulumi:"tagsAll"`
	TrafficType                pulumi.StringPtrOutput `pulumi:"trafficType"`
	TransitGatewayAttachmentId pulumi.StringPtrOutput `pulumi:"transitGatewayAttachmentId"`
	TransitGatewayId           pulumi.StringPtrOutput `pulumi:"transitGatewayId"`
	VpcId                      pulumi.StringPtrOutput `pulumi:"vpcId"`
}

// NewFlowLog registers a new resource with the given unique name, arguments, and options.
func NewFlowLog(ctx *pulumi.Context,
	name string, args *FlowLogArgs, opts ...pulumi.ResourceOption) (*FlowLog, error) {
	if args == nil {
		args = &FlowLogArgs{}
	}

	var resource FlowLog
	err := ctx.RegisterResource("aws:ec2/flowLog:FlowLog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFlowLog gets an existing FlowLog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFlowLog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FlowLogState, opts ...pulumi.ResourceOption) (*FlowLog, error) {
	var resource FlowLog
	err := ctx.ReadResource("aws:ec2/flowLog:FlowLog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FlowLog resources.
type flowLogState struct {
	Arn                *string                    `pulumi:"arn"`
	DestinationOptions *FlowLogDestinationOptions `pulumi:"destinationOptions"`
	EniId              *string                    `pulumi:"eniId"`
	IamRoleArn         *string                    `pulumi:"iamRoleArn"`
	LogDestination     *string                    `pulumi:"logDestination"`
	LogDestinationType *string                    `pulumi:"logDestinationType"`
	LogFormat          *string                    `pulumi:"logFormat"`
	// Deprecated: use 'log_destination' argument instead
	LogGroupName               *string           `pulumi:"logGroupName"`
	MaxAggregationInterval     *int              `pulumi:"maxAggregationInterval"`
	SubnetId                   *string           `pulumi:"subnetId"`
	Tags                       map[string]string `pulumi:"tags"`
	TagsAll                    map[string]string `pulumi:"tagsAll"`
	TrafficType                *string           `pulumi:"trafficType"`
	TransitGatewayAttachmentId *string           `pulumi:"transitGatewayAttachmentId"`
	TransitGatewayId           *string           `pulumi:"transitGatewayId"`
	VpcId                      *string           `pulumi:"vpcId"`
}

type FlowLogState struct {
	Arn                pulumi.StringPtrInput
	DestinationOptions FlowLogDestinationOptionsPtrInput
	EniId              pulumi.StringPtrInput
	IamRoleArn         pulumi.StringPtrInput
	LogDestination     pulumi.StringPtrInput
	LogDestinationType pulumi.StringPtrInput
	LogFormat          pulumi.StringPtrInput
	// Deprecated: use 'log_destination' argument instead
	LogGroupName               pulumi.StringPtrInput
	MaxAggregationInterval     pulumi.IntPtrInput
	SubnetId                   pulumi.StringPtrInput
	Tags                       pulumi.StringMapInput
	TagsAll                    pulumi.StringMapInput
	TrafficType                pulumi.StringPtrInput
	TransitGatewayAttachmentId pulumi.StringPtrInput
	TransitGatewayId           pulumi.StringPtrInput
	VpcId                      pulumi.StringPtrInput
}

func (FlowLogState) ElementType() reflect.Type {
	return reflect.TypeOf((*flowLogState)(nil)).Elem()
}

type flowLogArgs struct {
	DestinationOptions *FlowLogDestinationOptions `pulumi:"destinationOptions"`
	EniId              *string                    `pulumi:"eniId"`
	IamRoleArn         *string                    `pulumi:"iamRoleArn"`
	LogDestination     *string                    `pulumi:"logDestination"`
	LogDestinationType *string                    `pulumi:"logDestinationType"`
	LogFormat          *string                    `pulumi:"logFormat"`
	// Deprecated: use 'log_destination' argument instead
	LogGroupName               *string           `pulumi:"logGroupName"`
	MaxAggregationInterval     *int              `pulumi:"maxAggregationInterval"`
	SubnetId                   *string           `pulumi:"subnetId"`
	Tags                       map[string]string `pulumi:"tags"`
	TrafficType                *string           `pulumi:"trafficType"`
	TransitGatewayAttachmentId *string           `pulumi:"transitGatewayAttachmentId"`
	TransitGatewayId           *string           `pulumi:"transitGatewayId"`
	VpcId                      *string           `pulumi:"vpcId"`
}

// The set of arguments for constructing a FlowLog resource.
type FlowLogArgs struct {
	DestinationOptions FlowLogDestinationOptionsPtrInput
	EniId              pulumi.StringPtrInput
	IamRoleArn         pulumi.StringPtrInput
	LogDestination     pulumi.StringPtrInput
	LogDestinationType pulumi.StringPtrInput
	LogFormat          pulumi.StringPtrInput
	// Deprecated: use 'log_destination' argument instead
	LogGroupName               pulumi.StringPtrInput
	MaxAggregationInterval     pulumi.IntPtrInput
	SubnetId                   pulumi.StringPtrInput
	Tags                       pulumi.StringMapInput
	TrafficType                pulumi.StringPtrInput
	TransitGatewayAttachmentId pulumi.StringPtrInput
	TransitGatewayId           pulumi.StringPtrInput
	VpcId                      pulumi.StringPtrInput
}

func (FlowLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*flowLogArgs)(nil)).Elem()
}

type FlowLogInput interface {
	pulumi.Input

	ToFlowLogOutput() FlowLogOutput
	ToFlowLogOutputWithContext(ctx context.Context) FlowLogOutput
}

func (*FlowLog) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowLog)(nil)).Elem()
}

func (i *FlowLog) ToFlowLogOutput() FlowLogOutput {
	return i.ToFlowLogOutputWithContext(context.Background())
}

func (i *FlowLog) ToFlowLogOutputWithContext(ctx context.Context) FlowLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowLogOutput)
}

// FlowLogArrayInput is an input type that accepts FlowLogArray and FlowLogArrayOutput values.
// You can construct a concrete instance of `FlowLogArrayInput` via:
//
//	FlowLogArray{ FlowLogArgs{...} }
type FlowLogArrayInput interface {
	pulumi.Input

	ToFlowLogArrayOutput() FlowLogArrayOutput
	ToFlowLogArrayOutputWithContext(context.Context) FlowLogArrayOutput
}

type FlowLogArray []FlowLogInput

func (FlowLogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlowLog)(nil)).Elem()
}

func (i FlowLogArray) ToFlowLogArrayOutput() FlowLogArrayOutput {
	return i.ToFlowLogArrayOutputWithContext(context.Background())
}

func (i FlowLogArray) ToFlowLogArrayOutputWithContext(ctx context.Context) FlowLogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowLogArrayOutput)
}

// FlowLogMapInput is an input type that accepts FlowLogMap and FlowLogMapOutput values.
// You can construct a concrete instance of `FlowLogMapInput` via:
//
//	FlowLogMap{ "key": FlowLogArgs{...} }
type FlowLogMapInput interface {
	pulumi.Input

	ToFlowLogMapOutput() FlowLogMapOutput
	ToFlowLogMapOutputWithContext(context.Context) FlowLogMapOutput
}

type FlowLogMap map[string]FlowLogInput

func (FlowLogMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlowLog)(nil)).Elem()
}

func (i FlowLogMap) ToFlowLogMapOutput() FlowLogMapOutput {
	return i.ToFlowLogMapOutputWithContext(context.Background())
}

func (i FlowLogMap) ToFlowLogMapOutputWithContext(ctx context.Context) FlowLogMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowLogMapOutput)
}

type FlowLogOutput struct{ *pulumi.OutputState }

func (FlowLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowLog)(nil)).Elem()
}

func (o FlowLogOutput) ToFlowLogOutput() FlowLogOutput {
	return o
}

func (o FlowLogOutput) ToFlowLogOutputWithContext(ctx context.Context) FlowLogOutput {
	return o
}

func (o FlowLogOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o FlowLogOutput) DestinationOptions() FlowLogDestinationOptionsPtrOutput {
	return o.ApplyT(func(v *FlowLog) FlowLogDestinationOptionsPtrOutput { return v.DestinationOptions }).(FlowLogDestinationOptionsPtrOutput)
}

func (o FlowLogOutput) EniId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringPtrOutput { return v.EniId }).(pulumi.StringPtrOutput)
}

func (o FlowLogOutput) IamRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringPtrOutput { return v.IamRoleArn }).(pulumi.StringPtrOutput)
}

func (o FlowLogOutput) LogDestination() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.LogDestination }).(pulumi.StringOutput)
}

func (o FlowLogOutput) LogDestinationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringPtrOutput { return v.LogDestinationType }).(pulumi.StringPtrOutput)
}

func (o FlowLogOutput) LogFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.LogFormat }).(pulumi.StringOutput)
}

// Deprecated: use 'log_destination' argument instead
func (o FlowLogOutput) LogGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.LogGroupName }).(pulumi.StringOutput)
}

func (o FlowLogOutput) MaxAggregationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.IntPtrOutput { return v.MaxAggregationInterval }).(pulumi.IntPtrOutput)
}

func (o FlowLogOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringPtrOutput { return v.SubnetId }).(pulumi.StringPtrOutput)
}

func (o FlowLogOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o FlowLogOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o FlowLogOutput) TrafficType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringPtrOutput { return v.TrafficType }).(pulumi.StringPtrOutput)
}

func (o FlowLogOutput) TransitGatewayAttachmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringPtrOutput { return v.TransitGatewayAttachmentId }).(pulumi.StringPtrOutput)
}

func (o FlowLogOutput) TransitGatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringPtrOutput { return v.TransitGatewayId }).(pulumi.StringPtrOutput)
}

func (o FlowLogOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringPtrOutput { return v.VpcId }).(pulumi.StringPtrOutput)
}

type FlowLogArrayOutput struct{ *pulumi.OutputState }

func (FlowLogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlowLog)(nil)).Elem()
}

func (o FlowLogArrayOutput) ToFlowLogArrayOutput() FlowLogArrayOutput {
	return o
}

func (o FlowLogArrayOutput) ToFlowLogArrayOutputWithContext(ctx context.Context) FlowLogArrayOutput {
	return o
}

func (o FlowLogArrayOutput) Index(i pulumi.IntInput) FlowLogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FlowLog {
		return vs[0].([]*FlowLog)[vs[1].(int)]
	}).(FlowLogOutput)
}

type FlowLogMapOutput struct{ *pulumi.OutputState }

func (FlowLogMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlowLog)(nil)).Elem()
}

func (o FlowLogMapOutput) ToFlowLogMapOutput() FlowLogMapOutput {
	return o
}

func (o FlowLogMapOutput) ToFlowLogMapOutputWithContext(ctx context.Context) FlowLogMapOutput {
	return o
}

func (o FlowLogMapOutput) MapIndex(k pulumi.StringInput) FlowLogOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FlowLog {
		return vs[0].(map[string]*FlowLog)[vs[1].(string)]
	}).(FlowLogOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FlowLogInput)(nil)).Elem(), &FlowLog{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowLogArrayInput)(nil)).Elem(), FlowLogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowLogMapInput)(nil)).Elem(), FlowLogMap{})
	pulumi.RegisterOutputType(FlowLogOutput{})
	pulumi.RegisterOutputType(FlowLogArrayOutput{})
	pulumi.RegisterOutputType(FlowLogMapOutput{})
}
