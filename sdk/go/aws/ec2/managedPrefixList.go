// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ManagedPrefixList struct {
	pulumi.CustomResourceState

	AddressFamily pulumi.StringOutput                   `pulumi:"addressFamily"`
	Arn           pulumi.StringOutput                   `pulumi:"arn"`
	Entries       ManagedPrefixListEntryTypeArrayOutput `pulumi:"entries"`
	MaxEntries    pulumi.IntOutput                      `pulumi:"maxEntries"`
	Name          pulumi.StringOutput                   `pulumi:"name"`
	OwnerId       pulumi.StringOutput                   `pulumi:"ownerId"`
	Tags          pulumi.StringMapOutput                `pulumi:"tags"`
	TagsAll       pulumi.StringMapOutput                `pulumi:"tagsAll"`
	Version       pulumi.IntOutput                      `pulumi:"version"`
}

// NewManagedPrefixList registers a new resource with the given unique name, arguments, and options.
func NewManagedPrefixList(ctx *pulumi.Context,
	name string, args *ManagedPrefixListArgs, opts ...pulumi.ResourceOption) (*ManagedPrefixList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AddressFamily == nil {
		return nil, errors.New("invalid value for required argument 'AddressFamily'")
	}
	if args.MaxEntries == nil {
		return nil, errors.New("invalid value for required argument 'MaxEntries'")
	}
	var resource ManagedPrefixList
	err := ctx.RegisterResource("aws:ec2/managedPrefixList:ManagedPrefixList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedPrefixList gets an existing ManagedPrefixList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedPrefixList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedPrefixListState, opts ...pulumi.ResourceOption) (*ManagedPrefixList, error) {
	var resource ManagedPrefixList
	err := ctx.ReadResource("aws:ec2/managedPrefixList:ManagedPrefixList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedPrefixList resources.
type managedPrefixListState struct {
	AddressFamily *string                      `pulumi:"addressFamily"`
	Arn           *string                      `pulumi:"arn"`
	Entries       []ManagedPrefixListEntryType `pulumi:"entries"`
	MaxEntries    *int                         `pulumi:"maxEntries"`
	Name          *string                      `pulumi:"name"`
	OwnerId       *string                      `pulumi:"ownerId"`
	Tags          map[string]string            `pulumi:"tags"`
	TagsAll       map[string]string            `pulumi:"tagsAll"`
	Version       *int                         `pulumi:"version"`
}

type ManagedPrefixListState struct {
	AddressFamily pulumi.StringPtrInput
	Arn           pulumi.StringPtrInput
	Entries       ManagedPrefixListEntryTypeArrayInput
	MaxEntries    pulumi.IntPtrInput
	Name          pulumi.StringPtrInput
	OwnerId       pulumi.StringPtrInput
	Tags          pulumi.StringMapInput
	TagsAll       pulumi.StringMapInput
	Version       pulumi.IntPtrInput
}

func (ManagedPrefixListState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedPrefixListState)(nil)).Elem()
}

type managedPrefixListArgs struct {
	AddressFamily string                       `pulumi:"addressFamily"`
	Entries       []ManagedPrefixListEntryType `pulumi:"entries"`
	MaxEntries    int                          `pulumi:"maxEntries"`
	Name          *string                      `pulumi:"name"`
	Tags          map[string]string            `pulumi:"tags"`
}

// The set of arguments for constructing a ManagedPrefixList resource.
type ManagedPrefixListArgs struct {
	AddressFamily pulumi.StringInput
	Entries       ManagedPrefixListEntryTypeArrayInput
	MaxEntries    pulumi.IntInput
	Name          pulumi.StringPtrInput
	Tags          pulumi.StringMapInput
}

func (ManagedPrefixListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedPrefixListArgs)(nil)).Elem()
}

type ManagedPrefixListInput interface {
	pulumi.Input

	ToManagedPrefixListOutput() ManagedPrefixListOutput
	ToManagedPrefixListOutputWithContext(ctx context.Context) ManagedPrefixListOutput
}

func (*ManagedPrefixList) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedPrefixList)(nil)).Elem()
}

func (i *ManagedPrefixList) ToManagedPrefixListOutput() ManagedPrefixListOutput {
	return i.ToManagedPrefixListOutputWithContext(context.Background())
}

func (i *ManagedPrefixList) ToManagedPrefixListOutputWithContext(ctx context.Context) ManagedPrefixListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedPrefixListOutput)
}

// ManagedPrefixListArrayInput is an input type that accepts ManagedPrefixListArray and ManagedPrefixListArrayOutput values.
// You can construct a concrete instance of `ManagedPrefixListArrayInput` via:
//
//	ManagedPrefixListArray{ ManagedPrefixListArgs{...} }
type ManagedPrefixListArrayInput interface {
	pulumi.Input

	ToManagedPrefixListArrayOutput() ManagedPrefixListArrayOutput
	ToManagedPrefixListArrayOutputWithContext(context.Context) ManagedPrefixListArrayOutput
}

type ManagedPrefixListArray []ManagedPrefixListInput

func (ManagedPrefixListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedPrefixList)(nil)).Elem()
}

func (i ManagedPrefixListArray) ToManagedPrefixListArrayOutput() ManagedPrefixListArrayOutput {
	return i.ToManagedPrefixListArrayOutputWithContext(context.Background())
}

func (i ManagedPrefixListArray) ToManagedPrefixListArrayOutputWithContext(ctx context.Context) ManagedPrefixListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedPrefixListArrayOutput)
}

// ManagedPrefixListMapInput is an input type that accepts ManagedPrefixListMap and ManagedPrefixListMapOutput values.
// You can construct a concrete instance of `ManagedPrefixListMapInput` via:
//
//	ManagedPrefixListMap{ "key": ManagedPrefixListArgs{...} }
type ManagedPrefixListMapInput interface {
	pulumi.Input

	ToManagedPrefixListMapOutput() ManagedPrefixListMapOutput
	ToManagedPrefixListMapOutputWithContext(context.Context) ManagedPrefixListMapOutput
}

type ManagedPrefixListMap map[string]ManagedPrefixListInput

func (ManagedPrefixListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedPrefixList)(nil)).Elem()
}

func (i ManagedPrefixListMap) ToManagedPrefixListMapOutput() ManagedPrefixListMapOutput {
	return i.ToManagedPrefixListMapOutputWithContext(context.Background())
}

func (i ManagedPrefixListMap) ToManagedPrefixListMapOutputWithContext(ctx context.Context) ManagedPrefixListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedPrefixListMapOutput)
}

type ManagedPrefixListOutput struct{ *pulumi.OutputState }

func (ManagedPrefixListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedPrefixList)(nil)).Elem()
}

func (o ManagedPrefixListOutput) ToManagedPrefixListOutput() ManagedPrefixListOutput {
	return o
}

func (o ManagedPrefixListOutput) ToManagedPrefixListOutputWithContext(ctx context.Context) ManagedPrefixListOutput {
	return o
}

func (o ManagedPrefixListOutput) AddressFamily() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedPrefixList) pulumi.StringOutput { return v.AddressFamily }).(pulumi.StringOutput)
}

func (o ManagedPrefixListOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedPrefixList) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ManagedPrefixListOutput) Entries() ManagedPrefixListEntryTypeArrayOutput {
	return o.ApplyT(func(v *ManagedPrefixList) ManagedPrefixListEntryTypeArrayOutput { return v.Entries }).(ManagedPrefixListEntryTypeArrayOutput)
}

func (o ManagedPrefixListOutput) MaxEntries() pulumi.IntOutput {
	return o.ApplyT(func(v *ManagedPrefixList) pulumi.IntOutput { return v.MaxEntries }).(pulumi.IntOutput)
}

func (o ManagedPrefixListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedPrefixList) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ManagedPrefixListOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedPrefixList) pulumi.StringOutput { return v.OwnerId }).(pulumi.StringOutput)
}

func (o ManagedPrefixListOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ManagedPrefixList) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ManagedPrefixListOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ManagedPrefixList) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o ManagedPrefixListOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *ManagedPrefixList) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type ManagedPrefixListArrayOutput struct{ *pulumi.OutputState }

func (ManagedPrefixListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedPrefixList)(nil)).Elem()
}

func (o ManagedPrefixListArrayOutput) ToManagedPrefixListArrayOutput() ManagedPrefixListArrayOutput {
	return o
}

func (o ManagedPrefixListArrayOutput) ToManagedPrefixListArrayOutputWithContext(ctx context.Context) ManagedPrefixListArrayOutput {
	return o
}

func (o ManagedPrefixListArrayOutput) Index(i pulumi.IntInput) ManagedPrefixListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ManagedPrefixList {
		return vs[0].([]*ManagedPrefixList)[vs[1].(int)]
	}).(ManagedPrefixListOutput)
}

type ManagedPrefixListMapOutput struct{ *pulumi.OutputState }

func (ManagedPrefixListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedPrefixList)(nil)).Elem()
}

func (o ManagedPrefixListMapOutput) ToManagedPrefixListMapOutput() ManagedPrefixListMapOutput {
	return o
}

func (o ManagedPrefixListMapOutput) ToManagedPrefixListMapOutputWithContext(ctx context.Context) ManagedPrefixListMapOutput {
	return o
}

func (o ManagedPrefixListMapOutput) MapIndex(k pulumi.StringInput) ManagedPrefixListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ManagedPrefixList {
		return vs[0].(map[string]*ManagedPrefixList)[vs[1].(string)]
	}).(ManagedPrefixListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedPrefixListInput)(nil)).Elem(), &ManagedPrefixList{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedPrefixListArrayInput)(nil)).Elem(), ManagedPrefixListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedPrefixListMapInput)(nil)).Elem(), ManagedPrefixListMap{})
	pulumi.RegisterOutputType(ManagedPrefixListOutput{})
	pulumi.RegisterOutputType(ManagedPrefixListArrayOutput{})
	pulumi.RegisterOutputType(ManagedPrefixListMapOutput{})
}
