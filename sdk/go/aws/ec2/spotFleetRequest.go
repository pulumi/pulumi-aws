// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Spot Fleet Requests can be imported using `id`, e.g.,
//
// ```sh
//
//	$ pulumi import aws:ec2/spotFleetRequest:SpotFleetRequest fleet sfr-005e9ec8-5546-4c31-b317-31a62325411e
//
// ```
type SpotFleetRequest struct {
	pulumi.CustomResourceState

	// Indicates how to allocate the target capacity across
	// the Spot pools specified by the Spot fleet request. The default is
	// `lowestPrice`.
	AllocationStrategy pulumi.StringPtrOutput `pulumi:"allocationStrategy"`
	ClientToken        pulumi.StringOutput    `pulumi:"clientToken"`
	// Indicates whether running Spot
	// instances should be terminated if the target capacity of the Spot fleet
	// request is decreased below the current size of the Spot fleet.
	ExcessCapacityTerminationPolicy pulumi.StringPtrOutput `pulumi:"excessCapacityTerminationPolicy"`
	// The type of fleet request. Indicates whether the Spot Fleet only requests the target
	// capacity or also attempts to maintain it. Default is `maintain`.
	FleetType pulumi.StringPtrOutput `pulumi:"fleetType"`
	// Grants the Spot fleet permission to terminate
	// Spot instances on your behalf when you cancel its Spot fleet request using
	// CancelSpotFleetRequests or when the Spot fleet request expires, if you set
	// terminateInstancesWithExpiration.
	IamFleetRole pulumi.StringOutput `pulumi:"iamFleetRole"`
	// Indicates whether a Spot
	// instance stops or terminates when it is interrupted. Default is
	// `terminate`.
	InstanceInterruptionBehaviour pulumi.StringPtrOutput `pulumi:"instanceInterruptionBehaviour"`
	// The number of Spot pools across which to allocate your target Spot capacity.
	// Valid only when `allocationStrategy` is set to `lowestPrice`. Spot Fleet selects
	// the cheapest Spot pools and evenly allocates your target Spot capacity across
	// the number of Spot pools that you specify.
	InstancePoolsToUseCount pulumi.IntPtrOutput `pulumi:"instancePoolsToUseCount"`
	// Used to define the launch configuration of the
	// spot-fleet request. Can be specified multiple times to define different bids
	// across different markets and instance types. Conflicts with `launchTemplateConfig`. At least one of `launchSpecification` or `launchTemplateConfig` is required.
	LaunchSpecifications SpotFleetRequestLaunchSpecificationArrayOutput `pulumi:"launchSpecifications"`
	// Launch template configuration block. See Launch Template Configs below for more details. Conflicts with `launchSpecification`. At least one of `launchSpecification` or `launchTemplateConfig` is required.
	LaunchTemplateConfigs SpotFleetRequestLaunchTemplateConfigArrayOutput `pulumi:"launchTemplateConfigs"`
	// A list of elastic load balancer names to add to the Spot fleet.
	LoadBalancers pulumi.StringArrayOutput `pulumi:"loadBalancers"`
	// The order of the launch template overrides to use in fulfilling On-Demand capacity. the possible values are: `lowestPrice` and `prioritized`. the default is `lowestPrice`.
	OnDemandAllocationStrategy pulumi.StringPtrOutput `pulumi:"onDemandAllocationStrategy"`
	// The maximum amount per hour for On-Demand Instances that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasnâ€™t met the target capacity.
	OnDemandMaxTotalPrice pulumi.StringPtrOutput `pulumi:"onDemandMaxTotalPrice"`
	// The number of On-Demand units to request. If the request type is `maintain`, you can specify a target capacity of 0 and add capacity later.
	OnDemandTargetCapacity pulumi.IntPtrOutput `pulumi:"onDemandTargetCapacity"`
	// Indicates whether Spot fleet should replace unhealthy instances. Default `false`.
	ReplaceUnhealthyInstances pulumi.BoolPtrOutput `pulumi:"replaceUnhealthyInstances"`
	// Nested argument containing maintenance strategies for managing your Spot Instances that are at an elevated risk of being interrupted. Defined below.
	SpotMaintenanceStrategies SpotFleetRequestSpotMaintenanceStrategiesPtrOutput `pulumi:"spotMaintenanceStrategies"`
	// The maximum spot bid for this override request.
	SpotPrice pulumi.StringPtrOutput `pulumi:"spotPrice"`
	// The state of the Spot fleet request.
	SpotRequestState pulumi.StringOutput `pulumi:"spotRequestState"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// The number of units to request. You can choose to set the
	// target capacity in terms of instances or a performance characteristic that is
	// important to your application workload, such as vCPUs, memory, or I/O.
	TargetCapacity pulumi.IntOutput `pulumi:"targetCapacity"`
	// The unit for the target capacity. This can only be done with `instanceRequirements` defined
	TargetCapacityUnitType pulumi.StringPtrOutput `pulumi:"targetCapacityUnitType"`
	// A list of `alb.TargetGroup` ARNs, for use with Application Load Balancing.
	TargetGroupArns pulumi.StringArrayOutput `pulumi:"targetGroupArns"`
	// Indicates whether running Spot
	// instances should be terminated when the resource is deleted (and the Spot fleet request cancelled).
	// If no value is specified, the value of the `terminateInstancesWithExpiration` argument is used.
	TerminateInstancesOnDelete pulumi.StringPtrOutput `pulumi:"terminateInstancesOnDelete"`
	// Indicates whether running Spot
	// instances should be terminated when the Spot fleet request expires.
	TerminateInstancesWithExpiration pulumi.BoolPtrOutput `pulumi:"terminateInstancesWithExpiration"`
	// The start date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
	ValidFrom pulumi.StringPtrOutput `pulumi:"validFrom"`
	// The end date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new Spot instance requests are placed or enabled to fulfill the request.
	ValidUntil pulumi.StringPtrOutput `pulumi:"validUntil"`
	// If set, this provider will
	// wait for the Spot Request to be fulfilled, and will throw an error if the
	// timeout of 10m is reached.
	WaitForFulfillment pulumi.BoolPtrOutput `pulumi:"waitForFulfillment"`
}

// NewSpotFleetRequest registers a new resource with the given unique name, arguments, and options.
func NewSpotFleetRequest(ctx *pulumi.Context,
	name string, args *SpotFleetRequestArgs, opts ...pulumi.ResourceOption) (*SpotFleetRequest, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IamFleetRole == nil {
		return nil, errors.New("invalid value for required argument 'IamFleetRole'")
	}
	if args.TargetCapacity == nil {
		return nil, errors.New("invalid value for required argument 'TargetCapacity'")
	}
	var resource SpotFleetRequest
	err := ctx.RegisterResource("aws:ec2/spotFleetRequest:SpotFleetRequest", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSpotFleetRequest gets an existing SpotFleetRequest resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpotFleetRequest(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SpotFleetRequestState, opts ...pulumi.ResourceOption) (*SpotFleetRequest, error) {
	var resource SpotFleetRequest
	err := ctx.ReadResource("aws:ec2/spotFleetRequest:SpotFleetRequest", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SpotFleetRequest resources.
type spotFleetRequestState struct {
	// Indicates how to allocate the target capacity across
	// the Spot pools specified by the Spot fleet request. The default is
	// `lowestPrice`.
	AllocationStrategy *string `pulumi:"allocationStrategy"`
	ClientToken        *string `pulumi:"clientToken"`
	// Indicates whether running Spot
	// instances should be terminated if the target capacity of the Spot fleet
	// request is decreased below the current size of the Spot fleet.
	ExcessCapacityTerminationPolicy *string `pulumi:"excessCapacityTerminationPolicy"`
	// The type of fleet request. Indicates whether the Spot Fleet only requests the target
	// capacity or also attempts to maintain it. Default is `maintain`.
	FleetType *string `pulumi:"fleetType"`
	// Grants the Spot fleet permission to terminate
	// Spot instances on your behalf when you cancel its Spot fleet request using
	// CancelSpotFleetRequests or when the Spot fleet request expires, if you set
	// terminateInstancesWithExpiration.
	IamFleetRole *string `pulumi:"iamFleetRole"`
	// Indicates whether a Spot
	// instance stops or terminates when it is interrupted. Default is
	// `terminate`.
	InstanceInterruptionBehaviour *string `pulumi:"instanceInterruptionBehaviour"`
	// The number of Spot pools across which to allocate your target Spot capacity.
	// Valid only when `allocationStrategy` is set to `lowestPrice`. Spot Fleet selects
	// the cheapest Spot pools and evenly allocates your target Spot capacity across
	// the number of Spot pools that you specify.
	InstancePoolsToUseCount *int `pulumi:"instancePoolsToUseCount"`
	// Used to define the launch configuration of the
	// spot-fleet request. Can be specified multiple times to define different bids
	// across different markets and instance types. Conflicts with `launchTemplateConfig`. At least one of `launchSpecification` or `launchTemplateConfig` is required.
	LaunchSpecifications []SpotFleetRequestLaunchSpecification `pulumi:"launchSpecifications"`
	// Launch template configuration block. See Launch Template Configs below for more details. Conflicts with `launchSpecification`. At least one of `launchSpecification` or `launchTemplateConfig` is required.
	LaunchTemplateConfigs []SpotFleetRequestLaunchTemplateConfig `pulumi:"launchTemplateConfigs"`
	// A list of elastic load balancer names to add to the Spot fleet.
	LoadBalancers []string `pulumi:"loadBalancers"`
	// The order of the launch template overrides to use in fulfilling On-Demand capacity. the possible values are: `lowestPrice` and `prioritized`. the default is `lowestPrice`.
	OnDemandAllocationStrategy *string `pulumi:"onDemandAllocationStrategy"`
	// The maximum amount per hour for On-Demand Instances that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasnâ€™t met the target capacity.
	OnDemandMaxTotalPrice *string `pulumi:"onDemandMaxTotalPrice"`
	// The number of On-Demand units to request. If the request type is `maintain`, you can specify a target capacity of 0 and add capacity later.
	OnDemandTargetCapacity *int `pulumi:"onDemandTargetCapacity"`
	// Indicates whether Spot fleet should replace unhealthy instances. Default `false`.
	ReplaceUnhealthyInstances *bool `pulumi:"replaceUnhealthyInstances"`
	// Nested argument containing maintenance strategies for managing your Spot Instances that are at an elevated risk of being interrupted. Defined below.
	SpotMaintenanceStrategies *SpotFleetRequestSpotMaintenanceStrategies `pulumi:"spotMaintenanceStrategies"`
	// The maximum spot bid for this override request.
	SpotPrice *string `pulumi:"spotPrice"`
	// The state of the Spot fleet request.
	SpotRequestState *string `pulumi:"spotRequestState"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The number of units to request. You can choose to set the
	// target capacity in terms of instances or a performance characteristic that is
	// important to your application workload, such as vCPUs, memory, or I/O.
	TargetCapacity *int `pulumi:"targetCapacity"`
	// The unit for the target capacity. This can only be done with `instanceRequirements` defined
	TargetCapacityUnitType *string `pulumi:"targetCapacityUnitType"`
	// A list of `alb.TargetGroup` ARNs, for use with Application Load Balancing.
	TargetGroupArns []string `pulumi:"targetGroupArns"`
	// Indicates whether running Spot
	// instances should be terminated when the resource is deleted (and the Spot fleet request cancelled).
	// If no value is specified, the value of the `terminateInstancesWithExpiration` argument is used.
	TerminateInstancesOnDelete *string `pulumi:"terminateInstancesOnDelete"`
	// Indicates whether running Spot
	// instances should be terminated when the Spot fleet request expires.
	TerminateInstancesWithExpiration *bool `pulumi:"terminateInstancesWithExpiration"`
	// The start date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
	ValidFrom *string `pulumi:"validFrom"`
	// The end date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new Spot instance requests are placed or enabled to fulfill the request.
	ValidUntil *string `pulumi:"validUntil"`
	// If set, this provider will
	// wait for the Spot Request to be fulfilled, and will throw an error if the
	// timeout of 10m is reached.
	WaitForFulfillment *bool `pulumi:"waitForFulfillment"`
}

type SpotFleetRequestState struct {
	// Indicates how to allocate the target capacity across
	// the Spot pools specified by the Spot fleet request. The default is
	// `lowestPrice`.
	AllocationStrategy pulumi.StringPtrInput
	ClientToken        pulumi.StringPtrInput
	// Indicates whether running Spot
	// instances should be terminated if the target capacity of the Spot fleet
	// request is decreased below the current size of the Spot fleet.
	ExcessCapacityTerminationPolicy pulumi.StringPtrInput
	// The type of fleet request. Indicates whether the Spot Fleet only requests the target
	// capacity or also attempts to maintain it. Default is `maintain`.
	FleetType pulumi.StringPtrInput
	// Grants the Spot fleet permission to terminate
	// Spot instances on your behalf when you cancel its Spot fleet request using
	// CancelSpotFleetRequests or when the Spot fleet request expires, if you set
	// terminateInstancesWithExpiration.
	IamFleetRole pulumi.StringPtrInput
	// Indicates whether a Spot
	// instance stops or terminates when it is interrupted. Default is
	// `terminate`.
	InstanceInterruptionBehaviour pulumi.StringPtrInput
	// The number of Spot pools across which to allocate your target Spot capacity.
	// Valid only when `allocationStrategy` is set to `lowestPrice`. Spot Fleet selects
	// the cheapest Spot pools and evenly allocates your target Spot capacity across
	// the number of Spot pools that you specify.
	InstancePoolsToUseCount pulumi.IntPtrInput
	// Used to define the launch configuration of the
	// spot-fleet request. Can be specified multiple times to define different bids
	// across different markets and instance types. Conflicts with `launchTemplateConfig`. At least one of `launchSpecification` or `launchTemplateConfig` is required.
	LaunchSpecifications SpotFleetRequestLaunchSpecificationArrayInput
	// Launch template configuration block. See Launch Template Configs below for more details. Conflicts with `launchSpecification`. At least one of `launchSpecification` or `launchTemplateConfig` is required.
	LaunchTemplateConfigs SpotFleetRequestLaunchTemplateConfigArrayInput
	// A list of elastic load balancer names to add to the Spot fleet.
	LoadBalancers pulumi.StringArrayInput
	// The order of the launch template overrides to use in fulfilling On-Demand capacity. the possible values are: `lowestPrice` and `prioritized`. the default is `lowestPrice`.
	OnDemandAllocationStrategy pulumi.StringPtrInput
	// The maximum amount per hour for On-Demand Instances that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasnâ€™t met the target capacity.
	OnDemandMaxTotalPrice pulumi.StringPtrInput
	// The number of On-Demand units to request. If the request type is `maintain`, you can specify a target capacity of 0 and add capacity later.
	OnDemandTargetCapacity pulumi.IntPtrInput
	// Indicates whether Spot fleet should replace unhealthy instances. Default `false`.
	ReplaceUnhealthyInstances pulumi.BoolPtrInput
	// Nested argument containing maintenance strategies for managing your Spot Instances that are at an elevated risk of being interrupted. Defined below.
	SpotMaintenanceStrategies SpotFleetRequestSpotMaintenanceStrategiesPtrInput
	// The maximum spot bid for this override request.
	SpotPrice pulumi.StringPtrInput
	// The state of the Spot fleet request.
	SpotRequestState pulumi.StringPtrInput
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapInput
	// The number of units to request. You can choose to set the
	// target capacity in terms of instances or a performance characteristic that is
	// important to your application workload, such as vCPUs, memory, or I/O.
	TargetCapacity pulumi.IntPtrInput
	// The unit for the target capacity. This can only be done with `instanceRequirements` defined
	TargetCapacityUnitType pulumi.StringPtrInput
	// A list of `alb.TargetGroup` ARNs, for use with Application Load Balancing.
	TargetGroupArns pulumi.StringArrayInput
	// Indicates whether running Spot
	// instances should be terminated when the resource is deleted (and the Spot fleet request cancelled).
	// If no value is specified, the value of the `terminateInstancesWithExpiration` argument is used.
	TerminateInstancesOnDelete pulumi.StringPtrInput
	// Indicates whether running Spot
	// instances should be terminated when the Spot fleet request expires.
	TerminateInstancesWithExpiration pulumi.BoolPtrInput
	// The start date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
	ValidFrom pulumi.StringPtrInput
	// The end date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new Spot instance requests are placed or enabled to fulfill the request.
	ValidUntil pulumi.StringPtrInput
	// If set, this provider will
	// wait for the Spot Request to be fulfilled, and will throw an error if the
	// timeout of 10m is reached.
	WaitForFulfillment pulumi.BoolPtrInput
}

func (SpotFleetRequestState) ElementType() reflect.Type {
	return reflect.TypeOf((*spotFleetRequestState)(nil)).Elem()
}

type spotFleetRequestArgs struct {
	// Indicates how to allocate the target capacity across
	// the Spot pools specified by the Spot fleet request. The default is
	// `lowestPrice`.
	AllocationStrategy *string `pulumi:"allocationStrategy"`
	// Indicates whether running Spot
	// instances should be terminated if the target capacity of the Spot fleet
	// request is decreased below the current size of the Spot fleet.
	ExcessCapacityTerminationPolicy *string `pulumi:"excessCapacityTerminationPolicy"`
	// The type of fleet request. Indicates whether the Spot Fleet only requests the target
	// capacity or also attempts to maintain it. Default is `maintain`.
	FleetType *string `pulumi:"fleetType"`
	// Grants the Spot fleet permission to terminate
	// Spot instances on your behalf when you cancel its Spot fleet request using
	// CancelSpotFleetRequests or when the Spot fleet request expires, if you set
	// terminateInstancesWithExpiration.
	IamFleetRole string `pulumi:"iamFleetRole"`
	// Indicates whether a Spot
	// instance stops or terminates when it is interrupted. Default is
	// `terminate`.
	InstanceInterruptionBehaviour *string `pulumi:"instanceInterruptionBehaviour"`
	// The number of Spot pools across which to allocate your target Spot capacity.
	// Valid only when `allocationStrategy` is set to `lowestPrice`. Spot Fleet selects
	// the cheapest Spot pools and evenly allocates your target Spot capacity across
	// the number of Spot pools that you specify.
	InstancePoolsToUseCount *int `pulumi:"instancePoolsToUseCount"`
	// Used to define the launch configuration of the
	// spot-fleet request. Can be specified multiple times to define different bids
	// across different markets and instance types. Conflicts with `launchTemplateConfig`. At least one of `launchSpecification` or `launchTemplateConfig` is required.
	LaunchSpecifications []SpotFleetRequestLaunchSpecification `pulumi:"launchSpecifications"`
	// Launch template configuration block. See Launch Template Configs below for more details. Conflicts with `launchSpecification`. At least one of `launchSpecification` or `launchTemplateConfig` is required.
	LaunchTemplateConfigs []SpotFleetRequestLaunchTemplateConfig `pulumi:"launchTemplateConfigs"`
	// A list of elastic load balancer names to add to the Spot fleet.
	LoadBalancers []string `pulumi:"loadBalancers"`
	// The order of the launch template overrides to use in fulfilling On-Demand capacity. the possible values are: `lowestPrice` and `prioritized`. the default is `lowestPrice`.
	OnDemandAllocationStrategy *string `pulumi:"onDemandAllocationStrategy"`
	// The maximum amount per hour for On-Demand Instances that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasnâ€™t met the target capacity.
	OnDemandMaxTotalPrice *string `pulumi:"onDemandMaxTotalPrice"`
	// The number of On-Demand units to request. If the request type is `maintain`, you can specify a target capacity of 0 and add capacity later.
	OnDemandTargetCapacity *int `pulumi:"onDemandTargetCapacity"`
	// Indicates whether Spot fleet should replace unhealthy instances. Default `false`.
	ReplaceUnhealthyInstances *bool `pulumi:"replaceUnhealthyInstances"`
	// Nested argument containing maintenance strategies for managing your Spot Instances that are at an elevated risk of being interrupted. Defined below.
	SpotMaintenanceStrategies *SpotFleetRequestSpotMaintenanceStrategies `pulumi:"spotMaintenanceStrategies"`
	// The maximum spot bid for this override request.
	SpotPrice *string `pulumi:"spotPrice"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The number of units to request. You can choose to set the
	// target capacity in terms of instances or a performance characteristic that is
	// important to your application workload, such as vCPUs, memory, or I/O.
	TargetCapacity int `pulumi:"targetCapacity"`
	// The unit for the target capacity. This can only be done with `instanceRequirements` defined
	TargetCapacityUnitType *string `pulumi:"targetCapacityUnitType"`
	// A list of `alb.TargetGroup` ARNs, for use with Application Load Balancing.
	TargetGroupArns []string `pulumi:"targetGroupArns"`
	// Indicates whether running Spot
	// instances should be terminated when the resource is deleted (and the Spot fleet request cancelled).
	// If no value is specified, the value of the `terminateInstancesWithExpiration` argument is used.
	TerminateInstancesOnDelete *string `pulumi:"terminateInstancesOnDelete"`
	// Indicates whether running Spot
	// instances should be terminated when the Spot fleet request expires.
	TerminateInstancesWithExpiration *bool `pulumi:"terminateInstancesWithExpiration"`
	// The start date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
	ValidFrom *string `pulumi:"validFrom"`
	// The end date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new Spot instance requests are placed or enabled to fulfill the request.
	ValidUntil *string `pulumi:"validUntil"`
	// If set, this provider will
	// wait for the Spot Request to be fulfilled, and will throw an error if the
	// timeout of 10m is reached.
	WaitForFulfillment *bool `pulumi:"waitForFulfillment"`
}

// The set of arguments for constructing a SpotFleetRequest resource.
type SpotFleetRequestArgs struct {
	// Indicates how to allocate the target capacity across
	// the Spot pools specified by the Spot fleet request. The default is
	// `lowestPrice`.
	AllocationStrategy pulumi.StringPtrInput
	// Indicates whether running Spot
	// instances should be terminated if the target capacity of the Spot fleet
	// request is decreased below the current size of the Spot fleet.
	ExcessCapacityTerminationPolicy pulumi.StringPtrInput
	// The type of fleet request. Indicates whether the Spot Fleet only requests the target
	// capacity or also attempts to maintain it. Default is `maintain`.
	FleetType pulumi.StringPtrInput
	// Grants the Spot fleet permission to terminate
	// Spot instances on your behalf when you cancel its Spot fleet request using
	// CancelSpotFleetRequests or when the Spot fleet request expires, if you set
	// terminateInstancesWithExpiration.
	IamFleetRole pulumi.StringInput
	// Indicates whether a Spot
	// instance stops or terminates when it is interrupted. Default is
	// `terminate`.
	InstanceInterruptionBehaviour pulumi.StringPtrInput
	// The number of Spot pools across which to allocate your target Spot capacity.
	// Valid only when `allocationStrategy` is set to `lowestPrice`. Spot Fleet selects
	// the cheapest Spot pools and evenly allocates your target Spot capacity across
	// the number of Spot pools that you specify.
	InstancePoolsToUseCount pulumi.IntPtrInput
	// Used to define the launch configuration of the
	// spot-fleet request. Can be specified multiple times to define different bids
	// across different markets and instance types. Conflicts with `launchTemplateConfig`. At least one of `launchSpecification` or `launchTemplateConfig` is required.
	LaunchSpecifications SpotFleetRequestLaunchSpecificationArrayInput
	// Launch template configuration block. See Launch Template Configs below for more details. Conflicts with `launchSpecification`. At least one of `launchSpecification` or `launchTemplateConfig` is required.
	LaunchTemplateConfigs SpotFleetRequestLaunchTemplateConfigArrayInput
	// A list of elastic load balancer names to add to the Spot fleet.
	LoadBalancers pulumi.StringArrayInput
	// The order of the launch template overrides to use in fulfilling On-Demand capacity. the possible values are: `lowestPrice` and `prioritized`. the default is `lowestPrice`.
	OnDemandAllocationStrategy pulumi.StringPtrInput
	// The maximum amount per hour for On-Demand Instances that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasnâ€™t met the target capacity.
	OnDemandMaxTotalPrice pulumi.StringPtrInput
	// The number of On-Demand units to request. If the request type is `maintain`, you can specify a target capacity of 0 and add capacity later.
	OnDemandTargetCapacity pulumi.IntPtrInput
	// Indicates whether Spot fleet should replace unhealthy instances. Default `false`.
	ReplaceUnhealthyInstances pulumi.BoolPtrInput
	// Nested argument containing maintenance strategies for managing your Spot Instances that are at an elevated risk of being interrupted. Defined below.
	SpotMaintenanceStrategies SpotFleetRequestSpotMaintenanceStrategiesPtrInput
	// The maximum spot bid for this override request.
	SpotPrice pulumi.StringPtrInput
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// The number of units to request. You can choose to set the
	// target capacity in terms of instances or a performance characteristic that is
	// important to your application workload, such as vCPUs, memory, or I/O.
	TargetCapacity pulumi.IntInput
	// The unit for the target capacity. This can only be done with `instanceRequirements` defined
	TargetCapacityUnitType pulumi.StringPtrInput
	// A list of `alb.TargetGroup` ARNs, for use with Application Load Balancing.
	TargetGroupArns pulumi.StringArrayInput
	// Indicates whether running Spot
	// instances should be terminated when the resource is deleted (and the Spot fleet request cancelled).
	// If no value is specified, the value of the `terminateInstancesWithExpiration` argument is used.
	TerminateInstancesOnDelete pulumi.StringPtrInput
	// Indicates whether running Spot
	// instances should be terminated when the Spot fleet request expires.
	TerminateInstancesWithExpiration pulumi.BoolPtrInput
	// The start date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
	ValidFrom pulumi.StringPtrInput
	// The end date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new Spot instance requests are placed or enabled to fulfill the request.
	ValidUntil pulumi.StringPtrInput
	// If set, this provider will
	// wait for the Spot Request to be fulfilled, and will throw an error if the
	// timeout of 10m is reached.
	WaitForFulfillment pulumi.BoolPtrInput
}

func (SpotFleetRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*spotFleetRequestArgs)(nil)).Elem()
}

type SpotFleetRequestInput interface {
	pulumi.Input

	ToSpotFleetRequestOutput() SpotFleetRequestOutput
	ToSpotFleetRequestOutputWithContext(ctx context.Context) SpotFleetRequestOutput
}

func (*SpotFleetRequest) ElementType() reflect.Type {
	return reflect.TypeOf((**SpotFleetRequest)(nil)).Elem()
}

func (i *SpotFleetRequest) ToSpotFleetRequestOutput() SpotFleetRequestOutput {
	return i.ToSpotFleetRequestOutputWithContext(context.Background())
}

func (i *SpotFleetRequest) ToSpotFleetRequestOutputWithContext(ctx context.Context) SpotFleetRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpotFleetRequestOutput)
}

// SpotFleetRequestArrayInput is an input type that accepts SpotFleetRequestArray and SpotFleetRequestArrayOutput values.
// You can construct a concrete instance of `SpotFleetRequestArrayInput` via:
//
//	SpotFleetRequestArray{ SpotFleetRequestArgs{...} }
type SpotFleetRequestArrayInput interface {
	pulumi.Input

	ToSpotFleetRequestArrayOutput() SpotFleetRequestArrayOutput
	ToSpotFleetRequestArrayOutputWithContext(context.Context) SpotFleetRequestArrayOutput
}

type SpotFleetRequestArray []SpotFleetRequestInput

func (SpotFleetRequestArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpotFleetRequest)(nil)).Elem()
}

func (i SpotFleetRequestArray) ToSpotFleetRequestArrayOutput() SpotFleetRequestArrayOutput {
	return i.ToSpotFleetRequestArrayOutputWithContext(context.Background())
}

func (i SpotFleetRequestArray) ToSpotFleetRequestArrayOutputWithContext(ctx context.Context) SpotFleetRequestArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpotFleetRequestArrayOutput)
}

// SpotFleetRequestMapInput is an input type that accepts SpotFleetRequestMap and SpotFleetRequestMapOutput values.
// You can construct a concrete instance of `SpotFleetRequestMapInput` via:
//
//	SpotFleetRequestMap{ "key": SpotFleetRequestArgs{...} }
type SpotFleetRequestMapInput interface {
	pulumi.Input

	ToSpotFleetRequestMapOutput() SpotFleetRequestMapOutput
	ToSpotFleetRequestMapOutputWithContext(context.Context) SpotFleetRequestMapOutput
}

type SpotFleetRequestMap map[string]SpotFleetRequestInput

func (SpotFleetRequestMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpotFleetRequest)(nil)).Elem()
}

func (i SpotFleetRequestMap) ToSpotFleetRequestMapOutput() SpotFleetRequestMapOutput {
	return i.ToSpotFleetRequestMapOutputWithContext(context.Background())
}

func (i SpotFleetRequestMap) ToSpotFleetRequestMapOutputWithContext(ctx context.Context) SpotFleetRequestMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpotFleetRequestMapOutput)
}

type SpotFleetRequestOutput struct{ *pulumi.OutputState }

func (SpotFleetRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpotFleetRequest)(nil)).Elem()
}

func (o SpotFleetRequestOutput) ToSpotFleetRequestOutput() SpotFleetRequestOutput {
	return o
}

func (o SpotFleetRequestOutput) ToSpotFleetRequestOutputWithContext(ctx context.Context) SpotFleetRequestOutput {
	return o
}

// Indicates how to allocate the target capacity across
// the Spot pools specified by the Spot fleet request. The default is
// `lowestPrice`.
func (o SpotFleetRequestOutput) AllocationStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpotFleetRequest) pulumi.StringPtrOutput { return v.AllocationStrategy }).(pulumi.StringPtrOutput)
}

func (o SpotFleetRequestOutput) ClientToken() pulumi.StringOutput {
	return o.ApplyT(func(v *SpotFleetRequest) pulumi.StringOutput { return v.ClientToken }).(pulumi.StringOutput)
}

// Indicates whether running Spot
// instances should be terminated if the target capacity of the Spot fleet
// request is decreased below the current size of the Spot fleet.
func (o SpotFleetRequestOutput) ExcessCapacityTerminationPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpotFleetRequest) pulumi.StringPtrOutput { return v.ExcessCapacityTerminationPolicy }).(pulumi.StringPtrOutput)
}

// The type of fleet request. Indicates whether the Spot Fleet only requests the target
// capacity or also attempts to maintain it. Default is `maintain`.
func (o SpotFleetRequestOutput) FleetType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpotFleetRequest) pulumi.StringPtrOutput { return v.FleetType }).(pulumi.StringPtrOutput)
}

// Grants the Spot fleet permission to terminate
// Spot instances on your behalf when you cancel its Spot fleet request using
// CancelSpotFleetRequests or when the Spot fleet request expires, if you set
// terminateInstancesWithExpiration.
func (o SpotFleetRequestOutput) IamFleetRole() pulumi.StringOutput {
	return o.ApplyT(func(v *SpotFleetRequest) pulumi.StringOutput { return v.IamFleetRole }).(pulumi.StringOutput)
}

// Indicates whether a Spot
// instance stops or terminates when it is interrupted. Default is
// `terminate`.
func (o SpotFleetRequestOutput) InstanceInterruptionBehaviour() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpotFleetRequest) pulumi.StringPtrOutput { return v.InstanceInterruptionBehaviour }).(pulumi.StringPtrOutput)
}

// The number of Spot pools across which to allocate your target Spot capacity.
// Valid only when `allocationStrategy` is set to `lowestPrice`. Spot Fleet selects
// the cheapest Spot pools and evenly allocates your target Spot capacity across
// the number of Spot pools that you specify.
func (o SpotFleetRequestOutput) InstancePoolsToUseCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SpotFleetRequest) pulumi.IntPtrOutput { return v.InstancePoolsToUseCount }).(pulumi.IntPtrOutput)
}

// Used to define the launch configuration of the
// spot-fleet request. Can be specified multiple times to define different bids
// across different markets and instance types. Conflicts with `launchTemplateConfig`. At least one of `launchSpecification` or `launchTemplateConfig` is required.
func (o SpotFleetRequestOutput) LaunchSpecifications() SpotFleetRequestLaunchSpecificationArrayOutput {
	return o.ApplyT(func(v *SpotFleetRequest) SpotFleetRequestLaunchSpecificationArrayOutput {
		return v.LaunchSpecifications
	}).(SpotFleetRequestLaunchSpecificationArrayOutput)
}

// Launch template configuration block. See Launch Template Configs below for more details. Conflicts with `launchSpecification`. At least one of `launchSpecification` or `launchTemplateConfig` is required.
func (o SpotFleetRequestOutput) LaunchTemplateConfigs() SpotFleetRequestLaunchTemplateConfigArrayOutput {
	return o.ApplyT(func(v *SpotFleetRequest) SpotFleetRequestLaunchTemplateConfigArrayOutput {
		return v.LaunchTemplateConfigs
	}).(SpotFleetRequestLaunchTemplateConfigArrayOutput)
}

// A list of elastic load balancer names to add to the Spot fleet.
func (o SpotFleetRequestOutput) LoadBalancers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SpotFleetRequest) pulumi.StringArrayOutput { return v.LoadBalancers }).(pulumi.StringArrayOutput)
}

// The order of the launch template overrides to use in fulfilling On-Demand capacity. the possible values are: `lowestPrice` and `prioritized`. the default is `lowestPrice`.
func (o SpotFleetRequestOutput) OnDemandAllocationStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpotFleetRequest) pulumi.StringPtrOutput { return v.OnDemandAllocationStrategy }).(pulumi.StringPtrOutput)
}

// The maximum amount per hour for On-Demand Instances that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasnâ€™t met the target capacity.
func (o SpotFleetRequestOutput) OnDemandMaxTotalPrice() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpotFleetRequest) pulumi.StringPtrOutput { return v.OnDemandMaxTotalPrice }).(pulumi.StringPtrOutput)
}

// The number of On-Demand units to request. If the request type is `maintain`, you can specify a target capacity of 0 and add capacity later.
func (o SpotFleetRequestOutput) OnDemandTargetCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SpotFleetRequest) pulumi.IntPtrOutput { return v.OnDemandTargetCapacity }).(pulumi.IntPtrOutput)
}

// Indicates whether Spot fleet should replace unhealthy instances. Default `false`.
func (o SpotFleetRequestOutput) ReplaceUnhealthyInstances() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SpotFleetRequest) pulumi.BoolPtrOutput { return v.ReplaceUnhealthyInstances }).(pulumi.BoolPtrOutput)
}

// Nested argument containing maintenance strategies for managing your Spot Instances that are at an elevated risk of being interrupted. Defined below.
func (o SpotFleetRequestOutput) SpotMaintenanceStrategies() SpotFleetRequestSpotMaintenanceStrategiesPtrOutput {
	return o.ApplyT(func(v *SpotFleetRequest) SpotFleetRequestSpotMaintenanceStrategiesPtrOutput {
		return v.SpotMaintenanceStrategies
	}).(SpotFleetRequestSpotMaintenanceStrategiesPtrOutput)
}

// The maximum spot bid for this override request.
func (o SpotFleetRequestOutput) SpotPrice() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpotFleetRequest) pulumi.StringPtrOutput { return v.SpotPrice }).(pulumi.StringPtrOutput)
}

// The state of the Spot fleet request.
func (o SpotFleetRequestOutput) SpotRequestState() pulumi.StringOutput {
	return o.ApplyT(func(v *SpotFleetRequest) pulumi.StringOutput { return v.SpotRequestState }).(pulumi.StringOutput)
}

// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o SpotFleetRequestOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SpotFleetRequest) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o SpotFleetRequestOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SpotFleetRequest) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// The number of units to request. You can choose to set the
// target capacity in terms of instances or a performance characteristic that is
// important to your application workload, such as vCPUs, memory, or I/O.
func (o SpotFleetRequestOutput) TargetCapacity() pulumi.IntOutput {
	return o.ApplyT(func(v *SpotFleetRequest) pulumi.IntOutput { return v.TargetCapacity }).(pulumi.IntOutput)
}

// The unit for the target capacity. This can only be done with `instanceRequirements` defined
func (o SpotFleetRequestOutput) TargetCapacityUnitType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpotFleetRequest) pulumi.StringPtrOutput { return v.TargetCapacityUnitType }).(pulumi.StringPtrOutput)
}

// A list of `alb.TargetGroup` ARNs, for use with Application Load Balancing.
func (o SpotFleetRequestOutput) TargetGroupArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SpotFleetRequest) pulumi.StringArrayOutput { return v.TargetGroupArns }).(pulumi.StringArrayOutput)
}

// Indicates whether running Spot
// instances should be terminated when the resource is deleted (and the Spot fleet request cancelled).
// If no value is specified, the value of the `terminateInstancesWithExpiration` argument is used.
func (o SpotFleetRequestOutput) TerminateInstancesOnDelete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpotFleetRequest) pulumi.StringPtrOutput { return v.TerminateInstancesOnDelete }).(pulumi.StringPtrOutput)
}

// Indicates whether running Spot
// instances should be terminated when the Spot fleet request expires.
func (o SpotFleetRequestOutput) TerminateInstancesWithExpiration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SpotFleetRequest) pulumi.BoolPtrOutput { return v.TerminateInstancesWithExpiration }).(pulumi.BoolPtrOutput)
}

// The start date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
func (o SpotFleetRequestOutput) ValidFrom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpotFleetRequest) pulumi.StringPtrOutput { return v.ValidFrom }).(pulumi.StringPtrOutput)
}

// The end date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new Spot instance requests are placed or enabled to fulfill the request.
func (o SpotFleetRequestOutput) ValidUntil() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpotFleetRequest) pulumi.StringPtrOutput { return v.ValidUntil }).(pulumi.StringPtrOutput)
}

// If set, this provider will
// wait for the Spot Request to be fulfilled, and will throw an error if the
// timeout of 10m is reached.
func (o SpotFleetRequestOutput) WaitForFulfillment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SpotFleetRequest) pulumi.BoolPtrOutput { return v.WaitForFulfillment }).(pulumi.BoolPtrOutput)
}

type SpotFleetRequestArrayOutput struct{ *pulumi.OutputState }

func (SpotFleetRequestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpotFleetRequest)(nil)).Elem()
}

func (o SpotFleetRequestArrayOutput) ToSpotFleetRequestArrayOutput() SpotFleetRequestArrayOutput {
	return o
}

func (o SpotFleetRequestArrayOutput) ToSpotFleetRequestArrayOutputWithContext(ctx context.Context) SpotFleetRequestArrayOutput {
	return o
}

func (o SpotFleetRequestArrayOutput) Index(i pulumi.IntInput) SpotFleetRequestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SpotFleetRequest {
		return vs[0].([]*SpotFleetRequest)[vs[1].(int)]
	}).(SpotFleetRequestOutput)
}

type SpotFleetRequestMapOutput struct{ *pulumi.OutputState }

func (SpotFleetRequestMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpotFleetRequest)(nil)).Elem()
}

func (o SpotFleetRequestMapOutput) ToSpotFleetRequestMapOutput() SpotFleetRequestMapOutput {
	return o
}

func (o SpotFleetRequestMapOutput) ToSpotFleetRequestMapOutputWithContext(ctx context.Context) SpotFleetRequestMapOutput {
	return o
}

func (o SpotFleetRequestMapOutput) MapIndex(k pulumi.StringInput) SpotFleetRequestOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SpotFleetRequest {
		return vs[0].(map[string]*SpotFleetRequest)[vs[1].(string)]
	}).(SpotFleetRequestOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SpotFleetRequestInput)(nil)).Elem(), &SpotFleetRequest{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpotFleetRequestArrayInput)(nil)).Elem(), SpotFleetRequestArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpotFleetRequestMapInput)(nil)).Elem(), SpotFleetRequestMap{})
	pulumi.RegisterOutputType(SpotFleetRequestOutput{})
	pulumi.RegisterOutputType(SpotFleetRequestArrayOutput{})
	pulumi.RegisterOutputType(SpotFleetRequestMapOutput{})
}
