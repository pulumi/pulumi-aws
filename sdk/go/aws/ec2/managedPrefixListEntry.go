// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// # Basic usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := ec2.NewManagedPrefixList(ctx, "example", &ec2.ManagedPrefixListArgs{
//				AddressFamily: pulumi.String("IPv4"),
//				MaxEntries:    pulumi.Int(5),
//				Tags: pulumi.StringMap{
//					"Env": pulumi.String("live"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ec2.NewManagedPrefixListEntry(ctx, "entry1", &ec2.ManagedPrefixListEntryArgs{
//				Cidr:         pulumi.Any(aws_vpc.Example.Cidr_block),
//				Description:  pulumi.String("Primary"),
//				PrefixListId: example.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Prefix List Entries can be imported using the `prefix_list_id` and `cidr` separated by a `,`, e.g.,
//
// ```sh
//
//	$ pulumi import aws:ec2/managedPrefixListEntry:ManagedPrefixListEntry default pl-0570a1d2d725c16be,10.0.3.0/24
//
// ```
type ManagedPrefixListEntry struct {
	pulumi.CustomResourceState

	// CIDR block of this entry.
	Cidr pulumi.StringOutput `pulumi:"cidr"`
	// Description of this entry. Due to API limitations, updating only the description of an entry requires recreating the entry.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// CIDR block of this entry.
	PrefixListId pulumi.StringOutput `pulumi:"prefixListId"`
}

// NewManagedPrefixListEntry registers a new resource with the given unique name, arguments, and options.
func NewManagedPrefixListEntry(ctx *pulumi.Context,
	name string, args *ManagedPrefixListEntryArgs, opts ...pulumi.ResourceOption) (*ManagedPrefixListEntry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cidr == nil {
		return nil, errors.New("invalid value for required argument 'Cidr'")
	}
	if args.PrefixListId == nil {
		return nil, errors.New("invalid value for required argument 'PrefixListId'")
	}
	var resource ManagedPrefixListEntry
	err := ctx.RegisterResource("aws:ec2/managedPrefixListEntry:ManagedPrefixListEntry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedPrefixListEntry gets an existing ManagedPrefixListEntry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedPrefixListEntry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedPrefixListEntryState, opts ...pulumi.ResourceOption) (*ManagedPrefixListEntry, error) {
	var resource ManagedPrefixListEntry
	err := ctx.ReadResource("aws:ec2/managedPrefixListEntry:ManagedPrefixListEntry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedPrefixListEntry resources.
type managedPrefixListEntryState struct {
	// CIDR block of this entry.
	Cidr *string `pulumi:"cidr"`
	// Description of this entry. Due to API limitations, updating only the description of an entry requires recreating the entry.
	Description *string `pulumi:"description"`
	// CIDR block of this entry.
	PrefixListId *string `pulumi:"prefixListId"`
}

type ManagedPrefixListEntryState struct {
	// CIDR block of this entry.
	Cidr pulumi.StringPtrInput
	// Description of this entry. Due to API limitations, updating only the description of an entry requires recreating the entry.
	Description pulumi.StringPtrInput
	// CIDR block of this entry.
	PrefixListId pulumi.StringPtrInput
}

func (ManagedPrefixListEntryState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedPrefixListEntryState)(nil)).Elem()
}

type managedPrefixListEntryArgs struct {
	// CIDR block of this entry.
	Cidr string `pulumi:"cidr"`
	// Description of this entry. Due to API limitations, updating only the description of an entry requires recreating the entry.
	Description *string `pulumi:"description"`
	// CIDR block of this entry.
	PrefixListId string `pulumi:"prefixListId"`
}

// The set of arguments for constructing a ManagedPrefixListEntry resource.
type ManagedPrefixListEntryArgs struct {
	// CIDR block of this entry.
	Cidr pulumi.StringInput
	// Description of this entry. Due to API limitations, updating only the description of an entry requires recreating the entry.
	Description pulumi.StringPtrInput
	// CIDR block of this entry.
	PrefixListId pulumi.StringInput
}

func (ManagedPrefixListEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedPrefixListEntryArgs)(nil)).Elem()
}

type ManagedPrefixListEntryInput interface {
	pulumi.Input

	ToManagedPrefixListEntryOutput() ManagedPrefixListEntryOutput
	ToManagedPrefixListEntryOutputWithContext(ctx context.Context) ManagedPrefixListEntryOutput
}

func (*ManagedPrefixListEntry) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedPrefixListEntry)(nil)).Elem()
}

func (i *ManagedPrefixListEntry) ToManagedPrefixListEntryOutput() ManagedPrefixListEntryOutput {
	return i.ToManagedPrefixListEntryOutputWithContext(context.Background())
}

func (i *ManagedPrefixListEntry) ToManagedPrefixListEntryOutputWithContext(ctx context.Context) ManagedPrefixListEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedPrefixListEntryOutput)
}

// ManagedPrefixListEntryArrayInput is an input type that accepts ManagedPrefixListEntryArray and ManagedPrefixListEntryArrayOutput values.
// You can construct a concrete instance of `ManagedPrefixListEntryArrayInput` via:
//
//	ManagedPrefixListEntryArray{ ManagedPrefixListEntryArgs{...} }
type ManagedPrefixListEntryArrayInput interface {
	pulumi.Input

	ToManagedPrefixListEntryArrayOutput() ManagedPrefixListEntryArrayOutput
	ToManagedPrefixListEntryArrayOutputWithContext(context.Context) ManagedPrefixListEntryArrayOutput
}

type ManagedPrefixListEntryArray []ManagedPrefixListEntryInput

func (ManagedPrefixListEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedPrefixListEntry)(nil)).Elem()
}

func (i ManagedPrefixListEntryArray) ToManagedPrefixListEntryArrayOutput() ManagedPrefixListEntryArrayOutput {
	return i.ToManagedPrefixListEntryArrayOutputWithContext(context.Background())
}

func (i ManagedPrefixListEntryArray) ToManagedPrefixListEntryArrayOutputWithContext(ctx context.Context) ManagedPrefixListEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedPrefixListEntryArrayOutput)
}

// ManagedPrefixListEntryMapInput is an input type that accepts ManagedPrefixListEntryMap and ManagedPrefixListEntryMapOutput values.
// You can construct a concrete instance of `ManagedPrefixListEntryMapInput` via:
//
//	ManagedPrefixListEntryMap{ "key": ManagedPrefixListEntryArgs{...} }
type ManagedPrefixListEntryMapInput interface {
	pulumi.Input

	ToManagedPrefixListEntryMapOutput() ManagedPrefixListEntryMapOutput
	ToManagedPrefixListEntryMapOutputWithContext(context.Context) ManagedPrefixListEntryMapOutput
}

type ManagedPrefixListEntryMap map[string]ManagedPrefixListEntryInput

func (ManagedPrefixListEntryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedPrefixListEntry)(nil)).Elem()
}

func (i ManagedPrefixListEntryMap) ToManagedPrefixListEntryMapOutput() ManagedPrefixListEntryMapOutput {
	return i.ToManagedPrefixListEntryMapOutputWithContext(context.Background())
}

func (i ManagedPrefixListEntryMap) ToManagedPrefixListEntryMapOutputWithContext(ctx context.Context) ManagedPrefixListEntryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedPrefixListEntryMapOutput)
}

type ManagedPrefixListEntryOutput struct{ *pulumi.OutputState }

func (ManagedPrefixListEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedPrefixListEntry)(nil)).Elem()
}

func (o ManagedPrefixListEntryOutput) ToManagedPrefixListEntryOutput() ManagedPrefixListEntryOutput {
	return o
}

func (o ManagedPrefixListEntryOutput) ToManagedPrefixListEntryOutputWithContext(ctx context.Context) ManagedPrefixListEntryOutput {
	return o
}

// CIDR block of this entry.
func (o ManagedPrefixListEntryOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedPrefixListEntry) pulumi.StringOutput { return v.Cidr }).(pulumi.StringOutput)
}

// Description of this entry. Due to API limitations, updating only the description of an entry requires recreating the entry.
func (o ManagedPrefixListEntryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedPrefixListEntry) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// CIDR block of this entry.
func (o ManagedPrefixListEntryOutput) PrefixListId() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedPrefixListEntry) pulumi.StringOutput { return v.PrefixListId }).(pulumi.StringOutput)
}

type ManagedPrefixListEntryArrayOutput struct{ *pulumi.OutputState }

func (ManagedPrefixListEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedPrefixListEntry)(nil)).Elem()
}

func (o ManagedPrefixListEntryArrayOutput) ToManagedPrefixListEntryArrayOutput() ManagedPrefixListEntryArrayOutput {
	return o
}

func (o ManagedPrefixListEntryArrayOutput) ToManagedPrefixListEntryArrayOutputWithContext(ctx context.Context) ManagedPrefixListEntryArrayOutput {
	return o
}

func (o ManagedPrefixListEntryArrayOutput) Index(i pulumi.IntInput) ManagedPrefixListEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ManagedPrefixListEntry {
		return vs[0].([]*ManagedPrefixListEntry)[vs[1].(int)]
	}).(ManagedPrefixListEntryOutput)
}

type ManagedPrefixListEntryMapOutput struct{ *pulumi.OutputState }

func (ManagedPrefixListEntryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedPrefixListEntry)(nil)).Elem()
}

func (o ManagedPrefixListEntryMapOutput) ToManagedPrefixListEntryMapOutput() ManagedPrefixListEntryMapOutput {
	return o
}

func (o ManagedPrefixListEntryMapOutput) ToManagedPrefixListEntryMapOutputWithContext(ctx context.Context) ManagedPrefixListEntryMapOutput {
	return o
}

func (o ManagedPrefixListEntryMapOutput) MapIndex(k pulumi.StringInput) ManagedPrefixListEntryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ManagedPrefixListEntry {
		return vs[0].(map[string]*ManagedPrefixListEntry)[vs[1].(string)]
	}).(ManagedPrefixListEntryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedPrefixListEntryInput)(nil)).Elem(), &ManagedPrefixListEntry{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedPrefixListEntryArrayInput)(nil)).Elem(), ManagedPrefixListEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedPrefixListEntryMapInput)(nil)).Elem(), ManagedPrefixListEntryMap{})
	pulumi.RegisterOutputType(ManagedPrefixListEntryOutput{})
	pulumi.RegisterOutputType(ManagedPrefixListEntryArrayOutput{})
	pulumi.RegisterOutputType(ManagedPrefixListEntryMapOutput{})
}
