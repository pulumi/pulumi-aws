// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Subnet struct {
	pulumi.CustomResourceState

	Arn                                     pulumi.StringOutput    `pulumi:"arn"`
	AssignIpv6AddressOnCreation             pulumi.BoolPtrOutput   `pulumi:"assignIpv6AddressOnCreation"`
	AvailabilityZone                        pulumi.StringOutput    `pulumi:"availabilityZone"`
	AvailabilityZoneId                      pulumi.StringOutput    `pulumi:"availabilityZoneId"`
	CidrBlock                               pulumi.StringPtrOutput `pulumi:"cidrBlock"`
	CustomerOwnedIpv4Pool                   pulumi.StringPtrOutput `pulumi:"customerOwnedIpv4Pool"`
	EnableDns64                             pulumi.BoolPtrOutput   `pulumi:"enableDns64"`
	EnableResourceNameDnsARecordOnLaunch    pulumi.BoolPtrOutput   `pulumi:"enableResourceNameDnsARecordOnLaunch"`
	EnableResourceNameDnsAaaaRecordOnLaunch pulumi.BoolPtrOutput   `pulumi:"enableResourceNameDnsAaaaRecordOnLaunch"`
	Ipv6CidrBlock                           pulumi.StringPtrOutput `pulumi:"ipv6CidrBlock"`
	Ipv6CidrBlockAssociationId              pulumi.StringOutput    `pulumi:"ipv6CidrBlockAssociationId"`
	Ipv6Native                              pulumi.BoolPtrOutput   `pulumi:"ipv6Native"`
	MapCustomerOwnedIpOnLaunch              pulumi.BoolPtrOutput   `pulumi:"mapCustomerOwnedIpOnLaunch"`
	MapPublicIpOnLaunch                     pulumi.BoolPtrOutput   `pulumi:"mapPublicIpOnLaunch"`
	OutpostArn                              pulumi.StringPtrOutput `pulumi:"outpostArn"`
	OwnerId                                 pulumi.StringOutput    `pulumi:"ownerId"`
	PrivateDnsHostnameTypeOnLaunch          pulumi.StringOutput    `pulumi:"privateDnsHostnameTypeOnLaunch"`
	Tags                                    pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll                                 pulumi.StringMapOutput `pulumi:"tagsAll"`
	VpcId                                   pulumi.StringOutput    `pulumi:"vpcId"`
}

// NewSubnet registers a new resource with the given unique name, arguments, and options.
func NewSubnet(ctx *pulumi.Context,
	name string, args *SubnetArgs, opts ...pulumi.ResourceOption) (*Subnet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	var resource Subnet
	err := ctx.RegisterResource("aws:ec2/subnet:Subnet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubnet gets an existing Subnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubnetState, opts ...pulumi.ResourceOption) (*Subnet, error) {
	var resource Subnet
	err := ctx.ReadResource("aws:ec2/subnet:Subnet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Subnet resources.
type subnetState struct {
	Arn                                     *string           `pulumi:"arn"`
	AssignIpv6AddressOnCreation             *bool             `pulumi:"assignIpv6AddressOnCreation"`
	AvailabilityZone                        *string           `pulumi:"availabilityZone"`
	AvailabilityZoneId                      *string           `pulumi:"availabilityZoneId"`
	CidrBlock                               *string           `pulumi:"cidrBlock"`
	CustomerOwnedIpv4Pool                   *string           `pulumi:"customerOwnedIpv4Pool"`
	EnableDns64                             *bool             `pulumi:"enableDns64"`
	EnableResourceNameDnsARecordOnLaunch    *bool             `pulumi:"enableResourceNameDnsARecordOnLaunch"`
	EnableResourceNameDnsAaaaRecordOnLaunch *bool             `pulumi:"enableResourceNameDnsAaaaRecordOnLaunch"`
	Ipv6CidrBlock                           *string           `pulumi:"ipv6CidrBlock"`
	Ipv6CidrBlockAssociationId              *string           `pulumi:"ipv6CidrBlockAssociationId"`
	Ipv6Native                              *bool             `pulumi:"ipv6Native"`
	MapCustomerOwnedIpOnLaunch              *bool             `pulumi:"mapCustomerOwnedIpOnLaunch"`
	MapPublicIpOnLaunch                     *bool             `pulumi:"mapPublicIpOnLaunch"`
	OutpostArn                              *string           `pulumi:"outpostArn"`
	OwnerId                                 *string           `pulumi:"ownerId"`
	PrivateDnsHostnameTypeOnLaunch          *string           `pulumi:"privateDnsHostnameTypeOnLaunch"`
	Tags                                    map[string]string `pulumi:"tags"`
	TagsAll                                 map[string]string `pulumi:"tagsAll"`
	VpcId                                   *string           `pulumi:"vpcId"`
}

type SubnetState struct {
	Arn                                     pulumi.StringPtrInput
	AssignIpv6AddressOnCreation             pulumi.BoolPtrInput
	AvailabilityZone                        pulumi.StringPtrInput
	AvailabilityZoneId                      pulumi.StringPtrInput
	CidrBlock                               pulumi.StringPtrInput
	CustomerOwnedIpv4Pool                   pulumi.StringPtrInput
	EnableDns64                             pulumi.BoolPtrInput
	EnableResourceNameDnsARecordOnLaunch    pulumi.BoolPtrInput
	EnableResourceNameDnsAaaaRecordOnLaunch pulumi.BoolPtrInput
	Ipv6CidrBlock                           pulumi.StringPtrInput
	Ipv6CidrBlockAssociationId              pulumi.StringPtrInput
	Ipv6Native                              pulumi.BoolPtrInput
	MapCustomerOwnedIpOnLaunch              pulumi.BoolPtrInput
	MapPublicIpOnLaunch                     pulumi.BoolPtrInput
	OutpostArn                              pulumi.StringPtrInput
	OwnerId                                 pulumi.StringPtrInput
	PrivateDnsHostnameTypeOnLaunch          pulumi.StringPtrInput
	Tags                                    pulumi.StringMapInput
	TagsAll                                 pulumi.StringMapInput
	VpcId                                   pulumi.StringPtrInput
}

func (SubnetState) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetState)(nil)).Elem()
}

type subnetArgs struct {
	AssignIpv6AddressOnCreation             *bool             `pulumi:"assignIpv6AddressOnCreation"`
	AvailabilityZone                        *string           `pulumi:"availabilityZone"`
	AvailabilityZoneId                      *string           `pulumi:"availabilityZoneId"`
	CidrBlock                               *string           `pulumi:"cidrBlock"`
	CustomerOwnedIpv4Pool                   *string           `pulumi:"customerOwnedIpv4Pool"`
	EnableDns64                             *bool             `pulumi:"enableDns64"`
	EnableResourceNameDnsARecordOnLaunch    *bool             `pulumi:"enableResourceNameDnsARecordOnLaunch"`
	EnableResourceNameDnsAaaaRecordOnLaunch *bool             `pulumi:"enableResourceNameDnsAaaaRecordOnLaunch"`
	Ipv6CidrBlock                           *string           `pulumi:"ipv6CidrBlock"`
	Ipv6Native                              *bool             `pulumi:"ipv6Native"`
	MapCustomerOwnedIpOnLaunch              *bool             `pulumi:"mapCustomerOwnedIpOnLaunch"`
	MapPublicIpOnLaunch                     *bool             `pulumi:"mapPublicIpOnLaunch"`
	OutpostArn                              *string           `pulumi:"outpostArn"`
	PrivateDnsHostnameTypeOnLaunch          *string           `pulumi:"privateDnsHostnameTypeOnLaunch"`
	Tags                                    map[string]string `pulumi:"tags"`
	VpcId                                   string            `pulumi:"vpcId"`
}

// The set of arguments for constructing a Subnet resource.
type SubnetArgs struct {
	AssignIpv6AddressOnCreation             pulumi.BoolPtrInput
	AvailabilityZone                        pulumi.StringPtrInput
	AvailabilityZoneId                      pulumi.StringPtrInput
	CidrBlock                               pulumi.StringPtrInput
	CustomerOwnedIpv4Pool                   pulumi.StringPtrInput
	EnableDns64                             pulumi.BoolPtrInput
	EnableResourceNameDnsARecordOnLaunch    pulumi.BoolPtrInput
	EnableResourceNameDnsAaaaRecordOnLaunch pulumi.BoolPtrInput
	Ipv6CidrBlock                           pulumi.StringPtrInput
	Ipv6Native                              pulumi.BoolPtrInput
	MapCustomerOwnedIpOnLaunch              pulumi.BoolPtrInput
	MapPublicIpOnLaunch                     pulumi.BoolPtrInput
	OutpostArn                              pulumi.StringPtrInput
	PrivateDnsHostnameTypeOnLaunch          pulumi.StringPtrInput
	Tags                                    pulumi.StringMapInput
	VpcId                                   pulumi.StringInput
}

func (SubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetArgs)(nil)).Elem()
}

type SubnetInput interface {
	pulumi.Input

	ToSubnetOutput() SubnetOutput
	ToSubnetOutputWithContext(ctx context.Context) SubnetOutput
}

func (*Subnet) ElementType() reflect.Type {
	return reflect.TypeOf((**Subnet)(nil)).Elem()
}

func (i *Subnet) ToSubnetOutput() SubnetOutput {
	return i.ToSubnetOutputWithContext(context.Background())
}

func (i *Subnet) ToSubnetOutputWithContext(ctx context.Context) SubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetOutput)
}

// SubnetArrayInput is an input type that accepts SubnetArray and SubnetArrayOutput values.
// You can construct a concrete instance of `SubnetArrayInput` via:
//
//	SubnetArray{ SubnetArgs{...} }
type SubnetArrayInput interface {
	pulumi.Input

	ToSubnetArrayOutput() SubnetArrayOutput
	ToSubnetArrayOutputWithContext(context.Context) SubnetArrayOutput
}

type SubnetArray []SubnetInput

func (SubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subnet)(nil)).Elem()
}

func (i SubnetArray) ToSubnetArrayOutput() SubnetArrayOutput {
	return i.ToSubnetArrayOutputWithContext(context.Background())
}

func (i SubnetArray) ToSubnetArrayOutputWithContext(ctx context.Context) SubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetArrayOutput)
}

// SubnetMapInput is an input type that accepts SubnetMap and SubnetMapOutput values.
// You can construct a concrete instance of `SubnetMapInput` via:
//
//	SubnetMap{ "key": SubnetArgs{...} }
type SubnetMapInput interface {
	pulumi.Input

	ToSubnetMapOutput() SubnetMapOutput
	ToSubnetMapOutputWithContext(context.Context) SubnetMapOutput
}

type SubnetMap map[string]SubnetInput

func (SubnetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subnet)(nil)).Elem()
}

func (i SubnetMap) ToSubnetMapOutput() SubnetMapOutput {
	return i.ToSubnetMapOutputWithContext(context.Background())
}

func (i SubnetMap) ToSubnetMapOutputWithContext(ctx context.Context) SubnetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetMapOutput)
}

type SubnetOutput struct{ *pulumi.OutputState }

func (SubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Subnet)(nil)).Elem()
}

func (o SubnetOutput) ToSubnetOutput() SubnetOutput {
	return o
}

func (o SubnetOutput) ToSubnetOutputWithContext(ctx context.Context) SubnetOutput {
	return o
}

func (o SubnetOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o SubnetOutput) AssignIpv6AddressOnCreation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolPtrOutput { return v.AssignIpv6AddressOnCreation }).(pulumi.BoolPtrOutput)
}

func (o SubnetOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

func (o SubnetOutput) AvailabilityZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.AvailabilityZoneId }).(pulumi.StringOutput)
}

func (o SubnetOutput) CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.CidrBlock }).(pulumi.StringPtrOutput)
}

func (o SubnetOutput) CustomerOwnedIpv4Pool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.CustomerOwnedIpv4Pool }).(pulumi.StringPtrOutput)
}

func (o SubnetOutput) EnableDns64() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolPtrOutput { return v.EnableDns64 }).(pulumi.BoolPtrOutput)
}

func (o SubnetOutput) EnableResourceNameDnsARecordOnLaunch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolPtrOutput { return v.EnableResourceNameDnsARecordOnLaunch }).(pulumi.BoolPtrOutput)
}

func (o SubnetOutput) EnableResourceNameDnsAaaaRecordOnLaunch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolPtrOutput { return v.EnableResourceNameDnsAaaaRecordOnLaunch }).(pulumi.BoolPtrOutput)
}

func (o SubnetOutput) Ipv6CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.Ipv6CidrBlock }).(pulumi.StringPtrOutput)
}

func (o SubnetOutput) Ipv6CidrBlockAssociationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Ipv6CidrBlockAssociationId }).(pulumi.StringOutput)
}

func (o SubnetOutput) Ipv6Native() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolPtrOutput { return v.Ipv6Native }).(pulumi.BoolPtrOutput)
}

func (o SubnetOutput) MapCustomerOwnedIpOnLaunch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolPtrOutput { return v.MapCustomerOwnedIpOnLaunch }).(pulumi.BoolPtrOutput)
}

func (o SubnetOutput) MapPublicIpOnLaunch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolPtrOutput { return v.MapPublicIpOnLaunch }).(pulumi.BoolPtrOutput)
}

func (o SubnetOutput) OutpostArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.OutpostArn }).(pulumi.StringPtrOutput)
}

func (o SubnetOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.OwnerId }).(pulumi.StringOutput)
}

func (o SubnetOutput) PrivateDnsHostnameTypeOnLaunch() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.PrivateDnsHostnameTypeOnLaunch }).(pulumi.StringOutput)
}

func (o SubnetOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o SubnetOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o SubnetOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type SubnetArrayOutput struct{ *pulumi.OutputState }

func (SubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subnet)(nil)).Elem()
}

func (o SubnetArrayOutput) ToSubnetArrayOutput() SubnetArrayOutput {
	return o
}

func (o SubnetArrayOutput) ToSubnetArrayOutputWithContext(ctx context.Context) SubnetArrayOutput {
	return o
}

func (o SubnetArrayOutput) Index(i pulumi.IntInput) SubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Subnet {
		return vs[0].([]*Subnet)[vs[1].(int)]
	}).(SubnetOutput)
}

type SubnetMapOutput struct{ *pulumi.OutputState }

func (SubnetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subnet)(nil)).Elem()
}

func (o SubnetMapOutput) ToSubnetMapOutput() SubnetMapOutput {
	return o
}

func (o SubnetMapOutput) ToSubnetMapOutputWithContext(ctx context.Context) SubnetMapOutput {
	return o
}

func (o SubnetMapOutput) MapIndex(k pulumi.StringInput) SubnetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Subnet {
		return vs[0].(map[string]*Subnet)[vs[1].(string)]
	}).(SubnetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetInput)(nil)).Elem(), &Subnet{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetArrayInput)(nil)).Elem(), SubnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetMapInput)(nil)).Elem(), SubnetMap{})
	pulumi.RegisterOutputType(SubnetOutput{})
	pulumi.RegisterOutputType(SubnetArrayOutput{})
	pulumi.RegisterOutputType(SubnetMapOutput{})
}
