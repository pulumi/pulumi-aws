// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a static route between a VPN connection and a customer gateway.
type VpnConnectionRoute struct {
	s *pulumi.ResourceState
}

// NewVpnConnectionRoute registers a new resource with the given unique name, arguments, and options.
func NewVpnConnectionRoute(ctx *pulumi.Context,
	name string, args *VpnConnectionRouteArgs, opts ...pulumi.ResourceOpt) (*VpnConnectionRoute, error) {
	if args == nil || args.DestinationCidrBlock == nil {
		return nil, errors.New("missing required argument 'DestinationCidrBlock'")
	}
	if args == nil || args.VpnConnectionId == nil {
		return nil, errors.New("missing required argument 'VpnConnectionId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["destinationCidrBlock"] = nil
		inputs["vpnConnectionId"] = nil
	} else {
		inputs["destinationCidrBlock"] = args.DestinationCidrBlock
		inputs["vpnConnectionId"] = args.VpnConnectionId
	}
	s, err := ctx.RegisterResource("aws:ec2/vpnConnectionRoute:VpnConnectionRoute", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VpnConnectionRoute{s: s}, nil
}

// GetVpnConnectionRoute gets an existing VpnConnectionRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnConnectionRoute(ctx *pulumi.Context,
	name string, id pulumi.ID, state *VpnConnectionRouteState, opts ...pulumi.ResourceOpt) (*VpnConnectionRoute, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["destinationCidrBlock"] = state.DestinationCidrBlock
		inputs["vpnConnectionId"] = state.VpnConnectionId
	}
	s, err := ctx.ReadResource("aws:ec2/vpnConnectionRoute:VpnConnectionRoute", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VpnConnectionRoute{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *VpnConnectionRoute) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *VpnConnectionRoute) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The CIDR block associated with the local subnet of the customer network.
func (r *VpnConnectionRoute) DestinationCidrBlock() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["destinationCidrBlock"])
}

// The ID of the VPN connection.
func (r *VpnConnectionRoute) VpnConnectionId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["vpnConnectionId"])
}

// Input properties used for looking up and filtering VpnConnectionRoute resources.
type VpnConnectionRouteState struct {
	// The CIDR block associated with the local subnet of the customer network.
	DestinationCidrBlock interface{}
	// The ID of the VPN connection.
	VpnConnectionId interface{}
}

// The set of arguments for constructing a VpnConnectionRoute resource.
type VpnConnectionRouteArgs struct {
	// The CIDR block associated with the local subnet of the customer network.
	DestinationCidrBlock interface{}
	// The ID of the VPN connection.
	VpnConnectionId interface{}
}
