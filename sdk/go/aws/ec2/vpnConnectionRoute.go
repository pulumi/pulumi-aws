// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a static route between a VPN connection and a customer gateway.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ec2"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		vpc, err := ec2.NewVpc(ctx, "vpc", &ec2.VpcArgs{
// 			CidrBlock: pulumi.String("10.0.0.0/16"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		vpnGateway, err := ec2.NewVpnGateway(ctx, "vpnGateway", &ec2.VpnGatewayArgs{
// 			VpcId: vpc.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		customerGateway, err := ec2.NewCustomerGateway(ctx, "customerGateway", &ec2.CustomerGatewayArgs{
// 			BgpAsn:    pulumi.String("65000"),
// 			IpAddress: pulumi.String("172.0.0.1"),
// 			Type:      pulumi.String("ipsec.1"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		main, err := ec2.NewVpnConnection(ctx, "main", &ec2.VpnConnectionArgs{
// 			VpnGatewayId:      vpnGateway.ID(),
// 			CustomerGatewayId: customerGateway.ID(),
// 			Type:              pulumi.String("ipsec.1"),
// 			StaticRoutesOnly:  pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = ec2.NewVpnConnectionRoute(ctx, "office", &ec2.VpnConnectionRouteArgs{
// 			DestinationCidrBlock: pulumi.String("192.168.10.0/24"),
// 			VpnConnectionId:      main.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type VpnConnectionRouteType struct {
	pulumi.CustomResourceState

	// The CIDR block associated with the local subnet of the customer network.
	DestinationCidrBlock pulumi.StringOutput `pulumi:"destinationCidrBlock"`
	// The ID of the VPN connection.
	VpnConnectionId pulumi.StringOutput `pulumi:"vpnConnectionId"`
}

// NewVpnConnectionRouteType registers a new resource with the given unique name, arguments, and options.
func NewVpnConnectionRouteType(ctx *pulumi.Context,
	name string, args *VpnConnectionRouteTypeArgs, opts ...pulumi.ResourceOption) (*VpnConnectionRouteType, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationCidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'DestinationCidrBlock'")
	}
	if args.VpnConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'VpnConnectionId'")
	}
	var resource VpnConnectionRouteType
	err := ctx.RegisterResource("aws:ec2/vpnConnectionRoute:VpnConnectionRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpnConnectionRouteType gets an existing VpnConnectionRouteType resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnConnectionRouteType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpnConnectionRouteTypeState, opts ...pulumi.ResourceOption) (*VpnConnectionRouteType, error) {
	var resource VpnConnectionRouteType
	err := ctx.ReadResource("aws:ec2/vpnConnectionRoute:VpnConnectionRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpnConnectionRouteType resources.
type vpnConnectionRouteTypeState struct {
	// The CIDR block associated with the local subnet of the customer network.
	DestinationCidrBlock *string `pulumi:"destinationCidrBlock"`
	// The ID of the VPN connection.
	VpnConnectionId *string `pulumi:"vpnConnectionId"`
}

type VpnConnectionRouteTypeState struct {
	// The CIDR block associated with the local subnet of the customer network.
	DestinationCidrBlock pulumi.StringPtrInput
	// The ID of the VPN connection.
	VpnConnectionId pulumi.StringPtrInput
}

func (VpnConnectionRouteTypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnConnectionRouteTypeState)(nil)).Elem()
}

type vpnConnectionRouteTypeArgs struct {
	// The CIDR block associated with the local subnet of the customer network.
	DestinationCidrBlock string `pulumi:"destinationCidrBlock"`
	// The ID of the VPN connection.
	VpnConnectionId string `pulumi:"vpnConnectionId"`
}

// The set of arguments for constructing a VpnConnectionRouteType resource.
type VpnConnectionRouteTypeArgs struct {
	// The CIDR block associated with the local subnet of the customer network.
	DestinationCidrBlock pulumi.StringInput
	// The ID of the VPN connection.
	VpnConnectionId pulumi.StringInput
}

func (VpnConnectionRouteTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnConnectionRouteTypeArgs)(nil)).Elem()
}

type VpnConnectionRouteTypeInput interface {
	pulumi.Input

	ToVpnConnectionRouteTypeOutput() VpnConnectionRouteTypeOutput
	ToVpnConnectionRouteTypeOutputWithContext(ctx context.Context) VpnConnectionRouteTypeOutput
}

func (*VpnConnectionRouteType) ElementType() reflect.Type {
	return reflect.TypeOf((*VpnConnectionRouteType)(nil))
}

func (i *VpnConnectionRouteType) ToVpnConnectionRouteTypeOutput() VpnConnectionRouteTypeOutput {
	return i.ToVpnConnectionRouteTypeOutputWithContext(context.Background())
}

func (i *VpnConnectionRouteType) ToVpnConnectionRouteTypeOutputWithContext(ctx context.Context) VpnConnectionRouteTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnConnectionRouteTypeOutput)
}

func (i *VpnConnectionRouteType) ToVpnConnectionRouteTypePtrOutput() VpnConnectionRouteTypePtrOutput {
	return i.ToVpnConnectionRouteTypePtrOutputWithContext(context.Background())
}

func (i *VpnConnectionRouteType) ToVpnConnectionRouteTypePtrOutputWithContext(ctx context.Context) VpnConnectionRouteTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnConnectionRouteTypePtrOutput)
}

type VpnConnectionRouteTypePtrInput interface {
	pulumi.Input

	ToVpnConnectionRouteTypePtrOutput() VpnConnectionRouteTypePtrOutput
	ToVpnConnectionRouteTypePtrOutputWithContext(ctx context.Context) VpnConnectionRouteTypePtrOutput
}

type vpnConnectionRouteTypePtrType VpnConnectionRouteTypeArgs

func (*vpnConnectionRouteTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnConnectionRouteType)(nil))
}

func (i *vpnConnectionRouteTypePtrType) ToVpnConnectionRouteTypePtrOutput() VpnConnectionRouteTypePtrOutput {
	return i.ToVpnConnectionRouteTypePtrOutputWithContext(context.Background())
}

func (i *vpnConnectionRouteTypePtrType) ToVpnConnectionRouteTypePtrOutputWithContext(ctx context.Context) VpnConnectionRouteTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnConnectionRouteTypePtrOutput)
}

// VpnConnectionRouteTypeArrayInput is an input type that accepts VpnConnectionRouteTypeArray and VpnConnectionRouteTypeArrayOutput values.
// You can construct a concrete instance of `VpnConnectionRouteTypeArrayInput` via:
//
//          VpnConnectionRouteTypeArray{ VpnConnectionRouteTypeArgs{...} }
type VpnConnectionRouteTypeArrayInput interface {
	pulumi.Input

	ToVpnConnectionRouteTypeArrayOutput() VpnConnectionRouteTypeArrayOutput
	ToVpnConnectionRouteTypeArrayOutputWithContext(context.Context) VpnConnectionRouteTypeArrayOutput
}

type VpnConnectionRouteTypeArray []VpnConnectionRouteTypeInput

func (VpnConnectionRouteTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnConnectionRouteType)(nil)).Elem()
}

func (i VpnConnectionRouteTypeArray) ToVpnConnectionRouteTypeArrayOutput() VpnConnectionRouteTypeArrayOutput {
	return i.ToVpnConnectionRouteTypeArrayOutputWithContext(context.Background())
}

func (i VpnConnectionRouteTypeArray) ToVpnConnectionRouteTypeArrayOutputWithContext(ctx context.Context) VpnConnectionRouteTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnConnectionRouteTypeArrayOutput)
}

// VpnConnectionRouteTypeMapInput is an input type that accepts VpnConnectionRouteTypeMap and VpnConnectionRouteTypeMapOutput values.
// You can construct a concrete instance of `VpnConnectionRouteTypeMapInput` via:
//
//          VpnConnectionRouteTypeMap{ "key": VpnConnectionRouteTypeArgs{...} }
type VpnConnectionRouteTypeMapInput interface {
	pulumi.Input

	ToVpnConnectionRouteTypeMapOutput() VpnConnectionRouteTypeMapOutput
	ToVpnConnectionRouteTypeMapOutputWithContext(context.Context) VpnConnectionRouteTypeMapOutput
}

type VpnConnectionRouteTypeMap map[string]VpnConnectionRouteTypeInput

func (VpnConnectionRouteTypeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnConnectionRouteType)(nil)).Elem()
}

func (i VpnConnectionRouteTypeMap) ToVpnConnectionRouteTypeMapOutput() VpnConnectionRouteTypeMapOutput {
	return i.ToVpnConnectionRouteTypeMapOutputWithContext(context.Background())
}

func (i VpnConnectionRouteTypeMap) ToVpnConnectionRouteTypeMapOutputWithContext(ctx context.Context) VpnConnectionRouteTypeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnConnectionRouteTypeMapOutput)
}

type VpnConnectionRouteTypeOutput struct{ *pulumi.OutputState }

func (VpnConnectionRouteTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpnConnectionRouteType)(nil))
}

func (o VpnConnectionRouteTypeOutput) ToVpnConnectionRouteTypeOutput() VpnConnectionRouteTypeOutput {
	return o
}

func (o VpnConnectionRouteTypeOutput) ToVpnConnectionRouteTypeOutputWithContext(ctx context.Context) VpnConnectionRouteTypeOutput {
	return o
}

func (o VpnConnectionRouteTypeOutput) ToVpnConnectionRouteTypePtrOutput() VpnConnectionRouteTypePtrOutput {
	return o.ToVpnConnectionRouteTypePtrOutputWithContext(context.Background())
}

func (o VpnConnectionRouteTypeOutput) ToVpnConnectionRouteTypePtrOutputWithContext(ctx context.Context) VpnConnectionRouteTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VpnConnectionRouteType) *VpnConnectionRouteType {
		return &v
	}).(VpnConnectionRouteTypePtrOutput)
}

type VpnConnectionRouteTypePtrOutput struct{ *pulumi.OutputState }

func (VpnConnectionRouteTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnConnectionRouteType)(nil))
}

func (o VpnConnectionRouteTypePtrOutput) ToVpnConnectionRouteTypePtrOutput() VpnConnectionRouteTypePtrOutput {
	return o
}

func (o VpnConnectionRouteTypePtrOutput) ToVpnConnectionRouteTypePtrOutputWithContext(ctx context.Context) VpnConnectionRouteTypePtrOutput {
	return o
}

func (o VpnConnectionRouteTypePtrOutput) Elem() VpnConnectionRouteTypeOutput {
	return o.ApplyT(func(v *VpnConnectionRouteType) VpnConnectionRouteType {
		if v != nil {
			return *v
		}
		var ret VpnConnectionRouteType
		return ret
	}).(VpnConnectionRouteTypeOutput)
}

type VpnConnectionRouteTypeArrayOutput struct{ *pulumi.OutputState }

func (VpnConnectionRouteTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpnConnectionRouteType)(nil))
}

func (o VpnConnectionRouteTypeArrayOutput) ToVpnConnectionRouteTypeArrayOutput() VpnConnectionRouteTypeArrayOutput {
	return o
}

func (o VpnConnectionRouteTypeArrayOutput) ToVpnConnectionRouteTypeArrayOutputWithContext(ctx context.Context) VpnConnectionRouteTypeArrayOutput {
	return o
}

func (o VpnConnectionRouteTypeArrayOutput) Index(i pulumi.IntInput) VpnConnectionRouteTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VpnConnectionRouteType {
		return vs[0].([]VpnConnectionRouteType)[vs[1].(int)]
	}).(VpnConnectionRouteTypeOutput)
}

type VpnConnectionRouteTypeMapOutput struct{ *pulumi.OutputState }

func (VpnConnectionRouteTypeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VpnConnectionRouteType)(nil))
}

func (o VpnConnectionRouteTypeMapOutput) ToVpnConnectionRouteTypeMapOutput() VpnConnectionRouteTypeMapOutput {
	return o
}

func (o VpnConnectionRouteTypeMapOutput) ToVpnConnectionRouteTypeMapOutputWithContext(ctx context.Context) VpnConnectionRouteTypeMapOutput {
	return o
}

func (o VpnConnectionRouteTypeMapOutput) MapIndex(k pulumi.StringInput) VpnConnectionRouteTypeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) VpnConnectionRouteType {
		return vs[0].(map[string]VpnConnectionRouteType)[vs[1].(string)]
	}).(VpnConnectionRouteTypeOutput)
}

func init() {
	pulumi.RegisterOutputType(VpnConnectionRouteTypeOutput{})
	pulumi.RegisterOutputType(VpnConnectionRouteTypePtrOutput{})
	pulumi.RegisterOutputType(VpnConnectionRouteTypeArrayOutput{})
	pulumi.RegisterOutputType(VpnConnectionRouteTypeMapOutput{})
}
