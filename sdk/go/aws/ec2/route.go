// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource to create a routing table entry (a route) in a VPC routing table.
// 
// > **NOTE on Route Tables and Routes:** This provider currently
// provides both a standalone Route resource and a Route Table resource with routes
// defined in-line. At this time you cannot use a Route Table with in-line routes
// in conjunction with any Route resources. Doing so will cause
// a conflict of rule settings and will overwrite rules.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/route.html.markdown.
type Route struct {
	s *pulumi.ResourceState
}

// NewRoute registers a new resource with the given unique name, arguments, and options.
func NewRoute(ctx *pulumi.Context,
	name string, args *RouteArgs, opts ...pulumi.ResourceOpt) (*Route, error) {
	if args == nil || args.RouteTableId == nil {
		return nil, errors.New("missing required argument 'RouteTableId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["destinationCidrBlock"] = nil
		inputs["destinationIpv6CidrBlock"] = nil
		inputs["egressOnlyGatewayId"] = nil
		inputs["gatewayId"] = nil
		inputs["instanceId"] = nil
		inputs["natGatewayId"] = nil
		inputs["networkInterfaceId"] = nil
		inputs["routeTableId"] = nil
		inputs["transitGatewayId"] = nil
		inputs["vpcPeeringConnectionId"] = nil
	} else {
		inputs["destinationCidrBlock"] = args.DestinationCidrBlock
		inputs["destinationIpv6CidrBlock"] = args.DestinationIpv6CidrBlock
		inputs["egressOnlyGatewayId"] = args.EgressOnlyGatewayId
		inputs["gatewayId"] = args.GatewayId
		inputs["instanceId"] = args.InstanceId
		inputs["natGatewayId"] = args.NatGatewayId
		inputs["networkInterfaceId"] = args.NetworkInterfaceId
		inputs["routeTableId"] = args.RouteTableId
		inputs["transitGatewayId"] = args.TransitGatewayId
		inputs["vpcPeeringConnectionId"] = args.VpcPeeringConnectionId
	}
	inputs["destinationPrefixListId"] = nil
	inputs["instanceOwnerId"] = nil
	inputs["origin"] = nil
	inputs["state"] = nil
	s, err := ctx.RegisterResource("aws:ec2/route:Route", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Route{s: s}, nil
}

// GetRoute gets an existing Route resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoute(ctx *pulumi.Context,
	name string, id pulumi.ID, state *RouteState, opts ...pulumi.ResourceOpt) (*Route, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["destinationCidrBlock"] = state.DestinationCidrBlock
		inputs["destinationIpv6CidrBlock"] = state.DestinationIpv6CidrBlock
		inputs["destinationPrefixListId"] = state.DestinationPrefixListId
		inputs["egressOnlyGatewayId"] = state.EgressOnlyGatewayId
		inputs["gatewayId"] = state.GatewayId
		inputs["instanceId"] = state.InstanceId
		inputs["instanceOwnerId"] = state.InstanceOwnerId
		inputs["natGatewayId"] = state.NatGatewayId
		inputs["networkInterfaceId"] = state.NetworkInterfaceId
		inputs["origin"] = state.Origin
		inputs["routeTableId"] = state.RouteTableId
		inputs["state"] = state.State
		inputs["transitGatewayId"] = state.TransitGatewayId
		inputs["vpcPeeringConnectionId"] = state.VpcPeeringConnectionId
	}
	s, err := ctx.ReadResource("aws:ec2/route:Route", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Route{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Route) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Route) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The destination CIDR block.
func (r *Route) DestinationCidrBlock() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["destinationCidrBlock"])
}

// The destination IPv6 CIDR block.
func (r *Route) DestinationIpv6CidrBlock() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["destinationIpv6CidrBlock"])
}

func (r *Route) DestinationPrefixListId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["destinationPrefixListId"])
}

// Identifier of a VPC Egress Only Internet Gateway.
func (r *Route) EgressOnlyGatewayId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["egressOnlyGatewayId"])
}

// Identifier of a VPC internet gateway or a virtual private gateway.
func (r *Route) GatewayId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["gatewayId"])
}

// Identifier of an EC2 instance.
func (r *Route) InstanceId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["instanceId"])
}

func (r *Route) InstanceOwnerId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["instanceOwnerId"])
}

// Identifier of a VPC NAT gateway.
func (r *Route) NatGatewayId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["natGatewayId"])
}

// Identifier of an EC2 network interface.
func (r *Route) NetworkInterfaceId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["networkInterfaceId"])
}

func (r *Route) Origin() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["origin"])
}

// The ID of the routing table.
func (r *Route) RouteTableId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["routeTableId"])
}

func (r *Route) State() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["state"])
}

// Identifier of an EC2 Transit Gateway.
func (r *Route) TransitGatewayId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["transitGatewayId"])
}

// Identifier of a VPC peering connection.
func (r *Route) VpcPeeringConnectionId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["vpcPeeringConnectionId"])
}

// Input properties used for looking up and filtering Route resources.
type RouteState struct {
	// The destination CIDR block.
	DestinationCidrBlock interface{}
	// The destination IPv6 CIDR block.
	DestinationIpv6CidrBlock interface{}
	DestinationPrefixListId interface{}
	// Identifier of a VPC Egress Only Internet Gateway.
	EgressOnlyGatewayId interface{}
	// Identifier of a VPC internet gateway or a virtual private gateway.
	GatewayId interface{}
	// Identifier of an EC2 instance.
	InstanceId interface{}
	InstanceOwnerId interface{}
	// Identifier of a VPC NAT gateway.
	NatGatewayId interface{}
	// Identifier of an EC2 network interface.
	NetworkInterfaceId interface{}
	Origin interface{}
	// The ID of the routing table.
	RouteTableId interface{}
	State interface{}
	// Identifier of an EC2 Transit Gateway.
	TransitGatewayId interface{}
	// Identifier of a VPC peering connection.
	VpcPeeringConnectionId interface{}
}

// The set of arguments for constructing a Route resource.
type RouteArgs struct {
	// The destination CIDR block.
	DestinationCidrBlock interface{}
	// The destination IPv6 CIDR block.
	DestinationIpv6CidrBlock interface{}
	// Identifier of a VPC Egress Only Internet Gateway.
	EgressOnlyGatewayId interface{}
	// Identifier of a VPC internet gateway or a virtual private gateway.
	GatewayId interface{}
	// Identifier of an EC2 instance.
	InstanceId interface{}
	// Identifier of a VPC NAT gateway.
	NatGatewayId interface{}
	// Identifier of an EC2 network interface.
	NetworkInterfaceId interface{}
	// The ID of the routing table.
	RouteTableId interface{}
	// Identifier of an EC2 Transit Gateway.
	TransitGatewayId interface{}
	// Identifier of a VPC peering connection.
	VpcPeeringConnectionId interface{}
}
