// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Route struct {
	pulumi.CustomResourceState

	CarrierGatewayId         pulumi.StringPtrOutput `pulumi:"carrierGatewayId"`
	CoreNetworkArn           pulumi.StringPtrOutput `pulumi:"coreNetworkArn"`
	DestinationCidrBlock     pulumi.StringPtrOutput `pulumi:"destinationCidrBlock"`
	DestinationIpv6CidrBlock pulumi.StringPtrOutput `pulumi:"destinationIpv6CidrBlock"`
	DestinationPrefixListId  pulumi.StringPtrOutput `pulumi:"destinationPrefixListId"`
	EgressOnlyGatewayId      pulumi.StringPtrOutput `pulumi:"egressOnlyGatewayId"`
	GatewayId                pulumi.StringPtrOutput `pulumi:"gatewayId"`
	// Deprecated: Use network_interface_id instead
	InstanceId             pulumi.StringOutput    `pulumi:"instanceId"`
	InstanceOwnerId        pulumi.StringOutput    `pulumi:"instanceOwnerId"`
	LocalGatewayId         pulumi.StringPtrOutput `pulumi:"localGatewayId"`
	NatGatewayId           pulumi.StringPtrOutput `pulumi:"natGatewayId"`
	NetworkInterfaceId     pulumi.StringOutput    `pulumi:"networkInterfaceId"`
	Origin                 pulumi.StringOutput    `pulumi:"origin"`
	RouteTableId           pulumi.StringOutput    `pulumi:"routeTableId"`
	State                  pulumi.StringOutput    `pulumi:"state"`
	TransitGatewayId       pulumi.StringPtrOutput `pulumi:"transitGatewayId"`
	VpcEndpointId          pulumi.StringPtrOutput `pulumi:"vpcEndpointId"`
	VpcPeeringConnectionId pulumi.StringPtrOutput `pulumi:"vpcPeeringConnectionId"`
}

// NewRoute registers a new resource with the given unique name, arguments, and options.
func NewRoute(ctx *pulumi.Context,
	name string, args *RouteArgs, opts ...pulumi.ResourceOption) (*Route, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RouteTableId == nil {
		return nil, errors.New("invalid value for required argument 'RouteTableId'")
	}
	var resource Route
	err := ctx.RegisterResource("aws:ec2/route:Route", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoute gets an existing Route resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteState, opts ...pulumi.ResourceOption) (*Route, error) {
	var resource Route
	err := ctx.ReadResource("aws:ec2/route:Route", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Route resources.
type routeState struct {
	CarrierGatewayId         *string `pulumi:"carrierGatewayId"`
	CoreNetworkArn           *string `pulumi:"coreNetworkArn"`
	DestinationCidrBlock     *string `pulumi:"destinationCidrBlock"`
	DestinationIpv6CidrBlock *string `pulumi:"destinationIpv6CidrBlock"`
	DestinationPrefixListId  *string `pulumi:"destinationPrefixListId"`
	EgressOnlyGatewayId      *string `pulumi:"egressOnlyGatewayId"`
	GatewayId                *string `pulumi:"gatewayId"`
	// Deprecated: Use network_interface_id instead
	InstanceId             *string `pulumi:"instanceId"`
	InstanceOwnerId        *string `pulumi:"instanceOwnerId"`
	LocalGatewayId         *string `pulumi:"localGatewayId"`
	NatGatewayId           *string `pulumi:"natGatewayId"`
	NetworkInterfaceId     *string `pulumi:"networkInterfaceId"`
	Origin                 *string `pulumi:"origin"`
	RouteTableId           *string `pulumi:"routeTableId"`
	State                  *string `pulumi:"state"`
	TransitGatewayId       *string `pulumi:"transitGatewayId"`
	VpcEndpointId          *string `pulumi:"vpcEndpointId"`
	VpcPeeringConnectionId *string `pulumi:"vpcPeeringConnectionId"`
}

type RouteState struct {
	CarrierGatewayId         pulumi.StringPtrInput
	CoreNetworkArn           pulumi.StringPtrInput
	DestinationCidrBlock     pulumi.StringPtrInput
	DestinationIpv6CidrBlock pulumi.StringPtrInput
	DestinationPrefixListId  pulumi.StringPtrInput
	EgressOnlyGatewayId      pulumi.StringPtrInput
	GatewayId                pulumi.StringPtrInput
	// Deprecated: Use network_interface_id instead
	InstanceId             pulumi.StringPtrInput
	InstanceOwnerId        pulumi.StringPtrInput
	LocalGatewayId         pulumi.StringPtrInput
	NatGatewayId           pulumi.StringPtrInput
	NetworkInterfaceId     pulumi.StringPtrInput
	Origin                 pulumi.StringPtrInput
	RouteTableId           pulumi.StringPtrInput
	State                  pulumi.StringPtrInput
	TransitGatewayId       pulumi.StringPtrInput
	VpcEndpointId          pulumi.StringPtrInput
	VpcPeeringConnectionId pulumi.StringPtrInput
}

func (RouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeState)(nil)).Elem()
}

type routeArgs struct {
	CarrierGatewayId         *string `pulumi:"carrierGatewayId"`
	CoreNetworkArn           *string `pulumi:"coreNetworkArn"`
	DestinationCidrBlock     *string `pulumi:"destinationCidrBlock"`
	DestinationIpv6CidrBlock *string `pulumi:"destinationIpv6CidrBlock"`
	DestinationPrefixListId  *string `pulumi:"destinationPrefixListId"`
	EgressOnlyGatewayId      *string `pulumi:"egressOnlyGatewayId"`
	GatewayId                *string `pulumi:"gatewayId"`
	// Deprecated: Use network_interface_id instead
	InstanceId             *string `pulumi:"instanceId"`
	LocalGatewayId         *string `pulumi:"localGatewayId"`
	NatGatewayId           *string `pulumi:"natGatewayId"`
	NetworkInterfaceId     *string `pulumi:"networkInterfaceId"`
	RouteTableId           string  `pulumi:"routeTableId"`
	TransitGatewayId       *string `pulumi:"transitGatewayId"`
	VpcEndpointId          *string `pulumi:"vpcEndpointId"`
	VpcPeeringConnectionId *string `pulumi:"vpcPeeringConnectionId"`
}

// The set of arguments for constructing a Route resource.
type RouteArgs struct {
	CarrierGatewayId         pulumi.StringPtrInput
	CoreNetworkArn           pulumi.StringPtrInput
	DestinationCidrBlock     pulumi.StringPtrInput
	DestinationIpv6CidrBlock pulumi.StringPtrInput
	DestinationPrefixListId  pulumi.StringPtrInput
	EgressOnlyGatewayId      pulumi.StringPtrInput
	GatewayId                pulumi.StringPtrInput
	// Deprecated: Use network_interface_id instead
	InstanceId             pulumi.StringPtrInput
	LocalGatewayId         pulumi.StringPtrInput
	NatGatewayId           pulumi.StringPtrInput
	NetworkInterfaceId     pulumi.StringPtrInput
	RouteTableId           pulumi.StringInput
	TransitGatewayId       pulumi.StringPtrInput
	VpcEndpointId          pulumi.StringPtrInput
	VpcPeeringConnectionId pulumi.StringPtrInput
}

func (RouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeArgs)(nil)).Elem()
}

type RouteInput interface {
	pulumi.Input

	ToRouteOutput() RouteOutput
	ToRouteOutputWithContext(ctx context.Context) RouteOutput
}

func (*Route) ElementType() reflect.Type {
	return reflect.TypeOf((**Route)(nil)).Elem()
}

func (i *Route) ToRouteOutput() RouteOutput {
	return i.ToRouteOutputWithContext(context.Background())
}

func (i *Route) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteOutput)
}

// RouteArrayInput is an input type that accepts RouteArray and RouteArrayOutput values.
// You can construct a concrete instance of `RouteArrayInput` via:
//
//	RouteArray{ RouteArgs{...} }
type RouteArrayInput interface {
	pulumi.Input

	ToRouteArrayOutput() RouteArrayOutput
	ToRouteArrayOutputWithContext(context.Context) RouteArrayOutput
}

type RouteArray []RouteInput

func (RouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Route)(nil)).Elem()
}

func (i RouteArray) ToRouteArrayOutput() RouteArrayOutput {
	return i.ToRouteArrayOutputWithContext(context.Background())
}

func (i RouteArray) ToRouteArrayOutputWithContext(ctx context.Context) RouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteArrayOutput)
}

// RouteMapInput is an input type that accepts RouteMap and RouteMapOutput values.
// You can construct a concrete instance of `RouteMapInput` via:
//
//	RouteMap{ "key": RouteArgs{...} }
type RouteMapInput interface {
	pulumi.Input

	ToRouteMapOutput() RouteMapOutput
	ToRouteMapOutputWithContext(context.Context) RouteMapOutput
}

type RouteMap map[string]RouteInput

func (RouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Route)(nil)).Elem()
}

func (i RouteMap) ToRouteMapOutput() RouteMapOutput {
	return i.ToRouteMapOutputWithContext(context.Background())
}

func (i RouteMap) ToRouteMapOutputWithContext(ctx context.Context) RouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteMapOutput)
}

type RouteOutput struct{ *pulumi.OutputState }

func (RouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Route)(nil)).Elem()
}

func (o RouteOutput) ToRouteOutput() RouteOutput {
	return o
}

func (o RouteOutput) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return o
}

func (o RouteOutput) CarrierGatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.CarrierGatewayId }).(pulumi.StringPtrOutput)
}

func (o RouteOutput) CoreNetworkArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.CoreNetworkArn }).(pulumi.StringPtrOutput)
}

func (o RouteOutput) DestinationCidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.DestinationCidrBlock }).(pulumi.StringPtrOutput)
}

func (o RouteOutput) DestinationIpv6CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.DestinationIpv6CidrBlock }).(pulumi.StringPtrOutput)
}

func (o RouteOutput) DestinationPrefixListId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.DestinationPrefixListId }).(pulumi.StringPtrOutput)
}

func (o RouteOutput) EgressOnlyGatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.EgressOnlyGatewayId }).(pulumi.StringPtrOutput)
}

func (o RouteOutput) GatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.GatewayId }).(pulumi.StringPtrOutput)
}

// Deprecated: Use network_interface_id instead
func (o RouteOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o RouteOutput) InstanceOwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.InstanceOwnerId }).(pulumi.StringOutput)
}

func (o RouteOutput) LocalGatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.LocalGatewayId }).(pulumi.StringPtrOutput)
}

func (o RouteOutput) NatGatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.NatGatewayId }).(pulumi.StringPtrOutput)
}

func (o RouteOutput) NetworkInterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.NetworkInterfaceId }).(pulumi.StringOutput)
}

func (o RouteOutput) Origin() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.Origin }).(pulumi.StringOutput)
}

func (o RouteOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.RouteTableId }).(pulumi.StringOutput)
}

func (o RouteOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o RouteOutput) TransitGatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.TransitGatewayId }).(pulumi.StringPtrOutput)
}

func (o RouteOutput) VpcEndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.VpcEndpointId }).(pulumi.StringPtrOutput)
}

func (o RouteOutput) VpcPeeringConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.VpcPeeringConnectionId }).(pulumi.StringPtrOutput)
}

type RouteArrayOutput struct{ *pulumi.OutputState }

func (RouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Route)(nil)).Elem()
}

func (o RouteArrayOutput) ToRouteArrayOutput() RouteArrayOutput {
	return o
}

func (o RouteArrayOutput) ToRouteArrayOutputWithContext(ctx context.Context) RouteArrayOutput {
	return o
}

func (o RouteArrayOutput) Index(i pulumi.IntInput) RouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Route {
		return vs[0].([]*Route)[vs[1].(int)]
	}).(RouteOutput)
}

type RouteMapOutput struct{ *pulumi.OutputState }

func (RouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Route)(nil)).Elem()
}

func (o RouteMapOutput) ToRouteMapOutput() RouteMapOutput {
	return o
}

func (o RouteMapOutput) ToRouteMapOutputWithContext(ctx context.Context) RouteMapOutput {
	return o
}

func (o RouteMapOutput) MapIndex(k pulumi.StringInput) RouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Route {
		return vs[0].(map[string]*Route)[vs[1].(string)]
	}).(RouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteInput)(nil)).Elem(), &Route{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteArrayInput)(nil)).Elem(), RouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteMapInput)(nil)).Elem(), RouteMap{})
	pulumi.RegisterOutputType(RouteOutput{})
	pulumi.RegisterOutputType(RouteArrayOutput{})
	pulumi.RegisterOutputType(RouteMapOutput{})
}
