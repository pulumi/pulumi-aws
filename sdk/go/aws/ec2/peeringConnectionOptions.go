// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource to manage VPC peering connection options.
// 
// ~> **NOTE on VPC Peering Connections and VPC Peering Connection Options:** Terraform provides
// both a standalone VPC Peering Connection Options and a [VPC Peering Connection](vpc_peering.html)
// resource with `accepter` and `requester` attributes. Do not manage options for the same VPC peering
// connection in both a VPC Peering Connection resource and a VPC Peering Connection Options resource.
// Doing so will cause a conflict of options and will overwrite the options.
// Using a VPC Peering Connection Options resource decouples management of the connection options from
// management of the VPC Peering Connection and allows options to be set correctly in cross-account scenarios.
// 
// Basic usage:
// 
// ```hcl
// resource "aws_vpc" "foo" {
//   cidr_block = "10.0.0.0/16"
// }
// 
// resource "aws_vpc" "bar" {
//   cidr_block = "10.1.0.0/16"
// }
// 
// resource "aws_vpc_peering_connection" "foo" {
//   vpc_id        = "${aws_vpc.foo.id}"
//   peer_vpc_id   = "${aws_vpc.bar.id}"
//   auto_accept   = true
// }
// 
// resource "aws_vpc_peering_connection_options" "foo" {
//   vpc_peering_connection_id = "${aws_vpc_peering_connection.foo.id}"
// 
//   accepter {
//     allow_remote_vpc_dns_resolution = true
//   }
// 
//   requester {
//     allow_vpc_to_remote_classic_link = true
//     allow_classic_link_to_remote_vpc = true
//   }
// }
// ```
// 
// Basic cross-account usage:
// 
// ```hcl
// provider "aws" {
//   alias = "requester"
// 
//   # Requester's credentials.
// }
// 
// provider "aws" {
//   alias = "accepter"
// 
//   # Accepter's credentials.
// }
// 
// resource "aws_vpc" "main" {
//   provider = "aws.requester"
// 
//   cidr_block = "10.0.0.0/16"
// 
//   enable_dns_support   = true
//   enable_dns_hostnames = true
// }
// 
// resource "aws_vpc" "peer" {
//   provider = "aws.accepter"
// 
//   cidr_block = "10.1.0.0/16"
// 
//   enable_dns_support   = true
//   enable_dns_hostnames = true
// }
// 
// data "aws_caller_identity" "peer" {
//   provider = "aws.accepter"
// }
type PeeringConnectionOptions struct {
	s *pulumi.ResourceState
}

// NewPeeringConnectionOptions registers a new resource with the given unique name, arguments, and options.
func NewPeeringConnectionOptions(ctx *pulumi.Context,
	name string, args *PeeringConnectionOptionsArgs, opts ...pulumi.ResourceOpt) (*PeeringConnectionOptions, error) {
	if args == nil || args.VpcPeeringConnectionId == nil {
		return nil, errors.New("missing required argument 'VpcPeeringConnectionId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accepter"] = nil
		inputs["requester"] = nil
		inputs["vpcPeeringConnectionId"] = nil
	} else {
		inputs["accepter"] = args.Accepter
		inputs["requester"] = args.Requester
		inputs["vpcPeeringConnectionId"] = args.VpcPeeringConnectionId
	}
	s, err := ctx.RegisterResource("aws:ec2/peeringConnectionOptions:PeeringConnectionOptions", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &PeeringConnectionOptions{s: s}, nil
}

// GetPeeringConnectionOptions gets an existing PeeringConnectionOptions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPeeringConnectionOptions(ctx *pulumi.Context,
	name string, id pulumi.ID, state *PeeringConnectionOptionsState, opts ...pulumi.ResourceOpt) (*PeeringConnectionOptions, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accepter"] = state.Accepter
		inputs["requester"] = state.Requester
		inputs["vpcPeeringConnectionId"] = state.VpcPeeringConnectionId
	}
	s, err := ctx.ReadResource("aws:ec2/peeringConnectionOptions:PeeringConnectionOptions", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &PeeringConnectionOptions{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *PeeringConnectionOptions) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *PeeringConnectionOptions) ID() *pulumi.IDOutput {
	return r.s.ID
}

// An optional configuration block that allows for [VPC Peering Connection]
// (http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide) options to be set for the VPC that accepts
// the peering connection (a maximum of one).
func (r *PeeringConnectionOptions) Accepter() *pulumi.Output {
	return r.s.State["accepter"]
}

// A optional configuration block that allows for [VPC Peering Connection]
// (http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide) options to be set for the VPC that requests
// the peering connection (a maximum of one).
func (r *PeeringConnectionOptions) Requester() *pulumi.Output {
	return r.s.State["requester"]
}

// The ID of the requester VPC peering connection.
func (r *PeeringConnectionOptions) VpcPeeringConnectionId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["vpcPeeringConnectionId"])
}

// Input properties used for looking up and filtering PeeringConnectionOptions resources.
type PeeringConnectionOptionsState struct {
	// An optional configuration block that allows for [VPC Peering Connection]
	// (http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide) options to be set for the VPC that accepts
	// the peering connection (a maximum of one).
	Accepter interface{}
	// A optional configuration block that allows for [VPC Peering Connection]
	// (http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide) options to be set for the VPC that requests
	// the peering connection (a maximum of one).
	Requester interface{}
	// The ID of the requester VPC peering connection.
	VpcPeeringConnectionId interface{}
}

// The set of arguments for constructing a PeeringConnectionOptions resource.
type PeeringConnectionOptionsArgs struct {
	// An optional configuration block that allows for [VPC Peering Connection]
	// (http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide) options to be set for the VPC that accepts
	// the peering connection (a maximum of one).
	Accepter interface{}
	// A optional configuration block that allows for [VPC Peering Connection]
	// (http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide) options to be set for the VPC that requests
	// the peering connection (a maximum of one).
	Requester interface{}
	// The ID of the requester VPC peering connection.
	VpcPeeringConnectionId interface{}
}
