// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PeeringConnectionOptions struct {
	pulumi.CustomResourceState

	Accepter               PeeringConnectionOptionsAccepterOutput  `pulumi:"accepter"`
	Requester              PeeringConnectionOptionsRequesterOutput `pulumi:"requester"`
	VpcPeeringConnectionId pulumi.StringOutput                     `pulumi:"vpcPeeringConnectionId"`
}

// NewPeeringConnectionOptions registers a new resource with the given unique name, arguments, and options.
func NewPeeringConnectionOptions(ctx *pulumi.Context,
	name string, args *PeeringConnectionOptionsArgs, opts ...pulumi.ResourceOption) (*PeeringConnectionOptions, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VpcPeeringConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'VpcPeeringConnectionId'")
	}
	var resource PeeringConnectionOptions
	err := ctx.RegisterResource("aws:ec2/peeringConnectionOptions:PeeringConnectionOptions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPeeringConnectionOptions gets an existing PeeringConnectionOptions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPeeringConnectionOptions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PeeringConnectionOptionsState, opts ...pulumi.ResourceOption) (*PeeringConnectionOptions, error) {
	var resource PeeringConnectionOptions
	err := ctx.ReadResource("aws:ec2/peeringConnectionOptions:PeeringConnectionOptions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PeeringConnectionOptions resources.
type peeringConnectionOptionsState struct {
	Accepter               *PeeringConnectionOptionsAccepter  `pulumi:"accepter"`
	Requester              *PeeringConnectionOptionsRequester `pulumi:"requester"`
	VpcPeeringConnectionId *string                            `pulumi:"vpcPeeringConnectionId"`
}

type PeeringConnectionOptionsState struct {
	Accepter               PeeringConnectionOptionsAccepterPtrInput
	Requester              PeeringConnectionOptionsRequesterPtrInput
	VpcPeeringConnectionId pulumi.StringPtrInput
}

func (PeeringConnectionOptionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*peeringConnectionOptionsState)(nil)).Elem()
}

type peeringConnectionOptionsArgs struct {
	Accepter               *PeeringConnectionOptionsAccepter  `pulumi:"accepter"`
	Requester              *PeeringConnectionOptionsRequester `pulumi:"requester"`
	VpcPeeringConnectionId string                             `pulumi:"vpcPeeringConnectionId"`
}

// The set of arguments for constructing a PeeringConnectionOptions resource.
type PeeringConnectionOptionsArgs struct {
	Accepter               PeeringConnectionOptionsAccepterPtrInput
	Requester              PeeringConnectionOptionsRequesterPtrInput
	VpcPeeringConnectionId pulumi.StringInput
}

func (PeeringConnectionOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*peeringConnectionOptionsArgs)(nil)).Elem()
}

type PeeringConnectionOptionsInput interface {
	pulumi.Input

	ToPeeringConnectionOptionsOutput() PeeringConnectionOptionsOutput
	ToPeeringConnectionOptionsOutputWithContext(ctx context.Context) PeeringConnectionOptionsOutput
}

func (*PeeringConnectionOptions) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringConnectionOptions)(nil)).Elem()
}

func (i *PeeringConnectionOptions) ToPeeringConnectionOptionsOutput() PeeringConnectionOptionsOutput {
	return i.ToPeeringConnectionOptionsOutputWithContext(context.Background())
}

func (i *PeeringConnectionOptions) ToPeeringConnectionOptionsOutputWithContext(ctx context.Context) PeeringConnectionOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringConnectionOptionsOutput)
}

// PeeringConnectionOptionsArrayInput is an input type that accepts PeeringConnectionOptionsArray and PeeringConnectionOptionsArrayOutput values.
// You can construct a concrete instance of `PeeringConnectionOptionsArrayInput` via:
//
//	PeeringConnectionOptionsArray{ PeeringConnectionOptionsArgs{...} }
type PeeringConnectionOptionsArrayInput interface {
	pulumi.Input

	ToPeeringConnectionOptionsArrayOutput() PeeringConnectionOptionsArrayOutput
	ToPeeringConnectionOptionsArrayOutputWithContext(context.Context) PeeringConnectionOptionsArrayOutput
}

type PeeringConnectionOptionsArray []PeeringConnectionOptionsInput

func (PeeringConnectionOptionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PeeringConnectionOptions)(nil)).Elem()
}

func (i PeeringConnectionOptionsArray) ToPeeringConnectionOptionsArrayOutput() PeeringConnectionOptionsArrayOutput {
	return i.ToPeeringConnectionOptionsArrayOutputWithContext(context.Background())
}

func (i PeeringConnectionOptionsArray) ToPeeringConnectionOptionsArrayOutputWithContext(ctx context.Context) PeeringConnectionOptionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringConnectionOptionsArrayOutput)
}

// PeeringConnectionOptionsMapInput is an input type that accepts PeeringConnectionOptionsMap and PeeringConnectionOptionsMapOutput values.
// You can construct a concrete instance of `PeeringConnectionOptionsMapInput` via:
//
//	PeeringConnectionOptionsMap{ "key": PeeringConnectionOptionsArgs{...} }
type PeeringConnectionOptionsMapInput interface {
	pulumi.Input

	ToPeeringConnectionOptionsMapOutput() PeeringConnectionOptionsMapOutput
	ToPeeringConnectionOptionsMapOutputWithContext(context.Context) PeeringConnectionOptionsMapOutput
}

type PeeringConnectionOptionsMap map[string]PeeringConnectionOptionsInput

func (PeeringConnectionOptionsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PeeringConnectionOptions)(nil)).Elem()
}

func (i PeeringConnectionOptionsMap) ToPeeringConnectionOptionsMapOutput() PeeringConnectionOptionsMapOutput {
	return i.ToPeeringConnectionOptionsMapOutputWithContext(context.Background())
}

func (i PeeringConnectionOptionsMap) ToPeeringConnectionOptionsMapOutputWithContext(ctx context.Context) PeeringConnectionOptionsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringConnectionOptionsMapOutput)
}

type PeeringConnectionOptionsOutput struct{ *pulumi.OutputState }

func (PeeringConnectionOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringConnectionOptions)(nil)).Elem()
}

func (o PeeringConnectionOptionsOutput) ToPeeringConnectionOptionsOutput() PeeringConnectionOptionsOutput {
	return o
}

func (o PeeringConnectionOptionsOutput) ToPeeringConnectionOptionsOutputWithContext(ctx context.Context) PeeringConnectionOptionsOutput {
	return o
}

func (o PeeringConnectionOptionsOutput) Accepter() PeeringConnectionOptionsAccepterOutput {
	return o.ApplyT(func(v *PeeringConnectionOptions) PeeringConnectionOptionsAccepterOutput { return v.Accepter }).(PeeringConnectionOptionsAccepterOutput)
}

func (o PeeringConnectionOptionsOutput) Requester() PeeringConnectionOptionsRequesterOutput {
	return o.ApplyT(func(v *PeeringConnectionOptions) PeeringConnectionOptionsRequesterOutput { return v.Requester }).(PeeringConnectionOptionsRequesterOutput)
}

func (o PeeringConnectionOptionsOutput) VpcPeeringConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *PeeringConnectionOptions) pulumi.StringOutput { return v.VpcPeeringConnectionId }).(pulumi.StringOutput)
}

type PeeringConnectionOptionsArrayOutput struct{ *pulumi.OutputState }

func (PeeringConnectionOptionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PeeringConnectionOptions)(nil)).Elem()
}

func (o PeeringConnectionOptionsArrayOutput) ToPeeringConnectionOptionsArrayOutput() PeeringConnectionOptionsArrayOutput {
	return o
}

func (o PeeringConnectionOptionsArrayOutput) ToPeeringConnectionOptionsArrayOutputWithContext(ctx context.Context) PeeringConnectionOptionsArrayOutput {
	return o
}

func (o PeeringConnectionOptionsArrayOutput) Index(i pulumi.IntInput) PeeringConnectionOptionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PeeringConnectionOptions {
		return vs[0].([]*PeeringConnectionOptions)[vs[1].(int)]
	}).(PeeringConnectionOptionsOutput)
}

type PeeringConnectionOptionsMapOutput struct{ *pulumi.OutputState }

func (PeeringConnectionOptionsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PeeringConnectionOptions)(nil)).Elem()
}

func (o PeeringConnectionOptionsMapOutput) ToPeeringConnectionOptionsMapOutput() PeeringConnectionOptionsMapOutput {
	return o
}

func (o PeeringConnectionOptionsMapOutput) ToPeeringConnectionOptionsMapOutputWithContext(ctx context.Context) PeeringConnectionOptionsMapOutput {
	return o
}

func (o PeeringConnectionOptionsMapOutput) MapIndex(k pulumi.StringInput) PeeringConnectionOptionsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PeeringConnectionOptions {
		return vs[0].(map[string]*PeeringConnectionOptions)[vs[1].(string)]
	}).(PeeringConnectionOptionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PeeringConnectionOptionsInput)(nil)).Elem(), &PeeringConnectionOptions{})
	pulumi.RegisterInputType(reflect.TypeOf((*PeeringConnectionOptionsArrayInput)(nil)).Elem(), PeeringConnectionOptionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PeeringConnectionOptionsMapInput)(nil)).Elem(), PeeringConnectionOptionsMap{})
	pulumi.RegisterOutputType(PeeringConnectionOptionsOutput{})
	pulumi.RegisterOutputType(PeeringConnectionOptionsArrayOutput{})
	pulumi.RegisterOutputType(PeeringConnectionOptionsMapOutput{})
}
