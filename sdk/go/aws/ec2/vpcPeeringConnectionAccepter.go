// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to manage the accepter's side of a VPC Peering Connection.
//
// When a cross-account (requester's AWS account differs from the accepter's AWS account) or an inter-region
// VPC Peering Connection is created, a VPC Peering Connection resource is automatically created in the
// accepter's account.
// The requester can use the `ec2.VpcPeeringConnection` resource to manage its side of the connection
// and the accepter can use the `ec2.VpcPeeringConnectionAccepter` resource to "adopt" its side of the
// connection into management.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws"
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ec2"
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/providers"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := providers.Newaws(ctx, "peer", &providers.awsArgs{
// 			Region: "us-west-2",
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		main, err := ec2.NewVpc(ctx, "main", &ec2.VpcArgs{
// 			CidrBlock: pulumi.String("10.0.0.0/16"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		peerVpc, err := ec2.NewVpc(ctx, "peerVpc", &ec2.VpcArgs{
// 			CidrBlock: pulumi.String("10.1.0.0/16"),
// 		}, pulumi.Provider(aws.Peer))
// 		if err != nil {
// 			return err
// 		}
// 		peerCallerIdentity, err := aws.GetCallerIdentity(ctx, nil, nil)
// 		if err != nil {
// 			return err
// 		}
// 		peerVpcPeeringConnection, err := ec2.NewVpcPeeringConnection(ctx, "peerVpcPeeringConnection", &ec2.VpcPeeringConnectionArgs{
// 			VpcId:       main.ID(),
// 			PeerVpcId:   peerVpc.ID(),
// 			PeerOwnerId: pulumi.String(peerCallerIdentity.AccountId),
// 			PeerRegion:  pulumi.String("us-west-2"),
// 			AutoAccept:  pulumi.Bool(false),
// 			Tags: pulumi.StringMap{
// 				"Side": pulumi.String("Requester"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = ec2.NewVpcPeeringConnectionAccepter(ctx, "peerVpcPeeringConnectionAccepter", &ec2.VpcPeeringConnectionAccepterArgs{
// 			VpcPeeringConnectionId: peerVpcPeeringConnection.ID(),
// 			AutoAccept:             pulumi.Bool(true),
// 			Tags: pulumi.StringMap{
// 				"Side": pulumi.String("Accepter"),
// 			},
// 		}, pulumi.Provider(aws.Peer))
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// VPC Peering Connection Accepters can be imported by using the Peering Connection ID, e.g.
//
// ```sh
//  $ pulumi import aws:ec2/vpcPeeringConnectionAccepter:VpcPeeringConnectionAccepter example pcx-12345678
// ```
//
//  Certain resource arguments, like `auto_accept`, do not have an EC2 API method for reading the information after peering connection creation. If the argument is set in the provider configuration on an imported resource, this provder will always show a difference. To workaround this behavior, either omit the argument from the configuration or use [`ignoreChanges`](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) to hide the difference, e.g. terraform resource "aws_vpc_peering_connection_accepter" "example" {
//
// # ... other configuration ...
//
// # There is no AWS EC2 API for reading auto_accept
//
//  lifecycle {
//
//  ignore_changes = [auto_accept]
//
//  } }
type VpcPeeringConnectionAccepterType struct {
	pulumi.CustomResourceState

	// The status of the VPC Peering Connection request.
	AcceptStatus pulumi.StringOutput `pulumi:"acceptStatus"`
	// A configuration block that describes [VPC Peering Connection]
	// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the accepter VPC.
	Accepter VpcPeeringConnectionAccepterAccepterOutput `pulumi:"accepter"`
	// Whether or not to accept the peering request. Defaults to `false`.
	AutoAccept pulumi.BoolPtrOutput `pulumi:"autoAccept"`
	// The AWS account ID of the owner of the requester VPC.
	PeerOwnerId pulumi.StringOutput `pulumi:"peerOwnerId"`
	// The region of the accepter VPC.
	PeerRegion pulumi.StringOutput `pulumi:"peerRegion"`
	// The ID of the requester VPC.
	PeerVpcId pulumi.StringOutput `pulumi:"peerVpcId"`
	// A configuration block that describes [VPC Peering Connection]
	// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the requester VPC.
	Requester VpcPeeringConnectionAccepterRequesterOutput `pulumi:"requester"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider .
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// The ID of the accepter VPC.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// The VPC Peering Connection ID to manage.
	VpcPeeringConnectionId pulumi.StringOutput `pulumi:"vpcPeeringConnectionId"`
}

// NewVpcPeeringConnectionAccepterType registers a new resource with the given unique name, arguments, and options.
func NewVpcPeeringConnectionAccepterType(ctx *pulumi.Context,
	name string, args *VpcPeeringConnectionAccepterTypeArgs, opts ...pulumi.ResourceOption) (*VpcPeeringConnectionAccepterType, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VpcPeeringConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'VpcPeeringConnectionId'")
	}
	var resource VpcPeeringConnectionAccepterType
	err := ctx.RegisterResource("aws:ec2/vpcPeeringConnectionAccepter:VpcPeeringConnectionAccepter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcPeeringConnectionAccepterType gets an existing VpcPeeringConnectionAccepterType resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcPeeringConnectionAccepterType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcPeeringConnectionAccepterTypeState, opts ...pulumi.ResourceOption) (*VpcPeeringConnectionAccepterType, error) {
	var resource VpcPeeringConnectionAccepterType
	err := ctx.ReadResource("aws:ec2/vpcPeeringConnectionAccepter:VpcPeeringConnectionAccepter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcPeeringConnectionAccepterType resources.
type vpcPeeringConnectionAccepterTypeState struct {
	// The status of the VPC Peering Connection request.
	AcceptStatus *string `pulumi:"acceptStatus"`
	// A configuration block that describes [VPC Peering Connection]
	// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the accepter VPC.
	Accepter *VpcPeeringConnectionAccepterAccepter `pulumi:"accepter"`
	// Whether or not to accept the peering request. Defaults to `false`.
	AutoAccept *bool `pulumi:"autoAccept"`
	// The AWS account ID of the owner of the requester VPC.
	PeerOwnerId *string `pulumi:"peerOwnerId"`
	// The region of the accepter VPC.
	PeerRegion *string `pulumi:"peerRegion"`
	// The ID of the requester VPC.
	PeerVpcId *string `pulumi:"peerVpcId"`
	// A configuration block that describes [VPC Peering Connection]
	// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the requester VPC.
	Requester *VpcPeeringConnectionAccepterRequester `pulumi:"requester"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider .
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The ID of the accepter VPC.
	VpcId *string `pulumi:"vpcId"`
	// The VPC Peering Connection ID to manage.
	VpcPeeringConnectionId *string `pulumi:"vpcPeeringConnectionId"`
}

type VpcPeeringConnectionAccepterTypeState struct {
	// The status of the VPC Peering Connection request.
	AcceptStatus pulumi.StringPtrInput
	// A configuration block that describes [VPC Peering Connection]
	// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the accepter VPC.
	Accepter VpcPeeringConnectionAccepterAccepterPtrInput
	// Whether or not to accept the peering request. Defaults to `false`.
	AutoAccept pulumi.BoolPtrInput
	// The AWS account ID of the owner of the requester VPC.
	PeerOwnerId pulumi.StringPtrInput
	// The region of the accepter VPC.
	PeerRegion pulumi.StringPtrInput
	// The ID of the requester VPC.
	PeerVpcId pulumi.StringPtrInput
	// A configuration block that describes [VPC Peering Connection]
	// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the requester VPC.
	Requester VpcPeeringConnectionAccepterRequesterPtrInput
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider .
	TagsAll pulumi.StringMapInput
	// The ID of the accepter VPC.
	VpcId pulumi.StringPtrInput
	// The VPC Peering Connection ID to manage.
	VpcPeeringConnectionId pulumi.StringPtrInput
}

func (VpcPeeringConnectionAccepterTypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcPeeringConnectionAccepterTypeState)(nil)).Elem()
}

type vpcPeeringConnectionAccepterTypeArgs struct {
	// A configuration block that describes [VPC Peering Connection]
	// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the accepter VPC.
	Accepter *VpcPeeringConnectionAccepterAccepter `pulumi:"accepter"`
	// Whether or not to accept the peering request. Defaults to `false`.
	AutoAccept *bool `pulumi:"autoAccept"`
	// A configuration block that describes [VPC Peering Connection]
	// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the requester VPC.
	Requester *VpcPeeringConnectionAccepterRequester `pulumi:"requester"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider .
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The VPC Peering Connection ID to manage.
	VpcPeeringConnectionId string `pulumi:"vpcPeeringConnectionId"`
}

// The set of arguments for constructing a VpcPeeringConnectionAccepterType resource.
type VpcPeeringConnectionAccepterTypeArgs struct {
	// A configuration block that describes [VPC Peering Connection]
	// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the accepter VPC.
	Accepter VpcPeeringConnectionAccepterAccepterPtrInput
	// Whether or not to accept the peering request. Defaults to `false`.
	AutoAccept pulumi.BoolPtrInput
	// A configuration block that describes [VPC Peering Connection]
	// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the requester VPC.
	Requester VpcPeeringConnectionAccepterRequesterPtrInput
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider .
	TagsAll pulumi.StringMapInput
	// The VPC Peering Connection ID to manage.
	VpcPeeringConnectionId pulumi.StringInput
}

func (VpcPeeringConnectionAccepterTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcPeeringConnectionAccepterTypeArgs)(nil)).Elem()
}

type VpcPeeringConnectionAccepterTypeInput interface {
	pulumi.Input

	ToVpcPeeringConnectionAccepterTypeOutput() VpcPeeringConnectionAccepterTypeOutput
	ToVpcPeeringConnectionAccepterTypeOutputWithContext(ctx context.Context) VpcPeeringConnectionAccepterTypeOutput
}

func (*VpcPeeringConnectionAccepterType) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcPeeringConnectionAccepterType)(nil))
}

func (i *VpcPeeringConnectionAccepterType) ToVpcPeeringConnectionAccepterTypeOutput() VpcPeeringConnectionAccepterTypeOutput {
	return i.ToVpcPeeringConnectionAccepterTypeOutputWithContext(context.Background())
}

func (i *VpcPeeringConnectionAccepterType) ToVpcPeeringConnectionAccepterTypeOutputWithContext(ctx context.Context) VpcPeeringConnectionAccepterTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPeeringConnectionAccepterTypeOutput)
}

func (i *VpcPeeringConnectionAccepterType) ToVpcPeeringConnectionAccepterTypePtrOutput() VpcPeeringConnectionAccepterTypePtrOutput {
	return i.ToVpcPeeringConnectionAccepterTypePtrOutputWithContext(context.Background())
}

func (i *VpcPeeringConnectionAccepterType) ToVpcPeeringConnectionAccepterTypePtrOutputWithContext(ctx context.Context) VpcPeeringConnectionAccepterTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPeeringConnectionAccepterTypePtrOutput)
}

type VpcPeeringConnectionAccepterTypePtrInput interface {
	pulumi.Input

	ToVpcPeeringConnectionAccepterTypePtrOutput() VpcPeeringConnectionAccepterTypePtrOutput
	ToVpcPeeringConnectionAccepterTypePtrOutputWithContext(ctx context.Context) VpcPeeringConnectionAccepterTypePtrOutput
}

type vpcPeeringConnectionAccepterTypePtrType VpcPeeringConnectionAccepterTypeArgs

func (*vpcPeeringConnectionAccepterTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcPeeringConnectionAccepterType)(nil))
}

func (i *vpcPeeringConnectionAccepterTypePtrType) ToVpcPeeringConnectionAccepterTypePtrOutput() VpcPeeringConnectionAccepterTypePtrOutput {
	return i.ToVpcPeeringConnectionAccepterTypePtrOutputWithContext(context.Background())
}

func (i *vpcPeeringConnectionAccepterTypePtrType) ToVpcPeeringConnectionAccepterTypePtrOutputWithContext(ctx context.Context) VpcPeeringConnectionAccepterTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPeeringConnectionAccepterTypePtrOutput)
}

// VpcPeeringConnectionAccepterTypeArrayInput is an input type that accepts VpcPeeringConnectionAccepterTypeArray and VpcPeeringConnectionAccepterTypeArrayOutput values.
// You can construct a concrete instance of `VpcPeeringConnectionAccepterTypeArrayInput` via:
//
//          VpcPeeringConnectionAccepterTypeArray{ VpcPeeringConnectionAccepterTypeArgs{...} }
type VpcPeeringConnectionAccepterTypeArrayInput interface {
	pulumi.Input

	ToVpcPeeringConnectionAccepterTypeArrayOutput() VpcPeeringConnectionAccepterTypeArrayOutput
	ToVpcPeeringConnectionAccepterTypeArrayOutputWithContext(context.Context) VpcPeeringConnectionAccepterTypeArrayOutput
}

type VpcPeeringConnectionAccepterTypeArray []VpcPeeringConnectionAccepterTypeInput

func (VpcPeeringConnectionAccepterTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcPeeringConnectionAccepterType)(nil)).Elem()
}

func (i VpcPeeringConnectionAccepterTypeArray) ToVpcPeeringConnectionAccepterTypeArrayOutput() VpcPeeringConnectionAccepterTypeArrayOutput {
	return i.ToVpcPeeringConnectionAccepterTypeArrayOutputWithContext(context.Background())
}

func (i VpcPeeringConnectionAccepterTypeArray) ToVpcPeeringConnectionAccepterTypeArrayOutputWithContext(ctx context.Context) VpcPeeringConnectionAccepterTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPeeringConnectionAccepterTypeArrayOutput)
}

// VpcPeeringConnectionAccepterTypeMapInput is an input type that accepts VpcPeeringConnectionAccepterTypeMap and VpcPeeringConnectionAccepterTypeMapOutput values.
// You can construct a concrete instance of `VpcPeeringConnectionAccepterTypeMapInput` via:
//
//          VpcPeeringConnectionAccepterTypeMap{ "key": VpcPeeringConnectionAccepterTypeArgs{...} }
type VpcPeeringConnectionAccepterTypeMapInput interface {
	pulumi.Input

	ToVpcPeeringConnectionAccepterTypeMapOutput() VpcPeeringConnectionAccepterTypeMapOutput
	ToVpcPeeringConnectionAccepterTypeMapOutputWithContext(context.Context) VpcPeeringConnectionAccepterTypeMapOutput
}

type VpcPeeringConnectionAccepterTypeMap map[string]VpcPeeringConnectionAccepterTypeInput

func (VpcPeeringConnectionAccepterTypeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcPeeringConnectionAccepterType)(nil)).Elem()
}

func (i VpcPeeringConnectionAccepterTypeMap) ToVpcPeeringConnectionAccepterTypeMapOutput() VpcPeeringConnectionAccepterTypeMapOutput {
	return i.ToVpcPeeringConnectionAccepterTypeMapOutputWithContext(context.Background())
}

func (i VpcPeeringConnectionAccepterTypeMap) ToVpcPeeringConnectionAccepterTypeMapOutputWithContext(ctx context.Context) VpcPeeringConnectionAccepterTypeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPeeringConnectionAccepterTypeMapOutput)
}

type VpcPeeringConnectionAccepterTypeOutput struct{ *pulumi.OutputState }

func (VpcPeeringConnectionAccepterTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcPeeringConnectionAccepterType)(nil))
}

func (o VpcPeeringConnectionAccepterTypeOutput) ToVpcPeeringConnectionAccepterTypeOutput() VpcPeeringConnectionAccepterTypeOutput {
	return o
}

func (o VpcPeeringConnectionAccepterTypeOutput) ToVpcPeeringConnectionAccepterTypeOutputWithContext(ctx context.Context) VpcPeeringConnectionAccepterTypeOutput {
	return o
}

func (o VpcPeeringConnectionAccepterTypeOutput) ToVpcPeeringConnectionAccepterTypePtrOutput() VpcPeeringConnectionAccepterTypePtrOutput {
	return o.ToVpcPeeringConnectionAccepterTypePtrOutputWithContext(context.Background())
}

func (o VpcPeeringConnectionAccepterTypeOutput) ToVpcPeeringConnectionAccepterTypePtrOutputWithContext(ctx context.Context) VpcPeeringConnectionAccepterTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VpcPeeringConnectionAccepterType) *VpcPeeringConnectionAccepterType {
		return &v
	}).(VpcPeeringConnectionAccepterTypePtrOutput)
}

type VpcPeeringConnectionAccepterTypePtrOutput struct{ *pulumi.OutputState }

func (VpcPeeringConnectionAccepterTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcPeeringConnectionAccepterType)(nil))
}

func (o VpcPeeringConnectionAccepterTypePtrOutput) ToVpcPeeringConnectionAccepterTypePtrOutput() VpcPeeringConnectionAccepterTypePtrOutput {
	return o
}

func (o VpcPeeringConnectionAccepterTypePtrOutput) ToVpcPeeringConnectionAccepterTypePtrOutputWithContext(ctx context.Context) VpcPeeringConnectionAccepterTypePtrOutput {
	return o
}

func (o VpcPeeringConnectionAccepterTypePtrOutput) Elem() VpcPeeringConnectionAccepterTypeOutput {
	return o.ApplyT(func(v *VpcPeeringConnectionAccepterType) VpcPeeringConnectionAccepterType {
		if v != nil {
			return *v
		}
		var ret VpcPeeringConnectionAccepterType
		return ret
	}).(VpcPeeringConnectionAccepterTypeOutput)
}

type VpcPeeringConnectionAccepterTypeArrayOutput struct{ *pulumi.OutputState }

func (VpcPeeringConnectionAccepterTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcPeeringConnectionAccepterType)(nil))
}

func (o VpcPeeringConnectionAccepterTypeArrayOutput) ToVpcPeeringConnectionAccepterTypeArrayOutput() VpcPeeringConnectionAccepterTypeArrayOutput {
	return o
}

func (o VpcPeeringConnectionAccepterTypeArrayOutput) ToVpcPeeringConnectionAccepterTypeArrayOutputWithContext(ctx context.Context) VpcPeeringConnectionAccepterTypeArrayOutput {
	return o
}

func (o VpcPeeringConnectionAccepterTypeArrayOutput) Index(i pulumi.IntInput) VpcPeeringConnectionAccepterTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VpcPeeringConnectionAccepterType {
		return vs[0].([]VpcPeeringConnectionAccepterType)[vs[1].(int)]
	}).(VpcPeeringConnectionAccepterTypeOutput)
}

type VpcPeeringConnectionAccepterTypeMapOutput struct{ *pulumi.OutputState }

func (VpcPeeringConnectionAccepterTypeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VpcPeeringConnectionAccepterType)(nil))
}

func (o VpcPeeringConnectionAccepterTypeMapOutput) ToVpcPeeringConnectionAccepterTypeMapOutput() VpcPeeringConnectionAccepterTypeMapOutput {
	return o
}

func (o VpcPeeringConnectionAccepterTypeMapOutput) ToVpcPeeringConnectionAccepterTypeMapOutputWithContext(ctx context.Context) VpcPeeringConnectionAccepterTypeMapOutput {
	return o
}

func (o VpcPeeringConnectionAccepterTypeMapOutput) MapIndex(k pulumi.StringInput) VpcPeeringConnectionAccepterTypeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) VpcPeeringConnectionAccepterType {
		return vs[0].(map[string]VpcPeeringConnectionAccepterType)[vs[1].(string)]
	}).(VpcPeeringConnectionAccepterTypeOutput)
}

func init() {
	pulumi.RegisterOutputType(VpcPeeringConnectionAccepterTypeOutput{})
	pulumi.RegisterOutputType(VpcPeeringConnectionAccepterTypePtrOutput{})
	pulumi.RegisterOutputType(VpcPeeringConnectionAccepterTypeArrayOutput{})
	pulumi.RegisterOutputType(VpcPeeringConnectionAccepterTypeMapOutput{})
}
