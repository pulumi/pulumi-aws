// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provisions a CIDR from an IPAM address pool.
//
// > **NOTE:** Provisioning Public IPv4 or Public IPv6 require [steps outside the scope of this resource](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html#prepare-for-byoip). The resource accepts `message` and `signature` as part of the `cidrAuthorizationContext` attribute but those must be generated ahead of time. Public IPv6 CIDRs that are provisioned into a Pool with `publiclyAdvertisable = true` and all public IPv4 CIDRs also require creating a Route Origin Authorization (ROA) object in your Regional Internet Registry (RIR).
//
// > **NOTE:** In order to deprovision CIDRs all Allocations must be released. Allocations created by a VPC take up to 30 minutes to be released. However, for IPAM to properly manage the removal of allocation records created by VPCs and other resources, you must [grant it permissions](https://docs.aws.amazon.com/vpc/latest/ipam/choose-single-user-or-orgs-ipam.html) in
// either a single account or organizationally. If you are unable to deprovision a cidr after waiting over 30 minutes, you may be missing the Service Linked Role.
//
// ## Import
//
// IPAMs can be imported using the `<cidr>_<ipam-pool-id>`, e.g.
//
// ```sh
//
//	$ pulumi import aws:ec2/vpcIpamPoolCidr:VpcIpamPoolCidr example 172.2.0.0/24_ipam-pool-0e634f5a1517cccdc
//
// ```
type VpcIpamPoolCidr struct {
	pulumi.CustomResourceState

	// The CIDR you want to assign to the pool.
	Cidr pulumi.StringOutput `pulumi:"cidr"`
	// A signed document that proves that you are authorized to bring the specified IP address range to Amazon using BYOIP. This is not stored in the state file. See cidrAuthorizationContext for more information.
	CidrAuthorizationContext VpcIpamPoolCidrCidrAuthorizationContextPtrOutput `pulumi:"cidrAuthorizationContext"`
	// The ID of the pool to which you want to assign a CIDR.
	IpamPoolId pulumi.StringOutput `pulumi:"ipamPoolId"`
}

// NewVpcIpamPoolCidr registers a new resource with the given unique name, arguments, and options.
func NewVpcIpamPoolCidr(ctx *pulumi.Context,
	name string, args *VpcIpamPoolCidrArgs, opts ...pulumi.ResourceOption) (*VpcIpamPoolCidr, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpamPoolId == nil {
		return nil, errors.New("invalid value for required argument 'IpamPoolId'")
	}
	var resource VpcIpamPoolCidr
	err := ctx.RegisterResource("aws:ec2/vpcIpamPoolCidr:VpcIpamPoolCidr", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcIpamPoolCidr gets an existing VpcIpamPoolCidr resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcIpamPoolCidr(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcIpamPoolCidrState, opts ...pulumi.ResourceOption) (*VpcIpamPoolCidr, error) {
	var resource VpcIpamPoolCidr
	err := ctx.ReadResource("aws:ec2/vpcIpamPoolCidr:VpcIpamPoolCidr", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcIpamPoolCidr resources.
type vpcIpamPoolCidrState struct {
	// The CIDR you want to assign to the pool.
	Cidr *string `pulumi:"cidr"`
	// A signed document that proves that you are authorized to bring the specified IP address range to Amazon using BYOIP. This is not stored in the state file. See cidrAuthorizationContext for more information.
	CidrAuthorizationContext *VpcIpamPoolCidrCidrAuthorizationContext `pulumi:"cidrAuthorizationContext"`
	// The ID of the pool to which you want to assign a CIDR.
	IpamPoolId *string `pulumi:"ipamPoolId"`
}

type VpcIpamPoolCidrState struct {
	// The CIDR you want to assign to the pool.
	Cidr pulumi.StringPtrInput
	// A signed document that proves that you are authorized to bring the specified IP address range to Amazon using BYOIP. This is not stored in the state file. See cidrAuthorizationContext for more information.
	CidrAuthorizationContext VpcIpamPoolCidrCidrAuthorizationContextPtrInput
	// The ID of the pool to which you want to assign a CIDR.
	IpamPoolId pulumi.StringPtrInput
}

func (VpcIpamPoolCidrState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcIpamPoolCidrState)(nil)).Elem()
}

type vpcIpamPoolCidrArgs struct {
	// The CIDR you want to assign to the pool.
	Cidr *string `pulumi:"cidr"`
	// A signed document that proves that you are authorized to bring the specified IP address range to Amazon using BYOIP. This is not stored in the state file. See cidrAuthorizationContext for more information.
	CidrAuthorizationContext *VpcIpamPoolCidrCidrAuthorizationContext `pulumi:"cidrAuthorizationContext"`
	// The ID of the pool to which you want to assign a CIDR.
	IpamPoolId string `pulumi:"ipamPoolId"`
}

// The set of arguments for constructing a VpcIpamPoolCidr resource.
type VpcIpamPoolCidrArgs struct {
	// The CIDR you want to assign to the pool.
	Cidr pulumi.StringPtrInput
	// A signed document that proves that you are authorized to bring the specified IP address range to Amazon using BYOIP. This is not stored in the state file. See cidrAuthorizationContext for more information.
	CidrAuthorizationContext VpcIpamPoolCidrCidrAuthorizationContextPtrInput
	// The ID of the pool to which you want to assign a CIDR.
	IpamPoolId pulumi.StringInput
}

func (VpcIpamPoolCidrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcIpamPoolCidrArgs)(nil)).Elem()
}

type VpcIpamPoolCidrInput interface {
	pulumi.Input

	ToVpcIpamPoolCidrOutput() VpcIpamPoolCidrOutput
	ToVpcIpamPoolCidrOutputWithContext(ctx context.Context) VpcIpamPoolCidrOutput
}

func (*VpcIpamPoolCidr) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcIpamPoolCidr)(nil)).Elem()
}

func (i *VpcIpamPoolCidr) ToVpcIpamPoolCidrOutput() VpcIpamPoolCidrOutput {
	return i.ToVpcIpamPoolCidrOutputWithContext(context.Background())
}

func (i *VpcIpamPoolCidr) ToVpcIpamPoolCidrOutputWithContext(ctx context.Context) VpcIpamPoolCidrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcIpamPoolCidrOutput)
}

// VpcIpamPoolCidrArrayInput is an input type that accepts VpcIpamPoolCidrArray and VpcIpamPoolCidrArrayOutput values.
// You can construct a concrete instance of `VpcIpamPoolCidrArrayInput` via:
//
//	VpcIpamPoolCidrArray{ VpcIpamPoolCidrArgs{...} }
type VpcIpamPoolCidrArrayInput interface {
	pulumi.Input

	ToVpcIpamPoolCidrArrayOutput() VpcIpamPoolCidrArrayOutput
	ToVpcIpamPoolCidrArrayOutputWithContext(context.Context) VpcIpamPoolCidrArrayOutput
}

type VpcIpamPoolCidrArray []VpcIpamPoolCidrInput

func (VpcIpamPoolCidrArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcIpamPoolCidr)(nil)).Elem()
}

func (i VpcIpamPoolCidrArray) ToVpcIpamPoolCidrArrayOutput() VpcIpamPoolCidrArrayOutput {
	return i.ToVpcIpamPoolCidrArrayOutputWithContext(context.Background())
}

func (i VpcIpamPoolCidrArray) ToVpcIpamPoolCidrArrayOutputWithContext(ctx context.Context) VpcIpamPoolCidrArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcIpamPoolCidrArrayOutput)
}

// VpcIpamPoolCidrMapInput is an input type that accepts VpcIpamPoolCidrMap and VpcIpamPoolCidrMapOutput values.
// You can construct a concrete instance of `VpcIpamPoolCidrMapInput` via:
//
//	VpcIpamPoolCidrMap{ "key": VpcIpamPoolCidrArgs{...} }
type VpcIpamPoolCidrMapInput interface {
	pulumi.Input

	ToVpcIpamPoolCidrMapOutput() VpcIpamPoolCidrMapOutput
	ToVpcIpamPoolCidrMapOutputWithContext(context.Context) VpcIpamPoolCidrMapOutput
}

type VpcIpamPoolCidrMap map[string]VpcIpamPoolCidrInput

func (VpcIpamPoolCidrMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcIpamPoolCidr)(nil)).Elem()
}

func (i VpcIpamPoolCidrMap) ToVpcIpamPoolCidrMapOutput() VpcIpamPoolCidrMapOutput {
	return i.ToVpcIpamPoolCidrMapOutputWithContext(context.Background())
}

func (i VpcIpamPoolCidrMap) ToVpcIpamPoolCidrMapOutputWithContext(ctx context.Context) VpcIpamPoolCidrMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcIpamPoolCidrMapOutput)
}

type VpcIpamPoolCidrOutput struct{ *pulumi.OutputState }

func (VpcIpamPoolCidrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcIpamPoolCidr)(nil)).Elem()
}

func (o VpcIpamPoolCidrOutput) ToVpcIpamPoolCidrOutput() VpcIpamPoolCidrOutput {
	return o
}

func (o VpcIpamPoolCidrOutput) ToVpcIpamPoolCidrOutputWithContext(ctx context.Context) VpcIpamPoolCidrOutput {
	return o
}

// The CIDR you want to assign to the pool.
func (o VpcIpamPoolCidrOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcIpamPoolCidr) pulumi.StringOutput { return v.Cidr }).(pulumi.StringOutput)
}

// A signed document that proves that you are authorized to bring the specified IP address range to Amazon using BYOIP. This is not stored in the state file. See cidrAuthorizationContext for more information.
func (o VpcIpamPoolCidrOutput) CidrAuthorizationContext() VpcIpamPoolCidrCidrAuthorizationContextPtrOutput {
	return o.ApplyT(func(v *VpcIpamPoolCidr) VpcIpamPoolCidrCidrAuthorizationContextPtrOutput {
		return v.CidrAuthorizationContext
	}).(VpcIpamPoolCidrCidrAuthorizationContextPtrOutput)
}

// The ID of the pool to which you want to assign a CIDR.
func (o VpcIpamPoolCidrOutput) IpamPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcIpamPoolCidr) pulumi.StringOutput { return v.IpamPoolId }).(pulumi.StringOutput)
}

type VpcIpamPoolCidrArrayOutput struct{ *pulumi.OutputState }

func (VpcIpamPoolCidrArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcIpamPoolCidr)(nil)).Elem()
}

func (o VpcIpamPoolCidrArrayOutput) ToVpcIpamPoolCidrArrayOutput() VpcIpamPoolCidrArrayOutput {
	return o
}

func (o VpcIpamPoolCidrArrayOutput) ToVpcIpamPoolCidrArrayOutputWithContext(ctx context.Context) VpcIpamPoolCidrArrayOutput {
	return o
}

func (o VpcIpamPoolCidrArrayOutput) Index(i pulumi.IntInput) VpcIpamPoolCidrOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpcIpamPoolCidr {
		return vs[0].([]*VpcIpamPoolCidr)[vs[1].(int)]
	}).(VpcIpamPoolCidrOutput)
}

type VpcIpamPoolCidrMapOutput struct{ *pulumi.OutputState }

func (VpcIpamPoolCidrMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcIpamPoolCidr)(nil)).Elem()
}

func (o VpcIpamPoolCidrMapOutput) ToVpcIpamPoolCidrMapOutput() VpcIpamPoolCidrMapOutput {
	return o
}

func (o VpcIpamPoolCidrMapOutput) ToVpcIpamPoolCidrMapOutputWithContext(ctx context.Context) VpcIpamPoolCidrMapOutput {
	return o
}

func (o VpcIpamPoolCidrMapOutput) MapIndex(k pulumi.StringInput) VpcIpamPoolCidrOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpcIpamPoolCidr {
		return vs[0].(map[string]*VpcIpamPoolCidr)[vs[1].(string)]
	}).(VpcIpamPoolCidrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcIpamPoolCidrInput)(nil)).Elem(), &VpcIpamPoolCidr{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcIpamPoolCidrArrayInput)(nil)).Elem(), VpcIpamPoolCidrArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcIpamPoolCidrMapInput)(nil)).Elem(), VpcIpamPoolCidrMap{})
	pulumi.RegisterOutputType(VpcIpamPoolCidrOutput{})
	pulumi.RegisterOutputType(VpcIpamPoolCidrArrayOutput{})
	pulumi.RegisterOutputType(VpcIpamPoolCidrMapOutput{})
}
