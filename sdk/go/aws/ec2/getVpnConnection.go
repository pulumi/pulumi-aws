// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Fetches details of a Site-to-Site VPN connection. A Site-to-Site VPN connection is an Internet Protocol security (IPsec) VPN connection between a VPC and an on-premises network.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/ec2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := ec2.LookupVpnConnection(ctx, &ec2.LookupVpnConnectionArgs{
//				Filters: []ec2.GetVpnConnectionFilter{
//					{
//						Name: "customer-gateway-id",
//						Values: []string{
//							"cgw-1234567890",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("vpnConnectionId", example.VpnConnectionId)
//			return nil
//		})
//	}
//
// ```
//
// ### Find by VPN Connection ID
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/ec2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := ec2.LookupVpnConnection(ctx, &ec2.LookupVpnConnectionArgs{
//				VpnConnectionId: pulumi.StringRef("vpn-abcd1234567890"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("gatewayAssociationState", example.GatewayAssociationState)
//			return nil
//		})
//	}
//
// ```
func LookupVpnConnection(ctx *pulumi.Context, args *LookupVpnConnectionArgs, opts ...pulumi.InvokeOption) (*LookupVpnConnectionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVpnConnectionResult
	err := ctx.Invoke("aws:ec2/getVpnConnection:getVpnConnection", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVpnConnection.
type LookupVpnConnectionArgs struct {
	// Configuration block(s) for filtering. Detailed below.
	Filters []GetVpnConnectionFilter `pulumi:"filters"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// Identifier of the EC2 VPN Connection.
	VpnConnectionId *string `pulumi:"vpnConnectionId"`
}

// A collection of values returned by getVpnConnection.
type LookupVpnConnectionResult struct {
	// Category of the VPN connection. A value of VPN indicates an AWS VPN connection. A value of VPN-Classic indicates an AWS Classic VPN connection.
	Category string `pulumi:"category"`
	// ARN of the core network.
	CoreNetworkArn string `pulumi:"coreNetworkArn"`
	// ARN of the core network attachment.
	CoreNetworkAttachmentArn string `pulumi:"coreNetworkAttachmentArn"`
	// Configuration information for the VPN connection's customer gateway (in the native XML format).
	CustomerGatewayConfiguration string `pulumi:"customerGatewayConfiguration"`
	// ID of the customer gateway at your end of the VPN connection.
	CustomerGatewayId string                   `pulumi:"customerGatewayId"`
	Filters           []GetVpnConnectionFilter `pulumi:"filters"`
	// Current state of the gateway association.
	GatewayAssociationState string `pulumi:"gatewayAssociationState"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// (ARN) of the Secrets Manager secret storing the pre-shared key(s) for the VPN connection.
	PreSharedKeyArn string `pulumi:"preSharedKeyArn"`
	Region          string `pulumi:"region"`
	// List of static routes associated with the VPN connection.
	Routes []GetVpnConnectionRouteType `pulumi:"routes"`
	// Current state of the VPN connection.
	State string `pulumi:"state"`
	// Tags associated to the VPN Connection.
	Tags map[string]string `pulumi:"tags"`
	// ID of a transit gateway associated with the VPN connection.
	TransitGatewayId string `pulumi:"transitGatewayId"`
	// Type of VPN connection. Currently the only supported type is ipsec.1.
	Type string `pulumi:"type"`
	// List of objects containing information about the VPN tunnel.
	VgwTelemetries  []GetVpnConnectionVgwTelemetry `pulumi:"vgwTelemetries"`
	VpnConnectionId string                         `pulumi:"vpnConnectionId"`
	// ID of a virtual private gateway associated with the VPN connection.
	VpnGatewayId string `pulumi:"vpnGatewayId"`
}

func LookupVpnConnectionOutput(ctx *pulumi.Context, args LookupVpnConnectionOutputArgs, opts ...pulumi.InvokeOption) LookupVpnConnectionResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupVpnConnectionResultOutput, error) {
			args := v.(LookupVpnConnectionArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws:ec2/getVpnConnection:getVpnConnection", args, LookupVpnConnectionResultOutput{}, options).(LookupVpnConnectionResultOutput), nil
		}).(LookupVpnConnectionResultOutput)
}

// A collection of arguments for invoking getVpnConnection.
type LookupVpnConnectionOutputArgs struct {
	// Configuration block(s) for filtering. Detailed below.
	Filters GetVpnConnectionFilterArrayInput `pulumi:"filters"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Identifier of the EC2 VPN Connection.
	VpnConnectionId pulumi.StringPtrInput `pulumi:"vpnConnectionId"`
}

func (LookupVpnConnectionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVpnConnectionArgs)(nil)).Elem()
}

// A collection of values returned by getVpnConnection.
type LookupVpnConnectionResultOutput struct{ *pulumi.OutputState }

func (LookupVpnConnectionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVpnConnectionResult)(nil)).Elem()
}

func (o LookupVpnConnectionResultOutput) ToLookupVpnConnectionResultOutput() LookupVpnConnectionResultOutput {
	return o
}

func (o LookupVpnConnectionResultOutput) ToLookupVpnConnectionResultOutputWithContext(ctx context.Context) LookupVpnConnectionResultOutput {
	return o
}

// Category of the VPN connection. A value of VPN indicates an AWS VPN connection. A value of VPN-Classic indicates an AWS Classic VPN connection.
func (o LookupVpnConnectionResultOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpnConnectionResult) string { return v.Category }).(pulumi.StringOutput)
}

// ARN of the core network.
func (o LookupVpnConnectionResultOutput) CoreNetworkArn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpnConnectionResult) string { return v.CoreNetworkArn }).(pulumi.StringOutput)
}

// ARN of the core network attachment.
func (o LookupVpnConnectionResultOutput) CoreNetworkAttachmentArn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpnConnectionResult) string { return v.CoreNetworkAttachmentArn }).(pulumi.StringOutput)
}

// Configuration information for the VPN connection's customer gateway (in the native XML format).
func (o LookupVpnConnectionResultOutput) CustomerGatewayConfiguration() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpnConnectionResult) string { return v.CustomerGatewayConfiguration }).(pulumi.StringOutput)
}

// ID of the customer gateway at your end of the VPN connection.
func (o LookupVpnConnectionResultOutput) CustomerGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpnConnectionResult) string { return v.CustomerGatewayId }).(pulumi.StringOutput)
}

func (o LookupVpnConnectionResultOutput) Filters() GetVpnConnectionFilterArrayOutput {
	return o.ApplyT(func(v LookupVpnConnectionResult) []GetVpnConnectionFilter { return v.Filters }).(GetVpnConnectionFilterArrayOutput)
}

// Current state of the gateway association.
func (o LookupVpnConnectionResultOutput) GatewayAssociationState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpnConnectionResult) string { return v.GatewayAssociationState }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupVpnConnectionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpnConnectionResult) string { return v.Id }).(pulumi.StringOutput)
}

// (ARN) of the Secrets Manager secret storing the pre-shared key(s) for the VPN connection.
func (o LookupVpnConnectionResultOutput) PreSharedKeyArn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpnConnectionResult) string { return v.PreSharedKeyArn }).(pulumi.StringOutput)
}

func (o LookupVpnConnectionResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpnConnectionResult) string { return v.Region }).(pulumi.StringOutput)
}

// List of static routes associated with the VPN connection.
func (o LookupVpnConnectionResultOutput) Routes() GetVpnConnectionRouteTypeArrayOutput {
	return o.ApplyT(func(v LookupVpnConnectionResult) []GetVpnConnectionRouteType { return v.Routes }).(GetVpnConnectionRouteTypeArrayOutput)
}

// Current state of the VPN connection.
func (o LookupVpnConnectionResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpnConnectionResult) string { return v.State }).(pulumi.StringOutput)
}

// Tags associated to the VPN Connection.
func (o LookupVpnConnectionResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupVpnConnectionResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// ID of a transit gateway associated with the VPN connection.
func (o LookupVpnConnectionResultOutput) TransitGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpnConnectionResult) string { return v.TransitGatewayId }).(pulumi.StringOutput)
}

// Type of VPN connection. Currently the only supported type is ipsec.1.
func (o LookupVpnConnectionResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpnConnectionResult) string { return v.Type }).(pulumi.StringOutput)
}

// List of objects containing information about the VPN tunnel.
func (o LookupVpnConnectionResultOutput) VgwTelemetries() GetVpnConnectionVgwTelemetryArrayOutput {
	return o.ApplyT(func(v LookupVpnConnectionResult) []GetVpnConnectionVgwTelemetry { return v.VgwTelemetries }).(GetVpnConnectionVgwTelemetryArrayOutput)
}

func (o LookupVpnConnectionResultOutput) VpnConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpnConnectionResult) string { return v.VpnConnectionId }).(pulumi.StringOutput)
}

// ID of a virtual private gateway associated with the VPN connection.
func (o LookupVpnConnectionResultOutput) VpnGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpnConnectionResult) string { return v.VpnGatewayId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVpnConnectionResultOutput{})
}
