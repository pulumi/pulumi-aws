// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Virtual Private Gateway attachment resource, allowing for an existing
// hardware VPN gateway to be attached and/or detached from a VPC.
// 
// -> **Note:** The `aws_vpn_gateway`
// resource can also automatically attach the Virtual Private Gateway it creates
// to an existing VPC by setting the `vpc_id` attribute accordingly.
type VpnGatewayAttachment struct {
	s *pulumi.ResourceState
}

// NewVpnGatewayAttachment registers a new resource with the given unique name, arguments, and options.
func NewVpnGatewayAttachment(ctx *pulumi.Context,
	name string, args *VpnGatewayAttachmentArgs, opts ...pulumi.ResourceOpt) (*VpnGatewayAttachment, error) {
	if args == nil || args.VpcId == nil {
		return nil, errors.New("missing required argument 'VpcId'")
	}
	if args == nil || args.VpnGatewayId == nil {
		return nil, errors.New("missing required argument 'VpnGatewayId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["vpcId"] = nil
		inputs["vpnGatewayId"] = nil
	} else {
		inputs["vpcId"] = args.VpcId
		inputs["vpnGatewayId"] = args.VpnGatewayId
	}
	s, err := ctx.RegisterResource("aws:ec2/vpnGatewayAttachment:VpnGatewayAttachment", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VpnGatewayAttachment{s: s}, nil
}

// GetVpnGatewayAttachment gets an existing VpnGatewayAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnGatewayAttachment(ctx *pulumi.Context,
	name string, id pulumi.ID, state *VpnGatewayAttachmentState, opts ...pulumi.ResourceOpt) (*VpnGatewayAttachment, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["vpcId"] = state.VpcId
		inputs["vpnGatewayId"] = state.VpnGatewayId
	}
	s, err := ctx.ReadResource("aws:ec2/vpnGatewayAttachment:VpnGatewayAttachment", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VpnGatewayAttachment{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *VpnGatewayAttachment) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *VpnGatewayAttachment) ID() *pulumi.IDOutput {
	return r.s.ID
}

// The ID of the VPC.
func (r *VpnGatewayAttachment) VpcId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["vpcId"])
}

// The ID of the Virtual Private Gateway.
func (r *VpnGatewayAttachment) VpnGatewayId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["vpnGatewayId"])
}

// Input properties used for looking up and filtering VpnGatewayAttachment resources.
type VpnGatewayAttachmentState struct {
	// The ID of the VPC.
	VpcId interface{}
	// The ID of the Virtual Private Gateway.
	VpnGatewayId interface{}
}

// The set of arguments for constructing a VpnGatewayAttachment resource.
type VpnGatewayAttachmentArgs struct {
	// The ID of the VPC.
	VpcId interface{}
	// The ID of the Virtual Private Gateway.
	VpnGatewayId interface{}
}
