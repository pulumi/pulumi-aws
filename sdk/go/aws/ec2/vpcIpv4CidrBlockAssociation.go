// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a resource to associate additional IPv4 CIDR blocks with a VPC.
//
// When a VPC is created, a primary IPv4 CIDR block for the VPC must be specified.
// The `ec2.VpcIpv4CidrBlockAssociation` resource allows further IPv4 CIDR blocks to be added to the VPC.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v3/go/aws/ec2"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		main, err := ec2.NewVpc(ctx, "main", &ec2.VpcArgs{
// 			CidrBlock: pulumi.String("10.0.0.0/16"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = ec2.NewVpcIpv4CidrBlockAssociation(ctx, "secondaryCidr", &ec2.VpcIpv4CidrBlockAssociationArgs{
// 			VpcId:     main.ID(),
// 			CidrBlock: pulumi.String("172.2.0.0/16"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// `aws_vpc_ipv4_cidr_block_association` can be imported by using the VPC CIDR Association ID, e.g.
//
// ```sh
//  $ pulumi import aws:ec2/vpcIpv4CidrBlockAssociation:VpcIpv4CidrBlockAssociation example vpc-cidr-assoc-xxxxxxxx
// ```
type VpcIpv4CidrBlockAssociation struct {
	pulumi.CustomResourceState

	// The additional IPv4 CIDR block to associate with the VPC.
	CidrBlock pulumi.StringOutput `pulumi:"cidrBlock"`
	// The ID of the VPC to make the association with.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewVpcIpv4CidrBlockAssociation registers a new resource with the given unique name, arguments, and options.
func NewVpcIpv4CidrBlockAssociation(ctx *pulumi.Context,
	name string, args *VpcIpv4CidrBlockAssociationArgs, opts ...pulumi.ResourceOption) (*VpcIpv4CidrBlockAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'CidrBlock'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	var resource VpcIpv4CidrBlockAssociation
	err := ctx.RegisterResource("aws:ec2/vpcIpv4CidrBlockAssociation:VpcIpv4CidrBlockAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcIpv4CidrBlockAssociation gets an existing VpcIpv4CidrBlockAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcIpv4CidrBlockAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcIpv4CidrBlockAssociationState, opts ...pulumi.ResourceOption) (*VpcIpv4CidrBlockAssociation, error) {
	var resource VpcIpv4CidrBlockAssociation
	err := ctx.ReadResource("aws:ec2/vpcIpv4CidrBlockAssociation:VpcIpv4CidrBlockAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcIpv4CidrBlockAssociation resources.
type vpcIpv4CidrBlockAssociationState struct {
	// The additional IPv4 CIDR block to associate with the VPC.
	CidrBlock *string `pulumi:"cidrBlock"`
	// The ID of the VPC to make the association with.
	VpcId *string `pulumi:"vpcId"`
}

type VpcIpv4CidrBlockAssociationState struct {
	// The additional IPv4 CIDR block to associate with the VPC.
	CidrBlock pulumi.StringPtrInput
	// The ID of the VPC to make the association with.
	VpcId pulumi.StringPtrInput
}

func (VpcIpv4CidrBlockAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcIpv4CidrBlockAssociationState)(nil)).Elem()
}

type vpcIpv4CidrBlockAssociationArgs struct {
	// The additional IPv4 CIDR block to associate with the VPC.
	CidrBlock string `pulumi:"cidrBlock"`
	// The ID of the VPC to make the association with.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a VpcIpv4CidrBlockAssociation resource.
type VpcIpv4CidrBlockAssociationArgs struct {
	// The additional IPv4 CIDR block to associate with the VPC.
	CidrBlock pulumi.StringInput
	// The ID of the VPC to make the association with.
	VpcId pulumi.StringInput
}

func (VpcIpv4CidrBlockAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcIpv4CidrBlockAssociationArgs)(nil)).Elem()
}

type VpcIpv4CidrBlockAssociationInput interface {
	pulumi.Input

	ToVpcIpv4CidrBlockAssociationOutput() VpcIpv4CidrBlockAssociationOutput
	ToVpcIpv4CidrBlockAssociationOutputWithContext(ctx context.Context) VpcIpv4CidrBlockAssociationOutput
}

func (VpcIpv4CidrBlockAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcIpv4CidrBlockAssociation)(nil)).Elem()
}

func (i VpcIpv4CidrBlockAssociation) ToVpcIpv4CidrBlockAssociationOutput() VpcIpv4CidrBlockAssociationOutput {
	return i.ToVpcIpv4CidrBlockAssociationOutputWithContext(context.Background())
}

func (i VpcIpv4CidrBlockAssociation) ToVpcIpv4CidrBlockAssociationOutputWithContext(ctx context.Context) VpcIpv4CidrBlockAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcIpv4CidrBlockAssociationOutput)
}

type VpcIpv4CidrBlockAssociationOutput struct {
	*pulumi.OutputState
}

func (VpcIpv4CidrBlockAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcIpv4CidrBlockAssociationOutput)(nil)).Elem()
}

func (o VpcIpv4CidrBlockAssociationOutput) ToVpcIpv4CidrBlockAssociationOutput() VpcIpv4CidrBlockAssociationOutput {
	return o
}

func (o VpcIpv4CidrBlockAssociationOutput) ToVpcIpv4CidrBlockAssociationOutputWithContext(ctx context.Context) VpcIpv4CidrBlockAssociationOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(VpcIpv4CidrBlockAssociationOutput{})
}
