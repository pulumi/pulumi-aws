// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource to associate additional IPv4 CIDR blocks with a VPC.
// 
// When a VPC is created, a primary IPv4 CIDR block for the VPC must be specified.
// The `aws_vpc_ipv4_cidr_block_association` resource allows further IPv4 CIDR blocks to be added to the VPC.
type VpcIpv4CidrBlockAssociation struct {
	s *pulumi.ResourceState
}

// NewVpcIpv4CidrBlockAssociation registers a new resource with the given unique name, arguments, and options.
func NewVpcIpv4CidrBlockAssociation(ctx *pulumi.Context,
	name string, args *VpcIpv4CidrBlockAssociationArgs, opts ...pulumi.ResourceOpt) (*VpcIpv4CidrBlockAssociation, error) {
	if args == nil || args.CidrBlock == nil {
		return nil, errors.New("missing required argument 'CidrBlock'")
	}
	if args == nil || args.VpcId == nil {
		return nil, errors.New("missing required argument 'VpcId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["cidrBlock"] = nil
		inputs["vpcId"] = nil
	} else {
		inputs["cidrBlock"] = args.CidrBlock
		inputs["vpcId"] = args.VpcId
	}
	s, err := ctx.RegisterResource("aws:ec2/vpcIpv4CidrBlockAssociation:VpcIpv4CidrBlockAssociation", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VpcIpv4CidrBlockAssociation{s: s}, nil
}

// GetVpcIpv4CidrBlockAssociation gets an existing VpcIpv4CidrBlockAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcIpv4CidrBlockAssociation(ctx *pulumi.Context,
	name string, id pulumi.ID, state *VpcIpv4CidrBlockAssociationState, opts ...pulumi.ResourceOpt) (*VpcIpv4CidrBlockAssociation, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["cidrBlock"] = state.CidrBlock
		inputs["vpcId"] = state.VpcId
	}
	s, err := ctx.ReadResource("aws:ec2/vpcIpv4CidrBlockAssociation:VpcIpv4CidrBlockAssociation", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VpcIpv4CidrBlockAssociation{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *VpcIpv4CidrBlockAssociation) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *VpcIpv4CidrBlockAssociation) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The additional IPv4 CIDR block to associate with the VPC.
func (r *VpcIpv4CidrBlockAssociation) CidrBlock() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["cidrBlock"])
}

// The ID of the VPC to make the association with.
func (r *VpcIpv4CidrBlockAssociation) VpcId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["vpcId"])
}

// Input properties used for looking up and filtering VpcIpv4CidrBlockAssociation resources.
type VpcIpv4CidrBlockAssociationState struct {
	// The additional IPv4 CIDR block to associate with the VPC.
	CidrBlock interface{}
	// The ID of the VPC to make the association with.
	VpcId interface{}
}

// The set of arguments for constructing a VpcIpv4CidrBlockAssociation resource.
type VpcIpv4CidrBlockAssociationArgs struct {
	// The additional IPv4 CIDR block to associate with the VPC.
	CidrBlock interface{}
	// The ID of the VPC to make the association with.
	VpcId interface{}
}
