// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// The following shows outputting all network interface ids in a region.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleNetworkInterfaces, err := ec2.GetNetworkInterfaces(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("example", exampleNetworkInterfaces.Ids)
//			return nil
//		})
//	}
//
// ```
//
// The following example retrieves a list of all network interface ids with a custom tag of `Name` set to a value of `test`.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := ec2.GetNetworkInterfaces(ctx, &ec2.GetNetworkInterfacesArgs{
//				Tags: map[string]interface{}{
//					"Name": "test",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("example1", example.Ids)
//			return nil
//		})
//	}
//
// ```
//
// The following example retrieves a network interface ids which associated
// with specific subnet.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// exampleNetworkInterfaces, err := ec2.GetNetworkInterfaces(ctx, &ec2.GetNetworkInterfacesArgs{
// Filters: []ec2.GetNetworkInterfacesFilter{
// {
// Name: "subnet-id",
// Values: interface{}{
// aws_subnet.Test.Id,
// },
// },
// },
// }, nil);
// if err != nil {
// return err
// }
// ctx.Export("example", exampleNetworkInterfaces.Ids)
// return nil
// })
// }
// ```
func GetNetworkInterfaces(ctx *pulumi.Context, args *GetNetworkInterfacesArgs, opts ...pulumi.InvokeOption) (*GetNetworkInterfacesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetNetworkInterfacesResult
	err := ctx.Invoke("aws:ec2/getNetworkInterfaces:getNetworkInterfaces", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNetworkInterfaces.
type GetNetworkInterfacesArgs struct {
	// Custom filter block as described below.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	Filters []GetNetworkInterfacesFilter `pulumi:"filters"`
	// Map of tags, each pair of which must exactly match
	// a pair on the desired network interfaces.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getNetworkInterfaces.
type GetNetworkInterfacesResult struct {
	Filters []GetNetworkInterfacesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// List of all the network interface ids found.
	Ids  []string          `pulumi:"ids"`
	Tags map[string]string `pulumi:"tags"`
}

func GetNetworkInterfacesOutput(ctx *pulumi.Context, args GetNetworkInterfacesOutputArgs, opts ...pulumi.InvokeOption) GetNetworkInterfacesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetNetworkInterfacesResult, error) {
			args := v.(GetNetworkInterfacesArgs)
			r, err := GetNetworkInterfaces(ctx, &args, opts...)
			var s GetNetworkInterfacesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetNetworkInterfacesResultOutput)
}

// A collection of arguments for invoking getNetworkInterfaces.
type GetNetworkInterfacesOutputArgs struct {
	// Custom filter block as described below.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	Filters GetNetworkInterfacesFilterArrayInput `pulumi:"filters"`
	// Map of tags, each pair of which must exactly match
	// a pair on the desired network interfaces.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetNetworkInterfacesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkInterfacesArgs)(nil)).Elem()
}

// A collection of values returned by getNetworkInterfaces.
type GetNetworkInterfacesResultOutput struct{ *pulumi.OutputState }

func (GetNetworkInterfacesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkInterfacesResult)(nil)).Elem()
}

func (o GetNetworkInterfacesResultOutput) ToGetNetworkInterfacesResultOutput() GetNetworkInterfacesResultOutput {
	return o
}

func (o GetNetworkInterfacesResultOutput) ToGetNetworkInterfacesResultOutputWithContext(ctx context.Context) GetNetworkInterfacesResultOutput {
	return o
}

func (o GetNetworkInterfacesResultOutput) Filters() GetNetworkInterfacesFilterArrayOutput {
	return o.ApplyT(func(v GetNetworkInterfacesResult) []GetNetworkInterfacesFilter { return v.Filters }).(GetNetworkInterfacesFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetNetworkInterfacesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkInterfacesResult) string { return v.Id }).(pulumi.StringOutput)
}

// List of all the network interface ids found.
func (o GetNetworkInterfacesResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNetworkInterfacesResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o GetNetworkInterfacesResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetNetworkInterfacesResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(GetNetworkInterfacesResultOutput{})
}
