// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Assigns a static reverse DNS record to an Elastic IP addresses. See [Using reverse DNS for email applications](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html#Using_Elastic_Addressing_Reverse_DNS).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/route53"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := ec2.NewEip(ctx, "example", &ec2.EipArgs{
//				Domain: pulumi.String("vpc"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleRecord, err := route53.NewRecord(ctx, "example", &route53.RecordArgs{
//				ZoneId: pulumi.Any(main.ZoneId),
//				Name:   pulumi.String("reverse"),
//				Type:   pulumi.String(route53.RecordTypeA),
//				Records: pulumi.StringArray{
//					example.PublicIp,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ec2.NewEipDomainName(ctx, "example", &ec2.EipDomainNameArgs{
//				AllocationId: example.AllocationId,
//				DomainName:   exampleRecord.Fqdn,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type EipDomainName struct {
	pulumi.CustomResourceState

	// The allocation ID.
	AllocationId pulumi.StringOutput `pulumi:"allocationId"`
	// The domain name to modify for the IP address.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// The DNS pointer (PTR) record for the IP address.
	PtrRecord pulumi.StringOutput            `pulumi:"ptrRecord"`
	Timeouts  EipDomainNameTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewEipDomainName registers a new resource with the given unique name, arguments, and options.
func NewEipDomainName(ctx *pulumi.Context,
	name string, args *EipDomainNameArgs, opts ...pulumi.ResourceOption) (*EipDomainName, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AllocationId == nil {
		return nil, errors.New("invalid value for required argument 'AllocationId'")
	}
	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EipDomainName
	err := ctx.RegisterResource("aws:ec2/eipDomainName:EipDomainName", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEipDomainName gets an existing EipDomainName resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEipDomainName(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EipDomainNameState, opts ...pulumi.ResourceOption) (*EipDomainName, error) {
	var resource EipDomainName
	err := ctx.ReadResource("aws:ec2/eipDomainName:EipDomainName", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EipDomainName resources.
type eipDomainNameState struct {
	// The allocation ID.
	AllocationId *string `pulumi:"allocationId"`
	// The domain name to modify for the IP address.
	DomainName *string `pulumi:"domainName"`
	// The DNS pointer (PTR) record for the IP address.
	PtrRecord *string                `pulumi:"ptrRecord"`
	Timeouts  *EipDomainNameTimeouts `pulumi:"timeouts"`
}

type EipDomainNameState struct {
	// The allocation ID.
	AllocationId pulumi.StringPtrInput
	// The domain name to modify for the IP address.
	DomainName pulumi.StringPtrInput
	// The DNS pointer (PTR) record for the IP address.
	PtrRecord pulumi.StringPtrInput
	Timeouts  EipDomainNameTimeoutsPtrInput
}

func (EipDomainNameState) ElementType() reflect.Type {
	return reflect.TypeOf((*eipDomainNameState)(nil)).Elem()
}

type eipDomainNameArgs struct {
	// The allocation ID.
	AllocationId string `pulumi:"allocationId"`
	// The domain name to modify for the IP address.
	DomainName string                 `pulumi:"domainName"`
	Timeouts   *EipDomainNameTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a EipDomainName resource.
type EipDomainNameArgs struct {
	// The allocation ID.
	AllocationId pulumi.StringInput
	// The domain name to modify for the IP address.
	DomainName pulumi.StringInput
	Timeouts   EipDomainNameTimeoutsPtrInput
}

func (EipDomainNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eipDomainNameArgs)(nil)).Elem()
}

type EipDomainNameInput interface {
	pulumi.Input

	ToEipDomainNameOutput() EipDomainNameOutput
	ToEipDomainNameOutputWithContext(ctx context.Context) EipDomainNameOutput
}

func (*EipDomainName) ElementType() reflect.Type {
	return reflect.TypeOf((**EipDomainName)(nil)).Elem()
}

func (i *EipDomainName) ToEipDomainNameOutput() EipDomainNameOutput {
	return i.ToEipDomainNameOutputWithContext(context.Background())
}

func (i *EipDomainName) ToEipDomainNameOutputWithContext(ctx context.Context) EipDomainNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EipDomainNameOutput)
}

// EipDomainNameArrayInput is an input type that accepts EipDomainNameArray and EipDomainNameArrayOutput values.
// You can construct a concrete instance of `EipDomainNameArrayInput` via:
//
//	EipDomainNameArray{ EipDomainNameArgs{...} }
type EipDomainNameArrayInput interface {
	pulumi.Input

	ToEipDomainNameArrayOutput() EipDomainNameArrayOutput
	ToEipDomainNameArrayOutputWithContext(context.Context) EipDomainNameArrayOutput
}

type EipDomainNameArray []EipDomainNameInput

func (EipDomainNameArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EipDomainName)(nil)).Elem()
}

func (i EipDomainNameArray) ToEipDomainNameArrayOutput() EipDomainNameArrayOutput {
	return i.ToEipDomainNameArrayOutputWithContext(context.Background())
}

func (i EipDomainNameArray) ToEipDomainNameArrayOutputWithContext(ctx context.Context) EipDomainNameArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EipDomainNameArrayOutput)
}

// EipDomainNameMapInput is an input type that accepts EipDomainNameMap and EipDomainNameMapOutput values.
// You can construct a concrete instance of `EipDomainNameMapInput` via:
//
//	EipDomainNameMap{ "key": EipDomainNameArgs{...} }
type EipDomainNameMapInput interface {
	pulumi.Input

	ToEipDomainNameMapOutput() EipDomainNameMapOutput
	ToEipDomainNameMapOutputWithContext(context.Context) EipDomainNameMapOutput
}

type EipDomainNameMap map[string]EipDomainNameInput

func (EipDomainNameMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EipDomainName)(nil)).Elem()
}

func (i EipDomainNameMap) ToEipDomainNameMapOutput() EipDomainNameMapOutput {
	return i.ToEipDomainNameMapOutputWithContext(context.Background())
}

func (i EipDomainNameMap) ToEipDomainNameMapOutputWithContext(ctx context.Context) EipDomainNameMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EipDomainNameMapOutput)
}

type EipDomainNameOutput struct{ *pulumi.OutputState }

func (EipDomainNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EipDomainName)(nil)).Elem()
}

func (o EipDomainNameOutput) ToEipDomainNameOutput() EipDomainNameOutput {
	return o
}

func (o EipDomainNameOutput) ToEipDomainNameOutputWithContext(ctx context.Context) EipDomainNameOutput {
	return o
}

// The allocation ID.
func (o EipDomainNameOutput) AllocationId() pulumi.StringOutput {
	return o.ApplyT(func(v *EipDomainName) pulumi.StringOutput { return v.AllocationId }).(pulumi.StringOutput)
}

// The domain name to modify for the IP address.
func (o EipDomainNameOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *EipDomainName) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

// The DNS pointer (PTR) record for the IP address.
func (o EipDomainNameOutput) PtrRecord() pulumi.StringOutput {
	return o.ApplyT(func(v *EipDomainName) pulumi.StringOutput { return v.PtrRecord }).(pulumi.StringOutput)
}

func (o EipDomainNameOutput) Timeouts() EipDomainNameTimeoutsPtrOutput {
	return o.ApplyT(func(v *EipDomainName) EipDomainNameTimeoutsPtrOutput { return v.Timeouts }).(EipDomainNameTimeoutsPtrOutput)
}

type EipDomainNameArrayOutput struct{ *pulumi.OutputState }

func (EipDomainNameArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EipDomainName)(nil)).Elem()
}

func (o EipDomainNameArrayOutput) ToEipDomainNameArrayOutput() EipDomainNameArrayOutput {
	return o
}

func (o EipDomainNameArrayOutput) ToEipDomainNameArrayOutputWithContext(ctx context.Context) EipDomainNameArrayOutput {
	return o
}

func (o EipDomainNameArrayOutput) Index(i pulumi.IntInput) EipDomainNameOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EipDomainName {
		return vs[0].([]*EipDomainName)[vs[1].(int)]
	}).(EipDomainNameOutput)
}

type EipDomainNameMapOutput struct{ *pulumi.OutputState }

func (EipDomainNameMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EipDomainName)(nil)).Elem()
}

func (o EipDomainNameMapOutput) ToEipDomainNameMapOutput() EipDomainNameMapOutput {
	return o
}

func (o EipDomainNameMapOutput) ToEipDomainNameMapOutputWithContext(ctx context.Context) EipDomainNameMapOutput {
	return o
}

func (o EipDomainNameMapOutput) MapIndex(k pulumi.StringInput) EipDomainNameOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EipDomainName {
		return vs[0].(map[string]*EipDomainName)[vs[1].(string)]
	}).(EipDomainNameOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EipDomainNameInput)(nil)).Elem(), &EipDomainName{})
	pulumi.RegisterInputType(reflect.TypeOf((*EipDomainNameArrayInput)(nil)).Elem(), EipDomainNameArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EipDomainNameMapInput)(nil)).Elem(), EipDomainNameMap{})
	pulumi.RegisterOutputType(EipDomainNameOutput{})
	pulumi.RegisterOutputType(EipDomainNameArrayOutput{})
	pulumi.RegisterOutputType(EipDomainNameMapOutput{})
}
