// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DefaultNetworkAcl struct {
	pulumi.CustomResourceState

	Arn                 pulumi.StringOutput                 `pulumi:"arn"`
	DefaultNetworkAclId pulumi.StringOutput                 `pulumi:"defaultNetworkAclId"`
	Egress              DefaultNetworkAclEgressArrayOutput  `pulumi:"egress"`
	Ingress             DefaultNetworkAclIngressArrayOutput `pulumi:"ingress"`
	OwnerId             pulumi.StringOutput                 `pulumi:"ownerId"`
	SubnetIds           pulumi.StringArrayOutput            `pulumi:"subnetIds"`
	Tags                pulumi.StringMapOutput              `pulumi:"tags"`
	TagsAll             pulumi.StringMapOutput              `pulumi:"tagsAll"`
	VpcId               pulumi.StringOutput                 `pulumi:"vpcId"`
}

// NewDefaultNetworkAcl registers a new resource with the given unique name, arguments, and options.
func NewDefaultNetworkAcl(ctx *pulumi.Context,
	name string, args *DefaultNetworkAclArgs, opts ...pulumi.ResourceOption) (*DefaultNetworkAcl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultNetworkAclId == nil {
		return nil, errors.New("invalid value for required argument 'DefaultNetworkAclId'")
	}
	var resource DefaultNetworkAcl
	err := ctx.RegisterResource("aws:ec2/defaultNetworkAcl:DefaultNetworkAcl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDefaultNetworkAcl gets an existing DefaultNetworkAcl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDefaultNetworkAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DefaultNetworkAclState, opts ...pulumi.ResourceOption) (*DefaultNetworkAcl, error) {
	var resource DefaultNetworkAcl
	err := ctx.ReadResource("aws:ec2/defaultNetworkAcl:DefaultNetworkAcl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DefaultNetworkAcl resources.
type defaultNetworkAclState struct {
	Arn                 *string                    `pulumi:"arn"`
	DefaultNetworkAclId *string                    `pulumi:"defaultNetworkAclId"`
	Egress              []DefaultNetworkAclEgress  `pulumi:"egress"`
	Ingress             []DefaultNetworkAclIngress `pulumi:"ingress"`
	OwnerId             *string                    `pulumi:"ownerId"`
	SubnetIds           []string                   `pulumi:"subnetIds"`
	Tags                map[string]string          `pulumi:"tags"`
	TagsAll             map[string]string          `pulumi:"tagsAll"`
	VpcId               *string                    `pulumi:"vpcId"`
}

type DefaultNetworkAclState struct {
	Arn                 pulumi.StringPtrInput
	DefaultNetworkAclId pulumi.StringPtrInput
	Egress              DefaultNetworkAclEgressArrayInput
	Ingress             DefaultNetworkAclIngressArrayInput
	OwnerId             pulumi.StringPtrInput
	SubnetIds           pulumi.StringArrayInput
	Tags                pulumi.StringMapInput
	TagsAll             pulumi.StringMapInput
	VpcId               pulumi.StringPtrInput
}

func (DefaultNetworkAclState) ElementType() reflect.Type {
	return reflect.TypeOf((*defaultNetworkAclState)(nil)).Elem()
}

type defaultNetworkAclArgs struct {
	DefaultNetworkAclId string                     `pulumi:"defaultNetworkAclId"`
	Egress              []DefaultNetworkAclEgress  `pulumi:"egress"`
	Ingress             []DefaultNetworkAclIngress `pulumi:"ingress"`
	SubnetIds           []string                   `pulumi:"subnetIds"`
	Tags                map[string]string          `pulumi:"tags"`
}

// The set of arguments for constructing a DefaultNetworkAcl resource.
type DefaultNetworkAclArgs struct {
	DefaultNetworkAclId pulumi.StringInput
	Egress              DefaultNetworkAclEgressArrayInput
	Ingress             DefaultNetworkAclIngressArrayInput
	SubnetIds           pulumi.StringArrayInput
	Tags                pulumi.StringMapInput
}

func (DefaultNetworkAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*defaultNetworkAclArgs)(nil)).Elem()
}

type DefaultNetworkAclInput interface {
	pulumi.Input

	ToDefaultNetworkAclOutput() DefaultNetworkAclOutput
	ToDefaultNetworkAclOutputWithContext(ctx context.Context) DefaultNetworkAclOutput
}

func (*DefaultNetworkAcl) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultNetworkAcl)(nil)).Elem()
}

func (i *DefaultNetworkAcl) ToDefaultNetworkAclOutput() DefaultNetworkAclOutput {
	return i.ToDefaultNetworkAclOutputWithContext(context.Background())
}

func (i *DefaultNetworkAcl) ToDefaultNetworkAclOutputWithContext(ctx context.Context) DefaultNetworkAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultNetworkAclOutput)
}

// DefaultNetworkAclArrayInput is an input type that accepts DefaultNetworkAclArray and DefaultNetworkAclArrayOutput values.
// You can construct a concrete instance of `DefaultNetworkAclArrayInput` via:
//
//	DefaultNetworkAclArray{ DefaultNetworkAclArgs{...} }
type DefaultNetworkAclArrayInput interface {
	pulumi.Input

	ToDefaultNetworkAclArrayOutput() DefaultNetworkAclArrayOutput
	ToDefaultNetworkAclArrayOutputWithContext(context.Context) DefaultNetworkAclArrayOutput
}

type DefaultNetworkAclArray []DefaultNetworkAclInput

func (DefaultNetworkAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DefaultNetworkAcl)(nil)).Elem()
}

func (i DefaultNetworkAclArray) ToDefaultNetworkAclArrayOutput() DefaultNetworkAclArrayOutput {
	return i.ToDefaultNetworkAclArrayOutputWithContext(context.Background())
}

func (i DefaultNetworkAclArray) ToDefaultNetworkAclArrayOutputWithContext(ctx context.Context) DefaultNetworkAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultNetworkAclArrayOutput)
}

// DefaultNetworkAclMapInput is an input type that accepts DefaultNetworkAclMap and DefaultNetworkAclMapOutput values.
// You can construct a concrete instance of `DefaultNetworkAclMapInput` via:
//
//	DefaultNetworkAclMap{ "key": DefaultNetworkAclArgs{...} }
type DefaultNetworkAclMapInput interface {
	pulumi.Input

	ToDefaultNetworkAclMapOutput() DefaultNetworkAclMapOutput
	ToDefaultNetworkAclMapOutputWithContext(context.Context) DefaultNetworkAclMapOutput
}

type DefaultNetworkAclMap map[string]DefaultNetworkAclInput

func (DefaultNetworkAclMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DefaultNetworkAcl)(nil)).Elem()
}

func (i DefaultNetworkAclMap) ToDefaultNetworkAclMapOutput() DefaultNetworkAclMapOutput {
	return i.ToDefaultNetworkAclMapOutputWithContext(context.Background())
}

func (i DefaultNetworkAclMap) ToDefaultNetworkAclMapOutputWithContext(ctx context.Context) DefaultNetworkAclMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultNetworkAclMapOutput)
}

type DefaultNetworkAclOutput struct{ *pulumi.OutputState }

func (DefaultNetworkAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultNetworkAcl)(nil)).Elem()
}

func (o DefaultNetworkAclOutput) ToDefaultNetworkAclOutput() DefaultNetworkAclOutput {
	return o
}

func (o DefaultNetworkAclOutput) ToDefaultNetworkAclOutputWithContext(ctx context.Context) DefaultNetworkAclOutput {
	return o
}

func (o DefaultNetworkAclOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *DefaultNetworkAcl) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o DefaultNetworkAclOutput) DefaultNetworkAclId() pulumi.StringOutput {
	return o.ApplyT(func(v *DefaultNetworkAcl) pulumi.StringOutput { return v.DefaultNetworkAclId }).(pulumi.StringOutput)
}

func (o DefaultNetworkAclOutput) Egress() DefaultNetworkAclEgressArrayOutput {
	return o.ApplyT(func(v *DefaultNetworkAcl) DefaultNetworkAclEgressArrayOutput { return v.Egress }).(DefaultNetworkAclEgressArrayOutput)
}

func (o DefaultNetworkAclOutput) Ingress() DefaultNetworkAclIngressArrayOutput {
	return o.ApplyT(func(v *DefaultNetworkAcl) DefaultNetworkAclIngressArrayOutput { return v.Ingress }).(DefaultNetworkAclIngressArrayOutput)
}

func (o DefaultNetworkAclOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *DefaultNetworkAcl) pulumi.StringOutput { return v.OwnerId }).(pulumi.StringOutput)
}

func (o DefaultNetworkAclOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DefaultNetworkAcl) pulumi.StringArrayOutput { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

func (o DefaultNetworkAclOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DefaultNetworkAcl) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o DefaultNetworkAclOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DefaultNetworkAcl) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o DefaultNetworkAclOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *DefaultNetworkAcl) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type DefaultNetworkAclArrayOutput struct{ *pulumi.OutputState }

func (DefaultNetworkAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DefaultNetworkAcl)(nil)).Elem()
}

func (o DefaultNetworkAclArrayOutput) ToDefaultNetworkAclArrayOutput() DefaultNetworkAclArrayOutput {
	return o
}

func (o DefaultNetworkAclArrayOutput) ToDefaultNetworkAclArrayOutputWithContext(ctx context.Context) DefaultNetworkAclArrayOutput {
	return o
}

func (o DefaultNetworkAclArrayOutput) Index(i pulumi.IntInput) DefaultNetworkAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DefaultNetworkAcl {
		return vs[0].([]*DefaultNetworkAcl)[vs[1].(int)]
	}).(DefaultNetworkAclOutput)
}

type DefaultNetworkAclMapOutput struct{ *pulumi.OutputState }

func (DefaultNetworkAclMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DefaultNetworkAcl)(nil)).Elem()
}

func (o DefaultNetworkAclMapOutput) ToDefaultNetworkAclMapOutput() DefaultNetworkAclMapOutput {
	return o
}

func (o DefaultNetworkAclMapOutput) ToDefaultNetworkAclMapOutputWithContext(ctx context.Context) DefaultNetworkAclMapOutput {
	return o
}

func (o DefaultNetworkAclMapOutput) MapIndex(k pulumi.StringInput) DefaultNetworkAclOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DefaultNetworkAcl {
		return vs[0].(map[string]*DefaultNetworkAcl)[vs[1].(string)]
	}).(DefaultNetworkAclOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DefaultNetworkAclInput)(nil)).Elem(), &DefaultNetworkAcl{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefaultNetworkAclArrayInput)(nil)).Elem(), DefaultNetworkAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefaultNetworkAclMapInput)(nil)).Elem(), DefaultNetworkAclMap{})
	pulumi.RegisterOutputType(DefaultNetworkAclOutput{})
	pulumi.RegisterOutputType(DefaultNetworkAclArrayOutput{})
	pulumi.RegisterOutputType(DefaultNetworkAclMapOutput{})
}
