// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## Import
//
// Default Network ACLs can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import aws:ec2/defaultNetworkAcl:DefaultNetworkAcl sample acl-7aaabd18
// ```
type DefaultNetworkAcl struct {
	pulumi.CustomResourceState

	// ARN of the Default Network ACL
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Network ACL ID to manage. This attribute is exported from `ec2.Vpc`, or manually found via the AWS Console.
	DefaultNetworkAclId pulumi.StringOutput `pulumi:"defaultNetworkAclId"`
	// Configuration block for an egress rule. Detailed below.
	Egress DefaultNetworkAclEgressArrayOutput `pulumi:"egress"`
	// Configuration block for an ingress rule. Detailed below.
	Ingress DefaultNetworkAclIngressArrayOutput `pulumi:"ingress"`
	// ID of the AWS account that owns the Default Network ACL
	OwnerId pulumi.StringOutput `pulumi:"ownerId"`
	// List of Subnet IDs to apply the ACL to. See the notes below on managing Subnets in the Default Network ACL
	SubnetIds pulumi.StringArrayOutput `pulumi:"subnetIds"`
	// Map of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// ID of the associated VPC
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewDefaultNetworkAcl registers a new resource with the given unique name, arguments, and options.
func NewDefaultNetworkAcl(ctx *pulumi.Context,
	name string, args *DefaultNetworkAclArgs, opts ...pulumi.ResourceOption) (*DefaultNetworkAcl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultNetworkAclId == nil {
		return nil, errors.New("invalid value for required argument 'DefaultNetworkAclId'")
	}
	var resource DefaultNetworkAcl
	err := ctx.RegisterResource("aws:ec2/defaultNetworkAcl:DefaultNetworkAcl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDefaultNetworkAcl gets an existing DefaultNetworkAcl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDefaultNetworkAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DefaultNetworkAclState, opts ...pulumi.ResourceOption) (*DefaultNetworkAcl, error) {
	var resource DefaultNetworkAcl
	err := ctx.ReadResource("aws:ec2/defaultNetworkAcl:DefaultNetworkAcl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DefaultNetworkAcl resources.
type defaultNetworkAclState struct {
	// ARN of the Default Network ACL
	Arn *string `pulumi:"arn"`
	// Network ACL ID to manage. This attribute is exported from `ec2.Vpc`, or manually found via the AWS Console.
	DefaultNetworkAclId *string `pulumi:"defaultNetworkAclId"`
	// Configuration block for an egress rule. Detailed below.
	Egress []DefaultNetworkAclEgress `pulumi:"egress"`
	// Configuration block for an ingress rule. Detailed below.
	Ingress []DefaultNetworkAclIngress `pulumi:"ingress"`
	// ID of the AWS account that owns the Default Network ACL
	OwnerId *string `pulumi:"ownerId"`
	// List of Subnet IDs to apply the ACL to. See the notes below on managing Subnets in the Default Network ACL
	SubnetIds []string `pulumi:"subnetIds"`
	// Map of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// ID of the associated VPC
	VpcId *string `pulumi:"vpcId"`
}

type DefaultNetworkAclState struct {
	// ARN of the Default Network ACL
	Arn pulumi.StringPtrInput
	// Network ACL ID to manage. This attribute is exported from `ec2.Vpc`, or manually found via the AWS Console.
	DefaultNetworkAclId pulumi.StringPtrInput
	// Configuration block for an egress rule. Detailed below.
	Egress DefaultNetworkAclEgressArrayInput
	// Configuration block for an ingress rule. Detailed below.
	Ingress DefaultNetworkAclIngressArrayInput
	// ID of the AWS account that owns the Default Network ACL
	OwnerId pulumi.StringPtrInput
	// List of Subnet IDs to apply the ACL to. See the notes below on managing Subnets in the Default Network ACL
	SubnetIds pulumi.StringArrayInput
	// Map of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// ID of the associated VPC
	VpcId pulumi.StringPtrInput
}

func (DefaultNetworkAclState) ElementType() reflect.Type {
	return reflect.TypeOf((*defaultNetworkAclState)(nil)).Elem()
}

type defaultNetworkAclArgs struct {
	// Network ACL ID to manage. This attribute is exported from `ec2.Vpc`, or manually found via the AWS Console.
	DefaultNetworkAclId string `pulumi:"defaultNetworkAclId"`
	// Configuration block for an egress rule. Detailed below.
	Egress []DefaultNetworkAclEgress `pulumi:"egress"`
	// Configuration block for an ingress rule. Detailed below.
	Ingress []DefaultNetworkAclIngress `pulumi:"ingress"`
	// List of Subnet IDs to apply the ACL to. See the notes below on managing Subnets in the Default Network ACL
	SubnetIds []string `pulumi:"subnetIds"`
	// Map of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a DefaultNetworkAcl resource.
type DefaultNetworkAclArgs struct {
	// Network ACL ID to manage. This attribute is exported from `ec2.Vpc`, or manually found via the AWS Console.
	DefaultNetworkAclId pulumi.StringInput
	// Configuration block for an egress rule. Detailed below.
	Egress DefaultNetworkAclEgressArrayInput
	// Configuration block for an ingress rule. Detailed below.
	Ingress DefaultNetworkAclIngressArrayInput
	// List of Subnet IDs to apply the ACL to. See the notes below on managing Subnets in the Default Network ACL
	SubnetIds pulumi.StringArrayInput
	// Map of tags to assign to the resource.
	Tags pulumi.StringMapInput
}

func (DefaultNetworkAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*defaultNetworkAclArgs)(nil)).Elem()
}

type DefaultNetworkAclInput interface {
	pulumi.Input

	ToDefaultNetworkAclOutput() DefaultNetworkAclOutput
	ToDefaultNetworkAclOutputWithContext(ctx context.Context) DefaultNetworkAclOutput
}

func (*DefaultNetworkAcl) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultNetworkAcl)(nil))
}

func (i *DefaultNetworkAcl) ToDefaultNetworkAclOutput() DefaultNetworkAclOutput {
	return i.ToDefaultNetworkAclOutputWithContext(context.Background())
}

func (i *DefaultNetworkAcl) ToDefaultNetworkAclOutputWithContext(ctx context.Context) DefaultNetworkAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultNetworkAclOutput)
}

func (i *DefaultNetworkAcl) ToDefaultNetworkAclPtrOutput() DefaultNetworkAclPtrOutput {
	return i.ToDefaultNetworkAclPtrOutputWithContext(context.Background())
}

func (i *DefaultNetworkAcl) ToDefaultNetworkAclPtrOutputWithContext(ctx context.Context) DefaultNetworkAclPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultNetworkAclPtrOutput)
}

type DefaultNetworkAclPtrInput interface {
	pulumi.Input

	ToDefaultNetworkAclPtrOutput() DefaultNetworkAclPtrOutput
	ToDefaultNetworkAclPtrOutputWithContext(ctx context.Context) DefaultNetworkAclPtrOutput
}

type defaultNetworkAclPtrType DefaultNetworkAclArgs

func (*defaultNetworkAclPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultNetworkAcl)(nil))
}

func (i *defaultNetworkAclPtrType) ToDefaultNetworkAclPtrOutput() DefaultNetworkAclPtrOutput {
	return i.ToDefaultNetworkAclPtrOutputWithContext(context.Background())
}

func (i *defaultNetworkAclPtrType) ToDefaultNetworkAclPtrOutputWithContext(ctx context.Context) DefaultNetworkAclPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultNetworkAclPtrOutput)
}

// DefaultNetworkAclArrayInput is an input type that accepts DefaultNetworkAclArray and DefaultNetworkAclArrayOutput values.
// You can construct a concrete instance of `DefaultNetworkAclArrayInput` via:
//
//          DefaultNetworkAclArray{ DefaultNetworkAclArgs{...} }
type DefaultNetworkAclArrayInput interface {
	pulumi.Input

	ToDefaultNetworkAclArrayOutput() DefaultNetworkAclArrayOutput
	ToDefaultNetworkAclArrayOutputWithContext(context.Context) DefaultNetworkAclArrayOutput
}

type DefaultNetworkAclArray []DefaultNetworkAclInput

func (DefaultNetworkAclArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*DefaultNetworkAcl)(nil))
}

func (i DefaultNetworkAclArray) ToDefaultNetworkAclArrayOutput() DefaultNetworkAclArrayOutput {
	return i.ToDefaultNetworkAclArrayOutputWithContext(context.Background())
}

func (i DefaultNetworkAclArray) ToDefaultNetworkAclArrayOutputWithContext(ctx context.Context) DefaultNetworkAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultNetworkAclArrayOutput)
}

// DefaultNetworkAclMapInput is an input type that accepts DefaultNetworkAclMap and DefaultNetworkAclMapOutput values.
// You can construct a concrete instance of `DefaultNetworkAclMapInput` via:
//
//          DefaultNetworkAclMap{ "key": DefaultNetworkAclArgs{...} }
type DefaultNetworkAclMapInput interface {
	pulumi.Input

	ToDefaultNetworkAclMapOutput() DefaultNetworkAclMapOutput
	ToDefaultNetworkAclMapOutputWithContext(context.Context) DefaultNetworkAclMapOutput
}

type DefaultNetworkAclMap map[string]DefaultNetworkAclInput

func (DefaultNetworkAclMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*DefaultNetworkAcl)(nil))
}

func (i DefaultNetworkAclMap) ToDefaultNetworkAclMapOutput() DefaultNetworkAclMapOutput {
	return i.ToDefaultNetworkAclMapOutputWithContext(context.Background())
}

func (i DefaultNetworkAclMap) ToDefaultNetworkAclMapOutputWithContext(ctx context.Context) DefaultNetworkAclMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultNetworkAclMapOutput)
}

type DefaultNetworkAclOutput struct {
	*pulumi.OutputState
}

func (DefaultNetworkAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultNetworkAcl)(nil))
}

func (o DefaultNetworkAclOutput) ToDefaultNetworkAclOutput() DefaultNetworkAclOutput {
	return o
}

func (o DefaultNetworkAclOutput) ToDefaultNetworkAclOutputWithContext(ctx context.Context) DefaultNetworkAclOutput {
	return o
}

func (o DefaultNetworkAclOutput) ToDefaultNetworkAclPtrOutput() DefaultNetworkAclPtrOutput {
	return o.ToDefaultNetworkAclPtrOutputWithContext(context.Background())
}

func (o DefaultNetworkAclOutput) ToDefaultNetworkAclPtrOutputWithContext(ctx context.Context) DefaultNetworkAclPtrOutput {
	return o.ApplyT(func(v DefaultNetworkAcl) *DefaultNetworkAcl {
		return &v
	}).(DefaultNetworkAclPtrOutput)
}

type DefaultNetworkAclPtrOutput struct {
	*pulumi.OutputState
}

func (DefaultNetworkAclPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultNetworkAcl)(nil))
}

func (o DefaultNetworkAclPtrOutput) ToDefaultNetworkAclPtrOutput() DefaultNetworkAclPtrOutput {
	return o
}

func (o DefaultNetworkAclPtrOutput) ToDefaultNetworkAclPtrOutputWithContext(ctx context.Context) DefaultNetworkAclPtrOutput {
	return o
}

type DefaultNetworkAclArrayOutput struct{ *pulumi.OutputState }

func (DefaultNetworkAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DefaultNetworkAcl)(nil))
}

func (o DefaultNetworkAclArrayOutput) ToDefaultNetworkAclArrayOutput() DefaultNetworkAclArrayOutput {
	return o
}

func (o DefaultNetworkAclArrayOutput) ToDefaultNetworkAclArrayOutputWithContext(ctx context.Context) DefaultNetworkAclArrayOutput {
	return o
}

func (o DefaultNetworkAclArrayOutput) Index(i pulumi.IntInput) DefaultNetworkAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DefaultNetworkAcl {
		return vs[0].([]DefaultNetworkAcl)[vs[1].(int)]
	}).(DefaultNetworkAclOutput)
}

type DefaultNetworkAclMapOutput struct{ *pulumi.OutputState }

func (DefaultNetworkAclMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DefaultNetworkAcl)(nil))
}

func (o DefaultNetworkAclMapOutput) ToDefaultNetworkAclMapOutput() DefaultNetworkAclMapOutput {
	return o
}

func (o DefaultNetworkAclMapOutput) ToDefaultNetworkAclMapOutputWithContext(ctx context.Context) DefaultNetworkAclMapOutput {
	return o
}

func (o DefaultNetworkAclMapOutput) MapIndex(k pulumi.StringInput) DefaultNetworkAclOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DefaultNetworkAcl {
		return vs[0].(map[string]DefaultNetworkAcl)[vs[1].(string)]
	}).(DefaultNetworkAclOutput)
}

func init() {
	pulumi.RegisterOutputType(DefaultNetworkAclOutput{})
	pulumi.RegisterOutputType(DefaultNetworkAclPtrOutput{})
	pulumi.RegisterOutputType(DefaultNetworkAclArrayOutput{})
	pulumi.RegisterOutputType(DefaultNetworkAclMapOutput{})
}
