// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Adds launch permission to Amazon Machine Image (AMI) from another AWS account.
type AmiLaunchPermission struct {
	s *pulumi.ResourceState
}

// NewAmiLaunchPermission registers a new resource with the given unique name, arguments, and options.
func NewAmiLaunchPermission(ctx *pulumi.Context,
	name string, args *AmiLaunchPermissionArgs, opts ...pulumi.ResourceOpt) (*AmiLaunchPermission, error) {
	if args == nil || args.AccountId == nil {
		return nil, errors.New("missing required argument 'AccountId'")
	}
	if args == nil || args.ImageId == nil {
		return nil, errors.New("missing required argument 'ImageId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accountId"] = nil
		inputs["imageId"] = nil
	} else {
		inputs["accountId"] = args.AccountId
		inputs["imageId"] = args.ImageId
	}
	s, err := ctx.RegisterResource("aws:ec2/amiLaunchPermission:AmiLaunchPermission", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AmiLaunchPermission{s: s}, nil
}

// GetAmiLaunchPermission gets an existing AmiLaunchPermission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAmiLaunchPermission(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AmiLaunchPermissionState, opts ...pulumi.ResourceOpt) (*AmiLaunchPermission, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accountId"] = state.AccountId
		inputs["imageId"] = state.ImageId
	}
	s, err := ctx.ReadResource("aws:ec2/amiLaunchPermission:AmiLaunchPermission", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AmiLaunchPermission{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AmiLaunchPermission) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AmiLaunchPermission) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// An AWS Account ID to add launch permissions.
func (r *AmiLaunchPermission) AccountId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["accountId"])
}

// A region-unique name for the AMI.
func (r *AmiLaunchPermission) ImageId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["imageId"])
}

// Input properties used for looking up and filtering AmiLaunchPermission resources.
type AmiLaunchPermissionState struct {
	// An AWS Account ID to add launch permissions.
	AccountId interface{}
	// A region-unique name for the AMI.
	ImageId interface{}
}

// The set of arguments for constructing a AmiLaunchPermission resource.
type AmiLaunchPermissionArgs struct {
	// An AWS Account ID to add launch permissions.
	AccountId interface{}
	// A region-unique name for the AMI.
	ImageId interface{}
}
