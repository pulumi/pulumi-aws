// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Attach an Elastic network interface (ENI) resource with EC2 instance.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ec2"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := ec2.NewNetworkInterfaceAttachment(ctx, "test", &ec2.NetworkInterfaceAttachmentArgs{
// 			InstanceId:         pulumi.Any(aws_instance.Test.Id),
// 			NetworkInterfaceId: pulumi.Any(aws_network_interface.Test.Id),
// 			DeviceIndex:        pulumi.Int(0),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type NetworkInterfaceAttachmentType struct {
	pulumi.CustomResourceState

	// The ENI Attachment ID.
	AttachmentId pulumi.StringOutput `pulumi:"attachmentId"`
	// Network interface index (int).
	DeviceIndex pulumi.IntOutput `pulumi:"deviceIndex"`
	// Instance ID to attach.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// ENI ID to attach.
	NetworkInterfaceId pulumi.StringOutput `pulumi:"networkInterfaceId"`
	// The status of the Network Interface Attachment.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewNetworkInterfaceAttachmentType registers a new resource with the given unique name, arguments, and options.
func NewNetworkInterfaceAttachmentType(ctx *pulumi.Context,
	name string, args *NetworkInterfaceAttachmentTypeArgs, opts ...pulumi.ResourceOption) (*NetworkInterfaceAttachmentType, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeviceIndex == nil {
		return nil, errors.New("invalid value for required argument 'DeviceIndex'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.NetworkInterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkInterfaceId'")
	}
	var resource NetworkInterfaceAttachmentType
	err := ctx.RegisterResource("aws:ec2/networkInterfaceAttachment:NetworkInterfaceAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkInterfaceAttachmentType gets an existing NetworkInterfaceAttachmentType resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkInterfaceAttachmentType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkInterfaceAttachmentTypeState, opts ...pulumi.ResourceOption) (*NetworkInterfaceAttachmentType, error) {
	var resource NetworkInterfaceAttachmentType
	err := ctx.ReadResource("aws:ec2/networkInterfaceAttachment:NetworkInterfaceAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkInterfaceAttachmentType resources.
type networkInterfaceAttachmentTypeState struct {
	// The ENI Attachment ID.
	AttachmentId *string `pulumi:"attachmentId"`
	// Network interface index (int).
	DeviceIndex *int `pulumi:"deviceIndex"`
	// Instance ID to attach.
	InstanceId *string `pulumi:"instanceId"`
	// ENI ID to attach.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// The status of the Network Interface Attachment.
	Status *string `pulumi:"status"`
}

type NetworkInterfaceAttachmentTypeState struct {
	// The ENI Attachment ID.
	AttachmentId pulumi.StringPtrInput
	// Network interface index (int).
	DeviceIndex pulumi.IntPtrInput
	// Instance ID to attach.
	InstanceId pulumi.StringPtrInput
	// ENI ID to attach.
	NetworkInterfaceId pulumi.StringPtrInput
	// The status of the Network Interface Attachment.
	Status pulumi.StringPtrInput
}

func (NetworkInterfaceAttachmentTypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkInterfaceAttachmentTypeState)(nil)).Elem()
}

type networkInterfaceAttachmentTypeArgs struct {
	// Network interface index (int).
	DeviceIndex int `pulumi:"deviceIndex"`
	// Instance ID to attach.
	InstanceId string `pulumi:"instanceId"`
	// ENI ID to attach.
	NetworkInterfaceId string `pulumi:"networkInterfaceId"`
}

// The set of arguments for constructing a NetworkInterfaceAttachmentType resource.
type NetworkInterfaceAttachmentTypeArgs struct {
	// Network interface index (int).
	DeviceIndex pulumi.IntInput
	// Instance ID to attach.
	InstanceId pulumi.StringInput
	// ENI ID to attach.
	NetworkInterfaceId pulumi.StringInput
}

func (NetworkInterfaceAttachmentTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkInterfaceAttachmentTypeArgs)(nil)).Elem()
}

type NetworkInterfaceAttachmentTypeInput interface {
	pulumi.Input

	ToNetworkInterfaceAttachmentTypeOutput() NetworkInterfaceAttachmentTypeOutput
	ToNetworkInterfaceAttachmentTypeOutputWithContext(ctx context.Context) NetworkInterfaceAttachmentTypeOutput
}

func (*NetworkInterfaceAttachmentType) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterfaceAttachmentType)(nil))
}

func (i *NetworkInterfaceAttachmentType) ToNetworkInterfaceAttachmentTypeOutput() NetworkInterfaceAttachmentTypeOutput {
	return i.ToNetworkInterfaceAttachmentTypeOutputWithContext(context.Background())
}

func (i *NetworkInterfaceAttachmentType) ToNetworkInterfaceAttachmentTypeOutputWithContext(ctx context.Context) NetworkInterfaceAttachmentTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceAttachmentTypeOutput)
}

func (i *NetworkInterfaceAttachmentType) ToNetworkInterfaceAttachmentTypePtrOutput() NetworkInterfaceAttachmentTypePtrOutput {
	return i.ToNetworkInterfaceAttachmentTypePtrOutputWithContext(context.Background())
}

func (i *NetworkInterfaceAttachmentType) ToNetworkInterfaceAttachmentTypePtrOutputWithContext(ctx context.Context) NetworkInterfaceAttachmentTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceAttachmentTypePtrOutput)
}

type NetworkInterfaceAttachmentTypePtrInput interface {
	pulumi.Input

	ToNetworkInterfaceAttachmentTypePtrOutput() NetworkInterfaceAttachmentTypePtrOutput
	ToNetworkInterfaceAttachmentTypePtrOutputWithContext(ctx context.Context) NetworkInterfaceAttachmentTypePtrOutput
}

type networkInterfaceAttachmentTypePtrType NetworkInterfaceAttachmentTypeArgs

func (*networkInterfaceAttachmentTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkInterfaceAttachmentType)(nil))
}

func (i *networkInterfaceAttachmentTypePtrType) ToNetworkInterfaceAttachmentTypePtrOutput() NetworkInterfaceAttachmentTypePtrOutput {
	return i.ToNetworkInterfaceAttachmentTypePtrOutputWithContext(context.Background())
}

func (i *networkInterfaceAttachmentTypePtrType) ToNetworkInterfaceAttachmentTypePtrOutputWithContext(ctx context.Context) NetworkInterfaceAttachmentTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceAttachmentTypePtrOutput)
}

// NetworkInterfaceAttachmentTypeArrayInput is an input type that accepts NetworkInterfaceAttachmentTypeArray and NetworkInterfaceAttachmentTypeArrayOutput values.
// You can construct a concrete instance of `NetworkInterfaceAttachmentTypeArrayInput` via:
//
//          NetworkInterfaceAttachmentTypeArray{ NetworkInterfaceAttachmentTypeArgs{...} }
type NetworkInterfaceAttachmentTypeArrayInput interface {
	pulumi.Input

	ToNetworkInterfaceAttachmentTypeArrayOutput() NetworkInterfaceAttachmentTypeArrayOutput
	ToNetworkInterfaceAttachmentTypeArrayOutputWithContext(context.Context) NetworkInterfaceAttachmentTypeArrayOutput
}

type NetworkInterfaceAttachmentTypeArray []NetworkInterfaceAttachmentTypeInput

func (NetworkInterfaceAttachmentTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkInterfaceAttachmentType)(nil)).Elem()
}

func (i NetworkInterfaceAttachmentTypeArray) ToNetworkInterfaceAttachmentTypeArrayOutput() NetworkInterfaceAttachmentTypeArrayOutput {
	return i.ToNetworkInterfaceAttachmentTypeArrayOutputWithContext(context.Background())
}

func (i NetworkInterfaceAttachmentTypeArray) ToNetworkInterfaceAttachmentTypeArrayOutputWithContext(ctx context.Context) NetworkInterfaceAttachmentTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceAttachmentTypeArrayOutput)
}

// NetworkInterfaceAttachmentTypeMapInput is an input type that accepts NetworkInterfaceAttachmentTypeMap and NetworkInterfaceAttachmentTypeMapOutput values.
// You can construct a concrete instance of `NetworkInterfaceAttachmentTypeMapInput` via:
//
//          NetworkInterfaceAttachmentTypeMap{ "key": NetworkInterfaceAttachmentTypeArgs{...} }
type NetworkInterfaceAttachmentTypeMapInput interface {
	pulumi.Input

	ToNetworkInterfaceAttachmentTypeMapOutput() NetworkInterfaceAttachmentTypeMapOutput
	ToNetworkInterfaceAttachmentTypeMapOutputWithContext(context.Context) NetworkInterfaceAttachmentTypeMapOutput
}

type NetworkInterfaceAttachmentTypeMap map[string]NetworkInterfaceAttachmentTypeInput

func (NetworkInterfaceAttachmentTypeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkInterfaceAttachmentType)(nil)).Elem()
}

func (i NetworkInterfaceAttachmentTypeMap) ToNetworkInterfaceAttachmentTypeMapOutput() NetworkInterfaceAttachmentTypeMapOutput {
	return i.ToNetworkInterfaceAttachmentTypeMapOutputWithContext(context.Background())
}

func (i NetworkInterfaceAttachmentTypeMap) ToNetworkInterfaceAttachmentTypeMapOutputWithContext(ctx context.Context) NetworkInterfaceAttachmentTypeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceAttachmentTypeMapOutput)
}

type NetworkInterfaceAttachmentTypeOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceAttachmentTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterfaceAttachmentType)(nil))
}

func (o NetworkInterfaceAttachmentTypeOutput) ToNetworkInterfaceAttachmentTypeOutput() NetworkInterfaceAttachmentTypeOutput {
	return o
}

func (o NetworkInterfaceAttachmentTypeOutput) ToNetworkInterfaceAttachmentTypeOutputWithContext(ctx context.Context) NetworkInterfaceAttachmentTypeOutput {
	return o
}

func (o NetworkInterfaceAttachmentTypeOutput) ToNetworkInterfaceAttachmentTypePtrOutput() NetworkInterfaceAttachmentTypePtrOutput {
	return o.ToNetworkInterfaceAttachmentTypePtrOutputWithContext(context.Background())
}

func (o NetworkInterfaceAttachmentTypeOutput) ToNetworkInterfaceAttachmentTypePtrOutputWithContext(ctx context.Context) NetworkInterfaceAttachmentTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkInterfaceAttachmentType) *NetworkInterfaceAttachmentType {
		return &v
	}).(NetworkInterfaceAttachmentTypePtrOutput)
}

type NetworkInterfaceAttachmentTypePtrOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceAttachmentTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkInterfaceAttachmentType)(nil))
}

func (o NetworkInterfaceAttachmentTypePtrOutput) ToNetworkInterfaceAttachmentTypePtrOutput() NetworkInterfaceAttachmentTypePtrOutput {
	return o
}

func (o NetworkInterfaceAttachmentTypePtrOutput) ToNetworkInterfaceAttachmentTypePtrOutputWithContext(ctx context.Context) NetworkInterfaceAttachmentTypePtrOutput {
	return o
}

func (o NetworkInterfaceAttachmentTypePtrOutput) Elem() NetworkInterfaceAttachmentTypeOutput {
	return o.ApplyT(func(v *NetworkInterfaceAttachmentType) NetworkInterfaceAttachmentType {
		if v != nil {
			return *v
		}
		var ret NetworkInterfaceAttachmentType
		return ret
	}).(NetworkInterfaceAttachmentTypeOutput)
}

type NetworkInterfaceAttachmentTypeArrayOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceAttachmentTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkInterfaceAttachmentType)(nil))
}

func (o NetworkInterfaceAttachmentTypeArrayOutput) ToNetworkInterfaceAttachmentTypeArrayOutput() NetworkInterfaceAttachmentTypeArrayOutput {
	return o
}

func (o NetworkInterfaceAttachmentTypeArrayOutput) ToNetworkInterfaceAttachmentTypeArrayOutputWithContext(ctx context.Context) NetworkInterfaceAttachmentTypeArrayOutput {
	return o
}

func (o NetworkInterfaceAttachmentTypeArrayOutput) Index(i pulumi.IntInput) NetworkInterfaceAttachmentTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkInterfaceAttachmentType {
		return vs[0].([]NetworkInterfaceAttachmentType)[vs[1].(int)]
	}).(NetworkInterfaceAttachmentTypeOutput)
}

type NetworkInterfaceAttachmentTypeMapOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceAttachmentTypeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworkInterfaceAttachmentType)(nil))
}

func (o NetworkInterfaceAttachmentTypeMapOutput) ToNetworkInterfaceAttachmentTypeMapOutput() NetworkInterfaceAttachmentTypeMapOutput {
	return o
}

func (o NetworkInterfaceAttachmentTypeMapOutput) ToNetworkInterfaceAttachmentTypeMapOutputWithContext(ctx context.Context) NetworkInterfaceAttachmentTypeMapOutput {
	return o
}

func (o NetworkInterfaceAttachmentTypeMapOutput) MapIndex(k pulumi.StringInput) NetworkInterfaceAttachmentTypeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NetworkInterfaceAttachmentType {
		return vs[0].(map[string]NetworkInterfaceAttachmentType)[vs[1].(string)]
	}).(NetworkInterfaceAttachmentTypeOutput)
}

func init() {
	pulumi.RegisterOutputType(NetworkInterfaceAttachmentTypeOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceAttachmentTypePtrOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceAttachmentTypeArrayOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceAttachmentTypeMapOutput{})
}
