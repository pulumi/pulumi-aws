// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Attach an Elastic network interface (ENI) resource with EC2 instance.
type NetworkInterfaceAttachment struct {
	s *pulumi.ResourceState
}

// NewNetworkInterfaceAttachment registers a new resource with the given unique name, arguments, and options.
func NewNetworkInterfaceAttachment(ctx *pulumi.Context,
	name string, args *NetworkInterfaceAttachmentArgs, opts ...pulumi.ResourceOpt) (*NetworkInterfaceAttachment, error) {
	if args == nil || args.DeviceIndex == nil {
		return nil, errors.New("missing required argument 'DeviceIndex'")
	}
	if args == nil || args.InstanceId == nil {
		return nil, errors.New("missing required argument 'InstanceId'")
	}
	if args == nil || args.NetworkInterfaceId == nil {
		return nil, errors.New("missing required argument 'NetworkInterfaceId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["deviceIndex"] = nil
		inputs["instanceId"] = nil
		inputs["networkInterfaceId"] = nil
	} else {
		inputs["deviceIndex"] = args.DeviceIndex
		inputs["instanceId"] = args.InstanceId
		inputs["networkInterfaceId"] = args.NetworkInterfaceId
	}
	inputs["attachmentId"] = nil
	inputs["status"] = nil
	s, err := ctx.RegisterResource("aws:ec2/networkInterfaceAttachment:NetworkInterfaceAttachment", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NetworkInterfaceAttachment{s: s}, nil
}

// GetNetworkInterfaceAttachment gets an existing NetworkInterfaceAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkInterfaceAttachment(ctx *pulumi.Context,
	name string, id pulumi.ID, state *NetworkInterfaceAttachmentState, opts ...pulumi.ResourceOpt) (*NetworkInterfaceAttachment, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["attachmentId"] = state.AttachmentId
		inputs["deviceIndex"] = state.DeviceIndex
		inputs["instanceId"] = state.InstanceId
		inputs["networkInterfaceId"] = state.NetworkInterfaceId
		inputs["status"] = state.Status
	}
	s, err := ctx.ReadResource("aws:ec2/networkInterfaceAttachment:NetworkInterfaceAttachment", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NetworkInterfaceAttachment{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *NetworkInterfaceAttachment) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *NetworkInterfaceAttachment) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The ENI Attachment ID.
func (r *NetworkInterfaceAttachment) AttachmentId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["attachmentId"])
}

// Network interface index (int).
func (r *NetworkInterfaceAttachment) DeviceIndex() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["deviceIndex"])
}

// Instance ID to attach.
func (r *NetworkInterfaceAttachment) InstanceId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["instanceId"])
}

// ENI ID to attach.
func (r *NetworkInterfaceAttachment) NetworkInterfaceId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["networkInterfaceId"])
}

// The status of the Network Interface Attachment.
func (r *NetworkInterfaceAttachment) Status() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["status"])
}

// Input properties used for looking up and filtering NetworkInterfaceAttachment resources.
type NetworkInterfaceAttachmentState struct {
	// The ENI Attachment ID.
	AttachmentId interface{}
	// Network interface index (int).
	DeviceIndex interface{}
	// Instance ID to attach.
	InstanceId interface{}
	// ENI ID to attach.
	NetworkInterfaceId interface{}
	// The status of the Network Interface Attachment.
	Status interface{}
}

// The set of arguments for constructing a NetworkInterfaceAttachment resource.
type NetworkInterfaceAttachmentArgs struct {
	// Network interface index (int).
	DeviceIndex interface{}
	// Instance ID to attach.
	InstanceId interface{}
	// ENI ID to attach.
	NetworkInterfaceId interface{}
}
