// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Traffic mirror target.\
// Read [limits and considerations](https://docs.aws.amazon.com/vpc/latest/mirroring/traffic-mirroring-considerations.html) for traffic mirroring
//
// ## Example Usage
//
// To create a basic traffic mirror session
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ec2"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := ec2.NewTrafficMirrorTarget(ctx, "nlb", &ec2.TrafficMirrorTargetArgs{
// 			Description:            pulumi.String("NLB target"),
// 			NetworkLoadBalancerArn: pulumi.Any(aws_lb.Lb.Arn),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = ec2.NewTrafficMirrorTarget(ctx, "eni", &ec2.TrafficMirrorTargetArgs{
// 			Description:        pulumi.String("ENI target"),
// 			NetworkInterfaceId: pulumi.Any(aws_instance.Test.Primary_network_interface_id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Traffic mirror targets can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import aws:ec2/trafficMirrorTarget:TrafficMirrorTarget target tmt-0c13a005422b86606
// ```
type TrafficMirrorTarget struct {
	pulumi.CustomResourceState

	// The ARN of the traffic mirror target.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// A description of the traffic mirror session.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The network interface ID that is associated with the target.
	NetworkInterfaceId pulumi.StringPtrOutput `pulumi:"networkInterfaceId"`
	// The Amazon Resource Name (ARN) of the Network Load Balancer that is associated with the target.
	NetworkLoadBalancerArn pulumi.StringPtrOutput `pulumi:"networkLoadBalancerArn"`
	// The ID of the AWS account that owns the traffic mirror target.
	OwnerId pulumi.StringOutput    `pulumi:"ownerId"`
	Tags    pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewTrafficMirrorTarget registers a new resource with the given unique name, arguments, and options.
func NewTrafficMirrorTarget(ctx *pulumi.Context,
	name string, args *TrafficMirrorTargetArgs, opts ...pulumi.ResourceOption) (*TrafficMirrorTarget, error) {
	if args == nil {
		args = &TrafficMirrorTargetArgs{}
	}

	var resource TrafficMirrorTarget
	err := ctx.RegisterResource("aws:ec2/trafficMirrorTarget:TrafficMirrorTarget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrafficMirrorTarget gets an existing TrafficMirrorTarget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrafficMirrorTarget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrafficMirrorTargetState, opts ...pulumi.ResourceOption) (*TrafficMirrorTarget, error) {
	var resource TrafficMirrorTarget
	err := ctx.ReadResource("aws:ec2/trafficMirrorTarget:TrafficMirrorTarget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TrafficMirrorTarget resources.
type trafficMirrorTargetState struct {
	// The ARN of the traffic mirror target.
	Arn *string `pulumi:"arn"`
	// A description of the traffic mirror session.
	Description *string `pulumi:"description"`
	// The network interface ID that is associated with the target.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// The Amazon Resource Name (ARN) of the Network Load Balancer that is associated with the target.
	NetworkLoadBalancerArn *string `pulumi:"networkLoadBalancerArn"`
	// The ID of the AWS account that owns the traffic mirror target.
	OwnerId *string           `pulumi:"ownerId"`
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type TrafficMirrorTargetState struct {
	// The ARN of the traffic mirror target.
	Arn pulumi.StringPtrInput
	// A description of the traffic mirror session.
	Description pulumi.StringPtrInput
	// The network interface ID that is associated with the target.
	NetworkInterfaceId pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) of the Network Load Balancer that is associated with the target.
	NetworkLoadBalancerArn pulumi.StringPtrInput
	// The ID of the AWS account that owns the traffic mirror target.
	OwnerId pulumi.StringPtrInput
	Tags    pulumi.StringMapInput
	TagsAll pulumi.StringMapInput
}

func (TrafficMirrorTargetState) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficMirrorTargetState)(nil)).Elem()
}

type trafficMirrorTargetArgs struct {
	// A description of the traffic mirror session.
	Description *string `pulumi:"description"`
	// The network interface ID that is associated with the target.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// The Amazon Resource Name (ARN) of the Network Load Balancer that is associated with the target.
	NetworkLoadBalancerArn *string           `pulumi:"networkLoadBalancerArn"`
	Tags                   map[string]string `pulumi:"tags"`
	TagsAll                map[string]string `pulumi:"tagsAll"`
}

// The set of arguments for constructing a TrafficMirrorTarget resource.
type TrafficMirrorTargetArgs struct {
	// A description of the traffic mirror session.
	Description pulumi.StringPtrInput
	// The network interface ID that is associated with the target.
	NetworkInterfaceId pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) of the Network Load Balancer that is associated with the target.
	NetworkLoadBalancerArn pulumi.StringPtrInput
	Tags                   pulumi.StringMapInput
	TagsAll                pulumi.StringMapInput
}

func (TrafficMirrorTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficMirrorTargetArgs)(nil)).Elem()
}

type TrafficMirrorTargetInput interface {
	pulumi.Input

	ToTrafficMirrorTargetOutput() TrafficMirrorTargetOutput
	ToTrafficMirrorTargetOutputWithContext(ctx context.Context) TrafficMirrorTargetOutput
}

func (*TrafficMirrorTarget) ElementType() reflect.Type {
	return reflect.TypeOf((*TrafficMirrorTarget)(nil))
}

func (i *TrafficMirrorTarget) ToTrafficMirrorTargetOutput() TrafficMirrorTargetOutput {
	return i.ToTrafficMirrorTargetOutputWithContext(context.Background())
}

func (i *TrafficMirrorTarget) ToTrafficMirrorTargetOutputWithContext(ctx context.Context) TrafficMirrorTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficMirrorTargetOutput)
}

func (i *TrafficMirrorTarget) ToTrafficMirrorTargetPtrOutput() TrafficMirrorTargetPtrOutput {
	return i.ToTrafficMirrorTargetPtrOutputWithContext(context.Background())
}

func (i *TrafficMirrorTarget) ToTrafficMirrorTargetPtrOutputWithContext(ctx context.Context) TrafficMirrorTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficMirrorTargetPtrOutput)
}

type TrafficMirrorTargetPtrInput interface {
	pulumi.Input

	ToTrafficMirrorTargetPtrOutput() TrafficMirrorTargetPtrOutput
	ToTrafficMirrorTargetPtrOutputWithContext(ctx context.Context) TrafficMirrorTargetPtrOutput
}

type trafficMirrorTargetPtrType TrafficMirrorTargetArgs

func (*trafficMirrorTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TrafficMirrorTarget)(nil))
}

func (i *trafficMirrorTargetPtrType) ToTrafficMirrorTargetPtrOutput() TrafficMirrorTargetPtrOutput {
	return i.ToTrafficMirrorTargetPtrOutputWithContext(context.Background())
}

func (i *trafficMirrorTargetPtrType) ToTrafficMirrorTargetPtrOutputWithContext(ctx context.Context) TrafficMirrorTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficMirrorTargetPtrOutput)
}

// TrafficMirrorTargetArrayInput is an input type that accepts TrafficMirrorTargetArray and TrafficMirrorTargetArrayOutput values.
// You can construct a concrete instance of `TrafficMirrorTargetArrayInput` via:
//
//          TrafficMirrorTargetArray{ TrafficMirrorTargetArgs{...} }
type TrafficMirrorTargetArrayInput interface {
	pulumi.Input

	ToTrafficMirrorTargetArrayOutput() TrafficMirrorTargetArrayOutput
	ToTrafficMirrorTargetArrayOutputWithContext(context.Context) TrafficMirrorTargetArrayOutput
}

type TrafficMirrorTargetArray []TrafficMirrorTargetInput

func (TrafficMirrorTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TrafficMirrorTarget)(nil)).Elem()
}

func (i TrafficMirrorTargetArray) ToTrafficMirrorTargetArrayOutput() TrafficMirrorTargetArrayOutput {
	return i.ToTrafficMirrorTargetArrayOutputWithContext(context.Background())
}

func (i TrafficMirrorTargetArray) ToTrafficMirrorTargetArrayOutputWithContext(ctx context.Context) TrafficMirrorTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficMirrorTargetArrayOutput)
}

// TrafficMirrorTargetMapInput is an input type that accepts TrafficMirrorTargetMap and TrafficMirrorTargetMapOutput values.
// You can construct a concrete instance of `TrafficMirrorTargetMapInput` via:
//
//          TrafficMirrorTargetMap{ "key": TrafficMirrorTargetArgs{...} }
type TrafficMirrorTargetMapInput interface {
	pulumi.Input

	ToTrafficMirrorTargetMapOutput() TrafficMirrorTargetMapOutput
	ToTrafficMirrorTargetMapOutputWithContext(context.Context) TrafficMirrorTargetMapOutput
}

type TrafficMirrorTargetMap map[string]TrafficMirrorTargetInput

func (TrafficMirrorTargetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TrafficMirrorTarget)(nil)).Elem()
}

func (i TrafficMirrorTargetMap) ToTrafficMirrorTargetMapOutput() TrafficMirrorTargetMapOutput {
	return i.ToTrafficMirrorTargetMapOutputWithContext(context.Background())
}

func (i TrafficMirrorTargetMap) ToTrafficMirrorTargetMapOutputWithContext(ctx context.Context) TrafficMirrorTargetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficMirrorTargetMapOutput)
}

type TrafficMirrorTargetOutput struct{ *pulumi.OutputState }

func (TrafficMirrorTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrafficMirrorTarget)(nil))
}

func (o TrafficMirrorTargetOutput) ToTrafficMirrorTargetOutput() TrafficMirrorTargetOutput {
	return o
}

func (o TrafficMirrorTargetOutput) ToTrafficMirrorTargetOutputWithContext(ctx context.Context) TrafficMirrorTargetOutput {
	return o
}

func (o TrafficMirrorTargetOutput) ToTrafficMirrorTargetPtrOutput() TrafficMirrorTargetPtrOutput {
	return o.ToTrafficMirrorTargetPtrOutputWithContext(context.Background())
}

func (o TrafficMirrorTargetOutput) ToTrafficMirrorTargetPtrOutputWithContext(ctx context.Context) TrafficMirrorTargetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TrafficMirrorTarget) *TrafficMirrorTarget {
		return &v
	}).(TrafficMirrorTargetPtrOutput)
}

type TrafficMirrorTargetPtrOutput struct{ *pulumi.OutputState }

func (TrafficMirrorTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrafficMirrorTarget)(nil))
}

func (o TrafficMirrorTargetPtrOutput) ToTrafficMirrorTargetPtrOutput() TrafficMirrorTargetPtrOutput {
	return o
}

func (o TrafficMirrorTargetPtrOutput) ToTrafficMirrorTargetPtrOutputWithContext(ctx context.Context) TrafficMirrorTargetPtrOutput {
	return o
}

func (o TrafficMirrorTargetPtrOutput) Elem() TrafficMirrorTargetOutput {
	return o.ApplyT(func(v *TrafficMirrorTarget) TrafficMirrorTarget {
		if v != nil {
			return *v
		}
		var ret TrafficMirrorTarget
		return ret
	}).(TrafficMirrorTargetOutput)
}

type TrafficMirrorTargetArrayOutput struct{ *pulumi.OutputState }

func (TrafficMirrorTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrafficMirrorTarget)(nil))
}

func (o TrafficMirrorTargetArrayOutput) ToTrafficMirrorTargetArrayOutput() TrafficMirrorTargetArrayOutput {
	return o
}

func (o TrafficMirrorTargetArrayOutput) ToTrafficMirrorTargetArrayOutputWithContext(ctx context.Context) TrafficMirrorTargetArrayOutput {
	return o
}

func (o TrafficMirrorTargetArrayOutput) Index(i pulumi.IntInput) TrafficMirrorTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrafficMirrorTarget {
		return vs[0].([]TrafficMirrorTarget)[vs[1].(int)]
	}).(TrafficMirrorTargetOutput)
}

type TrafficMirrorTargetMapOutput struct{ *pulumi.OutputState }

func (TrafficMirrorTargetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]TrafficMirrorTarget)(nil))
}

func (o TrafficMirrorTargetMapOutput) ToTrafficMirrorTargetMapOutput() TrafficMirrorTargetMapOutput {
	return o
}

func (o TrafficMirrorTargetMapOutput) ToTrafficMirrorTargetMapOutputWithContext(ctx context.Context) TrafficMirrorTargetMapOutput {
	return o
}

func (o TrafficMirrorTargetMapOutput) MapIndex(k pulumi.StringInput) TrafficMirrorTargetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) TrafficMirrorTarget {
		return vs[0].(map[string]TrafficMirrorTarget)[vs[1].(string)]
	}).(TrafficMirrorTargetOutput)
}

func init() {
	pulumi.RegisterOutputType(TrafficMirrorTargetOutput{})
	pulumi.RegisterOutputType(TrafficMirrorTargetPtrOutput{})
	pulumi.RegisterOutputType(TrafficMirrorTargetArrayOutput{})
	pulumi.RegisterOutputType(TrafficMirrorTargetMapOutput{})
}
