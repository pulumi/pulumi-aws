// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VpcPeeringConnection struct {
	pulumi.CustomResourceState

	AcceptStatus pulumi.StringOutput                    `pulumi:"acceptStatus"`
	Accepter     VpcPeeringConnectionAccepterTypeOutput `pulumi:"accepter"`
	AutoAccept   pulumi.BoolPtrOutput                   `pulumi:"autoAccept"`
	PeerOwnerId  pulumi.StringOutput                    `pulumi:"peerOwnerId"`
	PeerRegion   pulumi.StringOutput                    `pulumi:"peerRegion"`
	PeerVpcId    pulumi.StringOutput                    `pulumi:"peerVpcId"`
	Requester    VpcPeeringConnectionRequesterOutput    `pulumi:"requester"`
	Tags         pulumi.StringMapOutput                 `pulumi:"tags"`
	TagsAll      pulumi.StringMapOutput                 `pulumi:"tagsAll"`
	VpcId        pulumi.StringOutput                    `pulumi:"vpcId"`
}

// NewVpcPeeringConnection registers a new resource with the given unique name, arguments, and options.
func NewVpcPeeringConnection(ctx *pulumi.Context,
	name string, args *VpcPeeringConnectionArgs, opts ...pulumi.ResourceOption) (*VpcPeeringConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PeerVpcId == nil {
		return nil, errors.New("invalid value for required argument 'PeerVpcId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	var resource VpcPeeringConnection
	err := ctx.RegisterResource("aws:ec2/vpcPeeringConnection:VpcPeeringConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcPeeringConnection gets an existing VpcPeeringConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcPeeringConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcPeeringConnectionState, opts ...pulumi.ResourceOption) (*VpcPeeringConnection, error) {
	var resource VpcPeeringConnection
	err := ctx.ReadResource("aws:ec2/vpcPeeringConnection:VpcPeeringConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcPeeringConnection resources.
type vpcPeeringConnectionState struct {
	AcceptStatus *string                           `pulumi:"acceptStatus"`
	Accepter     *VpcPeeringConnectionAccepterType `pulumi:"accepter"`
	AutoAccept   *bool                             `pulumi:"autoAccept"`
	PeerOwnerId  *string                           `pulumi:"peerOwnerId"`
	PeerRegion   *string                           `pulumi:"peerRegion"`
	PeerVpcId    *string                           `pulumi:"peerVpcId"`
	Requester    *VpcPeeringConnectionRequester    `pulumi:"requester"`
	Tags         map[string]string                 `pulumi:"tags"`
	TagsAll      map[string]string                 `pulumi:"tagsAll"`
	VpcId        *string                           `pulumi:"vpcId"`
}

type VpcPeeringConnectionState struct {
	AcceptStatus pulumi.StringPtrInput
	Accepter     VpcPeeringConnectionAccepterTypePtrInput
	AutoAccept   pulumi.BoolPtrInput
	PeerOwnerId  pulumi.StringPtrInput
	PeerRegion   pulumi.StringPtrInput
	PeerVpcId    pulumi.StringPtrInput
	Requester    VpcPeeringConnectionRequesterPtrInput
	Tags         pulumi.StringMapInput
	TagsAll      pulumi.StringMapInput
	VpcId        pulumi.StringPtrInput
}

func (VpcPeeringConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcPeeringConnectionState)(nil)).Elem()
}

type vpcPeeringConnectionArgs struct {
	Accepter    *VpcPeeringConnectionAccepterType `pulumi:"accepter"`
	AutoAccept  *bool                             `pulumi:"autoAccept"`
	PeerOwnerId *string                           `pulumi:"peerOwnerId"`
	PeerRegion  *string                           `pulumi:"peerRegion"`
	PeerVpcId   string                            `pulumi:"peerVpcId"`
	Requester   *VpcPeeringConnectionRequester    `pulumi:"requester"`
	Tags        map[string]string                 `pulumi:"tags"`
	VpcId       string                            `pulumi:"vpcId"`
}

// The set of arguments for constructing a VpcPeeringConnection resource.
type VpcPeeringConnectionArgs struct {
	Accepter    VpcPeeringConnectionAccepterTypePtrInput
	AutoAccept  pulumi.BoolPtrInput
	PeerOwnerId pulumi.StringPtrInput
	PeerRegion  pulumi.StringPtrInput
	PeerVpcId   pulumi.StringInput
	Requester   VpcPeeringConnectionRequesterPtrInput
	Tags        pulumi.StringMapInput
	VpcId       pulumi.StringInput
}

func (VpcPeeringConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcPeeringConnectionArgs)(nil)).Elem()
}

type VpcPeeringConnectionInput interface {
	pulumi.Input

	ToVpcPeeringConnectionOutput() VpcPeeringConnectionOutput
	ToVpcPeeringConnectionOutputWithContext(ctx context.Context) VpcPeeringConnectionOutput
}

func (*VpcPeeringConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcPeeringConnection)(nil)).Elem()
}

func (i *VpcPeeringConnection) ToVpcPeeringConnectionOutput() VpcPeeringConnectionOutput {
	return i.ToVpcPeeringConnectionOutputWithContext(context.Background())
}

func (i *VpcPeeringConnection) ToVpcPeeringConnectionOutputWithContext(ctx context.Context) VpcPeeringConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPeeringConnectionOutput)
}

// VpcPeeringConnectionArrayInput is an input type that accepts VpcPeeringConnectionArray and VpcPeeringConnectionArrayOutput values.
// You can construct a concrete instance of `VpcPeeringConnectionArrayInput` via:
//
//	VpcPeeringConnectionArray{ VpcPeeringConnectionArgs{...} }
type VpcPeeringConnectionArrayInput interface {
	pulumi.Input

	ToVpcPeeringConnectionArrayOutput() VpcPeeringConnectionArrayOutput
	ToVpcPeeringConnectionArrayOutputWithContext(context.Context) VpcPeeringConnectionArrayOutput
}

type VpcPeeringConnectionArray []VpcPeeringConnectionInput

func (VpcPeeringConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcPeeringConnection)(nil)).Elem()
}

func (i VpcPeeringConnectionArray) ToVpcPeeringConnectionArrayOutput() VpcPeeringConnectionArrayOutput {
	return i.ToVpcPeeringConnectionArrayOutputWithContext(context.Background())
}

func (i VpcPeeringConnectionArray) ToVpcPeeringConnectionArrayOutputWithContext(ctx context.Context) VpcPeeringConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPeeringConnectionArrayOutput)
}

// VpcPeeringConnectionMapInput is an input type that accepts VpcPeeringConnectionMap and VpcPeeringConnectionMapOutput values.
// You can construct a concrete instance of `VpcPeeringConnectionMapInput` via:
//
//	VpcPeeringConnectionMap{ "key": VpcPeeringConnectionArgs{...} }
type VpcPeeringConnectionMapInput interface {
	pulumi.Input

	ToVpcPeeringConnectionMapOutput() VpcPeeringConnectionMapOutput
	ToVpcPeeringConnectionMapOutputWithContext(context.Context) VpcPeeringConnectionMapOutput
}

type VpcPeeringConnectionMap map[string]VpcPeeringConnectionInput

func (VpcPeeringConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcPeeringConnection)(nil)).Elem()
}

func (i VpcPeeringConnectionMap) ToVpcPeeringConnectionMapOutput() VpcPeeringConnectionMapOutput {
	return i.ToVpcPeeringConnectionMapOutputWithContext(context.Background())
}

func (i VpcPeeringConnectionMap) ToVpcPeeringConnectionMapOutputWithContext(ctx context.Context) VpcPeeringConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPeeringConnectionMapOutput)
}

type VpcPeeringConnectionOutput struct{ *pulumi.OutputState }

func (VpcPeeringConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcPeeringConnection)(nil)).Elem()
}

func (o VpcPeeringConnectionOutput) ToVpcPeeringConnectionOutput() VpcPeeringConnectionOutput {
	return o
}

func (o VpcPeeringConnectionOutput) ToVpcPeeringConnectionOutputWithContext(ctx context.Context) VpcPeeringConnectionOutput {
	return o
}

func (o VpcPeeringConnectionOutput) AcceptStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcPeeringConnection) pulumi.StringOutput { return v.AcceptStatus }).(pulumi.StringOutput)
}

func (o VpcPeeringConnectionOutput) Accepter() VpcPeeringConnectionAccepterTypeOutput {
	return o.ApplyT(func(v *VpcPeeringConnection) VpcPeeringConnectionAccepterTypeOutput { return v.Accepter }).(VpcPeeringConnectionAccepterTypeOutput)
}

func (o VpcPeeringConnectionOutput) AutoAccept() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VpcPeeringConnection) pulumi.BoolPtrOutput { return v.AutoAccept }).(pulumi.BoolPtrOutput)
}

func (o VpcPeeringConnectionOutput) PeerOwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcPeeringConnection) pulumi.StringOutput { return v.PeerOwnerId }).(pulumi.StringOutput)
}

func (o VpcPeeringConnectionOutput) PeerRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcPeeringConnection) pulumi.StringOutput { return v.PeerRegion }).(pulumi.StringOutput)
}

func (o VpcPeeringConnectionOutput) PeerVpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcPeeringConnection) pulumi.StringOutput { return v.PeerVpcId }).(pulumi.StringOutput)
}

func (o VpcPeeringConnectionOutput) Requester() VpcPeeringConnectionRequesterOutput {
	return o.ApplyT(func(v *VpcPeeringConnection) VpcPeeringConnectionRequesterOutput { return v.Requester }).(VpcPeeringConnectionRequesterOutput)
}

func (o VpcPeeringConnectionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VpcPeeringConnection) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o VpcPeeringConnectionOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VpcPeeringConnection) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o VpcPeeringConnectionOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcPeeringConnection) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type VpcPeeringConnectionArrayOutput struct{ *pulumi.OutputState }

func (VpcPeeringConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcPeeringConnection)(nil)).Elem()
}

func (o VpcPeeringConnectionArrayOutput) ToVpcPeeringConnectionArrayOutput() VpcPeeringConnectionArrayOutput {
	return o
}

func (o VpcPeeringConnectionArrayOutput) ToVpcPeeringConnectionArrayOutputWithContext(ctx context.Context) VpcPeeringConnectionArrayOutput {
	return o
}

func (o VpcPeeringConnectionArrayOutput) Index(i pulumi.IntInput) VpcPeeringConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpcPeeringConnection {
		return vs[0].([]*VpcPeeringConnection)[vs[1].(int)]
	}).(VpcPeeringConnectionOutput)
}

type VpcPeeringConnectionMapOutput struct{ *pulumi.OutputState }

func (VpcPeeringConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcPeeringConnection)(nil)).Elem()
}

func (o VpcPeeringConnectionMapOutput) ToVpcPeeringConnectionMapOutput() VpcPeeringConnectionMapOutput {
	return o
}

func (o VpcPeeringConnectionMapOutput) ToVpcPeeringConnectionMapOutputWithContext(ctx context.Context) VpcPeeringConnectionMapOutput {
	return o
}

func (o VpcPeeringConnectionMapOutput) MapIndex(k pulumi.StringInput) VpcPeeringConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpcPeeringConnection {
		return vs[0].(map[string]*VpcPeeringConnection)[vs[1].(string)]
	}).(VpcPeeringConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcPeeringConnectionInput)(nil)).Elem(), &VpcPeeringConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcPeeringConnectionArrayInput)(nil)).Elem(), VpcPeeringConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcPeeringConnectionMapInput)(nil)).Elem(), VpcPeeringConnectionMap{})
	pulumi.RegisterOutputType(VpcPeeringConnectionOutput{})
	pulumi.RegisterOutputType(VpcPeeringConnectionArrayOutput{})
	pulumi.RegisterOutputType(VpcPeeringConnectionMapOutput{})
}
