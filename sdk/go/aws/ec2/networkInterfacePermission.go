// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Grant cross-account access to an Elastic network interface (ENI).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := ec2.NewNetworkInterface(ctx, "example", &ec2.NetworkInterfaceArgs{
//				SubnetId: pulumi.Any(exampleAwsSubnet.Id),
//				PrivateIps: pulumi.StringArray{
//					pulumi.String("10.0.0.50"),
//				},
//				SecurityGroups: pulumi.StringArray{
//					exampleAwsSecurityGroup.Id,
//				},
//				Attachments: ec2.NetworkInterfaceAttachmentTypeArray{
//					&ec2.NetworkInterfaceAttachmentTypeArgs{
//						Instance:    pulumi.Any(exampleAwsInstance.Id),
//						DeviceIndex: pulumi.Int(1),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ec2.NewNetworkInterfacePermission(ctx, "example", &ec2.NetworkInterfacePermissionArgs{
//				NetworkInterfaceId: example.ID(),
//				AwsAccountId:       pulumi.String("123456789012"),
//				Permission:         pulumi.String("INSTANCE-ATTACH"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Network Interface Permissions using the `network_interface_permission_id`. For example:
//
// ```sh
// $ pulumi import aws:ec2/networkInterfacePermission:NetworkInterfacePermission example eni-perm-056ad97ce2ac377ed
// ```
type NetworkInterfacePermission struct {
	pulumi.CustomResourceState

	// The Amazon Web Services account ID.
	AwsAccountId pulumi.StringOutput `pulumi:"awsAccountId"`
	// The ID of the network interface.
	NetworkInterfaceId pulumi.StringOutput `pulumi:"networkInterfaceId"`
	// ENI permission ID.
	NetworkInterfacePermissionId pulumi.StringOutput `pulumi:"networkInterfacePermissionId"`
	// The type of permission to grant. Valid values are `INSTANCE-ATTACH` or `EIP-ASSOCIATE`.
	Permission pulumi.StringOutput                         `pulumi:"permission"`
	Timeouts   NetworkInterfacePermissionTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewNetworkInterfacePermission registers a new resource with the given unique name, arguments, and options.
func NewNetworkInterfacePermission(ctx *pulumi.Context,
	name string, args *NetworkInterfacePermissionArgs, opts ...pulumi.ResourceOption) (*NetworkInterfacePermission, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AwsAccountId == nil {
		return nil, errors.New("invalid value for required argument 'AwsAccountId'")
	}
	if args.NetworkInterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkInterfaceId'")
	}
	if args.Permission == nil {
		return nil, errors.New("invalid value for required argument 'Permission'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkInterfacePermission
	err := ctx.RegisterResource("aws:ec2/networkInterfacePermission:NetworkInterfacePermission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkInterfacePermission gets an existing NetworkInterfacePermission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkInterfacePermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkInterfacePermissionState, opts ...pulumi.ResourceOption) (*NetworkInterfacePermission, error) {
	var resource NetworkInterfacePermission
	err := ctx.ReadResource("aws:ec2/networkInterfacePermission:NetworkInterfacePermission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkInterfacePermission resources.
type networkInterfacePermissionState struct {
	// The Amazon Web Services account ID.
	AwsAccountId *string `pulumi:"awsAccountId"`
	// The ID of the network interface.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// ENI permission ID.
	NetworkInterfacePermissionId *string `pulumi:"networkInterfacePermissionId"`
	// The type of permission to grant. Valid values are `INSTANCE-ATTACH` or `EIP-ASSOCIATE`.
	Permission *string                             `pulumi:"permission"`
	Timeouts   *NetworkInterfacePermissionTimeouts `pulumi:"timeouts"`
}

type NetworkInterfacePermissionState struct {
	// The Amazon Web Services account ID.
	AwsAccountId pulumi.StringPtrInput
	// The ID of the network interface.
	NetworkInterfaceId pulumi.StringPtrInput
	// ENI permission ID.
	NetworkInterfacePermissionId pulumi.StringPtrInput
	// The type of permission to grant. Valid values are `INSTANCE-ATTACH` or `EIP-ASSOCIATE`.
	Permission pulumi.StringPtrInput
	Timeouts   NetworkInterfacePermissionTimeoutsPtrInput
}

func (NetworkInterfacePermissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkInterfacePermissionState)(nil)).Elem()
}

type networkInterfacePermissionArgs struct {
	// The Amazon Web Services account ID.
	AwsAccountId string `pulumi:"awsAccountId"`
	// The ID of the network interface.
	NetworkInterfaceId string `pulumi:"networkInterfaceId"`
	// The type of permission to grant. Valid values are `INSTANCE-ATTACH` or `EIP-ASSOCIATE`.
	Permission string                              `pulumi:"permission"`
	Timeouts   *NetworkInterfacePermissionTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a NetworkInterfacePermission resource.
type NetworkInterfacePermissionArgs struct {
	// The Amazon Web Services account ID.
	AwsAccountId pulumi.StringInput
	// The ID of the network interface.
	NetworkInterfaceId pulumi.StringInput
	// The type of permission to grant. Valid values are `INSTANCE-ATTACH` or `EIP-ASSOCIATE`.
	Permission pulumi.StringInput
	Timeouts   NetworkInterfacePermissionTimeoutsPtrInput
}

func (NetworkInterfacePermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkInterfacePermissionArgs)(nil)).Elem()
}

type NetworkInterfacePermissionInput interface {
	pulumi.Input

	ToNetworkInterfacePermissionOutput() NetworkInterfacePermissionOutput
	ToNetworkInterfacePermissionOutputWithContext(ctx context.Context) NetworkInterfacePermissionOutput
}

func (*NetworkInterfacePermission) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkInterfacePermission)(nil)).Elem()
}

func (i *NetworkInterfacePermission) ToNetworkInterfacePermissionOutput() NetworkInterfacePermissionOutput {
	return i.ToNetworkInterfacePermissionOutputWithContext(context.Background())
}

func (i *NetworkInterfacePermission) ToNetworkInterfacePermissionOutputWithContext(ctx context.Context) NetworkInterfacePermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfacePermissionOutput)
}

// NetworkInterfacePermissionArrayInput is an input type that accepts NetworkInterfacePermissionArray and NetworkInterfacePermissionArrayOutput values.
// You can construct a concrete instance of `NetworkInterfacePermissionArrayInput` via:
//
//	NetworkInterfacePermissionArray{ NetworkInterfacePermissionArgs{...} }
type NetworkInterfacePermissionArrayInput interface {
	pulumi.Input

	ToNetworkInterfacePermissionArrayOutput() NetworkInterfacePermissionArrayOutput
	ToNetworkInterfacePermissionArrayOutputWithContext(context.Context) NetworkInterfacePermissionArrayOutput
}

type NetworkInterfacePermissionArray []NetworkInterfacePermissionInput

func (NetworkInterfacePermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkInterfacePermission)(nil)).Elem()
}

func (i NetworkInterfacePermissionArray) ToNetworkInterfacePermissionArrayOutput() NetworkInterfacePermissionArrayOutput {
	return i.ToNetworkInterfacePermissionArrayOutputWithContext(context.Background())
}

func (i NetworkInterfacePermissionArray) ToNetworkInterfacePermissionArrayOutputWithContext(ctx context.Context) NetworkInterfacePermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfacePermissionArrayOutput)
}

// NetworkInterfacePermissionMapInput is an input type that accepts NetworkInterfacePermissionMap and NetworkInterfacePermissionMapOutput values.
// You can construct a concrete instance of `NetworkInterfacePermissionMapInput` via:
//
//	NetworkInterfacePermissionMap{ "key": NetworkInterfacePermissionArgs{...} }
type NetworkInterfacePermissionMapInput interface {
	pulumi.Input

	ToNetworkInterfacePermissionMapOutput() NetworkInterfacePermissionMapOutput
	ToNetworkInterfacePermissionMapOutputWithContext(context.Context) NetworkInterfacePermissionMapOutput
}

type NetworkInterfacePermissionMap map[string]NetworkInterfacePermissionInput

func (NetworkInterfacePermissionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkInterfacePermission)(nil)).Elem()
}

func (i NetworkInterfacePermissionMap) ToNetworkInterfacePermissionMapOutput() NetworkInterfacePermissionMapOutput {
	return i.ToNetworkInterfacePermissionMapOutputWithContext(context.Background())
}

func (i NetworkInterfacePermissionMap) ToNetworkInterfacePermissionMapOutputWithContext(ctx context.Context) NetworkInterfacePermissionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfacePermissionMapOutput)
}

type NetworkInterfacePermissionOutput struct{ *pulumi.OutputState }

func (NetworkInterfacePermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkInterfacePermission)(nil)).Elem()
}

func (o NetworkInterfacePermissionOutput) ToNetworkInterfacePermissionOutput() NetworkInterfacePermissionOutput {
	return o
}

func (o NetworkInterfacePermissionOutput) ToNetworkInterfacePermissionOutputWithContext(ctx context.Context) NetworkInterfacePermissionOutput {
	return o
}

// The Amazon Web Services account ID.
func (o NetworkInterfacePermissionOutput) AwsAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkInterfacePermission) pulumi.StringOutput { return v.AwsAccountId }).(pulumi.StringOutput)
}

// The ID of the network interface.
func (o NetworkInterfacePermissionOutput) NetworkInterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkInterfacePermission) pulumi.StringOutput { return v.NetworkInterfaceId }).(pulumi.StringOutput)
}

// ENI permission ID.
func (o NetworkInterfacePermissionOutput) NetworkInterfacePermissionId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkInterfacePermission) pulumi.StringOutput { return v.NetworkInterfacePermissionId }).(pulumi.StringOutput)
}

// The type of permission to grant. Valid values are `INSTANCE-ATTACH` or `EIP-ASSOCIATE`.
func (o NetworkInterfacePermissionOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkInterfacePermission) pulumi.StringOutput { return v.Permission }).(pulumi.StringOutput)
}

func (o NetworkInterfacePermissionOutput) Timeouts() NetworkInterfacePermissionTimeoutsPtrOutput {
	return o.ApplyT(func(v *NetworkInterfacePermission) NetworkInterfacePermissionTimeoutsPtrOutput { return v.Timeouts }).(NetworkInterfacePermissionTimeoutsPtrOutput)
}

type NetworkInterfacePermissionArrayOutput struct{ *pulumi.OutputState }

func (NetworkInterfacePermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkInterfacePermission)(nil)).Elem()
}

func (o NetworkInterfacePermissionArrayOutput) ToNetworkInterfacePermissionArrayOutput() NetworkInterfacePermissionArrayOutput {
	return o
}

func (o NetworkInterfacePermissionArrayOutput) ToNetworkInterfacePermissionArrayOutputWithContext(ctx context.Context) NetworkInterfacePermissionArrayOutput {
	return o
}

func (o NetworkInterfacePermissionArrayOutput) Index(i pulumi.IntInput) NetworkInterfacePermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkInterfacePermission {
		return vs[0].([]*NetworkInterfacePermission)[vs[1].(int)]
	}).(NetworkInterfacePermissionOutput)
}

type NetworkInterfacePermissionMapOutput struct{ *pulumi.OutputState }

func (NetworkInterfacePermissionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkInterfacePermission)(nil)).Elem()
}

func (o NetworkInterfacePermissionMapOutput) ToNetworkInterfacePermissionMapOutput() NetworkInterfacePermissionMapOutput {
	return o
}

func (o NetworkInterfacePermissionMapOutput) ToNetworkInterfacePermissionMapOutputWithContext(ctx context.Context) NetworkInterfacePermissionMapOutput {
	return o
}

func (o NetworkInterfacePermissionMapOutput) MapIndex(k pulumi.StringInput) NetworkInterfacePermissionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkInterfacePermission {
		return vs[0].(map[string]*NetworkInterfacePermission)[vs[1].(string)]
	}).(NetworkInterfacePermissionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInterfacePermissionInput)(nil)).Elem(), &NetworkInterfacePermission{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInterfacePermissionArrayInput)(nil)).Elem(), NetworkInterfacePermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInterfacePermissionMapInput)(nil)).Elem(), NetworkInterfacePermissionMap{})
	pulumi.RegisterOutputType(NetworkInterfacePermissionOutput{})
	pulumi.RegisterOutputType(NetworkInterfacePermissionArrayOutput{})
	pulumi.RegisterOutputType(NetworkInterfacePermissionMapOutput{})
}
