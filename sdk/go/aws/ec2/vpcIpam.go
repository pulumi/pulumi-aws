// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VpcIpam struct {
	pulumi.CustomResourceState

	Arn                   pulumi.StringOutput               `pulumi:"arn"`
	Cascade               pulumi.BoolPtrOutput              `pulumi:"cascade"`
	Description           pulumi.StringPtrOutput            `pulumi:"description"`
	OperatingRegions      VpcIpamOperatingRegionArrayOutput `pulumi:"operatingRegions"`
	PrivateDefaultScopeId pulumi.StringOutput               `pulumi:"privateDefaultScopeId"`
	PublicDefaultScopeId  pulumi.StringOutput               `pulumi:"publicDefaultScopeId"`
	ScopeCount            pulumi.IntOutput                  `pulumi:"scopeCount"`
	Tags                  pulumi.StringMapOutput            `pulumi:"tags"`
	TagsAll               pulumi.StringMapOutput            `pulumi:"tagsAll"`
}

// NewVpcIpam registers a new resource with the given unique name, arguments, and options.
func NewVpcIpam(ctx *pulumi.Context,
	name string, args *VpcIpamArgs, opts ...pulumi.ResourceOption) (*VpcIpam, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OperatingRegions == nil {
		return nil, errors.New("invalid value for required argument 'OperatingRegions'")
	}
	var resource VpcIpam
	err := ctx.RegisterResource("aws:ec2/vpcIpam:VpcIpam", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcIpam gets an existing VpcIpam resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcIpam(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcIpamState, opts ...pulumi.ResourceOption) (*VpcIpam, error) {
	var resource VpcIpam
	err := ctx.ReadResource("aws:ec2/vpcIpam:VpcIpam", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcIpam resources.
type vpcIpamState struct {
	Arn                   *string                  `pulumi:"arn"`
	Cascade               *bool                    `pulumi:"cascade"`
	Description           *string                  `pulumi:"description"`
	OperatingRegions      []VpcIpamOperatingRegion `pulumi:"operatingRegions"`
	PrivateDefaultScopeId *string                  `pulumi:"privateDefaultScopeId"`
	PublicDefaultScopeId  *string                  `pulumi:"publicDefaultScopeId"`
	ScopeCount            *int                     `pulumi:"scopeCount"`
	Tags                  map[string]string        `pulumi:"tags"`
	TagsAll               map[string]string        `pulumi:"tagsAll"`
}

type VpcIpamState struct {
	Arn                   pulumi.StringPtrInput
	Cascade               pulumi.BoolPtrInput
	Description           pulumi.StringPtrInput
	OperatingRegions      VpcIpamOperatingRegionArrayInput
	PrivateDefaultScopeId pulumi.StringPtrInput
	PublicDefaultScopeId  pulumi.StringPtrInput
	ScopeCount            pulumi.IntPtrInput
	Tags                  pulumi.StringMapInput
	TagsAll               pulumi.StringMapInput
}

func (VpcIpamState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcIpamState)(nil)).Elem()
}

type vpcIpamArgs struct {
	Cascade          *bool                    `pulumi:"cascade"`
	Description      *string                  `pulumi:"description"`
	OperatingRegions []VpcIpamOperatingRegion `pulumi:"operatingRegions"`
	Tags             map[string]string        `pulumi:"tags"`
}

// The set of arguments for constructing a VpcIpam resource.
type VpcIpamArgs struct {
	Cascade          pulumi.BoolPtrInput
	Description      pulumi.StringPtrInput
	OperatingRegions VpcIpamOperatingRegionArrayInput
	Tags             pulumi.StringMapInput
}

func (VpcIpamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcIpamArgs)(nil)).Elem()
}

type VpcIpamInput interface {
	pulumi.Input

	ToVpcIpamOutput() VpcIpamOutput
	ToVpcIpamOutputWithContext(ctx context.Context) VpcIpamOutput
}

func (*VpcIpam) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcIpam)(nil)).Elem()
}

func (i *VpcIpam) ToVpcIpamOutput() VpcIpamOutput {
	return i.ToVpcIpamOutputWithContext(context.Background())
}

func (i *VpcIpam) ToVpcIpamOutputWithContext(ctx context.Context) VpcIpamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcIpamOutput)
}

// VpcIpamArrayInput is an input type that accepts VpcIpamArray and VpcIpamArrayOutput values.
// You can construct a concrete instance of `VpcIpamArrayInput` via:
//
//	VpcIpamArray{ VpcIpamArgs{...} }
type VpcIpamArrayInput interface {
	pulumi.Input

	ToVpcIpamArrayOutput() VpcIpamArrayOutput
	ToVpcIpamArrayOutputWithContext(context.Context) VpcIpamArrayOutput
}

type VpcIpamArray []VpcIpamInput

func (VpcIpamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcIpam)(nil)).Elem()
}

func (i VpcIpamArray) ToVpcIpamArrayOutput() VpcIpamArrayOutput {
	return i.ToVpcIpamArrayOutputWithContext(context.Background())
}

func (i VpcIpamArray) ToVpcIpamArrayOutputWithContext(ctx context.Context) VpcIpamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcIpamArrayOutput)
}

// VpcIpamMapInput is an input type that accepts VpcIpamMap and VpcIpamMapOutput values.
// You can construct a concrete instance of `VpcIpamMapInput` via:
//
//	VpcIpamMap{ "key": VpcIpamArgs{...} }
type VpcIpamMapInput interface {
	pulumi.Input

	ToVpcIpamMapOutput() VpcIpamMapOutput
	ToVpcIpamMapOutputWithContext(context.Context) VpcIpamMapOutput
}

type VpcIpamMap map[string]VpcIpamInput

func (VpcIpamMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcIpam)(nil)).Elem()
}

func (i VpcIpamMap) ToVpcIpamMapOutput() VpcIpamMapOutput {
	return i.ToVpcIpamMapOutputWithContext(context.Background())
}

func (i VpcIpamMap) ToVpcIpamMapOutputWithContext(ctx context.Context) VpcIpamMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcIpamMapOutput)
}

type VpcIpamOutput struct{ *pulumi.OutputState }

func (VpcIpamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcIpam)(nil)).Elem()
}

func (o VpcIpamOutput) ToVpcIpamOutput() VpcIpamOutput {
	return o
}

func (o VpcIpamOutput) ToVpcIpamOutputWithContext(ctx context.Context) VpcIpamOutput {
	return o
}

func (o VpcIpamOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcIpam) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o VpcIpamOutput) Cascade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VpcIpam) pulumi.BoolPtrOutput { return v.Cascade }).(pulumi.BoolPtrOutput)
}

func (o VpcIpamOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcIpam) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o VpcIpamOutput) OperatingRegions() VpcIpamOperatingRegionArrayOutput {
	return o.ApplyT(func(v *VpcIpam) VpcIpamOperatingRegionArrayOutput { return v.OperatingRegions }).(VpcIpamOperatingRegionArrayOutput)
}

func (o VpcIpamOutput) PrivateDefaultScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcIpam) pulumi.StringOutput { return v.PrivateDefaultScopeId }).(pulumi.StringOutput)
}

func (o VpcIpamOutput) PublicDefaultScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcIpam) pulumi.StringOutput { return v.PublicDefaultScopeId }).(pulumi.StringOutput)
}

func (o VpcIpamOutput) ScopeCount() pulumi.IntOutput {
	return o.ApplyT(func(v *VpcIpam) pulumi.IntOutput { return v.ScopeCount }).(pulumi.IntOutput)
}

func (o VpcIpamOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VpcIpam) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o VpcIpamOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VpcIpam) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type VpcIpamArrayOutput struct{ *pulumi.OutputState }

func (VpcIpamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcIpam)(nil)).Elem()
}

func (o VpcIpamArrayOutput) ToVpcIpamArrayOutput() VpcIpamArrayOutput {
	return o
}

func (o VpcIpamArrayOutput) ToVpcIpamArrayOutputWithContext(ctx context.Context) VpcIpamArrayOutput {
	return o
}

func (o VpcIpamArrayOutput) Index(i pulumi.IntInput) VpcIpamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpcIpam {
		return vs[0].([]*VpcIpam)[vs[1].(int)]
	}).(VpcIpamOutput)
}

type VpcIpamMapOutput struct{ *pulumi.OutputState }

func (VpcIpamMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcIpam)(nil)).Elem()
}

func (o VpcIpamMapOutput) ToVpcIpamMapOutput() VpcIpamMapOutput {
	return o
}

func (o VpcIpamMapOutput) ToVpcIpamMapOutputWithContext(ctx context.Context) VpcIpamMapOutput {
	return o
}

func (o VpcIpamMapOutput) MapIndex(k pulumi.StringInput) VpcIpamOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpcIpam {
		return vs[0].(map[string]*VpcIpam)[vs[1].(string)]
	}).(VpcIpamOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcIpamInput)(nil)).Elem(), &VpcIpam{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcIpamArrayInput)(nil)).Elem(), VpcIpamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcIpamMapInput)(nil)).Elem(), VpcIpamMap{})
	pulumi.RegisterOutputType(VpcIpamOutput{})
	pulumi.RegisterOutputType(VpcIpamArrayOutput{})
	pulumi.RegisterOutputType(VpcIpamMapOutput{})
}
