// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an EC2 VPN connection. These objects can be connected to customer gateways, and allow you to establish tunnels between your network and Amazon.
// 
// > **Note:** All arguments including `tunnel1_preshared_key` and `tunnel2_preshared_key` will be stored in the raw state as plain-text.
// [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
// 
// > **Note:** The CIDR blocks in the arguments `tunnel1_inside_cidr` and `tunnel2_inside_cidr` must have a prefix of /30 and be a part of a specific range.
// [Read more about this in the AWS documentation](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_VpnTunnelOptionsSpecification.html).
type VpnConnection struct {
	s *pulumi.ResourceState
}

// NewVpnConnection registers a new resource with the given unique name, arguments, and options.
func NewVpnConnection(ctx *pulumi.Context,
	name string, args *VpnConnectionArgs, opts ...pulumi.ResourceOpt) (*VpnConnection, error) {
	if args == nil || args.CustomerGatewayId == nil {
		return nil, errors.New("missing required argument 'CustomerGatewayId'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["customerGatewayId"] = nil
		inputs["staticRoutesOnly"] = nil
		inputs["tags"] = nil
		inputs["transitGatewayId"] = nil
		inputs["tunnel1InsideCidr"] = nil
		inputs["tunnel1PresharedKey"] = nil
		inputs["tunnel2InsideCidr"] = nil
		inputs["tunnel2PresharedKey"] = nil
		inputs["type"] = nil
		inputs["vpnGatewayId"] = nil
	} else {
		inputs["customerGatewayId"] = args.CustomerGatewayId
		inputs["staticRoutesOnly"] = args.StaticRoutesOnly
		inputs["tags"] = args.Tags
		inputs["transitGatewayId"] = args.TransitGatewayId
		inputs["tunnel1InsideCidr"] = args.Tunnel1InsideCidr
		inputs["tunnel1PresharedKey"] = args.Tunnel1PresharedKey
		inputs["tunnel2InsideCidr"] = args.Tunnel2InsideCidr
		inputs["tunnel2PresharedKey"] = args.Tunnel2PresharedKey
		inputs["type"] = args.Type
		inputs["vpnGatewayId"] = args.VpnGatewayId
	}
	inputs["customerGatewayConfiguration"] = nil
	inputs["routes"] = nil
	inputs["tunnel1Address"] = nil
	inputs["tunnel1BgpAsn"] = nil
	inputs["tunnel1BgpHoldtime"] = nil
	inputs["tunnel1CgwInsideAddress"] = nil
	inputs["tunnel1VgwInsideAddress"] = nil
	inputs["tunnel2Address"] = nil
	inputs["tunnel2BgpAsn"] = nil
	inputs["tunnel2BgpHoldtime"] = nil
	inputs["tunnel2CgwInsideAddress"] = nil
	inputs["tunnel2VgwInsideAddress"] = nil
	inputs["vgwTelemetries"] = nil
	s, err := ctx.RegisterResource("aws:ec2/vpnConnection:VpnConnection", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VpnConnection{s: s}, nil
}

// GetVpnConnection gets an existing VpnConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnConnection(ctx *pulumi.Context,
	name string, id pulumi.ID, state *VpnConnectionState, opts ...pulumi.ResourceOpt) (*VpnConnection, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["customerGatewayConfiguration"] = state.CustomerGatewayConfiguration
		inputs["customerGatewayId"] = state.CustomerGatewayId
		inputs["routes"] = state.Routes
		inputs["staticRoutesOnly"] = state.StaticRoutesOnly
		inputs["tags"] = state.Tags
		inputs["transitGatewayId"] = state.TransitGatewayId
		inputs["tunnel1Address"] = state.Tunnel1Address
		inputs["tunnel1BgpAsn"] = state.Tunnel1BgpAsn
		inputs["tunnel1BgpHoldtime"] = state.Tunnel1BgpHoldtime
		inputs["tunnel1CgwInsideAddress"] = state.Tunnel1CgwInsideAddress
		inputs["tunnel1InsideCidr"] = state.Tunnel1InsideCidr
		inputs["tunnel1PresharedKey"] = state.Tunnel1PresharedKey
		inputs["tunnel1VgwInsideAddress"] = state.Tunnel1VgwInsideAddress
		inputs["tunnel2Address"] = state.Tunnel2Address
		inputs["tunnel2BgpAsn"] = state.Tunnel2BgpAsn
		inputs["tunnel2BgpHoldtime"] = state.Tunnel2BgpHoldtime
		inputs["tunnel2CgwInsideAddress"] = state.Tunnel2CgwInsideAddress
		inputs["tunnel2InsideCidr"] = state.Tunnel2InsideCidr
		inputs["tunnel2PresharedKey"] = state.Tunnel2PresharedKey
		inputs["tunnel2VgwInsideAddress"] = state.Tunnel2VgwInsideAddress
		inputs["type"] = state.Type
		inputs["vgwTelemetries"] = state.VgwTelemetries
		inputs["vpnGatewayId"] = state.VpnGatewayId
	}
	s, err := ctx.ReadResource("aws:ec2/vpnConnection:VpnConnection", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VpnConnection{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *VpnConnection) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *VpnConnection) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The configuration information for the VPN connection's customer gateway (in the native XML format).
func (r *VpnConnection) CustomerGatewayConfiguration() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["customerGatewayConfiguration"])
}

// The ID of the customer gateway.
func (r *VpnConnection) CustomerGatewayId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["customerGatewayId"])
}

func (r *VpnConnection) Routes() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["routes"])
}

// Whether the VPN connection uses static routes exclusively. Static routes must be used for devices that don't support BGP.
func (r *VpnConnection) StaticRoutesOnly() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["staticRoutesOnly"])
}

// Tags to apply to the connection.
func (r *VpnConnection) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// The ID of the EC2 Transit Gateway.
func (r *VpnConnection) TransitGatewayId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["transitGatewayId"])
}

// The public IP address of the first VPN tunnel.
func (r *VpnConnection) Tunnel1Address() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tunnel1Address"])
}

// The bgp asn number of the first VPN tunnel.
func (r *VpnConnection) Tunnel1BgpAsn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tunnel1BgpAsn"])
}

// The bgp holdtime of the first VPN tunnel.
func (r *VpnConnection) Tunnel1BgpHoldtime() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["tunnel1BgpHoldtime"])
}

// The RFC 6890 link-local address of the first VPN tunnel (Customer Gateway Side).
func (r *VpnConnection) Tunnel1CgwInsideAddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tunnel1CgwInsideAddress"])
}

// The CIDR block of the inside IP addresses for the first VPN tunnel.
func (r *VpnConnection) Tunnel1InsideCidr() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tunnel1InsideCidr"])
}

// The preshared key of the first VPN tunnel.
func (r *VpnConnection) Tunnel1PresharedKey() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tunnel1PresharedKey"])
}

// The RFC 6890 link-local address of the first VPN tunnel (VPN Gateway Side).
func (r *VpnConnection) Tunnel1VgwInsideAddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tunnel1VgwInsideAddress"])
}

// The public IP address of the second VPN tunnel.
func (r *VpnConnection) Tunnel2Address() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tunnel2Address"])
}

// The bgp asn number of the second VPN tunnel.
func (r *VpnConnection) Tunnel2BgpAsn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tunnel2BgpAsn"])
}

// The bgp holdtime of the second VPN tunnel.
func (r *VpnConnection) Tunnel2BgpHoldtime() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["tunnel2BgpHoldtime"])
}

// The RFC 6890 link-local address of the second VPN tunnel (Customer Gateway Side).
func (r *VpnConnection) Tunnel2CgwInsideAddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tunnel2CgwInsideAddress"])
}

// The CIDR block of the second IP addresses for the first VPN tunnel.
func (r *VpnConnection) Tunnel2InsideCidr() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tunnel2InsideCidr"])
}

// The preshared key of the second VPN tunnel.
func (r *VpnConnection) Tunnel2PresharedKey() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tunnel2PresharedKey"])
}

// The RFC 6890 link-local address of the second VPN tunnel (VPN Gateway Side).
func (r *VpnConnection) Tunnel2VgwInsideAddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tunnel2VgwInsideAddress"])
}

// The type of VPN connection. The only type AWS supports at this time is "ipsec.1".
func (r *VpnConnection) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

func (r *VpnConnection) VgwTelemetries() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["vgwTelemetries"])
}

// The ID of the Virtual Private Gateway.
func (r *VpnConnection) VpnGatewayId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["vpnGatewayId"])
}

// Input properties used for looking up and filtering VpnConnection resources.
type VpnConnectionState struct {
	// The configuration information for the VPN connection's customer gateway (in the native XML format).
	CustomerGatewayConfiguration interface{}
	// The ID of the customer gateway.
	CustomerGatewayId interface{}
	Routes interface{}
	// Whether the VPN connection uses static routes exclusively. Static routes must be used for devices that don't support BGP.
	StaticRoutesOnly interface{}
	// Tags to apply to the connection.
	Tags interface{}
	// The ID of the EC2 Transit Gateway.
	TransitGatewayId interface{}
	// The public IP address of the first VPN tunnel.
	Tunnel1Address interface{}
	// The bgp asn number of the first VPN tunnel.
	Tunnel1BgpAsn interface{}
	// The bgp holdtime of the first VPN tunnel.
	Tunnel1BgpHoldtime interface{}
	// The RFC 6890 link-local address of the first VPN tunnel (Customer Gateway Side).
	Tunnel1CgwInsideAddress interface{}
	// The CIDR block of the inside IP addresses for the first VPN tunnel.
	Tunnel1InsideCidr interface{}
	// The preshared key of the first VPN tunnel.
	Tunnel1PresharedKey interface{}
	// The RFC 6890 link-local address of the first VPN tunnel (VPN Gateway Side).
	Tunnel1VgwInsideAddress interface{}
	// The public IP address of the second VPN tunnel.
	Tunnel2Address interface{}
	// The bgp asn number of the second VPN tunnel.
	Tunnel2BgpAsn interface{}
	// The bgp holdtime of the second VPN tunnel.
	Tunnel2BgpHoldtime interface{}
	// The RFC 6890 link-local address of the second VPN tunnel (Customer Gateway Side).
	Tunnel2CgwInsideAddress interface{}
	// The CIDR block of the second IP addresses for the first VPN tunnel.
	Tunnel2InsideCidr interface{}
	// The preshared key of the second VPN tunnel.
	Tunnel2PresharedKey interface{}
	// The RFC 6890 link-local address of the second VPN tunnel (VPN Gateway Side).
	Tunnel2VgwInsideAddress interface{}
	// The type of VPN connection. The only type AWS supports at this time is "ipsec.1".
	Type interface{}
	VgwTelemetries interface{}
	// The ID of the Virtual Private Gateway.
	VpnGatewayId interface{}
}

// The set of arguments for constructing a VpnConnection resource.
type VpnConnectionArgs struct {
	// The ID of the customer gateway.
	CustomerGatewayId interface{}
	// Whether the VPN connection uses static routes exclusively. Static routes must be used for devices that don't support BGP.
	StaticRoutesOnly interface{}
	// Tags to apply to the connection.
	Tags interface{}
	// The ID of the EC2 Transit Gateway.
	TransitGatewayId interface{}
	// The CIDR block of the inside IP addresses for the first VPN tunnel.
	Tunnel1InsideCidr interface{}
	// The preshared key of the first VPN tunnel.
	Tunnel1PresharedKey interface{}
	// The CIDR block of the second IP addresses for the first VPN tunnel.
	Tunnel2InsideCidr interface{}
	// The preshared key of the second VPN tunnel.
	Tunnel2PresharedKey interface{}
	// The type of VPN connection. The only type AWS supports at this time is "ipsec.1".
	Type interface{}
	// The ID of the Virtual Private Gateway.
	VpnGatewayId interface{}
}
