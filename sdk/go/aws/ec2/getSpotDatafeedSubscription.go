// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > There is only a single spot data feed subscription per account.
//
// Data source for accessing an AWS EC2 (Elastic Compute Cloud) spot data feed subscription.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ec2.LookupSpotDatafeedSubscription(ctx, map[string]interface{}{}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSpotDatafeedSubscription(ctx *pulumi.Context, opts ...pulumi.InvokeOption) (*LookupSpotDatafeedSubscriptionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSpotDatafeedSubscriptionResult
	err := ctx.Invoke("aws:ec2/getSpotDatafeedSubscription:getSpotDatafeedSubscription", nil, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of values returned by getSpotDatafeedSubscription.
type LookupSpotDatafeedSubscriptionResult struct {
	// The name of the Amazon S3 bucket where the spot instance data feed is located.
	Bucket string `pulumi:"bucket"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The prefix for the data feed files.
	Prefix string `pulumi:"prefix"`
}

func LookupSpotDatafeedSubscriptionOutput(ctx *pulumi.Context, opts ...pulumi.InvokeOption) LookupSpotDatafeedSubscriptionResultOutput {
	return pulumi.ToOutput(0).ApplyT(func(int) (LookupSpotDatafeedSubscriptionResultOutput, error) {
		opts = internal.PkgInvokeDefaultOpts(opts)
		var rv LookupSpotDatafeedSubscriptionResult
		secret, err := ctx.InvokePackageRaw("aws:ec2/getSpotDatafeedSubscription:getSpotDatafeedSubscription", nil, &rv, "", opts...)
		if err != nil {
			return LookupSpotDatafeedSubscriptionResultOutput{}, err
		}

		output := pulumi.ToOutput(rv).(LookupSpotDatafeedSubscriptionResultOutput)
		if secret {
			return pulumi.ToSecret(output).(LookupSpotDatafeedSubscriptionResultOutput), nil
		}
		return output, nil
	}).(LookupSpotDatafeedSubscriptionResultOutput)
}

// A collection of values returned by getSpotDatafeedSubscription.
type LookupSpotDatafeedSubscriptionResultOutput struct{ *pulumi.OutputState }

func (LookupSpotDatafeedSubscriptionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSpotDatafeedSubscriptionResult)(nil)).Elem()
}

func (o LookupSpotDatafeedSubscriptionResultOutput) ToLookupSpotDatafeedSubscriptionResultOutput() LookupSpotDatafeedSubscriptionResultOutput {
	return o
}

func (o LookupSpotDatafeedSubscriptionResultOutput) ToLookupSpotDatafeedSubscriptionResultOutputWithContext(ctx context.Context) LookupSpotDatafeedSubscriptionResultOutput {
	return o
}

// The name of the Amazon S3 bucket where the spot instance data feed is located.
func (o LookupSpotDatafeedSubscriptionResultOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSpotDatafeedSubscriptionResult) string { return v.Bucket }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSpotDatafeedSubscriptionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSpotDatafeedSubscriptionResult) string { return v.Id }).(pulumi.StringOutput)
}

// The prefix for the data feed files.
func (o LookupSpotDatafeedSubscriptionResultOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSpotDatafeedSubscriptionResult) string { return v.Prefix }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSpotDatafeedSubscriptionResultOutput{})
}
