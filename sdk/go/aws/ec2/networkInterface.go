// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an Elastic network interface (ENI) resource.
type NetworkInterface struct {
	s *pulumi.ResourceState
}

// NewNetworkInterface registers a new resource with the given unique name, arguments, and options.
func NewNetworkInterface(ctx *pulumi.Context,
	name string, args *NetworkInterfaceArgs, opts ...pulumi.ResourceOpt) (*NetworkInterface, error) {
	if args == nil || args.SubnetId == nil {
		return nil, errors.New("missing required argument 'SubnetId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["attachments"] = nil
		inputs["description"] = nil
		inputs["privateIp"] = nil
		inputs["privateIps"] = nil
		inputs["privateIpsCount"] = nil
		inputs["securityGroups"] = nil
		inputs["sourceDestCheck"] = nil
		inputs["subnetId"] = nil
		inputs["tags"] = nil
	} else {
		inputs["attachments"] = args.Attachments
		inputs["description"] = args.Description
		inputs["privateIp"] = args.PrivateIp
		inputs["privateIps"] = args.PrivateIps
		inputs["privateIpsCount"] = args.PrivateIpsCount
		inputs["securityGroups"] = args.SecurityGroups
		inputs["sourceDestCheck"] = args.SourceDestCheck
		inputs["subnetId"] = args.SubnetId
		inputs["tags"] = args.Tags
	}
	inputs["privateDnsName"] = nil
	s, err := ctx.RegisterResource("aws:ec2/networkInterface:NetworkInterface", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NetworkInterface{s: s}, nil
}

// GetNetworkInterface gets an existing NetworkInterface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkInterface(ctx *pulumi.Context,
	name string, id pulumi.ID, state *NetworkInterfaceState, opts ...pulumi.ResourceOpt) (*NetworkInterface, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["attachments"] = state.Attachments
		inputs["description"] = state.Description
		inputs["privateDnsName"] = state.PrivateDnsName
		inputs["privateIp"] = state.PrivateIp
		inputs["privateIps"] = state.PrivateIps
		inputs["privateIpsCount"] = state.PrivateIpsCount
		inputs["securityGroups"] = state.SecurityGroups
		inputs["sourceDestCheck"] = state.SourceDestCheck
		inputs["subnetId"] = state.SubnetId
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("aws:ec2/networkInterface:NetworkInterface", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NetworkInterface{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *NetworkInterface) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *NetworkInterface) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Block to define the attachment of the ENI. Documented below.
func (r *NetworkInterface) Attachments() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["attachments"])
}

// A description for the network interface.
func (r *NetworkInterface) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

func (r *NetworkInterface) PrivateDnsName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["privateDnsName"])
}

func (r *NetworkInterface) PrivateIp() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["privateIp"])
}

// List of private IPs to assign to the ENI.
func (r *NetworkInterface) PrivateIps() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["privateIps"])
}

// Number of private IPs to assign to the ENI.
func (r *NetworkInterface) PrivateIpsCount() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["privateIpsCount"])
}

// List of security group IDs to assign to the ENI.
func (r *NetworkInterface) SecurityGroups() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["securityGroups"])
}

// Whether to enable source destination checking for the ENI. Default true.
func (r *NetworkInterface) SourceDestCheck() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["sourceDestCheck"])
}

// Subnet ID to create the ENI in.
func (r *NetworkInterface) SubnetId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["subnetId"])
}

// A mapping of tags to assign to the resource.
func (r *NetworkInterface) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering NetworkInterface resources.
type NetworkInterfaceState struct {
	// Block to define the attachment of the ENI. Documented below.
	Attachments interface{}
	// A description for the network interface.
	Description interface{}
	PrivateDnsName interface{}
	PrivateIp interface{}
	// List of private IPs to assign to the ENI.
	PrivateIps interface{}
	// Number of private IPs to assign to the ENI.
	PrivateIpsCount interface{}
	// List of security group IDs to assign to the ENI.
	SecurityGroups interface{}
	// Whether to enable source destination checking for the ENI. Default true.
	SourceDestCheck interface{}
	// Subnet ID to create the ENI in.
	SubnetId interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
}

// The set of arguments for constructing a NetworkInterface resource.
type NetworkInterfaceArgs struct {
	// Block to define the attachment of the ENI. Documented below.
	Attachments interface{}
	// A description for the network interface.
	Description interface{}
	PrivateIp interface{}
	// List of private IPs to assign to the ENI.
	PrivateIps interface{}
	// Number of private IPs to assign to the ENI.
	PrivateIpsCount interface{}
	// List of security group IDs to assign to the ENI.
	SecurityGroups interface{}
	// Whether to enable source destination checking for the ENI. Default true.
	SourceDestCheck interface{}
	// Subnet ID to create the ENI in.
	SubnetId interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
}
