// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkfirewall

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Firewall struct {
	pulumi.CustomResourceState

	Arn                            pulumi.StringOutput                      `pulumi:"arn"`
	DeleteProtection               pulumi.BoolPtrOutput                     `pulumi:"deleteProtection"`
	Description                    pulumi.StringPtrOutput                   `pulumi:"description"`
	EncryptionConfiguration        FirewallEncryptionConfigurationPtrOutput `pulumi:"encryptionConfiguration"`
	FirewallPolicyArn              pulumi.StringOutput                      `pulumi:"firewallPolicyArn"`
	FirewallPolicyChangeProtection pulumi.BoolPtrOutput                     `pulumi:"firewallPolicyChangeProtection"`
	FirewallStatuses               FirewallFirewallStatusArrayOutput        `pulumi:"firewallStatuses"`
	Name                           pulumi.StringOutput                      `pulumi:"name"`
	SubnetChangeProtection         pulumi.BoolPtrOutput                     `pulumi:"subnetChangeProtection"`
	SubnetMappings                 FirewallSubnetMappingArrayOutput         `pulumi:"subnetMappings"`
	Tags                           pulumi.StringMapOutput                   `pulumi:"tags"`
	TagsAll                        pulumi.StringMapOutput                   `pulumi:"tagsAll"`
	UpdateToken                    pulumi.StringOutput                      `pulumi:"updateToken"`
	VpcId                          pulumi.StringOutput                      `pulumi:"vpcId"`
}

// NewFirewall registers a new resource with the given unique name, arguments, and options.
func NewFirewall(ctx *pulumi.Context,
	name string, args *FirewallArgs, opts ...pulumi.ResourceOption) (*Firewall, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FirewallPolicyArn == nil {
		return nil, errors.New("invalid value for required argument 'FirewallPolicyArn'")
	}
	if args.SubnetMappings == nil {
		return nil, errors.New("invalid value for required argument 'SubnetMappings'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	var resource Firewall
	err := ctx.RegisterResource("aws:networkfirewall/firewall:Firewall", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewall gets an existing Firewall resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewall(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallState, opts ...pulumi.ResourceOption) (*Firewall, error) {
	var resource Firewall
	err := ctx.ReadResource("aws:networkfirewall/firewall:Firewall", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Firewall resources.
type firewallState struct {
	Arn                            *string                          `pulumi:"arn"`
	DeleteProtection               *bool                            `pulumi:"deleteProtection"`
	Description                    *string                          `pulumi:"description"`
	EncryptionConfiguration        *FirewallEncryptionConfiguration `pulumi:"encryptionConfiguration"`
	FirewallPolicyArn              *string                          `pulumi:"firewallPolicyArn"`
	FirewallPolicyChangeProtection *bool                            `pulumi:"firewallPolicyChangeProtection"`
	FirewallStatuses               []FirewallFirewallStatus         `pulumi:"firewallStatuses"`
	Name                           *string                          `pulumi:"name"`
	SubnetChangeProtection         *bool                            `pulumi:"subnetChangeProtection"`
	SubnetMappings                 []FirewallSubnetMapping          `pulumi:"subnetMappings"`
	Tags                           map[string]string                `pulumi:"tags"`
	TagsAll                        map[string]string                `pulumi:"tagsAll"`
	UpdateToken                    *string                          `pulumi:"updateToken"`
	VpcId                          *string                          `pulumi:"vpcId"`
}

type FirewallState struct {
	Arn                            pulumi.StringPtrInput
	DeleteProtection               pulumi.BoolPtrInput
	Description                    pulumi.StringPtrInput
	EncryptionConfiguration        FirewallEncryptionConfigurationPtrInput
	FirewallPolicyArn              pulumi.StringPtrInput
	FirewallPolicyChangeProtection pulumi.BoolPtrInput
	FirewallStatuses               FirewallFirewallStatusArrayInput
	Name                           pulumi.StringPtrInput
	SubnetChangeProtection         pulumi.BoolPtrInput
	SubnetMappings                 FirewallSubnetMappingArrayInput
	Tags                           pulumi.StringMapInput
	TagsAll                        pulumi.StringMapInput
	UpdateToken                    pulumi.StringPtrInput
	VpcId                          pulumi.StringPtrInput
}

func (FirewallState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallState)(nil)).Elem()
}

type firewallArgs struct {
	DeleteProtection               *bool                            `pulumi:"deleteProtection"`
	Description                    *string                          `pulumi:"description"`
	EncryptionConfiguration        *FirewallEncryptionConfiguration `pulumi:"encryptionConfiguration"`
	FirewallPolicyArn              string                           `pulumi:"firewallPolicyArn"`
	FirewallPolicyChangeProtection *bool                            `pulumi:"firewallPolicyChangeProtection"`
	Name                           *string                          `pulumi:"name"`
	SubnetChangeProtection         *bool                            `pulumi:"subnetChangeProtection"`
	SubnetMappings                 []FirewallSubnetMapping          `pulumi:"subnetMappings"`
	Tags                           map[string]string                `pulumi:"tags"`
	VpcId                          string                           `pulumi:"vpcId"`
}

// The set of arguments for constructing a Firewall resource.
type FirewallArgs struct {
	DeleteProtection               pulumi.BoolPtrInput
	Description                    pulumi.StringPtrInput
	EncryptionConfiguration        FirewallEncryptionConfigurationPtrInput
	FirewallPolicyArn              pulumi.StringInput
	FirewallPolicyChangeProtection pulumi.BoolPtrInput
	Name                           pulumi.StringPtrInput
	SubnetChangeProtection         pulumi.BoolPtrInput
	SubnetMappings                 FirewallSubnetMappingArrayInput
	Tags                           pulumi.StringMapInput
	VpcId                          pulumi.StringInput
}

func (FirewallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallArgs)(nil)).Elem()
}

type FirewallInput interface {
	pulumi.Input

	ToFirewallOutput() FirewallOutput
	ToFirewallOutputWithContext(ctx context.Context) FirewallOutput
}

func (*Firewall) ElementType() reflect.Type {
	return reflect.TypeOf((**Firewall)(nil)).Elem()
}

func (i *Firewall) ToFirewallOutput() FirewallOutput {
	return i.ToFirewallOutputWithContext(context.Background())
}

func (i *Firewall) ToFirewallOutputWithContext(ctx context.Context) FirewallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallOutput)
}

// FirewallArrayInput is an input type that accepts FirewallArray and FirewallArrayOutput values.
// You can construct a concrete instance of `FirewallArrayInput` via:
//
//	FirewallArray{ FirewallArgs{...} }
type FirewallArrayInput interface {
	pulumi.Input

	ToFirewallArrayOutput() FirewallArrayOutput
	ToFirewallArrayOutputWithContext(context.Context) FirewallArrayOutput
}

type FirewallArray []FirewallInput

func (FirewallArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Firewall)(nil)).Elem()
}

func (i FirewallArray) ToFirewallArrayOutput() FirewallArrayOutput {
	return i.ToFirewallArrayOutputWithContext(context.Background())
}

func (i FirewallArray) ToFirewallArrayOutputWithContext(ctx context.Context) FirewallArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallArrayOutput)
}

// FirewallMapInput is an input type that accepts FirewallMap and FirewallMapOutput values.
// You can construct a concrete instance of `FirewallMapInput` via:
//
//	FirewallMap{ "key": FirewallArgs{...} }
type FirewallMapInput interface {
	pulumi.Input

	ToFirewallMapOutput() FirewallMapOutput
	ToFirewallMapOutputWithContext(context.Context) FirewallMapOutput
}

type FirewallMap map[string]FirewallInput

func (FirewallMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Firewall)(nil)).Elem()
}

func (i FirewallMap) ToFirewallMapOutput() FirewallMapOutput {
	return i.ToFirewallMapOutputWithContext(context.Background())
}

func (i FirewallMap) ToFirewallMapOutputWithContext(ctx context.Context) FirewallMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallMapOutput)
}

type FirewallOutput struct{ *pulumi.OutputState }

func (FirewallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Firewall)(nil)).Elem()
}

func (o FirewallOutput) ToFirewallOutput() FirewallOutput {
	return o
}

func (o FirewallOutput) ToFirewallOutputWithContext(ctx context.Context) FirewallOutput {
	return o
}

func (o FirewallOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Firewall) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o FirewallOutput) DeleteProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Firewall) pulumi.BoolPtrOutput { return v.DeleteProtection }).(pulumi.BoolPtrOutput)
}

func (o FirewallOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Firewall) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o FirewallOutput) EncryptionConfiguration() FirewallEncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v *Firewall) FirewallEncryptionConfigurationPtrOutput { return v.EncryptionConfiguration }).(FirewallEncryptionConfigurationPtrOutput)
}

func (o FirewallOutput) FirewallPolicyArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Firewall) pulumi.StringOutput { return v.FirewallPolicyArn }).(pulumi.StringOutput)
}

func (o FirewallOutput) FirewallPolicyChangeProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Firewall) pulumi.BoolPtrOutput { return v.FirewallPolicyChangeProtection }).(pulumi.BoolPtrOutput)
}

func (o FirewallOutput) FirewallStatuses() FirewallFirewallStatusArrayOutput {
	return o.ApplyT(func(v *Firewall) FirewallFirewallStatusArrayOutput { return v.FirewallStatuses }).(FirewallFirewallStatusArrayOutput)
}

func (o FirewallOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Firewall) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o FirewallOutput) SubnetChangeProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Firewall) pulumi.BoolPtrOutput { return v.SubnetChangeProtection }).(pulumi.BoolPtrOutput)
}

func (o FirewallOutput) SubnetMappings() FirewallSubnetMappingArrayOutput {
	return o.ApplyT(func(v *Firewall) FirewallSubnetMappingArrayOutput { return v.SubnetMappings }).(FirewallSubnetMappingArrayOutput)
}

func (o FirewallOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Firewall) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o FirewallOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Firewall) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o FirewallOutput) UpdateToken() pulumi.StringOutput {
	return o.ApplyT(func(v *Firewall) pulumi.StringOutput { return v.UpdateToken }).(pulumi.StringOutput)
}

func (o FirewallOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Firewall) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type FirewallArrayOutput struct{ *pulumi.OutputState }

func (FirewallArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Firewall)(nil)).Elem()
}

func (o FirewallArrayOutput) ToFirewallArrayOutput() FirewallArrayOutput {
	return o
}

func (o FirewallArrayOutput) ToFirewallArrayOutputWithContext(ctx context.Context) FirewallArrayOutput {
	return o
}

func (o FirewallArrayOutput) Index(i pulumi.IntInput) FirewallOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Firewall {
		return vs[0].([]*Firewall)[vs[1].(int)]
	}).(FirewallOutput)
}

type FirewallMapOutput struct{ *pulumi.OutputState }

func (FirewallMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Firewall)(nil)).Elem()
}

func (o FirewallMapOutput) ToFirewallMapOutput() FirewallMapOutput {
	return o
}

func (o FirewallMapOutput) ToFirewallMapOutputWithContext(ctx context.Context) FirewallMapOutput {
	return o
}

func (o FirewallMapOutput) MapIndex(k pulumi.StringInput) FirewallOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Firewall {
		return vs[0].(map[string]*Firewall)[vs[1].(string)]
	}).(FirewallOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallInput)(nil)).Elem(), &Firewall{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallArrayInput)(nil)).Elem(), FirewallArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallMapInput)(nil)).Elem(), FirewallMap{})
	pulumi.RegisterOutputType(FirewallOutput{})
	pulumi.RegisterOutputType(FirewallArrayOutput{})
	pulumi.RegisterOutputType(FirewallMapOutput{})
}
