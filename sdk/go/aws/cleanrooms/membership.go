// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cleanrooms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a AWS Clean Rooms membership. Memberships are used to join a Clean Rooms collaboration by the invited member.
//
// ## Example Usage
//
// ### Membership with tags
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/cleanrooms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cleanrooms.NewMembership(ctx, "test_membership", &cleanrooms.MembershipArgs{
//				CollaborationId: pulumi.String("1234abcd-12ab-34cd-56ef-1234567890ab"),
//				QueryLogStatus:  pulumi.String("DISABLED"),
//				DefaultResultConfiguration: &cleanrooms.MembershipDefaultResultConfigurationArgs{
//					RoleArn: pulumi.String("arn:aws:iam::123456789012:role/role-name"),
//					OutputConfiguration: &cleanrooms.MembershipDefaultResultConfigurationOutputConfigurationArgs{
//						S3: &cleanrooms.MembershipDefaultResultConfigurationOutputConfigurationS3Args{
//							Bucket:       pulumi.String("test-bucket"),
//							ResultFormat: pulumi.String("PARQUET"),
//							KeyPrefix:    pulumi.String("test-prefix"),
//						},
//					},
//				},
//				Tags: pulumi.StringMap{
//					"Project": pulumi.String("Terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import `aws_cleanrooms_membership` using the `id`. For example:
//
// ```sh
// $ pulumi import aws:cleanrooms/membership:Membership membership 1234abcd-12ab-34cd-56ef-1234567890ab
// ```
type Membership struct {
	pulumi.CustomResourceState

	// The ARN of the membership.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The ARN of the joined collaboration.
	CollaborationArn pulumi.StringOutput `pulumi:"collaborationArn"`
	// The account ID of the collaboration's creator.
	CollaborationCreatorAccountId pulumi.StringOutput `pulumi:"collaborationCreatorAccountId"`
	// The display name of the collaboration's creator.
	CollaborationCreatorDisplayName pulumi.StringOutput `pulumi:"collaborationCreatorDisplayName"`
	// The ID of the collaboration to which the member was invited.
	CollaborationId pulumi.StringOutput `pulumi:"collaborationId"`
	// The name of the joined collaboration.
	CollaborationName pulumi.StringOutput `pulumi:"collaborationName"`
	// The date and time the membership was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The default configuration for a query result.
	DefaultResultConfiguration MembershipDefaultResultConfigurationPtrOutput `pulumi:"defaultResultConfiguration"`
	// The list of abilities for the invited member.
	MemberAbilities      pulumi.StringArrayOutput                `pulumi:"memberAbilities"`
	PaymentConfiguration MembershipPaymentConfigurationPtrOutput `pulumi:"paymentConfiguration"`
	// An indicator as to whether query logging has been enabled or disabled for the membership.
	QueryLogStatus pulumi.StringOutput `pulumi:"queryLogStatus"`
	// The status of the membership.
	Status pulumi.StringOutput `pulumi:"status"`
	// Key value pairs which tag the membership.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// The date and time the membership was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewMembership registers a new resource with the given unique name, arguments, and options.
func NewMembership(ctx *pulumi.Context,
	name string, args *MembershipArgs, opts ...pulumi.ResourceOption) (*Membership, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CollaborationId == nil {
		return nil, errors.New("invalid value for required argument 'CollaborationId'")
	}
	if args.QueryLogStatus == nil {
		return nil, errors.New("invalid value for required argument 'QueryLogStatus'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Membership
	err := ctx.RegisterResource("aws:cleanrooms/membership:Membership", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMembership gets an existing Membership resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMembership(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MembershipState, opts ...pulumi.ResourceOption) (*Membership, error) {
	var resource Membership
	err := ctx.ReadResource("aws:cleanrooms/membership:Membership", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Membership resources.
type membershipState struct {
	// The ARN of the membership.
	Arn *string `pulumi:"arn"`
	// The ARN of the joined collaboration.
	CollaborationArn *string `pulumi:"collaborationArn"`
	// The account ID of the collaboration's creator.
	CollaborationCreatorAccountId *string `pulumi:"collaborationCreatorAccountId"`
	// The display name of the collaboration's creator.
	CollaborationCreatorDisplayName *string `pulumi:"collaborationCreatorDisplayName"`
	// The ID of the collaboration to which the member was invited.
	CollaborationId *string `pulumi:"collaborationId"`
	// The name of the joined collaboration.
	CollaborationName *string `pulumi:"collaborationName"`
	// The date and time the membership was created.
	CreateTime *string `pulumi:"createTime"`
	// The default configuration for a query result.
	DefaultResultConfiguration *MembershipDefaultResultConfiguration `pulumi:"defaultResultConfiguration"`
	// The list of abilities for the invited member.
	MemberAbilities      []string                        `pulumi:"memberAbilities"`
	PaymentConfiguration *MembershipPaymentConfiguration `pulumi:"paymentConfiguration"`
	// An indicator as to whether query logging has been enabled or disabled for the membership.
	QueryLogStatus *string `pulumi:"queryLogStatus"`
	// The status of the membership.
	Status *string `pulumi:"status"`
	// Key value pairs which tag the membership.
	Tags map[string]string `pulumi:"tags"`
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The date and time the membership was last updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type MembershipState struct {
	// The ARN of the membership.
	Arn pulumi.StringPtrInput
	// The ARN of the joined collaboration.
	CollaborationArn pulumi.StringPtrInput
	// The account ID of the collaboration's creator.
	CollaborationCreatorAccountId pulumi.StringPtrInput
	// The display name of the collaboration's creator.
	CollaborationCreatorDisplayName pulumi.StringPtrInput
	// The ID of the collaboration to which the member was invited.
	CollaborationId pulumi.StringPtrInput
	// The name of the joined collaboration.
	CollaborationName pulumi.StringPtrInput
	// The date and time the membership was created.
	CreateTime pulumi.StringPtrInput
	// The default configuration for a query result.
	DefaultResultConfiguration MembershipDefaultResultConfigurationPtrInput
	// The list of abilities for the invited member.
	MemberAbilities      pulumi.StringArrayInput
	PaymentConfiguration MembershipPaymentConfigurationPtrInput
	// An indicator as to whether query logging has been enabled or disabled for the membership.
	QueryLogStatus pulumi.StringPtrInput
	// The status of the membership.
	Status pulumi.StringPtrInput
	// Key value pairs which tag the membership.
	Tags pulumi.StringMapInput
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
	// The date and time the membership was last updated.
	UpdateTime pulumi.StringPtrInput
}

func (MembershipState) ElementType() reflect.Type {
	return reflect.TypeOf((*membershipState)(nil)).Elem()
}

type membershipArgs struct {
	// The ID of the collaboration to which the member was invited.
	CollaborationId string `pulumi:"collaborationId"`
	// The default configuration for a query result.
	DefaultResultConfiguration *MembershipDefaultResultConfiguration `pulumi:"defaultResultConfiguration"`
	PaymentConfiguration       *MembershipPaymentConfiguration       `pulumi:"paymentConfiguration"`
	// An indicator as to whether query logging has been enabled or disabled for the membership.
	QueryLogStatus string `pulumi:"queryLogStatus"`
	// Key value pairs which tag the membership.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Membership resource.
type MembershipArgs struct {
	// The ID of the collaboration to which the member was invited.
	CollaborationId pulumi.StringInput
	// The default configuration for a query result.
	DefaultResultConfiguration MembershipDefaultResultConfigurationPtrInput
	PaymentConfiguration       MembershipPaymentConfigurationPtrInput
	// An indicator as to whether query logging has been enabled or disabled for the membership.
	QueryLogStatus pulumi.StringInput
	// Key value pairs which tag the membership.
	Tags pulumi.StringMapInput
}

func (MembershipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*membershipArgs)(nil)).Elem()
}

type MembershipInput interface {
	pulumi.Input

	ToMembershipOutput() MembershipOutput
	ToMembershipOutputWithContext(ctx context.Context) MembershipOutput
}

func (*Membership) ElementType() reflect.Type {
	return reflect.TypeOf((**Membership)(nil)).Elem()
}

func (i *Membership) ToMembershipOutput() MembershipOutput {
	return i.ToMembershipOutputWithContext(context.Background())
}

func (i *Membership) ToMembershipOutputWithContext(ctx context.Context) MembershipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipOutput)
}

// MembershipArrayInput is an input type that accepts MembershipArray and MembershipArrayOutput values.
// You can construct a concrete instance of `MembershipArrayInput` via:
//
//	MembershipArray{ MembershipArgs{...} }
type MembershipArrayInput interface {
	pulumi.Input

	ToMembershipArrayOutput() MembershipArrayOutput
	ToMembershipArrayOutputWithContext(context.Context) MembershipArrayOutput
}

type MembershipArray []MembershipInput

func (MembershipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Membership)(nil)).Elem()
}

func (i MembershipArray) ToMembershipArrayOutput() MembershipArrayOutput {
	return i.ToMembershipArrayOutputWithContext(context.Background())
}

func (i MembershipArray) ToMembershipArrayOutputWithContext(ctx context.Context) MembershipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipArrayOutput)
}

// MembershipMapInput is an input type that accepts MembershipMap and MembershipMapOutput values.
// You can construct a concrete instance of `MembershipMapInput` via:
//
//	MembershipMap{ "key": MembershipArgs{...} }
type MembershipMapInput interface {
	pulumi.Input

	ToMembershipMapOutput() MembershipMapOutput
	ToMembershipMapOutputWithContext(context.Context) MembershipMapOutput
}

type MembershipMap map[string]MembershipInput

func (MembershipMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Membership)(nil)).Elem()
}

func (i MembershipMap) ToMembershipMapOutput() MembershipMapOutput {
	return i.ToMembershipMapOutputWithContext(context.Background())
}

func (i MembershipMap) ToMembershipMapOutputWithContext(ctx context.Context) MembershipMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipMapOutput)
}

type MembershipOutput struct{ *pulumi.OutputState }

func (MembershipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Membership)(nil)).Elem()
}

func (o MembershipOutput) ToMembershipOutput() MembershipOutput {
	return o
}

func (o MembershipOutput) ToMembershipOutputWithContext(ctx context.Context) MembershipOutput {
	return o
}

// The ARN of the membership.
func (o MembershipOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Membership) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The ARN of the joined collaboration.
func (o MembershipOutput) CollaborationArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Membership) pulumi.StringOutput { return v.CollaborationArn }).(pulumi.StringOutput)
}

// The account ID of the collaboration's creator.
func (o MembershipOutput) CollaborationCreatorAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Membership) pulumi.StringOutput { return v.CollaborationCreatorAccountId }).(pulumi.StringOutput)
}

// The display name of the collaboration's creator.
func (o MembershipOutput) CollaborationCreatorDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Membership) pulumi.StringOutput { return v.CollaborationCreatorDisplayName }).(pulumi.StringOutput)
}

// The ID of the collaboration to which the member was invited.
func (o MembershipOutput) CollaborationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Membership) pulumi.StringOutput { return v.CollaborationId }).(pulumi.StringOutput)
}

// The name of the joined collaboration.
func (o MembershipOutput) CollaborationName() pulumi.StringOutput {
	return o.ApplyT(func(v *Membership) pulumi.StringOutput { return v.CollaborationName }).(pulumi.StringOutput)
}

// The date and time the membership was created.
func (o MembershipOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Membership) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The default configuration for a query result.
func (o MembershipOutput) DefaultResultConfiguration() MembershipDefaultResultConfigurationPtrOutput {
	return o.ApplyT(func(v *Membership) MembershipDefaultResultConfigurationPtrOutput { return v.DefaultResultConfiguration }).(MembershipDefaultResultConfigurationPtrOutput)
}

// The list of abilities for the invited member.
func (o MembershipOutput) MemberAbilities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Membership) pulumi.StringArrayOutput { return v.MemberAbilities }).(pulumi.StringArrayOutput)
}

func (o MembershipOutput) PaymentConfiguration() MembershipPaymentConfigurationPtrOutput {
	return o.ApplyT(func(v *Membership) MembershipPaymentConfigurationPtrOutput { return v.PaymentConfiguration }).(MembershipPaymentConfigurationPtrOutput)
}

// An indicator as to whether query logging has been enabled or disabled for the membership.
func (o MembershipOutput) QueryLogStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Membership) pulumi.StringOutput { return v.QueryLogStatus }).(pulumi.StringOutput)
}

// The status of the membership.
func (o MembershipOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Membership) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Key value pairs which tag the membership.
func (o MembershipOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Membership) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Deprecated: Please use `tags` instead.
func (o MembershipOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Membership) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// The date and time the membership was last updated.
func (o MembershipOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Membership) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type MembershipArrayOutput struct{ *pulumi.OutputState }

func (MembershipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Membership)(nil)).Elem()
}

func (o MembershipArrayOutput) ToMembershipArrayOutput() MembershipArrayOutput {
	return o
}

func (o MembershipArrayOutput) ToMembershipArrayOutputWithContext(ctx context.Context) MembershipArrayOutput {
	return o
}

func (o MembershipArrayOutput) Index(i pulumi.IntInput) MembershipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Membership {
		return vs[0].([]*Membership)[vs[1].(int)]
	}).(MembershipOutput)
}

type MembershipMapOutput struct{ *pulumi.OutputState }

func (MembershipMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Membership)(nil)).Elem()
}

func (o MembershipMapOutput) ToMembershipMapOutput() MembershipMapOutput {
	return o
}

func (o MembershipMapOutput) ToMembershipMapOutputWithContext(ctx context.Context) MembershipMapOutput {
	return o
}

func (o MembershipMapOutput) MapIndex(k pulumi.StringInput) MembershipOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Membership {
		return vs[0].(map[string]*Membership)[vs[1].(string)]
	}).(MembershipOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MembershipInput)(nil)).Elem(), &Membership{})
	pulumi.RegisterInputType(reflect.TypeOf((*MembershipArrayInput)(nil)).Elem(), MembershipArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MembershipMapInput)(nil)).Elem(), MembershipMap{})
	pulumi.RegisterOutputType(MembershipOutput{})
	pulumi.RegisterOutputType(MembershipArrayOutput{})
	pulumi.RegisterOutputType(MembershipMapOutput{})
}
