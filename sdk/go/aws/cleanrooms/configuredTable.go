// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cleanrooms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a AWS Clean Rooms configured table. Configured tables are used to represent references to existing tables in the AWS Glue Data Catalog.
//
// ## Example Usage
// ### Configured table with tags
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/cleanrooms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cleanrooms.NewConfiguredTable(ctx, "testConfiguredTable", &cleanrooms.ConfiguredTableArgs{
//				AllowedColumns: pulumi.StringArray{
//					pulumi.String("column1"),
//					pulumi.String("column2"),
//					pulumi.String("column3"),
//				},
//				AnalysisMethod: pulumi.String("DIRECT_QUERY"),
//				Description:    pulumi.String("I made this table with TODO!"),
//				TableReference: &cleanrooms.ConfiguredTableTableReferenceArgs{
//					DatabaseName: pulumi.String("example_database"),
//					TableName:    pulumi.String("example_table"),
//				},
//				Tags: pulumi.StringMap{
//					"Project": pulumi.String("TODO"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// In TODO v1.5.0 and later, use an `import` block to import `aws_cleanrooms_configured_table` using the `id`. For exampleterraform import {
//
//	to = aws_cleanrooms_configured_table.table
//
//	id = "1234abcd-12ab-34cd-56ef-1234567890ab" } Using `TODO import`, import `aws_cleanrooms_configured_table` using the `id`. For exampleconsole % TODO import aws_cleanrooms_configured_table.table 1234abcd-12ab-34cd-56ef-1234567890ab
type ConfiguredTable struct {
	pulumi.CustomResourceState

	// The columns of the references table which will be included in the configured table.
	AllowedColumns pulumi.StringArrayOutput `pulumi:"allowedColumns"`
	// The analysis method for the configured table. The only valid value is currently `DIRECT_QUERY`.
	AnalysisMethod pulumi.StringOutput `pulumi:"analysisMethod"`
	// The ARN of the configured table.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The date and time the configured table was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// A description for the configured table.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the configured table.
	Name pulumi.StringOutput `pulumi:"name"`
	// A reference to the AWS Glue table which will be used to create the configured table.
	// * `table_reference.database_name` - (Required - Forces new resource) - The name of the AWS Glue database which contains the table.
	// * `table_reference.table_name` - (Required - Forces new resource) - The name of the AWS Glue table which will be used to create the configured table.
	TableReference ConfiguredTableTableReferenceOutput `pulumi:"tableReference"`
	// Key value pairs which tag the configured table.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// The date and time the configured table was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewConfiguredTable registers a new resource with the given unique name, arguments, and options.
func NewConfiguredTable(ctx *pulumi.Context,
	name string, args *ConfiguredTableArgs, opts ...pulumi.ResourceOption) (*ConfiguredTable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AllowedColumns == nil {
		return nil, errors.New("invalid value for required argument 'AllowedColumns'")
	}
	if args.AnalysisMethod == nil {
		return nil, errors.New("invalid value for required argument 'AnalysisMethod'")
	}
	if args.TableReference == nil {
		return nil, errors.New("invalid value for required argument 'TableReference'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"tagsAll",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConfiguredTable
	err := ctx.RegisterResource("aws:cleanrooms/configuredTable:ConfiguredTable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfiguredTable gets an existing ConfiguredTable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfiguredTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfiguredTableState, opts ...pulumi.ResourceOption) (*ConfiguredTable, error) {
	var resource ConfiguredTable
	err := ctx.ReadResource("aws:cleanrooms/configuredTable:ConfiguredTable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfiguredTable resources.
type configuredTableState struct {
	// The columns of the references table which will be included in the configured table.
	AllowedColumns []string `pulumi:"allowedColumns"`
	// The analysis method for the configured table. The only valid value is currently `DIRECT_QUERY`.
	AnalysisMethod *string `pulumi:"analysisMethod"`
	// The ARN of the configured table.
	Arn *string `pulumi:"arn"`
	// The date and time the configured table was created.
	CreateTime *string `pulumi:"createTime"`
	// A description for the configured table.
	Description *string `pulumi:"description"`
	// The name of the configured table.
	Name *string `pulumi:"name"`
	// A reference to the AWS Glue table which will be used to create the configured table.
	// * `table_reference.database_name` - (Required - Forces new resource) - The name of the AWS Glue database which contains the table.
	// * `table_reference.table_name` - (Required - Forces new resource) - The name of the AWS Glue table which will be used to create the configured table.
	TableReference *ConfiguredTableTableReference `pulumi:"tableReference"`
	// Key value pairs which tag the configured table.
	Tags map[string]string `pulumi:"tags"`
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The date and time the configured table was last updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type ConfiguredTableState struct {
	// The columns of the references table which will be included in the configured table.
	AllowedColumns pulumi.StringArrayInput
	// The analysis method for the configured table. The only valid value is currently `DIRECT_QUERY`.
	AnalysisMethod pulumi.StringPtrInput
	// The ARN of the configured table.
	Arn pulumi.StringPtrInput
	// The date and time the configured table was created.
	CreateTime pulumi.StringPtrInput
	// A description for the configured table.
	Description pulumi.StringPtrInput
	// The name of the configured table.
	Name pulumi.StringPtrInput
	// A reference to the AWS Glue table which will be used to create the configured table.
	// * `table_reference.database_name` - (Required - Forces new resource) - The name of the AWS Glue database which contains the table.
	// * `table_reference.table_name` - (Required - Forces new resource) - The name of the AWS Glue table which will be used to create the configured table.
	TableReference ConfiguredTableTableReferencePtrInput
	// Key value pairs which tag the configured table.
	Tags pulumi.StringMapInput
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
	// The date and time the configured table was last updated.
	UpdateTime pulumi.StringPtrInput
}

func (ConfiguredTableState) ElementType() reflect.Type {
	return reflect.TypeOf((*configuredTableState)(nil)).Elem()
}

type configuredTableArgs struct {
	// The columns of the references table which will be included in the configured table.
	AllowedColumns []string `pulumi:"allowedColumns"`
	// The analysis method for the configured table. The only valid value is currently `DIRECT_QUERY`.
	AnalysisMethod string `pulumi:"analysisMethod"`
	// A description for the configured table.
	Description *string `pulumi:"description"`
	// The name of the configured table.
	Name *string `pulumi:"name"`
	// A reference to the AWS Glue table which will be used to create the configured table.
	// * `table_reference.database_name` - (Required - Forces new resource) - The name of the AWS Glue database which contains the table.
	// * `table_reference.table_name` - (Required - Forces new resource) - The name of the AWS Glue table which will be used to create the configured table.
	TableReference ConfiguredTableTableReference `pulumi:"tableReference"`
	// Key value pairs which tag the configured table.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ConfiguredTable resource.
type ConfiguredTableArgs struct {
	// The columns of the references table which will be included in the configured table.
	AllowedColumns pulumi.StringArrayInput
	// The analysis method for the configured table. The only valid value is currently `DIRECT_QUERY`.
	AnalysisMethod pulumi.StringInput
	// A description for the configured table.
	Description pulumi.StringPtrInput
	// The name of the configured table.
	Name pulumi.StringPtrInput
	// A reference to the AWS Glue table which will be used to create the configured table.
	// * `table_reference.database_name` - (Required - Forces new resource) - The name of the AWS Glue database which contains the table.
	// * `table_reference.table_name` - (Required - Forces new resource) - The name of the AWS Glue table which will be used to create the configured table.
	TableReference ConfiguredTableTableReferenceInput
	// Key value pairs which tag the configured table.
	Tags pulumi.StringMapInput
}

func (ConfiguredTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configuredTableArgs)(nil)).Elem()
}

type ConfiguredTableInput interface {
	pulumi.Input

	ToConfiguredTableOutput() ConfiguredTableOutput
	ToConfiguredTableOutputWithContext(ctx context.Context) ConfiguredTableOutput
}

func (*ConfiguredTable) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfiguredTable)(nil)).Elem()
}

func (i *ConfiguredTable) ToConfiguredTableOutput() ConfiguredTableOutput {
	return i.ToConfiguredTableOutputWithContext(context.Background())
}

func (i *ConfiguredTable) ToConfiguredTableOutputWithContext(ctx context.Context) ConfiguredTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfiguredTableOutput)
}

func (i *ConfiguredTable) ToOutput(ctx context.Context) pulumix.Output[*ConfiguredTable] {
	return pulumix.Output[*ConfiguredTable]{
		OutputState: i.ToConfiguredTableOutputWithContext(ctx).OutputState,
	}
}

// ConfiguredTableArrayInput is an input type that accepts ConfiguredTableArray and ConfiguredTableArrayOutput values.
// You can construct a concrete instance of `ConfiguredTableArrayInput` via:
//
//	ConfiguredTableArray{ ConfiguredTableArgs{...} }
type ConfiguredTableArrayInput interface {
	pulumi.Input

	ToConfiguredTableArrayOutput() ConfiguredTableArrayOutput
	ToConfiguredTableArrayOutputWithContext(context.Context) ConfiguredTableArrayOutput
}

type ConfiguredTableArray []ConfiguredTableInput

func (ConfiguredTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfiguredTable)(nil)).Elem()
}

func (i ConfiguredTableArray) ToConfiguredTableArrayOutput() ConfiguredTableArrayOutput {
	return i.ToConfiguredTableArrayOutputWithContext(context.Background())
}

func (i ConfiguredTableArray) ToConfiguredTableArrayOutputWithContext(ctx context.Context) ConfiguredTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfiguredTableArrayOutput)
}

func (i ConfiguredTableArray) ToOutput(ctx context.Context) pulumix.Output[[]*ConfiguredTable] {
	return pulumix.Output[[]*ConfiguredTable]{
		OutputState: i.ToConfiguredTableArrayOutputWithContext(ctx).OutputState,
	}
}

// ConfiguredTableMapInput is an input type that accepts ConfiguredTableMap and ConfiguredTableMapOutput values.
// You can construct a concrete instance of `ConfiguredTableMapInput` via:
//
//	ConfiguredTableMap{ "key": ConfiguredTableArgs{...} }
type ConfiguredTableMapInput interface {
	pulumi.Input

	ToConfiguredTableMapOutput() ConfiguredTableMapOutput
	ToConfiguredTableMapOutputWithContext(context.Context) ConfiguredTableMapOutput
}

type ConfiguredTableMap map[string]ConfiguredTableInput

func (ConfiguredTableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfiguredTable)(nil)).Elem()
}

func (i ConfiguredTableMap) ToConfiguredTableMapOutput() ConfiguredTableMapOutput {
	return i.ToConfiguredTableMapOutputWithContext(context.Background())
}

func (i ConfiguredTableMap) ToConfiguredTableMapOutputWithContext(ctx context.Context) ConfiguredTableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfiguredTableMapOutput)
}

func (i ConfiguredTableMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ConfiguredTable] {
	return pulumix.Output[map[string]*ConfiguredTable]{
		OutputState: i.ToConfiguredTableMapOutputWithContext(ctx).OutputState,
	}
}

type ConfiguredTableOutput struct{ *pulumi.OutputState }

func (ConfiguredTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfiguredTable)(nil)).Elem()
}

func (o ConfiguredTableOutput) ToConfiguredTableOutput() ConfiguredTableOutput {
	return o
}

func (o ConfiguredTableOutput) ToConfiguredTableOutputWithContext(ctx context.Context) ConfiguredTableOutput {
	return o
}

func (o ConfiguredTableOutput) ToOutput(ctx context.Context) pulumix.Output[*ConfiguredTable] {
	return pulumix.Output[*ConfiguredTable]{
		OutputState: o.OutputState,
	}
}

// The columns of the references table which will be included in the configured table.
func (o ConfiguredTableOutput) AllowedColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConfiguredTable) pulumi.StringArrayOutput { return v.AllowedColumns }).(pulumi.StringArrayOutput)
}

// The analysis method for the configured table. The only valid value is currently `DIRECT_QUERY`.
func (o ConfiguredTableOutput) AnalysisMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfiguredTable) pulumi.StringOutput { return v.AnalysisMethod }).(pulumi.StringOutput)
}

// The ARN of the configured table.
func (o ConfiguredTableOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfiguredTable) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The date and time the configured table was created.
func (o ConfiguredTableOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfiguredTable) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// A description for the configured table.
func (o ConfiguredTableOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfiguredTable) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the configured table.
func (o ConfiguredTableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfiguredTable) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A reference to the AWS Glue table which will be used to create the configured table.
// * `table_reference.database_name` - (Required - Forces new resource) - The name of the AWS Glue database which contains the table.
// * `table_reference.table_name` - (Required - Forces new resource) - The name of the AWS Glue table which will be used to create the configured table.
func (o ConfiguredTableOutput) TableReference() ConfiguredTableTableReferenceOutput {
	return o.ApplyT(func(v *ConfiguredTable) ConfiguredTableTableReferenceOutput { return v.TableReference }).(ConfiguredTableTableReferenceOutput)
}

// Key value pairs which tag the configured table.
func (o ConfiguredTableOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConfiguredTable) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Deprecated: Please use `tags` instead.
func (o ConfiguredTableOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConfiguredTable) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// The date and time the configured table was last updated.
func (o ConfiguredTableOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfiguredTable) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type ConfiguredTableArrayOutput struct{ *pulumi.OutputState }

func (ConfiguredTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfiguredTable)(nil)).Elem()
}

func (o ConfiguredTableArrayOutput) ToConfiguredTableArrayOutput() ConfiguredTableArrayOutput {
	return o
}

func (o ConfiguredTableArrayOutput) ToConfiguredTableArrayOutputWithContext(ctx context.Context) ConfiguredTableArrayOutput {
	return o
}

func (o ConfiguredTableArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ConfiguredTable] {
	return pulumix.Output[[]*ConfiguredTable]{
		OutputState: o.OutputState,
	}
}

func (o ConfiguredTableArrayOutput) Index(i pulumi.IntInput) ConfiguredTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConfiguredTable {
		return vs[0].([]*ConfiguredTable)[vs[1].(int)]
	}).(ConfiguredTableOutput)
}

type ConfiguredTableMapOutput struct{ *pulumi.OutputState }

func (ConfiguredTableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfiguredTable)(nil)).Elem()
}

func (o ConfiguredTableMapOutput) ToConfiguredTableMapOutput() ConfiguredTableMapOutput {
	return o
}

func (o ConfiguredTableMapOutput) ToConfiguredTableMapOutputWithContext(ctx context.Context) ConfiguredTableMapOutput {
	return o
}

func (o ConfiguredTableMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ConfiguredTable] {
	return pulumix.Output[map[string]*ConfiguredTable]{
		OutputState: o.OutputState,
	}
}

func (o ConfiguredTableMapOutput) MapIndex(k pulumi.StringInput) ConfiguredTableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConfiguredTable {
		return vs[0].(map[string]*ConfiguredTable)[vs[1].(string)]
	}).(ConfiguredTableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfiguredTableInput)(nil)).Elem(), &ConfiguredTable{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfiguredTableArrayInput)(nil)).Elem(), ConfiguredTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfiguredTableMapInput)(nil)).Elem(), ConfiguredTableMap{})
	pulumi.RegisterOutputType(ConfiguredTableOutput{})
	pulumi.RegisterOutputType(ConfiguredTableArrayOutput{})
	pulumi.RegisterOutputType(ConfiguredTableMapOutput{})
}
