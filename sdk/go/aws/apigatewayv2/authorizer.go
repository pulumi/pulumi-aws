// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigatewayv2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Authorizer struct {
	pulumi.CustomResourceState

	ApiId                          pulumi.StringOutput                 `pulumi:"apiId"`
	AuthorizerCredentialsArn       pulumi.StringPtrOutput              `pulumi:"authorizerCredentialsArn"`
	AuthorizerPayloadFormatVersion pulumi.StringPtrOutput              `pulumi:"authorizerPayloadFormatVersion"`
	AuthorizerResultTtlInSeconds   pulumi.IntOutput                    `pulumi:"authorizerResultTtlInSeconds"`
	AuthorizerType                 pulumi.StringOutput                 `pulumi:"authorizerType"`
	AuthorizerUri                  pulumi.StringPtrOutput              `pulumi:"authorizerUri"`
	EnableSimpleResponses          pulumi.BoolPtrOutput                `pulumi:"enableSimpleResponses"`
	IdentitySources                pulumi.StringArrayOutput            `pulumi:"identitySources"`
	JwtConfiguration               AuthorizerJwtConfigurationPtrOutput `pulumi:"jwtConfiguration"`
	Name                           pulumi.StringOutput                 `pulumi:"name"`
}

// NewAuthorizer registers a new resource with the given unique name, arguments, and options.
func NewAuthorizer(ctx *pulumi.Context,
	name string, args *AuthorizerArgs, opts ...pulumi.ResourceOption) (*Authorizer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiId == nil {
		return nil, errors.New("invalid value for required argument 'ApiId'")
	}
	if args.AuthorizerType == nil {
		return nil, errors.New("invalid value for required argument 'AuthorizerType'")
	}
	var resource Authorizer
	err := ctx.RegisterResource("aws:apigatewayv2/authorizer:Authorizer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthorizer gets an existing Authorizer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthorizer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthorizerState, opts ...pulumi.ResourceOption) (*Authorizer, error) {
	var resource Authorizer
	err := ctx.ReadResource("aws:apigatewayv2/authorizer:Authorizer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Authorizer resources.
type authorizerState struct {
	ApiId                          *string                     `pulumi:"apiId"`
	AuthorizerCredentialsArn       *string                     `pulumi:"authorizerCredentialsArn"`
	AuthorizerPayloadFormatVersion *string                     `pulumi:"authorizerPayloadFormatVersion"`
	AuthorizerResultTtlInSeconds   *int                        `pulumi:"authorizerResultTtlInSeconds"`
	AuthorizerType                 *string                     `pulumi:"authorizerType"`
	AuthorizerUri                  *string                     `pulumi:"authorizerUri"`
	EnableSimpleResponses          *bool                       `pulumi:"enableSimpleResponses"`
	IdentitySources                []string                    `pulumi:"identitySources"`
	JwtConfiguration               *AuthorizerJwtConfiguration `pulumi:"jwtConfiguration"`
	Name                           *string                     `pulumi:"name"`
}

type AuthorizerState struct {
	ApiId                          pulumi.StringPtrInput
	AuthorizerCredentialsArn       pulumi.StringPtrInput
	AuthorizerPayloadFormatVersion pulumi.StringPtrInput
	AuthorizerResultTtlInSeconds   pulumi.IntPtrInput
	AuthorizerType                 pulumi.StringPtrInput
	AuthorizerUri                  pulumi.StringPtrInput
	EnableSimpleResponses          pulumi.BoolPtrInput
	IdentitySources                pulumi.StringArrayInput
	JwtConfiguration               AuthorizerJwtConfigurationPtrInput
	Name                           pulumi.StringPtrInput
}

func (AuthorizerState) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizerState)(nil)).Elem()
}

type authorizerArgs struct {
	ApiId                          string                      `pulumi:"apiId"`
	AuthorizerCredentialsArn       *string                     `pulumi:"authorizerCredentialsArn"`
	AuthorizerPayloadFormatVersion *string                     `pulumi:"authorizerPayloadFormatVersion"`
	AuthorizerResultTtlInSeconds   *int                        `pulumi:"authorizerResultTtlInSeconds"`
	AuthorizerType                 string                      `pulumi:"authorizerType"`
	AuthorizerUri                  *string                     `pulumi:"authorizerUri"`
	EnableSimpleResponses          *bool                       `pulumi:"enableSimpleResponses"`
	IdentitySources                []string                    `pulumi:"identitySources"`
	JwtConfiguration               *AuthorizerJwtConfiguration `pulumi:"jwtConfiguration"`
	Name                           *string                     `pulumi:"name"`
}

// The set of arguments for constructing a Authorizer resource.
type AuthorizerArgs struct {
	ApiId                          pulumi.StringInput
	AuthorizerCredentialsArn       pulumi.StringPtrInput
	AuthorizerPayloadFormatVersion pulumi.StringPtrInput
	AuthorizerResultTtlInSeconds   pulumi.IntPtrInput
	AuthorizerType                 pulumi.StringInput
	AuthorizerUri                  pulumi.StringPtrInput
	EnableSimpleResponses          pulumi.BoolPtrInput
	IdentitySources                pulumi.StringArrayInput
	JwtConfiguration               AuthorizerJwtConfigurationPtrInput
	Name                           pulumi.StringPtrInput
}

func (AuthorizerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizerArgs)(nil)).Elem()
}

type AuthorizerInput interface {
	pulumi.Input

	ToAuthorizerOutput() AuthorizerOutput
	ToAuthorizerOutputWithContext(ctx context.Context) AuthorizerOutput
}

func (*Authorizer) ElementType() reflect.Type {
	return reflect.TypeOf((**Authorizer)(nil)).Elem()
}

func (i *Authorizer) ToAuthorizerOutput() AuthorizerOutput {
	return i.ToAuthorizerOutputWithContext(context.Background())
}

func (i *Authorizer) ToAuthorizerOutputWithContext(ctx context.Context) AuthorizerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizerOutput)
}

// AuthorizerArrayInput is an input type that accepts AuthorizerArray and AuthorizerArrayOutput values.
// You can construct a concrete instance of `AuthorizerArrayInput` via:
//
//	AuthorizerArray{ AuthorizerArgs{...} }
type AuthorizerArrayInput interface {
	pulumi.Input

	ToAuthorizerArrayOutput() AuthorizerArrayOutput
	ToAuthorizerArrayOutputWithContext(context.Context) AuthorizerArrayOutput
}

type AuthorizerArray []AuthorizerInput

func (AuthorizerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Authorizer)(nil)).Elem()
}

func (i AuthorizerArray) ToAuthorizerArrayOutput() AuthorizerArrayOutput {
	return i.ToAuthorizerArrayOutputWithContext(context.Background())
}

func (i AuthorizerArray) ToAuthorizerArrayOutputWithContext(ctx context.Context) AuthorizerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizerArrayOutput)
}

// AuthorizerMapInput is an input type that accepts AuthorizerMap and AuthorizerMapOutput values.
// You can construct a concrete instance of `AuthorizerMapInput` via:
//
//	AuthorizerMap{ "key": AuthorizerArgs{...} }
type AuthorizerMapInput interface {
	pulumi.Input

	ToAuthorizerMapOutput() AuthorizerMapOutput
	ToAuthorizerMapOutputWithContext(context.Context) AuthorizerMapOutput
}

type AuthorizerMap map[string]AuthorizerInput

func (AuthorizerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Authorizer)(nil)).Elem()
}

func (i AuthorizerMap) ToAuthorizerMapOutput() AuthorizerMapOutput {
	return i.ToAuthorizerMapOutputWithContext(context.Background())
}

func (i AuthorizerMap) ToAuthorizerMapOutputWithContext(ctx context.Context) AuthorizerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizerMapOutput)
}

type AuthorizerOutput struct{ *pulumi.OutputState }

func (AuthorizerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Authorizer)(nil)).Elem()
}

func (o AuthorizerOutput) ToAuthorizerOutput() AuthorizerOutput {
	return o
}

func (o AuthorizerOutput) ToAuthorizerOutputWithContext(ctx context.Context) AuthorizerOutput {
	return o
}

func (o AuthorizerOutput) ApiId() pulumi.StringOutput {
	return o.ApplyT(func(v *Authorizer) pulumi.StringOutput { return v.ApiId }).(pulumi.StringOutput)
}

func (o AuthorizerOutput) AuthorizerCredentialsArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Authorizer) pulumi.StringPtrOutput { return v.AuthorizerCredentialsArn }).(pulumi.StringPtrOutput)
}

func (o AuthorizerOutput) AuthorizerPayloadFormatVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Authorizer) pulumi.StringPtrOutput { return v.AuthorizerPayloadFormatVersion }).(pulumi.StringPtrOutput)
}

func (o AuthorizerOutput) AuthorizerResultTtlInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *Authorizer) pulumi.IntOutput { return v.AuthorizerResultTtlInSeconds }).(pulumi.IntOutput)
}

func (o AuthorizerOutput) AuthorizerType() pulumi.StringOutput {
	return o.ApplyT(func(v *Authorizer) pulumi.StringOutput { return v.AuthorizerType }).(pulumi.StringOutput)
}

func (o AuthorizerOutput) AuthorizerUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Authorizer) pulumi.StringPtrOutput { return v.AuthorizerUri }).(pulumi.StringPtrOutput)
}

func (o AuthorizerOutput) EnableSimpleResponses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Authorizer) pulumi.BoolPtrOutput { return v.EnableSimpleResponses }).(pulumi.BoolPtrOutput)
}

func (o AuthorizerOutput) IdentitySources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Authorizer) pulumi.StringArrayOutput { return v.IdentitySources }).(pulumi.StringArrayOutput)
}

func (o AuthorizerOutput) JwtConfiguration() AuthorizerJwtConfigurationPtrOutput {
	return o.ApplyT(func(v *Authorizer) AuthorizerJwtConfigurationPtrOutput { return v.JwtConfiguration }).(AuthorizerJwtConfigurationPtrOutput)
}

func (o AuthorizerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Authorizer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type AuthorizerArrayOutput struct{ *pulumi.OutputState }

func (AuthorizerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Authorizer)(nil)).Elem()
}

func (o AuthorizerArrayOutput) ToAuthorizerArrayOutput() AuthorizerArrayOutput {
	return o
}

func (o AuthorizerArrayOutput) ToAuthorizerArrayOutputWithContext(ctx context.Context) AuthorizerArrayOutput {
	return o
}

func (o AuthorizerArrayOutput) Index(i pulumi.IntInput) AuthorizerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Authorizer {
		return vs[0].([]*Authorizer)[vs[1].(int)]
	}).(AuthorizerOutput)
}

type AuthorizerMapOutput struct{ *pulumi.OutputState }

func (AuthorizerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Authorizer)(nil)).Elem()
}

func (o AuthorizerMapOutput) ToAuthorizerMapOutput() AuthorizerMapOutput {
	return o
}

func (o AuthorizerMapOutput) ToAuthorizerMapOutputWithContext(ctx context.Context) AuthorizerMapOutput {
	return o
}

func (o AuthorizerMapOutput) MapIndex(k pulumi.StringInput) AuthorizerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Authorizer {
		return vs[0].(map[string]*Authorizer)[vs[1].(string)]
	}).(AuthorizerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizerInput)(nil)).Elem(), &Authorizer{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizerArrayInput)(nil)).Elem(), AuthorizerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizerMapInput)(nil)).Elem(), AuthorizerMap{})
	pulumi.RegisterOutputType(AuthorizerOutput{})
	pulumi.RegisterOutputType(AuthorizerArrayOutput{})
	pulumi.RegisterOutputType(AuthorizerMapOutput{})
}
