// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigatewayv2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RouteResponse struct {
	pulumi.CustomResourceState

	ApiId                    pulumi.StringOutput    `pulumi:"apiId"`
	ModelSelectionExpression pulumi.StringPtrOutput `pulumi:"modelSelectionExpression"`
	ResponseModels           pulumi.StringMapOutput `pulumi:"responseModels"`
	RouteId                  pulumi.StringOutput    `pulumi:"routeId"`
	RouteResponseKey         pulumi.StringOutput    `pulumi:"routeResponseKey"`
}

// NewRouteResponse registers a new resource with the given unique name, arguments, and options.
func NewRouteResponse(ctx *pulumi.Context,
	name string, args *RouteResponseArgs, opts ...pulumi.ResourceOption) (*RouteResponse, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiId == nil {
		return nil, errors.New("invalid value for required argument 'ApiId'")
	}
	if args.RouteId == nil {
		return nil, errors.New("invalid value for required argument 'RouteId'")
	}
	if args.RouteResponseKey == nil {
		return nil, errors.New("invalid value for required argument 'RouteResponseKey'")
	}
	var resource RouteResponse
	err := ctx.RegisterResource("aws:apigatewayv2/routeResponse:RouteResponse", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteResponse gets an existing RouteResponse resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteResponse(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteResponseState, opts ...pulumi.ResourceOption) (*RouteResponse, error) {
	var resource RouteResponse
	err := ctx.ReadResource("aws:apigatewayv2/routeResponse:RouteResponse", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteResponse resources.
type routeResponseState struct {
	ApiId                    *string           `pulumi:"apiId"`
	ModelSelectionExpression *string           `pulumi:"modelSelectionExpression"`
	ResponseModels           map[string]string `pulumi:"responseModels"`
	RouteId                  *string           `pulumi:"routeId"`
	RouteResponseKey         *string           `pulumi:"routeResponseKey"`
}

type RouteResponseState struct {
	ApiId                    pulumi.StringPtrInput
	ModelSelectionExpression pulumi.StringPtrInput
	ResponseModels           pulumi.StringMapInput
	RouteId                  pulumi.StringPtrInput
	RouteResponseKey         pulumi.StringPtrInput
}

func (RouteResponseState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeResponseState)(nil)).Elem()
}

type routeResponseArgs struct {
	ApiId                    string            `pulumi:"apiId"`
	ModelSelectionExpression *string           `pulumi:"modelSelectionExpression"`
	ResponseModels           map[string]string `pulumi:"responseModels"`
	RouteId                  string            `pulumi:"routeId"`
	RouteResponseKey         string            `pulumi:"routeResponseKey"`
}

// The set of arguments for constructing a RouteResponse resource.
type RouteResponseArgs struct {
	ApiId                    pulumi.StringInput
	ModelSelectionExpression pulumi.StringPtrInput
	ResponseModels           pulumi.StringMapInput
	RouteId                  pulumi.StringInput
	RouteResponseKey         pulumi.StringInput
}

func (RouteResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeResponseArgs)(nil)).Elem()
}

type RouteResponseInput interface {
	pulumi.Input

	ToRouteResponseOutput() RouteResponseOutput
	ToRouteResponseOutputWithContext(ctx context.Context) RouteResponseOutput
}

func (*RouteResponse) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteResponse)(nil)).Elem()
}

func (i *RouteResponse) ToRouteResponseOutput() RouteResponseOutput {
	return i.ToRouteResponseOutputWithContext(context.Background())
}

func (i *RouteResponse) ToRouteResponseOutputWithContext(ctx context.Context) RouteResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteResponseOutput)
}

// RouteResponseArrayInput is an input type that accepts RouteResponseArray and RouteResponseArrayOutput values.
// You can construct a concrete instance of `RouteResponseArrayInput` via:
//
//	RouteResponseArray{ RouteResponseArgs{...} }
type RouteResponseArrayInput interface {
	pulumi.Input

	ToRouteResponseArrayOutput() RouteResponseArrayOutput
	ToRouteResponseArrayOutputWithContext(context.Context) RouteResponseArrayOutput
}

type RouteResponseArray []RouteResponseInput

func (RouteResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteResponse)(nil)).Elem()
}

func (i RouteResponseArray) ToRouteResponseArrayOutput() RouteResponseArrayOutput {
	return i.ToRouteResponseArrayOutputWithContext(context.Background())
}

func (i RouteResponseArray) ToRouteResponseArrayOutputWithContext(ctx context.Context) RouteResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteResponseArrayOutput)
}

// RouteResponseMapInput is an input type that accepts RouteResponseMap and RouteResponseMapOutput values.
// You can construct a concrete instance of `RouteResponseMapInput` via:
//
//	RouteResponseMap{ "key": RouteResponseArgs{...} }
type RouteResponseMapInput interface {
	pulumi.Input

	ToRouteResponseMapOutput() RouteResponseMapOutput
	ToRouteResponseMapOutputWithContext(context.Context) RouteResponseMapOutput
}

type RouteResponseMap map[string]RouteResponseInput

func (RouteResponseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteResponse)(nil)).Elem()
}

func (i RouteResponseMap) ToRouteResponseMapOutput() RouteResponseMapOutput {
	return i.ToRouteResponseMapOutputWithContext(context.Background())
}

func (i RouteResponseMap) ToRouteResponseMapOutputWithContext(ctx context.Context) RouteResponseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteResponseMapOutput)
}

type RouteResponseOutput struct{ *pulumi.OutputState }

func (RouteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteResponse)(nil)).Elem()
}

func (o RouteResponseOutput) ToRouteResponseOutput() RouteResponseOutput {
	return o
}

func (o RouteResponseOutput) ToRouteResponseOutputWithContext(ctx context.Context) RouteResponseOutput {
	return o
}

func (o RouteResponseOutput) ApiId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteResponse) pulumi.StringOutput { return v.ApiId }).(pulumi.StringOutput)
}

func (o RouteResponseOutput) ModelSelectionExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteResponse) pulumi.StringPtrOutput { return v.ModelSelectionExpression }).(pulumi.StringPtrOutput)
}

func (o RouteResponseOutput) ResponseModels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RouteResponse) pulumi.StringMapOutput { return v.ResponseModels }).(pulumi.StringMapOutput)
}

func (o RouteResponseOutput) RouteId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteResponse) pulumi.StringOutput { return v.RouteId }).(pulumi.StringOutput)
}

func (o RouteResponseOutput) RouteResponseKey() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteResponse) pulumi.StringOutput { return v.RouteResponseKey }).(pulumi.StringOutput)
}

type RouteResponseArrayOutput struct{ *pulumi.OutputState }

func (RouteResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteResponse)(nil)).Elem()
}

func (o RouteResponseArrayOutput) ToRouteResponseArrayOutput() RouteResponseArrayOutput {
	return o
}

func (o RouteResponseArrayOutput) ToRouteResponseArrayOutputWithContext(ctx context.Context) RouteResponseArrayOutput {
	return o
}

func (o RouteResponseArrayOutput) Index(i pulumi.IntInput) RouteResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouteResponse {
		return vs[0].([]*RouteResponse)[vs[1].(int)]
	}).(RouteResponseOutput)
}

type RouteResponseMapOutput struct{ *pulumi.OutputState }

func (RouteResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteResponse)(nil)).Elem()
}

func (o RouteResponseMapOutput) ToRouteResponseMapOutput() RouteResponseMapOutput {
	return o
}

func (o RouteResponseMapOutput) ToRouteResponseMapOutputWithContext(ctx context.Context) RouteResponseMapOutput {
	return o
}

func (o RouteResponseMapOutput) MapIndex(k pulumi.StringInput) RouteResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouteResponse {
		return vs[0].(map[string]*RouteResponse)[vs[1].(string)]
	}).(RouteResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteResponseInput)(nil)).Elem(), &RouteResponse{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteResponseArrayInput)(nil)).Elem(), RouteResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteResponseMapInput)(nil)).Elem(), RouteResponseMap{})
	pulumi.RegisterOutputType(RouteResponseOutput{})
	pulumi.RegisterOutputType(RouteResponseArrayOutput{})
	pulumi.RegisterOutputType(RouteResponseMapOutput{})
}
