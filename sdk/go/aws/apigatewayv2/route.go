// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigatewayv2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Route struct {
	pulumi.CustomResourceState

	ApiId                            pulumi.StringOutput              `pulumi:"apiId"`
	ApiKeyRequired                   pulumi.BoolPtrOutput             `pulumi:"apiKeyRequired"`
	AuthorizationScopes              pulumi.StringArrayOutput         `pulumi:"authorizationScopes"`
	AuthorizationType                pulumi.StringPtrOutput           `pulumi:"authorizationType"`
	AuthorizerId                     pulumi.StringPtrOutput           `pulumi:"authorizerId"`
	ModelSelectionExpression         pulumi.StringPtrOutput           `pulumi:"modelSelectionExpression"`
	OperationName                    pulumi.StringPtrOutput           `pulumi:"operationName"`
	RequestModels                    pulumi.StringMapOutput           `pulumi:"requestModels"`
	RequestParameters                RouteRequestParameterArrayOutput `pulumi:"requestParameters"`
	RouteKey                         pulumi.StringOutput              `pulumi:"routeKey"`
	RouteResponseSelectionExpression pulumi.StringPtrOutput           `pulumi:"routeResponseSelectionExpression"`
	Target                           pulumi.StringPtrOutput           `pulumi:"target"`
}

// NewRoute registers a new resource with the given unique name, arguments, and options.
func NewRoute(ctx *pulumi.Context,
	name string, args *RouteArgs, opts ...pulumi.ResourceOption) (*Route, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiId == nil {
		return nil, errors.New("invalid value for required argument 'ApiId'")
	}
	if args.RouteKey == nil {
		return nil, errors.New("invalid value for required argument 'RouteKey'")
	}
	var resource Route
	err := ctx.RegisterResource("aws:apigatewayv2/route:Route", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoute gets an existing Route resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteState, opts ...pulumi.ResourceOption) (*Route, error) {
	var resource Route
	err := ctx.ReadResource("aws:apigatewayv2/route:Route", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Route resources.
type routeState struct {
	ApiId                            *string                 `pulumi:"apiId"`
	ApiKeyRequired                   *bool                   `pulumi:"apiKeyRequired"`
	AuthorizationScopes              []string                `pulumi:"authorizationScopes"`
	AuthorizationType                *string                 `pulumi:"authorizationType"`
	AuthorizerId                     *string                 `pulumi:"authorizerId"`
	ModelSelectionExpression         *string                 `pulumi:"modelSelectionExpression"`
	OperationName                    *string                 `pulumi:"operationName"`
	RequestModels                    map[string]string       `pulumi:"requestModels"`
	RequestParameters                []RouteRequestParameter `pulumi:"requestParameters"`
	RouteKey                         *string                 `pulumi:"routeKey"`
	RouteResponseSelectionExpression *string                 `pulumi:"routeResponseSelectionExpression"`
	Target                           *string                 `pulumi:"target"`
}

type RouteState struct {
	ApiId                            pulumi.StringPtrInput
	ApiKeyRequired                   pulumi.BoolPtrInput
	AuthorizationScopes              pulumi.StringArrayInput
	AuthorizationType                pulumi.StringPtrInput
	AuthorizerId                     pulumi.StringPtrInput
	ModelSelectionExpression         pulumi.StringPtrInput
	OperationName                    pulumi.StringPtrInput
	RequestModels                    pulumi.StringMapInput
	RequestParameters                RouteRequestParameterArrayInput
	RouteKey                         pulumi.StringPtrInput
	RouteResponseSelectionExpression pulumi.StringPtrInput
	Target                           pulumi.StringPtrInput
}

func (RouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeState)(nil)).Elem()
}

type routeArgs struct {
	ApiId                            string                  `pulumi:"apiId"`
	ApiKeyRequired                   *bool                   `pulumi:"apiKeyRequired"`
	AuthorizationScopes              []string                `pulumi:"authorizationScopes"`
	AuthorizationType                *string                 `pulumi:"authorizationType"`
	AuthorizerId                     *string                 `pulumi:"authorizerId"`
	ModelSelectionExpression         *string                 `pulumi:"modelSelectionExpression"`
	OperationName                    *string                 `pulumi:"operationName"`
	RequestModels                    map[string]string       `pulumi:"requestModels"`
	RequestParameters                []RouteRequestParameter `pulumi:"requestParameters"`
	RouteKey                         string                  `pulumi:"routeKey"`
	RouteResponseSelectionExpression *string                 `pulumi:"routeResponseSelectionExpression"`
	Target                           *string                 `pulumi:"target"`
}

// The set of arguments for constructing a Route resource.
type RouteArgs struct {
	ApiId                            pulumi.StringInput
	ApiKeyRequired                   pulumi.BoolPtrInput
	AuthorizationScopes              pulumi.StringArrayInput
	AuthorizationType                pulumi.StringPtrInput
	AuthorizerId                     pulumi.StringPtrInput
	ModelSelectionExpression         pulumi.StringPtrInput
	OperationName                    pulumi.StringPtrInput
	RequestModels                    pulumi.StringMapInput
	RequestParameters                RouteRequestParameterArrayInput
	RouteKey                         pulumi.StringInput
	RouteResponseSelectionExpression pulumi.StringPtrInput
	Target                           pulumi.StringPtrInput
}

func (RouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeArgs)(nil)).Elem()
}

type RouteInput interface {
	pulumi.Input

	ToRouteOutput() RouteOutput
	ToRouteOutputWithContext(ctx context.Context) RouteOutput
}

func (*Route) ElementType() reflect.Type {
	return reflect.TypeOf((**Route)(nil)).Elem()
}

func (i *Route) ToRouteOutput() RouteOutput {
	return i.ToRouteOutputWithContext(context.Background())
}

func (i *Route) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteOutput)
}

// RouteArrayInput is an input type that accepts RouteArray and RouteArrayOutput values.
// You can construct a concrete instance of `RouteArrayInput` via:
//
//	RouteArray{ RouteArgs{...} }
type RouteArrayInput interface {
	pulumi.Input

	ToRouteArrayOutput() RouteArrayOutput
	ToRouteArrayOutputWithContext(context.Context) RouteArrayOutput
}

type RouteArray []RouteInput

func (RouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Route)(nil)).Elem()
}

func (i RouteArray) ToRouteArrayOutput() RouteArrayOutput {
	return i.ToRouteArrayOutputWithContext(context.Background())
}

func (i RouteArray) ToRouteArrayOutputWithContext(ctx context.Context) RouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteArrayOutput)
}

// RouteMapInput is an input type that accepts RouteMap and RouteMapOutput values.
// You can construct a concrete instance of `RouteMapInput` via:
//
//	RouteMap{ "key": RouteArgs{...} }
type RouteMapInput interface {
	pulumi.Input

	ToRouteMapOutput() RouteMapOutput
	ToRouteMapOutputWithContext(context.Context) RouteMapOutput
}

type RouteMap map[string]RouteInput

func (RouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Route)(nil)).Elem()
}

func (i RouteMap) ToRouteMapOutput() RouteMapOutput {
	return i.ToRouteMapOutputWithContext(context.Background())
}

func (i RouteMap) ToRouteMapOutputWithContext(ctx context.Context) RouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteMapOutput)
}

type RouteOutput struct{ *pulumi.OutputState }

func (RouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Route)(nil)).Elem()
}

func (o RouteOutput) ToRouteOutput() RouteOutput {
	return o
}

func (o RouteOutput) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return o
}

func (o RouteOutput) ApiId() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.ApiId }).(pulumi.StringOutput)
}

func (o RouteOutput) ApiKeyRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.BoolPtrOutput { return v.ApiKeyRequired }).(pulumi.BoolPtrOutput)
}

func (o RouteOutput) AuthorizationScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Route) pulumi.StringArrayOutput { return v.AuthorizationScopes }).(pulumi.StringArrayOutput)
}

func (o RouteOutput) AuthorizationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.AuthorizationType }).(pulumi.StringPtrOutput)
}

func (o RouteOutput) AuthorizerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.AuthorizerId }).(pulumi.StringPtrOutput)
}

func (o RouteOutput) ModelSelectionExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.ModelSelectionExpression }).(pulumi.StringPtrOutput)
}

func (o RouteOutput) OperationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.OperationName }).(pulumi.StringPtrOutput)
}

func (o RouteOutput) RequestModels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Route) pulumi.StringMapOutput { return v.RequestModels }).(pulumi.StringMapOutput)
}

func (o RouteOutput) RequestParameters() RouteRequestParameterArrayOutput {
	return o.ApplyT(func(v *Route) RouteRequestParameterArrayOutput { return v.RequestParameters }).(RouteRequestParameterArrayOutput)
}

func (o RouteOutput) RouteKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.RouteKey }).(pulumi.StringOutput)
}

func (o RouteOutput) RouteResponseSelectionExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.RouteResponseSelectionExpression }).(pulumi.StringPtrOutput)
}

func (o RouteOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.Target }).(pulumi.StringPtrOutput)
}

type RouteArrayOutput struct{ *pulumi.OutputState }

func (RouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Route)(nil)).Elem()
}

func (o RouteArrayOutput) ToRouteArrayOutput() RouteArrayOutput {
	return o
}

func (o RouteArrayOutput) ToRouteArrayOutputWithContext(ctx context.Context) RouteArrayOutput {
	return o
}

func (o RouteArrayOutput) Index(i pulumi.IntInput) RouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Route {
		return vs[0].([]*Route)[vs[1].(int)]
	}).(RouteOutput)
}

type RouteMapOutput struct{ *pulumi.OutputState }

func (RouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Route)(nil)).Elem()
}

func (o RouteMapOutput) ToRouteMapOutput() RouteMapOutput {
	return o
}

func (o RouteMapOutput) ToRouteMapOutputWithContext(ctx context.Context) RouteMapOutput {
	return o
}

func (o RouteMapOutput) MapIndex(k pulumi.StringInput) RouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Route {
		return vs[0].(map[string]*Route)[vs[1].(string)]
	}).(RouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteInput)(nil)).Elem(), &Route{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteArrayInput)(nil)).Elem(), RouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteMapInput)(nil)).Elem(), RouteMap{})
	pulumi.RegisterOutputType(RouteOutput{})
	pulumi.RegisterOutputType(RouteArrayOutput{})
	pulumi.RegisterOutputType(RouteMapOutput{})
}
