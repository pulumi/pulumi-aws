// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigatewayv2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Api struct {
	pulumi.CustomResourceState

	ApiEndpoint               pulumi.StringOutput           `pulumi:"apiEndpoint"`
	ApiKeySelectionExpression pulumi.StringPtrOutput        `pulumi:"apiKeySelectionExpression"`
	Arn                       pulumi.StringOutput           `pulumi:"arn"`
	Body                      pulumi.StringPtrOutput        `pulumi:"body"`
	CorsConfiguration         ApiCorsConfigurationPtrOutput `pulumi:"corsConfiguration"`
	CredentialsArn            pulumi.StringPtrOutput        `pulumi:"credentialsArn"`
	Description               pulumi.StringPtrOutput        `pulumi:"description"`
	DisableExecuteApiEndpoint pulumi.BoolPtrOutput          `pulumi:"disableExecuteApiEndpoint"`
	ExecutionArn              pulumi.StringOutput           `pulumi:"executionArn"`
	FailOnWarnings            pulumi.BoolPtrOutput          `pulumi:"failOnWarnings"`
	Name                      pulumi.StringOutput           `pulumi:"name"`
	ProtocolType              pulumi.StringOutput           `pulumi:"protocolType"`
	RouteKey                  pulumi.StringPtrOutput        `pulumi:"routeKey"`
	RouteSelectionExpression  pulumi.StringPtrOutput        `pulumi:"routeSelectionExpression"`
	Tags                      pulumi.StringMapOutput        `pulumi:"tags"`
	TagsAll                   pulumi.StringMapOutput        `pulumi:"tagsAll"`
	Target                    pulumi.StringPtrOutput        `pulumi:"target"`
	Version                   pulumi.StringPtrOutput        `pulumi:"version"`
}

// NewApi registers a new resource with the given unique name, arguments, and options.
func NewApi(ctx *pulumi.Context,
	name string, args *ApiArgs, opts ...pulumi.ResourceOption) (*Api, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProtocolType == nil {
		return nil, errors.New("invalid value for required argument 'ProtocolType'")
	}
	var resource Api
	err := ctx.RegisterResource("aws:apigatewayv2/api:Api", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApi gets an existing Api resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApi(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApiState, opts ...pulumi.ResourceOption) (*Api, error) {
	var resource Api
	err := ctx.ReadResource("aws:apigatewayv2/api:Api", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Api resources.
type apiState struct {
	ApiEndpoint               *string               `pulumi:"apiEndpoint"`
	ApiKeySelectionExpression *string               `pulumi:"apiKeySelectionExpression"`
	Arn                       *string               `pulumi:"arn"`
	Body                      *string               `pulumi:"body"`
	CorsConfiguration         *ApiCorsConfiguration `pulumi:"corsConfiguration"`
	CredentialsArn            *string               `pulumi:"credentialsArn"`
	Description               *string               `pulumi:"description"`
	DisableExecuteApiEndpoint *bool                 `pulumi:"disableExecuteApiEndpoint"`
	ExecutionArn              *string               `pulumi:"executionArn"`
	FailOnWarnings            *bool                 `pulumi:"failOnWarnings"`
	Name                      *string               `pulumi:"name"`
	ProtocolType              *string               `pulumi:"protocolType"`
	RouteKey                  *string               `pulumi:"routeKey"`
	RouteSelectionExpression  *string               `pulumi:"routeSelectionExpression"`
	Tags                      map[string]string     `pulumi:"tags"`
	TagsAll                   map[string]string     `pulumi:"tagsAll"`
	Target                    *string               `pulumi:"target"`
	Version                   *string               `pulumi:"version"`
}

type ApiState struct {
	ApiEndpoint               pulumi.StringPtrInput
	ApiKeySelectionExpression pulumi.StringPtrInput
	Arn                       pulumi.StringPtrInput
	Body                      pulumi.StringPtrInput
	CorsConfiguration         ApiCorsConfigurationPtrInput
	CredentialsArn            pulumi.StringPtrInput
	Description               pulumi.StringPtrInput
	DisableExecuteApiEndpoint pulumi.BoolPtrInput
	ExecutionArn              pulumi.StringPtrInput
	FailOnWarnings            pulumi.BoolPtrInput
	Name                      pulumi.StringPtrInput
	ProtocolType              pulumi.StringPtrInput
	RouteKey                  pulumi.StringPtrInput
	RouteSelectionExpression  pulumi.StringPtrInput
	Tags                      pulumi.StringMapInput
	TagsAll                   pulumi.StringMapInput
	Target                    pulumi.StringPtrInput
	Version                   pulumi.StringPtrInput
}

func (ApiState) ElementType() reflect.Type {
	return reflect.TypeOf((*apiState)(nil)).Elem()
}

type apiArgs struct {
	ApiKeySelectionExpression *string               `pulumi:"apiKeySelectionExpression"`
	Body                      *string               `pulumi:"body"`
	CorsConfiguration         *ApiCorsConfiguration `pulumi:"corsConfiguration"`
	CredentialsArn            *string               `pulumi:"credentialsArn"`
	Description               *string               `pulumi:"description"`
	DisableExecuteApiEndpoint *bool                 `pulumi:"disableExecuteApiEndpoint"`
	FailOnWarnings            *bool                 `pulumi:"failOnWarnings"`
	Name                      *string               `pulumi:"name"`
	ProtocolType              string                `pulumi:"protocolType"`
	RouteKey                  *string               `pulumi:"routeKey"`
	RouteSelectionExpression  *string               `pulumi:"routeSelectionExpression"`
	Tags                      map[string]string     `pulumi:"tags"`
	Target                    *string               `pulumi:"target"`
	Version                   *string               `pulumi:"version"`
}

// The set of arguments for constructing a Api resource.
type ApiArgs struct {
	ApiKeySelectionExpression pulumi.StringPtrInput
	Body                      pulumi.StringPtrInput
	CorsConfiguration         ApiCorsConfigurationPtrInput
	CredentialsArn            pulumi.StringPtrInput
	Description               pulumi.StringPtrInput
	DisableExecuteApiEndpoint pulumi.BoolPtrInput
	FailOnWarnings            pulumi.BoolPtrInput
	Name                      pulumi.StringPtrInput
	ProtocolType              pulumi.StringInput
	RouteKey                  pulumi.StringPtrInput
	RouteSelectionExpression  pulumi.StringPtrInput
	Tags                      pulumi.StringMapInput
	Target                    pulumi.StringPtrInput
	Version                   pulumi.StringPtrInput
}

func (ApiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apiArgs)(nil)).Elem()
}

type ApiInput interface {
	pulumi.Input

	ToApiOutput() ApiOutput
	ToApiOutputWithContext(ctx context.Context) ApiOutput
}

func (*Api) ElementType() reflect.Type {
	return reflect.TypeOf((**Api)(nil)).Elem()
}

func (i *Api) ToApiOutput() ApiOutput {
	return i.ToApiOutputWithContext(context.Background())
}

func (i *Api) ToApiOutputWithContext(ctx context.Context) ApiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiOutput)
}

// ApiArrayInput is an input type that accepts ApiArray and ApiArrayOutput values.
// You can construct a concrete instance of `ApiArrayInput` via:
//
//	ApiArray{ ApiArgs{...} }
type ApiArrayInput interface {
	pulumi.Input

	ToApiArrayOutput() ApiArrayOutput
	ToApiArrayOutputWithContext(context.Context) ApiArrayOutput
}

type ApiArray []ApiInput

func (ApiArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Api)(nil)).Elem()
}

func (i ApiArray) ToApiArrayOutput() ApiArrayOutput {
	return i.ToApiArrayOutputWithContext(context.Background())
}

func (i ApiArray) ToApiArrayOutputWithContext(ctx context.Context) ApiArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiArrayOutput)
}

// ApiMapInput is an input type that accepts ApiMap and ApiMapOutput values.
// You can construct a concrete instance of `ApiMapInput` via:
//
//	ApiMap{ "key": ApiArgs{...} }
type ApiMapInput interface {
	pulumi.Input

	ToApiMapOutput() ApiMapOutput
	ToApiMapOutputWithContext(context.Context) ApiMapOutput
}

type ApiMap map[string]ApiInput

func (ApiMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Api)(nil)).Elem()
}

func (i ApiMap) ToApiMapOutput() ApiMapOutput {
	return i.ToApiMapOutputWithContext(context.Background())
}

func (i ApiMap) ToApiMapOutputWithContext(ctx context.Context) ApiMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiMapOutput)
}

type ApiOutput struct{ *pulumi.OutputState }

func (ApiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Api)(nil)).Elem()
}

func (o ApiOutput) ToApiOutput() ApiOutput {
	return o
}

func (o ApiOutput) ToApiOutputWithContext(ctx context.Context) ApiOutput {
	return o
}

func (o ApiOutput) ApiEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *Api) pulumi.StringOutput { return v.ApiEndpoint }).(pulumi.StringOutput)
}

func (o ApiOutput) ApiKeySelectionExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Api) pulumi.StringPtrOutput { return v.ApiKeySelectionExpression }).(pulumi.StringPtrOutput)
}

func (o ApiOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Api) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ApiOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Api) pulumi.StringPtrOutput { return v.Body }).(pulumi.StringPtrOutput)
}

func (o ApiOutput) CorsConfiguration() ApiCorsConfigurationPtrOutput {
	return o.ApplyT(func(v *Api) ApiCorsConfigurationPtrOutput { return v.CorsConfiguration }).(ApiCorsConfigurationPtrOutput)
}

func (o ApiOutput) CredentialsArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Api) pulumi.StringPtrOutput { return v.CredentialsArn }).(pulumi.StringPtrOutput)
}

func (o ApiOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Api) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ApiOutput) DisableExecuteApiEndpoint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Api) pulumi.BoolPtrOutput { return v.DisableExecuteApiEndpoint }).(pulumi.BoolPtrOutput)
}

func (o ApiOutput) ExecutionArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Api) pulumi.StringOutput { return v.ExecutionArn }).(pulumi.StringOutput)
}

func (o ApiOutput) FailOnWarnings() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Api) pulumi.BoolPtrOutput { return v.FailOnWarnings }).(pulumi.BoolPtrOutput)
}

func (o ApiOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Api) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ApiOutput) ProtocolType() pulumi.StringOutput {
	return o.ApplyT(func(v *Api) pulumi.StringOutput { return v.ProtocolType }).(pulumi.StringOutput)
}

func (o ApiOutput) RouteKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Api) pulumi.StringPtrOutput { return v.RouteKey }).(pulumi.StringPtrOutput)
}

func (o ApiOutput) RouteSelectionExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Api) pulumi.StringPtrOutput { return v.RouteSelectionExpression }).(pulumi.StringPtrOutput)
}

func (o ApiOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Api) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ApiOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Api) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o ApiOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Api) pulumi.StringPtrOutput { return v.Target }).(pulumi.StringPtrOutput)
}

func (o ApiOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Api) pulumi.StringPtrOutput { return v.Version }).(pulumi.StringPtrOutput)
}

type ApiArrayOutput struct{ *pulumi.OutputState }

func (ApiArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Api)(nil)).Elem()
}

func (o ApiArrayOutput) ToApiArrayOutput() ApiArrayOutput {
	return o
}

func (o ApiArrayOutput) ToApiArrayOutputWithContext(ctx context.Context) ApiArrayOutput {
	return o
}

func (o ApiArrayOutput) Index(i pulumi.IntInput) ApiOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Api {
		return vs[0].([]*Api)[vs[1].(int)]
	}).(ApiOutput)
}

type ApiMapOutput struct{ *pulumi.OutputState }

func (ApiMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Api)(nil)).Elem()
}

func (o ApiMapOutput) ToApiMapOutput() ApiMapOutput {
	return o
}

func (o ApiMapOutput) ToApiMapOutputWithContext(ctx context.Context) ApiMapOutput {
	return o
}

func (o ApiMapOutput) MapIndex(k pulumi.StringInput) ApiOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Api {
		return vs[0].(map[string]*Api)[vs[1].(string)]
	}).(ApiOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApiInput)(nil)).Elem(), &Api{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiArrayInput)(nil)).Elem(), ApiArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiMapInput)(nil)).Elem(), ApiMap{})
	pulumi.RegisterOutputType(ApiOutput{})
	pulumi.RegisterOutputType(ApiArrayOutput{})
	pulumi.RegisterOutputType(ApiMapOutput{})
}
