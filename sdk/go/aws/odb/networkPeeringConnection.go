// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package odb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/odb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := odb.NewNetworkPeeringConnection(ctx, "example", &odb.NetworkPeeringConnectionArgs{
//				DisplayName:   pulumi.String("example"),
//				OdbNetworkId:  pulumi.String("my-odb-network-id"),
//				PeerNetworkId: pulumi.String("my-vpc-id"),
//				Tags: pulumi.StringMap{
//					"env": pulumi.String("dev"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import odb network peering using the `id`. For example:
//
// ```sh
// $ pulumi import aws:odb/networkPeeringConnection:NetworkPeeringConnection example example
// ```
type NetworkPeeringConnection struct {
	pulumi.CustomResourceState

	Arn pulumi.StringOutput `pulumi:"arn"`
	// Created time of the ODB network peering connection.
	CreatedAt   pulumi.StringOutput `pulumi:"createdAt"`
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// ARN of the ODB network peering connection.
	OdbNetworkArn pulumi.StringOutput `pulumi:"odbNetworkArn"`
	OdbNetworkId  pulumi.StringOutput `pulumi:"odbNetworkId"`
	// Type of the ODB peering connection.
	OdbPeeringConnectionType pulumi.StringOutput `pulumi:"odbPeeringConnectionType"`
	// ARN of the peer network peering connection.
	PeerNetworkArn pulumi.StringOutput `pulumi:"peerNetworkArn"`
	PeerNetworkId  pulumi.StringOutput `pulumi:"peerNetworkId"`
	// Progress of the ODB network peering connection.
	PercentProgress pulumi.Float64Output `pulumi:"percentProgress"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
	// Status of the ODB network peering connection.
	Status pulumi.StringOutput `pulumi:"status"`
	// The reason for the current status of the ODB peering connection.
	StatusReason pulumi.StringOutput `pulumi:"statusReason"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including inherited tags.
	TagsAll  pulumi.StringMapOutput                    `pulumi:"tagsAll"`
	Timeouts NetworkPeeringConnectionTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewNetworkPeeringConnection registers a new resource with the given unique name, arguments, and options.
func NewNetworkPeeringConnection(ctx *pulumi.Context,
	name string, args *NetworkPeeringConnectionArgs, opts ...pulumi.ResourceOption) (*NetworkPeeringConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.OdbNetworkId == nil {
		return nil, errors.New("invalid value for required argument 'OdbNetworkId'")
	}
	if args.PeerNetworkId == nil {
		return nil, errors.New("invalid value for required argument 'PeerNetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkPeeringConnection
	err := ctx.RegisterResource("aws:odb/networkPeeringConnection:NetworkPeeringConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkPeeringConnection gets an existing NetworkPeeringConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkPeeringConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkPeeringConnectionState, opts ...pulumi.ResourceOption) (*NetworkPeeringConnection, error) {
	var resource NetworkPeeringConnection
	err := ctx.ReadResource("aws:odb/networkPeeringConnection:NetworkPeeringConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkPeeringConnection resources.
type networkPeeringConnectionState struct {
	Arn *string `pulumi:"arn"`
	// Created time of the ODB network peering connection.
	CreatedAt   *string `pulumi:"createdAt"`
	DisplayName *string `pulumi:"displayName"`
	// ARN of the ODB network peering connection.
	OdbNetworkArn *string `pulumi:"odbNetworkArn"`
	OdbNetworkId  *string `pulumi:"odbNetworkId"`
	// Type of the ODB peering connection.
	OdbPeeringConnectionType *string `pulumi:"odbPeeringConnectionType"`
	// ARN of the peer network peering connection.
	PeerNetworkArn *string `pulumi:"peerNetworkArn"`
	PeerNetworkId  *string `pulumi:"peerNetworkId"`
	// Progress of the ODB network peering connection.
	PercentProgress *float64 `pulumi:"percentProgress"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// Status of the ODB network peering connection.
	Status *string `pulumi:"status"`
	// The reason for the current status of the ODB peering connection.
	StatusReason *string `pulumi:"statusReason"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including inherited tags.
	TagsAll  map[string]string                 `pulumi:"tagsAll"`
	Timeouts *NetworkPeeringConnectionTimeouts `pulumi:"timeouts"`
}

type NetworkPeeringConnectionState struct {
	Arn pulumi.StringPtrInput
	// Created time of the ODB network peering connection.
	CreatedAt   pulumi.StringPtrInput
	DisplayName pulumi.StringPtrInput
	// ARN of the ODB network peering connection.
	OdbNetworkArn pulumi.StringPtrInput
	OdbNetworkId  pulumi.StringPtrInput
	// Type of the ODB peering connection.
	OdbPeeringConnectionType pulumi.StringPtrInput
	// ARN of the peer network peering connection.
	PeerNetworkArn pulumi.StringPtrInput
	PeerNetworkId  pulumi.StringPtrInput
	// Progress of the ODB network peering connection.
	PercentProgress pulumi.Float64PtrInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// Status of the ODB network peering connection.
	Status pulumi.StringPtrInput
	// The reason for the current status of the ODB peering connection.
	StatusReason pulumi.StringPtrInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including inherited tags.
	TagsAll  pulumi.StringMapInput
	Timeouts NetworkPeeringConnectionTimeoutsPtrInput
}

func (NetworkPeeringConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkPeeringConnectionState)(nil)).Elem()
}

type networkPeeringConnectionArgs struct {
	DisplayName   string `pulumi:"displayName"`
	OdbNetworkId  string `pulumi:"odbNetworkId"`
	PeerNetworkId string `pulumi:"peerNetworkId"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     map[string]string                 `pulumi:"tags"`
	Timeouts *NetworkPeeringConnectionTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a NetworkPeeringConnection resource.
type NetworkPeeringConnectionArgs struct {
	DisplayName   pulumi.StringInput
	OdbNetworkId  pulumi.StringInput
	PeerNetworkId pulumi.StringInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     pulumi.StringMapInput
	Timeouts NetworkPeeringConnectionTimeoutsPtrInput
}

func (NetworkPeeringConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkPeeringConnectionArgs)(nil)).Elem()
}

type NetworkPeeringConnectionInput interface {
	pulumi.Input

	ToNetworkPeeringConnectionOutput() NetworkPeeringConnectionOutput
	ToNetworkPeeringConnectionOutputWithContext(ctx context.Context) NetworkPeeringConnectionOutput
}

func (*NetworkPeeringConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPeeringConnection)(nil)).Elem()
}

func (i *NetworkPeeringConnection) ToNetworkPeeringConnectionOutput() NetworkPeeringConnectionOutput {
	return i.ToNetworkPeeringConnectionOutputWithContext(context.Background())
}

func (i *NetworkPeeringConnection) ToNetworkPeeringConnectionOutputWithContext(ctx context.Context) NetworkPeeringConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPeeringConnectionOutput)
}

// NetworkPeeringConnectionArrayInput is an input type that accepts NetworkPeeringConnectionArray and NetworkPeeringConnectionArrayOutput values.
// You can construct a concrete instance of `NetworkPeeringConnectionArrayInput` via:
//
//	NetworkPeeringConnectionArray{ NetworkPeeringConnectionArgs{...} }
type NetworkPeeringConnectionArrayInput interface {
	pulumi.Input

	ToNetworkPeeringConnectionArrayOutput() NetworkPeeringConnectionArrayOutput
	ToNetworkPeeringConnectionArrayOutputWithContext(context.Context) NetworkPeeringConnectionArrayOutput
}

type NetworkPeeringConnectionArray []NetworkPeeringConnectionInput

func (NetworkPeeringConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkPeeringConnection)(nil)).Elem()
}

func (i NetworkPeeringConnectionArray) ToNetworkPeeringConnectionArrayOutput() NetworkPeeringConnectionArrayOutput {
	return i.ToNetworkPeeringConnectionArrayOutputWithContext(context.Background())
}

func (i NetworkPeeringConnectionArray) ToNetworkPeeringConnectionArrayOutputWithContext(ctx context.Context) NetworkPeeringConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPeeringConnectionArrayOutput)
}

// NetworkPeeringConnectionMapInput is an input type that accepts NetworkPeeringConnectionMap and NetworkPeeringConnectionMapOutput values.
// You can construct a concrete instance of `NetworkPeeringConnectionMapInput` via:
//
//	NetworkPeeringConnectionMap{ "key": NetworkPeeringConnectionArgs{...} }
type NetworkPeeringConnectionMapInput interface {
	pulumi.Input

	ToNetworkPeeringConnectionMapOutput() NetworkPeeringConnectionMapOutput
	ToNetworkPeeringConnectionMapOutputWithContext(context.Context) NetworkPeeringConnectionMapOutput
}

type NetworkPeeringConnectionMap map[string]NetworkPeeringConnectionInput

func (NetworkPeeringConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkPeeringConnection)(nil)).Elem()
}

func (i NetworkPeeringConnectionMap) ToNetworkPeeringConnectionMapOutput() NetworkPeeringConnectionMapOutput {
	return i.ToNetworkPeeringConnectionMapOutputWithContext(context.Background())
}

func (i NetworkPeeringConnectionMap) ToNetworkPeeringConnectionMapOutputWithContext(ctx context.Context) NetworkPeeringConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPeeringConnectionMapOutput)
}

type NetworkPeeringConnectionOutput struct{ *pulumi.OutputState }

func (NetworkPeeringConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPeeringConnection)(nil)).Elem()
}

func (o NetworkPeeringConnectionOutput) ToNetworkPeeringConnectionOutput() NetworkPeeringConnectionOutput {
	return o
}

func (o NetworkPeeringConnectionOutput) ToNetworkPeeringConnectionOutputWithContext(ctx context.Context) NetworkPeeringConnectionOutput {
	return o
}

func (o NetworkPeeringConnectionOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPeeringConnection) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Created time of the ODB network peering connection.
func (o NetworkPeeringConnectionOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPeeringConnection) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o NetworkPeeringConnectionOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPeeringConnection) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// ARN of the ODB network peering connection.
func (o NetworkPeeringConnectionOutput) OdbNetworkArn() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPeeringConnection) pulumi.StringOutput { return v.OdbNetworkArn }).(pulumi.StringOutput)
}

func (o NetworkPeeringConnectionOutput) OdbNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPeeringConnection) pulumi.StringOutput { return v.OdbNetworkId }).(pulumi.StringOutput)
}

// Type of the ODB peering connection.
func (o NetworkPeeringConnectionOutput) OdbPeeringConnectionType() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPeeringConnection) pulumi.StringOutput { return v.OdbPeeringConnectionType }).(pulumi.StringOutput)
}

// ARN of the peer network peering connection.
func (o NetworkPeeringConnectionOutput) PeerNetworkArn() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPeeringConnection) pulumi.StringOutput { return v.PeerNetworkArn }).(pulumi.StringOutput)
}

func (o NetworkPeeringConnectionOutput) PeerNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPeeringConnection) pulumi.StringOutput { return v.PeerNetworkId }).(pulumi.StringOutput)
}

// Progress of the ODB network peering connection.
func (o NetworkPeeringConnectionOutput) PercentProgress() pulumi.Float64Output {
	return o.ApplyT(func(v *NetworkPeeringConnection) pulumi.Float64Output { return v.PercentProgress }).(pulumi.Float64Output)
}

// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
func (o NetworkPeeringConnectionOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPeeringConnection) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Status of the ODB network peering connection.
func (o NetworkPeeringConnectionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPeeringConnection) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The reason for the current status of the ODB peering connection.
func (o NetworkPeeringConnectionOutput) StatusReason() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPeeringConnection) pulumi.StringOutput { return v.StatusReason }).(pulumi.StringOutput)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o NetworkPeeringConnectionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetworkPeeringConnection) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including inherited tags.
func (o NetworkPeeringConnectionOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetworkPeeringConnection) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o NetworkPeeringConnectionOutput) Timeouts() NetworkPeeringConnectionTimeoutsPtrOutput {
	return o.ApplyT(func(v *NetworkPeeringConnection) NetworkPeeringConnectionTimeoutsPtrOutput { return v.Timeouts }).(NetworkPeeringConnectionTimeoutsPtrOutput)
}

type NetworkPeeringConnectionArrayOutput struct{ *pulumi.OutputState }

func (NetworkPeeringConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkPeeringConnection)(nil)).Elem()
}

func (o NetworkPeeringConnectionArrayOutput) ToNetworkPeeringConnectionArrayOutput() NetworkPeeringConnectionArrayOutput {
	return o
}

func (o NetworkPeeringConnectionArrayOutput) ToNetworkPeeringConnectionArrayOutputWithContext(ctx context.Context) NetworkPeeringConnectionArrayOutput {
	return o
}

func (o NetworkPeeringConnectionArrayOutput) Index(i pulumi.IntInput) NetworkPeeringConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkPeeringConnection {
		return vs[0].([]*NetworkPeeringConnection)[vs[1].(int)]
	}).(NetworkPeeringConnectionOutput)
}

type NetworkPeeringConnectionMapOutput struct{ *pulumi.OutputState }

func (NetworkPeeringConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkPeeringConnection)(nil)).Elem()
}

func (o NetworkPeeringConnectionMapOutput) ToNetworkPeeringConnectionMapOutput() NetworkPeeringConnectionMapOutput {
	return o
}

func (o NetworkPeeringConnectionMapOutput) ToNetworkPeeringConnectionMapOutputWithContext(ctx context.Context) NetworkPeeringConnectionMapOutput {
	return o
}

func (o NetworkPeeringConnectionMapOutput) MapIndex(k pulumi.StringInput) NetworkPeeringConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkPeeringConnection {
		return vs[0].(map[string]*NetworkPeeringConnection)[vs[1].(string)]
	}).(NetworkPeeringConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPeeringConnectionInput)(nil)).Elem(), &NetworkPeeringConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPeeringConnectionArrayInput)(nil)).Elem(), NetworkPeeringConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPeeringConnectionMapInput)(nil)).Elem(), NetworkPeeringConnectionMap{})
	pulumi.RegisterOutputType(NetworkPeeringConnectionOutput{})
	pulumi.RegisterOutputType(NetworkPeeringConnectionArrayOutput{})
	pulumi.RegisterOutputType(NetworkPeeringConnectionMapOutput{})
}
