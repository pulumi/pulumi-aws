// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package globalaccelerator

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Accelerator struct {
	pulumi.CustomResourceState

	Attributes    AcceleratorAttributesPtrOutput `pulumi:"attributes"`
	DnsName       pulumi.StringOutput            `pulumi:"dnsName"`
	Enabled       pulumi.BoolPtrOutput           `pulumi:"enabled"`
	HostedZoneId  pulumi.StringOutput            `pulumi:"hostedZoneId"`
	IpAddressType pulumi.StringPtrOutput         `pulumi:"ipAddressType"`
	IpAddresses   pulumi.StringArrayOutput       `pulumi:"ipAddresses"`
	IpSets        AcceleratorIpSetArrayOutput    `pulumi:"ipSets"`
	Name          pulumi.StringOutput            `pulumi:"name"`
	Tags          pulumi.StringMapOutput         `pulumi:"tags"`
	TagsAll       pulumi.StringMapOutput         `pulumi:"tagsAll"`
}

// NewAccelerator registers a new resource with the given unique name, arguments, and options.
func NewAccelerator(ctx *pulumi.Context,
	name string, args *AcceleratorArgs, opts ...pulumi.ResourceOption) (*Accelerator, error) {
	if args == nil {
		args = &AcceleratorArgs{}
	}

	var resource Accelerator
	err := ctx.RegisterResource("aws:globalaccelerator/accelerator:Accelerator", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccelerator gets an existing Accelerator resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccelerator(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AcceleratorState, opts ...pulumi.ResourceOption) (*Accelerator, error) {
	var resource Accelerator
	err := ctx.ReadResource("aws:globalaccelerator/accelerator:Accelerator", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Accelerator resources.
type acceleratorState struct {
	Attributes    *AcceleratorAttributes `pulumi:"attributes"`
	DnsName       *string                `pulumi:"dnsName"`
	Enabled       *bool                  `pulumi:"enabled"`
	HostedZoneId  *string                `pulumi:"hostedZoneId"`
	IpAddressType *string                `pulumi:"ipAddressType"`
	IpAddresses   []string               `pulumi:"ipAddresses"`
	IpSets        []AcceleratorIpSet     `pulumi:"ipSets"`
	Name          *string                `pulumi:"name"`
	Tags          map[string]string      `pulumi:"tags"`
	TagsAll       map[string]string      `pulumi:"tagsAll"`
}

type AcceleratorState struct {
	Attributes    AcceleratorAttributesPtrInput
	DnsName       pulumi.StringPtrInput
	Enabled       pulumi.BoolPtrInput
	HostedZoneId  pulumi.StringPtrInput
	IpAddressType pulumi.StringPtrInput
	IpAddresses   pulumi.StringArrayInput
	IpSets        AcceleratorIpSetArrayInput
	Name          pulumi.StringPtrInput
	Tags          pulumi.StringMapInput
	TagsAll       pulumi.StringMapInput
}

func (AcceleratorState) ElementType() reflect.Type {
	return reflect.TypeOf((*acceleratorState)(nil)).Elem()
}

type acceleratorArgs struct {
	Attributes    *AcceleratorAttributes `pulumi:"attributes"`
	Enabled       *bool                  `pulumi:"enabled"`
	IpAddressType *string                `pulumi:"ipAddressType"`
	IpAddresses   []string               `pulumi:"ipAddresses"`
	Name          *string                `pulumi:"name"`
	Tags          map[string]string      `pulumi:"tags"`
}

// The set of arguments for constructing a Accelerator resource.
type AcceleratorArgs struct {
	Attributes    AcceleratorAttributesPtrInput
	Enabled       pulumi.BoolPtrInput
	IpAddressType pulumi.StringPtrInput
	IpAddresses   pulumi.StringArrayInput
	Name          pulumi.StringPtrInput
	Tags          pulumi.StringMapInput
}

func (AcceleratorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*acceleratorArgs)(nil)).Elem()
}

type AcceleratorInput interface {
	pulumi.Input

	ToAcceleratorOutput() AcceleratorOutput
	ToAcceleratorOutputWithContext(ctx context.Context) AcceleratorOutput
}

func (*Accelerator) ElementType() reflect.Type {
	return reflect.TypeOf((**Accelerator)(nil)).Elem()
}

func (i *Accelerator) ToAcceleratorOutput() AcceleratorOutput {
	return i.ToAcceleratorOutputWithContext(context.Background())
}

func (i *Accelerator) ToAcceleratorOutputWithContext(ctx context.Context) AcceleratorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcceleratorOutput)
}

// AcceleratorArrayInput is an input type that accepts AcceleratorArray and AcceleratorArrayOutput values.
// You can construct a concrete instance of `AcceleratorArrayInput` via:
//
//	AcceleratorArray{ AcceleratorArgs{...} }
type AcceleratorArrayInput interface {
	pulumi.Input

	ToAcceleratorArrayOutput() AcceleratorArrayOutput
	ToAcceleratorArrayOutputWithContext(context.Context) AcceleratorArrayOutput
}

type AcceleratorArray []AcceleratorInput

func (AcceleratorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Accelerator)(nil)).Elem()
}

func (i AcceleratorArray) ToAcceleratorArrayOutput() AcceleratorArrayOutput {
	return i.ToAcceleratorArrayOutputWithContext(context.Background())
}

func (i AcceleratorArray) ToAcceleratorArrayOutputWithContext(ctx context.Context) AcceleratorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcceleratorArrayOutput)
}

// AcceleratorMapInput is an input type that accepts AcceleratorMap and AcceleratorMapOutput values.
// You can construct a concrete instance of `AcceleratorMapInput` via:
//
//	AcceleratorMap{ "key": AcceleratorArgs{...} }
type AcceleratorMapInput interface {
	pulumi.Input

	ToAcceleratorMapOutput() AcceleratorMapOutput
	ToAcceleratorMapOutputWithContext(context.Context) AcceleratorMapOutput
}

type AcceleratorMap map[string]AcceleratorInput

func (AcceleratorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Accelerator)(nil)).Elem()
}

func (i AcceleratorMap) ToAcceleratorMapOutput() AcceleratorMapOutput {
	return i.ToAcceleratorMapOutputWithContext(context.Background())
}

func (i AcceleratorMap) ToAcceleratorMapOutputWithContext(ctx context.Context) AcceleratorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcceleratorMapOutput)
}

type AcceleratorOutput struct{ *pulumi.OutputState }

func (AcceleratorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Accelerator)(nil)).Elem()
}

func (o AcceleratorOutput) ToAcceleratorOutput() AcceleratorOutput {
	return o
}

func (o AcceleratorOutput) ToAcceleratorOutputWithContext(ctx context.Context) AcceleratorOutput {
	return o
}

func (o AcceleratorOutput) Attributes() AcceleratorAttributesPtrOutput {
	return o.ApplyT(func(v *Accelerator) AcceleratorAttributesPtrOutput { return v.Attributes }).(AcceleratorAttributesPtrOutput)
}

func (o AcceleratorOutput) DnsName() pulumi.StringOutput {
	return o.ApplyT(func(v *Accelerator) pulumi.StringOutput { return v.DnsName }).(pulumi.StringOutput)
}

func (o AcceleratorOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Accelerator) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o AcceleratorOutput) HostedZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Accelerator) pulumi.StringOutput { return v.HostedZoneId }).(pulumi.StringOutput)
}

func (o AcceleratorOutput) IpAddressType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Accelerator) pulumi.StringPtrOutput { return v.IpAddressType }).(pulumi.StringPtrOutput)
}

func (o AcceleratorOutput) IpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Accelerator) pulumi.StringArrayOutput { return v.IpAddresses }).(pulumi.StringArrayOutput)
}

func (o AcceleratorOutput) IpSets() AcceleratorIpSetArrayOutput {
	return o.ApplyT(func(v *Accelerator) AcceleratorIpSetArrayOutput { return v.IpSets }).(AcceleratorIpSetArrayOutput)
}

func (o AcceleratorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Accelerator) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o AcceleratorOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Accelerator) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o AcceleratorOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Accelerator) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type AcceleratorArrayOutput struct{ *pulumi.OutputState }

func (AcceleratorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Accelerator)(nil)).Elem()
}

func (o AcceleratorArrayOutput) ToAcceleratorArrayOutput() AcceleratorArrayOutput {
	return o
}

func (o AcceleratorArrayOutput) ToAcceleratorArrayOutputWithContext(ctx context.Context) AcceleratorArrayOutput {
	return o
}

func (o AcceleratorArrayOutput) Index(i pulumi.IntInput) AcceleratorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Accelerator {
		return vs[0].([]*Accelerator)[vs[1].(int)]
	}).(AcceleratorOutput)
}

type AcceleratorMapOutput struct{ *pulumi.OutputState }

func (AcceleratorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Accelerator)(nil)).Elem()
}

func (o AcceleratorMapOutput) ToAcceleratorMapOutput() AcceleratorMapOutput {
	return o
}

func (o AcceleratorMapOutput) ToAcceleratorMapOutputWithContext(ctx context.Context) AcceleratorMapOutput {
	return o
}

func (o AcceleratorMapOutput) MapIndex(k pulumi.StringInput) AcceleratorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Accelerator {
		return vs[0].(map[string]*Accelerator)[vs[1].(string)]
	}).(AcceleratorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AcceleratorInput)(nil)).Elem(), &Accelerator{})
	pulumi.RegisterInputType(reflect.TypeOf((*AcceleratorArrayInput)(nil)).Elem(), AcceleratorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AcceleratorMapInput)(nil)).Elem(), AcceleratorMap{})
	pulumi.RegisterOutputType(AcceleratorOutput{})
	pulumi.RegisterOutputType(AcceleratorArrayOutput{})
	pulumi.RegisterOutputType(AcceleratorMapOutput{})
}
