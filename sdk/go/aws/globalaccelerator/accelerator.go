// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package globalaccelerator

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Global Accelerator accelerator.
type Accelerator struct {
	s *pulumi.ResourceState
}

// NewAccelerator registers a new resource with the given unique name, arguments, and options.
func NewAccelerator(ctx *pulumi.Context,
	name string, args *AcceleratorArgs, opts ...pulumi.ResourceOpt) (*Accelerator, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["attributes"] = nil
		inputs["enabled"] = nil
		inputs["ipAddressType"] = nil
		inputs["name"] = nil
	} else {
		inputs["attributes"] = args.Attributes
		inputs["enabled"] = args.Enabled
		inputs["ipAddressType"] = args.IpAddressType
		inputs["name"] = args.Name
	}
	inputs["ipSets"] = nil
	s, err := ctx.RegisterResource("aws:globalaccelerator/accelerator:Accelerator", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Accelerator{s: s}, nil
}

// GetAccelerator gets an existing Accelerator resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccelerator(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AcceleratorState, opts ...pulumi.ResourceOpt) (*Accelerator, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["attributes"] = state.Attributes
		inputs["enabled"] = state.Enabled
		inputs["ipAddressType"] = state.IpAddressType
		inputs["ipSets"] = state.IpSets
		inputs["name"] = state.Name
	}
	s, err := ctx.ReadResource("aws:globalaccelerator/accelerator:Accelerator", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Accelerator{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Accelerator) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Accelerator) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The attributes of the accelerator. Fields documented below.
func (r *Accelerator) Attributes() *pulumi.Output {
	return r.s.State["attributes"]
}

// Indicates whether the accelerator is enabled. The value is true or false. The default value is true.
func (r *Accelerator) Enabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enabled"])
}

// The value for the address type must be `IPV4`.
func (r *Accelerator) IpAddressType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipAddressType"])
}

// IP address set associated with the accelerator.
func (r *Accelerator) IpSets() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["ipSets"])
}

// The name of the accelerator.
func (r *Accelerator) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Input properties used for looking up and filtering Accelerator resources.
type AcceleratorState struct {
	// The attributes of the accelerator. Fields documented below.
	Attributes interface{}
	// Indicates whether the accelerator is enabled. The value is true or false. The default value is true.
	Enabled interface{}
	// The value for the address type must be `IPV4`.
	IpAddressType interface{}
	// IP address set associated with the accelerator.
	IpSets interface{}
	// The name of the accelerator.
	Name interface{}
}

// The set of arguments for constructing a Accelerator resource.
type AcceleratorArgs struct {
	// The attributes of the accelerator. Fields documented below.
	Attributes interface{}
	// Indicates whether the accelerator is enabled. The value is true or false. The default value is true.
	Enabled interface{}
	// The value for the address type must be `IPV4`.
	IpAddressType interface{}
	// The name of the accelerator.
	Name interface{}
}
