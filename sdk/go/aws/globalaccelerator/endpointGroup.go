// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package globalaccelerator

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EndpointGroup struct {
	pulumi.CustomResourceState

	Arn                        pulumi.StringOutput                           `pulumi:"arn"`
	EndpointConfigurations     EndpointGroupEndpointConfigurationArrayOutput `pulumi:"endpointConfigurations"`
	EndpointGroupRegion        pulumi.StringOutput                           `pulumi:"endpointGroupRegion"`
	HealthCheckIntervalSeconds pulumi.IntPtrOutput                           `pulumi:"healthCheckIntervalSeconds"`
	HealthCheckPath            pulumi.StringOutput                           `pulumi:"healthCheckPath"`
	HealthCheckPort            pulumi.IntOutput                              `pulumi:"healthCheckPort"`
	HealthCheckProtocol        pulumi.StringPtrOutput                        `pulumi:"healthCheckProtocol"`
	ListenerArn                pulumi.StringOutput                           `pulumi:"listenerArn"`
	PortOverrides              EndpointGroupPortOverrideArrayOutput          `pulumi:"portOverrides"`
	ThresholdCount             pulumi.IntPtrOutput                           `pulumi:"thresholdCount"`
	TrafficDialPercentage      pulumi.Float64PtrOutput                       `pulumi:"trafficDialPercentage"`
}

// NewEndpointGroup registers a new resource with the given unique name, arguments, and options.
func NewEndpointGroup(ctx *pulumi.Context,
	name string, args *EndpointGroupArgs, opts ...pulumi.ResourceOption) (*EndpointGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ListenerArn == nil {
		return nil, errors.New("invalid value for required argument 'ListenerArn'")
	}
	var resource EndpointGroup
	err := ctx.RegisterResource("aws:globalaccelerator/endpointGroup:EndpointGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEndpointGroup gets an existing EndpointGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEndpointGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EndpointGroupState, opts ...pulumi.ResourceOption) (*EndpointGroup, error) {
	var resource EndpointGroup
	err := ctx.ReadResource("aws:globalaccelerator/endpointGroup:EndpointGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EndpointGroup resources.
type endpointGroupState struct {
	Arn                        *string                              `pulumi:"arn"`
	EndpointConfigurations     []EndpointGroupEndpointConfiguration `pulumi:"endpointConfigurations"`
	EndpointGroupRegion        *string                              `pulumi:"endpointGroupRegion"`
	HealthCheckIntervalSeconds *int                                 `pulumi:"healthCheckIntervalSeconds"`
	HealthCheckPath            *string                              `pulumi:"healthCheckPath"`
	HealthCheckPort            *int                                 `pulumi:"healthCheckPort"`
	HealthCheckProtocol        *string                              `pulumi:"healthCheckProtocol"`
	ListenerArn                *string                              `pulumi:"listenerArn"`
	PortOverrides              []EndpointGroupPortOverride          `pulumi:"portOverrides"`
	ThresholdCount             *int                                 `pulumi:"thresholdCount"`
	TrafficDialPercentage      *float64                             `pulumi:"trafficDialPercentage"`
}

type EndpointGroupState struct {
	Arn                        pulumi.StringPtrInput
	EndpointConfigurations     EndpointGroupEndpointConfigurationArrayInput
	EndpointGroupRegion        pulumi.StringPtrInput
	HealthCheckIntervalSeconds pulumi.IntPtrInput
	HealthCheckPath            pulumi.StringPtrInput
	HealthCheckPort            pulumi.IntPtrInput
	HealthCheckProtocol        pulumi.StringPtrInput
	ListenerArn                pulumi.StringPtrInput
	PortOverrides              EndpointGroupPortOverrideArrayInput
	ThresholdCount             pulumi.IntPtrInput
	TrafficDialPercentage      pulumi.Float64PtrInput
}

func (EndpointGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointGroupState)(nil)).Elem()
}

type endpointGroupArgs struct {
	EndpointConfigurations     []EndpointGroupEndpointConfiguration `pulumi:"endpointConfigurations"`
	EndpointGroupRegion        *string                              `pulumi:"endpointGroupRegion"`
	HealthCheckIntervalSeconds *int                                 `pulumi:"healthCheckIntervalSeconds"`
	HealthCheckPath            *string                              `pulumi:"healthCheckPath"`
	HealthCheckPort            *int                                 `pulumi:"healthCheckPort"`
	HealthCheckProtocol        *string                              `pulumi:"healthCheckProtocol"`
	ListenerArn                string                               `pulumi:"listenerArn"`
	PortOverrides              []EndpointGroupPortOverride          `pulumi:"portOverrides"`
	ThresholdCount             *int                                 `pulumi:"thresholdCount"`
	TrafficDialPercentage      *float64                             `pulumi:"trafficDialPercentage"`
}

// The set of arguments for constructing a EndpointGroup resource.
type EndpointGroupArgs struct {
	EndpointConfigurations     EndpointGroupEndpointConfigurationArrayInput
	EndpointGroupRegion        pulumi.StringPtrInput
	HealthCheckIntervalSeconds pulumi.IntPtrInput
	HealthCheckPath            pulumi.StringPtrInput
	HealthCheckPort            pulumi.IntPtrInput
	HealthCheckProtocol        pulumi.StringPtrInput
	ListenerArn                pulumi.StringInput
	PortOverrides              EndpointGroupPortOverrideArrayInput
	ThresholdCount             pulumi.IntPtrInput
	TrafficDialPercentage      pulumi.Float64PtrInput
}

func (EndpointGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointGroupArgs)(nil)).Elem()
}

type EndpointGroupInput interface {
	pulumi.Input

	ToEndpointGroupOutput() EndpointGroupOutput
	ToEndpointGroupOutputWithContext(ctx context.Context) EndpointGroupOutput
}

func (*EndpointGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointGroup)(nil)).Elem()
}

func (i *EndpointGroup) ToEndpointGroupOutput() EndpointGroupOutput {
	return i.ToEndpointGroupOutputWithContext(context.Background())
}

func (i *EndpointGroup) ToEndpointGroupOutputWithContext(ctx context.Context) EndpointGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointGroupOutput)
}

// EndpointGroupArrayInput is an input type that accepts EndpointGroupArray and EndpointGroupArrayOutput values.
// You can construct a concrete instance of `EndpointGroupArrayInput` via:
//
//	EndpointGroupArray{ EndpointGroupArgs{...} }
type EndpointGroupArrayInput interface {
	pulumi.Input

	ToEndpointGroupArrayOutput() EndpointGroupArrayOutput
	ToEndpointGroupArrayOutputWithContext(context.Context) EndpointGroupArrayOutput
}

type EndpointGroupArray []EndpointGroupInput

func (EndpointGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EndpointGroup)(nil)).Elem()
}

func (i EndpointGroupArray) ToEndpointGroupArrayOutput() EndpointGroupArrayOutput {
	return i.ToEndpointGroupArrayOutputWithContext(context.Background())
}

func (i EndpointGroupArray) ToEndpointGroupArrayOutputWithContext(ctx context.Context) EndpointGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointGroupArrayOutput)
}

// EndpointGroupMapInput is an input type that accepts EndpointGroupMap and EndpointGroupMapOutput values.
// You can construct a concrete instance of `EndpointGroupMapInput` via:
//
//	EndpointGroupMap{ "key": EndpointGroupArgs{...} }
type EndpointGroupMapInput interface {
	pulumi.Input

	ToEndpointGroupMapOutput() EndpointGroupMapOutput
	ToEndpointGroupMapOutputWithContext(context.Context) EndpointGroupMapOutput
}

type EndpointGroupMap map[string]EndpointGroupInput

func (EndpointGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EndpointGroup)(nil)).Elem()
}

func (i EndpointGroupMap) ToEndpointGroupMapOutput() EndpointGroupMapOutput {
	return i.ToEndpointGroupMapOutputWithContext(context.Background())
}

func (i EndpointGroupMap) ToEndpointGroupMapOutputWithContext(ctx context.Context) EndpointGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointGroupMapOutput)
}

type EndpointGroupOutput struct{ *pulumi.OutputState }

func (EndpointGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointGroup)(nil)).Elem()
}

func (o EndpointGroupOutput) ToEndpointGroupOutput() EndpointGroupOutput {
	return o
}

func (o EndpointGroupOutput) ToEndpointGroupOutputWithContext(ctx context.Context) EndpointGroupOutput {
	return o
}

func (o EndpointGroupOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *EndpointGroup) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o EndpointGroupOutput) EndpointConfigurations() EndpointGroupEndpointConfigurationArrayOutput {
	return o.ApplyT(func(v *EndpointGroup) EndpointGroupEndpointConfigurationArrayOutput { return v.EndpointConfigurations }).(EndpointGroupEndpointConfigurationArrayOutput)
}

func (o EndpointGroupOutput) EndpointGroupRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *EndpointGroup) pulumi.StringOutput { return v.EndpointGroupRegion }).(pulumi.StringOutput)
}

func (o EndpointGroupOutput) HealthCheckIntervalSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EndpointGroup) pulumi.IntPtrOutput { return v.HealthCheckIntervalSeconds }).(pulumi.IntPtrOutput)
}

func (o EndpointGroupOutput) HealthCheckPath() pulumi.StringOutput {
	return o.ApplyT(func(v *EndpointGroup) pulumi.StringOutput { return v.HealthCheckPath }).(pulumi.StringOutput)
}

func (o EndpointGroupOutput) HealthCheckPort() pulumi.IntOutput {
	return o.ApplyT(func(v *EndpointGroup) pulumi.IntOutput { return v.HealthCheckPort }).(pulumi.IntOutput)
}

func (o EndpointGroupOutput) HealthCheckProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointGroup) pulumi.StringPtrOutput { return v.HealthCheckProtocol }).(pulumi.StringPtrOutput)
}

func (o EndpointGroupOutput) ListenerArn() pulumi.StringOutput {
	return o.ApplyT(func(v *EndpointGroup) pulumi.StringOutput { return v.ListenerArn }).(pulumi.StringOutput)
}

func (o EndpointGroupOutput) PortOverrides() EndpointGroupPortOverrideArrayOutput {
	return o.ApplyT(func(v *EndpointGroup) EndpointGroupPortOverrideArrayOutput { return v.PortOverrides }).(EndpointGroupPortOverrideArrayOutput)
}

func (o EndpointGroupOutput) ThresholdCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EndpointGroup) pulumi.IntPtrOutput { return v.ThresholdCount }).(pulumi.IntPtrOutput)
}

func (o EndpointGroupOutput) TrafficDialPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *EndpointGroup) pulumi.Float64PtrOutput { return v.TrafficDialPercentage }).(pulumi.Float64PtrOutput)
}

type EndpointGroupArrayOutput struct{ *pulumi.OutputState }

func (EndpointGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EndpointGroup)(nil)).Elem()
}

func (o EndpointGroupArrayOutput) ToEndpointGroupArrayOutput() EndpointGroupArrayOutput {
	return o
}

func (o EndpointGroupArrayOutput) ToEndpointGroupArrayOutputWithContext(ctx context.Context) EndpointGroupArrayOutput {
	return o
}

func (o EndpointGroupArrayOutput) Index(i pulumi.IntInput) EndpointGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EndpointGroup {
		return vs[0].([]*EndpointGroup)[vs[1].(int)]
	}).(EndpointGroupOutput)
}

type EndpointGroupMapOutput struct{ *pulumi.OutputState }

func (EndpointGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EndpointGroup)(nil)).Elem()
}

func (o EndpointGroupMapOutput) ToEndpointGroupMapOutput() EndpointGroupMapOutput {
	return o
}

func (o EndpointGroupMapOutput) ToEndpointGroupMapOutputWithContext(ctx context.Context) EndpointGroupMapOutput {
	return o
}

func (o EndpointGroupMapOutput) MapIndex(k pulumi.StringInput) EndpointGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EndpointGroup {
		return vs[0].(map[string]*EndpointGroup)[vs[1].(string)]
	}).(EndpointGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointGroupInput)(nil)).Elem(), &EndpointGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointGroupArrayInput)(nil)).Elem(), EndpointGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointGroupMapInput)(nil)).Elem(), EndpointGroupMap{})
	pulumi.RegisterOutputType(EndpointGroupOutput{})
	pulumi.RegisterOutputType(EndpointGroupArrayOutput{})
	pulumi.RegisterOutputType(EndpointGroupMapOutput{})
}
