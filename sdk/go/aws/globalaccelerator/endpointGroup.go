// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package globalaccelerator

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Global Accelerator endpoint group.
type EndpointGroup struct {
	s *pulumi.ResourceState
}

// NewEndpointGroup registers a new resource with the given unique name, arguments, and options.
func NewEndpointGroup(ctx *pulumi.Context,
	name string, args *EndpointGroupArgs, opts ...pulumi.ResourceOpt) (*EndpointGroup, error) {
	if args == nil || args.ListenerArn == nil {
		return nil, errors.New("missing required argument 'ListenerArn'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["endpointConfigurations"] = nil
		inputs["endpointGroupRegion"] = nil
		inputs["healthCheckIntervalSeconds"] = nil
		inputs["healthCheckPath"] = nil
		inputs["healthCheckPort"] = nil
		inputs["healthCheckProtocol"] = nil
		inputs["listenerArn"] = nil
		inputs["thresholdCount"] = nil
		inputs["trafficDialPercentage"] = nil
	} else {
		inputs["endpointConfigurations"] = args.EndpointConfigurations
		inputs["endpointGroupRegion"] = args.EndpointGroupRegion
		inputs["healthCheckIntervalSeconds"] = args.HealthCheckIntervalSeconds
		inputs["healthCheckPath"] = args.HealthCheckPath
		inputs["healthCheckPort"] = args.HealthCheckPort
		inputs["healthCheckProtocol"] = args.HealthCheckProtocol
		inputs["listenerArn"] = args.ListenerArn
		inputs["thresholdCount"] = args.ThresholdCount
		inputs["trafficDialPercentage"] = args.TrafficDialPercentage
	}
	s, err := ctx.RegisterResource("aws:globalaccelerator/endpointGroup:EndpointGroup", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &EndpointGroup{s: s}, nil
}

// GetEndpointGroup gets an existing EndpointGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEndpointGroup(ctx *pulumi.Context,
	name string, id pulumi.ID, state *EndpointGroupState, opts ...pulumi.ResourceOpt) (*EndpointGroup, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["endpointConfigurations"] = state.EndpointConfigurations
		inputs["endpointGroupRegion"] = state.EndpointGroupRegion
		inputs["healthCheckIntervalSeconds"] = state.HealthCheckIntervalSeconds
		inputs["healthCheckPath"] = state.HealthCheckPath
		inputs["healthCheckPort"] = state.HealthCheckPort
		inputs["healthCheckProtocol"] = state.HealthCheckProtocol
		inputs["listenerArn"] = state.ListenerArn
		inputs["thresholdCount"] = state.ThresholdCount
		inputs["trafficDialPercentage"] = state.TrafficDialPercentage
	}
	s, err := ctx.ReadResource("aws:globalaccelerator/endpointGroup:EndpointGroup", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &EndpointGroup{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *EndpointGroup) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *EndpointGroup) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The list of endpoint objects. Fields documented below.
func (r *EndpointGroup) EndpointConfigurations() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["endpointConfigurations"])
}

func (r *EndpointGroup) EndpointGroupRegion() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["endpointGroupRegion"])
}

// The time—10 seconds or 30 seconds—between each health check for an endpoint. The default value is 30.
func (r *EndpointGroup) HealthCheckIntervalSeconds() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["healthCheckIntervalSeconds"])
}

// If the protocol is HTTP/S, then this specifies the path that is the destination for health check targets. The default value is slash (/).
func (r *EndpointGroup) HealthCheckPath() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["healthCheckPath"])
}

// The port that AWS Global Accelerator uses to check the health of endpoints that are part of this endpoint group. The default port is the listener port that this endpoint group is associated with. If listener port is a list of ports, Global Accelerator uses the first port in the list.
func (r *EndpointGroup) HealthCheckPort() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["healthCheckPort"])
}

// The protocol that AWS Global Accelerator uses to check the health of endpoints that are part of this endpoint group. The default value is TCP.
func (r *EndpointGroup) HealthCheckProtocol() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["healthCheckProtocol"])
}

// The Amazon Resource Name (ARN) of the listener.
func (r *EndpointGroup) ListenerArn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["listenerArn"])
}

// The number of consecutive health checks required to set the state of a healthy endpoint to unhealthy, or to set an unhealthy endpoint to healthy. The default value is 3.
func (r *EndpointGroup) ThresholdCount() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["thresholdCount"])
}

// The percentage of traffic to send to an AWS Region. Additional traffic is distributed to other endpoint groups for this listener. The default value is 100.
func (r *EndpointGroup) TrafficDialPercentage() *pulumi.Float64Output {
	return (*pulumi.Float64Output)(r.s.State["trafficDialPercentage"])
}

// Input properties used for looking up and filtering EndpointGroup resources.
type EndpointGroupState struct {
	// The list of endpoint objects. Fields documented below.
	EndpointConfigurations interface{}
	EndpointGroupRegion interface{}
	// The time—10 seconds or 30 seconds—between each health check for an endpoint. The default value is 30.
	HealthCheckIntervalSeconds interface{}
	// If the protocol is HTTP/S, then this specifies the path that is the destination for health check targets. The default value is slash (/).
	HealthCheckPath interface{}
	// The port that AWS Global Accelerator uses to check the health of endpoints that are part of this endpoint group. The default port is the listener port that this endpoint group is associated with. If listener port is a list of ports, Global Accelerator uses the first port in the list.
	HealthCheckPort interface{}
	// The protocol that AWS Global Accelerator uses to check the health of endpoints that are part of this endpoint group. The default value is TCP.
	HealthCheckProtocol interface{}
	// The Amazon Resource Name (ARN) of the listener.
	ListenerArn interface{}
	// The number of consecutive health checks required to set the state of a healthy endpoint to unhealthy, or to set an unhealthy endpoint to healthy. The default value is 3.
	ThresholdCount interface{}
	// The percentage of traffic to send to an AWS Region. Additional traffic is distributed to other endpoint groups for this listener. The default value is 100.
	TrafficDialPercentage interface{}
}

// The set of arguments for constructing a EndpointGroup resource.
type EndpointGroupArgs struct {
	// The list of endpoint objects. Fields documented below.
	EndpointConfigurations interface{}
	EndpointGroupRegion interface{}
	// The time—10 seconds or 30 seconds—between each health check for an endpoint. The default value is 30.
	HealthCheckIntervalSeconds interface{}
	// If the protocol is HTTP/S, then this specifies the path that is the destination for health check targets. The default value is slash (/).
	HealthCheckPath interface{}
	// The port that AWS Global Accelerator uses to check the health of endpoints that are part of this endpoint group. The default port is the listener port that this endpoint group is associated with. If listener port is a list of ports, Global Accelerator uses the first port in the list.
	HealthCheckPort interface{}
	// The protocol that AWS Global Accelerator uses to check the health of endpoints that are part of this endpoint group. The default value is TCP.
	HealthCheckProtocol interface{}
	// The Amazon Resource Name (ARN) of the listener.
	ListenerArn interface{}
	// The number of consecutive health checks required to set the state of a healthy endpoint to unhealthy, or to set an unhealthy endpoint to healthy. The default value is 3.
	ThresholdCount interface{}
	// The percentage of traffic to send to an AWS Region. Additional traffic is distributed to other endpoint groups for this listener. The default value is 100.
	TrafficDialPercentage interface{}
}
