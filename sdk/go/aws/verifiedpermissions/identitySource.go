// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package verifiedpermissions

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS Verified Permissions Identity Source.
//
// ## Example Usage
//
// ### Cognito User Pool Configuration Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/cognito"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/verifiedpermissions"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := verifiedpermissions.NewPolicyStore(ctx, "example", &verifiedpermissions.PolicyStoreArgs{
//				ValidationSettings: &verifiedpermissions.PolicyStoreValidationSettingsArgs{
//					Mode: pulumi.String("STRICT"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleUserPool, err := cognito.NewUserPool(ctx, "example", &cognito.UserPoolArgs{
//				Name: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleUserPoolClient, err := cognito.NewUserPoolClient(ctx, "example", &cognito.UserPoolClientArgs{
//				Name:       pulumi.String("example"),
//				UserPoolId: exampleUserPool.ID(),
//				ExplicitAuthFlows: pulumi.StringArray{
//					pulumi.String("ADMIN_NO_SRP_AUTH"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = verifiedpermissions.NewIdentitySource(ctx, "example", &verifiedpermissions.IdentitySourceArgs{
//				PolicyStoreId: example.ID(),
//				Configuration: &verifiedpermissions.IdentitySourceConfigurationArgs{
//					CognitoUserPoolConfiguration: &verifiedpermissions.IdentitySourceConfigurationCognitoUserPoolConfigurationArgs{
//						UserPoolArn: exampleUserPool.Arn,
//						ClientIds: pulumi.StringArray{
//							exampleUserPoolClient.ID(),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### OpenID Connect Configuration Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/verifiedpermissions"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := verifiedpermissions.NewPolicyStore(ctx, "example", &verifiedpermissions.PolicyStoreArgs{
//				ValidationSettings: &verifiedpermissions.PolicyStoreValidationSettingsArgs{
//					Mode: pulumi.String("STRICT"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = verifiedpermissions.NewIdentitySource(ctx, "example", &verifiedpermissions.IdentitySourceArgs{
//				PolicyStoreId: example.ID(),
//				Configuration: &verifiedpermissions.IdentitySourceConfigurationArgs{
//					OpenIdConnectConfiguration: &verifiedpermissions.IdentitySourceConfigurationOpenIdConnectConfigurationArgs{
//						Issuer: pulumi.String("https://auth.example.com"),
//						TokenSelection: &verifiedpermissions.IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionArgs{
//							AccessTokenOnly: &verifiedpermissions.IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionAccessTokenOnlyArgs{
//								Audiences: pulumi.StringArray{
//									pulumi.String("https://myapp.example.com"),
//								},
//								PrincipalIdClaim: pulumi.String("sub"),
//							},
//						},
//						EntityIdPrefix: pulumi.String("MyOIDCProvider"),
//						GroupConfiguration: &verifiedpermissions.IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfigurationArgs{
//							GroupClaim:      pulumi.String("groups"),
//							GroupEntityType: pulumi.String("MyCorp::UserGroup"),
//						},
//					},
//				},
//				PrincipalEntityType: pulumi.String("MyCorp::User"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Verified Permissions Identity Source using the `policy_store_id:identity_source_id`. For example:
//
// ```sh
// $ pulumi import aws:verifiedpermissions/identitySource:IdentitySource example policy-store-id-12345678:identity-source-id-12345678
// ```
type IdentitySource struct {
	pulumi.CustomResourceState

	// Specifies the details required to communicate with the identity provider (IdP) associated with this identity source. See Configuration below.
	Configuration IdentitySourceConfigurationPtrOutput `pulumi:"configuration"`
	// Specifies the ID of the policy store in which you want to store this identity source.
	PolicyStoreId pulumi.StringOutput `pulumi:"policyStoreId"`
	// Specifies the namespace and data type of the principals generated for identities authenticated by the new identity source.
	PrincipalEntityType pulumi.StringOutput `pulumi:"principalEntityType"`
}

// NewIdentitySource registers a new resource with the given unique name, arguments, and options.
func NewIdentitySource(ctx *pulumi.Context,
	name string, args *IdentitySourceArgs, opts ...pulumi.ResourceOption) (*IdentitySource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyStoreId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyStoreId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IdentitySource
	err := ctx.RegisterResource("aws:verifiedpermissions/identitySource:IdentitySource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentitySource gets an existing IdentitySource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentitySource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentitySourceState, opts ...pulumi.ResourceOption) (*IdentitySource, error) {
	var resource IdentitySource
	err := ctx.ReadResource("aws:verifiedpermissions/identitySource:IdentitySource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentitySource resources.
type identitySourceState struct {
	// Specifies the details required to communicate with the identity provider (IdP) associated with this identity source. See Configuration below.
	Configuration *IdentitySourceConfiguration `pulumi:"configuration"`
	// Specifies the ID of the policy store in which you want to store this identity source.
	PolicyStoreId *string `pulumi:"policyStoreId"`
	// Specifies the namespace and data type of the principals generated for identities authenticated by the new identity source.
	PrincipalEntityType *string `pulumi:"principalEntityType"`
}

type IdentitySourceState struct {
	// Specifies the details required to communicate with the identity provider (IdP) associated with this identity source. See Configuration below.
	Configuration IdentitySourceConfigurationPtrInput
	// Specifies the ID of the policy store in which you want to store this identity source.
	PolicyStoreId pulumi.StringPtrInput
	// Specifies the namespace and data type of the principals generated for identities authenticated by the new identity source.
	PrincipalEntityType pulumi.StringPtrInput
}

func (IdentitySourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*identitySourceState)(nil)).Elem()
}

type identitySourceArgs struct {
	// Specifies the details required to communicate with the identity provider (IdP) associated with this identity source. See Configuration below.
	Configuration *IdentitySourceConfiguration `pulumi:"configuration"`
	// Specifies the ID of the policy store in which you want to store this identity source.
	PolicyStoreId string `pulumi:"policyStoreId"`
	// Specifies the namespace and data type of the principals generated for identities authenticated by the new identity source.
	PrincipalEntityType *string `pulumi:"principalEntityType"`
}

// The set of arguments for constructing a IdentitySource resource.
type IdentitySourceArgs struct {
	// Specifies the details required to communicate with the identity provider (IdP) associated with this identity source. See Configuration below.
	Configuration IdentitySourceConfigurationPtrInput
	// Specifies the ID of the policy store in which you want to store this identity source.
	PolicyStoreId pulumi.StringInput
	// Specifies the namespace and data type of the principals generated for identities authenticated by the new identity source.
	PrincipalEntityType pulumi.StringPtrInput
}

func (IdentitySourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identitySourceArgs)(nil)).Elem()
}

type IdentitySourceInput interface {
	pulumi.Input

	ToIdentitySourceOutput() IdentitySourceOutput
	ToIdentitySourceOutputWithContext(ctx context.Context) IdentitySourceOutput
}

func (*IdentitySource) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentitySource)(nil)).Elem()
}

func (i *IdentitySource) ToIdentitySourceOutput() IdentitySourceOutput {
	return i.ToIdentitySourceOutputWithContext(context.Background())
}

func (i *IdentitySource) ToIdentitySourceOutputWithContext(ctx context.Context) IdentitySourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentitySourceOutput)
}

// IdentitySourceArrayInput is an input type that accepts IdentitySourceArray and IdentitySourceArrayOutput values.
// You can construct a concrete instance of `IdentitySourceArrayInput` via:
//
//	IdentitySourceArray{ IdentitySourceArgs{...} }
type IdentitySourceArrayInput interface {
	pulumi.Input

	ToIdentitySourceArrayOutput() IdentitySourceArrayOutput
	ToIdentitySourceArrayOutputWithContext(context.Context) IdentitySourceArrayOutput
}

type IdentitySourceArray []IdentitySourceInput

func (IdentitySourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentitySource)(nil)).Elem()
}

func (i IdentitySourceArray) ToIdentitySourceArrayOutput() IdentitySourceArrayOutput {
	return i.ToIdentitySourceArrayOutputWithContext(context.Background())
}

func (i IdentitySourceArray) ToIdentitySourceArrayOutputWithContext(ctx context.Context) IdentitySourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentitySourceArrayOutput)
}

// IdentitySourceMapInput is an input type that accepts IdentitySourceMap and IdentitySourceMapOutput values.
// You can construct a concrete instance of `IdentitySourceMapInput` via:
//
//	IdentitySourceMap{ "key": IdentitySourceArgs{...} }
type IdentitySourceMapInput interface {
	pulumi.Input

	ToIdentitySourceMapOutput() IdentitySourceMapOutput
	ToIdentitySourceMapOutputWithContext(context.Context) IdentitySourceMapOutput
}

type IdentitySourceMap map[string]IdentitySourceInput

func (IdentitySourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentitySource)(nil)).Elem()
}

func (i IdentitySourceMap) ToIdentitySourceMapOutput() IdentitySourceMapOutput {
	return i.ToIdentitySourceMapOutputWithContext(context.Background())
}

func (i IdentitySourceMap) ToIdentitySourceMapOutputWithContext(ctx context.Context) IdentitySourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentitySourceMapOutput)
}

type IdentitySourceOutput struct{ *pulumi.OutputState }

func (IdentitySourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentitySource)(nil)).Elem()
}

func (o IdentitySourceOutput) ToIdentitySourceOutput() IdentitySourceOutput {
	return o
}

func (o IdentitySourceOutput) ToIdentitySourceOutputWithContext(ctx context.Context) IdentitySourceOutput {
	return o
}

// Specifies the details required to communicate with the identity provider (IdP) associated with this identity source. See Configuration below.
func (o IdentitySourceOutput) Configuration() IdentitySourceConfigurationPtrOutput {
	return o.ApplyT(func(v *IdentitySource) IdentitySourceConfigurationPtrOutput { return v.Configuration }).(IdentitySourceConfigurationPtrOutput)
}

// Specifies the ID of the policy store in which you want to store this identity source.
func (o IdentitySourceOutput) PolicyStoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentitySource) pulumi.StringOutput { return v.PolicyStoreId }).(pulumi.StringOutput)
}

// Specifies the namespace and data type of the principals generated for identities authenticated by the new identity source.
func (o IdentitySourceOutput) PrincipalEntityType() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentitySource) pulumi.StringOutput { return v.PrincipalEntityType }).(pulumi.StringOutput)
}

type IdentitySourceArrayOutput struct{ *pulumi.OutputState }

func (IdentitySourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentitySource)(nil)).Elem()
}

func (o IdentitySourceArrayOutput) ToIdentitySourceArrayOutput() IdentitySourceArrayOutput {
	return o
}

func (o IdentitySourceArrayOutput) ToIdentitySourceArrayOutputWithContext(ctx context.Context) IdentitySourceArrayOutput {
	return o
}

func (o IdentitySourceArrayOutput) Index(i pulumi.IntInput) IdentitySourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IdentitySource {
		return vs[0].([]*IdentitySource)[vs[1].(int)]
	}).(IdentitySourceOutput)
}

type IdentitySourceMapOutput struct{ *pulumi.OutputState }

func (IdentitySourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentitySource)(nil)).Elem()
}

func (o IdentitySourceMapOutput) ToIdentitySourceMapOutput() IdentitySourceMapOutput {
	return o
}

func (o IdentitySourceMapOutput) ToIdentitySourceMapOutputWithContext(ctx context.Context) IdentitySourceMapOutput {
	return o
}

func (o IdentitySourceMapOutput) MapIndex(k pulumi.StringInput) IdentitySourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IdentitySource {
		return vs[0].(map[string]*IdentitySource)[vs[1].(string)]
	}).(IdentitySourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IdentitySourceInput)(nil)).Elem(), &IdentitySource{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentitySourceArrayInput)(nil)).Elem(), IdentitySourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentitySourceMapInput)(nil)).Elem(), IdentitySourceMap{})
	pulumi.RegisterOutputType(IdentitySourceOutput{})
	pulumi.RegisterOutputType(IdentitySourceArrayOutput{})
	pulumi.RegisterOutputType(IdentitySourceMapOutput{})
}
