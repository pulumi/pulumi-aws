// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package verifiedpermissions

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Basic Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/verifiedpermissions"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := verifiedpermissions.NewPolicyStore(ctx, "example", &verifiedpermissions.PolicyStoreArgs{
//				ValidationSettings: &verifiedpermissions.PolicyStoreValidationSettingsArgs{
//					Mode: pulumi.String("STRICT"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Using `pulumi import`, import Verified Permissions Policy Store using the `policy_store_id`. For example:
//
// console
//
//	%!p(MISSING)ulumi import aws_verifiedpermissions_policy_store.example DxQg2j8xvXJQ1tQCYNWj9T
type PolicyStore struct {
	pulumi.CustomResourceState

	// The ARN of the Policy Store.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// A description of the Policy Store.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The ID of the Policy Store.
	PolicyStoreId pulumi.StringOutput `pulumi:"policyStoreId"`
	// Validation settings for the policy store.
	ValidationSettings PolicyStoreValidationSettingsPtrOutput `pulumi:"validationSettings"`
}

// NewPolicyStore registers a new resource with the given unique name, arguments, and options.
func NewPolicyStore(ctx *pulumi.Context,
	name string, args *PolicyStoreArgs, opts ...pulumi.ResourceOption) (*PolicyStore, error) {
	if args == nil {
		args = &PolicyStoreArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicyStore
	err := ctx.RegisterResource("aws:verifiedpermissions/policyStore:PolicyStore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyStore gets an existing PolicyStore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyStore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyStoreState, opts ...pulumi.ResourceOption) (*PolicyStore, error) {
	var resource PolicyStore
	err := ctx.ReadResource("aws:verifiedpermissions/policyStore:PolicyStore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyStore resources.
type policyStoreState struct {
	// The ARN of the Policy Store.
	Arn *string `pulumi:"arn"`
	// A description of the Policy Store.
	Description *string `pulumi:"description"`
	// The ID of the Policy Store.
	PolicyStoreId *string `pulumi:"policyStoreId"`
	// Validation settings for the policy store.
	ValidationSettings *PolicyStoreValidationSettings `pulumi:"validationSettings"`
}

type PolicyStoreState struct {
	// The ARN of the Policy Store.
	Arn pulumi.StringPtrInput
	// A description of the Policy Store.
	Description pulumi.StringPtrInput
	// The ID of the Policy Store.
	PolicyStoreId pulumi.StringPtrInput
	// Validation settings for the policy store.
	ValidationSettings PolicyStoreValidationSettingsPtrInput
}

func (PolicyStoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyStoreState)(nil)).Elem()
}

type policyStoreArgs struct {
	// A description of the Policy Store.
	Description *string `pulumi:"description"`
	// Validation settings for the policy store.
	ValidationSettings *PolicyStoreValidationSettings `pulumi:"validationSettings"`
}

// The set of arguments for constructing a PolicyStore resource.
type PolicyStoreArgs struct {
	// A description of the Policy Store.
	Description pulumi.StringPtrInput
	// Validation settings for the policy store.
	ValidationSettings PolicyStoreValidationSettingsPtrInput
}

func (PolicyStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyStoreArgs)(nil)).Elem()
}

type PolicyStoreInput interface {
	pulumi.Input

	ToPolicyStoreOutput() PolicyStoreOutput
	ToPolicyStoreOutputWithContext(ctx context.Context) PolicyStoreOutput
}

func (*PolicyStore) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyStore)(nil)).Elem()
}

func (i *PolicyStore) ToPolicyStoreOutput() PolicyStoreOutput {
	return i.ToPolicyStoreOutputWithContext(context.Background())
}

func (i *PolicyStore) ToPolicyStoreOutputWithContext(ctx context.Context) PolicyStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyStoreOutput)
}

// PolicyStoreArrayInput is an input type that accepts PolicyStoreArray and PolicyStoreArrayOutput values.
// You can construct a concrete instance of `PolicyStoreArrayInput` via:
//
//	PolicyStoreArray{ PolicyStoreArgs{...} }
type PolicyStoreArrayInput interface {
	pulumi.Input

	ToPolicyStoreArrayOutput() PolicyStoreArrayOutput
	ToPolicyStoreArrayOutputWithContext(context.Context) PolicyStoreArrayOutput
}

type PolicyStoreArray []PolicyStoreInput

func (PolicyStoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyStore)(nil)).Elem()
}

func (i PolicyStoreArray) ToPolicyStoreArrayOutput() PolicyStoreArrayOutput {
	return i.ToPolicyStoreArrayOutputWithContext(context.Background())
}

func (i PolicyStoreArray) ToPolicyStoreArrayOutputWithContext(ctx context.Context) PolicyStoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyStoreArrayOutput)
}

// PolicyStoreMapInput is an input type that accepts PolicyStoreMap and PolicyStoreMapOutput values.
// You can construct a concrete instance of `PolicyStoreMapInput` via:
//
//	PolicyStoreMap{ "key": PolicyStoreArgs{...} }
type PolicyStoreMapInput interface {
	pulumi.Input

	ToPolicyStoreMapOutput() PolicyStoreMapOutput
	ToPolicyStoreMapOutputWithContext(context.Context) PolicyStoreMapOutput
}

type PolicyStoreMap map[string]PolicyStoreInput

func (PolicyStoreMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyStore)(nil)).Elem()
}

func (i PolicyStoreMap) ToPolicyStoreMapOutput() PolicyStoreMapOutput {
	return i.ToPolicyStoreMapOutputWithContext(context.Background())
}

func (i PolicyStoreMap) ToPolicyStoreMapOutputWithContext(ctx context.Context) PolicyStoreMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyStoreMapOutput)
}

type PolicyStoreOutput struct{ *pulumi.OutputState }

func (PolicyStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyStore)(nil)).Elem()
}

func (o PolicyStoreOutput) ToPolicyStoreOutput() PolicyStoreOutput {
	return o
}

func (o PolicyStoreOutput) ToPolicyStoreOutputWithContext(ctx context.Context) PolicyStoreOutput {
	return o
}

// The ARN of the Policy Store.
func (o PolicyStoreOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyStore) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// A description of the Policy Store.
func (o PolicyStoreOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyStore) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The ID of the Policy Store.
func (o PolicyStoreOutput) PolicyStoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyStore) pulumi.StringOutput { return v.PolicyStoreId }).(pulumi.StringOutput)
}

// Validation settings for the policy store.
func (o PolicyStoreOutput) ValidationSettings() PolicyStoreValidationSettingsPtrOutput {
	return o.ApplyT(func(v *PolicyStore) PolicyStoreValidationSettingsPtrOutput { return v.ValidationSettings }).(PolicyStoreValidationSettingsPtrOutput)
}

type PolicyStoreArrayOutput struct{ *pulumi.OutputState }

func (PolicyStoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyStore)(nil)).Elem()
}

func (o PolicyStoreArrayOutput) ToPolicyStoreArrayOutput() PolicyStoreArrayOutput {
	return o
}

func (o PolicyStoreArrayOutput) ToPolicyStoreArrayOutputWithContext(ctx context.Context) PolicyStoreArrayOutput {
	return o
}

func (o PolicyStoreArrayOutput) Index(i pulumi.IntInput) PolicyStoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicyStore {
		return vs[0].([]*PolicyStore)[vs[1].(int)]
	}).(PolicyStoreOutput)
}

type PolicyStoreMapOutput struct{ *pulumi.OutputState }

func (PolicyStoreMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyStore)(nil)).Elem()
}

func (o PolicyStoreMapOutput) ToPolicyStoreMapOutput() PolicyStoreMapOutput {
	return o
}

func (o PolicyStoreMapOutput) ToPolicyStoreMapOutputWithContext(ctx context.Context) PolicyStoreMapOutput {
	return o
}

func (o PolicyStoreMapOutput) MapIndex(k pulumi.StringInput) PolicyStoreOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicyStore {
		return vs[0].(map[string]*PolicyStore)[vs[1].(string)]
	}).(PolicyStoreOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyStoreInput)(nil)).Elem(), &PolicyStore{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyStoreArrayInput)(nil)).Elem(), PolicyStoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyStoreMapInput)(nil)).Elem(), PolicyStoreMap{})
	pulumi.RegisterOutputType(PolicyStoreOutput{})
	pulumi.RegisterOutputType(PolicyStoreArrayOutput{})
	pulumi.RegisterOutputType(PolicyStoreMapOutput{})
}
