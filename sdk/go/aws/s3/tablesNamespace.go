// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an Amazon S3 Tables Namespace.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/s3"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleTablesTableBucket, err := s3.NewTablesTableBucket(ctx, "example", &s3.TablesTableBucketArgs{
//				Name: pulumi.String("example-bucket"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = s3.NewTablesNamespace(ctx, "example", &s3.TablesNamespaceArgs{
//				Namespace:      pulumi.String("example-namespace"),
//				TableBucketArn: exampleTablesTableBucket.Arn,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import S3 Tables Namespace using the `table_bucket_arn` and the value of `namespace`, separated by a semicolon (`;`). For example:
//
// ```sh
// $ pulumi import aws:s3/tablesNamespace:TablesNamespace example 'arn:aws:s3tables:us-west-2:123456789012:bucket/example-bucket;example-namespace'
// ```
type TablesNamespace struct {
	pulumi.CustomResourceState

	// Date and time when the namespace was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Account ID of the account that created the namespace.
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// Name of the namespace.
	// Must be between 1 and 255 characters in length.
	// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
	Namespace pulumi.StringOutput `pulumi:"namespace"`
	// Account ID of the account that owns the namespace.
	OwnerAccountId pulumi.StringOutput `pulumi:"ownerAccountId"`
	// ARN referencing the Table Bucket that contains this Namespace.
	TableBucketArn pulumi.StringOutput `pulumi:"tableBucketArn"`
}

// NewTablesNamespace registers a new resource with the given unique name, arguments, and options.
func NewTablesNamespace(ctx *pulumi.Context,
	name string, args *TablesNamespaceArgs, opts ...pulumi.ResourceOption) (*TablesNamespace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Namespace == nil {
		return nil, errors.New("invalid value for required argument 'Namespace'")
	}
	if args.TableBucketArn == nil {
		return nil, errors.New("invalid value for required argument 'TableBucketArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TablesNamespace
	err := ctx.RegisterResource("aws:s3/tablesNamespace:TablesNamespace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTablesNamespace gets an existing TablesNamespace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTablesNamespace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TablesNamespaceState, opts ...pulumi.ResourceOption) (*TablesNamespace, error) {
	var resource TablesNamespace
	err := ctx.ReadResource("aws:s3/tablesNamespace:TablesNamespace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TablesNamespace resources.
type tablesNamespaceState struct {
	// Date and time when the namespace was created.
	CreatedAt *string `pulumi:"createdAt"`
	// Account ID of the account that created the namespace.
	CreatedBy *string `pulumi:"createdBy"`
	// Name of the namespace.
	// Must be between 1 and 255 characters in length.
	// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
	Namespace *string `pulumi:"namespace"`
	// Account ID of the account that owns the namespace.
	OwnerAccountId *string `pulumi:"ownerAccountId"`
	// ARN referencing the Table Bucket that contains this Namespace.
	TableBucketArn *string `pulumi:"tableBucketArn"`
}

type TablesNamespaceState struct {
	// Date and time when the namespace was created.
	CreatedAt pulumi.StringPtrInput
	// Account ID of the account that created the namespace.
	CreatedBy pulumi.StringPtrInput
	// Name of the namespace.
	// Must be between 1 and 255 characters in length.
	// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
	Namespace pulumi.StringPtrInput
	// Account ID of the account that owns the namespace.
	OwnerAccountId pulumi.StringPtrInput
	// ARN referencing the Table Bucket that contains this Namespace.
	TableBucketArn pulumi.StringPtrInput
}

func (TablesNamespaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*tablesNamespaceState)(nil)).Elem()
}

type tablesNamespaceArgs struct {
	// Name of the namespace.
	// Must be between 1 and 255 characters in length.
	// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
	Namespace string `pulumi:"namespace"`
	// ARN referencing the Table Bucket that contains this Namespace.
	TableBucketArn string `pulumi:"tableBucketArn"`
}

// The set of arguments for constructing a TablesNamespace resource.
type TablesNamespaceArgs struct {
	// Name of the namespace.
	// Must be between 1 and 255 characters in length.
	// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
	Namespace pulumi.StringInput
	// ARN referencing the Table Bucket that contains this Namespace.
	TableBucketArn pulumi.StringInput
}

func (TablesNamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tablesNamespaceArgs)(nil)).Elem()
}

type TablesNamespaceInput interface {
	pulumi.Input

	ToTablesNamespaceOutput() TablesNamespaceOutput
	ToTablesNamespaceOutputWithContext(ctx context.Context) TablesNamespaceOutput
}

func (*TablesNamespace) ElementType() reflect.Type {
	return reflect.TypeOf((**TablesNamespace)(nil)).Elem()
}

func (i *TablesNamespace) ToTablesNamespaceOutput() TablesNamespaceOutput {
	return i.ToTablesNamespaceOutputWithContext(context.Background())
}

func (i *TablesNamespace) ToTablesNamespaceOutputWithContext(ctx context.Context) TablesNamespaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TablesNamespaceOutput)
}

// TablesNamespaceArrayInput is an input type that accepts TablesNamespaceArray and TablesNamespaceArrayOutput values.
// You can construct a concrete instance of `TablesNamespaceArrayInput` via:
//
//	TablesNamespaceArray{ TablesNamespaceArgs{...} }
type TablesNamespaceArrayInput interface {
	pulumi.Input

	ToTablesNamespaceArrayOutput() TablesNamespaceArrayOutput
	ToTablesNamespaceArrayOutputWithContext(context.Context) TablesNamespaceArrayOutput
}

type TablesNamespaceArray []TablesNamespaceInput

func (TablesNamespaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TablesNamespace)(nil)).Elem()
}

func (i TablesNamespaceArray) ToTablesNamespaceArrayOutput() TablesNamespaceArrayOutput {
	return i.ToTablesNamespaceArrayOutputWithContext(context.Background())
}

func (i TablesNamespaceArray) ToTablesNamespaceArrayOutputWithContext(ctx context.Context) TablesNamespaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TablesNamespaceArrayOutput)
}

// TablesNamespaceMapInput is an input type that accepts TablesNamespaceMap and TablesNamespaceMapOutput values.
// You can construct a concrete instance of `TablesNamespaceMapInput` via:
//
//	TablesNamespaceMap{ "key": TablesNamespaceArgs{...} }
type TablesNamespaceMapInput interface {
	pulumi.Input

	ToTablesNamespaceMapOutput() TablesNamespaceMapOutput
	ToTablesNamespaceMapOutputWithContext(context.Context) TablesNamespaceMapOutput
}

type TablesNamespaceMap map[string]TablesNamespaceInput

func (TablesNamespaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TablesNamespace)(nil)).Elem()
}

func (i TablesNamespaceMap) ToTablesNamespaceMapOutput() TablesNamespaceMapOutput {
	return i.ToTablesNamespaceMapOutputWithContext(context.Background())
}

func (i TablesNamespaceMap) ToTablesNamespaceMapOutputWithContext(ctx context.Context) TablesNamespaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TablesNamespaceMapOutput)
}

type TablesNamespaceOutput struct{ *pulumi.OutputState }

func (TablesNamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TablesNamespace)(nil)).Elem()
}

func (o TablesNamespaceOutput) ToTablesNamespaceOutput() TablesNamespaceOutput {
	return o
}

func (o TablesNamespaceOutput) ToTablesNamespaceOutputWithContext(ctx context.Context) TablesNamespaceOutput {
	return o
}

// Date and time when the namespace was created.
func (o TablesNamespaceOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TablesNamespace) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Account ID of the account that created the namespace.
func (o TablesNamespaceOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *TablesNamespace) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// Name of the namespace.
// Must be between 1 and 255 characters in length.
// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
func (o TablesNamespaceOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v *TablesNamespace) pulumi.StringOutput { return v.Namespace }).(pulumi.StringOutput)
}

// Account ID of the account that owns the namespace.
func (o TablesNamespaceOutput) OwnerAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *TablesNamespace) pulumi.StringOutput { return v.OwnerAccountId }).(pulumi.StringOutput)
}

// ARN referencing the Table Bucket that contains this Namespace.
func (o TablesNamespaceOutput) TableBucketArn() pulumi.StringOutput {
	return o.ApplyT(func(v *TablesNamespace) pulumi.StringOutput { return v.TableBucketArn }).(pulumi.StringOutput)
}

type TablesNamespaceArrayOutput struct{ *pulumi.OutputState }

func (TablesNamespaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TablesNamespace)(nil)).Elem()
}

func (o TablesNamespaceArrayOutput) ToTablesNamespaceArrayOutput() TablesNamespaceArrayOutput {
	return o
}

func (o TablesNamespaceArrayOutput) ToTablesNamespaceArrayOutputWithContext(ctx context.Context) TablesNamespaceArrayOutput {
	return o
}

func (o TablesNamespaceArrayOutput) Index(i pulumi.IntInput) TablesNamespaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TablesNamespace {
		return vs[0].([]*TablesNamespace)[vs[1].(int)]
	}).(TablesNamespaceOutput)
}

type TablesNamespaceMapOutput struct{ *pulumi.OutputState }

func (TablesNamespaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TablesNamespace)(nil)).Elem()
}

func (o TablesNamespaceMapOutput) ToTablesNamespaceMapOutput() TablesNamespaceMapOutput {
	return o
}

func (o TablesNamespaceMapOutput) ToTablesNamespaceMapOutputWithContext(ctx context.Context) TablesNamespaceMapOutput {
	return o
}

func (o TablesNamespaceMapOutput) MapIndex(k pulumi.StringInput) TablesNamespaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TablesNamespace {
		return vs[0].(map[string]*TablesNamespace)[vs[1].(string)]
	}).(TablesNamespaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TablesNamespaceInput)(nil)).Elem(), &TablesNamespace{})
	pulumi.RegisterInputType(reflect.TypeOf((*TablesNamespaceArrayInput)(nil)).Elem(), TablesNamespaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TablesNamespaceMapInput)(nil)).Elem(), TablesNamespaceMap{})
	pulumi.RegisterOutputType(TablesNamespaceOutput{})
	pulumi.RegisterOutputType(TablesNamespaceArrayOutput{})
	pulumi.RegisterOutputType(TablesNamespaceMapOutput{})
}
