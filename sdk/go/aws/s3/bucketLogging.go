// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an S3 bucket (server access) logging resource. For more information, see [Logging requests using server access logging](https://docs.aws.amazon.com/AmazonS3/latest/userguide/ServerLogs.html)
// in the AWS S3 User Guide.
//
// > **Note:** Amazon S3 supports server access logging, AWS CloudTrail, or a combination of both. Refer to the [Logging options for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/logging-with-S3.html)
// to decide which method meets your requirements.
//
// > This resource cannot be used with S3 directory buckets.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/s3"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := s3.NewBucket(ctx, "example", &s3.BucketArgs{
//				Bucket: pulumi.String("my-tf-example-bucket"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = s3.NewBucketAcl(ctx, "example", &s3.BucketAclArgs{
//				Bucket: example.ID(),
//				Acl:    pulumi.String("private"),
//			})
//			if err != nil {
//				return err
//			}
//			logBucket, err := s3.NewBucket(ctx, "log_bucket", &s3.BucketArgs{
//				Bucket: pulumi.String("my-tf-log-bucket"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = s3.NewBucketAcl(ctx, "log_bucket_acl", &s3.BucketAclArgs{
//				Bucket: logBucket.ID(),
//				Acl:    pulumi.String("log-delivery-write"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = s3.NewBucketLogging(ctx, "example", &s3.BucketLoggingArgs{
//				Bucket:       example.ID(),
//				TargetBucket: logBucket.ID(),
//				TargetPrefix: pulumi.String("log/"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// If the owner (account ID) of the source bucket differs from the account used to configure the AWS Provider, import using the `bucket` and `expected_bucket_owner` separated by a comma (`,`):
//
// __Using `pulumi import` to import__ S3 bucket logging using the `bucket` or using the `bucket` and `expected_bucket_owner` separated by a comma (`,`). For example:
//
// If the owner (account ID) of the source bucket is the same account used to configure the AWS Provider, import using the `bucket`:
//
// ```sh
// $ pulumi import aws:s3/bucketLogging:BucketLogging example bucket-name
// ```
// If the owner (account ID) of the source bucket differs from the account used to configure the AWS Provider, import using the `bucket` and `expected_bucket_owner` separated by a comma (`,`):
//
// ```sh
// $ pulumi import aws:s3/bucketLogging:BucketLogging example bucket-name,123456789012
// ```
type BucketLogging struct {
	pulumi.CustomResourceState

	// Name of the bucket.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// Account ID of the expected bucket owner.
	ExpectedBucketOwner pulumi.StringPtrOutput `pulumi:"expectedBucketOwner"`
	// Name of the bucket where you want Amazon S3 to store server access logs.
	TargetBucket pulumi.StringOutput `pulumi:"targetBucket"`
	// Set of configuration blocks with information for granting permissions. See below.
	TargetGrants BucketLoggingTargetGrantArrayOutput `pulumi:"targetGrants"`
	// Amazon S3 key format for log objects. See below.
	TargetObjectKeyFormat BucketLoggingTargetObjectKeyFormatPtrOutput `pulumi:"targetObjectKeyFormat"`
	// Prefix for all log object keys.
	TargetPrefix pulumi.StringOutput `pulumi:"targetPrefix"`
}

// NewBucketLogging registers a new resource with the given unique name, arguments, and options.
func NewBucketLogging(ctx *pulumi.Context,
	name string, args *BucketLoggingArgs, opts ...pulumi.ResourceOption) (*BucketLogging, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.TargetBucket == nil {
		return nil, errors.New("invalid value for required argument 'TargetBucket'")
	}
	if args.TargetPrefix == nil {
		return nil, errors.New("invalid value for required argument 'TargetPrefix'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("aws:s3/bucketLoggingV2:BucketLoggingV2"),
		},
		{
			Type: pulumi.String("aws:s3/bucketLoggingV2:BucketLoggingV2"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BucketLogging
	err := ctx.RegisterResource("aws:s3/bucketLogging:BucketLogging", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketLogging gets an existing BucketLogging resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketLogging(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketLoggingState, opts ...pulumi.ResourceOption) (*BucketLogging, error) {
	var resource BucketLogging
	err := ctx.ReadResource("aws:s3/bucketLogging:BucketLogging", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketLogging resources.
type bucketLoggingState struct {
	// Name of the bucket.
	Bucket *string `pulumi:"bucket"`
	// Account ID of the expected bucket owner.
	ExpectedBucketOwner *string `pulumi:"expectedBucketOwner"`
	// Name of the bucket where you want Amazon S3 to store server access logs.
	TargetBucket *string `pulumi:"targetBucket"`
	// Set of configuration blocks with information for granting permissions. See below.
	TargetGrants []BucketLoggingTargetGrant `pulumi:"targetGrants"`
	// Amazon S3 key format for log objects. See below.
	TargetObjectKeyFormat *BucketLoggingTargetObjectKeyFormat `pulumi:"targetObjectKeyFormat"`
	// Prefix for all log object keys.
	TargetPrefix *string `pulumi:"targetPrefix"`
}

type BucketLoggingState struct {
	// Name of the bucket.
	Bucket pulumi.StringPtrInput
	// Account ID of the expected bucket owner.
	ExpectedBucketOwner pulumi.StringPtrInput
	// Name of the bucket where you want Amazon S3 to store server access logs.
	TargetBucket pulumi.StringPtrInput
	// Set of configuration blocks with information for granting permissions. See below.
	TargetGrants BucketLoggingTargetGrantArrayInput
	// Amazon S3 key format for log objects. See below.
	TargetObjectKeyFormat BucketLoggingTargetObjectKeyFormatPtrInput
	// Prefix for all log object keys.
	TargetPrefix pulumi.StringPtrInput
}

func (BucketLoggingState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketLoggingState)(nil)).Elem()
}

type bucketLoggingArgs struct {
	// Name of the bucket.
	Bucket string `pulumi:"bucket"`
	// Account ID of the expected bucket owner.
	ExpectedBucketOwner *string `pulumi:"expectedBucketOwner"`
	// Name of the bucket where you want Amazon S3 to store server access logs.
	TargetBucket string `pulumi:"targetBucket"`
	// Set of configuration blocks with information for granting permissions. See below.
	TargetGrants []BucketLoggingTargetGrant `pulumi:"targetGrants"`
	// Amazon S3 key format for log objects. See below.
	TargetObjectKeyFormat *BucketLoggingTargetObjectKeyFormat `pulumi:"targetObjectKeyFormat"`
	// Prefix for all log object keys.
	TargetPrefix string `pulumi:"targetPrefix"`
}

// The set of arguments for constructing a BucketLogging resource.
type BucketLoggingArgs struct {
	// Name of the bucket.
	Bucket pulumi.StringInput
	// Account ID of the expected bucket owner.
	ExpectedBucketOwner pulumi.StringPtrInput
	// Name of the bucket where you want Amazon S3 to store server access logs.
	TargetBucket pulumi.StringInput
	// Set of configuration blocks with information for granting permissions. See below.
	TargetGrants BucketLoggingTargetGrantArrayInput
	// Amazon S3 key format for log objects. See below.
	TargetObjectKeyFormat BucketLoggingTargetObjectKeyFormatPtrInput
	// Prefix for all log object keys.
	TargetPrefix pulumi.StringInput
}

func (BucketLoggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketLoggingArgs)(nil)).Elem()
}

type BucketLoggingInput interface {
	pulumi.Input

	ToBucketLoggingOutput() BucketLoggingOutput
	ToBucketLoggingOutputWithContext(ctx context.Context) BucketLoggingOutput
}

func (*BucketLogging) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketLogging)(nil)).Elem()
}

func (i *BucketLogging) ToBucketLoggingOutput() BucketLoggingOutput {
	return i.ToBucketLoggingOutputWithContext(context.Background())
}

func (i *BucketLogging) ToBucketLoggingOutputWithContext(ctx context.Context) BucketLoggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketLoggingOutput)
}

// BucketLoggingArrayInput is an input type that accepts BucketLoggingArray and BucketLoggingArrayOutput values.
// You can construct a concrete instance of `BucketLoggingArrayInput` via:
//
//	BucketLoggingArray{ BucketLoggingArgs{...} }
type BucketLoggingArrayInput interface {
	pulumi.Input

	ToBucketLoggingArrayOutput() BucketLoggingArrayOutput
	ToBucketLoggingArrayOutputWithContext(context.Context) BucketLoggingArrayOutput
}

type BucketLoggingArray []BucketLoggingInput

func (BucketLoggingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketLogging)(nil)).Elem()
}

func (i BucketLoggingArray) ToBucketLoggingArrayOutput() BucketLoggingArrayOutput {
	return i.ToBucketLoggingArrayOutputWithContext(context.Background())
}

func (i BucketLoggingArray) ToBucketLoggingArrayOutputWithContext(ctx context.Context) BucketLoggingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketLoggingArrayOutput)
}

// BucketLoggingMapInput is an input type that accepts BucketLoggingMap and BucketLoggingMapOutput values.
// You can construct a concrete instance of `BucketLoggingMapInput` via:
//
//	BucketLoggingMap{ "key": BucketLoggingArgs{...} }
type BucketLoggingMapInput interface {
	pulumi.Input

	ToBucketLoggingMapOutput() BucketLoggingMapOutput
	ToBucketLoggingMapOutputWithContext(context.Context) BucketLoggingMapOutput
}

type BucketLoggingMap map[string]BucketLoggingInput

func (BucketLoggingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketLogging)(nil)).Elem()
}

func (i BucketLoggingMap) ToBucketLoggingMapOutput() BucketLoggingMapOutput {
	return i.ToBucketLoggingMapOutputWithContext(context.Background())
}

func (i BucketLoggingMap) ToBucketLoggingMapOutputWithContext(ctx context.Context) BucketLoggingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketLoggingMapOutput)
}

type BucketLoggingOutput struct{ *pulumi.OutputState }

func (BucketLoggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketLogging)(nil)).Elem()
}

func (o BucketLoggingOutput) ToBucketLoggingOutput() BucketLoggingOutput {
	return o
}

func (o BucketLoggingOutput) ToBucketLoggingOutputWithContext(ctx context.Context) BucketLoggingOutput {
	return o
}

// Name of the bucket.
func (o BucketLoggingOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketLogging) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// Account ID of the expected bucket owner.
func (o BucketLoggingOutput) ExpectedBucketOwner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketLogging) pulumi.StringPtrOutput { return v.ExpectedBucketOwner }).(pulumi.StringPtrOutput)
}

// Name of the bucket where you want Amazon S3 to store server access logs.
func (o BucketLoggingOutput) TargetBucket() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketLogging) pulumi.StringOutput { return v.TargetBucket }).(pulumi.StringOutput)
}

// Set of configuration blocks with information for granting permissions. See below.
func (o BucketLoggingOutput) TargetGrants() BucketLoggingTargetGrantArrayOutput {
	return o.ApplyT(func(v *BucketLogging) BucketLoggingTargetGrantArrayOutput { return v.TargetGrants }).(BucketLoggingTargetGrantArrayOutput)
}

// Amazon S3 key format for log objects. See below.
func (o BucketLoggingOutput) TargetObjectKeyFormat() BucketLoggingTargetObjectKeyFormatPtrOutput {
	return o.ApplyT(func(v *BucketLogging) BucketLoggingTargetObjectKeyFormatPtrOutput { return v.TargetObjectKeyFormat }).(BucketLoggingTargetObjectKeyFormatPtrOutput)
}

// Prefix for all log object keys.
func (o BucketLoggingOutput) TargetPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketLogging) pulumi.StringOutput { return v.TargetPrefix }).(pulumi.StringOutput)
}

type BucketLoggingArrayOutput struct{ *pulumi.OutputState }

func (BucketLoggingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketLogging)(nil)).Elem()
}

func (o BucketLoggingArrayOutput) ToBucketLoggingArrayOutput() BucketLoggingArrayOutput {
	return o
}

func (o BucketLoggingArrayOutput) ToBucketLoggingArrayOutputWithContext(ctx context.Context) BucketLoggingArrayOutput {
	return o
}

func (o BucketLoggingArrayOutput) Index(i pulumi.IntInput) BucketLoggingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BucketLogging {
		return vs[0].([]*BucketLogging)[vs[1].(int)]
	}).(BucketLoggingOutput)
}

type BucketLoggingMapOutput struct{ *pulumi.OutputState }

func (BucketLoggingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketLogging)(nil)).Elem()
}

func (o BucketLoggingMapOutput) ToBucketLoggingMapOutput() BucketLoggingMapOutput {
	return o
}

func (o BucketLoggingMapOutput) ToBucketLoggingMapOutputWithContext(ctx context.Context) BucketLoggingMapOutput {
	return o
}

func (o BucketLoggingMapOutput) MapIndex(k pulumi.StringInput) BucketLoggingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BucketLogging {
		return vs[0].(map[string]*BucketLogging)[vs[1].(string)]
	}).(BucketLoggingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BucketLoggingInput)(nil)).Elem(), &BucketLogging{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketLoggingArrayInput)(nil)).Elem(), BucketLoggingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketLoggingMapInput)(nil)).Elem(), BucketLoggingMap{})
	pulumi.RegisterOutputType(BucketLoggingOutput{})
	pulumi.RegisterOutputType(BucketLoggingArrayOutput{})
	pulumi.RegisterOutputType(BucketLoggingMapOutput{})
}
