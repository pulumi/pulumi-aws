// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BucketLoggingV2 struct {
	pulumi.CustomResourceState

	Bucket              pulumi.StringOutput                   `pulumi:"bucket"`
	ExpectedBucketOwner pulumi.StringPtrOutput                `pulumi:"expectedBucketOwner"`
	TargetBucket        pulumi.StringOutput                   `pulumi:"targetBucket"`
	TargetGrants        BucketLoggingV2TargetGrantArrayOutput `pulumi:"targetGrants"`
	TargetPrefix        pulumi.StringOutput                   `pulumi:"targetPrefix"`
}

// NewBucketLoggingV2 registers a new resource with the given unique name, arguments, and options.
func NewBucketLoggingV2(ctx *pulumi.Context,
	name string, args *BucketLoggingV2Args, opts ...pulumi.ResourceOption) (*BucketLoggingV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.TargetBucket == nil {
		return nil, errors.New("invalid value for required argument 'TargetBucket'")
	}
	if args.TargetPrefix == nil {
		return nil, errors.New("invalid value for required argument 'TargetPrefix'")
	}
	var resource BucketLoggingV2
	err := ctx.RegisterResource("aws:s3/bucketLoggingV2:BucketLoggingV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketLoggingV2 gets an existing BucketLoggingV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketLoggingV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketLoggingV2State, opts ...pulumi.ResourceOption) (*BucketLoggingV2, error) {
	var resource BucketLoggingV2
	err := ctx.ReadResource("aws:s3/bucketLoggingV2:BucketLoggingV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketLoggingV2 resources.
type bucketLoggingV2State struct {
	Bucket              *string                      `pulumi:"bucket"`
	ExpectedBucketOwner *string                      `pulumi:"expectedBucketOwner"`
	TargetBucket        *string                      `pulumi:"targetBucket"`
	TargetGrants        []BucketLoggingV2TargetGrant `pulumi:"targetGrants"`
	TargetPrefix        *string                      `pulumi:"targetPrefix"`
}

type BucketLoggingV2State struct {
	Bucket              pulumi.StringPtrInput
	ExpectedBucketOwner pulumi.StringPtrInput
	TargetBucket        pulumi.StringPtrInput
	TargetGrants        BucketLoggingV2TargetGrantArrayInput
	TargetPrefix        pulumi.StringPtrInput
}

func (BucketLoggingV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketLoggingV2State)(nil)).Elem()
}

type bucketLoggingV2Args struct {
	Bucket              string                       `pulumi:"bucket"`
	ExpectedBucketOwner *string                      `pulumi:"expectedBucketOwner"`
	TargetBucket        string                       `pulumi:"targetBucket"`
	TargetGrants        []BucketLoggingV2TargetGrant `pulumi:"targetGrants"`
	TargetPrefix        string                       `pulumi:"targetPrefix"`
}

// The set of arguments for constructing a BucketLoggingV2 resource.
type BucketLoggingV2Args struct {
	Bucket              pulumi.StringInput
	ExpectedBucketOwner pulumi.StringPtrInput
	TargetBucket        pulumi.StringInput
	TargetGrants        BucketLoggingV2TargetGrantArrayInput
	TargetPrefix        pulumi.StringInput
}

func (BucketLoggingV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketLoggingV2Args)(nil)).Elem()
}

type BucketLoggingV2Input interface {
	pulumi.Input

	ToBucketLoggingV2Output() BucketLoggingV2Output
	ToBucketLoggingV2OutputWithContext(ctx context.Context) BucketLoggingV2Output
}

func (*BucketLoggingV2) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketLoggingV2)(nil)).Elem()
}

func (i *BucketLoggingV2) ToBucketLoggingV2Output() BucketLoggingV2Output {
	return i.ToBucketLoggingV2OutputWithContext(context.Background())
}

func (i *BucketLoggingV2) ToBucketLoggingV2OutputWithContext(ctx context.Context) BucketLoggingV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(BucketLoggingV2Output)
}

// BucketLoggingV2ArrayInput is an input type that accepts BucketLoggingV2Array and BucketLoggingV2ArrayOutput values.
// You can construct a concrete instance of `BucketLoggingV2ArrayInput` via:
//
//	BucketLoggingV2Array{ BucketLoggingV2Args{...} }
type BucketLoggingV2ArrayInput interface {
	pulumi.Input

	ToBucketLoggingV2ArrayOutput() BucketLoggingV2ArrayOutput
	ToBucketLoggingV2ArrayOutputWithContext(context.Context) BucketLoggingV2ArrayOutput
}

type BucketLoggingV2Array []BucketLoggingV2Input

func (BucketLoggingV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketLoggingV2)(nil)).Elem()
}

func (i BucketLoggingV2Array) ToBucketLoggingV2ArrayOutput() BucketLoggingV2ArrayOutput {
	return i.ToBucketLoggingV2ArrayOutputWithContext(context.Background())
}

func (i BucketLoggingV2Array) ToBucketLoggingV2ArrayOutputWithContext(ctx context.Context) BucketLoggingV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketLoggingV2ArrayOutput)
}

// BucketLoggingV2MapInput is an input type that accepts BucketLoggingV2Map and BucketLoggingV2MapOutput values.
// You can construct a concrete instance of `BucketLoggingV2MapInput` via:
//
//	BucketLoggingV2Map{ "key": BucketLoggingV2Args{...} }
type BucketLoggingV2MapInput interface {
	pulumi.Input

	ToBucketLoggingV2MapOutput() BucketLoggingV2MapOutput
	ToBucketLoggingV2MapOutputWithContext(context.Context) BucketLoggingV2MapOutput
}

type BucketLoggingV2Map map[string]BucketLoggingV2Input

func (BucketLoggingV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketLoggingV2)(nil)).Elem()
}

func (i BucketLoggingV2Map) ToBucketLoggingV2MapOutput() BucketLoggingV2MapOutput {
	return i.ToBucketLoggingV2MapOutputWithContext(context.Background())
}

func (i BucketLoggingV2Map) ToBucketLoggingV2MapOutputWithContext(ctx context.Context) BucketLoggingV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketLoggingV2MapOutput)
}

type BucketLoggingV2Output struct{ *pulumi.OutputState }

func (BucketLoggingV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketLoggingV2)(nil)).Elem()
}

func (o BucketLoggingV2Output) ToBucketLoggingV2Output() BucketLoggingV2Output {
	return o
}

func (o BucketLoggingV2Output) ToBucketLoggingV2OutputWithContext(ctx context.Context) BucketLoggingV2Output {
	return o
}

func (o BucketLoggingV2Output) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketLoggingV2) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

func (o BucketLoggingV2Output) ExpectedBucketOwner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketLoggingV2) pulumi.StringPtrOutput { return v.ExpectedBucketOwner }).(pulumi.StringPtrOutput)
}

func (o BucketLoggingV2Output) TargetBucket() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketLoggingV2) pulumi.StringOutput { return v.TargetBucket }).(pulumi.StringOutput)
}

func (o BucketLoggingV2Output) TargetGrants() BucketLoggingV2TargetGrantArrayOutput {
	return o.ApplyT(func(v *BucketLoggingV2) BucketLoggingV2TargetGrantArrayOutput { return v.TargetGrants }).(BucketLoggingV2TargetGrantArrayOutput)
}

func (o BucketLoggingV2Output) TargetPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketLoggingV2) pulumi.StringOutput { return v.TargetPrefix }).(pulumi.StringOutput)
}

type BucketLoggingV2ArrayOutput struct{ *pulumi.OutputState }

func (BucketLoggingV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketLoggingV2)(nil)).Elem()
}

func (o BucketLoggingV2ArrayOutput) ToBucketLoggingV2ArrayOutput() BucketLoggingV2ArrayOutput {
	return o
}

func (o BucketLoggingV2ArrayOutput) ToBucketLoggingV2ArrayOutputWithContext(ctx context.Context) BucketLoggingV2ArrayOutput {
	return o
}

func (o BucketLoggingV2ArrayOutput) Index(i pulumi.IntInput) BucketLoggingV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BucketLoggingV2 {
		return vs[0].([]*BucketLoggingV2)[vs[1].(int)]
	}).(BucketLoggingV2Output)
}

type BucketLoggingV2MapOutput struct{ *pulumi.OutputState }

func (BucketLoggingV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketLoggingV2)(nil)).Elem()
}

func (o BucketLoggingV2MapOutput) ToBucketLoggingV2MapOutput() BucketLoggingV2MapOutput {
	return o
}

func (o BucketLoggingV2MapOutput) ToBucketLoggingV2MapOutputWithContext(ctx context.Context) BucketLoggingV2MapOutput {
	return o
}

func (o BucketLoggingV2MapOutput) MapIndex(k pulumi.StringInput) BucketLoggingV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BucketLoggingV2 {
		return vs[0].(map[string]*BucketLoggingV2)[vs[1].(string)]
	}).(BucketLoggingV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BucketLoggingV2Input)(nil)).Elem(), &BucketLoggingV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketLoggingV2ArrayInput)(nil)).Elem(), BucketLoggingV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketLoggingV2MapInput)(nil)).Elem(), BucketLoggingV2Map{})
	pulumi.RegisterOutputType(BucketLoggingV2Output{})
	pulumi.RegisterOutputType(BucketLoggingV2ArrayOutput{})
	pulumi.RegisterOutputType(BucketLoggingV2MapOutput{})
}
