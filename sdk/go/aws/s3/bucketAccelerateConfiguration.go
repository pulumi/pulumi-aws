// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an S3 bucket accelerate configuration resource. See the [Requirements for using Transfer Acceleration](https://docs.aws.amazon.com/AmazonS3/latest/userguide/transfer-acceleration.html#transfer-acceleration-requirements) for more details.
//
// > This resource cannot be used with S3 directory buckets.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/s3"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			mybucket, err := s3.NewBucket(ctx, "mybucket", &s3.BucketArgs{
//				Bucket: pulumi.String("mybucket"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = s3.NewBucketAccelerateConfiguration(ctx, "example", &s3.BucketAccelerateConfigurationArgs{
//				Bucket: mybucket.ID(),
//				Status: pulumi.String("Enabled"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// If the owner (account ID) of the source bucket differs from the account used to configure the AWS Provider, import using the `bucket` and `expected_bucket_owner` separated by a comma (`,`):
//
// __Using `pulumi import` to import.__ For example:
//
// If the owner (account ID) of the source bucket is the same account used to configure the AWS Provider, import using the `bucket`:
//
// ```sh
// $ pulumi import aws:s3/bucketAccelerateConfiguration:BucketAccelerateConfiguration example bucket-name
// ```
// If the owner (account ID) of the source bucket differs from the account used to configure the AWS Provider, import using the `bucket` and `expected_bucket_owner` separated by a comma (`,`):
//
// ```sh
// $ pulumi import aws:s3/bucketAccelerateConfiguration:BucketAccelerateConfiguration example bucket-name,123456789012
// ```
type BucketAccelerateConfiguration struct {
	pulumi.CustomResourceState

	// Name of the bucket.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// Account ID of the expected bucket owner.
	ExpectedBucketOwner pulumi.StringPtrOutput `pulumi:"expectedBucketOwner"`
	// The AWS Region to use for API operations. Overrides the Region set in the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
	// Transfer acceleration state of the bucket. Valid values: `Enabled`, `Suspended`.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewBucketAccelerateConfiguration registers a new resource with the given unique name, arguments, and options.
func NewBucketAccelerateConfiguration(ctx *pulumi.Context,
	name string, args *BucketAccelerateConfigurationArgs, opts ...pulumi.ResourceOption) (*BucketAccelerateConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("aws:s3/bucketAccelerateConfigurationV2:BucketAccelerateConfigurationV2"),
		},
		{
			Type: pulumi.String("aws:s3/bucketAccelerateConfigurationV2:BucketAccelerateConfigurationV2"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BucketAccelerateConfiguration
	err := ctx.RegisterResource("aws:s3/bucketAccelerateConfiguration:BucketAccelerateConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketAccelerateConfiguration gets an existing BucketAccelerateConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketAccelerateConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketAccelerateConfigurationState, opts ...pulumi.ResourceOption) (*BucketAccelerateConfiguration, error) {
	var resource BucketAccelerateConfiguration
	err := ctx.ReadResource("aws:s3/bucketAccelerateConfiguration:BucketAccelerateConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketAccelerateConfiguration resources.
type bucketAccelerateConfigurationState struct {
	// Name of the bucket.
	Bucket *string `pulumi:"bucket"`
	// Account ID of the expected bucket owner.
	ExpectedBucketOwner *string `pulumi:"expectedBucketOwner"`
	// The AWS Region to use for API operations. Overrides the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// Transfer acceleration state of the bucket. Valid values: `Enabled`, `Suspended`.
	Status *string `pulumi:"status"`
}

type BucketAccelerateConfigurationState struct {
	// Name of the bucket.
	Bucket pulumi.StringPtrInput
	// Account ID of the expected bucket owner.
	ExpectedBucketOwner pulumi.StringPtrInput
	// The AWS Region to use for API operations. Overrides the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// Transfer acceleration state of the bucket. Valid values: `Enabled`, `Suspended`.
	Status pulumi.StringPtrInput
}

func (BucketAccelerateConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketAccelerateConfigurationState)(nil)).Elem()
}

type bucketAccelerateConfigurationArgs struct {
	// Name of the bucket.
	Bucket string `pulumi:"bucket"`
	// Account ID of the expected bucket owner.
	ExpectedBucketOwner *string `pulumi:"expectedBucketOwner"`
	// The AWS Region to use for API operations. Overrides the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// Transfer acceleration state of the bucket. Valid values: `Enabled`, `Suspended`.
	Status string `pulumi:"status"`
}

// The set of arguments for constructing a BucketAccelerateConfiguration resource.
type BucketAccelerateConfigurationArgs struct {
	// Name of the bucket.
	Bucket pulumi.StringInput
	// Account ID of the expected bucket owner.
	ExpectedBucketOwner pulumi.StringPtrInput
	// The AWS Region to use for API operations. Overrides the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// Transfer acceleration state of the bucket. Valid values: `Enabled`, `Suspended`.
	Status pulumi.StringInput
}

func (BucketAccelerateConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketAccelerateConfigurationArgs)(nil)).Elem()
}

type BucketAccelerateConfigurationInput interface {
	pulumi.Input

	ToBucketAccelerateConfigurationOutput() BucketAccelerateConfigurationOutput
	ToBucketAccelerateConfigurationOutputWithContext(ctx context.Context) BucketAccelerateConfigurationOutput
}

func (*BucketAccelerateConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketAccelerateConfiguration)(nil)).Elem()
}

func (i *BucketAccelerateConfiguration) ToBucketAccelerateConfigurationOutput() BucketAccelerateConfigurationOutput {
	return i.ToBucketAccelerateConfigurationOutputWithContext(context.Background())
}

func (i *BucketAccelerateConfiguration) ToBucketAccelerateConfigurationOutputWithContext(ctx context.Context) BucketAccelerateConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketAccelerateConfigurationOutput)
}

// BucketAccelerateConfigurationArrayInput is an input type that accepts BucketAccelerateConfigurationArray and BucketAccelerateConfigurationArrayOutput values.
// You can construct a concrete instance of `BucketAccelerateConfigurationArrayInput` via:
//
//	BucketAccelerateConfigurationArray{ BucketAccelerateConfigurationArgs{...} }
type BucketAccelerateConfigurationArrayInput interface {
	pulumi.Input

	ToBucketAccelerateConfigurationArrayOutput() BucketAccelerateConfigurationArrayOutput
	ToBucketAccelerateConfigurationArrayOutputWithContext(context.Context) BucketAccelerateConfigurationArrayOutput
}

type BucketAccelerateConfigurationArray []BucketAccelerateConfigurationInput

func (BucketAccelerateConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketAccelerateConfiguration)(nil)).Elem()
}

func (i BucketAccelerateConfigurationArray) ToBucketAccelerateConfigurationArrayOutput() BucketAccelerateConfigurationArrayOutput {
	return i.ToBucketAccelerateConfigurationArrayOutputWithContext(context.Background())
}

func (i BucketAccelerateConfigurationArray) ToBucketAccelerateConfigurationArrayOutputWithContext(ctx context.Context) BucketAccelerateConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketAccelerateConfigurationArrayOutput)
}

// BucketAccelerateConfigurationMapInput is an input type that accepts BucketAccelerateConfigurationMap and BucketAccelerateConfigurationMapOutput values.
// You can construct a concrete instance of `BucketAccelerateConfigurationMapInput` via:
//
//	BucketAccelerateConfigurationMap{ "key": BucketAccelerateConfigurationArgs{...} }
type BucketAccelerateConfigurationMapInput interface {
	pulumi.Input

	ToBucketAccelerateConfigurationMapOutput() BucketAccelerateConfigurationMapOutput
	ToBucketAccelerateConfigurationMapOutputWithContext(context.Context) BucketAccelerateConfigurationMapOutput
}

type BucketAccelerateConfigurationMap map[string]BucketAccelerateConfigurationInput

func (BucketAccelerateConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketAccelerateConfiguration)(nil)).Elem()
}

func (i BucketAccelerateConfigurationMap) ToBucketAccelerateConfigurationMapOutput() BucketAccelerateConfigurationMapOutput {
	return i.ToBucketAccelerateConfigurationMapOutputWithContext(context.Background())
}

func (i BucketAccelerateConfigurationMap) ToBucketAccelerateConfigurationMapOutputWithContext(ctx context.Context) BucketAccelerateConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketAccelerateConfigurationMapOutput)
}

type BucketAccelerateConfigurationOutput struct{ *pulumi.OutputState }

func (BucketAccelerateConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketAccelerateConfiguration)(nil)).Elem()
}

func (o BucketAccelerateConfigurationOutput) ToBucketAccelerateConfigurationOutput() BucketAccelerateConfigurationOutput {
	return o
}

func (o BucketAccelerateConfigurationOutput) ToBucketAccelerateConfigurationOutputWithContext(ctx context.Context) BucketAccelerateConfigurationOutput {
	return o
}

// Name of the bucket.
func (o BucketAccelerateConfigurationOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketAccelerateConfiguration) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// Account ID of the expected bucket owner.
func (o BucketAccelerateConfigurationOutput) ExpectedBucketOwner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketAccelerateConfiguration) pulumi.StringPtrOutput { return v.ExpectedBucketOwner }).(pulumi.StringPtrOutput)
}

// The AWS Region to use for API operations. Overrides the Region set in the provider configuration.
func (o BucketAccelerateConfigurationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketAccelerateConfiguration) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Transfer acceleration state of the bucket. Valid values: `Enabled`, `Suspended`.
func (o BucketAccelerateConfigurationOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketAccelerateConfiguration) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type BucketAccelerateConfigurationArrayOutput struct{ *pulumi.OutputState }

func (BucketAccelerateConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketAccelerateConfiguration)(nil)).Elem()
}

func (o BucketAccelerateConfigurationArrayOutput) ToBucketAccelerateConfigurationArrayOutput() BucketAccelerateConfigurationArrayOutput {
	return o
}

func (o BucketAccelerateConfigurationArrayOutput) ToBucketAccelerateConfigurationArrayOutputWithContext(ctx context.Context) BucketAccelerateConfigurationArrayOutput {
	return o
}

func (o BucketAccelerateConfigurationArrayOutput) Index(i pulumi.IntInput) BucketAccelerateConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BucketAccelerateConfiguration {
		return vs[0].([]*BucketAccelerateConfiguration)[vs[1].(int)]
	}).(BucketAccelerateConfigurationOutput)
}

type BucketAccelerateConfigurationMapOutput struct{ *pulumi.OutputState }

func (BucketAccelerateConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketAccelerateConfiguration)(nil)).Elem()
}

func (o BucketAccelerateConfigurationMapOutput) ToBucketAccelerateConfigurationMapOutput() BucketAccelerateConfigurationMapOutput {
	return o
}

func (o BucketAccelerateConfigurationMapOutput) ToBucketAccelerateConfigurationMapOutputWithContext(ctx context.Context) BucketAccelerateConfigurationMapOutput {
	return o
}

func (o BucketAccelerateConfigurationMapOutput) MapIndex(k pulumi.StringInput) BucketAccelerateConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BucketAccelerateConfiguration {
		return vs[0].(map[string]*BucketAccelerateConfiguration)[vs[1].(string)]
	}).(BucketAccelerateConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BucketAccelerateConfigurationInput)(nil)).Elem(), &BucketAccelerateConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketAccelerateConfigurationArrayInput)(nil)).Elem(), BucketAccelerateConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketAccelerateConfigurationMapInput)(nil)).Elem(), BucketAccelerateConfigurationMap{})
	pulumi.RegisterOutputType(BucketAccelerateConfigurationOutput{})
	pulumi.RegisterOutputType(BucketAccelerateConfigurationArrayOutput{})
	pulumi.RegisterOutputType(BucketAccelerateConfigurationMapOutput{})
}
