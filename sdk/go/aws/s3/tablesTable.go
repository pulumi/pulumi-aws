// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an Amazon S3 Tables Table.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/s3"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleTablesTableBucket, err := s3.NewTablesTableBucket(ctx, "example", &s3.TablesTableBucketArgs{
//				Name: pulumi.String("example-bucket"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleTablesNamespace, err := s3.NewTablesNamespace(ctx, "example", &s3.TablesNamespaceArgs{
//				Namespace:      pulumi.String("example-namespace"),
//				TableBucketArn: exampleTablesTableBucket.Arn,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = s3.NewTablesTable(ctx, "example", &s3.TablesTableArgs{
//				Name:           pulumi.String("example-table"),
//				Namespace:      exampleTablesNamespace,
//				TableBucketArn: exampleTablesNamespace.TableBucketArn,
//				Format:         pulumi.String("ICEBERG"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import S3 Tables Table using the `table_bucket_arn`, the value of `namespace`, and the value of `name`, separated by a semicolon (`;`). For example:
//
// ```sh
// $ pulumi import aws:s3/tablesTable:TablesTable example 'arn:aws:s3tables:us-west-2:123456789012:bucket/example-bucket;example-namespace;example-table'
// ```
type TablesTable struct {
	pulumi.CustomResourceState

	// ARN of the table.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Date and time when the namespace was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Account ID of the account that created the namespace.
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// Format of the table.
	// Must be `ICEBERG`.
	Format pulumi.StringOutput `pulumi:"format"`
	// A single table bucket maintenance configuration block.
	// See `maintenanceConfiguration` below
	MaintenanceConfiguration TablesTableMaintenanceConfigurationOutput `pulumi:"maintenanceConfiguration"`
	// Location of table metadata.
	MetadataLocation pulumi.StringOutput `pulumi:"metadataLocation"`
	// Date and time when the namespace was last modified.
	ModifiedAt pulumi.StringOutput `pulumi:"modifiedAt"`
	// Account ID of the account that last modified the namespace.
	ModifiedBy pulumi.StringOutput `pulumi:"modifiedBy"`
	// Name of the table.
	// Must be between 1 and 255 characters in length.
	// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
	Name pulumi.StringOutput `pulumi:"name"`
	// Name of the namespace for this table.
	// Must be between 1 and 255 characters in length.
	// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
	Namespace pulumi.StringOutput `pulumi:"namespace"`
	// Account ID of the account that owns the namespace.
	OwnerAccountId pulumi.StringOutput `pulumi:"ownerAccountId"`
	// ARN referencing the Table Bucket that contains this Namespace.
	//
	// The following argument is optional:
	TableBucketArn pulumi.StringOutput `pulumi:"tableBucketArn"`
	// Type of the table.
	// One of `customer` or `aws`.
	Type pulumi.StringOutput `pulumi:"type"`
	// Identifier for the current version of table data.
	VersionToken pulumi.StringOutput `pulumi:"versionToken"`
	// S3 URI pointing to the S3 Bucket that contains the table data.
	WarehouseLocation pulumi.StringOutput `pulumi:"warehouseLocation"`
}

// NewTablesTable registers a new resource with the given unique name, arguments, and options.
func NewTablesTable(ctx *pulumi.Context,
	name string, args *TablesTableArgs, opts ...pulumi.ResourceOption) (*TablesTable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Format == nil {
		return nil, errors.New("invalid value for required argument 'Format'")
	}
	if args.Namespace == nil {
		return nil, errors.New("invalid value for required argument 'Namespace'")
	}
	if args.TableBucketArn == nil {
		return nil, errors.New("invalid value for required argument 'TableBucketArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TablesTable
	err := ctx.RegisterResource("aws:s3/tablesTable:TablesTable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTablesTable gets an existing TablesTable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTablesTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TablesTableState, opts ...pulumi.ResourceOption) (*TablesTable, error) {
	var resource TablesTable
	err := ctx.ReadResource("aws:s3/tablesTable:TablesTable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TablesTable resources.
type tablesTableState struct {
	// ARN of the table.
	Arn *string `pulumi:"arn"`
	// Date and time when the namespace was created.
	CreatedAt *string `pulumi:"createdAt"`
	// Account ID of the account that created the namespace.
	CreatedBy *string `pulumi:"createdBy"`
	// Format of the table.
	// Must be `ICEBERG`.
	Format *string `pulumi:"format"`
	// A single table bucket maintenance configuration block.
	// See `maintenanceConfiguration` below
	MaintenanceConfiguration *TablesTableMaintenanceConfiguration `pulumi:"maintenanceConfiguration"`
	// Location of table metadata.
	MetadataLocation *string `pulumi:"metadataLocation"`
	// Date and time when the namespace was last modified.
	ModifiedAt *string `pulumi:"modifiedAt"`
	// Account ID of the account that last modified the namespace.
	ModifiedBy *string `pulumi:"modifiedBy"`
	// Name of the table.
	// Must be between 1 and 255 characters in length.
	// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
	Name *string `pulumi:"name"`
	// Name of the namespace for this table.
	// Must be between 1 and 255 characters in length.
	// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
	Namespace *string `pulumi:"namespace"`
	// Account ID of the account that owns the namespace.
	OwnerAccountId *string `pulumi:"ownerAccountId"`
	// ARN referencing the Table Bucket that contains this Namespace.
	//
	// The following argument is optional:
	TableBucketArn *string `pulumi:"tableBucketArn"`
	// Type of the table.
	// One of `customer` or `aws`.
	Type *string `pulumi:"type"`
	// Identifier for the current version of table data.
	VersionToken *string `pulumi:"versionToken"`
	// S3 URI pointing to the S3 Bucket that contains the table data.
	WarehouseLocation *string `pulumi:"warehouseLocation"`
}

type TablesTableState struct {
	// ARN of the table.
	Arn pulumi.StringPtrInput
	// Date and time when the namespace was created.
	CreatedAt pulumi.StringPtrInput
	// Account ID of the account that created the namespace.
	CreatedBy pulumi.StringPtrInput
	// Format of the table.
	// Must be `ICEBERG`.
	Format pulumi.StringPtrInput
	// A single table bucket maintenance configuration block.
	// See `maintenanceConfiguration` below
	MaintenanceConfiguration TablesTableMaintenanceConfigurationPtrInput
	// Location of table metadata.
	MetadataLocation pulumi.StringPtrInput
	// Date and time when the namespace was last modified.
	ModifiedAt pulumi.StringPtrInput
	// Account ID of the account that last modified the namespace.
	ModifiedBy pulumi.StringPtrInput
	// Name of the table.
	// Must be between 1 and 255 characters in length.
	// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
	Name pulumi.StringPtrInput
	// Name of the namespace for this table.
	// Must be between 1 and 255 characters in length.
	// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
	Namespace pulumi.StringPtrInput
	// Account ID of the account that owns the namespace.
	OwnerAccountId pulumi.StringPtrInput
	// ARN referencing the Table Bucket that contains this Namespace.
	//
	// The following argument is optional:
	TableBucketArn pulumi.StringPtrInput
	// Type of the table.
	// One of `customer` or `aws`.
	Type pulumi.StringPtrInput
	// Identifier for the current version of table data.
	VersionToken pulumi.StringPtrInput
	// S3 URI pointing to the S3 Bucket that contains the table data.
	WarehouseLocation pulumi.StringPtrInput
}

func (TablesTableState) ElementType() reflect.Type {
	return reflect.TypeOf((*tablesTableState)(nil)).Elem()
}

type tablesTableArgs struct {
	// Format of the table.
	// Must be `ICEBERG`.
	Format string `pulumi:"format"`
	// A single table bucket maintenance configuration block.
	// See `maintenanceConfiguration` below
	MaintenanceConfiguration *TablesTableMaintenanceConfiguration `pulumi:"maintenanceConfiguration"`
	// Name of the table.
	// Must be between 1 and 255 characters in length.
	// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
	Name *string `pulumi:"name"`
	// Name of the namespace for this table.
	// Must be between 1 and 255 characters in length.
	// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
	Namespace string `pulumi:"namespace"`
	// ARN referencing the Table Bucket that contains this Namespace.
	//
	// The following argument is optional:
	TableBucketArn string `pulumi:"tableBucketArn"`
}

// The set of arguments for constructing a TablesTable resource.
type TablesTableArgs struct {
	// Format of the table.
	// Must be `ICEBERG`.
	Format pulumi.StringInput
	// A single table bucket maintenance configuration block.
	// See `maintenanceConfiguration` below
	MaintenanceConfiguration TablesTableMaintenanceConfigurationPtrInput
	// Name of the table.
	// Must be between 1 and 255 characters in length.
	// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
	Name pulumi.StringPtrInput
	// Name of the namespace for this table.
	// Must be between 1 and 255 characters in length.
	// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
	Namespace pulumi.StringInput
	// ARN referencing the Table Bucket that contains this Namespace.
	//
	// The following argument is optional:
	TableBucketArn pulumi.StringInput
}

func (TablesTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tablesTableArgs)(nil)).Elem()
}

type TablesTableInput interface {
	pulumi.Input

	ToTablesTableOutput() TablesTableOutput
	ToTablesTableOutputWithContext(ctx context.Context) TablesTableOutput
}

func (*TablesTable) ElementType() reflect.Type {
	return reflect.TypeOf((**TablesTable)(nil)).Elem()
}

func (i *TablesTable) ToTablesTableOutput() TablesTableOutput {
	return i.ToTablesTableOutputWithContext(context.Background())
}

func (i *TablesTable) ToTablesTableOutputWithContext(ctx context.Context) TablesTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TablesTableOutput)
}

// TablesTableArrayInput is an input type that accepts TablesTableArray and TablesTableArrayOutput values.
// You can construct a concrete instance of `TablesTableArrayInput` via:
//
//	TablesTableArray{ TablesTableArgs{...} }
type TablesTableArrayInput interface {
	pulumi.Input

	ToTablesTableArrayOutput() TablesTableArrayOutput
	ToTablesTableArrayOutputWithContext(context.Context) TablesTableArrayOutput
}

type TablesTableArray []TablesTableInput

func (TablesTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TablesTable)(nil)).Elem()
}

func (i TablesTableArray) ToTablesTableArrayOutput() TablesTableArrayOutput {
	return i.ToTablesTableArrayOutputWithContext(context.Background())
}

func (i TablesTableArray) ToTablesTableArrayOutputWithContext(ctx context.Context) TablesTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TablesTableArrayOutput)
}

// TablesTableMapInput is an input type that accepts TablesTableMap and TablesTableMapOutput values.
// You can construct a concrete instance of `TablesTableMapInput` via:
//
//	TablesTableMap{ "key": TablesTableArgs{...} }
type TablesTableMapInput interface {
	pulumi.Input

	ToTablesTableMapOutput() TablesTableMapOutput
	ToTablesTableMapOutputWithContext(context.Context) TablesTableMapOutput
}

type TablesTableMap map[string]TablesTableInput

func (TablesTableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TablesTable)(nil)).Elem()
}

func (i TablesTableMap) ToTablesTableMapOutput() TablesTableMapOutput {
	return i.ToTablesTableMapOutputWithContext(context.Background())
}

func (i TablesTableMap) ToTablesTableMapOutputWithContext(ctx context.Context) TablesTableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TablesTableMapOutput)
}

type TablesTableOutput struct{ *pulumi.OutputState }

func (TablesTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TablesTable)(nil)).Elem()
}

func (o TablesTableOutput) ToTablesTableOutput() TablesTableOutput {
	return o
}

func (o TablesTableOutput) ToTablesTableOutputWithContext(ctx context.Context) TablesTableOutput {
	return o
}

// ARN of the table.
func (o TablesTableOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *TablesTable) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Date and time when the namespace was created.
func (o TablesTableOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TablesTable) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Account ID of the account that created the namespace.
func (o TablesTableOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *TablesTable) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// Format of the table.
// Must be `ICEBERG`.
func (o TablesTableOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v *TablesTable) pulumi.StringOutput { return v.Format }).(pulumi.StringOutput)
}

// A single table bucket maintenance configuration block.
// See `maintenanceConfiguration` below
func (o TablesTableOutput) MaintenanceConfiguration() TablesTableMaintenanceConfigurationOutput {
	return o.ApplyT(func(v *TablesTable) TablesTableMaintenanceConfigurationOutput { return v.MaintenanceConfiguration }).(TablesTableMaintenanceConfigurationOutput)
}

// Location of table metadata.
func (o TablesTableOutput) MetadataLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *TablesTable) pulumi.StringOutput { return v.MetadataLocation }).(pulumi.StringOutput)
}

// Date and time when the namespace was last modified.
func (o TablesTableOutput) ModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TablesTable) pulumi.StringOutput { return v.ModifiedAt }).(pulumi.StringOutput)
}

// Account ID of the account that last modified the namespace.
func (o TablesTableOutput) ModifiedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *TablesTable) pulumi.StringOutput { return v.ModifiedBy }).(pulumi.StringOutput)
}

// Name of the table.
// Must be between 1 and 255 characters in length.
// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
func (o TablesTableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TablesTable) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Name of the namespace for this table.
// Must be between 1 and 255 characters in length.
// Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
func (o TablesTableOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v *TablesTable) pulumi.StringOutput { return v.Namespace }).(pulumi.StringOutput)
}

// Account ID of the account that owns the namespace.
func (o TablesTableOutput) OwnerAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *TablesTable) pulumi.StringOutput { return v.OwnerAccountId }).(pulumi.StringOutput)
}

// ARN referencing the Table Bucket that contains this Namespace.
//
// The following argument is optional:
func (o TablesTableOutput) TableBucketArn() pulumi.StringOutput {
	return o.ApplyT(func(v *TablesTable) pulumi.StringOutput { return v.TableBucketArn }).(pulumi.StringOutput)
}

// Type of the table.
// One of `customer` or `aws`.
func (o TablesTableOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *TablesTable) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Identifier for the current version of table data.
func (o TablesTableOutput) VersionToken() pulumi.StringOutput {
	return o.ApplyT(func(v *TablesTable) pulumi.StringOutput { return v.VersionToken }).(pulumi.StringOutput)
}

// S3 URI pointing to the S3 Bucket that contains the table data.
func (o TablesTableOutput) WarehouseLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *TablesTable) pulumi.StringOutput { return v.WarehouseLocation }).(pulumi.StringOutput)
}

type TablesTableArrayOutput struct{ *pulumi.OutputState }

func (TablesTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TablesTable)(nil)).Elem()
}

func (o TablesTableArrayOutput) ToTablesTableArrayOutput() TablesTableArrayOutput {
	return o
}

func (o TablesTableArrayOutput) ToTablesTableArrayOutputWithContext(ctx context.Context) TablesTableArrayOutput {
	return o
}

func (o TablesTableArrayOutput) Index(i pulumi.IntInput) TablesTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TablesTable {
		return vs[0].([]*TablesTable)[vs[1].(int)]
	}).(TablesTableOutput)
}

type TablesTableMapOutput struct{ *pulumi.OutputState }

func (TablesTableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TablesTable)(nil)).Elem()
}

func (o TablesTableMapOutput) ToTablesTableMapOutput() TablesTableMapOutput {
	return o
}

func (o TablesTableMapOutput) ToTablesTableMapOutputWithContext(ctx context.Context) TablesTableMapOutput {
	return o
}

func (o TablesTableMapOutput) MapIndex(k pulumi.StringInput) TablesTableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TablesTable {
		return vs[0].(map[string]*TablesTable)[vs[1].(string)]
	}).(TablesTableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TablesTableInput)(nil)).Elem(), &TablesTable{})
	pulumi.RegisterInputType(reflect.TypeOf((*TablesTableArrayInput)(nil)).Elem(), TablesTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TablesTableMapInput)(nil)).Elem(), TablesTableMap{})
	pulumi.RegisterOutputType(TablesTableOutput{})
	pulumi.RegisterOutputType(TablesTableArrayOutput{})
	pulumi.RegisterOutputType(TablesTableMapOutput{})
}
