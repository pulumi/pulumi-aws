// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an S3 bucket CORS configuration resource. For more information about CORS, go to [Enabling Cross-Origin Resource Sharing](https://docs.aws.amazon.com/AmazonS3/latest/userguide/cors.html) in the Amazon S3 User Guide.
//
// > **NOTE:** S3 Buckets only support a single CORS configuration. Declaring multiple `s3.BucketCorsConfiguration` resources to the same S3 Bucket will cause a perpetual difference in configuration.
//
// > This resource cannot be used with S3 directory buckets.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/s3"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := s3.NewBucket(ctx, "example", &s3.BucketArgs{
//				Bucket: pulumi.String("mybucket"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = s3.NewBucketCorsConfiguration(ctx, "example", &s3.BucketCorsConfigurationArgs{
//				Bucket: example.ID(),
//				CorsRules: s3.BucketCorsConfigurationCorsRuleArray{
//					&s3.BucketCorsConfigurationCorsRuleArgs{
//						AllowedHeaders: pulumi.StringArray{
//							pulumi.String("*"),
//						},
//						AllowedMethods: pulumi.StringArray{
//							pulumi.String("PUT"),
//							pulumi.String("POST"),
//						},
//						AllowedOrigins: pulumi.StringArray{
//							pulumi.String("https://s3-website-test.domain.example"),
//						},
//						ExposeHeaders: pulumi.StringArray{
//							pulumi.String("ETag"),
//						},
//						MaxAgeSeconds: pulumi.Int(3000),
//					},
//					&s3.BucketCorsConfigurationCorsRuleArgs{
//						AllowedMethods: pulumi.StringArray{
//							pulumi.String("GET"),
//						},
//						AllowedOrigins: pulumi.StringArray{
//							pulumi.String("*"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// If the owner (account ID) of the source bucket differs from the account used to configure the AWS Provider, import using the `bucket` and `expected_bucket_owner` separated by a comma (`,`):
//
// __Using `pulumi import` to import__ S3 bucket CORS configuration using the `bucket` or using the `bucket` and `expected_bucket_owner` separated by a comma (`,`). For example:
//
// If the owner (account ID) of the source bucket is the same account used to configure the AWS Provider, import using the `bucket`:
//
// ```sh
// $ pulumi import aws:s3/bucketCorsConfiguration:BucketCorsConfiguration example bucket-name
// ```
// If the owner (account ID) of the source bucket differs from the account used to configure the AWS Provider, import using the `bucket` and `expected_bucket_owner` separated by a comma (`,`):
//
// ```sh
// $ pulumi import aws:s3/bucketCorsConfiguration:BucketCorsConfiguration example bucket-name,123456789012
// ```
type BucketCorsConfiguration struct {
	pulumi.CustomResourceState

	// Name of the bucket.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// Set of origins and methods (cross-origin access that you want to allow). See below. You can configure up to 100 rules.
	CorsRules BucketCorsConfigurationCorsRuleArrayOutput `pulumi:"corsRules"`
	// Account ID of the expected bucket owner.
	ExpectedBucketOwner pulumi.StringPtrOutput `pulumi:"expectedBucketOwner"`
	// The AWS Region to use for API operations. Overrides the Region set in the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewBucketCorsConfiguration registers a new resource with the given unique name, arguments, and options.
func NewBucketCorsConfiguration(ctx *pulumi.Context,
	name string, args *BucketCorsConfigurationArgs, opts ...pulumi.ResourceOption) (*BucketCorsConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.CorsRules == nil {
		return nil, errors.New("invalid value for required argument 'CorsRules'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("aws:s3/bucketCorsConfigurationV2:BucketCorsConfigurationV2"),
		},
		{
			Type: pulumi.String("aws:s3/bucketCorsConfigurationV2:BucketCorsConfigurationV2"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BucketCorsConfiguration
	err := ctx.RegisterResource("aws:s3/bucketCorsConfiguration:BucketCorsConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketCorsConfiguration gets an existing BucketCorsConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketCorsConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketCorsConfigurationState, opts ...pulumi.ResourceOption) (*BucketCorsConfiguration, error) {
	var resource BucketCorsConfiguration
	err := ctx.ReadResource("aws:s3/bucketCorsConfiguration:BucketCorsConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketCorsConfiguration resources.
type bucketCorsConfigurationState struct {
	// Name of the bucket.
	Bucket *string `pulumi:"bucket"`
	// Set of origins and methods (cross-origin access that you want to allow). See below. You can configure up to 100 rules.
	CorsRules []BucketCorsConfigurationCorsRule `pulumi:"corsRules"`
	// Account ID of the expected bucket owner.
	ExpectedBucketOwner *string `pulumi:"expectedBucketOwner"`
	// The AWS Region to use for API operations. Overrides the Region set in the provider configuration.
	Region *string `pulumi:"region"`
}

type BucketCorsConfigurationState struct {
	// Name of the bucket.
	Bucket pulumi.StringPtrInput
	// Set of origins and methods (cross-origin access that you want to allow). See below. You can configure up to 100 rules.
	CorsRules BucketCorsConfigurationCorsRuleArrayInput
	// Account ID of the expected bucket owner.
	ExpectedBucketOwner pulumi.StringPtrInput
	// The AWS Region to use for API operations. Overrides the Region set in the provider configuration.
	Region pulumi.StringPtrInput
}

func (BucketCorsConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketCorsConfigurationState)(nil)).Elem()
}

type bucketCorsConfigurationArgs struct {
	// Name of the bucket.
	Bucket string `pulumi:"bucket"`
	// Set of origins and methods (cross-origin access that you want to allow). See below. You can configure up to 100 rules.
	CorsRules []BucketCorsConfigurationCorsRule `pulumi:"corsRules"`
	// Account ID of the expected bucket owner.
	ExpectedBucketOwner *string `pulumi:"expectedBucketOwner"`
	// The AWS Region to use for API operations. Overrides the Region set in the provider configuration.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a BucketCorsConfiguration resource.
type BucketCorsConfigurationArgs struct {
	// Name of the bucket.
	Bucket pulumi.StringInput
	// Set of origins and methods (cross-origin access that you want to allow). See below. You can configure up to 100 rules.
	CorsRules BucketCorsConfigurationCorsRuleArrayInput
	// Account ID of the expected bucket owner.
	ExpectedBucketOwner pulumi.StringPtrInput
	// The AWS Region to use for API operations. Overrides the Region set in the provider configuration.
	Region pulumi.StringPtrInput
}

func (BucketCorsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketCorsConfigurationArgs)(nil)).Elem()
}

type BucketCorsConfigurationInput interface {
	pulumi.Input

	ToBucketCorsConfigurationOutput() BucketCorsConfigurationOutput
	ToBucketCorsConfigurationOutputWithContext(ctx context.Context) BucketCorsConfigurationOutput
}

func (*BucketCorsConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketCorsConfiguration)(nil)).Elem()
}

func (i *BucketCorsConfiguration) ToBucketCorsConfigurationOutput() BucketCorsConfigurationOutput {
	return i.ToBucketCorsConfigurationOutputWithContext(context.Background())
}

func (i *BucketCorsConfiguration) ToBucketCorsConfigurationOutputWithContext(ctx context.Context) BucketCorsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketCorsConfigurationOutput)
}

// BucketCorsConfigurationArrayInput is an input type that accepts BucketCorsConfigurationArray and BucketCorsConfigurationArrayOutput values.
// You can construct a concrete instance of `BucketCorsConfigurationArrayInput` via:
//
//	BucketCorsConfigurationArray{ BucketCorsConfigurationArgs{...} }
type BucketCorsConfigurationArrayInput interface {
	pulumi.Input

	ToBucketCorsConfigurationArrayOutput() BucketCorsConfigurationArrayOutput
	ToBucketCorsConfigurationArrayOutputWithContext(context.Context) BucketCorsConfigurationArrayOutput
}

type BucketCorsConfigurationArray []BucketCorsConfigurationInput

func (BucketCorsConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketCorsConfiguration)(nil)).Elem()
}

func (i BucketCorsConfigurationArray) ToBucketCorsConfigurationArrayOutput() BucketCorsConfigurationArrayOutput {
	return i.ToBucketCorsConfigurationArrayOutputWithContext(context.Background())
}

func (i BucketCorsConfigurationArray) ToBucketCorsConfigurationArrayOutputWithContext(ctx context.Context) BucketCorsConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketCorsConfigurationArrayOutput)
}

// BucketCorsConfigurationMapInput is an input type that accepts BucketCorsConfigurationMap and BucketCorsConfigurationMapOutput values.
// You can construct a concrete instance of `BucketCorsConfigurationMapInput` via:
//
//	BucketCorsConfigurationMap{ "key": BucketCorsConfigurationArgs{...} }
type BucketCorsConfigurationMapInput interface {
	pulumi.Input

	ToBucketCorsConfigurationMapOutput() BucketCorsConfigurationMapOutput
	ToBucketCorsConfigurationMapOutputWithContext(context.Context) BucketCorsConfigurationMapOutput
}

type BucketCorsConfigurationMap map[string]BucketCorsConfigurationInput

func (BucketCorsConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketCorsConfiguration)(nil)).Elem()
}

func (i BucketCorsConfigurationMap) ToBucketCorsConfigurationMapOutput() BucketCorsConfigurationMapOutput {
	return i.ToBucketCorsConfigurationMapOutputWithContext(context.Background())
}

func (i BucketCorsConfigurationMap) ToBucketCorsConfigurationMapOutputWithContext(ctx context.Context) BucketCorsConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketCorsConfigurationMapOutput)
}

type BucketCorsConfigurationOutput struct{ *pulumi.OutputState }

func (BucketCorsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketCorsConfiguration)(nil)).Elem()
}

func (o BucketCorsConfigurationOutput) ToBucketCorsConfigurationOutput() BucketCorsConfigurationOutput {
	return o
}

func (o BucketCorsConfigurationOutput) ToBucketCorsConfigurationOutputWithContext(ctx context.Context) BucketCorsConfigurationOutput {
	return o
}

// Name of the bucket.
func (o BucketCorsConfigurationOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketCorsConfiguration) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// Set of origins and methods (cross-origin access that you want to allow). See below. You can configure up to 100 rules.
func (o BucketCorsConfigurationOutput) CorsRules() BucketCorsConfigurationCorsRuleArrayOutput {
	return o.ApplyT(func(v *BucketCorsConfiguration) BucketCorsConfigurationCorsRuleArrayOutput { return v.CorsRules }).(BucketCorsConfigurationCorsRuleArrayOutput)
}

// Account ID of the expected bucket owner.
func (o BucketCorsConfigurationOutput) ExpectedBucketOwner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketCorsConfiguration) pulumi.StringPtrOutput { return v.ExpectedBucketOwner }).(pulumi.StringPtrOutput)
}

// The AWS Region to use for API operations. Overrides the Region set in the provider configuration.
func (o BucketCorsConfigurationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketCorsConfiguration) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type BucketCorsConfigurationArrayOutput struct{ *pulumi.OutputState }

func (BucketCorsConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketCorsConfiguration)(nil)).Elem()
}

func (o BucketCorsConfigurationArrayOutput) ToBucketCorsConfigurationArrayOutput() BucketCorsConfigurationArrayOutput {
	return o
}

func (o BucketCorsConfigurationArrayOutput) ToBucketCorsConfigurationArrayOutputWithContext(ctx context.Context) BucketCorsConfigurationArrayOutput {
	return o
}

func (o BucketCorsConfigurationArrayOutput) Index(i pulumi.IntInput) BucketCorsConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BucketCorsConfiguration {
		return vs[0].([]*BucketCorsConfiguration)[vs[1].(int)]
	}).(BucketCorsConfigurationOutput)
}

type BucketCorsConfigurationMapOutput struct{ *pulumi.OutputState }

func (BucketCorsConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketCorsConfiguration)(nil)).Elem()
}

func (o BucketCorsConfigurationMapOutput) ToBucketCorsConfigurationMapOutput() BucketCorsConfigurationMapOutput {
	return o
}

func (o BucketCorsConfigurationMapOutput) ToBucketCorsConfigurationMapOutputWithContext(ctx context.Context) BucketCorsConfigurationMapOutput {
	return o
}

func (o BucketCorsConfigurationMapOutput) MapIndex(k pulumi.StringInput) BucketCorsConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BucketCorsConfiguration {
		return vs[0].(map[string]*BucketCorsConfiguration)[vs[1].(string)]
	}).(BucketCorsConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BucketCorsConfigurationInput)(nil)).Elem(), &BucketCorsConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketCorsConfigurationArrayInput)(nil)).Elem(), BucketCorsConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketCorsConfigurationMapInput)(nil)).Elem(), BucketCorsConfigurationMap{})
	pulumi.RegisterOutputType(BucketCorsConfigurationOutput{})
	pulumi.RegisterOutputType(BucketCorsConfigurationArrayOutput{})
	pulumi.RegisterOutputType(BucketCorsConfigurationMapOutput{})
}
