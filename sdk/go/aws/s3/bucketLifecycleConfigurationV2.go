// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an independent configuration resource for S3 bucket [lifecycle configuration](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-lifecycle-mgmt.html).
//
// An S3 Lifecycle configuration consists of one or more Lifecycle rules. Each rule consists of the following:
//
// * Rule metadata (`id` and `status`)
// * Filter identifying objects to which the rule applies
// * One or more transition or expiration actions
//
// For more information see the Amazon S3 User Guide on [`Lifecycle Configuration Elements`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/intro-lifecycle-rules.html).
//
// > **NOTE:** S3 Buckets only support a single lifecycle configuration. Declaring multiple `s3.BucketLifecycleConfigurationV2` resources to the same S3 Bucket will cause a perpetual difference in configuration.
//
// > **NOTE:** Lifecycle configurations may take some time to fully propagate to all AWS S3 systems.
// Running Pulumi operations shortly after creating a lifecycle configuration may result in changes that affect configuration idempotence.
// See the Amazon S3 User Guide on [setting lifecycle configuration on a bucket](https://docs.aws.amazon.com/AmazonS3/latest/userguide/how-to-set-lifecycle-configuration-intro.html).
//
// ## Example Usage
//
// ## Import
//
// If the owner (account ID) of the source bucket differs from the account used to configure the AWS Provider, import using the `bucket` and `expected_bucket_owner` separated by a comma (`,`):
//
// __Using `pulumi import` to import__ S3 bucket lifecycle configuration using the `bucket` or using the `bucket` and `expected_bucket_owner` separated by a comma (`,`). For example:
//
// If the owner (account ID) of the source bucket is the same account used to configure the AWS Provider, import using the `bucket`:
//
// ```sh
//
//	$ pulumi import aws:s3/bucketLifecycleConfigurationV2:BucketLifecycleConfigurationV2 example bucket-name
//
// ```
//
//	If the owner (account ID) of the source bucket differs from the account used to configure the AWS Provider, import using the `bucket` and `expected_bucket_owner` separated by a comma (`,`):
//
// ```sh
//
//	$ pulumi import aws:s3/bucketLifecycleConfigurationV2:BucketLifecycleConfigurationV2 example bucket-name,123456789012
//
// ```
type BucketLifecycleConfigurationV2 struct {
	pulumi.CustomResourceState

	// Name of the source S3 bucket you want Amazon S3 to monitor.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// Account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
	ExpectedBucketOwner pulumi.StringPtrOutput `pulumi:"expectedBucketOwner"`
	// List of configuration blocks describing the rules managing the replication. See below.
	Rules BucketLifecycleConfigurationV2RuleArrayOutput `pulumi:"rules"`
}

// NewBucketLifecycleConfigurationV2 registers a new resource with the given unique name, arguments, and options.
func NewBucketLifecycleConfigurationV2(ctx *pulumi.Context,
	name string, args *BucketLifecycleConfigurationV2Args, opts ...pulumi.ResourceOption) (*BucketLifecycleConfigurationV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BucketLifecycleConfigurationV2
	err := ctx.RegisterResource("aws:s3/bucketLifecycleConfigurationV2:BucketLifecycleConfigurationV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketLifecycleConfigurationV2 gets an existing BucketLifecycleConfigurationV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketLifecycleConfigurationV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketLifecycleConfigurationV2State, opts ...pulumi.ResourceOption) (*BucketLifecycleConfigurationV2, error) {
	var resource BucketLifecycleConfigurationV2
	err := ctx.ReadResource("aws:s3/bucketLifecycleConfigurationV2:BucketLifecycleConfigurationV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketLifecycleConfigurationV2 resources.
type bucketLifecycleConfigurationV2State struct {
	// Name of the source S3 bucket you want Amazon S3 to monitor.
	Bucket *string `pulumi:"bucket"`
	// Account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
	ExpectedBucketOwner *string `pulumi:"expectedBucketOwner"`
	// List of configuration blocks describing the rules managing the replication. See below.
	Rules []BucketLifecycleConfigurationV2Rule `pulumi:"rules"`
}

type BucketLifecycleConfigurationV2State struct {
	// Name of the source S3 bucket you want Amazon S3 to monitor.
	Bucket pulumi.StringPtrInput
	// Account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
	ExpectedBucketOwner pulumi.StringPtrInput
	// List of configuration blocks describing the rules managing the replication. See below.
	Rules BucketLifecycleConfigurationV2RuleArrayInput
}

func (BucketLifecycleConfigurationV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketLifecycleConfigurationV2State)(nil)).Elem()
}

type bucketLifecycleConfigurationV2Args struct {
	// Name of the source S3 bucket you want Amazon S3 to monitor.
	Bucket string `pulumi:"bucket"`
	// Account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
	ExpectedBucketOwner *string `pulumi:"expectedBucketOwner"`
	// List of configuration blocks describing the rules managing the replication. See below.
	Rules []BucketLifecycleConfigurationV2Rule `pulumi:"rules"`
}

// The set of arguments for constructing a BucketLifecycleConfigurationV2 resource.
type BucketLifecycleConfigurationV2Args struct {
	// Name of the source S3 bucket you want Amazon S3 to monitor.
	Bucket pulumi.StringInput
	// Account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
	ExpectedBucketOwner pulumi.StringPtrInput
	// List of configuration blocks describing the rules managing the replication. See below.
	Rules BucketLifecycleConfigurationV2RuleArrayInput
}

func (BucketLifecycleConfigurationV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketLifecycleConfigurationV2Args)(nil)).Elem()
}

type BucketLifecycleConfigurationV2Input interface {
	pulumi.Input

	ToBucketLifecycleConfigurationV2Output() BucketLifecycleConfigurationV2Output
	ToBucketLifecycleConfigurationV2OutputWithContext(ctx context.Context) BucketLifecycleConfigurationV2Output
}

func (*BucketLifecycleConfigurationV2) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketLifecycleConfigurationV2)(nil)).Elem()
}

func (i *BucketLifecycleConfigurationV2) ToBucketLifecycleConfigurationV2Output() BucketLifecycleConfigurationV2Output {
	return i.ToBucketLifecycleConfigurationV2OutputWithContext(context.Background())
}

func (i *BucketLifecycleConfigurationV2) ToBucketLifecycleConfigurationV2OutputWithContext(ctx context.Context) BucketLifecycleConfigurationV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(BucketLifecycleConfigurationV2Output)
}

func (i *BucketLifecycleConfigurationV2) ToOutput(ctx context.Context) pulumix.Output[*BucketLifecycleConfigurationV2] {
	return pulumix.Output[*BucketLifecycleConfigurationV2]{
		OutputState: i.ToBucketLifecycleConfigurationV2OutputWithContext(ctx).OutputState,
	}
}

// BucketLifecycleConfigurationV2ArrayInput is an input type that accepts BucketLifecycleConfigurationV2Array and BucketLifecycleConfigurationV2ArrayOutput values.
// You can construct a concrete instance of `BucketLifecycleConfigurationV2ArrayInput` via:
//
//	BucketLifecycleConfigurationV2Array{ BucketLifecycleConfigurationV2Args{...} }
type BucketLifecycleConfigurationV2ArrayInput interface {
	pulumi.Input

	ToBucketLifecycleConfigurationV2ArrayOutput() BucketLifecycleConfigurationV2ArrayOutput
	ToBucketLifecycleConfigurationV2ArrayOutputWithContext(context.Context) BucketLifecycleConfigurationV2ArrayOutput
}

type BucketLifecycleConfigurationV2Array []BucketLifecycleConfigurationV2Input

func (BucketLifecycleConfigurationV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketLifecycleConfigurationV2)(nil)).Elem()
}

func (i BucketLifecycleConfigurationV2Array) ToBucketLifecycleConfigurationV2ArrayOutput() BucketLifecycleConfigurationV2ArrayOutput {
	return i.ToBucketLifecycleConfigurationV2ArrayOutputWithContext(context.Background())
}

func (i BucketLifecycleConfigurationV2Array) ToBucketLifecycleConfigurationV2ArrayOutputWithContext(ctx context.Context) BucketLifecycleConfigurationV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketLifecycleConfigurationV2ArrayOutput)
}

func (i BucketLifecycleConfigurationV2Array) ToOutput(ctx context.Context) pulumix.Output[[]*BucketLifecycleConfigurationV2] {
	return pulumix.Output[[]*BucketLifecycleConfigurationV2]{
		OutputState: i.ToBucketLifecycleConfigurationV2ArrayOutputWithContext(ctx).OutputState,
	}
}

// BucketLifecycleConfigurationV2MapInput is an input type that accepts BucketLifecycleConfigurationV2Map and BucketLifecycleConfigurationV2MapOutput values.
// You can construct a concrete instance of `BucketLifecycleConfigurationV2MapInput` via:
//
//	BucketLifecycleConfigurationV2Map{ "key": BucketLifecycleConfigurationV2Args{...} }
type BucketLifecycleConfigurationV2MapInput interface {
	pulumi.Input

	ToBucketLifecycleConfigurationV2MapOutput() BucketLifecycleConfigurationV2MapOutput
	ToBucketLifecycleConfigurationV2MapOutputWithContext(context.Context) BucketLifecycleConfigurationV2MapOutput
}

type BucketLifecycleConfigurationV2Map map[string]BucketLifecycleConfigurationV2Input

func (BucketLifecycleConfigurationV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketLifecycleConfigurationV2)(nil)).Elem()
}

func (i BucketLifecycleConfigurationV2Map) ToBucketLifecycleConfigurationV2MapOutput() BucketLifecycleConfigurationV2MapOutput {
	return i.ToBucketLifecycleConfigurationV2MapOutputWithContext(context.Background())
}

func (i BucketLifecycleConfigurationV2Map) ToBucketLifecycleConfigurationV2MapOutputWithContext(ctx context.Context) BucketLifecycleConfigurationV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketLifecycleConfigurationV2MapOutput)
}

func (i BucketLifecycleConfigurationV2Map) ToOutput(ctx context.Context) pulumix.Output[map[string]*BucketLifecycleConfigurationV2] {
	return pulumix.Output[map[string]*BucketLifecycleConfigurationV2]{
		OutputState: i.ToBucketLifecycleConfigurationV2MapOutputWithContext(ctx).OutputState,
	}
}

type BucketLifecycleConfigurationV2Output struct{ *pulumi.OutputState }

func (BucketLifecycleConfigurationV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketLifecycleConfigurationV2)(nil)).Elem()
}

func (o BucketLifecycleConfigurationV2Output) ToBucketLifecycleConfigurationV2Output() BucketLifecycleConfigurationV2Output {
	return o
}

func (o BucketLifecycleConfigurationV2Output) ToBucketLifecycleConfigurationV2OutputWithContext(ctx context.Context) BucketLifecycleConfigurationV2Output {
	return o
}

func (o BucketLifecycleConfigurationV2Output) ToOutput(ctx context.Context) pulumix.Output[*BucketLifecycleConfigurationV2] {
	return pulumix.Output[*BucketLifecycleConfigurationV2]{
		OutputState: o.OutputState,
	}
}

// Name of the source S3 bucket you want Amazon S3 to monitor.
func (o BucketLifecycleConfigurationV2Output) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketLifecycleConfigurationV2) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// Account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
func (o BucketLifecycleConfigurationV2Output) ExpectedBucketOwner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketLifecycleConfigurationV2) pulumi.StringPtrOutput { return v.ExpectedBucketOwner }).(pulumi.StringPtrOutput)
}

// List of configuration blocks describing the rules managing the replication. See below.
func (o BucketLifecycleConfigurationV2Output) Rules() BucketLifecycleConfigurationV2RuleArrayOutput {
	return o.ApplyT(func(v *BucketLifecycleConfigurationV2) BucketLifecycleConfigurationV2RuleArrayOutput { return v.Rules }).(BucketLifecycleConfigurationV2RuleArrayOutput)
}

type BucketLifecycleConfigurationV2ArrayOutput struct{ *pulumi.OutputState }

func (BucketLifecycleConfigurationV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketLifecycleConfigurationV2)(nil)).Elem()
}

func (o BucketLifecycleConfigurationV2ArrayOutput) ToBucketLifecycleConfigurationV2ArrayOutput() BucketLifecycleConfigurationV2ArrayOutput {
	return o
}

func (o BucketLifecycleConfigurationV2ArrayOutput) ToBucketLifecycleConfigurationV2ArrayOutputWithContext(ctx context.Context) BucketLifecycleConfigurationV2ArrayOutput {
	return o
}

func (o BucketLifecycleConfigurationV2ArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*BucketLifecycleConfigurationV2] {
	return pulumix.Output[[]*BucketLifecycleConfigurationV2]{
		OutputState: o.OutputState,
	}
}

func (o BucketLifecycleConfigurationV2ArrayOutput) Index(i pulumi.IntInput) BucketLifecycleConfigurationV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BucketLifecycleConfigurationV2 {
		return vs[0].([]*BucketLifecycleConfigurationV2)[vs[1].(int)]
	}).(BucketLifecycleConfigurationV2Output)
}

type BucketLifecycleConfigurationV2MapOutput struct{ *pulumi.OutputState }

func (BucketLifecycleConfigurationV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketLifecycleConfigurationV2)(nil)).Elem()
}

func (o BucketLifecycleConfigurationV2MapOutput) ToBucketLifecycleConfigurationV2MapOutput() BucketLifecycleConfigurationV2MapOutput {
	return o
}

func (o BucketLifecycleConfigurationV2MapOutput) ToBucketLifecycleConfigurationV2MapOutputWithContext(ctx context.Context) BucketLifecycleConfigurationV2MapOutput {
	return o
}

func (o BucketLifecycleConfigurationV2MapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*BucketLifecycleConfigurationV2] {
	return pulumix.Output[map[string]*BucketLifecycleConfigurationV2]{
		OutputState: o.OutputState,
	}
}

func (o BucketLifecycleConfigurationV2MapOutput) MapIndex(k pulumi.StringInput) BucketLifecycleConfigurationV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BucketLifecycleConfigurationV2 {
		return vs[0].(map[string]*BucketLifecycleConfigurationV2)[vs[1].(string)]
	}).(BucketLifecycleConfigurationV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BucketLifecycleConfigurationV2Input)(nil)).Elem(), &BucketLifecycleConfigurationV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketLifecycleConfigurationV2ArrayInput)(nil)).Elem(), BucketLifecycleConfigurationV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketLifecycleConfigurationV2MapInput)(nil)).Elem(), BucketLifecycleConfigurationV2Map{})
	pulumi.RegisterOutputType(BucketLifecycleConfigurationV2Output{})
	pulumi.RegisterOutputType(BucketLifecycleConfigurationV2ArrayOutput{})
	pulumi.RegisterOutputType(BucketLifecycleConfigurationV2MapOutput{})
}
