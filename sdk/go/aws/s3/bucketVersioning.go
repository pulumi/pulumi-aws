// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource for controlling versioning on an S3 bucket.
// Deleting this resource will either suspend versioning on the associated S3 bucket or
// simply remove the resource from state if the associated S3 bucket is unversioned.
//
// For more information, see [How S3 versioning works](https://docs.aws.amazon.com/AmazonS3/latest/userguide/manage-versioning-examples.html).
//
// > **NOTE:** If you are enabling versioning on the bucket for the first time, AWS recommends that you wait for 15 minutes after enabling versioning before issuing write operations (PUT or DELETE) on objects in the bucket.
//
// > This resource cannot be used with S3 directory buckets.
//
// ## Example Usage
//
// ### With Versioning Enabled
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/s3"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := s3.NewBucket(ctx, "example", &s3.BucketArgs{
//				Bucket: pulumi.String("example-bucket"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = s3.NewBucketAcl(ctx, "example", &s3.BucketAclArgs{
//				Bucket: example.ID(),
//				Acl:    pulumi.String("private"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = s3.NewBucketVersioning(ctx, "versioning_example", &s3.BucketVersioningArgs{
//				Bucket: example.ID(),
//				VersioningConfiguration: &s3.BucketVersioningVersioningConfigurationArgs{
//					Status: pulumi.String("Enabled"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### With Versioning Disabled
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/s3"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := s3.NewBucket(ctx, "example", &s3.BucketArgs{
//				Bucket: pulumi.String("example-bucket"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = s3.NewBucketAcl(ctx, "example", &s3.BucketAclArgs{
//				Bucket: example.ID(),
//				Acl:    pulumi.String("private"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = s3.NewBucketVersioning(ctx, "versioning_example", &s3.BucketVersioningArgs{
//				Bucket: example.ID(),
//				VersioningConfiguration: &s3.BucketVersioningVersioningConfigurationArgs{
//					Status: pulumi.String("Disabled"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Object Dependency On Versioning
//
// When you create an object whose `versionId` you need and an `s3.BucketVersioning` resource in the same configuration, you are more likely to have success by ensuring the `s3Object` depends either implicitly (see below) or explicitly (i.e., using `dependsOn = [aws_s3_bucket_versioning.example]`) on the `s3.BucketVersioning` resource.
//
// > **NOTE:** For critical and/or production S3 objects, do not create a bucket, enable versioning, and create an object in the bucket within the same configuration. Doing so will not allow the AWS-recommended 15 minutes between enabling versioning and writing to the bucket.
//
// This example shows the `aws_s3_object.example` depending implicitly on the versioning resource through the reference to `aws_s3_bucket_versioning.example.bucket` to define `bucket`:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/s3"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := s3.NewBucket(ctx, "example", &s3.BucketArgs{
//				Bucket: pulumi.String("yotto"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleBucketVersioning, err := s3.NewBucketVersioning(ctx, "example", &s3.BucketVersioningArgs{
//				Bucket: example.ID(),
//				VersioningConfiguration: &s3.BucketVersioningVersioningConfigurationArgs{
//					Status: pulumi.String("Enabled"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = s3.NewBucketObjectv2(ctx, "example", &s3.BucketObjectv2Args{
//				Bucket: exampleBucketVersioning.ID(),
//				Key:    pulumi.String("droeloe"),
//				Source: pulumi.NewFileAsset("example.txt"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// If the owner (account ID) of the source bucket differs from the account used to configure the AWS Provider, import using the `bucket` and `expected_bucket_owner` separated by a comma (`,`):
//
// __Using `pulumi import` to import__ S3 bucket versioning using the `bucket` or using the `bucket` and `expected_bucket_owner` separated by a comma (`,`). For example:
//
// If the owner (account ID) of the source bucket is the same account used to configure the AWS Provider, import using the `bucket`:
//
// ```sh
// $ pulumi import aws:s3/bucketVersioning:BucketVersioning example bucket-name
// ```
// If the owner (account ID) of the source bucket differs from the account used to configure the AWS Provider, import using the `bucket` and `expected_bucket_owner` separated by a comma (`,`):
//
// ```sh
// $ pulumi import aws:s3/bucketVersioning:BucketVersioning example bucket-name,123456789012
// ```
type BucketVersioning struct {
	pulumi.CustomResourceState

	// Name of the S3 bucket.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// Account ID of the expected bucket owner.
	ExpectedBucketOwner pulumi.StringPtrOutput `pulumi:"expectedBucketOwner"`
	// Concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device.
	Mfa pulumi.StringPtrOutput `pulumi:"mfa"`
	// Configuration block for the versioning parameters. See below.
	VersioningConfiguration BucketVersioningVersioningConfigurationOutput `pulumi:"versioningConfiguration"`
}

// NewBucketVersioning registers a new resource with the given unique name, arguments, and options.
func NewBucketVersioning(ctx *pulumi.Context,
	name string, args *BucketVersioningArgs, opts ...pulumi.ResourceOption) (*BucketVersioning, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.VersioningConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'VersioningConfiguration'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("aws:s3/bucketVersioningV2:BucketVersioningV2"),
		},
		{
			Type: pulumi.String("aws:s3/bucketVersioningV2:BucketVersioningV2"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BucketVersioning
	err := ctx.RegisterResource("aws:s3/bucketVersioning:BucketVersioning", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketVersioning gets an existing BucketVersioning resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketVersioning(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketVersioningState, opts ...pulumi.ResourceOption) (*BucketVersioning, error) {
	var resource BucketVersioning
	err := ctx.ReadResource("aws:s3/bucketVersioning:BucketVersioning", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketVersioning resources.
type bucketVersioningState struct {
	// Name of the S3 bucket.
	Bucket *string `pulumi:"bucket"`
	// Account ID of the expected bucket owner.
	ExpectedBucketOwner *string `pulumi:"expectedBucketOwner"`
	// Concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device.
	Mfa *string `pulumi:"mfa"`
	// Configuration block for the versioning parameters. See below.
	VersioningConfiguration *BucketVersioningVersioningConfiguration `pulumi:"versioningConfiguration"`
}

type BucketVersioningState struct {
	// Name of the S3 bucket.
	Bucket pulumi.StringPtrInput
	// Account ID of the expected bucket owner.
	ExpectedBucketOwner pulumi.StringPtrInput
	// Concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device.
	Mfa pulumi.StringPtrInput
	// Configuration block for the versioning parameters. See below.
	VersioningConfiguration BucketVersioningVersioningConfigurationPtrInput
}

func (BucketVersioningState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketVersioningState)(nil)).Elem()
}

type bucketVersioningArgs struct {
	// Name of the S3 bucket.
	Bucket string `pulumi:"bucket"`
	// Account ID of the expected bucket owner.
	ExpectedBucketOwner *string `pulumi:"expectedBucketOwner"`
	// Concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device.
	Mfa *string `pulumi:"mfa"`
	// Configuration block for the versioning parameters. See below.
	VersioningConfiguration BucketVersioningVersioningConfiguration `pulumi:"versioningConfiguration"`
}

// The set of arguments for constructing a BucketVersioning resource.
type BucketVersioningArgs struct {
	// Name of the S3 bucket.
	Bucket pulumi.StringInput
	// Account ID of the expected bucket owner.
	ExpectedBucketOwner pulumi.StringPtrInput
	// Concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device.
	Mfa pulumi.StringPtrInput
	// Configuration block for the versioning parameters. See below.
	VersioningConfiguration BucketVersioningVersioningConfigurationInput
}

func (BucketVersioningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketVersioningArgs)(nil)).Elem()
}

type BucketVersioningInput interface {
	pulumi.Input

	ToBucketVersioningOutput() BucketVersioningOutput
	ToBucketVersioningOutputWithContext(ctx context.Context) BucketVersioningOutput
}

func (*BucketVersioning) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketVersioning)(nil)).Elem()
}

func (i *BucketVersioning) ToBucketVersioningOutput() BucketVersioningOutput {
	return i.ToBucketVersioningOutputWithContext(context.Background())
}

func (i *BucketVersioning) ToBucketVersioningOutputWithContext(ctx context.Context) BucketVersioningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketVersioningOutput)
}

// BucketVersioningArrayInput is an input type that accepts BucketVersioningArray and BucketVersioningArrayOutput values.
// You can construct a concrete instance of `BucketVersioningArrayInput` via:
//
//	BucketVersioningArray{ BucketVersioningArgs{...} }
type BucketVersioningArrayInput interface {
	pulumi.Input

	ToBucketVersioningArrayOutput() BucketVersioningArrayOutput
	ToBucketVersioningArrayOutputWithContext(context.Context) BucketVersioningArrayOutput
}

type BucketVersioningArray []BucketVersioningInput

func (BucketVersioningArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketVersioning)(nil)).Elem()
}

func (i BucketVersioningArray) ToBucketVersioningArrayOutput() BucketVersioningArrayOutput {
	return i.ToBucketVersioningArrayOutputWithContext(context.Background())
}

func (i BucketVersioningArray) ToBucketVersioningArrayOutputWithContext(ctx context.Context) BucketVersioningArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketVersioningArrayOutput)
}

// BucketVersioningMapInput is an input type that accepts BucketVersioningMap and BucketVersioningMapOutput values.
// You can construct a concrete instance of `BucketVersioningMapInput` via:
//
//	BucketVersioningMap{ "key": BucketVersioningArgs{...} }
type BucketVersioningMapInput interface {
	pulumi.Input

	ToBucketVersioningMapOutput() BucketVersioningMapOutput
	ToBucketVersioningMapOutputWithContext(context.Context) BucketVersioningMapOutput
}

type BucketVersioningMap map[string]BucketVersioningInput

func (BucketVersioningMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketVersioning)(nil)).Elem()
}

func (i BucketVersioningMap) ToBucketVersioningMapOutput() BucketVersioningMapOutput {
	return i.ToBucketVersioningMapOutputWithContext(context.Background())
}

func (i BucketVersioningMap) ToBucketVersioningMapOutputWithContext(ctx context.Context) BucketVersioningMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketVersioningMapOutput)
}

type BucketVersioningOutput struct{ *pulumi.OutputState }

func (BucketVersioningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketVersioning)(nil)).Elem()
}

func (o BucketVersioningOutput) ToBucketVersioningOutput() BucketVersioningOutput {
	return o
}

func (o BucketVersioningOutput) ToBucketVersioningOutputWithContext(ctx context.Context) BucketVersioningOutput {
	return o
}

// Name of the S3 bucket.
func (o BucketVersioningOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketVersioning) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// Account ID of the expected bucket owner.
func (o BucketVersioningOutput) ExpectedBucketOwner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketVersioning) pulumi.StringPtrOutput { return v.ExpectedBucketOwner }).(pulumi.StringPtrOutput)
}

// Concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device.
func (o BucketVersioningOutput) Mfa() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketVersioning) pulumi.StringPtrOutput { return v.Mfa }).(pulumi.StringPtrOutput)
}

// Configuration block for the versioning parameters. See below.
func (o BucketVersioningOutput) VersioningConfiguration() BucketVersioningVersioningConfigurationOutput {
	return o.ApplyT(func(v *BucketVersioning) BucketVersioningVersioningConfigurationOutput {
		return v.VersioningConfiguration
	}).(BucketVersioningVersioningConfigurationOutput)
}

type BucketVersioningArrayOutput struct{ *pulumi.OutputState }

func (BucketVersioningArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketVersioning)(nil)).Elem()
}

func (o BucketVersioningArrayOutput) ToBucketVersioningArrayOutput() BucketVersioningArrayOutput {
	return o
}

func (o BucketVersioningArrayOutput) ToBucketVersioningArrayOutputWithContext(ctx context.Context) BucketVersioningArrayOutput {
	return o
}

func (o BucketVersioningArrayOutput) Index(i pulumi.IntInput) BucketVersioningOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BucketVersioning {
		return vs[0].([]*BucketVersioning)[vs[1].(int)]
	}).(BucketVersioningOutput)
}

type BucketVersioningMapOutput struct{ *pulumi.OutputState }

func (BucketVersioningMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketVersioning)(nil)).Elem()
}

func (o BucketVersioningMapOutput) ToBucketVersioningMapOutput() BucketVersioningMapOutput {
	return o
}

func (o BucketVersioningMapOutput) ToBucketVersioningMapOutputWithContext(ctx context.Context) BucketVersioningMapOutput {
	return o
}

func (o BucketVersioningMapOutput) MapIndex(k pulumi.StringInput) BucketVersioningOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BucketVersioning {
		return vs[0].(map[string]*BucketVersioning)[vs[1].(string)]
	}).(BucketVersioningOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BucketVersioningInput)(nil)).Elem(), &BucketVersioning{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketVersioningArrayInput)(nil)).Elem(), BucketVersioningArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketVersioningMapInput)(nil)).Elem(), BucketVersioningMap{})
	pulumi.RegisterOutputType(BucketVersioningOutput{})
	pulumi.RegisterOutputType(BucketVersioningArrayOutput{})
	pulumi.RegisterOutputType(BucketVersioningMapOutput{})
}
