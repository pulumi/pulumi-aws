// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package s3

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a S3 bucket notification resource.
type BucketNotification struct {
	s *pulumi.ResourceState
}

// NewBucketNotification registers a new resource with the given unique name, arguments, and options.
func NewBucketNotification(ctx *pulumi.Context,
	name string, args *BucketNotificationArgs, opts ...pulumi.ResourceOpt) (*BucketNotification, error) {
	if args == nil || args.Bucket == nil {
		return nil, errors.New("missing required argument 'Bucket'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["bucket"] = nil
		inputs["lambdaFunctions"] = nil
		inputs["queues"] = nil
		inputs["topics"] = nil
	} else {
		inputs["bucket"] = args.Bucket
		inputs["lambdaFunctions"] = args.LambdaFunctions
		inputs["queues"] = args.Queues
		inputs["topics"] = args.Topics
	}
	s, err := ctx.RegisterResource("aws:s3/bucketNotification:BucketNotification", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &BucketNotification{s: s}, nil
}

// GetBucketNotification gets an existing BucketNotification resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketNotification(ctx *pulumi.Context,
	name string, id pulumi.ID, state *BucketNotificationState, opts ...pulumi.ResourceOpt) (*BucketNotification, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["bucket"] = state.Bucket
		inputs["lambdaFunctions"] = state.LambdaFunctions
		inputs["queues"] = state.Queues
		inputs["topics"] = state.Topics
	}
	s, err := ctx.ReadResource("aws:s3/bucketNotification:BucketNotification", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &BucketNotification{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *BucketNotification) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *BucketNotification) ID() *pulumi.IDOutput {
	return r.s.ID
}

// The name of the bucket to put notification configuration.
func (r *BucketNotification) Bucket() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["bucket"])
}

// Used to configure notifications to a Lambda Function (documented below).
func (r *BucketNotification) LambdaFunctions() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["lambdaFunctions"])
}

// The notification configuration to SQS Queue (documented below).
func (r *BucketNotification) Queues() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["queues"])
}

// The notification configuration to SNS Topic (documented below).
func (r *BucketNotification) Topics() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["topics"])
}

// Input properties used for looking up and filtering BucketNotification resources.
type BucketNotificationState struct {
	// The name of the bucket to put notification configuration.
	Bucket interface{}
	// Used to configure notifications to a Lambda Function (documented below).
	LambdaFunctions interface{}
	// The notification configuration to SQS Queue (documented below).
	Queues interface{}
	// The notification configuration to SNS Topic (documented below).
	Topics interface{}
}

// The set of arguments for constructing a BucketNotification resource.
type BucketNotificationArgs struct {
	// The name of the bucket to put notification configuration.
	Bucket interface{}
	// Used to configure notifications to a Lambda Function (documented below).
	LambdaFunctions interface{}
	// The notification configuration to SQS Queue (documented below).
	Queues interface{}
	// The notification configuration to SNS Topic (documented below).
	Topics interface{}
}
