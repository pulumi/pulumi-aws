// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package s3

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a S3 Bucket Notification Configuration. For additional information, see the [Configuring S3 Event Notifications section in the Amazon S3 Developer Guide](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html).
//
// > **NOTE:** S3 Buckets only support a single notification configuration. Declaring multiple `s3.BucketNotification` resources to the same S3 Bucket will cause a perpetual difference in configuration. See the example "Trigger multiple Lambda functions" for an option.
//
// ## Example Usage
// ### Add notification configuration to SNS Topic
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/s3"
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/sns"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		bucket, err := s3.NewBucket(ctx, "bucket", nil)
// 		if err != nil {
// 			return err
// 		}
// 		topic, err := sns.NewTopic(ctx, "topic", &sns.TopicArgs{
// 			Policy: bucket.Arn.ApplyT(func(arn string) (string, error) {
// 				return fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "    \"Version\":\"2012-10-17\",\n", "    \"Statement\":[{\n", "        \"Effect\": \"Allow\",\n", "        \"Principal\": { \"Service\": \"s3.amazonaws.com\" },\n", "        \"Action\": \"SNS:Publish\",\n", "        \"Resource\": \"arn:aws:sns:*:*:s3-event-notification-topic\",\n", "        \"Condition\":{\n", "            \"ArnLike\":{\"aws:SourceArn\":\"", arn, "\"}\n", "        }\n", "    }]\n", "}\n"), nil
// 			}).(pulumi.StringOutput),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = s3.NewBucketNotification(ctx, "bucketNotification", &s3.BucketNotificationArgs{
// 			Bucket: bucket.ID(),
// 			Topics: s3.BucketNotificationTopicArray{
// 				&s3.BucketNotificationTopicArgs{
// 					TopicArn: topic.Arn,
// 					Events: pulumi.StringArray{
// 						pulumi.String("s3:ObjectCreated:*"),
// 					},
// 					FilterSuffix: pulumi.String(".log"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Add notification configuration to SQS Queue
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/s3"
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/sqs"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		bucket, err := s3.NewBucket(ctx, "bucket", nil)
// 		if err != nil {
// 			return err
// 		}
// 		queue, err := sqs.NewQueue(ctx, "queue", &sqs.QueueArgs{
// 			Policy: bucket.Arn.ApplyT(func(arn string) (string, error) {
// 				return fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"Version\": \"2012-10-17\",\n", "  \"Statement\": [\n", "    {\n", "      \"Effect\": \"Allow\",\n", "      \"Principal\": \"*\",\n", "      \"Action\": \"sqs:SendMessage\",\n", "	  \"Resource\": \"arn:aws:sqs:*:*:s3-event-notification-queue\",\n", "      \"Condition\": {\n", "        \"ArnEquals\": { \"aws:SourceArn\": \"", arn, "\" }\n", "      }\n", "    }\n", "  ]\n", "}\n"), nil
// 			}).(pulumi.StringOutput),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = s3.NewBucketNotification(ctx, "bucketNotification", &s3.BucketNotificationArgs{
// 			Bucket: bucket.ID(),
// 			Queues: s3.BucketNotificationQueueArray{
// 				&s3.BucketNotificationQueueArgs{
// 					QueueArn: queue.Arn,
// 					Events: pulumi.StringArray{
// 						pulumi.String("s3:ObjectCreated:*"),
// 					},
// 					FilterSuffix: pulumi.String(".log"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Add multiple notification configurations to SQS Queue
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/s3"
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/sqs"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		bucket, err := s3.NewBucket(ctx, "bucket", nil)
// 		if err != nil {
// 			return err
// 		}
// 		queue, err := sqs.NewQueue(ctx, "queue", &sqs.QueueArgs{
// 			Policy: bucket.Arn.ApplyT(func(arn string) (string, error) {
// 				return fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"Version\": \"2012-10-17\",\n", "  \"Statement\": [\n", "    {\n", "      \"Effect\": \"Allow\",\n", "      \"Principal\": \"*\",\n", "      \"Action\": \"sqs:SendMessage\",\n", "	  \"Resource\": \"arn:aws:sqs:*:*:s3-event-notification-queue\",\n", "      \"Condition\": {\n", "        \"ArnEquals\": { \"aws:SourceArn\": \"", arn, "\" }\n", "      }\n", "    }\n", "  ]\n", "}\n"), nil
// 			}).(pulumi.StringOutput),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = s3.NewBucketNotification(ctx, "bucketNotification", &s3.BucketNotificationArgs{
// 			Bucket: bucket.ID(),
// 			Queues: s3.BucketNotificationQueueArray{
// 				&s3.BucketNotificationQueueArgs{
// 					Id:       pulumi.String("image-upload-event"),
// 					QueueArn: queue.Arn,
// 					Events: pulumi.StringArray{
// 						pulumi.String("s3:ObjectCreated:*"),
// 					},
// 					FilterPrefix: pulumi.String("images/"),
// 				},
// 				&s3.BucketNotificationQueueArgs{
// 					Id:       pulumi.String("video-upload-event"),
// 					QueueArn: queue.Arn,
// 					Events: pulumi.StringArray{
// 						pulumi.String("s3:ObjectCreated:*"),
// 					},
// 					FilterPrefix: pulumi.String("videos/"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// S3 bucket notification can be imported using the `bucket`, e.g.
//
// ```sh
//  $ pulumi import aws:s3/bucketNotification:BucketNotification bucket_notification bucket-name
// ```
type BucketNotification struct {
	pulumi.CustomResourceState

	// The name of the bucket to put notification configuration.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// Used to configure notifications to a Lambda Function (documented below).
	LambdaFunctions BucketNotificationLambdaFunctionArrayOutput `pulumi:"lambdaFunctions"`
	// The notification configuration to SQS Queue (documented below).
	Queues BucketNotificationQueueArrayOutput `pulumi:"queues"`
	// The notification configuration to SNS Topic (documented below).
	Topics BucketNotificationTopicArrayOutput `pulumi:"topics"`
}

// NewBucketNotification registers a new resource with the given unique name, arguments, and options.
func NewBucketNotification(ctx *pulumi.Context,
	name string, args *BucketNotificationArgs, opts ...pulumi.ResourceOption) (*BucketNotification, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	var resource BucketNotification
	err := ctx.RegisterResource("aws:s3/bucketNotification:BucketNotification", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketNotification gets an existing BucketNotification resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketNotification(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketNotificationState, opts ...pulumi.ResourceOption) (*BucketNotification, error) {
	var resource BucketNotification
	err := ctx.ReadResource("aws:s3/bucketNotification:BucketNotification", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketNotification resources.
type bucketNotificationState struct {
	// The name of the bucket to put notification configuration.
	Bucket *string `pulumi:"bucket"`
	// Used to configure notifications to a Lambda Function (documented below).
	LambdaFunctions []BucketNotificationLambdaFunction `pulumi:"lambdaFunctions"`
	// The notification configuration to SQS Queue (documented below).
	Queues []BucketNotificationQueue `pulumi:"queues"`
	// The notification configuration to SNS Topic (documented below).
	Topics []BucketNotificationTopic `pulumi:"topics"`
}

type BucketNotificationState struct {
	// The name of the bucket to put notification configuration.
	Bucket pulumi.StringPtrInput
	// Used to configure notifications to a Lambda Function (documented below).
	LambdaFunctions BucketNotificationLambdaFunctionArrayInput
	// The notification configuration to SQS Queue (documented below).
	Queues BucketNotificationQueueArrayInput
	// The notification configuration to SNS Topic (documented below).
	Topics BucketNotificationTopicArrayInput
}

func (BucketNotificationState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketNotificationState)(nil)).Elem()
}

type bucketNotificationArgs struct {
	// The name of the bucket to put notification configuration.
	Bucket string `pulumi:"bucket"`
	// Used to configure notifications to a Lambda Function (documented below).
	LambdaFunctions []BucketNotificationLambdaFunction `pulumi:"lambdaFunctions"`
	// The notification configuration to SQS Queue (documented below).
	Queues []BucketNotificationQueue `pulumi:"queues"`
	// The notification configuration to SNS Topic (documented below).
	Topics []BucketNotificationTopic `pulumi:"topics"`
}

// The set of arguments for constructing a BucketNotification resource.
type BucketNotificationArgs struct {
	// The name of the bucket to put notification configuration.
	Bucket pulumi.StringInput
	// Used to configure notifications to a Lambda Function (documented below).
	LambdaFunctions BucketNotificationLambdaFunctionArrayInput
	// The notification configuration to SQS Queue (documented below).
	Queues BucketNotificationQueueArrayInput
	// The notification configuration to SNS Topic (documented below).
	Topics BucketNotificationTopicArrayInput
}

func (BucketNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketNotificationArgs)(nil)).Elem()
}

type BucketNotificationInput interface {
	pulumi.Input

	ToBucketNotificationOutput() BucketNotificationOutput
	ToBucketNotificationOutputWithContext(ctx context.Context) BucketNotificationOutput
}

func (*BucketNotification) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketNotification)(nil))
}

func (i *BucketNotification) ToBucketNotificationOutput() BucketNotificationOutput {
	return i.ToBucketNotificationOutputWithContext(context.Background())
}

func (i *BucketNotification) ToBucketNotificationOutputWithContext(ctx context.Context) BucketNotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketNotificationOutput)
}

func (i *BucketNotification) ToBucketNotificationPtrOutput() BucketNotificationPtrOutput {
	return i.ToBucketNotificationPtrOutputWithContext(context.Background())
}

func (i *BucketNotification) ToBucketNotificationPtrOutputWithContext(ctx context.Context) BucketNotificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketNotificationPtrOutput)
}

type BucketNotificationPtrInput interface {
	pulumi.Input

	ToBucketNotificationPtrOutput() BucketNotificationPtrOutput
	ToBucketNotificationPtrOutputWithContext(ctx context.Context) BucketNotificationPtrOutput
}

type bucketNotificationPtrType BucketNotificationArgs

func (*bucketNotificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketNotification)(nil))
}

func (i *bucketNotificationPtrType) ToBucketNotificationPtrOutput() BucketNotificationPtrOutput {
	return i.ToBucketNotificationPtrOutputWithContext(context.Background())
}

func (i *bucketNotificationPtrType) ToBucketNotificationPtrOutputWithContext(ctx context.Context) BucketNotificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketNotificationPtrOutput)
}

// BucketNotificationArrayInput is an input type that accepts BucketNotificationArray and BucketNotificationArrayOutput values.
// You can construct a concrete instance of `BucketNotificationArrayInput` via:
//
//          BucketNotificationArray{ BucketNotificationArgs{...} }
type BucketNotificationArrayInput interface {
	pulumi.Input

	ToBucketNotificationArrayOutput() BucketNotificationArrayOutput
	ToBucketNotificationArrayOutputWithContext(context.Context) BucketNotificationArrayOutput
}

type BucketNotificationArray []BucketNotificationInput

func (BucketNotificationArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*BucketNotification)(nil))
}

func (i BucketNotificationArray) ToBucketNotificationArrayOutput() BucketNotificationArrayOutput {
	return i.ToBucketNotificationArrayOutputWithContext(context.Background())
}

func (i BucketNotificationArray) ToBucketNotificationArrayOutputWithContext(ctx context.Context) BucketNotificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketNotificationArrayOutput)
}

// BucketNotificationMapInput is an input type that accepts BucketNotificationMap and BucketNotificationMapOutput values.
// You can construct a concrete instance of `BucketNotificationMapInput` via:
//
//          BucketNotificationMap{ "key": BucketNotificationArgs{...} }
type BucketNotificationMapInput interface {
	pulumi.Input

	ToBucketNotificationMapOutput() BucketNotificationMapOutput
	ToBucketNotificationMapOutputWithContext(context.Context) BucketNotificationMapOutput
}

type BucketNotificationMap map[string]BucketNotificationInput

func (BucketNotificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*BucketNotification)(nil))
}

func (i BucketNotificationMap) ToBucketNotificationMapOutput() BucketNotificationMapOutput {
	return i.ToBucketNotificationMapOutputWithContext(context.Background())
}

func (i BucketNotificationMap) ToBucketNotificationMapOutputWithContext(ctx context.Context) BucketNotificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketNotificationMapOutput)
}

type BucketNotificationOutput struct {
	*pulumi.OutputState
}

func (BucketNotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketNotification)(nil))
}

func (o BucketNotificationOutput) ToBucketNotificationOutput() BucketNotificationOutput {
	return o
}

func (o BucketNotificationOutput) ToBucketNotificationOutputWithContext(ctx context.Context) BucketNotificationOutput {
	return o
}

func (o BucketNotificationOutput) ToBucketNotificationPtrOutput() BucketNotificationPtrOutput {
	return o.ToBucketNotificationPtrOutputWithContext(context.Background())
}

func (o BucketNotificationOutput) ToBucketNotificationPtrOutputWithContext(ctx context.Context) BucketNotificationPtrOutput {
	return o.ApplyT(func(v BucketNotification) *BucketNotification {
		return &v
	}).(BucketNotificationPtrOutput)
}

type BucketNotificationPtrOutput struct {
	*pulumi.OutputState
}

func (BucketNotificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketNotification)(nil))
}

func (o BucketNotificationPtrOutput) ToBucketNotificationPtrOutput() BucketNotificationPtrOutput {
	return o
}

func (o BucketNotificationPtrOutput) ToBucketNotificationPtrOutputWithContext(ctx context.Context) BucketNotificationPtrOutput {
	return o
}

type BucketNotificationArrayOutput struct{ *pulumi.OutputState }

func (BucketNotificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BucketNotification)(nil))
}

func (o BucketNotificationArrayOutput) ToBucketNotificationArrayOutput() BucketNotificationArrayOutput {
	return o
}

func (o BucketNotificationArrayOutput) ToBucketNotificationArrayOutputWithContext(ctx context.Context) BucketNotificationArrayOutput {
	return o
}

func (o BucketNotificationArrayOutput) Index(i pulumi.IntInput) BucketNotificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BucketNotification {
		return vs[0].([]BucketNotification)[vs[1].(int)]
	}).(BucketNotificationOutput)
}

type BucketNotificationMapOutput struct{ *pulumi.OutputState }

func (BucketNotificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]BucketNotification)(nil))
}

func (o BucketNotificationMapOutput) ToBucketNotificationMapOutput() BucketNotificationMapOutput {
	return o
}

func (o BucketNotificationMapOutput) ToBucketNotificationMapOutputWithContext(ctx context.Context) BucketNotificationMapOutput {
	return o
}

func (o BucketNotificationMapOutput) MapIndex(k pulumi.StringInput) BucketNotificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) BucketNotification {
		return vs[0].(map[string]BucketNotification)[vs[1].(string)]
	}).(BucketNotificationOutput)
}

func init() {
	pulumi.RegisterOutputType(BucketNotificationOutput{})
	pulumi.RegisterOutputType(BucketNotificationPtrOutput{})
	pulumi.RegisterOutputType(BucketNotificationArrayOutput{})
	pulumi.RegisterOutputType(BucketNotificationMapOutput{})
}
