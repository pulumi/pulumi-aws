// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a S3 Bucket Notification Configuration. For additional information, see the [Configuring S3 Event Notifications section in the Amazon S3 Developer Guide](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html).
//
// > **NOTE:** S3 Buckets only support a single notification configuration. Declaring multiple `s3.BucketNotification` resources to the same S3 Bucket will cause a perpetual difference in configuration. See the example "Trigger multiple Lambda functions" for an option.
//
// ## Example Usage
//
// ## Import
//
// S3 bucket notification can be imported using the `bucket`, e.g.,
//
// ```sh
//
//	$ pulumi import aws:s3/bucketNotification:BucketNotification bucket_notification bucket-name
//
// ```
type BucketNotification struct {
	pulumi.CustomResourceState

	// Name of the bucket for notification configuration.
	//
	// The following arguments are optional:
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// Whether to enable Amazon EventBridge notifications.
	Eventbridge pulumi.BoolPtrOutput `pulumi:"eventbridge"`
	// Used to configure notifications to a Lambda Function. See below.
	LambdaFunctions BucketNotificationLambdaFunctionArrayOutput `pulumi:"lambdaFunctions"`
	// Notification configuration to SQS Queue. See below.
	Queues BucketNotificationQueueArrayOutput `pulumi:"queues"`
	// Notification configuration to SNS Topic. See below.
	Topics BucketNotificationTopicArrayOutput `pulumi:"topics"`
}

// NewBucketNotification registers a new resource with the given unique name, arguments, and options.
func NewBucketNotification(ctx *pulumi.Context,
	name string, args *BucketNotificationArgs, opts ...pulumi.ResourceOption) (*BucketNotification, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	var resource BucketNotification
	err := ctx.RegisterResource("aws:s3/bucketNotification:BucketNotification", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketNotification gets an existing BucketNotification resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketNotification(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketNotificationState, opts ...pulumi.ResourceOption) (*BucketNotification, error) {
	var resource BucketNotification
	err := ctx.ReadResource("aws:s3/bucketNotification:BucketNotification", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketNotification resources.
type bucketNotificationState struct {
	// Name of the bucket for notification configuration.
	//
	// The following arguments are optional:
	Bucket *string `pulumi:"bucket"`
	// Whether to enable Amazon EventBridge notifications.
	Eventbridge *bool `pulumi:"eventbridge"`
	// Used to configure notifications to a Lambda Function. See below.
	LambdaFunctions []BucketNotificationLambdaFunction `pulumi:"lambdaFunctions"`
	// Notification configuration to SQS Queue. See below.
	Queues []BucketNotificationQueue `pulumi:"queues"`
	// Notification configuration to SNS Topic. See below.
	Topics []BucketNotificationTopic `pulumi:"topics"`
}

type BucketNotificationState struct {
	// Name of the bucket for notification configuration.
	//
	// The following arguments are optional:
	Bucket pulumi.StringPtrInput
	// Whether to enable Amazon EventBridge notifications.
	Eventbridge pulumi.BoolPtrInput
	// Used to configure notifications to a Lambda Function. See below.
	LambdaFunctions BucketNotificationLambdaFunctionArrayInput
	// Notification configuration to SQS Queue. See below.
	Queues BucketNotificationQueueArrayInput
	// Notification configuration to SNS Topic. See below.
	Topics BucketNotificationTopicArrayInput
}

func (BucketNotificationState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketNotificationState)(nil)).Elem()
}

type bucketNotificationArgs struct {
	// Name of the bucket for notification configuration.
	//
	// The following arguments are optional:
	Bucket string `pulumi:"bucket"`
	// Whether to enable Amazon EventBridge notifications.
	Eventbridge *bool `pulumi:"eventbridge"`
	// Used to configure notifications to a Lambda Function. See below.
	LambdaFunctions []BucketNotificationLambdaFunction `pulumi:"lambdaFunctions"`
	// Notification configuration to SQS Queue. See below.
	Queues []BucketNotificationQueue `pulumi:"queues"`
	// Notification configuration to SNS Topic. See below.
	Topics []BucketNotificationTopic `pulumi:"topics"`
}

// The set of arguments for constructing a BucketNotification resource.
type BucketNotificationArgs struct {
	// Name of the bucket for notification configuration.
	//
	// The following arguments are optional:
	Bucket pulumi.StringInput
	// Whether to enable Amazon EventBridge notifications.
	Eventbridge pulumi.BoolPtrInput
	// Used to configure notifications to a Lambda Function. See below.
	LambdaFunctions BucketNotificationLambdaFunctionArrayInput
	// Notification configuration to SQS Queue. See below.
	Queues BucketNotificationQueueArrayInput
	// Notification configuration to SNS Topic. See below.
	Topics BucketNotificationTopicArrayInput
}

func (BucketNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketNotificationArgs)(nil)).Elem()
}

type BucketNotificationInput interface {
	pulumi.Input

	ToBucketNotificationOutput() BucketNotificationOutput
	ToBucketNotificationOutputWithContext(ctx context.Context) BucketNotificationOutput
}

func (*BucketNotification) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketNotification)(nil)).Elem()
}

func (i *BucketNotification) ToBucketNotificationOutput() BucketNotificationOutput {
	return i.ToBucketNotificationOutputWithContext(context.Background())
}

func (i *BucketNotification) ToBucketNotificationOutputWithContext(ctx context.Context) BucketNotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketNotificationOutput)
}

// BucketNotificationArrayInput is an input type that accepts BucketNotificationArray and BucketNotificationArrayOutput values.
// You can construct a concrete instance of `BucketNotificationArrayInput` via:
//
//	BucketNotificationArray{ BucketNotificationArgs{...} }
type BucketNotificationArrayInput interface {
	pulumi.Input

	ToBucketNotificationArrayOutput() BucketNotificationArrayOutput
	ToBucketNotificationArrayOutputWithContext(context.Context) BucketNotificationArrayOutput
}

type BucketNotificationArray []BucketNotificationInput

func (BucketNotificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketNotification)(nil)).Elem()
}

func (i BucketNotificationArray) ToBucketNotificationArrayOutput() BucketNotificationArrayOutput {
	return i.ToBucketNotificationArrayOutputWithContext(context.Background())
}

func (i BucketNotificationArray) ToBucketNotificationArrayOutputWithContext(ctx context.Context) BucketNotificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketNotificationArrayOutput)
}

// BucketNotificationMapInput is an input type that accepts BucketNotificationMap and BucketNotificationMapOutput values.
// You can construct a concrete instance of `BucketNotificationMapInput` via:
//
//	BucketNotificationMap{ "key": BucketNotificationArgs{...} }
type BucketNotificationMapInput interface {
	pulumi.Input

	ToBucketNotificationMapOutput() BucketNotificationMapOutput
	ToBucketNotificationMapOutputWithContext(context.Context) BucketNotificationMapOutput
}

type BucketNotificationMap map[string]BucketNotificationInput

func (BucketNotificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketNotification)(nil)).Elem()
}

func (i BucketNotificationMap) ToBucketNotificationMapOutput() BucketNotificationMapOutput {
	return i.ToBucketNotificationMapOutputWithContext(context.Background())
}

func (i BucketNotificationMap) ToBucketNotificationMapOutputWithContext(ctx context.Context) BucketNotificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketNotificationMapOutput)
}

type BucketNotificationOutput struct{ *pulumi.OutputState }

func (BucketNotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketNotification)(nil)).Elem()
}

func (o BucketNotificationOutput) ToBucketNotificationOutput() BucketNotificationOutput {
	return o
}

func (o BucketNotificationOutput) ToBucketNotificationOutputWithContext(ctx context.Context) BucketNotificationOutput {
	return o
}

// Name of the bucket for notification configuration.
//
// The following arguments are optional:
func (o BucketNotificationOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketNotification) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// Whether to enable Amazon EventBridge notifications.
func (o BucketNotificationOutput) Eventbridge() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BucketNotification) pulumi.BoolPtrOutput { return v.Eventbridge }).(pulumi.BoolPtrOutput)
}

// Used to configure notifications to a Lambda Function. See below.
func (o BucketNotificationOutput) LambdaFunctions() BucketNotificationLambdaFunctionArrayOutput {
	return o.ApplyT(func(v *BucketNotification) BucketNotificationLambdaFunctionArrayOutput { return v.LambdaFunctions }).(BucketNotificationLambdaFunctionArrayOutput)
}

// Notification configuration to SQS Queue. See below.
func (o BucketNotificationOutput) Queues() BucketNotificationQueueArrayOutput {
	return o.ApplyT(func(v *BucketNotification) BucketNotificationQueueArrayOutput { return v.Queues }).(BucketNotificationQueueArrayOutput)
}

// Notification configuration to SNS Topic. See below.
func (o BucketNotificationOutput) Topics() BucketNotificationTopicArrayOutput {
	return o.ApplyT(func(v *BucketNotification) BucketNotificationTopicArrayOutput { return v.Topics }).(BucketNotificationTopicArrayOutput)
}

type BucketNotificationArrayOutput struct{ *pulumi.OutputState }

func (BucketNotificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketNotification)(nil)).Elem()
}

func (o BucketNotificationArrayOutput) ToBucketNotificationArrayOutput() BucketNotificationArrayOutput {
	return o
}

func (o BucketNotificationArrayOutput) ToBucketNotificationArrayOutputWithContext(ctx context.Context) BucketNotificationArrayOutput {
	return o
}

func (o BucketNotificationArrayOutput) Index(i pulumi.IntInput) BucketNotificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BucketNotification {
		return vs[0].([]*BucketNotification)[vs[1].(int)]
	}).(BucketNotificationOutput)
}

type BucketNotificationMapOutput struct{ *pulumi.OutputState }

func (BucketNotificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketNotification)(nil)).Elem()
}

func (o BucketNotificationMapOutput) ToBucketNotificationMapOutput() BucketNotificationMapOutput {
	return o
}

func (o BucketNotificationMapOutput) ToBucketNotificationMapOutputWithContext(ctx context.Context) BucketNotificationMapOutput {
	return o
}

func (o BucketNotificationMapOutput) MapIndex(k pulumi.StringInput) BucketNotificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BucketNotification {
		return vs[0].(map[string]*BucketNotification)[vs[1].(string)]
	}).(BucketNotificationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BucketNotificationInput)(nil)).Elem(), &BucketNotification{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketNotificationArrayInput)(nil)).Elem(), BucketNotificationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketNotificationMapInput)(nil)).Elem(), BucketNotificationMap{})
	pulumi.RegisterOutputType(BucketNotificationOutput{})
	pulumi.RegisterOutputType(BucketNotificationArrayOutput{})
	pulumi.RegisterOutputType(BucketNotificationMapOutput{})
}
