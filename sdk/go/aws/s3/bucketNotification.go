// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package s3

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a S3 Bucket Notification Configuration. For additional information, see the [Configuring S3 Event Notifications section in the Amazon S3 Developer Guide](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html).
//
// > **NOTE:** S3 Buckets only support a single notification configuration. Declaring multiple `s3.BucketNotification` resources to the same S3 Bucket will cause a perpetual difference in configuration. See the example "Trigger multiple Lambda functions" for an option.
type BucketNotification struct {
	pulumi.CustomResourceState

	// The name of the bucket to put notification configuration.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// Used to configure notifications to a Lambda Function (documented below).
	LambdaFunctions BucketNotificationLambdaFunctionArrayOutput `pulumi:"lambdaFunctions"`
	// The notification configuration to SQS Queue (documented below).
	Queues BucketNotificationQueueArrayOutput `pulumi:"queues"`
	// The notification configuration to SNS Topic (documented below).
	Topics BucketNotificationTopicArrayOutput `pulumi:"topics"`
}

// NewBucketNotification registers a new resource with the given unique name, arguments, and options.
func NewBucketNotification(ctx *pulumi.Context,
	name string, args *BucketNotificationArgs, opts ...pulumi.ResourceOption) (*BucketNotification, error) {
	if args == nil || args.Bucket == nil {
		return nil, errors.New("missing required argument 'Bucket'")
	}
	if args == nil {
		args = &BucketNotificationArgs{}
	}
	var resource BucketNotification
	err := ctx.RegisterResource("aws:s3/bucketNotification:BucketNotification", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketNotification gets an existing BucketNotification resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketNotification(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketNotificationState, opts ...pulumi.ResourceOption) (*BucketNotification, error) {
	var resource BucketNotification
	err := ctx.ReadResource("aws:s3/bucketNotification:BucketNotification", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketNotification resources.
type bucketNotificationState struct {
	// The name of the bucket to put notification configuration.
	Bucket *string `pulumi:"bucket"`
	// Used to configure notifications to a Lambda Function (documented below).
	LambdaFunctions []BucketNotificationLambdaFunction `pulumi:"lambdaFunctions"`
	// The notification configuration to SQS Queue (documented below).
	Queues []BucketNotificationQueue `pulumi:"queues"`
	// The notification configuration to SNS Topic (documented below).
	Topics []BucketNotificationTopic `pulumi:"topics"`
}

type BucketNotificationState struct {
	// The name of the bucket to put notification configuration.
	Bucket pulumi.StringPtrInput
	// Used to configure notifications to a Lambda Function (documented below).
	LambdaFunctions BucketNotificationLambdaFunctionArrayInput
	// The notification configuration to SQS Queue (documented below).
	Queues BucketNotificationQueueArrayInput
	// The notification configuration to SNS Topic (documented below).
	Topics BucketNotificationTopicArrayInput
}

func (BucketNotificationState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketNotificationState)(nil)).Elem()
}

type bucketNotificationArgs struct {
	// The name of the bucket to put notification configuration.
	Bucket string `pulumi:"bucket"`
	// Used to configure notifications to a Lambda Function (documented below).
	LambdaFunctions []BucketNotificationLambdaFunction `pulumi:"lambdaFunctions"`
	// The notification configuration to SQS Queue (documented below).
	Queues []BucketNotificationQueue `pulumi:"queues"`
	// The notification configuration to SNS Topic (documented below).
	Topics []BucketNotificationTopic `pulumi:"topics"`
}

// The set of arguments for constructing a BucketNotification resource.
type BucketNotificationArgs struct {
	// The name of the bucket to put notification configuration.
	Bucket pulumi.StringInput
	// Used to configure notifications to a Lambda Function (documented below).
	LambdaFunctions BucketNotificationLambdaFunctionArrayInput
	// The notification configuration to SQS Queue (documented below).
	Queues BucketNotificationQueueArrayInput
	// The notification configuration to SNS Topic (documented below).
	Topics BucketNotificationTopicArrayInput
}

func (BucketNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketNotificationArgs)(nil)).Elem()
}
