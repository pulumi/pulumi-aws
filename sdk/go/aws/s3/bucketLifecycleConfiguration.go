// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an independent configuration resource for S3 bucket [lifecycle configuration](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-lifecycle-mgmt.html).
//
// An S3 Lifecycle configuration consists of one or more Lifecycle rules. Each rule consists of the following:
//
// * Rule metadata (`id` and `status`)
// * Filter identifying objects to which the rule applies
// * One or more transition or expiration actions
//
// For more information see the Amazon S3 User Guide on [`Lifecycle Configuration Elements`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/intro-lifecycle-rules.html).
//
// > S3 Buckets only support a single lifecycle configuration. Declaring multiple `s3.BucketLifecycleConfiguration` resources to the same S3 Bucket will cause a perpetual difference in configuration.
//
// > Lifecycle configurations may take some time to fully propagate to all AWS S3 systems.
// Running Pulumi operations shortly after creating a lifecycle configuration may result in changes that affect configuration idempotence.
// See the Amazon S3 User Guide on [setting lifecycle configuration on a bucket](https://docs.aws.amazon.com/AmazonS3/latest/userguide/how-to-set-lifecycle-configuration-intro.html).
//
// ## Example Usage
//
// ### With neither a filter nor prefix specified
//
// The Lifecycle rule applies to a subset of objects based on the key name prefix (`""`).
//
// This configuration is intended to replicate the default behavior of the `lifecycleRule`
// parameter in the AWS Provider `s3.Bucket` resource prior to `v4.0`.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/s3"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := s3.NewBucketLifecycleConfiguration(ctx, "example", &s3.BucketLifecycleConfigurationArgs{
//				Bucket: pulumi.Any(bucket.Id),
//				Rules: s3.BucketLifecycleConfigurationRuleArray{
//					&s3.BucketLifecycleConfigurationRuleArgs{
//						Id:     pulumi.String("rule-1"),
//						Status: pulumi.String("Enabled"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Specifying an empty filter
//
// The Lifecycle rule applies to all objects in the bucket.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/s3"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := s3.NewBucketLifecycleConfiguration(ctx, "example", &s3.BucketLifecycleConfigurationArgs{
//				Bucket: pulumi.Any(bucket.Id),
//				Rules: s3.BucketLifecycleConfigurationRuleArray{
//					&s3.BucketLifecycleConfigurationRuleArgs{
//						Id:     pulumi.String("rule-1"),
//						Filter: &s3.BucketLifecycleConfigurationRuleFilterArgs{},
//						Status: pulumi.String("Enabled"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Specifying a filter using key prefixes
//
// The Lifecycle rule applies to a subset of objects based on the key name prefix (`logs/`).
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/s3"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := s3.NewBucketLifecycleConfiguration(ctx, "example", &s3.BucketLifecycleConfigurationArgs{
//				Bucket: pulumi.Any(bucket.Id),
//				Rules: s3.BucketLifecycleConfigurationRuleArray{
//					&s3.BucketLifecycleConfigurationRuleArgs{
//						Id: pulumi.String("rule-1"),
//						Filter: &s3.BucketLifecycleConfigurationRuleFilterArgs{
//							Prefix: pulumi.String("logs/"),
//						},
//						Status: pulumi.String("Enabled"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// If you want to apply a Lifecycle action to a subset of objects based on different key name prefixes, specify separate rules.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/s3"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := s3.NewBucketLifecycleConfiguration(ctx, "example", &s3.BucketLifecycleConfigurationArgs{
//				Bucket: pulumi.Any(bucket.Id),
//				Rules: s3.BucketLifecycleConfigurationRuleArray{
//					&s3.BucketLifecycleConfigurationRuleArgs{
//						Id: pulumi.String("rule-1"),
//						Filter: &s3.BucketLifecycleConfigurationRuleFilterArgs{
//							Prefix: pulumi.String("logs/"),
//						},
//						Status: pulumi.String("Enabled"),
//					},
//					&s3.BucketLifecycleConfigurationRuleArgs{
//						Id: pulumi.String("rule-2"),
//						Filter: &s3.BucketLifecycleConfigurationRuleFilterArgs{
//							Prefix: pulumi.String("tmp/"),
//						},
//						Status: pulumi.String("Enabled"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Specifying a filter based on an object tag
//
// The Lifecycle rule specifies a filter based on a tag key and value. The rule then applies only to a subset of objects with the specific tag.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/s3"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := s3.NewBucketLifecycleConfiguration(ctx, "example", &s3.BucketLifecycleConfigurationArgs{
//				Bucket: pulumi.Any(bucket.Id),
//				Rules: s3.BucketLifecycleConfigurationRuleArray{
//					&s3.BucketLifecycleConfigurationRuleArgs{
//						Id: pulumi.String("rule-1"),
//						Filter: &s3.BucketLifecycleConfigurationRuleFilterArgs{
//							Tag: &s3.BucketLifecycleConfigurationRuleFilterTagArgs{
//								Key:   pulumi.String("Name"),
//								Value: pulumi.String("Staging"),
//							},
//						},
//						Status: pulumi.String("Enabled"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Specifying a filter based on multiple tags
//
// The Lifecycle rule directs Amazon S3 to perform lifecycle actions on objects with two tags (with the specific tag keys and values). Notice `tags` is wrapped in the `and` configuration block.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/s3"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := s3.NewBucketLifecycleConfiguration(ctx, "example", &s3.BucketLifecycleConfigurationArgs{
//				Bucket: pulumi.Any(bucket.Id),
//				Rules: s3.BucketLifecycleConfigurationRuleArray{
//					&s3.BucketLifecycleConfigurationRuleArgs{
//						Id: pulumi.String("rule-1"),
//						Filter: &s3.BucketLifecycleConfigurationRuleFilterArgs{
//							And: &s3.BucketLifecycleConfigurationRuleFilterAndArgs{
//								Tags: pulumi.StringMap{
//									"Key1": pulumi.String("Value1"),
//									"Key2": pulumi.String("Value2"),
//								},
//							},
//						},
//						Status: pulumi.String("Enabled"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Specifying a filter based on both prefix and one or more tags
//
// The Lifecycle rule directs Amazon S3 to perform lifecycle actions on objects with the specified prefix and two tags (with the specific tag keys and values). Notice both `prefix` and `tags` are wrapped in the `and` configuration block.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/s3"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := s3.NewBucketLifecycleConfiguration(ctx, "example", &s3.BucketLifecycleConfigurationArgs{
//				Bucket: pulumi.Any(bucket.Id),
//				Rules: s3.BucketLifecycleConfigurationRuleArray{
//					&s3.BucketLifecycleConfigurationRuleArgs{
//						Id: pulumi.String("rule-1"),
//						Filter: &s3.BucketLifecycleConfigurationRuleFilterArgs{
//							And: &s3.BucketLifecycleConfigurationRuleFilterAndArgs{
//								Prefix: pulumi.String("logs/"),
//								Tags: pulumi.StringMap{
//									"Key1": pulumi.String("Value1"),
//									"Key2": pulumi.String("Value2"),
//								},
//							},
//						},
//						Status: pulumi.String("Enabled"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Specifying a filter based on object size
//
// Object size values are in bytes. Maximum filter size is 5TB. Amazon S3 applies a default behavior to your Lifecycle configuration that prevents objects smaller than 128 KB from being transitioned to any storage class. You can allow smaller objects to transition by adding a minimum size (`objectSizeGreaterThan`) or a maximum size (`objectSizeLessThan`) filter that specifies a smaller size to the configuration. This example allows any object smaller than 128 KB to transition to the S3 Glacier Instant Retrieval storage class:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/s3"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := s3.NewBucketLifecycleConfiguration(ctx, "example", &s3.BucketLifecycleConfigurationArgs{
//				Bucket: pulumi.Any(bucket.Id),
//				Rules: s3.BucketLifecycleConfigurationRuleArray{
//					&s3.BucketLifecycleConfigurationRuleArgs{
//						Id: pulumi.String("Allow small object transitions"),
//						Filter: &s3.BucketLifecycleConfigurationRuleFilterArgs{
//							ObjectSizeGreaterThan: pulumi.Int(1),
//						},
//						Status: pulumi.String("Enabled"),
//						Transitions: s3.BucketLifecycleConfigurationRuleTransitionArray{
//							&s3.BucketLifecycleConfigurationRuleTransitionArgs{
//								Days:         pulumi.Int(365),
//								StorageClass: pulumi.String("GLACIER_IR"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Specifying a filter based on object size range and prefix
//
// The `objectSizeGreaterThan` must be less than the `objectSizeLessThan`. Notice both the object size range and prefix are wrapped in the `and` configuration block.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/s3"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := s3.NewBucketLifecycleConfiguration(ctx, "example", &s3.BucketLifecycleConfigurationArgs{
//				Bucket: pulumi.Any(bucket.Id),
//				Rules: s3.BucketLifecycleConfigurationRuleArray{
//					&s3.BucketLifecycleConfigurationRuleArgs{
//						Id: pulumi.String("rule-1"),
//						Filter: &s3.BucketLifecycleConfigurationRuleFilterArgs{
//							And: &s3.BucketLifecycleConfigurationRuleFilterAndArgs{
//								Prefix:                pulumi.String("logs/"),
//								ObjectSizeGreaterThan: pulumi.Int(500),
//								ObjectSizeLessThan:    pulumi.Int(64000),
//							},
//						},
//						Status: pulumi.String("Enabled"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Creating a Lifecycle Configuration for a bucket with versioning
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/s3"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			bucket, err := s3.NewBucket(ctx, "bucket", &s3.BucketArgs{
//				Bucket: pulumi.String("my-bucket"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = s3.NewBucketAcl(ctx, "bucket_acl", &s3.BucketAclArgs{
//				Bucket: bucket.ID(),
//				Acl:    pulumi.String("private"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = s3.NewBucketLifecycleConfiguration(ctx, "bucket-config", &s3.BucketLifecycleConfigurationArgs{
//				Bucket: bucket.ID(),
//				Rules: s3.BucketLifecycleConfigurationRuleArray{
//					&s3.BucketLifecycleConfigurationRuleArgs{
//						Id: pulumi.String("log"),
//						Expiration: &s3.BucketLifecycleConfigurationRuleExpirationArgs{
//							Days: pulumi.Int(90),
//						},
//						Filter: &s3.BucketLifecycleConfigurationRuleFilterArgs{
//							And: &s3.BucketLifecycleConfigurationRuleFilterAndArgs{
//								Prefix: pulumi.String("log/"),
//								Tags: pulumi.StringMap{
//									"rule":      pulumi.String("log"),
//									"autoclean": pulumi.String("true"),
//								},
//							},
//						},
//						Status: pulumi.String("Enabled"),
//						Transitions: s3.BucketLifecycleConfigurationRuleTransitionArray{
//							&s3.BucketLifecycleConfigurationRuleTransitionArgs{
//								Days:         pulumi.Int(30),
//								StorageClass: pulumi.String("STANDARD_IA"),
//							},
//							&s3.BucketLifecycleConfigurationRuleTransitionArgs{
//								Days:         pulumi.Int(60),
//								StorageClass: pulumi.String("GLACIER"),
//							},
//						},
//					},
//					&s3.BucketLifecycleConfigurationRuleArgs{
//						Id: pulumi.String("tmp"),
//						Filter: &s3.BucketLifecycleConfigurationRuleFilterArgs{
//							Prefix: pulumi.String("tmp/"),
//						},
//						Expiration: &s3.BucketLifecycleConfigurationRuleExpirationArgs{
//							Date: pulumi.String("2023-01-13T00:00:00Z"),
//						},
//						Status: pulumi.String("Enabled"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			versioningBucket, err := s3.NewBucket(ctx, "versioning_bucket", &s3.BucketArgs{
//				Bucket: pulumi.String("my-versioning-bucket"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = s3.NewBucketAcl(ctx, "versioning_bucket_acl", &s3.BucketAclArgs{
//				Bucket: versioningBucket.ID(),
//				Acl:    pulumi.String("private"),
//			})
//			if err != nil {
//				return err
//			}
//			versioning, err := s3.NewBucketVersioning(ctx, "versioning", &s3.BucketVersioningArgs{
//				Bucket: versioningBucket.ID(),
//				VersioningConfiguration: &s3.BucketVersioningVersioningConfigurationArgs{
//					Status: pulumi.String("Enabled"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = s3.NewBucketLifecycleConfiguration(ctx, "versioning-bucket-config", &s3.BucketLifecycleConfigurationArgs{
//				Bucket: versioningBucket.ID(),
//				Rules: s3.BucketLifecycleConfigurationRuleArray{
//					&s3.BucketLifecycleConfigurationRuleArgs{
//						Id: pulumi.String("config"),
//						Filter: &s3.BucketLifecycleConfigurationRuleFilterArgs{
//							Prefix: pulumi.String("config/"),
//						},
//						NoncurrentVersionExpiration: &s3.BucketLifecycleConfigurationRuleNoncurrentVersionExpirationArgs{
//							NoncurrentDays: pulumi.Int(90),
//						},
//						NoncurrentVersionTransitions: s3.BucketLifecycleConfigurationRuleNoncurrentVersionTransitionArray{
//							&s3.BucketLifecycleConfigurationRuleNoncurrentVersionTransitionArgs{
//								NoncurrentDays: pulumi.Int(30),
//								StorageClass:   pulumi.String("STANDARD_IA"),
//							},
//							&s3.BucketLifecycleConfigurationRuleNoncurrentVersionTransitionArgs{
//								NoncurrentDays: pulumi.Int(60),
//								StorageClass:   pulumi.String("GLACIER"),
//							},
//						},
//						Status: pulumi.String("Enabled"),
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				versioning,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// If the owner (account ID) of the source bucket differs from the account used to configure the AWS Provider, import using the `bucket` and `expected_bucket_owner` separated by a comma (`,`):
//
// Using `pulumi import`, import an S3 bucket lifecycle configuration using the `bucket` or the `bucket` and `expected_bucket_owner` separated by a comma (`,`). For example:
//
// If the owner (account ID) of the source bucket is the same account used to configure the AWS Provider, import using the `bucket`:
//
// ```sh
// $ pulumi import aws:s3/bucketLifecycleConfiguration:BucketLifecycleConfiguration example bucket-name
// ```
// If the owner (account ID) of the source bucket differs from the account used to configure the AWS Provider, import using the `bucket` and `expected_bucket_owner` separated by a comma (`,`):
//
// ```sh
// $ pulumi import aws:s3/bucketLifecycleConfiguration:BucketLifecycleConfiguration example bucket-name,123456789012
// ```
type BucketLifecycleConfiguration struct {
	pulumi.CustomResourceState

	// Name of the source S3 bucket you want Amazon S3 to monitor.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// Account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
	ExpectedBucketOwner pulumi.StringOutput `pulumi:"expectedBucketOwner"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
	// List of configuration blocks describing the rules managing the replication. See below.
	Rules    BucketLifecycleConfigurationRuleArrayOutput   `pulumi:"rules"`
	Timeouts BucketLifecycleConfigurationTimeoutsPtrOutput `pulumi:"timeouts"`
	// The default minimum object size behavior applied to the lifecycle configuration. Valid values: `all_storage_classes_128K` (default), `variesByStorageClass`. To customize the minimum object size for any transition you can add a `filter` that specifies a custom `objectSizeGreaterThan` or `objectSizeLessThan` value. Custom filters always take precedence over the default transition behavior.
	TransitionDefaultMinimumObjectSize pulumi.StringOutput `pulumi:"transitionDefaultMinimumObjectSize"`
}

// NewBucketLifecycleConfiguration registers a new resource with the given unique name, arguments, and options.
func NewBucketLifecycleConfiguration(ctx *pulumi.Context,
	name string, args *BucketLifecycleConfigurationArgs, opts ...pulumi.ResourceOption) (*BucketLifecycleConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("aws:s3/bucketLifecycleConfigurationV2:BucketLifecycleConfigurationV2"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BucketLifecycleConfiguration
	err := ctx.RegisterResource("aws:s3/bucketLifecycleConfiguration:BucketLifecycleConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketLifecycleConfiguration gets an existing BucketLifecycleConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketLifecycleConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketLifecycleConfigurationState, opts ...pulumi.ResourceOption) (*BucketLifecycleConfiguration, error) {
	var resource BucketLifecycleConfiguration
	err := ctx.ReadResource("aws:s3/bucketLifecycleConfiguration:BucketLifecycleConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketLifecycleConfiguration resources.
type bucketLifecycleConfigurationState struct {
	// Name of the source S3 bucket you want Amazon S3 to monitor.
	Bucket *string `pulumi:"bucket"`
	// Account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
	ExpectedBucketOwner *string `pulumi:"expectedBucketOwner"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// List of configuration blocks describing the rules managing the replication. See below.
	Rules    []BucketLifecycleConfigurationRule    `pulumi:"rules"`
	Timeouts *BucketLifecycleConfigurationTimeouts `pulumi:"timeouts"`
	// The default minimum object size behavior applied to the lifecycle configuration. Valid values: `all_storage_classes_128K` (default), `variesByStorageClass`. To customize the minimum object size for any transition you can add a `filter` that specifies a custom `objectSizeGreaterThan` or `objectSizeLessThan` value. Custom filters always take precedence over the default transition behavior.
	TransitionDefaultMinimumObjectSize *string `pulumi:"transitionDefaultMinimumObjectSize"`
}

type BucketLifecycleConfigurationState struct {
	// Name of the source S3 bucket you want Amazon S3 to monitor.
	Bucket pulumi.StringPtrInput
	// Account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
	ExpectedBucketOwner pulumi.StringPtrInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// List of configuration blocks describing the rules managing the replication. See below.
	Rules    BucketLifecycleConfigurationRuleArrayInput
	Timeouts BucketLifecycleConfigurationTimeoutsPtrInput
	// The default minimum object size behavior applied to the lifecycle configuration. Valid values: `all_storage_classes_128K` (default), `variesByStorageClass`. To customize the minimum object size for any transition you can add a `filter` that specifies a custom `objectSizeGreaterThan` or `objectSizeLessThan` value. Custom filters always take precedence over the default transition behavior.
	TransitionDefaultMinimumObjectSize pulumi.StringPtrInput
}

func (BucketLifecycleConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketLifecycleConfigurationState)(nil)).Elem()
}

type bucketLifecycleConfigurationArgs struct {
	// Name of the source S3 bucket you want Amazon S3 to monitor.
	Bucket string `pulumi:"bucket"`
	// Account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
	ExpectedBucketOwner *string `pulumi:"expectedBucketOwner"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// List of configuration blocks describing the rules managing the replication. See below.
	Rules    []BucketLifecycleConfigurationRule    `pulumi:"rules"`
	Timeouts *BucketLifecycleConfigurationTimeouts `pulumi:"timeouts"`
	// The default minimum object size behavior applied to the lifecycle configuration. Valid values: `all_storage_classes_128K` (default), `variesByStorageClass`. To customize the minimum object size for any transition you can add a `filter` that specifies a custom `objectSizeGreaterThan` or `objectSizeLessThan` value. Custom filters always take precedence over the default transition behavior.
	TransitionDefaultMinimumObjectSize *string `pulumi:"transitionDefaultMinimumObjectSize"`
}

// The set of arguments for constructing a BucketLifecycleConfiguration resource.
type BucketLifecycleConfigurationArgs struct {
	// Name of the source S3 bucket you want Amazon S3 to monitor.
	Bucket pulumi.StringInput
	// Account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
	ExpectedBucketOwner pulumi.StringPtrInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// List of configuration blocks describing the rules managing the replication. See below.
	Rules    BucketLifecycleConfigurationRuleArrayInput
	Timeouts BucketLifecycleConfigurationTimeoutsPtrInput
	// The default minimum object size behavior applied to the lifecycle configuration. Valid values: `all_storage_classes_128K` (default), `variesByStorageClass`. To customize the minimum object size for any transition you can add a `filter` that specifies a custom `objectSizeGreaterThan` or `objectSizeLessThan` value. Custom filters always take precedence over the default transition behavior.
	TransitionDefaultMinimumObjectSize pulumi.StringPtrInput
}

func (BucketLifecycleConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketLifecycleConfigurationArgs)(nil)).Elem()
}

type BucketLifecycleConfigurationInput interface {
	pulumi.Input

	ToBucketLifecycleConfigurationOutput() BucketLifecycleConfigurationOutput
	ToBucketLifecycleConfigurationOutputWithContext(ctx context.Context) BucketLifecycleConfigurationOutput
}

func (*BucketLifecycleConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketLifecycleConfiguration)(nil)).Elem()
}

func (i *BucketLifecycleConfiguration) ToBucketLifecycleConfigurationOutput() BucketLifecycleConfigurationOutput {
	return i.ToBucketLifecycleConfigurationOutputWithContext(context.Background())
}

func (i *BucketLifecycleConfiguration) ToBucketLifecycleConfigurationOutputWithContext(ctx context.Context) BucketLifecycleConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketLifecycleConfigurationOutput)
}

// BucketLifecycleConfigurationArrayInput is an input type that accepts BucketLifecycleConfigurationArray and BucketLifecycleConfigurationArrayOutput values.
// You can construct a concrete instance of `BucketLifecycleConfigurationArrayInput` via:
//
//	BucketLifecycleConfigurationArray{ BucketLifecycleConfigurationArgs{...} }
type BucketLifecycleConfigurationArrayInput interface {
	pulumi.Input

	ToBucketLifecycleConfigurationArrayOutput() BucketLifecycleConfigurationArrayOutput
	ToBucketLifecycleConfigurationArrayOutputWithContext(context.Context) BucketLifecycleConfigurationArrayOutput
}

type BucketLifecycleConfigurationArray []BucketLifecycleConfigurationInput

func (BucketLifecycleConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketLifecycleConfiguration)(nil)).Elem()
}

func (i BucketLifecycleConfigurationArray) ToBucketLifecycleConfigurationArrayOutput() BucketLifecycleConfigurationArrayOutput {
	return i.ToBucketLifecycleConfigurationArrayOutputWithContext(context.Background())
}

func (i BucketLifecycleConfigurationArray) ToBucketLifecycleConfigurationArrayOutputWithContext(ctx context.Context) BucketLifecycleConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketLifecycleConfigurationArrayOutput)
}

// BucketLifecycleConfigurationMapInput is an input type that accepts BucketLifecycleConfigurationMap and BucketLifecycleConfigurationMapOutput values.
// You can construct a concrete instance of `BucketLifecycleConfigurationMapInput` via:
//
//	BucketLifecycleConfigurationMap{ "key": BucketLifecycleConfigurationArgs{...} }
type BucketLifecycleConfigurationMapInput interface {
	pulumi.Input

	ToBucketLifecycleConfigurationMapOutput() BucketLifecycleConfigurationMapOutput
	ToBucketLifecycleConfigurationMapOutputWithContext(context.Context) BucketLifecycleConfigurationMapOutput
}

type BucketLifecycleConfigurationMap map[string]BucketLifecycleConfigurationInput

func (BucketLifecycleConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketLifecycleConfiguration)(nil)).Elem()
}

func (i BucketLifecycleConfigurationMap) ToBucketLifecycleConfigurationMapOutput() BucketLifecycleConfigurationMapOutput {
	return i.ToBucketLifecycleConfigurationMapOutputWithContext(context.Background())
}

func (i BucketLifecycleConfigurationMap) ToBucketLifecycleConfigurationMapOutputWithContext(ctx context.Context) BucketLifecycleConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketLifecycleConfigurationMapOutput)
}

type BucketLifecycleConfigurationOutput struct{ *pulumi.OutputState }

func (BucketLifecycleConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketLifecycleConfiguration)(nil)).Elem()
}

func (o BucketLifecycleConfigurationOutput) ToBucketLifecycleConfigurationOutput() BucketLifecycleConfigurationOutput {
	return o
}

func (o BucketLifecycleConfigurationOutput) ToBucketLifecycleConfigurationOutputWithContext(ctx context.Context) BucketLifecycleConfigurationOutput {
	return o
}

// Name of the source S3 bucket you want Amazon S3 to monitor.
func (o BucketLifecycleConfigurationOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketLifecycleConfiguration) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// Account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
func (o BucketLifecycleConfigurationOutput) ExpectedBucketOwner() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketLifecycleConfiguration) pulumi.StringOutput { return v.ExpectedBucketOwner }).(pulumi.StringOutput)
}

// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
func (o BucketLifecycleConfigurationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketLifecycleConfiguration) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// List of configuration blocks describing the rules managing the replication. See below.
func (o BucketLifecycleConfigurationOutput) Rules() BucketLifecycleConfigurationRuleArrayOutput {
	return o.ApplyT(func(v *BucketLifecycleConfiguration) BucketLifecycleConfigurationRuleArrayOutput { return v.Rules }).(BucketLifecycleConfigurationRuleArrayOutput)
}

func (o BucketLifecycleConfigurationOutput) Timeouts() BucketLifecycleConfigurationTimeoutsPtrOutput {
	return o.ApplyT(func(v *BucketLifecycleConfiguration) BucketLifecycleConfigurationTimeoutsPtrOutput { return v.Timeouts }).(BucketLifecycleConfigurationTimeoutsPtrOutput)
}

// The default minimum object size behavior applied to the lifecycle configuration. Valid values: `all_storage_classes_128K` (default), `variesByStorageClass`. To customize the minimum object size for any transition you can add a `filter` that specifies a custom `objectSizeGreaterThan` or `objectSizeLessThan` value. Custom filters always take precedence over the default transition behavior.
func (o BucketLifecycleConfigurationOutput) TransitionDefaultMinimumObjectSize() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketLifecycleConfiguration) pulumi.StringOutput { return v.TransitionDefaultMinimumObjectSize }).(pulumi.StringOutput)
}

type BucketLifecycleConfigurationArrayOutput struct{ *pulumi.OutputState }

func (BucketLifecycleConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketLifecycleConfiguration)(nil)).Elem()
}

func (o BucketLifecycleConfigurationArrayOutput) ToBucketLifecycleConfigurationArrayOutput() BucketLifecycleConfigurationArrayOutput {
	return o
}

func (o BucketLifecycleConfigurationArrayOutput) ToBucketLifecycleConfigurationArrayOutputWithContext(ctx context.Context) BucketLifecycleConfigurationArrayOutput {
	return o
}

func (o BucketLifecycleConfigurationArrayOutput) Index(i pulumi.IntInput) BucketLifecycleConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BucketLifecycleConfiguration {
		return vs[0].([]*BucketLifecycleConfiguration)[vs[1].(int)]
	}).(BucketLifecycleConfigurationOutput)
}

type BucketLifecycleConfigurationMapOutput struct{ *pulumi.OutputState }

func (BucketLifecycleConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketLifecycleConfiguration)(nil)).Elem()
}

func (o BucketLifecycleConfigurationMapOutput) ToBucketLifecycleConfigurationMapOutput() BucketLifecycleConfigurationMapOutput {
	return o
}

func (o BucketLifecycleConfigurationMapOutput) ToBucketLifecycleConfigurationMapOutputWithContext(ctx context.Context) BucketLifecycleConfigurationMapOutput {
	return o
}

func (o BucketLifecycleConfigurationMapOutput) MapIndex(k pulumi.StringInput) BucketLifecycleConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BucketLifecycleConfiguration {
		return vs[0].(map[string]*BucketLifecycleConfiguration)[vs[1].(string)]
	}).(BucketLifecycleConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BucketLifecycleConfigurationInput)(nil)).Elem(), &BucketLifecycleConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketLifecycleConfigurationArrayInput)(nil)).Elem(), BucketLifecycleConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketLifecycleConfigurationMapInput)(nil)).Elem(), BucketLifecycleConfigurationMap{})
	pulumi.RegisterOutputType(BucketLifecycleConfigurationOutput{})
	pulumi.RegisterOutputType(BucketLifecycleConfigurationArrayOutput{})
	pulumi.RegisterOutputType(BucketLifecycleConfigurationMapOutput{})
}
