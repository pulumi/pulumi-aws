// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appflow

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ConnectorProfile struct {
	pulumi.CustomResourceState

	Arn                    pulumi.StringOutput                          `pulumi:"arn"`
	ConnectionMode         pulumi.StringOutput                          `pulumi:"connectionMode"`
	ConnectorLabel         pulumi.StringPtrOutput                       `pulumi:"connectorLabel"`
	ConnectorProfileConfig ConnectorProfileConnectorProfileConfigOutput `pulumi:"connectorProfileConfig"`
	ConnectorType          pulumi.StringOutput                          `pulumi:"connectorType"`
	CredentialsArn         pulumi.StringOutput                          `pulumi:"credentialsArn"`
	KmsArn                 pulumi.StringOutput                          `pulumi:"kmsArn"`
	Name                   pulumi.StringOutput                          `pulumi:"name"`
}

// NewConnectorProfile registers a new resource with the given unique name, arguments, and options.
func NewConnectorProfile(ctx *pulumi.Context,
	name string, args *ConnectorProfileArgs, opts ...pulumi.ResourceOption) (*ConnectorProfile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionMode == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionMode'")
	}
	if args.ConnectorProfileConfig == nil {
		return nil, errors.New("invalid value for required argument 'ConnectorProfileConfig'")
	}
	if args.ConnectorType == nil {
		return nil, errors.New("invalid value for required argument 'ConnectorType'")
	}
	var resource ConnectorProfile
	err := ctx.RegisterResource("aws:appflow/connectorProfile:ConnectorProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectorProfile gets an existing ConnectorProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectorProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectorProfileState, opts ...pulumi.ResourceOption) (*ConnectorProfile, error) {
	var resource ConnectorProfile
	err := ctx.ReadResource("aws:appflow/connectorProfile:ConnectorProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectorProfile resources.
type connectorProfileState struct {
	Arn                    *string                                 `pulumi:"arn"`
	ConnectionMode         *string                                 `pulumi:"connectionMode"`
	ConnectorLabel         *string                                 `pulumi:"connectorLabel"`
	ConnectorProfileConfig *ConnectorProfileConnectorProfileConfig `pulumi:"connectorProfileConfig"`
	ConnectorType          *string                                 `pulumi:"connectorType"`
	CredentialsArn         *string                                 `pulumi:"credentialsArn"`
	KmsArn                 *string                                 `pulumi:"kmsArn"`
	Name                   *string                                 `pulumi:"name"`
}

type ConnectorProfileState struct {
	Arn                    pulumi.StringPtrInput
	ConnectionMode         pulumi.StringPtrInput
	ConnectorLabel         pulumi.StringPtrInput
	ConnectorProfileConfig ConnectorProfileConnectorProfileConfigPtrInput
	ConnectorType          pulumi.StringPtrInput
	CredentialsArn         pulumi.StringPtrInput
	KmsArn                 pulumi.StringPtrInput
	Name                   pulumi.StringPtrInput
}

func (ConnectorProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorProfileState)(nil)).Elem()
}

type connectorProfileArgs struct {
	ConnectionMode         string                                 `pulumi:"connectionMode"`
	ConnectorLabel         *string                                `pulumi:"connectorLabel"`
	ConnectorProfileConfig ConnectorProfileConnectorProfileConfig `pulumi:"connectorProfileConfig"`
	ConnectorType          string                                 `pulumi:"connectorType"`
	KmsArn                 *string                                `pulumi:"kmsArn"`
	Name                   *string                                `pulumi:"name"`
}

// The set of arguments for constructing a ConnectorProfile resource.
type ConnectorProfileArgs struct {
	ConnectionMode         pulumi.StringInput
	ConnectorLabel         pulumi.StringPtrInput
	ConnectorProfileConfig ConnectorProfileConnectorProfileConfigInput
	ConnectorType          pulumi.StringInput
	KmsArn                 pulumi.StringPtrInput
	Name                   pulumi.StringPtrInput
}

func (ConnectorProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorProfileArgs)(nil)).Elem()
}

type ConnectorProfileInput interface {
	pulumi.Input

	ToConnectorProfileOutput() ConnectorProfileOutput
	ToConnectorProfileOutputWithContext(ctx context.Context) ConnectorProfileOutput
}

func (*ConnectorProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorProfile)(nil)).Elem()
}

func (i *ConnectorProfile) ToConnectorProfileOutput() ConnectorProfileOutput {
	return i.ToConnectorProfileOutputWithContext(context.Background())
}

func (i *ConnectorProfile) ToConnectorProfileOutputWithContext(ctx context.Context) ConnectorProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileOutput)
}

// ConnectorProfileArrayInput is an input type that accepts ConnectorProfileArray and ConnectorProfileArrayOutput values.
// You can construct a concrete instance of `ConnectorProfileArrayInput` via:
//
//	ConnectorProfileArray{ ConnectorProfileArgs{...} }
type ConnectorProfileArrayInput interface {
	pulumi.Input

	ToConnectorProfileArrayOutput() ConnectorProfileArrayOutput
	ToConnectorProfileArrayOutputWithContext(context.Context) ConnectorProfileArrayOutput
}

type ConnectorProfileArray []ConnectorProfileInput

func (ConnectorProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorProfile)(nil)).Elem()
}

func (i ConnectorProfileArray) ToConnectorProfileArrayOutput() ConnectorProfileArrayOutput {
	return i.ToConnectorProfileArrayOutputWithContext(context.Background())
}

func (i ConnectorProfileArray) ToConnectorProfileArrayOutputWithContext(ctx context.Context) ConnectorProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileArrayOutput)
}

// ConnectorProfileMapInput is an input type that accepts ConnectorProfileMap and ConnectorProfileMapOutput values.
// You can construct a concrete instance of `ConnectorProfileMapInput` via:
//
//	ConnectorProfileMap{ "key": ConnectorProfileArgs{...} }
type ConnectorProfileMapInput interface {
	pulumi.Input

	ToConnectorProfileMapOutput() ConnectorProfileMapOutput
	ToConnectorProfileMapOutputWithContext(context.Context) ConnectorProfileMapOutput
}

type ConnectorProfileMap map[string]ConnectorProfileInput

func (ConnectorProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorProfile)(nil)).Elem()
}

func (i ConnectorProfileMap) ToConnectorProfileMapOutput() ConnectorProfileMapOutput {
	return i.ToConnectorProfileMapOutputWithContext(context.Background())
}

func (i ConnectorProfileMap) ToConnectorProfileMapOutputWithContext(ctx context.Context) ConnectorProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorProfileMapOutput)
}

type ConnectorProfileOutput struct{ *pulumi.OutputState }

func (ConnectorProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorProfile)(nil)).Elem()
}

func (o ConnectorProfileOutput) ToConnectorProfileOutput() ConnectorProfileOutput {
	return o
}

func (o ConnectorProfileOutput) ToConnectorProfileOutputWithContext(ctx context.Context) ConnectorProfileOutput {
	return o
}

func (o ConnectorProfileOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorProfile) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ConnectorProfileOutput) ConnectionMode() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorProfile) pulumi.StringOutput { return v.ConnectionMode }).(pulumi.StringOutput)
}

func (o ConnectorProfileOutput) ConnectorLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorProfile) pulumi.StringPtrOutput { return v.ConnectorLabel }).(pulumi.StringPtrOutput)
}

func (o ConnectorProfileOutput) ConnectorProfileConfig() ConnectorProfileConnectorProfileConfigOutput {
	return o.ApplyT(func(v *ConnectorProfile) ConnectorProfileConnectorProfileConfigOutput {
		return v.ConnectorProfileConfig
	}).(ConnectorProfileConnectorProfileConfigOutput)
}

func (o ConnectorProfileOutput) ConnectorType() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorProfile) pulumi.StringOutput { return v.ConnectorType }).(pulumi.StringOutput)
}

func (o ConnectorProfileOutput) CredentialsArn() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorProfile) pulumi.StringOutput { return v.CredentialsArn }).(pulumi.StringOutput)
}

func (o ConnectorProfileOutput) KmsArn() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorProfile) pulumi.StringOutput { return v.KmsArn }).(pulumi.StringOutput)
}

func (o ConnectorProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type ConnectorProfileArrayOutput struct{ *pulumi.OutputState }

func (ConnectorProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorProfile)(nil)).Elem()
}

func (o ConnectorProfileArrayOutput) ToConnectorProfileArrayOutput() ConnectorProfileArrayOutput {
	return o
}

func (o ConnectorProfileArrayOutput) ToConnectorProfileArrayOutputWithContext(ctx context.Context) ConnectorProfileArrayOutput {
	return o
}

func (o ConnectorProfileArrayOutput) Index(i pulumi.IntInput) ConnectorProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectorProfile {
		return vs[0].([]*ConnectorProfile)[vs[1].(int)]
	}).(ConnectorProfileOutput)
}

type ConnectorProfileMapOutput struct{ *pulumi.OutputState }

func (ConnectorProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorProfile)(nil)).Elem()
}

func (o ConnectorProfileMapOutput) ToConnectorProfileMapOutput() ConnectorProfileMapOutput {
	return o
}

func (o ConnectorProfileMapOutput) ToConnectorProfileMapOutputWithContext(ctx context.Context) ConnectorProfileMapOutput {
	return o
}

func (o ConnectorProfileMapOutput) MapIndex(k pulumi.StringInput) ConnectorProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectorProfile {
		return vs[0].(map[string]*ConnectorProfile)[vs[1].(string)]
	}).(ConnectorProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorProfileInput)(nil)).Elem(), &ConnectorProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorProfileArrayInput)(nil)).Elem(), ConnectorProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorProfileMapInput)(nil)).Elem(), ConnectorProfileMap{})
	pulumi.RegisterOutputType(ConnectorProfileOutput{})
	pulumi.RegisterOutputType(ConnectorProfileArrayOutput{})
	pulumi.RegisterOutputType(ConnectorProfileMapOutput{})
}
