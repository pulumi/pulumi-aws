// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appflow

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an AppFlow flow resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/appflow"
// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/s3"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleSourceBucketV2, err := s3.NewBucketV2(ctx, "exampleSourceBucketV2", nil)
// 		if err != nil {
// 			return err
// 		}
// 		exampleSourceBucketPolicy, err := s3.NewBucketPolicy(ctx, "exampleSourceBucketPolicy", &s3.BucketPolicyArgs{
// 			Bucket: exampleSourceBucketV2.ID(),
// 			Policy: pulumi.Any(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "    \"Statement\": [\n", "        {\n", "            \"Effect\": \"Allow\",\n", "            \"Sid\": \"AllowAppFlowSourceActions\",\n", "            \"Principal\": {\n", "                \"Service\": \"appflow.amazonaws.com\"\n", "            },\n", "            \"Action\": [\n", "                \"s3:ListBucket\",\n", "                \"s3:GetObject\"\n", "            ],\n", "            \"Resource\": [\n", "                \"arn:aws:s3:::example_source\",\n", "                \"arn:aws:s3:::example_source/*\"\n", "            ]\n", "        }\n", "    ],\n", "	\"Version\": \"2012-10-17\"\n", "}\n")),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = s3.NewBucketObjectv2(ctx, "exampleBucketObjectv2", &s3.BucketObjectv2Args{
// 			Bucket: exampleSourceBucketV2.ID(),
// 			Key:    pulumi.String("example_source.csv"),
// 			Source: pulumi.NewFileAsset("example_source.csv"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleDestinationBucketV2, err := s3.NewBucketV2(ctx, "exampleDestinationBucketV2", nil)
// 		if err != nil {
// 			return err
// 		}
// 		exampleDestinationBucketPolicy, err := s3.NewBucketPolicy(ctx, "exampleDestinationBucketPolicy", &s3.BucketPolicyArgs{
// 			Bucket: exampleDestinationBucketV2.ID(),
// 			Policy: pulumi.Any(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "\n", "{\n", "    \"Statement\": [\n", "        {\n", "            \"Effect\": \"Allow\",\n", "            \"Sid\": \"AllowAppFlowDestinationActions\",\n", "            \"Principal\": {\n", "                \"Service\": \"appflow.amazonaws.com\"\n", "            },\n", "            \"Action\": [\n", "                \"s3:PutObject\",\n", "                \"s3:AbortMultipartUpload\",\n", "                \"s3:ListMultipartUploadParts\",\n", "                \"s3:ListBucketMultipartUploads\",\n", "                \"s3:GetBucketAcl\",\n", "                \"s3:PutObjectAcl\"\n", "            ],\n", "            \"Resource\": [\n", "                \"arn:aws:s3:::example_destination\",\n", "                \"arn:aws:s3:::example_destination/*\"\n", "            ]\n", "        }\n", "    ],\n", "	\"Version\": \"2012-10-17\"\n", "}\n")),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = appflow.NewFlow(ctx, "exampleFlow", &appflow.FlowArgs{
// 			SourceFlowConfig: &appflow.FlowSourceFlowConfigArgs{
// 				ConnectorType: pulumi.String("S3"),
// 				SourceConnectorProperties: &appflow.FlowSourceFlowConfigSourceConnectorPropertiesArgs{
// 					S3: &appflow.FlowSourceFlowConfigSourceConnectorPropertiesS3Args{
// 						BucketName:   exampleSourceBucketPolicy.Bucket,
// 						BucketPrefix: pulumi.String("example"),
// 					},
// 				},
// 			},
// 			DestinationFlowConfigs: appflow.FlowDestinationFlowConfigArray{
// 				&appflow.FlowDestinationFlowConfigArgs{
// 					ConnectorType: pulumi.String("S3"),
// 					DestinationConnectorProperties: &appflow.FlowDestinationFlowConfigDestinationConnectorPropertiesArgs{
// 						S3: &appflow.FlowDestinationFlowConfigDestinationConnectorPropertiesS3Args{
// 							BucketName: exampleDestinationBucketPolicy.Bucket,
// 							S3OutputFormatConfig: &appflow.FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigArgs{
// 								PrefixConfig: &appflow.FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigArgs{
// 									PrefixType: pulumi.String("PATH"),
// 								},
// 							},
// 						},
// 					},
// 				},
// 			},
// 			Tasks: appflow.FlowTaskArray{
// 				&appflow.FlowTaskArgs{
// 					SourceFields: pulumi.StringArray{
// 						pulumi.String("exampleField"),
// 					},
// 					DestinationField: pulumi.String("exampleField"),
// 					TaskType:         pulumi.String("Map"),
// 					ConnectorOperators: appflow.FlowTaskConnectorOperatorArray{
// 						&appflow.FlowTaskConnectorOperatorArgs{
// 							S3: pulumi.String("NO_OP"),
// 						},
// 					},
// 				},
// 			},
// 			TriggerConfig: &appflow.FlowTriggerConfigArgs{
// 				TriggerType: pulumi.String("OnDemand"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// AppFlow flows can be imported using the `arn`, e.g.
//
// ```sh
//  $ pulumi import aws:appflow/flow:Flow example arn:aws:appflow:us-west-2:123456789012:flow/example-flow
// ```
type Flow struct {
	pulumi.CustomResourceState

	// The flow's Amazon Resource Name (ARN).
	Arn pulumi.StringOutput `pulumi:"arn"`
	// A description of the flow you want to create.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A Destination Flow Config that controls how Amazon AppFlow places data in the destination connector.
	DestinationFlowConfigs FlowDestinationFlowConfigArrayOutput `pulumi:"destinationFlowConfigs"`
	// The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key.
	KmsArn pulumi.StringOutput `pulumi:"kmsArn"`
	// The name of the flow.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Source Flow Config that controls how Amazon AppFlow retrieves data from the source connector.
	SourceFlowConfig FlowSourceFlowConfigOutput `pulumi:"sourceFlowConfig"`
	// Key-value mapping of resource tags. If configured with a provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// A Task that Amazon AppFlow performs while transferring the data in the flow run.
	Tasks FlowTaskArrayOutput `pulumi:"tasks"`
	// A Trigger that determine how and when the flow runs.
	TriggerConfig FlowTriggerConfigOutput `pulumi:"triggerConfig"`
}

// NewFlow registers a new resource with the given unique name, arguments, and options.
func NewFlow(ctx *pulumi.Context,
	name string, args *FlowArgs, opts ...pulumi.ResourceOption) (*Flow, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationFlowConfigs == nil {
		return nil, errors.New("invalid value for required argument 'DestinationFlowConfigs'")
	}
	if args.SourceFlowConfig == nil {
		return nil, errors.New("invalid value for required argument 'SourceFlowConfig'")
	}
	if args.Tasks == nil {
		return nil, errors.New("invalid value for required argument 'Tasks'")
	}
	if args.TriggerConfig == nil {
		return nil, errors.New("invalid value for required argument 'TriggerConfig'")
	}
	var resource Flow
	err := ctx.RegisterResource("aws:appflow/flow:Flow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFlow gets an existing Flow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFlow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FlowState, opts ...pulumi.ResourceOption) (*Flow, error) {
	var resource Flow
	err := ctx.ReadResource("aws:appflow/flow:Flow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Flow resources.
type flowState struct {
	// The flow's Amazon Resource Name (ARN).
	Arn *string `pulumi:"arn"`
	// A description of the flow you want to create.
	Description *string `pulumi:"description"`
	// A Destination Flow Config that controls how Amazon AppFlow places data in the destination connector.
	DestinationFlowConfigs []FlowDestinationFlowConfig `pulumi:"destinationFlowConfigs"`
	// The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key.
	KmsArn *string `pulumi:"kmsArn"`
	// The name of the flow.
	Name *string `pulumi:"name"`
	// The Source Flow Config that controls how Amazon AppFlow retrieves data from the source connector.
	SourceFlowConfig *FlowSourceFlowConfig `pulumi:"sourceFlowConfig"`
	// Key-value mapping of resource tags. If configured with a provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).
	TagsAll map[string]string `pulumi:"tagsAll"`
	// A Task that Amazon AppFlow performs while transferring the data in the flow run.
	Tasks []FlowTask `pulumi:"tasks"`
	// A Trigger that determine how and when the flow runs.
	TriggerConfig *FlowTriggerConfig `pulumi:"triggerConfig"`
}

type FlowState struct {
	// The flow's Amazon Resource Name (ARN).
	Arn pulumi.StringPtrInput
	// A description of the flow you want to create.
	Description pulumi.StringPtrInput
	// A Destination Flow Config that controls how Amazon AppFlow places data in the destination connector.
	DestinationFlowConfigs FlowDestinationFlowConfigArrayInput
	// The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key.
	KmsArn pulumi.StringPtrInput
	// The name of the flow.
	Name pulumi.StringPtrInput
	// The Source Flow Config that controls how Amazon AppFlow retrieves data from the source connector.
	SourceFlowConfig FlowSourceFlowConfigPtrInput
	// Key-value mapping of resource tags. If configured with a provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).
	TagsAll pulumi.StringMapInput
	// A Task that Amazon AppFlow performs while transferring the data in the flow run.
	Tasks FlowTaskArrayInput
	// A Trigger that determine how and when the flow runs.
	TriggerConfig FlowTriggerConfigPtrInput
}

func (FlowState) ElementType() reflect.Type {
	return reflect.TypeOf((*flowState)(nil)).Elem()
}

type flowArgs struct {
	// A description of the flow you want to create.
	Description *string `pulumi:"description"`
	// A Destination Flow Config that controls how Amazon AppFlow places data in the destination connector.
	DestinationFlowConfigs []FlowDestinationFlowConfig `pulumi:"destinationFlowConfigs"`
	// The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key.
	KmsArn *string `pulumi:"kmsArn"`
	// The name of the flow.
	Name *string `pulumi:"name"`
	// The Source Flow Config that controls how Amazon AppFlow retrieves data from the source connector.
	SourceFlowConfig FlowSourceFlowConfig `pulumi:"sourceFlowConfig"`
	// Key-value mapping of resource tags. If configured with a provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).
	TagsAll map[string]string `pulumi:"tagsAll"`
	// A Task that Amazon AppFlow performs while transferring the data in the flow run.
	Tasks []FlowTask `pulumi:"tasks"`
	// A Trigger that determine how and when the flow runs.
	TriggerConfig FlowTriggerConfig `pulumi:"triggerConfig"`
}

// The set of arguments for constructing a Flow resource.
type FlowArgs struct {
	// A description of the flow you want to create.
	Description pulumi.StringPtrInput
	// A Destination Flow Config that controls how Amazon AppFlow places data in the destination connector.
	DestinationFlowConfigs FlowDestinationFlowConfigArrayInput
	// The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key.
	KmsArn pulumi.StringPtrInput
	// The name of the flow.
	Name pulumi.StringPtrInput
	// The Source Flow Config that controls how Amazon AppFlow retrieves data from the source connector.
	SourceFlowConfig FlowSourceFlowConfigInput
	// Key-value mapping of resource tags. If configured with a provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).
	TagsAll pulumi.StringMapInput
	// A Task that Amazon AppFlow performs while transferring the data in the flow run.
	Tasks FlowTaskArrayInput
	// A Trigger that determine how and when the flow runs.
	TriggerConfig FlowTriggerConfigInput
}

func (FlowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*flowArgs)(nil)).Elem()
}

type FlowInput interface {
	pulumi.Input

	ToFlowOutput() FlowOutput
	ToFlowOutputWithContext(ctx context.Context) FlowOutput
}

func (*Flow) ElementType() reflect.Type {
	return reflect.TypeOf((**Flow)(nil)).Elem()
}

func (i *Flow) ToFlowOutput() FlowOutput {
	return i.ToFlowOutputWithContext(context.Background())
}

func (i *Flow) ToFlowOutputWithContext(ctx context.Context) FlowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowOutput)
}

// FlowArrayInput is an input type that accepts FlowArray and FlowArrayOutput values.
// You can construct a concrete instance of `FlowArrayInput` via:
//
//          FlowArray{ FlowArgs{...} }
type FlowArrayInput interface {
	pulumi.Input

	ToFlowArrayOutput() FlowArrayOutput
	ToFlowArrayOutputWithContext(context.Context) FlowArrayOutput
}

type FlowArray []FlowInput

func (FlowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Flow)(nil)).Elem()
}

func (i FlowArray) ToFlowArrayOutput() FlowArrayOutput {
	return i.ToFlowArrayOutputWithContext(context.Background())
}

func (i FlowArray) ToFlowArrayOutputWithContext(ctx context.Context) FlowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowArrayOutput)
}

// FlowMapInput is an input type that accepts FlowMap and FlowMapOutput values.
// You can construct a concrete instance of `FlowMapInput` via:
//
//          FlowMap{ "key": FlowArgs{...} }
type FlowMapInput interface {
	pulumi.Input

	ToFlowMapOutput() FlowMapOutput
	ToFlowMapOutputWithContext(context.Context) FlowMapOutput
}

type FlowMap map[string]FlowInput

func (FlowMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Flow)(nil)).Elem()
}

func (i FlowMap) ToFlowMapOutput() FlowMapOutput {
	return i.ToFlowMapOutputWithContext(context.Background())
}

func (i FlowMap) ToFlowMapOutputWithContext(ctx context.Context) FlowMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowMapOutput)
}

type FlowOutput struct{ *pulumi.OutputState }

func (FlowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Flow)(nil)).Elem()
}

func (o FlowOutput) ToFlowOutput() FlowOutput {
	return o
}

func (o FlowOutput) ToFlowOutputWithContext(ctx context.Context) FlowOutput {
	return o
}

// The flow's Amazon Resource Name (ARN).
func (o FlowOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Flow) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// A description of the flow you want to create.
func (o FlowOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Flow) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A Destination Flow Config that controls how Amazon AppFlow places data in the destination connector.
func (o FlowOutput) DestinationFlowConfigs() FlowDestinationFlowConfigArrayOutput {
	return o.ApplyT(func(v *Flow) FlowDestinationFlowConfigArrayOutput { return v.DestinationFlowConfigs }).(FlowDestinationFlowConfigArrayOutput)
}

// The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key.
func (o FlowOutput) KmsArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Flow) pulumi.StringOutput { return v.KmsArn }).(pulumi.StringOutput)
}

// The name of the flow.
func (o FlowOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Flow) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Source Flow Config that controls how Amazon AppFlow retrieves data from the source connector.
func (o FlowOutput) SourceFlowConfig() FlowSourceFlowConfigOutput {
	return o.ApplyT(func(v *Flow) FlowSourceFlowConfigOutput { return v.SourceFlowConfig }).(FlowSourceFlowConfigOutput)
}

// Key-value mapping of resource tags. If configured with a provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
func (o FlowOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Flow) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).
func (o FlowOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Flow) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// A Task that Amazon AppFlow performs while transferring the data in the flow run.
func (o FlowOutput) Tasks() FlowTaskArrayOutput {
	return o.ApplyT(func(v *Flow) FlowTaskArrayOutput { return v.Tasks }).(FlowTaskArrayOutput)
}

// A Trigger that determine how and when the flow runs.
func (o FlowOutput) TriggerConfig() FlowTriggerConfigOutput {
	return o.ApplyT(func(v *Flow) FlowTriggerConfigOutput { return v.TriggerConfig }).(FlowTriggerConfigOutput)
}

type FlowArrayOutput struct{ *pulumi.OutputState }

func (FlowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Flow)(nil)).Elem()
}

func (o FlowArrayOutput) ToFlowArrayOutput() FlowArrayOutput {
	return o
}

func (o FlowArrayOutput) ToFlowArrayOutputWithContext(ctx context.Context) FlowArrayOutput {
	return o
}

func (o FlowArrayOutput) Index(i pulumi.IntInput) FlowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Flow {
		return vs[0].([]*Flow)[vs[1].(int)]
	}).(FlowOutput)
}

type FlowMapOutput struct{ *pulumi.OutputState }

func (FlowMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Flow)(nil)).Elem()
}

func (o FlowMapOutput) ToFlowMapOutput() FlowMapOutput {
	return o
}

func (o FlowMapOutput) ToFlowMapOutputWithContext(ctx context.Context) FlowMapOutput {
	return o
}

func (o FlowMapOutput) MapIndex(k pulumi.StringInput) FlowOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Flow {
		return vs[0].(map[string]*Flow)[vs[1].(string)]
	}).(FlowOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FlowInput)(nil)).Elem(), &Flow{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowArrayInput)(nil)).Elem(), FlowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowMapInput)(nil)).Elem(), FlowMap{})
	pulumi.RegisterOutputType(FlowOutput{})
	pulumi.RegisterOutputType(FlowArrayOutput{})
	pulumi.RegisterOutputType(FlowMapOutput{})
}
