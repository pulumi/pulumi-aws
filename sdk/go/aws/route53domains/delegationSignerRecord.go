// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53domains

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to manage a [delegation signer record](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-configuring-dnssec-enable-signing.html#dns-configuring-dnssec-enable-signing-step-1) in the parent DNS zone for domains registered with Route53.
//
// ## Example Usage
//
// ### Basic Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"encoding/json"
//	"fmt"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/kms"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/route53"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/route53domains"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := aws.GetCallerIdentity(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"statement": []interface{}{
//					map[string]interface{}{
//						"action": []string{
//							"kms:DescribeKey",
//							"kms:GetPublicKey",
//							"kms:Sign",
//						},
//						"effect": "Allow",
//						"principal": map[string]interface{}{
//							"service": "dnssec-route53.amazonaws.com",
//						},
//						"sid":      "Allow Route 53 DNSSEC Service",
//						"resource": "*",
//						"condition": map[string]interface{}{
//							"stringEquals": map[string]interface{}{
//								"aws:SourceAccount": current.AccountId,
//							},
//							"arnLike": map[string]interface{}{
//								"aws:SourceArn": "arn:aws:route53:::hostedzone/*",
//							},
//						},
//					},
//					map[string]interface{}{
//						"action": "kms:CreateGrant",
//						"effect": "Allow",
//						"principal": map[string]interface{}{
//							"service": "dnssec-route53.amazonaws.com",
//						},
//						"sid":      "Allow Route 53 DNSSEC Service to CreateGrant",
//						"resource": "*",
//						"condition": map[string]interface{}{
//							"bool": map[string]interface{}{
//								"kms:GrantIsForAWSResource": "true",
//							},
//						},
//					},
//					map[string]interface{}{
//						"action": "kms:*",
//						"effect": "Allow",
//						"principal": map[string]interface{}{
//							"AWS": fmt.Sprintf("arn:aws:iam::%v:root", current.AccountId),
//						},
//						"resource": "*",
//						"sid":      "Enable IAM User Permissions",
//					},
//				},
//				"version": "2012-10-17",
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = kms.NewKey(ctx, "example", &kms.KeyArgs{
//				CustomerMasterKeySpec: pulumi.String("ECC_NIST_P256"),
//				DeletionWindowInDays:  pulumi.Int(7),
//				KeyUsage:              pulumi.String("SIGN_VERIFY"),
//				Policy:                pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = route53.NewZone(ctx, "example", &route53.ZoneArgs{
//				Name: pulumi.String("example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleKeySigningKey, err := route53.NewKeySigningKey(ctx, "example", &route53.KeySigningKeyArgs{
//				HostedZoneId:            pulumi.Any(test.Id),
//				KeyManagementServiceArn: pulumi.Any(testAwsKmsKey.Arn),
//				Name:                    pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = route53.NewHostedZoneDnsSec(ctx, "example", &route53.HostedZoneDnsSecArgs{
//				HostedZoneId: exampleKeySigningKey.HostedZoneId,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = route53domains.NewDelegationSignerRecord(ctx, "example", &route53domains.DelegationSignerRecordArgs{
//				DomainName: pulumi.String("example.com"),
//				SigningAttributes: &route53domains.DelegationSignerRecordSigningAttributesArgs{
//					Algorithm: exampleKeySigningKey.SigningAlgorithmType,
//					Flags:     exampleKeySigningKey.Flag,
//					PublicKey: exampleKeySigningKey.PublicKey,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Using `pulumi import`, import delegation signer records using the domain name and DNSSEC key ID, separated by a comma (`,`). For example:
//
// ```sh
// $ pulumi import aws:route53domains/delegationSignerRecord:DelegationSignerRecord example example.com,40DE3534F5324DBDAC598ACEDB5B1E26A5368732D9C791D1347E4FBDDF6FC343
// ```
type DelegationSignerRecord struct {
	pulumi.CustomResourceState

	// An ID assigned to the created DS record.
	DnssecKeyId pulumi.StringOutput `pulumi:"dnssecKeyId"`
	// The name of the domain that will have its parent DNS zone updated with the Delegation Signer record.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// The information about a key, including the algorithm, public key-value, and flags.
	SigningAttributes DelegationSignerRecordSigningAttributesPtrOutput `pulumi:"signingAttributes"`
	Timeouts          DelegationSignerRecordTimeoutsPtrOutput          `pulumi:"timeouts"`
}

// NewDelegationSignerRecord registers a new resource with the given unique name, arguments, and options.
func NewDelegationSignerRecord(ctx *pulumi.Context,
	name string, args *DelegationSignerRecordArgs, opts ...pulumi.ResourceOption) (*DelegationSignerRecord, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DelegationSignerRecord
	err := ctx.RegisterResource("aws:route53domains/delegationSignerRecord:DelegationSignerRecord", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDelegationSignerRecord gets an existing DelegationSignerRecord resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDelegationSignerRecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DelegationSignerRecordState, opts ...pulumi.ResourceOption) (*DelegationSignerRecord, error) {
	var resource DelegationSignerRecord
	err := ctx.ReadResource("aws:route53domains/delegationSignerRecord:DelegationSignerRecord", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DelegationSignerRecord resources.
type delegationSignerRecordState struct {
	// An ID assigned to the created DS record.
	DnssecKeyId *string `pulumi:"dnssecKeyId"`
	// The name of the domain that will have its parent DNS zone updated with the Delegation Signer record.
	DomainName *string `pulumi:"domainName"`
	// The information about a key, including the algorithm, public key-value, and flags.
	SigningAttributes *DelegationSignerRecordSigningAttributes `pulumi:"signingAttributes"`
	Timeouts          *DelegationSignerRecordTimeouts          `pulumi:"timeouts"`
}

type DelegationSignerRecordState struct {
	// An ID assigned to the created DS record.
	DnssecKeyId pulumi.StringPtrInput
	// The name of the domain that will have its parent DNS zone updated with the Delegation Signer record.
	DomainName pulumi.StringPtrInput
	// The information about a key, including the algorithm, public key-value, and flags.
	SigningAttributes DelegationSignerRecordSigningAttributesPtrInput
	Timeouts          DelegationSignerRecordTimeoutsPtrInput
}

func (DelegationSignerRecordState) ElementType() reflect.Type {
	return reflect.TypeOf((*delegationSignerRecordState)(nil)).Elem()
}

type delegationSignerRecordArgs struct {
	// The name of the domain that will have its parent DNS zone updated with the Delegation Signer record.
	DomainName string `pulumi:"domainName"`
	// The information about a key, including the algorithm, public key-value, and flags.
	SigningAttributes *DelegationSignerRecordSigningAttributes `pulumi:"signingAttributes"`
	Timeouts          *DelegationSignerRecordTimeouts          `pulumi:"timeouts"`
}

// The set of arguments for constructing a DelegationSignerRecord resource.
type DelegationSignerRecordArgs struct {
	// The name of the domain that will have its parent DNS zone updated with the Delegation Signer record.
	DomainName pulumi.StringInput
	// The information about a key, including the algorithm, public key-value, and flags.
	SigningAttributes DelegationSignerRecordSigningAttributesPtrInput
	Timeouts          DelegationSignerRecordTimeoutsPtrInput
}

func (DelegationSignerRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*delegationSignerRecordArgs)(nil)).Elem()
}

type DelegationSignerRecordInput interface {
	pulumi.Input

	ToDelegationSignerRecordOutput() DelegationSignerRecordOutput
	ToDelegationSignerRecordOutputWithContext(ctx context.Context) DelegationSignerRecordOutput
}

func (*DelegationSignerRecord) ElementType() reflect.Type {
	return reflect.TypeOf((**DelegationSignerRecord)(nil)).Elem()
}

func (i *DelegationSignerRecord) ToDelegationSignerRecordOutput() DelegationSignerRecordOutput {
	return i.ToDelegationSignerRecordOutputWithContext(context.Background())
}

func (i *DelegationSignerRecord) ToDelegationSignerRecordOutputWithContext(ctx context.Context) DelegationSignerRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DelegationSignerRecordOutput)
}

// DelegationSignerRecordArrayInput is an input type that accepts DelegationSignerRecordArray and DelegationSignerRecordArrayOutput values.
// You can construct a concrete instance of `DelegationSignerRecordArrayInput` via:
//
//	DelegationSignerRecordArray{ DelegationSignerRecordArgs{...} }
type DelegationSignerRecordArrayInput interface {
	pulumi.Input

	ToDelegationSignerRecordArrayOutput() DelegationSignerRecordArrayOutput
	ToDelegationSignerRecordArrayOutputWithContext(context.Context) DelegationSignerRecordArrayOutput
}

type DelegationSignerRecordArray []DelegationSignerRecordInput

func (DelegationSignerRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DelegationSignerRecord)(nil)).Elem()
}

func (i DelegationSignerRecordArray) ToDelegationSignerRecordArrayOutput() DelegationSignerRecordArrayOutput {
	return i.ToDelegationSignerRecordArrayOutputWithContext(context.Background())
}

func (i DelegationSignerRecordArray) ToDelegationSignerRecordArrayOutputWithContext(ctx context.Context) DelegationSignerRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DelegationSignerRecordArrayOutput)
}

// DelegationSignerRecordMapInput is an input type that accepts DelegationSignerRecordMap and DelegationSignerRecordMapOutput values.
// You can construct a concrete instance of `DelegationSignerRecordMapInput` via:
//
//	DelegationSignerRecordMap{ "key": DelegationSignerRecordArgs{...} }
type DelegationSignerRecordMapInput interface {
	pulumi.Input

	ToDelegationSignerRecordMapOutput() DelegationSignerRecordMapOutput
	ToDelegationSignerRecordMapOutputWithContext(context.Context) DelegationSignerRecordMapOutput
}

type DelegationSignerRecordMap map[string]DelegationSignerRecordInput

func (DelegationSignerRecordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DelegationSignerRecord)(nil)).Elem()
}

func (i DelegationSignerRecordMap) ToDelegationSignerRecordMapOutput() DelegationSignerRecordMapOutput {
	return i.ToDelegationSignerRecordMapOutputWithContext(context.Background())
}

func (i DelegationSignerRecordMap) ToDelegationSignerRecordMapOutputWithContext(ctx context.Context) DelegationSignerRecordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DelegationSignerRecordMapOutput)
}

type DelegationSignerRecordOutput struct{ *pulumi.OutputState }

func (DelegationSignerRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DelegationSignerRecord)(nil)).Elem()
}

func (o DelegationSignerRecordOutput) ToDelegationSignerRecordOutput() DelegationSignerRecordOutput {
	return o
}

func (o DelegationSignerRecordOutput) ToDelegationSignerRecordOutputWithContext(ctx context.Context) DelegationSignerRecordOutput {
	return o
}

// An ID assigned to the created DS record.
func (o DelegationSignerRecordOutput) DnssecKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *DelegationSignerRecord) pulumi.StringOutput { return v.DnssecKeyId }).(pulumi.StringOutput)
}

// The name of the domain that will have its parent DNS zone updated with the Delegation Signer record.
func (o DelegationSignerRecordOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *DelegationSignerRecord) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

// The information about a key, including the algorithm, public key-value, and flags.
func (o DelegationSignerRecordOutput) SigningAttributes() DelegationSignerRecordSigningAttributesPtrOutput {
	return o.ApplyT(func(v *DelegationSignerRecord) DelegationSignerRecordSigningAttributesPtrOutput {
		return v.SigningAttributes
	}).(DelegationSignerRecordSigningAttributesPtrOutput)
}

func (o DelegationSignerRecordOutput) Timeouts() DelegationSignerRecordTimeoutsPtrOutput {
	return o.ApplyT(func(v *DelegationSignerRecord) DelegationSignerRecordTimeoutsPtrOutput { return v.Timeouts }).(DelegationSignerRecordTimeoutsPtrOutput)
}

type DelegationSignerRecordArrayOutput struct{ *pulumi.OutputState }

func (DelegationSignerRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DelegationSignerRecord)(nil)).Elem()
}

func (o DelegationSignerRecordArrayOutput) ToDelegationSignerRecordArrayOutput() DelegationSignerRecordArrayOutput {
	return o
}

func (o DelegationSignerRecordArrayOutput) ToDelegationSignerRecordArrayOutputWithContext(ctx context.Context) DelegationSignerRecordArrayOutput {
	return o
}

func (o DelegationSignerRecordArrayOutput) Index(i pulumi.IntInput) DelegationSignerRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DelegationSignerRecord {
		return vs[0].([]*DelegationSignerRecord)[vs[1].(int)]
	}).(DelegationSignerRecordOutput)
}

type DelegationSignerRecordMapOutput struct{ *pulumi.OutputState }

func (DelegationSignerRecordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DelegationSignerRecord)(nil)).Elem()
}

func (o DelegationSignerRecordMapOutput) ToDelegationSignerRecordMapOutput() DelegationSignerRecordMapOutput {
	return o
}

func (o DelegationSignerRecordMapOutput) ToDelegationSignerRecordMapOutputWithContext(ctx context.Context) DelegationSignerRecordMapOutput {
	return o
}

func (o DelegationSignerRecordMapOutput) MapIndex(k pulumi.StringInput) DelegationSignerRecordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DelegationSignerRecord {
		return vs[0].(map[string]*DelegationSignerRecord)[vs[1].(string)]
	}).(DelegationSignerRecordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DelegationSignerRecordInput)(nil)).Elem(), &DelegationSignerRecord{})
	pulumi.RegisterInputType(reflect.TypeOf((*DelegationSignerRecordArrayInput)(nil)).Elem(), DelegationSignerRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DelegationSignerRecordMapInput)(nil)).Elem(), DelegationSignerRecordMap{})
	pulumi.RegisterOutputType(DelegationSignerRecordOutput{})
	pulumi.RegisterOutputType(DelegationSignerRecordArrayOutput{})
	pulumi.RegisterOutputType(DelegationSignerRecordMapOutput{})
}
