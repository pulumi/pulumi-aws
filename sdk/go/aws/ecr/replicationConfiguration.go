// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Elastic Container Registry Replication Configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ecr"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := aws.GetCallerIdentity(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			example, err := aws.GetRegions(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = ecr.NewReplicationConfiguration(ctx, "example", &ecr.ReplicationConfigurationArgs{
//				ReplicationConfiguration: &ecr.ReplicationConfigurationReplicationConfigurationArgs{
//					Rules: ecr.ReplicationConfigurationReplicationConfigurationRuleArray{
//						&ecr.ReplicationConfigurationReplicationConfigurationRuleArgs{
//							Destinations: ecr.ReplicationConfigurationReplicationConfigurationRuleDestinationArray{
//								&ecr.ReplicationConfigurationReplicationConfigurationRuleDestinationArgs{
//									Region:     *pulumi.String(example.Names[0]),
//									RegistryId: *pulumi.String(current.AccountId),
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## Multiple Region Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ecr"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := aws.GetCallerIdentity(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			example, err := aws.GetRegions(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = ecr.NewReplicationConfiguration(ctx, "example", &ecr.ReplicationConfigurationArgs{
//				ReplicationConfiguration: &ecr.ReplicationConfigurationReplicationConfigurationArgs{
//					Rules: ecr.ReplicationConfigurationReplicationConfigurationRuleArray{
//						&ecr.ReplicationConfigurationReplicationConfigurationRuleArgs{
//							Destinations: ecr.ReplicationConfigurationReplicationConfigurationRuleDestinationArray{
//								&ecr.ReplicationConfigurationReplicationConfigurationRuleDestinationArgs{
//									Region:     *pulumi.String(example.Names[0]),
//									RegistryId: *pulumi.String(current.AccountId),
//								},
//								&ecr.ReplicationConfigurationReplicationConfigurationRuleDestinationArgs{
//									Region:     *pulumi.String(example.Names[1]),
//									RegistryId: *pulumi.String(current.AccountId),
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Repository Filter Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ecr"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := aws.GetCallerIdentity(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			example, err := aws.GetRegions(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = ecr.NewReplicationConfiguration(ctx, "example", &ecr.ReplicationConfigurationArgs{
//				ReplicationConfiguration: &ecr.ReplicationConfigurationReplicationConfigurationArgs{
//					Rules: ecr.ReplicationConfigurationReplicationConfigurationRuleArray{
//						&ecr.ReplicationConfigurationReplicationConfigurationRuleArgs{
//							Destinations: ecr.ReplicationConfigurationReplicationConfigurationRuleDestinationArray{
//								&ecr.ReplicationConfigurationReplicationConfigurationRuleDestinationArgs{
//									Region:     *pulumi.String(example.Names[0]),
//									RegistryId: *pulumi.String(current.AccountId),
//								},
//							},
//							RepositoryFilters: ecr.ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterArray{
//								&ecr.ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterArgs{
//									Filter:     pulumi.String("prod-microservice"),
//									FilterType: pulumi.String("PREFIX_MATCH"),
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import ECR Replication Configuration using the `registry_id`. For example:
//
// ```sh
//
//	$ pulumi import aws:ecr/replicationConfiguration:ReplicationConfiguration service 012345678912
//
// ```
type ReplicationConfiguration struct {
	pulumi.CustomResourceState

	// The account ID of the destination registry to replicate to.
	RegistryId pulumi.StringOutput `pulumi:"registryId"`
	// Replication configuration for a registry. See Replication Configuration.
	ReplicationConfiguration ReplicationConfigurationReplicationConfigurationPtrOutput `pulumi:"replicationConfiguration"`
}

// NewReplicationConfiguration registers a new resource with the given unique name, arguments, and options.
func NewReplicationConfiguration(ctx *pulumi.Context,
	name string, args *ReplicationConfigurationArgs, opts ...pulumi.ResourceOption) (*ReplicationConfiguration, error) {
	if args == nil {
		args = &ReplicationConfigurationArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ReplicationConfiguration
	err := ctx.RegisterResource("aws:ecr/replicationConfiguration:ReplicationConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReplicationConfiguration gets an existing ReplicationConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReplicationConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReplicationConfigurationState, opts ...pulumi.ResourceOption) (*ReplicationConfiguration, error) {
	var resource ReplicationConfiguration
	err := ctx.ReadResource("aws:ecr/replicationConfiguration:ReplicationConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReplicationConfiguration resources.
type replicationConfigurationState struct {
	// The account ID of the destination registry to replicate to.
	RegistryId *string `pulumi:"registryId"`
	// Replication configuration for a registry. See Replication Configuration.
	ReplicationConfiguration *ReplicationConfigurationReplicationConfiguration `pulumi:"replicationConfiguration"`
}

type ReplicationConfigurationState struct {
	// The account ID of the destination registry to replicate to.
	RegistryId pulumi.StringPtrInput
	// Replication configuration for a registry. See Replication Configuration.
	ReplicationConfiguration ReplicationConfigurationReplicationConfigurationPtrInput
}

func (ReplicationConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*replicationConfigurationState)(nil)).Elem()
}

type replicationConfigurationArgs struct {
	// Replication configuration for a registry. See Replication Configuration.
	ReplicationConfiguration *ReplicationConfigurationReplicationConfiguration `pulumi:"replicationConfiguration"`
}

// The set of arguments for constructing a ReplicationConfiguration resource.
type ReplicationConfigurationArgs struct {
	// Replication configuration for a registry. See Replication Configuration.
	ReplicationConfiguration ReplicationConfigurationReplicationConfigurationPtrInput
}

func (ReplicationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*replicationConfigurationArgs)(nil)).Elem()
}

type ReplicationConfigurationInput interface {
	pulumi.Input

	ToReplicationConfigurationOutput() ReplicationConfigurationOutput
	ToReplicationConfigurationOutputWithContext(ctx context.Context) ReplicationConfigurationOutput
}

func (*ReplicationConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicationConfiguration)(nil)).Elem()
}

func (i *ReplicationConfiguration) ToReplicationConfigurationOutput() ReplicationConfigurationOutput {
	return i.ToReplicationConfigurationOutputWithContext(context.Background())
}

func (i *ReplicationConfiguration) ToReplicationConfigurationOutputWithContext(ctx context.Context) ReplicationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationConfigurationOutput)
}

// ReplicationConfigurationArrayInput is an input type that accepts ReplicationConfigurationArray and ReplicationConfigurationArrayOutput values.
// You can construct a concrete instance of `ReplicationConfigurationArrayInput` via:
//
//	ReplicationConfigurationArray{ ReplicationConfigurationArgs{...} }
type ReplicationConfigurationArrayInput interface {
	pulumi.Input

	ToReplicationConfigurationArrayOutput() ReplicationConfigurationArrayOutput
	ToReplicationConfigurationArrayOutputWithContext(context.Context) ReplicationConfigurationArrayOutput
}

type ReplicationConfigurationArray []ReplicationConfigurationInput

func (ReplicationConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReplicationConfiguration)(nil)).Elem()
}

func (i ReplicationConfigurationArray) ToReplicationConfigurationArrayOutput() ReplicationConfigurationArrayOutput {
	return i.ToReplicationConfigurationArrayOutputWithContext(context.Background())
}

func (i ReplicationConfigurationArray) ToReplicationConfigurationArrayOutputWithContext(ctx context.Context) ReplicationConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationConfigurationArrayOutput)
}

// ReplicationConfigurationMapInput is an input type that accepts ReplicationConfigurationMap and ReplicationConfigurationMapOutput values.
// You can construct a concrete instance of `ReplicationConfigurationMapInput` via:
//
//	ReplicationConfigurationMap{ "key": ReplicationConfigurationArgs{...} }
type ReplicationConfigurationMapInput interface {
	pulumi.Input

	ToReplicationConfigurationMapOutput() ReplicationConfigurationMapOutput
	ToReplicationConfigurationMapOutputWithContext(context.Context) ReplicationConfigurationMapOutput
}

type ReplicationConfigurationMap map[string]ReplicationConfigurationInput

func (ReplicationConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReplicationConfiguration)(nil)).Elem()
}

func (i ReplicationConfigurationMap) ToReplicationConfigurationMapOutput() ReplicationConfigurationMapOutput {
	return i.ToReplicationConfigurationMapOutputWithContext(context.Background())
}

func (i ReplicationConfigurationMap) ToReplicationConfigurationMapOutputWithContext(ctx context.Context) ReplicationConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationConfigurationMapOutput)
}

type ReplicationConfigurationOutput struct{ *pulumi.OutputState }

func (ReplicationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicationConfiguration)(nil)).Elem()
}

func (o ReplicationConfigurationOutput) ToReplicationConfigurationOutput() ReplicationConfigurationOutput {
	return o
}

func (o ReplicationConfigurationOutput) ToReplicationConfigurationOutputWithContext(ctx context.Context) ReplicationConfigurationOutput {
	return o
}

// The account ID of the destination registry to replicate to.
func (o ReplicationConfigurationOutput) RegistryId() pulumi.StringOutput {
	return o.ApplyT(func(v *ReplicationConfiguration) pulumi.StringOutput { return v.RegistryId }).(pulumi.StringOutput)
}

// Replication configuration for a registry. See Replication Configuration.
func (o ReplicationConfigurationOutput) ReplicationConfiguration() ReplicationConfigurationReplicationConfigurationPtrOutput {
	return o.ApplyT(func(v *ReplicationConfiguration) ReplicationConfigurationReplicationConfigurationPtrOutput {
		return v.ReplicationConfiguration
	}).(ReplicationConfigurationReplicationConfigurationPtrOutput)
}

type ReplicationConfigurationArrayOutput struct{ *pulumi.OutputState }

func (ReplicationConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReplicationConfiguration)(nil)).Elem()
}

func (o ReplicationConfigurationArrayOutput) ToReplicationConfigurationArrayOutput() ReplicationConfigurationArrayOutput {
	return o
}

func (o ReplicationConfigurationArrayOutput) ToReplicationConfigurationArrayOutputWithContext(ctx context.Context) ReplicationConfigurationArrayOutput {
	return o
}

func (o ReplicationConfigurationArrayOutput) Index(i pulumi.IntInput) ReplicationConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReplicationConfiguration {
		return vs[0].([]*ReplicationConfiguration)[vs[1].(int)]
	}).(ReplicationConfigurationOutput)
}

type ReplicationConfigurationMapOutput struct{ *pulumi.OutputState }

func (ReplicationConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReplicationConfiguration)(nil)).Elem()
}

func (o ReplicationConfigurationMapOutput) ToReplicationConfigurationMapOutput() ReplicationConfigurationMapOutput {
	return o
}

func (o ReplicationConfigurationMapOutput) ToReplicationConfigurationMapOutputWithContext(ctx context.Context) ReplicationConfigurationMapOutput {
	return o
}

func (o ReplicationConfigurationMapOutput) MapIndex(k pulumi.StringInput) ReplicationConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReplicationConfiguration {
		return vs[0].(map[string]*ReplicationConfiguration)[vs[1].(string)]
	}).(ReplicationConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationConfigurationInput)(nil)).Elem(), &ReplicationConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationConfigurationArrayInput)(nil)).Elem(), ReplicationConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationConfigurationMapInput)(nil)).Elem(), ReplicationConfigurationMap{})
	pulumi.RegisterOutputType(ReplicationConfigurationOutput{})
	pulumi.RegisterOutputType(ReplicationConfigurationArrayOutput{})
	pulumi.RegisterOutputType(ReplicationConfigurationMapOutput{})
}
