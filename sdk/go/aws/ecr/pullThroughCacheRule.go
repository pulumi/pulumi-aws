// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecr

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PullThroughCacheRule struct {
	pulumi.CustomResourceState

	EcrRepositoryPrefix pulumi.StringOutput `pulumi:"ecrRepositoryPrefix"`
	RegistryId          pulumi.StringOutput `pulumi:"registryId"`
	UpstreamRegistryUrl pulumi.StringOutput `pulumi:"upstreamRegistryUrl"`
}

// NewPullThroughCacheRule registers a new resource with the given unique name, arguments, and options.
func NewPullThroughCacheRule(ctx *pulumi.Context,
	name string, args *PullThroughCacheRuleArgs, opts ...pulumi.ResourceOption) (*PullThroughCacheRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EcrRepositoryPrefix == nil {
		return nil, errors.New("invalid value for required argument 'EcrRepositoryPrefix'")
	}
	if args.UpstreamRegistryUrl == nil {
		return nil, errors.New("invalid value for required argument 'UpstreamRegistryUrl'")
	}
	var resource PullThroughCacheRule
	err := ctx.RegisterResource("aws:ecr/pullThroughCacheRule:PullThroughCacheRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPullThroughCacheRule gets an existing PullThroughCacheRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPullThroughCacheRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PullThroughCacheRuleState, opts ...pulumi.ResourceOption) (*PullThroughCacheRule, error) {
	var resource PullThroughCacheRule
	err := ctx.ReadResource("aws:ecr/pullThroughCacheRule:PullThroughCacheRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PullThroughCacheRule resources.
type pullThroughCacheRuleState struct {
	EcrRepositoryPrefix *string `pulumi:"ecrRepositoryPrefix"`
	RegistryId          *string `pulumi:"registryId"`
	UpstreamRegistryUrl *string `pulumi:"upstreamRegistryUrl"`
}

type PullThroughCacheRuleState struct {
	EcrRepositoryPrefix pulumi.StringPtrInput
	RegistryId          pulumi.StringPtrInput
	UpstreamRegistryUrl pulumi.StringPtrInput
}

func (PullThroughCacheRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*pullThroughCacheRuleState)(nil)).Elem()
}

type pullThroughCacheRuleArgs struct {
	EcrRepositoryPrefix string `pulumi:"ecrRepositoryPrefix"`
	UpstreamRegistryUrl string `pulumi:"upstreamRegistryUrl"`
}

// The set of arguments for constructing a PullThroughCacheRule resource.
type PullThroughCacheRuleArgs struct {
	EcrRepositoryPrefix pulumi.StringInput
	UpstreamRegistryUrl pulumi.StringInput
}

func (PullThroughCacheRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pullThroughCacheRuleArgs)(nil)).Elem()
}

type PullThroughCacheRuleInput interface {
	pulumi.Input

	ToPullThroughCacheRuleOutput() PullThroughCacheRuleOutput
	ToPullThroughCacheRuleOutputWithContext(ctx context.Context) PullThroughCacheRuleOutput
}

func (*PullThroughCacheRule) ElementType() reflect.Type {
	return reflect.TypeOf((**PullThroughCacheRule)(nil)).Elem()
}

func (i *PullThroughCacheRule) ToPullThroughCacheRuleOutput() PullThroughCacheRuleOutput {
	return i.ToPullThroughCacheRuleOutputWithContext(context.Background())
}

func (i *PullThroughCacheRule) ToPullThroughCacheRuleOutputWithContext(ctx context.Context) PullThroughCacheRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PullThroughCacheRuleOutput)
}

// PullThroughCacheRuleArrayInput is an input type that accepts PullThroughCacheRuleArray and PullThroughCacheRuleArrayOutput values.
// You can construct a concrete instance of `PullThroughCacheRuleArrayInput` via:
//
//	PullThroughCacheRuleArray{ PullThroughCacheRuleArgs{...} }
type PullThroughCacheRuleArrayInput interface {
	pulumi.Input

	ToPullThroughCacheRuleArrayOutput() PullThroughCacheRuleArrayOutput
	ToPullThroughCacheRuleArrayOutputWithContext(context.Context) PullThroughCacheRuleArrayOutput
}

type PullThroughCacheRuleArray []PullThroughCacheRuleInput

func (PullThroughCacheRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PullThroughCacheRule)(nil)).Elem()
}

func (i PullThroughCacheRuleArray) ToPullThroughCacheRuleArrayOutput() PullThroughCacheRuleArrayOutput {
	return i.ToPullThroughCacheRuleArrayOutputWithContext(context.Background())
}

func (i PullThroughCacheRuleArray) ToPullThroughCacheRuleArrayOutputWithContext(ctx context.Context) PullThroughCacheRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PullThroughCacheRuleArrayOutput)
}

// PullThroughCacheRuleMapInput is an input type that accepts PullThroughCacheRuleMap and PullThroughCacheRuleMapOutput values.
// You can construct a concrete instance of `PullThroughCacheRuleMapInput` via:
//
//	PullThroughCacheRuleMap{ "key": PullThroughCacheRuleArgs{...} }
type PullThroughCacheRuleMapInput interface {
	pulumi.Input

	ToPullThroughCacheRuleMapOutput() PullThroughCacheRuleMapOutput
	ToPullThroughCacheRuleMapOutputWithContext(context.Context) PullThroughCacheRuleMapOutput
}

type PullThroughCacheRuleMap map[string]PullThroughCacheRuleInput

func (PullThroughCacheRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PullThroughCacheRule)(nil)).Elem()
}

func (i PullThroughCacheRuleMap) ToPullThroughCacheRuleMapOutput() PullThroughCacheRuleMapOutput {
	return i.ToPullThroughCacheRuleMapOutputWithContext(context.Background())
}

func (i PullThroughCacheRuleMap) ToPullThroughCacheRuleMapOutputWithContext(ctx context.Context) PullThroughCacheRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PullThroughCacheRuleMapOutput)
}

type PullThroughCacheRuleOutput struct{ *pulumi.OutputState }

func (PullThroughCacheRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PullThroughCacheRule)(nil)).Elem()
}

func (o PullThroughCacheRuleOutput) ToPullThroughCacheRuleOutput() PullThroughCacheRuleOutput {
	return o
}

func (o PullThroughCacheRuleOutput) ToPullThroughCacheRuleOutputWithContext(ctx context.Context) PullThroughCacheRuleOutput {
	return o
}

func (o PullThroughCacheRuleOutput) EcrRepositoryPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *PullThroughCacheRule) pulumi.StringOutput { return v.EcrRepositoryPrefix }).(pulumi.StringOutput)
}

func (o PullThroughCacheRuleOutput) RegistryId() pulumi.StringOutput {
	return o.ApplyT(func(v *PullThroughCacheRule) pulumi.StringOutput { return v.RegistryId }).(pulumi.StringOutput)
}

func (o PullThroughCacheRuleOutput) UpstreamRegistryUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *PullThroughCacheRule) pulumi.StringOutput { return v.UpstreamRegistryUrl }).(pulumi.StringOutput)
}

type PullThroughCacheRuleArrayOutput struct{ *pulumi.OutputState }

func (PullThroughCacheRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PullThroughCacheRule)(nil)).Elem()
}

func (o PullThroughCacheRuleArrayOutput) ToPullThroughCacheRuleArrayOutput() PullThroughCacheRuleArrayOutput {
	return o
}

func (o PullThroughCacheRuleArrayOutput) ToPullThroughCacheRuleArrayOutputWithContext(ctx context.Context) PullThroughCacheRuleArrayOutput {
	return o
}

func (o PullThroughCacheRuleArrayOutput) Index(i pulumi.IntInput) PullThroughCacheRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PullThroughCacheRule {
		return vs[0].([]*PullThroughCacheRule)[vs[1].(int)]
	}).(PullThroughCacheRuleOutput)
}

type PullThroughCacheRuleMapOutput struct{ *pulumi.OutputState }

func (PullThroughCacheRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PullThroughCacheRule)(nil)).Elem()
}

func (o PullThroughCacheRuleMapOutput) ToPullThroughCacheRuleMapOutput() PullThroughCacheRuleMapOutput {
	return o
}

func (o PullThroughCacheRuleMapOutput) ToPullThroughCacheRuleMapOutputWithContext(ctx context.Context) PullThroughCacheRuleMapOutput {
	return o
}

func (o PullThroughCacheRuleMapOutput) MapIndex(k pulumi.StringInput) PullThroughCacheRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PullThroughCacheRule {
		return vs[0].(map[string]*PullThroughCacheRule)[vs[1].(string)]
	}).(PullThroughCacheRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PullThroughCacheRuleInput)(nil)).Elem(), &PullThroughCacheRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*PullThroughCacheRuleArrayInput)(nil)).Elem(), PullThroughCacheRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PullThroughCacheRuleMapInput)(nil)).Elem(), PullThroughCacheRuleMap{})
	pulumi.RegisterOutputType(PullThroughCacheRuleOutput{})
	pulumi.RegisterOutputType(PullThroughCacheRuleArrayOutput{})
	pulumi.RegisterOutputType(PullThroughCacheRuleMapOutput{})
}
