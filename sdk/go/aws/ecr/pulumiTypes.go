// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ecr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ReplicationConfigurationReplicationConfiguration struct {
	// The replication rules for a replication configuration. See Rule.
	Rule ReplicationConfigurationReplicationConfigurationRule `pulumi:"rule"`
}

// ReplicationConfigurationReplicationConfigurationInput is an input type that accepts ReplicationConfigurationReplicationConfigurationArgs and ReplicationConfigurationReplicationConfigurationOutput values.
// You can construct a concrete instance of `ReplicationConfigurationReplicationConfigurationInput` via:
//
//          ReplicationConfigurationReplicationConfigurationArgs{...}
type ReplicationConfigurationReplicationConfigurationInput interface {
	pulumi.Input

	ToReplicationConfigurationReplicationConfigurationOutput() ReplicationConfigurationReplicationConfigurationOutput
	ToReplicationConfigurationReplicationConfigurationOutputWithContext(context.Context) ReplicationConfigurationReplicationConfigurationOutput
}

type ReplicationConfigurationReplicationConfigurationArgs struct {
	// The replication rules for a replication configuration. See Rule.
	Rule ReplicationConfigurationReplicationConfigurationRuleInput `pulumi:"rule"`
}

func (ReplicationConfigurationReplicationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationConfigurationReplicationConfiguration)(nil)).Elem()
}

func (i ReplicationConfigurationReplicationConfigurationArgs) ToReplicationConfigurationReplicationConfigurationOutput() ReplicationConfigurationReplicationConfigurationOutput {
	return i.ToReplicationConfigurationReplicationConfigurationOutputWithContext(context.Background())
}

func (i ReplicationConfigurationReplicationConfigurationArgs) ToReplicationConfigurationReplicationConfigurationOutputWithContext(ctx context.Context) ReplicationConfigurationReplicationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationConfigurationReplicationConfigurationOutput)
}

func (i ReplicationConfigurationReplicationConfigurationArgs) ToReplicationConfigurationReplicationConfigurationPtrOutput() ReplicationConfigurationReplicationConfigurationPtrOutput {
	return i.ToReplicationConfigurationReplicationConfigurationPtrOutputWithContext(context.Background())
}

func (i ReplicationConfigurationReplicationConfigurationArgs) ToReplicationConfigurationReplicationConfigurationPtrOutputWithContext(ctx context.Context) ReplicationConfigurationReplicationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationConfigurationReplicationConfigurationOutput).ToReplicationConfigurationReplicationConfigurationPtrOutputWithContext(ctx)
}

// ReplicationConfigurationReplicationConfigurationPtrInput is an input type that accepts ReplicationConfigurationReplicationConfigurationArgs, ReplicationConfigurationReplicationConfigurationPtr and ReplicationConfigurationReplicationConfigurationPtrOutput values.
// You can construct a concrete instance of `ReplicationConfigurationReplicationConfigurationPtrInput` via:
//
//          ReplicationConfigurationReplicationConfigurationArgs{...}
//
//  or:
//
//          nil
type ReplicationConfigurationReplicationConfigurationPtrInput interface {
	pulumi.Input

	ToReplicationConfigurationReplicationConfigurationPtrOutput() ReplicationConfigurationReplicationConfigurationPtrOutput
	ToReplicationConfigurationReplicationConfigurationPtrOutputWithContext(context.Context) ReplicationConfigurationReplicationConfigurationPtrOutput
}

type replicationConfigurationReplicationConfigurationPtrType ReplicationConfigurationReplicationConfigurationArgs

func ReplicationConfigurationReplicationConfigurationPtr(v *ReplicationConfigurationReplicationConfigurationArgs) ReplicationConfigurationReplicationConfigurationPtrInput {
	return (*replicationConfigurationReplicationConfigurationPtrType)(v)
}

func (*replicationConfigurationReplicationConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicationConfigurationReplicationConfiguration)(nil)).Elem()
}

func (i *replicationConfigurationReplicationConfigurationPtrType) ToReplicationConfigurationReplicationConfigurationPtrOutput() ReplicationConfigurationReplicationConfigurationPtrOutput {
	return i.ToReplicationConfigurationReplicationConfigurationPtrOutputWithContext(context.Background())
}

func (i *replicationConfigurationReplicationConfigurationPtrType) ToReplicationConfigurationReplicationConfigurationPtrOutputWithContext(ctx context.Context) ReplicationConfigurationReplicationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationConfigurationReplicationConfigurationPtrOutput)
}

type ReplicationConfigurationReplicationConfigurationOutput struct{ *pulumi.OutputState }

func (ReplicationConfigurationReplicationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationConfigurationReplicationConfiguration)(nil)).Elem()
}

func (o ReplicationConfigurationReplicationConfigurationOutput) ToReplicationConfigurationReplicationConfigurationOutput() ReplicationConfigurationReplicationConfigurationOutput {
	return o
}

func (o ReplicationConfigurationReplicationConfigurationOutput) ToReplicationConfigurationReplicationConfigurationOutputWithContext(ctx context.Context) ReplicationConfigurationReplicationConfigurationOutput {
	return o
}

func (o ReplicationConfigurationReplicationConfigurationOutput) ToReplicationConfigurationReplicationConfigurationPtrOutput() ReplicationConfigurationReplicationConfigurationPtrOutput {
	return o.ToReplicationConfigurationReplicationConfigurationPtrOutputWithContext(context.Background())
}

func (o ReplicationConfigurationReplicationConfigurationOutput) ToReplicationConfigurationReplicationConfigurationPtrOutputWithContext(ctx context.Context) ReplicationConfigurationReplicationConfigurationPtrOutput {
	return o.ApplyT(func(v ReplicationConfigurationReplicationConfiguration) *ReplicationConfigurationReplicationConfiguration {
		return &v
	}).(ReplicationConfigurationReplicationConfigurationPtrOutput)
}

// The replication rules for a replication configuration. See Rule.
func (o ReplicationConfigurationReplicationConfigurationOutput) Rule() ReplicationConfigurationReplicationConfigurationRuleOutput {
	return o.ApplyT(func(v ReplicationConfigurationReplicationConfiguration) ReplicationConfigurationReplicationConfigurationRule {
		return v.Rule
	}).(ReplicationConfigurationReplicationConfigurationRuleOutput)
}

type ReplicationConfigurationReplicationConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ReplicationConfigurationReplicationConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicationConfigurationReplicationConfiguration)(nil)).Elem()
}

func (o ReplicationConfigurationReplicationConfigurationPtrOutput) ToReplicationConfigurationReplicationConfigurationPtrOutput() ReplicationConfigurationReplicationConfigurationPtrOutput {
	return o
}

func (o ReplicationConfigurationReplicationConfigurationPtrOutput) ToReplicationConfigurationReplicationConfigurationPtrOutputWithContext(ctx context.Context) ReplicationConfigurationReplicationConfigurationPtrOutput {
	return o
}

func (o ReplicationConfigurationReplicationConfigurationPtrOutput) Elem() ReplicationConfigurationReplicationConfigurationOutput {
	return o.ApplyT(func(v *ReplicationConfigurationReplicationConfiguration) ReplicationConfigurationReplicationConfiguration {
		return *v
	}).(ReplicationConfigurationReplicationConfigurationOutput)
}

// The replication rules for a replication configuration. See Rule.
func (o ReplicationConfigurationReplicationConfigurationPtrOutput) Rule() ReplicationConfigurationReplicationConfigurationRulePtrOutput {
	return o.ApplyT(func(v *ReplicationConfigurationReplicationConfiguration) *ReplicationConfigurationReplicationConfigurationRule {
		if v == nil {
			return nil
		}
		return &v.Rule
	}).(ReplicationConfigurationReplicationConfigurationRulePtrOutput)
}

type ReplicationConfigurationReplicationConfigurationRule struct {
	// the details of a replication destination. See Destination.
	Destinations []ReplicationConfigurationReplicationConfigurationRuleDestination `pulumi:"destinations"`
}

// ReplicationConfigurationReplicationConfigurationRuleInput is an input type that accepts ReplicationConfigurationReplicationConfigurationRuleArgs and ReplicationConfigurationReplicationConfigurationRuleOutput values.
// You can construct a concrete instance of `ReplicationConfigurationReplicationConfigurationRuleInput` via:
//
//          ReplicationConfigurationReplicationConfigurationRuleArgs{...}
type ReplicationConfigurationReplicationConfigurationRuleInput interface {
	pulumi.Input

	ToReplicationConfigurationReplicationConfigurationRuleOutput() ReplicationConfigurationReplicationConfigurationRuleOutput
	ToReplicationConfigurationReplicationConfigurationRuleOutputWithContext(context.Context) ReplicationConfigurationReplicationConfigurationRuleOutput
}

type ReplicationConfigurationReplicationConfigurationRuleArgs struct {
	// the details of a replication destination. See Destination.
	Destinations ReplicationConfigurationReplicationConfigurationRuleDestinationArrayInput `pulumi:"destinations"`
}

func (ReplicationConfigurationReplicationConfigurationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationConfigurationReplicationConfigurationRule)(nil)).Elem()
}

func (i ReplicationConfigurationReplicationConfigurationRuleArgs) ToReplicationConfigurationReplicationConfigurationRuleOutput() ReplicationConfigurationReplicationConfigurationRuleOutput {
	return i.ToReplicationConfigurationReplicationConfigurationRuleOutputWithContext(context.Background())
}

func (i ReplicationConfigurationReplicationConfigurationRuleArgs) ToReplicationConfigurationReplicationConfigurationRuleOutputWithContext(ctx context.Context) ReplicationConfigurationReplicationConfigurationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationConfigurationReplicationConfigurationRuleOutput)
}

func (i ReplicationConfigurationReplicationConfigurationRuleArgs) ToReplicationConfigurationReplicationConfigurationRulePtrOutput() ReplicationConfigurationReplicationConfigurationRulePtrOutput {
	return i.ToReplicationConfigurationReplicationConfigurationRulePtrOutputWithContext(context.Background())
}

func (i ReplicationConfigurationReplicationConfigurationRuleArgs) ToReplicationConfigurationReplicationConfigurationRulePtrOutputWithContext(ctx context.Context) ReplicationConfigurationReplicationConfigurationRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationConfigurationReplicationConfigurationRuleOutput).ToReplicationConfigurationReplicationConfigurationRulePtrOutputWithContext(ctx)
}

// ReplicationConfigurationReplicationConfigurationRulePtrInput is an input type that accepts ReplicationConfigurationReplicationConfigurationRuleArgs, ReplicationConfigurationReplicationConfigurationRulePtr and ReplicationConfigurationReplicationConfigurationRulePtrOutput values.
// You can construct a concrete instance of `ReplicationConfigurationReplicationConfigurationRulePtrInput` via:
//
//          ReplicationConfigurationReplicationConfigurationRuleArgs{...}
//
//  or:
//
//          nil
type ReplicationConfigurationReplicationConfigurationRulePtrInput interface {
	pulumi.Input

	ToReplicationConfigurationReplicationConfigurationRulePtrOutput() ReplicationConfigurationReplicationConfigurationRulePtrOutput
	ToReplicationConfigurationReplicationConfigurationRulePtrOutputWithContext(context.Context) ReplicationConfigurationReplicationConfigurationRulePtrOutput
}

type replicationConfigurationReplicationConfigurationRulePtrType ReplicationConfigurationReplicationConfigurationRuleArgs

func ReplicationConfigurationReplicationConfigurationRulePtr(v *ReplicationConfigurationReplicationConfigurationRuleArgs) ReplicationConfigurationReplicationConfigurationRulePtrInput {
	return (*replicationConfigurationReplicationConfigurationRulePtrType)(v)
}

func (*replicationConfigurationReplicationConfigurationRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicationConfigurationReplicationConfigurationRule)(nil)).Elem()
}

func (i *replicationConfigurationReplicationConfigurationRulePtrType) ToReplicationConfigurationReplicationConfigurationRulePtrOutput() ReplicationConfigurationReplicationConfigurationRulePtrOutput {
	return i.ToReplicationConfigurationReplicationConfigurationRulePtrOutputWithContext(context.Background())
}

func (i *replicationConfigurationReplicationConfigurationRulePtrType) ToReplicationConfigurationReplicationConfigurationRulePtrOutputWithContext(ctx context.Context) ReplicationConfigurationReplicationConfigurationRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationConfigurationReplicationConfigurationRulePtrOutput)
}

type ReplicationConfigurationReplicationConfigurationRuleOutput struct{ *pulumi.OutputState }

func (ReplicationConfigurationReplicationConfigurationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationConfigurationReplicationConfigurationRule)(nil)).Elem()
}

func (o ReplicationConfigurationReplicationConfigurationRuleOutput) ToReplicationConfigurationReplicationConfigurationRuleOutput() ReplicationConfigurationReplicationConfigurationRuleOutput {
	return o
}

func (o ReplicationConfigurationReplicationConfigurationRuleOutput) ToReplicationConfigurationReplicationConfigurationRuleOutputWithContext(ctx context.Context) ReplicationConfigurationReplicationConfigurationRuleOutput {
	return o
}

func (o ReplicationConfigurationReplicationConfigurationRuleOutput) ToReplicationConfigurationReplicationConfigurationRulePtrOutput() ReplicationConfigurationReplicationConfigurationRulePtrOutput {
	return o.ToReplicationConfigurationReplicationConfigurationRulePtrOutputWithContext(context.Background())
}

func (o ReplicationConfigurationReplicationConfigurationRuleOutput) ToReplicationConfigurationReplicationConfigurationRulePtrOutputWithContext(ctx context.Context) ReplicationConfigurationReplicationConfigurationRulePtrOutput {
	return o.ApplyT(func(v ReplicationConfigurationReplicationConfigurationRule) *ReplicationConfigurationReplicationConfigurationRule {
		return &v
	}).(ReplicationConfigurationReplicationConfigurationRulePtrOutput)
}

// the details of a replication destination. See Destination.
func (o ReplicationConfigurationReplicationConfigurationRuleOutput) Destinations() ReplicationConfigurationReplicationConfigurationRuleDestinationArrayOutput {
	return o.ApplyT(func(v ReplicationConfigurationReplicationConfigurationRule) []ReplicationConfigurationReplicationConfigurationRuleDestination {
		return v.Destinations
	}).(ReplicationConfigurationReplicationConfigurationRuleDestinationArrayOutput)
}

type ReplicationConfigurationReplicationConfigurationRulePtrOutput struct{ *pulumi.OutputState }

func (ReplicationConfigurationReplicationConfigurationRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicationConfigurationReplicationConfigurationRule)(nil)).Elem()
}

func (o ReplicationConfigurationReplicationConfigurationRulePtrOutput) ToReplicationConfigurationReplicationConfigurationRulePtrOutput() ReplicationConfigurationReplicationConfigurationRulePtrOutput {
	return o
}

func (o ReplicationConfigurationReplicationConfigurationRulePtrOutput) ToReplicationConfigurationReplicationConfigurationRulePtrOutputWithContext(ctx context.Context) ReplicationConfigurationReplicationConfigurationRulePtrOutput {
	return o
}

func (o ReplicationConfigurationReplicationConfigurationRulePtrOutput) Elem() ReplicationConfigurationReplicationConfigurationRuleOutput {
	return o.ApplyT(func(v *ReplicationConfigurationReplicationConfigurationRule) ReplicationConfigurationReplicationConfigurationRule {
		return *v
	}).(ReplicationConfigurationReplicationConfigurationRuleOutput)
}

// the details of a replication destination. See Destination.
func (o ReplicationConfigurationReplicationConfigurationRulePtrOutput) Destinations() ReplicationConfigurationReplicationConfigurationRuleDestinationArrayOutput {
	return o.ApplyT(func(v *ReplicationConfigurationReplicationConfigurationRule) []ReplicationConfigurationReplicationConfigurationRuleDestination {
		if v == nil {
			return nil
		}
		return v.Destinations
	}).(ReplicationConfigurationReplicationConfigurationRuleDestinationArrayOutput)
}

type ReplicationConfigurationReplicationConfigurationRuleDestination struct {
	// A Region to replicate to.
	Region string `pulumi:"region"`
	// The account ID of the destination registry to replicate to.
	RegistryId string `pulumi:"registryId"`
}

// ReplicationConfigurationReplicationConfigurationRuleDestinationInput is an input type that accepts ReplicationConfigurationReplicationConfigurationRuleDestinationArgs and ReplicationConfigurationReplicationConfigurationRuleDestinationOutput values.
// You can construct a concrete instance of `ReplicationConfigurationReplicationConfigurationRuleDestinationInput` via:
//
//          ReplicationConfigurationReplicationConfigurationRuleDestinationArgs{...}
type ReplicationConfigurationReplicationConfigurationRuleDestinationInput interface {
	pulumi.Input

	ToReplicationConfigurationReplicationConfigurationRuleDestinationOutput() ReplicationConfigurationReplicationConfigurationRuleDestinationOutput
	ToReplicationConfigurationReplicationConfigurationRuleDestinationOutputWithContext(context.Context) ReplicationConfigurationReplicationConfigurationRuleDestinationOutput
}

type ReplicationConfigurationReplicationConfigurationRuleDestinationArgs struct {
	// A Region to replicate to.
	Region pulumi.StringInput `pulumi:"region"`
	// The account ID of the destination registry to replicate to.
	RegistryId pulumi.StringInput `pulumi:"registryId"`
}

func (ReplicationConfigurationReplicationConfigurationRuleDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationConfigurationReplicationConfigurationRuleDestination)(nil)).Elem()
}

func (i ReplicationConfigurationReplicationConfigurationRuleDestinationArgs) ToReplicationConfigurationReplicationConfigurationRuleDestinationOutput() ReplicationConfigurationReplicationConfigurationRuleDestinationOutput {
	return i.ToReplicationConfigurationReplicationConfigurationRuleDestinationOutputWithContext(context.Background())
}

func (i ReplicationConfigurationReplicationConfigurationRuleDestinationArgs) ToReplicationConfigurationReplicationConfigurationRuleDestinationOutputWithContext(ctx context.Context) ReplicationConfigurationReplicationConfigurationRuleDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationConfigurationReplicationConfigurationRuleDestinationOutput)
}

// ReplicationConfigurationReplicationConfigurationRuleDestinationArrayInput is an input type that accepts ReplicationConfigurationReplicationConfigurationRuleDestinationArray and ReplicationConfigurationReplicationConfigurationRuleDestinationArrayOutput values.
// You can construct a concrete instance of `ReplicationConfigurationReplicationConfigurationRuleDestinationArrayInput` via:
//
//          ReplicationConfigurationReplicationConfigurationRuleDestinationArray{ ReplicationConfigurationReplicationConfigurationRuleDestinationArgs{...} }
type ReplicationConfigurationReplicationConfigurationRuleDestinationArrayInput interface {
	pulumi.Input

	ToReplicationConfigurationReplicationConfigurationRuleDestinationArrayOutput() ReplicationConfigurationReplicationConfigurationRuleDestinationArrayOutput
	ToReplicationConfigurationReplicationConfigurationRuleDestinationArrayOutputWithContext(context.Context) ReplicationConfigurationReplicationConfigurationRuleDestinationArrayOutput
}

type ReplicationConfigurationReplicationConfigurationRuleDestinationArray []ReplicationConfigurationReplicationConfigurationRuleDestinationInput

func (ReplicationConfigurationReplicationConfigurationRuleDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReplicationConfigurationReplicationConfigurationRuleDestination)(nil)).Elem()
}

func (i ReplicationConfigurationReplicationConfigurationRuleDestinationArray) ToReplicationConfigurationReplicationConfigurationRuleDestinationArrayOutput() ReplicationConfigurationReplicationConfigurationRuleDestinationArrayOutput {
	return i.ToReplicationConfigurationReplicationConfigurationRuleDestinationArrayOutputWithContext(context.Background())
}

func (i ReplicationConfigurationReplicationConfigurationRuleDestinationArray) ToReplicationConfigurationReplicationConfigurationRuleDestinationArrayOutputWithContext(ctx context.Context) ReplicationConfigurationReplicationConfigurationRuleDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationConfigurationReplicationConfigurationRuleDestinationArrayOutput)
}

type ReplicationConfigurationReplicationConfigurationRuleDestinationOutput struct{ *pulumi.OutputState }

func (ReplicationConfigurationReplicationConfigurationRuleDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationConfigurationReplicationConfigurationRuleDestination)(nil)).Elem()
}

func (o ReplicationConfigurationReplicationConfigurationRuleDestinationOutput) ToReplicationConfigurationReplicationConfigurationRuleDestinationOutput() ReplicationConfigurationReplicationConfigurationRuleDestinationOutput {
	return o
}

func (o ReplicationConfigurationReplicationConfigurationRuleDestinationOutput) ToReplicationConfigurationReplicationConfigurationRuleDestinationOutputWithContext(ctx context.Context) ReplicationConfigurationReplicationConfigurationRuleDestinationOutput {
	return o
}

// A Region to replicate to.
func (o ReplicationConfigurationReplicationConfigurationRuleDestinationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicationConfigurationReplicationConfigurationRuleDestination) string { return v.Region }).(pulumi.StringOutput)
}

// The account ID of the destination registry to replicate to.
func (o ReplicationConfigurationReplicationConfigurationRuleDestinationOutput) RegistryId() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicationConfigurationReplicationConfigurationRuleDestination) string { return v.RegistryId }).(pulumi.StringOutput)
}

type ReplicationConfigurationReplicationConfigurationRuleDestinationArrayOutput struct{ *pulumi.OutputState }

func (ReplicationConfigurationReplicationConfigurationRuleDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReplicationConfigurationReplicationConfigurationRuleDestination)(nil)).Elem()
}

func (o ReplicationConfigurationReplicationConfigurationRuleDestinationArrayOutput) ToReplicationConfigurationReplicationConfigurationRuleDestinationArrayOutput() ReplicationConfigurationReplicationConfigurationRuleDestinationArrayOutput {
	return o
}

func (o ReplicationConfigurationReplicationConfigurationRuleDestinationArrayOutput) ToReplicationConfigurationReplicationConfigurationRuleDestinationArrayOutputWithContext(ctx context.Context) ReplicationConfigurationReplicationConfigurationRuleDestinationArrayOutput {
	return o
}

func (o ReplicationConfigurationReplicationConfigurationRuleDestinationArrayOutput) Index(i pulumi.IntInput) ReplicationConfigurationReplicationConfigurationRuleDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReplicationConfigurationReplicationConfigurationRuleDestination {
		return vs[0].([]ReplicationConfigurationReplicationConfigurationRuleDestination)[vs[1].(int)]
	}).(ReplicationConfigurationReplicationConfigurationRuleDestinationOutput)
}

type RepositoryEncryptionConfiguration struct {
	// The encryption type to use for the repository. Valid values are `AES256` or `KMS`. Defaults to `AES256`.
	EncryptionType *string `pulumi:"encryptionType"`
	// The ARN of the KMS key to use when `encryptionType` is `KMS`. If not specified, uses the default AWS managed key for ECR.
	KmsKey *string `pulumi:"kmsKey"`
}

// RepositoryEncryptionConfigurationInput is an input type that accepts RepositoryEncryptionConfigurationArgs and RepositoryEncryptionConfigurationOutput values.
// You can construct a concrete instance of `RepositoryEncryptionConfigurationInput` via:
//
//          RepositoryEncryptionConfigurationArgs{...}
type RepositoryEncryptionConfigurationInput interface {
	pulumi.Input

	ToRepositoryEncryptionConfigurationOutput() RepositoryEncryptionConfigurationOutput
	ToRepositoryEncryptionConfigurationOutputWithContext(context.Context) RepositoryEncryptionConfigurationOutput
}

type RepositoryEncryptionConfigurationArgs struct {
	// The encryption type to use for the repository. Valid values are `AES256` or `KMS`. Defaults to `AES256`.
	EncryptionType pulumi.StringPtrInput `pulumi:"encryptionType"`
	// The ARN of the KMS key to use when `encryptionType` is `KMS`. If not specified, uses the default AWS managed key for ECR.
	KmsKey pulumi.StringPtrInput `pulumi:"kmsKey"`
}

func (RepositoryEncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryEncryptionConfiguration)(nil)).Elem()
}

func (i RepositoryEncryptionConfigurationArgs) ToRepositoryEncryptionConfigurationOutput() RepositoryEncryptionConfigurationOutput {
	return i.ToRepositoryEncryptionConfigurationOutputWithContext(context.Background())
}

func (i RepositoryEncryptionConfigurationArgs) ToRepositoryEncryptionConfigurationOutputWithContext(ctx context.Context) RepositoryEncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryEncryptionConfigurationOutput)
}

// RepositoryEncryptionConfigurationArrayInput is an input type that accepts RepositoryEncryptionConfigurationArray and RepositoryEncryptionConfigurationArrayOutput values.
// You can construct a concrete instance of `RepositoryEncryptionConfigurationArrayInput` via:
//
//          RepositoryEncryptionConfigurationArray{ RepositoryEncryptionConfigurationArgs{...} }
type RepositoryEncryptionConfigurationArrayInput interface {
	pulumi.Input

	ToRepositoryEncryptionConfigurationArrayOutput() RepositoryEncryptionConfigurationArrayOutput
	ToRepositoryEncryptionConfigurationArrayOutputWithContext(context.Context) RepositoryEncryptionConfigurationArrayOutput
}

type RepositoryEncryptionConfigurationArray []RepositoryEncryptionConfigurationInput

func (RepositoryEncryptionConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryEncryptionConfiguration)(nil)).Elem()
}

func (i RepositoryEncryptionConfigurationArray) ToRepositoryEncryptionConfigurationArrayOutput() RepositoryEncryptionConfigurationArrayOutput {
	return i.ToRepositoryEncryptionConfigurationArrayOutputWithContext(context.Background())
}

func (i RepositoryEncryptionConfigurationArray) ToRepositoryEncryptionConfigurationArrayOutputWithContext(ctx context.Context) RepositoryEncryptionConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryEncryptionConfigurationArrayOutput)
}

type RepositoryEncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (RepositoryEncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryEncryptionConfiguration)(nil)).Elem()
}

func (o RepositoryEncryptionConfigurationOutput) ToRepositoryEncryptionConfigurationOutput() RepositoryEncryptionConfigurationOutput {
	return o
}

func (o RepositoryEncryptionConfigurationOutput) ToRepositoryEncryptionConfigurationOutputWithContext(ctx context.Context) RepositoryEncryptionConfigurationOutput {
	return o
}

// The encryption type to use for the repository. Valid values are `AES256` or `KMS`. Defaults to `AES256`.
func (o RepositoryEncryptionConfigurationOutput) EncryptionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryEncryptionConfiguration) *string { return v.EncryptionType }).(pulumi.StringPtrOutput)
}

// The ARN of the KMS key to use when `encryptionType` is `KMS`. If not specified, uses the default AWS managed key for ECR.
func (o RepositoryEncryptionConfigurationOutput) KmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryEncryptionConfiguration) *string { return v.KmsKey }).(pulumi.StringPtrOutput)
}

type RepositoryEncryptionConfigurationArrayOutput struct{ *pulumi.OutputState }

func (RepositoryEncryptionConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryEncryptionConfiguration)(nil)).Elem()
}

func (o RepositoryEncryptionConfigurationArrayOutput) ToRepositoryEncryptionConfigurationArrayOutput() RepositoryEncryptionConfigurationArrayOutput {
	return o
}

func (o RepositoryEncryptionConfigurationArrayOutput) ToRepositoryEncryptionConfigurationArrayOutputWithContext(ctx context.Context) RepositoryEncryptionConfigurationArrayOutput {
	return o
}

func (o RepositoryEncryptionConfigurationArrayOutput) Index(i pulumi.IntInput) RepositoryEncryptionConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RepositoryEncryptionConfiguration {
		return vs[0].([]RepositoryEncryptionConfiguration)[vs[1].(int)]
	}).(RepositoryEncryptionConfigurationOutput)
}

type RepositoryImageScanningConfiguration struct {
	// Indicates whether images are scanned after being pushed to the repository (true) or not scanned (false).
	ScanOnPush bool `pulumi:"scanOnPush"`
}

// RepositoryImageScanningConfigurationInput is an input type that accepts RepositoryImageScanningConfigurationArgs and RepositoryImageScanningConfigurationOutput values.
// You can construct a concrete instance of `RepositoryImageScanningConfigurationInput` via:
//
//          RepositoryImageScanningConfigurationArgs{...}
type RepositoryImageScanningConfigurationInput interface {
	pulumi.Input

	ToRepositoryImageScanningConfigurationOutput() RepositoryImageScanningConfigurationOutput
	ToRepositoryImageScanningConfigurationOutputWithContext(context.Context) RepositoryImageScanningConfigurationOutput
}

type RepositoryImageScanningConfigurationArgs struct {
	// Indicates whether images are scanned after being pushed to the repository (true) or not scanned (false).
	ScanOnPush pulumi.BoolInput `pulumi:"scanOnPush"`
}

func (RepositoryImageScanningConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryImageScanningConfiguration)(nil)).Elem()
}

func (i RepositoryImageScanningConfigurationArgs) ToRepositoryImageScanningConfigurationOutput() RepositoryImageScanningConfigurationOutput {
	return i.ToRepositoryImageScanningConfigurationOutputWithContext(context.Background())
}

func (i RepositoryImageScanningConfigurationArgs) ToRepositoryImageScanningConfigurationOutputWithContext(ctx context.Context) RepositoryImageScanningConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryImageScanningConfigurationOutput)
}

func (i RepositoryImageScanningConfigurationArgs) ToRepositoryImageScanningConfigurationPtrOutput() RepositoryImageScanningConfigurationPtrOutput {
	return i.ToRepositoryImageScanningConfigurationPtrOutputWithContext(context.Background())
}

func (i RepositoryImageScanningConfigurationArgs) ToRepositoryImageScanningConfigurationPtrOutputWithContext(ctx context.Context) RepositoryImageScanningConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryImageScanningConfigurationOutput).ToRepositoryImageScanningConfigurationPtrOutputWithContext(ctx)
}

// RepositoryImageScanningConfigurationPtrInput is an input type that accepts RepositoryImageScanningConfigurationArgs, RepositoryImageScanningConfigurationPtr and RepositoryImageScanningConfigurationPtrOutput values.
// You can construct a concrete instance of `RepositoryImageScanningConfigurationPtrInput` via:
//
//          RepositoryImageScanningConfigurationArgs{...}
//
//  or:
//
//          nil
type RepositoryImageScanningConfigurationPtrInput interface {
	pulumi.Input

	ToRepositoryImageScanningConfigurationPtrOutput() RepositoryImageScanningConfigurationPtrOutput
	ToRepositoryImageScanningConfigurationPtrOutputWithContext(context.Context) RepositoryImageScanningConfigurationPtrOutput
}

type repositoryImageScanningConfigurationPtrType RepositoryImageScanningConfigurationArgs

func RepositoryImageScanningConfigurationPtr(v *RepositoryImageScanningConfigurationArgs) RepositoryImageScanningConfigurationPtrInput {
	return (*repositoryImageScanningConfigurationPtrType)(v)
}

func (*repositoryImageScanningConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryImageScanningConfiguration)(nil)).Elem()
}

func (i *repositoryImageScanningConfigurationPtrType) ToRepositoryImageScanningConfigurationPtrOutput() RepositoryImageScanningConfigurationPtrOutput {
	return i.ToRepositoryImageScanningConfigurationPtrOutputWithContext(context.Background())
}

func (i *repositoryImageScanningConfigurationPtrType) ToRepositoryImageScanningConfigurationPtrOutputWithContext(ctx context.Context) RepositoryImageScanningConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryImageScanningConfigurationPtrOutput)
}

type RepositoryImageScanningConfigurationOutput struct{ *pulumi.OutputState }

func (RepositoryImageScanningConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryImageScanningConfiguration)(nil)).Elem()
}

func (o RepositoryImageScanningConfigurationOutput) ToRepositoryImageScanningConfigurationOutput() RepositoryImageScanningConfigurationOutput {
	return o
}

func (o RepositoryImageScanningConfigurationOutput) ToRepositoryImageScanningConfigurationOutputWithContext(ctx context.Context) RepositoryImageScanningConfigurationOutput {
	return o
}

func (o RepositoryImageScanningConfigurationOutput) ToRepositoryImageScanningConfigurationPtrOutput() RepositoryImageScanningConfigurationPtrOutput {
	return o.ToRepositoryImageScanningConfigurationPtrOutputWithContext(context.Background())
}

func (o RepositoryImageScanningConfigurationOutput) ToRepositoryImageScanningConfigurationPtrOutputWithContext(ctx context.Context) RepositoryImageScanningConfigurationPtrOutput {
	return o.ApplyT(func(v RepositoryImageScanningConfiguration) *RepositoryImageScanningConfiguration {
		return &v
	}).(RepositoryImageScanningConfigurationPtrOutput)
}

// Indicates whether images are scanned after being pushed to the repository (true) or not scanned (false).
func (o RepositoryImageScanningConfigurationOutput) ScanOnPush() pulumi.BoolOutput {
	return o.ApplyT(func(v RepositoryImageScanningConfiguration) bool { return v.ScanOnPush }).(pulumi.BoolOutput)
}

type RepositoryImageScanningConfigurationPtrOutput struct{ *pulumi.OutputState }

func (RepositoryImageScanningConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryImageScanningConfiguration)(nil)).Elem()
}

func (o RepositoryImageScanningConfigurationPtrOutput) ToRepositoryImageScanningConfigurationPtrOutput() RepositoryImageScanningConfigurationPtrOutput {
	return o
}

func (o RepositoryImageScanningConfigurationPtrOutput) ToRepositoryImageScanningConfigurationPtrOutputWithContext(ctx context.Context) RepositoryImageScanningConfigurationPtrOutput {
	return o
}

func (o RepositoryImageScanningConfigurationPtrOutput) Elem() RepositoryImageScanningConfigurationOutput {
	return o.ApplyT(func(v *RepositoryImageScanningConfiguration) RepositoryImageScanningConfiguration { return *v }).(RepositoryImageScanningConfigurationOutput)
}

// Indicates whether images are scanned after being pushed to the repository (true) or not scanned (false).
func (o RepositoryImageScanningConfigurationPtrOutput) ScanOnPush() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepositoryImageScanningConfiguration) *bool {
		if v == nil {
			return nil
		}
		return &v.ScanOnPush
	}).(pulumi.BoolPtrOutput)
}

type GetRepositoryEncryptionConfiguration struct {
	// The encryption type to use for the repository, either `AES256` or `KMS`.
	EncryptionType string `pulumi:"encryptionType"`
	// If `encryptionType` is `KMS`, the ARN of the KMS key used.
	KmsKey string `pulumi:"kmsKey"`
}

// GetRepositoryEncryptionConfigurationInput is an input type that accepts GetRepositoryEncryptionConfigurationArgs and GetRepositoryEncryptionConfigurationOutput values.
// You can construct a concrete instance of `GetRepositoryEncryptionConfigurationInput` via:
//
//          GetRepositoryEncryptionConfigurationArgs{...}
type GetRepositoryEncryptionConfigurationInput interface {
	pulumi.Input

	ToGetRepositoryEncryptionConfigurationOutput() GetRepositoryEncryptionConfigurationOutput
	ToGetRepositoryEncryptionConfigurationOutputWithContext(context.Context) GetRepositoryEncryptionConfigurationOutput
}

type GetRepositoryEncryptionConfigurationArgs struct {
	// The encryption type to use for the repository, either `AES256` or `KMS`.
	EncryptionType pulumi.StringInput `pulumi:"encryptionType"`
	// If `encryptionType` is `KMS`, the ARN of the KMS key used.
	KmsKey pulumi.StringInput `pulumi:"kmsKey"`
}

func (GetRepositoryEncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryEncryptionConfiguration)(nil)).Elem()
}

func (i GetRepositoryEncryptionConfigurationArgs) ToGetRepositoryEncryptionConfigurationOutput() GetRepositoryEncryptionConfigurationOutput {
	return i.ToGetRepositoryEncryptionConfigurationOutputWithContext(context.Background())
}

func (i GetRepositoryEncryptionConfigurationArgs) ToGetRepositoryEncryptionConfigurationOutputWithContext(ctx context.Context) GetRepositoryEncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryEncryptionConfigurationOutput)
}

// GetRepositoryEncryptionConfigurationArrayInput is an input type that accepts GetRepositoryEncryptionConfigurationArray and GetRepositoryEncryptionConfigurationArrayOutput values.
// You can construct a concrete instance of `GetRepositoryEncryptionConfigurationArrayInput` via:
//
//          GetRepositoryEncryptionConfigurationArray{ GetRepositoryEncryptionConfigurationArgs{...} }
type GetRepositoryEncryptionConfigurationArrayInput interface {
	pulumi.Input

	ToGetRepositoryEncryptionConfigurationArrayOutput() GetRepositoryEncryptionConfigurationArrayOutput
	ToGetRepositoryEncryptionConfigurationArrayOutputWithContext(context.Context) GetRepositoryEncryptionConfigurationArrayOutput
}

type GetRepositoryEncryptionConfigurationArray []GetRepositoryEncryptionConfigurationInput

func (GetRepositoryEncryptionConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryEncryptionConfiguration)(nil)).Elem()
}

func (i GetRepositoryEncryptionConfigurationArray) ToGetRepositoryEncryptionConfigurationArrayOutput() GetRepositoryEncryptionConfigurationArrayOutput {
	return i.ToGetRepositoryEncryptionConfigurationArrayOutputWithContext(context.Background())
}

func (i GetRepositoryEncryptionConfigurationArray) ToGetRepositoryEncryptionConfigurationArrayOutputWithContext(ctx context.Context) GetRepositoryEncryptionConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryEncryptionConfigurationArrayOutput)
}

type GetRepositoryEncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (GetRepositoryEncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryEncryptionConfiguration)(nil)).Elem()
}

func (o GetRepositoryEncryptionConfigurationOutput) ToGetRepositoryEncryptionConfigurationOutput() GetRepositoryEncryptionConfigurationOutput {
	return o
}

func (o GetRepositoryEncryptionConfigurationOutput) ToGetRepositoryEncryptionConfigurationOutputWithContext(ctx context.Context) GetRepositoryEncryptionConfigurationOutput {
	return o
}

// The encryption type to use for the repository, either `AES256` or `KMS`.
func (o GetRepositoryEncryptionConfigurationOutput) EncryptionType() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryEncryptionConfiguration) string { return v.EncryptionType }).(pulumi.StringOutput)
}

// If `encryptionType` is `KMS`, the ARN of the KMS key used.
func (o GetRepositoryEncryptionConfigurationOutput) KmsKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryEncryptionConfiguration) string { return v.KmsKey }).(pulumi.StringOutput)
}

type GetRepositoryEncryptionConfigurationArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryEncryptionConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryEncryptionConfiguration)(nil)).Elem()
}

func (o GetRepositoryEncryptionConfigurationArrayOutput) ToGetRepositoryEncryptionConfigurationArrayOutput() GetRepositoryEncryptionConfigurationArrayOutput {
	return o
}

func (o GetRepositoryEncryptionConfigurationArrayOutput) ToGetRepositoryEncryptionConfigurationArrayOutputWithContext(ctx context.Context) GetRepositoryEncryptionConfigurationArrayOutput {
	return o
}

func (o GetRepositoryEncryptionConfigurationArrayOutput) Index(i pulumi.IntInput) GetRepositoryEncryptionConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryEncryptionConfiguration {
		return vs[0].([]GetRepositoryEncryptionConfiguration)[vs[1].(int)]
	}).(GetRepositoryEncryptionConfigurationOutput)
}

type GetRepositoryImageScanningConfiguration struct {
	// Indicates whether images are scanned after being pushed to the repository.
	ScanOnPush bool `pulumi:"scanOnPush"`
}

// GetRepositoryImageScanningConfigurationInput is an input type that accepts GetRepositoryImageScanningConfigurationArgs and GetRepositoryImageScanningConfigurationOutput values.
// You can construct a concrete instance of `GetRepositoryImageScanningConfigurationInput` via:
//
//          GetRepositoryImageScanningConfigurationArgs{...}
type GetRepositoryImageScanningConfigurationInput interface {
	pulumi.Input

	ToGetRepositoryImageScanningConfigurationOutput() GetRepositoryImageScanningConfigurationOutput
	ToGetRepositoryImageScanningConfigurationOutputWithContext(context.Context) GetRepositoryImageScanningConfigurationOutput
}

type GetRepositoryImageScanningConfigurationArgs struct {
	// Indicates whether images are scanned after being pushed to the repository.
	ScanOnPush pulumi.BoolInput `pulumi:"scanOnPush"`
}

func (GetRepositoryImageScanningConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryImageScanningConfiguration)(nil)).Elem()
}

func (i GetRepositoryImageScanningConfigurationArgs) ToGetRepositoryImageScanningConfigurationOutput() GetRepositoryImageScanningConfigurationOutput {
	return i.ToGetRepositoryImageScanningConfigurationOutputWithContext(context.Background())
}

func (i GetRepositoryImageScanningConfigurationArgs) ToGetRepositoryImageScanningConfigurationOutputWithContext(ctx context.Context) GetRepositoryImageScanningConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryImageScanningConfigurationOutput)
}

// GetRepositoryImageScanningConfigurationArrayInput is an input type that accepts GetRepositoryImageScanningConfigurationArray and GetRepositoryImageScanningConfigurationArrayOutput values.
// You can construct a concrete instance of `GetRepositoryImageScanningConfigurationArrayInput` via:
//
//          GetRepositoryImageScanningConfigurationArray{ GetRepositoryImageScanningConfigurationArgs{...} }
type GetRepositoryImageScanningConfigurationArrayInput interface {
	pulumi.Input

	ToGetRepositoryImageScanningConfigurationArrayOutput() GetRepositoryImageScanningConfigurationArrayOutput
	ToGetRepositoryImageScanningConfigurationArrayOutputWithContext(context.Context) GetRepositoryImageScanningConfigurationArrayOutput
}

type GetRepositoryImageScanningConfigurationArray []GetRepositoryImageScanningConfigurationInput

func (GetRepositoryImageScanningConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryImageScanningConfiguration)(nil)).Elem()
}

func (i GetRepositoryImageScanningConfigurationArray) ToGetRepositoryImageScanningConfigurationArrayOutput() GetRepositoryImageScanningConfigurationArrayOutput {
	return i.ToGetRepositoryImageScanningConfigurationArrayOutputWithContext(context.Background())
}

func (i GetRepositoryImageScanningConfigurationArray) ToGetRepositoryImageScanningConfigurationArrayOutputWithContext(ctx context.Context) GetRepositoryImageScanningConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryImageScanningConfigurationArrayOutput)
}

type GetRepositoryImageScanningConfigurationOutput struct{ *pulumi.OutputState }

func (GetRepositoryImageScanningConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryImageScanningConfiguration)(nil)).Elem()
}

func (o GetRepositoryImageScanningConfigurationOutput) ToGetRepositoryImageScanningConfigurationOutput() GetRepositoryImageScanningConfigurationOutput {
	return o
}

func (o GetRepositoryImageScanningConfigurationOutput) ToGetRepositoryImageScanningConfigurationOutputWithContext(ctx context.Context) GetRepositoryImageScanningConfigurationOutput {
	return o
}

// Indicates whether images are scanned after being pushed to the repository.
func (o GetRepositoryImageScanningConfigurationOutput) ScanOnPush() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRepositoryImageScanningConfiguration) bool { return v.ScanOnPush }).(pulumi.BoolOutput)
}

type GetRepositoryImageScanningConfigurationArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryImageScanningConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryImageScanningConfiguration)(nil)).Elem()
}

func (o GetRepositoryImageScanningConfigurationArrayOutput) ToGetRepositoryImageScanningConfigurationArrayOutput() GetRepositoryImageScanningConfigurationArrayOutput {
	return o
}

func (o GetRepositoryImageScanningConfigurationArrayOutput) ToGetRepositoryImageScanningConfigurationArrayOutputWithContext(ctx context.Context) GetRepositoryImageScanningConfigurationArrayOutput {
	return o
}

func (o GetRepositoryImageScanningConfigurationArrayOutput) Index(i pulumi.IntInput) GetRepositoryImageScanningConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryImageScanningConfiguration {
		return vs[0].([]GetRepositoryImageScanningConfiguration)[vs[1].(int)]
	}).(GetRepositoryImageScanningConfigurationOutput)
}

func init() {
	pulumi.RegisterOutputType(ReplicationConfigurationReplicationConfigurationOutput{})
	pulumi.RegisterOutputType(ReplicationConfigurationReplicationConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ReplicationConfigurationReplicationConfigurationRuleOutput{})
	pulumi.RegisterOutputType(ReplicationConfigurationReplicationConfigurationRulePtrOutput{})
	pulumi.RegisterOutputType(ReplicationConfigurationReplicationConfigurationRuleDestinationOutput{})
	pulumi.RegisterOutputType(ReplicationConfigurationReplicationConfigurationRuleDestinationArrayOutput{})
	pulumi.RegisterOutputType(RepositoryEncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(RepositoryEncryptionConfigurationArrayOutput{})
	pulumi.RegisterOutputType(RepositoryImageScanningConfigurationOutput{})
	pulumi.RegisterOutputType(RepositoryImageScanningConfigurationPtrOutput{})
	pulumi.RegisterOutputType(GetRepositoryEncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(GetRepositoryEncryptionConfigurationArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryImageScanningConfigurationOutput{})
	pulumi.RegisterOutputType(GetRepositoryImageScanningConfigurationArrayOutput{})
}
