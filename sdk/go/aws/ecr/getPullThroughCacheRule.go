// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The ECR Pull Through Cache Rule data source allows the upstream registry URL and registry ID to be retrieved for a Pull Through Cache Rule.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ecr"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ecr.LookupPullThroughCacheRule(ctx, &ecr.LookupPullThroughCacheRuleArgs{
//				EcrRepositoryPrefix: "ecr-public",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupPullThroughCacheRule(ctx *pulumi.Context, args *LookupPullThroughCacheRuleArgs, opts ...pulumi.InvokeOption) (*LookupPullThroughCacheRuleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPullThroughCacheRuleResult
	err := ctx.Invoke("aws:ecr/getPullThroughCacheRule:getPullThroughCacheRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPullThroughCacheRule.
type LookupPullThroughCacheRuleArgs struct {
	// The repository name prefix to use when caching images from the source registry.
	EcrRepositoryPrefix string `pulumi:"ecrRepositoryPrefix"`
}

// A collection of values returned by getPullThroughCacheRule.
type LookupPullThroughCacheRuleResult struct {
	// ARN of the Secret which will be used to authenticate against the registry.
	CredentialArn       string `pulumi:"credentialArn"`
	EcrRepositoryPrefix string `pulumi:"ecrRepositoryPrefix"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The registry ID where the repository was created.
	RegistryId string `pulumi:"registryId"`
	// The registry URL of the upstream public registry to use as the source.
	UpstreamRegistryUrl string `pulumi:"upstreamRegistryUrl"`
}

func LookupPullThroughCacheRuleOutput(ctx *pulumi.Context, args LookupPullThroughCacheRuleOutputArgs, opts ...pulumi.InvokeOption) LookupPullThroughCacheRuleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPullThroughCacheRuleResult, error) {
			args := v.(LookupPullThroughCacheRuleArgs)
			r, err := LookupPullThroughCacheRule(ctx, &args, opts...)
			var s LookupPullThroughCacheRuleResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPullThroughCacheRuleResultOutput)
}

// A collection of arguments for invoking getPullThroughCacheRule.
type LookupPullThroughCacheRuleOutputArgs struct {
	// The repository name prefix to use when caching images from the source registry.
	EcrRepositoryPrefix pulumi.StringInput `pulumi:"ecrRepositoryPrefix"`
}

func (LookupPullThroughCacheRuleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPullThroughCacheRuleArgs)(nil)).Elem()
}

// A collection of values returned by getPullThroughCacheRule.
type LookupPullThroughCacheRuleResultOutput struct{ *pulumi.OutputState }

func (LookupPullThroughCacheRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPullThroughCacheRuleResult)(nil)).Elem()
}

func (o LookupPullThroughCacheRuleResultOutput) ToLookupPullThroughCacheRuleResultOutput() LookupPullThroughCacheRuleResultOutput {
	return o
}

func (o LookupPullThroughCacheRuleResultOutput) ToLookupPullThroughCacheRuleResultOutputWithContext(ctx context.Context) LookupPullThroughCacheRuleResultOutput {
	return o
}

// ARN of the Secret which will be used to authenticate against the registry.
func (o LookupPullThroughCacheRuleResultOutput) CredentialArn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPullThroughCacheRuleResult) string { return v.CredentialArn }).(pulumi.StringOutput)
}

func (o LookupPullThroughCacheRuleResultOutput) EcrRepositoryPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPullThroughCacheRuleResult) string { return v.EcrRepositoryPrefix }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupPullThroughCacheRuleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPullThroughCacheRuleResult) string { return v.Id }).(pulumi.StringOutput)
}

// The registry ID where the repository was created.
func (o LookupPullThroughCacheRuleResultOutput) RegistryId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPullThroughCacheRuleResult) string { return v.RegistryId }).(pulumi.StringOutput)
}

// The registry URL of the upstream public registry to use as the source.
func (o LookupPullThroughCacheRuleResultOutput) UpstreamRegistryUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPullThroughCacheRuleResult) string { return v.UpstreamRegistryUrl }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPullThroughCacheRuleResultOutput{})
}
