// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecr

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Elastic Container Registry Repository Creation Template.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ecr"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/iam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := iam.GetPolicyDocument(ctx, &iam.GetPolicyDocumentArgs{
//				Statements: []iam.GetPolicyDocumentStatement{
//					{
//						Sid:    pulumi.StringRef("new policy"),
//						Effect: pulumi.StringRef("Allow"),
//						Principals: []iam.GetPolicyDocumentStatementPrincipal{
//							{
//								Type: "AWS",
//								Identifiers: []string{
//									"123456789012",
//								},
//							},
//						},
//						Actions: []string{
//							"ecr:GetDownloadUrlForLayer",
//							"ecr:BatchGetImage",
//							"ecr:BatchCheckLayerAvailability",
//							"ecr:PutImage",
//							"ecr:InitiateLayerUpload",
//							"ecr:UploadLayerPart",
//							"ecr:CompleteLayerUpload",
//							"ecr:DescribeRepositories",
//							"ecr:GetRepositoryPolicy",
//							"ecr:ListImages",
//							"ecr:DeleteRepository",
//							"ecr:BatchDeleteImage",
//							"ecr:SetRepositoryPolicy",
//							"ecr:DeleteRepositoryPolicy",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = ecr.NewRepositoryCreationTemplate(ctx, "example", &ecr.RepositoryCreationTemplateArgs{
//				Prefix:             pulumi.String("example"),
//				Description:        pulumi.String("An example template"),
//				ImageTagMutability: pulumi.String("IMMUTABLE"),
//				CustomRoleArn:      pulumi.String("arn:aws:iam::123456789012:role/example"),
//				AppliedFors: pulumi.StringArray{
//					pulumi.String("PULL_THROUGH_CACHE"),
//				},
//				EncryptionConfigurations: ecr.RepositoryCreationTemplateEncryptionConfigurationArray{
//					&ecr.RepositoryCreationTemplateEncryptionConfigurationArgs{
//						EncryptionType: pulumi.String("AES256"),
//					},
//				},
//				RepositoryPolicy: pulumi.String(example.Json),
//				LifecyclePolicy: pulumi.String(`{
//	  "rules": [
//	    {
//	      "rulePriority": 1,
//	      "description": "Expire images older than 14 days",
//	      "selection": {
//	        "tagStatus": "untagged",
//	        "countType": "sinceImagePushed",
//	        "countUnit": "days",
//	        "countNumber": 14
//	      },
//	      "action": {
//	        "type": "expire"
//	      }
//	    }
//	  ]
//	}
//
// `),
//
//				ResourceTags: pulumi.StringMap{
//					"Foo": pulumi.String("Bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import the ECR Repository Creating Templates using the `prefix`. For example:
//
// ```sh
// $ pulumi import aws:ecr/repositoryCreationTemplate:RepositoryCreationTemplate example example
// ```
type RepositoryCreationTemplate struct {
	pulumi.CustomResourceState

	// Which features this template applies to. Must contain one or more of `PULL_THROUGH_CACHE` or `REPLICATION`.
	AppliedFors pulumi.StringArrayOutput `pulumi:"appliedFors"`
	// A custom IAM role to use for repository creation. Required if using repository tags or KMS encryption.
	CustomRoleArn pulumi.StringPtrOutput `pulumi:"customRoleArn"`
	// The description for this template.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Encryption configuration for any created repositories. See below for schema.
	EncryptionConfigurations RepositoryCreationTemplateEncryptionConfigurationArrayOutput `pulumi:"encryptionConfigurations"`
	// The tag mutability setting for any created repositories. Must be one of: `MUTABLE` or `IMMUTABLE`. Defaults to `MUTABLE`.
	ImageTagMutability pulumi.StringPtrOutput `pulumi:"imageTagMutability"`
	// The lifecycle policy document to apply to any created repositories. See more details about [Policy Parameters](http://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html#lifecycle_policy_parameters) in the official AWS docs. Consider using the `ecr.getLifecyclePolicyDocument` dataSource to generate/manage the JSON document used for the `lifecyclePolicy` argument.
	LifecyclePolicy pulumi.StringPtrOutput `pulumi:"lifecyclePolicy"`
	// The repository name prefix to match against.
	Prefix pulumi.StringOutput `pulumi:"prefix"`
	// The registry ID the repository creation template applies to.
	RegistryId       pulumi.StringOutput    `pulumi:"registryId"`
	RepositoryPolicy pulumi.StringPtrOutput `pulumi:"repositoryPolicy"`
	// A map of tags to assign to any created repositories.
	ResourceTags pulumi.StringMapOutput `pulumi:"resourceTags"`
}

// NewRepositoryCreationTemplate registers a new resource with the given unique name, arguments, and options.
func NewRepositoryCreationTemplate(ctx *pulumi.Context,
	name string, args *RepositoryCreationTemplateArgs, opts ...pulumi.ResourceOption) (*RepositoryCreationTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppliedFors == nil {
		return nil, errors.New("invalid value for required argument 'AppliedFors'")
	}
	if args.Prefix == nil {
		return nil, errors.New("invalid value for required argument 'Prefix'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RepositoryCreationTemplate
	err := ctx.RegisterResource("aws:ecr/repositoryCreationTemplate:RepositoryCreationTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepositoryCreationTemplate gets an existing RepositoryCreationTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepositoryCreationTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryCreationTemplateState, opts ...pulumi.ResourceOption) (*RepositoryCreationTemplate, error) {
	var resource RepositoryCreationTemplate
	err := ctx.ReadResource("aws:ecr/repositoryCreationTemplate:RepositoryCreationTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RepositoryCreationTemplate resources.
type repositoryCreationTemplateState struct {
	// Which features this template applies to. Must contain one or more of `PULL_THROUGH_CACHE` or `REPLICATION`.
	AppliedFors []string `pulumi:"appliedFors"`
	// A custom IAM role to use for repository creation. Required if using repository tags or KMS encryption.
	CustomRoleArn *string `pulumi:"customRoleArn"`
	// The description for this template.
	Description *string `pulumi:"description"`
	// Encryption configuration for any created repositories. See below for schema.
	EncryptionConfigurations []RepositoryCreationTemplateEncryptionConfiguration `pulumi:"encryptionConfigurations"`
	// The tag mutability setting for any created repositories. Must be one of: `MUTABLE` or `IMMUTABLE`. Defaults to `MUTABLE`.
	ImageTagMutability *string `pulumi:"imageTagMutability"`
	// The lifecycle policy document to apply to any created repositories. See more details about [Policy Parameters](http://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html#lifecycle_policy_parameters) in the official AWS docs. Consider using the `ecr.getLifecyclePolicyDocument` dataSource to generate/manage the JSON document used for the `lifecyclePolicy` argument.
	LifecyclePolicy *string `pulumi:"lifecyclePolicy"`
	// The repository name prefix to match against.
	Prefix *string `pulumi:"prefix"`
	// The registry ID the repository creation template applies to.
	RegistryId       *string `pulumi:"registryId"`
	RepositoryPolicy *string `pulumi:"repositoryPolicy"`
	// A map of tags to assign to any created repositories.
	ResourceTags map[string]string `pulumi:"resourceTags"`
}

type RepositoryCreationTemplateState struct {
	// Which features this template applies to. Must contain one or more of `PULL_THROUGH_CACHE` or `REPLICATION`.
	AppliedFors pulumi.StringArrayInput
	// A custom IAM role to use for repository creation. Required if using repository tags or KMS encryption.
	CustomRoleArn pulumi.StringPtrInput
	// The description for this template.
	Description pulumi.StringPtrInput
	// Encryption configuration for any created repositories. See below for schema.
	EncryptionConfigurations RepositoryCreationTemplateEncryptionConfigurationArrayInput
	// The tag mutability setting for any created repositories. Must be one of: `MUTABLE` or `IMMUTABLE`. Defaults to `MUTABLE`.
	ImageTagMutability pulumi.StringPtrInput
	// The lifecycle policy document to apply to any created repositories. See more details about [Policy Parameters](http://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html#lifecycle_policy_parameters) in the official AWS docs. Consider using the `ecr.getLifecyclePolicyDocument` dataSource to generate/manage the JSON document used for the `lifecyclePolicy` argument.
	LifecyclePolicy pulumi.StringPtrInput
	// The repository name prefix to match against.
	Prefix pulumi.StringPtrInput
	// The registry ID the repository creation template applies to.
	RegistryId       pulumi.StringPtrInput
	RepositoryPolicy pulumi.StringPtrInput
	// A map of tags to assign to any created repositories.
	ResourceTags pulumi.StringMapInput
}

func (RepositoryCreationTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryCreationTemplateState)(nil)).Elem()
}

type repositoryCreationTemplateArgs struct {
	// Which features this template applies to. Must contain one or more of `PULL_THROUGH_CACHE` or `REPLICATION`.
	AppliedFors []string `pulumi:"appliedFors"`
	// A custom IAM role to use for repository creation. Required if using repository tags or KMS encryption.
	CustomRoleArn *string `pulumi:"customRoleArn"`
	// The description for this template.
	Description *string `pulumi:"description"`
	// Encryption configuration for any created repositories. See below for schema.
	EncryptionConfigurations []RepositoryCreationTemplateEncryptionConfiguration `pulumi:"encryptionConfigurations"`
	// The tag mutability setting for any created repositories. Must be one of: `MUTABLE` or `IMMUTABLE`. Defaults to `MUTABLE`.
	ImageTagMutability *string `pulumi:"imageTagMutability"`
	// The lifecycle policy document to apply to any created repositories. See more details about [Policy Parameters](http://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html#lifecycle_policy_parameters) in the official AWS docs. Consider using the `ecr.getLifecyclePolicyDocument` dataSource to generate/manage the JSON document used for the `lifecyclePolicy` argument.
	LifecyclePolicy *string `pulumi:"lifecyclePolicy"`
	// The repository name prefix to match against.
	Prefix           string  `pulumi:"prefix"`
	RepositoryPolicy *string `pulumi:"repositoryPolicy"`
	// A map of tags to assign to any created repositories.
	ResourceTags map[string]string `pulumi:"resourceTags"`
}

// The set of arguments for constructing a RepositoryCreationTemplate resource.
type RepositoryCreationTemplateArgs struct {
	// Which features this template applies to. Must contain one or more of `PULL_THROUGH_CACHE` or `REPLICATION`.
	AppliedFors pulumi.StringArrayInput
	// A custom IAM role to use for repository creation. Required if using repository tags or KMS encryption.
	CustomRoleArn pulumi.StringPtrInput
	// The description for this template.
	Description pulumi.StringPtrInput
	// Encryption configuration for any created repositories. See below for schema.
	EncryptionConfigurations RepositoryCreationTemplateEncryptionConfigurationArrayInput
	// The tag mutability setting for any created repositories. Must be one of: `MUTABLE` or `IMMUTABLE`. Defaults to `MUTABLE`.
	ImageTagMutability pulumi.StringPtrInput
	// The lifecycle policy document to apply to any created repositories. See more details about [Policy Parameters](http://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html#lifecycle_policy_parameters) in the official AWS docs. Consider using the `ecr.getLifecyclePolicyDocument` dataSource to generate/manage the JSON document used for the `lifecyclePolicy` argument.
	LifecyclePolicy pulumi.StringPtrInput
	// The repository name prefix to match against.
	Prefix           pulumi.StringInput
	RepositoryPolicy pulumi.StringPtrInput
	// A map of tags to assign to any created repositories.
	ResourceTags pulumi.StringMapInput
}

func (RepositoryCreationTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryCreationTemplateArgs)(nil)).Elem()
}

type RepositoryCreationTemplateInput interface {
	pulumi.Input

	ToRepositoryCreationTemplateOutput() RepositoryCreationTemplateOutput
	ToRepositoryCreationTemplateOutputWithContext(ctx context.Context) RepositoryCreationTemplateOutput
}

func (*RepositoryCreationTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryCreationTemplate)(nil)).Elem()
}

func (i *RepositoryCreationTemplate) ToRepositoryCreationTemplateOutput() RepositoryCreationTemplateOutput {
	return i.ToRepositoryCreationTemplateOutputWithContext(context.Background())
}

func (i *RepositoryCreationTemplate) ToRepositoryCreationTemplateOutputWithContext(ctx context.Context) RepositoryCreationTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCreationTemplateOutput)
}

// RepositoryCreationTemplateArrayInput is an input type that accepts RepositoryCreationTemplateArray and RepositoryCreationTemplateArrayOutput values.
// You can construct a concrete instance of `RepositoryCreationTemplateArrayInput` via:
//
//	RepositoryCreationTemplateArray{ RepositoryCreationTemplateArgs{...} }
type RepositoryCreationTemplateArrayInput interface {
	pulumi.Input

	ToRepositoryCreationTemplateArrayOutput() RepositoryCreationTemplateArrayOutput
	ToRepositoryCreationTemplateArrayOutputWithContext(context.Context) RepositoryCreationTemplateArrayOutput
}

type RepositoryCreationTemplateArray []RepositoryCreationTemplateInput

func (RepositoryCreationTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryCreationTemplate)(nil)).Elem()
}

func (i RepositoryCreationTemplateArray) ToRepositoryCreationTemplateArrayOutput() RepositoryCreationTemplateArrayOutput {
	return i.ToRepositoryCreationTemplateArrayOutputWithContext(context.Background())
}

func (i RepositoryCreationTemplateArray) ToRepositoryCreationTemplateArrayOutputWithContext(ctx context.Context) RepositoryCreationTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCreationTemplateArrayOutput)
}

// RepositoryCreationTemplateMapInput is an input type that accepts RepositoryCreationTemplateMap and RepositoryCreationTemplateMapOutput values.
// You can construct a concrete instance of `RepositoryCreationTemplateMapInput` via:
//
//	RepositoryCreationTemplateMap{ "key": RepositoryCreationTemplateArgs{...} }
type RepositoryCreationTemplateMapInput interface {
	pulumi.Input

	ToRepositoryCreationTemplateMapOutput() RepositoryCreationTemplateMapOutput
	ToRepositoryCreationTemplateMapOutputWithContext(context.Context) RepositoryCreationTemplateMapOutput
}

type RepositoryCreationTemplateMap map[string]RepositoryCreationTemplateInput

func (RepositoryCreationTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryCreationTemplate)(nil)).Elem()
}

func (i RepositoryCreationTemplateMap) ToRepositoryCreationTemplateMapOutput() RepositoryCreationTemplateMapOutput {
	return i.ToRepositoryCreationTemplateMapOutputWithContext(context.Background())
}

func (i RepositoryCreationTemplateMap) ToRepositoryCreationTemplateMapOutputWithContext(ctx context.Context) RepositoryCreationTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCreationTemplateMapOutput)
}

type RepositoryCreationTemplateOutput struct{ *pulumi.OutputState }

func (RepositoryCreationTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryCreationTemplate)(nil)).Elem()
}

func (o RepositoryCreationTemplateOutput) ToRepositoryCreationTemplateOutput() RepositoryCreationTemplateOutput {
	return o
}

func (o RepositoryCreationTemplateOutput) ToRepositoryCreationTemplateOutputWithContext(ctx context.Context) RepositoryCreationTemplateOutput {
	return o
}

// Which features this template applies to. Must contain one or more of `PULL_THROUGH_CACHE` or `REPLICATION`.
func (o RepositoryCreationTemplateOutput) AppliedFors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RepositoryCreationTemplate) pulumi.StringArrayOutput { return v.AppliedFors }).(pulumi.StringArrayOutput)
}

// A custom IAM role to use for repository creation. Required if using repository tags or KMS encryption.
func (o RepositoryCreationTemplateOutput) CustomRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryCreationTemplate) pulumi.StringPtrOutput { return v.CustomRoleArn }).(pulumi.StringPtrOutput)
}

// The description for this template.
func (o RepositoryCreationTemplateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryCreationTemplate) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Encryption configuration for any created repositories. See below for schema.
func (o RepositoryCreationTemplateOutput) EncryptionConfigurations() RepositoryCreationTemplateEncryptionConfigurationArrayOutput {
	return o.ApplyT(func(v *RepositoryCreationTemplate) RepositoryCreationTemplateEncryptionConfigurationArrayOutput {
		return v.EncryptionConfigurations
	}).(RepositoryCreationTemplateEncryptionConfigurationArrayOutput)
}

// The tag mutability setting for any created repositories. Must be one of: `MUTABLE` or `IMMUTABLE`. Defaults to `MUTABLE`.
func (o RepositoryCreationTemplateOutput) ImageTagMutability() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryCreationTemplate) pulumi.StringPtrOutput { return v.ImageTagMutability }).(pulumi.StringPtrOutput)
}

// The lifecycle policy document to apply to any created repositories. See more details about [Policy Parameters](http://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html#lifecycle_policy_parameters) in the official AWS docs. Consider using the `ecr.getLifecyclePolicyDocument` dataSource to generate/manage the JSON document used for the `lifecyclePolicy` argument.
func (o RepositoryCreationTemplateOutput) LifecyclePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryCreationTemplate) pulumi.StringPtrOutput { return v.LifecyclePolicy }).(pulumi.StringPtrOutput)
}

// The repository name prefix to match against.
func (o RepositoryCreationTemplateOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryCreationTemplate) pulumi.StringOutput { return v.Prefix }).(pulumi.StringOutput)
}

// The registry ID the repository creation template applies to.
func (o RepositoryCreationTemplateOutput) RegistryId() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryCreationTemplate) pulumi.StringOutput { return v.RegistryId }).(pulumi.StringOutput)
}

func (o RepositoryCreationTemplateOutput) RepositoryPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryCreationTemplate) pulumi.StringPtrOutput { return v.RepositoryPolicy }).(pulumi.StringPtrOutput)
}

// A map of tags to assign to any created repositories.
func (o RepositoryCreationTemplateOutput) ResourceTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RepositoryCreationTemplate) pulumi.StringMapOutput { return v.ResourceTags }).(pulumi.StringMapOutput)
}

type RepositoryCreationTemplateArrayOutput struct{ *pulumi.OutputState }

func (RepositoryCreationTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryCreationTemplate)(nil)).Elem()
}

func (o RepositoryCreationTemplateArrayOutput) ToRepositoryCreationTemplateArrayOutput() RepositoryCreationTemplateArrayOutput {
	return o
}

func (o RepositoryCreationTemplateArrayOutput) ToRepositoryCreationTemplateArrayOutputWithContext(ctx context.Context) RepositoryCreationTemplateArrayOutput {
	return o
}

func (o RepositoryCreationTemplateArrayOutput) Index(i pulumi.IntInput) RepositoryCreationTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RepositoryCreationTemplate {
		return vs[0].([]*RepositoryCreationTemplate)[vs[1].(int)]
	}).(RepositoryCreationTemplateOutput)
}

type RepositoryCreationTemplateMapOutput struct{ *pulumi.OutputState }

func (RepositoryCreationTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryCreationTemplate)(nil)).Elem()
}

func (o RepositoryCreationTemplateMapOutput) ToRepositoryCreationTemplateMapOutput() RepositoryCreationTemplateMapOutput {
	return o
}

func (o RepositoryCreationTemplateMapOutput) ToRepositoryCreationTemplateMapOutputWithContext(ctx context.Context) RepositoryCreationTemplateMapOutput {
	return o
}

func (o RepositoryCreationTemplateMapOutput) MapIndex(k pulumi.StringInput) RepositoryCreationTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RepositoryCreationTemplate {
		return vs[0].(map[string]*RepositoryCreationTemplate)[vs[1].(string)]
	}).(RepositoryCreationTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryCreationTemplateInput)(nil)).Elem(), &RepositoryCreationTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryCreationTemplateArrayInput)(nil)).Elem(), RepositoryCreationTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryCreationTemplateMapInput)(nil)).Elem(), RepositoryCreationTemplateMap{})
	pulumi.RegisterOutputType(RepositoryCreationTemplateOutput{})
	pulumi.RegisterOutputType(RepositoryCreationTemplateArrayOutput{})
	pulumi.RegisterOutputType(RepositoryCreationTemplateMapOutput{})
}
