// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ecr

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an ECR repository policy.
// 
// Note that currently only one policy may be applied to a repository.
// 
// ~> **NOTE on ECR Availability**: The EC2 Container Registry is not yet rolled out
// in all regions - available regions are listed
// [the AWS Docs](https://docs.aws.amazon.com/general/latest/gr/rande.html#ecr_region).
type RepositoryPolicy struct {
	s *pulumi.ResourceState
}

// NewRepositoryPolicy registers a new resource with the given unique name, arguments, and options.
func NewRepositoryPolicy(ctx *pulumi.Context,
	name string, args *RepositoryPolicyArgs, opts ...pulumi.ResourceOpt) (*RepositoryPolicy, error) {
	if args == nil || args.Policy == nil {
		return nil, errors.New("missing required argument 'Policy'")
	}
	if args == nil || args.Repository == nil {
		return nil, errors.New("missing required argument 'Repository'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["policy"] = nil
		inputs["repository"] = nil
	} else {
		inputs["policy"] = args.Policy
		inputs["repository"] = args.Repository
	}
	inputs["registryId"] = nil
	s, err := ctx.RegisterResource("aws:ecr/repositoryPolicy:RepositoryPolicy", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RepositoryPolicy{s: s}, nil
}

// GetRepositoryPolicy gets an existing RepositoryPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepositoryPolicy(ctx *pulumi.Context,
	name string, id pulumi.ID, state *RepositoryPolicyState, opts ...pulumi.ResourceOpt) (*RepositoryPolicy, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["policy"] = state.Policy
		inputs["registryId"] = state.RegistryId
		inputs["repository"] = state.Repository
	}
	s, err := ctx.ReadResource("aws:ecr/repositoryPolicy:RepositoryPolicy", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RepositoryPolicy{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *RepositoryPolicy) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *RepositoryPolicy) ID() *pulumi.IDOutput {
	return r.s.ID
}

// The policy document. This is a JSON formatted string. For more information about building IAM policy documents with Terraform, see the [AWS IAM Policy Document Guide](https://www.terraform.io/docs/providers/aws/guides/iam-policy-documents.html)
func (r *RepositoryPolicy) Policy() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["policy"])
}

// The registry ID where the repository was created.
func (r *RepositoryPolicy) RegistryId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["registryId"])
}

// Name of the repository to apply the policy.
func (r *RepositoryPolicy) Repository() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["repository"])
}

// Input properties used for looking up and filtering RepositoryPolicy resources.
type RepositoryPolicyState struct {
	// The policy document. This is a JSON formatted string. For more information about building IAM policy documents with Terraform, see the [AWS IAM Policy Document Guide](https://www.terraform.io/docs/providers/aws/guides/iam-policy-documents.html)
	Policy interface{}
	// The registry ID where the repository was created.
	RegistryId interface{}
	// Name of the repository to apply the policy.
	Repository interface{}
}

// The set of arguments for constructing a RepositoryPolicy resource.
type RepositoryPolicyArgs struct {
	// The policy document. This is a JSON formatted string. For more information about building IAM policy documents with Terraform, see the [AWS IAM Policy Document Guide](https://www.terraform.io/docs/providers/aws/guides/iam-policy-documents.html)
	Policy interface{}
	// Name of the repository to apply the policy.
	Repository interface{}
}
