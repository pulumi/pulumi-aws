// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ecr

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an EC2 Container Registry Repository.
// 
// ~> **NOTE on ECR Availability**: The EC2 Container Registry is not yet rolled out
// in all regions - available regions are listed
// [the AWS Docs](https://docs.aws.amazon.com/general/latest/gr/rande.html#ecr_region).
type Repository struct {
	s *pulumi.ResourceState
}

// NewRepository registers a new resource with the given unique name, arguments, and options.
func NewRepository(ctx *pulumi.Context,
	name string, args *RepositoryArgs, opts ...pulumi.ResourceOpt) (*Repository, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["name"] = nil
	} else {
		inputs["name"] = args.Name
	}
	inputs["arn"] = nil
	inputs["registryId"] = nil
	inputs["repositoryUrl"] = nil
	s, err := ctx.RegisterResource("aws:ecr/repository:Repository", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Repository{s: s}, nil
}

// GetRepository gets an existing Repository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepository(ctx *pulumi.Context,
	name string, id pulumi.ID, state *RepositoryState, opts ...pulumi.ResourceOpt) (*Repository, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["name"] = state.Name
		inputs["registryId"] = state.RegistryId
		inputs["repositoryUrl"] = state.RepositoryUrl
	}
	s, err := ctx.ReadResource("aws:ecr/repository:Repository", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Repository{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Repository) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Repository) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Full ARN of the repository.
func (r *Repository) Arn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["arn"])
}

// Name of the repository.
func (r *Repository) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The registry ID where the repository was created.
func (r *Repository) RegistryId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["registryId"])
}

// The URL of the repository (in the form `aws_account_id.dkr.ecr.region.amazonaws.com/repositoryName`
func (r *Repository) RepositoryUrl() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["repositoryUrl"])
}

// Input properties used for looking up and filtering Repository resources.
type RepositoryState struct {
	// Full ARN of the repository.
	Arn interface{}
	// Name of the repository.
	Name interface{}
	// The registry ID where the repository was created.
	RegistryId interface{}
	// The URL of the repository (in the form `aws_account_id.dkr.ecr.region.amazonaws.com/repositoryName`
	RepositoryUrl interface{}
}

// The set of arguments for constructing a Repository resource.
type RepositoryArgs struct {
	// Name of the repository.
	Name interface{}
}
