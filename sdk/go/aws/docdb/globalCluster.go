// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package docdb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an DocumentDB Global Cluster. A global cluster consists of one primary region and up to five read-only secondary regions. You issue write operations directly to the primary cluster in the primary region and Amazon DocumentDB automatically replicates the data to the secondary regions using dedicated infrastructure.
//
// More information about DocumentDB Global Clusters can be found in the [DocumentDB Developer Guide](https://docs.aws.amazon.com/documentdb/latest/developerguide/global-clusters.html).
//
// ## Example Usage
// ### New DocumentDB Global Cluster
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/docdb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aws.NewProvider(ctx, "primary", &aws.ProviderArgs{
//				Region: pulumi.String("us-east-2"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = aws.NewProvider(ctx, "secondary", &aws.ProviderArgs{
//				Region: pulumi.String("us-east-1"),
//			})
//			if err != nil {
//				return err
//			}
//			example, err := docdb.NewGlobalCluster(ctx, "example", &docdb.GlobalClusterArgs{
//				GlobalClusterIdentifier: pulumi.String("global-test"),
//				Engine:                  pulumi.String("docdb"),
//				EngineVersion:           pulumi.String("4.0.0"),
//			})
//			if err != nil {
//				return err
//			}
//			primaryCluster, err := docdb.NewCluster(ctx, "primaryCluster", &docdb.ClusterArgs{
//				Engine:                  example.Engine,
//				EngineVersion:           example.EngineVersion,
//				ClusterIdentifier:       pulumi.String("test-primary-cluster"),
//				MasterUsername:          pulumi.String("username"),
//				MasterPassword:          pulumi.String("somepass123"),
//				GlobalClusterIdentifier: example.ID(),
//				DbSubnetGroupName:       pulumi.String("default"),
//			}, pulumi.Provider(aws.Primary))
//			if err != nil {
//				return err
//			}
//			primaryClusterInstance, err := docdb.NewClusterInstance(ctx, "primaryClusterInstance", &docdb.ClusterInstanceArgs{
//				Engine:            example.Engine,
//				Identifier:        pulumi.String("test-primary-cluster-instance"),
//				ClusterIdentifier: primaryCluster.ID(),
//				InstanceClass:     pulumi.String("db.r5.large"),
//			}, pulumi.Provider(aws.Primary))
//			if err != nil {
//				return err
//			}
//			secondaryCluster, err := docdb.NewCluster(ctx, "secondaryCluster", &docdb.ClusterArgs{
//				Engine:                  example.Engine,
//				EngineVersion:           example.EngineVersion,
//				ClusterIdentifier:       pulumi.String("test-secondary-cluster"),
//				GlobalClusterIdentifier: example.ID(),
//				DbSubnetGroupName:       pulumi.String("default"),
//			}, pulumi.Provider(aws.Secondary), pulumi.DependsOn([]pulumi.Resource{
//				primaryCluster,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = docdb.NewClusterInstance(ctx, "secondaryClusterInstance", &docdb.ClusterInstanceArgs{
//				Engine:            example.Engine,
//				Identifier:        pulumi.String("test-secondary-cluster-instance"),
//				ClusterIdentifier: secondaryCluster.ID(),
//				InstanceClass:     pulumi.String("db.r5.large"),
//			}, pulumi.Provider(aws.Secondary), pulumi.DependsOn([]pulumi.Resource{
//				primaryClusterInstance,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### New Global Cluster From Existing DB Cluster
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/docdb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleCluster, err := docdb.NewCluster(ctx, "exampleCluster", nil)
//			if err != nil {
//				return err
//			}
//			_, err = docdb.NewGlobalCluster(ctx, "exampleGlobalCluster", &docdb.GlobalClusterArgs{
//				GlobalClusterIdentifier:   pulumi.String("example"),
//				SourceDbClusterIdentifier: exampleCluster.Arn,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import `aws_docdb_global_cluster` using the Global Cluster identifier. For example:
//
// ```sh
//
//	$ pulumi import aws:docdb/globalCluster:GlobalCluster example example
//
// ```
//
//	Certain resource arguments, like `source_db_cluster_identifier`, do not have an API method for reading the information after creation. If the argument is set in the Pulumi program on an imported resource, Pulumi will always show a difference. To workaround this behavior, either omit the argument from the Pulumi program or use `ignore_changes` to hide the difference. For example:
type GlobalCluster struct {
	pulumi.CustomResourceState

	// Global Cluster Amazon Resource Name (ARN)
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Name for an automatically created database on cluster creation.
	DatabaseName pulumi.StringPtrOutput `pulumi:"databaseName"`
	// If the Global Cluster should have deletion protection enabled. The database can't be deleted when this value is set to `true`. The default is `false`.
	DeletionProtection pulumi.BoolPtrOutput `pulumi:"deletionProtection"`
	// Name of the database engine to be used for this DB cluster. The provider will only perform drift detection if a configuration value is provided. Current Valid values: `docdb`. Defaults to `docdb`. Conflicts with `sourceDbClusterIdentifier`.
	Engine pulumi.StringOutput `pulumi:"engine"`
	// Engine version of the global database. Upgrading the engine version will result in all cluster members being immediately updated and will.
	// * **NOTE:** Upgrading major versions is not supported.
	EngineVersion pulumi.StringOutput `pulumi:"engineVersion"`
	// The global cluster identifier.
	GlobalClusterIdentifier pulumi.StringOutput `pulumi:"globalClusterIdentifier"`
	// Set of objects containing Global Cluster members.
	GlobalClusterMembers GlobalClusterGlobalClusterMemberArrayOutput `pulumi:"globalClusterMembers"`
	// AWS Region-unique, immutable identifier for the global database cluster. This identifier is found in AWS CloudTrail log entries whenever the AWS KMS key for the DB cluster is accessed.
	GlobalClusterResourceId pulumi.StringOutput `pulumi:"globalClusterResourceId"`
	// Amazon Resource Name (ARN) to use as the primary DB Cluster of the Global Cluster on creation. The provider cannot perform drift detection of this value.
	SourceDbClusterIdentifier pulumi.StringOutput `pulumi:"sourceDbClusterIdentifier"`
	Status                    pulumi.StringOutput `pulumi:"status"`
	// Specifies whether the DB cluster is encrypted. The default is `false` unless `sourceDbClusterIdentifier` is specified and encrypted. The provider will only perform drift detection if a configuration value is provided.
	StorageEncrypted pulumi.BoolOutput `pulumi:"storageEncrypted"`
}

// NewGlobalCluster registers a new resource with the given unique name, arguments, and options.
func NewGlobalCluster(ctx *pulumi.Context,
	name string, args *GlobalClusterArgs, opts ...pulumi.ResourceOption) (*GlobalCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GlobalClusterIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'GlobalClusterIdentifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GlobalCluster
	err := ctx.RegisterResource("aws:docdb/globalCluster:GlobalCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGlobalCluster gets an existing GlobalCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGlobalCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GlobalClusterState, opts ...pulumi.ResourceOption) (*GlobalCluster, error) {
	var resource GlobalCluster
	err := ctx.ReadResource("aws:docdb/globalCluster:GlobalCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GlobalCluster resources.
type globalClusterState struct {
	// Global Cluster Amazon Resource Name (ARN)
	Arn *string `pulumi:"arn"`
	// Name for an automatically created database on cluster creation.
	DatabaseName *string `pulumi:"databaseName"`
	// If the Global Cluster should have deletion protection enabled. The database can't be deleted when this value is set to `true`. The default is `false`.
	DeletionProtection *bool `pulumi:"deletionProtection"`
	// Name of the database engine to be used for this DB cluster. The provider will only perform drift detection if a configuration value is provided. Current Valid values: `docdb`. Defaults to `docdb`. Conflicts with `sourceDbClusterIdentifier`.
	Engine *string `pulumi:"engine"`
	// Engine version of the global database. Upgrading the engine version will result in all cluster members being immediately updated and will.
	// * **NOTE:** Upgrading major versions is not supported.
	EngineVersion *string `pulumi:"engineVersion"`
	// The global cluster identifier.
	GlobalClusterIdentifier *string `pulumi:"globalClusterIdentifier"`
	// Set of objects containing Global Cluster members.
	GlobalClusterMembers []GlobalClusterGlobalClusterMember `pulumi:"globalClusterMembers"`
	// AWS Region-unique, immutable identifier for the global database cluster. This identifier is found in AWS CloudTrail log entries whenever the AWS KMS key for the DB cluster is accessed.
	GlobalClusterResourceId *string `pulumi:"globalClusterResourceId"`
	// Amazon Resource Name (ARN) to use as the primary DB Cluster of the Global Cluster on creation. The provider cannot perform drift detection of this value.
	SourceDbClusterIdentifier *string `pulumi:"sourceDbClusterIdentifier"`
	Status                    *string `pulumi:"status"`
	// Specifies whether the DB cluster is encrypted. The default is `false` unless `sourceDbClusterIdentifier` is specified and encrypted. The provider will only perform drift detection if a configuration value is provided.
	StorageEncrypted *bool `pulumi:"storageEncrypted"`
}

type GlobalClusterState struct {
	// Global Cluster Amazon Resource Name (ARN)
	Arn pulumi.StringPtrInput
	// Name for an automatically created database on cluster creation.
	DatabaseName pulumi.StringPtrInput
	// If the Global Cluster should have deletion protection enabled. The database can't be deleted when this value is set to `true`. The default is `false`.
	DeletionProtection pulumi.BoolPtrInput
	// Name of the database engine to be used for this DB cluster. The provider will only perform drift detection if a configuration value is provided. Current Valid values: `docdb`. Defaults to `docdb`. Conflicts with `sourceDbClusterIdentifier`.
	Engine pulumi.StringPtrInput
	// Engine version of the global database. Upgrading the engine version will result in all cluster members being immediately updated and will.
	// * **NOTE:** Upgrading major versions is not supported.
	EngineVersion pulumi.StringPtrInput
	// The global cluster identifier.
	GlobalClusterIdentifier pulumi.StringPtrInput
	// Set of objects containing Global Cluster members.
	GlobalClusterMembers GlobalClusterGlobalClusterMemberArrayInput
	// AWS Region-unique, immutable identifier for the global database cluster. This identifier is found in AWS CloudTrail log entries whenever the AWS KMS key for the DB cluster is accessed.
	GlobalClusterResourceId pulumi.StringPtrInput
	// Amazon Resource Name (ARN) to use as the primary DB Cluster of the Global Cluster on creation. The provider cannot perform drift detection of this value.
	SourceDbClusterIdentifier pulumi.StringPtrInput
	Status                    pulumi.StringPtrInput
	// Specifies whether the DB cluster is encrypted. The default is `false` unless `sourceDbClusterIdentifier` is specified and encrypted. The provider will only perform drift detection if a configuration value is provided.
	StorageEncrypted pulumi.BoolPtrInput
}

func (GlobalClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*globalClusterState)(nil)).Elem()
}

type globalClusterArgs struct {
	// Name for an automatically created database on cluster creation.
	DatabaseName *string `pulumi:"databaseName"`
	// If the Global Cluster should have deletion protection enabled. The database can't be deleted when this value is set to `true`. The default is `false`.
	DeletionProtection *bool `pulumi:"deletionProtection"`
	// Name of the database engine to be used for this DB cluster. The provider will only perform drift detection if a configuration value is provided. Current Valid values: `docdb`. Defaults to `docdb`. Conflicts with `sourceDbClusterIdentifier`.
	Engine *string `pulumi:"engine"`
	// Engine version of the global database. Upgrading the engine version will result in all cluster members being immediately updated and will.
	// * **NOTE:** Upgrading major versions is not supported.
	EngineVersion *string `pulumi:"engineVersion"`
	// The global cluster identifier.
	GlobalClusterIdentifier string `pulumi:"globalClusterIdentifier"`
	// Amazon Resource Name (ARN) to use as the primary DB Cluster of the Global Cluster on creation. The provider cannot perform drift detection of this value.
	SourceDbClusterIdentifier *string `pulumi:"sourceDbClusterIdentifier"`
	// Specifies whether the DB cluster is encrypted. The default is `false` unless `sourceDbClusterIdentifier` is specified and encrypted. The provider will only perform drift detection if a configuration value is provided.
	StorageEncrypted *bool `pulumi:"storageEncrypted"`
}

// The set of arguments for constructing a GlobalCluster resource.
type GlobalClusterArgs struct {
	// Name for an automatically created database on cluster creation.
	DatabaseName pulumi.StringPtrInput
	// If the Global Cluster should have deletion protection enabled. The database can't be deleted when this value is set to `true`. The default is `false`.
	DeletionProtection pulumi.BoolPtrInput
	// Name of the database engine to be used for this DB cluster. The provider will only perform drift detection if a configuration value is provided. Current Valid values: `docdb`. Defaults to `docdb`. Conflicts with `sourceDbClusterIdentifier`.
	Engine pulumi.StringPtrInput
	// Engine version of the global database. Upgrading the engine version will result in all cluster members being immediately updated and will.
	// * **NOTE:** Upgrading major versions is not supported.
	EngineVersion pulumi.StringPtrInput
	// The global cluster identifier.
	GlobalClusterIdentifier pulumi.StringInput
	// Amazon Resource Name (ARN) to use as the primary DB Cluster of the Global Cluster on creation. The provider cannot perform drift detection of this value.
	SourceDbClusterIdentifier pulumi.StringPtrInput
	// Specifies whether the DB cluster is encrypted. The default is `false` unless `sourceDbClusterIdentifier` is specified and encrypted. The provider will only perform drift detection if a configuration value is provided.
	StorageEncrypted pulumi.BoolPtrInput
}

func (GlobalClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*globalClusterArgs)(nil)).Elem()
}

type GlobalClusterInput interface {
	pulumi.Input

	ToGlobalClusterOutput() GlobalClusterOutput
	ToGlobalClusterOutputWithContext(ctx context.Context) GlobalClusterOutput
}

func (*GlobalCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalCluster)(nil)).Elem()
}

func (i *GlobalCluster) ToGlobalClusterOutput() GlobalClusterOutput {
	return i.ToGlobalClusterOutputWithContext(context.Background())
}

func (i *GlobalCluster) ToGlobalClusterOutputWithContext(ctx context.Context) GlobalClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalClusterOutput)
}

// GlobalClusterArrayInput is an input type that accepts GlobalClusterArray and GlobalClusterArrayOutput values.
// You can construct a concrete instance of `GlobalClusterArrayInput` via:
//
//	GlobalClusterArray{ GlobalClusterArgs{...} }
type GlobalClusterArrayInput interface {
	pulumi.Input

	ToGlobalClusterArrayOutput() GlobalClusterArrayOutput
	ToGlobalClusterArrayOutputWithContext(context.Context) GlobalClusterArrayOutput
}

type GlobalClusterArray []GlobalClusterInput

func (GlobalClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GlobalCluster)(nil)).Elem()
}

func (i GlobalClusterArray) ToGlobalClusterArrayOutput() GlobalClusterArrayOutput {
	return i.ToGlobalClusterArrayOutputWithContext(context.Background())
}

func (i GlobalClusterArray) ToGlobalClusterArrayOutputWithContext(ctx context.Context) GlobalClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalClusterArrayOutput)
}

// GlobalClusterMapInput is an input type that accepts GlobalClusterMap and GlobalClusterMapOutput values.
// You can construct a concrete instance of `GlobalClusterMapInput` via:
//
//	GlobalClusterMap{ "key": GlobalClusterArgs{...} }
type GlobalClusterMapInput interface {
	pulumi.Input

	ToGlobalClusterMapOutput() GlobalClusterMapOutput
	ToGlobalClusterMapOutputWithContext(context.Context) GlobalClusterMapOutput
}

type GlobalClusterMap map[string]GlobalClusterInput

func (GlobalClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GlobalCluster)(nil)).Elem()
}

func (i GlobalClusterMap) ToGlobalClusterMapOutput() GlobalClusterMapOutput {
	return i.ToGlobalClusterMapOutputWithContext(context.Background())
}

func (i GlobalClusterMap) ToGlobalClusterMapOutputWithContext(ctx context.Context) GlobalClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalClusterMapOutput)
}

type GlobalClusterOutput struct{ *pulumi.OutputState }

func (GlobalClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalCluster)(nil)).Elem()
}

func (o GlobalClusterOutput) ToGlobalClusterOutput() GlobalClusterOutput {
	return o
}

func (o GlobalClusterOutput) ToGlobalClusterOutputWithContext(ctx context.Context) GlobalClusterOutput {
	return o
}

// Global Cluster Amazon Resource Name (ARN)
func (o GlobalClusterOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *GlobalCluster) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Name for an automatically created database on cluster creation.
func (o GlobalClusterOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalCluster) pulumi.StringPtrOutput { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// If the Global Cluster should have deletion protection enabled. The database can't be deleted when this value is set to `true`. The default is `false`.
func (o GlobalClusterOutput) DeletionProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GlobalCluster) pulumi.BoolPtrOutput { return v.DeletionProtection }).(pulumi.BoolPtrOutput)
}

// Name of the database engine to be used for this DB cluster. The provider will only perform drift detection if a configuration value is provided. Current Valid values: `docdb`. Defaults to `docdb`. Conflicts with `sourceDbClusterIdentifier`.
func (o GlobalClusterOutput) Engine() pulumi.StringOutput {
	return o.ApplyT(func(v *GlobalCluster) pulumi.StringOutput { return v.Engine }).(pulumi.StringOutput)
}

// Engine version of the global database. Upgrading the engine version will result in all cluster members being immediately updated and will.
// * **NOTE:** Upgrading major versions is not supported.
func (o GlobalClusterOutput) EngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *GlobalCluster) pulumi.StringOutput { return v.EngineVersion }).(pulumi.StringOutput)
}

// The global cluster identifier.
func (o GlobalClusterOutput) GlobalClusterIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *GlobalCluster) pulumi.StringOutput { return v.GlobalClusterIdentifier }).(pulumi.StringOutput)
}

// Set of objects containing Global Cluster members.
func (o GlobalClusterOutput) GlobalClusterMembers() GlobalClusterGlobalClusterMemberArrayOutput {
	return o.ApplyT(func(v *GlobalCluster) GlobalClusterGlobalClusterMemberArrayOutput { return v.GlobalClusterMembers }).(GlobalClusterGlobalClusterMemberArrayOutput)
}

// AWS Region-unique, immutable identifier for the global database cluster. This identifier is found in AWS CloudTrail log entries whenever the AWS KMS key for the DB cluster is accessed.
func (o GlobalClusterOutput) GlobalClusterResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *GlobalCluster) pulumi.StringOutput { return v.GlobalClusterResourceId }).(pulumi.StringOutput)
}

// Amazon Resource Name (ARN) to use as the primary DB Cluster of the Global Cluster on creation. The provider cannot perform drift detection of this value.
func (o GlobalClusterOutput) SourceDbClusterIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *GlobalCluster) pulumi.StringOutput { return v.SourceDbClusterIdentifier }).(pulumi.StringOutput)
}

func (o GlobalClusterOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *GlobalCluster) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies whether the DB cluster is encrypted. The default is `false` unless `sourceDbClusterIdentifier` is specified and encrypted. The provider will only perform drift detection if a configuration value is provided.
func (o GlobalClusterOutput) StorageEncrypted() pulumi.BoolOutput {
	return o.ApplyT(func(v *GlobalCluster) pulumi.BoolOutput { return v.StorageEncrypted }).(pulumi.BoolOutput)
}

type GlobalClusterArrayOutput struct{ *pulumi.OutputState }

func (GlobalClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GlobalCluster)(nil)).Elem()
}

func (o GlobalClusterArrayOutput) ToGlobalClusterArrayOutput() GlobalClusterArrayOutput {
	return o
}

func (o GlobalClusterArrayOutput) ToGlobalClusterArrayOutputWithContext(ctx context.Context) GlobalClusterArrayOutput {
	return o
}

func (o GlobalClusterArrayOutput) Index(i pulumi.IntInput) GlobalClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GlobalCluster {
		return vs[0].([]*GlobalCluster)[vs[1].(int)]
	}).(GlobalClusterOutput)
}

type GlobalClusterMapOutput struct{ *pulumi.OutputState }

func (GlobalClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GlobalCluster)(nil)).Elem()
}

func (o GlobalClusterMapOutput) ToGlobalClusterMapOutput() GlobalClusterMapOutput {
	return o
}

func (o GlobalClusterMapOutput) ToGlobalClusterMapOutputWithContext(ctx context.Context) GlobalClusterMapOutput {
	return o
}

func (o GlobalClusterMapOutput) MapIndex(k pulumi.StringInput) GlobalClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GlobalCluster {
		return vs[0].(map[string]*GlobalCluster)[vs[1].(string)]
	}).(GlobalClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalClusterInput)(nil)).Elem(), &GlobalCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalClusterArrayInput)(nil)).Elem(), GlobalClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalClusterMapInput)(nil)).Elem(), GlobalClusterMap{})
	pulumi.RegisterOutputType(GlobalClusterOutput{})
	pulumi.RegisterOutputType(GlobalClusterArrayOutput{})
	pulumi.RegisterOutputType(GlobalClusterMapOutput{})
}
