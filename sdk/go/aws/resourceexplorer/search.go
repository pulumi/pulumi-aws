// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package resourceexplorer

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for managing an AWS Resource Explorer Search.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/resourceexplorer"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := resourceexplorer.Search(ctx, &resourceexplorer.SearchArgs{
//				QueryString: "region:us-west-2",
//				ViewArn:     pulumi.StringRef(test.Arn),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func Search(ctx *pulumi.Context, args *SearchArgs, opts ...pulumi.InvokeOption) (*SearchResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv SearchResult
	err := ctx.Invoke("aws:resourceexplorer/search:Search", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking Search.
type SearchArgs struct {
	// String that includes keywords and filters that specify the resources that you want to include in the results. For the complete syntax supported by the QueryString parameter, see Search query syntax reference for [Resource Explorer](https://docs.aws.amazon.com/resource-explorer/latest/userguide/using-search-query-syntax.html). The search is completely case insensitive. You can specify an empty string to return all results up to the limit of 1,000 total results. The operation can return only the first 1,000 results. If the resource you want is not included, then use a different value for QueryString to refine the results.
	//
	// The following arguments are optional:
	QueryString string `pulumi:"queryString"`
	// Specifies the Amazon resource name (ARN) of the view to use for the query. If you don't specify a value for this parameter, then the operation automatically uses the default view for the AWS Region in which you called this operation. If the Region either doesn't have a default view or if you don't have permission to use the default view, then the operation fails with a `401 Unauthorized` exception.
	ViewArn *string `pulumi:"viewArn"`
}

// A collection of values returned by Search.
type SearchResult struct {
	// Query String.
	Id          string `pulumi:"id"`
	QueryString string `pulumi:"queryString"`
	// Number of resources that match the query. See `resourceCount` below.
	ResourceCounts []SearchResourceCount `pulumi:"resourceCounts"`
	// List of structures that describe the resources that match the query. See `resources` below.
	Resources []SearchResource `pulumi:"resources"`
	ViewArn   string           `pulumi:"viewArn"`
}

func SearchOutput(ctx *pulumi.Context, args SearchOutputArgs, opts ...pulumi.InvokeOption) SearchResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (SearchResultOutput, error) {
			args := v.(SearchArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws:resourceexplorer/search:Search", args, SearchResultOutput{}, options).(SearchResultOutput), nil
		}).(SearchResultOutput)
}

// A collection of arguments for invoking Search.
type SearchOutputArgs struct {
	// String that includes keywords and filters that specify the resources that you want to include in the results. For the complete syntax supported by the QueryString parameter, see Search query syntax reference for [Resource Explorer](https://docs.aws.amazon.com/resource-explorer/latest/userguide/using-search-query-syntax.html). The search is completely case insensitive. You can specify an empty string to return all results up to the limit of 1,000 total results. The operation can return only the first 1,000 results. If the resource you want is not included, then use a different value for QueryString to refine the results.
	//
	// The following arguments are optional:
	QueryString pulumi.StringInput `pulumi:"queryString"`
	// Specifies the Amazon resource name (ARN) of the view to use for the query. If you don't specify a value for this parameter, then the operation automatically uses the default view for the AWS Region in which you called this operation. If the Region either doesn't have a default view or if you don't have permission to use the default view, then the operation fails with a `401 Unauthorized` exception.
	ViewArn pulumi.StringPtrInput `pulumi:"viewArn"`
}

func (SearchOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SearchArgs)(nil)).Elem()
}

// A collection of values returned by Search.
type SearchResultOutput struct{ *pulumi.OutputState }

func (SearchResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SearchResult)(nil)).Elem()
}

func (o SearchResultOutput) ToSearchResultOutput() SearchResultOutput {
	return o
}

func (o SearchResultOutput) ToSearchResultOutputWithContext(ctx context.Context) SearchResultOutput {
	return o
}

// Query String.
func (o SearchResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SearchResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o SearchResultOutput) QueryString() pulumi.StringOutput {
	return o.ApplyT(func(v SearchResult) string { return v.QueryString }).(pulumi.StringOutput)
}

// Number of resources that match the query. See `resourceCount` below.
func (o SearchResultOutput) ResourceCounts() SearchResourceCountArrayOutput {
	return o.ApplyT(func(v SearchResult) []SearchResourceCount { return v.ResourceCounts }).(SearchResourceCountArrayOutput)
}

// List of structures that describe the resources that match the query. See `resources` below.
func (o SearchResultOutput) Resources() SearchResourceArrayOutput {
	return o.ApplyT(func(v SearchResult) []SearchResource { return v.Resources }).(SearchResourceArrayOutput)
}

func (o SearchResultOutput) ViewArn() pulumi.StringOutput {
	return o.ApplyT(func(v SearchResult) string { return v.ViewArn }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(SearchResultOutput{})
}
