// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package verifiedaccess

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing a Verified Access Group.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/verifiedaccess"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := verifiedaccess.NewGroup(ctx, "example", &verifiedaccess.GroupArgs{
//				VerifiedaccessInstanceId: pulumi.Any(aws_verifiedaccess_instance.Example.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Group struct {
	pulumi.CustomResourceState

	// Timestamp when the access group was created.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// Timestamp when the access group was deleted.
	DeletionTime pulumi.StringOutput `pulumi:"deletionTime"`
	// Description of the verified access group.
	Description pulumi.StringOutput `pulumi:"description"`
	// Timestamp when the access group was last updated.
	LastUpdatedTime pulumi.StringOutput `pulumi:"lastUpdatedTime"`
	// AWS account number owning this resource.
	Owner          pulumi.StringOutput    `pulumi:"owner"`
	PolicyDocument pulumi.StringPtrOutput `pulumi:"policyDocument"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// ARN of this verified acess group.
	VerifiedaccessGroupArn pulumi.StringOutput `pulumi:"verifiedaccessGroupArn"`
	// ID of this verified access group.
	VerifiedaccessGroupId pulumi.StringOutput `pulumi:"verifiedaccessGroupId"`
	// The id of the verified access instance this group is associated with.
	//
	// The following arguments are optional:
	VerifiedaccessInstanceId pulumi.StringOutput `pulumi:"verifiedaccessInstanceId"`
}

// NewGroup registers a new resource with the given unique name, arguments, and options.
func NewGroup(ctx *pulumi.Context,
	name string, args *GroupArgs, opts ...pulumi.ResourceOption) (*Group, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VerifiedaccessInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'VerifiedaccessInstanceId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"tagsAll",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Group
	err := ctx.RegisterResource("aws:verifiedaccess/group:Group", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroup gets an existing Group resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupState, opts ...pulumi.ResourceOption) (*Group, error) {
	var resource Group
	err := ctx.ReadResource("aws:verifiedaccess/group:Group", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Group resources.
type groupState struct {
	// Timestamp when the access group was created.
	CreationTime *string `pulumi:"creationTime"`
	// Timestamp when the access group was deleted.
	DeletionTime *string `pulumi:"deletionTime"`
	// Description of the verified access group.
	Description *string `pulumi:"description"`
	// Timestamp when the access group was last updated.
	LastUpdatedTime *string `pulumi:"lastUpdatedTime"`
	// AWS account number owning this resource.
	Owner          *string `pulumi:"owner"`
	PolicyDocument *string `pulumi:"policyDocument"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// ARN of this verified acess group.
	VerifiedaccessGroupArn *string `pulumi:"verifiedaccessGroupArn"`
	// ID of this verified access group.
	VerifiedaccessGroupId *string `pulumi:"verifiedaccessGroupId"`
	// The id of the verified access instance this group is associated with.
	//
	// The following arguments are optional:
	VerifiedaccessInstanceId *string `pulumi:"verifiedaccessInstanceId"`
}

type GroupState struct {
	// Timestamp when the access group was created.
	CreationTime pulumi.StringPtrInput
	// Timestamp when the access group was deleted.
	DeletionTime pulumi.StringPtrInput
	// Description of the verified access group.
	Description pulumi.StringPtrInput
	// Timestamp when the access group was last updated.
	LastUpdatedTime pulumi.StringPtrInput
	// AWS account number owning this resource.
	Owner          pulumi.StringPtrInput
	PolicyDocument pulumi.StringPtrInput
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
	// ARN of this verified acess group.
	VerifiedaccessGroupArn pulumi.StringPtrInput
	// ID of this verified access group.
	VerifiedaccessGroupId pulumi.StringPtrInput
	// The id of the verified access instance this group is associated with.
	//
	// The following arguments are optional:
	VerifiedaccessInstanceId pulumi.StringPtrInput
}

func (GroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupState)(nil)).Elem()
}

type groupArgs struct {
	// Description of the verified access group.
	Description    *string `pulumi:"description"`
	PolicyDocument *string `pulumi:"policyDocument"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The id of the verified access instance this group is associated with.
	//
	// The following arguments are optional:
	VerifiedaccessInstanceId string `pulumi:"verifiedaccessInstanceId"`
}

// The set of arguments for constructing a Group resource.
type GroupArgs struct {
	// Description of the verified access group.
	Description    pulumi.StringPtrInput
	PolicyDocument pulumi.StringPtrInput
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// The id of the verified access instance this group is associated with.
	//
	// The following arguments are optional:
	VerifiedaccessInstanceId pulumi.StringInput
}

func (GroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupArgs)(nil)).Elem()
}

type GroupInput interface {
	pulumi.Input

	ToGroupOutput() GroupOutput
	ToGroupOutputWithContext(ctx context.Context) GroupOutput
}

func (*Group) ElementType() reflect.Type {
	return reflect.TypeOf((**Group)(nil)).Elem()
}

func (i *Group) ToGroupOutput() GroupOutput {
	return i.ToGroupOutputWithContext(context.Background())
}

func (i *Group) ToGroupOutputWithContext(ctx context.Context) GroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupOutput)
}

func (i *Group) ToOutput(ctx context.Context) pulumix.Output[*Group] {
	return pulumix.Output[*Group]{
		OutputState: i.ToGroupOutputWithContext(ctx).OutputState,
	}
}

// GroupArrayInput is an input type that accepts GroupArray and GroupArrayOutput values.
// You can construct a concrete instance of `GroupArrayInput` via:
//
//	GroupArray{ GroupArgs{...} }
type GroupArrayInput interface {
	pulumi.Input

	ToGroupArrayOutput() GroupArrayOutput
	ToGroupArrayOutputWithContext(context.Context) GroupArrayOutput
}

type GroupArray []GroupInput

func (GroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Group)(nil)).Elem()
}

func (i GroupArray) ToGroupArrayOutput() GroupArrayOutput {
	return i.ToGroupArrayOutputWithContext(context.Background())
}

func (i GroupArray) ToGroupArrayOutputWithContext(ctx context.Context) GroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupArrayOutput)
}

func (i GroupArray) ToOutput(ctx context.Context) pulumix.Output[[]*Group] {
	return pulumix.Output[[]*Group]{
		OutputState: i.ToGroupArrayOutputWithContext(ctx).OutputState,
	}
}

// GroupMapInput is an input type that accepts GroupMap and GroupMapOutput values.
// You can construct a concrete instance of `GroupMapInput` via:
//
//	GroupMap{ "key": GroupArgs{...} }
type GroupMapInput interface {
	pulumi.Input

	ToGroupMapOutput() GroupMapOutput
	ToGroupMapOutputWithContext(context.Context) GroupMapOutput
}

type GroupMap map[string]GroupInput

func (GroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Group)(nil)).Elem()
}

func (i GroupMap) ToGroupMapOutput() GroupMapOutput {
	return i.ToGroupMapOutputWithContext(context.Background())
}

func (i GroupMap) ToGroupMapOutputWithContext(ctx context.Context) GroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMapOutput)
}

func (i GroupMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Group] {
	return pulumix.Output[map[string]*Group]{
		OutputState: i.ToGroupMapOutputWithContext(ctx).OutputState,
	}
}

type GroupOutput struct{ *pulumi.OutputState }

func (GroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Group)(nil)).Elem()
}

func (o GroupOutput) ToGroupOutput() GroupOutput {
	return o
}

func (o GroupOutput) ToGroupOutputWithContext(ctx context.Context) GroupOutput {
	return o
}

func (o GroupOutput) ToOutput(ctx context.Context) pulumix.Output[*Group] {
	return pulumix.Output[*Group]{
		OutputState: o.OutputState,
	}
}

// Timestamp when the access group was created.
func (o GroupOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// Timestamp when the access group was deleted.
func (o GroupOutput) DeletionTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.DeletionTime }).(pulumi.StringOutput)
}

// Description of the verified access group.
func (o GroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Timestamp when the access group was last updated.
func (o GroupOutput) LastUpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.LastUpdatedTime }).(pulumi.StringOutput)
}

// AWS account number owning this resource.
func (o GroupOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

func (o GroupOutput) PolicyDocument() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.StringPtrOutput { return v.PolicyDocument }).(pulumi.StringPtrOutput)
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o GroupOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Group) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Deprecated: Please use `tags` instead.
func (o GroupOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Group) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// ARN of this verified acess group.
func (o GroupOutput) VerifiedaccessGroupArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.VerifiedaccessGroupArn }).(pulumi.StringOutput)
}

// ID of this verified access group.
func (o GroupOutput) VerifiedaccessGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.VerifiedaccessGroupId }).(pulumi.StringOutput)
}

// The id of the verified access instance this group is associated with.
//
// The following arguments are optional:
func (o GroupOutput) VerifiedaccessInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.VerifiedaccessInstanceId }).(pulumi.StringOutput)
}

type GroupArrayOutput struct{ *pulumi.OutputState }

func (GroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Group)(nil)).Elem()
}

func (o GroupArrayOutput) ToGroupArrayOutput() GroupArrayOutput {
	return o
}

func (o GroupArrayOutput) ToGroupArrayOutputWithContext(ctx context.Context) GroupArrayOutput {
	return o
}

func (o GroupArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Group] {
	return pulumix.Output[[]*Group]{
		OutputState: o.OutputState,
	}
}

func (o GroupArrayOutput) Index(i pulumi.IntInput) GroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Group {
		return vs[0].([]*Group)[vs[1].(int)]
	}).(GroupOutput)
}

type GroupMapOutput struct{ *pulumi.OutputState }

func (GroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Group)(nil)).Elem()
}

func (o GroupMapOutput) ToGroupMapOutput() GroupMapOutput {
	return o
}

func (o GroupMapOutput) ToGroupMapOutputWithContext(ctx context.Context) GroupMapOutput {
	return o
}

func (o GroupMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Group] {
	return pulumix.Output[map[string]*Group]{
		OutputState: o.OutputState,
	}
}

func (o GroupMapOutput) MapIndex(k pulumi.StringInput) GroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Group {
		return vs[0].(map[string]*Group)[vs[1].(string)]
	}).(GroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupInput)(nil)).Elem(), &Group{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupArrayInput)(nil)).Elem(), GroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMapInput)(nil)).Elem(), GroupMap{})
	pulumi.RegisterOutputType(GroupOutput{})
	pulumi.RegisterOutputType(GroupArrayOutput{})
	pulumi.RegisterOutputType(GroupMapOutput{})
}
