// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package verifiedaccess

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing a Verified Access Trust Provider.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/verifiedaccess"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := verifiedaccess.NewTrustProvider(ctx, "example", &verifiedaccess.TrustProviderArgs{
//				PolicyReferenceName:   pulumi.String("example"),
//				TrustProviderType:     pulumi.String("user"),
//				UserTrustProviderType: pulumi.String("iam-identity-center"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Using `pulumi import`, import Transfer Workflows using the
//
// `id`. For example:
//
// ```sh
//
//	$ pulumi import aws:verifiedaccess/trustProvider:TrustProvider example vatp-8012925589
//
// ```
type TrustProvider struct {
	pulumi.CustomResourceState

	// A description for the AWS Verified Access trust provider.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A block of options for device identity based trust providers.
	DeviceOptions TrustProviderDeviceOptionsPtrOutput `pulumi:"deviceOptions"`
	// The type of device-based trust provider.
	DeviceTrustProviderType pulumi.StringPtrOutput `pulumi:"deviceTrustProviderType"`
	// The OpenID Connect details for an oidc-type, user-identity based trust provider.
	OidcOptions TrustProviderOidcOptionsPtrOutput `pulumi:"oidcOptions"`
	// The identifier to be used when working with policy rules.
	PolicyReferenceName pulumi.StringOutput `pulumi:"policyReferenceName"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// The type of trust provider can be either user or device-based.
	//
	// The following arguments are optional:
	TrustProviderType pulumi.StringOutput `pulumi:"trustProviderType"`
	// The type of user-based trust provider.
	UserTrustProviderType pulumi.StringPtrOutput `pulumi:"userTrustProviderType"`
}

// NewTrustProvider registers a new resource with the given unique name, arguments, and options.
func NewTrustProvider(ctx *pulumi.Context,
	name string, args *TrustProviderArgs, opts ...pulumi.ResourceOption) (*TrustProvider, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyReferenceName == nil {
		return nil, errors.New("invalid value for required argument 'PolicyReferenceName'")
	}
	if args.TrustProviderType == nil {
		return nil, errors.New("invalid value for required argument 'TrustProviderType'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"tagsAll",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TrustProvider
	err := ctx.RegisterResource("aws:verifiedaccess/trustProvider:TrustProvider", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrustProvider gets an existing TrustProvider resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrustProvider(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrustProviderState, opts ...pulumi.ResourceOption) (*TrustProvider, error) {
	var resource TrustProvider
	err := ctx.ReadResource("aws:verifiedaccess/trustProvider:TrustProvider", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TrustProvider resources.
type trustProviderState struct {
	// A description for the AWS Verified Access trust provider.
	Description *string `pulumi:"description"`
	// A block of options for device identity based trust providers.
	DeviceOptions *TrustProviderDeviceOptions `pulumi:"deviceOptions"`
	// The type of device-based trust provider.
	DeviceTrustProviderType *string `pulumi:"deviceTrustProviderType"`
	// The OpenID Connect details for an oidc-type, user-identity based trust provider.
	OidcOptions *TrustProviderOidcOptions `pulumi:"oidcOptions"`
	// The identifier to be used when working with policy rules.
	PolicyReferenceName *string `pulumi:"policyReferenceName"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The type of trust provider can be either user or device-based.
	//
	// The following arguments are optional:
	TrustProviderType *string `pulumi:"trustProviderType"`
	// The type of user-based trust provider.
	UserTrustProviderType *string `pulumi:"userTrustProviderType"`
}

type TrustProviderState struct {
	// A description for the AWS Verified Access trust provider.
	Description pulumi.StringPtrInput
	// A block of options for device identity based trust providers.
	DeviceOptions TrustProviderDeviceOptionsPtrInput
	// The type of device-based trust provider.
	DeviceTrustProviderType pulumi.StringPtrInput
	// The OpenID Connect details for an oidc-type, user-identity based trust provider.
	OidcOptions TrustProviderOidcOptionsPtrInput
	// The identifier to be used when working with policy rules.
	PolicyReferenceName pulumi.StringPtrInput
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
	// The type of trust provider can be either user or device-based.
	//
	// The following arguments are optional:
	TrustProviderType pulumi.StringPtrInput
	// The type of user-based trust provider.
	UserTrustProviderType pulumi.StringPtrInput
}

func (TrustProviderState) ElementType() reflect.Type {
	return reflect.TypeOf((*trustProviderState)(nil)).Elem()
}

type trustProviderArgs struct {
	// A description for the AWS Verified Access trust provider.
	Description *string `pulumi:"description"`
	// A block of options for device identity based trust providers.
	DeviceOptions *TrustProviderDeviceOptions `pulumi:"deviceOptions"`
	// The type of device-based trust provider.
	DeviceTrustProviderType *string `pulumi:"deviceTrustProviderType"`
	// The OpenID Connect details for an oidc-type, user-identity based trust provider.
	OidcOptions *TrustProviderOidcOptions `pulumi:"oidcOptions"`
	// The identifier to be used when working with policy rules.
	PolicyReferenceName string `pulumi:"policyReferenceName"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The type of trust provider can be either user or device-based.
	//
	// The following arguments are optional:
	TrustProviderType string `pulumi:"trustProviderType"`
	// The type of user-based trust provider.
	UserTrustProviderType *string `pulumi:"userTrustProviderType"`
}

// The set of arguments for constructing a TrustProvider resource.
type TrustProviderArgs struct {
	// A description for the AWS Verified Access trust provider.
	Description pulumi.StringPtrInput
	// A block of options for device identity based trust providers.
	DeviceOptions TrustProviderDeviceOptionsPtrInput
	// The type of device-based trust provider.
	DeviceTrustProviderType pulumi.StringPtrInput
	// The OpenID Connect details for an oidc-type, user-identity based trust provider.
	OidcOptions TrustProviderOidcOptionsPtrInput
	// The identifier to be used when working with policy rules.
	PolicyReferenceName pulumi.StringInput
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// The type of trust provider can be either user or device-based.
	//
	// The following arguments are optional:
	TrustProviderType pulumi.StringInput
	// The type of user-based trust provider.
	UserTrustProviderType pulumi.StringPtrInput
}

func (TrustProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trustProviderArgs)(nil)).Elem()
}

type TrustProviderInput interface {
	pulumi.Input

	ToTrustProviderOutput() TrustProviderOutput
	ToTrustProviderOutputWithContext(ctx context.Context) TrustProviderOutput
}

func (*TrustProvider) ElementType() reflect.Type {
	return reflect.TypeOf((**TrustProvider)(nil)).Elem()
}

func (i *TrustProvider) ToTrustProviderOutput() TrustProviderOutput {
	return i.ToTrustProviderOutputWithContext(context.Background())
}

func (i *TrustProvider) ToTrustProviderOutputWithContext(ctx context.Context) TrustProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustProviderOutput)
}

func (i *TrustProvider) ToOutput(ctx context.Context) pulumix.Output[*TrustProvider] {
	return pulumix.Output[*TrustProvider]{
		OutputState: i.ToTrustProviderOutputWithContext(ctx).OutputState,
	}
}

// TrustProviderArrayInput is an input type that accepts TrustProviderArray and TrustProviderArrayOutput values.
// You can construct a concrete instance of `TrustProviderArrayInput` via:
//
//	TrustProviderArray{ TrustProviderArgs{...} }
type TrustProviderArrayInput interface {
	pulumi.Input

	ToTrustProviderArrayOutput() TrustProviderArrayOutput
	ToTrustProviderArrayOutputWithContext(context.Context) TrustProviderArrayOutput
}

type TrustProviderArray []TrustProviderInput

func (TrustProviderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TrustProvider)(nil)).Elem()
}

func (i TrustProviderArray) ToTrustProviderArrayOutput() TrustProviderArrayOutput {
	return i.ToTrustProviderArrayOutputWithContext(context.Background())
}

func (i TrustProviderArray) ToTrustProviderArrayOutputWithContext(ctx context.Context) TrustProviderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustProviderArrayOutput)
}

func (i TrustProviderArray) ToOutput(ctx context.Context) pulumix.Output[[]*TrustProvider] {
	return pulumix.Output[[]*TrustProvider]{
		OutputState: i.ToTrustProviderArrayOutputWithContext(ctx).OutputState,
	}
}

// TrustProviderMapInput is an input type that accepts TrustProviderMap and TrustProviderMapOutput values.
// You can construct a concrete instance of `TrustProviderMapInput` via:
//
//	TrustProviderMap{ "key": TrustProviderArgs{...} }
type TrustProviderMapInput interface {
	pulumi.Input

	ToTrustProviderMapOutput() TrustProviderMapOutput
	ToTrustProviderMapOutputWithContext(context.Context) TrustProviderMapOutput
}

type TrustProviderMap map[string]TrustProviderInput

func (TrustProviderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TrustProvider)(nil)).Elem()
}

func (i TrustProviderMap) ToTrustProviderMapOutput() TrustProviderMapOutput {
	return i.ToTrustProviderMapOutputWithContext(context.Background())
}

func (i TrustProviderMap) ToTrustProviderMapOutputWithContext(ctx context.Context) TrustProviderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustProviderMapOutput)
}

func (i TrustProviderMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*TrustProvider] {
	return pulumix.Output[map[string]*TrustProvider]{
		OutputState: i.ToTrustProviderMapOutputWithContext(ctx).OutputState,
	}
}

type TrustProviderOutput struct{ *pulumi.OutputState }

func (TrustProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrustProvider)(nil)).Elem()
}

func (o TrustProviderOutput) ToTrustProviderOutput() TrustProviderOutput {
	return o
}

func (o TrustProviderOutput) ToTrustProviderOutputWithContext(ctx context.Context) TrustProviderOutput {
	return o
}

func (o TrustProviderOutput) ToOutput(ctx context.Context) pulumix.Output[*TrustProvider] {
	return pulumix.Output[*TrustProvider]{
		OutputState: o.OutputState,
	}
}

// A description for the AWS Verified Access trust provider.
func (o TrustProviderOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrustProvider) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A block of options for device identity based trust providers.
func (o TrustProviderOutput) DeviceOptions() TrustProviderDeviceOptionsPtrOutput {
	return o.ApplyT(func(v *TrustProvider) TrustProviderDeviceOptionsPtrOutput { return v.DeviceOptions }).(TrustProviderDeviceOptionsPtrOutput)
}

// The type of device-based trust provider.
func (o TrustProviderOutput) DeviceTrustProviderType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrustProvider) pulumi.StringPtrOutput { return v.DeviceTrustProviderType }).(pulumi.StringPtrOutput)
}

// The OpenID Connect details for an oidc-type, user-identity based trust provider.
func (o TrustProviderOutput) OidcOptions() TrustProviderOidcOptionsPtrOutput {
	return o.ApplyT(func(v *TrustProvider) TrustProviderOidcOptionsPtrOutput { return v.OidcOptions }).(TrustProviderOidcOptionsPtrOutput)
}

// The identifier to be used when working with policy rules.
func (o TrustProviderOutput) PolicyReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v *TrustProvider) pulumi.StringOutput { return v.PolicyReferenceName }).(pulumi.StringOutput)
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o TrustProviderOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TrustProvider) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Deprecated: Please use `tags` instead.
func (o TrustProviderOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TrustProvider) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// The type of trust provider can be either user or device-based.
//
// The following arguments are optional:
func (o TrustProviderOutput) TrustProviderType() pulumi.StringOutput {
	return o.ApplyT(func(v *TrustProvider) pulumi.StringOutput { return v.TrustProviderType }).(pulumi.StringOutput)
}

// The type of user-based trust provider.
func (o TrustProviderOutput) UserTrustProviderType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrustProvider) pulumi.StringPtrOutput { return v.UserTrustProviderType }).(pulumi.StringPtrOutput)
}

type TrustProviderArrayOutput struct{ *pulumi.OutputState }

func (TrustProviderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TrustProvider)(nil)).Elem()
}

func (o TrustProviderArrayOutput) ToTrustProviderArrayOutput() TrustProviderArrayOutput {
	return o
}

func (o TrustProviderArrayOutput) ToTrustProviderArrayOutputWithContext(ctx context.Context) TrustProviderArrayOutput {
	return o
}

func (o TrustProviderArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*TrustProvider] {
	return pulumix.Output[[]*TrustProvider]{
		OutputState: o.OutputState,
	}
}

func (o TrustProviderArrayOutput) Index(i pulumi.IntInput) TrustProviderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TrustProvider {
		return vs[0].([]*TrustProvider)[vs[1].(int)]
	}).(TrustProviderOutput)
}

type TrustProviderMapOutput struct{ *pulumi.OutputState }

func (TrustProviderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TrustProvider)(nil)).Elem()
}

func (o TrustProviderMapOutput) ToTrustProviderMapOutput() TrustProviderMapOutput {
	return o
}

func (o TrustProviderMapOutput) ToTrustProviderMapOutputWithContext(ctx context.Context) TrustProviderMapOutput {
	return o
}

func (o TrustProviderMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*TrustProvider] {
	return pulumix.Output[map[string]*TrustProvider]{
		OutputState: o.OutputState,
	}
}

func (o TrustProviderMapOutput) MapIndex(k pulumi.StringInput) TrustProviderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TrustProvider {
		return vs[0].(map[string]*TrustProvider)[vs[1].(string)]
	}).(TrustProviderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TrustProviderInput)(nil)).Elem(), &TrustProvider{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrustProviderArrayInput)(nil)).Elem(), TrustProviderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrustProviderMapInput)(nil)).Elem(), TrustProviderMap{})
	pulumi.RegisterOutputType(TrustProviderOutput{})
	pulumi.RegisterOutputType(TrustProviderArrayOutput{})
	pulumi.RegisterOutputType(TrustProviderMapOutput{})
}
