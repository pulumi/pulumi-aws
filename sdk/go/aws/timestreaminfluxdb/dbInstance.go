// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package timestreaminfluxdb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an Amazon Timestream for InfluxDB database instance.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/timestreaminfluxdb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := timestreaminfluxdb.NewDbInstance(ctx, "example", &timestreaminfluxdb.DbInstanceArgs{
//				AllocatedStorage: pulumi.Int(20),
//				Bucket:           pulumi.String("example-bucket-name"),
//				DbInstanceType:   pulumi.String("db.influx.medium"),
//				Username:         pulumi.String("admin"),
//				Password:         pulumi.String("example-password"),
//				Port:             pulumi.Int(8086),
//				Organization:     pulumi.String("organization"),
//				VpcSubnetIds: pulumi.StringArray{
//					exampleid,
//				},
//				VpcSecurityGroupIds: pulumi.StringArray{
//					exampleAwsSecurityGroup.Id,
//				},
//				Name: pulumi.String("example-db-instance"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Usage with Prerequisite Resources
//
// All Timestream for InfluxDB instances require a VPC, subnet, and security group. The following example shows how these prerequisite resources can be created and used with `timestreaminfluxdb.DbInstance`.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/timestreaminfluxdb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := ec2.NewVpc(ctx, "example", &ec2.VpcArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleSubnet, err := ec2.NewSubnet(ctx, "example", &ec2.SubnetArgs{
//				VpcId:     example.ID(),
//				CidrBlock: pulumi.String("10.0.1.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleSecurityGroup, err := ec2.NewSecurityGroup(ctx, "example", &ec2.SecurityGroupArgs{
//				Name:  pulumi.String("example"),
//				VpcId: example.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = timestreaminfluxdb.NewDbInstance(ctx, "example", &timestreaminfluxdb.DbInstanceArgs{
//				AllocatedStorage: pulumi.Int(20),
//				Bucket:           pulumi.String("example-bucket-name"),
//				DbInstanceType:   pulumi.String("db.influx.medium"),
//				Username:         pulumi.String("admin"),
//				Password:         pulumi.String("example-password"),
//				Organization:     pulumi.String("organization"),
//				VpcSubnetIds: pulumi.StringArray{
//					exampleSubnet.ID(),
//				},
//				VpcSecurityGroupIds: pulumi.StringArray{
//					exampleSecurityGroup.ID(),
//				},
//				Name: pulumi.String("example-db-instance"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Usage with S3 Log Delivery Enabled
//
// You can use an S3 bucket to store logs generated by your Timestream for InfluxDB instance. The following example shows what resources and arguments are required to configure an S3 bucket for logging, including the IAM policy that needs to be set in order to allow Timestream for InfluxDB to place logs in your S3 bucket. The configuration of the required VPC, security group, and subnet have been left out of the example for brevity.
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/iam"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/s3"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/timestreaminfluxdb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleBucketV2, err := s3.NewBucketV2(ctx, "example", &s3.BucketV2Args{
//				Bucket:       pulumi.String("example-s3-bucket"),
//				ForceDestroy: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			example := iam.GetPolicyDocumentOutput(ctx, iam.GetPolicyDocumentOutputArgs{
//				Statements: iam.GetPolicyDocumentStatementArray{
//					&iam.GetPolicyDocumentStatementArgs{
//						Actions: pulumi.StringArray{
//							pulumi.String("s3:PutObject"),
//						},
//						Principals: iam.GetPolicyDocumentStatementPrincipalArray{
//							&iam.GetPolicyDocumentStatementPrincipalArgs{
//								Type: pulumi.String("Service"),
//								Identifiers: pulumi.StringArray{
//									pulumi.String("timestream-influxdb.amazonaws.com"),
//								},
//							},
//						},
//						Resources: pulumi.StringArray{
//							exampleBucketV2.Arn.ApplyT(func(arn string) (string, error) {
//								return fmt.Sprintf("%v/*", arn), nil
//							}).(pulumi.StringOutput),
//						},
//					},
//				},
//			}, nil)
//			_, err = s3.NewBucketPolicy(ctx, "example", &s3.BucketPolicyArgs{
//				Bucket: exampleBucketV2.ID(),
//				Policy: pulumi.String(example.ApplyT(func(example iam.GetPolicyDocumentResult) (*string, error) {
//					return &example.Json, nil
//				}).(pulumi.StringPtrOutput)),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = timestreaminfluxdb.NewDbInstance(ctx, "example", &timestreaminfluxdb.DbInstanceArgs{
//				AllocatedStorage: pulumi.Int(20),
//				Bucket:           pulumi.String("example-bucket-name"),
//				DbInstanceType:   pulumi.String("db.influx.medium"),
//				Username:         pulumi.String("admin"),
//				Password:         pulumi.String("example-password"),
//				Organization:     pulumi.String("organization"),
//				VpcSubnetIds: pulumi.StringArray{
//					exampleAwsSubnet.Id,
//				},
//				VpcSecurityGroupIds: pulumi.StringArray{
//					exampleAwsSecurityGroup.Id,
//				},
//				Name: pulumi.String("example-db-instance"),
//				LogDeliveryConfiguration: &timestreaminfluxdb.DbInstanceLogDeliveryConfigurationArgs{
//					S3Configuration: &timestreaminfluxdb.DbInstanceLogDeliveryConfigurationS3ConfigurationArgs{
//						BucketName: exampleBucketV2.Bucket,
//						Enabled:    pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Usage with MultiAZ Deployment
//
// To use multi-region availability, at least two subnets must be created in different availability zones and used with your Timestream for InfluxDB instance.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/timestreaminfluxdb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example1, err := ec2.NewSubnet(ctx, "example_1", &ec2.SubnetArgs{
//				VpcId:            pulumi.Any(exampleAwsVpc.Id),
//				CidrBlock:        pulumi.String("10.0.1.0/24"),
//				AvailabilityZone: pulumi.String("us-west-2a"),
//			})
//			if err != nil {
//				return err
//			}
//			example2, err := ec2.NewSubnet(ctx, "example_2", &ec2.SubnetArgs{
//				VpcId:            pulumi.Any(exampleAwsVpc.Id),
//				CidrBlock:        pulumi.String("10.0.2.0/24"),
//				AvailabilityZone: pulumi.String("us-west-2b"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = timestreaminfluxdb.NewDbInstance(ctx, "example", &timestreaminfluxdb.DbInstanceArgs{
//				AllocatedStorage: pulumi.Int(20),
//				Bucket:           pulumi.String("example-bucket-name"),
//				DbInstanceType:   pulumi.String("db.influx.medium"),
//				DeploymentType:   pulumi.String("WITH_MULTIAZ_STANDBY"),
//				Username:         pulumi.String("admin"),
//				Password:         pulumi.String("example-password"),
//				Organization:     pulumi.String("organization"),
//				VpcSubnetIds: pulumi.StringArray{
//					example1.ID(),
//					example2.ID(),
//				},
//				VpcSecurityGroupIds: pulumi.StringArray{
//					exampleAwsSecurityGroup.Id,
//				},
//				Name: pulumi.String("example-db-instance"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Timestream for InfluxDB Db Instance using its identifier. For example:
//
// ```sh
// $ pulumi import aws:timestreaminfluxdb/dbInstance:DbInstance example 12345abcde
// ```
type DbInstance struct {
	pulumi.CustomResourceState

	// Amount of storage in GiB (gibibytes). The minimum value is `20`, the maximum value is `16384`. This argument is updatable. The argument `dbStorageType` places restrictions on this argument's minimum value. The following is a list of `dbStorageType` values and the corresponding minimum value for `allocatedStorage`: ` "InfluxIOIncludedT1":  `20` ,  `"InfluxIOIncludedT2" and ` "InfluxIOIncludedT3":  `400`.
	AllocatedStorage pulumi.IntOutput `pulumi:"allocatedStorage"`
	// ARN of the Timestream for InfluxDB Instance.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Availability Zone in which the DB instance resides.
	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`
	// Name of the initial InfluxDB bucket. All InfluxDB data is stored in a bucket. A bucket combines the concept of a database and a retention period (the duration of time that each data point persists). A bucket belongs to an organization. Along with `organization`, `username`, and `password`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// Timestream for InfluxDB DB instance type to run InfluxDB on. Valid options are: `"db.influx.medium"`, `"db.influx.large"`, `"db.influx.xlarge"`, `"db.influx.2xlarge"`, `"db.influx.4xlarge"`, `"db.influx.8xlarge"`, `"db.influx.12xlarge"`, and `"db.influx.16xlarge"`. This argument is updatable.
	DbInstanceType pulumi.StringOutput `pulumi:"dbInstanceType"`
	// ID of the DB parameter group assigned to your DB instance. This argument is updatable. If added to an existing Timestream for InfluxDB instance or given a new value, will cause an in-place update to the instance. However, if an instance already has a value for `dbParameterGroupIdentifier`, removing `dbParameterGroupIdentifier` will cause the instance to be destroyed and recreated.
	DbParameterGroupIdentifier pulumi.StringPtrOutput `pulumi:"dbParameterGroupIdentifier"`
	// Timestream for InfluxDB DB storage type to read and write InfluxDB data. You can choose between 3 different types of provisioned Influx IOPS included storage according to your workloads requirements: Influx IO Included 3000 IOPS, Influx IO Included 12000 IOPS, Influx IO Included 16000 IOPS. Valid options are: `"InfluxIOIncludedT1"`, `"InfluxIOIncludedT2"`, and `"InfluxIOIncludedT3"`. If you use ` "InfluxIOIncludedT2" or "InfluxIOIncludedT3", the minimum value for  `allocatedStorage` is 400. This argument is updatable. For a single instance, after this argument has been updated once, it can only be updated again after 6 hours have passed.
	DbStorageType pulumi.StringOutput `pulumi:"dbStorageType"`
	// Specifies whether the DB instance will be deployed as a standalone instance or with a Multi-AZ standby for high availability. Valid options are: `"SINGLE_AZ"`, `"WITH_MULTIAZ_STANDBY"`. This argument is updatable.
	DeploymentType pulumi.StringOutput `pulumi:"deploymentType"`
	// Endpoint used to connect to InfluxDB. The default InfluxDB port is 8086.
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// ARN of the AWS Secrets Manager secret containing the initial InfluxDB authorization parameters. The secret value is a JSON formatted key-value pair holding InfluxDB authorization values: organization, bucket, username, and password. This secret will be read by the `timestreaminfluxdb.DbInstance` resource in order to support importing: deleting the secret or secret values can cause errors.
	InfluxAuthParametersSecretArn pulumi.StringOutput `pulumi:"influxAuthParametersSecretArn"`
	// Configuration for sending InfluxDB engine logs to a specified S3 bucket. This argument is updatable.
	LogDeliveryConfiguration DbInstanceLogDeliveryConfigurationPtrOutput `pulumi:"logDeliveryConfiguration"`
	// Name that uniquely identifies the DB instance when interacting with the Amazon Timestream for InfluxDB API and CLI commands. This name will also be a prefix included in the endpoint. DB instance names must be unique per customer and per region. The argument must start with a letter, cannot contain consecutive hyphens (`-`) and cannot end with a hyphen.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies whether the networkType of the Timestream for InfluxDB instance is IPV4, which can communicate over IPv4 protocol only, or DUAL, which can communicate over both IPv4 and IPv6 protocols.
	NetworkType pulumi.StringOutput `pulumi:"networkType"`
	// Name of the initial organization for the initial admin user in InfluxDB. An InfluxDB organization is a workspace for a group of users. Along with `bucket`, `username`, and `password`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Organization pulumi.StringOutput `pulumi:"organization"`
	// Password of the initial admin user created in InfluxDB. This password will allow you to access the InfluxDB UI to perform various administrative tasks and also use the InfluxDB CLI to create an operator token. Along with `bucket`, `username`, and `organization`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Password pulumi.StringOutput `pulumi:"password"`
	// The port on which the instance accepts connections. Valid values: `1024`-`65535`. Cannot be `2375`-`2376`, `7788`-`7799`, `8090`, or `51678`-`51680`. This argument is updatable.
	Port pulumi.IntOutput `pulumi:"port"`
	// Configures the DB instance with a public IP to facilitate access. Other resources, such as a VPC, a subnet, an internet gateway, and a route table with routes, are also required to enabled public access, in addition to this argument. See "Usage with Public Internet Access Enabled" for an example configuration with all required resources for public internet access.
	PubliclyAccessible pulumi.BoolOutput `pulumi:"publiclyAccessible"`
	// Availability Zone in which the standby instance is located when deploying with a MultiAZ standby instance.
	SecondaryAvailabilityZone pulumi.StringOutput `pulumi:"secondaryAvailabilityZone"`
	// Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapOutput      `pulumi:"tagsAll"`
	Timeouts DbInstanceTimeoutsPtrOutput `pulumi:"timeouts"`
	// Username of the initial admin user created in InfluxDB. Must start with a letter and can't end with a hyphen or contain two consecutive hyphens. This username will allow you to access the InfluxDB UI to perform various administrative tasks and also use the InfluxDB CLI to create an operator token. Along with `bucket`, `organization`, and `password`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Username pulumi.StringOutput `pulumi:"username"`
	// List of VPC security group IDs to associate with the DB instance.
	VpcSecurityGroupIds pulumi.StringArrayOutput `pulumi:"vpcSecurityGroupIds"`
	// List of VPC subnet IDs to associate with the DB instance. Provide at least two VPC subnet IDs in different availability zones when deploying with a Multi-AZ standby.
	//
	// The following arguments are optional:
	VpcSubnetIds pulumi.StringArrayOutput `pulumi:"vpcSubnetIds"`
}

// NewDbInstance registers a new resource with the given unique name, arguments, and options.
func NewDbInstance(ctx *pulumi.Context,
	name string, args *DbInstanceArgs, opts ...pulumi.ResourceOption) (*DbInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AllocatedStorage == nil {
		return nil, errors.New("invalid value for required argument 'AllocatedStorage'")
	}
	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.DbInstanceType == nil {
		return nil, errors.New("invalid value for required argument 'DbInstanceType'")
	}
	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.VpcSecurityGroupIds == nil {
		return nil, errors.New("invalid value for required argument 'VpcSecurityGroupIds'")
	}
	if args.VpcSubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'VpcSubnetIds'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DbInstance
	err := ctx.RegisterResource("aws:timestreaminfluxdb/dbInstance:DbInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDbInstance gets an existing DbInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDbInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DbInstanceState, opts ...pulumi.ResourceOption) (*DbInstance, error) {
	var resource DbInstance
	err := ctx.ReadResource("aws:timestreaminfluxdb/dbInstance:DbInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DbInstance resources.
type dbInstanceState struct {
	// Amount of storage in GiB (gibibytes). The minimum value is `20`, the maximum value is `16384`. This argument is updatable. The argument `dbStorageType` places restrictions on this argument's minimum value. The following is a list of `dbStorageType` values and the corresponding minimum value for `allocatedStorage`: ` "InfluxIOIncludedT1":  `20` ,  `"InfluxIOIncludedT2" and ` "InfluxIOIncludedT3":  `400`.
	AllocatedStorage *int `pulumi:"allocatedStorage"`
	// ARN of the Timestream for InfluxDB Instance.
	Arn *string `pulumi:"arn"`
	// Availability Zone in which the DB instance resides.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// Name of the initial InfluxDB bucket. All InfluxDB data is stored in a bucket. A bucket combines the concept of a database and a retention period (the duration of time that each data point persists). A bucket belongs to an organization. Along with `organization`, `username`, and `password`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Bucket *string `pulumi:"bucket"`
	// Timestream for InfluxDB DB instance type to run InfluxDB on. Valid options are: `"db.influx.medium"`, `"db.influx.large"`, `"db.influx.xlarge"`, `"db.influx.2xlarge"`, `"db.influx.4xlarge"`, `"db.influx.8xlarge"`, `"db.influx.12xlarge"`, and `"db.influx.16xlarge"`. This argument is updatable.
	DbInstanceType *string `pulumi:"dbInstanceType"`
	// ID of the DB parameter group assigned to your DB instance. This argument is updatable. If added to an existing Timestream for InfluxDB instance or given a new value, will cause an in-place update to the instance. However, if an instance already has a value for `dbParameterGroupIdentifier`, removing `dbParameterGroupIdentifier` will cause the instance to be destroyed and recreated.
	DbParameterGroupIdentifier *string `pulumi:"dbParameterGroupIdentifier"`
	// Timestream for InfluxDB DB storage type to read and write InfluxDB data. You can choose between 3 different types of provisioned Influx IOPS included storage according to your workloads requirements: Influx IO Included 3000 IOPS, Influx IO Included 12000 IOPS, Influx IO Included 16000 IOPS. Valid options are: `"InfluxIOIncludedT1"`, `"InfluxIOIncludedT2"`, and `"InfluxIOIncludedT3"`. If you use ` "InfluxIOIncludedT2" or "InfluxIOIncludedT3", the minimum value for  `allocatedStorage` is 400. This argument is updatable. For a single instance, after this argument has been updated once, it can only be updated again after 6 hours have passed.
	DbStorageType *string `pulumi:"dbStorageType"`
	// Specifies whether the DB instance will be deployed as a standalone instance or with a Multi-AZ standby for high availability. Valid options are: `"SINGLE_AZ"`, `"WITH_MULTIAZ_STANDBY"`. This argument is updatable.
	DeploymentType *string `pulumi:"deploymentType"`
	// Endpoint used to connect to InfluxDB. The default InfluxDB port is 8086.
	Endpoint *string `pulumi:"endpoint"`
	// ARN of the AWS Secrets Manager secret containing the initial InfluxDB authorization parameters. The secret value is a JSON formatted key-value pair holding InfluxDB authorization values: organization, bucket, username, and password. This secret will be read by the `timestreaminfluxdb.DbInstance` resource in order to support importing: deleting the secret or secret values can cause errors.
	InfluxAuthParametersSecretArn *string `pulumi:"influxAuthParametersSecretArn"`
	// Configuration for sending InfluxDB engine logs to a specified S3 bucket. This argument is updatable.
	LogDeliveryConfiguration *DbInstanceLogDeliveryConfiguration `pulumi:"logDeliveryConfiguration"`
	// Name that uniquely identifies the DB instance when interacting with the Amazon Timestream for InfluxDB API and CLI commands. This name will also be a prefix included in the endpoint. DB instance names must be unique per customer and per region. The argument must start with a letter, cannot contain consecutive hyphens (`-`) and cannot end with a hyphen.
	Name *string `pulumi:"name"`
	// Specifies whether the networkType of the Timestream for InfluxDB instance is IPV4, which can communicate over IPv4 protocol only, or DUAL, which can communicate over both IPv4 and IPv6 protocols.
	NetworkType *string `pulumi:"networkType"`
	// Name of the initial organization for the initial admin user in InfluxDB. An InfluxDB organization is a workspace for a group of users. Along with `bucket`, `username`, and `password`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Organization *string `pulumi:"organization"`
	// Password of the initial admin user created in InfluxDB. This password will allow you to access the InfluxDB UI to perform various administrative tasks and also use the InfluxDB CLI to create an operator token. Along with `bucket`, `username`, and `organization`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Password *string `pulumi:"password"`
	// The port on which the instance accepts connections. Valid values: `1024`-`65535`. Cannot be `2375`-`2376`, `7788`-`7799`, `8090`, or `51678`-`51680`. This argument is updatable.
	Port *int `pulumi:"port"`
	// Configures the DB instance with a public IP to facilitate access. Other resources, such as a VPC, a subnet, an internet gateway, and a route table with routes, are also required to enabled public access, in addition to this argument. See "Usage with Public Internet Access Enabled" for an example configuration with all required resources for public internet access.
	PubliclyAccessible *bool `pulumi:"publiclyAccessible"`
	// Availability Zone in which the standby instance is located when deploying with a MultiAZ standby instance.
	SecondaryAvailabilityZone *string `pulumi:"secondaryAvailabilityZone"`
	// Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  map[string]string   `pulumi:"tagsAll"`
	Timeouts *DbInstanceTimeouts `pulumi:"timeouts"`
	// Username of the initial admin user created in InfluxDB. Must start with a letter and can't end with a hyphen or contain two consecutive hyphens. This username will allow you to access the InfluxDB UI to perform various administrative tasks and also use the InfluxDB CLI to create an operator token. Along with `bucket`, `organization`, and `password`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Username *string `pulumi:"username"`
	// List of VPC security group IDs to associate with the DB instance.
	VpcSecurityGroupIds []string `pulumi:"vpcSecurityGroupIds"`
	// List of VPC subnet IDs to associate with the DB instance. Provide at least two VPC subnet IDs in different availability zones when deploying with a Multi-AZ standby.
	//
	// The following arguments are optional:
	VpcSubnetIds []string `pulumi:"vpcSubnetIds"`
}

type DbInstanceState struct {
	// Amount of storage in GiB (gibibytes). The minimum value is `20`, the maximum value is `16384`. This argument is updatable. The argument `dbStorageType` places restrictions on this argument's minimum value. The following is a list of `dbStorageType` values and the corresponding minimum value for `allocatedStorage`: ` "InfluxIOIncludedT1":  `20` ,  `"InfluxIOIncludedT2" and ` "InfluxIOIncludedT3":  `400`.
	AllocatedStorage pulumi.IntPtrInput
	// ARN of the Timestream for InfluxDB Instance.
	Arn pulumi.StringPtrInput
	// Availability Zone in which the DB instance resides.
	AvailabilityZone pulumi.StringPtrInput
	// Name of the initial InfluxDB bucket. All InfluxDB data is stored in a bucket. A bucket combines the concept of a database and a retention period (the duration of time that each data point persists). A bucket belongs to an organization. Along with `organization`, `username`, and `password`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Bucket pulumi.StringPtrInput
	// Timestream for InfluxDB DB instance type to run InfluxDB on. Valid options are: `"db.influx.medium"`, `"db.influx.large"`, `"db.influx.xlarge"`, `"db.influx.2xlarge"`, `"db.influx.4xlarge"`, `"db.influx.8xlarge"`, `"db.influx.12xlarge"`, and `"db.influx.16xlarge"`. This argument is updatable.
	DbInstanceType pulumi.StringPtrInput
	// ID of the DB parameter group assigned to your DB instance. This argument is updatable. If added to an existing Timestream for InfluxDB instance or given a new value, will cause an in-place update to the instance. However, if an instance already has a value for `dbParameterGroupIdentifier`, removing `dbParameterGroupIdentifier` will cause the instance to be destroyed and recreated.
	DbParameterGroupIdentifier pulumi.StringPtrInput
	// Timestream for InfluxDB DB storage type to read and write InfluxDB data. You can choose between 3 different types of provisioned Influx IOPS included storage according to your workloads requirements: Influx IO Included 3000 IOPS, Influx IO Included 12000 IOPS, Influx IO Included 16000 IOPS. Valid options are: `"InfluxIOIncludedT1"`, `"InfluxIOIncludedT2"`, and `"InfluxIOIncludedT3"`. If you use ` "InfluxIOIncludedT2" or "InfluxIOIncludedT3", the minimum value for  `allocatedStorage` is 400. This argument is updatable. For a single instance, after this argument has been updated once, it can only be updated again after 6 hours have passed.
	DbStorageType pulumi.StringPtrInput
	// Specifies whether the DB instance will be deployed as a standalone instance or with a Multi-AZ standby for high availability. Valid options are: `"SINGLE_AZ"`, `"WITH_MULTIAZ_STANDBY"`. This argument is updatable.
	DeploymentType pulumi.StringPtrInput
	// Endpoint used to connect to InfluxDB. The default InfluxDB port is 8086.
	Endpoint pulumi.StringPtrInput
	// ARN of the AWS Secrets Manager secret containing the initial InfluxDB authorization parameters. The secret value is a JSON formatted key-value pair holding InfluxDB authorization values: organization, bucket, username, and password. This secret will be read by the `timestreaminfluxdb.DbInstance` resource in order to support importing: deleting the secret or secret values can cause errors.
	InfluxAuthParametersSecretArn pulumi.StringPtrInput
	// Configuration for sending InfluxDB engine logs to a specified S3 bucket. This argument is updatable.
	LogDeliveryConfiguration DbInstanceLogDeliveryConfigurationPtrInput
	// Name that uniquely identifies the DB instance when interacting with the Amazon Timestream for InfluxDB API and CLI commands. This name will also be a prefix included in the endpoint. DB instance names must be unique per customer and per region. The argument must start with a letter, cannot contain consecutive hyphens (`-`) and cannot end with a hyphen.
	Name pulumi.StringPtrInput
	// Specifies whether the networkType of the Timestream for InfluxDB instance is IPV4, which can communicate over IPv4 protocol only, or DUAL, which can communicate over both IPv4 and IPv6 protocols.
	NetworkType pulumi.StringPtrInput
	// Name of the initial organization for the initial admin user in InfluxDB. An InfluxDB organization is a workspace for a group of users. Along with `bucket`, `username`, and `password`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Organization pulumi.StringPtrInput
	// Password of the initial admin user created in InfluxDB. This password will allow you to access the InfluxDB UI to perform various administrative tasks and also use the InfluxDB CLI to create an operator token. Along with `bucket`, `username`, and `organization`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Password pulumi.StringPtrInput
	// The port on which the instance accepts connections. Valid values: `1024`-`65535`. Cannot be `2375`-`2376`, `7788`-`7799`, `8090`, or `51678`-`51680`. This argument is updatable.
	Port pulumi.IntPtrInput
	// Configures the DB instance with a public IP to facilitate access. Other resources, such as a VPC, a subnet, an internet gateway, and a route table with routes, are also required to enabled public access, in addition to this argument. See "Usage with Public Internet Access Enabled" for an example configuration with all required resources for public internet access.
	PubliclyAccessible pulumi.BoolPtrInput
	// Availability Zone in which the standby instance is located when deploying with a MultiAZ standby instance.
	SecondaryAvailabilityZone pulumi.StringPtrInput
	// Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapInput
	Timeouts DbInstanceTimeoutsPtrInput
	// Username of the initial admin user created in InfluxDB. Must start with a letter and can't end with a hyphen or contain two consecutive hyphens. This username will allow you to access the InfluxDB UI to perform various administrative tasks and also use the InfluxDB CLI to create an operator token. Along with `bucket`, `organization`, and `password`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Username pulumi.StringPtrInput
	// List of VPC security group IDs to associate with the DB instance.
	VpcSecurityGroupIds pulumi.StringArrayInput
	// List of VPC subnet IDs to associate with the DB instance. Provide at least two VPC subnet IDs in different availability zones when deploying with a Multi-AZ standby.
	//
	// The following arguments are optional:
	VpcSubnetIds pulumi.StringArrayInput
}

func (DbInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*dbInstanceState)(nil)).Elem()
}

type dbInstanceArgs struct {
	// Amount of storage in GiB (gibibytes). The minimum value is `20`, the maximum value is `16384`. This argument is updatable. The argument `dbStorageType` places restrictions on this argument's minimum value. The following is a list of `dbStorageType` values and the corresponding minimum value for `allocatedStorage`: ` "InfluxIOIncludedT1":  `20` ,  `"InfluxIOIncludedT2" and ` "InfluxIOIncludedT3":  `400`.
	AllocatedStorage int `pulumi:"allocatedStorage"`
	// Name of the initial InfluxDB bucket. All InfluxDB data is stored in a bucket. A bucket combines the concept of a database and a retention period (the duration of time that each data point persists). A bucket belongs to an organization. Along with `organization`, `username`, and `password`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Bucket string `pulumi:"bucket"`
	// Timestream for InfluxDB DB instance type to run InfluxDB on. Valid options are: `"db.influx.medium"`, `"db.influx.large"`, `"db.influx.xlarge"`, `"db.influx.2xlarge"`, `"db.influx.4xlarge"`, `"db.influx.8xlarge"`, `"db.influx.12xlarge"`, and `"db.influx.16xlarge"`. This argument is updatable.
	DbInstanceType string `pulumi:"dbInstanceType"`
	// ID of the DB parameter group assigned to your DB instance. This argument is updatable. If added to an existing Timestream for InfluxDB instance or given a new value, will cause an in-place update to the instance. However, if an instance already has a value for `dbParameterGroupIdentifier`, removing `dbParameterGroupIdentifier` will cause the instance to be destroyed and recreated.
	DbParameterGroupIdentifier *string `pulumi:"dbParameterGroupIdentifier"`
	// Timestream for InfluxDB DB storage type to read and write InfluxDB data. You can choose between 3 different types of provisioned Influx IOPS included storage according to your workloads requirements: Influx IO Included 3000 IOPS, Influx IO Included 12000 IOPS, Influx IO Included 16000 IOPS. Valid options are: `"InfluxIOIncludedT1"`, `"InfluxIOIncludedT2"`, and `"InfluxIOIncludedT3"`. If you use ` "InfluxIOIncludedT2" or "InfluxIOIncludedT3", the minimum value for  `allocatedStorage` is 400. This argument is updatable. For a single instance, after this argument has been updated once, it can only be updated again after 6 hours have passed.
	DbStorageType *string `pulumi:"dbStorageType"`
	// Specifies whether the DB instance will be deployed as a standalone instance or with a Multi-AZ standby for high availability. Valid options are: `"SINGLE_AZ"`, `"WITH_MULTIAZ_STANDBY"`. This argument is updatable.
	DeploymentType *string `pulumi:"deploymentType"`
	// Configuration for sending InfluxDB engine logs to a specified S3 bucket. This argument is updatable.
	LogDeliveryConfiguration *DbInstanceLogDeliveryConfiguration `pulumi:"logDeliveryConfiguration"`
	// Name that uniquely identifies the DB instance when interacting with the Amazon Timestream for InfluxDB API and CLI commands. This name will also be a prefix included in the endpoint. DB instance names must be unique per customer and per region. The argument must start with a letter, cannot contain consecutive hyphens (`-`) and cannot end with a hyphen.
	Name *string `pulumi:"name"`
	// Specifies whether the networkType of the Timestream for InfluxDB instance is IPV4, which can communicate over IPv4 protocol only, or DUAL, which can communicate over both IPv4 and IPv6 protocols.
	NetworkType *string `pulumi:"networkType"`
	// Name of the initial organization for the initial admin user in InfluxDB. An InfluxDB organization is a workspace for a group of users. Along with `bucket`, `username`, and `password`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Organization string `pulumi:"organization"`
	// Password of the initial admin user created in InfluxDB. This password will allow you to access the InfluxDB UI to perform various administrative tasks and also use the InfluxDB CLI to create an operator token. Along with `bucket`, `username`, and `organization`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Password string `pulumi:"password"`
	// The port on which the instance accepts connections. Valid values: `1024`-`65535`. Cannot be `2375`-`2376`, `7788`-`7799`, `8090`, or `51678`-`51680`. This argument is updatable.
	Port *int `pulumi:"port"`
	// Configures the DB instance with a public IP to facilitate access. Other resources, such as a VPC, a subnet, an internet gateway, and a route table with routes, are also required to enabled public access, in addition to this argument. See "Usage with Public Internet Access Enabled" for an example configuration with all required resources for public internet access.
	PubliclyAccessible *bool `pulumi:"publiclyAccessible"`
	// Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     map[string]string   `pulumi:"tags"`
	Timeouts *DbInstanceTimeouts `pulumi:"timeouts"`
	// Username of the initial admin user created in InfluxDB. Must start with a letter and can't end with a hyphen or contain two consecutive hyphens. This username will allow you to access the InfluxDB UI to perform various administrative tasks and also use the InfluxDB CLI to create an operator token. Along with `bucket`, `organization`, and `password`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Username string `pulumi:"username"`
	// List of VPC security group IDs to associate with the DB instance.
	VpcSecurityGroupIds []string `pulumi:"vpcSecurityGroupIds"`
	// List of VPC subnet IDs to associate with the DB instance. Provide at least two VPC subnet IDs in different availability zones when deploying with a Multi-AZ standby.
	//
	// The following arguments are optional:
	VpcSubnetIds []string `pulumi:"vpcSubnetIds"`
}

// The set of arguments for constructing a DbInstance resource.
type DbInstanceArgs struct {
	// Amount of storage in GiB (gibibytes). The minimum value is `20`, the maximum value is `16384`. This argument is updatable. The argument `dbStorageType` places restrictions on this argument's minimum value. The following is a list of `dbStorageType` values and the corresponding minimum value for `allocatedStorage`: ` "InfluxIOIncludedT1":  `20` ,  `"InfluxIOIncludedT2" and ` "InfluxIOIncludedT3":  `400`.
	AllocatedStorage pulumi.IntInput
	// Name of the initial InfluxDB bucket. All InfluxDB data is stored in a bucket. A bucket combines the concept of a database and a retention period (the duration of time that each data point persists). A bucket belongs to an organization. Along with `organization`, `username`, and `password`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Bucket pulumi.StringInput
	// Timestream for InfluxDB DB instance type to run InfluxDB on. Valid options are: `"db.influx.medium"`, `"db.influx.large"`, `"db.influx.xlarge"`, `"db.influx.2xlarge"`, `"db.influx.4xlarge"`, `"db.influx.8xlarge"`, `"db.influx.12xlarge"`, and `"db.influx.16xlarge"`. This argument is updatable.
	DbInstanceType pulumi.StringInput
	// ID of the DB parameter group assigned to your DB instance. This argument is updatable. If added to an existing Timestream for InfluxDB instance or given a new value, will cause an in-place update to the instance. However, if an instance already has a value for `dbParameterGroupIdentifier`, removing `dbParameterGroupIdentifier` will cause the instance to be destroyed and recreated.
	DbParameterGroupIdentifier pulumi.StringPtrInput
	// Timestream for InfluxDB DB storage type to read and write InfluxDB data. You can choose between 3 different types of provisioned Influx IOPS included storage according to your workloads requirements: Influx IO Included 3000 IOPS, Influx IO Included 12000 IOPS, Influx IO Included 16000 IOPS. Valid options are: `"InfluxIOIncludedT1"`, `"InfluxIOIncludedT2"`, and `"InfluxIOIncludedT3"`. If you use ` "InfluxIOIncludedT2" or "InfluxIOIncludedT3", the minimum value for  `allocatedStorage` is 400. This argument is updatable. For a single instance, after this argument has been updated once, it can only be updated again after 6 hours have passed.
	DbStorageType pulumi.StringPtrInput
	// Specifies whether the DB instance will be deployed as a standalone instance or with a Multi-AZ standby for high availability. Valid options are: `"SINGLE_AZ"`, `"WITH_MULTIAZ_STANDBY"`. This argument is updatable.
	DeploymentType pulumi.StringPtrInput
	// Configuration for sending InfluxDB engine logs to a specified S3 bucket. This argument is updatable.
	LogDeliveryConfiguration DbInstanceLogDeliveryConfigurationPtrInput
	// Name that uniquely identifies the DB instance when interacting with the Amazon Timestream for InfluxDB API and CLI commands. This name will also be a prefix included in the endpoint. DB instance names must be unique per customer and per region. The argument must start with a letter, cannot contain consecutive hyphens (`-`) and cannot end with a hyphen.
	Name pulumi.StringPtrInput
	// Specifies whether the networkType of the Timestream for InfluxDB instance is IPV4, which can communicate over IPv4 protocol only, or DUAL, which can communicate over both IPv4 and IPv6 protocols.
	NetworkType pulumi.StringPtrInput
	// Name of the initial organization for the initial admin user in InfluxDB. An InfluxDB organization is a workspace for a group of users. Along with `bucket`, `username`, and `password`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Organization pulumi.StringInput
	// Password of the initial admin user created in InfluxDB. This password will allow you to access the InfluxDB UI to perform various administrative tasks and also use the InfluxDB CLI to create an operator token. Along with `bucket`, `username`, and `organization`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Password pulumi.StringInput
	// The port on which the instance accepts connections. Valid values: `1024`-`65535`. Cannot be `2375`-`2376`, `7788`-`7799`, `8090`, or `51678`-`51680`. This argument is updatable.
	Port pulumi.IntPtrInput
	// Configures the DB instance with a public IP to facilitate access. Other resources, such as a VPC, a subnet, an internet gateway, and a route table with routes, are also required to enabled public access, in addition to this argument. See "Usage with Public Internet Access Enabled" for an example configuration with all required resources for public internet access.
	PubliclyAccessible pulumi.BoolPtrInput
	// Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     pulumi.StringMapInput
	Timeouts DbInstanceTimeoutsPtrInput
	// Username of the initial admin user created in InfluxDB. Must start with a letter and can't end with a hyphen or contain two consecutive hyphens. This username will allow you to access the InfluxDB UI to perform various administrative tasks and also use the InfluxDB CLI to create an operator token. Along with `bucket`, `organization`, and `password`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Username pulumi.StringInput
	// List of VPC security group IDs to associate with the DB instance.
	VpcSecurityGroupIds pulumi.StringArrayInput
	// List of VPC subnet IDs to associate with the DB instance. Provide at least two VPC subnet IDs in different availability zones when deploying with a Multi-AZ standby.
	//
	// The following arguments are optional:
	VpcSubnetIds pulumi.StringArrayInput
}

func (DbInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dbInstanceArgs)(nil)).Elem()
}

type DbInstanceInput interface {
	pulumi.Input

	ToDbInstanceOutput() DbInstanceOutput
	ToDbInstanceOutputWithContext(ctx context.Context) DbInstanceOutput
}

func (*DbInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**DbInstance)(nil)).Elem()
}

func (i *DbInstance) ToDbInstanceOutput() DbInstanceOutput {
	return i.ToDbInstanceOutputWithContext(context.Background())
}

func (i *DbInstance) ToDbInstanceOutputWithContext(ctx context.Context) DbInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbInstanceOutput)
}

// DbInstanceArrayInput is an input type that accepts DbInstanceArray and DbInstanceArrayOutput values.
// You can construct a concrete instance of `DbInstanceArrayInput` via:
//
//	DbInstanceArray{ DbInstanceArgs{...} }
type DbInstanceArrayInput interface {
	pulumi.Input

	ToDbInstanceArrayOutput() DbInstanceArrayOutput
	ToDbInstanceArrayOutputWithContext(context.Context) DbInstanceArrayOutput
}

type DbInstanceArray []DbInstanceInput

func (DbInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbInstance)(nil)).Elem()
}

func (i DbInstanceArray) ToDbInstanceArrayOutput() DbInstanceArrayOutput {
	return i.ToDbInstanceArrayOutputWithContext(context.Background())
}

func (i DbInstanceArray) ToDbInstanceArrayOutputWithContext(ctx context.Context) DbInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbInstanceArrayOutput)
}

// DbInstanceMapInput is an input type that accepts DbInstanceMap and DbInstanceMapOutput values.
// You can construct a concrete instance of `DbInstanceMapInput` via:
//
//	DbInstanceMap{ "key": DbInstanceArgs{...} }
type DbInstanceMapInput interface {
	pulumi.Input

	ToDbInstanceMapOutput() DbInstanceMapOutput
	ToDbInstanceMapOutputWithContext(context.Context) DbInstanceMapOutput
}

type DbInstanceMap map[string]DbInstanceInput

func (DbInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbInstance)(nil)).Elem()
}

func (i DbInstanceMap) ToDbInstanceMapOutput() DbInstanceMapOutput {
	return i.ToDbInstanceMapOutputWithContext(context.Background())
}

func (i DbInstanceMap) ToDbInstanceMapOutputWithContext(ctx context.Context) DbInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbInstanceMapOutput)
}

type DbInstanceOutput struct{ *pulumi.OutputState }

func (DbInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DbInstance)(nil)).Elem()
}

func (o DbInstanceOutput) ToDbInstanceOutput() DbInstanceOutput {
	return o
}

func (o DbInstanceOutput) ToDbInstanceOutputWithContext(ctx context.Context) DbInstanceOutput {
	return o
}

// Amount of storage in GiB (gibibytes). The minimum value is `20`, the maximum value is `16384`. This argument is updatable. The argument `dbStorageType` places restrictions on this argument's minimum value. The following is a list of `dbStorageType` values and the corresponding minimum value for `allocatedStorage`: ` "InfluxIOIncludedT1":  `20` ,  `"InfluxIOIncludedT2" and ` "InfluxIOIncludedT3":  `400`.
func (o DbInstanceOutput) AllocatedStorage() pulumi.IntOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.IntOutput { return v.AllocatedStorage }).(pulumi.IntOutput)
}

// ARN of the Timestream for InfluxDB Instance.
func (o DbInstanceOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Availability Zone in which the DB instance resides.
func (o DbInstanceOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// Name of the initial InfluxDB bucket. All InfluxDB data is stored in a bucket. A bucket combines the concept of a database and a retention period (the duration of time that each data point persists). A bucket belongs to an organization. Along with `organization`, `username`, and `password`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
func (o DbInstanceOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// Timestream for InfluxDB DB instance type to run InfluxDB on. Valid options are: `"db.influx.medium"`, `"db.influx.large"`, `"db.influx.xlarge"`, `"db.influx.2xlarge"`, `"db.influx.4xlarge"`, `"db.influx.8xlarge"`, `"db.influx.12xlarge"`, and `"db.influx.16xlarge"`. This argument is updatable.
func (o DbInstanceOutput) DbInstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringOutput { return v.DbInstanceType }).(pulumi.StringOutput)
}

// ID of the DB parameter group assigned to your DB instance. This argument is updatable. If added to an existing Timestream for InfluxDB instance or given a new value, will cause an in-place update to the instance. However, if an instance already has a value for `dbParameterGroupIdentifier`, removing `dbParameterGroupIdentifier` will cause the instance to be destroyed and recreated.
func (o DbInstanceOutput) DbParameterGroupIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringPtrOutput { return v.DbParameterGroupIdentifier }).(pulumi.StringPtrOutput)
}

// Timestream for InfluxDB DB storage type to read and write InfluxDB data. You can choose between 3 different types of provisioned Influx IOPS included storage according to your workloads requirements: Influx IO Included 3000 IOPS, Influx IO Included 12000 IOPS, Influx IO Included 16000 IOPS. Valid options are: `"InfluxIOIncludedT1"`, `"InfluxIOIncludedT2"`, and `"InfluxIOIncludedT3"`. If you use ` "InfluxIOIncludedT2" or "InfluxIOIncludedT3", the minimum value for  `allocatedStorage` is 400. This argument is updatable. For a single instance, after this argument has been updated once, it can only be updated again after 6 hours have passed.
func (o DbInstanceOutput) DbStorageType() pulumi.StringOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringOutput { return v.DbStorageType }).(pulumi.StringOutput)
}

// Specifies whether the DB instance will be deployed as a standalone instance or with a Multi-AZ standby for high availability. Valid options are: `"SINGLE_AZ"`, `"WITH_MULTIAZ_STANDBY"`. This argument is updatable.
func (o DbInstanceOutput) DeploymentType() pulumi.StringOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringOutput { return v.DeploymentType }).(pulumi.StringOutput)
}

// Endpoint used to connect to InfluxDB. The default InfluxDB port is 8086.
func (o DbInstanceOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// ARN of the AWS Secrets Manager secret containing the initial InfluxDB authorization parameters. The secret value is a JSON formatted key-value pair holding InfluxDB authorization values: organization, bucket, username, and password. This secret will be read by the `timestreaminfluxdb.DbInstance` resource in order to support importing: deleting the secret or secret values can cause errors.
func (o DbInstanceOutput) InfluxAuthParametersSecretArn() pulumi.StringOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringOutput { return v.InfluxAuthParametersSecretArn }).(pulumi.StringOutput)
}

// Configuration for sending InfluxDB engine logs to a specified S3 bucket. This argument is updatable.
func (o DbInstanceOutput) LogDeliveryConfiguration() DbInstanceLogDeliveryConfigurationPtrOutput {
	return o.ApplyT(func(v *DbInstance) DbInstanceLogDeliveryConfigurationPtrOutput { return v.LogDeliveryConfiguration }).(DbInstanceLogDeliveryConfigurationPtrOutput)
}

// Name that uniquely identifies the DB instance when interacting with the Amazon Timestream for InfluxDB API and CLI commands. This name will also be a prefix included in the endpoint. DB instance names must be unique per customer and per region. The argument must start with a letter, cannot contain consecutive hyphens (`-`) and cannot end with a hyphen.
func (o DbInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies whether the networkType of the Timestream for InfluxDB instance is IPV4, which can communicate over IPv4 protocol only, or DUAL, which can communicate over both IPv4 and IPv6 protocols.
func (o DbInstanceOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringOutput { return v.NetworkType }).(pulumi.StringOutput)
}

// Name of the initial organization for the initial admin user in InfluxDB. An InfluxDB organization is a workspace for a group of users. Along with `bucket`, `username`, and `password`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
func (o DbInstanceOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

// Password of the initial admin user created in InfluxDB. This password will allow you to access the InfluxDB UI to perform various administrative tasks and also use the InfluxDB CLI to create an operator token. Along with `bucket`, `username`, and `organization`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
func (o DbInstanceOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// The port on which the instance accepts connections. Valid values: `1024`-`65535`. Cannot be `2375`-`2376`, `7788`-`7799`, `8090`, or `51678`-`51680`. This argument is updatable.
func (o DbInstanceOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Configures the DB instance with a public IP to facilitate access. Other resources, such as a VPC, a subnet, an internet gateway, and a route table with routes, are also required to enabled public access, in addition to this argument. See "Usage with Public Internet Access Enabled" for an example configuration with all required resources for public internet access.
func (o DbInstanceOutput) PubliclyAccessible() pulumi.BoolOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.BoolOutput { return v.PubliclyAccessible }).(pulumi.BoolOutput)
}

// Availability Zone in which the standby instance is located when deploying with a MultiAZ standby instance.
func (o DbInstanceOutput) SecondaryAvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringOutput { return v.SecondaryAvailabilityZone }).(pulumi.StringOutput)
}

// Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o DbInstanceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o DbInstanceOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o DbInstanceOutput) Timeouts() DbInstanceTimeoutsPtrOutput {
	return o.ApplyT(func(v *DbInstance) DbInstanceTimeoutsPtrOutput { return v.Timeouts }).(DbInstanceTimeoutsPtrOutput)
}

// Username of the initial admin user created in InfluxDB. Must start with a letter and can't end with a hyphen or contain two consecutive hyphens. This username will allow you to access the InfluxDB UI to perform various administrative tasks and also use the InfluxDB CLI to create an operator token. Along with `bucket`, `organization`, and `password`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
func (o DbInstanceOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

// List of VPC security group IDs to associate with the DB instance.
func (o DbInstanceOutput) VpcSecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringArrayOutput { return v.VpcSecurityGroupIds }).(pulumi.StringArrayOutput)
}

// List of VPC subnet IDs to associate with the DB instance. Provide at least two VPC subnet IDs in different availability zones when deploying with a Multi-AZ standby.
//
// The following arguments are optional:
func (o DbInstanceOutput) VpcSubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringArrayOutput { return v.VpcSubnetIds }).(pulumi.StringArrayOutput)
}

type DbInstanceArrayOutput struct{ *pulumi.OutputState }

func (DbInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbInstance)(nil)).Elem()
}

func (o DbInstanceArrayOutput) ToDbInstanceArrayOutput() DbInstanceArrayOutput {
	return o
}

func (o DbInstanceArrayOutput) ToDbInstanceArrayOutputWithContext(ctx context.Context) DbInstanceArrayOutput {
	return o
}

func (o DbInstanceArrayOutput) Index(i pulumi.IntInput) DbInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DbInstance {
		return vs[0].([]*DbInstance)[vs[1].(int)]
	}).(DbInstanceOutput)
}

type DbInstanceMapOutput struct{ *pulumi.OutputState }

func (DbInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbInstance)(nil)).Elem()
}

func (o DbInstanceMapOutput) ToDbInstanceMapOutput() DbInstanceMapOutput {
	return o
}

func (o DbInstanceMapOutput) ToDbInstanceMapOutputWithContext(ctx context.Context) DbInstanceMapOutput {
	return o
}

func (o DbInstanceMapOutput) MapIndex(k pulumi.StringInput) DbInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DbInstance {
		return vs[0].(map[string]*DbInstance)[vs[1].(string)]
	}).(DbInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DbInstanceInput)(nil)).Elem(), &DbInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbInstanceArrayInput)(nil)).Elem(), DbInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbInstanceMapInput)(nil)).Elem(), DbInstanceMap{})
	pulumi.RegisterOutputType(DbInstanceOutput{})
	pulumi.RegisterOutputType(DbInstanceArrayOutput{})
	pulumi.RegisterOutputType(DbInstanceMapOutput{})
}
