// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package timestreaminfluxdb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an Amazon Timestream for InfluxDB read-replica cluster.
//
// > **NOTE:** This resource requires a subscription to [Timestream for InfluxDB Read Replicas (Add-On) on the AWS Marketplace](https://aws.amazon.com/marketplace/pp/prodview-lftzfxtb5xlv4?applicationId=AWS-Marketplace-Console&ref_=beagle&sr=0-2).
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/timestreaminfluxdb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := timestreaminfluxdb.NewDbCluster(ctx, "example", &timestreaminfluxdb.DbClusterArgs{
//				AllocatedStorage: pulumi.Int(20),
//				Bucket:           pulumi.String("example-bucket-name"),
//				DbInstanceType:   pulumi.String("db.influx.medium"),
//				FailoverMode:     pulumi.String("AUTOMATIC"),
//				Username:         pulumi.String("admin"),
//				Password:         pulumi.String("example-password"),
//				Port:             pulumi.Int(8086),
//				Organization:     pulumi.String("organization"),
//				VpcSubnetIds: pulumi.StringArray{
//					example1.Id,
//					example2.Id,
//				},
//				VpcSecurityGroupIds: pulumi.StringArray{
//					exampleAwsSecurityGroup.Id,
//				},
//				Name: pulumi.String("example-db-cluster"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Usage with Prerequisite Resources
//
// All Timestream for InfluxDB clusters require a VPC, at least two subnets, and a security group. The following example shows how these prerequisite resources can be created and used with `timestreaminfluxdb.DbCluster`.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/ec2"
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/timestreaminfluxdb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := ec2.NewVpc(ctx, "example", &ec2.VpcArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			example1, err := ec2.NewSubnet(ctx, "example_1", &ec2.SubnetArgs{
//				VpcId:     example.ID(),
//				CidrBlock: pulumi.String("10.0.1.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			example2, err := ec2.NewSubnet(ctx, "example_2", &ec2.SubnetArgs{
//				VpcId:     example.ID(),
//				CidrBlock: pulumi.String("10.0.2.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleSecurityGroup, err := ec2.NewSecurityGroup(ctx, "example", &ec2.SecurityGroupArgs{
//				Name:  pulumi.String("example"),
//				VpcId: example.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = timestreaminfluxdb.NewDbCluster(ctx, "example", &timestreaminfluxdb.DbClusterArgs{
//				AllocatedStorage: pulumi.Int(20),
//				Bucket:           pulumi.String("example-bucket-name"),
//				DbInstanceType:   pulumi.String("db.influx.medium"),
//				Username:         pulumi.String("admin"),
//				Password:         pulumi.String("example-password"),
//				Organization:     pulumi.String("organization"),
//				VpcSubnetIds: pulumi.StringArray{
//					example1.ID(),
//					example2.ID(),
//				},
//				VpcSecurityGroupIds: pulumi.StringArray{
//					exampleSecurityGroup.ID(),
//				},
//				Name: pulumi.String("example-db-cluster"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Usage with S3 Log Delivery Enabled
//
// You can use an S3 bucket to store logs generated by your Timestream for InfluxDB cluster. The following example shows what resources and arguments are required to configure an S3 bucket for logging, including the IAM policy that needs to be set in order to allow Timestream for InfluxDB to place logs in your S3 bucket. The configuration of the required VPC, security group, and subnets have been left out of the example for brevity.
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/iam"
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/s3"
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/timestreaminfluxdb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleBucket, err := s3.NewBucket(ctx, "example", &s3.BucketArgs{
//				Bucket:       pulumi.String("example-s3-bucket"),
//				ForceDestroy: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			example := iam.GetPolicyDocumentOutput(ctx, iam.GetPolicyDocumentOutputArgs{
//				Statements: iam.GetPolicyDocumentStatementArray{
//					&iam.GetPolicyDocumentStatementArgs{
//						Actions: pulumi.StringArray{
//							pulumi.String("s3:PutObject"),
//						},
//						Principals: iam.GetPolicyDocumentStatementPrincipalArray{
//							&iam.GetPolicyDocumentStatementPrincipalArgs{
//								Type: pulumi.String("Service"),
//								Identifiers: pulumi.StringArray{
//									pulumi.String("timestream-influxdb.amazonaws.com"),
//								},
//							},
//						},
//						Resources: pulumi.StringArray{
//							exampleBucket.Arn.ApplyT(func(arn string) (string, error) {
//								return fmt.Sprintf("%v/*", arn), nil
//							}).(pulumi.StringOutput),
//						},
//					},
//				},
//			}, nil)
//			_, err = s3.NewBucketPolicy(ctx, "example", &s3.BucketPolicyArgs{
//				Bucket: exampleBucket.ID(),
//				Policy: pulumi.String(example.ApplyT(func(example iam.GetPolicyDocumentResult) (*string, error) {
//					return &example.Json, nil
//				}).(pulumi.StringPtrOutput)),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = timestreaminfluxdb.NewDbCluster(ctx, "example", &timestreaminfluxdb.DbClusterArgs{
//				AllocatedStorage: pulumi.Int(20),
//				Bucket:           pulumi.String("example-bucket-name"),
//				DbInstanceType:   pulumi.String("db.influx.medium"),
//				Username:         pulumi.String("admin"),
//				Password:         pulumi.String("example-password"),
//				Organization:     pulumi.String("organization"),
//				VpcSubnetIds: pulumi.StringArray{
//					example1.Id,
//					example2.Id,
//				},
//				VpcSecurityGroupIds: pulumi.StringArray{
//					exampleAwsSecurityGroup.Id,
//				},
//				Name: pulumi.String("example-db-cluster"),
//				LogDeliveryConfiguration: &timestreaminfluxdb.DbClusterLogDeliveryConfigurationArgs{
//					S3Configuration: &timestreaminfluxdb.DbClusterLogDeliveryConfigurationS3ConfigurationArgs{
//						BucketName: exampleBucket.Bucket,
//						Enabled:    pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Timestream for InfluxDB cluster using its identifier. For example:
//
// ```sh
// $ pulumi import aws:timestreaminfluxdb/dbCluster:DbCluster example 12345abcde
// ```
type DbCluster struct {
	pulumi.CustomResourceState

	// Amount of storage in GiB (gibibytes). The minimum value is `20`, the maximum value is `16384`. The argument `dbStorageType` places restrictions on this argument's minimum value. The following is a list of `dbStorageType` values and the corresponding minimum value for `allocatedStorage`: ` "InfluxIOIncludedT1":  `20` ,  `"InfluxIOIncludedT2" and ` "InfluxIOIncludedT3":  `400`.
	AllocatedStorage pulumi.IntOutput `pulumi:"allocatedStorage"`
	// ARN of the Timestream for InfluxDB cluster.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Name of the initial InfluxDB bucket. All InfluxDB data is stored in a bucket. A bucket combines the concept of a database and a retention period (the duration of time that each data point persists). A bucket belongs to an organization. Along with `organization`, `username`, and `password`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// Timestream for InfluxDB DB instance type to run InfluxDB on. Valid options are: `"db.influx.medium"`, `"db.influx.large"`, `"db.influx.xlarge"`, `"db.influx.2xlarge"`, `"db.influx.4xlarge"`, `"db.influx.8xlarge"`, `"db.influx.12xlarge"`, and `"db.influx.16xlarge"`. This argument is updatable.
	DbInstanceType pulumi.StringOutput `pulumi:"dbInstanceType"`
	// ID of the DB parameter group assigned to your cluster. This argument is updatable. If added to an existing Timestream for InfluxDB cluster or given a new value, will cause an in-place update to the cluster. However, if a cluster already has a value for `dbParameterGroupIdentifier`, removing `dbParameterGroupIdentifier` will cause the cluster to be destroyed and recreated.
	DbParameterGroupIdentifier pulumi.StringPtrOutput `pulumi:"dbParameterGroupIdentifier"`
	// Timestream for InfluxDB DB storage type to read and write InfluxDB data. You can choose between 3 different types of provisioned Influx IOPS included storage according to your workloads requirements: Influx IO Included 3000 IOPS, Influx IO Included 12000 IOPS, Influx IO Included 16000 IOPS. Valid options are: `"InfluxIOIncludedT1"`, `"InfluxIOIncludedT2"`, and `"InfluxIOIncludedT3"`. If you use ` "InfluxIOIncludedT2" or "InfluxIOIncludedT3", the minimum value for  `allocatedStorage` is 400.
	DbStorageType pulumi.StringOutput `pulumi:"dbStorageType"`
	// Specifies the type of cluster to create. Valid options are: `"MULTI_NODE_READ_REPLICAS"`.
	DeploymentType pulumi.StringOutput `pulumi:"deploymentType"`
	// Endpoint used to connect to InfluxDB. The default InfluxDB port is 8086.
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// Specifies the behavior of failure recovery when the primary node of the cluster fails. Valid options are: `"AUTOMATIC"` and `"NO_FAILOVER"`.
	FailoverMode pulumi.StringOutput `pulumi:"failoverMode"`
	// ARN of the AWS Secrets Manager secret containing the initial InfluxDB authorization parameters. The secret value is a JSON formatted key-value pair holding InfluxDB authorization values: organization, bucket, username, and password.
	InfluxAuthParametersSecretArn pulumi.StringOutput `pulumi:"influxAuthParametersSecretArn"`
	// Configuration for sending InfluxDB engine logs to a specified S3 bucket. This argument is updatable.
	LogDeliveryConfiguration DbClusterLogDeliveryConfigurationPtrOutput `pulumi:"logDeliveryConfiguration"`
	// Name that uniquely identifies the DB cluster when interacting with the Amazon Timestream for InfluxDB API and CLI commands. This name will also be a prefix included in the endpoint. Cluster names must be unique per customer and per region. The argument must start with a letter, cannot contain consecutive hyphens (`-`) and cannot end with a hyphen.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies whether the network type of the Timestream for InfluxDB cluster is IPV4, which can communicate over IPv4 protocol only, or DUAL, which can communicate over both IPv4 and IPv6 protocols.
	NetworkType pulumi.StringOutput `pulumi:"networkType"`
	// Name of the initial organization for the initial admin user in InfluxDB. An InfluxDB organization is a workspace for a group of users. Along with `bucket`, `username`, and `password`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Organization pulumi.StringOutput `pulumi:"organization"`
	// Password of the initial admin user created in InfluxDB. This password will allow you to access the InfluxDB UI to perform various administrative tasks and also use the InfluxDB CLI to create an operator token. Along with `bucket`, `username`, and `organization`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Password pulumi.StringOutput `pulumi:"password"`
	// The port on which the cluster accepts connections. Valid values: `1024`-`65535`. Cannot be `2375`-`2376`, `7788`-`7799`, `8090`, or `51678`-`51680`. This argument is updatable.
	Port pulumi.IntOutput `pulumi:"port"`
	// Configures the DB cluster with a public IP to facilitate access. Other resources, such as a VPC, a subnet, an internet gateway, and a route table with routes, are also required to enabled public access, in addition to this argument. See "Usage with Public Internet Access Enabled" for an example configuration with all required resources for public internet access.
	PubliclyAccessible pulumi.BoolOutput `pulumi:"publiclyAccessible"`
	// The endpoint used to connect to the Timestream for InfluxDB cluster for read-only operations.
	ReaderEndpoint pulumi.StringOutput `pulumi:"readerEndpoint"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
	// Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll  pulumi.StringMapOutput     `pulumi:"tagsAll"`
	Timeouts DbClusterTimeoutsPtrOutput `pulumi:"timeouts"`
	// Username of the initial admin user created in InfluxDB. Must start with a letter and can't end with a hyphen or contain two consecutive hyphens. This username will allow you to access the InfluxDB UI to perform various administrative tasks and also use the InfluxDB CLI to create an operator token. Along with `bucket`, `organization`, and `password`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Username pulumi.StringOutput `pulumi:"username"`
	// List of VPC security group IDs to associate with the cluster.
	VpcSecurityGroupIds pulumi.StringArrayOutput `pulumi:"vpcSecurityGroupIds"`
	// List of VPC subnet IDs to associate with the cluster. Provide at least two VPC subnet IDs in different availability zones when deploying with a Multi-AZ standby.
	//
	// The following arguments are optional:
	VpcSubnetIds pulumi.StringArrayOutput `pulumi:"vpcSubnetIds"`
}

// NewDbCluster registers a new resource with the given unique name, arguments, and options.
func NewDbCluster(ctx *pulumi.Context,
	name string, args *DbClusterArgs, opts ...pulumi.ResourceOption) (*DbCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AllocatedStorage == nil {
		return nil, errors.New("invalid value for required argument 'AllocatedStorage'")
	}
	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.DbInstanceType == nil {
		return nil, errors.New("invalid value for required argument 'DbInstanceType'")
	}
	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.VpcSecurityGroupIds == nil {
		return nil, errors.New("invalid value for required argument 'VpcSecurityGroupIds'")
	}
	if args.VpcSubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'VpcSubnetIds'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DbCluster
	err := ctx.RegisterResource("aws:timestreaminfluxdb/dbCluster:DbCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDbCluster gets an existing DbCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDbCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DbClusterState, opts ...pulumi.ResourceOption) (*DbCluster, error) {
	var resource DbCluster
	err := ctx.ReadResource("aws:timestreaminfluxdb/dbCluster:DbCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DbCluster resources.
type dbClusterState struct {
	// Amount of storage in GiB (gibibytes). The minimum value is `20`, the maximum value is `16384`. The argument `dbStorageType` places restrictions on this argument's minimum value. The following is a list of `dbStorageType` values and the corresponding minimum value for `allocatedStorage`: ` "InfluxIOIncludedT1":  `20` ,  `"InfluxIOIncludedT2" and ` "InfluxIOIncludedT3":  `400`.
	AllocatedStorage *int `pulumi:"allocatedStorage"`
	// ARN of the Timestream for InfluxDB cluster.
	Arn *string `pulumi:"arn"`
	// Name of the initial InfluxDB bucket. All InfluxDB data is stored in a bucket. A bucket combines the concept of a database and a retention period (the duration of time that each data point persists). A bucket belongs to an organization. Along with `organization`, `username`, and `password`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Bucket *string `pulumi:"bucket"`
	// Timestream for InfluxDB DB instance type to run InfluxDB on. Valid options are: `"db.influx.medium"`, `"db.influx.large"`, `"db.influx.xlarge"`, `"db.influx.2xlarge"`, `"db.influx.4xlarge"`, `"db.influx.8xlarge"`, `"db.influx.12xlarge"`, and `"db.influx.16xlarge"`. This argument is updatable.
	DbInstanceType *string `pulumi:"dbInstanceType"`
	// ID of the DB parameter group assigned to your cluster. This argument is updatable. If added to an existing Timestream for InfluxDB cluster or given a new value, will cause an in-place update to the cluster. However, if a cluster already has a value for `dbParameterGroupIdentifier`, removing `dbParameterGroupIdentifier` will cause the cluster to be destroyed and recreated.
	DbParameterGroupIdentifier *string `pulumi:"dbParameterGroupIdentifier"`
	// Timestream for InfluxDB DB storage type to read and write InfluxDB data. You can choose between 3 different types of provisioned Influx IOPS included storage according to your workloads requirements: Influx IO Included 3000 IOPS, Influx IO Included 12000 IOPS, Influx IO Included 16000 IOPS. Valid options are: `"InfluxIOIncludedT1"`, `"InfluxIOIncludedT2"`, and `"InfluxIOIncludedT3"`. If you use ` "InfluxIOIncludedT2" or "InfluxIOIncludedT3", the minimum value for  `allocatedStorage` is 400.
	DbStorageType *string `pulumi:"dbStorageType"`
	// Specifies the type of cluster to create. Valid options are: `"MULTI_NODE_READ_REPLICAS"`.
	DeploymentType *string `pulumi:"deploymentType"`
	// Endpoint used to connect to InfluxDB. The default InfluxDB port is 8086.
	Endpoint *string `pulumi:"endpoint"`
	// Specifies the behavior of failure recovery when the primary node of the cluster fails. Valid options are: `"AUTOMATIC"` and `"NO_FAILOVER"`.
	FailoverMode *string `pulumi:"failoverMode"`
	// ARN of the AWS Secrets Manager secret containing the initial InfluxDB authorization parameters. The secret value is a JSON formatted key-value pair holding InfluxDB authorization values: organization, bucket, username, and password.
	InfluxAuthParametersSecretArn *string `pulumi:"influxAuthParametersSecretArn"`
	// Configuration for sending InfluxDB engine logs to a specified S3 bucket. This argument is updatable.
	LogDeliveryConfiguration *DbClusterLogDeliveryConfiguration `pulumi:"logDeliveryConfiguration"`
	// Name that uniquely identifies the DB cluster when interacting with the Amazon Timestream for InfluxDB API and CLI commands. This name will also be a prefix included in the endpoint. Cluster names must be unique per customer and per region. The argument must start with a letter, cannot contain consecutive hyphens (`-`) and cannot end with a hyphen.
	Name *string `pulumi:"name"`
	// Specifies whether the network type of the Timestream for InfluxDB cluster is IPV4, which can communicate over IPv4 protocol only, or DUAL, which can communicate over both IPv4 and IPv6 protocols.
	NetworkType *string `pulumi:"networkType"`
	// Name of the initial organization for the initial admin user in InfluxDB. An InfluxDB organization is a workspace for a group of users. Along with `bucket`, `username`, and `password`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Organization *string `pulumi:"organization"`
	// Password of the initial admin user created in InfluxDB. This password will allow you to access the InfluxDB UI to perform various administrative tasks and also use the InfluxDB CLI to create an operator token. Along with `bucket`, `username`, and `organization`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Password *string `pulumi:"password"`
	// The port on which the cluster accepts connections. Valid values: `1024`-`65535`. Cannot be `2375`-`2376`, `7788`-`7799`, `8090`, or `51678`-`51680`. This argument is updatable.
	Port *int `pulumi:"port"`
	// Configures the DB cluster with a public IP to facilitate access. Other resources, such as a VPC, a subnet, an internet gateway, and a route table with routes, are also required to enabled public access, in addition to this argument. See "Usage with Public Internet Access Enabled" for an example configuration with all required resources for public internet access.
	PubliclyAccessible *bool `pulumi:"publiclyAccessible"`
	// The endpoint used to connect to the Timestream for InfluxDB cluster for read-only operations.
	ReaderEndpoint *string `pulumi:"readerEndpoint"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll  map[string]string  `pulumi:"tagsAll"`
	Timeouts *DbClusterTimeouts `pulumi:"timeouts"`
	// Username of the initial admin user created in InfluxDB. Must start with a letter and can't end with a hyphen or contain two consecutive hyphens. This username will allow you to access the InfluxDB UI to perform various administrative tasks and also use the InfluxDB CLI to create an operator token. Along with `bucket`, `organization`, and `password`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Username *string `pulumi:"username"`
	// List of VPC security group IDs to associate with the cluster.
	VpcSecurityGroupIds []string `pulumi:"vpcSecurityGroupIds"`
	// List of VPC subnet IDs to associate with the cluster. Provide at least two VPC subnet IDs in different availability zones when deploying with a Multi-AZ standby.
	//
	// The following arguments are optional:
	VpcSubnetIds []string `pulumi:"vpcSubnetIds"`
}

type DbClusterState struct {
	// Amount of storage in GiB (gibibytes). The minimum value is `20`, the maximum value is `16384`. The argument `dbStorageType` places restrictions on this argument's minimum value. The following is a list of `dbStorageType` values and the corresponding minimum value for `allocatedStorage`: ` "InfluxIOIncludedT1":  `20` ,  `"InfluxIOIncludedT2" and ` "InfluxIOIncludedT3":  `400`.
	AllocatedStorage pulumi.IntPtrInput
	// ARN of the Timestream for InfluxDB cluster.
	Arn pulumi.StringPtrInput
	// Name of the initial InfluxDB bucket. All InfluxDB data is stored in a bucket. A bucket combines the concept of a database and a retention period (the duration of time that each data point persists). A bucket belongs to an organization. Along with `organization`, `username`, and `password`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Bucket pulumi.StringPtrInput
	// Timestream for InfluxDB DB instance type to run InfluxDB on. Valid options are: `"db.influx.medium"`, `"db.influx.large"`, `"db.influx.xlarge"`, `"db.influx.2xlarge"`, `"db.influx.4xlarge"`, `"db.influx.8xlarge"`, `"db.influx.12xlarge"`, and `"db.influx.16xlarge"`. This argument is updatable.
	DbInstanceType pulumi.StringPtrInput
	// ID of the DB parameter group assigned to your cluster. This argument is updatable. If added to an existing Timestream for InfluxDB cluster or given a new value, will cause an in-place update to the cluster. However, if a cluster already has a value for `dbParameterGroupIdentifier`, removing `dbParameterGroupIdentifier` will cause the cluster to be destroyed and recreated.
	DbParameterGroupIdentifier pulumi.StringPtrInput
	// Timestream for InfluxDB DB storage type to read and write InfluxDB data. You can choose between 3 different types of provisioned Influx IOPS included storage according to your workloads requirements: Influx IO Included 3000 IOPS, Influx IO Included 12000 IOPS, Influx IO Included 16000 IOPS. Valid options are: `"InfluxIOIncludedT1"`, `"InfluxIOIncludedT2"`, and `"InfluxIOIncludedT3"`. If you use ` "InfluxIOIncludedT2" or "InfluxIOIncludedT3", the minimum value for  `allocatedStorage` is 400.
	DbStorageType pulumi.StringPtrInput
	// Specifies the type of cluster to create. Valid options are: `"MULTI_NODE_READ_REPLICAS"`.
	DeploymentType pulumi.StringPtrInput
	// Endpoint used to connect to InfluxDB. The default InfluxDB port is 8086.
	Endpoint pulumi.StringPtrInput
	// Specifies the behavior of failure recovery when the primary node of the cluster fails. Valid options are: `"AUTOMATIC"` and `"NO_FAILOVER"`.
	FailoverMode pulumi.StringPtrInput
	// ARN of the AWS Secrets Manager secret containing the initial InfluxDB authorization parameters. The secret value is a JSON formatted key-value pair holding InfluxDB authorization values: organization, bucket, username, and password.
	InfluxAuthParametersSecretArn pulumi.StringPtrInput
	// Configuration for sending InfluxDB engine logs to a specified S3 bucket. This argument is updatable.
	LogDeliveryConfiguration DbClusterLogDeliveryConfigurationPtrInput
	// Name that uniquely identifies the DB cluster when interacting with the Amazon Timestream for InfluxDB API and CLI commands. This name will also be a prefix included in the endpoint. Cluster names must be unique per customer and per region. The argument must start with a letter, cannot contain consecutive hyphens (`-`) and cannot end with a hyphen.
	Name pulumi.StringPtrInput
	// Specifies whether the network type of the Timestream for InfluxDB cluster is IPV4, which can communicate over IPv4 protocol only, or DUAL, which can communicate over both IPv4 and IPv6 protocols.
	NetworkType pulumi.StringPtrInput
	// Name of the initial organization for the initial admin user in InfluxDB. An InfluxDB organization is a workspace for a group of users. Along with `bucket`, `username`, and `password`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Organization pulumi.StringPtrInput
	// Password of the initial admin user created in InfluxDB. This password will allow you to access the InfluxDB UI to perform various administrative tasks and also use the InfluxDB CLI to create an operator token. Along with `bucket`, `username`, and `organization`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Password pulumi.StringPtrInput
	// The port on which the cluster accepts connections. Valid values: `1024`-`65535`. Cannot be `2375`-`2376`, `7788`-`7799`, `8090`, or `51678`-`51680`. This argument is updatable.
	Port pulumi.IntPtrInput
	// Configures the DB cluster with a public IP to facilitate access. Other resources, such as a VPC, a subnet, an internet gateway, and a route table with routes, are also required to enabled public access, in addition to this argument. See "Usage with Public Internet Access Enabled" for an example configuration with all required resources for public internet access.
	PubliclyAccessible pulumi.BoolPtrInput
	// The endpoint used to connect to the Timestream for InfluxDB cluster for read-only operations.
	ReaderEndpoint pulumi.StringPtrInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll  pulumi.StringMapInput
	Timeouts DbClusterTimeoutsPtrInput
	// Username of the initial admin user created in InfluxDB. Must start with a letter and can't end with a hyphen or contain two consecutive hyphens. This username will allow you to access the InfluxDB UI to perform various administrative tasks and also use the InfluxDB CLI to create an operator token. Along with `bucket`, `organization`, and `password`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Username pulumi.StringPtrInput
	// List of VPC security group IDs to associate with the cluster.
	VpcSecurityGroupIds pulumi.StringArrayInput
	// List of VPC subnet IDs to associate with the cluster. Provide at least two VPC subnet IDs in different availability zones when deploying with a Multi-AZ standby.
	//
	// The following arguments are optional:
	VpcSubnetIds pulumi.StringArrayInput
}

func (DbClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*dbClusterState)(nil)).Elem()
}

type dbClusterArgs struct {
	// Amount of storage in GiB (gibibytes). The minimum value is `20`, the maximum value is `16384`. The argument `dbStorageType` places restrictions on this argument's minimum value. The following is a list of `dbStorageType` values and the corresponding minimum value for `allocatedStorage`: ` "InfluxIOIncludedT1":  `20` ,  `"InfluxIOIncludedT2" and ` "InfluxIOIncludedT3":  `400`.
	AllocatedStorage int `pulumi:"allocatedStorage"`
	// Name of the initial InfluxDB bucket. All InfluxDB data is stored in a bucket. A bucket combines the concept of a database and a retention period (the duration of time that each data point persists). A bucket belongs to an organization. Along with `organization`, `username`, and `password`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Bucket string `pulumi:"bucket"`
	// Timestream for InfluxDB DB instance type to run InfluxDB on. Valid options are: `"db.influx.medium"`, `"db.influx.large"`, `"db.influx.xlarge"`, `"db.influx.2xlarge"`, `"db.influx.4xlarge"`, `"db.influx.8xlarge"`, `"db.influx.12xlarge"`, and `"db.influx.16xlarge"`. This argument is updatable.
	DbInstanceType string `pulumi:"dbInstanceType"`
	// ID of the DB parameter group assigned to your cluster. This argument is updatable. If added to an existing Timestream for InfluxDB cluster or given a new value, will cause an in-place update to the cluster. However, if a cluster already has a value for `dbParameterGroupIdentifier`, removing `dbParameterGroupIdentifier` will cause the cluster to be destroyed and recreated.
	DbParameterGroupIdentifier *string `pulumi:"dbParameterGroupIdentifier"`
	// Timestream for InfluxDB DB storage type to read and write InfluxDB data. You can choose between 3 different types of provisioned Influx IOPS included storage according to your workloads requirements: Influx IO Included 3000 IOPS, Influx IO Included 12000 IOPS, Influx IO Included 16000 IOPS. Valid options are: `"InfluxIOIncludedT1"`, `"InfluxIOIncludedT2"`, and `"InfluxIOIncludedT3"`. If you use ` "InfluxIOIncludedT2" or "InfluxIOIncludedT3", the minimum value for  `allocatedStorage` is 400.
	DbStorageType *string `pulumi:"dbStorageType"`
	// Specifies the type of cluster to create. Valid options are: `"MULTI_NODE_READ_REPLICAS"`.
	DeploymentType *string `pulumi:"deploymentType"`
	// Specifies the behavior of failure recovery when the primary node of the cluster fails. Valid options are: `"AUTOMATIC"` and `"NO_FAILOVER"`.
	FailoverMode *string `pulumi:"failoverMode"`
	// Configuration for sending InfluxDB engine logs to a specified S3 bucket. This argument is updatable.
	LogDeliveryConfiguration *DbClusterLogDeliveryConfiguration `pulumi:"logDeliveryConfiguration"`
	// Name that uniquely identifies the DB cluster when interacting with the Amazon Timestream for InfluxDB API and CLI commands. This name will also be a prefix included in the endpoint. Cluster names must be unique per customer and per region. The argument must start with a letter, cannot contain consecutive hyphens (`-`) and cannot end with a hyphen.
	Name *string `pulumi:"name"`
	// Specifies whether the network type of the Timestream for InfluxDB cluster is IPV4, which can communicate over IPv4 protocol only, or DUAL, which can communicate over both IPv4 and IPv6 protocols.
	NetworkType *string `pulumi:"networkType"`
	// Name of the initial organization for the initial admin user in InfluxDB. An InfluxDB organization is a workspace for a group of users. Along with `bucket`, `username`, and `password`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Organization string `pulumi:"organization"`
	// Password of the initial admin user created in InfluxDB. This password will allow you to access the InfluxDB UI to perform various administrative tasks and also use the InfluxDB CLI to create an operator token. Along with `bucket`, `username`, and `organization`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Password string `pulumi:"password"`
	// The port on which the cluster accepts connections. Valid values: `1024`-`65535`. Cannot be `2375`-`2376`, `7788`-`7799`, `8090`, or `51678`-`51680`. This argument is updatable.
	Port *int `pulumi:"port"`
	// Configures the DB cluster with a public IP to facilitate access. Other resources, such as a VPC, a subnet, an internet gateway, and a route table with routes, are also required to enabled public access, in addition to this argument. See "Usage with Public Internet Access Enabled" for an example configuration with all required resources for public internet access.
	PubliclyAccessible *bool `pulumi:"publiclyAccessible"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     map[string]string  `pulumi:"tags"`
	Timeouts *DbClusterTimeouts `pulumi:"timeouts"`
	// Username of the initial admin user created in InfluxDB. Must start with a letter and can't end with a hyphen or contain two consecutive hyphens. This username will allow you to access the InfluxDB UI to perform various administrative tasks and also use the InfluxDB CLI to create an operator token. Along with `bucket`, `organization`, and `password`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Username string `pulumi:"username"`
	// List of VPC security group IDs to associate with the cluster.
	VpcSecurityGroupIds []string `pulumi:"vpcSecurityGroupIds"`
	// List of VPC subnet IDs to associate with the cluster. Provide at least two VPC subnet IDs in different availability zones when deploying with a Multi-AZ standby.
	//
	// The following arguments are optional:
	VpcSubnetIds []string `pulumi:"vpcSubnetIds"`
}

// The set of arguments for constructing a DbCluster resource.
type DbClusterArgs struct {
	// Amount of storage in GiB (gibibytes). The minimum value is `20`, the maximum value is `16384`. The argument `dbStorageType` places restrictions on this argument's minimum value. The following is a list of `dbStorageType` values and the corresponding minimum value for `allocatedStorage`: ` "InfluxIOIncludedT1":  `20` ,  `"InfluxIOIncludedT2" and ` "InfluxIOIncludedT3":  `400`.
	AllocatedStorage pulumi.IntInput
	// Name of the initial InfluxDB bucket. All InfluxDB data is stored in a bucket. A bucket combines the concept of a database and a retention period (the duration of time that each data point persists). A bucket belongs to an organization. Along with `organization`, `username`, and `password`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Bucket pulumi.StringInput
	// Timestream for InfluxDB DB instance type to run InfluxDB on. Valid options are: `"db.influx.medium"`, `"db.influx.large"`, `"db.influx.xlarge"`, `"db.influx.2xlarge"`, `"db.influx.4xlarge"`, `"db.influx.8xlarge"`, `"db.influx.12xlarge"`, and `"db.influx.16xlarge"`. This argument is updatable.
	DbInstanceType pulumi.StringInput
	// ID of the DB parameter group assigned to your cluster. This argument is updatable. If added to an existing Timestream for InfluxDB cluster or given a new value, will cause an in-place update to the cluster. However, if a cluster already has a value for `dbParameterGroupIdentifier`, removing `dbParameterGroupIdentifier` will cause the cluster to be destroyed and recreated.
	DbParameterGroupIdentifier pulumi.StringPtrInput
	// Timestream for InfluxDB DB storage type to read and write InfluxDB data. You can choose between 3 different types of provisioned Influx IOPS included storage according to your workloads requirements: Influx IO Included 3000 IOPS, Influx IO Included 12000 IOPS, Influx IO Included 16000 IOPS. Valid options are: `"InfluxIOIncludedT1"`, `"InfluxIOIncludedT2"`, and `"InfluxIOIncludedT3"`. If you use ` "InfluxIOIncludedT2" or "InfluxIOIncludedT3", the minimum value for  `allocatedStorage` is 400.
	DbStorageType pulumi.StringPtrInput
	// Specifies the type of cluster to create. Valid options are: `"MULTI_NODE_READ_REPLICAS"`.
	DeploymentType pulumi.StringPtrInput
	// Specifies the behavior of failure recovery when the primary node of the cluster fails. Valid options are: `"AUTOMATIC"` and `"NO_FAILOVER"`.
	FailoverMode pulumi.StringPtrInput
	// Configuration for sending InfluxDB engine logs to a specified S3 bucket. This argument is updatable.
	LogDeliveryConfiguration DbClusterLogDeliveryConfigurationPtrInput
	// Name that uniquely identifies the DB cluster when interacting with the Amazon Timestream for InfluxDB API and CLI commands. This name will also be a prefix included in the endpoint. Cluster names must be unique per customer and per region. The argument must start with a letter, cannot contain consecutive hyphens (`-`) and cannot end with a hyphen.
	Name pulumi.StringPtrInput
	// Specifies whether the network type of the Timestream for InfluxDB cluster is IPV4, which can communicate over IPv4 protocol only, or DUAL, which can communicate over both IPv4 and IPv6 protocols.
	NetworkType pulumi.StringPtrInput
	// Name of the initial organization for the initial admin user in InfluxDB. An InfluxDB organization is a workspace for a group of users. Along with `bucket`, `username`, and `password`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Organization pulumi.StringInput
	// Password of the initial admin user created in InfluxDB. This password will allow you to access the InfluxDB UI to perform various administrative tasks and also use the InfluxDB CLI to create an operator token. Along with `bucket`, `username`, and `organization`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Password pulumi.StringInput
	// The port on which the cluster accepts connections. Valid values: `1024`-`65535`. Cannot be `2375`-`2376`, `7788`-`7799`, `8090`, or `51678`-`51680`. This argument is updatable.
	Port pulumi.IntPtrInput
	// Configures the DB cluster with a public IP to facilitate access. Other resources, such as a VPC, a subnet, an internet gateway, and a route table with routes, are also required to enabled public access, in addition to this argument. See "Usage with Public Internet Access Enabled" for an example configuration with all required resources for public internet access.
	PubliclyAccessible pulumi.BoolPtrInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     pulumi.StringMapInput
	Timeouts DbClusterTimeoutsPtrInput
	// Username of the initial admin user created in InfluxDB. Must start with a letter and can't end with a hyphen or contain two consecutive hyphens. This username will allow you to access the InfluxDB UI to perform various administrative tasks and also use the InfluxDB CLI to create an operator token. Along with `bucket`, `organization`, and `password`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
	Username pulumi.StringInput
	// List of VPC security group IDs to associate with the cluster.
	VpcSecurityGroupIds pulumi.StringArrayInput
	// List of VPC subnet IDs to associate with the cluster. Provide at least two VPC subnet IDs in different availability zones when deploying with a Multi-AZ standby.
	//
	// The following arguments are optional:
	VpcSubnetIds pulumi.StringArrayInput
}

func (DbClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dbClusterArgs)(nil)).Elem()
}

type DbClusterInput interface {
	pulumi.Input

	ToDbClusterOutput() DbClusterOutput
	ToDbClusterOutputWithContext(ctx context.Context) DbClusterOutput
}

func (*DbCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**DbCluster)(nil)).Elem()
}

func (i *DbCluster) ToDbClusterOutput() DbClusterOutput {
	return i.ToDbClusterOutputWithContext(context.Background())
}

func (i *DbCluster) ToDbClusterOutputWithContext(ctx context.Context) DbClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbClusterOutput)
}

// DbClusterArrayInput is an input type that accepts DbClusterArray and DbClusterArrayOutput values.
// You can construct a concrete instance of `DbClusterArrayInput` via:
//
//	DbClusterArray{ DbClusterArgs{...} }
type DbClusterArrayInput interface {
	pulumi.Input

	ToDbClusterArrayOutput() DbClusterArrayOutput
	ToDbClusterArrayOutputWithContext(context.Context) DbClusterArrayOutput
}

type DbClusterArray []DbClusterInput

func (DbClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbCluster)(nil)).Elem()
}

func (i DbClusterArray) ToDbClusterArrayOutput() DbClusterArrayOutput {
	return i.ToDbClusterArrayOutputWithContext(context.Background())
}

func (i DbClusterArray) ToDbClusterArrayOutputWithContext(ctx context.Context) DbClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbClusterArrayOutput)
}

// DbClusterMapInput is an input type that accepts DbClusterMap and DbClusterMapOutput values.
// You can construct a concrete instance of `DbClusterMapInput` via:
//
//	DbClusterMap{ "key": DbClusterArgs{...} }
type DbClusterMapInput interface {
	pulumi.Input

	ToDbClusterMapOutput() DbClusterMapOutput
	ToDbClusterMapOutputWithContext(context.Context) DbClusterMapOutput
}

type DbClusterMap map[string]DbClusterInput

func (DbClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbCluster)(nil)).Elem()
}

func (i DbClusterMap) ToDbClusterMapOutput() DbClusterMapOutput {
	return i.ToDbClusterMapOutputWithContext(context.Background())
}

func (i DbClusterMap) ToDbClusterMapOutputWithContext(ctx context.Context) DbClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbClusterMapOutput)
}

type DbClusterOutput struct{ *pulumi.OutputState }

func (DbClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DbCluster)(nil)).Elem()
}

func (o DbClusterOutput) ToDbClusterOutput() DbClusterOutput {
	return o
}

func (o DbClusterOutput) ToDbClusterOutputWithContext(ctx context.Context) DbClusterOutput {
	return o
}

// Amount of storage in GiB (gibibytes). The minimum value is `20`, the maximum value is `16384`. The argument `dbStorageType` places restrictions on this argument's minimum value. The following is a list of `dbStorageType` values and the corresponding minimum value for `allocatedStorage`: ` "InfluxIOIncludedT1":  `20` ,  `"InfluxIOIncludedT2" and ` "InfluxIOIncludedT3":  `400`.
func (o DbClusterOutput) AllocatedStorage() pulumi.IntOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.IntOutput { return v.AllocatedStorage }).(pulumi.IntOutput)
}

// ARN of the Timestream for InfluxDB cluster.
func (o DbClusterOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Name of the initial InfluxDB bucket. All InfluxDB data is stored in a bucket. A bucket combines the concept of a database and a retention period (the duration of time that each data point persists). A bucket belongs to an organization. Along with `organization`, `username`, and `password`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
func (o DbClusterOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// Timestream for InfluxDB DB instance type to run InfluxDB on. Valid options are: `"db.influx.medium"`, `"db.influx.large"`, `"db.influx.xlarge"`, `"db.influx.2xlarge"`, `"db.influx.4xlarge"`, `"db.influx.8xlarge"`, `"db.influx.12xlarge"`, and `"db.influx.16xlarge"`. This argument is updatable.
func (o DbClusterOutput) DbInstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.DbInstanceType }).(pulumi.StringOutput)
}

// ID of the DB parameter group assigned to your cluster. This argument is updatable. If added to an existing Timestream for InfluxDB cluster or given a new value, will cause an in-place update to the cluster. However, if a cluster already has a value for `dbParameterGroupIdentifier`, removing `dbParameterGroupIdentifier` will cause the cluster to be destroyed and recreated.
func (o DbClusterOutput) DbParameterGroupIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringPtrOutput { return v.DbParameterGroupIdentifier }).(pulumi.StringPtrOutput)
}

// Timestream for InfluxDB DB storage type to read and write InfluxDB data. You can choose between 3 different types of provisioned Influx IOPS included storage according to your workloads requirements: Influx IO Included 3000 IOPS, Influx IO Included 12000 IOPS, Influx IO Included 16000 IOPS. Valid options are: `"InfluxIOIncludedT1"`, `"InfluxIOIncludedT2"`, and `"InfluxIOIncludedT3"`. If you use ` "InfluxIOIncludedT2" or "InfluxIOIncludedT3", the minimum value for  `allocatedStorage` is 400.
func (o DbClusterOutput) DbStorageType() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.DbStorageType }).(pulumi.StringOutput)
}

// Specifies the type of cluster to create. Valid options are: `"MULTI_NODE_READ_REPLICAS"`.
func (o DbClusterOutput) DeploymentType() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.DeploymentType }).(pulumi.StringOutput)
}

// Endpoint used to connect to InfluxDB. The default InfluxDB port is 8086.
func (o DbClusterOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// Specifies the behavior of failure recovery when the primary node of the cluster fails. Valid options are: `"AUTOMATIC"` and `"NO_FAILOVER"`.
func (o DbClusterOutput) FailoverMode() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.FailoverMode }).(pulumi.StringOutput)
}

// ARN of the AWS Secrets Manager secret containing the initial InfluxDB authorization parameters. The secret value is a JSON formatted key-value pair holding InfluxDB authorization values: organization, bucket, username, and password.
func (o DbClusterOutput) InfluxAuthParametersSecretArn() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.InfluxAuthParametersSecretArn }).(pulumi.StringOutput)
}

// Configuration for sending InfluxDB engine logs to a specified S3 bucket. This argument is updatable.
func (o DbClusterOutput) LogDeliveryConfiguration() DbClusterLogDeliveryConfigurationPtrOutput {
	return o.ApplyT(func(v *DbCluster) DbClusterLogDeliveryConfigurationPtrOutput { return v.LogDeliveryConfiguration }).(DbClusterLogDeliveryConfigurationPtrOutput)
}

// Name that uniquely identifies the DB cluster when interacting with the Amazon Timestream for InfluxDB API and CLI commands. This name will also be a prefix included in the endpoint. Cluster names must be unique per customer and per region. The argument must start with a letter, cannot contain consecutive hyphens (`-`) and cannot end with a hyphen.
func (o DbClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies whether the network type of the Timestream for InfluxDB cluster is IPV4, which can communicate over IPv4 protocol only, or DUAL, which can communicate over both IPv4 and IPv6 protocols.
func (o DbClusterOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.NetworkType }).(pulumi.StringOutput)
}

// Name of the initial organization for the initial admin user in InfluxDB. An InfluxDB organization is a workspace for a group of users. Along with `bucket`, `username`, and `password`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
func (o DbClusterOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

// Password of the initial admin user created in InfluxDB. This password will allow you to access the InfluxDB UI to perform various administrative tasks and also use the InfluxDB CLI to create an operator token. Along with `bucket`, `username`, and `organization`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
func (o DbClusterOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// The port on which the cluster accepts connections. Valid values: `1024`-`65535`. Cannot be `2375`-`2376`, `7788`-`7799`, `8090`, or `51678`-`51680`. This argument is updatable.
func (o DbClusterOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Configures the DB cluster with a public IP to facilitate access. Other resources, such as a VPC, a subnet, an internet gateway, and a route table with routes, are also required to enabled public access, in addition to this argument. See "Usage with Public Internet Access Enabled" for an example configuration with all required resources for public internet access.
func (o DbClusterOutput) PubliclyAccessible() pulumi.BoolOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.BoolOutput { return v.PubliclyAccessible }).(pulumi.BoolOutput)
}

// The endpoint used to connect to the Timestream for InfluxDB cluster for read-only operations.
func (o DbClusterOutput) ReaderEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.ReaderEndpoint }).(pulumi.StringOutput)
}

// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
func (o DbClusterOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o DbClusterOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o DbClusterOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o DbClusterOutput) Timeouts() DbClusterTimeoutsPtrOutput {
	return o.ApplyT(func(v *DbCluster) DbClusterTimeoutsPtrOutput { return v.Timeouts }).(DbClusterTimeoutsPtrOutput)
}

// Username of the initial admin user created in InfluxDB. Must start with a letter and can't end with a hyphen or contain two consecutive hyphens. This username will allow you to access the InfluxDB UI to perform various administrative tasks and also use the InfluxDB CLI to create an operator token. Along with `bucket`, `organization`, and `password`, this argument will be stored in the secret referred to by the `influxAuthParametersSecretArn` attribute.
func (o DbClusterOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

// List of VPC security group IDs to associate with the cluster.
func (o DbClusterOutput) VpcSecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringArrayOutput { return v.VpcSecurityGroupIds }).(pulumi.StringArrayOutput)
}

// List of VPC subnet IDs to associate with the cluster. Provide at least two VPC subnet IDs in different availability zones when deploying with a Multi-AZ standby.
//
// The following arguments are optional:
func (o DbClusterOutput) VpcSubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DbCluster) pulumi.StringArrayOutput { return v.VpcSubnetIds }).(pulumi.StringArrayOutput)
}

type DbClusterArrayOutput struct{ *pulumi.OutputState }

func (DbClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbCluster)(nil)).Elem()
}

func (o DbClusterArrayOutput) ToDbClusterArrayOutput() DbClusterArrayOutput {
	return o
}

func (o DbClusterArrayOutput) ToDbClusterArrayOutputWithContext(ctx context.Context) DbClusterArrayOutput {
	return o
}

func (o DbClusterArrayOutput) Index(i pulumi.IntInput) DbClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DbCluster {
		return vs[0].([]*DbCluster)[vs[1].(int)]
	}).(DbClusterOutput)
}

type DbClusterMapOutput struct{ *pulumi.OutputState }

func (DbClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbCluster)(nil)).Elem()
}

func (o DbClusterMapOutput) ToDbClusterMapOutput() DbClusterMapOutput {
	return o
}

func (o DbClusterMapOutput) ToDbClusterMapOutputWithContext(ctx context.Context) DbClusterMapOutput {
	return o
}

func (o DbClusterMapOutput) MapIndex(k pulumi.StringInput) DbClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DbCluster {
		return vs[0].(map[string]*DbCluster)[vs[1].(string)]
	}).(DbClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DbClusterInput)(nil)).Elem(), &DbCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbClusterArrayInput)(nil)).Elem(), DbClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbClusterMapInput)(nil)).Elem(), DbClusterMap{})
	pulumi.RegisterOutputType(DbClusterOutput{})
	pulumi.RegisterOutputType(DbClusterArrayOutput{})
	pulumi.RegisterOutputType(DbClusterMapOutput{})
}
