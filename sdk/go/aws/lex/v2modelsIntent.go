// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Using `pulumi import`, import Lex V2 Models Intent using the `intent_id:bot_id:bot_version:locale_id`. For example:
//
// ```sh
// $ pulumi import aws:lex/v2modelsIntent:V2modelsIntent example intent-42874:bot-11376:DRAFT:en_US
// ```
type V2modelsIntent struct {
	pulumi.CustomResourceState

	// Identifier of the bot associated with this intent.
	BotId pulumi.StringOutput `pulumi:"botId"`
	// Version of the bot associated with this intent.
	BotVersion pulumi.StringOutput `pulumi:"botVersion"`
	// Configuration block for the response that Amazon Lex sends to the user when the intent is closed. See `closingSetting`.
	ClosingSetting      V2modelsIntentClosingSettingPtrOutput      `pulumi:"closingSetting"`
	ConfirmationSetting V2modelsIntentConfirmationSettingPtrOutput `pulumi:"confirmationSetting"`
	// Timestamp of the date and time that the intent was created.
	CreationDateTime pulumi.StringOutput `pulumi:"creationDateTime"`
	// Description of the intent. Use the description to help identify the intent in lists.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Configuration block for invoking the alias Lambda function for each user input. You can invoke this Lambda function to personalize user interaction. See `dialogCodeHook`.
	DialogCodeHook V2modelsIntentDialogCodeHookPtrOutput `pulumi:"dialogCodeHook"`
	// Configuration block for invoking the alias Lambda function when the intent is ready for fulfillment. You can invoke this function to complete the bot's transaction with the user. See `fulfillmentCodeHook`.
	FulfillmentCodeHook V2modelsIntentFulfillmentCodeHookPtrOutput `pulumi:"fulfillmentCodeHook"`
	// Configuration block for the response that is sent to the user at the beginning of a conversation, before eliciting slot values. See `initialResponseSetting`.
	InitialResponseSetting V2modelsIntentInitialResponseSettingPtrOutput `pulumi:"initialResponseSetting"`
	// Configuration blocks for contexts that must be active for this intent to be considered by Amazon Lex. When an intent has an input context list, Amazon Lex only considers using the intent in an interaction with the user when the specified contexts are included in the active context list for the session. If the contexts are not active, then Amazon Lex will not use the intent. A context can be automatically activated using the outputContexts property or it can be set at runtime. See `inputContext`.
	InputContexts V2modelsIntentInputContextArrayOutput `pulumi:"inputContexts"`
	// Unique identifier for the intent.
	IntentId pulumi.StringOutput `pulumi:"intentId"`
	// Configuration block for information required to use the AMAZON.KendraSearchIntent intent to connect to an Amazon Kendra index. The AMAZON.KendraSearchIntent intent is called when Amazon Lex can't determine another intent to invoke. See `kendraConfiguration`.
	KendraConfiguration V2modelsIntentKendraConfigurationPtrOutput `pulumi:"kendraConfiguration"`
	// Timestamp of the last time that the intent was modified.
	LastUpdatedDateTime pulumi.StringOutput `pulumi:"lastUpdatedDateTime"`
	// Identifier of the language and locale where this intent is used. All of the bots, slot types, and slots used by the intent must have the same locale.
	LocaleId pulumi.StringOutput `pulumi:"localeId"`
	// Name of the intent. Intent names must be unique in the locale that contains the intent and cannot match the name of any built-in intent.
	//
	// The following arguments are optional:
	Name pulumi.StringOutput `pulumi:"name"`
	// Configuration blocks for contexts that the intent activates when it is fulfilled. You can use an output context to indicate the intents that Amazon Lex should consider for the next turn of the conversation with a customer. When you use the outputContextsList property, all of the contexts specified in the list are activated when the intent is fulfilled. You can set up to 10 output contexts. You can also set the number of conversation turns that the context should be active, or the length of time that the context should be active. See `outputContext`.
	OutputContexts V2modelsIntentOutputContextArrayOutput `pulumi:"outputContexts"`
	// Identifier for the built-in intent to base this intent on.
	ParentIntentSignature pulumi.StringPtrOutput `pulumi:"parentIntentSignature"`
	// Configuration block for strings that a user might say to signal the intent. See `sampleUtterance`.
	SampleUtterances V2modelsIntentSampleUtteranceArrayOutput `pulumi:"sampleUtterances"`
	// Configuration block for a new list of slots and their priorities that are contained by the intent. This is ignored on create and only valid for updates. See `slotPriority`.
	SlotPriorities V2modelsIntentSlotPriorityArrayOutput `pulumi:"slotPriorities"`
	Timeouts       V2modelsIntentTimeoutsPtrOutput       `pulumi:"timeouts"`
}

// NewV2modelsIntent registers a new resource with the given unique name, arguments, and options.
func NewV2modelsIntent(ctx *pulumi.Context,
	name string, args *V2modelsIntentArgs, opts ...pulumi.ResourceOption) (*V2modelsIntent, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BotId == nil {
		return nil, errors.New("invalid value for required argument 'BotId'")
	}
	if args.BotVersion == nil {
		return nil, errors.New("invalid value for required argument 'BotVersion'")
	}
	if args.LocaleId == nil {
		return nil, errors.New("invalid value for required argument 'LocaleId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource V2modelsIntent
	err := ctx.RegisterResource("aws:lex/v2modelsIntent:V2modelsIntent", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetV2modelsIntent gets an existing V2modelsIntent resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetV2modelsIntent(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *V2modelsIntentState, opts ...pulumi.ResourceOption) (*V2modelsIntent, error) {
	var resource V2modelsIntent
	err := ctx.ReadResource("aws:lex/v2modelsIntent:V2modelsIntent", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering V2modelsIntent resources.
type v2modelsIntentState struct {
	// Identifier of the bot associated with this intent.
	BotId *string `pulumi:"botId"`
	// Version of the bot associated with this intent.
	BotVersion *string `pulumi:"botVersion"`
	// Configuration block for the response that Amazon Lex sends to the user when the intent is closed. See `closingSetting`.
	ClosingSetting      *V2modelsIntentClosingSetting      `pulumi:"closingSetting"`
	ConfirmationSetting *V2modelsIntentConfirmationSetting `pulumi:"confirmationSetting"`
	// Timestamp of the date and time that the intent was created.
	CreationDateTime *string `pulumi:"creationDateTime"`
	// Description of the intent. Use the description to help identify the intent in lists.
	Description *string `pulumi:"description"`
	// Configuration block for invoking the alias Lambda function for each user input. You can invoke this Lambda function to personalize user interaction. See `dialogCodeHook`.
	DialogCodeHook *V2modelsIntentDialogCodeHook `pulumi:"dialogCodeHook"`
	// Configuration block for invoking the alias Lambda function when the intent is ready for fulfillment. You can invoke this function to complete the bot's transaction with the user. See `fulfillmentCodeHook`.
	FulfillmentCodeHook *V2modelsIntentFulfillmentCodeHook `pulumi:"fulfillmentCodeHook"`
	// Configuration block for the response that is sent to the user at the beginning of a conversation, before eliciting slot values. See `initialResponseSetting`.
	InitialResponseSetting *V2modelsIntentInitialResponseSetting `pulumi:"initialResponseSetting"`
	// Configuration blocks for contexts that must be active for this intent to be considered by Amazon Lex. When an intent has an input context list, Amazon Lex only considers using the intent in an interaction with the user when the specified contexts are included in the active context list for the session. If the contexts are not active, then Amazon Lex will not use the intent. A context can be automatically activated using the outputContexts property or it can be set at runtime. See `inputContext`.
	InputContexts []V2modelsIntentInputContext `pulumi:"inputContexts"`
	// Unique identifier for the intent.
	IntentId *string `pulumi:"intentId"`
	// Configuration block for information required to use the AMAZON.KendraSearchIntent intent to connect to an Amazon Kendra index. The AMAZON.KendraSearchIntent intent is called when Amazon Lex can't determine another intent to invoke. See `kendraConfiguration`.
	KendraConfiguration *V2modelsIntentKendraConfiguration `pulumi:"kendraConfiguration"`
	// Timestamp of the last time that the intent was modified.
	LastUpdatedDateTime *string `pulumi:"lastUpdatedDateTime"`
	// Identifier of the language and locale where this intent is used. All of the bots, slot types, and slots used by the intent must have the same locale.
	LocaleId *string `pulumi:"localeId"`
	// Name of the intent. Intent names must be unique in the locale that contains the intent and cannot match the name of any built-in intent.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// Configuration blocks for contexts that the intent activates when it is fulfilled. You can use an output context to indicate the intents that Amazon Lex should consider for the next turn of the conversation with a customer. When you use the outputContextsList property, all of the contexts specified in the list are activated when the intent is fulfilled. You can set up to 10 output contexts. You can also set the number of conversation turns that the context should be active, or the length of time that the context should be active. See `outputContext`.
	OutputContexts []V2modelsIntentOutputContext `pulumi:"outputContexts"`
	// Identifier for the built-in intent to base this intent on.
	ParentIntentSignature *string `pulumi:"parentIntentSignature"`
	// Configuration block for strings that a user might say to signal the intent. See `sampleUtterance`.
	SampleUtterances []V2modelsIntentSampleUtterance `pulumi:"sampleUtterances"`
	// Configuration block for a new list of slots and their priorities that are contained by the intent. This is ignored on create and only valid for updates. See `slotPriority`.
	SlotPriorities []V2modelsIntentSlotPriority `pulumi:"slotPriorities"`
	Timeouts       *V2modelsIntentTimeouts      `pulumi:"timeouts"`
}

type V2modelsIntentState struct {
	// Identifier of the bot associated with this intent.
	BotId pulumi.StringPtrInput
	// Version of the bot associated with this intent.
	BotVersion pulumi.StringPtrInput
	// Configuration block for the response that Amazon Lex sends to the user when the intent is closed. See `closingSetting`.
	ClosingSetting      V2modelsIntentClosingSettingPtrInput
	ConfirmationSetting V2modelsIntentConfirmationSettingPtrInput
	// Timestamp of the date and time that the intent was created.
	CreationDateTime pulumi.StringPtrInput
	// Description of the intent. Use the description to help identify the intent in lists.
	Description pulumi.StringPtrInput
	// Configuration block for invoking the alias Lambda function for each user input. You can invoke this Lambda function to personalize user interaction. See `dialogCodeHook`.
	DialogCodeHook V2modelsIntentDialogCodeHookPtrInput
	// Configuration block for invoking the alias Lambda function when the intent is ready for fulfillment. You can invoke this function to complete the bot's transaction with the user. See `fulfillmentCodeHook`.
	FulfillmentCodeHook V2modelsIntentFulfillmentCodeHookPtrInput
	// Configuration block for the response that is sent to the user at the beginning of a conversation, before eliciting slot values. See `initialResponseSetting`.
	InitialResponseSetting V2modelsIntentInitialResponseSettingPtrInput
	// Configuration blocks for contexts that must be active for this intent to be considered by Amazon Lex. When an intent has an input context list, Amazon Lex only considers using the intent in an interaction with the user when the specified contexts are included in the active context list for the session. If the contexts are not active, then Amazon Lex will not use the intent. A context can be automatically activated using the outputContexts property or it can be set at runtime. See `inputContext`.
	InputContexts V2modelsIntentInputContextArrayInput
	// Unique identifier for the intent.
	IntentId pulumi.StringPtrInput
	// Configuration block for information required to use the AMAZON.KendraSearchIntent intent to connect to an Amazon Kendra index. The AMAZON.KendraSearchIntent intent is called when Amazon Lex can't determine another intent to invoke. See `kendraConfiguration`.
	KendraConfiguration V2modelsIntentKendraConfigurationPtrInput
	// Timestamp of the last time that the intent was modified.
	LastUpdatedDateTime pulumi.StringPtrInput
	// Identifier of the language and locale where this intent is used. All of the bots, slot types, and slots used by the intent must have the same locale.
	LocaleId pulumi.StringPtrInput
	// Name of the intent. Intent names must be unique in the locale that contains the intent and cannot match the name of any built-in intent.
	//
	// The following arguments are optional:
	Name pulumi.StringPtrInput
	// Configuration blocks for contexts that the intent activates when it is fulfilled. You can use an output context to indicate the intents that Amazon Lex should consider for the next turn of the conversation with a customer. When you use the outputContextsList property, all of the contexts specified in the list are activated when the intent is fulfilled. You can set up to 10 output contexts. You can also set the number of conversation turns that the context should be active, or the length of time that the context should be active. See `outputContext`.
	OutputContexts V2modelsIntentOutputContextArrayInput
	// Identifier for the built-in intent to base this intent on.
	ParentIntentSignature pulumi.StringPtrInput
	// Configuration block for strings that a user might say to signal the intent. See `sampleUtterance`.
	SampleUtterances V2modelsIntentSampleUtteranceArrayInput
	// Configuration block for a new list of slots and their priorities that are contained by the intent. This is ignored on create and only valid for updates. See `slotPriority`.
	SlotPriorities V2modelsIntentSlotPriorityArrayInput
	Timeouts       V2modelsIntentTimeoutsPtrInput
}

func (V2modelsIntentState) ElementType() reflect.Type {
	return reflect.TypeOf((*v2modelsIntentState)(nil)).Elem()
}

type v2modelsIntentArgs struct {
	// Identifier of the bot associated with this intent.
	BotId string `pulumi:"botId"`
	// Version of the bot associated with this intent.
	BotVersion string `pulumi:"botVersion"`
	// Configuration block for the response that Amazon Lex sends to the user when the intent is closed. See `closingSetting`.
	ClosingSetting      *V2modelsIntentClosingSetting      `pulumi:"closingSetting"`
	ConfirmationSetting *V2modelsIntentConfirmationSetting `pulumi:"confirmationSetting"`
	// Description of the intent. Use the description to help identify the intent in lists.
	Description *string `pulumi:"description"`
	// Configuration block for invoking the alias Lambda function for each user input. You can invoke this Lambda function to personalize user interaction. See `dialogCodeHook`.
	DialogCodeHook *V2modelsIntentDialogCodeHook `pulumi:"dialogCodeHook"`
	// Configuration block for invoking the alias Lambda function when the intent is ready for fulfillment. You can invoke this function to complete the bot's transaction with the user. See `fulfillmentCodeHook`.
	FulfillmentCodeHook *V2modelsIntentFulfillmentCodeHook `pulumi:"fulfillmentCodeHook"`
	// Configuration block for the response that is sent to the user at the beginning of a conversation, before eliciting slot values. See `initialResponseSetting`.
	InitialResponseSetting *V2modelsIntentInitialResponseSetting `pulumi:"initialResponseSetting"`
	// Configuration blocks for contexts that must be active for this intent to be considered by Amazon Lex. When an intent has an input context list, Amazon Lex only considers using the intent in an interaction with the user when the specified contexts are included in the active context list for the session. If the contexts are not active, then Amazon Lex will not use the intent. A context can be automatically activated using the outputContexts property or it can be set at runtime. See `inputContext`.
	InputContexts []V2modelsIntentInputContext `pulumi:"inputContexts"`
	// Configuration block for information required to use the AMAZON.KendraSearchIntent intent to connect to an Amazon Kendra index. The AMAZON.KendraSearchIntent intent is called when Amazon Lex can't determine another intent to invoke. See `kendraConfiguration`.
	KendraConfiguration *V2modelsIntentKendraConfiguration `pulumi:"kendraConfiguration"`
	// Identifier of the language and locale where this intent is used. All of the bots, slot types, and slots used by the intent must have the same locale.
	LocaleId string `pulumi:"localeId"`
	// Name of the intent. Intent names must be unique in the locale that contains the intent and cannot match the name of any built-in intent.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// Configuration blocks for contexts that the intent activates when it is fulfilled. You can use an output context to indicate the intents that Amazon Lex should consider for the next turn of the conversation with a customer. When you use the outputContextsList property, all of the contexts specified in the list are activated when the intent is fulfilled. You can set up to 10 output contexts. You can also set the number of conversation turns that the context should be active, or the length of time that the context should be active. See `outputContext`.
	OutputContexts []V2modelsIntentOutputContext `pulumi:"outputContexts"`
	// Identifier for the built-in intent to base this intent on.
	ParentIntentSignature *string `pulumi:"parentIntentSignature"`
	// Configuration block for strings that a user might say to signal the intent. See `sampleUtterance`.
	SampleUtterances []V2modelsIntentSampleUtterance `pulumi:"sampleUtterances"`
	// Configuration block for a new list of slots and their priorities that are contained by the intent. This is ignored on create and only valid for updates. See `slotPriority`.
	SlotPriorities []V2modelsIntentSlotPriority `pulumi:"slotPriorities"`
	Timeouts       *V2modelsIntentTimeouts      `pulumi:"timeouts"`
}

// The set of arguments for constructing a V2modelsIntent resource.
type V2modelsIntentArgs struct {
	// Identifier of the bot associated with this intent.
	BotId pulumi.StringInput
	// Version of the bot associated with this intent.
	BotVersion pulumi.StringInput
	// Configuration block for the response that Amazon Lex sends to the user when the intent is closed. See `closingSetting`.
	ClosingSetting      V2modelsIntentClosingSettingPtrInput
	ConfirmationSetting V2modelsIntentConfirmationSettingPtrInput
	// Description of the intent. Use the description to help identify the intent in lists.
	Description pulumi.StringPtrInput
	// Configuration block for invoking the alias Lambda function for each user input. You can invoke this Lambda function to personalize user interaction. See `dialogCodeHook`.
	DialogCodeHook V2modelsIntentDialogCodeHookPtrInput
	// Configuration block for invoking the alias Lambda function when the intent is ready for fulfillment. You can invoke this function to complete the bot's transaction with the user. See `fulfillmentCodeHook`.
	FulfillmentCodeHook V2modelsIntentFulfillmentCodeHookPtrInput
	// Configuration block for the response that is sent to the user at the beginning of a conversation, before eliciting slot values. See `initialResponseSetting`.
	InitialResponseSetting V2modelsIntentInitialResponseSettingPtrInput
	// Configuration blocks for contexts that must be active for this intent to be considered by Amazon Lex. When an intent has an input context list, Amazon Lex only considers using the intent in an interaction with the user when the specified contexts are included in the active context list for the session. If the contexts are not active, then Amazon Lex will not use the intent. A context can be automatically activated using the outputContexts property or it can be set at runtime. See `inputContext`.
	InputContexts V2modelsIntentInputContextArrayInput
	// Configuration block for information required to use the AMAZON.KendraSearchIntent intent to connect to an Amazon Kendra index. The AMAZON.KendraSearchIntent intent is called when Amazon Lex can't determine another intent to invoke. See `kendraConfiguration`.
	KendraConfiguration V2modelsIntentKendraConfigurationPtrInput
	// Identifier of the language and locale where this intent is used. All of the bots, slot types, and slots used by the intent must have the same locale.
	LocaleId pulumi.StringInput
	// Name of the intent. Intent names must be unique in the locale that contains the intent and cannot match the name of any built-in intent.
	//
	// The following arguments are optional:
	Name pulumi.StringPtrInput
	// Configuration blocks for contexts that the intent activates when it is fulfilled. You can use an output context to indicate the intents that Amazon Lex should consider for the next turn of the conversation with a customer. When you use the outputContextsList property, all of the contexts specified in the list are activated when the intent is fulfilled. You can set up to 10 output contexts. You can also set the number of conversation turns that the context should be active, or the length of time that the context should be active. See `outputContext`.
	OutputContexts V2modelsIntentOutputContextArrayInput
	// Identifier for the built-in intent to base this intent on.
	ParentIntentSignature pulumi.StringPtrInput
	// Configuration block for strings that a user might say to signal the intent. See `sampleUtterance`.
	SampleUtterances V2modelsIntentSampleUtteranceArrayInput
	// Configuration block for a new list of slots and their priorities that are contained by the intent. This is ignored on create and only valid for updates. See `slotPriority`.
	SlotPriorities V2modelsIntentSlotPriorityArrayInput
	Timeouts       V2modelsIntentTimeoutsPtrInput
}

func (V2modelsIntentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*v2modelsIntentArgs)(nil)).Elem()
}

type V2modelsIntentInput interface {
	pulumi.Input

	ToV2modelsIntentOutput() V2modelsIntentOutput
	ToV2modelsIntentOutputWithContext(ctx context.Context) V2modelsIntentOutput
}

func (*V2modelsIntent) ElementType() reflect.Type {
	return reflect.TypeOf((**V2modelsIntent)(nil)).Elem()
}

func (i *V2modelsIntent) ToV2modelsIntentOutput() V2modelsIntentOutput {
	return i.ToV2modelsIntentOutputWithContext(context.Background())
}

func (i *V2modelsIntent) ToV2modelsIntentOutputWithContext(ctx context.Context) V2modelsIntentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2modelsIntentOutput)
}

// V2modelsIntentArrayInput is an input type that accepts V2modelsIntentArray and V2modelsIntentArrayOutput values.
// You can construct a concrete instance of `V2modelsIntentArrayInput` via:
//
//	V2modelsIntentArray{ V2modelsIntentArgs{...} }
type V2modelsIntentArrayInput interface {
	pulumi.Input

	ToV2modelsIntentArrayOutput() V2modelsIntentArrayOutput
	ToV2modelsIntentArrayOutputWithContext(context.Context) V2modelsIntentArrayOutput
}

type V2modelsIntentArray []V2modelsIntentInput

func (V2modelsIntentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V2modelsIntent)(nil)).Elem()
}

func (i V2modelsIntentArray) ToV2modelsIntentArrayOutput() V2modelsIntentArrayOutput {
	return i.ToV2modelsIntentArrayOutputWithContext(context.Background())
}

func (i V2modelsIntentArray) ToV2modelsIntentArrayOutputWithContext(ctx context.Context) V2modelsIntentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2modelsIntentArrayOutput)
}

// V2modelsIntentMapInput is an input type that accepts V2modelsIntentMap and V2modelsIntentMapOutput values.
// You can construct a concrete instance of `V2modelsIntentMapInput` via:
//
//	V2modelsIntentMap{ "key": V2modelsIntentArgs{...} }
type V2modelsIntentMapInput interface {
	pulumi.Input

	ToV2modelsIntentMapOutput() V2modelsIntentMapOutput
	ToV2modelsIntentMapOutputWithContext(context.Context) V2modelsIntentMapOutput
}

type V2modelsIntentMap map[string]V2modelsIntentInput

func (V2modelsIntentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V2modelsIntent)(nil)).Elem()
}

func (i V2modelsIntentMap) ToV2modelsIntentMapOutput() V2modelsIntentMapOutput {
	return i.ToV2modelsIntentMapOutputWithContext(context.Background())
}

func (i V2modelsIntentMap) ToV2modelsIntentMapOutputWithContext(ctx context.Context) V2modelsIntentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2modelsIntentMapOutput)
}

type V2modelsIntentOutput struct{ *pulumi.OutputState }

func (V2modelsIntentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**V2modelsIntent)(nil)).Elem()
}

func (o V2modelsIntentOutput) ToV2modelsIntentOutput() V2modelsIntentOutput {
	return o
}

func (o V2modelsIntentOutput) ToV2modelsIntentOutputWithContext(ctx context.Context) V2modelsIntentOutput {
	return o
}

// Identifier of the bot associated with this intent.
func (o V2modelsIntentOutput) BotId() pulumi.StringOutput {
	return o.ApplyT(func(v *V2modelsIntent) pulumi.StringOutput { return v.BotId }).(pulumi.StringOutput)
}

// Version of the bot associated with this intent.
func (o V2modelsIntentOutput) BotVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *V2modelsIntent) pulumi.StringOutput { return v.BotVersion }).(pulumi.StringOutput)
}

// Configuration block for the response that Amazon Lex sends to the user when the intent is closed. See `closingSetting`.
func (o V2modelsIntentOutput) ClosingSetting() V2modelsIntentClosingSettingPtrOutput {
	return o.ApplyT(func(v *V2modelsIntent) V2modelsIntentClosingSettingPtrOutput { return v.ClosingSetting }).(V2modelsIntentClosingSettingPtrOutput)
}

func (o V2modelsIntentOutput) ConfirmationSetting() V2modelsIntentConfirmationSettingPtrOutput {
	return o.ApplyT(func(v *V2modelsIntent) V2modelsIntentConfirmationSettingPtrOutput { return v.ConfirmationSetting }).(V2modelsIntentConfirmationSettingPtrOutput)
}

// Timestamp of the date and time that the intent was created.
func (o V2modelsIntentOutput) CreationDateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *V2modelsIntent) pulumi.StringOutput { return v.CreationDateTime }).(pulumi.StringOutput)
}

// Description of the intent. Use the description to help identify the intent in lists.
func (o V2modelsIntentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V2modelsIntent) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Configuration block for invoking the alias Lambda function for each user input. You can invoke this Lambda function to personalize user interaction. See `dialogCodeHook`.
func (o V2modelsIntentOutput) DialogCodeHook() V2modelsIntentDialogCodeHookPtrOutput {
	return o.ApplyT(func(v *V2modelsIntent) V2modelsIntentDialogCodeHookPtrOutput { return v.DialogCodeHook }).(V2modelsIntentDialogCodeHookPtrOutput)
}

// Configuration block for invoking the alias Lambda function when the intent is ready for fulfillment. You can invoke this function to complete the bot's transaction with the user. See `fulfillmentCodeHook`.
func (o V2modelsIntentOutput) FulfillmentCodeHook() V2modelsIntentFulfillmentCodeHookPtrOutput {
	return o.ApplyT(func(v *V2modelsIntent) V2modelsIntentFulfillmentCodeHookPtrOutput { return v.FulfillmentCodeHook }).(V2modelsIntentFulfillmentCodeHookPtrOutput)
}

// Configuration block for the response that is sent to the user at the beginning of a conversation, before eliciting slot values. See `initialResponseSetting`.
func (o V2modelsIntentOutput) InitialResponseSetting() V2modelsIntentInitialResponseSettingPtrOutput {
	return o.ApplyT(func(v *V2modelsIntent) V2modelsIntentInitialResponseSettingPtrOutput { return v.InitialResponseSetting }).(V2modelsIntentInitialResponseSettingPtrOutput)
}

// Configuration blocks for contexts that must be active for this intent to be considered by Amazon Lex. When an intent has an input context list, Amazon Lex only considers using the intent in an interaction with the user when the specified contexts are included in the active context list for the session. If the contexts are not active, then Amazon Lex will not use the intent. A context can be automatically activated using the outputContexts property or it can be set at runtime. See `inputContext`.
func (o V2modelsIntentOutput) InputContexts() V2modelsIntentInputContextArrayOutput {
	return o.ApplyT(func(v *V2modelsIntent) V2modelsIntentInputContextArrayOutput { return v.InputContexts }).(V2modelsIntentInputContextArrayOutput)
}

// Unique identifier for the intent.
func (o V2modelsIntentOutput) IntentId() pulumi.StringOutput {
	return o.ApplyT(func(v *V2modelsIntent) pulumi.StringOutput { return v.IntentId }).(pulumi.StringOutput)
}

// Configuration block for information required to use the AMAZON.KendraSearchIntent intent to connect to an Amazon Kendra index. The AMAZON.KendraSearchIntent intent is called when Amazon Lex can't determine another intent to invoke. See `kendraConfiguration`.
func (o V2modelsIntentOutput) KendraConfiguration() V2modelsIntentKendraConfigurationPtrOutput {
	return o.ApplyT(func(v *V2modelsIntent) V2modelsIntentKendraConfigurationPtrOutput { return v.KendraConfiguration }).(V2modelsIntentKendraConfigurationPtrOutput)
}

// Timestamp of the last time that the intent was modified.
func (o V2modelsIntentOutput) LastUpdatedDateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *V2modelsIntent) pulumi.StringOutput { return v.LastUpdatedDateTime }).(pulumi.StringOutput)
}

// Identifier of the language and locale where this intent is used. All of the bots, slot types, and slots used by the intent must have the same locale.
func (o V2modelsIntentOutput) LocaleId() pulumi.StringOutput {
	return o.ApplyT(func(v *V2modelsIntent) pulumi.StringOutput { return v.LocaleId }).(pulumi.StringOutput)
}

// Name of the intent. Intent names must be unique in the locale that contains the intent and cannot match the name of any built-in intent.
//
// The following arguments are optional:
func (o V2modelsIntentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *V2modelsIntent) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Configuration blocks for contexts that the intent activates when it is fulfilled. You can use an output context to indicate the intents that Amazon Lex should consider for the next turn of the conversation with a customer. When you use the outputContextsList property, all of the contexts specified in the list are activated when the intent is fulfilled. You can set up to 10 output contexts. You can also set the number of conversation turns that the context should be active, or the length of time that the context should be active. See `outputContext`.
func (o V2modelsIntentOutput) OutputContexts() V2modelsIntentOutputContextArrayOutput {
	return o.ApplyT(func(v *V2modelsIntent) V2modelsIntentOutputContextArrayOutput { return v.OutputContexts }).(V2modelsIntentOutputContextArrayOutput)
}

// Identifier for the built-in intent to base this intent on.
func (o V2modelsIntentOutput) ParentIntentSignature() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V2modelsIntent) pulumi.StringPtrOutput { return v.ParentIntentSignature }).(pulumi.StringPtrOutput)
}

// Configuration block for strings that a user might say to signal the intent. See `sampleUtterance`.
func (o V2modelsIntentOutput) SampleUtterances() V2modelsIntentSampleUtteranceArrayOutput {
	return o.ApplyT(func(v *V2modelsIntent) V2modelsIntentSampleUtteranceArrayOutput { return v.SampleUtterances }).(V2modelsIntentSampleUtteranceArrayOutput)
}

// Configuration block for a new list of slots and their priorities that are contained by the intent. This is ignored on create and only valid for updates. See `slotPriority`.
func (o V2modelsIntentOutput) SlotPriorities() V2modelsIntentSlotPriorityArrayOutput {
	return o.ApplyT(func(v *V2modelsIntent) V2modelsIntentSlotPriorityArrayOutput { return v.SlotPriorities }).(V2modelsIntentSlotPriorityArrayOutput)
}

func (o V2modelsIntentOutput) Timeouts() V2modelsIntentTimeoutsPtrOutput {
	return o.ApplyT(func(v *V2modelsIntent) V2modelsIntentTimeoutsPtrOutput { return v.Timeouts }).(V2modelsIntentTimeoutsPtrOutput)
}

type V2modelsIntentArrayOutput struct{ *pulumi.OutputState }

func (V2modelsIntentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V2modelsIntent)(nil)).Elem()
}

func (o V2modelsIntentArrayOutput) ToV2modelsIntentArrayOutput() V2modelsIntentArrayOutput {
	return o
}

func (o V2modelsIntentArrayOutput) ToV2modelsIntentArrayOutputWithContext(ctx context.Context) V2modelsIntentArrayOutput {
	return o
}

func (o V2modelsIntentArrayOutput) Index(i pulumi.IntInput) V2modelsIntentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *V2modelsIntent {
		return vs[0].([]*V2modelsIntent)[vs[1].(int)]
	}).(V2modelsIntentOutput)
}

type V2modelsIntentMapOutput struct{ *pulumi.OutputState }

func (V2modelsIntentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V2modelsIntent)(nil)).Elem()
}

func (o V2modelsIntentMapOutput) ToV2modelsIntentMapOutput() V2modelsIntentMapOutput {
	return o
}

func (o V2modelsIntentMapOutput) ToV2modelsIntentMapOutputWithContext(ctx context.Context) V2modelsIntentMapOutput {
	return o
}

func (o V2modelsIntentMapOutput) MapIndex(k pulumi.StringInput) V2modelsIntentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *V2modelsIntent {
		return vs[0].(map[string]*V2modelsIntent)[vs[1].(string)]
	}).(V2modelsIntentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*V2modelsIntentInput)(nil)).Elem(), &V2modelsIntent{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2modelsIntentArrayInput)(nil)).Elem(), V2modelsIntentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2modelsIntentMapInput)(nil)).Elem(), V2modelsIntentMap{})
	pulumi.RegisterOutputType(V2modelsIntentOutput{})
	pulumi.RegisterOutputType(V2modelsIntentArrayOutput{})
	pulumi.RegisterOutputType(V2modelsIntentMapOutput{})
}
