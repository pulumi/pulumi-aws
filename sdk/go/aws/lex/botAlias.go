// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lex

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BotAlias struct {
	pulumi.CustomResourceState

	Arn              pulumi.StringOutput               `pulumi:"arn"`
	BotName          pulumi.StringOutput               `pulumi:"botName"`
	BotVersion       pulumi.StringOutput               `pulumi:"botVersion"`
	Checksum         pulumi.StringOutput               `pulumi:"checksum"`
	ConversationLogs BotAliasConversationLogsPtrOutput `pulumi:"conversationLogs"`
	CreatedDate      pulumi.StringOutput               `pulumi:"createdDate"`
	Description      pulumi.StringPtrOutput            `pulumi:"description"`
	LastUpdatedDate  pulumi.StringOutput               `pulumi:"lastUpdatedDate"`
	Name             pulumi.StringOutput               `pulumi:"name"`
}

// NewBotAlias registers a new resource with the given unique name, arguments, and options.
func NewBotAlias(ctx *pulumi.Context,
	name string, args *BotAliasArgs, opts ...pulumi.ResourceOption) (*BotAlias, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BotName == nil {
		return nil, errors.New("invalid value for required argument 'BotName'")
	}
	if args.BotVersion == nil {
		return nil, errors.New("invalid value for required argument 'BotVersion'")
	}
	var resource BotAlias
	err := ctx.RegisterResource("aws:lex/botAlias:BotAlias", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBotAlias gets an existing BotAlias resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBotAlias(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BotAliasState, opts ...pulumi.ResourceOption) (*BotAlias, error) {
	var resource BotAlias
	err := ctx.ReadResource("aws:lex/botAlias:BotAlias", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BotAlias resources.
type botAliasState struct {
	Arn              *string                   `pulumi:"arn"`
	BotName          *string                   `pulumi:"botName"`
	BotVersion       *string                   `pulumi:"botVersion"`
	Checksum         *string                   `pulumi:"checksum"`
	ConversationLogs *BotAliasConversationLogs `pulumi:"conversationLogs"`
	CreatedDate      *string                   `pulumi:"createdDate"`
	Description      *string                   `pulumi:"description"`
	LastUpdatedDate  *string                   `pulumi:"lastUpdatedDate"`
	Name             *string                   `pulumi:"name"`
}

type BotAliasState struct {
	Arn              pulumi.StringPtrInput
	BotName          pulumi.StringPtrInput
	BotVersion       pulumi.StringPtrInput
	Checksum         pulumi.StringPtrInput
	ConversationLogs BotAliasConversationLogsPtrInput
	CreatedDate      pulumi.StringPtrInput
	Description      pulumi.StringPtrInput
	LastUpdatedDate  pulumi.StringPtrInput
	Name             pulumi.StringPtrInput
}

func (BotAliasState) ElementType() reflect.Type {
	return reflect.TypeOf((*botAliasState)(nil)).Elem()
}

type botAliasArgs struct {
	BotName          string                    `pulumi:"botName"`
	BotVersion       string                    `pulumi:"botVersion"`
	ConversationLogs *BotAliasConversationLogs `pulumi:"conversationLogs"`
	Description      *string                   `pulumi:"description"`
	Name             *string                   `pulumi:"name"`
}

// The set of arguments for constructing a BotAlias resource.
type BotAliasArgs struct {
	BotName          pulumi.StringInput
	BotVersion       pulumi.StringInput
	ConversationLogs BotAliasConversationLogsPtrInput
	Description      pulumi.StringPtrInput
	Name             pulumi.StringPtrInput
}

func (BotAliasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*botAliasArgs)(nil)).Elem()
}

type BotAliasInput interface {
	pulumi.Input

	ToBotAliasOutput() BotAliasOutput
	ToBotAliasOutputWithContext(ctx context.Context) BotAliasOutput
}

func (*BotAlias) ElementType() reflect.Type {
	return reflect.TypeOf((**BotAlias)(nil)).Elem()
}

func (i *BotAlias) ToBotAliasOutput() BotAliasOutput {
	return i.ToBotAliasOutputWithContext(context.Background())
}

func (i *BotAlias) ToBotAliasOutputWithContext(ctx context.Context) BotAliasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotAliasOutput)
}

// BotAliasArrayInput is an input type that accepts BotAliasArray and BotAliasArrayOutput values.
// You can construct a concrete instance of `BotAliasArrayInput` via:
//
//	BotAliasArray{ BotAliasArgs{...} }
type BotAliasArrayInput interface {
	pulumi.Input

	ToBotAliasArrayOutput() BotAliasArrayOutput
	ToBotAliasArrayOutputWithContext(context.Context) BotAliasArrayOutput
}

type BotAliasArray []BotAliasInput

func (BotAliasArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BotAlias)(nil)).Elem()
}

func (i BotAliasArray) ToBotAliasArrayOutput() BotAliasArrayOutput {
	return i.ToBotAliasArrayOutputWithContext(context.Background())
}

func (i BotAliasArray) ToBotAliasArrayOutputWithContext(ctx context.Context) BotAliasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotAliasArrayOutput)
}

// BotAliasMapInput is an input type that accepts BotAliasMap and BotAliasMapOutput values.
// You can construct a concrete instance of `BotAliasMapInput` via:
//
//	BotAliasMap{ "key": BotAliasArgs{...} }
type BotAliasMapInput interface {
	pulumi.Input

	ToBotAliasMapOutput() BotAliasMapOutput
	ToBotAliasMapOutputWithContext(context.Context) BotAliasMapOutput
}

type BotAliasMap map[string]BotAliasInput

func (BotAliasMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BotAlias)(nil)).Elem()
}

func (i BotAliasMap) ToBotAliasMapOutput() BotAliasMapOutput {
	return i.ToBotAliasMapOutputWithContext(context.Background())
}

func (i BotAliasMap) ToBotAliasMapOutputWithContext(ctx context.Context) BotAliasMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotAliasMapOutput)
}

type BotAliasOutput struct{ *pulumi.OutputState }

func (BotAliasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BotAlias)(nil)).Elem()
}

func (o BotAliasOutput) ToBotAliasOutput() BotAliasOutput {
	return o
}

func (o BotAliasOutput) ToBotAliasOutputWithContext(ctx context.Context) BotAliasOutput {
	return o
}

func (o BotAliasOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *BotAlias) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o BotAliasOutput) BotName() pulumi.StringOutput {
	return o.ApplyT(func(v *BotAlias) pulumi.StringOutput { return v.BotName }).(pulumi.StringOutput)
}

func (o BotAliasOutput) BotVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *BotAlias) pulumi.StringOutput { return v.BotVersion }).(pulumi.StringOutput)
}

func (o BotAliasOutput) Checksum() pulumi.StringOutput {
	return o.ApplyT(func(v *BotAlias) pulumi.StringOutput { return v.Checksum }).(pulumi.StringOutput)
}

func (o BotAliasOutput) ConversationLogs() BotAliasConversationLogsPtrOutput {
	return o.ApplyT(func(v *BotAlias) BotAliasConversationLogsPtrOutput { return v.ConversationLogs }).(BotAliasConversationLogsPtrOutput)
}

func (o BotAliasOutput) CreatedDate() pulumi.StringOutput {
	return o.ApplyT(func(v *BotAlias) pulumi.StringOutput { return v.CreatedDate }).(pulumi.StringOutput)
}

func (o BotAliasOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BotAlias) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o BotAliasOutput) LastUpdatedDate() pulumi.StringOutput {
	return o.ApplyT(func(v *BotAlias) pulumi.StringOutput { return v.LastUpdatedDate }).(pulumi.StringOutput)
}

func (o BotAliasOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BotAlias) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type BotAliasArrayOutput struct{ *pulumi.OutputState }

func (BotAliasArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BotAlias)(nil)).Elem()
}

func (o BotAliasArrayOutput) ToBotAliasArrayOutput() BotAliasArrayOutput {
	return o
}

func (o BotAliasArrayOutput) ToBotAliasArrayOutputWithContext(ctx context.Context) BotAliasArrayOutput {
	return o
}

func (o BotAliasArrayOutput) Index(i pulumi.IntInput) BotAliasOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BotAlias {
		return vs[0].([]*BotAlias)[vs[1].(int)]
	}).(BotAliasOutput)
}

type BotAliasMapOutput struct{ *pulumi.OutputState }

func (BotAliasMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BotAlias)(nil)).Elem()
}

func (o BotAliasMapOutput) ToBotAliasMapOutput() BotAliasMapOutput {
	return o
}

func (o BotAliasMapOutput) ToBotAliasMapOutputWithContext(ctx context.Context) BotAliasMapOutput {
	return o
}

func (o BotAliasMapOutput) MapIndex(k pulumi.StringInput) BotAliasOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BotAlias {
		return vs[0].(map[string]*BotAlias)[vs[1].(string)]
	}).(BotAliasOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BotAliasInput)(nil)).Elem(), &BotAlias{})
	pulumi.RegisterInputType(reflect.TypeOf((*BotAliasArrayInput)(nil)).Elem(), BotAliasArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BotAliasMapInput)(nil)).Elem(), BotAliasMap{})
	pulumi.RegisterOutputType(BotAliasOutput{})
	pulumi.RegisterOutputType(BotAliasArrayOutput{})
	pulumi.RegisterOutputType(BotAliasMapOutput{})
}
