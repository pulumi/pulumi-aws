// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lex

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SlotType struct {
	pulumi.CustomResourceState

	Checksum               pulumi.StringOutput                 `pulumi:"checksum"`
	CreateVersion          pulumi.BoolPtrOutput                `pulumi:"createVersion"`
	CreatedDate            pulumi.StringOutput                 `pulumi:"createdDate"`
	Description            pulumi.StringPtrOutput              `pulumi:"description"`
	EnumerationValues      SlotTypeEnumerationValueArrayOutput `pulumi:"enumerationValues"`
	LastUpdatedDate        pulumi.StringOutput                 `pulumi:"lastUpdatedDate"`
	Name                   pulumi.StringOutput                 `pulumi:"name"`
	ValueSelectionStrategy pulumi.StringPtrOutput              `pulumi:"valueSelectionStrategy"`
	Version                pulumi.StringOutput                 `pulumi:"version"`
}

// NewSlotType registers a new resource with the given unique name, arguments, and options.
func NewSlotType(ctx *pulumi.Context,
	name string, args *SlotTypeArgs, opts ...pulumi.ResourceOption) (*SlotType, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnumerationValues == nil {
		return nil, errors.New("invalid value for required argument 'EnumerationValues'")
	}
	var resource SlotType
	err := ctx.RegisterResource("aws:lex/slotType:SlotType", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSlotType gets an existing SlotType resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSlotType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SlotTypeState, opts ...pulumi.ResourceOption) (*SlotType, error) {
	var resource SlotType
	err := ctx.ReadResource("aws:lex/slotType:SlotType", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SlotType resources.
type slotTypeState struct {
	Checksum               *string                    `pulumi:"checksum"`
	CreateVersion          *bool                      `pulumi:"createVersion"`
	CreatedDate            *string                    `pulumi:"createdDate"`
	Description            *string                    `pulumi:"description"`
	EnumerationValues      []SlotTypeEnumerationValue `pulumi:"enumerationValues"`
	LastUpdatedDate        *string                    `pulumi:"lastUpdatedDate"`
	Name                   *string                    `pulumi:"name"`
	ValueSelectionStrategy *string                    `pulumi:"valueSelectionStrategy"`
	Version                *string                    `pulumi:"version"`
}

type SlotTypeState struct {
	Checksum               pulumi.StringPtrInput
	CreateVersion          pulumi.BoolPtrInput
	CreatedDate            pulumi.StringPtrInput
	Description            pulumi.StringPtrInput
	EnumerationValues      SlotTypeEnumerationValueArrayInput
	LastUpdatedDate        pulumi.StringPtrInput
	Name                   pulumi.StringPtrInput
	ValueSelectionStrategy pulumi.StringPtrInput
	Version                pulumi.StringPtrInput
}

func (SlotTypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*slotTypeState)(nil)).Elem()
}

type slotTypeArgs struct {
	CreateVersion          *bool                      `pulumi:"createVersion"`
	Description            *string                    `pulumi:"description"`
	EnumerationValues      []SlotTypeEnumerationValue `pulumi:"enumerationValues"`
	Name                   *string                    `pulumi:"name"`
	ValueSelectionStrategy *string                    `pulumi:"valueSelectionStrategy"`
}

// The set of arguments for constructing a SlotType resource.
type SlotTypeArgs struct {
	CreateVersion          pulumi.BoolPtrInput
	Description            pulumi.StringPtrInput
	EnumerationValues      SlotTypeEnumerationValueArrayInput
	Name                   pulumi.StringPtrInput
	ValueSelectionStrategy pulumi.StringPtrInput
}

func (SlotTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*slotTypeArgs)(nil)).Elem()
}

type SlotTypeInput interface {
	pulumi.Input

	ToSlotTypeOutput() SlotTypeOutput
	ToSlotTypeOutputWithContext(ctx context.Context) SlotTypeOutput
}

func (*SlotType) ElementType() reflect.Type {
	return reflect.TypeOf((**SlotType)(nil)).Elem()
}

func (i *SlotType) ToSlotTypeOutput() SlotTypeOutput {
	return i.ToSlotTypeOutputWithContext(context.Background())
}

func (i *SlotType) ToSlotTypeOutputWithContext(ctx context.Context) SlotTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlotTypeOutput)
}

// SlotTypeArrayInput is an input type that accepts SlotTypeArray and SlotTypeArrayOutput values.
// You can construct a concrete instance of `SlotTypeArrayInput` via:
//
//	SlotTypeArray{ SlotTypeArgs{...} }
type SlotTypeArrayInput interface {
	pulumi.Input

	ToSlotTypeArrayOutput() SlotTypeArrayOutput
	ToSlotTypeArrayOutputWithContext(context.Context) SlotTypeArrayOutput
}

type SlotTypeArray []SlotTypeInput

func (SlotTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SlotType)(nil)).Elem()
}

func (i SlotTypeArray) ToSlotTypeArrayOutput() SlotTypeArrayOutput {
	return i.ToSlotTypeArrayOutputWithContext(context.Background())
}

func (i SlotTypeArray) ToSlotTypeArrayOutputWithContext(ctx context.Context) SlotTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlotTypeArrayOutput)
}

// SlotTypeMapInput is an input type that accepts SlotTypeMap and SlotTypeMapOutput values.
// You can construct a concrete instance of `SlotTypeMapInput` via:
//
//	SlotTypeMap{ "key": SlotTypeArgs{...} }
type SlotTypeMapInput interface {
	pulumi.Input

	ToSlotTypeMapOutput() SlotTypeMapOutput
	ToSlotTypeMapOutputWithContext(context.Context) SlotTypeMapOutput
}

type SlotTypeMap map[string]SlotTypeInput

func (SlotTypeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SlotType)(nil)).Elem()
}

func (i SlotTypeMap) ToSlotTypeMapOutput() SlotTypeMapOutput {
	return i.ToSlotTypeMapOutputWithContext(context.Background())
}

func (i SlotTypeMap) ToSlotTypeMapOutputWithContext(ctx context.Context) SlotTypeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlotTypeMapOutput)
}

type SlotTypeOutput struct{ *pulumi.OutputState }

func (SlotTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SlotType)(nil)).Elem()
}

func (o SlotTypeOutput) ToSlotTypeOutput() SlotTypeOutput {
	return o
}

func (o SlotTypeOutput) ToSlotTypeOutputWithContext(ctx context.Context) SlotTypeOutput {
	return o
}

func (o SlotTypeOutput) Checksum() pulumi.StringOutput {
	return o.ApplyT(func(v *SlotType) pulumi.StringOutput { return v.Checksum }).(pulumi.StringOutput)
}

func (o SlotTypeOutput) CreateVersion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SlotType) pulumi.BoolPtrOutput { return v.CreateVersion }).(pulumi.BoolPtrOutput)
}

func (o SlotTypeOutput) CreatedDate() pulumi.StringOutput {
	return o.ApplyT(func(v *SlotType) pulumi.StringOutput { return v.CreatedDate }).(pulumi.StringOutput)
}

func (o SlotTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SlotType) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o SlotTypeOutput) EnumerationValues() SlotTypeEnumerationValueArrayOutput {
	return o.ApplyT(func(v *SlotType) SlotTypeEnumerationValueArrayOutput { return v.EnumerationValues }).(SlotTypeEnumerationValueArrayOutput)
}

func (o SlotTypeOutput) LastUpdatedDate() pulumi.StringOutput {
	return o.ApplyT(func(v *SlotType) pulumi.StringOutput { return v.LastUpdatedDate }).(pulumi.StringOutput)
}

func (o SlotTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SlotType) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SlotTypeOutput) ValueSelectionStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SlotType) pulumi.StringPtrOutput { return v.ValueSelectionStrategy }).(pulumi.StringPtrOutput)
}

func (o SlotTypeOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *SlotType) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type SlotTypeArrayOutput struct{ *pulumi.OutputState }

func (SlotTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SlotType)(nil)).Elem()
}

func (o SlotTypeArrayOutput) ToSlotTypeArrayOutput() SlotTypeArrayOutput {
	return o
}

func (o SlotTypeArrayOutput) ToSlotTypeArrayOutputWithContext(ctx context.Context) SlotTypeArrayOutput {
	return o
}

func (o SlotTypeArrayOutput) Index(i pulumi.IntInput) SlotTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SlotType {
		return vs[0].([]*SlotType)[vs[1].(int)]
	}).(SlotTypeOutput)
}

type SlotTypeMapOutput struct{ *pulumi.OutputState }

func (SlotTypeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SlotType)(nil)).Elem()
}

func (o SlotTypeMapOutput) ToSlotTypeMapOutput() SlotTypeMapOutput {
	return o
}

func (o SlotTypeMapOutput) ToSlotTypeMapOutputWithContext(ctx context.Context) SlotTypeMapOutput {
	return o
}

func (o SlotTypeMapOutput) MapIndex(k pulumi.StringInput) SlotTypeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SlotType {
		return vs[0].(map[string]*SlotType)[vs[1].(string)]
	}).(SlotTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SlotTypeInput)(nil)).Elem(), &SlotType{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlotTypeArrayInput)(nil)).Elem(), SlotTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlotTypeMapInput)(nil)).Elem(), SlotTypeMap{})
	pulumi.RegisterOutputType(SlotTypeOutput{})
	pulumi.RegisterOutputType(SlotTypeArrayOutput{})
	pulumi.RegisterOutputType(SlotTypeMapOutput{})
}
