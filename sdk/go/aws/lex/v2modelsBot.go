// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS Lex V2 Models Bot.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/lex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := lex.NewV2modelsBot(ctx, "example", &lex.V2modelsBotArgs{
//				DataPrivacies: lex.V2modelsBotDataPrivacyArray{
//					&lex.V2modelsBotDataPrivacyArgs{
//						ChildDirected: pulumi.Bool("boolean"),
//					},
//				},
//				IdleSessionTtlInSeconds: pulumi.Int(10),
//				RoleArn:                 pulumi.String("bot_example_arn"),
//				Tags: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Lex V2 Models Bot using the `example_id_arg`. For example:
//
// ```sh
//
//	$ pulumi import aws:lex/v2modelsBot:V2modelsBot example bot-id-12345678
//
// ```
type V2modelsBot struct {
	pulumi.CustomResourceState

	Arn pulumi.StringOutput `pulumi:"arn"`
	// Provides information on additional privacy protections Amazon Lex should use with the bot's data. See `dataPrivacy`
	DataPrivacies V2modelsBotDataPrivacyArrayOutput `pulumi:"dataPrivacies"`
	// Description of the bot. It appears in lists to help you identify a particular bot.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot. You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.
	IdleSessionTtlInSeconds pulumi.IntOutput `pulumi:"idleSessionTtlInSeconds"`
	// List of bot members in a network to be created. See `botMembers`.
	Members V2modelsBotMemberArrayOutput `pulumi:"members"`
	// Name of the bot. The bot name must be unique in the account that creates the bot. Type String. Length Constraints: Minimum length of 1. Maximum length of 100.
	Name pulumi.StringOutput `pulumi:"name"`
	// ARN of an IAM role that has permission to access the bot.
	//
	// The following arguments are optional:
	RoleArn pulumi.StringOutput `pulumi:"roleArn"`
	// List of tags to add to the bot. You can only add tags when you create a bot.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// List of tags to add to the test alias for a bot. You can only add tags when you create a bot.
	TestBotAliasTags pulumi.StringMapOutput       `pulumi:"testBotAliasTags"`
	Timeouts         V2modelsBotTimeoutsPtrOutput `pulumi:"timeouts"`
	// Type of a bot to create. Possible values are `"Bot"` and `"BotNetwork"`.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewV2modelsBot registers a new resource with the given unique name, arguments, and options.
func NewV2modelsBot(ctx *pulumi.Context,
	name string, args *V2modelsBotArgs, opts ...pulumi.ResourceOption) (*V2modelsBot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IdleSessionTtlInSeconds == nil {
		return nil, errors.New("invalid value for required argument 'IdleSessionTtlInSeconds'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"tagsAll",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource V2modelsBot
	err := ctx.RegisterResource("aws:lex/v2modelsBot:V2modelsBot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetV2modelsBot gets an existing V2modelsBot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetV2modelsBot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *V2modelsBotState, opts ...pulumi.ResourceOption) (*V2modelsBot, error) {
	var resource V2modelsBot
	err := ctx.ReadResource("aws:lex/v2modelsBot:V2modelsBot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering V2modelsBot resources.
type v2modelsBotState struct {
	Arn *string `pulumi:"arn"`
	// Provides information on additional privacy protections Amazon Lex should use with the bot's data. See `dataPrivacy`
	DataPrivacies []V2modelsBotDataPrivacy `pulumi:"dataPrivacies"`
	// Description of the bot. It appears in lists to help you identify a particular bot.
	Description *string `pulumi:"description"`
	// Time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot. You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.
	IdleSessionTtlInSeconds *int `pulumi:"idleSessionTtlInSeconds"`
	// List of bot members in a network to be created. See `botMembers`.
	Members []V2modelsBotMember `pulumi:"members"`
	// Name of the bot. The bot name must be unique in the account that creates the bot. Type String. Length Constraints: Minimum length of 1. Maximum length of 100.
	Name *string `pulumi:"name"`
	// ARN of an IAM role that has permission to access the bot.
	//
	// The following arguments are optional:
	RoleArn *string `pulumi:"roleArn"`
	// List of tags to add to the bot. You can only add tags when you create a bot.
	Tags map[string]string `pulumi:"tags"`
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// List of tags to add to the test alias for a bot. You can only add tags when you create a bot.
	TestBotAliasTags map[string]string    `pulumi:"testBotAliasTags"`
	Timeouts         *V2modelsBotTimeouts `pulumi:"timeouts"`
	// Type of a bot to create. Possible values are `"Bot"` and `"BotNetwork"`.
	Type *string `pulumi:"type"`
}

type V2modelsBotState struct {
	Arn pulumi.StringPtrInput
	// Provides information on additional privacy protections Amazon Lex should use with the bot's data. See `dataPrivacy`
	DataPrivacies V2modelsBotDataPrivacyArrayInput
	// Description of the bot. It appears in lists to help you identify a particular bot.
	Description pulumi.StringPtrInput
	// Time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot. You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.
	IdleSessionTtlInSeconds pulumi.IntPtrInput
	// List of bot members in a network to be created. See `botMembers`.
	Members V2modelsBotMemberArrayInput
	// Name of the bot. The bot name must be unique in the account that creates the bot. Type String. Length Constraints: Minimum length of 1. Maximum length of 100.
	Name pulumi.StringPtrInput
	// ARN of an IAM role that has permission to access the bot.
	//
	// The following arguments are optional:
	RoleArn pulumi.StringPtrInput
	// List of tags to add to the bot. You can only add tags when you create a bot.
	Tags pulumi.StringMapInput
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
	// List of tags to add to the test alias for a bot. You can only add tags when you create a bot.
	TestBotAliasTags pulumi.StringMapInput
	Timeouts         V2modelsBotTimeoutsPtrInput
	// Type of a bot to create. Possible values are `"Bot"` and `"BotNetwork"`.
	Type pulumi.StringPtrInput
}

func (V2modelsBotState) ElementType() reflect.Type {
	return reflect.TypeOf((*v2modelsBotState)(nil)).Elem()
}

type v2modelsBotArgs struct {
	// Provides information on additional privacy protections Amazon Lex should use with the bot's data. See `dataPrivacy`
	DataPrivacies []V2modelsBotDataPrivacy `pulumi:"dataPrivacies"`
	// Description of the bot. It appears in lists to help you identify a particular bot.
	Description *string `pulumi:"description"`
	// Time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot. You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.
	IdleSessionTtlInSeconds int `pulumi:"idleSessionTtlInSeconds"`
	// List of bot members in a network to be created. See `botMembers`.
	Members []V2modelsBotMember `pulumi:"members"`
	// Name of the bot. The bot name must be unique in the account that creates the bot. Type String. Length Constraints: Minimum length of 1. Maximum length of 100.
	Name *string `pulumi:"name"`
	// ARN of an IAM role that has permission to access the bot.
	//
	// The following arguments are optional:
	RoleArn string `pulumi:"roleArn"`
	// List of tags to add to the bot. You can only add tags when you create a bot.
	Tags map[string]string `pulumi:"tags"`
	// List of tags to add to the test alias for a bot. You can only add tags when you create a bot.
	TestBotAliasTags map[string]string    `pulumi:"testBotAliasTags"`
	Timeouts         *V2modelsBotTimeouts `pulumi:"timeouts"`
	// Type of a bot to create. Possible values are `"Bot"` and `"BotNetwork"`.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a V2modelsBot resource.
type V2modelsBotArgs struct {
	// Provides information on additional privacy protections Amazon Lex should use with the bot's data. See `dataPrivacy`
	DataPrivacies V2modelsBotDataPrivacyArrayInput
	// Description of the bot. It appears in lists to help you identify a particular bot.
	Description pulumi.StringPtrInput
	// Time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot. You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.
	IdleSessionTtlInSeconds pulumi.IntInput
	// List of bot members in a network to be created. See `botMembers`.
	Members V2modelsBotMemberArrayInput
	// Name of the bot. The bot name must be unique in the account that creates the bot. Type String. Length Constraints: Minimum length of 1. Maximum length of 100.
	Name pulumi.StringPtrInput
	// ARN of an IAM role that has permission to access the bot.
	//
	// The following arguments are optional:
	RoleArn pulumi.StringInput
	// List of tags to add to the bot. You can only add tags when you create a bot.
	Tags pulumi.StringMapInput
	// List of tags to add to the test alias for a bot. You can only add tags when you create a bot.
	TestBotAliasTags pulumi.StringMapInput
	Timeouts         V2modelsBotTimeoutsPtrInput
	// Type of a bot to create. Possible values are `"Bot"` and `"BotNetwork"`.
	Type pulumi.StringPtrInput
}

func (V2modelsBotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*v2modelsBotArgs)(nil)).Elem()
}

type V2modelsBotInput interface {
	pulumi.Input

	ToV2modelsBotOutput() V2modelsBotOutput
	ToV2modelsBotOutputWithContext(ctx context.Context) V2modelsBotOutput
}

func (*V2modelsBot) ElementType() reflect.Type {
	return reflect.TypeOf((**V2modelsBot)(nil)).Elem()
}

func (i *V2modelsBot) ToV2modelsBotOutput() V2modelsBotOutput {
	return i.ToV2modelsBotOutputWithContext(context.Background())
}

func (i *V2modelsBot) ToV2modelsBotOutputWithContext(ctx context.Context) V2modelsBotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2modelsBotOutput)
}

// V2modelsBotArrayInput is an input type that accepts V2modelsBotArray and V2modelsBotArrayOutput values.
// You can construct a concrete instance of `V2modelsBotArrayInput` via:
//
//	V2modelsBotArray{ V2modelsBotArgs{...} }
type V2modelsBotArrayInput interface {
	pulumi.Input

	ToV2modelsBotArrayOutput() V2modelsBotArrayOutput
	ToV2modelsBotArrayOutputWithContext(context.Context) V2modelsBotArrayOutput
}

type V2modelsBotArray []V2modelsBotInput

func (V2modelsBotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V2modelsBot)(nil)).Elem()
}

func (i V2modelsBotArray) ToV2modelsBotArrayOutput() V2modelsBotArrayOutput {
	return i.ToV2modelsBotArrayOutputWithContext(context.Background())
}

func (i V2modelsBotArray) ToV2modelsBotArrayOutputWithContext(ctx context.Context) V2modelsBotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2modelsBotArrayOutput)
}

// V2modelsBotMapInput is an input type that accepts V2modelsBotMap and V2modelsBotMapOutput values.
// You can construct a concrete instance of `V2modelsBotMapInput` via:
//
//	V2modelsBotMap{ "key": V2modelsBotArgs{...} }
type V2modelsBotMapInput interface {
	pulumi.Input

	ToV2modelsBotMapOutput() V2modelsBotMapOutput
	ToV2modelsBotMapOutputWithContext(context.Context) V2modelsBotMapOutput
}

type V2modelsBotMap map[string]V2modelsBotInput

func (V2modelsBotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V2modelsBot)(nil)).Elem()
}

func (i V2modelsBotMap) ToV2modelsBotMapOutput() V2modelsBotMapOutput {
	return i.ToV2modelsBotMapOutputWithContext(context.Background())
}

func (i V2modelsBotMap) ToV2modelsBotMapOutputWithContext(ctx context.Context) V2modelsBotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2modelsBotMapOutput)
}

type V2modelsBotOutput struct{ *pulumi.OutputState }

func (V2modelsBotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**V2modelsBot)(nil)).Elem()
}

func (o V2modelsBotOutput) ToV2modelsBotOutput() V2modelsBotOutput {
	return o
}

func (o V2modelsBotOutput) ToV2modelsBotOutputWithContext(ctx context.Context) V2modelsBotOutput {
	return o
}

func (o V2modelsBotOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *V2modelsBot) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Provides information on additional privacy protections Amazon Lex should use with the bot's data. See `dataPrivacy`
func (o V2modelsBotOutput) DataPrivacies() V2modelsBotDataPrivacyArrayOutput {
	return o.ApplyT(func(v *V2modelsBot) V2modelsBotDataPrivacyArrayOutput { return v.DataPrivacies }).(V2modelsBotDataPrivacyArrayOutput)
}

// Description of the bot. It appears in lists to help you identify a particular bot.
func (o V2modelsBotOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V2modelsBot) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot. You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.
func (o V2modelsBotOutput) IdleSessionTtlInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *V2modelsBot) pulumi.IntOutput { return v.IdleSessionTtlInSeconds }).(pulumi.IntOutput)
}

// List of bot members in a network to be created. See `botMembers`.
func (o V2modelsBotOutput) Members() V2modelsBotMemberArrayOutput {
	return o.ApplyT(func(v *V2modelsBot) V2modelsBotMemberArrayOutput { return v.Members }).(V2modelsBotMemberArrayOutput)
}

// Name of the bot. The bot name must be unique in the account that creates the bot. Type String. Length Constraints: Minimum length of 1. Maximum length of 100.
func (o V2modelsBotOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *V2modelsBot) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// ARN of an IAM role that has permission to access the bot.
//
// The following arguments are optional:
func (o V2modelsBotOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *V2modelsBot) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

// List of tags to add to the bot. You can only add tags when you create a bot.
func (o V2modelsBotOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *V2modelsBot) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Deprecated: Please use `tags` instead.
func (o V2modelsBotOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *V2modelsBot) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// List of tags to add to the test alias for a bot. You can only add tags when you create a bot.
func (o V2modelsBotOutput) TestBotAliasTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *V2modelsBot) pulumi.StringMapOutput { return v.TestBotAliasTags }).(pulumi.StringMapOutput)
}

func (o V2modelsBotOutput) Timeouts() V2modelsBotTimeoutsPtrOutput {
	return o.ApplyT(func(v *V2modelsBot) V2modelsBotTimeoutsPtrOutput { return v.Timeouts }).(V2modelsBotTimeoutsPtrOutput)
}

// Type of a bot to create. Possible values are `"Bot"` and `"BotNetwork"`.
func (o V2modelsBotOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *V2modelsBot) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type V2modelsBotArrayOutput struct{ *pulumi.OutputState }

func (V2modelsBotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V2modelsBot)(nil)).Elem()
}

func (o V2modelsBotArrayOutput) ToV2modelsBotArrayOutput() V2modelsBotArrayOutput {
	return o
}

func (o V2modelsBotArrayOutput) ToV2modelsBotArrayOutputWithContext(ctx context.Context) V2modelsBotArrayOutput {
	return o
}

func (o V2modelsBotArrayOutput) Index(i pulumi.IntInput) V2modelsBotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *V2modelsBot {
		return vs[0].([]*V2modelsBot)[vs[1].(int)]
	}).(V2modelsBotOutput)
}

type V2modelsBotMapOutput struct{ *pulumi.OutputState }

func (V2modelsBotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V2modelsBot)(nil)).Elem()
}

func (o V2modelsBotMapOutput) ToV2modelsBotMapOutput() V2modelsBotMapOutput {
	return o
}

func (o V2modelsBotMapOutput) ToV2modelsBotMapOutputWithContext(ctx context.Context) V2modelsBotMapOutput {
	return o
}

func (o V2modelsBotMapOutput) MapIndex(k pulumi.StringInput) V2modelsBotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *V2modelsBot {
		return vs[0].(map[string]*V2modelsBot)[vs[1].(string)]
	}).(V2modelsBotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*V2modelsBotInput)(nil)).Elem(), &V2modelsBot{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2modelsBotArrayInput)(nil)).Elem(), V2modelsBotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2modelsBotMapInput)(nil)).Elem(), V2modelsBotMap{})
	pulumi.RegisterOutputType(V2modelsBotOutput{})
	pulumi.RegisterOutputType(V2modelsBotArrayOutput{})
	pulumi.RegisterOutputType(V2modelsBotMapOutput{})
}
