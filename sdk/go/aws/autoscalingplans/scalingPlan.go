// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package autoscalingplans

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ScalingPlan struct {
	pulumi.CustomResourceState

	ApplicationSource   ScalingPlanApplicationSourceOutput       `pulumi:"applicationSource"`
	Name                pulumi.StringOutput                      `pulumi:"name"`
	ScalingInstructions ScalingPlanScalingInstructionArrayOutput `pulumi:"scalingInstructions"`
	ScalingPlanVersion  pulumi.IntOutput                         `pulumi:"scalingPlanVersion"`
}

// NewScalingPlan registers a new resource with the given unique name, arguments, and options.
func NewScalingPlan(ctx *pulumi.Context,
	name string, args *ScalingPlanArgs, opts ...pulumi.ResourceOption) (*ScalingPlan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationSource == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationSource'")
	}
	if args.ScalingInstructions == nil {
		return nil, errors.New("invalid value for required argument 'ScalingInstructions'")
	}
	var resource ScalingPlan
	err := ctx.RegisterResource("aws:autoscalingplans/scalingPlan:ScalingPlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScalingPlan gets an existing ScalingPlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScalingPlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScalingPlanState, opts ...pulumi.ResourceOption) (*ScalingPlan, error) {
	var resource ScalingPlan
	err := ctx.ReadResource("aws:autoscalingplans/scalingPlan:ScalingPlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScalingPlan resources.
type scalingPlanState struct {
	ApplicationSource   *ScalingPlanApplicationSource   `pulumi:"applicationSource"`
	Name                *string                         `pulumi:"name"`
	ScalingInstructions []ScalingPlanScalingInstruction `pulumi:"scalingInstructions"`
	ScalingPlanVersion  *int                            `pulumi:"scalingPlanVersion"`
}

type ScalingPlanState struct {
	ApplicationSource   ScalingPlanApplicationSourcePtrInput
	Name                pulumi.StringPtrInput
	ScalingInstructions ScalingPlanScalingInstructionArrayInput
	ScalingPlanVersion  pulumi.IntPtrInput
}

func (ScalingPlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*scalingPlanState)(nil)).Elem()
}

type scalingPlanArgs struct {
	ApplicationSource   ScalingPlanApplicationSource    `pulumi:"applicationSource"`
	Name                *string                         `pulumi:"name"`
	ScalingInstructions []ScalingPlanScalingInstruction `pulumi:"scalingInstructions"`
}

// The set of arguments for constructing a ScalingPlan resource.
type ScalingPlanArgs struct {
	ApplicationSource   ScalingPlanApplicationSourceInput
	Name                pulumi.StringPtrInput
	ScalingInstructions ScalingPlanScalingInstructionArrayInput
}

func (ScalingPlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scalingPlanArgs)(nil)).Elem()
}

type ScalingPlanInput interface {
	pulumi.Input

	ToScalingPlanOutput() ScalingPlanOutput
	ToScalingPlanOutputWithContext(ctx context.Context) ScalingPlanOutput
}

func (*ScalingPlan) ElementType() reflect.Type {
	return reflect.TypeOf((**ScalingPlan)(nil)).Elem()
}

func (i *ScalingPlan) ToScalingPlanOutput() ScalingPlanOutput {
	return i.ToScalingPlanOutputWithContext(context.Background())
}

func (i *ScalingPlan) ToScalingPlanOutputWithContext(ctx context.Context) ScalingPlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalingPlanOutput)
}

// ScalingPlanArrayInput is an input type that accepts ScalingPlanArray and ScalingPlanArrayOutput values.
// You can construct a concrete instance of `ScalingPlanArrayInput` via:
//
//	ScalingPlanArray{ ScalingPlanArgs{...} }
type ScalingPlanArrayInput interface {
	pulumi.Input

	ToScalingPlanArrayOutput() ScalingPlanArrayOutput
	ToScalingPlanArrayOutputWithContext(context.Context) ScalingPlanArrayOutput
}

type ScalingPlanArray []ScalingPlanInput

func (ScalingPlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScalingPlan)(nil)).Elem()
}

func (i ScalingPlanArray) ToScalingPlanArrayOutput() ScalingPlanArrayOutput {
	return i.ToScalingPlanArrayOutputWithContext(context.Background())
}

func (i ScalingPlanArray) ToScalingPlanArrayOutputWithContext(ctx context.Context) ScalingPlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalingPlanArrayOutput)
}

// ScalingPlanMapInput is an input type that accepts ScalingPlanMap and ScalingPlanMapOutput values.
// You can construct a concrete instance of `ScalingPlanMapInput` via:
//
//	ScalingPlanMap{ "key": ScalingPlanArgs{...} }
type ScalingPlanMapInput interface {
	pulumi.Input

	ToScalingPlanMapOutput() ScalingPlanMapOutput
	ToScalingPlanMapOutputWithContext(context.Context) ScalingPlanMapOutput
}

type ScalingPlanMap map[string]ScalingPlanInput

func (ScalingPlanMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScalingPlan)(nil)).Elem()
}

func (i ScalingPlanMap) ToScalingPlanMapOutput() ScalingPlanMapOutput {
	return i.ToScalingPlanMapOutputWithContext(context.Background())
}

func (i ScalingPlanMap) ToScalingPlanMapOutputWithContext(ctx context.Context) ScalingPlanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalingPlanMapOutput)
}

type ScalingPlanOutput struct{ *pulumi.OutputState }

func (ScalingPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScalingPlan)(nil)).Elem()
}

func (o ScalingPlanOutput) ToScalingPlanOutput() ScalingPlanOutput {
	return o
}

func (o ScalingPlanOutput) ToScalingPlanOutputWithContext(ctx context.Context) ScalingPlanOutput {
	return o
}

func (o ScalingPlanOutput) ApplicationSource() ScalingPlanApplicationSourceOutput {
	return o.ApplyT(func(v *ScalingPlan) ScalingPlanApplicationSourceOutput { return v.ApplicationSource }).(ScalingPlanApplicationSourceOutput)
}

func (o ScalingPlanOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ScalingPlan) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ScalingPlanOutput) ScalingInstructions() ScalingPlanScalingInstructionArrayOutput {
	return o.ApplyT(func(v *ScalingPlan) ScalingPlanScalingInstructionArrayOutput { return v.ScalingInstructions }).(ScalingPlanScalingInstructionArrayOutput)
}

func (o ScalingPlanOutput) ScalingPlanVersion() pulumi.IntOutput {
	return o.ApplyT(func(v *ScalingPlan) pulumi.IntOutput { return v.ScalingPlanVersion }).(pulumi.IntOutput)
}

type ScalingPlanArrayOutput struct{ *pulumi.OutputState }

func (ScalingPlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScalingPlan)(nil)).Elem()
}

func (o ScalingPlanArrayOutput) ToScalingPlanArrayOutput() ScalingPlanArrayOutput {
	return o
}

func (o ScalingPlanArrayOutput) ToScalingPlanArrayOutputWithContext(ctx context.Context) ScalingPlanArrayOutput {
	return o
}

func (o ScalingPlanArrayOutput) Index(i pulumi.IntInput) ScalingPlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ScalingPlan {
		return vs[0].([]*ScalingPlan)[vs[1].(int)]
	}).(ScalingPlanOutput)
}

type ScalingPlanMapOutput struct{ *pulumi.OutputState }

func (ScalingPlanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScalingPlan)(nil)).Elem()
}

func (o ScalingPlanMapOutput) ToScalingPlanMapOutput() ScalingPlanMapOutput {
	return o
}

func (o ScalingPlanMapOutput) ToScalingPlanMapOutputWithContext(ctx context.Context) ScalingPlanMapOutput {
	return o
}

func (o ScalingPlanMapOutput) MapIndex(k pulumi.StringInput) ScalingPlanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ScalingPlan {
		return vs[0].(map[string]*ScalingPlan)[vs[1].(string)]
	}).(ScalingPlanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScalingPlanInput)(nil)).Elem(), &ScalingPlan{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScalingPlanArrayInput)(nil)).Elem(), ScalingPlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScalingPlanMapInput)(nil)).Elem(), ScalingPlanMap{})
	pulumi.RegisterOutputType(ScalingPlanOutput{})
	pulumi.RegisterOutputType(ScalingPlanArrayOutput{})
	pulumi.RegisterOutputType(ScalingPlanMapOutput{})
}
