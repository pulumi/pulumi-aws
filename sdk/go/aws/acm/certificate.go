// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package acm

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The ACM certificate resource allows requesting and management of certificates
// from the Amazon Certificate Manager.
//
// It deals with requesting certificates and managing their attributes and life-cycle.
// This resource does not deal with validation of a certificate but can provide inputs
// for other resources implementing the validation. It does not wait for a certificate to be issued.
// Use a `acm.CertificateValidation` resource for this.
//
// Most commonly, this resource is used to together with `route53.Record` and
// `acm.CertificateValidation` to request a DNS validated certificate,
// deploy the required validation records and wait for validation to complete.
//
// Domain validation through E-Mail is also supported but should be avoided as it requires a manual step outside
// of this provider.
//
// It's recommended to specify `createBeforeDestroy = true` in a [lifecycle][1] block to replace a certificate
// which is currently in use (eg, by `lb.Listener`).
//
//
// ## options Configuration Block
//
// Supported nested arguments for the `options` configuration block:
//
// * `certificateTransparencyLoggingPreference` - (Optional) Specifies whether certificate details should be added to a certificate transparency log. Valid values are `ENABLED` or `DISABLED`. See https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency for more details.
type Certificate struct {
	pulumi.CustomResourceState

	// The ARN of the certificate
	Arn pulumi.StringOutput `pulumi:"arn"`
	// ARN of an ACMPCA
	CertificateAuthorityArn pulumi.StringPtrOutput `pulumi:"certificateAuthorityArn"`
	// The certificate's PEM-formatted public key
	CertificateBody pulumi.StringPtrOutput `pulumi:"certificateBody"`
	// The certificate's PEM-formatted chain
	// * Creating a private CA issued certificate
	CertificateChain pulumi.StringPtrOutput `pulumi:"certificateChain"`
	// A domain name for which the certificate should be issued
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// A list of attributes to feed into other resources to complete certificate validation. Can have more than one element, e.g. if SANs are defined. Only set if `DNS`-validation was used.
	DomainValidationOptions CertificateDomainValidationOptionArrayOutput `pulumi:"domainValidationOptions"`
	Options                 CertificateOptionsPtrOutput                  `pulumi:"options"`
	// The certificate's PEM-formatted private key
	PrivateKey pulumi.StringPtrOutput `pulumi:"privateKey"`
	// A list of domains that should be SANs in the issued certificate
	SubjectAlternativeNames pulumi.StringArrayOutput `pulumi:"subjectAlternativeNames"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`
	// A list of addresses that received a validation E-Mail. Only set if `EMAIL`-validation was used.
	ValidationEmails pulumi.StringArrayOutput `pulumi:"validationEmails"`
	// Which method to use for validation. `DNS` or `EMAIL` are valid, `NONE` can be used for certificates that were imported into ACM and then into state managed by this provider.
	// * Importing an existing certificate
	ValidationMethod pulumi.StringOutput `pulumi:"validationMethod"`
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOption) (*Certificate, error) {
	if args == nil {
		args = &CertificateArgs{}
	}
	var resource Certificate
	err := ctx.RegisterResource("aws:acm/certificate:Certificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateState, opts ...pulumi.ResourceOption) (*Certificate, error) {
	var resource Certificate
	err := ctx.ReadResource("aws:acm/certificate:Certificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Certificate resources.
type certificateState struct {
	// The ARN of the certificate
	Arn *string `pulumi:"arn"`
	// ARN of an ACMPCA
	CertificateAuthorityArn *string `pulumi:"certificateAuthorityArn"`
	// The certificate's PEM-formatted public key
	CertificateBody *string `pulumi:"certificateBody"`
	// The certificate's PEM-formatted chain
	// * Creating a private CA issued certificate
	CertificateChain *string `pulumi:"certificateChain"`
	// A domain name for which the certificate should be issued
	DomainName *string `pulumi:"domainName"`
	// A list of attributes to feed into other resources to complete certificate validation. Can have more than one element, e.g. if SANs are defined. Only set if `DNS`-validation was used.
	DomainValidationOptions []CertificateDomainValidationOption `pulumi:"domainValidationOptions"`
	Options                 *CertificateOptions                 `pulumi:"options"`
	// The certificate's PEM-formatted private key
	PrivateKey *string `pulumi:"privateKey"`
	// A list of domains that should be SANs in the issued certificate
	SubjectAlternativeNames []string `pulumi:"subjectAlternativeNames"`
	// A mapping of tags to assign to the resource.
	Tags map[string]interface{} `pulumi:"tags"`
	// A list of addresses that received a validation E-Mail. Only set if `EMAIL`-validation was used.
	ValidationEmails []string `pulumi:"validationEmails"`
	// Which method to use for validation. `DNS` or `EMAIL` are valid, `NONE` can be used for certificates that were imported into ACM and then into state managed by this provider.
	// * Importing an existing certificate
	ValidationMethod *string `pulumi:"validationMethod"`
}

type CertificateState struct {
	// The ARN of the certificate
	Arn pulumi.StringPtrInput
	// ARN of an ACMPCA
	CertificateAuthorityArn pulumi.StringPtrInput
	// The certificate's PEM-formatted public key
	CertificateBody pulumi.StringPtrInput
	// The certificate's PEM-formatted chain
	// * Creating a private CA issued certificate
	CertificateChain pulumi.StringPtrInput
	// A domain name for which the certificate should be issued
	DomainName pulumi.StringPtrInput
	// A list of attributes to feed into other resources to complete certificate validation. Can have more than one element, e.g. if SANs are defined. Only set if `DNS`-validation was used.
	DomainValidationOptions CertificateDomainValidationOptionArrayInput
	Options                 CertificateOptionsPtrInput
	// The certificate's PEM-formatted private key
	PrivateKey pulumi.StringPtrInput
	// A list of domains that should be SANs in the issued certificate
	SubjectAlternativeNames pulumi.StringArrayInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput
	// A list of addresses that received a validation E-Mail. Only set if `EMAIL`-validation was used.
	ValidationEmails pulumi.StringArrayInput
	// Which method to use for validation. `DNS` or `EMAIL` are valid, `NONE` can be used for certificates that were imported into ACM and then into state managed by this provider.
	// * Importing an existing certificate
	ValidationMethod pulumi.StringPtrInput
}

func (CertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateState)(nil)).Elem()
}

type certificateArgs struct {
	// ARN of an ACMPCA
	CertificateAuthorityArn *string `pulumi:"certificateAuthorityArn"`
	// The certificate's PEM-formatted public key
	CertificateBody *string `pulumi:"certificateBody"`
	// The certificate's PEM-formatted chain
	// * Creating a private CA issued certificate
	CertificateChain *string `pulumi:"certificateChain"`
	// A domain name for which the certificate should be issued
	DomainName *string             `pulumi:"domainName"`
	Options    *CertificateOptions `pulumi:"options"`
	// The certificate's PEM-formatted private key
	PrivateKey *string `pulumi:"privateKey"`
	// A list of domains that should be SANs in the issued certificate
	SubjectAlternativeNames []string `pulumi:"subjectAlternativeNames"`
	// A mapping of tags to assign to the resource.
	Tags map[string]interface{} `pulumi:"tags"`
	// Which method to use for validation. `DNS` or `EMAIL` are valid, `NONE` can be used for certificates that were imported into ACM and then into state managed by this provider.
	// * Importing an existing certificate
	ValidationMethod *string `pulumi:"validationMethod"`
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	// ARN of an ACMPCA
	CertificateAuthorityArn pulumi.StringPtrInput
	// The certificate's PEM-formatted public key
	CertificateBody pulumi.StringPtrInput
	// The certificate's PEM-formatted chain
	// * Creating a private CA issued certificate
	CertificateChain pulumi.StringPtrInput
	// A domain name for which the certificate should be issued
	DomainName pulumi.StringPtrInput
	Options    CertificateOptionsPtrInput
	// The certificate's PEM-formatted private key
	PrivateKey pulumi.StringPtrInput
	// A list of domains that should be SANs in the issued certificate
	SubjectAlternativeNames pulumi.StringArrayInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput
	// Which method to use for validation. `DNS` or `EMAIL` are valid, `NONE` can be used for certificates that were imported into ACM and then into state managed by this provider.
	// * Importing an existing certificate
	ValidationMethod pulumi.StringPtrInput
}

func (CertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateArgs)(nil)).Elem()
}
