// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package acm

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Certificate struct {
	pulumi.CustomResourceState

	Arn                     pulumi.StringOutput                          `pulumi:"arn"`
	CertificateAuthorityArn pulumi.StringPtrOutput                       `pulumi:"certificateAuthorityArn"`
	CertificateBody         pulumi.StringPtrOutput                       `pulumi:"certificateBody"`
	CertificateChain        pulumi.StringPtrOutput                       `pulumi:"certificateChain"`
	DomainName              pulumi.StringOutput                          `pulumi:"domainName"`
	DomainValidationOptions CertificateDomainValidationOptionArrayOutput `pulumi:"domainValidationOptions"`
	EarlyRenewalDuration    pulumi.StringPtrOutput                       `pulumi:"earlyRenewalDuration"`
	KeyAlgorithm            pulumi.StringOutput                          `pulumi:"keyAlgorithm"`
	NotAfter                pulumi.StringOutput                          `pulumi:"notAfter"`
	NotBefore               pulumi.StringOutput                          `pulumi:"notBefore"`
	Options                 CertificateOptionsPtrOutput                  `pulumi:"options"`
	PendingRenewal          pulumi.BoolOutput                            `pulumi:"pendingRenewal"`
	PrivateKey              pulumi.StringPtrOutput                       `pulumi:"privateKey"`
	RenewalEligibility      pulumi.StringOutput                          `pulumi:"renewalEligibility"`
	RenewalSummaries        CertificateRenewalSummaryArrayOutput         `pulumi:"renewalSummaries"`
	Status                  pulumi.StringOutput                          `pulumi:"status"`
	SubjectAlternativeNames pulumi.StringArrayOutput                     `pulumi:"subjectAlternativeNames"`
	Tags                    pulumi.StringMapOutput                       `pulumi:"tags"`
	TagsAll                 pulumi.StringMapOutput                       `pulumi:"tagsAll"`
	Type                    pulumi.StringOutput                          `pulumi:"type"`
	ValidationEmails        pulumi.StringArrayOutput                     `pulumi:"validationEmails"`
	ValidationMethod        pulumi.StringOutput                          `pulumi:"validationMethod"`
	ValidationOptions       CertificateValidationOptionArrayOutput       `pulumi:"validationOptions"`
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOption) (*Certificate, error) {
	if args == nil {
		args = &CertificateArgs{}
	}

	if args.PrivateKey != nil {
		args.PrivateKey = pulumi.ToSecret(args.PrivateKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"privateKey",
	})
	opts = append(opts, secrets)
	var resource Certificate
	err := ctx.RegisterResource("aws:acm/certificate:Certificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateState, opts ...pulumi.ResourceOption) (*Certificate, error) {
	var resource Certificate
	err := ctx.ReadResource("aws:acm/certificate:Certificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Certificate resources.
type certificateState struct {
	Arn                     *string                             `pulumi:"arn"`
	CertificateAuthorityArn *string                             `pulumi:"certificateAuthorityArn"`
	CertificateBody         *string                             `pulumi:"certificateBody"`
	CertificateChain        *string                             `pulumi:"certificateChain"`
	DomainName              *string                             `pulumi:"domainName"`
	DomainValidationOptions []CertificateDomainValidationOption `pulumi:"domainValidationOptions"`
	EarlyRenewalDuration    *string                             `pulumi:"earlyRenewalDuration"`
	KeyAlgorithm            *string                             `pulumi:"keyAlgorithm"`
	NotAfter                *string                             `pulumi:"notAfter"`
	NotBefore               *string                             `pulumi:"notBefore"`
	Options                 *CertificateOptions                 `pulumi:"options"`
	PendingRenewal          *bool                               `pulumi:"pendingRenewal"`
	PrivateKey              *string                             `pulumi:"privateKey"`
	RenewalEligibility      *string                             `pulumi:"renewalEligibility"`
	RenewalSummaries        []CertificateRenewalSummary         `pulumi:"renewalSummaries"`
	Status                  *string                             `pulumi:"status"`
	SubjectAlternativeNames []string                            `pulumi:"subjectAlternativeNames"`
	Tags                    map[string]string                   `pulumi:"tags"`
	TagsAll                 map[string]string                   `pulumi:"tagsAll"`
	Type                    *string                             `pulumi:"type"`
	ValidationEmails        []string                            `pulumi:"validationEmails"`
	ValidationMethod        *string                             `pulumi:"validationMethod"`
	ValidationOptions       []CertificateValidationOption       `pulumi:"validationOptions"`
}

type CertificateState struct {
	Arn                     pulumi.StringPtrInput
	CertificateAuthorityArn pulumi.StringPtrInput
	CertificateBody         pulumi.StringPtrInput
	CertificateChain        pulumi.StringPtrInput
	DomainName              pulumi.StringPtrInput
	DomainValidationOptions CertificateDomainValidationOptionArrayInput
	EarlyRenewalDuration    pulumi.StringPtrInput
	KeyAlgorithm            pulumi.StringPtrInput
	NotAfter                pulumi.StringPtrInput
	NotBefore               pulumi.StringPtrInput
	Options                 CertificateOptionsPtrInput
	PendingRenewal          pulumi.BoolPtrInput
	PrivateKey              pulumi.StringPtrInput
	RenewalEligibility      pulumi.StringPtrInput
	RenewalSummaries        CertificateRenewalSummaryArrayInput
	Status                  pulumi.StringPtrInput
	SubjectAlternativeNames pulumi.StringArrayInput
	Tags                    pulumi.StringMapInput
	TagsAll                 pulumi.StringMapInput
	Type                    pulumi.StringPtrInput
	ValidationEmails        pulumi.StringArrayInput
	ValidationMethod        pulumi.StringPtrInput
	ValidationOptions       CertificateValidationOptionArrayInput
}

func (CertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateState)(nil)).Elem()
}

type certificateArgs struct {
	CertificateAuthorityArn *string                       `pulumi:"certificateAuthorityArn"`
	CertificateBody         *string                       `pulumi:"certificateBody"`
	CertificateChain        *string                       `pulumi:"certificateChain"`
	DomainName              *string                       `pulumi:"domainName"`
	EarlyRenewalDuration    *string                       `pulumi:"earlyRenewalDuration"`
	KeyAlgorithm            *string                       `pulumi:"keyAlgorithm"`
	Options                 *CertificateOptions           `pulumi:"options"`
	PrivateKey              *string                       `pulumi:"privateKey"`
	SubjectAlternativeNames []string                      `pulumi:"subjectAlternativeNames"`
	Tags                    map[string]string             `pulumi:"tags"`
	ValidationMethod        *string                       `pulumi:"validationMethod"`
	ValidationOptions       []CertificateValidationOption `pulumi:"validationOptions"`
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	CertificateAuthorityArn pulumi.StringPtrInput
	CertificateBody         pulumi.StringPtrInput
	CertificateChain        pulumi.StringPtrInput
	DomainName              pulumi.StringPtrInput
	EarlyRenewalDuration    pulumi.StringPtrInput
	KeyAlgorithm            pulumi.StringPtrInput
	Options                 CertificateOptionsPtrInput
	PrivateKey              pulumi.StringPtrInput
	SubjectAlternativeNames pulumi.StringArrayInput
	Tags                    pulumi.StringMapInput
	ValidationMethod        pulumi.StringPtrInput
	ValidationOptions       CertificateValidationOptionArrayInput
}

func (CertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateArgs)(nil)).Elem()
}

type CertificateInput interface {
	pulumi.Input

	ToCertificateOutput() CertificateOutput
	ToCertificateOutputWithContext(ctx context.Context) CertificateOutput
}

func (*Certificate) ElementType() reflect.Type {
	return reflect.TypeOf((**Certificate)(nil)).Elem()
}

func (i *Certificate) ToCertificateOutput() CertificateOutput {
	return i.ToCertificateOutputWithContext(context.Background())
}

func (i *Certificate) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateOutput)
}

// CertificateArrayInput is an input type that accepts CertificateArray and CertificateArrayOutput values.
// You can construct a concrete instance of `CertificateArrayInput` via:
//
//	CertificateArray{ CertificateArgs{...} }
type CertificateArrayInput interface {
	pulumi.Input

	ToCertificateArrayOutput() CertificateArrayOutput
	ToCertificateArrayOutputWithContext(context.Context) CertificateArrayOutput
}

type CertificateArray []CertificateInput

func (CertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Certificate)(nil)).Elem()
}

func (i CertificateArray) ToCertificateArrayOutput() CertificateArrayOutput {
	return i.ToCertificateArrayOutputWithContext(context.Background())
}

func (i CertificateArray) ToCertificateArrayOutputWithContext(ctx context.Context) CertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateArrayOutput)
}

// CertificateMapInput is an input type that accepts CertificateMap and CertificateMapOutput values.
// You can construct a concrete instance of `CertificateMapInput` via:
//
//	CertificateMap{ "key": CertificateArgs{...} }
type CertificateMapInput interface {
	pulumi.Input

	ToCertificateMapOutput() CertificateMapOutput
	ToCertificateMapOutputWithContext(context.Context) CertificateMapOutput
}

type CertificateMap map[string]CertificateInput

func (CertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Certificate)(nil)).Elem()
}

func (i CertificateMap) ToCertificateMapOutput() CertificateMapOutput {
	return i.ToCertificateMapOutputWithContext(context.Background())
}

func (i CertificateMap) ToCertificateMapOutputWithContext(ctx context.Context) CertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateMapOutput)
}

type CertificateOutput struct{ *pulumi.OutputState }

func (CertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Certificate)(nil)).Elem()
}

func (o CertificateOutput) ToCertificateOutput() CertificateOutput {
	return o
}

func (o CertificateOutput) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return o
}

func (o CertificateOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o CertificateOutput) CertificateAuthorityArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringPtrOutput { return v.CertificateAuthorityArn }).(pulumi.StringPtrOutput)
}

func (o CertificateOutput) CertificateBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringPtrOutput { return v.CertificateBody }).(pulumi.StringPtrOutput)
}

func (o CertificateOutput) CertificateChain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringPtrOutput { return v.CertificateChain }).(pulumi.StringPtrOutput)
}

func (o CertificateOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

func (o CertificateOutput) DomainValidationOptions() CertificateDomainValidationOptionArrayOutput {
	return o.ApplyT(func(v *Certificate) CertificateDomainValidationOptionArrayOutput { return v.DomainValidationOptions }).(CertificateDomainValidationOptionArrayOutput)
}

func (o CertificateOutput) EarlyRenewalDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringPtrOutput { return v.EarlyRenewalDuration }).(pulumi.StringPtrOutput)
}

func (o CertificateOutput) KeyAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.KeyAlgorithm }).(pulumi.StringOutput)
}

func (o CertificateOutput) NotAfter() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.NotAfter }).(pulumi.StringOutput)
}

func (o CertificateOutput) NotBefore() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.NotBefore }).(pulumi.StringOutput)
}

func (o CertificateOutput) Options() CertificateOptionsPtrOutput {
	return o.ApplyT(func(v *Certificate) CertificateOptionsPtrOutput { return v.Options }).(CertificateOptionsPtrOutput)
}

func (o CertificateOutput) PendingRenewal() pulumi.BoolOutput {
	return o.ApplyT(func(v *Certificate) pulumi.BoolOutput { return v.PendingRenewal }).(pulumi.BoolOutput)
}

func (o CertificateOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringPtrOutput { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

func (o CertificateOutput) RenewalEligibility() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.RenewalEligibility }).(pulumi.StringOutput)
}

func (o CertificateOutput) RenewalSummaries() CertificateRenewalSummaryArrayOutput {
	return o.ApplyT(func(v *Certificate) CertificateRenewalSummaryArrayOutput { return v.RenewalSummaries }).(CertificateRenewalSummaryArrayOutput)
}

func (o CertificateOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o CertificateOutput) SubjectAlternativeNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringArrayOutput { return v.SubjectAlternativeNames }).(pulumi.StringArrayOutput)
}

func (o CertificateOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o CertificateOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o CertificateOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o CertificateOutput) ValidationEmails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringArrayOutput { return v.ValidationEmails }).(pulumi.StringArrayOutput)
}

func (o CertificateOutput) ValidationMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.ValidationMethod }).(pulumi.StringOutput)
}

func (o CertificateOutput) ValidationOptions() CertificateValidationOptionArrayOutput {
	return o.ApplyT(func(v *Certificate) CertificateValidationOptionArrayOutput { return v.ValidationOptions }).(CertificateValidationOptionArrayOutput)
}

type CertificateArrayOutput struct{ *pulumi.OutputState }

func (CertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Certificate)(nil)).Elem()
}

func (o CertificateArrayOutput) ToCertificateArrayOutput() CertificateArrayOutput {
	return o
}

func (o CertificateArrayOutput) ToCertificateArrayOutputWithContext(ctx context.Context) CertificateArrayOutput {
	return o
}

func (o CertificateArrayOutput) Index(i pulumi.IntInput) CertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Certificate {
		return vs[0].([]*Certificate)[vs[1].(int)]
	}).(CertificateOutput)
}

type CertificateMapOutput struct{ *pulumi.OutputState }

func (CertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Certificate)(nil)).Elem()
}

func (o CertificateMapOutput) ToCertificateMapOutput() CertificateMapOutput {
	return o
}

func (o CertificateMapOutput) ToCertificateMapOutputWithContext(ctx context.Context) CertificateMapOutput {
	return o
}

func (o CertificateMapOutput) MapIndex(k pulumi.StringInput) CertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Certificate {
		return vs[0].(map[string]*Certificate)[vs[1].(string)]
	}).(CertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateInput)(nil)).Elem(), &Certificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateArrayInput)(nil)).Elem(), CertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateMapInput)(nil)).Elem(), CertificateMap{})
	pulumi.RegisterOutputType(CertificateOutput{})
	pulumi.RegisterOutputType(CertificateArrayOutput{})
	pulumi.RegisterOutputType(CertificateMapOutput{})
}
