// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package acm

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type CertificateDomainValidationOption struct {
	// Fully qualified domain name (FQDN) in the certificate.
	DomainName *string `pulumi:"domainName"`
	// The name of the DNS record to create to validate the certificate
	ResourceRecordName *string `pulumi:"resourceRecordName"`
	// The type of DNS record to create
	ResourceRecordType *string `pulumi:"resourceRecordType"`
	// The value the DNS record needs to have
	ResourceRecordValue *string `pulumi:"resourceRecordValue"`
}

// CertificateDomainValidationOptionInput is an input type that accepts CertificateDomainValidationOptionArgs and CertificateDomainValidationOptionOutput values.
// You can construct a concrete instance of `CertificateDomainValidationOptionInput` via:
//
//	CertificateDomainValidationOptionArgs{...}
type CertificateDomainValidationOptionInput interface {
	pulumi.Input

	ToCertificateDomainValidationOptionOutput() CertificateDomainValidationOptionOutput
	ToCertificateDomainValidationOptionOutputWithContext(context.Context) CertificateDomainValidationOptionOutput
}

type CertificateDomainValidationOptionArgs struct {
	// Fully qualified domain name (FQDN) in the certificate.
	DomainName pulumi.StringPtrInput `pulumi:"domainName"`
	// The name of the DNS record to create to validate the certificate
	ResourceRecordName pulumi.StringPtrInput `pulumi:"resourceRecordName"`
	// The type of DNS record to create
	ResourceRecordType pulumi.StringPtrInput `pulumi:"resourceRecordType"`
	// The value the DNS record needs to have
	ResourceRecordValue pulumi.StringPtrInput `pulumi:"resourceRecordValue"`
}

func (CertificateDomainValidationOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateDomainValidationOption)(nil)).Elem()
}

func (i CertificateDomainValidationOptionArgs) ToCertificateDomainValidationOptionOutput() CertificateDomainValidationOptionOutput {
	return i.ToCertificateDomainValidationOptionOutputWithContext(context.Background())
}

func (i CertificateDomainValidationOptionArgs) ToCertificateDomainValidationOptionOutputWithContext(ctx context.Context) CertificateDomainValidationOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateDomainValidationOptionOutput)
}

// CertificateDomainValidationOptionArrayInput is an input type that accepts CertificateDomainValidationOptionArray and CertificateDomainValidationOptionArrayOutput values.
// You can construct a concrete instance of `CertificateDomainValidationOptionArrayInput` via:
//
//	CertificateDomainValidationOptionArray{ CertificateDomainValidationOptionArgs{...} }
type CertificateDomainValidationOptionArrayInput interface {
	pulumi.Input

	ToCertificateDomainValidationOptionArrayOutput() CertificateDomainValidationOptionArrayOutput
	ToCertificateDomainValidationOptionArrayOutputWithContext(context.Context) CertificateDomainValidationOptionArrayOutput
}

type CertificateDomainValidationOptionArray []CertificateDomainValidationOptionInput

func (CertificateDomainValidationOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateDomainValidationOption)(nil)).Elem()
}

func (i CertificateDomainValidationOptionArray) ToCertificateDomainValidationOptionArrayOutput() CertificateDomainValidationOptionArrayOutput {
	return i.ToCertificateDomainValidationOptionArrayOutputWithContext(context.Background())
}

func (i CertificateDomainValidationOptionArray) ToCertificateDomainValidationOptionArrayOutputWithContext(ctx context.Context) CertificateDomainValidationOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateDomainValidationOptionArrayOutput)
}

type CertificateDomainValidationOptionOutput struct{ *pulumi.OutputState }

func (CertificateDomainValidationOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateDomainValidationOption)(nil)).Elem()
}

func (o CertificateDomainValidationOptionOutput) ToCertificateDomainValidationOptionOutput() CertificateDomainValidationOptionOutput {
	return o
}

func (o CertificateDomainValidationOptionOutput) ToCertificateDomainValidationOptionOutputWithContext(ctx context.Context) CertificateDomainValidationOptionOutput {
	return o
}

// Fully qualified domain name (FQDN) in the certificate.
func (o CertificateDomainValidationOptionOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateDomainValidationOption) *string { return v.DomainName }).(pulumi.StringPtrOutput)
}

// The name of the DNS record to create to validate the certificate
func (o CertificateDomainValidationOptionOutput) ResourceRecordName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateDomainValidationOption) *string { return v.ResourceRecordName }).(pulumi.StringPtrOutput)
}

// The type of DNS record to create
func (o CertificateDomainValidationOptionOutput) ResourceRecordType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateDomainValidationOption) *string { return v.ResourceRecordType }).(pulumi.StringPtrOutput)
}

// The value the DNS record needs to have
func (o CertificateDomainValidationOptionOutput) ResourceRecordValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateDomainValidationOption) *string { return v.ResourceRecordValue }).(pulumi.StringPtrOutput)
}

type CertificateDomainValidationOptionArrayOutput struct{ *pulumi.OutputState }

func (CertificateDomainValidationOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateDomainValidationOption)(nil)).Elem()
}

func (o CertificateDomainValidationOptionArrayOutput) ToCertificateDomainValidationOptionArrayOutput() CertificateDomainValidationOptionArrayOutput {
	return o
}

func (o CertificateDomainValidationOptionArrayOutput) ToCertificateDomainValidationOptionArrayOutputWithContext(ctx context.Context) CertificateDomainValidationOptionArrayOutput {
	return o
}

func (o CertificateDomainValidationOptionArrayOutput) Index(i pulumi.IntInput) CertificateDomainValidationOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CertificateDomainValidationOption {
		return vs[0].([]CertificateDomainValidationOption)[vs[1].(int)]
	}).(CertificateDomainValidationOptionOutput)
}

type CertificateOptions struct {
	// Whether certificate details should be added to a certificate transparency log. Valid values are `ENABLED` or `DISABLED`. See https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency for more details.
	CertificateTransparencyLoggingPreference *string `pulumi:"certificateTransparencyLoggingPreference"`
}

// CertificateOptionsInput is an input type that accepts CertificateOptionsArgs and CertificateOptionsOutput values.
// You can construct a concrete instance of `CertificateOptionsInput` via:
//
//	CertificateOptionsArgs{...}
type CertificateOptionsInput interface {
	pulumi.Input

	ToCertificateOptionsOutput() CertificateOptionsOutput
	ToCertificateOptionsOutputWithContext(context.Context) CertificateOptionsOutput
}

type CertificateOptionsArgs struct {
	// Whether certificate details should be added to a certificate transparency log. Valid values are `ENABLED` or `DISABLED`. See https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency for more details.
	CertificateTransparencyLoggingPreference pulumi.StringPtrInput `pulumi:"certificateTransparencyLoggingPreference"`
}

func (CertificateOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateOptions)(nil)).Elem()
}

func (i CertificateOptionsArgs) ToCertificateOptionsOutput() CertificateOptionsOutput {
	return i.ToCertificateOptionsOutputWithContext(context.Background())
}

func (i CertificateOptionsArgs) ToCertificateOptionsOutputWithContext(ctx context.Context) CertificateOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateOptionsOutput)
}

func (i CertificateOptionsArgs) ToCertificateOptionsPtrOutput() CertificateOptionsPtrOutput {
	return i.ToCertificateOptionsPtrOutputWithContext(context.Background())
}

func (i CertificateOptionsArgs) ToCertificateOptionsPtrOutputWithContext(ctx context.Context) CertificateOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateOptionsOutput).ToCertificateOptionsPtrOutputWithContext(ctx)
}

// CertificateOptionsPtrInput is an input type that accepts CertificateOptionsArgs, CertificateOptionsPtr and CertificateOptionsPtrOutput values.
// You can construct a concrete instance of `CertificateOptionsPtrInput` via:
//
//	        CertificateOptionsArgs{...}
//
//	or:
//
//	        nil
type CertificateOptionsPtrInput interface {
	pulumi.Input

	ToCertificateOptionsPtrOutput() CertificateOptionsPtrOutput
	ToCertificateOptionsPtrOutputWithContext(context.Context) CertificateOptionsPtrOutput
}

type certificateOptionsPtrType CertificateOptionsArgs

func CertificateOptionsPtr(v *CertificateOptionsArgs) CertificateOptionsPtrInput {
	return (*certificateOptionsPtrType)(v)
}

func (*certificateOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateOptions)(nil)).Elem()
}

func (i *certificateOptionsPtrType) ToCertificateOptionsPtrOutput() CertificateOptionsPtrOutput {
	return i.ToCertificateOptionsPtrOutputWithContext(context.Background())
}

func (i *certificateOptionsPtrType) ToCertificateOptionsPtrOutputWithContext(ctx context.Context) CertificateOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateOptionsPtrOutput)
}

type CertificateOptionsOutput struct{ *pulumi.OutputState }

func (CertificateOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateOptions)(nil)).Elem()
}

func (o CertificateOptionsOutput) ToCertificateOptionsOutput() CertificateOptionsOutput {
	return o
}

func (o CertificateOptionsOutput) ToCertificateOptionsOutputWithContext(ctx context.Context) CertificateOptionsOutput {
	return o
}

func (o CertificateOptionsOutput) ToCertificateOptionsPtrOutput() CertificateOptionsPtrOutput {
	return o.ToCertificateOptionsPtrOutputWithContext(context.Background())
}

func (o CertificateOptionsOutput) ToCertificateOptionsPtrOutputWithContext(ctx context.Context) CertificateOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertificateOptions) *CertificateOptions {
		return &v
	}).(CertificateOptionsPtrOutput)
}

// Whether certificate details should be added to a certificate transparency log. Valid values are `ENABLED` or `DISABLED`. See https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency for more details.
func (o CertificateOptionsOutput) CertificateTransparencyLoggingPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateOptions) *string { return v.CertificateTransparencyLoggingPreference }).(pulumi.StringPtrOutput)
}

type CertificateOptionsPtrOutput struct{ *pulumi.OutputState }

func (CertificateOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateOptions)(nil)).Elem()
}

func (o CertificateOptionsPtrOutput) ToCertificateOptionsPtrOutput() CertificateOptionsPtrOutput {
	return o
}

func (o CertificateOptionsPtrOutput) ToCertificateOptionsPtrOutputWithContext(ctx context.Context) CertificateOptionsPtrOutput {
	return o
}

func (o CertificateOptionsPtrOutput) Elem() CertificateOptionsOutput {
	return o.ApplyT(func(v *CertificateOptions) CertificateOptions {
		if v != nil {
			return *v
		}
		var ret CertificateOptions
		return ret
	}).(CertificateOptionsOutput)
}

// Whether certificate details should be added to a certificate transparency log. Valid values are `ENABLED` or `DISABLED`. See https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency for more details.
func (o CertificateOptionsPtrOutput) CertificateTransparencyLoggingPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateOptions) *string {
		if v == nil {
			return nil
		}
		return v.CertificateTransparencyLoggingPreference
	}).(pulumi.StringPtrOutput)
}

type CertificateRenewalSummary struct {
	// The status of ACM's managed renewal of the certificate
	RenewalStatus *string `pulumi:"renewalStatus"`
	// The reason that a renewal request was unsuccessful or is pending
	RenewalStatusReason *string `pulumi:"renewalStatusReason"`
	UpdatedAt           *string `pulumi:"updatedAt"`
}

// CertificateRenewalSummaryInput is an input type that accepts CertificateRenewalSummaryArgs and CertificateRenewalSummaryOutput values.
// You can construct a concrete instance of `CertificateRenewalSummaryInput` via:
//
//	CertificateRenewalSummaryArgs{...}
type CertificateRenewalSummaryInput interface {
	pulumi.Input

	ToCertificateRenewalSummaryOutput() CertificateRenewalSummaryOutput
	ToCertificateRenewalSummaryOutputWithContext(context.Context) CertificateRenewalSummaryOutput
}

type CertificateRenewalSummaryArgs struct {
	// The status of ACM's managed renewal of the certificate
	RenewalStatus pulumi.StringPtrInput `pulumi:"renewalStatus"`
	// The reason that a renewal request was unsuccessful or is pending
	RenewalStatusReason pulumi.StringPtrInput `pulumi:"renewalStatusReason"`
	UpdatedAt           pulumi.StringPtrInput `pulumi:"updatedAt"`
}

func (CertificateRenewalSummaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateRenewalSummary)(nil)).Elem()
}

func (i CertificateRenewalSummaryArgs) ToCertificateRenewalSummaryOutput() CertificateRenewalSummaryOutput {
	return i.ToCertificateRenewalSummaryOutputWithContext(context.Background())
}

func (i CertificateRenewalSummaryArgs) ToCertificateRenewalSummaryOutputWithContext(ctx context.Context) CertificateRenewalSummaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateRenewalSummaryOutput)
}

// CertificateRenewalSummaryArrayInput is an input type that accepts CertificateRenewalSummaryArray and CertificateRenewalSummaryArrayOutput values.
// You can construct a concrete instance of `CertificateRenewalSummaryArrayInput` via:
//
//	CertificateRenewalSummaryArray{ CertificateRenewalSummaryArgs{...} }
type CertificateRenewalSummaryArrayInput interface {
	pulumi.Input

	ToCertificateRenewalSummaryArrayOutput() CertificateRenewalSummaryArrayOutput
	ToCertificateRenewalSummaryArrayOutputWithContext(context.Context) CertificateRenewalSummaryArrayOutput
}

type CertificateRenewalSummaryArray []CertificateRenewalSummaryInput

func (CertificateRenewalSummaryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateRenewalSummary)(nil)).Elem()
}

func (i CertificateRenewalSummaryArray) ToCertificateRenewalSummaryArrayOutput() CertificateRenewalSummaryArrayOutput {
	return i.ToCertificateRenewalSummaryArrayOutputWithContext(context.Background())
}

func (i CertificateRenewalSummaryArray) ToCertificateRenewalSummaryArrayOutputWithContext(ctx context.Context) CertificateRenewalSummaryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateRenewalSummaryArrayOutput)
}

type CertificateRenewalSummaryOutput struct{ *pulumi.OutputState }

func (CertificateRenewalSummaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateRenewalSummary)(nil)).Elem()
}

func (o CertificateRenewalSummaryOutput) ToCertificateRenewalSummaryOutput() CertificateRenewalSummaryOutput {
	return o
}

func (o CertificateRenewalSummaryOutput) ToCertificateRenewalSummaryOutputWithContext(ctx context.Context) CertificateRenewalSummaryOutput {
	return o
}

// The status of ACM's managed renewal of the certificate
func (o CertificateRenewalSummaryOutput) RenewalStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateRenewalSummary) *string { return v.RenewalStatus }).(pulumi.StringPtrOutput)
}

// The reason that a renewal request was unsuccessful or is pending
func (o CertificateRenewalSummaryOutput) RenewalStatusReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateRenewalSummary) *string { return v.RenewalStatusReason }).(pulumi.StringPtrOutput)
}

func (o CertificateRenewalSummaryOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateRenewalSummary) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

type CertificateRenewalSummaryArrayOutput struct{ *pulumi.OutputState }

func (CertificateRenewalSummaryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateRenewalSummary)(nil)).Elem()
}

func (o CertificateRenewalSummaryArrayOutput) ToCertificateRenewalSummaryArrayOutput() CertificateRenewalSummaryArrayOutput {
	return o
}

func (o CertificateRenewalSummaryArrayOutput) ToCertificateRenewalSummaryArrayOutputWithContext(ctx context.Context) CertificateRenewalSummaryArrayOutput {
	return o
}

func (o CertificateRenewalSummaryArrayOutput) Index(i pulumi.IntInput) CertificateRenewalSummaryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CertificateRenewalSummary {
		return vs[0].([]CertificateRenewalSummary)[vs[1].(int)]
	}).(CertificateRenewalSummaryOutput)
}

type CertificateValidationOption struct {
	// Fully qualified domain name (FQDN) in the certificate.
	DomainName string `pulumi:"domainName"`
	// Domain name that you want ACM to use to send you validation emails. This domain name is the suffix of the email addresses that you want ACM to use. This must be the same as the `domainName` value or a superdomain of the `domainName` value. For example, if you request a certificate for `"testing.example.com"`, you can specify `"example.com"` for this value.
	ValidationDomain string `pulumi:"validationDomain"`
}

// CertificateValidationOptionInput is an input type that accepts CertificateValidationOptionArgs and CertificateValidationOptionOutput values.
// You can construct a concrete instance of `CertificateValidationOptionInput` via:
//
//	CertificateValidationOptionArgs{...}
type CertificateValidationOptionInput interface {
	pulumi.Input

	ToCertificateValidationOptionOutput() CertificateValidationOptionOutput
	ToCertificateValidationOptionOutputWithContext(context.Context) CertificateValidationOptionOutput
}

type CertificateValidationOptionArgs struct {
	// Fully qualified domain name (FQDN) in the certificate.
	DomainName pulumi.StringInput `pulumi:"domainName"`
	// Domain name that you want ACM to use to send you validation emails. This domain name is the suffix of the email addresses that you want ACM to use. This must be the same as the `domainName` value or a superdomain of the `domainName` value. For example, if you request a certificate for `"testing.example.com"`, you can specify `"example.com"` for this value.
	ValidationDomain pulumi.StringInput `pulumi:"validationDomain"`
}

func (CertificateValidationOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateValidationOption)(nil)).Elem()
}

func (i CertificateValidationOptionArgs) ToCertificateValidationOptionOutput() CertificateValidationOptionOutput {
	return i.ToCertificateValidationOptionOutputWithContext(context.Background())
}

func (i CertificateValidationOptionArgs) ToCertificateValidationOptionOutputWithContext(ctx context.Context) CertificateValidationOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateValidationOptionOutput)
}

// CertificateValidationOptionArrayInput is an input type that accepts CertificateValidationOptionArray and CertificateValidationOptionArrayOutput values.
// You can construct a concrete instance of `CertificateValidationOptionArrayInput` via:
//
//	CertificateValidationOptionArray{ CertificateValidationOptionArgs{...} }
type CertificateValidationOptionArrayInput interface {
	pulumi.Input

	ToCertificateValidationOptionArrayOutput() CertificateValidationOptionArrayOutput
	ToCertificateValidationOptionArrayOutputWithContext(context.Context) CertificateValidationOptionArrayOutput
}

type CertificateValidationOptionArray []CertificateValidationOptionInput

func (CertificateValidationOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateValidationOption)(nil)).Elem()
}

func (i CertificateValidationOptionArray) ToCertificateValidationOptionArrayOutput() CertificateValidationOptionArrayOutput {
	return i.ToCertificateValidationOptionArrayOutputWithContext(context.Background())
}

func (i CertificateValidationOptionArray) ToCertificateValidationOptionArrayOutputWithContext(ctx context.Context) CertificateValidationOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateValidationOptionArrayOutput)
}

type CertificateValidationOptionOutput struct{ *pulumi.OutputState }

func (CertificateValidationOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateValidationOption)(nil)).Elem()
}

func (o CertificateValidationOptionOutput) ToCertificateValidationOptionOutput() CertificateValidationOptionOutput {
	return o
}

func (o CertificateValidationOptionOutput) ToCertificateValidationOptionOutputWithContext(ctx context.Context) CertificateValidationOptionOutput {
	return o
}

// Fully qualified domain name (FQDN) in the certificate.
func (o CertificateValidationOptionOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateValidationOption) string { return v.DomainName }).(pulumi.StringOutput)
}

// Domain name that you want ACM to use to send you validation emails. This domain name is the suffix of the email addresses that you want ACM to use. This must be the same as the `domainName` value or a superdomain of the `domainName` value. For example, if you request a certificate for `"testing.example.com"`, you can specify `"example.com"` for this value.
func (o CertificateValidationOptionOutput) ValidationDomain() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateValidationOption) string { return v.ValidationDomain }).(pulumi.StringOutput)
}

type CertificateValidationOptionArrayOutput struct{ *pulumi.OutputState }

func (CertificateValidationOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateValidationOption)(nil)).Elem()
}

func (o CertificateValidationOptionArrayOutput) ToCertificateValidationOptionArrayOutput() CertificateValidationOptionArrayOutput {
	return o
}

func (o CertificateValidationOptionArrayOutput) ToCertificateValidationOptionArrayOutputWithContext(ctx context.Context) CertificateValidationOptionArrayOutput {
	return o
}

func (o CertificateValidationOptionArrayOutput) Index(i pulumi.IntInput) CertificateValidationOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CertificateValidationOption {
		return vs[0].([]CertificateValidationOption)[vs[1].(int)]
	}).(CertificateValidationOptionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateDomainValidationOptionInput)(nil)).Elem(), CertificateDomainValidationOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateDomainValidationOptionArrayInput)(nil)).Elem(), CertificateDomainValidationOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateOptionsInput)(nil)).Elem(), CertificateOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateOptionsPtrInput)(nil)).Elem(), CertificateOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateRenewalSummaryInput)(nil)).Elem(), CertificateRenewalSummaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateRenewalSummaryArrayInput)(nil)).Elem(), CertificateRenewalSummaryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateValidationOptionInput)(nil)).Elem(), CertificateValidationOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateValidationOptionArrayInput)(nil)).Elem(), CertificateValidationOptionArray{})
	pulumi.RegisterOutputType(CertificateDomainValidationOptionOutput{})
	pulumi.RegisterOutputType(CertificateDomainValidationOptionArrayOutput{})
	pulumi.RegisterOutputType(CertificateOptionsOutput{})
	pulumi.RegisterOutputType(CertificateOptionsPtrOutput{})
	pulumi.RegisterOutputType(CertificateRenewalSummaryOutput{})
	pulumi.RegisterOutputType(CertificateRenewalSummaryArrayOutput{})
	pulumi.RegisterOutputType(CertificateValidationOptionOutput{})
	pulumi.RegisterOutputType(CertificateValidationOptionArrayOutput{})
}
