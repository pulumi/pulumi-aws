// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package acm

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource represents a successful validation of an ACM certificate in concert
// with other resources.
//
// Most commonly, this resource is used together with `route53.Record` and
// `acm.Certificate` to request a DNS validated certificate,
// deploy the required validation records and wait for validation to complete.
//
// > **WARNING:** This resource implements a part of the validation workflow. It does not represent a real-world entity in AWS, therefore changing or deleting this resource on its own has no immediate effect.
//
// ## Example Usage
// ### DNS Validation with Route 53
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/acm"
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/route53"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//	        exampleCertificate, err := acm.NewCertificate(ctx, "exampleCertificate", &acm.CertificateArgs{
//	            DomainName:       pulumi.String("example.com"),
//	            ValidationMethod: pulumi.String("DNS"),
//	        })
//	        if err != nil {
//	            return err
//	        }
//
//	        exampleZone, err := route53.LookupZone(ctx, &route53.LookupZoneArgs{
//	            Name:        pulumi.StringRef("example.com"),
//	            PrivateZone: pulumi.BoolRef(false),
//	        }, nil)
//	        if err != nil {
//	            return err
//	        }
//
//	        domainValidationOption := exampleCertificate.DomainValidationOptions.ApplyT(func(options []acm.CertificateDomainValidationOption) interface{} {
//	            return options[0]
//	        })
//
//	        certValidation, err := route53.NewRecord(ctx, "certValidation", &route53.RecordArgs{
//	            Name: domainValidationOption.ApplyT(func(option interface{}) string {
//	                return *option.(acm.CertificateDomainValidationOption).ResourceRecordName
//	            }).(pulumi.StringOutput),
//	            Type: domainValidationOption.ApplyT(func(option interface{}) string {
//	                return *option.(acm.CertificateDomainValidationOption).ResourceRecordType
//	            }).(pulumi.StringOutput),
//	            Records: pulumi.StringArray{
//	                domainValidationOption.ApplyT(func(option interface{}) string {
//	                    return *option.(acm.CertificateDomainValidationOption).ResourceRecordValue
//	                }).(pulumi.StringOutput),
//	            },
//	            Ttl:    pulumi.Int(10 * 60),
//	            ZoneId: pulumi.String(exampleZone.ZoneId),
//	        })
//	        if err != nil {
//	            return err
//	        }
//
//	        certCertificateValidation, err := acm.NewCertificateValidation(ctx, "cert", &acm.CertificateValidationArgs{
//	            CertificateArn: exampleCertificate.Arn,
//	            ValidationRecordFqdns: pulumi.StringArray{
//	                certValidation.Fqdn,
//	            },
//	        })
//	        if err != nil {
//	            return err
//	        }
//
//	        ctx.Export("certificateArn", certCertificateValidation.CertificateArn)
//
//	        return nil
//	    })
//	}
//
// ```
// ### Email Validation
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/acm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//	        exampleCertificate, err := acm.NewCertificate(ctx, "exampleCertificate", &acm.CertificateArgs{
//	            DomainName: pulumi.String("example.com"),
//	            ValidationMethod: pulumi.String("EMAIL"),
//	        })
//	        if err != nil {
//	            return err
//	        }
//
//	        _, err = acm.NewCertificateValidation(ctx, "exampleCertificateValidation", &acm.CertificateValidationArgs{
//	            CertificateArn: exampleCertificate.Arn,
//	        })
//	        if err != nil {
//	            return err
//	        }
//			return nil
//		})
//	}
//
// ```
type CertificateValidation struct {
	pulumi.CustomResourceState

	// ARN of the certificate that is being validated.
	CertificateArn pulumi.StringOutput `pulumi:"certificateArn"`
	// List of FQDNs that implement the validation. Only valid for DNS validation method ACM certificates. If this is set, the resource can implement additional sanity checks and has an explicit dependency on the resource that is implementing the validation
	ValidationRecordFqdns pulumi.StringArrayOutput `pulumi:"validationRecordFqdns"`
}

// NewCertificateValidation registers a new resource with the given unique name, arguments, and options.
func NewCertificateValidation(ctx *pulumi.Context,
	name string, args *CertificateValidationArgs, opts ...pulumi.ResourceOption) (*CertificateValidation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateArn == nil {
		return nil, errors.New("invalid value for required argument 'CertificateArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CertificateValidation
	err := ctx.RegisterResource("aws:acm/certificateValidation:CertificateValidation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificateValidation gets an existing CertificateValidation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificateValidation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateValidationState, opts ...pulumi.ResourceOption) (*CertificateValidation, error) {
	var resource CertificateValidation
	err := ctx.ReadResource("aws:acm/certificateValidation:CertificateValidation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CertificateValidation resources.
type certificateValidationState struct {
	// ARN of the certificate that is being validated.
	CertificateArn *string `pulumi:"certificateArn"`
	// List of FQDNs that implement the validation. Only valid for DNS validation method ACM certificates. If this is set, the resource can implement additional sanity checks and has an explicit dependency on the resource that is implementing the validation
	ValidationRecordFqdns []string `pulumi:"validationRecordFqdns"`
}

type CertificateValidationState struct {
	// ARN of the certificate that is being validated.
	CertificateArn pulumi.StringPtrInput
	// List of FQDNs that implement the validation. Only valid for DNS validation method ACM certificates. If this is set, the resource can implement additional sanity checks and has an explicit dependency on the resource that is implementing the validation
	ValidationRecordFqdns pulumi.StringArrayInput
}

func (CertificateValidationState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateValidationState)(nil)).Elem()
}

type certificateValidationArgs struct {
	// ARN of the certificate that is being validated.
	CertificateArn string `pulumi:"certificateArn"`
	// List of FQDNs that implement the validation. Only valid for DNS validation method ACM certificates. If this is set, the resource can implement additional sanity checks and has an explicit dependency on the resource that is implementing the validation
	ValidationRecordFqdns []string `pulumi:"validationRecordFqdns"`
}

// The set of arguments for constructing a CertificateValidation resource.
type CertificateValidationArgs struct {
	// ARN of the certificate that is being validated.
	CertificateArn pulumi.StringInput
	// List of FQDNs that implement the validation. Only valid for DNS validation method ACM certificates. If this is set, the resource can implement additional sanity checks and has an explicit dependency on the resource that is implementing the validation
	ValidationRecordFqdns pulumi.StringArrayInput
}

func (CertificateValidationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateValidationArgs)(nil)).Elem()
}

type CertificateValidationInput interface {
	pulumi.Input

	ToCertificateValidationOutput() CertificateValidationOutput
	ToCertificateValidationOutputWithContext(ctx context.Context) CertificateValidationOutput
}

func (*CertificateValidation) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateValidation)(nil)).Elem()
}

func (i *CertificateValidation) ToCertificateValidationOutput() CertificateValidationOutput {
	return i.ToCertificateValidationOutputWithContext(context.Background())
}

func (i *CertificateValidation) ToCertificateValidationOutputWithContext(ctx context.Context) CertificateValidationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateValidationOutput)
}

// CertificateValidationArrayInput is an input type that accepts CertificateValidationArray and CertificateValidationArrayOutput values.
// You can construct a concrete instance of `CertificateValidationArrayInput` via:
//
//	CertificateValidationArray{ CertificateValidationArgs{...} }
type CertificateValidationArrayInput interface {
	pulumi.Input

	ToCertificateValidationArrayOutput() CertificateValidationArrayOutput
	ToCertificateValidationArrayOutputWithContext(context.Context) CertificateValidationArrayOutput
}

type CertificateValidationArray []CertificateValidationInput

func (CertificateValidationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificateValidation)(nil)).Elem()
}

func (i CertificateValidationArray) ToCertificateValidationArrayOutput() CertificateValidationArrayOutput {
	return i.ToCertificateValidationArrayOutputWithContext(context.Background())
}

func (i CertificateValidationArray) ToCertificateValidationArrayOutputWithContext(ctx context.Context) CertificateValidationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateValidationArrayOutput)
}

// CertificateValidationMapInput is an input type that accepts CertificateValidationMap and CertificateValidationMapOutput values.
// You can construct a concrete instance of `CertificateValidationMapInput` via:
//
//	CertificateValidationMap{ "key": CertificateValidationArgs{...} }
type CertificateValidationMapInput interface {
	pulumi.Input

	ToCertificateValidationMapOutput() CertificateValidationMapOutput
	ToCertificateValidationMapOutputWithContext(context.Context) CertificateValidationMapOutput
}

type CertificateValidationMap map[string]CertificateValidationInput

func (CertificateValidationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificateValidation)(nil)).Elem()
}

func (i CertificateValidationMap) ToCertificateValidationMapOutput() CertificateValidationMapOutput {
	return i.ToCertificateValidationMapOutputWithContext(context.Background())
}

func (i CertificateValidationMap) ToCertificateValidationMapOutputWithContext(ctx context.Context) CertificateValidationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateValidationMapOutput)
}

type CertificateValidationOutput struct{ *pulumi.OutputState }

func (CertificateValidationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateValidation)(nil)).Elem()
}

func (o CertificateValidationOutput) ToCertificateValidationOutput() CertificateValidationOutput {
	return o
}

func (o CertificateValidationOutput) ToCertificateValidationOutputWithContext(ctx context.Context) CertificateValidationOutput {
	return o
}

// ARN of the certificate that is being validated.
func (o CertificateValidationOutput) CertificateArn() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateValidation) pulumi.StringOutput { return v.CertificateArn }).(pulumi.StringOutput)
}

// List of FQDNs that implement the validation. Only valid for DNS validation method ACM certificates. If this is set, the resource can implement additional sanity checks and has an explicit dependency on the resource that is implementing the validation
func (o CertificateValidationOutput) ValidationRecordFqdns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertificateValidation) pulumi.StringArrayOutput { return v.ValidationRecordFqdns }).(pulumi.StringArrayOutput)
}

type CertificateValidationArrayOutput struct{ *pulumi.OutputState }

func (CertificateValidationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificateValidation)(nil)).Elem()
}

func (o CertificateValidationArrayOutput) ToCertificateValidationArrayOutput() CertificateValidationArrayOutput {
	return o
}

func (o CertificateValidationArrayOutput) ToCertificateValidationArrayOutputWithContext(ctx context.Context) CertificateValidationArrayOutput {
	return o
}

func (o CertificateValidationArrayOutput) Index(i pulumi.IntInput) CertificateValidationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CertificateValidation {
		return vs[0].([]*CertificateValidation)[vs[1].(int)]
	}).(CertificateValidationOutput)
}

type CertificateValidationMapOutput struct{ *pulumi.OutputState }

func (CertificateValidationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificateValidation)(nil)).Elem()
}

func (o CertificateValidationMapOutput) ToCertificateValidationMapOutput() CertificateValidationMapOutput {
	return o
}

func (o CertificateValidationMapOutput) ToCertificateValidationMapOutputWithContext(ctx context.Context) CertificateValidationMapOutput {
	return o
}

func (o CertificateValidationMapOutput) MapIndex(k pulumi.StringInput) CertificateValidationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CertificateValidation {
		return vs[0].(map[string]*CertificateValidation)[vs[1].(string)]
	}).(CertificateValidationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateValidationInput)(nil)).Elem(), &CertificateValidation{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateValidationArrayInput)(nil)).Elem(), CertificateValidationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateValidationMapInput)(nil)).Elem(), CertificateValidationMap{})
	pulumi.RegisterOutputType(CertificateValidationOutput{})
	pulumi.RegisterOutputType(CertificateValidationArrayOutput{})
	pulumi.RegisterOutputType(CertificateValidationMapOutput{})
}
