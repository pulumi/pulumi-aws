// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Use this data source to get information about an RDS instance
func Lookupnstance(ctx *pulumi.Context, args *GetInstanceArgs) (*GetInstanceResult, error) {
	inputs := make(map[string]interface{})
	if args != nil {
		inputs["dbInstanceIdentifier"] = args.DbInstanceIdentifier
	}
	outputs, err := ctx.Invoke("aws:rds/getInstance:getInstance", inputs)
	if err != nil {
		return nil, err
	}
	ret := GetInstanceResult{}
	if v, ok := outputs["address"]; ok {
		ret.Address = v
	}
	if v, ok := outputs["allocatedStorage"]; ok {
		ret.AllocatedStorage = v
	}
	if v, ok := outputs["autoMinorVersionUpgrade"]; ok {
		ret.AutoMinorVersionUpgrade = v
	}
	if v, ok := outputs["availabilityZone"]; ok {
		ret.AvailabilityZone = v
	}
	if v, ok := outputs["backupRetentionPeriod"]; ok {
		ret.BackupRetentionPeriod = v
	}
	if v, ok := outputs["caCertIdentifier"]; ok {
		ret.CaCertIdentifier = v
	}
	if v, ok := outputs["dbClusterIdentifier"]; ok {
		ret.DbClusterIdentifier = v
	}
	if v, ok := outputs["dbInstanceArn"]; ok {
		ret.DbInstanceArn = v
	}
	if v, ok := outputs["dbInstanceClass"]; ok {
		ret.DbInstanceClass = v
	}
	if v, ok := outputs["dbInstancePort"]; ok {
		ret.DbInstancePort = v
	}
	if v, ok := outputs["dbName"]; ok {
		ret.DbName = v
	}
	if v, ok := outputs["dbParameterGroups"]; ok {
		ret.DbParameterGroups = v
	}
	if v, ok := outputs["dbSecurityGroups"]; ok {
		ret.DbSecurityGroups = v
	}
	if v, ok := outputs["dbSubnetGroup"]; ok {
		ret.DbSubnetGroup = v
	}
	if v, ok := outputs["endpoint"]; ok {
		ret.Endpoint = v
	}
	if v, ok := outputs["engine"]; ok {
		ret.Engine = v
	}
	if v, ok := outputs["engineVersion"]; ok {
		ret.EngineVersion = v
	}
	if v, ok := outputs["hostedZoneId"]; ok {
		ret.HostedZoneId = v
	}
	if v, ok := outputs["iops"]; ok {
		ret.Iops = v
	}
	if v, ok := outputs["kmsKeyId"]; ok {
		ret.KmsKeyId = v
	}
	if v, ok := outputs["licenseModel"]; ok {
		ret.LicenseModel = v
	}
	if v, ok := outputs["masterUsername"]; ok {
		ret.MasterUsername = v
	}
	if v, ok := outputs["monitoringInterval"]; ok {
		ret.MonitoringInterval = v
	}
	if v, ok := outputs["monitoringRoleArn"]; ok {
		ret.MonitoringRoleArn = v
	}
	if v, ok := outputs["multiAz"]; ok {
		ret.MultiAz = v
	}
	if v, ok := outputs["optionGroupMemberships"]; ok {
		ret.OptionGroupMemberships = v
	}
	if v, ok := outputs["port"]; ok {
		ret.Port = v
	}
	if v, ok := outputs["preferredBackupWindow"]; ok {
		ret.PreferredBackupWindow = v
	}
	if v, ok := outputs["preferredMaintenanceWindow"]; ok {
		ret.PreferredMaintenanceWindow = v
	}
	if v, ok := outputs["publiclyAccessible"]; ok {
		ret.PubliclyAccessible = v
	}
	if v, ok := outputs["replicateSourceDb"]; ok {
		ret.ReplicateSourceDb = v
	}
	if v, ok := outputs["storageEncrypted"]; ok {
		ret.StorageEncrypted = v
	}
	if v, ok := outputs["storageType"]; ok {
		ret.StorageType = v
	}
	if v, ok := outputs["timezone"]; ok {
		ret.Timezone = v
	}
	if v, ok := outputs["vpcSecurityGroups"]; ok {
		ret.VpcSecurityGroups = v
	}
	return &ret, nil
}

// A collection of arguments for invoking getInstance.
type GetInstanceArgs struct {
	// The name of the RDS instance
	DbInstanceIdentifier interface{}
}

// A collection of values returned by getInstance.
type GetInstanceResult struct {
	// The address of the RDS instance.
	Address interface{}
	// Specifies the allocated storage size specified in gigabytes.
	AllocatedStorage interface{}
	// Indicates that minor version patches are applied automatically.
	AutoMinorVersionUpgrade interface{}
	// Specifies the name of the Availability Zone the DB instance is located in.
	AvailabilityZone interface{}
	// Specifies the number of days for which automatic DB snapshots are retained.
	BackupRetentionPeriod interface{}
	// Specifies the identifier of the CA certificate for the DB instance.
	CaCertIdentifier interface{}
	// If the DB instance is a member of a DB cluster, contains the name of the DB cluster that the DB instance is a member of.
	DbClusterIdentifier interface{}
	// The Amazon Resource Name (ARN) for the DB instance.
	DbInstanceArn interface{}
	// Contains the name of the compute and memory capacity class of the DB instance.
	DbInstanceClass interface{}
	// Specifies the port that the DB instance listens on.
	DbInstancePort interface{}
	// Contains the name of the initial database of this instance that was provided at create time, if one was specified when the DB instance was created. This same name is returned for the life of the DB instance.
	DbName interface{}
	// Provides the list of DB parameter groups applied to this DB instance.
	DbParameterGroups interface{}
	// Provides List of DB security groups associated to this DB instance.
	DbSecurityGroups interface{}
	// Specifies the name of the subnet group associated with the DB instance.
	DbSubnetGroup interface{}
	// The connection endpoint.
	Endpoint interface{}
	// Provides the name of the database engine to be used for this DB instance.
	Engine interface{}
	// Indicates the database engine version.
	EngineVersion interface{}
	// The canonical hosted zone ID of the DB instance (to be used in a Route 53 Alias record).
	HostedZoneId interface{}
	// Specifies the Provisioned IOPS (I/O operations per second) value.
	Iops interface{}
	// If StorageEncrypted is true, the KMS key identifier for the encrypted DB instance.
	KmsKeyId interface{}
	// License model information for this DB instance.
	LicenseModel interface{}
	// Contains the master username for the DB instance.
	MasterUsername interface{}
	// The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance.
	MonitoringInterval interface{}
	// The ARN for the IAM role that permits RDS to send Enhanced Monitoring metrics to CloudWatch Logs.
	MonitoringRoleArn interface{}
	// Specifies if the DB instance is a Multi-AZ deployment.
	MultiAz interface{}
	// Provides the list of option group memberships for this DB instance.
	OptionGroupMemberships interface{}
	// The database port.
	Port interface{}
	// Specifies the daily time range during which automated backups are created.
	PreferredBackupWindow interface{}
	// Specifies the weekly time range during which system maintenance can occur in UTC.
	PreferredMaintenanceWindow interface{}
	// Specifies the accessibility options for the DB instance.
	PubliclyAccessible interface{}
	// The identifier of the source DB that this is a replica of.
	ReplicateSourceDb interface{}
	// Specifies whether the DB instance is encrypted.
	StorageEncrypted interface{}
	// Specifies the storage type associated with DB instance.
	StorageType interface{}
	// The time zone of the DB instance.
	Timezone interface{}
	// Provides a list of VPC security group elements that the DB instance belongs to.
	VpcSecurityGroups interface{}
}
