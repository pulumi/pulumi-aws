// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS RDS (Relational Database) RDS Instance State.
//
// > Destruction of this resource is a no-op and **will not** modify the instance state
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/rds"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := rds.NewInstanceDesiredState(ctx, "test", &rds.InstanceDesiredStateArgs{
//				Identifier: pulumi.Any(testAwsDbInstance.Identifier),
//				State:      pulumi.String("available"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import RDS (Relational Database) RDS Instance State using the `example_id_arg`. For example:
//
// ```sh
// $ pulumi import aws:rds/instanceDesiredState:InstanceDesiredState example rds_instance_state-id-12345678
// ```
type InstanceDesiredState struct {
	pulumi.CustomResourceState

	// DB Instance Identifier
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Configured state of the DB Instance. Valid values are `available` and `stopped`.
	State    pulumi.StringOutput                   `pulumi:"state"`
	Timeouts InstanceDesiredStateTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewInstanceDesiredState registers a new resource with the given unique name, arguments, and options.
func NewInstanceDesiredState(ctx *pulumi.Context,
	name string, args *InstanceDesiredStateArgs, opts ...pulumi.ResourceOption) (*InstanceDesiredState, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.State == nil {
		return nil, errors.New("invalid value for required argument 'State'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InstanceDesiredState
	err := ctx.RegisterResource("aws:rds/instanceDesiredState:InstanceDesiredState", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceDesiredState gets an existing InstanceDesiredState resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceDesiredState(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceDesiredStateState, opts ...pulumi.ResourceOption) (*InstanceDesiredState, error) {
	var resource InstanceDesiredState
	err := ctx.ReadResource("aws:rds/instanceDesiredState:InstanceDesiredState", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceDesiredState resources.
type instanceDesiredStateState struct {
	// DB Instance Identifier
	Identifier *string `pulumi:"identifier"`
	// Configured state of the DB Instance. Valid values are `available` and `stopped`.
	State    *string                       `pulumi:"state"`
	Timeouts *InstanceDesiredStateTimeouts `pulumi:"timeouts"`
}

type InstanceDesiredStateState struct {
	// DB Instance Identifier
	Identifier pulumi.StringPtrInput
	// Configured state of the DB Instance. Valid values are `available` and `stopped`.
	State    pulumi.StringPtrInput
	Timeouts InstanceDesiredStateTimeoutsPtrInput
}

func (InstanceDesiredStateState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceDesiredStateState)(nil)).Elem()
}

type instanceDesiredStateArgs struct {
	// DB Instance Identifier
	Identifier string `pulumi:"identifier"`
	// Configured state of the DB Instance. Valid values are `available` and `stopped`.
	State    string                        `pulumi:"state"`
	Timeouts *InstanceDesiredStateTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a InstanceDesiredState resource.
type InstanceDesiredStateArgs struct {
	// DB Instance Identifier
	Identifier pulumi.StringInput
	// Configured state of the DB Instance. Valid values are `available` and `stopped`.
	State    pulumi.StringInput
	Timeouts InstanceDesiredStateTimeoutsPtrInput
}

func (InstanceDesiredStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceDesiredStateArgs)(nil)).Elem()
}

type InstanceDesiredStateInput interface {
	pulumi.Input

	ToInstanceDesiredStateOutput() InstanceDesiredStateOutput
	ToInstanceDesiredStateOutputWithContext(ctx context.Context) InstanceDesiredStateOutput
}

func (*InstanceDesiredState) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceDesiredState)(nil)).Elem()
}

func (i *InstanceDesiredState) ToInstanceDesiredStateOutput() InstanceDesiredStateOutput {
	return i.ToInstanceDesiredStateOutputWithContext(context.Background())
}

func (i *InstanceDesiredState) ToInstanceDesiredStateOutputWithContext(ctx context.Context) InstanceDesiredStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDesiredStateOutput)
}

// InstanceDesiredStateArrayInput is an input type that accepts InstanceDesiredStateArray and InstanceDesiredStateArrayOutput values.
// You can construct a concrete instance of `InstanceDesiredStateArrayInput` via:
//
//	InstanceDesiredStateArray{ InstanceDesiredStateArgs{...} }
type InstanceDesiredStateArrayInput interface {
	pulumi.Input

	ToInstanceDesiredStateArrayOutput() InstanceDesiredStateArrayOutput
	ToInstanceDesiredStateArrayOutputWithContext(context.Context) InstanceDesiredStateArrayOutput
}

type InstanceDesiredStateArray []InstanceDesiredStateInput

func (InstanceDesiredStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceDesiredState)(nil)).Elem()
}

func (i InstanceDesiredStateArray) ToInstanceDesiredStateArrayOutput() InstanceDesiredStateArrayOutput {
	return i.ToInstanceDesiredStateArrayOutputWithContext(context.Background())
}

func (i InstanceDesiredStateArray) ToInstanceDesiredStateArrayOutputWithContext(ctx context.Context) InstanceDesiredStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDesiredStateArrayOutput)
}

// InstanceDesiredStateMapInput is an input type that accepts InstanceDesiredStateMap and InstanceDesiredStateMapOutput values.
// You can construct a concrete instance of `InstanceDesiredStateMapInput` via:
//
//	InstanceDesiredStateMap{ "key": InstanceDesiredStateArgs{...} }
type InstanceDesiredStateMapInput interface {
	pulumi.Input

	ToInstanceDesiredStateMapOutput() InstanceDesiredStateMapOutput
	ToInstanceDesiredStateMapOutputWithContext(context.Context) InstanceDesiredStateMapOutput
}

type InstanceDesiredStateMap map[string]InstanceDesiredStateInput

func (InstanceDesiredStateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceDesiredState)(nil)).Elem()
}

func (i InstanceDesiredStateMap) ToInstanceDesiredStateMapOutput() InstanceDesiredStateMapOutput {
	return i.ToInstanceDesiredStateMapOutputWithContext(context.Background())
}

func (i InstanceDesiredStateMap) ToInstanceDesiredStateMapOutputWithContext(ctx context.Context) InstanceDesiredStateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDesiredStateMapOutput)
}

type InstanceDesiredStateOutput struct{ *pulumi.OutputState }

func (InstanceDesiredStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceDesiredState)(nil)).Elem()
}

func (o InstanceDesiredStateOutput) ToInstanceDesiredStateOutput() InstanceDesiredStateOutput {
	return o
}

func (o InstanceDesiredStateOutput) ToInstanceDesiredStateOutputWithContext(ctx context.Context) InstanceDesiredStateOutput {
	return o
}

// DB Instance Identifier
func (o InstanceDesiredStateOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceDesiredState) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Configured state of the DB Instance. Valid values are `available` and `stopped`.
func (o InstanceDesiredStateOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceDesiredState) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o InstanceDesiredStateOutput) Timeouts() InstanceDesiredStateTimeoutsPtrOutput {
	return o.ApplyT(func(v *InstanceDesiredState) InstanceDesiredStateTimeoutsPtrOutput { return v.Timeouts }).(InstanceDesiredStateTimeoutsPtrOutput)
}

type InstanceDesiredStateArrayOutput struct{ *pulumi.OutputState }

func (InstanceDesiredStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceDesiredState)(nil)).Elem()
}

func (o InstanceDesiredStateArrayOutput) ToInstanceDesiredStateArrayOutput() InstanceDesiredStateArrayOutput {
	return o
}

func (o InstanceDesiredStateArrayOutput) ToInstanceDesiredStateArrayOutputWithContext(ctx context.Context) InstanceDesiredStateArrayOutput {
	return o
}

func (o InstanceDesiredStateArrayOutput) Index(i pulumi.IntInput) InstanceDesiredStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InstanceDesiredState {
		return vs[0].([]*InstanceDesiredState)[vs[1].(int)]
	}).(InstanceDesiredStateOutput)
}

type InstanceDesiredStateMapOutput struct{ *pulumi.OutputState }

func (InstanceDesiredStateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceDesiredState)(nil)).Elem()
}

func (o InstanceDesiredStateMapOutput) ToInstanceDesiredStateMapOutput() InstanceDesiredStateMapOutput {
	return o
}

func (o InstanceDesiredStateMapOutput) ToInstanceDesiredStateMapOutputWithContext(ctx context.Context) InstanceDesiredStateMapOutput {
	return o
}

func (o InstanceDesiredStateMapOutput) MapIndex(k pulumi.StringInput) InstanceDesiredStateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InstanceDesiredState {
		return vs[0].(map[string]*InstanceDesiredState)[vs[1].(string)]
	}).(InstanceDesiredStateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceDesiredStateInput)(nil)).Elem(), &InstanceDesiredState{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceDesiredStateArrayInput)(nil)).Elem(), InstanceDesiredStateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceDesiredStateMapInput)(nil)).Elem(), InstanceDesiredStateMap{})
	pulumi.RegisterOutputType(InstanceDesiredStateOutput{})
	pulumi.RegisterOutputType(InstanceDesiredStateArrayOutput{})
	pulumi.RegisterOutputType(InstanceDesiredStateMapOutput{})
}
