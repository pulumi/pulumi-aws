// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ReservedInstance struct {
	pulumi.CustomResourceState

	Arn                pulumi.StringOutput                        `pulumi:"arn"`
	CurrencyCode       pulumi.StringOutput                        `pulumi:"currencyCode"`
	DbInstanceClass    pulumi.StringOutput                        `pulumi:"dbInstanceClass"`
	Duration           pulumi.IntOutput                           `pulumi:"duration"`
	FixedPrice         pulumi.Float64Output                       `pulumi:"fixedPrice"`
	InstanceCount      pulumi.IntPtrOutput                        `pulumi:"instanceCount"`
	LeaseId            pulumi.StringOutput                        `pulumi:"leaseId"`
	MultiAz            pulumi.BoolOutput                          `pulumi:"multiAz"`
	OfferingId         pulumi.StringOutput                        `pulumi:"offeringId"`
	OfferingType       pulumi.StringOutput                        `pulumi:"offeringType"`
	ProductDescription pulumi.StringOutput                        `pulumi:"productDescription"`
	RecurringCharges   ReservedInstanceRecurringChargeArrayOutput `pulumi:"recurringCharges"`
	ReservationId      pulumi.StringPtrOutput                     `pulumi:"reservationId"`
	StartTime          pulumi.StringOutput                        `pulumi:"startTime"`
	State              pulumi.StringOutput                        `pulumi:"state"`
	Tags               pulumi.StringMapOutput                     `pulumi:"tags"`
	TagsAll            pulumi.StringMapOutput                     `pulumi:"tagsAll"`
	UsagePrice         pulumi.Float64Output                       `pulumi:"usagePrice"`
}

// NewReservedInstance registers a new resource with the given unique name, arguments, and options.
func NewReservedInstance(ctx *pulumi.Context,
	name string, args *ReservedInstanceArgs, opts ...pulumi.ResourceOption) (*ReservedInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OfferingId == nil {
		return nil, errors.New("invalid value for required argument 'OfferingId'")
	}
	var resource ReservedInstance
	err := ctx.RegisterResource("aws:rds/reservedInstance:ReservedInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReservedInstance gets an existing ReservedInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReservedInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReservedInstanceState, opts ...pulumi.ResourceOption) (*ReservedInstance, error) {
	var resource ReservedInstance
	err := ctx.ReadResource("aws:rds/reservedInstance:ReservedInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReservedInstance resources.
type reservedInstanceState struct {
	Arn                *string                           `pulumi:"arn"`
	CurrencyCode       *string                           `pulumi:"currencyCode"`
	DbInstanceClass    *string                           `pulumi:"dbInstanceClass"`
	Duration           *int                              `pulumi:"duration"`
	FixedPrice         *float64                          `pulumi:"fixedPrice"`
	InstanceCount      *int                              `pulumi:"instanceCount"`
	LeaseId            *string                           `pulumi:"leaseId"`
	MultiAz            *bool                             `pulumi:"multiAz"`
	OfferingId         *string                           `pulumi:"offeringId"`
	OfferingType       *string                           `pulumi:"offeringType"`
	ProductDescription *string                           `pulumi:"productDescription"`
	RecurringCharges   []ReservedInstanceRecurringCharge `pulumi:"recurringCharges"`
	ReservationId      *string                           `pulumi:"reservationId"`
	StartTime          *string                           `pulumi:"startTime"`
	State              *string                           `pulumi:"state"`
	Tags               map[string]string                 `pulumi:"tags"`
	TagsAll            map[string]string                 `pulumi:"tagsAll"`
	UsagePrice         *float64                          `pulumi:"usagePrice"`
}

type ReservedInstanceState struct {
	Arn                pulumi.StringPtrInput
	CurrencyCode       pulumi.StringPtrInput
	DbInstanceClass    pulumi.StringPtrInput
	Duration           pulumi.IntPtrInput
	FixedPrice         pulumi.Float64PtrInput
	InstanceCount      pulumi.IntPtrInput
	LeaseId            pulumi.StringPtrInput
	MultiAz            pulumi.BoolPtrInput
	OfferingId         pulumi.StringPtrInput
	OfferingType       pulumi.StringPtrInput
	ProductDescription pulumi.StringPtrInput
	RecurringCharges   ReservedInstanceRecurringChargeArrayInput
	ReservationId      pulumi.StringPtrInput
	StartTime          pulumi.StringPtrInput
	State              pulumi.StringPtrInput
	Tags               pulumi.StringMapInput
	TagsAll            pulumi.StringMapInput
	UsagePrice         pulumi.Float64PtrInput
}

func (ReservedInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*reservedInstanceState)(nil)).Elem()
}

type reservedInstanceArgs struct {
	InstanceCount *int              `pulumi:"instanceCount"`
	OfferingId    string            `pulumi:"offeringId"`
	ReservationId *string           `pulumi:"reservationId"`
	Tags          map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ReservedInstance resource.
type ReservedInstanceArgs struct {
	InstanceCount pulumi.IntPtrInput
	OfferingId    pulumi.StringInput
	ReservationId pulumi.StringPtrInput
	Tags          pulumi.StringMapInput
}

func (ReservedInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*reservedInstanceArgs)(nil)).Elem()
}

type ReservedInstanceInput interface {
	pulumi.Input

	ToReservedInstanceOutput() ReservedInstanceOutput
	ToReservedInstanceOutputWithContext(ctx context.Context) ReservedInstanceOutput
}

func (*ReservedInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservedInstance)(nil)).Elem()
}

func (i *ReservedInstance) ToReservedInstanceOutput() ReservedInstanceOutput {
	return i.ToReservedInstanceOutputWithContext(context.Background())
}

func (i *ReservedInstance) ToReservedInstanceOutputWithContext(ctx context.Context) ReservedInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservedInstanceOutput)
}

// ReservedInstanceArrayInput is an input type that accepts ReservedInstanceArray and ReservedInstanceArrayOutput values.
// You can construct a concrete instance of `ReservedInstanceArrayInput` via:
//
//	ReservedInstanceArray{ ReservedInstanceArgs{...} }
type ReservedInstanceArrayInput interface {
	pulumi.Input

	ToReservedInstanceArrayOutput() ReservedInstanceArrayOutput
	ToReservedInstanceArrayOutputWithContext(context.Context) ReservedInstanceArrayOutput
}

type ReservedInstanceArray []ReservedInstanceInput

func (ReservedInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReservedInstance)(nil)).Elem()
}

func (i ReservedInstanceArray) ToReservedInstanceArrayOutput() ReservedInstanceArrayOutput {
	return i.ToReservedInstanceArrayOutputWithContext(context.Background())
}

func (i ReservedInstanceArray) ToReservedInstanceArrayOutputWithContext(ctx context.Context) ReservedInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservedInstanceArrayOutput)
}

// ReservedInstanceMapInput is an input type that accepts ReservedInstanceMap and ReservedInstanceMapOutput values.
// You can construct a concrete instance of `ReservedInstanceMapInput` via:
//
//	ReservedInstanceMap{ "key": ReservedInstanceArgs{...} }
type ReservedInstanceMapInput interface {
	pulumi.Input

	ToReservedInstanceMapOutput() ReservedInstanceMapOutput
	ToReservedInstanceMapOutputWithContext(context.Context) ReservedInstanceMapOutput
}

type ReservedInstanceMap map[string]ReservedInstanceInput

func (ReservedInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReservedInstance)(nil)).Elem()
}

func (i ReservedInstanceMap) ToReservedInstanceMapOutput() ReservedInstanceMapOutput {
	return i.ToReservedInstanceMapOutputWithContext(context.Background())
}

func (i ReservedInstanceMap) ToReservedInstanceMapOutputWithContext(ctx context.Context) ReservedInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservedInstanceMapOutput)
}

type ReservedInstanceOutput struct{ *pulumi.OutputState }

func (ReservedInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservedInstance)(nil)).Elem()
}

func (o ReservedInstanceOutput) ToReservedInstanceOutput() ReservedInstanceOutput {
	return o
}

func (o ReservedInstanceOutput) ToReservedInstanceOutputWithContext(ctx context.Context) ReservedInstanceOutput {
	return o
}

func (o ReservedInstanceOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservedInstance) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ReservedInstanceOutput) CurrencyCode() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservedInstance) pulumi.StringOutput { return v.CurrencyCode }).(pulumi.StringOutput)
}

func (o ReservedInstanceOutput) DbInstanceClass() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservedInstance) pulumi.StringOutput { return v.DbInstanceClass }).(pulumi.StringOutput)
}

func (o ReservedInstanceOutput) Duration() pulumi.IntOutput {
	return o.ApplyT(func(v *ReservedInstance) pulumi.IntOutput { return v.Duration }).(pulumi.IntOutput)
}

func (o ReservedInstanceOutput) FixedPrice() pulumi.Float64Output {
	return o.ApplyT(func(v *ReservedInstance) pulumi.Float64Output { return v.FixedPrice }).(pulumi.Float64Output)
}

func (o ReservedInstanceOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReservedInstance) pulumi.IntPtrOutput { return v.InstanceCount }).(pulumi.IntPtrOutput)
}

func (o ReservedInstanceOutput) LeaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservedInstance) pulumi.StringOutput { return v.LeaseId }).(pulumi.StringOutput)
}

func (o ReservedInstanceOutput) MultiAz() pulumi.BoolOutput {
	return o.ApplyT(func(v *ReservedInstance) pulumi.BoolOutput { return v.MultiAz }).(pulumi.BoolOutput)
}

func (o ReservedInstanceOutput) OfferingId() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservedInstance) pulumi.StringOutput { return v.OfferingId }).(pulumi.StringOutput)
}

func (o ReservedInstanceOutput) OfferingType() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservedInstance) pulumi.StringOutput { return v.OfferingType }).(pulumi.StringOutput)
}

func (o ReservedInstanceOutput) ProductDescription() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservedInstance) pulumi.StringOutput { return v.ProductDescription }).(pulumi.StringOutput)
}

func (o ReservedInstanceOutput) RecurringCharges() ReservedInstanceRecurringChargeArrayOutput {
	return o.ApplyT(func(v *ReservedInstance) ReservedInstanceRecurringChargeArrayOutput { return v.RecurringCharges }).(ReservedInstanceRecurringChargeArrayOutput)
}

func (o ReservedInstanceOutput) ReservationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReservedInstance) pulumi.StringPtrOutput { return v.ReservationId }).(pulumi.StringPtrOutput)
}

func (o ReservedInstanceOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservedInstance) pulumi.StringOutput { return v.StartTime }).(pulumi.StringOutput)
}

func (o ReservedInstanceOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservedInstance) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o ReservedInstanceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ReservedInstance) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ReservedInstanceOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ReservedInstance) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o ReservedInstanceOutput) UsagePrice() pulumi.Float64Output {
	return o.ApplyT(func(v *ReservedInstance) pulumi.Float64Output { return v.UsagePrice }).(pulumi.Float64Output)
}

type ReservedInstanceArrayOutput struct{ *pulumi.OutputState }

func (ReservedInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReservedInstance)(nil)).Elem()
}

func (o ReservedInstanceArrayOutput) ToReservedInstanceArrayOutput() ReservedInstanceArrayOutput {
	return o
}

func (o ReservedInstanceArrayOutput) ToReservedInstanceArrayOutputWithContext(ctx context.Context) ReservedInstanceArrayOutput {
	return o
}

func (o ReservedInstanceArrayOutput) Index(i pulumi.IntInput) ReservedInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReservedInstance {
		return vs[0].([]*ReservedInstance)[vs[1].(int)]
	}).(ReservedInstanceOutput)
}

type ReservedInstanceMapOutput struct{ *pulumi.OutputState }

func (ReservedInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReservedInstance)(nil)).Elem()
}

func (o ReservedInstanceMapOutput) ToReservedInstanceMapOutput() ReservedInstanceMapOutput {
	return o
}

func (o ReservedInstanceMapOutput) ToReservedInstanceMapOutputWithContext(ctx context.Context) ReservedInstanceMapOutput {
	return o
}

func (o ReservedInstanceMapOutput) MapIndex(k pulumi.StringInput) ReservedInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReservedInstance {
		return vs[0].(map[string]*ReservedInstance)[vs[1].(string)]
	}).(ReservedInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReservedInstanceInput)(nil)).Elem(), &ReservedInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReservedInstanceArrayInput)(nil)).Elem(), ReservedInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReservedInstanceMapInput)(nil)).Elem(), ReservedInstanceMap{})
	pulumi.RegisterOutputType(ReservedInstanceOutput{})
	pulumi.RegisterOutputType(ReservedInstanceArrayOutput{})
	pulumi.RegisterOutputType(ReservedInstanceMapOutput{})
}
