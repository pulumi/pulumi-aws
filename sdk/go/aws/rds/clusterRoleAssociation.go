// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ClusterRoleAssociation struct {
	pulumi.CustomResourceState

	DbClusterIdentifier pulumi.StringOutput `pulumi:"dbClusterIdentifier"`
	FeatureName         pulumi.StringOutput `pulumi:"featureName"`
	RoleArn             pulumi.StringOutput `pulumi:"roleArn"`
}

// NewClusterRoleAssociation registers a new resource with the given unique name, arguments, and options.
func NewClusterRoleAssociation(ctx *pulumi.Context,
	name string, args *ClusterRoleAssociationArgs, opts ...pulumi.ResourceOption) (*ClusterRoleAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbClusterIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'DbClusterIdentifier'")
	}
	if args.FeatureName == nil {
		return nil, errors.New("invalid value for required argument 'FeatureName'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	var resource ClusterRoleAssociation
	err := ctx.RegisterResource("aws:rds/clusterRoleAssociation:ClusterRoleAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterRoleAssociation gets an existing ClusterRoleAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterRoleAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterRoleAssociationState, opts ...pulumi.ResourceOption) (*ClusterRoleAssociation, error) {
	var resource ClusterRoleAssociation
	err := ctx.ReadResource("aws:rds/clusterRoleAssociation:ClusterRoleAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterRoleAssociation resources.
type clusterRoleAssociationState struct {
	DbClusterIdentifier *string `pulumi:"dbClusterIdentifier"`
	FeatureName         *string `pulumi:"featureName"`
	RoleArn             *string `pulumi:"roleArn"`
}

type ClusterRoleAssociationState struct {
	DbClusterIdentifier pulumi.StringPtrInput
	FeatureName         pulumi.StringPtrInput
	RoleArn             pulumi.StringPtrInput
}

func (ClusterRoleAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterRoleAssociationState)(nil)).Elem()
}

type clusterRoleAssociationArgs struct {
	DbClusterIdentifier string `pulumi:"dbClusterIdentifier"`
	FeatureName         string `pulumi:"featureName"`
	RoleArn             string `pulumi:"roleArn"`
}

// The set of arguments for constructing a ClusterRoleAssociation resource.
type ClusterRoleAssociationArgs struct {
	DbClusterIdentifier pulumi.StringInput
	FeatureName         pulumi.StringInput
	RoleArn             pulumi.StringInput
}

func (ClusterRoleAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterRoleAssociationArgs)(nil)).Elem()
}

type ClusterRoleAssociationInput interface {
	pulumi.Input

	ToClusterRoleAssociationOutput() ClusterRoleAssociationOutput
	ToClusterRoleAssociationOutputWithContext(ctx context.Context) ClusterRoleAssociationOutput
}

func (*ClusterRoleAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterRoleAssociation)(nil)).Elem()
}

func (i *ClusterRoleAssociation) ToClusterRoleAssociationOutput() ClusterRoleAssociationOutput {
	return i.ToClusterRoleAssociationOutputWithContext(context.Background())
}

func (i *ClusterRoleAssociation) ToClusterRoleAssociationOutputWithContext(ctx context.Context) ClusterRoleAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterRoleAssociationOutput)
}

// ClusterRoleAssociationArrayInput is an input type that accepts ClusterRoleAssociationArray and ClusterRoleAssociationArrayOutput values.
// You can construct a concrete instance of `ClusterRoleAssociationArrayInput` via:
//
//	ClusterRoleAssociationArray{ ClusterRoleAssociationArgs{...} }
type ClusterRoleAssociationArrayInput interface {
	pulumi.Input

	ToClusterRoleAssociationArrayOutput() ClusterRoleAssociationArrayOutput
	ToClusterRoleAssociationArrayOutputWithContext(context.Context) ClusterRoleAssociationArrayOutput
}

type ClusterRoleAssociationArray []ClusterRoleAssociationInput

func (ClusterRoleAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterRoleAssociation)(nil)).Elem()
}

func (i ClusterRoleAssociationArray) ToClusterRoleAssociationArrayOutput() ClusterRoleAssociationArrayOutput {
	return i.ToClusterRoleAssociationArrayOutputWithContext(context.Background())
}

func (i ClusterRoleAssociationArray) ToClusterRoleAssociationArrayOutputWithContext(ctx context.Context) ClusterRoleAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterRoleAssociationArrayOutput)
}

// ClusterRoleAssociationMapInput is an input type that accepts ClusterRoleAssociationMap and ClusterRoleAssociationMapOutput values.
// You can construct a concrete instance of `ClusterRoleAssociationMapInput` via:
//
//	ClusterRoleAssociationMap{ "key": ClusterRoleAssociationArgs{...} }
type ClusterRoleAssociationMapInput interface {
	pulumi.Input

	ToClusterRoleAssociationMapOutput() ClusterRoleAssociationMapOutput
	ToClusterRoleAssociationMapOutputWithContext(context.Context) ClusterRoleAssociationMapOutput
}

type ClusterRoleAssociationMap map[string]ClusterRoleAssociationInput

func (ClusterRoleAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterRoleAssociation)(nil)).Elem()
}

func (i ClusterRoleAssociationMap) ToClusterRoleAssociationMapOutput() ClusterRoleAssociationMapOutput {
	return i.ToClusterRoleAssociationMapOutputWithContext(context.Background())
}

func (i ClusterRoleAssociationMap) ToClusterRoleAssociationMapOutputWithContext(ctx context.Context) ClusterRoleAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterRoleAssociationMapOutput)
}

type ClusterRoleAssociationOutput struct{ *pulumi.OutputState }

func (ClusterRoleAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterRoleAssociation)(nil)).Elem()
}

func (o ClusterRoleAssociationOutput) ToClusterRoleAssociationOutput() ClusterRoleAssociationOutput {
	return o
}

func (o ClusterRoleAssociationOutput) ToClusterRoleAssociationOutputWithContext(ctx context.Context) ClusterRoleAssociationOutput {
	return o
}

func (o ClusterRoleAssociationOutput) DbClusterIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterRoleAssociation) pulumi.StringOutput { return v.DbClusterIdentifier }).(pulumi.StringOutput)
}

func (o ClusterRoleAssociationOutput) FeatureName() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterRoleAssociation) pulumi.StringOutput { return v.FeatureName }).(pulumi.StringOutput)
}

func (o ClusterRoleAssociationOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterRoleAssociation) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

type ClusterRoleAssociationArrayOutput struct{ *pulumi.OutputState }

func (ClusterRoleAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterRoleAssociation)(nil)).Elem()
}

func (o ClusterRoleAssociationArrayOutput) ToClusterRoleAssociationArrayOutput() ClusterRoleAssociationArrayOutput {
	return o
}

func (o ClusterRoleAssociationArrayOutput) ToClusterRoleAssociationArrayOutputWithContext(ctx context.Context) ClusterRoleAssociationArrayOutput {
	return o
}

func (o ClusterRoleAssociationArrayOutput) Index(i pulumi.IntInput) ClusterRoleAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterRoleAssociation {
		return vs[0].([]*ClusterRoleAssociation)[vs[1].(int)]
	}).(ClusterRoleAssociationOutput)
}

type ClusterRoleAssociationMapOutput struct{ *pulumi.OutputState }

func (ClusterRoleAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterRoleAssociation)(nil)).Elem()
}

func (o ClusterRoleAssociationMapOutput) ToClusterRoleAssociationMapOutput() ClusterRoleAssociationMapOutput {
	return o
}

func (o ClusterRoleAssociationMapOutput) ToClusterRoleAssociationMapOutputWithContext(ctx context.Context) ClusterRoleAssociationMapOutput {
	return o
}

func (o ClusterRoleAssociationMapOutput) MapIndex(k pulumi.StringInput) ClusterRoleAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterRoleAssociation {
		return vs[0].(map[string]*ClusterRoleAssociation)[vs[1].(string)]
	}).(ClusterRoleAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterRoleAssociationInput)(nil)).Elem(), &ClusterRoleAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterRoleAssociationArrayInput)(nil)).Elem(), ClusterRoleAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterRoleAssociationMapInput)(nil)).Elem(), ClusterRoleAssociationMap{})
	pulumi.RegisterOutputType(ClusterRoleAssociationOutput{})
	pulumi.RegisterOutputType(ClusterRoleAssociationArrayOutput{})
	pulumi.RegisterOutputType(ClusterRoleAssociationMapOutput{})
}
