// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an Amazon Aurora Limitless Database DB shard group
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/rds"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := rds.NewCluster(ctx, "example", &rds.ClusterArgs{
//				ClusterIdentifier:                  pulumi.String("example-limitless-cluster"),
//				Engine:                             pulumi.String(rds.EngineTypeAuroraPostgresql),
//				EngineVersion:                      pulumi.String("16.6-limitless"),
//				EngineMode:                         pulumi.String(""),
//				StorageType:                        pulumi.String("aurora-iopt1"),
//				ClusterScalabilityType:             pulumi.String("limitless"),
//				MasterUsername:                     pulumi.String("foo"),
//				MasterPassword:                     pulumi.String("must_be_eight_characters"),
//				PerformanceInsightsEnabled:         pulumi.Bool(true),
//				PerformanceInsightsRetentionPeriod: pulumi.Int(31),
//				EnabledCloudwatchLogsExports: pulumi.StringArray{
//					pulumi.String("postgresql"),
//				},
//				MonitoringInterval: pulumi.Int(5),
//				MonitoringRoleArn:  pulumi.Any(exampleAwsIamRole.Arn),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = rds.NewShardGroup(ctx, "example", &rds.ShardGroupArgs{
//				DbShardGroupIdentifier: pulumi.String("example-shard-group"),
//				DbClusterIdentifier:    example.ID(),
//				MaxAcu:                 pulumi.Float64(1200),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import shard group using the `db_shard_group_identifier`. For example:
//
// ```sh
// $ pulumi import aws:rds/shardGroup:ShardGroup example example-shard-group
// ```
type ShardGroup struct {
	pulumi.CustomResourceState

	// ARN of the shard group.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Specifies whether to create standby DB shard groups for the DB shard group. Valid values are:
	ComputeRedundancy pulumi.IntOutput `pulumi:"computeRedundancy"`
	// The name of the primary DB cluster for the DB shard group.
	DbClusterIdentifier pulumi.StringOutput `pulumi:"dbClusterIdentifier"`
	// The name of the DB shard group.
	DbShardGroupIdentifier pulumi.StringOutput `pulumi:"dbShardGroupIdentifier"`
	// The AWS Region-unique, immutable identifier for the DB shard group.
	DbShardGroupResourceId pulumi.StringOutput `pulumi:"dbShardGroupResourceId"`
	// The connection endpoint for the DB shard group.
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
	MaxAcu pulumi.Float64Output `pulumi:"maxAcu"`
	// The minimum capacity of the DB shard group in Aurora capacity units (ACUs).
	MinAcu pulumi.Float64Output `pulumi:"minAcu"`
	// Indicates whether the DB shard group is publicly accessible.
	PubliclyAccessible pulumi.BoolOutput `pulumi:"publiclyAccessible"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// For more detailed documentation about each argument, refer to the [AWS official documentation](https://docs.aws.amazon.com/cli/latest/reference/rds/create-shard-group.html).
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapOutput      `pulumi:"tagsAll"`
	Timeouts ShardGroupTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewShardGroup registers a new resource with the given unique name, arguments, and options.
func NewShardGroup(ctx *pulumi.Context,
	name string, args *ShardGroupArgs, opts ...pulumi.ResourceOption) (*ShardGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbClusterIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'DbClusterIdentifier'")
	}
	if args.DbShardGroupIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'DbShardGroupIdentifier'")
	}
	if args.MaxAcu == nil {
		return nil, errors.New("invalid value for required argument 'MaxAcu'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ShardGroup
	err := ctx.RegisterResource("aws:rds/shardGroup:ShardGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetShardGroup gets an existing ShardGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetShardGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ShardGroupState, opts ...pulumi.ResourceOption) (*ShardGroup, error) {
	var resource ShardGroup
	err := ctx.ReadResource("aws:rds/shardGroup:ShardGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ShardGroup resources.
type shardGroupState struct {
	// ARN of the shard group.
	Arn *string `pulumi:"arn"`
	// Specifies whether to create standby DB shard groups for the DB shard group. Valid values are:
	ComputeRedundancy *int `pulumi:"computeRedundancy"`
	// The name of the primary DB cluster for the DB shard group.
	DbClusterIdentifier *string `pulumi:"dbClusterIdentifier"`
	// The name of the DB shard group.
	DbShardGroupIdentifier *string `pulumi:"dbShardGroupIdentifier"`
	// The AWS Region-unique, immutable identifier for the DB shard group.
	DbShardGroupResourceId *string `pulumi:"dbShardGroupResourceId"`
	// The connection endpoint for the DB shard group.
	Endpoint *string `pulumi:"endpoint"`
	// The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
	MaxAcu *float64 `pulumi:"maxAcu"`
	// The minimum capacity of the DB shard group in Aurora capacity units (ACUs).
	MinAcu *float64 `pulumi:"minAcu"`
	// Indicates whether the DB shard group is publicly accessible.
	PubliclyAccessible *bool `pulumi:"publiclyAccessible"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// For more detailed documentation about each argument, refer to the [AWS official documentation](https://docs.aws.amazon.com/cli/latest/reference/rds/create-shard-group.html).
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  map[string]string   `pulumi:"tagsAll"`
	Timeouts *ShardGroupTimeouts `pulumi:"timeouts"`
}

type ShardGroupState struct {
	// ARN of the shard group.
	Arn pulumi.StringPtrInput
	// Specifies whether to create standby DB shard groups for the DB shard group. Valid values are:
	ComputeRedundancy pulumi.IntPtrInput
	// The name of the primary DB cluster for the DB shard group.
	DbClusterIdentifier pulumi.StringPtrInput
	// The name of the DB shard group.
	DbShardGroupIdentifier pulumi.StringPtrInput
	// The AWS Region-unique, immutable identifier for the DB shard group.
	DbShardGroupResourceId pulumi.StringPtrInput
	// The connection endpoint for the DB shard group.
	Endpoint pulumi.StringPtrInput
	// The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
	MaxAcu pulumi.Float64PtrInput
	// The minimum capacity of the DB shard group in Aurora capacity units (ACUs).
	MinAcu pulumi.Float64PtrInput
	// Indicates whether the DB shard group is publicly accessible.
	PubliclyAccessible pulumi.BoolPtrInput
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// For more detailed documentation about each argument, refer to the [AWS official documentation](https://docs.aws.amazon.com/cli/latest/reference/rds/create-shard-group.html).
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapInput
	Timeouts ShardGroupTimeoutsPtrInput
}

func (ShardGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*shardGroupState)(nil)).Elem()
}

type shardGroupArgs struct {
	// Specifies whether to create standby DB shard groups for the DB shard group. Valid values are:
	ComputeRedundancy *int `pulumi:"computeRedundancy"`
	// The name of the primary DB cluster for the DB shard group.
	DbClusterIdentifier string `pulumi:"dbClusterIdentifier"`
	// The name of the DB shard group.
	DbShardGroupIdentifier string `pulumi:"dbShardGroupIdentifier"`
	// The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
	MaxAcu float64 `pulumi:"maxAcu"`
	// The minimum capacity of the DB shard group in Aurora capacity units (ACUs).
	MinAcu *float64 `pulumi:"minAcu"`
	// Indicates whether the DB shard group is publicly accessible.
	PubliclyAccessible *bool `pulumi:"publiclyAccessible"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// For more detailed documentation about each argument, refer to the [AWS official documentation](https://docs.aws.amazon.com/cli/latest/reference/rds/create-shard-group.html).
	Tags     map[string]string   `pulumi:"tags"`
	Timeouts *ShardGroupTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a ShardGroup resource.
type ShardGroupArgs struct {
	// Specifies whether to create standby DB shard groups for the DB shard group. Valid values are:
	ComputeRedundancy pulumi.IntPtrInput
	// The name of the primary DB cluster for the DB shard group.
	DbClusterIdentifier pulumi.StringInput
	// The name of the DB shard group.
	DbShardGroupIdentifier pulumi.StringInput
	// The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
	MaxAcu pulumi.Float64Input
	// The minimum capacity of the DB shard group in Aurora capacity units (ACUs).
	MinAcu pulumi.Float64PtrInput
	// Indicates whether the DB shard group is publicly accessible.
	PubliclyAccessible pulumi.BoolPtrInput
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// For more detailed documentation about each argument, refer to the [AWS official documentation](https://docs.aws.amazon.com/cli/latest/reference/rds/create-shard-group.html).
	Tags     pulumi.StringMapInput
	Timeouts ShardGroupTimeoutsPtrInput
}

func (ShardGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*shardGroupArgs)(nil)).Elem()
}

type ShardGroupInput interface {
	pulumi.Input

	ToShardGroupOutput() ShardGroupOutput
	ToShardGroupOutputWithContext(ctx context.Context) ShardGroupOutput
}

func (*ShardGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ShardGroup)(nil)).Elem()
}

func (i *ShardGroup) ToShardGroupOutput() ShardGroupOutput {
	return i.ToShardGroupOutputWithContext(context.Background())
}

func (i *ShardGroup) ToShardGroupOutputWithContext(ctx context.Context) ShardGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShardGroupOutput)
}

// ShardGroupArrayInput is an input type that accepts ShardGroupArray and ShardGroupArrayOutput values.
// You can construct a concrete instance of `ShardGroupArrayInput` via:
//
//	ShardGroupArray{ ShardGroupArgs{...} }
type ShardGroupArrayInput interface {
	pulumi.Input

	ToShardGroupArrayOutput() ShardGroupArrayOutput
	ToShardGroupArrayOutputWithContext(context.Context) ShardGroupArrayOutput
}

type ShardGroupArray []ShardGroupInput

func (ShardGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ShardGroup)(nil)).Elem()
}

func (i ShardGroupArray) ToShardGroupArrayOutput() ShardGroupArrayOutput {
	return i.ToShardGroupArrayOutputWithContext(context.Background())
}

func (i ShardGroupArray) ToShardGroupArrayOutputWithContext(ctx context.Context) ShardGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShardGroupArrayOutput)
}

// ShardGroupMapInput is an input type that accepts ShardGroupMap and ShardGroupMapOutput values.
// You can construct a concrete instance of `ShardGroupMapInput` via:
//
//	ShardGroupMap{ "key": ShardGroupArgs{...} }
type ShardGroupMapInput interface {
	pulumi.Input

	ToShardGroupMapOutput() ShardGroupMapOutput
	ToShardGroupMapOutputWithContext(context.Context) ShardGroupMapOutput
}

type ShardGroupMap map[string]ShardGroupInput

func (ShardGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ShardGroup)(nil)).Elem()
}

func (i ShardGroupMap) ToShardGroupMapOutput() ShardGroupMapOutput {
	return i.ToShardGroupMapOutputWithContext(context.Background())
}

func (i ShardGroupMap) ToShardGroupMapOutputWithContext(ctx context.Context) ShardGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShardGroupMapOutput)
}

type ShardGroupOutput struct{ *pulumi.OutputState }

func (ShardGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ShardGroup)(nil)).Elem()
}

func (o ShardGroupOutput) ToShardGroupOutput() ShardGroupOutput {
	return o
}

func (o ShardGroupOutput) ToShardGroupOutputWithContext(ctx context.Context) ShardGroupOutput {
	return o
}

// ARN of the shard group.
func (o ShardGroupOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ShardGroup) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Specifies whether to create standby DB shard groups for the DB shard group. Valid values are:
func (o ShardGroupOutput) ComputeRedundancy() pulumi.IntOutput {
	return o.ApplyT(func(v *ShardGroup) pulumi.IntOutput { return v.ComputeRedundancy }).(pulumi.IntOutput)
}

// The name of the primary DB cluster for the DB shard group.
func (o ShardGroupOutput) DbClusterIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ShardGroup) pulumi.StringOutput { return v.DbClusterIdentifier }).(pulumi.StringOutput)
}

// The name of the DB shard group.
func (o ShardGroupOutput) DbShardGroupIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ShardGroup) pulumi.StringOutput { return v.DbShardGroupIdentifier }).(pulumi.StringOutput)
}

// The AWS Region-unique, immutable identifier for the DB shard group.
func (o ShardGroupOutput) DbShardGroupResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ShardGroup) pulumi.StringOutput { return v.DbShardGroupResourceId }).(pulumi.StringOutput)
}

// The connection endpoint for the DB shard group.
func (o ShardGroupOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *ShardGroup) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
func (o ShardGroupOutput) MaxAcu() pulumi.Float64Output {
	return o.ApplyT(func(v *ShardGroup) pulumi.Float64Output { return v.MaxAcu }).(pulumi.Float64Output)
}

// The minimum capacity of the DB shard group in Aurora capacity units (ACUs).
func (o ShardGroupOutput) MinAcu() pulumi.Float64Output {
	return o.ApplyT(func(v *ShardGroup) pulumi.Float64Output { return v.MinAcu }).(pulumi.Float64Output)
}

// Indicates whether the DB shard group is publicly accessible.
func (o ShardGroupOutput) PubliclyAccessible() pulumi.BoolOutput {
	return o.ApplyT(func(v *ShardGroup) pulumi.BoolOutput { return v.PubliclyAccessible }).(pulumi.BoolOutput)
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
//
// For more detailed documentation about each argument, refer to the [AWS official documentation](https://docs.aws.amazon.com/cli/latest/reference/rds/create-shard-group.html).
func (o ShardGroupOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ShardGroup) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o ShardGroupOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ShardGroup) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o ShardGroupOutput) Timeouts() ShardGroupTimeoutsPtrOutput {
	return o.ApplyT(func(v *ShardGroup) ShardGroupTimeoutsPtrOutput { return v.Timeouts }).(ShardGroupTimeoutsPtrOutput)
}

type ShardGroupArrayOutput struct{ *pulumi.OutputState }

func (ShardGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ShardGroup)(nil)).Elem()
}

func (o ShardGroupArrayOutput) ToShardGroupArrayOutput() ShardGroupArrayOutput {
	return o
}

func (o ShardGroupArrayOutput) ToShardGroupArrayOutputWithContext(ctx context.Context) ShardGroupArrayOutput {
	return o
}

func (o ShardGroupArrayOutput) Index(i pulumi.IntInput) ShardGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ShardGroup {
		return vs[0].([]*ShardGroup)[vs[1].(int)]
	}).(ShardGroupOutput)
}

type ShardGroupMapOutput struct{ *pulumi.OutputState }

func (ShardGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ShardGroup)(nil)).Elem()
}

func (o ShardGroupMapOutput) ToShardGroupMapOutput() ShardGroupMapOutput {
	return o
}

func (o ShardGroupMapOutput) ToShardGroupMapOutputWithContext(ctx context.Context) ShardGroupMapOutput {
	return o
}

func (o ShardGroupMapOutput) MapIndex(k pulumi.StringInput) ShardGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ShardGroup {
		return vs[0].(map[string]*ShardGroup)[vs[1].(string)]
	}).(ShardGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ShardGroupInput)(nil)).Elem(), &ShardGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShardGroupArrayInput)(nil)).Elem(), ShardGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShardGroupMapInput)(nil)).Elem(), ShardGroupMap{})
	pulumi.RegisterOutputType(ShardGroupOutput{})
	pulumi.RegisterOutputType(ShardGroupArrayOutput{})
	pulumi.RegisterOutputType(ShardGroupMapOutput{})
}
