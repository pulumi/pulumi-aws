// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an RDS database cluster snapshot copy. For managing RDS database instance snapshot copies, see the `rds.SnapshotCopy` resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/rds"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := rds.NewCluster(ctx, "example", &rds.ClusterArgs{
//				ClusterIdentifier: pulumi.String("aurora-cluster-demo"),
//				DatabaseName:      pulumi.String("test"),
//				Engine:            pulumi.String(rds.EngineTypeAuroraMysql),
//				MasterUsername:    pulumi.String("tfacctest"),
//				MasterPassword:    pulumi.String("avoid-plaintext-passwords"),
//				SkipFinalSnapshot: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			exampleClusterSnapshot, err := rds.NewClusterSnapshot(ctx, "example", &rds.ClusterSnapshotArgs{
//				DbClusterIdentifier:         example.ClusterIdentifier,
//				DbClusterSnapshotIdentifier: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = rds.NewClusterSnapshotCopy(ctx, "example", &rds.ClusterSnapshotCopyArgs{
//				SourceDbClusterSnapshotIdentifier: exampleClusterSnapshot.DbClusterSnapshotArn,
//				TargetDbClusterSnapshotIdentifier: pulumi.String("example-copy"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import `aws_rds_cluster_snapshot_copy` using the `id`. For example:
//
// ```sh
// $ pulumi import aws:rds/clusterSnapshotCopy:ClusterSnapshotCopy example my-snapshot
// ```
type ClusterSnapshotCopy struct {
	pulumi.CustomResourceState

	// Specifies the allocated storage size in gigabytes (GB).
	AllocatedStorage pulumi.IntOutput `pulumi:"allocatedStorage"`
	// Whether to copy existing tags. Defaults to `false`.
	CopyTags pulumi.BoolPtrOutput `pulumi:"copyTags"`
	// The Amazon Resource Name (ARN) for the DB cluster snapshot.
	DbClusterSnapshotArn pulumi.StringOutput `pulumi:"dbClusterSnapshotArn"`
	// The Destination region to place snapshot copy.
	DestinationRegion pulumi.StringPtrOutput `pulumi:"destinationRegion"`
	// Specifies the name of the database engine.
	Engine pulumi.StringOutput `pulumi:"engine"`
	// Specifies the version of the database engine.
	EngineVersion pulumi.StringOutput `pulumi:"engineVersion"`
	// KMS key ID.
	KmsKeyId pulumi.StringPtrOutput `pulumi:"kmsKeyId"`
	// License model information for the restored DB instance.
	LicenseModel pulumi.StringOutput `pulumi:"licenseModel"`
	// URL that contains a Signature Version 4 signed request.
	PresignedUrl pulumi.StringPtrOutput `pulumi:"presignedUrl"`
	// List of AWS Account IDs to share the snapshot with. Use `all` to make the snapshot public.
	SharedAccounts pulumi.StringArrayOutput `pulumi:"sharedAccounts"`
	SnapshotType   pulumi.StringOutput      `pulumi:"snapshotType"`
	// Identifier of the source snapshot.
	SourceDbClusterSnapshotIdentifier pulumi.StringOutput `pulumi:"sourceDbClusterSnapshotIdentifier"`
	// Specifies whether the DB cluster snapshot is encrypted.
	StorageEncrypted pulumi.BoolOutput `pulumi:"storageEncrypted"`
	// Specifies the storage type associated with DB cluster snapshot.
	StorageType pulumi.StringOutput `pulumi:"storageType"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// Identifier for the snapshot.
	//
	// The following arguments are optional:
	TargetDbClusterSnapshotIdentifier pulumi.StringOutput                  `pulumi:"targetDbClusterSnapshotIdentifier"`
	Timeouts                          ClusterSnapshotCopyTimeoutsPtrOutput `pulumi:"timeouts"`
	// Provides the VPC ID associated with the DB cluster snapshot.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewClusterSnapshotCopy registers a new resource with the given unique name, arguments, and options.
func NewClusterSnapshotCopy(ctx *pulumi.Context,
	name string, args *ClusterSnapshotCopyArgs, opts ...pulumi.ResourceOption) (*ClusterSnapshotCopy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SourceDbClusterSnapshotIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'SourceDbClusterSnapshotIdentifier'")
	}
	if args.TargetDbClusterSnapshotIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'TargetDbClusterSnapshotIdentifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClusterSnapshotCopy
	err := ctx.RegisterResource("aws:rds/clusterSnapshotCopy:ClusterSnapshotCopy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterSnapshotCopy gets an existing ClusterSnapshotCopy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterSnapshotCopy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterSnapshotCopyState, opts ...pulumi.ResourceOption) (*ClusterSnapshotCopy, error) {
	var resource ClusterSnapshotCopy
	err := ctx.ReadResource("aws:rds/clusterSnapshotCopy:ClusterSnapshotCopy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterSnapshotCopy resources.
type clusterSnapshotCopyState struct {
	// Specifies the allocated storage size in gigabytes (GB).
	AllocatedStorage *int `pulumi:"allocatedStorage"`
	// Whether to copy existing tags. Defaults to `false`.
	CopyTags *bool `pulumi:"copyTags"`
	// The Amazon Resource Name (ARN) for the DB cluster snapshot.
	DbClusterSnapshotArn *string `pulumi:"dbClusterSnapshotArn"`
	// The Destination region to place snapshot copy.
	DestinationRegion *string `pulumi:"destinationRegion"`
	// Specifies the name of the database engine.
	Engine *string `pulumi:"engine"`
	// Specifies the version of the database engine.
	EngineVersion *string `pulumi:"engineVersion"`
	// KMS key ID.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// License model information for the restored DB instance.
	LicenseModel *string `pulumi:"licenseModel"`
	// URL that contains a Signature Version 4 signed request.
	PresignedUrl *string `pulumi:"presignedUrl"`
	// List of AWS Account IDs to share the snapshot with. Use `all` to make the snapshot public.
	SharedAccounts []string `pulumi:"sharedAccounts"`
	SnapshotType   *string  `pulumi:"snapshotType"`
	// Identifier of the source snapshot.
	SourceDbClusterSnapshotIdentifier *string `pulumi:"sourceDbClusterSnapshotIdentifier"`
	// Specifies whether the DB cluster snapshot is encrypted.
	StorageEncrypted *bool `pulumi:"storageEncrypted"`
	// Specifies the storage type associated with DB cluster snapshot.
	StorageType *string `pulumi:"storageType"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Identifier for the snapshot.
	//
	// The following arguments are optional:
	TargetDbClusterSnapshotIdentifier *string                      `pulumi:"targetDbClusterSnapshotIdentifier"`
	Timeouts                          *ClusterSnapshotCopyTimeouts `pulumi:"timeouts"`
	// Provides the VPC ID associated with the DB cluster snapshot.
	VpcId *string `pulumi:"vpcId"`
}

type ClusterSnapshotCopyState struct {
	// Specifies the allocated storage size in gigabytes (GB).
	AllocatedStorage pulumi.IntPtrInput
	// Whether to copy existing tags. Defaults to `false`.
	CopyTags pulumi.BoolPtrInput
	// The Amazon Resource Name (ARN) for the DB cluster snapshot.
	DbClusterSnapshotArn pulumi.StringPtrInput
	// The Destination region to place snapshot copy.
	DestinationRegion pulumi.StringPtrInput
	// Specifies the name of the database engine.
	Engine pulumi.StringPtrInput
	// Specifies the version of the database engine.
	EngineVersion pulumi.StringPtrInput
	// KMS key ID.
	KmsKeyId pulumi.StringPtrInput
	// License model information for the restored DB instance.
	LicenseModel pulumi.StringPtrInput
	// URL that contains a Signature Version 4 signed request.
	PresignedUrl pulumi.StringPtrInput
	// List of AWS Account IDs to share the snapshot with. Use `all` to make the snapshot public.
	SharedAccounts pulumi.StringArrayInput
	SnapshotType   pulumi.StringPtrInput
	// Identifier of the source snapshot.
	SourceDbClusterSnapshotIdentifier pulumi.StringPtrInput
	// Specifies whether the DB cluster snapshot is encrypted.
	StorageEncrypted pulumi.BoolPtrInput
	// Specifies the storage type associated with DB cluster snapshot.
	StorageType pulumi.StringPtrInput
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
	// Identifier for the snapshot.
	//
	// The following arguments are optional:
	TargetDbClusterSnapshotIdentifier pulumi.StringPtrInput
	Timeouts                          ClusterSnapshotCopyTimeoutsPtrInput
	// Provides the VPC ID associated with the DB cluster snapshot.
	VpcId pulumi.StringPtrInput
}

func (ClusterSnapshotCopyState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterSnapshotCopyState)(nil)).Elem()
}

type clusterSnapshotCopyArgs struct {
	// Whether to copy existing tags. Defaults to `false`.
	CopyTags *bool `pulumi:"copyTags"`
	// The Destination region to place snapshot copy.
	DestinationRegion *string `pulumi:"destinationRegion"`
	// KMS key ID.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// URL that contains a Signature Version 4 signed request.
	PresignedUrl *string `pulumi:"presignedUrl"`
	// List of AWS Account IDs to share the snapshot with. Use `all` to make the snapshot public.
	SharedAccounts []string `pulumi:"sharedAccounts"`
	// Identifier of the source snapshot.
	SourceDbClusterSnapshotIdentifier string `pulumi:"sourceDbClusterSnapshotIdentifier"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Identifier for the snapshot.
	//
	// The following arguments are optional:
	TargetDbClusterSnapshotIdentifier string                       `pulumi:"targetDbClusterSnapshotIdentifier"`
	Timeouts                          *ClusterSnapshotCopyTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a ClusterSnapshotCopy resource.
type ClusterSnapshotCopyArgs struct {
	// Whether to copy existing tags. Defaults to `false`.
	CopyTags pulumi.BoolPtrInput
	// The Destination region to place snapshot copy.
	DestinationRegion pulumi.StringPtrInput
	// KMS key ID.
	KmsKeyId pulumi.StringPtrInput
	// URL that contains a Signature Version 4 signed request.
	PresignedUrl pulumi.StringPtrInput
	// List of AWS Account IDs to share the snapshot with. Use `all` to make the snapshot public.
	SharedAccounts pulumi.StringArrayInput
	// Identifier of the source snapshot.
	SourceDbClusterSnapshotIdentifier pulumi.StringInput
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Identifier for the snapshot.
	//
	// The following arguments are optional:
	TargetDbClusterSnapshotIdentifier pulumi.StringInput
	Timeouts                          ClusterSnapshotCopyTimeoutsPtrInput
}

func (ClusterSnapshotCopyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterSnapshotCopyArgs)(nil)).Elem()
}

type ClusterSnapshotCopyInput interface {
	pulumi.Input

	ToClusterSnapshotCopyOutput() ClusterSnapshotCopyOutput
	ToClusterSnapshotCopyOutputWithContext(ctx context.Context) ClusterSnapshotCopyOutput
}

func (*ClusterSnapshotCopy) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSnapshotCopy)(nil)).Elem()
}

func (i *ClusterSnapshotCopy) ToClusterSnapshotCopyOutput() ClusterSnapshotCopyOutput {
	return i.ToClusterSnapshotCopyOutputWithContext(context.Background())
}

func (i *ClusterSnapshotCopy) ToClusterSnapshotCopyOutputWithContext(ctx context.Context) ClusterSnapshotCopyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSnapshotCopyOutput)
}

// ClusterSnapshotCopyArrayInput is an input type that accepts ClusterSnapshotCopyArray and ClusterSnapshotCopyArrayOutput values.
// You can construct a concrete instance of `ClusterSnapshotCopyArrayInput` via:
//
//	ClusterSnapshotCopyArray{ ClusterSnapshotCopyArgs{...} }
type ClusterSnapshotCopyArrayInput interface {
	pulumi.Input

	ToClusterSnapshotCopyArrayOutput() ClusterSnapshotCopyArrayOutput
	ToClusterSnapshotCopyArrayOutputWithContext(context.Context) ClusterSnapshotCopyArrayOutput
}

type ClusterSnapshotCopyArray []ClusterSnapshotCopyInput

func (ClusterSnapshotCopyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterSnapshotCopy)(nil)).Elem()
}

func (i ClusterSnapshotCopyArray) ToClusterSnapshotCopyArrayOutput() ClusterSnapshotCopyArrayOutput {
	return i.ToClusterSnapshotCopyArrayOutputWithContext(context.Background())
}

func (i ClusterSnapshotCopyArray) ToClusterSnapshotCopyArrayOutputWithContext(ctx context.Context) ClusterSnapshotCopyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSnapshotCopyArrayOutput)
}

// ClusterSnapshotCopyMapInput is an input type that accepts ClusterSnapshotCopyMap and ClusterSnapshotCopyMapOutput values.
// You can construct a concrete instance of `ClusterSnapshotCopyMapInput` via:
//
//	ClusterSnapshotCopyMap{ "key": ClusterSnapshotCopyArgs{...} }
type ClusterSnapshotCopyMapInput interface {
	pulumi.Input

	ToClusterSnapshotCopyMapOutput() ClusterSnapshotCopyMapOutput
	ToClusterSnapshotCopyMapOutputWithContext(context.Context) ClusterSnapshotCopyMapOutput
}

type ClusterSnapshotCopyMap map[string]ClusterSnapshotCopyInput

func (ClusterSnapshotCopyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterSnapshotCopy)(nil)).Elem()
}

func (i ClusterSnapshotCopyMap) ToClusterSnapshotCopyMapOutput() ClusterSnapshotCopyMapOutput {
	return i.ToClusterSnapshotCopyMapOutputWithContext(context.Background())
}

func (i ClusterSnapshotCopyMap) ToClusterSnapshotCopyMapOutputWithContext(ctx context.Context) ClusterSnapshotCopyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSnapshotCopyMapOutput)
}

type ClusterSnapshotCopyOutput struct{ *pulumi.OutputState }

func (ClusterSnapshotCopyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSnapshotCopy)(nil)).Elem()
}

func (o ClusterSnapshotCopyOutput) ToClusterSnapshotCopyOutput() ClusterSnapshotCopyOutput {
	return o
}

func (o ClusterSnapshotCopyOutput) ToClusterSnapshotCopyOutputWithContext(ctx context.Context) ClusterSnapshotCopyOutput {
	return o
}

// Specifies the allocated storage size in gigabytes (GB).
func (o ClusterSnapshotCopyOutput) AllocatedStorage() pulumi.IntOutput {
	return o.ApplyT(func(v *ClusterSnapshotCopy) pulumi.IntOutput { return v.AllocatedStorage }).(pulumi.IntOutput)
}

// Whether to copy existing tags. Defaults to `false`.
func (o ClusterSnapshotCopyOutput) CopyTags() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterSnapshotCopy) pulumi.BoolPtrOutput { return v.CopyTags }).(pulumi.BoolPtrOutput)
}

// The Amazon Resource Name (ARN) for the DB cluster snapshot.
func (o ClusterSnapshotCopyOutput) DbClusterSnapshotArn() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterSnapshotCopy) pulumi.StringOutput { return v.DbClusterSnapshotArn }).(pulumi.StringOutput)
}

// The Destination region to place snapshot copy.
func (o ClusterSnapshotCopyOutput) DestinationRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterSnapshotCopy) pulumi.StringPtrOutput { return v.DestinationRegion }).(pulumi.StringPtrOutput)
}

// Specifies the name of the database engine.
func (o ClusterSnapshotCopyOutput) Engine() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterSnapshotCopy) pulumi.StringOutput { return v.Engine }).(pulumi.StringOutput)
}

// Specifies the version of the database engine.
func (o ClusterSnapshotCopyOutput) EngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterSnapshotCopy) pulumi.StringOutput { return v.EngineVersion }).(pulumi.StringOutput)
}

// KMS key ID.
func (o ClusterSnapshotCopyOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterSnapshotCopy) pulumi.StringPtrOutput { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

// License model information for the restored DB instance.
func (o ClusterSnapshotCopyOutput) LicenseModel() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterSnapshotCopy) pulumi.StringOutput { return v.LicenseModel }).(pulumi.StringOutput)
}

// URL that contains a Signature Version 4 signed request.
func (o ClusterSnapshotCopyOutput) PresignedUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterSnapshotCopy) pulumi.StringPtrOutput { return v.PresignedUrl }).(pulumi.StringPtrOutput)
}

// List of AWS Account IDs to share the snapshot with. Use `all` to make the snapshot public.
func (o ClusterSnapshotCopyOutput) SharedAccounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterSnapshotCopy) pulumi.StringArrayOutput { return v.SharedAccounts }).(pulumi.StringArrayOutput)
}

func (o ClusterSnapshotCopyOutput) SnapshotType() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterSnapshotCopy) pulumi.StringOutput { return v.SnapshotType }).(pulumi.StringOutput)
}

// Identifier of the source snapshot.
func (o ClusterSnapshotCopyOutput) SourceDbClusterSnapshotIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterSnapshotCopy) pulumi.StringOutput { return v.SourceDbClusterSnapshotIdentifier }).(pulumi.StringOutput)
}

// Specifies whether the DB cluster snapshot is encrypted.
func (o ClusterSnapshotCopyOutput) StorageEncrypted() pulumi.BoolOutput {
	return o.ApplyT(func(v *ClusterSnapshotCopy) pulumi.BoolOutput { return v.StorageEncrypted }).(pulumi.BoolOutput)
}

// Specifies the storage type associated with DB cluster snapshot.
func (o ClusterSnapshotCopyOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterSnapshotCopy) pulumi.StringOutput { return v.StorageType }).(pulumi.StringOutput)
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ClusterSnapshotCopyOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ClusterSnapshotCopy) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o ClusterSnapshotCopyOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ClusterSnapshotCopy) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// Identifier for the snapshot.
//
// The following arguments are optional:
func (o ClusterSnapshotCopyOutput) TargetDbClusterSnapshotIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterSnapshotCopy) pulumi.StringOutput { return v.TargetDbClusterSnapshotIdentifier }).(pulumi.StringOutput)
}

func (o ClusterSnapshotCopyOutput) Timeouts() ClusterSnapshotCopyTimeoutsPtrOutput {
	return o.ApplyT(func(v *ClusterSnapshotCopy) ClusterSnapshotCopyTimeoutsPtrOutput { return v.Timeouts }).(ClusterSnapshotCopyTimeoutsPtrOutput)
}

// Provides the VPC ID associated with the DB cluster snapshot.
func (o ClusterSnapshotCopyOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterSnapshotCopy) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type ClusterSnapshotCopyArrayOutput struct{ *pulumi.OutputState }

func (ClusterSnapshotCopyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterSnapshotCopy)(nil)).Elem()
}

func (o ClusterSnapshotCopyArrayOutput) ToClusterSnapshotCopyArrayOutput() ClusterSnapshotCopyArrayOutput {
	return o
}

func (o ClusterSnapshotCopyArrayOutput) ToClusterSnapshotCopyArrayOutputWithContext(ctx context.Context) ClusterSnapshotCopyArrayOutput {
	return o
}

func (o ClusterSnapshotCopyArrayOutput) Index(i pulumi.IntInput) ClusterSnapshotCopyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterSnapshotCopy {
		return vs[0].([]*ClusterSnapshotCopy)[vs[1].(int)]
	}).(ClusterSnapshotCopyOutput)
}

type ClusterSnapshotCopyMapOutput struct{ *pulumi.OutputState }

func (ClusterSnapshotCopyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterSnapshotCopy)(nil)).Elem()
}

func (o ClusterSnapshotCopyMapOutput) ToClusterSnapshotCopyMapOutput() ClusterSnapshotCopyMapOutput {
	return o
}

func (o ClusterSnapshotCopyMapOutput) ToClusterSnapshotCopyMapOutputWithContext(ctx context.Context) ClusterSnapshotCopyMapOutput {
	return o
}

func (o ClusterSnapshotCopyMapOutput) MapIndex(k pulumi.StringInput) ClusterSnapshotCopyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterSnapshotCopy {
		return vs[0].(map[string]*ClusterSnapshotCopy)[vs[1].(string)]
	}).(ClusterSnapshotCopyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSnapshotCopyInput)(nil)).Elem(), &ClusterSnapshotCopy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSnapshotCopyArrayInput)(nil)).Elem(), ClusterSnapshotCopyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSnapshotCopyMapInput)(nil)).Elem(), ClusterSnapshotCopyMap{})
	pulumi.RegisterOutputType(ClusterSnapshotCopyOutput{})
	pulumi.RegisterOutputType(ClusterSnapshotCopyArrayOutput{})
	pulumi.RegisterOutputType(ClusterSnapshotCopyMapOutput{})
}
