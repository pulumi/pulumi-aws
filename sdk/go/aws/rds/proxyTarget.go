// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ProxyTarget struct {
	pulumi.CustomResourceState

	DbClusterIdentifier  pulumi.StringPtrOutput `pulumi:"dbClusterIdentifier"`
	DbInstanceIdentifier pulumi.StringPtrOutput `pulumi:"dbInstanceIdentifier"`
	DbProxyName          pulumi.StringOutput    `pulumi:"dbProxyName"`
	Endpoint             pulumi.StringOutput    `pulumi:"endpoint"`
	Port                 pulumi.IntOutput       `pulumi:"port"`
	RdsResourceId        pulumi.StringOutput    `pulumi:"rdsResourceId"`
	TargetArn            pulumi.StringOutput    `pulumi:"targetArn"`
	TargetGroupName      pulumi.StringOutput    `pulumi:"targetGroupName"`
	TrackedClusterId     pulumi.StringOutput    `pulumi:"trackedClusterId"`
	Type                 pulumi.StringOutput    `pulumi:"type"`
}

// NewProxyTarget registers a new resource with the given unique name, arguments, and options.
func NewProxyTarget(ctx *pulumi.Context,
	name string, args *ProxyTargetArgs, opts ...pulumi.ResourceOption) (*ProxyTarget, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbProxyName == nil {
		return nil, errors.New("invalid value for required argument 'DbProxyName'")
	}
	if args.TargetGroupName == nil {
		return nil, errors.New("invalid value for required argument 'TargetGroupName'")
	}
	var resource ProxyTarget
	err := ctx.RegisterResource("aws:rds/proxyTarget:ProxyTarget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProxyTarget gets an existing ProxyTarget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProxyTarget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProxyTargetState, opts ...pulumi.ResourceOption) (*ProxyTarget, error) {
	var resource ProxyTarget
	err := ctx.ReadResource("aws:rds/proxyTarget:ProxyTarget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProxyTarget resources.
type proxyTargetState struct {
	DbClusterIdentifier  *string `pulumi:"dbClusterIdentifier"`
	DbInstanceIdentifier *string `pulumi:"dbInstanceIdentifier"`
	DbProxyName          *string `pulumi:"dbProxyName"`
	Endpoint             *string `pulumi:"endpoint"`
	Port                 *int    `pulumi:"port"`
	RdsResourceId        *string `pulumi:"rdsResourceId"`
	TargetArn            *string `pulumi:"targetArn"`
	TargetGroupName      *string `pulumi:"targetGroupName"`
	TrackedClusterId     *string `pulumi:"trackedClusterId"`
	Type                 *string `pulumi:"type"`
}

type ProxyTargetState struct {
	DbClusterIdentifier  pulumi.StringPtrInput
	DbInstanceIdentifier pulumi.StringPtrInput
	DbProxyName          pulumi.StringPtrInput
	Endpoint             pulumi.StringPtrInput
	Port                 pulumi.IntPtrInput
	RdsResourceId        pulumi.StringPtrInput
	TargetArn            pulumi.StringPtrInput
	TargetGroupName      pulumi.StringPtrInput
	TrackedClusterId     pulumi.StringPtrInput
	Type                 pulumi.StringPtrInput
}

func (ProxyTargetState) ElementType() reflect.Type {
	return reflect.TypeOf((*proxyTargetState)(nil)).Elem()
}

type proxyTargetArgs struct {
	DbClusterIdentifier  *string `pulumi:"dbClusterIdentifier"`
	DbInstanceIdentifier *string `pulumi:"dbInstanceIdentifier"`
	DbProxyName          string  `pulumi:"dbProxyName"`
	TargetGroupName      string  `pulumi:"targetGroupName"`
}

// The set of arguments for constructing a ProxyTarget resource.
type ProxyTargetArgs struct {
	DbClusterIdentifier  pulumi.StringPtrInput
	DbInstanceIdentifier pulumi.StringPtrInput
	DbProxyName          pulumi.StringInput
	TargetGroupName      pulumi.StringInput
}

func (ProxyTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*proxyTargetArgs)(nil)).Elem()
}

type ProxyTargetInput interface {
	pulumi.Input

	ToProxyTargetOutput() ProxyTargetOutput
	ToProxyTargetOutputWithContext(ctx context.Context) ProxyTargetOutput
}

func (*ProxyTarget) ElementType() reflect.Type {
	return reflect.TypeOf((**ProxyTarget)(nil)).Elem()
}

func (i *ProxyTarget) ToProxyTargetOutput() ProxyTargetOutput {
	return i.ToProxyTargetOutputWithContext(context.Background())
}

func (i *ProxyTarget) ToProxyTargetOutputWithContext(ctx context.Context) ProxyTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxyTargetOutput)
}

// ProxyTargetArrayInput is an input type that accepts ProxyTargetArray and ProxyTargetArrayOutput values.
// You can construct a concrete instance of `ProxyTargetArrayInput` via:
//
//	ProxyTargetArray{ ProxyTargetArgs{...} }
type ProxyTargetArrayInput interface {
	pulumi.Input

	ToProxyTargetArrayOutput() ProxyTargetArrayOutput
	ToProxyTargetArrayOutputWithContext(context.Context) ProxyTargetArrayOutput
}

type ProxyTargetArray []ProxyTargetInput

func (ProxyTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProxyTarget)(nil)).Elem()
}

func (i ProxyTargetArray) ToProxyTargetArrayOutput() ProxyTargetArrayOutput {
	return i.ToProxyTargetArrayOutputWithContext(context.Background())
}

func (i ProxyTargetArray) ToProxyTargetArrayOutputWithContext(ctx context.Context) ProxyTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxyTargetArrayOutput)
}

// ProxyTargetMapInput is an input type that accepts ProxyTargetMap and ProxyTargetMapOutput values.
// You can construct a concrete instance of `ProxyTargetMapInput` via:
//
//	ProxyTargetMap{ "key": ProxyTargetArgs{...} }
type ProxyTargetMapInput interface {
	pulumi.Input

	ToProxyTargetMapOutput() ProxyTargetMapOutput
	ToProxyTargetMapOutputWithContext(context.Context) ProxyTargetMapOutput
}

type ProxyTargetMap map[string]ProxyTargetInput

func (ProxyTargetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProxyTarget)(nil)).Elem()
}

func (i ProxyTargetMap) ToProxyTargetMapOutput() ProxyTargetMapOutput {
	return i.ToProxyTargetMapOutputWithContext(context.Background())
}

func (i ProxyTargetMap) ToProxyTargetMapOutputWithContext(ctx context.Context) ProxyTargetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxyTargetMapOutput)
}

type ProxyTargetOutput struct{ *pulumi.OutputState }

func (ProxyTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProxyTarget)(nil)).Elem()
}

func (o ProxyTargetOutput) ToProxyTargetOutput() ProxyTargetOutput {
	return o
}

func (o ProxyTargetOutput) ToProxyTargetOutputWithContext(ctx context.Context) ProxyTargetOutput {
	return o
}

func (o ProxyTargetOutput) DbClusterIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProxyTarget) pulumi.StringPtrOutput { return v.DbClusterIdentifier }).(pulumi.StringPtrOutput)
}

func (o ProxyTargetOutput) DbInstanceIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProxyTarget) pulumi.StringPtrOutput { return v.DbInstanceIdentifier }).(pulumi.StringPtrOutput)
}

func (o ProxyTargetOutput) DbProxyName() pulumi.StringOutput {
	return o.ApplyT(func(v *ProxyTarget) pulumi.StringOutput { return v.DbProxyName }).(pulumi.StringOutput)
}

func (o ProxyTargetOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *ProxyTarget) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

func (o ProxyTargetOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *ProxyTarget) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

func (o ProxyTargetOutput) RdsResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProxyTarget) pulumi.StringOutput { return v.RdsResourceId }).(pulumi.StringOutput)
}

func (o ProxyTargetOutput) TargetArn() pulumi.StringOutput {
	return o.ApplyT(func(v *ProxyTarget) pulumi.StringOutput { return v.TargetArn }).(pulumi.StringOutput)
}

func (o ProxyTargetOutput) TargetGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ProxyTarget) pulumi.StringOutput { return v.TargetGroupName }).(pulumi.StringOutput)
}

func (o ProxyTargetOutput) TrackedClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProxyTarget) pulumi.StringOutput { return v.TrackedClusterId }).(pulumi.StringOutput)
}

func (o ProxyTargetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ProxyTarget) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type ProxyTargetArrayOutput struct{ *pulumi.OutputState }

func (ProxyTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProxyTarget)(nil)).Elem()
}

func (o ProxyTargetArrayOutput) ToProxyTargetArrayOutput() ProxyTargetArrayOutput {
	return o
}

func (o ProxyTargetArrayOutput) ToProxyTargetArrayOutputWithContext(ctx context.Context) ProxyTargetArrayOutput {
	return o
}

func (o ProxyTargetArrayOutput) Index(i pulumi.IntInput) ProxyTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProxyTarget {
		return vs[0].([]*ProxyTarget)[vs[1].(int)]
	}).(ProxyTargetOutput)
}

type ProxyTargetMapOutput struct{ *pulumi.OutputState }

func (ProxyTargetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProxyTarget)(nil)).Elem()
}

func (o ProxyTargetMapOutput) ToProxyTargetMapOutput() ProxyTargetMapOutput {
	return o
}

func (o ProxyTargetMapOutput) ToProxyTargetMapOutputWithContext(ctx context.Context) ProxyTargetMapOutput {
	return o
}

func (o ProxyTargetMapOutput) MapIndex(k pulumi.StringInput) ProxyTargetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProxyTarget {
		return vs[0].(map[string]*ProxyTarget)[vs[1].(string)]
	}).(ProxyTargetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProxyTargetInput)(nil)).Elem(), &ProxyTarget{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProxyTargetArrayInput)(nil)).Elem(), ProxyTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProxyTargetMapInput)(nil)).Elem(), ProxyTargetMap{})
	pulumi.RegisterOutputType(ProxyTargetOutput{})
	pulumi.RegisterOutputType(ProxyTargetArrayOutput{})
	pulumi.RegisterOutputType(ProxyTargetMapOutput{})
}
