// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a RDS database instance snapshot. For managing RDS database cluster snapshots, see the [`aws_db_cluster_snapshot` resource](https://www.terraform.io/docs/providers/aws/r/db_cluster_snapshot.html).
type Snapshot struct {
	s *pulumi.ResourceState
}

// NewSnapshot registers a new resource with the given unique name, arguments, and options.
func NewSnapshot(ctx *pulumi.Context,
	name string, args *SnapshotArgs, opts ...pulumi.ResourceOpt) (*Snapshot, error) {
	if args == nil || args.DbInstanceIdentifier == nil {
		return nil, errors.New("missing required argument 'DbInstanceIdentifier'")
	}
	if args == nil || args.DbSnapshotIdentifier == nil {
		return nil, errors.New("missing required argument 'DbSnapshotIdentifier'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["dbInstanceIdentifier"] = nil
		inputs["dbSnapshotIdentifier"] = nil
	} else {
		inputs["dbInstanceIdentifier"] = args.DbInstanceIdentifier
		inputs["dbSnapshotIdentifier"] = args.DbSnapshotIdentifier
	}
	inputs["allocatedStorage"] = nil
	inputs["availabilityZone"] = nil
	inputs["dbSnapshotArn"] = nil
	inputs["encrypted"] = nil
	inputs["engine"] = nil
	inputs["engineVersion"] = nil
	inputs["iops"] = nil
	inputs["kmsKeyId"] = nil
	inputs["licenseModel"] = nil
	inputs["optionGroupName"] = nil
	inputs["port"] = nil
	inputs["snapshotType"] = nil
	inputs["sourceDbSnapshotIdentifier"] = nil
	inputs["sourceRegion"] = nil
	inputs["status"] = nil
	inputs["storageType"] = nil
	inputs["vpcId"] = nil
	s, err := ctx.RegisterResource("aws:rds/snapshot:Snapshot", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Snapshot{s: s}, nil
}

// GetSnapshot gets an existing Snapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshot(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SnapshotState, opts ...pulumi.ResourceOpt) (*Snapshot, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["allocatedStorage"] = state.AllocatedStorage
		inputs["availabilityZone"] = state.AvailabilityZone
		inputs["dbInstanceIdentifier"] = state.DbInstanceIdentifier
		inputs["dbSnapshotArn"] = state.DbSnapshotArn
		inputs["dbSnapshotIdentifier"] = state.DbSnapshotIdentifier
		inputs["encrypted"] = state.Encrypted
		inputs["engine"] = state.Engine
		inputs["engineVersion"] = state.EngineVersion
		inputs["iops"] = state.Iops
		inputs["kmsKeyId"] = state.KmsKeyId
		inputs["licenseModel"] = state.LicenseModel
		inputs["optionGroupName"] = state.OptionGroupName
		inputs["port"] = state.Port
		inputs["snapshotType"] = state.SnapshotType
		inputs["sourceDbSnapshotIdentifier"] = state.SourceDbSnapshotIdentifier
		inputs["sourceRegion"] = state.SourceRegion
		inputs["status"] = state.Status
		inputs["storageType"] = state.StorageType
		inputs["vpcId"] = state.VpcId
	}
	s, err := ctx.ReadResource("aws:rds/snapshot:Snapshot", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Snapshot{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Snapshot) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Snapshot) ID() *pulumi.IDOutput {
	return r.s.ID
}

// Specifies the allocated storage size in gigabytes (GB).
func (r *Snapshot) AllocatedStorage() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["allocatedStorage"])
}

// Specifies the name of the Availability Zone the DB instance was located in at the time of the DB snapshot.
func (r *Snapshot) AvailabilityZone() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["availabilityZone"])
}

// The DB Instance Identifier from which to take the snapshot.
func (r *Snapshot) DbInstanceIdentifier() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["dbInstanceIdentifier"])
}

// The Amazon Resource Name (ARN) for the DB snapshot.
func (r *Snapshot) DbSnapshotArn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["dbSnapshotArn"])
}

// The Identifier for the snapshot.
func (r *Snapshot) DbSnapshotIdentifier() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["dbSnapshotIdentifier"])
}

// Specifies whether the DB snapshot is encrypted.
func (r *Snapshot) Encrypted() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["encrypted"])
}

// Specifies the name of the database engine.
func (r *Snapshot) Engine() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["engine"])
}

// Specifies the version of the database engine.
func (r *Snapshot) EngineVersion() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["engineVersion"])
}

// Specifies the Provisioned IOPS (I/O operations per second) value of the DB instance at the time of the snapshot.
func (r *Snapshot) Iops() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["iops"])
}

// The ARN for the KMS encryption key.
func (r *Snapshot) KmsKeyId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["kmsKeyId"])
}

// License model information for the restored DB instance.
func (r *Snapshot) LicenseModel() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["licenseModel"])
}

// Provides the option group name for the DB snapshot.
func (r *Snapshot) OptionGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["optionGroupName"])
}

func (r *Snapshot) Port() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["port"])
}

func (r *Snapshot) SnapshotType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["snapshotType"])
}

// The DB snapshot Arn that the DB snapshot was copied from. It only has value in case of cross customer or cross region copy.
func (r *Snapshot) SourceDbSnapshotIdentifier() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sourceDbSnapshotIdentifier"])
}

// The region that the DB snapshot was created in or copied from.
func (r *Snapshot) SourceRegion() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sourceRegion"])
}

// Specifies the status of this DB snapshot.
func (r *Snapshot) Status() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["status"])
}

// Specifies the storage type associated with DB snapshot.
func (r *Snapshot) StorageType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["storageType"])
}

// Specifies the storage type associated with DB snapshot.
func (r *Snapshot) VpcId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["vpcId"])
}

// Input properties used for looking up and filtering Snapshot resources.
type SnapshotState struct {
	// Specifies the allocated storage size in gigabytes (GB).
	AllocatedStorage interface{}
	// Specifies the name of the Availability Zone the DB instance was located in at the time of the DB snapshot.
	AvailabilityZone interface{}
	// The DB Instance Identifier from which to take the snapshot.
	DbInstanceIdentifier interface{}
	// The Amazon Resource Name (ARN) for the DB snapshot.
	DbSnapshotArn interface{}
	// The Identifier for the snapshot.
	DbSnapshotIdentifier interface{}
	// Specifies whether the DB snapshot is encrypted.
	Encrypted interface{}
	// Specifies the name of the database engine.
	Engine interface{}
	// Specifies the version of the database engine.
	EngineVersion interface{}
	// Specifies the Provisioned IOPS (I/O operations per second) value of the DB instance at the time of the snapshot.
	Iops interface{}
	// The ARN for the KMS encryption key.
	KmsKeyId interface{}
	// License model information for the restored DB instance.
	LicenseModel interface{}
	// Provides the option group name for the DB snapshot.
	OptionGroupName interface{}
	Port interface{}
	SnapshotType interface{}
	// The DB snapshot Arn that the DB snapshot was copied from. It only has value in case of cross customer or cross region copy.
	SourceDbSnapshotIdentifier interface{}
	// The region that the DB snapshot was created in or copied from.
	SourceRegion interface{}
	// Specifies the status of this DB snapshot.
	Status interface{}
	// Specifies the storage type associated with DB snapshot.
	StorageType interface{}
	// Specifies the storage type associated with DB snapshot.
	VpcId interface{}
}

// The set of arguments for constructing a Snapshot resource.
type SnapshotArgs struct {
	// The DB Instance Identifier from which to take the snapshot.
	DbInstanceIdentifier interface{}
	// The Identifier for the snapshot.
	DbSnapshotIdentifier interface{}
}
