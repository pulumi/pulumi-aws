// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Snapshot struct {
	pulumi.CustomResourceState

	AllocatedStorage           pulumi.IntOutput       `pulumi:"allocatedStorage"`
	AvailabilityZone           pulumi.StringOutput    `pulumi:"availabilityZone"`
	DbInstanceIdentifier       pulumi.StringOutput    `pulumi:"dbInstanceIdentifier"`
	DbSnapshotArn              pulumi.StringOutput    `pulumi:"dbSnapshotArn"`
	DbSnapshotIdentifier       pulumi.StringOutput    `pulumi:"dbSnapshotIdentifier"`
	Encrypted                  pulumi.BoolOutput      `pulumi:"encrypted"`
	Engine                     pulumi.StringOutput    `pulumi:"engine"`
	EngineVersion              pulumi.StringOutput    `pulumi:"engineVersion"`
	Iops                       pulumi.IntOutput       `pulumi:"iops"`
	KmsKeyId                   pulumi.StringOutput    `pulumi:"kmsKeyId"`
	LicenseModel               pulumi.StringOutput    `pulumi:"licenseModel"`
	OptionGroupName            pulumi.StringOutput    `pulumi:"optionGroupName"`
	Port                       pulumi.IntOutput       `pulumi:"port"`
	SnapshotType               pulumi.StringOutput    `pulumi:"snapshotType"`
	SourceDbSnapshotIdentifier pulumi.StringOutput    `pulumi:"sourceDbSnapshotIdentifier"`
	SourceRegion               pulumi.StringOutput    `pulumi:"sourceRegion"`
	Status                     pulumi.StringOutput    `pulumi:"status"`
	StorageType                pulumi.StringOutput    `pulumi:"storageType"`
	Tags                       pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll                    pulumi.StringMapOutput `pulumi:"tagsAll"`
	VpcId                      pulumi.StringOutput    `pulumi:"vpcId"`
}

// NewSnapshot registers a new resource with the given unique name, arguments, and options.
func NewSnapshot(ctx *pulumi.Context,
	name string, args *SnapshotArgs, opts ...pulumi.ResourceOption) (*Snapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbInstanceIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'DbInstanceIdentifier'")
	}
	if args.DbSnapshotIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'DbSnapshotIdentifier'")
	}
	var resource Snapshot
	err := ctx.RegisterResource("aws:rds/snapshot:Snapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshot gets an existing Snapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnapshotState, opts ...pulumi.ResourceOption) (*Snapshot, error) {
	var resource Snapshot
	err := ctx.ReadResource("aws:rds/snapshot:Snapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Snapshot resources.
type snapshotState struct {
	AllocatedStorage           *int              `pulumi:"allocatedStorage"`
	AvailabilityZone           *string           `pulumi:"availabilityZone"`
	DbInstanceIdentifier       *string           `pulumi:"dbInstanceIdentifier"`
	DbSnapshotArn              *string           `pulumi:"dbSnapshotArn"`
	DbSnapshotIdentifier       *string           `pulumi:"dbSnapshotIdentifier"`
	Encrypted                  *bool             `pulumi:"encrypted"`
	Engine                     *string           `pulumi:"engine"`
	EngineVersion              *string           `pulumi:"engineVersion"`
	Iops                       *int              `pulumi:"iops"`
	KmsKeyId                   *string           `pulumi:"kmsKeyId"`
	LicenseModel               *string           `pulumi:"licenseModel"`
	OptionGroupName            *string           `pulumi:"optionGroupName"`
	Port                       *int              `pulumi:"port"`
	SnapshotType               *string           `pulumi:"snapshotType"`
	SourceDbSnapshotIdentifier *string           `pulumi:"sourceDbSnapshotIdentifier"`
	SourceRegion               *string           `pulumi:"sourceRegion"`
	Status                     *string           `pulumi:"status"`
	StorageType                *string           `pulumi:"storageType"`
	Tags                       map[string]string `pulumi:"tags"`
	TagsAll                    map[string]string `pulumi:"tagsAll"`
	VpcId                      *string           `pulumi:"vpcId"`
}

type SnapshotState struct {
	AllocatedStorage           pulumi.IntPtrInput
	AvailabilityZone           pulumi.StringPtrInput
	DbInstanceIdentifier       pulumi.StringPtrInput
	DbSnapshotArn              pulumi.StringPtrInput
	DbSnapshotIdentifier       pulumi.StringPtrInput
	Encrypted                  pulumi.BoolPtrInput
	Engine                     pulumi.StringPtrInput
	EngineVersion              pulumi.StringPtrInput
	Iops                       pulumi.IntPtrInput
	KmsKeyId                   pulumi.StringPtrInput
	LicenseModel               pulumi.StringPtrInput
	OptionGroupName            pulumi.StringPtrInput
	Port                       pulumi.IntPtrInput
	SnapshotType               pulumi.StringPtrInput
	SourceDbSnapshotIdentifier pulumi.StringPtrInput
	SourceRegion               pulumi.StringPtrInput
	Status                     pulumi.StringPtrInput
	StorageType                pulumi.StringPtrInput
	Tags                       pulumi.StringMapInput
	TagsAll                    pulumi.StringMapInput
	VpcId                      pulumi.StringPtrInput
}

func (SnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotState)(nil)).Elem()
}

type snapshotArgs struct {
	DbInstanceIdentifier string            `pulumi:"dbInstanceIdentifier"`
	DbSnapshotIdentifier string            `pulumi:"dbSnapshotIdentifier"`
	Tags                 map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Snapshot resource.
type SnapshotArgs struct {
	DbInstanceIdentifier pulumi.StringInput
	DbSnapshotIdentifier pulumi.StringInput
	Tags                 pulumi.StringMapInput
}

func (SnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotArgs)(nil)).Elem()
}

type SnapshotInput interface {
	pulumi.Input

	ToSnapshotOutput() SnapshotOutput
	ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput
}

func (*Snapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**Snapshot)(nil)).Elem()
}

func (i *Snapshot) ToSnapshotOutput() SnapshotOutput {
	return i.ToSnapshotOutputWithContext(context.Background())
}

func (i *Snapshot) ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotOutput)
}

// SnapshotArrayInput is an input type that accepts SnapshotArray and SnapshotArrayOutput values.
// You can construct a concrete instance of `SnapshotArrayInput` via:
//
//	SnapshotArray{ SnapshotArgs{...} }
type SnapshotArrayInput interface {
	pulumi.Input

	ToSnapshotArrayOutput() SnapshotArrayOutput
	ToSnapshotArrayOutputWithContext(context.Context) SnapshotArrayOutput
}

type SnapshotArray []SnapshotInput

func (SnapshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Snapshot)(nil)).Elem()
}

func (i SnapshotArray) ToSnapshotArrayOutput() SnapshotArrayOutput {
	return i.ToSnapshotArrayOutputWithContext(context.Background())
}

func (i SnapshotArray) ToSnapshotArrayOutputWithContext(ctx context.Context) SnapshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotArrayOutput)
}

// SnapshotMapInput is an input type that accepts SnapshotMap and SnapshotMapOutput values.
// You can construct a concrete instance of `SnapshotMapInput` via:
//
//	SnapshotMap{ "key": SnapshotArgs{...} }
type SnapshotMapInput interface {
	pulumi.Input

	ToSnapshotMapOutput() SnapshotMapOutput
	ToSnapshotMapOutputWithContext(context.Context) SnapshotMapOutput
}

type SnapshotMap map[string]SnapshotInput

func (SnapshotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Snapshot)(nil)).Elem()
}

func (i SnapshotMap) ToSnapshotMapOutput() SnapshotMapOutput {
	return i.ToSnapshotMapOutputWithContext(context.Background())
}

func (i SnapshotMap) ToSnapshotMapOutputWithContext(ctx context.Context) SnapshotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotMapOutput)
}

type SnapshotOutput struct{ *pulumi.OutputState }

func (SnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Snapshot)(nil)).Elem()
}

func (o SnapshotOutput) ToSnapshotOutput() SnapshotOutput {
	return o
}

func (o SnapshotOutput) ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput {
	return o
}

func (o SnapshotOutput) AllocatedStorage() pulumi.IntOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.IntOutput { return v.AllocatedStorage }).(pulumi.IntOutput)
}

func (o SnapshotOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

func (o SnapshotOutput) DbInstanceIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.DbInstanceIdentifier }).(pulumi.StringOutput)
}

func (o SnapshotOutput) DbSnapshotArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.DbSnapshotArn }).(pulumi.StringOutput)
}

func (o SnapshotOutput) DbSnapshotIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.DbSnapshotIdentifier }).(pulumi.StringOutput)
}

func (o SnapshotOutput) Encrypted() pulumi.BoolOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.BoolOutput { return v.Encrypted }).(pulumi.BoolOutput)
}

func (o SnapshotOutput) Engine() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.Engine }).(pulumi.StringOutput)
}

func (o SnapshotOutput) EngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.EngineVersion }).(pulumi.StringOutput)
}

func (o SnapshotOutput) Iops() pulumi.IntOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.IntOutput { return v.Iops }).(pulumi.IntOutput)
}

func (o SnapshotOutput) KmsKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.KmsKeyId }).(pulumi.StringOutput)
}

func (o SnapshotOutput) LicenseModel() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.LicenseModel }).(pulumi.StringOutput)
}

func (o SnapshotOutput) OptionGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.OptionGroupName }).(pulumi.StringOutput)
}

func (o SnapshotOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

func (o SnapshotOutput) SnapshotType() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.SnapshotType }).(pulumi.StringOutput)
}

func (o SnapshotOutput) SourceDbSnapshotIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.SourceDbSnapshotIdentifier }).(pulumi.StringOutput)
}

func (o SnapshotOutput) SourceRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.SourceRegion }).(pulumi.StringOutput)
}

func (o SnapshotOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o SnapshotOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.StorageType }).(pulumi.StringOutput)
}

func (o SnapshotOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o SnapshotOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o SnapshotOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type SnapshotArrayOutput struct{ *pulumi.OutputState }

func (SnapshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Snapshot)(nil)).Elem()
}

func (o SnapshotArrayOutput) ToSnapshotArrayOutput() SnapshotArrayOutput {
	return o
}

func (o SnapshotArrayOutput) ToSnapshotArrayOutputWithContext(ctx context.Context) SnapshotArrayOutput {
	return o
}

func (o SnapshotArrayOutput) Index(i pulumi.IntInput) SnapshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Snapshot {
		return vs[0].([]*Snapshot)[vs[1].(int)]
	}).(SnapshotOutput)
}

type SnapshotMapOutput struct{ *pulumi.OutputState }

func (SnapshotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Snapshot)(nil)).Elem()
}

func (o SnapshotMapOutput) ToSnapshotMapOutput() SnapshotMapOutput {
	return o
}

func (o SnapshotMapOutput) ToSnapshotMapOutputWithContext(ctx context.Context) SnapshotMapOutput {
	return o
}

func (o SnapshotMapOutput) MapIndex(k pulumi.StringInput) SnapshotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Snapshot {
		return vs[0].(map[string]*Snapshot)[vs[1].(string)]
	}).(SnapshotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotInput)(nil)).Elem(), &Snapshot{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotArrayInput)(nil)).Elem(), SnapshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotMapInput)(nil)).Elem(), SnapshotMap{})
	pulumi.RegisterOutputType(SnapshotOutput{})
	pulumi.RegisterOutputType(SnapshotArrayOutput{})
	pulumi.RegisterOutputType(SnapshotMapOutput{})
}
