// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information about a DB Cluster Snapshot for use when provisioning DB clusters.
//
// > **NOTE:** This data source does not apply to snapshots created on DB Instances.
// See the `rds.Snapshot` data source for DB Instance snapshots.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/rds"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := "development_cluster"
// 		opt1 := true
// 		developmentFinalSnapshot, err := rds.LookupClusterSnapshot(ctx, &rds.LookupClusterSnapshotArgs{
// 			DbClusterIdentifier: &opt0,
// 			MostRecent:          &opt1,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		auroraCluster, err := rds.NewCluster(ctx, "auroraCluster", &rds.ClusterArgs{
// 			ClusterIdentifier:  pulumi.String("development_cluster"),
// 			SnapshotIdentifier: pulumi.String(developmentFinalSnapshot.Id),
// 			DbSubnetGroupName:  pulumi.String("my_db_subnet_group"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = rds.NewClusterInstance(ctx, "auroraClusterInstance", &rds.ClusterInstanceArgs{
// 			ClusterIdentifier: auroraCluster.ID(),
// 			InstanceClass:     pulumi.String("db.t2.small"),
// 			DbSubnetGroupName: pulumi.String("my_db_subnet_group"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupClusterSnapshot(ctx *pulumi.Context, args *LookupClusterSnapshotArgs, opts ...pulumi.InvokeOption) (*LookupClusterSnapshotResult, error) {
	var rv LookupClusterSnapshotResult
	err := ctx.Invoke("aws:rds/getClusterSnapshot:getClusterSnapshot", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getClusterSnapshot.
type LookupClusterSnapshotArgs struct {
	// Returns the list of snapshots created by the specific db_cluster
	DbClusterIdentifier *string `pulumi:"dbClusterIdentifier"`
	// Returns information on a specific snapshot_id.
	DbClusterSnapshotIdentifier *string `pulumi:"dbClusterSnapshotIdentifier"`
	// Set this value to true to include manual DB Cluster Snapshots that are public and can be
	// copied or restored by any AWS account, otherwise set this value to false. The default is `false`.
	IncludePublic *bool `pulumi:"includePublic"`
	// Set this value to true to include shared manual DB Cluster Snapshots from other
	// AWS accounts that this AWS account has been given permission to copy or restore, otherwise set this value to false.
	// The default is `false`.
	IncludeShared *bool `pulumi:"includeShared"`
	// If more than one result is returned, use the most recent Snapshot.
	MostRecent *bool `pulumi:"mostRecent"`
	// The type of snapshots to be returned. If you don't specify a SnapshotType
	// value, then both automated and manual DB cluster snapshots are returned. Shared and public DB Cluster Snapshots are not
	// included in the returned results by default. Possible values are, `automated`, `manual`, `shared`, `public` and `awsbackup`.
	SnapshotType *string `pulumi:"snapshotType"`
	// A map of tags for the resource.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getClusterSnapshot.
type LookupClusterSnapshotResult struct {
	// Specifies the allocated storage size in gigabytes (GB).
	AllocatedStorage int `pulumi:"allocatedStorage"`
	// List of EC2 Availability Zones that instances in the DB cluster snapshot can be restored in.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// Specifies the DB cluster identifier of the DB cluster that this DB cluster snapshot was created from.
	DbClusterIdentifier *string `pulumi:"dbClusterIdentifier"`
	// The Amazon Resource Name (ARN) for the DB Cluster Snapshot.
	DbClusterSnapshotArn        string  `pulumi:"dbClusterSnapshotArn"`
	DbClusterSnapshotIdentifier *string `pulumi:"dbClusterSnapshotIdentifier"`
	// Specifies the name of the database engine.
	Engine string `pulumi:"engine"`
	// Version of the database engine for this DB cluster snapshot.
	EngineVersion string `pulumi:"engineVersion"`
	// The provider-assigned unique ID for this managed resource.
	Id            string `pulumi:"id"`
	IncludePublic *bool  `pulumi:"includePublic"`
	IncludeShared *bool  `pulumi:"includeShared"`
	// If storageEncrypted is true, the AWS KMS key identifier for the encrypted DB cluster snapshot.
	KmsKeyId string `pulumi:"kmsKeyId"`
	// License model information for the restored DB cluster.
	LicenseModel string `pulumi:"licenseModel"`
	MostRecent   *bool  `pulumi:"mostRecent"`
	// Port that the DB cluster was listening on at the time of the snapshot.
	Port int `pulumi:"port"`
	// Time when the snapshot was taken, in Universal Coordinated Time (UTC).
	SnapshotCreateTime         string  `pulumi:"snapshotCreateTime"`
	SnapshotType               *string `pulumi:"snapshotType"`
	SourceDbClusterSnapshotArn string  `pulumi:"sourceDbClusterSnapshotArn"`
	// The status of this DB Cluster Snapshot.
	Status string `pulumi:"status"`
	// Specifies whether the DB cluster snapshot is encrypted.
	StorageEncrypted bool `pulumi:"storageEncrypted"`
	// A map of tags for the resource.
	Tags map[string]string `pulumi:"tags"`
	// The VPC ID associated with the DB cluster snapshot.
	VpcId string `pulumi:"vpcId"`
}

func LookupClusterSnapshotOutput(ctx *pulumi.Context, args LookupClusterSnapshotOutputArgs, opts ...pulumi.InvokeOption) LookupClusterSnapshotResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupClusterSnapshotResult, error) {
			args := v.(LookupClusterSnapshotArgs)
			r, err := LookupClusterSnapshot(ctx, &args, opts...)
			return *r, err
		}).(LookupClusterSnapshotResultOutput)
}

// A collection of arguments for invoking getClusterSnapshot.
type LookupClusterSnapshotOutputArgs struct {
	// Returns the list of snapshots created by the specific db_cluster
	DbClusterIdentifier pulumi.StringPtrInput `pulumi:"dbClusterIdentifier"`
	// Returns information on a specific snapshot_id.
	DbClusterSnapshotIdentifier pulumi.StringPtrInput `pulumi:"dbClusterSnapshotIdentifier"`
	// Set this value to true to include manual DB Cluster Snapshots that are public and can be
	// copied or restored by any AWS account, otherwise set this value to false. The default is `false`.
	IncludePublic pulumi.BoolPtrInput `pulumi:"includePublic"`
	// Set this value to true to include shared manual DB Cluster Snapshots from other
	// AWS accounts that this AWS account has been given permission to copy or restore, otherwise set this value to false.
	// The default is `false`.
	IncludeShared pulumi.BoolPtrInput `pulumi:"includeShared"`
	// If more than one result is returned, use the most recent Snapshot.
	MostRecent pulumi.BoolPtrInput `pulumi:"mostRecent"`
	// The type of snapshots to be returned. If you don't specify a SnapshotType
	// value, then both automated and manual DB cluster snapshots are returned. Shared and public DB Cluster Snapshots are not
	// included in the returned results by default. Possible values are, `automated`, `manual`, `shared`, `public` and `awsbackup`.
	SnapshotType pulumi.StringPtrInput `pulumi:"snapshotType"`
	// A map of tags for the resource.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (LookupClusterSnapshotOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterSnapshotArgs)(nil)).Elem()
}

// A collection of values returned by getClusterSnapshot.
type LookupClusterSnapshotResultOutput struct{ *pulumi.OutputState }

func (LookupClusterSnapshotResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterSnapshotResult)(nil)).Elem()
}

func (o LookupClusterSnapshotResultOutput) ToLookupClusterSnapshotResultOutput() LookupClusterSnapshotResultOutput {
	return o
}

func (o LookupClusterSnapshotResultOutput) ToLookupClusterSnapshotResultOutputWithContext(ctx context.Context) LookupClusterSnapshotResultOutput {
	return o
}

// Specifies the allocated storage size in gigabytes (GB).
func (o LookupClusterSnapshotResultOutput) AllocatedStorage() pulumi.IntOutput {
	return o.ApplyT(func(v LookupClusterSnapshotResult) int { return v.AllocatedStorage }).(pulumi.IntOutput)
}

// List of EC2 Availability Zones that instances in the DB cluster snapshot can be restored in.
func (o LookupClusterSnapshotResultOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupClusterSnapshotResult) []string { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// Specifies the DB cluster identifier of the DB cluster that this DB cluster snapshot was created from.
func (o LookupClusterSnapshotResultOutput) DbClusterIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupClusterSnapshotResult) *string { return v.DbClusterIdentifier }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) for the DB Cluster Snapshot.
func (o LookupClusterSnapshotResultOutput) DbClusterSnapshotArn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterSnapshotResult) string { return v.DbClusterSnapshotArn }).(pulumi.StringOutput)
}

func (o LookupClusterSnapshotResultOutput) DbClusterSnapshotIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupClusterSnapshotResult) *string { return v.DbClusterSnapshotIdentifier }).(pulumi.StringPtrOutput)
}

// Specifies the name of the database engine.
func (o LookupClusterSnapshotResultOutput) Engine() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterSnapshotResult) string { return v.Engine }).(pulumi.StringOutput)
}

// Version of the database engine for this DB cluster snapshot.
func (o LookupClusterSnapshotResultOutput) EngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterSnapshotResult) string { return v.EngineVersion }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupClusterSnapshotResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterSnapshotResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupClusterSnapshotResultOutput) IncludePublic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupClusterSnapshotResult) *bool { return v.IncludePublic }).(pulumi.BoolPtrOutput)
}

func (o LookupClusterSnapshotResultOutput) IncludeShared() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupClusterSnapshotResult) *bool { return v.IncludeShared }).(pulumi.BoolPtrOutput)
}

// If storageEncrypted is true, the AWS KMS key identifier for the encrypted DB cluster snapshot.
func (o LookupClusterSnapshotResultOutput) KmsKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterSnapshotResult) string { return v.KmsKeyId }).(pulumi.StringOutput)
}

// License model information for the restored DB cluster.
func (o LookupClusterSnapshotResultOutput) LicenseModel() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterSnapshotResult) string { return v.LicenseModel }).(pulumi.StringOutput)
}

func (o LookupClusterSnapshotResultOutput) MostRecent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupClusterSnapshotResult) *bool { return v.MostRecent }).(pulumi.BoolPtrOutput)
}

// Port that the DB cluster was listening on at the time of the snapshot.
func (o LookupClusterSnapshotResultOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v LookupClusterSnapshotResult) int { return v.Port }).(pulumi.IntOutput)
}

// Time when the snapshot was taken, in Universal Coordinated Time (UTC).
func (o LookupClusterSnapshotResultOutput) SnapshotCreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterSnapshotResult) string { return v.SnapshotCreateTime }).(pulumi.StringOutput)
}

func (o LookupClusterSnapshotResultOutput) SnapshotType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupClusterSnapshotResult) *string { return v.SnapshotType }).(pulumi.StringPtrOutput)
}

func (o LookupClusterSnapshotResultOutput) SourceDbClusterSnapshotArn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterSnapshotResult) string { return v.SourceDbClusterSnapshotArn }).(pulumi.StringOutput)
}

// The status of this DB Cluster Snapshot.
func (o LookupClusterSnapshotResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterSnapshotResult) string { return v.Status }).(pulumi.StringOutput)
}

// Specifies whether the DB cluster snapshot is encrypted.
func (o LookupClusterSnapshotResultOutput) StorageEncrypted() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupClusterSnapshotResult) bool { return v.StorageEncrypted }).(pulumi.BoolOutput)
}

// A map of tags for the resource.
func (o LookupClusterSnapshotResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupClusterSnapshotResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The VPC ID associated with the DB cluster snapshot.
func (o LookupClusterSnapshotResultOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterSnapshotResult) string { return v.VpcId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupClusterSnapshotResultOutput{})
}
