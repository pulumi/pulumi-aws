// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ClusterParameterGroupParameter struct {
	// "immediate" (default), or "pending-reboot". Some
	// engines can't apply some parameters without a reboot, and you will need to
	// specify "pending-reboot" here.
	ApplyMethod *string `pulumi:"applyMethod"`
	// The name of the DB parameter.
	Name string `pulumi:"name"`
	// The value of the DB parameter.
	Value string `pulumi:"value"`
}

// ClusterParameterGroupParameterInput is an input type that accepts ClusterParameterGroupParameterArgs and ClusterParameterGroupParameterOutput values.
// You can construct a concrete instance of `ClusterParameterGroupParameterInput` via:
//
// 		 ClusterParameterGroupParameterArgs{...}
//
type ClusterParameterGroupParameterInput interface {
	pulumi.Input

	ToClusterParameterGroupParameterOutput() ClusterParameterGroupParameterOutput
	ToClusterParameterGroupParameterOutputWithContext(context.Context) ClusterParameterGroupParameterOutput
}

type ClusterParameterGroupParameterArgs struct {
	// "immediate" (default), or "pending-reboot". Some
	// engines can't apply some parameters without a reboot, and you will need to
	// specify "pending-reboot" here.
	ApplyMethod pulumi.StringPtrInput `pulumi:"applyMethod"`
	// The name of the DB parameter.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the DB parameter.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ClusterParameterGroupParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterParameterGroupParameter)(nil)).Elem()
}

func (i ClusterParameterGroupParameterArgs) ToClusterParameterGroupParameterOutput() ClusterParameterGroupParameterOutput {
	return i.ToClusterParameterGroupParameterOutputWithContext(context.Background())
}

func (i ClusterParameterGroupParameterArgs) ToClusterParameterGroupParameterOutputWithContext(ctx context.Context) ClusterParameterGroupParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterParameterGroupParameterOutput)
}

// ClusterParameterGroupParameterArrayInput is an input type that accepts ClusterParameterGroupParameterArray and ClusterParameterGroupParameterArrayOutput values.
// You can construct a concrete instance of `ClusterParameterGroupParameterArrayInput` via:
//
// 		 ClusterParameterGroupParameterArray{ ClusterParameterGroupParameterArgs{...} }
//
type ClusterParameterGroupParameterArrayInput interface {
	pulumi.Input

	ToClusterParameterGroupParameterArrayOutput() ClusterParameterGroupParameterArrayOutput
	ToClusterParameterGroupParameterArrayOutputWithContext(context.Context) ClusterParameterGroupParameterArrayOutput
}

type ClusterParameterGroupParameterArray []ClusterParameterGroupParameterInput

func (ClusterParameterGroupParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterParameterGroupParameter)(nil)).Elem()
}

func (i ClusterParameterGroupParameterArray) ToClusterParameterGroupParameterArrayOutput() ClusterParameterGroupParameterArrayOutput {
	return i.ToClusterParameterGroupParameterArrayOutputWithContext(context.Background())
}

func (i ClusterParameterGroupParameterArray) ToClusterParameterGroupParameterArrayOutputWithContext(ctx context.Context) ClusterParameterGroupParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterParameterGroupParameterArrayOutput)
}

type ClusterParameterGroupParameterOutput struct{ *pulumi.OutputState }

func (ClusterParameterGroupParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterParameterGroupParameter)(nil)).Elem()
}

func (o ClusterParameterGroupParameterOutput) ToClusterParameterGroupParameterOutput() ClusterParameterGroupParameterOutput {
	return o
}

func (o ClusterParameterGroupParameterOutput) ToClusterParameterGroupParameterOutputWithContext(ctx context.Context) ClusterParameterGroupParameterOutput {
	return o
}

// "immediate" (default), or "pending-reboot". Some
// engines can't apply some parameters without a reboot, and you will need to
// specify "pending-reboot" here.
func (o ClusterParameterGroupParameterOutput) ApplyMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterParameterGroupParameter) *string { return v.ApplyMethod }).(pulumi.StringPtrOutput)
}

// The name of the DB parameter.
func (o ClusterParameterGroupParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterParameterGroupParameter) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the DB parameter.
func (o ClusterParameterGroupParameterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterParameterGroupParameter) string { return v.Value }).(pulumi.StringOutput)
}

type ClusterParameterGroupParameterArrayOutput struct{ *pulumi.OutputState }

func (ClusterParameterGroupParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterParameterGroupParameter)(nil)).Elem()
}

func (o ClusterParameterGroupParameterArrayOutput) ToClusterParameterGroupParameterArrayOutput() ClusterParameterGroupParameterArrayOutput {
	return o
}

func (o ClusterParameterGroupParameterArrayOutput) ToClusterParameterGroupParameterArrayOutputWithContext(ctx context.Context) ClusterParameterGroupParameterArrayOutput {
	return o
}

func (o ClusterParameterGroupParameterArrayOutput) Index(i pulumi.IntInput) ClusterParameterGroupParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterParameterGroupParameter {
		return vs[0].([]ClusterParameterGroupParameter)[vs[1].(int)]
	}).(ClusterParameterGroupParameterOutput)
}

type ClusterS3Import struct {
	// The bucket name where your backup is stored
	BucketName string `pulumi:"bucketName"`
	// Can be blank, but is the path to your backup
	BucketPrefix *string `pulumi:"bucketPrefix"`
	// Role applied to load the data.
	IngestionRole string `pulumi:"ingestionRole"`
	// Source engine for the backup
	SourceEngine string `pulumi:"sourceEngine"`
	// Version of the source engine used to make the backup
	SourceEngineVersion string `pulumi:"sourceEngineVersion"`
}

// ClusterS3ImportInput is an input type that accepts ClusterS3ImportArgs and ClusterS3ImportOutput values.
// You can construct a concrete instance of `ClusterS3ImportInput` via:
//
// 		 ClusterS3ImportArgs{...}
//
type ClusterS3ImportInput interface {
	pulumi.Input

	ToClusterS3ImportOutput() ClusterS3ImportOutput
	ToClusterS3ImportOutputWithContext(context.Context) ClusterS3ImportOutput
}

type ClusterS3ImportArgs struct {
	// The bucket name where your backup is stored
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// Can be blank, but is the path to your backup
	BucketPrefix pulumi.StringPtrInput `pulumi:"bucketPrefix"`
	// Role applied to load the data.
	IngestionRole pulumi.StringInput `pulumi:"ingestionRole"`
	// Source engine for the backup
	SourceEngine pulumi.StringInput `pulumi:"sourceEngine"`
	// Version of the source engine used to make the backup
	SourceEngineVersion pulumi.StringInput `pulumi:"sourceEngineVersion"`
}

func (ClusterS3ImportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterS3Import)(nil)).Elem()
}

func (i ClusterS3ImportArgs) ToClusterS3ImportOutput() ClusterS3ImportOutput {
	return i.ToClusterS3ImportOutputWithContext(context.Background())
}

func (i ClusterS3ImportArgs) ToClusterS3ImportOutputWithContext(ctx context.Context) ClusterS3ImportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterS3ImportOutput)
}

func (i ClusterS3ImportArgs) ToClusterS3ImportPtrOutput() ClusterS3ImportPtrOutput {
	return i.ToClusterS3ImportPtrOutputWithContext(context.Background())
}

func (i ClusterS3ImportArgs) ToClusterS3ImportPtrOutputWithContext(ctx context.Context) ClusterS3ImportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterS3ImportOutput).ToClusterS3ImportPtrOutputWithContext(ctx)
}

// ClusterS3ImportPtrInput is an input type that accepts ClusterS3ImportArgs, ClusterS3ImportPtr and ClusterS3ImportPtrOutput values.
// You can construct a concrete instance of `ClusterS3ImportPtrInput` via:
//
// 		 ClusterS3ImportArgs{...}
//
//  or:
//
// 		 nil
//
type ClusterS3ImportPtrInput interface {
	pulumi.Input

	ToClusterS3ImportPtrOutput() ClusterS3ImportPtrOutput
	ToClusterS3ImportPtrOutputWithContext(context.Context) ClusterS3ImportPtrOutput
}

type clusterS3ImportPtrType ClusterS3ImportArgs

func ClusterS3ImportPtr(v *ClusterS3ImportArgs) ClusterS3ImportPtrInput {
	return (*clusterS3ImportPtrType)(v)
}

func (*clusterS3ImportPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterS3Import)(nil)).Elem()
}

func (i *clusterS3ImportPtrType) ToClusterS3ImportPtrOutput() ClusterS3ImportPtrOutput {
	return i.ToClusterS3ImportPtrOutputWithContext(context.Background())
}

func (i *clusterS3ImportPtrType) ToClusterS3ImportPtrOutputWithContext(ctx context.Context) ClusterS3ImportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterS3ImportPtrOutput)
}

type ClusterS3ImportOutput struct{ *pulumi.OutputState }

func (ClusterS3ImportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterS3Import)(nil)).Elem()
}

func (o ClusterS3ImportOutput) ToClusterS3ImportOutput() ClusterS3ImportOutput {
	return o
}

func (o ClusterS3ImportOutput) ToClusterS3ImportOutputWithContext(ctx context.Context) ClusterS3ImportOutput {
	return o
}

func (o ClusterS3ImportOutput) ToClusterS3ImportPtrOutput() ClusterS3ImportPtrOutput {
	return o.ToClusterS3ImportPtrOutputWithContext(context.Background())
}

func (o ClusterS3ImportOutput) ToClusterS3ImportPtrOutputWithContext(ctx context.Context) ClusterS3ImportPtrOutput {
	return o.ApplyT(func(v ClusterS3Import) *ClusterS3Import {
		return &v
	}).(ClusterS3ImportPtrOutput)
}

// The bucket name where your backup is stored
func (o ClusterS3ImportOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterS3Import) string { return v.BucketName }).(pulumi.StringOutput)
}

// Can be blank, but is the path to your backup
func (o ClusterS3ImportOutput) BucketPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterS3Import) *string { return v.BucketPrefix }).(pulumi.StringPtrOutput)
}

// Role applied to load the data.
func (o ClusterS3ImportOutput) IngestionRole() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterS3Import) string { return v.IngestionRole }).(pulumi.StringOutput)
}

// Source engine for the backup
func (o ClusterS3ImportOutput) SourceEngine() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterS3Import) string { return v.SourceEngine }).(pulumi.StringOutput)
}

// Version of the source engine used to make the backup
func (o ClusterS3ImportOutput) SourceEngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterS3Import) string { return v.SourceEngineVersion }).(pulumi.StringOutput)
}

type ClusterS3ImportPtrOutput struct{ *pulumi.OutputState }

func (ClusterS3ImportPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterS3Import)(nil)).Elem()
}

func (o ClusterS3ImportPtrOutput) ToClusterS3ImportPtrOutput() ClusterS3ImportPtrOutput {
	return o
}

func (o ClusterS3ImportPtrOutput) ToClusterS3ImportPtrOutputWithContext(ctx context.Context) ClusterS3ImportPtrOutput {
	return o
}

func (o ClusterS3ImportPtrOutput) Elem() ClusterS3ImportOutput {
	return o.ApplyT(func(v *ClusterS3Import) ClusterS3Import { return *v }).(ClusterS3ImportOutput)
}

// The bucket name where your backup is stored
func (o ClusterS3ImportPtrOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterS3Import) string { return v.BucketName }).(pulumi.StringOutput)
}

// Can be blank, but is the path to your backup
func (o ClusterS3ImportPtrOutput) BucketPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterS3Import) *string { return v.BucketPrefix }).(pulumi.StringPtrOutput)
}

// Role applied to load the data.
func (o ClusterS3ImportPtrOutput) IngestionRole() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterS3Import) string { return v.IngestionRole }).(pulumi.StringOutput)
}

// Source engine for the backup
func (o ClusterS3ImportPtrOutput) SourceEngine() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterS3Import) string { return v.SourceEngine }).(pulumi.StringOutput)
}

// Version of the source engine used to make the backup
func (o ClusterS3ImportPtrOutput) SourceEngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterS3Import) string { return v.SourceEngineVersion }).(pulumi.StringOutput)
}

type ClusterScalingConfiguration struct {
	// Whether to enable automatic pause. A DB cluster can be paused only when it's idle (it has no connections). If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. Defaults to `true`.
	AutoPause *bool `pulumi:"autoPause"`
	// The maximum capacity. The maximum capacity must be greater than or equal to the minimum capacity. Valid capacity values are `1`, `2`, `4`, `8`, `16`, `32`, `64`, `128`, and `256`. Defaults to `16`.
	MaxCapacity *int `pulumi:"maxCapacity"`
	// The minimum capacity. The minimum capacity must be lesser than or equal to the maximum capacity. Valid capacity values are `1`, `2`, `4`, `8`, `16`, `32`, `64`, `128`, and `256`. Defaults to `2`.
	MinCapacity *int `pulumi:"minCapacity"`
	// The time, in seconds, before an Aurora DB cluster in serverless mode is paused. Valid values are `300` through `86400`. Defaults to `300`.
	SecondsUntilAutoPause *int `pulumi:"secondsUntilAutoPause"`
	// The action to take when the timeout is reached. Valid values: `ForceApplyCapacityChange`, `RollbackCapacityChange`. Defaults to `RollbackCapacityChange`. See [documentation](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.timeout-action).
	TimeoutAction *string `pulumi:"timeoutAction"`
}

// ClusterScalingConfigurationInput is an input type that accepts ClusterScalingConfigurationArgs and ClusterScalingConfigurationOutput values.
// You can construct a concrete instance of `ClusterScalingConfigurationInput` via:
//
// 		 ClusterScalingConfigurationArgs{...}
//
type ClusterScalingConfigurationInput interface {
	pulumi.Input

	ToClusterScalingConfigurationOutput() ClusterScalingConfigurationOutput
	ToClusterScalingConfigurationOutputWithContext(context.Context) ClusterScalingConfigurationOutput
}

type ClusterScalingConfigurationArgs struct {
	// Whether to enable automatic pause. A DB cluster can be paused only when it's idle (it has no connections). If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. Defaults to `true`.
	AutoPause pulumi.BoolPtrInput `pulumi:"autoPause"`
	// The maximum capacity. The maximum capacity must be greater than or equal to the minimum capacity. Valid capacity values are `1`, `2`, `4`, `8`, `16`, `32`, `64`, `128`, and `256`. Defaults to `16`.
	MaxCapacity pulumi.IntPtrInput `pulumi:"maxCapacity"`
	// The minimum capacity. The minimum capacity must be lesser than or equal to the maximum capacity. Valid capacity values are `1`, `2`, `4`, `8`, `16`, `32`, `64`, `128`, and `256`. Defaults to `2`.
	MinCapacity pulumi.IntPtrInput `pulumi:"minCapacity"`
	// The time, in seconds, before an Aurora DB cluster in serverless mode is paused. Valid values are `300` through `86400`. Defaults to `300`.
	SecondsUntilAutoPause pulumi.IntPtrInput `pulumi:"secondsUntilAutoPause"`
	// The action to take when the timeout is reached. Valid values: `ForceApplyCapacityChange`, `RollbackCapacityChange`. Defaults to `RollbackCapacityChange`. See [documentation](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.timeout-action).
	TimeoutAction pulumi.StringPtrInput `pulumi:"timeoutAction"`
}

func (ClusterScalingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterScalingConfiguration)(nil)).Elem()
}

func (i ClusterScalingConfigurationArgs) ToClusterScalingConfigurationOutput() ClusterScalingConfigurationOutput {
	return i.ToClusterScalingConfigurationOutputWithContext(context.Background())
}

func (i ClusterScalingConfigurationArgs) ToClusterScalingConfigurationOutputWithContext(ctx context.Context) ClusterScalingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterScalingConfigurationOutput)
}

func (i ClusterScalingConfigurationArgs) ToClusterScalingConfigurationPtrOutput() ClusterScalingConfigurationPtrOutput {
	return i.ToClusterScalingConfigurationPtrOutputWithContext(context.Background())
}

func (i ClusterScalingConfigurationArgs) ToClusterScalingConfigurationPtrOutputWithContext(ctx context.Context) ClusterScalingConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterScalingConfigurationOutput).ToClusterScalingConfigurationPtrOutputWithContext(ctx)
}

// ClusterScalingConfigurationPtrInput is an input type that accepts ClusterScalingConfigurationArgs, ClusterScalingConfigurationPtr and ClusterScalingConfigurationPtrOutput values.
// You can construct a concrete instance of `ClusterScalingConfigurationPtrInput` via:
//
// 		 ClusterScalingConfigurationArgs{...}
//
//  or:
//
// 		 nil
//
type ClusterScalingConfigurationPtrInput interface {
	pulumi.Input

	ToClusterScalingConfigurationPtrOutput() ClusterScalingConfigurationPtrOutput
	ToClusterScalingConfigurationPtrOutputWithContext(context.Context) ClusterScalingConfigurationPtrOutput
}

type clusterScalingConfigurationPtrType ClusterScalingConfigurationArgs

func ClusterScalingConfigurationPtr(v *ClusterScalingConfigurationArgs) ClusterScalingConfigurationPtrInput {
	return (*clusterScalingConfigurationPtrType)(v)
}

func (*clusterScalingConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterScalingConfiguration)(nil)).Elem()
}

func (i *clusterScalingConfigurationPtrType) ToClusterScalingConfigurationPtrOutput() ClusterScalingConfigurationPtrOutput {
	return i.ToClusterScalingConfigurationPtrOutputWithContext(context.Background())
}

func (i *clusterScalingConfigurationPtrType) ToClusterScalingConfigurationPtrOutputWithContext(ctx context.Context) ClusterScalingConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterScalingConfigurationPtrOutput)
}

type ClusterScalingConfigurationOutput struct{ *pulumi.OutputState }

func (ClusterScalingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterScalingConfiguration)(nil)).Elem()
}

func (o ClusterScalingConfigurationOutput) ToClusterScalingConfigurationOutput() ClusterScalingConfigurationOutput {
	return o
}

func (o ClusterScalingConfigurationOutput) ToClusterScalingConfigurationOutputWithContext(ctx context.Context) ClusterScalingConfigurationOutput {
	return o
}

func (o ClusterScalingConfigurationOutput) ToClusterScalingConfigurationPtrOutput() ClusterScalingConfigurationPtrOutput {
	return o.ToClusterScalingConfigurationPtrOutputWithContext(context.Background())
}

func (o ClusterScalingConfigurationOutput) ToClusterScalingConfigurationPtrOutputWithContext(ctx context.Context) ClusterScalingConfigurationPtrOutput {
	return o.ApplyT(func(v ClusterScalingConfiguration) *ClusterScalingConfiguration {
		return &v
	}).(ClusterScalingConfigurationPtrOutput)
}

// Whether to enable automatic pause. A DB cluster can be paused only when it's idle (it has no connections). If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. Defaults to `true`.
func (o ClusterScalingConfigurationOutput) AutoPause() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterScalingConfiguration) *bool { return v.AutoPause }).(pulumi.BoolPtrOutput)
}

// The maximum capacity. The maximum capacity must be greater than or equal to the minimum capacity. Valid capacity values are `1`, `2`, `4`, `8`, `16`, `32`, `64`, `128`, and `256`. Defaults to `16`.
func (o ClusterScalingConfigurationOutput) MaxCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterScalingConfiguration) *int { return v.MaxCapacity }).(pulumi.IntPtrOutput)
}

// The minimum capacity. The minimum capacity must be lesser than or equal to the maximum capacity. Valid capacity values are `1`, `2`, `4`, `8`, `16`, `32`, `64`, `128`, and `256`. Defaults to `2`.
func (o ClusterScalingConfigurationOutput) MinCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterScalingConfiguration) *int { return v.MinCapacity }).(pulumi.IntPtrOutput)
}

// The time, in seconds, before an Aurora DB cluster in serverless mode is paused. Valid values are `300` through `86400`. Defaults to `300`.
func (o ClusterScalingConfigurationOutput) SecondsUntilAutoPause() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterScalingConfiguration) *int { return v.SecondsUntilAutoPause }).(pulumi.IntPtrOutput)
}

// The action to take when the timeout is reached. Valid values: `ForceApplyCapacityChange`, `RollbackCapacityChange`. Defaults to `RollbackCapacityChange`. See [documentation](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.timeout-action).
func (o ClusterScalingConfigurationOutput) TimeoutAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterScalingConfiguration) *string { return v.TimeoutAction }).(pulumi.StringPtrOutput)
}

type ClusterScalingConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ClusterScalingConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterScalingConfiguration)(nil)).Elem()
}

func (o ClusterScalingConfigurationPtrOutput) ToClusterScalingConfigurationPtrOutput() ClusterScalingConfigurationPtrOutput {
	return o
}

func (o ClusterScalingConfigurationPtrOutput) ToClusterScalingConfigurationPtrOutputWithContext(ctx context.Context) ClusterScalingConfigurationPtrOutput {
	return o
}

func (o ClusterScalingConfigurationPtrOutput) Elem() ClusterScalingConfigurationOutput {
	return o.ApplyT(func(v *ClusterScalingConfiguration) ClusterScalingConfiguration { return *v }).(ClusterScalingConfigurationOutput)
}

// Whether to enable automatic pause. A DB cluster can be paused only when it's idle (it has no connections). If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. Defaults to `true`.
func (o ClusterScalingConfigurationPtrOutput) AutoPause() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterScalingConfiguration) *bool { return v.AutoPause }).(pulumi.BoolPtrOutput)
}

// The maximum capacity. The maximum capacity must be greater than or equal to the minimum capacity. Valid capacity values are `1`, `2`, `4`, `8`, `16`, `32`, `64`, `128`, and `256`. Defaults to `16`.
func (o ClusterScalingConfigurationPtrOutput) MaxCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterScalingConfiguration) *int { return v.MaxCapacity }).(pulumi.IntPtrOutput)
}

// The minimum capacity. The minimum capacity must be lesser than or equal to the maximum capacity. Valid capacity values are `1`, `2`, `4`, `8`, `16`, `32`, `64`, `128`, and `256`. Defaults to `2`.
func (o ClusterScalingConfigurationPtrOutput) MinCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterScalingConfiguration) *int { return v.MinCapacity }).(pulumi.IntPtrOutput)
}

// The time, in seconds, before an Aurora DB cluster in serverless mode is paused. Valid values are `300` through `86400`. Defaults to `300`.
func (o ClusterScalingConfigurationPtrOutput) SecondsUntilAutoPause() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterScalingConfiguration) *int { return v.SecondsUntilAutoPause }).(pulumi.IntPtrOutput)
}

// The action to take when the timeout is reached. Valid values: `ForceApplyCapacityChange`, `RollbackCapacityChange`. Defaults to `RollbackCapacityChange`. See [documentation](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.timeout-action).
func (o ClusterScalingConfigurationPtrOutput) TimeoutAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterScalingConfiguration) *string { return v.TimeoutAction }).(pulumi.StringPtrOutput)
}

type InstanceS3Import struct {
	// The bucket name where your backup is stored
	BucketName string `pulumi:"bucketName"`
	// Can be blank, but is the path to your backup
	BucketPrefix *string `pulumi:"bucketPrefix"`
	// Role applied to load the data.
	IngestionRole string `pulumi:"ingestionRole"`
	// Source engine for the backup
	SourceEngine string `pulumi:"sourceEngine"`
	// Version of the source engine used to make the backup
	SourceEngineVersion string `pulumi:"sourceEngineVersion"`
}

// InstanceS3ImportInput is an input type that accepts InstanceS3ImportArgs and InstanceS3ImportOutput values.
// You can construct a concrete instance of `InstanceS3ImportInput` via:
//
// 		 InstanceS3ImportArgs{...}
//
type InstanceS3ImportInput interface {
	pulumi.Input

	ToInstanceS3ImportOutput() InstanceS3ImportOutput
	ToInstanceS3ImportOutputWithContext(context.Context) InstanceS3ImportOutput
}

type InstanceS3ImportArgs struct {
	// The bucket name where your backup is stored
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// Can be blank, but is the path to your backup
	BucketPrefix pulumi.StringPtrInput `pulumi:"bucketPrefix"`
	// Role applied to load the data.
	IngestionRole pulumi.StringInput `pulumi:"ingestionRole"`
	// Source engine for the backup
	SourceEngine pulumi.StringInput `pulumi:"sourceEngine"`
	// Version of the source engine used to make the backup
	SourceEngineVersion pulumi.StringInput `pulumi:"sourceEngineVersion"`
}

func (InstanceS3ImportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceS3Import)(nil)).Elem()
}

func (i InstanceS3ImportArgs) ToInstanceS3ImportOutput() InstanceS3ImportOutput {
	return i.ToInstanceS3ImportOutputWithContext(context.Background())
}

func (i InstanceS3ImportArgs) ToInstanceS3ImportOutputWithContext(ctx context.Context) InstanceS3ImportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceS3ImportOutput)
}

func (i InstanceS3ImportArgs) ToInstanceS3ImportPtrOutput() InstanceS3ImportPtrOutput {
	return i.ToInstanceS3ImportPtrOutputWithContext(context.Background())
}

func (i InstanceS3ImportArgs) ToInstanceS3ImportPtrOutputWithContext(ctx context.Context) InstanceS3ImportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceS3ImportOutput).ToInstanceS3ImportPtrOutputWithContext(ctx)
}

// InstanceS3ImportPtrInput is an input type that accepts InstanceS3ImportArgs, InstanceS3ImportPtr and InstanceS3ImportPtrOutput values.
// You can construct a concrete instance of `InstanceS3ImportPtrInput` via:
//
// 		 InstanceS3ImportArgs{...}
//
//  or:
//
// 		 nil
//
type InstanceS3ImportPtrInput interface {
	pulumi.Input

	ToInstanceS3ImportPtrOutput() InstanceS3ImportPtrOutput
	ToInstanceS3ImportPtrOutputWithContext(context.Context) InstanceS3ImportPtrOutput
}

type instanceS3ImportPtrType InstanceS3ImportArgs

func InstanceS3ImportPtr(v *InstanceS3ImportArgs) InstanceS3ImportPtrInput {
	return (*instanceS3ImportPtrType)(v)
}

func (*instanceS3ImportPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceS3Import)(nil)).Elem()
}

func (i *instanceS3ImportPtrType) ToInstanceS3ImportPtrOutput() InstanceS3ImportPtrOutput {
	return i.ToInstanceS3ImportPtrOutputWithContext(context.Background())
}

func (i *instanceS3ImportPtrType) ToInstanceS3ImportPtrOutputWithContext(ctx context.Context) InstanceS3ImportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceS3ImportPtrOutput)
}

type InstanceS3ImportOutput struct{ *pulumi.OutputState }

func (InstanceS3ImportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceS3Import)(nil)).Elem()
}

func (o InstanceS3ImportOutput) ToInstanceS3ImportOutput() InstanceS3ImportOutput {
	return o
}

func (o InstanceS3ImportOutput) ToInstanceS3ImportOutputWithContext(ctx context.Context) InstanceS3ImportOutput {
	return o
}

func (o InstanceS3ImportOutput) ToInstanceS3ImportPtrOutput() InstanceS3ImportPtrOutput {
	return o.ToInstanceS3ImportPtrOutputWithContext(context.Background())
}

func (o InstanceS3ImportOutput) ToInstanceS3ImportPtrOutputWithContext(ctx context.Context) InstanceS3ImportPtrOutput {
	return o.ApplyT(func(v InstanceS3Import) *InstanceS3Import {
		return &v
	}).(InstanceS3ImportPtrOutput)
}

// The bucket name where your backup is stored
func (o InstanceS3ImportOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceS3Import) string { return v.BucketName }).(pulumi.StringOutput)
}

// Can be blank, but is the path to your backup
func (o InstanceS3ImportOutput) BucketPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceS3Import) *string { return v.BucketPrefix }).(pulumi.StringPtrOutput)
}

// Role applied to load the data.
func (o InstanceS3ImportOutput) IngestionRole() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceS3Import) string { return v.IngestionRole }).(pulumi.StringOutput)
}

// Source engine for the backup
func (o InstanceS3ImportOutput) SourceEngine() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceS3Import) string { return v.SourceEngine }).(pulumi.StringOutput)
}

// Version of the source engine used to make the backup
func (o InstanceS3ImportOutput) SourceEngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceS3Import) string { return v.SourceEngineVersion }).(pulumi.StringOutput)
}

type InstanceS3ImportPtrOutput struct{ *pulumi.OutputState }

func (InstanceS3ImportPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceS3Import)(nil)).Elem()
}

func (o InstanceS3ImportPtrOutput) ToInstanceS3ImportPtrOutput() InstanceS3ImportPtrOutput {
	return o
}

func (o InstanceS3ImportPtrOutput) ToInstanceS3ImportPtrOutputWithContext(ctx context.Context) InstanceS3ImportPtrOutput {
	return o
}

func (o InstanceS3ImportPtrOutput) Elem() InstanceS3ImportOutput {
	return o.ApplyT(func(v *InstanceS3Import) InstanceS3Import { return *v }).(InstanceS3ImportOutput)
}

// The bucket name where your backup is stored
func (o InstanceS3ImportPtrOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceS3Import) string { return v.BucketName }).(pulumi.StringOutput)
}

// Can be blank, but is the path to your backup
func (o InstanceS3ImportPtrOutput) BucketPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceS3Import) *string { return v.BucketPrefix }).(pulumi.StringPtrOutput)
}

// Role applied to load the data.
func (o InstanceS3ImportPtrOutput) IngestionRole() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceS3Import) string { return v.IngestionRole }).(pulumi.StringOutput)
}

// Source engine for the backup
func (o InstanceS3ImportPtrOutput) SourceEngine() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceS3Import) string { return v.SourceEngine }).(pulumi.StringOutput)
}

// Version of the source engine used to make the backup
func (o InstanceS3ImportPtrOutput) SourceEngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceS3Import) string { return v.SourceEngineVersion }).(pulumi.StringOutput)
}

type OptionGroupOption struct {
	// A list of DB Security Groups for which the option is enabled.
	DbSecurityGroupMemberships []string `pulumi:"dbSecurityGroupMemberships"`
	// The Name of the Option (e.g. MEMCACHED).
	OptionName string `pulumi:"optionName"`
	// A list of option settings to apply.
	OptionSettings []OptionGroupOptionOptionSetting `pulumi:"optionSettings"`
	// The Port number when connecting to the Option (e.g. 11211).
	Port *int `pulumi:"port"`
	// The version of the option (e.g. 13.1.0.0).
	Version *string `pulumi:"version"`
	// A list of VPC Security Groups for which the option is enabled.
	VpcSecurityGroupMemberships []string `pulumi:"vpcSecurityGroupMemberships"`
}

// OptionGroupOptionInput is an input type that accepts OptionGroupOptionArgs and OptionGroupOptionOutput values.
// You can construct a concrete instance of `OptionGroupOptionInput` via:
//
// 		 OptionGroupOptionArgs{...}
//
type OptionGroupOptionInput interface {
	pulumi.Input

	ToOptionGroupOptionOutput() OptionGroupOptionOutput
	ToOptionGroupOptionOutputWithContext(context.Context) OptionGroupOptionOutput
}

type OptionGroupOptionArgs struct {
	// A list of DB Security Groups for which the option is enabled.
	DbSecurityGroupMemberships pulumi.StringArrayInput `pulumi:"dbSecurityGroupMemberships"`
	// The Name of the Option (e.g. MEMCACHED).
	OptionName pulumi.StringInput `pulumi:"optionName"`
	// A list of option settings to apply.
	OptionSettings OptionGroupOptionOptionSettingArrayInput `pulumi:"optionSettings"`
	// The Port number when connecting to the Option (e.g. 11211).
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The version of the option (e.g. 13.1.0.0).
	Version pulumi.StringPtrInput `pulumi:"version"`
	// A list of VPC Security Groups for which the option is enabled.
	VpcSecurityGroupMemberships pulumi.StringArrayInput `pulumi:"vpcSecurityGroupMemberships"`
}

func (OptionGroupOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OptionGroupOption)(nil)).Elem()
}

func (i OptionGroupOptionArgs) ToOptionGroupOptionOutput() OptionGroupOptionOutput {
	return i.ToOptionGroupOptionOutputWithContext(context.Background())
}

func (i OptionGroupOptionArgs) ToOptionGroupOptionOutputWithContext(ctx context.Context) OptionGroupOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OptionGroupOptionOutput)
}

// OptionGroupOptionArrayInput is an input type that accepts OptionGroupOptionArray and OptionGroupOptionArrayOutput values.
// You can construct a concrete instance of `OptionGroupOptionArrayInput` via:
//
// 		 OptionGroupOptionArray{ OptionGroupOptionArgs{...} }
//
type OptionGroupOptionArrayInput interface {
	pulumi.Input

	ToOptionGroupOptionArrayOutput() OptionGroupOptionArrayOutput
	ToOptionGroupOptionArrayOutputWithContext(context.Context) OptionGroupOptionArrayOutput
}

type OptionGroupOptionArray []OptionGroupOptionInput

func (OptionGroupOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OptionGroupOption)(nil)).Elem()
}

func (i OptionGroupOptionArray) ToOptionGroupOptionArrayOutput() OptionGroupOptionArrayOutput {
	return i.ToOptionGroupOptionArrayOutputWithContext(context.Background())
}

func (i OptionGroupOptionArray) ToOptionGroupOptionArrayOutputWithContext(ctx context.Context) OptionGroupOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OptionGroupOptionArrayOutput)
}

type OptionGroupOptionOutput struct{ *pulumi.OutputState }

func (OptionGroupOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OptionGroupOption)(nil)).Elem()
}

func (o OptionGroupOptionOutput) ToOptionGroupOptionOutput() OptionGroupOptionOutput {
	return o
}

func (o OptionGroupOptionOutput) ToOptionGroupOptionOutputWithContext(ctx context.Context) OptionGroupOptionOutput {
	return o
}

// A list of DB Security Groups for which the option is enabled.
func (o OptionGroupOptionOutput) DbSecurityGroupMemberships() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OptionGroupOption) []string { return v.DbSecurityGroupMemberships }).(pulumi.StringArrayOutput)
}

// The Name of the Option (e.g. MEMCACHED).
func (o OptionGroupOptionOutput) OptionName() pulumi.StringOutput {
	return o.ApplyT(func(v OptionGroupOption) string { return v.OptionName }).(pulumi.StringOutput)
}

// A list of option settings to apply.
func (o OptionGroupOptionOutput) OptionSettings() OptionGroupOptionOptionSettingArrayOutput {
	return o.ApplyT(func(v OptionGroupOption) []OptionGroupOptionOptionSetting { return v.OptionSettings }).(OptionGroupOptionOptionSettingArrayOutput)
}

// The Port number when connecting to the Option (e.g. 11211).
func (o OptionGroupOptionOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OptionGroupOption) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The version of the option (e.g. 13.1.0.0).
func (o OptionGroupOptionOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OptionGroupOption) *string { return v.Version }).(pulumi.StringPtrOutput)
}

// A list of VPC Security Groups for which the option is enabled.
func (o OptionGroupOptionOutput) VpcSecurityGroupMemberships() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OptionGroupOption) []string { return v.VpcSecurityGroupMemberships }).(pulumi.StringArrayOutput)
}

type OptionGroupOptionArrayOutput struct{ *pulumi.OutputState }

func (OptionGroupOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OptionGroupOption)(nil)).Elem()
}

func (o OptionGroupOptionArrayOutput) ToOptionGroupOptionArrayOutput() OptionGroupOptionArrayOutput {
	return o
}

func (o OptionGroupOptionArrayOutput) ToOptionGroupOptionArrayOutputWithContext(ctx context.Context) OptionGroupOptionArrayOutput {
	return o
}

func (o OptionGroupOptionArrayOutput) Index(i pulumi.IntInput) OptionGroupOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OptionGroupOption {
		return vs[0].([]OptionGroupOption)[vs[1].(int)]
	}).(OptionGroupOptionOutput)
}

type OptionGroupOptionOptionSetting struct {
	// The Name of the setting.
	Name string `pulumi:"name"`
	// The Value of the setting.
	Value string `pulumi:"value"`
}

// OptionGroupOptionOptionSettingInput is an input type that accepts OptionGroupOptionOptionSettingArgs and OptionGroupOptionOptionSettingOutput values.
// You can construct a concrete instance of `OptionGroupOptionOptionSettingInput` via:
//
// 		 OptionGroupOptionOptionSettingArgs{...}
//
type OptionGroupOptionOptionSettingInput interface {
	pulumi.Input

	ToOptionGroupOptionOptionSettingOutput() OptionGroupOptionOptionSettingOutput
	ToOptionGroupOptionOptionSettingOutputWithContext(context.Context) OptionGroupOptionOptionSettingOutput
}

type OptionGroupOptionOptionSettingArgs struct {
	// The Name of the setting.
	Name pulumi.StringInput `pulumi:"name"`
	// The Value of the setting.
	Value pulumi.StringInput `pulumi:"value"`
}

func (OptionGroupOptionOptionSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OptionGroupOptionOptionSetting)(nil)).Elem()
}

func (i OptionGroupOptionOptionSettingArgs) ToOptionGroupOptionOptionSettingOutput() OptionGroupOptionOptionSettingOutput {
	return i.ToOptionGroupOptionOptionSettingOutputWithContext(context.Background())
}

func (i OptionGroupOptionOptionSettingArgs) ToOptionGroupOptionOptionSettingOutputWithContext(ctx context.Context) OptionGroupOptionOptionSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OptionGroupOptionOptionSettingOutput)
}

// OptionGroupOptionOptionSettingArrayInput is an input type that accepts OptionGroupOptionOptionSettingArray and OptionGroupOptionOptionSettingArrayOutput values.
// You can construct a concrete instance of `OptionGroupOptionOptionSettingArrayInput` via:
//
// 		 OptionGroupOptionOptionSettingArray{ OptionGroupOptionOptionSettingArgs{...} }
//
type OptionGroupOptionOptionSettingArrayInput interface {
	pulumi.Input

	ToOptionGroupOptionOptionSettingArrayOutput() OptionGroupOptionOptionSettingArrayOutput
	ToOptionGroupOptionOptionSettingArrayOutputWithContext(context.Context) OptionGroupOptionOptionSettingArrayOutput
}

type OptionGroupOptionOptionSettingArray []OptionGroupOptionOptionSettingInput

func (OptionGroupOptionOptionSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OptionGroupOptionOptionSetting)(nil)).Elem()
}

func (i OptionGroupOptionOptionSettingArray) ToOptionGroupOptionOptionSettingArrayOutput() OptionGroupOptionOptionSettingArrayOutput {
	return i.ToOptionGroupOptionOptionSettingArrayOutputWithContext(context.Background())
}

func (i OptionGroupOptionOptionSettingArray) ToOptionGroupOptionOptionSettingArrayOutputWithContext(ctx context.Context) OptionGroupOptionOptionSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OptionGroupOptionOptionSettingArrayOutput)
}

type OptionGroupOptionOptionSettingOutput struct{ *pulumi.OutputState }

func (OptionGroupOptionOptionSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OptionGroupOptionOptionSetting)(nil)).Elem()
}

func (o OptionGroupOptionOptionSettingOutput) ToOptionGroupOptionOptionSettingOutput() OptionGroupOptionOptionSettingOutput {
	return o
}

func (o OptionGroupOptionOptionSettingOutput) ToOptionGroupOptionOptionSettingOutputWithContext(ctx context.Context) OptionGroupOptionOptionSettingOutput {
	return o
}

// The Name of the setting.
func (o OptionGroupOptionOptionSettingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OptionGroupOptionOptionSetting) string { return v.Name }).(pulumi.StringOutput)
}

// The Value of the setting.
func (o OptionGroupOptionOptionSettingOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v OptionGroupOptionOptionSetting) string { return v.Value }).(pulumi.StringOutput)
}

type OptionGroupOptionOptionSettingArrayOutput struct{ *pulumi.OutputState }

func (OptionGroupOptionOptionSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OptionGroupOptionOptionSetting)(nil)).Elem()
}

func (o OptionGroupOptionOptionSettingArrayOutput) ToOptionGroupOptionOptionSettingArrayOutput() OptionGroupOptionOptionSettingArrayOutput {
	return o
}

func (o OptionGroupOptionOptionSettingArrayOutput) ToOptionGroupOptionOptionSettingArrayOutputWithContext(ctx context.Context) OptionGroupOptionOptionSettingArrayOutput {
	return o
}

func (o OptionGroupOptionOptionSettingArrayOutput) Index(i pulumi.IntInput) OptionGroupOptionOptionSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OptionGroupOptionOptionSetting {
		return vs[0].([]OptionGroupOptionOptionSetting)[vs[1].(int)]
	}).(OptionGroupOptionOptionSettingOutput)
}

type ParameterGroupParameter struct {
	// "immediate" (default), or "pending-reboot". Some
	// engines can't apply some parameters without a reboot, and you will need to
	// specify "pending-reboot" here.
	ApplyMethod *string `pulumi:"applyMethod"`
	// The name of the DB parameter.
	Name string `pulumi:"name"`
	// The value of the DB parameter.
	Value string `pulumi:"value"`
}

// ParameterGroupParameterInput is an input type that accepts ParameterGroupParameterArgs and ParameterGroupParameterOutput values.
// You can construct a concrete instance of `ParameterGroupParameterInput` via:
//
// 		 ParameterGroupParameterArgs{...}
//
type ParameterGroupParameterInput interface {
	pulumi.Input

	ToParameterGroupParameterOutput() ParameterGroupParameterOutput
	ToParameterGroupParameterOutputWithContext(context.Context) ParameterGroupParameterOutput
}

type ParameterGroupParameterArgs struct {
	// "immediate" (default), or "pending-reboot". Some
	// engines can't apply some parameters without a reboot, and you will need to
	// specify "pending-reboot" here.
	ApplyMethod pulumi.StringPtrInput `pulumi:"applyMethod"`
	// The name of the DB parameter.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the DB parameter.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ParameterGroupParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterGroupParameter)(nil)).Elem()
}

func (i ParameterGroupParameterArgs) ToParameterGroupParameterOutput() ParameterGroupParameterOutput {
	return i.ToParameterGroupParameterOutputWithContext(context.Background())
}

func (i ParameterGroupParameterArgs) ToParameterGroupParameterOutputWithContext(ctx context.Context) ParameterGroupParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterGroupParameterOutput)
}

// ParameterGroupParameterArrayInput is an input type that accepts ParameterGroupParameterArray and ParameterGroupParameterArrayOutput values.
// You can construct a concrete instance of `ParameterGroupParameterArrayInput` via:
//
// 		 ParameterGroupParameterArray{ ParameterGroupParameterArgs{...} }
//
type ParameterGroupParameterArrayInput interface {
	pulumi.Input

	ToParameterGroupParameterArrayOutput() ParameterGroupParameterArrayOutput
	ToParameterGroupParameterArrayOutputWithContext(context.Context) ParameterGroupParameterArrayOutput
}

type ParameterGroupParameterArray []ParameterGroupParameterInput

func (ParameterGroupParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ParameterGroupParameter)(nil)).Elem()
}

func (i ParameterGroupParameterArray) ToParameterGroupParameterArrayOutput() ParameterGroupParameterArrayOutput {
	return i.ToParameterGroupParameterArrayOutputWithContext(context.Background())
}

func (i ParameterGroupParameterArray) ToParameterGroupParameterArrayOutputWithContext(ctx context.Context) ParameterGroupParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterGroupParameterArrayOutput)
}

type ParameterGroupParameterOutput struct{ *pulumi.OutputState }

func (ParameterGroupParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterGroupParameter)(nil)).Elem()
}

func (o ParameterGroupParameterOutput) ToParameterGroupParameterOutput() ParameterGroupParameterOutput {
	return o
}

func (o ParameterGroupParameterOutput) ToParameterGroupParameterOutputWithContext(ctx context.Context) ParameterGroupParameterOutput {
	return o
}

// "immediate" (default), or "pending-reboot". Some
// engines can't apply some parameters without a reboot, and you will need to
// specify "pending-reboot" here.
func (o ParameterGroupParameterOutput) ApplyMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterGroupParameter) *string { return v.ApplyMethod }).(pulumi.StringPtrOutput)
}

// The name of the DB parameter.
func (o ParameterGroupParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterGroupParameter) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the DB parameter.
func (o ParameterGroupParameterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterGroupParameter) string { return v.Value }).(pulumi.StringOutput)
}

type ParameterGroupParameterArrayOutput struct{ *pulumi.OutputState }

func (ParameterGroupParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ParameterGroupParameter)(nil)).Elem()
}

func (o ParameterGroupParameterArrayOutput) ToParameterGroupParameterArrayOutput() ParameterGroupParameterArrayOutput {
	return o
}

func (o ParameterGroupParameterArrayOutput) ToParameterGroupParameterArrayOutputWithContext(ctx context.Context) ParameterGroupParameterArrayOutput {
	return o
}

func (o ParameterGroupParameterArrayOutput) Index(i pulumi.IntInput) ParameterGroupParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ParameterGroupParameter {
		return vs[0].([]ParameterGroupParameter)[vs[1].(int)]
	}).(ParameterGroupParameterOutput)
}

type SecurityGroupIngress struct {
	// The CIDR block to accept
	Cidr *string `pulumi:"cidr"`
	// The ID of the security group to authorize
	SecurityGroupId *string `pulumi:"securityGroupId"`
	// The name of the security group to authorize
	SecurityGroupName *string `pulumi:"securityGroupName"`
	// The owner Id of the security group provided
	// by `securityGroupName`.
	SecurityGroupOwnerId *string `pulumi:"securityGroupOwnerId"`
}

// SecurityGroupIngressInput is an input type that accepts SecurityGroupIngressArgs and SecurityGroupIngressOutput values.
// You can construct a concrete instance of `SecurityGroupIngressInput` via:
//
// 		 SecurityGroupIngressArgs{...}
//
type SecurityGroupIngressInput interface {
	pulumi.Input

	ToSecurityGroupIngressOutput() SecurityGroupIngressOutput
	ToSecurityGroupIngressOutputWithContext(context.Context) SecurityGroupIngressOutput
}

type SecurityGroupIngressArgs struct {
	// The CIDR block to accept
	Cidr pulumi.StringPtrInput `pulumi:"cidr"`
	// The ID of the security group to authorize
	SecurityGroupId pulumi.StringPtrInput `pulumi:"securityGroupId"`
	// The name of the security group to authorize
	SecurityGroupName pulumi.StringPtrInput `pulumi:"securityGroupName"`
	// The owner Id of the security group provided
	// by `securityGroupName`.
	SecurityGroupOwnerId pulumi.StringPtrInput `pulumi:"securityGroupOwnerId"`
}

func (SecurityGroupIngressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupIngress)(nil)).Elem()
}

func (i SecurityGroupIngressArgs) ToSecurityGroupIngressOutput() SecurityGroupIngressOutput {
	return i.ToSecurityGroupIngressOutputWithContext(context.Background())
}

func (i SecurityGroupIngressArgs) ToSecurityGroupIngressOutputWithContext(ctx context.Context) SecurityGroupIngressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupIngressOutput)
}

// SecurityGroupIngressArrayInput is an input type that accepts SecurityGroupIngressArray and SecurityGroupIngressArrayOutput values.
// You can construct a concrete instance of `SecurityGroupIngressArrayInput` via:
//
// 		 SecurityGroupIngressArray{ SecurityGroupIngressArgs{...} }
//
type SecurityGroupIngressArrayInput interface {
	pulumi.Input

	ToSecurityGroupIngressArrayOutput() SecurityGroupIngressArrayOutput
	ToSecurityGroupIngressArrayOutputWithContext(context.Context) SecurityGroupIngressArrayOutput
}

type SecurityGroupIngressArray []SecurityGroupIngressInput

func (SecurityGroupIngressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityGroupIngress)(nil)).Elem()
}

func (i SecurityGroupIngressArray) ToSecurityGroupIngressArrayOutput() SecurityGroupIngressArrayOutput {
	return i.ToSecurityGroupIngressArrayOutputWithContext(context.Background())
}

func (i SecurityGroupIngressArray) ToSecurityGroupIngressArrayOutputWithContext(ctx context.Context) SecurityGroupIngressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupIngressArrayOutput)
}

type SecurityGroupIngressOutput struct{ *pulumi.OutputState }

func (SecurityGroupIngressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupIngress)(nil)).Elem()
}

func (o SecurityGroupIngressOutput) ToSecurityGroupIngressOutput() SecurityGroupIngressOutput {
	return o
}

func (o SecurityGroupIngressOutput) ToSecurityGroupIngressOutputWithContext(ctx context.Context) SecurityGroupIngressOutput {
	return o
}

// The CIDR block to accept
func (o SecurityGroupIngressOutput) Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupIngress) *string { return v.Cidr }).(pulumi.StringPtrOutput)
}

// The ID of the security group to authorize
func (o SecurityGroupIngressOutput) SecurityGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupIngress) *string { return v.SecurityGroupId }).(pulumi.StringPtrOutput)
}

// The name of the security group to authorize
func (o SecurityGroupIngressOutput) SecurityGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupIngress) *string { return v.SecurityGroupName }).(pulumi.StringPtrOutput)
}

// The owner Id of the security group provided
// by `securityGroupName`.
func (o SecurityGroupIngressOutput) SecurityGroupOwnerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupIngress) *string { return v.SecurityGroupOwnerId }).(pulumi.StringPtrOutput)
}

type SecurityGroupIngressArrayOutput struct{ *pulumi.OutputState }

func (SecurityGroupIngressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityGroupIngress)(nil)).Elem()
}

func (o SecurityGroupIngressArrayOutput) ToSecurityGroupIngressArrayOutput() SecurityGroupIngressArrayOutput {
	return o
}

func (o SecurityGroupIngressArrayOutput) ToSecurityGroupIngressArrayOutputWithContext(ctx context.Context) SecurityGroupIngressArrayOutput {
	return o
}

func (o SecurityGroupIngressArrayOutput) Index(i pulumi.IntInput) SecurityGroupIngressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecurityGroupIngress {
		return vs[0].([]SecurityGroupIngress)[vs[1].(int)]
	}).(SecurityGroupIngressOutput)
}

func init() {
	pulumi.RegisterOutputType(ClusterParameterGroupParameterOutput{})
	pulumi.RegisterOutputType(ClusterParameterGroupParameterArrayOutput{})
	pulumi.RegisterOutputType(ClusterS3ImportOutput{})
	pulumi.RegisterOutputType(ClusterS3ImportPtrOutput{})
	pulumi.RegisterOutputType(ClusterScalingConfigurationOutput{})
	pulumi.RegisterOutputType(ClusterScalingConfigurationPtrOutput{})
	pulumi.RegisterOutputType(InstanceS3ImportOutput{})
	pulumi.RegisterOutputType(InstanceS3ImportPtrOutput{})
	pulumi.RegisterOutputType(OptionGroupOptionOutput{})
	pulumi.RegisterOutputType(OptionGroupOptionArrayOutput{})
	pulumi.RegisterOutputType(OptionGroupOptionOptionSettingOutput{})
	pulumi.RegisterOutputType(OptionGroupOptionOptionSettingArrayOutput{})
	pulumi.RegisterOutputType(ParameterGroupParameterOutput{})
	pulumi.RegisterOutputType(ParameterGroupParameterArrayOutput{})
	pulumi.RegisterOutputType(SecurityGroupIngressOutput{})
	pulumi.RegisterOutputType(SecurityGroupIngressArrayOutput{})
}
