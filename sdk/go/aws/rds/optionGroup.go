// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an RDS DB option group resource. Documentation of the available options for various RDS engines can be found at:
//
// * [MariaDB Options](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.MariaDB.Options.html)
// * [Microsoft SQL Server Options](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.SQLServer.Options.html)
// * [MySQL Options](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.MySQL.Options.html)
// * [Oracle Options](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.Options.html)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/rds"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := rds.NewOptionGroup(ctx, "example", &rds.OptionGroupArgs{
// 			OptionGroupDescription: pulumi.String("Option Group"),
// 			EngineName:             pulumi.String("sqlserver-ee"),
// 			MajorEngineVersion:     pulumi.String("11.00"),
// 			Options: rds.OptionGroupOptionArray{
// 				&rds.OptionGroupOptionArgs{
// 					OptionName: pulumi.String("Timezone"),
// 					OptionSettings: rds.OptionGroupOptionOptionSettingArray{
// 						&rds.OptionGroupOptionOptionSettingArgs{
// 							Name:  pulumi.String("TIME_ZONE"),
// 							Value: pulumi.String("UTC"),
// 						},
// 					},
// 				},
// 				&rds.OptionGroupOptionArgs{
// 					OptionName: pulumi.String("SQLSERVER_BACKUP_RESTORE"),
// 					OptionSettings: rds.OptionGroupOptionOptionSettingArray{
// 						&rds.OptionGroupOptionOptionSettingArgs{
// 							Name:  pulumi.String("IAM_ROLE_ARN"),
// 							Value: pulumi.Any(aws_iam_role.Example.Arn),
// 						},
// 					},
// 				},
// 				&rds.OptionGroupOptionArgs{
// 					OptionName: pulumi.String("TDE"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// > **Note**: Any modifications to the `dbOptionGroup` are set to happen immediately as we default to applying immediately.
//
// ## Import
//
// DB Option groups can be imported using the `name`, e.g.
//
// ```sh
//  $ pulumi import aws:rds/optionGroup:OptionGroup bar mysql-option-group
// ```
type OptionGroup struct {
	pulumi.CustomResourceState

	// The ARN of the db option group.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Specifies the name of the engine that this option group should be associated with.
	EngineName pulumi.StringOutput `pulumi:"engineName"`
	// Specifies the major version of the engine that this option group should be associated with.
	MajorEngineVersion pulumi.StringOutput `pulumi:"majorEngineVersion"`
	// The Name of the setting.
	Name pulumi.StringOutput `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`. Must be lowercase, to match as it is stored in AWS.
	NamePrefix pulumi.StringOutput `pulumi:"namePrefix"`
	// The description of the option group. Defaults to "Managed by Pulumi".
	OptionGroupDescription pulumi.StringOutput `pulumi:"optionGroupDescription"`
	// A list of Options to apply.
	Options OptionGroupOptionArrayOutput `pulumi:"options"`
	// A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider .
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewOptionGroup registers a new resource with the given unique name, arguments, and options.
func NewOptionGroup(ctx *pulumi.Context,
	name string, args *OptionGroupArgs, opts ...pulumi.ResourceOption) (*OptionGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EngineName == nil {
		return nil, errors.New("invalid value for required argument 'EngineName'")
	}
	if args.MajorEngineVersion == nil {
		return nil, errors.New("invalid value for required argument 'MajorEngineVersion'")
	}
	if args.OptionGroupDescription == nil {
		args.OptionGroupDescription = pulumi.StringPtr("Managed by Pulumi")
	}
	var resource OptionGroup
	err := ctx.RegisterResource("aws:rds/optionGroup:OptionGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOptionGroup gets an existing OptionGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOptionGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OptionGroupState, opts ...pulumi.ResourceOption) (*OptionGroup, error) {
	var resource OptionGroup
	err := ctx.ReadResource("aws:rds/optionGroup:OptionGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OptionGroup resources.
type optionGroupState struct {
	// The ARN of the db option group.
	Arn *string `pulumi:"arn"`
	// Specifies the name of the engine that this option group should be associated with.
	EngineName *string `pulumi:"engineName"`
	// Specifies the major version of the engine that this option group should be associated with.
	MajorEngineVersion *string `pulumi:"majorEngineVersion"`
	// The Name of the setting.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`. Must be lowercase, to match as it is stored in AWS.
	NamePrefix *string `pulumi:"namePrefix"`
	// The description of the option group. Defaults to "Managed by Pulumi".
	OptionGroupDescription *string `pulumi:"optionGroupDescription"`
	// A list of Options to apply.
	Options []OptionGroupOption `pulumi:"options"`
	// A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider .
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type OptionGroupState struct {
	// The ARN of the db option group.
	Arn pulumi.StringPtrInput
	// Specifies the name of the engine that this option group should be associated with.
	EngineName pulumi.StringPtrInput
	// Specifies the major version of the engine that this option group should be associated with.
	MajorEngineVersion pulumi.StringPtrInput
	// The Name of the setting.
	Name pulumi.StringPtrInput
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`. Must be lowercase, to match as it is stored in AWS.
	NamePrefix pulumi.StringPtrInput
	// The description of the option group. Defaults to "Managed by Pulumi".
	OptionGroupDescription pulumi.StringPtrInput
	// A list of Options to apply.
	Options OptionGroupOptionArrayInput
	// A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider .
	TagsAll pulumi.StringMapInput
}

func (OptionGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*optionGroupState)(nil)).Elem()
}

type optionGroupArgs struct {
	// Specifies the name of the engine that this option group should be associated with.
	EngineName string `pulumi:"engineName"`
	// Specifies the major version of the engine that this option group should be associated with.
	MajorEngineVersion string `pulumi:"majorEngineVersion"`
	// The Name of the setting.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`. Must be lowercase, to match as it is stored in AWS.
	NamePrefix *string `pulumi:"namePrefix"`
	// The description of the option group. Defaults to "Managed by Pulumi".
	OptionGroupDescription *string `pulumi:"optionGroupDescription"`
	// A list of Options to apply.
	Options []OptionGroupOption `pulumi:"options"`
	// A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider .
	TagsAll map[string]string `pulumi:"tagsAll"`
}

// The set of arguments for constructing a OptionGroup resource.
type OptionGroupArgs struct {
	// Specifies the name of the engine that this option group should be associated with.
	EngineName pulumi.StringInput
	// Specifies the major version of the engine that this option group should be associated with.
	MajorEngineVersion pulumi.StringInput
	// The Name of the setting.
	Name pulumi.StringPtrInput
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`. Must be lowercase, to match as it is stored in AWS.
	NamePrefix pulumi.StringPtrInput
	// The description of the option group. Defaults to "Managed by Pulumi".
	OptionGroupDescription pulumi.StringPtrInput
	// A list of Options to apply.
	Options OptionGroupOptionArrayInput
	// A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider .
	TagsAll pulumi.StringMapInput
}

func (OptionGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*optionGroupArgs)(nil)).Elem()
}

type OptionGroupInput interface {
	pulumi.Input

	ToOptionGroupOutput() OptionGroupOutput
	ToOptionGroupOutputWithContext(ctx context.Context) OptionGroupOutput
}

func (*OptionGroup) ElementType() reflect.Type {
	return reflect.TypeOf((*OptionGroup)(nil))
}

func (i *OptionGroup) ToOptionGroupOutput() OptionGroupOutput {
	return i.ToOptionGroupOutputWithContext(context.Background())
}

func (i *OptionGroup) ToOptionGroupOutputWithContext(ctx context.Context) OptionGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OptionGroupOutput)
}

func (i *OptionGroup) ToOptionGroupPtrOutput() OptionGroupPtrOutput {
	return i.ToOptionGroupPtrOutputWithContext(context.Background())
}

func (i *OptionGroup) ToOptionGroupPtrOutputWithContext(ctx context.Context) OptionGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OptionGroupPtrOutput)
}

type OptionGroupPtrInput interface {
	pulumi.Input

	ToOptionGroupPtrOutput() OptionGroupPtrOutput
	ToOptionGroupPtrOutputWithContext(ctx context.Context) OptionGroupPtrOutput
}

type optionGroupPtrType OptionGroupArgs

func (*optionGroupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OptionGroup)(nil))
}

func (i *optionGroupPtrType) ToOptionGroupPtrOutput() OptionGroupPtrOutput {
	return i.ToOptionGroupPtrOutputWithContext(context.Background())
}

func (i *optionGroupPtrType) ToOptionGroupPtrOutputWithContext(ctx context.Context) OptionGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OptionGroupPtrOutput)
}

// OptionGroupArrayInput is an input type that accepts OptionGroupArray and OptionGroupArrayOutput values.
// You can construct a concrete instance of `OptionGroupArrayInput` via:
//
//          OptionGroupArray{ OptionGroupArgs{...} }
type OptionGroupArrayInput interface {
	pulumi.Input

	ToOptionGroupArrayOutput() OptionGroupArrayOutput
	ToOptionGroupArrayOutputWithContext(context.Context) OptionGroupArrayOutput
}

type OptionGroupArray []OptionGroupInput

func (OptionGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*OptionGroup)(nil))
}

func (i OptionGroupArray) ToOptionGroupArrayOutput() OptionGroupArrayOutput {
	return i.ToOptionGroupArrayOutputWithContext(context.Background())
}

func (i OptionGroupArray) ToOptionGroupArrayOutputWithContext(ctx context.Context) OptionGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OptionGroupArrayOutput)
}

// OptionGroupMapInput is an input type that accepts OptionGroupMap and OptionGroupMapOutput values.
// You can construct a concrete instance of `OptionGroupMapInput` via:
//
//          OptionGroupMap{ "key": OptionGroupArgs{...} }
type OptionGroupMapInput interface {
	pulumi.Input

	ToOptionGroupMapOutput() OptionGroupMapOutput
	ToOptionGroupMapOutputWithContext(context.Context) OptionGroupMapOutput
}

type OptionGroupMap map[string]OptionGroupInput

func (OptionGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*OptionGroup)(nil))
}

func (i OptionGroupMap) ToOptionGroupMapOutput() OptionGroupMapOutput {
	return i.ToOptionGroupMapOutputWithContext(context.Background())
}

func (i OptionGroupMap) ToOptionGroupMapOutputWithContext(ctx context.Context) OptionGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OptionGroupMapOutput)
}

type OptionGroupOutput struct {
	*pulumi.OutputState
}

func (OptionGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OptionGroup)(nil))
}

func (o OptionGroupOutput) ToOptionGroupOutput() OptionGroupOutput {
	return o
}

func (o OptionGroupOutput) ToOptionGroupOutputWithContext(ctx context.Context) OptionGroupOutput {
	return o
}

func (o OptionGroupOutput) ToOptionGroupPtrOutput() OptionGroupPtrOutput {
	return o.ToOptionGroupPtrOutputWithContext(context.Background())
}

func (o OptionGroupOutput) ToOptionGroupPtrOutputWithContext(ctx context.Context) OptionGroupPtrOutput {
	return o.ApplyT(func(v OptionGroup) *OptionGroup {
		return &v
	}).(OptionGroupPtrOutput)
}

type OptionGroupPtrOutput struct {
	*pulumi.OutputState
}

func (OptionGroupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OptionGroup)(nil))
}

func (o OptionGroupPtrOutput) ToOptionGroupPtrOutput() OptionGroupPtrOutput {
	return o
}

func (o OptionGroupPtrOutput) ToOptionGroupPtrOutputWithContext(ctx context.Context) OptionGroupPtrOutput {
	return o
}

type OptionGroupArrayOutput struct{ *pulumi.OutputState }

func (OptionGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OptionGroup)(nil))
}

func (o OptionGroupArrayOutput) ToOptionGroupArrayOutput() OptionGroupArrayOutput {
	return o
}

func (o OptionGroupArrayOutput) ToOptionGroupArrayOutputWithContext(ctx context.Context) OptionGroupArrayOutput {
	return o
}

func (o OptionGroupArrayOutput) Index(i pulumi.IntInput) OptionGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OptionGroup {
		return vs[0].([]OptionGroup)[vs[1].(int)]
	}).(OptionGroupOutput)
}

type OptionGroupMapOutput struct{ *pulumi.OutputState }

func (OptionGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]OptionGroup)(nil))
}

func (o OptionGroupMapOutput) ToOptionGroupMapOutput() OptionGroupMapOutput {
	return o
}

func (o OptionGroupMapOutput) ToOptionGroupMapOutputWithContext(ctx context.Context) OptionGroupMapOutput {
	return o
}

func (o OptionGroupMapOutput) MapIndex(k pulumi.StringInput) OptionGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) OptionGroup {
		return vs[0].(map[string]OptionGroup)[vs[1].(string)]
	}).(OptionGroupOutput)
}

func init() {
	pulumi.RegisterOutputType(OptionGroupOutput{})
	pulumi.RegisterOutputType(OptionGroupPtrOutput{})
	pulumi.RegisterOutputType(OptionGroupArrayOutput{})
	pulumi.RegisterOutputType(OptionGroupMapOutput{})
}
