// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type OptionGroup struct {
	pulumi.CustomResourceState

	Arn                    pulumi.StringOutput          `pulumi:"arn"`
	EngineName             pulumi.StringOutput          `pulumi:"engineName"`
	MajorEngineVersion     pulumi.StringOutput          `pulumi:"majorEngineVersion"`
	Name                   pulumi.StringOutput          `pulumi:"name"`
	NamePrefix             pulumi.StringOutput          `pulumi:"namePrefix"`
	OptionGroupDescription pulumi.StringOutput          `pulumi:"optionGroupDescription"`
	Options                OptionGroupOptionArrayOutput `pulumi:"options"`
	Tags                   pulumi.StringMapOutput       `pulumi:"tags"`
	TagsAll                pulumi.StringMapOutput       `pulumi:"tagsAll"`
}

// NewOptionGroup registers a new resource with the given unique name, arguments, and options.
func NewOptionGroup(ctx *pulumi.Context,
	name string, args *OptionGroupArgs, opts ...pulumi.ResourceOption) (*OptionGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EngineName == nil {
		return nil, errors.New("invalid value for required argument 'EngineName'")
	}
	if args.MajorEngineVersion == nil {
		return nil, errors.New("invalid value for required argument 'MajorEngineVersion'")
	}
	if isZero(args.OptionGroupDescription) {
		args.OptionGroupDescription = pulumi.StringPtr("Managed by Pulumi")
	}
	var resource OptionGroup
	err := ctx.RegisterResource("aws:rds/optionGroup:OptionGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOptionGroup gets an existing OptionGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOptionGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OptionGroupState, opts ...pulumi.ResourceOption) (*OptionGroup, error) {
	var resource OptionGroup
	err := ctx.ReadResource("aws:rds/optionGroup:OptionGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OptionGroup resources.
type optionGroupState struct {
	Arn                    *string             `pulumi:"arn"`
	EngineName             *string             `pulumi:"engineName"`
	MajorEngineVersion     *string             `pulumi:"majorEngineVersion"`
	Name                   *string             `pulumi:"name"`
	NamePrefix             *string             `pulumi:"namePrefix"`
	OptionGroupDescription *string             `pulumi:"optionGroupDescription"`
	Options                []OptionGroupOption `pulumi:"options"`
	Tags                   map[string]string   `pulumi:"tags"`
	TagsAll                map[string]string   `pulumi:"tagsAll"`
}

type OptionGroupState struct {
	Arn                    pulumi.StringPtrInput
	EngineName             pulumi.StringPtrInput
	MajorEngineVersion     pulumi.StringPtrInput
	Name                   pulumi.StringPtrInput
	NamePrefix             pulumi.StringPtrInput
	OptionGroupDescription pulumi.StringPtrInput
	Options                OptionGroupOptionArrayInput
	Tags                   pulumi.StringMapInput
	TagsAll                pulumi.StringMapInput
}

func (OptionGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*optionGroupState)(nil)).Elem()
}

type optionGroupArgs struct {
	EngineName             string              `pulumi:"engineName"`
	MajorEngineVersion     string              `pulumi:"majorEngineVersion"`
	Name                   *string             `pulumi:"name"`
	NamePrefix             *string             `pulumi:"namePrefix"`
	OptionGroupDescription *string             `pulumi:"optionGroupDescription"`
	Options                []OptionGroupOption `pulumi:"options"`
	Tags                   map[string]string   `pulumi:"tags"`
}

// The set of arguments for constructing a OptionGroup resource.
type OptionGroupArgs struct {
	EngineName             pulumi.StringInput
	MajorEngineVersion     pulumi.StringInput
	Name                   pulumi.StringPtrInput
	NamePrefix             pulumi.StringPtrInput
	OptionGroupDescription pulumi.StringPtrInput
	Options                OptionGroupOptionArrayInput
	Tags                   pulumi.StringMapInput
}

func (OptionGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*optionGroupArgs)(nil)).Elem()
}

type OptionGroupInput interface {
	pulumi.Input

	ToOptionGroupOutput() OptionGroupOutput
	ToOptionGroupOutputWithContext(ctx context.Context) OptionGroupOutput
}

func (*OptionGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**OptionGroup)(nil)).Elem()
}

func (i *OptionGroup) ToOptionGroupOutput() OptionGroupOutput {
	return i.ToOptionGroupOutputWithContext(context.Background())
}

func (i *OptionGroup) ToOptionGroupOutputWithContext(ctx context.Context) OptionGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OptionGroupOutput)
}

// OptionGroupArrayInput is an input type that accepts OptionGroupArray and OptionGroupArrayOutput values.
// You can construct a concrete instance of `OptionGroupArrayInput` via:
//
//	OptionGroupArray{ OptionGroupArgs{...} }
type OptionGroupArrayInput interface {
	pulumi.Input

	ToOptionGroupArrayOutput() OptionGroupArrayOutput
	ToOptionGroupArrayOutputWithContext(context.Context) OptionGroupArrayOutput
}

type OptionGroupArray []OptionGroupInput

func (OptionGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OptionGroup)(nil)).Elem()
}

func (i OptionGroupArray) ToOptionGroupArrayOutput() OptionGroupArrayOutput {
	return i.ToOptionGroupArrayOutputWithContext(context.Background())
}

func (i OptionGroupArray) ToOptionGroupArrayOutputWithContext(ctx context.Context) OptionGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OptionGroupArrayOutput)
}

// OptionGroupMapInput is an input type that accepts OptionGroupMap and OptionGroupMapOutput values.
// You can construct a concrete instance of `OptionGroupMapInput` via:
//
//	OptionGroupMap{ "key": OptionGroupArgs{...} }
type OptionGroupMapInput interface {
	pulumi.Input

	ToOptionGroupMapOutput() OptionGroupMapOutput
	ToOptionGroupMapOutputWithContext(context.Context) OptionGroupMapOutput
}

type OptionGroupMap map[string]OptionGroupInput

func (OptionGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OptionGroup)(nil)).Elem()
}

func (i OptionGroupMap) ToOptionGroupMapOutput() OptionGroupMapOutput {
	return i.ToOptionGroupMapOutputWithContext(context.Background())
}

func (i OptionGroupMap) ToOptionGroupMapOutputWithContext(ctx context.Context) OptionGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OptionGroupMapOutput)
}

type OptionGroupOutput struct{ *pulumi.OutputState }

func (OptionGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OptionGroup)(nil)).Elem()
}

func (o OptionGroupOutput) ToOptionGroupOutput() OptionGroupOutput {
	return o
}

func (o OptionGroupOutput) ToOptionGroupOutputWithContext(ctx context.Context) OptionGroupOutput {
	return o
}

func (o OptionGroupOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *OptionGroup) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o OptionGroupOutput) EngineName() pulumi.StringOutput {
	return o.ApplyT(func(v *OptionGroup) pulumi.StringOutput { return v.EngineName }).(pulumi.StringOutput)
}

func (o OptionGroupOutput) MajorEngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *OptionGroup) pulumi.StringOutput { return v.MajorEngineVersion }).(pulumi.StringOutput)
}

func (o OptionGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OptionGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o OptionGroupOutput) NamePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *OptionGroup) pulumi.StringOutput { return v.NamePrefix }).(pulumi.StringOutput)
}

func (o OptionGroupOutput) OptionGroupDescription() pulumi.StringOutput {
	return o.ApplyT(func(v *OptionGroup) pulumi.StringOutput { return v.OptionGroupDescription }).(pulumi.StringOutput)
}

func (o OptionGroupOutput) Options() OptionGroupOptionArrayOutput {
	return o.ApplyT(func(v *OptionGroup) OptionGroupOptionArrayOutput { return v.Options }).(OptionGroupOptionArrayOutput)
}

func (o OptionGroupOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *OptionGroup) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o OptionGroupOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *OptionGroup) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type OptionGroupArrayOutput struct{ *pulumi.OutputState }

func (OptionGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OptionGroup)(nil)).Elem()
}

func (o OptionGroupArrayOutput) ToOptionGroupArrayOutput() OptionGroupArrayOutput {
	return o
}

func (o OptionGroupArrayOutput) ToOptionGroupArrayOutputWithContext(ctx context.Context) OptionGroupArrayOutput {
	return o
}

func (o OptionGroupArrayOutput) Index(i pulumi.IntInput) OptionGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OptionGroup {
		return vs[0].([]*OptionGroup)[vs[1].(int)]
	}).(OptionGroupOutput)
}

type OptionGroupMapOutput struct{ *pulumi.OutputState }

func (OptionGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OptionGroup)(nil)).Elem()
}

func (o OptionGroupMapOutput) ToOptionGroupMapOutput() OptionGroupMapOutput {
	return o
}

func (o OptionGroupMapOutput) ToOptionGroupMapOutputWithContext(ctx context.Context) OptionGroupMapOutput {
	return o
}

func (o OptionGroupMapOutput) MapIndex(k pulumi.StringInput) OptionGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OptionGroup {
		return vs[0].(map[string]*OptionGroup)[vs[1].(string)]
	}).(OptionGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OptionGroupInput)(nil)).Elem(), &OptionGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*OptionGroupArrayInput)(nil)).Elem(), OptionGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OptionGroupMapInput)(nil)).Elem(), OptionGroupMap{})
	pulumi.RegisterOutputType(OptionGroupOutput{})
	pulumi.RegisterOutputType(OptionGroupArrayOutput{})
	pulumi.RegisterOutputType(OptionGroupMapOutput{})
}
