// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Proxy struct {
	pulumi.CustomResourceState

	Arn                 pulumi.StringOutput      `pulumi:"arn"`
	Auths               ProxyAuthArrayOutput     `pulumi:"auths"`
	DebugLogging        pulumi.BoolPtrOutput     `pulumi:"debugLogging"`
	Endpoint            pulumi.StringOutput      `pulumi:"endpoint"`
	EngineFamily        pulumi.StringOutput      `pulumi:"engineFamily"`
	IdleClientTimeout   pulumi.IntOutput         `pulumi:"idleClientTimeout"`
	Name                pulumi.StringOutput      `pulumi:"name"`
	RequireTls          pulumi.BoolPtrOutput     `pulumi:"requireTls"`
	RoleArn             pulumi.StringOutput      `pulumi:"roleArn"`
	Tags                pulumi.StringMapOutput   `pulumi:"tags"`
	TagsAll             pulumi.StringMapOutput   `pulumi:"tagsAll"`
	VpcSecurityGroupIds pulumi.StringArrayOutput `pulumi:"vpcSecurityGroupIds"`
	VpcSubnetIds        pulumi.StringArrayOutput `pulumi:"vpcSubnetIds"`
}

// NewProxy registers a new resource with the given unique name, arguments, and options.
func NewProxy(ctx *pulumi.Context,
	name string, args *ProxyArgs, opts ...pulumi.ResourceOption) (*Proxy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Auths == nil {
		return nil, errors.New("invalid value for required argument 'Auths'")
	}
	if args.EngineFamily == nil {
		return nil, errors.New("invalid value for required argument 'EngineFamily'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	if args.VpcSubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'VpcSubnetIds'")
	}
	var resource Proxy
	err := ctx.RegisterResource("aws:rds/proxy:Proxy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProxy gets an existing Proxy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProxy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProxyState, opts ...pulumi.ResourceOption) (*Proxy, error) {
	var resource Proxy
	err := ctx.ReadResource("aws:rds/proxy:Proxy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Proxy resources.
type proxyState struct {
	Arn                 *string           `pulumi:"arn"`
	Auths               []ProxyAuth       `pulumi:"auths"`
	DebugLogging        *bool             `pulumi:"debugLogging"`
	Endpoint            *string           `pulumi:"endpoint"`
	EngineFamily        *string           `pulumi:"engineFamily"`
	IdleClientTimeout   *int              `pulumi:"idleClientTimeout"`
	Name                *string           `pulumi:"name"`
	RequireTls          *bool             `pulumi:"requireTls"`
	RoleArn             *string           `pulumi:"roleArn"`
	Tags                map[string]string `pulumi:"tags"`
	TagsAll             map[string]string `pulumi:"tagsAll"`
	VpcSecurityGroupIds []string          `pulumi:"vpcSecurityGroupIds"`
	VpcSubnetIds        []string          `pulumi:"vpcSubnetIds"`
}

type ProxyState struct {
	Arn                 pulumi.StringPtrInput
	Auths               ProxyAuthArrayInput
	DebugLogging        pulumi.BoolPtrInput
	Endpoint            pulumi.StringPtrInput
	EngineFamily        pulumi.StringPtrInput
	IdleClientTimeout   pulumi.IntPtrInput
	Name                pulumi.StringPtrInput
	RequireTls          pulumi.BoolPtrInput
	RoleArn             pulumi.StringPtrInput
	Tags                pulumi.StringMapInput
	TagsAll             pulumi.StringMapInput
	VpcSecurityGroupIds pulumi.StringArrayInput
	VpcSubnetIds        pulumi.StringArrayInput
}

func (ProxyState) ElementType() reflect.Type {
	return reflect.TypeOf((*proxyState)(nil)).Elem()
}

type proxyArgs struct {
	Auths               []ProxyAuth       `pulumi:"auths"`
	DebugLogging        *bool             `pulumi:"debugLogging"`
	EngineFamily        string            `pulumi:"engineFamily"`
	IdleClientTimeout   *int              `pulumi:"idleClientTimeout"`
	Name                *string           `pulumi:"name"`
	RequireTls          *bool             `pulumi:"requireTls"`
	RoleArn             string            `pulumi:"roleArn"`
	Tags                map[string]string `pulumi:"tags"`
	VpcSecurityGroupIds []string          `pulumi:"vpcSecurityGroupIds"`
	VpcSubnetIds        []string          `pulumi:"vpcSubnetIds"`
}

// The set of arguments for constructing a Proxy resource.
type ProxyArgs struct {
	Auths               ProxyAuthArrayInput
	DebugLogging        pulumi.BoolPtrInput
	EngineFamily        pulumi.StringInput
	IdleClientTimeout   pulumi.IntPtrInput
	Name                pulumi.StringPtrInput
	RequireTls          pulumi.BoolPtrInput
	RoleArn             pulumi.StringInput
	Tags                pulumi.StringMapInput
	VpcSecurityGroupIds pulumi.StringArrayInput
	VpcSubnetIds        pulumi.StringArrayInput
}

func (ProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*proxyArgs)(nil)).Elem()
}

type ProxyInput interface {
	pulumi.Input

	ToProxyOutput() ProxyOutput
	ToProxyOutputWithContext(ctx context.Context) ProxyOutput
}

func (*Proxy) ElementType() reflect.Type {
	return reflect.TypeOf((**Proxy)(nil)).Elem()
}

func (i *Proxy) ToProxyOutput() ProxyOutput {
	return i.ToProxyOutputWithContext(context.Background())
}

func (i *Proxy) ToProxyOutputWithContext(ctx context.Context) ProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxyOutput)
}

// ProxyArrayInput is an input type that accepts ProxyArray and ProxyArrayOutput values.
// You can construct a concrete instance of `ProxyArrayInput` via:
//
//	ProxyArray{ ProxyArgs{...} }
type ProxyArrayInput interface {
	pulumi.Input

	ToProxyArrayOutput() ProxyArrayOutput
	ToProxyArrayOutputWithContext(context.Context) ProxyArrayOutput
}

type ProxyArray []ProxyInput

func (ProxyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Proxy)(nil)).Elem()
}

func (i ProxyArray) ToProxyArrayOutput() ProxyArrayOutput {
	return i.ToProxyArrayOutputWithContext(context.Background())
}

func (i ProxyArray) ToProxyArrayOutputWithContext(ctx context.Context) ProxyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxyArrayOutput)
}

// ProxyMapInput is an input type that accepts ProxyMap and ProxyMapOutput values.
// You can construct a concrete instance of `ProxyMapInput` via:
//
//	ProxyMap{ "key": ProxyArgs{...} }
type ProxyMapInput interface {
	pulumi.Input

	ToProxyMapOutput() ProxyMapOutput
	ToProxyMapOutputWithContext(context.Context) ProxyMapOutput
}

type ProxyMap map[string]ProxyInput

func (ProxyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Proxy)(nil)).Elem()
}

func (i ProxyMap) ToProxyMapOutput() ProxyMapOutput {
	return i.ToProxyMapOutputWithContext(context.Background())
}

func (i ProxyMap) ToProxyMapOutputWithContext(ctx context.Context) ProxyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxyMapOutput)
}

type ProxyOutput struct{ *pulumi.OutputState }

func (ProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Proxy)(nil)).Elem()
}

func (o ProxyOutput) ToProxyOutput() ProxyOutput {
	return o
}

func (o ProxyOutput) ToProxyOutputWithContext(ctx context.Context) ProxyOutput {
	return o
}

func (o ProxyOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Proxy) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ProxyOutput) Auths() ProxyAuthArrayOutput {
	return o.ApplyT(func(v *Proxy) ProxyAuthArrayOutput { return v.Auths }).(ProxyAuthArrayOutput)
}

func (o ProxyOutput) DebugLogging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Proxy) pulumi.BoolPtrOutput { return v.DebugLogging }).(pulumi.BoolPtrOutput)
}

func (o ProxyOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *Proxy) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

func (o ProxyOutput) EngineFamily() pulumi.StringOutput {
	return o.ApplyT(func(v *Proxy) pulumi.StringOutput { return v.EngineFamily }).(pulumi.StringOutput)
}

func (o ProxyOutput) IdleClientTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Proxy) pulumi.IntOutput { return v.IdleClientTimeout }).(pulumi.IntOutput)
}

func (o ProxyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Proxy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ProxyOutput) RequireTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Proxy) pulumi.BoolPtrOutput { return v.RequireTls }).(pulumi.BoolPtrOutput)
}

func (o ProxyOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Proxy) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

func (o ProxyOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Proxy) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ProxyOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Proxy) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o ProxyOutput) VpcSecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Proxy) pulumi.StringArrayOutput { return v.VpcSecurityGroupIds }).(pulumi.StringArrayOutput)
}

func (o ProxyOutput) VpcSubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Proxy) pulumi.StringArrayOutput { return v.VpcSubnetIds }).(pulumi.StringArrayOutput)
}

type ProxyArrayOutput struct{ *pulumi.OutputState }

func (ProxyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Proxy)(nil)).Elem()
}

func (o ProxyArrayOutput) ToProxyArrayOutput() ProxyArrayOutput {
	return o
}

func (o ProxyArrayOutput) ToProxyArrayOutputWithContext(ctx context.Context) ProxyArrayOutput {
	return o
}

func (o ProxyArrayOutput) Index(i pulumi.IntInput) ProxyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Proxy {
		return vs[0].([]*Proxy)[vs[1].(int)]
	}).(ProxyOutput)
}

type ProxyMapOutput struct{ *pulumi.OutputState }

func (ProxyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Proxy)(nil)).Elem()
}

func (o ProxyMapOutput) ToProxyMapOutput() ProxyMapOutput {
	return o
}

func (o ProxyMapOutput) ToProxyMapOutputWithContext(ctx context.Context) ProxyMapOutput {
	return o
}

func (o ProxyMapOutput) MapIndex(k pulumi.StringInput) ProxyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Proxy {
		return vs[0].(map[string]*Proxy)[vs[1].(string)]
	}).(ProxyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProxyInput)(nil)).Elem(), &Proxy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProxyArrayInput)(nil)).Elem(), ProxyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProxyMapInput)(nil)).Elem(), ProxyMap{})
	pulumi.RegisterOutputType(ProxyOutput{})
	pulumi.RegisterOutputType(ProxyArrayOutput{})
	pulumi.RegisterOutputType(ProxyMapOutput{})
}
