// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CatalogDatabase struct {
	pulumi.CustomResourceState

	Arn                           pulumi.StringOutput                                    `pulumi:"arn"`
	CatalogId                     pulumi.StringOutput                                    `pulumi:"catalogId"`
	CreateTableDefaultPermissions CatalogDatabaseCreateTableDefaultPermissionArrayOutput `pulumi:"createTableDefaultPermissions"`
	Description                   pulumi.StringPtrOutput                                 `pulumi:"description"`
	LocationUri                   pulumi.StringOutput                                    `pulumi:"locationUri"`
	Name                          pulumi.StringOutput                                    `pulumi:"name"`
	Parameters                    pulumi.StringMapOutput                                 `pulumi:"parameters"`
	TargetDatabase                CatalogDatabaseTargetDatabasePtrOutput                 `pulumi:"targetDatabase"`
}

// NewCatalogDatabase registers a new resource with the given unique name, arguments, and options.
func NewCatalogDatabase(ctx *pulumi.Context,
	name string, args *CatalogDatabaseArgs, opts ...pulumi.ResourceOption) (*CatalogDatabase, error) {
	if args == nil {
		args = &CatalogDatabaseArgs{}
	}

	var resource CatalogDatabase
	err := ctx.RegisterResource("aws:glue/catalogDatabase:CatalogDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCatalogDatabase gets an existing CatalogDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCatalogDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CatalogDatabaseState, opts ...pulumi.ResourceOption) (*CatalogDatabase, error) {
	var resource CatalogDatabase
	err := ctx.ReadResource("aws:glue/catalogDatabase:CatalogDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CatalogDatabase resources.
type catalogDatabaseState struct {
	Arn                           *string                                       `pulumi:"arn"`
	CatalogId                     *string                                       `pulumi:"catalogId"`
	CreateTableDefaultPermissions []CatalogDatabaseCreateTableDefaultPermission `pulumi:"createTableDefaultPermissions"`
	Description                   *string                                       `pulumi:"description"`
	LocationUri                   *string                                       `pulumi:"locationUri"`
	Name                          *string                                       `pulumi:"name"`
	Parameters                    map[string]string                             `pulumi:"parameters"`
	TargetDatabase                *CatalogDatabaseTargetDatabase                `pulumi:"targetDatabase"`
}

type CatalogDatabaseState struct {
	Arn                           pulumi.StringPtrInput
	CatalogId                     pulumi.StringPtrInput
	CreateTableDefaultPermissions CatalogDatabaseCreateTableDefaultPermissionArrayInput
	Description                   pulumi.StringPtrInput
	LocationUri                   pulumi.StringPtrInput
	Name                          pulumi.StringPtrInput
	Parameters                    pulumi.StringMapInput
	TargetDatabase                CatalogDatabaseTargetDatabasePtrInput
}

func (CatalogDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogDatabaseState)(nil)).Elem()
}

type catalogDatabaseArgs struct {
	CatalogId                     *string                                       `pulumi:"catalogId"`
	CreateTableDefaultPermissions []CatalogDatabaseCreateTableDefaultPermission `pulumi:"createTableDefaultPermissions"`
	Description                   *string                                       `pulumi:"description"`
	LocationUri                   *string                                       `pulumi:"locationUri"`
	Name                          *string                                       `pulumi:"name"`
	Parameters                    map[string]string                             `pulumi:"parameters"`
	TargetDatabase                *CatalogDatabaseTargetDatabase                `pulumi:"targetDatabase"`
}

// The set of arguments for constructing a CatalogDatabase resource.
type CatalogDatabaseArgs struct {
	CatalogId                     pulumi.StringPtrInput
	CreateTableDefaultPermissions CatalogDatabaseCreateTableDefaultPermissionArrayInput
	Description                   pulumi.StringPtrInput
	LocationUri                   pulumi.StringPtrInput
	Name                          pulumi.StringPtrInput
	Parameters                    pulumi.StringMapInput
	TargetDatabase                CatalogDatabaseTargetDatabasePtrInput
}

func (CatalogDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogDatabaseArgs)(nil)).Elem()
}

type CatalogDatabaseInput interface {
	pulumi.Input

	ToCatalogDatabaseOutput() CatalogDatabaseOutput
	ToCatalogDatabaseOutputWithContext(ctx context.Context) CatalogDatabaseOutput
}

func (*CatalogDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogDatabase)(nil)).Elem()
}

func (i *CatalogDatabase) ToCatalogDatabaseOutput() CatalogDatabaseOutput {
	return i.ToCatalogDatabaseOutputWithContext(context.Background())
}

func (i *CatalogDatabase) ToCatalogDatabaseOutputWithContext(ctx context.Context) CatalogDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogDatabaseOutput)
}

// CatalogDatabaseArrayInput is an input type that accepts CatalogDatabaseArray and CatalogDatabaseArrayOutput values.
// You can construct a concrete instance of `CatalogDatabaseArrayInput` via:
//
//	CatalogDatabaseArray{ CatalogDatabaseArgs{...} }
type CatalogDatabaseArrayInput interface {
	pulumi.Input

	ToCatalogDatabaseArrayOutput() CatalogDatabaseArrayOutput
	ToCatalogDatabaseArrayOutputWithContext(context.Context) CatalogDatabaseArrayOutput
}

type CatalogDatabaseArray []CatalogDatabaseInput

func (CatalogDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CatalogDatabase)(nil)).Elem()
}

func (i CatalogDatabaseArray) ToCatalogDatabaseArrayOutput() CatalogDatabaseArrayOutput {
	return i.ToCatalogDatabaseArrayOutputWithContext(context.Background())
}

func (i CatalogDatabaseArray) ToCatalogDatabaseArrayOutputWithContext(ctx context.Context) CatalogDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogDatabaseArrayOutput)
}

// CatalogDatabaseMapInput is an input type that accepts CatalogDatabaseMap and CatalogDatabaseMapOutput values.
// You can construct a concrete instance of `CatalogDatabaseMapInput` via:
//
//	CatalogDatabaseMap{ "key": CatalogDatabaseArgs{...} }
type CatalogDatabaseMapInput interface {
	pulumi.Input

	ToCatalogDatabaseMapOutput() CatalogDatabaseMapOutput
	ToCatalogDatabaseMapOutputWithContext(context.Context) CatalogDatabaseMapOutput
}

type CatalogDatabaseMap map[string]CatalogDatabaseInput

func (CatalogDatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CatalogDatabase)(nil)).Elem()
}

func (i CatalogDatabaseMap) ToCatalogDatabaseMapOutput() CatalogDatabaseMapOutput {
	return i.ToCatalogDatabaseMapOutputWithContext(context.Background())
}

func (i CatalogDatabaseMap) ToCatalogDatabaseMapOutputWithContext(ctx context.Context) CatalogDatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogDatabaseMapOutput)
}

type CatalogDatabaseOutput struct{ *pulumi.OutputState }

func (CatalogDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogDatabase)(nil)).Elem()
}

func (o CatalogDatabaseOutput) ToCatalogDatabaseOutput() CatalogDatabaseOutput {
	return o
}

func (o CatalogDatabaseOutput) ToCatalogDatabaseOutputWithContext(ctx context.Context) CatalogDatabaseOutput {
	return o
}

func (o CatalogDatabaseOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogDatabase) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o CatalogDatabaseOutput) CatalogId() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogDatabase) pulumi.StringOutput { return v.CatalogId }).(pulumi.StringOutput)
}

func (o CatalogDatabaseOutput) CreateTableDefaultPermissions() CatalogDatabaseCreateTableDefaultPermissionArrayOutput {
	return o.ApplyT(func(v *CatalogDatabase) CatalogDatabaseCreateTableDefaultPermissionArrayOutput {
		return v.CreateTableDefaultPermissions
	}).(CatalogDatabaseCreateTableDefaultPermissionArrayOutput)
}

func (o CatalogDatabaseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CatalogDatabase) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o CatalogDatabaseOutput) LocationUri() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogDatabase) pulumi.StringOutput { return v.LocationUri }).(pulumi.StringOutput)
}

func (o CatalogDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogDatabase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CatalogDatabaseOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CatalogDatabase) pulumi.StringMapOutput { return v.Parameters }).(pulumi.StringMapOutput)
}

func (o CatalogDatabaseOutput) TargetDatabase() CatalogDatabaseTargetDatabasePtrOutput {
	return o.ApplyT(func(v *CatalogDatabase) CatalogDatabaseTargetDatabasePtrOutput { return v.TargetDatabase }).(CatalogDatabaseTargetDatabasePtrOutput)
}

type CatalogDatabaseArrayOutput struct{ *pulumi.OutputState }

func (CatalogDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CatalogDatabase)(nil)).Elem()
}

func (o CatalogDatabaseArrayOutput) ToCatalogDatabaseArrayOutput() CatalogDatabaseArrayOutput {
	return o
}

func (o CatalogDatabaseArrayOutput) ToCatalogDatabaseArrayOutputWithContext(ctx context.Context) CatalogDatabaseArrayOutput {
	return o
}

func (o CatalogDatabaseArrayOutput) Index(i pulumi.IntInput) CatalogDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CatalogDatabase {
		return vs[0].([]*CatalogDatabase)[vs[1].(int)]
	}).(CatalogDatabaseOutput)
}

type CatalogDatabaseMapOutput struct{ *pulumi.OutputState }

func (CatalogDatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CatalogDatabase)(nil)).Elem()
}

func (o CatalogDatabaseMapOutput) ToCatalogDatabaseMapOutput() CatalogDatabaseMapOutput {
	return o
}

func (o CatalogDatabaseMapOutput) ToCatalogDatabaseMapOutputWithContext(ctx context.Context) CatalogDatabaseMapOutput {
	return o
}

func (o CatalogDatabaseMapOutput) MapIndex(k pulumi.StringInput) CatalogDatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CatalogDatabase {
		return vs[0].(map[string]*CatalogDatabase)[vs[1].(string)]
	}).(CatalogDatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogDatabaseInput)(nil)).Elem(), &CatalogDatabase{})
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogDatabaseArrayInput)(nil)).Elem(), CatalogDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogDatabaseMapInput)(nil)).Elem(), CatalogDatabaseMap{})
	pulumi.RegisterOutputType(CatalogDatabaseOutput{})
	pulumi.RegisterOutputType(CatalogDatabaseArrayOutput{})
	pulumi.RegisterOutputType(CatalogDatabaseMapOutput{})
}
