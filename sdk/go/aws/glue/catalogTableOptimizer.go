// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS Glue Catalog Table Optimizer.
//
// ## Example Usage
//
// ### Compaction Optimizer
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/glue"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := glue.NewCatalogTableOptimizer(ctx, "example", &glue.CatalogTableOptimizerArgs{
//				CatalogId:    pulumi.String("123456789012"),
//				DatabaseName: pulumi.String("example_database"),
//				TableName:    pulumi.String("example_table"),
//				Configuration: &glue.CatalogTableOptimizerConfigurationArgs{
//					RoleArn: pulumi.String("arn:aws:iam::123456789012:role/example-role"),
//					Enabled: pulumi.Bool(true),
//				},
//				Type: pulumi.String("compaction"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Snapshot Retention Optimizer
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/glue"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := glue.NewCatalogTableOptimizer(ctx, "example", &glue.CatalogTableOptimizerArgs{
//				CatalogId:    pulumi.String("123456789012"),
//				DatabaseName: pulumi.String("example_database"),
//				TableName:    pulumi.String("example_table"),
//				Configuration: &glue.CatalogTableOptimizerConfigurationArgs{
//					RoleArn: pulumi.String("arn:aws:iam::123456789012:role/example-role"),
//					Enabled: pulumi.Bool(true),
//					RetentionConfiguration: &glue.CatalogTableOptimizerConfigurationRetentionConfigurationArgs{
//						IcebergConfiguration: &glue.CatalogTableOptimizerConfigurationRetentionConfigurationIcebergConfigurationArgs{
//							SnapshotRetentionPeriodInDays: pulumi.Float64(7),
//							NumberOfSnapshotsToRetain:     pulumi.Float64(3),
//							CleanExpiredFiles:             pulumi.Bool(true),
//						},
//					},
//				},
//				Type: pulumi.String("retention"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Orphan File Deletion Optimizer
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/glue"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := glue.NewCatalogTableOptimizer(ctx, "example", &glue.CatalogTableOptimizerArgs{
//				CatalogId:    pulumi.String("123456789012"),
//				DatabaseName: pulumi.String("example_database"),
//				TableName:    pulumi.String("example_table"),
//				Configuration: &glue.CatalogTableOptimizerConfigurationArgs{
//					RoleArn: pulumi.String("arn:aws:iam::123456789012:role/example-role"),
//					Enabled: pulumi.Bool(true),
//					OrphanFileDeletionConfiguration: &glue.CatalogTableOptimizerConfigurationOrphanFileDeletionConfigurationArgs{
//						IcebergConfiguration: &glue.CatalogTableOptimizerConfigurationOrphanFileDeletionConfigurationIcebergConfigurationArgs{
//							OrphanFileRetentionPeriodInDays: pulumi.Float64(7),
//							Location:                        pulumi.String("s3://example-bucket/example_table/"),
//						},
//					},
//				},
//				Type: pulumi.String("orphan_file_deletion"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Glue Catalog Table Optimizer using the `catalog_id,database_name,table_name,type`. For example:
//
// ```sh
// $ pulumi import aws:glue/catalogTableOptimizer:CatalogTableOptimizer example 123456789012,example_database,example_table,compaction
// ```
type CatalogTableOptimizer struct {
	pulumi.CustomResourceState

	// The Catalog ID of the table.
	CatalogId pulumi.StringOutput `pulumi:"catalogId"`
	// A configuration block that defines the table optimizer settings. See Configuration for additional details.
	Configuration CatalogTableOptimizerConfigurationPtrOutput `pulumi:"configuration"`
	// The name of the database in the catalog in which the table resides.
	DatabaseName pulumi.StringOutput `pulumi:"databaseName"`
	// The name of the table.
	TableName pulumi.StringOutput `pulumi:"tableName"`
	// The type of table optimizer. Valid values are `compaction`, `retention`, and `orphanFileDeletion`.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewCatalogTableOptimizer registers a new resource with the given unique name, arguments, and options.
func NewCatalogTableOptimizer(ctx *pulumi.Context,
	name string, args *CatalogTableOptimizerArgs, opts ...pulumi.ResourceOption) (*CatalogTableOptimizer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CatalogId == nil {
		return nil, errors.New("invalid value for required argument 'CatalogId'")
	}
	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.TableName == nil {
		return nil, errors.New("invalid value for required argument 'TableName'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CatalogTableOptimizer
	err := ctx.RegisterResource("aws:glue/catalogTableOptimizer:CatalogTableOptimizer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCatalogTableOptimizer gets an existing CatalogTableOptimizer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCatalogTableOptimizer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CatalogTableOptimizerState, opts ...pulumi.ResourceOption) (*CatalogTableOptimizer, error) {
	var resource CatalogTableOptimizer
	err := ctx.ReadResource("aws:glue/catalogTableOptimizer:CatalogTableOptimizer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CatalogTableOptimizer resources.
type catalogTableOptimizerState struct {
	// The Catalog ID of the table.
	CatalogId *string `pulumi:"catalogId"`
	// A configuration block that defines the table optimizer settings. See Configuration for additional details.
	Configuration *CatalogTableOptimizerConfiguration `pulumi:"configuration"`
	// The name of the database in the catalog in which the table resides.
	DatabaseName *string `pulumi:"databaseName"`
	// The name of the table.
	TableName *string `pulumi:"tableName"`
	// The type of table optimizer. Valid values are `compaction`, `retention`, and `orphanFileDeletion`.
	Type *string `pulumi:"type"`
}

type CatalogTableOptimizerState struct {
	// The Catalog ID of the table.
	CatalogId pulumi.StringPtrInput
	// A configuration block that defines the table optimizer settings. See Configuration for additional details.
	Configuration CatalogTableOptimizerConfigurationPtrInput
	// The name of the database in the catalog in which the table resides.
	DatabaseName pulumi.StringPtrInput
	// The name of the table.
	TableName pulumi.StringPtrInput
	// The type of table optimizer. Valid values are `compaction`, `retention`, and `orphanFileDeletion`.
	Type pulumi.StringPtrInput
}

func (CatalogTableOptimizerState) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogTableOptimizerState)(nil)).Elem()
}

type catalogTableOptimizerArgs struct {
	// The Catalog ID of the table.
	CatalogId string `pulumi:"catalogId"`
	// A configuration block that defines the table optimizer settings. See Configuration for additional details.
	Configuration *CatalogTableOptimizerConfiguration `pulumi:"configuration"`
	// The name of the database in the catalog in which the table resides.
	DatabaseName string `pulumi:"databaseName"`
	// The name of the table.
	TableName string `pulumi:"tableName"`
	// The type of table optimizer. Valid values are `compaction`, `retention`, and `orphanFileDeletion`.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a CatalogTableOptimizer resource.
type CatalogTableOptimizerArgs struct {
	// The Catalog ID of the table.
	CatalogId pulumi.StringInput
	// A configuration block that defines the table optimizer settings. See Configuration for additional details.
	Configuration CatalogTableOptimizerConfigurationPtrInput
	// The name of the database in the catalog in which the table resides.
	DatabaseName pulumi.StringInput
	// The name of the table.
	TableName pulumi.StringInput
	// The type of table optimizer. Valid values are `compaction`, `retention`, and `orphanFileDeletion`.
	Type pulumi.StringInput
}

func (CatalogTableOptimizerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogTableOptimizerArgs)(nil)).Elem()
}

type CatalogTableOptimizerInput interface {
	pulumi.Input

	ToCatalogTableOptimizerOutput() CatalogTableOptimizerOutput
	ToCatalogTableOptimizerOutputWithContext(ctx context.Context) CatalogTableOptimizerOutput
}

func (*CatalogTableOptimizer) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogTableOptimizer)(nil)).Elem()
}

func (i *CatalogTableOptimizer) ToCatalogTableOptimizerOutput() CatalogTableOptimizerOutput {
	return i.ToCatalogTableOptimizerOutputWithContext(context.Background())
}

func (i *CatalogTableOptimizer) ToCatalogTableOptimizerOutputWithContext(ctx context.Context) CatalogTableOptimizerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogTableOptimizerOutput)
}

// CatalogTableOptimizerArrayInput is an input type that accepts CatalogTableOptimizerArray and CatalogTableOptimizerArrayOutput values.
// You can construct a concrete instance of `CatalogTableOptimizerArrayInput` via:
//
//	CatalogTableOptimizerArray{ CatalogTableOptimizerArgs{...} }
type CatalogTableOptimizerArrayInput interface {
	pulumi.Input

	ToCatalogTableOptimizerArrayOutput() CatalogTableOptimizerArrayOutput
	ToCatalogTableOptimizerArrayOutputWithContext(context.Context) CatalogTableOptimizerArrayOutput
}

type CatalogTableOptimizerArray []CatalogTableOptimizerInput

func (CatalogTableOptimizerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CatalogTableOptimizer)(nil)).Elem()
}

func (i CatalogTableOptimizerArray) ToCatalogTableOptimizerArrayOutput() CatalogTableOptimizerArrayOutput {
	return i.ToCatalogTableOptimizerArrayOutputWithContext(context.Background())
}

func (i CatalogTableOptimizerArray) ToCatalogTableOptimizerArrayOutputWithContext(ctx context.Context) CatalogTableOptimizerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogTableOptimizerArrayOutput)
}

// CatalogTableOptimizerMapInput is an input type that accepts CatalogTableOptimizerMap and CatalogTableOptimizerMapOutput values.
// You can construct a concrete instance of `CatalogTableOptimizerMapInput` via:
//
//	CatalogTableOptimizerMap{ "key": CatalogTableOptimizerArgs{...} }
type CatalogTableOptimizerMapInput interface {
	pulumi.Input

	ToCatalogTableOptimizerMapOutput() CatalogTableOptimizerMapOutput
	ToCatalogTableOptimizerMapOutputWithContext(context.Context) CatalogTableOptimizerMapOutput
}

type CatalogTableOptimizerMap map[string]CatalogTableOptimizerInput

func (CatalogTableOptimizerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CatalogTableOptimizer)(nil)).Elem()
}

func (i CatalogTableOptimizerMap) ToCatalogTableOptimizerMapOutput() CatalogTableOptimizerMapOutput {
	return i.ToCatalogTableOptimizerMapOutputWithContext(context.Background())
}

func (i CatalogTableOptimizerMap) ToCatalogTableOptimizerMapOutputWithContext(ctx context.Context) CatalogTableOptimizerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogTableOptimizerMapOutput)
}

type CatalogTableOptimizerOutput struct{ *pulumi.OutputState }

func (CatalogTableOptimizerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogTableOptimizer)(nil)).Elem()
}

func (o CatalogTableOptimizerOutput) ToCatalogTableOptimizerOutput() CatalogTableOptimizerOutput {
	return o
}

func (o CatalogTableOptimizerOutput) ToCatalogTableOptimizerOutputWithContext(ctx context.Context) CatalogTableOptimizerOutput {
	return o
}

// The Catalog ID of the table.
func (o CatalogTableOptimizerOutput) CatalogId() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogTableOptimizer) pulumi.StringOutput { return v.CatalogId }).(pulumi.StringOutput)
}

// A configuration block that defines the table optimizer settings. See Configuration for additional details.
func (o CatalogTableOptimizerOutput) Configuration() CatalogTableOptimizerConfigurationPtrOutput {
	return o.ApplyT(func(v *CatalogTableOptimizer) CatalogTableOptimizerConfigurationPtrOutput { return v.Configuration }).(CatalogTableOptimizerConfigurationPtrOutput)
}

// The name of the database in the catalog in which the table resides.
func (o CatalogTableOptimizerOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogTableOptimizer) pulumi.StringOutput { return v.DatabaseName }).(pulumi.StringOutput)
}

// The name of the table.
func (o CatalogTableOptimizerOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogTableOptimizer) pulumi.StringOutput { return v.TableName }).(pulumi.StringOutput)
}

// The type of table optimizer. Valid values are `compaction`, `retention`, and `orphanFileDeletion`.
func (o CatalogTableOptimizerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogTableOptimizer) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type CatalogTableOptimizerArrayOutput struct{ *pulumi.OutputState }

func (CatalogTableOptimizerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CatalogTableOptimizer)(nil)).Elem()
}

func (o CatalogTableOptimizerArrayOutput) ToCatalogTableOptimizerArrayOutput() CatalogTableOptimizerArrayOutput {
	return o
}

func (o CatalogTableOptimizerArrayOutput) ToCatalogTableOptimizerArrayOutputWithContext(ctx context.Context) CatalogTableOptimizerArrayOutput {
	return o
}

func (o CatalogTableOptimizerArrayOutput) Index(i pulumi.IntInput) CatalogTableOptimizerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CatalogTableOptimizer {
		return vs[0].([]*CatalogTableOptimizer)[vs[1].(int)]
	}).(CatalogTableOptimizerOutput)
}

type CatalogTableOptimizerMapOutput struct{ *pulumi.OutputState }

func (CatalogTableOptimizerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CatalogTableOptimizer)(nil)).Elem()
}

func (o CatalogTableOptimizerMapOutput) ToCatalogTableOptimizerMapOutput() CatalogTableOptimizerMapOutput {
	return o
}

func (o CatalogTableOptimizerMapOutput) ToCatalogTableOptimizerMapOutputWithContext(ctx context.Context) CatalogTableOptimizerMapOutput {
	return o
}

func (o CatalogTableOptimizerMapOutput) MapIndex(k pulumi.StringInput) CatalogTableOptimizerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CatalogTableOptimizer {
		return vs[0].(map[string]*CatalogTableOptimizer)[vs[1].(string)]
	}).(CatalogTableOptimizerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogTableOptimizerInput)(nil)).Elem(), &CatalogTableOptimizer{})
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogTableOptimizerArrayInput)(nil)).Elem(), CatalogTableOptimizerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogTableOptimizerMapInput)(nil)).Elem(), CatalogTableOptimizerMap{})
	pulumi.RegisterOutputType(CatalogTableOptimizerOutput{})
	pulumi.RegisterOutputType(CatalogTableOptimizerArrayOutput{})
	pulumi.RegisterOutputType(CatalogTableOptimizerMapOutput{})
}
