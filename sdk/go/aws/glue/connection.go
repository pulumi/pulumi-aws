// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Glue Connection resource.
type Connection struct {
	s *pulumi.ResourceState
}

// NewConnection registers a new resource with the given unique name, arguments, and options.
func NewConnection(ctx *pulumi.Context,
	name string, args *ConnectionArgs, opts ...pulumi.ResourceOpt) (*Connection, error) {
	if args == nil || args.ConnectionProperties == nil {
		return nil, errors.New("missing required argument 'ConnectionProperties'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["catalogId"] = nil
		inputs["connectionProperties"] = nil
		inputs["connectionType"] = nil
		inputs["description"] = nil
		inputs["matchCriterias"] = nil
		inputs["name"] = nil
		inputs["physicalConnectionRequirements"] = nil
	} else {
		inputs["catalogId"] = args.CatalogId
		inputs["connectionProperties"] = args.ConnectionProperties
		inputs["connectionType"] = args.ConnectionType
		inputs["description"] = args.Description
		inputs["matchCriterias"] = args.MatchCriterias
		inputs["name"] = args.Name
		inputs["physicalConnectionRequirements"] = args.PhysicalConnectionRequirements
	}
	s, err := ctx.RegisterResource("aws:glue/connection:Connection", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Connection{s: s}, nil
}

// GetConnection gets an existing Connection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnection(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ConnectionState, opts ...pulumi.ResourceOpt) (*Connection, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["catalogId"] = state.CatalogId
		inputs["connectionProperties"] = state.ConnectionProperties
		inputs["connectionType"] = state.ConnectionType
		inputs["description"] = state.Description
		inputs["matchCriterias"] = state.MatchCriterias
		inputs["name"] = state.Name
		inputs["physicalConnectionRequirements"] = state.PhysicalConnectionRequirements
	}
	s, err := ctx.ReadResource("aws:glue/connection:Connection", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Connection{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Connection) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Connection) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The ID of the Data Catalog in which to create the connection. If none is supplied, the AWS account ID is used by default.
func (r *Connection) CatalogId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["catalogId"])
}

// A map of key-value pairs used as parameters for this connection.
func (r *Connection) ConnectionProperties() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["connectionProperties"])
}

// The type of the connection. Defaults to `JBDC`.
func (r *Connection) ConnectionType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["connectionType"])
}

// Description of the connection.
func (r *Connection) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// A list of criteria that can be used in selecting this connection.
func (r *Connection) MatchCriterias() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["matchCriterias"])
}

// The name of the connection.
func (r *Connection) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// A map of physical connection requirements, such as VPC and SecurityGroup. Defined below.
func (r *Connection) PhysicalConnectionRequirements() *pulumi.Output {
	return r.s.State["physicalConnectionRequirements"]
}

// Input properties used for looking up and filtering Connection resources.
type ConnectionState struct {
	// The ID of the Data Catalog in which to create the connection. If none is supplied, the AWS account ID is used by default.
	CatalogId interface{}
	// A map of key-value pairs used as parameters for this connection.
	ConnectionProperties interface{}
	// The type of the connection. Defaults to `JBDC`.
	ConnectionType interface{}
	// Description of the connection.
	Description interface{}
	// A list of criteria that can be used in selecting this connection.
	MatchCriterias interface{}
	// The name of the connection.
	Name interface{}
	// A map of physical connection requirements, such as VPC and SecurityGroup. Defined below.
	PhysicalConnectionRequirements interface{}
}

// The set of arguments for constructing a Connection resource.
type ConnectionArgs struct {
	// The ID of the Data Catalog in which to create the connection. If none is supplied, the AWS account ID is used by default.
	CatalogId interface{}
	// A map of key-value pairs used as parameters for this connection.
	ConnectionProperties interface{}
	// The type of the connection. Defaults to `JBDC`.
	ConnectionType interface{}
	// Description of the connection.
	Description interface{}
	// A list of criteria that can be used in selecting this connection.
	MatchCriterias interface{}
	// The name of the connection.
	Name interface{}
	// A map of physical connection requirements, such as VPC and SecurityGroup. Defined below.
	PhysicalConnectionRequirements interface{}
}
