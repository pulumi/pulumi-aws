// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Glue Connection resource.
//
// ## Example Usage
//
// ### Non-VPC Connection
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/glue"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := glue.NewConnection(ctx, "example", &glue.ConnectionArgs{
//				Name: pulumi.String("example"),
//				ConnectionProperties: pulumi.StringMap{
//					"JDBC_CONNECTION_URL": pulumi.String("jdbc:mysql://example.com/exampledatabase"),
//					"PASSWORD":            pulumi.String("examplepassword"),
//					"USERNAME":            pulumi.String("exampleusername"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Non-VPC Connection with secret manager reference
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/glue"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/secretsmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := secretsmanager.LookupSecret(ctx, &secretsmanager.LookupSecretArgs{
//				Name: pulumi.StringRef("example-secret"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = glue.NewConnection(ctx, "example", &glue.ConnectionArgs{
//				Name: pulumi.String("example"),
//				ConnectionProperties: pulumi.StringMap{
//					"JDBC_CONNECTION_URL": pulumi.String("jdbc:mysql://example.com/exampledatabase"),
//					"SECRET_ID":           pulumi.String(example.Name),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### VPC Connection
//
// For more information, see the [AWS Documentation](https://docs.aws.amazon.com/glue/latest/dg/populate-add-connection.html#connection-JDBC-VPC).
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/glue"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := glue.NewConnection(ctx, "example", &glue.ConnectionArgs{
//				Name: pulumi.String("example"),
//				ConnectionProperties: pulumi.StringMap{
//					"JDBC_CONNECTION_URL": pulumi.Sprintf("jdbc:mysql://%v/exampledatabase", exampleAwsRdsCluster.Endpoint),
//					"PASSWORD":            pulumi.String("examplepassword"),
//					"USERNAME":            pulumi.String("exampleusername"),
//				},
//				PhysicalConnectionRequirements: &glue.ConnectionPhysicalConnectionRequirementsArgs{
//					AvailabilityZone: pulumi.Any(exampleAwsSubnet.AvailabilityZone),
//					SecurityGroupIdLists: pulumi.StringArray{
//						exampleAwsSecurityGroup.Id,
//					},
//					SubnetId: pulumi.Any(exampleAwsSubnet.Id),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Connection using a custom connector
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/glue"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/secretsmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Define the custom connector using the connection_type of `CUSTOM` with the match_criteria of `template_connection`
//			// Example here being a snowflake jdbc connector with a secret having user and password as keys
//			example, err := secretsmanager.LookupSecret(ctx, &secretsmanager.LookupSecretArgs{
//				Name: pulumi.StringRef("example-secret"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			example1, err := glue.NewConnection(ctx, "example1", &glue.ConnectionArgs{
//				Name:           pulumi.String("example1"),
//				ConnectionType: pulumi.String("CUSTOM"),
//				ConnectionProperties: pulumi.StringMap{
//					"CONNECTOR_CLASS_NAME": pulumi.String("net.snowflake.client.jdbc.SnowflakeDriver"),
//					"CONNECTION_TYPE":      pulumi.String("Jdbc"),
//					"CONNECTOR_URL":        pulumi.String("s3://example/snowflake-jdbc.jar"),
//					"JDBC_CONNECTION_URL":  pulumi.String("[[\"default=jdbc:snowflake://example.com/?user=${user}&password=${password}\"],\",\"]"),
//				},
//				MatchCriterias: pulumi.StringArray{
//					pulumi.String("template-connection"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Reference the connector using match_criteria with the connector created above.
//			_, err = glue.NewConnection(ctx, "example2", &glue.ConnectionArgs{
//				Name:           pulumi.String("example2"),
//				ConnectionType: pulumi.String("CUSTOM"),
//				ConnectionProperties: pulumi.StringMap{
//					"CONNECTOR_CLASS_NAME": pulumi.String("net.snowflake.client.jdbc.SnowflakeDriver"),
//					"CONNECTION_TYPE":      pulumi.String("Jdbc"),
//					"CONNECTOR_URL":        pulumi.String("s3://example/snowflake-jdbc.jar"),
//					"JDBC_CONNECTION_URL":  pulumi.String("jdbc:snowflake://example.com/?user=${user}&password=${password}"),
//					"SECRET_ID":            pulumi.String(example.Name),
//				},
//				MatchCriterias: pulumi.StringArray{
//					pulumi.String("Connection"),
//					example1.Name,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Azure Cosmos Connection
//
// For more information, see the [AWS Documentation](https://docs.aws.amazon.com/glue/latest/dg/connection-properties.html#connection-properties-azurecosmos).
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/glue"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/secretsmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := secretsmanager.NewSecret(ctx, "example", &secretsmanager.SecretArgs{
//				Name: pulumi.String("example-secret"),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"username": "exampleusername",
//				"password": "examplepassword",
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = secretsmanager.NewSecretVersion(ctx, "example", &secretsmanager.SecretVersionArgs{
//				SecretId:     example.ID(),
//				SecretString: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = glue.NewConnection(ctx, "example", &glue.ConnectionArgs{
//				Name:           pulumi.String("example"),
//				ConnectionType: pulumi.String("AZURECOSMOS"),
//				ConnectionProperties: pulumi.StringMap{
//					"SparkProperties": example.Name.ApplyT(func(name string) (pulumi.String, error) {
//						var _zero pulumi.String
//						tmpJSON1, err := json.Marshal(map[string]interface{}{
//							"secretId":                     name,
//							"spark.cosmos.accountEndpoint": "https://exampledbaccount.documents.azure.com:443/",
//						})
//						if err != nil {
//							return _zero, err
//						}
//						json1 := string(tmpJSON1)
//						return pulumi.String(json1), nil
//					}).(pulumi.StringOutput),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Azure SQL Connection
//
// For more information, see the [AWS Documentation](https://docs.aws.amazon.com/glue/latest/dg/connection-properties.html#connection-properties-azuresql).
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/glue"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/secretsmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := secretsmanager.NewSecret(ctx, "example", &secretsmanager.SecretArgs{
//				Name: pulumi.String("example-secret"),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"username": "exampleusername",
//				"password": "examplepassword",
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = secretsmanager.NewSecretVersion(ctx, "example", &secretsmanager.SecretVersionArgs{
//				SecretId:     example.ID(),
//				SecretString: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = glue.NewConnection(ctx, "example", &glue.ConnectionArgs{
//				Name:           pulumi.String("example"),
//				ConnectionType: pulumi.String("AZURECOSMOS"),
//				ConnectionProperties: pulumi.StringMap{
//					"SparkProperties": example.Name.ApplyT(func(name string) (pulumi.String, error) {
//						var _zero pulumi.String
//						tmpJSON1, err := json.Marshal(map[string]interface{}{
//							"secretId": name,
//							"url":      "jdbc:sqlserver:exampledbserver.database.windows.net:1433;database=exampledatabase",
//						})
//						if err != nil {
//							return _zero, err
//						}
//						json1 := string(tmpJSON1)
//						return pulumi.String(json1), nil
//					}).(pulumi.StringOutput),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Google BigQuery Connection
//
// For more information, see the [AWS Documentation](https://docs.aws.amazon.com/glue/latest/dg/connection-properties.html#connection-properties-bigquery).
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/glue"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/secretsmanager"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := secretsmanager.NewSecret(ctx, "example", &secretsmanager.SecretArgs{
//				Name: pulumi.String("example-secret"),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"credentials": std.Base64encode(ctx, map[string]interface{}{
//					"input": `{
//	  "type": "service_account",
//	  "project_id": "example-project",
//	  "private_key_id": "example-key",
//	  "private_key": "-----BEGIN RSA PRIVATE KEY-----\nREDACTED\n-----END RSA PRIVATE KEY-----",
//	  "client_email": "example-project@appspot.gserviceaccount.com",
//	  "client_id": example-client",
//	  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
//	  "token_uri": "https://oauth2.googleapis.com/token",
//	  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
//	  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/example-project%%40appspot.gserviceaccount.com",
//	  "universe_domain": "googleapis.com"
//	}
//
// `,
//
//				}, nil).Result,
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = secretsmanager.NewSecretVersion(ctx, "example", &secretsmanager.SecretVersionArgs{
//				SecretId:     example.ID(),
//				SecretString: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = glue.NewConnection(ctx, "example", &glue.ConnectionArgs{
//				Name:           pulumi.String("example"),
//				ConnectionType: pulumi.String("BIGQUERY"),
//				ConnectionProperties: pulumi.StringMap{
//					"SparkProperties": example.Name.ApplyT(func(name string) (pulumi.String, error) {
//						var _zero pulumi.String
//						tmpJSON1, err := json.Marshal(map[string]interface{}{
//							"secretId": name,
//						})
//						if err != nil {
//							return _zero, err
//						}
//						json1 := string(tmpJSON1)
//						return pulumi.String(json1), nil
//					}).(pulumi.StringOutput),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### OpenSearch Service Connection
//
// For more information, see the [AWS Documentation](https://docs.aws.amazon.com/glue/latest/dg/connection-properties.html#connection-properties-opensearch).
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/glue"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/secretsmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := secretsmanager.NewSecret(ctx, "example", &secretsmanager.SecretArgs{
//				Name: pulumi.String("example-secret"),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"opensearch.net.http.auth.user": "exampleusername",
//				"opensearch.net.http.auth.pass": "examplepassword",
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = secretsmanager.NewSecretVersion(ctx, "example", &secretsmanager.SecretVersionArgs{
//				SecretId:     example.ID(),
//				SecretString: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = glue.NewConnection(ctx, "example", &glue.ConnectionArgs{
//				Name:           pulumi.String("example"),
//				ConnectionType: pulumi.String("OPENSEARCH"),
//				ConnectionProperties: pulumi.StringMap{
//					"SparkProperties": example.Name.ApplyT(func(name string) (pulumi.String, error) {
//						var _zero pulumi.String
//						tmpJSON1, err := json.Marshal(map[string]interface{}{
//							"secretId":                     name,
//							"opensearch.nodes":             "https://search-exampledomain-ixlmh4jieahrau3bfebcgp8cnm.us-east-1.es.amazonaws.com",
//							"opensearch.port":              "443",
//							"opensearch.aws.sigv4.region":  "us-east-1",
//							"opensearch.nodes.wan.only":    "true",
//							"opensearch.aws.sigv4.enabled": "true",
//						})
//						if err != nil {
//							return _zero, err
//						}
//						json1 := string(tmpJSON1)
//						return pulumi.String(json1), nil
//					}).(pulumi.StringOutput),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Snowflake Connection
//
// For more information, see the [AWS Documentation](https://docs.aws.amazon.com/glue/latest/dg/connection-properties.html#connection-properties-snowflake).
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/glue"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/secretsmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := secretsmanager.NewSecret(ctx, "example", &secretsmanager.SecretArgs{
//				Name: pulumi.String("example-secret"),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"sfUser":     "exampleusername",
//				"sfPassword": "examplepassword",
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = secretsmanager.NewSecretVersion(ctx, "example", &secretsmanager.SecretVersionArgs{
//				SecretId:     example.ID(),
//				SecretString: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = glue.NewConnection(ctx, "example", &glue.ConnectionArgs{
//				Name:           pulumi.String("example"),
//				ConnectionType: pulumi.String("SNOWFLAKE"),
//				ConnectionProperties: pulumi.StringMap{
//					"SparkProperties": example.Name.ApplyT(func(name string) (pulumi.String, error) {
//						var _zero pulumi.String
//						tmpJSON1, err := json.Marshal(map[string]interface{}{
//							"secretId": name,
//							"sfRole":   "EXAMPLEETLROLE",
//							"sfUrl":    "exampleorg-exampleconnection.snowflakecomputing.com",
//						})
//						if err != nil {
//							return _zero, err
//						}
//						json1 := string(tmpJSON1)
//						return pulumi.String(json1), nil
//					}).(pulumi.StringOutput),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### DynamoDB Connection
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/glue"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := glue.NewConnection(ctx, "test", &glue.ConnectionArgs{
//				Name:           pulumi.String("example"),
//				ConnectionType: pulumi.String("DYNAMODB"),
//				AthenaProperties: pulumi.StringMap{
//					"lambda_function_arn":      pulumi.String("arn:aws:lambda:us-east-1:123456789012:function:athenafederatedcatalog_athena_abcdefgh"),
//					"disable_spill_encryption": pulumi.String("false"),
//					"spill_bucket":             pulumi.String("example-bucket"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Glue Connections using the `CATALOG-ID` (AWS account ID if not custom) and `NAME`. For example:
//
// ```sh
// $ pulumi import aws:glue/connection:Connection MyConnection 123456789012:MyConnection
// ```
type Connection struct {
	pulumi.CustomResourceState

	// ARN of the Glue Connection.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Map of key-value pairs used as connection properties specific to the Athena compute environment.
	AthenaProperties pulumi.StringMapOutput `pulumi:"athenaProperties"`
	// ID of the Data Catalog in which to create the connection. If none is supplied, the AWS account ID is used by default.
	CatalogId pulumi.StringOutput `pulumi:"catalogId"`
	// Map of key-value pairs used as parameters for this connection. For more information, see the [AWS Documentation](https://docs.aws.amazon.com/glue/latest/dg/connection-properties.html).
	//
	// **Note:** Some connection types require the `SparkProperties` property with a JSON document that contains the actual connection properties. For specific examples, refer to Example Usage.
	ConnectionProperties pulumi.StringMapOutput `pulumi:"connectionProperties"`
	// Type of the connection. Valid values: `AZURECOSMOS`, `AZURESQL`, `BIGQUERY`, `CUSTOM`, `DYNAMODB`, `JDBC`, `KAFKA`, `MARKETPLACE`, `MONGODB`, `NETWORK`, `OPENSEARCH`, `SNOWFLAKE`. Defaults to `JDBC`.
	ConnectionType pulumi.StringPtrOutput `pulumi:"connectionType"`
	// Description of the connection.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// List of criteria that can be used in selecting this connection.
	MatchCriterias pulumi.StringArrayOutput `pulumi:"matchCriterias"`
	// Name of the connection.
	//
	// The following arguments are optional:
	Name pulumi.StringOutput `pulumi:"name"`
	// Map of physical connection requirements, such as VPC and SecurityGroup. See `physicalConnectionRequirements` Block for details.
	PhysicalConnectionRequirements ConnectionPhysicalConnectionRequirementsPtrOutput `pulumi:"physicalConnectionRequirements"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewConnection registers a new resource with the given unique name, arguments, and options.
func NewConnection(ctx *pulumi.Context,
	name string, args *ConnectionArgs, opts ...pulumi.ResourceOption) (*Connection, error) {
	if args == nil {
		args = &ConnectionArgs{}
	}

	if args.AthenaProperties != nil {
		args.AthenaProperties = pulumi.ToSecret(args.AthenaProperties).(pulumi.StringMapInput)
	}
	if args.ConnectionProperties != nil {
		args.ConnectionProperties = pulumi.ToSecret(args.ConnectionProperties).(pulumi.StringMapInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"athenaProperties",
		"connectionProperties",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Connection
	err := ctx.RegisterResource("aws:glue/connection:Connection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnection gets an existing Connection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionState, opts ...pulumi.ResourceOption) (*Connection, error) {
	var resource Connection
	err := ctx.ReadResource("aws:glue/connection:Connection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Connection resources.
type connectionState struct {
	// ARN of the Glue Connection.
	Arn *string `pulumi:"arn"`
	// Map of key-value pairs used as connection properties specific to the Athena compute environment.
	AthenaProperties map[string]string `pulumi:"athenaProperties"`
	// ID of the Data Catalog in which to create the connection. If none is supplied, the AWS account ID is used by default.
	CatalogId *string `pulumi:"catalogId"`
	// Map of key-value pairs used as parameters for this connection. For more information, see the [AWS Documentation](https://docs.aws.amazon.com/glue/latest/dg/connection-properties.html).
	//
	// **Note:** Some connection types require the `SparkProperties` property with a JSON document that contains the actual connection properties. For specific examples, refer to Example Usage.
	ConnectionProperties map[string]string `pulumi:"connectionProperties"`
	// Type of the connection. Valid values: `AZURECOSMOS`, `AZURESQL`, `BIGQUERY`, `CUSTOM`, `DYNAMODB`, `JDBC`, `KAFKA`, `MARKETPLACE`, `MONGODB`, `NETWORK`, `OPENSEARCH`, `SNOWFLAKE`. Defaults to `JDBC`.
	ConnectionType *string `pulumi:"connectionType"`
	// Description of the connection.
	Description *string `pulumi:"description"`
	// List of criteria that can be used in selecting this connection.
	MatchCriterias []string `pulumi:"matchCriterias"`
	// Name of the connection.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// Map of physical connection requirements, such as VPC and SecurityGroup. See `physicalConnectionRequirements` Block for details.
	PhysicalConnectionRequirements *ConnectionPhysicalConnectionRequirements `pulumi:"physicalConnectionRequirements"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type ConnectionState struct {
	// ARN of the Glue Connection.
	Arn pulumi.StringPtrInput
	// Map of key-value pairs used as connection properties specific to the Athena compute environment.
	AthenaProperties pulumi.StringMapInput
	// ID of the Data Catalog in which to create the connection. If none is supplied, the AWS account ID is used by default.
	CatalogId pulumi.StringPtrInput
	// Map of key-value pairs used as parameters for this connection. For more information, see the [AWS Documentation](https://docs.aws.amazon.com/glue/latest/dg/connection-properties.html).
	//
	// **Note:** Some connection types require the `SparkProperties` property with a JSON document that contains the actual connection properties. For specific examples, refer to Example Usage.
	ConnectionProperties pulumi.StringMapInput
	// Type of the connection. Valid values: `AZURECOSMOS`, `AZURESQL`, `BIGQUERY`, `CUSTOM`, `DYNAMODB`, `JDBC`, `KAFKA`, `MARKETPLACE`, `MONGODB`, `NETWORK`, `OPENSEARCH`, `SNOWFLAKE`. Defaults to `JDBC`.
	ConnectionType pulumi.StringPtrInput
	// Description of the connection.
	Description pulumi.StringPtrInput
	// List of criteria that can be used in selecting this connection.
	MatchCriterias pulumi.StringArrayInput
	// Name of the connection.
	//
	// The following arguments are optional:
	Name pulumi.StringPtrInput
	// Map of physical connection requirements, such as VPC and SecurityGroup. See `physicalConnectionRequirements` Block for details.
	PhysicalConnectionRequirements ConnectionPhysicalConnectionRequirementsPtrInput
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
}

func (ConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionState)(nil)).Elem()
}

type connectionArgs struct {
	// Map of key-value pairs used as connection properties specific to the Athena compute environment.
	AthenaProperties map[string]string `pulumi:"athenaProperties"`
	// ID of the Data Catalog in which to create the connection. If none is supplied, the AWS account ID is used by default.
	CatalogId *string `pulumi:"catalogId"`
	// Map of key-value pairs used as parameters for this connection. For more information, see the [AWS Documentation](https://docs.aws.amazon.com/glue/latest/dg/connection-properties.html).
	//
	// **Note:** Some connection types require the `SparkProperties` property with a JSON document that contains the actual connection properties. For specific examples, refer to Example Usage.
	ConnectionProperties map[string]string `pulumi:"connectionProperties"`
	// Type of the connection. Valid values: `AZURECOSMOS`, `AZURESQL`, `BIGQUERY`, `CUSTOM`, `DYNAMODB`, `JDBC`, `KAFKA`, `MARKETPLACE`, `MONGODB`, `NETWORK`, `OPENSEARCH`, `SNOWFLAKE`. Defaults to `JDBC`.
	ConnectionType *string `pulumi:"connectionType"`
	// Description of the connection.
	Description *string `pulumi:"description"`
	// List of criteria that can be used in selecting this connection.
	MatchCriterias []string `pulumi:"matchCriterias"`
	// Name of the connection.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// Map of physical connection requirements, such as VPC and SecurityGroup. See `physicalConnectionRequirements` Block for details.
	PhysicalConnectionRequirements *ConnectionPhysicalConnectionRequirements `pulumi:"physicalConnectionRequirements"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Connection resource.
type ConnectionArgs struct {
	// Map of key-value pairs used as connection properties specific to the Athena compute environment.
	AthenaProperties pulumi.StringMapInput
	// ID of the Data Catalog in which to create the connection. If none is supplied, the AWS account ID is used by default.
	CatalogId pulumi.StringPtrInput
	// Map of key-value pairs used as parameters for this connection. For more information, see the [AWS Documentation](https://docs.aws.amazon.com/glue/latest/dg/connection-properties.html).
	//
	// **Note:** Some connection types require the `SparkProperties` property with a JSON document that contains the actual connection properties. For specific examples, refer to Example Usage.
	ConnectionProperties pulumi.StringMapInput
	// Type of the connection. Valid values: `AZURECOSMOS`, `AZURESQL`, `BIGQUERY`, `CUSTOM`, `DYNAMODB`, `JDBC`, `KAFKA`, `MARKETPLACE`, `MONGODB`, `NETWORK`, `OPENSEARCH`, `SNOWFLAKE`. Defaults to `JDBC`.
	ConnectionType pulumi.StringPtrInput
	// Description of the connection.
	Description pulumi.StringPtrInput
	// List of criteria that can be used in selecting this connection.
	MatchCriterias pulumi.StringArrayInput
	// Name of the connection.
	//
	// The following arguments are optional:
	Name pulumi.StringPtrInput
	// Map of physical connection requirements, such as VPC and SecurityGroup. See `physicalConnectionRequirements` Block for details.
	PhysicalConnectionRequirements ConnectionPhysicalConnectionRequirementsPtrInput
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
}

func (ConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionArgs)(nil)).Elem()
}

type ConnectionInput interface {
	pulumi.Input

	ToConnectionOutput() ConnectionOutput
	ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput
}

func (*Connection) ElementType() reflect.Type {
	return reflect.TypeOf((**Connection)(nil)).Elem()
}

func (i *Connection) ToConnectionOutput() ConnectionOutput {
	return i.ToConnectionOutputWithContext(context.Background())
}

func (i *Connection) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionOutput)
}

// ConnectionArrayInput is an input type that accepts ConnectionArray and ConnectionArrayOutput values.
// You can construct a concrete instance of `ConnectionArrayInput` via:
//
//	ConnectionArray{ ConnectionArgs{...} }
type ConnectionArrayInput interface {
	pulumi.Input

	ToConnectionArrayOutput() ConnectionArrayOutput
	ToConnectionArrayOutputWithContext(context.Context) ConnectionArrayOutput
}

type ConnectionArray []ConnectionInput

func (ConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Connection)(nil)).Elem()
}

func (i ConnectionArray) ToConnectionArrayOutput() ConnectionArrayOutput {
	return i.ToConnectionArrayOutputWithContext(context.Background())
}

func (i ConnectionArray) ToConnectionArrayOutputWithContext(ctx context.Context) ConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionArrayOutput)
}

// ConnectionMapInput is an input type that accepts ConnectionMap and ConnectionMapOutput values.
// You can construct a concrete instance of `ConnectionMapInput` via:
//
//	ConnectionMap{ "key": ConnectionArgs{...} }
type ConnectionMapInput interface {
	pulumi.Input

	ToConnectionMapOutput() ConnectionMapOutput
	ToConnectionMapOutputWithContext(context.Context) ConnectionMapOutput
}

type ConnectionMap map[string]ConnectionInput

func (ConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Connection)(nil)).Elem()
}

func (i ConnectionMap) ToConnectionMapOutput() ConnectionMapOutput {
	return i.ToConnectionMapOutputWithContext(context.Background())
}

func (i ConnectionMap) ToConnectionMapOutputWithContext(ctx context.Context) ConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionMapOutput)
}

type ConnectionOutput struct{ *pulumi.OutputState }

func (ConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Connection)(nil)).Elem()
}

func (o ConnectionOutput) ToConnectionOutput() ConnectionOutput {
	return o
}

func (o ConnectionOutput) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return o
}

// ARN of the Glue Connection.
func (o ConnectionOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Map of key-value pairs used as connection properties specific to the Athena compute environment.
func (o ConnectionOutput) AthenaProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringMapOutput { return v.AthenaProperties }).(pulumi.StringMapOutput)
}

// ID of the Data Catalog in which to create the connection. If none is supplied, the AWS account ID is used by default.
func (o ConnectionOutput) CatalogId() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.CatalogId }).(pulumi.StringOutput)
}

// Map of key-value pairs used as parameters for this connection. For more information, see the [AWS Documentation](https://docs.aws.amazon.com/glue/latest/dg/connection-properties.html).
//
// **Note:** Some connection types require the `SparkProperties` property with a JSON document that contains the actual connection properties. For specific examples, refer to Example Usage.
func (o ConnectionOutput) ConnectionProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringMapOutput { return v.ConnectionProperties }).(pulumi.StringMapOutput)
}

// Type of the connection. Valid values: `AZURECOSMOS`, `AZURESQL`, `BIGQUERY`, `CUSTOM`, `DYNAMODB`, `JDBC`, `KAFKA`, `MARKETPLACE`, `MONGODB`, `NETWORK`, `OPENSEARCH`, `SNOWFLAKE`. Defaults to `JDBC`.
func (o ConnectionOutput) ConnectionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.ConnectionType }).(pulumi.StringPtrOutput)
}

// Description of the connection.
func (o ConnectionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// List of criteria that can be used in selecting this connection.
func (o ConnectionOutput) MatchCriterias() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringArrayOutput { return v.MatchCriterias }).(pulumi.StringArrayOutput)
}

// Name of the connection.
//
// The following arguments are optional:
func (o ConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Map of physical connection requirements, such as VPC and SecurityGroup. See `physicalConnectionRequirements` Block for details.
func (o ConnectionOutput) PhysicalConnectionRequirements() ConnectionPhysicalConnectionRequirementsPtrOutput {
	return o.ApplyT(func(v *Connection) ConnectionPhysicalConnectionRequirementsPtrOutput {
		return v.PhysicalConnectionRequirements
	}).(ConnectionPhysicalConnectionRequirementsPtrOutput)
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ConnectionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o ConnectionOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type ConnectionArrayOutput struct{ *pulumi.OutputState }

func (ConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Connection)(nil)).Elem()
}

func (o ConnectionArrayOutput) ToConnectionArrayOutput() ConnectionArrayOutput {
	return o
}

func (o ConnectionArrayOutput) ToConnectionArrayOutputWithContext(ctx context.Context) ConnectionArrayOutput {
	return o
}

func (o ConnectionArrayOutput) Index(i pulumi.IntInput) ConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Connection {
		return vs[0].([]*Connection)[vs[1].(int)]
	}).(ConnectionOutput)
}

type ConnectionMapOutput struct{ *pulumi.OutputState }

func (ConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Connection)(nil)).Elem()
}

func (o ConnectionMapOutput) ToConnectionMapOutput() ConnectionMapOutput {
	return o
}

func (o ConnectionMapOutput) ToConnectionMapOutputWithContext(ctx context.Context) ConnectionMapOutput {
	return o
}

func (o ConnectionMapOutput) MapIndex(k pulumi.StringInput) ConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Connection {
		return vs[0].(map[string]*Connection)[vs[1].(string)]
	}).(ConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionInput)(nil)).Elem(), &Connection{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionArrayInput)(nil)).Elem(), ConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionMapInput)(nil)).Elem(), ConnectionMap{})
	pulumi.RegisterOutputType(ConnectionOutput{})
	pulumi.RegisterOutputType(ConnectionArrayOutput{})
	pulumi.RegisterOutputType(ConnectionMapOutput{})
}
