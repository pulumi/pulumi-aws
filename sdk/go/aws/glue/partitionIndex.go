// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/glue"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleCatalogDatabase, err := glue.NewCatalogDatabase(ctx, "exampleCatalogDatabase", &glue.CatalogDatabaseArgs{
//				Name: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleCatalogTable, err := glue.NewCatalogTable(ctx, "exampleCatalogTable", &glue.CatalogTableArgs{
//				Name:             pulumi.String("example"),
//				DatabaseName:     exampleCatalogDatabase.Name,
//				Owner:            pulumi.String("my_owner"),
//				Retention:        pulumi.Int(1),
//				TableType:        pulumi.String("VIRTUAL_VIEW"),
//				ViewExpandedText: pulumi.String("view_expanded_text_1"),
//				ViewOriginalText: pulumi.String("view_original_text_1"),
//				StorageDescriptor: &glue.CatalogTableStorageDescriptorArgs{
//					BucketColumns: pulumi.StringArray{
//						pulumi.String("bucket_column_1"),
//					},
//					Compressed:             pulumi.Bool(false),
//					InputFormat:            pulumi.String("SequenceFileInputFormat"),
//					Location:               pulumi.String("my_location"),
//					NumberOfBuckets:        pulumi.Int(1),
//					OutputFormat:           pulumi.String("SequenceFileInputFormat"),
//					StoredAsSubDirectories: pulumi.Bool(false),
//					Parameters: pulumi.StringMap{
//						"param1": pulumi.String("param1_val"),
//					},
//					Columns: glue.CatalogTableStorageDescriptorColumnArray{
//						&glue.CatalogTableStorageDescriptorColumnArgs{
//							Name:    pulumi.String("my_column_1"),
//							Type:    pulumi.String("int"),
//							Comment: pulumi.String("my_column1_comment"),
//						},
//						&glue.CatalogTableStorageDescriptorColumnArgs{
//							Name:    pulumi.String("my_column_2"),
//							Type:    pulumi.String("string"),
//							Comment: pulumi.String("my_column2_comment"),
//						},
//					},
//					SerDeInfo: &glue.CatalogTableStorageDescriptorSerDeInfoArgs{
//						Name: pulumi.String("ser_de_name"),
//						Parameters: pulumi.StringMap{
//							"param1": pulumi.String("param_val_1"),
//						},
//						SerializationLibrary: pulumi.String("org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe"),
//					},
//					SortColumns: glue.CatalogTableStorageDescriptorSortColumnArray{
//						&glue.CatalogTableStorageDescriptorSortColumnArgs{
//							Column:    pulumi.String("my_column_1"),
//							SortOrder: pulumi.Int(1),
//						},
//					},
//					SkewedInfo: &glue.CatalogTableStorageDescriptorSkewedInfoArgs{
//						SkewedColumnNames: pulumi.StringArray{
//							pulumi.String("my_column_1"),
//						},
//						SkewedColumnValueLocationMaps: pulumi.StringMap{
//							"my_column_1": pulumi.String("my_column_1_val_loc_map"),
//						},
//						SkewedColumnValues: pulumi.StringArray{
//							pulumi.String("skewed_val_1"),
//						},
//					},
//				},
//				PartitionKeys: glue.CatalogTablePartitionKeyArray{
//					&glue.CatalogTablePartitionKeyArgs{
//						Name:    pulumi.String("my_column_1"),
//						Type:    pulumi.String("int"),
//						Comment: pulumi.String("my_column_1_comment"),
//					},
//					&glue.CatalogTablePartitionKeyArgs{
//						Name:    pulumi.String("my_column_2"),
//						Type:    pulumi.String("string"),
//						Comment: pulumi.String("my_column_2_comment"),
//					},
//				},
//				Parameters: pulumi.StringMap{
//					"param1": pulumi.String("param1_val"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = glue.NewPartitionIndex(ctx, "examplePartitionIndex", &glue.PartitionIndexArgs{
//				DatabaseName: exampleCatalogDatabase.Name,
//				TableName:    exampleCatalogTable.Name,
//				PartitionIndex: &glue.PartitionIndexPartitionIndexArgs{
//					IndexName: pulumi.String("example"),
//					Keys: pulumi.StringArray{
//						pulumi.String("my_column_1"),
//						pulumi.String("my_column_2"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Glue Partition Indexes using the catalog ID (usually AWS account ID), database name, table name, and index name. For example:
//
// ```sh
//
//	$ pulumi import aws:glue/partitionIndex:PartitionIndex example 123456789012:MyDatabase:MyTable:index-name
//
// ```
type PartitionIndex struct {
	pulumi.CustomResourceState

	// The catalog ID where the table resides.
	CatalogId pulumi.StringOutput `pulumi:"catalogId"`
	// Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.
	DatabaseName pulumi.StringOutput `pulumi:"databaseName"`
	// Configuration block for a partition index. See `partitionIndex` below.
	PartitionIndex PartitionIndexPartitionIndexOutput `pulumi:"partitionIndex"`
	// Name of the table. For Hive compatibility, this must be entirely lowercase.
	TableName pulumi.StringOutput `pulumi:"tableName"`
}

// NewPartitionIndex registers a new resource with the given unique name, arguments, and options.
func NewPartitionIndex(ctx *pulumi.Context,
	name string, args *PartitionIndexArgs, opts ...pulumi.ResourceOption) (*PartitionIndex, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.PartitionIndex == nil {
		return nil, errors.New("invalid value for required argument 'PartitionIndex'")
	}
	if args.TableName == nil {
		return nil, errors.New("invalid value for required argument 'TableName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PartitionIndex
	err := ctx.RegisterResource("aws:glue/partitionIndex:PartitionIndex", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPartitionIndex gets an existing PartitionIndex resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPartitionIndex(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PartitionIndexState, opts ...pulumi.ResourceOption) (*PartitionIndex, error) {
	var resource PartitionIndex
	err := ctx.ReadResource("aws:glue/partitionIndex:PartitionIndex", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PartitionIndex resources.
type partitionIndexState struct {
	// The catalog ID where the table resides.
	CatalogId *string `pulumi:"catalogId"`
	// Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.
	DatabaseName *string `pulumi:"databaseName"`
	// Configuration block for a partition index. See `partitionIndex` below.
	PartitionIndex *PartitionIndexPartitionIndex `pulumi:"partitionIndex"`
	// Name of the table. For Hive compatibility, this must be entirely lowercase.
	TableName *string `pulumi:"tableName"`
}

type PartitionIndexState struct {
	// The catalog ID where the table resides.
	CatalogId pulumi.StringPtrInput
	// Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.
	DatabaseName pulumi.StringPtrInput
	// Configuration block for a partition index. See `partitionIndex` below.
	PartitionIndex PartitionIndexPartitionIndexPtrInput
	// Name of the table. For Hive compatibility, this must be entirely lowercase.
	TableName pulumi.StringPtrInput
}

func (PartitionIndexState) ElementType() reflect.Type {
	return reflect.TypeOf((*partitionIndexState)(nil)).Elem()
}

type partitionIndexArgs struct {
	// The catalog ID where the table resides.
	CatalogId *string `pulumi:"catalogId"`
	// Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.
	DatabaseName string `pulumi:"databaseName"`
	// Configuration block for a partition index. See `partitionIndex` below.
	PartitionIndex PartitionIndexPartitionIndex `pulumi:"partitionIndex"`
	// Name of the table. For Hive compatibility, this must be entirely lowercase.
	TableName string `pulumi:"tableName"`
}

// The set of arguments for constructing a PartitionIndex resource.
type PartitionIndexArgs struct {
	// The catalog ID where the table resides.
	CatalogId pulumi.StringPtrInput
	// Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.
	DatabaseName pulumi.StringInput
	// Configuration block for a partition index. See `partitionIndex` below.
	PartitionIndex PartitionIndexPartitionIndexInput
	// Name of the table. For Hive compatibility, this must be entirely lowercase.
	TableName pulumi.StringInput
}

func (PartitionIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*partitionIndexArgs)(nil)).Elem()
}

type PartitionIndexInput interface {
	pulumi.Input

	ToPartitionIndexOutput() PartitionIndexOutput
	ToPartitionIndexOutputWithContext(ctx context.Context) PartitionIndexOutput
}

func (*PartitionIndex) ElementType() reflect.Type {
	return reflect.TypeOf((**PartitionIndex)(nil)).Elem()
}

func (i *PartitionIndex) ToPartitionIndexOutput() PartitionIndexOutput {
	return i.ToPartitionIndexOutputWithContext(context.Background())
}

func (i *PartitionIndex) ToPartitionIndexOutputWithContext(ctx context.Context) PartitionIndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionIndexOutput)
}

// PartitionIndexArrayInput is an input type that accepts PartitionIndexArray and PartitionIndexArrayOutput values.
// You can construct a concrete instance of `PartitionIndexArrayInput` via:
//
//	PartitionIndexArray{ PartitionIndexArgs{...} }
type PartitionIndexArrayInput interface {
	pulumi.Input

	ToPartitionIndexArrayOutput() PartitionIndexArrayOutput
	ToPartitionIndexArrayOutputWithContext(context.Context) PartitionIndexArrayOutput
}

type PartitionIndexArray []PartitionIndexInput

func (PartitionIndexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PartitionIndex)(nil)).Elem()
}

func (i PartitionIndexArray) ToPartitionIndexArrayOutput() PartitionIndexArrayOutput {
	return i.ToPartitionIndexArrayOutputWithContext(context.Background())
}

func (i PartitionIndexArray) ToPartitionIndexArrayOutputWithContext(ctx context.Context) PartitionIndexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionIndexArrayOutput)
}

// PartitionIndexMapInput is an input type that accepts PartitionIndexMap and PartitionIndexMapOutput values.
// You can construct a concrete instance of `PartitionIndexMapInput` via:
//
//	PartitionIndexMap{ "key": PartitionIndexArgs{...} }
type PartitionIndexMapInput interface {
	pulumi.Input

	ToPartitionIndexMapOutput() PartitionIndexMapOutput
	ToPartitionIndexMapOutputWithContext(context.Context) PartitionIndexMapOutput
}

type PartitionIndexMap map[string]PartitionIndexInput

func (PartitionIndexMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PartitionIndex)(nil)).Elem()
}

func (i PartitionIndexMap) ToPartitionIndexMapOutput() PartitionIndexMapOutput {
	return i.ToPartitionIndexMapOutputWithContext(context.Background())
}

func (i PartitionIndexMap) ToPartitionIndexMapOutputWithContext(ctx context.Context) PartitionIndexMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionIndexMapOutput)
}

type PartitionIndexOutput struct{ *pulumi.OutputState }

func (PartitionIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartitionIndex)(nil)).Elem()
}

func (o PartitionIndexOutput) ToPartitionIndexOutput() PartitionIndexOutput {
	return o
}

func (o PartitionIndexOutput) ToPartitionIndexOutputWithContext(ctx context.Context) PartitionIndexOutput {
	return o
}

// The catalog ID where the table resides.
func (o PartitionIndexOutput) CatalogId() pulumi.StringOutput {
	return o.ApplyT(func(v *PartitionIndex) pulumi.StringOutput { return v.CatalogId }).(pulumi.StringOutput)
}

// Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.
func (o PartitionIndexOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *PartitionIndex) pulumi.StringOutput { return v.DatabaseName }).(pulumi.StringOutput)
}

// Configuration block for a partition index. See `partitionIndex` below.
func (o PartitionIndexOutput) PartitionIndex() PartitionIndexPartitionIndexOutput {
	return o.ApplyT(func(v *PartitionIndex) PartitionIndexPartitionIndexOutput { return v.PartitionIndex }).(PartitionIndexPartitionIndexOutput)
}

// Name of the table. For Hive compatibility, this must be entirely lowercase.
func (o PartitionIndexOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v *PartitionIndex) pulumi.StringOutput { return v.TableName }).(pulumi.StringOutput)
}

type PartitionIndexArrayOutput struct{ *pulumi.OutputState }

func (PartitionIndexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PartitionIndex)(nil)).Elem()
}

func (o PartitionIndexArrayOutput) ToPartitionIndexArrayOutput() PartitionIndexArrayOutput {
	return o
}

func (o PartitionIndexArrayOutput) ToPartitionIndexArrayOutputWithContext(ctx context.Context) PartitionIndexArrayOutput {
	return o
}

func (o PartitionIndexArrayOutput) Index(i pulumi.IntInput) PartitionIndexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PartitionIndex {
		return vs[0].([]*PartitionIndex)[vs[1].(int)]
	}).(PartitionIndexOutput)
}

type PartitionIndexMapOutput struct{ *pulumi.OutputState }

func (PartitionIndexMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PartitionIndex)(nil)).Elem()
}

func (o PartitionIndexMapOutput) ToPartitionIndexMapOutput() PartitionIndexMapOutput {
	return o
}

func (o PartitionIndexMapOutput) ToPartitionIndexMapOutputWithContext(ctx context.Context) PartitionIndexMapOutput {
	return o
}

func (o PartitionIndexMapOutput) MapIndex(k pulumi.StringInput) PartitionIndexOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PartitionIndex {
		return vs[0].(map[string]*PartitionIndex)[vs[1].(string)]
	}).(PartitionIndexOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PartitionIndexInput)(nil)).Elem(), &PartitionIndex{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartitionIndexArrayInput)(nil)).Elem(), PartitionIndexArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartitionIndexMapInput)(nil)).Elem(), PartitionIndexMap{})
	pulumi.RegisterOutputType(PartitionIndexOutput{})
	pulumi.RegisterOutputType(PartitionIndexArrayOutput{})
	pulumi.RegisterOutputType(PartitionIndexMapOutput{})
}
