// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PartitionIndex struct {
	pulumi.CustomResourceState

	CatalogId      pulumi.StringOutput                `pulumi:"catalogId"`
	DatabaseName   pulumi.StringOutput                `pulumi:"databaseName"`
	PartitionIndex PartitionIndexPartitionIndexOutput `pulumi:"partitionIndex"`
	TableName      pulumi.StringOutput                `pulumi:"tableName"`
}

// NewPartitionIndex registers a new resource with the given unique name, arguments, and options.
func NewPartitionIndex(ctx *pulumi.Context,
	name string, args *PartitionIndexArgs, opts ...pulumi.ResourceOption) (*PartitionIndex, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.PartitionIndex == nil {
		return nil, errors.New("invalid value for required argument 'PartitionIndex'")
	}
	if args.TableName == nil {
		return nil, errors.New("invalid value for required argument 'TableName'")
	}
	var resource PartitionIndex
	err := ctx.RegisterResource("aws:glue/partitionIndex:PartitionIndex", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPartitionIndex gets an existing PartitionIndex resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPartitionIndex(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PartitionIndexState, opts ...pulumi.ResourceOption) (*PartitionIndex, error) {
	var resource PartitionIndex
	err := ctx.ReadResource("aws:glue/partitionIndex:PartitionIndex", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PartitionIndex resources.
type partitionIndexState struct {
	CatalogId      *string                       `pulumi:"catalogId"`
	DatabaseName   *string                       `pulumi:"databaseName"`
	PartitionIndex *PartitionIndexPartitionIndex `pulumi:"partitionIndex"`
	TableName      *string                       `pulumi:"tableName"`
}

type PartitionIndexState struct {
	CatalogId      pulumi.StringPtrInput
	DatabaseName   pulumi.StringPtrInput
	PartitionIndex PartitionIndexPartitionIndexPtrInput
	TableName      pulumi.StringPtrInput
}

func (PartitionIndexState) ElementType() reflect.Type {
	return reflect.TypeOf((*partitionIndexState)(nil)).Elem()
}

type partitionIndexArgs struct {
	CatalogId      *string                      `pulumi:"catalogId"`
	DatabaseName   string                       `pulumi:"databaseName"`
	PartitionIndex PartitionIndexPartitionIndex `pulumi:"partitionIndex"`
	TableName      string                       `pulumi:"tableName"`
}

// The set of arguments for constructing a PartitionIndex resource.
type PartitionIndexArgs struct {
	CatalogId      pulumi.StringPtrInput
	DatabaseName   pulumi.StringInput
	PartitionIndex PartitionIndexPartitionIndexInput
	TableName      pulumi.StringInput
}

func (PartitionIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*partitionIndexArgs)(nil)).Elem()
}

type PartitionIndexInput interface {
	pulumi.Input

	ToPartitionIndexOutput() PartitionIndexOutput
	ToPartitionIndexOutputWithContext(ctx context.Context) PartitionIndexOutput
}

func (*PartitionIndex) ElementType() reflect.Type {
	return reflect.TypeOf((**PartitionIndex)(nil)).Elem()
}

func (i *PartitionIndex) ToPartitionIndexOutput() PartitionIndexOutput {
	return i.ToPartitionIndexOutputWithContext(context.Background())
}

func (i *PartitionIndex) ToPartitionIndexOutputWithContext(ctx context.Context) PartitionIndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionIndexOutput)
}

// PartitionIndexArrayInput is an input type that accepts PartitionIndexArray and PartitionIndexArrayOutput values.
// You can construct a concrete instance of `PartitionIndexArrayInput` via:
//
//	PartitionIndexArray{ PartitionIndexArgs{...} }
type PartitionIndexArrayInput interface {
	pulumi.Input

	ToPartitionIndexArrayOutput() PartitionIndexArrayOutput
	ToPartitionIndexArrayOutputWithContext(context.Context) PartitionIndexArrayOutput
}

type PartitionIndexArray []PartitionIndexInput

func (PartitionIndexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PartitionIndex)(nil)).Elem()
}

func (i PartitionIndexArray) ToPartitionIndexArrayOutput() PartitionIndexArrayOutput {
	return i.ToPartitionIndexArrayOutputWithContext(context.Background())
}

func (i PartitionIndexArray) ToPartitionIndexArrayOutputWithContext(ctx context.Context) PartitionIndexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionIndexArrayOutput)
}

// PartitionIndexMapInput is an input type that accepts PartitionIndexMap and PartitionIndexMapOutput values.
// You can construct a concrete instance of `PartitionIndexMapInput` via:
//
//	PartitionIndexMap{ "key": PartitionIndexArgs{...} }
type PartitionIndexMapInput interface {
	pulumi.Input

	ToPartitionIndexMapOutput() PartitionIndexMapOutput
	ToPartitionIndexMapOutputWithContext(context.Context) PartitionIndexMapOutput
}

type PartitionIndexMap map[string]PartitionIndexInput

func (PartitionIndexMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PartitionIndex)(nil)).Elem()
}

func (i PartitionIndexMap) ToPartitionIndexMapOutput() PartitionIndexMapOutput {
	return i.ToPartitionIndexMapOutputWithContext(context.Background())
}

func (i PartitionIndexMap) ToPartitionIndexMapOutputWithContext(ctx context.Context) PartitionIndexMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionIndexMapOutput)
}

type PartitionIndexOutput struct{ *pulumi.OutputState }

func (PartitionIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartitionIndex)(nil)).Elem()
}

func (o PartitionIndexOutput) ToPartitionIndexOutput() PartitionIndexOutput {
	return o
}

func (o PartitionIndexOutput) ToPartitionIndexOutputWithContext(ctx context.Context) PartitionIndexOutput {
	return o
}

func (o PartitionIndexOutput) CatalogId() pulumi.StringOutput {
	return o.ApplyT(func(v *PartitionIndex) pulumi.StringOutput { return v.CatalogId }).(pulumi.StringOutput)
}

func (o PartitionIndexOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *PartitionIndex) pulumi.StringOutput { return v.DatabaseName }).(pulumi.StringOutput)
}

func (o PartitionIndexOutput) PartitionIndex() PartitionIndexPartitionIndexOutput {
	return o.ApplyT(func(v *PartitionIndex) PartitionIndexPartitionIndexOutput { return v.PartitionIndex }).(PartitionIndexPartitionIndexOutput)
}

func (o PartitionIndexOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v *PartitionIndex) pulumi.StringOutput { return v.TableName }).(pulumi.StringOutput)
}

type PartitionIndexArrayOutput struct{ *pulumi.OutputState }

func (PartitionIndexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PartitionIndex)(nil)).Elem()
}

func (o PartitionIndexArrayOutput) ToPartitionIndexArrayOutput() PartitionIndexArrayOutput {
	return o
}

func (o PartitionIndexArrayOutput) ToPartitionIndexArrayOutputWithContext(ctx context.Context) PartitionIndexArrayOutput {
	return o
}

func (o PartitionIndexArrayOutput) Index(i pulumi.IntInput) PartitionIndexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PartitionIndex {
		return vs[0].([]*PartitionIndex)[vs[1].(int)]
	}).(PartitionIndexOutput)
}

type PartitionIndexMapOutput struct{ *pulumi.OutputState }

func (PartitionIndexMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PartitionIndex)(nil)).Elem()
}

func (o PartitionIndexMapOutput) ToPartitionIndexMapOutput() PartitionIndexMapOutput {
	return o
}

func (o PartitionIndexMapOutput) ToPartitionIndexMapOutputWithContext(ctx context.Context) PartitionIndexMapOutput {
	return o
}

func (o PartitionIndexMapOutput) MapIndex(k pulumi.StringInput) PartitionIndexOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PartitionIndex {
		return vs[0].(map[string]*PartitionIndex)[vs[1].(string)]
	}).(PartitionIndexOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PartitionIndexInput)(nil)).Elem(), &PartitionIndex{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartitionIndexArrayInput)(nil)).Elem(), PartitionIndexArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartitionIndexMapInput)(nil)).Elem(), PartitionIndexMap{})
	pulumi.RegisterOutputType(PartitionIndexOutput{})
	pulumi.RegisterOutputType(PartitionIndexArrayOutput{})
	pulumi.RegisterOutputType(PartitionIndexMapOutput{})
}
