// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type UserDefinedFunction struct {
	pulumi.CustomResourceState

	Arn          pulumi.StringOutput                       `pulumi:"arn"`
	CatalogId    pulumi.StringPtrOutput                    `pulumi:"catalogId"`
	ClassName    pulumi.StringOutput                       `pulumi:"className"`
	CreateTime   pulumi.StringOutput                       `pulumi:"createTime"`
	DatabaseName pulumi.StringOutput                       `pulumi:"databaseName"`
	Name         pulumi.StringOutput                       `pulumi:"name"`
	OwnerName    pulumi.StringOutput                       `pulumi:"ownerName"`
	OwnerType    pulumi.StringOutput                       `pulumi:"ownerType"`
	ResourceUris UserDefinedFunctionResourceUriArrayOutput `pulumi:"resourceUris"`
}

// NewUserDefinedFunction registers a new resource with the given unique name, arguments, and options.
func NewUserDefinedFunction(ctx *pulumi.Context,
	name string, args *UserDefinedFunctionArgs, opts ...pulumi.ResourceOption) (*UserDefinedFunction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClassName == nil {
		return nil, errors.New("invalid value for required argument 'ClassName'")
	}
	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.OwnerName == nil {
		return nil, errors.New("invalid value for required argument 'OwnerName'")
	}
	if args.OwnerType == nil {
		return nil, errors.New("invalid value for required argument 'OwnerType'")
	}
	var resource UserDefinedFunction
	err := ctx.RegisterResource("aws:glue/userDefinedFunction:UserDefinedFunction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserDefinedFunction gets an existing UserDefinedFunction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserDefinedFunction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserDefinedFunctionState, opts ...pulumi.ResourceOption) (*UserDefinedFunction, error) {
	var resource UserDefinedFunction
	err := ctx.ReadResource("aws:glue/userDefinedFunction:UserDefinedFunction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserDefinedFunction resources.
type userDefinedFunctionState struct {
	Arn          *string                          `pulumi:"arn"`
	CatalogId    *string                          `pulumi:"catalogId"`
	ClassName    *string                          `pulumi:"className"`
	CreateTime   *string                          `pulumi:"createTime"`
	DatabaseName *string                          `pulumi:"databaseName"`
	Name         *string                          `pulumi:"name"`
	OwnerName    *string                          `pulumi:"ownerName"`
	OwnerType    *string                          `pulumi:"ownerType"`
	ResourceUris []UserDefinedFunctionResourceUri `pulumi:"resourceUris"`
}

type UserDefinedFunctionState struct {
	Arn          pulumi.StringPtrInput
	CatalogId    pulumi.StringPtrInput
	ClassName    pulumi.StringPtrInput
	CreateTime   pulumi.StringPtrInput
	DatabaseName pulumi.StringPtrInput
	Name         pulumi.StringPtrInput
	OwnerName    pulumi.StringPtrInput
	OwnerType    pulumi.StringPtrInput
	ResourceUris UserDefinedFunctionResourceUriArrayInput
}

func (UserDefinedFunctionState) ElementType() reflect.Type {
	return reflect.TypeOf((*userDefinedFunctionState)(nil)).Elem()
}

type userDefinedFunctionArgs struct {
	CatalogId    *string                          `pulumi:"catalogId"`
	ClassName    string                           `pulumi:"className"`
	DatabaseName string                           `pulumi:"databaseName"`
	Name         *string                          `pulumi:"name"`
	OwnerName    string                           `pulumi:"ownerName"`
	OwnerType    string                           `pulumi:"ownerType"`
	ResourceUris []UserDefinedFunctionResourceUri `pulumi:"resourceUris"`
}

// The set of arguments for constructing a UserDefinedFunction resource.
type UserDefinedFunctionArgs struct {
	CatalogId    pulumi.StringPtrInput
	ClassName    pulumi.StringInput
	DatabaseName pulumi.StringInput
	Name         pulumi.StringPtrInput
	OwnerName    pulumi.StringInput
	OwnerType    pulumi.StringInput
	ResourceUris UserDefinedFunctionResourceUriArrayInput
}

func (UserDefinedFunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userDefinedFunctionArgs)(nil)).Elem()
}

type UserDefinedFunctionInput interface {
	pulumi.Input

	ToUserDefinedFunctionOutput() UserDefinedFunctionOutput
	ToUserDefinedFunctionOutputWithContext(ctx context.Context) UserDefinedFunctionOutput
}

func (*UserDefinedFunction) ElementType() reflect.Type {
	return reflect.TypeOf((**UserDefinedFunction)(nil)).Elem()
}

func (i *UserDefinedFunction) ToUserDefinedFunctionOutput() UserDefinedFunctionOutput {
	return i.ToUserDefinedFunctionOutputWithContext(context.Background())
}

func (i *UserDefinedFunction) ToUserDefinedFunctionOutputWithContext(ctx context.Context) UserDefinedFunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDefinedFunctionOutput)
}

// UserDefinedFunctionArrayInput is an input type that accepts UserDefinedFunctionArray and UserDefinedFunctionArrayOutput values.
// You can construct a concrete instance of `UserDefinedFunctionArrayInput` via:
//
//	UserDefinedFunctionArray{ UserDefinedFunctionArgs{...} }
type UserDefinedFunctionArrayInput interface {
	pulumi.Input

	ToUserDefinedFunctionArrayOutput() UserDefinedFunctionArrayOutput
	ToUserDefinedFunctionArrayOutputWithContext(context.Context) UserDefinedFunctionArrayOutput
}

type UserDefinedFunctionArray []UserDefinedFunctionInput

func (UserDefinedFunctionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserDefinedFunction)(nil)).Elem()
}

func (i UserDefinedFunctionArray) ToUserDefinedFunctionArrayOutput() UserDefinedFunctionArrayOutput {
	return i.ToUserDefinedFunctionArrayOutputWithContext(context.Background())
}

func (i UserDefinedFunctionArray) ToUserDefinedFunctionArrayOutputWithContext(ctx context.Context) UserDefinedFunctionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDefinedFunctionArrayOutput)
}

// UserDefinedFunctionMapInput is an input type that accepts UserDefinedFunctionMap and UserDefinedFunctionMapOutput values.
// You can construct a concrete instance of `UserDefinedFunctionMapInput` via:
//
//	UserDefinedFunctionMap{ "key": UserDefinedFunctionArgs{...} }
type UserDefinedFunctionMapInput interface {
	pulumi.Input

	ToUserDefinedFunctionMapOutput() UserDefinedFunctionMapOutput
	ToUserDefinedFunctionMapOutputWithContext(context.Context) UserDefinedFunctionMapOutput
}

type UserDefinedFunctionMap map[string]UserDefinedFunctionInput

func (UserDefinedFunctionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserDefinedFunction)(nil)).Elem()
}

func (i UserDefinedFunctionMap) ToUserDefinedFunctionMapOutput() UserDefinedFunctionMapOutput {
	return i.ToUserDefinedFunctionMapOutputWithContext(context.Background())
}

func (i UserDefinedFunctionMap) ToUserDefinedFunctionMapOutputWithContext(ctx context.Context) UserDefinedFunctionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDefinedFunctionMapOutput)
}

type UserDefinedFunctionOutput struct{ *pulumi.OutputState }

func (UserDefinedFunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserDefinedFunction)(nil)).Elem()
}

func (o UserDefinedFunctionOutput) ToUserDefinedFunctionOutput() UserDefinedFunctionOutput {
	return o
}

func (o UserDefinedFunctionOutput) ToUserDefinedFunctionOutputWithContext(ctx context.Context) UserDefinedFunctionOutput {
	return o
}

func (o UserDefinedFunctionOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *UserDefinedFunction) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o UserDefinedFunctionOutput) CatalogId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserDefinedFunction) pulumi.StringPtrOutput { return v.CatalogId }).(pulumi.StringPtrOutput)
}

func (o UserDefinedFunctionOutput) ClassName() pulumi.StringOutput {
	return o.ApplyT(func(v *UserDefinedFunction) pulumi.StringOutput { return v.ClassName }).(pulumi.StringOutput)
}

func (o UserDefinedFunctionOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *UserDefinedFunction) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o UserDefinedFunctionOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *UserDefinedFunction) pulumi.StringOutput { return v.DatabaseName }).(pulumi.StringOutput)
}

func (o UserDefinedFunctionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UserDefinedFunction) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o UserDefinedFunctionOutput) OwnerName() pulumi.StringOutput {
	return o.ApplyT(func(v *UserDefinedFunction) pulumi.StringOutput { return v.OwnerName }).(pulumi.StringOutput)
}

func (o UserDefinedFunctionOutput) OwnerType() pulumi.StringOutput {
	return o.ApplyT(func(v *UserDefinedFunction) pulumi.StringOutput { return v.OwnerType }).(pulumi.StringOutput)
}

func (o UserDefinedFunctionOutput) ResourceUris() UserDefinedFunctionResourceUriArrayOutput {
	return o.ApplyT(func(v *UserDefinedFunction) UserDefinedFunctionResourceUriArrayOutput { return v.ResourceUris }).(UserDefinedFunctionResourceUriArrayOutput)
}

type UserDefinedFunctionArrayOutput struct{ *pulumi.OutputState }

func (UserDefinedFunctionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserDefinedFunction)(nil)).Elem()
}

func (o UserDefinedFunctionArrayOutput) ToUserDefinedFunctionArrayOutput() UserDefinedFunctionArrayOutput {
	return o
}

func (o UserDefinedFunctionArrayOutput) ToUserDefinedFunctionArrayOutputWithContext(ctx context.Context) UserDefinedFunctionArrayOutput {
	return o
}

func (o UserDefinedFunctionArrayOutput) Index(i pulumi.IntInput) UserDefinedFunctionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserDefinedFunction {
		return vs[0].([]*UserDefinedFunction)[vs[1].(int)]
	}).(UserDefinedFunctionOutput)
}

type UserDefinedFunctionMapOutput struct{ *pulumi.OutputState }

func (UserDefinedFunctionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserDefinedFunction)(nil)).Elem()
}

func (o UserDefinedFunctionMapOutput) ToUserDefinedFunctionMapOutput() UserDefinedFunctionMapOutput {
	return o
}

func (o UserDefinedFunctionMapOutput) ToUserDefinedFunctionMapOutputWithContext(ctx context.Context) UserDefinedFunctionMapOutput {
	return o
}

func (o UserDefinedFunctionMapOutput) MapIndex(k pulumi.StringInput) UserDefinedFunctionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserDefinedFunction {
		return vs[0].(map[string]*UserDefinedFunction)[vs[1].(string)]
	}).(UserDefinedFunctionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserDefinedFunctionInput)(nil)).Elem(), &UserDefinedFunction{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserDefinedFunctionArrayInput)(nil)).Elem(), UserDefinedFunctionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserDefinedFunctionMapInput)(nil)).Elem(), UserDefinedFunctionMap{})
	pulumi.RegisterOutputType(UserDefinedFunctionOutput{})
	pulumi.RegisterOutputType(UserDefinedFunctionArrayOutput{})
	pulumi.RegisterOutputType(UserDefinedFunctionMapOutput{})
}
