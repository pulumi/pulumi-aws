// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Trigger struct {
	pulumi.CustomResourceState

	Actions                 TriggerActionArrayOutput                 `pulumi:"actions"`
	Arn                     pulumi.StringOutput                      `pulumi:"arn"`
	Description             pulumi.StringPtrOutput                   `pulumi:"description"`
	Enabled                 pulumi.BoolPtrOutput                     `pulumi:"enabled"`
	EventBatchingConditions TriggerEventBatchingConditionArrayOutput `pulumi:"eventBatchingConditions"`
	Name                    pulumi.StringOutput                      `pulumi:"name"`
	Predicate               TriggerPredicatePtrOutput                `pulumi:"predicate"`
	Schedule                pulumi.StringPtrOutput                   `pulumi:"schedule"`
	StartOnCreation         pulumi.BoolPtrOutput                     `pulumi:"startOnCreation"`
	State                   pulumi.StringOutput                      `pulumi:"state"`
	Tags                    pulumi.StringMapOutput                   `pulumi:"tags"`
	TagsAll                 pulumi.StringMapOutput                   `pulumi:"tagsAll"`
	Type                    pulumi.StringOutput                      `pulumi:"type"`
	WorkflowName            pulumi.StringPtrOutput                   `pulumi:"workflowName"`
}

// NewTrigger registers a new resource with the given unique name, arguments, and options.
func NewTrigger(ctx *pulumi.Context,
	name string, args *TriggerArgs, opts ...pulumi.ResourceOption) (*Trigger, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Actions == nil {
		return nil, errors.New("invalid value for required argument 'Actions'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource Trigger
	err := ctx.RegisterResource("aws:glue/trigger:Trigger", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrigger gets an existing Trigger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrigger(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TriggerState, opts ...pulumi.ResourceOption) (*Trigger, error) {
	var resource Trigger
	err := ctx.ReadResource("aws:glue/trigger:Trigger", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Trigger resources.
type triggerState struct {
	Actions                 []TriggerAction                 `pulumi:"actions"`
	Arn                     *string                         `pulumi:"arn"`
	Description             *string                         `pulumi:"description"`
	Enabled                 *bool                           `pulumi:"enabled"`
	EventBatchingConditions []TriggerEventBatchingCondition `pulumi:"eventBatchingConditions"`
	Name                    *string                         `pulumi:"name"`
	Predicate               *TriggerPredicate               `pulumi:"predicate"`
	Schedule                *string                         `pulumi:"schedule"`
	StartOnCreation         *bool                           `pulumi:"startOnCreation"`
	State                   *string                         `pulumi:"state"`
	Tags                    map[string]string               `pulumi:"tags"`
	TagsAll                 map[string]string               `pulumi:"tagsAll"`
	Type                    *string                         `pulumi:"type"`
	WorkflowName            *string                         `pulumi:"workflowName"`
}

type TriggerState struct {
	Actions                 TriggerActionArrayInput
	Arn                     pulumi.StringPtrInput
	Description             pulumi.StringPtrInput
	Enabled                 pulumi.BoolPtrInput
	EventBatchingConditions TriggerEventBatchingConditionArrayInput
	Name                    pulumi.StringPtrInput
	Predicate               TriggerPredicatePtrInput
	Schedule                pulumi.StringPtrInput
	StartOnCreation         pulumi.BoolPtrInput
	State                   pulumi.StringPtrInput
	Tags                    pulumi.StringMapInput
	TagsAll                 pulumi.StringMapInput
	Type                    pulumi.StringPtrInput
	WorkflowName            pulumi.StringPtrInput
}

func (TriggerState) ElementType() reflect.Type {
	return reflect.TypeOf((*triggerState)(nil)).Elem()
}

type triggerArgs struct {
	Actions                 []TriggerAction                 `pulumi:"actions"`
	Description             *string                         `pulumi:"description"`
	Enabled                 *bool                           `pulumi:"enabled"`
	EventBatchingConditions []TriggerEventBatchingCondition `pulumi:"eventBatchingConditions"`
	Name                    *string                         `pulumi:"name"`
	Predicate               *TriggerPredicate               `pulumi:"predicate"`
	Schedule                *string                         `pulumi:"schedule"`
	StartOnCreation         *bool                           `pulumi:"startOnCreation"`
	Tags                    map[string]string               `pulumi:"tags"`
	Type                    string                          `pulumi:"type"`
	WorkflowName            *string                         `pulumi:"workflowName"`
}

// The set of arguments for constructing a Trigger resource.
type TriggerArgs struct {
	Actions                 TriggerActionArrayInput
	Description             pulumi.StringPtrInput
	Enabled                 pulumi.BoolPtrInput
	EventBatchingConditions TriggerEventBatchingConditionArrayInput
	Name                    pulumi.StringPtrInput
	Predicate               TriggerPredicatePtrInput
	Schedule                pulumi.StringPtrInput
	StartOnCreation         pulumi.BoolPtrInput
	Tags                    pulumi.StringMapInput
	Type                    pulumi.StringInput
	WorkflowName            pulumi.StringPtrInput
}

func (TriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*triggerArgs)(nil)).Elem()
}

type TriggerInput interface {
	pulumi.Input

	ToTriggerOutput() TriggerOutput
	ToTriggerOutputWithContext(ctx context.Context) TriggerOutput
}

func (*Trigger) ElementType() reflect.Type {
	return reflect.TypeOf((**Trigger)(nil)).Elem()
}

func (i *Trigger) ToTriggerOutput() TriggerOutput {
	return i.ToTriggerOutputWithContext(context.Background())
}

func (i *Trigger) ToTriggerOutputWithContext(ctx context.Context) TriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerOutput)
}

// TriggerArrayInput is an input type that accepts TriggerArray and TriggerArrayOutput values.
// You can construct a concrete instance of `TriggerArrayInput` via:
//
//	TriggerArray{ TriggerArgs{...} }
type TriggerArrayInput interface {
	pulumi.Input

	ToTriggerArrayOutput() TriggerArrayOutput
	ToTriggerArrayOutputWithContext(context.Context) TriggerArrayOutput
}

type TriggerArray []TriggerInput

func (TriggerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Trigger)(nil)).Elem()
}

func (i TriggerArray) ToTriggerArrayOutput() TriggerArrayOutput {
	return i.ToTriggerArrayOutputWithContext(context.Background())
}

func (i TriggerArray) ToTriggerArrayOutputWithContext(ctx context.Context) TriggerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerArrayOutput)
}

// TriggerMapInput is an input type that accepts TriggerMap and TriggerMapOutput values.
// You can construct a concrete instance of `TriggerMapInput` via:
//
//	TriggerMap{ "key": TriggerArgs{...} }
type TriggerMapInput interface {
	pulumi.Input

	ToTriggerMapOutput() TriggerMapOutput
	ToTriggerMapOutputWithContext(context.Context) TriggerMapOutput
}

type TriggerMap map[string]TriggerInput

func (TriggerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Trigger)(nil)).Elem()
}

func (i TriggerMap) ToTriggerMapOutput() TriggerMapOutput {
	return i.ToTriggerMapOutputWithContext(context.Background())
}

func (i TriggerMap) ToTriggerMapOutputWithContext(ctx context.Context) TriggerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerMapOutput)
}

type TriggerOutput struct{ *pulumi.OutputState }

func (TriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Trigger)(nil)).Elem()
}

func (o TriggerOutput) ToTriggerOutput() TriggerOutput {
	return o
}

func (o TriggerOutput) ToTriggerOutputWithContext(ctx context.Context) TriggerOutput {
	return o
}

func (o TriggerOutput) Actions() TriggerActionArrayOutput {
	return o.ApplyT(func(v *Trigger) TriggerActionArrayOutput { return v.Actions }).(TriggerActionArrayOutput)
}

func (o TriggerOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o TriggerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o TriggerOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Trigger) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o TriggerOutput) EventBatchingConditions() TriggerEventBatchingConditionArrayOutput {
	return o.ApplyT(func(v *Trigger) TriggerEventBatchingConditionArrayOutput { return v.EventBatchingConditions }).(TriggerEventBatchingConditionArrayOutput)
}

func (o TriggerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o TriggerOutput) Predicate() TriggerPredicatePtrOutput {
	return o.ApplyT(func(v *Trigger) TriggerPredicatePtrOutput { return v.Predicate }).(TriggerPredicatePtrOutput)
}

func (o TriggerOutput) Schedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringPtrOutput { return v.Schedule }).(pulumi.StringPtrOutput)
}

func (o TriggerOutput) StartOnCreation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Trigger) pulumi.BoolPtrOutput { return v.StartOnCreation }).(pulumi.BoolPtrOutput)
}

func (o TriggerOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o TriggerOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o TriggerOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o TriggerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o TriggerOutput) WorkflowName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringPtrOutput { return v.WorkflowName }).(pulumi.StringPtrOutput)
}

type TriggerArrayOutput struct{ *pulumi.OutputState }

func (TriggerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Trigger)(nil)).Elem()
}

func (o TriggerArrayOutput) ToTriggerArrayOutput() TriggerArrayOutput {
	return o
}

func (o TriggerArrayOutput) ToTriggerArrayOutputWithContext(ctx context.Context) TriggerArrayOutput {
	return o
}

func (o TriggerArrayOutput) Index(i pulumi.IntInput) TriggerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Trigger {
		return vs[0].([]*Trigger)[vs[1].(int)]
	}).(TriggerOutput)
}

type TriggerMapOutput struct{ *pulumi.OutputState }

func (TriggerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Trigger)(nil)).Elem()
}

func (o TriggerMapOutput) ToTriggerMapOutput() TriggerMapOutput {
	return o
}

func (o TriggerMapOutput) ToTriggerMapOutputWithContext(ctx context.Context) TriggerMapOutput {
	return o
}

func (o TriggerMapOutput) MapIndex(k pulumi.StringInput) TriggerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Trigger {
		return vs[0].(map[string]*Trigger)[vs[1].(string)]
	}).(TriggerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerInput)(nil)).Elem(), &Trigger{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerArrayInput)(nil)).Elem(), TriggerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerMapInput)(nil)).Elem(), TriggerMap{})
	pulumi.RegisterOutputType(TriggerOutput{})
	pulumi.RegisterOutputType(TriggerArrayOutput{})
	pulumi.RegisterOutputType(TriggerMapOutput{})
}
