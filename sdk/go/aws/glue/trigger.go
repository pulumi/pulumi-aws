// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Glue Trigger resource.
type Trigger struct {
	s *pulumi.ResourceState
}

// NewTrigger registers a new resource with the given unique name, arguments, and options.
func NewTrigger(ctx *pulumi.Context,
	name string, args *TriggerArgs, opts ...pulumi.ResourceOpt) (*Trigger, error) {
	if args == nil || args.Actions == nil {
		return nil, errors.New("missing required argument 'Actions'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["actions"] = nil
		inputs["description"] = nil
		inputs["enabled"] = nil
		inputs["name"] = nil
		inputs["predicate"] = nil
		inputs["schedule"] = nil
		inputs["type"] = nil
	} else {
		inputs["actions"] = args.Actions
		inputs["description"] = args.Description
		inputs["enabled"] = args.Enabled
		inputs["name"] = args.Name
		inputs["predicate"] = args.Predicate
		inputs["schedule"] = args.Schedule
		inputs["type"] = args.Type
	}
	s, err := ctx.RegisterResource("aws:glue/trigger:Trigger", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Trigger{s: s}, nil
}

// GetTrigger gets an existing Trigger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrigger(ctx *pulumi.Context,
	name string, id pulumi.ID, state *TriggerState, opts ...pulumi.ResourceOpt) (*Trigger, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["actions"] = state.Actions
		inputs["description"] = state.Description
		inputs["enabled"] = state.Enabled
		inputs["name"] = state.Name
		inputs["predicate"] = state.Predicate
		inputs["schedule"] = state.Schedule
		inputs["type"] = state.Type
	}
	s, err := ctx.ReadResource("aws:glue/trigger:Trigger", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Trigger{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Trigger) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Trigger) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// List of actions initiated by this trigger when it fires. Defined below.
func (r *Trigger) Actions() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["actions"])
}

// A description of the new trigger.
func (r *Trigger) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// Start the trigger. Defaults to `true`. Not valid to disable for `ON_DEMAND` type.
func (r *Trigger) Enabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enabled"])
}

// The name of the trigger.
func (r *Trigger) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// A predicate to specify when the new trigger should fire. Required when trigger type is `CONDITIONAL`. Defined below.
func (r *Trigger) Predicate() *pulumi.Output {
	return r.s.State["predicate"]
}

// A cron expression used to specify the schedule. [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html)
func (r *Trigger) Schedule() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["schedule"])
}

// The type of trigger. Valid values are `CONDITIONAL`, `ON_DEMAND`, and `SCHEDULED`.
func (r *Trigger) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

// Input properties used for looking up and filtering Trigger resources.
type TriggerState struct {
	// List of actions initiated by this trigger when it fires. Defined below.
	Actions interface{}
	// A description of the new trigger.
	Description interface{}
	// Start the trigger. Defaults to `true`. Not valid to disable for `ON_DEMAND` type.
	Enabled interface{}
	// The name of the trigger.
	Name interface{}
	// A predicate to specify when the new trigger should fire. Required when trigger type is `CONDITIONAL`. Defined below.
	Predicate interface{}
	// A cron expression used to specify the schedule. [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html)
	Schedule interface{}
	// The type of trigger. Valid values are `CONDITIONAL`, `ON_DEMAND`, and `SCHEDULED`.
	Type interface{}
}

// The set of arguments for constructing a Trigger resource.
type TriggerArgs struct {
	// List of actions initiated by this trigger when it fires. Defined below.
	Actions interface{}
	// A description of the new trigger.
	Description interface{}
	// Start the trigger. Defaults to `true`. Not valid to disable for `ON_DEMAND` type.
	Enabled interface{}
	// The name of the trigger.
	Name interface{}
	// A predicate to specify when the new trigger should fire. Required when trigger type is `CONDITIONAL`. Defined below.
	Predicate interface{}
	// A cron expression used to specify the schedule. [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html)
	Schedule interface{}
	// The type of trigger. Valid values are `CONDITIONAL`, `ON_DEMAND`, and `SCHEDULED`.
	Type interface{}
}
