// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Glue Registry resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v3/go/aws/glue"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := glue.NewRegistry(ctx, "example", &glue.RegistryArgs{
// 			RegistryName: pulumi.String("example"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Glue Registries can be imported using `arn`, e.g.
//
// ```sh
//  $ pulumi import aws:glue/registry:Registry example arn:aws:glue:us-west-2:123456789012:registry/example
// ```
type Registry struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of Glue Registry.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// A description of the registry.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The Name of the registry.
	RegistryName pulumi.StringOutput `pulumi:"registryName"`
	// Key-value map of resource tags
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewRegistry registers a new resource with the given unique name, arguments, and options.
func NewRegistry(ctx *pulumi.Context,
	name string, args *RegistryArgs, opts ...pulumi.ResourceOption) (*Registry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RegistryName == nil {
		return nil, errors.New("invalid value for required argument 'RegistryName'")
	}
	var resource Registry
	err := ctx.RegisterResource("aws:glue/registry:Registry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegistry gets an existing Registry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegistry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegistryState, opts ...pulumi.ResourceOption) (*Registry, error) {
	var resource Registry
	err := ctx.ReadResource("aws:glue/registry:Registry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Registry resources.
type registryState struct {
	// Amazon Resource Name (ARN) of Glue Registry.
	Arn *string `pulumi:"arn"`
	// A description of the registry.
	Description *string `pulumi:"description"`
	// The Name of the registry.
	RegistryName *string `pulumi:"registryName"`
	// Key-value map of resource tags
	Tags map[string]string `pulumi:"tags"`
}

type RegistryState struct {
	// Amazon Resource Name (ARN) of Glue Registry.
	Arn pulumi.StringPtrInput
	// A description of the registry.
	Description pulumi.StringPtrInput
	// The Name of the registry.
	RegistryName pulumi.StringPtrInput
	// Key-value map of resource tags
	Tags pulumi.StringMapInput
}

func (RegistryState) ElementType() reflect.Type {
	return reflect.TypeOf((*registryState)(nil)).Elem()
}

type registryArgs struct {
	// A description of the registry.
	Description *string `pulumi:"description"`
	// The Name of the registry.
	RegistryName string `pulumi:"registryName"`
	// Key-value map of resource tags
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Registry resource.
type RegistryArgs struct {
	// A description of the registry.
	Description pulumi.StringPtrInput
	// The Name of the registry.
	RegistryName pulumi.StringInput
	// Key-value map of resource tags
	Tags pulumi.StringMapInput
}

func (RegistryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*registryArgs)(nil)).Elem()
}

type RegistryInput interface {
	pulumi.Input

	ToRegistryOutput() RegistryOutput
	ToRegistryOutputWithContext(ctx context.Context) RegistryOutput
}

func (Registry) ElementType() reflect.Type {
	return reflect.TypeOf((*Registry)(nil)).Elem()
}

func (i Registry) ToRegistryOutput() RegistryOutput {
	return i.ToRegistryOutputWithContext(context.Background())
}

func (i Registry) ToRegistryOutputWithContext(ctx context.Context) RegistryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryOutput)
}

type RegistryOutput struct {
	*pulumi.OutputState
}

func (RegistryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryOutput)(nil)).Elem()
}

func (o RegistryOutput) ToRegistryOutput() RegistryOutput {
	return o
}

func (o RegistryOutput) ToRegistryOutputWithContext(ctx context.Context) RegistryOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(RegistryOutput{})
}
