// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type CatalogTablePartitionIndex struct {
	// The name of the partition index.
	IndexName   string  `pulumi:"indexName"`
	IndexStatus *string `pulumi:"indexStatus"`
	// The keys for the partition index.
	Keys []string `pulumi:"keys"`
}

// CatalogTablePartitionIndexInput is an input type that accepts CatalogTablePartitionIndexArgs and CatalogTablePartitionIndexOutput values.
// You can construct a concrete instance of `CatalogTablePartitionIndexInput` via:
//
//          CatalogTablePartitionIndexArgs{...}
type CatalogTablePartitionIndexInput interface {
	pulumi.Input

	ToCatalogTablePartitionIndexOutput() CatalogTablePartitionIndexOutput
	ToCatalogTablePartitionIndexOutputWithContext(context.Context) CatalogTablePartitionIndexOutput
}

type CatalogTablePartitionIndexArgs struct {
	// The name of the partition index.
	IndexName   pulumi.StringInput    `pulumi:"indexName"`
	IndexStatus pulumi.StringPtrInput `pulumi:"indexStatus"`
	// The keys for the partition index.
	Keys pulumi.StringArrayInput `pulumi:"keys"`
}

func (CatalogTablePartitionIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogTablePartitionIndex)(nil)).Elem()
}

func (i CatalogTablePartitionIndexArgs) ToCatalogTablePartitionIndexOutput() CatalogTablePartitionIndexOutput {
	return i.ToCatalogTablePartitionIndexOutputWithContext(context.Background())
}

func (i CatalogTablePartitionIndexArgs) ToCatalogTablePartitionIndexOutputWithContext(ctx context.Context) CatalogTablePartitionIndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogTablePartitionIndexOutput)
}

// CatalogTablePartitionIndexArrayInput is an input type that accepts CatalogTablePartitionIndexArray and CatalogTablePartitionIndexArrayOutput values.
// You can construct a concrete instance of `CatalogTablePartitionIndexArrayInput` via:
//
//          CatalogTablePartitionIndexArray{ CatalogTablePartitionIndexArgs{...} }
type CatalogTablePartitionIndexArrayInput interface {
	pulumi.Input

	ToCatalogTablePartitionIndexArrayOutput() CatalogTablePartitionIndexArrayOutput
	ToCatalogTablePartitionIndexArrayOutputWithContext(context.Context) CatalogTablePartitionIndexArrayOutput
}

type CatalogTablePartitionIndexArray []CatalogTablePartitionIndexInput

func (CatalogTablePartitionIndexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CatalogTablePartitionIndex)(nil)).Elem()
}

func (i CatalogTablePartitionIndexArray) ToCatalogTablePartitionIndexArrayOutput() CatalogTablePartitionIndexArrayOutput {
	return i.ToCatalogTablePartitionIndexArrayOutputWithContext(context.Background())
}

func (i CatalogTablePartitionIndexArray) ToCatalogTablePartitionIndexArrayOutputWithContext(ctx context.Context) CatalogTablePartitionIndexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogTablePartitionIndexArrayOutput)
}

type CatalogTablePartitionIndexOutput struct{ *pulumi.OutputState }

func (CatalogTablePartitionIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogTablePartitionIndex)(nil)).Elem()
}

func (o CatalogTablePartitionIndexOutput) ToCatalogTablePartitionIndexOutput() CatalogTablePartitionIndexOutput {
	return o
}

func (o CatalogTablePartitionIndexOutput) ToCatalogTablePartitionIndexOutputWithContext(ctx context.Context) CatalogTablePartitionIndexOutput {
	return o
}

// The name of the partition index.
func (o CatalogTablePartitionIndexOutput) IndexName() pulumi.StringOutput {
	return o.ApplyT(func(v CatalogTablePartitionIndex) string { return v.IndexName }).(pulumi.StringOutput)
}

func (o CatalogTablePartitionIndexOutput) IndexStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CatalogTablePartitionIndex) *string { return v.IndexStatus }).(pulumi.StringPtrOutput)
}

// The keys for the partition index.
func (o CatalogTablePartitionIndexOutput) Keys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CatalogTablePartitionIndex) []string { return v.Keys }).(pulumi.StringArrayOutput)
}

type CatalogTablePartitionIndexArrayOutput struct{ *pulumi.OutputState }

func (CatalogTablePartitionIndexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CatalogTablePartitionIndex)(nil)).Elem()
}

func (o CatalogTablePartitionIndexArrayOutput) ToCatalogTablePartitionIndexArrayOutput() CatalogTablePartitionIndexArrayOutput {
	return o
}

func (o CatalogTablePartitionIndexArrayOutput) ToCatalogTablePartitionIndexArrayOutputWithContext(ctx context.Context) CatalogTablePartitionIndexArrayOutput {
	return o
}

func (o CatalogTablePartitionIndexArrayOutput) Index(i pulumi.IntInput) CatalogTablePartitionIndexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CatalogTablePartitionIndex {
		return vs[0].([]CatalogTablePartitionIndex)[vs[1].(int)]
	}).(CatalogTablePartitionIndexOutput)
}

type CatalogTablePartitionKey struct {
	// Free-form text comment.
	Comment *string `pulumi:"comment"`
	// Name of the SerDe.
	Name string `pulumi:"name"`
	// The datatype of data in the Column.
	Type *string `pulumi:"type"`
}

// CatalogTablePartitionKeyInput is an input type that accepts CatalogTablePartitionKeyArgs and CatalogTablePartitionKeyOutput values.
// You can construct a concrete instance of `CatalogTablePartitionKeyInput` via:
//
//          CatalogTablePartitionKeyArgs{...}
type CatalogTablePartitionKeyInput interface {
	pulumi.Input

	ToCatalogTablePartitionKeyOutput() CatalogTablePartitionKeyOutput
	ToCatalogTablePartitionKeyOutputWithContext(context.Context) CatalogTablePartitionKeyOutput
}

type CatalogTablePartitionKeyArgs struct {
	// Free-form text comment.
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	// Name of the SerDe.
	Name pulumi.StringInput `pulumi:"name"`
	// The datatype of data in the Column.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (CatalogTablePartitionKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogTablePartitionKey)(nil)).Elem()
}

func (i CatalogTablePartitionKeyArgs) ToCatalogTablePartitionKeyOutput() CatalogTablePartitionKeyOutput {
	return i.ToCatalogTablePartitionKeyOutputWithContext(context.Background())
}

func (i CatalogTablePartitionKeyArgs) ToCatalogTablePartitionKeyOutputWithContext(ctx context.Context) CatalogTablePartitionKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogTablePartitionKeyOutput)
}

// CatalogTablePartitionKeyArrayInput is an input type that accepts CatalogTablePartitionKeyArray and CatalogTablePartitionKeyArrayOutput values.
// You can construct a concrete instance of `CatalogTablePartitionKeyArrayInput` via:
//
//          CatalogTablePartitionKeyArray{ CatalogTablePartitionKeyArgs{...} }
type CatalogTablePartitionKeyArrayInput interface {
	pulumi.Input

	ToCatalogTablePartitionKeyArrayOutput() CatalogTablePartitionKeyArrayOutput
	ToCatalogTablePartitionKeyArrayOutputWithContext(context.Context) CatalogTablePartitionKeyArrayOutput
}

type CatalogTablePartitionKeyArray []CatalogTablePartitionKeyInput

func (CatalogTablePartitionKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CatalogTablePartitionKey)(nil)).Elem()
}

func (i CatalogTablePartitionKeyArray) ToCatalogTablePartitionKeyArrayOutput() CatalogTablePartitionKeyArrayOutput {
	return i.ToCatalogTablePartitionKeyArrayOutputWithContext(context.Background())
}

func (i CatalogTablePartitionKeyArray) ToCatalogTablePartitionKeyArrayOutputWithContext(ctx context.Context) CatalogTablePartitionKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogTablePartitionKeyArrayOutput)
}

type CatalogTablePartitionKeyOutput struct{ *pulumi.OutputState }

func (CatalogTablePartitionKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogTablePartitionKey)(nil)).Elem()
}

func (o CatalogTablePartitionKeyOutput) ToCatalogTablePartitionKeyOutput() CatalogTablePartitionKeyOutput {
	return o
}

func (o CatalogTablePartitionKeyOutput) ToCatalogTablePartitionKeyOutputWithContext(ctx context.Context) CatalogTablePartitionKeyOutput {
	return o
}

// Free-form text comment.
func (o CatalogTablePartitionKeyOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CatalogTablePartitionKey) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

// Name of the SerDe.
func (o CatalogTablePartitionKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CatalogTablePartitionKey) string { return v.Name }).(pulumi.StringOutput)
}

// The datatype of data in the Column.
func (o CatalogTablePartitionKeyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CatalogTablePartitionKey) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type CatalogTablePartitionKeyArrayOutput struct{ *pulumi.OutputState }

func (CatalogTablePartitionKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CatalogTablePartitionKey)(nil)).Elem()
}

func (o CatalogTablePartitionKeyArrayOutput) ToCatalogTablePartitionKeyArrayOutput() CatalogTablePartitionKeyArrayOutput {
	return o
}

func (o CatalogTablePartitionKeyArrayOutput) ToCatalogTablePartitionKeyArrayOutputWithContext(ctx context.Context) CatalogTablePartitionKeyArrayOutput {
	return o
}

func (o CatalogTablePartitionKeyArrayOutput) Index(i pulumi.IntInput) CatalogTablePartitionKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CatalogTablePartitionKey {
		return vs[0].([]CatalogTablePartitionKey)[vs[1].(int)]
	}).(CatalogTablePartitionKeyOutput)
}

type CatalogTableStorageDescriptor struct {
	// A list of reducer grouping columns, clustering columns, and bucketing columns in the table.
	BucketColumns []string `pulumi:"bucketColumns"`
	// A list of the Columns in the table.
	Columns []CatalogTableStorageDescriptorColumn `pulumi:"columns"`
	// True if the data in the table is compressed, or False if not.
	Compressed *bool `pulumi:"compressed"`
	// The input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
	InputFormat *string `pulumi:"inputFormat"`
	// The physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
	Location *string `pulumi:"location"`
	// Must be specified if the table contains any dimension columns.
	NumberOfBuckets *int `pulumi:"numberOfBuckets"`
	// The output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
	OutputFormat *string `pulumi:"outputFormat"`
	// A map of initialization parameters for the SerDe, in key-value form.
	Parameters map[string]string `pulumi:"parameters"`
	// Serialization/deserialization (SerDe) information.
	SerDeInfo *CatalogTableStorageDescriptorSerDeInfo `pulumi:"serDeInfo"`
	// Information about values that appear very frequently in a column (skewed values).
	SkewedInfo *CatalogTableStorageDescriptorSkewedInfo `pulumi:"skewedInfo"`
	// A list of Order objects specifying the sort order of each bucket in the table.
	SortColumns []CatalogTableStorageDescriptorSortColumn `pulumi:"sortColumns"`
	// True if the table data is stored in subdirectories, or False if not.
	StoredAsSubDirectories *bool `pulumi:"storedAsSubDirectories"`
}

// CatalogTableStorageDescriptorInput is an input type that accepts CatalogTableStorageDescriptorArgs and CatalogTableStorageDescriptorOutput values.
// You can construct a concrete instance of `CatalogTableStorageDescriptorInput` via:
//
//          CatalogTableStorageDescriptorArgs{...}
type CatalogTableStorageDescriptorInput interface {
	pulumi.Input

	ToCatalogTableStorageDescriptorOutput() CatalogTableStorageDescriptorOutput
	ToCatalogTableStorageDescriptorOutputWithContext(context.Context) CatalogTableStorageDescriptorOutput
}

type CatalogTableStorageDescriptorArgs struct {
	// A list of reducer grouping columns, clustering columns, and bucketing columns in the table.
	BucketColumns pulumi.StringArrayInput `pulumi:"bucketColumns"`
	// A list of the Columns in the table.
	Columns CatalogTableStorageDescriptorColumnArrayInput `pulumi:"columns"`
	// True if the data in the table is compressed, or False if not.
	Compressed pulumi.BoolPtrInput `pulumi:"compressed"`
	// The input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
	InputFormat pulumi.StringPtrInput `pulumi:"inputFormat"`
	// The physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Must be specified if the table contains any dimension columns.
	NumberOfBuckets pulumi.IntPtrInput `pulumi:"numberOfBuckets"`
	// The output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
	OutputFormat pulumi.StringPtrInput `pulumi:"outputFormat"`
	// A map of initialization parameters for the SerDe, in key-value form.
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
	// Serialization/deserialization (SerDe) information.
	SerDeInfo CatalogTableStorageDescriptorSerDeInfoPtrInput `pulumi:"serDeInfo"`
	// Information about values that appear very frequently in a column (skewed values).
	SkewedInfo CatalogTableStorageDescriptorSkewedInfoPtrInput `pulumi:"skewedInfo"`
	// A list of Order objects specifying the sort order of each bucket in the table.
	SortColumns CatalogTableStorageDescriptorSortColumnArrayInput `pulumi:"sortColumns"`
	// True if the table data is stored in subdirectories, or False if not.
	StoredAsSubDirectories pulumi.BoolPtrInput `pulumi:"storedAsSubDirectories"`
}

func (CatalogTableStorageDescriptorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogTableStorageDescriptor)(nil)).Elem()
}

func (i CatalogTableStorageDescriptorArgs) ToCatalogTableStorageDescriptorOutput() CatalogTableStorageDescriptorOutput {
	return i.ToCatalogTableStorageDescriptorOutputWithContext(context.Background())
}

func (i CatalogTableStorageDescriptorArgs) ToCatalogTableStorageDescriptorOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogTableStorageDescriptorOutput)
}

func (i CatalogTableStorageDescriptorArgs) ToCatalogTableStorageDescriptorPtrOutput() CatalogTableStorageDescriptorPtrOutput {
	return i.ToCatalogTableStorageDescriptorPtrOutputWithContext(context.Background())
}

func (i CatalogTableStorageDescriptorArgs) ToCatalogTableStorageDescriptorPtrOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogTableStorageDescriptorOutput).ToCatalogTableStorageDescriptorPtrOutputWithContext(ctx)
}

// CatalogTableStorageDescriptorPtrInput is an input type that accepts CatalogTableStorageDescriptorArgs, CatalogTableStorageDescriptorPtr and CatalogTableStorageDescriptorPtrOutput values.
// You can construct a concrete instance of `CatalogTableStorageDescriptorPtrInput` via:
//
//          CatalogTableStorageDescriptorArgs{...}
//
//  or:
//
//          nil
type CatalogTableStorageDescriptorPtrInput interface {
	pulumi.Input

	ToCatalogTableStorageDescriptorPtrOutput() CatalogTableStorageDescriptorPtrOutput
	ToCatalogTableStorageDescriptorPtrOutputWithContext(context.Context) CatalogTableStorageDescriptorPtrOutput
}

type catalogTableStorageDescriptorPtrType CatalogTableStorageDescriptorArgs

func CatalogTableStorageDescriptorPtr(v *CatalogTableStorageDescriptorArgs) CatalogTableStorageDescriptorPtrInput {
	return (*catalogTableStorageDescriptorPtrType)(v)
}

func (*catalogTableStorageDescriptorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogTableStorageDescriptor)(nil)).Elem()
}

func (i *catalogTableStorageDescriptorPtrType) ToCatalogTableStorageDescriptorPtrOutput() CatalogTableStorageDescriptorPtrOutput {
	return i.ToCatalogTableStorageDescriptorPtrOutputWithContext(context.Background())
}

func (i *catalogTableStorageDescriptorPtrType) ToCatalogTableStorageDescriptorPtrOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogTableStorageDescriptorPtrOutput)
}

type CatalogTableStorageDescriptorOutput struct{ *pulumi.OutputState }

func (CatalogTableStorageDescriptorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogTableStorageDescriptor)(nil)).Elem()
}

func (o CatalogTableStorageDescriptorOutput) ToCatalogTableStorageDescriptorOutput() CatalogTableStorageDescriptorOutput {
	return o
}

func (o CatalogTableStorageDescriptorOutput) ToCatalogTableStorageDescriptorOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorOutput {
	return o
}

func (o CatalogTableStorageDescriptorOutput) ToCatalogTableStorageDescriptorPtrOutput() CatalogTableStorageDescriptorPtrOutput {
	return o.ToCatalogTableStorageDescriptorPtrOutputWithContext(context.Background())
}

func (o CatalogTableStorageDescriptorOutput) ToCatalogTableStorageDescriptorPtrOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorPtrOutput {
	return o.ApplyT(func(v CatalogTableStorageDescriptor) *CatalogTableStorageDescriptor {
		return &v
	}).(CatalogTableStorageDescriptorPtrOutput)
}

// A list of reducer grouping columns, clustering columns, and bucketing columns in the table.
func (o CatalogTableStorageDescriptorOutput) BucketColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CatalogTableStorageDescriptor) []string { return v.BucketColumns }).(pulumi.StringArrayOutput)
}

// A list of the Columns in the table.
func (o CatalogTableStorageDescriptorOutput) Columns() CatalogTableStorageDescriptorColumnArrayOutput {
	return o.ApplyT(func(v CatalogTableStorageDescriptor) []CatalogTableStorageDescriptorColumn { return v.Columns }).(CatalogTableStorageDescriptorColumnArrayOutput)
}

// True if the data in the table is compressed, or False if not.
func (o CatalogTableStorageDescriptorOutput) Compressed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CatalogTableStorageDescriptor) *bool { return v.Compressed }).(pulumi.BoolPtrOutput)
}

// The input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
func (o CatalogTableStorageDescriptorOutput) InputFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CatalogTableStorageDescriptor) *string { return v.InputFormat }).(pulumi.StringPtrOutput)
}

// The physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
func (o CatalogTableStorageDescriptorOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CatalogTableStorageDescriptor) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Must be specified if the table contains any dimension columns.
func (o CatalogTableStorageDescriptorOutput) NumberOfBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CatalogTableStorageDescriptor) *int { return v.NumberOfBuckets }).(pulumi.IntPtrOutput)
}

// The output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
func (o CatalogTableStorageDescriptorOutput) OutputFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CatalogTableStorageDescriptor) *string { return v.OutputFormat }).(pulumi.StringPtrOutput)
}

// A map of initialization parameters for the SerDe, in key-value form.
func (o CatalogTableStorageDescriptorOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v CatalogTableStorageDescriptor) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

// Serialization/deserialization (SerDe) information.
func (o CatalogTableStorageDescriptorOutput) SerDeInfo() CatalogTableStorageDescriptorSerDeInfoPtrOutput {
	return o.ApplyT(func(v CatalogTableStorageDescriptor) *CatalogTableStorageDescriptorSerDeInfo { return v.SerDeInfo }).(CatalogTableStorageDescriptorSerDeInfoPtrOutput)
}

// Information about values that appear very frequently in a column (skewed values).
func (o CatalogTableStorageDescriptorOutput) SkewedInfo() CatalogTableStorageDescriptorSkewedInfoPtrOutput {
	return o.ApplyT(func(v CatalogTableStorageDescriptor) *CatalogTableStorageDescriptorSkewedInfo { return v.SkewedInfo }).(CatalogTableStorageDescriptorSkewedInfoPtrOutput)
}

// A list of Order objects specifying the sort order of each bucket in the table.
func (o CatalogTableStorageDescriptorOutput) SortColumns() CatalogTableStorageDescriptorSortColumnArrayOutput {
	return o.ApplyT(func(v CatalogTableStorageDescriptor) []CatalogTableStorageDescriptorSortColumn { return v.SortColumns }).(CatalogTableStorageDescriptorSortColumnArrayOutput)
}

// True if the table data is stored in subdirectories, or False if not.
func (o CatalogTableStorageDescriptorOutput) StoredAsSubDirectories() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CatalogTableStorageDescriptor) *bool { return v.StoredAsSubDirectories }).(pulumi.BoolPtrOutput)
}

type CatalogTableStorageDescriptorPtrOutput struct{ *pulumi.OutputState }

func (CatalogTableStorageDescriptorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogTableStorageDescriptor)(nil)).Elem()
}

func (o CatalogTableStorageDescriptorPtrOutput) ToCatalogTableStorageDescriptorPtrOutput() CatalogTableStorageDescriptorPtrOutput {
	return o
}

func (o CatalogTableStorageDescriptorPtrOutput) ToCatalogTableStorageDescriptorPtrOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorPtrOutput {
	return o
}

func (o CatalogTableStorageDescriptorPtrOutput) Elem() CatalogTableStorageDescriptorOutput {
	return o.ApplyT(func(v *CatalogTableStorageDescriptor) CatalogTableStorageDescriptor { return *v }).(CatalogTableStorageDescriptorOutput)
}

// A list of reducer grouping columns, clustering columns, and bucketing columns in the table.
func (o CatalogTableStorageDescriptorPtrOutput) BucketColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CatalogTableStorageDescriptor) []string {
		if v == nil {
			return nil
		}
		return v.BucketColumns
	}).(pulumi.StringArrayOutput)
}

// A list of the Columns in the table.
func (o CatalogTableStorageDescriptorPtrOutput) Columns() CatalogTableStorageDescriptorColumnArrayOutput {
	return o.ApplyT(func(v *CatalogTableStorageDescriptor) []CatalogTableStorageDescriptorColumn {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(CatalogTableStorageDescriptorColumnArrayOutput)
}

// True if the data in the table is compressed, or False if not.
func (o CatalogTableStorageDescriptorPtrOutput) Compressed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CatalogTableStorageDescriptor) *bool {
		if v == nil {
			return nil
		}
		return v.Compressed
	}).(pulumi.BoolPtrOutput)
}

// The input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
func (o CatalogTableStorageDescriptorPtrOutput) InputFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CatalogTableStorageDescriptor) *string {
		if v == nil {
			return nil
		}
		return v.InputFormat
	}).(pulumi.StringPtrOutput)
}

// The physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
func (o CatalogTableStorageDescriptorPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CatalogTableStorageDescriptor) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Must be specified if the table contains any dimension columns.
func (o CatalogTableStorageDescriptorPtrOutput) NumberOfBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CatalogTableStorageDescriptor) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfBuckets
	}).(pulumi.IntPtrOutput)
}

// The output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
func (o CatalogTableStorageDescriptorPtrOutput) OutputFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CatalogTableStorageDescriptor) *string {
		if v == nil {
			return nil
		}
		return v.OutputFormat
	}).(pulumi.StringPtrOutput)
}

// A map of initialization parameters for the SerDe, in key-value form.
func (o CatalogTableStorageDescriptorPtrOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CatalogTableStorageDescriptor) map[string]string {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.StringMapOutput)
}

// Serialization/deserialization (SerDe) information.
func (o CatalogTableStorageDescriptorPtrOutput) SerDeInfo() CatalogTableStorageDescriptorSerDeInfoPtrOutput {
	return o.ApplyT(func(v *CatalogTableStorageDescriptor) *CatalogTableStorageDescriptorSerDeInfo {
		if v == nil {
			return nil
		}
		return v.SerDeInfo
	}).(CatalogTableStorageDescriptorSerDeInfoPtrOutput)
}

// Information about values that appear very frequently in a column (skewed values).
func (o CatalogTableStorageDescriptorPtrOutput) SkewedInfo() CatalogTableStorageDescriptorSkewedInfoPtrOutput {
	return o.ApplyT(func(v *CatalogTableStorageDescriptor) *CatalogTableStorageDescriptorSkewedInfo {
		if v == nil {
			return nil
		}
		return v.SkewedInfo
	}).(CatalogTableStorageDescriptorSkewedInfoPtrOutput)
}

// A list of Order objects specifying the sort order of each bucket in the table.
func (o CatalogTableStorageDescriptorPtrOutput) SortColumns() CatalogTableStorageDescriptorSortColumnArrayOutput {
	return o.ApplyT(func(v *CatalogTableStorageDescriptor) []CatalogTableStorageDescriptorSortColumn {
		if v == nil {
			return nil
		}
		return v.SortColumns
	}).(CatalogTableStorageDescriptorSortColumnArrayOutput)
}

// True if the table data is stored in subdirectories, or False if not.
func (o CatalogTableStorageDescriptorPtrOutput) StoredAsSubDirectories() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CatalogTableStorageDescriptor) *bool {
		if v == nil {
			return nil
		}
		return v.StoredAsSubDirectories
	}).(pulumi.BoolPtrOutput)
}

type CatalogTableStorageDescriptorColumn struct {
	// Free-form text comment.
	Comment *string `pulumi:"comment"`
	// Name of the SerDe.
	Name string `pulumi:"name"`
	// A map of initialization parameters for the SerDe, in key-value form.
	Parameters map[string]string `pulumi:"parameters"`
	// The datatype of data in the Column.
	Type *string `pulumi:"type"`
}

// CatalogTableStorageDescriptorColumnInput is an input type that accepts CatalogTableStorageDescriptorColumnArgs and CatalogTableStorageDescriptorColumnOutput values.
// You can construct a concrete instance of `CatalogTableStorageDescriptorColumnInput` via:
//
//          CatalogTableStorageDescriptorColumnArgs{...}
type CatalogTableStorageDescriptorColumnInput interface {
	pulumi.Input

	ToCatalogTableStorageDescriptorColumnOutput() CatalogTableStorageDescriptorColumnOutput
	ToCatalogTableStorageDescriptorColumnOutputWithContext(context.Context) CatalogTableStorageDescriptorColumnOutput
}

type CatalogTableStorageDescriptorColumnArgs struct {
	// Free-form text comment.
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	// Name of the SerDe.
	Name pulumi.StringInput `pulumi:"name"`
	// A map of initialization parameters for the SerDe, in key-value form.
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
	// The datatype of data in the Column.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (CatalogTableStorageDescriptorColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogTableStorageDescriptorColumn)(nil)).Elem()
}

func (i CatalogTableStorageDescriptorColumnArgs) ToCatalogTableStorageDescriptorColumnOutput() CatalogTableStorageDescriptorColumnOutput {
	return i.ToCatalogTableStorageDescriptorColumnOutputWithContext(context.Background())
}

func (i CatalogTableStorageDescriptorColumnArgs) ToCatalogTableStorageDescriptorColumnOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogTableStorageDescriptorColumnOutput)
}

// CatalogTableStorageDescriptorColumnArrayInput is an input type that accepts CatalogTableStorageDescriptorColumnArray and CatalogTableStorageDescriptorColumnArrayOutput values.
// You can construct a concrete instance of `CatalogTableStorageDescriptorColumnArrayInput` via:
//
//          CatalogTableStorageDescriptorColumnArray{ CatalogTableStorageDescriptorColumnArgs{...} }
type CatalogTableStorageDescriptorColumnArrayInput interface {
	pulumi.Input

	ToCatalogTableStorageDescriptorColumnArrayOutput() CatalogTableStorageDescriptorColumnArrayOutput
	ToCatalogTableStorageDescriptorColumnArrayOutputWithContext(context.Context) CatalogTableStorageDescriptorColumnArrayOutput
}

type CatalogTableStorageDescriptorColumnArray []CatalogTableStorageDescriptorColumnInput

func (CatalogTableStorageDescriptorColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CatalogTableStorageDescriptorColumn)(nil)).Elem()
}

func (i CatalogTableStorageDescriptorColumnArray) ToCatalogTableStorageDescriptorColumnArrayOutput() CatalogTableStorageDescriptorColumnArrayOutput {
	return i.ToCatalogTableStorageDescriptorColumnArrayOutputWithContext(context.Background())
}

func (i CatalogTableStorageDescriptorColumnArray) ToCatalogTableStorageDescriptorColumnArrayOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogTableStorageDescriptorColumnArrayOutput)
}

type CatalogTableStorageDescriptorColumnOutput struct{ *pulumi.OutputState }

func (CatalogTableStorageDescriptorColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogTableStorageDescriptorColumn)(nil)).Elem()
}

func (o CatalogTableStorageDescriptorColumnOutput) ToCatalogTableStorageDescriptorColumnOutput() CatalogTableStorageDescriptorColumnOutput {
	return o
}

func (o CatalogTableStorageDescriptorColumnOutput) ToCatalogTableStorageDescriptorColumnOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorColumnOutput {
	return o
}

// Free-form text comment.
func (o CatalogTableStorageDescriptorColumnOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CatalogTableStorageDescriptorColumn) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

// Name of the SerDe.
func (o CatalogTableStorageDescriptorColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CatalogTableStorageDescriptorColumn) string { return v.Name }).(pulumi.StringOutput)
}

// A map of initialization parameters for the SerDe, in key-value form.
func (o CatalogTableStorageDescriptorColumnOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v CatalogTableStorageDescriptorColumn) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

// The datatype of data in the Column.
func (o CatalogTableStorageDescriptorColumnOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CatalogTableStorageDescriptorColumn) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type CatalogTableStorageDescriptorColumnArrayOutput struct{ *pulumi.OutputState }

func (CatalogTableStorageDescriptorColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CatalogTableStorageDescriptorColumn)(nil)).Elem()
}

func (o CatalogTableStorageDescriptorColumnArrayOutput) ToCatalogTableStorageDescriptorColumnArrayOutput() CatalogTableStorageDescriptorColumnArrayOutput {
	return o
}

func (o CatalogTableStorageDescriptorColumnArrayOutput) ToCatalogTableStorageDescriptorColumnArrayOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorColumnArrayOutput {
	return o
}

func (o CatalogTableStorageDescriptorColumnArrayOutput) Index(i pulumi.IntInput) CatalogTableStorageDescriptorColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CatalogTableStorageDescriptorColumn {
		return vs[0].([]CatalogTableStorageDescriptorColumn)[vs[1].(int)]
	}).(CatalogTableStorageDescriptorColumnOutput)
}

type CatalogTableStorageDescriptorSerDeInfo struct {
	// Name of the SerDe.
	Name *string `pulumi:"name"`
	// A map of initialization parameters for the SerDe, in key-value form.
	Parameters map[string]string `pulumi:"parameters"`
	// Usually the class that implements the SerDe. An example is: org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe.
	SerializationLibrary *string `pulumi:"serializationLibrary"`
}

// CatalogTableStorageDescriptorSerDeInfoInput is an input type that accepts CatalogTableStorageDescriptorSerDeInfoArgs and CatalogTableStorageDescriptorSerDeInfoOutput values.
// You can construct a concrete instance of `CatalogTableStorageDescriptorSerDeInfoInput` via:
//
//          CatalogTableStorageDescriptorSerDeInfoArgs{...}
type CatalogTableStorageDescriptorSerDeInfoInput interface {
	pulumi.Input

	ToCatalogTableStorageDescriptorSerDeInfoOutput() CatalogTableStorageDescriptorSerDeInfoOutput
	ToCatalogTableStorageDescriptorSerDeInfoOutputWithContext(context.Context) CatalogTableStorageDescriptorSerDeInfoOutput
}

type CatalogTableStorageDescriptorSerDeInfoArgs struct {
	// Name of the SerDe.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A map of initialization parameters for the SerDe, in key-value form.
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
	// Usually the class that implements the SerDe. An example is: org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe.
	SerializationLibrary pulumi.StringPtrInput `pulumi:"serializationLibrary"`
}

func (CatalogTableStorageDescriptorSerDeInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogTableStorageDescriptorSerDeInfo)(nil)).Elem()
}

func (i CatalogTableStorageDescriptorSerDeInfoArgs) ToCatalogTableStorageDescriptorSerDeInfoOutput() CatalogTableStorageDescriptorSerDeInfoOutput {
	return i.ToCatalogTableStorageDescriptorSerDeInfoOutputWithContext(context.Background())
}

func (i CatalogTableStorageDescriptorSerDeInfoArgs) ToCatalogTableStorageDescriptorSerDeInfoOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorSerDeInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogTableStorageDescriptorSerDeInfoOutput)
}

func (i CatalogTableStorageDescriptorSerDeInfoArgs) ToCatalogTableStorageDescriptorSerDeInfoPtrOutput() CatalogTableStorageDescriptorSerDeInfoPtrOutput {
	return i.ToCatalogTableStorageDescriptorSerDeInfoPtrOutputWithContext(context.Background())
}

func (i CatalogTableStorageDescriptorSerDeInfoArgs) ToCatalogTableStorageDescriptorSerDeInfoPtrOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorSerDeInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogTableStorageDescriptorSerDeInfoOutput).ToCatalogTableStorageDescriptorSerDeInfoPtrOutputWithContext(ctx)
}

// CatalogTableStorageDescriptorSerDeInfoPtrInput is an input type that accepts CatalogTableStorageDescriptorSerDeInfoArgs, CatalogTableStorageDescriptorSerDeInfoPtr and CatalogTableStorageDescriptorSerDeInfoPtrOutput values.
// You can construct a concrete instance of `CatalogTableStorageDescriptorSerDeInfoPtrInput` via:
//
//          CatalogTableStorageDescriptorSerDeInfoArgs{...}
//
//  or:
//
//          nil
type CatalogTableStorageDescriptorSerDeInfoPtrInput interface {
	pulumi.Input

	ToCatalogTableStorageDescriptorSerDeInfoPtrOutput() CatalogTableStorageDescriptorSerDeInfoPtrOutput
	ToCatalogTableStorageDescriptorSerDeInfoPtrOutputWithContext(context.Context) CatalogTableStorageDescriptorSerDeInfoPtrOutput
}

type catalogTableStorageDescriptorSerDeInfoPtrType CatalogTableStorageDescriptorSerDeInfoArgs

func CatalogTableStorageDescriptorSerDeInfoPtr(v *CatalogTableStorageDescriptorSerDeInfoArgs) CatalogTableStorageDescriptorSerDeInfoPtrInput {
	return (*catalogTableStorageDescriptorSerDeInfoPtrType)(v)
}

func (*catalogTableStorageDescriptorSerDeInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogTableStorageDescriptorSerDeInfo)(nil)).Elem()
}

func (i *catalogTableStorageDescriptorSerDeInfoPtrType) ToCatalogTableStorageDescriptorSerDeInfoPtrOutput() CatalogTableStorageDescriptorSerDeInfoPtrOutput {
	return i.ToCatalogTableStorageDescriptorSerDeInfoPtrOutputWithContext(context.Background())
}

func (i *catalogTableStorageDescriptorSerDeInfoPtrType) ToCatalogTableStorageDescriptorSerDeInfoPtrOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorSerDeInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogTableStorageDescriptorSerDeInfoPtrOutput)
}

type CatalogTableStorageDescriptorSerDeInfoOutput struct{ *pulumi.OutputState }

func (CatalogTableStorageDescriptorSerDeInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogTableStorageDescriptorSerDeInfo)(nil)).Elem()
}

func (o CatalogTableStorageDescriptorSerDeInfoOutput) ToCatalogTableStorageDescriptorSerDeInfoOutput() CatalogTableStorageDescriptorSerDeInfoOutput {
	return o
}

func (o CatalogTableStorageDescriptorSerDeInfoOutput) ToCatalogTableStorageDescriptorSerDeInfoOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorSerDeInfoOutput {
	return o
}

func (o CatalogTableStorageDescriptorSerDeInfoOutput) ToCatalogTableStorageDescriptorSerDeInfoPtrOutput() CatalogTableStorageDescriptorSerDeInfoPtrOutput {
	return o.ToCatalogTableStorageDescriptorSerDeInfoPtrOutputWithContext(context.Background())
}

func (o CatalogTableStorageDescriptorSerDeInfoOutput) ToCatalogTableStorageDescriptorSerDeInfoPtrOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorSerDeInfoPtrOutput {
	return o.ApplyT(func(v CatalogTableStorageDescriptorSerDeInfo) *CatalogTableStorageDescriptorSerDeInfo {
		return &v
	}).(CatalogTableStorageDescriptorSerDeInfoPtrOutput)
}

// Name of the SerDe.
func (o CatalogTableStorageDescriptorSerDeInfoOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CatalogTableStorageDescriptorSerDeInfo) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A map of initialization parameters for the SerDe, in key-value form.
func (o CatalogTableStorageDescriptorSerDeInfoOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v CatalogTableStorageDescriptorSerDeInfo) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

// Usually the class that implements the SerDe. An example is: org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe.
func (o CatalogTableStorageDescriptorSerDeInfoOutput) SerializationLibrary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CatalogTableStorageDescriptorSerDeInfo) *string { return v.SerializationLibrary }).(pulumi.StringPtrOutput)
}

type CatalogTableStorageDescriptorSerDeInfoPtrOutput struct{ *pulumi.OutputState }

func (CatalogTableStorageDescriptorSerDeInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogTableStorageDescriptorSerDeInfo)(nil)).Elem()
}

func (o CatalogTableStorageDescriptorSerDeInfoPtrOutput) ToCatalogTableStorageDescriptorSerDeInfoPtrOutput() CatalogTableStorageDescriptorSerDeInfoPtrOutput {
	return o
}

func (o CatalogTableStorageDescriptorSerDeInfoPtrOutput) ToCatalogTableStorageDescriptorSerDeInfoPtrOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorSerDeInfoPtrOutput {
	return o
}

func (o CatalogTableStorageDescriptorSerDeInfoPtrOutput) Elem() CatalogTableStorageDescriptorSerDeInfoOutput {
	return o.ApplyT(func(v *CatalogTableStorageDescriptorSerDeInfo) CatalogTableStorageDescriptorSerDeInfo { return *v }).(CatalogTableStorageDescriptorSerDeInfoOutput)
}

// Name of the SerDe.
func (o CatalogTableStorageDescriptorSerDeInfoPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CatalogTableStorageDescriptorSerDeInfo) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// A map of initialization parameters for the SerDe, in key-value form.
func (o CatalogTableStorageDescriptorSerDeInfoPtrOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CatalogTableStorageDescriptorSerDeInfo) map[string]string {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.StringMapOutput)
}

// Usually the class that implements the SerDe. An example is: org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe.
func (o CatalogTableStorageDescriptorSerDeInfoPtrOutput) SerializationLibrary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CatalogTableStorageDescriptorSerDeInfo) *string {
		if v == nil {
			return nil
		}
		return v.SerializationLibrary
	}).(pulumi.StringPtrOutput)
}

type CatalogTableStorageDescriptorSkewedInfo struct {
	// A list of names of columns that contain skewed values.
	SkewedColumnNames []string `pulumi:"skewedColumnNames"`
	// A list of values that appear so frequently as to be considered skewed.
	SkewedColumnValueLocationMaps map[string]string `pulumi:"skewedColumnValueLocationMaps"`
	// A map of skewed values to the columns that contain them.
	SkewedColumnValues []string `pulumi:"skewedColumnValues"`
}

// CatalogTableStorageDescriptorSkewedInfoInput is an input type that accepts CatalogTableStorageDescriptorSkewedInfoArgs and CatalogTableStorageDescriptorSkewedInfoOutput values.
// You can construct a concrete instance of `CatalogTableStorageDescriptorSkewedInfoInput` via:
//
//          CatalogTableStorageDescriptorSkewedInfoArgs{...}
type CatalogTableStorageDescriptorSkewedInfoInput interface {
	pulumi.Input

	ToCatalogTableStorageDescriptorSkewedInfoOutput() CatalogTableStorageDescriptorSkewedInfoOutput
	ToCatalogTableStorageDescriptorSkewedInfoOutputWithContext(context.Context) CatalogTableStorageDescriptorSkewedInfoOutput
}

type CatalogTableStorageDescriptorSkewedInfoArgs struct {
	// A list of names of columns that contain skewed values.
	SkewedColumnNames pulumi.StringArrayInput `pulumi:"skewedColumnNames"`
	// A list of values that appear so frequently as to be considered skewed.
	SkewedColumnValueLocationMaps pulumi.StringMapInput `pulumi:"skewedColumnValueLocationMaps"`
	// A map of skewed values to the columns that contain them.
	SkewedColumnValues pulumi.StringArrayInput `pulumi:"skewedColumnValues"`
}

func (CatalogTableStorageDescriptorSkewedInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogTableStorageDescriptorSkewedInfo)(nil)).Elem()
}

func (i CatalogTableStorageDescriptorSkewedInfoArgs) ToCatalogTableStorageDescriptorSkewedInfoOutput() CatalogTableStorageDescriptorSkewedInfoOutput {
	return i.ToCatalogTableStorageDescriptorSkewedInfoOutputWithContext(context.Background())
}

func (i CatalogTableStorageDescriptorSkewedInfoArgs) ToCatalogTableStorageDescriptorSkewedInfoOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorSkewedInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogTableStorageDescriptorSkewedInfoOutput)
}

func (i CatalogTableStorageDescriptorSkewedInfoArgs) ToCatalogTableStorageDescriptorSkewedInfoPtrOutput() CatalogTableStorageDescriptorSkewedInfoPtrOutput {
	return i.ToCatalogTableStorageDescriptorSkewedInfoPtrOutputWithContext(context.Background())
}

func (i CatalogTableStorageDescriptorSkewedInfoArgs) ToCatalogTableStorageDescriptorSkewedInfoPtrOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorSkewedInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogTableStorageDescriptorSkewedInfoOutput).ToCatalogTableStorageDescriptorSkewedInfoPtrOutputWithContext(ctx)
}

// CatalogTableStorageDescriptorSkewedInfoPtrInput is an input type that accepts CatalogTableStorageDescriptorSkewedInfoArgs, CatalogTableStorageDescriptorSkewedInfoPtr and CatalogTableStorageDescriptorSkewedInfoPtrOutput values.
// You can construct a concrete instance of `CatalogTableStorageDescriptorSkewedInfoPtrInput` via:
//
//          CatalogTableStorageDescriptorSkewedInfoArgs{...}
//
//  or:
//
//          nil
type CatalogTableStorageDescriptorSkewedInfoPtrInput interface {
	pulumi.Input

	ToCatalogTableStorageDescriptorSkewedInfoPtrOutput() CatalogTableStorageDescriptorSkewedInfoPtrOutput
	ToCatalogTableStorageDescriptorSkewedInfoPtrOutputWithContext(context.Context) CatalogTableStorageDescriptorSkewedInfoPtrOutput
}

type catalogTableStorageDescriptorSkewedInfoPtrType CatalogTableStorageDescriptorSkewedInfoArgs

func CatalogTableStorageDescriptorSkewedInfoPtr(v *CatalogTableStorageDescriptorSkewedInfoArgs) CatalogTableStorageDescriptorSkewedInfoPtrInput {
	return (*catalogTableStorageDescriptorSkewedInfoPtrType)(v)
}

func (*catalogTableStorageDescriptorSkewedInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogTableStorageDescriptorSkewedInfo)(nil)).Elem()
}

func (i *catalogTableStorageDescriptorSkewedInfoPtrType) ToCatalogTableStorageDescriptorSkewedInfoPtrOutput() CatalogTableStorageDescriptorSkewedInfoPtrOutput {
	return i.ToCatalogTableStorageDescriptorSkewedInfoPtrOutputWithContext(context.Background())
}

func (i *catalogTableStorageDescriptorSkewedInfoPtrType) ToCatalogTableStorageDescriptorSkewedInfoPtrOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorSkewedInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogTableStorageDescriptorSkewedInfoPtrOutput)
}

type CatalogTableStorageDescriptorSkewedInfoOutput struct{ *pulumi.OutputState }

func (CatalogTableStorageDescriptorSkewedInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogTableStorageDescriptorSkewedInfo)(nil)).Elem()
}

func (o CatalogTableStorageDescriptorSkewedInfoOutput) ToCatalogTableStorageDescriptorSkewedInfoOutput() CatalogTableStorageDescriptorSkewedInfoOutput {
	return o
}

func (o CatalogTableStorageDescriptorSkewedInfoOutput) ToCatalogTableStorageDescriptorSkewedInfoOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorSkewedInfoOutput {
	return o
}

func (o CatalogTableStorageDescriptorSkewedInfoOutput) ToCatalogTableStorageDescriptorSkewedInfoPtrOutput() CatalogTableStorageDescriptorSkewedInfoPtrOutput {
	return o.ToCatalogTableStorageDescriptorSkewedInfoPtrOutputWithContext(context.Background())
}

func (o CatalogTableStorageDescriptorSkewedInfoOutput) ToCatalogTableStorageDescriptorSkewedInfoPtrOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorSkewedInfoPtrOutput {
	return o.ApplyT(func(v CatalogTableStorageDescriptorSkewedInfo) *CatalogTableStorageDescriptorSkewedInfo {
		return &v
	}).(CatalogTableStorageDescriptorSkewedInfoPtrOutput)
}

// A list of names of columns that contain skewed values.
func (o CatalogTableStorageDescriptorSkewedInfoOutput) SkewedColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CatalogTableStorageDescriptorSkewedInfo) []string { return v.SkewedColumnNames }).(pulumi.StringArrayOutput)
}

// A list of values that appear so frequently as to be considered skewed.
func (o CatalogTableStorageDescriptorSkewedInfoOutput) SkewedColumnValueLocationMaps() pulumi.StringMapOutput {
	return o.ApplyT(func(v CatalogTableStorageDescriptorSkewedInfo) map[string]string {
		return v.SkewedColumnValueLocationMaps
	}).(pulumi.StringMapOutput)
}

// A map of skewed values to the columns that contain them.
func (o CatalogTableStorageDescriptorSkewedInfoOutput) SkewedColumnValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CatalogTableStorageDescriptorSkewedInfo) []string { return v.SkewedColumnValues }).(pulumi.StringArrayOutput)
}

type CatalogTableStorageDescriptorSkewedInfoPtrOutput struct{ *pulumi.OutputState }

func (CatalogTableStorageDescriptorSkewedInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogTableStorageDescriptorSkewedInfo)(nil)).Elem()
}

func (o CatalogTableStorageDescriptorSkewedInfoPtrOutput) ToCatalogTableStorageDescriptorSkewedInfoPtrOutput() CatalogTableStorageDescriptorSkewedInfoPtrOutput {
	return o
}

func (o CatalogTableStorageDescriptorSkewedInfoPtrOutput) ToCatalogTableStorageDescriptorSkewedInfoPtrOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorSkewedInfoPtrOutput {
	return o
}

func (o CatalogTableStorageDescriptorSkewedInfoPtrOutput) Elem() CatalogTableStorageDescriptorSkewedInfoOutput {
	return o.ApplyT(func(v *CatalogTableStorageDescriptorSkewedInfo) CatalogTableStorageDescriptorSkewedInfo { return *v }).(CatalogTableStorageDescriptorSkewedInfoOutput)
}

// A list of names of columns that contain skewed values.
func (o CatalogTableStorageDescriptorSkewedInfoPtrOutput) SkewedColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CatalogTableStorageDescriptorSkewedInfo) []string {
		if v == nil {
			return nil
		}
		return v.SkewedColumnNames
	}).(pulumi.StringArrayOutput)
}

// A list of values that appear so frequently as to be considered skewed.
func (o CatalogTableStorageDescriptorSkewedInfoPtrOutput) SkewedColumnValueLocationMaps() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CatalogTableStorageDescriptorSkewedInfo) map[string]string {
		if v == nil {
			return nil
		}
		return v.SkewedColumnValueLocationMaps
	}).(pulumi.StringMapOutput)
}

// A map of skewed values to the columns that contain them.
func (o CatalogTableStorageDescriptorSkewedInfoPtrOutput) SkewedColumnValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CatalogTableStorageDescriptorSkewedInfo) []string {
		if v == nil {
			return nil
		}
		return v.SkewedColumnValues
	}).(pulumi.StringArrayOutput)
}

type CatalogTableStorageDescriptorSortColumn struct {
	// The name of the column.
	Column string `pulumi:"column"`
	// Indicates that the column is sorted in ascending order (== 1), or in descending order (==0).
	SortOrder int `pulumi:"sortOrder"`
}

// CatalogTableStorageDescriptorSortColumnInput is an input type that accepts CatalogTableStorageDescriptorSortColumnArgs and CatalogTableStorageDescriptorSortColumnOutput values.
// You can construct a concrete instance of `CatalogTableStorageDescriptorSortColumnInput` via:
//
//          CatalogTableStorageDescriptorSortColumnArgs{...}
type CatalogTableStorageDescriptorSortColumnInput interface {
	pulumi.Input

	ToCatalogTableStorageDescriptorSortColumnOutput() CatalogTableStorageDescriptorSortColumnOutput
	ToCatalogTableStorageDescriptorSortColumnOutputWithContext(context.Context) CatalogTableStorageDescriptorSortColumnOutput
}

type CatalogTableStorageDescriptorSortColumnArgs struct {
	// The name of the column.
	Column pulumi.StringInput `pulumi:"column"`
	// Indicates that the column is sorted in ascending order (== 1), or in descending order (==0).
	SortOrder pulumi.IntInput `pulumi:"sortOrder"`
}

func (CatalogTableStorageDescriptorSortColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogTableStorageDescriptorSortColumn)(nil)).Elem()
}

func (i CatalogTableStorageDescriptorSortColumnArgs) ToCatalogTableStorageDescriptorSortColumnOutput() CatalogTableStorageDescriptorSortColumnOutput {
	return i.ToCatalogTableStorageDescriptorSortColumnOutputWithContext(context.Background())
}

func (i CatalogTableStorageDescriptorSortColumnArgs) ToCatalogTableStorageDescriptorSortColumnOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorSortColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogTableStorageDescriptorSortColumnOutput)
}

// CatalogTableStorageDescriptorSortColumnArrayInput is an input type that accepts CatalogTableStorageDescriptorSortColumnArray and CatalogTableStorageDescriptorSortColumnArrayOutput values.
// You can construct a concrete instance of `CatalogTableStorageDescriptorSortColumnArrayInput` via:
//
//          CatalogTableStorageDescriptorSortColumnArray{ CatalogTableStorageDescriptorSortColumnArgs{...} }
type CatalogTableStorageDescriptorSortColumnArrayInput interface {
	pulumi.Input

	ToCatalogTableStorageDescriptorSortColumnArrayOutput() CatalogTableStorageDescriptorSortColumnArrayOutput
	ToCatalogTableStorageDescriptorSortColumnArrayOutputWithContext(context.Context) CatalogTableStorageDescriptorSortColumnArrayOutput
}

type CatalogTableStorageDescriptorSortColumnArray []CatalogTableStorageDescriptorSortColumnInput

func (CatalogTableStorageDescriptorSortColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CatalogTableStorageDescriptorSortColumn)(nil)).Elem()
}

func (i CatalogTableStorageDescriptorSortColumnArray) ToCatalogTableStorageDescriptorSortColumnArrayOutput() CatalogTableStorageDescriptorSortColumnArrayOutput {
	return i.ToCatalogTableStorageDescriptorSortColumnArrayOutputWithContext(context.Background())
}

func (i CatalogTableStorageDescriptorSortColumnArray) ToCatalogTableStorageDescriptorSortColumnArrayOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorSortColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogTableStorageDescriptorSortColumnArrayOutput)
}

type CatalogTableStorageDescriptorSortColumnOutput struct{ *pulumi.OutputState }

func (CatalogTableStorageDescriptorSortColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogTableStorageDescriptorSortColumn)(nil)).Elem()
}

func (o CatalogTableStorageDescriptorSortColumnOutput) ToCatalogTableStorageDescriptorSortColumnOutput() CatalogTableStorageDescriptorSortColumnOutput {
	return o
}

func (o CatalogTableStorageDescriptorSortColumnOutput) ToCatalogTableStorageDescriptorSortColumnOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorSortColumnOutput {
	return o
}

// The name of the column.
func (o CatalogTableStorageDescriptorSortColumnOutput) Column() pulumi.StringOutput {
	return o.ApplyT(func(v CatalogTableStorageDescriptorSortColumn) string { return v.Column }).(pulumi.StringOutput)
}

// Indicates that the column is sorted in ascending order (== 1), or in descending order (==0).
func (o CatalogTableStorageDescriptorSortColumnOutput) SortOrder() pulumi.IntOutput {
	return o.ApplyT(func(v CatalogTableStorageDescriptorSortColumn) int { return v.SortOrder }).(pulumi.IntOutput)
}

type CatalogTableStorageDescriptorSortColumnArrayOutput struct{ *pulumi.OutputState }

func (CatalogTableStorageDescriptorSortColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CatalogTableStorageDescriptorSortColumn)(nil)).Elem()
}

func (o CatalogTableStorageDescriptorSortColumnArrayOutput) ToCatalogTableStorageDescriptorSortColumnArrayOutput() CatalogTableStorageDescriptorSortColumnArrayOutput {
	return o
}

func (o CatalogTableStorageDescriptorSortColumnArrayOutput) ToCatalogTableStorageDescriptorSortColumnArrayOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorSortColumnArrayOutput {
	return o
}

func (o CatalogTableStorageDescriptorSortColumnArrayOutput) Index(i pulumi.IntInput) CatalogTableStorageDescriptorSortColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CatalogTableStorageDescriptorSortColumn {
		return vs[0].([]CatalogTableStorageDescriptorSortColumn)[vs[1].(int)]
	}).(CatalogTableStorageDescriptorSortColumnOutput)
}

type ClassifierCsvClassifier struct {
	// Enables the processing of files that contain only one column.
	AllowSingleColumn *bool `pulumi:"allowSingleColumn"`
	// Indicates whether the CSV file contains a header. This can be one of "ABSENT", "PRESENT", or "UNKNOWN".
	ContainsHeader *string `pulumi:"containsHeader"`
	// The delimiter used in the Csv to separate columns.
	Delimiter *string `pulumi:"delimiter"`
	// Specifies whether to trim column values.
	DisableValueTrimming *bool `pulumi:"disableValueTrimming"`
	// A list of strings representing column names.
	Headers []string `pulumi:"headers"`
	// A custom symbol to denote what combines content into a single column value. It must be different from the column delimiter.
	QuoteSymbol *string `pulumi:"quoteSymbol"`
}

// ClassifierCsvClassifierInput is an input type that accepts ClassifierCsvClassifierArgs and ClassifierCsvClassifierOutput values.
// You can construct a concrete instance of `ClassifierCsvClassifierInput` via:
//
//          ClassifierCsvClassifierArgs{...}
type ClassifierCsvClassifierInput interface {
	pulumi.Input

	ToClassifierCsvClassifierOutput() ClassifierCsvClassifierOutput
	ToClassifierCsvClassifierOutputWithContext(context.Context) ClassifierCsvClassifierOutput
}

type ClassifierCsvClassifierArgs struct {
	// Enables the processing of files that contain only one column.
	AllowSingleColumn pulumi.BoolPtrInput `pulumi:"allowSingleColumn"`
	// Indicates whether the CSV file contains a header. This can be one of "ABSENT", "PRESENT", or "UNKNOWN".
	ContainsHeader pulumi.StringPtrInput `pulumi:"containsHeader"`
	// The delimiter used in the Csv to separate columns.
	Delimiter pulumi.StringPtrInput `pulumi:"delimiter"`
	// Specifies whether to trim column values.
	DisableValueTrimming pulumi.BoolPtrInput `pulumi:"disableValueTrimming"`
	// A list of strings representing column names.
	Headers pulumi.StringArrayInput `pulumi:"headers"`
	// A custom symbol to denote what combines content into a single column value. It must be different from the column delimiter.
	QuoteSymbol pulumi.StringPtrInput `pulumi:"quoteSymbol"`
}

func (ClassifierCsvClassifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassifierCsvClassifier)(nil)).Elem()
}

func (i ClassifierCsvClassifierArgs) ToClassifierCsvClassifierOutput() ClassifierCsvClassifierOutput {
	return i.ToClassifierCsvClassifierOutputWithContext(context.Background())
}

func (i ClassifierCsvClassifierArgs) ToClassifierCsvClassifierOutputWithContext(ctx context.Context) ClassifierCsvClassifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassifierCsvClassifierOutput)
}

func (i ClassifierCsvClassifierArgs) ToClassifierCsvClassifierPtrOutput() ClassifierCsvClassifierPtrOutput {
	return i.ToClassifierCsvClassifierPtrOutputWithContext(context.Background())
}

func (i ClassifierCsvClassifierArgs) ToClassifierCsvClassifierPtrOutputWithContext(ctx context.Context) ClassifierCsvClassifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassifierCsvClassifierOutput).ToClassifierCsvClassifierPtrOutputWithContext(ctx)
}

// ClassifierCsvClassifierPtrInput is an input type that accepts ClassifierCsvClassifierArgs, ClassifierCsvClassifierPtr and ClassifierCsvClassifierPtrOutput values.
// You can construct a concrete instance of `ClassifierCsvClassifierPtrInput` via:
//
//          ClassifierCsvClassifierArgs{...}
//
//  or:
//
//          nil
type ClassifierCsvClassifierPtrInput interface {
	pulumi.Input

	ToClassifierCsvClassifierPtrOutput() ClassifierCsvClassifierPtrOutput
	ToClassifierCsvClassifierPtrOutputWithContext(context.Context) ClassifierCsvClassifierPtrOutput
}

type classifierCsvClassifierPtrType ClassifierCsvClassifierArgs

func ClassifierCsvClassifierPtr(v *ClassifierCsvClassifierArgs) ClassifierCsvClassifierPtrInput {
	return (*classifierCsvClassifierPtrType)(v)
}

func (*classifierCsvClassifierPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassifierCsvClassifier)(nil)).Elem()
}

func (i *classifierCsvClassifierPtrType) ToClassifierCsvClassifierPtrOutput() ClassifierCsvClassifierPtrOutput {
	return i.ToClassifierCsvClassifierPtrOutputWithContext(context.Background())
}

func (i *classifierCsvClassifierPtrType) ToClassifierCsvClassifierPtrOutputWithContext(ctx context.Context) ClassifierCsvClassifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassifierCsvClassifierPtrOutput)
}

type ClassifierCsvClassifierOutput struct{ *pulumi.OutputState }

func (ClassifierCsvClassifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassifierCsvClassifier)(nil)).Elem()
}

func (o ClassifierCsvClassifierOutput) ToClassifierCsvClassifierOutput() ClassifierCsvClassifierOutput {
	return o
}

func (o ClassifierCsvClassifierOutput) ToClassifierCsvClassifierOutputWithContext(ctx context.Context) ClassifierCsvClassifierOutput {
	return o
}

func (o ClassifierCsvClassifierOutput) ToClassifierCsvClassifierPtrOutput() ClassifierCsvClassifierPtrOutput {
	return o.ToClassifierCsvClassifierPtrOutputWithContext(context.Background())
}

func (o ClassifierCsvClassifierOutput) ToClassifierCsvClassifierPtrOutputWithContext(ctx context.Context) ClassifierCsvClassifierPtrOutput {
	return o.ApplyT(func(v ClassifierCsvClassifier) *ClassifierCsvClassifier {
		return &v
	}).(ClassifierCsvClassifierPtrOutput)
}

// Enables the processing of files that contain only one column.
func (o ClassifierCsvClassifierOutput) AllowSingleColumn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClassifierCsvClassifier) *bool { return v.AllowSingleColumn }).(pulumi.BoolPtrOutput)
}

// Indicates whether the CSV file contains a header. This can be one of "ABSENT", "PRESENT", or "UNKNOWN".
func (o ClassifierCsvClassifierOutput) ContainsHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassifierCsvClassifier) *string { return v.ContainsHeader }).(pulumi.StringPtrOutput)
}

// The delimiter used in the Csv to separate columns.
func (o ClassifierCsvClassifierOutput) Delimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassifierCsvClassifier) *string { return v.Delimiter }).(pulumi.StringPtrOutput)
}

// Specifies whether to trim column values.
func (o ClassifierCsvClassifierOutput) DisableValueTrimming() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClassifierCsvClassifier) *bool { return v.DisableValueTrimming }).(pulumi.BoolPtrOutput)
}

// A list of strings representing column names.
func (o ClassifierCsvClassifierOutput) Headers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClassifierCsvClassifier) []string { return v.Headers }).(pulumi.StringArrayOutput)
}

// A custom symbol to denote what combines content into a single column value. It must be different from the column delimiter.
func (o ClassifierCsvClassifierOutput) QuoteSymbol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassifierCsvClassifier) *string { return v.QuoteSymbol }).(pulumi.StringPtrOutput)
}

type ClassifierCsvClassifierPtrOutput struct{ *pulumi.OutputState }

func (ClassifierCsvClassifierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassifierCsvClassifier)(nil)).Elem()
}

func (o ClassifierCsvClassifierPtrOutput) ToClassifierCsvClassifierPtrOutput() ClassifierCsvClassifierPtrOutput {
	return o
}

func (o ClassifierCsvClassifierPtrOutput) ToClassifierCsvClassifierPtrOutputWithContext(ctx context.Context) ClassifierCsvClassifierPtrOutput {
	return o
}

func (o ClassifierCsvClassifierPtrOutput) Elem() ClassifierCsvClassifierOutput {
	return o.ApplyT(func(v *ClassifierCsvClassifier) ClassifierCsvClassifier { return *v }).(ClassifierCsvClassifierOutput)
}

// Enables the processing of files that contain only one column.
func (o ClassifierCsvClassifierPtrOutput) AllowSingleColumn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClassifierCsvClassifier) *bool {
		if v == nil {
			return nil
		}
		return v.AllowSingleColumn
	}).(pulumi.BoolPtrOutput)
}

// Indicates whether the CSV file contains a header. This can be one of "ABSENT", "PRESENT", or "UNKNOWN".
func (o ClassifierCsvClassifierPtrOutput) ContainsHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassifierCsvClassifier) *string {
		if v == nil {
			return nil
		}
		return v.ContainsHeader
	}).(pulumi.StringPtrOutput)
}

// The delimiter used in the Csv to separate columns.
func (o ClassifierCsvClassifierPtrOutput) Delimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassifierCsvClassifier) *string {
		if v == nil {
			return nil
		}
		return v.Delimiter
	}).(pulumi.StringPtrOutput)
}

// Specifies whether to trim column values.
func (o ClassifierCsvClassifierPtrOutput) DisableValueTrimming() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClassifierCsvClassifier) *bool {
		if v == nil {
			return nil
		}
		return v.DisableValueTrimming
	}).(pulumi.BoolPtrOutput)
}

// A list of strings representing column names.
func (o ClassifierCsvClassifierPtrOutput) Headers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClassifierCsvClassifier) []string {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(pulumi.StringArrayOutput)
}

// A custom symbol to denote what combines content into a single column value. It must be different from the column delimiter.
func (o ClassifierCsvClassifierPtrOutput) QuoteSymbol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassifierCsvClassifier) *string {
		if v == nil {
			return nil
		}
		return v.QuoteSymbol
	}).(pulumi.StringPtrOutput)
}

type ClassifierGrokClassifier struct {
	// An identifier of the data format that the classifier matches.
	Classification string `pulumi:"classification"`
	// Custom grok patterns used by this classifier.
	CustomPatterns *string `pulumi:"customPatterns"`
	// The grok pattern used by this classifier.
	GrokPattern string `pulumi:"grokPattern"`
}

// ClassifierGrokClassifierInput is an input type that accepts ClassifierGrokClassifierArgs and ClassifierGrokClassifierOutput values.
// You can construct a concrete instance of `ClassifierGrokClassifierInput` via:
//
//          ClassifierGrokClassifierArgs{...}
type ClassifierGrokClassifierInput interface {
	pulumi.Input

	ToClassifierGrokClassifierOutput() ClassifierGrokClassifierOutput
	ToClassifierGrokClassifierOutputWithContext(context.Context) ClassifierGrokClassifierOutput
}

type ClassifierGrokClassifierArgs struct {
	// An identifier of the data format that the classifier matches.
	Classification pulumi.StringInput `pulumi:"classification"`
	// Custom grok patterns used by this classifier.
	CustomPatterns pulumi.StringPtrInput `pulumi:"customPatterns"`
	// The grok pattern used by this classifier.
	GrokPattern pulumi.StringInput `pulumi:"grokPattern"`
}

func (ClassifierGrokClassifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassifierGrokClassifier)(nil)).Elem()
}

func (i ClassifierGrokClassifierArgs) ToClassifierGrokClassifierOutput() ClassifierGrokClassifierOutput {
	return i.ToClassifierGrokClassifierOutputWithContext(context.Background())
}

func (i ClassifierGrokClassifierArgs) ToClassifierGrokClassifierOutputWithContext(ctx context.Context) ClassifierGrokClassifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassifierGrokClassifierOutput)
}

func (i ClassifierGrokClassifierArgs) ToClassifierGrokClassifierPtrOutput() ClassifierGrokClassifierPtrOutput {
	return i.ToClassifierGrokClassifierPtrOutputWithContext(context.Background())
}

func (i ClassifierGrokClassifierArgs) ToClassifierGrokClassifierPtrOutputWithContext(ctx context.Context) ClassifierGrokClassifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassifierGrokClassifierOutput).ToClassifierGrokClassifierPtrOutputWithContext(ctx)
}

// ClassifierGrokClassifierPtrInput is an input type that accepts ClassifierGrokClassifierArgs, ClassifierGrokClassifierPtr and ClassifierGrokClassifierPtrOutput values.
// You can construct a concrete instance of `ClassifierGrokClassifierPtrInput` via:
//
//          ClassifierGrokClassifierArgs{...}
//
//  or:
//
//          nil
type ClassifierGrokClassifierPtrInput interface {
	pulumi.Input

	ToClassifierGrokClassifierPtrOutput() ClassifierGrokClassifierPtrOutput
	ToClassifierGrokClassifierPtrOutputWithContext(context.Context) ClassifierGrokClassifierPtrOutput
}

type classifierGrokClassifierPtrType ClassifierGrokClassifierArgs

func ClassifierGrokClassifierPtr(v *ClassifierGrokClassifierArgs) ClassifierGrokClassifierPtrInput {
	return (*classifierGrokClassifierPtrType)(v)
}

func (*classifierGrokClassifierPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassifierGrokClassifier)(nil)).Elem()
}

func (i *classifierGrokClassifierPtrType) ToClassifierGrokClassifierPtrOutput() ClassifierGrokClassifierPtrOutput {
	return i.ToClassifierGrokClassifierPtrOutputWithContext(context.Background())
}

func (i *classifierGrokClassifierPtrType) ToClassifierGrokClassifierPtrOutputWithContext(ctx context.Context) ClassifierGrokClassifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassifierGrokClassifierPtrOutput)
}

type ClassifierGrokClassifierOutput struct{ *pulumi.OutputState }

func (ClassifierGrokClassifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassifierGrokClassifier)(nil)).Elem()
}

func (o ClassifierGrokClassifierOutput) ToClassifierGrokClassifierOutput() ClassifierGrokClassifierOutput {
	return o
}

func (o ClassifierGrokClassifierOutput) ToClassifierGrokClassifierOutputWithContext(ctx context.Context) ClassifierGrokClassifierOutput {
	return o
}

func (o ClassifierGrokClassifierOutput) ToClassifierGrokClassifierPtrOutput() ClassifierGrokClassifierPtrOutput {
	return o.ToClassifierGrokClassifierPtrOutputWithContext(context.Background())
}

func (o ClassifierGrokClassifierOutput) ToClassifierGrokClassifierPtrOutputWithContext(ctx context.Context) ClassifierGrokClassifierPtrOutput {
	return o.ApplyT(func(v ClassifierGrokClassifier) *ClassifierGrokClassifier {
		return &v
	}).(ClassifierGrokClassifierPtrOutput)
}

// An identifier of the data format that the classifier matches.
func (o ClassifierGrokClassifierOutput) Classification() pulumi.StringOutput {
	return o.ApplyT(func(v ClassifierGrokClassifier) string { return v.Classification }).(pulumi.StringOutput)
}

// Custom grok patterns used by this classifier.
func (o ClassifierGrokClassifierOutput) CustomPatterns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassifierGrokClassifier) *string { return v.CustomPatterns }).(pulumi.StringPtrOutput)
}

// The grok pattern used by this classifier.
func (o ClassifierGrokClassifierOutput) GrokPattern() pulumi.StringOutput {
	return o.ApplyT(func(v ClassifierGrokClassifier) string { return v.GrokPattern }).(pulumi.StringOutput)
}

type ClassifierGrokClassifierPtrOutput struct{ *pulumi.OutputState }

func (ClassifierGrokClassifierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassifierGrokClassifier)(nil)).Elem()
}

func (o ClassifierGrokClassifierPtrOutput) ToClassifierGrokClassifierPtrOutput() ClassifierGrokClassifierPtrOutput {
	return o
}

func (o ClassifierGrokClassifierPtrOutput) ToClassifierGrokClassifierPtrOutputWithContext(ctx context.Context) ClassifierGrokClassifierPtrOutput {
	return o
}

func (o ClassifierGrokClassifierPtrOutput) Elem() ClassifierGrokClassifierOutput {
	return o.ApplyT(func(v *ClassifierGrokClassifier) ClassifierGrokClassifier { return *v }).(ClassifierGrokClassifierOutput)
}

// An identifier of the data format that the classifier matches.
func (o ClassifierGrokClassifierPtrOutput) Classification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassifierGrokClassifier) *string {
		if v == nil {
			return nil
		}
		return &v.Classification
	}).(pulumi.StringPtrOutput)
}

// Custom grok patterns used by this classifier.
func (o ClassifierGrokClassifierPtrOutput) CustomPatterns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassifierGrokClassifier) *string {
		if v == nil {
			return nil
		}
		return v.CustomPatterns
	}).(pulumi.StringPtrOutput)
}

// The grok pattern used by this classifier.
func (o ClassifierGrokClassifierPtrOutput) GrokPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassifierGrokClassifier) *string {
		if v == nil {
			return nil
		}
		return &v.GrokPattern
	}).(pulumi.StringPtrOutput)
}

type ClassifierJsonClassifier struct {
	// A `JsonPath` string defining the JSON data for the classifier to classify. AWS Glue supports a subset of `JsonPath`, as described in [Writing JsonPath Custom Classifiers](https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json).
	JsonPath string `pulumi:"jsonPath"`
}

// ClassifierJsonClassifierInput is an input type that accepts ClassifierJsonClassifierArgs and ClassifierJsonClassifierOutput values.
// You can construct a concrete instance of `ClassifierJsonClassifierInput` via:
//
//          ClassifierJsonClassifierArgs{...}
type ClassifierJsonClassifierInput interface {
	pulumi.Input

	ToClassifierJsonClassifierOutput() ClassifierJsonClassifierOutput
	ToClassifierJsonClassifierOutputWithContext(context.Context) ClassifierJsonClassifierOutput
}

type ClassifierJsonClassifierArgs struct {
	// A `JsonPath` string defining the JSON data for the classifier to classify. AWS Glue supports a subset of `JsonPath`, as described in [Writing JsonPath Custom Classifiers](https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json).
	JsonPath pulumi.StringInput `pulumi:"jsonPath"`
}

func (ClassifierJsonClassifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassifierJsonClassifier)(nil)).Elem()
}

func (i ClassifierJsonClassifierArgs) ToClassifierJsonClassifierOutput() ClassifierJsonClassifierOutput {
	return i.ToClassifierJsonClassifierOutputWithContext(context.Background())
}

func (i ClassifierJsonClassifierArgs) ToClassifierJsonClassifierOutputWithContext(ctx context.Context) ClassifierJsonClassifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassifierJsonClassifierOutput)
}

func (i ClassifierJsonClassifierArgs) ToClassifierJsonClassifierPtrOutput() ClassifierJsonClassifierPtrOutput {
	return i.ToClassifierJsonClassifierPtrOutputWithContext(context.Background())
}

func (i ClassifierJsonClassifierArgs) ToClassifierJsonClassifierPtrOutputWithContext(ctx context.Context) ClassifierJsonClassifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassifierJsonClassifierOutput).ToClassifierJsonClassifierPtrOutputWithContext(ctx)
}

// ClassifierJsonClassifierPtrInput is an input type that accepts ClassifierJsonClassifierArgs, ClassifierJsonClassifierPtr and ClassifierJsonClassifierPtrOutput values.
// You can construct a concrete instance of `ClassifierJsonClassifierPtrInput` via:
//
//          ClassifierJsonClassifierArgs{...}
//
//  or:
//
//          nil
type ClassifierJsonClassifierPtrInput interface {
	pulumi.Input

	ToClassifierJsonClassifierPtrOutput() ClassifierJsonClassifierPtrOutput
	ToClassifierJsonClassifierPtrOutputWithContext(context.Context) ClassifierJsonClassifierPtrOutput
}

type classifierJsonClassifierPtrType ClassifierJsonClassifierArgs

func ClassifierJsonClassifierPtr(v *ClassifierJsonClassifierArgs) ClassifierJsonClassifierPtrInput {
	return (*classifierJsonClassifierPtrType)(v)
}

func (*classifierJsonClassifierPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassifierJsonClassifier)(nil)).Elem()
}

func (i *classifierJsonClassifierPtrType) ToClassifierJsonClassifierPtrOutput() ClassifierJsonClassifierPtrOutput {
	return i.ToClassifierJsonClassifierPtrOutputWithContext(context.Background())
}

func (i *classifierJsonClassifierPtrType) ToClassifierJsonClassifierPtrOutputWithContext(ctx context.Context) ClassifierJsonClassifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassifierJsonClassifierPtrOutput)
}

type ClassifierJsonClassifierOutput struct{ *pulumi.OutputState }

func (ClassifierJsonClassifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassifierJsonClassifier)(nil)).Elem()
}

func (o ClassifierJsonClassifierOutput) ToClassifierJsonClassifierOutput() ClassifierJsonClassifierOutput {
	return o
}

func (o ClassifierJsonClassifierOutput) ToClassifierJsonClassifierOutputWithContext(ctx context.Context) ClassifierJsonClassifierOutput {
	return o
}

func (o ClassifierJsonClassifierOutput) ToClassifierJsonClassifierPtrOutput() ClassifierJsonClassifierPtrOutput {
	return o.ToClassifierJsonClassifierPtrOutputWithContext(context.Background())
}

func (o ClassifierJsonClassifierOutput) ToClassifierJsonClassifierPtrOutputWithContext(ctx context.Context) ClassifierJsonClassifierPtrOutput {
	return o.ApplyT(func(v ClassifierJsonClassifier) *ClassifierJsonClassifier {
		return &v
	}).(ClassifierJsonClassifierPtrOutput)
}

// A `JsonPath` string defining the JSON data for the classifier to classify. AWS Glue supports a subset of `JsonPath`, as described in [Writing JsonPath Custom Classifiers](https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json).
func (o ClassifierJsonClassifierOutput) JsonPath() pulumi.StringOutput {
	return o.ApplyT(func(v ClassifierJsonClassifier) string { return v.JsonPath }).(pulumi.StringOutput)
}

type ClassifierJsonClassifierPtrOutput struct{ *pulumi.OutputState }

func (ClassifierJsonClassifierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassifierJsonClassifier)(nil)).Elem()
}

func (o ClassifierJsonClassifierPtrOutput) ToClassifierJsonClassifierPtrOutput() ClassifierJsonClassifierPtrOutput {
	return o
}

func (o ClassifierJsonClassifierPtrOutput) ToClassifierJsonClassifierPtrOutputWithContext(ctx context.Context) ClassifierJsonClassifierPtrOutput {
	return o
}

func (o ClassifierJsonClassifierPtrOutput) Elem() ClassifierJsonClassifierOutput {
	return o.ApplyT(func(v *ClassifierJsonClassifier) ClassifierJsonClassifier { return *v }).(ClassifierJsonClassifierOutput)
}

// A `JsonPath` string defining the JSON data for the classifier to classify. AWS Glue supports a subset of `JsonPath`, as described in [Writing JsonPath Custom Classifiers](https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json).
func (o ClassifierJsonClassifierPtrOutput) JsonPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassifierJsonClassifier) *string {
		if v == nil {
			return nil
		}
		return &v.JsonPath
	}).(pulumi.StringPtrOutput)
}

type ClassifierXmlClassifier struct {
	// An identifier of the data format that the classifier matches.
	Classification string `pulumi:"classification"`
	// The XML tag designating the element that contains each record in an XML document being parsed. Note that this cannot identify a self-closing element (closed by `/>`). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, `<row item_a="A" item_b="B"></row>` is okay, but `<row item_a="A" item_b="B" />` is not).
	RowTag string `pulumi:"rowTag"`
}

// ClassifierXmlClassifierInput is an input type that accepts ClassifierXmlClassifierArgs and ClassifierXmlClassifierOutput values.
// You can construct a concrete instance of `ClassifierXmlClassifierInput` via:
//
//          ClassifierXmlClassifierArgs{...}
type ClassifierXmlClassifierInput interface {
	pulumi.Input

	ToClassifierXmlClassifierOutput() ClassifierXmlClassifierOutput
	ToClassifierXmlClassifierOutputWithContext(context.Context) ClassifierXmlClassifierOutput
}

type ClassifierXmlClassifierArgs struct {
	// An identifier of the data format that the classifier matches.
	Classification pulumi.StringInput `pulumi:"classification"`
	// The XML tag designating the element that contains each record in an XML document being parsed. Note that this cannot identify a self-closing element (closed by `/>`). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, `<row item_a="A" item_b="B"></row>` is okay, but `<row item_a="A" item_b="B" />` is not).
	RowTag pulumi.StringInput `pulumi:"rowTag"`
}

func (ClassifierXmlClassifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassifierXmlClassifier)(nil)).Elem()
}

func (i ClassifierXmlClassifierArgs) ToClassifierXmlClassifierOutput() ClassifierXmlClassifierOutput {
	return i.ToClassifierXmlClassifierOutputWithContext(context.Background())
}

func (i ClassifierXmlClassifierArgs) ToClassifierXmlClassifierOutputWithContext(ctx context.Context) ClassifierXmlClassifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassifierXmlClassifierOutput)
}

func (i ClassifierXmlClassifierArgs) ToClassifierXmlClassifierPtrOutput() ClassifierXmlClassifierPtrOutput {
	return i.ToClassifierXmlClassifierPtrOutputWithContext(context.Background())
}

func (i ClassifierXmlClassifierArgs) ToClassifierXmlClassifierPtrOutputWithContext(ctx context.Context) ClassifierXmlClassifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassifierXmlClassifierOutput).ToClassifierXmlClassifierPtrOutputWithContext(ctx)
}

// ClassifierXmlClassifierPtrInput is an input type that accepts ClassifierXmlClassifierArgs, ClassifierXmlClassifierPtr and ClassifierXmlClassifierPtrOutput values.
// You can construct a concrete instance of `ClassifierXmlClassifierPtrInput` via:
//
//          ClassifierXmlClassifierArgs{...}
//
//  or:
//
//          nil
type ClassifierXmlClassifierPtrInput interface {
	pulumi.Input

	ToClassifierXmlClassifierPtrOutput() ClassifierXmlClassifierPtrOutput
	ToClassifierXmlClassifierPtrOutputWithContext(context.Context) ClassifierXmlClassifierPtrOutput
}

type classifierXmlClassifierPtrType ClassifierXmlClassifierArgs

func ClassifierXmlClassifierPtr(v *ClassifierXmlClassifierArgs) ClassifierXmlClassifierPtrInput {
	return (*classifierXmlClassifierPtrType)(v)
}

func (*classifierXmlClassifierPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassifierXmlClassifier)(nil)).Elem()
}

func (i *classifierXmlClassifierPtrType) ToClassifierXmlClassifierPtrOutput() ClassifierXmlClassifierPtrOutput {
	return i.ToClassifierXmlClassifierPtrOutputWithContext(context.Background())
}

func (i *classifierXmlClassifierPtrType) ToClassifierXmlClassifierPtrOutputWithContext(ctx context.Context) ClassifierXmlClassifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassifierXmlClassifierPtrOutput)
}

type ClassifierXmlClassifierOutput struct{ *pulumi.OutputState }

func (ClassifierXmlClassifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassifierXmlClassifier)(nil)).Elem()
}

func (o ClassifierXmlClassifierOutput) ToClassifierXmlClassifierOutput() ClassifierXmlClassifierOutput {
	return o
}

func (o ClassifierXmlClassifierOutput) ToClassifierXmlClassifierOutputWithContext(ctx context.Context) ClassifierXmlClassifierOutput {
	return o
}

func (o ClassifierXmlClassifierOutput) ToClassifierXmlClassifierPtrOutput() ClassifierXmlClassifierPtrOutput {
	return o.ToClassifierXmlClassifierPtrOutputWithContext(context.Background())
}

func (o ClassifierXmlClassifierOutput) ToClassifierXmlClassifierPtrOutputWithContext(ctx context.Context) ClassifierXmlClassifierPtrOutput {
	return o.ApplyT(func(v ClassifierXmlClassifier) *ClassifierXmlClassifier {
		return &v
	}).(ClassifierXmlClassifierPtrOutput)
}

// An identifier of the data format that the classifier matches.
func (o ClassifierXmlClassifierOutput) Classification() pulumi.StringOutput {
	return o.ApplyT(func(v ClassifierXmlClassifier) string { return v.Classification }).(pulumi.StringOutput)
}

// The XML tag designating the element that contains each record in an XML document being parsed. Note that this cannot identify a self-closing element (closed by `/>`). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, `<row item_a="A" item_b="B"></row>` is okay, but `<row item_a="A" item_b="B" />` is not).
func (o ClassifierXmlClassifierOutput) RowTag() pulumi.StringOutput {
	return o.ApplyT(func(v ClassifierXmlClassifier) string { return v.RowTag }).(pulumi.StringOutput)
}

type ClassifierXmlClassifierPtrOutput struct{ *pulumi.OutputState }

func (ClassifierXmlClassifierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassifierXmlClassifier)(nil)).Elem()
}

func (o ClassifierXmlClassifierPtrOutput) ToClassifierXmlClassifierPtrOutput() ClassifierXmlClassifierPtrOutput {
	return o
}

func (o ClassifierXmlClassifierPtrOutput) ToClassifierXmlClassifierPtrOutputWithContext(ctx context.Context) ClassifierXmlClassifierPtrOutput {
	return o
}

func (o ClassifierXmlClassifierPtrOutput) Elem() ClassifierXmlClassifierOutput {
	return o.ApplyT(func(v *ClassifierXmlClassifier) ClassifierXmlClassifier { return *v }).(ClassifierXmlClassifierOutput)
}

// An identifier of the data format that the classifier matches.
func (o ClassifierXmlClassifierPtrOutput) Classification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassifierXmlClassifier) *string {
		if v == nil {
			return nil
		}
		return &v.Classification
	}).(pulumi.StringPtrOutput)
}

// The XML tag designating the element that contains each record in an XML document being parsed. Note that this cannot identify a self-closing element (closed by `/>`). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, `<row item_a="A" item_b="B"></row>` is okay, but `<row item_a="A" item_b="B" />` is not).
func (o ClassifierXmlClassifierPtrOutput) RowTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassifierXmlClassifier) *string {
		if v == nil {
			return nil
		}
		return &v.RowTag
	}).(pulumi.StringPtrOutput)
}

type ConnectionPhysicalConnectionRequirements struct {
	// The availability zone of the connection. This field is redundant and implied by `subnetId`, but is currently an api requirement.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The security group ID list used by the connection.
	SecurityGroupIdLists []string `pulumi:"securityGroupIdLists"`
	// The subnet ID used by the connection.
	SubnetId *string `pulumi:"subnetId"`
}

// ConnectionPhysicalConnectionRequirementsInput is an input type that accepts ConnectionPhysicalConnectionRequirementsArgs and ConnectionPhysicalConnectionRequirementsOutput values.
// You can construct a concrete instance of `ConnectionPhysicalConnectionRequirementsInput` via:
//
//          ConnectionPhysicalConnectionRequirementsArgs{...}
type ConnectionPhysicalConnectionRequirementsInput interface {
	pulumi.Input

	ToConnectionPhysicalConnectionRequirementsOutput() ConnectionPhysicalConnectionRequirementsOutput
	ToConnectionPhysicalConnectionRequirementsOutputWithContext(context.Context) ConnectionPhysicalConnectionRequirementsOutput
}

type ConnectionPhysicalConnectionRequirementsArgs struct {
	// The availability zone of the connection. This field is redundant and implied by `subnetId`, but is currently an api requirement.
	AvailabilityZone pulumi.StringPtrInput `pulumi:"availabilityZone"`
	// The security group ID list used by the connection.
	SecurityGroupIdLists pulumi.StringArrayInput `pulumi:"securityGroupIdLists"`
	// The subnet ID used by the connection.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
}

func (ConnectionPhysicalConnectionRequirementsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionPhysicalConnectionRequirements)(nil)).Elem()
}

func (i ConnectionPhysicalConnectionRequirementsArgs) ToConnectionPhysicalConnectionRequirementsOutput() ConnectionPhysicalConnectionRequirementsOutput {
	return i.ToConnectionPhysicalConnectionRequirementsOutputWithContext(context.Background())
}

func (i ConnectionPhysicalConnectionRequirementsArgs) ToConnectionPhysicalConnectionRequirementsOutputWithContext(ctx context.Context) ConnectionPhysicalConnectionRequirementsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPhysicalConnectionRequirementsOutput)
}

func (i ConnectionPhysicalConnectionRequirementsArgs) ToConnectionPhysicalConnectionRequirementsPtrOutput() ConnectionPhysicalConnectionRequirementsPtrOutput {
	return i.ToConnectionPhysicalConnectionRequirementsPtrOutputWithContext(context.Background())
}

func (i ConnectionPhysicalConnectionRequirementsArgs) ToConnectionPhysicalConnectionRequirementsPtrOutputWithContext(ctx context.Context) ConnectionPhysicalConnectionRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPhysicalConnectionRequirementsOutput).ToConnectionPhysicalConnectionRequirementsPtrOutputWithContext(ctx)
}

// ConnectionPhysicalConnectionRequirementsPtrInput is an input type that accepts ConnectionPhysicalConnectionRequirementsArgs, ConnectionPhysicalConnectionRequirementsPtr and ConnectionPhysicalConnectionRequirementsPtrOutput values.
// You can construct a concrete instance of `ConnectionPhysicalConnectionRequirementsPtrInput` via:
//
//          ConnectionPhysicalConnectionRequirementsArgs{...}
//
//  or:
//
//          nil
type ConnectionPhysicalConnectionRequirementsPtrInput interface {
	pulumi.Input

	ToConnectionPhysicalConnectionRequirementsPtrOutput() ConnectionPhysicalConnectionRequirementsPtrOutput
	ToConnectionPhysicalConnectionRequirementsPtrOutputWithContext(context.Context) ConnectionPhysicalConnectionRequirementsPtrOutput
}

type connectionPhysicalConnectionRequirementsPtrType ConnectionPhysicalConnectionRequirementsArgs

func ConnectionPhysicalConnectionRequirementsPtr(v *ConnectionPhysicalConnectionRequirementsArgs) ConnectionPhysicalConnectionRequirementsPtrInput {
	return (*connectionPhysicalConnectionRequirementsPtrType)(v)
}

func (*connectionPhysicalConnectionRequirementsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionPhysicalConnectionRequirements)(nil)).Elem()
}

func (i *connectionPhysicalConnectionRequirementsPtrType) ToConnectionPhysicalConnectionRequirementsPtrOutput() ConnectionPhysicalConnectionRequirementsPtrOutput {
	return i.ToConnectionPhysicalConnectionRequirementsPtrOutputWithContext(context.Background())
}

func (i *connectionPhysicalConnectionRequirementsPtrType) ToConnectionPhysicalConnectionRequirementsPtrOutputWithContext(ctx context.Context) ConnectionPhysicalConnectionRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPhysicalConnectionRequirementsPtrOutput)
}

type ConnectionPhysicalConnectionRequirementsOutput struct{ *pulumi.OutputState }

func (ConnectionPhysicalConnectionRequirementsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionPhysicalConnectionRequirements)(nil)).Elem()
}

func (o ConnectionPhysicalConnectionRequirementsOutput) ToConnectionPhysicalConnectionRequirementsOutput() ConnectionPhysicalConnectionRequirementsOutput {
	return o
}

func (o ConnectionPhysicalConnectionRequirementsOutput) ToConnectionPhysicalConnectionRequirementsOutputWithContext(ctx context.Context) ConnectionPhysicalConnectionRequirementsOutput {
	return o
}

func (o ConnectionPhysicalConnectionRequirementsOutput) ToConnectionPhysicalConnectionRequirementsPtrOutput() ConnectionPhysicalConnectionRequirementsPtrOutput {
	return o.ToConnectionPhysicalConnectionRequirementsPtrOutputWithContext(context.Background())
}

func (o ConnectionPhysicalConnectionRequirementsOutput) ToConnectionPhysicalConnectionRequirementsPtrOutputWithContext(ctx context.Context) ConnectionPhysicalConnectionRequirementsPtrOutput {
	return o.ApplyT(func(v ConnectionPhysicalConnectionRequirements) *ConnectionPhysicalConnectionRequirements {
		return &v
	}).(ConnectionPhysicalConnectionRequirementsPtrOutput)
}

// The availability zone of the connection. This field is redundant and implied by `subnetId`, but is currently an api requirement.
func (o ConnectionPhysicalConnectionRequirementsOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPhysicalConnectionRequirements) *string { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

// The security group ID list used by the connection.
func (o ConnectionPhysicalConnectionRequirementsOutput) SecurityGroupIdLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectionPhysicalConnectionRequirements) []string { return v.SecurityGroupIdLists }).(pulumi.StringArrayOutput)
}

// The subnet ID used by the connection.
func (o ConnectionPhysicalConnectionRequirementsOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPhysicalConnectionRequirements) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type ConnectionPhysicalConnectionRequirementsPtrOutput struct{ *pulumi.OutputState }

func (ConnectionPhysicalConnectionRequirementsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionPhysicalConnectionRequirements)(nil)).Elem()
}

func (o ConnectionPhysicalConnectionRequirementsPtrOutput) ToConnectionPhysicalConnectionRequirementsPtrOutput() ConnectionPhysicalConnectionRequirementsPtrOutput {
	return o
}

func (o ConnectionPhysicalConnectionRequirementsPtrOutput) ToConnectionPhysicalConnectionRequirementsPtrOutputWithContext(ctx context.Context) ConnectionPhysicalConnectionRequirementsPtrOutput {
	return o
}

func (o ConnectionPhysicalConnectionRequirementsPtrOutput) Elem() ConnectionPhysicalConnectionRequirementsOutput {
	return o.ApplyT(func(v *ConnectionPhysicalConnectionRequirements) ConnectionPhysicalConnectionRequirements { return *v }).(ConnectionPhysicalConnectionRequirementsOutput)
}

// The availability zone of the connection. This field is redundant and implied by `subnetId`, but is currently an api requirement.
func (o ConnectionPhysicalConnectionRequirementsPtrOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPhysicalConnectionRequirements) *string {
		if v == nil {
			return nil
		}
		return v.AvailabilityZone
	}).(pulumi.StringPtrOutput)
}

// The security group ID list used by the connection.
func (o ConnectionPhysicalConnectionRequirementsPtrOutput) SecurityGroupIdLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConnectionPhysicalConnectionRequirements) []string {
		if v == nil {
			return nil
		}
		return v.SecurityGroupIdLists
	}).(pulumi.StringArrayOutput)
}

// The subnet ID used by the connection.
func (o ConnectionPhysicalConnectionRequirementsPtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPhysicalConnectionRequirements) *string {
		if v == nil {
			return nil
		}
		return v.SubnetId
	}).(pulumi.StringPtrOutput)
}

type CrawlerCatalogTarget struct {
	// The name of the Glue database to be synchronized.
	DatabaseName string `pulumi:"databaseName"`
	// A list of catalog tables to be synchronized.
	Tables []string `pulumi:"tables"`
}

// CrawlerCatalogTargetInput is an input type that accepts CrawlerCatalogTargetArgs and CrawlerCatalogTargetOutput values.
// You can construct a concrete instance of `CrawlerCatalogTargetInput` via:
//
//          CrawlerCatalogTargetArgs{...}
type CrawlerCatalogTargetInput interface {
	pulumi.Input

	ToCrawlerCatalogTargetOutput() CrawlerCatalogTargetOutput
	ToCrawlerCatalogTargetOutputWithContext(context.Context) CrawlerCatalogTargetOutput
}

type CrawlerCatalogTargetArgs struct {
	// The name of the Glue database to be synchronized.
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// A list of catalog tables to be synchronized.
	Tables pulumi.StringArrayInput `pulumi:"tables"`
}

func (CrawlerCatalogTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerCatalogTarget)(nil)).Elem()
}

func (i CrawlerCatalogTargetArgs) ToCrawlerCatalogTargetOutput() CrawlerCatalogTargetOutput {
	return i.ToCrawlerCatalogTargetOutputWithContext(context.Background())
}

func (i CrawlerCatalogTargetArgs) ToCrawlerCatalogTargetOutputWithContext(ctx context.Context) CrawlerCatalogTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerCatalogTargetOutput)
}

// CrawlerCatalogTargetArrayInput is an input type that accepts CrawlerCatalogTargetArray and CrawlerCatalogTargetArrayOutput values.
// You can construct a concrete instance of `CrawlerCatalogTargetArrayInput` via:
//
//          CrawlerCatalogTargetArray{ CrawlerCatalogTargetArgs{...} }
type CrawlerCatalogTargetArrayInput interface {
	pulumi.Input

	ToCrawlerCatalogTargetArrayOutput() CrawlerCatalogTargetArrayOutput
	ToCrawlerCatalogTargetArrayOutputWithContext(context.Context) CrawlerCatalogTargetArrayOutput
}

type CrawlerCatalogTargetArray []CrawlerCatalogTargetInput

func (CrawlerCatalogTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerCatalogTarget)(nil)).Elem()
}

func (i CrawlerCatalogTargetArray) ToCrawlerCatalogTargetArrayOutput() CrawlerCatalogTargetArrayOutput {
	return i.ToCrawlerCatalogTargetArrayOutputWithContext(context.Background())
}

func (i CrawlerCatalogTargetArray) ToCrawlerCatalogTargetArrayOutputWithContext(ctx context.Context) CrawlerCatalogTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerCatalogTargetArrayOutput)
}

type CrawlerCatalogTargetOutput struct{ *pulumi.OutputState }

func (CrawlerCatalogTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerCatalogTarget)(nil)).Elem()
}

func (o CrawlerCatalogTargetOutput) ToCrawlerCatalogTargetOutput() CrawlerCatalogTargetOutput {
	return o
}

func (o CrawlerCatalogTargetOutput) ToCrawlerCatalogTargetOutputWithContext(ctx context.Context) CrawlerCatalogTargetOutput {
	return o
}

// The name of the Glue database to be synchronized.
func (o CrawlerCatalogTargetOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v CrawlerCatalogTarget) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// A list of catalog tables to be synchronized.
func (o CrawlerCatalogTargetOutput) Tables() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CrawlerCatalogTarget) []string { return v.Tables }).(pulumi.StringArrayOutput)
}

type CrawlerCatalogTargetArrayOutput struct{ *pulumi.OutputState }

func (CrawlerCatalogTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerCatalogTarget)(nil)).Elem()
}

func (o CrawlerCatalogTargetArrayOutput) ToCrawlerCatalogTargetArrayOutput() CrawlerCatalogTargetArrayOutput {
	return o
}

func (o CrawlerCatalogTargetArrayOutput) ToCrawlerCatalogTargetArrayOutputWithContext(ctx context.Context) CrawlerCatalogTargetArrayOutput {
	return o
}

func (o CrawlerCatalogTargetArrayOutput) Index(i pulumi.IntInput) CrawlerCatalogTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CrawlerCatalogTarget {
		return vs[0].([]CrawlerCatalogTarget)[vs[1].(int)]
	}).(CrawlerCatalogTargetOutput)
}

type CrawlerDynamodbTarget struct {
	// The name of the DynamoDB table to crawl.
	Path string `pulumi:"path"`
	// Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table.  defaults to `true`.
	ScanAll *bool `pulumi:"scanAll"`
	// The percentage of the configured read capacity units to use by the AWS Glue crawler. The valid values are null or a value between 0.1 to 1.5.
	ScanRate *float64 `pulumi:"scanRate"`
}

// CrawlerDynamodbTargetInput is an input type that accepts CrawlerDynamodbTargetArgs and CrawlerDynamodbTargetOutput values.
// You can construct a concrete instance of `CrawlerDynamodbTargetInput` via:
//
//          CrawlerDynamodbTargetArgs{...}
type CrawlerDynamodbTargetInput interface {
	pulumi.Input

	ToCrawlerDynamodbTargetOutput() CrawlerDynamodbTargetOutput
	ToCrawlerDynamodbTargetOutputWithContext(context.Context) CrawlerDynamodbTargetOutput
}

type CrawlerDynamodbTargetArgs struct {
	// The name of the DynamoDB table to crawl.
	Path pulumi.StringInput `pulumi:"path"`
	// Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table.  defaults to `true`.
	ScanAll pulumi.BoolPtrInput `pulumi:"scanAll"`
	// The percentage of the configured read capacity units to use by the AWS Glue crawler. The valid values are null or a value between 0.1 to 1.5.
	ScanRate pulumi.Float64PtrInput `pulumi:"scanRate"`
}

func (CrawlerDynamodbTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerDynamodbTarget)(nil)).Elem()
}

func (i CrawlerDynamodbTargetArgs) ToCrawlerDynamodbTargetOutput() CrawlerDynamodbTargetOutput {
	return i.ToCrawlerDynamodbTargetOutputWithContext(context.Background())
}

func (i CrawlerDynamodbTargetArgs) ToCrawlerDynamodbTargetOutputWithContext(ctx context.Context) CrawlerDynamodbTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerDynamodbTargetOutput)
}

// CrawlerDynamodbTargetArrayInput is an input type that accepts CrawlerDynamodbTargetArray and CrawlerDynamodbTargetArrayOutput values.
// You can construct a concrete instance of `CrawlerDynamodbTargetArrayInput` via:
//
//          CrawlerDynamodbTargetArray{ CrawlerDynamodbTargetArgs{...} }
type CrawlerDynamodbTargetArrayInput interface {
	pulumi.Input

	ToCrawlerDynamodbTargetArrayOutput() CrawlerDynamodbTargetArrayOutput
	ToCrawlerDynamodbTargetArrayOutputWithContext(context.Context) CrawlerDynamodbTargetArrayOutput
}

type CrawlerDynamodbTargetArray []CrawlerDynamodbTargetInput

func (CrawlerDynamodbTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerDynamodbTarget)(nil)).Elem()
}

func (i CrawlerDynamodbTargetArray) ToCrawlerDynamodbTargetArrayOutput() CrawlerDynamodbTargetArrayOutput {
	return i.ToCrawlerDynamodbTargetArrayOutputWithContext(context.Background())
}

func (i CrawlerDynamodbTargetArray) ToCrawlerDynamodbTargetArrayOutputWithContext(ctx context.Context) CrawlerDynamodbTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerDynamodbTargetArrayOutput)
}

type CrawlerDynamodbTargetOutput struct{ *pulumi.OutputState }

func (CrawlerDynamodbTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerDynamodbTarget)(nil)).Elem()
}

func (o CrawlerDynamodbTargetOutput) ToCrawlerDynamodbTargetOutput() CrawlerDynamodbTargetOutput {
	return o
}

func (o CrawlerDynamodbTargetOutput) ToCrawlerDynamodbTargetOutputWithContext(ctx context.Context) CrawlerDynamodbTargetOutput {
	return o
}

// The name of the DynamoDB table to crawl.
func (o CrawlerDynamodbTargetOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v CrawlerDynamodbTarget) string { return v.Path }).(pulumi.StringOutput)
}

// Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table.  defaults to `true`.
func (o CrawlerDynamodbTargetOutput) ScanAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CrawlerDynamodbTarget) *bool { return v.ScanAll }).(pulumi.BoolPtrOutput)
}

// The percentage of the configured read capacity units to use by the AWS Glue crawler. The valid values are null or a value between 0.1 to 1.5.
func (o CrawlerDynamodbTargetOutput) ScanRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CrawlerDynamodbTarget) *float64 { return v.ScanRate }).(pulumi.Float64PtrOutput)
}

type CrawlerDynamodbTargetArrayOutput struct{ *pulumi.OutputState }

func (CrawlerDynamodbTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerDynamodbTarget)(nil)).Elem()
}

func (o CrawlerDynamodbTargetArrayOutput) ToCrawlerDynamodbTargetArrayOutput() CrawlerDynamodbTargetArrayOutput {
	return o
}

func (o CrawlerDynamodbTargetArrayOutput) ToCrawlerDynamodbTargetArrayOutputWithContext(ctx context.Context) CrawlerDynamodbTargetArrayOutput {
	return o
}

func (o CrawlerDynamodbTargetArrayOutput) Index(i pulumi.IntInput) CrawlerDynamodbTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CrawlerDynamodbTarget {
		return vs[0].([]CrawlerDynamodbTarget)[vs[1].(int)]
	}).(CrawlerDynamodbTargetOutput)
}

type CrawlerJdbcTarget struct {
	// The name of the connection to use to connect to the JDBC target.
	ConnectionName string `pulumi:"connectionName"`
	// A list of glob patterns used to exclude from the crawl.
	Exclusions []string `pulumi:"exclusions"`
	// The path of the JDBC target.
	Path string `pulumi:"path"`
}

// CrawlerJdbcTargetInput is an input type that accepts CrawlerJdbcTargetArgs and CrawlerJdbcTargetOutput values.
// You can construct a concrete instance of `CrawlerJdbcTargetInput` via:
//
//          CrawlerJdbcTargetArgs{...}
type CrawlerJdbcTargetInput interface {
	pulumi.Input

	ToCrawlerJdbcTargetOutput() CrawlerJdbcTargetOutput
	ToCrawlerJdbcTargetOutputWithContext(context.Context) CrawlerJdbcTargetOutput
}

type CrawlerJdbcTargetArgs struct {
	// The name of the connection to use to connect to the JDBC target.
	ConnectionName pulumi.StringInput `pulumi:"connectionName"`
	// A list of glob patterns used to exclude from the crawl.
	Exclusions pulumi.StringArrayInput `pulumi:"exclusions"`
	// The path of the JDBC target.
	Path pulumi.StringInput `pulumi:"path"`
}

func (CrawlerJdbcTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerJdbcTarget)(nil)).Elem()
}

func (i CrawlerJdbcTargetArgs) ToCrawlerJdbcTargetOutput() CrawlerJdbcTargetOutput {
	return i.ToCrawlerJdbcTargetOutputWithContext(context.Background())
}

func (i CrawlerJdbcTargetArgs) ToCrawlerJdbcTargetOutputWithContext(ctx context.Context) CrawlerJdbcTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerJdbcTargetOutput)
}

// CrawlerJdbcTargetArrayInput is an input type that accepts CrawlerJdbcTargetArray and CrawlerJdbcTargetArrayOutput values.
// You can construct a concrete instance of `CrawlerJdbcTargetArrayInput` via:
//
//          CrawlerJdbcTargetArray{ CrawlerJdbcTargetArgs{...} }
type CrawlerJdbcTargetArrayInput interface {
	pulumi.Input

	ToCrawlerJdbcTargetArrayOutput() CrawlerJdbcTargetArrayOutput
	ToCrawlerJdbcTargetArrayOutputWithContext(context.Context) CrawlerJdbcTargetArrayOutput
}

type CrawlerJdbcTargetArray []CrawlerJdbcTargetInput

func (CrawlerJdbcTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerJdbcTarget)(nil)).Elem()
}

func (i CrawlerJdbcTargetArray) ToCrawlerJdbcTargetArrayOutput() CrawlerJdbcTargetArrayOutput {
	return i.ToCrawlerJdbcTargetArrayOutputWithContext(context.Background())
}

func (i CrawlerJdbcTargetArray) ToCrawlerJdbcTargetArrayOutputWithContext(ctx context.Context) CrawlerJdbcTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerJdbcTargetArrayOutput)
}

type CrawlerJdbcTargetOutput struct{ *pulumi.OutputState }

func (CrawlerJdbcTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerJdbcTarget)(nil)).Elem()
}

func (o CrawlerJdbcTargetOutput) ToCrawlerJdbcTargetOutput() CrawlerJdbcTargetOutput {
	return o
}

func (o CrawlerJdbcTargetOutput) ToCrawlerJdbcTargetOutputWithContext(ctx context.Context) CrawlerJdbcTargetOutput {
	return o
}

// The name of the connection to use to connect to the JDBC target.
func (o CrawlerJdbcTargetOutput) ConnectionName() pulumi.StringOutput {
	return o.ApplyT(func(v CrawlerJdbcTarget) string { return v.ConnectionName }).(pulumi.StringOutput)
}

// A list of glob patterns used to exclude from the crawl.
func (o CrawlerJdbcTargetOutput) Exclusions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CrawlerJdbcTarget) []string { return v.Exclusions }).(pulumi.StringArrayOutput)
}

// The path of the JDBC target.
func (o CrawlerJdbcTargetOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v CrawlerJdbcTarget) string { return v.Path }).(pulumi.StringOutput)
}

type CrawlerJdbcTargetArrayOutput struct{ *pulumi.OutputState }

func (CrawlerJdbcTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerJdbcTarget)(nil)).Elem()
}

func (o CrawlerJdbcTargetArrayOutput) ToCrawlerJdbcTargetArrayOutput() CrawlerJdbcTargetArrayOutput {
	return o
}

func (o CrawlerJdbcTargetArrayOutput) ToCrawlerJdbcTargetArrayOutputWithContext(ctx context.Context) CrawlerJdbcTargetArrayOutput {
	return o
}

func (o CrawlerJdbcTargetArrayOutput) Index(i pulumi.IntInput) CrawlerJdbcTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CrawlerJdbcTarget {
		return vs[0].([]CrawlerJdbcTarget)[vs[1].(int)]
	}).(CrawlerJdbcTargetOutput)
}

type CrawlerMongodbTarget struct {
	// The name of the connection to use to connect to the Amazon DocumentDB or MongoDB target.
	ConnectionName string `pulumi:"connectionName"`
	// The path of the Amazon DocumentDB or MongoDB target (database/collection).
	Path string `pulumi:"path"`
	// Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table. Default value is `true`.
	ScanAll *bool `pulumi:"scanAll"`
}

// CrawlerMongodbTargetInput is an input type that accepts CrawlerMongodbTargetArgs and CrawlerMongodbTargetOutput values.
// You can construct a concrete instance of `CrawlerMongodbTargetInput` via:
//
//          CrawlerMongodbTargetArgs{...}
type CrawlerMongodbTargetInput interface {
	pulumi.Input

	ToCrawlerMongodbTargetOutput() CrawlerMongodbTargetOutput
	ToCrawlerMongodbTargetOutputWithContext(context.Context) CrawlerMongodbTargetOutput
}

type CrawlerMongodbTargetArgs struct {
	// The name of the connection to use to connect to the Amazon DocumentDB or MongoDB target.
	ConnectionName pulumi.StringInput `pulumi:"connectionName"`
	// The path of the Amazon DocumentDB or MongoDB target (database/collection).
	Path pulumi.StringInput `pulumi:"path"`
	// Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table. Default value is `true`.
	ScanAll pulumi.BoolPtrInput `pulumi:"scanAll"`
}

func (CrawlerMongodbTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerMongodbTarget)(nil)).Elem()
}

func (i CrawlerMongodbTargetArgs) ToCrawlerMongodbTargetOutput() CrawlerMongodbTargetOutput {
	return i.ToCrawlerMongodbTargetOutputWithContext(context.Background())
}

func (i CrawlerMongodbTargetArgs) ToCrawlerMongodbTargetOutputWithContext(ctx context.Context) CrawlerMongodbTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerMongodbTargetOutput)
}

// CrawlerMongodbTargetArrayInput is an input type that accepts CrawlerMongodbTargetArray and CrawlerMongodbTargetArrayOutput values.
// You can construct a concrete instance of `CrawlerMongodbTargetArrayInput` via:
//
//          CrawlerMongodbTargetArray{ CrawlerMongodbTargetArgs{...} }
type CrawlerMongodbTargetArrayInput interface {
	pulumi.Input

	ToCrawlerMongodbTargetArrayOutput() CrawlerMongodbTargetArrayOutput
	ToCrawlerMongodbTargetArrayOutputWithContext(context.Context) CrawlerMongodbTargetArrayOutput
}

type CrawlerMongodbTargetArray []CrawlerMongodbTargetInput

func (CrawlerMongodbTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerMongodbTarget)(nil)).Elem()
}

func (i CrawlerMongodbTargetArray) ToCrawlerMongodbTargetArrayOutput() CrawlerMongodbTargetArrayOutput {
	return i.ToCrawlerMongodbTargetArrayOutputWithContext(context.Background())
}

func (i CrawlerMongodbTargetArray) ToCrawlerMongodbTargetArrayOutputWithContext(ctx context.Context) CrawlerMongodbTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerMongodbTargetArrayOutput)
}

type CrawlerMongodbTargetOutput struct{ *pulumi.OutputState }

func (CrawlerMongodbTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerMongodbTarget)(nil)).Elem()
}

func (o CrawlerMongodbTargetOutput) ToCrawlerMongodbTargetOutput() CrawlerMongodbTargetOutput {
	return o
}

func (o CrawlerMongodbTargetOutput) ToCrawlerMongodbTargetOutputWithContext(ctx context.Context) CrawlerMongodbTargetOutput {
	return o
}

// The name of the connection to use to connect to the Amazon DocumentDB or MongoDB target.
func (o CrawlerMongodbTargetOutput) ConnectionName() pulumi.StringOutput {
	return o.ApplyT(func(v CrawlerMongodbTarget) string { return v.ConnectionName }).(pulumi.StringOutput)
}

// The path of the Amazon DocumentDB or MongoDB target (database/collection).
func (o CrawlerMongodbTargetOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v CrawlerMongodbTarget) string { return v.Path }).(pulumi.StringOutput)
}

// Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table. Default value is `true`.
func (o CrawlerMongodbTargetOutput) ScanAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CrawlerMongodbTarget) *bool { return v.ScanAll }).(pulumi.BoolPtrOutput)
}

type CrawlerMongodbTargetArrayOutput struct{ *pulumi.OutputState }

func (CrawlerMongodbTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerMongodbTarget)(nil)).Elem()
}

func (o CrawlerMongodbTargetArrayOutput) ToCrawlerMongodbTargetArrayOutput() CrawlerMongodbTargetArrayOutput {
	return o
}

func (o CrawlerMongodbTargetArrayOutput) ToCrawlerMongodbTargetArrayOutputWithContext(ctx context.Context) CrawlerMongodbTargetArrayOutput {
	return o
}

func (o CrawlerMongodbTargetArrayOutput) Index(i pulumi.IntInput) CrawlerMongodbTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CrawlerMongodbTarget {
		return vs[0].([]CrawlerMongodbTarget)[vs[1].(int)]
	}).(CrawlerMongodbTargetOutput)
}

type CrawlerS3Target struct {
	// The name of the connection to use to connect to the JDBC target.
	ConnectionName *string `pulumi:"connectionName"`
	// A list of glob patterns used to exclude from the crawl.
	Exclusions []string `pulumi:"exclusions"`
	// The name of the DynamoDB table to crawl.
	Path string `pulumi:"path"`
}

// CrawlerS3TargetInput is an input type that accepts CrawlerS3TargetArgs and CrawlerS3TargetOutput values.
// You can construct a concrete instance of `CrawlerS3TargetInput` via:
//
//          CrawlerS3TargetArgs{...}
type CrawlerS3TargetInput interface {
	pulumi.Input

	ToCrawlerS3TargetOutput() CrawlerS3TargetOutput
	ToCrawlerS3TargetOutputWithContext(context.Context) CrawlerS3TargetOutput
}

type CrawlerS3TargetArgs struct {
	// The name of the connection to use to connect to the JDBC target.
	ConnectionName pulumi.StringPtrInput `pulumi:"connectionName"`
	// A list of glob patterns used to exclude from the crawl.
	Exclusions pulumi.StringArrayInput `pulumi:"exclusions"`
	// The name of the DynamoDB table to crawl.
	Path pulumi.StringInput `pulumi:"path"`
}

func (CrawlerS3TargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerS3Target)(nil)).Elem()
}

func (i CrawlerS3TargetArgs) ToCrawlerS3TargetOutput() CrawlerS3TargetOutput {
	return i.ToCrawlerS3TargetOutputWithContext(context.Background())
}

func (i CrawlerS3TargetArgs) ToCrawlerS3TargetOutputWithContext(ctx context.Context) CrawlerS3TargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerS3TargetOutput)
}

// CrawlerS3TargetArrayInput is an input type that accepts CrawlerS3TargetArray and CrawlerS3TargetArrayOutput values.
// You can construct a concrete instance of `CrawlerS3TargetArrayInput` via:
//
//          CrawlerS3TargetArray{ CrawlerS3TargetArgs{...} }
type CrawlerS3TargetArrayInput interface {
	pulumi.Input

	ToCrawlerS3TargetArrayOutput() CrawlerS3TargetArrayOutput
	ToCrawlerS3TargetArrayOutputWithContext(context.Context) CrawlerS3TargetArrayOutput
}

type CrawlerS3TargetArray []CrawlerS3TargetInput

func (CrawlerS3TargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerS3Target)(nil)).Elem()
}

func (i CrawlerS3TargetArray) ToCrawlerS3TargetArrayOutput() CrawlerS3TargetArrayOutput {
	return i.ToCrawlerS3TargetArrayOutputWithContext(context.Background())
}

func (i CrawlerS3TargetArray) ToCrawlerS3TargetArrayOutputWithContext(ctx context.Context) CrawlerS3TargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerS3TargetArrayOutput)
}

type CrawlerS3TargetOutput struct{ *pulumi.OutputState }

func (CrawlerS3TargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerS3Target)(nil)).Elem()
}

func (o CrawlerS3TargetOutput) ToCrawlerS3TargetOutput() CrawlerS3TargetOutput {
	return o
}

func (o CrawlerS3TargetOutput) ToCrawlerS3TargetOutputWithContext(ctx context.Context) CrawlerS3TargetOutput {
	return o
}

// The name of the connection to use to connect to the JDBC target.
func (o CrawlerS3TargetOutput) ConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerS3Target) *string { return v.ConnectionName }).(pulumi.StringPtrOutput)
}

// A list of glob patterns used to exclude from the crawl.
func (o CrawlerS3TargetOutput) Exclusions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CrawlerS3Target) []string { return v.Exclusions }).(pulumi.StringArrayOutput)
}

// The name of the DynamoDB table to crawl.
func (o CrawlerS3TargetOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v CrawlerS3Target) string { return v.Path }).(pulumi.StringOutput)
}

type CrawlerS3TargetArrayOutput struct{ *pulumi.OutputState }

func (CrawlerS3TargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerS3Target)(nil)).Elem()
}

func (o CrawlerS3TargetArrayOutput) ToCrawlerS3TargetArrayOutput() CrawlerS3TargetArrayOutput {
	return o
}

func (o CrawlerS3TargetArrayOutput) ToCrawlerS3TargetArrayOutputWithContext(ctx context.Context) CrawlerS3TargetArrayOutput {
	return o
}

func (o CrawlerS3TargetArrayOutput) Index(i pulumi.IntInput) CrawlerS3TargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CrawlerS3Target {
		return vs[0].([]CrawlerS3Target)[vs[1].(int)]
	}).(CrawlerS3TargetOutput)
}

type CrawlerSchemaChangePolicy struct {
	// The deletion behavior when the crawler finds a deleted object. Valid values: `LOG`, `DELETE_FROM_DATABASE`, or `DEPRECATE_IN_DATABASE`. Defaults to `DEPRECATE_IN_DATABASE`.
	DeleteBehavior *string `pulumi:"deleteBehavior"`
	// The update behavior when the crawler finds a changed schema. Valid values: `LOG` or `UPDATE_IN_DATABASE`. Defaults to `UPDATE_IN_DATABASE`.
	UpdateBehavior *string `pulumi:"updateBehavior"`
}

// CrawlerSchemaChangePolicyInput is an input type that accepts CrawlerSchemaChangePolicyArgs and CrawlerSchemaChangePolicyOutput values.
// You can construct a concrete instance of `CrawlerSchemaChangePolicyInput` via:
//
//          CrawlerSchemaChangePolicyArgs{...}
type CrawlerSchemaChangePolicyInput interface {
	pulumi.Input

	ToCrawlerSchemaChangePolicyOutput() CrawlerSchemaChangePolicyOutput
	ToCrawlerSchemaChangePolicyOutputWithContext(context.Context) CrawlerSchemaChangePolicyOutput
}

type CrawlerSchemaChangePolicyArgs struct {
	// The deletion behavior when the crawler finds a deleted object. Valid values: `LOG`, `DELETE_FROM_DATABASE`, or `DEPRECATE_IN_DATABASE`. Defaults to `DEPRECATE_IN_DATABASE`.
	DeleteBehavior pulumi.StringPtrInput `pulumi:"deleteBehavior"`
	// The update behavior when the crawler finds a changed schema. Valid values: `LOG` or `UPDATE_IN_DATABASE`. Defaults to `UPDATE_IN_DATABASE`.
	UpdateBehavior pulumi.StringPtrInput `pulumi:"updateBehavior"`
}

func (CrawlerSchemaChangePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerSchemaChangePolicy)(nil)).Elem()
}

func (i CrawlerSchemaChangePolicyArgs) ToCrawlerSchemaChangePolicyOutput() CrawlerSchemaChangePolicyOutput {
	return i.ToCrawlerSchemaChangePolicyOutputWithContext(context.Background())
}

func (i CrawlerSchemaChangePolicyArgs) ToCrawlerSchemaChangePolicyOutputWithContext(ctx context.Context) CrawlerSchemaChangePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerSchemaChangePolicyOutput)
}

func (i CrawlerSchemaChangePolicyArgs) ToCrawlerSchemaChangePolicyPtrOutput() CrawlerSchemaChangePolicyPtrOutput {
	return i.ToCrawlerSchemaChangePolicyPtrOutputWithContext(context.Background())
}

func (i CrawlerSchemaChangePolicyArgs) ToCrawlerSchemaChangePolicyPtrOutputWithContext(ctx context.Context) CrawlerSchemaChangePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerSchemaChangePolicyOutput).ToCrawlerSchemaChangePolicyPtrOutputWithContext(ctx)
}

// CrawlerSchemaChangePolicyPtrInput is an input type that accepts CrawlerSchemaChangePolicyArgs, CrawlerSchemaChangePolicyPtr and CrawlerSchemaChangePolicyPtrOutput values.
// You can construct a concrete instance of `CrawlerSchemaChangePolicyPtrInput` via:
//
//          CrawlerSchemaChangePolicyArgs{...}
//
//  or:
//
//          nil
type CrawlerSchemaChangePolicyPtrInput interface {
	pulumi.Input

	ToCrawlerSchemaChangePolicyPtrOutput() CrawlerSchemaChangePolicyPtrOutput
	ToCrawlerSchemaChangePolicyPtrOutputWithContext(context.Context) CrawlerSchemaChangePolicyPtrOutput
}

type crawlerSchemaChangePolicyPtrType CrawlerSchemaChangePolicyArgs

func CrawlerSchemaChangePolicyPtr(v *CrawlerSchemaChangePolicyArgs) CrawlerSchemaChangePolicyPtrInput {
	return (*crawlerSchemaChangePolicyPtrType)(v)
}

func (*crawlerSchemaChangePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CrawlerSchemaChangePolicy)(nil)).Elem()
}

func (i *crawlerSchemaChangePolicyPtrType) ToCrawlerSchemaChangePolicyPtrOutput() CrawlerSchemaChangePolicyPtrOutput {
	return i.ToCrawlerSchemaChangePolicyPtrOutputWithContext(context.Background())
}

func (i *crawlerSchemaChangePolicyPtrType) ToCrawlerSchemaChangePolicyPtrOutputWithContext(ctx context.Context) CrawlerSchemaChangePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerSchemaChangePolicyPtrOutput)
}

type CrawlerSchemaChangePolicyOutput struct{ *pulumi.OutputState }

func (CrawlerSchemaChangePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerSchemaChangePolicy)(nil)).Elem()
}

func (o CrawlerSchemaChangePolicyOutput) ToCrawlerSchemaChangePolicyOutput() CrawlerSchemaChangePolicyOutput {
	return o
}

func (o CrawlerSchemaChangePolicyOutput) ToCrawlerSchemaChangePolicyOutputWithContext(ctx context.Context) CrawlerSchemaChangePolicyOutput {
	return o
}

func (o CrawlerSchemaChangePolicyOutput) ToCrawlerSchemaChangePolicyPtrOutput() CrawlerSchemaChangePolicyPtrOutput {
	return o.ToCrawlerSchemaChangePolicyPtrOutputWithContext(context.Background())
}

func (o CrawlerSchemaChangePolicyOutput) ToCrawlerSchemaChangePolicyPtrOutputWithContext(ctx context.Context) CrawlerSchemaChangePolicyPtrOutput {
	return o.ApplyT(func(v CrawlerSchemaChangePolicy) *CrawlerSchemaChangePolicy {
		return &v
	}).(CrawlerSchemaChangePolicyPtrOutput)
}

// The deletion behavior when the crawler finds a deleted object. Valid values: `LOG`, `DELETE_FROM_DATABASE`, or `DEPRECATE_IN_DATABASE`. Defaults to `DEPRECATE_IN_DATABASE`.
func (o CrawlerSchemaChangePolicyOutput) DeleteBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerSchemaChangePolicy) *string { return v.DeleteBehavior }).(pulumi.StringPtrOutput)
}

// The update behavior when the crawler finds a changed schema. Valid values: `LOG` or `UPDATE_IN_DATABASE`. Defaults to `UPDATE_IN_DATABASE`.
func (o CrawlerSchemaChangePolicyOutput) UpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerSchemaChangePolicy) *string { return v.UpdateBehavior }).(pulumi.StringPtrOutput)
}

type CrawlerSchemaChangePolicyPtrOutput struct{ *pulumi.OutputState }

func (CrawlerSchemaChangePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CrawlerSchemaChangePolicy)(nil)).Elem()
}

func (o CrawlerSchemaChangePolicyPtrOutput) ToCrawlerSchemaChangePolicyPtrOutput() CrawlerSchemaChangePolicyPtrOutput {
	return o
}

func (o CrawlerSchemaChangePolicyPtrOutput) ToCrawlerSchemaChangePolicyPtrOutputWithContext(ctx context.Context) CrawlerSchemaChangePolicyPtrOutput {
	return o
}

func (o CrawlerSchemaChangePolicyPtrOutput) Elem() CrawlerSchemaChangePolicyOutput {
	return o.ApplyT(func(v *CrawlerSchemaChangePolicy) CrawlerSchemaChangePolicy { return *v }).(CrawlerSchemaChangePolicyOutput)
}

// The deletion behavior when the crawler finds a deleted object. Valid values: `LOG`, `DELETE_FROM_DATABASE`, or `DEPRECATE_IN_DATABASE`. Defaults to `DEPRECATE_IN_DATABASE`.
func (o CrawlerSchemaChangePolicyPtrOutput) DeleteBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CrawlerSchemaChangePolicy) *string {
		if v == nil {
			return nil
		}
		return v.DeleteBehavior
	}).(pulumi.StringPtrOutput)
}

// The update behavior when the crawler finds a changed schema. Valid values: `LOG` or `UPDATE_IN_DATABASE`. Defaults to `UPDATE_IN_DATABASE`.
func (o CrawlerSchemaChangePolicyPtrOutput) UpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CrawlerSchemaChangePolicy) *string {
		if v == nil {
			return nil
		}
		return v.UpdateBehavior
	}).(pulumi.StringPtrOutput)
}

type DataCatalogEncryptionSettingsDataCatalogEncryptionSettings struct {
	// When connection password protection is enabled, the Data Catalog uses a customer-provided key to encrypt the password as part of CreateConnection or UpdateConnection and store it in the ENCRYPTED_PASSWORD field in the connection properties. You can enable catalog encryption or only password encryption. see Connection Password Encryption.
	ConnectionPasswordEncryption DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryption `pulumi:"connectionPasswordEncryption"`
	// Specifies the encryption-at-rest configuration for the Data Catalog. see Encryption At Rest.
	EncryptionAtRest DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRest `pulumi:"encryptionAtRest"`
}

// DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsInput is an input type that accepts DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsArgs and DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput values.
// You can construct a concrete instance of `DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsInput` via:
//
//          DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsArgs{...}
type DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsInput interface {
	pulumi.Input

	ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput() DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput
	ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutputWithContext(context.Context) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput
}

type DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsArgs struct {
	// When connection password protection is enabled, the Data Catalog uses a customer-provided key to encrypt the password as part of CreateConnection or UpdateConnection and store it in the ENCRYPTED_PASSWORD field in the connection properties. You can enable catalog encryption or only password encryption. see Connection Password Encryption.
	ConnectionPasswordEncryption DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionInput `pulumi:"connectionPasswordEncryption"`
	// Specifies the encryption-at-rest configuration for the Data Catalog. see Encryption At Rest.
	EncryptionAtRest DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestInput `pulumi:"encryptionAtRest"`
}

func (DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCatalogEncryptionSettingsDataCatalogEncryptionSettings)(nil)).Elem()
}

func (i DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsArgs) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput() DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput {
	return i.ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutputWithContext(context.Background())
}

func (i DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsArgs) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput)
}

func (i DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsArgs) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrOutput() DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrOutput {
	return i.ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrOutputWithContext(context.Background())
}

func (i DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsArgs) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput).ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrOutputWithContext(ctx)
}

// DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrInput is an input type that accepts DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsArgs, DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtr and DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrOutput values.
// You can construct a concrete instance of `DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrInput` via:
//
//          DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsArgs{...}
//
//  or:
//
//          nil
type DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrInput interface {
	pulumi.Input

	ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrOutput() DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrOutput
	ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrOutputWithContext(context.Context) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrOutput
}

type dataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrType DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsArgs

func DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtr(v *DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsArgs) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrInput {
	return (*dataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrType)(v)
}

func (*dataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCatalogEncryptionSettingsDataCatalogEncryptionSettings)(nil)).Elem()
}

func (i *dataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrType) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrOutput() DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrOutput {
	return i.ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrOutputWithContext(context.Background())
}

func (i *dataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrType) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrOutput)
}

type DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput struct{ *pulumi.OutputState }

func (DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCatalogEncryptionSettingsDataCatalogEncryptionSettings)(nil)).Elem()
}

func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput() DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput {
	return o
}

func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput {
	return o
}

func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrOutput() DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrOutput {
	return o.ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrOutputWithContext(context.Background())
}

func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrOutput {
	return o.ApplyT(func(v DataCatalogEncryptionSettingsDataCatalogEncryptionSettings) *DataCatalogEncryptionSettingsDataCatalogEncryptionSettings {
		return &v
	}).(DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrOutput)
}

// When connection password protection is enabled, the Data Catalog uses a customer-provided key to encrypt the password as part of CreateConnection or UpdateConnection and store it in the ENCRYPTED_PASSWORD field in the connection properties. You can enable catalog encryption or only password encryption. see Connection Password Encryption.
func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput) ConnectionPasswordEncryption() DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput {
	return o.ApplyT(func(v DataCatalogEncryptionSettingsDataCatalogEncryptionSettings) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryption {
		return v.ConnectionPasswordEncryption
	}).(DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput)
}

// Specifies the encryption-at-rest configuration for the Data Catalog. see Encryption At Rest.
func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput) EncryptionAtRest() DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput {
	return o.ApplyT(func(v DataCatalogEncryptionSettingsDataCatalogEncryptionSettings) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRest {
		return v.EncryptionAtRest
	}).(DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput)
}

type DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrOutput struct{ *pulumi.OutputState }

func (DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCatalogEncryptionSettingsDataCatalogEncryptionSettings)(nil)).Elem()
}

func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrOutput) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrOutput() DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrOutput {
	return o
}

func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrOutput) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrOutput {
	return o
}

func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrOutput) Elem() DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput {
	return o.ApplyT(func(v *DataCatalogEncryptionSettingsDataCatalogEncryptionSettings) DataCatalogEncryptionSettingsDataCatalogEncryptionSettings {
		return *v
	}).(DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput)
}

// When connection password protection is enabled, the Data Catalog uses a customer-provided key to encrypt the password as part of CreateConnection or UpdateConnection and store it in the ENCRYPTED_PASSWORD field in the connection properties. You can enable catalog encryption or only password encryption. see Connection Password Encryption.
func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrOutput) ConnectionPasswordEncryption() DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput {
	return o.ApplyT(func(v *DataCatalogEncryptionSettingsDataCatalogEncryptionSettings) *DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryption {
		if v == nil {
			return nil
		}
		return &v.ConnectionPasswordEncryption
	}).(DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput)
}

// Specifies the encryption-at-rest configuration for the Data Catalog. see Encryption At Rest.
func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrOutput) EncryptionAtRest() DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrOutput {
	return o.ApplyT(func(v *DataCatalogEncryptionSettingsDataCatalogEncryptionSettings) *DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRest {
		if v == nil {
			return nil
		}
		return &v.EncryptionAtRest
	}).(DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrOutput)
}

type DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryption struct {
	// A KMS key ARN that is used to encrypt the connection password. If connection password protection is enabled, the caller of CreateConnection and UpdateConnection needs at least `kms:Encrypt` permission on the specified AWS KMS key, to encrypt passwords before storing them in the Data Catalog.
	AwsKmsKeyId *string `pulumi:"awsKmsKeyId"`
	// When set to `true`, passwords remain encrypted in the responses of GetConnection and GetConnections. This encryption takes effect independently of the catalog encryption.
	ReturnConnectionPasswordEncrypted bool `pulumi:"returnConnectionPasswordEncrypted"`
}

// DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionInput is an input type that accepts DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionArgs and DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput values.
// You can construct a concrete instance of `DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionInput` via:
//
//          DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionArgs{...}
type DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionInput interface {
	pulumi.Input

	ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput() DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput
	ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutputWithContext(context.Context) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput
}

type DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionArgs struct {
	// A KMS key ARN that is used to encrypt the connection password. If connection password protection is enabled, the caller of CreateConnection and UpdateConnection needs at least `kms:Encrypt` permission on the specified AWS KMS key, to encrypt passwords before storing them in the Data Catalog.
	AwsKmsKeyId pulumi.StringPtrInput `pulumi:"awsKmsKeyId"`
	// When set to `true`, passwords remain encrypted in the responses of GetConnection and GetConnections. This encryption takes effect independently of the catalog encryption.
	ReturnConnectionPasswordEncrypted pulumi.BoolInput `pulumi:"returnConnectionPasswordEncrypted"`
}

func (DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryption)(nil)).Elem()
}

func (i DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionArgs) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput() DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput {
	return i.ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutputWithContext(context.Background())
}

func (i DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionArgs) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput)
}

func (i DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionArgs) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput() DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput {
	return i.ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutputWithContext(context.Background())
}

func (i DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionArgs) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput).ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutputWithContext(ctx)
}

// DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrInput is an input type that accepts DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionArgs, DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtr and DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput values.
// You can construct a concrete instance of `DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrInput` via:
//
//          DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionArgs{...}
//
//  or:
//
//          nil
type DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrInput interface {
	pulumi.Input

	ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput() DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput
	ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutputWithContext(context.Context) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput
}

type dataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrType DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionArgs

func DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtr(v *DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionArgs) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrInput {
	return (*dataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrType)(v)
}

func (*dataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryption)(nil)).Elem()
}

func (i *dataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrType) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput() DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput {
	return i.ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutputWithContext(context.Background())
}

func (i *dataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrType) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput)
}

type DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput struct{ *pulumi.OutputState }

func (DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryption)(nil)).Elem()
}

func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput() DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput {
	return o
}

func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput {
	return o
}

func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput() DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput {
	return o.ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutputWithContext(context.Background())
}

func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput {
	return o.ApplyT(func(v DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryption) *DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryption {
		return &v
	}).(DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput)
}

// A KMS key ARN that is used to encrypt the connection password. If connection password protection is enabled, the caller of CreateConnection and UpdateConnection needs at least `kms:Encrypt` permission on the specified AWS KMS key, to encrypt passwords before storing them in the Data Catalog.
func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput) AwsKmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryption) *string {
		return v.AwsKmsKeyId
	}).(pulumi.StringPtrOutput)
}

// When set to `true`, passwords remain encrypted in the responses of GetConnection and GetConnections. This encryption takes effect independently of the catalog encryption.
func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput) ReturnConnectionPasswordEncrypted() pulumi.BoolOutput {
	return o.ApplyT(func(v DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryption) bool {
		return v.ReturnConnectionPasswordEncrypted
	}).(pulumi.BoolOutput)
}

type DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput struct{ *pulumi.OutputState }

func (DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryption)(nil)).Elem()
}

func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput() DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput {
	return o
}

func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput {
	return o
}

func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput) Elem() DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput {
	return o.ApplyT(func(v *DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryption) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryption {
		return *v
	}).(DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput)
}

// A KMS key ARN that is used to encrypt the connection password. If connection password protection is enabled, the caller of CreateConnection and UpdateConnection needs at least `kms:Encrypt` permission on the specified AWS KMS key, to encrypt passwords before storing them in the Data Catalog.
func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput) AwsKmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryption) *string {
		if v == nil {
			return nil
		}
		return v.AwsKmsKeyId
	}).(pulumi.StringPtrOutput)
}

// When set to `true`, passwords remain encrypted in the responses of GetConnection and GetConnections. This encryption takes effect independently of the catalog encryption.
func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput) ReturnConnectionPasswordEncrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryption) *bool {
		if v == nil {
			return nil
		}
		return &v.ReturnConnectionPasswordEncrypted
	}).(pulumi.BoolPtrOutput)
}

type DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRest struct {
	// The encryption-at-rest mode for encrypting Data Catalog data. Valid values are `DISABLED` and `SSE-KMS`.
	CatalogEncryptionMode string `pulumi:"catalogEncryptionMode"`
	// The ARN of the AWS KMS key to use for encryption at rest.
	SseAwsKmsKeyId *string `pulumi:"sseAwsKmsKeyId"`
}

// DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestInput is an input type that accepts DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestArgs and DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput values.
// You can construct a concrete instance of `DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestInput` via:
//
//          DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestArgs{...}
type DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestInput interface {
	pulumi.Input

	ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput() DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput
	ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutputWithContext(context.Context) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput
}

type DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestArgs struct {
	// The encryption-at-rest mode for encrypting Data Catalog data. Valid values are `DISABLED` and `SSE-KMS`.
	CatalogEncryptionMode pulumi.StringInput `pulumi:"catalogEncryptionMode"`
	// The ARN of the AWS KMS key to use for encryption at rest.
	SseAwsKmsKeyId pulumi.StringPtrInput `pulumi:"sseAwsKmsKeyId"`
}

func (DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRest)(nil)).Elem()
}

func (i DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestArgs) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput() DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput {
	return i.ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutputWithContext(context.Background())
}

func (i DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestArgs) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput)
}

func (i DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestArgs) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrOutput() DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrOutput {
	return i.ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrOutputWithContext(context.Background())
}

func (i DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestArgs) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput).ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrOutputWithContext(ctx)
}

// DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrInput is an input type that accepts DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestArgs, DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtr and DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrOutput values.
// You can construct a concrete instance of `DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrInput` via:
//
//          DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestArgs{...}
//
//  or:
//
//          nil
type DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrInput interface {
	pulumi.Input

	ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrOutput() DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrOutput
	ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrOutputWithContext(context.Context) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrOutput
}

type dataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrType DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestArgs

func DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtr(v *DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestArgs) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrInput {
	return (*dataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrType)(v)
}

func (*dataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRest)(nil)).Elem()
}

func (i *dataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrType) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrOutput() DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrOutput {
	return i.ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrOutputWithContext(context.Background())
}

func (i *dataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrType) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrOutput)
}

type DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput struct{ *pulumi.OutputState }

func (DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRest)(nil)).Elem()
}

func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput() DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput {
	return o
}

func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput {
	return o
}

func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrOutput() DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrOutput {
	return o.ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrOutputWithContext(context.Background())
}

func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrOutput {
	return o.ApplyT(func(v DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRest) *DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRest {
		return &v
	}).(DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrOutput)
}

// The encryption-at-rest mode for encrypting Data Catalog data. Valid values are `DISABLED` and `SSE-KMS`.
func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput) CatalogEncryptionMode() pulumi.StringOutput {
	return o.ApplyT(func(v DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRest) string {
		return v.CatalogEncryptionMode
	}).(pulumi.StringOutput)
}

// The ARN of the AWS KMS key to use for encryption at rest.
func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput) SseAwsKmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRest) *string {
		return v.SseAwsKmsKeyId
	}).(pulumi.StringPtrOutput)
}

type DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrOutput struct{ *pulumi.OutputState }

func (DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRest)(nil)).Elem()
}

func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrOutput) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrOutput() DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrOutput {
	return o
}

func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrOutput) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrOutput {
	return o
}

func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrOutput) Elem() DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput {
	return o.ApplyT(func(v *DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRest) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRest {
		return *v
	}).(DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput)
}

// The encryption-at-rest mode for encrypting Data Catalog data. Valid values are `DISABLED` and `SSE-KMS`.
func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrOutput) CatalogEncryptionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRest) *string {
		if v == nil {
			return nil
		}
		return &v.CatalogEncryptionMode
	}).(pulumi.StringPtrOutput)
}

// The ARN of the AWS KMS key to use for encryption at rest.
func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrOutput) SseAwsKmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRest) *string {
		if v == nil {
			return nil
		}
		return v.SseAwsKmsKeyId
	}).(pulumi.StringPtrOutput)
}

type JobCommand struct {
	// The name of the job command. Defaults to `glueetl`. Use `pythonshell` for Python Shell Job Type, `maxCapacity` needs to be set if `pythonshell` is chosen.
	Name *string `pulumi:"name"`
	// The Python version being used to execute a Python shell job. Allowed values are 2 or 3.
	PythonVersion *string `pulumi:"pythonVersion"`
	// Specifies the S3 path to a script that executes a job.
	ScriptLocation string `pulumi:"scriptLocation"`
}

// JobCommandInput is an input type that accepts JobCommandArgs and JobCommandOutput values.
// You can construct a concrete instance of `JobCommandInput` via:
//
//          JobCommandArgs{...}
type JobCommandInput interface {
	pulumi.Input

	ToJobCommandOutput() JobCommandOutput
	ToJobCommandOutputWithContext(context.Context) JobCommandOutput
}

type JobCommandArgs struct {
	// The name of the job command. Defaults to `glueetl`. Use `pythonshell` for Python Shell Job Type, `maxCapacity` needs to be set if `pythonshell` is chosen.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The Python version being used to execute a Python shell job. Allowed values are 2 or 3.
	PythonVersion pulumi.StringPtrInput `pulumi:"pythonVersion"`
	// Specifies the S3 path to a script that executes a job.
	ScriptLocation pulumi.StringInput `pulumi:"scriptLocation"`
}

func (JobCommandArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobCommand)(nil)).Elem()
}

func (i JobCommandArgs) ToJobCommandOutput() JobCommandOutput {
	return i.ToJobCommandOutputWithContext(context.Background())
}

func (i JobCommandArgs) ToJobCommandOutputWithContext(ctx context.Context) JobCommandOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobCommandOutput)
}

func (i JobCommandArgs) ToJobCommandPtrOutput() JobCommandPtrOutput {
	return i.ToJobCommandPtrOutputWithContext(context.Background())
}

func (i JobCommandArgs) ToJobCommandPtrOutputWithContext(ctx context.Context) JobCommandPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobCommandOutput).ToJobCommandPtrOutputWithContext(ctx)
}

// JobCommandPtrInput is an input type that accepts JobCommandArgs, JobCommandPtr and JobCommandPtrOutput values.
// You can construct a concrete instance of `JobCommandPtrInput` via:
//
//          JobCommandArgs{...}
//
//  or:
//
//          nil
type JobCommandPtrInput interface {
	pulumi.Input

	ToJobCommandPtrOutput() JobCommandPtrOutput
	ToJobCommandPtrOutputWithContext(context.Context) JobCommandPtrOutput
}

type jobCommandPtrType JobCommandArgs

func JobCommandPtr(v *JobCommandArgs) JobCommandPtrInput {
	return (*jobCommandPtrType)(v)
}

func (*jobCommandPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobCommand)(nil)).Elem()
}

func (i *jobCommandPtrType) ToJobCommandPtrOutput() JobCommandPtrOutput {
	return i.ToJobCommandPtrOutputWithContext(context.Background())
}

func (i *jobCommandPtrType) ToJobCommandPtrOutputWithContext(ctx context.Context) JobCommandPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobCommandPtrOutput)
}

type JobCommandOutput struct{ *pulumi.OutputState }

func (JobCommandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobCommand)(nil)).Elem()
}

func (o JobCommandOutput) ToJobCommandOutput() JobCommandOutput {
	return o
}

func (o JobCommandOutput) ToJobCommandOutputWithContext(ctx context.Context) JobCommandOutput {
	return o
}

func (o JobCommandOutput) ToJobCommandPtrOutput() JobCommandPtrOutput {
	return o.ToJobCommandPtrOutputWithContext(context.Background())
}

func (o JobCommandOutput) ToJobCommandPtrOutputWithContext(ctx context.Context) JobCommandPtrOutput {
	return o.ApplyT(func(v JobCommand) *JobCommand {
		return &v
	}).(JobCommandPtrOutput)
}

// The name of the job command. Defaults to `glueetl`. Use `pythonshell` for Python Shell Job Type, `maxCapacity` needs to be set if `pythonshell` is chosen.
func (o JobCommandOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobCommand) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The Python version being used to execute a Python shell job. Allowed values are 2 or 3.
func (o JobCommandOutput) PythonVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobCommand) *string { return v.PythonVersion }).(pulumi.StringPtrOutput)
}

// Specifies the S3 path to a script that executes a job.
func (o JobCommandOutput) ScriptLocation() pulumi.StringOutput {
	return o.ApplyT(func(v JobCommand) string { return v.ScriptLocation }).(pulumi.StringOutput)
}

type JobCommandPtrOutput struct{ *pulumi.OutputState }

func (JobCommandPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobCommand)(nil)).Elem()
}

func (o JobCommandPtrOutput) ToJobCommandPtrOutput() JobCommandPtrOutput {
	return o
}

func (o JobCommandPtrOutput) ToJobCommandPtrOutputWithContext(ctx context.Context) JobCommandPtrOutput {
	return o
}

func (o JobCommandPtrOutput) Elem() JobCommandOutput {
	return o.ApplyT(func(v *JobCommand) JobCommand { return *v }).(JobCommandOutput)
}

// The name of the job command. Defaults to `glueetl`. Use `pythonshell` for Python Shell Job Type, `maxCapacity` needs to be set if `pythonshell` is chosen.
func (o JobCommandPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobCommand) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The Python version being used to execute a Python shell job. Allowed values are 2 or 3.
func (o JobCommandPtrOutput) PythonVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobCommand) *string {
		if v == nil {
			return nil
		}
		return v.PythonVersion
	}).(pulumi.StringPtrOutput)
}

// Specifies the S3 path to a script that executes a job.
func (o JobCommandPtrOutput) ScriptLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobCommand) *string {
		if v == nil {
			return nil
		}
		return &v.ScriptLocation
	}).(pulumi.StringPtrOutput)
}

type JobExecutionProperty struct {
	// The maximum number of concurrent runs allowed for a job. The default is 1.
	MaxConcurrentRuns *int `pulumi:"maxConcurrentRuns"`
}

// JobExecutionPropertyInput is an input type that accepts JobExecutionPropertyArgs and JobExecutionPropertyOutput values.
// You can construct a concrete instance of `JobExecutionPropertyInput` via:
//
//          JobExecutionPropertyArgs{...}
type JobExecutionPropertyInput interface {
	pulumi.Input

	ToJobExecutionPropertyOutput() JobExecutionPropertyOutput
	ToJobExecutionPropertyOutputWithContext(context.Context) JobExecutionPropertyOutput
}

type JobExecutionPropertyArgs struct {
	// The maximum number of concurrent runs allowed for a job. The default is 1.
	MaxConcurrentRuns pulumi.IntPtrInput `pulumi:"maxConcurrentRuns"`
}

func (JobExecutionPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobExecutionProperty)(nil)).Elem()
}

func (i JobExecutionPropertyArgs) ToJobExecutionPropertyOutput() JobExecutionPropertyOutput {
	return i.ToJobExecutionPropertyOutputWithContext(context.Background())
}

func (i JobExecutionPropertyArgs) ToJobExecutionPropertyOutputWithContext(ctx context.Context) JobExecutionPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobExecutionPropertyOutput)
}

func (i JobExecutionPropertyArgs) ToJobExecutionPropertyPtrOutput() JobExecutionPropertyPtrOutput {
	return i.ToJobExecutionPropertyPtrOutputWithContext(context.Background())
}

func (i JobExecutionPropertyArgs) ToJobExecutionPropertyPtrOutputWithContext(ctx context.Context) JobExecutionPropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobExecutionPropertyOutput).ToJobExecutionPropertyPtrOutputWithContext(ctx)
}

// JobExecutionPropertyPtrInput is an input type that accepts JobExecutionPropertyArgs, JobExecutionPropertyPtr and JobExecutionPropertyPtrOutput values.
// You can construct a concrete instance of `JobExecutionPropertyPtrInput` via:
//
//          JobExecutionPropertyArgs{...}
//
//  or:
//
//          nil
type JobExecutionPropertyPtrInput interface {
	pulumi.Input

	ToJobExecutionPropertyPtrOutput() JobExecutionPropertyPtrOutput
	ToJobExecutionPropertyPtrOutputWithContext(context.Context) JobExecutionPropertyPtrOutput
}

type jobExecutionPropertyPtrType JobExecutionPropertyArgs

func JobExecutionPropertyPtr(v *JobExecutionPropertyArgs) JobExecutionPropertyPtrInput {
	return (*jobExecutionPropertyPtrType)(v)
}

func (*jobExecutionPropertyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobExecutionProperty)(nil)).Elem()
}

func (i *jobExecutionPropertyPtrType) ToJobExecutionPropertyPtrOutput() JobExecutionPropertyPtrOutput {
	return i.ToJobExecutionPropertyPtrOutputWithContext(context.Background())
}

func (i *jobExecutionPropertyPtrType) ToJobExecutionPropertyPtrOutputWithContext(ctx context.Context) JobExecutionPropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobExecutionPropertyPtrOutput)
}

type JobExecutionPropertyOutput struct{ *pulumi.OutputState }

func (JobExecutionPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobExecutionProperty)(nil)).Elem()
}

func (o JobExecutionPropertyOutput) ToJobExecutionPropertyOutput() JobExecutionPropertyOutput {
	return o
}

func (o JobExecutionPropertyOutput) ToJobExecutionPropertyOutputWithContext(ctx context.Context) JobExecutionPropertyOutput {
	return o
}

func (o JobExecutionPropertyOutput) ToJobExecutionPropertyPtrOutput() JobExecutionPropertyPtrOutput {
	return o.ToJobExecutionPropertyPtrOutputWithContext(context.Background())
}

func (o JobExecutionPropertyOutput) ToJobExecutionPropertyPtrOutputWithContext(ctx context.Context) JobExecutionPropertyPtrOutput {
	return o.ApplyT(func(v JobExecutionProperty) *JobExecutionProperty {
		return &v
	}).(JobExecutionPropertyPtrOutput)
}

// The maximum number of concurrent runs allowed for a job. The default is 1.
func (o JobExecutionPropertyOutput) MaxConcurrentRuns() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobExecutionProperty) *int { return v.MaxConcurrentRuns }).(pulumi.IntPtrOutput)
}

type JobExecutionPropertyPtrOutput struct{ *pulumi.OutputState }

func (JobExecutionPropertyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobExecutionProperty)(nil)).Elem()
}

func (o JobExecutionPropertyPtrOutput) ToJobExecutionPropertyPtrOutput() JobExecutionPropertyPtrOutput {
	return o
}

func (o JobExecutionPropertyPtrOutput) ToJobExecutionPropertyPtrOutputWithContext(ctx context.Context) JobExecutionPropertyPtrOutput {
	return o
}

func (o JobExecutionPropertyPtrOutput) Elem() JobExecutionPropertyOutput {
	return o.ApplyT(func(v *JobExecutionProperty) JobExecutionProperty { return *v }).(JobExecutionPropertyOutput)
}

// The maximum number of concurrent runs allowed for a job. The default is 1.
func (o JobExecutionPropertyPtrOutput) MaxConcurrentRuns() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobExecutionProperty) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentRuns
	}).(pulumi.IntPtrOutput)
}

type JobNotificationProperty struct {
	// After a job run starts, the number of minutes to wait before sending a job run delay notification.
	NotifyDelayAfter *int `pulumi:"notifyDelayAfter"`
}

// JobNotificationPropertyInput is an input type that accepts JobNotificationPropertyArgs and JobNotificationPropertyOutput values.
// You can construct a concrete instance of `JobNotificationPropertyInput` via:
//
//          JobNotificationPropertyArgs{...}
type JobNotificationPropertyInput interface {
	pulumi.Input

	ToJobNotificationPropertyOutput() JobNotificationPropertyOutput
	ToJobNotificationPropertyOutputWithContext(context.Context) JobNotificationPropertyOutput
}

type JobNotificationPropertyArgs struct {
	// After a job run starts, the number of minutes to wait before sending a job run delay notification.
	NotifyDelayAfter pulumi.IntPtrInput `pulumi:"notifyDelayAfter"`
}

func (JobNotificationPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobNotificationProperty)(nil)).Elem()
}

func (i JobNotificationPropertyArgs) ToJobNotificationPropertyOutput() JobNotificationPropertyOutput {
	return i.ToJobNotificationPropertyOutputWithContext(context.Background())
}

func (i JobNotificationPropertyArgs) ToJobNotificationPropertyOutputWithContext(ctx context.Context) JobNotificationPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobNotificationPropertyOutput)
}

func (i JobNotificationPropertyArgs) ToJobNotificationPropertyPtrOutput() JobNotificationPropertyPtrOutput {
	return i.ToJobNotificationPropertyPtrOutputWithContext(context.Background())
}

func (i JobNotificationPropertyArgs) ToJobNotificationPropertyPtrOutputWithContext(ctx context.Context) JobNotificationPropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobNotificationPropertyOutput).ToJobNotificationPropertyPtrOutputWithContext(ctx)
}

// JobNotificationPropertyPtrInput is an input type that accepts JobNotificationPropertyArgs, JobNotificationPropertyPtr and JobNotificationPropertyPtrOutput values.
// You can construct a concrete instance of `JobNotificationPropertyPtrInput` via:
//
//          JobNotificationPropertyArgs{...}
//
//  or:
//
//          nil
type JobNotificationPropertyPtrInput interface {
	pulumi.Input

	ToJobNotificationPropertyPtrOutput() JobNotificationPropertyPtrOutput
	ToJobNotificationPropertyPtrOutputWithContext(context.Context) JobNotificationPropertyPtrOutput
}

type jobNotificationPropertyPtrType JobNotificationPropertyArgs

func JobNotificationPropertyPtr(v *JobNotificationPropertyArgs) JobNotificationPropertyPtrInput {
	return (*jobNotificationPropertyPtrType)(v)
}

func (*jobNotificationPropertyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobNotificationProperty)(nil)).Elem()
}

func (i *jobNotificationPropertyPtrType) ToJobNotificationPropertyPtrOutput() JobNotificationPropertyPtrOutput {
	return i.ToJobNotificationPropertyPtrOutputWithContext(context.Background())
}

func (i *jobNotificationPropertyPtrType) ToJobNotificationPropertyPtrOutputWithContext(ctx context.Context) JobNotificationPropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobNotificationPropertyPtrOutput)
}

type JobNotificationPropertyOutput struct{ *pulumi.OutputState }

func (JobNotificationPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobNotificationProperty)(nil)).Elem()
}

func (o JobNotificationPropertyOutput) ToJobNotificationPropertyOutput() JobNotificationPropertyOutput {
	return o
}

func (o JobNotificationPropertyOutput) ToJobNotificationPropertyOutputWithContext(ctx context.Context) JobNotificationPropertyOutput {
	return o
}

func (o JobNotificationPropertyOutput) ToJobNotificationPropertyPtrOutput() JobNotificationPropertyPtrOutput {
	return o.ToJobNotificationPropertyPtrOutputWithContext(context.Background())
}

func (o JobNotificationPropertyOutput) ToJobNotificationPropertyPtrOutputWithContext(ctx context.Context) JobNotificationPropertyPtrOutput {
	return o.ApplyT(func(v JobNotificationProperty) *JobNotificationProperty {
		return &v
	}).(JobNotificationPropertyPtrOutput)
}

// After a job run starts, the number of minutes to wait before sending a job run delay notification.
func (o JobNotificationPropertyOutput) NotifyDelayAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobNotificationProperty) *int { return v.NotifyDelayAfter }).(pulumi.IntPtrOutput)
}

type JobNotificationPropertyPtrOutput struct{ *pulumi.OutputState }

func (JobNotificationPropertyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobNotificationProperty)(nil)).Elem()
}

func (o JobNotificationPropertyPtrOutput) ToJobNotificationPropertyPtrOutput() JobNotificationPropertyPtrOutput {
	return o
}

func (o JobNotificationPropertyPtrOutput) ToJobNotificationPropertyPtrOutputWithContext(ctx context.Context) JobNotificationPropertyPtrOutput {
	return o
}

func (o JobNotificationPropertyPtrOutput) Elem() JobNotificationPropertyOutput {
	return o.ApplyT(func(v *JobNotificationProperty) JobNotificationProperty { return *v }).(JobNotificationPropertyOutput)
}

// After a job run starts, the number of minutes to wait before sending a job run delay notification.
func (o JobNotificationPropertyPtrOutput) NotifyDelayAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobNotificationProperty) *int {
		if v == nil {
			return nil
		}
		return v.NotifyDelayAfter
	}).(pulumi.IntPtrOutput)
}

type MLTransformInputRecordTable struct {
	// A unique identifier for the AWS Glue Data Catalog.
	CatalogId *string `pulumi:"catalogId"`
	// The name of the connection to the AWS Glue Data Catalog.
	ConnectionName *string `pulumi:"connectionName"`
	// A database name in the AWS Glue Data Catalog.
	DatabaseName string `pulumi:"databaseName"`
	// A table name in the AWS Glue Data Catalog.
	TableName string `pulumi:"tableName"`
}

// MLTransformInputRecordTableInput is an input type that accepts MLTransformInputRecordTableArgs and MLTransformInputRecordTableOutput values.
// You can construct a concrete instance of `MLTransformInputRecordTableInput` via:
//
//          MLTransformInputRecordTableArgs{...}
type MLTransformInputRecordTableInput interface {
	pulumi.Input

	ToMLTransformInputRecordTableOutput() MLTransformInputRecordTableOutput
	ToMLTransformInputRecordTableOutputWithContext(context.Context) MLTransformInputRecordTableOutput
}

type MLTransformInputRecordTableArgs struct {
	// A unique identifier for the AWS Glue Data Catalog.
	CatalogId pulumi.StringPtrInput `pulumi:"catalogId"`
	// The name of the connection to the AWS Glue Data Catalog.
	ConnectionName pulumi.StringPtrInput `pulumi:"connectionName"`
	// A database name in the AWS Glue Data Catalog.
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// A table name in the AWS Glue Data Catalog.
	TableName pulumi.StringInput `pulumi:"tableName"`
}

func (MLTransformInputRecordTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTransformInputRecordTable)(nil)).Elem()
}

func (i MLTransformInputRecordTableArgs) ToMLTransformInputRecordTableOutput() MLTransformInputRecordTableOutput {
	return i.ToMLTransformInputRecordTableOutputWithContext(context.Background())
}

func (i MLTransformInputRecordTableArgs) ToMLTransformInputRecordTableOutputWithContext(ctx context.Context) MLTransformInputRecordTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLTransformInputRecordTableOutput)
}

// MLTransformInputRecordTableArrayInput is an input type that accepts MLTransformInputRecordTableArray and MLTransformInputRecordTableArrayOutput values.
// You can construct a concrete instance of `MLTransformInputRecordTableArrayInput` via:
//
//          MLTransformInputRecordTableArray{ MLTransformInputRecordTableArgs{...} }
type MLTransformInputRecordTableArrayInput interface {
	pulumi.Input

	ToMLTransformInputRecordTableArrayOutput() MLTransformInputRecordTableArrayOutput
	ToMLTransformInputRecordTableArrayOutputWithContext(context.Context) MLTransformInputRecordTableArrayOutput
}

type MLTransformInputRecordTableArray []MLTransformInputRecordTableInput

func (MLTransformInputRecordTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MLTransformInputRecordTable)(nil)).Elem()
}

func (i MLTransformInputRecordTableArray) ToMLTransformInputRecordTableArrayOutput() MLTransformInputRecordTableArrayOutput {
	return i.ToMLTransformInputRecordTableArrayOutputWithContext(context.Background())
}

func (i MLTransformInputRecordTableArray) ToMLTransformInputRecordTableArrayOutputWithContext(ctx context.Context) MLTransformInputRecordTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLTransformInputRecordTableArrayOutput)
}

type MLTransformInputRecordTableOutput struct{ *pulumi.OutputState }

func (MLTransformInputRecordTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTransformInputRecordTable)(nil)).Elem()
}

func (o MLTransformInputRecordTableOutput) ToMLTransformInputRecordTableOutput() MLTransformInputRecordTableOutput {
	return o
}

func (o MLTransformInputRecordTableOutput) ToMLTransformInputRecordTableOutputWithContext(ctx context.Context) MLTransformInputRecordTableOutput {
	return o
}

// A unique identifier for the AWS Glue Data Catalog.
func (o MLTransformInputRecordTableOutput) CatalogId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTransformInputRecordTable) *string { return v.CatalogId }).(pulumi.StringPtrOutput)
}

// The name of the connection to the AWS Glue Data Catalog.
func (o MLTransformInputRecordTableOutput) ConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTransformInputRecordTable) *string { return v.ConnectionName }).(pulumi.StringPtrOutput)
}

// A database name in the AWS Glue Data Catalog.
func (o MLTransformInputRecordTableOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MLTransformInputRecordTable) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// A table name in the AWS Glue Data Catalog.
func (o MLTransformInputRecordTableOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v MLTransformInputRecordTable) string { return v.TableName }).(pulumi.StringOutput)
}

type MLTransformInputRecordTableArrayOutput struct{ *pulumi.OutputState }

func (MLTransformInputRecordTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MLTransformInputRecordTable)(nil)).Elem()
}

func (o MLTransformInputRecordTableArrayOutput) ToMLTransformInputRecordTableArrayOutput() MLTransformInputRecordTableArrayOutput {
	return o
}

func (o MLTransformInputRecordTableArrayOutput) ToMLTransformInputRecordTableArrayOutputWithContext(ctx context.Context) MLTransformInputRecordTableArrayOutput {
	return o
}

func (o MLTransformInputRecordTableArrayOutput) Index(i pulumi.IntInput) MLTransformInputRecordTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MLTransformInputRecordTable {
		return vs[0].([]MLTransformInputRecordTable)[vs[1].(int)]
	}).(MLTransformInputRecordTableOutput)
}

type MLTransformParameters struct {
	// The parameters for the find matches algorithm. see Find Matches Parameters.
	FindMatchesParameters MLTransformParametersFindMatchesParameters `pulumi:"findMatchesParameters"`
	// The type of machine learning transform. For information about the types of machine learning transforms, see [Creating Machine Learning Transforms](http://docs.aws.amazon.com/glue/latest/dg/add-job-machine-learning-transform.html).
	TransformType string `pulumi:"transformType"`
}

// MLTransformParametersInput is an input type that accepts MLTransformParametersArgs and MLTransformParametersOutput values.
// You can construct a concrete instance of `MLTransformParametersInput` via:
//
//          MLTransformParametersArgs{...}
type MLTransformParametersInput interface {
	pulumi.Input

	ToMLTransformParametersOutput() MLTransformParametersOutput
	ToMLTransformParametersOutputWithContext(context.Context) MLTransformParametersOutput
}

type MLTransformParametersArgs struct {
	// The parameters for the find matches algorithm. see Find Matches Parameters.
	FindMatchesParameters MLTransformParametersFindMatchesParametersInput `pulumi:"findMatchesParameters"`
	// The type of machine learning transform. For information about the types of machine learning transforms, see [Creating Machine Learning Transforms](http://docs.aws.amazon.com/glue/latest/dg/add-job-machine-learning-transform.html).
	TransformType pulumi.StringInput `pulumi:"transformType"`
}

func (MLTransformParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTransformParameters)(nil)).Elem()
}

func (i MLTransformParametersArgs) ToMLTransformParametersOutput() MLTransformParametersOutput {
	return i.ToMLTransformParametersOutputWithContext(context.Background())
}

func (i MLTransformParametersArgs) ToMLTransformParametersOutputWithContext(ctx context.Context) MLTransformParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLTransformParametersOutput)
}

func (i MLTransformParametersArgs) ToMLTransformParametersPtrOutput() MLTransformParametersPtrOutput {
	return i.ToMLTransformParametersPtrOutputWithContext(context.Background())
}

func (i MLTransformParametersArgs) ToMLTransformParametersPtrOutputWithContext(ctx context.Context) MLTransformParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLTransformParametersOutput).ToMLTransformParametersPtrOutputWithContext(ctx)
}

// MLTransformParametersPtrInput is an input type that accepts MLTransformParametersArgs, MLTransformParametersPtr and MLTransformParametersPtrOutput values.
// You can construct a concrete instance of `MLTransformParametersPtrInput` via:
//
//          MLTransformParametersArgs{...}
//
//  or:
//
//          nil
type MLTransformParametersPtrInput interface {
	pulumi.Input

	ToMLTransformParametersPtrOutput() MLTransformParametersPtrOutput
	ToMLTransformParametersPtrOutputWithContext(context.Context) MLTransformParametersPtrOutput
}

type mltransformParametersPtrType MLTransformParametersArgs

func MLTransformParametersPtr(v *MLTransformParametersArgs) MLTransformParametersPtrInput {
	return (*mltransformParametersPtrType)(v)
}

func (*mltransformParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MLTransformParameters)(nil)).Elem()
}

func (i *mltransformParametersPtrType) ToMLTransformParametersPtrOutput() MLTransformParametersPtrOutput {
	return i.ToMLTransformParametersPtrOutputWithContext(context.Background())
}

func (i *mltransformParametersPtrType) ToMLTransformParametersPtrOutputWithContext(ctx context.Context) MLTransformParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLTransformParametersPtrOutput)
}

type MLTransformParametersOutput struct{ *pulumi.OutputState }

func (MLTransformParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTransformParameters)(nil)).Elem()
}

func (o MLTransformParametersOutput) ToMLTransformParametersOutput() MLTransformParametersOutput {
	return o
}

func (o MLTransformParametersOutput) ToMLTransformParametersOutputWithContext(ctx context.Context) MLTransformParametersOutput {
	return o
}

func (o MLTransformParametersOutput) ToMLTransformParametersPtrOutput() MLTransformParametersPtrOutput {
	return o.ToMLTransformParametersPtrOutputWithContext(context.Background())
}

func (o MLTransformParametersOutput) ToMLTransformParametersPtrOutputWithContext(ctx context.Context) MLTransformParametersPtrOutput {
	return o.ApplyT(func(v MLTransformParameters) *MLTransformParameters {
		return &v
	}).(MLTransformParametersPtrOutput)
}

// The parameters for the find matches algorithm. see Find Matches Parameters.
func (o MLTransformParametersOutput) FindMatchesParameters() MLTransformParametersFindMatchesParametersOutput {
	return o.ApplyT(func(v MLTransformParameters) MLTransformParametersFindMatchesParameters {
		return v.FindMatchesParameters
	}).(MLTransformParametersFindMatchesParametersOutput)
}

// The type of machine learning transform. For information about the types of machine learning transforms, see [Creating Machine Learning Transforms](http://docs.aws.amazon.com/glue/latest/dg/add-job-machine-learning-transform.html).
func (o MLTransformParametersOutput) TransformType() pulumi.StringOutput {
	return o.ApplyT(func(v MLTransformParameters) string { return v.TransformType }).(pulumi.StringOutput)
}

type MLTransformParametersPtrOutput struct{ *pulumi.OutputState }

func (MLTransformParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MLTransformParameters)(nil)).Elem()
}

func (o MLTransformParametersPtrOutput) ToMLTransformParametersPtrOutput() MLTransformParametersPtrOutput {
	return o
}

func (o MLTransformParametersPtrOutput) ToMLTransformParametersPtrOutputWithContext(ctx context.Context) MLTransformParametersPtrOutput {
	return o
}

func (o MLTransformParametersPtrOutput) Elem() MLTransformParametersOutput {
	return o.ApplyT(func(v *MLTransformParameters) MLTransformParameters { return *v }).(MLTransformParametersOutput)
}

// The parameters for the find matches algorithm. see Find Matches Parameters.
func (o MLTransformParametersPtrOutput) FindMatchesParameters() MLTransformParametersFindMatchesParametersPtrOutput {
	return o.ApplyT(func(v *MLTransformParameters) *MLTransformParametersFindMatchesParameters {
		if v == nil {
			return nil
		}
		return &v.FindMatchesParameters
	}).(MLTransformParametersFindMatchesParametersPtrOutput)
}

// The type of machine learning transform. For information about the types of machine learning transforms, see [Creating Machine Learning Transforms](http://docs.aws.amazon.com/glue/latest/dg/add-job-machine-learning-transform.html).
func (o MLTransformParametersPtrOutput) TransformType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLTransformParameters) *string {
		if v == nil {
			return nil
		}
		return &v.TransformType
	}).(pulumi.StringPtrOutput)
}

type MLTransformParametersFindMatchesParameters struct {
	// The value that is selected when tuning your transform for a balance between accuracy and cost.
	AccuracyCostTradeOff *float64 `pulumi:"accuracyCostTradeOff"`
	// The value to switch on or off to force the output to match the provided labels from users.
	EnforceProvidedLabels *bool `pulumi:"enforceProvidedLabels"`
	// The value selected when tuning your transform for a balance between precision and recall.
	PrecisionRecallTradeOff *float64 `pulumi:"precisionRecallTradeOff"`
	// The name of a column that uniquely identifies rows in the source table.
	PrimaryKeyColumnName *string `pulumi:"primaryKeyColumnName"`
}

// MLTransformParametersFindMatchesParametersInput is an input type that accepts MLTransformParametersFindMatchesParametersArgs and MLTransformParametersFindMatchesParametersOutput values.
// You can construct a concrete instance of `MLTransformParametersFindMatchesParametersInput` via:
//
//          MLTransformParametersFindMatchesParametersArgs{...}
type MLTransformParametersFindMatchesParametersInput interface {
	pulumi.Input

	ToMLTransformParametersFindMatchesParametersOutput() MLTransformParametersFindMatchesParametersOutput
	ToMLTransformParametersFindMatchesParametersOutputWithContext(context.Context) MLTransformParametersFindMatchesParametersOutput
}

type MLTransformParametersFindMatchesParametersArgs struct {
	// The value that is selected when tuning your transform for a balance between accuracy and cost.
	AccuracyCostTradeOff pulumi.Float64PtrInput `pulumi:"accuracyCostTradeOff"`
	// The value to switch on or off to force the output to match the provided labels from users.
	EnforceProvidedLabels pulumi.BoolPtrInput `pulumi:"enforceProvidedLabels"`
	// The value selected when tuning your transform for a balance between precision and recall.
	PrecisionRecallTradeOff pulumi.Float64PtrInput `pulumi:"precisionRecallTradeOff"`
	// The name of a column that uniquely identifies rows in the source table.
	PrimaryKeyColumnName pulumi.StringPtrInput `pulumi:"primaryKeyColumnName"`
}

func (MLTransformParametersFindMatchesParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTransformParametersFindMatchesParameters)(nil)).Elem()
}

func (i MLTransformParametersFindMatchesParametersArgs) ToMLTransformParametersFindMatchesParametersOutput() MLTransformParametersFindMatchesParametersOutput {
	return i.ToMLTransformParametersFindMatchesParametersOutputWithContext(context.Background())
}

func (i MLTransformParametersFindMatchesParametersArgs) ToMLTransformParametersFindMatchesParametersOutputWithContext(ctx context.Context) MLTransformParametersFindMatchesParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLTransformParametersFindMatchesParametersOutput)
}

func (i MLTransformParametersFindMatchesParametersArgs) ToMLTransformParametersFindMatchesParametersPtrOutput() MLTransformParametersFindMatchesParametersPtrOutput {
	return i.ToMLTransformParametersFindMatchesParametersPtrOutputWithContext(context.Background())
}

func (i MLTransformParametersFindMatchesParametersArgs) ToMLTransformParametersFindMatchesParametersPtrOutputWithContext(ctx context.Context) MLTransformParametersFindMatchesParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLTransformParametersFindMatchesParametersOutput).ToMLTransformParametersFindMatchesParametersPtrOutputWithContext(ctx)
}

// MLTransformParametersFindMatchesParametersPtrInput is an input type that accepts MLTransformParametersFindMatchesParametersArgs, MLTransformParametersFindMatchesParametersPtr and MLTransformParametersFindMatchesParametersPtrOutput values.
// You can construct a concrete instance of `MLTransformParametersFindMatchesParametersPtrInput` via:
//
//          MLTransformParametersFindMatchesParametersArgs{...}
//
//  or:
//
//          nil
type MLTransformParametersFindMatchesParametersPtrInput interface {
	pulumi.Input

	ToMLTransformParametersFindMatchesParametersPtrOutput() MLTransformParametersFindMatchesParametersPtrOutput
	ToMLTransformParametersFindMatchesParametersPtrOutputWithContext(context.Context) MLTransformParametersFindMatchesParametersPtrOutput
}

type mltransformParametersFindMatchesParametersPtrType MLTransformParametersFindMatchesParametersArgs

func MLTransformParametersFindMatchesParametersPtr(v *MLTransformParametersFindMatchesParametersArgs) MLTransformParametersFindMatchesParametersPtrInput {
	return (*mltransformParametersFindMatchesParametersPtrType)(v)
}

func (*mltransformParametersFindMatchesParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MLTransformParametersFindMatchesParameters)(nil)).Elem()
}

func (i *mltransformParametersFindMatchesParametersPtrType) ToMLTransformParametersFindMatchesParametersPtrOutput() MLTransformParametersFindMatchesParametersPtrOutput {
	return i.ToMLTransformParametersFindMatchesParametersPtrOutputWithContext(context.Background())
}

func (i *mltransformParametersFindMatchesParametersPtrType) ToMLTransformParametersFindMatchesParametersPtrOutputWithContext(ctx context.Context) MLTransformParametersFindMatchesParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLTransformParametersFindMatchesParametersPtrOutput)
}

type MLTransformParametersFindMatchesParametersOutput struct{ *pulumi.OutputState }

func (MLTransformParametersFindMatchesParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTransformParametersFindMatchesParameters)(nil)).Elem()
}

func (o MLTransformParametersFindMatchesParametersOutput) ToMLTransformParametersFindMatchesParametersOutput() MLTransformParametersFindMatchesParametersOutput {
	return o
}

func (o MLTransformParametersFindMatchesParametersOutput) ToMLTransformParametersFindMatchesParametersOutputWithContext(ctx context.Context) MLTransformParametersFindMatchesParametersOutput {
	return o
}

func (o MLTransformParametersFindMatchesParametersOutput) ToMLTransformParametersFindMatchesParametersPtrOutput() MLTransformParametersFindMatchesParametersPtrOutput {
	return o.ToMLTransformParametersFindMatchesParametersPtrOutputWithContext(context.Background())
}

func (o MLTransformParametersFindMatchesParametersOutput) ToMLTransformParametersFindMatchesParametersPtrOutputWithContext(ctx context.Context) MLTransformParametersFindMatchesParametersPtrOutput {
	return o.ApplyT(func(v MLTransformParametersFindMatchesParameters) *MLTransformParametersFindMatchesParameters {
		return &v
	}).(MLTransformParametersFindMatchesParametersPtrOutput)
}

// The value that is selected when tuning your transform for a balance between accuracy and cost.
func (o MLTransformParametersFindMatchesParametersOutput) AccuracyCostTradeOff() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MLTransformParametersFindMatchesParameters) *float64 { return v.AccuracyCostTradeOff }).(pulumi.Float64PtrOutput)
}

// The value to switch on or off to force the output to match the provided labels from users.
func (o MLTransformParametersFindMatchesParametersOutput) EnforceProvidedLabels() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MLTransformParametersFindMatchesParameters) *bool { return v.EnforceProvidedLabels }).(pulumi.BoolPtrOutput)
}

// The value selected when tuning your transform for a balance between precision and recall.
func (o MLTransformParametersFindMatchesParametersOutput) PrecisionRecallTradeOff() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MLTransformParametersFindMatchesParameters) *float64 { return v.PrecisionRecallTradeOff }).(pulumi.Float64PtrOutput)
}

// The name of a column that uniquely identifies rows in the source table.
func (o MLTransformParametersFindMatchesParametersOutput) PrimaryKeyColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTransformParametersFindMatchesParameters) *string { return v.PrimaryKeyColumnName }).(pulumi.StringPtrOutput)
}

type MLTransformParametersFindMatchesParametersPtrOutput struct{ *pulumi.OutputState }

func (MLTransformParametersFindMatchesParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MLTransformParametersFindMatchesParameters)(nil)).Elem()
}

func (o MLTransformParametersFindMatchesParametersPtrOutput) ToMLTransformParametersFindMatchesParametersPtrOutput() MLTransformParametersFindMatchesParametersPtrOutput {
	return o
}

func (o MLTransformParametersFindMatchesParametersPtrOutput) ToMLTransformParametersFindMatchesParametersPtrOutputWithContext(ctx context.Context) MLTransformParametersFindMatchesParametersPtrOutput {
	return o
}

func (o MLTransformParametersFindMatchesParametersPtrOutput) Elem() MLTransformParametersFindMatchesParametersOutput {
	return o.ApplyT(func(v *MLTransformParametersFindMatchesParameters) MLTransformParametersFindMatchesParameters {
		return *v
	}).(MLTransformParametersFindMatchesParametersOutput)
}

// The value that is selected when tuning your transform for a balance between accuracy and cost.
func (o MLTransformParametersFindMatchesParametersPtrOutput) AccuracyCostTradeOff() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MLTransformParametersFindMatchesParameters) *float64 {
		if v == nil {
			return nil
		}
		return v.AccuracyCostTradeOff
	}).(pulumi.Float64PtrOutput)
}

// The value to switch on or off to force the output to match the provided labels from users.
func (o MLTransformParametersFindMatchesParametersPtrOutput) EnforceProvidedLabels() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MLTransformParametersFindMatchesParameters) *bool {
		if v == nil {
			return nil
		}
		return v.EnforceProvidedLabels
	}).(pulumi.BoolPtrOutput)
}

// The value selected when tuning your transform for a balance between precision and recall.
func (o MLTransformParametersFindMatchesParametersPtrOutput) PrecisionRecallTradeOff() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MLTransformParametersFindMatchesParameters) *float64 {
		if v == nil {
			return nil
		}
		return v.PrecisionRecallTradeOff
	}).(pulumi.Float64PtrOutput)
}

// The name of a column that uniquely identifies rows in the source table.
func (o MLTransformParametersFindMatchesParametersPtrOutput) PrimaryKeyColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLTransformParametersFindMatchesParameters) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryKeyColumnName
	}).(pulumi.StringPtrOutput)
}

type MLTransformSchema struct {
	// The type of data in the column.
	DataType *string `pulumi:"dataType"`
	// The name you assign to this ML Transform. It must be unique in your account.
	Name *string `pulumi:"name"`
}

// MLTransformSchemaInput is an input type that accepts MLTransformSchemaArgs and MLTransformSchemaOutput values.
// You can construct a concrete instance of `MLTransformSchemaInput` via:
//
//          MLTransformSchemaArgs{...}
type MLTransformSchemaInput interface {
	pulumi.Input

	ToMLTransformSchemaOutput() MLTransformSchemaOutput
	ToMLTransformSchemaOutputWithContext(context.Context) MLTransformSchemaOutput
}

type MLTransformSchemaArgs struct {
	// The type of data in the column.
	DataType pulumi.StringPtrInput `pulumi:"dataType"`
	// The name you assign to this ML Transform. It must be unique in your account.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (MLTransformSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTransformSchema)(nil)).Elem()
}

func (i MLTransformSchemaArgs) ToMLTransformSchemaOutput() MLTransformSchemaOutput {
	return i.ToMLTransformSchemaOutputWithContext(context.Background())
}

func (i MLTransformSchemaArgs) ToMLTransformSchemaOutputWithContext(ctx context.Context) MLTransformSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLTransformSchemaOutput)
}

// MLTransformSchemaArrayInput is an input type that accepts MLTransformSchemaArray and MLTransformSchemaArrayOutput values.
// You can construct a concrete instance of `MLTransformSchemaArrayInput` via:
//
//          MLTransformSchemaArray{ MLTransformSchemaArgs{...} }
type MLTransformSchemaArrayInput interface {
	pulumi.Input

	ToMLTransformSchemaArrayOutput() MLTransformSchemaArrayOutput
	ToMLTransformSchemaArrayOutputWithContext(context.Context) MLTransformSchemaArrayOutput
}

type MLTransformSchemaArray []MLTransformSchemaInput

func (MLTransformSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MLTransformSchema)(nil)).Elem()
}

func (i MLTransformSchemaArray) ToMLTransformSchemaArrayOutput() MLTransformSchemaArrayOutput {
	return i.ToMLTransformSchemaArrayOutputWithContext(context.Background())
}

func (i MLTransformSchemaArray) ToMLTransformSchemaArrayOutputWithContext(ctx context.Context) MLTransformSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLTransformSchemaArrayOutput)
}

type MLTransformSchemaOutput struct{ *pulumi.OutputState }

func (MLTransformSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTransformSchema)(nil)).Elem()
}

func (o MLTransformSchemaOutput) ToMLTransformSchemaOutput() MLTransformSchemaOutput {
	return o
}

func (o MLTransformSchemaOutput) ToMLTransformSchemaOutputWithContext(ctx context.Context) MLTransformSchemaOutput {
	return o
}

// The type of data in the column.
func (o MLTransformSchemaOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTransformSchema) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

// The name you assign to this ML Transform. It must be unique in your account.
func (o MLTransformSchemaOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTransformSchema) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type MLTransformSchemaArrayOutput struct{ *pulumi.OutputState }

func (MLTransformSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MLTransformSchema)(nil)).Elem()
}

func (o MLTransformSchemaArrayOutput) ToMLTransformSchemaArrayOutput() MLTransformSchemaArrayOutput {
	return o
}

func (o MLTransformSchemaArrayOutput) ToMLTransformSchemaArrayOutputWithContext(ctx context.Context) MLTransformSchemaArrayOutput {
	return o
}

func (o MLTransformSchemaArrayOutput) Index(i pulumi.IntInput) MLTransformSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MLTransformSchema {
		return vs[0].([]MLTransformSchema)[vs[1].(int)]
	}).(MLTransformSchemaOutput)
}

type PartitionStorageDescriptor struct {
	// A list of reducer grouping columns, clustering columns, and bucketing columns in the table.
	BucketColumns []string `pulumi:"bucketColumns"`
	// A list of the Columns in the table.
	Columns []PartitionStorageDescriptorColumn `pulumi:"columns"`
	// True if the data in the table is compressed, or False if not.
	Compressed *bool `pulumi:"compressed"`
	// The input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
	InputFormat *string `pulumi:"inputFormat"`
	// The physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
	Location *string `pulumi:"location"`
	// Must be specified if the table contains any dimension columns.
	NumberOfBuckets *int `pulumi:"numberOfBuckets"`
	// The output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
	OutputFormat *string `pulumi:"outputFormat"`
	// A map of initialization parameters for the SerDe, in key-value form.
	Parameters map[string]string `pulumi:"parameters"`
	// Serialization/deserialization (SerDe) information.
	SerDeInfo *PartitionStorageDescriptorSerDeInfo `pulumi:"serDeInfo"`
	// Information about values that appear very frequently in a column (skewed values).
	SkewedInfo *PartitionStorageDescriptorSkewedInfo `pulumi:"skewedInfo"`
	// A list of Order objects specifying the sort order of each bucket in the table.
	SortColumns []PartitionStorageDescriptorSortColumn `pulumi:"sortColumns"`
	// True if the table data is stored in subdirectories, or False if not.
	StoredAsSubDirectories *bool `pulumi:"storedAsSubDirectories"`
}

// PartitionStorageDescriptorInput is an input type that accepts PartitionStorageDescriptorArgs and PartitionStorageDescriptorOutput values.
// You can construct a concrete instance of `PartitionStorageDescriptorInput` via:
//
//          PartitionStorageDescriptorArgs{...}
type PartitionStorageDescriptorInput interface {
	pulumi.Input

	ToPartitionStorageDescriptorOutput() PartitionStorageDescriptorOutput
	ToPartitionStorageDescriptorOutputWithContext(context.Context) PartitionStorageDescriptorOutput
}

type PartitionStorageDescriptorArgs struct {
	// A list of reducer grouping columns, clustering columns, and bucketing columns in the table.
	BucketColumns pulumi.StringArrayInput `pulumi:"bucketColumns"`
	// A list of the Columns in the table.
	Columns PartitionStorageDescriptorColumnArrayInput `pulumi:"columns"`
	// True if the data in the table is compressed, or False if not.
	Compressed pulumi.BoolPtrInput `pulumi:"compressed"`
	// The input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
	InputFormat pulumi.StringPtrInput `pulumi:"inputFormat"`
	// The physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Must be specified if the table contains any dimension columns.
	NumberOfBuckets pulumi.IntPtrInput `pulumi:"numberOfBuckets"`
	// The output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
	OutputFormat pulumi.StringPtrInput `pulumi:"outputFormat"`
	// A map of initialization parameters for the SerDe, in key-value form.
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
	// Serialization/deserialization (SerDe) information.
	SerDeInfo PartitionStorageDescriptorSerDeInfoPtrInput `pulumi:"serDeInfo"`
	// Information about values that appear very frequently in a column (skewed values).
	SkewedInfo PartitionStorageDescriptorSkewedInfoPtrInput `pulumi:"skewedInfo"`
	// A list of Order objects specifying the sort order of each bucket in the table.
	SortColumns PartitionStorageDescriptorSortColumnArrayInput `pulumi:"sortColumns"`
	// True if the table data is stored in subdirectories, or False if not.
	StoredAsSubDirectories pulumi.BoolPtrInput `pulumi:"storedAsSubDirectories"`
}

func (PartitionStorageDescriptorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionStorageDescriptor)(nil)).Elem()
}

func (i PartitionStorageDescriptorArgs) ToPartitionStorageDescriptorOutput() PartitionStorageDescriptorOutput {
	return i.ToPartitionStorageDescriptorOutputWithContext(context.Background())
}

func (i PartitionStorageDescriptorArgs) ToPartitionStorageDescriptorOutputWithContext(ctx context.Context) PartitionStorageDescriptorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionStorageDescriptorOutput)
}

func (i PartitionStorageDescriptorArgs) ToPartitionStorageDescriptorPtrOutput() PartitionStorageDescriptorPtrOutput {
	return i.ToPartitionStorageDescriptorPtrOutputWithContext(context.Background())
}

func (i PartitionStorageDescriptorArgs) ToPartitionStorageDescriptorPtrOutputWithContext(ctx context.Context) PartitionStorageDescriptorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionStorageDescriptorOutput).ToPartitionStorageDescriptorPtrOutputWithContext(ctx)
}

// PartitionStorageDescriptorPtrInput is an input type that accepts PartitionStorageDescriptorArgs, PartitionStorageDescriptorPtr and PartitionStorageDescriptorPtrOutput values.
// You can construct a concrete instance of `PartitionStorageDescriptorPtrInput` via:
//
//          PartitionStorageDescriptorArgs{...}
//
//  or:
//
//          nil
type PartitionStorageDescriptorPtrInput interface {
	pulumi.Input

	ToPartitionStorageDescriptorPtrOutput() PartitionStorageDescriptorPtrOutput
	ToPartitionStorageDescriptorPtrOutputWithContext(context.Context) PartitionStorageDescriptorPtrOutput
}

type partitionStorageDescriptorPtrType PartitionStorageDescriptorArgs

func PartitionStorageDescriptorPtr(v *PartitionStorageDescriptorArgs) PartitionStorageDescriptorPtrInput {
	return (*partitionStorageDescriptorPtrType)(v)
}

func (*partitionStorageDescriptorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PartitionStorageDescriptor)(nil)).Elem()
}

func (i *partitionStorageDescriptorPtrType) ToPartitionStorageDescriptorPtrOutput() PartitionStorageDescriptorPtrOutput {
	return i.ToPartitionStorageDescriptorPtrOutputWithContext(context.Background())
}

func (i *partitionStorageDescriptorPtrType) ToPartitionStorageDescriptorPtrOutputWithContext(ctx context.Context) PartitionStorageDescriptorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionStorageDescriptorPtrOutput)
}

type PartitionStorageDescriptorOutput struct{ *pulumi.OutputState }

func (PartitionStorageDescriptorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionStorageDescriptor)(nil)).Elem()
}

func (o PartitionStorageDescriptorOutput) ToPartitionStorageDescriptorOutput() PartitionStorageDescriptorOutput {
	return o
}

func (o PartitionStorageDescriptorOutput) ToPartitionStorageDescriptorOutputWithContext(ctx context.Context) PartitionStorageDescriptorOutput {
	return o
}

func (o PartitionStorageDescriptorOutput) ToPartitionStorageDescriptorPtrOutput() PartitionStorageDescriptorPtrOutput {
	return o.ToPartitionStorageDescriptorPtrOutputWithContext(context.Background())
}

func (o PartitionStorageDescriptorOutput) ToPartitionStorageDescriptorPtrOutputWithContext(ctx context.Context) PartitionStorageDescriptorPtrOutput {
	return o.ApplyT(func(v PartitionStorageDescriptor) *PartitionStorageDescriptor {
		return &v
	}).(PartitionStorageDescriptorPtrOutput)
}

// A list of reducer grouping columns, clustering columns, and bucketing columns in the table.
func (o PartitionStorageDescriptorOutput) BucketColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PartitionStorageDescriptor) []string { return v.BucketColumns }).(pulumi.StringArrayOutput)
}

// A list of the Columns in the table.
func (o PartitionStorageDescriptorOutput) Columns() PartitionStorageDescriptorColumnArrayOutput {
	return o.ApplyT(func(v PartitionStorageDescriptor) []PartitionStorageDescriptorColumn { return v.Columns }).(PartitionStorageDescriptorColumnArrayOutput)
}

// True if the data in the table is compressed, or False if not.
func (o PartitionStorageDescriptorOutput) Compressed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PartitionStorageDescriptor) *bool { return v.Compressed }).(pulumi.BoolPtrOutput)
}

// The input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
func (o PartitionStorageDescriptorOutput) InputFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartitionStorageDescriptor) *string { return v.InputFormat }).(pulumi.StringPtrOutput)
}

// The physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
func (o PartitionStorageDescriptorOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartitionStorageDescriptor) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Must be specified if the table contains any dimension columns.
func (o PartitionStorageDescriptorOutput) NumberOfBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PartitionStorageDescriptor) *int { return v.NumberOfBuckets }).(pulumi.IntPtrOutput)
}

// The output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
func (o PartitionStorageDescriptorOutput) OutputFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartitionStorageDescriptor) *string { return v.OutputFormat }).(pulumi.StringPtrOutput)
}

// A map of initialization parameters for the SerDe, in key-value form.
func (o PartitionStorageDescriptorOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v PartitionStorageDescriptor) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

// Serialization/deserialization (SerDe) information.
func (o PartitionStorageDescriptorOutput) SerDeInfo() PartitionStorageDescriptorSerDeInfoPtrOutput {
	return o.ApplyT(func(v PartitionStorageDescriptor) *PartitionStorageDescriptorSerDeInfo { return v.SerDeInfo }).(PartitionStorageDescriptorSerDeInfoPtrOutput)
}

// Information about values that appear very frequently in a column (skewed values).
func (o PartitionStorageDescriptorOutput) SkewedInfo() PartitionStorageDescriptorSkewedInfoPtrOutput {
	return o.ApplyT(func(v PartitionStorageDescriptor) *PartitionStorageDescriptorSkewedInfo { return v.SkewedInfo }).(PartitionStorageDescriptorSkewedInfoPtrOutput)
}

// A list of Order objects specifying the sort order of each bucket in the table.
func (o PartitionStorageDescriptorOutput) SortColumns() PartitionStorageDescriptorSortColumnArrayOutput {
	return o.ApplyT(func(v PartitionStorageDescriptor) []PartitionStorageDescriptorSortColumn { return v.SortColumns }).(PartitionStorageDescriptorSortColumnArrayOutput)
}

// True if the table data is stored in subdirectories, or False if not.
func (o PartitionStorageDescriptorOutput) StoredAsSubDirectories() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PartitionStorageDescriptor) *bool { return v.StoredAsSubDirectories }).(pulumi.BoolPtrOutput)
}

type PartitionStorageDescriptorPtrOutput struct{ *pulumi.OutputState }

func (PartitionStorageDescriptorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartitionStorageDescriptor)(nil)).Elem()
}

func (o PartitionStorageDescriptorPtrOutput) ToPartitionStorageDescriptorPtrOutput() PartitionStorageDescriptorPtrOutput {
	return o
}

func (o PartitionStorageDescriptorPtrOutput) ToPartitionStorageDescriptorPtrOutputWithContext(ctx context.Context) PartitionStorageDescriptorPtrOutput {
	return o
}

func (o PartitionStorageDescriptorPtrOutput) Elem() PartitionStorageDescriptorOutput {
	return o.ApplyT(func(v *PartitionStorageDescriptor) PartitionStorageDescriptor { return *v }).(PartitionStorageDescriptorOutput)
}

// A list of reducer grouping columns, clustering columns, and bucketing columns in the table.
func (o PartitionStorageDescriptorPtrOutput) BucketColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PartitionStorageDescriptor) []string {
		if v == nil {
			return nil
		}
		return v.BucketColumns
	}).(pulumi.StringArrayOutput)
}

// A list of the Columns in the table.
func (o PartitionStorageDescriptorPtrOutput) Columns() PartitionStorageDescriptorColumnArrayOutput {
	return o.ApplyT(func(v *PartitionStorageDescriptor) []PartitionStorageDescriptorColumn {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(PartitionStorageDescriptorColumnArrayOutput)
}

// True if the data in the table is compressed, or False if not.
func (o PartitionStorageDescriptorPtrOutput) Compressed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PartitionStorageDescriptor) *bool {
		if v == nil {
			return nil
		}
		return v.Compressed
	}).(pulumi.BoolPtrOutput)
}

// The input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
func (o PartitionStorageDescriptorPtrOutput) InputFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartitionStorageDescriptor) *string {
		if v == nil {
			return nil
		}
		return v.InputFormat
	}).(pulumi.StringPtrOutput)
}

// The physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
func (o PartitionStorageDescriptorPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartitionStorageDescriptor) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Must be specified if the table contains any dimension columns.
func (o PartitionStorageDescriptorPtrOutput) NumberOfBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PartitionStorageDescriptor) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfBuckets
	}).(pulumi.IntPtrOutput)
}

// The output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
func (o PartitionStorageDescriptorPtrOutput) OutputFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartitionStorageDescriptor) *string {
		if v == nil {
			return nil
		}
		return v.OutputFormat
	}).(pulumi.StringPtrOutput)
}

// A map of initialization parameters for the SerDe, in key-value form.
func (o PartitionStorageDescriptorPtrOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PartitionStorageDescriptor) map[string]string {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.StringMapOutput)
}

// Serialization/deserialization (SerDe) information.
func (o PartitionStorageDescriptorPtrOutput) SerDeInfo() PartitionStorageDescriptorSerDeInfoPtrOutput {
	return o.ApplyT(func(v *PartitionStorageDescriptor) *PartitionStorageDescriptorSerDeInfo {
		if v == nil {
			return nil
		}
		return v.SerDeInfo
	}).(PartitionStorageDescriptorSerDeInfoPtrOutput)
}

// Information about values that appear very frequently in a column (skewed values).
func (o PartitionStorageDescriptorPtrOutput) SkewedInfo() PartitionStorageDescriptorSkewedInfoPtrOutput {
	return o.ApplyT(func(v *PartitionStorageDescriptor) *PartitionStorageDescriptorSkewedInfo {
		if v == nil {
			return nil
		}
		return v.SkewedInfo
	}).(PartitionStorageDescriptorSkewedInfoPtrOutput)
}

// A list of Order objects specifying the sort order of each bucket in the table.
func (o PartitionStorageDescriptorPtrOutput) SortColumns() PartitionStorageDescriptorSortColumnArrayOutput {
	return o.ApplyT(func(v *PartitionStorageDescriptor) []PartitionStorageDescriptorSortColumn {
		if v == nil {
			return nil
		}
		return v.SortColumns
	}).(PartitionStorageDescriptorSortColumnArrayOutput)
}

// True if the table data is stored in subdirectories, or False if not.
func (o PartitionStorageDescriptorPtrOutput) StoredAsSubDirectories() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PartitionStorageDescriptor) *bool {
		if v == nil {
			return nil
		}
		return v.StoredAsSubDirectories
	}).(pulumi.BoolPtrOutput)
}

type PartitionStorageDescriptorColumn struct {
	// Free-form text comment.
	Comment *string `pulumi:"comment"`
	// Name of the SerDe.
	Name string `pulumi:"name"`
	// The datatype of data in the Column.
	Type *string `pulumi:"type"`
}

// PartitionStorageDescriptorColumnInput is an input type that accepts PartitionStorageDescriptorColumnArgs and PartitionStorageDescriptorColumnOutput values.
// You can construct a concrete instance of `PartitionStorageDescriptorColumnInput` via:
//
//          PartitionStorageDescriptorColumnArgs{...}
type PartitionStorageDescriptorColumnInput interface {
	pulumi.Input

	ToPartitionStorageDescriptorColumnOutput() PartitionStorageDescriptorColumnOutput
	ToPartitionStorageDescriptorColumnOutputWithContext(context.Context) PartitionStorageDescriptorColumnOutput
}

type PartitionStorageDescriptorColumnArgs struct {
	// Free-form text comment.
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	// Name of the SerDe.
	Name pulumi.StringInput `pulumi:"name"`
	// The datatype of data in the Column.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (PartitionStorageDescriptorColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionStorageDescriptorColumn)(nil)).Elem()
}

func (i PartitionStorageDescriptorColumnArgs) ToPartitionStorageDescriptorColumnOutput() PartitionStorageDescriptorColumnOutput {
	return i.ToPartitionStorageDescriptorColumnOutputWithContext(context.Background())
}

func (i PartitionStorageDescriptorColumnArgs) ToPartitionStorageDescriptorColumnOutputWithContext(ctx context.Context) PartitionStorageDescriptorColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionStorageDescriptorColumnOutput)
}

// PartitionStorageDescriptorColumnArrayInput is an input type that accepts PartitionStorageDescriptorColumnArray and PartitionStorageDescriptorColumnArrayOutput values.
// You can construct a concrete instance of `PartitionStorageDescriptorColumnArrayInput` via:
//
//          PartitionStorageDescriptorColumnArray{ PartitionStorageDescriptorColumnArgs{...} }
type PartitionStorageDescriptorColumnArrayInput interface {
	pulumi.Input

	ToPartitionStorageDescriptorColumnArrayOutput() PartitionStorageDescriptorColumnArrayOutput
	ToPartitionStorageDescriptorColumnArrayOutputWithContext(context.Context) PartitionStorageDescriptorColumnArrayOutput
}

type PartitionStorageDescriptorColumnArray []PartitionStorageDescriptorColumnInput

func (PartitionStorageDescriptorColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PartitionStorageDescriptorColumn)(nil)).Elem()
}

func (i PartitionStorageDescriptorColumnArray) ToPartitionStorageDescriptorColumnArrayOutput() PartitionStorageDescriptorColumnArrayOutput {
	return i.ToPartitionStorageDescriptorColumnArrayOutputWithContext(context.Background())
}

func (i PartitionStorageDescriptorColumnArray) ToPartitionStorageDescriptorColumnArrayOutputWithContext(ctx context.Context) PartitionStorageDescriptorColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionStorageDescriptorColumnArrayOutput)
}

type PartitionStorageDescriptorColumnOutput struct{ *pulumi.OutputState }

func (PartitionStorageDescriptorColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionStorageDescriptorColumn)(nil)).Elem()
}

func (o PartitionStorageDescriptorColumnOutput) ToPartitionStorageDescriptorColumnOutput() PartitionStorageDescriptorColumnOutput {
	return o
}

func (o PartitionStorageDescriptorColumnOutput) ToPartitionStorageDescriptorColumnOutputWithContext(ctx context.Context) PartitionStorageDescriptorColumnOutput {
	return o
}

// Free-form text comment.
func (o PartitionStorageDescriptorColumnOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartitionStorageDescriptorColumn) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

// Name of the SerDe.
func (o PartitionStorageDescriptorColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PartitionStorageDescriptorColumn) string { return v.Name }).(pulumi.StringOutput)
}

// The datatype of data in the Column.
func (o PartitionStorageDescriptorColumnOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartitionStorageDescriptorColumn) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PartitionStorageDescriptorColumnArrayOutput struct{ *pulumi.OutputState }

func (PartitionStorageDescriptorColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PartitionStorageDescriptorColumn)(nil)).Elem()
}

func (o PartitionStorageDescriptorColumnArrayOutput) ToPartitionStorageDescriptorColumnArrayOutput() PartitionStorageDescriptorColumnArrayOutput {
	return o
}

func (o PartitionStorageDescriptorColumnArrayOutput) ToPartitionStorageDescriptorColumnArrayOutputWithContext(ctx context.Context) PartitionStorageDescriptorColumnArrayOutput {
	return o
}

func (o PartitionStorageDescriptorColumnArrayOutput) Index(i pulumi.IntInput) PartitionStorageDescriptorColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PartitionStorageDescriptorColumn {
		return vs[0].([]PartitionStorageDescriptorColumn)[vs[1].(int)]
	}).(PartitionStorageDescriptorColumnOutput)
}

type PartitionStorageDescriptorSerDeInfo struct {
	// Name of the SerDe.
	Name *string `pulumi:"name"`
	// A map of initialization parameters for the SerDe, in key-value form.
	Parameters map[string]string `pulumi:"parameters"`
	// Usually the class that implements the SerDe. An example is: org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe.
	SerializationLibrary *string `pulumi:"serializationLibrary"`
}

// PartitionStorageDescriptorSerDeInfoInput is an input type that accepts PartitionStorageDescriptorSerDeInfoArgs and PartitionStorageDescriptorSerDeInfoOutput values.
// You can construct a concrete instance of `PartitionStorageDescriptorSerDeInfoInput` via:
//
//          PartitionStorageDescriptorSerDeInfoArgs{...}
type PartitionStorageDescriptorSerDeInfoInput interface {
	pulumi.Input

	ToPartitionStorageDescriptorSerDeInfoOutput() PartitionStorageDescriptorSerDeInfoOutput
	ToPartitionStorageDescriptorSerDeInfoOutputWithContext(context.Context) PartitionStorageDescriptorSerDeInfoOutput
}

type PartitionStorageDescriptorSerDeInfoArgs struct {
	// Name of the SerDe.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A map of initialization parameters for the SerDe, in key-value form.
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
	// Usually the class that implements the SerDe. An example is: org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe.
	SerializationLibrary pulumi.StringPtrInput `pulumi:"serializationLibrary"`
}

func (PartitionStorageDescriptorSerDeInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionStorageDescriptorSerDeInfo)(nil)).Elem()
}

func (i PartitionStorageDescriptorSerDeInfoArgs) ToPartitionStorageDescriptorSerDeInfoOutput() PartitionStorageDescriptorSerDeInfoOutput {
	return i.ToPartitionStorageDescriptorSerDeInfoOutputWithContext(context.Background())
}

func (i PartitionStorageDescriptorSerDeInfoArgs) ToPartitionStorageDescriptorSerDeInfoOutputWithContext(ctx context.Context) PartitionStorageDescriptorSerDeInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionStorageDescriptorSerDeInfoOutput)
}

func (i PartitionStorageDescriptorSerDeInfoArgs) ToPartitionStorageDescriptorSerDeInfoPtrOutput() PartitionStorageDescriptorSerDeInfoPtrOutput {
	return i.ToPartitionStorageDescriptorSerDeInfoPtrOutputWithContext(context.Background())
}

func (i PartitionStorageDescriptorSerDeInfoArgs) ToPartitionStorageDescriptorSerDeInfoPtrOutputWithContext(ctx context.Context) PartitionStorageDescriptorSerDeInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionStorageDescriptorSerDeInfoOutput).ToPartitionStorageDescriptorSerDeInfoPtrOutputWithContext(ctx)
}

// PartitionStorageDescriptorSerDeInfoPtrInput is an input type that accepts PartitionStorageDescriptorSerDeInfoArgs, PartitionStorageDescriptorSerDeInfoPtr and PartitionStorageDescriptorSerDeInfoPtrOutput values.
// You can construct a concrete instance of `PartitionStorageDescriptorSerDeInfoPtrInput` via:
//
//          PartitionStorageDescriptorSerDeInfoArgs{...}
//
//  or:
//
//          nil
type PartitionStorageDescriptorSerDeInfoPtrInput interface {
	pulumi.Input

	ToPartitionStorageDescriptorSerDeInfoPtrOutput() PartitionStorageDescriptorSerDeInfoPtrOutput
	ToPartitionStorageDescriptorSerDeInfoPtrOutputWithContext(context.Context) PartitionStorageDescriptorSerDeInfoPtrOutput
}

type partitionStorageDescriptorSerDeInfoPtrType PartitionStorageDescriptorSerDeInfoArgs

func PartitionStorageDescriptorSerDeInfoPtr(v *PartitionStorageDescriptorSerDeInfoArgs) PartitionStorageDescriptorSerDeInfoPtrInput {
	return (*partitionStorageDescriptorSerDeInfoPtrType)(v)
}

func (*partitionStorageDescriptorSerDeInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PartitionStorageDescriptorSerDeInfo)(nil)).Elem()
}

func (i *partitionStorageDescriptorSerDeInfoPtrType) ToPartitionStorageDescriptorSerDeInfoPtrOutput() PartitionStorageDescriptorSerDeInfoPtrOutput {
	return i.ToPartitionStorageDescriptorSerDeInfoPtrOutputWithContext(context.Background())
}

func (i *partitionStorageDescriptorSerDeInfoPtrType) ToPartitionStorageDescriptorSerDeInfoPtrOutputWithContext(ctx context.Context) PartitionStorageDescriptorSerDeInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionStorageDescriptorSerDeInfoPtrOutput)
}

type PartitionStorageDescriptorSerDeInfoOutput struct{ *pulumi.OutputState }

func (PartitionStorageDescriptorSerDeInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionStorageDescriptorSerDeInfo)(nil)).Elem()
}

func (o PartitionStorageDescriptorSerDeInfoOutput) ToPartitionStorageDescriptorSerDeInfoOutput() PartitionStorageDescriptorSerDeInfoOutput {
	return o
}

func (o PartitionStorageDescriptorSerDeInfoOutput) ToPartitionStorageDescriptorSerDeInfoOutputWithContext(ctx context.Context) PartitionStorageDescriptorSerDeInfoOutput {
	return o
}

func (o PartitionStorageDescriptorSerDeInfoOutput) ToPartitionStorageDescriptorSerDeInfoPtrOutput() PartitionStorageDescriptorSerDeInfoPtrOutput {
	return o.ToPartitionStorageDescriptorSerDeInfoPtrOutputWithContext(context.Background())
}

func (o PartitionStorageDescriptorSerDeInfoOutput) ToPartitionStorageDescriptorSerDeInfoPtrOutputWithContext(ctx context.Context) PartitionStorageDescriptorSerDeInfoPtrOutput {
	return o.ApplyT(func(v PartitionStorageDescriptorSerDeInfo) *PartitionStorageDescriptorSerDeInfo {
		return &v
	}).(PartitionStorageDescriptorSerDeInfoPtrOutput)
}

// Name of the SerDe.
func (o PartitionStorageDescriptorSerDeInfoOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartitionStorageDescriptorSerDeInfo) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A map of initialization parameters for the SerDe, in key-value form.
func (o PartitionStorageDescriptorSerDeInfoOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v PartitionStorageDescriptorSerDeInfo) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

// Usually the class that implements the SerDe. An example is: org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe.
func (o PartitionStorageDescriptorSerDeInfoOutput) SerializationLibrary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartitionStorageDescriptorSerDeInfo) *string { return v.SerializationLibrary }).(pulumi.StringPtrOutput)
}

type PartitionStorageDescriptorSerDeInfoPtrOutput struct{ *pulumi.OutputState }

func (PartitionStorageDescriptorSerDeInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartitionStorageDescriptorSerDeInfo)(nil)).Elem()
}

func (o PartitionStorageDescriptorSerDeInfoPtrOutput) ToPartitionStorageDescriptorSerDeInfoPtrOutput() PartitionStorageDescriptorSerDeInfoPtrOutput {
	return o
}

func (o PartitionStorageDescriptorSerDeInfoPtrOutput) ToPartitionStorageDescriptorSerDeInfoPtrOutputWithContext(ctx context.Context) PartitionStorageDescriptorSerDeInfoPtrOutput {
	return o
}

func (o PartitionStorageDescriptorSerDeInfoPtrOutput) Elem() PartitionStorageDescriptorSerDeInfoOutput {
	return o.ApplyT(func(v *PartitionStorageDescriptorSerDeInfo) PartitionStorageDescriptorSerDeInfo { return *v }).(PartitionStorageDescriptorSerDeInfoOutput)
}

// Name of the SerDe.
func (o PartitionStorageDescriptorSerDeInfoPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartitionStorageDescriptorSerDeInfo) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// A map of initialization parameters for the SerDe, in key-value form.
func (o PartitionStorageDescriptorSerDeInfoPtrOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PartitionStorageDescriptorSerDeInfo) map[string]string {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.StringMapOutput)
}

// Usually the class that implements the SerDe. An example is: org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe.
func (o PartitionStorageDescriptorSerDeInfoPtrOutput) SerializationLibrary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartitionStorageDescriptorSerDeInfo) *string {
		if v == nil {
			return nil
		}
		return v.SerializationLibrary
	}).(pulumi.StringPtrOutput)
}

type PartitionStorageDescriptorSkewedInfo struct {
	// A list of names of columns that contain skewed values.
	SkewedColumnNames []string `pulumi:"skewedColumnNames"`
	// A list of values that appear so frequently as to be considered skewed.
	SkewedColumnValueLocationMaps map[string]string `pulumi:"skewedColumnValueLocationMaps"`
	// A map of skewed values to the columns that contain them.
	SkewedColumnValues []string `pulumi:"skewedColumnValues"`
}

// PartitionStorageDescriptorSkewedInfoInput is an input type that accepts PartitionStorageDescriptorSkewedInfoArgs and PartitionStorageDescriptorSkewedInfoOutput values.
// You can construct a concrete instance of `PartitionStorageDescriptorSkewedInfoInput` via:
//
//          PartitionStorageDescriptorSkewedInfoArgs{...}
type PartitionStorageDescriptorSkewedInfoInput interface {
	pulumi.Input

	ToPartitionStorageDescriptorSkewedInfoOutput() PartitionStorageDescriptorSkewedInfoOutput
	ToPartitionStorageDescriptorSkewedInfoOutputWithContext(context.Context) PartitionStorageDescriptorSkewedInfoOutput
}

type PartitionStorageDescriptorSkewedInfoArgs struct {
	// A list of names of columns that contain skewed values.
	SkewedColumnNames pulumi.StringArrayInput `pulumi:"skewedColumnNames"`
	// A list of values that appear so frequently as to be considered skewed.
	SkewedColumnValueLocationMaps pulumi.StringMapInput `pulumi:"skewedColumnValueLocationMaps"`
	// A map of skewed values to the columns that contain them.
	SkewedColumnValues pulumi.StringArrayInput `pulumi:"skewedColumnValues"`
}

func (PartitionStorageDescriptorSkewedInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionStorageDescriptorSkewedInfo)(nil)).Elem()
}

func (i PartitionStorageDescriptorSkewedInfoArgs) ToPartitionStorageDescriptorSkewedInfoOutput() PartitionStorageDescriptorSkewedInfoOutput {
	return i.ToPartitionStorageDescriptorSkewedInfoOutputWithContext(context.Background())
}

func (i PartitionStorageDescriptorSkewedInfoArgs) ToPartitionStorageDescriptorSkewedInfoOutputWithContext(ctx context.Context) PartitionStorageDescriptorSkewedInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionStorageDescriptorSkewedInfoOutput)
}

func (i PartitionStorageDescriptorSkewedInfoArgs) ToPartitionStorageDescriptorSkewedInfoPtrOutput() PartitionStorageDescriptorSkewedInfoPtrOutput {
	return i.ToPartitionStorageDescriptorSkewedInfoPtrOutputWithContext(context.Background())
}

func (i PartitionStorageDescriptorSkewedInfoArgs) ToPartitionStorageDescriptorSkewedInfoPtrOutputWithContext(ctx context.Context) PartitionStorageDescriptorSkewedInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionStorageDescriptorSkewedInfoOutput).ToPartitionStorageDescriptorSkewedInfoPtrOutputWithContext(ctx)
}

// PartitionStorageDescriptorSkewedInfoPtrInput is an input type that accepts PartitionStorageDescriptorSkewedInfoArgs, PartitionStorageDescriptorSkewedInfoPtr and PartitionStorageDescriptorSkewedInfoPtrOutput values.
// You can construct a concrete instance of `PartitionStorageDescriptorSkewedInfoPtrInput` via:
//
//          PartitionStorageDescriptorSkewedInfoArgs{...}
//
//  or:
//
//          nil
type PartitionStorageDescriptorSkewedInfoPtrInput interface {
	pulumi.Input

	ToPartitionStorageDescriptorSkewedInfoPtrOutput() PartitionStorageDescriptorSkewedInfoPtrOutput
	ToPartitionStorageDescriptorSkewedInfoPtrOutputWithContext(context.Context) PartitionStorageDescriptorSkewedInfoPtrOutput
}

type partitionStorageDescriptorSkewedInfoPtrType PartitionStorageDescriptorSkewedInfoArgs

func PartitionStorageDescriptorSkewedInfoPtr(v *PartitionStorageDescriptorSkewedInfoArgs) PartitionStorageDescriptorSkewedInfoPtrInput {
	return (*partitionStorageDescriptorSkewedInfoPtrType)(v)
}

func (*partitionStorageDescriptorSkewedInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PartitionStorageDescriptorSkewedInfo)(nil)).Elem()
}

func (i *partitionStorageDescriptorSkewedInfoPtrType) ToPartitionStorageDescriptorSkewedInfoPtrOutput() PartitionStorageDescriptorSkewedInfoPtrOutput {
	return i.ToPartitionStorageDescriptorSkewedInfoPtrOutputWithContext(context.Background())
}

func (i *partitionStorageDescriptorSkewedInfoPtrType) ToPartitionStorageDescriptorSkewedInfoPtrOutputWithContext(ctx context.Context) PartitionStorageDescriptorSkewedInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionStorageDescriptorSkewedInfoPtrOutput)
}

type PartitionStorageDescriptorSkewedInfoOutput struct{ *pulumi.OutputState }

func (PartitionStorageDescriptorSkewedInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionStorageDescriptorSkewedInfo)(nil)).Elem()
}

func (o PartitionStorageDescriptorSkewedInfoOutput) ToPartitionStorageDescriptorSkewedInfoOutput() PartitionStorageDescriptorSkewedInfoOutput {
	return o
}

func (o PartitionStorageDescriptorSkewedInfoOutput) ToPartitionStorageDescriptorSkewedInfoOutputWithContext(ctx context.Context) PartitionStorageDescriptorSkewedInfoOutput {
	return o
}

func (o PartitionStorageDescriptorSkewedInfoOutput) ToPartitionStorageDescriptorSkewedInfoPtrOutput() PartitionStorageDescriptorSkewedInfoPtrOutput {
	return o.ToPartitionStorageDescriptorSkewedInfoPtrOutputWithContext(context.Background())
}

func (o PartitionStorageDescriptorSkewedInfoOutput) ToPartitionStorageDescriptorSkewedInfoPtrOutputWithContext(ctx context.Context) PartitionStorageDescriptorSkewedInfoPtrOutput {
	return o.ApplyT(func(v PartitionStorageDescriptorSkewedInfo) *PartitionStorageDescriptorSkewedInfo {
		return &v
	}).(PartitionStorageDescriptorSkewedInfoPtrOutput)
}

// A list of names of columns that contain skewed values.
func (o PartitionStorageDescriptorSkewedInfoOutput) SkewedColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PartitionStorageDescriptorSkewedInfo) []string { return v.SkewedColumnNames }).(pulumi.StringArrayOutput)
}

// A list of values that appear so frequently as to be considered skewed.
func (o PartitionStorageDescriptorSkewedInfoOutput) SkewedColumnValueLocationMaps() pulumi.StringMapOutput {
	return o.ApplyT(func(v PartitionStorageDescriptorSkewedInfo) map[string]string { return v.SkewedColumnValueLocationMaps }).(pulumi.StringMapOutput)
}

// A map of skewed values to the columns that contain them.
func (o PartitionStorageDescriptorSkewedInfoOutput) SkewedColumnValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PartitionStorageDescriptorSkewedInfo) []string { return v.SkewedColumnValues }).(pulumi.StringArrayOutput)
}

type PartitionStorageDescriptorSkewedInfoPtrOutput struct{ *pulumi.OutputState }

func (PartitionStorageDescriptorSkewedInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartitionStorageDescriptorSkewedInfo)(nil)).Elem()
}

func (o PartitionStorageDescriptorSkewedInfoPtrOutput) ToPartitionStorageDescriptorSkewedInfoPtrOutput() PartitionStorageDescriptorSkewedInfoPtrOutput {
	return o
}

func (o PartitionStorageDescriptorSkewedInfoPtrOutput) ToPartitionStorageDescriptorSkewedInfoPtrOutputWithContext(ctx context.Context) PartitionStorageDescriptorSkewedInfoPtrOutput {
	return o
}

func (o PartitionStorageDescriptorSkewedInfoPtrOutput) Elem() PartitionStorageDescriptorSkewedInfoOutput {
	return o.ApplyT(func(v *PartitionStorageDescriptorSkewedInfo) PartitionStorageDescriptorSkewedInfo { return *v }).(PartitionStorageDescriptorSkewedInfoOutput)
}

// A list of names of columns that contain skewed values.
func (o PartitionStorageDescriptorSkewedInfoPtrOutput) SkewedColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PartitionStorageDescriptorSkewedInfo) []string {
		if v == nil {
			return nil
		}
		return v.SkewedColumnNames
	}).(pulumi.StringArrayOutput)
}

// A list of values that appear so frequently as to be considered skewed.
func (o PartitionStorageDescriptorSkewedInfoPtrOutput) SkewedColumnValueLocationMaps() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PartitionStorageDescriptorSkewedInfo) map[string]string {
		if v == nil {
			return nil
		}
		return v.SkewedColumnValueLocationMaps
	}).(pulumi.StringMapOutput)
}

// A map of skewed values to the columns that contain them.
func (o PartitionStorageDescriptorSkewedInfoPtrOutput) SkewedColumnValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PartitionStorageDescriptorSkewedInfo) []string {
		if v == nil {
			return nil
		}
		return v.SkewedColumnValues
	}).(pulumi.StringArrayOutput)
}

type PartitionStorageDescriptorSortColumn struct {
	// The name of the column.
	Column string `pulumi:"column"`
	// Indicates that the column is sorted in ascending order (== 1), or in descending order (==0).
	SortOrder int `pulumi:"sortOrder"`
}

// PartitionStorageDescriptorSortColumnInput is an input type that accepts PartitionStorageDescriptorSortColumnArgs and PartitionStorageDescriptorSortColumnOutput values.
// You can construct a concrete instance of `PartitionStorageDescriptorSortColumnInput` via:
//
//          PartitionStorageDescriptorSortColumnArgs{...}
type PartitionStorageDescriptorSortColumnInput interface {
	pulumi.Input

	ToPartitionStorageDescriptorSortColumnOutput() PartitionStorageDescriptorSortColumnOutput
	ToPartitionStorageDescriptorSortColumnOutputWithContext(context.Context) PartitionStorageDescriptorSortColumnOutput
}

type PartitionStorageDescriptorSortColumnArgs struct {
	// The name of the column.
	Column pulumi.StringInput `pulumi:"column"`
	// Indicates that the column is sorted in ascending order (== 1), or in descending order (==0).
	SortOrder pulumi.IntInput `pulumi:"sortOrder"`
}

func (PartitionStorageDescriptorSortColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionStorageDescriptorSortColumn)(nil)).Elem()
}

func (i PartitionStorageDescriptorSortColumnArgs) ToPartitionStorageDescriptorSortColumnOutput() PartitionStorageDescriptorSortColumnOutput {
	return i.ToPartitionStorageDescriptorSortColumnOutputWithContext(context.Background())
}

func (i PartitionStorageDescriptorSortColumnArgs) ToPartitionStorageDescriptorSortColumnOutputWithContext(ctx context.Context) PartitionStorageDescriptorSortColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionStorageDescriptorSortColumnOutput)
}

// PartitionStorageDescriptorSortColumnArrayInput is an input type that accepts PartitionStorageDescriptorSortColumnArray and PartitionStorageDescriptorSortColumnArrayOutput values.
// You can construct a concrete instance of `PartitionStorageDescriptorSortColumnArrayInput` via:
//
//          PartitionStorageDescriptorSortColumnArray{ PartitionStorageDescriptorSortColumnArgs{...} }
type PartitionStorageDescriptorSortColumnArrayInput interface {
	pulumi.Input

	ToPartitionStorageDescriptorSortColumnArrayOutput() PartitionStorageDescriptorSortColumnArrayOutput
	ToPartitionStorageDescriptorSortColumnArrayOutputWithContext(context.Context) PartitionStorageDescriptorSortColumnArrayOutput
}

type PartitionStorageDescriptorSortColumnArray []PartitionStorageDescriptorSortColumnInput

func (PartitionStorageDescriptorSortColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PartitionStorageDescriptorSortColumn)(nil)).Elem()
}

func (i PartitionStorageDescriptorSortColumnArray) ToPartitionStorageDescriptorSortColumnArrayOutput() PartitionStorageDescriptorSortColumnArrayOutput {
	return i.ToPartitionStorageDescriptorSortColumnArrayOutputWithContext(context.Background())
}

func (i PartitionStorageDescriptorSortColumnArray) ToPartitionStorageDescriptorSortColumnArrayOutputWithContext(ctx context.Context) PartitionStorageDescriptorSortColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionStorageDescriptorSortColumnArrayOutput)
}

type PartitionStorageDescriptorSortColumnOutput struct{ *pulumi.OutputState }

func (PartitionStorageDescriptorSortColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionStorageDescriptorSortColumn)(nil)).Elem()
}

func (o PartitionStorageDescriptorSortColumnOutput) ToPartitionStorageDescriptorSortColumnOutput() PartitionStorageDescriptorSortColumnOutput {
	return o
}

func (o PartitionStorageDescriptorSortColumnOutput) ToPartitionStorageDescriptorSortColumnOutputWithContext(ctx context.Context) PartitionStorageDescriptorSortColumnOutput {
	return o
}

// The name of the column.
func (o PartitionStorageDescriptorSortColumnOutput) Column() pulumi.StringOutput {
	return o.ApplyT(func(v PartitionStorageDescriptorSortColumn) string { return v.Column }).(pulumi.StringOutput)
}

// Indicates that the column is sorted in ascending order (== 1), or in descending order (==0).
func (o PartitionStorageDescriptorSortColumnOutput) SortOrder() pulumi.IntOutput {
	return o.ApplyT(func(v PartitionStorageDescriptorSortColumn) int { return v.SortOrder }).(pulumi.IntOutput)
}

type PartitionStorageDescriptorSortColumnArrayOutput struct{ *pulumi.OutputState }

func (PartitionStorageDescriptorSortColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PartitionStorageDescriptorSortColumn)(nil)).Elem()
}

func (o PartitionStorageDescriptorSortColumnArrayOutput) ToPartitionStorageDescriptorSortColumnArrayOutput() PartitionStorageDescriptorSortColumnArrayOutput {
	return o
}

func (o PartitionStorageDescriptorSortColumnArrayOutput) ToPartitionStorageDescriptorSortColumnArrayOutputWithContext(ctx context.Context) PartitionStorageDescriptorSortColumnArrayOutput {
	return o
}

func (o PartitionStorageDescriptorSortColumnArrayOutput) Index(i pulumi.IntInput) PartitionStorageDescriptorSortColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PartitionStorageDescriptorSortColumn {
		return vs[0].([]PartitionStorageDescriptorSortColumn)[vs[1].(int)]
	}).(PartitionStorageDescriptorSortColumnOutput)
}

type SecurityConfigurationEncryptionConfiguration struct {
	CloudwatchEncryption   SecurityConfigurationEncryptionConfigurationCloudwatchEncryption   `pulumi:"cloudwatchEncryption"`
	JobBookmarksEncryption SecurityConfigurationEncryptionConfigurationJobBookmarksEncryption `pulumi:"jobBookmarksEncryption"`
	// A ` s3Encryption  ` block as described below, which contains encryption configuration for S3 data.
	S3Encryption SecurityConfigurationEncryptionConfigurationS3Encryption `pulumi:"s3Encryption"`
}

// SecurityConfigurationEncryptionConfigurationInput is an input type that accepts SecurityConfigurationEncryptionConfigurationArgs and SecurityConfigurationEncryptionConfigurationOutput values.
// You can construct a concrete instance of `SecurityConfigurationEncryptionConfigurationInput` via:
//
//          SecurityConfigurationEncryptionConfigurationArgs{...}
type SecurityConfigurationEncryptionConfigurationInput interface {
	pulumi.Input

	ToSecurityConfigurationEncryptionConfigurationOutput() SecurityConfigurationEncryptionConfigurationOutput
	ToSecurityConfigurationEncryptionConfigurationOutputWithContext(context.Context) SecurityConfigurationEncryptionConfigurationOutput
}

type SecurityConfigurationEncryptionConfigurationArgs struct {
	CloudwatchEncryption   SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionInput   `pulumi:"cloudwatchEncryption"`
	JobBookmarksEncryption SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionInput `pulumi:"jobBookmarksEncryption"`
	// A ` s3Encryption  ` block as described below, which contains encryption configuration for S3 data.
	S3Encryption SecurityConfigurationEncryptionConfigurationS3EncryptionInput `pulumi:"s3Encryption"`
}

func (SecurityConfigurationEncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityConfigurationEncryptionConfiguration)(nil)).Elem()
}

func (i SecurityConfigurationEncryptionConfigurationArgs) ToSecurityConfigurationEncryptionConfigurationOutput() SecurityConfigurationEncryptionConfigurationOutput {
	return i.ToSecurityConfigurationEncryptionConfigurationOutputWithContext(context.Background())
}

func (i SecurityConfigurationEncryptionConfigurationArgs) ToSecurityConfigurationEncryptionConfigurationOutputWithContext(ctx context.Context) SecurityConfigurationEncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityConfigurationEncryptionConfigurationOutput)
}

func (i SecurityConfigurationEncryptionConfigurationArgs) ToSecurityConfigurationEncryptionConfigurationPtrOutput() SecurityConfigurationEncryptionConfigurationPtrOutput {
	return i.ToSecurityConfigurationEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i SecurityConfigurationEncryptionConfigurationArgs) ToSecurityConfigurationEncryptionConfigurationPtrOutputWithContext(ctx context.Context) SecurityConfigurationEncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityConfigurationEncryptionConfigurationOutput).ToSecurityConfigurationEncryptionConfigurationPtrOutputWithContext(ctx)
}

// SecurityConfigurationEncryptionConfigurationPtrInput is an input type that accepts SecurityConfigurationEncryptionConfigurationArgs, SecurityConfigurationEncryptionConfigurationPtr and SecurityConfigurationEncryptionConfigurationPtrOutput values.
// You can construct a concrete instance of `SecurityConfigurationEncryptionConfigurationPtrInput` via:
//
//          SecurityConfigurationEncryptionConfigurationArgs{...}
//
//  or:
//
//          nil
type SecurityConfigurationEncryptionConfigurationPtrInput interface {
	pulumi.Input

	ToSecurityConfigurationEncryptionConfigurationPtrOutput() SecurityConfigurationEncryptionConfigurationPtrOutput
	ToSecurityConfigurationEncryptionConfigurationPtrOutputWithContext(context.Context) SecurityConfigurationEncryptionConfigurationPtrOutput
}

type securityConfigurationEncryptionConfigurationPtrType SecurityConfigurationEncryptionConfigurationArgs

func SecurityConfigurationEncryptionConfigurationPtr(v *SecurityConfigurationEncryptionConfigurationArgs) SecurityConfigurationEncryptionConfigurationPtrInput {
	return (*securityConfigurationEncryptionConfigurationPtrType)(v)
}

func (*securityConfigurationEncryptionConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityConfigurationEncryptionConfiguration)(nil)).Elem()
}

func (i *securityConfigurationEncryptionConfigurationPtrType) ToSecurityConfigurationEncryptionConfigurationPtrOutput() SecurityConfigurationEncryptionConfigurationPtrOutput {
	return i.ToSecurityConfigurationEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i *securityConfigurationEncryptionConfigurationPtrType) ToSecurityConfigurationEncryptionConfigurationPtrOutputWithContext(ctx context.Context) SecurityConfigurationEncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityConfigurationEncryptionConfigurationPtrOutput)
}

type SecurityConfigurationEncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (SecurityConfigurationEncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityConfigurationEncryptionConfiguration)(nil)).Elem()
}

func (o SecurityConfigurationEncryptionConfigurationOutput) ToSecurityConfigurationEncryptionConfigurationOutput() SecurityConfigurationEncryptionConfigurationOutput {
	return o
}

func (o SecurityConfigurationEncryptionConfigurationOutput) ToSecurityConfigurationEncryptionConfigurationOutputWithContext(ctx context.Context) SecurityConfigurationEncryptionConfigurationOutput {
	return o
}

func (o SecurityConfigurationEncryptionConfigurationOutput) ToSecurityConfigurationEncryptionConfigurationPtrOutput() SecurityConfigurationEncryptionConfigurationPtrOutput {
	return o.ToSecurityConfigurationEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (o SecurityConfigurationEncryptionConfigurationOutput) ToSecurityConfigurationEncryptionConfigurationPtrOutputWithContext(ctx context.Context) SecurityConfigurationEncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v SecurityConfigurationEncryptionConfiguration) *SecurityConfigurationEncryptionConfiguration {
		return &v
	}).(SecurityConfigurationEncryptionConfigurationPtrOutput)
}
func (o SecurityConfigurationEncryptionConfigurationOutput) CloudwatchEncryption() SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput {
	return o.ApplyT(func(v SecurityConfigurationEncryptionConfiguration) SecurityConfigurationEncryptionConfigurationCloudwatchEncryption {
		return v.CloudwatchEncryption
	}).(SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput)
}

func (o SecurityConfigurationEncryptionConfigurationOutput) JobBookmarksEncryption() SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput {
	return o.ApplyT(func(v SecurityConfigurationEncryptionConfiguration) SecurityConfigurationEncryptionConfigurationJobBookmarksEncryption {
		return v.JobBookmarksEncryption
	}).(SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput)
}

// A ` s3Encryption  ` block as described below, which contains encryption configuration for S3 data.
func (o SecurityConfigurationEncryptionConfigurationOutput) S3Encryption() SecurityConfigurationEncryptionConfigurationS3EncryptionOutput {
	return o.ApplyT(func(v SecurityConfigurationEncryptionConfiguration) SecurityConfigurationEncryptionConfigurationS3Encryption {
		return v.S3Encryption
	}).(SecurityConfigurationEncryptionConfigurationS3EncryptionOutput)
}

type SecurityConfigurationEncryptionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (SecurityConfigurationEncryptionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityConfigurationEncryptionConfiguration)(nil)).Elem()
}

func (o SecurityConfigurationEncryptionConfigurationPtrOutput) ToSecurityConfigurationEncryptionConfigurationPtrOutput() SecurityConfigurationEncryptionConfigurationPtrOutput {
	return o
}

func (o SecurityConfigurationEncryptionConfigurationPtrOutput) ToSecurityConfigurationEncryptionConfigurationPtrOutputWithContext(ctx context.Context) SecurityConfigurationEncryptionConfigurationPtrOutput {
	return o
}

func (o SecurityConfigurationEncryptionConfigurationPtrOutput) Elem() SecurityConfigurationEncryptionConfigurationOutput {
	return o.ApplyT(func(v *SecurityConfigurationEncryptionConfiguration) SecurityConfigurationEncryptionConfiguration {
		return *v
	}).(SecurityConfigurationEncryptionConfigurationOutput)
}

func (o SecurityConfigurationEncryptionConfigurationPtrOutput) CloudwatchEncryption() SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrOutput {
	return o.ApplyT(func(v *SecurityConfigurationEncryptionConfiguration) *SecurityConfigurationEncryptionConfigurationCloudwatchEncryption {
		if v == nil {
			return nil
		}
		return &v.CloudwatchEncryption
	}).(SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrOutput)
}

func (o SecurityConfigurationEncryptionConfigurationPtrOutput) JobBookmarksEncryption() SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrOutput {
	return o.ApplyT(func(v *SecurityConfigurationEncryptionConfiguration) *SecurityConfigurationEncryptionConfigurationJobBookmarksEncryption {
		if v == nil {
			return nil
		}
		return &v.JobBookmarksEncryption
	}).(SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrOutput)
}

// A ` s3Encryption  ` block as described below, which contains encryption configuration for S3 data.
func (o SecurityConfigurationEncryptionConfigurationPtrOutput) S3Encryption() SecurityConfigurationEncryptionConfigurationS3EncryptionPtrOutput {
	return o.ApplyT(func(v *SecurityConfigurationEncryptionConfiguration) *SecurityConfigurationEncryptionConfigurationS3Encryption {
		if v == nil {
			return nil
		}
		return &v.S3Encryption
	}).(SecurityConfigurationEncryptionConfigurationS3EncryptionPtrOutput)
}

type SecurityConfigurationEncryptionConfigurationCloudwatchEncryption struct {
	// Encryption mode to use for CloudWatch data. Valid values: `DISABLED`, `SSE-KMS`. Default value: `DISABLED`.
	CloudwatchEncryptionMode *string `pulumi:"cloudwatchEncryptionMode"`
	// Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
}

// SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionInput is an input type that accepts SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionArgs and SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput values.
// You can construct a concrete instance of `SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionInput` via:
//
//          SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionArgs{...}
type SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionInput interface {
	pulumi.Input

	ToSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput() SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput
	ToSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutputWithContext(context.Context) SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput
}

type SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionArgs struct {
	// Encryption mode to use for CloudWatch data. Valid values: `DISABLED`, `SSE-KMS`. Default value: `DISABLED`.
	CloudwatchEncryptionMode pulumi.StringPtrInput `pulumi:"cloudwatchEncryptionMode"`
	// Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
	KmsKeyArn pulumi.StringPtrInput `pulumi:"kmsKeyArn"`
}

func (SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityConfigurationEncryptionConfigurationCloudwatchEncryption)(nil)).Elem()
}

func (i SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionArgs) ToSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput() SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput {
	return i.ToSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutputWithContext(context.Background())
}

func (i SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionArgs) ToSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutputWithContext(ctx context.Context) SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput)
}

func (i SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionArgs) ToSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrOutput() SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrOutput {
	return i.ToSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrOutputWithContext(context.Background())
}

func (i SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionArgs) ToSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrOutputWithContext(ctx context.Context) SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput).ToSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrOutputWithContext(ctx)
}

// SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrInput is an input type that accepts SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionArgs, SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtr and SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrOutput values.
// You can construct a concrete instance of `SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrInput` via:
//
//          SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionArgs{...}
//
//  or:
//
//          nil
type SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrInput interface {
	pulumi.Input

	ToSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrOutput() SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrOutput
	ToSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrOutputWithContext(context.Context) SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrOutput
}

type securityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrType SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionArgs

func SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtr(v *SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionArgs) SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrInput {
	return (*securityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrType)(v)
}

func (*securityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityConfigurationEncryptionConfigurationCloudwatchEncryption)(nil)).Elem()
}

func (i *securityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrType) ToSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrOutput() SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrOutput {
	return i.ToSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrOutputWithContext(context.Background())
}

func (i *securityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrType) ToSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrOutputWithContext(ctx context.Context) SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrOutput)
}

type SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput struct{ *pulumi.OutputState }

func (SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityConfigurationEncryptionConfigurationCloudwatchEncryption)(nil)).Elem()
}

func (o SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput) ToSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput() SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput {
	return o
}

func (o SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput) ToSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutputWithContext(ctx context.Context) SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput {
	return o
}

func (o SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput) ToSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrOutput() SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrOutput {
	return o.ToSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrOutputWithContext(context.Background())
}

func (o SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput) ToSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrOutputWithContext(ctx context.Context) SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrOutput {
	return o.ApplyT(func(v SecurityConfigurationEncryptionConfigurationCloudwatchEncryption) *SecurityConfigurationEncryptionConfigurationCloudwatchEncryption {
		return &v
	}).(SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrOutput)
}

// Encryption mode to use for CloudWatch data. Valid values: `DISABLED`, `SSE-KMS`. Default value: `DISABLED`.
func (o SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput) CloudwatchEncryptionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityConfigurationEncryptionConfigurationCloudwatchEncryption) *string {
		return v.CloudwatchEncryptionMode
	}).(pulumi.StringPtrOutput)
}

// Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
func (o SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput) KmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityConfigurationEncryptionConfigurationCloudwatchEncryption) *string { return v.KmsKeyArn }).(pulumi.StringPtrOutput)
}

type SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrOutput struct{ *pulumi.OutputState }

func (SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityConfigurationEncryptionConfigurationCloudwatchEncryption)(nil)).Elem()
}

func (o SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrOutput) ToSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrOutput() SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrOutput {
	return o
}

func (o SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrOutput) ToSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrOutputWithContext(ctx context.Context) SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrOutput {
	return o
}

func (o SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrOutput) Elem() SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput {
	return o.ApplyT(func(v *SecurityConfigurationEncryptionConfigurationCloudwatchEncryption) SecurityConfigurationEncryptionConfigurationCloudwatchEncryption {
		return *v
	}).(SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput)
}

// Encryption mode to use for CloudWatch data. Valid values: `DISABLED`, `SSE-KMS`. Default value: `DISABLED`.
func (o SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrOutput) CloudwatchEncryptionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityConfigurationEncryptionConfigurationCloudwatchEncryption) *string {
		if v == nil {
			return nil
		}
		return v.CloudwatchEncryptionMode
	}).(pulumi.StringPtrOutput)
}

// Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
func (o SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrOutput) KmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityConfigurationEncryptionConfigurationCloudwatchEncryption) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyArn
	}).(pulumi.StringPtrOutput)
}

type SecurityConfigurationEncryptionConfigurationJobBookmarksEncryption struct {
	// Encryption mode to use for job bookmarks data. Valid values: `CSE-KMS`, `DISABLED`. Default value: `DISABLED`.
	JobBookmarksEncryptionMode *string `pulumi:"jobBookmarksEncryptionMode"`
	// Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
}

// SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionInput is an input type that accepts SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionArgs and SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput values.
// You can construct a concrete instance of `SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionInput` via:
//
//          SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionArgs{...}
type SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionInput interface {
	pulumi.Input

	ToSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput() SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput
	ToSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutputWithContext(context.Context) SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput
}

type SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionArgs struct {
	// Encryption mode to use for job bookmarks data. Valid values: `CSE-KMS`, `DISABLED`. Default value: `DISABLED`.
	JobBookmarksEncryptionMode pulumi.StringPtrInput `pulumi:"jobBookmarksEncryptionMode"`
	// Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
	KmsKeyArn pulumi.StringPtrInput `pulumi:"kmsKeyArn"`
}

func (SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityConfigurationEncryptionConfigurationJobBookmarksEncryption)(nil)).Elem()
}

func (i SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionArgs) ToSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput() SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput {
	return i.ToSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutputWithContext(context.Background())
}

func (i SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionArgs) ToSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutputWithContext(ctx context.Context) SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput)
}

func (i SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionArgs) ToSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrOutput() SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrOutput {
	return i.ToSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrOutputWithContext(context.Background())
}

func (i SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionArgs) ToSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrOutputWithContext(ctx context.Context) SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput).ToSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrOutputWithContext(ctx)
}

// SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrInput is an input type that accepts SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionArgs, SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtr and SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrOutput values.
// You can construct a concrete instance of `SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrInput` via:
//
//          SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionArgs{...}
//
//  or:
//
//          nil
type SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrInput interface {
	pulumi.Input

	ToSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrOutput() SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrOutput
	ToSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrOutputWithContext(context.Context) SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrOutput
}

type securityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrType SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionArgs

func SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtr(v *SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionArgs) SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrInput {
	return (*securityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrType)(v)
}

func (*securityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityConfigurationEncryptionConfigurationJobBookmarksEncryption)(nil)).Elem()
}

func (i *securityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrType) ToSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrOutput() SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrOutput {
	return i.ToSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrOutputWithContext(context.Background())
}

func (i *securityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrType) ToSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrOutputWithContext(ctx context.Context) SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrOutput)
}

type SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput struct{ *pulumi.OutputState }

func (SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityConfigurationEncryptionConfigurationJobBookmarksEncryption)(nil)).Elem()
}

func (o SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput) ToSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput() SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput {
	return o
}

func (o SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput) ToSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutputWithContext(ctx context.Context) SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput {
	return o
}

func (o SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput) ToSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrOutput() SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrOutput {
	return o.ToSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrOutputWithContext(context.Background())
}

func (o SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput) ToSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrOutputWithContext(ctx context.Context) SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrOutput {
	return o.ApplyT(func(v SecurityConfigurationEncryptionConfigurationJobBookmarksEncryption) *SecurityConfigurationEncryptionConfigurationJobBookmarksEncryption {
		return &v
	}).(SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrOutput)
}

// Encryption mode to use for job bookmarks data. Valid values: `CSE-KMS`, `DISABLED`. Default value: `DISABLED`.
func (o SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput) JobBookmarksEncryptionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityConfigurationEncryptionConfigurationJobBookmarksEncryption) *string {
		return v.JobBookmarksEncryptionMode
	}).(pulumi.StringPtrOutput)
}

// Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
func (o SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput) KmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityConfigurationEncryptionConfigurationJobBookmarksEncryption) *string { return v.KmsKeyArn }).(pulumi.StringPtrOutput)
}

type SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrOutput struct{ *pulumi.OutputState }

func (SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityConfigurationEncryptionConfigurationJobBookmarksEncryption)(nil)).Elem()
}

func (o SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrOutput) ToSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrOutput() SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrOutput {
	return o
}

func (o SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrOutput) ToSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrOutputWithContext(ctx context.Context) SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrOutput {
	return o
}

func (o SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrOutput) Elem() SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput {
	return o.ApplyT(func(v *SecurityConfigurationEncryptionConfigurationJobBookmarksEncryption) SecurityConfigurationEncryptionConfigurationJobBookmarksEncryption {
		return *v
	}).(SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput)
}

// Encryption mode to use for job bookmarks data. Valid values: `CSE-KMS`, `DISABLED`. Default value: `DISABLED`.
func (o SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrOutput) JobBookmarksEncryptionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityConfigurationEncryptionConfigurationJobBookmarksEncryption) *string {
		if v == nil {
			return nil
		}
		return v.JobBookmarksEncryptionMode
	}).(pulumi.StringPtrOutput)
}

// Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
func (o SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrOutput) KmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityConfigurationEncryptionConfigurationJobBookmarksEncryption) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyArn
	}).(pulumi.StringPtrOutput)
}

type SecurityConfigurationEncryptionConfigurationS3Encryption struct {
	// Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// Encryption mode to use for S3 data. Valid values: `DISABLED`, `SSE-KMS`, `SSE-S3`. Default value: `DISABLED`.
	S3EncryptionMode *string `pulumi:"s3EncryptionMode"`
}

// SecurityConfigurationEncryptionConfigurationS3EncryptionInput is an input type that accepts SecurityConfigurationEncryptionConfigurationS3EncryptionArgs and SecurityConfigurationEncryptionConfigurationS3EncryptionOutput values.
// You can construct a concrete instance of `SecurityConfigurationEncryptionConfigurationS3EncryptionInput` via:
//
//          SecurityConfigurationEncryptionConfigurationS3EncryptionArgs{...}
type SecurityConfigurationEncryptionConfigurationS3EncryptionInput interface {
	pulumi.Input

	ToSecurityConfigurationEncryptionConfigurationS3EncryptionOutput() SecurityConfigurationEncryptionConfigurationS3EncryptionOutput
	ToSecurityConfigurationEncryptionConfigurationS3EncryptionOutputWithContext(context.Context) SecurityConfigurationEncryptionConfigurationS3EncryptionOutput
}

type SecurityConfigurationEncryptionConfigurationS3EncryptionArgs struct {
	// Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
	KmsKeyArn pulumi.StringPtrInput `pulumi:"kmsKeyArn"`
	// Encryption mode to use for S3 data. Valid values: `DISABLED`, `SSE-KMS`, `SSE-S3`. Default value: `DISABLED`.
	S3EncryptionMode pulumi.StringPtrInput `pulumi:"s3EncryptionMode"`
}

func (SecurityConfigurationEncryptionConfigurationS3EncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityConfigurationEncryptionConfigurationS3Encryption)(nil)).Elem()
}

func (i SecurityConfigurationEncryptionConfigurationS3EncryptionArgs) ToSecurityConfigurationEncryptionConfigurationS3EncryptionOutput() SecurityConfigurationEncryptionConfigurationS3EncryptionOutput {
	return i.ToSecurityConfigurationEncryptionConfigurationS3EncryptionOutputWithContext(context.Background())
}

func (i SecurityConfigurationEncryptionConfigurationS3EncryptionArgs) ToSecurityConfigurationEncryptionConfigurationS3EncryptionOutputWithContext(ctx context.Context) SecurityConfigurationEncryptionConfigurationS3EncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityConfigurationEncryptionConfigurationS3EncryptionOutput)
}

func (i SecurityConfigurationEncryptionConfigurationS3EncryptionArgs) ToSecurityConfigurationEncryptionConfigurationS3EncryptionPtrOutput() SecurityConfigurationEncryptionConfigurationS3EncryptionPtrOutput {
	return i.ToSecurityConfigurationEncryptionConfigurationS3EncryptionPtrOutputWithContext(context.Background())
}

func (i SecurityConfigurationEncryptionConfigurationS3EncryptionArgs) ToSecurityConfigurationEncryptionConfigurationS3EncryptionPtrOutputWithContext(ctx context.Context) SecurityConfigurationEncryptionConfigurationS3EncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityConfigurationEncryptionConfigurationS3EncryptionOutput).ToSecurityConfigurationEncryptionConfigurationS3EncryptionPtrOutputWithContext(ctx)
}

// SecurityConfigurationEncryptionConfigurationS3EncryptionPtrInput is an input type that accepts SecurityConfigurationEncryptionConfigurationS3EncryptionArgs, SecurityConfigurationEncryptionConfigurationS3EncryptionPtr and SecurityConfigurationEncryptionConfigurationS3EncryptionPtrOutput values.
// You can construct a concrete instance of `SecurityConfigurationEncryptionConfigurationS3EncryptionPtrInput` via:
//
//          SecurityConfigurationEncryptionConfigurationS3EncryptionArgs{...}
//
//  or:
//
//          nil
type SecurityConfigurationEncryptionConfigurationS3EncryptionPtrInput interface {
	pulumi.Input

	ToSecurityConfigurationEncryptionConfigurationS3EncryptionPtrOutput() SecurityConfigurationEncryptionConfigurationS3EncryptionPtrOutput
	ToSecurityConfigurationEncryptionConfigurationS3EncryptionPtrOutputWithContext(context.Context) SecurityConfigurationEncryptionConfigurationS3EncryptionPtrOutput
}

type securityConfigurationEncryptionConfigurationS3EncryptionPtrType SecurityConfigurationEncryptionConfigurationS3EncryptionArgs

func SecurityConfigurationEncryptionConfigurationS3EncryptionPtr(v *SecurityConfigurationEncryptionConfigurationS3EncryptionArgs) SecurityConfigurationEncryptionConfigurationS3EncryptionPtrInput {
	return (*securityConfigurationEncryptionConfigurationS3EncryptionPtrType)(v)
}

func (*securityConfigurationEncryptionConfigurationS3EncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityConfigurationEncryptionConfigurationS3Encryption)(nil)).Elem()
}

func (i *securityConfigurationEncryptionConfigurationS3EncryptionPtrType) ToSecurityConfigurationEncryptionConfigurationS3EncryptionPtrOutput() SecurityConfigurationEncryptionConfigurationS3EncryptionPtrOutput {
	return i.ToSecurityConfigurationEncryptionConfigurationS3EncryptionPtrOutputWithContext(context.Background())
}

func (i *securityConfigurationEncryptionConfigurationS3EncryptionPtrType) ToSecurityConfigurationEncryptionConfigurationS3EncryptionPtrOutputWithContext(ctx context.Context) SecurityConfigurationEncryptionConfigurationS3EncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityConfigurationEncryptionConfigurationS3EncryptionPtrOutput)
}

type SecurityConfigurationEncryptionConfigurationS3EncryptionOutput struct{ *pulumi.OutputState }

func (SecurityConfigurationEncryptionConfigurationS3EncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityConfigurationEncryptionConfigurationS3Encryption)(nil)).Elem()
}

func (o SecurityConfigurationEncryptionConfigurationS3EncryptionOutput) ToSecurityConfigurationEncryptionConfigurationS3EncryptionOutput() SecurityConfigurationEncryptionConfigurationS3EncryptionOutput {
	return o
}

func (o SecurityConfigurationEncryptionConfigurationS3EncryptionOutput) ToSecurityConfigurationEncryptionConfigurationS3EncryptionOutputWithContext(ctx context.Context) SecurityConfigurationEncryptionConfigurationS3EncryptionOutput {
	return o
}

func (o SecurityConfigurationEncryptionConfigurationS3EncryptionOutput) ToSecurityConfigurationEncryptionConfigurationS3EncryptionPtrOutput() SecurityConfigurationEncryptionConfigurationS3EncryptionPtrOutput {
	return o.ToSecurityConfigurationEncryptionConfigurationS3EncryptionPtrOutputWithContext(context.Background())
}

func (o SecurityConfigurationEncryptionConfigurationS3EncryptionOutput) ToSecurityConfigurationEncryptionConfigurationS3EncryptionPtrOutputWithContext(ctx context.Context) SecurityConfigurationEncryptionConfigurationS3EncryptionPtrOutput {
	return o.ApplyT(func(v SecurityConfigurationEncryptionConfigurationS3Encryption) *SecurityConfigurationEncryptionConfigurationS3Encryption {
		return &v
	}).(SecurityConfigurationEncryptionConfigurationS3EncryptionPtrOutput)
}

// Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
func (o SecurityConfigurationEncryptionConfigurationS3EncryptionOutput) KmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityConfigurationEncryptionConfigurationS3Encryption) *string { return v.KmsKeyArn }).(pulumi.StringPtrOutput)
}

// Encryption mode to use for S3 data. Valid values: `DISABLED`, `SSE-KMS`, `SSE-S3`. Default value: `DISABLED`.
func (o SecurityConfigurationEncryptionConfigurationS3EncryptionOutput) S3EncryptionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityConfigurationEncryptionConfigurationS3Encryption) *string { return v.S3EncryptionMode }).(pulumi.StringPtrOutput)
}

type SecurityConfigurationEncryptionConfigurationS3EncryptionPtrOutput struct{ *pulumi.OutputState }

func (SecurityConfigurationEncryptionConfigurationS3EncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityConfigurationEncryptionConfigurationS3Encryption)(nil)).Elem()
}

func (o SecurityConfigurationEncryptionConfigurationS3EncryptionPtrOutput) ToSecurityConfigurationEncryptionConfigurationS3EncryptionPtrOutput() SecurityConfigurationEncryptionConfigurationS3EncryptionPtrOutput {
	return o
}

func (o SecurityConfigurationEncryptionConfigurationS3EncryptionPtrOutput) ToSecurityConfigurationEncryptionConfigurationS3EncryptionPtrOutputWithContext(ctx context.Context) SecurityConfigurationEncryptionConfigurationS3EncryptionPtrOutput {
	return o
}

func (o SecurityConfigurationEncryptionConfigurationS3EncryptionPtrOutput) Elem() SecurityConfigurationEncryptionConfigurationS3EncryptionOutput {
	return o.ApplyT(func(v *SecurityConfigurationEncryptionConfigurationS3Encryption) SecurityConfigurationEncryptionConfigurationS3Encryption {
		return *v
	}).(SecurityConfigurationEncryptionConfigurationS3EncryptionOutput)
}

// Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
func (o SecurityConfigurationEncryptionConfigurationS3EncryptionPtrOutput) KmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityConfigurationEncryptionConfigurationS3Encryption) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyArn
	}).(pulumi.StringPtrOutput)
}

// Encryption mode to use for S3 data. Valid values: `DISABLED`, `SSE-KMS`, `SSE-S3`. Default value: `DISABLED`.
func (o SecurityConfigurationEncryptionConfigurationS3EncryptionPtrOutput) S3EncryptionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityConfigurationEncryptionConfigurationS3Encryption) *string {
		if v == nil {
			return nil
		}
		return v.S3EncryptionMode
	}).(pulumi.StringPtrOutput)
}

type TriggerAction struct {
	// Arguments to be passed to the job. You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes.
	Arguments map[string]string `pulumi:"arguments"`
	// The name of the crawler to be executed. Conflicts with `jobName`.
	CrawlerName *string `pulumi:"crawlerName"`
	// The name of a job to be executed. Conflicts with `crawlerName`.
	JobName *string `pulumi:"jobName"`
	// Specifies configuration properties of a job run notification. see Notification Property details below.
	NotificationProperty *TriggerActionNotificationProperty `pulumi:"notificationProperty"`
	// The name of the Security Configuration structure to be used with this action.
	SecurityConfiguration *string `pulumi:"securityConfiguration"`
	// The job run timeout in minutes. It overrides the timeout value of the job.
	Timeout *int `pulumi:"timeout"`
}

// TriggerActionInput is an input type that accepts TriggerActionArgs and TriggerActionOutput values.
// You can construct a concrete instance of `TriggerActionInput` via:
//
//          TriggerActionArgs{...}
type TriggerActionInput interface {
	pulumi.Input

	ToTriggerActionOutput() TriggerActionOutput
	ToTriggerActionOutputWithContext(context.Context) TriggerActionOutput
}

type TriggerActionArgs struct {
	// Arguments to be passed to the job. You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes.
	Arguments pulumi.StringMapInput `pulumi:"arguments"`
	// The name of the crawler to be executed. Conflicts with `jobName`.
	CrawlerName pulumi.StringPtrInput `pulumi:"crawlerName"`
	// The name of a job to be executed. Conflicts with `crawlerName`.
	JobName pulumi.StringPtrInput `pulumi:"jobName"`
	// Specifies configuration properties of a job run notification. see Notification Property details below.
	NotificationProperty TriggerActionNotificationPropertyPtrInput `pulumi:"notificationProperty"`
	// The name of the Security Configuration structure to be used with this action.
	SecurityConfiguration pulumi.StringPtrInput `pulumi:"securityConfiguration"`
	// The job run timeout in minutes. It overrides the timeout value of the job.
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
}

func (TriggerActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerAction)(nil)).Elem()
}

func (i TriggerActionArgs) ToTriggerActionOutput() TriggerActionOutput {
	return i.ToTriggerActionOutputWithContext(context.Background())
}

func (i TriggerActionArgs) ToTriggerActionOutputWithContext(ctx context.Context) TriggerActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerActionOutput)
}

// TriggerActionArrayInput is an input type that accepts TriggerActionArray and TriggerActionArrayOutput values.
// You can construct a concrete instance of `TriggerActionArrayInput` via:
//
//          TriggerActionArray{ TriggerActionArgs{...} }
type TriggerActionArrayInput interface {
	pulumi.Input

	ToTriggerActionArrayOutput() TriggerActionArrayOutput
	ToTriggerActionArrayOutputWithContext(context.Context) TriggerActionArrayOutput
}

type TriggerActionArray []TriggerActionInput

func (TriggerActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerAction)(nil)).Elem()
}

func (i TriggerActionArray) ToTriggerActionArrayOutput() TriggerActionArrayOutput {
	return i.ToTriggerActionArrayOutputWithContext(context.Background())
}

func (i TriggerActionArray) ToTriggerActionArrayOutputWithContext(ctx context.Context) TriggerActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerActionArrayOutput)
}

type TriggerActionOutput struct{ *pulumi.OutputState }

func (TriggerActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerAction)(nil)).Elem()
}

func (o TriggerActionOutput) ToTriggerActionOutput() TriggerActionOutput {
	return o
}

func (o TriggerActionOutput) ToTriggerActionOutputWithContext(ctx context.Context) TriggerActionOutput {
	return o
}

// Arguments to be passed to the job. You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes.
func (o TriggerActionOutput) Arguments() pulumi.StringMapOutput {
	return o.ApplyT(func(v TriggerAction) map[string]string { return v.Arguments }).(pulumi.StringMapOutput)
}

// The name of the crawler to be executed. Conflicts with `jobName`.
func (o TriggerActionOutput) CrawlerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerAction) *string { return v.CrawlerName }).(pulumi.StringPtrOutput)
}

// The name of a job to be executed. Conflicts with `crawlerName`.
func (o TriggerActionOutput) JobName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerAction) *string { return v.JobName }).(pulumi.StringPtrOutput)
}

// Specifies configuration properties of a job run notification. see Notification Property details below.
func (o TriggerActionOutput) NotificationProperty() TriggerActionNotificationPropertyPtrOutput {
	return o.ApplyT(func(v TriggerAction) *TriggerActionNotificationProperty { return v.NotificationProperty }).(TriggerActionNotificationPropertyPtrOutput)
}

// The name of the Security Configuration structure to be used with this action.
func (o TriggerActionOutput) SecurityConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerAction) *string { return v.SecurityConfiguration }).(pulumi.StringPtrOutput)
}

// The job run timeout in minutes. It overrides the timeout value of the job.
func (o TriggerActionOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TriggerAction) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

type TriggerActionArrayOutput struct{ *pulumi.OutputState }

func (TriggerActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerAction)(nil)).Elem()
}

func (o TriggerActionArrayOutput) ToTriggerActionArrayOutput() TriggerActionArrayOutput {
	return o
}

func (o TriggerActionArrayOutput) ToTriggerActionArrayOutputWithContext(ctx context.Context) TriggerActionArrayOutput {
	return o
}

func (o TriggerActionArrayOutput) Index(i pulumi.IntInput) TriggerActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TriggerAction {
		return vs[0].([]TriggerAction)[vs[1].(int)]
	}).(TriggerActionOutput)
}

type TriggerActionNotificationProperty struct {
	// After a job run starts, the number of minutes to wait before sending a job run delay notification.
	NotifyDelayAfter *int `pulumi:"notifyDelayAfter"`
}

// TriggerActionNotificationPropertyInput is an input type that accepts TriggerActionNotificationPropertyArgs and TriggerActionNotificationPropertyOutput values.
// You can construct a concrete instance of `TriggerActionNotificationPropertyInput` via:
//
//          TriggerActionNotificationPropertyArgs{...}
type TriggerActionNotificationPropertyInput interface {
	pulumi.Input

	ToTriggerActionNotificationPropertyOutput() TriggerActionNotificationPropertyOutput
	ToTriggerActionNotificationPropertyOutputWithContext(context.Context) TriggerActionNotificationPropertyOutput
}

type TriggerActionNotificationPropertyArgs struct {
	// After a job run starts, the number of minutes to wait before sending a job run delay notification.
	NotifyDelayAfter pulumi.IntPtrInput `pulumi:"notifyDelayAfter"`
}

func (TriggerActionNotificationPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerActionNotificationProperty)(nil)).Elem()
}

func (i TriggerActionNotificationPropertyArgs) ToTriggerActionNotificationPropertyOutput() TriggerActionNotificationPropertyOutput {
	return i.ToTriggerActionNotificationPropertyOutputWithContext(context.Background())
}

func (i TriggerActionNotificationPropertyArgs) ToTriggerActionNotificationPropertyOutputWithContext(ctx context.Context) TriggerActionNotificationPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerActionNotificationPropertyOutput)
}

func (i TriggerActionNotificationPropertyArgs) ToTriggerActionNotificationPropertyPtrOutput() TriggerActionNotificationPropertyPtrOutput {
	return i.ToTriggerActionNotificationPropertyPtrOutputWithContext(context.Background())
}

func (i TriggerActionNotificationPropertyArgs) ToTriggerActionNotificationPropertyPtrOutputWithContext(ctx context.Context) TriggerActionNotificationPropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerActionNotificationPropertyOutput).ToTriggerActionNotificationPropertyPtrOutputWithContext(ctx)
}

// TriggerActionNotificationPropertyPtrInput is an input type that accepts TriggerActionNotificationPropertyArgs, TriggerActionNotificationPropertyPtr and TriggerActionNotificationPropertyPtrOutput values.
// You can construct a concrete instance of `TriggerActionNotificationPropertyPtrInput` via:
//
//          TriggerActionNotificationPropertyArgs{...}
//
//  or:
//
//          nil
type TriggerActionNotificationPropertyPtrInput interface {
	pulumi.Input

	ToTriggerActionNotificationPropertyPtrOutput() TriggerActionNotificationPropertyPtrOutput
	ToTriggerActionNotificationPropertyPtrOutputWithContext(context.Context) TriggerActionNotificationPropertyPtrOutput
}

type triggerActionNotificationPropertyPtrType TriggerActionNotificationPropertyArgs

func TriggerActionNotificationPropertyPtr(v *TriggerActionNotificationPropertyArgs) TriggerActionNotificationPropertyPtrInput {
	return (*triggerActionNotificationPropertyPtrType)(v)
}

func (*triggerActionNotificationPropertyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerActionNotificationProperty)(nil)).Elem()
}

func (i *triggerActionNotificationPropertyPtrType) ToTriggerActionNotificationPropertyPtrOutput() TriggerActionNotificationPropertyPtrOutput {
	return i.ToTriggerActionNotificationPropertyPtrOutputWithContext(context.Background())
}

func (i *triggerActionNotificationPropertyPtrType) ToTriggerActionNotificationPropertyPtrOutputWithContext(ctx context.Context) TriggerActionNotificationPropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerActionNotificationPropertyPtrOutput)
}

type TriggerActionNotificationPropertyOutput struct{ *pulumi.OutputState }

func (TriggerActionNotificationPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerActionNotificationProperty)(nil)).Elem()
}

func (o TriggerActionNotificationPropertyOutput) ToTriggerActionNotificationPropertyOutput() TriggerActionNotificationPropertyOutput {
	return o
}

func (o TriggerActionNotificationPropertyOutput) ToTriggerActionNotificationPropertyOutputWithContext(ctx context.Context) TriggerActionNotificationPropertyOutput {
	return o
}

func (o TriggerActionNotificationPropertyOutput) ToTriggerActionNotificationPropertyPtrOutput() TriggerActionNotificationPropertyPtrOutput {
	return o.ToTriggerActionNotificationPropertyPtrOutputWithContext(context.Background())
}

func (o TriggerActionNotificationPropertyOutput) ToTriggerActionNotificationPropertyPtrOutputWithContext(ctx context.Context) TriggerActionNotificationPropertyPtrOutput {
	return o.ApplyT(func(v TriggerActionNotificationProperty) *TriggerActionNotificationProperty {
		return &v
	}).(TriggerActionNotificationPropertyPtrOutput)
}

// After a job run starts, the number of minutes to wait before sending a job run delay notification.
func (o TriggerActionNotificationPropertyOutput) NotifyDelayAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TriggerActionNotificationProperty) *int { return v.NotifyDelayAfter }).(pulumi.IntPtrOutput)
}

type TriggerActionNotificationPropertyPtrOutput struct{ *pulumi.OutputState }

func (TriggerActionNotificationPropertyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerActionNotificationProperty)(nil)).Elem()
}

func (o TriggerActionNotificationPropertyPtrOutput) ToTriggerActionNotificationPropertyPtrOutput() TriggerActionNotificationPropertyPtrOutput {
	return o
}

func (o TriggerActionNotificationPropertyPtrOutput) ToTriggerActionNotificationPropertyPtrOutputWithContext(ctx context.Context) TriggerActionNotificationPropertyPtrOutput {
	return o
}

func (o TriggerActionNotificationPropertyPtrOutput) Elem() TriggerActionNotificationPropertyOutput {
	return o.ApplyT(func(v *TriggerActionNotificationProperty) TriggerActionNotificationProperty { return *v }).(TriggerActionNotificationPropertyOutput)
}

// After a job run starts, the number of minutes to wait before sending a job run delay notification.
func (o TriggerActionNotificationPropertyPtrOutput) NotifyDelayAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TriggerActionNotificationProperty) *int {
		if v == nil {
			return nil
		}
		return v.NotifyDelayAfter
	}).(pulumi.IntPtrOutput)
}

type TriggerPredicate struct {
	// A list of the conditions that determine when the trigger will fire. Defined below.
	Conditions []TriggerPredicateCondition `pulumi:"conditions"`
	// How to handle multiple conditions. Defaults to `AND`. Valid values are `AND` or `ANY`.
	Logical *string `pulumi:"logical"`
}

// TriggerPredicateInput is an input type that accepts TriggerPredicateArgs and TriggerPredicateOutput values.
// You can construct a concrete instance of `TriggerPredicateInput` via:
//
//          TriggerPredicateArgs{...}
type TriggerPredicateInput interface {
	pulumi.Input

	ToTriggerPredicateOutput() TriggerPredicateOutput
	ToTriggerPredicateOutputWithContext(context.Context) TriggerPredicateOutput
}

type TriggerPredicateArgs struct {
	// A list of the conditions that determine when the trigger will fire. Defined below.
	Conditions TriggerPredicateConditionArrayInput `pulumi:"conditions"`
	// How to handle multiple conditions. Defaults to `AND`. Valid values are `AND` or `ANY`.
	Logical pulumi.StringPtrInput `pulumi:"logical"`
}

func (TriggerPredicateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerPredicate)(nil)).Elem()
}

func (i TriggerPredicateArgs) ToTriggerPredicateOutput() TriggerPredicateOutput {
	return i.ToTriggerPredicateOutputWithContext(context.Background())
}

func (i TriggerPredicateArgs) ToTriggerPredicateOutputWithContext(ctx context.Context) TriggerPredicateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerPredicateOutput)
}

func (i TriggerPredicateArgs) ToTriggerPredicatePtrOutput() TriggerPredicatePtrOutput {
	return i.ToTriggerPredicatePtrOutputWithContext(context.Background())
}

func (i TriggerPredicateArgs) ToTriggerPredicatePtrOutputWithContext(ctx context.Context) TriggerPredicatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerPredicateOutput).ToTriggerPredicatePtrOutputWithContext(ctx)
}

// TriggerPredicatePtrInput is an input type that accepts TriggerPredicateArgs, TriggerPredicatePtr and TriggerPredicatePtrOutput values.
// You can construct a concrete instance of `TriggerPredicatePtrInput` via:
//
//          TriggerPredicateArgs{...}
//
//  or:
//
//          nil
type TriggerPredicatePtrInput interface {
	pulumi.Input

	ToTriggerPredicatePtrOutput() TriggerPredicatePtrOutput
	ToTriggerPredicatePtrOutputWithContext(context.Context) TriggerPredicatePtrOutput
}

type triggerPredicatePtrType TriggerPredicateArgs

func TriggerPredicatePtr(v *TriggerPredicateArgs) TriggerPredicatePtrInput {
	return (*triggerPredicatePtrType)(v)
}

func (*triggerPredicatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerPredicate)(nil)).Elem()
}

func (i *triggerPredicatePtrType) ToTriggerPredicatePtrOutput() TriggerPredicatePtrOutput {
	return i.ToTriggerPredicatePtrOutputWithContext(context.Background())
}

func (i *triggerPredicatePtrType) ToTriggerPredicatePtrOutputWithContext(ctx context.Context) TriggerPredicatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerPredicatePtrOutput)
}

type TriggerPredicateOutput struct{ *pulumi.OutputState }

func (TriggerPredicateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerPredicate)(nil)).Elem()
}

func (o TriggerPredicateOutput) ToTriggerPredicateOutput() TriggerPredicateOutput {
	return o
}

func (o TriggerPredicateOutput) ToTriggerPredicateOutputWithContext(ctx context.Context) TriggerPredicateOutput {
	return o
}

func (o TriggerPredicateOutput) ToTriggerPredicatePtrOutput() TriggerPredicatePtrOutput {
	return o.ToTriggerPredicatePtrOutputWithContext(context.Background())
}

func (o TriggerPredicateOutput) ToTriggerPredicatePtrOutputWithContext(ctx context.Context) TriggerPredicatePtrOutput {
	return o.ApplyT(func(v TriggerPredicate) *TriggerPredicate {
		return &v
	}).(TriggerPredicatePtrOutput)
}

// A list of the conditions that determine when the trigger will fire. Defined below.
func (o TriggerPredicateOutput) Conditions() TriggerPredicateConditionArrayOutput {
	return o.ApplyT(func(v TriggerPredicate) []TriggerPredicateCondition { return v.Conditions }).(TriggerPredicateConditionArrayOutput)
}

// How to handle multiple conditions. Defaults to `AND`. Valid values are `AND` or `ANY`.
func (o TriggerPredicateOutput) Logical() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerPredicate) *string { return v.Logical }).(pulumi.StringPtrOutput)
}

type TriggerPredicatePtrOutput struct{ *pulumi.OutputState }

func (TriggerPredicatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerPredicate)(nil)).Elem()
}

func (o TriggerPredicatePtrOutput) ToTriggerPredicatePtrOutput() TriggerPredicatePtrOutput {
	return o
}

func (o TriggerPredicatePtrOutput) ToTriggerPredicatePtrOutputWithContext(ctx context.Context) TriggerPredicatePtrOutput {
	return o
}

func (o TriggerPredicatePtrOutput) Elem() TriggerPredicateOutput {
	return o.ApplyT(func(v *TriggerPredicate) TriggerPredicate { return *v }).(TriggerPredicateOutput)
}

// A list of the conditions that determine when the trigger will fire. Defined below.
func (o TriggerPredicatePtrOutput) Conditions() TriggerPredicateConditionArrayOutput {
	return o.ApplyT(func(v *TriggerPredicate) []TriggerPredicateCondition {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(TriggerPredicateConditionArrayOutput)
}

// How to handle multiple conditions. Defaults to `AND`. Valid values are `AND` or `ANY`.
func (o TriggerPredicatePtrOutput) Logical() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerPredicate) *string {
		if v == nil {
			return nil
		}
		return v.Logical
	}).(pulumi.StringPtrOutput)
}

type TriggerPredicateCondition struct {
	// The condition crawl state. Currently, the values supported are `RUNNING`, `SUCCEEDED`, `CANCELLED`, and `FAILED`. If this is specified, `crawlerName` must also be specified. Conflicts with `state`.
	CrawlState *string `pulumi:"crawlState"`
	// The name of the crawler to watch. If this is specified, `crawlState` must also be specified. Conflicts with `jobName`.
	CrawlerName *string `pulumi:"crawlerName"`
	// The name of the job to watch. If this is specified, `state` must also be specified. Conflicts with `crawlerName`.
	JobName *string `pulumi:"jobName"`
	// A logical operator. Defaults to `EQUALS`.
	LogicalOperator *string `pulumi:"logicalOperator"`
	// The condition job state. Currently, the values supported are `SUCCEEDED`, `STOPPED`, `TIMEOUT` and `FAILED`. If this is specified, `jobName` must also be specified. Conflicts with `crawlerState`.
	State *string `pulumi:"state"`
}

// TriggerPredicateConditionInput is an input type that accepts TriggerPredicateConditionArgs and TriggerPredicateConditionOutput values.
// You can construct a concrete instance of `TriggerPredicateConditionInput` via:
//
//          TriggerPredicateConditionArgs{...}
type TriggerPredicateConditionInput interface {
	pulumi.Input

	ToTriggerPredicateConditionOutput() TriggerPredicateConditionOutput
	ToTriggerPredicateConditionOutputWithContext(context.Context) TriggerPredicateConditionOutput
}

type TriggerPredicateConditionArgs struct {
	// The condition crawl state. Currently, the values supported are `RUNNING`, `SUCCEEDED`, `CANCELLED`, and `FAILED`. If this is specified, `crawlerName` must also be specified. Conflicts with `state`.
	CrawlState pulumi.StringPtrInput `pulumi:"crawlState"`
	// The name of the crawler to watch. If this is specified, `crawlState` must also be specified. Conflicts with `jobName`.
	CrawlerName pulumi.StringPtrInput `pulumi:"crawlerName"`
	// The name of the job to watch. If this is specified, `state` must also be specified. Conflicts with `crawlerName`.
	JobName pulumi.StringPtrInput `pulumi:"jobName"`
	// A logical operator. Defaults to `EQUALS`.
	LogicalOperator pulumi.StringPtrInput `pulumi:"logicalOperator"`
	// The condition job state. Currently, the values supported are `SUCCEEDED`, `STOPPED`, `TIMEOUT` and `FAILED`. If this is specified, `jobName` must also be specified. Conflicts with `crawlerState`.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (TriggerPredicateConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerPredicateCondition)(nil)).Elem()
}

func (i TriggerPredicateConditionArgs) ToTriggerPredicateConditionOutput() TriggerPredicateConditionOutput {
	return i.ToTriggerPredicateConditionOutputWithContext(context.Background())
}

func (i TriggerPredicateConditionArgs) ToTriggerPredicateConditionOutputWithContext(ctx context.Context) TriggerPredicateConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerPredicateConditionOutput)
}

// TriggerPredicateConditionArrayInput is an input type that accepts TriggerPredicateConditionArray and TriggerPredicateConditionArrayOutput values.
// You can construct a concrete instance of `TriggerPredicateConditionArrayInput` via:
//
//          TriggerPredicateConditionArray{ TriggerPredicateConditionArgs{...} }
type TriggerPredicateConditionArrayInput interface {
	pulumi.Input

	ToTriggerPredicateConditionArrayOutput() TriggerPredicateConditionArrayOutput
	ToTriggerPredicateConditionArrayOutputWithContext(context.Context) TriggerPredicateConditionArrayOutput
}

type TriggerPredicateConditionArray []TriggerPredicateConditionInput

func (TriggerPredicateConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerPredicateCondition)(nil)).Elem()
}

func (i TriggerPredicateConditionArray) ToTriggerPredicateConditionArrayOutput() TriggerPredicateConditionArrayOutput {
	return i.ToTriggerPredicateConditionArrayOutputWithContext(context.Background())
}

func (i TriggerPredicateConditionArray) ToTriggerPredicateConditionArrayOutputWithContext(ctx context.Context) TriggerPredicateConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerPredicateConditionArrayOutput)
}

type TriggerPredicateConditionOutput struct{ *pulumi.OutputState }

func (TriggerPredicateConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerPredicateCondition)(nil)).Elem()
}

func (o TriggerPredicateConditionOutput) ToTriggerPredicateConditionOutput() TriggerPredicateConditionOutput {
	return o
}

func (o TriggerPredicateConditionOutput) ToTriggerPredicateConditionOutputWithContext(ctx context.Context) TriggerPredicateConditionOutput {
	return o
}

// The condition crawl state. Currently, the values supported are `RUNNING`, `SUCCEEDED`, `CANCELLED`, and `FAILED`. If this is specified, `crawlerName` must also be specified. Conflicts with `state`.
func (o TriggerPredicateConditionOutput) CrawlState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerPredicateCondition) *string { return v.CrawlState }).(pulumi.StringPtrOutput)
}

// The name of the crawler to watch. If this is specified, `crawlState` must also be specified. Conflicts with `jobName`.
func (o TriggerPredicateConditionOutput) CrawlerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerPredicateCondition) *string { return v.CrawlerName }).(pulumi.StringPtrOutput)
}

// The name of the job to watch. If this is specified, `state` must also be specified. Conflicts with `crawlerName`.
func (o TriggerPredicateConditionOutput) JobName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerPredicateCondition) *string { return v.JobName }).(pulumi.StringPtrOutput)
}

// A logical operator. Defaults to `EQUALS`.
func (o TriggerPredicateConditionOutput) LogicalOperator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerPredicateCondition) *string { return v.LogicalOperator }).(pulumi.StringPtrOutput)
}

// The condition job state. Currently, the values supported are `SUCCEEDED`, `STOPPED`, `TIMEOUT` and `FAILED`. If this is specified, `jobName` must also be specified. Conflicts with `crawlerState`.
func (o TriggerPredicateConditionOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerPredicateCondition) *string { return v.State }).(pulumi.StringPtrOutput)
}

type TriggerPredicateConditionArrayOutput struct{ *pulumi.OutputState }

func (TriggerPredicateConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerPredicateCondition)(nil)).Elem()
}

func (o TriggerPredicateConditionArrayOutput) ToTriggerPredicateConditionArrayOutput() TriggerPredicateConditionArrayOutput {
	return o
}

func (o TriggerPredicateConditionArrayOutput) ToTriggerPredicateConditionArrayOutputWithContext(ctx context.Context) TriggerPredicateConditionArrayOutput {
	return o
}

func (o TriggerPredicateConditionArrayOutput) Index(i pulumi.IntInput) TriggerPredicateConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TriggerPredicateCondition {
		return vs[0].([]TriggerPredicateCondition)[vs[1].(int)]
	}).(TriggerPredicateConditionOutput)
}

type UserDefinedFunctionResourceUri struct {
	// The type of the resource. can be one of `JAR`, `FILE`, and `ARCHIVE`.
	ResourceType string `pulumi:"resourceType"`
	// The URI for accessing the resource.
	Uri string `pulumi:"uri"`
}

// UserDefinedFunctionResourceUriInput is an input type that accepts UserDefinedFunctionResourceUriArgs and UserDefinedFunctionResourceUriOutput values.
// You can construct a concrete instance of `UserDefinedFunctionResourceUriInput` via:
//
//          UserDefinedFunctionResourceUriArgs{...}
type UserDefinedFunctionResourceUriInput interface {
	pulumi.Input

	ToUserDefinedFunctionResourceUriOutput() UserDefinedFunctionResourceUriOutput
	ToUserDefinedFunctionResourceUriOutputWithContext(context.Context) UserDefinedFunctionResourceUriOutput
}

type UserDefinedFunctionResourceUriArgs struct {
	// The type of the resource. can be one of `JAR`, `FILE`, and `ARCHIVE`.
	ResourceType pulumi.StringInput `pulumi:"resourceType"`
	// The URI for accessing the resource.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (UserDefinedFunctionResourceUriArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserDefinedFunctionResourceUri)(nil)).Elem()
}

func (i UserDefinedFunctionResourceUriArgs) ToUserDefinedFunctionResourceUriOutput() UserDefinedFunctionResourceUriOutput {
	return i.ToUserDefinedFunctionResourceUriOutputWithContext(context.Background())
}

func (i UserDefinedFunctionResourceUriArgs) ToUserDefinedFunctionResourceUriOutputWithContext(ctx context.Context) UserDefinedFunctionResourceUriOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDefinedFunctionResourceUriOutput)
}

// UserDefinedFunctionResourceUriArrayInput is an input type that accepts UserDefinedFunctionResourceUriArray and UserDefinedFunctionResourceUriArrayOutput values.
// You can construct a concrete instance of `UserDefinedFunctionResourceUriArrayInput` via:
//
//          UserDefinedFunctionResourceUriArray{ UserDefinedFunctionResourceUriArgs{...} }
type UserDefinedFunctionResourceUriArrayInput interface {
	pulumi.Input

	ToUserDefinedFunctionResourceUriArrayOutput() UserDefinedFunctionResourceUriArrayOutput
	ToUserDefinedFunctionResourceUriArrayOutputWithContext(context.Context) UserDefinedFunctionResourceUriArrayOutput
}

type UserDefinedFunctionResourceUriArray []UserDefinedFunctionResourceUriInput

func (UserDefinedFunctionResourceUriArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserDefinedFunctionResourceUri)(nil)).Elem()
}

func (i UserDefinedFunctionResourceUriArray) ToUserDefinedFunctionResourceUriArrayOutput() UserDefinedFunctionResourceUriArrayOutput {
	return i.ToUserDefinedFunctionResourceUriArrayOutputWithContext(context.Background())
}

func (i UserDefinedFunctionResourceUriArray) ToUserDefinedFunctionResourceUriArrayOutputWithContext(ctx context.Context) UserDefinedFunctionResourceUriArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDefinedFunctionResourceUriArrayOutput)
}

type UserDefinedFunctionResourceUriOutput struct{ *pulumi.OutputState }

func (UserDefinedFunctionResourceUriOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserDefinedFunctionResourceUri)(nil)).Elem()
}

func (o UserDefinedFunctionResourceUriOutput) ToUserDefinedFunctionResourceUriOutput() UserDefinedFunctionResourceUriOutput {
	return o
}

func (o UserDefinedFunctionResourceUriOutput) ToUserDefinedFunctionResourceUriOutputWithContext(ctx context.Context) UserDefinedFunctionResourceUriOutput {
	return o
}

// The type of the resource. can be one of `JAR`, `FILE`, and `ARCHIVE`.
func (o UserDefinedFunctionResourceUriOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v UserDefinedFunctionResourceUri) string { return v.ResourceType }).(pulumi.StringOutput)
}

// The URI for accessing the resource.
func (o UserDefinedFunctionResourceUriOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v UserDefinedFunctionResourceUri) string { return v.Uri }).(pulumi.StringOutput)
}

type UserDefinedFunctionResourceUriArrayOutput struct{ *pulumi.OutputState }

func (UserDefinedFunctionResourceUriArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserDefinedFunctionResourceUri)(nil)).Elem()
}

func (o UserDefinedFunctionResourceUriArrayOutput) ToUserDefinedFunctionResourceUriArrayOutput() UserDefinedFunctionResourceUriArrayOutput {
	return o
}

func (o UserDefinedFunctionResourceUriArrayOutput) ToUserDefinedFunctionResourceUriArrayOutputWithContext(ctx context.Context) UserDefinedFunctionResourceUriArrayOutput {
	return o
}

func (o UserDefinedFunctionResourceUriArrayOutput) Index(i pulumi.IntInput) UserDefinedFunctionResourceUriOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserDefinedFunctionResourceUri {
		return vs[0].([]UserDefinedFunctionResourceUri)[vs[1].(int)]
	}).(UserDefinedFunctionResourceUriOutput)
}

type GetScriptDagEdge struct {
	// The ID of the node at which the edge starts.
	Source string `pulumi:"source"`
	// The ID of the node at which the edge ends.
	Target string `pulumi:"target"`
	// The target of the edge.
	TargetParameter *string `pulumi:"targetParameter"`
}

// GetScriptDagEdgeInput is an input type that accepts GetScriptDagEdgeArgs and GetScriptDagEdgeOutput values.
// You can construct a concrete instance of `GetScriptDagEdgeInput` via:
//
//          GetScriptDagEdgeArgs{...}
type GetScriptDagEdgeInput interface {
	pulumi.Input

	ToGetScriptDagEdgeOutput() GetScriptDagEdgeOutput
	ToGetScriptDagEdgeOutputWithContext(context.Context) GetScriptDagEdgeOutput
}

type GetScriptDagEdgeArgs struct {
	// The ID of the node at which the edge starts.
	Source pulumi.StringInput `pulumi:"source"`
	// The ID of the node at which the edge ends.
	Target pulumi.StringInput `pulumi:"target"`
	// The target of the edge.
	TargetParameter pulumi.StringPtrInput `pulumi:"targetParameter"`
}

func (GetScriptDagEdgeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScriptDagEdge)(nil)).Elem()
}

func (i GetScriptDagEdgeArgs) ToGetScriptDagEdgeOutput() GetScriptDagEdgeOutput {
	return i.ToGetScriptDagEdgeOutputWithContext(context.Background())
}

func (i GetScriptDagEdgeArgs) ToGetScriptDagEdgeOutputWithContext(ctx context.Context) GetScriptDagEdgeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetScriptDagEdgeOutput)
}

// GetScriptDagEdgeArrayInput is an input type that accepts GetScriptDagEdgeArray and GetScriptDagEdgeArrayOutput values.
// You can construct a concrete instance of `GetScriptDagEdgeArrayInput` via:
//
//          GetScriptDagEdgeArray{ GetScriptDagEdgeArgs{...} }
type GetScriptDagEdgeArrayInput interface {
	pulumi.Input

	ToGetScriptDagEdgeArrayOutput() GetScriptDagEdgeArrayOutput
	ToGetScriptDagEdgeArrayOutputWithContext(context.Context) GetScriptDagEdgeArrayOutput
}

type GetScriptDagEdgeArray []GetScriptDagEdgeInput

func (GetScriptDagEdgeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetScriptDagEdge)(nil)).Elem()
}

func (i GetScriptDagEdgeArray) ToGetScriptDagEdgeArrayOutput() GetScriptDagEdgeArrayOutput {
	return i.ToGetScriptDagEdgeArrayOutputWithContext(context.Background())
}

func (i GetScriptDagEdgeArray) ToGetScriptDagEdgeArrayOutputWithContext(ctx context.Context) GetScriptDagEdgeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetScriptDagEdgeArrayOutput)
}

type GetScriptDagEdgeOutput struct{ *pulumi.OutputState }

func (GetScriptDagEdgeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScriptDagEdge)(nil)).Elem()
}

func (o GetScriptDagEdgeOutput) ToGetScriptDagEdgeOutput() GetScriptDagEdgeOutput {
	return o
}

func (o GetScriptDagEdgeOutput) ToGetScriptDagEdgeOutputWithContext(ctx context.Context) GetScriptDagEdgeOutput {
	return o
}

// The ID of the node at which the edge starts.
func (o GetScriptDagEdgeOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v GetScriptDagEdge) string { return v.Source }).(pulumi.StringOutput)
}

// The ID of the node at which the edge ends.
func (o GetScriptDagEdgeOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v GetScriptDagEdge) string { return v.Target }).(pulumi.StringOutput)
}

// The target of the edge.
func (o GetScriptDagEdgeOutput) TargetParameter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetScriptDagEdge) *string { return v.TargetParameter }).(pulumi.StringPtrOutput)
}

type GetScriptDagEdgeArrayOutput struct{ *pulumi.OutputState }

func (GetScriptDagEdgeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetScriptDagEdge)(nil)).Elem()
}

func (o GetScriptDagEdgeArrayOutput) ToGetScriptDagEdgeArrayOutput() GetScriptDagEdgeArrayOutput {
	return o
}

func (o GetScriptDagEdgeArrayOutput) ToGetScriptDagEdgeArrayOutputWithContext(ctx context.Context) GetScriptDagEdgeArrayOutput {
	return o
}

func (o GetScriptDagEdgeArrayOutput) Index(i pulumi.IntInput) GetScriptDagEdgeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetScriptDagEdge {
		return vs[0].([]GetScriptDagEdge)[vs[1].(int)]
	}).(GetScriptDagEdgeOutput)
}

type GetScriptDagNode struct {
	// Nested configuration an argument or property of a node. Defined below.
	Args []GetScriptDagNodeArg `pulumi:"args"`
	// A node identifier that is unique within the node's graph.
	Id string `pulumi:"id"`
	// The line number of the node.
	LineNumber *int `pulumi:"lineNumber"`
	// The type of node this is.
	NodeType string `pulumi:"nodeType"`
}

// GetScriptDagNodeInput is an input type that accepts GetScriptDagNodeArgs and GetScriptDagNodeOutput values.
// You can construct a concrete instance of `GetScriptDagNodeInput` via:
//
//          GetScriptDagNodeArgs{...}
type GetScriptDagNodeInput interface {
	pulumi.Input

	ToGetScriptDagNodeOutput() GetScriptDagNodeOutput
	ToGetScriptDagNodeOutputWithContext(context.Context) GetScriptDagNodeOutput
}

type GetScriptDagNodeArgs struct {
	// Nested configuration an argument or property of a node. Defined below.
	Args GetScriptDagNodeArgArrayInput `pulumi:"args"`
	// A node identifier that is unique within the node's graph.
	Id pulumi.StringInput `pulumi:"id"`
	// The line number of the node.
	LineNumber pulumi.IntPtrInput `pulumi:"lineNumber"`
	// The type of node this is.
	NodeType pulumi.StringInput `pulumi:"nodeType"`
}

func (GetScriptDagNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScriptDagNode)(nil)).Elem()
}

func (i GetScriptDagNodeArgs) ToGetScriptDagNodeOutput() GetScriptDagNodeOutput {
	return i.ToGetScriptDagNodeOutputWithContext(context.Background())
}

func (i GetScriptDagNodeArgs) ToGetScriptDagNodeOutputWithContext(ctx context.Context) GetScriptDagNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetScriptDagNodeOutput)
}

// GetScriptDagNodeArrayInput is an input type that accepts GetScriptDagNodeArray and GetScriptDagNodeArrayOutput values.
// You can construct a concrete instance of `GetScriptDagNodeArrayInput` via:
//
//          GetScriptDagNodeArray{ GetScriptDagNodeArgs{...} }
type GetScriptDagNodeArrayInput interface {
	pulumi.Input

	ToGetScriptDagNodeArrayOutput() GetScriptDagNodeArrayOutput
	ToGetScriptDagNodeArrayOutputWithContext(context.Context) GetScriptDagNodeArrayOutput
}

type GetScriptDagNodeArray []GetScriptDagNodeInput

func (GetScriptDagNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetScriptDagNode)(nil)).Elem()
}

func (i GetScriptDagNodeArray) ToGetScriptDagNodeArrayOutput() GetScriptDagNodeArrayOutput {
	return i.ToGetScriptDagNodeArrayOutputWithContext(context.Background())
}

func (i GetScriptDagNodeArray) ToGetScriptDagNodeArrayOutputWithContext(ctx context.Context) GetScriptDagNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetScriptDagNodeArrayOutput)
}

type GetScriptDagNodeOutput struct{ *pulumi.OutputState }

func (GetScriptDagNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScriptDagNode)(nil)).Elem()
}

func (o GetScriptDagNodeOutput) ToGetScriptDagNodeOutput() GetScriptDagNodeOutput {
	return o
}

func (o GetScriptDagNodeOutput) ToGetScriptDagNodeOutputWithContext(ctx context.Context) GetScriptDagNodeOutput {
	return o
}

// Nested configuration an argument or property of a node. Defined below.
func (o GetScriptDagNodeOutput) Args() GetScriptDagNodeArgArrayOutput {
	return o.ApplyT(func(v GetScriptDagNode) []GetScriptDagNodeArg { return v.Args }).(GetScriptDagNodeArgArrayOutput)
}

// A node identifier that is unique within the node's graph.
func (o GetScriptDagNodeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetScriptDagNode) string { return v.Id }).(pulumi.StringOutput)
}

// The line number of the node.
func (o GetScriptDagNodeOutput) LineNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetScriptDagNode) *int { return v.LineNumber }).(pulumi.IntPtrOutput)
}

// The type of node this is.
func (o GetScriptDagNodeOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetScriptDagNode) string { return v.NodeType }).(pulumi.StringOutput)
}

type GetScriptDagNodeArrayOutput struct{ *pulumi.OutputState }

func (GetScriptDagNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetScriptDagNode)(nil)).Elem()
}

func (o GetScriptDagNodeArrayOutput) ToGetScriptDagNodeArrayOutput() GetScriptDagNodeArrayOutput {
	return o
}

func (o GetScriptDagNodeArrayOutput) ToGetScriptDagNodeArrayOutputWithContext(ctx context.Context) GetScriptDagNodeArrayOutput {
	return o
}

func (o GetScriptDagNodeArrayOutput) Index(i pulumi.IntInput) GetScriptDagNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetScriptDagNode {
		return vs[0].([]GetScriptDagNode)[vs[1].(int)]
	}).(GetScriptDagNodeOutput)
}

type GetScriptDagNodeArg struct {
	// The name of the argument or property.
	Name string `pulumi:"name"`
	// Boolean if the value is used as a parameter. Defaults to `false`.
	Param *bool `pulumi:"param"`
	// The value of the argument or property.
	Value string `pulumi:"value"`
}

// GetScriptDagNodeArgInput is an input type that accepts GetScriptDagNodeArgArgs and GetScriptDagNodeArgOutput values.
// You can construct a concrete instance of `GetScriptDagNodeArgInput` via:
//
//          GetScriptDagNodeArgArgs{...}
type GetScriptDagNodeArgInput interface {
	pulumi.Input

	ToGetScriptDagNodeArgOutput() GetScriptDagNodeArgOutput
	ToGetScriptDagNodeArgOutputWithContext(context.Context) GetScriptDagNodeArgOutput
}

type GetScriptDagNodeArgArgs struct {
	// The name of the argument or property.
	Name pulumi.StringInput `pulumi:"name"`
	// Boolean if the value is used as a parameter. Defaults to `false`.
	Param pulumi.BoolPtrInput `pulumi:"param"`
	// The value of the argument or property.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetScriptDagNodeArgArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScriptDagNodeArg)(nil)).Elem()
}

func (i GetScriptDagNodeArgArgs) ToGetScriptDagNodeArgOutput() GetScriptDagNodeArgOutput {
	return i.ToGetScriptDagNodeArgOutputWithContext(context.Background())
}

func (i GetScriptDagNodeArgArgs) ToGetScriptDagNodeArgOutputWithContext(ctx context.Context) GetScriptDagNodeArgOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetScriptDagNodeArgOutput)
}

// GetScriptDagNodeArgArrayInput is an input type that accepts GetScriptDagNodeArgArray and GetScriptDagNodeArgArrayOutput values.
// You can construct a concrete instance of `GetScriptDagNodeArgArrayInput` via:
//
//          GetScriptDagNodeArgArray{ GetScriptDagNodeArgArgs{...} }
type GetScriptDagNodeArgArrayInput interface {
	pulumi.Input

	ToGetScriptDagNodeArgArrayOutput() GetScriptDagNodeArgArrayOutput
	ToGetScriptDagNodeArgArrayOutputWithContext(context.Context) GetScriptDagNodeArgArrayOutput
}

type GetScriptDagNodeArgArray []GetScriptDagNodeArgInput

func (GetScriptDagNodeArgArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetScriptDagNodeArg)(nil)).Elem()
}

func (i GetScriptDagNodeArgArray) ToGetScriptDagNodeArgArrayOutput() GetScriptDagNodeArgArrayOutput {
	return i.ToGetScriptDagNodeArgArrayOutputWithContext(context.Background())
}

func (i GetScriptDagNodeArgArray) ToGetScriptDagNodeArgArrayOutputWithContext(ctx context.Context) GetScriptDagNodeArgArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetScriptDagNodeArgArrayOutput)
}

type GetScriptDagNodeArgOutput struct{ *pulumi.OutputState }

func (GetScriptDagNodeArgOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScriptDagNodeArg)(nil)).Elem()
}

func (o GetScriptDagNodeArgOutput) ToGetScriptDagNodeArgOutput() GetScriptDagNodeArgOutput {
	return o
}

func (o GetScriptDagNodeArgOutput) ToGetScriptDagNodeArgOutputWithContext(ctx context.Context) GetScriptDagNodeArgOutput {
	return o
}

// The name of the argument or property.
func (o GetScriptDagNodeArgOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetScriptDagNodeArg) string { return v.Name }).(pulumi.StringOutput)
}

// Boolean if the value is used as a parameter. Defaults to `false`.
func (o GetScriptDagNodeArgOutput) Param() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetScriptDagNodeArg) *bool { return v.Param }).(pulumi.BoolPtrOutput)
}

// The value of the argument or property.
func (o GetScriptDagNodeArgOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetScriptDagNodeArg) string { return v.Value }).(pulumi.StringOutput)
}

type GetScriptDagNodeArgArrayOutput struct{ *pulumi.OutputState }

func (GetScriptDagNodeArgArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetScriptDagNodeArg)(nil)).Elem()
}

func (o GetScriptDagNodeArgArrayOutput) ToGetScriptDagNodeArgArrayOutput() GetScriptDagNodeArgArrayOutput {
	return o
}

func (o GetScriptDagNodeArgArrayOutput) ToGetScriptDagNodeArgArrayOutputWithContext(ctx context.Context) GetScriptDagNodeArgArrayOutput {
	return o
}

func (o GetScriptDagNodeArgArrayOutput) Index(i pulumi.IntInput) GetScriptDagNodeArgOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetScriptDagNodeArg {
		return vs[0].([]GetScriptDagNodeArg)[vs[1].(int)]
	}).(GetScriptDagNodeArgOutput)
}

func init() {
	pulumi.RegisterOutputType(CatalogTablePartitionIndexOutput{})
	pulumi.RegisterOutputType(CatalogTablePartitionIndexArrayOutput{})
	pulumi.RegisterOutputType(CatalogTablePartitionKeyOutput{})
	pulumi.RegisterOutputType(CatalogTablePartitionKeyArrayOutput{})
	pulumi.RegisterOutputType(CatalogTableStorageDescriptorOutput{})
	pulumi.RegisterOutputType(CatalogTableStorageDescriptorPtrOutput{})
	pulumi.RegisterOutputType(CatalogTableStorageDescriptorColumnOutput{})
	pulumi.RegisterOutputType(CatalogTableStorageDescriptorColumnArrayOutput{})
	pulumi.RegisterOutputType(CatalogTableStorageDescriptorSerDeInfoOutput{})
	pulumi.RegisterOutputType(CatalogTableStorageDescriptorSerDeInfoPtrOutput{})
	pulumi.RegisterOutputType(CatalogTableStorageDescriptorSkewedInfoOutput{})
	pulumi.RegisterOutputType(CatalogTableStorageDescriptorSkewedInfoPtrOutput{})
	pulumi.RegisterOutputType(CatalogTableStorageDescriptorSortColumnOutput{})
	pulumi.RegisterOutputType(CatalogTableStorageDescriptorSortColumnArrayOutput{})
	pulumi.RegisterOutputType(ClassifierCsvClassifierOutput{})
	pulumi.RegisterOutputType(ClassifierCsvClassifierPtrOutput{})
	pulumi.RegisterOutputType(ClassifierGrokClassifierOutput{})
	pulumi.RegisterOutputType(ClassifierGrokClassifierPtrOutput{})
	pulumi.RegisterOutputType(ClassifierJsonClassifierOutput{})
	pulumi.RegisterOutputType(ClassifierJsonClassifierPtrOutput{})
	pulumi.RegisterOutputType(ClassifierXmlClassifierOutput{})
	pulumi.RegisterOutputType(ClassifierXmlClassifierPtrOutput{})
	pulumi.RegisterOutputType(ConnectionPhysicalConnectionRequirementsOutput{})
	pulumi.RegisterOutputType(ConnectionPhysicalConnectionRequirementsPtrOutput{})
	pulumi.RegisterOutputType(CrawlerCatalogTargetOutput{})
	pulumi.RegisterOutputType(CrawlerCatalogTargetArrayOutput{})
	pulumi.RegisterOutputType(CrawlerDynamodbTargetOutput{})
	pulumi.RegisterOutputType(CrawlerDynamodbTargetArrayOutput{})
	pulumi.RegisterOutputType(CrawlerJdbcTargetOutput{})
	pulumi.RegisterOutputType(CrawlerJdbcTargetArrayOutput{})
	pulumi.RegisterOutputType(CrawlerMongodbTargetOutput{})
	pulumi.RegisterOutputType(CrawlerMongodbTargetArrayOutput{})
	pulumi.RegisterOutputType(CrawlerS3TargetOutput{})
	pulumi.RegisterOutputType(CrawlerS3TargetArrayOutput{})
	pulumi.RegisterOutputType(CrawlerSchemaChangePolicyOutput{})
	pulumi.RegisterOutputType(CrawlerSchemaChangePolicyPtrOutput{})
	pulumi.RegisterOutputType(DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput{})
	pulumi.RegisterOutputType(DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPtrOutput{})
	pulumi.RegisterOutputType(DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput{})
	pulumi.RegisterOutputType(DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput{})
	pulumi.RegisterOutputType(DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput{})
	pulumi.RegisterOutputType(DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestPtrOutput{})
	pulumi.RegisterOutputType(JobCommandOutput{})
	pulumi.RegisterOutputType(JobCommandPtrOutput{})
	pulumi.RegisterOutputType(JobExecutionPropertyOutput{})
	pulumi.RegisterOutputType(JobExecutionPropertyPtrOutput{})
	pulumi.RegisterOutputType(JobNotificationPropertyOutput{})
	pulumi.RegisterOutputType(JobNotificationPropertyPtrOutput{})
	pulumi.RegisterOutputType(MLTransformInputRecordTableOutput{})
	pulumi.RegisterOutputType(MLTransformInputRecordTableArrayOutput{})
	pulumi.RegisterOutputType(MLTransformParametersOutput{})
	pulumi.RegisterOutputType(MLTransformParametersPtrOutput{})
	pulumi.RegisterOutputType(MLTransformParametersFindMatchesParametersOutput{})
	pulumi.RegisterOutputType(MLTransformParametersFindMatchesParametersPtrOutput{})
	pulumi.RegisterOutputType(MLTransformSchemaOutput{})
	pulumi.RegisterOutputType(MLTransformSchemaArrayOutput{})
	pulumi.RegisterOutputType(PartitionStorageDescriptorOutput{})
	pulumi.RegisterOutputType(PartitionStorageDescriptorPtrOutput{})
	pulumi.RegisterOutputType(PartitionStorageDescriptorColumnOutput{})
	pulumi.RegisterOutputType(PartitionStorageDescriptorColumnArrayOutput{})
	pulumi.RegisterOutputType(PartitionStorageDescriptorSerDeInfoOutput{})
	pulumi.RegisterOutputType(PartitionStorageDescriptorSerDeInfoPtrOutput{})
	pulumi.RegisterOutputType(PartitionStorageDescriptorSkewedInfoOutput{})
	pulumi.RegisterOutputType(PartitionStorageDescriptorSkewedInfoPtrOutput{})
	pulumi.RegisterOutputType(PartitionStorageDescriptorSortColumnOutput{})
	pulumi.RegisterOutputType(PartitionStorageDescriptorSortColumnArrayOutput{})
	pulumi.RegisterOutputType(SecurityConfigurationEncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(SecurityConfigurationEncryptionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput{})
	pulumi.RegisterOutputType(SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionPtrOutput{})
	pulumi.RegisterOutputType(SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput{})
	pulumi.RegisterOutputType(SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionPtrOutput{})
	pulumi.RegisterOutputType(SecurityConfigurationEncryptionConfigurationS3EncryptionOutput{})
	pulumi.RegisterOutputType(SecurityConfigurationEncryptionConfigurationS3EncryptionPtrOutput{})
	pulumi.RegisterOutputType(TriggerActionOutput{})
	pulumi.RegisterOutputType(TriggerActionArrayOutput{})
	pulumi.RegisterOutputType(TriggerActionNotificationPropertyOutput{})
	pulumi.RegisterOutputType(TriggerActionNotificationPropertyPtrOutput{})
	pulumi.RegisterOutputType(TriggerPredicateOutput{})
	pulumi.RegisterOutputType(TriggerPredicatePtrOutput{})
	pulumi.RegisterOutputType(TriggerPredicateConditionOutput{})
	pulumi.RegisterOutputType(TriggerPredicateConditionArrayOutput{})
	pulumi.RegisterOutputType(UserDefinedFunctionResourceUriOutput{})
	pulumi.RegisterOutputType(UserDefinedFunctionResourceUriArrayOutput{})
	pulumi.RegisterOutputType(GetScriptDagEdgeOutput{})
	pulumi.RegisterOutputType(GetScriptDagEdgeArrayOutput{})
	pulumi.RegisterOutputType(GetScriptDagNodeOutput{})
	pulumi.RegisterOutputType(GetScriptDagNodeArrayOutput{})
	pulumi.RegisterOutputType(GetScriptDagNodeArgOutput{})
	pulumi.RegisterOutputType(GetScriptDagNodeArgArrayOutput{})
}
