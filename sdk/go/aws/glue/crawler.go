// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Crawler struct {
	pulumi.CustomResourceState

	Arn                        pulumi.StringOutput                        `pulumi:"arn"`
	CatalogTargets             CrawlerCatalogTargetArrayOutput            `pulumi:"catalogTargets"`
	Classifiers                pulumi.StringArrayOutput                   `pulumi:"classifiers"`
	Configuration              pulumi.StringPtrOutput                     `pulumi:"configuration"`
	DatabaseName               pulumi.StringOutput                        `pulumi:"databaseName"`
	DeltaTargets               CrawlerDeltaTargetArrayOutput              `pulumi:"deltaTargets"`
	Description                pulumi.StringPtrOutput                     `pulumi:"description"`
	DynamodbTargets            CrawlerDynamodbTargetArrayOutput           `pulumi:"dynamodbTargets"`
	JdbcTargets                CrawlerJdbcTargetArrayOutput               `pulumi:"jdbcTargets"`
	LakeFormationConfiguration CrawlerLakeFormationConfigurationPtrOutput `pulumi:"lakeFormationConfiguration"`
	LineageConfiguration       CrawlerLineageConfigurationPtrOutput       `pulumi:"lineageConfiguration"`
	MongodbTargets             CrawlerMongodbTargetArrayOutput            `pulumi:"mongodbTargets"`
	Name                       pulumi.StringOutput                        `pulumi:"name"`
	RecrawlPolicy              CrawlerRecrawlPolicyPtrOutput              `pulumi:"recrawlPolicy"`
	Role                       pulumi.StringOutput                        `pulumi:"role"`
	S3Targets                  CrawlerS3TargetArrayOutput                 `pulumi:"s3Targets"`
	Schedule                   pulumi.StringPtrOutput                     `pulumi:"schedule"`
	SchemaChangePolicy         CrawlerSchemaChangePolicyPtrOutput         `pulumi:"schemaChangePolicy"`
	SecurityConfiguration      pulumi.StringPtrOutput                     `pulumi:"securityConfiguration"`
	TablePrefix                pulumi.StringPtrOutput                     `pulumi:"tablePrefix"`
	Tags                       pulumi.StringMapOutput                     `pulumi:"tags"`
	TagsAll                    pulumi.StringMapOutput                     `pulumi:"tagsAll"`
}

// NewCrawler registers a new resource with the given unique name, arguments, and options.
func NewCrawler(ctx *pulumi.Context,
	name string, args *CrawlerArgs, opts ...pulumi.ResourceOption) (*Crawler, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource Crawler
	err := ctx.RegisterResource("aws:glue/crawler:Crawler", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCrawler gets an existing Crawler resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCrawler(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CrawlerState, opts ...pulumi.ResourceOption) (*Crawler, error) {
	var resource Crawler
	err := ctx.ReadResource("aws:glue/crawler:Crawler", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Crawler resources.
type crawlerState struct {
	Arn                        *string                            `pulumi:"arn"`
	CatalogTargets             []CrawlerCatalogTarget             `pulumi:"catalogTargets"`
	Classifiers                []string                           `pulumi:"classifiers"`
	Configuration              *string                            `pulumi:"configuration"`
	DatabaseName               *string                            `pulumi:"databaseName"`
	DeltaTargets               []CrawlerDeltaTarget               `pulumi:"deltaTargets"`
	Description                *string                            `pulumi:"description"`
	DynamodbTargets            []CrawlerDynamodbTarget            `pulumi:"dynamodbTargets"`
	JdbcTargets                []CrawlerJdbcTarget                `pulumi:"jdbcTargets"`
	LakeFormationConfiguration *CrawlerLakeFormationConfiguration `pulumi:"lakeFormationConfiguration"`
	LineageConfiguration       *CrawlerLineageConfiguration       `pulumi:"lineageConfiguration"`
	MongodbTargets             []CrawlerMongodbTarget             `pulumi:"mongodbTargets"`
	Name                       *string                            `pulumi:"name"`
	RecrawlPolicy              *CrawlerRecrawlPolicy              `pulumi:"recrawlPolicy"`
	Role                       *string                            `pulumi:"role"`
	S3Targets                  []CrawlerS3Target                  `pulumi:"s3Targets"`
	Schedule                   *string                            `pulumi:"schedule"`
	SchemaChangePolicy         *CrawlerSchemaChangePolicy         `pulumi:"schemaChangePolicy"`
	SecurityConfiguration      *string                            `pulumi:"securityConfiguration"`
	TablePrefix                *string                            `pulumi:"tablePrefix"`
	Tags                       map[string]string                  `pulumi:"tags"`
	TagsAll                    map[string]string                  `pulumi:"tagsAll"`
}

type CrawlerState struct {
	Arn                        pulumi.StringPtrInput
	CatalogTargets             CrawlerCatalogTargetArrayInput
	Classifiers                pulumi.StringArrayInput
	Configuration              pulumi.StringPtrInput
	DatabaseName               pulumi.StringPtrInput
	DeltaTargets               CrawlerDeltaTargetArrayInput
	Description                pulumi.StringPtrInput
	DynamodbTargets            CrawlerDynamodbTargetArrayInput
	JdbcTargets                CrawlerJdbcTargetArrayInput
	LakeFormationConfiguration CrawlerLakeFormationConfigurationPtrInput
	LineageConfiguration       CrawlerLineageConfigurationPtrInput
	MongodbTargets             CrawlerMongodbTargetArrayInput
	Name                       pulumi.StringPtrInput
	RecrawlPolicy              CrawlerRecrawlPolicyPtrInput
	Role                       pulumi.StringPtrInput
	S3Targets                  CrawlerS3TargetArrayInput
	Schedule                   pulumi.StringPtrInput
	SchemaChangePolicy         CrawlerSchemaChangePolicyPtrInput
	SecurityConfiguration      pulumi.StringPtrInput
	TablePrefix                pulumi.StringPtrInput
	Tags                       pulumi.StringMapInput
	TagsAll                    pulumi.StringMapInput
}

func (CrawlerState) ElementType() reflect.Type {
	return reflect.TypeOf((*crawlerState)(nil)).Elem()
}

type crawlerArgs struct {
	CatalogTargets             []CrawlerCatalogTarget             `pulumi:"catalogTargets"`
	Classifiers                []string                           `pulumi:"classifiers"`
	Configuration              *string                            `pulumi:"configuration"`
	DatabaseName               string                             `pulumi:"databaseName"`
	DeltaTargets               []CrawlerDeltaTarget               `pulumi:"deltaTargets"`
	Description                *string                            `pulumi:"description"`
	DynamodbTargets            []CrawlerDynamodbTarget            `pulumi:"dynamodbTargets"`
	JdbcTargets                []CrawlerJdbcTarget                `pulumi:"jdbcTargets"`
	LakeFormationConfiguration *CrawlerLakeFormationConfiguration `pulumi:"lakeFormationConfiguration"`
	LineageConfiguration       *CrawlerLineageConfiguration       `pulumi:"lineageConfiguration"`
	MongodbTargets             []CrawlerMongodbTarget             `pulumi:"mongodbTargets"`
	Name                       *string                            `pulumi:"name"`
	RecrawlPolicy              *CrawlerRecrawlPolicy              `pulumi:"recrawlPolicy"`
	Role                       string                             `pulumi:"role"`
	S3Targets                  []CrawlerS3Target                  `pulumi:"s3Targets"`
	Schedule                   *string                            `pulumi:"schedule"`
	SchemaChangePolicy         *CrawlerSchemaChangePolicy         `pulumi:"schemaChangePolicy"`
	SecurityConfiguration      *string                            `pulumi:"securityConfiguration"`
	TablePrefix                *string                            `pulumi:"tablePrefix"`
	Tags                       map[string]string                  `pulumi:"tags"`
}

// The set of arguments for constructing a Crawler resource.
type CrawlerArgs struct {
	CatalogTargets             CrawlerCatalogTargetArrayInput
	Classifiers                pulumi.StringArrayInput
	Configuration              pulumi.StringPtrInput
	DatabaseName               pulumi.StringInput
	DeltaTargets               CrawlerDeltaTargetArrayInput
	Description                pulumi.StringPtrInput
	DynamodbTargets            CrawlerDynamodbTargetArrayInput
	JdbcTargets                CrawlerJdbcTargetArrayInput
	LakeFormationConfiguration CrawlerLakeFormationConfigurationPtrInput
	LineageConfiguration       CrawlerLineageConfigurationPtrInput
	MongodbTargets             CrawlerMongodbTargetArrayInput
	Name                       pulumi.StringPtrInput
	RecrawlPolicy              CrawlerRecrawlPolicyPtrInput
	Role                       pulumi.StringInput
	S3Targets                  CrawlerS3TargetArrayInput
	Schedule                   pulumi.StringPtrInput
	SchemaChangePolicy         CrawlerSchemaChangePolicyPtrInput
	SecurityConfiguration      pulumi.StringPtrInput
	TablePrefix                pulumi.StringPtrInput
	Tags                       pulumi.StringMapInput
}

func (CrawlerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*crawlerArgs)(nil)).Elem()
}

type CrawlerInput interface {
	pulumi.Input

	ToCrawlerOutput() CrawlerOutput
	ToCrawlerOutputWithContext(ctx context.Context) CrawlerOutput
}

func (*Crawler) ElementType() reflect.Type {
	return reflect.TypeOf((**Crawler)(nil)).Elem()
}

func (i *Crawler) ToCrawlerOutput() CrawlerOutput {
	return i.ToCrawlerOutputWithContext(context.Background())
}

func (i *Crawler) ToCrawlerOutputWithContext(ctx context.Context) CrawlerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerOutput)
}

// CrawlerArrayInput is an input type that accepts CrawlerArray and CrawlerArrayOutput values.
// You can construct a concrete instance of `CrawlerArrayInput` via:
//
//	CrawlerArray{ CrawlerArgs{...} }
type CrawlerArrayInput interface {
	pulumi.Input

	ToCrawlerArrayOutput() CrawlerArrayOutput
	ToCrawlerArrayOutputWithContext(context.Context) CrawlerArrayOutput
}

type CrawlerArray []CrawlerInput

func (CrawlerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Crawler)(nil)).Elem()
}

func (i CrawlerArray) ToCrawlerArrayOutput() CrawlerArrayOutput {
	return i.ToCrawlerArrayOutputWithContext(context.Background())
}

func (i CrawlerArray) ToCrawlerArrayOutputWithContext(ctx context.Context) CrawlerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerArrayOutput)
}

// CrawlerMapInput is an input type that accepts CrawlerMap and CrawlerMapOutput values.
// You can construct a concrete instance of `CrawlerMapInput` via:
//
//	CrawlerMap{ "key": CrawlerArgs{...} }
type CrawlerMapInput interface {
	pulumi.Input

	ToCrawlerMapOutput() CrawlerMapOutput
	ToCrawlerMapOutputWithContext(context.Context) CrawlerMapOutput
}

type CrawlerMap map[string]CrawlerInput

func (CrawlerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Crawler)(nil)).Elem()
}

func (i CrawlerMap) ToCrawlerMapOutput() CrawlerMapOutput {
	return i.ToCrawlerMapOutputWithContext(context.Background())
}

func (i CrawlerMap) ToCrawlerMapOutputWithContext(ctx context.Context) CrawlerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerMapOutput)
}

type CrawlerOutput struct{ *pulumi.OutputState }

func (CrawlerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Crawler)(nil)).Elem()
}

func (o CrawlerOutput) ToCrawlerOutput() CrawlerOutput {
	return o
}

func (o CrawlerOutput) ToCrawlerOutputWithContext(ctx context.Context) CrawlerOutput {
	return o
}

func (o CrawlerOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Crawler) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o CrawlerOutput) CatalogTargets() CrawlerCatalogTargetArrayOutput {
	return o.ApplyT(func(v *Crawler) CrawlerCatalogTargetArrayOutput { return v.CatalogTargets }).(CrawlerCatalogTargetArrayOutput)
}

func (o CrawlerOutput) Classifiers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Crawler) pulumi.StringArrayOutput { return v.Classifiers }).(pulumi.StringArrayOutput)
}

func (o CrawlerOutput) Configuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Crawler) pulumi.StringPtrOutput { return v.Configuration }).(pulumi.StringPtrOutput)
}

func (o CrawlerOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *Crawler) pulumi.StringOutput { return v.DatabaseName }).(pulumi.StringOutput)
}

func (o CrawlerOutput) DeltaTargets() CrawlerDeltaTargetArrayOutput {
	return o.ApplyT(func(v *Crawler) CrawlerDeltaTargetArrayOutput { return v.DeltaTargets }).(CrawlerDeltaTargetArrayOutput)
}

func (o CrawlerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Crawler) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o CrawlerOutput) DynamodbTargets() CrawlerDynamodbTargetArrayOutput {
	return o.ApplyT(func(v *Crawler) CrawlerDynamodbTargetArrayOutput { return v.DynamodbTargets }).(CrawlerDynamodbTargetArrayOutput)
}

func (o CrawlerOutput) JdbcTargets() CrawlerJdbcTargetArrayOutput {
	return o.ApplyT(func(v *Crawler) CrawlerJdbcTargetArrayOutput { return v.JdbcTargets }).(CrawlerJdbcTargetArrayOutput)
}

func (o CrawlerOutput) LakeFormationConfiguration() CrawlerLakeFormationConfigurationPtrOutput {
	return o.ApplyT(func(v *Crawler) CrawlerLakeFormationConfigurationPtrOutput { return v.LakeFormationConfiguration }).(CrawlerLakeFormationConfigurationPtrOutput)
}

func (o CrawlerOutput) LineageConfiguration() CrawlerLineageConfigurationPtrOutput {
	return o.ApplyT(func(v *Crawler) CrawlerLineageConfigurationPtrOutput { return v.LineageConfiguration }).(CrawlerLineageConfigurationPtrOutput)
}

func (o CrawlerOutput) MongodbTargets() CrawlerMongodbTargetArrayOutput {
	return o.ApplyT(func(v *Crawler) CrawlerMongodbTargetArrayOutput { return v.MongodbTargets }).(CrawlerMongodbTargetArrayOutput)
}

func (o CrawlerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Crawler) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CrawlerOutput) RecrawlPolicy() CrawlerRecrawlPolicyPtrOutput {
	return o.ApplyT(func(v *Crawler) CrawlerRecrawlPolicyPtrOutput { return v.RecrawlPolicy }).(CrawlerRecrawlPolicyPtrOutput)
}

func (o CrawlerOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *Crawler) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o CrawlerOutput) S3Targets() CrawlerS3TargetArrayOutput {
	return o.ApplyT(func(v *Crawler) CrawlerS3TargetArrayOutput { return v.S3Targets }).(CrawlerS3TargetArrayOutput)
}

func (o CrawlerOutput) Schedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Crawler) pulumi.StringPtrOutput { return v.Schedule }).(pulumi.StringPtrOutput)
}

func (o CrawlerOutput) SchemaChangePolicy() CrawlerSchemaChangePolicyPtrOutput {
	return o.ApplyT(func(v *Crawler) CrawlerSchemaChangePolicyPtrOutput { return v.SchemaChangePolicy }).(CrawlerSchemaChangePolicyPtrOutput)
}

func (o CrawlerOutput) SecurityConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Crawler) pulumi.StringPtrOutput { return v.SecurityConfiguration }).(pulumi.StringPtrOutput)
}

func (o CrawlerOutput) TablePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Crawler) pulumi.StringPtrOutput { return v.TablePrefix }).(pulumi.StringPtrOutput)
}

func (o CrawlerOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Crawler) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o CrawlerOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Crawler) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type CrawlerArrayOutput struct{ *pulumi.OutputState }

func (CrawlerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Crawler)(nil)).Elem()
}

func (o CrawlerArrayOutput) ToCrawlerArrayOutput() CrawlerArrayOutput {
	return o
}

func (o CrawlerArrayOutput) ToCrawlerArrayOutputWithContext(ctx context.Context) CrawlerArrayOutput {
	return o
}

func (o CrawlerArrayOutput) Index(i pulumi.IntInput) CrawlerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Crawler {
		return vs[0].([]*Crawler)[vs[1].(int)]
	}).(CrawlerOutput)
}

type CrawlerMapOutput struct{ *pulumi.OutputState }

func (CrawlerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Crawler)(nil)).Elem()
}

func (o CrawlerMapOutput) ToCrawlerMapOutput() CrawlerMapOutput {
	return o
}

func (o CrawlerMapOutput) ToCrawlerMapOutputWithContext(ctx context.Context) CrawlerMapOutput {
	return o
}

func (o CrawlerMapOutput) MapIndex(k pulumi.StringInput) CrawlerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Crawler {
		return vs[0].(map[string]*Crawler)[vs[1].(string)]
	}).(CrawlerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerInput)(nil)).Elem(), &Crawler{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerArrayInput)(nil)).Elem(), CrawlerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerMapInput)(nil)).Elem(), CrawlerMap{})
	pulumi.RegisterOutputType(CrawlerOutput{})
	pulumi.RegisterOutputType(CrawlerArrayOutput{})
	pulumi.RegisterOutputType(CrawlerMapOutput{})
}
