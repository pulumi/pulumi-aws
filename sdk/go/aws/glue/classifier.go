// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Classifier struct {
	pulumi.CustomResourceState

	CsvClassifier  ClassifierCsvClassifierPtrOutput  `pulumi:"csvClassifier"`
	GrokClassifier ClassifierGrokClassifierPtrOutput `pulumi:"grokClassifier"`
	JsonClassifier ClassifierJsonClassifierPtrOutput `pulumi:"jsonClassifier"`
	Name           pulumi.StringOutput               `pulumi:"name"`
	XmlClassifier  ClassifierXmlClassifierPtrOutput  `pulumi:"xmlClassifier"`
}

// NewClassifier registers a new resource with the given unique name, arguments, and options.
func NewClassifier(ctx *pulumi.Context,
	name string, args *ClassifierArgs, opts ...pulumi.ResourceOption) (*Classifier, error) {
	if args == nil {
		args = &ClassifierArgs{}
	}

	var resource Classifier
	err := ctx.RegisterResource("aws:glue/classifier:Classifier", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClassifier gets an existing Classifier resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClassifier(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClassifierState, opts ...pulumi.ResourceOption) (*Classifier, error) {
	var resource Classifier
	err := ctx.ReadResource("aws:glue/classifier:Classifier", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Classifier resources.
type classifierState struct {
	CsvClassifier  *ClassifierCsvClassifier  `pulumi:"csvClassifier"`
	GrokClassifier *ClassifierGrokClassifier `pulumi:"grokClassifier"`
	JsonClassifier *ClassifierJsonClassifier `pulumi:"jsonClassifier"`
	Name           *string                   `pulumi:"name"`
	XmlClassifier  *ClassifierXmlClassifier  `pulumi:"xmlClassifier"`
}

type ClassifierState struct {
	CsvClassifier  ClassifierCsvClassifierPtrInput
	GrokClassifier ClassifierGrokClassifierPtrInput
	JsonClassifier ClassifierJsonClassifierPtrInput
	Name           pulumi.StringPtrInput
	XmlClassifier  ClassifierXmlClassifierPtrInput
}

func (ClassifierState) ElementType() reflect.Type {
	return reflect.TypeOf((*classifierState)(nil)).Elem()
}

type classifierArgs struct {
	CsvClassifier  *ClassifierCsvClassifier  `pulumi:"csvClassifier"`
	GrokClassifier *ClassifierGrokClassifier `pulumi:"grokClassifier"`
	JsonClassifier *ClassifierJsonClassifier `pulumi:"jsonClassifier"`
	Name           *string                   `pulumi:"name"`
	XmlClassifier  *ClassifierXmlClassifier  `pulumi:"xmlClassifier"`
}

// The set of arguments for constructing a Classifier resource.
type ClassifierArgs struct {
	CsvClassifier  ClassifierCsvClassifierPtrInput
	GrokClassifier ClassifierGrokClassifierPtrInput
	JsonClassifier ClassifierJsonClassifierPtrInput
	Name           pulumi.StringPtrInput
	XmlClassifier  ClassifierXmlClassifierPtrInput
}

func (ClassifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*classifierArgs)(nil)).Elem()
}

type ClassifierInput interface {
	pulumi.Input

	ToClassifierOutput() ClassifierOutput
	ToClassifierOutputWithContext(ctx context.Context) ClassifierOutput
}

func (*Classifier) ElementType() reflect.Type {
	return reflect.TypeOf((**Classifier)(nil)).Elem()
}

func (i *Classifier) ToClassifierOutput() ClassifierOutput {
	return i.ToClassifierOutputWithContext(context.Background())
}

func (i *Classifier) ToClassifierOutputWithContext(ctx context.Context) ClassifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassifierOutput)
}

// ClassifierArrayInput is an input type that accepts ClassifierArray and ClassifierArrayOutput values.
// You can construct a concrete instance of `ClassifierArrayInput` via:
//
//	ClassifierArray{ ClassifierArgs{...} }
type ClassifierArrayInput interface {
	pulumi.Input

	ToClassifierArrayOutput() ClassifierArrayOutput
	ToClassifierArrayOutputWithContext(context.Context) ClassifierArrayOutput
}

type ClassifierArray []ClassifierInput

func (ClassifierArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Classifier)(nil)).Elem()
}

func (i ClassifierArray) ToClassifierArrayOutput() ClassifierArrayOutput {
	return i.ToClassifierArrayOutputWithContext(context.Background())
}

func (i ClassifierArray) ToClassifierArrayOutputWithContext(ctx context.Context) ClassifierArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassifierArrayOutput)
}

// ClassifierMapInput is an input type that accepts ClassifierMap and ClassifierMapOutput values.
// You can construct a concrete instance of `ClassifierMapInput` via:
//
//	ClassifierMap{ "key": ClassifierArgs{...} }
type ClassifierMapInput interface {
	pulumi.Input

	ToClassifierMapOutput() ClassifierMapOutput
	ToClassifierMapOutputWithContext(context.Context) ClassifierMapOutput
}

type ClassifierMap map[string]ClassifierInput

func (ClassifierMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Classifier)(nil)).Elem()
}

func (i ClassifierMap) ToClassifierMapOutput() ClassifierMapOutput {
	return i.ToClassifierMapOutputWithContext(context.Background())
}

func (i ClassifierMap) ToClassifierMapOutputWithContext(ctx context.Context) ClassifierMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassifierMapOutput)
}

type ClassifierOutput struct{ *pulumi.OutputState }

func (ClassifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Classifier)(nil)).Elem()
}

func (o ClassifierOutput) ToClassifierOutput() ClassifierOutput {
	return o
}

func (o ClassifierOutput) ToClassifierOutputWithContext(ctx context.Context) ClassifierOutput {
	return o
}

func (o ClassifierOutput) CsvClassifier() ClassifierCsvClassifierPtrOutput {
	return o.ApplyT(func(v *Classifier) ClassifierCsvClassifierPtrOutput { return v.CsvClassifier }).(ClassifierCsvClassifierPtrOutput)
}

func (o ClassifierOutput) GrokClassifier() ClassifierGrokClassifierPtrOutput {
	return o.ApplyT(func(v *Classifier) ClassifierGrokClassifierPtrOutput { return v.GrokClassifier }).(ClassifierGrokClassifierPtrOutput)
}

func (o ClassifierOutput) JsonClassifier() ClassifierJsonClassifierPtrOutput {
	return o.ApplyT(func(v *Classifier) ClassifierJsonClassifierPtrOutput { return v.JsonClassifier }).(ClassifierJsonClassifierPtrOutput)
}

func (o ClassifierOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Classifier) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ClassifierOutput) XmlClassifier() ClassifierXmlClassifierPtrOutput {
	return o.ApplyT(func(v *Classifier) ClassifierXmlClassifierPtrOutput { return v.XmlClassifier }).(ClassifierXmlClassifierPtrOutput)
}

type ClassifierArrayOutput struct{ *pulumi.OutputState }

func (ClassifierArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Classifier)(nil)).Elem()
}

func (o ClassifierArrayOutput) ToClassifierArrayOutput() ClassifierArrayOutput {
	return o
}

func (o ClassifierArrayOutput) ToClassifierArrayOutputWithContext(ctx context.Context) ClassifierArrayOutput {
	return o
}

func (o ClassifierArrayOutput) Index(i pulumi.IntInput) ClassifierOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Classifier {
		return vs[0].([]*Classifier)[vs[1].(int)]
	}).(ClassifierOutput)
}

type ClassifierMapOutput struct{ *pulumi.OutputState }

func (ClassifierMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Classifier)(nil)).Elem()
}

func (o ClassifierMapOutput) ToClassifierMapOutput() ClassifierMapOutput {
	return o
}

func (o ClassifierMapOutput) ToClassifierMapOutputWithContext(ctx context.Context) ClassifierMapOutput {
	return o
}

func (o ClassifierMapOutput) MapIndex(k pulumi.StringInput) ClassifierOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Classifier {
		return vs[0].(map[string]*Classifier)[vs[1].(string)]
	}).(ClassifierOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClassifierInput)(nil)).Elem(), &Classifier{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassifierArrayInput)(nil)).Elem(), ClassifierArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassifierMapInput)(nil)).Elem(), ClassifierMap{})
	pulumi.RegisterOutputType(ClassifierOutput{})
	pulumi.RegisterOutputType(ClassifierArrayOutput{})
	pulumi.RegisterOutputType(ClassifierMapOutput{})
}
