// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package budgets

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type BudgetCostTypes struct {
	// A boolean value whether to include credits in the cost budget. Defaults to `true`
	IncludeCredit *bool `pulumi:"includeCredit"`
	// Specifies whether a budget includes discounts. Defaults to `true`
	IncludeDiscount *bool `pulumi:"includeDiscount"`
	// A boolean value whether to include other subscription costs in the cost budget. Defaults to `true`
	IncludeOtherSubscription *bool `pulumi:"includeOtherSubscription"`
	// A boolean value whether to include recurring costs in the cost budget. Defaults to `true`
	IncludeRecurring *bool `pulumi:"includeRecurring"`
	// A boolean value whether to include refunds in the cost budget. Defaults to `true`
	IncludeRefund *bool `pulumi:"includeRefund"`
	// A boolean value whether to include subscriptions in the cost budget. Defaults to `true`
	IncludeSubscription *bool `pulumi:"includeSubscription"`
	// A boolean value whether to include support costs in the cost budget. Defaults to `true`
	IncludeSupport *bool `pulumi:"includeSupport"`
	// A boolean value whether to include tax in the cost budget. Defaults to `true`
	IncludeTax *bool `pulumi:"includeTax"`
	// A boolean value whether to include upfront costs in the cost budget. Defaults to `true`
	IncludeUpfront *bool `pulumi:"includeUpfront"`
	// Specifies whether a budget uses the amortized rate. Defaults to `false`
	UseAmortized *bool `pulumi:"useAmortized"`
	// A boolean value whether to use blended costs in the cost budget. Defaults to `false`
	UseBlended *bool `pulumi:"useBlended"`
}

// BudgetCostTypesInput is an input type that accepts BudgetCostTypesArgs and BudgetCostTypesOutput values.
// You can construct a concrete instance of `BudgetCostTypesInput` via:
//
// 		 BudgetCostTypesArgs{...}
//
type BudgetCostTypesInput interface {
	pulumi.Input

	ToBudgetCostTypesOutput() BudgetCostTypesOutput
	ToBudgetCostTypesOutputWithContext(context.Context) BudgetCostTypesOutput
}

type BudgetCostTypesArgs struct {
	// A boolean value whether to include credits in the cost budget. Defaults to `true`
	IncludeCredit pulumi.BoolPtrInput `pulumi:"includeCredit"`
	// Specifies whether a budget includes discounts. Defaults to `true`
	IncludeDiscount pulumi.BoolPtrInput `pulumi:"includeDiscount"`
	// A boolean value whether to include other subscription costs in the cost budget. Defaults to `true`
	IncludeOtherSubscription pulumi.BoolPtrInput `pulumi:"includeOtherSubscription"`
	// A boolean value whether to include recurring costs in the cost budget. Defaults to `true`
	IncludeRecurring pulumi.BoolPtrInput `pulumi:"includeRecurring"`
	// A boolean value whether to include refunds in the cost budget. Defaults to `true`
	IncludeRefund pulumi.BoolPtrInput `pulumi:"includeRefund"`
	// A boolean value whether to include subscriptions in the cost budget. Defaults to `true`
	IncludeSubscription pulumi.BoolPtrInput `pulumi:"includeSubscription"`
	// A boolean value whether to include support costs in the cost budget. Defaults to `true`
	IncludeSupport pulumi.BoolPtrInput `pulumi:"includeSupport"`
	// A boolean value whether to include tax in the cost budget. Defaults to `true`
	IncludeTax pulumi.BoolPtrInput `pulumi:"includeTax"`
	// A boolean value whether to include upfront costs in the cost budget. Defaults to `true`
	IncludeUpfront pulumi.BoolPtrInput `pulumi:"includeUpfront"`
	// Specifies whether a budget uses the amortized rate. Defaults to `false`
	UseAmortized pulumi.BoolPtrInput `pulumi:"useAmortized"`
	// A boolean value whether to use blended costs in the cost budget. Defaults to `false`
	UseBlended pulumi.BoolPtrInput `pulumi:"useBlended"`
}

func (BudgetCostTypesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetCostTypes)(nil)).Elem()
}

func (i BudgetCostTypesArgs) ToBudgetCostTypesOutput() BudgetCostTypesOutput {
	return i.ToBudgetCostTypesOutputWithContext(context.Background())
}

func (i BudgetCostTypesArgs) ToBudgetCostTypesOutputWithContext(ctx context.Context) BudgetCostTypesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetCostTypesOutput)
}

func (i BudgetCostTypesArgs) ToBudgetCostTypesPtrOutput() BudgetCostTypesPtrOutput {
	return i.ToBudgetCostTypesPtrOutputWithContext(context.Background())
}

func (i BudgetCostTypesArgs) ToBudgetCostTypesPtrOutputWithContext(ctx context.Context) BudgetCostTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetCostTypesOutput).ToBudgetCostTypesPtrOutputWithContext(ctx)
}

// BudgetCostTypesPtrInput is an input type that accepts BudgetCostTypesArgs, BudgetCostTypesPtr and BudgetCostTypesPtrOutput values.
// You can construct a concrete instance of `BudgetCostTypesPtrInput` via:
//
// 		 BudgetCostTypesArgs{...}
//
//  or:
//
// 		 nil
//
type BudgetCostTypesPtrInput interface {
	pulumi.Input

	ToBudgetCostTypesPtrOutput() BudgetCostTypesPtrOutput
	ToBudgetCostTypesPtrOutputWithContext(context.Context) BudgetCostTypesPtrOutput
}

type budgetCostTypesPtrType BudgetCostTypesArgs

func BudgetCostTypesPtr(v *BudgetCostTypesArgs) BudgetCostTypesPtrInput {
	return (*budgetCostTypesPtrType)(v)
}

func (*budgetCostTypesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetCostTypes)(nil)).Elem()
}

func (i *budgetCostTypesPtrType) ToBudgetCostTypesPtrOutput() BudgetCostTypesPtrOutput {
	return i.ToBudgetCostTypesPtrOutputWithContext(context.Background())
}

func (i *budgetCostTypesPtrType) ToBudgetCostTypesPtrOutputWithContext(ctx context.Context) BudgetCostTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetCostTypesPtrOutput)
}

type BudgetCostTypesOutput struct{ *pulumi.OutputState }

func (BudgetCostTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetCostTypes)(nil)).Elem()
}

func (o BudgetCostTypesOutput) ToBudgetCostTypesOutput() BudgetCostTypesOutput {
	return o
}

func (o BudgetCostTypesOutput) ToBudgetCostTypesOutputWithContext(ctx context.Context) BudgetCostTypesOutput {
	return o
}

func (o BudgetCostTypesOutput) ToBudgetCostTypesPtrOutput() BudgetCostTypesPtrOutput {
	return o.ToBudgetCostTypesPtrOutputWithContext(context.Background())
}

func (o BudgetCostTypesOutput) ToBudgetCostTypesPtrOutputWithContext(ctx context.Context) BudgetCostTypesPtrOutput {
	return o.ApplyT(func(v BudgetCostTypes) *BudgetCostTypes {
		return &v
	}).(BudgetCostTypesPtrOutput)
}

// A boolean value whether to include credits in the cost budget. Defaults to `true`
func (o BudgetCostTypesOutput) IncludeCredit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BudgetCostTypes) *bool { return v.IncludeCredit }).(pulumi.BoolPtrOutput)
}

// Specifies whether a budget includes discounts. Defaults to `true`
func (o BudgetCostTypesOutput) IncludeDiscount() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BudgetCostTypes) *bool { return v.IncludeDiscount }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include other subscription costs in the cost budget. Defaults to `true`
func (o BudgetCostTypesOutput) IncludeOtherSubscription() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BudgetCostTypes) *bool { return v.IncludeOtherSubscription }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include recurring costs in the cost budget. Defaults to `true`
func (o BudgetCostTypesOutput) IncludeRecurring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BudgetCostTypes) *bool { return v.IncludeRecurring }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include refunds in the cost budget. Defaults to `true`
func (o BudgetCostTypesOutput) IncludeRefund() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BudgetCostTypes) *bool { return v.IncludeRefund }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include subscriptions in the cost budget. Defaults to `true`
func (o BudgetCostTypesOutput) IncludeSubscription() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BudgetCostTypes) *bool { return v.IncludeSubscription }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include support costs in the cost budget. Defaults to `true`
func (o BudgetCostTypesOutput) IncludeSupport() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BudgetCostTypes) *bool { return v.IncludeSupport }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include tax in the cost budget. Defaults to `true`
func (o BudgetCostTypesOutput) IncludeTax() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BudgetCostTypes) *bool { return v.IncludeTax }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include upfront costs in the cost budget. Defaults to `true`
func (o BudgetCostTypesOutput) IncludeUpfront() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BudgetCostTypes) *bool { return v.IncludeUpfront }).(pulumi.BoolPtrOutput)
}

// Specifies whether a budget uses the amortized rate. Defaults to `false`
func (o BudgetCostTypesOutput) UseAmortized() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BudgetCostTypes) *bool { return v.UseAmortized }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to use blended costs in the cost budget. Defaults to `false`
func (o BudgetCostTypesOutput) UseBlended() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BudgetCostTypes) *bool { return v.UseBlended }).(pulumi.BoolPtrOutput)
}

type BudgetCostTypesPtrOutput struct{ *pulumi.OutputState }

func (BudgetCostTypesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetCostTypes)(nil)).Elem()
}

func (o BudgetCostTypesPtrOutput) ToBudgetCostTypesPtrOutput() BudgetCostTypesPtrOutput {
	return o
}

func (o BudgetCostTypesPtrOutput) ToBudgetCostTypesPtrOutputWithContext(ctx context.Context) BudgetCostTypesPtrOutput {
	return o
}

func (o BudgetCostTypesPtrOutput) Elem() BudgetCostTypesOutput {
	return o.ApplyT(func(v *BudgetCostTypes) BudgetCostTypes { return *v }).(BudgetCostTypesOutput)
}

// A boolean value whether to include credits in the cost budget. Defaults to `true`
func (o BudgetCostTypesPtrOutput) IncludeCredit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BudgetCostTypes) *bool { return v.IncludeCredit }).(pulumi.BoolPtrOutput)
}

// Specifies whether a budget includes discounts. Defaults to `true`
func (o BudgetCostTypesPtrOutput) IncludeDiscount() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BudgetCostTypes) *bool { return v.IncludeDiscount }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include other subscription costs in the cost budget. Defaults to `true`
func (o BudgetCostTypesPtrOutput) IncludeOtherSubscription() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BudgetCostTypes) *bool { return v.IncludeOtherSubscription }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include recurring costs in the cost budget. Defaults to `true`
func (o BudgetCostTypesPtrOutput) IncludeRecurring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BudgetCostTypes) *bool { return v.IncludeRecurring }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include refunds in the cost budget. Defaults to `true`
func (o BudgetCostTypesPtrOutput) IncludeRefund() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BudgetCostTypes) *bool { return v.IncludeRefund }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include subscriptions in the cost budget. Defaults to `true`
func (o BudgetCostTypesPtrOutput) IncludeSubscription() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BudgetCostTypes) *bool { return v.IncludeSubscription }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include support costs in the cost budget. Defaults to `true`
func (o BudgetCostTypesPtrOutput) IncludeSupport() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BudgetCostTypes) *bool { return v.IncludeSupport }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include tax in the cost budget. Defaults to `true`
func (o BudgetCostTypesPtrOutput) IncludeTax() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BudgetCostTypes) *bool { return v.IncludeTax }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include upfront costs in the cost budget. Defaults to `true`
func (o BudgetCostTypesPtrOutput) IncludeUpfront() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BudgetCostTypes) *bool { return v.IncludeUpfront }).(pulumi.BoolPtrOutput)
}

// Specifies whether a budget uses the amortized rate. Defaults to `false`
func (o BudgetCostTypesPtrOutput) UseAmortized() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BudgetCostTypes) *bool { return v.UseAmortized }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to use blended costs in the cost budget. Defaults to `false`
func (o BudgetCostTypesPtrOutput) UseBlended() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BudgetCostTypes) *bool { return v.UseBlended }).(pulumi.BoolPtrOutput)
}

type BudgetNotification struct {
	// (Required) Comparison operator to use to evaluate the condition. Can be `LESS_THAN`, `EQUAL_TO` or `GREATER_THAN`.
	ComparisonOperator string `pulumi:"comparisonOperator"`
	// (Required) What kind of budget value to notify on. Can be `ACTUAL` or `FORECASTED`
	NotificationType string `pulumi:"notificationType"`
	// (Optional) E-Mail addresses to notify. Either this or `subscriberSnsTopicArns` is required.
	SubscriberEmailAddresses []string `pulumi:"subscriberEmailAddresses"`
	// (Optional) SNS topics to notify. Either this or `subscriberEmailAddresses` is required.
	SubscriberSnsTopicArns []string `pulumi:"subscriberSnsTopicArns"`
	// (Required) Threshold when the notification should be sent.
	Threshold float64 `pulumi:"threshold"`
	// (Required) What kind of threshold is defined. Can be `PERCENTAGE` OR `ABSOLUTE_VALUE`.
	ThresholdType string `pulumi:"thresholdType"`
}

// BudgetNotificationInput is an input type that accepts BudgetNotificationArgs and BudgetNotificationOutput values.
// You can construct a concrete instance of `BudgetNotificationInput` via:
//
// 		 BudgetNotificationArgs{...}
//
type BudgetNotificationInput interface {
	pulumi.Input

	ToBudgetNotificationOutput() BudgetNotificationOutput
	ToBudgetNotificationOutputWithContext(context.Context) BudgetNotificationOutput
}

type BudgetNotificationArgs struct {
	// (Required) Comparison operator to use to evaluate the condition. Can be `LESS_THAN`, `EQUAL_TO` or `GREATER_THAN`.
	ComparisonOperator pulumi.StringInput `pulumi:"comparisonOperator"`
	// (Required) What kind of budget value to notify on. Can be `ACTUAL` or `FORECASTED`
	NotificationType pulumi.StringInput `pulumi:"notificationType"`
	// (Optional) E-Mail addresses to notify. Either this or `subscriberSnsTopicArns` is required.
	SubscriberEmailAddresses pulumi.StringArrayInput `pulumi:"subscriberEmailAddresses"`
	// (Optional) SNS topics to notify. Either this or `subscriberEmailAddresses` is required.
	SubscriberSnsTopicArns pulumi.StringArrayInput `pulumi:"subscriberSnsTopicArns"`
	// (Required) Threshold when the notification should be sent.
	Threshold pulumi.Float64Input `pulumi:"threshold"`
	// (Required) What kind of threshold is defined. Can be `PERCENTAGE` OR `ABSOLUTE_VALUE`.
	ThresholdType pulumi.StringInput `pulumi:"thresholdType"`
}

func (BudgetNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetNotification)(nil)).Elem()
}

func (i BudgetNotificationArgs) ToBudgetNotificationOutput() BudgetNotificationOutput {
	return i.ToBudgetNotificationOutputWithContext(context.Background())
}

func (i BudgetNotificationArgs) ToBudgetNotificationOutputWithContext(ctx context.Context) BudgetNotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetNotificationOutput)
}

// BudgetNotificationArrayInput is an input type that accepts BudgetNotificationArray and BudgetNotificationArrayOutput values.
// You can construct a concrete instance of `BudgetNotificationArrayInput` via:
//
// 		 BudgetNotificationArray{ BudgetNotificationArgs{...} }
//
type BudgetNotificationArrayInput interface {
	pulumi.Input

	ToBudgetNotificationArrayOutput() BudgetNotificationArrayOutput
	ToBudgetNotificationArrayOutputWithContext(context.Context) BudgetNotificationArrayOutput
}

type BudgetNotificationArray []BudgetNotificationInput

func (BudgetNotificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BudgetNotification)(nil)).Elem()
}

func (i BudgetNotificationArray) ToBudgetNotificationArrayOutput() BudgetNotificationArrayOutput {
	return i.ToBudgetNotificationArrayOutputWithContext(context.Background())
}

func (i BudgetNotificationArray) ToBudgetNotificationArrayOutputWithContext(ctx context.Context) BudgetNotificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetNotificationArrayOutput)
}

type BudgetNotificationOutput struct{ *pulumi.OutputState }

func (BudgetNotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetNotification)(nil)).Elem()
}

func (o BudgetNotificationOutput) ToBudgetNotificationOutput() BudgetNotificationOutput {
	return o
}

func (o BudgetNotificationOutput) ToBudgetNotificationOutputWithContext(ctx context.Context) BudgetNotificationOutput {
	return o
}

// (Required) Comparison operator to use to evaluate the condition. Can be `LESS_THAN`, `EQUAL_TO` or `GREATER_THAN`.
func (o BudgetNotificationOutput) ComparisonOperator() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetNotification) string { return v.ComparisonOperator }).(pulumi.StringOutput)
}

// (Required) What kind of budget value to notify on. Can be `ACTUAL` or `FORECASTED`
func (o BudgetNotificationOutput) NotificationType() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetNotification) string { return v.NotificationType }).(pulumi.StringOutput)
}

// (Optional) E-Mail addresses to notify. Either this or `subscriberSnsTopicArns` is required.
func (o BudgetNotificationOutput) SubscriberEmailAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BudgetNotification) []string { return v.SubscriberEmailAddresses }).(pulumi.StringArrayOutput)
}

// (Optional) SNS topics to notify. Either this or `subscriberEmailAddresses` is required.
func (o BudgetNotificationOutput) SubscriberSnsTopicArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BudgetNotification) []string { return v.SubscriberSnsTopicArns }).(pulumi.StringArrayOutput)
}

// (Required) Threshold when the notification should be sent.
func (o BudgetNotificationOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v BudgetNotification) float64 { return v.Threshold }).(pulumi.Float64Output)
}

// (Required) What kind of threshold is defined. Can be `PERCENTAGE` OR `ABSOLUTE_VALUE`.
func (o BudgetNotificationOutput) ThresholdType() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetNotification) string { return v.ThresholdType }).(pulumi.StringOutput)
}

type BudgetNotificationArrayOutput struct{ *pulumi.OutputState }

func (BudgetNotificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BudgetNotification)(nil)).Elem()
}

func (o BudgetNotificationArrayOutput) ToBudgetNotificationArrayOutput() BudgetNotificationArrayOutput {
	return o
}

func (o BudgetNotificationArrayOutput) ToBudgetNotificationArrayOutputWithContext(ctx context.Context) BudgetNotificationArrayOutput {
	return o
}

func (o BudgetNotificationArrayOutput) Index(i pulumi.IntInput) BudgetNotificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BudgetNotification {
		return vs[0].([]BudgetNotification)[vs[1].(int)]
	}).(BudgetNotificationOutput)
}

func init() {
	pulumi.RegisterOutputType(BudgetCostTypesOutput{})
	pulumi.RegisterOutputType(BudgetCostTypesPtrOutput{})
	pulumi.RegisterOutputType(BudgetNotificationOutput{})
	pulumi.RegisterOutputType(BudgetNotificationArrayOutput{})
}
