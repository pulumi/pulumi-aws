// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package budgets

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type BudgetActionActionThreshold struct {
	// The type of threshold for a notification. Valid values are `PERCENTAGE` or `ABSOLUTE_VALUE`.
	ActionThresholdType string `pulumi:"actionThresholdType"`
	// The threshold of a notification.
	ActionThresholdValue float64 `pulumi:"actionThresholdValue"`
}

// BudgetActionActionThresholdInput is an input type that accepts BudgetActionActionThresholdArgs and BudgetActionActionThresholdOutput values.
// You can construct a concrete instance of `BudgetActionActionThresholdInput` via:
//
//	BudgetActionActionThresholdArgs{...}
type BudgetActionActionThresholdInput interface {
	pulumi.Input

	ToBudgetActionActionThresholdOutput() BudgetActionActionThresholdOutput
	ToBudgetActionActionThresholdOutputWithContext(context.Context) BudgetActionActionThresholdOutput
}

type BudgetActionActionThresholdArgs struct {
	// The type of threshold for a notification. Valid values are `PERCENTAGE` or `ABSOLUTE_VALUE`.
	ActionThresholdType pulumi.StringInput `pulumi:"actionThresholdType"`
	// The threshold of a notification.
	ActionThresholdValue pulumi.Float64Input `pulumi:"actionThresholdValue"`
}

func (BudgetActionActionThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetActionActionThreshold)(nil)).Elem()
}

func (i BudgetActionActionThresholdArgs) ToBudgetActionActionThresholdOutput() BudgetActionActionThresholdOutput {
	return i.ToBudgetActionActionThresholdOutputWithContext(context.Background())
}

func (i BudgetActionActionThresholdArgs) ToBudgetActionActionThresholdOutputWithContext(ctx context.Context) BudgetActionActionThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetActionActionThresholdOutput)
}

func (i BudgetActionActionThresholdArgs) ToOutput(ctx context.Context) pulumix.Output[BudgetActionActionThreshold] {
	return pulumix.Output[BudgetActionActionThreshold]{
		OutputState: i.ToBudgetActionActionThresholdOutputWithContext(ctx).OutputState,
	}
}

func (i BudgetActionActionThresholdArgs) ToBudgetActionActionThresholdPtrOutput() BudgetActionActionThresholdPtrOutput {
	return i.ToBudgetActionActionThresholdPtrOutputWithContext(context.Background())
}

func (i BudgetActionActionThresholdArgs) ToBudgetActionActionThresholdPtrOutputWithContext(ctx context.Context) BudgetActionActionThresholdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetActionActionThresholdOutput).ToBudgetActionActionThresholdPtrOutputWithContext(ctx)
}

// BudgetActionActionThresholdPtrInput is an input type that accepts BudgetActionActionThresholdArgs, BudgetActionActionThresholdPtr and BudgetActionActionThresholdPtrOutput values.
// You can construct a concrete instance of `BudgetActionActionThresholdPtrInput` via:
//
//	        BudgetActionActionThresholdArgs{...}
//
//	or:
//
//	        nil
type BudgetActionActionThresholdPtrInput interface {
	pulumi.Input

	ToBudgetActionActionThresholdPtrOutput() BudgetActionActionThresholdPtrOutput
	ToBudgetActionActionThresholdPtrOutputWithContext(context.Context) BudgetActionActionThresholdPtrOutput
}

type budgetActionActionThresholdPtrType BudgetActionActionThresholdArgs

func BudgetActionActionThresholdPtr(v *BudgetActionActionThresholdArgs) BudgetActionActionThresholdPtrInput {
	return (*budgetActionActionThresholdPtrType)(v)
}

func (*budgetActionActionThresholdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetActionActionThreshold)(nil)).Elem()
}

func (i *budgetActionActionThresholdPtrType) ToBudgetActionActionThresholdPtrOutput() BudgetActionActionThresholdPtrOutput {
	return i.ToBudgetActionActionThresholdPtrOutputWithContext(context.Background())
}

func (i *budgetActionActionThresholdPtrType) ToBudgetActionActionThresholdPtrOutputWithContext(ctx context.Context) BudgetActionActionThresholdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetActionActionThresholdPtrOutput)
}

func (i *budgetActionActionThresholdPtrType) ToOutput(ctx context.Context) pulumix.Output[*BudgetActionActionThreshold] {
	return pulumix.Output[*BudgetActionActionThreshold]{
		OutputState: i.ToBudgetActionActionThresholdPtrOutputWithContext(ctx).OutputState,
	}
}

type BudgetActionActionThresholdOutput struct{ *pulumi.OutputState }

func (BudgetActionActionThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetActionActionThreshold)(nil)).Elem()
}

func (o BudgetActionActionThresholdOutput) ToBudgetActionActionThresholdOutput() BudgetActionActionThresholdOutput {
	return o
}

func (o BudgetActionActionThresholdOutput) ToBudgetActionActionThresholdOutputWithContext(ctx context.Context) BudgetActionActionThresholdOutput {
	return o
}

func (o BudgetActionActionThresholdOutput) ToBudgetActionActionThresholdPtrOutput() BudgetActionActionThresholdPtrOutput {
	return o.ToBudgetActionActionThresholdPtrOutputWithContext(context.Background())
}

func (o BudgetActionActionThresholdOutput) ToBudgetActionActionThresholdPtrOutputWithContext(ctx context.Context) BudgetActionActionThresholdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BudgetActionActionThreshold) *BudgetActionActionThreshold {
		return &v
	}).(BudgetActionActionThresholdPtrOutput)
}

func (o BudgetActionActionThresholdOutput) ToOutput(ctx context.Context) pulumix.Output[BudgetActionActionThreshold] {
	return pulumix.Output[BudgetActionActionThreshold]{
		OutputState: o.OutputState,
	}
}

// The type of threshold for a notification. Valid values are `PERCENTAGE` or `ABSOLUTE_VALUE`.
func (o BudgetActionActionThresholdOutput) ActionThresholdType() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetActionActionThreshold) string { return v.ActionThresholdType }).(pulumi.StringOutput)
}

// The threshold of a notification.
func (o BudgetActionActionThresholdOutput) ActionThresholdValue() pulumi.Float64Output {
	return o.ApplyT(func(v BudgetActionActionThreshold) float64 { return v.ActionThresholdValue }).(pulumi.Float64Output)
}

type BudgetActionActionThresholdPtrOutput struct{ *pulumi.OutputState }

func (BudgetActionActionThresholdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetActionActionThreshold)(nil)).Elem()
}

func (o BudgetActionActionThresholdPtrOutput) ToBudgetActionActionThresholdPtrOutput() BudgetActionActionThresholdPtrOutput {
	return o
}

func (o BudgetActionActionThresholdPtrOutput) ToBudgetActionActionThresholdPtrOutputWithContext(ctx context.Context) BudgetActionActionThresholdPtrOutput {
	return o
}

func (o BudgetActionActionThresholdPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BudgetActionActionThreshold] {
	return pulumix.Output[*BudgetActionActionThreshold]{
		OutputState: o.OutputState,
	}
}

func (o BudgetActionActionThresholdPtrOutput) Elem() BudgetActionActionThresholdOutput {
	return o.ApplyT(func(v *BudgetActionActionThreshold) BudgetActionActionThreshold {
		if v != nil {
			return *v
		}
		var ret BudgetActionActionThreshold
		return ret
	}).(BudgetActionActionThresholdOutput)
}

// The type of threshold for a notification. Valid values are `PERCENTAGE` or `ABSOLUTE_VALUE`.
func (o BudgetActionActionThresholdPtrOutput) ActionThresholdType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetActionActionThreshold) *string {
		if v == nil {
			return nil
		}
		return &v.ActionThresholdType
	}).(pulumi.StringPtrOutput)
}

// The threshold of a notification.
func (o BudgetActionActionThresholdPtrOutput) ActionThresholdValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BudgetActionActionThreshold) *float64 {
		if v == nil {
			return nil
		}
		return &v.ActionThresholdValue
	}).(pulumi.Float64PtrOutput)
}

type BudgetActionDefinition struct {
	// The AWS Identity and Access Management (IAM) action definition details. See IAM Action Definition.
	IamActionDefinition *BudgetActionDefinitionIamActionDefinition `pulumi:"iamActionDefinition"`
	// The service control policies (SCPs) action definition details. See SCP Action Definition.
	ScpActionDefinition *BudgetActionDefinitionScpActionDefinition `pulumi:"scpActionDefinition"`
	// The AWS Systems Manager (SSM) action definition details. See SSM Action Definition.
	SsmActionDefinition *BudgetActionDefinitionSsmActionDefinition `pulumi:"ssmActionDefinition"`
}

// BudgetActionDefinitionInput is an input type that accepts BudgetActionDefinitionArgs and BudgetActionDefinitionOutput values.
// You can construct a concrete instance of `BudgetActionDefinitionInput` via:
//
//	BudgetActionDefinitionArgs{...}
type BudgetActionDefinitionInput interface {
	pulumi.Input

	ToBudgetActionDefinitionOutput() BudgetActionDefinitionOutput
	ToBudgetActionDefinitionOutputWithContext(context.Context) BudgetActionDefinitionOutput
}

type BudgetActionDefinitionArgs struct {
	// The AWS Identity and Access Management (IAM) action definition details. See IAM Action Definition.
	IamActionDefinition BudgetActionDefinitionIamActionDefinitionPtrInput `pulumi:"iamActionDefinition"`
	// The service control policies (SCPs) action definition details. See SCP Action Definition.
	ScpActionDefinition BudgetActionDefinitionScpActionDefinitionPtrInput `pulumi:"scpActionDefinition"`
	// The AWS Systems Manager (SSM) action definition details. See SSM Action Definition.
	SsmActionDefinition BudgetActionDefinitionSsmActionDefinitionPtrInput `pulumi:"ssmActionDefinition"`
}

func (BudgetActionDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetActionDefinition)(nil)).Elem()
}

func (i BudgetActionDefinitionArgs) ToBudgetActionDefinitionOutput() BudgetActionDefinitionOutput {
	return i.ToBudgetActionDefinitionOutputWithContext(context.Background())
}

func (i BudgetActionDefinitionArgs) ToBudgetActionDefinitionOutputWithContext(ctx context.Context) BudgetActionDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetActionDefinitionOutput)
}

func (i BudgetActionDefinitionArgs) ToOutput(ctx context.Context) pulumix.Output[BudgetActionDefinition] {
	return pulumix.Output[BudgetActionDefinition]{
		OutputState: i.ToBudgetActionDefinitionOutputWithContext(ctx).OutputState,
	}
}

func (i BudgetActionDefinitionArgs) ToBudgetActionDefinitionPtrOutput() BudgetActionDefinitionPtrOutput {
	return i.ToBudgetActionDefinitionPtrOutputWithContext(context.Background())
}

func (i BudgetActionDefinitionArgs) ToBudgetActionDefinitionPtrOutputWithContext(ctx context.Context) BudgetActionDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetActionDefinitionOutput).ToBudgetActionDefinitionPtrOutputWithContext(ctx)
}

// BudgetActionDefinitionPtrInput is an input type that accepts BudgetActionDefinitionArgs, BudgetActionDefinitionPtr and BudgetActionDefinitionPtrOutput values.
// You can construct a concrete instance of `BudgetActionDefinitionPtrInput` via:
//
//	        BudgetActionDefinitionArgs{...}
//
//	or:
//
//	        nil
type BudgetActionDefinitionPtrInput interface {
	pulumi.Input

	ToBudgetActionDefinitionPtrOutput() BudgetActionDefinitionPtrOutput
	ToBudgetActionDefinitionPtrOutputWithContext(context.Context) BudgetActionDefinitionPtrOutput
}

type budgetActionDefinitionPtrType BudgetActionDefinitionArgs

func BudgetActionDefinitionPtr(v *BudgetActionDefinitionArgs) BudgetActionDefinitionPtrInput {
	return (*budgetActionDefinitionPtrType)(v)
}

func (*budgetActionDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetActionDefinition)(nil)).Elem()
}

func (i *budgetActionDefinitionPtrType) ToBudgetActionDefinitionPtrOutput() BudgetActionDefinitionPtrOutput {
	return i.ToBudgetActionDefinitionPtrOutputWithContext(context.Background())
}

func (i *budgetActionDefinitionPtrType) ToBudgetActionDefinitionPtrOutputWithContext(ctx context.Context) BudgetActionDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetActionDefinitionPtrOutput)
}

func (i *budgetActionDefinitionPtrType) ToOutput(ctx context.Context) pulumix.Output[*BudgetActionDefinition] {
	return pulumix.Output[*BudgetActionDefinition]{
		OutputState: i.ToBudgetActionDefinitionPtrOutputWithContext(ctx).OutputState,
	}
}

type BudgetActionDefinitionOutput struct{ *pulumi.OutputState }

func (BudgetActionDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetActionDefinition)(nil)).Elem()
}

func (o BudgetActionDefinitionOutput) ToBudgetActionDefinitionOutput() BudgetActionDefinitionOutput {
	return o
}

func (o BudgetActionDefinitionOutput) ToBudgetActionDefinitionOutputWithContext(ctx context.Context) BudgetActionDefinitionOutput {
	return o
}

func (o BudgetActionDefinitionOutput) ToBudgetActionDefinitionPtrOutput() BudgetActionDefinitionPtrOutput {
	return o.ToBudgetActionDefinitionPtrOutputWithContext(context.Background())
}

func (o BudgetActionDefinitionOutput) ToBudgetActionDefinitionPtrOutputWithContext(ctx context.Context) BudgetActionDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BudgetActionDefinition) *BudgetActionDefinition {
		return &v
	}).(BudgetActionDefinitionPtrOutput)
}

func (o BudgetActionDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[BudgetActionDefinition] {
	return pulumix.Output[BudgetActionDefinition]{
		OutputState: o.OutputState,
	}
}

// The AWS Identity and Access Management (IAM) action definition details. See IAM Action Definition.
func (o BudgetActionDefinitionOutput) IamActionDefinition() BudgetActionDefinitionIamActionDefinitionPtrOutput {
	return o.ApplyT(func(v BudgetActionDefinition) *BudgetActionDefinitionIamActionDefinition {
		return v.IamActionDefinition
	}).(BudgetActionDefinitionIamActionDefinitionPtrOutput)
}

// The service control policies (SCPs) action definition details. See SCP Action Definition.
func (o BudgetActionDefinitionOutput) ScpActionDefinition() BudgetActionDefinitionScpActionDefinitionPtrOutput {
	return o.ApplyT(func(v BudgetActionDefinition) *BudgetActionDefinitionScpActionDefinition {
		return v.ScpActionDefinition
	}).(BudgetActionDefinitionScpActionDefinitionPtrOutput)
}

// The AWS Systems Manager (SSM) action definition details. See SSM Action Definition.
func (o BudgetActionDefinitionOutput) SsmActionDefinition() BudgetActionDefinitionSsmActionDefinitionPtrOutput {
	return o.ApplyT(func(v BudgetActionDefinition) *BudgetActionDefinitionSsmActionDefinition {
		return v.SsmActionDefinition
	}).(BudgetActionDefinitionSsmActionDefinitionPtrOutput)
}

type BudgetActionDefinitionPtrOutput struct{ *pulumi.OutputState }

func (BudgetActionDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetActionDefinition)(nil)).Elem()
}

func (o BudgetActionDefinitionPtrOutput) ToBudgetActionDefinitionPtrOutput() BudgetActionDefinitionPtrOutput {
	return o
}

func (o BudgetActionDefinitionPtrOutput) ToBudgetActionDefinitionPtrOutputWithContext(ctx context.Context) BudgetActionDefinitionPtrOutput {
	return o
}

func (o BudgetActionDefinitionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BudgetActionDefinition] {
	return pulumix.Output[*BudgetActionDefinition]{
		OutputState: o.OutputState,
	}
}

func (o BudgetActionDefinitionPtrOutput) Elem() BudgetActionDefinitionOutput {
	return o.ApplyT(func(v *BudgetActionDefinition) BudgetActionDefinition {
		if v != nil {
			return *v
		}
		var ret BudgetActionDefinition
		return ret
	}).(BudgetActionDefinitionOutput)
}

// The AWS Identity and Access Management (IAM) action definition details. See IAM Action Definition.
func (o BudgetActionDefinitionPtrOutput) IamActionDefinition() BudgetActionDefinitionIamActionDefinitionPtrOutput {
	return o.ApplyT(func(v *BudgetActionDefinition) *BudgetActionDefinitionIamActionDefinition {
		if v == nil {
			return nil
		}
		return v.IamActionDefinition
	}).(BudgetActionDefinitionIamActionDefinitionPtrOutput)
}

// The service control policies (SCPs) action definition details. See SCP Action Definition.
func (o BudgetActionDefinitionPtrOutput) ScpActionDefinition() BudgetActionDefinitionScpActionDefinitionPtrOutput {
	return o.ApplyT(func(v *BudgetActionDefinition) *BudgetActionDefinitionScpActionDefinition {
		if v == nil {
			return nil
		}
		return v.ScpActionDefinition
	}).(BudgetActionDefinitionScpActionDefinitionPtrOutput)
}

// The AWS Systems Manager (SSM) action definition details. See SSM Action Definition.
func (o BudgetActionDefinitionPtrOutput) SsmActionDefinition() BudgetActionDefinitionSsmActionDefinitionPtrOutput {
	return o.ApplyT(func(v *BudgetActionDefinition) *BudgetActionDefinitionSsmActionDefinition {
		if v == nil {
			return nil
		}
		return v.SsmActionDefinition
	}).(BudgetActionDefinitionSsmActionDefinitionPtrOutput)
}

type BudgetActionDefinitionIamActionDefinition struct {
	// A list of groups to be attached. There must be at least one group.
	Groups []string `pulumi:"groups"`
	// The Amazon Resource Name (ARN) of the policy to be attached.
	PolicyArn string `pulumi:"policyArn"`
	// A list of roles to be attached. There must be at least one role.
	Roles []string `pulumi:"roles"`
	// A list of users to be attached. There must be at least one user.
	Users []string `pulumi:"users"`
}

// BudgetActionDefinitionIamActionDefinitionInput is an input type that accepts BudgetActionDefinitionIamActionDefinitionArgs and BudgetActionDefinitionIamActionDefinitionOutput values.
// You can construct a concrete instance of `BudgetActionDefinitionIamActionDefinitionInput` via:
//
//	BudgetActionDefinitionIamActionDefinitionArgs{...}
type BudgetActionDefinitionIamActionDefinitionInput interface {
	pulumi.Input

	ToBudgetActionDefinitionIamActionDefinitionOutput() BudgetActionDefinitionIamActionDefinitionOutput
	ToBudgetActionDefinitionIamActionDefinitionOutputWithContext(context.Context) BudgetActionDefinitionIamActionDefinitionOutput
}

type BudgetActionDefinitionIamActionDefinitionArgs struct {
	// A list of groups to be attached. There must be at least one group.
	Groups pulumi.StringArrayInput `pulumi:"groups"`
	// The Amazon Resource Name (ARN) of the policy to be attached.
	PolicyArn pulumi.StringInput `pulumi:"policyArn"`
	// A list of roles to be attached. There must be at least one role.
	Roles pulumi.StringArrayInput `pulumi:"roles"`
	// A list of users to be attached. There must be at least one user.
	Users pulumi.StringArrayInput `pulumi:"users"`
}

func (BudgetActionDefinitionIamActionDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetActionDefinitionIamActionDefinition)(nil)).Elem()
}

func (i BudgetActionDefinitionIamActionDefinitionArgs) ToBudgetActionDefinitionIamActionDefinitionOutput() BudgetActionDefinitionIamActionDefinitionOutput {
	return i.ToBudgetActionDefinitionIamActionDefinitionOutputWithContext(context.Background())
}

func (i BudgetActionDefinitionIamActionDefinitionArgs) ToBudgetActionDefinitionIamActionDefinitionOutputWithContext(ctx context.Context) BudgetActionDefinitionIamActionDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetActionDefinitionIamActionDefinitionOutput)
}

func (i BudgetActionDefinitionIamActionDefinitionArgs) ToOutput(ctx context.Context) pulumix.Output[BudgetActionDefinitionIamActionDefinition] {
	return pulumix.Output[BudgetActionDefinitionIamActionDefinition]{
		OutputState: i.ToBudgetActionDefinitionIamActionDefinitionOutputWithContext(ctx).OutputState,
	}
}

func (i BudgetActionDefinitionIamActionDefinitionArgs) ToBudgetActionDefinitionIamActionDefinitionPtrOutput() BudgetActionDefinitionIamActionDefinitionPtrOutput {
	return i.ToBudgetActionDefinitionIamActionDefinitionPtrOutputWithContext(context.Background())
}

func (i BudgetActionDefinitionIamActionDefinitionArgs) ToBudgetActionDefinitionIamActionDefinitionPtrOutputWithContext(ctx context.Context) BudgetActionDefinitionIamActionDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetActionDefinitionIamActionDefinitionOutput).ToBudgetActionDefinitionIamActionDefinitionPtrOutputWithContext(ctx)
}

// BudgetActionDefinitionIamActionDefinitionPtrInput is an input type that accepts BudgetActionDefinitionIamActionDefinitionArgs, BudgetActionDefinitionIamActionDefinitionPtr and BudgetActionDefinitionIamActionDefinitionPtrOutput values.
// You can construct a concrete instance of `BudgetActionDefinitionIamActionDefinitionPtrInput` via:
//
//	        BudgetActionDefinitionIamActionDefinitionArgs{...}
//
//	or:
//
//	        nil
type BudgetActionDefinitionIamActionDefinitionPtrInput interface {
	pulumi.Input

	ToBudgetActionDefinitionIamActionDefinitionPtrOutput() BudgetActionDefinitionIamActionDefinitionPtrOutput
	ToBudgetActionDefinitionIamActionDefinitionPtrOutputWithContext(context.Context) BudgetActionDefinitionIamActionDefinitionPtrOutput
}

type budgetActionDefinitionIamActionDefinitionPtrType BudgetActionDefinitionIamActionDefinitionArgs

func BudgetActionDefinitionIamActionDefinitionPtr(v *BudgetActionDefinitionIamActionDefinitionArgs) BudgetActionDefinitionIamActionDefinitionPtrInput {
	return (*budgetActionDefinitionIamActionDefinitionPtrType)(v)
}

func (*budgetActionDefinitionIamActionDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetActionDefinitionIamActionDefinition)(nil)).Elem()
}

func (i *budgetActionDefinitionIamActionDefinitionPtrType) ToBudgetActionDefinitionIamActionDefinitionPtrOutput() BudgetActionDefinitionIamActionDefinitionPtrOutput {
	return i.ToBudgetActionDefinitionIamActionDefinitionPtrOutputWithContext(context.Background())
}

func (i *budgetActionDefinitionIamActionDefinitionPtrType) ToBudgetActionDefinitionIamActionDefinitionPtrOutputWithContext(ctx context.Context) BudgetActionDefinitionIamActionDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetActionDefinitionIamActionDefinitionPtrOutput)
}

func (i *budgetActionDefinitionIamActionDefinitionPtrType) ToOutput(ctx context.Context) pulumix.Output[*BudgetActionDefinitionIamActionDefinition] {
	return pulumix.Output[*BudgetActionDefinitionIamActionDefinition]{
		OutputState: i.ToBudgetActionDefinitionIamActionDefinitionPtrOutputWithContext(ctx).OutputState,
	}
}

type BudgetActionDefinitionIamActionDefinitionOutput struct{ *pulumi.OutputState }

func (BudgetActionDefinitionIamActionDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetActionDefinitionIamActionDefinition)(nil)).Elem()
}

func (o BudgetActionDefinitionIamActionDefinitionOutput) ToBudgetActionDefinitionIamActionDefinitionOutput() BudgetActionDefinitionIamActionDefinitionOutput {
	return o
}

func (o BudgetActionDefinitionIamActionDefinitionOutput) ToBudgetActionDefinitionIamActionDefinitionOutputWithContext(ctx context.Context) BudgetActionDefinitionIamActionDefinitionOutput {
	return o
}

func (o BudgetActionDefinitionIamActionDefinitionOutput) ToBudgetActionDefinitionIamActionDefinitionPtrOutput() BudgetActionDefinitionIamActionDefinitionPtrOutput {
	return o.ToBudgetActionDefinitionIamActionDefinitionPtrOutputWithContext(context.Background())
}

func (o BudgetActionDefinitionIamActionDefinitionOutput) ToBudgetActionDefinitionIamActionDefinitionPtrOutputWithContext(ctx context.Context) BudgetActionDefinitionIamActionDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BudgetActionDefinitionIamActionDefinition) *BudgetActionDefinitionIamActionDefinition {
		return &v
	}).(BudgetActionDefinitionIamActionDefinitionPtrOutput)
}

func (o BudgetActionDefinitionIamActionDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[BudgetActionDefinitionIamActionDefinition] {
	return pulumix.Output[BudgetActionDefinitionIamActionDefinition]{
		OutputState: o.OutputState,
	}
}

// A list of groups to be attached. There must be at least one group.
func (o BudgetActionDefinitionIamActionDefinitionOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BudgetActionDefinitionIamActionDefinition) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

// The Amazon Resource Name (ARN) of the policy to be attached.
func (o BudgetActionDefinitionIamActionDefinitionOutput) PolicyArn() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetActionDefinitionIamActionDefinition) string { return v.PolicyArn }).(pulumi.StringOutput)
}

// A list of roles to be attached. There must be at least one role.
func (o BudgetActionDefinitionIamActionDefinitionOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BudgetActionDefinitionIamActionDefinition) []string { return v.Roles }).(pulumi.StringArrayOutput)
}

// A list of users to be attached. There must be at least one user.
func (o BudgetActionDefinitionIamActionDefinitionOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BudgetActionDefinitionIamActionDefinition) []string { return v.Users }).(pulumi.StringArrayOutput)
}

type BudgetActionDefinitionIamActionDefinitionPtrOutput struct{ *pulumi.OutputState }

func (BudgetActionDefinitionIamActionDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetActionDefinitionIamActionDefinition)(nil)).Elem()
}

func (o BudgetActionDefinitionIamActionDefinitionPtrOutput) ToBudgetActionDefinitionIamActionDefinitionPtrOutput() BudgetActionDefinitionIamActionDefinitionPtrOutput {
	return o
}

func (o BudgetActionDefinitionIamActionDefinitionPtrOutput) ToBudgetActionDefinitionIamActionDefinitionPtrOutputWithContext(ctx context.Context) BudgetActionDefinitionIamActionDefinitionPtrOutput {
	return o
}

func (o BudgetActionDefinitionIamActionDefinitionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BudgetActionDefinitionIamActionDefinition] {
	return pulumix.Output[*BudgetActionDefinitionIamActionDefinition]{
		OutputState: o.OutputState,
	}
}

func (o BudgetActionDefinitionIamActionDefinitionPtrOutput) Elem() BudgetActionDefinitionIamActionDefinitionOutput {
	return o.ApplyT(func(v *BudgetActionDefinitionIamActionDefinition) BudgetActionDefinitionIamActionDefinition {
		if v != nil {
			return *v
		}
		var ret BudgetActionDefinitionIamActionDefinition
		return ret
	}).(BudgetActionDefinitionIamActionDefinitionOutput)
}

// A list of groups to be attached. There must be at least one group.
func (o BudgetActionDefinitionIamActionDefinitionPtrOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BudgetActionDefinitionIamActionDefinition) []string {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(pulumi.StringArrayOutput)
}

// The Amazon Resource Name (ARN) of the policy to be attached.
func (o BudgetActionDefinitionIamActionDefinitionPtrOutput) PolicyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetActionDefinitionIamActionDefinition) *string {
		if v == nil {
			return nil
		}
		return &v.PolicyArn
	}).(pulumi.StringPtrOutput)
}

// A list of roles to be attached. There must be at least one role.
func (o BudgetActionDefinitionIamActionDefinitionPtrOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BudgetActionDefinitionIamActionDefinition) []string {
		if v == nil {
			return nil
		}
		return v.Roles
	}).(pulumi.StringArrayOutput)
}

// A list of users to be attached. There must be at least one user.
func (o BudgetActionDefinitionIamActionDefinitionPtrOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BudgetActionDefinitionIamActionDefinition) []string {
		if v == nil {
			return nil
		}
		return v.Users
	}).(pulumi.StringArrayOutput)
}

type BudgetActionDefinitionScpActionDefinition struct {
	// The policy ID attached.
	PolicyId string `pulumi:"policyId"`
	// A list of target IDs.
	TargetIds []string `pulumi:"targetIds"`
}

// BudgetActionDefinitionScpActionDefinitionInput is an input type that accepts BudgetActionDefinitionScpActionDefinitionArgs and BudgetActionDefinitionScpActionDefinitionOutput values.
// You can construct a concrete instance of `BudgetActionDefinitionScpActionDefinitionInput` via:
//
//	BudgetActionDefinitionScpActionDefinitionArgs{...}
type BudgetActionDefinitionScpActionDefinitionInput interface {
	pulumi.Input

	ToBudgetActionDefinitionScpActionDefinitionOutput() BudgetActionDefinitionScpActionDefinitionOutput
	ToBudgetActionDefinitionScpActionDefinitionOutputWithContext(context.Context) BudgetActionDefinitionScpActionDefinitionOutput
}

type BudgetActionDefinitionScpActionDefinitionArgs struct {
	// The policy ID attached.
	PolicyId pulumi.StringInput `pulumi:"policyId"`
	// A list of target IDs.
	TargetIds pulumi.StringArrayInput `pulumi:"targetIds"`
}

func (BudgetActionDefinitionScpActionDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetActionDefinitionScpActionDefinition)(nil)).Elem()
}

func (i BudgetActionDefinitionScpActionDefinitionArgs) ToBudgetActionDefinitionScpActionDefinitionOutput() BudgetActionDefinitionScpActionDefinitionOutput {
	return i.ToBudgetActionDefinitionScpActionDefinitionOutputWithContext(context.Background())
}

func (i BudgetActionDefinitionScpActionDefinitionArgs) ToBudgetActionDefinitionScpActionDefinitionOutputWithContext(ctx context.Context) BudgetActionDefinitionScpActionDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetActionDefinitionScpActionDefinitionOutput)
}

func (i BudgetActionDefinitionScpActionDefinitionArgs) ToOutput(ctx context.Context) pulumix.Output[BudgetActionDefinitionScpActionDefinition] {
	return pulumix.Output[BudgetActionDefinitionScpActionDefinition]{
		OutputState: i.ToBudgetActionDefinitionScpActionDefinitionOutputWithContext(ctx).OutputState,
	}
}

func (i BudgetActionDefinitionScpActionDefinitionArgs) ToBudgetActionDefinitionScpActionDefinitionPtrOutput() BudgetActionDefinitionScpActionDefinitionPtrOutput {
	return i.ToBudgetActionDefinitionScpActionDefinitionPtrOutputWithContext(context.Background())
}

func (i BudgetActionDefinitionScpActionDefinitionArgs) ToBudgetActionDefinitionScpActionDefinitionPtrOutputWithContext(ctx context.Context) BudgetActionDefinitionScpActionDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetActionDefinitionScpActionDefinitionOutput).ToBudgetActionDefinitionScpActionDefinitionPtrOutputWithContext(ctx)
}

// BudgetActionDefinitionScpActionDefinitionPtrInput is an input type that accepts BudgetActionDefinitionScpActionDefinitionArgs, BudgetActionDefinitionScpActionDefinitionPtr and BudgetActionDefinitionScpActionDefinitionPtrOutput values.
// You can construct a concrete instance of `BudgetActionDefinitionScpActionDefinitionPtrInput` via:
//
//	        BudgetActionDefinitionScpActionDefinitionArgs{...}
//
//	or:
//
//	        nil
type BudgetActionDefinitionScpActionDefinitionPtrInput interface {
	pulumi.Input

	ToBudgetActionDefinitionScpActionDefinitionPtrOutput() BudgetActionDefinitionScpActionDefinitionPtrOutput
	ToBudgetActionDefinitionScpActionDefinitionPtrOutputWithContext(context.Context) BudgetActionDefinitionScpActionDefinitionPtrOutput
}

type budgetActionDefinitionScpActionDefinitionPtrType BudgetActionDefinitionScpActionDefinitionArgs

func BudgetActionDefinitionScpActionDefinitionPtr(v *BudgetActionDefinitionScpActionDefinitionArgs) BudgetActionDefinitionScpActionDefinitionPtrInput {
	return (*budgetActionDefinitionScpActionDefinitionPtrType)(v)
}

func (*budgetActionDefinitionScpActionDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetActionDefinitionScpActionDefinition)(nil)).Elem()
}

func (i *budgetActionDefinitionScpActionDefinitionPtrType) ToBudgetActionDefinitionScpActionDefinitionPtrOutput() BudgetActionDefinitionScpActionDefinitionPtrOutput {
	return i.ToBudgetActionDefinitionScpActionDefinitionPtrOutputWithContext(context.Background())
}

func (i *budgetActionDefinitionScpActionDefinitionPtrType) ToBudgetActionDefinitionScpActionDefinitionPtrOutputWithContext(ctx context.Context) BudgetActionDefinitionScpActionDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetActionDefinitionScpActionDefinitionPtrOutput)
}

func (i *budgetActionDefinitionScpActionDefinitionPtrType) ToOutput(ctx context.Context) pulumix.Output[*BudgetActionDefinitionScpActionDefinition] {
	return pulumix.Output[*BudgetActionDefinitionScpActionDefinition]{
		OutputState: i.ToBudgetActionDefinitionScpActionDefinitionPtrOutputWithContext(ctx).OutputState,
	}
}

type BudgetActionDefinitionScpActionDefinitionOutput struct{ *pulumi.OutputState }

func (BudgetActionDefinitionScpActionDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetActionDefinitionScpActionDefinition)(nil)).Elem()
}

func (o BudgetActionDefinitionScpActionDefinitionOutput) ToBudgetActionDefinitionScpActionDefinitionOutput() BudgetActionDefinitionScpActionDefinitionOutput {
	return o
}

func (o BudgetActionDefinitionScpActionDefinitionOutput) ToBudgetActionDefinitionScpActionDefinitionOutputWithContext(ctx context.Context) BudgetActionDefinitionScpActionDefinitionOutput {
	return o
}

func (o BudgetActionDefinitionScpActionDefinitionOutput) ToBudgetActionDefinitionScpActionDefinitionPtrOutput() BudgetActionDefinitionScpActionDefinitionPtrOutput {
	return o.ToBudgetActionDefinitionScpActionDefinitionPtrOutputWithContext(context.Background())
}

func (o BudgetActionDefinitionScpActionDefinitionOutput) ToBudgetActionDefinitionScpActionDefinitionPtrOutputWithContext(ctx context.Context) BudgetActionDefinitionScpActionDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BudgetActionDefinitionScpActionDefinition) *BudgetActionDefinitionScpActionDefinition {
		return &v
	}).(BudgetActionDefinitionScpActionDefinitionPtrOutput)
}

func (o BudgetActionDefinitionScpActionDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[BudgetActionDefinitionScpActionDefinition] {
	return pulumix.Output[BudgetActionDefinitionScpActionDefinition]{
		OutputState: o.OutputState,
	}
}

// The policy ID attached.
func (o BudgetActionDefinitionScpActionDefinitionOutput) PolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetActionDefinitionScpActionDefinition) string { return v.PolicyId }).(pulumi.StringOutput)
}

// A list of target IDs.
func (o BudgetActionDefinitionScpActionDefinitionOutput) TargetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BudgetActionDefinitionScpActionDefinition) []string { return v.TargetIds }).(pulumi.StringArrayOutput)
}

type BudgetActionDefinitionScpActionDefinitionPtrOutput struct{ *pulumi.OutputState }

func (BudgetActionDefinitionScpActionDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetActionDefinitionScpActionDefinition)(nil)).Elem()
}

func (o BudgetActionDefinitionScpActionDefinitionPtrOutput) ToBudgetActionDefinitionScpActionDefinitionPtrOutput() BudgetActionDefinitionScpActionDefinitionPtrOutput {
	return o
}

func (o BudgetActionDefinitionScpActionDefinitionPtrOutput) ToBudgetActionDefinitionScpActionDefinitionPtrOutputWithContext(ctx context.Context) BudgetActionDefinitionScpActionDefinitionPtrOutput {
	return o
}

func (o BudgetActionDefinitionScpActionDefinitionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BudgetActionDefinitionScpActionDefinition] {
	return pulumix.Output[*BudgetActionDefinitionScpActionDefinition]{
		OutputState: o.OutputState,
	}
}

func (o BudgetActionDefinitionScpActionDefinitionPtrOutput) Elem() BudgetActionDefinitionScpActionDefinitionOutput {
	return o.ApplyT(func(v *BudgetActionDefinitionScpActionDefinition) BudgetActionDefinitionScpActionDefinition {
		if v != nil {
			return *v
		}
		var ret BudgetActionDefinitionScpActionDefinition
		return ret
	}).(BudgetActionDefinitionScpActionDefinitionOutput)
}

// The policy ID attached.
func (o BudgetActionDefinitionScpActionDefinitionPtrOutput) PolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetActionDefinitionScpActionDefinition) *string {
		if v == nil {
			return nil
		}
		return &v.PolicyId
	}).(pulumi.StringPtrOutput)
}

// A list of target IDs.
func (o BudgetActionDefinitionScpActionDefinitionPtrOutput) TargetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BudgetActionDefinitionScpActionDefinition) []string {
		if v == nil {
			return nil
		}
		return v.TargetIds
	}).(pulumi.StringArrayOutput)
}

type BudgetActionDefinitionSsmActionDefinition struct {
	// The action subType. Valid values are `STOP_EC2_INSTANCES` or `STOP_RDS_INSTANCES`.
	ActionSubType string `pulumi:"actionSubType"`
	// The EC2 and RDS instance IDs.
	InstanceIds []string `pulumi:"instanceIds"`
	// The Region to run the SSM document.
	Region string `pulumi:"region"`
}

// BudgetActionDefinitionSsmActionDefinitionInput is an input type that accepts BudgetActionDefinitionSsmActionDefinitionArgs and BudgetActionDefinitionSsmActionDefinitionOutput values.
// You can construct a concrete instance of `BudgetActionDefinitionSsmActionDefinitionInput` via:
//
//	BudgetActionDefinitionSsmActionDefinitionArgs{...}
type BudgetActionDefinitionSsmActionDefinitionInput interface {
	pulumi.Input

	ToBudgetActionDefinitionSsmActionDefinitionOutput() BudgetActionDefinitionSsmActionDefinitionOutput
	ToBudgetActionDefinitionSsmActionDefinitionOutputWithContext(context.Context) BudgetActionDefinitionSsmActionDefinitionOutput
}

type BudgetActionDefinitionSsmActionDefinitionArgs struct {
	// The action subType. Valid values are `STOP_EC2_INSTANCES` or `STOP_RDS_INSTANCES`.
	ActionSubType pulumi.StringInput `pulumi:"actionSubType"`
	// The EC2 and RDS instance IDs.
	InstanceIds pulumi.StringArrayInput `pulumi:"instanceIds"`
	// The Region to run the SSM document.
	Region pulumi.StringInput `pulumi:"region"`
}

func (BudgetActionDefinitionSsmActionDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetActionDefinitionSsmActionDefinition)(nil)).Elem()
}

func (i BudgetActionDefinitionSsmActionDefinitionArgs) ToBudgetActionDefinitionSsmActionDefinitionOutput() BudgetActionDefinitionSsmActionDefinitionOutput {
	return i.ToBudgetActionDefinitionSsmActionDefinitionOutputWithContext(context.Background())
}

func (i BudgetActionDefinitionSsmActionDefinitionArgs) ToBudgetActionDefinitionSsmActionDefinitionOutputWithContext(ctx context.Context) BudgetActionDefinitionSsmActionDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetActionDefinitionSsmActionDefinitionOutput)
}

func (i BudgetActionDefinitionSsmActionDefinitionArgs) ToOutput(ctx context.Context) pulumix.Output[BudgetActionDefinitionSsmActionDefinition] {
	return pulumix.Output[BudgetActionDefinitionSsmActionDefinition]{
		OutputState: i.ToBudgetActionDefinitionSsmActionDefinitionOutputWithContext(ctx).OutputState,
	}
}

func (i BudgetActionDefinitionSsmActionDefinitionArgs) ToBudgetActionDefinitionSsmActionDefinitionPtrOutput() BudgetActionDefinitionSsmActionDefinitionPtrOutput {
	return i.ToBudgetActionDefinitionSsmActionDefinitionPtrOutputWithContext(context.Background())
}

func (i BudgetActionDefinitionSsmActionDefinitionArgs) ToBudgetActionDefinitionSsmActionDefinitionPtrOutputWithContext(ctx context.Context) BudgetActionDefinitionSsmActionDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetActionDefinitionSsmActionDefinitionOutput).ToBudgetActionDefinitionSsmActionDefinitionPtrOutputWithContext(ctx)
}

// BudgetActionDefinitionSsmActionDefinitionPtrInput is an input type that accepts BudgetActionDefinitionSsmActionDefinitionArgs, BudgetActionDefinitionSsmActionDefinitionPtr and BudgetActionDefinitionSsmActionDefinitionPtrOutput values.
// You can construct a concrete instance of `BudgetActionDefinitionSsmActionDefinitionPtrInput` via:
//
//	        BudgetActionDefinitionSsmActionDefinitionArgs{...}
//
//	or:
//
//	        nil
type BudgetActionDefinitionSsmActionDefinitionPtrInput interface {
	pulumi.Input

	ToBudgetActionDefinitionSsmActionDefinitionPtrOutput() BudgetActionDefinitionSsmActionDefinitionPtrOutput
	ToBudgetActionDefinitionSsmActionDefinitionPtrOutputWithContext(context.Context) BudgetActionDefinitionSsmActionDefinitionPtrOutput
}

type budgetActionDefinitionSsmActionDefinitionPtrType BudgetActionDefinitionSsmActionDefinitionArgs

func BudgetActionDefinitionSsmActionDefinitionPtr(v *BudgetActionDefinitionSsmActionDefinitionArgs) BudgetActionDefinitionSsmActionDefinitionPtrInput {
	return (*budgetActionDefinitionSsmActionDefinitionPtrType)(v)
}

func (*budgetActionDefinitionSsmActionDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetActionDefinitionSsmActionDefinition)(nil)).Elem()
}

func (i *budgetActionDefinitionSsmActionDefinitionPtrType) ToBudgetActionDefinitionSsmActionDefinitionPtrOutput() BudgetActionDefinitionSsmActionDefinitionPtrOutput {
	return i.ToBudgetActionDefinitionSsmActionDefinitionPtrOutputWithContext(context.Background())
}

func (i *budgetActionDefinitionSsmActionDefinitionPtrType) ToBudgetActionDefinitionSsmActionDefinitionPtrOutputWithContext(ctx context.Context) BudgetActionDefinitionSsmActionDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetActionDefinitionSsmActionDefinitionPtrOutput)
}

func (i *budgetActionDefinitionSsmActionDefinitionPtrType) ToOutput(ctx context.Context) pulumix.Output[*BudgetActionDefinitionSsmActionDefinition] {
	return pulumix.Output[*BudgetActionDefinitionSsmActionDefinition]{
		OutputState: i.ToBudgetActionDefinitionSsmActionDefinitionPtrOutputWithContext(ctx).OutputState,
	}
}

type BudgetActionDefinitionSsmActionDefinitionOutput struct{ *pulumi.OutputState }

func (BudgetActionDefinitionSsmActionDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetActionDefinitionSsmActionDefinition)(nil)).Elem()
}

func (o BudgetActionDefinitionSsmActionDefinitionOutput) ToBudgetActionDefinitionSsmActionDefinitionOutput() BudgetActionDefinitionSsmActionDefinitionOutput {
	return o
}

func (o BudgetActionDefinitionSsmActionDefinitionOutput) ToBudgetActionDefinitionSsmActionDefinitionOutputWithContext(ctx context.Context) BudgetActionDefinitionSsmActionDefinitionOutput {
	return o
}

func (o BudgetActionDefinitionSsmActionDefinitionOutput) ToBudgetActionDefinitionSsmActionDefinitionPtrOutput() BudgetActionDefinitionSsmActionDefinitionPtrOutput {
	return o.ToBudgetActionDefinitionSsmActionDefinitionPtrOutputWithContext(context.Background())
}

func (o BudgetActionDefinitionSsmActionDefinitionOutput) ToBudgetActionDefinitionSsmActionDefinitionPtrOutputWithContext(ctx context.Context) BudgetActionDefinitionSsmActionDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BudgetActionDefinitionSsmActionDefinition) *BudgetActionDefinitionSsmActionDefinition {
		return &v
	}).(BudgetActionDefinitionSsmActionDefinitionPtrOutput)
}

func (o BudgetActionDefinitionSsmActionDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[BudgetActionDefinitionSsmActionDefinition] {
	return pulumix.Output[BudgetActionDefinitionSsmActionDefinition]{
		OutputState: o.OutputState,
	}
}

// The action subType. Valid values are `STOP_EC2_INSTANCES` or `STOP_RDS_INSTANCES`.
func (o BudgetActionDefinitionSsmActionDefinitionOutput) ActionSubType() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetActionDefinitionSsmActionDefinition) string { return v.ActionSubType }).(pulumi.StringOutput)
}

// The EC2 and RDS instance IDs.
func (o BudgetActionDefinitionSsmActionDefinitionOutput) InstanceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BudgetActionDefinitionSsmActionDefinition) []string { return v.InstanceIds }).(pulumi.StringArrayOutput)
}

// The Region to run the SSM document.
func (o BudgetActionDefinitionSsmActionDefinitionOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetActionDefinitionSsmActionDefinition) string { return v.Region }).(pulumi.StringOutput)
}

type BudgetActionDefinitionSsmActionDefinitionPtrOutput struct{ *pulumi.OutputState }

func (BudgetActionDefinitionSsmActionDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetActionDefinitionSsmActionDefinition)(nil)).Elem()
}

func (o BudgetActionDefinitionSsmActionDefinitionPtrOutput) ToBudgetActionDefinitionSsmActionDefinitionPtrOutput() BudgetActionDefinitionSsmActionDefinitionPtrOutput {
	return o
}

func (o BudgetActionDefinitionSsmActionDefinitionPtrOutput) ToBudgetActionDefinitionSsmActionDefinitionPtrOutputWithContext(ctx context.Context) BudgetActionDefinitionSsmActionDefinitionPtrOutput {
	return o
}

func (o BudgetActionDefinitionSsmActionDefinitionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BudgetActionDefinitionSsmActionDefinition] {
	return pulumix.Output[*BudgetActionDefinitionSsmActionDefinition]{
		OutputState: o.OutputState,
	}
}

func (o BudgetActionDefinitionSsmActionDefinitionPtrOutput) Elem() BudgetActionDefinitionSsmActionDefinitionOutput {
	return o.ApplyT(func(v *BudgetActionDefinitionSsmActionDefinition) BudgetActionDefinitionSsmActionDefinition {
		if v != nil {
			return *v
		}
		var ret BudgetActionDefinitionSsmActionDefinition
		return ret
	}).(BudgetActionDefinitionSsmActionDefinitionOutput)
}

// The action subType. Valid values are `STOP_EC2_INSTANCES` or `STOP_RDS_INSTANCES`.
func (o BudgetActionDefinitionSsmActionDefinitionPtrOutput) ActionSubType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetActionDefinitionSsmActionDefinition) *string {
		if v == nil {
			return nil
		}
		return &v.ActionSubType
	}).(pulumi.StringPtrOutput)
}

// The EC2 and RDS instance IDs.
func (o BudgetActionDefinitionSsmActionDefinitionPtrOutput) InstanceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BudgetActionDefinitionSsmActionDefinition) []string {
		if v == nil {
			return nil
		}
		return v.InstanceIds
	}).(pulumi.StringArrayOutput)
}

// The Region to run the SSM document.
func (o BudgetActionDefinitionSsmActionDefinitionPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetActionDefinitionSsmActionDefinition) *string {
		if v == nil {
			return nil
		}
		return &v.Region
	}).(pulumi.StringPtrOutput)
}

type BudgetActionSubscriber struct {
	// The address that AWS sends budget notifications to, either an SNS topic or an email.
	Address string `pulumi:"address"`
	// The type of notification that AWS sends to a subscriber. Valid values are `SNS` or `EMAIL`.
	SubscriptionType string `pulumi:"subscriptionType"`
}

// BudgetActionSubscriberInput is an input type that accepts BudgetActionSubscriberArgs and BudgetActionSubscriberOutput values.
// You can construct a concrete instance of `BudgetActionSubscriberInput` via:
//
//	BudgetActionSubscriberArgs{...}
type BudgetActionSubscriberInput interface {
	pulumi.Input

	ToBudgetActionSubscriberOutput() BudgetActionSubscriberOutput
	ToBudgetActionSubscriberOutputWithContext(context.Context) BudgetActionSubscriberOutput
}

type BudgetActionSubscriberArgs struct {
	// The address that AWS sends budget notifications to, either an SNS topic or an email.
	Address pulumi.StringInput `pulumi:"address"`
	// The type of notification that AWS sends to a subscriber. Valid values are `SNS` or `EMAIL`.
	SubscriptionType pulumi.StringInput `pulumi:"subscriptionType"`
}

func (BudgetActionSubscriberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetActionSubscriber)(nil)).Elem()
}

func (i BudgetActionSubscriberArgs) ToBudgetActionSubscriberOutput() BudgetActionSubscriberOutput {
	return i.ToBudgetActionSubscriberOutputWithContext(context.Background())
}

func (i BudgetActionSubscriberArgs) ToBudgetActionSubscriberOutputWithContext(ctx context.Context) BudgetActionSubscriberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetActionSubscriberOutput)
}

func (i BudgetActionSubscriberArgs) ToOutput(ctx context.Context) pulumix.Output[BudgetActionSubscriber] {
	return pulumix.Output[BudgetActionSubscriber]{
		OutputState: i.ToBudgetActionSubscriberOutputWithContext(ctx).OutputState,
	}
}

// BudgetActionSubscriberArrayInput is an input type that accepts BudgetActionSubscriberArray and BudgetActionSubscriberArrayOutput values.
// You can construct a concrete instance of `BudgetActionSubscriberArrayInput` via:
//
//	BudgetActionSubscriberArray{ BudgetActionSubscriberArgs{...} }
type BudgetActionSubscriberArrayInput interface {
	pulumi.Input

	ToBudgetActionSubscriberArrayOutput() BudgetActionSubscriberArrayOutput
	ToBudgetActionSubscriberArrayOutputWithContext(context.Context) BudgetActionSubscriberArrayOutput
}

type BudgetActionSubscriberArray []BudgetActionSubscriberInput

func (BudgetActionSubscriberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BudgetActionSubscriber)(nil)).Elem()
}

func (i BudgetActionSubscriberArray) ToBudgetActionSubscriberArrayOutput() BudgetActionSubscriberArrayOutput {
	return i.ToBudgetActionSubscriberArrayOutputWithContext(context.Background())
}

func (i BudgetActionSubscriberArray) ToBudgetActionSubscriberArrayOutputWithContext(ctx context.Context) BudgetActionSubscriberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetActionSubscriberArrayOutput)
}

func (i BudgetActionSubscriberArray) ToOutput(ctx context.Context) pulumix.Output[[]BudgetActionSubscriber] {
	return pulumix.Output[[]BudgetActionSubscriber]{
		OutputState: i.ToBudgetActionSubscriberArrayOutputWithContext(ctx).OutputState,
	}
}

type BudgetActionSubscriberOutput struct{ *pulumi.OutputState }

func (BudgetActionSubscriberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetActionSubscriber)(nil)).Elem()
}

func (o BudgetActionSubscriberOutput) ToBudgetActionSubscriberOutput() BudgetActionSubscriberOutput {
	return o
}

func (o BudgetActionSubscriberOutput) ToBudgetActionSubscriberOutputWithContext(ctx context.Context) BudgetActionSubscriberOutput {
	return o
}

func (o BudgetActionSubscriberOutput) ToOutput(ctx context.Context) pulumix.Output[BudgetActionSubscriber] {
	return pulumix.Output[BudgetActionSubscriber]{
		OutputState: o.OutputState,
	}
}

// The address that AWS sends budget notifications to, either an SNS topic or an email.
func (o BudgetActionSubscriberOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetActionSubscriber) string { return v.Address }).(pulumi.StringOutput)
}

// The type of notification that AWS sends to a subscriber. Valid values are `SNS` or `EMAIL`.
func (o BudgetActionSubscriberOutput) SubscriptionType() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetActionSubscriber) string { return v.SubscriptionType }).(pulumi.StringOutput)
}

type BudgetActionSubscriberArrayOutput struct{ *pulumi.OutputState }

func (BudgetActionSubscriberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BudgetActionSubscriber)(nil)).Elem()
}

func (o BudgetActionSubscriberArrayOutput) ToBudgetActionSubscriberArrayOutput() BudgetActionSubscriberArrayOutput {
	return o
}

func (o BudgetActionSubscriberArrayOutput) ToBudgetActionSubscriberArrayOutputWithContext(ctx context.Context) BudgetActionSubscriberArrayOutput {
	return o
}

func (o BudgetActionSubscriberArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BudgetActionSubscriber] {
	return pulumix.Output[[]BudgetActionSubscriber]{
		OutputState: o.OutputState,
	}
}

func (o BudgetActionSubscriberArrayOutput) Index(i pulumi.IntInput) BudgetActionSubscriberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BudgetActionSubscriber {
		return vs[0].([]BudgetActionSubscriber)[vs[1].(int)]
	}).(BudgetActionSubscriberOutput)
}

type BudgetAutoAdjustData struct {
	AutoAdjustType     string                                 `pulumi:"autoAdjustType"`
	HistoricalOptions  *BudgetAutoAdjustDataHistoricalOptions `pulumi:"historicalOptions"`
	LastAutoAdjustTime *string                                `pulumi:"lastAutoAdjustTime"`
}

// BudgetAutoAdjustDataInput is an input type that accepts BudgetAutoAdjustDataArgs and BudgetAutoAdjustDataOutput values.
// You can construct a concrete instance of `BudgetAutoAdjustDataInput` via:
//
//	BudgetAutoAdjustDataArgs{...}
type BudgetAutoAdjustDataInput interface {
	pulumi.Input

	ToBudgetAutoAdjustDataOutput() BudgetAutoAdjustDataOutput
	ToBudgetAutoAdjustDataOutputWithContext(context.Context) BudgetAutoAdjustDataOutput
}

type BudgetAutoAdjustDataArgs struct {
	AutoAdjustType     pulumi.StringInput                            `pulumi:"autoAdjustType"`
	HistoricalOptions  BudgetAutoAdjustDataHistoricalOptionsPtrInput `pulumi:"historicalOptions"`
	LastAutoAdjustTime pulumi.StringPtrInput                         `pulumi:"lastAutoAdjustTime"`
}

func (BudgetAutoAdjustDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetAutoAdjustData)(nil)).Elem()
}

func (i BudgetAutoAdjustDataArgs) ToBudgetAutoAdjustDataOutput() BudgetAutoAdjustDataOutput {
	return i.ToBudgetAutoAdjustDataOutputWithContext(context.Background())
}

func (i BudgetAutoAdjustDataArgs) ToBudgetAutoAdjustDataOutputWithContext(ctx context.Context) BudgetAutoAdjustDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetAutoAdjustDataOutput)
}

func (i BudgetAutoAdjustDataArgs) ToOutput(ctx context.Context) pulumix.Output[BudgetAutoAdjustData] {
	return pulumix.Output[BudgetAutoAdjustData]{
		OutputState: i.ToBudgetAutoAdjustDataOutputWithContext(ctx).OutputState,
	}
}

func (i BudgetAutoAdjustDataArgs) ToBudgetAutoAdjustDataPtrOutput() BudgetAutoAdjustDataPtrOutput {
	return i.ToBudgetAutoAdjustDataPtrOutputWithContext(context.Background())
}

func (i BudgetAutoAdjustDataArgs) ToBudgetAutoAdjustDataPtrOutputWithContext(ctx context.Context) BudgetAutoAdjustDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetAutoAdjustDataOutput).ToBudgetAutoAdjustDataPtrOutputWithContext(ctx)
}

// BudgetAutoAdjustDataPtrInput is an input type that accepts BudgetAutoAdjustDataArgs, BudgetAutoAdjustDataPtr and BudgetAutoAdjustDataPtrOutput values.
// You can construct a concrete instance of `BudgetAutoAdjustDataPtrInput` via:
//
//	        BudgetAutoAdjustDataArgs{...}
//
//	or:
//
//	        nil
type BudgetAutoAdjustDataPtrInput interface {
	pulumi.Input

	ToBudgetAutoAdjustDataPtrOutput() BudgetAutoAdjustDataPtrOutput
	ToBudgetAutoAdjustDataPtrOutputWithContext(context.Context) BudgetAutoAdjustDataPtrOutput
}

type budgetAutoAdjustDataPtrType BudgetAutoAdjustDataArgs

func BudgetAutoAdjustDataPtr(v *BudgetAutoAdjustDataArgs) BudgetAutoAdjustDataPtrInput {
	return (*budgetAutoAdjustDataPtrType)(v)
}

func (*budgetAutoAdjustDataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetAutoAdjustData)(nil)).Elem()
}

func (i *budgetAutoAdjustDataPtrType) ToBudgetAutoAdjustDataPtrOutput() BudgetAutoAdjustDataPtrOutput {
	return i.ToBudgetAutoAdjustDataPtrOutputWithContext(context.Background())
}

func (i *budgetAutoAdjustDataPtrType) ToBudgetAutoAdjustDataPtrOutputWithContext(ctx context.Context) BudgetAutoAdjustDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetAutoAdjustDataPtrOutput)
}

func (i *budgetAutoAdjustDataPtrType) ToOutput(ctx context.Context) pulumix.Output[*BudgetAutoAdjustData] {
	return pulumix.Output[*BudgetAutoAdjustData]{
		OutputState: i.ToBudgetAutoAdjustDataPtrOutputWithContext(ctx).OutputState,
	}
}

type BudgetAutoAdjustDataOutput struct{ *pulumi.OutputState }

func (BudgetAutoAdjustDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetAutoAdjustData)(nil)).Elem()
}

func (o BudgetAutoAdjustDataOutput) ToBudgetAutoAdjustDataOutput() BudgetAutoAdjustDataOutput {
	return o
}

func (o BudgetAutoAdjustDataOutput) ToBudgetAutoAdjustDataOutputWithContext(ctx context.Context) BudgetAutoAdjustDataOutput {
	return o
}

func (o BudgetAutoAdjustDataOutput) ToBudgetAutoAdjustDataPtrOutput() BudgetAutoAdjustDataPtrOutput {
	return o.ToBudgetAutoAdjustDataPtrOutputWithContext(context.Background())
}

func (o BudgetAutoAdjustDataOutput) ToBudgetAutoAdjustDataPtrOutputWithContext(ctx context.Context) BudgetAutoAdjustDataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BudgetAutoAdjustData) *BudgetAutoAdjustData {
		return &v
	}).(BudgetAutoAdjustDataPtrOutput)
}

func (o BudgetAutoAdjustDataOutput) ToOutput(ctx context.Context) pulumix.Output[BudgetAutoAdjustData] {
	return pulumix.Output[BudgetAutoAdjustData]{
		OutputState: o.OutputState,
	}
}

func (o BudgetAutoAdjustDataOutput) AutoAdjustType() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetAutoAdjustData) string { return v.AutoAdjustType }).(pulumi.StringOutput)
}

func (o BudgetAutoAdjustDataOutput) HistoricalOptions() BudgetAutoAdjustDataHistoricalOptionsPtrOutput {
	return o.ApplyT(func(v BudgetAutoAdjustData) *BudgetAutoAdjustDataHistoricalOptions { return v.HistoricalOptions }).(BudgetAutoAdjustDataHistoricalOptionsPtrOutput)
}

func (o BudgetAutoAdjustDataOutput) LastAutoAdjustTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BudgetAutoAdjustData) *string { return v.LastAutoAdjustTime }).(pulumi.StringPtrOutput)
}

type BudgetAutoAdjustDataPtrOutput struct{ *pulumi.OutputState }

func (BudgetAutoAdjustDataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetAutoAdjustData)(nil)).Elem()
}

func (o BudgetAutoAdjustDataPtrOutput) ToBudgetAutoAdjustDataPtrOutput() BudgetAutoAdjustDataPtrOutput {
	return o
}

func (o BudgetAutoAdjustDataPtrOutput) ToBudgetAutoAdjustDataPtrOutputWithContext(ctx context.Context) BudgetAutoAdjustDataPtrOutput {
	return o
}

func (o BudgetAutoAdjustDataPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BudgetAutoAdjustData] {
	return pulumix.Output[*BudgetAutoAdjustData]{
		OutputState: o.OutputState,
	}
}

func (o BudgetAutoAdjustDataPtrOutput) Elem() BudgetAutoAdjustDataOutput {
	return o.ApplyT(func(v *BudgetAutoAdjustData) BudgetAutoAdjustData {
		if v != nil {
			return *v
		}
		var ret BudgetAutoAdjustData
		return ret
	}).(BudgetAutoAdjustDataOutput)
}

func (o BudgetAutoAdjustDataPtrOutput) AutoAdjustType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetAutoAdjustData) *string {
		if v == nil {
			return nil
		}
		return &v.AutoAdjustType
	}).(pulumi.StringPtrOutput)
}

func (o BudgetAutoAdjustDataPtrOutput) HistoricalOptions() BudgetAutoAdjustDataHistoricalOptionsPtrOutput {
	return o.ApplyT(func(v *BudgetAutoAdjustData) *BudgetAutoAdjustDataHistoricalOptions {
		if v == nil {
			return nil
		}
		return v.HistoricalOptions
	}).(BudgetAutoAdjustDataHistoricalOptionsPtrOutput)
}

func (o BudgetAutoAdjustDataPtrOutput) LastAutoAdjustTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetAutoAdjustData) *string {
		if v == nil {
			return nil
		}
		return v.LastAutoAdjustTime
	}).(pulumi.StringPtrOutput)
}

type BudgetAutoAdjustDataHistoricalOptions struct {
	BudgetAdjustmentPeriod   int  `pulumi:"budgetAdjustmentPeriod"`
	LookbackAvailablePeriods *int `pulumi:"lookbackAvailablePeriods"`
}

// BudgetAutoAdjustDataHistoricalOptionsInput is an input type that accepts BudgetAutoAdjustDataHistoricalOptionsArgs and BudgetAutoAdjustDataHistoricalOptionsOutput values.
// You can construct a concrete instance of `BudgetAutoAdjustDataHistoricalOptionsInput` via:
//
//	BudgetAutoAdjustDataHistoricalOptionsArgs{...}
type BudgetAutoAdjustDataHistoricalOptionsInput interface {
	pulumi.Input

	ToBudgetAutoAdjustDataHistoricalOptionsOutput() BudgetAutoAdjustDataHistoricalOptionsOutput
	ToBudgetAutoAdjustDataHistoricalOptionsOutputWithContext(context.Context) BudgetAutoAdjustDataHistoricalOptionsOutput
}

type BudgetAutoAdjustDataHistoricalOptionsArgs struct {
	BudgetAdjustmentPeriod   pulumi.IntInput    `pulumi:"budgetAdjustmentPeriod"`
	LookbackAvailablePeriods pulumi.IntPtrInput `pulumi:"lookbackAvailablePeriods"`
}

func (BudgetAutoAdjustDataHistoricalOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetAutoAdjustDataHistoricalOptions)(nil)).Elem()
}

func (i BudgetAutoAdjustDataHistoricalOptionsArgs) ToBudgetAutoAdjustDataHistoricalOptionsOutput() BudgetAutoAdjustDataHistoricalOptionsOutput {
	return i.ToBudgetAutoAdjustDataHistoricalOptionsOutputWithContext(context.Background())
}

func (i BudgetAutoAdjustDataHistoricalOptionsArgs) ToBudgetAutoAdjustDataHistoricalOptionsOutputWithContext(ctx context.Context) BudgetAutoAdjustDataHistoricalOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetAutoAdjustDataHistoricalOptionsOutput)
}

func (i BudgetAutoAdjustDataHistoricalOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[BudgetAutoAdjustDataHistoricalOptions] {
	return pulumix.Output[BudgetAutoAdjustDataHistoricalOptions]{
		OutputState: i.ToBudgetAutoAdjustDataHistoricalOptionsOutputWithContext(ctx).OutputState,
	}
}

func (i BudgetAutoAdjustDataHistoricalOptionsArgs) ToBudgetAutoAdjustDataHistoricalOptionsPtrOutput() BudgetAutoAdjustDataHistoricalOptionsPtrOutput {
	return i.ToBudgetAutoAdjustDataHistoricalOptionsPtrOutputWithContext(context.Background())
}

func (i BudgetAutoAdjustDataHistoricalOptionsArgs) ToBudgetAutoAdjustDataHistoricalOptionsPtrOutputWithContext(ctx context.Context) BudgetAutoAdjustDataHistoricalOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetAutoAdjustDataHistoricalOptionsOutput).ToBudgetAutoAdjustDataHistoricalOptionsPtrOutputWithContext(ctx)
}

// BudgetAutoAdjustDataHistoricalOptionsPtrInput is an input type that accepts BudgetAutoAdjustDataHistoricalOptionsArgs, BudgetAutoAdjustDataHistoricalOptionsPtr and BudgetAutoAdjustDataHistoricalOptionsPtrOutput values.
// You can construct a concrete instance of `BudgetAutoAdjustDataHistoricalOptionsPtrInput` via:
//
//	        BudgetAutoAdjustDataHistoricalOptionsArgs{...}
//
//	or:
//
//	        nil
type BudgetAutoAdjustDataHistoricalOptionsPtrInput interface {
	pulumi.Input

	ToBudgetAutoAdjustDataHistoricalOptionsPtrOutput() BudgetAutoAdjustDataHistoricalOptionsPtrOutput
	ToBudgetAutoAdjustDataHistoricalOptionsPtrOutputWithContext(context.Context) BudgetAutoAdjustDataHistoricalOptionsPtrOutput
}

type budgetAutoAdjustDataHistoricalOptionsPtrType BudgetAutoAdjustDataHistoricalOptionsArgs

func BudgetAutoAdjustDataHistoricalOptionsPtr(v *BudgetAutoAdjustDataHistoricalOptionsArgs) BudgetAutoAdjustDataHistoricalOptionsPtrInput {
	return (*budgetAutoAdjustDataHistoricalOptionsPtrType)(v)
}

func (*budgetAutoAdjustDataHistoricalOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetAutoAdjustDataHistoricalOptions)(nil)).Elem()
}

func (i *budgetAutoAdjustDataHistoricalOptionsPtrType) ToBudgetAutoAdjustDataHistoricalOptionsPtrOutput() BudgetAutoAdjustDataHistoricalOptionsPtrOutput {
	return i.ToBudgetAutoAdjustDataHistoricalOptionsPtrOutputWithContext(context.Background())
}

func (i *budgetAutoAdjustDataHistoricalOptionsPtrType) ToBudgetAutoAdjustDataHistoricalOptionsPtrOutputWithContext(ctx context.Context) BudgetAutoAdjustDataHistoricalOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetAutoAdjustDataHistoricalOptionsPtrOutput)
}

func (i *budgetAutoAdjustDataHistoricalOptionsPtrType) ToOutput(ctx context.Context) pulumix.Output[*BudgetAutoAdjustDataHistoricalOptions] {
	return pulumix.Output[*BudgetAutoAdjustDataHistoricalOptions]{
		OutputState: i.ToBudgetAutoAdjustDataHistoricalOptionsPtrOutputWithContext(ctx).OutputState,
	}
}

type BudgetAutoAdjustDataHistoricalOptionsOutput struct{ *pulumi.OutputState }

func (BudgetAutoAdjustDataHistoricalOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetAutoAdjustDataHistoricalOptions)(nil)).Elem()
}

func (o BudgetAutoAdjustDataHistoricalOptionsOutput) ToBudgetAutoAdjustDataHistoricalOptionsOutput() BudgetAutoAdjustDataHistoricalOptionsOutput {
	return o
}

func (o BudgetAutoAdjustDataHistoricalOptionsOutput) ToBudgetAutoAdjustDataHistoricalOptionsOutputWithContext(ctx context.Context) BudgetAutoAdjustDataHistoricalOptionsOutput {
	return o
}

func (o BudgetAutoAdjustDataHistoricalOptionsOutput) ToBudgetAutoAdjustDataHistoricalOptionsPtrOutput() BudgetAutoAdjustDataHistoricalOptionsPtrOutput {
	return o.ToBudgetAutoAdjustDataHistoricalOptionsPtrOutputWithContext(context.Background())
}

func (o BudgetAutoAdjustDataHistoricalOptionsOutput) ToBudgetAutoAdjustDataHistoricalOptionsPtrOutputWithContext(ctx context.Context) BudgetAutoAdjustDataHistoricalOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BudgetAutoAdjustDataHistoricalOptions) *BudgetAutoAdjustDataHistoricalOptions {
		return &v
	}).(BudgetAutoAdjustDataHistoricalOptionsPtrOutput)
}

func (o BudgetAutoAdjustDataHistoricalOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[BudgetAutoAdjustDataHistoricalOptions] {
	return pulumix.Output[BudgetAutoAdjustDataHistoricalOptions]{
		OutputState: o.OutputState,
	}
}

func (o BudgetAutoAdjustDataHistoricalOptionsOutput) BudgetAdjustmentPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v BudgetAutoAdjustDataHistoricalOptions) int { return v.BudgetAdjustmentPeriod }).(pulumi.IntOutput)
}

func (o BudgetAutoAdjustDataHistoricalOptionsOutput) LookbackAvailablePeriods() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BudgetAutoAdjustDataHistoricalOptions) *int { return v.LookbackAvailablePeriods }).(pulumi.IntPtrOutput)
}

type BudgetAutoAdjustDataHistoricalOptionsPtrOutput struct{ *pulumi.OutputState }

func (BudgetAutoAdjustDataHistoricalOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetAutoAdjustDataHistoricalOptions)(nil)).Elem()
}

func (o BudgetAutoAdjustDataHistoricalOptionsPtrOutput) ToBudgetAutoAdjustDataHistoricalOptionsPtrOutput() BudgetAutoAdjustDataHistoricalOptionsPtrOutput {
	return o
}

func (o BudgetAutoAdjustDataHistoricalOptionsPtrOutput) ToBudgetAutoAdjustDataHistoricalOptionsPtrOutputWithContext(ctx context.Context) BudgetAutoAdjustDataHistoricalOptionsPtrOutput {
	return o
}

func (o BudgetAutoAdjustDataHistoricalOptionsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BudgetAutoAdjustDataHistoricalOptions] {
	return pulumix.Output[*BudgetAutoAdjustDataHistoricalOptions]{
		OutputState: o.OutputState,
	}
}

func (o BudgetAutoAdjustDataHistoricalOptionsPtrOutput) Elem() BudgetAutoAdjustDataHistoricalOptionsOutput {
	return o.ApplyT(func(v *BudgetAutoAdjustDataHistoricalOptions) BudgetAutoAdjustDataHistoricalOptions {
		if v != nil {
			return *v
		}
		var ret BudgetAutoAdjustDataHistoricalOptions
		return ret
	}).(BudgetAutoAdjustDataHistoricalOptionsOutput)
}

func (o BudgetAutoAdjustDataHistoricalOptionsPtrOutput) BudgetAdjustmentPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BudgetAutoAdjustDataHistoricalOptions) *int {
		if v == nil {
			return nil
		}
		return &v.BudgetAdjustmentPeriod
	}).(pulumi.IntPtrOutput)
}

func (o BudgetAutoAdjustDataHistoricalOptionsPtrOutput) LookbackAvailablePeriods() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BudgetAutoAdjustDataHistoricalOptions) *int {
		if v == nil {
			return nil
		}
		return v.LookbackAvailablePeriods
	}).(pulumi.IntPtrOutput)
}

type BudgetCostFilter struct {
	// The name of a budget. Unique within accounts.
	Name   string   `pulumi:"name"`
	Values []string `pulumi:"values"`
}

// BudgetCostFilterInput is an input type that accepts BudgetCostFilterArgs and BudgetCostFilterOutput values.
// You can construct a concrete instance of `BudgetCostFilterInput` via:
//
//	BudgetCostFilterArgs{...}
type BudgetCostFilterInput interface {
	pulumi.Input

	ToBudgetCostFilterOutput() BudgetCostFilterOutput
	ToBudgetCostFilterOutputWithContext(context.Context) BudgetCostFilterOutput
}

type BudgetCostFilterArgs struct {
	// The name of a budget. Unique within accounts.
	Name   pulumi.StringInput      `pulumi:"name"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (BudgetCostFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetCostFilter)(nil)).Elem()
}

func (i BudgetCostFilterArgs) ToBudgetCostFilterOutput() BudgetCostFilterOutput {
	return i.ToBudgetCostFilterOutputWithContext(context.Background())
}

func (i BudgetCostFilterArgs) ToBudgetCostFilterOutputWithContext(ctx context.Context) BudgetCostFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetCostFilterOutput)
}

func (i BudgetCostFilterArgs) ToOutput(ctx context.Context) pulumix.Output[BudgetCostFilter] {
	return pulumix.Output[BudgetCostFilter]{
		OutputState: i.ToBudgetCostFilterOutputWithContext(ctx).OutputState,
	}
}

// BudgetCostFilterArrayInput is an input type that accepts BudgetCostFilterArray and BudgetCostFilterArrayOutput values.
// You can construct a concrete instance of `BudgetCostFilterArrayInput` via:
//
//	BudgetCostFilterArray{ BudgetCostFilterArgs{...} }
type BudgetCostFilterArrayInput interface {
	pulumi.Input

	ToBudgetCostFilterArrayOutput() BudgetCostFilterArrayOutput
	ToBudgetCostFilterArrayOutputWithContext(context.Context) BudgetCostFilterArrayOutput
}

type BudgetCostFilterArray []BudgetCostFilterInput

func (BudgetCostFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BudgetCostFilter)(nil)).Elem()
}

func (i BudgetCostFilterArray) ToBudgetCostFilterArrayOutput() BudgetCostFilterArrayOutput {
	return i.ToBudgetCostFilterArrayOutputWithContext(context.Background())
}

func (i BudgetCostFilterArray) ToBudgetCostFilterArrayOutputWithContext(ctx context.Context) BudgetCostFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetCostFilterArrayOutput)
}

func (i BudgetCostFilterArray) ToOutput(ctx context.Context) pulumix.Output[[]BudgetCostFilter] {
	return pulumix.Output[[]BudgetCostFilter]{
		OutputState: i.ToBudgetCostFilterArrayOutputWithContext(ctx).OutputState,
	}
}

type BudgetCostFilterOutput struct{ *pulumi.OutputState }

func (BudgetCostFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetCostFilter)(nil)).Elem()
}

func (o BudgetCostFilterOutput) ToBudgetCostFilterOutput() BudgetCostFilterOutput {
	return o
}

func (o BudgetCostFilterOutput) ToBudgetCostFilterOutputWithContext(ctx context.Context) BudgetCostFilterOutput {
	return o
}

func (o BudgetCostFilterOutput) ToOutput(ctx context.Context) pulumix.Output[BudgetCostFilter] {
	return pulumix.Output[BudgetCostFilter]{
		OutputState: o.OutputState,
	}
}

// The name of a budget. Unique within accounts.
func (o BudgetCostFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetCostFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o BudgetCostFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BudgetCostFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type BudgetCostFilterArrayOutput struct{ *pulumi.OutputState }

func (BudgetCostFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BudgetCostFilter)(nil)).Elem()
}

func (o BudgetCostFilterArrayOutput) ToBudgetCostFilterArrayOutput() BudgetCostFilterArrayOutput {
	return o
}

func (o BudgetCostFilterArrayOutput) ToBudgetCostFilterArrayOutputWithContext(ctx context.Context) BudgetCostFilterArrayOutput {
	return o
}

func (o BudgetCostFilterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BudgetCostFilter] {
	return pulumix.Output[[]BudgetCostFilter]{
		OutputState: o.OutputState,
	}
}

func (o BudgetCostFilterArrayOutput) Index(i pulumi.IntInput) BudgetCostFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BudgetCostFilter {
		return vs[0].([]BudgetCostFilter)[vs[1].(int)]
	}).(BudgetCostFilterOutput)
}

type BudgetCostTypes struct {
	// A boolean value whether to include credits in the cost budget. Defaults to `true`
	IncludeCredit *bool `pulumi:"includeCredit"`
	// Whether a budget includes discounts. Defaults to `true`
	IncludeDiscount *bool `pulumi:"includeDiscount"`
	// A boolean value whether to include other subscription costs in the cost budget. Defaults to `true`
	IncludeOtherSubscription *bool `pulumi:"includeOtherSubscription"`
	// A boolean value whether to include recurring costs in the cost budget. Defaults to `true`
	IncludeRecurring *bool `pulumi:"includeRecurring"`
	// A boolean value whether to include refunds in the cost budget. Defaults to `true`
	IncludeRefund *bool `pulumi:"includeRefund"`
	// A boolean value whether to include subscriptions in the cost budget. Defaults to `true`
	IncludeSubscription *bool `pulumi:"includeSubscription"`
	// A boolean value whether to include support costs in the cost budget. Defaults to `true`
	IncludeSupport *bool `pulumi:"includeSupport"`
	// A boolean value whether to include tax in the cost budget. Defaults to `true`
	IncludeTax *bool `pulumi:"includeTax"`
	// A boolean value whether to include upfront costs in the cost budget. Defaults to `true`
	IncludeUpfront *bool `pulumi:"includeUpfront"`
	// Whether a budget uses the amortized rate. Defaults to `false`
	UseAmortized *bool `pulumi:"useAmortized"`
	// A boolean value whether to use blended costs in the cost budget. Defaults to `false`
	UseBlended *bool `pulumi:"useBlended"`
}

// BudgetCostTypesInput is an input type that accepts BudgetCostTypesArgs and BudgetCostTypesOutput values.
// You can construct a concrete instance of `BudgetCostTypesInput` via:
//
//	BudgetCostTypesArgs{...}
type BudgetCostTypesInput interface {
	pulumi.Input

	ToBudgetCostTypesOutput() BudgetCostTypesOutput
	ToBudgetCostTypesOutputWithContext(context.Context) BudgetCostTypesOutput
}

type BudgetCostTypesArgs struct {
	// A boolean value whether to include credits in the cost budget. Defaults to `true`
	IncludeCredit pulumi.BoolPtrInput `pulumi:"includeCredit"`
	// Whether a budget includes discounts. Defaults to `true`
	IncludeDiscount pulumi.BoolPtrInput `pulumi:"includeDiscount"`
	// A boolean value whether to include other subscription costs in the cost budget. Defaults to `true`
	IncludeOtherSubscription pulumi.BoolPtrInput `pulumi:"includeOtherSubscription"`
	// A boolean value whether to include recurring costs in the cost budget. Defaults to `true`
	IncludeRecurring pulumi.BoolPtrInput `pulumi:"includeRecurring"`
	// A boolean value whether to include refunds in the cost budget. Defaults to `true`
	IncludeRefund pulumi.BoolPtrInput `pulumi:"includeRefund"`
	// A boolean value whether to include subscriptions in the cost budget. Defaults to `true`
	IncludeSubscription pulumi.BoolPtrInput `pulumi:"includeSubscription"`
	// A boolean value whether to include support costs in the cost budget. Defaults to `true`
	IncludeSupport pulumi.BoolPtrInput `pulumi:"includeSupport"`
	// A boolean value whether to include tax in the cost budget. Defaults to `true`
	IncludeTax pulumi.BoolPtrInput `pulumi:"includeTax"`
	// A boolean value whether to include upfront costs in the cost budget. Defaults to `true`
	IncludeUpfront pulumi.BoolPtrInput `pulumi:"includeUpfront"`
	// Whether a budget uses the amortized rate. Defaults to `false`
	UseAmortized pulumi.BoolPtrInput `pulumi:"useAmortized"`
	// A boolean value whether to use blended costs in the cost budget. Defaults to `false`
	UseBlended pulumi.BoolPtrInput `pulumi:"useBlended"`
}

func (BudgetCostTypesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetCostTypes)(nil)).Elem()
}

func (i BudgetCostTypesArgs) ToBudgetCostTypesOutput() BudgetCostTypesOutput {
	return i.ToBudgetCostTypesOutputWithContext(context.Background())
}

func (i BudgetCostTypesArgs) ToBudgetCostTypesOutputWithContext(ctx context.Context) BudgetCostTypesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetCostTypesOutput)
}

func (i BudgetCostTypesArgs) ToOutput(ctx context.Context) pulumix.Output[BudgetCostTypes] {
	return pulumix.Output[BudgetCostTypes]{
		OutputState: i.ToBudgetCostTypesOutputWithContext(ctx).OutputState,
	}
}

func (i BudgetCostTypesArgs) ToBudgetCostTypesPtrOutput() BudgetCostTypesPtrOutput {
	return i.ToBudgetCostTypesPtrOutputWithContext(context.Background())
}

func (i BudgetCostTypesArgs) ToBudgetCostTypesPtrOutputWithContext(ctx context.Context) BudgetCostTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetCostTypesOutput).ToBudgetCostTypesPtrOutputWithContext(ctx)
}

// BudgetCostTypesPtrInput is an input type that accepts BudgetCostTypesArgs, BudgetCostTypesPtr and BudgetCostTypesPtrOutput values.
// You can construct a concrete instance of `BudgetCostTypesPtrInput` via:
//
//	        BudgetCostTypesArgs{...}
//
//	or:
//
//	        nil
type BudgetCostTypesPtrInput interface {
	pulumi.Input

	ToBudgetCostTypesPtrOutput() BudgetCostTypesPtrOutput
	ToBudgetCostTypesPtrOutputWithContext(context.Context) BudgetCostTypesPtrOutput
}

type budgetCostTypesPtrType BudgetCostTypesArgs

func BudgetCostTypesPtr(v *BudgetCostTypesArgs) BudgetCostTypesPtrInput {
	return (*budgetCostTypesPtrType)(v)
}

func (*budgetCostTypesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetCostTypes)(nil)).Elem()
}

func (i *budgetCostTypesPtrType) ToBudgetCostTypesPtrOutput() BudgetCostTypesPtrOutput {
	return i.ToBudgetCostTypesPtrOutputWithContext(context.Background())
}

func (i *budgetCostTypesPtrType) ToBudgetCostTypesPtrOutputWithContext(ctx context.Context) BudgetCostTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetCostTypesPtrOutput)
}

func (i *budgetCostTypesPtrType) ToOutput(ctx context.Context) pulumix.Output[*BudgetCostTypes] {
	return pulumix.Output[*BudgetCostTypes]{
		OutputState: i.ToBudgetCostTypesPtrOutputWithContext(ctx).OutputState,
	}
}

type BudgetCostTypesOutput struct{ *pulumi.OutputState }

func (BudgetCostTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetCostTypes)(nil)).Elem()
}

func (o BudgetCostTypesOutput) ToBudgetCostTypesOutput() BudgetCostTypesOutput {
	return o
}

func (o BudgetCostTypesOutput) ToBudgetCostTypesOutputWithContext(ctx context.Context) BudgetCostTypesOutput {
	return o
}

func (o BudgetCostTypesOutput) ToBudgetCostTypesPtrOutput() BudgetCostTypesPtrOutput {
	return o.ToBudgetCostTypesPtrOutputWithContext(context.Background())
}

func (o BudgetCostTypesOutput) ToBudgetCostTypesPtrOutputWithContext(ctx context.Context) BudgetCostTypesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BudgetCostTypes) *BudgetCostTypes {
		return &v
	}).(BudgetCostTypesPtrOutput)
}

func (o BudgetCostTypesOutput) ToOutput(ctx context.Context) pulumix.Output[BudgetCostTypes] {
	return pulumix.Output[BudgetCostTypes]{
		OutputState: o.OutputState,
	}
}

// A boolean value whether to include credits in the cost budget. Defaults to `true`
func (o BudgetCostTypesOutput) IncludeCredit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BudgetCostTypes) *bool { return v.IncludeCredit }).(pulumi.BoolPtrOutput)
}

// Whether a budget includes discounts. Defaults to `true`
func (o BudgetCostTypesOutput) IncludeDiscount() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BudgetCostTypes) *bool { return v.IncludeDiscount }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include other subscription costs in the cost budget. Defaults to `true`
func (o BudgetCostTypesOutput) IncludeOtherSubscription() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BudgetCostTypes) *bool { return v.IncludeOtherSubscription }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include recurring costs in the cost budget. Defaults to `true`
func (o BudgetCostTypesOutput) IncludeRecurring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BudgetCostTypes) *bool { return v.IncludeRecurring }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include refunds in the cost budget. Defaults to `true`
func (o BudgetCostTypesOutput) IncludeRefund() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BudgetCostTypes) *bool { return v.IncludeRefund }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include subscriptions in the cost budget. Defaults to `true`
func (o BudgetCostTypesOutput) IncludeSubscription() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BudgetCostTypes) *bool { return v.IncludeSubscription }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include support costs in the cost budget. Defaults to `true`
func (o BudgetCostTypesOutput) IncludeSupport() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BudgetCostTypes) *bool { return v.IncludeSupport }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include tax in the cost budget. Defaults to `true`
func (o BudgetCostTypesOutput) IncludeTax() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BudgetCostTypes) *bool { return v.IncludeTax }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include upfront costs in the cost budget. Defaults to `true`
func (o BudgetCostTypesOutput) IncludeUpfront() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BudgetCostTypes) *bool { return v.IncludeUpfront }).(pulumi.BoolPtrOutput)
}

// Whether a budget uses the amortized rate. Defaults to `false`
func (o BudgetCostTypesOutput) UseAmortized() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BudgetCostTypes) *bool { return v.UseAmortized }).(pulumi.BoolPtrOutput)
}

// A boolean value whether to use blended costs in the cost budget. Defaults to `false`
func (o BudgetCostTypesOutput) UseBlended() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BudgetCostTypes) *bool { return v.UseBlended }).(pulumi.BoolPtrOutput)
}

type BudgetCostTypesPtrOutput struct{ *pulumi.OutputState }

func (BudgetCostTypesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetCostTypes)(nil)).Elem()
}

func (o BudgetCostTypesPtrOutput) ToBudgetCostTypesPtrOutput() BudgetCostTypesPtrOutput {
	return o
}

func (o BudgetCostTypesPtrOutput) ToBudgetCostTypesPtrOutputWithContext(ctx context.Context) BudgetCostTypesPtrOutput {
	return o
}

func (o BudgetCostTypesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BudgetCostTypes] {
	return pulumix.Output[*BudgetCostTypes]{
		OutputState: o.OutputState,
	}
}

func (o BudgetCostTypesPtrOutput) Elem() BudgetCostTypesOutput {
	return o.ApplyT(func(v *BudgetCostTypes) BudgetCostTypes {
		if v != nil {
			return *v
		}
		var ret BudgetCostTypes
		return ret
	}).(BudgetCostTypesOutput)
}

// A boolean value whether to include credits in the cost budget. Defaults to `true`
func (o BudgetCostTypesPtrOutput) IncludeCredit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BudgetCostTypes) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeCredit
	}).(pulumi.BoolPtrOutput)
}

// Whether a budget includes discounts. Defaults to `true`
func (o BudgetCostTypesPtrOutput) IncludeDiscount() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BudgetCostTypes) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeDiscount
	}).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include other subscription costs in the cost budget. Defaults to `true`
func (o BudgetCostTypesPtrOutput) IncludeOtherSubscription() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BudgetCostTypes) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeOtherSubscription
	}).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include recurring costs in the cost budget. Defaults to `true`
func (o BudgetCostTypesPtrOutput) IncludeRecurring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BudgetCostTypes) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeRecurring
	}).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include refunds in the cost budget. Defaults to `true`
func (o BudgetCostTypesPtrOutput) IncludeRefund() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BudgetCostTypes) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeRefund
	}).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include subscriptions in the cost budget. Defaults to `true`
func (o BudgetCostTypesPtrOutput) IncludeSubscription() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BudgetCostTypes) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeSubscription
	}).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include support costs in the cost budget. Defaults to `true`
func (o BudgetCostTypesPtrOutput) IncludeSupport() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BudgetCostTypes) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeSupport
	}).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include tax in the cost budget. Defaults to `true`
func (o BudgetCostTypesPtrOutput) IncludeTax() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BudgetCostTypes) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeTax
	}).(pulumi.BoolPtrOutput)
}

// A boolean value whether to include upfront costs in the cost budget. Defaults to `true`
func (o BudgetCostTypesPtrOutput) IncludeUpfront() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BudgetCostTypes) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeUpfront
	}).(pulumi.BoolPtrOutput)
}

// Whether a budget uses the amortized rate. Defaults to `false`
func (o BudgetCostTypesPtrOutput) UseAmortized() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BudgetCostTypes) *bool {
		if v == nil {
			return nil
		}
		return v.UseAmortized
	}).(pulumi.BoolPtrOutput)
}

// A boolean value whether to use blended costs in the cost budget. Defaults to `false`
func (o BudgetCostTypesPtrOutput) UseBlended() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BudgetCostTypes) *bool {
		if v == nil {
			return nil
		}
		return v.UseBlended
	}).(pulumi.BoolPtrOutput)
}

type BudgetNotification struct {
	// (Required) Comparison operator to use to evaluate the condition. Can be `LESS_THAN`, `EQUAL_TO` or `GREATER_THAN`.
	ComparisonOperator string `pulumi:"comparisonOperator"`
	// (Required) What kind of budget value to notify on. Can be `ACTUAL` or `FORECASTED`
	NotificationType string `pulumi:"notificationType"`
	// (Optional) E-Mail addresses to notify. Either this or `subscriberSnsTopicArns` is required.
	SubscriberEmailAddresses []string `pulumi:"subscriberEmailAddresses"`
	// (Optional) SNS topics to notify. Either this or `subscriberEmailAddresses` is required.
	SubscriberSnsTopicArns []string `pulumi:"subscriberSnsTopicArns"`
	// (Required) Threshold when the notification should be sent.
	Threshold float64 `pulumi:"threshold"`
	// (Required) What kind of threshold is defined. Can be `PERCENTAGE` OR `ABSOLUTE_VALUE`.
	ThresholdType string `pulumi:"thresholdType"`
}

// BudgetNotificationInput is an input type that accepts BudgetNotificationArgs and BudgetNotificationOutput values.
// You can construct a concrete instance of `BudgetNotificationInput` via:
//
//	BudgetNotificationArgs{...}
type BudgetNotificationInput interface {
	pulumi.Input

	ToBudgetNotificationOutput() BudgetNotificationOutput
	ToBudgetNotificationOutputWithContext(context.Context) BudgetNotificationOutput
}

type BudgetNotificationArgs struct {
	// (Required) Comparison operator to use to evaluate the condition. Can be `LESS_THAN`, `EQUAL_TO` or `GREATER_THAN`.
	ComparisonOperator pulumi.StringInput `pulumi:"comparisonOperator"`
	// (Required) What kind of budget value to notify on. Can be `ACTUAL` or `FORECASTED`
	NotificationType pulumi.StringInput `pulumi:"notificationType"`
	// (Optional) E-Mail addresses to notify. Either this or `subscriberSnsTopicArns` is required.
	SubscriberEmailAddresses pulumi.StringArrayInput `pulumi:"subscriberEmailAddresses"`
	// (Optional) SNS topics to notify. Either this or `subscriberEmailAddresses` is required.
	SubscriberSnsTopicArns pulumi.StringArrayInput `pulumi:"subscriberSnsTopicArns"`
	// (Required) Threshold when the notification should be sent.
	Threshold pulumi.Float64Input `pulumi:"threshold"`
	// (Required) What kind of threshold is defined. Can be `PERCENTAGE` OR `ABSOLUTE_VALUE`.
	ThresholdType pulumi.StringInput `pulumi:"thresholdType"`
}

func (BudgetNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetNotification)(nil)).Elem()
}

func (i BudgetNotificationArgs) ToBudgetNotificationOutput() BudgetNotificationOutput {
	return i.ToBudgetNotificationOutputWithContext(context.Background())
}

func (i BudgetNotificationArgs) ToBudgetNotificationOutputWithContext(ctx context.Context) BudgetNotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetNotificationOutput)
}

func (i BudgetNotificationArgs) ToOutput(ctx context.Context) pulumix.Output[BudgetNotification] {
	return pulumix.Output[BudgetNotification]{
		OutputState: i.ToBudgetNotificationOutputWithContext(ctx).OutputState,
	}
}

// BudgetNotificationArrayInput is an input type that accepts BudgetNotificationArray and BudgetNotificationArrayOutput values.
// You can construct a concrete instance of `BudgetNotificationArrayInput` via:
//
//	BudgetNotificationArray{ BudgetNotificationArgs{...} }
type BudgetNotificationArrayInput interface {
	pulumi.Input

	ToBudgetNotificationArrayOutput() BudgetNotificationArrayOutput
	ToBudgetNotificationArrayOutputWithContext(context.Context) BudgetNotificationArrayOutput
}

type BudgetNotificationArray []BudgetNotificationInput

func (BudgetNotificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BudgetNotification)(nil)).Elem()
}

func (i BudgetNotificationArray) ToBudgetNotificationArrayOutput() BudgetNotificationArrayOutput {
	return i.ToBudgetNotificationArrayOutputWithContext(context.Background())
}

func (i BudgetNotificationArray) ToBudgetNotificationArrayOutputWithContext(ctx context.Context) BudgetNotificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetNotificationArrayOutput)
}

func (i BudgetNotificationArray) ToOutput(ctx context.Context) pulumix.Output[[]BudgetNotification] {
	return pulumix.Output[[]BudgetNotification]{
		OutputState: i.ToBudgetNotificationArrayOutputWithContext(ctx).OutputState,
	}
}

type BudgetNotificationOutput struct{ *pulumi.OutputState }

func (BudgetNotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetNotification)(nil)).Elem()
}

func (o BudgetNotificationOutput) ToBudgetNotificationOutput() BudgetNotificationOutput {
	return o
}

func (o BudgetNotificationOutput) ToBudgetNotificationOutputWithContext(ctx context.Context) BudgetNotificationOutput {
	return o
}

func (o BudgetNotificationOutput) ToOutput(ctx context.Context) pulumix.Output[BudgetNotification] {
	return pulumix.Output[BudgetNotification]{
		OutputState: o.OutputState,
	}
}

// (Required) Comparison operator to use to evaluate the condition. Can be `LESS_THAN`, `EQUAL_TO` or `GREATER_THAN`.
func (o BudgetNotificationOutput) ComparisonOperator() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetNotification) string { return v.ComparisonOperator }).(pulumi.StringOutput)
}

// (Required) What kind of budget value to notify on. Can be `ACTUAL` or `FORECASTED`
func (o BudgetNotificationOutput) NotificationType() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetNotification) string { return v.NotificationType }).(pulumi.StringOutput)
}

// (Optional) E-Mail addresses to notify. Either this or `subscriberSnsTopicArns` is required.
func (o BudgetNotificationOutput) SubscriberEmailAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BudgetNotification) []string { return v.SubscriberEmailAddresses }).(pulumi.StringArrayOutput)
}

// (Optional) SNS topics to notify. Either this or `subscriberEmailAddresses` is required.
func (o BudgetNotificationOutput) SubscriberSnsTopicArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BudgetNotification) []string { return v.SubscriberSnsTopicArns }).(pulumi.StringArrayOutput)
}

// (Required) Threshold when the notification should be sent.
func (o BudgetNotificationOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v BudgetNotification) float64 { return v.Threshold }).(pulumi.Float64Output)
}

// (Required) What kind of threshold is defined. Can be `PERCENTAGE` OR `ABSOLUTE_VALUE`.
func (o BudgetNotificationOutput) ThresholdType() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetNotification) string { return v.ThresholdType }).(pulumi.StringOutput)
}

type BudgetNotificationArrayOutput struct{ *pulumi.OutputState }

func (BudgetNotificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BudgetNotification)(nil)).Elem()
}

func (o BudgetNotificationArrayOutput) ToBudgetNotificationArrayOutput() BudgetNotificationArrayOutput {
	return o
}

func (o BudgetNotificationArrayOutput) ToBudgetNotificationArrayOutputWithContext(ctx context.Context) BudgetNotificationArrayOutput {
	return o
}

func (o BudgetNotificationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BudgetNotification] {
	return pulumix.Output[[]BudgetNotification]{
		OutputState: o.OutputState,
	}
}

func (o BudgetNotificationArrayOutput) Index(i pulumi.IntInput) BudgetNotificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BudgetNotification {
		return vs[0].([]BudgetNotification)[vs[1].(int)]
	}).(BudgetNotificationOutput)
}

type BudgetPlannedLimit struct {
	// (Required) The amount of cost or usage being measured for a budget.
	Amount string `pulumi:"amount"`
	// (Required) The start time of the budget limit. Format: `2017-01-01_12:00`. See [PlannedBudgetLimits](https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_Budget.html#awscostmanagement-Type-budgets_Budget-PlannedBudgetLimits) documentation.
	StartTime string `pulumi:"startTime"`
	// (Required) The unit of measurement used for the budget forecast, actual spend, or budget threshold, such as dollars or GB. See [Spend](http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/data-type-spend.html) documentation.
	Unit string `pulumi:"unit"`
}

// BudgetPlannedLimitInput is an input type that accepts BudgetPlannedLimitArgs and BudgetPlannedLimitOutput values.
// You can construct a concrete instance of `BudgetPlannedLimitInput` via:
//
//	BudgetPlannedLimitArgs{...}
type BudgetPlannedLimitInput interface {
	pulumi.Input

	ToBudgetPlannedLimitOutput() BudgetPlannedLimitOutput
	ToBudgetPlannedLimitOutputWithContext(context.Context) BudgetPlannedLimitOutput
}

type BudgetPlannedLimitArgs struct {
	// (Required) The amount of cost or usage being measured for a budget.
	Amount pulumi.StringInput `pulumi:"amount"`
	// (Required) The start time of the budget limit. Format: `2017-01-01_12:00`. See [PlannedBudgetLimits](https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_Budget.html#awscostmanagement-Type-budgets_Budget-PlannedBudgetLimits) documentation.
	StartTime pulumi.StringInput `pulumi:"startTime"`
	// (Required) The unit of measurement used for the budget forecast, actual spend, or budget threshold, such as dollars or GB. See [Spend](http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/data-type-spend.html) documentation.
	Unit pulumi.StringInput `pulumi:"unit"`
}

func (BudgetPlannedLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetPlannedLimit)(nil)).Elem()
}

func (i BudgetPlannedLimitArgs) ToBudgetPlannedLimitOutput() BudgetPlannedLimitOutput {
	return i.ToBudgetPlannedLimitOutputWithContext(context.Background())
}

func (i BudgetPlannedLimitArgs) ToBudgetPlannedLimitOutputWithContext(ctx context.Context) BudgetPlannedLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetPlannedLimitOutput)
}

func (i BudgetPlannedLimitArgs) ToOutput(ctx context.Context) pulumix.Output[BudgetPlannedLimit] {
	return pulumix.Output[BudgetPlannedLimit]{
		OutputState: i.ToBudgetPlannedLimitOutputWithContext(ctx).OutputState,
	}
}

// BudgetPlannedLimitArrayInput is an input type that accepts BudgetPlannedLimitArray and BudgetPlannedLimitArrayOutput values.
// You can construct a concrete instance of `BudgetPlannedLimitArrayInput` via:
//
//	BudgetPlannedLimitArray{ BudgetPlannedLimitArgs{...} }
type BudgetPlannedLimitArrayInput interface {
	pulumi.Input

	ToBudgetPlannedLimitArrayOutput() BudgetPlannedLimitArrayOutput
	ToBudgetPlannedLimitArrayOutputWithContext(context.Context) BudgetPlannedLimitArrayOutput
}

type BudgetPlannedLimitArray []BudgetPlannedLimitInput

func (BudgetPlannedLimitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BudgetPlannedLimit)(nil)).Elem()
}

func (i BudgetPlannedLimitArray) ToBudgetPlannedLimitArrayOutput() BudgetPlannedLimitArrayOutput {
	return i.ToBudgetPlannedLimitArrayOutputWithContext(context.Background())
}

func (i BudgetPlannedLimitArray) ToBudgetPlannedLimitArrayOutputWithContext(ctx context.Context) BudgetPlannedLimitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetPlannedLimitArrayOutput)
}

func (i BudgetPlannedLimitArray) ToOutput(ctx context.Context) pulumix.Output[[]BudgetPlannedLimit] {
	return pulumix.Output[[]BudgetPlannedLimit]{
		OutputState: i.ToBudgetPlannedLimitArrayOutputWithContext(ctx).OutputState,
	}
}

type BudgetPlannedLimitOutput struct{ *pulumi.OutputState }

func (BudgetPlannedLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetPlannedLimit)(nil)).Elem()
}

func (o BudgetPlannedLimitOutput) ToBudgetPlannedLimitOutput() BudgetPlannedLimitOutput {
	return o
}

func (o BudgetPlannedLimitOutput) ToBudgetPlannedLimitOutputWithContext(ctx context.Context) BudgetPlannedLimitOutput {
	return o
}

func (o BudgetPlannedLimitOutput) ToOutput(ctx context.Context) pulumix.Output[BudgetPlannedLimit] {
	return pulumix.Output[BudgetPlannedLimit]{
		OutputState: o.OutputState,
	}
}

// (Required) The amount of cost or usage being measured for a budget.
func (o BudgetPlannedLimitOutput) Amount() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetPlannedLimit) string { return v.Amount }).(pulumi.StringOutput)
}

// (Required) The start time of the budget limit. Format: `2017-01-01_12:00`. See [PlannedBudgetLimits](https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_Budget.html#awscostmanagement-Type-budgets_Budget-PlannedBudgetLimits) documentation.
func (o BudgetPlannedLimitOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetPlannedLimit) string { return v.StartTime }).(pulumi.StringOutput)
}

// (Required) The unit of measurement used for the budget forecast, actual spend, or budget threshold, such as dollars or GB. See [Spend](http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/data-type-spend.html) documentation.
func (o BudgetPlannedLimitOutput) Unit() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetPlannedLimit) string { return v.Unit }).(pulumi.StringOutput)
}

type BudgetPlannedLimitArrayOutput struct{ *pulumi.OutputState }

func (BudgetPlannedLimitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BudgetPlannedLimit)(nil)).Elem()
}

func (o BudgetPlannedLimitArrayOutput) ToBudgetPlannedLimitArrayOutput() BudgetPlannedLimitArrayOutput {
	return o
}

func (o BudgetPlannedLimitArrayOutput) ToBudgetPlannedLimitArrayOutputWithContext(ctx context.Context) BudgetPlannedLimitArrayOutput {
	return o
}

func (o BudgetPlannedLimitArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BudgetPlannedLimit] {
	return pulumix.Output[[]BudgetPlannedLimit]{
		OutputState: o.OutputState,
	}
}

func (o BudgetPlannedLimitArrayOutput) Index(i pulumi.IntInput) BudgetPlannedLimitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BudgetPlannedLimit {
		return vs[0].([]BudgetPlannedLimit)[vs[1].(int)]
	}).(BudgetPlannedLimitOutput)
}

type GetBudgetAutoAdjustData struct {
	// (Required) - The string that defines whether your budget auto-adjusts based on historical or forecasted data. Valid values: `FORECAST`,`HISTORICAL`.
	AutoAdjustType string `pulumi:"autoAdjustType"`
	// (Optional) - Configuration block of Historical Options. Required for `autoAdjustType` of `HISTORICAL` Configuration block that defines the historical data that your auto-adjusting budget is based on.
	HistoricalOptions []GetBudgetAutoAdjustDataHistoricalOption `pulumi:"historicalOptions"`
	// (Optional) - The last time that your budget was auto-adjusted.
	LastAutoAdjustTime string `pulumi:"lastAutoAdjustTime"`
}

// GetBudgetAutoAdjustDataInput is an input type that accepts GetBudgetAutoAdjustDataArgs and GetBudgetAutoAdjustDataOutput values.
// You can construct a concrete instance of `GetBudgetAutoAdjustDataInput` via:
//
//	GetBudgetAutoAdjustDataArgs{...}
type GetBudgetAutoAdjustDataInput interface {
	pulumi.Input

	ToGetBudgetAutoAdjustDataOutput() GetBudgetAutoAdjustDataOutput
	ToGetBudgetAutoAdjustDataOutputWithContext(context.Context) GetBudgetAutoAdjustDataOutput
}

type GetBudgetAutoAdjustDataArgs struct {
	// (Required) - The string that defines whether your budget auto-adjusts based on historical or forecasted data. Valid values: `FORECAST`,`HISTORICAL`.
	AutoAdjustType pulumi.StringInput `pulumi:"autoAdjustType"`
	// (Optional) - Configuration block of Historical Options. Required for `autoAdjustType` of `HISTORICAL` Configuration block that defines the historical data that your auto-adjusting budget is based on.
	HistoricalOptions GetBudgetAutoAdjustDataHistoricalOptionArrayInput `pulumi:"historicalOptions"`
	// (Optional) - The last time that your budget was auto-adjusted.
	LastAutoAdjustTime pulumi.StringInput `pulumi:"lastAutoAdjustTime"`
}

func (GetBudgetAutoAdjustDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBudgetAutoAdjustData)(nil)).Elem()
}

func (i GetBudgetAutoAdjustDataArgs) ToGetBudgetAutoAdjustDataOutput() GetBudgetAutoAdjustDataOutput {
	return i.ToGetBudgetAutoAdjustDataOutputWithContext(context.Background())
}

func (i GetBudgetAutoAdjustDataArgs) ToGetBudgetAutoAdjustDataOutputWithContext(ctx context.Context) GetBudgetAutoAdjustDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBudgetAutoAdjustDataOutput)
}

func (i GetBudgetAutoAdjustDataArgs) ToOutput(ctx context.Context) pulumix.Output[GetBudgetAutoAdjustData] {
	return pulumix.Output[GetBudgetAutoAdjustData]{
		OutputState: i.ToGetBudgetAutoAdjustDataOutputWithContext(ctx).OutputState,
	}
}

// GetBudgetAutoAdjustDataArrayInput is an input type that accepts GetBudgetAutoAdjustDataArray and GetBudgetAutoAdjustDataArrayOutput values.
// You can construct a concrete instance of `GetBudgetAutoAdjustDataArrayInput` via:
//
//	GetBudgetAutoAdjustDataArray{ GetBudgetAutoAdjustDataArgs{...} }
type GetBudgetAutoAdjustDataArrayInput interface {
	pulumi.Input

	ToGetBudgetAutoAdjustDataArrayOutput() GetBudgetAutoAdjustDataArrayOutput
	ToGetBudgetAutoAdjustDataArrayOutputWithContext(context.Context) GetBudgetAutoAdjustDataArrayOutput
}

type GetBudgetAutoAdjustDataArray []GetBudgetAutoAdjustDataInput

func (GetBudgetAutoAdjustDataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBudgetAutoAdjustData)(nil)).Elem()
}

func (i GetBudgetAutoAdjustDataArray) ToGetBudgetAutoAdjustDataArrayOutput() GetBudgetAutoAdjustDataArrayOutput {
	return i.ToGetBudgetAutoAdjustDataArrayOutputWithContext(context.Background())
}

func (i GetBudgetAutoAdjustDataArray) ToGetBudgetAutoAdjustDataArrayOutputWithContext(ctx context.Context) GetBudgetAutoAdjustDataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBudgetAutoAdjustDataArrayOutput)
}

func (i GetBudgetAutoAdjustDataArray) ToOutput(ctx context.Context) pulumix.Output[[]GetBudgetAutoAdjustData] {
	return pulumix.Output[[]GetBudgetAutoAdjustData]{
		OutputState: i.ToGetBudgetAutoAdjustDataArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBudgetAutoAdjustDataOutput struct{ *pulumi.OutputState }

func (GetBudgetAutoAdjustDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBudgetAutoAdjustData)(nil)).Elem()
}

func (o GetBudgetAutoAdjustDataOutput) ToGetBudgetAutoAdjustDataOutput() GetBudgetAutoAdjustDataOutput {
	return o
}

func (o GetBudgetAutoAdjustDataOutput) ToGetBudgetAutoAdjustDataOutputWithContext(ctx context.Context) GetBudgetAutoAdjustDataOutput {
	return o
}

func (o GetBudgetAutoAdjustDataOutput) ToOutput(ctx context.Context) pulumix.Output[GetBudgetAutoAdjustData] {
	return pulumix.Output[GetBudgetAutoAdjustData]{
		OutputState: o.OutputState,
	}
}

// (Required) - The string that defines whether your budget auto-adjusts based on historical or forecasted data. Valid values: `FORECAST`,`HISTORICAL`.
func (o GetBudgetAutoAdjustDataOutput) AutoAdjustType() pulumi.StringOutput {
	return o.ApplyT(func(v GetBudgetAutoAdjustData) string { return v.AutoAdjustType }).(pulumi.StringOutput)
}

// (Optional) - Configuration block of Historical Options. Required for `autoAdjustType` of `HISTORICAL` Configuration block that defines the historical data that your auto-adjusting budget is based on.
func (o GetBudgetAutoAdjustDataOutput) HistoricalOptions() GetBudgetAutoAdjustDataHistoricalOptionArrayOutput {
	return o.ApplyT(func(v GetBudgetAutoAdjustData) []GetBudgetAutoAdjustDataHistoricalOption { return v.HistoricalOptions }).(GetBudgetAutoAdjustDataHistoricalOptionArrayOutput)
}

// (Optional) - The last time that your budget was auto-adjusted.
func (o GetBudgetAutoAdjustDataOutput) LastAutoAdjustTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetBudgetAutoAdjustData) string { return v.LastAutoAdjustTime }).(pulumi.StringOutput)
}

type GetBudgetAutoAdjustDataArrayOutput struct{ *pulumi.OutputState }

func (GetBudgetAutoAdjustDataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBudgetAutoAdjustData)(nil)).Elem()
}

func (o GetBudgetAutoAdjustDataArrayOutput) ToGetBudgetAutoAdjustDataArrayOutput() GetBudgetAutoAdjustDataArrayOutput {
	return o
}

func (o GetBudgetAutoAdjustDataArrayOutput) ToGetBudgetAutoAdjustDataArrayOutputWithContext(ctx context.Context) GetBudgetAutoAdjustDataArrayOutput {
	return o
}

func (o GetBudgetAutoAdjustDataArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBudgetAutoAdjustData] {
	return pulumix.Output[[]GetBudgetAutoAdjustData]{
		OutputState: o.OutputState,
	}
}

func (o GetBudgetAutoAdjustDataArrayOutput) Index(i pulumi.IntInput) GetBudgetAutoAdjustDataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBudgetAutoAdjustData {
		return vs[0].([]GetBudgetAutoAdjustData)[vs[1].(int)]
	}).(GetBudgetAutoAdjustDataOutput)
}

type GetBudgetAutoAdjustDataHistoricalOption struct {
	// (Required) - The number of budget periods included in the moving-average calculation that determines your auto-adjusted budget amount.
	BudgetAdjustmentPeriod int `pulumi:"budgetAdjustmentPeriod"`
	// (Optional) - The integer that describes how many budget periods in your BudgetAdjustmentPeriod are included in the calculation of your current budget limit. If the first budget period in your BudgetAdjustmentPeriod has no cost data, then that budget period isn’t included in the average that determines your budget limit. You can’t set your own LookBackAvailablePeriods. The value is automatically calculated from the `budgetAdjustmentPeriod` and your historical cost data.
	LookbackAvailablePeriods int `pulumi:"lookbackAvailablePeriods"`
}

// GetBudgetAutoAdjustDataHistoricalOptionInput is an input type that accepts GetBudgetAutoAdjustDataHistoricalOptionArgs and GetBudgetAutoAdjustDataHistoricalOptionOutput values.
// You can construct a concrete instance of `GetBudgetAutoAdjustDataHistoricalOptionInput` via:
//
//	GetBudgetAutoAdjustDataHistoricalOptionArgs{...}
type GetBudgetAutoAdjustDataHistoricalOptionInput interface {
	pulumi.Input

	ToGetBudgetAutoAdjustDataHistoricalOptionOutput() GetBudgetAutoAdjustDataHistoricalOptionOutput
	ToGetBudgetAutoAdjustDataHistoricalOptionOutputWithContext(context.Context) GetBudgetAutoAdjustDataHistoricalOptionOutput
}

type GetBudgetAutoAdjustDataHistoricalOptionArgs struct {
	// (Required) - The number of budget periods included in the moving-average calculation that determines your auto-adjusted budget amount.
	BudgetAdjustmentPeriod pulumi.IntInput `pulumi:"budgetAdjustmentPeriod"`
	// (Optional) - The integer that describes how many budget periods in your BudgetAdjustmentPeriod are included in the calculation of your current budget limit. If the first budget period in your BudgetAdjustmentPeriod has no cost data, then that budget period isn’t included in the average that determines your budget limit. You can’t set your own LookBackAvailablePeriods. The value is automatically calculated from the `budgetAdjustmentPeriod` and your historical cost data.
	LookbackAvailablePeriods pulumi.IntInput `pulumi:"lookbackAvailablePeriods"`
}

func (GetBudgetAutoAdjustDataHistoricalOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBudgetAutoAdjustDataHistoricalOption)(nil)).Elem()
}

func (i GetBudgetAutoAdjustDataHistoricalOptionArgs) ToGetBudgetAutoAdjustDataHistoricalOptionOutput() GetBudgetAutoAdjustDataHistoricalOptionOutput {
	return i.ToGetBudgetAutoAdjustDataHistoricalOptionOutputWithContext(context.Background())
}

func (i GetBudgetAutoAdjustDataHistoricalOptionArgs) ToGetBudgetAutoAdjustDataHistoricalOptionOutputWithContext(ctx context.Context) GetBudgetAutoAdjustDataHistoricalOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBudgetAutoAdjustDataHistoricalOptionOutput)
}

func (i GetBudgetAutoAdjustDataHistoricalOptionArgs) ToOutput(ctx context.Context) pulumix.Output[GetBudgetAutoAdjustDataHistoricalOption] {
	return pulumix.Output[GetBudgetAutoAdjustDataHistoricalOption]{
		OutputState: i.ToGetBudgetAutoAdjustDataHistoricalOptionOutputWithContext(ctx).OutputState,
	}
}

// GetBudgetAutoAdjustDataHistoricalOptionArrayInput is an input type that accepts GetBudgetAutoAdjustDataHistoricalOptionArray and GetBudgetAutoAdjustDataHistoricalOptionArrayOutput values.
// You can construct a concrete instance of `GetBudgetAutoAdjustDataHistoricalOptionArrayInput` via:
//
//	GetBudgetAutoAdjustDataHistoricalOptionArray{ GetBudgetAutoAdjustDataHistoricalOptionArgs{...} }
type GetBudgetAutoAdjustDataHistoricalOptionArrayInput interface {
	pulumi.Input

	ToGetBudgetAutoAdjustDataHistoricalOptionArrayOutput() GetBudgetAutoAdjustDataHistoricalOptionArrayOutput
	ToGetBudgetAutoAdjustDataHistoricalOptionArrayOutputWithContext(context.Context) GetBudgetAutoAdjustDataHistoricalOptionArrayOutput
}

type GetBudgetAutoAdjustDataHistoricalOptionArray []GetBudgetAutoAdjustDataHistoricalOptionInput

func (GetBudgetAutoAdjustDataHistoricalOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBudgetAutoAdjustDataHistoricalOption)(nil)).Elem()
}

func (i GetBudgetAutoAdjustDataHistoricalOptionArray) ToGetBudgetAutoAdjustDataHistoricalOptionArrayOutput() GetBudgetAutoAdjustDataHistoricalOptionArrayOutput {
	return i.ToGetBudgetAutoAdjustDataHistoricalOptionArrayOutputWithContext(context.Background())
}

func (i GetBudgetAutoAdjustDataHistoricalOptionArray) ToGetBudgetAutoAdjustDataHistoricalOptionArrayOutputWithContext(ctx context.Context) GetBudgetAutoAdjustDataHistoricalOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBudgetAutoAdjustDataHistoricalOptionArrayOutput)
}

func (i GetBudgetAutoAdjustDataHistoricalOptionArray) ToOutput(ctx context.Context) pulumix.Output[[]GetBudgetAutoAdjustDataHistoricalOption] {
	return pulumix.Output[[]GetBudgetAutoAdjustDataHistoricalOption]{
		OutputState: i.ToGetBudgetAutoAdjustDataHistoricalOptionArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBudgetAutoAdjustDataHistoricalOptionOutput struct{ *pulumi.OutputState }

func (GetBudgetAutoAdjustDataHistoricalOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBudgetAutoAdjustDataHistoricalOption)(nil)).Elem()
}

func (o GetBudgetAutoAdjustDataHistoricalOptionOutput) ToGetBudgetAutoAdjustDataHistoricalOptionOutput() GetBudgetAutoAdjustDataHistoricalOptionOutput {
	return o
}

func (o GetBudgetAutoAdjustDataHistoricalOptionOutput) ToGetBudgetAutoAdjustDataHistoricalOptionOutputWithContext(ctx context.Context) GetBudgetAutoAdjustDataHistoricalOptionOutput {
	return o
}

func (o GetBudgetAutoAdjustDataHistoricalOptionOutput) ToOutput(ctx context.Context) pulumix.Output[GetBudgetAutoAdjustDataHistoricalOption] {
	return pulumix.Output[GetBudgetAutoAdjustDataHistoricalOption]{
		OutputState: o.OutputState,
	}
}

// (Required) - The number of budget periods included in the moving-average calculation that determines your auto-adjusted budget amount.
func (o GetBudgetAutoAdjustDataHistoricalOptionOutput) BudgetAdjustmentPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v GetBudgetAutoAdjustDataHistoricalOption) int { return v.BudgetAdjustmentPeriod }).(pulumi.IntOutput)
}

// (Optional) - The integer that describes how many budget periods in your BudgetAdjustmentPeriod are included in the calculation of your current budget limit. If the first budget period in your BudgetAdjustmentPeriod has no cost data, then that budget period isn’t included in the average that determines your budget limit. You can’t set your own LookBackAvailablePeriods. The value is automatically calculated from the `budgetAdjustmentPeriod` and your historical cost data.
func (o GetBudgetAutoAdjustDataHistoricalOptionOutput) LookbackAvailablePeriods() pulumi.IntOutput {
	return o.ApplyT(func(v GetBudgetAutoAdjustDataHistoricalOption) int { return v.LookbackAvailablePeriods }).(pulumi.IntOutput)
}

type GetBudgetAutoAdjustDataHistoricalOptionArrayOutput struct{ *pulumi.OutputState }

func (GetBudgetAutoAdjustDataHistoricalOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBudgetAutoAdjustDataHistoricalOption)(nil)).Elem()
}

func (o GetBudgetAutoAdjustDataHistoricalOptionArrayOutput) ToGetBudgetAutoAdjustDataHistoricalOptionArrayOutput() GetBudgetAutoAdjustDataHistoricalOptionArrayOutput {
	return o
}

func (o GetBudgetAutoAdjustDataHistoricalOptionArrayOutput) ToGetBudgetAutoAdjustDataHistoricalOptionArrayOutputWithContext(ctx context.Context) GetBudgetAutoAdjustDataHistoricalOptionArrayOutput {
	return o
}

func (o GetBudgetAutoAdjustDataHistoricalOptionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBudgetAutoAdjustDataHistoricalOption] {
	return pulumix.Output[[]GetBudgetAutoAdjustDataHistoricalOption]{
		OutputState: o.OutputState,
	}
}

func (o GetBudgetAutoAdjustDataHistoricalOptionArrayOutput) Index(i pulumi.IntInput) GetBudgetAutoAdjustDataHistoricalOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBudgetAutoAdjustDataHistoricalOption {
		return vs[0].([]GetBudgetAutoAdjustDataHistoricalOption)[vs[1].(int)]
	}).(GetBudgetAutoAdjustDataHistoricalOptionOutput)
}

type GetBudgetBudgetLimit struct {
	// The cost or usage amount that's associated with a budget forecast, actual spend, or budget threshold. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
	Amount string `pulumi:"amount"`
	// The unit of measurement that's used for the budget forecast, actual spend, or budget threshold, such as USD or GBP. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
	Unit string `pulumi:"unit"`
}

// GetBudgetBudgetLimitInput is an input type that accepts GetBudgetBudgetLimitArgs and GetBudgetBudgetLimitOutput values.
// You can construct a concrete instance of `GetBudgetBudgetLimitInput` via:
//
//	GetBudgetBudgetLimitArgs{...}
type GetBudgetBudgetLimitInput interface {
	pulumi.Input

	ToGetBudgetBudgetLimitOutput() GetBudgetBudgetLimitOutput
	ToGetBudgetBudgetLimitOutputWithContext(context.Context) GetBudgetBudgetLimitOutput
}

type GetBudgetBudgetLimitArgs struct {
	// The cost or usage amount that's associated with a budget forecast, actual spend, or budget threshold. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
	Amount pulumi.StringInput `pulumi:"amount"`
	// The unit of measurement that's used for the budget forecast, actual spend, or budget threshold, such as USD or GBP. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
	Unit pulumi.StringInput `pulumi:"unit"`
}

func (GetBudgetBudgetLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBudgetBudgetLimit)(nil)).Elem()
}

func (i GetBudgetBudgetLimitArgs) ToGetBudgetBudgetLimitOutput() GetBudgetBudgetLimitOutput {
	return i.ToGetBudgetBudgetLimitOutputWithContext(context.Background())
}

func (i GetBudgetBudgetLimitArgs) ToGetBudgetBudgetLimitOutputWithContext(ctx context.Context) GetBudgetBudgetLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBudgetBudgetLimitOutput)
}

func (i GetBudgetBudgetLimitArgs) ToOutput(ctx context.Context) pulumix.Output[GetBudgetBudgetLimit] {
	return pulumix.Output[GetBudgetBudgetLimit]{
		OutputState: i.ToGetBudgetBudgetLimitOutputWithContext(ctx).OutputState,
	}
}

// GetBudgetBudgetLimitArrayInput is an input type that accepts GetBudgetBudgetLimitArray and GetBudgetBudgetLimitArrayOutput values.
// You can construct a concrete instance of `GetBudgetBudgetLimitArrayInput` via:
//
//	GetBudgetBudgetLimitArray{ GetBudgetBudgetLimitArgs{...} }
type GetBudgetBudgetLimitArrayInput interface {
	pulumi.Input

	ToGetBudgetBudgetLimitArrayOutput() GetBudgetBudgetLimitArrayOutput
	ToGetBudgetBudgetLimitArrayOutputWithContext(context.Context) GetBudgetBudgetLimitArrayOutput
}

type GetBudgetBudgetLimitArray []GetBudgetBudgetLimitInput

func (GetBudgetBudgetLimitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBudgetBudgetLimit)(nil)).Elem()
}

func (i GetBudgetBudgetLimitArray) ToGetBudgetBudgetLimitArrayOutput() GetBudgetBudgetLimitArrayOutput {
	return i.ToGetBudgetBudgetLimitArrayOutputWithContext(context.Background())
}

func (i GetBudgetBudgetLimitArray) ToGetBudgetBudgetLimitArrayOutputWithContext(ctx context.Context) GetBudgetBudgetLimitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBudgetBudgetLimitArrayOutput)
}

func (i GetBudgetBudgetLimitArray) ToOutput(ctx context.Context) pulumix.Output[[]GetBudgetBudgetLimit] {
	return pulumix.Output[[]GetBudgetBudgetLimit]{
		OutputState: i.ToGetBudgetBudgetLimitArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBudgetBudgetLimitOutput struct{ *pulumi.OutputState }

func (GetBudgetBudgetLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBudgetBudgetLimit)(nil)).Elem()
}

func (o GetBudgetBudgetLimitOutput) ToGetBudgetBudgetLimitOutput() GetBudgetBudgetLimitOutput {
	return o
}

func (o GetBudgetBudgetLimitOutput) ToGetBudgetBudgetLimitOutputWithContext(ctx context.Context) GetBudgetBudgetLimitOutput {
	return o
}

func (o GetBudgetBudgetLimitOutput) ToOutput(ctx context.Context) pulumix.Output[GetBudgetBudgetLimit] {
	return pulumix.Output[GetBudgetBudgetLimit]{
		OutputState: o.OutputState,
	}
}

// The cost or usage amount that's associated with a budget forecast, actual spend, or budget threshold. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
func (o GetBudgetBudgetLimitOutput) Amount() pulumi.StringOutput {
	return o.ApplyT(func(v GetBudgetBudgetLimit) string { return v.Amount }).(pulumi.StringOutput)
}

// The unit of measurement that's used for the budget forecast, actual spend, or budget threshold, such as USD or GBP. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
func (o GetBudgetBudgetLimitOutput) Unit() pulumi.StringOutput {
	return o.ApplyT(func(v GetBudgetBudgetLimit) string { return v.Unit }).(pulumi.StringOutput)
}

type GetBudgetBudgetLimitArrayOutput struct{ *pulumi.OutputState }

func (GetBudgetBudgetLimitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBudgetBudgetLimit)(nil)).Elem()
}

func (o GetBudgetBudgetLimitArrayOutput) ToGetBudgetBudgetLimitArrayOutput() GetBudgetBudgetLimitArrayOutput {
	return o
}

func (o GetBudgetBudgetLimitArrayOutput) ToGetBudgetBudgetLimitArrayOutputWithContext(ctx context.Context) GetBudgetBudgetLimitArrayOutput {
	return o
}

func (o GetBudgetBudgetLimitArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBudgetBudgetLimit] {
	return pulumix.Output[[]GetBudgetBudgetLimit]{
		OutputState: o.OutputState,
	}
}

func (o GetBudgetBudgetLimitArrayOutput) Index(i pulumi.IntInput) GetBudgetBudgetLimitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBudgetBudgetLimit {
		return vs[0].([]GetBudgetBudgetLimit)[vs[1].(int)]
	}).(GetBudgetBudgetLimitOutput)
}

type GetBudgetCalculatedSpend struct {
	ActualSpends []GetBudgetCalculatedSpendActualSpend `pulumi:"actualSpends"`
}

// GetBudgetCalculatedSpendInput is an input type that accepts GetBudgetCalculatedSpendArgs and GetBudgetCalculatedSpendOutput values.
// You can construct a concrete instance of `GetBudgetCalculatedSpendInput` via:
//
//	GetBudgetCalculatedSpendArgs{...}
type GetBudgetCalculatedSpendInput interface {
	pulumi.Input

	ToGetBudgetCalculatedSpendOutput() GetBudgetCalculatedSpendOutput
	ToGetBudgetCalculatedSpendOutputWithContext(context.Context) GetBudgetCalculatedSpendOutput
}

type GetBudgetCalculatedSpendArgs struct {
	ActualSpends GetBudgetCalculatedSpendActualSpendArrayInput `pulumi:"actualSpends"`
}

func (GetBudgetCalculatedSpendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBudgetCalculatedSpend)(nil)).Elem()
}

func (i GetBudgetCalculatedSpendArgs) ToGetBudgetCalculatedSpendOutput() GetBudgetCalculatedSpendOutput {
	return i.ToGetBudgetCalculatedSpendOutputWithContext(context.Background())
}

func (i GetBudgetCalculatedSpendArgs) ToGetBudgetCalculatedSpendOutputWithContext(ctx context.Context) GetBudgetCalculatedSpendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBudgetCalculatedSpendOutput)
}

func (i GetBudgetCalculatedSpendArgs) ToOutput(ctx context.Context) pulumix.Output[GetBudgetCalculatedSpend] {
	return pulumix.Output[GetBudgetCalculatedSpend]{
		OutputState: i.ToGetBudgetCalculatedSpendOutputWithContext(ctx).OutputState,
	}
}

// GetBudgetCalculatedSpendArrayInput is an input type that accepts GetBudgetCalculatedSpendArray and GetBudgetCalculatedSpendArrayOutput values.
// You can construct a concrete instance of `GetBudgetCalculatedSpendArrayInput` via:
//
//	GetBudgetCalculatedSpendArray{ GetBudgetCalculatedSpendArgs{...} }
type GetBudgetCalculatedSpendArrayInput interface {
	pulumi.Input

	ToGetBudgetCalculatedSpendArrayOutput() GetBudgetCalculatedSpendArrayOutput
	ToGetBudgetCalculatedSpendArrayOutputWithContext(context.Context) GetBudgetCalculatedSpendArrayOutput
}

type GetBudgetCalculatedSpendArray []GetBudgetCalculatedSpendInput

func (GetBudgetCalculatedSpendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBudgetCalculatedSpend)(nil)).Elem()
}

func (i GetBudgetCalculatedSpendArray) ToGetBudgetCalculatedSpendArrayOutput() GetBudgetCalculatedSpendArrayOutput {
	return i.ToGetBudgetCalculatedSpendArrayOutputWithContext(context.Background())
}

func (i GetBudgetCalculatedSpendArray) ToGetBudgetCalculatedSpendArrayOutputWithContext(ctx context.Context) GetBudgetCalculatedSpendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBudgetCalculatedSpendArrayOutput)
}

func (i GetBudgetCalculatedSpendArray) ToOutput(ctx context.Context) pulumix.Output[[]GetBudgetCalculatedSpend] {
	return pulumix.Output[[]GetBudgetCalculatedSpend]{
		OutputState: i.ToGetBudgetCalculatedSpendArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBudgetCalculatedSpendOutput struct{ *pulumi.OutputState }

func (GetBudgetCalculatedSpendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBudgetCalculatedSpend)(nil)).Elem()
}

func (o GetBudgetCalculatedSpendOutput) ToGetBudgetCalculatedSpendOutput() GetBudgetCalculatedSpendOutput {
	return o
}

func (o GetBudgetCalculatedSpendOutput) ToGetBudgetCalculatedSpendOutputWithContext(ctx context.Context) GetBudgetCalculatedSpendOutput {
	return o
}

func (o GetBudgetCalculatedSpendOutput) ToOutput(ctx context.Context) pulumix.Output[GetBudgetCalculatedSpend] {
	return pulumix.Output[GetBudgetCalculatedSpend]{
		OutputState: o.OutputState,
	}
}

func (o GetBudgetCalculatedSpendOutput) ActualSpends() GetBudgetCalculatedSpendActualSpendArrayOutput {
	return o.ApplyT(func(v GetBudgetCalculatedSpend) []GetBudgetCalculatedSpendActualSpend { return v.ActualSpends }).(GetBudgetCalculatedSpendActualSpendArrayOutput)
}

type GetBudgetCalculatedSpendArrayOutput struct{ *pulumi.OutputState }

func (GetBudgetCalculatedSpendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBudgetCalculatedSpend)(nil)).Elem()
}

func (o GetBudgetCalculatedSpendArrayOutput) ToGetBudgetCalculatedSpendArrayOutput() GetBudgetCalculatedSpendArrayOutput {
	return o
}

func (o GetBudgetCalculatedSpendArrayOutput) ToGetBudgetCalculatedSpendArrayOutputWithContext(ctx context.Context) GetBudgetCalculatedSpendArrayOutput {
	return o
}

func (o GetBudgetCalculatedSpendArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBudgetCalculatedSpend] {
	return pulumix.Output[[]GetBudgetCalculatedSpend]{
		OutputState: o.OutputState,
	}
}

func (o GetBudgetCalculatedSpendArrayOutput) Index(i pulumi.IntInput) GetBudgetCalculatedSpendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBudgetCalculatedSpend {
		return vs[0].([]GetBudgetCalculatedSpend)[vs[1].(int)]
	}).(GetBudgetCalculatedSpendOutput)
}

type GetBudgetCalculatedSpendActualSpend struct {
	// The cost or usage amount that's associated with a budget forecast, actual spend, or budget threshold. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
	Amount string `pulumi:"amount"`
	// The unit of measurement that's used for the budget forecast, actual spend, or budget threshold, such as USD or GBP. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
	Unit string `pulumi:"unit"`
}

// GetBudgetCalculatedSpendActualSpendInput is an input type that accepts GetBudgetCalculatedSpendActualSpendArgs and GetBudgetCalculatedSpendActualSpendOutput values.
// You can construct a concrete instance of `GetBudgetCalculatedSpendActualSpendInput` via:
//
//	GetBudgetCalculatedSpendActualSpendArgs{...}
type GetBudgetCalculatedSpendActualSpendInput interface {
	pulumi.Input

	ToGetBudgetCalculatedSpendActualSpendOutput() GetBudgetCalculatedSpendActualSpendOutput
	ToGetBudgetCalculatedSpendActualSpendOutputWithContext(context.Context) GetBudgetCalculatedSpendActualSpendOutput
}

type GetBudgetCalculatedSpendActualSpendArgs struct {
	// The cost or usage amount that's associated with a budget forecast, actual spend, or budget threshold. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
	Amount pulumi.StringInput `pulumi:"amount"`
	// The unit of measurement that's used for the budget forecast, actual spend, or budget threshold, such as USD or GBP. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
	Unit pulumi.StringInput `pulumi:"unit"`
}

func (GetBudgetCalculatedSpendActualSpendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBudgetCalculatedSpendActualSpend)(nil)).Elem()
}

func (i GetBudgetCalculatedSpendActualSpendArgs) ToGetBudgetCalculatedSpendActualSpendOutput() GetBudgetCalculatedSpendActualSpendOutput {
	return i.ToGetBudgetCalculatedSpendActualSpendOutputWithContext(context.Background())
}

func (i GetBudgetCalculatedSpendActualSpendArgs) ToGetBudgetCalculatedSpendActualSpendOutputWithContext(ctx context.Context) GetBudgetCalculatedSpendActualSpendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBudgetCalculatedSpendActualSpendOutput)
}

func (i GetBudgetCalculatedSpendActualSpendArgs) ToOutput(ctx context.Context) pulumix.Output[GetBudgetCalculatedSpendActualSpend] {
	return pulumix.Output[GetBudgetCalculatedSpendActualSpend]{
		OutputState: i.ToGetBudgetCalculatedSpendActualSpendOutputWithContext(ctx).OutputState,
	}
}

// GetBudgetCalculatedSpendActualSpendArrayInput is an input type that accepts GetBudgetCalculatedSpendActualSpendArray and GetBudgetCalculatedSpendActualSpendArrayOutput values.
// You can construct a concrete instance of `GetBudgetCalculatedSpendActualSpendArrayInput` via:
//
//	GetBudgetCalculatedSpendActualSpendArray{ GetBudgetCalculatedSpendActualSpendArgs{...} }
type GetBudgetCalculatedSpendActualSpendArrayInput interface {
	pulumi.Input

	ToGetBudgetCalculatedSpendActualSpendArrayOutput() GetBudgetCalculatedSpendActualSpendArrayOutput
	ToGetBudgetCalculatedSpendActualSpendArrayOutputWithContext(context.Context) GetBudgetCalculatedSpendActualSpendArrayOutput
}

type GetBudgetCalculatedSpendActualSpendArray []GetBudgetCalculatedSpendActualSpendInput

func (GetBudgetCalculatedSpendActualSpendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBudgetCalculatedSpendActualSpend)(nil)).Elem()
}

func (i GetBudgetCalculatedSpendActualSpendArray) ToGetBudgetCalculatedSpendActualSpendArrayOutput() GetBudgetCalculatedSpendActualSpendArrayOutput {
	return i.ToGetBudgetCalculatedSpendActualSpendArrayOutputWithContext(context.Background())
}

func (i GetBudgetCalculatedSpendActualSpendArray) ToGetBudgetCalculatedSpendActualSpendArrayOutputWithContext(ctx context.Context) GetBudgetCalculatedSpendActualSpendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBudgetCalculatedSpendActualSpendArrayOutput)
}

func (i GetBudgetCalculatedSpendActualSpendArray) ToOutput(ctx context.Context) pulumix.Output[[]GetBudgetCalculatedSpendActualSpend] {
	return pulumix.Output[[]GetBudgetCalculatedSpendActualSpend]{
		OutputState: i.ToGetBudgetCalculatedSpendActualSpendArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBudgetCalculatedSpendActualSpendOutput struct{ *pulumi.OutputState }

func (GetBudgetCalculatedSpendActualSpendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBudgetCalculatedSpendActualSpend)(nil)).Elem()
}

func (o GetBudgetCalculatedSpendActualSpendOutput) ToGetBudgetCalculatedSpendActualSpendOutput() GetBudgetCalculatedSpendActualSpendOutput {
	return o
}

func (o GetBudgetCalculatedSpendActualSpendOutput) ToGetBudgetCalculatedSpendActualSpendOutputWithContext(ctx context.Context) GetBudgetCalculatedSpendActualSpendOutput {
	return o
}

func (o GetBudgetCalculatedSpendActualSpendOutput) ToOutput(ctx context.Context) pulumix.Output[GetBudgetCalculatedSpendActualSpend] {
	return pulumix.Output[GetBudgetCalculatedSpendActualSpend]{
		OutputState: o.OutputState,
	}
}

// The cost or usage amount that's associated with a budget forecast, actual spend, or budget threshold. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
func (o GetBudgetCalculatedSpendActualSpendOutput) Amount() pulumi.StringOutput {
	return o.ApplyT(func(v GetBudgetCalculatedSpendActualSpend) string { return v.Amount }).(pulumi.StringOutput)
}

// The unit of measurement that's used for the budget forecast, actual spend, or budget threshold, such as USD or GBP. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
func (o GetBudgetCalculatedSpendActualSpendOutput) Unit() pulumi.StringOutput {
	return o.ApplyT(func(v GetBudgetCalculatedSpendActualSpend) string { return v.Unit }).(pulumi.StringOutput)
}

type GetBudgetCalculatedSpendActualSpendArrayOutput struct{ *pulumi.OutputState }

func (GetBudgetCalculatedSpendActualSpendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBudgetCalculatedSpendActualSpend)(nil)).Elem()
}

func (o GetBudgetCalculatedSpendActualSpendArrayOutput) ToGetBudgetCalculatedSpendActualSpendArrayOutput() GetBudgetCalculatedSpendActualSpendArrayOutput {
	return o
}

func (o GetBudgetCalculatedSpendActualSpendArrayOutput) ToGetBudgetCalculatedSpendActualSpendArrayOutputWithContext(ctx context.Context) GetBudgetCalculatedSpendActualSpendArrayOutput {
	return o
}

func (o GetBudgetCalculatedSpendActualSpendArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBudgetCalculatedSpendActualSpend] {
	return pulumix.Output[[]GetBudgetCalculatedSpendActualSpend]{
		OutputState: o.OutputState,
	}
}

func (o GetBudgetCalculatedSpendActualSpendArrayOutput) Index(i pulumi.IntInput) GetBudgetCalculatedSpendActualSpendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBudgetCalculatedSpendActualSpend {
		return vs[0].([]GetBudgetCalculatedSpendActualSpend)[vs[1].(int)]
	}).(GetBudgetCalculatedSpendActualSpendOutput)
}

type GetBudgetCostFilter struct {
	// The name of a budget. Unique within accounts.
	//
	// The following arguments are optional:
	Name   string   `pulumi:"name"`
	Values []string `pulumi:"values"`
}

// GetBudgetCostFilterInput is an input type that accepts GetBudgetCostFilterArgs and GetBudgetCostFilterOutput values.
// You can construct a concrete instance of `GetBudgetCostFilterInput` via:
//
//	GetBudgetCostFilterArgs{...}
type GetBudgetCostFilterInput interface {
	pulumi.Input

	ToGetBudgetCostFilterOutput() GetBudgetCostFilterOutput
	ToGetBudgetCostFilterOutputWithContext(context.Context) GetBudgetCostFilterOutput
}

type GetBudgetCostFilterArgs struct {
	// The name of a budget. Unique within accounts.
	//
	// The following arguments are optional:
	Name   pulumi.StringInput      `pulumi:"name"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetBudgetCostFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBudgetCostFilter)(nil)).Elem()
}

func (i GetBudgetCostFilterArgs) ToGetBudgetCostFilterOutput() GetBudgetCostFilterOutput {
	return i.ToGetBudgetCostFilterOutputWithContext(context.Background())
}

func (i GetBudgetCostFilterArgs) ToGetBudgetCostFilterOutputWithContext(ctx context.Context) GetBudgetCostFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBudgetCostFilterOutput)
}

func (i GetBudgetCostFilterArgs) ToOutput(ctx context.Context) pulumix.Output[GetBudgetCostFilter] {
	return pulumix.Output[GetBudgetCostFilter]{
		OutputState: i.ToGetBudgetCostFilterOutputWithContext(ctx).OutputState,
	}
}

// GetBudgetCostFilterArrayInput is an input type that accepts GetBudgetCostFilterArray and GetBudgetCostFilterArrayOutput values.
// You can construct a concrete instance of `GetBudgetCostFilterArrayInput` via:
//
//	GetBudgetCostFilterArray{ GetBudgetCostFilterArgs{...} }
type GetBudgetCostFilterArrayInput interface {
	pulumi.Input

	ToGetBudgetCostFilterArrayOutput() GetBudgetCostFilterArrayOutput
	ToGetBudgetCostFilterArrayOutputWithContext(context.Context) GetBudgetCostFilterArrayOutput
}

type GetBudgetCostFilterArray []GetBudgetCostFilterInput

func (GetBudgetCostFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBudgetCostFilter)(nil)).Elem()
}

func (i GetBudgetCostFilterArray) ToGetBudgetCostFilterArrayOutput() GetBudgetCostFilterArrayOutput {
	return i.ToGetBudgetCostFilterArrayOutputWithContext(context.Background())
}

func (i GetBudgetCostFilterArray) ToGetBudgetCostFilterArrayOutputWithContext(ctx context.Context) GetBudgetCostFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBudgetCostFilterArrayOutput)
}

func (i GetBudgetCostFilterArray) ToOutput(ctx context.Context) pulumix.Output[[]GetBudgetCostFilter] {
	return pulumix.Output[[]GetBudgetCostFilter]{
		OutputState: i.ToGetBudgetCostFilterArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBudgetCostFilterOutput struct{ *pulumi.OutputState }

func (GetBudgetCostFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBudgetCostFilter)(nil)).Elem()
}

func (o GetBudgetCostFilterOutput) ToGetBudgetCostFilterOutput() GetBudgetCostFilterOutput {
	return o
}

func (o GetBudgetCostFilterOutput) ToGetBudgetCostFilterOutputWithContext(ctx context.Context) GetBudgetCostFilterOutput {
	return o
}

func (o GetBudgetCostFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetBudgetCostFilter] {
	return pulumix.Output[GetBudgetCostFilter]{
		OutputState: o.OutputState,
	}
}

// The name of a budget. Unique within accounts.
//
// The following arguments are optional:
func (o GetBudgetCostFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetBudgetCostFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetBudgetCostFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetBudgetCostFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetBudgetCostFilterArrayOutput struct{ *pulumi.OutputState }

func (GetBudgetCostFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBudgetCostFilter)(nil)).Elem()
}

func (o GetBudgetCostFilterArrayOutput) ToGetBudgetCostFilterArrayOutput() GetBudgetCostFilterArrayOutput {
	return o
}

func (o GetBudgetCostFilterArrayOutput) ToGetBudgetCostFilterArrayOutputWithContext(ctx context.Context) GetBudgetCostFilterArrayOutput {
	return o
}

func (o GetBudgetCostFilterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBudgetCostFilter] {
	return pulumix.Output[[]GetBudgetCostFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetBudgetCostFilterArrayOutput) Index(i pulumi.IntInput) GetBudgetCostFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBudgetCostFilter {
		return vs[0].([]GetBudgetCostFilter)[vs[1].(int)]
	}).(GetBudgetCostFilterOutput)
}

type GetBudgetCostType struct {
	// A boolean value whether to include credits in the cost budget. Defaults to `true`.
	IncludeCredit bool `pulumi:"includeCredit"`
	// Whether a budget includes discounts. Defaults to `true`.
	IncludeDiscount bool `pulumi:"includeDiscount"`
	// A boolean value whether to include other subscription costs in the cost budget. Defaults to `true`.
	IncludeOtherSubscription bool `pulumi:"includeOtherSubscription"`
	// A boolean value whether to include recurring costs in the cost budget. Defaults to `true`.
	IncludeRecurring bool `pulumi:"includeRecurring"`
	// A boolean value whether to include refunds in the cost budget. Defaults to `true`.
	IncludeRefund bool `pulumi:"includeRefund"`
	// A boolean value whether to include subscriptions in the cost budget. Defaults to `true`.
	IncludeSubscription bool `pulumi:"includeSubscription"`
	// A boolean value whether to include support costs in the cost budget. Defaults to `true`.
	IncludeSupport bool `pulumi:"includeSupport"`
	// A boolean value whether to include tax in the cost budget. Defaults to `true`.
	IncludeTax bool `pulumi:"includeTax"`
	// A boolean value whether to include upfront costs in the cost budget. Defaults to `true`.
	IncludeUpfront bool `pulumi:"includeUpfront"`
	// Whether a budget uses the amortized rate. Defaults to `false`.
	UseAmortized bool `pulumi:"useAmortized"`
	// A boolean value whether to use blended costs in the cost budget. Defaults to `false`.
	UseBlended bool `pulumi:"useBlended"`
}

// GetBudgetCostTypeInput is an input type that accepts GetBudgetCostTypeArgs and GetBudgetCostTypeOutput values.
// You can construct a concrete instance of `GetBudgetCostTypeInput` via:
//
//	GetBudgetCostTypeArgs{...}
type GetBudgetCostTypeInput interface {
	pulumi.Input

	ToGetBudgetCostTypeOutput() GetBudgetCostTypeOutput
	ToGetBudgetCostTypeOutputWithContext(context.Context) GetBudgetCostTypeOutput
}

type GetBudgetCostTypeArgs struct {
	// A boolean value whether to include credits in the cost budget. Defaults to `true`.
	IncludeCredit pulumi.BoolInput `pulumi:"includeCredit"`
	// Whether a budget includes discounts. Defaults to `true`.
	IncludeDiscount pulumi.BoolInput `pulumi:"includeDiscount"`
	// A boolean value whether to include other subscription costs in the cost budget. Defaults to `true`.
	IncludeOtherSubscription pulumi.BoolInput `pulumi:"includeOtherSubscription"`
	// A boolean value whether to include recurring costs in the cost budget. Defaults to `true`.
	IncludeRecurring pulumi.BoolInput `pulumi:"includeRecurring"`
	// A boolean value whether to include refunds in the cost budget. Defaults to `true`.
	IncludeRefund pulumi.BoolInput `pulumi:"includeRefund"`
	// A boolean value whether to include subscriptions in the cost budget. Defaults to `true`.
	IncludeSubscription pulumi.BoolInput `pulumi:"includeSubscription"`
	// A boolean value whether to include support costs in the cost budget. Defaults to `true`.
	IncludeSupport pulumi.BoolInput `pulumi:"includeSupport"`
	// A boolean value whether to include tax in the cost budget. Defaults to `true`.
	IncludeTax pulumi.BoolInput `pulumi:"includeTax"`
	// A boolean value whether to include upfront costs in the cost budget. Defaults to `true`.
	IncludeUpfront pulumi.BoolInput `pulumi:"includeUpfront"`
	// Whether a budget uses the amortized rate. Defaults to `false`.
	UseAmortized pulumi.BoolInput `pulumi:"useAmortized"`
	// A boolean value whether to use blended costs in the cost budget. Defaults to `false`.
	UseBlended pulumi.BoolInput `pulumi:"useBlended"`
}

func (GetBudgetCostTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBudgetCostType)(nil)).Elem()
}

func (i GetBudgetCostTypeArgs) ToGetBudgetCostTypeOutput() GetBudgetCostTypeOutput {
	return i.ToGetBudgetCostTypeOutputWithContext(context.Background())
}

func (i GetBudgetCostTypeArgs) ToGetBudgetCostTypeOutputWithContext(ctx context.Context) GetBudgetCostTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBudgetCostTypeOutput)
}

func (i GetBudgetCostTypeArgs) ToOutput(ctx context.Context) pulumix.Output[GetBudgetCostType] {
	return pulumix.Output[GetBudgetCostType]{
		OutputState: i.ToGetBudgetCostTypeOutputWithContext(ctx).OutputState,
	}
}

// GetBudgetCostTypeArrayInput is an input type that accepts GetBudgetCostTypeArray and GetBudgetCostTypeArrayOutput values.
// You can construct a concrete instance of `GetBudgetCostTypeArrayInput` via:
//
//	GetBudgetCostTypeArray{ GetBudgetCostTypeArgs{...} }
type GetBudgetCostTypeArrayInput interface {
	pulumi.Input

	ToGetBudgetCostTypeArrayOutput() GetBudgetCostTypeArrayOutput
	ToGetBudgetCostTypeArrayOutputWithContext(context.Context) GetBudgetCostTypeArrayOutput
}

type GetBudgetCostTypeArray []GetBudgetCostTypeInput

func (GetBudgetCostTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBudgetCostType)(nil)).Elem()
}

func (i GetBudgetCostTypeArray) ToGetBudgetCostTypeArrayOutput() GetBudgetCostTypeArrayOutput {
	return i.ToGetBudgetCostTypeArrayOutputWithContext(context.Background())
}

func (i GetBudgetCostTypeArray) ToGetBudgetCostTypeArrayOutputWithContext(ctx context.Context) GetBudgetCostTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBudgetCostTypeArrayOutput)
}

func (i GetBudgetCostTypeArray) ToOutput(ctx context.Context) pulumix.Output[[]GetBudgetCostType] {
	return pulumix.Output[[]GetBudgetCostType]{
		OutputState: i.ToGetBudgetCostTypeArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBudgetCostTypeOutput struct{ *pulumi.OutputState }

func (GetBudgetCostTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBudgetCostType)(nil)).Elem()
}

func (o GetBudgetCostTypeOutput) ToGetBudgetCostTypeOutput() GetBudgetCostTypeOutput {
	return o
}

func (o GetBudgetCostTypeOutput) ToGetBudgetCostTypeOutputWithContext(ctx context.Context) GetBudgetCostTypeOutput {
	return o
}

func (o GetBudgetCostTypeOutput) ToOutput(ctx context.Context) pulumix.Output[GetBudgetCostType] {
	return pulumix.Output[GetBudgetCostType]{
		OutputState: o.OutputState,
	}
}

// A boolean value whether to include credits in the cost budget. Defaults to `true`.
func (o GetBudgetCostTypeOutput) IncludeCredit() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBudgetCostType) bool { return v.IncludeCredit }).(pulumi.BoolOutput)
}

// Whether a budget includes discounts. Defaults to `true`.
func (o GetBudgetCostTypeOutput) IncludeDiscount() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBudgetCostType) bool { return v.IncludeDiscount }).(pulumi.BoolOutput)
}

// A boolean value whether to include other subscription costs in the cost budget. Defaults to `true`.
func (o GetBudgetCostTypeOutput) IncludeOtherSubscription() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBudgetCostType) bool { return v.IncludeOtherSubscription }).(pulumi.BoolOutput)
}

// A boolean value whether to include recurring costs in the cost budget. Defaults to `true`.
func (o GetBudgetCostTypeOutput) IncludeRecurring() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBudgetCostType) bool { return v.IncludeRecurring }).(pulumi.BoolOutput)
}

// A boolean value whether to include refunds in the cost budget. Defaults to `true`.
func (o GetBudgetCostTypeOutput) IncludeRefund() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBudgetCostType) bool { return v.IncludeRefund }).(pulumi.BoolOutput)
}

// A boolean value whether to include subscriptions in the cost budget. Defaults to `true`.
func (o GetBudgetCostTypeOutput) IncludeSubscription() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBudgetCostType) bool { return v.IncludeSubscription }).(pulumi.BoolOutput)
}

// A boolean value whether to include support costs in the cost budget. Defaults to `true`.
func (o GetBudgetCostTypeOutput) IncludeSupport() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBudgetCostType) bool { return v.IncludeSupport }).(pulumi.BoolOutput)
}

// A boolean value whether to include tax in the cost budget. Defaults to `true`.
func (o GetBudgetCostTypeOutput) IncludeTax() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBudgetCostType) bool { return v.IncludeTax }).(pulumi.BoolOutput)
}

// A boolean value whether to include upfront costs in the cost budget. Defaults to `true`.
func (o GetBudgetCostTypeOutput) IncludeUpfront() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBudgetCostType) bool { return v.IncludeUpfront }).(pulumi.BoolOutput)
}

// Whether a budget uses the amortized rate. Defaults to `false`.
func (o GetBudgetCostTypeOutput) UseAmortized() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBudgetCostType) bool { return v.UseAmortized }).(pulumi.BoolOutput)
}

// A boolean value whether to use blended costs in the cost budget. Defaults to `false`.
func (o GetBudgetCostTypeOutput) UseBlended() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBudgetCostType) bool { return v.UseBlended }).(pulumi.BoolOutput)
}

type GetBudgetCostTypeArrayOutput struct{ *pulumi.OutputState }

func (GetBudgetCostTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBudgetCostType)(nil)).Elem()
}

func (o GetBudgetCostTypeArrayOutput) ToGetBudgetCostTypeArrayOutput() GetBudgetCostTypeArrayOutput {
	return o
}

func (o GetBudgetCostTypeArrayOutput) ToGetBudgetCostTypeArrayOutputWithContext(ctx context.Context) GetBudgetCostTypeArrayOutput {
	return o
}

func (o GetBudgetCostTypeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBudgetCostType] {
	return pulumix.Output[[]GetBudgetCostType]{
		OutputState: o.OutputState,
	}
}

func (o GetBudgetCostTypeArrayOutput) Index(i pulumi.IntInput) GetBudgetCostTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBudgetCostType {
		return vs[0].([]GetBudgetCostType)[vs[1].(int)]
	}).(GetBudgetCostTypeOutput)
}

type GetBudgetNotification struct {
	// (Required) Comparison operator to use to evaluate the condition. Can be `LESS_THAN`, `EQUAL_TO` or `GREATER_THAN`.
	ComparisonOperator string `pulumi:"comparisonOperator"`
	// (Required) What kind of budget value to notify on. Can be `ACTUAL` or `FORECASTED`.
	NotificationType string `pulumi:"notificationType"`
	// (Optional) E-Mail addresses to notify. Either this or `subscriberSnsTopicArns` is required.
	SubscriberEmailAddresses []string `pulumi:"subscriberEmailAddresses"`
	// (Optional) SNS topics to notify. Either this or `subscriberEmailAddresses` is required.
	SubscriberSnsTopicArns []string `pulumi:"subscriberSnsTopicArns"`
	// (Required) Threshold when the notification should be sent.
	Threshold float64 `pulumi:"threshold"`
	// (Required) What kind of threshold is defined. Can be `PERCENTAGE` OR `ABSOLUTE_VALUE`.
	ThresholdType string `pulumi:"thresholdType"`
}

// GetBudgetNotificationInput is an input type that accepts GetBudgetNotificationArgs and GetBudgetNotificationOutput values.
// You can construct a concrete instance of `GetBudgetNotificationInput` via:
//
//	GetBudgetNotificationArgs{...}
type GetBudgetNotificationInput interface {
	pulumi.Input

	ToGetBudgetNotificationOutput() GetBudgetNotificationOutput
	ToGetBudgetNotificationOutputWithContext(context.Context) GetBudgetNotificationOutput
}

type GetBudgetNotificationArgs struct {
	// (Required) Comparison operator to use to evaluate the condition. Can be `LESS_THAN`, `EQUAL_TO` or `GREATER_THAN`.
	ComparisonOperator pulumi.StringInput `pulumi:"comparisonOperator"`
	// (Required) What kind of budget value to notify on. Can be `ACTUAL` or `FORECASTED`.
	NotificationType pulumi.StringInput `pulumi:"notificationType"`
	// (Optional) E-Mail addresses to notify. Either this or `subscriberSnsTopicArns` is required.
	SubscriberEmailAddresses pulumi.StringArrayInput `pulumi:"subscriberEmailAddresses"`
	// (Optional) SNS topics to notify. Either this or `subscriberEmailAddresses` is required.
	SubscriberSnsTopicArns pulumi.StringArrayInput `pulumi:"subscriberSnsTopicArns"`
	// (Required) Threshold when the notification should be sent.
	Threshold pulumi.Float64Input `pulumi:"threshold"`
	// (Required) What kind of threshold is defined. Can be `PERCENTAGE` OR `ABSOLUTE_VALUE`.
	ThresholdType pulumi.StringInput `pulumi:"thresholdType"`
}

func (GetBudgetNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBudgetNotification)(nil)).Elem()
}

func (i GetBudgetNotificationArgs) ToGetBudgetNotificationOutput() GetBudgetNotificationOutput {
	return i.ToGetBudgetNotificationOutputWithContext(context.Background())
}

func (i GetBudgetNotificationArgs) ToGetBudgetNotificationOutputWithContext(ctx context.Context) GetBudgetNotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBudgetNotificationOutput)
}

func (i GetBudgetNotificationArgs) ToOutput(ctx context.Context) pulumix.Output[GetBudgetNotification] {
	return pulumix.Output[GetBudgetNotification]{
		OutputState: i.ToGetBudgetNotificationOutputWithContext(ctx).OutputState,
	}
}

// GetBudgetNotificationArrayInput is an input type that accepts GetBudgetNotificationArray and GetBudgetNotificationArrayOutput values.
// You can construct a concrete instance of `GetBudgetNotificationArrayInput` via:
//
//	GetBudgetNotificationArray{ GetBudgetNotificationArgs{...} }
type GetBudgetNotificationArrayInput interface {
	pulumi.Input

	ToGetBudgetNotificationArrayOutput() GetBudgetNotificationArrayOutput
	ToGetBudgetNotificationArrayOutputWithContext(context.Context) GetBudgetNotificationArrayOutput
}

type GetBudgetNotificationArray []GetBudgetNotificationInput

func (GetBudgetNotificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBudgetNotification)(nil)).Elem()
}

func (i GetBudgetNotificationArray) ToGetBudgetNotificationArrayOutput() GetBudgetNotificationArrayOutput {
	return i.ToGetBudgetNotificationArrayOutputWithContext(context.Background())
}

func (i GetBudgetNotificationArray) ToGetBudgetNotificationArrayOutputWithContext(ctx context.Context) GetBudgetNotificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBudgetNotificationArrayOutput)
}

func (i GetBudgetNotificationArray) ToOutput(ctx context.Context) pulumix.Output[[]GetBudgetNotification] {
	return pulumix.Output[[]GetBudgetNotification]{
		OutputState: i.ToGetBudgetNotificationArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBudgetNotificationOutput struct{ *pulumi.OutputState }

func (GetBudgetNotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBudgetNotification)(nil)).Elem()
}

func (o GetBudgetNotificationOutput) ToGetBudgetNotificationOutput() GetBudgetNotificationOutput {
	return o
}

func (o GetBudgetNotificationOutput) ToGetBudgetNotificationOutputWithContext(ctx context.Context) GetBudgetNotificationOutput {
	return o
}

func (o GetBudgetNotificationOutput) ToOutput(ctx context.Context) pulumix.Output[GetBudgetNotification] {
	return pulumix.Output[GetBudgetNotification]{
		OutputState: o.OutputState,
	}
}

// (Required) Comparison operator to use to evaluate the condition. Can be `LESS_THAN`, `EQUAL_TO` or `GREATER_THAN`.
func (o GetBudgetNotificationOutput) ComparisonOperator() pulumi.StringOutput {
	return o.ApplyT(func(v GetBudgetNotification) string { return v.ComparisonOperator }).(pulumi.StringOutput)
}

// (Required) What kind of budget value to notify on. Can be `ACTUAL` or `FORECASTED`.
func (o GetBudgetNotificationOutput) NotificationType() pulumi.StringOutput {
	return o.ApplyT(func(v GetBudgetNotification) string { return v.NotificationType }).(pulumi.StringOutput)
}

// (Optional) E-Mail addresses to notify. Either this or `subscriberSnsTopicArns` is required.
func (o GetBudgetNotificationOutput) SubscriberEmailAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetBudgetNotification) []string { return v.SubscriberEmailAddresses }).(pulumi.StringArrayOutput)
}

// (Optional) SNS topics to notify. Either this or `subscriberEmailAddresses` is required.
func (o GetBudgetNotificationOutput) SubscriberSnsTopicArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetBudgetNotification) []string { return v.SubscriberSnsTopicArns }).(pulumi.StringArrayOutput)
}

// (Required) Threshold when the notification should be sent.
func (o GetBudgetNotificationOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v GetBudgetNotification) float64 { return v.Threshold }).(pulumi.Float64Output)
}

// (Required) What kind of threshold is defined. Can be `PERCENTAGE` OR `ABSOLUTE_VALUE`.
func (o GetBudgetNotificationOutput) ThresholdType() pulumi.StringOutput {
	return o.ApplyT(func(v GetBudgetNotification) string { return v.ThresholdType }).(pulumi.StringOutput)
}

type GetBudgetNotificationArrayOutput struct{ *pulumi.OutputState }

func (GetBudgetNotificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBudgetNotification)(nil)).Elem()
}

func (o GetBudgetNotificationArrayOutput) ToGetBudgetNotificationArrayOutput() GetBudgetNotificationArrayOutput {
	return o
}

func (o GetBudgetNotificationArrayOutput) ToGetBudgetNotificationArrayOutputWithContext(ctx context.Context) GetBudgetNotificationArrayOutput {
	return o
}

func (o GetBudgetNotificationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBudgetNotification] {
	return pulumix.Output[[]GetBudgetNotification]{
		OutputState: o.OutputState,
	}
}

func (o GetBudgetNotificationArrayOutput) Index(i pulumi.IntInput) GetBudgetNotificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBudgetNotification {
		return vs[0].([]GetBudgetNotification)[vs[1].(int)]
	}).(GetBudgetNotificationOutput)
}

type GetBudgetPlannedLimit struct {
	// The cost or usage amount that's associated with a budget forecast, actual spend, or budget threshold. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
	Amount string `pulumi:"amount"`
	// (Required) The start time of the budget limit. Format: `2017-01-01_12:00`. See [PlannedBudgetLimits](https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_Budget.html#awscostmanagement-Type-budgets_Budget-PlannedBudgetLimits) documentation.
	StartTime string `pulumi:"startTime"`
	// The unit of measurement that's used for the budget forecast, actual spend, or budget threshold, such as USD or GBP. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
	Unit string `pulumi:"unit"`
}

// GetBudgetPlannedLimitInput is an input type that accepts GetBudgetPlannedLimitArgs and GetBudgetPlannedLimitOutput values.
// You can construct a concrete instance of `GetBudgetPlannedLimitInput` via:
//
//	GetBudgetPlannedLimitArgs{...}
type GetBudgetPlannedLimitInput interface {
	pulumi.Input

	ToGetBudgetPlannedLimitOutput() GetBudgetPlannedLimitOutput
	ToGetBudgetPlannedLimitOutputWithContext(context.Context) GetBudgetPlannedLimitOutput
}

type GetBudgetPlannedLimitArgs struct {
	// The cost or usage amount that's associated with a budget forecast, actual spend, or budget threshold. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
	Amount pulumi.StringInput `pulumi:"amount"`
	// (Required) The start time of the budget limit. Format: `2017-01-01_12:00`. See [PlannedBudgetLimits](https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_Budget.html#awscostmanagement-Type-budgets_Budget-PlannedBudgetLimits) documentation.
	StartTime pulumi.StringInput `pulumi:"startTime"`
	// The unit of measurement that's used for the budget forecast, actual spend, or budget threshold, such as USD or GBP. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
	Unit pulumi.StringInput `pulumi:"unit"`
}

func (GetBudgetPlannedLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBudgetPlannedLimit)(nil)).Elem()
}

func (i GetBudgetPlannedLimitArgs) ToGetBudgetPlannedLimitOutput() GetBudgetPlannedLimitOutput {
	return i.ToGetBudgetPlannedLimitOutputWithContext(context.Background())
}

func (i GetBudgetPlannedLimitArgs) ToGetBudgetPlannedLimitOutputWithContext(ctx context.Context) GetBudgetPlannedLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBudgetPlannedLimitOutput)
}

func (i GetBudgetPlannedLimitArgs) ToOutput(ctx context.Context) pulumix.Output[GetBudgetPlannedLimit] {
	return pulumix.Output[GetBudgetPlannedLimit]{
		OutputState: i.ToGetBudgetPlannedLimitOutputWithContext(ctx).OutputState,
	}
}

// GetBudgetPlannedLimitArrayInput is an input type that accepts GetBudgetPlannedLimitArray and GetBudgetPlannedLimitArrayOutput values.
// You can construct a concrete instance of `GetBudgetPlannedLimitArrayInput` via:
//
//	GetBudgetPlannedLimitArray{ GetBudgetPlannedLimitArgs{...} }
type GetBudgetPlannedLimitArrayInput interface {
	pulumi.Input

	ToGetBudgetPlannedLimitArrayOutput() GetBudgetPlannedLimitArrayOutput
	ToGetBudgetPlannedLimitArrayOutputWithContext(context.Context) GetBudgetPlannedLimitArrayOutput
}

type GetBudgetPlannedLimitArray []GetBudgetPlannedLimitInput

func (GetBudgetPlannedLimitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBudgetPlannedLimit)(nil)).Elem()
}

func (i GetBudgetPlannedLimitArray) ToGetBudgetPlannedLimitArrayOutput() GetBudgetPlannedLimitArrayOutput {
	return i.ToGetBudgetPlannedLimitArrayOutputWithContext(context.Background())
}

func (i GetBudgetPlannedLimitArray) ToGetBudgetPlannedLimitArrayOutputWithContext(ctx context.Context) GetBudgetPlannedLimitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBudgetPlannedLimitArrayOutput)
}

func (i GetBudgetPlannedLimitArray) ToOutput(ctx context.Context) pulumix.Output[[]GetBudgetPlannedLimit] {
	return pulumix.Output[[]GetBudgetPlannedLimit]{
		OutputState: i.ToGetBudgetPlannedLimitArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBudgetPlannedLimitOutput struct{ *pulumi.OutputState }

func (GetBudgetPlannedLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBudgetPlannedLimit)(nil)).Elem()
}

func (o GetBudgetPlannedLimitOutput) ToGetBudgetPlannedLimitOutput() GetBudgetPlannedLimitOutput {
	return o
}

func (o GetBudgetPlannedLimitOutput) ToGetBudgetPlannedLimitOutputWithContext(ctx context.Context) GetBudgetPlannedLimitOutput {
	return o
}

func (o GetBudgetPlannedLimitOutput) ToOutput(ctx context.Context) pulumix.Output[GetBudgetPlannedLimit] {
	return pulumix.Output[GetBudgetPlannedLimit]{
		OutputState: o.OutputState,
	}
}

// The cost or usage amount that's associated with a budget forecast, actual spend, or budget threshold. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
func (o GetBudgetPlannedLimitOutput) Amount() pulumi.StringOutput {
	return o.ApplyT(func(v GetBudgetPlannedLimit) string { return v.Amount }).(pulumi.StringOutput)
}

// (Required) The start time of the budget limit. Format: `2017-01-01_12:00`. See [PlannedBudgetLimits](https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_Budget.html#awscostmanagement-Type-budgets_Budget-PlannedBudgetLimits) documentation.
func (o GetBudgetPlannedLimitOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetBudgetPlannedLimit) string { return v.StartTime }).(pulumi.StringOutput)
}

// The unit of measurement that's used for the budget forecast, actual spend, or budget threshold, such as USD or GBP. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
func (o GetBudgetPlannedLimitOutput) Unit() pulumi.StringOutput {
	return o.ApplyT(func(v GetBudgetPlannedLimit) string { return v.Unit }).(pulumi.StringOutput)
}

type GetBudgetPlannedLimitArrayOutput struct{ *pulumi.OutputState }

func (GetBudgetPlannedLimitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBudgetPlannedLimit)(nil)).Elem()
}

func (o GetBudgetPlannedLimitArrayOutput) ToGetBudgetPlannedLimitArrayOutput() GetBudgetPlannedLimitArrayOutput {
	return o
}

func (o GetBudgetPlannedLimitArrayOutput) ToGetBudgetPlannedLimitArrayOutputWithContext(ctx context.Context) GetBudgetPlannedLimitArrayOutput {
	return o
}

func (o GetBudgetPlannedLimitArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBudgetPlannedLimit] {
	return pulumix.Output[[]GetBudgetPlannedLimit]{
		OutputState: o.OutputState,
	}
}

func (o GetBudgetPlannedLimitArrayOutput) Index(i pulumi.IntInput) GetBudgetPlannedLimitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBudgetPlannedLimit {
		return vs[0].([]GetBudgetPlannedLimit)[vs[1].(int)]
	}).(GetBudgetPlannedLimitOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetActionActionThresholdInput)(nil)).Elem(), BudgetActionActionThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetActionActionThresholdPtrInput)(nil)).Elem(), BudgetActionActionThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetActionDefinitionInput)(nil)).Elem(), BudgetActionDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetActionDefinitionPtrInput)(nil)).Elem(), BudgetActionDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetActionDefinitionIamActionDefinitionInput)(nil)).Elem(), BudgetActionDefinitionIamActionDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetActionDefinitionIamActionDefinitionPtrInput)(nil)).Elem(), BudgetActionDefinitionIamActionDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetActionDefinitionScpActionDefinitionInput)(nil)).Elem(), BudgetActionDefinitionScpActionDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetActionDefinitionScpActionDefinitionPtrInput)(nil)).Elem(), BudgetActionDefinitionScpActionDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetActionDefinitionSsmActionDefinitionInput)(nil)).Elem(), BudgetActionDefinitionSsmActionDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetActionDefinitionSsmActionDefinitionPtrInput)(nil)).Elem(), BudgetActionDefinitionSsmActionDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetActionSubscriberInput)(nil)).Elem(), BudgetActionSubscriberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetActionSubscriberArrayInput)(nil)).Elem(), BudgetActionSubscriberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetAutoAdjustDataInput)(nil)).Elem(), BudgetAutoAdjustDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetAutoAdjustDataPtrInput)(nil)).Elem(), BudgetAutoAdjustDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetAutoAdjustDataHistoricalOptionsInput)(nil)).Elem(), BudgetAutoAdjustDataHistoricalOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetAutoAdjustDataHistoricalOptionsPtrInput)(nil)).Elem(), BudgetAutoAdjustDataHistoricalOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetCostFilterInput)(nil)).Elem(), BudgetCostFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetCostFilterArrayInput)(nil)).Elem(), BudgetCostFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetCostTypesInput)(nil)).Elem(), BudgetCostTypesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetCostTypesPtrInput)(nil)).Elem(), BudgetCostTypesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetNotificationInput)(nil)).Elem(), BudgetNotificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetNotificationArrayInput)(nil)).Elem(), BudgetNotificationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetPlannedLimitInput)(nil)).Elem(), BudgetPlannedLimitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetPlannedLimitArrayInput)(nil)).Elem(), BudgetPlannedLimitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBudgetAutoAdjustDataInput)(nil)).Elem(), GetBudgetAutoAdjustDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBudgetAutoAdjustDataArrayInput)(nil)).Elem(), GetBudgetAutoAdjustDataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBudgetAutoAdjustDataHistoricalOptionInput)(nil)).Elem(), GetBudgetAutoAdjustDataHistoricalOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBudgetAutoAdjustDataHistoricalOptionArrayInput)(nil)).Elem(), GetBudgetAutoAdjustDataHistoricalOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBudgetBudgetLimitInput)(nil)).Elem(), GetBudgetBudgetLimitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBudgetBudgetLimitArrayInput)(nil)).Elem(), GetBudgetBudgetLimitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBudgetCalculatedSpendInput)(nil)).Elem(), GetBudgetCalculatedSpendArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBudgetCalculatedSpendArrayInput)(nil)).Elem(), GetBudgetCalculatedSpendArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBudgetCalculatedSpendActualSpendInput)(nil)).Elem(), GetBudgetCalculatedSpendActualSpendArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBudgetCalculatedSpendActualSpendArrayInput)(nil)).Elem(), GetBudgetCalculatedSpendActualSpendArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBudgetCostFilterInput)(nil)).Elem(), GetBudgetCostFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBudgetCostFilterArrayInput)(nil)).Elem(), GetBudgetCostFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBudgetCostTypeInput)(nil)).Elem(), GetBudgetCostTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBudgetCostTypeArrayInput)(nil)).Elem(), GetBudgetCostTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBudgetNotificationInput)(nil)).Elem(), GetBudgetNotificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBudgetNotificationArrayInput)(nil)).Elem(), GetBudgetNotificationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBudgetPlannedLimitInput)(nil)).Elem(), GetBudgetPlannedLimitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBudgetPlannedLimitArrayInput)(nil)).Elem(), GetBudgetPlannedLimitArray{})
	pulumi.RegisterOutputType(BudgetActionActionThresholdOutput{})
	pulumi.RegisterOutputType(BudgetActionActionThresholdPtrOutput{})
	pulumi.RegisterOutputType(BudgetActionDefinitionOutput{})
	pulumi.RegisterOutputType(BudgetActionDefinitionPtrOutput{})
	pulumi.RegisterOutputType(BudgetActionDefinitionIamActionDefinitionOutput{})
	pulumi.RegisterOutputType(BudgetActionDefinitionIamActionDefinitionPtrOutput{})
	pulumi.RegisterOutputType(BudgetActionDefinitionScpActionDefinitionOutput{})
	pulumi.RegisterOutputType(BudgetActionDefinitionScpActionDefinitionPtrOutput{})
	pulumi.RegisterOutputType(BudgetActionDefinitionSsmActionDefinitionOutput{})
	pulumi.RegisterOutputType(BudgetActionDefinitionSsmActionDefinitionPtrOutput{})
	pulumi.RegisterOutputType(BudgetActionSubscriberOutput{})
	pulumi.RegisterOutputType(BudgetActionSubscriberArrayOutput{})
	pulumi.RegisterOutputType(BudgetAutoAdjustDataOutput{})
	pulumi.RegisterOutputType(BudgetAutoAdjustDataPtrOutput{})
	pulumi.RegisterOutputType(BudgetAutoAdjustDataHistoricalOptionsOutput{})
	pulumi.RegisterOutputType(BudgetAutoAdjustDataHistoricalOptionsPtrOutput{})
	pulumi.RegisterOutputType(BudgetCostFilterOutput{})
	pulumi.RegisterOutputType(BudgetCostFilterArrayOutput{})
	pulumi.RegisterOutputType(BudgetCostTypesOutput{})
	pulumi.RegisterOutputType(BudgetCostTypesPtrOutput{})
	pulumi.RegisterOutputType(BudgetNotificationOutput{})
	pulumi.RegisterOutputType(BudgetNotificationArrayOutput{})
	pulumi.RegisterOutputType(BudgetPlannedLimitOutput{})
	pulumi.RegisterOutputType(BudgetPlannedLimitArrayOutput{})
	pulumi.RegisterOutputType(GetBudgetAutoAdjustDataOutput{})
	pulumi.RegisterOutputType(GetBudgetAutoAdjustDataArrayOutput{})
	pulumi.RegisterOutputType(GetBudgetAutoAdjustDataHistoricalOptionOutput{})
	pulumi.RegisterOutputType(GetBudgetAutoAdjustDataHistoricalOptionArrayOutput{})
	pulumi.RegisterOutputType(GetBudgetBudgetLimitOutput{})
	pulumi.RegisterOutputType(GetBudgetBudgetLimitArrayOutput{})
	pulumi.RegisterOutputType(GetBudgetCalculatedSpendOutput{})
	pulumi.RegisterOutputType(GetBudgetCalculatedSpendArrayOutput{})
	pulumi.RegisterOutputType(GetBudgetCalculatedSpendActualSpendOutput{})
	pulumi.RegisterOutputType(GetBudgetCalculatedSpendActualSpendArrayOutput{})
	pulumi.RegisterOutputType(GetBudgetCostFilterOutput{})
	pulumi.RegisterOutputType(GetBudgetCostFilterArrayOutput{})
	pulumi.RegisterOutputType(GetBudgetCostTypeOutput{})
	pulumi.RegisterOutputType(GetBudgetCostTypeArrayOutput{})
	pulumi.RegisterOutputType(GetBudgetNotificationOutput{})
	pulumi.RegisterOutputType(GetBudgetNotificationArrayOutput{})
	pulumi.RegisterOutputType(GetBudgetPlannedLimitOutput{})
	pulumi.RegisterOutputType(GetBudgetPlannedLimitArrayOutput{})
}
