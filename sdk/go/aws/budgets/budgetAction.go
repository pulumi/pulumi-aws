// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package budgets

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BudgetAction struct {
	pulumi.CustomResourceState

	AccountId        pulumi.StringOutput               `pulumi:"accountId"`
	ActionId         pulumi.StringOutput               `pulumi:"actionId"`
	ActionThreshold  BudgetActionActionThresholdOutput `pulumi:"actionThreshold"`
	ActionType       pulumi.StringOutput               `pulumi:"actionType"`
	ApprovalModel    pulumi.StringOutput               `pulumi:"approvalModel"`
	Arn              pulumi.StringOutput               `pulumi:"arn"`
	BudgetName       pulumi.StringOutput               `pulumi:"budgetName"`
	Definition       BudgetActionDefinitionOutput      `pulumi:"definition"`
	ExecutionRoleArn pulumi.StringOutput               `pulumi:"executionRoleArn"`
	NotificationType pulumi.StringOutput               `pulumi:"notificationType"`
	Status           pulumi.StringOutput               `pulumi:"status"`
	Subscribers      BudgetActionSubscriberArrayOutput `pulumi:"subscribers"`
}

// NewBudgetAction registers a new resource with the given unique name, arguments, and options.
func NewBudgetAction(ctx *pulumi.Context,
	name string, args *BudgetActionArgs, opts ...pulumi.ResourceOption) (*BudgetAction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ActionThreshold == nil {
		return nil, errors.New("invalid value for required argument 'ActionThreshold'")
	}
	if args.ActionType == nil {
		return nil, errors.New("invalid value for required argument 'ActionType'")
	}
	if args.ApprovalModel == nil {
		return nil, errors.New("invalid value for required argument 'ApprovalModel'")
	}
	if args.BudgetName == nil {
		return nil, errors.New("invalid value for required argument 'BudgetName'")
	}
	if args.Definition == nil {
		return nil, errors.New("invalid value for required argument 'Definition'")
	}
	if args.ExecutionRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'ExecutionRoleArn'")
	}
	if args.NotificationType == nil {
		return nil, errors.New("invalid value for required argument 'NotificationType'")
	}
	if args.Subscribers == nil {
		return nil, errors.New("invalid value for required argument 'Subscribers'")
	}
	var resource BudgetAction
	err := ctx.RegisterResource("aws:budgets/budgetAction:BudgetAction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBudgetAction gets an existing BudgetAction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBudgetAction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BudgetActionState, opts ...pulumi.ResourceOption) (*BudgetAction, error) {
	var resource BudgetAction
	err := ctx.ReadResource("aws:budgets/budgetAction:BudgetAction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BudgetAction resources.
type budgetActionState struct {
	AccountId        *string                      `pulumi:"accountId"`
	ActionId         *string                      `pulumi:"actionId"`
	ActionThreshold  *BudgetActionActionThreshold `pulumi:"actionThreshold"`
	ActionType       *string                      `pulumi:"actionType"`
	ApprovalModel    *string                      `pulumi:"approvalModel"`
	Arn              *string                      `pulumi:"arn"`
	BudgetName       *string                      `pulumi:"budgetName"`
	Definition       *BudgetActionDefinition      `pulumi:"definition"`
	ExecutionRoleArn *string                      `pulumi:"executionRoleArn"`
	NotificationType *string                      `pulumi:"notificationType"`
	Status           *string                      `pulumi:"status"`
	Subscribers      []BudgetActionSubscriber     `pulumi:"subscribers"`
}

type BudgetActionState struct {
	AccountId        pulumi.StringPtrInput
	ActionId         pulumi.StringPtrInput
	ActionThreshold  BudgetActionActionThresholdPtrInput
	ActionType       pulumi.StringPtrInput
	ApprovalModel    pulumi.StringPtrInput
	Arn              pulumi.StringPtrInput
	BudgetName       pulumi.StringPtrInput
	Definition       BudgetActionDefinitionPtrInput
	ExecutionRoleArn pulumi.StringPtrInput
	NotificationType pulumi.StringPtrInput
	Status           pulumi.StringPtrInput
	Subscribers      BudgetActionSubscriberArrayInput
}

func (BudgetActionState) ElementType() reflect.Type {
	return reflect.TypeOf((*budgetActionState)(nil)).Elem()
}

type budgetActionArgs struct {
	AccountId        *string                     `pulumi:"accountId"`
	ActionThreshold  BudgetActionActionThreshold `pulumi:"actionThreshold"`
	ActionType       string                      `pulumi:"actionType"`
	ApprovalModel    string                      `pulumi:"approvalModel"`
	BudgetName       string                      `pulumi:"budgetName"`
	Definition       BudgetActionDefinition      `pulumi:"definition"`
	ExecutionRoleArn string                      `pulumi:"executionRoleArn"`
	NotificationType string                      `pulumi:"notificationType"`
	Subscribers      []BudgetActionSubscriber    `pulumi:"subscribers"`
}

// The set of arguments for constructing a BudgetAction resource.
type BudgetActionArgs struct {
	AccountId        pulumi.StringPtrInput
	ActionThreshold  BudgetActionActionThresholdInput
	ActionType       pulumi.StringInput
	ApprovalModel    pulumi.StringInput
	BudgetName       pulumi.StringInput
	Definition       BudgetActionDefinitionInput
	ExecutionRoleArn pulumi.StringInput
	NotificationType pulumi.StringInput
	Subscribers      BudgetActionSubscriberArrayInput
}

func (BudgetActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*budgetActionArgs)(nil)).Elem()
}

type BudgetActionInput interface {
	pulumi.Input

	ToBudgetActionOutput() BudgetActionOutput
	ToBudgetActionOutputWithContext(ctx context.Context) BudgetActionOutput
}

func (*BudgetAction) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetAction)(nil)).Elem()
}

func (i *BudgetAction) ToBudgetActionOutput() BudgetActionOutput {
	return i.ToBudgetActionOutputWithContext(context.Background())
}

func (i *BudgetAction) ToBudgetActionOutputWithContext(ctx context.Context) BudgetActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetActionOutput)
}

// BudgetActionArrayInput is an input type that accepts BudgetActionArray and BudgetActionArrayOutput values.
// You can construct a concrete instance of `BudgetActionArrayInput` via:
//
//	BudgetActionArray{ BudgetActionArgs{...} }
type BudgetActionArrayInput interface {
	pulumi.Input

	ToBudgetActionArrayOutput() BudgetActionArrayOutput
	ToBudgetActionArrayOutputWithContext(context.Context) BudgetActionArrayOutput
}

type BudgetActionArray []BudgetActionInput

func (BudgetActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BudgetAction)(nil)).Elem()
}

func (i BudgetActionArray) ToBudgetActionArrayOutput() BudgetActionArrayOutput {
	return i.ToBudgetActionArrayOutputWithContext(context.Background())
}

func (i BudgetActionArray) ToBudgetActionArrayOutputWithContext(ctx context.Context) BudgetActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetActionArrayOutput)
}

// BudgetActionMapInput is an input type that accepts BudgetActionMap and BudgetActionMapOutput values.
// You can construct a concrete instance of `BudgetActionMapInput` via:
//
//	BudgetActionMap{ "key": BudgetActionArgs{...} }
type BudgetActionMapInput interface {
	pulumi.Input

	ToBudgetActionMapOutput() BudgetActionMapOutput
	ToBudgetActionMapOutputWithContext(context.Context) BudgetActionMapOutput
}

type BudgetActionMap map[string]BudgetActionInput

func (BudgetActionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BudgetAction)(nil)).Elem()
}

func (i BudgetActionMap) ToBudgetActionMapOutput() BudgetActionMapOutput {
	return i.ToBudgetActionMapOutputWithContext(context.Background())
}

func (i BudgetActionMap) ToBudgetActionMapOutputWithContext(ctx context.Context) BudgetActionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetActionMapOutput)
}

type BudgetActionOutput struct{ *pulumi.OutputState }

func (BudgetActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetAction)(nil)).Elem()
}

func (o BudgetActionOutput) ToBudgetActionOutput() BudgetActionOutput {
	return o
}

func (o BudgetActionOutput) ToBudgetActionOutputWithContext(ctx context.Context) BudgetActionOutput {
	return o
}

func (o BudgetActionOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *BudgetAction) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

func (o BudgetActionOutput) ActionId() pulumi.StringOutput {
	return o.ApplyT(func(v *BudgetAction) pulumi.StringOutput { return v.ActionId }).(pulumi.StringOutput)
}

func (o BudgetActionOutput) ActionThreshold() BudgetActionActionThresholdOutput {
	return o.ApplyT(func(v *BudgetAction) BudgetActionActionThresholdOutput { return v.ActionThreshold }).(BudgetActionActionThresholdOutput)
}

func (o BudgetActionOutput) ActionType() pulumi.StringOutput {
	return o.ApplyT(func(v *BudgetAction) pulumi.StringOutput { return v.ActionType }).(pulumi.StringOutput)
}

func (o BudgetActionOutput) ApprovalModel() pulumi.StringOutput {
	return o.ApplyT(func(v *BudgetAction) pulumi.StringOutput { return v.ApprovalModel }).(pulumi.StringOutput)
}

func (o BudgetActionOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *BudgetAction) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o BudgetActionOutput) BudgetName() pulumi.StringOutput {
	return o.ApplyT(func(v *BudgetAction) pulumi.StringOutput { return v.BudgetName }).(pulumi.StringOutput)
}

func (o BudgetActionOutput) Definition() BudgetActionDefinitionOutput {
	return o.ApplyT(func(v *BudgetAction) BudgetActionDefinitionOutput { return v.Definition }).(BudgetActionDefinitionOutput)
}

func (o BudgetActionOutput) ExecutionRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *BudgetAction) pulumi.StringOutput { return v.ExecutionRoleArn }).(pulumi.StringOutput)
}

func (o BudgetActionOutput) NotificationType() pulumi.StringOutput {
	return o.ApplyT(func(v *BudgetAction) pulumi.StringOutput { return v.NotificationType }).(pulumi.StringOutput)
}

func (o BudgetActionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *BudgetAction) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o BudgetActionOutput) Subscribers() BudgetActionSubscriberArrayOutput {
	return o.ApplyT(func(v *BudgetAction) BudgetActionSubscriberArrayOutput { return v.Subscribers }).(BudgetActionSubscriberArrayOutput)
}

type BudgetActionArrayOutput struct{ *pulumi.OutputState }

func (BudgetActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BudgetAction)(nil)).Elem()
}

func (o BudgetActionArrayOutput) ToBudgetActionArrayOutput() BudgetActionArrayOutput {
	return o
}

func (o BudgetActionArrayOutput) ToBudgetActionArrayOutputWithContext(ctx context.Context) BudgetActionArrayOutput {
	return o
}

func (o BudgetActionArrayOutput) Index(i pulumi.IntInput) BudgetActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BudgetAction {
		return vs[0].([]*BudgetAction)[vs[1].(int)]
	}).(BudgetActionOutput)
}

type BudgetActionMapOutput struct{ *pulumi.OutputState }

func (BudgetActionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BudgetAction)(nil)).Elem()
}

func (o BudgetActionMapOutput) ToBudgetActionMapOutput() BudgetActionMapOutput {
	return o
}

func (o BudgetActionMapOutput) ToBudgetActionMapOutputWithContext(ctx context.Context) BudgetActionMapOutput {
	return o
}

func (o BudgetActionMapOutput) MapIndex(k pulumi.StringInput) BudgetActionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BudgetAction {
		return vs[0].(map[string]*BudgetAction)[vs[1].(string)]
	}).(BudgetActionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetActionInput)(nil)).Elem(), &BudgetAction{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetActionArrayInput)(nil)).Elem(), BudgetActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetActionMapInput)(nil)).Elem(), BudgetActionMap{})
	pulumi.RegisterOutputType(BudgetActionOutput{})
	pulumi.RegisterOutputType(BudgetActionArrayOutput{})
	pulumi.RegisterOutputType(BudgetActionMapOutput{})
}
