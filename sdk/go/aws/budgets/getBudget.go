// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package budgets

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for managing an AWS Web Services Budgets Budget.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/budgets"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := budgets.LookupBudget(ctx, &budgets.LookupBudgetArgs{
//				Name: aws_budgets_budget.Test.Name,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupBudget(ctx *pulumi.Context, args *LookupBudgetArgs, opts ...pulumi.InvokeOption) (*LookupBudgetResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupBudgetResult
	err := ctx.Invoke("aws:budgets/getBudget:getBudget", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBudget.
type LookupBudgetArgs struct {
	// The ID of the target account for budget. Will use current user's accountId by default if omitted.
	AccountId *string `pulumi:"accountId"`
	// The name of a budget. Unique within accounts.
	//
	// The following arguments are optional:
	Name string `pulumi:"name"`
	// The prefix of the name of a budget. Unique within accounts.
	NamePrefix *string `pulumi:"namePrefix"`
}

// A collection of values returned by getBudget.
type LookupBudgetResult struct {
	AccountId string `pulumi:"accountId"`
	Arn       string `pulumi:"arn"`
	// Object containing [AutoAdjustData] which determines the budget amount for an auto-adjusting budget.
	AutoAdjustDatas []GetBudgetAutoAdjustData `pulumi:"autoAdjustDatas"`
	// Boolean indicating whether this budget has been exceeded.
	BudgetExceeded bool `pulumi:"budgetExceeded"`
	// The total amount of cost, usage, RI utilization, RI coverage, Savings Plans utilization, or Savings Plans coverage that you want to track with your budget. Contains object Spend.
	BudgetLimits []GetBudgetBudgetLimit `pulumi:"budgetLimits"`
	// Whether this budget tracks monetary cost or usage.
	BudgetType string `pulumi:"budgetType"`
	// The spend objects that are associated with this budget. The actualSpend tracks how much you've used, cost, usage, RI units, or Savings Plans units and the forecastedSpend tracks how much that you're predicted to spend based on your historical usage profile.
	CalculatedSpends []GetBudgetCalculatedSpend `pulumi:"calculatedSpends"`
	// A list of CostFilter name/values pair to apply to budget.
	CostFilters []GetBudgetCostFilter `pulumi:"costFilters"`
	// Object containing CostTypes The types of cost included in a budget, such as tax and subscriptions.
	CostTypes []GetBudgetCostType `pulumi:"costTypes"`
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	Name       string  `pulumi:"name"`
	NamePrefix *string `pulumi:"namePrefix"`
	// Object containing Budget Notifications. Can be used multiple times to define more than one budget notification.
	Notifications []GetBudgetNotification `pulumi:"notifications"`
	// Object containing Planned Budget Limits. Can be used multiple times to plan more than one budget limit. See [PlannedBudgetLimits](https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_Budget.html#awscostmanagement-Type-budgets_Budget-PlannedBudgetLimits) documentation.
	PlannedLimits []GetBudgetPlannedLimit `pulumi:"plannedLimits"`
	// The end of the time period covered by the budget. There are no restrictions on the end date. Format: `2017-01-01_12:00`.
	TimePeriodEnd string `pulumi:"timePeriodEnd"`
	// The start of the time period covered by the budget. If you don't specify a start date, AWS defaults to the start of your chosen time period. The start date must come before the end date. Format: `2017-01-01_12:00`.
	TimePeriodStart string `pulumi:"timePeriodStart"`
	// The length of time until a budget resets the actual and forecasted spend. Valid values: `MONTHLY`, `QUARTERLY`, `ANNUALLY`, and `DAILY`.
	TimeUnit string `pulumi:"timeUnit"`
}

func LookupBudgetOutput(ctx *pulumi.Context, args LookupBudgetOutputArgs, opts ...pulumi.InvokeOption) LookupBudgetResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupBudgetResult, error) {
			args := v.(LookupBudgetArgs)
			r, err := LookupBudget(ctx, &args, opts...)
			var s LookupBudgetResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupBudgetResultOutput)
}

// A collection of arguments for invoking getBudget.
type LookupBudgetOutputArgs struct {
	// The ID of the target account for budget. Will use current user's accountId by default if omitted.
	AccountId pulumi.StringPtrInput `pulumi:"accountId"`
	// The name of a budget. Unique within accounts.
	//
	// The following arguments are optional:
	Name pulumi.StringInput `pulumi:"name"`
	// The prefix of the name of a budget. Unique within accounts.
	NamePrefix pulumi.StringPtrInput `pulumi:"namePrefix"`
}

func (LookupBudgetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBudgetArgs)(nil)).Elem()
}

// A collection of values returned by getBudget.
type LookupBudgetResultOutput struct{ *pulumi.OutputState }

func (LookupBudgetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBudgetResult)(nil)).Elem()
}

func (o LookupBudgetResultOutput) ToLookupBudgetResultOutput() LookupBudgetResultOutput {
	return o
}

func (o LookupBudgetResultOutput) ToLookupBudgetResultOutputWithContext(ctx context.Context) LookupBudgetResultOutput {
	return o
}

func (o LookupBudgetResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBudgetResult) string { return v.AccountId }).(pulumi.StringOutput)
}

func (o LookupBudgetResultOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBudgetResult) string { return v.Arn }).(pulumi.StringOutput)
}

// Object containing [AutoAdjustData] which determines the budget amount for an auto-adjusting budget.
func (o LookupBudgetResultOutput) AutoAdjustDatas() GetBudgetAutoAdjustDataArrayOutput {
	return o.ApplyT(func(v LookupBudgetResult) []GetBudgetAutoAdjustData { return v.AutoAdjustDatas }).(GetBudgetAutoAdjustDataArrayOutput)
}

// Boolean indicating whether this budget has been exceeded.
func (o LookupBudgetResultOutput) BudgetExceeded() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBudgetResult) bool { return v.BudgetExceeded }).(pulumi.BoolOutput)
}

// The total amount of cost, usage, RI utilization, RI coverage, Savings Plans utilization, or Savings Plans coverage that you want to track with your budget. Contains object Spend.
func (o LookupBudgetResultOutput) BudgetLimits() GetBudgetBudgetLimitArrayOutput {
	return o.ApplyT(func(v LookupBudgetResult) []GetBudgetBudgetLimit { return v.BudgetLimits }).(GetBudgetBudgetLimitArrayOutput)
}

// Whether this budget tracks monetary cost or usage.
func (o LookupBudgetResultOutput) BudgetType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBudgetResult) string { return v.BudgetType }).(pulumi.StringOutput)
}

// The spend objects that are associated with this budget. The actualSpend tracks how much you've used, cost, usage, RI units, or Savings Plans units and the forecastedSpend tracks how much that you're predicted to spend based on your historical usage profile.
func (o LookupBudgetResultOutput) CalculatedSpends() GetBudgetCalculatedSpendArrayOutput {
	return o.ApplyT(func(v LookupBudgetResult) []GetBudgetCalculatedSpend { return v.CalculatedSpends }).(GetBudgetCalculatedSpendArrayOutput)
}

// A list of CostFilter name/values pair to apply to budget.
func (o LookupBudgetResultOutput) CostFilters() GetBudgetCostFilterArrayOutput {
	return o.ApplyT(func(v LookupBudgetResult) []GetBudgetCostFilter { return v.CostFilters }).(GetBudgetCostFilterArrayOutput)
}

// Object containing CostTypes The types of cost included in a budget, such as tax and subscriptions.
func (o LookupBudgetResultOutput) CostTypes() GetBudgetCostTypeArrayOutput {
	return o.ApplyT(func(v LookupBudgetResult) []GetBudgetCostType { return v.CostTypes }).(GetBudgetCostTypeArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupBudgetResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBudgetResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupBudgetResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBudgetResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupBudgetResultOutput) NamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupBudgetResult) *string { return v.NamePrefix }).(pulumi.StringPtrOutput)
}

// Object containing Budget Notifications. Can be used multiple times to define more than one budget notification.
func (o LookupBudgetResultOutput) Notifications() GetBudgetNotificationArrayOutput {
	return o.ApplyT(func(v LookupBudgetResult) []GetBudgetNotification { return v.Notifications }).(GetBudgetNotificationArrayOutput)
}

// Object containing Planned Budget Limits. Can be used multiple times to plan more than one budget limit. See [PlannedBudgetLimits](https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_Budget.html#awscostmanagement-Type-budgets_Budget-PlannedBudgetLimits) documentation.
func (o LookupBudgetResultOutput) PlannedLimits() GetBudgetPlannedLimitArrayOutput {
	return o.ApplyT(func(v LookupBudgetResult) []GetBudgetPlannedLimit { return v.PlannedLimits }).(GetBudgetPlannedLimitArrayOutput)
}

// The end of the time period covered by the budget. There are no restrictions on the end date. Format: `2017-01-01_12:00`.
func (o LookupBudgetResultOutput) TimePeriodEnd() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBudgetResult) string { return v.TimePeriodEnd }).(pulumi.StringOutput)
}

// The start of the time period covered by the budget. If you don't specify a start date, AWS defaults to the start of your chosen time period. The start date must come before the end date. Format: `2017-01-01_12:00`.
func (o LookupBudgetResultOutput) TimePeriodStart() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBudgetResult) string { return v.TimePeriodStart }).(pulumi.StringOutput)
}

// The length of time until a budget resets the actual and forecasted spend. Valid values: `MONTHLY`, `QUARTERLY`, `ANNUALLY`, and `DAILY`.
func (o LookupBudgetResultOutput) TimeUnit() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBudgetResult) string { return v.TimeUnit }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupBudgetResultOutput{})
}
