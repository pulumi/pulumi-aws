// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package medialive

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Input struct {
	pulumi.CustomResourceState

	Arn                 pulumi.StringOutput              `pulumi:"arn"`
	AttachedChannels    pulumi.StringArrayOutput         `pulumi:"attachedChannels"`
	Destinations        InputDestinationArrayOutput      `pulumi:"destinations"`
	InputClass          pulumi.StringOutput              `pulumi:"inputClass"`
	InputDevices        InputInputDeviceArrayOutput      `pulumi:"inputDevices"`
	InputPartnerIds     pulumi.StringArrayOutput         `pulumi:"inputPartnerIds"`
	InputSecurityGroups pulumi.StringArrayOutput         `pulumi:"inputSecurityGroups"`
	InputSourceType     pulumi.StringOutput              `pulumi:"inputSourceType"`
	MediaConnectFlows   InputMediaConnectFlowArrayOutput `pulumi:"mediaConnectFlows"`
	Name                pulumi.StringOutput              `pulumi:"name"`
	RoleArn             pulumi.StringOutput              `pulumi:"roleArn"`
	Sources             InputSourceArrayOutput           `pulumi:"sources"`
	Tags                pulumi.StringMapOutput           `pulumi:"tags"`
	TagsAll             pulumi.StringMapOutput           `pulumi:"tagsAll"`
	Type                pulumi.StringOutput              `pulumi:"type"`
	Vpc                 InputVpcPtrOutput                `pulumi:"vpc"`
}

// NewInput registers a new resource with the given unique name, arguments, and options.
func NewInput(ctx *pulumi.Context,
	name string, args *InputArgs, opts ...pulumi.ResourceOption) (*Input, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource Input
	err := ctx.RegisterResource("aws:medialive/input:Input", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInput gets an existing Input resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInput(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InputState, opts ...pulumi.ResourceOption) (*Input, error) {
	var resource Input
	err := ctx.ReadResource("aws:medialive/input:Input", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Input resources.
type inputState struct {
	Arn                 *string                 `pulumi:"arn"`
	AttachedChannels    []string                `pulumi:"attachedChannels"`
	Destinations        []InputDestination      `pulumi:"destinations"`
	InputClass          *string                 `pulumi:"inputClass"`
	InputDevices        []InputInputDevice      `pulumi:"inputDevices"`
	InputPartnerIds     []string                `pulumi:"inputPartnerIds"`
	InputSecurityGroups []string                `pulumi:"inputSecurityGroups"`
	InputSourceType     *string                 `pulumi:"inputSourceType"`
	MediaConnectFlows   []InputMediaConnectFlow `pulumi:"mediaConnectFlows"`
	Name                *string                 `pulumi:"name"`
	RoleArn             *string                 `pulumi:"roleArn"`
	Sources             []InputSource           `pulumi:"sources"`
	Tags                map[string]string       `pulumi:"tags"`
	TagsAll             map[string]string       `pulumi:"tagsAll"`
	Type                *string                 `pulumi:"type"`
	Vpc                 *InputVpc               `pulumi:"vpc"`
}

type InputState struct {
	Arn                 pulumi.StringPtrInput
	AttachedChannels    pulumi.StringArrayInput
	Destinations        InputDestinationArrayInput
	InputClass          pulumi.StringPtrInput
	InputDevices        InputInputDeviceArrayInput
	InputPartnerIds     pulumi.StringArrayInput
	InputSecurityGroups pulumi.StringArrayInput
	InputSourceType     pulumi.StringPtrInput
	MediaConnectFlows   InputMediaConnectFlowArrayInput
	Name                pulumi.StringPtrInput
	RoleArn             pulumi.StringPtrInput
	Sources             InputSourceArrayInput
	Tags                pulumi.StringMapInput
	TagsAll             pulumi.StringMapInput
	Type                pulumi.StringPtrInput
	Vpc                 InputVpcPtrInput
}

func (InputState) ElementType() reflect.Type {
	return reflect.TypeOf((*inputState)(nil)).Elem()
}

type inputArgs struct {
	Destinations        []InputDestination      `pulumi:"destinations"`
	InputDevices        []InputInputDevice      `pulumi:"inputDevices"`
	InputSecurityGroups []string                `pulumi:"inputSecurityGroups"`
	MediaConnectFlows   []InputMediaConnectFlow `pulumi:"mediaConnectFlows"`
	Name                *string                 `pulumi:"name"`
	RoleArn             *string                 `pulumi:"roleArn"`
	Sources             []InputSource           `pulumi:"sources"`
	Tags                map[string]string       `pulumi:"tags"`
	Type                string                  `pulumi:"type"`
	Vpc                 *InputVpc               `pulumi:"vpc"`
}

// The set of arguments for constructing a Input resource.
type InputArgs struct {
	Destinations        InputDestinationArrayInput
	InputDevices        InputInputDeviceArrayInput
	InputSecurityGroups pulumi.StringArrayInput
	MediaConnectFlows   InputMediaConnectFlowArrayInput
	Name                pulumi.StringPtrInput
	RoleArn             pulumi.StringPtrInput
	Sources             InputSourceArrayInput
	Tags                pulumi.StringMapInput
	Type                pulumi.StringInput
	Vpc                 InputVpcPtrInput
}

func (InputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*inputArgs)(nil)).Elem()
}

type InputInput interface {
	pulumi.Input

	ToInputOutput() InputOutput
	ToInputOutputWithContext(ctx context.Context) InputOutput
}

func (*Input) ElementType() reflect.Type {
	return reflect.TypeOf((**Input)(nil)).Elem()
}

func (i *Input) ToInputOutput() InputOutput {
	return i.ToInputOutputWithContext(context.Background())
}

func (i *Input) ToInputOutputWithContext(ctx context.Context) InputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputOutput)
}

// InputArrayInput is an input type that accepts InputArray and InputArrayOutput values.
// You can construct a concrete instance of `InputArrayInput` via:
//
//	InputArray{ InputArgs{...} }
type InputArrayInput interface {
	pulumi.Input

	ToInputArrayOutput() InputArrayOutput
	ToInputArrayOutputWithContext(context.Context) InputArrayOutput
}

type InputArray []InputInput

func (InputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Input)(nil)).Elem()
}

func (i InputArray) ToInputArrayOutput() InputArrayOutput {
	return i.ToInputArrayOutputWithContext(context.Background())
}

func (i InputArray) ToInputArrayOutputWithContext(ctx context.Context) InputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputArrayOutput)
}

// InputMapInput is an input type that accepts InputMap and InputMapOutput values.
// You can construct a concrete instance of `InputMapInput` via:
//
//	InputMap{ "key": InputArgs{...} }
type InputMapInput interface {
	pulumi.Input

	ToInputMapOutput() InputMapOutput
	ToInputMapOutputWithContext(context.Context) InputMapOutput
}

type InputMap map[string]InputInput

func (InputMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Input)(nil)).Elem()
}

func (i InputMap) ToInputMapOutput() InputMapOutput {
	return i.ToInputMapOutputWithContext(context.Background())
}

func (i InputMap) ToInputMapOutputWithContext(ctx context.Context) InputMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputMapOutput)
}

type InputOutput struct{ *pulumi.OutputState }

func (InputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Input)(nil)).Elem()
}

func (o InputOutput) ToInputOutput() InputOutput {
	return o
}

func (o InputOutput) ToInputOutputWithContext(ctx context.Context) InputOutput {
	return o
}

func (o InputOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Input) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o InputOutput) AttachedChannels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Input) pulumi.StringArrayOutput { return v.AttachedChannels }).(pulumi.StringArrayOutput)
}

func (o InputOutput) Destinations() InputDestinationArrayOutput {
	return o.ApplyT(func(v *Input) InputDestinationArrayOutput { return v.Destinations }).(InputDestinationArrayOutput)
}

func (o InputOutput) InputClass() pulumi.StringOutput {
	return o.ApplyT(func(v *Input) pulumi.StringOutput { return v.InputClass }).(pulumi.StringOutput)
}

func (o InputOutput) InputDevices() InputInputDeviceArrayOutput {
	return o.ApplyT(func(v *Input) InputInputDeviceArrayOutput { return v.InputDevices }).(InputInputDeviceArrayOutput)
}

func (o InputOutput) InputPartnerIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Input) pulumi.StringArrayOutput { return v.InputPartnerIds }).(pulumi.StringArrayOutput)
}

func (o InputOutput) InputSecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Input) pulumi.StringArrayOutput { return v.InputSecurityGroups }).(pulumi.StringArrayOutput)
}

func (o InputOutput) InputSourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Input) pulumi.StringOutput { return v.InputSourceType }).(pulumi.StringOutput)
}

func (o InputOutput) MediaConnectFlows() InputMediaConnectFlowArrayOutput {
	return o.ApplyT(func(v *Input) InputMediaConnectFlowArrayOutput { return v.MediaConnectFlows }).(InputMediaConnectFlowArrayOutput)
}

func (o InputOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Input) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o InputOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Input) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

func (o InputOutput) Sources() InputSourceArrayOutput {
	return o.ApplyT(func(v *Input) InputSourceArrayOutput { return v.Sources }).(InputSourceArrayOutput)
}

func (o InputOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Input) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o InputOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Input) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o InputOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Input) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o InputOutput) Vpc() InputVpcPtrOutput {
	return o.ApplyT(func(v *Input) InputVpcPtrOutput { return v.Vpc }).(InputVpcPtrOutput)
}

type InputArrayOutput struct{ *pulumi.OutputState }

func (InputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Input)(nil)).Elem()
}

func (o InputArrayOutput) ToInputArrayOutput() InputArrayOutput {
	return o
}

func (o InputArrayOutput) ToInputArrayOutputWithContext(ctx context.Context) InputArrayOutput {
	return o
}

func (o InputArrayOutput) Index(i pulumi.IntInput) InputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Input {
		return vs[0].([]*Input)[vs[1].(int)]
	}).(InputOutput)
}

type InputMapOutput struct{ *pulumi.OutputState }

func (InputMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Input)(nil)).Elem()
}

func (o InputMapOutput) ToInputMapOutput() InputMapOutput {
	return o
}

func (o InputMapOutput) ToInputMapOutputWithContext(ctx context.Context) InputMapOutput {
	return o
}

func (o InputMapOutput) MapIndex(k pulumi.StringInput) InputOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Input {
		return vs[0].(map[string]*Input)[vs[1].(string)]
	}).(InputOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InputInput)(nil)).Elem(), &Input{})
	pulumi.RegisterInputType(reflect.TypeOf((*InputArrayInput)(nil)).Elem(), InputArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InputMapInput)(nil)).Elem(), InputMap{})
	pulumi.RegisterOutputType(InputOutput{})
	pulumi.RegisterOutputType(InputArrayOutput{})
	pulumi.RegisterOutputType(InputMapOutput{})
}
