// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package medialive

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Multiplex struct {
	pulumi.CustomResourceState

	Arn               pulumi.StringOutput                 `pulumi:"arn"`
	AvailabilityZones pulumi.StringArrayOutput            `pulumi:"availabilityZones"`
	MultiplexSettings MultiplexMultiplexSettingsPtrOutput `pulumi:"multiplexSettings"`
	Name              pulumi.StringOutput                 `pulumi:"name"`
	StartMultiplex    pulumi.BoolPtrOutput                `pulumi:"startMultiplex"`
	Tags              pulumi.StringMapOutput              `pulumi:"tags"`
	TagsAll           pulumi.StringMapOutput              `pulumi:"tagsAll"`
}

// NewMultiplex registers a new resource with the given unique name, arguments, and options.
func NewMultiplex(ctx *pulumi.Context,
	name string, args *MultiplexArgs, opts ...pulumi.ResourceOption) (*Multiplex, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailabilityZones == nil {
		return nil, errors.New("invalid value for required argument 'AvailabilityZones'")
	}
	var resource Multiplex
	err := ctx.RegisterResource("aws:medialive/multiplex:Multiplex", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMultiplex gets an existing Multiplex resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMultiplex(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MultiplexState, opts ...pulumi.ResourceOption) (*Multiplex, error) {
	var resource Multiplex
	err := ctx.ReadResource("aws:medialive/multiplex:Multiplex", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Multiplex resources.
type multiplexState struct {
	Arn               *string                     `pulumi:"arn"`
	AvailabilityZones []string                    `pulumi:"availabilityZones"`
	MultiplexSettings *MultiplexMultiplexSettings `pulumi:"multiplexSettings"`
	Name              *string                     `pulumi:"name"`
	StartMultiplex    *bool                       `pulumi:"startMultiplex"`
	Tags              map[string]string           `pulumi:"tags"`
	TagsAll           map[string]string           `pulumi:"tagsAll"`
}

type MultiplexState struct {
	Arn               pulumi.StringPtrInput
	AvailabilityZones pulumi.StringArrayInput
	MultiplexSettings MultiplexMultiplexSettingsPtrInput
	Name              pulumi.StringPtrInput
	StartMultiplex    pulumi.BoolPtrInput
	Tags              pulumi.StringMapInput
	TagsAll           pulumi.StringMapInput
}

func (MultiplexState) ElementType() reflect.Type {
	return reflect.TypeOf((*multiplexState)(nil)).Elem()
}

type multiplexArgs struct {
	AvailabilityZones []string                    `pulumi:"availabilityZones"`
	MultiplexSettings *MultiplexMultiplexSettings `pulumi:"multiplexSettings"`
	Name              *string                     `pulumi:"name"`
	StartMultiplex    *bool                       `pulumi:"startMultiplex"`
	Tags              map[string]string           `pulumi:"tags"`
}

// The set of arguments for constructing a Multiplex resource.
type MultiplexArgs struct {
	AvailabilityZones pulumi.StringArrayInput
	MultiplexSettings MultiplexMultiplexSettingsPtrInput
	Name              pulumi.StringPtrInput
	StartMultiplex    pulumi.BoolPtrInput
	Tags              pulumi.StringMapInput
}

func (MultiplexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*multiplexArgs)(nil)).Elem()
}

type MultiplexInput interface {
	pulumi.Input

	ToMultiplexOutput() MultiplexOutput
	ToMultiplexOutputWithContext(ctx context.Context) MultiplexOutput
}

func (*Multiplex) ElementType() reflect.Type {
	return reflect.TypeOf((**Multiplex)(nil)).Elem()
}

func (i *Multiplex) ToMultiplexOutput() MultiplexOutput {
	return i.ToMultiplexOutputWithContext(context.Background())
}

func (i *Multiplex) ToMultiplexOutputWithContext(ctx context.Context) MultiplexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiplexOutput)
}

// MultiplexArrayInput is an input type that accepts MultiplexArray and MultiplexArrayOutput values.
// You can construct a concrete instance of `MultiplexArrayInput` via:
//
//	MultiplexArray{ MultiplexArgs{...} }
type MultiplexArrayInput interface {
	pulumi.Input

	ToMultiplexArrayOutput() MultiplexArrayOutput
	ToMultiplexArrayOutputWithContext(context.Context) MultiplexArrayOutput
}

type MultiplexArray []MultiplexInput

func (MultiplexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Multiplex)(nil)).Elem()
}

func (i MultiplexArray) ToMultiplexArrayOutput() MultiplexArrayOutput {
	return i.ToMultiplexArrayOutputWithContext(context.Background())
}

func (i MultiplexArray) ToMultiplexArrayOutputWithContext(ctx context.Context) MultiplexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiplexArrayOutput)
}

// MultiplexMapInput is an input type that accepts MultiplexMap and MultiplexMapOutput values.
// You can construct a concrete instance of `MultiplexMapInput` via:
//
//	MultiplexMap{ "key": MultiplexArgs{...} }
type MultiplexMapInput interface {
	pulumi.Input

	ToMultiplexMapOutput() MultiplexMapOutput
	ToMultiplexMapOutputWithContext(context.Context) MultiplexMapOutput
}

type MultiplexMap map[string]MultiplexInput

func (MultiplexMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Multiplex)(nil)).Elem()
}

func (i MultiplexMap) ToMultiplexMapOutput() MultiplexMapOutput {
	return i.ToMultiplexMapOutputWithContext(context.Background())
}

func (i MultiplexMap) ToMultiplexMapOutputWithContext(ctx context.Context) MultiplexMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiplexMapOutput)
}

type MultiplexOutput struct{ *pulumi.OutputState }

func (MultiplexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Multiplex)(nil)).Elem()
}

func (o MultiplexOutput) ToMultiplexOutput() MultiplexOutput {
	return o
}

func (o MultiplexOutput) ToMultiplexOutputWithContext(ctx context.Context) MultiplexOutput {
	return o
}

func (o MultiplexOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Multiplex) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o MultiplexOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Multiplex) pulumi.StringArrayOutput { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

func (o MultiplexOutput) MultiplexSettings() MultiplexMultiplexSettingsPtrOutput {
	return o.ApplyT(func(v *Multiplex) MultiplexMultiplexSettingsPtrOutput { return v.MultiplexSettings }).(MultiplexMultiplexSettingsPtrOutput)
}

func (o MultiplexOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Multiplex) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o MultiplexOutput) StartMultiplex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Multiplex) pulumi.BoolPtrOutput { return v.StartMultiplex }).(pulumi.BoolPtrOutput)
}

func (o MultiplexOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Multiplex) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o MultiplexOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Multiplex) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type MultiplexArrayOutput struct{ *pulumi.OutputState }

func (MultiplexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Multiplex)(nil)).Elem()
}

func (o MultiplexArrayOutput) ToMultiplexArrayOutput() MultiplexArrayOutput {
	return o
}

func (o MultiplexArrayOutput) ToMultiplexArrayOutputWithContext(ctx context.Context) MultiplexArrayOutput {
	return o
}

func (o MultiplexArrayOutput) Index(i pulumi.IntInput) MultiplexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Multiplex {
		return vs[0].([]*Multiplex)[vs[1].(int)]
	}).(MultiplexOutput)
}

type MultiplexMapOutput struct{ *pulumi.OutputState }

func (MultiplexMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Multiplex)(nil)).Elem()
}

func (o MultiplexMapOutput) ToMultiplexMapOutput() MultiplexMapOutput {
	return o
}

func (o MultiplexMapOutput) ToMultiplexMapOutputWithContext(ctx context.Context) MultiplexMapOutput {
	return o
}

func (o MultiplexMapOutput) MapIndex(k pulumi.StringInput) MultiplexOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Multiplex {
		return vs[0].(map[string]*Multiplex)[vs[1].(string)]
	}).(MultiplexOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MultiplexInput)(nil)).Elem(), &Multiplex{})
	pulumi.RegisterInputType(reflect.TypeOf((*MultiplexArrayInput)(nil)).Elem(), MultiplexArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MultiplexMapInput)(nil)).Elem(), MultiplexMap{})
	pulumi.RegisterOutputType(MultiplexOutput{})
	pulumi.RegisterOutputType(MultiplexArrayOutput{})
	pulumi.RegisterOutputType(MultiplexMapOutput{})
}
