// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package medialive

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS MediaLive MultiplexProgram.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/medialive"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			available, err := aws.GetAvailabilityZones(ctx, &aws.GetAvailabilityZonesArgs{
//				State: pulumi.StringRef("available"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleMultiplex, err := medialive.NewMultiplex(ctx, "exampleMultiplex", &medialive.MultiplexArgs{
//				AvailabilityZones: pulumi.StringArray{
//					*pulumi.String(available.Names[0]),
//					*pulumi.String(available.Names[1]),
//				},
//				MultiplexSettings: &medialive.MultiplexMultiplexSettingsArgs{
//					TransportStreamBitrate:              pulumi.Int(1000000),
//					TransportStreamId:                   pulumi.Int(1),
//					TransportStreamReservedBitrate:      pulumi.Int(1),
//					MaximumVideoBufferDelayMilliseconds: pulumi.Int(1000),
//				},
//				StartMultiplex: pulumi.Bool(true),
//				Tags: pulumi.StringMap{
//					"tag1": pulumi.String("value1"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = medialive.NewMultiplexProgram(ctx, "exampleMultiplexProgram", &medialive.MultiplexProgramArgs{
//				ProgramName: pulumi.String("example_program"),
//				MultiplexId: exampleMultiplex.ID(),
//				MultiplexProgramSettings: &medialive.MultiplexProgramMultiplexProgramSettingsArgs{
//					ProgramNumber:            pulumi.Int(1),
//					PreferredChannelPipeline: pulumi.String("CURRENTLY_ACTIVE"),
//					VideoSettings: &medialive.MultiplexProgramMultiplexProgramSettingsVideoSettingsArgs{
//						ConstantBitrate: pulumi.Int(100000),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import MediaLive MultiplexProgram using the `id`, or a combination of "`program_name`/`multiplex_id`". For example:
//
// ```sh
//
//	$ pulumi import aws:medialive/multiplexProgram:MultiplexProgram example example_program/1234567
//
// ```
type MultiplexProgram struct {
	pulumi.CustomResourceState

	// Multiplex ID.
	MultiplexId pulumi.StringOutput `pulumi:"multiplexId"`
	// MultiplexProgram settings. See Multiplex Program Settings for more details.
	//
	// The following arguments are optional:
	MultiplexProgramSettings MultiplexProgramMultiplexProgramSettingsPtrOutput `pulumi:"multiplexProgramSettings"`
	// Unique program name.
	ProgramName pulumi.StringOutput `pulumi:"programName"`
}

// NewMultiplexProgram registers a new resource with the given unique name, arguments, and options.
func NewMultiplexProgram(ctx *pulumi.Context,
	name string, args *MultiplexProgramArgs, opts ...pulumi.ResourceOption) (*MultiplexProgram, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MultiplexId == nil {
		return nil, errors.New("invalid value for required argument 'MultiplexId'")
	}
	if args.ProgramName == nil {
		return nil, errors.New("invalid value for required argument 'ProgramName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MultiplexProgram
	err := ctx.RegisterResource("aws:medialive/multiplexProgram:MultiplexProgram", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMultiplexProgram gets an existing MultiplexProgram resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMultiplexProgram(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MultiplexProgramState, opts ...pulumi.ResourceOption) (*MultiplexProgram, error) {
	var resource MultiplexProgram
	err := ctx.ReadResource("aws:medialive/multiplexProgram:MultiplexProgram", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MultiplexProgram resources.
type multiplexProgramState struct {
	// Multiplex ID.
	MultiplexId *string `pulumi:"multiplexId"`
	// MultiplexProgram settings. See Multiplex Program Settings for more details.
	//
	// The following arguments are optional:
	MultiplexProgramSettings *MultiplexProgramMultiplexProgramSettings `pulumi:"multiplexProgramSettings"`
	// Unique program name.
	ProgramName *string `pulumi:"programName"`
}

type MultiplexProgramState struct {
	// Multiplex ID.
	MultiplexId pulumi.StringPtrInput
	// MultiplexProgram settings. See Multiplex Program Settings for more details.
	//
	// The following arguments are optional:
	MultiplexProgramSettings MultiplexProgramMultiplexProgramSettingsPtrInput
	// Unique program name.
	ProgramName pulumi.StringPtrInput
}

func (MultiplexProgramState) ElementType() reflect.Type {
	return reflect.TypeOf((*multiplexProgramState)(nil)).Elem()
}

type multiplexProgramArgs struct {
	// Multiplex ID.
	MultiplexId string `pulumi:"multiplexId"`
	// MultiplexProgram settings. See Multiplex Program Settings for more details.
	//
	// The following arguments are optional:
	MultiplexProgramSettings *MultiplexProgramMultiplexProgramSettings `pulumi:"multiplexProgramSettings"`
	// Unique program name.
	ProgramName string `pulumi:"programName"`
}

// The set of arguments for constructing a MultiplexProgram resource.
type MultiplexProgramArgs struct {
	// Multiplex ID.
	MultiplexId pulumi.StringInput
	// MultiplexProgram settings. See Multiplex Program Settings for more details.
	//
	// The following arguments are optional:
	MultiplexProgramSettings MultiplexProgramMultiplexProgramSettingsPtrInput
	// Unique program name.
	ProgramName pulumi.StringInput
}

func (MultiplexProgramArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*multiplexProgramArgs)(nil)).Elem()
}

type MultiplexProgramInput interface {
	pulumi.Input

	ToMultiplexProgramOutput() MultiplexProgramOutput
	ToMultiplexProgramOutputWithContext(ctx context.Context) MultiplexProgramOutput
}

func (*MultiplexProgram) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiplexProgram)(nil)).Elem()
}

func (i *MultiplexProgram) ToMultiplexProgramOutput() MultiplexProgramOutput {
	return i.ToMultiplexProgramOutputWithContext(context.Background())
}

func (i *MultiplexProgram) ToMultiplexProgramOutputWithContext(ctx context.Context) MultiplexProgramOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiplexProgramOutput)
}

// MultiplexProgramArrayInput is an input type that accepts MultiplexProgramArray and MultiplexProgramArrayOutput values.
// You can construct a concrete instance of `MultiplexProgramArrayInput` via:
//
//	MultiplexProgramArray{ MultiplexProgramArgs{...} }
type MultiplexProgramArrayInput interface {
	pulumi.Input

	ToMultiplexProgramArrayOutput() MultiplexProgramArrayOutput
	ToMultiplexProgramArrayOutputWithContext(context.Context) MultiplexProgramArrayOutput
}

type MultiplexProgramArray []MultiplexProgramInput

func (MultiplexProgramArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MultiplexProgram)(nil)).Elem()
}

func (i MultiplexProgramArray) ToMultiplexProgramArrayOutput() MultiplexProgramArrayOutput {
	return i.ToMultiplexProgramArrayOutputWithContext(context.Background())
}

func (i MultiplexProgramArray) ToMultiplexProgramArrayOutputWithContext(ctx context.Context) MultiplexProgramArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiplexProgramArrayOutput)
}

// MultiplexProgramMapInput is an input type that accepts MultiplexProgramMap and MultiplexProgramMapOutput values.
// You can construct a concrete instance of `MultiplexProgramMapInput` via:
//
//	MultiplexProgramMap{ "key": MultiplexProgramArgs{...} }
type MultiplexProgramMapInput interface {
	pulumi.Input

	ToMultiplexProgramMapOutput() MultiplexProgramMapOutput
	ToMultiplexProgramMapOutputWithContext(context.Context) MultiplexProgramMapOutput
}

type MultiplexProgramMap map[string]MultiplexProgramInput

func (MultiplexProgramMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MultiplexProgram)(nil)).Elem()
}

func (i MultiplexProgramMap) ToMultiplexProgramMapOutput() MultiplexProgramMapOutput {
	return i.ToMultiplexProgramMapOutputWithContext(context.Background())
}

func (i MultiplexProgramMap) ToMultiplexProgramMapOutputWithContext(ctx context.Context) MultiplexProgramMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiplexProgramMapOutput)
}

type MultiplexProgramOutput struct{ *pulumi.OutputState }

func (MultiplexProgramOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiplexProgram)(nil)).Elem()
}

func (o MultiplexProgramOutput) ToMultiplexProgramOutput() MultiplexProgramOutput {
	return o
}

func (o MultiplexProgramOutput) ToMultiplexProgramOutputWithContext(ctx context.Context) MultiplexProgramOutput {
	return o
}

// Multiplex ID.
func (o MultiplexProgramOutput) MultiplexId() pulumi.StringOutput {
	return o.ApplyT(func(v *MultiplexProgram) pulumi.StringOutput { return v.MultiplexId }).(pulumi.StringOutput)
}

// MultiplexProgram settings. See Multiplex Program Settings for more details.
//
// The following arguments are optional:
func (o MultiplexProgramOutput) MultiplexProgramSettings() MultiplexProgramMultiplexProgramSettingsPtrOutput {
	return o.ApplyT(func(v *MultiplexProgram) MultiplexProgramMultiplexProgramSettingsPtrOutput {
		return v.MultiplexProgramSettings
	}).(MultiplexProgramMultiplexProgramSettingsPtrOutput)
}

// Unique program name.
func (o MultiplexProgramOutput) ProgramName() pulumi.StringOutput {
	return o.ApplyT(func(v *MultiplexProgram) pulumi.StringOutput { return v.ProgramName }).(pulumi.StringOutput)
}

type MultiplexProgramArrayOutput struct{ *pulumi.OutputState }

func (MultiplexProgramArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MultiplexProgram)(nil)).Elem()
}

func (o MultiplexProgramArrayOutput) ToMultiplexProgramArrayOutput() MultiplexProgramArrayOutput {
	return o
}

func (o MultiplexProgramArrayOutput) ToMultiplexProgramArrayOutputWithContext(ctx context.Context) MultiplexProgramArrayOutput {
	return o
}

func (o MultiplexProgramArrayOutput) Index(i pulumi.IntInput) MultiplexProgramOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MultiplexProgram {
		return vs[0].([]*MultiplexProgram)[vs[1].(int)]
	}).(MultiplexProgramOutput)
}

type MultiplexProgramMapOutput struct{ *pulumi.OutputState }

func (MultiplexProgramMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MultiplexProgram)(nil)).Elem()
}

func (o MultiplexProgramMapOutput) ToMultiplexProgramMapOutput() MultiplexProgramMapOutput {
	return o
}

func (o MultiplexProgramMapOutput) ToMultiplexProgramMapOutputWithContext(ctx context.Context) MultiplexProgramMapOutput {
	return o
}

func (o MultiplexProgramMapOutput) MapIndex(k pulumi.StringInput) MultiplexProgramOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MultiplexProgram {
		return vs[0].(map[string]*MultiplexProgram)[vs[1].(string)]
	}).(MultiplexProgramOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MultiplexProgramInput)(nil)).Elem(), &MultiplexProgram{})
	pulumi.RegisterInputType(reflect.TypeOf((*MultiplexProgramArrayInput)(nil)).Elem(), MultiplexProgramArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MultiplexProgramMapInput)(nil)).Elem(), MultiplexProgramMap{})
	pulumi.RegisterOutputType(MultiplexProgramOutput{})
	pulumi.RegisterOutputType(MultiplexProgramArrayOutput{})
	pulumi.RegisterOutputType(MultiplexProgramMapOutput{})
}
