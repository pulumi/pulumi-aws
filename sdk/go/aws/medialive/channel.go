// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package medialive

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS MediaLive Channel.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/medialive"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := medialive.NewChannel(ctx, "example", &medialive.ChannelArgs{
//				ChannelClass: pulumi.String("STANDARD"),
//				RoleArn:      pulumi.Any(aws_iam_role.Example.Arn),
//				InputSpecification: &medialive.ChannelInputSpecificationArgs{
//					Codec:           pulumi.String("AVC"),
//					InputResolution: pulumi.String("HD"),
//					MaximumBitrate:  pulumi.String("MAX_20_MBPS"),
//				},
//				InputAttachments: medialive.ChannelInputAttachmentArray{
//					&medialive.ChannelInputAttachmentArgs{
//						InputAttachmentName: pulumi.String("example-input"),
//						InputId:             pulumi.Any(aws_medialive_input.Example.Id),
//					},
//				},
//				Destinations: medialive.ChannelDestinationArray{
//					&medialive.ChannelDestinationArgs{
//						Id: pulumi.String("destination"),
//						Settings: medialive.ChannelDestinationSettingArray{
//							&medialive.ChannelDestinationSettingArgs{
//								Url: pulumi.String(fmt.Sprintf("s3://%v/test1", aws_s3_bucket.Main.Id)),
//							},
//							&medialive.ChannelDestinationSettingArgs{
//								Url: pulumi.String(fmt.Sprintf("s3://%v/test2", aws_s3_bucket.Main2.Id)),
//							},
//						},
//					},
//				},
//				EncoderSettings: &medialive.ChannelEncoderSettingsArgs{
//					TimecodeConfig: &medialive.ChannelEncoderSettingsTimecodeConfigArgs{
//						Source: pulumi.String("EMBEDDED"),
//					},
//					AudioDescriptions: medialive.ChannelEncoderSettingsAudioDescriptionArray{
//						&medialive.ChannelEncoderSettingsAudioDescriptionArgs{
//							AudioSelectorName: pulumi.String("example audio selector"),
//							Name:              pulumi.String("audio-selector"),
//						},
//					},
//					VideoDescriptions: medialive.ChannelEncoderSettingsVideoDescriptionArray{
//						&medialive.ChannelEncoderSettingsVideoDescriptionArgs{
//							Name: pulumi.String("example-video"),
//						},
//					},
//					OutputGroups: medialive.ChannelEncoderSettingsOutputGroupArray{
//						&medialive.ChannelEncoderSettingsOutputGroupArgs{
//							OutputGroupSettings: &medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsArgs{
//								ArchiveGroupSettings: medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArray{
//									&medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArgs{
//										Destination: &medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestinationArgs{
//											DestinationRefId: pulumi.String("destination"),
//										},
//									},
//								},
//							},
//							Outputs: medialive.ChannelEncoderSettingsOutputGroupOutputTypeArray{
//								&medialive.ChannelEncoderSettingsOutputGroupOutputTypeArgs{
//									OutputName:           pulumi.String("example-name"),
//									VideoDescriptionName: pulumi.String("example-video"),
//									AudioDescriptionNames: pulumi.StringArray{
//										pulumi.String("audio-selector"),
//									},
//									OutputSettings: &medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsArgs{
//										ArchiveOutputSettings: &medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsArgs{
//											NameModifier: pulumi.String("_1"),
//											Extension:    pulumi.String("m2ts"),
//											ContainerSettings: &medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsArgs{
//												M2tsSettings: &medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsArgs{
//													AudioBufferModel: pulumi.String("ATSC"),
//													BufferModel:      pulumi.String("MULTIPLEX"),
//													RateMode:         pulumi.String("CBR"),
//												},
//											},
//										},
//									},
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// terraform import {
//
//	to = aws_medialive_channel.example
//
//	id = "1234567" } Using `pulumi import`, import MediaLive Channel using the `channel_id`. For exampleconsole % pulumi import aws_medialive_channel.example 1234567
type Channel struct {
	pulumi.CustomResourceState

	// ARN of the Channel.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Specification of CDI inputs for this channel. See CDI Input Specification for more details.
	CdiInputSpecification ChannelCdiInputSpecificationPtrOutput `pulumi:"cdiInputSpecification"`
	// Concise argument description.
	ChannelClass pulumi.StringOutput `pulumi:"channelClass"`
	// ID of the channel in MediaPackage that is the destination for this output group.
	ChannelId pulumi.StringOutput `pulumi:"channelId"`
	// Destinations for channel. See Destinations for more details.
	Destinations ChannelDestinationArrayOutput `pulumi:"destinations"`
	// Encoder settings. See Encoder Settings for more details.
	EncoderSettings ChannelEncoderSettingsOutput `pulumi:"encoderSettings"`
	// Input attachments for the channel. See Input Attachments for more details.
	InputAttachments ChannelInputAttachmentArrayOutput `pulumi:"inputAttachments"`
	// Specification of network and file inputs for the channel.
	InputSpecification ChannelInputSpecificationOutput `pulumi:"inputSpecification"`
	// The log level to write to Cloudwatch logs.
	LogLevel pulumi.StringOutput `pulumi:"logLevel"`
	// Maintenance settings for this channel. See Maintenance for more details.
	Maintenance ChannelMaintenanceOutput `pulumi:"maintenance"`
	// Name of the Channel.
	//
	// The following arguments are optional:
	Name pulumi.StringOutput `pulumi:"name"`
	// Concise argument description.
	RoleArn pulumi.StringPtrOutput `pulumi:"roleArn"`
	// Whether to start/stop channel. Default: `false`
	StartChannel pulumi.BoolPtrOutput `pulumi:"startChannel"`
	// A map of tags to assign to the channel. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// Settings for the VPC outputs.
	Vpc ChannelVpcPtrOutput `pulumi:"vpc"`
}

// NewChannel registers a new resource with the given unique name, arguments, and options.
func NewChannel(ctx *pulumi.Context,
	name string, args *ChannelArgs, opts ...pulumi.ResourceOption) (*Channel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ChannelClass == nil {
		return nil, errors.New("invalid value for required argument 'ChannelClass'")
	}
	if args.Destinations == nil {
		return nil, errors.New("invalid value for required argument 'Destinations'")
	}
	if args.EncoderSettings == nil {
		return nil, errors.New("invalid value for required argument 'EncoderSettings'")
	}
	if args.InputAttachments == nil {
		return nil, errors.New("invalid value for required argument 'InputAttachments'")
	}
	if args.InputSpecification == nil {
		return nil, errors.New("invalid value for required argument 'InputSpecification'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Channel
	err := ctx.RegisterResource("aws:medialive/channel:Channel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChannel gets an existing Channel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChannelState, opts ...pulumi.ResourceOption) (*Channel, error) {
	var resource Channel
	err := ctx.ReadResource("aws:medialive/channel:Channel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Channel resources.
type channelState struct {
	// ARN of the Channel.
	Arn *string `pulumi:"arn"`
	// Specification of CDI inputs for this channel. See CDI Input Specification for more details.
	CdiInputSpecification *ChannelCdiInputSpecification `pulumi:"cdiInputSpecification"`
	// Concise argument description.
	ChannelClass *string `pulumi:"channelClass"`
	// ID of the channel in MediaPackage that is the destination for this output group.
	ChannelId *string `pulumi:"channelId"`
	// Destinations for channel. See Destinations for more details.
	Destinations []ChannelDestination `pulumi:"destinations"`
	// Encoder settings. See Encoder Settings for more details.
	EncoderSettings *ChannelEncoderSettings `pulumi:"encoderSettings"`
	// Input attachments for the channel. See Input Attachments for more details.
	InputAttachments []ChannelInputAttachment `pulumi:"inputAttachments"`
	// Specification of network and file inputs for the channel.
	InputSpecification *ChannelInputSpecification `pulumi:"inputSpecification"`
	// The log level to write to Cloudwatch logs.
	LogLevel *string `pulumi:"logLevel"`
	// Maintenance settings for this channel. See Maintenance for more details.
	Maintenance *ChannelMaintenance `pulumi:"maintenance"`
	// Name of the Channel.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// Concise argument description.
	RoleArn *string `pulumi:"roleArn"`
	// Whether to start/stop channel. Default: `false`
	StartChannel *bool `pulumi:"startChannel"`
	// A map of tags to assign to the channel. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Settings for the VPC outputs.
	Vpc *ChannelVpc `pulumi:"vpc"`
}

type ChannelState struct {
	// ARN of the Channel.
	Arn pulumi.StringPtrInput
	// Specification of CDI inputs for this channel. See CDI Input Specification for more details.
	CdiInputSpecification ChannelCdiInputSpecificationPtrInput
	// Concise argument description.
	ChannelClass pulumi.StringPtrInput
	// ID of the channel in MediaPackage that is the destination for this output group.
	ChannelId pulumi.StringPtrInput
	// Destinations for channel. See Destinations for more details.
	Destinations ChannelDestinationArrayInput
	// Encoder settings. See Encoder Settings for more details.
	EncoderSettings ChannelEncoderSettingsPtrInput
	// Input attachments for the channel. See Input Attachments for more details.
	InputAttachments ChannelInputAttachmentArrayInput
	// Specification of network and file inputs for the channel.
	InputSpecification ChannelInputSpecificationPtrInput
	// The log level to write to Cloudwatch logs.
	LogLevel pulumi.StringPtrInput
	// Maintenance settings for this channel. See Maintenance for more details.
	Maintenance ChannelMaintenancePtrInput
	// Name of the Channel.
	//
	// The following arguments are optional:
	Name pulumi.StringPtrInput
	// Concise argument description.
	RoleArn pulumi.StringPtrInput
	// Whether to start/stop channel. Default: `false`
	StartChannel pulumi.BoolPtrInput
	// A map of tags to assign to the channel. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumi.StringMapInput
	TagsAll pulumi.StringMapInput
	// Settings for the VPC outputs.
	Vpc ChannelVpcPtrInput
}

func (ChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*channelState)(nil)).Elem()
}

type channelArgs struct {
	// Specification of CDI inputs for this channel. See CDI Input Specification for more details.
	CdiInputSpecification *ChannelCdiInputSpecification `pulumi:"cdiInputSpecification"`
	// Concise argument description.
	ChannelClass string `pulumi:"channelClass"`
	// Destinations for channel. See Destinations for more details.
	Destinations []ChannelDestination `pulumi:"destinations"`
	// Encoder settings. See Encoder Settings for more details.
	EncoderSettings ChannelEncoderSettings `pulumi:"encoderSettings"`
	// Input attachments for the channel. See Input Attachments for more details.
	InputAttachments []ChannelInputAttachment `pulumi:"inputAttachments"`
	// Specification of network and file inputs for the channel.
	InputSpecification ChannelInputSpecification `pulumi:"inputSpecification"`
	// The log level to write to Cloudwatch logs.
	LogLevel *string `pulumi:"logLevel"`
	// Maintenance settings for this channel. See Maintenance for more details.
	Maintenance *ChannelMaintenance `pulumi:"maintenance"`
	// Name of the Channel.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// Concise argument description.
	RoleArn *string `pulumi:"roleArn"`
	// Whether to start/stop channel. Default: `false`
	StartChannel *bool `pulumi:"startChannel"`
	// A map of tags to assign to the channel. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Settings for the VPC outputs.
	Vpc *ChannelVpc `pulumi:"vpc"`
}

// The set of arguments for constructing a Channel resource.
type ChannelArgs struct {
	// Specification of CDI inputs for this channel. See CDI Input Specification for more details.
	CdiInputSpecification ChannelCdiInputSpecificationPtrInput
	// Concise argument description.
	ChannelClass pulumi.StringInput
	// Destinations for channel. See Destinations for more details.
	Destinations ChannelDestinationArrayInput
	// Encoder settings. See Encoder Settings for more details.
	EncoderSettings ChannelEncoderSettingsInput
	// Input attachments for the channel. See Input Attachments for more details.
	InputAttachments ChannelInputAttachmentArrayInput
	// Specification of network and file inputs for the channel.
	InputSpecification ChannelInputSpecificationInput
	// The log level to write to Cloudwatch logs.
	LogLevel pulumi.StringPtrInput
	// Maintenance settings for this channel. See Maintenance for more details.
	Maintenance ChannelMaintenancePtrInput
	// Name of the Channel.
	//
	// The following arguments are optional:
	Name pulumi.StringPtrInput
	// Concise argument description.
	RoleArn pulumi.StringPtrInput
	// Whether to start/stop channel. Default: `false`
	StartChannel pulumi.BoolPtrInput
	// A map of tags to assign to the channel. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Settings for the VPC outputs.
	Vpc ChannelVpcPtrInput
}

func (ChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*channelArgs)(nil)).Elem()
}

type ChannelInput interface {
	pulumi.Input

	ToChannelOutput() ChannelOutput
	ToChannelOutputWithContext(ctx context.Context) ChannelOutput
}

func (*Channel) ElementType() reflect.Type {
	return reflect.TypeOf((**Channel)(nil)).Elem()
}

func (i *Channel) ToChannelOutput() ChannelOutput {
	return i.ToChannelOutputWithContext(context.Background())
}

func (i *Channel) ToChannelOutputWithContext(ctx context.Context) ChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelOutput)
}

// ChannelArrayInput is an input type that accepts ChannelArray and ChannelArrayOutput values.
// You can construct a concrete instance of `ChannelArrayInput` via:
//
//	ChannelArray{ ChannelArgs{...} }
type ChannelArrayInput interface {
	pulumi.Input

	ToChannelArrayOutput() ChannelArrayOutput
	ToChannelArrayOutputWithContext(context.Context) ChannelArrayOutput
}

type ChannelArray []ChannelInput

func (ChannelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Channel)(nil)).Elem()
}

func (i ChannelArray) ToChannelArrayOutput() ChannelArrayOutput {
	return i.ToChannelArrayOutputWithContext(context.Background())
}

func (i ChannelArray) ToChannelArrayOutputWithContext(ctx context.Context) ChannelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelArrayOutput)
}

// ChannelMapInput is an input type that accepts ChannelMap and ChannelMapOutput values.
// You can construct a concrete instance of `ChannelMapInput` via:
//
//	ChannelMap{ "key": ChannelArgs{...} }
type ChannelMapInput interface {
	pulumi.Input

	ToChannelMapOutput() ChannelMapOutput
	ToChannelMapOutputWithContext(context.Context) ChannelMapOutput
}

type ChannelMap map[string]ChannelInput

func (ChannelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Channel)(nil)).Elem()
}

func (i ChannelMap) ToChannelMapOutput() ChannelMapOutput {
	return i.ToChannelMapOutputWithContext(context.Background())
}

func (i ChannelMap) ToChannelMapOutputWithContext(ctx context.Context) ChannelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelMapOutput)
}

type ChannelOutput struct{ *pulumi.OutputState }

func (ChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Channel)(nil)).Elem()
}

func (o ChannelOutput) ToChannelOutput() ChannelOutput {
	return o
}

func (o ChannelOutput) ToChannelOutputWithContext(ctx context.Context) ChannelOutput {
	return o
}

// ARN of the Channel.
func (o ChannelOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Channel) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Specification of CDI inputs for this channel. See CDI Input Specification for more details.
func (o ChannelOutput) CdiInputSpecification() ChannelCdiInputSpecificationPtrOutput {
	return o.ApplyT(func(v *Channel) ChannelCdiInputSpecificationPtrOutput { return v.CdiInputSpecification }).(ChannelCdiInputSpecificationPtrOutput)
}

// Concise argument description.
func (o ChannelOutput) ChannelClass() pulumi.StringOutput {
	return o.ApplyT(func(v *Channel) pulumi.StringOutput { return v.ChannelClass }).(pulumi.StringOutput)
}

// ID of the channel in MediaPackage that is the destination for this output group.
func (o ChannelOutput) ChannelId() pulumi.StringOutput {
	return o.ApplyT(func(v *Channel) pulumi.StringOutput { return v.ChannelId }).(pulumi.StringOutput)
}

// Destinations for channel. See Destinations for more details.
func (o ChannelOutput) Destinations() ChannelDestinationArrayOutput {
	return o.ApplyT(func(v *Channel) ChannelDestinationArrayOutput { return v.Destinations }).(ChannelDestinationArrayOutput)
}

// Encoder settings. See Encoder Settings for more details.
func (o ChannelOutput) EncoderSettings() ChannelEncoderSettingsOutput {
	return o.ApplyT(func(v *Channel) ChannelEncoderSettingsOutput { return v.EncoderSettings }).(ChannelEncoderSettingsOutput)
}

// Input attachments for the channel. See Input Attachments for more details.
func (o ChannelOutput) InputAttachments() ChannelInputAttachmentArrayOutput {
	return o.ApplyT(func(v *Channel) ChannelInputAttachmentArrayOutput { return v.InputAttachments }).(ChannelInputAttachmentArrayOutput)
}

// Specification of network and file inputs for the channel.
func (o ChannelOutput) InputSpecification() ChannelInputSpecificationOutput {
	return o.ApplyT(func(v *Channel) ChannelInputSpecificationOutput { return v.InputSpecification }).(ChannelInputSpecificationOutput)
}

// The log level to write to Cloudwatch logs.
func (o ChannelOutput) LogLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *Channel) pulumi.StringOutput { return v.LogLevel }).(pulumi.StringOutput)
}

// Maintenance settings for this channel. See Maintenance for more details.
func (o ChannelOutput) Maintenance() ChannelMaintenanceOutput {
	return o.ApplyT(func(v *Channel) ChannelMaintenanceOutput { return v.Maintenance }).(ChannelMaintenanceOutput)
}

// Name of the Channel.
//
// The following arguments are optional:
func (o ChannelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Channel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Concise argument description.
func (o ChannelOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Channel) pulumi.StringPtrOutput { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// Whether to start/stop channel. Default: `false`
func (o ChannelOutput) StartChannel() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Channel) pulumi.BoolPtrOutput { return v.StartChannel }).(pulumi.BoolPtrOutput)
}

// A map of tags to assign to the channel. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ChannelOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Channel) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ChannelOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Channel) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// Settings for the VPC outputs.
func (o ChannelOutput) Vpc() ChannelVpcPtrOutput {
	return o.ApplyT(func(v *Channel) ChannelVpcPtrOutput { return v.Vpc }).(ChannelVpcPtrOutput)
}

type ChannelArrayOutput struct{ *pulumi.OutputState }

func (ChannelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Channel)(nil)).Elem()
}

func (o ChannelArrayOutput) ToChannelArrayOutput() ChannelArrayOutput {
	return o
}

func (o ChannelArrayOutput) ToChannelArrayOutputWithContext(ctx context.Context) ChannelArrayOutput {
	return o
}

func (o ChannelArrayOutput) Index(i pulumi.IntInput) ChannelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Channel {
		return vs[0].([]*Channel)[vs[1].(int)]
	}).(ChannelOutput)
}

type ChannelMapOutput struct{ *pulumi.OutputState }

func (ChannelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Channel)(nil)).Elem()
}

func (o ChannelMapOutput) ToChannelMapOutput() ChannelMapOutput {
	return o
}

func (o ChannelMapOutput) ToChannelMapOutputWithContext(ctx context.Context) ChannelMapOutput {
	return o
}

func (o ChannelMapOutput) MapIndex(k pulumi.StringInput) ChannelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Channel {
		return vs[0].(map[string]*Channel)[vs[1].(string)]
	}).(ChannelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelInput)(nil)).Elem(), &Channel{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelArrayInput)(nil)).Elem(), ChannelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelMapInput)(nil)).Elem(), ChannelMap{})
	pulumi.RegisterOutputType(ChannelOutput{})
	pulumi.RegisterOutputType(ChannelArrayOutput{})
	pulumi.RegisterOutputType(ChannelMapOutput{})
}
