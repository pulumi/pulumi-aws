// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mediastore

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a MediaStore Container Policy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-aws/sdk/v3/go/aws"
// 	"github.com/pulumi/pulumi-aws/sdk/v3/go/aws/mediastore"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		currentRegion, err := aws.GetRegion(ctx, nil, nil)
// 		if err != nil {
// 			return err
// 		}
// 		currentCallerIdentity, err := aws.GetCallerIdentity(ctx, nil, nil)
// 		if err != nil {
// 			return err
// 		}
// 		exampleContainer, err := mediastore.NewContainer(ctx, "exampleContainer", nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = mediastore.NewContainerPolicy(ctx, "exampleContainerPolicy", &mediastore.ContainerPolicyArgs{
// 			ContainerName: exampleContainer.Name,
// 			Policy: exampleContainer.Name.ApplyT(func(name string) (string, error) {
// 				return fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "	\"Version\": \"2012-10-17\",\n", "	\"Statement\": [{\n", "		\"Sid\": \"MediaStoreFullAccess\",\n", "		\"Action\": [ \"mediastore:*\" ],\n", "		\"Principal\": {\"AWS\" : \"arn:aws:iam::", currentCallerIdentity.AccountId, ":root\"},\n", "		\"Effect\": \"Allow\",\n", "		\"Resource\": \"arn:aws:mediastore:", currentRegion.Name, ":", currentCallerIdentity.AccountId, ":container/", name, "/*\",\n", "		\"Condition\": {\n", "			\"Bool\": { \"aws:SecureTransport\": \"true\" }\n", "		}\n", "	}]\n", "}\n"), nil
// 			}).(pulumi.StringOutput),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// MediaStore Container Policy can be imported using the MediaStore Container Name, e.g.
//
// ```sh
//  $ pulumi import aws:mediastore/containerPolicy:ContainerPolicy example example
// ```
type ContainerPolicy struct {
	pulumi.CustomResourceState

	// The name of the container.
	ContainerName pulumi.StringOutput `pulumi:"containerName"`
	// The contents of the policy.
	Policy pulumi.StringOutput `pulumi:"policy"`
}

// NewContainerPolicy registers a new resource with the given unique name, arguments, and options.
func NewContainerPolicy(ctx *pulumi.Context,
	name string, args *ContainerPolicyArgs, opts ...pulumi.ResourceOption) (*ContainerPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContainerName == nil {
		return nil, errors.New("invalid value for required argument 'ContainerName'")
	}
	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	var resource ContainerPolicy
	err := ctx.RegisterResource("aws:mediastore/containerPolicy:ContainerPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContainerPolicy gets an existing ContainerPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainerPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContainerPolicyState, opts ...pulumi.ResourceOption) (*ContainerPolicy, error) {
	var resource ContainerPolicy
	err := ctx.ReadResource("aws:mediastore/containerPolicy:ContainerPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContainerPolicy resources.
type containerPolicyState struct {
	// The name of the container.
	ContainerName *string `pulumi:"containerName"`
	// The contents of the policy.
	Policy *string `pulumi:"policy"`
}

type ContainerPolicyState struct {
	// The name of the container.
	ContainerName pulumi.StringPtrInput
	// The contents of the policy.
	Policy pulumi.StringPtrInput
}

func (ContainerPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*containerPolicyState)(nil)).Elem()
}

type containerPolicyArgs struct {
	// The name of the container.
	ContainerName string `pulumi:"containerName"`
	// The contents of the policy.
	Policy string `pulumi:"policy"`
}

// The set of arguments for constructing a ContainerPolicy resource.
type ContainerPolicyArgs struct {
	// The name of the container.
	ContainerName pulumi.StringInput
	// The contents of the policy.
	Policy pulumi.StringInput
}

func (ContainerPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*containerPolicyArgs)(nil)).Elem()
}

type ContainerPolicyInput interface {
	pulumi.Input

	ToContainerPolicyOutput() ContainerPolicyOutput
	ToContainerPolicyOutputWithContext(ctx context.Context) ContainerPolicyOutput
}

func (ContainerPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPolicy)(nil)).Elem()
}

func (i ContainerPolicy) ToContainerPolicyOutput() ContainerPolicyOutput {
	return i.ToContainerPolicyOutputWithContext(context.Background())
}

func (i ContainerPolicy) ToContainerPolicyOutputWithContext(ctx context.Context) ContainerPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPolicyOutput)
}

type ContainerPolicyOutput struct {
	*pulumi.OutputState
}

func (ContainerPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPolicyOutput)(nil)).Elem()
}

func (o ContainerPolicyOutput) ToContainerPolicyOutput() ContainerPolicyOutput {
	return o
}

func (o ContainerPolicyOutput) ToContainerPolicyOutputWithContext(ctx context.Context) ContainerPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ContainerPolicyOutput{})
}
