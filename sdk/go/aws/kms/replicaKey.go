// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ReplicaKey struct {
	pulumi.CustomResourceState

	Arn                            pulumi.StringOutput    `pulumi:"arn"`
	BypassPolicyLockoutSafetyCheck pulumi.BoolPtrOutput   `pulumi:"bypassPolicyLockoutSafetyCheck"`
	DeletionWindowInDays           pulumi.IntPtrOutput    `pulumi:"deletionWindowInDays"`
	Description                    pulumi.StringPtrOutput `pulumi:"description"`
	Enabled                        pulumi.BoolPtrOutput   `pulumi:"enabled"`
	KeyId                          pulumi.StringOutput    `pulumi:"keyId"`
	KeyRotationEnabled             pulumi.BoolOutput      `pulumi:"keyRotationEnabled"`
	KeySpec                        pulumi.StringOutput    `pulumi:"keySpec"`
	KeyUsage                       pulumi.StringOutput    `pulumi:"keyUsage"`
	Policy                         pulumi.StringOutput    `pulumi:"policy"`
	PrimaryKeyArn                  pulumi.StringOutput    `pulumi:"primaryKeyArn"`
	Tags                           pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll                        pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewReplicaKey registers a new resource with the given unique name, arguments, and options.
func NewReplicaKey(ctx *pulumi.Context,
	name string, args *ReplicaKeyArgs, opts ...pulumi.ResourceOption) (*ReplicaKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PrimaryKeyArn == nil {
		return nil, errors.New("invalid value for required argument 'PrimaryKeyArn'")
	}
	var resource ReplicaKey
	err := ctx.RegisterResource("aws:kms/replicaKey:ReplicaKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReplicaKey gets an existing ReplicaKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReplicaKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReplicaKeyState, opts ...pulumi.ResourceOption) (*ReplicaKey, error) {
	var resource ReplicaKey
	err := ctx.ReadResource("aws:kms/replicaKey:ReplicaKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReplicaKey resources.
type replicaKeyState struct {
	Arn                            *string           `pulumi:"arn"`
	BypassPolicyLockoutSafetyCheck *bool             `pulumi:"bypassPolicyLockoutSafetyCheck"`
	DeletionWindowInDays           *int              `pulumi:"deletionWindowInDays"`
	Description                    *string           `pulumi:"description"`
	Enabled                        *bool             `pulumi:"enabled"`
	KeyId                          *string           `pulumi:"keyId"`
	KeyRotationEnabled             *bool             `pulumi:"keyRotationEnabled"`
	KeySpec                        *string           `pulumi:"keySpec"`
	KeyUsage                       *string           `pulumi:"keyUsage"`
	Policy                         *string           `pulumi:"policy"`
	PrimaryKeyArn                  *string           `pulumi:"primaryKeyArn"`
	Tags                           map[string]string `pulumi:"tags"`
	TagsAll                        map[string]string `pulumi:"tagsAll"`
}

type ReplicaKeyState struct {
	Arn                            pulumi.StringPtrInput
	BypassPolicyLockoutSafetyCheck pulumi.BoolPtrInput
	DeletionWindowInDays           pulumi.IntPtrInput
	Description                    pulumi.StringPtrInput
	Enabled                        pulumi.BoolPtrInput
	KeyId                          pulumi.StringPtrInput
	KeyRotationEnabled             pulumi.BoolPtrInput
	KeySpec                        pulumi.StringPtrInput
	KeyUsage                       pulumi.StringPtrInput
	Policy                         pulumi.StringPtrInput
	PrimaryKeyArn                  pulumi.StringPtrInput
	Tags                           pulumi.StringMapInput
	TagsAll                        pulumi.StringMapInput
}

func (ReplicaKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*replicaKeyState)(nil)).Elem()
}

type replicaKeyArgs struct {
	BypassPolicyLockoutSafetyCheck *bool             `pulumi:"bypassPolicyLockoutSafetyCheck"`
	DeletionWindowInDays           *int              `pulumi:"deletionWindowInDays"`
	Description                    *string           `pulumi:"description"`
	Enabled                        *bool             `pulumi:"enabled"`
	Policy                         *string           `pulumi:"policy"`
	PrimaryKeyArn                  string            `pulumi:"primaryKeyArn"`
	Tags                           map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ReplicaKey resource.
type ReplicaKeyArgs struct {
	BypassPolicyLockoutSafetyCheck pulumi.BoolPtrInput
	DeletionWindowInDays           pulumi.IntPtrInput
	Description                    pulumi.StringPtrInput
	Enabled                        pulumi.BoolPtrInput
	Policy                         pulumi.StringPtrInput
	PrimaryKeyArn                  pulumi.StringInput
	Tags                           pulumi.StringMapInput
}

func (ReplicaKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*replicaKeyArgs)(nil)).Elem()
}

type ReplicaKeyInput interface {
	pulumi.Input

	ToReplicaKeyOutput() ReplicaKeyOutput
	ToReplicaKeyOutputWithContext(ctx context.Context) ReplicaKeyOutput
}

func (*ReplicaKey) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicaKey)(nil)).Elem()
}

func (i *ReplicaKey) ToReplicaKeyOutput() ReplicaKeyOutput {
	return i.ToReplicaKeyOutputWithContext(context.Background())
}

func (i *ReplicaKey) ToReplicaKeyOutputWithContext(ctx context.Context) ReplicaKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaKeyOutput)
}

// ReplicaKeyArrayInput is an input type that accepts ReplicaKeyArray and ReplicaKeyArrayOutput values.
// You can construct a concrete instance of `ReplicaKeyArrayInput` via:
//
//	ReplicaKeyArray{ ReplicaKeyArgs{...} }
type ReplicaKeyArrayInput interface {
	pulumi.Input

	ToReplicaKeyArrayOutput() ReplicaKeyArrayOutput
	ToReplicaKeyArrayOutputWithContext(context.Context) ReplicaKeyArrayOutput
}

type ReplicaKeyArray []ReplicaKeyInput

func (ReplicaKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReplicaKey)(nil)).Elem()
}

func (i ReplicaKeyArray) ToReplicaKeyArrayOutput() ReplicaKeyArrayOutput {
	return i.ToReplicaKeyArrayOutputWithContext(context.Background())
}

func (i ReplicaKeyArray) ToReplicaKeyArrayOutputWithContext(ctx context.Context) ReplicaKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaKeyArrayOutput)
}

// ReplicaKeyMapInput is an input type that accepts ReplicaKeyMap and ReplicaKeyMapOutput values.
// You can construct a concrete instance of `ReplicaKeyMapInput` via:
//
//	ReplicaKeyMap{ "key": ReplicaKeyArgs{...} }
type ReplicaKeyMapInput interface {
	pulumi.Input

	ToReplicaKeyMapOutput() ReplicaKeyMapOutput
	ToReplicaKeyMapOutputWithContext(context.Context) ReplicaKeyMapOutput
}

type ReplicaKeyMap map[string]ReplicaKeyInput

func (ReplicaKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReplicaKey)(nil)).Elem()
}

func (i ReplicaKeyMap) ToReplicaKeyMapOutput() ReplicaKeyMapOutput {
	return i.ToReplicaKeyMapOutputWithContext(context.Background())
}

func (i ReplicaKeyMap) ToReplicaKeyMapOutputWithContext(ctx context.Context) ReplicaKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaKeyMapOutput)
}

type ReplicaKeyOutput struct{ *pulumi.OutputState }

func (ReplicaKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicaKey)(nil)).Elem()
}

func (o ReplicaKeyOutput) ToReplicaKeyOutput() ReplicaKeyOutput {
	return o
}

func (o ReplicaKeyOutput) ToReplicaKeyOutputWithContext(ctx context.Context) ReplicaKeyOutput {
	return o
}

func (o ReplicaKeyOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ReplicaKey) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ReplicaKeyOutput) BypassPolicyLockoutSafetyCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReplicaKey) pulumi.BoolPtrOutput { return v.BypassPolicyLockoutSafetyCheck }).(pulumi.BoolPtrOutput)
}

func (o ReplicaKeyOutput) DeletionWindowInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReplicaKey) pulumi.IntPtrOutput { return v.DeletionWindowInDays }).(pulumi.IntPtrOutput)
}

func (o ReplicaKeyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReplicaKey) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ReplicaKeyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReplicaKey) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o ReplicaKeyOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *ReplicaKey) pulumi.StringOutput { return v.KeyId }).(pulumi.StringOutput)
}

func (o ReplicaKeyOutput) KeyRotationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ReplicaKey) pulumi.BoolOutput { return v.KeyRotationEnabled }).(pulumi.BoolOutput)
}

func (o ReplicaKeyOutput) KeySpec() pulumi.StringOutput {
	return o.ApplyT(func(v *ReplicaKey) pulumi.StringOutput { return v.KeySpec }).(pulumi.StringOutput)
}

func (o ReplicaKeyOutput) KeyUsage() pulumi.StringOutput {
	return o.ApplyT(func(v *ReplicaKey) pulumi.StringOutput { return v.KeyUsage }).(pulumi.StringOutput)
}

func (o ReplicaKeyOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v *ReplicaKey) pulumi.StringOutput { return v.Policy }).(pulumi.StringOutput)
}

func (o ReplicaKeyOutput) PrimaryKeyArn() pulumi.StringOutput {
	return o.ApplyT(func(v *ReplicaKey) pulumi.StringOutput { return v.PrimaryKeyArn }).(pulumi.StringOutput)
}

func (o ReplicaKeyOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ReplicaKey) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ReplicaKeyOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ReplicaKey) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type ReplicaKeyArrayOutput struct{ *pulumi.OutputState }

func (ReplicaKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReplicaKey)(nil)).Elem()
}

func (o ReplicaKeyArrayOutput) ToReplicaKeyArrayOutput() ReplicaKeyArrayOutput {
	return o
}

func (o ReplicaKeyArrayOutput) ToReplicaKeyArrayOutputWithContext(ctx context.Context) ReplicaKeyArrayOutput {
	return o
}

func (o ReplicaKeyArrayOutput) Index(i pulumi.IntInput) ReplicaKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReplicaKey {
		return vs[0].([]*ReplicaKey)[vs[1].(int)]
	}).(ReplicaKeyOutput)
}

type ReplicaKeyMapOutput struct{ *pulumi.OutputState }

func (ReplicaKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReplicaKey)(nil)).Elem()
}

func (o ReplicaKeyMapOutput) ToReplicaKeyMapOutput() ReplicaKeyMapOutput {
	return o
}

func (o ReplicaKeyMapOutput) ToReplicaKeyMapOutputWithContext(ctx context.Context) ReplicaKeyMapOutput {
	return o
}

func (o ReplicaKeyMapOutput) MapIndex(k pulumi.StringInput) ReplicaKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReplicaKey {
		return vs[0].(map[string]*ReplicaKey)[vs[1].(string)]
	}).(ReplicaKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicaKeyInput)(nil)).Elem(), &ReplicaKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicaKeyArrayInput)(nil)).Elem(), ReplicaKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicaKeyMapInput)(nil)).Elem(), ReplicaKeyMap{})
	pulumi.RegisterOutputType(ReplicaKeyOutput{})
	pulumi.RegisterOutputType(ReplicaKeyArrayOutput{})
	pulumi.RegisterOutputType(ReplicaKeyMapOutput{})
}
