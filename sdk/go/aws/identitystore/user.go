// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identitystore

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type User struct {
	pulumi.CustomResourceState

	Addresses         UserAddressesPtrOutput    `pulumi:"addresses"`
	DisplayName       pulumi.StringOutput       `pulumi:"displayName"`
	Emails            UserEmailsPtrOutput       `pulumi:"emails"`
	ExternalIds       UserExternalIdArrayOutput `pulumi:"externalIds"`
	IdentityStoreId   pulumi.StringOutput       `pulumi:"identityStoreId"`
	Locale            pulumi.StringPtrOutput    `pulumi:"locale"`
	Name              UserNameOutput            `pulumi:"name"`
	Nickname          pulumi.StringPtrOutput    `pulumi:"nickname"`
	PhoneNumbers      UserPhoneNumbersPtrOutput `pulumi:"phoneNumbers"`
	PreferredLanguage pulumi.StringPtrOutput    `pulumi:"preferredLanguage"`
	ProfileUrl        pulumi.StringPtrOutput    `pulumi:"profileUrl"`
	Timezone          pulumi.StringPtrOutput    `pulumi:"timezone"`
	Title             pulumi.StringPtrOutput    `pulumi:"title"`
	UserId            pulumi.StringOutput       `pulumi:"userId"`
	UserName          pulumi.StringOutput       `pulumi:"userName"`
	UserType          pulumi.StringPtrOutput    `pulumi:"userType"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.IdentityStoreId == nil {
		return nil, errors.New("invalid value for required argument 'IdentityStoreId'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	var resource User
	err := ctx.RegisterResource("aws:identitystore/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("aws:identitystore/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	Addresses         *UserAddresses    `pulumi:"addresses"`
	DisplayName       *string           `pulumi:"displayName"`
	Emails            *UserEmails       `pulumi:"emails"`
	ExternalIds       []UserExternalId  `pulumi:"externalIds"`
	IdentityStoreId   *string           `pulumi:"identityStoreId"`
	Locale            *string           `pulumi:"locale"`
	Name              *UserName         `pulumi:"name"`
	Nickname          *string           `pulumi:"nickname"`
	PhoneNumbers      *UserPhoneNumbers `pulumi:"phoneNumbers"`
	PreferredLanguage *string           `pulumi:"preferredLanguage"`
	ProfileUrl        *string           `pulumi:"profileUrl"`
	Timezone          *string           `pulumi:"timezone"`
	Title             *string           `pulumi:"title"`
	UserId            *string           `pulumi:"userId"`
	UserName          *string           `pulumi:"userName"`
	UserType          *string           `pulumi:"userType"`
}

type UserState struct {
	Addresses         UserAddressesPtrInput
	DisplayName       pulumi.StringPtrInput
	Emails            UserEmailsPtrInput
	ExternalIds       UserExternalIdArrayInput
	IdentityStoreId   pulumi.StringPtrInput
	Locale            pulumi.StringPtrInput
	Name              UserNamePtrInput
	Nickname          pulumi.StringPtrInput
	PhoneNumbers      UserPhoneNumbersPtrInput
	PreferredLanguage pulumi.StringPtrInput
	ProfileUrl        pulumi.StringPtrInput
	Timezone          pulumi.StringPtrInput
	Title             pulumi.StringPtrInput
	UserId            pulumi.StringPtrInput
	UserName          pulumi.StringPtrInput
	UserType          pulumi.StringPtrInput
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	Addresses         *UserAddresses    `pulumi:"addresses"`
	DisplayName       string            `pulumi:"displayName"`
	Emails            *UserEmails       `pulumi:"emails"`
	IdentityStoreId   string            `pulumi:"identityStoreId"`
	Locale            *string           `pulumi:"locale"`
	Name              *UserName         `pulumi:"name"`
	Nickname          *string           `pulumi:"nickname"`
	PhoneNumbers      *UserPhoneNumbers `pulumi:"phoneNumbers"`
	PreferredLanguage *string           `pulumi:"preferredLanguage"`
	ProfileUrl        *string           `pulumi:"profileUrl"`
	Timezone          *string           `pulumi:"timezone"`
	Title             *string           `pulumi:"title"`
	UserName          string            `pulumi:"userName"`
	UserType          *string           `pulumi:"userType"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	Addresses         UserAddressesPtrInput
	DisplayName       pulumi.StringInput
	Emails            UserEmailsPtrInput
	IdentityStoreId   pulumi.StringInput
	Locale            pulumi.StringPtrInput
	Name              UserNamePtrInput
	Nickname          pulumi.StringPtrInput
	PhoneNumbers      UserPhoneNumbersPtrInput
	PreferredLanguage pulumi.StringPtrInput
	ProfileUrl        pulumi.StringPtrInput
	Timezone          pulumi.StringPtrInput
	Title             pulumi.StringPtrInput
	UserName          pulumi.StringInput
	UserType          pulumi.StringPtrInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(ctx context.Context) UserOutput
}

func (*User) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (i *User) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i *User) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

// UserArrayInput is an input type that accepts UserArray and UserArrayOutput values.
// You can construct a concrete instance of `UserArrayInput` via:
//
//	UserArray{ UserArgs{...} }
type UserArrayInput interface {
	pulumi.Input

	ToUserArrayOutput() UserArrayOutput
	ToUserArrayOutputWithContext(context.Context) UserArrayOutput
}

type UserArray []UserInput

func (UserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (i UserArray) ToUserArrayOutput() UserArrayOutput {
	return i.ToUserArrayOutputWithContext(context.Background())
}

func (i UserArray) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArrayOutput)
}

// UserMapInput is an input type that accepts UserMap and UserMapOutput values.
// You can construct a concrete instance of `UserMapInput` via:
//
//	UserMap{ "key": UserArgs{...} }
type UserMapInput interface {
	pulumi.Input

	ToUserMapOutput() UserMapOutput
	ToUserMapOutputWithContext(context.Context) UserMapOutput
}

type UserMap map[string]UserInput

func (UserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (i UserMap) ToUserMapOutput() UserMapOutput {
	return i.ToUserMapOutputWithContext(context.Background())
}

func (i UserMap) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMapOutput)
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

func (o UserOutput) Addresses() UserAddressesPtrOutput {
	return o.ApplyT(func(v *User) UserAddressesPtrOutput { return v.Addresses }).(UserAddressesPtrOutput)
}

func (o UserOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

func (o UserOutput) Emails() UserEmailsPtrOutput {
	return o.ApplyT(func(v *User) UserEmailsPtrOutput { return v.Emails }).(UserEmailsPtrOutput)
}

func (o UserOutput) ExternalIds() UserExternalIdArrayOutput {
	return o.ApplyT(func(v *User) UserExternalIdArrayOutput { return v.ExternalIds }).(UserExternalIdArrayOutput)
}

func (o UserOutput) IdentityStoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.IdentityStoreId }).(pulumi.StringOutput)
}

func (o UserOutput) Locale() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Locale }).(pulumi.StringPtrOutput)
}

func (o UserOutput) Name() UserNameOutput {
	return o.ApplyT(func(v *User) UserNameOutput { return v.Name }).(UserNameOutput)
}

func (o UserOutput) Nickname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Nickname }).(pulumi.StringPtrOutput)
}

func (o UserOutput) PhoneNumbers() UserPhoneNumbersPtrOutput {
	return o.ApplyT(func(v *User) UserPhoneNumbersPtrOutput { return v.PhoneNumbers }).(UserPhoneNumbersPtrOutput)
}

func (o UserOutput) PreferredLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.PreferredLanguage }).(pulumi.StringPtrOutput)
}

func (o UserOutput) ProfileUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.ProfileUrl }).(pulumi.StringPtrOutput)
}

func (o UserOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Timezone }).(pulumi.StringPtrOutput)
}

func (o UserOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Title }).(pulumi.StringPtrOutput)
}

func (o UserOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

func (o UserOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

func (o UserOutput) UserType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.UserType }).(pulumi.StringPtrOutput)
}

type UserArrayOutput struct{ *pulumi.OutputState }

func (UserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (o UserArrayOutput) ToUserArrayOutput() UserArrayOutput {
	return o
}

func (o UserArrayOutput) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return o
}

func (o UserArrayOutput) Index(i pulumi.IntInput) UserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *User {
		return vs[0].([]*User)[vs[1].(int)]
	}).(UserOutput)
}

type UserMapOutput struct{ *pulumi.OutputState }

func (UserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (o UserMapOutput) ToUserMapOutput() UserMapOutput {
	return o
}

func (o UserMapOutput) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return o
}

func (o UserMapOutput) MapIndex(k pulumi.StringInput) UserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *User {
		return vs[0].(map[string]*User)[vs[1].(string)]
	}).(UserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserInput)(nil)).Elem(), &User{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserArrayInput)(nil)).Elem(), UserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserMapInput)(nil)).Elem(), UserMap{})
	pulumi.RegisterOutputType(UserOutput{})
	pulumi.RegisterOutputType(UserArrayOutput{})
	pulumi.RegisterOutputType(UserMapOutput{})
}
