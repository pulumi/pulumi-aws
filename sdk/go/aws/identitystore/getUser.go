// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identitystore

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get an Identity Store User.
func LookupUser(ctx *pulumi.Context, args *LookupUserArgs, opts ...pulumi.InvokeOption) (*LookupUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUserResult
	err := ctx.Invoke("aws:identitystore/getUser:getUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUser.
type LookupUserArgs struct {
	// A unique identifier for a user or group that is not the primary identifier. Conflicts with `userId` and `filter`. Detailed below.
	AlternateIdentifier *GetUserAlternateIdentifier `pulumi:"alternateIdentifier"`
	// Configuration block for filtering by a unique attribute of the user. Detailed below.
	//
	// Deprecated: Use the alternate_identifier attribute instead.
	Filter *GetUserFilter `pulumi:"filter"`
	// Identity Store ID associated with the Single Sign-On Instance.
	//
	// The following arguments are optional:
	IdentityStoreId string `pulumi:"identityStoreId"`
	// The identifier for a user in the Identity Store.
	//
	// > Exactly one of the above arguments must be provided. Passing both `filter` and `userId` is allowed for backwards compatibility.
	UserId *string `pulumi:"userId"`
}

// A collection of values returned by getUser.
type LookupUserResult struct {
	// List of details about the user's address.
	Addresses           []GetUserAddress            `pulumi:"addresses"`
	AlternateIdentifier *GetUserAlternateIdentifier `pulumi:"alternateIdentifier"`
	// The name that is typically displayed when the user is referenced.
	DisplayName string `pulumi:"displayName"`
	// List of details about the user's email.
	Emails []GetUserEmail `pulumi:"emails"`
	// List of identifiers issued to this resource by an external identity provider.
	ExternalIds []GetUserExternalId `pulumi:"externalIds"`
	// Deprecated: Use the alternate_identifier attribute instead.
	Filter *GetUserFilter `pulumi:"filter"`
	// The provider-assigned unique ID for this managed resource.
	Id              string `pulumi:"id"`
	IdentityStoreId string `pulumi:"identityStoreId"`
	// The user's geographical region or location.
	Locale string `pulumi:"locale"`
	// Details about the user's full name.
	Names []GetUserName `pulumi:"names"`
	// An alternate name for the user.
	Nickname string `pulumi:"nickname"`
	// List of details about the user's phone number.
	PhoneNumbers []GetUserPhoneNumber `pulumi:"phoneNumbers"`
	// The preferred language of the user.
	PreferredLanguage string `pulumi:"preferredLanguage"`
	// An URL that may be associated with the user.
	ProfileUrl string `pulumi:"profileUrl"`
	// The user's time zone.
	Timezone string `pulumi:"timezone"`
	// The user's title.
	Title  string `pulumi:"title"`
	UserId string `pulumi:"userId"`
	// User's user name value.
	UserName string `pulumi:"userName"`
	// The user type.
	UserType string `pulumi:"userType"`
}

func LookupUserOutput(ctx *pulumi.Context, args LookupUserOutputArgs, opts ...pulumi.InvokeOption) LookupUserResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupUserResult, error) {
			args := v.(LookupUserArgs)
			r, err := LookupUser(ctx, &args, opts...)
			var s LookupUserResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupUserResultOutput)
}

// A collection of arguments for invoking getUser.
type LookupUserOutputArgs struct {
	// A unique identifier for a user or group that is not the primary identifier. Conflicts with `userId` and `filter`. Detailed below.
	AlternateIdentifier GetUserAlternateIdentifierPtrInput `pulumi:"alternateIdentifier"`
	// Configuration block for filtering by a unique attribute of the user. Detailed below.
	//
	// Deprecated: Use the alternate_identifier attribute instead.
	Filter GetUserFilterPtrInput `pulumi:"filter"`
	// Identity Store ID associated with the Single Sign-On Instance.
	//
	// The following arguments are optional:
	IdentityStoreId pulumi.StringInput `pulumi:"identityStoreId"`
	// The identifier for a user in the Identity Store.
	//
	// > Exactly one of the above arguments must be provided. Passing both `filter` and `userId` is allowed for backwards compatibility.
	UserId pulumi.StringPtrInput `pulumi:"userId"`
}

func (LookupUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserArgs)(nil)).Elem()
}

// A collection of values returned by getUser.
type LookupUserResultOutput struct{ *pulumi.OutputState }

func (LookupUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserResult)(nil)).Elem()
}

func (o LookupUserResultOutput) ToLookupUserResultOutput() LookupUserResultOutput {
	return o
}

func (o LookupUserResultOutput) ToLookupUserResultOutputWithContext(ctx context.Context) LookupUserResultOutput {
	return o
}

func (o LookupUserResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupUserResult] {
	return pulumix.Output[LookupUserResult]{
		OutputState: o.OutputState,
	}
}

// List of details about the user's address.
func (o LookupUserResultOutput) Addresses() GetUserAddressArrayOutput {
	return o.ApplyT(func(v LookupUserResult) []GetUserAddress { return v.Addresses }).(GetUserAddressArrayOutput)
}

func (o LookupUserResultOutput) AlternateIdentifier() GetUserAlternateIdentifierPtrOutput {
	return o.ApplyT(func(v LookupUserResult) *GetUserAlternateIdentifier { return v.AlternateIdentifier }).(GetUserAlternateIdentifierPtrOutput)
}

// The name that is typically displayed when the user is referenced.
func (o LookupUserResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// List of details about the user's email.
func (o LookupUserResultOutput) Emails() GetUserEmailArrayOutput {
	return o.ApplyT(func(v LookupUserResult) []GetUserEmail { return v.Emails }).(GetUserEmailArrayOutput)
}

// List of identifiers issued to this resource by an external identity provider.
func (o LookupUserResultOutput) ExternalIds() GetUserExternalIdArrayOutput {
	return o.ApplyT(func(v LookupUserResult) []GetUserExternalId { return v.ExternalIds }).(GetUserExternalIdArrayOutput)
}

// Deprecated: Use the alternate_identifier attribute instead.
func (o LookupUserResultOutput) Filter() GetUserFilterPtrOutput {
	return o.ApplyT(func(v LookupUserResult) *GetUserFilter { return v.Filter }).(GetUserFilterPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) IdentityStoreId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.IdentityStoreId }).(pulumi.StringOutput)
}

// The user's geographical region or location.
func (o LookupUserResultOutput) Locale() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Locale }).(pulumi.StringOutput)
}

// Details about the user's full name.
func (o LookupUserResultOutput) Names() GetUserNameArrayOutput {
	return o.ApplyT(func(v LookupUserResult) []GetUserName { return v.Names }).(GetUserNameArrayOutput)
}

// An alternate name for the user.
func (o LookupUserResultOutput) Nickname() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Nickname }).(pulumi.StringOutput)
}

// List of details about the user's phone number.
func (o LookupUserResultOutput) PhoneNumbers() GetUserPhoneNumberArrayOutput {
	return o.ApplyT(func(v LookupUserResult) []GetUserPhoneNumber { return v.PhoneNumbers }).(GetUserPhoneNumberArrayOutput)
}

// The preferred language of the user.
func (o LookupUserResultOutput) PreferredLanguage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.PreferredLanguage }).(pulumi.StringOutput)
}

// An URL that may be associated with the user.
func (o LookupUserResultOutput) ProfileUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.ProfileUrl }).(pulumi.StringOutput)
}

// The user's time zone.
func (o LookupUserResultOutput) Timezone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Timezone }).(pulumi.StringOutput)
}

// The user's title.
func (o LookupUserResultOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Title }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.UserId }).(pulumi.StringOutput)
}

// User's user name value.
func (o LookupUserResultOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.UserName }).(pulumi.StringOutput)
}

// The user type.
func (o LookupUserResultOutput) UserType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.UserType }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUserResultOutput{})
}
