// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workspacesweb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS WorkSpaces Web Network Settings resource. Once associated with a web portal, network settings define how streaming instances will connect with your specified VPC.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/ec2"
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/workspacesweb"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := ec2.NewVpc(ctx, "example", &ec2.VpcArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			var exampleSubnet []*ec2.Subnet
//			for index := 0; index < 2; index++ {
//				key0 := index
//				val0 := index
//				__res, err := ec2.NewSubnet(ctx, fmt.Sprintf("example-%v", key0), &ec2.SubnetArgs{
//					VpcId: example.ID(),
//					CidrBlock: pulumi.String(example.CidrBlock.ApplyT(func(cidrBlock string) (std.CidrsubnetResult, error) {
//						return std.CidrsubnetResult(interface{}(std.CidrsubnetOutput(ctx, std.CidrsubnetOutputArgs{
//							Input:   cidrBlock,
//							Newbits: 8,
//							Netnum:  val0,
//						}, nil))), nil
//					}).(std.CidrsubnetResultOutput).ApplyT(func(invoke std.CidrsubnetResult) (*string, error) {
//						return invoke.Result, nil
//					}).(pulumi.StringPtrOutput)),
//					AvailabilityZone: available.Names[val0],
//				})
//				if err != nil {
//					return err
//				}
//				exampleSubnet = append(exampleSubnet, __res)
//			}
//			var example1 []*ec2.SecurityGroup
//			for index := 0; index < 2; index++ {
//				key0 := index
//				val0 := index
//				__res, err := ec2.NewSecurityGroup(ctx, fmt.Sprintf("example1-%v", key0), &ec2.SecurityGroupArgs{
//					VpcId: example.ID(),
//					Name:  pulumi.Sprintf("example-sg-%v$", val0),
//				})
//				if err != nil {
//					return err
//				}
//				example1 = append(example1, __res)
//			}
//			_, err = workspacesweb.NewNetworkSettings(ctx, "example", &workspacesweb.NetworkSettingsArgs{
//				VpcId: example.ID(),
//				SubnetIds: pulumi.StringArray{
//					exampleSubnet[0].ID(),
//					exampleSubnet[1].ID(),
//				},
//				SecurityGroupIds: pulumi.StringArray{
//					exampleAwsSecurityGroup[0].Id,
//					exampleAwsSecurityGroup[1].Id,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import WorkSpaces Web Network Settings using the `network_settings_arn`. For example:
//
// ```sh
// $ pulumi import aws:workspacesweb/networkSettings:NetworkSettings example arn:aws:workspacesweb:us-west-2:123456789012:networksettings/abcdef12345
// ```
type NetworkSettings struct {
	pulumi.CustomResourceState

	// List of web portal ARNs associated with the network settings.
	AssociatedPortalArns pulumi.StringArrayOutput `pulumi:"associatedPortalArns"`
	// ARN of the network settings resource.
	NetworkSettingsArn pulumi.StringOutput `pulumi:"networkSettingsArn"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
	// One or more security groups used to control access from streaming instances to your VPC.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// The subnets in which network interfaces are created to connect streaming instances to your VPC. At least two subnet ids must be specified.
	SubnetIds pulumi.StringArrayOutput `pulumi:"subnetIds"`
	// Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// The VPC that streaming instances will connect to.
	//
	// The following arguments are optional:
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewNetworkSettings registers a new resource with the given unique name, arguments, and options.
func NewNetworkSettings(ctx *pulumi.Context,
	name string, args *NetworkSettingsArgs, opts ...pulumi.ResourceOption) (*NetworkSettings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SecurityGroupIds == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroupIds'")
	}
	if args.SubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'SubnetIds'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("aws:workspaces/webNetworkSettings:WebNetworkSettings"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkSettings
	err := ctx.RegisterResource("aws:workspacesweb/networkSettings:NetworkSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkSettings gets an existing NetworkSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkSettingsState, opts ...pulumi.ResourceOption) (*NetworkSettings, error) {
	var resource NetworkSettings
	err := ctx.ReadResource("aws:workspacesweb/networkSettings:NetworkSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkSettings resources.
type networkSettingsState struct {
	// List of web portal ARNs associated with the network settings.
	AssociatedPortalArns []string `pulumi:"associatedPortalArns"`
	// ARN of the network settings resource.
	NetworkSettingsArn *string `pulumi:"networkSettingsArn"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// One or more security groups used to control access from streaming instances to your VPC.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The subnets in which network interfaces are created to connect streaming instances to your VPC. At least two subnet ids must be specified.
	SubnetIds []string `pulumi:"subnetIds"`
	// Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The VPC that streaming instances will connect to.
	//
	// The following arguments are optional:
	VpcId *string `pulumi:"vpcId"`
}

type NetworkSettingsState struct {
	// List of web portal ARNs associated with the network settings.
	AssociatedPortalArns pulumi.StringArrayInput
	// ARN of the network settings resource.
	NetworkSettingsArn pulumi.StringPtrInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// One or more security groups used to control access from streaming instances to your VPC.
	SecurityGroupIds pulumi.StringArrayInput
	// The subnets in which network interfaces are created to connect streaming instances to your VPC. At least two subnet ids must be specified.
	SubnetIds pulumi.StringArrayInput
	// Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapInput
	// The VPC that streaming instances will connect to.
	//
	// The following arguments are optional:
	VpcId pulumi.StringPtrInput
}

func (NetworkSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkSettingsState)(nil)).Elem()
}

type networkSettingsArgs struct {
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// One or more security groups used to control access from streaming instances to your VPC.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The subnets in which network interfaces are created to connect streaming instances to your VPC. At least two subnet ids must be specified.
	SubnetIds []string `pulumi:"subnetIds"`
	// Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The VPC that streaming instances will connect to.
	//
	// The following arguments are optional:
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a NetworkSettings resource.
type NetworkSettingsArgs struct {
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// One or more security groups used to control access from streaming instances to your VPC.
	SecurityGroupIds pulumi.StringArrayInput
	// The subnets in which network interfaces are created to connect streaming instances to your VPC. At least two subnet ids must be specified.
	SubnetIds pulumi.StringArrayInput
	// Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// The VPC that streaming instances will connect to.
	//
	// The following arguments are optional:
	VpcId pulumi.StringInput
}

func (NetworkSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkSettingsArgs)(nil)).Elem()
}

type NetworkSettingsInput interface {
	pulumi.Input

	ToNetworkSettingsOutput() NetworkSettingsOutput
	ToNetworkSettingsOutputWithContext(ctx context.Context) NetworkSettingsOutput
}

func (*NetworkSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkSettings)(nil)).Elem()
}

func (i *NetworkSettings) ToNetworkSettingsOutput() NetworkSettingsOutput {
	return i.ToNetworkSettingsOutputWithContext(context.Background())
}

func (i *NetworkSettings) ToNetworkSettingsOutputWithContext(ctx context.Context) NetworkSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSettingsOutput)
}

// NetworkSettingsArrayInput is an input type that accepts NetworkSettingsArray and NetworkSettingsArrayOutput values.
// You can construct a concrete instance of `NetworkSettingsArrayInput` via:
//
//	NetworkSettingsArray{ NetworkSettingsArgs{...} }
type NetworkSettingsArrayInput interface {
	pulumi.Input

	ToNetworkSettingsArrayOutput() NetworkSettingsArrayOutput
	ToNetworkSettingsArrayOutputWithContext(context.Context) NetworkSettingsArrayOutput
}

type NetworkSettingsArray []NetworkSettingsInput

func (NetworkSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkSettings)(nil)).Elem()
}

func (i NetworkSettingsArray) ToNetworkSettingsArrayOutput() NetworkSettingsArrayOutput {
	return i.ToNetworkSettingsArrayOutputWithContext(context.Background())
}

func (i NetworkSettingsArray) ToNetworkSettingsArrayOutputWithContext(ctx context.Context) NetworkSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSettingsArrayOutput)
}

// NetworkSettingsMapInput is an input type that accepts NetworkSettingsMap and NetworkSettingsMapOutput values.
// You can construct a concrete instance of `NetworkSettingsMapInput` via:
//
//	NetworkSettingsMap{ "key": NetworkSettingsArgs{...} }
type NetworkSettingsMapInput interface {
	pulumi.Input

	ToNetworkSettingsMapOutput() NetworkSettingsMapOutput
	ToNetworkSettingsMapOutputWithContext(context.Context) NetworkSettingsMapOutput
}

type NetworkSettingsMap map[string]NetworkSettingsInput

func (NetworkSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkSettings)(nil)).Elem()
}

func (i NetworkSettingsMap) ToNetworkSettingsMapOutput() NetworkSettingsMapOutput {
	return i.ToNetworkSettingsMapOutputWithContext(context.Background())
}

func (i NetworkSettingsMap) ToNetworkSettingsMapOutputWithContext(ctx context.Context) NetworkSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSettingsMapOutput)
}

type NetworkSettingsOutput struct{ *pulumi.OutputState }

func (NetworkSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkSettings)(nil)).Elem()
}

func (o NetworkSettingsOutput) ToNetworkSettingsOutput() NetworkSettingsOutput {
	return o
}

func (o NetworkSettingsOutput) ToNetworkSettingsOutputWithContext(ctx context.Context) NetworkSettingsOutput {
	return o
}

// List of web portal ARNs associated with the network settings.
func (o NetworkSettingsOutput) AssociatedPortalArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkSettings) pulumi.StringArrayOutput { return v.AssociatedPortalArns }).(pulumi.StringArrayOutput)
}

// ARN of the network settings resource.
func (o NetworkSettingsOutput) NetworkSettingsArn() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSettings) pulumi.StringOutput { return v.NetworkSettingsArn }).(pulumi.StringOutput)
}

// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
func (o NetworkSettingsOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSettings) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// One or more security groups used to control access from streaming instances to your VPC.
func (o NetworkSettingsOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkSettings) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// The subnets in which network interfaces are created to connect streaming instances to your VPC. At least two subnet ids must be specified.
func (o NetworkSettingsOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkSettings) pulumi.StringArrayOutput { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o NetworkSettingsOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetworkSettings) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o NetworkSettingsOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetworkSettings) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// The VPC that streaming instances will connect to.
//
// The following arguments are optional:
func (o NetworkSettingsOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSettings) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type NetworkSettingsArrayOutput struct{ *pulumi.OutputState }

func (NetworkSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkSettings)(nil)).Elem()
}

func (o NetworkSettingsArrayOutput) ToNetworkSettingsArrayOutput() NetworkSettingsArrayOutput {
	return o
}

func (o NetworkSettingsArrayOutput) ToNetworkSettingsArrayOutputWithContext(ctx context.Context) NetworkSettingsArrayOutput {
	return o
}

func (o NetworkSettingsArrayOutput) Index(i pulumi.IntInput) NetworkSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkSettings {
		return vs[0].([]*NetworkSettings)[vs[1].(int)]
	}).(NetworkSettingsOutput)
}

type NetworkSettingsMapOutput struct{ *pulumi.OutputState }

func (NetworkSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkSettings)(nil)).Elem()
}

func (o NetworkSettingsMapOutput) ToNetworkSettingsMapOutput() NetworkSettingsMapOutput {
	return o
}

func (o NetworkSettingsMapOutput) ToNetworkSettingsMapOutputWithContext(ctx context.Context) NetworkSettingsMapOutput {
	return o
}

func (o NetworkSettingsMapOutput) MapIndex(k pulumi.StringInput) NetworkSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkSettings {
		return vs[0].(map[string]*NetworkSettings)[vs[1].(string)]
	}).(NetworkSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSettingsInput)(nil)).Elem(), &NetworkSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSettingsArrayInput)(nil)).Elem(), NetworkSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSettingsMapInput)(nil)).Elem(), NetworkSettingsMap{})
	pulumi.RegisterOutputType(NetworkSettingsOutput{})
	pulumi.RegisterOutputType(NetworkSettingsArrayOutput{})
	pulumi.RegisterOutputType(NetworkSettingsMapOutput{})
}
