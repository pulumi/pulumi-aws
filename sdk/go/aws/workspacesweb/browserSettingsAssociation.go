// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workspacesweb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS WorkSpaces Web Browser Settings Association.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/workspacesweb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := workspacesweb.NewPortal(ctx, "example", &workspacesweb.PortalArgs{
//				DisplayName: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"chromePolicies": map[string]interface{}{
//					"DefaultDownloadDirectory": map[string]interface{}{
//						"value": "/home/as2-streaming-user/MyFiles/TemporaryFiles1",
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			exampleBrowserSettings, err := workspacesweb.NewBrowserSettings(ctx, "example", &workspacesweb.BrowserSettingsArgs{
//				BrowserPolicy: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = workspacesweb.NewBrowserSettingsAssociation(ctx, "example", &workspacesweb.BrowserSettingsAssociationArgs{
//				BrowserSettingsArn: exampleBrowserSettings.BrowserSettingsArn,
//				PortalArn:          example.PortalArn,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import WorkSpaces Web Browser Settings Association using the `browser_settings_arn,portal_arn`. For example:
//
// ```sh
// $ pulumi import aws:workspacesweb/browserSettingsAssociation:BrowserSettingsAssociation example arn:aws:workspaces-web:us-west-2:123456789012:browserSettings/browser_settings-id-12345678,arn:aws:workspaces-web:us-west-2:123456789012:portal/portal-id-12345678
// ```
type BrowserSettingsAssociation struct {
	pulumi.CustomResourceState

	// ARN of the browser settings to associate with the portal. Forces replacement if changed.
	BrowserSettingsArn pulumi.StringOutput `pulumi:"browserSettingsArn"`
	// ARN of the portal to associate with the browser settings. Forces replacement if changed.
	//
	// The following arguments are optional:
	PortalArn pulumi.StringOutput `pulumi:"portalArn"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewBrowserSettingsAssociation registers a new resource with the given unique name, arguments, and options.
func NewBrowserSettingsAssociation(ctx *pulumi.Context,
	name string, args *BrowserSettingsAssociationArgs, opts ...pulumi.ResourceOption) (*BrowserSettingsAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BrowserSettingsArn == nil {
		return nil, errors.New("invalid value for required argument 'BrowserSettingsArn'")
	}
	if args.PortalArn == nil {
		return nil, errors.New("invalid value for required argument 'PortalArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BrowserSettingsAssociation
	err := ctx.RegisterResource("aws:workspacesweb/browserSettingsAssociation:BrowserSettingsAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBrowserSettingsAssociation gets an existing BrowserSettingsAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBrowserSettingsAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BrowserSettingsAssociationState, opts ...pulumi.ResourceOption) (*BrowserSettingsAssociation, error) {
	var resource BrowserSettingsAssociation
	err := ctx.ReadResource("aws:workspacesweb/browserSettingsAssociation:BrowserSettingsAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BrowserSettingsAssociation resources.
type browserSettingsAssociationState struct {
	// ARN of the browser settings to associate with the portal. Forces replacement if changed.
	BrowserSettingsArn *string `pulumi:"browserSettingsArn"`
	// ARN of the portal to associate with the browser settings. Forces replacement if changed.
	//
	// The following arguments are optional:
	PortalArn *string `pulumi:"portalArn"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
}

type BrowserSettingsAssociationState struct {
	// ARN of the browser settings to associate with the portal. Forces replacement if changed.
	BrowserSettingsArn pulumi.StringPtrInput
	// ARN of the portal to associate with the browser settings. Forces replacement if changed.
	//
	// The following arguments are optional:
	PortalArn pulumi.StringPtrInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
}

func (BrowserSettingsAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*browserSettingsAssociationState)(nil)).Elem()
}

type browserSettingsAssociationArgs struct {
	// ARN of the browser settings to associate with the portal. Forces replacement if changed.
	BrowserSettingsArn string `pulumi:"browserSettingsArn"`
	// ARN of the portal to associate with the browser settings. Forces replacement if changed.
	//
	// The following arguments are optional:
	PortalArn string `pulumi:"portalArn"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a BrowserSettingsAssociation resource.
type BrowserSettingsAssociationArgs struct {
	// ARN of the browser settings to associate with the portal. Forces replacement if changed.
	BrowserSettingsArn pulumi.StringInput
	// ARN of the portal to associate with the browser settings. Forces replacement if changed.
	//
	// The following arguments are optional:
	PortalArn pulumi.StringInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
}

func (BrowserSettingsAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*browserSettingsAssociationArgs)(nil)).Elem()
}

type BrowserSettingsAssociationInput interface {
	pulumi.Input

	ToBrowserSettingsAssociationOutput() BrowserSettingsAssociationOutput
	ToBrowserSettingsAssociationOutputWithContext(ctx context.Context) BrowserSettingsAssociationOutput
}

func (*BrowserSettingsAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**BrowserSettingsAssociation)(nil)).Elem()
}

func (i *BrowserSettingsAssociation) ToBrowserSettingsAssociationOutput() BrowserSettingsAssociationOutput {
	return i.ToBrowserSettingsAssociationOutputWithContext(context.Background())
}

func (i *BrowserSettingsAssociation) ToBrowserSettingsAssociationOutputWithContext(ctx context.Context) BrowserSettingsAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrowserSettingsAssociationOutput)
}

// BrowserSettingsAssociationArrayInput is an input type that accepts BrowserSettingsAssociationArray and BrowserSettingsAssociationArrayOutput values.
// You can construct a concrete instance of `BrowserSettingsAssociationArrayInput` via:
//
//	BrowserSettingsAssociationArray{ BrowserSettingsAssociationArgs{...} }
type BrowserSettingsAssociationArrayInput interface {
	pulumi.Input

	ToBrowserSettingsAssociationArrayOutput() BrowserSettingsAssociationArrayOutput
	ToBrowserSettingsAssociationArrayOutputWithContext(context.Context) BrowserSettingsAssociationArrayOutput
}

type BrowserSettingsAssociationArray []BrowserSettingsAssociationInput

func (BrowserSettingsAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BrowserSettingsAssociation)(nil)).Elem()
}

func (i BrowserSettingsAssociationArray) ToBrowserSettingsAssociationArrayOutput() BrowserSettingsAssociationArrayOutput {
	return i.ToBrowserSettingsAssociationArrayOutputWithContext(context.Background())
}

func (i BrowserSettingsAssociationArray) ToBrowserSettingsAssociationArrayOutputWithContext(ctx context.Context) BrowserSettingsAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrowserSettingsAssociationArrayOutput)
}

// BrowserSettingsAssociationMapInput is an input type that accepts BrowserSettingsAssociationMap and BrowserSettingsAssociationMapOutput values.
// You can construct a concrete instance of `BrowserSettingsAssociationMapInput` via:
//
//	BrowserSettingsAssociationMap{ "key": BrowserSettingsAssociationArgs{...} }
type BrowserSettingsAssociationMapInput interface {
	pulumi.Input

	ToBrowserSettingsAssociationMapOutput() BrowserSettingsAssociationMapOutput
	ToBrowserSettingsAssociationMapOutputWithContext(context.Context) BrowserSettingsAssociationMapOutput
}

type BrowserSettingsAssociationMap map[string]BrowserSettingsAssociationInput

func (BrowserSettingsAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BrowserSettingsAssociation)(nil)).Elem()
}

func (i BrowserSettingsAssociationMap) ToBrowserSettingsAssociationMapOutput() BrowserSettingsAssociationMapOutput {
	return i.ToBrowserSettingsAssociationMapOutputWithContext(context.Background())
}

func (i BrowserSettingsAssociationMap) ToBrowserSettingsAssociationMapOutputWithContext(ctx context.Context) BrowserSettingsAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrowserSettingsAssociationMapOutput)
}

type BrowserSettingsAssociationOutput struct{ *pulumi.OutputState }

func (BrowserSettingsAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrowserSettingsAssociation)(nil)).Elem()
}

func (o BrowserSettingsAssociationOutput) ToBrowserSettingsAssociationOutput() BrowserSettingsAssociationOutput {
	return o
}

func (o BrowserSettingsAssociationOutput) ToBrowserSettingsAssociationOutputWithContext(ctx context.Context) BrowserSettingsAssociationOutput {
	return o
}

// ARN of the browser settings to associate with the portal. Forces replacement if changed.
func (o BrowserSettingsAssociationOutput) BrowserSettingsArn() pulumi.StringOutput {
	return o.ApplyT(func(v *BrowserSettingsAssociation) pulumi.StringOutput { return v.BrowserSettingsArn }).(pulumi.StringOutput)
}

// ARN of the portal to associate with the browser settings. Forces replacement if changed.
//
// The following arguments are optional:
func (o BrowserSettingsAssociationOutput) PortalArn() pulumi.StringOutput {
	return o.ApplyT(func(v *BrowserSettingsAssociation) pulumi.StringOutput { return v.PortalArn }).(pulumi.StringOutput)
}

// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
func (o BrowserSettingsAssociationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *BrowserSettingsAssociation) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type BrowserSettingsAssociationArrayOutput struct{ *pulumi.OutputState }

func (BrowserSettingsAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BrowserSettingsAssociation)(nil)).Elem()
}

func (o BrowserSettingsAssociationArrayOutput) ToBrowserSettingsAssociationArrayOutput() BrowserSettingsAssociationArrayOutput {
	return o
}

func (o BrowserSettingsAssociationArrayOutput) ToBrowserSettingsAssociationArrayOutputWithContext(ctx context.Context) BrowserSettingsAssociationArrayOutput {
	return o
}

func (o BrowserSettingsAssociationArrayOutput) Index(i pulumi.IntInput) BrowserSettingsAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BrowserSettingsAssociation {
		return vs[0].([]*BrowserSettingsAssociation)[vs[1].(int)]
	}).(BrowserSettingsAssociationOutput)
}

type BrowserSettingsAssociationMapOutput struct{ *pulumi.OutputState }

func (BrowserSettingsAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BrowserSettingsAssociation)(nil)).Elem()
}

func (o BrowserSettingsAssociationMapOutput) ToBrowserSettingsAssociationMapOutput() BrowserSettingsAssociationMapOutput {
	return o
}

func (o BrowserSettingsAssociationMapOutput) ToBrowserSettingsAssociationMapOutputWithContext(ctx context.Context) BrowserSettingsAssociationMapOutput {
	return o
}

func (o BrowserSettingsAssociationMapOutput) MapIndex(k pulumi.StringInput) BrowserSettingsAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BrowserSettingsAssociation {
		return vs[0].(map[string]*BrowserSettingsAssociation)[vs[1].(string)]
	}).(BrowserSettingsAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BrowserSettingsAssociationInput)(nil)).Elem(), &BrowserSettingsAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*BrowserSettingsAssociationArrayInput)(nil)).Elem(), BrowserSettingsAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BrowserSettingsAssociationMapInput)(nil)).Elem(), BrowserSettingsAssociationMap{})
	pulumi.RegisterOutputType(BrowserSettingsAssociationOutput{})
	pulumi.RegisterOutputType(BrowserSettingsAssociationArrayOutput{})
	pulumi.RegisterOutputType(BrowserSettingsAssociationMapOutput{})
}
