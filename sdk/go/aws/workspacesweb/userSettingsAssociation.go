// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workspacesweb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS WorkSpaces Web User Settings Association.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/workspacesweb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := workspacesweb.NewPortal(ctx, "example", &workspacesweb.PortalArgs{
//				DisplayName: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleUserSettings, err := workspacesweb.NewUserSettings(ctx, "example", &workspacesweb.UserSettingsArgs{
//				CopyAllowed:     pulumi.String("Enabled"),
//				DownloadAllowed: pulumi.String("Enabled"),
//				PasteAllowed:    pulumi.String("Enabled"),
//				PrintAllowed:    pulumi.String("Enabled"),
//				UploadAllowed:   pulumi.String("Enabled"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = workspacesweb.NewUserSettingsAssociation(ctx, "example", &workspacesweb.UserSettingsAssociationArgs{
//				UserSettingsArn: exampleUserSettings.UserSettingsArn,
//				PortalArn:       example.PortalArn,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type UserSettingsAssociation struct {
	pulumi.CustomResourceState

	// ARN of the portal to associate with the user settings. Forces replacement if changed.
	//
	// The following arguments are optional:
	PortalArn pulumi.StringOutput `pulumi:"portalArn"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
	// ARN of the user settings to associate with the portal. Forces replacement if changed.
	UserSettingsArn pulumi.StringOutput `pulumi:"userSettingsArn"`
}

// NewUserSettingsAssociation registers a new resource with the given unique name, arguments, and options.
func NewUserSettingsAssociation(ctx *pulumi.Context,
	name string, args *UserSettingsAssociationArgs, opts ...pulumi.ResourceOption) (*UserSettingsAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PortalArn == nil {
		return nil, errors.New("invalid value for required argument 'PortalArn'")
	}
	if args.UserSettingsArn == nil {
		return nil, errors.New("invalid value for required argument 'UserSettingsArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserSettingsAssociation
	err := ctx.RegisterResource("aws:workspacesweb/userSettingsAssociation:UserSettingsAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserSettingsAssociation gets an existing UserSettingsAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserSettingsAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserSettingsAssociationState, opts ...pulumi.ResourceOption) (*UserSettingsAssociation, error) {
	var resource UserSettingsAssociation
	err := ctx.ReadResource("aws:workspacesweb/userSettingsAssociation:UserSettingsAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserSettingsAssociation resources.
type userSettingsAssociationState struct {
	// ARN of the portal to associate with the user settings. Forces replacement if changed.
	//
	// The following arguments are optional:
	PortalArn *string `pulumi:"portalArn"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// ARN of the user settings to associate with the portal. Forces replacement if changed.
	UserSettingsArn *string `pulumi:"userSettingsArn"`
}

type UserSettingsAssociationState struct {
	// ARN of the portal to associate with the user settings. Forces replacement if changed.
	//
	// The following arguments are optional:
	PortalArn pulumi.StringPtrInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// ARN of the user settings to associate with the portal. Forces replacement if changed.
	UserSettingsArn pulumi.StringPtrInput
}

func (UserSettingsAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*userSettingsAssociationState)(nil)).Elem()
}

type userSettingsAssociationArgs struct {
	// ARN of the portal to associate with the user settings. Forces replacement if changed.
	//
	// The following arguments are optional:
	PortalArn string `pulumi:"portalArn"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// ARN of the user settings to associate with the portal. Forces replacement if changed.
	UserSettingsArn string `pulumi:"userSettingsArn"`
}

// The set of arguments for constructing a UserSettingsAssociation resource.
type UserSettingsAssociationArgs struct {
	// ARN of the portal to associate with the user settings. Forces replacement if changed.
	//
	// The following arguments are optional:
	PortalArn pulumi.StringInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// ARN of the user settings to associate with the portal. Forces replacement if changed.
	UserSettingsArn pulumi.StringInput
}

func (UserSettingsAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userSettingsAssociationArgs)(nil)).Elem()
}

type UserSettingsAssociationInput interface {
	pulumi.Input

	ToUserSettingsAssociationOutput() UserSettingsAssociationOutput
	ToUserSettingsAssociationOutputWithContext(ctx context.Context) UserSettingsAssociationOutput
}

func (*UserSettingsAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**UserSettingsAssociation)(nil)).Elem()
}

func (i *UserSettingsAssociation) ToUserSettingsAssociationOutput() UserSettingsAssociationOutput {
	return i.ToUserSettingsAssociationOutputWithContext(context.Background())
}

func (i *UserSettingsAssociation) ToUserSettingsAssociationOutputWithContext(ctx context.Context) UserSettingsAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserSettingsAssociationOutput)
}

// UserSettingsAssociationArrayInput is an input type that accepts UserSettingsAssociationArray and UserSettingsAssociationArrayOutput values.
// You can construct a concrete instance of `UserSettingsAssociationArrayInput` via:
//
//	UserSettingsAssociationArray{ UserSettingsAssociationArgs{...} }
type UserSettingsAssociationArrayInput interface {
	pulumi.Input

	ToUserSettingsAssociationArrayOutput() UserSettingsAssociationArrayOutput
	ToUserSettingsAssociationArrayOutputWithContext(context.Context) UserSettingsAssociationArrayOutput
}

type UserSettingsAssociationArray []UserSettingsAssociationInput

func (UserSettingsAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserSettingsAssociation)(nil)).Elem()
}

func (i UserSettingsAssociationArray) ToUserSettingsAssociationArrayOutput() UserSettingsAssociationArrayOutput {
	return i.ToUserSettingsAssociationArrayOutputWithContext(context.Background())
}

func (i UserSettingsAssociationArray) ToUserSettingsAssociationArrayOutputWithContext(ctx context.Context) UserSettingsAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserSettingsAssociationArrayOutput)
}

// UserSettingsAssociationMapInput is an input type that accepts UserSettingsAssociationMap and UserSettingsAssociationMapOutput values.
// You can construct a concrete instance of `UserSettingsAssociationMapInput` via:
//
//	UserSettingsAssociationMap{ "key": UserSettingsAssociationArgs{...} }
type UserSettingsAssociationMapInput interface {
	pulumi.Input

	ToUserSettingsAssociationMapOutput() UserSettingsAssociationMapOutput
	ToUserSettingsAssociationMapOutputWithContext(context.Context) UserSettingsAssociationMapOutput
}

type UserSettingsAssociationMap map[string]UserSettingsAssociationInput

func (UserSettingsAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserSettingsAssociation)(nil)).Elem()
}

func (i UserSettingsAssociationMap) ToUserSettingsAssociationMapOutput() UserSettingsAssociationMapOutput {
	return i.ToUserSettingsAssociationMapOutputWithContext(context.Background())
}

func (i UserSettingsAssociationMap) ToUserSettingsAssociationMapOutputWithContext(ctx context.Context) UserSettingsAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserSettingsAssociationMapOutput)
}

type UserSettingsAssociationOutput struct{ *pulumi.OutputState }

func (UserSettingsAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserSettingsAssociation)(nil)).Elem()
}

func (o UserSettingsAssociationOutput) ToUserSettingsAssociationOutput() UserSettingsAssociationOutput {
	return o
}

func (o UserSettingsAssociationOutput) ToUserSettingsAssociationOutputWithContext(ctx context.Context) UserSettingsAssociationOutput {
	return o
}

// ARN of the portal to associate with the user settings. Forces replacement if changed.
//
// The following arguments are optional:
func (o UserSettingsAssociationOutput) PortalArn() pulumi.StringOutput {
	return o.ApplyT(func(v *UserSettingsAssociation) pulumi.StringOutput { return v.PortalArn }).(pulumi.StringOutput)
}

// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
func (o UserSettingsAssociationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *UserSettingsAssociation) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// ARN of the user settings to associate with the portal. Forces replacement if changed.
func (o UserSettingsAssociationOutput) UserSettingsArn() pulumi.StringOutput {
	return o.ApplyT(func(v *UserSettingsAssociation) pulumi.StringOutput { return v.UserSettingsArn }).(pulumi.StringOutput)
}

type UserSettingsAssociationArrayOutput struct{ *pulumi.OutputState }

func (UserSettingsAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserSettingsAssociation)(nil)).Elem()
}

func (o UserSettingsAssociationArrayOutput) ToUserSettingsAssociationArrayOutput() UserSettingsAssociationArrayOutput {
	return o
}

func (o UserSettingsAssociationArrayOutput) ToUserSettingsAssociationArrayOutputWithContext(ctx context.Context) UserSettingsAssociationArrayOutput {
	return o
}

func (o UserSettingsAssociationArrayOutput) Index(i pulumi.IntInput) UserSettingsAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserSettingsAssociation {
		return vs[0].([]*UserSettingsAssociation)[vs[1].(int)]
	}).(UserSettingsAssociationOutput)
}

type UserSettingsAssociationMapOutput struct{ *pulumi.OutputState }

func (UserSettingsAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserSettingsAssociation)(nil)).Elem()
}

func (o UserSettingsAssociationMapOutput) ToUserSettingsAssociationMapOutput() UserSettingsAssociationMapOutput {
	return o
}

func (o UserSettingsAssociationMapOutput) ToUserSettingsAssociationMapOutputWithContext(ctx context.Context) UserSettingsAssociationMapOutput {
	return o
}

func (o UserSettingsAssociationMapOutput) MapIndex(k pulumi.StringInput) UserSettingsAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserSettingsAssociation {
		return vs[0].(map[string]*UserSettingsAssociation)[vs[1].(string)]
	}).(UserSettingsAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserSettingsAssociationInput)(nil)).Elem(), &UserSettingsAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserSettingsAssociationArrayInput)(nil)).Elem(), UserSettingsAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserSettingsAssociationMapInput)(nil)).Elem(), UserSettingsAssociationMap{})
	pulumi.RegisterOutputType(UserSettingsAssociationOutput{})
	pulumi.RegisterOutputType(UserSettingsAssociationArrayOutput{})
	pulumi.RegisterOutputType(UserSettingsAssociationMapOutput{})
}
