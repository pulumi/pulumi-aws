// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workspacesweb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS WorkSpaces Web Portal.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/workspacesweb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := workspacesweb.NewPortal(ctx, "example", &workspacesweb.PortalArgs{
//				DisplayName:  pulumi.String("example-portal"),
//				InstanceType: pulumi.String("standard.regular"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Complete Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/kms"
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/workspacesweb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := kms.NewKey(ctx, "example", &kms.KeyArgs{
//				Description:          pulumi.String("KMS key for WorkSpaces Web Portal"),
//				DeletionWindowInDays: pulumi.Int(7),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = workspacesweb.NewPortal(ctx, "example", &workspacesweb.PortalArgs{
//				DisplayName:           pulumi.String("example-portal"),
//				InstanceType:          pulumi.String("standard.large"),
//				AuthenticationType:    pulumi.String("IAM_Identity_Center"),
//				CustomerManagedKey:    example.Arn,
//				MaxConcurrentSessions: pulumi.Int(10),
//				AdditionalEncryptionContext: pulumi.StringMap{
//					"Environment": pulumi.String("Production"),
//				},
//				Tags: pulumi.StringMap{
//					"Name": pulumi.String("example-portal"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import WorkSpaces Web Portal using the `portal_arn`. For example:
//
// ```sh
// $ pulumi import aws:workspacesweb/portal:Portal example arn:aws:workspaces-web:us-west-2:123456789012:portal/abcdef12345678
// ```
type Portal struct {
	pulumi.CustomResourceState

	// Additional encryption context for the customer managed key. Forces replacement if changed.
	AdditionalEncryptionContext pulumi.StringMapOutput `pulumi:"additionalEncryptionContext"`
	// Authentication type for the portal. Valid values: `Standard`, `IAM_Identity_Center`.
	AuthenticationType pulumi.StringOutput `pulumi:"authenticationType"`
	// ARN of the browser settings to use for the portal.
	BrowserSettingsArn pulumi.StringOutput `pulumi:"browserSettingsArn"`
	// Browser type of the portal.
	BrowserType pulumi.StringOutput `pulumi:"browserType"`
	// Creation date of the portal.
	CreationDate pulumi.StringOutput `pulumi:"creationDate"`
	// ARN of the customer managed key. Forces replacement if changed.
	CustomerManagedKey pulumi.StringPtrOutput `pulumi:"customerManagedKey"`
	// ARN of the data protection settings associated with the portal.
	DataProtectionSettingsArn pulumi.StringOutput `pulumi:"dataProtectionSettingsArn"`
	// Display name of the portal.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Instance type for the portal. Valid values: `standard.regular`, `standard.large`.
	InstanceType pulumi.StringOutput `pulumi:"instanceType"`
	// ARN of the IP access settings associated with the portal.
	IpAccessSettingsArn pulumi.StringOutput `pulumi:"ipAccessSettingsArn"`
	// Maximum number of concurrent sessions for the portal.
	MaxConcurrentSessions pulumi.IntOutput `pulumi:"maxConcurrentSessions"`
	// ARN of the network settings associated with the portal.
	NetworkSettingsArn pulumi.StringOutput `pulumi:"networkSettingsArn"`
	// ARN of the portal.
	PortalArn pulumi.StringOutput `pulumi:"portalArn"`
	// Endpoint URL of the portal.
	PortalEndpoint pulumi.StringOutput `pulumi:"portalEndpoint"`
	// Status of the portal.
	PortalStatus pulumi.StringOutput `pulumi:"portalStatus"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
	// Renderer type of the portal.
	RendererType pulumi.StringOutput `pulumi:"rendererType"`
	// ARN of the session logger associated with the portal.
	SessionLoggerArn pulumi.StringOutput `pulumi:"sessionLoggerArn"`
	// Reason for the current status of the portal.
	StatusReason pulumi.StringOutput `pulumi:"statusReason"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll  pulumi.StringMapOutput  `pulumi:"tagsAll"`
	Timeouts PortalTimeoutsPtrOutput `pulumi:"timeouts"`
	// ARN of the trust store associated with the portal.
	TrustStoreArn pulumi.StringOutput `pulumi:"trustStoreArn"`
	// ARN of the user access logging settings associated with the portal.
	UserAccessLoggingSettingsArn pulumi.StringOutput `pulumi:"userAccessLoggingSettingsArn"`
	// ARN of the user settings associated with the portal.
	UserSettingsArn pulumi.StringOutput `pulumi:"userSettingsArn"`
}

// NewPortal registers a new resource with the given unique name, arguments, and options.
func NewPortal(ctx *pulumi.Context,
	name string, args *PortalArgs, opts ...pulumi.ResourceOption) (*Portal, error) {
	if args == nil {
		args = &PortalArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Portal
	err := ctx.RegisterResource("aws:workspacesweb/portal:Portal", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPortal gets an existing Portal resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPortal(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PortalState, opts ...pulumi.ResourceOption) (*Portal, error) {
	var resource Portal
	err := ctx.ReadResource("aws:workspacesweb/portal:Portal", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Portal resources.
type portalState struct {
	// Additional encryption context for the customer managed key. Forces replacement if changed.
	AdditionalEncryptionContext map[string]string `pulumi:"additionalEncryptionContext"`
	// Authentication type for the portal. Valid values: `Standard`, `IAM_Identity_Center`.
	AuthenticationType *string `pulumi:"authenticationType"`
	// ARN of the browser settings to use for the portal.
	BrowserSettingsArn *string `pulumi:"browserSettingsArn"`
	// Browser type of the portal.
	BrowserType *string `pulumi:"browserType"`
	// Creation date of the portal.
	CreationDate *string `pulumi:"creationDate"`
	// ARN of the customer managed key. Forces replacement if changed.
	CustomerManagedKey *string `pulumi:"customerManagedKey"`
	// ARN of the data protection settings associated with the portal.
	DataProtectionSettingsArn *string `pulumi:"dataProtectionSettingsArn"`
	// Display name of the portal.
	DisplayName *string `pulumi:"displayName"`
	// Instance type for the portal. Valid values: `standard.regular`, `standard.large`.
	InstanceType *string `pulumi:"instanceType"`
	// ARN of the IP access settings associated with the portal.
	IpAccessSettingsArn *string `pulumi:"ipAccessSettingsArn"`
	// Maximum number of concurrent sessions for the portal.
	MaxConcurrentSessions *int `pulumi:"maxConcurrentSessions"`
	// ARN of the network settings associated with the portal.
	NetworkSettingsArn *string `pulumi:"networkSettingsArn"`
	// ARN of the portal.
	PortalArn *string `pulumi:"portalArn"`
	// Endpoint URL of the portal.
	PortalEndpoint *string `pulumi:"portalEndpoint"`
	// Status of the portal.
	PortalStatus *string `pulumi:"portalStatus"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// Renderer type of the portal.
	RendererType *string `pulumi:"rendererType"`
	// ARN of the session logger associated with the portal.
	SessionLoggerArn *string `pulumi:"sessionLoggerArn"`
	// Reason for the current status of the portal.
	StatusReason *string `pulumi:"statusReason"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll  map[string]string `pulumi:"tagsAll"`
	Timeouts *PortalTimeouts   `pulumi:"timeouts"`
	// ARN of the trust store associated with the portal.
	TrustStoreArn *string `pulumi:"trustStoreArn"`
	// ARN of the user access logging settings associated with the portal.
	UserAccessLoggingSettingsArn *string `pulumi:"userAccessLoggingSettingsArn"`
	// ARN of the user settings associated with the portal.
	UserSettingsArn *string `pulumi:"userSettingsArn"`
}

type PortalState struct {
	// Additional encryption context for the customer managed key. Forces replacement if changed.
	AdditionalEncryptionContext pulumi.StringMapInput
	// Authentication type for the portal. Valid values: `Standard`, `IAM_Identity_Center`.
	AuthenticationType pulumi.StringPtrInput
	// ARN of the browser settings to use for the portal.
	BrowserSettingsArn pulumi.StringPtrInput
	// Browser type of the portal.
	BrowserType pulumi.StringPtrInput
	// Creation date of the portal.
	CreationDate pulumi.StringPtrInput
	// ARN of the customer managed key. Forces replacement if changed.
	CustomerManagedKey pulumi.StringPtrInput
	// ARN of the data protection settings associated with the portal.
	DataProtectionSettingsArn pulumi.StringPtrInput
	// Display name of the portal.
	DisplayName pulumi.StringPtrInput
	// Instance type for the portal. Valid values: `standard.regular`, `standard.large`.
	InstanceType pulumi.StringPtrInput
	// ARN of the IP access settings associated with the portal.
	IpAccessSettingsArn pulumi.StringPtrInput
	// Maximum number of concurrent sessions for the portal.
	MaxConcurrentSessions pulumi.IntPtrInput
	// ARN of the network settings associated with the portal.
	NetworkSettingsArn pulumi.StringPtrInput
	// ARN of the portal.
	PortalArn pulumi.StringPtrInput
	// Endpoint URL of the portal.
	PortalEndpoint pulumi.StringPtrInput
	// Status of the portal.
	PortalStatus pulumi.StringPtrInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// Renderer type of the portal.
	RendererType pulumi.StringPtrInput
	// ARN of the session logger associated with the portal.
	SessionLoggerArn pulumi.StringPtrInput
	// Reason for the current status of the portal.
	StatusReason pulumi.StringPtrInput
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll  pulumi.StringMapInput
	Timeouts PortalTimeoutsPtrInput
	// ARN of the trust store associated with the portal.
	TrustStoreArn pulumi.StringPtrInput
	// ARN of the user access logging settings associated with the portal.
	UserAccessLoggingSettingsArn pulumi.StringPtrInput
	// ARN of the user settings associated with the portal.
	UserSettingsArn pulumi.StringPtrInput
}

func (PortalState) ElementType() reflect.Type {
	return reflect.TypeOf((*portalState)(nil)).Elem()
}

type portalArgs struct {
	// Additional encryption context for the customer managed key. Forces replacement if changed.
	AdditionalEncryptionContext map[string]string `pulumi:"additionalEncryptionContext"`
	// Authentication type for the portal. Valid values: `Standard`, `IAM_Identity_Center`.
	AuthenticationType *string `pulumi:"authenticationType"`
	// ARN of the browser settings to use for the portal.
	BrowserSettingsArn *string `pulumi:"browserSettingsArn"`
	// ARN of the customer managed key. Forces replacement if changed.
	CustomerManagedKey *string `pulumi:"customerManagedKey"`
	// Display name of the portal.
	DisplayName *string `pulumi:"displayName"`
	// Instance type for the portal. Valid values: `standard.regular`, `standard.large`.
	InstanceType *string `pulumi:"instanceType"`
	// Maximum number of concurrent sessions for the portal.
	MaxConcurrentSessions *int `pulumi:"maxConcurrentSessions"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     map[string]string `pulumi:"tags"`
	Timeouts *PortalTimeouts   `pulumi:"timeouts"`
}

// The set of arguments for constructing a Portal resource.
type PortalArgs struct {
	// Additional encryption context for the customer managed key. Forces replacement if changed.
	AdditionalEncryptionContext pulumi.StringMapInput
	// Authentication type for the portal. Valid values: `Standard`, `IAM_Identity_Center`.
	AuthenticationType pulumi.StringPtrInput
	// ARN of the browser settings to use for the portal.
	BrowserSettingsArn pulumi.StringPtrInput
	// ARN of the customer managed key. Forces replacement if changed.
	CustomerManagedKey pulumi.StringPtrInput
	// Display name of the portal.
	DisplayName pulumi.StringPtrInput
	// Instance type for the portal. Valid values: `standard.regular`, `standard.large`.
	InstanceType pulumi.StringPtrInput
	// Maximum number of concurrent sessions for the portal.
	MaxConcurrentSessions pulumi.IntPtrInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     pulumi.StringMapInput
	Timeouts PortalTimeoutsPtrInput
}

func (PortalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*portalArgs)(nil)).Elem()
}

type PortalInput interface {
	pulumi.Input

	ToPortalOutput() PortalOutput
	ToPortalOutputWithContext(ctx context.Context) PortalOutput
}

func (*Portal) ElementType() reflect.Type {
	return reflect.TypeOf((**Portal)(nil)).Elem()
}

func (i *Portal) ToPortalOutput() PortalOutput {
	return i.ToPortalOutputWithContext(context.Background())
}

func (i *Portal) ToPortalOutputWithContext(ctx context.Context) PortalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortalOutput)
}

// PortalArrayInput is an input type that accepts PortalArray and PortalArrayOutput values.
// You can construct a concrete instance of `PortalArrayInput` via:
//
//	PortalArray{ PortalArgs{...} }
type PortalArrayInput interface {
	pulumi.Input

	ToPortalArrayOutput() PortalArrayOutput
	ToPortalArrayOutputWithContext(context.Context) PortalArrayOutput
}

type PortalArray []PortalInput

func (PortalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Portal)(nil)).Elem()
}

func (i PortalArray) ToPortalArrayOutput() PortalArrayOutput {
	return i.ToPortalArrayOutputWithContext(context.Background())
}

func (i PortalArray) ToPortalArrayOutputWithContext(ctx context.Context) PortalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortalArrayOutput)
}

// PortalMapInput is an input type that accepts PortalMap and PortalMapOutput values.
// You can construct a concrete instance of `PortalMapInput` via:
//
//	PortalMap{ "key": PortalArgs{...} }
type PortalMapInput interface {
	pulumi.Input

	ToPortalMapOutput() PortalMapOutput
	ToPortalMapOutputWithContext(context.Context) PortalMapOutput
}

type PortalMap map[string]PortalInput

func (PortalMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Portal)(nil)).Elem()
}

func (i PortalMap) ToPortalMapOutput() PortalMapOutput {
	return i.ToPortalMapOutputWithContext(context.Background())
}

func (i PortalMap) ToPortalMapOutputWithContext(ctx context.Context) PortalMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortalMapOutput)
}

type PortalOutput struct{ *pulumi.OutputState }

func (PortalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Portal)(nil)).Elem()
}

func (o PortalOutput) ToPortalOutput() PortalOutput {
	return o
}

func (o PortalOutput) ToPortalOutputWithContext(ctx context.Context) PortalOutput {
	return o
}

// Additional encryption context for the customer managed key. Forces replacement if changed.
func (o PortalOutput) AdditionalEncryptionContext() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringMapOutput { return v.AdditionalEncryptionContext }).(pulumi.StringMapOutput)
}

// Authentication type for the portal. Valid values: `Standard`, `IAM_Identity_Center`.
func (o PortalOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringOutput { return v.AuthenticationType }).(pulumi.StringOutput)
}

// ARN of the browser settings to use for the portal.
func (o PortalOutput) BrowserSettingsArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringOutput { return v.BrowserSettingsArn }).(pulumi.StringOutput)
}

// Browser type of the portal.
func (o PortalOutput) BrowserType() pulumi.StringOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringOutput { return v.BrowserType }).(pulumi.StringOutput)
}

// Creation date of the portal.
func (o PortalOutput) CreationDate() pulumi.StringOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringOutput { return v.CreationDate }).(pulumi.StringOutput)
}

// ARN of the customer managed key. Forces replacement if changed.
func (o PortalOutput) CustomerManagedKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringPtrOutput { return v.CustomerManagedKey }).(pulumi.StringPtrOutput)
}

// ARN of the data protection settings associated with the portal.
func (o PortalOutput) DataProtectionSettingsArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringOutput { return v.DataProtectionSettingsArn }).(pulumi.StringOutput)
}

// Display name of the portal.
func (o PortalOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Instance type for the portal. Valid values: `standard.regular`, `standard.large`.
func (o PortalOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringOutput { return v.InstanceType }).(pulumi.StringOutput)
}

// ARN of the IP access settings associated with the portal.
func (o PortalOutput) IpAccessSettingsArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringOutput { return v.IpAccessSettingsArn }).(pulumi.StringOutput)
}

// Maximum number of concurrent sessions for the portal.
func (o PortalOutput) MaxConcurrentSessions() pulumi.IntOutput {
	return o.ApplyT(func(v *Portal) pulumi.IntOutput { return v.MaxConcurrentSessions }).(pulumi.IntOutput)
}

// ARN of the network settings associated with the portal.
func (o PortalOutput) NetworkSettingsArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringOutput { return v.NetworkSettingsArn }).(pulumi.StringOutput)
}

// ARN of the portal.
func (o PortalOutput) PortalArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringOutput { return v.PortalArn }).(pulumi.StringOutput)
}

// Endpoint URL of the portal.
func (o PortalOutput) PortalEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringOutput { return v.PortalEndpoint }).(pulumi.StringOutput)
}

// Status of the portal.
func (o PortalOutput) PortalStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringOutput { return v.PortalStatus }).(pulumi.StringOutput)
}

// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
func (o PortalOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Renderer type of the portal.
func (o PortalOutput) RendererType() pulumi.StringOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringOutput { return v.RendererType }).(pulumi.StringOutput)
}

// ARN of the session logger associated with the portal.
func (o PortalOutput) SessionLoggerArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringOutput { return v.SessionLoggerArn }).(pulumi.StringOutput)
}

// Reason for the current status of the portal.
func (o PortalOutput) StatusReason() pulumi.StringOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringOutput { return v.StatusReason }).(pulumi.StringOutput)
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o PortalOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o PortalOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o PortalOutput) Timeouts() PortalTimeoutsPtrOutput {
	return o.ApplyT(func(v *Portal) PortalTimeoutsPtrOutput { return v.Timeouts }).(PortalTimeoutsPtrOutput)
}

// ARN of the trust store associated with the portal.
func (o PortalOutput) TrustStoreArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringOutput { return v.TrustStoreArn }).(pulumi.StringOutput)
}

// ARN of the user access logging settings associated with the portal.
func (o PortalOutput) UserAccessLoggingSettingsArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringOutput { return v.UserAccessLoggingSettingsArn }).(pulumi.StringOutput)
}

// ARN of the user settings associated with the portal.
func (o PortalOutput) UserSettingsArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringOutput { return v.UserSettingsArn }).(pulumi.StringOutput)
}

type PortalArrayOutput struct{ *pulumi.OutputState }

func (PortalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Portal)(nil)).Elem()
}

func (o PortalArrayOutput) ToPortalArrayOutput() PortalArrayOutput {
	return o
}

func (o PortalArrayOutput) ToPortalArrayOutputWithContext(ctx context.Context) PortalArrayOutput {
	return o
}

func (o PortalArrayOutput) Index(i pulumi.IntInput) PortalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Portal {
		return vs[0].([]*Portal)[vs[1].(int)]
	}).(PortalOutput)
}

type PortalMapOutput struct{ *pulumi.OutputState }

func (PortalMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Portal)(nil)).Elem()
}

func (o PortalMapOutput) ToPortalMapOutput() PortalMapOutput {
	return o
}

func (o PortalMapOutput) ToPortalMapOutputWithContext(ctx context.Context) PortalMapOutput {
	return o
}

func (o PortalMapOutput) MapIndex(k pulumi.StringInput) PortalOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Portal {
		return vs[0].(map[string]*Portal)[vs[1].(string)]
	}).(PortalOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PortalInput)(nil)).Elem(), &Portal{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortalArrayInput)(nil)).Elem(), PortalArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortalMapInput)(nil)).Elem(), PortalMap{})
	pulumi.RegisterOutputType(PortalOutput{})
	pulumi.RegisterOutputType(PortalArrayOutput{})
	pulumi.RegisterOutputType(PortalMapOutput{})
}
