// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workspacesweb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS WorkSpaces Web Session Logger Association.
//
// ## Example Usage
//
// ## Import
//
// Using `pulumi import`, import WorkSpaces Web Session Logger Association using the `session_logger_arn,portal_arn`. For example:
//
// ```sh
// $ pulumi import aws:workspacesweb/sessionLoggerAssociation:SessionLoggerAssociation example arn:aws:workspaces-web:us-west-2:123456789012:sessionLogger/session_logger-id-12345678,arn:aws:workspaces-web:us-west-2:123456789012:portal/portal-id-12345678
// ```
type SessionLoggerAssociation struct {
	pulumi.CustomResourceState

	// ARN of the web portal.
	PortalArn pulumi.StringOutput `pulumi:"portalArn"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
	// ARN of the session logger.
	//
	// The following arguments are optional:
	SessionLoggerArn pulumi.StringOutput `pulumi:"sessionLoggerArn"`
}

// NewSessionLoggerAssociation registers a new resource with the given unique name, arguments, and options.
func NewSessionLoggerAssociation(ctx *pulumi.Context,
	name string, args *SessionLoggerAssociationArgs, opts ...pulumi.ResourceOption) (*SessionLoggerAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PortalArn == nil {
		return nil, errors.New("invalid value for required argument 'PortalArn'")
	}
	if args.SessionLoggerArn == nil {
		return nil, errors.New("invalid value for required argument 'SessionLoggerArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SessionLoggerAssociation
	err := ctx.RegisterResource("aws:workspacesweb/sessionLoggerAssociation:SessionLoggerAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSessionLoggerAssociation gets an existing SessionLoggerAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSessionLoggerAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SessionLoggerAssociationState, opts ...pulumi.ResourceOption) (*SessionLoggerAssociation, error) {
	var resource SessionLoggerAssociation
	err := ctx.ReadResource("aws:workspacesweb/sessionLoggerAssociation:SessionLoggerAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SessionLoggerAssociation resources.
type sessionLoggerAssociationState struct {
	// ARN of the web portal.
	PortalArn *string `pulumi:"portalArn"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// ARN of the session logger.
	//
	// The following arguments are optional:
	SessionLoggerArn *string `pulumi:"sessionLoggerArn"`
}

type SessionLoggerAssociationState struct {
	// ARN of the web portal.
	PortalArn pulumi.StringPtrInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// ARN of the session logger.
	//
	// The following arguments are optional:
	SessionLoggerArn pulumi.StringPtrInput
}

func (SessionLoggerAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*sessionLoggerAssociationState)(nil)).Elem()
}

type sessionLoggerAssociationArgs struct {
	// ARN of the web portal.
	PortalArn string `pulumi:"portalArn"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// ARN of the session logger.
	//
	// The following arguments are optional:
	SessionLoggerArn string `pulumi:"sessionLoggerArn"`
}

// The set of arguments for constructing a SessionLoggerAssociation resource.
type SessionLoggerAssociationArgs struct {
	// ARN of the web portal.
	PortalArn pulumi.StringInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// ARN of the session logger.
	//
	// The following arguments are optional:
	SessionLoggerArn pulumi.StringInput
}

func (SessionLoggerAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sessionLoggerAssociationArgs)(nil)).Elem()
}

type SessionLoggerAssociationInput interface {
	pulumi.Input

	ToSessionLoggerAssociationOutput() SessionLoggerAssociationOutput
	ToSessionLoggerAssociationOutputWithContext(ctx context.Context) SessionLoggerAssociationOutput
}

func (*SessionLoggerAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**SessionLoggerAssociation)(nil)).Elem()
}

func (i *SessionLoggerAssociation) ToSessionLoggerAssociationOutput() SessionLoggerAssociationOutput {
	return i.ToSessionLoggerAssociationOutputWithContext(context.Background())
}

func (i *SessionLoggerAssociation) ToSessionLoggerAssociationOutputWithContext(ctx context.Context) SessionLoggerAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SessionLoggerAssociationOutput)
}

// SessionLoggerAssociationArrayInput is an input type that accepts SessionLoggerAssociationArray and SessionLoggerAssociationArrayOutput values.
// You can construct a concrete instance of `SessionLoggerAssociationArrayInput` via:
//
//	SessionLoggerAssociationArray{ SessionLoggerAssociationArgs{...} }
type SessionLoggerAssociationArrayInput interface {
	pulumi.Input

	ToSessionLoggerAssociationArrayOutput() SessionLoggerAssociationArrayOutput
	ToSessionLoggerAssociationArrayOutputWithContext(context.Context) SessionLoggerAssociationArrayOutput
}

type SessionLoggerAssociationArray []SessionLoggerAssociationInput

func (SessionLoggerAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SessionLoggerAssociation)(nil)).Elem()
}

func (i SessionLoggerAssociationArray) ToSessionLoggerAssociationArrayOutput() SessionLoggerAssociationArrayOutput {
	return i.ToSessionLoggerAssociationArrayOutputWithContext(context.Background())
}

func (i SessionLoggerAssociationArray) ToSessionLoggerAssociationArrayOutputWithContext(ctx context.Context) SessionLoggerAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SessionLoggerAssociationArrayOutput)
}

// SessionLoggerAssociationMapInput is an input type that accepts SessionLoggerAssociationMap and SessionLoggerAssociationMapOutput values.
// You can construct a concrete instance of `SessionLoggerAssociationMapInput` via:
//
//	SessionLoggerAssociationMap{ "key": SessionLoggerAssociationArgs{...} }
type SessionLoggerAssociationMapInput interface {
	pulumi.Input

	ToSessionLoggerAssociationMapOutput() SessionLoggerAssociationMapOutput
	ToSessionLoggerAssociationMapOutputWithContext(context.Context) SessionLoggerAssociationMapOutput
}

type SessionLoggerAssociationMap map[string]SessionLoggerAssociationInput

func (SessionLoggerAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SessionLoggerAssociation)(nil)).Elem()
}

func (i SessionLoggerAssociationMap) ToSessionLoggerAssociationMapOutput() SessionLoggerAssociationMapOutput {
	return i.ToSessionLoggerAssociationMapOutputWithContext(context.Background())
}

func (i SessionLoggerAssociationMap) ToSessionLoggerAssociationMapOutputWithContext(ctx context.Context) SessionLoggerAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SessionLoggerAssociationMapOutput)
}

type SessionLoggerAssociationOutput struct{ *pulumi.OutputState }

func (SessionLoggerAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SessionLoggerAssociation)(nil)).Elem()
}

func (o SessionLoggerAssociationOutput) ToSessionLoggerAssociationOutput() SessionLoggerAssociationOutput {
	return o
}

func (o SessionLoggerAssociationOutput) ToSessionLoggerAssociationOutputWithContext(ctx context.Context) SessionLoggerAssociationOutput {
	return o
}

// ARN of the web portal.
func (o SessionLoggerAssociationOutput) PortalArn() pulumi.StringOutput {
	return o.ApplyT(func(v *SessionLoggerAssociation) pulumi.StringOutput { return v.PortalArn }).(pulumi.StringOutput)
}

// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
func (o SessionLoggerAssociationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SessionLoggerAssociation) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// ARN of the session logger.
//
// The following arguments are optional:
func (o SessionLoggerAssociationOutput) SessionLoggerArn() pulumi.StringOutput {
	return o.ApplyT(func(v *SessionLoggerAssociation) pulumi.StringOutput { return v.SessionLoggerArn }).(pulumi.StringOutput)
}

type SessionLoggerAssociationArrayOutput struct{ *pulumi.OutputState }

func (SessionLoggerAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SessionLoggerAssociation)(nil)).Elem()
}

func (o SessionLoggerAssociationArrayOutput) ToSessionLoggerAssociationArrayOutput() SessionLoggerAssociationArrayOutput {
	return o
}

func (o SessionLoggerAssociationArrayOutput) ToSessionLoggerAssociationArrayOutputWithContext(ctx context.Context) SessionLoggerAssociationArrayOutput {
	return o
}

func (o SessionLoggerAssociationArrayOutput) Index(i pulumi.IntInput) SessionLoggerAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SessionLoggerAssociation {
		return vs[0].([]*SessionLoggerAssociation)[vs[1].(int)]
	}).(SessionLoggerAssociationOutput)
}

type SessionLoggerAssociationMapOutput struct{ *pulumi.OutputState }

func (SessionLoggerAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SessionLoggerAssociation)(nil)).Elem()
}

func (o SessionLoggerAssociationMapOutput) ToSessionLoggerAssociationMapOutput() SessionLoggerAssociationMapOutput {
	return o
}

func (o SessionLoggerAssociationMapOutput) ToSessionLoggerAssociationMapOutputWithContext(ctx context.Context) SessionLoggerAssociationMapOutput {
	return o
}

func (o SessionLoggerAssociationMapOutput) MapIndex(k pulumi.StringInput) SessionLoggerAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SessionLoggerAssociation {
		return vs[0].(map[string]*SessionLoggerAssociation)[vs[1].(string)]
	}).(SessionLoggerAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SessionLoggerAssociationInput)(nil)).Elem(), &SessionLoggerAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*SessionLoggerAssociationArrayInput)(nil)).Elem(), SessionLoggerAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SessionLoggerAssociationMapInput)(nil)).Elem(), SessionLoggerAssociationMap{})
	pulumi.RegisterOutputType(SessionLoggerAssociationOutput{})
	pulumi.RegisterOutputType(SessionLoggerAssociationArrayOutput{})
	pulumi.RegisterOutputType(SessionLoggerAssociationMapOutput{})
}
