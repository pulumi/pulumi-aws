// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workspacesweb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS WorkSpaces Web Trust Store.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/workspacesweb"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			invokeFile, err := std.File(ctx, &std.FileArgs{
//				Input: "certificate.pem",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = workspacesweb.NewTrustStore(ctx, "example", &workspacesweb.TrustStoreArgs{
//				Certificates: workspacesweb.TrustStoreCertificateArray{
//					&workspacesweb.TrustStoreCertificateArgs{
//						Body: pulumi.String(invokeFile.Result),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Multiple Certificates
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/workspacesweb"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			invokeFile, err := std.File(ctx, &std.FileArgs{
//				Input: "certificate1.pem",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			invokeFile1, err := std.File(ctx, &std.FileArgs{
//				Input: "certificate2.pem",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = workspacesweb.NewTrustStore(ctx, "example", &workspacesweb.TrustStoreArgs{
//				Certificates: workspacesweb.TrustStoreCertificateArray{
//					&workspacesweb.TrustStoreCertificateArgs{
//						Body: pulumi.String(invokeFile.Result),
//					},
//					&workspacesweb.TrustStoreCertificateArgs{
//						Body: pulumi.String(invokeFile1.Result),
//					},
//				},
//				Tags: pulumi.StringMap{
//					"Name": pulumi.String("example-trust-store"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import WorkSpaces Web Trust Store using the `trust_store_arn`. For example:
//
// ```sh
// $ pulumi import aws:workspacesweb/trustStore:TrustStore example arn:aws:workspaces-web:us-west-2:123456789012:trustStore/trust_store-id-12345678
// ```
type TrustStore struct {
	pulumi.CustomResourceState

	// List of ARNs of the web portals associated with the trust store.
	AssociatedPortalArns pulumi.StringArrayOutput `pulumi:"associatedPortalArns"`
	// Set of certificates to include in the trust store. See Certificate below.
	Certificates TrustStoreCertificateArrayOutput `pulumi:"certificates"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// ARN of the trust store.
	TrustStoreArn pulumi.StringOutput `pulumi:"trustStoreArn"`
}

// NewTrustStore registers a new resource with the given unique name, arguments, and options.
func NewTrustStore(ctx *pulumi.Context,
	name string, args *TrustStoreArgs, opts ...pulumi.ResourceOption) (*TrustStore, error) {
	if args == nil {
		args = &TrustStoreArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TrustStore
	err := ctx.RegisterResource("aws:workspacesweb/trustStore:TrustStore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrustStore gets an existing TrustStore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrustStore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrustStoreState, opts ...pulumi.ResourceOption) (*TrustStore, error) {
	var resource TrustStore
	err := ctx.ReadResource("aws:workspacesweb/trustStore:TrustStore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TrustStore resources.
type trustStoreState struct {
	// List of ARNs of the web portals associated with the trust store.
	AssociatedPortalArns []string `pulumi:"associatedPortalArns"`
	// Set of certificates to include in the trust store. See Certificate below.
	Certificates []TrustStoreCertificate `pulumi:"certificates"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// ARN of the trust store.
	TrustStoreArn *string `pulumi:"trustStoreArn"`
}

type TrustStoreState struct {
	// List of ARNs of the web portals associated with the trust store.
	AssociatedPortalArns pulumi.StringArrayInput
	// Set of certificates to include in the trust store. See Certificate below.
	Certificates TrustStoreCertificateArrayInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapInput
	// ARN of the trust store.
	TrustStoreArn pulumi.StringPtrInput
}

func (TrustStoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*trustStoreState)(nil)).Elem()
}

type trustStoreArgs struct {
	// Set of certificates to include in the trust store. See Certificate below.
	Certificates []TrustStoreCertificate `pulumi:"certificates"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a TrustStore resource.
type TrustStoreArgs struct {
	// Set of certificates to include in the trust store. See Certificate below.
	Certificates TrustStoreCertificateArrayInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
}

func (TrustStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trustStoreArgs)(nil)).Elem()
}

type TrustStoreInput interface {
	pulumi.Input

	ToTrustStoreOutput() TrustStoreOutput
	ToTrustStoreOutputWithContext(ctx context.Context) TrustStoreOutput
}

func (*TrustStore) ElementType() reflect.Type {
	return reflect.TypeOf((**TrustStore)(nil)).Elem()
}

func (i *TrustStore) ToTrustStoreOutput() TrustStoreOutput {
	return i.ToTrustStoreOutputWithContext(context.Background())
}

func (i *TrustStore) ToTrustStoreOutputWithContext(ctx context.Context) TrustStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustStoreOutput)
}

// TrustStoreArrayInput is an input type that accepts TrustStoreArray and TrustStoreArrayOutput values.
// You can construct a concrete instance of `TrustStoreArrayInput` via:
//
//	TrustStoreArray{ TrustStoreArgs{...} }
type TrustStoreArrayInput interface {
	pulumi.Input

	ToTrustStoreArrayOutput() TrustStoreArrayOutput
	ToTrustStoreArrayOutputWithContext(context.Context) TrustStoreArrayOutput
}

type TrustStoreArray []TrustStoreInput

func (TrustStoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TrustStore)(nil)).Elem()
}

func (i TrustStoreArray) ToTrustStoreArrayOutput() TrustStoreArrayOutput {
	return i.ToTrustStoreArrayOutputWithContext(context.Background())
}

func (i TrustStoreArray) ToTrustStoreArrayOutputWithContext(ctx context.Context) TrustStoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustStoreArrayOutput)
}

// TrustStoreMapInput is an input type that accepts TrustStoreMap and TrustStoreMapOutput values.
// You can construct a concrete instance of `TrustStoreMapInput` via:
//
//	TrustStoreMap{ "key": TrustStoreArgs{...} }
type TrustStoreMapInput interface {
	pulumi.Input

	ToTrustStoreMapOutput() TrustStoreMapOutput
	ToTrustStoreMapOutputWithContext(context.Context) TrustStoreMapOutput
}

type TrustStoreMap map[string]TrustStoreInput

func (TrustStoreMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TrustStore)(nil)).Elem()
}

func (i TrustStoreMap) ToTrustStoreMapOutput() TrustStoreMapOutput {
	return i.ToTrustStoreMapOutputWithContext(context.Background())
}

func (i TrustStoreMap) ToTrustStoreMapOutputWithContext(ctx context.Context) TrustStoreMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustStoreMapOutput)
}

type TrustStoreOutput struct{ *pulumi.OutputState }

func (TrustStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrustStore)(nil)).Elem()
}

func (o TrustStoreOutput) ToTrustStoreOutput() TrustStoreOutput {
	return o
}

func (o TrustStoreOutput) ToTrustStoreOutputWithContext(ctx context.Context) TrustStoreOutput {
	return o
}

// List of ARNs of the web portals associated with the trust store.
func (o TrustStoreOutput) AssociatedPortalArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TrustStore) pulumi.StringArrayOutput { return v.AssociatedPortalArns }).(pulumi.StringArrayOutput)
}

// Set of certificates to include in the trust store. See Certificate below.
func (o TrustStoreOutput) Certificates() TrustStoreCertificateArrayOutput {
	return o.ApplyT(func(v *TrustStore) TrustStoreCertificateArrayOutput { return v.Certificates }).(TrustStoreCertificateArrayOutput)
}

// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
func (o TrustStoreOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *TrustStore) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o TrustStoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TrustStore) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o TrustStoreOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TrustStore) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// ARN of the trust store.
func (o TrustStoreOutput) TrustStoreArn() pulumi.StringOutput {
	return o.ApplyT(func(v *TrustStore) pulumi.StringOutput { return v.TrustStoreArn }).(pulumi.StringOutput)
}

type TrustStoreArrayOutput struct{ *pulumi.OutputState }

func (TrustStoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TrustStore)(nil)).Elem()
}

func (o TrustStoreArrayOutput) ToTrustStoreArrayOutput() TrustStoreArrayOutput {
	return o
}

func (o TrustStoreArrayOutput) ToTrustStoreArrayOutputWithContext(ctx context.Context) TrustStoreArrayOutput {
	return o
}

func (o TrustStoreArrayOutput) Index(i pulumi.IntInput) TrustStoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TrustStore {
		return vs[0].([]*TrustStore)[vs[1].(int)]
	}).(TrustStoreOutput)
}

type TrustStoreMapOutput struct{ *pulumi.OutputState }

func (TrustStoreMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TrustStore)(nil)).Elem()
}

func (o TrustStoreMapOutput) ToTrustStoreMapOutput() TrustStoreMapOutput {
	return o
}

func (o TrustStoreMapOutput) ToTrustStoreMapOutputWithContext(ctx context.Context) TrustStoreMapOutput {
	return o
}

func (o TrustStoreMapOutput) MapIndex(k pulumi.StringInput) TrustStoreOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TrustStore {
		return vs[0].(map[string]*TrustStore)[vs[1].(string)]
	}).(TrustStoreOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TrustStoreInput)(nil)).Elem(), &TrustStore{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrustStoreArrayInput)(nil)).Elem(), TrustStoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrustStoreMapInput)(nil)).Elem(), TrustStoreMap{})
	pulumi.RegisterOutputType(TrustStoreOutput{})
	pulumi.RegisterOutputType(TrustStoreArrayOutput{})
	pulumi.RegisterOutputType(TrustStoreMapOutput{})
}
