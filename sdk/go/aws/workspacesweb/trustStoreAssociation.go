// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workspacesweb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS WorkSpaces Web Trust Store Association.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/workspacesweb"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := workspacesweb.NewPortal(ctx, "example", &workspacesweb.PortalArgs{
//				DisplayName: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			invokeBase64encode, err := std.Base64encode(ctx, &std.Base64encodeArgs{
//				Input: std.File(ctx, &std.FileArgs{
//					Input: "certificate.pem",
//				}, nil).Result,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleTrustStore, err := workspacesweb.NewTrustStore(ctx, "example", &workspacesweb.TrustStoreArgs{
//				CertificateList: []*string{
//					invokeBase64encode.Result,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = workspacesweb.NewTrustStoreAssociation(ctx, "example", &workspacesweb.TrustStoreAssociationArgs{
//				TrustStoreArn: exampleTrustStore.TrustStoreArn,
//				PortalArn:     example.PortalArn,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import WorkSpaces Web Trust Store Association using the `trust_store_arn,portal_arn`. For example:
//
// ```sh
// $ pulumi import aws:workspacesweb/trustStoreAssociation:TrustStoreAssociation example arn:aws:workspaces-web:us-west-2:123456789012:trustStore/trust_store-id-12345678,arn:aws:workspaces-web:us-west-2:123456789012:portal/portal-id-12345678
// ```
type TrustStoreAssociation struct {
	pulumi.CustomResourceState

	// ARN of the portal to associate with the trust store. Forces replacement if changed.
	//
	// The following arguments are optional:
	PortalArn pulumi.StringOutput `pulumi:"portalArn"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
	// ARN of the trust store to associate with the portal. Forces replacement if changed.
	TrustStoreArn pulumi.StringOutput `pulumi:"trustStoreArn"`
}

// NewTrustStoreAssociation registers a new resource with the given unique name, arguments, and options.
func NewTrustStoreAssociation(ctx *pulumi.Context,
	name string, args *TrustStoreAssociationArgs, opts ...pulumi.ResourceOption) (*TrustStoreAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PortalArn == nil {
		return nil, errors.New("invalid value for required argument 'PortalArn'")
	}
	if args.TrustStoreArn == nil {
		return nil, errors.New("invalid value for required argument 'TrustStoreArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TrustStoreAssociation
	err := ctx.RegisterResource("aws:workspacesweb/trustStoreAssociation:TrustStoreAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrustStoreAssociation gets an existing TrustStoreAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrustStoreAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrustStoreAssociationState, opts ...pulumi.ResourceOption) (*TrustStoreAssociation, error) {
	var resource TrustStoreAssociation
	err := ctx.ReadResource("aws:workspacesweb/trustStoreAssociation:TrustStoreAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TrustStoreAssociation resources.
type trustStoreAssociationState struct {
	// ARN of the portal to associate with the trust store. Forces replacement if changed.
	//
	// The following arguments are optional:
	PortalArn *string `pulumi:"portalArn"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// ARN of the trust store to associate with the portal. Forces replacement if changed.
	TrustStoreArn *string `pulumi:"trustStoreArn"`
}

type TrustStoreAssociationState struct {
	// ARN of the portal to associate with the trust store. Forces replacement if changed.
	//
	// The following arguments are optional:
	PortalArn pulumi.StringPtrInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// ARN of the trust store to associate with the portal. Forces replacement if changed.
	TrustStoreArn pulumi.StringPtrInput
}

func (TrustStoreAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*trustStoreAssociationState)(nil)).Elem()
}

type trustStoreAssociationArgs struct {
	// ARN of the portal to associate with the trust store. Forces replacement if changed.
	//
	// The following arguments are optional:
	PortalArn string `pulumi:"portalArn"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// ARN of the trust store to associate with the portal. Forces replacement if changed.
	TrustStoreArn string `pulumi:"trustStoreArn"`
}

// The set of arguments for constructing a TrustStoreAssociation resource.
type TrustStoreAssociationArgs struct {
	// ARN of the portal to associate with the trust store. Forces replacement if changed.
	//
	// The following arguments are optional:
	PortalArn pulumi.StringInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// ARN of the trust store to associate with the portal. Forces replacement if changed.
	TrustStoreArn pulumi.StringInput
}

func (TrustStoreAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trustStoreAssociationArgs)(nil)).Elem()
}

type TrustStoreAssociationInput interface {
	pulumi.Input

	ToTrustStoreAssociationOutput() TrustStoreAssociationOutput
	ToTrustStoreAssociationOutputWithContext(ctx context.Context) TrustStoreAssociationOutput
}

func (*TrustStoreAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**TrustStoreAssociation)(nil)).Elem()
}

func (i *TrustStoreAssociation) ToTrustStoreAssociationOutput() TrustStoreAssociationOutput {
	return i.ToTrustStoreAssociationOutputWithContext(context.Background())
}

func (i *TrustStoreAssociation) ToTrustStoreAssociationOutputWithContext(ctx context.Context) TrustStoreAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustStoreAssociationOutput)
}

// TrustStoreAssociationArrayInput is an input type that accepts TrustStoreAssociationArray and TrustStoreAssociationArrayOutput values.
// You can construct a concrete instance of `TrustStoreAssociationArrayInput` via:
//
//	TrustStoreAssociationArray{ TrustStoreAssociationArgs{...} }
type TrustStoreAssociationArrayInput interface {
	pulumi.Input

	ToTrustStoreAssociationArrayOutput() TrustStoreAssociationArrayOutput
	ToTrustStoreAssociationArrayOutputWithContext(context.Context) TrustStoreAssociationArrayOutput
}

type TrustStoreAssociationArray []TrustStoreAssociationInput

func (TrustStoreAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TrustStoreAssociation)(nil)).Elem()
}

func (i TrustStoreAssociationArray) ToTrustStoreAssociationArrayOutput() TrustStoreAssociationArrayOutput {
	return i.ToTrustStoreAssociationArrayOutputWithContext(context.Background())
}

func (i TrustStoreAssociationArray) ToTrustStoreAssociationArrayOutputWithContext(ctx context.Context) TrustStoreAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustStoreAssociationArrayOutput)
}

// TrustStoreAssociationMapInput is an input type that accepts TrustStoreAssociationMap and TrustStoreAssociationMapOutput values.
// You can construct a concrete instance of `TrustStoreAssociationMapInput` via:
//
//	TrustStoreAssociationMap{ "key": TrustStoreAssociationArgs{...} }
type TrustStoreAssociationMapInput interface {
	pulumi.Input

	ToTrustStoreAssociationMapOutput() TrustStoreAssociationMapOutput
	ToTrustStoreAssociationMapOutputWithContext(context.Context) TrustStoreAssociationMapOutput
}

type TrustStoreAssociationMap map[string]TrustStoreAssociationInput

func (TrustStoreAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TrustStoreAssociation)(nil)).Elem()
}

func (i TrustStoreAssociationMap) ToTrustStoreAssociationMapOutput() TrustStoreAssociationMapOutput {
	return i.ToTrustStoreAssociationMapOutputWithContext(context.Background())
}

func (i TrustStoreAssociationMap) ToTrustStoreAssociationMapOutputWithContext(ctx context.Context) TrustStoreAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustStoreAssociationMapOutput)
}

type TrustStoreAssociationOutput struct{ *pulumi.OutputState }

func (TrustStoreAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrustStoreAssociation)(nil)).Elem()
}

func (o TrustStoreAssociationOutput) ToTrustStoreAssociationOutput() TrustStoreAssociationOutput {
	return o
}

func (o TrustStoreAssociationOutput) ToTrustStoreAssociationOutputWithContext(ctx context.Context) TrustStoreAssociationOutput {
	return o
}

// ARN of the portal to associate with the trust store. Forces replacement if changed.
//
// The following arguments are optional:
func (o TrustStoreAssociationOutput) PortalArn() pulumi.StringOutput {
	return o.ApplyT(func(v *TrustStoreAssociation) pulumi.StringOutput { return v.PortalArn }).(pulumi.StringOutput)
}

// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
func (o TrustStoreAssociationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *TrustStoreAssociation) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// ARN of the trust store to associate with the portal. Forces replacement if changed.
func (o TrustStoreAssociationOutput) TrustStoreArn() pulumi.StringOutput {
	return o.ApplyT(func(v *TrustStoreAssociation) pulumi.StringOutput { return v.TrustStoreArn }).(pulumi.StringOutput)
}

type TrustStoreAssociationArrayOutput struct{ *pulumi.OutputState }

func (TrustStoreAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TrustStoreAssociation)(nil)).Elem()
}

func (o TrustStoreAssociationArrayOutput) ToTrustStoreAssociationArrayOutput() TrustStoreAssociationArrayOutput {
	return o
}

func (o TrustStoreAssociationArrayOutput) ToTrustStoreAssociationArrayOutputWithContext(ctx context.Context) TrustStoreAssociationArrayOutput {
	return o
}

func (o TrustStoreAssociationArrayOutput) Index(i pulumi.IntInput) TrustStoreAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TrustStoreAssociation {
		return vs[0].([]*TrustStoreAssociation)[vs[1].(int)]
	}).(TrustStoreAssociationOutput)
}

type TrustStoreAssociationMapOutput struct{ *pulumi.OutputState }

func (TrustStoreAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TrustStoreAssociation)(nil)).Elem()
}

func (o TrustStoreAssociationMapOutput) ToTrustStoreAssociationMapOutput() TrustStoreAssociationMapOutput {
	return o
}

func (o TrustStoreAssociationMapOutput) ToTrustStoreAssociationMapOutputWithContext(ctx context.Context) TrustStoreAssociationMapOutput {
	return o
}

func (o TrustStoreAssociationMapOutput) MapIndex(k pulumi.StringInput) TrustStoreAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TrustStoreAssociation {
		return vs[0].(map[string]*TrustStoreAssociation)[vs[1].(string)]
	}).(TrustStoreAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TrustStoreAssociationInput)(nil)).Elem(), &TrustStoreAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrustStoreAssociationArrayInput)(nil)).Elem(), TrustStoreAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrustStoreAssociationMapInput)(nil)).Elem(), TrustStoreAssociationMap{})
	pulumi.RegisterOutputType(TrustStoreAssociationOutput{})
	pulumi.RegisterOutputType(TrustStoreAssociationArrayOutput{})
	pulumi.RegisterOutputType(TrustStoreAssociationMapOutput{})
}
