// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workspacesweb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS WorkSpaces Web Network Settings Association.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws"
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/ec2"
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/workspacesweb"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			available, err := aws.GetAvailabilityZones(ctx, &aws.GetAvailabilityZonesArgs{
//				State: pulumi.StringRef("available"),
//				Filters: []aws.GetAvailabilityZonesFilter{
//					{
//						Name: "opt-in-status",
//						Values: []string{
//							"opt-in-not-required",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			example, err := ec2.NewVpc(ctx, "example", &ec2.VpcArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//				Tags: pulumi.StringMap{
//					"Name": pulumi.String("example"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			var exampleSubnet []*ec2.Subnet
//			for index := 0; index < 2; index++ {
//				key0 := index
//				val0 := index
//				__res, err := ec2.NewSubnet(ctx, fmt.Sprintf("example-%v", key0), &ec2.SubnetArgs{
//					VpcId: example.ID(),
//					CidrBlock: pulumi.String(example.CidrBlock.ApplyT(func(cidrBlock string) (std.CidrsubnetResult, error) {
//						return std.CidrsubnetResult(interface{}(std.CidrsubnetOutput(ctx, std.CidrsubnetOutputArgs{
//							Input:   cidrBlock,
//							Newbits: 8,
//							Netnum:  val0,
//						}, nil))), nil
//					}).(std.CidrsubnetResultOutput).ApplyT(func(invoke std.CidrsubnetResult) (*string, error) {
//						return invoke.Result, nil
//					}).(pulumi.StringPtrOutput)),
//					AvailabilityZone: pulumi.String(available.Names[val0]),
//					Tags: pulumi.StringMap{
//						"Name": pulumi.String("example"),
//					},
//				})
//				if err != nil {
//					return err
//				}
//				exampleSubnet = append(exampleSubnet, __res)
//			}
//			var exampleSecurityGroup []*ec2.SecurityGroup
//			for index := 0; index < 2; index++ {
//				key0 := index
//				val0 := index
//				__res, err := ec2.NewSecurityGroup(ctx, fmt.Sprintf("example-%v", key0), &ec2.SecurityGroupArgs{
//					VpcId: example.ID(),
//					Name:  pulumi.Sprintf("example-%v", val0),
//					Tags: pulumi.StringMap{
//						"Name": pulumi.String("example"),
//					},
//				})
//				if err != nil {
//					return err
//				}
//				exampleSecurityGroup = append(exampleSecurityGroup, __res)
//			}
//			examplePortal, err := workspacesweb.NewPortal(ctx, "example", &workspacesweb.PortalArgs{
//				DisplayName: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleNetworkSettings, err := workspacesweb.NewNetworkSettings(ctx, "example", &workspacesweb.NetworkSettingsArgs{
//				VpcId: example.ID(),
//				SubnetIds: pulumi.StringArray{
//					exampleSubnet[0].ID(),
//					exampleSubnet[1].ID(),
//				},
//				SecurityGroupIds: pulumi.StringArray{
//					exampleSecurityGroup[0].ID(),
//					exampleSecurityGroup[1].ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = workspacesweb.NewNetworkSettingsAssociation(ctx, "example", &workspacesweb.NetworkSettingsAssociationArgs{
//				NetworkSettingsArn: exampleNetworkSettings.NetworkSettingsArn,
//				PortalArn:          examplePortal.PortalArn,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type NetworkSettingsAssociation struct {
	pulumi.CustomResourceState

	// ARN of the network settings to associate with the portal. Forces replacement if changed.
	NetworkSettingsArn pulumi.StringOutput `pulumi:"networkSettingsArn"`
	// ARN of the portal to associate with the network settings. Forces replacement if changed.
	//
	// The following arguments are optional:
	PortalArn pulumi.StringOutput `pulumi:"portalArn"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewNetworkSettingsAssociation registers a new resource with the given unique name, arguments, and options.
func NewNetworkSettingsAssociation(ctx *pulumi.Context,
	name string, args *NetworkSettingsAssociationArgs, opts ...pulumi.ResourceOption) (*NetworkSettingsAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkSettingsArn == nil {
		return nil, errors.New("invalid value for required argument 'NetworkSettingsArn'")
	}
	if args.PortalArn == nil {
		return nil, errors.New("invalid value for required argument 'PortalArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkSettingsAssociation
	err := ctx.RegisterResource("aws:workspacesweb/networkSettingsAssociation:NetworkSettingsAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkSettingsAssociation gets an existing NetworkSettingsAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkSettingsAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkSettingsAssociationState, opts ...pulumi.ResourceOption) (*NetworkSettingsAssociation, error) {
	var resource NetworkSettingsAssociation
	err := ctx.ReadResource("aws:workspacesweb/networkSettingsAssociation:NetworkSettingsAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkSettingsAssociation resources.
type networkSettingsAssociationState struct {
	// ARN of the network settings to associate with the portal. Forces replacement if changed.
	NetworkSettingsArn *string `pulumi:"networkSettingsArn"`
	// ARN of the portal to associate with the network settings. Forces replacement if changed.
	//
	// The following arguments are optional:
	PortalArn *string `pulumi:"portalArn"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
}

type NetworkSettingsAssociationState struct {
	// ARN of the network settings to associate with the portal. Forces replacement if changed.
	NetworkSettingsArn pulumi.StringPtrInput
	// ARN of the portal to associate with the network settings. Forces replacement if changed.
	//
	// The following arguments are optional:
	PortalArn pulumi.StringPtrInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
}

func (NetworkSettingsAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkSettingsAssociationState)(nil)).Elem()
}

type networkSettingsAssociationArgs struct {
	// ARN of the network settings to associate with the portal. Forces replacement if changed.
	NetworkSettingsArn string `pulumi:"networkSettingsArn"`
	// ARN of the portal to associate with the network settings. Forces replacement if changed.
	//
	// The following arguments are optional:
	PortalArn string `pulumi:"portalArn"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a NetworkSettingsAssociation resource.
type NetworkSettingsAssociationArgs struct {
	// ARN of the network settings to associate with the portal. Forces replacement if changed.
	NetworkSettingsArn pulumi.StringInput
	// ARN of the portal to associate with the network settings. Forces replacement if changed.
	//
	// The following arguments are optional:
	PortalArn pulumi.StringInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
}

func (NetworkSettingsAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkSettingsAssociationArgs)(nil)).Elem()
}

type NetworkSettingsAssociationInput interface {
	pulumi.Input

	ToNetworkSettingsAssociationOutput() NetworkSettingsAssociationOutput
	ToNetworkSettingsAssociationOutputWithContext(ctx context.Context) NetworkSettingsAssociationOutput
}

func (*NetworkSettingsAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkSettingsAssociation)(nil)).Elem()
}

func (i *NetworkSettingsAssociation) ToNetworkSettingsAssociationOutput() NetworkSettingsAssociationOutput {
	return i.ToNetworkSettingsAssociationOutputWithContext(context.Background())
}

func (i *NetworkSettingsAssociation) ToNetworkSettingsAssociationOutputWithContext(ctx context.Context) NetworkSettingsAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSettingsAssociationOutput)
}

// NetworkSettingsAssociationArrayInput is an input type that accepts NetworkSettingsAssociationArray and NetworkSettingsAssociationArrayOutput values.
// You can construct a concrete instance of `NetworkSettingsAssociationArrayInput` via:
//
//	NetworkSettingsAssociationArray{ NetworkSettingsAssociationArgs{...} }
type NetworkSettingsAssociationArrayInput interface {
	pulumi.Input

	ToNetworkSettingsAssociationArrayOutput() NetworkSettingsAssociationArrayOutput
	ToNetworkSettingsAssociationArrayOutputWithContext(context.Context) NetworkSettingsAssociationArrayOutput
}

type NetworkSettingsAssociationArray []NetworkSettingsAssociationInput

func (NetworkSettingsAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkSettingsAssociation)(nil)).Elem()
}

func (i NetworkSettingsAssociationArray) ToNetworkSettingsAssociationArrayOutput() NetworkSettingsAssociationArrayOutput {
	return i.ToNetworkSettingsAssociationArrayOutputWithContext(context.Background())
}

func (i NetworkSettingsAssociationArray) ToNetworkSettingsAssociationArrayOutputWithContext(ctx context.Context) NetworkSettingsAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSettingsAssociationArrayOutput)
}

// NetworkSettingsAssociationMapInput is an input type that accepts NetworkSettingsAssociationMap and NetworkSettingsAssociationMapOutput values.
// You can construct a concrete instance of `NetworkSettingsAssociationMapInput` via:
//
//	NetworkSettingsAssociationMap{ "key": NetworkSettingsAssociationArgs{...} }
type NetworkSettingsAssociationMapInput interface {
	pulumi.Input

	ToNetworkSettingsAssociationMapOutput() NetworkSettingsAssociationMapOutput
	ToNetworkSettingsAssociationMapOutputWithContext(context.Context) NetworkSettingsAssociationMapOutput
}

type NetworkSettingsAssociationMap map[string]NetworkSettingsAssociationInput

func (NetworkSettingsAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkSettingsAssociation)(nil)).Elem()
}

func (i NetworkSettingsAssociationMap) ToNetworkSettingsAssociationMapOutput() NetworkSettingsAssociationMapOutput {
	return i.ToNetworkSettingsAssociationMapOutputWithContext(context.Background())
}

func (i NetworkSettingsAssociationMap) ToNetworkSettingsAssociationMapOutputWithContext(ctx context.Context) NetworkSettingsAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSettingsAssociationMapOutput)
}

type NetworkSettingsAssociationOutput struct{ *pulumi.OutputState }

func (NetworkSettingsAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkSettingsAssociation)(nil)).Elem()
}

func (o NetworkSettingsAssociationOutput) ToNetworkSettingsAssociationOutput() NetworkSettingsAssociationOutput {
	return o
}

func (o NetworkSettingsAssociationOutput) ToNetworkSettingsAssociationOutputWithContext(ctx context.Context) NetworkSettingsAssociationOutput {
	return o
}

// ARN of the network settings to associate with the portal. Forces replacement if changed.
func (o NetworkSettingsAssociationOutput) NetworkSettingsArn() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSettingsAssociation) pulumi.StringOutput { return v.NetworkSettingsArn }).(pulumi.StringOutput)
}

// ARN of the portal to associate with the network settings. Forces replacement if changed.
//
// The following arguments are optional:
func (o NetworkSettingsAssociationOutput) PortalArn() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSettingsAssociation) pulumi.StringOutput { return v.PortalArn }).(pulumi.StringOutput)
}

// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
func (o NetworkSettingsAssociationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSettingsAssociation) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type NetworkSettingsAssociationArrayOutput struct{ *pulumi.OutputState }

func (NetworkSettingsAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkSettingsAssociation)(nil)).Elem()
}

func (o NetworkSettingsAssociationArrayOutput) ToNetworkSettingsAssociationArrayOutput() NetworkSettingsAssociationArrayOutput {
	return o
}

func (o NetworkSettingsAssociationArrayOutput) ToNetworkSettingsAssociationArrayOutputWithContext(ctx context.Context) NetworkSettingsAssociationArrayOutput {
	return o
}

func (o NetworkSettingsAssociationArrayOutput) Index(i pulumi.IntInput) NetworkSettingsAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkSettingsAssociation {
		return vs[0].([]*NetworkSettingsAssociation)[vs[1].(int)]
	}).(NetworkSettingsAssociationOutput)
}

type NetworkSettingsAssociationMapOutput struct{ *pulumi.OutputState }

func (NetworkSettingsAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkSettingsAssociation)(nil)).Elem()
}

func (o NetworkSettingsAssociationMapOutput) ToNetworkSettingsAssociationMapOutput() NetworkSettingsAssociationMapOutput {
	return o
}

func (o NetworkSettingsAssociationMapOutput) ToNetworkSettingsAssociationMapOutputWithContext(ctx context.Context) NetworkSettingsAssociationMapOutput {
	return o
}

func (o NetworkSettingsAssociationMapOutput) MapIndex(k pulumi.StringInput) NetworkSettingsAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkSettingsAssociation {
		return vs[0].(map[string]*NetworkSettingsAssociation)[vs[1].(string)]
	}).(NetworkSettingsAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSettingsAssociationInput)(nil)).Elem(), &NetworkSettingsAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSettingsAssociationArrayInput)(nil)).Elem(), NetworkSettingsAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSettingsAssociationMapInput)(nil)).Elem(), NetworkSettingsAssociationMap{})
	pulumi.RegisterOutputType(NetworkSettingsAssociationOutput{})
	pulumi.RegisterOutputType(NetworkSettingsAssociationArrayOutput{})
	pulumi.RegisterOutputType(NetworkSettingsAssociationMapOutput{})
}
