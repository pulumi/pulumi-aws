// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package route53recoverycontrol

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ClusterClusterEndpoint struct {
	// Cluster endpoint.
	Endpoint *string `pulumi:"endpoint"`
	// Region of the endpoint.
	Region *string `pulumi:"region"`
}

type ClusterClusterEndpointOutput struct{ *pulumi.OutputState }

func (ClusterClusterEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterClusterEndpoint)(nil)).Elem()
}

func (o ClusterClusterEndpointOutput) ToClusterClusterEndpointOutput() ClusterClusterEndpointOutput {
	return o
}

func (o ClusterClusterEndpointOutput) ToClusterClusterEndpointOutputWithContext(ctx context.Context) ClusterClusterEndpointOutput {
	return o
}

// Cluster endpoint.
func (o ClusterClusterEndpointOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterClusterEndpoint) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Region of the endpoint.
func (o ClusterClusterEndpointOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterClusterEndpoint) *string { return v.Region }).(pulumi.StringPtrOutput)
}

type ClusterClusterEndpointArrayOutput struct{ *pulumi.OutputState }

func (ClusterClusterEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterClusterEndpoint)(nil)).Elem()
}

func (o ClusterClusterEndpointArrayOutput) ToClusterClusterEndpointArrayOutput() ClusterClusterEndpointArrayOutput {
	return o
}

func (o ClusterClusterEndpointArrayOutput) ToClusterClusterEndpointArrayOutputWithContext(ctx context.Context) ClusterClusterEndpointArrayOutput {
	return o
}

func (o ClusterClusterEndpointArrayOutput) Index(i pulumi.IntInput) ClusterClusterEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterClusterEndpoint {
		return vs[0].([]ClusterClusterEndpoint)[vs[1].(int)]
	}).(ClusterClusterEndpointOutput)
}

type SafetyRuleRuleConfig struct {
	// Logical negation of the rule.
	Inverted bool `pulumi:"inverted"`
	// Number of controls that must be set when you specify an `ATLEAST` type rule.
	Threshold int `pulumi:"threshold"`
	// Rule type. Valid values are `ATLEAST`, `AND`, and `OR`.
	Type string `pulumi:"type"`
}

// SafetyRuleRuleConfigInput is an input type that accepts SafetyRuleRuleConfigArgs and SafetyRuleRuleConfigOutput values.
// You can construct a concrete instance of `SafetyRuleRuleConfigInput` via:
//
//          SafetyRuleRuleConfigArgs{...}
type SafetyRuleRuleConfigInput interface {
	pulumi.Input

	ToSafetyRuleRuleConfigOutput() SafetyRuleRuleConfigOutput
	ToSafetyRuleRuleConfigOutputWithContext(context.Context) SafetyRuleRuleConfigOutput
}

type SafetyRuleRuleConfigArgs struct {
	// Logical negation of the rule.
	Inverted pulumi.BoolInput `pulumi:"inverted"`
	// Number of controls that must be set when you specify an `ATLEAST` type rule.
	Threshold pulumi.IntInput `pulumi:"threshold"`
	// Rule type. Valid values are `ATLEAST`, `AND`, and `OR`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SafetyRuleRuleConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SafetyRuleRuleConfig)(nil)).Elem()
}

func (i SafetyRuleRuleConfigArgs) ToSafetyRuleRuleConfigOutput() SafetyRuleRuleConfigOutput {
	return i.ToSafetyRuleRuleConfigOutputWithContext(context.Background())
}

func (i SafetyRuleRuleConfigArgs) ToSafetyRuleRuleConfigOutputWithContext(ctx context.Context) SafetyRuleRuleConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SafetyRuleRuleConfigOutput)
}

type SafetyRuleRuleConfigOutput struct{ *pulumi.OutputState }

func (SafetyRuleRuleConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SafetyRuleRuleConfig)(nil)).Elem()
}

func (o SafetyRuleRuleConfigOutput) ToSafetyRuleRuleConfigOutput() SafetyRuleRuleConfigOutput {
	return o
}

func (o SafetyRuleRuleConfigOutput) ToSafetyRuleRuleConfigOutputWithContext(ctx context.Context) SafetyRuleRuleConfigOutput {
	return o
}

// Logical negation of the rule.
func (o SafetyRuleRuleConfigOutput) Inverted() pulumi.BoolOutput {
	return o.ApplyT(func(v SafetyRuleRuleConfig) bool { return v.Inverted }).(pulumi.BoolOutput)
}

// Number of controls that must be set when you specify an `ATLEAST` type rule.
func (o SafetyRuleRuleConfigOutput) Threshold() pulumi.IntOutput {
	return o.ApplyT(func(v SafetyRuleRuleConfig) int { return v.Threshold }).(pulumi.IntOutput)
}

// Rule type. Valid values are `ATLEAST`, `AND`, and `OR`.
func (o SafetyRuleRuleConfigOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SafetyRuleRuleConfig) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SafetyRuleRuleConfigInput)(nil)).Elem(), SafetyRuleRuleConfigArgs{})
	pulumi.RegisterOutputType(ClusterClusterEndpointOutput{})
	pulumi.RegisterOutputType(ClusterClusterEndpointArrayOutput{})
	pulumi.RegisterOutputType(SafetyRuleRuleConfigOutput{})
}
