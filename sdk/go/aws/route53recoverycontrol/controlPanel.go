// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53recoverycontrol

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an AWS Route 53 Recovery Control Config Control Panel.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/route53recoverycontrol"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := route53recoverycontrol.NewControlPanel(ctx, "example", &route53recoverycontrol.ControlPanelArgs{
//				ClusterArn: pulumi.String("arn:aws:route53-recovery-control::123456789012:cluster/8d47920e-d789-437d-803a-2dcc4b204393"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Route53 Recovery Control Config Control Panel using the control panel arn. For example:
//
// ```sh
//
//	$ pulumi import aws:route53recoverycontrol/controlPanel:ControlPanel mypanel arn:aws:route53-recovery-control::313517334327:controlpanel/1bfba17df8684f5dab0467b71424f7e8
//
// ```
type ControlPanel struct {
	pulumi.CustomResourceState

	// ARN of the control panel.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// ARN of the cluster in which this control panel will reside.
	ClusterArn pulumi.StringOutput `pulumi:"clusterArn"`
	// Whether a control panel is default.
	DefaultControlPanel pulumi.BoolOutput `pulumi:"defaultControlPanel"`
	// Name describing the control panel.
	Name pulumi.StringOutput `pulumi:"name"`
	// Number routing controls in a control panel.
	RoutingControlCount pulumi.IntOutput `pulumi:"routingControlCount"`
	// Status of control panel: `PENDING` when it is being created/updated, `PENDING_DELETION` when it is being deleted, and `DEPLOYED` otherwise.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewControlPanel registers a new resource with the given unique name, arguments, and options.
func NewControlPanel(ctx *pulumi.Context,
	name string, args *ControlPanelArgs, opts ...pulumi.ResourceOption) (*ControlPanel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterArn == nil {
		return nil, errors.New("invalid value for required argument 'ClusterArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ControlPanel
	err := ctx.RegisterResource("aws:route53recoverycontrol/controlPanel:ControlPanel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetControlPanel gets an existing ControlPanel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetControlPanel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ControlPanelState, opts ...pulumi.ResourceOption) (*ControlPanel, error) {
	var resource ControlPanel
	err := ctx.ReadResource("aws:route53recoverycontrol/controlPanel:ControlPanel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ControlPanel resources.
type controlPanelState struct {
	// ARN of the control panel.
	Arn *string `pulumi:"arn"`
	// ARN of the cluster in which this control panel will reside.
	ClusterArn *string `pulumi:"clusterArn"`
	// Whether a control panel is default.
	DefaultControlPanel *bool `pulumi:"defaultControlPanel"`
	// Name describing the control panel.
	Name *string `pulumi:"name"`
	// Number routing controls in a control panel.
	RoutingControlCount *int `pulumi:"routingControlCount"`
	// Status of control panel: `PENDING` when it is being created/updated, `PENDING_DELETION` when it is being deleted, and `DEPLOYED` otherwise.
	Status *string `pulumi:"status"`
}

type ControlPanelState struct {
	// ARN of the control panel.
	Arn pulumi.StringPtrInput
	// ARN of the cluster in which this control panel will reside.
	ClusterArn pulumi.StringPtrInput
	// Whether a control panel is default.
	DefaultControlPanel pulumi.BoolPtrInput
	// Name describing the control panel.
	Name pulumi.StringPtrInput
	// Number routing controls in a control panel.
	RoutingControlCount pulumi.IntPtrInput
	// Status of control panel: `PENDING` when it is being created/updated, `PENDING_DELETION` when it is being deleted, and `DEPLOYED` otherwise.
	Status pulumi.StringPtrInput
}

func (ControlPanelState) ElementType() reflect.Type {
	return reflect.TypeOf((*controlPanelState)(nil)).Elem()
}

type controlPanelArgs struct {
	// ARN of the cluster in which this control panel will reside.
	ClusterArn string `pulumi:"clusterArn"`
	// Name describing the control panel.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a ControlPanel resource.
type ControlPanelArgs struct {
	// ARN of the cluster in which this control panel will reside.
	ClusterArn pulumi.StringInput
	// Name describing the control panel.
	Name pulumi.StringPtrInput
}

func (ControlPanelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*controlPanelArgs)(nil)).Elem()
}

type ControlPanelInput interface {
	pulumi.Input

	ToControlPanelOutput() ControlPanelOutput
	ToControlPanelOutputWithContext(ctx context.Context) ControlPanelOutput
}

func (*ControlPanel) ElementType() reflect.Type {
	return reflect.TypeOf((**ControlPanel)(nil)).Elem()
}

func (i *ControlPanel) ToControlPanelOutput() ControlPanelOutput {
	return i.ToControlPanelOutputWithContext(context.Background())
}

func (i *ControlPanel) ToControlPanelOutputWithContext(ctx context.Context) ControlPanelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlPanelOutput)
}

// ControlPanelArrayInput is an input type that accepts ControlPanelArray and ControlPanelArrayOutput values.
// You can construct a concrete instance of `ControlPanelArrayInput` via:
//
//	ControlPanelArray{ ControlPanelArgs{...} }
type ControlPanelArrayInput interface {
	pulumi.Input

	ToControlPanelArrayOutput() ControlPanelArrayOutput
	ToControlPanelArrayOutputWithContext(context.Context) ControlPanelArrayOutput
}

type ControlPanelArray []ControlPanelInput

func (ControlPanelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ControlPanel)(nil)).Elem()
}

func (i ControlPanelArray) ToControlPanelArrayOutput() ControlPanelArrayOutput {
	return i.ToControlPanelArrayOutputWithContext(context.Background())
}

func (i ControlPanelArray) ToControlPanelArrayOutputWithContext(ctx context.Context) ControlPanelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlPanelArrayOutput)
}

// ControlPanelMapInput is an input type that accepts ControlPanelMap and ControlPanelMapOutput values.
// You can construct a concrete instance of `ControlPanelMapInput` via:
//
//	ControlPanelMap{ "key": ControlPanelArgs{...} }
type ControlPanelMapInput interface {
	pulumi.Input

	ToControlPanelMapOutput() ControlPanelMapOutput
	ToControlPanelMapOutputWithContext(context.Context) ControlPanelMapOutput
}

type ControlPanelMap map[string]ControlPanelInput

func (ControlPanelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ControlPanel)(nil)).Elem()
}

func (i ControlPanelMap) ToControlPanelMapOutput() ControlPanelMapOutput {
	return i.ToControlPanelMapOutputWithContext(context.Background())
}

func (i ControlPanelMap) ToControlPanelMapOutputWithContext(ctx context.Context) ControlPanelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlPanelMapOutput)
}

type ControlPanelOutput struct{ *pulumi.OutputState }

func (ControlPanelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControlPanel)(nil)).Elem()
}

func (o ControlPanelOutput) ToControlPanelOutput() ControlPanelOutput {
	return o
}

func (o ControlPanelOutput) ToControlPanelOutputWithContext(ctx context.Context) ControlPanelOutput {
	return o
}

// ARN of the control panel.
func (o ControlPanelOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ControlPanel) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// ARN of the cluster in which this control panel will reside.
func (o ControlPanelOutput) ClusterArn() pulumi.StringOutput {
	return o.ApplyT(func(v *ControlPanel) pulumi.StringOutput { return v.ClusterArn }).(pulumi.StringOutput)
}

// Whether a control panel is default.
func (o ControlPanelOutput) DefaultControlPanel() pulumi.BoolOutput {
	return o.ApplyT(func(v *ControlPanel) pulumi.BoolOutput { return v.DefaultControlPanel }).(pulumi.BoolOutput)
}

// Name describing the control panel.
func (o ControlPanelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ControlPanel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Number routing controls in a control panel.
func (o ControlPanelOutput) RoutingControlCount() pulumi.IntOutput {
	return o.ApplyT(func(v *ControlPanel) pulumi.IntOutput { return v.RoutingControlCount }).(pulumi.IntOutput)
}

// Status of control panel: `PENDING` when it is being created/updated, `PENDING_DELETION` when it is being deleted, and `DEPLOYED` otherwise.
func (o ControlPanelOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ControlPanel) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type ControlPanelArrayOutput struct{ *pulumi.OutputState }

func (ControlPanelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ControlPanel)(nil)).Elem()
}

func (o ControlPanelArrayOutput) ToControlPanelArrayOutput() ControlPanelArrayOutput {
	return o
}

func (o ControlPanelArrayOutput) ToControlPanelArrayOutputWithContext(ctx context.Context) ControlPanelArrayOutput {
	return o
}

func (o ControlPanelArrayOutput) Index(i pulumi.IntInput) ControlPanelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ControlPanel {
		return vs[0].([]*ControlPanel)[vs[1].(int)]
	}).(ControlPanelOutput)
}

type ControlPanelMapOutput struct{ *pulumi.OutputState }

func (ControlPanelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ControlPanel)(nil)).Elem()
}

func (o ControlPanelMapOutput) ToControlPanelMapOutput() ControlPanelMapOutput {
	return o
}

func (o ControlPanelMapOutput) ToControlPanelMapOutputWithContext(ctx context.Context) ControlPanelMapOutput {
	return o
}

func (o ControlPanelMapOutput) MapIndex(k pulumi.StringInput) ControlPanelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ControlPanel {
		return vs[0].(map[string]*ControlPanel)[vs[1].(string)]
	}).(ControlPanelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ControlPanelInput)(nil)).Elem(), &ControlPanel{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControlPanelArrayInput)(nil)).Elem(), ControlPanelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControlPanelMapInput)(nil)).Elem(), ControlPanelMap{})
	pulumi.RegisterOutputType(ControlPanelOutput{})
	pulumi.RegisterOutputType(ControlPanelArrayOutput{})
	pulumi.RegisterOutputType(ControlPanelMapOutput{})
}
