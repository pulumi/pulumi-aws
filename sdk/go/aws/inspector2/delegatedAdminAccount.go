// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package inspector2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an Amazon Inspector Delegated Admin Account.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/inspector2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := aws.GetCallerIdentity(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = inspector2.NewDelegatedAdminAccount(ctx, "example", &inspector2.DelegatedAdminAccountArgs{
//				AccountId: *pulumi.String(current.AccountId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Inspector Delegated Admin Account can be imported using the `account_id`, e.g.,
//
// ```sh
//
//	$ pulumi import aws:inspector2/delegatedAdminAccount:DelegatedAdminAccount example 012345678901
//
// ```
type DelegatedAdminAccount struct {
	pulumi.CustomResourceState

	// Account to enable as delegated admin account.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Status of this delegated admin account.
	RelationshipStatus pulumi.StringOutput `pulumi:"relationshipStatus"`
}

// NewDelegatedAdminAccount registers a new resource with the given unique name, arguments, and options.
func NewDelegatedAdminAccount(ctx *pulumi.Context,
	name string, args *DelegatedAdminAccountArgs, opts ...pulumi.ResourceOption) (*DelegatedAdminAccount, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	var resource DelegatedAdminAccount
	err := ctx.RegisterResource("aws:inspector2/delegatedAdminAccount:DelegatedAdminAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDelegatedAdminAccount gets an existing DelegatedAdminAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDelegatedAdminAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DelegatedAdminAccountState, opts ...pulumi.ResourceOption) (*DelegatedAdminAccount, error) {
	var resource DelegatedAdminAccount
	err := ctx.ReadResource("aws:inspector2/delegatedAdminAccount:DelegatedAdminAccount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DelegatedAdminAccount resources.
type delegatedAdminAccountState struct {
	// Account to enable as delegated admin account.
	AccountId *string `pulumi:"accountId"`
	// Status of this delegated admin account.
	RelationshipStatus *string `pulumi:"relationshipStatus"`
}

type DelegatedAdminAccountState struct {
	// Account to enable as delegated admin account.
	AccountId pulumi.StringPtrInput
	// Status of this delegated admin account.
	RelationshipStatus pulumi.StringPtrInput
}

func (DelegatedAdminAccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*delegatedAdminAccountState)(nil)).Elem()
}

type delegatedAdminAccountArgs struct {
	// Account to enable as delegated admin account.
	AccountId string `pulumi:"accountId"`
}

// The set of arguments for constructing a DelegatedAdminAccount resource.
type DelegatedAdminAccountArgs struct {
	// Account to enable as delegated admin account.
	AccountId pulumi.StringInput
}

func (DelegatedAdminAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*delegatedAdminAccountArgs)(nil)).Elem()
}

type DelegatedAdminAccountInput interface {
	pulumi.Input

	ToDelegatedAdminAccountOutput() DelegatedAdminAccountOutput
	ToDelegatedAdminAccountOutputWithContext(ctx context.Context) DelegatedAdminAccountOutput
}

func (*DelegatedAdminAccount) ElementType() reflect.Type {
	return reflect.TypeOf((**DelegatedAdminAccount)(nil)).Elem()
}

func (i *DelegatedAdminAccount) ToDelegatedAdminAccountOutput() DelegatedAdminAccountOutput {
	return i.ToDelegatedAdminAccountOutputWithContext(context.Background())
}

func (i *DelegatedAdminAccount) ToDelegatedAdminAccountOutputWithContext(ctx context.Context) DelegatedAdminAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DelegatedAdminAccountOutput)
}

// DelegatedAdminAccountArrayInput is an input type that accepts DelegatedAdminAccountArray and DelegatedAdminAccountArrayOutput values.
// You can construct a concrete instance of `DelegatedAdminAccountArrayInput` via:
//
//	DelegatedAdminAccountArray{ DelegatedAdminAccountArgs{...} }
type DelegatedAdminAccountArrayInput interface {
	pulumi.Input

	ToDelegatedAdminAccountArrayOutput() DelegatedAdminAccountArrayOutput
	ToDelegatedAdminAccountArrayOutputWithContext(context.Context) DelegatedAdminAccountArrayOutput
}

type DelegatedAdminAccountArray []DelegatedAdminAccountInput

func (DelegatedAdminAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DelegatedAdminAccount)(nil)).Elem()
}

func (i DelegatedAdminAccountArray) ToDelegatedAdminAccountArrayOutput() DelegatedAdminAccountArrayOutput {
	return i.ToDelegatedAdminAccountArrayOutputWithContext(context.Background())
}

func (i DelegatedAdminAccountArray) ToDelegatedAdminAccountArrayOutputWithContext(ctx context.Context) DelegatedAdminAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DelegatedAdminAccountArrayOutput)
}

// DelegatedAdminAccountMapInput is an input type that accepts DelegatedAdminAccountMap and DelegatedAdminAccountMapOutput values.
// You can construct a concrete instance of `DelegatedAdminAccountMapInput` via:
//
//	DelegatedAdminAccountMap{ "key": DelegatedAdminAccountArgs{...} }
type DelegatedAdminAccountMapInput interface {
	pulumi.Input

	ToDelegatedAdminAccountMapOutput() DelegatedAdminAccountMapOutput
	ToDelegatedAdminAccountMapOutputWithContext(context.Context) DelegatedAdminAccountMapOutput
}

type DelegatedAdminAccountMap map[string]DelegatedAdminAccountInput

func (DelegatedAdminAccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DelegatedAdminAccount)(nil)).Elem()
}

func (i DelegatedAdminAccountMap) ToDelegatedAdminAccountMapOutput() DelegatedAdminAccountMapOutput {
	return i.ToDelegatedAdminAccountMapOutputWithContext(context.Background())
}

func (i DelegatedAdminAccountMap) ToDelegatedAdminAccountMapOutputWithContext(ctx context.Context) DelegatedAdminAccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DelegatedAdminAccountMapOutput)
}

type DelegatedAdminAccountOutput struct{ *pulumi.OutputState }

func (DelegatedAdminAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DelegatedAdminAccount)(nil)).Elem()
}

func (o DelegatedAdminAccountOutput) ToDelegatedAdminAccountOutput() DelegatedAdminAccountOutput {
	return o
}

func (o DelegatedAdminAccountOutput) ToDelegatedAdminAccountOutputWithContext(ctx context.Context) DelegatedAdminAccountOutput {
	return o
}

// Account to enable as delegated admin account.
func (o DelegatedAdminAccountOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *DelegatedAdminAccount) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Status of this delegated admin account.
func (o DelegatedAdminAccountOutput) RelationshipStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *DelegatedAdminAccount) pulumi.StringOutput { return v.RelationshipStatus }).(pulumi.StringOutput)
}

type DelegatedAdminAccountArrayOutput struct{ *pulumi.OutputState }

func (DelegatedAdminAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DelegatedAdminAccount)(nil)).Elem()
}

func (o DelegatedAdminAccountArrayOutput) ToDelegatedAdminAccountArrayOutput() DelegatedAdminAccountArrayOutput {
	return o
}

func (o DelegatedAdminAccountArrayOutput) ToDelegatedAdminAccountArrayOutputWithContext(ctx context.Context) DelegatedAdminAccountArrayOutput {
	return o
}

func (o DelegatedAdminAccountArrayOutput) Index(i pulumi.IntInput) DelegatedAdminAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DelegatedAdminAccount {
		return vs[0].([]*DelegatedAdminAccount)[vs[1].(int)]
	}).(DelegatedAdminAccountOutput)
}

type DelegatedAdminAccountMapOutput struct{ *pulumi.OutputState }

func (DelegatedAdminAccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DelegatedAdminAccount)(nil)).Elem()
}

func (o DelegatedAdminAccountMapOutput) ToDelegatedAdminAccountMapOutput() DelegatedAdminAccountMapOutput {
	return o
}

func (o DelegatedAdminAccountMapOutput) ToDelegatedAdminAccountMapOutputWithContext(ctx context.Context) DelegatedAdminAccountMapOutput {
	return o
}

func (o DelegatedAdminAccountMapOutput) MapIndex(k pulumi.StringInput) DelegatedAdminAccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DelegatedAdminAccount {
		return vs[0].(map[string]*DelegatedAdminAccount)[vs[1].(string)]
	}).(DelegatedAdminAccountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DelegatedAdminAccountInput)(nil)).Elem(), &DelegatedAdminAccount{})
	pulumi.RegisterInputType(reflect.TypeOf((*DelegatedAdminAccountArrayInput)(nil)).Elem(), DelegatedAdminAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DelegatedAdminAccountMapInput)(nil)).Elem(), DelegatedAdminAccountMap{})
	pulumi.RegisterOutputType(DelegatedAdminAccountOutput{})
	pulumi.RegisterOutputType(DelegatedAdminAccountArrayOutput{})
	pulumi.RegisterOutputType(DelegatedAdminAccountMapOutput{})
}
