// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package inspector2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for enabling Amazon Inspector resource scans.
//
// This resource must be created in the Organization's Administrator Account.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/inspector2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := inspector2.NewEnabler(ctx, "example", &inspector2.EnablerArgs{
//				AccountIds: pulumi.StringArray{
//					pulumi.String("123456789012"),
//				},
//				ResourceTypes: pulumi.StringArray{
//					pulumi.String("EC2"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### For the Calling Account
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/inspector2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := aws.GetCallerIdentity(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = inspector2.NewEnabler(ctx, "test", &inspector2.EnablerArgs{
//				AccountIds: pulumi.StringArray{
//					*pulumi.String(current.AccountId),
//				},
//				ResourceTypes: pulumi.StringArray{
//					pulumi.String("ECR"),
//					pulumi.String("EC2"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Enabler struct {
	pulumi.CustomResourceState

	// Set of account IDs.
	// Can contain one of: the Organization's Administrator Account, or one or more Member Accounts.
	AccountIds pulumi.StringArrayOutput `pulumi:"accountIds"`
	// Type of resources to scan.
	// Valid values are `EC2`, `ECR`, and `LAMBDA`.
	// At least one item is required.
	ResourceTypes pulumi.StringArrayOutput `pulumi:"resourceTypes"`
}

// NewEnabler registers a new resource with the given unique name, arguments, and options.
func NewEnabler(ctx *pulumi.Context,
	name string, args *EnablerArgs, opts ...pulumi.ResourceOption) (*Enabler, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountIds == nil {
		return nil, errors.New("invalid value for required argument 'AccountIds'")
	}
	if args.ResourceTypes == nil {
		return nil, errors.New("invalid value for required argument 'ResourceTypes'")
	}
	var resource Enabler
	err := ctx.RegisterResource("aws:inspector2/enabler:Enabler", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnabler gets an existing Enabler resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnabler(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnablerState, opts ...pulumi.ResourceOption) (*Enabler, error) {
	var resource Enabler
	err := ctx.ReadResource("aws:inspector2/enabler:Enabler", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Enabler resources.
type enablerState struct {
	// Set of account IDs.
	// Can contain one of: the Organization's Administrator Account, or one or more Member Accounts.
	AccountIds []string `pulumi:"accountIds"`
	// Type of resources to scan.
	// Valid values are `EC2`, `ECR`, and `LAMBDA`.
	// At least one item is required.
	ResourceTypes []string `pulumi:"resourceTypes"`
}

type EnablerState struct {
	// Set of account IDs.
	// Can contain one of: the Organization's Administrator Account, or one or more Member Accounts.
	AccountIds pulumi.StringArrayInput
	// Type of resources to scan.
	// Valid values are `EC2`, `ECR`, and `LAMBDA`.
	// At least one item is required.
	ResourceTypes pulumi.StringArrayInput
}

func (EnablerState) ElementType() reflect.Type {
	return reflect.TypeOf((*enablerState)(nil)).Elem()
}

type enablerArgs struct {
	// Set of account IDs.
	// Can contain one of: the Organization's Administrator Account, or one or more Member Accounts.
	AccountIds []string `pulumi:"accountIds"`
	// Type of resources to scan.
	// Valid values are `EC2`, `ECR`, and `LAMBDA`.
	// At least one item is required.
	ResourceTypes []string `pulumi:"resourceTypes"`
}

// The set of arguments for constructing a Enabler resource.
type EnablerArgs struct {
	// Set of account IDs.
	// Can contain one of: the Organization's Administrator Account, or one or more Member Accounts.
	AccountIds pulumi.StringArrayInput
	// Type of resources to scan.
	// Valid values are `EC2`, `ECR`, and `LAMBDA`.
	// At least one item is required.
	ResourceTypes pulumi.StringArrayInput
}

func (EnablerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*enablerArgs)(nil)).Elem()
}

type EnablerInput interface {
	pulumi.Input

	ToEnablerOutput() EnablerOutput
	ToEnablerOutputWithContext(ctx context.Context) EnablerOutput
}

func (*Enabler) ElementType() reflect.Type {
	return reflect.TypeOf((**Enabler)(nil)).Elem()
}

func (i *Enabler) ToEnablerOutput() EnablerOutput {
	return i.ToEnablerOutputWithContext(context.Background())
}

func (i *Enabler) ToEnablerOutputWithContext(ctx context.Context) EnablerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnablerOutput)
}

// EnablerArrayInput is an input type that accepts EnablerArray and EnablerArrayOutput values.
// You can construct a concrete instance of `EnablerArrayInput` via:
//
//	EnablerArray{ EnablerArgs{...} }
type EnablerArrayInput interface {
	pulumi.Input

	ToEnablerArrayOutput() EnablerArrayOutput
	ToEnablerArrayOutputWithContext(context.Context) EnablerArrayOutput
}

type EnablerArray []EnablerInput

func (EnablerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Enabler)(nil)).Elem()
}

func (i EnablerArray) ToEnablerArrayOutput() EnablerArrayOutput {
	return i.ToEnablerArrayOutputWithContext(context.Background())
}

func (i EnablerArray) ToEnablerArrayOutputWithContext(ctx context.Context) EnablerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnablerArrayOutput)
}

// EnablerMapInput is an input type that accepts EnablerMap and EnablerMapOutput values.
// You can construct a concrete instance of `EnablerMapInput` via:
//
//	EnablerMap{ "key": EnablerArgs{...} }
type EnablerMapInput interface {
	pulumi.Input

	ToEnablerMapOutput() EnablerMapOutput
	ToEnablerMapOutputWithContext(context.Context) EnablerMapOutput
}

type EnablerMap map[string]EnablerInput

func (EnablerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Enabler)(nil)).Elem()
}

func (i EnablerMap) ToEnablerMapOutput() EnablerMapOutput {
	return i.ToEnablerMapOutputWithContext(context.Background())
}

func (i EnablerMap) ToEnablerMapOutputWithContext(ctx context.Context) EnablerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnablerMapOutput)
}

type EnablerOutput struct{ *pulumi.OutputState }

func (EnablerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Enabler)(nil)).Elem()
}

func (o EnablerOutput) ToEnablerOutput() EnablerOutput {
	return o
}

func (o EnablerOutput) ToEnablerOutputWithContext(ctx context.Context) EnablerOutput {
	return o
}

// Set of account IDs.
// Can contain one of: the Organization's Administrator Account, or one or more Member Accounts.
func (o EnablerOutput) AccountIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Enabler) pulumi.StringArrayOutput { return v.AccountIds }).(pulumi.StringArrayOutput)
}

// Type of resources to scan.
// Valid values are `EC2`, `ECR`, and `LAMBDA`.
// At least one item is required.
func (o EnablerOutput) ResourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Enabler) pulumi.StringArrayOutput { return v.ResourceTypes }).(pulumi.StringArrayOutput)
}

type EnablerArrayOutput struct{ *pulumi.OutputState }

func (EnablerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Enabler)(nil)).Elem()
}

func (o EnablerArrayOutput) ToEnablerArrayOutput() EnablerArrayOutput {
	return o
}

func (o EnablerArrayOutput) ToEnablerArrayOutputWithContext(ctx context.Context) EnablerArrayOutput {
	return o
}

func (o EnablerArrayOutput) Index(i pulumi.IntInput) EnablerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Enabler {
		return vs[0].([]*Enabler)[vs[1].(int)]
	}).(EnablerOutput)
}

type EnablerMapOutput struct{ *pulumi.OutputState }

func (EnablerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Enabler)(nil)).Elem()
}

func (o EnablerMapOutput) ToEnablerMapOutput() EnablerMapOutput {
	return o
}

func (o EnablerMapOutput) ToEnablerMapOutputWithContext(ctx context.Context) EnablerMapOutput {
	return o
}

func (o EnablerMapOutput) MapIndex(k pulumi.StringInput) EnablerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Enabler {
		return vs[0].(map[string]*Enabler)[vs[1].(string)]
	}).(EnablerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnablerInput)(nil)).Elem(), &Enabler{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnablerArrayInput)(nil)).Elem(), EnablerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnablerMapInput)(nil)).Elem(), EnablerMap{})
	pulumi.RegisterOutputType(EnablerOutput{})
	pulumi.RegisterOutputType(EnablerArrayOutput{})
	pulumi.RegisterOutputType(EnablerMapOutput{})
}
