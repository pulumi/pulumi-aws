// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloud9

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EnvironmentEC2 struct {
	pulumi.CustomResourceState

	Arn                      pulumi.StringOutput    `pulumi:"arn"`
	AutomaticStopTimeMinutes pulumi.IntPtrOutput    `pulumi:"automaticStopTimeMinutes"`
	ConnectionType           pulumi.StringPtrOutput `pulumi:"connectionType"`
	Description              pulumi.StringPtrOutput `pulumi:"description"`
	ImageId                  pulumi.StringPtrOutput `pulumi:"imageId"`
	InstanceType             pulumi.StringOutput    `pulumi:"instanceType"`
	Name                     pulumi.StringOutput    `pulumi:"name"`
	OwnerArn                 pulumi.StringOutput    `pulumi:"ownerArn"`
	SubnetId                 pulumi.StringPtrOutput `pulumi:"subnetId"`
	Tags                     pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll                  pulumi.StringMapOutput `pulumi:"tagsAll"`
	Type                     pulumi.StringOutput    `pulumi:"type"`
}

// NewEnvironmentEC2 registers a new resource with the given unique name, arguments, and options.
func NewEnvironmentEC2(ctx *pulumi.Context,
	name string, args *EnvironmentEC2Args, opts ...pulumi.ResourceOption) (*EnvironmentEC2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceType == nil {
		return nil, errors.New("invalid value for required argument 'InstanceType'")
	}
	var resource EnvironmentEC2
	err := ctx.RegisterResource("aws:cloud9/environmentEC2:EnvironmentEC2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvironmentEC2 gets an existing EnvironmentEC2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvironmentEC2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnvironmentEC2State, opts ...pulumi.ResourceOption) (*EnvironmentEC2, error) {
	var resource EnvironmentEC2
	err := ctx.ReadResource("aws:cloud9/environmentEC2:EnvironmentEC2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnvironmentEC2 resources.
type environmentEC2State struct {
	Arn                      *string           `pulumi:"arn"`
	AutomaticStopTimeMinutes *int              `pulumi:"automaticStopTimeMinutes"`
	ConnectionType           *string           `pulumi:"connectionType"`
	Description              *string           `pulumi:"description"`
	ImageId                  *string           `pulumi:"imageId"`
	InstanceType             *string           `pulumi:"instanceType"`
	Name                     *string           `pulumi:"name"`
	OwnerArn                 *string           `pulumi:"ownerArn"`
	SubnetId                 *string           `pulumi:"subnetId"`
	Tags                     map[string]string `pulumi:"tags"`
	TagsAll                  map[string]string `pulumi:"tagsAll"`
	Type                     *string           `pulumi:"type"`
}

type EnvironmentEC2State struct {
	Arn                      pulumi.StringPtrInput
	AutomaticStopTimeMinutes pulumi.IntPtrInput
	ConnectionType           pulumi.StringPtrInput
	Description              pulumi.StringPtrInput
	ImageId                  pulumi.StringPtrInput
	InstanceType             pulumi.StringPtrInput
	Name                     pulumi.StringPtrInput
	OwnerArn                 pulumi.StringPtrInput
	SubnetId                 pulumi.StringPtrInput
	Tags                     pulumi.StringMapInput
	TagsAll                  pulumi.StringMapInput
	Type                     pulumi.StringPtrInput
}

func (EnvironmentEC2State) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentEC2State)(nil)).Elem()
}

type environmentEC2Args struct {
	AutomaticStopTimeMinutes *int              `pulumi:"automaticStopTimeMinutes"`
	ConnectionType           *string           `pulumi:"connectionType"`
	Description              *string           `pulumi:"description"`
	ImageId                  *string           `pulumi:"imageId"`
	InstanceType             string            `pulumi:"instanceType"`
	Name                     *string           `pulumi:"name"`
	OwnerArn                 *string           `pulumi:"ownerArn"`
	SubnetId                 *string           `pulumi:"subnetId"`
	Tags                     map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a EnvironmentEC2 resource.
type EnvironmentEC2Args struct {
	AutomaticStopTimeMinutes pulumi.IntPtrInput
	ConnectionType           pulumi.StringPtrInput
	Description              pulumi.StringPtrInput
	ImageId                  pulumi.StringPtrInput
	InstanceType             pulumi.StringInput
	Name                     pulumi.StringPtrInput
	OwnerArn                 pulumi.StringPtrInput
	SubnetId                 pulumi.StringPtrInput
	Tags                     pulumi.StringMapInput
}

func (EnvironmentEC2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentEC2Args)(nil)).Elem()
}

type EnvironmentEC2Input interface {
	pulumi.Input

	ToEnvironmentEC2Output() EnvironmentEC2Output
	ToEnvironmentEC2OutputWithContext(ctx context.Context) EnvironmentEC2Output
}

func (*EnvironmentEC2) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentEC2)(nil)).Elem()
}

func (i *EnvironmentEC2) ToEnvironmentEC2Output() EnvironmentEC2Output {
	return i.ToEnvironmentEC2OutputWithContext(context.Background())
}

func (i *EnvironmentEC2) ToEnvironmentEC2OutputWithContext(ctx context.Context) EnvironmentEC2Output {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentEC2Output)
}

// EnvironmentEC2ArrayInput is an input type that accepts EnvironmentEC2Array and EnvironmentEC2ArrayOutput values.
// You can construct a concrete instance of `EnvironmentEC2ArrayInput` via:
//
//	EnvironmentEC2Array{ EnvironmentEC2Args{...} }
type EnvironmentEC2ArrayInput interface {
	pulumi.Input

	ToEnvironmentEC2ArrayOutput() EnvironmentEC2ArrayOutput
	ToEnvironmentEC2ArrayOutputWithContext(context.Context) EnvironmentEC2ArrayOutput
}

type EnvironmentEC2Array []EnvironmentEC2Input

func (EnvironmentEC2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnvironmentEC2)(nil)).Elem()
}

func (i EnvironmentEC2Array) ToEnvironmentEC2ArrayOutput() EnvironmentEC2ArrayOutput {
	return i.ToEnvironmentEC2ArrayOutputWithContext(context.Background())
}

func (i EnvironmentEC2Array) ToEnvironmentEC2ArrayOutputWithContext(ctx context.Context) EnvironmentEC2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentEC2ArrayOutput)
}

// EnvironmentEC2MapInput is an input type that accepts EnvironmentEC2Map and EnvironmentEC2MapOutput values.
// You can construct a concrete instance of `EnvironmentEC2MapInput` via:
//
//	EnvironmentEC2Map{ "key": EnvironmentEC2Args{...} }
type EnvironmentEC2MapInput interface {
	pulumi.Input

	ToEnvironmentEC2MapOutput() EnvironmentEC2MapOutput
	ToEnvironmentEC2MapOutputWithContext(context.Context) EnvironmentEC2MapOutput
}

type EnvironmentEC2Map map[string]EnvironmentEC2Input

func (EnvironmentEC2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnvironmentEC2)(nil)).Elem()
}

func (i EnvironmentEC2Map) ToEnvironmentEC2MapOutput() EnvironmentEC2MapOutput {
	return i.ToEnvironmentEC2MapOutputWithContext(context.Background())
}

func (i EnvironmentEC2Map) ToEnvironmentEC2MapOutputWithContext(ctx context.Context) EnvironmentEC2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentEC2MapOutput)
}

type EnvironmentEC2Output struct{ *pulumi.OutputState }

func (EnvironmentEC2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentEC2)(nil)).Elem()
}

func (o EnvironmentEC2Output) ToEnvironmentEC2Output() EnvironmentEC2Output {
	return o
}

func (o EnvironmentEC2Output) ToEnvironmentEC2OutputWithContext(ctx context.Context) EnvironmentEC2Output {
	return o
}

func (o EnvironmentEC2Output) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentEC2) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o EnvironmentEC2Output) AutomaticStopTimeMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EnvironmentEC2) pulumi.IntPtrOutput { return v.AutomaticStopTimeMinutes }).(pulumi.IntPtrOutput)
}

func (o EnvironmentEC2Output) ConnectionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvironmentEC2) pulumi.StringPtrOutput { return v.ConnectionType }).(pulumi.StringPtrOutput)
}

func (o EnvironmentEC2Output) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvironmentEC2) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o EnvironmentEC2Output) ImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvironmentEC2) pulumi.StringPtrOutput { return v.ImageId }).(pulumi.StringPtrOutput)
}

func (o EnvironmentEC2Output) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentEC2) pulumi.StringOutput { return v.InstanceType }).(pulumi.StringOutput)
}

func (o EnvironmentEC2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentEC2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o EnvironmentEC2Output) OwnerArn() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentEC2) pulumi.StringOutput { return v.OwnerArn }).(pulumi.StringOutput)
}

func (o EnvironmentEC2Output) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvironmentEC2) pulumi.StringPtrOutput { return v.SubnetId }).(pulumi.StringPtrOutput)
}

func (o EnvironmentEC2Output) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EnvironmentEC2) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o EnvironmentEC2Output) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EnvironmentEC2) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o EnvironmentEC2Output) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentEC2) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type EnvironmentEC2ArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentEC2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnvironmentEC2)(nil)).Elem()
}

func (o EnvironmentEC2ArrayOutput) ToEnvironmentEC2ArrayOutput() EnvironmentEC2ArrayOutput {
	return o
}

func (o EnvironmentEC2ArrayOutput) ToEnvironmentEC2ArrayOutputWithContext(ctx context.Context) EnvironmentEC2ArrayOutput {
	return o
}

func (o EnvironmentEC2ArrayOutput) Index(i pulumi.IntInput) EnvironmentEC2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EnvironmentEC2 {
		return vs[0].([]*EnvironmentEC2)[vs[1].(int)]
	}).(EnvironmentEC2Output)
}

type EnvironmentEC2MapOutput struct{ *pulumi.OutputState }

func (EnvironmentEC2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnvironmentEC2)(nil)).Elem()
}

func (o EnvironmentEC2MapOutput) ToEnvironmentEC2MapOutput() EnvironmentEC2MapOutput {
	return o
}

func (o EnvironmentEC2MapOutput) ToEnvironmentEC2MapOutputWithContext(ctx context.Context) EnvironmentEC2MapOutput {
	return o
}

func (o EnvironmentEC2MapOutput) MapIndex(k pulumi.StringInput) EnvironmentEC2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EnvironmentEC2 {
		return vs[0].(map[string]*EnvironmentEC2)[vs[1].(string)]
	}).(EnvironmentEC2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentEC2Input)(nil)).Elem(), &EnvironmentEC2{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentEC2ArrayInput)(nil)).Elem(), EnvironmentEC2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentEC2MapInput)(nil)).Elem(), EnvironmentEC2Map{})
	pulumi.RegisterOutputType(EnvironmentEC2Output{})
	pulumi.RegisterOutputType(EnvironmentEC2ArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentEC2MapOutput{})
}
