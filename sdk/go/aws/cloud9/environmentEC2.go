// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloud9

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Cloud9 EC2 Development Environment.
type EnvironmentEC2 struct {
	s *pulumi.ResourceState
}

// NewEnvironmentEC2 registers a new resource with the given unique name, arguments, and options.
func NewEnvironmentEC2(ctx *pulumi.Context,
	name string, args *EnvironmentEC2Args, opts ...pulumi.ResourceOpt) (*EnvironmentEC2, error) {
	if args == nil || args.InstanceType == nil {
		return nil, errors.New("missing required argument 'InstanceType'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["automaticStopTimeMinutes"] = nil
		inputs["description"] = nil
		inputs["instanceType"] = nil
		inputs["name"] = nil
		inputs["ownerArn"] = nil
		inputs["subnetId"] = nil
	} else {
		inputs["automaticStopTimeMinutes"] = args.AutomaticStopTimeMinutes
		inputs["description"] = args.Description
		inputs["instanceType"] = args.InstanceType
		inputs["name"] = args.Name
		inputs["ownerArn"] = args.OwnerArn
		inputs["subnetId"] = args.SubnetId
	}
	inputs["arn"] = nil
	inputs["type"] = nil
	s, err := ctx.RegisterResource("aws:cloud9/environmentEC2:EnvironmentEC2", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &EnvironmentEC2{s: s}, nil
}

// GetEnvironmentEC2 gets an existing EnvironmentEC2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvironmentEC2(ctx *pulumi.Context,
	name string, id pulumi.ID, state *EnvironmentEC2State, opts ...pulumi.ResourceOpt) (*EnvironmentEC2, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["automaticStopTimeMinutes"] = state.AutomaticStopTimeMinutes
		inputs["description"] = state.Description
		inputs["instanceType"] = state.InstanceType
		inputs["name"] = state.Name
		inputs["ownerArn"] = state.OwnerArn
		inputs["subnetId"] = state.SubnetId
		inputs["type"] = state.Type
	}
	s, err := ctx.ReadResource("aws:cloud9/environmentEC2:EnvironmentEC2", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &EnvironmentEC2{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *EnvironmentEC2) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *EnvironmentEC2) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The ARN of the environment.
func (r *EnvironmentEC2) Arn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["arn"])
}

// The number of minutes until the running instance is shut down after the environment has last been used.
func (r *EnvironmentEC2) AutomaticStopTimeMinutes() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["automaticStopTimeMinutes"])
}

// The description of the environment.
func (r *EnvironmentEC2) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The type of instance to connect to the environment, e.g. `t2.micro`.
func (r *EnvironmentEC2) InstanceType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["instanceType"])
}

// The name of the environment.
func (r *EnvironmentEC2) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The ARN of the environment owner. This can be ARN of any AWS IAM principal. Defaults to the environment's creator.
func (r *EnvironmentEC2) OwnerArn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ownerArn"])
}

// The ID of the subnet in Amazon VPC that AWS Cloud9 will use to communicate with the Amazon EC2 instance.
func (r *EnvironmentEC2) SubnetId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["subnetId"])
}

// The type of the environment (e.g. `ssh` or `ec2`)
func (r *EnvironmentEC2) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

// Input properties used for looking up and filtering EnvironmentEC2 resources.
type EnvironmentEC2State struct {
	// The ARN of the environment.
	Arn interface{}
	// The number of minutes until the running instance is shut down after the environment has last been used.
	AutomaticStopTimeMinutes interface{}
	// The description of the environment.
	Description interface{}
	// The type of instance to connect to the environment, e.g. `t2.micro`.
	InstanceType interface{}
	// The name of the environment.
	Name interface{}
	// The ARN of the environment owner. This can be ARN of any AWS IAM principal. Defaults to the environment's creator.
	OwnerArn interface{}
	// The ID of the subnet in Amazon VPC that AWS Cloud9 will use to communicate with the Amazon EC2 instance.
	SubnetId interface{}
	// The type of the environment (e.g. `ssh` or `ec2`)
	Type interface{}
}

// The set of arguments for constructing a EnvironmentEC2 resource.
type EnvironmentEC2Args struct {
	// The number of minutes until the running instance is shut down after the environment has last been used.
	AutomaticStopTimeMinutes interface{}
	// The description of the environment.
	Description interface{}
	// The type of instance to connect to the environment, e.g. `t2.micro`.
	InstanceType interface{}
	// The name of the environment.
	Name interface{}
	// The ARN of the environment owner. This can be ARN of any AWS IAM principal. Defaults to the environment's creator.
	OwnerArn interface{}
	// The ID of the subnet in Amazon VPC that AWS Cloud9 will use to communicate with the Amazon EC2 instance.
	SubnetId interface{}
}
