// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appsync

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an [AWS AppSync Event API](https://docs.aws.amazon.com/appsync/latest/eventapi/event-api-concepts.html#API). Event APIs enable real-time subscriptions and event-driven communication in AppSync applications.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/appsync"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := appsync.NewApi(ctx, "example", &appsync.ApiArgs{
//				Name: pulumi.String("example-event-api"),
//				EventConfig: &appsync.ApiEventConfigArgs{
//					AuthProviders: appsync.ApiEventConfigAuthProviderArray{
//						&appsync.ApiEventConfigAuthProviderArgs{
//							AuthType: pulumi.String("API_KEY"),
//						},
//					},
//					ConnectionAuthModes: appsync.ApiEventConfigConnectionAuthModeArray{
//						&appsync.ApiEventConfigConnectionAuthModeArgs{
//							AuthType: pulumi.String("API_KEY"),
//						},
//					},
//					DefaultPublishAuthModes: appsync.ApiEventConfigDefaultPublishAuthModeArray{
//						&appsync.ApiEventConfigDefaultPublishAuthModeArgs{
//							AuthType: pulumi.String("API_KEY"),
//						},
//					},
//					DefaultSubscribeAuthModes: appsync.ApiEventConfigDefaultSubscribeAuthModeArray{
//						&appsync.ApiEventConfigDefaultSubscribeAuthModeArgs{
//							AuthType: pulumi.String("API_KEY"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### With Cognito Authentication
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws"
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/appsync"
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/cognito"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := cognito.NewUserPool(ctx, "example", &cognito.UserPoolArgs{
//				Name: pulumi.String("example-user-pool"),
//			})
//			if err != nil {
//				return err
//			}
//			current, err := aws.GetRegion(ctx, &aws.GetRegionArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = appsync.NewApi(ctx, "example", &appsync.ApiArgs{
//				Name: pulumi.String("example-event-api"),
//				EventConfig: &appsync.ApiEventConfigArgs{
//					AuthProviders: appsync.ApiEventConfigAuthProviderArray{
//						&appsync.ApiEventConfigAuthProviderArgs{
//							AuthType: pulumi.String("AMAZON_COGNITO_USER_POOLS"),
//							CognitoConfig: &appsync.ApiEventConfigAuthProviderCognitoConfigArgs{
//								UserPoolId: example.ID(),
//								AwsRegion:  pulumi.String(current.Name),
//							},
//						},
//					},
//					ConnectionAuthModes: appsync.ApiEventConfigConnectionAuthModeArray{
//						&appsync.ApiEventConfigConnectionAuthModeArgs{
//							AuthType: pulumi.String("AMAZON_COGNITO_USER_POOLS"),
//						},
//					},
//					DefaultPublishAuthModes: appsync.ApiEventConfigDefaultPublishAuthModeArray{
//						&appsync.ApiEventConfigDefaultPublishAuthModeArgs{
//							AuthType: pulumi.String("AMAZON_COGNITO_USER_POOLS"),
//						},
//					},
//					DefaultSubscribeAuthModes: appsync.ApiEventConfigDefaultSubscribeAuthModeArray{
//						&appsync.ApiEventConfigDefaultSubscribeAuthModeArgs{
//							AuthType: pulumi.String("AMAZON_COGNITO_USER_POOLS"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### With Lambda Authorizer
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/appsync"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := appsync.NewApi(ctx, "example", &appsync.ApiArgs{
//				Name: pulumi.String("example-event-api"),
//				EventConfig: &appsync.ApiEventConfigArgs{
//					AuthProviders: appsync.ApiEventConfigAuthProviderArray{
//						&appsync.ApiEventConfigAuthProviderArgs{
//							AuthType: pulumi.String("AWS_LAMBDA"),
//							LambdaAuthorizerConfig: &appsync.ApiEventConfigAuthProviderLambdaAuthorizerConfigArgs{
//								AuthorizerUri:                pulumi.Any(exampleAwsLambdaFunction.InvokeArn),
//								AuthorizerResultTtlInSeconds: pulumi.Int(300),
//							},
//						},
//					},
//					ConnectionAuthModes: appsync.ApiEventConfigConnectionAuthModeArray{
//						&appsync.ApiEventConfigConnectionAuthModeArgs{
//							AuthType: pulumi.String("AWS_LAMBDA"),
//						},
//					},
//					DefaultPublishAuthModes: appsync.ApiEventConfigDefaultPublishAuthModeArray{
//						&appsync.ApiEventConfigDefaultPublishAuthModeArgs{
//							AuthType: pulumi.String("AWS_LAMBDA"),
//						},
//					},
//					DefaultSubscribeAuthModes: appsync.ApiEventConfigDefaultSubscribeAuthModeArray{
//						&appsync.ApiEventConfigDefaultSubscribeAuthModeArgs{
//							AuthType: pulumi.String("AWS_LAMBDA"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import AppSync Event API using the `api_id`. For example:
//
// ```sh
// $ pulumi import aws:appsync/api:Api example example-api-id
// ```
type Api struct {
	pulumi.CustomResourceState

	// ARN of the Event API.
	ApiArn pulumi.StringOutput `pulumi:"apiArn"`
	// ID of the Event API.
	ApiId pulumi.StringOutput `pulumi:"apiId"`
	// DNS configuration for the Event API.
	Dns pulumi.StringMapOutput `pulumi:"dns"`
	// Configuration for the Event API. See Event Config below.
	EventConfig ApiEventConfigPtrOutput `pulumi:"eventConfig"`
	// Name of the Event API.
	//
	// The following arguments are optional:
	Name pulumi.StringOutput `pulumi:"name"`
	// Contact information for the owner of the Event API.
	OwnerContact pulumi.StringPtrOutput `pulumi:"ownerContact"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// ARN of the associated WAF web ACL.
	WafWebAclArn pulumi.StringOutput `pulumi:"wafWebAclArn"`
	XrayEnabled  pulumi.BoolOutput   `pulumi:"xrayEnabled"`
}

// NewApi registers a new resource with the given unique name, arguments, and options.
func NewApi(ctx *pulumi.Context,
	name string, args *ApiArgs, opts ...pulumi.ResourceOption) (*Api, error) {
	if args == nil {
		args = &ApiArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Api
	err := ctx.RegisterResource("aws:appsync/api:Api", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApi gets an existing Api resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApi(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApiState, opts ...pulumi.ResourceOption) (*Api, error) {
	var resource Api
	err := ctx.ReadResource("aws:appsync/api:Api", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Api resources.
type apiState struct {
	// ARN of the Event API.
	ApiArn *string `pulumi:"apiArn"`
	// ID of the Event API.
	ApiId *string `pulumi:"apiId"`
	// DNS configuration for the Event API.
	Dns map[string]string `pulumi:"dns"`
	// Configuration for the Event API. See Event Config below.
	EventConfig *ApiEventConfig `pulumi:"eventConfig"`
	// Name of the Event API.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// Contact information for the owner of the Event API.
	OwnerContact *string `pulumi:"ownerContact"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// ARN of the associated WAF web ACL.
	WafWebAclArn *string `pulumi:"wafWebAclArn"`
	XrayEnabled  *bool   `pulumi:"xrayEnabled"`
}

type ApiState struct {
	// ARN of the Event API.
	ApiArn pulumi.StringPtrInput
	// ID of the Event API.
	ApiId pulumi.StringPtrInput
	// DNS configuration for the Event API.
	Dns pulumi.StringMapInput
	// Configuration for the Event API. See Event Config below.
	EventConfig ApiEventConfigPtrInput
	// Name of the Event API.
	//
	// The following arguments are optional:
	Name pulumi.StringPtrInput
	// Contact information for the owner of the Event API.
	OwnerContact pulumi.StringPtrInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapInput
	// ARN of the associated WAF web ACL.
	WafWebAclArn pulumi.StringPtrInput
	XrayEnabled  pulumi.BoolPtrInput
}

func (ApiState) ElementType() reflect.Type {
	return reflect.TypeOf((*apiState)(nil)).Elem()
}

type apiArgs struct {
	// Configuration for the Event API. See Event Config below.
	EventConfig *ApiEventConfig `pulumi:"eventConfig"`
	// Name of the Event API.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// Contact information for the owner of the Event API.
	OwnerContact *string `pulumi:"ownerContact"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Api resource.
type ApiArgs struct {
	// Configuration for the Event API. See Event Config below.
	EventConfig ApiEventConfigPtrInput
	// Name of the Event API.
	//
	// The following arguments are optional:
	Name pulumi.StringPtrInput
	// Contact information for the owner of the Event API.
	OwnerContact pulumi.StringPtrInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
}

func (ApiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apiArgs)(nil)).Elem()
}

type ApiInput interface {
	pulumi.Input

	ToApiOutput() ApiOutput
	ToApiOutputWithContext(ctx context.Context) ApiOutput
}

func (*Api) ElementType() reflect.Type {
	return reflect.TypeOf((**Api)(nil)).Elem()
}

func (i *Api) ToApiOutput() ApiOutput {
	return i.ToApiOutputWithContext(context.Background())
}

func (i *Api) ToApiOutputWithContext(ctx context.Context) ApiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiOutput)
}

// ApiArrayInput is an input type that accepts ApiArray and ApiArrayOutput values.
// You can construct a concrete instance of `ApiArrayInput` via:
//
//	ApiArray{ ApiArgs{...} }
type ApiArrayInput interface {
	pulumi.Input

	ToApiArrayOutput() ApiArrayOutput
	ToApiArrayOutputWithContext(context.Context) ApiArrayOutput
}

type ApiArray []ApiInput

func (ApiArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Api)(nil)).Elem()
}

func (i ApiArray) ToApiArrayOutput() ApiArrayOutput {
	return i.ToApiArrayOutputWithContext(context.Background())
}

func (i ApiArray) ToApiArrayOutputWithContext(ctx context.Context) ApiArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiArrayOutput)
}

// ApiMapInput is an input type that accepts ApiMap and ApiMapOutput values.
// You can construct a concrete instance of `ApiMapInput` via:
//
//	ApiMap{ "key": ApiArgs{...} }
type ApiMapInput interface {
	pulumi.Input

	ToApiMapOutput() ApiMapOutput
	ToApiMapOutputWithContext(context.Context) ApiMapOutput
}

type ApiMap map[string]ApiInput

func (ApiMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Api)(nil)).Elem()
}

func (i ApiMap) ToApiMapOutput() ApiMapOutput {
	return i.ToApiMapOutputWithContext(context.Background())
}

func (i ApiMap) ToApiMapOutputWithContext(ctx context.Context) ApiMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiMapOutput)
}

type ApiOutput struct{ *pulumi.OutputState }

func (ApiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Api)(nil)).Elem()
}

func (o ApiOutput) ToApiOutput() ApiOutput {
	return o
}

func (o ApiOutput) ToApiOutputWithContext(ctx context.Context) ApiOutput {
	return o
}

// ARN of the Event API.
func (o ApiOutput) ApiArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Api) pulumi.StringOutput { return v.ApiArn }).(pulumi.StringOutput)
}

// ID of the Event API.
func (o ApiOutput) ApiId() pulumi.StringOutput {
	return o.ApplyT(func(v *Api) pulumi.StringOutput { return v.ApiId }).(pulumi.StringOutput)
}

// DNS configuration for the Event API.
func (o ApiOutput) Dns() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Api) pulumi.StringMapOutput { return v.Dns }).(pulumi.StringMapOutput)
}

// Configuration for the Event API. See Event Config below.
func (o ApiOutput) EventConfig() ApiEventConfigPtrOutput {
	return o.ApplyT(func(v *Api) ApiEventConfigPtrOutput { return v.EventConfig }).(ApiEventConfigPtrOutput)
}

// Name of the Event API.
//
// The following arguments are optional:
func (o ApiOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Api) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Contact information for the owner of the Event API.
func (o ApiOutput) OwnerContact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Api) pulumi.StringPtrOutput { return v.OwnerContact }).(pulumi.StringPtrOutput)
}

// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
func (o ApiOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Api) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ApiOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Api) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ApiOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Api) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// ARN of the associated WAF web ACL.
func (o ApiOutput) WafWebAclArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Api) pulumi.StringOutput { return v.WafWebAclArn }).(pulumi.StringOutput)
}

func (o ApiOutput) XrayEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Api) pulumi.BoolOutput { return v.XrayEnabled }).(pulumi.BoolOutput)
}

type ApiArrayOutput struct{ *pulumi.OutputState }

func (ApiArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Api)(nil)).Elem()
}

func (o ApiArrayOutput) ToApiArrayOutput() ApiArrayOutput {
	return o
}

func (o ApiArrayOutput) ToApiArrayOutputWithContext(ctx context.Context) ApiArrayOutput {
	return o
}

func (o ApiArrayOutput) Index(i pulumi.IntInput) ApiOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Api {
		return vs[0].([]*Api)[vs[1].(int)]
	}).(ApiOutput)
}

type ApiMapOutput struct{ *pulumi.OutputState }

func (ApiMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Api)(nil)).Elem()
}

func (o ApiMapOutput) ToApiMapOutput() ApiMapOutput {
	return o
}

func (o ApiMapOutput) ToApiMapOutputWithContext(ctx context.Context) ApiMapOutput {
	return o
}

func (o ApiMapOutput) MapIndex(k pulumi.StringInput) ApiOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Api {
		return vs[0].(map[string]*Api)[vs[1].(string)]
	}).(ApiOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApiInput)(nil)).Elem(), &Api{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiArrayInput)(nil)).Elem(), ApiArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiMapInput)(nil)).Elem(), ApiMap{})
	pulumi.RegisterOutputType(ApiOutput{})
	pulumi.RegisterOutputType(ApiArrayOutput{})
	pulumi.RegisterOutputType(ApiMapOutput{})
}
