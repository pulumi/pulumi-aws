// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package appsync

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an AppSync DataSource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/appsync"
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/dynamodb"
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleTable, err := dynamodb.NewTable(ctx, "exampleTable", &dynamodb.TableArgs{
// 			ReadCapacity:  pulumi.Int(1),
// 			WriteCapacity: pulumi.Int(1),
// 			HashKey:       pulumi.String("UserId"),
// 			Attributes: dynamodb.TableAttributeArray{
// 				&dynamodb.TableAttributeArgs{
// 					Name: pulumi.String("UserId"),
// 					Type: pulumi.String("S"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleRole, err := iam.NewRole(ctx, "exampleRole", &iam.RoleArgs{
// 			AssumeRolePolicy: pulumi.Any(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"Version\": \"2012-10-17\",\n", "  \"Statement\": [\n", "    {\n", "      \"Action\": \"sts:AssumeRole\",\n", "      \"Principal\": {\n", "        \"Service\": \"appsync.amazonaws.com\"\n", "      },\n", "      \"Effect\": \"Allow\"\n", "    }\n", "  ]\n", "}\n")),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = iam.NewRolePolicy(ctx, "exampleRolePolicy", &iam.RolePolicyArgs{
// 			Role: exampleRole.ID(),
// 			Policy: exampleTable.Arn.ApplyT(func(arn string) (string, error) {
// 				return fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"Version\": \"2012-10-17\",\n", "  \"Statement\": [\n", "    {\n", "      \"Action\": [\n", "        \"dynamodb:*\"\n", "      ],\n", "      \"Effect\": \"Allow\",\n", "      \"Resource\": [\n", "        \"", arn, "\"\n", "      ]\n", "    }\n", "  ]\n", "}\n"), nil
// 			}).(pulumi.StringOutput),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleGraphQLApi, err := appsync.NewGraphQLApi(ctx, "exampleGraphQLApi", &appsync.GraphQLApiArgs{
// 			AuthenticationType: pulumi.String("API_KEY"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = appsync.NewDataSource(ctx, "exampleDataSource", &appsync.DataSourceArgs{
// 			ApiId:          exampleGraphQLApi.ID(),
// 			Name:           pulumi.String("tf_appsync_example"),
// 			ServiceRoleArn: exampleRole.Arn,
// 			Type:           pulumi.String("AMAZON_DYNAMODB"),
// 			DynamodbConfig: &appsync.DataSourceDynamodbConfigArgs{
// 				TableName: exampleTable.Name,
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// `aws_appsync_datasource` can be imported with their `api_id`, a hyphen, and `name`, e.g.
//
// ```sh
//  $ pulumi import aws:appsync/dataSource:DataSource example abcdef123456-example
// ```
type DataSource struct {
	pulumi.CustomResourceState

	// The API ID for the GraphQL API for the DataSource.
	ApiId pulumi.StringOutput `pulumi:"apiId"`
	// The ARN
	Arn pulumi.StringOutput `pulumi:"arn"`
	// A description of the DataSource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// DynamoDB settings. See below
	DynamodbConfig DataSourceDynamodbConfigPtrOutput `pulumi:"dynamodbConfig"`
	// Amazon Elasticsearch settings. See below
	ElasticsearchConfig DataSourceElasticsearchConfigPtrOutput `pulumi:"elasticsearchConfig"`
	// HTTP settings. See below
	HttpConfig DataSourceHttpConfigPtrOutput `pulumi:"httpConfig"`
	// AWS Lambda settings. See below
	LambdaConfig DataSourceLambdaConfigPtrOutput `pulumi:"lambdaConfig"`
	// A user-supplied name for the DataSource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The IAM service role ARN for the data source.
	ServiceRoleArn pulumi.StringPtrOutput `pulumi:"serviceRoleArn"`
	// The type of the DataSource. Valid values: `AWS_LAMBDA`, `AMAZON_DYNAMODB`, `AMAZON_ELASTICSEARCH`, `HTTP`, `NONE`.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDataSource registers a new resource with the given unique name, arguments, and options.
func NewDataSource(ctx *pulumi.Context,
	name string, args *DataSourceArgs, opts ...pulumi.ResourceOption) (*DataSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiId == nil {
		return nil, errors.New("invalid value for required argument 'ApiId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource DataSource
	err := ctx.RegisterResource("aws:appsync/dataSource:DataSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataSource gets an existing DataSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataSourceState, opts ...pulumi.ResourceOption) (*DataSource, error) {
	var resource DataSource
	err := ctx.ReadResource("aws:appsync/dataSource:DataSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataSource resources.
type dataSourceState struct {
	// The API ID for the GraphQL API for the DataSource.
	ApiId *string `pulumi:"apiId"`
	// The ARN
	Arn *string `pulumi:"arn"`
	// A description of the DataSource.
	Description *string `pulumi:"description"`
	// DynamoDB settings. See below
	DynamodbConfig *DataSourceDynamodbConfig `pulumi:"dynamodbConfig"`
	// Amazon Elasticsearch settings. See below
	ElasticsearchConfig *DataSourceElasticsearchConfig `pulumi:"elasticsearchConfig"`
	// HTTP settings. See below
	HttpConfig *DataSourceHttpConfig `pulumi:"httpConfig"`
	// AWS Lambda settings. See below
	LambdaConfig *DataSourceLambdaConfig `pulumi:"lambdaConfig"`
	// A user-supplied name for the DataSource.
	Name *string `pulumi:"name"`
	// The IAM service role ARN for the data source.
	ServiceRoleArn *string `pulumi:"serviceRoleArn"`
	// The type of the DataSource. Valid values: `AWS_LAMBDA`, `AMAZON_DYNAMODB`, `AMAZON_ELASTICSEARCH`, `HTTP`, `NONE`.
	Type *string `pulumi:"type"`
}

type DataSourceState struct {
	// The API ID for the GraphQL API for the DataSource.
	ApiId pulumi.StringPtrInput
	// The ARN
	Arn pulumi.StringPtrInput
	// A description of the DataSource.
	Description pulumi.StringPtrInput
	// DynamoDB settings. See below
	DynamodbConfig DataSourceDynamodbConfigPtrInput
	// Amazon Elasticsearch settings. See below
	ElasticsearchConfig DataSourceElasticsearchConfigPtrInput
	// HTTP settings. See below
	HttpConfig DataSourceHttpConfigPtrInput
	// AWS Lambda settings. See below
	LambdaConfig DataSourceLambdaConfigPtrInput
	// A user-supplied name for the DataSource.
	Name pulumi.StringPtrInput
	// The IAM service role ARN for the data source.
	ServiceRoleArn pulumi.StringPtrInput
	// The type of the DataSource. Valid values: `AWS_LAMBDA`, `AMAZON_DYNAMODB`, `AMAZON_ELASTICSEARCH`, `HTTP`, `NONE`.
	Type pulumi.StringPtrInput
}

func (DataSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSourceState)(nil)).Elem()
}

type dataSourceArgs struct {
	// The API ID for the GraphQL API for the DataSource.
	ApiId string `pulumi:"apiId"`
	// A description of the DataSource.
	Description *string `pulumi:"description"`
	// DynamoDB settings. See below
	DynamodbConfig *DataSourceDynamodbConfig `pulumi:"dynamodbConfig"`
	// Amazon Elasticsearch settings. See below
	ElasticsearchConfig *DataSourceElasticsearchConfig `pulumi:"elasticsearchConfig"`
	// HTTP settings. See below
	HttpConfig *DataSourceHttpConfig `pulumi:"httpConfig"`
	// AWS Lambda settings. See below
	LambdaConfig *DataSourceLambdaConfig `pulumi:"lambdaConfig"`
	// A user-supplied name for the DataSource.
	Name *string `pulumi:"name"`
	// The IAM service role ARN for the data source.
	ServiceRoleArn *string `pulumi:"serviceRoleArn"`
	// The type of the DataSource. Valid values: `AWS_LAMBDA`, `AMAZON_DYNAMODB`, `AMAZON_ELASTICSEARCH`, `HTTP`, `NONE`.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a DataSource resource.
type DataSourceArgs struct {
	// The API ID for the GraphQL API for the DataSource.
	ApiId pulumi.StringInput
	// A description of the DataSource.
	Description pulumi.StringPtrInput
	// DynamoDB settings. See below
	DynamodbConfig DataSourceDynamodbConfigPtrInput
	// Amazon Elasticsearch settings. See below
	ElasticsearchConfig DataSourceElasticsearchConfigPtrInput
	// HTTP settings. See below
	HttpConfig DataSourceHttpConfigPtrInput
	// AWS Lambda settings. See below
	LambdaConfig DataSourceLambdaConfigPtrInput
	// A user-supplied name for the DataSource.
	Name pulumi.StringPtrInput
	// The IAM service role ARN for the data source.
	ServiceRoleArn pulumi.StringPtrInput
	// The type of the DataSource. Valid values: `AWS_LAMBDA`, `AMAZON_DYNAMODB`, `AMAZON_ELASTICSEARCH`, `HTTP`, `NONE`.
	Type pulumi.StringInput
}

func (DataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSourceArgs)(nil)).Elem()
}

type DataSourceInput interface {
	pulumi.Input

	ToDataSourceOutput() DataSourceOutput
	ToDataSourceOutputWithContext(ctx context.Context) DataSourceOutput
}

func (*DataSource) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSource)(nil))
}

func (i *DataSource) ToDataSourceOutput() DataSourceOutput {
	return i.ToDataSourceOutputWithContext(context.Background())
}

func (i *DataSource) ToDataSourceOutputWithContext(ctx context.Context) DataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceOutput)
}

func (i *DataSource) ToDataSourcePtrOutput() DataSourcePtrOutput {
	return i.ToDataSourcePtrOutputWithContext(context.Background())
}

func (i *DataSource) ToDataSourcePtrOutputWithContext(ctx context.Context) DataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourcePtrOutput)
}

type DataSourcePtrInput interface {
	pulumi.Input

	ToDataSourcePtrOutput() DataSourcePtrOutput
	ToDataSourcePtrOutputWithContext(ctx context.Context) DataSourcePtrOutput
}

type dataSourcePtrType DataSourceArgs

func (*dataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSource)(nil))
}

func (i *dataSourcePtrType) ToDataSourcePtrOutput() DataSourcePtrOutput {
	return i.ToDataSourcePtrOutputWithContext(context.Background())
}

func (i *dataSourcePtrType) ToDataSourcePtrOutputWithContext(ctx context.Context) DataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourcePtrOutput)
}

// DataSourceArrayInput is an input type that accepts DataSourceArray and DataSourceArrayOutput values.
// You can construct a concrete instance of `DataSourceArrayInput` via:
//
//          DataSourceArray{ DataSourceArgs{...} }
type DataSourceArrayInput interface {
	pulumi.Input

	ToDataSourceArrayOutput() DataSourceArrayOutput
	ToDataSourceArrayOutputWithContext(context.Context) DataSourceArrayOutput
}

type DataSourceArray []DataSourceInput

func (DataSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*DataSource)(nil))
}

func (i DataSourceArray) ToDataSourceArrayOutput() DataSourceArrayOutput {
	return i.ToDataSourceArrayOutputWithContext(context.Background())
}

func (i DataSourceArray) ToDataSourceArrayOutputWithContext(ctx context.Context) DataSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceArrayOutput)
}

// DataSourceMapInput is an input type that accepts DataSourceMap and DataSourceMapOutput values.
// You can construct a concrete instance of `DataSourceMapInput` via:
//
//          DataSourceMap{ "key": DataSourceArgs{...} }
type DataSourceMapInput interface {
	pulumi.Input

	ToDataSourceMapOutput() DataSourceMapOutput
	ToDataSourceMapOutputWithContext(context.Context) DataSourceMapOutput
}

type DataSourceMap map[string]DataSourceInput

func (DataSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*DataSource)(nil))
}

func (i DataSourceMap) ToDataSourceMapOutput() DataSourceMapOutput {
	return i.ToDataSourceMapOutputWithContext(context.Background())
}

func (i DataSourceMap) ToDataSourceMapOutputWithContext(ctx context.Context) DataSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceMapOutput)
}

type DataSourceOutput struct {
	*pulumi.OutputState
}

func (DataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSource)(nil))
}

func (o DataSourceOutput) ToDataSourceOutput() DataSourceOutput {
	return o
}

func (o DataSourceOutput) ToDataSourceOutputWithContext(ctx context.Context) DataSourceOutput {
	return o
}

func (o DataSourceOutput) ToDataSourcePtrOutput() DataSourcePtrOutput {
	return o.ToDataSourcePtrOutputWithContext(context.Background())
}

func (o DataSourceOutput) ToDataSourcePtrOutputWithContext(ctx context.Context) DataSourcePtrOutput {
	return o.ApplyT(func(v DataSource) *DataSource {
		return &v
	}).(DataSourcePtrOutput)
}

type DataSourcePtrOutput struct {
	*pulumi.OutputState
}

func (DataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSource)(nil))
}

func (o DataSourcePtrOutput) ToDataSourcePtrOutput() DataSourcePtrOutput {
	return o
}

func (o DataSourcePtrOutput) ToDataSourcePtrOutputWithContext(ctx context.Context) DataSourcePtrOutput {
	return o
}

type DataSourceArrayOutput struct{ *pulumi.OutputState }

func (DataSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSource)(nil))
}

func (o DataSourceArrayOutput) ToDataSourceArrayOutput() DataSourceArrayOutput {
	return o
}

func (o DataSourceArrayOutput) ToDataSourceArrayOutputWithContext(ctx context.Context) DataSourceArrayOutput {
	return o
}

func (o DataSourceArrayOutput) Index(i pulumi.IntInput) DataSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSource {
		return vs[0].([]DataSource)[vs[1].(int)]
	}).(DataSourceOutput)
}

type DataSourceMapOutput struct{ *pulumi.OutputState }

func (DataSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DataSource)(nil))
}

func (o DataSourceMapOutput) ToDataSourceMapOutput() DataSourceMapOutput {
	return o
}

func (o DataSourceMapOutput) ToDataSourceMapOutputWithContext(ctx context.Context) DataSourceMapOutput {
	return o
}

func (o DataSourceMapOutput) MapIndex(k pulumi.StringInput) DataSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DataSource {
		return vs[0].(map[string]DataSource)[vs[1].(string)]
	}).(DataSourceOutput)
}

func init() {
	pulumi.RegisterOutputType(DataSourceOutput{})
	pulumi.RegisterOutputType(DataSourcePtrOutput{})
	pulumi.RegisterOutputType(DataSourceArrayOutput{})
	pulumi.RegisterOutputType(DataSourceMapOutput{})
}
