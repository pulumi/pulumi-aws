// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appsync

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an AppSync Data Source.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/appsync"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/dynamodb"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/iam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleTable, err := dynamodb.NewTable(ctx, "exampleTable", &dynamodb.TableArgs{
//				ReadCapacity:  pulumi.Int(1),
//				WriteCapacity: pulumi.Int(1),
//				HashKey:       pulumi.String("UserId"),
//				Attributes: dynamodb.TableAttributeArray{
//					&dynamodb.TableAttributeArgs{
//						Name: pulumi.String("UserId"),
//						Type: pulumi.String("S"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			assumeRole, err := iam.GetPolicyDocument(ctx, &iam.GetPolicyDocumentArgs{
//				Statements: []iam.GetPolicyDocumentStatement{
//					{
//						Effect: pulumi.StringRef("Allow"),
//						Principals: []iam.GetPolicyDocumentStatementPrincipal{
//							{
//								Type: "Service",
//								Identifiers: []string{
//									"appsync.amazonaws.com",
//								},
//							},
//						},
//						Actions: []string{
//							"sts:AssumeRole",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleRole, err := iam.NewRole(ctx, "exampleRole", &iam.RoleArgs{
//				AssumeRolePolicy: *pulumi.String(assumeRole.Json),
//			})
//			if err != nil {
//				return err
//			}
//			examplePolicyDocument := iam.GetPolicyDocumentOutput(ctx, iam.GetPolicyDocumentOutputArgs{
//				Statements: iam.GetPolicyDocumentStatementArray{
//					&iam.GetPolicyDocumentStatementArgs{
//						Effect: pulumi.String("Allow"),
//						Actions: pulumi.StringArray{
//							pulumi.String("dynamodb:*"),
//						},
//						Resources: pulumi.StringArray{
//							exampleTable.Arn,
//						},
//					},
//				},
//			}, nil)
//			_, err = iam.NewRolePolicy(ctx, "exampleRolePolicy", &iam.RolePolicyArgs{
//				Role: exampleRole.ID(),
//				Policy: examplePolicyDocument.ApplyT(func(examplePolicyDocument iam.GetPolicyDocumentResult) (*string, error) {
//					return &examplePolicyDocument.Json, nil
//				}).(pulumi.StringPtrOutput),
//			})
//			if err != nil {
//				return err
//			}
//			exampleGraphQLApi, err := appsync.NewGraphQLApi(ctx, "exampleGraphQLApi", &appsync.GraphQLApiArgs{
//				AuthenticationType: pulumi.String("API_KEY"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = appsync.NewDataSource(ctx, "exampleDataSource", &appsync.DataSourceArgs{
//				ApiId:          exampleGraphQLApi.ID(),
//				Name:           pulumi.String("my_appsync_example"),
//				ServiceRoleArn: exampleRole.Arn,
//				Type:           pulumi.String("AMAZON_DYNAMODB"),
//				DynamodbConfig: &appsync.DataSourceDynamodbConfigArgs{
//					TableName: exampleTable.Name,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// terraform import {
//
//	to = aws_appsync_datasource.example
//
//	id = "abcdef123456-example" } Using `pulumi import`, import `aws_appsync_datasource` using the `api_id`, a hyphen, and `name`. For exampleconsole % pulumi import aws_appsync_datasource.example abcdef123456-example
type DataSource struct {
	pulumi.CustomResourceState

	// API ID for the GraphQL API for the data source.
	ApiId pulumi.StringOutput `pulumi:"apiId"`
	// ARN
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Description of the data source.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// DynamoDB settings. See DynamoDB Config
	DynamodbConfig DataSourceDynamodbConfigPtrOutput `pulumi:"dynamodbConfig"`
	// Amazon Elasticsearch settings. See ElasticSearch Config
	ElasticsearchConfig DataSourceElasticsearchConfigPtrOutput `pulumi:"elasticsearchConfig"`
	// AWS EventBridge settings. See Event Bridge Config
	EventBridgeConfig DataSourceEventBridgeConfigPtrOutput `pulumi:"eventBridgeConfig"`
	// HTTP settings. See HTTP Config
	HttpConfig DataSourceHttpConfigPtrOutput `pulumi:"httpConfig"`
	// AWS Lambda settings. See Lambda Config
	LambdaConfig DataSourceLambdaConfigPtrOutput `pulumi:"lambdaConfig"`
	// User-supplied name for the data source.
	Name pulumi.StringOutput `pulumi:"name"`
	// Amazon OpenSearch Service settings. See OpenSearch Service Config
	OpensearchserviceConfig DataSourceOpensearchserviceConfigPtrOutput `pulumi:"opensearchserviceConfig"`
	// AWS RDS settings. See Relational Database Config
	RelationalDatabaseConfig DataSourceRelationalDatabaseConfigPtrOutput `pulumi:"relationalDatabaseConfig"`
	// IAM service role ARN for the data source.
	ServiceRoleArn pulumi.StringPtrOutput `pulumi:"serviceRoleArn"`
	// Type of the Data Source. Valid values: `AWS_LAMBDA`, `AMAZON_DYNAMODB`, `AMAZON_ELASTICSEARCH`, `HTTP`, `NONE`, `RELATIONAL_DATABASE`, `AMAZON_EVENTBRIDGE`, `AMAZON_OPENSEARCH_SERVICE`.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDataSource registers a new resource with the given unique name, arguments, and options.
func NewDataSource(ctx *pulumi.Context,
	name string, args *DataSourceArgs, opts ...pulumi.ResourceOption) (*DataSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiId == nil {
		return nil, errors.New("invalid value for required argument 'ApiId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataSource
	err := ctx.RegisterResource("aws:appsync/dataSource:DataSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataSource gets an existing DataSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataSourceState, opts ...pulumi.ResourceOption) (*DataSource, error) {
	var resource DataSource
	err := ctx.ReadResource("aws:appsync/dataSource:DataSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataSource resources.
type dataSourceState struct {
	// API ID for the GraphQL API for the data source.
	ApiId *string `pulumi:"apiId"`
	// ARN
	Arn *string `pulumi:"arn"`
	// Description of the data source.
	Description *string `pulumi:"description"`
	// DynamoDB settings. See DynamoDB Config
	DynamodbConfig *DataSourceDynamodbConfig `pulumi:"dynamodbConfig"`
	// Amazon Elasticsearch settings. See ElasticSearch Config
	ElasticsearchConfig *DataSourceElasticsearchConfig `pulumi:"elasticsearchConfig"`
	// AWS EventBridge settings. See Event Bridge Config
	EventBridgeConfig *DataSourceEventBridgeConfig `pulumi:"eventBridgeConfig"`
	// HTTP settings. See HTTP Config
	HttpConfig *DataSourceHttpConfig `pulumi:"httpConfig"`
	// AWS Lambda settings. See Lambda Config
	LambdaConfig *DataSourceLambdaConfig `pulumi:"lambdaConfig"`
	// User-supplied name for the data source.
	Name *string `pulumi:"name"`
	// Amazon OpenSearch Service settings. See OpenSearch Service Config
	OpensearchserviceConfig *DataSourceOpensearchserviceConfig `pulumi:"opensearchserviceConfig"`
	// AWS RDS settings. See Relational Database Config
	RelationalDatabaseConfig *DataSourceRelationalDatabaseConfig `pulumi:"relationalDatabaseConfig"`
	// IAM service role ARN for the data source.
	ServiceRoleArn *string `pulumi:"serviceRoleArn"`
	// Type of the Data Source. Valid values: `AWS_LAMBDA`, `AMAZON_DYNAMODB`, `AMAZON_ELASTICSEARCH`, `HTTP`, `NONE`, `RELATIONAL_DATABASE`, `AMAZON_EVENTBRIDGE`, `AMAZON_OPENSEARCH_SERVICE`.
	Type *string `pulumi:"type"`
}

type DataSourceState struct {
	// API ID for the GraphQL API for the data source.
	ApiId pulumi.StringPtrInput
	// ARN
	Arn pulumi.StringPtrInput
	// Description of the data source.
	Description pulumi.StringPtrInput
	// DynamoDB settings. See DynamoDB Config
	DynamodbConfig DataSourceDynamodbConfigPtrInput
	// Amazon Elasticsearch settings. See ElasticSearch Config
	ElasticsearchConfig DataSourceElasticsearchConfigPtrInput
	// AWS EventBridge settings. See Event Bridge Config
	EventBridgeConfig DataSourceEventBridgeConfigPtrInput
	// HTTP settings. See HTTP Config
	HttpConfig DataSourceHttpConfigPtrInput
	// AWS Lambda settings. See Lambda Config
	LambdaConfig DataSourceLambdaConfigPtrInput
	// User-supplied name for the data source.
	Name pulumi.StringPtrInput
	// Amazon OpenSearch Service settings. See OpenSearch Service Config
	OpensearchserviceConfig DataSourceOpensearchserviceConfigPtrInput
	// AWS RDS settings. See Relational Database Config
	RelationalDatabaseConfig DataSourceRelationalDatabaseConfigPtrInput
	// IAM service role ARN for the data source.
	ServiceRoleArn pulumi.StringPtrInput
	// Type of the Data Source. Valid values: `AWS_LAMBDA`, `AMAZON_DYNAMODB`, `AMAZON_ELASTICSEARCH`, `HTTP`, `NONE`, `RELATIONAL_DATABASE`, `AMAZON_EVENTBRIDGE`, `AMAZON_OPENSEARCH_SERVICE`.
	Type pulumi.StringPtrInput
}

func (DataSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSourceState)(nil)).Elem()
}

type dataSourceArgs struct {
	// API ID for the GraphQL API for the data source.
	ApiId string `pulumi:"apiId"`
	// Description of the data source.
	Description *string `pulumi:"description"`
	// DynamoDB settings. See DynamoDB Config
	DynamodbConfig *DataSourceDynamodbConfig `pulumi:"dynamodbConfig"`
	// Amazon Elasticsearch settings. See ElasticSearch Config
	ElasticsearchConfig *DataSourceElasticsearchConfig `pulumi:"elasticsearchConfig"`
	// AWS EventBridge settings. See Event Bridge Config
	EventBridgeConfig *DataSourceEventBridgeConfig `pulumi:"eventBridgeConfig"`
	// HTTP settings. See HTTP Config
	HttpConfig *DataSourceHttpConfig `pulumi:"httpConfig"`
	// AWS Lambda settings. See Lambda Config
	LambdaConfig *DataSourceLambdaConfig `pulumi:"lambdaConfig"`
	// User-supplied name for the data source.
	Name *string `pulumi:"name"`
	// Amazon OpenSearch Service settings. See OpenSearch Service Config
	OpensearchserviceConfig *DataSourceOpensearchserviceConfig `pulumi:"opensearchserviceConfig"`
	// AWS RDS settings. See Relational Database Config
	RelationalDatabaseConfig *DataSourceRelationalDatabaseConfig `pulumi:"relationalDatabaseConfig"`
	// IAM service role ARN for the data source.
	ServiceRoleArn *string `pulumi:"serviceRoleArn"`
	// Type of the Data Source. Valid values: `AWS_LAMBDA`, `AMAZON_DYNAMODB`, `AMAZON_ELASTICSEARCH`, `HTTP`, `NONE`, `RELATIONAL_DATABASE`, `AMAZON_EVENTBRIDGE`, `AMAZON_OPENSEARCH_SERVICE`.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a DataSource resource.
type DataSourceArgs struct {
	// API ID for the GraphQL API for the data source.
	ApiId pulumi.StringInput
	// Description of the data source.
	Description pulumi.StringPtrInput
	// DynamoDB settings. See DynamoDB Config
	DynamodbConfig DataSourceDynamodbConfigPtrInput
	// Amazon Elasticsearch settings. See ElasticSearch Config
	ElasticsearchConfig DataSourceElasticsearchConfigPtrInput
	// AWS EventBridge settings. See Event Bridge Config
	EventBridgeConfig DataSourceEventBridgeConfigPtrInput
	// HTTP settings. See HTTP Config
	HttpConfig DataSourceHttpConfigPtrInput
	// AWS Lambda settings. See Lambda Config
	LambdaConfig DataSourceLambdaConfigPtrInput
	// User-supplied name for the data source.
	Name pulumi.StringPtrInput
	// Amazon OpenSearch Service settings. See OpenSearch Service Config
	OpensearchserviceConfig DataSourceOpensearchserviceConfigPtrInput
	// AWS RDS settings. See Relational Database Config
	RelationalDatabaseConfig DataSourceRelationalDatabaseConfigPtrInput
	// IAM service role ARN for the data source.
	ServiceRoleArn pulumi.StringPtrInput
	// Type of the Data Source. Valid values: `AWS_LAMBDA`, `AMAZON_DYNAMODB`, `AMAZON_ELASTICSEARCH`, `HTTP`, `NONE`, `RELATIONAL_DATABASE`, `AMAZON_EVENTBRIDGE`, `AMAZON_OPENSEARCH_SERVICE`.
	Type pulumi.StringInput
}

func (DataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSourceArgs)(nil)).Elem()
}

type DataSourceInput interface {
	pulumi.Input

	ToDataSourceOutput() DataSourceOutput
	ToDataSourceOutputWithContext(ctx context.Context) DataSourceOutput
}

func (*DataSource) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSource)(nil)).Elem()
}

func (i *DataSource) ToDataSourceOutput() DataSourceOutput {
	return i.ToDataSourceOutputWithContext(context.Background())
}

func (i *DataSource) ToDataSourceOutputWithContext(ctx context.Context) DataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceOutput)
}

// DataSourceArrayInput is an input type that accepts DataSourceArray and DataSourceArrayOutput values.
// You can construct a concrete instance of `DataSourceArrayInput` via:
//
//	DataSourceArray{ DataSourceArgs{...} }
type DataSourceArrayInput interface {
	pulumi.Input

	ToDataSourceArrayOutput() DataSourceArrayOutput
	ToDataSourceArrayOutputWithContext(context.Context) DataSourceArrayOutput
}

type DataSourceArray []DataSourceInput

func (DataSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataSource)(nil)).Elem()
}

func (i DataSourceArray) ToDataSourceArrayOutput() DataSourceArrayOutput {
	return i.ToDataSourceArrayOutputWithContext(context.Background())
}

func (i DataSourceArray) ToDataSourceArrayOutputWithContext(ctx context.Context) DataSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceArrayOutput)
}

// DataSourceMapInput is an input type that accepts DataSourceMap and DataSourceMapOutput values.
// You can construct a concrete instance of `DataSourceMapInput` via:
//
//	DataSourceMap{ "key": DataSourceArgs{...} }
type DataSourceMapInput interface {
	pulumi.Input

	ToDataSourceMapOutput() DataSourceMapOutput
	ToDataSourceMapOutputWithContext(context.Context) DataSourceMapOutput
}

type DataSourceMap map[string]DataSourceInput

func (DataSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataSource)(nil)).Elem()
}

func (i DataSourceMap) ToDataSourceMapOutput() DataSourceMapOutput {
	return i.ToDataSourceMapOutputWithContext(context.Background())
}

func (i DataSourceMap) ToDataSourceMapOutputWithContext(ctx context.Context) DataSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceMapOutput)
}

type DataSourceOutput struct{ *pulumi.OutputState }

func (DataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSource)(nil)).Elem()
}

func (o DataSourceOutput) ToDataSourceOutput() DataSourceOutput {
	return o
}

func (o DataSourceOutput) ToDataSourceOutputWithContext(ctx context.Context) DataSourceOutput {
	return o
}

// API ID for the GraphQL API for the data source.
func (o DataSourceOutput) ApiId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.ApiId }).(pulumi.StringOutput)
}

// ARN
func (o DataSourceOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Description of the data source.
func (o DataSourceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// DynamoDB settings. See DynamoDB Config
func (o DataSourceOutput) DynamodbConfig() DataSourceDynamodbConfigPtrOutput {
	return o.ApplyT(func(v *DataSource) DataSourceDynamodbConfigPtrOutput { return v.DynamodbConfig }).(DataSourceDynamodbConfigPtrOutput)
}

// Amazon Elasticsearch settings. See ElasticSearch Config
func (o DataSourceOutput) ElasticsearchConfig() DataSourceElasticsearchConfigPtrOutput {
	return o.ApplyT(func(v *DataSource) DataSourceElasticsearchConfigPtrOutput { return v.ElasticsearchConfig }).(DataSourceElasticsearchConfigPtrOutput)
}

// AWS EventBridge settings. See Event Bridge Config
func (o DataSourceOutput) EventBridgeConfig() DataSourceEventBridgeConfigPtrOutput {
	return o.ApplyT(func(v *DataSource) DataSourceEventBridgeConfigPtrOutput { return v.EventBridgeConfig }).(DataSourceEventBridgeConfigPtrOutput)
}

// HTTP settings. See HTTP Config
func (o DataSourceOutput) HttpConfig() DataSourceHttpConfigPtrOutput {
	return o.ApplyT(func(v *DataSource) DataSourceHttpConfigPtrOutput { return v.HttpConfig }).(DataSourceHttpConfigPtrOutput)
}

// AWS Lambda settings. See Lambda Config
func (o DataSourceOutput) LambdaConfig() DataSourceLambdaConfigPtrOutput {
	return o.ApplyT(func(v *DataSource) DataSourceLambdaConfigPtrOutput { return v.LambdaConfig }).(DataSourceLambdaConfigPtrOutput)
}

// User-supplied name for the data source.
func (o DataSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Amazon OpenSearch Service settings. See OpenSearch Service Config
func (o DataSourceOutput) OpensearchserviceConfig() DataSourceOpensearchserviceConfigPtrOutput {
	return o.ApplyT(func(v *DataSource) DataSourceOpensearchserviceConfigPtrOutput { return v.OpensearchserviceConfig }).(DataSourceOpensearchserviceConfigPtrOutput)
}

// AWS RDS settings. See Relational Database Config
func (o DataSourceOutput) RelationalDatabaseConfig() DataSourceRelationalDatabaseConfigPtrOutput {
	return o.ApplyT(func(v *DataSource) DataSourceRelationalDatabaseConfigPtrOutput { return v.RelationalDatabaseConfig }).(DataSourceRelationalDatabaseConfigPtrOutput)
}

// IAM service role ARN for the data source.
func (o DataSourceOutput) ServiceRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringPtrOutput { return v.ServiceRoleArn }).(pulumi.StringPtrOutput)
}

// Type of the Data Source. Valid values: `AWS_LAMBDA`, `AMAZON_DYNAMODB`, `AMAZON_ELASTICSEARCH`, `HTTP`, `NONE`, `RELATIONAL_DATABASE`, `AMAZON_EVENTBRIDGE`, `AMAZON_OPENSEARCH_SERVICE`.
func (o DataSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type DataSourceArrayOutput struct{ *pulumi.OutputState }

func (DataSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataSource)(nil)).Elem()
}

func (o DataSourceArrayOutput) ToDataSourceArrayOutput() DataSourceArrayOutput {
	return o
}

func (o DataSourceArrayOutput) ToDataSourceArrayOutputWithContext(ctx context.Context) DataSourceArrayOutput {
	return o
}

func (o DataSourceArrayOutput) Index(i pulumi.IntInput) DataSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataSource {
		return vs[0].([]*DataSource)[vs[1].(int)]
	}).(DataSourceOutput)
}

type DataSourceMapOutput struct{ *pulumi.OutputState }

func (DataSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataSource)(nil)).Elem()
}

func (o DataSourceMapOutput) ToDataSourceMapOutput() DataSourceMapOutput {
	return o
}

func (o DataSourceMapOutput) ToDataSourceMapOutputWithContext(ctx context.Context) DataSourceMapOutput {
	return o
}

func (o DataSourceMapOutput) MapIndex(k pulumi.StringInput) DataSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataSource {
		return vs[0].(map[string]*DataSource)[vs[1].(string)]
	}).(DataSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceInput)(nil)).Elem(), &DataSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceArrayInput)(nil)).Elem(), DataSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceMapInput)(nil)).Elem(), DataSourceMap{})
	pulumi.RegisterOutputType(DataSourceOutput{})
	pulumi.RegisterOutputType(DataSourceArrayOutput{})
	pulumi.RegisterOutputType(DataSourceMapOutput{})
}
