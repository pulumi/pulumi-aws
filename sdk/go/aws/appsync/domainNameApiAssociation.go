// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appsync

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AppSync API Association.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/appsync"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := appsync.NewDomainNameApiAssociation(ctx, "example", &appsync.DomainNameApiAssociationArgs{
//				ApiId:      pulumi.Any(aws_appsync_graphql_api.Example.Id),
//				DomainName: pulumi.Any(aws_appsync_domain_name.Example.Domain_name),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import `aws_appsync_domain_name_api_association` using the AppSync domain name. For example:
//
// ```sh
//
//	$ pulumi import aws:appsync/domainNameApiAssociation:DomainNameApiAssociation example example.com
//
// ```
type DomainNameApiAssociation struct {
	pulumi.CustomResourceState

	// API ID.
	ApiId pulumi.StringOutput `pulumi:"apiId"`
	// Appsync domain name.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
}

// NewDomainNameApiAssociation registers a new resource with the given unique name, arguments, and options.
func NewDomainNameApiAssociation(ctx *pulumi.Context,
	name string, args *DomainNameApiAssociationArgs, opts ...pulumi.ResourceOption) (*DomainNameApiAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiId == nil {
		return nil, errors.New("invalid value for required argument 'ApiId'")
	}
	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DomainNameApiAssociation
	err := ctx.RegisterResource("aws:appsync/domainNameApiAssociation:DomainNameApiAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainNameApiAssociation gets an existing DomainNameApiAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainNameApiAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainNameApiAssociationState, opts ...pulumi.ResourceOption) (*DomainNameApiAssociation, error) {
	var resource DomainNameApiAssociation
	err := ctx.ReadResource("aws:appsync/domainNameApiAssociation:DomainNameApiAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainNameApiAssociation resources.
type domainNameApiAssociationState struct {
	// API ID.
	ApiId *string `pulumi:"apiId"`
	// Appsync domain name.
	DomainName *string `pulumi:"domainName"`
}

type DomainNameApiAssociationState struct {
	// API ID.
	ApiId pulumi.StringPtrInput
	// Appsync domain name.
	DomainName pulumi.StringPtrInput
}

func (DomainNameApiAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainNameApiAssociationState)(nil)).Elem()
}

type domainNameApiAssociationArgs struct {
	// API ID.
	ApiId string `pulumi:"apiId"`
	// Appsync domain name.
	DomainName string `pulumi:"domainName"`
}

// The set of arguments for constructing a DomainNameApiAssociation resource.
type DomainNameApiAssociationArgs struct {
	// API ID.
	ApiId pulumi.StringInput
	// Appsync domain name.
	DomainName pulumi.StringInput
}

func (DomainNameApiAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainNameApiAssociationArgs)(nil)).Elem()
}

type DomainNameApiAssociationInput interface {
	pulumi.Input

	ToDomainNameApiAssociationOutput() DomainNameApiAssociationOutput
	ToDomainNameApiAssociationOutputWithContext(ctx context.Context) DomainNameApiAssociationOutput
}

func (*DomainNameApiAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainNameApiAssociation)(nil)).Elem()
}

func (i *DomainNameApiAssociation) ToDomainNameApiAssociationOutput() DomainNameApiAssociationOutput {
	return i.ToDomainNameApiAssociationOutputWithContext(context.Background())
}

func (i *DomainNameApiAssociation) ToDomainNameApiAssociationOutputWithContext(ctx context.Context) DomainNameApiAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNameApiAssociationOutput)
}

func (i *DomainNameApiAssociation) ToOutput(ctx context.Context) pulumix.Output[*DomainNameApiAssociation] {
	return pulumix.Output[*DomainNameApiAssociation]{
		OutputState: i.ToDomainNameApiAssociationOutputWithContext(ctx).OutputState,
	}
}

// DomainNameApiAssociationArrayInput is an input type that accepts DomainNameApiAssociationArray and DomainNameApiAssociationArrayOutput values.
// You can construct a concrete instance of `DomainNameApiAssociationArrayInput` via:
//
//	DomainNameApiAssociationArray{ DomainNameApiAssociationArgs{...} }
type DomainNameApiAssociationArrayInput interface {
	pulumi.Input

	ToDomainNameApiAssociationArrayOutput() DomainNameApiAssociationArrayOutput
	ToDomainNameApiAssociationArrayOutputWithContext(context.Context) DomainNameApiAssociationArrayOutput
}

type DomainNameApiAssociationArray []DomainNameApiAssociationInput

func (DomainNameApiAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainNameApiAssociation)(nil)).Elem()
}

func (i DomainNameApiAssociationArray) ToDomainNameApiAssociationArrayOutput() DomainNameApiAssociationArrayOutput {
	return i.ToDomainNameApiAssociationArrayOutputWithContext(context.Background())
}

func (i DomainNameApiAssociationArray) ToDomainNameApiAssociationArrayOutputWithContext(ctx context.Context) DomainNameApiAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNameApiAssociationArrayOutput)
}

func (i DomainNameApiAssociationArray) ToOutput(ctx context.Context) pulumix.Output[[]*DomainNameApiAssociation] {
	return pulumix.Output[[]*DomainNameApiAssociation]{
		OutputState: i.ToDomainNameApiAssociationArrayOutputWithContext(ctx).OutputState,
	}
}

// DomainNameApiAssociationMapInput is an input type that accepts DomainNameApiAssociationMap and DomainNameApiAssociationMapOutput values.
// You can construct a concrete instance of `DomainNameApiAssociationMapInput` via:
//
//	DomainNameApiAssociationMap{ "key": DomainNameApiAssociationArgs{...} }
type DomainNameApiAssociationMapInput interface {
	pulumi.Input

	ToDomainNameApiAssociationMapOutput() DomainNameApiAssociationMapOutput
	ToDomainNameApiAssociationMapOutputWithContext(context.Context) DomainNameApiAssociationMapOutput
}

type DomainNameApiAssociationMap map[string]DomainNameApiAssociationInput

func (DomainNameApiAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainNameApiAssociation)(nil)).Elem()
}

func (i DomainNameApiAssociationMap) ToDomainNameApiAssociationMapOutput() DomainNameApiAssociationMapOutput {
	return i.ToDomainNameApiAssociationMapOutputWithContext(context.Background())
}

func (i DomainNameApiAssociationMap) ToDomainNameApiAssociationMapOutputWithContext(ctx context.Context) DomainNameApiAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNameApiAssociationMapOutput)
}

func (i DomainNameApiAssociationMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*DomainNameApiAssociation] {
	return pulumix.Output[map[string]*DomainNameApiAssociation]{
		OutputState: i.ToDomainNameApiAssociationMapOutputWithContext(ctx).OutputState,
	}
}

type DomainNameApiAssociationOutput struct{ *pulumi.OutputState }

func (DomainNameApiAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainNameApiAssociation)(nil)).Elem()
}

func (o DomainNameApiAssociationOutput) ToDomainNameApiAssociationOutput() DomainNameApiAssociationOutput {
	return o
}

func (o DomainNameApiAssociationOutput) ToDomainNameApiAssociationOutputWithContext(ctx context.Context) DomainNameApiAssociationOutput {
	return o
}

func (o DomainNameApiAssociationOutput) ToOutput(ctx context.Context) pulumix.Output[*DomainNameApiAssociation] {
	return pulumix.Output[*DomainNameApiAssociation]{
		OutputState: o.OutputState,
	}
}

// API ID.
func (o DomainNameApiAssociationOutput) ApiId() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainNameApiAssociation) pulumi.StringOutput { return v.ApiId }).(pulumi.StringOutput)
}

// Appsync domain name.
func (o DomainNameApiAssociationOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainNameApiAssociation) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

type DomainNameApiAssociationArrayOutput struct{ *pulumi.OutputState }

func (DomainNameApiAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainNameApiAssociation)(nil)).Elem()
}

func (o DomainNameApiAssociationArrayOutput) ToDomainNameApiAssociationArrayOutput() DomainNameApiAssociationArrayOutput {
	return o
}

func (o DomainNameApiAssociationArrayOutput) ToDomainNameApiAssociationArrayOutputWithContext(ctx context.Context) DomainNameApiAssociationArrayOutput {
	return o
}

func (o DomainNameApiAssociationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*DomainNameApiAssociation] {
	return pulumix.Output[[]*DomainNameApiAssociation]{
		OutputState: o.OutputState,
	}
}

func (o DomainNameApiAssociationArrayOutput) Index(i pulumi.IntInput) DomainNameApiAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DomainNameApiAssociation {
		return vs[0].([]*DomainNameApiAssociation)[vs[1].(int)]
	}).(DomainNameApiAssociationOutput)
}

type DomainNameApiAssociationMapOutput struct{ *pulumi.OutputState }

func (DomainNameApiAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainNameApiAssociation)(nil)).Elem()
}

func (o DomainNameApiAssociationMapOutput) ToDomainNameApiAssociationMapOutput() DomainNameApiAssociationMapOutput {
	return o
}

func (o DomainNameApiAssociationMapOutput) ToDomainNameApiAssociationMapOutputWithContext(ctx context.Context) DomainNameApiAssociationMapOutput {
	return o
}

func (o DomainNameApiAssociationMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*DomainNameApiAssociation] {
	return pulumix.Output[map[string]*DomainNameApiAssociation]{
		OutputState: o.OutputState,
	}
}

func (o DomainNameApiAssociationMapOutput) MapIndex(k pulumi.StringInput) DomainNameApiAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DomainNameApiAssociation {
		return vs[0].(map[string]*DomainNameApiAssociation)[vs[1].(string)]
	}).(DomainNameApiAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainNameApiAssociationInput)(nil)).Elem(), &DomainNameApiAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainNameApiAssociationArrayInput)(nil)).Elem(), DomainNameApiAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainNameApiAssociationMapInput)(nil)).Elem(), DomainNameApiAssociationMap{})
	pulumi.RegisterOutputType(DomainNameApiAssociationOutput{})
	pulumi.RegisterOutputType(DomainNameApiAssociationArrayOutput{})
	pulumi.RegisterOutputType(DomainNameApiAssociationMapOutput{})
}
