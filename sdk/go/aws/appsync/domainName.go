// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package appsync

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an AppSync Domain Name.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/appsync"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := appsync.NewDomainName(ctx, "example", &appsync.DomainNameArgs{
// 			DomainName:     pulumi.String("api.example.com"),
// 			CertificateArn: pulumi.Any(aws_acm_certificate.Example.Arn),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// `aws_appsync_domain_name` can be imported using the AppSync domain name, e.g.,
//
// ```sh
//  $ pulumi import aws:appsync/domainName:DomainName example example.com
// ```
type DomainName struct {
	pulumi.CustomResourceState

	// The domain name that AppSync provides.
	AppsyncDomainName pulumi.StringOutput `pulumi:"appsyncDomainName"`
	// The Amazon Resource Name (ARN) of the certificate. This can be an Certificate Manager (ACM) certificate or an Identity and Access Management (IAM) server certificate. The certifiacte must reside in us-east-1.
	CertificateArn pulumi.StringOutput `pulumi:"certificateArn"`
	// A description of the Domain Name.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The domain name.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// The ID of your Amazon Route 53 hosted zone.
	HostedZoneId pulumi.StringOutput `pulumi:"hostedZoneId"`
}

// NewDomainName registers a new resource with the given unique name, arguments, and options.
func NewDomainName(ctx *pulumi.Context,
	name string, args *DomainNameArgs, opts ...pulumi.ResourceOption) (*DomainName, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateArn == nil {
		return nil, errors.New("invalid value for required argument 'CertificateArn'")
	}
	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	var resource DomainName
	err := ctx.RegisterResource("aws:appsync/domainName:DomainName", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainName gets an existing DomainName resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainName(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainNameState, opts ...pulumi.ResourceOption) (*DomainName, error) {
	var resource DomainName
	err := ctx.ReadResource("aws:appsync/domainName:DomainName", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainName resources.
type domainNameState struct {
	// The domain name that AppSync provides.
	AppsyncDomainName *string `pulumi:"appsyncDomainName"`
	// The Amazon Resource Name (ARN) of the certificate. This can be an Certificate Manager (ACM) certificate or an Identity and Access Management (IAM) server certificate. The certifiacte must reside in us-east-1.
	CertificateArn *string `pulumi:"certificateArn"`
	// A description of the Domain Name.
	Description *string `pulumi:"description"`
	// The domain name.
	DomainName *string `pulumi:"domainName"`
	// The ID of your Amazon Route 53 hosted zone.
	HostedZoneId *string `pulumi:"hostedZoneId"`
}

type DomainNameState struct {
	// The domain name that AppSync provides.
	AppsyncDomainName pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) of the certificate. This can be an Certificate Manager (ACM) certificate or an Identity and Access Management (IAM) server certificate. The certifiacte must reside in us-east-1.
	CertificateArn pulumi.StringPtrInput
	// A description of the Domain Name.
	Description pulumi.StringPtrInput
	// The domain name.
	DomainName pulumi.StringPtrInput
	// The ID of your Amazon Route 53 hosted zone.
	HostedZoneId pulumi.StringPtrInput
}

func (DomainNameState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainNameState)(nil)).Elem()
}

type domainNameArgs struct {
	// The Amazon Resource Name (ARN) of the certificate. This can be an Certificate Manager (ACM) certificate or an Identity and Access Management (IAM) server certificate. The certifiacte must reside in us-east-1.
	CertificateArn string `pulumi:"certificateArn"`
	// A description of the Domain Name.
	Description *string `pulumi:"description"`
	// The domain name.
	DomainName string `pulumi:"domainName"`
}

// The set of arguments for constructing a DomainName resource.
type DomainNameArgs struct {
	// The Amazon Resource Name (ARN) of the certificate. This can be an Certificate Manager (ACM) certificate or an Identity and Access Management (IAM) server certificate. The certifiacte must reside in us-east-1.
	CertificateArn pulumi.StringInput
	// A description of the Domain Name.
	Description pulumi.StringPtrInput
	// The domain name.
	DomainName pulumi.StringInput
}

func (DomainNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainNameArgs)(nil)).Elem()
}

type DomainNameInput interface {
	pulumi.Input

	ToDomainNameOutput() DomainNameOutput
	ToDomainNameOutputWithContext(ctx context.Context) DomainNameOutput
}

func (*DomainName) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainName)(nil)).Elem()
}

func (i *DomainName) ToDomainNameOutput() DomainNameOutput {
	return i.ToDomainNameOutputWithContext(context.Background())
}

func (i *DomainName) ToDomainNameOutputWithContext(ctx context.Context) DomainNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNameOutput)
}

// DomainNameArrayInput is an input type that accepts DomainNameArray and DomainNameArrayOutput values.
// You can construct a concrete instance of `DomainNameArrayInput` via:
//
//          DomainNameArray{ DomainNameArgs{...} }
type DomainNameArrayInput interface {
	pulumi.Input

	ToDomainNameArrayOutput() DomainNameArrayOutput
	ToDomainNameArrayOutputWithContext(context.Context) DomainNameArrayOutput
}

type DomainNameArray []DomainNameInput

func (DomainNameArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainName)(nil)).Elem()
}

func (i DomainNameArray) ToDomainNameArrayOutput() DomainNameArrayOutput {
	return i.ToDomainNameArrayOutputWithContext(context.Background())
}

func (i DomainNameArray) ToDomainNameArrayOutputWithContext(ctx context.Context) DomainNameArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNameArrayOutput)
}

// DomainNameMapInput is an input type that accepts DomainNameMap and DomainNameMapOutput values.
// You can construct a concrete instance of `DomainNameMapInput` via:
//
//          DomainNameMap{ "key": DomainNameArgs{...} }
type DomainNameMapInput interface {
	pulumi.Input

	ToDomainNameMapOutput() DomainNameMapOutput
	ToDomainNameMapOutputWithContext(context.Context) DomainNameMapOutput
}

type DomainNameMap map[string]DomainNameInput

func (DomainNameMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainName)(nil)).Elem()
}

func (i DomainNameMap) ToDomainNameMapOutput() DomainNameMapOutput {
	return i.ToDomainNameMapOutputWithContext(context.Background())
}

func (i DomainNameMap) ToDomainNameMapOutputWithContext(ctx context.Context) DomainNameMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNameMapOutput)
}

type DomainNameOutput struct{ *pulumi.OutputState }

func (DomainNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainName)(nil)).Elem()
}

func (o DomainNameOutput) ToDomainNameOutput() DomainNameOutput {
	return o
}

func (o DomainNameOutput) ToDomainNameOutputWithContext(ctx context.Context) DomainNameOutput {
	return o
}

type DomainNameArrayOutput struct{ *pulumi.OutputState }

func (DomainNameArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainName)(nil)).Elem()
}

func (o DomainNameArrayOutput) ToDomainNameArrayOutput() DomainNameArrayOutput {
	return o
}

func (o DomainNameArrayOutput) ToDomainNameArrayOutputWithContext(ctx context.Context) DomainNameArrayOutput {
	return o
}

func (o DomainNameArrayOutput) Index(i pulumi.IntInput) DomainNameOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DomainName {
		return vs[0].([]*DomainName)[vs[1].(int)]
	}).(DomainNameOutput)
}

type DomainNameMapOutput struct{ *pulumi.OutputState }

func (DomainNameMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainName)(nil)).Elem()
}

func (o DomainNameMapOutput) ToDomainNameMapOutput() DomainNameMapOutput {
	return o
}

func (o DomainNameMapOutput) ToDomainNameMapOutputWithContext(ctx context.Context) DomainNameMapOutput {
	return o
}

func (o DomainNameMapOutput) MapIndex(k pulumi.StringInput) DomainNameOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DomainName {
		return vs[0].(map[string]*DomainName)[vs[1].(string)]
	}).(DomainNameOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainNameInput)(nil)).Elem(), &DomainName{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainNameArrayInput)(nil)).Elem(), DomainNameArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainNameMapInput)(nil)).Elem(), DomainNameMap{})
	pulumi.RegisterOutputType(DomainNameOutput{})
	pulumi.RegisterOutputType(DomainNameArrayOutput{})
	pulumi.RegisterOutputType(DomainNameMapOutput{})
}
