// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appsync

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Resolver struct {
	pulumi.CustomResourceState

	ApiId            pulumi.StringOutput             `pulumi:"apiId"`
	Arn              pulumi.StringOutput             `pulumi:"arn"`
	CachingConfig    ResolverCachingConfigPtrOutput  `pulumi:"cachingConfig"`
	Code             pulumi.StringPtrOutput          `pulumi:"code"`
	DataSource       pulumi.StringPtrOutput          `pulumi:"dataSource"`
	Field            pulumi.StringOutput             `pulumi:"field"`
	Kind             pulumi.StringPtrOutput          `pulumi:"kind"`
	MaxBatchSize     pulumi.IntPtrOutput             `pulumi:"maxBatchSize"`
	PipelineConfig   ResolverPipelineConfigPtrOutput `pulumi:"pipelineConfig"`
	RequestTemplate  pulumi.StringPtrOutput          `pulumi:"requestTemplate"`
	ResponseTemplate pulumi.StringPtrOutput          `pulumi:"responseTemplate"`
	Runtime          ResolverRuntimePtrOutput        `pulumi:"runtime"`
	SyncConfig       ResolverSyncConfigPtrOutput     `pulumi:"syncConfig"`
	Type             pulumi.StringOutput             `pulumi:"type"`
}

// NewResolver registers a new resource with the given unique name, arguments, and options.
func NewResolver(ctx *pulumi.Context,
	name string, args *ResolverArgs, opts ...pulumi.ResourceOption) (*Resolver, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiId == nil {
		return nil, errors.New("invalid value for required argument 'ApiId'")
	}
	if args.Field == nil {
		return nil, errors.New("invalid value for required argument 'Field'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource Resolver
	err := ctx.RegisterResource("aws:appsync/resolver:Resolver", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResolver gets an existing Resolver resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResolver(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResolverState, opts ...pulumi.ResourceOption) (*Resolver, error) {
	var resource Resolver
	err := ctx.ReadResource("aws:appsync/resolver:Resolver", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Resolver resources.
type resolverState struct {
	ApiId            *string                 `pulumi:"apiId"`
	Arn              *string                 `pulumi:"arn"`
	CachingConfig    *ResolverCachingConfig  `pulumi:"cachingConfig"`
	Code             *string                 `pulumi:"code"`
	DataSource       *string                 `pulumi:"dataSource"`
	Field            *string                 `pulumi:"field"`
	Kind             *string                 `pulumi:"kind"`
	MaxBatchSize     *int                    `pulumi:"maxBatchSize"`
	PipelineConfig   *ResolverPipelineConfig `pulumi:"pipelineConfig"`
	RequestTemplate  *string                 `pulumi:"requestTemplate"`
	ResponseTemplate *string                 `pulumi:"responseTemplate"`
	Runtime          *ResolverRuntime        `pulumi:"runtime"`
	SyncConfig       *ResolverSyncConfig     `pulumi:"syncConfig"`
	Type             *string                 `pulumi:"type"`
}

type ResolverState struct {
	ApiId            pulumi.StringPtrInput
	Arn              pulumi.StringPtrInput
	CachingConfig    ResolverCachingConfigPtrInput
	Code             pulumi.StringPtrInput
	DataSource       pulumi.StringPtrInput
	Field            pulumi.StringPtrInput
	Kind             pulumi.StringPtrInput
	MaxBatchSize     pulumi.IntPtrInput
	PipelineConfig   ResolverPipelineConfigPtrInput
	RequestTemplate  pulumi.StringPtrInput
	ResponseTemplate pulumi.StringPtrInput
	Runtime          ResolverRuntimePtrInput
	SyncConfig       ResolverSyncConfigPtrInput
	Type             pulumi.StringPtrInput
}

func (ResolverState) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverState)(nil)).Elem()
}

type resolverArgs struct {
	ApiId            string                  `pulumi:"apiId"`
	CachingConfig    *ResolverCachingConfig  `pulumi:"cachingConfig"`
	Code             *string                 `pulumi:"code"`
	DataSource       *string                 `pulumi:"dataSource"`
	Field            string                  `pulumi:"field"`
	Kind             *string                 `pulumi:"kind"`
	MaxBatchSize     *int                    `pulumi:"maxBatchSize"`
	PipelineConfig   *ResolverPipelineConfig `pulumi:"pipelineConfig"`
	RequestTemplate  *string                 `pulumi:"requestTemplate"`
	ResponseTemplate *string                 `pulumi:"responseTemplate"`
	Runtime          *ResolverRuntime        `pulumi:"runtime"`
	SyncConfig       *ResolverSyncConfig     `pulumi:"syncConfig"`
	Type             string                  `pulumi:"type"`
}

// The set of arguments for constructing a Resolver resource.
type ResolverArgs struct {
	ApiId            pulumi.StringInput
	CachingConfig    ResolverCachingConfigPtrInput
	Code             pulumi.StringPtrInput
	DataSource       pulumi.StringPtrInput
	Field            pulumi.StringInput
	Kind             pulumi.StringPtrInput
	MaxBatchSize     pulumi.IntPtrInput
	PipelineConfig   ResolverPipelineConfigPtrInput
	RequestTemplate  pulumi.StringPtrInput
	ResponseTemplate pulumi.StringPtrInput
	Runtime          ResolverRuntimePtrInput
	SyncConfig       ResolverSyncConfigPtrInput
	Type             pulumi.StringInput
}

func (ResolverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverArgs)(nil)).Elem()
}

type ResolverInput interface {
	pulumi.Input

	ToResolverOutput() ResolverOutput
	ToResolverOutputWithContext(ctx context.Context) ResolverOutput
}

func (*Resolver) ElementType() reflect.Type {
	return reflect.TypeOf((**Resolver)(nil)).Elem()
}

func (i *Resolver) ToResolverOutput() ResolverOutput {
	return i.ToResolverOutputWithContext(context.Background())
}

func (i *Resolver) ToResolverOutputWithContext(ctx context.Context) ResolverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverOutput)
}

// ResolverArrayInput is an input type that accepts ResolverArray and ResolverArrayOutput values.
// You can construct a concrete instance of `ResolverArrayInput` via:
//
//	ResolverArray{ ResolverArgs{...} }
type ResolverArrayInput interface {
	pulumi.Input

	ToResolverArrayOutput() ResolverArrayOutput
	ToResolverArrayOutputWithContext(context.Context) ResolverArrayOutput
}

type ResolverArray []ResolverInput

func (ResolverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Resolver)(nil)).Elem()
}

func (i ResolverArray) ToResolverArrayOutput() ResolverArrayOutput {
	return i.ToResolverArrayOutputWithContext(context.Background())
}

func (i ResolverArray) ToResolverArrayOutputWithContext(ctx context.Context) ResolverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverArrayOutput)
}

// ResolverMapInput is an input type that accepts ResolverMap and ResolverMapOutput values.
// You can construct a concrete instance of `ResolverMapInput` via:
//
//	ResolverMap{ "key": ResolverArgs{...} }
type ResolverMapInput interface {
	pulumi.Input

	ToResolverMapOutput() ResolverMapOutput
	ToResolverMapOutputWithContext(context.Context) ResolverMapOutput
}

type ResolverMap map[string]ResolverInput

func (ResolverMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Resolver)(nil)).Elem()
}

func (i ResolverMap) ToResolverMapOutput() ResolverMapOutput {
	return i.ToResolverMapOutputWithContext(context.Background())
}

func (i ResolverMap) ToResolverMapOutputWithContext(ctx context.Context) ResolverMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverMapOutput)
}

type ResolverOutput struct{ *pulumi.OutputState }

func (ResolverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Resolver)(nil)).Elem()
}

func (o ResolverOutput) ToResolverOutput() ResolverOutput {
	return o
}

func (o ResolverOutput) ToResolverOutputWithContext(ctx context.Context) ResolverOutput {
	return o
}

func (o ResolverOutput) ApiId() pulumi.StringOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringOutput { return v.ApiId }).(pulumi.StringOutput)
}

func (o ResolverOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ResolverOutput) CachingConfig() ResolverCachingConfigPtrOutput {
	return o.ApplyT(func(v *Resolver) ResolverCachingConfigPtrOutput { return v.CachingConfig }).(ResolverCachingConfigPtrOutput)
}

func (o ResolverOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringPtrOutput { return v.Code }).(pulumi.StringPtrOutput)
}

func (o ResolverOutput) DataSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringPtrOutput { return v.DataSource }).(pulumi.StringPtrOutput)
}

func (o ResolverOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringOutput { return v.Field }).(pulumi.StringOutput)
}

func (o ResolverOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o ResolverOutput) MaxBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Resolver) pulumi.IntPtrOutput { return v.MaxBatchSize }).(pulumi.IntPtrOutput)
}

func (o ResolverOutput) PipelineConfig() ResolverPipelineConfigPtrOutput {
	return o.ApplyT(func(v *Resolver) ResolverPipelineConfigPtrOutput { return v.PipelineConfig }).(ResolverPipelineConfigPtrOutput)
}

func (o ResolverOutput) RequestTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringPtrOutput { return v.RequestTemplate }).(pulumi.StringPtrOutput)
}

func (o ResolverOutput) ResponseTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringPtrOutput { return v.ResponseTemplate }).(pulumi.StringPtrOutput)
}

func (o ResolverOutput) Runtime() ResolverRuntimePtrOutput {
	return o.ApplyT(func(v *Resolver) ResolverRuntimePtrOutput { return v.Runtime }).(ResolverRuntimePtrOutput)
}

func (o ResolverOutput) SyncConfig() ResolverSyncConfigPtrOutput {
	return o.ApplyT(func(v *Resolver) ResolverSyncConfigPtrOutput { return v.SyncConfig }).(ResolverSyncConfigPtrOutput)
}

func (o ResolverOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type ResolverArrayOutput struct{ *pulumi.OutputState }

func (ResolverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Resolver)(nil)).Elem()
}

func (o ResolverArrayOutput) ToResolverArrayOutput() ResolverArrayOutput {
	return o
}

func (o ResolverArrayOutput) ToResolverArrayOutputWithContext(ctx context.Context) ResolverArrayOutput {
	return o
}

func (o ResolverArrayOutput) Index(i pulumi.IntInput) ResolverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Resolver {
		return vs[0].([]*Resolver)[vs[1].(int)]
	}).(ResolverOutput)
}

type ResolverMapOutput struct{ *pulumi.OutputState }

func (ResolverMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Resolver)(nil)).Elem()
}

func (o ResolverMapOutput) ToResolverMapOutput() ResolverMapOutput {
	return o
}

func (o ResolverMapOutput) ToResolverMapOutputWithContext(ctx context.Context) ResolverMapOutput {
	return o
}

func (o ResolverMapOutput) MapIndex(k pulumi.StringInput) ResolverOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Resolver {
		return vs[0].(map[string]*Resolver)[vs[1].(string)]
	}).(ResolverOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverInput)(nil)).Elem(), &Resolver{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverArrayInput)(nil)).Elem(), ResolverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverMapInput)(nil)).Elem(), ResolverMap{})
	pulumi.RegisterOutputType(ResolverOutput{})
	pulumi.RegisterOutputType(ResolverArrayOutput{})
	pulumi.RegisterOutputType(ResolverMapOutput{})
}
