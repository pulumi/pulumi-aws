// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appsync

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Function struct {
	pulumi.CustomResourceState

	ApiId                   pulumi.StringOutput         `pulumi:"apiId"`
	Arn                     pulumi.StringOutput         `pulumi:"arn"`
	Code                    pulumi.StringPtrOutput      `pulumi:"code"`
	DataSource              pulumi.StringOutput         `pulumi:"dataSource"`
	Description             pulumi.StringPtrOutput      `pulumi:"description"`
	FunctionId              pulumi.StringOutput         `pulumi:"functionId"`
	FunctionVersion         pulumi.StringOutput         `pulumi:"functionVersion"`
	MaxBatchSize            pulumi.IntPtrOutput         `pulumi:"maxBatchSize"`
	Name                    pulumi.StringOutput         `pulumi:"name"`
	RequestMappingTemplate  pulumi.StringPtrOutput      `pulumi:"requestMappingTemplate"`
	ResponseMappingTemplate pulumi.StringPtrOutput      `pulumi:"responseMappingTemplate"`
	Runtime                 FunctionRuntimePtrOutput    `pulumi:"runtime"`
	SyncConfig              FunctionSyncConfigPtrOutput `pulumi:"syncConfig"`
}

// NewFunction registers a new resource with the given unique name, arguments, and options.
func NewFunction(ctx *pulumi.Context,
	name string, args *FunctionArgs, opts ...pulumi.ResourceOption) (*Function, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiId == nil {
		return nil, errors.New("invalid value for required argument 'ApiId'")
	}
	if args.DataSource == nil {
		return nil, errors.New("invalid value for required argument 'DataSource'")
	}
	var resource Function
	err := ctx.RegisterResource("aws:appsync/function:Function", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFunction gets an existing Function resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFunction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FunctionState, opts ...pulumi.ResourceOption) (*Function, error) {
	var resource Function
	err := ctx.ReadResource("aws:appsync/function:Function", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Function resources.
type functionState struct {
	ApiId                   *string             `pulumi:"apiId"`
	Arn                     *string             `pulumi:"arn"`
	Code                    *string             `pulumi:"code"`
	DataSource              *string             `pulumi:"dataSource"`
	Description             *string             `pulumi:"description"`
	FunctionId              *string             `pulumi:"functionId"`
	FunctionVersion         *string             `pulumi:"functionVersion"`
	MaxBatchSize            *int                `pulumi:"maxBatchSize"`
	Name                    *string             `pulumi:"name"`
	RequestMappingTemplate  *string             `pulumi:"requestMappingTemplate"`
	ResponseMappingTemplate *string             `pulumi:"responseMappingTemplate"`
	Runtime                 *FunctionRuntime    `pulumi:"runtime"`
	SyncConfig              *FunctionSyncConfig `pulumi:"syncConfig"`
}

type FunctionState struct {
	ApiId                   pulumi.StringPtrInput
	Arn                     pulumi.StringPtrInput
	Code                    pulumi.StringPtrInput
	DataSource              pulumi.StringPtrInput
	Description             pulumi.StringPtrInput
	FunctionId              pulumi.StringPtrInput
	FunctionVersion         pulumi.StringPtrInput
	MaxBatchSize            pulumi.IntPtrInput
	Name                    pulumi.StringPtrInput
	RequestMappingTemplate  pulumi.StringPtrInput
	ResponseMappingTemplate pulumi.StringPtrInput
	Runtime                 FunctionRuntimePtrInput
	SyncConfig              FunctionSyncConfigPtrInput
}

func (FunctionState) ElementType() reflect.Type {
	return reflect.TypeOf((*functionState)(nil)).Elem()
}

type functionArgs struct {
	ApiId                   string              `pulumi:"apiId"`
	Code                    *string             `pulumi:"code"`
	DataSource              string              `pulumi:"dataSource"`
	Description             *string             `pulumi:"description"`
	FunctionVersion         *string             `pulumi:"functionVersion"`
	MaxBatchSize            *int                `pulumi:"maxBatchSize"`
	Name                    *string             `pulumi:"name"`
	RequestMappingTemplate  *string             `pulumi:"requestMappingTemplate"`
	ResponseMappingTemplate *string             `pulumi:"responseMappingTemplate"`
	Runtime                 *FunctionRuntime    `pulumi:"runtime"`
	SyncConfig              *FunctionSyncConfig `pulumi:"syncConfig"`
}

// The set of arguments for constructing a Function resource.
type FunctionArgs struct {
	ApiId                   pulumi.StringInput
	Code                    pulumi.StringPtrInput
	DataSource              pulumi.StringInput
	Description             pulumi.StringPtrInput
	FunctionVersion         pulumi.StringPtrInput
	MaxBatchSize            pulumi.IntPtrInput
	Name                    pulumi.StringPtrInput
	RequestMappingTemplate  pulumi.StringPtrInput
	ResponseMappingTemplate pulumi.StringPtrInput
	Runtime                 FunctionRuntimePtrInput
	SyncConfig              FunctionSyncConfigPtrInput
}

func (FunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*functionArgs)(nil)).Elem()
}

type FunctionInput interface {
	pulumi.Input

	ToFunctionOutput() FunctionOutput
	ToFunctionOutputWithContext(ctx context.Context) FunctionOutput
}

func (*Function) ElementType() reflect.Type {
	return reflect.TypeOf((**Function)(nil)).Elem()
}

func (i *Function) ToFunctionOutput() FunctionOutput {
	return i.ToFunctionOutputWithContext(context.Background())
}

func (i *Function) ToFunctionOutputWithContext(ctx context.Context) FunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionOutput)
}

// FunctionArrayInput is an input type that accepts FunctionArray and FunctionArrayOutput values.
// You can construct a concrete instance of `FunctionArrayInput` via:
//
//	FunctionArray{ FunctionArgs{...} }
type FunctionArrayInput interface {
	pulumi.Input

	ToFunctionArrayOutput() FunctionArrayOutput
	ToFunctionArrayOutputWithContext(context.Context) FunctionArrayOutput
}

type FunctionArray []FunctionInput

func (FunctionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Function)(nil)).Elem()
}

func (i FunctionArray) ToFunctionArrayOutput() FunctionArrayOutput {
	return i.ToFunctionArrayOutputWithContext(context.Background())
}

func (i FunctionArray) ToFunctionArrayOutputWithContext(ctx context.Context) FunctionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionArrayOutput)
}

// FunctionMapInput is an input type that accepts FunctionMap and FunctionMapOutput values.
// You can construct a concrete instance of `FunctionMapInput` via:
//
//	FunctionMap{ "key": FunctionArgs{...} }
type FunctionMapInput interface {
	pulumi.Input

	ToFunctionMapOutput() FunctionMapOutput
	ToFunctionMapOutputWithContext(context.Context) FunctionMapOutput
}

type FunctionMap map[string]FunctionInput

func (FunctionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Function)(nil)).Elem()
}

func (i FunctionMap) ToFunctionMapOutput() FunctionMapOutput {
	return i.ToFunctionMapOutputWithContext(context.Background())
}

func (i FunctionMap) ToFunctionMapOutputWithContext(ctx context.Context) FunctionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionMapOutput)
}

type FunctionOutput struct{ *pulumi.OutputState }

func (FunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Function)(nil)).Elem()
}

func (o FunctionOutput) ToFunctionOutput() FunctionOutput {
	return o
}

func (o FunctionOutput) ToFunctionOutputWithContext(ctx context.Context) FunctionOutput {
	return o
}

func (o FunctionOutput) ApiId() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.ApiId }).(pulumi.StringOutput)
}

func (o FunctionOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o FunctionOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Function) pulumi.StringPtrOutput { return v.Code }).(pulumi.StringPtrOutput)
}

func (o FunctionOutput) DataSource() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.DataSource }).(pulumi.StringOutput)
}

func (o FunctionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Function) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o FunctionOutput) FunctionId() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.FunctionId }).(pulumi.StringOutput)
}

func (o FunctionOutput) FunctionVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.FunctionVersion }).(pulumi.StringOutput)
}

func (o FunctionOutput) MaxBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Function) pulumi.IntPtrOutput { return v.MaxBatchSize }).(pulumi.IntPtrOutput)
}

func (o FunctionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o FunctionOutput) RequestMappingTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Function) pulumi.StringPtrOutput { return v.RequestMappingTemplate }).(pulumi.StringPtrOutput)
}

func (o FunctionOutput) ResponseMappingTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Function) pulumi.StringPtrOutput { return v.ResponseMappingTemplate }).(pulumi.StringPtrOutput)
}

func (o FunctionOutput) Runtime() FunctionRuntimePtrOutput {
	return o.ApplyT(func(v *Function) FunctionRuntimePtrOutput { return v.Runtime }).(FunctionRuntimePtrOutput)
}

func (o FunctionOutput) SyncConfig() FunctionSyncConfigPtrOutput {
	return o.ApplyT(func(v *Function) FunctionSyncConfigPtrOutput { return v.SyncConfig }).(FunctionSyncConfigPtrOutput)
}

type FunctionArrayOutput struct{ *pulumi.OutputState }

func (FunctionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Function)(nil)).Elem()
}

func (o FunctionArrayOutput) ToFunctionArrayOutput() FunctionArrayOutput {
	return o
}

func (o FunctionArrayOutput) ToFunctionArrayOutputWithContext(ctx context.Context) FunctionArrayOutput {
	return o
}

func (o FunctionArrayOutput) Index(i pulumi.IntInput) FunctionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Function {
		return vs[0].([]*Function)[vs[1].(int)]
	}).(FunctionOutput)
}

type FunctionMapOutput struct{ *pulumi.OutputState }

func (FunctionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Function)(nil)).Elem()
}

func (o FunctionMapOutput) ToFunctionMapOutput() FunctionMapOutput {
	return o
}

func (o FunctionMapOutput) ToFunctionMapOutputWithContext(ctx context.Context) FunctionMapOutput {
	return o
}

func (o FunctionMapOutput) MapIndex(k pulumi.StringInput) FunctionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Function {
		return vs[0].(map[string]*Function)[vs[1].(string)]
	}).(FunctionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionInput)(nil)).Elem(), &Function{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionArrayInput)(nil)).Elem(), FunctionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionMapInput)(nil)).Elem(), FunctionMap{})
	pulumi.RegisterOutputType(FunctionOutput{})
	pulumi.RegisterOutputType(FunctionArrayOutput{})
	pulumi.RegisterOutputType(FunctionMapOutput{})
}
