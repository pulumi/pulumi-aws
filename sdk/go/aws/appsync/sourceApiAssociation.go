// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appsync

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS AppSync Source Api Association.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/appsync"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := appsync.NewSourceApiAssociation(ctx, "test", &appsync.SourceApiAssociationArgs{
//				Description: pulumi.String("My source API Merged"),
//				MergedApiId: pulumi.String("gzos6bteufdunffzzifiowisoe"),
//				SourceApiId: pulumi.String("fzzifiowisoegzos6bteufdunf"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import AppSync Source Api Association using the `gzos6bteufdunffzzifiowisoe,243685a0-9347-4a1a-89c1-9b57dea01e31`. For example:
//
// ```sh
// $ pulumi import aws:appsync/sourceApiAssociation:SourceApiAssociation example gzos6bteufdunffzzifiowisoe,243685a0-9347-4a1a-89c1-9b57dea01e31
// ```
type SourceApiAssociation struct {
	pulumi.CustomResourceState

	// ARN of the Source Api Association.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// ID of the Source Api Association.
	AssociationId pulumi.StringOutput `pulumi:"associationId"`
	// Description of the source API being merged.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// ARN of the merged API. One of `mergedApiArn` or `mergedApiId` must be specified.
	MergedApiArn pulumi.StringOutput `pulumi:"mergedApiArn"`
	// ID of the merged API. One of `mergedApiArn` or `mergedApiId` must be specified.
	MergedApiId pulumi.StringOutput `pulumi:"mergedApiId"`
	// ARN of the source API. One of `sourceApiArn` or `sourceApiId` must be specified.
	SourceApiArn                pulumi.StringOutput                                       `pulumi:"sourceApiArn"`
	SourceApiAssociationConfigs SourceApiAssociationSourceApiAssociationConfigArrayOutput `pulumi:"sourceApiAssociationConfigs"`
	// ID of the source API. One of `sourceApiArn` or `sourceApiId` must be specified.
	SourceApiId pulumi.StringOutput                   `pulumi:"sourceApiId"`
	Timeouts    SourceApiAssociationTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewSourceApiAssociation registers a new resource with the given unique name, arguments, and options.
func NewSourceApiAssociation(ctx *pulumi.Context,
	name string, args *SourceApiAssociationArgs, opts ...pulumi.ResourceOption) (*SourceApiAssociation, error) {
	if args == nil {
		args = &SourceApiAssociationArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceApiAssociation
	err := ctx.RegisterResource("aws:appsync/sourceApiAssociation:SourceApiAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceApiAssociation gets an existing SourceApiAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceApiAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceApiAssociationState, opts ...pulumi.ResourceOption) (*SourceApiAssociation, error) {
	var resource SourceApiAssociation
	err := ctx.ReadResource("aws:appsync/sourceApiAssociation:SourceApiAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceApiAssociation resources.
type sourceApiAssociationState struct {
	// ARN of the Source Api Association.
	Arn *string `pulumi:"arn"`
	// ID of the Source Api Association.
	AssociationId *string `pulumi:"associationId"`
	// Description of the source API being merged.
	Description *string `pulumi:"description"`
	// ARN of the merged API. One of `mergedApiArn` or `mergedApiId` must be specified.
	MergedApiArn *string `pulumi:"mergedApiArn"`
	// ID of the merged API. One of `mergedApiArn` or `mergedApiId` must be specified.
	MergedApiId *string `pulumi:"mergedApiId"`
	// ARN of the source API. One of `sourceApiArn` or `sourceApiId` must be specified.
	SourceApiArn                *string                                          `pulumi:"sourceApiArn"`
	SourceApiAssociationConfigs []SourceApiAssociationSourceApiAssociationConfig `pulumi:"sourceApiAssociationConfigs"`
	// ID of the source API. One of `sourceApiArn` or `sourceApiId` must be specified.
	SourceApiId *string                       `pulumi:"sourceApiId"`
	Timeouts    *SourceApiAssociationTimeouts `pulumi:"timeouts"`
}

type SourceApiAssociationState struct {
	// ARN of the Source Api Association.
	Arn pulumi.StringPtrInput
	// ID of the Source Api Association.
	AssociationId pulumi.StringPtrInput
	// Description of the source API being merged.
	Description pulumi.StringPtrInput
	// ARN of the merged API. One of `mergedApiArn` or `mergedApiId` must be specified.
	MergedApiArn pulumi.StringPtrInput
	// ID of the merged API. One of `mergedApiArn` or `mergedApiId` must be specified.
	MergedApiId pulumi.StringPtrInput
	// ARN of the source API. One of `sourceApiArn` or `sourceApiId` must be specified.
	SourceApiArn                pulumi.StringPtrInput
	SourceApiAssociationConfigs SourceApiAssociationSourceApiAssociationConfigArrayInput
	// ID of the source API. One of `sourceApiArn` or `sourceApiId` must be specified.
	SourceApiId pulumi.StringPtrInput
	Timeouts    SourceApiAssociationTimeoutsPtrInput
}

func (SourceApiAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceApiAssociationState)(nil)).Elem()
}

type sourceApiAssociationArgs struct {
	// Description of the source API being merged.
	Description *string `pulumi:"description"`
	// ARN of the merged API. One of `mergedApiArn` or `mergedApiId` must be specified.
	MergedApiArn *string `pulumi:"mergedApiArn"`
	// ID of the merged API. One of `mergedApiArn` or `mergedApiId` must be specified.
	MergedApiId *string `pulumi:"mergedApiId"`
	// ARN of the source API. One of `sourceApiArn` or `sourceApiId` must be specified.
	SourceApiArn                *string                                          `pulumi:"sourceApiArn"`
	SourceApiAssociationConfigs []SourceApiAssociationSourceApiAssociationConfig `pulumi:"sourceApiAssociationConfigs"`
	// ID of the source API. One of `sourceApiArn` or `sourceApiId` must be specified.
	SourceApiId *string                       `pulumi:"sourceApiId"`
	Timeouts    *SourceApiAssociationTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a SourceApiAssociation resource.
type SourceApiAssociationArgs struct {
	// Description of the source API being merged.
	Description pulumi.StringPtrInput
	// ARN of the merged API. One of `mergedApiArn` or `mergedApiId` must be specified.
	MergedApiArn pulumi.StringPtrInput
	// ID of the merged API. One of `mergedApiArn` or `mergedApiId` must be specified.
	MergedApiId pulumi.StringPtrInput
	// ARN of the source API. One of `sourceApiArn` or `sourceApiId` must be specified.
	SourceApiArn                pulumi.StringPtrInput
	SourceApiAssociationConfigs SourceApiAssociationSourceApiAssociationConfigArrayInput
	// ID of the source API. One of `sourceApiArn` or `sourceApiId` must be specified.
	SourceApiId pulumi.StringPtrInput
	Timeouts    SourceApiAssociationTimeoutsPtrInput
}

func (SourceApiAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceApiAssociationArgs)(nil)).Elem()
}

type SourceApiAssociationInput interface {
	pulumi.Input

	ToSourceApiAssociationOutput() SourceApiAssociationOutput
	ToSourceApiAssociationOutputWithContext(ctx context.Context) SourceApiAssociationOutput
}

func (*SourceApiAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceApiAssociation)(nil)).Elem()
}

func (i *SourceApiAssociation) ToSourceApiAssociationOutput() SourceApiAssociationOutput {
	return i.ToSourceApiAssociationOutputWithContext(context.Background())
}

func (i *SourceApiAssociation) ToSourceApiAssociationOutputWithContext(ctx context.Context) SourceApiAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceApiAssociationOutput)
}

// SourceApiAssociationArrayInput is an input type that accepts SourceApiAssociationArray and SourceApiAssociationArrayOutput values.
// You can construct a concrete instance of `SourceApiAssociationArrayInput` via:
//
//	SourceApiAssociationArray{ SourceApiAssociationArgs{...} }
type SourceApiAssociationArrayInput interface {
	pulumi.Input

	ToSourceApiAssociationArrayOutput() SourceApiAssociationArrayOutput
	ToSourceApiAssociationArrayOutputWithContext(context.Context) SourceApiAssociationArrayOutput
}

type SourceApiAssociationArray []SourceApiAssociationInput

func (SourceApiAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceApiAssociation)(nil)).Elem()
}

func (i SourceApiAssociationArray) ToSourceApiAssociationArrayOutput() SourceApiAssociationArrayOutput {
	return i.ToSourceApiAssociationArrayOutputWithContext(context.Background())
}

func (i SourceApiAssociationArray) ToSourceApiAssociationArrayOutputWithContext(ctx context.Context) SourceApiAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceApiAssociationArrayOutput)
}

// SourceApiAssociationMapInput is an input type that accepts SourceApiAssociationMap and SourceApiAssociationMapOutput values.
// You can construct a concrete instance of `SourceApiAssociationMapInput` via:
//
//	SourceApiAssociationMap{ "key": SourceApiAssociationArgs{...} }
type SourceApiAssociationMapInput interface {
	pulumi.Input

	ToSourceApiAssociationMapOutput() SourceApiAssociationMapOutput
	ToSourceApiAssociationMapOutputWithContext(context.Context) SourceApiAssociationMapOutput
}

type SourceApiAssociationMap map[string]SourceApiAssociationInput

func (SourceApiAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceApiAssociation)(nil)).Elem()
}

func (i SourceApiAssociationMap) ToSourceApiAssociationMapOutput() SourceApiAssociationMapOutput {
	return i.ToSourceApiAssociationMapOutputWithContext(context.Background())
}

func (i SourceApiAssociationMap) ToSourceApiAssociationMapOutputWithContext(ctx context.Context) SourceApiAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceApiAssociationMapOutput)
}

type SourceApiAssociationOutput struct{ *pulumi.OutputState }

func (SourceApiAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceApiAssociation)(nil)).Elem()
}

func (o SourceApiAssociationOutput) ToSourceApiAssociationOutput() SourceApiAssociationOutput {
	return o
}

func (o SourceApiAssociationOutput) ToSourceApiAssociationOutputWithContext(ctx context.Context) SourceApiAssociationOutput {
	return o
}

// ARN of the Source Api Association.
func (o SourceApiAssociationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceApiAssociation) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// ID of the Source Api Association.
func (o SourceApiAssociationOutput) AssociationId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceApiAssociation) pulumi.StringOutput { return v.AssociationId }).(pulumi.StringOutput)
}

// Description of the source API being merged.
func (o SourceApiAssociationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceApiAssociation) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// ARN of the merged API. One of `mergedApiArn` or `mergedApiId` must be specified.
func (o SourceApiAssociationOutput) MergedApiArn() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceApiAssociation) pulumi.StringOutput { return v.MergedApiArn }).(pulumi.StringOutput)
}

// ID of the merged API. One of `mergedApiArn` or `mergedApiId` must be specified.
func (o SourceApiAssociationOutput) MergedApiId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceApiAssociation) pulumi.StringOutput { return v.MergedApiId }).(pulumi.StringOutput)
}

// ARN of the source API. One of `sourceApiArn` or `sourceApiId` must be specified.
func (o SourceApiAssociationOutput) SourceApiArn() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceApiAssociation) pulumi.StringOutput { return v.SourceApiArn }).(pulumi.StringOutput)
}

func (o SourceApiAssociationOutput) SourceApiAssociationConfigs() SourceApiAssociationSourceApiAssociationConfigArrayOutput {
	return o.ApplyT(func(v *SourceApiAssociation) SourceApiAssociationSourceApiAssociationConfigArrayOutput {
		return v.SourceApiAssociationConfigs
	}).(SourceApiAssociationSourceApiAssociationConfigArrayOutput)
}

// ID of the source API. One of `sourceApiArn` or `sourceApiId` must be specified.
func (o SourceApiAssociationOutput) SourceApiId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceApiAssociation) pulumi.StringOutput { return v.SourceApiId }).(pulumi.StringOutput)
}

func (o SourceApiAssociationOutput) Timeouts() SourceApiAssociationTimeoutsPtrOutput {
	return o.ApplyT(func(v *SourceApiAssociation) SourceApiAssociationTimeoutsPtrOutput { return v.Timeouts }).(SourceApiAssociationTimeoutsPtrOutput)
}

type SourceApiAssociationArrayOutput struct{ *pulumi.OutputState }

func (SourceApiAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceApiAssociation)(nil)).Elem()
}

func (o SourceApiAssociationArrayOutput) ToSourceApiAssociationArrayOutput() SourceApiAssociationArrayOutput {
	return o
}

func (o SourceApiAssociationArrayOutput) ToSourceApiAssociationArrayOutputWithContext(ctx context.Context) SourceApiAssociationArrayOutput {
	return o
}

func (o SourceApiAssociationArrayOutput) Index(i pulumi.IntInput) SourceApiAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceApiAssociation {
		return vs[0].([]*SourceApiAssociation)[vs[1].(int)]
	}).(SourceApiAssociationOutput)
}

type SourceApiAssociationMapOutput struct{ *pulumi.OutputState }

func (SourceApiAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceApiAssociation)(nil)).Elem()
}

func (o SourceApiAssociationMapOutput) ToSourceApiAssociationMapOutput() SourceApiAssociationMapOutput {
	return o
}

func (o SourceApiAssociationMapOutput) ToSourceApiAssociationMapOutputWithContext(ctx context.Context) SourceApiAssociationMapOutput {
	return o
}

func (o SourceApiAssociationMapOutput) MapIndex(k pulumi.StringInput) SourceApiAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceApiAssociation {
		return vs[0].(map[string]*SourceApiAssociation)[vs[1].(string)]
	}).(SourceApiAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceApiAssociationInput)(nil)).Elem(), &SourceApiAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceApiAssociationArrayInput)(nil)).Elem(), SourceApiAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceApiAssociationMapInput)(nil)).Elem(), SourceApiAssociationMap{})
	pulumi.RegisterOutputType(SourceApiAssociationOutput{})
	pulumi.RegisterOutputType(SourceApiAssociationArrayOutput{})
	pulumi.RegisterOutputType(SourceApiAssociationMapOutput{})
}
