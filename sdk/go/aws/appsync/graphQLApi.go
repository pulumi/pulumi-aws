// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appsync

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GraphQLApi struct {
	pulumi.CustomResourceState

	AdditionalAuthenticationProviders GraphQLApiAdditionalAuthenticationProviderArrayOutput `pulumi:"additionalAuthenticationProviders"`
	Arn                               pulumi.StringOutput                                   `pulumi:"arn"`
	AuthenticationType                pulumi.StringOutput                                   `pulumi:"authenticationType"`
	LambdaAuthorizerConfig            GraphQLApiLambdaAuthorizerConfigPtrOutput             `pulumi:"lambdaAuthorizerConfig"`
	LogConfig                         GraphQLApiLogConfigPtrOutput                          `pulumi:"logConfig"`
	Name                              pulumi.StringOutput                                   `pulumi:"name"`
	OpenidConnectConfig               GraphQLApiOpenidConnectConfigPtrOutput                `pulumi:"openidConnectConfig"`
	Schema                            pulumi.StringPtrOutput                                `pulumi:"schema"`
	Tags                              pulumi.StringMapOutput                                `pulumi:"tags"`
	TagsAll                           pulumi.StringMapOutput                                `pulumi:"tagsAll"`
	Uris                              pulumi.StringMapOutput                                `pulumi:"uris"`
	UserPoolConfig                    GraphQLApiUserPoolConfigPtrOutput                     `pulumi:"userPoolConfig"`
	XrayEnabled                       pulumi.BoolPtrOutput                                  `pulumi:"xrayEnabled"`
}

// NewGraphQLApi registers a new resource with the given unique name, arguments, and options.
func NewGraphQLApi(ctx *pulumi.Context,
	name string, args *GraphQLApiArgs, opts ...pulumi.ResourceOption) (*GraphQLApi, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthenticationType == nil {
		return nil, errors.New("invalid value for required argument 'AuthenticationType'")
	}
	var resource GraphQLApi
	err := ctx.RegisterResource("aws:appsync/graphQLApi:GraphQLApi", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGraphQLApi gets an existing GraphQLApi resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGraphQLApi(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GraphQLApiState, opts ...pulumi.ResourceOption) (*GraphQLApi, error) {
	var resource GraphQLApi
	err := ctx.ReadResource("aws:appsync/graphQLApi:GraphQLApi", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GraphQLApi resources.
type graphQLApiState struct {
	AdditionalAuthenticationProviders []GraphQLApiAdditionalAuthenticationProvider `pulumi:"additionalAuthenticationProviders"`
	Arn                               *string                                      `pulumi:"arn"`
	AuthenticationType                *string                                      `pulumi:"authenticationType"`
	LambdaAuthorizerConfig            *GraphQLApiLambdaAuthorizerConfig            `pulumi:"lambdaAuthorizerConfig"`
	LogConfig                         *GraphQLApiLogConfig                         `pulumi:"logConfig"`
	Name                              *string                                      `pulumi:"name"`
	OpenidConnectConfig               *GraphQLApiOpenidConnectConfig               `pulumi:"openidConnectConfig"`
	Schema                            *string                                      `pulumi:"schema"`
	Tags                              map[string]string                            `pulumi:"tags"`
	TagsAll                           map[string]string                            `pulumi:"tagsAll"`
	Uris                              map[string]string                            `pulumi:"uris"`
	UserPoolConfig                    *GraphQLApiUserPoolConfig                    `pulumi:"userPoolConfig"`
	XrayEnabled                       *bool                                        `pulumi:"xrayEnabled"`
}

type GraphQLApiState struct {
	AdditionalAuthenticationProviders GraphQLApiAdditionalAuthenticationProviderArrayInput
	Arn                               pulumi.StringPtrInput
	AuthenticationType                pulumi.StringPtrInput
	LambdaAuthorizerConfig            GraphQLApiLambdaAuthorizerConfigPtrInput
	LogConfig                         GraphQLApiLogConfigPtrInput
	Name                              pulumi.StringPtrInput
	OpenidConnectConfig               GraphQLApiOpenidConnectConfigPtrInput
	Schema                            pulumi.StringPtrInput
	Tags                              pulumi.StringMapInput
	TagsAll                           pulumi.StringMapInput
	Uris                              pulumi.StringMapInput
	UserPoolConfig                    GraphQLApiUserPoolConfigPtrInput
	XrayEnabled                       pulumi.BoolPtrInput
}

func (GraphQLApiState) ElementType() reflect.Type {
	return reflect.TypeOf((*graphQLApiState)(nil)).Elem()
}

type graphQLApiArgs struct {
	AdditionalAuthenticationProviders []GraphQLApiAdditionalAuthenticationProvider `pulumi:"additionalAuthenticationProviders"`
	AuthenticationType                string                                       `pulumi:"authenticationType"`
	LambdaAuthorizerConfig            *GraphQLApiLambdaAuthorizerConfig            `pulumi:"lambdaAuthorizerConfig"`
	LogConfig                         *GraphQLApiLogConfig                         `pulumi:"logConfig"`
	Name                              *string                                      `pulumi:"name"`
	OpenidConnectConfig               *GraphQLApiOpenidConnectConfig               `pulumi:"openidConnectConfig"`
	Schema                            *string                                      `pulumi:"schema"`
	Tags                              map[string]string                            `pulumi:"tags"`
	UserPoolConfig                    *GraphQLApiUserPoolConfig                    `pulumi:"userPoolConfig"`
	XrayEnabled                       *bool                                        `pulumi:"xrayEnabled"`
}

// The set of arguments for constructing a GraphQLApi resource.
type GraphQLApiArgs struct {
	AdditionalAuthenticationProviders GraphQLApiAdditionalAuthenticationProviderArrayInput
	AuthenticationType                pulumi.StringInput
	LambdaAuthorizerConfig            GraphQLApiLambdaAuthorizerConfigPtrInput
	LogConfig                         GraphQLApiLogConfigPtrInput
	Name                              pulumi.StringPtrInput
	OpenidConnectConfig               GraphQLApiOpenidConnectConfigPtrInput
	Schema                            pulumi.StringPtrInput
	Tags                              pulumi.StringMapInput
	UserPoolConfig                    GraphQLApiUserPoolConfigPtrInput
	XrayEnabled                       pulumi.BoolPtrInput
}

func (GraphQLApiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*graphQLApiArgs)(nil)).Elem()
}

type GraphQLApiInput interface {
	pulumi.Input

	ToGraphQLApiOutput() GraphQLApiOutput
	ToGraphQLApiOutputWithContext(ctx context.Context) GraphQLApiOutput
}

func (*GraphQLApi) ElementType() reflect.Type {
	return reflect.TypeOf((**GraphQLApi)(nil)).Elem()
}

func (i *GraphQLApi) ToGraphQLApiOutput() GraphQLApiOutput {
	return i.ToGraphQLApiOutputWithContext(context.Background())
}

func (i *GraphQLApi) ToGraphQLApiOutputWithContext(ctx context.Context) GraphQLApiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GraphQLApiOutput)
}

// GraphQLApiArrayInput is an input type that accepts GraphQLApiArray and GraphQLApiArrayOutput values.
// You can construct a concrete instance of `GraphQLApiArrayInput` via:
//
//	GraphQLApiArray{ GraphQLApiArgs{...} }
type GraphQLApiArrayInput interface {
	pulumi.Input

	ToGraphQLApiArrayOutput() GraphQLApiArrayOutput
	ToGraphQLApiArrayOutputWithContext(context.Context) GraphQLApiArrayOutput
}

type GraphQLApiArray []GraphQLApiInput

func (GraphQLApiArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GraphQLApi)(nil)).Elem()
}

func (i GraphQLApiArray) ToGraphQLApiArrayOutput() GraphQLApiArrayOutput {
	return i.ToGraphQLApiArrayOutputWithContext(context.Background())
}

func (i GraphQLApiArray) ToGraphQLApiArrayOutputWithContext(ctx context.Context) GraphQLApiArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GraphQLApiArrayOutput)
}

// GraphQLApiMapInput is an input type that accepts GraphQLApiMap and GraphQLApiMapOutput values.
// You can construct a concrete instance of `GraphQLApiMapInput` via:
//
//	GraphQLApiMap{ "key": GraphQLApiArgs{...} }
type GraphQLApiMapInput interface {
	pulumi.Input

	ToGraphQLApiMapOutput() GraphQLApiMapOutput
	ToGraphQLApiMapOutputWithContext(context.Context) GraphQLApiMapOutput
}

type GraphQLApiMap map[string]GraphQLApiInput

func (GraphQLApiMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GraphQLApi)(nil)).Elem()
}

func (i GraphQLApiMap) ToGraphQLApiMapOutput() GraphQLApiMapOutput {
	return i.ToGraphQLApiMapOutputWithContext(context.Background())
}

func (i GraphQLApiMap) ToGraphQLApiMapOutputWithContext(ctx context.Context) GraphQLApiMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GraphQLApiMapOutput)
}

type GraphQLApiOutput struct{ *pulumi.OutputState }

func (GraphQLApiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GraphQLApi)(nil)).Elem()
}

func (o GraphQLApiOutput) ToGraphQLApiOutput() GraphQLApiOutput {
	return o
}

func (o GraphQLApiOutput) ToGraphQLApiOutputWithContext(ctx context.Context) GraphQLApiOutput {
	return o
}

func (o GraphQLApiOutput) AdditionalAuthenticationProviders() GraphQLApiAdditionalAuthenticationProviderArrayOutput {
	return o.ApplyT(func(v *GraphQLApi) GraphQLApiAdditionalAuthenticationProviderArrayOutput {
		return v.AdditionalAuthenticationProviders
	}).(GraphQLApiAdditionalAuthenticationProviderArrayOutput)
}

func (o GraphQLApiOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *GraphQLApi) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o GraphQLApiOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v *GraphQLApi) pulumi.StringOutput { return v.AuthenticationType }).(pulumi.StringOutput)
}

func (o GraphQLApiOutput) LambdaAuthorizerConfig() GraphQLApiLambdaAuthorizerConfigPtrOutput {
	return o.ApplyT(func(v *GraphQLApi) GraphQLApiLambdaAuthorizerConfigPtrOutput { return v.LambdaAuthorizerConfig }).(GraphQLApiLambdaAuthorizerConfigPtrOutput)
}

func (o GraphQLApiOutput) LogConfig() GraphQLApiLogConfigPtrOutput {
	return o.ApplyT(func(v *GraphQLApi) GraphQLApiLogConfigPtrOutput { return v.LogConfig }).(GraphQLApiLogConfigPtrOutput)
}

func (o GraphQLApiOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GraphQLApi) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o GraphQLApiOutput) OpenidConnectConfig() GraphQLApiOpenidConnectConfigPtrOutput {
	return o.ApplyT(func(v *GraphQLApi) GraphQLApiOpenidConnectConfigPtrOutput { return v.OpenidConnectConfig }).(GraphQLApiOpenidConnectConfigPtrOutput)
}

func (o GraphQLApiOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GraphQLApi) pulumi.StringPtrOutput { return v.Schema }).(pulumi.StringPtrOutput)
}

func (o GraphQLApiOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GraphQLApi) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o GraphQLApiOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GraphQLApi) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o GraphQLApiOutput) Uris() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GraphQLApi) pulumi.StringMapOutput { return v.Uris }).(pulumi.StringMapOutput)
}

func (o GraphQLApiOutput) UserPoolConfig() GraphQLApiUserPoolConfigPtrOutput {
	return o.ApplyT(func(v *GraphQLApi) GraphQLApiUserPoolConfigPtrOutput { return v.UserPoolConfig }).(GraphQLApiUserPoolConfigPtrOutput)
}

func (o GraphQLApiOutput) XrayEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GraphQLApi) pulumi.BoolPtrOutput { return v.XrayEnabled }).(pulumi.BoolPtrOutput)
}

type GraphQLApiArrayOutput struct{ *pulumi.OutputState }

func (GraphQLApiArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GraphQLApi)(nil)).Elem()
}

func (o GraphQLApiArrayOutput) ToGraphQLApiArrayOutput() GraphQLApiArrayOutput {
	return o
}

func (o GraphQLApiArrayOutput) ToGraphQLApiArrayOutputWithContext(ctx context.Context) GraphQLApiArrayOutput {
	return o
}

func (o GraphQLApiArrayOutput) Index(i pulumi.IntInput) GraphQLApiOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GraphQLApi {
		return vs[0].([]*GraphQLApi)[vs[1].(int)]
	}).(GraphQLApiOutput)
}

type GraphQLApiMapOutput struct{ *pulumi.OutputState }

func (GraphQLApiMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GraphQLApi)(nil)).Elem()
}

func (o GraphQLApiMapOutput) ToGraphQLApiMapOutput() GraphQLApiMapOutput {
	return o
}

func (o GraphQLApiMapOutput) ToGraphQLApiMapOutputWithContext(ctx context.Context) GraphQLApiMapOutput {
	return o
}

func (o GraphQLApiMapOutput) MapIndex(k pulumi.StringInput) GraphQLApiOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GraphQLApi {
		return vs[0].(map[string]*GraphQLApi)[vs[1].(string)]
	}).(GraphQLApiOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GraphQLApiInput)(nil)).Elem(), &GraphQLApi{})
	pulumi.RegisterInputType(reflect.TypeOf((*GraphQLApiArrayInput)(nil)).Elem(), GraphQLApiArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GraphQLApiMapInput)(nil)).Elem(), GraphQLApiMap{})
	pulumi.RegisterOutputType(GraphQLApiOutput{})
	pulumi.RegisterOutputType(GraphQLApiArrayOutput{})
	pulumi.RegisterOutputType(GraphQLApiMapOutput{})
}
