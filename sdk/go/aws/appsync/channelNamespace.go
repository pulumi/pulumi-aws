// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appsync

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an [AWS AppSync Channel Namespace](https://docs.aws.amazon.com/appsync/latest/eventapi/event-api-concepts.html#namespace).
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/appsync"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := appsync.NewChannelNamespace(ctx, "example", &appsync.ChannelNamespaceArgs{
//				Name:  pulumi.String("example-channel-namespace"),
//				ApiId: pulumi.Any(exampleAwsAppsyncApi.ApiId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import AppSync Channel Namespace using the `api_id` and `name` separated by a comma (`,`). For example:
//
// ```sh
// $ pulumi import aws:appsync/channelNamespace:ChannelNamespace example example-api-id,example-channel-namespace
// ```
type ChannelNamespace struct {
	pulumi.CustomResourceState

	// Event API ID.
	ApiId pulumi.StringOutput `pulumi:"apiId"`
	// ARN of the channel namespace.
	ChannelNamespaceArn pulumi.StringOutput `pulumi:"channelNamespaceArn"`
	// Event handler functions that run custom business logic to process published events and subscribe requests.
	CodeHandlers pulumi.StringPtrOutput `pulumi:"codeHandlers"`
	// Configuration for the `onPublish` and `onSubscribe` handlers. See Handler Configs below.
	HandlerConfigs ChannelNamespaceHandlerConfigsPtrOutput `pulumi:"handlerConfigs"`
	// Name of the channel namespace.
	//
	// The following arguments are optional:
	Name pulumi.StringOutput `pulumi:"name"`
	// Authorization modes to use for publishing messages on the channel namespace. This configuration overrides the default API authorization configuration. See Auth Modes below.
	PublishAuthModes ChannelNamespacePublishAuthModeArrayOutput `pulumi:"publishAuthModes"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
	// Authorization modes to use for subscribing to messages on the channel namespace. This configuration overrides the default API authorization configuration. See Auth Modes below.
	SubscribeAuthModes ChannelNamespaceSubscribeAuthModeArrayOutput `pulumi:"subscribeAuthModes"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewChannelNamespace registers a new resource with the given unique name, arguments, and options.
func NewChannelNamespace(ctx *pulumi.Context,
	name string, args *ChannelNamespaceArgs, opts ...pulumi.ResourceOption) (*ChannelNamespace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiId == nil {
		return nil, errors.New("invalid value for required argument 'ApiId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ChannelNamespace
	err := ctx.RegisterResource("aws:appsync/channelNamespace:ChannelNamespace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChannelNamespace gets an existing ChannelNamespace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChannelNamespace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChannelNamespaceState, opts ...pulumi.ResourceOption) (*ChannelNamespace, error) {
	var resource ChannelNamespace
	err := ctx.ReadResource("aws:appsync/channelNamespace:ChannelNamespace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ChannelNamespace resources.
type channelNamespaceState struct {
	// Event API ID.
	ApiId *string `pulumi:"apiId"`
	// ARN of the channel namespace.
	ChannelNamespaceArn *string `pulumi:"channelNamespaceArn"`
	// Event handler functions that run custom business logic to process published events and subscribe requests.
	CodeHandlers *string `pulumi:"codeHandlers"`
	// Configuration for the `onPublish` and `onSubscribe` handlers. See Handler Configs below.
	HandlerConfigs *ChannelNamespaceHandlerConfigs `pulumi:"handlerConfigs"`
	// Name of the channel namespace.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// Authorization modes to use for publishing messages on the channel namespace. This configuration overrides the default API authorization configuration. See Auth Modes below.
	PublishAuthModes []ChannelNamespacePublishAuthMode `pulumi:"publishAuthModes"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// Authorization modes to use for subscribing to messages on the channel namespace. This configuration overrides the default API authorization configuration. See Auth Modes below.
	SubscribeAuthModes []ChannelNamespaceSubscribeAuthMode `pulumi:"subscribeAuthModes"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type ChannelNamespaceState struct {
	// Event API ID.
	ApiId pulumi.StringPtrInput
	// ARN of the channel namespace.
	ChannelNamespaceArn pulumi.StringPtrInput
	// Event handler functions that run custom business logic to process published events and subscribe requests.
	CodeHandlers pulumi.StringPtrInput
	// Configuration for the `onPublish` and `onSubscribe` handlers. See Handler Configs below.
	HandlerConfigs ChannelNamespaceHandlerConfigsPtrInput
	// Name of the channel namespace.
	//
	// The following arguments are optional:
	Name pulumi.StringPtrInput
	// Authorization modes to use for publishing messages on the channel namespace. This configuration overrides the default API authorization configuration. See Auth Modes below.
	PublishAuthModes ChannelNamespacePublishAuthModeArrayInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// Authorization modes to use for subscribing to messages on the channel namespace. This configuration overrides the default API authorization configuration. See Auth Modes below.
	SubscribeAuthModes ChannelNamespaceSubscribeAuthModeArrayInput
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapInput
}

func (ChannelNamespaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*channelNamespaceState)(nil)).Elem()
}

type channelNamespaceArgs struct {
	// Event API ID.
	ApiId string `pulumi:"apiId"`
	// Event handler functions that run custom business logic to process published events and subscribe requests.
	CodeHandlers *string `pulumi:"codeHandlers"`
	// Configuration for the `onPublish` and `onSubscribe` handlers. See Handler Configs below.
	HandlerConfigs *ChannelNamespaceHandlerConfigs `pulumi:"handlerConfigs"`
	// Name of the channel namespace.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// Authorization modes to use for publishing messages on the channel namespace. This configuration overrides the default API authorization configuration. See Auth Modes below.
	PublishAuthModes []ChannelNamespacePublishAuthMode `pulumi:"publishAuthModes"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// Authorization modes to use for subscribing to messages on the channel namespace. This configuration overrides the default API authorization configuration. See Auth Modes below.
	SubscribeAuthModes []ChannelNamespaceSubscribeAuthMode `pulumi:"subscribeAuthModes"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ChannelNamespace resource.
type ChannelNamespaceArgs struct {
	// Event API ID.
	ApiId pulumi.StringInput
	// Event handler functions that run custom business logic to process published events and subscribe requests.
	CodeHandlers pulumi.StringPtrInput
	// Configuration for the `onPublish` and `onSubscribe` handlers. See Handler Configs below.
	HandlerConfigs ChannelNamespaceHandlerConfigsPtrInput
	// Name of the channel namespace.
	//
	// The following arguments are optional:
	Name pulumi.StringPtrInput
	// Authorization modes to use for publishing messages on the channel namespace. This configuration overrides the default API authorization configuration. See Auth Modes below.
	PublishAuthModes ChannelNamespacePublishAuthModeArrayInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// Authorization modes to use for subscribing to messages on the channel namespace. This configuration overrides the default API authorization configuration. See Auth Modes below.
	SubscribeAuthModes ChannelNamespaceSubscribeAuthModeArrayInput
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
}

func (ChannelNamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*channelNamespaceArgs)(nil)).Elem()
}

type ChannelNamespaceInput interface {
	pulumi.Input

	ToChannelNamespaceOutput() ChannelNamespaceOutput
	ToChannelNamespaceOutputWithContext(ctx context.Context) ChannelNamespaceOutput
}

func (*ChannelNamespace) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelNamespace)(nil)).Elem()
}

func (i *ChannelNamespace) ToChannelNamespaceOutput() ChannelNamespaceOutput {
	return i.ToChannelNamespaceOutputWithContext(context.Background())
}

func (i *ChannelNamespace) ToChannelNamespaceOutputWithContext(ctx context.Context) ChannelNamespaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelNamespaceOutput)
}

// ChannelNamespaceArrayInput is an input type that accepts ChannelNamespaceArray and ChannelNamespaceArrayOutput values.
// You can construct a concrete instance of `ChannelNamespaceArrayInput` via:
//
//	ChannelNamespaceArray{ ChannelNamespaceArgs{...} }
type ChannelNamespaceArrayInput interface {
	pulumi.Input

	ToChannelNamespaceArrayOutput() ChannelNamespaceArrayOutput
	ToChannelNamespaceArrayOutputWithContext(context.Context) ChannelNamespaceArrayOutput
}

type ChannelNamespaceArray []ChannelNamespaceInput

func (ChannelNamespaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ChannelNamespace)(nil)).Elem()
}

func (i ChannelNamespaceArray) ToChannelNamespaceArrayOutput() ChannelNamespaceArrayOutput {
	return i.ToChannelNamespaceArrayOutputWithContext(context.Background())
}

func (i ChannelNamespaceArray) ToChannelNamespaceArrayOutputWithContext(ctx context.Context) ChannelNamespaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelNamespaceArrayOutput)
}

// ChannelNamespaceMapInput is an input type that accepts ChannelNamespaceMap and ChannelNamespaceMapOutput values.
// You can construct a concrete instance of `ChannelNamespaceMapInput` via:
//
//	ChannelNamespaceMap{ "key": ChannelNamespaceArgs{...} }
type ChannelNamespaceMapInput interface {
	pulumi.Input

	ToChannelNamespaceMapOutput() ChannelNamespaceMapOutput
	ToChannelNamespaceMapOutputWithContext(context.Context) ChannelNamespaceMapOutput
}

type ChannelNamespaceMap map[string]ChannelNamespaceInput

func (ChannelNamespaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ChannelNamespace)(nil)).Elem()
}

func (i ChannelNamespaceMap) ToChannelNamespaceMapOutput() ChannelNamespaceMapOutput {
	return i.ToChannelNamespaceMapOutputWithContext(context.Background())
}

func (i ChannelNamespaceMap) ToChannelNamespaceMapOutputWithContext(ctx context.Context) ChannelNamespaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelNamespaceMapOutput)
}

type ChannelNamespaceOutput struct{ *pulumi.OutputState }

func (ChannelNamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelNamespace)(nil)).Elem()
}

func (o ChannelNamespaceOutput) ToChannelNamespaceOutput() ChannelNamespaceOutput {
	return o
}

func (o ChannelNamespaceOutput) ToChannelNamespaceOutputWithContext(ctx context.Context) ChannelNamespaceOutput {
	return o
}

// Event API ID.
func (o ChannelNamespaceOutput) ApiId() pulumi.StringOutput {
	return o.ApplyT(func(v *ChannelNamespace) pulumi.StringOutput { return v.ApiId }).(pulumi.StringOutput)
}

// ARN of the channel namespace.
func (o ChannelNamespaceOutput) ChannelNamespaceArn() pulumi.StringOutput {
	return o.ApplyT(func(v *ChannelNamespace) pulumi.StringOutput { return v.ChannelNamespaceArn }).(pulumi.StringOutput)
}

// Event handler functions that run custom business logic to process published events and subscribe requests.
func (o ChannelNamespaceOutput) CodeHandlers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChannelNamespace) pulumi.StringPtrOutput { return v.CodeHandlers }).(pulumi.StringPtrOutput)
}

// Configuration for the `onPublish` and `onSubscribe` handlers. See Handler Configs below.
func (o ChannelNamespaceOutput) HandlerConfigs() ChannelNamespaceHandlerConfigsPtrOutput {
	return o.ApplyT(func(v *ChannelNamespace) ChannelNamespaceHandlerConfigsPtrOutput { return v.HandlerConfigs }).(ChannelNamespaceHandlerConfigsPtrOutput)
}

// Name of the channel namespace.
//
// The following arguments are optional:
func (o ChannelNamespaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ChannelNamespace) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Authorization modes to use for publishing messages on the channel namespace. This configuration overrides the default API authorization configuration. See Auth Modes below.
func (o ChannelNamespaceOutput) PublishAuthModes() ChannelNamespacePublishAuthModeArrayOutput {
	return o.ApplyT(func(v *ChannelNamespace) ChannelNamespacePublishAuthModeArrayOutput { return v.PublishAuthModes }).(ChannelNamespacePublishAuthModeArrayOutput)
}

// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
func (o ChannelNamespaceOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ChannelNamespace) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Authorization modes to use for subscribing to messages on the channel namespace. This configuration overrides the default API authorization configuration. See Auth Modes below.
func (o ChannelNamespaceOutput) SubscribeAuthModes() ChannelNamespaceSubscribeAuthModeArrayOutput {
	return o.ApplyT(func(v *ChannelNamespace) ChannelNamespaceSubscribeAuthModeArrayOutput { return v.SubscribeAuthModes }).(ChannelNamespaceSubscribeAuthModeArrayOutput)
}

// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ChannelNamespaceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ChannelNamespace) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ChannelNamespaceOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ChannelNamespace) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type ChannelNamespaceArrayOutput struct{ *pulumi.OutputState }

func (ChannelNamespaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ChannelNamespace)(nil)).Elem()
}

func (o ChannelNamespaceArrayOutput) ToChannelNamespaceArrayOutput() ChannelNamespaceArrayOutput {
	return o
}

func (o ChannelNamespaceArrayOutput) ToChannelNamespaceArrayOutputWithContext(ctx context.Context) ChannelNamespaceArrayOutput {
	return o
}

func (o ChannelNamespaceArrayOutput) Index(i pulumi.IntInput) ChannelNamespaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ChannelNamespace {
		return vs[0].([]*ChannelNamespace)[vs[1].(int)]
	}).(ChannelNamespaceOutput)
}

type ChannelNamespaceMapOutput struct{ *pulumi.OutputState }

func (ChannelNamespaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ChannelNamespace)(nil)).Elem()
}

func (o ChannelNamespaceMapOutput) ToChannelNamespaceMapOutput() ChannelNamespaceMapOutput {
	return o
}

func (o ChannelNamespaceMapOutput) ToChannelNamespaceMapOutputWithContext(ctx context.Context) ChannelNamespaceMapOutput {
	return o
}

func (o ChannelNamespaceMapOutput) MapIndex(k pulumi.StringInput) ChannelNamespaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ChannelNamespace {
		return vs[0].(map[string]*ChannelNamespace)[vs[1].(string)]
	}).(ChannelNamespaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelNamespaceInput)(nil)).Elem(), &ChannelNamespace{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelNamespaceArrayInput)(nil)).Elem(), ChannelNamespaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelNamespaceMapInput)(nil)).Elem(), ChannelNamespaceMap{})
	pulumi.RegisterOutputType(ChannelNamespaceOutput{})
	pulumi.RegisterOutputType(ChannelNamespaceArrayOutput{})
	pulumi.RegisterOutputType(ChannelNamespaceMapOutput{})
}
