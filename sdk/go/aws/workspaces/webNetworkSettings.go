// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workspaces

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS WorkSpaces Web Network Settings resource. Once associated with a web portal, network settings define how streaming instances will connect with your specified VPC.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/workspaces"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := ec2.NewVpc(ctx, "example", &ec2.VpcArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			var exampleSubnet []*ec2.Subnet
//			for index := 0; index < 2; index++ {
//				key0 := index
//				val0 := index
//				__res, err := ec2.NewSubnet(ctx, fmt.Sprintf("example-%v", key0), &ec2.SubnetArgs{
//					VpcId: example.ID(),
//					CidrBlock: pulumi.String(example.CidrBlock.ApplyT(func(cidrBlock string) (std.CidrsubnetResult, error) {
//						return std.CidrsubnetResult(interface{}(std.CidrsubnetOutput(ctx, std.CidrsubnetOutputArgs{
//							Input:   cidrBlock,
//							Newbits: 8,
//							Netnum:  val0,
//						}, nil))), nil
//					}).(std.CidrsubnetResultOutput).ApplyT(func(invoke std.CidrsubnetResult) (*string, error) {
//						return invoke.Result, nil
//					}).(pulumi.StringPtrOutput)),
//					AvailabilityZone: available.Names[val0],
//				})
//				if err != nil {
//					return err
//				}
//				exampleSubnet = append(exampleSubnet, __res)
//			}
//			var example1 []*ec2.SecurityGroup
//			for index := 0; index < 2; index++ {
//				key0 := index
//				val0 := index
//				__res, err := ec2.NewSecurityGroup(ctx, fmt.Sprintf("example1-%v", key0), &ec2.SecurityGroupArgs{
//					VpcId: example.ID(),
//					Name:  pulumi.Sprintf("example-sg-%v$", val0),
//				})
//				if err != nil {
//					return err
//				}
//				example1 = append(example1, __res)
//			}
//			_, err = workspaces.NewWebNetworkSettings(ctx, "example", &workspaces.WebNetworkSettingsArgs{
//				VpcId: example.ID(),
//				SubnetIds: pulumi.StringArray{
//					exampleSubnet[0].ID(),
//					exampleSubnet[1].ID(),
//				},
//				SecurityGroupIds: pulumi.StringArray{
//					exampleAwsSecurityGroup[0].Id,
//					exampleAwsSecurityGroup[1].Id,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import WorkSpaces Web Network Settings using the `network_settings_arn`. For example:
//
// ```sh
// $ pulumi import aws:workspaces/webNetworkSettings:WebNetworkSettings example arn:aws:workspacesweb:us-west-2:123456789012:networksettings/abcdef12345
// ```
type WebNetworkSettings struct {
	pulumi.CustomResourceState

	// List of web portal ARNs associated with the network settings.
	AssociatedPortalArns pulumi.StringArrayOutput `pulumi:"associatedPortalArns"`
	// ARN of the network settings resource.
	NetworkSettingsArn pulumi.StringOutput `pulumi:"networkSettingsArn"`
	// One or more security groups used to control access from streaming instances to your VPC.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// The subnets in which network interfaces are created to connect streaming instances to your VPC. At least two subnet ids must be specified.
	SubnetIds pulumi.StringArrayOutput `pulumi:"subnetIds"`
	// Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// The VPC that streaming instances will connect to.
	//
	// The following arguments are optional:
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewWebNetworkSettings registers a new resource with the given unique name, arguments, and options.
func NewWebNetworkSettings(ctx *pulumi.Context,
	name string, args *WebNetworkSettingsArgs, opts ...pulumi.ResourceOption) (*WebNetworkSettings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SecurityGroupIds == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroupIds'")
	}
	if args.SubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'SubnetIds'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WebNetworkSettings
	err := ctx.RegisterResource("aws:workspaces/webNetworkSettings:WebNetworkSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebNetworkSettings gets an existing WebNetworkSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebNetworkSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebNetworkSettingsState, opts ...pulumi.ResourceOption) (*WebNetworkSettings, error) {
	var resource WebNetworkSettings
	err := ctx.ReadResource("aws:workspaces/webNetworkSettings:WebNetworkSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebNetworkSettings resources.
type webNetworkSettingsState struct {
	// List of web portal ARNs associated with the network settings.
	AssociatedPortalArns []string `pulumi:"associatedPortalArns"`
	// ARN of the network settings resource.
	NetworkSettingsArn *string `pulumi:"networkSettingsArn"`
	// One or more security groups used to control access from streaming instances to your VPC.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The subnets in which network interfaces are created to connect streaming instances to your VPC. At least two subnet ids must be specified.
	SubnetIds []string `pulumi:"subnetIds"`
	// Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The VPC that streaming instances will connect to.
	//
	// The following arguments are optional:
	VpcId *string `pulumi:"vpcId"`
}

type WebNetworkSettingsState struct {
	// List of web portal ARNs associated with the network settings.
	AssociatedPortalArns pulumi.StringArrayInput
	// ARN of the network settings resource.
	NetworkSettingsArn pulumi.StringPtrInput
	// One or more security groups used to control access from streaming instances to your VPC.
	SecurityGroupIds pulumi.StringArrayInput
	// The subnets in which network interfaces are created to connect streaming instances to your VPC. At least two subnet ids must be specified.
	SubnetIds pulumi.StringArrayInput
	// Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
	// The VPC that streaming instances will connect to.
	//
	// The following arguments are optional:
	VpcId pulumi.StringPtrInput
}

func (WebNetworkSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*webNetworkSettingsState)(nil)).Elem()
}

type webNetworkSettingsArgs struct {
	// One or more security groups used to control access from streaming instances to your VPC.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The subnets in which network interfaces are created to connect streaming instances to your VPC. At least two subnet ids must be specified.
	SubnetIds []string `pulumi:"subnetIds"`
	// Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The VPC that streaming instances will connect to.
	//
	// The following arguments are optional:
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a WebNetworkSettings resource.
type WebNetworkSettingsArgs struct {
	// One or more security groups used to control access from streaming instances to your VPC.
	SecurityGroupIds pulumi.StringArrayInput
	// The subnets in which network interfaces are created to connect streaming instances to your VPC. At least two subnet ids must be specified.
	SubnetIds pulumi.StringArrayInput
	// Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// The VPC that streaming instances will connect to.
	//
	// The following arguments are optional:
	VpcId pulumi.StringInput
}

func (WebNetworkSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webNetworkSettingsArgs)(nil)).Elem()
}

type WebNetworkSettingsInput interface {
	pulumi.Input

	ToWebNetworkSettingsOutput() WebNetworkSettingsOutput
	ToWebNetworkSettingsOutputWithContext(ctx context.Context) WebNetworkSettingsOutput
}

func (*WebNetworkSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**WebNetworkSettings)(nil)).Elem()
}

func (i *WebNetworkSettings) ToWebNetworkSettingsOutput() WebNetworkSettingsOutput {
	return i.ToWebNetworkSettingsOutputWithContext(context.Background())
}

func (i *WebNetworkSettings) ToWebNetworkSettingsOutputWithContext(ctx context.Context) WebNetworkSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebNetworkSettingsOutput)
}

// WebNetworkSettingsArrayInput is an input type that accepts WebNetworkSettingsArray and WebNetworkSettingsArrayOutput values.
// You can construct a concrete instance of `WebNetworkSettingsArrayInput` via:
//
//	WebNetworkSettingsArray{ WebNetworkSettingsArgs{...} }
type WebNetworkSettingsArrayInput interface {
	pulumi.Input

	ToWebNetworkSettingsArrayOutput() WebNetworkSettingsArrayOutput
	ToWebNetworkSettingsArrayOutputWithContext(context.Context) WebNetworkSettingsArrayOutput
}

type WebNetworkSettingsArray []WebNetworkSettingsInput

func (WebNetworkSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebNetworkSettings)(nil)).Elem()
}

func (i WebNetworkSettingsArray) ToWebNetworkSettingsArrayOutput() WebNetworkSettingsArrayOutput {
	return i.ToWebNetworkSettingsArrayOutputWithContext(context.Background())
}

func (i WebNetworkSettingsArray) ToWebNetworkSettingsArrayOutputWithContext(ctx context.Context) WebNetworkSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebNetworkSettingsArrayOutput)
}

// WebNetworkSettingsMapInput is an input type that accepts WebNetworkSettingsMap and WebNetworkSettingsMapOutput values.
// You can construct a concrete instance of `WebNetworkSettingsMapInput` via:
//
//	WebNetworkSettingsMap{ "key": WebNetworkSettingsArgs{...} }
type WebNetworkSettingsMapInput interface {
	pulumi.Input

	ToWebNetworkSettingsMapOutput() WebNetworkSettingsMapOutput
	ToWebNetworkSettingsMapOutputWithContext(context.Context) WebNetworkSettingsMapOutput
}

type WebNetworkSettingsMap map[string]WebNetworkSettingsInput

func (WebNetworkSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebNetworkSettings)(nil)).Elem()
}

func (i WebNetworkSettingsMap) ToWebNetworkSettingsMapOutput() WebNetworkSettingsMapOutput {
	return i.ToWebNetworkSettingsMapOutputWithContext(context.Background())
}

func (i WebNetworkSettingsMap) ToWebNetworkSettingsMapOutputWithContext(ctx context.Context) WebNetworkSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebNetworkSettingsMapOutput)
}

type WebNetworkSettingsOutput struct{ *pulumi.OutputState }

func (WebNetworkSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebNetworkSettings)(nil)).Elem()
}

func (o WebNetworkSettingsOutput) ToWebNetworkSettingsOutput() WebNetworkSettingsOutput {
	return o
}

func (o WebNetworkSettingsOutput) ToWebNetworkSettingsOutputWithContext(ctx context.Context) WebNetworkSettingsOutput {
	return o
}

// List of web portal ARNs associated with the network settings.
func (o WebNetworkSettingsOutput) AssociatedPortalArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WebNetworkSettings) pulumi.StringArrayOutput { return v.AssociatedPortalArns }).(pulumi.StringArrayOutput)
}

// ARN of the network settings resource.
func (o WebNetworkSettingsOutput) NetworkSettingsArn() pulumi.StringOutput {
	return o.ApplyT(func(v *WebNetworkSettings) pulumi.StringOutput { return v.NetworkSettingsArn }).(pulumi.StringOutput)
}

// One or more security groups used to control access from streaming instances to your VPC.
func (o WebNetworkSettingsOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WebNetworkSettings) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// The subnets in which network interfaces are created to connect streaming instances to your VPC. At least two subnet ids must be specified.
func (o WebNetworkSettingsOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WebNetworkSettings) pulumi.StringArrayOutput { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o WebNetworkSettingsOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WebNetworkSettings) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o WebNetworkSettingsOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WebNetworkSettings) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// The VPC that streaming instances will connect to.
//
// The following arguments are optional:
func (o WebNetworkSettingsOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *WebNetworkSettings) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type WebNetworkSettingsArrayOutput struct{ *pulumi.OutputState }

func (WebNetworkSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebNetworkSettings)(nil)).Elem()
}

func (o WebNetworkSettingsArrayOutput) ToWebNetworkSettingsArrayOutput() WebNetworkSettingsArrayOutput {
	return o
}

func (o WebNetworkSettingsArrayOutput) ToWebNetworkSettingsArrayOutputWithContext(ctx context.Context) WebNetworkSettingsArrayOutput {
	return o
}

func (o WebNetworkSettingsArrayOutput) Index(i pulumi.IntInput) WebNetworkSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WebNetworkSettings {
		return vs[0].([]*WebNetworkSettings)[vs[1].(int)]
	}).(WebNetworkSettingsOutput)
}

type WebNetworkSettingsMapOutput struct{ *pulumi.OutputState }

func (WebNetworkSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebNetworkSettings)(nil)).Elem()
}

func (o WebNetworkSettingsMapOutput) ToWebNetworkSettingsMapOutput() WebNetworkSettingsMapOutput {
	return o
}

func (o WebNetworkSettingsMapOutput) ToWebNetworkSettingsMapOutputWithContext(ctx context.Context) WebNetworkSettingsMapOutput {
	return o
}

func (o WebNetworkSettingsMapOutput) MapIndex(k pulumi.StringInput) WebNetworkSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WebNetworkSettings {
		return vs[0].(map[string]*WebNetworkSettings)[vs[1].(string)]
	}).(WebNetworkSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebNetworkSettingsInput)(nil)).Elem(), &WebNetworkSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebNetworkSettingsArrayInput)(nil)).Elem(), WebNetworkSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebNetworkSettingsMapInput)(nil)).Elem(), WebNetworkSettingsMap{})
	pulumi.RegisterOutputType(WebNetworkSettingsOutput{})
	pulumi.RegisterOutputType(WebNetworkSettingsArrayOutput{})
	pulumi.RegisterOutputType(WebNetworkSettingsMapOutput{})
}
