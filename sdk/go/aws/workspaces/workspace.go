// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workspaces

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Workspace struct {
	pulumi.CustomResourceState

	BundleId                    pulumi.StringOutput                `pulumi:"bundleId"`
	ComputerName                pulumi.StringOutput                `pulumi:"computerName"`
	DirectoryId                 pulumi.StringOutput                `pulumi:"directoryId"`
	IpAddress                   pulumi.StringOutput                `pulumi:"ipAddress"`
	RootVolumeEncryptionEnabled pulumi.BoolPtrOutput               `pulumi:"rootVolumeEncryptionEnabled"`
	State                       pulumi.StringOutput                `pulumi:"state"`
	Tags                        pulumi.StringMapOutput             `pulumi:"tags"`
	TagsAll                     pulumi.StringMapOutput             `pulumi:"tagsAll"`
	UserName                    pulumi.StringOutput                `pulumi:"userName"`
	UserVolumeEncryptionEnabled pulumi.BoolPtrOutput               `pulumi:"userVolumeEncryptionEnabled"`
	VolumeEncryptionKey         pulumi.StringPtrOutput             `pulumi:"volumeEncryptionKey"`
	WorkspaceProperties         WorkspaceWorkspacePropertiesOutput `pulumi:"workspaceProperties"`
}

// NewWorkspace registers a new resource with the given unique name, arguments, and options.
func NewWorkspace(ctx *pulumi.Context,
	name string, args *WorkspaceArgs, opts ...pulumi.ResourceOption) (*Workspace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BundleId == nil {
		return nil, errors.New("invalid value for required argument 'BundleId'")
	}
	if args.DirectoryId == nil {
		return nil, errors.New("invalid value for required argument 'DirectoryId'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	var resource Workspace
	err := ctx.RegisterResource("aws:workspaces/workspace:Workspace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspace gets an existing Workspace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceState, opts ...pulumi.ResourceOption) (*Workspace, error) {
	var resource Workspace
	err := ctx.ReadResource("aws:workspaces/workspace:Workspace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Workspace resources.
type workspaceState struct {
	BundleId                    *string                       `pulumi:"bundleId"`
	ComputerName                *string                       `pulumi:"computerName"`
	DirectoryId                 *string                       `pulumi:"directoryId"`
	IpAddress                   *string                       `pulumi:"ipAddress"`
	RootVolumeEncryptionEnabled *bool                         `pulumi:"rootVolumeEncryptionEnabled"`
	State                       *string                       `pulumi:"state"`
	Tags                        map[string]string             `pulumi:"tags"`
	TagsAll                     map[string]string             `pulumi:"tagsAll"`
	UserName                    *string                       `pulumi:"userName"`
	UserVolumeEncryptionEnabled *bool                         `pulumi:"userVolumeEncryptionEnabled"`
	VolumeEncryptionKey         *string                       `pulumi:"volumeEncryptionKey"`
	WorkspaceProperties         *WorkspaceWorkspaceProperties `pulumi:"workspaceProperties"`
}

type WorkspaceState struct {
	BundleId                    pulumi.StringPtrInput
	ComputerName                pulumi.StringPtrInput
	DirectoryId                 pulumi.StringPtrInput
	IpAddress                   pulumi.StringPtrInput
	RootVolumeEncryptionEnabled pulumi.BoolPtrInput
	State                       pulumi.StringPtrInput
	Tags                        pulumi.StringMapInput
	TagsAll                     pulumi.StringMapInput
	UserName                    pulumi.StringPtrInput
	UserVolumeEncryptionEnabled pulumi.BoolPtrInput
	VolumeEncryptionKey         pulumi.StringPtrInput
	WorkspaceProperties         WorkspaceWorkspacePropertiesPtrInput
}

func (WorkspaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceState)(nil)).Elem()
}

type workspaceArgs struct {
	BundleId                    string                        `pulumi:"bundleId"`
	DirectoryId                 string                        `pulumi:"directoryId"`
	RootVolumeEncryptionEnabled *bool                         `pulumi:"rootVolumeEncryptionEnabled"`
	Tags                        map[string]string             `pulumi:"tags"`
	UserName                    string                        `pulumi:"userName"`
	UserVolumeEncryptionEnabled *bool                         `pulumi:"userVolumeEncryptionEnabled"`
	VolumeEncryptionKey         *string                       `pulumi:"volumeEncryptionKey"`
	WorkspaceProperties         *WorkspaceWorkspaceProperties `pulumi:"workspaceProperties"`
}

// The set of arguments for constructing a Workspace resource.
type WorkspaceArgs struct {
	BundleId                    pulumi.StringInput
	DirectoryId                 pulumi.StringInput
	RootVolumeEncryptionEnabled pulumi.BoolPtrInput
	Tags                        pulumi.StringMapInput
	UserName                    pulumi.StringInput
	UserVolumeEncryptionEnabled pulumi.BoolPtrInput
	VolumeEncryptionKey         pulumi.StringPtrInput
	WorkspaceProperties         WorkspaceWorkspacePropertiesPtrInput
}

func (WorkspaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceArgs)(nil)).Elem()
}

type WorkspaceInput interface {
	pulumi.Input

	ToWorkspaceOutput() WorkspaceOutput
	ToWorkspaceOutputWithContext(ctx context.Context) WorkspaceOutput
}

func (*Workspace) ElementType() reflect.Type {
	return reflect.TypeOf((**Workspace)(nil)).Elem()
}

func (i *Workspace) ToWorkspaceOutput() WorkspaceOutput {
	return i.ToWorkspaceOutputWithContext(context.Background())
}

func (i *Workspace) ToWorkspaceOutputWithContext(ctx context.Context) WorkspaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceOutput)
}

// WorkspaceArrayInput is an input type that accepts WorkspaceArray and WorkspaceArrayOutput values.
// You can construct a concrete instance of `WorkspaceArrayInput` via:
//
//	WorkspaceArray{ WorkspaceArgs{...} }
type WorkspaceArrayInput interface {
	pulumi.Input

	ToWorkspaceArrayOutput() WorkspaceArrayOutput
	ToWorkspaceArrayOutputWithContext(context.Context) WorkspaceArrayOutput
}

type WorkspaceArray []WorkspaceInput

func (WorkspaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Workspace)(nil)).Elem()
}

func (i WorkspaceArray) ToWorkspaceArrayOutput() WorkspaceArrayOutput {
	return i.ToWorkspaceArrayOutputWithContext(context.Background())
}

func (i WorkspaceArray) ToWorkspaceArrayOutputWithContext(ctx context.Context) WorkspaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceArrayOutput)
}

// WorkspaceMapInput is an input type that accepts WorkspaceMap and WorkspaceMapOutput values.
// You can construct a concrete instance of `WorkspaceMapInput` via:
//
//	WorkspaceMap{ "key": WorkspaceArgs{...} }
type WorkspaceMapInput interface {
	pulumi.Input

	ToWorkspaceMapOutput() WorkspaceMapOutput
	ToWorkspaceMapOutputWithContext(context.Context) WorkspaceMapOutput
}

type WorkspaceMap map[string]WorkspaceInput

func (WorkspaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Workspace)(nil)).Elem()
}

func (i WorkspaceMap) ToWorkspaceMapOutput() WorkspaceMapOutput {
	return i.ToWorkspaceMapOutputWithContext(context.Background())
}

func (i WorkspaceMap) ToWorkspaceMapOutputWithContext(ctx context.Context) WorkspaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceMapOutput)
}

type WorkspaceOutput struct{ *pulumi.OutputState }

func (WorkspaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Workspace)(nil)).Elem()
}

func (o WorkspaceOutput) ToWorkspaceOutput() WorkspaceOutput {
	return o
}

func (o WorkspaceOutput) ToWorkspaceOutputWithContext(ctx context.Context) WorkspaceOutput {
	return o
}

func (o WorkspaceOutput) BundleId() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.BundleId }).(pulumi.StringOutput)
}

func (o WorkspaceOutput) ComputerName() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.ComputerName }).(pulumi.StringOutput)
}

func (o WorkspaceOutput) DirectoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.DirectoryId }).(pulumi.StringOutput)
}

func (o WorkspaceOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

func (o WorkspaceOutput) RootVolumeEncryptionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Workspace) pulumi.BoolPtrOutput { return v.RootVolumeEncryptionEnabled }).(pulumi.BoolPtrOutput)
}

func (o WorkspaceOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o WorkspaceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o WorkspaceOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o WorkspaceOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

func (o WorkspaceOutput) UserVolumeEncryptionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Workspace) pulumi.BoolPtrOutput { return v.UserVolumeEncryptionEnabled }).(pulumi.BoolPtrOutput)
}

func (o WorkspaceOutput) VolumeEncryptionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringPtrOutput { return v.VolumeEncryptionKey }).(pulumi.StringPtrOutput)
}

func (o WorkspaceOutput) WorkspaceProperties() WorkspaceWorkspacePropertiesOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceWorkspacePropertiesOutput { return v.WorkspaceProperties }).(WorkspaceWorkspacePropertiesOutput)
}

type WorkspaceArrayOutput struct{ *pulumi.OutputState }

func (WorkspaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Workspace)(nil)).Elem()
}

func (o WorkspaceArrayOutput) ToWorkspaceArrayOutput() WorkspaceArrayOutput {
	return o
}

func (o WorkspaceArrayOutput) ToWorkspaceArrayOutputWithContext(ctx context.Context) WorkspaceArrayOutput {
	return o
}

func (o WorkspaceArrayOutput) Index(i pulumi.IntInput) WorkspaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Workspace {
		return vs[0].([]*Workspace)[vs[1].(int)]
	}).(WorkspaceOutput)
}

type WorkspaceMapOutput struct{ *pulumi.OutputState }

func (WorkspaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Workspace)(nil)).Elem()
}

func (o WorkspaceMapOutput) ToWorkspaceMapOutput() WorkspaceMapOutput {
	return o
}

func (o WorkspaceMapOutput) ToWorkspaceMapOutputWithContext(ctx context.Context) WorkspaceMapOutput {
	return o
}

func (o WorkspaceMapOutput) MapIndex(k pulumi.StringInput) WorkspaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Workspace {
		return vs[0].(map[string]*Workspace)[vs[1].(string)]
	}).(WorkspaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceInput)(nil)).Elem(), &Workspace{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceArrayInput)(nil)).Elem(), WorkspaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceMapInput)(nil)).Elem(), WorkspaceMap{})
	pulumi.RegisterOutputType(WorkspaceOutput{})
	pulumi.RegisterOutputType(WorkspaceArrayOutput{})
	pulumi.RegisterOutputType(WorkspaceMapOutput{})
}
