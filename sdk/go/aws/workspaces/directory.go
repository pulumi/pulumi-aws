// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workspaces

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Directory struct {
	pulumi.CustomResourceState

	Alias                       pulumi.StringOutput                        `pulumi:"alias"`
	CustomerUserName            pulumi.StringOutput                        `pulumi:"customerUserName"`
	DirectoryId                 pulumi.StringOutput                        `pulumi:"directoryId"`
	DirectoryName               pulumi.StringOutput                        `pulumi:"directoryName"`
	DirectoryType               pulumi.StringOutput                        `pulumi:"directoryType"`
	DnsIpAddresses              pulumi.StringArrayOutput                   `pulumi:"dnsIpAddresses"`
	IamRoleId                   pulumi.StringOutput                        `pulumi:"iamRoleId"`
	IpGroupIds                  pulumi.StringArrayOutput                   `pulumi:"ipGroupIds"`
	RegistrationCode            pulumi.StringOutput                        `pulumi:"registrationCode"`
	SelfServicePermissions      DirectorySelfServicePermissionsOutput      `pulumi:"selfServicePermissions"`
	SubnetIds                   pulumi.StringArrayOutput                   `pulumi:"subnetIds"`
	Tags                        pulumi.StringMapOutput                     `pulumi:"tags"`
	TagsAll                     pulumi.StringMapOutput                     `pulumi:"tagsAll"`
	WorkspaceAccessProperties   DirectoryWorkspaceAccessPropertiesOutput   `pulumi:"workspaceAccessProperties"`
	WorkspaceCreationProperties DirectoryWorkspaceCreationPropertiesOutput `pulumi:"workspaceCreationProperties"`
	WorkspaceSecurityGroupId    pulumi.StringOutput                        `pulumi:"workspaceSecurityGroupId"`
}

// NewDirectory registers a new resource with the given unique name, arguments, and options.
func NewDirectory(ctx *pulumi.Context,
	name string, args *DirectoryArgs, opts ...pulumi.ResourceOption) (*Directory, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DirectoryId == nil {
		return nil, errors.New("invalid value for required argument 'DirectoryId'")
	}
	var resource Directory
	err := ctx.RegisterResource("aws:workspaces/directory:Directory", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDirectory gets an existing Directory resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDirectory(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DirectoryState, opts ...pulumi.ResourceOption) (*Directory, error) {
	var resource Directory
	err := ctx.ReadResource("aws:workspaces/directory:Directory", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Directory resources.
type directoryState struct {
	Alias                       *string                               `pulumi:"alias"`
	CustomerUserName            *string                               `pulumi:"customerUserName"`
	DirectoryId                 *string                               `pulumi:"directoryId"`
	DirectoryName               *string                               `pulumi:"directoryName"`
	DirectoryType               *string                               `pulumi:"directoryType"`
	DnsIpAddresses              []string                              `pulumi:"dnsIpAddresses"`
	IamRoleId                   *string                               `pulumi:"iamRoleId"`
	IpGroupIds                  []string                              `pulumi:"ipGroupIds"`
	RegistrationCode            *string                               `pulumi:"registrationCode"`
	SelfServicePermissions      *DirectorySelfServicePermissions      `pulumi:"selfServicePermissions"`
	SubnetIds                   []string                              `pulumi:"subnetIds"`
	Tags                        map[string]string                     `pulumi:"tags"`
	TagsAll                     map[string]string                     `pulumi:"tagsAll"`
	WorkspaceAccessProperties   *DirectoryWorkspaceAccessProperties   `pulumi:"workspaceAccessProperties"`
	WorkspaceCreationProperties *DirectoryWorkspaceCreationProperties `pulumi:"workspaceCreationProperties"`
	WorkspaceSecurityGroupId    *string                               `pulumi:"workspaceSecurityGroupId"`
}

type DirectoryState struct {
	Alias                       pulumi.StringPtrInput
	CustomerUserName            pulumi.StringPtrInput
	DirectoryId                 pulumi.StringPtrInput
	DirectoryName               pulumi.StringPtrInput
	DirectoryType               pulumi.StringPtrInput
	DnsIpAddresses              pulumi.StringArrayInput
	IamRoleId                   pulumi.StringPtrInput
	IpGroupIds                  pulumi.StringArrayInput
	RegistrationCode            pulumi.StringPtrInput
	SelfServicePermissions      DirectorySelfServicePermissionsPtrInput
	SubnetIds                   pulumi.StringArrayInput
	Tags                        pulumi.StringMapInput
	TagsAll                     pulumi.StringMapInput
	WorkspaceAccessProperties   DirectoryWorkspaceAccessPropertiesPtrInput
	WorkspaceCreationProperties DirectoryWorkspaceCreationPropertiesPtrInput
	WorkspaceSecurityGroupId    pulumi.StringPtrInput
}

func (DirectoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*directoryState)(nil)).Elem()
}

type directoryArgs struct {
	DirectoryId                 string                                `pulumi:"directoryId"`
	IpGroupIds                  []string                              `pulumi:"ipGroupIds"`
	SelfServicePermissions      *DirectorySelfServicePermissions      `pulumi:"selfServicePermissions"`
	SubnetIds                   []string                              `pulumi:"subnetIds"`
	Tags                        map[string]string                     `pulumi:"tags"`
	WorkspaceAccessProperties   *DirectoryWorkspaceAccessProperties   `pulumi:"workspaceAccessProperties"`
	WorkspaceCreationProperties *DirectoryWorkspaceCreationProperties `pulumi:"workspaceCreationProperties"`
}

// The set of arguments for constructing a Directory resource.
type DirectoryArgs struct {
	DirectoryId                 pulumi.StringInput
	IpGroupIds                  pulumi.StringArrayInput
	SelfServicePermissions      DirectorySelfServicePermissionsPtrInput
	SubnetIds                   pulumi.StringArrayInput
	Tags                        pulumi.StringMapInput
	WorkspaceAccessProperties   DirectoryWorkspaceAccessPropertiesPtrInput
	WorkspaceCreationProperties DirectoryWorkspaceCreationPropertiesPtrInput
}

func (DirectoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*directoryArgs)(nil)).Elem()
}

type DirectoryInput interface {
	pulumi.Input

	ToDirectoryOutput() DirectoryOutput
	ToDirectoryOutputWithContext(ctx context.Context) DirectoryOutput
}

func (*Directory) ElementType() reflect.Type {
	return reflect.TypeOf((**Directory)(nil)).Elem()
}

func (i *Directory) ToDirectoryOutput() DirectoryOutput {
	return i.ToDirectoryOutputWithContext(context.Background())
}

func (i *Directory) ToDirectoryOutputWithContext(ctx context.Context) DirectoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryOutput)
}

// DirectoryArrayInput is an input type that accepts DirectoryArray and DirectoryArrayOutput values.
// You can construct a concrete instance of `DirectoryArrayInput` via:
//
//	DirectoryArray{ DirectoryArgs{...} }
type DirectoryArrayInput interface {
	pulumi.Input

	ToDirectoryArrayOutput() DirectoryArrayOutput
	ToDirectoryArrayOutputWithContext(context.Context) DirectoryArrayOutput
}

type DirectoryArray []DirectoryInput

func (DirectoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Directory)(nil)).Elem()
}

func (i DirectoryArray) ToDirectoryArrayOutput() DirectoryArrayOutput {
	return i.ToDirectoryArrayOutputWithContext(context.Background())
}

func (i DirectoryArray) ToDirectoryArrayOutputWithContext(ctx context.Context) DirectoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryArrayOutput)
}

// DirectoryMapInput is an input type that accepts DirectoryMap and DirectoryMapOutput values.
// You can construct a concrete instance of `DirectoryMapInput` via:
//
//	DirectoryMap{ "key": DirectoryArgs{...} }
type DirectoryMapInput interface {
	pulumi.Input

	ToDirectoryMapOutput() DirectoryMapOutput
	ToDirectoryMapOutputWithContext(context.Context) DirectoryMapOutput
}

type DirectoryMap map[string]DirectoryInput

func (DirectoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Directory)(nil)).Elem()
}

func (i DirectoryMap) ToDirectoryMapOutput() DirectoryMapOutput {
	return i.ToDirectoryMapOutputWithContext(context.Background())
}

func (i DirectoryMap) ToDirectoryMapOutputWithContext(ctx context.Context) DirectoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryMapOutput)
}

type DirectoryOutput struct{ *pulumi.OutputState }

func (DirectoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Directory)(nil)).Elem()
}

func (o DirectoryOutput) ToDirectoryOutput() DirectoryOutput {
	return o
}

func (o DirectoryOutput) ToDirectoryOutputWithContext(ctx context.Context) DirectoryOutput {
	return o
}

func (o DirectoryOutput) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v *Directory) pulumi.StringOutput { return v.Alias }).(pulumi.StringOutput)
}

func (o DirectoryOutput) CustomerUserName() pulumi.StringOutput {
	return o.ApplyT(func(v *Directory) pulumi.StringOutput { return v.CustomerUserName }).(pulumi.StringOutput)
}

func (o DirectoryOutput) DirectoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *Directory) pulumi.StringOutput { return v.DirectoryId }).(pulumi.StringOutput)
}

func (o DirectoryOutput) DirectoryName() pulumi.StringOutput {
	return o.ApplyT(func(v *Directory) pulumi.StringOutput { return v.DirectoryName }).(pulumi.StringOutput)
}

func (o DirectoryOutput) DirectoryType() pulumi.StringOutput {
	return o.ApplyT(func(v *Directory) pulumi.StringOutput { return v.DirectoryType }).(pulumi.StringOutput)
}

func (o DirectoryOutput) DnsIpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Directory) pulumi.StringArrayOutput { return v.DnsIpAddresses }).(pulumi.StringArrayOutput)
}

func (o DirectoryOutput) IamRoleId() pulumi.StringOutput {
	return o.ApplyT(func(v *Directory) pulumi.StringOutput { return v.IamRoleId }).(pulumi.StringOutput)
}

func (o DirectoryOutput) IpGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Directory) pulumi.StringArrayOutput { return v.IpGroupIds }).(pulumi.StringArrayOutput)
}

func (o DirectoryOutput) RegistrationCode() pulumi.StringOutput {
	return o.ApplyT(func(v *Directory) pulumi.StringOutput { return v.RegistrationCode }).(pulumi.StringOutput)
}

func (o DirectoryOutput) SelfServicePermissions() DirectorySelfServicePermissionsOutput {
	return o.ApplyT(func(v *Directory) DirectorySelfServicePermissionsOutput { return v.SelfServicePermissions }).(DirectorySelfServicePermissionsOutput)
}

func (o DirectoryOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Directory) pulumi.StringArrayOutput { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

func (o DirectoryOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Directory) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o DirectoryOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Directory) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o DirectoryOutput) WorkspaceAccessProperties() DirectoryWorkspaceAccessPropertiesOutput {
	return o.ApplyT(func(v *Directory) DirectoryWorkspaceAccessPropertiesOutput { return v.WorkspaceAccessProperties }).(DirectoryWorkspaceAccessPropertiesOutput)
}

func (o DirectoryOutput) WorkspaceCreationProperties() DirectoryWorkspaceCreationPropertiesOutput {
	return o.ApplyT(func(v *Directory) DirectoryWorkspaceCreationPropertiesOutput { return v.WorkspaceCreationProperties }).(DirectoryWorkspaceCreationPropertiesOutput)
}

func (o DirectoryOutput) WorkspaceSecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Directory) pulumi.StringOutput { return v.WorkspaceSecurityGroupId }).(pulumi.StringOutput)
}

type DirectoryArrayOutput struct{ *pulumi.OutputState }

func (DirectoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Directory)(nil)).Elem()
}

func (o DirectoryArrayOutput) ToDirectoryArrayOutput() DirectoryArrayOutput {
	return o
}

func (o DirectoryArrayOutput) ToDirectoryArrayOutputWithContext(ctx context.Context) DirectoryArrayOutput {
	return o
}

func (o DirectoryArrayOutput) Index(i pulumi.IntInput) DirectoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Directory {
		return vs[0].([]*Directory)[vs[1].(int)]
	}).(DirectoryOutput)
}

type DirectoryMapOutput struct{ *pulumi.OutputState }

func (DirectoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Directory)(nil)).Elem()
}

func (o DirectoryMapOutput) ToDirectoryMapOutput() DirectoryMapOutput {
	return o
}

func (o DirectoryMapOutput) ToDirectoryMapOutputWithContext(ctx context.Context) DirectoryMapOutput {
	return o
}

func (o DirectoryMapOutput) MapIndex(k pulumi.StringInput) DirectoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Directory {
		return vs[0].(map[string]*Directory)[vs[1].(string)]
	}).(DirectoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DirectoryInput)(nil)).Elem(), &Directory{})
	pulumi.RegisterInputType(reflect.TypeOf((*DirectoryArrayInput)(nil)).Elem(), DirectoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DirectoryMapInput)(nil)).Elem(), DirectoryMap{})
	pulumi.RegisterOutputType(DirectoryOutput{})
	pulumi.RegisterOutputType(DirectoryArrayOutput{})
	pulumi.RegisterOutputType(DirectoryMapOutput{})
}
