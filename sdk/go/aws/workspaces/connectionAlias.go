// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workspaces

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS WorkSpaces Connection Alias.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/workspaces"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := workspaces.NewConnectionAlias(ctx, "example", &workspaces.ConnectionAliasArgs{
//				ConnectionString: pulumi.String("testdomain.test"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import WorkSpaces Connection Alias using the connection alias ID. For example:
//
// ```sh
//
//	$ pulumi import aws:workspaces/connectionAlias:ConnectionAlias example rft-8012925589
//
// ```
type ConnectionAlias struct {
	pulumi.CustomResourceState

	// The connection string specified for the connection alias. The connection string must be in the form of a fully qualified domain name (FQDN), such as www.example.com.
	ConnectionString pulumi.StringOutput `pulumi:"connectionString"`
	// The identifier of the Amazon Web Services account that owns the connection alias.
	OwnerAccountId pulumi.StringOutput `pulumi:"ownerAccountId"`
	// The current state of the connection alias.
	State pulumi.StringOutput `pulumi:"state"`
	// A map of tags assigned to the WorkSpaces Connection Alias. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapOutput           `pulumi:"tagsAll"`
	Timeouts ConnectionAliasTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewConnectionAlias registers a new resource with the given unique name, arguments, and options.
func NewConnectionAlias(ctx *pulumi.Context,
	name string, args *ConnectionAliasArgs, opts ...pulumi.ResourceOption) (*ConnectionAlias, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionString == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionString'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"tagsAll",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConnectionAlias
	err := ctx.RegisterResource("aws:workspaces/connectionAlias:ConnectionAlias", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectionAlias gets an existing ConnectionAlias resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectionAlias(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionAliasState, opts ...pulumi.ResourceOption) (*ConnectionAlias, error) {
	var resource ConnectionAlias
	err := ctx.ReadResource("aws:workspaces/connectionAlias:ConnectionAlias", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectionAlias resources.
type connectionAliasState struct {
	// The connection string specified for the connection alias. The connection string must be in the form of a fully qualified domain name (FQDN), such as www.example.com.
	ConnectionString *string `pulumi:"connectionString"`
	// The identifier of the Amazon Web Services account that owns the connection alias.
	OwnerAccountId *string `pulumi:"ownerAccountId"`
	// The current state of the connection alias.
	State *string `pulumi:"state"`
	// A map of tags assigned to the WorkSpaces Connection Alias. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  map[string]string        `pulumi:"tagsAll"`
	Timeouts *ConnectionAliasTimeouts `pulumi:"timeouts"`
}

type ConnectionAliasState struct {
	// The connection string specified for the connection alias. The connection string must be in the form of a fully qualified domain name (FQDN), such as www.example.com.
	ConnectionString pulumi.StringPtrInput
	// The identifier of the Amazon Web Services account that owns the connection alias.
	OwnerAccountId pulumi.StringPtrInput
	// The current state of the connection alias.
	State pulumi.StringPtrInput
	// A map of tags assigned to the WorkSpaces Connection Alias. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapInput
	Timeouts ConnectionAliasTimeoutsPtrInput
}

func (ConnectionAliasState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionAliasState)(nil)).Elem()
}

type connectionAliasArgs struct {
	// The connection string specified for the connection alias. The connection string must be in the form of a fully qualified domain name (FQDN), such as www.example.com.
	ConnectionString string `pulumi:"connectionString"`
	// A map of tags assigned to the WorkSpaces Connection Alias. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     map[string]string        `pulumi:"tags"`
	Timeouts *ConnectionAliasTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a ConnectionAlias resource.
type ConnectionAliasArgs struct {
	// The connection string specified for the connection alias. The connection string must be in the form of a fully qualified domain name (FQDN), such as www.example.com.
	ConnectionString pulumi.StringInput
	// A map of tags assigned to the WorkSpaces Connection Alias. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     pulumi.StringMapInput
	Timeouts ConnectionAliasTimeoutsPtrInput
}

func (ConnectionAliasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionAliasArgs)(nil)).Elem()
}

type ConnectionAliasInput interface {
	pulumi.Input

	ToConnectionAliasOutput() ConnectionAliasOutput
	ToConnectionAliasOutputWithContext(ctx context.Context) ConnectionAliasOutput
}

func (*ConnectionAlias) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionAlias)(nil)).Elem()
}

func (i *ConnectionAlias) ToConnectionAliasOutput() ConnectionAliasOutput {
	return i.ToConnectionAliasOutputWithContext(context.Background())
}

func (i *ConnectionAlias) ToConnectionAliasOutputWithContext(ctx context.Context) ConnectionAliasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionAliasOutput)
}

func (i *ConnectionAlias) ToOutput(ctx context.Context) pulumix.Output[*ConnectionAlias] {
	return pulumix.Output[*ConnectionAlias]{
		OutputState: i.ToConnectionAliasOutputWithContext(ctx).OutputState,
	}
}

// ConnectionAliasArrayInput is an input type that accepts ConnectionAliasArray and ConnectionAliasArrayOutput values.
// You can construct a concrete instance of `ConnectionAliasArrayInput` via:
//
//	ConnectionAliasArray{ ConnectionAliasArgs{...} }
type ConnectionAliasArrayInput interface {
	pulumi.Input

	ToConnectionAliasArrayOutput() ConnectionAliasArrayOutput
	ToConnectionAliasArrayOutputWithContext(context.Context) ConnectionAliasArrayOutput
}

type ConnectionAliasArray []ConnectionAliasInput

func (ConnectionAliasArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectionAlias)(nil)).Elem()
}

func (i ConnectionAliasArray) ToConnectionAliasArrayOutput() ConnectionAliasArrayOutput {
	return i.ToConnectionAliasArrayOutputWithContext(context.Background())
}

func (i ConnectionAliasArray) ToConnectionAliasArrayOutputWithContext(ctx context.Context) ConnectionAliasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionAliasArrayOutput)
}

func (i ConnectionAliasArray) ToOutput(ctx context.Context) pulumix.Output[[]*ConnectionAlias] {
	return pulumix.Output[[]*ConnectionAlias]{
		OutputState: i.ToConnectionAliasArrayOutputWithContext(ctx).OutputState,
	}
}

// ConnectionAliasMapInput is an input type that accepts ConnectionAliasMap and ConnectionAliasMapOutput values.
// You can construct a concrete instance of `ConnectionAliasMapInput` via:
//
//	ConnectionAliasMap{ "key": ConnectionAliasArgs{...} }
type ConnectionAliasMapInput interface {
	pulumi.Input

	ToConnectionAliasMapOutput() ConnectionAliasMapOutput
	ToConnectionAliasMapOutputWithContext(context.Context) ConnectionAliasMapOutput
}

type ConnectionAliasMap map[string]ConnectionAliasInput

func (ConnectionAliasMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectionAlias)(nil)).Elem()
}

func (i ConnectionAliasMap) ToConnectionAliasMapOutput() ConnectionAliasMapOutput {
	return i.ToConnectionAliasMapOutputWithContext(context.Background())
}

func (i ConnectionAliasMap) ToConnectionAliasMapOutputWithContext(ctx context.Context) ConnectionAliasMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionAliasMapOutput)
}

func (i ConnectionAliasMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ConnectionAlias] {
	return pulumix.Output[map[string]*ConnectionAlias]{
		OutputState: i.ToConnectionAliasMapOutputWithContext(ctx).OutputState,
	}
}

type ConnectionAliasOutput struct{ *pulumi.OutputState }

func (ConnectionAliasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionAlias)(nil)).Elem()
}

func (o ConnectionAliasOutput) ToConnectionAliasOutput() ConnectionAliasOutput {
	return o
}

func (o ConnectionAliasOutput) ToConnectionAliasOutputWithContext(ctx context.Context) ConnectionAliasOutput {
	return o
}

func (o ConnectionAliasOutput) ToOutput(ctx context.Context) pulumix.Output[*ConnectionAlias] {
	return pulumix.Output[*ConnectionAlias]{
		OutputState: o.OutputState,
	}
}

// The connection string specified for the connection alias. The connection string must be in the form of a fully qualified domain name (FQDN), such as www.example.com.
func (o ConnectionAliasOutput) ConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionAlias) pulumi.StringOutput { return v.ConnectionString }).(pulumi.StringOutput)
}

// The identifier of the Amazon Web Services account that owns the connection alias.
func (o ConnectionAliasOutput) OwnerAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionAlias) pulumi.StringOutput { return v.OwnerAccountId }).(pulumi.StringOutput)
}

// The current state of the connection alias.
func (o ConnectionAliasOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionAlias) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// A map of tags assigned to the WorkSpaces Connection Alias. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ConnectionAliasOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConnectionAlias) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o ConnectionAliasOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConnectionAlias) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o ConnectionAliasOutput) Timeouts() ConnectionAliasTimeoutsPtrOutput {
	return o.ApplyT(func(v *ConnectionAlias) ConnectionAliasTimeoutsPtrOutput { return v.Timeouts }).(ConnectionAliasTimeoutsPtrOutput)
}

type ConnectionAliasArrayOutput struct{ *pulumi.OutputState }

func (ConnectionAliasArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectionAlias)(nil)).Elem()
}

func (o ConnectionAliasArrayOutput) ToConnectionAliasArrayOutput() ConnectionAliasArrayOutput {
	return o
}

func (o ConnectionAliasArrayOutput) ToConnectionAliasArrayOutputWithContext(ctx context.Context) ConnectionAliasArrayOutput {
	return o
}

func (o ConnectionAliasArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ConnectionAlias] {
	return pulumix.Output[[]*ConnectionAlias]{
		OutputState: o.OutputState,
	}
}

func (o ConnectionAliasArrayOutput) Index(i pulumi.IntInput) ConnectionAliasOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectionAlias {
		return vs[0].([]*ConnectionAlias)[vs[1].(int)]
	}).(ConnectionAliasOutput)
}

type ConnectionAliasMapOutput struct{ *pulumi.OutputState }

func (ConnectionAliasMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectionAlias)(nil)).Elem()
}

func (o ConnectionAliasMapOutput) ToConnectionAliasMapOutput() ConnectionAliasMapOutput {
	return o
}

func (o ConnectionAliasMapOutput) ToConnectionAliasMapOutputWithContext(ctx context.Context) ConnectionAliasMapOutput {
	return o
}

func (o ConnectionAliasMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ConnectionAlias] {
	return pulumix.Output[map[string]*ConnectionAlias]{
		OutputState: o.OutputState,
	}
}

func (o ConnectionAliasMapOutput) MapIndex(k pulumi.StringInput) ConnectionAliasOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectionAlias {
		return vs[0].(map[string]*ConnectionAlias)[vs[1].(string)]
	}).(ConnectionAliasOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionAliasInput)(nil)).Elem(), &ConnectionAlias{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionAliasArrayInput)(nil)).Elem(), ConnectionAliasArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionAliasMapInput)(nil)).Elem(), ConnectionAliasMap{})
	pulumi.RegisterOutputType(ConnectionAliasOutput{})
	pulumi.RegisterOutputType(ConnectionAliasArrayOutput{})
	pulumi.RegisterOutputType(ConnectionAliasMapOutput{})
}
