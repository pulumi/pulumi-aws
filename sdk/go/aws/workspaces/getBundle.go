// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workspaces

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func GetBundle(ctx *pulumi.Context, args *GetBundleArgs, opts ...pulumi.InvokeOption) (*GetBundleResult, error) {
	var rv GetBundleResult
	err := ctx.Invoke("aws:workspaces/getBundle:getBundle", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBundle.
type GetBundleArgs struct {
	BundleId *string `pulumi:"bundleId"`
	Name     *string `pulumi:"name"`
	Owner    *string `pulumi:"owner"`
}

// A collection of values returned by getBundle.
type GetBundleResult struct {
	BundleId     *string                `pulumi:"bundleId"`
	ComputeTypes []GetBundleComputeType `pulumi:"computeTypes"`
	Description  string                 `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id           string                 `pulumi:"id"`
	Name         *string                `pulumi:"name"`
	Owner        *string                `pulumi:"owner"`
	RootStorages []GetBundleRootStorage `pulumi:"rootStorages"`
	UserStorages []GetBundleUserStorage `pulumi:"userStorages"`
}

func GetBundleOutput(ctx *pulumi.Context, args GetBundleOutputArgs, opts ...pulumi.InvokeOption) GetBundleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetBundleResult, error) {
			args := v.(GetBundleArgs)
			r, err := GetBundle(ctx, &args, opts...)
			var s GetBundleResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetBundleResultOutput)
}

// A collection of arguments for invoking getBundle.
type GetBundleOutputArgs struct {
	BundleId pulumi.StringPtrInput `pulumi:"bundleId"`
	Name     pulumi.StringPtrInput `pulumi:"name"`
	Owner    pulumi.StringPtrInput `pulumi:"owner"`
}

func (GetBundleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBundleArgs)(nil)).Elem()
}

// A collection of values returned by getBundle.
type GetBundleResultOutput struct{ *pulumi.OutputState }

func (GetBundleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBundleResult)(nil)).Elem()
}

func (o GetBundleResultOutput) ToGetBundleResultOutput() GetBundleResultOutput {
	return o
}

func (o GetBundleResultOutput) ToGetBundleResultOutputWithContext(ctx context.Context) GetBundleResultOutput {
	return o
}

func (o GetBundleResultOutput) BundleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBundleResult) *string { return v.BundleId }).(pulumi.StringPtrOutput)
}

func (o GetBundleResultOutput) ComputeTypes() GetBundleComputeTypeArrayOutput {
	return o.ApplyT(func(v GetBundleResult) []GetBundleComputeType { return v.ComputeTypes }).(GetBundleComputeTypeArrayOutput)
}

func (o GetBundleResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetBundleResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetBundleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBundleResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetBundleResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBundleResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetBundleResultOutput) Owner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBundleResult) *string { return v.Owner }).(pulumi.StringPtrOutput)
}

func (o GetBundleResultOutput) RootStorages() GetBundleRootStorageArrayOutput {
	return o.ApplyT(func(v GetBundleResult) []GetBundleRootStorage { return v.RootStorages }).(GetBundleRootStorageArrayOutput)
}

func (o GetBundleResultOutput) UserStorages() GetBundleUserStorageArrayOutput {
	return o.ApplyT(func(v GetBundleResult) []GetBundleUserStorage { return v.UserStorages }).(GetBundleUserStorageArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetBundleResultOutput{})
}
