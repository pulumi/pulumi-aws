// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package workspaces

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information about a workspace in [AWS Workspaces](https://docs.aws.amazon.com/workspaces/latest/adminguide/amazon-workspaces.html) Service.
//
// ## Example Usage
// ### Filter By Workspace ID
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/workspaces"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := "ws-cj5xcxsz5"
// 		_, err := workspaces.LookupWorkspace(ctx, &workspaces.LookupWorkspaceArgs{
// 			WorkspaceId: &opt0,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Filter By Directory ID & User Name
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/workspaces"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := "d-9967252f57"
// 		opt1 := "Example"
// 		_, err := workspaces.LookupWorkspace(ctx, &workspaces.LookupWorkspaceArgs{
// 			DirectoryId: &opt0,
// 			UserName:    &opt1,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupWorkspace(ctx *pulumi.Context, args *LookupWorkspaceArgs, opts ...pulumi.InvokeOption) (*LookupWorkspaceResult, error) {
	var rv LookupWorkspaceResult
	err := ctx.Invoke("aws:workspaces/getWorkspace:getWorkspace", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getWorkspace.
type LookupWorkspaceArgs struct {
	// The ID of the directory for the WorkSpace. You have to specify `userName` along with `directoryId`. You cannot combine this parameter with `workspaceId`.
	DirectoryId *string `pulumi:"directoryId"`
	// The tags for the WorkSpace.
	Tags map[string]string `pulumi:"tags"`
	// The user name of the user for the WorkSpace. This user name must exist in the directory for the WorkSpace. You cannot combine this parameter with `workspaceId`.
	UserName *string `pulumi:"userName"`
	// The ID of the WorkSpace. You cannot combine this parameter with `directoryId`.
	WorkspaceId *string `pulumi:"workspaceId"`
}

// A collection of values returned by getWorkspace.
type LookupWorkspaceResult struct {
	BundleId string `pulumi:"bundleId"`
	// The name of the WorkSpace, as seen by the operating system.
	ComputerName string `pulumi:"computerName"`
	DirectoryId  string `pulumi:"directoryId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The IP address of the WorkSpace.
	IpAddress                   string `pulumi:"ipAddress"`
	RootVolumeEncryptionEnabled bool   `pulumi:"rootVolumeEncryptionEnabled"`
	// The operational state of the WorkSpace.
	State                       string                          `pulumi:"state"`
	Tags                        map[string]string               `pulumi:"tags"`
	UserName                    string                          `pulumi:"userName"`
	UserVolumeEncryptionEnabled bool                            `pulumi:"userVolumeEncryptionEnabled"`
	VolumeEncryptionKey         string                          `pulumi:"volumeEncryptionKey"`
	WorkspaceId                 string                          `pulumi:"workspaceId"`
	WorkspaceProperties         []GetWorkspaceWorkspaceProperty `pulumi:"workspaceProperties"`
}
