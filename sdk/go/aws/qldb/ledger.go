// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package qldb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Ledger struct {
	pulumi.CustomResourceState

	Arn                pulumi.StringOutput    `pulumi:"arn"`
	DeletionProtection pulumi.BoolPtrOutput   `pulumi:"deletionProtection"`
	KmsKey             pulumi.StringOutput    `pulumi:"kmsKey"`
	Name               pulumi.StringOutput    `pulumi:"name"`
	PermissionsMode    pulumi.StringOutput    `pulumi:"permissionsMode"`
	Tags               pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll            pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewLedger registers a new resource with the given unique name, arguments, and options.
func NewLedger(ctx *pulumi.Context,
	name string, args *LedgerArgs, opts ...pulumi.ResourceOption) (*Ledger, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PermissionsMode == nil {
		return nil, errors.New("invalid value for required argument 'PermissionsMode'")
	}
	var resource Ledger
	err := ctx.RegisterResource("aws:qldb/ledger:Ledger", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLedger gets an existing Ledger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLedger(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LedgerState, opts ...pulumi.ResourceOption) (*Ledger, error) {
	var resource Ledger
	err := ctx.ReadResource("aws:qldb/ledger:Ledger", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ledger resources.
type ledgerState struct {
	Arn                *string           `pulumi:"arn"`
	DeletionProtection *bool             `pulumi:"deletionProtection"`
	KmsKey             *string           `pulumi:"kmsKey"`
	Name               *string           `pulumi:"name"`
	PermissionsMode    *string           `pulumi:"permissionsMode"`
	Tags               map[string]string `pulumi:"tags"`
	TagsAll            map[string]string `pulumi:"tagsAll"`
}

type LedgerState struct {
	Arn                pulumi.StringPtrInput
	DeletionProtection pulumi.BoolPtrInput
	KmsKey             pulumi.StringPtrInput
	Name               pulumi.StringPtrInput
	PermissionsMode    pulumi.StringPtrInput
	Tags               pulumi.StringMapInput
	TagsAll            pulumi.StringMapInput
}

func (LedgerState) ElementType() reflect.Type {
	return reflect.TypeOf((*ledgerState)(nil)).Elem()
}

type ledgerArgs struct {
	DeletionProtection *bool             `pulumi:"deletionProtection"`
	KmsKey             *string           `pulumi:"kmsKey"`
	Name               *string           `pulumi:"name"`
	PermissionsMode    string            `pulumi:"permissionsMode"`
	Tags               map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Ledger resource.
type LedgerArgs struct {
	DeletionProtection pulumi.BoolPtrInput
	KmsKey             pulumi.StringPtrInput
	Name               pulumi.StringPtrInput
	PermissionsMode    pulumi.StringInput
	Tags               pulumi.StringMapInput
}

func (LedgerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ledgerArgs)(nil)).Elem()
}

type LedgerInput interface {
	pulumi.Input

	ToLedgerOutput() LedgerOutput
	ToLedgerOutputWithContext(ctx context.Context) LedgerOutput
}

func (*Ledger) ElementType() reflect.Type {
	return reflect.TypeOf((**Ledger)(nil)).Elem()
}

func (i *Ledger) ToLedgerOutput() LedgerOutput {
	return i.ToLedgerOutputWithContext(context.Background())
}

func (i *Ledger) ToLedgerOutputWithContext(ctx context.Context) LedgerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LedgerOutput)
}

// LedgerArrayInput is an input type that accepts LedgerArray and LedgerArrayOutput values.
// You can construct a concrete instance of `LedgerArrayInput` via:
//
//	LedgerArray{ LedgerArgs{...} }
type LedgerArrayInput interface {
	pulumi.Input

	ToLedgerArrayOutput() LedgerArrayOutput
	ToLedgerArrayOutputWithContext(context.Context) LedgerArrayOutput
}

type LedgerArray []LedgerInput

func (LedgerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ledger)(nil)).Elem()
}

func (i LedgerArray) ToLedgerArrayOutput() LedgerArrayOutput {
	return i.ToLedgerArrayOutputWithContext(context.Background())
}

func (i LedgerArray) ToLedgerArrayOutputWithContext(ctx context.Context) LedgerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LedgerArrayOutput)
}

// LedgerMapInput is an input type that accepts LedgerMap and LedgerMapOutput values.
// You can construct a concrete instance of `LedgerMapInput` via:
//
//	LedgerMap{ "key": LedgerArgs{...} }
type LedgerMapInput interface {
	pulumi.Input

	ToLedgerMapOutput() LedgerMapOutput
	ToLedgerMapOutputWithContext(context.Context) LedgerMapOutput
}

type LedgerMap map[string]LedgerInput

func (LedgerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ledger)(nil)).Elem()
}

func (i LedgerMap) ToLedgerMapOutput() LedgerMapOutput {
	return i.ToLedgerMapOutputWithContext(context.Background())
}

func (i LedgerMap) ToLedgerMapOutputWithContext(ctx context.Context) LedgerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LedgerMapOutput)
}

type LedgerOutput struct{ *pulumi.OutputState }

func (LedgerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ledger)(nil)).Elem()
}

func (o LedgerOutput) ToLedgerOutput() LedgerOutput {
	return o
}

func (o LedgerOutput) ToLedgerOutputWithContext(ctx context.Context) LedgerOutput {
	return o
}

func (o LedgerOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Ledger) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o LedgerOutput) DeletionProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ledger) pulumi.BoolPtrOutput { return v.DeletionProtection }).(pulumi.BoolPtrOutput)
}

func (o LedgerOutput) KmsKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Ledger) pulumi.StringOutput { return v.KmsKey }).(pulumi.StringOutput)
}

func (o LedgerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Ledger) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o LedgerOutput) PermissionsMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Ledger) pulumi.StringOutput { return v.PermissionsMode }).(pulumi.StringOutput)
}

func (o LedgerOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Ledger) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o LedgerOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Ledger) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type LedgerArrayOutput struct{ *pulumi.OutputState }

func (LedgerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ledger)(nil)).Elem()
}

func (o LedgerArrayOutput) ToLedgerArrayOutput() LedgerArrayOutput {
	return o
}

func (o LedgerArrayOutput) ToLedgerArrayOutputWithContext(ctx context.Context) LedgerArrayOutput {
	return o
}

func (o LedgerArrayOutput) Index(i pulumi.IntInput) LedgerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ledger {
		return vs[0].([]*Ledger)[vs[1].(int)]
	}).(LedgerOutput)
}

type LedgerMapOutput struct{ *pulumi.OutputState }

func (LedgerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ledger)(nil)).Elem()
}

func (o LedgerMapOutput) ToLedgerMapOutput() LedgerMapOutput {
	return o
}

func (o LedgerMapOutput) ToLedgerMapOutputWithContext(ctx context.Context) LedgerMapOutput {
	return o
}

func (o LedgerMapOutput) MapIndex(k pulumi.StringInput) LedgerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ledger {
		return vs[0].(map[string]*Ledger)[vs[1].(string)]
	}).(LedgerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LedgerInput)(nil)).Elem(), &Ledger{})
	pulumi.RegisterInputType(reflect.TypeOf((*LedgerArrayInput)(nil)).Elem(), LedgerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LedgerMapInput)(nil)).Elem(), LedgerMap{})
	pulumi.RegisterOutputType(LedgerOutput{})
	pulumi.RegisterOutputType(LedgerArrayOutput{})
	pulumi.RegisterOutputType(LedgerMapOutput{})
}
