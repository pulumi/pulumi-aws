// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package appconfig

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an AppConfig Configuration Profile resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/appconfig"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := appconfig.NewConfigurationProfile(ctx, "example", &appconfig.ConfigurationProfileArgs{
// 			ApplicationId: pulumi.Any(aws_appconfig_application.Example.Id),
// 			Description:   pulumi.String("Example Configuration Profile"),
// 			LocationUri:   pulumi.String("hosted"),
// 			Validators: appconfig.ConfigurationProfileValidatorArray{
// 				&appconfig.ConfigurationProfileValidatorArgs{
// 					Content: pulumi.Any(aws_lambda_function.Example.Arn),
// 					Type:    pulumi.String("LAMBDA"),
// 				},
// 			},
// 			Tags: pulumi.StringMap{
// 				"Type": pulumi.String("AppConfig Configuration Profile"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// AppConfig Configuration Profiles can be imported by using the configuration profile ID and application ID separated by a colon (`:`), e.g.
//
// ```sh
//  $ pulumi import aws:appconfig/configurationProfile:ConfigurationProfile example 71abcde:11xxxxx
// ```
type ConfigurationProfile struct {
	pulumi.CustomResourceState

	// The application ID. Must be between 4 and 7 characters in length.
	ApplicationId pulumi.StringOutput `pulumi:"applicationId"`
	// The Amazon Resource Name (ARN) of the AppConfig Configuration Profile.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The configuration profile ID.
	ConfigurationProfileId pulumi.StringOutput `pulumi:"configurationProfileId"`
	// The description of the configuration profile. Can be at most 1024 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A URI to locate the configuration. You can specify the AWS AppConfig hosted configuration store, Systems Manager (SSM) document, an SSM Parameter Store parameter, or an Amazon S3 object. For the hosted configuration store, specify `hosted`. For an SSM document, specify either the document name in the format `ssm-document://<Document_name>` or the Amazon Resource Name (ARN). For a parameter, specify either the parameter name in the format `ssm-parameter://<Parameter_name>` or the ARN. For an Amazon S3 object, specify the URI in the following format: `s3://<bucket>/<objectKey>`.
	LocationUri pulumi.StringOutput `pulumi:"locationUri"`
	// The name for the configuration profile. Must be between 1 and 64 characters in length.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ARN of an IAM role with permission to access the configuration at the specified `locationUri`. A retrieval role ARN is not required for configurations stored in the AWS AppConfig `hosted` configuration store. It is required for all other sources that store your configuration.
	RetrievalRoleArn pulumi.StringPtrOutput `pulumi:"retrievalRoleArn"`
	// A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// A set of methods for validating the configuration. Maximum of 2. See Validator below for more details.
	Validators ConfigurationProfileValidatorArrayOutput `pulumi:"validators"`
}

// NewConfigurationProfile registers a new resource with the given unique name, arguments, and options.
func NewConfigurationProfile(ctx *pulumi.Context,
	name string, args *ConfigurationProfileArgs, opts ...pulumi.ResourceOption) (*ConfigurationProfile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	if args.LocationUri == nil {
		return nil, errors.New("invalid value for required argument 'LocationUri'")
	}
	var resource ConfigurationProfile
	err := ctx.RegisterResource("aws:appconfig/configurationProfile:ConfigurationProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigurationProfile gets an existing ConfigurationProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigurationProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigurationProfileState, opts ...pulumi.ResourceOption) (*ConfigurationProfile, error) {
	var resource ConfigurationProfile
	err := ctx.ReadResource("aws:appconfig/configurationProfile:ConfigurationProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigurationProfile resources.
type configurationProfileState struct {
	// The application ID. Must be between 4 and 7 characters in length.
	ApplicationId *string `pulumi:"applicationId"`
	// The Amazon Resource Name (ARN) of the AppConfig Configuration Profile.
	Arn *string `pulumi:"arn"`
	// The configuration profile ID.
	ConfigurationProfileId *string `pulumi:"configurationProfileId"`
	// The description of the configuration profile. Can be at most 1024 characters.
	Description *string `pulumi:"description"`
	// A URI to locate the configuration. You can specify the AWS AppConfig hosted configuration store, Systems Manager (SSM) document, an SSM Parameter Store parameter, or an Amazon S3 object. For the hosted configuration store, specify `hosted`. For an SSM document, specify either the document name in the format `ssm-document://<Document_name>` or the Amazon Resource Name (ARN). For a parameter, specify either the parameter name in the format `ssm-parameter://<Parameter_name>` or the ARN. For an Amazon S3 object, specify the URI in the following format: `s3://<bucket>/<objectKey>`.
	LocationUri *string `pulumi:"locationUri"`
	// The name for the configuration profile. Must be between 1 and 64 characters in length.
	Name *string `pulumi:"name"`
	// The ARN of an IAM role with permission to access the configuration at the specified `locationUri`. A retrieval role ARN is not required for configurations stored in the AWS AppConfig `hosted` configuration store. It is required for all other sources that store your configuration.
	RetrievalRoleArn *string `pulumi:"retrievalRoleArn"`
	// A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).
	TagsAll map[string]string `pulumi:"tagsAll"`
	// A set of methods for validating the configuration. Maximum of 2. See Validator below for more details.
	Validators []ConfigurationProfileValidator `pulumi:"validators"`
}

type ConfigurationProfileState struct {
	// The application ID. Must be between 4 and 7 characters in length.
	ApplicationId pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) of the AppConfig Configuration Profile.
	Arn pulumi.StringPtrInput
	// The configuration profile ID.
	ConfigurationProfileId pulumi.StringPtrInput
	// The description of the configuration profile. Can be at most 1024 characters.
	Description pulumi.StringPtrInput
	// A URI to locate the configuration. You can specify the AWS AppConfig hosted configuration store, Systems Manager (SSM) document, an SSM Parameter Store parameter, or an Amazon S3 object. For the hosted configuration store, specify `hosted`. For an SSM document, specify either the document name in the format `ssm-document://<Document_name>` or the Amazon Resource Name (ARN). For a parameter, specify either the parameter name in the format `ssm-parameter://<Parameter_name>` or the ARN. For an Amazon S3 object, specify the URI in the following format: `s3://<bucket>/<objectKey>`.
	LocationUri pulumi.StringPtrInput
	// The name for the configuration profile. Must be between 1 and 64 characters in length.
	Name pulumi.StringPtrInput
	// The ARN of an IAM role with permission to access the configuration at the specified `locationUri`. A retrieval role ARN is not required for configurations stored in the AWS AppConfig `hosted` configuration store. It is required for all other sources that store your configuration.
	RetrievalRoleArn pulumi.StringPtrInput
	// A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).
	TagsAll pulumi.StringMapInput
	// A set of methods for validating the configuration. Maximum of 2. See Validator below for more details.
	Validators ConfigurationProfileValidatorArrayInput
}

func (ConfigurationProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationProfileState)(nil)).Elem()
}

type configurationProfileArgs struct {
	// The application ID. Must be between 4 and 7 characters in length.
	ApplicationId string `pulumi:"applicationId"`
	// The description of the configuration profile. Can be at most 1024 characters.
	Description *string `pulumi:"description"`
	// A URI to locate the configuration. You can specify the AWS AppConfig hosted configuration store, Systems Manager (SSM) document, an SSM Parameter Store parameter, or an Amazon S3 object. For the hosted configuration store, specify `hosted`. For an SSM document, specify either the document name in the format `ssm-document://<Document_name>` or the Amazon Resource Name (ARN). For a parameter, specify either the parameter name in the format `ssm-parameter://<Parameter_name>` or the ARN. For an Amazon S3 object, specify the URI in the following format: `s3://<bucket>/<objectKey>`.
	LocationUri string `pulumi:"locationUri"`
	// The name for the configuration profile. Must be between 1 and 64 characters in length.
	Name *string `pulumi:"name"`
	// The ARN of an IAM role with permission to access the configuration at the specified `locationUri`. A retrieval role ARN is not required for configurations stored in the AWS AppConfig `hosted` configuration store. It is required for all other sources that store your configuration.
	RetrievalRoleArn *string `pulumi:"retrievalRoleArn"`
	// A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A set of methods for validating the configuration. Maximum of 2. See Validator below for more details.
	Validators []ConfigurationProfileValidator `pulumi:"validators"`
}

// The set of arguments for constructing a ConfigurationProfile resource.
type ConfigurationProfileArgs struct {
	// The application ID. Must be between 4 and 7 characters in length.
	ApplicationId pulumi.StringInput
	// The description of the configuration profile. Can be at most 1024 characters.
	Description pulumi.StringPtrInput
	// A URI to locate the configuration. You can specify the AWS AppConfig hosted configuration store, Systems Manager (SSM) document, an SSM Parameter Store parameter, or an Amazon S3 object. For the hosted configuration store, specify `hosted`. For an SSM document, specify either the document name in the format `ssm-document://<Document_name>` or the Amazon Resource Name (ARN). For a parameter, specify either the parameter name in the format `ssm-parameter://<Parameter_name>` or the ARN. For an Amazon S3 object, specify the URI in the following format: `s3://<bucket>/<objectKey>`.
	LocationUri pulumi.StringInput
	// The name for the configuration profile. Must be between 1 and 64 characters in length.
	Name pulumi.StringPtrInput
	// The ARN of an IAM role with permission to access the configuration at the specified `locationUri`. A retrieval role ARN is not required for configurations stored in the AWS AppConfig `hosted` configuration store. It is required for all other sources that store your configuration.
	RetrievalRoleArn pulumi.StringPtrInput
	// A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A set of methods for validating the configuration. Maximum of 2. See Validator below for more details.
	Validators ConfigurationProfileValidatorArrayInput
}

func (ConfigurationProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationProfileArgs)(nil)).Elem()
}

type ConfigurationProfileInput interface {
	pulumi.Input

	ToConfigurationProfileOutput() ConfigurationProfileOutput
	ToConfigurationProfileOutputWithContext(ctx context.Context) ConfigurationProfileOutput
}

func (*ConfigurationProfile) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationProfile)(nil))
}

func (i *ConfigurationProfile) ToConfigurationProfileOutput() ConfigurationProfileOutput {
	return i.ToConfigurationProfileOutputWithContext(context.Background())
}

func (i *ConfigurationProfile) ToConfigurationProfileOutputWithContext(ctx context.Context) ConfigurationProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationProfileOutput)
}

func (i *ConfigurationProfile) ToConfigurationProfilePtrOutput() ConfigurationProfilePtrOutput {
	return i.ToConfigurationProfilePtrOutputWithContext(context.Background())
}

func (i *ConfigurationProfile) ToConfigurationProfilePtrOutputWithContext(ctx context.Context) ConfigurationProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationProfilePtrOutput)
}

type ConfigurationProfilePtrInput interface {
	pulumi.Input

	ToConfigurationProfilePtrOutput() ConfigurationProfilePtrOutput
	ToConfigurationProfilePtrOutputWithContext(ctx context.Context) ConfigurationProfilePtrOutput
}

type configurationProfilePtrType ConfigurationProfileArgs

func (*configurationProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationProfile)(nil))
}

func (i *configurationProfilePtrType) ToConfigurationProfilePtrOutput() ConfigurationProfilePtrOutput {
	return i.ToConfigurationProfilePtrOutputWithContext(context.Background())
}

func (i *configurationProfilePtrType) ToConfigurationProfilePtrOutputWithContext(ctx context.Context) ConfigurationProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationProfilePtrOutput)
}

// ConfigurationProfileArrayInput is an input type that accepts ConfigurationProfileArray and ConfigurationProfileArrayOutput values.
// You can construct a concrete instance of `ConfigurationProfileArrayInput` via:
//
//          ConfigurationProfileArray{ ConfigurationProfileArgs{...} }
type ConfigurationProfileArrayInput interface {
	pulumi.Input

	ToConfigurationProfileArrayOutput() ConfigurationProfileArrayOutput
	ToConfigurationProfileArrayOutputWithContext(context.Context) ConfigurationProfileArrayOutput
}

type ConfigurationProfileArray []ConfigurationProfileInput

func (ConfigurationProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigurationProfile)(nil)).Elem()
}

func (i ConfigurationProfileArray) ToConfigurationProfileArrayOutput() ConfigurationProfileArrayOutput {
	return i.ToConfigurationProfileArrayOutputWithContext(context.Background())
}

func (i ConfigurationProfileArray) ToConfigurationProfileArrayOutputWithContext(ctx context.Context) ConfigurationProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationProfileArrayOutput)
}

// ConfigurationProfileMapInput is an input type that accepts ConfigurationProfileMap and ConfigurationProfileMapOutput values.
// You can construct a concrete instance of `ConfigurationProfileMapInput` via:
//
//          ConfigurationProfileMap{ "key": ConfigurationProfileArgs{...} }
type ConfigurationProfileMapInput interface {
	pulumi.Input

	ToConfigurationProfileMapOutput() ConfigurationProfileMapOutput
	ToConfigurationProfileMapOutputWithContext(context.Context) ConfigurationProfileMapOutput
}

type ConfigurationProfileMap map[string]ConfigurationProfileInput

func (ConfigurationProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigurationProfile)(nil)).Elem()
}

func (i ConfigurationProfileMap) ToConfigurationProfileMapOutput() ConfigurationProfileMapOutput {
	return i.ToConfigurationProfileMapOutputWithContext(context.Background())
}

func (i ConfigurationProfileMap) ToConfigurationProfileMapOutputWithContext(ctx context.Context) ConfigurationProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationProfileMapOutput)
}

type ConfigurationProfileOutput struct{ *pulumi.OutputState }

func (ConfigurationProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationProfile)(nil))
}

func (o ConfigurationProfileOutput) ToConfigurationProfileOutput() ConfigurationProfileOutput {
	return o
}

func (o ConfigurationProfileOutput) ToConfigurationProfileOutputWithContext(ctx context.Context) ConfigurationProfileOutput {
	return o
}

func (o ConfigurationProfileOutput) ToConfigurationProfilePtrOutput() ConfigurationProfilePtrOutput {
	return o.ToConfigurationProfilePtrOutputWithContext(context.Background())
}

func (o ConfigurationProfileOutput) ToConfigurationProfilePtrOutputWithContext(ctx context.Context) ConfigurationProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigurationProfile) *ConfigurationProfile {
		return &v
	}).(ConfigurationProfilePtrOutput)
}

type ConfigurationProfilePtrOutput struct{ *pulumi.OutputState }

func (ConfigurationProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationProfile)(nil))
}

func (o ConfigurationProfilePtrOutput) ToConfigurationProfilePtrOutput() ConfigurationProfilePtrOutput {
	return o
}

func (o ConfigurationProfilePtrOutput) ToConfigurationProfilePtrOutputWithContext(ctx context.Context) ConfigurationProfilePtrOutput {
	return o
}

func (o ConfigurationProfilePtrOutput) Elem() ConfigurationProfileOutput {
	return o.ApplyT(func(v *ConfigurationProfile) ConfigurationProfile {
		if v != nil {
			return *v
		}
		var ret ConfigurationProfile
		return ret
	}).(ConfigurationProfileOutput)
}

type ConfigurationProfileArrayOutput struct{ *pulumi.OutputState }

func (ConfigurationProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigurationProfile)(nil))
}

func (o ConfigurationProfileArrayOutput) ToConfigurationProfileArrayOutput() ConfigurationProfileArrayOutput {
	return o
}

func (o ConfigurationProfileArrayOutput) ToConfigurationProfileArrayOutputWithContext(ctx context.Context) ConfigurationProfileArrayOutput {
	return o
}

func (o ConfigurationProfileArrayOutput) Index(i pulumi.IntInput) ConfigurationProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfigurationProfile {
		return vs[0].([]ConfigurationProfile)[vs[1].(int)]
	}).(ConfigurationProfileOutput)
}

type ConfigurationProfileMapOutput struct{ *pulumi.OutputState }

func (ConfigurationProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ConfigurationProfile)(nil))
}

func (o ConfigurationProfileMapOutput) ToConfigurationProfileMapOutput() ConfigurationProfileMapOutput {
	return o
}

func (o ConfigurationProfileMapOutput) ToConfigurationProfileMapOutputWithContext(ctx context.Context) ConfigurationProfileMapOutput {
	return o
}

func (o ConfigurationProfileMapOutput) MapIndex(k pulumi.StringInput) ConfigurationProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ConfigurationProfile {
		return vs[0].(map[string]ConfigurationProfile)[vs[1].(string)]
	}).(ConfigurationProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationProfileInput)(nil)).Elem(), &ConfigurationProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationProfilePtrInput)(nil)).Elem(), &ConfigurationProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationProfileArrayInput)(nil)).Elem(), ConfigurationProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationProfileMapInput)(nil)).Elem(), ConfigurationProfileMap{})
	pulumi.RegisterOutputType(ConfigurationProfileOutput{})
	pulumi.RegisterOutputType(ConfigurationProfilePtrOutput{})
	pulumi.RegisterOutputType(ConfigurationProfileArrayOutput{})
	pulumi.RegisterOutputType(ConfigurationProfileMapOutput{})
}
