// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appconfig

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EventIntegration struct {
	pulumi.CustomResourceState

	Arn            pulumi.StringOutput               `pulumi:"arn"`
	Description    pulumi.StringPtrOutput            `pulumi:"description"`
	EventFilter    EventIntegrationEventFilterOutput `pulumi:"eventFilter"`
	EventbridgeBus pulumi.StringOutput               `pulumi:"eventbridgeBus"`
	Name           pulumi.StringOutput               `pulumi:"name"`
	Tags           pulumi.StringMapOutput            `pulumi:"tags"`
	TagsAll        pulumi.StringMapOutput            `pulumi:"tagsAll"`
}

// NewEventIntegration registers a new resource with the given unique name, arguments, and options.
func NewEventIntegration(ctx *pulumi.Context,
	name string, args *EventIntegrationArgs, opts ...pulumi.ResourceOption) (*EventIntegration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EventFilter == nil {
		return nil, errors.New("invalid value for required argument 'EventFilter'")
	}
	if args.EventbridgeBus == nil {
		return nil, errors.New("invalid value for required argument 'EventbridgeBus'")
	}
	var resource EventIntegration
	err := ctx.RegisterResource("aws:appconfig/eventIntegration:EventIntegration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventIntegration gets an existing EventIntegration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventIntegrationState, opts ...pulumi.ResourceOption) (*EventIntegration, error) {
	var resource EventIntegration
	err := ctx.ReadResource("aws:appconfig/eventIntegration:EventIntegration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventIntegration resources.
type eventIntegrationState struct {
	Arn            *string                      `pulumi:"arn"`
	Description    *string                      `pulumi:"description"`
	EventFilter    *EventIntegrationEventFilter `pulumi:"eventFilter"`
	EventbridgeBus *string                      `pulumi:"eventbridgeBus"`
	Name           *string                      `pulumi:"name"`
	Tags           map[string]string            `pulumi:"tags"`
	TagsAll        map[string]string            `pulumi:"tagsAll"`
}

type EventIntegrationState struct {
	Arn            pulumi.StringPtrInput
	Description    pulumi.StringPtrInput
	EventFilter    EventIntegrationEventFilterPtrInput
	EventbridgeBus pulumi.StringPtrInput
	Name           pulumi.StringPtrInput
	Tags           pulumi.StringMapInput
	TagsAll        pulumi.StringMapInput
}

func (EventIntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventIntegrationState)(nil)).Elem()
}

type eventIntegrationArgs struct {
	Description    *string                     `pulumi:"description"`
	EventFilter    EventIntegrationEventFilter `pulumi:"eventFilter"`
	EventbridgeBus string                      `pulumi:"eventbridgeBus"`
	Name           *string                     `pulumi:"name"`
	Tags           map[string]string           `pulumi:"tags"`
}

// The set of arguments for constructing a EventIntegration resource.
type EventIntegrationArgs struct {
	Description    pulumi.StringPtrInput
	EventFilter    EventIntegrationEventFilterInput
	EventbridgeBus pulumi.StringInput
	Name           pulumi.StringPtrInput
	Tags           pulumi.StringMapInput
}

func (EventIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventIntegrationArgs)(nil)).Elem()
}

type EventIntegrationInput interface {
	pulumi.Input

	ToEventIntegrationOutput() EventIntegrationOutput
	ToEventIntegrationOutputWithContext(ctx context.Context) EventIntegrationOutput
}

func (*EventIntegration) ElementType() reflect.Type {
	return reflect.TypeOf((**EventIntegration)(nil)).Elem()
}

func (i *EventIntegration) ToEventIntegrationOutput() EventIntegrationOutput {
	return i.ToEventIntegrationOutputWithContext(context.Background())
}

func (i *EventIntegration) ToEventIntegrationOutputWithContext(ctx context.Context) EventIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventIntegrationOutput)
}

// EventIntegrationArrayInput is an input type that accepts EventIntegrationArray and EventIntegrationArrayOutput values.
// You can construct a concrete instance of `EventIntegrationArrayInput` via:
//
//	EventIntegrationArray{ EventIntegrationArgs{...} }
type EventIntegrationArrayInput interface {
	pulumi.Input

	ToEventIntegrationArrayOutput() EventIntegrationArrayOutput
	ToEventIntegrationArrayOutputWithContext(context.Context) EventIntegrationArrayOutput
}

type EventIntegrationArray []EventIntegrationInput

func (EventIntegrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventIntegration)(nil)).Elem()
}

func (i EventIntegrationArray) ToEventIntegrationArrayOutput() EventIntegrationArrayOutput {
	return i.ToEventIntegrationArrayOutputWithContext(context.Background())
}

func (i EventIntegrationArray) ToEventIntegrationArrayOutputWithContext(ctx context.Context) EventIntegrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventIntegrationArrayOutput)
}

// EventIntegrationMapInput is an input type that accepts EventIntegrationMap and EventIntegrationMapOutput values.
// You can construct a concrete instance of `EventIntegrationMapInput` via:
//
//	EventIntegrationMap{ "key": EventIntegrationArgs{...} }
type EventIntegrationMapInput interface {
	pulumi.Input

	ToEventIntegrationMapOutput() EventIntegrationMapOutput
	ToEventIntegrationMapOutputWithContext(context.Context) EventIntegrationMapOutput
}

type EventIntegrationMap map[string]EventIntegrationInput

func (EventIntegrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventIntegration)(nil)).Elem()
}

func (i EventIntegrationMap) ToEventIntegrationMapOutput() EventIntegrationMapOutput {
	return i.ToEventIntegrationMapOutputWithContext(context.Background())
}

func (i EventIntegrationMap) ToEventIntegrationMapOutputWithContext(ctx context.Context) EventIntegrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventIntegrationMapOutput)
}

type EventIntegrationOutput struct{ *pulumi.OutputState }

func (EventIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventIntegration)(nil)).Elem()
}

func (o EventIntegrationOutput) ToEventIntegrationOutput() EventIntegrationOutput {
	return o
}

func (o EventIntegrationOutput) ToEventIntegrationOutputWithContext(ctx context.Context) EventIntegrationOutput {
	return o
}

func (o EventIntegrationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *EventIntegration) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o EventIntegrationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventIntegration) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o EventIntegrationOutput) EventFilter() EventIntegrationEventFilterOutput {
	return o.ApplyT(func(v *EventIntegration) EventIntegrationEventFilterOutput { return v.EventFilter }).(EventIntegrationEventFilterOutput)
}

func (o EventIntegrationOutput) EventbridgeBus() pulumi.StringOutput {
	return o.ApplyT(func(v *EventIntegration) pulumi.StringOutput { return v.EventbridgeBus }).(pulumi.StringOutput)
}

func (o EventIntegrationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EventIntegration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o EventIntegrationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EventIntegration) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o EventIntegrationOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EventIntegration) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type EventIntegrationArrayOutput struct{ *pulumi.OutputState }

func (EventIntegrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventIntegration)(nil)).Elem()
}

func (o EventIntegrationArrayOutput) ToEventIntegrationArrayOutput() EventIntegrationArrayOutput {
	return o
}

func (o EventIntegrationArrayOutput) ToEventIntegrationArrayOutputWithContext(ctx context.Context) EventIntegrationArrayOutput {
	return o
}

func (o EventIntegrationArrayOutput) Index(i pulumi.IntInput) EventIntegrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EventIntegration {
		return vs[0].([]*EventIntegration)[vs[1].(int)]
	}).(EventIntegrationOutput)
}

type EventIntegrationMapOutput struct{ *pulumi.OutputState }

func (EventIntegrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventIntegration)(nil)).Elem()
}

func (o EventIntegrationMapOutput) ToEventIntegrationMapOutput() EventIntegrationMapOutput {
	return o
}

func (o EventIntegrationMapOutput) ToEventIntegrationMapOutputWithContext(ctx context.Context) EventIntegrationMapOutput {
	return o
}

func (o EventIntegrationMapOutput) MapIndex(k pulumi.StringInput) EventIntegrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EventIntegration {
		return vs[0].(map[string]*EventIntegration)[vs[1].(string)]
	}).(EventIntegrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventIntegrationInput)(nil)).Elem(), &EventIntegration{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventIntegrationArrayInput)(nil)).Elem(), EventIntegrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventIntegrationMapInput)(nil)).Elem(), EventIntegrationMap{})
	pulumi.RegisterOutputType(EventIntegrationOutput{})
	pulumi.RegisterOutputType(EventIntegrationArrayOutput{})
	pulumi.RegisterOutputType(EventIntegrationMapOutput{})
}
