// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appconfig

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ConfigurationProfileValidator struct {
	// Either the JSON Schema content or the ARN of an AWS Lambda function.
	Content *string `pulumi:"content"`
	// Type of validator. Valid values: `JSON_SCHEMA` and `LAMBDA`.
	Type string `pulumi:"type"`
}

// ConfigurationProfileValidatorInput is an input type that accepts ConfigurationProfileValidatorArgs and ConfigurationProfileValidatorOutput values.
// You can construct a concrete instance of `ConfigurationProfileValidatorInput` via:
//
//	ConfigurationProfileValidatorArgs{...}
type ConfigurationProfileValidatorInput interface {
	pulumi.Input

	ToConfigurationProfileValidatorOutput() ConfigurationProfileValidatorOutput
	ToConfigurationProfileValidatorOutputWithContext(context.Context) ConfigurationProfileValidatorOutput
}

type ConfigurationProfileValidatorArgs struct {
	// Either the JSON Schema content or the ARN of an AWS Lambda function.
	Content pulumi.StringPtrInput `pulumi:"content"`
	// Type of validator. Valid values: `JSON_SCHEMA` and `LAMBDA`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ConfigurationProfileValidatorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationProfileValidator)(nil)).Elem()
}

func (i ConfigurationProfileValidatorArgs) ToConfigurationProfileValidatorOutput() ConfigurationProfileValidatorOutput {
	return i.ToConfigurationProfileValidatorOutputWithContext(context.Background())
}

func (i ConfigurationProfileValidatorArgs) ToConfigurationProfileValidatorOutputWithContext(ctx context.Context) ConfigurationProfileValidatorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationProfileValidatorOutput)
}

// ConfigurationProfileValidatorArrayInput is an input type that accepts ConfigurationProfileValidatorArray and ConfigurationProfileValidatorArrayOutput values.
// You can construct a concrete instance of `ConfigurationProfileValidatorArrayInput` via:
//
//	ConfigurationProfileValidatorArray{ ConfigurationProfileValidatorArgs{...} }
type ConfigurationProfileValidatorArrayInput interface {
	pulumi.Input

	ToConfigurationProfileValidatorArrayOutput() ConfigurationProfileValidatorArrayOutput
	ToConfigurationProfileValidatorArrayOutputWithContext(context.Context) ConfigurationProfileValidatorArrayOutput
}

type ConfigurationProfileValidatorArray []ConfigurationProfileValidatorInput

func (ConfigurationProfileValidatorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigurationProfileValidator)(nil)).Elem()
}

func (i ConfigurationProfileValidatorArray) ToConfigurationProfileValidatorArrayOutput() ConfigurationProfileValidatorArrayOutput {
	return i.ToConfigurationProfileValidatorArrayOutputWithContext(context.Background())
}

func (i ConfigurationProfileValidatorArray) ToConfigurationProfileValidatorArrayOutputWithContext(ctx context.Context) ConfigurationProfileValidatorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationProfileValidatorArrayOutput)
}

type ConfigurationProfileValidatorOutput struct{ *pulumi.OutputState }

func (ConfigurationProfileValidatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationProfileValidator)(nil)).Elem()
}

func (o ConfigurationProfileValidatorOutput) ToConfigurationProfileValidatorOutput() ConfigurationProfileValidatorOutput {
	return o
}

func (o ConfigurationProfileValidatorOutput) ToConfigurationProfileValidatorOutputWithContext(ctx context.Context) ConfigurationProfileValidatorOutput {
	return o
}

// Either the JSON Schema content or the ARN of an AWS Lambda function.
func (o ConfigurationProfileValidatorOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigurationProfileValidator) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// Type of validator. Valid values: `JSON_SCHEMA` and `LAMBDA`.
func (o ConfigurationProfileValidatorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigurationProfileValidator) string { return v.Type }).(pulumi.StringOutput)
}

type ConfigurationProfileValidatorArrayOutput struct{ *pulumi.OutputState }

func (ConfigurationProfileValidatorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigurationProfileValidator)(nil)).Elem()
}

func (o ConfigurationProfileValidatorArrayOutput) ToConfigurationProfileValidatorArrayOutput() ConfigurationProfileValidatorArrayOutput {
	return o
}

func (o ConfigurationProfileValidatorArrayOutput) ToConfigurationProfileValidatorArrayOutputWithContext(ctx context.Context) ConfigurationProfileValidatorArrayOutput {
	return o
}

func (o ConfigurationProfileValidatorArrayOutput) Index(i pulumi.IntInput) ConfigurationProfileValidatorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfigurationProfileValidator {
		return vs[0].([]ConfigurationProfileValidator)[vs[1].(int)]
	}).(ConfigurationProfileValidatorOutput)
}

type EnvironmentMonitor struct {
	// ARN of the Amazon CloudWatch alarm.
	AlarmArn string `pulumi:"alarmArn"`
	// ARN of an IAM role for AWS AppConfig to monitor `alarmArn`.
	AlarmRoleArn *string `pulumi:"alarmRoleArn"`
}

// EnvironmentMonitorInput is an input type that accepts EnvironmentMonitorArgs and EnvironmentMonitorOutput values.
// You can construct a concrete instance of `EnvironmentMonitorInput` via:
//
//	EnvironmentMonitorArgs{...}
type EnvironmentMonitorInput interface {
	pulumi.Input

	ToEnvironmentMonitorOutput() EnvironmentMonitorOutput
	ToEnvironmentMonitorOutputWithContext(context.Context) EnvironmentMonitorOutput
}

type EnvironmentMonitorArgs struct {
	// ARN of the Amazon CloudWatch alarm.
	AlarmArn pulumi.StringInput `pulumi:"alarmArn"`
	// ARN of an IAM role for AWS AppConfig to monitor `alarmArn`.
	AlarmRoleArn pulumi.StringPtrInput `pulumi:"alarmRoleArn"`
}

func (EnvironmentMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentMonitor)(nil)).Elem()
}

func (i EnvironmentMonitorArgs) ToEnvironmentMonitorOutput() EnvironmentMonitorOutput {
	return i.ToEnvironmentMonitorOutputWithContext(context.Background())
}

func (i EnvironmentMonitorArgs) ToEnvironmentMonitorOutputWithContext(ctx context.Context) EnvironmentMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentMonitorOutput)
}

// EnvironmentMonitorArrayInput is an input type that accepts EnvironmentMonitorArray and EnvironmentMonitorArrayOutput values.
// You can construct a concrete instance of `EnvironmentMonitorArrayInput` via:
//
//	EnvironmentMonitorArray{ EnvironmentMonitorArgs{...} }
type EnvironmentMonitorArrayInput interface {
	pulumi.Input

	ToEnvironmentMonitorArrayOutput() EnvironmentMonitorArrayOutput
	ToEnvironmentMonitorArrayOutputWithContext(context.Context) EnvironmentMonitorArrayOutput
}

type EnvironmentMonitorArray []EnvironmentMonitorInput

func (EnvironmentMonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentMonitor)(nil)).Elem()
}

func (i EnvironmentMonitorArray) ToEnvironmentMonitorArrayOutput() EnvironmentMonitorArrayOutput {
	return i.ToEnvironmentMonitorArrayOutputWithContext(context.Background())
}

func (i EnvironmentMonitorArray) ToEnvironmentMonitorArrayOutputWithContext(ctx context.Context) EnvironmentMonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentMonitorArrayOutput)
}

type EnvironmentMonitorOutput struct{ *pulumi.OutputState }

func (EnvironmentMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentMonitor)(nil)).Elem()
}

func (o EnvironmentMonitorOutput) ToEnvironmentMonitorOutput() EnvironmentMonitorOutput {
	return o
}

func (o EnvironmentMonitorOutput) ToEnvironmentMonitorOutputWithContext(ctx context.Context) EnvironmentMonitorOutput {
	return o
}

// ARN of the Amazon CloudWatch alarm.
func (o EnvironmentMonitorOutput) AlarmArn() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentMonitor) string { return v.AlarmArn }).(pulumi.StringOutput)
}

// ARN of an IAM role for AWS AppConfig to monitor `alarmArn`.
func (o EnvironmentMonitorOutput) AlarmRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentMonitor) *string { return v.AlarmRoleArn }).(pulumi.StringPtrOutput)
}

type EnvironmentMonitorArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentMonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentMonitor)(nil)).Elem()
}

func (o EnvironmentMonitorArrayOutput) ToEnvironmentMonitorArrayOutput() EnvironmentMonitorArrayOutput {
	return o
}

func (o EnvironmentMonitorArrayOutput) ToEnvironmentMonitorArrayOutputWithContext(ctx context.Context) EnvironmentMonitorArrayOutput {
	return o
}

func (o EnvironmentMonitorArrayOutput) Index(i pulumi.IntInput) EnvironmentMonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvironmentMonitor {
		return vs[0].([]EnvironmentMonitor)[vs[1].(int)]
	}).(EnvironmentMonitorOutput)
}

type EventIntegrationEventFilter struct {
	// Source of the events.
	Source string `pulumi:"source"`
}

// EventIntegrationEventFilterInput is an input type that accepts EventIntegrationEventFilterArgs and EventIntegrationEventFilterOutput values.
// You can construct a concrete instance of `EventIntegrationEventFilterInput` via:
//
//	EventIntegrationEventFilterArgs{...}
type EventIntegrationEventFilterInput interface {
	pulumi.Input

	ToEventIntegrationEventFilterOutput() EventIntegrationEventFilterOutput
	ToEventIntegrationEventFilterOutputWithContext(context.Context) EventIntegrationEventFilterOutput
}

type EventIntegrationEventFilterArgs struct {
	// Source of the events.
	Source pulumi.StringInput `pulumi:"source"`
}

func (EventIntegrationEventFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventIntegrationEventFilter)(nil)).Elem()
}

func (i EventIntegrationEventFilterArgs) ToEventIntegrationEventFilterOutput() EventIntegrationEventFilterOutput {
	return i.ToEventIntegrationEventFilterOutputWithContext(context.Background())
}

func (i EventIntegrationEventFilterArgs) ToEventIntegrationEventFilterOutputWithContext(ctx context.Context) EventIntegrationEventFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventIntegrationEventFilterOutput)
}

func (i EventIntegrationEventFilterArgs) ToEventIntegrationEventFilterPtrOutput() EventIntegrationEventFilterPtrOutput {
	return i.ToEventIntegrationEventFilterPtrOutputWithContext(context.Background())
}

func (i EventIntegrationEventFilterArgs) ToEventIntegrationEventFilterPtrOutputWithContext(ctx context.Context) EventIntegrationEventFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventIntegrationEventFilterOutput).ToEventIntegrationEventFilterPtrOutputWithContext(ctx)
}

// EventIntegrationEventFilterPtrInput is an input type that accepts EventIntegrationEventFilterArgs, EventIntegrationEventFilterPtr and EventIntegrationEventFilterPtrOutput values.
// You can construct a concrete instance of `EventIntegrationEventFilterPtrInput` via:
//
//	        EventIntegrationEventFilterArgs{...}
//
//	or:
//
//	        nil
type EventIntegrationEventFilterPtrInput interface {
	pulumi.Input

	ToEventIntegrationEventFilterPtrOutput() EventIntegrationEventFilterPtrOutput
	ToEventIntegrationEventFilterPtrOutputWithContext(context.Context) EventIntegrationEventFilterPtrOutput
}

type eventIntegrationEventFilterPtrType EventIntegrationEventFilterArgs

func EventIntegrationEventFilterPtr(v *EventIntegrationEventFilterArgs) EventIntegrationEventFilterPtrInput {
	return (*eventIntegrationEventFilterPtrType)(v)
}

func (*eventIntegrationEventFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventIntegrationEventFilter)(nil)).Elem()
}

func (i *eventIntegrationEventFilterPtrType) ToEventIntegrationEventFilterPtrOutput() EventIntegrationEventFilterPtrOutput {
	return i.ToEventIntegrationEventFilterPtrOutputWithContext(context.Background())
}

func (i *eventIntegrationEventFilterPtrType) ToEventIntegrationEventFilterPtrOutputWithContext(ctx context.Context) EventIntegrationEventFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventIntegrationEventFilterPtrOutput)
}

type EventIntegrationEventFilterOutput struct{ *pulumi.OutputState }

func (EventIntegrationEventFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventIntegrationEventFilter)(nil)).Elem()
}

func (o EventIntegrationEventFilterOutput) ToEventIntegrationEventFilterOutput() EventIntegrationEventFilterOutput {
	return o
}

func (o EventIntegrationEventFilterOutput) ToEventIntegrationEventFilterOutputWithContext(ctx context.Context) EventIntegrationEventFilterOutput {
	return o
}

func (o EventIntegrationEventFilterOutput) ToEventIntegrationEventFilterPtrOutput() EventIntegrationEventFilterPtrOutput {
	return o.ToEventIntegrationEventFilterPtrOutputWithContext(context.Background())
}

func (o EventIntegrationEventFilterOutput) ToEventIntegrationEventFilterPtrOutputWithContext(ctx context.Context) EventIntegrationEventFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventIntegrationEventFilter) *EventIntegrationEventFilter {
		return &v
	}).(EventIntegrationEventFilterPtrOutput)
}

// Source of the events.
func (o EventIntegrationEventFilterOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v EventIntegrationEventFilter) string { return v.Source }).(pulumi.StringOutput)
}

type EventIntegrationEventFilterPtrOutput struct{ *pulumi.OutputState }

func (EventIntegrationEventFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventIntegrationEventFilter)(nil)).Elem()
}

func (o EventIntegrationEventFilterPtrOutput) ToEventIntegrationEventFilterPtrOutput() EventIntegrationEventFilterPtrOutput {
	return o
}

func (o EventIntegrationEventFilterPtrOutput) ToEventIntegrationEventFilterPtrOutputWithContext(ctx context.Context) EventIntegrationEventFilterPtrOutput {
	return o
}

func (o EventIntegrationEventFilterPtrOutput) Elem() EventIntegrationEventFilterOutput {
	return o.ApplyT(func(v *EventIntegrationEventFilter) EventIntegrationEventFilter {
		if v != nil {
			return *v
		}
		var ret EventIntegrationEventFilter
		return ret
	}).(EventIntegrationEventFilterOutput)
}

// Source of the events.
func (o EventIntegrationEventFilterPtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventIntegrationEventFilter) *string {
		if v == nil {
			return nil
		}
		return &v.Source
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationProfileValidatorInput)(nil)).Elem(), ConfigurationProfileValidatorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationProfileValidatorArrayInput)(nil)).Elem(), ConfigurationProfileValidatorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentMonitorInput)(nil)).Elem(), EnvironmentMonitorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentMonitorArrayInput)(nil)).Elem(), EnvironmentMonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventIntegrationEventFilterInput)(nil)).Elem(), EventIntegrationEventFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventIntegrationEventFilterPtrInput)(nil)).Elem(), EventIntegrationEventFilterArgs{})
	pulumi.RegisterOutputType(ConfigurationProfileValidatorOutput{})
	pulumi.RegisterOutputType(ConfigurationProfileValidatorArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentMonitorOutput{})
	pulumi.RegisterOutputType(EnvironmentMonitorArrayOutput{})
	pulumi.RegisterOutputType(EventIntegrationEventFilterOutput{})
	pulumi.RegisterOutputType(EventIntegrationEventFilterPtrOutput{})
}
