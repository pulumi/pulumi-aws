// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package imagebuilder

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS EC2 Image Builder Workflow.
//
// ## Example Usage
//
// ### Basic Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/imagebuilder"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := imagebuilder.NewWorkflow(ctx, "example", &imagebuilder.WorkflowArgs{
//				Name:    pulumi.String("example"),
//				Version: pulumi.String("1.0.0"),
//				Type:    pulumi.String("TEST"),
//				Data: pulumi.String(`name: example
//
// description: Workflow to test an image
// schemaVersion: 1.0
//
// parameters:
//   - name: waitForActionAtEnd
//     type: boolean
//
// steps:
//
//   - name: LaunchTestInstance
//     action: LaunchInstance
//     onFailure: Abort
//     inputs:
//     waitFor: "ssmAgent"
//
//   - name: TerminateTestInstance
//     action: TerminateInstance
//     onFailure: Continue
//     inputs:
//     instanceId.$: "$.stepOutputs.LaunchTestInstance.instanceId"
//
//   - name: WaitForActionAtEnd
//     action: WaitForAction
//     if:
//     booleanEquals: true
//     value: "$.parameters.waitForActionAtEnd"
//
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Using `pulumi import`, import EC2 Image Builder Workflow using the `example_id_arg`. For example:
//
// ```sh
// $ pulumi import aws:imagebuilder/workflow:Workflow example arn:aws:imagebuilder:us-east-1:aws:workflow/test/example/1.0.1/1
// ```
// Certain resource arguments, such as `uri`, cannot be read via the API and imported into Terraform. Terraform will display a difference for these arguments the first run after import if declared in the Terraform configuration for an imported resource.
type Workflow struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the workflow.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Change description of the workflow.
	ChangeDescription pulumi.StringPtrOutput `pulumi:"changeDescription"`
	// Inline YAML string with data of the workflow. Exactly one of `data` and `uri` can be specified.
	Data pulumi.StringOutput `pulumi:"data"`
	// Date the workflow was created.
	DateCreated pulumi.StringOutput `pulumi:"dateCreated"`
	// Description of the workflow.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Amazon Resource Name (ARN) of the Key Management Service (KMS) Key used to encrypt the workflow.
	KmsKeyId pulumi.StringPtrOutput `pulumi:"kmsKeyId"`
	// Name of the workflow.
	Name pulumi.StringOutput `pulumi:"name"`
	// Owner of the workflow.
	Owner pulumi.StringOutput `pulumi:"owner"`
	// Key-value map of resource tags for the workflow. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// Type of the workflow. Valid values: `BUILD`, `TEST`, `DISTRIBUTION`.
	Type pulumi.StringOutput `pulumi:"type"`
	// S3 URI with data of the workflow. Exactly one of `data` and `uri` can be specified.
	Uri pulumi.StringPtrOutput `pulumi:"uri"`
	// Version of the workflow.
	//
	// The following arguments are optional:
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewWorkflow registers a new resource with the given unique name, arguments, and options.
func NewWorkflow(ctx *pulumi.Context,
	name string, args *WorkflowArgs, opts ...pulumi.ResourceOption) (*Workflow, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Workflow
	err := ctx.RegisterResource("aws:imagebuilder/workflow:Workflow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflow gets an existing Workflow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowState, opts ...pulumi.ResourceOption) (*Workflow, error) {
	var resource Workflow
	err := ctx.ReadResource("aws:imagebuilder/workflow:Workflow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Workflow resources.
type workflowState struct {
	// Amazon Resource Name (ARN) of the workflow.
	Arn *string `pulumi:"arn"`
	// Change description of the workflow.
	ChangeDescription *string `pulumi:"changeDescription"`
	// Inline YAML string with data of the workflow. Exactly one of `data` and `uri` can be specified.
	Data *string `pulumi:"data"`
	// Date the workflow was created.
	DateCreated *string `pulumi:"dateCreated"`
	// Description of the workflow.
	Description *string `pulumi:"description"`
	// Amazon Resource Name (ARN) of the Key Management Service (KMS) Key used to encrypt the workflow.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Name of the workflow.
	Name *string `pulumi:"name"`
	// Owner of the workflow.
	Owner *string `pulumi:"owner"`
	// Key-value map of resource tags for the workflow. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Type of the workflow. Valid values: `BUILD`, `TEST`, `DISTRIBUTION`.
	Type *string `pulumi:"type"`
	// S3 URI with data of the workflow. Exactly one of `data` and `uri` can be specified.
	Uri *string `pulumi:"uri"`
	// Version of the workflow.
	//
	// The following arguments are optional:
	Version *string `pulumi:"version"`
}

type WorkflowState struct {
	// Amazon Resource Name (ARN) of the workflow.
	Arn pulumi.StringPtrInput
	// Change description of the workflow.
	ChangeDescription pulumi.StringPtrInput
	// Inline YAML string with data of the workflow. Exactly one of `data` and `uri` can be specified.
	Data pulumi.StringPtrInput
	// Date the workflow was created.
	DateCreated pulumi.StringPtrInput
	// Description of the workflow.
	Description pulumi.StringPtrInput
	// Amazon Resource Name (ARN) of the Key Management Service (KMS) Key used to encrypt the workflow.
	KmsKeyId pulumi.StringPtrInput
	// Name of the workflow.
	Name pulumi.StringPtrInput
	// Owner of the workflow.
	Owner pulumi.StringPtrInput
	// Key-value map of resource tags for the workflow. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
	// Type of the workflow. Valid values: `BUILD`, `TEST`, `DISTRIBUTION`.
	Type pulumi.StringPtrInput
	// S3 URI with data of the workflow. Exactly one of `data` and `uri` can be specified.
	Uri pulumi.StringPtrInput
	// Version of the workflow.
	//
	// The following arguments are optional:
	Version pulumi.StringPtrInput
}

func (WorkflowState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowState)(nil)).Elem()
}

type workflowArgs struct {
	// Change description of the workflow.
	ChangeDescription *string `pulumi:"changeDescription"`
	// Inline YAML string with data of the workflow. Exactly one of `data` and `uri` can be specified.
	Data *string `pulumi:"data"`
	// Description of the workflow.
	Description *string `pulumi:"description"`
	// Amazon Resource Name (ARN) of the Key Management Service (KMS) Key used to encrypt the workflow.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Name of the workflow.
	Name *string `pulumi:"name"`
	// Key-value map of resource tags for the workflow. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Type of the workflow. Valid values: `BUILD`, `TEST`, `DISTRIBUTION`.
	Type string `pulumi:"type"`
	// S3 URI with data of the workflow. Exactly one of `data` and `uri` can be specified.
	Uri *string `pulumi:"uri"`
	// Version of the workflow.
	//
	// The following arguments are optional:
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a Workflow resource.
type WorkflowArgs struct {
	// Change description of the workflow.
	ChangeDescription pulumi.StringPtrInput
	// Inline YAML string with data of the workflow. Exactly one of `data` and `uri` can be specified.
	Data pulumi.StringPtrInput
	// Description of the workflow.
	Description pulumi.StringPtrInput
	// Amazon Resource Name (ARN) of the Key Management Service (KMS) Key used to encrypt the workflow.
	KmsKeyId pulumi.StringPtrInput
	// Name of the workflow.
	Name pulumi.StringPtrInput
	// Key-value map of resource tags for the workflow. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Type of the workflow. Valid values: `BUILD`, `TEST`, `DISTRIBUTION`.
	Type pulumi.StringInput
	// S3 URI with data of the workflow. Exactly one of `data` and `uri` can be specified.
	Uri pulumi.StringPtrInput
	// Version of the workflow.
	//
	// The following arguments are optional:
	Version pulumi.StringInput
}

func (WorkflowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowArgs)(nil)).Elem()
}

type WorkflowInput interface {
	pulumi.Input

	ToWorkflowOutput() WorkflowOutput
	ToWorkflowOutputWithContext(ctx context.Context) WorkflowOutput
}

func (*Workflow) ElementType() reflect.Type {
	return reflect.TypeOf((**Workflow)(nil)).Elem()
}

func (i *Workflow) ToWorkflowOutput() WorkflowOutput {
	return i.ToWorkflowOutputWithContext(context.Background())
}

func (i *Workflow) ToWorkflowOutputWithContext(ctx context.Context) WorkflowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowOutput)
}

// WorkflowArrayInput is an input type that accepts WorkflowArray and WorkflowArrayOutput values.
// You can construct a concrete instance of `WorkflowArrayInput` via:
//
//	WorkflowArray{ WorkflowArgs{...} }
type WorkflowArrayInput interface {
	pulumi.Input

	ToWorkflowArrayOutput() WorkflowArrayOutput
	ToWorkflowArrayOutputWithContext(context.Context) WorkflowArrayOutput
}

type WorkflowArray []WorkflowInput

func (WorkflowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Workflow)(nil)).Elem()
}

func (i WorkflowArray) ToWorkflowArrayOutput() WorkflowArrayOutput {
	return i.ToWorkflowArrayOutputWithContext(context.Background())
}

func (i WorkflowArray) ToWorkflowArrayOutputWithContext(ctx context.Context) WorkflowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowArrayOutput)
}

// WorkflowMapInput is an input type that accepts WorkflowMap and WorkflowMapOutput values.
// You can construct a concrete instance of `WorkflowMapInput` via:
//
//	WorkflowMap{ "key": WorkflowArgs{...} }
type WorkflowMapInput interface {
	pulumi.Input

	ToWorkflowMapOutput() WorkflowMapOutput
	ToWorkflowMapOutputWithContext(context.Context) WorkflowMapOutput
}

type WorkflowMap map[string]WorkflowInput

func (WorkflowMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Workflow)(nil)).Elem()
}

func (i WorkflowMap) ToWorkflowMapOutput() WorkflowMapOutput {
	return i.ToWorkflowMapOutputWithContext(context.Background())
}

func (i WorkflowMap) ToWorkflowMapOutputWithContext(ctx context.Context) WorkflowMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowMapOutput)
}

type WorkflowOutput struct{ *pulumi.OutputState }

func (WorkflowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Workflow)(nil)).Elem()
}

func (o WorkflowOutput) ToWorkflowOutput() WorkflowOutput {
	return o
}

func (o WorkflowOutput) ToWorkflowOutputWithContext(ctx context.Context) WorkflowOutput {
	return o
}

// Amazon Resource Name (ARN) of the workflow.
func (o WorkflowOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Change description of the workflow.
func (o WorkflowOutput) ChangeDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.ChangeDescription }).(pulumi.StringPtrOutput)
}

// Inline YAML string with data of the workflow. Exactly one of `data` and `uri` can be specified.
func (o WorkflowOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringOutput { return v.Data }).(pulumi.StringOutput)
}

// Date the workflow was created.
func (o WorkflowOutput) DateCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringOutput { return v.DateCreated }).(pulumi.StringOutput)
}

// Description of the workflow.
func (o WorkflowOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Amazon Resource Name (ARN) of the Key Management Service (KMS) Key used to encrypt the workflow.
func (o WorkflowOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

// Name of the workflow.
func (o WorkflowOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Owner of the workflow.
func (o WorkflowOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// Key-value map of resource tags for the workflow. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o WorkflowOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Deprecated: Please use `tags` instead.
func (o WorkflowOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// Type of the workflow. Valid values: `BUILD`, `TEST`, `DISTRIBUTION`.
func (o WorkflowOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// S3 URI with data of the workflow. Exactly one of `data` and `uri` can be specified.
func (o WorkflowOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.Uri }).(pulumi.StringPtrOutput)
}

// Version of the workflow.
//
// The following arguments are optional:
func (o WorkflowOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type WorkflowArrayOutput struct{ *pulumi.OutputState }

func (WorkflowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Workflow)(nil)).Elem()
}

func (o WorkflowArrayOutput) ToWorkflowArrayOutput() WorkflowArrayOutput {
	return o
}

func (o WorkflowArrayOutput) ToWorkflowArrayOutputWithContext(ctx context.Context) WorkflowArrayOutput {
	return o
}

func (o WorkflowArrayOutput) Index(i pulumi.IntInput) WorkflowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Workflow {
		return vs[0].([]*Workflow)[vs[1].(int)]
	}).(WorkflowOutput)
}

type WorkflowMapOutput struct{ *pulumi.OutputState }

func (WorkflowMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Workflow)(nil)).Elem()
}

func (o WorkflowMapOutput) ToWorkflowMapOutput() WorkflowMapOutput {
	return o
}

func (o WorkflowMapOutput) ToWorkflowMapOutputWithContext(ctx context.Context) WorkflowMapOutput {
	return o
}

func (o WorkflowMapOutput) MapIndex(k pulumi.StringInput) WorkflowOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Workflow {
		return vs[0].(map[string]*Workflow)[vs[1].(string)]
	}).(WorkflowOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowInput)(nil)).Elem(), &Workflow{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowArrayInput)(nil)).Elem(), WorkflowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowMapInput)(nil)).Elem(), WorkflowMap{})
	pulumi.RegisterOutputType(WorkflowOutput{})
	pulumi.RegisterOutputType(WorkflowArrayOutput{})
	pulumi.RegisterOutputType(WorkflowMapOutput{})
}
