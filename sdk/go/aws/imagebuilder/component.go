// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package imagebuilder

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Component struct {
	pulumi.CustomResourceState

	Arn                 pulumi.StringOutput      `pulumi:"arn"`
	ChangeDescription   pulumi.StringPtrOutput   `pulumi:"changeDescription"`
	Data                pulumi.StringOutput      `pulumi:"data"`
	DateCreated         pulumi.StringOutput      `pulumi:"dateCreated"`
	Description         pulumi.StringPtrOutput   `pulumi:"description"`
	Encrypted           pulumi.BoolOutput        `pulumi:"encrypted"`
	KmsKeyId            pulumi.StringPtrOutput   `pulumi:"kmsKeyId"`
	Name                pulumi.StringOutput      `pulumi:"name"`
	Owner               pulumi.StringOutput      `pulumi:"owner"`
	Platform            pulumi.StringOutput      `pulumi:"platform"`
	SupportedOsVersions pulumi.StringArrayOutput `pulumi:"supportedOsVersions"`
	Tags                pulumi.StringMapOutput   `pulumi:"tags"`
	TagsAll             pulumi.StringMapOutput   `pulumi:"tagsAll"`
	Type                pulumi.StringOutput      `pulumi:"type"`
	Uri                 pulumi.StringPtrOutput   `pulumi:"uri"`
	Version             pulumi.StringOutput      `pulumi:"version"`
}

// NewComponent registers a new resource with the given unique name, arguments, and options.
func NewComponent(ctx *pulumi.Context,
	name string, args *ComponentArgs, opts ...pulumi.ResourceOption) (*Component, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Platform == nil {
		return nil, errors.New("invalid value for required argument 'Platform'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	var resource Component
	err := ctx.RegisterResource("aws:imagebuilder/component:Component", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComponent gets an existing Component resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComponent(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComponentState, opts ...pulumi.ResourceOption) (*Component, error) {
	var resource Component
	err := ctx.ReadResource("aws:imagebuilder/component:Component", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Component resources.
type componentState struct {
	Arn                 *string           `pulumi:"arn"`
	ChangeDescription   *string           `pulumi:"changeDescription"`
	Data                *string           `pulumi:"data"`
	DateCreated         *string           `pulumi:"dateCreated"`
	Description         *string           `pulumi:"description"`
	Encrypted           *bool             `pulumi:"encrypted"`
	KmsKeyId            *string           `pulumi:"kmsKeyId"`
	Name                *string           `pulumi:"name"`
	Owner               *string           `pulumi:"owner"`
	Platform            *string           `pulumi:"platform"`
	SupportedOsVersions []string          `pulumi:"supportedOsVersions"`
	Tags                map[string]string `pulumi:"tags"`
	TagsAll             map[string]string `pulumi:"tagsAll"`
	Type                *string           `pulumi:"type"`
	Uri                 *string           `pulumi:"uri"`
	Version             *string           `pulumi:"version"`
}

type ComponentState struct {
	Arn                 pulumi.StringPtrInput
	ChangeDescription   pulumi.StringPtrInput
	Data                pulumi.StringPtrInput
	DateCreated         pulumi.StringPtrInput
	Description         pulumi.StringPtrInput
	Encrypted           pulumi.BoolPtrInput
	KmsKeyId            pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Owner               pulumi.StringPtrInput
	Platform            pulumi.StringPtrInput
	SupportedOsVersions pulumi.StringArrayInput
	Tags                pulumi.StringMapInput
	TagsAll             pulumi.StringMapInput
	Type                pulumi.StringPtrInput
	Uri                 pulumi.StringPtrInput
	Version             pulumi.StringPtrInput
}

func (ComponentState) ElementType() reflect.Type {
	return reflect.TypeOf((*componentState)(nil)).Elem()
}

type componentArgs struct {
	ChangeDescription   *string           `pulumi:"changeDescription"`
	Data                *string           `pulumi:"data"`
	Description         *string           `pulumi:"description"`
	KmsKeyId            *string           `pulumi:"kmsKeyId"`
	Name                *string           `pulumi:"name"`
	Platform            string            `pulumi:"platform"`
	SupportedOsVersions []string          `pulumi:"supportedOsVersions"`
	Tags                map[string]string `pulumi:"tags"`
	Uri                 *string           `pulumi:"uri"`
	Version             string            `pulumi:"version"`
}

// The set of arguments for constructing a Component resource.
type ComponentArgs struct {
	ChangeDescription   pulumi.StringPtrInput
	Data                pulumi.StringPtrInput
	Description         pulumi.StringPtrInput
	KmsKeyId            pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Platform            pulumi.StringInput
	SupportedOsVersions pulumi.StringArrayInput
	Tags                pulumi.StringMapInput
	Uri                 pulumi.StringPtrInput
	Version             pulumi.StringInput
}

func (ComponentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*componentArgs)(nil)).Elem()
}

type ComponentInput interface {
	pulumi.Input

	ToComponentOutput() ComponentOutput
	ToComponentOutputWithContext(ctx context.Context) ComponentOutput
}

func (*Component) ElementType() reflect.Type {
	return reflect.TypeOf((**Component)(nil)).Elem()
}

func (i *Component) ToComponentOutput() ComponentOutput {
	return i.ToComponentOutputWithContext(context.Background())
}

func (i *Component) ToComponentOutputWithContext(ctx context.Context) ComponentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentOutput)
}

// ComponentArrayInput is an input type that accepts ComponentArray and ComponentArrayOutput values.
// You can construct a concrete instance of `ComponentArrayInput` via:
//
//	ComponentArray{ ComponentArgs{...} }
type ComponentArrayInput interface {
	pulumi.Input

	ToComponentArrayOutput() ComponentArrayOutput
	ToComponentArrayOutputWithContext(context.Context) ComponentArrayOutput
}

type ComponentArray []ComponentInput

func (ComponentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Component)(nil)).Elem()
}

func (i ComponentArray) ToComponentArrayOutput() ComponentArrayOutput {
	return i.ToComponentArrayOutputWithContext(context.Background())
}

func (i ComponentArray) ToComponentArrayOutputWithContext(ctx context.Context) ComponentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentArrayOutput)
}

// ComponentMapInput is an input type that accepts ComponentMap and ComponentMapOutput values.
// You can construct a concrete instance of `ComponentMapInput` via:
//
//	ComponentMap{ "key": ComponentArgs{...} }
type ComponentMapInput interface {
	pulumi.Input

	ToComponentMapOutput() ComponentMapOutput
	ToComponentMapOutputWithContext(context.Context) ComponentMapOutput
}

type ComponentMap map[string]ComponentInput

func (ComponentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Component)(nil)).Elem()
}

func (i ComponentMap) ToComponentMapOutput() ComponentMapOutput {
	return i.ToComponentMapOutputWithContext(context.Background())
}

func (i ComponentMap) ToComponentMapOutputWithContext(ctx context.Context) ComponentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentMapOutput)
}

type ComponentOutput struct{ *pulumi.OutputState }

func (ComponentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Component)(nil)).Elem()
}

func (o ComponentOutput) ToComponentOutput() ComponentOutput {
	return o
}

func (o ComponentOutput) ToComponentOutputWithContext(ctx context.Context) ComponentOutput {
	return o
}

func (o ComponentOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Component) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ComponentOutput) ChangeDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Component) pulumi.StringPtrOutput { return v.ChangeDescription }).(pulumi.StringPtrOutput)
}

func (o ComponentOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v *Component) pulumi.StringOutput { return v.Data }).(pulumi.StringOutput)
}

func (o ComponentOutput) DateCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *Component) pulumi.StringOutput { return v.DateCreated }).(pulumi.StringOutput)
}

func (o ComponentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Component) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ComponentOutput) Encrypted() pulumi.BoolOutput {
	return o.ApplyT(func(v *Component) pulumi.BoolOutput { return v.Encrypted }).(pulumi.BoolOutput)
}

func (o ComponentOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Component) pulumi.StringPtrOutput { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

func (o ComponentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Component) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ComponentOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *Component) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

func (o ComponentOutput) Platform() pulumi.StringOutput {
	return o.ApplyT(func(v *Component) pulumi.StringOutput { return v.Platform }).(pulumi.StringOutput)
}

func (o ComponentOutput) SupportedOsVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Component) pulumi.StringArrayOutput { return v.SupportedOsVersions }).(pulumi.StringArrayOutput)
}

func (o ComponentOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Component) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ComponentOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Component) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o ComponentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Component) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o ComponentOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Component) pulumi.StringPtrOutput { return v.Uri }).(pulumi.StringPtrOutput)
}

func (o ComponentOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Component) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type ComponentArrayOutput struct{ *pulumi.OutputState }

func (ComponentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Component)(nil)).Elem()
}

func (o ComponentArrayOutput) ToComponentArrayOutput() ComponentArrayOutput {
	return o
}

func (o ComponentArrayOutput) ToComponentArrayOutputWithContext(ctx context.Context) ComponentArrayOutput {
	return o
}

func (o ComponentArrayOutput) Index(i pulumi.IntInput) ComponentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Component {
		return vs[0].([]*Component)[vs[1].(int)]
	}).(ComponentOutput)
}

type ComponentMapOutput struct{ *pulumi.OutputState }

func (ComponentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Component)(nil)).Elem()
}

func (o ComponentMapOutput) ToComponentMapOutput() ComponentMapOutput {
	return o
}

func (o ComponentMapOutput) ToComponentMapOutputWithContext(ctx context.Context) ComponentMapOutput {
	return o
}

func (o ComponentMapOutput) MapIndex(k pulumi.StringInput) ComponentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Component {
		return vs[0].(map[string]*Component)[vs[1].(string)]
	}).(ComponentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentInput)(nil)).Elem(), &Component{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentArrayInput)(nil)).Elem(), ComponentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentMapInput)(nil)).Elem(), ComponentMap{})
	pulumi.RegisterOutputType(ComponentOutput{})
	pulumi.RegisterOutputType(ComponentArrayOutput{})
	pulumi.RegisterOutputType(ComponentMapOutput{})
}
