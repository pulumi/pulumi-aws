// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package imagebuilder

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Image struct {
	pulumi.CustomResourceState

	Arn                            pulumi.StringOutput                `pulumi:"arn"`
	ContainerRecipeArn             pulumi.StringPtrOutput             `pulumi:"containerRecipeArn"`
	DateCreated                    pulumi.StringOutput                `pulumi:"dateCreated"`
	DistributionConfigurationArn   pulumi.StringPtrOutput             `pulumi:"distributionConfigurationArn"`
	EnhancedImageMetadataEnabled   pulumi.BoolPtrOutput               `pulumi:"enhancedImageMetadataEnabled"`
	ImageRecipeArn                 pulumi.StringPtrOutput             `pulumi:"imageRecipeArn"`
	ImageTestsConfiguration        ImageImageTestsConfigurationOutput `pulumi:"imageTestsConfiguration"`
	InfrastructureConfigurationArn pulumi.StringOutput                `pulumi:"infrastructureConfigurationArn"`
	Name                           pulumi.StringOutput                `pulumi:"name"`
	OsVersion                      pulumi.StringOutput                `pulumi:"osVersion"`
	OutputResources                ImageOutputResourceArrayOutput     `pulumi:"outputResources"`
	Platform                       pulumi.StringOutput                `pulumi:"platform"`
	Tags                           pulumi.StringMapOutput             `pulumi:"tags"`
	TagsAll                        pulumi.StringMapOutput             `pulumi:"tagsAll"`
	Version                        pulumi.StringOutput                `pulumi:"version"`
}

// NewImage registers a new resource with the given unique name, arguments, and options.
func NewImage(ctx *pulumi.Context,
	name string, args *ImageArgs, opts ...pulumi.ResourceOption) (*Image, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InfrastructureConfigurationArn == nil {
		return nil, errors.New("invalid value for required argument 'InfrastructureConfigurationArn'")
	}
	var resource Image
	err := ctx.RegisterResource("aws:imagebuilder/image:Image", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImage gets an existing Image resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageState, opts ...pulumi.ResourceOption) (*Image, error) {
	var resource Image
	err := ctx.ReadResource("aws:imagebuilder/image:Image", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Image resources.
type imageState struct {
	Arn                            *string                       `pulumi:"arn"`
	ContainerRecipeArn             *string                       `pulumi:"containerRecipeArn"`
	DateCreated                    *string                       `pulumi:"dateCreated"`
	DistributionConfigurationArn   *string                       `pulumi:"distributionConfigurationArn"`
	EnhancedImageMetadataEnabled   *bool                         `pulumi:"enhancedImageMetadataEnabled"`
	ImageRecipeArn                 *string                       `pulumi:"imageRecipeArn"`
	ImageTestsConfiguration        *ImageImageTestsConfiguration `pulumi:"imageTestsConfiguration"`
	InfrastructureConfigurationArn *string                       `pulumi:"infrastructureConfigurationArn"`
	Name                           *string                       `pulumi:"name"`
	OsVersion                      *string                       `pulumi:"osVersion"`
	OutputResources                []ImageOutputResource         `pulumi:"outputResources"`
	Platform                       *string                       `pulumi:"platform"`
	Tags                           map[string]string             `pulumi:"tags"`
	TagsAll                        map[string]string             `pulumi:"tagsAll"`
	Version                        *string                       `pulumi:"version"`
}

type ImageState struct {
	Arn                            pulumi.StringPtrInput
	ContainerRecipeArn             pulumi.StringPtrInput
	DateCreated                    pulumi.StringPtrInput
	DistributionConfigurationArn   pulumi.StringPtrInput
	EnhancedImageMetadataEnabled   pulumi.BoolPtrInput
	ImageRecipeArn                 pulumi.StringPtrInput
	ImageTestsConfiguration        ImageImageTestsConfigurationPtrInput
	InfrastructureConfigurationArn pulumi.StringPtrInput
	Name                           pulumi.StringPtrInput
	OsVersion                      pulumi.StringPtrInput
	OutputResources                ImageOutputResourceArrayInput
	Platform                       pulumi.StringPtrInput
	Tags                           pulumi.StringMapInput
	TagsAll                        pulumi.StringMapInput
	Version                        pulumi.StringPtrInput
}

func (ImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageState)(nil)).Elem()
}

type imageArgs struct {
	ContainerRecipeArn             *string                       `pulumi:"containerRecipeArn"`
	DistributionConfigurationArn   *string                       `pulumi:"distributionConfigurationArn"`
	EnhancedImageMetadataEnabled   *bool                         `pulumi:"enhancedImageMetadataEnabled"`
	ImageRecipeArn                 *string                       `pulumi:"imageRecipeArn"`
	ImageTestsConfiguration        *ImageImageTestsConfiguration `pulumi:"imageTestsConfiguration"`
	InfrastructureConfigurationArn string                        `pulumi:"infrastructureConfigurationArn"`
	Tags                           map[string]string             `pulumi:"tags"`
}

// The set of arguments for constructing a Image resource.
type ImageArgs struct {
	ContainerRecipeArn             pulumi.StringPtrInput
	DistributionConfigurationArn   pulumi.StringPtrInput
	EnhancedImageMetadataEnabled   pulumi.BoolPtrInput
	ImageRecipeArn                 pulumi.StringPtrInput
	ImageTestsConfiguration        ImageImageTestsConfigurationPtrInput
	InfrastructureConfigurationArn pulumi.StringInput
	Tags                           pulumi.StringMapInput
}

func (ImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageArgs)(nil)).Elem()
}

type ImageInput interface {
	pulumi.Input

	ToImageOutput() ImageOutput
	ToImageOutputWithContext(ctx context.Context) ImageOutput
}

func (*Image) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (i *Image) ToImageOutput() ImageOutput {
	return i.ToImageOutputWithContext(context.Background())
}

func (i *Image) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOutput)
}

// ImageArrayInput is an input type that accepts ImageArray and ImageArrayOutput values.
// You can construct a concrete instance of `ImageArrayInput` via:
//
//	ImageArray{ ImageArgs{...} }
type ImageArrayInput interface {
	pulumi.Input

	ToImageArrayOutput() ImageArrayOutput
	ToImageArrayOutputWithContext(context.Context) ImageArrayOutput
}

type ImageArray []ImageInput

func (ImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Image)(nil)).Elem()
}

func (i ImageArray) ToImageArrayOutput() ImageArrayOutput {
	return i.ToImageArrayOutputWithContext(context.Background())
}

func (i ImageArray) ToImageArrayOutputWithContext(ctx context.Context) ImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageArrayOutput)
}

// ImageMapInput is an input type that accepts ImageMap and ImageMapOutput values.
// You can construct a concrete instance of `ImageMapInput` via:
//
//	ImageMap{ "key": ImageArgs{...} }
type ImageMapInput interface {
	pulumi.Input

	ToImageMapOutput() ImageMapOutput
	ToImageMapOutputWithContext(context.Context) ImageMapOutput
}

type ImageMap map[string]ImageInput

func (ImageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Image)(nil)).Elem()
}

func (i ImageMap) ToImageMapOutput() ImageMapOutput {
	return i.ToImageMapOutputWithContext(context.Background())
}

func (i ImageMap) ToImageMapOutputWithContext(ctx context.Context) ImageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageMapOutput)
}

type ImageOutput struct{ *pulumi.OutputState }

func (ImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (o ImageOutput) ToImageOutput() ImageOutput {
	return o
}

func (o ImageOutput) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return o
}

func (o ImageOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ImageOutput) ContainerRecipeArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) pulumi.StringPtrOutput { return v.ContainerRecipeArn }).(pulumi.StringPtrOutput)
}

func (o ImageOutput) DateCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.DateCreated }).(pulumi.StringOutput)
}

func (o ImageOutput) DistributionConfigurationArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) pulumi.StringPtrOutput { return v.DistributionConfigurationArn }).(pulumi.StringPtrOutput)
}

func (o ImageOutput) EnhancedImageMetadataEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Image) pulumi.BoolPtrOutput { return v.EnhancedImageMetadataEnabled }).(pulumi.BoolPtrOutput)
}

func (o ImageOutput) ImageRecipeArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) pulumi.StringPtrOutput { return v.ImageRecipeArn }).(pulumi.StringPtrOutput)
}

func (o ImageOutput) ImageTestsConfiguration() ImageImageTestsConfigurationOutput {
	return o.ApplyT(func(v *Image) ImageImageTestsConfigurationOutput { return v.ImageTestsConfiguration }).(ImageImageTestsConfigurationOutput)
}

func (o ImageOutput) InfrastructureConfigurationArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.InfrastructureConfigurationArn }).(pulumi.StringOutput)
}

func (o ImageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ImageOutput) OsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.OsVersion }).(pulumi.StringOutput)
}

func (o ImageOutput) OutputResources() ImageOutputResourceArrayOutput {
	return o.ApplyT(func(v *Image) ImageOutputResourceArrayOutput { return v.OutputResources }).(ImageOutputResourceArrayOutput)
}

func (o ImageOutput) Platform() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Platform }).(pulumi.StringOutput)
}

func (o ImageOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Image) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ImageOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Image) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o ImageOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type ImageArrayOutput struct{ *pulumi.OutputState }

func (ImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Image)(nil)).Elem()
}

func (o ImageArrayOutput) ToImageArrayOutput() ImageArrayOutput {
	return o
}

func (o ImageArrayOutput) ToImageArrayOutputWithContext(ctx context.Context) ImageArrayOutput {
	return o
}

func (o ImageArrayOutput) Index(i pulumi.IntInput) ImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Image {
		return vs[0].([]*Image)[vs[1].(int)]
	}).(ImageOutput)
}

type ImageMapOutput struct{ *pulumi.OutputState }

func (ImageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Image)(nil)).Elem()
}

func (o ImageMapOutput) ToImageMapOutput() ImageMapOutput {
	return o
}

func (o ImageMapOutput) ToImageMapOutputWithContext(ctx context.Context) ImageMapOutput {
	return o
}

func (o ImageMapOutput) MapIndex(k pulumi.StringInput) ImageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Image {
		return vs[0].(map[string]*Image)[vs[1].(string)]
	}).(ImageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageInput)(nil)).Elem(), &Image{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageArrayInput)(nil)).Elem(), ImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageMapInput)(nil)).Elem(), ImageMap{})
	pulumi.RegisterOutputType(ImageOutput{})
	pulumi.RegisterOutputType(ImageArrayOutput{})
	pulumi.RegisterOutputType(ImageMapOutput{})
}
