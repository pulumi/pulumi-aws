// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package imagebuilder

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ImageRecipe struct {
	pulumi.CustomResourceState

	Arn                 pulumi.StringOutput                      `pulumi:"arn"`
	BlockDeviceMappings ImageRecipeBlockDeviceMappingArrayOutput `pulumi:"blockDeviceMappings"`
	Components          ImageRecipeComponentArrayOutput          `pulumi:"components"`
	DateCreated         pulumi.StringOutput                      `pulumi:"dateCreated"`
	Description         pulumi.StringPtrOutput                   `pulumi:"description"`
	Name                pulumi.StringOutput                      `pulumi:"name"`
	Owner               pulumi.StringOutput                      `pulumi:"owner"`
	ParentImage         pulumi.StringOutput                      `pulumi:"parentImage"`
	Platform            pulumi.StringOutput                      `pulumi:"platform"`
	SystemsManagerAgent ImageRecipeSystemsManagerAgentOutput     `pulumi:"systemsManagerAgent"`
	Tags                pulumi.StringMapOutput                   `pulumi:"tags"`
	TagsAll             pulumi.StringMapOutput                   `pulumi:"tagsAll"`
	UserDataBase64      pulumi.StringOutput                      `pulumi:"userDataBase64"`
	Version             pulumi.StringOutput                      `pulumi:"version"`
	WorkingDirectory    pulumi.StringPtrOutput                   `pulumi:"workingDirectory"`
}

// NewImageRecipe registers a new resource with the given unique name, arguments, and options.
func NewImageRecipe(ctx *pulumi.Context,
	name string, args *ImageRecipeArgs, opts ...pulumi.ResourceOption) (*ImageRecipe, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Components == nil {
		return nil, errors.New("invalid value for required argument 'Components'")
	}
	if args.ParentImage == nil {
		return nil, errors.New("invalid value for required argument 'ParentImage'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	var resource ImageRecipe
	err := ctx.RegisterResource("aws:imagebuilder/imageRecipe:ImageRecipe", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImageRecipe gets an existing ImageRecipe resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImageRecipe(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageRecipeState, opts ...pulumi.ResourceOption) (*ImageRecipe, error) {
	var resource ImageRecipe
	err := ctx.ReadResource("aws:imagebuilder/imageRecipe:ImageRecipe", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImageRecipe resources.
type imageRecipeState struct {
	Arn                 *string                         `pulumi:"arn"`
	BlockDeviceMappings []ImageRecipeBlockDeviceMapping `pulumi:"blockDeviceMappings"`
	Components          []ImageRecipeComponent          `pulumi:"components"`
	DateCreated         *string                         `pulumi:"dateCreated"`
	Description         *string                         `pulumi:"description"`
	Name                *string                         `pulumi:"name"`
	Owner               *string                         `pulumi:"owner"`
	ParentImage         *string                         `pulumi:"parentImage"`
	Platform            *string                         `pulumi:"platform"`
	SystemsManagerAgent *ImageRecipeSystemsManagerAgent `pulumi:"systemsManagerAgent"`
	Tags                map[string]string               `pulumi:"tags"`
	TagsAll             map[string]string               `pulumi:"tagsAll"`
	UserDataBase64      *string                         `pulumi:"userDataBase64"`
	Version             *string                         `pulumi:"version"`
	WorkingDirectory    *string                         `pulumi:"workingDirectory"`
}

type ImageRecipeState struct {
	Arn                 pulumi.StringPtrInput
	BlockDeviceMappings ImageRecipeBlockDeviceMappingArrayInput
	Components          ImageRecipeComponentArrayInput
	DateCreated         pulumi.StringPtrInput
	Description         pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Owner               pulumi.StringPtrInput
	ParentImage         pulumi.StringPtrInput
	Platform            pulumi.StringPtrInput
	SystemsManagerAgent ImageRecipeSystemsManagerAgentPtrInput
	Tags                pulumi.StringMapInput
	TagsAll             pulumi.StringMapInput
	UserDataBase64      pulumi.StringPtrInput
	Version             pulumi.StringPtrInput
	WorkingDirectory    pulumi.StringPtrInput
}

func (ImageRecipeState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageRecipeState)(nil)).Elem()
}

type imageRecipeArgs struct {
	BlockDeviceMappings []ImageRecipeBlockDeviceMapping `pulumi:"blockDeviceMappings"`
	Components          []ImageRecipeComponent          `pulumi:"components"`
	Description         *string                         `pulumi:"description"`
	Name                *string                         `pulumi:"name"`
	ParentImage         string                          `pulumi:"parentImage"`
	SystemsManagerAgent *ImageRecipeSystemsManagerAgent `pulumi:"systemsManagerAgent"`
	Tags                map[string]string               `pulumi:"tags"`
	UserDataBase64      *string                         `pulumi:"userDataBase64"`
	Version             string                          `pulumi:"version"`
	WorkingDirectory    *string                         `pulumi:"workingDirectory"`
}

// The set of arguments for constructing a ImageRecipe resource.
type ImageRecipeArgs struct {
	BlockDeviceMappings ImageRecipeBlockDeviceMappingArrayInput
	Components          ImageRecipeComponentArrayInput
	Description         pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	ParentImage         pulumi.StringInput
	SystemsManagerAgent ImageRecipeSystemsManagerAgentPtrInput
	Tags                pulumi.StringMapInput
	UserDataBase64      pulumi.StringPtrInput
	Version             pulumi.StringInput
	WorkingDirectory    pulumi.StringPtrInput
}

func (ImageRecipeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageRecipeArgs)(nil)).Elem()
}

type ImageRecipeInput interface {
	pulumi.Input

	ToImageRecipeOutput() ImageRecipeOutput
	ToImageRecipeOutputWithContext(ctx context.Context) ImageRecipeOutput
}

func (*ImageRecipe) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRecipe)(nil)).Elem()
}

func (i *ImageRecipe) ToImageRecipeOutput() ImageRecipeOutput {
	return i.ToImageRecipeOutputWithContext(context.Background())
}

func (i *ImageRecipe) ToImageRecipeOutputWithContext(ctx context.Context) ImageRecipeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeOutput)
}

// ImageRecipeArrayInput is an input type that accepts ImageRecipeArray and ImageRecipeArrayOutput values.
// You can construct a concrete instance of `ImageRecipeArrayInput` via:
//
//	ImageRecipeArray{ ImageRecipeArgs{...} }
type ImageRecipeArrayInput interface {
	pulumi.Input

	ToImageRecipeArrayOutput() ImageRecipeArrayOutput
	ToImageRecipeArrayOutputWithContext(context.Context) ImageRecipeArrayOutput
}

type ImageRecipeArray []ImageRecipeInput

func (ImageRecipeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageRecipe)(nil)).Elem()
}

func (i ImageRecipeArray) ToImageRecipeArrayOutput() ImageRecipeArrayOutput {
	return i.ToImageRecipeArrayOutputWithContext(context.Background())
}

func (i ImageRecipeArray) ToImageRecipeArrayOutputWithContext(ctx context.Context) ImageRecipeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeArrayOutput)
}

// ImageRecipeMapInput is an input type that accepts ImageRecipeMap and ImageRecipeMapOutput values.
// You can construct a concrete instance of `ImageRecipeMapInput` via:
//
//	ImageRecipeMap{ "key": ImageRecipeArgs{...} }
type ImageRecipeMapInput interface {
	pulumi.Input

	ToImageRecipeMapOutput() ImageRecipeMapOutput
	ToImageRecipeMapOutputWithContext(context.Context) ImageRecipeMapOutput
}

type ImageRecipeMap map[string]ImageRecipeInput

func (ImageRecipeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageRecipe)(nil)).Elem()
}

func (i ImageRecipeMap) ToImageRecipeMapOutput() ImageRecipeMapOutput {
	return i.ToImageRecipeMapOutputWithContext(context.Background())
}

func (i ImageRecipeMap) ToImageRecipeMapOutputWithContext(ctx context.Context) ImageRecipeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeMapOutput)
}

type ImageRecipeOutput struct{ *pulumi.OutputState }

func (ImageRecipeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRecipe)(nil)).Elem()
}

func (o ImageRecipeOutput) ToImageRecipeOutput() ImageRecipeOutput {
	return o
}

func (o ImageRecipeOutput) ToImageRecipeOutputWithContext(ctx context.Context) ImageRecipeOutput {
	return o
}

func (o ImageRecipeOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageRecipe) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ImageRecipeOutput) BlockDeviceMappings() ImageRecipeBlockDeviceMappingArrayOutput {
	return o.ApplyT(func(v *ImageRecipe) ImageRecipeBlockDeviceMappingArrayOutput { return v.BlockDeviceMappings }).(ImageRecipeBlockDeviceMappingArrayOutput)
}

func (o ImageRecipeOutput) Components() ImageRecipeComponentArrayOutput {
	return o.ApplyT(func(v *ImageRecipe) ImageRecipeComponentArrayOutput { return v.Components }).(ImageRecipeComponentArrayOutput)
}

func (o ImageRecipeOutput) DateCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageRecipe) pulumi.StringOutput { return v.DateCreated }).(pulumi.StringOutput)
}

func (o ImageRecipeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRecipe) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ImageRecipeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageRecipe) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ImageRecipeOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageRecipe) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

func (o ImageRecipeOutput) ParentImage() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageRecipe) pulumi.StringOutput { return v.ParentImage }).(pulumi.StringOutput)
}

func (o ImageRecipeOutput) Platform() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageRecipe) pulumi.StringOutput { return v.Platform }).(pulumi.StringOutput)
}

func (o ImageRecipeOutput) SystemsManagerAgent() ImageRecipeSystemsManagerAgentOutput {
	return o.ApplyT(func(v *ImageRecipe) ImageRecipeSystemsManagerAgentOutput { return v.SystemsManagerAgent }).(ImageRecipeSystemsManagerAgentOutput)
}

func (o ImageRecipeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ImageRecipe) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ImageRecipeOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ImageRecipe) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o ImageRecipeOutput) UserDataBase64() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageRecipe) pulumi.StringOutput { return v.UserDataBase64 }).(pulumi.StringOutput)
}

func (o ImageRecipeOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageRecipe) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

func (o ImageRecipeOutput) WorkingDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRecipe) pulumi.StringPtrOutput { return v.WorkingDirectory }).(pulumi.StringPtrOutput)
}

type ImageRecipeArrayOutput struct{ *pulumi.OutputState }

func (ImageRecipeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageRecipe)(nil)).Elem()
}

func (o ImageRecipeArrayOutput) ToImageRecipeArrayOutput() ImageRecipeArrayOutput {
	return o
}

func (o ImageRecipeArrayOutput) ToImageRecipeArrayOutputWithContext(ctx context.Context) ImageRecipeArrayOutput {
	return o
}

func (o ImageRecipeArrayOutput) Index(i pulumi.IntInput) ImageRecipeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ImageRecipe {
		return vs[0].([]*ImageRecipe)[vs[1].(int)]
	}).(ImageRecipeOutput)
}

type ImageRecipeMapOutput struct{ *pulumi.OutputState }

func (ImageRecipeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageRecipe)(nil)).Elem()
}

func (o ImageRecipeMapOutput) ToImageRecipeMapOutput() ImageRecipeMapOutput {
	return o
}

func (o ImageRecipeMapOutput) ToImageRecipeMapOutputWithContext(ctx context.Context) ImageRecipeMapOutput {
	return o
}

func (o ImageRecipeMapOutput) MapIndex(k pulumi.StringInput) ImageRecipeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ImageRecipe {
		return vs[0].(map[string]*ImageRecipe)[vs[1].(string)]
	}).(ImageRecipeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRecipeInput)(nil)).Elem(), &ImageRecipe{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRecipeArrayInput)(nil)).Elem(), ImageRecipeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRecipeMapInput)(nil)).Elem(), ImageRecipeMap{})
	pulumi.RegisterOutputType(ImageRecipeOutput{})
	pulumi.RegisterOutputType(ImageRecipeArrayOutput{})
	pulumi.RegisterOutputType(ImageRecipeMapOutput{})
}
