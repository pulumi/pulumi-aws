// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package imagebuilder

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Image Builder Lifecycle Policy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//	"fmt"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/iam"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/imagebuilder"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aws.GetRegion(ctx, &aws.GetRegionArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			currentGetPartition, err := aws.GetPartition(ctx, &aws.GetPartitionArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"Version": "2012-10-17",
//				"Statement": []map[string]interface{}{
//					map[string]interface{}{
//						"Action": "sts:AssumeRole",
//						"Effect": "Allow",
//						"Principal": map[string]interface{}{
//							"Service": fmt.Sprintf("imagebuilder.%v", currentGetPartition.DnsSuffix),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			example, err := iam.NewRole(ctx, "example", &iam.RoleArgs{
//				AssumeRolePolicy: pulumi.String(json0),
//				Name:             pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleRolePolicyAttachment, err := iam.NewRolePolicyAttachment(ctx, "example", &iam.RolePolicyAttachmentArgs{
//				PolicyArn: pulumi.Sprintf("arn:%v:iam::aws:policy/service-role/EC2ImageBuilderLifecycleExecutionPolicy", currentGetPartition.Partition),
//				Role:      example.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = imagebuilder.NewLifecyclePolicy(ctx, "example", &imagebuilder.LifecyclePolicyArgs{
//				Name:          pulumi.String("name"),
//				Description:   pulumi.String("Example description"),
//				ExecutionRole: example.Arn,
//				ResourceType:  pulumi.String("AMI_IMAGE"),
//				PolicyDetails: imagebuilder.LifecyclePolicyPolicyDetailArray{
//					&imagebuilder.LifecyclePolicyPolicyDetailArgs{
//						Action: &imagebuilder.LifecyclePolicyPolicyDetailActionArgs{
//							Type: pulumi.String("DELETE"),
//						},
//						Filter: &imagebuilder.LifecyclePolicyPolicyDetailFilterArgs{
//							Type:          pulumi.String("AGE"),
//							Value:         pulumi.Int(6),
//							RetainAtLeast: pulumi.Int(10),
//							Unit:          pulumi.String("YEARS"),
//						},
//					},
//				},
//				ResourceSelection: &imagebuilder.LifecyclePolicyResourceSelectionArgs{
//					TagMap: pulumi.StringMap{
//						"key1": pulumi.String("value1"),
//						"key2": pulumi.String("value2"),
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				exampleRolePolicyAttachment,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import `aws_imagebuilder_lifecycle_policy` using the Amazon Resource Name (ARN). For example:
//
// ```sh
// $ pulumi import aws:imagebuilder/lifecyclePolicy:LifecyclePolicy example arn:aws:imagebuilder:us-east-1:123456789012:lifecycle-policy/example
// ```
type LifecyclePolicy struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the lifecycle policy.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// description for the lifecycle policy.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The Amazon Resource Name (ARN) for the IAM role you create that grants Image Builder access to run lifecycle actions. More information about this role can be found [`here`](https://docs.aws.amazon.com/imagebuilder/latest/userguide/image-lifecycle-prerequisites.html#image-lifecycle-prereq-role).
	ExecutionRole pulumi.StringOutput `pulumi:"executionRole"`
	// The name of the lifecycle policy to create.
	Name pulumi.StringOutput `pulumi:"name"`
	// Configuration block with policy details. Detailed below.
	PolicyDetails LifecyclePolicyPolicyDetailArrayOutput `pulumi:"policyDetails"`
	// Selection criteria for the resources that the lifecycle policy applies to. Detailed below.
	//
	// The following arguments are optional:
	ResourceSelection LifecyclePolicyResourceSelectionPtrOutput `pulumi:"resourceSelection"`
	// The type of Image Builder resource that the lifecycle policy applies to. Valid values: `AMI_IMAGE` or `CONTAINER_IMAGE`.
	ResourceType pulumi.StringOutput `pulumi:"resourceType"`
	// The status of the lifecycle policy.
	Status pulumi.StringOutput `pulumi:"status"`
	// Key-value map of resource tags for the Image Builder Lifecycle Policy. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewLifecyclePolicy registers a new resource with the given unique name, arguments, and options.
func NewLifecyclePolicy(ctx *pulumi.Context,
	name string, args *LifecyclePolicyArgs, opts ...pulumi.ResourceOption) (*LifecyclePolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExecutionRole == nil {
		return nil, errors.New("invalid value for required argument 'ExecutionRole'")
	}
	if args.ResourceType == nil {
		return nil, errors.New("invalid value for required argument 'ResourceType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LifecyclePolicy
	err := ctx.RegisterResource("aws:imagebuilder/lifecyclePolicy:LifecyclePolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLifecyclePolicy gets an existing LifecyclePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLifecyclePolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LifecyclePolicyState, opts ...pulumi.ResourceOption) (*LifecyclePolicy, error) {
	var resource LifecyclePolicy
	err := ctx.ReadResource("aws:imagebuilder/lifecyclePolicy:LifecyclePolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LifecyclePolicy resources.
type lifecyclePolicyState struct {
	// Amazon Resource Name (ARN) of the lifecycle policy.
	Arn *string `pulumi:"arn"`
	// description for the lifecycle policy.
	Description *string `pulumi:"description"`
	// The Amazon Resource Name (ARN) for the IAM role you create that grants Image Builder access to run lifecycle actions. More information about this role can be found [`here`](https://docs.aws.amazon.com/imagebuilder/latest/userguide/image-lifecycle-prerequisites.html#image-lifecycle-prereq-role).
	ExecutionRole *string `pulumi:"executionRole"`
	// The name of the lifecycle policy to create.
	Name *string `pulumi:"name"`
	// Configuration block with policy details. Detailed below.
	PolicyDetails []LifecyclePolicyPolicyDetail `pulumi:"policyDetails"`
	// Selection criteria for the resources that the lifecycle policy applies to. Detailed below.
	//
	// The following arguments are optional:
	ResourceSelection *LifecyclePolicyResourceSelection `pulumi:"resourceSelection"`
	// The type of Image Builder resource that the lifecycle policy applies to. Valid values: `AMI_IMAGE` or `CONTAINER_IMAGE`.
	ResourceType *string `pulumi:"resourceType"`
	// The status of the lifecycle policy.
	Status *string `pulumi:"status"`
	// Key-value map of resource tags for the Image Builder Lifecycle Policy. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type LifecyclePolicyState struct {
	// Amazon Resource Name (ARN) of the lifecycle policy.
	Arn pulumi.StringPtrInput
	// description for the lifecycle policy.
	Description pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) for the IAM role you create that grants Image Builder access to run lifecycle actions. More information about this role can be found [`here`](https://docs.aws.amazon.com/imagebuilder/latest/userguide/image-lifecycle-prerequisites.html#image-lifecycle-prereq-role).
	ExecutionRole pulumi.StringPtrInput
	// The name of the lifecycle policy to create.
	Name pulumi.StringPtrInput
	// Configuration block with policy details. Detailed below.
	PolicyDetails LifecyclePolicyPolicyDetailArrayInput
	// Selection criteria for the resources that the lifecycle policy applies to. Detailed below.
	//
	// The following arguments are optional:
	ResourceSelection LifecyclePolicyResourceSelectionPtrInput
	// The type of Image Builder resource that the lifecycle policy applies to. Valid values: `AMI_IMAGE` or `CONTAINER_IMAGE`.
	ResourceType pulumi.StringPtrInput
	// The status of the lifecycle policy.
	Status pulumi.StringPtrInput
	// Key-value map of resource tags for the Image Builder Lifecycle Policy. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
}

func (LifecyclePolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*lifecyclePolicyState)(nil)).Elem()
}

type lifecyclePolicyArgs struct {
	// description for the lifecycle policy.
	Description *string `pulumi:"description"`
	// The Amazon Resource Name (ARN) for the IAM role you create that grants Image Builder access to run lifecycle actions. More information about this role can be found [`here`](https://docs.aws.amazon.com/imagebuilder/latest/userguide/image-lifecycle-prerequisites.html#image-lifecycle-prereq-role).
	ExecutionRole string `pulumi:"executionRole"`
	// The name of the lifecycle policy to create.
	Name *string `pulumi:"name"`
	// Configuration block with policy details. Detailed below.
	PolicyDetails []LifecyclePolicyPolicyDetail `pulumi:"policyDetails"`
	// Selection criteria for the resources that the lifecycle policy applies to. Detailed below.
	//
	// The following arguments are optional:
	ResourceSelection *LifecyclePolicyResourceSelection `pulumi:"resourceSelection"`
	// The type of Image Builder resource that the lifecycle policy applies to. Valid values: `AMI_IMAGE` or `CONTAINER_IMAGE`.
	ResourceType string `pulumi:"resourceType"`
	// The status of the lifecycle policy.
	Status *string `pulumi:"status"`
	// Key-value map of resource tags for the Image Builder Lifecycle Policy. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a LifecyclePolicy resource.
type LifecyclePolicyArgs struct {
	// description for the lifecycle policy.
	Description pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) for the IAM role you create that grants Image Builder access to run lifecycle actions. More information about this role can be found [`here`](https://docs.aws.amazon.com/imagebuilder/latest/userguide/image-lifecycle-prerequisites.html#image-lifecycle-prereq-role).
	ExecutionRole pulumi.StringInput
	// The name of the lifecycle policy to create.
	Name pulumi.StringPtrInput
	// Configuration block with policy details. Detailed below.
	PolicyDetails LifecyclePolicyPolicyDetailArrayInput
	// Selection criteria for the resources that the lifecycle policy applies to. Detailed below.
	//
	// The following arguments are optional:
	ResourceSelection LifecyclePolicyResourceSelectionPtrInput
	// The type of Image Builder resource that the lifecycle policy applies to. Valid values: `AMI_IMAGE` or `CONTAINER_IMAGE`.
	ResourceType pulumi.StringInput
	// The status of the lifecycle policy.
	Status pulumi.StringPtrInput
	// Key-value map of resource tags for the Image Builder Lifecycle Policy. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
}

func (LifecyclePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lifecyclePolicyArgs)(nil)).Elem()
}

type LifecyclePolicyInput interface {
	pulumi.Input

	ToLifecyclePolicyOutput() LifecyclePolicyOutput
	ToLifecyclePolicyOutputWithContext(ctx context.Context) LifecyclePolicyOutput
}

func (*LifecyclePolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**LifecyclePolicy)(nil)).Elem()
}

func (i *LifecyclePolicy) ToLifecyclePolicyOutput() LifecyclePolicyOutput {
	return i.ToLifecyclePolicyOutputWithContext(context.Background())
}

func (i *LifecyclePolicy) ToLifecyclePolicyOutputWithContext(ctx context.Context) LifecyclePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyOutput)
}

// LifecyclePolicyArrayInput is an input type that accepts LifecyclePolicyArray and LifecyclePolicyArrayOutput values.
// You can construct a concrete instance of `LifecyclePolicyArrayInput` via:
//
//	LifecyclePolicyArray{ LifecyclePolicyArgs{...} }
type LifecyclePolicyArrayInput interface {
	pulumi.Input

	ToLifecyclePolicyArrayOutput() LifecyclePolicyArrayOutput
	ToLifecyclePolicyArrayOutputWithContext(context.Context) LifecyclePolicyArrayOutput
}

type LifecyclePolicyArray []LifecyclePolicyInput

func (LifecyclePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LifecyclePolicy)(nil)).Elem()
}

func (i LifecyclePolicyArray) ToLifecyclePolicyArrayOutput() LifecyclePolicyArrayOutput {
	return i.ToLifecyclePolicyArrayOutputWithContext(context.Background())
}

func (i LifecyclePolicyArray) ToLifecyclePolicyArrayOutputWithContext(ctx context.Context) LifecyclePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyArrayOutput)
}

// LifecyclePolicyMapInput is an input type that accepts LifecyclePolicyMap and LifecyclePolicyMapOutput values.
// You can construct a concrete instance of `LifecyclePolicyMapInput` via:
//
//	LifecyclePolicyMap{ "key": LifecyclePolicyArgs{...} }
type LifecyclePolicyMapInput interface {
	pulumi.Input

	ToLifecyclePolicyMapOutput() LifecyclePolicyMapOutput
	ToLifecyclePolicyMapOutputWithContext(context.Context) LifecyclePolicyMapOutput
}

type LifecyclePolicyMap map[string]LifecyclePolicyInput

func (LifecyclePolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LifecyclePolicy)(nil)).Elem()
}

func (i LifecyclePolicyMap) ToLifecyclePolicyMapOutput() LifecyclePolicyMapOutput {
	return i.ToLifecyclePolicyMapOutputWithContext(context.Background())
}

func (i LifecyclePolicyMap) ToLifecyclePolicyMapOutputWithContext(ctx context.Context) LifecyclePolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyMapOutput)
}

type LifecyclePolicyOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LifecyclePolicy)(nil)).Elem()
}

func (o LifecyclePolicyOutput) ToLifecyclePolicyOutput() LifecyclePolicyOutput {
	return o
}

func (o LifecyclePolicyOutput) ToLifecyclePolicyOutputWithContext(ctx context.Context) LifecyclePolicyOutput {
	return o
}

// Amazon Resource Name (ARN) of the lifecycle policy.
func (o LifecyclePolicyOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *LifecyclePolicy) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// description for the lifecycle policy.
func (o LifecyclePolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LifecyclePolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) for the IAM role you create that grants Image Builder access to run lifecycle actions. More information about this role can be found [`here`](https://docs.aws.amazon.com/imagebuilder/latest/userguide/image-lifecycle-prerequisites.html#image-lifecycle-prereq-role).
func (o LifecyclePolicyOutput) ExecutionRole() pulumi.StringOutput {
	return o.ApplyT(func(v *LifecyclePolicy) pulumi.StringOutput { return v.ExecutionRole }).(pulumi.StringOutput)
}

// The name of the lifecycle policy to create.
func (o LifecyclePolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LifecyclePolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Configuration block with policy details. Detailed below.
func (o LifecyclePolicyOutput) PolicyDetails() LifecyclePolicyPolicyDetailArrayOutput {
	return o.ApplyT(func(v *LifecyclePolicy) LifecyclePolicyPolicyDetailArrayOutput { return v.PolicyDetails }).(LifecyclePolicyPolicyDetailArrayOutput)
}

// Selection criteria for the resources that the lifecycle policy applies to. Detailed below.
//
// The following arguments are optional:
func (o LifecyclePolicyOutput) ResourceSelection() LifecyclePolicyResourceSelectionPtrOutput {
	return o.ApplyT(func(v *LifecyclePolicy) LifecyclePolicyResourceSelectionPtrOutput { return v.ResourceSelection }).(LifecyclePolicyResourceSelectionPtrOutput)
}

// The type of Image Builder resource that the lifecycle policy applies to. Valid values: `AMI_IMAGE` or `CONTAINER_IMAGE`.
func (o LifecyclePolicyOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *LifecyclePolicy) pulumi.StringOutput { return v.ResourceType }).(pulumi.StringOutput)
}

// The status of the lifecycle policy.
func (o LifecyclePolicyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *LifecyclePolicy) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Key-value map of resource tags for the Image Builder Lifecycle Policy. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o LifecyclePolicyOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LifecyclePolicy) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o LifecyclePolicyOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LifecyclePolicy) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type LifecyclePolicyArrayOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LifecyclePolicy)(nil)).Elem()
}

func (o LifecyclePolicyArrayOutput) ToLifecyclePolicyArrayOutput() LifecyclePolicyArrayOutput {
	return o
}

func (o LifecyclePolicyArrayOutput) ToLifecyclePolicyArrayOutputWithContext(ctx context.Context) LifecyclePolicyArrayOutput {
	return o
}

func (o LifecyclePolicyArrayOutput) Index(i pulumi.IntInput) LifecyclePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LifecyclePolicy {
		return vs[0].([]*LifecyclePolicy)[vs[1].(int)]
	}).(LifecyclePolicyOutput)
}

type LifecyclePolicyMapOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LifecyclePolicy)(nil)).Elem()
}

func (o LifecyclePolicyMapOutput) ToLifecyclePolicyMapOutput() LifecyclePolicyMapOutput {
	return o
}

func (o LifecyclePolicyMapOutput) ToLifecyclePolicyMapOutputWithContext(ctx context.Context) LifecyclePolicyMapOutput {
	return o
}

func (o LifecyclePolicyMapOutput) MapIndex(k pulumi.StringInput) LifecyclePolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LifecyclePolicy {
		return vs[0].(map[string]*LifecyclePolicy)[vs[1].(string)]
	}).(LifecyclePolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LifecyclePolicyInput)(nil)).Elem(), &LifecyclePolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*LifecyclePolicyArrayInput)(nil)).Elem(), LifecyclePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LifecyclePolicyMapInput)(nil)).Elem(), LifecyclePolicyMap{})
	pulumi.RegisterOutputType(LifecyclePolicyOutput{})
	pulumi.RegisterOutputType(LifecyclePolicyArrayOutput{})
	pulumi.RegisterOutputType(LifecyclePolicyMapOutput{})
}
