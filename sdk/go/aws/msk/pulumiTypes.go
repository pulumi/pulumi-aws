// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package msk

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type ClusterBrokerNodeGroupInfo struct {
	// The distribution of broker nodes across availability zones ([documentation](https://docs.aws.amazon.com/msk/1.0/apireference/clusters.html#clusters-model-brokerazdistribution)). Currently the only valid value is `DEFAULT`.
	AzDistribution *string `pulumi:"azDistribution"`
	// A list of subnets to connect to in client VPC ([documentation](https://docs.aws.amazon.com/msk/1.0/apireference/clusters.html#clusters-prop-brokernodegroupinfo-clientsubnets)).
	ClientSubnets []string `pulumi:"clientSubnets"`
	// The size in GiB of the EBS volume for the data drive on each broker node.
	EbsVolumeSize int `pulumi:"ebsVolumeSize"`
	// Specify the instance type to use for the kafka brokers. e.g. kafka.m5.large. ([Pricing info](https://aws.amazon.com/msk/pricing/))
	InstanceType string `pulumi:"instanceType"`
	// A list of the security groups to associate with the elastic network interfaces to control who can communicate with the cluster.
	SecurityGroups []string `pulumi:"securityGroups"`
}

type ClusterBrokerNodeGroupInfoInput interface {
	pulumi.Input

	ToClusterBrokerNodeGroupInfoOutput() ClusterBrokerNodeGroupInfoOutput
	ToClusterBrokerNodeGroupInfoOutputWithContext(context.Context) ClusterBrokerNodeGroupInfoOutput
}

type ClusterBrokerNodeGroupInfoArgs struct {
	// The distribution of broker nodes across availability zones ([documentation](https://docs.aws.amazon.com/msk/1.0/apireference/clusters.html#clusters-model-brokerazdistribution)). Currently the only valid value is `DEFAULT`.
	AzDistribution pulumi.StringPtrInput `pulumi:"azDistribution"`
	// A list of subnets to connect to in client VPC ([documentation](https://docs.aws.amazon.com/msk/1.0/apireference/clusters.html#clusters-prop-brokernodegroupinfo-clientsubnets)).
	ClientSubnets pulumi.StringArrayInput `pulumi:"clientSubnets"`
	// The size in GiB of the EBS volume for the data drive on each broker node.
	EbsVolumeSize pulumi.IntInput `pulumi:"ebsVolumeSize"`
	// Specify the instance type to use for the kafka brokers. e.g. kafka.m5.large. ([Pricing info](https://aws.amazon.com/msk/pricing/))
	InstanceType pulumi.StringInput `pulumi:"instanceType"`
	// A list of the security groups to associate with the elastic network interfaces to control who can communicate with the cluster.
	SecurityGroups pulumi.StringArrayInput `pulumi:"securityGroups"`
}

func (ClusterBrokerNodeGroupInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterBrokerNodeGroupInfo)(nil)).Elem()
}

func (i ClusterBrokerNodeGroupInfoArgs) ToClusterBrokerNodeGroupInfoOutput() ClusterBrokerNodeGroupInfoOutput {
	return i.ToClusterBrokerNodeGroupInfoOutputWithContext(context.Background())
}

func (i ClusterBrokerNodeGroupInfoArgs) ToClusterBrokerNodeGroupInfoOutputWithContext(ctx context.Context) ClusterBrokerNodeGroupInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterBrokerNodeGroupInfoOutput)
}

func (i ClusterBrokerNodeGroupInfoArgs) ToClusterBrokerNodeGroupInfoPtrOutput() ClusterBrokerNodeGroupInfoPtrOutput {
	return i.ToClusterBrokerNodeGroupInfoPtrOutputWithContext(context.Background())
}

func (i ClusterBrokerNodeGroupInfoArgs) ToClusterBrokerNodeGroupInfoPtrOutputWithContext(ctx context.Context) ClusterBrokerNodeGroupInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterBrokerNodeGroupInfoOutput).ToClusterBrokerNodeGroupInfoPtrOutputWithContext(ctx)
}

type ClusterBrokerNodeGroupInfoPtrInput interface {
	pulumi.Input

	ToClusterBrokerNodeGroupInfoPtrOutput() ClusterBrokerNodeGroupInfoPtrOutput
	ToClusterBrokerNodeGroupInfoPtrOutputWithContext(context.Context) ClusterBrokerNodeGroupInfoPtrOutput
}

type clusterBrokerNodeGroupInfoPtrType ClusterBrokerNodeGroupInfoArgs

func ClusterBrokerNodeGroupInfoPtr(v *ClusterBrokerNodeGroupInfoArgs) ClusterBrokerNodeGroupInfoPtrInput {	return (*clusterBrokerNodeGroupInfoPtrType)(v)
}

func (*clusterBrokerNodeGroupInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterBrokerNodeGroupInfo)(nil)).Elem()
}

func (i *clusterBrokerNodeGroupInfoPtrType) ToClusterBrokerNodeGroupInfoPtrOutput() ClusterBrokerNodeGroupInfoPtrOutput {
	return i.ToClusterBrokerNodeGroupInfoPtrOutputWithContext(context.Background())
}

func (i *clusterBrokerNodeGroupInfoPtrType) ToClusterBrokerNodeGroupInfoPtrOutputWithContext(ctx context.Context) ClusterBrokerNodeGroupInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterBrokerNodeGroupInfoPtrOutput)
}

type ClusterBrokerNodeGroupInfoOutput struct { *pulumi.OutputState }

func (ClusterBrokerNodeGroupInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterBrokerNodeGroupInfo)(nil)).Elem()
}

func (o ClusterBrokerNodeGroupInfoOutput) ToClusterBrokerNodeGroupInfoOutput() ClusterBrokerNodeGroupInfoOutput {
	return o
}

func (o ClusterBrokerNodeGroupInfoOutput) ToClusterBrokerNodeGroupInfoOutputWithContext(ctx context.Context) ClusterBrokerNodeGroupInfoOutput {
	return o
}

func (o ClusterBrokerNodeGroupInfoOutput) ToClusterBrokerNodeGroupInfoPtrOutput() ClusterBrokerNodeGroupInfoPtrOutput {
	return o.ToClusterBrokerNodeGroupInfoPtrOutputWithContext(context.Background())
}

func (o ClusterBrokerNodeGroupInfoOutput) ToClusterBrokerNodeGroupInfoPtrOutputWithContext(ctx context.Context) ClusterBrokerNodeGroupInfoPtrOutput {
	return o.ApplyT(func(v ClusterBrokerNodeGroupInfo) *ClusterBrokerNodeGroupInfo {
		return &v
	}).(ClusterBrokerNodeGroupInfoPtrOutput)
}
// The distribution of broker nodes across availability zones ([documentation](https://docs.aws.amazon.com/msk/1.0/apireference/clusters.html#clusters-model-brokerazdistribution)). Currently the only valid value is `DEFAULT`.
func (o ClusterBrokerNodeGroupInfoOutput) AzDistribution() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ClusterBrokerNodeGroupInfo) *string { return v.AzDistribution }).(pulumi.StringPtrOutput)
}

// A list of subnets to connect to in client VPC ([documentation](https://docs.aws.amazon.com/msk/1.0/apireference/clusters.html#clusters-prop-brokernodegroupinfo-clientsubnets)).
func (o ClusterBrokerNodeGroupInfoOutput) ClientSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func (v ClusterBrokerNodeGroupInfo) []string { return v.ClientSubnets }).(pulumi.StringArrayOutput)
}

// The size in GiB of the EBS volume for the data drive on each broker node.
func (o ClusterBrokerNodeGroupInfoOutput) EbsVolumeSize() pulumi.IntOutput {
	return o.ApplyT(func (v ClusterBrokerNodeGroupInfo) int { return v.EbsVolumeSize }).(pulumi.IntOutput)
}

// Specify the instance type to use for the kafka brokers. e.g. kafka.m5.large. ([Pricing info](https://aws.amazon.com/msk/pricing/))
func (o ClusterBrokerNodeGroupInfoOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func (v ClusterBrokerNodeGroupInfo) string { return v.InstanceType }).(pulumi.StringOutput)
}

// A list of the security groups to associate with the elastic network interfaces to control who can communicate with the cluster.
func (o ClusterBrokerNodeGroupInfoOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func (v ClusterBrokerNodeGroupInfo) []string { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

type ClusterBrokerNodeGroupInfoPtrOutput struct { *pulumi.OutputState}

func (ClusterBrokerNodeGroupInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterBrokerNodeGroupInfo)(nil)).Elem()
}

func (o ClusterBrokerNodeGroupInfoPtrOutput) ToClusterBrokerNodeGroupInfoPtrOutput() ClusterBrokerNodeGroupInfoPtrOutput {
	return o
}

func (o ClusterBrokerNodeGroupInfoPtrOutput) ToClusterBrokerNodeGroupInfoPtrOutputWithContext(ctx context.Context) ClusterBrokerNodeGroupInfoPtrOutput {
	return o
}

func (o ClusterBrokerNodeGroupInfoPtrOutput) Elem() ClusterBrokerNodeGroupInfoOutput {
	return o.ApplyT(func (v *ClusterBrokerNodeGroupInfo) ClusterBrokerNodeGroupInfo { return *v }).(ClusterBrokerNodeGroupInfoOutput)
}

// The distribution of broker nodes across availability zones ([documentation](https://docs.aws.amazon.com/msk/1.0/apireference/clusters.html#clusters-model-brokerazdistribution)). Currently the only valid value is `DEFAULT`.
func (o ClusterBrokerNodeGroupInfoPtrOutput) AzDistribution() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ClusterBrokerNodeGroupInfo) *string { return v.AzDistribution }).(pulumi.StringPtrOutput)
}

// A list of subnets to connect to in client VPC ([documentation](https://docs.aws.amazon.com/msk/1.0/apireference/clusters.html#clusters-prop-brokernodegroupinfo-clientsubnets)).
func (o ClusterBrokerNodeGroupInfoPtrOutput) ClientSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func (v ClusterBrokerNodeGroupInfo) []string { return v.ClientSubnets }).(pulumi.StringArrayOutput)
}

// The size in GiB of the EBS volume for the data drive on each broker node.
func (o ClusterBrokerNodeGroupInfoPtrOutput) EbsVolumeSize() pulumi.IntOutput {
	return o.ApplyT(func (v ClusterBrokerNodeGroupInfo) int { return v.EbsVolumeSize }).(pulumi.IntOutput)
}

// Specify the instance type to use for the kafka brokers. e.g. kafka.m5.large. ([Pricing info](https://aws.amazon.com/msk/pricing/))
func (o ClusterBrokerNodeGroupInfoPtrOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func (v ClusterBrokerNodeGroupInfo) string { return v.InstanceType }).(pulumi.StringOutput)
}

// A list of the security groups to associate with the elastic network interfaces to control who can communicate with the cluster.
func (o ClusterBrokerNodeGroupInfoPtrOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func (v ClusterBrokerNodeGroupInfo) []string { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

type ClusterClientAuthentication struct {
	// Configuration block for specifying TLS client authentication. See below.
	Tls *ClusterClientAuthenticationTls `pulumi:"tls"`
}

type ClusterClientAuthenticationInput interface {
	pulumi.Input

	ToClusterClientAuthenticationOutput() ClusterClientAuthenticationOutput
	ToClusterClientAuthenticationOutputWithContext(context.Context) ClusterClientAuthenticationOutput
}

type ClusterClientAuthenticationArgs struct {
	// Configuration block for specifying TLS client authentication. See below.
	Tls ClusterClientAuthenticationTlsPtrInput `pulumi:"tls"`
}

func (ClusterClientAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterClientAuthentication)(nil)).Elem()
}

func (i ClusterClientAuthenticationArgs) ToClusterClientAuthenticationOutput() ClusterClientAuthenticationOutput {
	return i.ToClusterClientAuthenticationOutputWithContext(context.Background())
}

func (i ClusterClientAuthenticationArgs) ToClusterClientAuthenticationOutputWithContext(ctx context.Context) ClusterClientAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterClientAuthenticationOutput)
}

func (i ClusterClientAuthenticationArgs) ToClusterClientAuthenticationPtrOutput() ClusterClientAuthenticationPtrOutput {
	return i.ToClusterClientAuthenticationPtrOutputWithContext(context.Background())
}

func (i ClusterClientAuthenticationArgs) ToClusterClientAuthenticationPtrOutputWithContext(ctx context.Context) ClusterClientAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterClientAuthenticationOutput).ToClusterClientAuthenticationPtrOutputWithContext(ctx)
}

type ClusterClientAuthenticationPtrInput interface {
	pulumi.Input

	ToClusterClientAuthenticationPtrOutput() ClusterClientAuthenticationPtrOutput
	ToClusterClientAuthenticationPtrOutputWithContext(context.Context) ClusterClientAuthenticationPtrOutput
}

type clusterClientAuthenticationPtrType ClusterClientAuthenticationArgs

func ClusterClientAuthenticationPtr(v *ClusterClientAuthenticationArgs) ClusterClientAuthenticationPtrInput {	return (*clusterClientAuthenticationPtrType)(v)
}

func (*clusterClientAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterClientAuthentication)(nil)).Elem()
}

func (i *clusterClientAuthenticationPtrType) ToClusterClientAuthenticationPtrOutput() ClusterClientAuthenticationPtrOutput {
	return i.ToClusterClientAuthenticationPtrOutputWithContext(context.Background())
}

func (i *clusterClientAuthenticationPtrType) ToClusterClientAuthenticationPtrOutputWithContext(ctx context.Context) ClusterClientAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterClientAuthenticationPtrOutput)
}

type ClusterClientAuthenticationOutput struct { *pulumi.OutputState }

func (ClusterClientAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterClientAuthentication)(nil)).Elem()
}

func (o ClusterClientAuthenticationOutput) ToClusterClientAuthenticationOutput() ClusterClientAuthenticationOutput {
	return o
}

func (o ClusterClientAuthenticationOutput) ToClusterClientAuthenticationOutputWithContext(ctx context.Context) ClusterClientAuthenticationOutput {
	return o
}

func (o ClusterClientAuthenticationOutput) ToClusterClientAuthenticationPtrOutput() ClusterClientAuthenticationPtrOutput {
	return o.ToClusterClientAuthenticationPtrOutputWithContext(context.Background())
}

func (o ClusterClientAuthenticationOutput) ToClusterClientAuthenticationPtrOutputWithContext(ctx context.Context) ClusterClientAuthenticationPtrOutput {
	return o.ApplyT(func(v ClusterClientAuthentication) *ClusterClientAuthentication {
		return &v
	}).(ClusterClientAuthenticationPtrOutput)
}
// Configuration block for specifying TLS client authentication. See below.
func (o ClusterClientAuthenticationOutput) Tls() ClusterClientAuthenticationTlsPtrOutput {
	return o.ApplyT(func (v ClusterClientAuthentication) *ClusterClientAuthenticationTls { return v.Tls }).(ClusterClientAuthenticationTlsPtrOutput)
}

type ClusterClientAuthenticationPtrOutput struct { *pulumi.OutputState}

func (ClusterClientAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterClientAuthentication)(nil)).Elem()
}

func (o ClusterClientAuthenticationPtrOutput) ToClusterClientAuthenticationPtrOutput() ClusterClientAuthenticationPtrOutput {
	return o
}

func (o ClusterClientAuthenticationPtrOutput) ToClusterClientAuthenticationPtrOutputWithContext(ctx context.Context) ClusterClientAuthenticationPtrOutput {
	return o
}

func (o ClusterClientAuthenticationPtrOutput) Elem() ClusterClientAuthenticationOutput {
	return o.ApplyT(func (v *ClusterClientAuthentication) ClusterClientAuthentication { return *v }).(ClusterClientAuthenticationOutput)
}

// Configuration block for specifying TLS client authentication. See below.
func (o ClusterClientAuthenticationPtrOutput) Tls() ClusterClientAuthenticationTlsPtrOutput {
	return o.ApplyT(func (v ClusterClientAuthentication) *ClusterClientAuthenticationTls { return v.Tls }).(ClusterClientAuthenticationTlsPtrOutput)
}

type ClusterClientAuthenticationTls struct {
	// List of ACM Certificate Authority Amazon Resource Names (ARNs).
	CertificateAuthorityArns []string `pulumi:"certificateAuthorityArns"`
}

type ClusterClientAuthenticationTlsInput interface {
	pulumi.Input

	ToClusterClientAuthenticationTlsOutput() ClusterClientAuthenticationTlsOutput
	ToClusterClientAuthenticationTlsOutputWithContext(context.Context) ClusterClientAuthenticationTlsOutput
}

type ClusterClientAuthenticationTlsArgs struct {
	// List of ACM Certificate Authority Amazon Resource Names (ARNs).
	CertificateAuthorityArns pulumi.StringArrayInput `pulumi:"certificateAuthorityArns"`
}

func (ClusterClientAuthenticationTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterClientAuthenticationTls)(nil)).Elem()
}

func (i ClusterClientAuthenticationTlsArgs) ToClusterClientAuthenticationTlsOutput() ClusterClientAuthenticationTlsOutput {
	return i.ToClusterClientAuthenticationTlsOutputWithContext(context.Background())
}

func (i ClusterClientAuthenticationTlsArgs) ToClusterClientAuthenticationTlsOutputWithContext(ctx context.Context) ClusterClientAuthenticationTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterClientAuthenticationTlsOutput)
}

func (i ClusterClientAuthenticationTlsArgs) ToClusterClientAuthenticationTlsPtrOutput() ClusterClientAuthenticationTlsPtrOutput {
	return i.ToClusterClientAuthenticationTlsPtrOutputWithContext(context.Background())
}

func (i ClusterClientAuthenticationTlsArgs) ToClusterClientAuthenticationTlsPtrOutputWithContext(ctx context.Context) ClusterClientAuthenticationTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterClientAuthenticationTlsOutput).ToClusterClientAuthenticationTlsPtrOutputWithContext(ctx)
}

type ClusterClientAuthenticationTlsPtrInput interface {
	pulumi.Input

	ToClusterClientAuthenticationTlsPtrOutput() ClusterClientAuthenticationTlsPtrOutput
	ToClusterClientAuthenticationTlsPtrOutputWithContext(context.Context) ClusterClientAuthenticationTlsPtrOutput
}

type clusterClientAuthenticationTlsPtrType ClusterClientAuthenticationTlsArgs

func ClusterClientAuthenticationTlsPtr(v *ClusterClientAuthenticationTlsArgs) ClusterClientAuthenticationTlsPtrInput {	return (*clusterClientAuthenticationTlsPtrType)(v)
}

func (*clusterClientAuthenticationTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterClientAuthenticationTls)(nil)).Elem()
}

func (i *clusterClientAuthenticationTlsPtrType) ToClusterClientAuthenticationTlsPtrOutput() ClusterClientAuthenticationTlsPtrOutput {
	return i.ToClusterClientAuthenticationTlsPtrOutputWithContext(context.Background())
}

func (i *clusterClientAuthenticationTlsPtrType) ToClusterClientAuthenticationTlsPtrOutputWithContext(ctx context.Context) ClusterClientAuthenticationTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterClientAuthenticationTlsPtrOutput)
}

type ClusterClientAuthenticationTlsOutput struct { *pulumi.OutputState }

func (ClusterClientAuthenticationTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterClientAuthenticationTls)(nil)).Elem()
}

func (o ClusterClientAuthenticationTlsOutput) ToClusterClientAuthenticationTlsOutput() ClusterClientAuthenticationTlsOutput {
	return o
}

func (o ClusterClientAuthenticationTlsOutput) ToClusterClientAuthenticationTlsOutputWithContext(ctx context.Context) ClusterClientAuthenticationTlsOutput {
	return o
}

func (o ClusterClientAuthenticationTlsOutput) ToClusterClientAuthenticationTlsPtrOutput() ClusterClientAuthenticationTlsPtrOutput {
	return o.ToClusterClientAuthenticationTlsPtrOutputWithContext(context.Background())
}

func (o ClusterClientAuthenticationTlsOutput) ToClusterClientAuthenticationTlsPtrOutputWithContext(ctx context.Context) ClusterClientAuthenticationTlsPtrOutput {
	return o.ApplyT(func(v ClusterClientAuthenticationTls) *ClusterClientAuthenticationTls {
		return &v
	}).(ClusterClientAuthenticationTlsPtrOutput)
}
// List of ACM Certificate Authority Amazon Resource Names (ARNs).
func (o ClusterClientAuthenticationTlsOutput) CertificateAuthorityArns() pulumi.StringArrayOutput {
	return o.ApplyT(func (v ClusterClientAuthenticationTls) []string { return v.CertificateAuthorityArns }).(pulumi.StringArrayOutput)
}

type ClusterClientAuthenticationTlsPtrOutput struct { *pulumi.OutputState}

func (ClusterClientAuthenticationTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterClientAuthenticationTls)(nil)).Elem()
}

func (o ClusterClientAuthenticationTlsPtrOutput) ToClusterClientAuthenticationTlsPtrOutput() ClusterClientAuthenticationTlsPtrOutput {
	return o
}

func (o ClusterClientAuthenticationTlsPtrOutput) ToClusterClientAuthenticationTlsPtrOutputWithContext(ctx context.Context) ClusterClientAuthenticationTlsPtrOutput {
	return o
}

func (o ClusterClientAuthenticationTlsPtrOutput) Elem() ClusterClientAuthenticationTlsOutput {
	return o.ApplyT(func (v *ClusterClientAuthenticationTls) ClusterClientAuthenticationTls { return *v }).(ClusterClientAuthenticationTlsOutput)
}

// List of ACM Certificate Authority Amazon Resource Names (ARNs).
func (o ClusterClientAuthenticationTlsPtrOutput) CertificateAuthorityArns() pulumi.StringArrayOutput {
	return o.ApplyT(func (v ClusterClientAuthenticationTls) []string { return v.CertificateAuthorityArns }).(pulumi.StringArrayOutput)
}

type ClusterConfigurationInfo struct {
	// Amazon Resource Name (ARN) of the MSK Configuration to use in the cluster.
	Arn string `pulumi:"arn"`
	// Revision of the MSK Configuration to use in the cluster.
	Revision int `pulumi:"revision"`
}

type ClusterConfigurationInfoInput interface {
	pulumi.Input

	ToClusterConfigurationInfoOutput() ClusterConfigurationInfoOutput
	ToClusterConfigurationInfoOutputWithContext(context.Context) ClusterConfigurationInfoOutput
}

type ClusterConfigurationInfoArgs struct {
	// Amazon Resource Name (ARN) of the MSK Configuration to use in the cluster.
	Arn pulumi.StringInput `pulumi:"arn"`
	// Revision of the MSK Configuration to use in the cluster.
	Revision pulumi.IntInput `pulumi:"revision"`
}

func (ClusterConfigurationInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConfigurationInfo)(nil)).Elem()
}

func (i ClusterConfigurationInfoArgs) ToClusterConfigurationInfoOutput() ClusterConfigurationInfoOutput {
	return i.ToClusterConfigurationInfoOutputWithContext(context.Background())
}

func (i ClusterConfigurationInfoArgs) ToClusterConfigurationInfoOutputWithContext(ctx context.Context) ClusterConfigurationInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigurationInfoOutput)
}

func (i ClusterConfigurationInfoArgs) ToClusterConfigurationInfoPtrOutput() ClusterConfigurationInfoPtrOutput {
	return i.ToClusterConfigurationInfoPtrOutputWithContext(context.Background())
}

func (i ClusterConfigurationInfoArgs) ToClusterConfigurationInfoPtrOutputWithContext(ctx context.Context) ClusterConfigurationInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigurationInfoOutput).ToClusterConfigurationInfoPtrOutputWithContext(ctx)
}

type ClusterConfigurationInfoPtrInput interface {
	pulumi.Input

	ToClusterConfigurationInfoPtrOutput() ClusterConfigurationInfoPtrOutput
	ToClusterConfigurationInfoPtrOutputWithContext(context.Context) ClusterConfigurationInfoPtrOutput
}

type clusterConfigurationInfoPtrType ClusterConfigurationInfoArgs

func ClusterConfigurationInfoPtr(v *ClusterConfigurationInfoArgs) ClusterConfigurationInfoPtrInput {	return (*clusterConfigurationInfoPtrType)(v)
}

func (*clusterConfigurationInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterConfigurationInfo)(nil)).Elem()
}

func (i *clusterConfigurationInfoPtrType) ToClusterConfigurationInfoPtrOutput() ClusterConfigurationInfoPtrOutput {
	return i.ToClusterConfigurationInfoPtrOutputWithContext(context.Background())
}

func (i *clusterConfigurationInfoPtrType) ToClusterConfigurationInfoPtrOutputWithContext(ctx context.Context) ClusterConfigurationInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigurationInfoPtrOutput)
}

type ClusterConfigurationInfoOutput struct { *pulumi.OutputState }

func (ClusterConfigurationInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConfigurationInfo)(nil)).Elem()
}

func (o ClusterConfigurationInfoOutput) ToClusterConfigurationInfoOutput() ClusterConfigurationInfoOutput {
	return o
}

func (o ClusterConfigurationInfoOutput) ToClusterConfigurationInfoOutputWithContext(ctx context.Context) ClusterConfigurationInfoOutput {
	return o
}

func (o ClusterConfigurationInfoOutput) ToClusterConfigurationInfoPtrOutput() ClusterConfigurationInfoPtrOutput {
	return o.ToClusterConfigurationInfoPtrOutputWithContext(context.Background())
}

func (o ClusterConfigurationInfoOutput) ToClusterConfigurationInfoPtrOutputWithContext(ctx context.Context) ClusterConfigurationInfoPtrOutput {
	return o.ApplyT(func(v ClusterConfigurationInfo) *ClusterConfigurationInfo {
		return &v
	}).(ClusterConfigurationInfoPtrOutput)
}
// Amazon Resource Name (ARN) of the MSK Configuration to use in the cluster.
func (o ClusterConfigurationInfoOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func (v ClusterConfigurationInfo) string { return v.Arn }).(pulumi.StringOutput)
}

// Revision of the MSK Configuration to use in the cluster.
func (o ClusterConfigurationInfoOutput) Revision() pulumi.IntOutput {
	return o.ApplyT(func (v ClusterConfigurationInfo) int { return v.Revision }).(pulumi.IntOutput)
}

type ClusterConfigurationInfoPtrOutput struct { *pulumi.OutputState}

func (ClusterConfigurationInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterConfigurationInfo)(nil)).Elem()
}

func (o ClusterConfigurationInfoPtrOutput) ToClusterConfigurationInfoPtrOutput() ClusterConfigurationInfoPtrOutput {
	return o
}

func (o ClusterConfigurationInfoPtrOutput) ToClusterConfigurationInfoPtrOutputWithContext(ctx context.Context) ClusterConfigurationInfoPtrOutput {
	return o
}

func (o ClusterConfigurationInfoPtrOutput) Elem() ClusterConfigurationInfoOutput {
	return o.ApplyT(func (v *ClusterConfigurationInfo) ClusterConfigurationInfo { return *v }).(ClusterConfigurationInfoOutput)
}

// Amazon Resource Name (ARN) of the MSK Configuration to use in the cluster.
func (o ClusterConfigurationInfoPtrOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func (v ClusterConfigurationInfo) string { return v.Arn }).(pulumi.StringOutput)
}

// Revision of the MSK Configuration to use in the cluster.
func (o ClusterConfigurationInfoPtrOutput) Revision() pulumi.IntOutput {
	return o.ApplyT(func (v ClusterConfigurationInfo) int { return v.Revision }).(pulumi.IntOutput)
}

type ClusterEncryptionInfo struct {
	// You may specify a KMS key short ID or ARN (it will always output an ARN) to use for encrypting your data at rest.  If no key is specified, an AWS managed KMS ('aws/msk' managed service) key will be used for encrypting the data at rest.
	EncryptionAtRestKmsKeyArn *string `pulumi:"encryptionAtRestKmsKeyArn"`
	// Configuration block to specify encryption in transit. See below.
	EncryptionInTransit *ClusterEncryptionInfoEncryptionInTransit `pulumi:"encryptionInTransit"`
}

type ClusterEncryptionInfoInput interface {
	pulumi.Input

	ToClusterEncryptionInfoOutput() ClusterEncryptionInfoOutput
	ToClusterEncryptionInfoOutputWithContext(context.Context) ClusterEncryptionInfoOutput
}

type ClusterEncryptionInfoArgs struct {
	// You may specify a KMS key short ID or ARN (it will always output an ARN) to use for encrypting your data at rest.  If no key is specified, an AWS managed KMS ('aws/msk' managed service) key will be used for encrypting the data at rest.
	EncryptionAtRestKmsKeyArn pulumi.StringPtrInput `pulumi:"encryptionAtRestKmsKeyArn"`
	// Configuration block to specify encryption in transit. See below.
	EncryptionInTransit ClusterEncryptionInfoEncryptionInTransitPtrInput `pulumi:"encryptionInTransit"`
}

func (ClusterEncryptionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionInfo)(nil)).Elem()
}

func (i ClusterEncryptionInfoArgs) ToClusterEncryptionInfoOutput() ClusterEncryptionInfoOutput {
	return i.ToClusterEncryptionInfoOutputWithContext(context.Background())
}

func (i ClusterEncryptionInfoArgs) ToClusterEncryptionInfoOutputWithContext(ctx context.Context) ClusterEncryptionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEncryptionInfoOutput)
}

func (i ClusterEncryptionInfoArgs) ToClusterEncryptionInfoPtrOutput() ClusterEncryptionInfoPtrOutput {
	return i.ToClusterEncryptionInfoPtrOutputWithContext(context.Background())
}

func (i ClusterEncryptionInfoArgs) ToClusterEncryptionInfoPtrOutputWithContext(ctx context.Context) ClusterEncryptionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEncryptionInfoOutput).ToClusterEncryptionInfoPtrOutputWithContext(ctx)
}

type ClusterEncryptionInfoPtrInput interface {
	pulumi.Input

	ToClusterEncryptionInfoPtrOutput() ClusterEncryptionInfoPtrOutput
	ToClusterEncryptionInfoPtrOutputWithContext(context.Context) ClusterEncryptionInfoPtrOutput
}

type clusterEncryptionInfoPtrType ClusterEncryptionInfoArgs

func ClusterEncryptionInfoPtr(v *ClusterEncryptionInfoArgs) ClusterEncryptionInfoPtrInput {	return (*clusterEncryptionInfoPtrType)(v)
}

func (*clusterEncryptionInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterEncryptionInfo)(nil)).Elem()
}

func (i *clusterEncryptionInfoPtrType) ToClusterEncryptionInfoPtrOutput() ClusterEncryptionInfoPtrOutput {
	return i.ToClusterEncryptionInfoPtrOutputWithContext(context.Background())
}

func (i *clusterEncryptionInfoPtrType) ToClusterEncryptionInfoPtrOutputWithContext(ctx context.Context) ClusterEncryptionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEncryptionInfoPtrOutput)
}

type ClusterEncryptionInfoOutput struct { *pulumi.OutputState }

func (ClusterEncryptionInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionInfo)(nil)).Elem()
}

func (o ClusterEncryptionInfoOutput) ToClusterEncryptionInfoOutput() ClusterEncryptionInfoOutput {
	return o
}

func (o ClusterEncryptionInfoOutput) ToClusterEncryptionInfoOutputWithContext(ctx context.Context) ClusterEncryptionInfoOutput {
	return o
}

func (o ClusterEncryptionInfoOutput) ToClusterEncryptionInfoPtrOutput() ClusterEncryptionInfoPtrOutput {
	return o.ToClusterEncryptionInfoPtrOutputWithContext(context.Background())
}

func (o ClusterEncryptionInfoOutput) ToClusterEncryptionInfoPtrOutputWithContext(ctx context.Context) ClusterEncryptionInfoPtrOutput {
	return o.ApplyT(func(v ClusterEncryptionInfo) *ClusterEncryptionInfo {
		return &v
	}).(ClusterEncryptionInfoPtrOutput)
}
// You may specify a KMS key short ID or ARN (it will always output an ARN) to use for encrypting your data at rest.  If no key is specified, an AWS managed KMS ('aws/msk' managed service) key will be used for encrypting the data at rest.
func (o ClusterEncryptionInfoOutput) EncryptionAtRestKmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ClusterEncryptionInfo) *string { return v.EncryptionAtRestKmsKeyArn }).(pulumi.StringPtrOutput)
}

// Configuration block to specify encryption in transit. See below.
func (o ClusterEncryptionInfoOutput) EncryptionInTransit() ClusterEncryptionInfoEncryptionInTransitPtrOutput {
	return o.ApplyT(func (v ClusterEncryptionInfo) *ClusterEncryptionInfoEncryptionInTransit { return v.EncryptionInTransit }).(ClusterEncryptionInfoEncryptionInTransitPtrOutput)
}

type ClusterEncryptionInfoPtrOutput struct { *pulumi.OutputState}

func (ClusterEncryptionInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterEncryptionInfo)(nil)).Elem()
}

func (o ClusterEncryptionInfoPtrOutput) ToClusterEncryptionInfoPtrOutput() ClusterEncryptionInfoPtrOutput {
	return o
}

func (o ClusterEncryptionInfoPtrOutput) ToClusterEncryptionInfoPtrOutputWithContext(ctx context.Context) ClusterEncryptionInfoPtrOutput {
	return o
}

func (o ClusterEncryptionInfoPtrOutput) Elem() ClusterEncryptionInfoOutput {
	return o.ApplyT(func (v *ClusterEncryptionInfo) ClusterEncryptionInfo { return *v }).(ClusterEncryptionInfoOutput)
}

// You may specify a KMS key short ID or ARN (it will always output an ARN) to use for encrypting your data at rest.  If no key is specified, an AWS managed KMS ('aws/msk' managed service) key will be used for encrypting the data at rest.
func (o ClusterEncryptionInfoPtrOutput) EncryptionAtRestKmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ClusterEncryptionInfo) *string { return v.EncryptionAtRestKmsKeyArn }).(pulumi.StringPtrOutput)
}

// Configuration block to specify encryption in transit. See below.
func (o ClusterEncryptionInfoPtrOutput) EncryptionInTransit() ClusterEncryptionInfoEncryptionInTransitPtrOutput {
	return o.ApplyT(func (v ClusterEncryptionInfo) *ClusterEncryptionInfoEncryptionInTransit { return v.EncryptionInTransit }).(ClusterEncryptionInfoEncryptionInTransitPtrOutput)
}

type ClusterEncryptionInfoEncryptionInTransit struct {
	// Encryption setting for data in transit between clients and brokers. Valid values: `TLS`, `TLS_PLAINTEXT`, and `PLAINTEXT`. Default value: `TLS_PLAINTEXT`.
	ClientBroker *string `pulumi:"clientBroker"`
	// Whether data communication among broker nodes is encrypted. Default value: `true`.
	InCluster *bool `pulumi:"inCluster"`
}

type ClusterEncryptionInfoEncryptionInTransitInput interface {
	pulumi.Input

	ToClusterEncryptionInfoEncryptionInTransitOutput() ClusterEncryptionInfoEncryptionInTransitOutput
	ToClusterEncryptionInfoEncryptionInTransitOutputWithContext(context.Context) ClusterEncryptionInfoEncryptionInTransitOutput
}

type ClusterEncryptionInfoEncryptionInTransitArgs struct {
	// Encryption setting for data in transit between clients and brokers. Valid values: `TLS`, `TLS_PLAINTEXT`, and `PLAINTEXT`. Default value: `TLS_PLAINTEXT`.
	ClientBroker pulumi.StringPtrInput `pulumi:"clientBroker"`
	// Whether data communication among broker nodes is encrypted. Default value: `true`.
	InCluster pulumi.BoolPtrInput `pulumi:"inCluster"`
}

func (ClusterEncryptionInfoEncryptionInTransitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionInfoEncryptionInTransit)(nil)).Elem()
}

func (i ClusterEncryptionInfoEncryptionInTransitArgs) ToClusterEncryptionInfoEncryptionInTransitOutput() ClusterEncryptionInfoEncryptionInTransitOutput {
	return i.ToClusterEncryptionInfoEncryptionInTransitOutputWithContext(context.Background())
}

func (i ClusterEncryptionInfoEncryptionInTransitArgs) ToClusterEncryptionInfoEncryptionInTransitOutputWithContext(ctx context.Context) ClusterEncryptionInfoEncryptionInTransitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEncryptionInfoEncryptionInTransitOutput)
}

func (i ClusterEncryptionInfoEncryptionInTransitArgs) ToClusterEncryptionInfoEncryptionInTransitPtrOutput() ClusterEncryptionInfoEncryptionInTransitPtrOutput {
	return i.ToClusterEncryptionInfoEncryptionInTransitPtrOutputWithContext(context.Background())
}

func (i ClusterEncryptionInfoEncryptionInTransitArgs) ToClusterEncryptionInfoEncryptionInTransitPtrOutputWithContext(ctx context.Context) ClusterEncryptionInfoEncryptionInTransitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEncryptionInfoEncryptionInTransitOutput).ToClusterEncryptionInfoEncryptionInTransitPtrOutputWithContext(ctx)
}

type ClusterEncryptionInfoEncryptionInTransitPtrInput interface {
	pulumi.Input

	ToClusterEncryptionInfoEncryptionInTransitPtrOutput() ClusterEncryptionInfoEncryptionInTransitPtrOutput
	ToClusterEncryptionInfoEncryptionInTransitPtrOutputWithContext(context.Context) ClusterEncryptionInfoEncryptionInTransitPtrOutput
}

type clusterEncryptionInfoEncryptionInTransitPtrType ClusterEncryptionInfoEncryptionInTransitArgs

func ClusterEncryptionInfoEncryptionInTransitPtr(v *ClusterEncryptionInfoEncryptionInTransitArgs) ClusterEncryptionInfoEncryptionInTransitPtrInput {	return (*clusterEncryptionInfoEncryptionInTransitPtrType)(v)
}

func (*clusterEncryptionInfoEncryptionInTransitPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterEncryptionInfoEncryptionInTransit)(nil)).Elem()
}

func (i *clusterEncryptionInfoEncryptionInTransitPtrType) ToClusterEncryptionInfoEncryptionInTransitPtrOutput() ClusterEncryptionInfoEncryptionInTransitPtrOutput {
	return i.ToClusterEncryptionInfoEncryptionInTransitPtrOutputWithContext(context.Background())
}

func (i *clusterEncryptionInfoEncryptionInTransitPtrType) ToClusterEncryptionInfoEncryptionInTransitPtrOutputWithContext(ctx context.Context) ClusterEncryptionInfoEncryptionInTransitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEncryptionInfoEncryptionInTransitPtrOutput)
}

type ClusterEncryptionInfoEncryptionInTransitOutput struct { *pulumi.OutputState }

func (ClusterEncryptionInfoEncryptionInTransitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionInfoEncryptionInTransit)(nil)).Elem()
}

func (o ClusterEncryptionInfoEncryptionInTransitOutput) ToClusterEncryptionInfoEncryptionInTransitOutput() ClusterEncryptionInfoEncryptionInTransitOutput {
	return o
}

func (o ClusterEncryptionInfoEncryptionInTransitOutput) ToClusterEncryptionInfoEncryptionInTransitOutputWithContext(ctx context.Context) ClusterEncryptionInfoEncryptionInTransitOutput {
	return o
}

func (o ClusterEncryptionInfoEncryptionInTransitOutput) ToClusterEncryptionInfoEncryptionInTransitPtrOutput() ClusterEncryptionInfoEncryptionInTransitPtrOutput {
	return o.ToClusterEncryptionInfoEncryptionInTransitPtrOutputWithContext(context.Background())
}

func (o ClusterEncryptionInfoEncryptionInTransitOutput) ToClusterEncryptionInfoEncryptionInTransitPtrOutputWithContext(ctx context.Context) ClusterEncryptionInfoEncryptionInTransitPtrOutput {
	return o.ApplyT(func(v ClusterEncryptionInfoEncryptionInTransit) *ClusterEncryptionInfoEncryptionInTransit {
		return &v
	}).(ClusterEncryptionInfoEncryptionInTransitPtrOutput)
}
// Encryption setting for data in transit between clients and brokers. Valid values: `TLS`, `TLS_PLAINTEXT`, and `PLAINTEXT`. Default value: `TLS_PLAINTEXT`.
func (o ClusterEncryptionInfoEncryptionInTransitOutput) ClientBroker() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ClusterEncryptionInfoEncryptionInTransit) *string { return v.ClientBroker }).(pulumi.StringPtrOutput)
}

// Whether data communication among broker nodes is encrypted. Default value: `true`.
func (o ClusterEncryptionInfoEncryptionInTransitOutput) InCluster() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v ClusterEncryptionInfoEncryptionInTransit) *bool { return v.InCluster }).(pulumi.BoolPtrOutput)
}

type ClusterEncryptionInfoEncryptionInTransitPtrOutput struct { *pulumi.OutputState}

func (ClusterEncryptionInfoEncryptionInTransitPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterEncryptionInfoEncryptionInTransit)(nil)).Elem()
}

func (o ClusterEncryptionInfoEncryptionInTransitPtrOutput) ToClusterEncryptionInfoEncryptionInTransitPtrOutput() ClusterEncryptionInfoEncryptionInTransitPtrOutput {
	return o
}

func (o ClusterEncryptionInfoEncryptionInTransitPtrOutput) ToClusterEncryptionInfoEncryptionInTransitPtrOutputWithContext(ctx context.Context) ClusterEncryptionInfoEncryptionInTransitPtrOutput {
	return o
}

func (o ClusterEncryptionInfoEncryptionInTransitPtrOutput) Elem() ClusterEncryptionInfoEncryptionInTransitOutput {
	return o.ApplyT(func (v *ClusterEncryptionInfoEncryptionInTransit) ClusterEncryptionInfoEncryptionInTransit { return *v }).(ClusterEncryptionInfoEncryptionInTransitOutput)
}

// Encryption setting for data in transit between clients and brokers. Valid values: `TLS`, `TLS_PLAINTEXT`, and `PLAINTEXT`. Default value: `TLS_PLAINTEXT`.
func (o ClusterEncryptionInfoEncryptionInTransitPtrOutput) ClientBroker() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ClusterEncryptionInfoEncryptionInTransit) *string { return v.ClientBroker }).(pulumi.StringPtrOutput)
}

// Whether data communication among broker nodes is encrypted. Default value: `true`.
func (o ClusterEncryptionInfoEncryptionInTransitPtrOutput) InCluster() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v ClusterEncryptionInfoEncryptionInTransit) *bool { return v.InCluster }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ClusterBrokerNodeGroupInfoOutput{})
	pulumi.RegisterOutputType(ClusterBrokerNodeGroupInfoPtrOutput{})
	pulumi.RegisterOutputType(ClusterClientAuthenticationOutput{})
	pulumi.RegisterOutputType(ClusterClientAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(ClusterClientAuthenticationTlsOutput{})
	pulumi.RegisterOutputType(ClusterClientAuthenticationTlsPtrOutput{})
	pulumi.RegisterOutputType(ClusterConfigurationInfoOutput{})
	pulumi.RegisterOutputType(ClusterConfigurationInfoPtrOutput{})
	pulumi.RegisterOutputType(ClusterEncryptionInfoOutput{})
	pulumi.RegisterOutputType(ClusterEncryptionInfoPtrOutput{})
	pulumi.RegisterOutputType(ClusterEncryptionInfoEncryptionInTransitOutput{})
	pulumi.RegisterOutputType(ClusterEncryptionInfoEncryptionInTransitPtrOutput{})
}
