// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package msk

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS Managed Streaming for Kafka VPC Connection.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/msk"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			var splat0 []interface{}
//			for _, val0 := range aws_subnet.Test {
//				splat0 = append(splat0, val0.Id)
//			}
//			_, err := msk.NewVpcConnection(ctx, "test", &msk.VpcConnectionArgs{
//				Authentication:   pulumi.String("SASL_IAM"),
//				TargetClusterArn: pulumi.String("aws_msk_cluster.arn"),
//				VpcId:            pulumi.Any(aws_vpc.Test.Id),
//				ClientSubnets:    toPulumiAnyArray(splat0),
//				SecurityGroups: pulumi.StringArray{
//					aws_security_group.Test.Id,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
//	func toPulumiAnyArray(arr []Any) pulumi.AnyArray {
//		var pulumiArr pulumi.AnyArray
//		for _, v := range arr {
//			pulumiArr = append(pulumiArr, pulumi.Any(v))
//		}
//		return pulumiArr
//	}
//
// ```
//
// ## Import
//
// In TODO v1.5.0 and later, use an `import` block to import MSK configurations using the configuration ARN. For exampleterraform import {
//
//	to = aws_msk_vpc_connection.example
//
//	id = "arn:aws:kafka:eu-west-2:123456789012:vpc-connection/123456789012/example/38173259-79cd-4ee8-87f3-682ea6023f48-2" } Using `TODO import`, import MSK configurations using the configuration ARN. For exampleconsole % TODO import aws_msk_vpc_connection.example arn:aws:kafka:eu-west-2:123456789012:vpc-connection/123456789012/example/38173259-79cd-4ee8-87f3-682ea6023f48-2
type VpcConnection struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the VPC connection.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The authentication type for the client VPC connection. Specify one of these auth type strings: SASL_IAM, SASL_SCRAM, or TLS.
	Authentication pulumi.StringOutput `pulumi:"authentication"`
	// The list of subnets in the client VPC to connect to.
	ClientSubnets pulumi.StringArrayOutput `pulumi:"clientSubnets"`
	// The security groups to attach to the ENIs for the broker nodes.
	SecurityGroups pulumi.StringArrayOutput `pulumi:"securityGroups"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// The Amazon Resource Name (ARN) of the cluster.
	TargetClusterArn pulumi.StringOutput `pulumi:"targetClusterArn"`
	// The VPC ID of the remote client.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewVpcConnection registers a new resource with the given unique name, arguments, and options.
func NewVpcConnection(ctx *pulumi.Context,
	name string, args *VpcConnectionArgs, opts ...pulumi.ResourceOption) (*VpcConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Authentication == nil {
		return nil, errors.New("invalid value for required argument 'Authentication'")
	}
	if args.ClientSubnets == nil {
		return nil, errors.New("invalid value for required argument 'ClientSubnets'")
	}
	if args.SecurityGroups == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroups'")
	}
	if args.TargetClusterArn == nil {
		return nil, errors.New("invalid value for required argument 'TargetClusterArn'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"tagsAll",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcConnection
	err := ctx.RegisterResource("aws:msk/vpcConnection:VpcConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcConnection gets an existing VpcConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcConnectionState, opts ...pulumi.ResourceOption) (*VpcConnection, error) {
	var resource VpcConnection
	err := ctx.ReadResource("aws:msk/vpcConnection:VpcConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcConnection resources.
type vpcConnectionState struct {
	// Amazon Resource Name (ARN) of the VPC connection.
	Arn *string `pulumi:"arn"`
	// The authentication type for the client VPC connection. Specify one of these auth type strings: SASL_IAM, SASL_SCRAM, or TLS.
	Authentication *string `pulumi:"authentication"`
	// The list of subnets in the client VPC to connect to.
	ClientSubnets []string `pulumi:"clientSubnets"`
	// The security groups to attach to the ENIs for the broker nodes.
	SecurityGroups []string `pulumi:"securityGroups"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The Amazon Resource Name (ARN) of the cluster.
	TargetClusterArn *string `pulumi:"targetClusterArn"`
	// The VPC ID of the remote client.
	VpcId *string `pulumi:"vpcId"`
}

type VpcConnectionState struct {
	// Amazon Resource Name (ARN) of the VPC connection.
	Arn pulumi.StringPtrInput
	// The authentication type for the client VPC connection. Specify one of these auth type strings: SASL_IAM, SASL_SCRAM, or TLS.
	Authentication pulumi.StringPtrInput
	// The list of subnets in the client VPC to connect to.
	ClientSubnets pulumi.StringArrayInput
	// The security groups to attach to the ENIs for the broker nodes.
	SecurityGroups pulumi.StringArrayInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
	// The Amazon Resource Name (ARN) of the cluster.
	TargetClusterArn pulumi.StringPtrInput
	// The VPC ID of the remote client.
	VpcId pulumi.StringPtrInput
}

func (VpcConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcConnectionState)(nil)).Elem()
}

type vpcConnectionArgs struct {
	// The authentication type for the client VPC connection. Specify one of these auth type strings: SASL_IAM, SASL_SCRAM, or TLS.
	Authentication string `pulumi:"authentication"`
	// The list of subnets in the client VPC to connect to.
	ClientSubnets []string `pulumi:"clientSubnets"`
	// The security groups to attach to the ENIs for the broker nodes.
	SecurityGroups []string `pulumi:"securityGroups"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The Amazon Resource Name (ARN) of the cluster.
	TargetClusterArn string `pulumi:"targetClusterArn"`
	// The VPC ID of the remote client.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a VpcConnection resource.
type VpcConnectionArgs struct {
	// The authentication type for the client VPC connection. Specify one of these auth type strings: SASL_IAM, SASL_SCRAM, or TLS.
	Authentication pulumi.StringInput
	// The list of subnets in the client VPC to connect to.
	ClientSubnets pulumi.StringArrayInput
	// The security groups to attach to the ENIs for the broker nodes.
	SecurityGroups pulumi.StringArrayInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// The Amazon Resource Name (ARN) of the cluster.
	TargetClusterArn pulumi.StringInput
	// The VPC ID of the remote client.
	VpcId pulumi.StringInput
}

func (VpcConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcConnectionArgs)(nil)).Elem()
}

type VpcConnectionInput interface {
	pulumi.Input

	ToVpcConnectionOutput() VpcConnectionOutput
	ToVpcConnectionOutputWithContext(ctx context.Context) VpcConnectionOutput
}

func (*VpcConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcConnection)(nil)).Elem()
}

func (i *VpcConnection) ToVpcConnectionOutput() VpcConnectionOutput {
	return i.ToVpcConnectionOutputWithContext(context.Background())
}

func (i *VpcConnection) ToVpcConnectionOutputWithContext(ctx context.Context) VpcConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcConnectionOutput)
}

func (i *VpcConnection) ToOutput(ctx context.Context) pulumix.Output[*VpcConnection] {
	return pulumix.Output[*VpcConnection]{
		OutputState: i.ToVpcConnectionOutputWithContext(ctx).OutputState,
	}
}

// VpcConnectionArrayInput is an input type that accepts VpcConnectionArray and VpcConnectionArrayOutput values.
// You can construct a concrete instance of `VpcConnectionArrayInput` via:
//
//	VpcConnectionArray{ VpcConnectionArgs{...} }
type VpcConnectionArrayInput interface {
	pulumi.Input

	ToVpcConnectionArrayOutput() VpcConnectionArrayOutput
	ToVpcConnectionArrayOutputWithContext(context.Context) VpcConnectionArrayOutput
}

type VpcConnectionArray []VpcConnectionInput

func (VpcConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcConnection)(nil)).Elem()
}

func (i VpcConnectionArray) ToVpcConnectionArrayOutput() VpcConnectionArrayOutput {
	return i.ToVpcConnectionArrayOutputWithContext(context.Background())
}

func (i VpcConnectionArray) ToVpcConnectionArrayOutputWithContext(ctx context.Context) VpcConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcConnectionArrayOutput)
}

func (i VpcConnectionArray) ToOutput(ctx context.Context) pulumix.Output[[]*VpcConnection] {
	return pulumix.Output[[]*VpcConnection]{
		OutputState: i.ToVpcConnectionArrayOutputWithContext(ctx).OutputState,
	}
}

// VpcConnectionMapInput is an input type that accepts VpcConnectionMap and VpcConnectionMapOutput values.
// You can construct a concrete instance of `VpcConnectionMapInput` via:
//
//	VpcConnectionMap{ "key": VpcConnectionArgs{...} }
type VpcConnectionMapInput interface {
	pulumi.Input

	ToVpcConnectionMapOutput() VpcConnectionMapOutput
	ToVpcConnectionMapOutputWithContext(context.Context) VpcConnectionMapOutput
}

type VpcConnectionMap map[string]VpcConnectionInput

func (VpcConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcConnection)(nil)).Elem()
}

func (i VpcConnectionMap) ToVpcConnectionMapOutput() VpcConnectionMapOutput {
	return i.ToVpcConnectionMapOutputWithContext(context.Background())
}

func (i VpcConnectionMap) ToVpcConnectionMapOutputWithContext(ctx context.Context) VpcConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcConnectionMapOutput)
}

func (i VpcConnectionMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*VpcConnection] {
	return pulumix.Output[map[string]*VpcConnection]{
		OutputState: i.ToVpcConnectionMapOutputWithContext(ctx).OutputState,
	}
}

type VpcConnectionOutput struct{ *pulumi.OutputState }

func (VpcConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcConnection)(nil)).Elem()
}

func (o VpcConnectionOutput) ToVpcConnectionOutput() VpcConnectionOutput {
	return o
}

func (o VpcConnectionOutput) ToVpcConnectionOutputWithContext(ctx context.Context) VpcConnectionOutput {
	return o
}

func (o VpcConnectionOutput) ToOutput(ctx context.Context) pulumix.Output[*VpcConnection] {
	return pulumix.Output[*VpcConnection]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the VPC connection.
func (o VpcConnectionOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcConnection) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The authentication type for the client VPC connection. Specify one of these auth type strings: SASL_IAM, SASL_SCRAM, or TLS.
func (o VpcConnectionOutput) Authentication() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcConnection) pulumi.StringOutput { return v.Authentication }).(pulumi.StringOutput)
}

// The list of subnets in the client VPC to connect to.
func (o VpcConnectionOutput) ClientSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VpcConnection) pulumi.StringArrayOutput { return v.ClientSubnets }).(pulumi.StringArrayOutput)
}

// The security groups to attach to the ENIs for the broker nodes.
func (o VpcConnectionOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VpcConnection) pulumi.StringArrayOutput { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o VpcConnectionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VpcConnection) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o VpcConnectionOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VpcConnection) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// The Amazon Resource Name (ARN) of the cluster.
func (o VpcConnectionOutput) TargetClusterArn() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcConnection) pulumi.StringOutput { return v.TargetClusterArn }).(pulumi.StringOutput)
}

// The VPC ID of the remote client.
func (o VpcConnectionOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcConnection) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type VpcConnectionArrayOutput struct{ *pulumi.OutputState }

func (VpcConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcConnection)(nil)).Elem()
}

func (o VpcConnectionArrayOutput) ToVpcConnectionArrayOutput() VpcConnectionArrayOutput {
	return o
}

func (o VpcConnectionArrayOutput) ToVpcConnectionArrayOutputWithContext(ctx context.Context) VpcConnectionArrayOutput {
	return o
}

func (o VpcConnectionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*VpcConnection] {
	return pulumix.Output[[]*VpcConnection]{
		OutputState: o.OutputState,
	}
}

func (o VpcConnectionArrayOutput) Index(i pulumi.IntInput) VpcConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpcConnection {
		return vs[0].([]*VpcConnection)[vs[1].(int)]
	}).(VpcConnectionOutput)
}

type VpcConnectionMapOutput struct{ *pulumi.OutputState }

func (VpcConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcConnection)(nil)).Elem()
}

func (o VpcConnectionMapOutput) ToVpcConnectionMapOutput() VpcConnectionMapOutput {
	return o
}

func (o VpcConnectionMapOutput) ToVpcConnectionMapOutputWithContext(ctx context.Context) VpcConnectionMapOutput {
	return o
}

func (o VpcConnectionMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*VpcConnection] {
	return pulumix.Output[map[string]*VpcConnection]{
		OutputState: o.OutputState,
	}
}

func (o VpcConnectionMapOutput) MapIndex(k pulumi.StringInput) VpcConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpcConnection {
		return vs[0].(map[string]*VpcConnection)[vs[1].(string)]
	}).(VpcConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcConnectionInput)(nil)).Elem(), &VpcConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcConnectionArrayInput)(nil)).Elem(), VpcConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcConnectionMapInput)(nil)).Elem(), VpcConnectionMap{})
	pulumi.RegisterOutputType(VpcConnectionOutput{})
	pulumi.RegisterOutputType(VpcConnectionArrayOutput{})
	pulumi.RegisterOutputType(VpcConnectionMapOutput{})
}
