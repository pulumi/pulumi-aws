// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package msk

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupCluster(ctx *pulumi.Context, args *LookupClusterArgs, opts ...pulumi.InvokeOption) (*LookupClusterResult, error) {
	var rv LookupClusterResult
	err := ctx.Invoke("aws:msk/getCluster:getCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCluster.
type LookupClusterArgs struct {
	ClusterName string            `pulumi:"clusterName"`
	Tags        map[string]string `pulumi:"tags"`
}

// A collection of values returned by getCluster.
type LookupClusterResult struct {
	Arn                             string `pulumi:"arn"`
	BootstrapBrokers                string `pulumi:"bootstrapBrokers"`
	BootstrapBrokersPublicSaslIam   string `pulumi:"bootstrapBrokersPublicSaslIam"`
	BootstrapBrokersPublicSaslScram string `pulumi:"bootstrapBrokersPublicSaslScram"`
	BootstrapBrokersPublicTls       string `pulumi:"bootstrapBrokersPublicTls"`
	BootstrapBrokersSaslIam         string `pulumi:"bootstrapBrokersSaslIam"`
	BootstrapBrokersSaslScram       string `pulumi:"bootstrapBrokersSaslScram"`
	BootstrapBrokersTls             string `pulumi:"bootstrapBrokersTls"`
	ClusterName                     string `pulumi:"clusterName"`
	// The provider-assigned unique ID for this managed resource.
	Id                        string            `pulumi:"id"`
	KafkaVersion              string            `pulumi:"kafkaVersion"`
	NumberOfBrokerNodes       int               `pulumi:"numberOfBrokerNodes"`
	Tags                      map[string]string `pulumi:"tags"`
	ZookeeperConnectString    string            `pulumi:"zookeeperConnectString"`
	ZookeeperConnectStringTls string            `pulumi:"zookeeperConnectStringTls"`
}

func LookupClusterOutput(ctx *pulumi.Context, args LookupClusterOutputArgs, opts ...pulumi.InvokeOption) LookupClusterResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupClusterResult, error) {
			args := v.(LookupClusterArgs)
			r, err := LookupCluster(ctx, &args, opts...)
			var s LookupClusterResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupClusterResultOutput)
}

// A collection of arguments for invoking getCluster.
type LookupClusterOutputArgs struct {
	ClusterName pulumi.StringInput    `pulumi:"clusterName"`
	Tags        pulumi.StringMapInput `pulumi:"tags"`
}

func (LookupClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterArgs)(nil)).Elem()
}

// A collection of values returned by getCluster.
type LookupClusterResultOutput struct{ *pulumi.OutputState }

func (LookupClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterResult)(nil)).Elem()
}

func (o LookupClusterResultOutput) ToLookupClusterResultOutput() LookupClusterResultOutput {
	return o
}

func (o LookupClusterResultOutput) ToLookupClusterResultOutputWithContext(ctx context.Context) LookupClusterResultOutput {
	return o
}

func (o LookupClusterResultOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.Arn }).(pulumi.StringOutput)
}

func (o LookupClusterResultOutput) BootstrapBrokers() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.BootstrapBrokers }).(pulumi.StringOutput)
}

func (o LookupClusterResultOutput) BootstrapBrokersPublicSaslIam() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.BootstrapBrokersPublicSaslIam }).(pulumi.StringOutput)
}

func (o LookupClusterResultOutput) BootstrapBrokersPublicSaslScram() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.BootstrapBrokersPublicSaslScram }).(pulumi.StringOutput)
}

func (o LookupClusterResultOutput) BootstrapBrokersPublicTls() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.BootstrapBrokersPublicTls }).(pulumi.StringOutput)
}

func (o LookupClusterResultOutput) BootstrapBrokersSaslIam() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.BootstrapBrokersSaslIam }).(pulumi.StringOutput)
}

func (o LookupClusterResultOutput) BootstrapBrokersSaslScram() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.BootstrapBrokersSaslScram }).(pulumi.StringOutput)
}

func (o LookupClusterResultOutput) BootstrapBrokersTls() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.BootstrapBrokersTls }).(pulumi.StringOutput)
}

func (o LookupClusterResultOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.ClusterName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupClusterResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupClusterResultOutput) KafkaVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.KafkaVersion }).(pulumi.StringOutput)
}

func (o LookupClusterResultOutput) NumberOfBrokerNodes() pulumi.IntOutput {
	return o.ApplyT(func(v LookupClusterResult) int { return v.NumberOfBrokerNodes }).(pulumi.IntOutput)
}

func (o LookupClusterResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupClusterResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func (o LookupClusterResultOutput) ZookeeperConnectString() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.ZookeeperConnectString }).(pulumi.StringOutput)
}

func (o LookupClusterResultOutput) ZookeeperConnectStringTls() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.ZookeeperConnectStringTls }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupClusterResultOutput{})
}
