// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package msk

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Cluster struct {
	pulumi.CustomResourceState

	Arn                             pulumi.StringOutput                  `pulumi:"arn"`
	BootstrapBrokers                pulumi.StringOutput                  `pulumi:"bootstrapBrokers"`
	BootstrapBrokersPublicSaslIam   pulumi.StringOutput                  `pulumi:"bootstrapBrokersPublicSaslIam"`
	BootstrapBrokersPublicSaslScram pulumi.StringOutput                  `pulumi:"bootstrapBrokersPublicSaslScram"`
	BootstrapBrokersPublicTls       pulumi.StringOutput                  `pulumi:"bootstrapBrokersPublicTls"`
	BootstrapBrokersSaslIam         pulumi.StringOutput                  `pulumi:"bootstrapBrokersSaslIam"`
	BootstrapBrokersSaslScram       pulumi.StringOutput                  `pulumi:"bootstrapBrokersSaslScram"`
	BootstrapBrokersTls             pulumi.StringOutput                  `pulumi:"bootstrapBrokersTls"`
	BrokerNodeGroupInfo             ClusterBrokerNodeGroupInfoOutput     `pulumi:"brokerNodeGroupInfo"`
	ClientAuthentication            ClusterClientAuthenticationPtrOutput `pulumi:"clientAuthentication"`
	ClusterName                     pulumi.StringOutput                  `pulumi:"clusterName"`
	ConfigurationInfo               ClusterConfigurationInfoPtrOutput    `pulumi:"configurationInfo"`
	CurrentVersion                  pulumi.StringOutput                  `pulumi:"currentVersion"`
	EncryptionInfo                  ClusterEncryptionInfoPtrOutput       `pulumi:"encryptionInfo"`
	EnhancedMonitoring              pulumi.StringPtrOutput               `pulumi:"enhancedMonitoring"`
	KafkaVersion                    pulumi.StringOutput                  `pulumi:"kafkaVersion"`
	LoggingInfo                     ClusterLoggingInfoPtrOutput          `pulumi:"loggingInfo"`
	NumberOfBrokerNodes             pulumi.IntOutput                     `pulumi:"numberOfBrokerNodes"`
	OpenMonitoring                  ClusterOpenMonitoringPtrOutput       `pulumi:"openMonitoring"`
	StorageMode                     pulumi.StringOutput                  `pulumi:"storageMode"`
	Tags                            pulumi.StringMapOutput               `pulumi:"tags"`
	TagsAll                         pulumi.StringMapOutput               `pulumi:"tagsAll"`
	ZookeeperConnectString          pulumi.StringOutput                  `pulumi:"zookeeperConnectString"`
	ZookeeperConnectStringTls       pulumi.StringOutput                  `pulumi:"zookeeperConnectStringTls"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BrokerNodeGroupInfo == nil {
		return nil, errors.New("invalid value for required argument 'BrokerNodeGroupInfo'")
	}
	if args.KafkaVersion == nil {
		return nil, errors.New("invalid value for required argument 'KafkaVersion'")
	}
	if args.NumberOfBrokerNodes == nil {
		return nil, errors.New("invalid value for required argument 'NumberOfBrokerNodes'")
	}
	var resource Cluster
	err := ctx.RegisterResource("aws:msk/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("aws:msk/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	Arn                             *string                      `pulumi:"arn"`
	BootstrapBrokers                *string                      `pulumi:"bootstrapBrokers"`
	BootstrapBrokersPublicSaslIam   *string                      `pulumi:"bootstrapBrokersPublicSaslIam"`
	BootstrapBrokersPublicSaslScram *string                      `pulumi:"bootstrapBrokersPublicSaslScram"`
	BootstrapBrokersPublicTls       *string                      `pulumi:"bootstrapBrokersPublicTls"`
	BootstrapBrokersSaslIam         *string                      `pulumi:"bootstrapBrokersSaslIam"`
	BootstrapBrokersSaslScram       *string                      `pulumi:"bootstrapBrokersSaslScram"`
	BootstrapBrokersTls             *string                      `pulumi:"bootstrapBrokersTls"`
	BrokerNodeGroupInfo             *ClusterBrokerNodeGroupInfo  `pulumi:"brokerNodeGroupInfo"`
	ClientAuthentication            *ClusterClientAuthentication `pulumi:"clientAuthentication"`
	ClusterName                     *string                      `pulumi:"clusterName"`
	ConfigurationInfo               *ClusterConfigurationInfo    `pulumi:"configurationInfo"`
	CurrentVersion                  *string                      `pulumi:"currentVersion"`
	EncryptionInfo                  *ClusterEncryptionInfo       `pulumi:"encryptionInfo"`
	EnhancedMonitoring              *string                      `pulumi:"enhancedMonitoring"`
	KafkaVersion                    *string                      `pulumi:"kafkaVersion"`
	LoggingInfo                     *ClusterLoggingInfo          `pulumi:"loggingInfo"`
	NumberOfBrokerNodes             *int                         `pulumi:"numberOfBrokerNodes"`
	OpenMonitoring                  *ClusterOpenMonitoring       `pulumi:"openMonitoring"`
	StorageMode                     *string                      `pulumi:"storageMode"`
	Tags                            map[string]string            `pulumi:"tags"`
	TagsAll                         map[string]string            `pulumi:"tagsAll"`
	ZookeeperConnectString          *string                      `pulumi:"zookeeperConnectString"`
	ZookeeperConnectStringTls       *string                      `pulumi:"zookeeperConnectStringTls"`
}

type ClusterState struct {
	Arn                             pulumi.StringPtrInput
	BootstrapBrokers                pulumi.StringPtrInput
	BootstrapBrokersPublicSaslIam   pulumi.StringPtrInput
	BootstrapBrokersPublicSaslScram pulumi.StringPtrInput
	BootstrapBrokersPublicTls       pulumi.StringPtrInput
	BootstrapBrokersSaslIam         pulumi.StringPtrInput
	BootstrapBrokersSaslScram       pulumi.StringPtrInput
	BootstrapBrokersTls             pulumi.StringPtrInput
	BrokerNodeGroupInfo             ClusterBrokerNodeGroupInfoPtrInput
	ClientAuthentication            ClusterClientAuthenticationPtrInput
	ClusterName                     pulumi.StringPtrInput
	ConfigurationInfo               ClusterConfigurationInfoPtrInput
	CurrentVersion                  pulumi.StringPtrInput
	EncryptionInfo                  ClusterEncryptionInfoPtrInput
	EnhancedMonitoring              pulumi.StringPtrInput
	KafkaVersion                    pulumi.StringPtrInput
	LoggingInfo                     ClusterLoggingInfoPtrInput
	NumberOfBrokerNodes             pulumi.IntPtrInput
	OpenMonitoring                  ClusterOpenMonitoringPtrInput
	StorageMode                     pulumi.StringPtrInput
	Tags                            pulumi.StringMapInput
	TagsAll                         pulumi.StringMapInput
	ZookeeperConnectString          pulumi.StringPtrInput
	ZookeeperConnectStringTls       pulumi.StringPtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	BrokerNodeGroupInfo  ClusterBrokerNodeGroupInfo   `pulumi:"brokerNodeGroupInfo"`
	ClientAuthentication *ClusterClientAuthentication `pulumi:"clientAuthentication"`
	ClusterName          *string                      `pulumi:"clusterName"`
	ConfigurationInfo    *ClusterConfigurationInfo    `pulumi:"configurationInfo"`
	EncryptionInfo       *ClusterEncryptionInfo       `pulumi:"encryptionInfo"`
	EnhancedMonitoring   *string                      `pulumi:"enhancedMonitoring"`
	KafkaVersion         string                       `pulumi:"kafkaVersion"`
	LoggingInfo          *ClusterLoggingInfo          `pulumi:"loggingInfo"`
	NumberOfBrokerNodes  int                          `pulumi:"numberOfBrokerNodes"`
	OpenMonitoring       *ClusterOpenMonitoring       `pulumi:"openMonitoring"`
	StorageMode          *string                      `pulumi:"storageMode"`
	Tags                 map[string]string            `pulumi:"tags"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	BrokerNodeGroupInfo  ClusterBrokerNodeGroupInfoInput
	ClientAuthentication ClusterClientAuthenticationPtrInput
	ClusterName          pulumi.StringPtrInput
	ConfigurationInfo    ClusterConfigurationInfoPtrInput
	EncryptionInfo       ClusterEncryptionInfoPtrInput
	EnhancedMonitoring   pulumi.StringPtrInput
	KafkaVersion         pulumi.StringInput
	LoggingInfo          ClusterLoggingInfoPtrInput
	NumberOfBrokerNodes  pulumi.IntInput
	OpenMonitoring       ClusterOpenMonitoringPtrInput
	StorageMode          pulumi.StringPtrInput
	Tags                 pulumi.StringMapInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//	ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

func (o ClusterOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ClusterOutput) BootstrapBrokers() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.BootstrapBrokers }).(pulumi.StringOutput)
}

func (o ClusterOutput) BootstrapBrokersPublicSaslIam() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.BootstrapBrokersPublicSaslIam }).(pulumi.StringOutput)
}

func (o ClusterOutput) BootstrapBrokersPublicSaslScram() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.BootstrapBrokersPublicSaslScram }).(pulumi.StringOutput)
}

func (o ClusterOutput) BootstrapBrokersPublicTls() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.BootstrapBrokersPublicTls }).(pulumi.StringOutput)
}

func (o ClusterOutput) BootstrapBrokersSaslIam() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.BootstrapBrokersSaslIam }).(pulumi.StringOutput)
}

func (o ClusterOutput) BootstrapBrokersSaslScram() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.BootstrapBrokersSaslScram }).(pulumi.StringOutput)
}

func (o ClusterOutput) BootstrapBrokersTls() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.BootstrapBrokersTls }).(pulumi.StringOutput)
}

func (o ClusterOutput) BrokerNodeGroupInfo() ClusterBrokerNodeGroupInfoOutput {
	return o.ApplyT(func(v *Cluster) ClusterBrokerNodeGroupInfoOutput { return v.BrokerNodeGroupInfo }).(ClusterBrokerNodeGroupInfoOutput)
}

func (o ClusterOutput) ClientAuthentication() ClusterClientAuthenticationPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterClientAuthenticationPtrOutput { return v.ClientAuthentication }).(ClusterClientAuthenticationPtrOutput)
}

func (o ClusterOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

func (o ClusterOutput) ConfigurationInfo() ClusterConfigurationInfoPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterConfigurationInfoPtrOutput { return v.ConfigurationInfo }).(ClusterConfigurationInfoPtrOutput)
}

func (o ClusterOutput) CurrentVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.CurrentVersion }).(pulumi.StringOutput)
}

func (o ClusterOutput) EncryptionInfo() ClusterEncryptionInfoPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterEncryptionInfoPtrOutput { return v.EncryptionInfo }).(ClusterEncryptionInfoPtrOutput)
}

func (o ClusterOutput) EnhancedMonitoring() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.EnhancedMonitoring }).(pulumi.StringPtrOutput)
}

func (o ClusterOutput) KafkaVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.KafkaVersion }).(pulumi.StringOutput)
}

func (o ClusterOutput) LoggingInfo() ClusterLoggingInfoPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterLoggingInfoPtrOutput { return v.LoggingInfo }).(ClusterLoggingInfoPtrOutput)
}

func (o ClusterOutput) NumberOfBrokerNodes() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.NumberOfBrokerNodes }).(pulumi.IntOutput)
}

func (o ClusterOutput) OpenMonitoring() ClusterOpenMonitoringPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterOpenMonitoringPtrOutput { return v.OpenMonitoring }).(ClusterOpenMonitoringPtrOutput)
}

func (o ClusterOutput) StorageMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.StorageMode }).(pulumi.StringOutput)
}

func (o ClusterOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ClusterOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o ClusterOutput) ZookeeperConnectString() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ZookeeperConnectString }).(pulumi.StringOutput)
}

func (o ClusterOutput) ZookeeperConnectStringTls() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ZookeeperConnectStringTls }).(pulumi.StringOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}
