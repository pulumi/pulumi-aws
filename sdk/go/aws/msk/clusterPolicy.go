// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package msk

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS Managed Streaming for Kafka Cluster Policy.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//	"fmt"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/msk"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			currentCallerIdentity, err := aws.GetCallerIdentity(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			currentPartition, err := aws.GetPartition(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"Version": "2012-10-17",
//				"Statement": []map[string]interface{}{
//					map[string]interface{}{
//						"Sid":    "ExampleMskClusterPolicy",
//						"Effect": "Allow",
//						"Principal": map[string]interface{}{
//							"AWS": fmt.Sprintf("arn:%v:iam::%v:root", currentPartition.Partition, currentCallerIdentity.AccountId),
//						},
//						"Action": []string{
//							"kafka:Describe*",
//							"kafka:Get*",
//							"kafka:CreateVpcConnection",
//							"kafka:GetBootstrapBrokers",
//						},
//						"Resource": aws_msk_cluster.Example.Arn,
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = msk.NewClusterPolicy(ctx, "example", &msk.ClusterPolicyArgs{
//				ClusterArn: pulumi.Any(aws_msk_cluster.Example.Arn),
//				Policy:     pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Managed Streaming for Kafka Cluster Policy using the `cluster_arn`. For example:
//
// ```sh
//
//	$ pulumi import aws:msk/clusterPolicy:ClusterPolicy example arn:aws:kafka:us-west-2:123456789012:cluster/example/279c0212-d057-4dba-9aa9-1c4e5a25bfc7-3
//
// ```
type ClusterPolicy struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) that uniquely identifies the cluster.
	ClusterArn     pulumi.StringOutput `pulumi:"clusterArn"`
	CurrentVersion pulumi.StringOutput `pulumi:"currentVersion"`
	// Resource policy for cluster.
	Policy pulumi.StringOutput `pulumi:"policy"`
}

// NewClusterPolicy registers a new resource with the given unique name, arguments, and options.
func NewClusterPolicy(ctx *pulumi.Context,
	name string, args *ClusterPolicyArgs, opts ...pulumi.ResourceOption) (*ClusterPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterArn == nil {
		return nil, errors.New("invalid value for required argument 'ClusterArn'")
	}
	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClusterPolicy
	err := ctx.RegisterResource("aws:msk/clusterPolicy:ClusterPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterPolicy gets an existing ClusterPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterPolicyState, opts ...pulumi.ResourceOption) (*ClusterPolicy, error) {
	var resource ClusterPolicy
	err := ctx.ReadResource("aws:msk/clusterPolicy:ClusterPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterPolicy resources.
type clusterPolicyState struct {
	// The Amazon Resource Name (ARN) that uniquely identifies the cluster.
	ClusterArn     *string `pulumi:"clusterArn"`
	CurrentVersion *string `pulumi:"currentVersion"`
	// Resource policy for cluster.
	Policy *string `pulumi:"policy"`
}

type ClusterPolicyState struct {
	// The Amazon Resource Name (ARN) that uniquely identifies the cluster.
	ClusterArn     pulumi.StringPtrInput
	CurrentVersion pulumi.StringPtrInput
	// Resource policy for cluster.
	Policy pulumi.StringPtrInput
}

func (ClusterPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterPolicyState)(nil)).Elem()
}

type clusterPolicyArgs struct {
	// The Amazon Resource Name (ARN) that uniquely identifies the cluster.
	ClusterArn string `pulumi:"clusterArn"`
	// Resource policy for cluster.
	Policy string `pulumi:"policy"`
}

// The set of arguments for constructing a ClusterPolicy resource.
type ClusterPolicyArgs struct {
	// The Amazon Resource Name (ARN) that uniquely identifies the cluster.
	ClusterArn pulumi.StringInput
	// Resource policy for cluster.
	Policy pulumi.StringInput
}

func (ClusterPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterPolicyArgs)(nil)).Elem()
}

type ClusterPolicyInput interface {
	pulumi.Input

	ToClusterPolicyOutput() ClusterPolicyOutput
	ToClusterPolicyOutputWithContext(ctx context.Context) ClusterPolicyOutput
}

func (*ClusterPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPolicy)(nil)).Elem()
}

func (i *ClusterPolicy) ToClusterPolicyOutput() ClusterPolicyOutput {
	return i.ToClusterPolicyOutputWithContext(context.Background())
}

func (i *ClusterPolicy) ToClusterPolicyOutputWithContext(ctx context.Context) ClusterPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPolicyOutput)
}

// ClusterPolicyArrayInput is an input type that accepts ClusterPolicyArray and ClusterPolicyArrayOutput values.
// You can construct a concrete instance of `ClusterPolicyArrayInput` via:
//
//	ClusterPolicyArray{ ClusterPolicyArgs{...} }
type ClusterPolicyArrayInput interface {
	pulumi.Input

	ToClusterPolicyArrayOutput() ClusterPolicyArrayOutput
	ToClusterPolicyArrayOutputWithContext(context.Context) ClusterPolicyArrayOutput
}

type ClusterPolicyArray []ClusterPolicyInput

func (ClusterPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterPolicy)(nil)).Elem()
}

func (i ClusterPolicyArray) ToClusterPolicyArrayOutput() ClusterPolicyArrayOutput {
	return i.ToClusterPolicyArrayOutputWithContext(context.Background())
}

func (i ClusterPolicyArray) ToClusterPolicyArrayOutputWithContext(ctx context.Context) ClusterPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPolicyArrayOutput)
}

// ClusterPolicyMapInput is an input type that accepts ClusterPolicyMap and ClusterPolicyMapOutput values.
// You can construct a concrete instance of `ClusterPolicyMapInput` via:
//
//	ClusterPolicyMap{ "key": ClusterPolicyArgs{...} }
type ClusterPolicyMapInput interface {
	pulumi.Input

	ToClusterPolicyMapOutput() ClusterPolicyMapOutput
	ToClusterPolicyMapOutputWithContext(context.Context) ClusterPolicyMapOutput
}

type ClusterPolicyMap map[string]ClusterPolicyInput

func (ClusterPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterPolicy)(nil)).Elem()
}

func (i ClusterPolicyMap) ToClusterPolicyMapOutput() ClusterPolicyMapOutput {
	return i.ToClusterPolicyMapOutputWithContext(context.Background())
}

func (i ClusterPolicyMap) ToClusterPolicyMapOutputWithContext(ctx context.Context) ClusterPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPolicyMapOutput)
}

type ClusterPolicyOutput struct{ *pulumi.OutputState }

func (ClusterPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPolicy)(nil)).Elem()
}

func (o ClusterPolicyOutput) ToClusterPolicyOutput() ClusterPolicyOutput {
	return o
}

func (o ClusterPolicyOutput) ToClusterPolicyOutputWithContext(ctx context.Context) ClusterPolicyOutput {
	return o
}

// The Amazon Resource Name (ARN) that uniquely identifies the cluster.
func (o ClusterPolicyOutput) ClusterArn() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterPolicy) pulumi.StringOutput { return v.ClusterArn }).(pulumi.StringOutput)
}

func (o ClusterPolicyOutput) CurrentVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterPolicy) pulumi.StringOutput { return v.CurrentVersion }).(pulumi.StringOutput)
}

// Resource policy for cluster.
func (o ClusterPolicyOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterPolicy) pulumi.StringOutput { return v.Policy }).(pulumi.StringOutput)
}

type ClusterPolicyArrayOutput struct{ *pulumi.OutputState }

func (ClusterPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterPolicy)(nil)).Elem()
}

func (o ClusterPolicyArrayOutput) ToClusterPolicyArrayOutput() ClusterPolicyArrayOutput {
	return o
}

func (o ClusterPolicyArrayOutput) ToClusterPolicyArrayOutputWithContext(ctx context.Context) ClusterPolicyArrayOutput {
	return o
}

func (o ClusterPolicyArrayOutput) Index(i pulumi.IntInput) ClusterPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterPolicy {
		return vs[0].([]*ClusterPolicy)[vs[1].(int)]
	}).(ClusterPolicyOutput)
}

type ClusterPolicyMapOutput struct{ *pulumi.OutputState }

func (ClusterPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterPolicy)(nil)).Elem()
}

func (o ClusterPolicyMapOutput) ToClusterPolicyMapOutput() ClusterPolicyMapOutput {
	return o
}

func (o ClusterPolicyMapOutput) ToClusterPolicyMapOutputWithContext(ctx context.Context) ClusterPolicyMapOutput {
	return o
}

func (o ClusterPolicyMapOutput) MapIndex(k pulumi.StringInput) ClusterPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterPolicy {
		return vs[0].(map[string]*ClusterPolicy)[vs[1].(string)]
	}).(ClusterPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterPolicyInput)(nil)).Elem(), &ClusterPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterPolicyArrayInput)(nil)).Elem(), ClusterPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterPolicyMapInput)(nil)).Elem(), ClusterPolicyMap{})
	pulumi.RegisterOutputType(ClusterPolicyOutput{})
	pulumi.RegisterOutputType(ClusterPolicyArrayOutput{})
	pulumi.RegisterOutputType(ClusterPolicyMapOutput{})
}
