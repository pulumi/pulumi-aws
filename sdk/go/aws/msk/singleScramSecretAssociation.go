// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package msk

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Associates a single SCRAM secret with a Managed Streaming for Kafka (MSK) cluster.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/msk"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := msk.NewSingleScramSecretAssociation(ctx, "example", &msk.SingleScramSecretAssociationArgs{
//				ClusterArn: pulumi.Any(exampleAwsMskCluster.Arn),
//				SecretArn:  pulumi.Any(exampleAwsSecretsmanagerSecret.Arn),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import an MSK SCRAM Secret Association using the `cluster_arn` and `secret_arn`. For example:
//
// ```sh
// $ pulumi import aws:msk/singleScramSecretAssociation:SingleScramSecretAssociation example arn:aws:kafka:us-west-2:123456789012:cluster/example/279c0212-d057-4dba-9aa9-1c4e5a25bfc7-3,arn:aws:secretsmanager:us-east-1:123456789012:secret:example-123456
// ```
type SingleScramSecretAssociation struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the MSK cluster.
	ClusterArn pulumi.StringOutput `pulumi:"clusterArn"`
	// AWS Secrets Manager secret ARN.
	SecretArn pulumi.StringOutput `pulumi:"secretArn"`
}

// NewSingleScramSecretAssociation registers a new resource with the given unique name, arguments, and options.
func NewSingleScramSecretAssociation(ctx *pulumi.Context,
	name string, args *SingleScramSecretAssociationArgs, opts ...pulumi.ResourceOption) (*SingleScramSecretAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterArn == nil {
		return nil, errors.New("invalid value for required argument 'ClusterArn'")
	}
	if args.SecretArn == nil {
		return nil, errors.New("invalid value for required argument 'SecretArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SingleScramSecretAssociation
	err := ctx.RegisterResource("aws:msk/singleScramSecretAssociation:SingleScramSecretAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSingleScramSecretAssociation gets an existing SingleScramSecretAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSingleScramSecretAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SingleScramSecretAssociationState, opts ...pulumi.ResourceOption) (*SingleScramSecretAssociation, error) {
	var resource SingleScramSecretAssociation
	err := ctx.ReadResource("aws:msk/singleScramSecretAssociation:SingleScramSecretAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SingleScramSecretAssociation resources.
type singleScramSecretAssociationState struct {
	// Amazon Resource Name (ARN) of the MSK cluster.
	ClusterArn *string `pulumi:"clusterArn"`
	// AWS Secrets Manager secret ARN.
	SecretArn *string `pulumi:"secretArn"`
}

type SingleScramSecretAssociationState struct {
	// Amazon Resource Name (ARN) of the MSK cluster.
	ClusterArn pulumi.StringPtrInput
	// AWS Secrets Manager secret ARN.
	SecretArn pulumi.StringPtrInput
}

func (SingleScramSecretAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*singleScramSecretAssociationState)(nil)).Elem()
}

type singleScramSecretAssociationArgs struct {
	// Amazon Resource Name (ARN) of the MSK cluster.
	ClusterArn string `pulumi:"clusterArn"`
	// AWS Secrets Manager secret ARN.
	SecretArn string `pulumi:"secretArn"`
}

// The set of arguments for constructing a SingleScramSecretAssociation resource.
type SingleScramSecretAssociationArgs struct {
	// Amazon Resource Name (ARN) of the MSK cluster.
	ClusterArn pulumi.StringInput
	// AWS Secrets Manager secret ARN.
	SecretArn pulumi.StringInput
}

func (SingleScramSecretAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*singleScramSecretAssociationArgs)(nil)).Elem()
}

type SingleScramSecretAssociationInput interface {
	pulumi.Input

	ToSingleScramSecretAssociationOutput() SingleScramSecretAssociationOutput
	ToSingleScramSecretAssociationOutputWithContext(ctx context.Context) SingleScramSecretAssociationOutput
}

func (*SingleScramSecretAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**SingleScramSecretAssociation)(nil)).Elem()
}

func (i *SingleScramSecretAssociation) ToSingleScramSecretAssociationOutput() SingleScramSecretAssociationOutput {
	return i.ToSingleScramSecretAssociationOutputWithContext(context.Background())
}

func (i *SingleScramSecretAssociation) ToSingleScramSecretAssociationOutputWithContext(ctx context.Context) SingleScramSecretAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleScramSecretAssociationOutput)
}

// SingleScramSecretAssociationArrayInput is an input type that accepts SingleScramSecretAssociationArray and SingleScramSecretAssociationArrayOutput values.
// You can construct a concrete instance of `SingleScramSecretAssociationArrayInput` via:
//
//	SingleScramSecretAssociationArray{ SingleScramSecretAssociationArgs{...} }
type SingleScramSecretAssociationArrayInput interface {
	pulumi.Input

	ToSingleScramSecretAssociationArrayOutput() SingleScramSecretAssociationArrayOutput
	ToSingleScramSecretAssociationArrayOutputWithContext(context.Context) SingleScramSecretAssociationArrayOutput
}

type SingleScramSecretAssociationArray []SingleScramSecretAssociationInput

func (SingleScramSecretAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SingleScramSecretAssociation)(nil)).Elem()
}

func (i SingleScramSecretAssociationArray) ToSingleScramSecretAssociationArrayOutput() SingleScramSecretAssociationArrayOutput {
	return i.ToSingleScramSecretAssociationArrayOutputWithContext(context.Background())
}

func (i SingleScramSecretAssociationArray) ToSingleScramSecretAssociationArrayOutputWithContext(ctx context.Context) SingleScramSecretAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleScramSecretAssociationArrayOutput)
}

// SingleScramSecretAssociationMapInput is an input type that accepts SingleScramSecretAssociationMap and SingleScramSecretAssociationMapOutput values.
// You can construct a concrete instance of `SingleScramSecretAssociationMapInput` via:
//
//	SingleScramSecretAssociationMap{ "key": SingleScramSecretAssociationArgs{...} }
type SingleScramSecretAssociationMapInput interface {
	pulumi.Input

	ToSingleScramSecretAssociationMapOutput() SingleScramSecretAssociationMapOutput
	ToSingleScramSecretAssociationMapOutputWithContext(context.Context) SingleScramSecretAssociationMapOutput
}

type SingleScramSecretAssociationMap map[string]SingleScramSecretAssociationInput

func (SingleScramSecretAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SingleScramSecretAssociation)(nil)).Elem()
}

func (i SingleScramSecretAssociationMap) ToSingleScramSecretAssociationMapOutput() SingleScramSecretAssociationMapOutput {
	return i.ToSingleScramSecretAssociationMapOutputWithContext(context.Background())
}

func (i SingleScramSecretAssociationMap) ToSingleScramSecretAssociationMapOutputWithContext(ctx context.Context) SingleScramSecretAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleScramSecretAssociationMapOutput)
}

type SingleScramSecretAssociationOutput struct{ *pulumi.OutputState }

func (SingleScramSecretAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SingleScramSecretAssociation)(nil)).Elem()
}

func (o SingleScramSecretAssociationOutput) ToSingleScramSecretAssociationOutput() SingleScramSecretAssociationOutput {
	return o
}

func (o SingleScramSecretAssociationOutput) ToSingleScramSecretAssociationOutputWithContext(ctx context.Context) SingleScramSecretAssociationOutput {
	return o
}

// Amazon Resource Name (ARN) of the MSK cluster.
func (o SingleScramSecretAssociationOutput) ClusterArn() pulumi.StringOutput {
	return o.ApplyT(func(v *SingleScramSecretAssociation) pulumi.StringOutput { return v.ClusterArn }).(pulumi.StringOutput)
}

// AWS Secrets Manager secret ARN.
func (o SingleScramSecretAssociationOutput) SecretArn() pulumi.StringOutput {
	return o.ApplyT(func(v *SingleScramSecretAssociation) pulumi.StringOutput { return v.SecretArn }).(pulumi.StringOutput)
}

type SingleScramSecretAssociationArrayOutput struct{ *pulumi.OutputState }

func (SingleScramSecretAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SingleScramSecretAssociation)(nil)).Elem()
}

func (o SingleScramSecretAssociationArrayOutput) ToSingleScramSecretAssociationArrayOutput() SingleScramSecretAssociationArrayOutput {
	return o
}

func (o SingleScramSecretAssociationArrayOutput) ToSingleScramSecretAssociationArrayOutputWithContext(ctx context.Context) SingleScramSecretAssociationArrayOutput {
	return o
}

func (o SingleScramSecretAssociationArrayOutput) Index(i pulumi.IntInput) SingleScramSecretAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SingleScramSecretAssociation {
		return vs[0].([]*SingleScramSecretAssociation)[vs[1].(int)]
	}).(SingleScramSecretAssociationOutput)
}

type SingleScramSecretAssociationMapOutput struct{ *pulumi.OutputState }

func (SingleScramSecretAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SingleScramSecretAssociation)(nil)).Elem()
}

func (o SingleScramSecretAssociationMapOutput) ToSingleScramSecretAssociationMapOutput() SingleScramSecretAssociationMapOutput {
	return o
}

func (o SingleScramSecretAssociationMapOutput) ToSingleScramSecretAssociationMapOutputWithContext(ctx context.Context) SingleScramSecretAssociationMapOutput {
	return o
}

func (o SingleScramSecretAssociationMapOutput) MapIndex(k pulumi.StringInput) SingleScramSecretAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SingleScramSecretAssociation {
		return vs[0].(map[string]*SingleScramSecretAssociation)[vs[1].(string)]
	}).(SingleScramSecretAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SingleScramSecretAssociationInput)(nil)).Elem(), &SingleScramSecretAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*SingleScramSecretAssociationArrayInput)(nil)).Elem(), SingleScramSecretAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SingleScramSecretAssociationMapInput)(nil)).Elem(), SingleScramSecretAssociationMap{})
	pulumi.RegisterOutputType(SingleScramSecretAssociationOutput{})
	pulumi.RegisterOutputType(SingleScramSecretAssociationArrayOutput{})
	pulumi.RegisterOutputType(SingleScramSecretAssociationMapOutput{})
}
