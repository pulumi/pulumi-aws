// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package msk

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an Amazon MSK Serverless cluster.
//
// > **Note:** To manage a _provisioned_ Amazon MSK cluster, use the `msk.Cluster` resource.
//
// ## Import
//
// Using `pulumi import`, import MSK serverless clusters using the cluster `arn`. For example:
//
// ```sh
//
//	$ pulumi import aws:msk/serverlessCluster:ServerlessCluster example arn:aws:kafka:us-west-2:123456789012:cluster/example/279c0212-d057-4dba-9aa9-1c4e5a25bfc7-3
//
// ```
type ServerlessCluster struct {
	pulumi.CustomResourceState

	// The ARN of the serverless cluster.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Specifies client authentication information for the serverless cluster. See below.
	ClientAuthentication ServerlessClusterClientAuthenticationOutput `pulumi:"clientAuthentication"`
	// The name of the serverless cluster.
	ClusterName pulumi.StringOutput `pulumi:"clusterName"`
	// UUID of the serverless cluster, for use in IAM policies.
	ClusterUuid pulumi.StringOutput `pulumi:"clusterUuid"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// VPC configuration information. See below.
	VpcConfigs ServerlessClusterVpcConfigArrayOutput `pulumi:"vpcConfigs"`
}

// NewServerlessCluster registers a new resource with the given unique name, arguments, and options.
func NewServerlessCluster(ctx *pulumi.Context,
	name string, args *ServerlessClusterArgs, opts ...pulumi.ResourceOption) (*ServerlessCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClientAuthentication == nil {
		return nil, errors.New("invalid value for required argument 'ClientAuthentication'")
	}
	if args.VpcConfigs == nil {
		return nil, errors.New("invalid value for required argument 'VpcConfigs'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"tagsAll",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServerlessCluster
	err := ctx.RegisterResource("aws:msk/serverlessCluster:ServerlessCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerlessCluster gets an existing ServerlessCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerlessCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerlessClusterState, opts ...pulumi.ResourceOption) (*ServerlessCluster, error) {
	var resource ServerlessCluster
	err := ctx.ReadResource("aws:msk/serverlessCluster:ServerlessCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerlessCluster resources.
type serverlessClusterState struct {
	// The ARN of the serverless cluster.
	Arn *string `pulumi:"arn"`
	// Specifies client authentication information for the serverless cluster. See below.
	ClientAuthentication *ServerlessClusterClientAuthentication `pulumi:"clientAuthentication"`
	// The name of the serverless cluster.
	ClusterName *string `pulumi:"clusterName"`
	// UUID of the serverless cluster, for use in IAM policies.
	ClusterUuid *string `pulumi:"clusterUuid"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// VPC configuration information. See below.
	VpcConfigs []ServerlessClusterVpcConfig `pulumi:"vpcConfigs"`
}

type ServerlessClusterState struct {
	// The ARN of the serverless cluster.
	Arn pulumi.StringPtrInput
	// Specifies client authentication information for the serverless cluster. See below.
	ClientAuthentication ServerlessClusterClientAuthenticationPtrInput
	// The name of the serverless cluster.
	ClusterName pulumi.StringPtrInput
	// UUID of the serverless cluster, for use in IAM policies.
	ClusterUuid pulumi.StringPtrInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
	// VPC configuration information. See below.
	VpcConfigs ServerlessClusterVpcConfigArrayInput
}

func (ServerlessClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverlessClusterState)(nil)).Elem()
}

type serverlessClusterArgs struct {
	// Specifies client authentication information for the serverless cluster. See below.
	ClientAuthentication ServerlessClusterClientAuthentication `pulumi:"clientAuthentication"`
	// The name of the serverless cluster.
	ClusterName *string `pulumi:"clusterName"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// VPC configuration information. See below.
	VpcConfigs []ServerlessClusterVpcConfig `pulumi:"vpcConfigs"`
}

// The set of arguments for constructing a ServerlessCluster resource.
type ServerlessClusterArgs struct {
	// Specifies client authentication information for the serverless cluster. See below.
	ClientAuthentication ServerlessClusterClientAuthenticationInput
	// The name of the serverless cluster.
	ClusterName pulumi.StringPtrInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// VPC configuration information. See below.
	VpcConfigs ServerlessClusterVpcConfigArrayInput
}

func (ServerlessClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverlessClusterArgs)(nil)).Elem()
}

type ServerlessClusterInput interface {
	pulumi.Input

	ToServerlessClusterOutput() ServerlessClusterOutput
	ToServerlessClusterOutputWithContext(ctx context.Context) ServerlessClusterOutput
}

func (*ServerlessCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessCluster)(nil)).Elem()
}

func (i *ServerlessCluster) ToServerlessClusterOutput() ServerlessClusterOutput {
	return i.ToServerlessClusterOutputWithContext(context.Background())
}

func (i *ServerlessCluster) ToServerlessClusterOutputWithContext(ctx context.Context) ServerlessClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessClusterOutput)
}

func (i *ServerlessCluster) ToOutput(ctx context.Context) pulumix.Output[*ServerlessCluster] {
	return pulumix.Output[*ServerlessCluster]{
		OutputState: i.ToServerlessClusterOutputWithContext(ctx).OutputState,
	}
}

// ServerlessClusterArrayInput is an input type that accepts ServerlessClusterArray and ServerlessClusterArrayOutput values.
// You can construct a concrete instance of `ServerlessClusterArrayInput` via:
//
//	ServerlessClusterArray{ ServerlessClusterArgs{...} }
type ServerlessClusterArrayInput interface {
	pulumi.Input

	ToServerlessClusterArrayOutput() ServerlessClusterArrayOutput
	ToServerlessClusterArrayOutputWithContext(context.Context) ServerlessClusterArrayOutput
}

type ServerlessClusterArray []ServerlessClusterInput

func (ServerlessClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerlessCluster)(nil)).Elem()
}

func (i ServerlessClusterArray) ToServerlessClusterArrayOutput() ServerlessClusterArrayOutput {
	return i.ToServerlessClusterArrayOutputWithContext(context.Background())
}

func (i ServerlessClusterArray) ToServerlessClusterArrayOutputWithContext(ctx context.Context) ServerlessClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessClusterArrayOutput)
}

func (i ServerlessClusterArray) ToOutput(ctx context.Context) pulumix.Output[[]*ServerlessCluster] {
	return pulumix.Output[[]*ServerlessCluster]{
		OutputState: i.ToServerlessClusterArrayOutputWithContext(ctx).OutputState,
	}
}

// ServerlessClusterMapInput is an input type that accepts ServerlessClusterMap and ServerlessClusterMapOutput values.
// You can construct a concrete instance of `ServerlessClusterMapInput` via:
//
//	ServerlessClusterMap{ "key": ServerlessClusterArgs{...} }
type ServerlessClusterMapInput interface {
	pulumi.Input

	ToServerlessClusterMapOutput() ServerlessClusterMapOutput
	ToServerlessClusterMapOutputWithContext(context.Context) ServerlessClusterMapOutput
}

type ServerlessClusterMap map[string]ServerlessClusterInput

func (ServerlessClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerlessCluster)(nil)).Elem()
}

func (i ServerlessClusterMap) ToServerlessClusterMapOutput() ServerlessClusterMapOutput {
	return i.ToServerlessClusterMapOutputWithContext(context.Background())
}

func (i ServerlessClusterMap) ToServerlessClusterMapOutputWithContext(ctx context.Context) ServerlessClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessClusterMapOutput)
}

func (i ServerlessClusterMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ServerlessCluster] {
	return pulumix.Output[map[string]*ServerlessCluster]{
		OutputState: i.ToServerlessClusterMapOutputWithContext(ctx).OutputState,
	}
}

type ServerlessClusterOutput struct{ *pulumi.OutputState }

func (ServerlessClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessCluster)(nil)).Elem()
}

func (o ServerlessClusterOutput) ToServerlessClusterOutput() ServerlessClusterOutput {
	return o
}

func (o ServerlessClusterOutput) ToServerlessClusterOutputWithContext(ctx context.Context) ServerlessClusterOutput {
	return o
}

func (o ServerlessClusterOutput) ToOutput(ctx context.Context) pulumix.Output[*ServerlessCluster] {
	return pulumix.Output[*ServerlessCluster]{
		OutputState: o.OutputState,
	}
}

// The ARN of the serverless cluster.
func (o ServerlessClusterOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessCluster) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Specifies client authentication information for the serverless cluster. See below.
func (o ServerlessClusterOutput) ClientAuthentication() ServerlessClusterClientAuthenticationOutput {
	return o.ApplyT(func(v *ServerlessCluster) ServerlessClusterClientAuthenticationOutput { return v.ClientAuthentication }).(ServerlessClusterClientAuthenticationOutput)
}

// The name of the serverless cluster.
func (o ServerlessClusterOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessCluster) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

// UUID of the serverless cluster, for use in IAM policies.
func (o ServerlessClusterOutput) ClusterUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessCluster) pulumi.StringOutput { return v.ClusterUuid }).(pulumi.StringOutput)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ServerlessClusterOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServerlessCluster) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o ServerlessClusterOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServerlessCluster) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// VPC configuration information. See below.
func (o ServerlessClusterOutput) VpcConfigs() ServerlessClusterVpcConfigArrayOutput {
	return o.ApplyT(func(v *ServerlessCluster) ServerlessClusterVpcConfigArrayOutput { return v.VpcConfigs }).(ServerlessClusterVpcConfigArrayOutput)
}

type ServerlessClusterArrayOutput struct{ *pulumi.OutputState }

func (ServerlessClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerlessCluster)(nil)).Elem()
}

func (o ServerlessClusterArrayOutput) ToServerlessClusterArrayOutput() ServerlessClusterArrayOutput {
	return o
}

func (o ServerlessClusterArrayOutput) ToServerlessClusterArrayOutputWithContext(ctx context.Context) ServerlessClusterArrayOutput {
	return o
}

func (o ServerlessClusterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ServerlessCluster] {
	return pulumix.Output[[]*ServerlessCluster]{
		OutputState: o.OutputState,
	}
}

func (o ServerlessClusterArrayOutput) Index(i pulumi.IntInput) ServerlessClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServerlessCluster {
		return vs[0].([]*ServerlessCluster)[vs[1].(int)]
	}).(ServerlessClusterOutput)
}

type ServerlessClusterMapOutput struct{ *pulumi.OutputState }

func (ServerlessClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerlessCluster)(nil)).Elem()
}

func (o ServerlessClusterMapOutput) ToServerlessClusterMapOutput() ServerlessClusterMapOutput {
	return o
}

func (o ServerlessClusterMapOutput) ToServerlessClusterMapOutputWithContext(ctx context.Context) ServerlessClusterMapOutput {
	return o
}

func (o ServerlessClusterMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ServerlessCluster] {
	return pulumix.Output[map[string]*ServerlessCluster]{
		OutputState: o.OutputState,
	}
}

func (o ServerlessClusterMapOutput) MapIndex(k pulumi.StringInput) ServerlessClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServerlessCluster {
		return vs[0].(map[string]*ServerlessCluster)[vs[1].(string)]
	}).(ServerlessClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerlessClusterInput)(nil)).Elem(), &ServerlessCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerlessClusterArrayInput)(nil)).Elem(), ServerlessClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerlessClusterMapInput)(nil)).Elem(), ServerlessClusterMap{})
	pulumi.RegisterOutputType(ServerlessClusterOutput{})
	pulumi.RegisterOutputType(ServerlessClusterArrayOutput{})
	pulumi.RegisterOutputType(ServerlessClusterMapOutput{})
}
