// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package worklink

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type WebsiteCertificateAuthorityAssociation struct {
	s *pulumi.ResourceState
}

// NewWebsiteCertificateAuthorityAssociation registers a new resource with the given unique name, arguments, and options.
func NewWebsiteCertificateAuthorityAssociation(ctx *pulumi.Context,
	name string, args *WebsiteCertificateAuthorityAssociationArgs, opts ...pulumi.ResourceOpt) (*WebsiteCertificateAuthorityAssociation, error) {
	if args == nil || args.Certificate == nil {
		return nil, errors.New("missing required argument 'Certificate'")
	}
	if args == nil || args.FleetArn == nil {
		return nil, errors.New("missing required argument 'FleetArn'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["certificate"] = nil
		inputs["displayName"] = nil
		inputs["fleetArn"] = nil
	} else {
		inputs["certificate"] = args.Certificate
		inputs["displayName"] = args.DisplayName
		inputs["fleetArn"] = args.FleetArn
	}
	inputs["websiteCaId"] = nil
	s, err := ctx.RegisterResource("aws:worklink/websiteCertificateAuthorityAssociation:WebsiteCertificateAuthorityAssociation", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &WebsiteCertificateAuthorityAssociation{s: s}, nil
}

// GetWebsiteCertificateAuthorityAssociation gets an existing WebsiteCertificateAuthorityAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebsiteCertificateAuthorityAssociation(ctx *pulumi.Context,
	name string, id pulumi.ID, state *WebsiteCertificateAuthorityAssociationState, opts ...pulumi.ResourceOpt) (*WebsiteCertificateAuthorityAssociation, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["certificate"] = state.Certificate
		inputs["displayName"] = state.DisplayName
		inputs["fleetArn"] = state.FleetArn
		inputs["websiteCaId"] = state.WebsiteCaId
	}
	s, err := ctx.ReadResource("aws:worklink/websiteCertificateAuthorityAssociation:WebsiteCertificateAuthorityAssociation", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &WebsiteCertificateAuthorityAssociation{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *WebsiteCertificateAuthorityAssociation) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *WebsiteCertificateAuthorityAssociation) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The root certificate of the Certificate Authority.
func (r *WebsiteCertificateAuthorityAssociation) Certificate() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["certificate"])
}

// The certificate name to display.
func (r *WebsiteCertificateAuthorityAssociation) DisplayName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["displayName"])
}

// The ARN of the fleet.
func (r *WebsiteCertificateAuthorityAssociation) FleetArn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["fleetArn"])
}

// A unique identifier for the Certificate Authority.
func (r *WebsiteCertificateAuthorityAssociation) WebsiteCaId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["websiteCaId"])
}

// Input properties used for looking up and filtering WebsiteCertificateAuthorityAssociation resources.
type WebsiteCertificateAuthorityAssociationState struct {
	// The root certificate of the Certificate Authority.
	Certificate interface{}
	// The certificate name to display.
	DisplayName interface{}
	// The ARN of the fleet.
	FleetArn interface{}
	// A unique identifier for the Certificate Authority.
	WebsiteCaId interface{}
}

// The set of arguments for constructing a WebsiteCertificateAuthorityAssociation resource.
type WebsiteCertificateAuthorityAssociationArgs struct {
	// The root certificate of the Certificate Authority.
	Certificate interface{}
	// The certificate name to display.
	DisplayName interface{}
	// The ARN of the fleet.
	FleetArn interface{}
}
