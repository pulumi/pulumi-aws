// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package worklink

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"os"
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/worklink"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func readFileOrPanic(path string) pulumi.StringPtrInput {
//		data, err := os.ReadFile(path)
//		if err != nil {
//			panic(err.Error())
//		}
//		return pulumi.String(string(data))
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := worklink.NewFleet(ctx, "example", nil)
//			if err != nil {
//				return err
//			}
//			_, err = worklink.NewWebsiteCertificateAuthorityAssociation(ctx, "test", &worklink.WebsiteCertificateAuthorityAssociationArgs{
//				FleetArn:    pulumi.Any(aws_worklink_fleet.Test.Arn),
//				Certificate: readFileOrPanic("certificate.pem"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// WorkLink Website Certificate Authority can be imported using `FLEET-ARN,WEBSITE-CA-ID`, e.g.,
//
// ```sh
//
//	$ pulumi import aws:worklink/websiteCertificateAuthorityAssociation:WebsiteCertificateAuthorityAssociation example arn:aws:worklink::123456789012:fleet/example,abcdefghijk
//
// ```
type WebsiteCertificateAuthorityAssociation struct {
	pulumi.CustomResourceState

	// The root certificate of the Certificate Authority.
	Certificate pulumi.StringOutput `pulumi:"certificate"`
	// The certificate name to display.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// The ARN of the fleet.
	FleetArn pulumi.StringOutput `pulumi:"fleetArn"`
	// A unique identifier for the Certificate Authority.
	WebsiteCaId pulumi.StringOutput `pulumi:"websiteCaId"`
}

// NewWebsiteCertificateAuthorityAssociation registers a new resource with the given unique name, arguments, and options.
func NewWebsiteCertificateAuthorityAssociation(ctx *pulumi.Context,
	name string, args *WebsiteCertificateAuthorityAssociationArgs, opts ...pulumi.ResourceOption) (*WebsiteCertificateAuthorityAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Certificate == nil {
		return nil, errors.New("invalid value for required argument 'Certificate'")
	}
	if args.FleetArn == nil {
		return nil, errors.New("invalid value for required argument 'FleetArn'")
	}
	var resource WebsiteCertificateAuthorityAssociation
	err := ctx.RegisterResource("aws:worklink/websiteCertificateAuthorityAssociation:WebsiteCertificateAuthorityAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebsiteCertificateAuthorityAssociation gets an existing WebsiteCertificateAuthorityAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebsiteCertificateAuthorityAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebsiteCertificateAuthorityAssociationState, opts ...pulumi.ResourceOption) (*WebsiteCertificateAuthorityAssociation, error) {
	var resource WebsiteCertificateAuthorityAssociation
	err := ctx.ReadResource("aws:worklink/websiteCertificateAuthorityAssociation:WebsiteCertificateAuthorityAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebsiteCertificateAuthorityAssociation resources.
type websiteCertificateAuthorityAssociationState struct {
	// The root certificate of the Certificate Authority.
	Certificate *string `pulumi:"certificate"`
	// The certificate name to display.
	DisplayName *string `pulumi:"displayName"`
	// The ARN of the fleet.
	FleetArn *string `pulumi:"fleetArn"`
	// A unique identifier for the Certificate Authority.
	WebsiteCaId *string `pulumi:"websiteCaId"`
}

type WebsiteCertificateAuthorityAssociationState struct {
	// The root certificate of the Certificate Authority.
	Certificate pulumi.StringPtrInput
	// The certificate name to display.
	DisplayName pulumi.StringPtrInput
	// The ARN of the fleet.
	FleetArn pulumi.StringPtrInput
	// A unique identifier for the Certificate Authority.
	WebsiteCaId pulumi.StringPtrInput
}

func (WebsiteCertificateAuthorityAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*websiteCertificateAuthorityAssociationState)(nil)).Elem()
}

type websiteCertificateAuthorityAssociationArgs struct {
	// The root certificate of the Certificate Authority.
	Certificate string `pulumi:"certificate"`
	// The certificate name to display.
	DisplayName *string `pulumi:"displayName"`
	// The ARN of the fleet.
	FleetArn string `pulumi:"fleetArn"`
}

// The set of arguments for constructing a WebsiteCertificateAuthorityAssociation resource.
type WebsiteCertificateAuthorityAssociationArgs struct {
	// The root certificate of the Certificate Authority.
	Certificate pulumi.StringInput
	// The certificate name to display.
	DisplayName pulumi.StringPtrInput
	// The ARN of the fleet.
	FleetArn pulumi.StringInput
}

func (WebsiteCertificateAuthorityAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*websiteCertificateAuthorityAssociationArgs)(nil)).Elem()
}

type WebsiteCertificateAuthorityAssociationInput interface {
	pulumi.Input

	ToWebsiteCertificateAuthorityAssociationOutput() WebsiteCertificateAuthorityAssociationOutput
	ToWebsiteCertificateAuthorityAssociationOutputWithContext(ctx context.Context) WebsiteCertificateAuthorityAssociationOutput
}

func (*WebsiteCertificateAuthorityAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**WebsiteCertificateAuthorityAssociation)(nil)).Elem()
}

func (i *WebsiteCertificateAuthorityAssociation) ToWebsiteCertificateAuthorityAssociationOutput() WebsiteCertificateAuthorityAssociationOutput {
	return i.ToWebsiteCertificateAuthorityAssociationOutputWithContext(context.Background())
}

func (i *WebsiteCertificateAuthorityAssociation) ToWebsiteCertificateAuthorityAssociationOutputWithContext(ctx context.Context) WebsiteCertificateAuthorityAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebsiteCertificateAuthorityAssociationOutput)
}

// WebsiteCertificateAuthorityAssociationArrayInput is an input type that accepts WebsiteCertificateAuthorityAssociationArray and WebsiteCertificateAuthorityAssociationArrayOutput values.
// You can construct a concrete instance of `WebsiteCertificateAuthorityAssociationArrayInput` via:
//
//	WebsiteCertificateAuthorityAssociationArray{ WebsiteCertificateAuthorityAssociationArgs{...} }
type WebsiteCertificateAuthorityAssociationArrayInput interface {
	pulumi.Input

	ToWebsiteCertificateAuthorityAssociationArrayOutput() WebsiteCertificateAuthorityAssociationArrayOutput
	ToWebsiteCertificateAuthorityAssociationArrayOutputWithContext(context.Context) WebsiteCertificateAuthorityAssociationArrayOutput
}

type WebsiteCertificateAuthorityAssociationArray []WebsiteCertificateAuthorityAssociationInput

func (WebsiteCertificateAuthorityAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebsiteCertificateAuthorityAssociation)(nil)).Elem()
}

func (i WebsiteCertificateAuthorityAssociationArray) ToWebsiteCertificateAuthorityAssociationArrayOutput() WebsiteCertificateAuthorityAssociationArrayOutput {
	return i.ToWebsiteCertificateAuthorityAssociationArrayOutputWithContext(context.Background())
}

func (i WebsiteCertificateAuthorityAssociationArray) ToWebsiteCertificateAuthorityAssociationArrayOutputWithContext(ctx context.Context) WebsiteCertificateAuthorityAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebsiteCertificateAuthorityAssociationArrayOutput)
}

// WebsiteCertificateAuthorityAssociationMapInput is an input type that accepts WebsiteCertificateAuthorityAssociationMap and WebsiteCertificateAuthorityAssociationMapOutput values.
// You can construct a concrete instance of `WebsiteCertificateAuthorityAssociationMapInput` via:
//
//	WebsiteCertificateAuthorityAssociationMap{ "key": WebsiteCertificateAuthorityAssociationArgs{...} }
type WebsiteCertificateAuthorityAssociationMapInput interface {
	pulumi.Input

	ToWebsiteCertificateAuthorityAssociationMapOutput() WebsiteCertificateAuthorityAssociationMapOutput
	ToWebsiteCertificateAuthorityAssociationMapOutputWithContext(context.Context) WebsiteCertificateAuthorityAssociationMapOutput
}

type WebsiteCertificateAuthorityAssociationMap map[string]WebsiteCertificateAuthorityAssociationInput

func (WebsiteCertificateAuthorityAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebsiteCertificateAuthorityAssociation)(nil)).Elem()
}

func (i WebsiteCertificateAuthorityAssociationMap) ToWebsiteCertificateAuthorityAssociationMapOutput() WebsiteCertificateAuthorityAssociationMapOutput {
	return i.ToWebsiteCertificateAuthorityAssociationMapOutputWithContext(context.Background())
}

func (i WebsiteCertificateAuthorityAssociationMap) ToWebsiteCertificateAuthorityAssociationMapOutputWithContext(ctx context.Context) WebsiteCertificateAuthorityAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebsiteCertificateAuthorityAssociationMapOutput)
}

type WebsiteCertificateAuthorityAssociationOutput struct{ *pulumi.OutputState }

func (WebsiteCertificateAuthorityAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebsiteCertificateAuthorityAssociation)(nil)).Elem()
}

func (o WebsiteCertificateAuthorityAssociationOutput) ToWebsiteCertificateAuthorityAssociationOutput() WebsiteCertificateAuthorityAssociationOutput {
	return o
}

func (o WebsiteCertificateAuthorityAssociationOutput) ToWebsiteCertificateAuthorityAssociationOutputWithContext(ctx context.Context) WebsiteCertificateAuthorityAssociationOutput {
	return o
}

// The root certificate of the Certificate Authority.
func (o WebsiteCertificateAuthorityAssociationOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v *WebsiteCertificateAuthorityAssociation) pulumi.StringOutput { return v.Certificate }).(pulumi.StringOutput)
}

// The certificate name to display.
func (o WebsiteCertificateAuthorityAssociationOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebsiteCertificateAuthorityAssociation) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The ARN of the fleet.
func (o WebsiteCertificateAuthorityAssociationOutput) FleetArn() pulumi.StringOutput {
	return o.ApplyT(func(v *WebsiteCertificateAuthorityAssociation) pulumi.StringOutput { return v.FleetArn }).(pulumi.StringOutput)
}

// A unique identifier for the Certificate Authority.
func (o WebsiteCertificateAuthorityAssociationOutput) WebsiteCaId() pulumi.StringOutput {
	return o.ApplyT(func(v *WebsiteCertificateAuthorityAssociation) pulumi.StringOutput { return v.WebsiteCaId }).(pulumi.StringOutput)
}

type WebsiteCertificateAuthorityAssociationArrayOutput struct{ *pulumi.OutputState }

func (WebsiteCertificateAuthorityAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebsiteCertificateAuthorityAssociation)(nil)).Elem()
}

func (o WebsiteCertificateAuthorityAssociationArrayOutput) ToWebsiteCertificateAuthorityAssociationArrayOutput() WebsiteCertificateAuthorityAssociationArrayOutput {
	return o
}

func (o WebsiteCertificateAuthorityAssociationArrayOutput) ToWebsiteCertificateAuthorityAssociationArrayOutputWithContext(ctx context.Context) WebsiteCertificateAuthorityAssociationArrayOutput {
	return o
}

func (o WebsiteCertificateAuthorityAssociationArrayOutput) Index(i pulumi.IntInput) WebsiteCertificateAuthorityAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WebsiteCertificateAuthorityAssociation {
		return vs[0].([]*WebsiteCertificateAuthorityAssociation)[vs[1].(int)]
	}).(WebsiteCertificateAuthorityAssociationOutput)
}

type WebsiteCertificateAuthorityAssociationMapOutput struct{ *pulumi.OutputState }

func (WebsiteCertificateAuthorityAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebsiteCertificateAuthorityAssociation)(nil)).Elem()
}

func (o WebsiteCertificateAuthorityAssociationMapOutput) ToWebsiteCertificateAuthorityAssociationMapOutput() WebsiteCertificateAuthorityAssociationMapOutput {
	return o
}

func (o WebsiteCertificateAuthorityAssociationMapOutput) ToWebsiteCertificateAuthorityAssociationMapOutputWithContext(ctx context.Context) WebsiteCertificateAuthorityAssociationMapOutput {
	return o
}

func (o WebsiteCertificateAuthorityAssociationMapOutput) MapIndex(k pulumi.StringInput) WebsiteCertificateAuthorityAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WebsiteCertificateAuthorityAssociation {
		return vs[0].(map[string]*WebsiteCertificateAuthorityAssociation)[vs[1].(string)]
	}).(WebsiteCertificateAuthorityAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebsiteCertificateAuthorityAssociationInput)(nil)).Elem(), &WebsiteCertificateAuthorityAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebsiteCertificateAuthorityAssociationArrayInput)(nil)).Elem(), WebsiteCertificateAuthorityAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebsiteCertificateAuthorityAssociationMapInput)(nil)).Elem(), WebsiteCertificateAuthorityAssociationMap{})
	pulumi.RegisterOutputType(WebsiteCertificateAuthorityAssociationOutput{})
	pulumi.RegisterOutputType(WebsiteCertificateAuthorityAssociationArrayOutput{})
	pulumi.RegisterOutputType(WebsiteCertificateAuthorityAssociationMapOutput{})
}
