// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mediapackage

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides an AWS Elemental MediaPackage Channel.
type Channel struct {
	pulumi.CustomResourceState

	// The ARN of the channel
	Arn pulumi.StringOutput `pulumi:"arn"`
	// A unique identifier describing the channel
	ChannelId pulumi.StringOutput `pulumi:"channelId"`
	// A description of the channel
	Description pulumi.StringOutput `pulumi:"description"`
	// A single item list of HLS ingest information
	HlsIngests ChannelHlsIngestArrayOutput `pulumi:"hlsIngests"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewChannel registers a new resource with the given unique name, arguments, and options.
func NewChannel(ctx *pulumi.Context,
	name string, args *ChannelArgs, opts ...pulumi.ResourceOption) (*Channel, error) {
	if args == nil || args.ChannelId == nil {
		return nil, errors.New("missing required argument 'ChannelId'")
	}
	if args == nil {
		args = &ChannelArgs{}
	}
	if args.Description == nil {
		args.Description = pulumi.StringPtr("Managed by Pulumi")
	}
	var resource Channel
	err := ctx.RegisterResource("aws:mediapackage/channel:Channel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChannel gets an existing Channel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChannelState, opts ...pulumi.ResourceOption) (*Channel, error) {
	var resource Channel
	err := ctx.ReadResource("aws:mediapackage/channel:Channel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Channel resources.
type channelState struct {
	// The ARN of the channel
	Arn *string `pulumi:"arn"`
	// A unique identifier describing the channel
	ChannelId *string `pulumi:"channelId"`
	// A description of the channel
	Description *string `pulumi:"description"`
	// A single item list of HLS ingest information
	HlsIngests []ChannelHlsIngest `pulumi:"hlsIngests"`
	// A mapping of tags to assign to the resource.
	Tags map[string]interface{} `pulumi:"tags"`
}

type ChannelState struct {
	// The ARN of the channel
	Arn pulumi.StringPtrInput
	// A unique identifier describing the channel
	ChannelId pulumi.StringPtrInput
	// A description of the channel
	Description pulumi.StringPtrInput
	// A single item list of HLS ingest information
	HlsIngests ChannelHlsIngestArrayInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput
}

func (ChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*channelState)(nil)).Elem()
}

type channelArgs struct {
	// A unique identifier describing the channel
	ChannelId string `pulumi:"channelId"`
	// A description of the channel
	Description *string `pulumi:"description"`
	// A mapping of tags to assign to the resource.
	Tags map[string]interface{} `pulumi:"tags"`
}

// The set of arguments for constructing a Channel resource.
type ChannelArgs struct {
	// A unique identifier describing the channel
	ChannelId pulumi.StringInput
	// A description of the channel
	Description pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput
}

func (ChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*channelArgs)(nil)).Elem()
}
