// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mediapackage

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an AWS Elemental MediaPackage Version 2 Channel Group.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/mediapackage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mediapackage.NewV2ChannelGroup(ctx, "example", &mediapackage.V2ChannelGroupArgs{
//				Name:        pulumi.String("example"),
//				Description: pulumi.String("channel group for example channels"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Elemental MediaPackage Version 2 Channel Group using the channel group's `name`. For example:
//
// ```sh
// $ pulumi import aws:mediapackage/v2ChannelGroup:V2ChannelGroup example example
// ```
type V2ChannelGroup struct {
	pulumi.CustomResourceState

	// The ARN of the channel
	Arn pulumi.StringOutput `pulumi:"arn"`
	// A description of the channel group
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The egress domain of the channel group
	EgressDomain pulumi.StringOutput `pulumi:"egressDomain"`
	// A unique identifier naming the channel group
	Name pulumi.StringOutput `pulumi:"name"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewV2ChannelGroup registers a new resource with the given unique name, arguments, and options.
func NewV2ChannelGroup(ctx *pulumi.Context,
	name string, args *V2ChannelGroupArgs, opts ...pulumi.ResourceOption) (*V2ChannelGroup, error) {
	if args == nil {
		args = &V2ChannelGroupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource V2ChannelGroup
	err := ctx.RegisterResource("aws:mediapackage/v2ChannelGroup:V2ChannelGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetV2ChannelGroup gets an existing V2ChannelGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetV2ChannelGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *V2ChannelGroupState, opts ...pulumi.ResourceOption) (*V2ChannelGroup, error) {
	var resource V2ChannelGroup
	err := ctx.ReadResource("aws:mediapackage/v2ChannelGroup:V2ChannelGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering V2ChannelGroup resources.
type v2channelGroupState struct {
	// The ARN of the channel
	Arn *string `pulumi:"arn"`
	// A description of the channel group
	Description *string `pulumi:"description"`
	// The egress domain of the channel group
	EgressDomain *string `pulumi:"egressDomain"`
	// A unique identifier naming the channel group
	Name *string `pulumi:"name"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type V2ChannelGroupState struct {
	// The ARN of the channel
	Arn pulumi.StringPtrInput
	// A description of the channel group
	Description pulumi.StringPtrInput
	// The egress domain of the channel group
	EgressDomain pulumi.StringPtrInput
	// A unique identifier naming the channel group
	Name pulumi.StringPtrInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
}

func (V2ChannelGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*v2channelGroupState)(nil)).Elem()
}

type v2channelGroupArgs struct {
	// A description of the channel group
	Description *string `pulumi:"description"`
	// A unique identifier naming the channel group
	Name *string `pulumi:"name"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a V2ChannelGroup resource.
type V2ChannelGroupArgs struct {
	// A description of the channel group
	Description pulumi.StringPtrInput
	// A unique identifier naming the channel group
	Name pulumi.StringPtrInput
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
}

func (V2ChannelGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*v2channelGroupArgs)(nil)).Elem()
}

type V2ChannelGroupInput interface {
	pulumi.Input

	ToV2ChannelGroupOutput() V2ChannelGroupOutput
	ToV2ChannelGroupOutputWithContext(ctx context.Context) V2ChannelGroupOutput
}

func (*V2ChannelGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**V2ChannelGroup)(nil)).Elem()
}

func (i *V2ChannelGroup) ToV2ChannelGroupOutput() V2ChannelGroupOutput {
	return i.ToV2ChannelGroupOutputWithContext(context.Background())
}

func (i *V2ChannelGroup) ToV2ChannelGroupOutputWithContext(ctx context.Context) V2ChannelGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2ChannelGroupOutput)
}

// V2ChannelGroupArrayInput is an input type that accepts V2ChannelGroupArray and V2ChannelGroupArrayOutput values.
// You can construct a concrete instance of `V2ChannelGroupArrayInput` via:
//
//	V2ChannelGroupArray{ V2ChannelGroupArgs{...} }
type V2ChannelGroupArrayInput interface {
	pulumi.Input

	ToV2ChannelGroupArrayOutput() V2ChannelGroupArrayOutput
	ToV2ChannelGroupArrayOutputWithContext(context.Context) V2ChannelGroupArrayOutput
}

type V2ChannelGroupArray []V2ChannelGroupInput

func (V2ChannelGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V2ChannelGroup)(nil)).Elem()
}

func (i V2ChannelGroupArray) ToV2ChannelGroupArrayOutput() V2ChannelGroupArrayOutput {
	return i.ToV2ChannelGroupArrayOutputWithContext(context.Background())
}

func (i V2ChannelGroupArray) ToV2ChannelGroupArrayOutputWithContext(ctx context.Context) V2ChannelGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2ChannelGroupArrayOutput)
}

// V2ChannelGroupMapInput is an input type that accepts V2ChannelGroupMap and V2ChannelGroupMapOutput values.
// You can construct a concrete instance of `V2ChannelGroupMapInput` via:
//
//	V2ChannelGroupMap{ "key": V2ChannelGroupArgs{...} }
type V2ChannelGroupMapInput interface {
	pulumi.Input

	ToV2ChannelGroupMapOutput() V2ChannelGroupMapOutput
	ToV2ChannelGroupMapOutputWithContext(context.Context) V2ChannelGroupMapOutput
}

type V2ChannelGroupMap map[string]V2ChannelGroupInput

func (V2ChannelGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V2ChannelGroup)(nil)).Elem()
}

func (i V2ChannelGroupMap) ToV2ChannelGroupMapOutput() V2ChannelGroupMapOutput {
	return i.ToV2ChannelGroupMapOutputWithContext(context.Background())
}

func (i V2ChannelGroupMap) ToV2ChannelGroupMapOutputWithContext(ctx context.Context) V2ChannelGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2ChannelGroupMapOutput)
}

type V2ChannelGroupOutput struct{ *pulumi.OutputState }

func (V2ChannelGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**V2ChannelGroup)(nil)).Elem()
}

func (o V2ChannelGroupOutput) ToV2ChannelGroupOutput() V2ChannelGroupOutput {
	return o
}

func (o V2ChannelGroupOutput) ToV2ChannelGroupOutputWithContext(ctx context.Context) V2ChannelGroupOutput {
	return o
}

// The ARN of the channel
func (o V2ChannelGroupOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *V2ChannelGroup) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// A description of the channel group
func (o V2ChannelGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V2ChannelGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The egress domain of the channel group
func (o V2ChannelGroupOutput) EgressDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *V2ChannelGroup) pulumi.StringOutput { return v.EgressDomain }).(pulumi.StringOutput)
}

// A unique identifier naming the channel group
func (o V2ChannelGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *V2ChannelGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o V2ChannelGroupOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *V2ChannelGroup) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o V2ChannelGroupOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *V2ChannelGroup) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type V2ChannelGroupArrayOutput struct{ *pulumi.OutputState }

func (V2ChannelGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V2ChannelGroup)(nil)).Elem()
}

func (o V2ChannelGroupArrayOutput) ToV2ChannelGroupArrayOutput() V2ChannelGroupArrayOutput {
	return o
}

func (o V2ChannelGroupArrayOutput) ToV2ChannelGroupArrayOutputWithContext(ctx context.Context) V2ChannelGroupArrayOutput {
	return o
}

func (o V2ChannelGroupArrayOutput) Index(i pulumi.IntInput) V2ChannelGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *V2ChannelGroup {
		return vs[0].([]*V2ChannelGroup)[vs[1].(int)]
	}).(V2ChannelGroupOutput)
}

type V2ChannelGroupMapOutput struct{ *pulumi.OutputState }

func (V2ChannelGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V2ChannelGroup)(nil)).Elem()
}

func (o V2ChannelGroupMapOutput) ToV2ChannelGroupMapOutput() V2ChannelGroupMapOutput {
	return o
}

func (o V2ChannelGroupMapOutput) ToV2ChannelGroupMapOutputWithContext(ctx context.Context) V2ChannelGroupMapOutput {
	return o
}

func (o V2ChannelGroupMapOutput) MapIndex(k pulumi.StringInput) V2ChannelGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *V2ChannelGroup {
		return vs[0].(map[string]*V2ChannelGroup)[vs[1].(string)]
	}).(V2ChannelGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*V2ChannelGroupInput)(nil)).Elem(), &V2ChannelGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2ChannelGroupArrayInput)(nil)).Elem(), V2ChannelGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2ChannelGroupMapInput)(nil)).Elem(), V2ChannelGroupMap{})
	pulumi.RegisterOutputType(V2ChannelGroupOutput{})
	pulumi.RegisterOutputType(V2ChannelGroupArrayOutput{})
	pulumi.RegisterOutputType(V2ChannelGroupMapOutput{})
}
