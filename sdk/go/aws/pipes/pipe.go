// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pipes

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS EventBridge Pipes Pipe.
//
// You can find out more about EventBridge Pipes in the [User Guide](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes.html).
//
// EventBridge Pipes are very configurable, and may require IAM permissions to work correctly. More information on the configuration options and IAM permissions can be found in the [User Guide](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes.html).
//
// > **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/iam"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/pipes"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/sqs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := aws.GetCallerIdentity(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"Version": "2012-10-17",
//				"Statement": map[string]interface{}{
//					"Effect": "Allow",
//					"Action": "sts:AssumeRole",
//					"Principal": map[string]interface{}{
//						"Service": "pipes.amazonaws.com",
//					},
//					"Condition": map[string]interface{}{
//						"StringEquals": map[string]interface{}{
//							"aws:SourceAccount": main.AccountId,
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			test, err := iam.NewRole(ctx, "test", &iam.RoleArgs{
//				AssumeRolePolicy: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			sourceQueue, err := sqs.NewQueue(ctx, "sourceQueue", nil)
//			if err != nil {
//				return err
//			}
//			sourceRolePolicy, err := iam.NewRolePolicy(ctx, "sourceRolePolicy", &iam.RolePolicyArgs{
//				Role: test.ID(),
//				Policy: sourceQueue.Arn.ApplyT(func(arn string) (pulumi.String, error) {
//					var _zero pulumi.String
//					tmpJSON1, err := json.Marshal(map[string]interface{}{
//						"Version": "2012-10-17",
//						"Statement": []map[string]interface{}{
//							map[string]interface{}{
//								"Effect": "Allow",
//								"Action": []string{
//									"sqs:DeleteMessage",
//									"sqs:GetQueueAttributes",
//									"sqs:ReceiveMessage",
//								},
//								"Resource": []string{
//									arn,
//								},
//							},
//						},
//					})
//					if err != nil {
//						return _zero, err
//					}
//					json1 := string(tmpJSON1)
//					return pulumi.String(json1), nil
//				}).(pulumi.StringOutput),
//			})
//			if err != nil {
//				return err
//			}
//			targetQueue, err := sqs.NewQueue(ctx, "targetQueue", nil)
//			if err != nil {
//				return err
//			}
//			targetRolePolicy, err := iam.NewRolePolicy(ctx, "targetRolePolicy", &iam.RolePolicyArgs{
//				Role: test.ID(),
//				Policy: targetQueue.Arn.ApplyT(func(arn string) (pulumi.String, error) {
//					var _zero pulumi.String
//					tmpJSON2, err := json.Marshal(map[string]interface{}{
//						"Version": "2012-10-17",
//						"Statement": []map[string]interface{}{
//							map[string]interface{}{
//								"Effect": "Allow",
//								"Action": []string{
//									"sqs:SendMessage",
//								},
//								"Resource": []string{
//									arn,
//								},
//							},
//						},
//					})
//					if err != nil {
//						return _zero, err
//					}
//					json2 := string(tmpJSON2)
//					return pulumi.String(json2), nil
//				}).(pulumi.StringOutput),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = pipes.NewPipe(ctx, "example", &pipes.PipeArgs{
//				RoleArn: pulumi.Any(aws_iam_role.Example.Arn),
//				Source:  sourceQueue.Arn,
//				Target:  targetQueue.Arn,
//			}, pulumi.DependsOn([]pulumi.Resource{
//				sourceRolePolicy,
//				targetRolePolicy,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Filter Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/pipes"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"source": []string{
//					"event-source",
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = pipes.NewPipe(ctx, "example", &pipes.PipeArgs{
//				RoleArn: pulumi.Any(aws_iam_role.Example.Arn),
//				Source:  pulumi.Any(aws_sqs_queue.Source.Arn),
//				Target:  pulumi.Any(aws_sqs_queue.Target.Arn),
//				SourceParameters: &pipes.PipeSourceParametersArgs{
//					FilterCriteria: &pipes.PipeSourceParametersFilterCriteriaArgs{
//						Filters: pipes.PipeSourceParametersFilterCriteriaFilterArray{
//							&pipes.PipeSourceParametersFilterCriteriaFilterArgs{
//								Pattern: pulumi.String(json0),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import pipes using the `name`. For example:
//
// ```sh
//
//	$ pulumi import aws:pipes/pipe:Pipe example my-pipe
//
// ```
type Pipe struct {
	pulumi.CustomResourceState

	// The ARN of the Amazon SQS queue specified as the target for the dead-letter queue.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// A description of the pipe. At most 512 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The state the pipe should be in. One of: `RUNNING`, `STOPPED`.
	DesiredState pulumi.StringPtrOutput `pulumi:"desiredState"`
	// Enrichment resource of the pipe (typically an ARN). Read more about enrichment in the [User Guide](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes.html#pipes-enrichment).
	Enrichment pulumi.StringPtrOutput `pulumi:"enrichment"`
	// Parameters to configure enrichment for your pipe. Detailed below.
	EnrichmentParameters PipeEnrichmentParametersPtrOutput `pulumi:"enrichmentParameters"`
	// Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumi.StringOutput `pulumi:"namePrefix"`
	// ARN of the role that allows the pipe to send data to the target.
	RoleArn pulumi.StringOutput `pulumi:"roleArn"`
	// Source resource of the pipe (typically an ARN).
	Source pulumi.StringOutput `pulumi:"source"`
	// Parameters to configure a source for the pipe. Detailed below.
	SourceParameters PipeSourceParametersOutput `pulumi:"sourceParameters"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// Target resource of the pipe (typically an ARN).
	//
	// The following arguments are optional:
	Target pulumi.StringOutput `pulumi:"target"`
	// Parameters to configure a target for your pipe. Detailed below.
	TargetParameters PipeTargetParametersPtrOutput `pulumi:"targetParameters"`
}

// NewPipe registers a new resource with the given unique name, arguments, and options.
func NewPipe(ctx *pulumi.Context,
	name string, args *PipeArgs, opts ...pulumi.ResourceOption) (*Pipe, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	if args.Target == nil {
		return nil, errors.New("invalid value for required argument 'Target'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Pipe
	err := ctx.RegisterResource("aws:pipes/pipe:Pipe", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPipe gets an existing Pipe resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPipe(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PipeState, opts ...pulumi.ResourceOption) (*Pipe, error) {
	var resource Pipe
	err := ctx.ReadResource("aws:pipes/pipe:Pipe", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Pipe resources.
type pipeState struct {
	// The ARN of the Amazon SQS queue specified as the target for the dead-letter queue.
	Arn *string `pulumi:"arn"`
	// A description of the pipe. At most 512 characters.
	Description *string `pulumi:"description"`
	// The state the pipe should be in. One of: `RUNNING`, `STOPPED`.
	DesiredState *string `pulumi:"desiredState"`
	// Enrichment resource of the pipe (typically an ARN). Read more about enrichment in the [User Guide](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes.html#pipes-enrichment).
	Enrichment *string `pulumi:"enrichment"`
	// Parameters to configure enrichment for your pipe. Detailed below.
	EnrichmentParameters *PipeEnrichmentParameters `pulumi:"enrichmentParameters"`
	// Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// ARN of the role that allows the pipe to send data to the target.
	RoleArn *string `pulumi:"roleArn"`
	// Source resource of the pipe (typically an ARN).
	Source *string `pulumi:"source"`
	// Parameters to configure a source for the pipe. Detailed below.
	SourceParameters *PipeSourceParameters `pulumi:"sourceParameters"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Target resource of the pipe (typically an ARN).
	//
	// The following arguments are optional:
	Target *string `pulumi:"target"`
	// Parameters to configure a target for your pipe. Detailed below.
	TargetParameters *PipeTargetParameters `pulumi:"targetParameters"`
}

type PipeState struct {
	// The ARN of the Amazon SQS queue specified as the target for the dead-letter queue.
	Arn pulumi.StringPtrInput
	// A description of the pipe. At most 512 characters.
	Description pulumi.StringPtrInput
	// The state the pipe should be in. One of: `RUNNING`, `STOPPED`.
	DesiredState pulumi.StringPtrInput
	// Enrichment resource of the pipe (typically an ARN). Read more about enrichment in the [User Guide](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes.html#pipes-enrichment).
	Enrichment pulumi.StringPtrInput
	// Parameters to configure enrichment for your pipe. Detailed below.
	EnrichmentParameters PipeEnrichmentParametersPtrInput
	// Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumi.StringPtrInput
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumi.StringPtrInput
	// ARN of the role that allows the pipe to send data to the target.
	RoleArn pulumi.StringPtrInput
	// Source resource of the pipe (typically an ARN).
	Source pulumi.StringPtrInput
	// Parameters to configure a source for the pipe. Detailed below.
	SourceParameters PipeSourceParametersPtrInput
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapInput
	// Target resource of the pipe (typically an ARN).
	//
	// The following arguments are optional:
	Target pulumi.StringPtrInput
	// Parameters to configure a target for your pipe. Detailed below.
	TargetParameters PipeTargetParametersPtrInput
}

func (PipeState) ElementType() reflect.Type {
	return reflect.TypeOf((*pipeState)(nil)).Elem()
}

type pipeArgs struct {
	// A description of the pipe. At most 512 characters.
	Description *string `pulumi:"description"`
	// The state the pipe should be in. One of: `RUNNING`, `STOPPED`.
	DesiredState *string `pulumi:"desiredState"`
	// Enrichment resource of the pipe (typically an ARN). Read more about enrichment in the [User Guide](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes.html#pipes-enrichment).
	Enrichment *string `pulumi:"enrichment"`
	// Parameters to configure enrichment for your pipe. Detailed below.
	EnrichmentParameters *PipeEnrichmentParameters `pulumi:"enrichmentParameters"`
	// Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// ARN of the role that allows the pipe to send data to the target.
	RoleArn string `pulumi:"roleArn"`
	// Source resource of the pipe (typically an ARN).
	Source string `pulumi:"source"`
	// Parameters to configure a source for the pipe. Detailed below.
	SourceParameters *PipeSourceParameters `pulumi:"sourceParameters"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Target resource of the pipe (typically an ARN).
	//
	// The following arguments are optional:
	Target string `pulumi:"target"`
	// Parameters to configure a target for your pipe. Detailed below.
	TargetParameters *PipeTargetParameters `pulumi:"targetParameters"`
}

// The set of arguments for constructing a Pipe resource.
type PipeArgs struct {
	// A description of the pipe. At most 512 characters.
	Description pulumi.StringPtrInput
	// The state the pipe should be in. One of: `RUNNING`, `STOPPED`.
	DesiredState pulumi.StringPtrInput
	// Enrichment resource of the pipe (typically an ARN). Read more about enrichment in the [User Guide](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes.html#pipes-enrichment).
	Enrichment pulumi.StringPtrInput
	// Parameters to configure enrichment for your pipe. Detailed below.
	EnrichmentParameters PipeEnrichmentParametersPtrInput
	// Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumi.StringPtrInput
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumi.StringPtrInput
	// ARN of the role that allows the pipe to send data to the target.
	RoleArn pulumi.StringInput
	// Source resource of the pipe (typically an ARN).
	Source pulumi.StringInput
	// Parameters to configure a source for the pipe. Detailed below.
	SourceParameters PipeSourceParametersPtrInput
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Target resource of the pipe (typically an ARN).
	//
	// The following arguments are optional:
	Target pulumi.StringInput
	// Parameters to configure a target for your pipe. Detailed below.
	TargetParameters PipeTargetParametersPtrInput
}

func (PipeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pipeArgs)(nil)).Elem()
}

type PipeInput interface {
	pulumi.Input

	ToPipeOutput() PipeOutput
	ToPipeOutputWithContext(ctx context.Context) PipeOutput
}

func (*Pipe) ElementType() reflect.Type {
	return reflect.TypeOf((**Pipe)(nil)).Elem()
}

func (i *Pipe) ToPipeOutput() PipeOutput {
	return i.ToPipeOutputWithContext(context.Background())
}

func (i *Pipe) ToPipeOutputWithContext(ctx context.Context) PipeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeOutput)
}

// PipeArrayInput is an input type that accepts PipeArray and PipeArrayOutput values.
// You can construct a concrete instance of `PipeArrayInput` via:
//
//	PipeArray{ PipeArgs{...} }
type PipeArrayInput interface {
	pulumi.Input

	ToPipeArrayOutput() PipeArrayOutput
	ToPipeArrayOutputWithContext(context.Context) PipeArrayOutput
}

type PipeArray []PipeInput

func (PipeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pipe)(nil)).Elem()
}

func (i PipeArray) ToPipeArrayOutput() PipeArrayOutput {
	return i.ToPipeArrayOutputWithContext(context.Background())
}

func (i PipeArray) ToPipeArrayOutputWithContext(ctx context.Context) PipeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeArrayOutput)
}

// PipeMapInput is an input type that accepts PipeMap and PipeMapOutput values.
// You can construct a concrete instance of `PipeMapInput` via:
//
//	PipeMap{ "key": PipeArgs{...} }
type PipeMapInput interface {
	pulumi.Input

	ToPipeMapOutput() PipeMapOutput
	ToPipeMapOutputWithContext(context.Context) PipeMapOutput
}

type PipeMap map[string]PipeInput

func (PipeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pipe)(nil)).Elem()
}

func (i PipeMap) ToPipeMapOutput() PipeMapOutput {
	return i.ToPipeMapOutputWithContext(context.Background())
}

func (i PipeMap) ToPipeMapOutputWithContext(ctx context.Context) PipeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeMapOutput)
}

type PipeOutput struct{ *pulumi.OutputState }

func (PipeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Pipe)(nil)).Elem()
}

func (o PipeOutput) ToPipeOutput() PipeOutput {
	return o
}

func (o PipeOutput) ToPipeOutputWithContext(ctx context.Context) PipeOutput {
	return o
}

// The ARN of the Amazon SQS queue specified as the target for the dead-letter queue.
func (o PipeOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipe) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// A description of the pipe. At most 512 characters.
func (o PipeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pipe) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The state the pipe should be in. One of: `RUNNING`, `STOPPED`.
func (o PipeOutput) DesiredState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pipe) pulumi.StringPtrOutput { return v.DesiredState }).(pulumi.StringPtrOutput)
}

// Enrichment resource of the pipe (typically an ARN). Read more about enrichment in the [User Guide](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes.html#pipes-enrichment).
func (o PipeOutput) Enrichment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pipe) pulumi.StringPtrOutput { return v.Enrichment }).(pulumi.StringPtrOutput)
}

// Parameters to configure enrichment for your pipe. Detailed below.
func (o PipeOutput) EnrichmentParameters() PipeEnrichmentParametersPtrOutput {
	return o.ApplyT(func(v *Pipe) PipeEnrichmentParametersPtrOutput { return v.EnrichmentParameters }).(PipeEnrichmentParametersPtrOutput)
}

// Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
func (o PipeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipe) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
func (o PipeOutput) NamePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipe) pulumi.StringOutput { return v.NamePrefix }).(pulumi.StringOutput)
}

// ARN of the role that allows the pipe to send data to the target.
func (o PipeOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipe) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

// Source resource of the pipe (typically an ARN).
func (o PipeOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipe) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

// Parameters to configure a source for the pipe. Detailed below.
func (o PipeOutput) SourceParameters() PipeSourceParametersOutput {
	return o.ApplyT(func(v *Pipe) PipeSourceParametersOutput { return v.SourceParameters }).(PipeSourceParametersOutput)
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o PipeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Pipe) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o PipeOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Pipe) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// Target resource of the pipe (typically an ARN).
//
// The following arguments are optional:
func (o PipeOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipe) pulumi.StringOutput { return v.Target }).(pulumi.StringOutput)
}

// Parameters to configure a target for your pipe. Detailed below.
func (o PipeOutput) TargetParameters() PipeTargetParametersPtrOutput {
	return o.ApplyT(func(v *Pipe) PipeTargetParametersPtrOutput { return v.TargetParameters }).(PipeTargetParametersPtrOutput)
}

type PipeArrayOutput struct{ *pulumi.OutputState }

func (PipeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pipe)(nil)).Elem()
}

func (o PipeArrayOutput) ToPipeArrayOutput() PipeArrayOutput {
	return o
}

func (o PipeArrayOutput) ToPipeArrayOutputWithContext(ctx context.Context) PipeArrayOutput {
	return o
}

func (o PipeArrayOutput) Index(i pulumi.IntInput) PipeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Pipe {
		return vs[0].([]*Pipe)[vs[1].(int)]
	}).(PipeOutput)
}

type PipeMapOutput struct{ *pulumi.OutputState }

func (PipeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pipe)(nil)).Elem()
}

func (o PipeMapOutput) ToPipeMapOutput() PipeMapOutput {
	return o
}

func (o PipeMapOutput) ToPipeMapOutputWithContext(ctx context.Context) PipeMapOutput {
	return o
}

func (o PipeMapOutput) MapIndex(k pulumi.StringInput) PipeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Pipe {
		return vs[0].(map[string]*Pipe)[vs[1].(string)]
	}).(PipeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PipeInput)(nil)).Elem(), &Pipe{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeArrayInput)(nil)).Elem(), PipeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeMapInput)(nil)).Elem(), PipeMap{})
	pulumi.RegisterOutputType(PipeOutput{})
	pulumi.RegisterOutputType(PipeArrayOutput{})
	pulumi.RegisterOutputType(PipeMapOutput{})
}
