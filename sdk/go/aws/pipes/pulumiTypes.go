// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pipes

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type PipeEnrichmentParameters struct {
	// Contains the HTTP parameters to use when the target is a API Gateway REST endpoint or EventBridge ApiDestination. If you specify an API Gateway REST API or EventBridge ApiDestination as a target, you can use this parameter to specify headers, path parameters, and query string keys/values as part of your target invoking request. If you're using ApiDestinations, the corresponding Connection can also have these values configured. In case of any conflicting keys, values from the Connection take precedence. Detailed below.
	HttpParameters *PipeEnrichmentParametersHttpParameters `pulumi:"httpParameters"`
	// Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. Maximum length of 8192 characters.
	InputTemplate *string `pulumi:"inputTemplate"`
}

// PipeEnrichmentParametersInput is an input type that accepts PipeEnrichmentParametersArgs and PipeEnrichmentParametersOutput values.
// You can construct a concrete instance of `PipeEnrichmentParametersInput` via:
//
//	PipeEnrichmentParametersArgs{...}
type PipeEnrichmentParametersInput interface {
	pulumi.Input

	ToPipeEnrichmentParametersOutput() PipeEnrichmentParametersOutput
	ToPipeEnrichmentParametersOutputWithContext(context.Context) PipeEnrichmentParametersOutput
}

type PipeEnrichmentParametersArgs struct {
	// Contains the HTTP parameters to use when the target is a API Gateway REST endpoint or EventBridge ApiDestination. If you specify an API Gateway REST API or EventBridge ApiDestination as a target, you can use this parameter to specify headers, path parameters, and query string keys/values as part of your target invoking request. If you're using ApiDestinations, the corresponding Connection can also have these values configured. In case of any conflicting keys, values from the Connection take precedence. Detailed below.
	HttpParameters PipeEnrichmentParametersHttpParametersPtrInput `pulumi:"httpParameters"`
	// Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. Maximum length of 8192 characters.
	InputTemplate pulumi.StringPtrInput `pulumi:"inputTemplate"`
}

func (PipeEnrichmentParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeEnrichmentParameters)(nil)).Elem()
}

func (i PipeEnrichmentParametersArgs) ToPipeEnrichmentParametersOutput() PipeEnrichmentParametersOutput {
	return i.ToPipeEnrichmentParametersOutputWithContext(context.Background())
}

func (i PipeEnrichmentParametersArgs) ToPipeEnrichmentParametersOutputWithContext(ctx context.Context) PipeEnrichmentParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeEnrichmentParametersOutput)
}

func (i PipeEnrichmentParametersArgs) ToOutput(ctx context.Context) pulumix.Output[PipeEnrichmentParameters] {
	return pulumix.Output[PipeEnrichmentParameters]{
		OutputState: i.ToPipeEnrichmentParametersOutputWithContext(ctx).OutputState,
	}
}

func (i PipeEnrichmentParametersArgs) ToPipeEnrichmentParametersPtrOutput() PipeEnrichmentParametersPtrOutput {
	return i.ToPipeEnrichmentParametersPtrOutputWithContext(context.Background())
}

func (i PipeEnrichmentParametersArgs) ToPipeEnrichmentParametersPtrOutputWithContext(ctx context.Context) PipeEnrichmentParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeEnrichmentParametersOutput).ToPipeEnrichmentParametersPtrOutputWithContext(ctx)
}

// PipeEnrichmentParametersPtrInput is an input type that accepts PipeEnrichmentParametersArgs, PipeEnrichmentParametersPtr and PipeEnrichmentParametersPtrOutput values.
// You can construct a concrete instance of `PipeEnrichmentParametersPtrInput` via:
//
//	        PipeEnrichmentParametersArgs{...}
//
//	or:
//
//	        nil
type PipeEnrichmentParametersPtrInput interface {
	pulumi.Input

	ToPipeEnrichmentParametersPtrOutput() PipeEnrichmentParametersPtrOutput
	ToPipeEnrichmentParametersPtrOutputWithContext(context.Context) PipeEnrichmentParametersPtrOutput
}

type pipeEnrichmentParametersPtrType PipeEnrichmentParametersArgs

func PipeEnrichmentParametersPtr(v *PipeEnrichmentParametersArgs) PipeEnrichmentParametersPtrInput {
	return (*pipeEnrichmentParametersPtrType)(v)
}

func (*pipeEnrichmentParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeEnrichmentParameters)(nil)).Elem()
}

func (i *pipeEnrichmentParametersPtrType) ToPipeEnrichmentParametersPtrOutput() PipeEnrichmentParametersPtrOutput {
	return i.ToPipeEnrichmentParametersPtrOutputWithContext(context.Background())
}

func (i *pipeEnrichmentParametersPtrType) ToPipeEnrichmentParametersPtrOutputWithContext(ctx context.Context) PipeEnrichmentParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeEnrichmentParametersPtrOutput)
}

func (i *pipeEnrichmentParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*PipeEnrichmentParameters] {
	return pulumix.Output[*PipeEnrichmentParameters]{
		OutputState: i.ToPipeEnrichmentParametersPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeEnrichmentParametersOutput struct{ *pulumi.OutputState }

func (PipeEnrichmentParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeEnrichmentParameters)(nil)).Elem()
}

func (o PipeEnrichmentParametersOutput) ToPipeEnrichmentParametersOutput() PipeEnrichmentParametersOutput {
	return o
}

func (o PipeEnrichmentParametersOutput) ToPipeEnrichmentParametersOutputWithContext(ctx context.Context) PipeEnrichmentParametersOutput {
	return o
}

func (o PipeEnrichmentParametersOutput) ToPipeEnrichmentParametersPtrOutput() PipeEnrichmentParametersPtrOutput {
	return o.ToPipeEnrichmentParametersPtrOutputWithContext(context.Background())
}

func (o PipeEnrichmentParametersOutput) ToPipeEnrichmentParametersPtrOutputWithContext(ctx context.Context) PipeEnrichmentParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeEnrichmentParameters) *PipeEnrichmentParameters {
		return &v
	}).(PipeEnrichmentParametersPtrOutput)
}

func (o PipeEnrichmentParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeEnrichmentParameters] {
	return pulumix.Output[PipeEnrichmentParameters]{
		OutputState: o.OutputState,
	}
}

// Contains the HTTP parameters to use when the target is a API Gateway REST endpoint or EventBridge ApiDestination. If you specify an API Gateway REST API or EventBridge ApiDestination as a target, you can use this parameter to specify headers, path parameters, and query string keys/values as part of your target invoking request. If you're using ApiDestinations, the corresponding Connection can also have these values configured. In case of any conflicting keys, values from the Connection take precedence. Detailed below.
func (o PipeEnrichmentParametersOutput) HttpParameters() PipeEnrichmentParametersHttpParametersPtrOutput {
	return o.ApplyT(func(v PipeEnrichmentParameters) *PipeEnrichmentParametersHttpParameters { return v.HttpParameters }).(PipeEnrichmentParametersHttpParametersPtrOutput)
}

// Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. Maximum length of 8192 characters.
func (o PipeEnrichmentParametersOutput) InputTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeEnrichmentParameters) *string { return v.InputTemplate }).(pulumi.StringPtrOutput)
}

type PipeEnrichmentParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeEnrichmentParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeEnrichmentParameters)(nil)).Elem()
}

func (o PipeEnrichmentParametersPtrOutput) ToPipeEnrichmentParametersPtrOutput() PipeEnrichmentParametersPtrOutput {
	return o
}

func (o PipeEnrichmentParametersPtrOutput) ToPipeEnrichmentParametersPtrOutputWithContext(ctx context.Context) PipeEnrichmentParametersPtrOutput {
	return o
}

func (o PipeEnrichmentParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeEnrichmentParameters] {
	return pulumix.Output[*PipeEnrichmentParameters]{
		OutputState: o.OutputState,
	}
}

func (o PipeEnrichmentParametersPtrOutput) Elem() PipeEnrichmentParametersOutput {
	return o.ApplyT(func(v *PipeEnrichmentParameters) PipeEnrichmentParameters {
		if v != nil {
			return *v
		}
		var ret PipeEnrichmentParameters
		return ret
	}).(PipeEnrichmentParametersOutput)
}

// Contains the HTTP parameters to use when the target is a API Gateway REST endpoint or EventBridge ApiDestination. If you specify an API Gateway REST API or EventBridge ApiDestination as a target, you can use this parameter to specify headers, path parameters, and query string keys/values as part of your target invoking request. If you're using ApiDestinations, the corresponding Connection can also have these values configured. In case of any conflicting keys, values from the Connection take precedence. Detailed below.
func (o PipeEnrichmentParametersPtrOutput) HttpParameters() PipeEnrichmentParametersHttpParametersPtrOutput {
	return o.ApplyT(func(v *PipeEnrichmentParameters) *PipeEnrichmentParametersHttpParameters {
		if v == nil {
			return nil
		}
		return v.HttpParameters
	}).(PipeEnrichmentParametersHttpParametersPtrOutput)
}

// Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. Maximum length of 8192 characters.
func (o PipeEnrichmentParametersPtrOutput) InputTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeEnrichmentParameters) *string {
		if v == nil {
			return nil
		}
		return v.InputTemplate
	}).(pulumi.StringPtrOutput)
}

type PipeEnrichmentParametersHttpParameters struct {
	// Key-value mapping of the headers that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
	HeaderParameters map[string]string `pulumi:"headerParameters"`
	// The path parameter values to be used to populate API Gateway REST API or EventBridge ApiDestination path wildcards ("*").
	PathParameterValues *string `pulumi:"pathParameterValues"`
	// Key-value mapping of the query strings that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
	QueryStringParameters map[string]string `pulumi:"queryStringParameters"`
}

// PipeEnrichmentParametersHttpParametersInput is an input type that accepts PipeEnrichmentParametersHttpParametersArgs and PipeEnrichmentParametersHttpParametersOutput values.
// You can construct a concrete instance of `PipeEnrichmentParametersHttpParametersInput` via:
//
//	PipeEnrichmentParametersHttpParametersArgs{...}
type PipeEnrichmentParametersHttpParametersInput interface {
	pulumi.Input

	ToPipeEnrichmentParametersHttpParametersOutput() PipeEnrichmentParametersHttpParametersOutput
	ToPipeEnrichmentParametersHttpParametersOutputWithContext(context.Context) PipeEnrichmentParametersHttpParametersOutput
}

type PipeEnrichmentParametersHttpParametersArgs struct {
	// Key-value mapping of the headers that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
	HeaderParameters pulumi.StringMapInput `pulumi:"headerParameters"`
	// The path parameter values to be used to populate API Gateway REST API or EventBridge ApiDestination path wildcards ("*").
	PathParameterValues pulumi.StringPtrInput `pulumi:"pathParameterValues"`
	// Key-value mapping of the query strings that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
	QueryStringParameters pulumi.StringMapInput `pulumi:"queryStringParameters"`
}

func (PipeEnrichmentParametersHttpParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeEnrichmentParametersHttpParameters)(nil)).Elem()
}

func (i PipeEnrichmentParametersHttpParametersArgs) ToPipeEnrichmentParametersHttpParametersOutput() PipeEnrichmentParametersHttpParametersOutput {
	return i.ToPipeEnrichmentParametersHttpParametersOutputWithContext(context.Background())
}

func (i PipeEnrichmentParametersHttpParametersArgs) ToPipeEnrichmentParametersHttpParametersOutputWithContext(ctx context.Context) PipeEnrichmentParametersHttpParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeEnrichmentParametersHttpParametersOutput)
}

func (i PipeEnrichmentParametersHttpParametersArgs) ToOutput(ctx context.Context) pulumix.Output[PipeEnrichmentParametersHttpParameters] {
	return pulumix.Output[PipeEnrichmentParametersHttpParameters]{
		OutputState: i.ToPipeEnrichmentParametersHttpParametersOutputWithContext(ctx).OutputState,
	}
}

func (i PipeEnrichmentParametersHttpParametersArgs) ToPipeEnrichmentParametersHttpParametersPtrOutput() PipeEnrichmentParametersHttpParametersPtrOutput {
	return i.ToPipeEnrichmentParametersHttpParametersPtrOutputWithContext(context.Background())
}

func (i PipeEnrichmentParametersHttpParametersArgs) ToPipeEnrichmentParametersHttpParametersPtrOutputWithContext(ctx context.Context) PipeEnrichmentParametersHttpParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeEnrichmentParametersHttpParametersOutput).ToPipeEnrichmentParametersHttpParametersPtrOutputWithContext(ctx)
}

// PipeEnrichmentParametersHttpParametersPtrInput is an input type that accepts PipeEnrichmentParametersHttpParametersArgs, PipeEnrichmentParametersHttpParametersPtr and PipeEnrichmentParametersHttpParametersPtrOutput values.
// You can construct a concrete instance of `PipeEnrichmentParametersHttpParametersPtrInput` via:
//
//	        PipeEnrichmentParametersHttpParametersArgs{...}
//
//	or:
//
//	        nil
type PipeEnrichmentParametersHttpParametersPtrInput interface {
	pulumi.Input

	ToPipeEnrichmentParametersHttpParametersPtrOutput() PipeEnrichmentParametersHttpParametersPtrOutput
	ToPipeEnrichmentParametersHttpParametersPtrOutputWithContext(context.Context) PipeEnrichmentParametersHttpParametersPtrOutput
}

type pipeEnrichmentParametersHttpParametersPtrType PipeEnrichmentParametersHttpParametersArgs

func PipeEnrichmentParametersHttpParametersPtr(v *PipeEnrichmentParametersHttpParametersArgs) PipeEnrichmentParametersHttpParametersPtrInput {
	return (*pipeEnrichmentParametersHttpParametersPtrType)(v)
}

func (*pipeEnrichmentParametersHttpParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeEnrichmentParametersHttpParameters)(nil)).Elem()
}

func (i *pipeEnrichmentParametersHttpParametersPtrType) ToPipeEnrichmentParametersHttpParametersPtrOutput() PipeEnrichmentParametersHttpParametersPtrOutput {
	return i.ToPipeEnrichmentParametersHttpParametersPtrOutputWithContext(context.Background())
}

func (i *pipeEnrichmentParametersHttpParametersPtrType) ToPipeEnrichmentParametersHttpParametersPtrOutputWithContext(ctx context.Context) PipeEnrichmentParametersHttpParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeEnrichmentParametersHttpParametersPtrOutput)
}

func (i *pipeEnrichmentParametersHttpParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*PipeEnrichmentParametersHttpParameters] {
	return pulumix.Output[*PipeEnrichmentParametersHttpParameters]{
		OutputState: i.ToPipeEnrichmentParametersHttpParametersPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeEnrichmentParametersHttpParametersOutput struct{ *pulumi.OutputState }

func (PipeEnrichmentParametersHttpParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeEnrichmentParametersHttpParameters)(nil)).Elem()
}

func (o PipeEnrichmentParametersHttpParametersOutput) ToPipeEnrichmentParametersHttpParametersOutput() PipeEnrichmentParametersHttpParametersOutput {
	return o
}

func (o PipeEnrichmentParametersHttpParametersOutput) ToPipeEnrichmentParametersHttpParametersOutputWithContext(ctx context.Context) PipeEnrichmentParametersHttpParametersOutput {
	return o
}

func (o PipeEnrichmentParametersHttpParametersOutput) ToPipeEnrichmentParametersHttpParametersPtrOutput() PipeEnrichmentParametersHttpParametersPtrOutput {
	return o.ToPipeEnrichmentParametersHttpParametersPtrOutputWithContext(context.Background())
}

func (o PipeEnrichmentParametersHttpParametersOutput) ToPipeEnrichmentParametersHttpParametersPtrOutputWithContext(ctx context.Context) PipeEnrichmentParametersHttpParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeEnrichmentParametersHttpParameters) *PipeEnrichmentParametersHttpParameters {
		return &v
	}).(PipeEnrichmentParametersHttpParametersPtrOutput)
}

func (o PipeEnrichmentParametersHttpParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeEnrichmentParametersHttpParameters] {
	return pulumix.Output[PipeEnrichmentParametersHttpParameters]{
		OutputState: o.OutputState,
	}
}

// Key-value mapping of the headers that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
func (o PipeEnrichmentParametersHttpParametersOutput) HeaderParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v PipeEnrichmentParametersHttpParameters) map[string]string { return v.HeaderParameters }).(pulumi.StringMapOutput)
}

// The path parameter values to be used to populate API Gateway REST API or EventBridge ApiDestination path wildcards ("*").
func (o PipeEnrichmentParametersHttpParametersOutput) PathParameterValues() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeEnrichmentParametersHttpParameters) *string { return v.PathParameterValues }).(pulumi.StringPtrOutput)
}

// Key-value mapping of the query strings that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
func (o PipeEnrichmentParametersHttpParametersOutput) QueryStringParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v PipeEnrichmentParametersHttpParameters) map[string]string { return v.QueryStringParameters }).(pulumi.StringMapOutput)
}

type PipeEnrichmentParametersHttpParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeEnrichmentParametersHttpParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeEnrichmentParametersHttpParameters)(nil)).Elem()
}

func (o PipeEnrichmentParametersHttpParametersPtrOutput) ToPipeEnrichmentParametersHttpParametersPtrOutput() PipeEnrichmentParametersHttpParametersPtrOutput {
	return o
}

func (o PipeEnrichmentParametersHttpParametersPtrOutput) ToPipeEnrichmentParametersHttpParametersPtrOutputWithContext(ctx context.Context) PipeEnrichmentParametersHttpParametersPtrOutput {
	return o
}

func (o PipeEnrichmentParametersHttpParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeEnrichmentParametersHttpParameters] {
	return pulumix.Output[*PipeEnrichmentParametersHttpParameters]{
		OutputState: o.OutputState,
	}
}

func (o PipeEnrichmentParametersHttpParametersPtrOutput) Elem() PipeEnrichmentParametersHttpParametersOutput {
	return o.ApplyT(func(v *PipeEnrichmentParametersHttpParameters) PipeEnrichmentParametersHttpParameters {
		if v != nil {
			return *v
		}
		var ret PipeEnrichmentParametersHttpParameters
		return ret
	}).(PipeEnrichmentParametersHttpParametersOutput)
}

// Key-value mapping of the headers that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
func (o PipeEnrichmentParametersHttpParametersPtrOutput) HeaderParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PipeEnrichmentParametersHttpParameters) map[string]string {
		if v == nil {
			return nil
		}
		return v.HeaderParameters
	}).(pulumi.StringMapOutput)
}

// The path parameter values to be used to populate API Gateway REST API or EventBridge ApiDestination path wildcards ("*").
func (o PipeEnrichmentParametersHttpParametersPtrOutput) PathParameterValues() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeEnrichmentParametersHttpParameters) *string {
		if v == nil {
			return nil
		}
		return v.PathParameterValues
	}).(pulumi.StringPtrOutput)
}

// Key-value mapping of the query strings that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
func (o PipeEnrichmentParametersHttpParametersPtrOutput) QueryStringParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PipeEnrichmentParametersHttpParameters) map[string]string {
		if v == nil {
			return nil
		}
		return v.QueryStringParameters
	}).(pulumi.StringMapOutput)
}

type PipeSourceParameters struct {
	// The parameters for using an Active MQ broker as a source. Detailed below.
	ActivemqBrokerParameters *PipeSourceParametersActivemqBrokerParameters `pulumi:"activemqBrokerParameters"`
	// The parameters for using a DynamoDB stream as a source.  Detailed below.
	DynamodbStreamParameters *PipeSourceParametersDynamodbStreamParameters `pulumi:"dynamodbStreamParameters"`
	// The collection of event patterns used to [filter events](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes-event-filtering.html). Detailed below.
	FilterCriteria *PipeSourceParametersFilterCriteria `pulumi:"filterCriteria"`
	// The parameters for using a Kinesis stream as a source. Detailed below.
	KinesisStreamParameters *PipeSourceParametersKinesisStreamParameters `pulumi:"kinesisStreamParameters"`
	// The parameters for using an MSK stream as a source. Detailed below.
	ManagedStreamingKafkaParameters *PipeSourceParametersManagedStreamingKafkaParameters `pulumi:"managedStreamingKafkaParameters"`
	// The parameters for using a Rabbit MQ broker as a source. Detailed below.
	RabbitmqBrokerParameters *PipeSourceParametersRabbitmqBrokerParameters `pulumi:"rabbitmqBrokerParameters"`
	// The parameters for using a self-managed Apache Kafka stream as a source. Detailed below.
	SelfManagedKafkaParameters *PipeSourceParametersSelfManagedKafkaParameters `pulumi:"selfManagedKafkaParameters"`
	// The parameters for using a Amazon SQS stream as a source. Detailed below.
	SqsQueueParameters *PipeSourceParametersSqsQueueParameters `pulumi:"sqsQueueParameters"`
}

// PipeSourceParametersInput is an input type that accepts PipeSourceParametersArgs and PipeSourceParametersOutput values.
// You can construct a concrete instance of `PipeSourceParametersInput` via:
//
//	PipeSourceParametersArgs{...}
type PipeSourceParametersInput interface {
	pulumi.Input

	ToPipeSourceParametersOutput() PipeSourceParametersOutput
	ToPipeSourceParametersOutputWithContext(context.Context) PipeSourceParametersOutput
}

type PipeSourceParametersArgs struct {
	// The parameters for using an Active MQ broker as a source. Detailed below.
	ActivemqBrokerParameters PipeSourceParametersActivemqBrokerParametersPtrInput `pulumi:"activemqBrokerParameters"`
	// The parameters for using a DynamoDB stream as a source.  Detailed below.
	DynamodbStreamParameters PipeSourceParametersDynamodbStreamParametersPtrInput `pulumi:"dynamodbStreamParameters"`
	// The collection of event patterns used to [filter events](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes-event-filtering.html). Detailed below.
	FilterCriteria PipeSourceParametersFilterCriteriaPtrInput `pulumi:"filterCriteria"`
	// The parameters for using a Kinesis stream as a source. Detailed below.
	KinesisStreamParameters PipeSourceParametersKinesisStreamParametersPtrInput `pulumi:"kinesisStreamParameters"`
	// The parameters for using an MSK stream as a source. Detailed below.
	ManagedStreamingKafkaParameters PipeSourceParametersManagedStreamingKafkaParametersPtrInput `pulumi:"managedStreamingKafkaParameters"`
	// The parameters for using a Rabbit MQ broker as a source. Detailed below.
	RabbitmqBrokerParameters PipeSourceParametersRabbitmqBrokerParametersPtrInput `pulumi:"rabbitmqBrokerParameters"`
	// The parameters for using a self-managed Apache Kafka stream as a source. Detailed below.
	SelfManagedKafkaParameters PipeSourceParametersSelfManagedKafkaParametersPtrInput `pulumi:"selfManagedKafkaParameters"`
	// The parameters for using a Amazon SQS stream as a source. Detailed below.
	SqsQueueParameters PipeSourceParametersSqsQueueParametersPtrInput `pulumi:"sqsQueueParameters"`
}

func (PipeSourceParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParameters)(nil)).Elem()
}

func (i PipeSourceParametersArgs) ToPipeSourceParametersOutput() PipeSourceParametersOutput {
	return i.ToPipeSourceParametersOutputWithContext(context.Background())
}

func (i PipeSourceParametersArgs) ToPipeSourceParametersOutputWithContext(ctx context.Context) PipeSourceParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersOutput)
}

func (i PipeSourceParametersArgs) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParameters] {
	return pulumix.Output[PipeSourceParameters]{
		OutputState: i.ToPipeSourceParametersOutputWithContext(ctx).OutputState,
	}
}

func (i PipeSourceParametersArgs) ToPipeSourceParametersPtrOutput() PipeSourceParametersPtrOutput {
	return i.ToPipeSourceParametersPtrOutputWithContext(context.Background())
}

func (i PipeSourceParametersArgs) ToPipeSourceParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersOutput).ToPipeSourceParametersPtrOutputWithContext(ctx)
}

// PipeSourceParametersPtrInput is an input type that accepts PipeSourceParametersArgs, PipeSourceParametersPtr and PipeSourceParametersPtrOutput values.
// You can construct a concrete instance of `PipeSourceParametersPtrInput` via:
//
//	        PipeSourceParametersArgs{...}
//
//	or:
//
//	        nil
type PipeSourceParametersPtrInput interface {
	pulumi.Input

	ToPipeSourceParametersPtrOutput() PipeSourceParametersPtrOutput
	ToPipeSourceParametersPtrOutputWithContext(context.Context) PipeSourceParametersPtrOutput
}

type pipeSourceParametersPtrType PipeSourceParametersArgs

func PipeSourceParametersPtr(v *PipeSourceParametersArgs) PipeSourceParametersPtrInput {
	return (*pipeSourceParametersPtrType)(v)
}

func (*pipeSourceParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParameters)(nil)).Elem()
}

func (i *pipeSourceParametersPtrType) ToPipeSourceParametersPtrOutput() PipeSourceParametersPtrOutput {
	return i.ToPipeSourceParametersPtrOutputWithContext(context.Background())
}

func (i *pipeSourceParametersPtrType) ToPipeSourceParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersPtrOutput)
}

func (i *pipeSourceParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParameters] {
	return pulumix.Output[*PipeSourceParameters]{
		OutputState: i.ToPipeSourceParametersPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeSourceParametersOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParameters)(nil)).Elem()
}

func (o PipeSourceParametersOutput) ToPipeSourceParametersOutput() PipeSourceParametersOutput {
	return o
}

func (o PipeSourceParametersOutput) ToPipeSourceParametersOutputWithContext(ctx context.Context) PipeSourceParametersOutput {
	return o
}

func (o PipeSourceParametersOutput) ToPipeSourceParametersPtrOutput() PipeSourceParametersPtrOutput {
	return o.ToPipeSourceParametersPtrOutputWithContext(context.Background())
}

func (o PipeSourceParametersOutput) ToPipeSourceParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeSourceParameters) *PipeSourceParameters {
		return &v
	}).(PipeSourceParametersPtrOutput)
}

func (o PipeSourceParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParameters] {
	return pulumix.Output[PipeSourceParameters]{
		OutputState: o.OutputState,
	}
}

// The parameters for using an Active MQ broker as a source. Detailed below.
func (o PipeSourceParametersOutput) ActivemqBrokerParameters() PipeSourceParametersActivemqBrokerParametersPtrOutput {
	return o.ApplyT(func(v PipeSourceParameters) *PipeSourceParametersActivemqBrokerParameters {
		return v.ActivemqBrokerParameters
	}).(PipeSourceParametersActivemqBrokerParametersPtrOutput)
}

// The parameters for using a DynamoDB stream as a source.  Detailed below.
func (o PipeSourceParametersOutput) DynamodbStreamParameters() PipeSourceParametersDynamodbStreamParametersPtrOutput {
	return o.ApplyT(func(v PipeSourceParameters) *PipeSourceParametersDynamodbStreamParameters {
		return v.DynamodbStreamParameters
	}).(PipeSourceParametersDynamodbStreamParametersPtrOutput)
}

// The collection of event patterns used to [filter events](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes-event-filtering.html). Detailed below.
func (o PipeSourceParametersOutput) FilterCriteria() PipeSourceParametersFilterCriteriaPtrOutput {
	return o.ApplyT(func(v PipeSourceParameters) *PipeSourceParametersFilterCriteria { return v.FilterCriteria }).(PipeSourceParametersFilterCriteriaPtrOutput)
}

// The parameters for using a Kinesis stream as a source. Detailed below.
func (o PipeSourceParametersOutput) KinesisStreamParameters() PipeSourceParametersKinesisStreamParametersPtrOutput {
	return o.ApplyT(func(v PipeSourceParameters) *PipeSourceParametersKinesisStreamParameters {
		return v.KinesisStreamParameters
	}).(PipeSourceParametersKinesisStreamParametersPtrOutput)
}

// The parameters for using an MSK stream as a source. Detailed below.
func (o PipeSourceParametersOutput) ManagedStreamingKafkaParameters() PipeSourceParametersManagedStreamingKafkaParametersPtrOutput {
	return o.ApplyT(func(v PipeSourceParameters) *PipeSourceParametersManagedStreamingKafkaParameters {
		return v.ManagedStreamingKafkaParameters
	}).(PipeSourceParametersManagedStreamingKafkaParametersPtrOutput)
}

// The parameters for using a Rabbit MQ broker as a source. Detailed below.
func (o PipeSourceParametersOutput) RabbitmqBrokerParameters() PipeSourceParametersRabbitmqBrokerParametersPtrOutput {
	return o.ApplyT(func(v PipeSourceParameters) *PipeSourceParametersRabbitmqBrokerParameters {
		return v.RabbitmqBrokerParameters
	}).(PipeSourceParametersRabbitmqBrokerParametersPtrOutput)
}

// The parameters for using a self-managed Apache Kafka stream as a source. Detailed below.
func (o PipeSourceParametersOutput) SelfManagedKafkaParameters() PipeSourceParametersSelfManagedKafkaParametersPtrOutput {
	return o.ApplyT(func(v PipeSourceParameters) *PipeSourceParametersSelfManagedKafkaParameters {
		return v.SelfManagedKafkaParameters
	}).(PipeSourceParametersSelfManagedKafkaParametersPtrOutput)
}

// The parameters for using a Amazon SQS stream as a source. Detailed below.
func (o PipeSourceParametersOutput) SqsQueueParameters() PipeSourceParametersSqsQueueParametersPtrOutput {
	return o.ApplyT(func(v PipeSourceParameters) *PipeSourceParametersSqsQueueParameters { return v.SqsQueueParameters }).(PipeSourceParametersSqsQueueParametersPtrOutput)
}

type PipeSourceParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParameters)(nil)).Elem()
}

func (o PipeSourceParametersPtrOutput) ToPipeSourceParametersPtrOutput() PipeSourceParametersPtrOutput {
	return o
}

func (o PipeSourceParametersPtrOutput) ToPipeSourceParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersPtrOutput {
	return o
}

func (o PipeSourceParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParameters] {
	return pulumix.Output[*PipeSourceParameters]{
		OutputState: o.OutputState,
	}
}

func (o PipeSourceParametersPtrOutput) Elem() PipeSourceParametersOutput {
	return o.ApplyT(func(v *PipeSourceParameters) PipeSourceParameters {
		if v != nil {
			return *v
		}
		var ret PipeSourceParameters
		return ret
	}).(PipeSourceParametersOutput)
}

// The parameters for using an Active MQ broker as a source. Detailed below.
func (o PipeSourceParametersPtrOutput) ActivemqBrokerParameters() PipeSourceParametersActivemqBrokerParametersPtrOutput {
	return o.ApplyT(func(v *PipeSourceParameters) *PipeSourceParametersActivemqBrokerParameters {
		if v == nil {
			return nil
		}
		return v.ActivemqBrokerParameters
	}).(PipeSourceParametersActivemqBrokerParametersPtrOutput)
}

// The parameters for using a DynamoDB stream as a source.  Detailed below.
func (o PipeSourceParametersPtrOutput) DynamodbStreamParameters() PipeSourceParametersDynamodbStreamParametersPtrOutput {
	return o.ApplyT(func(v *PipeSourceParameters) *PipeSourceParametersDynamodbStreamParameters {
		if v == nil {
			return nil
		}
		return v.DynamodbStreamParameters
	}).(PipeSourceParametersDynamodbStreamParametersPtrOutput)
}

// The collection of event patterns used to [filter events](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes-event-filtering.html). Detailed below.
func (o PipeSourceParametersPtrOutput) FilterCriteria() PipeSourceParametersFilterCriteriaPtrOutput {
	return o.ApplyT(func(v *PipeSourceParameters) *PipeSourceParametersFilterCriteria {
		if v == nil {
			return nil
		}
		return v.FilterCriteria
	}).(PipeSourceParametersFilterCriteriaPtrOutput)
}

// The parameters for using a Kinesis stream as a source. Detailed below.
func (o PipeSourceParametersPtrOutput) KinesisStreamParameters() PipeSourceParametersKinesisStreamParametersPtrOutput {
	return o.ApplyT(func(v *PipeSourceParameters) *PipeSourceParametersKinesisStreamParameters {
		if v == nil {
			return nil
		}
		return v.KinesisStreamParameters
	}).(PipeSourceParametersKinesisStreamParametersPtrOutput)
}

// The parameters for using an MSK stream as a source. Detailed below.
func (o PipeSourceParametersPtrOutput) ManagedStreamingKafkaParameters() PipeSourceParametersManagedStreamingKafkaParametersPtrOutput {
	return o.ApplyT(func(v *PipeSourceParameters) *PipeSourceParametersManagedStreamingKafkaParameters {
		if v == nil {
			return nil
		}
		return v.ManagedStreamingKafkaParameters
	}).(PipeSourceParametersManagedStreamingKafkaParametersPtrOutput)
}

// The parameters for using a Rabbit MQ broker as a source. Detailed below.
func (o PipeSourceParametersPtrOutput) RabbitmqBrokerParameters() PipeSourceParametersRabbitmqBrokerParametersPtrOutput {
	return o.ApplyT(func(v *PipeSourceParameters) *PipeSourceParametersRabbitmqBrokerParameters {
		if v == nil {
			return nil
		}
		return v.RabbitmqBrokerParameters
	}).(PipeSourceParametersRabbitmqBrokerParametersPtrOutput)
}

// The parameters for using a self-managed Apache Kafka stream as a source. Detailed below.
func (o PipeSourceParametersPtrOutput) SelfManagedKafkaParameters() PipeSourceParametersSelfManagedKafkaParametersPtrOutput {
	return o.ApplyT(func(v *PipeSourceParameters) *PipeSourceParametersSelfManagedKafkaParameters {
		if v == nil {
			return nil
		}
		return v.SelfManagedKafkaParameters
	}).(PipeSourceParametersSelfManagedKafkaParametersPtrOutput)
}

// The parameters for using a Amazon SQS stream as a source. Detailed below.
func (o PipeSourceParametersPtrOutput) SqsQueueParameters() PipeSourceParametersSqsQueueParametersPtrOutput {
	return o.ApplyT(func(v *PipeSourceParameters) *PipeSourceParametersSqsQueueParameters {
		if v == nil {
			return nil
		}
		return v.SqsQueueParameters
	}).(PipeSourceParametersSqsQueueParametersPtrOutput)
}

type PipeSourceParametersActivemqBrokerParameters struct {
	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize *int `pulumi:"batchSize"`
	// The credentials needed to access the resource. Detailed below.
	Credentials PipeSourceParametersActivemqBrokerParametersCredentials `pulumi:"credentials"`
	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds *int `pulumi:"maximumBatchingWindowInSeconds"`
	// The name of the destination queue to consume. Maximum length of 1000.
	QueueName string `pulumi:"queueName"`
}

// PipeSourceParametersActivemqBrokerParametersInput is an input type that accepts PipeSourceParametersActivemqBrokerParametersArgs and PipeSourceParametersActivemqBrokerParametersOutput values.
// You can construct a concrete instance of `PipeSourceParametersActivemqBrokerParametersInput` via:
//
//	PipeSourceParametersActivemqBrokerParametersArgs{...}
type PipeSourceParametersActivemqBrokerParametersInput interface {
	pulumi.Input

	ToPipeSourceParametersActivemqBrokerParametersOutput() PipeSourceParametersActivemqBrokerParametersOutput
	ToPipeSourceParametersActivemqBrokerParametersOutputWithContext(context.Context) PipeSourceParametersActivemqBrokerParametersOutput
}

type PipeSourceParametersActivemqBrokerParametersArgs struct {
	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize pulumi.IntPtrInput `pulumi:"batchSize"`
	// The credentials needed to access the resource. Detailed below.
	Credentials PipeSourceParametersActivemqBrokerParametersCredentialsInput `pulumi:"credentials"`
	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds pulumi.IntPtrInput `pulumi:"maximumBatchingWindowInSeconds"`
	// The name of the destination queue to consume. Maximum length of 1000.
	QueueName pulumi.StringInput `pulumi:"queueName"`
}

func (PipeSourceParametersActivemqBrokerParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersActivemqBrokerParameters)(nil)).Elem()
}

func (i PipeSourceParametersActivemqBrokerParametersArgs) ToPipeSourceParametersActivemqBrokerParametersOutput() PipeSourceParametersActivemqBrokerParametersOutput {
	return i.ToPipeSourceParametersActivemqBrokerParametersOutputWithContext(context.Background())
}

func (i PipeSourceParametersActivemqBrokerParametersArgs) ToPipeSourceParametersActivemqBrokerParametersOutputWithContext(ctx context.Context) PipeSourceParametersActivemqBrokerParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersActivemqBrokerParametersOutput)
}

func (i PipeSourceParametersActivemqBrokerParametersArgs) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersActivemqBrokerParameters] {
	return pulumix.Output[PipeSourceParametersActivemqBrokerParameters]{
		OutputState: i.ToPipeSourceParametersActivemqBrokerParametersOutputWithContext(ctx).OutputState,
	}
}

func (i PipeSourceParametersActivemqBrokerParametersArgs) ToPipeSourceParametersActivemqBrokerParametersPtrOutput() PipeSourceParametersActivemqBrokerParametersPtrOutput {
	return i.ToPipeSourceParametersActivemqBrokerParametersPtrOutputWithContext(context.Background())
}

func (i PipeSourceParametersActivemqBrokerParametersArgs) ToPipeSourceParametersActivemqBrokerParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersActivemqBrokerParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersActivemqBrokerParametersOutput).ToPipeSourceParametersActivemqBrokerParametersPtrOutputWithContext(ctx)
}

// PipeSourceParametersActivemqBrokerParametersPtrInput is an input type that accepts PipeSourceParametersActivemqBrokerParametersArgs, PipeSourceParametersActivemqBrokerParametersPtr and PipeSourceParametersActivemqBrokerParametersPtrOutput values.
// You can construct a concrete instance of `PipeSourceParametersActivemqBrokerParametersPtrInput` via:
//
//	        PipeSourceParametersActivemqBrokerParametersArgs{...}
//
//	or:
//
//	        nil
type PipeSourceParametersActivemqBrokerParametersPtrInput interface {
	pulumi.Input

	ToPipeSourceParametersActivemqBrokerParametersPtrOutput() PipeSourceParametersActivemqBrokerParametersPtrOutput
	ToPipeSourceParametersActivemqBrokerParametersPtrOutputWithContext(context.Context) PipeSourceParametersActivemqBrokerParametersPtrOutput
}

type pipeSourceParametersActivemqBrokerParametersPtrType PipeSourceParametersActivemqBrokerParametersArgs

func PipeSourceParametersActivemqBrokerParametersPtr(v *PipeSourceParametersActivemqBrokerParametersArgs) PipeSourceParametersActivemqBrokerParametersPtrInput {
	return (*pipeSourceParametersActivemqBrokerParametersPtrType)(v)
}

func (*pipeSourceParametersActivemqBrokerParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParametersActivemqBrokerParameters)(nil)).Elem()
}

func (i *pipeSourceParametersActivemqBrokerParametersPtrType) ToPipeSourceParametersActivemqBrokerParametersPtrOutput() PipeSourceParametersActivemqBrokerParametersPtrOutput {
	return i.ToPipeSourceParametersActivemqBrokerParametersPtrOutputWithContext(context.Background())
}

func (i *pipeSourceParametersActivemqBrokerParametersPtrType) ToPipeSourceParametersActivemqBrokerParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersActivemqBrokerParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersActivemqBrokerParametersPtrOutput)
}

func (i *pipeSourceParametersActivemqBrokerParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersActivemqBrokerParameters] {
	return pulumix.Output[*PipeSourceParametersActivemqBrokerParameters]{
		OutputState: i.ToPipeSourceParametersActivemqBrokerParametersPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeSourceParametersActivemqBrokerParametersOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersActivemqBrokerParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersActivemqBrokerParameters)(nil)).Elem()
}

func (o PipeSourceParametersActivemqBrokerParametersOutput) ToPipeSourceParametersActivemqBrokerParametersOutput() PipeSourceParametersActivemqBrokerParametersOutput {
	return o
}

func (o PipeSourceParametersActivemqBrokerParametersOutput) ToPipeSourceParametersActivemqBrokerParametersOutputWithContext(ctx context.Context) PipeSourceParametersActivemqBrokerParametersOutput {
	return o
}

func (o PipeSourceParametersActivemqBrokerParametersOutput) ToPipeSourceParametersActivemqBrokerParametersPtrOutput() PipeSourceParametersActivemqBrokerParametersPtrOutput {
	return o.ToPipeSourceParametersActivemqBrokerParametersPtrOutputWithContext(context.Background())
}

func (o PipeSourceParametersActivemqBrokerParametersOutput) ToPipeSourceParametersActivemqBrokerParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersActivemqBrokerParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeSourceParametersActivemqBrokerParameters) *PipeSourceParametersActivemqBrokerParameters {
		return &v
	}).(PipeSourceParametersActivemqBrokerParametersPtrOutput)
}

func (o PipeSourceParametersActivemqBrokerParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersActivemqBrokerParameters] {
	return pulumix.Output[PipeSourceParametersActivemqBrokerParameters]{
		OutputState: o.OutputState,
	}
}

// The maximum number of records to include in each batch. Maximum value of 10000.
func (o PipeSourceParametersActivemqBrokerParametersOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersActivemqBrokerParameters) *int { return v.BatchSize }).(pulumi.IntPtrOutput)
}

// The credentials needed to access the resource. Detailed below.
func (o PipeSourceParametersActivemqBrokerParametersOutput) Credentials() PipeSourceParametersActivemqBrokerParametersCredentialsOutput {
	return o.ApplyT(func(v PipeSourceParametersActivemqBrokerParameters) PipeSourceParametersActivemqBrokerParametersCredentials {
		return v.Credentials
	}).(PipeSourceParametersActivemqBrokerParametersCredentialsOutput)
}

// The maximum length of a time to wait for events. Maximum value of 300.
func (o PipeSourceParametersActivemqBrokerParametersOutput) MaximumBatchingWindowInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersActivemqBrokerParameters) *int { return v.MaximumBatchingWindowInSeconds }).(pulumi.IntPtrOutput)
}

// The name of the destination queue to consume. Maximum length of 1000.
func (o PipeSourceParametersActivemqBrokerParametersOutput) QueueName() pulumi.StringOutput {
	return o.ApplyT(func(v PipeSourceParametersActivemqBrokerParameters) string { return v.QueueName }).(pulumi.StringOutput)
}

type PipeSourceParametersActivemqBrokerParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersActivemqBrokerParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParametersActivemqBrokerParameters)(nil)).Elem()
}

func (o PipeSourceParametersActivemqBrokerParametersPtrOutput) ToPipeSourceParametersActivemqBrokerParametersPtrOutput() PipeSourceParametersActivemqBrokerParametersPtrOutput {
	return o
}

func (o PipeSourceParametersActivemqBrokerParametersPtrOutput) ToPipeSourceParametersActivemqBrokerParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersActivemqBrokerParametersPtrOutput {
	return o
}

func (o PipeSourceParametersActivemqBrokerParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersActivemqBrokerParameters] {
	return pulumix.Output[*PipeSourceParametersActivemqBrokerParameters]{
		OutputState: o.OutputState,
	}
}

func (o PipeSourceParametersActivemqBrokerParametersPtrOutput) Elem() PipeSourceParametersActivemqBrokerParametersOutput {
	return o.ApplyT(func(v *PipeSourceParametersActivemqBrokerParameters) PipeSourceParametersActivemqBrokerParameters {
		if v != nil {
			return *v
		}
		var ret PipeSourceParametersActivemqBrokerParameters
		return ret
	}).(PipeSourceParametersActivemqBrokerParametersOutput)
}

// The maximum number of records to include in each batch. Maximum value of 10000.
func (o PipeSourceParametersActivemqBrokerParametersPtrOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersActivemqBrokerParameters) *int {
		if v == nil {
			return nil
		}
		return v.BatchSize
	}).(pulumi.IntPtrOutput)
}

// The credentials needed to access the resource. Detailed below.
func (o PipeSourceParametersActivemqBrokerParametersPtrOutput) Credentials() PipeSourceParametersActivemqBrokerParametersCredentialsPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersActivemqBrokerParameters) *PipeSourceParametersActivemqBrokerParametersCredentials {
		if v == nil {
			return nil
		}
		return &v.Credentials
	}).(PipeSourceParametersActivemqBrokerParametersCredentialsPtrOutput)
}

// The maximum length of a time to wait for events. Maximum value of 300.
func (o PipeSourceParametersActivemqBrokerParametersPtrOutput) MaximumBatchingWindowInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersActivemqBrokerParameters) *int {
		if v == nil {
			return nil
		}
		return v.MaximumBatchingWindowInSeconds
	}).(pulumi.IntPtrOutput)
}

// The name of the destination queue to consume. Maximum length of 1000.
func (o PipeSourceParametersActivemqBrokerParametersPtrOutput) QueueName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersActivemqBrokerParameters) *string {
		if v == nil {
			return nil
		}
		return &v.QueueName
	}).(pulumi.StringPtrOutput)
}

type PipeSourceParametersActivemqBrokerParametersCredentials struct {
	// The ARN of the Secrets Manager secret containing the credentials.
	BasicAuth string `pulumi:"basicAuth"`
}

// PipeSourceParametersActivemqBrokerParametersCredentialsInput is an input type that accepts PipeSourceParametersActivemqBrokerParametersCredentialsArgs and PipeSourceParametersActivemqBrokerParametersCredentialsOutput values.
// You can construct a concrete instance of `PipeSourceParametersActivemqBrokerParametersCredentialsInput` via:
//
//	PipeSourceParametersActivemqBrokerParametersCredentialsArgs{...}
type PipeSourceParametersActivemqBrokerParametersCredentialsInput interface {
	pulumi.Input

	ToPipeSourceParametersActivemqBrokerParametersCredentialsOutput() PipeSourceParametersActivemqBrokerParametersCredentialsOutput
	ToPipeSourceParametersActivemqBrokerParametersCredentialsOutputWithContext(context.Context) PipeSourceParametersActivemqBrokerParametersCredentialsOutput
}

type PipeSourceParametersActivemqBrokerParametersCredentialsArgs struct {
	// The ARN of the Secrets Manager secret containing the credentials.
	BasicAuth pulumi.StringInput `pulumi:"basicAuth"`
}

func (PipeSourceParametersActivemqBrokerParametersCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersActivemqBrokerParametersCredentials)(nil)).Elem()
}

func (i PipeSourceParametersActivemqBrokerParametersCredentialsArgs) ToPipeSourceParametersActivemqBrokerParametersCredentialsOutput() PipeSourceParametersActivemqBrokerParametersCredentialsOutput {
	return i.ToPipeSourceParametersActivemqBrokerParametersCredentialsOutputWithContext(context.Background())
}

func (i PipeSourceParametersActivemqBrokerParametersCredentialsArgs) ToPipeSourceParametersActivemqBrokerParametersCredentialsOutputWithContext(ctx context.Context) PipeSourceParametersActivemqBrokerParametersCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersActivemqBrokerParametersCredentialsOutput)
}

func (i PipeSourceParametersActivemqBrokerParametersCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersActivemqBrokerParametersCredentials] {
	return pulumix.Output[PipeSourceParametersActivemqBrokerParametersCredentials]{
		OutputState: i.ToPipeSourceParametersActivemqBrokerParametersCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i PipeSourceParametersActivemqBrokerParametersCredentialsArgs) ToPipeSourceParametersActivemqBrokerParametersCredentialsPtrOutput() PipeSourceParametersActivemqBrokerParametersCredentialsPtrOutput {
	return i.ToPipeSourceParametersActivemqBrokerParametersCredentialsPtrOutputWithContext(context.Background())
}

func (i PipeSourceParametersActivemqBrokerParametersCredentialsArgs) ToPipeSourceParametersActivemqBrokerParametersCredentialsPtrOutputWithContext(ctx context.Context) PipeSourceParametersActivemqBrokerParametersCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersActivemqBrokerParametersCredentialsOutput).ToPipeSourceParametersActivemqBrokerParametersCredentialsPtrOutputWithContext(ctx)
}

// PipeSourceParametersActivemqBrokerParametersCredentialsPtrInput is an input type that accepts PipeSourceParametersActivemqBrokerParametersCredentialsArgs, PipeSourceParametersActivemqBrokerParametersCredentialsPtr and PipeSourceParametersActivemqBrokerParametersCredentialsPtrOutput values.
// You can construct a concrete instance of `PipeSourceParametersActivemqBrokerParametersCredentialsPtrInput` via:
//
//	        PipeSourceParametersActivemqBrokerParametersCredentialsArgs{...}
//
//	or:
//
//	        nil
type PipeSourceParametersActivemqBrokerParametersCredentialsPtrInput interface {
	pulumi.Input

	ToPipeSourceParametersActivemqBrokerParametersCredentialsPtrOutput() PipeSourceParametersActivemqBrokerParametersCredentialsPtrOutput
	ToPipeSourceParametersActivemqBrokerParametersCredentialsPtrOutputWithContext(context.Context) PipeSourceParametersActivemqBrokerParametersCredentialsPtrOutput
}

type pipeSourceParametersActivemqBrokerParametersCredentialsPtrType PipeSourceParametersActivemqBrokerParametersCredentialsArgs

func PipeSourceParametersActivemqBrokerParametersCredentialsPtr(v *PipeSourceParametersActivemqBrokerParametersCredentialsArgs) PipeSourceParametersActivemqBrokerParametersCredentialsPtrInput {
	return (*pipeSourceParametersActivemqBrokerParametersCredentialsPtrType)(v)
}

func (*pipeSourceParametersActivemqBrokerParametersCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParametersActivemqBrokerParametersCredentials)(nil)).Elem()
}

func (i *pipeSourceParametersActivemqBrokerParametersCredentialsPtrType) ToPipeSourceParametersActivemqBrokerParametersCredentialsPtrOutput() PipeSourceParametersActivemqBrokerParametersCredentialsPtrOutput {
	return i.ToPipeSourceParametersActivemqBrokerParametersCredentialsPtrOutputWithContext(context.Background())
}

func (i *pipeSourceParametersActivemqBrokerParametersCredentialsPtrType) ToPipeSourceParametersActivemqBrokerParametersCredentialsPtrOutputWithContext(ctx context.Context) PipeSourceParametersActivemqBrokerParametersCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersActivemqBrokerParametersCredentialsPtrOutput)
}

func (i *pipeSourceParametersActivemqBrokerParametersCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersActivemqBrokerParametersCredentials] {
	return pulumix.Output[*PipeSourceParametersActivemqBrokerParametersCredentials]{
		OutputState: i.ToPipeSourceParametersActivemqBrokerParametersCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeSourceParametersActivemqBrokerParametersCredentialsOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersActivemqBrokerParametersCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersActivemqBrokerParametersCredentials)(nil)).Elem()
}

func (o PipeSourceParametersActivemqBrokerParametersCredentialsOutput) ToPipeSourceParametersActivemqBrokerParametersCredentialsOutput() PipeSourceParametersActivemqBrokerParametersCredentialsOutput {
	return o
}

func (o PipeSourceParametersActivemqBrokerParametersCredentialsOutput) ToPipeSourceParametersActivemqBrokerParametersCredentialsOutputWithContext(ctx context.Context) PipeSourceParametersActivemqBrokerParametersCredentialsOutput {
	return o
}

func (o PipeSourceParametersActivemqBrokerParametersCredentialsOutput) ToPipeSourceParametersActivemqBrokerParametersCredentialsPtrOutput() PipeSourceParametersActivemqBrokerParametersCredentialsPtrOutput {
	return o.ToPipeSourceParametersActivemqBrokerParametersCredentialsPtrOutputWithContext(context.Background())
}

func (o PipeSourceParametersActivemqBrokerParametersCredentialsOutput) ToPipeSourceParametersActivemqBrokerParametersCredentialsPtrOutputWithContext(ctx context.Context) PipeSourceParametersActivemqBrokerParametersCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeSourceParametersActivemqBrokerParametersCredentials) *PipeSourceParametersActivemqBrokerParametersCredentials {
		return &v
	}).(PipeSourceParametersActivemqBrokerParametersCredentialsPtrOutput)
}

func (o PipeSourceParametersActivemqBrokerParametersCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersActivemqBrokerParametersCredentials] {
	return pulumix.Output[PipeSourceParametersActivemqBrokerParametersCredentials]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Secrets Manager secret containing the credentials.
func (o PipeSourceParametersActivemqBrokerParametersCredentialsOutput) BasicAuth() pulumi.StringOutput {
	return o.ApplyT(func(v PipeSourceParametersActivemqBrokerParametersCredentials) string { return v.BasicAuth }).(pulumi.StringOutput)
}

type PipeSourceParametersActivemqBrokerParametersCredentialsPtrOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersActivemqBrokerParametersCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParametersActivemqBrokerParametersCredentials)(nil)).Elem()
}

func (o PipeSourceParametersActivemqBrokerParametersCredentialsPtrOutput) ToPipeSourceParametersActivemqBrokerParametersCredentialsPtrOutput() PipeSourceParametersActivemqBrokerParametersCredentialsPtrOutput {
	return o
}

func (o PipeSourceParametersActivemqBrokerParametersCredentialsPtrOutput) ToPipeSourceParametersActivemqBrokerParametersCredentialsPtrOutputWithContext(ctx context.Context) PipeSourceParametersActivemqBrokerParametersCredentialsPtrOutput {
	return o
}

func (o PipeSourceParametersActivemqBrokerParametersCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersActivemqBrokerParametersCredentials] {
	return pulumix.Output[*PipeSourceParametersActivemqBrokerParametersCredentials]{
		OutputState: o.OutputState,
	}
}

func (o PipeSourceParametersActivemqBrokerParametersCredentialsPtrOutput) Elem() PipeSourceParametersActivemqBrokerParametersCredentialsOutput {
	return o.ApplyT(func(v *PipeSourceParametersActivemqBrokerParametersCredentials) PipeSourceParametersActivemqBrokerParametersCredentials {
		if v != nil {
			return *v
		}
		var ret PipeSourceParametersActivemqBrokerParametersCredentials
		return ret
	}).(PipeSourceParametersActivemqBrokerParametersCredentialsOutput)
}

// The ARN of the Secrets Manager secret containing the credentials.
func (o PipeSourceParametersActivemqBrokerParametersCredentialsPtrOutput) BasicAuth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersActivemqBrokerParametersCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.BasicAuth
	}).(pulumi.StringPtrOutput)
}

type PipeSourceParametersDynamodbStreamParameters struct {
	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize *int `pulumi:"batchSize"`
	// Define the target queue to send dead-letter queue events to. Detailed below.
	DeadLetterConfig *PipeSourceParametersDynamodbStreamParametersDeadLetterConfig `pulumi:"deadLetterConfig"`
	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds *int `pulumi:"maximumBatchingWindowInSeconds"`
	// Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, EventBridge never discards old records. Maximum value of 604,800.
	MaximumRecordAgeInSeconds *int `pulumi:"maximumRecordAgeInSeconds"`
	// Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, EventBridge retries failed records until the record expires in the event source. Maximum value of 10,000.
	MaximumRetryAttempts *int `pulumi:"maximumRetryAttempts"`
	// Define how to handle item process failures. AUTOMATIC_BISECT halves each batch and retry each half until all the records are processed or there is one failed message left in the batch. Valid values: AUTOMATIC_BISECT.
	OnPartialBatchItemFailure *string `pulumi:"onPartialBatchItemFailure"`
	// The number of batches to process concurrently from each shard. The default value is 1. Maximum value of 10.
	ParallelizationFactor *int `pulumi:"parallelizationFactor"`
	// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
	StartingPosition string `pulumi:"startingPosition"`
}

// PipeSourceParametersDynamodbStreamParametersInput is an input type that accepts PipeSourceParametersDynamodbStreamParametersArgs and PipeSourceParametersDynamodbStreamParametersOutput values.
// You can construct a concrete instance of `PipeSourceParametersDynamodbStreamParametersInput` via:
//
//	PipeSourceParametersDynamodbStreamParametersArgs{...}
type PipeSourceParametersDynamodbStreamParametersInput interface {
	pulumi.Input

	ToPipeSourceParametersDynamodbStreamParametersOutput() PipeSourceParametersDynamodbStreamParametersOutput
	ToPipeSourceParametersDynamodbStreamParametersOutputWithContext(context.Context) PipeSourceParametersDynamodbStreamParametersOutput
}

type PipeSourceParametersDynamodbStreamParametersArgs struct {
	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize pulumi.IntPtrInput `pulumi:"batchSize"`
	// Define the target queue to send dead-letter queue events to. Detailed below.
	DeadLetterConfig PipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrInput `pulumi:"deadLetterConfig"`
	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds pulumi.IntPtrInput `pulumi:"maximumBatchingWindowInSeconds"`
	// Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, EventBridge never discards old records. Maximum value of 604,800.
	MaximumRecordAgeInSeconds pulumi.IntPtrInput `pulumi:"maximumRecordAgeInSeconds"`
	// Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, EventBridge retries failed records until the record expires in the event source. Maximum value of 10,000.
	MaximumRetryAttempts pulumi.IntPtrInput `pulumi:"maximumRetryAttempts"`
	// Define how to handle item process failures. AUTOMATIC_BISECT halves each batch and retry each half until all the records are processed or there is one failed message left in the batch. Valid values: AUTOMATIC_BISECT.
	OnPartialBatchItemFailure pulumi.StringPtrInput `pulumi:"onPartialBatchItemFailure"`
	// The number of batches to process concurrently from each shard. The default value is 1. Maximum value of 10.
	ParallelizationFactor pulumi.IntPtrInput `pulumi:"parallelizationFactor"`
	// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
	StartingPosition pulumi.StringInput `pulumi:"startingPosition"`
}

func (PipeSourceParametersDynamodbStreamParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersDynamodbStreamParameters)(nil)).Elem()
}

func (i PipeSourceParametersDynamodbStreamParametersArgs) ToPipeSourceParametersDynamodbStreamParametersOutput() PipeSourceParametersDynamodbStreamParametersOutput {
	return i.ToPipeSourceParametersDynamodbStreamParametersOutputWithContext(context.Background())
}

func (i PipeSourceParametersDynamodbStreamParametersArgs) ToPipeSourceParametersDynamodbStreamParametersOutputWithContext(ctx context.Context) PipeSourceParametersDynamodbStreamParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersDynamodbStreamParametersOutput)
}

func (i PipeSourceParametersDynamodbStreamParametersArgs) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersDynamodbStreamParameters] {
	return pulumix.Output[PipeSourceParametersDynamodbStreamParameters]{
		OutputState: i.ToPipeSourceParametersDynamodbStreamParametersOutputWithContext(ctx).OutputState,
	}
}

func (i PipeSourceParametersDynamodbStreamParametersArgs) ToPipeSourceParametersDynamodbStreamParametersPtrOutput() PipeSourceParametersDynamodbStreamParametersPtrOutput {
	return i.ToPipeSourceParametersDynamodbStreamParametersPtrOutputWithContext(context.Background())
}

func (i PipeSourceParametersDynamodbStreamParametersArgs) ToPipeSourceParametersDynamodbStreamParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersDynamodbStreamParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersDynamodbStreamParametersOutput).ToPipeSourceParametersDynamodbStreamParametersPtrOutputWithContext(ctx)
}

// PipeSourceParametersDynamodbStreamParametersPtrInput is an input type that accepts PipeSourceParametersDynamodbStreamParametersArgs, PipeSourceParametersDynamodbStreamParametersPtr and PipeSourceParametersDynamodbStreamParametersPtrOutput values.
// You can construct a concrete instance of `PipeSourceParametersDynamodbStreamParametersPtrInput` via:
//
//	        PipeSourceParametersDynamodbStreamParametersArgs{...}
//
//	or:
//
//	        nil
type PipeSourceParametersDynamodbStreamParametersPtrInput interface {
	pulumi.Input

	ToPipeSourceParametersDynamodbStreamParametersPtrOutput() PipeSourceParametersDynamodbStreamParametersPtrOutput
	ToPipeSourceParametersDynamodbStreamParametersPtrOutputWithContext(context.Context) PipeSourceParametersDynamodbStreamParametersPtrOutput
}

type pipeSourceParametersDynamodbStreamParametersPtrType PipeSourceParametersDynamodbStreamParametersArgs

func PipeSourceParametersDynamodbStreamParametersPtr(v *PipeSourceParametersDynamodbStreamParametersArgs) PipeSourceParametersDynamodbStreamParametersPtrInput {
	return (*pipeSourceParametersDynamodbStreamParametersPtrType)(v)
}

func (*pipeSourceParametersDynamodbStreamParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParametersDynamodbStreamParameters)(nil)).Elem()
}

func (i *pipeSourceParametersDynamodbStreamParametersPtrType) ToPipeSourceParametersDynamodbStreamParametersPtrOutput() PipeSourceParametersDynamodbStreamParametersPtrOutput {
	return i.ToPipeSourceParametersDynamodbStreamParametersPtrOutputWithContext(context.Background())
}

func (i *pipeSourceParametersDynamodbStreamParametersPtrType) ToPipeSourceParametersDynamodbStreamParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersDynamodbStreamParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersDynamodbStreamParametersPtrOutput)
}

func (i *pipeSourceParametersDynamodbStreamParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersDynamodbStreamParameters] {
	return pulumix.Output[*PipeSourceParametersDynamodbStreamParameters]{
		OutputState: i.ToPipeSourceParametersDynamodbStreamParametersPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeSourceParametersDynamodbStreamParametersOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersDynamodbStreamParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersDynamodbStreamParameters)(nil)).Elem()
}

func (o PipeSourceParametersDynamodbStreamParametersOutput) ToPipeSourceParametersDynamodbStreamParametersOutput() PipeSourceParametersDynamodbStreamParametersOutput {
	return o
}

func (o PipeSourceParametersDynamodbStreamParametersOutput) ToPipeSourceParametersDynamodbStreamParametersOutputWithContext(ctx context.Context) PipeSourceParametersDynamodbStreamParametersOutput {
	return o
}

func (o PipeSourceParametersDynamodbStreamParametersOutput) ToPipeSourceParametersDynamodbStreamParametersPtrOutput() PipeSourceParametersDynamodbStreamParametersPtrOutput {
	return o.ToPipeSourceParametersDynamodbStreamParametersPtrOutputWithContext(context.Background())
}

func (o PipeSourceParametersDynamodbStreamParametersOutput) ToPipeSourceParametersDynamodbStreamParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersDynamodbStreamParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeSourceParametersDynamodbStreamParameters) *PipeSourceParametersDynamodbStreamParameters {
		return &v
	}).(PipeSourceParametersDynamodbStreamParametersPtrOutput)
}

func (o PipeSourceParametersDynamodbStreamParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersDynamodbStreamParameters] {
	return pulumix.Output[PipeSourceParametersDynamodbStreamParameters]{
		OutputState: o.OutputState,
	}
}

// The maximum number of records to include in each batch. Maximum value of 10000.
func (o PipeSourceParametersDynamodbStreamParametersOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersDynamodbStreamParameters) *int { return v.BatchSize }).(pulumi.IntPtrOutput)
}

// Define the target queue to send dead-letter queue events to. Detailed below.
func (o PipeSourceParametersDynamodbStreamParametersOutput) DeadLetterConfig() PipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersDynamodbStreamParameters) *PipeSourceParametersDynamodbStreamParametersDeadLetterConfig {
		return v.DeadLetterConfig
	}).(PipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutput)
}

// The maximum length of a time to wait for events. Maximum value of 300.
func (o PipeSourceParametersDynamodbStreamParametersOutput) MaximumBatchingWindowInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersDynamodbStreamParameters) *int { return v.MaximumBatchingWindowInSeconds }).(pulumi.IntPtrOutput)
}

// Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, EventBridge never discards old records. Maximum value of 604,800.
func (o PipeSourceParametersDynamodbStreamParametersOutput) MaximumRecordAgeInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersDynamodbStreamParameters) *int { return v.MaximumRecordAgeInSeconds }).(pulumi.IntPtrOutput)
}

// Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, EventBridge retries failed records until the record expires in the event source. Maximum value of 10,000.
func (o PipeSourceParametersDynamodbStreamParametersOutput) MaximumRetryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersDynamodbStreamParameters) *int { return v.MaximumRetryAttempts }).(pulumi.IntPtrOutput)
}

// Define how to handle item process failures. AUTOMATIC_BISECT halves each batch and retry each half until all the records are processed or there is one failed message left in the batch. Valid values: AUTOMATIC_BISECT.
func (o PipeSourceParametersDynamodbStreamParametersOutput) OnPartialBatchItemFailure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersDynamodbStreamParameters) *string { return v.OnPartialBatchItemFailure }).(pulumi.StringPtrOutput)
}

// The number of batches to process concurrently from each shard. The default value is 1. Maximum value of 10.
func (o PipeSourceParametersDynamodbStreamParametersOutput) ParallelizationFactor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersDynamodbStreamParameters) *int { return v.ParallelizationFactor }).(pulumi.IntPtrOutput)
}

// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
func (o PipeSourceParametersDynamodbStreamParametersOutput) StartingPosition() pulumi.StringOutput {
	return o.ApplyT(func(v PipeSourceParametersDynamodbStreamParameters) string { return v.StartingPosition }).(pulumi.StringOutput)
}

type PipeSourceParametersDynamodbStreamParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersDynamodbStreamParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParametersDynamodbStreamParameters)(nil)).Elem()
}

func (o PipeSourceParametersDynamodbStreamParametersPtrOutput) ToPipeSourceParametersDynamodbStreamParametersPtrOutput() PipeSourceParametersDynamodbStreamParametersPtrOutput {
	return o
}

func (o PipeSourceParametersDynamodbStreamParametersPtrOutput) ToPipeSourceParametersDynamodbStreamParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersDynamodbStreamParametersPtrOutput {
	return o
}

func (o PipeSourceParametersDynamodbStreamParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersDynamodbStreamParameters] {
	return pulumix.Output[*PipeSourceParametersDynamodbStreamParameters]{
		OutputState: o.OutputState,
	}
}

func (o PipeSourceParametersDynamodbStreamParametersPtrOutput) Elem() PipeSourceParametersDynamodbStreamParametersOutput {
	return o.ApplyT(func(v *PipeSourceParametersDynamodbStreamParameters) PipeSourceParametersDynamodbStreamParameters {
		if v != nil {
			return *v
		}
		var ret PipeSourceParametersDynamodbStreamParameters
		return ret
	}).(PipeSourceParametersDynamodbStreamParametersOutput)
}

// The maximum number of records to include in each batch. Maximum value of 10000.
func (o PipeSourceParametersDynamodbStreamParametersPtrOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersDynamodbStreamParameters) *int {
		if v == nil {
			return nil
		}
		return v.BatchSize
	}).(pulumi.IntPtrOutput)
}

// Define the target queue to send dead-letter queue events to. Detailed below.
func (o PipeSourceParametersDynamodbStreamParametersPtrOutput) DeadLetterConfig() PipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersDynamodbStreamParameters) *PipeSourceParametersDynamodbStreamParametersDeadLetterConfig {
		if v == nil {
			return nil
		}
		return v.DeadLetterConfig
	}).(PipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutput)
}

// The maximum length of a time to wait for events. Maximum value of 300.
func (o PipeSourceParametersDynamodbStreamParametersPtrOutput) MaximumBatchingWindowInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersDynamodbStreamParameters) *int {
		if v == nil {
			return nil
		}
		return v.MaximumBatchingWindowInSeconds
	}).(pulumi.IntPtrOutput)
}

// Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, EventBridge never discards old records. Maximum value of 604,800.
func (o PipeSourceParametersDynamodbStreamParametersPtrOutput) MaximumRecordAgeInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersDynamodbStreamParameters) *int {
		if v == nil {
			return nil
		}
		return v.MaximumRecordAgeInSeconds
	}).(pulumi.IntPtrOutput)
}

// Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, EventBridge retries failed records until the record expires in the event source. Maximum value of 10,000.
func (o PipeSourceParametersDynamodbStreamParametersPtrOutput) MaximumRetryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersDynamodbStreamParameters) *int {
		if v == nil {
			return nil
		}
		return v.MaximumRetryAttempts
	}).(pulumi.IntPtrOutput)
}

// Define how to handle item process failures. AUTOMATIC_BISECT halves each batch and retry each half until all the records are processed or there is one failed message left in the batch. Valid values: AUTOMATIC_BISECT.
func (o PipeSourceParametersDynamodbStreamParametersPtrOutput) OnPartialBatchItemFailure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersDynamodbStreamParameters) *string {
		if v == nil {
			return nil
		}
		return v.OnPartialBatchItemFailure
	}).(pulumi.StringPtrOutput)
}

// The number of batches to process concurrently from each shard. The default value is 1. Maximum value of 10.
func (o PipeSourceParametersDynamodbStreamParametersPtrOutput) ParallelizationFactor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersDynamodbStreamParameters) *int {
		if v == nil {
			return nil
		}
		return v.ParallelizationFactor
	}).(pulumi.IntPtrOutput)
}

// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
func (o PipeSourceParametersDynamodbStreamParametersPtrOutput) StartingPosition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersDynamodbStreamParameters) *string {
		if v == nil {
			return nil
		}
		return &v.StartingPosition
	}).(pulumi.StringPtrOutput)
}

type PipeSourceParametersDynamodbStreamParametersDeadLetterConfig struct {
	// The ARN of the Amazon SQS queue specified as the target for the dead-letter queue.
	Arn *string `pulumi:"arn"`
}

// PipeSourceParametersDynamodbStreamParametersDeadLetterConfigInput is an input type that accepts PipeSourceParametersDynamodbStreamParametersDeadLetterConfigArgs and PipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput values.
// You can construct a concrete instance of `PipeSourceParametersDynamodbStreamParametersDeadLetterConfigInput` via:
//
//	PipeSourceParametersDynamodbStreamParametersDeadLetterConfigArgs{...}
type PipeSourceParametersDynamodbStreamParametersDeadLetterConfigInput interface {
	pulumi.Input

	ToPipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput() PipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput
	ToPipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutputWithContext(context.Context) PipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput
}

type PipeSourceParametersDynamodbStreamParametersDeadLetterConfigArgs struct {
	// The ARN of the Amazon SQS queue specified as the target for the dead-letter queue.
	Arn pulumi.StringPtrInput `pulumi:"arn"`
}

func (PipeSourceParametersDynamodbStreamParametersDeadLetterConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersDynamodbStreamParametersDeadLetterConfig)(nil)).Elem()
}

func (i PipeSourceParametersDynamodbStreamParametersDeadLetterConfigArgs) ToPipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput() PipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput {
	return i.ToPipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutputWithContext(context.Background())
}

func (i PipeSourceParametersDynamodbStreamParametersDeadLetterConfigArgs) ToPipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutputWithContext(ctx context.Context) PipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput)
}

func (i PipeSourceParametersDynamodbStreamParametersDeadLetterConfigArgs) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersDynamodbStreamParametersDeadLetterConfig] {
	return pulumix.Output[PipeSourceParametersDynamodbStreamParametersDeadLetterConfig]{
		OutputState: i.ToPipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutputWithContext(ctx).OutputState,
	}
}

func (i PipeSourceParametersDynamodbStreamParametersDeadLetterConfigArgs) ToPipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutput() PipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutput {
	return i.ToPipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutputWithContext(context.Background())
}

func (i PipeSourceParametersDynamodbStreamParametersDeadLetterConfigArgs) ToPipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutputWithContext(ctx context.Context) PipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput).ToPipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutputWithContext(ctx)
}

// PipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrInput is an input type that accepts PipeSourceParametersDynamodbStreamParametersDeadLetterConfigArgs, PipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtr and PipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutput values.
// You can construct a concrete instance of `PipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrInput` via:
//
//	        PipeSourceParametersDynamodbStreamParametersDeadLetterConfigArgs{...}
//
//	or:
//
//	        nil
type PipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrInput interface {
	pulumi.Input

	ToPipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutput() PipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutput
	ToPipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutputWithContext(context.Context) PipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutput
}

type pipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrType PipeSourceParametersDynamodbStreamParametersDeadLetterConfigArgs

func PipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtr(v *PipeSourceParametersDynamodbStreamParametersDeadLetterConfigArgs) PipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrInput {
	return (*pipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrType)(v)
}

func (*pipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParametersDynamodbStreamParametersDeadLetterConfig)(nil)).Elem()
}

func (i *pipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrType) ToPipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutput() PipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutput {
	return i.ToPipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutputWithContext(context.Background())
}

func (i *pipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrType) ToPipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutputWithContext(ctx context.Context) PipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutput)
}

func (i *pipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersDynamodbStreamParametersDeadLetterConfig] {
	return pulumix.Output[*PipeSourceParametersDynamodbStreamParametersDeadLetterConfig]{
		OutputState: i.ToPipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersDynamodbStreamParametersDeadLetterConfig)(nil)).Elem()
}

func (o PipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput) ToPipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput() PipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput {
	return o
}

func (o PipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput) ToPipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutputWithContext(ctx context.Context) PipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput {
	return o
}

func (o PipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput) ToPipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutput() PipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutput {
	return o.ToPipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutputWithContext(context.Background())
}

func (o PipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput) ToPipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutputWithContext(ctx context.Context) PipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeSourceParametersDynamodbStreamParametersDeadLetterConfig) *PipeSourceParametersDynamodbStreamParametersDeadLetterConfig {
		return &v
	}).(PipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutput)
}

func (o PipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersDynamodbStreamParametersDeadLetterConfig] {
	return pulumix.Output[PipeSourceParametersDynamodbStreamParametersDeadLetterConfig]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Amazon SQS queue specified as the target for the dead-letter queue.
func (o PipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersDynamodbStreamParametersDeadLetterConfig) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

type PipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParametersDynamodbStreamParametersDeadLetterConfig)(nil)).Elem()
}

func (o PipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutput) ToPipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutput() PipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutput {
	return o
}

func (o PipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutput) ToPipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutputWithContext(ctx context.Context) PipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutput {
	return o
}

func (o PipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersDynamodbStreamParametersDeadLetterConfig] {
	return pulumix.Output[*PipeSourceParametersDynamodbStreamParametersDeadLetterConfig]{
		OutputState: o.OutputState,
	}
}

func (o PipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutput) Elem() PipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput {
	return o.ApplyT(func(v *PipeSourceParametersDynamodbStreamParametersDeadLetterConfig) PipeSourceParametersDynamodbStreamParametersDeadLetterConfig {
		if v != nil {
			return *v
		}
		var ret PipeSourceParametersDynamodbStreamParametersDeadLetterConfig
		return ret
	}).(PipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput)
}

// The ARN of the Amazon SQS queue specified as the target for the dead-letter queue.
func (o PipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersDynamodbStreamParametersDeadLetterConfig) *string {
		if v == nil {
			return nil
		}
		return v.Arn
	}).(pulumi.StringPtrOutput)
}

type PipeSourceParametersFilterCriteria struct {
	// An array of up to 5 event patterns. Detailed below.
	Filters []PipeSourceParametersFilterCriteriaFilter `pulumi:"filters"`
}

// PipeSourceParametersFilterCriteriaInput is an input type that accepts PipeSourceParametersFilterCriteriaArgs and PipeSourceParametersFilterCriteriaOutput values.
// You can construct a concrete instance of `PipeSourceParametersFilterCriteriaInput` via:
//
//	PipeSourceParametersFilterCriteriaArgs{...}
type PipeSourceParametersFilterCriteriaInput interface {
	pulumi.Input

	ToPipeSourceParametersFilterCriteriaOutput() PipeSourceParametersFilterCriteriaOutput
	ToPipeSourceParametersFilterCriteriaOutputWithContext(context.Context) PipeSourceParametersFilterCriteriaOutput
}

type PipeSourceParametersFilterCriteriaArgs struct {
	// An array of up to 5 event patterns. Detailed below.
	Filters PipeSourceParametersFilterCriteriaFilterArrayInput `pulumi:"filters"`
}

func (PipeSourceParametersFilterCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersFilterCriteria)(nil)).Elem()
}

func (i PipeSourceParametersFilterCriteriaArgs) ToPipeSourceParametersFilterCriteriaOutput() PipeSourceParametersFilterCriteriaOutput {
	return i.ToPipeSourceParametersFilterCriteriaOutputWithContext(context.Background())
}

func (i PipeSourceParametersFilterCriteriaArgs) ToPipeSourceParametersFilterCriteriaOutputWithContext(ctx context.Context) PipeSourceParametersFilterCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersFilterCriteriaOutput)
}

func (i PipeSourceParametersFilterCriteriaArgs) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersFilterCriteria] {
	return pulumix.Output[PipeSourceParametersFilterCriteria]{
		OutputState: i.ToPipeSourceParametersFilterCriteriaOutputWithContext(ctx).OutputState,
	}
}

func (i PipeSourceParametersFilterCriteriaArgs) ToPipeSourceParametersFilterCriteriaPtrOutput() PipeSourceParametersFilterCriteriaPtrOutput {
	return i.ToPipeSourceParametersFilterCriteriaPtrOutputWithContext(context.Background())
}

func (i PipeSourceParametersFilterCriteriaArgs) ToPipeSourceParametersFilterCriteriaPtrOutputWithContext(ctx context.Context) PipeSourceParametersFilterCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersFilterCriteriaOutput).ToPipeSourceParametersFilterCriteriaPtrOutputWithContext(ctx)
}

// PipeSourceParametersFilterCriteriaPtrInput is an input type that accepts PipeSourceParametersFilterCriteriaArgs, PipeSourceParametersFilterCriteriaPtr and PipeSourceParametersFilterCriteriaPtrOutput values.
// You can construct a concrete instance of `PipeSourceParametersFilterCriteriaPtrInput` via:
//
//	        PipeSourceParametersFilterCriteriaArgs{...}
//
//	or:
//
//	        nil
type PipeSourceParametersFilterCriteriaPtrInput interface {
	pulumi.Input

	ToPipeSourceParametersFilterCriteriaPtrOutput() PipeSourceParametersFilterCriteriaPtrOutput
	ToPipeSourceParametersFilterCriteriaPtrOutputWithContext(context.Context) PipeSourceParametersFilterCriteriaPtrOutput
}

type pipeSourceParametersFilterCriteriaPtrType PipeSourceParametersFilterCriteriaArgs

func PipeSourceParametersFilterCriteriaPtr(v *PipeSourceParametersFilterCriteriaArgs) PipeSourceParametersFilterCriteriaPtrInput {
	return (*pipeSourceParametersFilterCriteriaPtrType)(v)
}

func (*pipeSourceParametersFilterCriteriaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParametersFilterCriteria)(nil)).Elem()
}

func (i *pipeSourceParametersFilterCriteriaPtrType) ToPipeSourceParametersFilterCriteriaPtrOutput() PipeSourceParametersFilterCriteriaPtrOutput {
	return i.ToPipeSourceParametersFilterCriteriaPtrOutputWithContext(context.Background())
}

func (i *pipeSourceParametersFilterCriteriaPtrType) ToPipeSourceParametersFilterCriteriaPtrOutputWithContext(ctx context.Context) PipeSourceParametersFilterCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersFilterCriteriaPtrOutput)
}

func (i *pipeSourceParametersFilterCriteriaPtrType) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersFilterCriteria] {
	return pulumix.Output[*PipeSourceParametersFilterCriteria]{
		OutputState: i.ToPipeSourceParametersFilterCriteriaPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeSourceParametersFilterCriteriaOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersFilterCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersFilterCriteria)(nil)).Elem()
}

func (o PipeSourceParametersFilterCriteriaOutput) ToPipeSourceParametersFilterCriteriaOutput() PipeSourceParametersFilterCriteriaOutput {
	return o
}

func (o PipeSourceParametersFilterCriteriaOutput) ToPipeSourceParametersFilterCriteriaOutputWithContext(ctx context.Context) PipeSourceParametersFilterCriteriaOutput {
	return o
}

func (o PipeSourceParametersFilterCriteriaOutput) ToPipeSourceParametersFilterCriteriaPtrOutput() PipeSourceParametersFilterCriteriaPtrOutput {
	return o.ToPipeSourceParametersFilterCriteriaPtrOutputWithContext(context.Background())
}

func (o PipeSourceParametersFilterCriteriaOutput) ToPipeSourceParametersFilterCriteriaPtrOutputWithContext(ctx context.Context) PipeSourceParametersFilterCriteriaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeSourceParametersFilterCriteria) *PipeSourceParametersFilterCriteria {
		return &v
	}).(PipeSourceParametersFilterCriteriaPtrOutput)
}

func (o PipeSourceParametersFilterCriteriaOutput) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersFilterCriteria] {
	return pulumix.Output[PipeSourceParametersFilterCriteria]{
		OutputState: o.OutputState,
	}
}

// An array of up to 5 event patterns. Detailed below.
func (o PipeSourceParametersFilterCriteriaOutput) Filters() PipeSourceParametersFilterCriteriaFilterArrayOutput {
	return o.ApplyT(func(v PipeSourceParametersFilterCriteria) []PipeSourceParametersFilterCriteriaFilter {
		return v.Filters
	}).(PipeSourceParametersFilterCriteriaFilterArrayOutput)
}

type PipeSourceParametersFilterCriteriaPtrOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersFilterCriteriaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParametersFilterCriteria)(nil)).Elem()
}

func (o PipeSourceParametersFilterCriteriaPtrOutput) ToPipeSourceParametersFilterCriteriaPtrOutput() PipeSourceParametersFilterCriteriaPtrOutput {
	return o
}

func (o PipeSourceParametersFilterCriteriaPtrOutput) ToPipeSourceParametersFilterCriteriaPtrOutputWithContext(ctx context.Context) PipeSourceParametersFilterCriteriaPtrOutput {
	return o
}

func (o PipeSourceParametersFilterCriteriaPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersFilterCriteria] {
	return pulumix.Output[*PipeSourceParametersFilterCriteria]{
		OutputState: o.OutputState,
	}
}

func (o PipeSourceParametersFilterCriteriaPtrOutput) Elem() PipeSourceParametersFilterCriteriaOutput {
	return o.ApplyT(func(v *PipeSourceParametersFilterCriteria) PipeSourceParametersFilterCriteria {
		if v != nil {
			return *v
		}
		var ret PipeSourceParametersFilterCriteria
		return ret
	}).(PipeSourceParametersFilterCriteriaOutput)
}

// An array of up to 5 event patterns. Detailed below.
func (o PipeSourceParametersFilterCriteriaPtrOutput) Filters() PipeSourceParametersFilterCriteriaFilterArrayOutput {
	return o.ApplyT(func(v *PipeSourceParametersFilterCriteria) []PipeSourceParametersFilterCriteriaFilter {
		if v == nil {
			return nil
		}
		return v.Filters
	}).(PipeSourceParametersFilterCriteriaFilterArrayOutput)
}

type PipeSourceParametersFilterCriteriaFilter struct {
	// The event pattern. At most 4096 characters.
	Pattern string `pulumi:"pattern"`
}

// PipeSourceParametersFilterCriteriaFilterInput is an input type that accepts PipeSourceParametersFilterCriteriaFilterArgs and PipeSourceParametersFilterCriteriaFilterOutput values.
// You can construct a concrete instance of `PipeSourceParametersFilterCriteriaFilterInput` via:
//
//	PipeSourceParametersFilterCriteriaFilterArgs{...}
type PipeSourceParametersFilterCriteriaFilterInput interface {
	pulumi.Input

	ToPipeSourceParametersFilterCriteriaFilterOutput() PipeSourceParametersFilterCriteriaFilterOutput
	ToPipeSourceParametersFilterCriteriaFilterOutputWithContext(context.Context) PipeSourceParametersFilterCriteriaFilterOutput
}

type PipeSourceParametersFilterCriteriaFilterArgs struct {
	// The event pattern. At most 4096 characters.
	Pattern pulumi.StringInput `pulumi:"pattern"`
}

func (PipeSourceParametersFilterCriteriaFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersFilterCriteriaFilter)(nil)).Elem()
}

func (i PipeSourceParametersFilterCriteriaFilterArgs) ToPipeSourceParametersFilterCriteriaFilterOutput() PipeSourceParametersFilterCriteriaFilterOutput {
	return i.ToPipeSourceParametersFilterCriteriaFilterOutputWithContext(context.Background())
}

func (i PipeSourceParametersFilterCriteriaFilterArgs) ToPipeSourceParametersFilterCriteriaFilterOutputWithContext(ctx context.Context) PipeSourceParametersFilterCriteriaFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersFilterCriteriaFilterOutput)
}

func (i PipeSourceParametersFilterCriteriaFilterArgs) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersFilterCriteriaFilter] {
	return pulumix.Output[PipeSourceParametersFilterCriteriaFilter]{
		OutputState: i.ToPipeSourceParametersFilterCriteriaFilterOutputWithContext(ctx).OutputState,
	}
}

// PipeSourceParametersFilterCriteriaFilterArrayInput is an input type that accepts PipeSourceParametersFilterCriteriaFilterArray and PipeSourceParametersFilterCriteriaFilterArrayOutput values.
// You can construct a concrete instance of `PipeSourceParametersFilterCriteriaFilterArrayInput` via:
//
//	PipeSourceParametersFilterCriteriaFilterArray{ PipeSourceParametersFilterCriteriaFilterArgs{...} }
type PipeSourceParametersFilterCriteriaFilterArrayInput interface {
	pulumi.Input

	ToPipeSourceParametersFilterCriteriaFilterArrayOutput() PipeSourceParametersFilterCriteriaFilterArrayOutput
	ToPipeSourceParametersFilterCriteriaFilterArrayOutputWithContext(context.Context) PipeSourceParametersFilterCriteriaFilterArrayOutput
}

type PipeSourceParametersFilterCriteriaFilterArray []PipeSourceParametersFilterCriteriaFilterInput

func (PipeSourceParametersFilterCriteriaFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeSourceParametersFilterCriteriaFilter)(nil)).Elem()
}

func (i PipeSourceParametersFilterCriteriaFilterArray) ToPipeSourceParametersFilterCriteriaFilterArrayOutput() PipeSourceParametersFilterCriteriaFilterArrayOutput {
	return i.ToPipeSourceParametersFilterCriteriaFilterArrayOutputWithContext(context.Background())
}

func (i PipeSourceParametersFilterCriteriaFilterArray) ToPipeSourceParametersFilterCriteriaFilterArrayOutputWithContext(ctx context.Context) PipeSourceParametersFilterCriteriaFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersFilterCriteriaFilterArrayOutput)
}

func (i PipeSourceParametersFilterCriteriaFilterArray) ToOutput(ctx context.Context) pulumix.Output[[]PipeSourceParametersFilterCriteriaFilter] {
	return pulumix.Output[[]PipeSourceParametersFilterCriteriaFilter]{
		OutputState: i.ToPipeSourceParametersFilterCriteriaFilterArrayOutputWithContext(ctx).OutputState,
	}
}

type PipeSourceParametersFilterCriteriaFilterOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersFilterCriteriaFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersFilterCriteriaFilter)(nil)).Elem()
}

func (o PipeSourceParametersFilterCriteriaFilterOutput) ToPipeSourceParametersFilterCriteriaFilterOutput() PipeSourceParametersFilterCriteriaFilterOutput {
	return o
}

func (o PipeSourceParametersFilterCriteriaFilterOutput) ToPipeSourceParametersFilterCriteriaFilterOutputWithContext(ctx context.Context) PipeSourceParametersFilterCriteriaFilterOutput {
	return o
}

func (o PipeSourceParametersFilterCriteriaFilterOutput) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersFilterCriteriaFilter] {
	return pulumix.Output[PipeSourceParametersFilterCriteriaFilter]{
		OutputState: o.OutputState,
	}
}

// The event pattern. At most 4096 characters.
func (o PipeSourceParametersFilterCriteriaFilterOutput) Pattern() pulumi.StringOutput {
	return o.ApplyT(func(v PipeSourceParametersFilterCriteriaFilter) string { return v.Pattern }).(pulumi.StringOutput)
}

type PipeSourceParametersFilterCriteriaFilterArrayOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersFilterCriteriaFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeSourceParametersFilterCriteriaFilter)(nil)).Elem()
}

func (o PipeSourceParametersFilterCriteriaFilterArrayOutput) ToPipeSourceParametersFilterCriteriaFilterArrayOutput() PipeSourceParametersFilterCriteriaFilterArrayOutput {
	return o
}

func (o PipeSourceParametersFilterCriteriaFilterArrayOutput) ToPipeSourceParametersFilterCriteriaFilterArrayOutputWithContext(ctx context.Context) PipeSourceParametersFilterCriteriaFilterArrayOutput {
	return o
}

func (o PipeSourceParametersFilterCriteriaFilterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PipeSourceParametersFilterCriteriaFilter] {
	return pulumix.Output[[]PipeSourceParametersFilterCriteriaFilter]{
		OutputState: o.OutputState,
	}
}

func (o PipeSourceParametersFilterCriteriaFilterArrayOutput) Index(i pulumi.IntInput) PipeSourceParametersFilterCriteriaFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipeSourceParametersFilterCriteriaFilter {
		return vs[0].([]PipeSourceParametersFilterCriteriaFilter)[vs[1].(int)]
	}).(PipeSourceParametersFilterCriteriaFilterOutput)
}

type PipeSourceParametersKinesisStreamParameters struct {
	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize *int `pulumi:"batchSize"`
	// Define the target queue to send dead-letter queue events to. Detailed below.
	DeadLetterConfig *PipeSourceParametersKinesisStreamParametersDeadLetterConfig `pulumi:"deadLetterConfig"`
	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds *int `pulumi:"maximumBatchingWindowInSeconds"`
	// Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, EventBridge never discards old records. Maximum value of 604,800.
	MaximumRecordAgeInSeconds *int `pulumi:"maximumRecordAgeInSeconds"`
	// Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, EventBridge retries failed records until the record expires in the event source. Maximum value of 10,000.
	MaximumRetryAttempts *int `pulumi:"maximumRetryAttempts"`
	// Define how to handle item process failures. AUTOMATIC_BISECT halves each batch and retry each half until all the records are processed or there is one failed message left in the batch. Valid values: AUTOMATIC_BISECT.
	OnPartialBatchItemFailure *string `pulumi:"onPartialBatchItemFailure"`
	// The number of batches to process concurrently from each shard. The default value is 1. Maximum value of 10.
	ParallelizationFactor *int `pulumi:"parallelizationFactor"`
	// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
	StartingPosition string `pulumi:"startingPosition"`
	// With StartingPosition set to AT_TIMESTAMP, the time from which to start reading, in Unix time seconds.
	StartingPositionTimestamp *string `pulumi:"startingPositionTimestamp"`
}

// PipeSourceParametersKinesisStreamParametersInput is an input type that accepts PipeSourceParametersKinesisStreamParametersArgs and PipeSourceParametersKinesisStreamParametersOutput values.
// You can construct a concrete instance of `PipeSourceParametersKinesisStreamParametersInput` via:
//
//	PipeSourceParametersKinesisStreamParametersArgs{...}
type PipeSourceParametersKinesisStreamParametersInput interface {
	pulumi.Input

	ToPipeSourceParametersKinesisStreamParametersOutput() PipeSourceParametersKinesisStreamParametersOutput
	ToPipeSourceParametersKinesisStreamParametersOutputWithContext(context.Context) PipeSourceParametersKinesisStreamParametersOutput
}

type PipeSourceParametersKinesisStreamParametersArgs struct {
	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize pulumi.IntPtrInput `pulumi:"batchSize"`
	// Define the target queue to send dead-letter queue events to. Detailed below.
	DeadLetterConfig PipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrInput `pulumi:"deadLetterConfig"`
	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds pulumi.IntPtrInput `pulumi:"maximumBatchingWindowInSeconds"`
	// Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, EventBridge never discards old records. Maximum value of 604,800.
	MaximumRecordAgeInSeconds pulumi.IntPtrInput `pulumi:"maximumRecordAgeInSeconds"`
	// Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, EventBridge retries failed records until the record expires in the event source. Maximum value of 10,000.
	MaximumRetryAttempts pulumi.IntPtrInput `pulumi:"maximumRetryAttempts"`
	// Define how to handle item process failures. AUTOMATIC_BISECT halves each batch and retry each half until all the records are processed or there is one failed message left in the batch. Valid values: AUTOMATIC_BISECT.
	OnPartialBatchItemFailure pulumi.StringPtrInput `pulumi:"onPartialBatchItemFailure"`
	// The number of batches to process concurrently from each shard. The default value is 1. Maximum value of 10.
	ParallelizationFactor pulumi.IntPtrInput `pulumi:"parallelizationFactor"`
	// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
	StartingPosition pulumi.StringInput `pulumi:"startingPosition"`
	// With StartingPosition set to AT_TIMESTAMP, the time from which to start reading, in Unix time seconds.
	StartingPositionTimestamp pulumi.StringPtrInput `pulumi:"startingPositionTimestamp"`
}

func (PipeSourceParametersKinesisStreamParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersKinesisStreamParameters)(nil)).Elem()
}

func (i PipeSourceParametersKinesisStreamParametersArgs) ToPipeSourceParametersKinesisStreamParametersOutput() PipeSourceParametersKinesisStreamParametersOutput {
	return i.ToPipeSourceParametersKinesisStreamParametersOutputWithContext(context.Background())
}

func (i PipeSourceParametersKinesisStreamParametersArgs) ToPipeSourceParametersKinesisStreamParametersOutputWithContext(ctx context.Context) PipeSourceParametersKinesisStreamParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersKinesisStreamParametersOutput)
}

func (i PipeSourceParametersKinesisStreamParametersArgs) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersKinesisStreamParameters] {
	return pulumix.Output[PipeSourceParametersKinesisStreamParameters]{
		OutputState: i.ToPipeSourceParametersKinesisStreamParametersOutputWithContext(ctx).OutputState,
	}
}

func (i PipeSourceParametersKinesisStreamParametersArgs) ToPipeSourceParametersKinesisStreamParametersPtrOutput() PipeSourceParametersKinesisStreamParametersPtrOutput {
	return i.ToPipeSourceParametersKinesisStreamParametersPtrOutputWithContext(context.Background())
}

func (i PipeSourceParametersKinesisStreamParametersArgs) ToPipeSourceParametersKinesisStreamParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersKinesisStreamParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersKinesisStreamParametersOutput).ToPipeSourceParametersKinesisStreamParametersPtrOutputWithContext(ctx)
}

// PipeSourceParametersKinesisStreamParametersPtrInput is an input type that accepts PipeSourceParametersKinesisStreamParametersArgs, PipeSourceParametersKinesisStreamParametersPtr and PipeSourceParametersKinesisStreamParametersPtrOutput values.
// You can construct a concrete instance of `PipeSourceParametersKinesisStreamParametersPtrInput` via:
//
//	        PipeSourceParametersKinesisStreamParametersArgs{...}
//
//	or:
//
//	        nil
type PipeSourceParametersKinesisStreamParametersPtrInput interface {
	pulumi.Input

	ToPipeSourceParametersKinesisStreamParametersPtrOutput() PipeSourceParametersKinesisStreamParametersPtrOutput
	ToPipeSourceParametersKinesisStreamParametersPtrOutputWithContext(context.Context) PipeSourceParametersKinesisStreamParametersPtrOutput
}

type pipeSourceParametersKinesisStreamParametersPtrType PipeSourceParametersKinesisStreamParametersArgs

func PipeSourceParametersKinesisStreamParametersPtr(v *PipeSourceParametersKinesisStreamParametersArgs) PipeSourceParametersKinesisStreamParametersPtrInput {
	return (*pipeSourceParametersKinesisStreamParametersPtrType)(v)
}

func (*pipeSourceParametersKinesisStreamParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParametersKinesisStreamParameters)(nil)).Elem()
}

func (i *pipeSourceParametersKinesisStreamParametersPtrType) ToPipeSourceParametersKinesisStreamParametersPtrOutput() PipeSourceParametersKinesisStreamParametersPtrOutput {
	return i.ToPipeSourceParametersKinesisStreamParametersPtrOutputWithContext(context.Background())
}

func (i *pipeSourceParametersKinesisStreamParametersPtrType) ToPipeSourceParametersKinesisStreamParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersKinesisStreamParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersKinesisStreamParametersPtrOutput)
}

func (i *pipeSourceParametersKinesisStreamParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersKinesisStreamParameters] {
	return pulumix.Output[*PipeSourceParametersKinesisStreamParameters]{
		OutputState: i.ToPipeSourceParametersKinesisStreamParametersPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeSourceParametersKinesisStreamParametersOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersKinesisStreamParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersKinesisStreamParameters)(nil)).Elem()
}

func (o PipeSourceParametersKinesisStreamParametersOutput) ToPipeSourceParametersKinesisStreamParametersOutput() PipeSourceParametersKinesisStreamParametersOutput {
	return o
}

func (o PipeSourceParametersKinesisStreamParametersOutput) ToPipeSourceParametersKinesisStreamParametersOutputWithContext(ctx context.Context) PipeSourceParametersKinesisStreamParametersOutput {
	return o
}

func (o PipeSourceParametersKinesisStreamParametersOutput) ToPipeSourceParametersKinesisStreamParametersPtrOutput() PipeSourceParametersKinesisStreamParametersPtrOutput {
	return o.ToPipeSourceParametersKinesisStreamParametersPtrOutputWithContext(context.Background())
}

func (o PipeSourceParametersKinesisStreamParametersOutput) ToPipeSourceParametersKinesisStreamParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersKinesisStreamParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeSourceParametersKinesisStreamParameters) *PipeSourceParametersKinesisStreamParameters {
		return &v
	}).(PipeSourceParametersKinesisStreamParametersPtrOutput)
}

func (o PipeSourceParametersKinesisStreamParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersKinesisStreamParameters] {
	return pulumix.Output[PipeSourceParametersKinesisStreamParameters]{
		OutputState: o.OutputState,
	}
}

// The maximum number of records to include in each batch. Maximum value of 10000.
func (o PipeSourceParametersKinesisStreamParametersOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersKinesisStreamParameters) *int { return v.BatchSize }).(pulumi.IntPtrOutput)
}

// Define the target queue to send dead-letter queue events to. Detailed below.
func (o PipeSourceParametersKinesisStreamParametersOutput) DeadLetterConfig() PipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersKinesisStreamParameters) *PipeSourceParametersKinesisStreamParametersDeadLetterConfig {
		return v.DeadLetterConfig
	}).(PipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutput)
}

// The maximum length of a time to wait for events. Maximum value of 300.
func (o PipeSourceParametersKinesisStreamParametersOutput) MaximumBatchingWindowInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersKinesisStreamParameters) *int { return v.MaximumBatchingWindowInSeconds }).(pulumi.IntPtrOutput)
}

// Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, EventBridge never discards old records. Maximum value of 604,800.
func (o PipeSourceParametersKinesisStreamParametersOutput) MaximumRecordAgeInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersKinesisStreamParameters) *int { return v.MaximumRecordAgeInSeconds }).(pulumi.IntPtrOutput)
}

// Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, EventBridge retries failed records until the record expires in the event source. Maximum value of 10,000.
func (o PipeSourceParametersKinesisStreamParametersOutput) MaximumRetryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersKinesisStreamParameters) *int { return v.MaximumRetryAttempts }).(pulumi.IntPtrOutput)
}

// Define how to handle item process failures. AUTOMATIC_BISECT halves each batch and retry each half until all the records are processed or there is one failed message left in the batch. Valid values: AUTOMATIC_BISECT.
func (o PipeSourceParametersKinesisStreamParametersOutput) OnPartialBatchItemFailure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersKinesisStreamParameters) *string { return v.OnPartialBatchItemFailure }).(pulumi.StringPtrOutput)
}

// The number of batches to process concurrently from each shard. The default value is 1. Maximum value of 10.
func (o PipeSourceParametersKinesisStreamParametersOutput) ParallelizationFactor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersKinesisStreamParameters) *int { return v.ParallelizationFactor }).(pulumi.IntPtrOutput)
}

// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
func (o PipeSourceParametersKinesisStreamParametersOutput) StartingPosition() pulumi.StringOutput {
	return o.ApplyT(func(v PipeSourceParametersKinesisStreamParameters) string { return v.StartingPosition }).(pulumi.StringOutput)
}

// With StartingPosition set to AT_TIMESTAMP, the time from which to start reading, in Unix time seconds.
func (o PipeSourceParametersKinesisStreamParametersOutput) StartingPositionTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersKinesisStreamParameters) *string { return v.StartingPositionTimestamp }).(pulumi.StringPtrOutput)
}

type PipeSourceParametersKinesisStreamParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersKinesisStreamParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParametersKinesisStreamParameters)(nil)).Elem()
}

func (o PipeSourceParametersKinesisStreamParametersPtrOutput) ToPipeSourceParametersKinesisStreamParametersPtrOutput() PipeSourceParametersKinesisStreamParametersPtrOutput {
	return o
}

func (o PipeSourceParametersKinesisStreamParametersPtrOutput) ToPipeSourceParametersKinesisStreamParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersKinesisStreamParametersPtrOutput {
	return o
}

func (o PipeSourceParametersKinesisStreamParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersKinesisStreamParameters] {
	return pulumix.Output[*PipeSourceParametersKinesisStreamParameters]{
		OutputState: o.OutputState,
	}
}

func (o PipeSourceParametersKinesisStreamParametersPtrOutput) Elem() PipeSourceParametersKinesisStreamParametersOutput {
	return o.ApplyT(func(v *PipeSourceParametersKinesisStreamParameters) PipeSourceParametersKinesisStreamParameters {
		if v != nil {
			return *v
		}
		var ret PipeSourceParametersKinesisStreamParameters
		return ret
	}).(PipeSourceParametersKinesisStreamParametersOutput)
}

// The maximum number of records to include in each batch. Maximum value of 10000.
func (o PipeSourceParametersKinesisStreamParametersPtrOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersKinesisStreamParameters) *int {
		if v == nil {
			return nil
		}
		return v.BatchSize
	}).(pulumi.IntPtrOutput)
}

// Define the target queue to send dead-letter queue events to. Detailed below.
func (o PipeSourceParametersKinesisStreamParametersPtrOutput) DeadLetterConfig() PipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersKinesisStreamParameters) *PipeSourceParametersKinesisStreamParametersDeadLetterConfig {
		if v == nil {
			return nil
		}
		return v.DeadLetterConfig
	}).(PipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutput)
}

// The maximum length of a time to wait for events. Maximum value of 300.
func (o PipeSourceParametersKinesisStreamParametersPtrOutput) MaximumBatchingWindowInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersKinesisStreamParameters) *int {
		if v == nil {
			return nil
		}
		return v.MaximumBatchingWindowInSeconds
	}).(pulumi.IntPtrOutput)
}

// Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, EventBridge never discards old records. Maximum value of 604,800.
func (o PipeSourceParametersKinesisStreamParametersPtrOutput) MaximumRecordAgeInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersKinesisStreamParameters) *int {
		if v == nil {
			return nil
		}
		return v.MaximumRecordAgeInSeconds
	}).(pulumi.IntPtrOutput)
}

// Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, EventBridge retries failed records until the record expires in the event source. Maximum value of 10,000.
func (o PipeSourceParametersKinesisStreamParametersPtrOutput) MaximumRetryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersKinesisStreamParameters) *int {
		if v == nil {
			return nil
		}
		return v.MaximumRetryAttempts
	}).(pulumi.IntPtrOutput)
}

// Define how to handle item process failures. AUTOMATIC_BISECT halves each batch and retry each half until all the records are processed or there is one failed message left in the batch. Valid values: AUTOMATIC_BISECT.
func (o PipeSourceParametersKinesisStreamParametersPtrOutput) OnPartialBatchItemFailure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersKinesisStreamParameters) *string {
		if v == nil {
			return nil
		}
		return v.OnPartialBatchItemFailure
	}).(pulumi.StringPtrOutput)
}

// The number of batches to process concurrently from each shard. The default value is 1. Maximum value of 10.
func (o PipeSourceParametersKinesisStreamParametersPtrOutput) ParallelizationFactor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersKinesisStreamParameters) *int {
		if v == nil {
			return nil
		}
		return v.ParallelizationFactor
	}).(pulumi.IntPtrOutput)
}

// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
func (o PipeSourceParametersKinesisStreamParametersPtrOutput) StartingPosition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersKinesisStreamParameters) *string {
		if v == nil {
			return nil
		}
		return &v.StartingPosition
	}).(pulumi.StringPtrOutput)
}

// With StartingPosition set to AT_TIMESTAMP, the time from which to start reading, in Unix time seconds.
func (o PipeSourceParametersKinesisStreamParametersPtrOutput) StartingPositionTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersKinesisStreamParameters) *string {
		if v == nil {
			return nil
		}
		return v.StartingPositionTimestamp
	}).(pulumi.StringPtrOutput)
}

type PipeSourceParametersKinesisStreamParametersDeadLetterConfig struct {
	// The ARN of the Amazon SQS queue specified as the target for the dead-letter queue.
	Arn *string `pulumi:"arn"`
}

// PipeSourceParametersKinesisStreamParametersDeadLetterConfigInput is an input type that accepts PipeSourceParametersKinesisStreamParametersDeadLetterConfigArgs and PipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput values.
// You can construct a concrete instance of `PipeSourceParametersKinesisStreamParametersDeadLetterConfigInput` via:
//
//	PipeSourceParametersKinesisStreamParametersDeadLetterConfigArgs{...}
type PipeSourceParametersKinesisStreamParametersDeadLetterConfigInput interface {
	pulumi.Input

	ToPipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput() PipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput
	ToPipeSourceParametersKinesisStreamParametersDeadLetterConfigOutputWithContext(context.Context) PipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput
}

type PipeSourceParametersKinesisStreamParametersDeadLetterConfigArgs struct {
	// The ARN of the Amazon SQS queue specified as the target for the dead-letter queue.
	Arn pulumi.StringPtrInput `pulumi:"arn"`
}

func (PipeSourceParametersKinesisStreamParametersDeadLetterConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersKinesisStreamParametersDeadLetterConfig)(nil)).Elem()
}

func (i PipeSourceParametersKinesisStreamParametersDeadLetterConfigArgs) ToPipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput() PipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput {
	return i.ToPipeSourceParametersKinesisStreamParametersDeadLetterConfigOutputWithContext(context.Background())
}

func (i PipeSourceParametersKinesisStreamParametersDeadLetterConfigArgs) ToPipeSourceParametersKinesisStreamParametersDeadLetterConfigOutputWithContext(ctx context.Context) PipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput)
}

func (i PipeSourceParametersKinesisStreamParametersDeadLetterConfigArgs) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersKinesisStreamParametersDeadLetterConfig] {
	return pulumix.Output[PipeSourceParametersKinesisStreamParametersDeadLetterConfig]{
		OutputState: i.ToPipeSourceParametersKinesisStreamParametersDeadLetterConfigOutputWithContext(ctx).OutputState,
	}
}

func (i PipeSourceParametersKinesisStreamParametersDeadLetterConfigArgs) ToPipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutput() PipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutput {
	return i.ToPipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutputWithContext(context.Background())
}

func (i PipeSourceParametersKinesisStreamParametersDeadLetterConfigArgs) ToPipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutputWithContext(ctx context.Context) PipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput).ToPipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutputWithContext(ctx)
}

// PipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrInput is an input type that accepts PipeSourceParametersKinesisStreamParametersDeadLetterConfigArgs, PipeSourceParametersKinesisStreamParametersDeadLetterConfigPtr and PipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutput values.
// You can construct a concrete instance of `PipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrInput` via:
//
//	        PipeSourceParametersKinesisStreamParametersDeadLetterConfigArgs{...}
//
//	or:
//
//	        nil
type PipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrInput interface {
	pulumi.Input

	ToPipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutput() PipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutput
	ToPipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutputWithContext(context.Context) PipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutput
}

type pipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrType PipeSourceParametersKinesisStreamParametersDeadLetterConfigArgs

func PipeSourceParametersKinesisStreamParametersDeadLetterConfigPtr(v *PipeSourceParametersKinesisStreamParametersDeadLetterConfigArgs) PipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrInput {
	return (*pipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrType)(v)
}

func (*pipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParametersKinesisStreamParametersDeadLetterConfig)(nil)).Elem()
}

func (i *pipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrType) ToPipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutput() PipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutput {
	return i.ToPipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutputWithContext(context.Background())
}

func (i *pipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrType) ToPipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutputWithContext(ctx context.Context) PipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutput)
}

func (i *pipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersKinesisStreamParametersDeadLetterConfig] {
	return pulumix.Output[*PipeSourceParametersKinesisStreamParametersDeadLetterConfig]{
		OutputState: i.ToPipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersKinesisStreamParametersDeadLetterConfig)(nil)).Elem()
}

func (o PipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput) ToPipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput() PipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput {
	return o
}

func (o PipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput) ToPipeSourceParametersKinesisStreamParametersDeadLetterConfigOutputWithContext(ctx context.Context) PipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput {
	return o
}

func (o PipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput) ToPipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutput() PipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutput {
	return o.ToPipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutputWithContext(context.Background())
}

func (o PipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput) ToPipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutputWithContext(ctx context.Context) PipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeSourceParametersKinesisStreamParametersDeadLetterConfig) *PipeSourceParametersKinesisStreamParametersDeadLetterConfig {
		return &v
	}).(PipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutput)
}

func (o PipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersKinesisStreamParametersDeadLetterConfig] {
	return pulumix.Output[PipeSourceParametersKinesisStreamParametersDeadLetterConfig]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Amazon SQS queue specified as the target for the dead-letter queue.
func (o PipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersKinesisStreamParametersDeadLetterConfig) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

type PipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParametersKinesisStreamParametersDeadLetterConfig)(nil)).Elem()
}

func (o PipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutput) ToPipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutput() PipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutput {
	return o
}

func (o PipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutput) ToPipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutputWithContext(ctx context.Context) PipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutput {
	return o
}

func (o PipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersKinesisStreamParametersDeadLetterConfig] {
	return pulumix.Output[*PipeSourceParametersKinesisStreamParametersDeadLetterConfig]{
		OutputState: o.OutputState,
	}
}

func (o PipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutput) Elem() PipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput {
	return o.ApplyT(func(v *PipeSourceParametersKinesisStreamParametersDeadLetterConfig) PipeSourceParametersKinesisStreamParametersDeadLetterConfig {
		if v != nil {
			return *v
		}
		var ret PipeSourceParametersKinesisStreamParametersDeadLetterConfig
		return ret
	}).(PipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput)
}

// The ARN of the Amazon SQS queue specified as the target for the dead-letter queue.
func (o PipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersKinesisStreamParametersDeadLetterConfig) *string {
		if v == nil {
			return nil
		}
		return v.Arn
	}).(pulumi.StringPtrOutput)
}

type PipeSourceParametersManagedStreamingKafkaParameters struct {
	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize *int `pulumi:"batchSize"`
	// The name of the destination queue to consume. Maximum value of 200.
	ConsumerGroupId *string `pulumi:"consumerGroupId"`
	// The credentials needed to access the resource. Detailed below.
	Credentials *PipeSourceParametersManagedStreamingKafkaParametersCredentials `pulumi:"credentials"`
	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds *int `pulumi:"maximumBatchingWindowInSeconds"`
	// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
	StartingPosition *string `pulumi:"startingPosition"`
	// The name of the topic that the pipe will read from. Maximum length of 249.
	TopicName string `pulumi:"topicName"`
}

// PipeSourceParametersManagedStreamingKafkaParametersInput is an input type that accepts PipeSourceParametersManagedStreamingKafkaParametersArgs and PipeSourceParametersManagedStreamingKafkaParametersOutput values.
// You can construct a concrete instance of `PipeSourceParametersManagedStreamingKafkaParametersInput` via:
//
//	PipeSourceParametersManagedStreamingKafkaParametersArgs{...}
type PipeSourceParametersManagedStreamingKafkaParametersInput interface {
	pulumi.Input

	ToPipeSourceParametersManagedStreamingKafkaParametersOutput() PipeSourceParametersManagedStreamingKafkaParametersOutput
	ToPipeSourceParametersManagedStreamingKafkaParametersOutputWithContext(context.Context) PipeSourceParametersManagedStreamingKafkaParametersOutput
}

type PipeSourceParametersManagedStreamingKafkaParametersArgs struct {
	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize pulumi.IntPtrInput `pulumi:"batchSize"`
	// The name of the destination queue to consume. Maximum value of 200.
	ConsumerGroupId pulumi.StringPtrInput `pulumi:"consumerGroupId"`
	// The credentials needed to access the resource. Detailed below.
	Credentials PipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrInput `pulumi:"credentials"`
	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds pulumi.IntPtrInput `pulumi:"maximumBatchingWindowInSeconds"`
	// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
	StartingPosition pulumi.StringPtrInput `pulumi:"startingPosition"`
	// The name of the topic that the pipe will read from. Maximum length of 249.
	TopicName pulumi.StringInput `pulumi:"topicName"`
}

func (PipeSourceParametersManagedStreamingKafkaParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersManagedStreamingKafkaParameters)(nil)).Elem()
}

func (i PipeSourceParametersManagedStreamingKafkaParametersArgs) ToPipeSourceParametersManagedStreamingKafkaParametersOutput() PipeSourceParametersManagedStreamingKafkaParametersOutput {
	return i.ToPipeSourceParametersManagedStreamingKafkaParametersOutputWithContext(context.Background())
}

func (i PipeSourceParametersManagedStreamingKafkaParametersArgs) ToPipeSourceParametersManagedStreamingKafkaParametersOutputWithContext(ctx context.Context) PipeSourceParametersManagedStreamingKafkaParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersManagedStreamingKafkaParametersOutput)
}

func (i PipeSourceParametersManagedStreamingKafkaParametersArgs) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersManagedStreamingKafkaParameters] {
	return pulumix.Output[PipeSourceParametersManagedStreamingKafkaParameters]{
		OutputState: i.ToPipeSourceParametersManagedStreamingKafkaParametersOutputWithContext(ctx).OutputState,
	}
}

func (i PipeSourceParametersManagedStreamingKafkaParametersArgs) ToPipeSourceParametersManagedStreamingKafkaParametersPtrOutput() PipeSourceParametersManagedStreamingKafkaParametersPtrOutput {
	return i.ToPipeSourceParametersManagedStreamingKafkaParametersPtrOutputWithContext(context.Background())
}

func (i PipeSourceParametersManagedStreamingKafkaParametersArgs) ToPipeSourceParametersManagedStreamingKafkaParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersManagedStreamingKafkaParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersManagedStreamingKafkaParametersOutput).ToPipeSourceParametersManagedStreamingKafkaParametersPtrOutputWithContext(ctx)
}

// PipeSourceParametersManagedStreamingKafkaParametersPtrInput is an input type that accepts PipeSourceParametersManagedStreamingKafkaParametersArgs, PipeSourceParametersManagedStreamingKafkaParametersPtr and PipeSourceParametersManagedStreamingKafkaParametersPtrOutput values.
// You can construct a concrete instance of `PipeSourceParametersManagedStreamingKafkaParametersPtrInput` via:
//
//	        PipeSourceParametersManagedStreamingKafkaParametersArgs{...}
//
//	or:
//
//	        nil
type PipeSourceParametersManagedStreamingKafkaParametersPtrInput interface {
	pulumi.Input

	ToPipeSourceParametersManagedStreamingKafkaParametersPtrOutput() PipeSourceParametersManagedStreamingKafkaParametersPtrOutput
	ToPipeSourceParametersManagedStreamingKafkaParametersPtrOutputWithContext(context.Context) PipeSourceParametersManagedStreamingKafkaParametersPtrOutput
}

type pipeSourceParametersManagedStreamingKafkaParametersPtrType PipeSourceParametersManagedStreamingKafkaParametersArgs

func PipeSourceParametersManagedStreamingKafkaParametersPtr(v *PipeSourceParametersManagedStreamingKafkaParametersArgs) PipeSourceParametersManagedStreamingKafkaParametersPtrInput {
	return (*pipeSourceParametersManagedStreamingKafkaParametersPtrType)(v)
}

func (*pipeSourceParametersManagedStreamingKafkaParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParametersManagedStreamingKafkaParameters)(nil)).Elem()
}

func (i *pipeSourceParametersManagedStreamingKafkaParametersPtrType) ToPipeSourceParametersManagedStreamingKafkaParametersPtrOutput() PipeSourceParametersManagedStreamingKafkaParametersPtrOutput {
	return i.ToPipeSourceParametersManagedStreamingKafkaParametersPtrOutputWithContext(context.Background())
}

func (i *pipeSourceParametersManagedStreamingKafkaParametersPtrType) ToPipeSourceParametersManagedStreamingKafkaParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersManagedStreamingKafkaParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersManagedStreamingKafkaParametersPtrOutput)
}

func (i *pipeSourceParametersManagedStreamingKafkaParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersManagedStreamingKafkaParameters] {
	return pulumix.Output[*PipeSourceParametersManagedStreamingKafkaParameters]{
		OutputState: i.ToPipeSourceParametersManagedStreamingKafkaParametersPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeSourceParametersManagedStreamingKafkaParametersOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersManagedStreamingKafkaParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersManagedStreamingKafkaParameters)(nil)).Elem()
}

func (o PipeSourceParametersManagedStreamingKafkaParametersOutput) ToPipeSourceParametersManagedStreamingKafkaParametersOutput() PipeSourceParametersManagedStreamingKafkaParametersOutput {
	return o
}

func (o PipeSourceParametersManagedStreamingKafkaParametersOutput) ToPipeSourceParametersManagedStreamingKafkaParametersOutputWithContext(ctx context.Context) PipeSourceParametersManagedStreamingKafkaParametersOutput {
	return o
}

func (o PipeSourceParametersManagedStreamingKafkaParametersOutput) ToPipeSourceParametersManagedStreamingKafkaParametersPtrOutput() PipeSourceParametersManagedStreamingKafkaParametersPtrOutput {
	return o.ToPipeSourceParametersManagedStreamingKafkaParametersPtrOutputWithContext(context.Background())
}

func (o PipeSourceParametersManagedStreamingKafkaParametersOutput) ToPipeSourceParametersManagedStreamingKafkaParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersManagedStreamingKafkaParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeSourceParametersManagedStreamingKafkaParameters) *PipeSourceParametersManagedStreamingKafkaParameters {
		return &v
	}).(PipeSourceParametersManagedStreamingKafkaParametersPtrOutput)
}

func (o PipeSourceParametersManagedStreamingKafkaParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersManagedStreamingKafkaParameters] {
	return pulumix.Output[PipeSourceParametersManagedStreamingKafkaParameters]{
		OutputState: o.OutputState,
	}
}

// The maximum number of records to include in each batch. Maximum value of 10000.
func (o PipeSourceParametersManagedStreamingKafkaParametersOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersManagedStreamingKafkaParameters) *int { return v.BatchSize }).(pulumi.IntPtrOutput)
}

// The name of the destination queue to consume. Maximum value of 200.
func (o PipeSourceParametersManagedStreamingKafkaParametersOutput) ConsumerGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersManagedStreamingKafkaParameters) *string { return v.ConsumerGroupId }).(pulumi.StringPtrOutput)
}

// The credentials needed to access the resource. Detailed below.
func (o PipeSourceParametersManagedStreamingKafkaParametersOutput) Credentials() PipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersManagedStreamingKafkaParameters) *PipeSourceParametersManagedStreamingKafkaParametersCredentials {
		return v.Credentials
	}).(PipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutput)
}

// The maximum length of a time to wait for events. Maximum value of 300.
func (o PipeSourceParametersManagedStreamingKafkaParametersOutput) MaximumBatchingWindowInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersManagedStreamingKafkaParameters) *int {
		return v.MaximumBatchingWindowInSeconds
	}).(pulumi.IntPtrOutput)
}

// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
func (o PipeSourceParametersManagedStreamingKafkaParametersOutput) StartingPosition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersManagedStreamingKafkaParameters) *string { return v.StartingPosition }).(pulumi.StringPtrOutput)
}

// The name of the topic that the pipe will read from. Maximum length of 249.
func (o PipeSourceParametersManagedStreamingKafkaParametersOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v PipeSourceParametersManagedStreamingKafkaParameters) string { return v.TopicName }).(pulumi.StringOutput)
}

type PipeSourceParametersManagedStreamingKafkaParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersManagedStreamingKafkaParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParametersManagedStreamingKafkaParameters)(nil)).Elem()
}

func (o PipeSourceParametersManagedStreamingKafkaParametersPtrOutput) ToPipeSourceParametersManagedStreamingKafkaParametersPtrOutput() PipeSourceParametersManagedStreamingKafkaParametersPtrOutput {
	return o
}

func (o PipeSourceParametersManagedStreamingKafkaParametersPtrOutput) ToPipeSourceParametersManagedStreamingKafkaParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersManagedStreamingKafkaParametersPtrOutput {
	return o
}

func (o PipeSourceParametersManagedStreamingKafkaParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersManagedStreamingKafkaParameters] {
	return pulumix.Output[*PipeSourceParametersManagedStreamingKafkaParameters]{
		OutputState: o.OutputState,
	}
}

func (o PipeSourceParametersManagedStreamingKafkaParametersPtrOutput) Elem() PipeSourceParametersManagedStreamingKafkaParametersOutput {
	return o.ApplyT(func(v *PipeSourceParametersManagedStreamingKafkaParameters) PipeSourceParametersManagedStreamingKafkaParameters {
		if v != nil {
			return *v
		}
		var ret PipeSourceParametersManagedStreamingKafkaParameters
		return ret
	}).(PipeSourceParametersManagedStreamingKafkaParametersOutput)
}

// The maximum number of records to include in each batch. Maximum value of 10000.
func (o PipeSourceParametersManagedStreamingKafkaParametersPtrOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersManagedStreamingKafkaParameters) *int {
		if v == nil {
			return nil
		}
		return v.BatchSize
	}).(pulumi.IntPtrOutput)
}

// The name of the destination queue to consume. Maximum value of 200.
func (o PipeSourceParametersManagedStreamingKafkaParametersPtrOutput) ConsumerGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersManagedStreamingKafkaParameters) *string {
		if v == nil {
			return nil
		}
		return v.ConsumerGroupId
	}).(pulumi.StringPtrOutput)
}

// The credentials needed to access the resource. Detailed below.
func (o PipeSourceParametersManagedStreamingKafkaParametersPtrOutput) Credentials() PipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersManagedStreamingKafkaParameters) *PipeSourceParametersManagedStreamingKafkaParametersCredentials {
		if v == nil {
			return nil
		}
		return v.Credentials
	}).(PipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutput)
}

// The maximum length of a time to wait for events. Maximum value of 300.
func (o PipeSourceParametersManagedStreamingKafkaParametersPtrOutput) MaximumBatchingWindowInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersManagedStreamingKafkaParameters) *int {
		if v == nil {
			return nil
		}
		return v.MaximumBatchingWindowInSeconds
	}).(pulumi.IntPtrOutput)
}

// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
func (o PipeSourceParametersManagedStreamingKafkaParametersPtrOutput) StartingPosition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersManagedStreamingKafkaParameters) *string {
		if v == nil {
			return nil
		}
		return v.StartingPosition
	}).(pulumi.StringPtrOutput)
}

// The name of the topic that the pipe will read from. Maximum length of 249.
func (o PipeSourceParametersManagedStreamingKafkaParametersPtrOutput) TopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersManagedStreamingKafkaParameters) *string {
		if v == nil {
			return nil
		}
		return &v.TopicName
	}).(pulumi.StringPtrOutput)
}

type PipeSourceParametersManagedStreamingKafkaParametersCredentials struct {
	// The ARN of the Secrets Manager secret containing the credentials.
	ClientCertificateTlsAuth *string `pulumi:"clientCertificateTlsAuth"`
	// The ARN of the Secrets Manager secret containing the credentials.
	SaslScram512Auth *string `pulumi:"saslScram512Auth"`
}

// PipeSourceParametersManagedStreamingKafkaParametersCredentialsInput is an input type that accepts PipeSourceParametersManagedStreamingKafkaParametersCredentialsArgs and PipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput values.
// You can construct a concrete instance of `PipeSourceParametersManagedStreamingKafkaParametersCredentialsInput` via:
//
//	PipeSourceParametersManagedStreamingKafkaParametersCredentialsArgs{...}
type PipeSourceParametersManagedStreamingKafkaParametersCredentialsInput interface {
	pulumi.Input

	ToPipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput() PipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput
	ToPipeSourceParametersManagedStreamingKafkaParametersCredentialsOutputWithContext(context.Context) PipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput
}

type PipeSourceParametersManagedStreamingKafkaParametersCredentialsArgs struct {
	// The ARN of the Secrets Manager secret containing the credentials.
	ClientCertificateTlsAuth pulumi.StringPtrInput `pulumi:"clientCertificateTlsAuth"`
	// The ARN of the Secrets Manager secret containing the credentials.
	SaslScram512Auth pulumi.StringPtrInput `pulumi:"saslScram512Auth"`
}

func (PipeSourceParametersManagedStreamingKafkaParametersCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersManagedStreamingKafkaParametersCredentials)(nil)).Elem()
}

func (i PipeSourceParametersManagedStreamingKafkaParametersCredentialsArgs) ToPipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput() PipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput {
	return i.ToPipeSourceParametersManagedStreamingKafkaParametersCredentialsOutputWithContext(context.Background())
}

func (i PipeSourceParametersManagedStreamingKafkaParametersCredentialsArgs) ToPipeSourceParametersManagedStreamingKafkaParametersCredentialsOutputWithContext(ctx context.Context) PipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput)
}

func (i PipeSourceParametersManagedStreamingKafkaParametersCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersManagedStreamingKafkaParametersCredentials] {
	return pulumix.Output[PipeSourceParametersManagedStreamingKafkaParametersCredentials]{
		OutputState: i.ToPipeSourceParametersManagedStreamingKafkaParametersCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i PipeSourceParametersManagedStreamingKafkaParametersCredentialsArgs) ToPipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutput() PipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutput {
	return i.ToPipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutputWithContext(context.Background())
}

func (i PipeSourceParametersManagedStreamingKafkaParametersCredentialsArgs) ToPipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutputWithContext(ctx context.Context) PipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput).ToPipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutputWithContext(ctx)
}

// PipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrInput is an input type that accepts PipeSourceParametersManagedStreamingKafkaParametersCredentialsArgs, PipeSourceParametersManagedStreamingKafkaParametersCredentialsPtr and PipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutput values.
// You can construct a concrete instance of `PipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrInput` via:
//
//	        PipeSourceParametersManagedStreamingKafkaParametersCredentialsArgs{...}
//
//	or:
//
//	        nil
type PipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrInput interface {
	pulumi.Input

	ToPipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutput() PipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutput
	ToPipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutputWithContext(context.Context) PipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutput
}

type pipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrType PipeSourceParametersManagedStreamingKafkaParametersCredentialsArgs

func PipeSourceParametersManagedStreamingKafkaParametersCredentialsPtr(v *PipeSourceParametersManagedStreamingKafkaParametersCredentialsArgs) PipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrInput {
	return (*pipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrType)(v)
}

func (*pipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParametersManagedStreamingKafkaParametersCredentials)(nil)).Elem()
}

func (i *pipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrType) ToPipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutput() PipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutput {
	return i.ToPipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutputWithContext(context.Background())
}

func (i *pipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrType) ToPipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutputWithContext(ctx context.Context) PipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutput)
}

func (i *pipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersManagedStreamingKafkaParametersCredentials] {
	return pulumix.Output[*PipeSourceParametersManagedStreamingKafkaParametersCredentials]{
		OutputState: i.ToPipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersManagedStreamingKafkaParametersCredentials)(nil)).Elem()
}

func (o PipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput) ToPipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput() PipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput {
	return o
}

func (o PipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput) ToPipeSourceParametersManagedStreamingKafkaParametersCredentialsOutputWithContext(ctx context.Context) PipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput {
	return o
}

func (o PipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput) ToPipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutput() PipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutput {
	return o.ToPipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutputWithContext(context.Background())
}

func (o PipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput) ToPipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutputWithContext(ctx context.Context) PipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeSourceParametersManagedStreamingKafkaParametersCredentials) *PipeSourceParametersManagedStreamingKafkaParametersCredentials {
		return &v
	}).(PipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutput)
}

func (o PipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersManagedStreamingKafkaParametersCredentials] {
	return pulumix.Output[PipeSourceParametersManagedStreamingKafkaParametersCredentials]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Secrets Manager secret containing the credentials.
func (o PipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput) ClientCertificateTlsAuth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersManagedStreamingKafkaParametersCredentials) *string {
		return v.ClientCertificateTlsAuth
	}).(pulumi.StringPtrOutput)
}

// The ARN of the Secrets Manager secret containing the credentials.
func (o PipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput) SaslScram512Auth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersManagedStreamingKafkaParametersCredentials) *string {
		return v.SaslScram512Auth
	}).(pulumi.StringPtrOutput)
}

type PipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParametersManagedStreamingKafkaParametersCredentials)(nil)).Elem()
}

func (o PipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutput) ToPipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutput() PipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutput {
	return o
}

func (o PipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutput) ToPipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutputWithContext(ctx context.Context) PipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutput {
	return o
}

func (o PipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersManagedStreamingKafkaParametersCredentials] {
	return pulumix.Output[*PipeSourceParametersManagedStreamingKafkaParametersCredentials]{
		OutputState: o.OutputState,
	}
}

func (o PipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutput) Elem() PipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput {
	return o.ApplyT(func(v *PipeSourceParametersManagedStreamingKafkaParametersCredentials) PipeSourceParametersManagedStreamingKafkaParametersCredentials {
		if v != nil {
			return *v
		}
		var ret PipeSourceParametersManagedStreamingKafkaParametersCredentials
		return ret
	}).(PipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput)
}

// The ARN of the Secrets Manager secret containing the credentials.
func (o PipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutput) ClientCertificateTlsAuth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersManagedStreamingKafkaParametersCredentials) *string {
		if v == nil {
			return nil
		}
		return v.ClientCertificateTlsAuth
	}).(pulumi.StringPtrOutput)
}

// The ARN of the Secrets Manager secret containing the credentials.
func (o PipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutput) SaslScram512Auth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersManagedStreamingKafkaParametersCredentials) *string {
		if v == nil {
			return nil
		}
		return v.SaslScram512Auth
	}).(pulumi.StringPtrOutput)
}

type PipeSourceParametersRabbitmqBrokerParameters struct {
	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize *int `pulumi:"batchSize"`
	// The credentials needed to access the resource. Detailed below.
	Credentials PipeSourceParametersRabbitmqBrokerParametersCredentials `pulumi:"credentials"`
	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds *int `pulumi:"maximumBatchingWindowInSeconds"`
	// The name of the destination queue to consume. Maximum length of 1000.
	QueueName string `pulumi:"queueName"`
	// The name of the virtual host associated with the source broker. Maximum length of 200.
	VirtualHost *string `pulumi:"virtualHost"`
}

// PipeSourceParametersRabbitmqBrokerParametersInput is an input type that accepts PipeSourceParametersRabbitmqBrokerParametersArgs and PipeSourceParametersRabbitmqBrokerParametersOutput values.
// You can construct a concrete instance of `PipeSourceParametersRabbitmqBrokerParametersInput` via:
//
//	PipeSourceParametersRabbitmqBrokerParametersArgs{...}
type PipeSourceParametersRabbitmqBrokerParametersInput interface {
	pulumi.Input

	ToPipeSourceParametersRabbitmqBrokerParametersOutput() PipeSourceParametersRabbitmqBrokerParametersOutput
	ToPipeSourceParametersRabbitmqBrokerParametersOutputWithContext(context.Context) PipeSourceParametersRabbitmqBrokerParametersOutput
}

type PipeSourceParametersRabbitmqBrokerParametersArgs struct {
	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize pulumi.IntPtrInput `pulumi:"batchSize"`
	// The credentials needed to access the resource. Detailed below.
	Credentials PipeSourceParametersRabbitmqBrokerParametersCredentialsInput `pulumi:"credentials"`
	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds pulumi.IntPtrInput `pulumi:"maximumBatchingWindowInSeconds"`
	// The name of the destination queue to consume. Maximum length of 1000.
	QueueName pulumi.StringInput `pulumi:"queueName"`
	// The name of the virtual host associated with the source broker. Maximum length of 200.
	VirtualHost pulumi.StringPtrInput `pulumi:"virtualHost"`
}

func (PipeSourceParametersRabbitmqBrokerParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersRabbitmqBrokerParameters)(nil)).Elem()
}

func (i PipeSourceParametersRabbitmqBrokerParametersArgs) ToPipeSourceParametersRabbitmqBrokerParametersOutput() PipeSourceParametersRabbitmqBrokerParametersOutput {
	return i.ToPipeSourceParametersRabbitmqBrokerParametersOutputWithContext(context.Background())
}

func (i PipeSourceParametersRabbitmqBrokerParametersArgs) ToPipeSourceParametersRabbitmqBrokerParametersOutputWithContext(ctx context.Context) PipeSourceParametersRabbitmqBrokerParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersRabbitmqBrokerParametersOutput)
}

func (i PipeSourceParametersRabbitmqBrokerParametersArgs) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersRabbitmqBrokerParameters] {
	return pulumix.Output[PipeSourceParametersRabbitmqBrokerParameters]{
		OutputState: i.ToPipeSourceParametersRabbitmqBrokerParametersOutputWithContext(ctx).OutputState,
	}
}

func (i PipeSourceParametersRabbitmqBrokerParametersArgs) ToPipeSourceParametersRabbitmqBrokerParametersPtrOutput() PipeSourceParametersRabbitmqBrokerParametersPtrOutput {
	return i.ToPipeSourceParametersRabbitmqBrokerParametersPtrOutputWithContext(context.Background())
}

func (i PipeSourceParametersRabbitmqBrokerParametersArgs) ToPipeSourceParametersRabbitmqBrokerParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersRabbitmqBrokerParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersRabbitmqBrokerParametersOutput).ToPipeSourceParametersRabbitmqBrokerParametersPtrOutputWithContext(ctx)
}

// PipeSourceParametersRabbitmqBrokerParametersPtrInput is an input type that accepts PipeSourceParametersRabbitmqBrokerParametersArgs, PipeSourceParametersRabbitmqBrokerParametersPtr and PipeSourceParametersRabbitmqBrokerParametersPtrOutput values.
// You can construct a concrete instance of `PipeSourceParametersRabbitmqBrokerParametersPtrInput` via:
//
//	        PipeSourceParametersRabbitmqBrokerParametersArgs{...}
//
//	or:
//
//	        nil
type PipeSourceParametersRabbitmqBrokerParametersPtrInput interface {
	pulumi.Input

	ToPipeSourceParametersRabbitmqBrokerParametersPtrOutput() PipeSourceParametersRabbitmqBrokerParametersPtrOutput
	ToPipeSourceParametersRabbitmqBrokerParametersPtrOutputWithContext(context.Context) PipeSourceParametersRabbitmqBrokerParametersPtrOutput
}

type pipeSourceParametersRabbitmqBrokerParametersPtrType PipeSourceParametersRabbitmqBrokerParametersArgs

func PipeSourceParametersRabbitmqBrokerParametersPtr(v *PipeSourceParametersRabbitmqBrokerParametersArgs) PipeSourceParametersRabbitmqBrokerParametersPtrInput {
	return (*pipeSourceParametersRabbitmqBrokerParametersPtrType)(v)
}

func (*pipeSourceParametersRabbitmqBrokerParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParametersRabbitmqBrokerParameters)(nil)).Elem()
}

func (i *pipeSourceParametersRabbitmqBrokerParametersPtrType) ToPipeSourceParametersRabbitmqBrokerParametersPtrOutput() PipeSourceParametersRabbitmqBrokerParametersPtrOutput {
	return i.ToPipeSourceParametersRabbitmqBrokerParametersPtrOutputWithContext(context.Background())
}

func (i *pipeSourceParametersRabbitmqBrokerParametersPtrType) ToPipeSourceParametersRabbitmqBrokerParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersRabbitmqBrokerParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersRabbitmqBrokerParametersPtrOutput)
}

func (i *pipeSourceParametersRabbitmqBrokerParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersRabbitmqBrokerParameters] {
	return pulumix.Output[*PipeSourceParametersRabbitmqBrokerParameters]{
		OutputState: i.ToPipeSourceParametersRabbitmqBrokerParametersPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeSourceParametersRabbitmqBrokerParametersOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersRabbitmqBrokerParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersRabbitmqBrokerParameters)(nil)).Elem()
}

func (o PipeSourceParametersRabbitmqBrokerParametersOutput) ToPipeSourceParametersRabbitmqBrokerParametersOutput() PipeSourceParametersRabbitmqBrokerParametersOutput {
	return o
}

func (o PipeSourceParametersRabbitmqBrokerParametersOutput) ToPipeSourceParametersRabbitmqBrokerParametersOutputWithContext(ctx context.Context) PipeSourceParametersRabbitmqBrokerParametersOutput {
	return o
}

func (o PipeSourceParametersRabbitmqBrokerParametersOutput) ToPipeSourceParametersRabbitmqBrokerParametersPtrOutput() PipeSourceParametersRabbitmqBrokerParametersPtrOutput {
	return o.ToPipeSourceParametersRabbitmqBrokerParametersPtrOutputWithContext(context.Background())
}

func (o PipeSourceParametersRabbitmqBrokerParametersOutput) ToPipeSourceParametersRabbitmqBrokerParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersRabbitmqBrokerParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeSourceParametersRabbitmqBrokerParameters) *PipeSourceParametersRabbitmqBrokerParameters {
		return &v
	}).(PipeSourceParametersRabbitmqBrokerParametersPtrOutput)
}

func (o PipeSourceParametersRabbitmqBrokerParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersRabbitmqBrokerParameters] {
	return pulumix.Output[PipeSourceParametersRabbitmqBrokerParameters]{
		OutputState: o.OutputState,
	}
}

// The maximum number of records to include in each batch. Maximum value of 10000.
func (o PipeSourceParametersRabbitmqBrokerParametersOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersRabbitmqBrokerParameters) *int { return v.BatchSize }).(pulumi.IntPtrOutput)
}

// The credentials needed to access the resource. Detailed below.
func (o PipeSourceParametersRabbitmqBrokerParametersOutput) Credentials() PipeSourceParametersRabbitmqBrokerParametersCredentialsOutput {
	return o.ApplyT(func(v PipeSourceParametersRabbitmqBrokerParameters) PipeSourceParametersRabbitmqBrokerParametersCredentials {
		return v.Credentials
	}).(PipeSourceParametersRabbitmqBrokerParametersCredentialsOutput)
}

// The maximum length of a time to wait for events. Maximum value of 300.
func (o PipeSourceParametersRabbitmqBrokerParametersOutput) MaximumBatchingWindowInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersRabbitmqBrokerParameters) *int { return v.MaximumBatchingWindowInSeconds }).(pulumi.IntPtrOutput)
}

// The name of the destination queue to consume. Maximum length of 1000.
func (o PipeSourceParametersRabbitmqBrokerParametersOutput) QueueName() pulumi.StringOutput {
	return o.ApplyT(func(v PipeSourceParametersRabbitmqBrokerParameters) string { return v.QueueName }).(pulumi.StringOutput)
}

// The name of the virtual host associated with the source broker. Maximum length of 200.
func (o PipeSourceParametersRabbitmqBrokerParametersOutput) VirtualHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersRabbitmqBrokerParameters) *string { return v.VirtualHost }).(pulumi.StringPtrOutput)
}

type PipeSourceParametersRabbitmqBrokerParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersRabbitmqBrokerParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParametersRabbitmqBrokerParameters)(nil)).Elem()
}

func (o PipeSourceParametersRabbitmqBrokerParametersPtrOutput) ToPipeSourceParametersRabbitmqBrokerParametersPtrOutput() PipeSourceParametersRabbitmqBrokerParametersPtrOutput {
	return o
}

func (o PipeSourceParametersRabbitmqBrokerParametersPtrOutput) ToPipeSourceParametersRabbitmqBrokerParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersRabbitmqBrokerParametersPtrOutput {
	return o
}

func (o PipeSourceParametersRabbitmqBrokerParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersRabbitmqBrokerParameters] {
	return pulumix.Output[*PipeSourceParametersRabbitmqBrokerParameters]{
		OutputState: o.OutputState,
	}
}

func (o PipeSourceParametersRabbitmqBrokerParametersPtrOutput) Elem() PipeSourceParametersRabbitmqBrokerParametersOutput {
	return o.ApplyT(func(v *PipeSourceParametersRabbitmqBrokerParameters) PipeSourceParametersRabbitmqBrokerParameters {
		if v != nil {
			return *v
		}
		var ret PipeSourceParametersRabbitmqBrokerParameters
		return ret
	}).(PipeSourceParametersRabbitmqBrokerParametersOutput)
}

// The maximum number of records to include in each batch. Maximum value of 10000.
func (o PipeSourceParametersRabbitmqBrokerParametersPtrOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersRabbitmqBrokerParameters) *int {
		if v == nil {
			return nil
		}
		return v.BatchSize
	}).(pulumi.IntPtrOutput)
}

// The credentials needed to access the resource. Detailed below.
func (o PipeSourceParametersRabbitmqBrokerParametersPtrOutput) Credentials() PipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersRabbitmqBrokerParameters) *PipeSourceParametersRabbitmqBrokerParametersCredentials {
		if v == nil {
			return nil
		}
		return &v.Credentials
	}).(PipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutput)
}

// The maximum length of a time to wait for events. Maximum value of 300.
func (o PipeSourceParametersRabbitmqBrokerParametersPtrOutput) MaximumBatchingWindowInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersRabbitmqBrokerParameters) *int {
		if v == nil {
			return nil
		}
		return v.MaximumBatchingWindowInSeconds
	}).(pulumi.IntPtrOutput)
}

// The name of the destination queue to consume. Maximum length of 1000.
func (o PipeSourceParametersRabbitmqBrokerParametersPtrOutput) QueueName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersRabbitmqBrokerParameters) *string {
		if v == nil {
			return nil
		}
		return &v.QueueName
	}).(pulumi.StringPtrOutput)
}

// The name of the virtual host associated with the source broker. Maximum length of 200.
func (o PipeSourceParametersRabbitmqBrokerParametersPtrOutput) VirtualHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersRabbitmqBrokerParameters) *string {
		if v == nil {
			return nil
		}
		return v.VirtualHost
	}).(pulumi.StringPtrOutput)
}

type PipeSourceParametersRabbitmqBrokerParametersCredentials struct {
	// The ARN of the Secrets Manager secret containing the credentials.
	BasicAuth string `pulumi:"basicAuth"`
}

// PipeSourceParametersRabbitmqBrokerParametersCredentialsInput is an input type that accepts PipeSourceParametersRabbitmqBrokerParametersCredentialsArgs and PipeSourceParametersRabbitmqBrokerParametersCredentialsOutput values.
// You can construct a concrete instance of `PipeSourceParametersRabbitmqBrokerParametersCredentialsInput` via:
//
//	PipeSourceParametersRabbitmqBrokerParametersCredentialsArgs{...}
type PipeSourceParametersRabbitmqBrokerParametersCredentialsInput interface {
	pulumi.Input

	ToPipeSourceParametersRabbitmqBrokerParametersCredentialsOutput() PipeSourceParametersRabbitmqBrokerParametersCredentialsOutput
	ToPipeSourceParametersRabbitmqBrokerParametersCredentialsOutputWithContext(context.Context) PipeSourceParametersRabbitmqBrokerParametersCredentialsOutput
}

type PipeSourceParametersRabbitmqBrokerParametersCredentialsArgs struct {
	// The ARN of the Secrets Manager secret containing the credentials.
	BasicAuth pulumi.StringInput `pulumi:"basicAuth"`
}

func (PipeSourceParametersRabbitmqBrokerParametersCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersRabbitmqBrokerParametersCredentials)(nil)).Elem()
}

func (i PipeSourceParametersRabbitmqBrokerParametersCredentialsArgs) ToPipeSourceParametersRabbitmqBrokerParametersCredentialsOutput() PipeSourceParametersRabbitmqBrokerParametersCredentialsOutput {
	return i.ToPipeSourceParametersRabbitmqBrokerParametersCredentialsOutputWithContext(context.Background())
}

func (i PipeSourceParametersRabbitmqBrokerParametersCredentialsArgs) ToPipeSourceParametersRabbitmqBrokerParametersCredentialsOutputWithContext(ctx context.Context) PipeSourceParametersRabbitmqBrokerParametersCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersRabbitmqBrokerParametersCredentialsOutput)
}

func (i PipeSourceParametersRabbitmqBrokerParametersCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersRabbitmqBrokerParametersCredentials] {
	return pulumix.Output[PipeSourceParametersRabbitmqBrokerParametersCredentials]{
		OutputState: i.ToPipeSourceParametersRabbitmqBrokerParametersCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i PipeSourceParametersRabbitmqBrokerParametersCredentialsArgs) ToPipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutput() PipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutput {
	return i.ToPipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutputWithContext(context.Background())
}

func (i PipeSourceParametersRabbitmqBrokerParametersCredentialsArgs) ToPipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutputWithContext(ctx context.Context) PipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersRabbitmqBrokerParametersCredentialsOutput).ToPipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutputWithContext(ctx)
}

// PipeSourceParametersRabbitmqBrokerParametersCredentialsPtrInput is an input type that accepts PipeSourceParametersRabbitmqBrokerParametersCredentialsArgs, PipeSourceParametersRabbitmqBrokerParametersCredentialsPtr and PipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutput values.
// You can construct a concrete instance of `PipeSourceParametersRabbitmqBrokerParametersCredentialsPtrInput` via:
//
//	        PipeSourceParametersRabbitmqBrokerParametersCredentialsArgs{...}
//
//	or:
//
//	        nil
type PipeSourceParametersRabbitmqBrokerParametersCredentialsPtrInput interface {
	pulumi.Input

	ToPipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutput() PipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutput
	ToPipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutputWithContext(context.Context) PipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutput
}

type pipeSourceParametersRabbitmqBrokerParametersCredentialsPtrType PipeSourceParametersRabbitmqBrokerParametersCredentialsArgs

func PipeSourceParametersRabbitmqBrokerParametersCredentialsPtr(v *PipeSourceParametersRabbitmqBrokerParametersCredentialsArgs) PipeSourceParametersRabbitmqBrokerParametersCredentialsPtrInput {
	return (*pipeSourceParametersRabbitmqBrokerParametersCredentialsPtrType)(v)
}

func (*pipeSourceParametersRabbitmqBrokerParametersCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParametersRabbitmqBrokerParametersCredentials)(nil)).Elem()
}

func (i *pipeSourceParametersRabbitmqBrokerParametersCredentialsPtrType) ToPipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutput() PipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutput {
	return i.ToPipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutputWithContext(context.Background())
}

func (i *pipeSourceParametersRabbitmqBrokerParametersCredentialsPtrType) ToPipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutputWithContext(ctx context.Context) PipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutput)
}

func (i *pipeSourceParametersRabbitmqBrokerParametersCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersRabbitmqBrokerParametersCredentials] {
	return pulumix.Output[*PipeSourceParametersRabbitmqBrokerParametersCredentials]{
		OutputState: i.ToPipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeSourceParametersRabbitmqBrokerParametersCredentialsOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersRabbitmqBrokerParametersCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersRabbitmqBrokerParametersCredentials)(nil)).Elem()
}

func (o PipeSourceParametersRabbitmqBrokerParametersCredentialsOutput) ToPipeSourceParametersRabbitmqBrokerParametersCredentialsOutput() PipeSourceParametersRabbitmqBrokerParametersCredentialsOutput {
	return o
}

func (o PipeSourceParametersRabbitmqBrokerParametersCredentialsOutput) ToPipeSourceParametersRabbitmqBrokerParametersCredentialsOutputWithContext(ctx context.Context) PipeSourceParametersRabbitmqBrokerParametersCredentialsOutput {
	return o
}

func (o PipeSourceParametersRabbitmqBrokerParametersCredentialsOutput) ToPipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutput() PipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutput {
	return o.ToPipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutputWithContext(context.Background())
}

func (o PipeSourceParametersRabbitmqBrokerParametersCredentialsOutput) ToPipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutputWithContext(ctx context.Context) PipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeSourceParametersRabbitmqBrokerParametersCredentials) *PipeSourceParametersRabbitmqBrokerParametersCredentials {
		return &v
	}).(PipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutput)
}

func (o PipeSourceParametersRabbitmqBrokerParametersCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersRabbitmqBrokerParametersCredentials] {
	return pulumix.Output[PipeSourceParametersRabbitmqBrokerParametersCredentials]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Secrets Manager secret containing the credentials.
func (o PipeSourceParametersRabbitmqBrokerParametersCredentialsOutput) BasicAuth() pulumi.StringOutput {
	return o.ApplyT(func(v PipeSourceParametersRabbitmqBrokerParametersCredentials) string { return v.BasicAuth }).(pulumi.StringOutput)
}

type PipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParametersRabbitmqBrokerParametersCredentials)(nil)).Elem()
}

func (o PipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutput) ToPipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutput() PipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutput {
	return o
}

func (o PipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutput) ToPipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutputWithContext(ctx context.Context) PipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutput {
	return o
}

func (o PipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersRabbitmqBrokerParametersCredentials] {
	return pulumix.Output[*PipeSourceParametersRabbitmqBrokerParametersCredentials]{
		OutputState: o.OutputState,
	}
}

func (o PipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutput) Elem() PipeSourceParametersRabbitmqBrokerParametersCredentialsOutput {
	return o.ApplyT(func(v *PipeSourceParametersRabbitmqBrokerParametersCredentials) PipeSourceParametersRabbitmqBrokerParametersCredentials {
		if v != nil {
			return *v
		}
		var ret PipeSourceParametersRabbitmqBrokerParametersCredentials
		return ret
	}).(PipeSourceParametersRabbitmqBrokerParametersCredentialsOutput)
}

// The ARN of the Secrets Manager secret containing the credentials.
func (o PipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutput) BasicAuth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersRabbitmqBrokerParametersCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.BasicAuth
	}).(pulumi.StringPtrOutput)
}

type PipeSourceParametersSelfManagedKafkaParameters struct {
	// An array of server URLs. Maximum number of 2 items, each of maximum length 300.
	AdditionalBootstrapServers []string `pulumi:"additionalBootstrapServers"`
	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize *int `pulumi:"batchSize"`
	// The name of the destination queue to consume. Maximum value of 200.
	ConsumerGroupId *string `pulumi:"consumerGroupId"`
	// The credentials needed to access the resource. Detailed below.
	Credentials *PipeSourceParametersSelfManagedKafkaParametersCredentials `pulumi:"credentials"`
	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds *int `pulumi:"maximumBatchingWindowInSeconds"`
	// The ARN of the Secrets Manager secret used for certification.
	ServerRootCaCertificate *string `pulumi:"serverRootCaCertificate"`
	// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
	StartingPosition *string `pulumi:"startingPosition"`
	// The name of the topic that the pipe will read from. Maximum length of 249.
	TopicName string `pulumi:"topicName"`
	// This structure specifies the VPC subnets and security groups for the stream, and whether a public IP address is to be used. Detailed below.
	Vpc *PipeSourceParametersSelfManagedKafkaParametersVpc `pulumi:"vpc"`
}

// PipeSourceParametersSelfManagedKafkaParametersInput is an input type that accepts PipeSourceParametersSelfManagedKafkaParametersArgs and PipeSourceParametersSelfManagedKafkaParametersOutput values.
// You can construct a concrete instance of `PipeSourceParametersSelfManagedKafkaParametersInput` via:
//
//	PipeSourceParametersSelfManagedKafkaParametersArgs{...}
type PipeSourceParametersSelfManagedKafkaParametersInput interface {
	pulumi.Input

	ToPipeSourceParametersSelfManagedKafkaParametersOutput() PipeSourceParametersSelfManagedKafkaParametersOutput
	ToPipeSourceParametersSelfManagedKafkaParametersOutputWithContext(context.Context) PipeSourceParametersSelfManagedKafkaParametersOutput
}

type PipeSourceParametersSelfManagedKafkaParametersArgs struct {
	// An array of server URLs. Maximum number of 2 items, each of maximum length 300.
	AdditionalBootstrapServers pulumi.StringArrayInput `pulumi:"additionalBootstrapServers"`
	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize pulumi.IntPtrInput `pulumi:"batchSize"`
	// The name of the destination queue to consume. Maximum value of 200.
	ConsumerGroupId pulumi.StringPtrInput `pulumi:"consumerGroupId"`
	// The credentials needed to access the resource. Detailed below.
	Credentials PipeSourceParametersSelfManagedKafkaParametersCredentialsPtrInput `pulumi:"credentials"`
	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds pulumi.IntPtrInput `pulumi:"maximumBatchingWindowInSeconds"`
	// The ARN of the Secrets Manager secret used for certification.
	ServerRootCaCertificate pulumi.StringPtrInput `pulumi:"serverRootCaCertificate"`
	// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
	StartingPosition pulumi.StringPtrInput `pulumi:"startingPosition"`
	// The name of the topic that the pipe will read from. Maximum length of 249.
	TopicName pulumi.StringInput `pulumi:"topicName"`
	// This structure specifies the VPC subnets and security groups for the stream, and whether a public IP address is to be used. Detailed below.
	Vpc PipeSourceParametersSelfManagedKafkaParametersVpcPtrInput `pulumi:"vpc"`
}

func (PipeSourceParametersSelfManagedKafkaParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersSelfManagedKafkaParameters)(nil)).Elem()
}

func (i PipeSourceParametersSelfManagedKafkaParametersArgs) ToPipeSourceParametersSelfManagedKafkaParametersOutput() PipeSourceParametersSelfManagedKafkaParametersOutput {
	return i.ToPipeSourceParametersSelfManagedKafkaParametersOutputWithContext(context.Background())
}

func (i PipeSourceParametersSelfManagedKafkaParametersArgs) ToPipeSourceParametersSelfManagedKafkaParametersOutputWithContext(ctx context.Context) PipeSourceParametersSelfManagedKafkaParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersSelfManagedKafkaParametersOutput)
}

func (i PipeSourceParametersSelfManagedKafkaParametersArgs) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersSelfManagedKafkaParameters] {
	return pulumix.Output[PipeSourceParametersSelfManagedKafkaParameters]{
		OutputState: i.ToPipeSourceParametersSelfManagedKafkaParametersOutputWithContext(ctx).OutputState,
	}
}

func (i PipeSourceParametersSelfManagedKafkaParametersArgs) ToPipeSourceParametersSelfManagedKafkaParametersPtrOutput() PipeSourceParametersSelfManagedKafkaParametersPtrOutput {
	return i.ToPipeSourceParametersSelfManagedKafkaParametersPtrOutputWithContext(context.Background())
}

func (i PipeSourceParametersSelfManagedKafkaParametersArgs) ToPipeSourceParametersSelfManagedKafkaParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersSelfManagedKafkaParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersSelfManagedKafkaParametersOutput).ToPipeSourceParametersSelfManagedKafkaParametersPtrOutputWithContext(ctx)
}

// PipeSourceParametersSelfManagedKafkaParametersPtrInput is an input type that accepts PipeSourceParametersSelfManagedKafkaParametersArgs, PipeSourceParametersSelfManagedKafkaParametersPtr and PipeSourceParametersSelfManagedKafkaParametersPtrOutput values.
// You can construct a concrete instance of `PipeSourceParametersSelfManagedKafkaParametersPtrInput` via:
//
//	        PipeSourceParametersSelfManagedKafkaParametersArgs{...}
//
//	or:
//
//	        nil
type PipeSourceParametersSelfManagedKafkaParametersPtrInput interface {
	pulumi.Input

	ToPipeSourceParametersSelfManagedKafkaParametersPtrOutput() PipeSourceParametersSelfManagedKafkaParametersPtrOutput
	ToPipeSourceParametersSelfManagedKafkaParametersPtrOutputWithContext(context.Context) PipeSourceParametersSelfManagedKafkaParametersPtrOutput
}

type pipeSourceParametersSelfManagedKafkaParametersPtrType PipeSourceParametersSelfManagedKafkaParametersArgs

func PipeSourceParametersSelfManagedKafkaParametersPtr(v *PipeSourceParametersSelfManagedKafkaParametersArgs) PipeSourceParametersSelfManagedKafkaParametersPtrInput {
	return (*pipeSourceParametersSelfManagedKafkaParametersPtrType)(v)
}

func (*pipeSourceParametersSelfManagedKafkaParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParametersSelfManagedKafkaParameters)(nil)).Elem()
}

func (i *pipeSourceParametersSelfManagedKafkaParametersPtrType) ToPipeSourceParametersSelfManagedKafkaParametersPtrOutput() PipeSourceParametersSelfManagedKafkaParametersPtrOutput {
	return i.ToPipeSourceParametersSelfManagedKafkaParametersPtrOutputWithContext(context.Background())
}

func (i *pipeSourceParametersSelfManagedKafkaParametersPtrType) ToPipeSourceParametersSelfManagedKafkaParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersSelfManagedKafkaParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersSelfManagedKafkaParametersPtrOutput)
}

func (i *pipeSourceParametersSelfManagedKafkaParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersSelfManagedKafkaParameters] {
	return pulumix.Output[*PipeSourceParametersSelfManagedKafkaParameters]{
		OutputState: i.ToPipeSourceParametersSelfManagedKafkaParametersPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeSourceParametersSelfManagedKafkaParametersOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersSelfManagedKafkaParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersSelfManagedKafkaParameters)(nil)).Elem()
}

func (o PipeSourceParametersSelfManagedKafkaParametersOutput) ToPipeSourceParametersSelfManagedKafkaParametersOutput() PipeSourceParametersSelfManagedKafkaParametersOutput {
	return o
}

func (o PipeSourceParametersSelfManagedKafkaParametersOutput) ToPipeSourceParametersSelfManagedKafkaParametersOutputWithContext(ctx context.Context) PipeSourceParametersSelfManagedKafkaParametersOutput {
	return o
}

func (o PipeSourceParametersSelfManagedKafkaParametersOutput) ToPipeSourceParametersSelfManagedKafkaParametersPtrOutput() PipeSourceParametersSelfManagedKafkaParametersPtrOutput {
	return o.ToPipeSourceParametersSelfManagedKafkaParametersPtrOutputWithContext(context.Background())
}

func (o PipeSourceParametersSelfManagedKafkaParametersOutput) ToPipeSourceParametersSelfManagedKafkaParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersSelfManagedKafkaParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeSourceParametersSelfManagedKafkaParameters) *PipeSourceParametersSelfManagedKafkaParameters {
		return &v
	}).(PipeSourceParametersSelfManagedKafkaParametersPtrOutput)
}

func (o PipeSourceParametersSelfManagedKafkaParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersSelfManagedKafkaParameters] {
	return pulumix.Output[PipeSourceParametersSelfManagedKafkaParameters]{
		OutputState: o.OutputState,
	}
}

// An array of server URLs. Maximum number of 2 items, each of maximum length 300.
func (o PipeSourceParametersSelfManagedKafkaParametersOutput) AdditionalBootstrapServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipeSourceParametersSelfManagedKafkaParameters) []string { return v.AdditionalBootstrapServers }).(pulumi.StringArrayOutput)
}

// The maximum number of records to include in each batch. Maximum value of 10000.
func (o PipeSourceParametersSelfManagedKafkaParametersOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersSelfManagedKafkaParameters) *int { return v.BatchSize }).(pulumi.IntPtrOutput)
}

// The name of the destination queue to consume. Maximum value of 200.
func (o PipeSourceParametersSelfManagedKafkaParametersOutput) ConsumerGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersSelfManagedKafkaParameters) *string { return v.ConsumerGroupId }).(pulumi.StringPtrOutput)
}

// The credentials needed to access the resource. Detailed below.
func (o PipeSourceParametersSelfManagedKafkaParametersOutput) Credentials() PipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersSelfManagedKafkaParameters) *PipeSourceParametersSelfManagedKafkaParametersCredentials {
		return v.Credentials
	}).(PipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutput)
}

// The maximum length of a time to wait for events. Maximum value of 300.
func (o PipeSourceParametersSelfManagedKafkaParametersOutput) MaximumBatchingWindowInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersSelfManagedKafkaParameters) *int { return v.MaximumBatchingWindowInSeconds }).(pulumi.IntPtrOutput)
}

// The ARN of the Secrets Manager secret used for certification.
func (o PipeSourceParametersSelfManagedKafkaParametersOutput) ServerRootCaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersSelfManagedKafkaParameters) *string { return v.ServerRootCaCertificate }).(pulumi.StringPtrOutput)
}

// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
func (o PipeSourceParametersSelfManagedKafkaParametersOutput) StartingPosition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersSelfManagedKafkaParameters) *string { return v.StartingPosition }).(pulumi.StringPtrOutput)
}

// The name of the topic that the pipe will read from. Maximum length of 249.
func (o PipeSourceParametersSelfManagedKafkaParametersOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v PipeSourceParametersSelfManagedKafkaParameters) string { return v.TopicName }).(pulumi.StringOutput)
}

// This structure specifies the VPC subnets and security groups for the stream, and whether a public IP address is to be used. Detailed below.
func (o PipeSourceParametersSelfManagedKafkaParametersOutput) Vpc() PipeSourceParametersSelfManagedKafkaParametersVpcPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersSelfManagedKafkaParameters) *PipeSourceParametersSelfManagedKafkaParametersVpc {
		return v.Vpc
	}).(PipeSourceParametersSelfManagedKafkaParametersVpcPtrOutput)
}

type PipeSourceParametersSelfManagedKafkaParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersSelfManagedKafkaParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParametersSelfManagedKafkaParameters)(nil)).Elem()
}

func (o PipeSourceParametersSelfManagedKafkaParametersPtrOutput) ToPipeSourceParametersSelfManagedKafkaParametersPtrOutput() PipeSourceParametersSelfManagedKafkaParametersPtrOutput {
	return o
}

func (o PipeSourceParametersSelfManagedKafkaParametersPtrOutput) ToPipeSourceParametersSelfManagedKafkaParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersSelfManagedKafkaParametersPtrOutput {
	return o
}

func (o PipeSourceParametersSelfManagedKafkaParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersSelfManagedKafkaParameters] {
	return pulumix.Output[*PipeSourceParametersSelfManagedKafkaParameters]{
		OutputState: o.OutputState,
	}
}

func (o PipeSourceParametersSelfManagedKafkaParametersPtrOutput) Elem() PipeSourceParametersSelfManagedKafkaParametersOutput {
	return o.ApplyT(func(v *PipeSourceParametersSelfManagedKafkaParameters) PipeSourceParametersSelfManagedKafkaParameters {
		if v != nil {
			return *v
		}
		var ret PipeSourceParametersSelfManagedKafkaParameters
		return ret
	}).(PipeSourceParametersSelfManagedKafkaParametersOutput)
}

// An array of server URLs. Maximum number of 2 items, each of maximum length 300.
func (o PipeSourceParametersSelfManagedKafkaParametersPtrOutput) AdditionalBootstrapServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PipeSourceParametersSelfManagedKafkaParameters) []string {
		if v == nil {
			return nil
		}
		return v.AdditionalBootstrapServers
	}).(pulumi.StringArrayOutput)
}

// The maximum number of records to include in each batch. Maximum value of 10000.
func (o PipeSourceParametersSelfManagedKafkaParametersPtrOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersSelfManagedKafkaParameters) *int {
		if v == nil {
			return nil
		}
		return v.BatchSize
	}).(pulumi.IntPtrOutput)
}

// The name of the destination queue to consume. Maximum value of 200.
func (o PipeSourceParametersSelfManagedKafkaParametersPtrOutput) ConsumerGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersSelfManagedKafkaParameters) *string {
		if v == nil {
			return nil
		}
		return v.ConsumerGroupId
	}).(pulumi.StringPtrOutput)
}

// The credentials needed to access the resource. Detailed below.
func (o PipeSourceParametersSelfManagedKafkaParametersPtrOutput) Credentials() PipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersSelfManagedKafkaParameters) *PipeSourceParametersSelfManagedKafkaParametersCredentials {
		if v == nil {
			return nil
		}
		return v.Credentials
	}).(PipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutput)
}

// The maximum length of a time to wait for events. Maximum value of 300.
func (o PipeSourceParametersSelfManagedKafkaParametersPtrOutput) MaximumBatchingWindowInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersSelfManagedKafkaParameters) *int {
		if v == nil {
			return nil
		}
		return v.MaximumBatchingWindowInSeconds
	}).(pulumi.IntPtrOutput)
}

// The ARN of the Secrets Manager secret used for certification.
func (o PipeSourceParametersSelfManagedKafkaParametersPtrOutput) ServerRootCaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersSelfManagedKafkaParameters) *string {
		if v == nil {
			return nil
		}
		return v.ServerRootCaCertificate
	}).(pulumi.StringPtrOutput)
}

// The position in a stream from which to start reading. Valid values: TRIM_HORIZON, LATEST.
func (o PipeSourceParametersSelfManagedKafkaParametersPtrOutput) StartingPosition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersSelfManagedKafkaParameters) *string {
		if v == nil {
			return nil
		}
		return v.StartingPosition
	}).(pulumi.StringPtrOutput)
}

// The name of the topic that the pipe will read from. Maximum length of 249.
func (o PipeSourceParametersSelfManagedKafkaParametersPtrOutput) TopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersSelfManagedKafkaParameters) *string {
		if v == nil {
			return nil
		}
		return &v.TopicName
	}).(pulumi.StringPtrOutput)
}

// This structure specifies the VPC subnets and security groups for the stream, and whether a public IP address is to be used. Detailed below.
func (o PipeSourceParametersSelfManagedKafkaParametersPtrOutput) Vpc() PipeSourceParametersSelfManagedKafkaParametersVpcPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersSelfManagedKafkaParameters) *PipeSourceParametersSelfManagedKafkaParametersVpc {
		if v == nil {
			return nil
		}
		return v.Vpc
	}).(PipeSourceParametersSelfManagedKafkaParametersVpcPtrOutput)
}

type PipeSourceParametersSelfManagedKafkaParametersCredentials struct {
	// The ARN of the Secrets Manager secret containing the credentials.
	BasicAuth string `pulumi:"basicAuth"`
	// The ARN of the Secrets Manager secret containing the credentials.
	ClientCertificateTlsAuth *string `pulumi:"clientCertificateTlsAuth"`
	// The ARN of the Secrets Manager secret containing the credentials.
	SaslScram256Auth *string `pulumi:"saslScram256Auth"`
	// The ARN of the Secrets Manager secret containing the credentials.
	SaslScram512Auth *string `pulumi:"saslScram512Auth"`
}

// PipeSourceParametersSelfManagedKafkaParametersCredentialsInput is an input type that accepts PipeSourceParametersSelfManagedKafkaParametersCredentialsArgs and PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput values.
// You can construct a concrete instance of `PipeSourceParametersSelfManagedKafkaParametersCredentialsInput` via:
//
//	PipeSourceParametersSelfManagedKafkaParametersCredentialsArgs{...}
type PipeSourceParametersSelfManagedKafkaParametersCredentialsInput interface {
	pulumi.Input

	ToPipeSourceParametersSelfManagedKafkaParametersCredentialsOutput() PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput
	ToPipeSourceParametersSelfManagedKafkaParametersCredentialsOutputWithContext(context.Context) PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput
}

type PipeSourceParametersSelfManagedKafkaParametersCredentialsArgs struct {
	// The ARN of the Secrets Manager secret containing the credentials.
	BasicAuth pulumi.StringInput `pulumi:"basicAuth"`
	// The ARN of the Secrets Manager secret containing the credentials.
	ClientCertificateTlsAuth pulumi.StringPtrInput `pulumi:"clientCertificateTlsAuth"`
	// The ARN of the Secrets Manager secret containing the credentials.
	SaslScram256Auth pulumi.StringPtrInput `pulumi:"saslScram256Auth"`
	// The ARN of the Secrets Manager secret containing the credentials.
	SaslScram512Auth pulumi.StringPtrInput `pulumi:"saslScram512Auth"`
}

func (PipeSourceParametersSelfManagedKafkaParametersCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersSelfManagedKafkaParametersCredentials)(nil)).Elem()
}

func (i PipeSourceParametersSelfManagedKafkaParametersCredentialsArgs) ToPipeSourceParametersSelfManagedKafkaParametersCredentialsOutput() PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput {
	return i.ToPipeSourceParametersSelfManagedKafkaParametersCredentialsOutputWithContext(context.Background())
}

func (i PipeSourceParametersSelfManagedKafkaParametersCredentialsArgs) ToPipeSourceParametersSelfManagedKafkaParametersCredentialsOutputWithContext(ctx context.Context) PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput)
}

func (i PipeSourceParametersSelfManagedKafkaParametersCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersSelfManagedKafkaParametersCredentials] {
	return pulumix.Output[PipeSourceParametersSelfManagedKafkaParametersCredentials]{
		OutputState: i.ToPipeSourceParametersSelfManagedKafkaParametersCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i PipeSourceParametersSelfManagedKafkaParametersCredentialsArgs) ToPipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutput() PipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutput {
	return i.ToPipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutputWithContext(context.Background())
}

func (i PipeSourceParametersSelfManagedKafkaParametersCredentialsArgs) ToPipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutputWithContext(ctx context.Context) PipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput).ToPipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutputWithContext(ctx)
}

// PipeSourceParametersSelfManagedKafkaParametersCredentialsPtrInput is an input type that accepts PipeSourceParametersSelfManagedKafkaParametersCredentialsArgs, PipeSourceParametersSelfManagedKafkaParametersCredentialsPtr and PipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutput values.
// You can construct a concrete instance of `PipeSourceParametersSelfManagedKafkaParametersCredentialsPtrInput` via:
//
//	        PipeSourceParametersSelfManagedKafkaParametersCredentialsArgs{...}
//
//	or:
//
//	        nil
type PipeSourceParametersSelfManagedKafkaParametersCredentialsPtrInput interface {
	pulumi.Input

	ToPipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutput() PipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutput
	ToPipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutputWithContext(context.Context) PipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutput
}

type pipeSourceParametersSelfManagedKafkaParametersCredentialsPtrType PipeSourceParametersSelfManagedKafkaParametersCredentialsArgs

func PipeSourceParametersSelfManagedKafkaParametersCredentialsPtr(v *PipeSourceParametersSelfManagedKafkaParametersCredentialsArgs) PipeSourceParametersSelfManagedKafkaParametersCredentialsPtrInput {
	return (*pipeSourceParametersSelfManagedKafkaParametersCredentialsPtrType)(v)
}

func (*pipeSourceParametersSelfManagedKafkaParametersCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParametersSelfManagedKafkaParametersCredentials)(nil)).Elem()
}

func (i *pipeSourceParametersSelfManagedKafkaParametersCredentialsPtrType) ToPipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutput() PipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutput {
	return i.ToPipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutputWithContext(context.Background())
}

func (i *pipeSourceParametersSelfManagedKafkaParametersCredentialsPtrType) ToPipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutputWithContext(ctx context.Context) PipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutput)
}

func (i *pipeSourceParametersSelfManagedKafkaParametersCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersSelfManagedKafkaParametersCredentials] {
	return pulumix.Output[*PipeSourceParametersSelfManagedKafkaParametersCredentials]{
		OutputState: i.ToPipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersSelfManagedKafkaParametersCredentials)(nil)).Elem()
}

func (o PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput) ToPipeSourceParametersSelfManagedKafkaParametersCredentialsOutput() PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput {
	return o
}

func (o PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput) ToPipeSourceParametersSelfManagedKafkaParametersCredentialsOutputWithContext(ctx context.Context) PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput {
	return o
}

func (o PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput) ToPipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutput() PipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutput {
	return o.ToPipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutputWithContext(context.Background())
}

func (o PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput) ToPipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutputWithContext(ctx context.Context) PipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeSourceParametersSelfManagedKafkaParametersCredentials) *PipeSourceParametersSelfManagedKafkaParametersCredentials {
		return &v
	}).(PipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutput)
}

func (o PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersSelfManagedKafkaParametersCredentials] {
	return pulumix.Output[PipeSourceParametersSelfManagedKafkaParametersCredentials]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Secrets Manager secret containing the credentials.
func (o PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput) BasicAuth() pulumi.StringOutput {
	return o.ApplyT(func(v PipeSourceParametersSelfManagedKafkaParametersCredentials) string { return v.BasicAuth }).(pulumi.StringOutput)
}

// The ARN of the Secrets Manager secret containing the credentials.
func (o PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput) ClientCertificateTlsAuth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersSelfManagedKafkaParametersCredentials) *string {
		return v.ClientCertificateTlsAuth
	}).(pulumi.StringPtrOutput)
}

// The ARN of the Secrets Manager secret containing the credentials.
func (o PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput) SaslScram256Auth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersSelfManagedKafkaParametersCredentials) *string { return v.SaslScram256Auth }).(pulumi.StringPtrOutput)
}

// The ARN of the Secrets Manager secret containing the credentials.
func (o PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput) SaslScram512Auth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersSelfManagedKafkaParametersCredentials) *string { return v.SaslScram512Auth }).(pulumi.StringPtrOutput)
}

type PipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParametersSelfManagedKafkaParametersCredentials)(nil)).Elem()
}

func (o PipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutput) ToPipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutput() PipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutput {
	return o
}

func (o PipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutput) ToPipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutputWithContext(ctx context.Context) PipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutput {
	return o
}

func (o PipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersSelfManagedKafkaParametersCredentials] {
	return pulumix.Output[*PipeSourceParametersSelfManagedKafkaParametersCredentials]{
		OutputState: o.OutputState,
	}
}

func (o PipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutput) Elem() PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput {
	return o.ApplyT(func(v *PipeSourceParametersSelfManagedKafkaParametersCredentials) PipeSourceParametersSelfManagedKafkaParametersCredentials {
		if v != nil {
			return *v
		}
		var ret PipeSourceParametersSelfManagedKafkaParametersCredentials
		return ret
	}).(PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput)
}

// The ARN of the Secrets Manager secret containing the credentials.
func (o PipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutput) BasicAuth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersSelfManagedKafkaParametersCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.BasicAuth
	}).(pulumi.StringPtrOutput)
}

// The ARN of the Secrets Manager secret containing the credentials.
func (o PipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutput) ClientCertificateTlsAuth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersSelfManagedKafkaParametersCredentials) *string {
		if v == nil {
			return nil
		}
		return v.ClientCertificateTlsAuth
	}).(pulumi.StringPtrOutput)
}

// The ARN of the Secrets Manager secret containing the credentials.
func (o PipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutput) SaslScram256Auth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersSelfManagedKafkaParametersCredentials) *string {
		if v == nil {
			return nil
		}
		return v.SaslScram256Auth
	}).(pulumi.StringPtrOutput)
}

// The ARN of the Secrets Manager secret containing the credentials.
func (o PipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutput) SaslScram512Auth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersSelfManagedKafkaParametersCredentials) *string {
		if v == nil {
			return nil
		}
		return v.SaslScram512Auth
	}).(pulumi.StringPtrOutput)
}

type PipeSourceParametersSelfManagedKafkaParametersVpc struct {
	// List of security groups associated with the stream. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.
	SecurityGroups []string `pulumi:"securityGroups"`
	// List of the subnets associated with the stream. These subnets must all be in the same VPC. You can specify as many as 16 subnets.
	Subnets []string `pulumi:"subnets"`
}

// PipeSourceParametersSelfManagedKafkaParametersVpcInput is an input type that accepts PipeSourceParametersSelfManagedKafkaParametersVpcArgs and PipeSourceParametersSelfManagedKafkaParametersVpcOutput values.
// You can construct a concrete instance of `PipeSourceParametersSelfManagedKafkaParametersVpcInput` via:
//
//	PipeSourceParametersSelfManagedKafkaParametersVpcArgs{...}
type PipeSourceParametersSelfManagedKafkaParametersVpcInput interface {
	pulumi.Input

	ToPipeSourceParametersSelfManagedKafkaParametersVpcOutput() PipeSourceParametersSelfManagedKafkaParametersVpcOutput
	ToPipeSourceParametersSelfManagedKafkaParametersVpcOutputWithContext(context.Context) PipeSourceParametersSelfManagedKafkaParametersVpcOutput
}

type PipeSourceParametersSelfManagedKafkaParametersVpcArgs struct {
	// List of security groups associated with the stream. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.
	SecurityGroups pulumi.StringArrayInput `pulumi:"securityGroups"`
	// List of the subnets associated with the stream. These subnets must all be in the same VPC. You can specify as many as 16 subnets.
	Subnets pulumi.StringArrayInput `pulumi:"subnets"`
}

func (PipeSourceParametersSelfManagedKafkaParametersVpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersSelfManagedKafkaParametersVpc)(nil)).Elem()
}

func (i PipeSourceParametersSelfManagedKafkaParametersVpcArgs) ToPipeSourceParametersSelfManagedKafkaParametersVpcOutput() PipeSourceParametersSelfManagedKafkaParametersVpcOutput {
	return i.ToPipeSourceParametersSelfManagedKafkaParametersVpcOutputWithContext(context.Background())
}

func (i PipeSourceParametersSelfManagedKafkaParametersVpcArgs) ToPipeSourceParametersSelfManagedKafkaParametersVpcOutputWithContext(ctx context.Context) PipeSourceParametersSelfManagedKafkaParametersVpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersSelfManagedKafkaParametersVpcOutput)
}

func (i PipeSourceParametersSelfManagedKafkaParametersVpcArgs) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersSelfManagedKafkaParametersVpc] {
	return pulumix.Output[PipeSourceParametersSelfManagedKafkaParametersVpc]{
		OutputState: i.ToPipeSourceParametersSelfManagedKafkaParametersVpcOutputWithContext(ctx).OutputState,
	}
}

func (i PipeSourceParametersSelfManagedKafkaParametersVpcArgs) ToPipeSourceParametersSelfManagedKafkaParametersVpcPtrOutput() PipeSourceParametersSelfManagedKafkaParametersVpcPtrOutput {
	return i.ToPipeSourceParametersSelfManagedKafkaParametersVpcPtrOutputWithContext(context.Background())
}

func (i PipeSourceParametersSelfManagedKafkaParametersVpcArgs) ToPipeSourceParametersSelfManagedKafkaParametersVpcPtrOutputWithContext(ctx context.Context) PipeSourceParametersSelfManagedKafkaParametersVpcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersSelfManagedKafkaParametersVpcOutput).ToPipeSourceParametersSelfManagedKafkaParametersVpcPtrOutputWithContext(ctx)
}

// PipeSourceParametersSelfManagedKafkaParametersVpcPtrInput is an input type that accepts PipeSourceParametersSelfManagedKafkaParametersVpcArgs, PipeSourceParametersSelfManagedKafkaParametersVpcPtr and PipeSourceParametersSelfManagedKafkaParametersVpcPtrOutput values.
// You can construct a concrete instance of `PipeSourceParametersSelfManagedKafkaParametersVpcPtrInput` via:
//
//	        PipeSourceParametersSelfManagedKafkaParametersVpcArgs{...}
//
//	or:
//
//	        nil
type PipeSourceParametersSelfManagedKafkaParametersVpcPtrInput interface {
	pulumi.Input

	ToPipeSourceParametersSelfManagedKafkaParametersVpcPtrOutput() PipeSourceParametersSelfManagedKafkaParametersVpcPtrOutput
	ToPipeSourceParametersSelfManagedKafkaParametersVpcPtrOutputWithContext(context.Context) PipeSourceParametersSelfManagedKafkaParametersVpcPtrOutput
}

type pipeSourceParametersSelfManagedKafkaParametersVpcPtrType PipeSourceParametersSelfManagedKafkaParametersVpcArgs

func PipeSourceParametersSelfManagedKafkaParametersVpcPtr(v *PipeSourceParametersSelfManagedKafkaParametersVpcArgs) PipeSourceParametersSelfManagedKafkaParametersVpcPtrInput {
	return (*pipeSourceParametersSelfManagedKafkaParametersVpcPtrType)(v)
}

func (*pipeSourceParametersSelfManagedKafkaParametersVpcPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParametersSelfManagedKafkaParametersVpc)(nil)).Elem()
}

func (i *pipeSourceParametersSelfManagedKafkaParametersVpcPtrType) ToPipeSourceParametersSelfManagedKafkaParametersVpcPtrOutput() PipeSourceParametersSelfManagedKafkaParametersVpcPtrOutput {
	return i.ToPipeSourceParametersSelfManagedKafkaParametersVpcPtrOutputWithContext(context.Background())
}

func (i *pipeSourceParametersSelfManagedKafkaParametersVpcPtrType) ToPipeSourceParametersSelfManagedKafkaParametersVpcPtrOutputWithContext(ctx context.Context) PipeSourceParametersSelfManagedKafkaParametersVpcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersSelfManagedKafkaParametersVpcPtrOutput)
}

func (i *pipeSourceParametersSelfManagedKafkaParametersVpcPtrType) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersSelfManagedKafkaParametersVpc] {
	return pulumix.Output[*PipeSourceParametersSelfManagedKafkaParametersVpc]{
		OutputState: i.ToPipeSourceParametersSelfManagedKafkaParametersVpcPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeSourceParametersSelfManagedKafkaParametersVpcOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersSelfManagedKafkaParametersVpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersSelfManagedKafkaParametersVpc)(nil)).Elem()
}

func (o PipeSourceParametersSelfManagedKafkaParametersVpcOutput) ToPipeSourceParametersSelfManagedKafkaParametersVpcOutput() PipeSourceParametersSelfManagedKafkaParametersVpcOutput {
	return o
}

func (o PipeSourceParametersSelfManagedKafkaParametersVpcOutput) ToPipeSourceParametersSelfManagedKafkaParametersVpcOutputWithContext(ctx context.Context) PipeSourceParametersSelfManagedKafkaParametersVpcOutput {
	return o
}

func (o PipeSourceParametersSelfManagedKafkaParametersVpcOutput) ToPipeSourceParametersSelfManagedKafkaParametersVpcPtrOutput() PipeSourceParametersSelfManagedKafkaParametersVpcPtrOutput {
	return o.ToPipeSourceParametersSelfManagedKafkaParametersVpcPtrOutputWithContext(context.Background())
}

func (o PipeSourceParametersSelfManagedKafkaParametersVpcOutput) ToPipeSourceParametersSelfManagedKafkaParametersVpcPtrOutputWithContext(ctx context.Context) PipeSourceParametersSelfManagedKafkaParametersVpcPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeSourceParametersSelfManagedKafkaParametersVpc) *PipeSourceParametersSelfManagedKafkaParametersVpc {
		return &v
	}).(PipeSourceParametersSelfManagedKafkaParametersVpcPtrOutput)
}

func (o PipeSourceParametersSelfManagedKafkaParametersVpcOutput) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersSelfManagedKafkaParametersVpc] {
	return pulumix.Output[PipeSourceParametersSelfManagedKafkaParametersVpc]{
		OutputState: o.OutputState,
	}
}

// List of security groups associated with the stream. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.
func (o PipeSourceParametersSelfManagedKafkaParametersVpcOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipeSourceParametersSelfManagedKafkaParametersVpc) []string { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// List of the subnets associated with the stream. These subnets must all be in the same VPC. You can specify as many as 16 subnets.
func (o PipeSourceParametersSelfManagedKafkaParametersVpcOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipeSourceParametersSelfManagedKafkaParametersVpc) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

type PipeSourceParametersSelfManagedKafkaParametersVpcPtrOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersSelfManagedKafkaParametersVpcPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParametersSelfManagedKafkaParametersVpc)(nil)).Elem()
}

func (o PipeSourceParametersSelfManagedKafkaParametersVpcPtrOutput) ToPipeSourceParametersSelfManagedKafkaParametersVpcPtrOutput() PipeSourceParametersSelfManagedKafkaParametersVpcPtrOutput {
	return o
}

func (o PipeSourceParametersSelfManagedKafkaParametersVpcPtrOutput) ToPipeSourceParametersSelfManagedKafkaParametersVpcPtrOutputWithContext(ctx context.Context) PipeSourceParametersSelfManagedKafkaParametersVpcPtrOutput {
	return o
}

func (o PipeSourceParametersSelfManagedKafkaParametersVpcPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersSelfManagedKafkaParametersVpc] {
	return pulumix.Output[*PipeSourceParametersSelfManagedKafkaParametersVpc]{
		OutputState: o.OutputState,
	}
}

func (o PipeSourceParametersSelfManagedKafkaParametersVpcPtrOutput) Elem() PipeSourceParametersSelfManagedKafkaParametersVpcOutput {
	return o.ApplyT(func(v *PipeSourceParametersSelfManagedKafkaParametersVpc) PipeSourceParametersSelfManagedKafkaParametersVpc {
		if v != nil {
			return *v
		}
		var ret PipeSourceParametersSelfManagedKafkaParametersVpc
		return ret
	}).(PipeSourceParametersSelfManagedKafkaParametersVpcOutput)
}

// List of security groups associated with the stream. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.
func (o PipeSourceParametersSelfManagedKafkaParametersVpcPtrOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PipeSourceParametersSelfManagedKafkaParametersVpc) []string {
		if v == nil {
			return nil
		}
		return v.SecurityGroups
	}).(pulumi.StringArrayOutput)
}

// List of the subnets associated with the stream. These subnets must all be in the same VPC. You can specify as many as 16 subnets.
func (o PipeSourceParametersSelfManagedKafkaParametersVpcPtrOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PipeSourceParametersSelfManagedKafkaParametersVpc) []string {
		if v == nil {
			return nil
		}
		return v.Subnets
	}).(pulumi.StringArrayOutput)
}

type PipeSourceParametersSqsQueueParameters struct {
	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize *int `pulumi:"batchSize"`
	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds *int `pulumi:"maximumBatchingWindowInSeconds"`
}

// PipeSourceParametersSqsQueueParametersInput is an input type that accepts PipeSourceParametersSqsQueueParametersArgs and PipeSourceParametersSqsQueueParametersOutput values.
// You can construct a concrete instance of `PipeSourceParametersSqsQueueParametersInput` via:
//
//	PipeSourceParametersSqsQueueParametersArgs{...}
type PipeSourceParametersSqsQueueParametersInput interface {
	pulumi.Input

	ToPipeSourceParametersSqsQueueParametersOutput() PipeSourceParametersSqsQueueParametersOutput
	ToPipeSourceParametersSqsQueueParametersOutputWithContext(context.Context) PipeSourceParametersSqsQueueParametersOutput
}

type PipeSourceParametersSqsQueueParametersArgs struct {
	// The maximum number of records to include in each batch. Maximum value of 10000.
	BatchSize pulumi.IntPtrInput `pulumi:"batchSize"`
	// The maximum length of a time to wait for events. Maximum value of 300.
	MaximumBatchingWindowInSeconds pulumi.IntPtrInput `pulumi:"maximumBatchingWindowInSeconds"`
}

func (PipeSourceParametersSqsQueueParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersSqsQueueParameters)(nil)).Elem()
}

func (i PipeSourceParametersSqsQueueParametersArgs) ToPipeSourceParametersSqsQueueParametersOutput() PipeSourceParametersSqsQueueParametersOutput {
	return i.ToPipeSourceParametersSqsQueueParametersOutputWithContext(context.Background())
}

func (i PipeSourceParametersSqsQueueParametersArgs) ToPipeSourceParametersSqsQueueParametersOutputWithContext(ctx context.Context) PipeSourceParametersSqsQueueParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersSqsQueueParametersOutput)
}

func (i PipeSourceParametersSqsQueueParametersArgs) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersSqsQueueParameters] {
	return pulumix.Output[PipeSourceParametersSqsQueueParameters]{
		OutputState: i.ToPipeSourceParametersSqsQueueParametersOutputWithContext(ctx).OutputState,
	}
}

func (i PipeSourceParametersSqsQueueParametersArgs) ToPipeSourceParametersSqsQueueParametersPtrOutput() PipeSourceParametersSqsQueueParametersPtrOutput {
	return i.ToPipeSourceParametersSqsQueueParametersPtrOutputWithContext(context.Background())
}

func (i PipeSourceParametersSqsQueueParametersArgs) ToPipeSourceParametersSqsQueueParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersSqsQueueParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersSqsQueueParametersOutput).ToPipeSourceParametersSqsQueueParametersPtrOutputWithContext(ctx)
}

// PipeSourceParametersSqsQueueParametersPtrInput is an input type that accepts PipeSourceParametersSqsQueueParametersArgs, PipeSourceParametersSqsQueueParametersPtr and PipeSourceParametersSqsQueueParametersPtrOutput values.
// You can construct a concrete instance of `PipeSourceParametersSqsQueueParametersPtrInput` via:
//
//	        PipeSourceParametersSqsQueueParametersArgs{...}
//
//	or:
//
//	        nil
type PipeSourceParametersSqsQueueParametersPtrInput interface {
	pulumi.Input

	ToPipeSourceParametersSqsQueueParametersPtrOutput() PipeSourceParametersSqsQueueParametersPtrOutput
	ToPipeSourceParametersSqsQueueParametersPtrOutputWithContext(context.Context) PipeSourceParametersSqsQueueParametersPtrOutput
}

type pipeSourceParametersSqsQueueParametersPtrType PipeSourceParametersSqsQueueParametersArgs

func PipeSourceParametersSqsQueueParametersPtr(v *PipeSourceParametersSqsQueueParametersArgs) PipeSourceParametersSqsQueueParametersPtrInput {
	return (*pipeSourceParametersSqsQueueParametersPtrType)(v)
}

func (*pipeSourceParametersSqsQueueParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParametersSqsQueueParameters)(nil)).Elem()
}

func (i *pipeSourceParametersSqsQueueParametersPtrType) ToPipeSourceParametersSqsQueueParametersPtrOutput() PipeSourceParametersSqsQueueParametersPtrOutput {
	return i.ToPipeSourceParametersSqsQueueParametersPtrOutputWithContext(context.Background())
}

func (i *pipeSourceParametersSqsQueueParametersPtrType) ToPipeSourceParametersSqsQueueParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersSqsQueueParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersSqsQueueParametersPtrOutput)
}

func (i *pipeSourceParametersSqsQueueParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersSqsQueueParameters] {
	return pulumix.Output[*PipeSourceParametersSqsQueueParameters]{
		OutputState: i.ToPipeSourceParametersSqsQueueParametersPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeSourceParametersSqsQueueParametersOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersSqsQueueParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParametersSqsQueueParameters)(nil)).Elem()
}

func (o PipeSourceParametersSqsQueueParametersOutput) ToPipeSourceParametersSqsQueueParametersOutput() PipeSourceParametersSqsQueueParametersOutput {
	return o
}

func (o PipeSourceParametersSqsQueueParametersOutput) ToPipeSourceParametersSqsQueueParametersOutputWithContext(ctx context.Context) PipeSourceParametersSqsQueueParametersOutput {
	return o
}

func (o PipeSourceParametersSqsQueueParametersOutput) ToPipeSourceParametersSqsQueueParametersPtrOutput() PipeSourceParametersSqsQueueParametersPtrOutput {
	return o.ToPipeSourceParametersSqsQueueParametersPtrOutputWithContext(context.Background())
}

func (o PipeSourceParametersSqsQueueParametersOutput) ToPipeSourceParametersSqsQueueParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersSqsQueueParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeSourceParametersSqsQueueParameters) *PipeSourceParametersSqsQueueParameters {
		return &v
	}).(PipeSourceParametersSqsQueueParametersPtrOutput)
}

func (o PipeSourceParametersSqsQueueParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeSourceParametersSqsQueueParameters] {
	return pulumix.Output[PipeSourceParametersSqsQueueParameters]{
		OutputState: o.OutputState,
	}
}

// The maximum number of records to include in each batch. Maximum value of 10000.
func (o PipeSourceParametersSqsQueueParametersOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersSqsQueueParameters) *int { return v.BatchSize }).(pulumi.IntPtrOutput)
}

// The maximum length of a time to wait for events. Maximum value of 300.
func (o PipeSourceParametersSqsQueueParametersOutput) MaximumBatchingWindowInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceParametersSqsQueueParameters) *int { return v.MaximumBatchingWindowInSeconds }).(pulumi.IntPtrOutput)
}

type PipeSourceParametersSqsQueueParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersSqsQueueParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParametersSqsQueueParameters)(nil)).Elem()
}

func (o PipeSourceParametersSqsQueueParametersPtrOutput) ToPipeSourceParametersSqsQueueParametersPtrOutput() PipeSourceParametersSqsQueueParametersPtrOutput {
	return o
}

func (o PipeSourceParametersSqsQueueParametersPtrOutput) ToPipeSourceParametersSqsQueueParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersSqsQueueParametersPtrOutput {
	return o
}

func (o PipeSourceParametersSqsQueueParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeSourceParametersSqsQueueParameters] {
	return pulumix.Output[*PipeSourceParametersSqsQueueParameters]{
		OutputState: o.OutputState,
	}
}

func (o PipeSourceParametersSqsQueueParametersPtrOutput) Elem() PipeSourceParametersSqsQueueParametersOutput {
	return o.ApplyT(func(v *PipeSourceParametersSqsQueueParameters) PipeSourceParametersSqsQueueParameters {
		if v != nil {
			return *v
		}
		var ret PipeSourceParametersSqsQueueParameters
		return ret
	}).(PipeSourceParametersSqsQueueParametersOutput)
}

// The maximum number of records to include in each batch. Maximum value of 10000.
func (o PipeSourceParametersSqsQueueParametersPtrOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersSqsQueueParameters) *int {
		if v == nil {
			return nil
		}
		return v.BatchSize
	}).(pulumi.IntPtrOutput)
}

// The maximum length of a time to wait for events. Maximum value of 300.
func (o PipeSourceParametersSqsQueueParametersPtrOutput) MaximumBatchingWindowInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceParametersSqsQueueParameters) *int {
		if v == nil {
			return nil
		}
		return v.MaximumBatchingWindowInSeconds
	}).(pulumi.IntPtrOutput)
}

type PipeTargetParameters struct {
	// The parameters for using an AWS Batch job as a target. Detailed below.
	BatchJobParameters *PipeTargetParametersBatchJobParameters `pulumi:"batchJobParameters"`
	// The parameters for using an CloudWatch Logs log stream as a target. Detailed below.
	CloudwatchLogsParameters *PipeTargetParametersCloudwatchLogsParameters `pulumi:"cloudwatchLogsParameters"`
	// The parameters for using an Amazon ECS task as a target. Detailed below.
	EcsTaskParameters *PipeTargetParametersEcsTaskParameters `pulumi:"ecsTaskParameters"`
	// The parameters for using an EventBridge event bus as a target. Detailed below.
	EventbridgeEventBusParameters *PipeTargetParametersEventbridgeEventBusParameters `pulumi:"eventbridgeEventBusParameters"`
	// These are custom parameter to be used when the target is an API Gateway REST APIs or EventBridge ApiDestinations. Detailed below.
	HttpParameters *PipeTargetParametersHttpParameters `pulumi:"httpParameters"`
	// Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. Maximum length of 8192 characters.
	InputTemplate *string `pulumi:"inputTemplate"`
	// The parameters for using a Kinesis stream as a source. Detailed below.
	KinesisStreamParameters *PipeTargetParametersKinesisStreamParameters `pulumi:"kinesisStreamParameters"`
	// The parameters for using a Lambda function as a target. Detailed below.
	LambdaFunctionParameters *PipeTargetParametersLambdaFunctionParameters `pulumi:"lambdaFunctionParameters"`
	// These are custom parameters to be used when the target is a Amazon Redshift cluster to invoke the Amazon Redshift Data API BatchExecuteStatement. Detailed below.
	RedshiftDataParameters *PipeTargetParametersRedshiftDataParameters `pulumi:"redshiftDataParameters"`
	// The parameters for using a SageMaker pipeline as a target. Detailed below.
	SagemakerPipelineParameters *PipeTargetParametersSagemakerPipelineParameters `pulumi:"sagemakerPipelineParameters"`
	// The parameters for using a Amazon SQS stream as a target. Detailed below.
	SqsQueueParameters *PipeTargetParametersSqsQueueParameters `pulumi:"sqsQueueParameters"`
	// The parameters for using a Step Functions state machine as a target. Detailed below.
	StepFunctionStateMachineParameters *PipeTargetParametersStepFunctionStateMachineParameters `pulumi:"stepFunctionStateMachineParameters"`
}

// PipeTargetParametersInput is an input type that accepts PipeTargetParametersArgs and PipeTargetParametersOutput values.
// You can construct a concrete instance of `PipeTargetParametersInput` via:
//
//	PipeTargetParametersArgs{...}
type PipeTargetParametersInput interface {
	pulumi.Input

	ToPipeTargetParametersOutput() PipeTargetParametersOutput
	ToPipeTargetParametersOutputWithContext(context.Context) PipeTargetParametersOutput
}

type PipeTargetParametersArgs struct {
	// The parameters for using an AWS Batch job as a target. Detailed below.
	BatchJobParameters PipeTargetParametersBatchJobParametersPtrInput `pulumi:"batchJobParameters"`
	// The parameters for using an CloudWatch Logs log stream as a target. Detailed below.
	CloudwatchLogsParameters PipeTargetParametersCloudwatchLogsParametersPtrInput `pulumi:"cloudwatchLogsParameters"`
	// The parameters for using an Amazon ECS task as a target. Detailed below.
	EcsTaskParameters PipeTargetParametersEcsTaskParametersPtrInput `pulumi:"ecsTaskParameters"`
	// The parameters for using an EventBridge event bus as a target. Detailed below.
	EventbridgeEventBusParameters PipeTargetParametersEventbridgeEventBusParametersPtrInput `pulumi:"eventbridgeEventBusParameters"`
	// These are custom parameter to be used when the target is an API Gateway REST APIs or EventBridge ApiDestinations. Detailed below.
	HttpParameters PipeTargetParametersHttpParametersPtrInput `pulumi:"httpParameters"`
	// Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. Maximum length of 8192 characters.
	InputTemplate pulumi.StringPtrInput `pulumi:"inputTemplate"`
	// The parameters for using a Kinesis stream as a source. Detailed below.
	KinesisStreamParameters PipeTargetParametersKinesisStreamParametersPtrInput `pulumi:"kinesisStreamParameters"`
	// The parameters for using a Lambda function as a target. Detailed below.
	LambdaFunctionParameters PipeTargetParametersLambdaFunctionParametersPtrInput `pulumi:"lambdaFunctionParameters"`
	// These are custom parameters to be used when the target is a Amazon Redshift cluster to invoke the Amazon Redshift Data API BatchExecuteStatement. Detailed below.
	RedshiftDataParameters PipeTargetParametersRedshiftDataParametersPtrInput `pulumi:"redshiftDataParameters"`
	// The parameters for using a SageMaker pipeline as a target. Detailed below.
	SagemakerPipelineParameters PipeTargetParametersSagemakerPipelineParametersPtrInput `pulumi:"sagemakerPipelineParameters"`
	// The parameters for using a Amazon SQS stream as a target. Detailed below.
	SqsQueueParameters PipeTargetParametersSqsQueueParametersPtrInput `pulumi:"sqsQueueParameters"`
	// The parameters for using a Step Functions state machine as a target. Detailed below.
	StepFunctionStateMachineParameters PipeTargetParametersStepFunctionStateMachineParametersPtrInput `pulumi:"stepFunctionStateMachineParameters"`
}

func (PipeTargetParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParameters)(nil)).Elem()
}

func (i PipeTargetParametersArgs) ToPipeTargetParametersOutput() PipeTargetParametersOutput {
	return i.ToPipeTargetParametersOutputWithContext(context.Background())
}

func (i PipeTargetParametersArgs) ToPipeTargetParametersOutputWithContext(ctx context.Context) PipeTargetParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersOutput)
}

func (i PipeTargetParametersArgs) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParameters] {
	return pulumix.Output[PipeTargetParameters]{
		OutputState: i.ToPipeTargetParametersOutputWithContext(ctx).OutputState,
	}
}

func (i PipeTargetParametersArgs) ToPipeTargetParametersPtrOutput() PipeTargetParametersPtrOutput {
	return i.ToPipeTargetParametersPtrOutputWithContext(context.Background())
}

func (i PipeTargetParametersArgs) ToPipeTargetParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersOutput).ToPipeTargetParametersPtrOutputWithContext(ctx)
}

// PipeTargetParametersPtrInput is an input type that accepts PipeTargetParametersArgs, PipeTargetParametersPtr and PipeTargetParametersPtrOutput values.
// You can construct a concrete instance of `PipeTargetParametersPtrInput` via:
//
//	        PipeTargetParametersArgs{...}
//
//	or:
//
//	        nil
type PipeTargetParametersPtrInput interface {
	pulumi.Input

	ToPipeTargetParametersPtrOutput() PipeTargetParametersPtrOutput
	ToPipeTargetParametersPtrOutputWithContext(context.Context) PipeTargetParametersPtrOutput
}

type pipeTargetParametersPtrType PipeTargetParametersArgs

func PipeTargetParametersPtr(v *PipeTargetParametersArgs) PipeTargetParametersPtrInput {
	return (*pipeTargetParametersPtrType)(v)
}

func (*pipeTargetParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParameters)(nil)).Elem()
}

func (i *pipeTargetParametersPtrType) ToPipeTargetParametersPtrOutput() PipeTargetParametersPtrOutput {
	return i.ToPipeTargetParametersPtrOutputWithContext(context.Background())
}

func (i *pipeTargetParametersPtrType) ToPipeTargetParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersPtrOutput)
}

func (i *pipeTargetParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParameters] {
	return pulumix.Output[*PipeTargetParameters]{
		OutputState: i.ToPipeTargetParametersPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeTargetParametersOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParameters)(nil)).Elem()
}

func (o PipeTargetParametersOutput) ToPipeTargetParametersOutput() PipeTargetParametersOutput {
	return o
}

func (o PipeTargetParametersOutput) ToPipeTargetParametersOutputWithContext(ctx context.Context) PipeTargetParametersOutput {
	return o
}

func (o PipeTargetParametersOutput) ToPipeTargetParametersPtrOutput() PipeTargetParametersPtrOutput {
	return o.ToPipeTargetParametersPtrOutputWithContext(context.Background())
}

func (o PipeTargetParametersOutput) ToPipeTargetParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeTargetParameters) *PipeTargetParameters {
		return &v
	}).(PipeTargetParametersPtrOutput)
}

func (o PipeTargetParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParameters] {
	return pulumix.Output[PipeTargetParameters]{
		OutputState: o.OutputState,
	}
}

// The parameters for using an AWS Batch job as a target. Detailed below.
func (o PipeTargetParametersOutput) BatchJobParameters() PipeTargetParametersBatchJobParametersPtrOutput {
	return o.ApplyT(func(v PipeTargetParameters) *PipeTargetParametersBatchJobParameters { return v.BatchJobParameters }).(PipeTargetParametersBatchJobParametersPtrOutput)
}

// The parameters for using an CloudWatch Logs log stream as a target. Detailed below.
func (o PipeTargetParametersOutput) CloudwatchLogsParameters() PipeTargetParametersCloudwatchLogsParametersPtrOutput {
	return o.ApplyT(func(v PipeTargetParameters) *PipeTargetParametersCloudwatchLogsParameters {
		return v.CloudwatchLogsParameters
	}).(PipeTargetParametersCloudwatchLogsParametersPtrOutput)
}

// The parameters for using an Amazon ECS task as a target. Detailed below.
func (o PipeTargetParametersOutput) EcsTaskParameters() PipeTargetParametersEcsTaskParametersPtrOutput {
	return o.ApplyT(func(v PipeTargetParameters) *PipeTargetParametersEcsTaskParameters { return v.EcsTaskParameters }).(PipeTargetParametersEcsTaskParametersPtrOutput)
}

// The parameters for using an EventBridge event bus as a target. Detailed below.
func (o PipeTargetParametersOutput) EventbridgeEventBusParameters() PipeTargetParametersEventbridgeEventBusParametersPtrOutput {
	return o.ApplyT(func(v PipeTargetParameters) *PipeTargetParametersEventbridgeEventBusParameters {
		return v.EventbridgeEventBusParameters
	}).(PipeTargetParametersEventbridgeEventBusParametersPtrOutput)
}

// These are custom parameter to be used when the target is an API Gateway REST APIs or EventBridge ApiDestinations. Detailed below.
func (o PipeTargetParametersOutput) HttpParameters() PipeTargetParametersHttpParametersPtrOutput {
	return o.ApplyT(func(v PipeTargetParameters) *PipeTargetParametersHttpParameters { return v.HttpParameters }).(PipeTargetParametersHttpParametersPtrOutput)
}

// Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. Maximum length of 8192 characters.
func (o PipeTargetParametersOutput) InputTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParameters) *string { return v.InputTemplate }).(pulumi.StringPtrOutput)
}

// The parameters for using a Kinesis stream as a source. Detailed below.
func (o PipeTargetParametersOutput) KinesisStreamParameters() PipeTargetParametersKinesisStreamParametersPtrOutput {
	return o.ApplyT(func(v PipeTargetParameters) *PipeTargetParametersKinesisStreamParameters {
		return v.KinesisStreamParameters
	}).(PipeTargetParametersKinesisStreamParametersPtrOutput)
}

// The parameters for using a Lambda function as a target. Detailed below.
func (o PipeTargetParametersOutput) LambdaFunctionParameters() PipeTargetParametersLambdaFunctionParametersPtrOutput {
	return o.ApplyT(func(v PipeTargetParameters) *PipeTargetParametersLambdaFunctionParameters {
		return v.LambdaFunctionParameters
	}).(PipeTargetParametersLambdaFunctionParametersPtrOutput)
}

// These are custom parameters to be used when the target is a Amazon Redshift cluster to invoke the Amazon Redshift Data API BatchExecuteStatement. Detailed below.
func (o PipeTargetParametersOutput) RedshiftDataParameters() PipeTargetParametersRedshiftDataParametersPtrOutput {
	return o.ApplyT(func(v PipeTargetParameters) *PipeTargetParametersRedshiftDataParameters {
		return v.RedshiftDataParameters
	}).(PipeTargetParametersRedshiftDataParametersPtrOutput)
}

// The parameters for using a SageMaker pipeline as a target. Detailed below.
func (o PipeTargetParametersOutput) SagemakerPipelineParameters() PipeTargetParametersSagemakerPipelineParametersPtrOutput {
	return o.ApplyT(func(v PipeTargetParameters) *PipeTargetParametersSagemakerPipelineParameters {
		return v.SagemakerPipelineParameters
	}).(PipeTargetParametersSagemakerPipelineParametersPtrOutput)
}

// The parameters for using a Amazon SQS stream as a target. Detailed below.
func (o PipeTargetParametersOutput) SqsQueueParameters() PipeTargetParametersSqsQueueParametersPtrOutput {
	return o.ApplyT(func(v PipeTargetParameters) *PipeTargetParametersSqsQueueParameters { return v.SqsQueueParameters }).(PipeTargetParametersSqsQueueParametersPtrOutput)
}

// The parameters for using a Step Functions state machine as a target. Detailed below.
func (o PipeTargetParametersOutput) StepFunctionStateMachineParameters() PipeTargetParametersStepFunctionStateMachineParametersPtrOutput {
	return o.ApplyT(func(v PipeTargetParameters) *PipeTargetParametersStepFunctionStateMachineParameters {
		return v.StepFunctionStateMachineParameters
	}).(PipeTargetParametersStepFunctionStateMachineParametersPtrOutput)
}

type PipeTargetParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParameters)(nil)).Elem()
}

func (o PipeTargetParametersPtrOutput) ToPipeTargetParametersPtrOutput() PipeTargetParametersPtrOutput {
	return o
}

func (o PipeTargetParametersPtrOutput) ToPipeTargetParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersPtrOutput {
	return o
}

func (o PipeTargetParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParameters] {
	return pulumix.Output[*PipeTargetParameters]{
		OutputState: o.OutputState,
	}
}

func (o PipeTargetParametersPtrOutput) Elem() PipeTargetParametersOutput {
	return o.ApplyT(func(v *PipeTargetParameters) PipeTargetParameters {
		if v != nil {
			return *v
		}
		var ret PipeTargetParameters
		return ret
	}).(PipeTargetParametersOutput)
}

// The parameters for using an AWS Batch job as a target. Detailed below.
func (o PipeTargetParametersPtrOutput) BatchJobParameters() PipeTargetParametersBatchJobParametersPtrOutput {
	return o.ApplyT(func(v *PipeTargetParameters) *PipeTargetParametersBatchJobParameters {
		if v == nil {
			return nil
		}
		return v.BatchJobParameters
	}).(PipeTargetParametersBatchJobParametersPtrOutput)
}

// The parameters for using an CloudWatch Logs log stream as a target. Detailed below.
func (o PipeTargetParametersPtrOutput) CloudwatchLogsParameters() PipeTargetParametersCloudwatchLogsParametersPtrOutput {
	return o.ApplyT(func(v *PipeTargetParameters) *PipeTargetParametersCloudwatchLogsParameters {
		if v == nil {
			return nil
		}
		return v.CloudwatchLogsParameters
	}).(PipeTargetParametersCloudwatchLogsParametersPtrOutput)
}

// The parameters for using an Amazon ECS task as a target. Detailed below.
func (o PipeTargetParametersPtrOutput) EcsTaskParameters() PipeTargetParametersEcsTaskParametersPtrOutput {
	return o.ApplyT(func(v *PipeTargetParameters) *PipeTargetParametersEcsTaskParameters {
		if v == nil {
			return nil
		}
		return v.EcsTaskParameters
	}).(PipeTargetParametersEcsTaskParametersPtrOutput)
}

// The parameters for using an EventBridge event bus as a target. Detailed below.
func (o PipeTargetParametersPtrOutput) EventbridgeEventBusParameters() PipeTargetParametersEventbridgeEventBusParametersPtrOutput {
	return o.ApplyT(func(v *PipeTargetParameters) *PipeTargetParametersEventbridgeEventBusParameters {
		if v == nil {
			return nil
		}
		return v.EventbridgeEventBusParameters
	}).(PipeTargetParametersEventbridgeEventBusParametersPtrOutput)
}

// These are custom parameter to be used when the target is an API Gateway REST APIs or EventBridge ApiDestinations. Detailed below.
func (o PipeTargetParametersPtrOutput) HttpParameters() PipeTargetParametersHttpParametersPtrOutput {
	return o.ApplyT(func(v *PipeTargetParameters) *PipeTargetParametersHttpParameters {
		if v == nil {
			return nil
		}
		return v.HttpParameters
	}).(PipeTargetParametersHttpParametersPtrOutput)
}

// Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. Maximum length of 8192 characters.
func (o PipeTargetParametersPtrOutput) InputTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetParameters) *string {
		if v == nil {
			return nil
		}
		return v.InputTemplate
	}).(pulumi.StringPtrOutput)
}

// The parameters for using a Kinesis stream as a source. Detailed below.
func (o PipeTargetParametersPtrOutput) KinesisStreamParameters() PipeTargetParametersKinesisStreamParametersPtrOutput {
	return o.ApplyT(func(v *PipeTargetParameters) *PipeTargetParametersKinesisStreamParameters {
		if v == nil {
			return nil
		}
		return v.KinesisStreamParameters
	}).(PipeTargetParametersKinesisStreamParametersPtrOutput)
}

// The parameters for using a Lambda function as a target. Detailed below.
func (o PipeTargetParametersPtrOutput) LambdaFunctionParameters() PipeTargetParametersLambdaFunctionParametersPtrOutput {
	return o.ApplyT(func(v *PipeTargetParameters) *PipeTargetParametersLambdaFunctionParameters {
		if v == nil {
			return nil
		}
		return v.LambdaFunctionParameters
	}).(PipeTargetParametersLambdaFunctionParametersPtrOutput)
}

// These are custom parameters to be used when the target is a Amazon Redshift cluster to invoke the Amazon Redshift Data API BatchExecuteStatement. Detailed below.
func (o PipeTargetParametersPtrOutput) RedshiftDataParameters() PipeTargetParametersRedshiftDataParametersPtrOutput {
	return o.ApplyT(func(v *PipeTargetParameters) *PipeTargetParametersRedshiftDataParameters {
		if v == nil {
			return nil
		}
		return v.RedshiftDataParameters
	}).(PipeTargetParametersRedshiftDataParametersPtrOutput)
}

// The parameters for using a SageMaker pipeline as a target. Detailed below.
func (o PipeTargetParametersPtrOutput) SagemakerPipelineParameters() PipeTargetParametersSagemakerPipelineParametersPtrOutput {
	return o.ApplyT(func(v *PipeTargetParameters) *PipeTargetParametersSagemakerPipelineParameters {
		if v == nil {
			return nil
		}
		return v.SagemakerPipelineParameters
	}).(PipeTargetParametersSagemakerPipelineParametersPtrOutput)
}

// The parameters for using a Amazon SQS stream as a target. Detailed below.
func (o PipeTargetParametersPtrOutput) SqsQueueParameters() PipeTargetParametersSqsQueueParametersPtrOutput {
	return o.ApplyT(func(v *PipeTargetParameters) *PipeTargetParametersSqsQueueParameters {
		if v == nil {
			return nil
		}
		return v.SqsQueueParameters
	}).(PipeTargetParametersSqsQueueParametersPtrOutput)
}

// The parameters for using a Step Functions state machine as a target. Detailed below.
func (o PipeTargetParametersPtrOutput) StepFunctionStateMachineParameters() PipeTargetParametersStepFunctionStateMachineParametersPtrOutput {
	return o.ApplyT(func(v *PipeTargetParameters) *PipeTargetParametersStepFunctionStateMachineParameters {
		if v == nil {
			return nil
		}
		return v.StepFunctionStateMachineParameters
	}).(PipeTargetParametersStepFunctionStateMachineParametersPtrOutput)
}

type PipeTargetParametersBatchJobParameters struct {
	// The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. This parameter is used only if the target is an AWS Batch job. Detailed below.
	ArrayProperties *PipeTargetParametersBatchJobParametersArrayProperties `pulumi:"arrayProperties"`
	// The overrides that are sent to a container. Detailed below.
	ContainerOverrides *PipeTargetParametersBatchJobParametersContainerOverrides `pulumi:"containerOverrides"`
	// A list of dependencies for the job. A job can depend upon a maximum of 20 jobs. You can specify a SEQUENTIAL type dependency without specifying a job ID for array jobs so that each child array job completes sequentially, starting at index 0. You can also specify an N_TO_N type dependency with a job ID for array jobs. In that case, each index child of this job must wait for the corresponding index child of each dependency to complete before it can begin. Detailed below.
	DependsOns []PipeTargetParametersBatchJobParametersDependsOn `pulumi:"dependsOns"`
	// The job definition used by this job. This value can be one of name, name:revision, or the Amazon Resource Name (ARN) for the job definition. If name is specified without a revision then the latest active revision is used.
	JobDefinition string `pulumi:"jobDefinition"`
	// The name of the job. It can be up to 128 letters long.
	JobName string `pulumi:"jobName"`
	// Additional parameters passed to the job that replace parameter substitution placeholders that are set in the job definition. Parameters are specified as a key and value pair mapping. Parameters included here override any corresponding parameter defaults from the job definition. Detailed below.
	Parameters map[string]string `pulumi:"parameters"`
	// The retry strategy to use for failed jobs. When a retry strategy is specified here, it overrides the retry strategy defined in the job definition. Detailed below.
	RetryStrategy *PipeTargetParametersBatchJobParametersRetryStrategy `pulumi:"retryStrategy"`
}

// PipeTargetParametersBatchJobParametersInput is an input type that accepts PipeTargetParametersBatchJobParametersArgs and PipeTargetParametersBatchJobParametersOutput values.
// You can construct a concrete instance of `PipeTargetParametersBatchJobParametersInput` via:
//
//	PipeTargetParametersBatchJobParametersArgs{...}
type PipeTargetParametersBatchJobParametersInput interface {
	pulumi.Input

	ToPipeTargetParametersBatchJobParametersOutput() PipeTargetParametersBatchJobParametersOutput
	ToPipeTargetParametersBatchJobParametersOutputWithContext(context.Context) PipeTargetParametersBatchJobParametersOutput
}

type PipeTargetParametersBatchJobParametersArgs struct {
	// The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. This parameter is used only if the target is an AWS Batch job. Detailed below.
	ArrayProperties PipeTargetParametersBatchJobParametersArrayPropertiesPtrInput `pulumi:"arrayProperties"`
	// The overrides that are sent to a container. Detailed below.
	ContainerOverrides PipeTargetParametersBatchJobParametersContainerOverridesPtrInput `pulumi:"containerOverrides"`
	// A list of dependencies for the job. A job can depend upon a maximum of 20 jobs. You can specify a SEQUENTIAL type dependency without specifying a job ID for array jobs so that each child array job completes sequentially, starting at index 0. You can also specify an N_TO_N type dependency with a job ID for array jobs. In that case, each index child of this job must wait for the corresponding index child of each dependency to complete before it can begin. Detailed below.
	DependsOns PipeTargetParametersBatchJobParametersDependsOnArrayInput `pulumi:"dependsOns"`
	// The job definition used by this job. This value can be one of name, name:revision, or the Amazon Resource Name (ARN) for the job definition. If name is specified without a revision then the latest active revision is used.
	JobDefinition pulumi.StringInput `pulumi:"jobDefinition"`
	// The name of the job. It can be up to 128 letters long.
	JobName pulumi.StringInput `pulumi:"jobName"`
	// Additional parameters passed to the job that replace parameter substitution placeholders that are set in the job definition. Parameters are specified as a key and value pair mapping. Parameters included here override any corresponding parameter defaults from the job definition. Detailed below.
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
	// The retry strategy to use for failed jobs. When a retry strategy is specified here, it overrides the retry strategy defined in the job definition. Detailed below.
	RetryStrategy PipeTargetParametersBatchJobParametersRetryStrategyPtrInput `pulumi:"retryStrategy"`
}

func (PipeTargetParametersBatchJobParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersBatchJobParameters)(nil)).Elem()
}

func (i PipeTargetParametersBatchJobParametersArgs) ToPipeTargetParametersBatchJobParametersOutput() PipeTargetParametersBatchJobParametersOutput {
	return i.ToPipeTargetParametersBatchJobParametersOutputWithContext(context.Background())
}

func (i PipeTargetParametersBatchJobParametersArgs) ToPipeTargetParametersBatchJobParametersOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersBatchJobParametersOutput)
}

func (i PipeTargetParametersBatchJobParametersArgs) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersBatchJobParameters] {
	return pulumix.Output[PipeTargetParametersBatchJobParameters]{
		OutputState: i.ToPipeTargetParametersBatchJobParametersOutputWithContext(ctx).OutputState,
	}
}

func (i PipeTargetParametersBatchJobParametersArgs) ToPipeTargetParametersBatchJobParametersPtrOutput() PipeTargetParametersBatchJobParametersPtrOutput {
	return i.ToPipeTargetParametersBatchJobParametersPtrOutputWithContext(context.Background())
}

func (i PipeTargetParametersBatchJobParametersArgs) ToPipeTargetParametersBatchJobParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersBatchJobParametersOutput).ToPipeTargetParametersBatchJobParametersPtrOutputWithContext(ctx)
}

// PipeTargetParametersBatchJobParametersPtrInput is an input type that accepts PipeTargetParametersBatchJobParametersArgs, PipeTargetParametersBatchJobParametersPtr and PipeTargetParametersBatchJobParametersPtrOutput values.
// You can construct a concrete instance of `PipeTargetParametersBatchJobParametersPtrInput` via:
//
//	        PipeTargetParametersBatchJobParametersArgs{...}
//
//	or:
//
//	        nil
type PipeTargetParametersBatchJobParametersPtrInput interface {
	pulumi.Input

	ToPipeTargetParametersBatchJobParametersPtrOutput() PipeTargetParametersBatchJobParametersPtrOutput
	ToPipeTargetParametersBatchJobParametersPtrOutputWithContext(context.Context) PipeTargetParametersBatchJobParametersPtrOutput
}

type pipeTargetParametersBatchJobParametersPtrType PipeTargetParametersBatchJobParametersArgs

func PipeTargetParametersBatchJobParametersPtr(v *PipeTargetParametersBatchJobParametersArgs) PipeTargetParametersBatchJobParametersPtrInput {
	return (*pipeTargetParametersBatchJobParametersPtrType)(v)
}

func (*pipeTargetParametersBatchJobParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParametersBatchJobParameters)(nil)).Elem()
}

func (i *pipeTargetParametersBatchJobParametersPtrType) ToPipeTargetParametersBatchJobParametersPtrOutput() PipeTargetParametersBatchJobParametersPtrOutput {
	return i.ToPipeTargetParametersBatchJobParametersPtrOutputWithContext(context.Background())
}

func (i *pipeTargetParametersBatchJobParametersPtrType) ToPipeTargetParametersBatchJobParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersBatchJobParametersPtrOutput)
}

func (i *pipeTargetParametersBatchJobParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersBatchJobParameters] {
	return pulumix.Output[*PipeTargetParametersBatchJobParameters]{
		OutputState: i.ToPipeTargetParametersBatchJobParametersPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeTargetParametersBatchJobParametersOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersBatchJobParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersBatchJobParameters)(nil)).Elem()
}

func (o PipeTargetParametersBatchJobParametersOutput) ToPipeTargetParametersBatchJobParametersOutput() PipeTargetParametersBatchJobParametersOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersOutput) ToPipeTargetParametersBatchJobParametersOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersOutput) ToPipeTargetParametersBatchJobParametersPtrOutput() PipeTargetParametersBatchJobParametersPtrOutput {
	return o.ToPipeTargetParametersBatchJobParametersPtrOutputWithContext(context.Background())
}

func (o PipeTargetParametersBatchJobParametersOutput) ToPipeTargetParametersBatchJobParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeTargetParametersBatchJobParameters) *PipeTargetParametersBatchJobParameters {
		return &v
	}).(PipeTargetParametersBatchJobParametersPtrOutput)
}

func (o PipeTargetParametersBatchJobParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersBatchJobParameters] {
	return pulumix.Output[PipeTargetParametersBatchJobParameters]{
		OutputState: o.OutputState,
	}
}

// The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. This parameter is used only if the target is an AWS Batch job. Detailed below.
func (o PipeTargetParametersBatchJobParametersOutput) ArrayProperties() PipeTargetParametersBatchJobParametersArrayPropertiesPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersBatchJobParameters) *PipeTargetParametersBatchJobParametersArrayProperties {
		return v.ArrayProperties
	}).(PipeTargetParametersBatchJobParametersArrayPropertiesPtrOutput)
}

// The overrides that are sent to a container. Detailed below.
func (o PipeTargetParametersBatchJobParametersOutput) ContainerOverrides() PipeTargetParametersBatchJobParametersContainerOverridesPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersBatchJobParameters) *PipeTargetParametersBatchJobParametersContainerOverrides {
		return v.ContainerOverrides
	}).(PipeTargetParametersBatchJobParametersContainerOverridesPtrOutput)
}

// A list of dependencies for the job. A job can depend upon a maximum of 20 jobs. You can specify a SEQUENTIAL type dependency without specifying a job ID for array jobs so that each child array job completes sequentially, starting at index 0. You can also specify an N_TO_N type dependency with a job ID for array jobs. In that case, each index child of this job must wait for the corresponding index child of each dependency to complete before it can begin. Detailed below.
func (o PipeTargetParametersBatchJobParametersOutput) DependsOns() PipeTargetParametersBatchJobParametersDependsOnArrayOutput {
	return o.ApplyT(func(v PipeTargetParametersBatchJobParameters) []PipeTargetParametersBatchJobParametersDependsOn {
		return v.DependsOns
	}).(PipeTargetParametersBatchJobParametersDependsOnArrayOutput)
}

// The job definition used by this job. This value can be one of name, name:revision, or the Amazon Resource Name (ARN) for the job definition. If name is specified without a revision then the latest active revision is used.
func (o PipeTargetParametersBatchJobParametersOutput) JobDefinition() pulumi.StringOutput {
	return o.ApplyT(func(v PipeTargetParametersBatchJobParameters) string { return v.JobDefinition }).(pulumi.StringOutput)
}

// The name of the job. It can be up to 128 letters long.
func (o PipeTargetParametersBatchJobParametersOutput) JobName() pulumi.StringOutput {
	return o.ApplyT(func(v PipeTargetParametersBatchJobParameters) string { return v.JobName }).(pulumi.StringOutput)
}

// Additional parameters passed to the job that replace parameter substitution placeholders that are set in the job definition. Parameters are specified as a key and value pair mapping. Parameters included here override any corresponding parameter defaults from the job definition. Detailed below.
func (o PipeTargetParametersBatchJobParametersOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v PipeTargetParametersBatchJobParameters) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

// The retry strategy to use for failed jobs. When a retry strategy is specified here, it overrides the retry strategy defined in the job definition. Detailed below.
func (o PipeTargetParametersBatchJobParametersOutput) RetryStrategy() PipeTargetParametersBatchJobParametersRetryStrategyPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersBatchJobParameters) *PipeTargetParametersBatchJobParametersRetryStrategy {
		return v.RetryStrategy
	}).(PipeTargetParametersBatchJobParametersRetryStrategyPtrOutput)
}

type PipeTargetParametersBatchJobParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersBatchJobParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParametersBatchJobParameters)(nil)).Elem()
}

func (o PipeTargetParametersBatchJobParametersPtrOutput) ToPipeTargetParametersBatchJobParametersPtrOutput() PipeTargetParametersBatchJobParametersPtrOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersPtrOutput) ToPipeTargetParametersBatchJobParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersPtrOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersBatchJobParameters] {
	return pulumix.Output[*PipeTargetParametersBatchJobParameters]{
		OutputState: o.OutputState,
	}
}

func (o PipeTargetParametersBatchJobParametersPtrOutput) Elem() PipeTargetParametersBatchJobParametersOutput {
	return o.ApplyT(func(v *PipeTargetParametersBatchJobParameters) PipeTargetParametersBatchJobParameters {
		if v != nil {
			return *v
		}
		var ret PipeTargetParametersBatchJobParameters
		return ret
	}).(PipeTargetParametersBatchJobParametersOutput)
}

// The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. This parameter is used only if the target is an AWS Batch job. Detailed below.
func (o PipeTargetParametersBatchJobParametersPtrOutput) ArrayProperties() PipeTargetParametersBatchJobParametersArrayPropertiesPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersBatchJobParameters) *PipeTargetParametersBatchJobParametersArrayProperties {
		if v == nil {
			return nil
		}
		return v.ArrayProperties
	}).(PipeTargetParametersBatchJobParametersArrayPropertiesPtrOutput)
}

// The overrides that are sent to a container. Detailed below.
func (o PipeTargetParametersBatchJobParametersPtrOutput) ContainerOverrides() PipeTargetParametersBatchJobParametersContainerOverridesPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersBatchJobParameters) *PipeTargetParametersBatchJobParametersContainerOverrides {
		if v == nil {
			return nil
		}
		return v.ContainerOverrides
	}).(PipeTargetParametersBatchJobParametersContainerOverridesPtrOutput)
}

// A list of dependencies for the job. A job can depend upon a maximum of 20 jobs. You can specify a SEQUENTIAL type dependency without specifying a job ID for array jobs so that each child array job completes sequentially, starting at index 0. You can also specify an N_TO_N type dependency with a job ID for array jobs. In that case, each index child of this job must wait for the corresponding index child of each dependency to complete before it can begin. Detailed below.
func (o PipeTargetParametersBatchJobParametersPtrOutput) DependsOns() PipeTargetParametersBatchJobParametersDependsOnArrayOutput {
	return o.ApplyT(func(v *PipeTargetParametersBatchJobParameters) []PipeTargetParametersBatchJobParametersDependsOn {
		if v == nil {
			return nil
		}
		return v.DependsOns
	}).(PipeTargetParametersBatchJobParametersDependsOnArrayOutput)
}

// The job definition used by this job. This value can be one of name, name:revision, or the Amazon Resource Name (ARN) for the job definition. If name is specified without a revision then the latest active revision is used.
func (o PipeTargetParametersBatchJobParametersPtrOutput) JobDefinition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersBatchJobParameters) *string {
		if v == nil {
			return nil
		}
		return &v.JobDefinition
	}).(pulumi.StringPtrOutput)
}

// The name of the job. It can be up to 128 letters long.
func (o PipeTargetParametersBatchJobParametersPtrOutput) JobName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersBatchJobParameters) *string {
		if v == nil {
			return nil
		}
		return &v.JobName
	}).(pulumi.StringPtrOutput)
}

// Additional parameters passed to the job that replace parameter substitution placeholders that are set in the job definition. Parameters are specified as a key and value pair mapping. Parameters included here override any corresponding parameter defaults from the job definition. Detailed below.
func (o PipeTargetParametersBatchJobParametersPtrOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PipeTargetParametersBatchJobParameters) map[string]string {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.StringMapOutput)
}

// The retry strategy to use for failed jobs. When a retry strategy is specified here, it overrides the retry strategy defined in the job definition. Detailed below.
func (o PipeTargetParametersBatchJobParametersPtrOutput) RetryStrategy() PipeTargetParametersBatchJobParametersRetryStrategyPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersBatchJobParameters) *PipeTargetParametersBatchJobParametersRetryStrategy {
		if v == nil {
			return nil
		}
		return v.RetryStrategy
	}).(PipeTargetParametersBatchJobParametersRetryStrategyPtrOutput)
}

type PipeTargetParametersBatchJobParametersArrayProperties struct {
	// The size of the array, if this is an array batch job. Minimum value of 2. Maximum value of 10,000.
	Size *int `pulumi:"size"`
}

// PipeTargetParametersBatchJobParametersArrayPropertiesInput is an input type that accepts PipeTargetParametersBatchJobParametersArrayPropertiesArgs and PipeTargetParametersBatchJobParametersArrayPropertiesOutput values.
// You can construct a concrete instance of `PipeTargetParametersBatchJobParametersArrayPropertiesInput` via:
//
//	PipeTargetParametersBatchJobParametersArrayPropertiesArgs{...}
type PipeTargetParametersBatchJobParametersArrayPropertiesInput interface {
	pulumi.Input

	ToPipeTargetParametersBatchJobParametersArrayPropertiesOutput() PipeTargetParametersBatchJobParametersArrayPropertiesOutput
	ToPipeTargetParametersBatchJobParametersArrayPropertiesOutputWithContext(context.Context) PipeTargetParametersBatchJobParametersArrayPropertiesOutput
}

type PipeTargetParametersBatchJobParametersArrayPropertiesArgs struct {
	// The size of the array, if this is an array batch job. Minimum value of 2. Maximum value of 10,000.
	Size pulumi.IntPtrInput `pulumi:"size"`
}

func (PipeTargetParametersBatchJobParametersArrayPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersBatchJobParametersArrayProperties)(nil)).Elem()
}

func (i PipeTargetParametersBatchJobParametersArrayPropertiesArgs) ToPipeTargetParametersBatchJobParametersArrayPropertiesOutput() PipeTargetParametersBatchJobParametersArrayPropertiesOutput {
	return i.ToPipeTargetParametersBatchJobParametersArrayPropertiesOutputWithContext(context.Background())
}

func (i PipeTargetParametersBatchJobParametersArrayPropertiesArgs) ToPipeTargetParametersBatchJobParametersArrayPropertiesOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersArrayPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersBatchJobParametersArrayPropertiesOutput)
}

func (i PipeTargetParametersBatchJobParametersArrayPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersBatchJobParametersArrayProperties] {
	return pulumix.Output[PipeTargetParametersBatchJobParametersArrayProperties]{
		OutputState: i.ToPipeTargetParametersBatchJobParametersArrayPropertiesOutputWithContext(ctx).OutputState,
	}
}

func (i PipeTargetParametersBatchJobParametersArrayPropertiesArgs) ToPipeTargetParametersBatchJobParametersArrayPropertiesPtrOutput() PipeTargetParametersBatchJobParametersArrayPropertiesPtrOutput {
	return i.ToPipeTargetParametersBatchJobParametersArrayPropertiesPtrOutputWithContext(context.Background())
}

func (i PipeTargetParametersBatchJobParametersArrayPropertiesArgs) ToPipeTargetParametersBatchJobParametersArrayPropertiesPtrOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersArrayPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersBatchJobParametersArrayPropertiesOutput).ToPipeTargetParametersBatchJobParametersArrayPropertiesPtrOutputWithContext(ctx)
}

// PipeTargetParametersBatchJobParametersArrayPropertiesPtrInput is an input type that accepts PipeTargetParametersBatchJobParametersArrayPropertiesArgs, PipeTargetParametersBatchJobParametersArrayPropertiesPtr and PipeTargetParametersBatchJobParametersArrayPropertiesPtrOutput values.
// You can construct a concrete instance of `PipeTargetParametersBatchJobParametersArrayPropertiesPtrInput` via:
//
//	        PipeTargetParametersBatchJobParametersArrayPropertiesArgs{...}
//
//	or:
//
//	        nil
type PipeTargetParametersBatchJobParametersArrayPropertiesPtrInput interface {
	pulumi.Input

	ToPipeTargetParametersBatchJobParametersArrayPropertiesPtrOutput() PipeTargetParametersBatchJobParametersArrayPropertiesPtrOutput
	ToPipeTargetParametersBatchJobParametersArrayPropertiesPtrOutputWithContext(context.Context) PipeTargetParametersBatchJobParametersArrayPropertiesPtrOutput
}

type pipeTargetParametersBatchJobParametersArrayPropertiesPtrType PipeTargetParametersBatchJobParametersArrayPropertiesArgs

func PipeTargetParametersBatchJobParametersArrayPropertiesPtr(v *PipeTargetParametersBatchJobParametersArrayPropertiesArgs) PipeTargetParametersBatchJobParametersArrayPropertiesPtrInput {
	return (*pipeTargetParametersBatchJobParametersArrayPropertiesPtrType)(v)
}

func (*pipeTargetParametersBatchJobParametersArrayPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParametersBatchJobParametersArrayProperties)(nil)).Elem()
}

func (i *pipeTargetParametersBatchJobParametersArrayPropertiesPtrType) ToPipeTargetParametersBatchJobParametersArrayPropertiesPtrOutput() PipeTargetParametersBatchJobParametersArrayPropertiesPtrOutput {
	return i.ToPipeTargetParametersBatchJobParametersArrayPropertiesPtrOutputWithContext(context.Background())
}

func (i *pipeTargetParametersBatchJobParametersArrayPropertiesPtrType) ToPipeTargetParametersBatchJobParametersArrayPropertiesPtrOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersArrayPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersBatchJobParametersArrayPropertiesPtrOutput)
}

func (i *pipeTargetParametersBatchJobParametersArrayPropertiesPtrType) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersBatchJobParametersArrayProperties] {
	return pulumix.Output[*PipeTargetParametersBatchJobParametersArrayProperties]{
		OutputState: i.ToPipeTargetParametersBatchJobParametersArrayPropertiesPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeTargetParametersBatchJobParametersArrayPropertiesOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersBatchJobParametersArrayPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersBatchJobParametersArrayProperties)(nil)).Elem()
}

func (o PipeTargetParametersBatchJobParametersArrayPropertiesOutput) ToPipeTargetParametersBatchJobParametersArrayPropertiesOutput() PipeTargetParametersBatchJobParametersArrayPropertiesOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersArrayPropertiesOutput) ToPipeTargetParametersBatchJobParametersArrayPropertiesOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersArrayPropertiesOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersArrayPropertiesOutput) ToPipeTargetParametersBatchJobParametersArrayPropertiesPtrOutput() PipeTargetParametersBatchJobParametersArrayPropertiesPtrOutput {
	return o.ToPipeTargetParametersBatchJobParametersArrayPropertiesPtrOutputWithContext(context.Background())
}

func (o PipeTargetParametersBatchJobParametersArrayPropertiesOutput) ToPipeTargetParametersBatchJobParametersArrayPropertiesPtrOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersArrayPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeTargetParametersBatchJobParametersArrayProperties) *PipeTargetParametersBatchJobParametersArrayProperties {
		return &v
	}).(PipeTargetParametersBatchJobParametersArrayPropertiesPtrOutput)
}

func (o PipeTargetParametersBatchJobParametersArrayPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersBatchJobParametersArrayProperties] {
	return pulumix.Output[PipeTargetParametersBatchJobParametersArrayProperties]{
		OutputState: o.OutputState,
	}
}

// The size of the array, if this is an array batch job. Minimum value of 2. Maximum value of 10,000.
func (o PipeTargetParametersBatchJobParametersArrayPropertiesOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersBatchJobParametersArrayProperties) *int { return v.Size }).(pulumi.IntPtrOutput)
}

type PipeTargetParametersBatchJobParametersArrayPropertiesPtrOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersBatchJobParametersArrayPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParametersBatchJobParametersArrayProperties)(nil)).Elem()
}

func (o PipeTargetParametersBatchJobParametersArrayPropertiesPtrOutput) ToPipeTargetParametersBatchJobParametersArrayPropertiesPtrOutput() PipeTargetParametersBatchJobParametersArrayPropertiesPtrOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersArrayPropertiesPtrOutput) ToPipeTargetParametersBatchJobParametersArrayPropertiesPtrOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersArrayPropertiesPtrOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersArrayPropertiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersBatchJobParametersArrayProperties] {
	return pulumix.Output[*PipeTargetParametersBatchJobParametersArrayProperties]{
		OutputState: o.OutputState,
	}
}

func (o PipeTargetParametersBatchJobParametersArrayPropertiesPtrOutput) Elem() PipeTargetParametersBatchJobParametersArrayPropertiesOutput {
	return o.ApplyT(func(v *PipeTargetParametersBatchJobParametersArrayProperties) PipeTargetParametersBatchJobParametersArrayProperties {
		if v != nil {
			return *v
		}
		var ret PipeTargetParametersBatchJobParametersArrayProperties
		return ret
	}).(PipeTargetParametersBatchJobParametersArrayPropertiesOutput)
}

// The size of the array, if this is an array batch job. Minimum value of 2. Maximum value of 10,000.
func (o PipeTargetParametersBatchJobParametersArrayPropertiesPtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersBatchJobParametersArrayProperties) *int {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.IntPtrOutput)
}

type PipeTargetParametersBatchJobParametersContainerOverrides struct {
	// List of commands to send to the container that overrides the default command from the Docker image or the task definition. You must also specify a container name.
	Commands []string `pulumi:"commands"`
	// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. You must also specify a container name. Detailed below.
	Environments []PipeTargetParametersBatchJobParametersContainerOverridesEnvironment `pulumi:"environments"`
	// The instance type to use for a multi-node parallel job. This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.
	InstanceType *string `pulumi:"instanceType"`
	// The type and amount of a resource to assign to a container, instead of the default value from the task definition. The only supported resource is a GPU. Detailed below.
	ResourceRequirements []PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirement `pulumi:"resourceRequirements"`
}

// PipeTargetParametersBatchJobParametersContainerOverridesInput is an input type that accepts PipeTargetParametersBatchJobParametersContainerOverridesArgs and PipeTargetParametersBatchJobParametersContainerOverridesOutput values.
// You can construct a concrete instance of `PipeTargetParametersBatchJobParametersContainerOverridesInput` via:
//
//	PipeTargetParametersBatchJobParametersContainerOverridesArgs{...}
type PipeTargetParametersBatchJobParametersContainerOverridesInput interface {
	pulumi.Input

	ToPipeTargetParametersBatchJobParametersContainerOverridesOutput() PipeTargetParametersBatchJobParametersContainerOverridesOutput
	ToPipeTargetParametersBatchJobParametersContainerOverridesOutputWithContext(context.Context) PipeTargetParametersBatchJobParametersContainerOverridesOutput
}

type PipeTargetParametersBatchJobParametersContainerOverridesArgs struct {
	// List of commands to send to the container that overrides the default command from the Docker image or the task definition. You must also specify a container name.
	Commands pulumi.StringArrayInput `pulumi:"commands"`
	// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. You must also specify a container name. Detailed below.
	Environments PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArrayInput `pulumi:"environments"`
	// The instance type to use for a multi-node parallel job. This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.
	InstanceType pulumi.StringPtrInput `pulumi:"instanceType"`
	// The type and amount of a resource to assign to a container, instead of the default value from the task definition. The only supported resource is a GPU. Detailed below.
	ResourceRequirements PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArrayInput `pulumi:"resourceRequirements"`
}

func (PipeTargetParametersBatchJobParametersContainerOverridesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersBatchJobParametersContainerOverrides)(nil)).Elem()
}

func (i PipeTargetParametersBatchJobParametersContainerOverridesArgs) ToPipeTargetParametersBatchJobParametersContainerOverridesOutput() PipeTargetParametersBatchJobParametersContainerOverridesOutput {
	return i.ToPipeTargetParametersBatchJobParametersContainerOverridesOutputWithContext(context.Background())
}

func (i PipeTargetParametersBatchJobParametersContainerOverridesArgs) ToPipeTargetParametersBatchJobParametersContainerOverridesOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersContainerOverridesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersBatchJobParametersContainerOverridesOutput)
}

func (i PipeTargetParametersBatchJobParametersContainerOverridesArgs) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersBatchJobParametersContainerOverrides] {
	return pulumix.Output[PipeTargetParametersBatchJobParametersContainerOverrides]{
		OutputState: i.ToPipeTargetParametersBatchJobParametersContainerOverridesOutputWithContext(ctx).OutputState,
	}
}

func (i PipeTargetParametersBatchJobParametersContainerOverridesArgs) ToPipeTargetParametersBatchJobParametersContainerOverridesPtrOutput() PipeTargetParametersBatchJobParametersContainerOverridesPtrOutput {
	return i.ToPipeTargetParametersBatchJobParametersContainerOverridesPtrOutputWithContext(context.Background())
}

func (i PipeTargetParametersBatchJobParametersContainerOverridesArgs) ToPipeTargetParametersBatchJobParametersContainerOverridesPtrOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersContainerOverridesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersBatchJobParametersContainerOverridesOutput).ToPipeTargetParametersBatchJobParametersContainerOverridesPtrOutputWithContext(ctx)
}

// PipeTargetParametersBatchJobParametersContainerOverridesPtrInput is an input type that accepts PipeTargetParametersBatchJobParametersContainerOverridesArgs, PipeTargetParametersBatchJobParametersContainerOverridesPtr and PipeTargetParametersBatchJobParametersContainerOverridesPtrOutput values.
// You can construct a concrete instance of `PipeTargetParametersBatchJobParametersContainerOverridesPtrInput` via:
//
//	        PipeTargetParametersBatchJobParametersContainerOverridesArgs{...}
//
//	or:
//
//	        nil
type PipeTargetParametersBatchJobParametersContainerOverridesPtrInput interface {
	pulumi.Input

	ToPipeTargetParametersBatchJobParametersContainerOverridesPtrOutput() PipeTargetParametersBatchJobParametersContainerOverridesPtrOutput
	ToPipeTargetParametersBatchJobParametersContainerOverridesPtrOutputWithContext(context.Context) PipeTargetParametersBatchJobParametersContainerOverridesPtrOutput
}

type pipeTargetParametersBatchJobParametersContainerOverridesPtrType PipeTargetParametersBatchJobParametersContainerOverridesArgs

func PipeTargetParametersBatchJobParametersContainerOverridesPtr(v *PipeTargetParametersBatchJobParametersContainerOverridesArgs) PipeTargetParametersBatchJobParametersContainerOverridesPtrInput {
	return (*pipeTargetParametersBatchJobParametersContainerOverridesPtrType)(v)
}

func (*pipeTargetParametersBatchJobParametersContainerOverridesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParametersBatchJobParametersContainerOverrides)(nil)).Elem()
}

func (i *pipeTargetParametersBatchJobParametersContainerOverridesPtrType) ToPipeTargetParametersBatchJobParametersContainerOverridesPtrOutput() PipeTargetParametersBatchJobParametersContainerOverridesPtrOutput {
	return i.ToPipeTargetParametersBatchJobParametersContainerOverridesPtrOutputWithContext(context.Background())
}

func (i *pipeTargetParametersBatchJobParametersContainerOverridesPtrType) ToPipeTargetParametersBatchJobParametersContainerOverridesPtrOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersContainerOverridesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersBatchJobParametersContainerOverridesPtrOutput)
}

func (i *pipeTargetParametersBatchJobParametersContainerOverridesPtrType) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersBatchJobParametersContainerOverrides] {
	return pulumix.Output[*PipeTargetParametersBatchJobParametersContainerOverrides]{
		OutputState: i.ToPipeTargetParametersBatchJobParametersContainerOverridesPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeTargetParametersBatchJobParametersContainerOverridesOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersBatchJobParametersContainerOverridesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersBatchJobParametersContainerOverrides)(nil)).Elem()
}

func (o PipeTargetParametersBatchJobParametersContainerOverridesOutput) ToPipeTargetParametersBatchJobParametersContainerOverridesOutput() PipeTargetParametersBatchJobParametersContainerOverridesOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersContainerOverridesOutput) ToPipeTargetParametersBatchJobParametersContainerOverridesOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersContainerOverridesOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersContainerOverridesOutput) ToPipeTargetParametersBatchJobParametersContainerOverridesPtrOutput() PipeTargetParametersBatchJobParametersContainerOverridesPtrOutput {
	return o.ToPipeTargetParametersBatchJobParametersContainerOverridesPtrOutputWithContext(context.Background())
}

func (o PipeTargetParametersBatchJobParametersContainerOverridesOutput) ToPipeTargetParametersBatchJobParametersContainerOverridesPtrOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersContainerOverridesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeTargetParametersBatchJobParametersContainerOverrides) *PipeTargetParametersBatchJobParametersContainerOverrides {
		return &v
	}).(PipeTargetParametersBatchJobParametersContainerOverridesPtrOutput)
}

func (o PipeTargetParametersBatchJobParametersContainerOverridesOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersBatchJobParametersContainerOverrides] {
	return pulumix.Output[PipeTargetParametersBatchJobParametersContainerOverrides]{
		OutputState: o.OutputState,
	}
}

// List of commands to send to the container that overrides the default command from the Docker image or the task definition. You must also specify a container name.
func (o PipeTargetParametersBatchJobParametersContainerOverridesOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipeTargetParametersBatchJobParametersContainerOverrides) []string { return v.Commands }).(pulumi.StringArrayOutput)
}

// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. You must also specify a container name. Detailed below.
func (o PipeTargetParametersBatchJobParametersContainerOverridesOutput) Environments() PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArrayOutput {
	return o.ApplyT(func(v PipeTargetParametersBatchJobParametersContainerOverrides) []PipeTargetParametersBatchJobParametersContainerOverridesEnvironment {
		return v.Environments
	}).(PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArrayOutput)
}

// The instance type to use for a multi-node parallel job. This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.
func (o PipeTargetParametersBatchJobParametersContainerOverridesOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersBatchJobParametersContainerOverrides) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// The type and amount of a resource to assign to a container, instead of the default value from the task definition. The only supported resource is a GPU. Detailed below.
func (o PipeTargetParametersBatchJobParametersContainerOverridesOutput) ResourceRequirements() PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArrayOutput {
	return o.ApplyT(func(v PipeTargetParametersBatchJobParametersContainerOverrides) []PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirement {
		return v.ResourceRequirements
	}).(PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArrayOutput)
}

type PipeTargetParametersBatchJobParametersContainerOverridesPtrOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersBatchJobParametersContainerOverridesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParametersBatchJobParametersContainerOverrides)(nil)).Elem()
}

func (o PipeTargetParametersBatchJobParametersContainerOverridesPtrOutput) ToPipeTargetParametersBatchJobParametersContainerOverridesPtrOutput() PipeTargetParametersBatchJobParametersContainerOverridesPtrOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersContainerOverridesPtrOutput) ToPipeTargetParametersBatchJobParametersContainerOverridesPtrOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersContainerOverridesPtrOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersContainerOverridesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersBatchJobParametersContainerOverrides] {
	return pulumix.Output[*PipeTargetParametersBatchJobParametersContainerOverrides]{
		OutputState: o.OutputState,
	}
}

func (o PipeTargetParametersBatchJobParametersContainerOverridesPtrOutput) Elem() PipeTargetParametersBatchJobParametersContainerOverridesOutput {
	return o.ApplyT(func(v *PipeTargetParametersBatchJobParametersContainerOverrides) PipeTargetParametersBatchJobParametersContainerOverrides {
		if v != nil {
			return *v
		}
		var ret PipeTargetParametersBatchJobParametersContainerOverrides
		return ret
	}).(PipeTargetParametersBatchJobParametersContainerOverridesOutput)
}

// List of commands to send to the container that overrides the default command from the Docker image or the task definition. You must also specify a container name.
func (o PipeTargetParametersBatchJobParametersContainerOverridesPtrOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PipeTargetParametersBatchJobParametersContainerOverrides) []string {
		if v == nil {
			return nil
		}
		return v.Commands
	}).(pulumi.StringArrayOutput)
}

// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. You must also specify a container name. Detailed below.
func (o PipeTargetParametersBatchJobParametersContainerOverridesPtrOutput) Environments() PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArrayOutput {
	return o.ApplyT(func(v *PipeTargetParametersBatchJobParametersContainerOverrides) []PipeTargetParametersBatchJobParametersContainerOverridesEnvironment {
		if v == nil {
			return nil
		}
		return v.Environments
	}).(PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArrayOutput)
}

// The instance type to use for a multi-node parallel job. This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.
func (o PipeTargetParametersBatchJobParametersContainerOverridesPtrOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersBatchJobParametersContainerOverrides) *string {
		if v == nil {
			return nil
		}
		return v.InstanceType
	}).(pulumi.StringPtrOutput)
}

// The type and amount of a resource to assign to a container, instead of the default value from the task definition. The only supported resource is a GPU. Detailed below.
func (o PipeTargetParametersBatchJobParametersContainerOverridesPtrOutput) ResourceRequirements() PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArrayOutput {
	return o.ApplyT(func(v *PipeTargetParametersBatchJobParametersContainerOverrides) []PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirement {
		if v == nil {
			return nil
		}
		return v.ResourceRequirements
	}).(PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArrayOutput)
}

type PipeTargetParametersBatchJobParametersContainerOverridesEnvironment struct {
	// Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// Value of parameter to start execution of a SageMaker Model Building Pipeline. Maximum length of 1024.
	Value *string `pulumi:"value"`
}

// PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentInput is an input type that accepts PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArgs and PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput values.
// You can construct a concrete instance of `PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentInput` via:
//
//	PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArgs{...}
type PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentInput interface {
	pulumi.Input

	ToPipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput() PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput
	ToPipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutputWithContext(context.Context) PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput
}

type PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArgs struct {
	// Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Value of parameter to start execution of a SageMaker Model Building Pipeline. Maximum length of 1024.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersBatchJobParametersContainerOverridesEnvironment)(nil)).Elem()
}

func (i PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArgs) ToPipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput() PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput {
	return i.ToPipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutputWithContext(context.Background())
}

func (i PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArgs) ToPipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput)
}

func (i PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArgs) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersBatchJobParametersContainerOverridesEnvironment] {
	return pulumix.Output[PipeTargetParametersBatchJobParametersContainerOverridesEnvironment]{
		OutputState: i.ToPipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutputWithContext(ctx).OutputState,
	}
}

// PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArrayInput is an input type that accepts PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArray and PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArrayOutput values.
// You can construct a concrete instance of `PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArrayInput` via:
//
//	PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArray{ PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArgs{...} }
type PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArrayInput interface {
	pulumi.Input

	ToPipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArrayOutput() PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArrayOutput
	ToPipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArrayOutputWithContext(context.Context) PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArrayOutput
}

type PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArray []PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentInput

func (PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeTargetParametersBatchJobParametersContainerOverridesEnvironment)(nil)).Elem()
}

func (i PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArray) ToPipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArrayOutput() PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArrayOutput {
	return i.ToPipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArrayOutputWithContext(context.Background())
}

func (i PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArray) ToPipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArrayOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArrayOutput)
}

func (i PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArray) ToOutput(ctx context.Context) pulumix.Output[[]PipeTargetParametersBatchJobParametersContainerOverridesEnvironment] {
	return pulumix.Output[[]PipeTargetParametersBatchJobParametersContainerOverridesEnvironment]{
		OutputState: i.ToPipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArrayOutputWithContext(ctx).OutputState,
	}
}

type PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersBatchJobParametersContainerOverridesEnvironment)(nil)).Elem()
}

func (o PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput) ToPipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput() PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput) ToPipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersBatchJobParametersContainerOverridesEnvironment] {
	return pulumix.Output[PipeTargetParametersBatchJobParametersContainerOverridesEnvironment]{
		OutputState: o.OutputState,
	}
}

// Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
func (o PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersBatchJobParametersContainerOverridesEnvironment) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value of parameter to start execution of a SageMaker Model Building Pipeline. Maximum length of 1024.
func (o PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersBatchJobParametersContainerOverridesEnvironment) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArrayOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeTargetParametersBatchJobParametersContainerOverridesEnvironment)(nil)).Elem()
}

func (o PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArrayOutput) ToPipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArrayOutput() PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArrayOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArrayOutput) ToPipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArrayOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArrayOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PipeTargetParametersBatchJobParametersContainerOverridesEnvironment] {
	return pulumix.Output[[]PipeTargetParametersBatchJobParametersContainerOverridesEnvironment]{
		OutputState: o.OutputState,
	}
}

func (o PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArrayOutput) Index(i pulumi.IntInput) PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipeTargetParametersBatchJobParametersContainerOverridesEnvironment {
		return vs[0].([]PipeTargetParametersBatchJobParametersContainerOverridesEnvironment)[vs[1].(int)]
	}).(PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput)
}

type PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirement struct {
	// The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task). Valid Values: random, spread, binpack.
	Type string `pulumi:"type"`
	// Value of parameter to start execution of a SageMaker Model Building Pipeline. Maximum length of 1024.
	Value string `pulumi:"value"`
}

// PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementInput is an input type that accepts PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArgs and PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput values.
// You can construct a concrete instance of `PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementInput` via:
//
//	PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArgs{...}
type PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementInput interface {
	pulumi.Input

	ToPipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput() PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput
	ToPipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutputWithContext(context.Context) PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput
}

type PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArgs struct {
	// The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task). Valid Values: random, spread, binpack.
	Type pulumi.StringInput `pulumi:"type"`
	// Value of parameter to start execution of a SageMaker Model Building Pipeline. Maximum length of 1024.
	Value pulumi.StringInput `pulumi:"value"`
}

func (PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirement)(nil)).Elem()
}

func (i PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArgs) ToPipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput() PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput {
	return i.ToPipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutputWithContext(context.Background())
}

func (i PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArgs) ToPipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput)
}

func (i PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArgs) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirement] {
	return pulumix.Output[PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirement]{
		OutputState: i.ToPipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutputWithContext(ctx).OutputState,
	}
}

// PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArrayInput is an input type that accepts PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArray and PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArrayOutput values.
// You can construct a concrete instance of `PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArrayInput` via:
//
//	PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArray{ PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArgs{...} }
type PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArrayInput interface {
	pulumi.Input

	ToPipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArrayOutput() PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArrayOutput
	ToPipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArrayOutputWithContext(context.Context) PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArrayOutput
}

type PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArray []PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementInput

func (PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirement)(nil)).Elem()
}

func (i PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArray) ToPipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArrayOutput() PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArrayOutput {
	return i.ToPipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArrayOutputWithContext(context.Background())
}

func (i PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArray) ToPipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArrayOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArrayOutput)
}

func (i PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArray) ToOutput(ctx context.Context) pulumix.Output[[]PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirement] {
	return pulumix.Output[[]PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirement]{
		OutputState: i.ToPipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArrayOutputWithContext(ctx).OutputState,
	}
}

type PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirement)(nil)).Elem()
}

func (o PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput) ToPipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput() PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput) ToPipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirement] {
	return pulumix.Output[PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirement]{
		OutputState: o.OutputState,
	}
}

// The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task). Valid Values: random, spread, binpack.
func (o PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirement) string {
		return v.Type
	}).(pulumi.StringOutput)
}

// Value of parameter to start execution of a SageMaker Model Building Pipeline. Maximum length of 1024.
func (o PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirement) string {
		return v.Value
	}).(pulumi.StringOutput)
}

type PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArrayOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirement)(nil)).Elem()
}

func (o PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArrayOutput) ToPipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArrayOutput() PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArrayOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArrayOutput) ToPipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArrayOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArrayOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirement] {
	return pulumix.Output[[]PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirement]{
		OutputState: o.OutputState,
	}
}

func (o PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArrayOutput) Index(i pulumi.IntInput) PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirement {
		return vs[0].([]PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirement)[vs[1].(int)]
	}).(PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput)
}

type PipeTargetParametersBatchJobParametersDependsOn struct {
	// The job ID of the AWS Batch job that's associated with this dependency.
	JobId *string `pulumi:"jobId"`
	// The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task). Valid Values: random, spread, binpack.
	Type *string `pulumi:"type"`
}

// PipeTargetParametersBatchJobParametersDependsOnInput is an input type that accepts PipeTargetParametersBatchJobParametersDependsOnArgs and PipeTargetParametersBatchJobParametersDependsOnOutput values.
// You can construct a concrete instance of `PipeTargetParametersBatchJobParametersDependsOnInput` via:
//
//	PipeTargetParametersBatchJobParametersDependsOnArgs{...}
type PipeTargetParametersBatchJobParametersDependsOnInput interface {
	pulumi.Input

	ToPipeTargetParametersBatchJobParametersDependsOnOutput() PipeTargetParametersBatchJobParametersDependsOnOutput
	ToPipeTargetParametersBatchJobParametersDependsOnOutputWithContext(context.Context) PipeTargetParametersBatchJobParametersDependsOnOutput
}

type PipeTargetParametersBatchJobParametersDependsOnArgs struct {
	// The job ID of the AWS Batch job that's associated with this dependency.
	JobId pulumi.StringPtrInput `pulumi:"jobId"`
	// The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task). Valid Values: random, spread, binpack.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (PipeTargetParametersBatchJobParametersDependsOnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersBatchJobParametersDependsOn)(nil)).Elem()
}

func (i PipeTargetParametersBatchJobParametersDependsOnArgs) ToPipeTargetParametersBatchJobParametersDependsOnOutput() PipeTargetParametersBatchJobParametersDependsOnOutput {
	return i.ToPipeTargetParametersBatchJobParametersDependsOnOutputWithContext(context.Background())
}

func (i PipeTargetParametersBatchJobParametersDependsOnArgs) ToPipeTargetParametersBatchJobParametersDependsOnOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersDependsOnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersBatchJobParametersDependsOnOutput)
}

func (i PipeTargetParametersBatchJobParametersDependsOnArgs) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersBatchJobParametersDependsOn] {
	return pulumix.Output[PipeTargetParametersBatchJobParametersDependsOn]{
		OutputState: i.ToPipeTargetParametersBatchJobParametersDependsOnOutputWithContext(ctx).OutputState,
	}
}

// PipeTargetParametersBatchJobParametersDependsOnArrayInput is an input type that accepts PipeTargetParametersBatchJobParametersDependsOnArray and PipeTargetParametersBatchJobParametersDependsOnArrayOutput values.
// You can construct a concrete instance of `PipeTargetParametersBatchJobParametersDependsOnArrayInput` via:
//
//	PipeTargetParametersBatchJobParametersDependsOnArray{ PipeTargetParametersBatchJobParametersDependsOnArgs{...} }
type PipeTargetParametersBatchJobParametersDependsOnArrayInput interface {
	pulumi.Input

	ToPipeTargetParametersBatchJobParametersDependsOnArrayOutput() PipeTargetParametersBatchJobParametersDependsOnArrayOutput
	ToPipeTargetParametersBatchJobParametersDependsOnArrayOutputWithContext(context.Context) PipeTargetParametersBatchJobParametersDependsOnArrayOutput
}

type PipeTargetParametersBatchJobParametersDependsOnArray []PipeTargetParametersBatchJobParametersDependsOnInput

func (PipeTargetParametersBatchJobParametersDependsOnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeTargetParametersBatchJobParametersDependsOn)(nil)).Elem()
}

func (i PipeTargetParametersBatchJobParametersDependsOnArray) ToPipeTargetParametersBatchJobParametersDependsOnArrayOutput() PipeTargetParametersBatchJobParametersDependsOnArrayOutput {
	return i.ToPipeTargetParametersBatchJobParametersDependsOnArrayOutputWithContext(context.Background())
}

func (i PipeTargetParametersBatchJobParametersDependsOnArray) ToPipeTargetParametersBatchJobParametersDependsOnArrayOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersDependsOnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersBatchJobParametersDependsOnArrayOutput)
}

func (i PipeTargetParametersBatchJobParametersDependsOnArray) ToOutput(ctx context.Context) pulumix.Output[[]PipeTargetParametersBatchJobParametersDependsOn] {
	return pulumix.Output[[]PipeTargetParametersBatchJobParametersDependsOn]{
		OutputState: i.ToPipeTargetParametersBatchJobParametersDependsOnArrayOutputWithContext(ctx).OutputState,
	}
}

type PipeTargetParametersBatchJobParametersDependsOnOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersBatchJobParametersDependsOnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersBatchJobParametersDependsOn)(nil)).Elem()
}

func (o PipeTargetParametersBatchJobParametersDependsOnOutput) ToPipeTargetParametersBatchJobParametersDependsOnOutput() PipeTargetParametersBatchJobParametersDependsOnOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersDependsOnOutput) ToPipeTargetParametersBatchJobParametersDependsOnOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersDependsOnOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersDependsOnOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersBatchJobParametersDependsOn] {
	return pulumix.Output[PipeTargetParametersBatchJobParametersDependsOn]{
		OutputState: o.OutputState,
	}
}

// The job ID of the AWS Batch job that's associated with this dependency.
func (o PipeTargetParametersBatchJobParametersDependsOnOutput) JobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersBatchJobParametersDependsOn) *string { return v.JobId }).(pulumi.StringPtrOutput)
}

// The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task). Valid Values: random, spread, binpack.
func (o PipeTargetParametersBatchJobParametersDependsOnOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersBatchJobParametersDependsOn) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PipeTargetParametersBatchJobParametersDependsOnArrayOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersBatchJobParametersDependsOnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeTargetParametersBatchJobParametersDependsOn)(nil)).Elem()
}

func (o PipeTargetParametersBatchJobParametersDependsOnArrayOutput) ToPipeTargetParametersBatchJobParametersDependsOnArrayOutput() PipeTargetParametersBatchJobParametersDependsOnArrayOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersDependsOnArrayOutput) ToPipeTargetParametersBatchJobParametersDependsOnArrayOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersDependsOnArrayOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersDependsOnArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PipeTargetParametersBatchJobParametersDependsOn] {
	return pulumix.Output[[]PipeTargetParametersBatchJobParametersDependsOn]{
		OutputState: o.OutputState,
	}
}

func (o PipeTargetParametersBatchJobParametersDependsOnArrayOutput) Index(i pulumi.IntInput) PipeTargetParametersBatchJobParametersDependsOnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipeTargetParametersBatchJobParametersDependsOn {
		return vs[0].([]PipeTargetParametersBatchJobParametersDependsOn)[vs[1].(int)]
	}).(PipeTargetParametersBatchJobParametersDependsOnOutput)
}

type PipeTargetParametersBatchJobParametersRetryStrategy struct {
	// The number of times to move a job to the RUNNABLE status. If the value of attempts is greater than one, the job is retried on failure the same number of attempts as the value. Maximum value of 10.
	Attempts *int `pulumi:"attempts"`
}

// PipeTargetParametersBatchJobParametersRetryStrategyInput is an input type that accepts PipeTargetParametersBatchJobParametersRetryStrategyArgs and PipeTargetParametersBatchJobParametersRetryStrategyOutput values.
// You can construct a concrete instance of `PipeTargetParametersBatchJobParametersRetryStrategyInput` via:
//
//	PipeTargetParametersBatchJobParametersRetryStrategyArgs{...}
type PipeTargetParametersBatchJobParametersRetryStrategyInput interface {
	pulumi.Input

	ToPipeTargetParametersBatchJobParametersRetryStrategyOutput() PipeTargetParametersBatchJobParametersRetryStrategyOutput
	ToPipeTargetParametersBatchJobParametersRetryStrategyOutputWithContext(context.Context) PipeTargetParametersBatchJobParametersRetryStrategyOutput
}

type PipeTargetParametersBatchJobParametersRetryStrategyArgs struct {
	// The number of times to move a job to the RUNNABLE status. If the value of attempts is greater than one, the job is retried on failure the same number of attempts as the value. Maximum value of 10.
	Attempts pulumi.IntPtrInput `pulumi:"attempts"`
}

func (PipeTargetParametersBatchJobParametersRetryStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersBatchJobParametersRetryStrategy)(nil)).Elem()
}

func (i PipeTargetParametersBatchJobParametersRetryStrategyArgs) ToPipeTargetParametersBatchJobParametersRetryStrategyOutput() PipeTargetParametersBatchJobParametersRetryStrategyOutput {
	return i.ToPipeTargetParametersBatchJobParametersRetryStrategyOutputWithContext(context.Background())
}

func (i PipeTargetParametersBatchJobParametersRetryStrategyArgs) ToPipeTargetParametersBatchJobParametersRetryStrategyOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersRetryStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersBatchJobParametersRetryStrategyOutput)
}

func (i PipeTargetParametersBatchJobParametersRetryStrategyArgs) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersBatchJobParametersRetryStrategy] {
	return pulumix.Output[PipeTargetParametersBatchJobParametersRetryStrategy]{
		OutputState: i.ToPipeTargetParametersBatchJobParametersRetryStrategyOutputWithContext(ctx).OutputState,
	}
}

func (i PipeTargetParametersBatchJobParametersRetryStrategyArgs) ToPipeTargetParametersBatchJobParametersRetryStrategyPtrOutput() PipeTargetParametersBatchJobParametersRetryStrategyPtrOutput {
	return i.ToPipeTargetParametersBatchJobParametersRetryStrategyPtrOutputWithContext(context.Background())
}

func (i PipeTargetParametersBatchJobParametersRetryStrategyArgs) ToPipeTargetParametersBatchJobParametersRetryStrategyPtrOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersRetryStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersBatchJobParametersRetryStrategyOutput).ToPipeTargetParametersBatchJobParametersRetryStrategyPtrOutputWithContext(ctx)
}

// PipeTargetParametersBatchJobParametersRetryStrategyPtrInput is an input type that accepts PipeTargetParametersBatchJobParametersRetryStrategyArgs, PipeTargetParametersBatchJobParametersRetryStrategyPtr and PipeTargetParametersBatchJobParametersRetryStrategyPtrOutput values.
// You can construct a concrete instance of `PipeTargetParametersBatchJobParametersRetryStrategyPtrInput` via:
//
//	        PipeTargetParametersBatchJobParametersRetryStrategyArgs{...}
//
//	or:
//
//	        nil
type PipeTargetParametersBatchJobParametersRetryStrategyPtrInput interface {
	pulumi.Input

	ToPipeTargetParametersBatchJobParametersRetryStrategyPtrOutput() PipeTargetParametersBatchJobParametersRetryStrategyPtrOutput
	ToPipeTargetParametersBatchJobParametersRetryStrategyPtrOutputWithContext(context.Context) PipeTargetParametersBatchJobParametersRetryStrategyPtrOutput
}

type pipeTargetParametersBatchJobParametersRetryStrategyPtrType PipeTargetParametersBatchJobParametersRetryStrategyArgs

func PipeTargetParametersBatchJobParametersRetryStrategyPtr(v *PipeTargetParametersBatchJobParametersRetryStrategyArgs) PipeTargetParametersBatchJobParametersRetryStrategyPtrInput {
	return (*pipeTargetParametersBatchJobParametersRetryStrategyPtrType)(v)
}

func (*pipeTargetParametersBatchJobParametersRetryStrategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParametersBatchJobParametersRetryStrategy)(nil)).Elem()
}

func (i *pipeTargetParametersBatchJobParametersRetryStrategyPtrType) ToPipeTargetParametersBatchJobParametersRetryStrategyPtrOutput() PipeTargetParametersBatchJobParametersRetryStrategyPtrOutput {
	return i.ToPipeTargetParametersBatchJobParametersRetryStrategyPtrOutputWithContext(context.Background())
}

func (i *pipeTargetParametersBatchJobParametersRetryStrategyPtrType) ToPipeTargetParametersBatchJobParametersRetryStrategyPtrOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersRetryStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersBatchJobParametersRetryStrategyPtrOutput)
}

func (i *pipeTargetParametersBatchJobParametersRetryStrategyPtrType) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersBatchJobParametersRetryStrategy] {
	return pulumix.Output[*PipeTargetParametersBatchJobParametersRetryStrategy]{
		OutputState: i.ToPipeTargetParametersBatchJobParametersRetryStrategyPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeTargetParametersBatchJobParametersRetryStrategyOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersBatchJobParametersRetryStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersBatchJobParametersRetryStrategy)(nil)).Elem()
}

func (o PipeTargetParametersBatchJobParametersRetryStrategyOutput) ToPipeTargetParametersBatchJobParametersRetryStrategyOutput() PipeTargetParametersBatchJobParametersRetryStrategyOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersRetryStrategyOutput) ToPipeTargetParametersBatchJobParametersRetryStrategyOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersRetryStrategyOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersRetryStrategyOutput) ToPipeTargetParametersBatchJobParametersRetryStrategyPtrOutput() PipeTargetParametersBatchJobParametersRetryStrategyPtrOutput {
	return o.ToPipeTargetParametersBatchJobParametersRetryStrategyPtrOutputWithContext(context.Background())
}

func (o PipeTargetParametersBatchJobParametersRetryStrategyOutput) ToPipeTargetParametersBatchJobParametersRetryStrategyPtrOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersRetryStrategyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeTargetParametersBatchJobParametersRetryStrategy) *PipeTargetParametersBatchJobParametersRetryStrategy {
		return &v
	}).(PipeTargetParametersBatchJobParametersRetryStrategyPtrOutput)
}

func (o PipeTargetParametersBatchJobParametersRetryStrategyOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersBatchJobParametersRetryStrategy] {
	return pulumix.Output[PipeTargetParametersBatchJobParametersRetryStrategy]{
		OutputState: o.OutputState,
	}
}

// The number of times to move a job to the RUNNABLE status. If the value of attempts is greater than one, the job is retried on failure the same number of attempts as the value. Maximum value of 10.
func (o PipeTargetParametersBatchJobParametersRetryStrategyOutput) Attempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersBatchJobParametersRetryStrategy) *int { return v.Attempts }).(pulumi.IntPtrOutput)
}

type PipeTargetParametersBatchJobParametersRetryStrategyPtrOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersBatchJobParametersRetryStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParametersBatchJobParametersRetryStrategy)(nil)).Elem()
}

func (o PipeTargetParametersBatchJobParametersRetryStrategyPtrOutput) ToPipeTargetParametersBatchJobParametersRetryStrategyPtrOutput() PipeTargetParametersBatchJobParametersRetryStrategyPtrOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersRetryStrategyPtrOutput) ToPipeTargetParametersBatchJobParametersRetryStrategyPtrOutputWithContext(ctx context.Context) PipeTargetParametersBatchJobParametersRetryStrategyPtrOutput {
	return o
}

func (o PipeTargetParametersBatchJobParametersRetryStrategyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersBatchJobParametersRetryStrategy] {
	return pulumix.Output[*PipeTargetParametersBatchJobParametersRetryStrategy]{
		OutputState: o.OutputState,
	}
}

func (o PipeTargetParametersBatchJobParametersRetryStrategyPtrOutput) Elem() PipeTargetParametersBatchJobParametersRetryStrategyOutput {
	return o.ApplyT(func(v *PipeTargetParametersBatchJobParametersRetryStrategy) PipeTargetParametersBatchJobParametersRetryStrategy {
		if v != nil {
			return *v
		}
		var ret PipeTargetParametersBatchJobParametersRetryStrategy
		return ret
	}).(PipeTargetParametersBatchJobParametersRetryStrategyOutput)
}

// The number of times to move a job to the RUNNABLE status. If the value of attempts is greater than one, the job is retried on failure the same number of attempts as the value. Maximum value of 10.
func (o PipeTargetParametersBatchJobParametersRetryStrategyPtrOutput) Attempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersBatchJobParametersRetryStrategy) *int {
		if v == nil {
			return nil
		}
		return v.Attempts
	}).(pulumi.IntPtrOutput)
}

type PipeTargetParametersCloudwatchLogsParameters struct {
	// The name of the log stream.
	LogStreamName *string `pulumi:"logStreamName"`
	// The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. This is the JSON path to the field in the event e.g. $.detail.timestamp
	Timestamp *string `pulumi:"timestamp"`
}

// PipeTargetParametersCloudwatchLogsParametersInput is an input type that accepts PipeTargetParametersCloudwatchLogsParametersArgs and PipeTargetParametersCloudwatchLogsParametersOutput values.
// You can construct a concrete instance of `PipeTargetParametersCloudwatchLogsParametersInput` via:
//
//	PipeTargetParametersCloudwatchLogsParametersArgs{...}
type PipeTargetParametersCloudwatchLogsParametersInput interface {
	pulumi.Input

	ToPipeTargetParametersCloudwatchLogsParametersOutput() PipeTargetParametersCloudwatchLogsParametersOutput
	ToPipeTargetParametersCloudwatchLogsParametersOutputWithContext(context.Context) PipeTargetParametersCloudwatchLogsParametersOutput
}

type PipeTargetParametersCloudwatchLogsParametersArgs struct {
	// The name of the log stream.
	LogStreamName pulumi.StringPtrInput `pulumi:"logStreamName"`
	// The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. This is the JSON path to the field in the event e.g. $.detail.timestamp
	Timestamp pulumi.StringPtrInput `pulumi:"timestamp"`
}

func (PipeTargetParametersCloudwatchLogsParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersCloudwatchLogsParameters)(nil)).Elem()
}

func (i PipeTargetParametersCloudwatchLogsParametersArgs) ToPipeTargetParametersCloudwatchLogsParametersOutput() PipeTargetParametersCloudwatchLogsParametersOutput {
	return i.ToPipeTargetParametersCloudwatchLogsParametersOutputWithContext(context.Background())
}

func (i PipeTargetParametersCloudwatchLogsParametersArgs) ToPipeTargetParametersCloudwatchLogsParametersOutputWithContext(ctx context.Context) PipeTargetParametersCloudwatchLogsParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersCloudwatchLogsParametersOutput)
}

func (i PipeTargetParametersCloudwatchLogsParametersArgs) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersCloudwatchLogsParameters] {
	return pulumix.Output[PipeTargetParametersCloudwatchLogsParameters]{
		OutputState: i.ToPipeTargetParametersCloudwatchLogsParametersOutputWithContext(ctx).OutputState,
	}
}

func (i PipeTargetParametersCloudwatchLogsParametersArgs) ToPipeTargetParametersCloudwatchLogsParametersPtrOutput() PipeTargetParametersCloudwatchLogsParametersPtrOutput {
	return i.ToPipeTargetParametersCloudwatchLogsParametersPtrOutputWithContext(context.Background())
}

func (i PipeTargetParametersCloudwatchLogsParametersArgs) ToPipeTargetParametersCloudwatchLogsParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersCloudwatchLogsParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersCloudwatchLogsParametersOutput).ToPipeTargetParametersCloudwatchLogsParametersPtrOutputWithContext(ctx)
}

// PipeTargetParametersCloudwatchLogsParametersPtrInput is an input type that accepts PipeTargetParametersCloudwatchLogsParametersArgs, PipeTargetParametersCloudwatchLogsParametersPtr and PipeTargetParametersCloudwatchLogsParametersPtrOutput values.
// You can construct a concrete instance of `PipeTargetParametersCloudwatchLogsParametersPtrInput` via:
//
//	        PipeTargetParametersCloudwatchLogsParametersArgs{...}
//
//	or:
//
//	        nil
type PipeTargetParametersCloudwatchLogsParametersPtrInput interface {
	pulumi.Input

	ToPipeTargetParametersCloudwatchLogsParametersPtrOutput() PipeTargetParametersCloudwatchLogsParametersPtrOutput
	ToPipeTargetParametersCloudwatchLogsParametersPtrOutputWithContext(context.Context) PipeTargetParametersCloudwatchLogsParametersPtrOutput
}

type pipeTargetParametersCloudwatchLogsParametersPtrType PipeTargetParametersCloudwatchLogsParametersArgs

func PipeTargetParametersCloudwatchLogsParametersPtr(v *PipeTargetParametersCloudwatchLogsParametersArgs) PipeTargetParametersCloudwatchLogsParametersPtrInput {
	return (*pipeTargetParametersCloudwatchLogsParametersPtrType)(v)
}

func (*pipeTargetParametersCloudwatchLogsParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParametersCloudwatchLogsParameters)(nil)).Elem()
}

func (i *pipeTargetParametersCloudwatchLogsParametersPtrType) ToPipeTargetParametersCloudwatchLogsParametersPtrOutput() PipeTargetParametersCloudwatchLogsParametersPtrOutput {
	return i.ToPipeTargetParametersCloudwatchLogsParametersPtrOutputWithContext(context.Background())
}

func (i *pipeTargetParametersCloudwatchLogsParametersPtrType) ToPipeTargetParametersCloudwatchLogsParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersCloudwatchLogsParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersCloudwatchLogsParametersPtrOutput)
}

func (i *pipeTargetParametersCloudwatchLogsParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersCloudwatchLogsParameters] {
	return pulumix.Output[*PipeTargetParametersCloudwatchLogsParameters]{
		OutputState: i.ToPipeTargetParametersCloudwatchLogsParametersPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeTargetParametersCloudwatchLogsParametersOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersCloudwatchLogsParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersCloudwatchLogsParameters)(nil)).Elem()
}

func (o PipeTargetParametersCloudwatchLogsParametersOutput) ToPipeTargetParametersCloudwatchLogsParametersOutput() PipeTargetParametersCloudwatchLogsParametersOutput {
	return o
}

func (o PipeTargetParametersCloudwatchLogsParametersOutput) ToPipeTargetParametersCloudwatchLogsParametersOutputWithContext(ctx context.Context) PipeTargetParametersCloudwatchLogsParametersOutput {
	return o
}

func (o PipeTargetParametersCloudwatchLogsParametersOutput) ToPipeTargetParametersCloudwatchLogsParametersPtrOutput() PipeTargetParametersCloudwatchLogsParametersPtrOutput {
	return o.ToPipeTargetParametersCloudwatchLogsParametersPtrOutputWithContext(context.Background())
}

func (o PipeTargetParametersCloudwatchLogsParametersOutput) ToPipeTargetParametersCloudwatchLogsParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersCloudwatchLogsParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeTargetParametersCloudwatchLogsParameters) *PipeTargetParametersCloudwatchLogsParameters {
		return &v
	}).(PipeTargetParametersCloudwatchLogsParametersPtrOutput)
}

func (o PipeTargetParametersCloudwatchLogsParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersCloudwatchLogsParameters] {
	return pulumix.Output[PipeTargetParametersCloudwatchLogsParameters]{
		OutputState: o.OutputState,
	}
}

// The name of the log stream.
func (o PipeTargetParametersCloudwatchLogsParametersOutput) LogStreamName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersCloudwatchLogsParameters) *string { return v.LogStreamName }).(pulumi.StringPtrOutput)
}

// The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. This is the JSON path to the field in the event e.g. $.detail.timestamp
func (o PipeTargetParametersCloudwatchLogsParametersOutput) Timestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersCloudwatchLogsParameters) *string { return v.Timestamp }).(pulumi.StringPtrOutput)
}

type PipeTargetParametersCloudwatchLogsParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersCloudwatchLogsParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParametersCloudwatchLogsParameters)(nil)).Elem()
}

func (o PipeTargetParametersCloudwatchLogsParametersPtrOutput) ToPipeTargetParametersCloudwatchLogsParametersPtrOutput() PipeTargetParametersCloudwatchLogsParametersPtrOutput {
	return o
}

func (o PipeTargetParametersCloudwatchLogsParametersPtrOutput) ToPipeTargetParametersCloudwatchLogsParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersCloudwatchLogsParametersPtrOutput {
	return o
}

func (o PipeTargetParametersCloudwatchLogsParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersCloudwatchLogsParameters] {
	return pulumix.Output[*PipeTargetParametersCloudwatchLogsParameters]{
		OutputState: o.OutputState,
	}
}

func (o PipeTargetParametersCloudwatchLogsParametersPtrOutput) Elem() PipeTargetParametersCloudwatchLogsParametersOutput {
	return o.ApplyT(func(v *PipeTargetParametersCloudwatchLogsParameters) PipeTargetParametersCloudwatchLogsParameters {
		if v != nil {
			return *v
		}
		var ret PipeTargetParametersCloudwatchLogsParameters
		return ret
	}).(PipeTargetParametersCloudwatchLogsParametersOutput)
}

// The name of the log stream.
func (o PipeTargetParametersCloudwatchLogsParametersPtrOutput) LogStreamName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersCloudwatchLogsParameters) *string {
		if v == nil {
			return nil
		}
		return v.LogStreamName
	}).(pulumi.StringPtrOutput)
}

// The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. This is the JSON path to the field in the event e.g. $.detail.timestamp
func (o PipeTargetParametersCloudwatchLogsParametersPtrOutput) Timestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersCloudwatchLogsParameters) *string {
		if v == nil {
			return nil
		}
		return v.Timestamp
	}).(pulumi.StringPtrOutput)
}

type PipeTargetParametersEcsTaskParameters struct {
	// List of capacity provider strategies to use for the task. If a capacityProviderStrategy is specified, the launchType parameter must be omitted. If no capacityProviderStrategy or launchType is specified, the defaultCapacityProviderStrategy for the cluster is used. Detailed below.
	CapacityProviderStrategies []PipeTargetParametersEcsTaskParametersCapacityProviderStrategy `pulumi:"capacityProviderStrategies"`
	// Specifies whether to enable Amazon ECS managed tags for the task. Valid values: true, false.
	EnableEcsManagedTags *bool `pulumi:"enableEcsManagedTags"`
	// Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task. Valid values: true, false.
	EnableExecuteCommand *bool `pulumi:"enableExecuteCommand"`
	// Specifies an Amazon ECS task group for the task. The maximum length is 255 characters.
	Group *string `pulumi:"group"`
	// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. The FARGATE value is supported only in the Regions where AWS Fargate with Amazon ECS is supported. Valid Values: EC2, FARGATE, EXTERNAL
	LaunchType *string `pulumi:"launchType"`
	// Use this structure if the Amazon ECS task uses the awsvpc network mode. This structure specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. This structure is required if LaunchType is FARGATE because the awsvpc mode is required for Fargate tasks. If you specify NetworkConfiguration when the target ECS task does not use the awsvpc network mode, the task fails. Detailed below.
	NetworkConfiguration *PipeTargetParametersEcsTaskParametersNetworkConfiguration `pulumi:"networkConfiguration"`
	// The overrides that are associated with a task. Detailed below.
	Overrides *PipeTargetParametersEcsTaskParametersOverrides `pulumi:"overrides"`
	// An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime). Detailed below.
	PlacementConstraints []PipeTargetParametersEcsTaskParametersPlacementConstraint `pulumi:"placementConstraints"`
	// The placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task. Detailed below.
	PlacementStrategies []PipeTargetParametersEcsTaskParametersPlacementStrategy `pulumi:"placementStrategies"`
	// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This structure is used only if LaunchType is FARGATE.
	PlatformVersion *string `pulumi:"platformVersion"`
	// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the TagResource API action. Valid Values: TASK_DEFINITION
	PropagateTags *string `pulumi:"propagateTags"`
	// The reference ID to use for the task. Maximum length of 1,024.
	ReferenceId *string `pulumi:"referenceId"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The number of tasks to create based on TaskDefinition. The default is 1.
	TaskCount *int `pulumi:"taskCount"`
	// The ARN of the task definition to use if the event target is an Amazon ECS task.
	TaskDefinitionArn string `pulumi:"taskDefinitionArn"`
}

// PipeTargetParametersEcsTaskParametersInput is an input type that accepts PipeTargetParametersEcsTaskParametersArgs and PipeTargetParametersEcsTaskParametersOutput values.
// You can construct a concrete instance of `PipeTargetParametersEcsTaskParametersInput` via:
//
//	PipeTargetParametersEcsTaskParametersArgs{...}
type PipeTargetParametersEcsTaskParametersInput interface {
	pulumi.Input

	ToPipeTargetParametersEcsTaskParametersOutput() PipeTargetParametersEcsTaskParametersOutput
	ToPipeTargetParametersEcsTaskParametersOutputWithContext(context.Context) PipeTargetParametersEcsTaskParametersOutput
}

type PipeTargetParametersEcsTaskParametersArgs struct {
	// List of capacity provider strategies to use for the task. If a capacityProviderStrategy is specified, the launchType parameter must be omitted. If no capacityProviderStrategy or launchType is specified, the defaultCapacityProviderStrategy for the cluster is used. Detailed below.
	CapacityProviderStrategies PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArrayInput `pulumi:"capacityProviderStrategies"`
	// Specifies whether to enable Amazon ECS managed tags for the task. Valid values: true, false.
	EnableEcsManagedTags pulumi.BoolPtrInput `pulumi:"enableEcsManagedTags"`
	// Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task. Valid values: true, false.
	EnableExecuteCommand pulumi.BoolPtrInput `pulumi:"enableExecuteCommand"`
	// Specifies an Amazon ECS task group for the task. The maximum length is 255 characters.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. The FARGATE value is supported only in the Regions where AWS Fargate with Amazon ECS is supported. Valid Values: EC2, FARGATE, EXTERNAL
	LaunchType pulumi.StringPtrInput `pulumi:"launchType"`
	// Use this structure if the Amazon ECS task uses the awsvpc network mode. This structure specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. This structure is required if LaunchType is FARGATE because the awsvpc mode is required for Fargate tasks. If you specify NetworkConfiguration when the target ECS task does not use the awsvpc network mode, the task fails. Detailed below.
	NetworkConfiguration PipeTargetParametersEcsTaskParametersNetworkConfigurationPtrInput `pulumi:"networkConfiguration"`
	// The overrides that are associated with a task. Detailed below.
	Overrides PipeTargetParametersEcsTaskParametersOverridesPtrInput `pulumi:"overrides"`
	// An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime). Detailed below.
	PlacementConstraints PipeTargetParametersEcsTaskParametersPlacementConstraintArrayInput `pulumi:"placementConstraints"`
	// The placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task. Detailed below.
	PlacementStrategies PipeTargetParametersEcsTaskParametersPlacementStrategyArrayInput `pulumi:"placementStrategies"`
	// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This structure is used only if LaunchType is FARGATE.
	PlatformVersion pulumi.StringPtrInput `pulumi:"platformVersion"`
	// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the TagResource API action. Valid Values: TASK_DEFINITION
	PropagateTags pulumi.StringPtrInput `pulumi:"propagateTags"`
	// The reference ID to use for the task. Maximum length of 1,024.
	ReferenceId pulumi.StringPtrInput `pulumi:"referenceId"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The number of tasks to create based on TaskDefinition. The default is 1.
	TaskCount pulumi.IntPtrInput `pulumi:"taskCount"`
	// The ARN of the task definition to use if the event target is an Amazon ECS task.
	TaskDefinitionArn pulumi.StringInput `pulumi:"taskDefinitionArn"`
}

func (PipeTargetParametersEcsTaskParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParameters)(nil)).Elem()
}

func (i PipeTargetParametersEcsTaskParametersArgs) ToPipeTargetParametersEcsTaskParametersOutput() PipeTargetParametersEcsTaskParametersOutput {
	return i.ToPipeTargetParametersEcsTaskParametersOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersArgs) ToPipeTargetParametersEcsTaskParametersOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersOutput)
}

func (i PipeTargetParametersEcsTaskParametersArgs) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParameters] {
	return pulumix.Output[PipeTargetParametersEcsTaskParameters]{
		OutputState: i.ToPipeTargetParametersEcsTaskParametersOutputWithContext(ctx).OutputState,
	}
}

func (i PipeTargetParametersEcsTaskParametersArgs) ToPipeTargetParametersEcsTaskParametersPtrOutput() PipeTargetParametersEcsTaskParametersPtrOutput {
	return i.ToPipeTargetParametersEcsTaskParametersPtrOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersArgs) ToPipeTargetParametersEcsTaskParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersOutput).ToPipeTargetParametersEcsTaskParametersPtrOutputWithContext(ctx)
}

// PipeTargetParametersEcsTaskParametersPtrInput is an input type that accepts PipeTargetParametersEcsTaskParametersArgs, PipeTargetParametersEcsTaskParametersPtr and PipeTargetParametersEcsTaskParametersPtrOutput values.
// You can construct a concrete instance of `PipeTargetParametersEcsTaskParametersPtrInput` via:
//
//	        PipeTargetParametersEcsTaskParametersArgs{...}
//
//	or:
//
//	        nil
type PipeTargetParametersEcsTaskParametersPtrInput interface {
	pulumi.Input

	ToPipeTargetParametersEcsTaskParametersPtrOutput() PipeTargetParametersEcsTaskParametersPtrOutput
	ToPipeTargetParametersEcsTaskParametersPtrOutputWithContext(context.Context) PipeTargetParametersEcsTaskParametersPtrOutput
}

type pipeTargetParametersEcsTaskParametersPtrType PipeTargetParametersEcsTaskParametersArgs

func PipeTargetParametersEcsTaskParametersPtr(v *PipeTargetParametersEcsTaskParametersArgs) PipeTargetParametersEcsTaskParametersPtrInput {
	return (*pipeTargetParametersEcsTaskParametersPtrType)(v)
}

func (*pipeTargetParametersEcsTaskParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParametersEcsTaskParameters)(nil)).Elem()
}

func (i *pipeTargetParametersEcsTaskParametersPtrType) ToPipeTargetParametersEcsTaskParametersPtrOutput() PipeTargetParametersEcsTaskParametersPtrOutput {
	return i.ToPipeTargetParametersEcsTaskParametersPtrOutputWithContext(context.Background())
}

func (i *pipeTargetParametersEcsTaskParametersPtrType) ToPipeTargetParametersEcsTaskParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersPtrOutput)
}

func (i *pipeTargetParametersEcsTaskParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersEcsTaskParameters] {
	return pulumix.Output[*PipeTargetParametersEcsTaskParameters]{
		OutputState: i.ToPipeTargetParametersEcsTaskParametersPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeTargetParametersEcsTaskParametersOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParameters)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersOutput) ToPipeTargetParametersEcsTaskParametersOutput() PipeTargetParametersEcsTaskParametersOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOutput) ToPipeTargetParametersEcsTaskParametersOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOutput) ToPipeTargetParametersEcsTaskParametersPtrOutput() PipeTargetParametersEcsTaskParametersPtrOutput {
	return o.ToPipeTargetParametersEcsTaskParametersPtrOutputWithContext(context.Background())
}

func (o PipeTargetParametersEcsTaskParametersOutput) ToPipeTargetParametersEcsTaskParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeTargetParametersEcsTaskParameters) *PipeTargetParametersEcsTaskParameters {
		return &v
	}).(PipeTargetParametersEcsTaskParametersPtrOutput)
}

func (o PipeTargetParametersEcsTaskParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParameters] {
	return pulumix.Output[PipeTargetParametersEcsTaskParameters]{
		OutputState: o.OutputState,
	}
}

// List of capacity provider strategies to use for the task. If a capacityProviderStrategy is specified, the launchType parameter must be omitted. If no capacityProviderStrategy or launchType is specified, the defaultCapacityProviderStrategy for the cluster is used. Detailed below.
func (o PipeTargetParametersEcsTaskParametersOutput) CapacityProviderStrategies() PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArrayOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParameters) []PipeTargetParametersEcsTaskParametersCapacityProviderStrategy {
		return v.CapacityProviderStrategies
	}).(PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArrayOutput)
}

// Specifies whether to enable Amazon ECS managed tags for the task. Valid values: true, false.
func (o PipeTargetParametersEcsTaskParametersOutput) EnableEcsManagedTags() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParameters) *bool { return v.EnableEcsManagedTags }).(pulumi.BoolPtrOutput)
}

// Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task. Valid values: true, false.
func (o PipeTargetParametersEcsTaskParametersOutput) EnableExecuteCommand() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParameters) *bool { return v.EnableExecuteCommand }).(pulumi.BoolPtrOutput)
}

// Specifies an Amazon ECS task group for the task. The maximum length is 255 characters.
func (o PipeTargetParametersEcsTaskParametersOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParameters) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. The FARGATE value is supported only in the Regions where AWS Fargate with Amazon ECS is supported. Valid Values: EC2, FARGATE, EXTERNAL
func (o PipeTargetParametersEcsTaskParametersOutput) LaunchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParameters) *string { return v.LaunchType }).(pulumi.StringPtrOutput)
}

// Use this structure if the Amazon ECS task uses the awsvpc network mode. This structure specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. This structure is required if LaunchType is FARGATE because the awsvpc mode is required for Fargate tasks. If you specify NetworkConfiguration when the target ECS task does not use the awsvpc network mode, the task fails. Detailed below.
func (o PipeTargetParametersEcsTaskParametersOutput) NetworkConfiguration() PipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParameters) *PipeTargetParametersEcsTaskParametersNetworkConfiguration {
		return v.NetworkConfiguration
	}).(PipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutput)
}

// The overrides that are associated with a task. Detailed below.
func (o PipeTargetParametersEcsTaskParametersOutput) Overrides() PipeTargetParametersEcsTaskParametersOverridesPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParameters) *PipeTargetParametersEcsTaskParametersOverrides {
		return v.Overrides
	}).(PipeTargetParametersEcsTaskParametersOverridesPtrOutput)
}

// An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime). Detailed below.
func (o PipeTargetParametersEcsTaskParametersOutput) PlacementConstraints() PipeTargetParametersEcsTaskParametersPlacementConstraintArrayOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParameters) []PipeTargetParametersEcsTaskParametersPlacementConstraint {
		return v.PlacementConstraints
	}).(PipeTargetParametersEcsTaskParametersPlacementConstraintArrayOutput)
}

// The placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task. Detailed below.
func (o PipeTargetParametersEcsTaskParametersOutput) PlacementStrategies() PipeTargetParametersEcsTaskParametersPlacementStrategyArrayOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParameters) []PipeTargetParametersEcsTaskParametersPlacementStrategy {
		return v.PlacementStrategies
	}).(PipeTargetParametersEcsTaskParametersPlacementStrategyArrayOutput)
}

// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This structure is used only if LaunchType is FARGATE.
func (o PipeTargetParametersEcsTaskParametersOutput) PlatformVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParameters) *string { return v.PlatformVersion }).(pulumi.StringPtrOutput)
}

// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the TagResource API action. Valid Values: TASK_DEFINITION
func (o PipeTargetParametersEcsTaskParametersOutput) PropagateTags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParameters) *string { return v.PropagateTags }).(pulumi.StringPtrOutput)
}

// The reference ID to use for the task. Maximum length of 1,024.
func (o PipeTargetParametersEcsTaskParametersOutput) ReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParameters) *string { return v.ReferenceId }).(pulumi.StringPtrOutput)
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o PipeTargetParametersEcsTaskParametersOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParameters) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The number of tasks to create based on TaskDefinition. The default is 1.
func (o PipeTargetParametersEcsTaskParametersOutput) TaskCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParameters) *int { return v.TaskCount }).(pulumi.IntPtrOutput)
}

// The ARN of the task definition to use if the event target is an Amazon ECS task.
func (o PipeTargetParametersEcsTaskParametersOutput) TaskDefinitionArn() pulumi.StringOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParameters) string { return v.TaskDefinitionArn }).(pulumi.StringOutput)
}

type PipeTargetParametersEcsTaskParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParametersEcsTaskParameters)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersPtrOutput) ToPipeTargetParametersEcsTaskParametersPtrOutput() PipeTargetParametersEcsTaskParametersPtrOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersPtrOutput) ToPipeTargetParametersEcsTaskParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersPtrOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersEcsTaskParameters] {
	return pulumix.Output[*PipeTargetParametersEcsTaskParameters]{
		OutputState: o.OutputState,
	}
}

func (o PipeTargetParametersEcsTaskParametersPtrOutput) Elem() PipeTargetParametersEcsTaskParametersOutput {
	return o.ApplyT(func(v *PipeTargetParametersEcsTaskParameters) PipeTargetParametersEcsTaskParameters {
		if v != nil {
			return *v
		}
		var ret PipeTargetParametersEcsTaskParameters
		return ret
	}).(PipeTargetParametersEcsTaskParametersOutput)
}

// List of capacity provider strategies to use for the task. If a capacityProviderStrategy is specified, the launchType parameter must be omitted. If no capacityProviderStrategy or launchType is specified, the defaultCapacityProviderStrategy for the cluster is used. Detailed below.
func (o PipeTargetParametersEcsTaskParametersPtrOutput) CapacityProviderStrategies() PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArrayOutput {
	return o.ApplyT(func(v *PipeTargetParametersEcsTaskParameters) []PipeTargetParametersEcsTaskParametersCapacityProviderStrategy {
		if v == nil {
			return nil
		}
		return v.CapacityProviderStrategies
	}).(PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArrayOutput)
}

// Specifies whether to enable Amazon ECS managed tags for the task. Valid values: true, false.
func (o PipeTargetParametersEcsTaskParametersPtrOutput) EnableEcsManagedTags() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersEcsTaskParameters) *bool {
		if v == nil {
			return nil
		}
		return v.EnableEcsManagedTags
	}).(pulumi.BoolPtrOutput)
}

// Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task. Valid values: true, false.
func (o PipeTargetParametersEcsTaskParametersPtrOutput) EnableExecuteCommand() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersEcsTaskParameters) *bool {
		if v == nil {
			return nil
		}
		return v.EnableExecuteCommand
	}).(pulumi.BoolPtrOutput)
}

// Specifies an Amazon ECS task group for the task. The maximum length is 255 characters.
func (o PipeTargetParametersEcsTaskParametersPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersEcsTaskParameters) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. The FARGATE value is supported only in the Regions where AWS Fargate with Amazon ECS is supported. Valid Values: EC2, FARGATE, EXTERNAL
func (o PipeTargetParametersEcsTaskParametersPtrOutput) LaunchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersEcsTaskParameters) *string {
		if v == nil {
			return nil
		}
		return v.LaunchType
	}).(pulumi.StringPtrOutput)
}

// Use this structure if the Amazon ECS task uses the awsvpc network mode. This structure specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. This structure is required if LaunchType is FARGATE because the awsvpc mode is required for Fargate tasks. If you specify NetworkConfiguration when the target ECS task does not use the awsvpc network mode, the task fails. Detailed below.
func (o PipeTargetParametersEcsTaskParametersPtrOutput) NetworkConfiguration() PipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersEcsTaskParameters) *PipeTargetParametersEcsTaskParametersNetworkConfiguration {
		if v == nil {
			return nil
		}
		return v.NetworkConfiguration
	}).(PipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutput)
}

// The overrides that are associated with a task. Detailed below.
func (o PipeTargetParametersEcsTaskParametersPtrOutput) Overrides() PipeTargetParametersEcsTaskParametersOverridesPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersEcsTaskParameters) *PipeTargetParametersEcsTaskParametersOverrides {
		if v == nil {
			return nil
		}
		return v.Overrides
	}).(PipeTargetParametersEcsTaskParametersOverridesPtrOutput)
}

// An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime). Detailed below.
func (o PipeTargetParametersEcsTaskParametersPtrOutput) PlacementConstraints() PipeTargetParametersEcsTaskParametersPlacementConstraintArrayOutput {
	return o.ApplyT(func(v *PipeTargetParametersEcsTaskParameters) []PipeTargetParametersEcsTaskParametersPlacementConstraint {
		if v == nil {
			return nil
		}
		return v.PlacementConstraints
	}).(PipeTargetParametersEcsTaskParametersPlacementConstraintArrayOutput)
}

// The placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task. Detailed below.
func (o PipeTargetParametersEcsTaskParametersPtrOutput) PlacementStrategies() PipeTargetParametersEcsTaskParametersPlacementStrategyArrayOutput {
	return o.ApplyT(func(v *PipeTargetParametersEcsTaskParameters) []PipeTargetParametersEcsTaskParametersPlacementStrategy {
		if v == nil {
			return nil
		}
		return v.PlacementStrategies
	}).(PipeTargetParametersEcsTaskParametersPlacementStrategyArrayOutput)
}

// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This structure is used only if LaunchType is FARGATE.
func (o PipeTargetParametersEcsTaskParametersPtrOutput) PlatformVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersEcsTaskParameters) *string {
		if v == nil {
			return nil
		}
		return v.PlatformVersion
	}).(pulumi.StringPtrOutput)
}

// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the TagResource API action. Valid Values: TASK_DEFINITION
func (o PipeTargetParametersEcsTaskParametersPtrOutput) PropagateTags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersEcsTaskParameters) *string {
		if v == nil {
			return nil
		}
		return v.PropagateTags
	}).(pulumi.StringPtrOutput)
}

// The reference ID to use for the task. Maximum length of 1,024.
func (o PipeTargetParametersEcsTaskParametersPtrOutput) ReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersEcsTaskParameters) *string {
		if v == nil {
			return nil
		}
		return v.ReferenceId
	}).(pulumi.StringPtrOutput)
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o PipeTargetParametersEcsTaskParametersPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PipeTargetParametersEcsTaskParameters) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The number of tasks to create based on TaskDefinition. The default is 1.
func (o PipeTargetParametersEcsTaskParametersPtrOutput) TaskCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersEcsTaskParameters) *int {
		if v == nil {
			return nil
		}
		return v.TaskCount
	}).(pulumi.IntPtrOutput)
}

// The ARN of the task definition to use if the event target is an Amazon ECS task.
func (o PipeTargetParametersEcsTaskParametersPtrOutput) TaskDefinitionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersEcsTaskParameters) *string {
		if v == nil {
			return nil
		}
		return &v.TaskDefinitionArn
	}).(pulumi.StringPtrOutput)
}

type PipeTargetParametersEcsTaskParametersCapacityProviderStrategy struct {
	// The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. If no value is specified, the default value of 0 is used. Maximum value of 100,000.
	Base *int `pulumi:"base"`
	// The short name of the capacity provider. Maximum value of 255.
	CapacityProvider string `pulumi:"capacityProvider"`
	// The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied. Maximum value of 1,000.
	Weight *int `pulumi:"weight"`
}

// PipeTargetParametersEcsTaskParametersCapacityProviderStrategyInput is an input type that accepts PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArgs and PipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput values.
// You can construct a concrete instance of `PipeTargetParametersEcsTaskParametersCapacityProviderStrategyInput` via:
//
//	PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArgs{...}
type PipeTargetParametersEcsTaskParametersCapacityProviderStrategyInput interface {
	pulumi.Input

	ToPipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput() PipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput
	ToPipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutputWithContext(context.Context) PipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput
}

type PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArgs struct {
	// The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. If no value is specified, the default value of 0 is used. Maximum value of 100,000.
	Base pulumi.IntPtrInput `pulumi:"base"`
	// The short name of the capacity provider. Maximum value of 255.
	CapacityProvider pulumi.StringInput `pulumi:"capacityProvider"`
	// The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied. Maximum value of 1,000.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersCapacityProviderStrategy)(nil)).Elem()
}

func (i PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArgs) ToPipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput() PipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput {
	return i.ToPipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArgs) ToPipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput)
}

func (i PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArgs) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParametersCapacityProviderStrategy] {
	return pulumix.Output[PipeTargetParametersEcsTaskParametersCapacityProviderStrategy]{
		OutputState: i.ToPipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutputWithContext(ctx).OutputState,
	}
}

// PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArrayInput is an input type that accepts PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArray and PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArrayOutput values.
// You can construct a concrete instance of `PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArrayInput` via:
//
//	PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArray{ PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArgs{...} }
type PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArrayInput interface {
	pulumi.Input

	ToPipeTargetParametersEcsTaskParametersCapacityProviderStrategyArrayOutput() PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArrayOutput
	ToPipeTargetParametersEcsTaskParametersCapacityProviderStrategyArrayOutputWithContext(context.Context) PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArrayOutput
}

type PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArray []PipeTargetParametersEcsTaskParametersCapacityProviderStrategyInput

func (PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeTargetParametersEcsTaskParametersCapacityProviderStrategy)(nil)).Elem()
}

func (i PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArray) ToPipeTargetParametersEcsTaskParametersCapacityProviderStrategyArrayOutput() PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArrayOutput {
	return i.ToPipeTargetParametersEcsTaskParametersCapacityProviderStrategyArrayOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArray) ToPipeTargetParametersEcsTaskParametersCapacityProviderStrategyArrayOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArrayOutput)
}

func (i PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArray) ToOutput(ctx context.Context) pulumix.Output[[]PipeTargetParametersEcsTaskParametersCapacityProviderStrategy] {
	return pulumix.Output[[]PipeTargetParametersEcsTaskParametersCapacityProviderStrategy]{
		OutputState: i.ToPipeTargetParametersEcsTaskParametersCapacityProviderStrategyArrayOutputWithContext(ctx).OutputState,
	}
}

type PipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersCapacityProviderStrategy)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput) ToPipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput() PipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput) ToPipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParametersCapacityProviderStrategy] {
	return pulumix.Output[PipeTargetParametersEcsTaskParametersCapacityProviderStrategy]{
		OutputState: o.OutputState,
	}
}

// The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. If no value is specified, the default value of 0 is used. Maximum value of 100,000.
func (o PipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput) Base() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParametersCapacityProviderStrategy) *int { return v.Base }).(pulumi.IntPtrOutput)
}

// The short name of the capacity provider. Maximum value of 255.
func (o PipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput) CapacityProvider() pulumi.StringOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParametersCapacityProviderStrategy) string {
		return v.CapacityProvider
	}).(pulumi.StringOutput)
}

// The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied. Maximum value of 1,000.
func (o PipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParametersCapacityProviderStrategy) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArrayOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeTargetParametersEcsTaskParametersCapacityProviderStrategy)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArrayOutput) ToPipeTargetParametersEcsTaskParametersCapacityProviderStrategyArrayOutput() PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArrayOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArrayOutput) ToPipeTargetParametersEcsTaskParametersCapacityProviderStrategyArrayOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArrayOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PipeTargetParametersEcsTaskParametersCapacityProviderStrategy] {
	return pulumix.Output[[]PipeTargetParametersEcsTaskParametersCapacityProviderStrategy]{
		OutputState: o.OutputState,
	}
}

func (o PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArrayOutput) Index(i pulumi.IntInput) PipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipeTargetParametersEcsTaskParametersCapacityProviderStrategy {
		return vs[0].([]PipeTargetParametersEcsTaskParametersCapacityProviderStrategy)[vs[1].(int)]
	}).(PipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput)
}

type PipeTargetParametersEcsTaskParametersNetworkConfiguration struct {
	// Use this structure to specify the VPC subnets and security groups for the task, and whether a public IP address is to be used. This structure is relevant only for ECS tasks that use the awsvpc network mode. Detailed below.
	AwsVpcConfiguration *PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration `pulumi:"awsVpcConfiguration"`
}

// PipeTargetParametersEcsTaskParametersNetworkConfigurationInput is an input type that accepts PipeTargetParametersEcsTaskParametersNetworkConfigurationArgs and PipeTargetParametersEcsTaskParametersNetworkConfigurationOutput values.
// You can construct a concrete instance of `PipeTargetParametersEcsTaskParametersNetworkConfigurationInput` via:
//
//	PipeTargetParametersEcsTaskParametersNetworkConfigurationArgs{...}
type PipeTargetParametersEcsTaskParametersNetworkConfigurationInput interface {
	pulumi.Input

	ToPipeTargetParametersEcsTaskParametersNetworkConfigurationOutput() PipeTargetParametersEcsTaskParametersNetworkConfigurationOutput
	ToPipeTargetParametersEcsTaskParametersNetworkConfigurationOutputWithContext(context.Context) PipeTargetParametersEcsTaskParametersNetworkConfigurationOutput
}

type PipeTargetParametersEcsTaskParametersNetworkConfigurationArgs struct {
	// Use this structure to specify the VPC subnets and security groups for the task, and whether a public IP address is to be used. This structure is relevant only for ECS tasks that use the awsvpc network mode. Detailed below.
	AwsVpcConfiguration PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrInput `pulumi:"awsVpcConfiguration"`
}

func (PipeTargetParametersEcsTaskParametersNetworkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersNetworkConfiguration)(nil)).Elem()
}

func (i PipeTargetParametersEcsTaskParametersNetworkConfigurationArgs) ToPipeTargetParametersEcsTaskParametersNetworkConfigurationOutput() PipeTargetParametersEcsTaskParametersNetworkConfigurationOutput {
	return i.ToPipeTargetParametersEcsTaskParametersNetworkConfigurationOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersNetworkConfigurationArgs) ToPipeTargetParametersEcsTaskParametersNetworkConfigurationOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersNetworkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersNetworkConfigurationOutput)
}

func (i PipeTargetParametersEcsTaskParametersNetworkConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParametersNetworkConfiguration] {
	return pulumix.Output[PipeTargetParametersEcsTaskParametersNetworkConfiguration]{
		OutputState: i.ToPipeTargetParametersEcsTaskParametersNetworkConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i PipeTargetParametersEcsTaskParametersNetworkConfigurationArgs) ToPipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutput() PipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutput {
	return i.ToPipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersNetworkConfigurationArgs) ToPipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersNetworkConfigurationOutput).ToPipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutputWithContext(ctx)
}

// PipeTargetParametersEcsTaskParametersNetworkConfigurationPtrInput is an input type that accepts PipeTargetParametersEcsTaskParametersNetworkConfigurationArgs, PipeTargetParametersEcsTaskParametersNetworkConfigurationPtr and PipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutput values.
// You can construct a concrete instance of `PipeTargetParametersEcsTaskParametersNetworkConfigurationPtrInput` via:
//
//	        PipeTargetParametersEcsTaskParametersNetworkConfigurationArgs{...}
//
//	or:
//
//	        nil
type PipeTargetParametersEcsTaskParametersNetworkConfigurationPtrInput interface {
	pulumi.Input

	ToPipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutput() PipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutput
	ToPipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutputWithContext(context.Context) PipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutput
}

type pipeTargetParametersEcsTaskParametersNetworkConfigurationPtrType PipeTargetParametersEcsTaskParametersNetworkConfigurationArgs

func PipeTargetParametersEcsTaskParametersNetworkConfigurationPtr(v *PipeTargetParametersEcsTaskParametersNetworkConfigurationArgs) PipeTargetParametersEcsTaskParametersNetworkConfigurationPtrInput {
	return (*pipeTargetParametersEcsTaskParametersNetworkConfigurationPtrType)(v)
}

func (*pipeTargetParametersEcsTaskParametersNetworkConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParametersEcsTaskParametersNetworkConfiguration)(nil)).Elem()
}

func (i *pipeTargetParametersEcsTaskParametersNetworkConfigurationPtrType) ToPipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutput() PipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutput {
	return i.ToPipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i *pipeTargetParametersEcsTaskParametersNetworkConfigurationPtrType) ToPipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutput)
}

func (i *pipeTargetParametersEcsTaskParametersNetworkConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersEcsTaskParametersNetworkConfiguration] {
	return pulumix.Output[*PipeTargetParametersEcsTaskParametersNetworkConfiguration]{
		OutputState: i.ToPipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeTargetParametersEcsTaskParametersNetworkConfigurationOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersNetworkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersNetworkConfiguration)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersNetworkConfigurationOutput) ToPipeTargetParametersEcsTaskParametersNetworkConfigurationOutput() PipeTargetParametersEcsTaskParametersNetworkConfigurationOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersNetworkConfigurationOutput) ToPipeTargetParametersEcsTaskParametersNetworkConfigurationOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersNetworkConfigurationOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersNetworkConfigurationOutput) ToPipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutput() PipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutput {
	return o.ToPipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (o PipeTargetParametersEcsTaskParametersNetworkConfigurationOutput) ToPipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeTargetParametersEcsTaskParametersNetworkConfiguration) *PipeTargetParametersEcsTaskParametersNetworkConfiguration {
		return &v
	}).(PipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutput)
}

func (o PipeTargetParametersEcsTaskParametersNetworkConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParametersNetworkConfiguration] {
	return pulumix.Output[PipeTargetParametersEcsTaskParametersNetworkConfiguration]{
		OutputState: o.OutputState,
	}
}

// Use this structure to specify the VPC subnets and security groups for the task, and whether a public IP address is to be used. This structure is relevant only for ECS tasks that use the awsvpc network mode. Detailed below.
func (o PipeTargetParametersEcsTaskParametersNetworkConfigurationOutput) AwsVpcConfiguration() PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParametersNetworkConfiguration) *PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration {
		return v.AwsVpcConfiguration
	}).(PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutput)
}

type PipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParametersEcsTaskParametersNetworkConfiguration)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutput) ToPipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutput() PipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutput) ToPipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersEcsTaskParametersNetworkConfiguration] {
	return pulumix.Output[*PipeTargetParametersEcsTaskParametersNetworkConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o PipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutput) Elem() PipeTargetParametersEcsTaskParametersNetworkConfigurationOutput {
	return o.ApplyT(func(v *PipeTargetParametersEcsTaskParametersNetworkConfiguration) PipeTargetParametersEcsTaskParametersNetworkConfiguration {
		if v != nil {
			return *v
		}
		var ret PipeTargetParametersEcsTaskParametersNetworkConfiguration
		return ret
	}).(PipeTargetParametersEcsTaskParametersNetworkConfigurationOutput)
}

// Use this structure to specify the VPC subnets and security groups for the task, and whether a public IP address is to be used. This structure is relevant only for ECS tasks that use the awsvpc network mode. Detailed below.
func (o PipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutput) AwsVpcConfiguration() PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersEcsTaskParametersNetworkConfiguration) *PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration {
		if v == nil {
			return nil
		}
		return v.AwsVpcConfiguration
	}).(PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutput)
}

type PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration struct {
	// Specifies whether the task's elastic network interface receives a public IP address. You can specify ENABLED only when LaunchType in EcsParameters is set to FARGATE. Valid Values: ENABLED, DISABLED.
	AssignPublicIp *string `pulumi:"assignPublicIp"`
	// List of security groups associated with the stream. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.
	SecurityGroups []string `pulumi:"securityGroups"`
	// List of the subnets associated with the stream. These subnets must all be in the same VPC. You can specify as many as 16 subnets.
	Subnets []string `pulumi:"subnets"`
}

// PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationInput is an input type that accepts PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationArgs and PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput values.
// You can construct a concrete instance of `PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationInput` via:
//
//	PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationArgs{...}
type PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationInput interface {
	pulumi.Input

	ToPipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput() PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput
	ToPipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutputWithContext(context.Context) PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput
}

type PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationArgs struct {
	// Specifies whether the task's elastic network interface receives a public IP address. You can specify ENABLED only when LaunchType in EcsParameters is set to FARGATE. Valid Values: ENABLED, DISABLED.
	AssignPublicIp pulumi.StringPtrInput `pulumi:"assignPublicIp"`
	// List of security groups associated with the stream. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.
	SecurityGroups pulumi.StringArrayInput `pulumi:"securityGroups"`
	// List of the subnets associated with the stream. These subnets must all be in the same VPC. You can specify as many as 16 subnets.
	Subnets pulumi.StringArrayInput `pulumi:"subnets"`
}

func (PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration)(nil)).Elem()
}

func (i PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationArgs) ToPipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput() PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput {
	return i.ToPipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationArgs) ToPipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput)
}

func (i PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration] {
	return pulumix.Output[PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration]{
		OutputState: i.ToPipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationArgs) ToPipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutput() PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutput {
	return i.ToPipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationArgs) ToPipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput).ToPipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutputWithContext(ctx)
}

// PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrInput is an input type that accepts PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationArgs, PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtr and PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutput values.
// You can construct a concrete instance of `PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrInput` via:
//
//	        PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationArgs{...}
//
//	or:
//
//	        nil
type PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrInput interface {
	pulumi.Input

	ToPipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutput() PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutput
	ToPipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutputWithContext(context.Context) PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutput
}

type pipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrType PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationArgs

func PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtr(v *PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationArgs) PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrInput {
	return (*pipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrType)(v)
}

func (*pipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration)(nil)).Elem()
}

func (i *pipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrType) ToPipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutput() PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutput {
	return i.ToPipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutputWithContext(context.Background())
}

func (i *pipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrType) ToPipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutput)
}

func (i *pipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration] {
	return pulumix.Output[*PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration]{
		OutputState: i.ToPipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput) ToPipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput() PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput) ToPipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput) ToPipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutput() PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutput {
	return o.ToPipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutputWithContext(context.Background())
}

func (o PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput) ToPipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration) *PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration {
		return &v
	}).(PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutput)
}

func (o PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration] {
	return pulumix.Output[PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration]{
		OutputState: o.OutputState,
	}
}

// Specifies whether the task's elastic network interface receives a public IP address. You can specify ENABLED only when LaunchType in EcsParameters is set to FARGATE. Valid Values: ENABLED, DISABLED.
func (o PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput) AssignPublicIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration) *string {
		return v.AssignPublicIp
	}).(pulumi.StringPtrOutput)
}

// List of security groups associated with the stream. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.
func (o PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration) []string {
		return v.SecurityGroups
	}).(pulumi.StringArrayOutput)
}

// List of the subnets associated with the stream. These subnets must all be in the same VPC. You can specify as many as 16 subnets.
func (o PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration) []string {
		return v.Subnets
	}).(pulumi.StringArrayOutput)
}

type PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutput) ToPipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutput() PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutput) ToPipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration] {
	return pulumix.Output[*PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutput) Elem() PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput {
	return o.ApplyT(func(v *PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration) PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration {
		if v != nil {
			return *v
		}
		var ret PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration
		return ret
	}).(PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput)
}

// Specifies whether the task's elastic network interface receives a public IP address. You can specify ENABLED only when LaunchType in EcsParameters is set to FARGATE. Valid Values: ENABLED, DISABLED.
func (o PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutput) AssignPublicIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.AssignPublicIp
	}).(pulumi.StringPtrOutput)
}

// List of security groups associated with the stream. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.
func (o PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.SecurityGroups
	}).(pulumi.StringArrayOutput)
}

// List of the subnets associated with the stream. These subnets must all be in the same VPC. You can specify as many as 16 subnets.
func (o PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.Subnets
	}).(pulumi.StringArrayOutput)
}

type PipeTargetParametersEcsTaskParametersOverrides struct {
	// One or more container overrides that are sent to a task. Detailed below.
	ContainerOverrides []PipeTargetParametersEcsTaskParametersOverridesContainerOverride `pulumi:"containerOverrides"`
	// The number of cpu units reserved for the container, instead of the default value from the task definition. You must also specify a container name.
	Cpu *string `pulumi:"cpu"`
	// The ephemeral storage setting override for the task.  Detailed below.
	EphemeralStorage *PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage `pulumi:"ephemeralStorage"`
	// The Amazon Resource Name (ARN) of the task execution IAM role override for the task.
	ExecutionRoleArn *string `pulumi:"executionRoleArn"`
	// List of Elastic Inference accelerator overrides for the task. Detailed below.
	InferenceAcceleratorOverrides []PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride `pulumi:"inferenceAcceleratorOverrides"`
	// The hard limit (in MiB) of memory to present to the container, instead of the default value from the task definition. If your container attempts to exceed the memory specified here, the container is killed. You must also specify a container name.
	Memory *string `pulumi:"memory"`
	// The Amazon Resource Name (ARN) of the IAM role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role.
	TaskRoleArn *string `pulumi:"taskRoleArn"`
}

// PipeTargetParametersEcsTaskParametersOverridesInput is an input type that accepts PipeTargetParametersEcsTaskParametersOverridesArgs and PipeTargetParametersEcsTaskParametersOverridesOutput values.
// You can construct a concrete instance of `PipeTargetParametersEcsTaskParametersOverridesInput` via:
//
//	PipeTargetParametersEcsTaskParametersOverridesArgs{...}
type PipeTargetParametersEcsTaskParametersOverridesInput interface {
	pulumi.Input

	ToPipeTargetParametersEcsTaskParametersOverridesOutput() PipeTargetParametersEcsTaskParametersOverridesOutput
	ToPipeTargetParametersEcsTaskParametersOverridesOutputWithContext(context.Context) PipeTargetParametersEcsTaskParametersOverridesOutput
}

type PipeTargetParametersEcsTaskParametersOverridesArgs struct {
	// One or more container overrides that are sent to a task. Detailed below.
	ContainerOverrides PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArrayInput `pulumi:"containerOverrides"`
	// The number of cpu units reserved for the container, instead of the default value from the task definition. You must also specify a container name.
	Cpu pulumi.StringPtrInput `pulumi:"cpu"`
	// The ephemeral storage setting override for the task.  Detailed below.
	EphemeralStorage PipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrInput `pulumi:"ephemeralStorage"`
	// The Amazon Resource Name (ARN) of the task execution IAM role override for the task.
	ExecutionRoleArn pulumi.StringPtrInput `pulumi:"executionRoleArn"`
	// List of Elastic Inference accelerator overrides for the task. Detailed below.
	InferenceAcceleratorOverrides PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArrayInput `pulumi:"inferenceAcceleratorOverrides"`
	// The hard limit (in MiB) of memory to present to the container, instead of the default value from the task definition. If your container attempts to exceed the memory specified here, the container is killed. You must also specify a container name.
	Memory pulumi.StringPtrInput `pulumi:"memory"`
	// The Amazon Resource Name (ARN) of the IAM role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role.
	TaskRoleArn pulumi.StringPtrInput `pulumi:"taskRoleArn"`
}

func (PipeTargetParametersEcsTaskParametersOverridesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverrides)(nil)).Elem()
}

func (i PipeTargetParametersEcsTaskParametersOverridesArgs) ToPipeTargetParametersEcsTaskParametersOverridesOutput() PipeTargetParametersEcsTaskParametersOverridesOutput {
	return i.ToPipeTargetParametersEcsTaskParametersOverridesOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersOverridesArgs) ToPipeTargetParametersEcsTaskParametersOverridesOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersOverridesOutput)
}

func (i PipeTargetParametersEcsTaskParametersOverridesArgs) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParametersOverrides] {
	return pulumix.Output[PipeTargetParametersEcsTaskParametersOverrides]{
		OutputState: i.ToPipeTargetParametersEcsTaskParametersOverridesOutputWithContext(ctx).OutputState,
	}
}

func (i PipeTargetParametersEcsTaskParametersOverridesArgs) ToPipeTargetParametersEcsTaskParametersOverridesPtrOutput() PipeTargetParametersEcsTaskParametersOverridesPtrOutput {
	return i.ToPipeTargetParametersEcsTaskParametersOverridesPtrOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersOverridesArgs) ToPipeTargetParametersEcsTaskParametersOverridesPtrOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersOverridesOutput).ToPipeTargetParametersEcsTaskParametersOverridesPtrOutputWithContext(ctx)
}

// PipeTargetParametersEcsTaskParametersOverridesPtrInput is an input type that accepts PipeTargetParametersEcsTaskParametersOverridesArgs, PipeTargetParametersEcsTaskParametersOverridesPtr and PipeTargetParametersEcsTaskParametersOverridesPtrOutput values.
// You can construct a concrete instance of `PipeTargetParametersEcsTaskParametersOverridesPtrInput` via:
//
//	        PipeTargetParametersEcsTaskParametersOverridesArgs{...}
//
//	or:
//
//	        nil
type PipeTargetParametersEcsTaskParametersOverridesPtrInput interface {
	pulumi.Input

	ToPipeTargetParametersEcsTaskParametersOverridesPtrOutput() PipeTargetParametersEcsTaskParametersOverridesPtrOutput
	ToPipeTargetParametersEcsTaskParametersOverridesPtrOutputWithContext(context.Context) PipeTargetParametersEcsTaskParametersOverridesPtrOutput
}

type pipeTargetParametersEcsTaskParametersOverridesPtrType PipeTargetParametersEcsTaskParametersOverridesArgs

func PipeTargetParametersEcsTaskParametersOverridesPtr(v *PipeTargetParametersEcsTaskParametersOverridesArgs) PipeTargetParametersEcsTaskParametersOverridesPtrInput {
	return (*pipeTargetParametersEcsTaskParametersOverridesPtrType)(v)
}

func (*pipeTargetParametersEcsTaskParametersOverridesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParametersEcsTaskParametersOverrides)(nil)).Elem()
}

func (i *pipeTargetParametersEcsTaskParametersOverridesPtrType) ToPipeTargetParametersEcsTaskParametersOverridesPtrOutput() PipeTargetParametersEcsTaskParametersOverridesPtrOutput {
	return i.ToPipeTargetParametersEcsTaskParametersOverridesPtrOutputWithContext(context.Background())
}

func (i *pipeTargetParametersEcsTaskParametersOverridesPtrType) ToPipeTargetParametersEcsTaskParametersOverridesPtrOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersOverridesPtrOutput)
}

func (i *pipeTargetParametersEcsTaskParametersOverridesPtrType) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersEcsTaskParametersOverrides] {
	return pulumix.Output[*PipeTargetParametersEcsTaskParametersOverrides]{
		OutputState: i.ToPipeTargetParametersEcsTaskParametersOverridesPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeTargetParametersEcsTaskParametersOverridesOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersOverridesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverrides)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersOverridesOutput) ToPipeTargetParametersEcsTaskParametersOverridesOutput() PipeTargetParametersEcsTaskParametersOverridesOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesOutput) ToPipeTargetParametersEcsTaskParametersOverridesOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesOutput) ToPipeTargetParametersEcsTaskParametersOverridesPtrOutput() PipeTargetParametersEcsTaskParametersOverridesPtrOutput {
	return o.ToPipeTargetParametersEcsTaskParametersOverridesPtrOutputWithContext(context.Background())
}

func (o PipeTargetParametersEcsTaskParametersOverridesOutput) ToPipeTargetParametersEcsTaskParametersOverridesPtrOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeTargetParametersEcsTaskParametersOverrides) *PipeTargetParametersEcsTaskParametersOverrides {
		return &v
	}).(PipeTargetParametersEcsTaskParametersOverridesPtrOutput)
}

func (o PipeTargetParametersEcsTaskParametersOverridesOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParametersOverrides] {
	return pulumix.Output[PipeTargetParametersEcsTaskParametersOverrides]{
		OutputState: o.OutputState,
	}
}

// One or more container overrides that are sent to a task. Detailed below.
func (o PipeTargetParametersEcsTaskParametersOverridesOutput) ContainerOverrides() PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArrayOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParametersOverrides) []PipeTargetParametersEcsTaskParametersOverridesContainerOverride {
		return v.ContainerOverrides
	}).(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArrayOutput)
}

// The number of cpu units reserved for the container, instead of the default value from the task definition. You must also specify a container name.
func (o PipeTargetParametersEcsTaskParametersOverridesOutput) Cpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParametersOverrides) *string { return v.Cpu }).(pulumi.StringPtrOutput)
}

// The ephemeral storage setting override for the task.  Detailed below.
func (o PipeTargetParametersEcsTaskParametersOverridesOutput) EphemeralStorage() PipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParametersOverrides) *PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage {
		return v.EphemeralStorage
	}).(PipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutput)
}

// The Amazon Resource Name (ARN) of the task execution IAM role override for the task.
func (o PipeTargetParametersEcsTaskParametersOverridesOutput) ExecutionRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParametersOverrides) *string { return v.ExecutionRoleArn }).(pulumi.StringPtrOutput)
}

// List of Elastic Inference accelerator overrides for the task. Detailed below.
func (o PipeTargetParametersEcsTaskParametersOverridesOutput) InferenceAcceleratorOverrides() PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArrayOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParametersOverrides) []PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride {
		return v.InferenceAcceleratorOverrides
	}).(PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArrayOutput)
}

// The hard limit (in MiB) of memory to present to the container, instead of the default value from the task definition. If your container attempts to exceed the memory specified here, the container is killed. You must also specify a container name.
func (o PipeTargetParametersEcsTaskParametersOverridesOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParametersOverrides) *string { return v.Memory }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the IAM role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role.
func (o PipeTargetParametersEcsTaskParametersOverridesOutput) TaskRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParametersOverrides) *string { return v.TaskRoleArn }).(pulumi.StringPtrOutput)
}

type PipeTargetParametersEcsTaskParametersOverridesPtrOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersOverridesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParametersEcsTaskParametersOverrides)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersOverridesPtrOutput) ToPipeTargetParametersEcsTaskParametersOverridesPtrOutput() PipeTargetParametersEcsTaskParametersOverridesPtrOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesPtrOutput) ToPipeTargetParametersEcsTaskParametersOverridesPtrOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesPtrOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersEcsTaskParametersOverrides] {
	return pulumix.Output[*PipeTargetParametersEcsTaskParametersOverrides]{
		OutputState: o.OutputState,
	}
}

func (o PipeTargetParametersEcsTaskParametersOverridesPtrOutput) Elem() PipeTargetParametersEcsTaskParametersOverridesOutput {
	return o.ApplyT(func(v *PipeTargetParametersEcsTaskParametersOverrides) PipeTargetParametersEcsTaskParametersOverrides {
		if v != nil {
			return *v
		}
		var ret PipeTargetParametersEcsTaskParametersOverrides
		return ret
	}).(PipeTargetParametersEcsTaskParametersOverridesOutput)
}

// One or more container overrides that are sent to a task. Detailed below.
func (o PipeTargetParametersEcsTaskParametersOverridesPtrOutput) ContainerOverrides() PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArrayOutput {
	return o.ApplyT(func(v *PipeTargetParametersEcsTaskParametersOverrides) []PipeTargetParametersEcsTaskParametersOverridesContainerOverride {
		if v == nil {
			return nil
		}
		return v.ContainerOverrides
	}).(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArrayOutput)
}

// The number of cpu units reserved for the container, instead of the default value from the task definition. You must also specify a container name.
func (o PipeTargetParametersEcsTaskParametersOverridesPtrOutput) Cpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersEcsTaskParametersOverrides) *string {
		if v == nil {
			return nil
		}
		return v.Cpu
	}).(pulumi.StringPtrOutput)
}

// The ephemeral storage setting override for the task.  Detailed below.
func (o PipeTargetParametersEcsTaskParametersOverridesPtrOutput) EphemeralStorage() PipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersEcsTaskParametersOverrides) *PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage {
		if v == nil {
			return nil
		}
		return v.EphemeralStorage
	}).(PipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutput)
}

// The Amazon Resource Name (ARN) of the task execution IAM role override for the task.
func (o PipeTargetParametersEcsTaskParametersOverridesPtrOutput) ExecutionRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersEcsTaskParametersOverrides) *string {
		if v == nil {
			return nil
		}
		return v.ExecutionRoleArn
	}).(pulumi.StringPtrOutput)
}

// List of Elastic Inference accelerator overrides for the task. Detailed below.
func (o PipeTargetParametersEcsTaskParametersOverridesPtrOutput) InferenceAcceleratorOverrides() PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArrayOutput {
	return o.ApplyT(func(v *PipeTargetParametersEcsTaskParametersOverrides) []PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride {
		if v == nil {
			return nil
		}
		return v.InferenceAcceleratorOverrides
	}).(PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArrayOutput)
}

// The hard limit (in MiB) of memory to present to the container, instead of the default value from the task definition. If your container attempts to exceed the memory specified here, the container is killed. You must also specify a container name.
func (o PipeTargetParametersEcsTaskParametersOverridesPtrOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersEcsTaskParametersOverrides) *string {
		if v == nil {
			return nil
		}
		return v.Memory
	}).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the IAM role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role.
func (o PipeTargetParametersEcsTaskParametersOverridesPtrOutput) TaskRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersEcsTaskParametersOverrides) *string {
		if v == nil {
			return nil
		}
		return v.TaskRoleArn
	}).(pulumi.StringPtrOutput)
}

type PipeTargetParametersEcsTaskParametersOverridesContainerOverride struct {
	// List of commands to send to the container that overrides the default command from the Docker image or the task definition. You must also specify a container name.
	Commands []string `pulumi:"commands"`
	// The number of cpu units reserved for the container, instead of the default value from the task definition. You must also specify a container name.
	Cpu *int `pulumi:"cpu"`
	// A list of files containing the environment variables to pass to a container, instead of the value from the container definition. Detailed below.
	EnvironmentFiles []PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile `pulumi:"environmentFiles"`
	// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. You must also specify a container name. Detailed below.
	Environments []PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment `pulumi:"environments"`
	// The hard limit (in MiB) of memory to present to the container, instead of the default value from the task definition. If your container attempts to exceed the memory specified here, the container is killed. You must also specify a container name.
	Memory *int `pulumi:"memory"`
	// The soft limit (in MiB) of memory to reserve for the container, instead of the default value from the task definition. You must also specify a container name.
	MemoryReservation *int `pulumi:"memoryReservation"`
	// Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// The type and amount of a resource to assign to a container, instead of the default value from the task definition. The only supported resource is a GPU. Detailed below.
	ResourceRequirements []PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement `pulumi:"resourceRequirements"`
}

// PipeTargetParametersEcsTaskParametersOverridesContainerOverrideInput is an input type that accepts PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArgs and PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput values.
// You can construct a concrete instance of `PipeTargetParametersEcsTaskParametersOverridesContainerOverrideInput` via:
//
//	PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArgs{...}
type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideInput interface {
	pulumi.Input

	ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput() PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput
	ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutputWithContext(context.Context) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput
}

type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArgs struct {
	// List of commands to send to the container that overrides the default command from the Docker image or the task definition. You must also specify a container name.
	Commands pulumi.StringArrayInput `pulumi:"commands"`
	// The number of cpu units reserved for the container, instead of the default value from the task definition. You must also specify a container name.
	Cpu pulumi.IntPtrInput `pulumi:"cpu"`
	// A list of files containing the environment variables to pass to a container, instead of the value from the container definition. Detailed below.
	EnvironmentFiles PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArrayInput `pulumi:"environmentFiles"`
	// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. You must also specify a container name. Detailed below.
	Environments PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArrayInput `pulumi:"environments"`
	// The hard limit (in MiB) of memory to present to the container, instead of the default value from the task definition. If your container attempts to exceed the memory specified here, the container is killed. You must also specify a container name.
	Memory pulumi.IntPtrInput `pulumi:"memory"`
	// The soft limit (in MiB) of memory to reserve for the container, instead of the default value from the task definition. You must also specify a container name.
	MemoryReservation pulumi.IntPtrInput `pulumi:"memoryReservation"`
	// Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The type and amount of a resource to assign to a container, instead of the default value from the task definition. The only supported resource is a GPU. Detailed below.
	ResourceRequirements PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArrayInput `pulumi:"resourceRequirements"`
}

func (PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesContainerOverride)(nil)).Elem()
}

func (i PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArgs) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput() PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput {
	return i.ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArgs) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput)
}

func (i PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArgs) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParametersOverridesContainerOverride] {
	return pulumix.Output[PipeTargetParametersEcsTaskParametersOverridesContainerOverride]{
		OutputState: i.ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutputWithContext(ctx).OutputState,
	}
}

// PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArrayInput is an input type that accepts PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArray and PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArrayOutput values.
// You can construct a concrete instance of `PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArrayInput` via:
//
//	PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArray{ PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArgs{...} }
type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArrayInput interface {
	pulumi.Input

	ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideArrayOutput() PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArrayOutput
	ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideArrayOutputWithContext(context.Context) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArrayOutput
}

type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArray []PipeTargetParametersEcsTaskParametersOverridesContainerOverrideInput

func (PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeTargetParametersEcsTaskParametersOverridesContainerOverride)(nil)).Elem()
}

func (i PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArray) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideArrayOutput() PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArrayOutput {
	return i.ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideArrayOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArray) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideArrayOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArrayOutput)
}

func (i PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArray) ToOutput(ctx context.Context) pulumix.Output[[]PipeTargetParametersEcsTaskParametersOverridesContainerOverride] {
	return pulumix.Output[[]PipeTargetParametersEcsTaskParametersOverridesContainerOverride]{
		OutputState: i.ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideArrayOutputWithContext(ctx).OutputState,
	}
}

type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesContainerOverride)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput() PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParametersOverridesContainerOverride] {
	return pulumix.Output[PipeTargetParametersEcsTaskParametersOverridesContainerOverride]{
		OutputState: o.OutputState,
	}
}

// List of commands to send to the container that overrides the default command from the Docker image or the task definition. You must also specify a container name.
func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParametersOverridesContainerOverride) []string { return v.Commands }).(pulumi.StringArrayOutput)
}

// The number of cpu units reserved for the container, instead of the default value from the task definition. You must also specify a container name.
func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput) Cpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParametersOverridesContainerOverride) *int { return v.Cpu }).(pulumi.IntPtrOutput)
}

// A list of files containing the environment variables to pass to a container, instead of the value from the container definition. Detailed below.
func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput) EnvironmentFiles() PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArrayOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParametersOverridesContainerOverride) []PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile {
		return v.EnvironmentFiles
	}).(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArrayOutput)
}

// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. You must also specify a container name. Detailed below.
func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput) Environments() PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArrayOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParametersOverridesContainerOverride) []PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment {
		return v.Environments
	}).(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArrayOutput)
}

// The hard limit (in MiB) of memory to present to the container, instead of the default value from the task definition. If your container attempts to exceed the memory specified here, the container is killed. You must also specify a container name.
func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParametersOverridesContainerOverride) *int { return v.Memory }).(pulumi.IntPtrOutput)
}

// The soft limit (in MiB) of memory to reserve for the container, instead of the default value from the task definition. You must also specify a container name.
func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput) MemoryReservation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParametersOverridesContainerOverride) *int {
		return v.MemoryReservation
	}).(pulumi.IntPtrOutput)
}

// Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParametersOverridesContainerOverride) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The type and amount of a resource to assign to a container, instead of the default value from the task definition. The only supported resource is a GPU. Detailed below.
func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput) ResourceRequirements() PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArrayOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParametersOverridesContainerOverride) []PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement {
		return v.ResourceRequirements
	}).(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArrayOutput)
}

type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArrayOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeTargetParametersEcsTaskParametersOverridesContainerOverride)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArrayOutput) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideArrayOutput() PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArrayOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArrayOutput) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideArrayOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArrayOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PipeTargetParametersEcsTaskParametersOverridesContainerOverride] {
	return pulumix.Output[[]PipeTargetParametersEcsTaskParametersOverridesContainerOverride]{
		OutputState: o.OutputState,
	}
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArrayOutput) Index(i pulumi.IntInput) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipeTargetParametersEcsTaskParametersOverridesContainerOverride {
		return vs[0].([]PipeTargetParametersEcsTaskParametersOverridesContainerOverride)[vs[1].(int)]
	}).(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput)
}

type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment struct {
	// Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// Value of parameter to start execution of a SageMaker Model Building Pipeline. Maximum length of 1024.
	Value *string `pulumi:"value"`
}

// PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentInput is an input type that accepts PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArgs and PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput values.
// You can construct a concrete instance of `PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentInput` via:
//
//	PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArgs{...}
type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentInput interface {
	pulumi.Input

	ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput() PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput
	ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutputWithContext(context.Context) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput
}

type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArgs struct {
	// Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Value of parameter to start execution of a SageMaker Model Building Pipeline. Maximum length of 1024.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment)(nil)).Elem()
}

func (i PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArgs) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput() PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput {
	return i.ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArgs) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput)
}

func (i PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArgs) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment] {
	return pulumix.Output[PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment]{
		OutputState: i.ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutputWithContext(ctx).OutputState,
	}
}

// PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArrayInput is an input type that accepts PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArray and PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArrayOutput values.
// You can construct a concrete instance of `PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArrayInput` via:
//
//	PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArray{ PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArgs{...} }
type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArrayInput interface {
	pulumi.Input

	ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArrayOutput() PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArrayOutput
	ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArrayOutputWithContext(context.Context) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArrayOutput
}

type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArray []PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentInput

func (PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment)(nil)).Elem()
}

func (i PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArray) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArrayOutput() PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArrayOutput {
	return i.ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArrayOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArray) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArrayOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArrayOutput)
}

func (i PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArray) ToOutput(ctx context.Context) pulumix.Output[[]PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment] {
	return pulumix.Output[[]PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment]{
		OutputState: i.ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArrayOutputWithContext(ctx).OutputState,
	}
}

type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput() PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment] {
	return pulumix.Output[PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment]{
		OutputState: o.OutputState,
	}
}

// Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment) *string {
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Value of parameter to start execution of a SageMaker Model Building Pipeline. Maximum length of 1024.
func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment) *string {
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArrayOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArrayOutput) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArrayOutput() PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArrayOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArrayOutput) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArrayOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArrayOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment] {
	return pulumix.Output[[]PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment]{
		OutputState: o.OutputState,
	}
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArrayOutput) Index(i pulumi.IntInput) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment {
		return vs[0].([]PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment)[vs[1].(int)]
	}).(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput)
}

type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile struct {
	// The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task). Valid Values: random, spread, binpack.
	Type string `pulumi:"type"`
	// Value of parameter to start execution of a SageMaker Model Building Pipeline. Maximum length of 1024.
	Value string `pulumi:"value"`
}

// PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileInput is an input type that accepts PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArgs and PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput values.
// You can construct a concrete instance of `PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileInput` via:
//
//	PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArgs{...}
type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileInput interface {
	pulumi.Input

	ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput() PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput
	ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutputWithContext(context.Context) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput
}

type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArgs struct {
	// The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task). Valid Values: random, spread, binpack.
	Type pulumi.StringInput `pulumi:"type"`
	// Value of parameter to start execution of a SageMaker Model Building Pipeline. Maximum length of 1024.
	Value pulumi.StringInput `pulumi:"value"`
}

func (PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile)(nil)).Elem()
}

func (i PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArgs) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput() PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput {
	return i.ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArgs) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput)
}

func (i PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArgs) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile] {
	return pulumix.Output[PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile]{
		OutputState: i.ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutputWithContext(ctx).OutputState,
	}
}

// PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArrayInput is an input type that accepts PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArray and PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArrayOutput values.
// You can construct a concrete instance of `PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArrayInput` via:
//
//	PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArray{ PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArgs{...} }
type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArrayInput interface {
	pulumi.Input

	ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArrayOutput() PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArrayOutput
	ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArrayOutputWithContext(context.Context) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArrayOutput
}

type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArray []PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileInput

func (PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile)(nil)).Elem()
}

func (i PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArray) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArrayOutput() PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArrayOutput {
	return i.ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArrayOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArray) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArrayOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArrayOutput)
}

func (i PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArray) ToOutput(ctx context.Context) pulumix.Output[[]PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile] {
	return pulumix.Output[[]PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile]{
		OutputState: i.ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArrayOutputWithContext(ctx).OutputState,
	}
}

type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput() PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile] {
	return pulumix.Output[PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile]{
		OutputState: o.OutputState,
	}
}

// The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task). Valid Values: random, spread, binpack.
func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile) string {
		return v.Type
	}).(pulumi.StringOutput)
}

// Value of parameter to start execution of a SageMaker Model Building Pipeline. Maximum length of 1024.
func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile) string {
		return v.Value
	}).(pulumi.StringOutput)
}

type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArrayOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArrayOutput) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArrayOutput() PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArrayOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArrayOutput) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArrayOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArrayOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile] {
	return pulumix.Output[[]PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile]{
		OutputState: o.OutputState,
	}
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArrayOutput) Index(i pulumi.IntInput) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile {
		return vs[0].([]PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile)[vs[1].(int)]
	}).(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput)
}

type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement struct {
	// The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task). Valid Values: random, spread, binpack.
	Type string `pulumi:"type"`
	// Value of parameter to start execution of a SageMaker Model Building Pipeline. Maximum length of 1024.
	Value string `pulumi:"value"`
}

// PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementInput is an input type that accepts PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArgs and PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput values.
// You can construct a concrete instance of `PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementInput` via:
//
//	PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArgs{...}
type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementInput interface {
	pulumi.Input

	ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput() PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput
	ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutputWithContext(context.Context) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput
}

type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArgs struct {
	// The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task). Valid Values: random, spread, binpack.
	Type pulumi.StringInput `pulumi:"type"`
	// Value of parameter to start execution of a SageMaker Model Building Pipeline. Maximum length of 1024.
	Value pulumi.StringInput `pulumi:"value"`
}

func (PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement)(nil)).Elem()
}

func (i PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArgs) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput() PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput {
	return i.ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArgs) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput)
}

func (i PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArgs) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement] {
	return pulumix.Output[PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement]{
		OutputState: i.ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutputWithContext(ctx).OutputState,
	}
}

// PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArrayInput is an input type that accepts PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArray and PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArrayOutput values.
// You can construct a concrete instance of `PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArrayInput` via:
//
//	PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArray{ PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArgs{...} }
type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArrayInput interface {
	pulumi.Input

	ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArrayOutput() PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArrayOutput
	ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArrayOutputWithContext(context.Context) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArrayOutput
}

type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArray []PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementInput

func (PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement)(nil)).Elem()
}

func (i PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArray) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArrayOutput() PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArrayOutput {
	return i.ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArrayOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArray) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArrayOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArrayOutput)
}

func (i PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArray) ToOutput(ctx context.Context) pulumix.Output[[]PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement] {
	return pulumix.Output[[]PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement]{
		OutputState: i.ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArrayOutputWithContext(ctx).OutputState,
	}
}

type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput() PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement] {
	return pulumix.Output[PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement]{
		OutputState: o.OutputState,
	}
}

// The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task). Valid Values: random, spread, binpack.
func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement) string {
		return v.Type
	}).(pulumi.StringOutput)
}

// Value of parameter to start execution of a SageMaker Model Building Pipeline. Maximum length of 1024.
func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement) string {
		return v.Value
	}).(pulumi.StringOutput)
}

type PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArrayOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArrayOutput) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArrayOutput() PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArrayOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArrayOutput) ToPipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArrayOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArrayOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement] {
	return pulumix.Output[[]PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement]{
		OutputState: o.OutputState,
	}
}

func (o PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArrayOutput) Index(i pulumi.IntInput) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement {
		return vs[0].([]PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement)[vs[1].(int)]
	}).(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput)
}

type PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage struct {
	// The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is 21 GiB and the maximum supported value is 200 GiB.
	SizeInGib int `pulumi:"sizeInGib"`
}

// PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageInput is an input type that accepts PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageArgs and PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput values.
// You can construct a concrete instance of `PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageInput` via:
//
//	PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageArgs{...}
type PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageInput interface {
	pulumi.Input

	ToPipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput() PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput
	ToPipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutputWithContext(context.Context) PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput
}

type PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageArgs struct {
	// The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is 21 GiB and the maximum supported value is 200 GiB.
	SizeInGib pulumi.IntInput `pulumi:"sizeInGib"`
}

func (PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage)(nil)).Elem()
}

func (i PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageArgs) ToPipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput() PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput {
	return i.ToPipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageArgs) ToPipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput)
}

func (i PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageArgs) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage] {
	return pulumix.Output[PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage]{
		OutputState: i.ToPipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutputWithContext(ctx).OutputState,
	}
}

func (i PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageArgs) ToPipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutput() PipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutput {
	return i.ToPipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageArgs) ToPipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput).ToPipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutputWithContext(ctx)
}

// PipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrInput is an input type that accepts PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageArgs, PipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtr and PipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutput values.
// You can construct a concrete instance of `PipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrInput` via:
//
//	        PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageArgs{...}
//
//	or:
//
//	        nil
type PipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrInput interface {
	pulumi.Input

	ToPipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutput() PipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutput
	ToPipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutputWithContext(context.Context) PipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutput
}

type pipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrType PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageArgs

func PipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtr(v *PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageArgs) PipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrInput {
	return (*pipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrType)(v)
}

func (*pipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage)(nil)).Elem()
}

func (i *pipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrType) ToPipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutput() PipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutput {
	return i.ToPipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutputWithContext(context.Background())
}

func (i *pipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrType) ToPipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutput)
}

func (i *pipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrType) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage] {
	return pulumix.Output[*PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage]{
		OutputState: i.ToPipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutputWithContext(ctx).OutputState,
	}
}

type PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput) ToPipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput() PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput) ToPipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput) ToPipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutput() PipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutput {
	return o.ToPipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutputWithContext(context.Background())
}

func (o PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput) ToPipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage) *PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage {
		return &v
	}).(PipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutput)
}

func (o PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage] {
	return pulumix.Output[PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage]{
		OutputState: o.OutputState,
	}
}

// The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is 21 GiB and the maximum supported value is 200 GiB.
func (o PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput) SizeInGib() pulumi.IntOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage) int { return v.SizeInGib }).(pulumi.IntOutput)
}

type PipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutput) ToPipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutput() PipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutput) ToPipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage] {
	return pulumix.Output[*PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage]{
		OutputState: o.OutputState,
	}
}

func (o PipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutput) Elem() PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput {
	return o.ApplyT(func(v *PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage) PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage {
		if v != nil {
			return *v
		}
		var ret PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage
		return ret
	}).(PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput)
}

// The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is 21 GiB and the maximum supported value is 200 GiB.
func (o PipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutput) SizeInGib() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage) *int {
		if v == nil {
			return nil
		}
		return &v.SizeInGib
	}).(pulumi.IntPtrOutput)
}

type PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride struct {
	// The Elastic Inference accelerator device name to override for the task. This parameter must match a deviceName specified in the task definition.
	DeviceName *string `pulumi:"deviceName"`
	// The Elastic Inference accelerator type to use.
	DeviceType *string `pulumi:"deviceType"`
}

// PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideInput is an input type that accepts PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArgs and PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput values.
// You can construct a concrete instance of `PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideInput` via:
//
//	PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArgs{...}
type PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideInput interface {
	pulumi.Input

	ToPipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput() PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput
	ToPipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutputWithContext(context.Context) PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput
}

type PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArgs struct {
	// The Elastic Inference accelerator device name to override for the task. This parameter must match a deviceName specified in the task definition.
	DeviceName pulumi.StringPtrInput `pulumi:"deviceName"`
	// The Elastic Inference accelerator type to use.
	DeviceType pulumi.StringPtrInput `pulumi:"deviceType"`
}

func (PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride)(nil)).Elem()
}

func (i PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArgs) ToPipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput() PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput {
	return i.ToPipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArgs) ToPipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput)
}

func (i PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArgs) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride] {
	return pulumix.Output[PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride]{
		OutputState: i.ToPipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutputWithContext(ctx).OutputState,
	}
}

// PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArrayInput is an input type that accepts PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArray and PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArrayOutput values.
// You can construct a concrete instance of `PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArrayInput` via:
//
//	PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArray{ PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArgs{...} }
type PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArrayInput interface {
	pulumi.Input

	ToPipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArrayOutput() PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArrayOutput
	ToPipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArrayOutputWithContext(context.Context) PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArrayOutput
}

type PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArray []PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideInput

func (PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride)(nil)).Elem()
}

func (i PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArray) ToPipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArrayOutput() PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArrayOutput {
	return i.ToPipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArrayOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArray) ToPipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArrayOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArrayOutput)
}

func (i PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArray) ToOutput(ctx context.Context) pulumix.Output[[]PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride] {
	return pulumix.Output[[]PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride]{
		OutputState: i.ToPipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArrayOutputWithContext(ctx).OutputState,
	}
}

type PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput) ToPipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput() PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput) ToPipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride] {
	return pulumix.Output[PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride]{
		OutputState: o.OutputState,
	}
}

// The Elastic Inference accelerator device name to override for the task. This parameter must match a deviceName specified in the task definition.
func (o PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput) DeviceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride) *string {
		return v.DeviceName
	}).(pulumi.StringPtrOutput)
}

// The Elastic Inference accelerator type to use.
func (o PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput) DeviceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride) *string {
		return v.DeviceType
	}).(pulumi.StringPtrOutput)
}

type PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArrayOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArrayOutput) ToPipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArrayOutput() PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArrayOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArrayOutput) ToPipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArrayOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArrayOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride] {
	return pulumix.Output[[]PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride]{
		OutputState: o.OutputState,
	}
}

func (o PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArrayOutput) Index(i pulumi.IntInput) PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride {
		return vs[0].([]PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride)[vs[1].(int)]
	}).(PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput)
}

type PipeTargetParametersEcsTaskParametersPlacementConstraint struct {
	// A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is distinctInstance. Maximum length of 2,000.
	Expression *string `pulumi:"expression"`
	// The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task). Valid Values: random, spread, binpack.
	Type *string `pulumi:"type"`
}

// PipeTargetParametersEcsTaskParametersPlacementConstraintInput is an input type that accepts PipeTargetParametersEcsTaskParametersPlacementConstraintArgs and PipeTargetParametersEcsTaskParametersPlacementConstraintOutput values.
// You can construct a concrete instance of `PipeTargetParametersEcsTaskParametersPlacementConstraintInput` via:
//
//	PipeTargetParametersEcsTaskParametersPlacementConstraintArgs{...}
type PipeTargetParametersEcsTaskParametersPlacementConstraintInput interface {
	pulumi.Input

	ToPipeTargetParametersEcsTaskParametersPlacementConstraintOutput() PipeTargetParametersEcsTaskParametersPlacementConstraintOutput
	ToPipeTargetParametersEcsTaskParametersPlacementConstraintOutputWithContext(context.Context) PipeTargetParametersEcsTaskParametersPlacementConstraintOutput
}

type PipeTargetParametersEcsTaskParametersPlacementConstraintArgs struct {
	// A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is distinctInstance. Maximum length of 2,000.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task). Valid Values: random, spread, binpack.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (PipeTargetParametersEcsTaskParametersPlacementConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersPlacementConstraint)(nil)).Elem()
}

func (i PipeTargetParametersEcsTaskParametersPlacementConstraintArgs) ToPipeTargetParametersEcsTaskParametersPlacementConstraintOutput() PipeTargetParametersEcsTaskParametersPlacementConstraintOutput {
	return i.ToPipeTargetParametersEcsTaskParametersPlacementConstraintOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersPlacementConstraintArgs) ToPipeTargetParametersEcsTaskParametersPlacementConstraintOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersPlacementConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersPlacementConstraintOutput)
}

func (i PipeTargetParametersEcsTaskParametersPlacementConstraintArgs) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParametersPlacementConstraint] {
	return pulumix.Output[PipeTargetParametersEcsTaskParametersPlacementConstraint]{
		OutputState: i.ToPipeTargetParametersEcsTaskParametersPlacementConstraintOutputWithContext(ctx).OutputState,
	}
}

// PipeTargetParametersEcsTaskParametersPlacementConstraintArrayInput is an input type that accepts PipeTargetParametersEcsTaskParametersPlacementConstraintArray and PipeTargetParametersEcsTaskParametersPlacementConstraintArrayOutput values.
// You can construct a concrete instance of `PipeTargetParametersEcsTaskParametersPlacementConstraintArrayInput` via:
//
//	PipeTargetParametersEcsTaskParametersPlacementConstraintArray{ PipeTargetParametersEcsTaskParametersPlacementConstraintArgs{...} }
type PipeTargetParametersEcsTaskParametersPlacementConstraintArrayInput interface {
	pulumi.Input

	ToPipeTargetParametersEcsTaskParametersPlacementConstraintArrayOutput() PipeTargetParametersEcsTaskParametersPlacementConstraintArrayOutput
	ToPipeTargetParametersEcsTaskParametersPlacementConstraintArrayOutputWithContext(context.Context) PipeTargetParametersEcsTaskParametersPlacementConstraintArrayOutput
}

type PipeTargetParametersEcsTaskParametersPlacementConstraintArray []PipeTargetParametersEcsTaskParametersPlacementConstraintInput

func (PipeTargetParametersEcsTaskParametersPlacementConstraintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeTargetParametersEcsTaskParametersPlacementConstraint)(nil)).Elem()
}

func (i PipeTargetParametersEcsTaskParametersPlacementConstraintArray) ToPipeTargetParametersEcsTaskParametersPlacementConstraintArrayOutput() PipeTargetParametersEcsTaskParametersPlacementConstraintArrayOutput {
	return i.ToPipeTargetParametersEcsTaskParametersPlacementConstraintArrayOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersPlacementConstraintArray) ToPipeTargetParametersEcsTaskParametersPlacementConstraintArrayOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersPlacementConstraintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersPlacementConstraintArrayOutput)
}

func (i PipeTargetParametersEcsTaskParametersPlacementConstraintArray) ToOutput(ctx context.Context) pulumix.Output[[]PipeTargetParametersEcsTaskParametersPlacementConstraint] {
	return pulumix.Output[[]PipeTargetParametersEcsTaskParametersPlacementConstraint]{
		OutputState: i.ToPipeTargetParametersEcsTaskParametersPlacementConstraintArrayOutputWithContext(ctx).OutputState,
	}
}

type PipeTargetParametersEcsTaskParametersPlacementConstraintOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersPlacementConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersPlacementConstraint)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersPlacementConstraintOutput) ToPipeTargetParametersEcsTaskParametersPlacementConstraintOutput() PipeTargetParametersEcsTaskParametersPlacementConstraintOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersPlacementConstraintOutput) ToPipeTargetParametersEcsTaskParametersPlacementConstraintOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersPlacementConstraintOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersPlacementConstraintOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParametersPlacementConstraint] {
	return pulumix.Output[PipeTargetParametersEcsTaskParametersPlacementConstraint]{
		OutputState: o.OutputState,
	}
}

// A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is distinctInstance. Maximum length of 2,000.
func (o PipeTargetParametersEcsTaskParametersPlacementConstraintOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParametersPlacementConstraint) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task). Valid Values: random, spread, binpack.
func (o PipeTargetParametersEcsTaskParametersPlacementConstraintOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParametersPlacementConstraint) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PipeTargetParametersEcsTaskParametersPlacementConstraintArrayOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersPlacementConstraintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeTargetParametersEcsTaskParametersPlacementConstraint)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersPlacementConstraintArrayOutput) ToPipeTargetParametersEcsTaskParametersPlacementConstraintArrayOutput() PipeTargetParametersEcsTaskParametersPlacementConstraintArrayOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersPlacementConstraintArrayOutput) ToPipeTargetParametersEcsTaskParametersPlacementConstraintArrayOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersPlacementConstraintArrayOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersPlacementConstraintArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PipeTargetParametersEcsTaskParametersPlacementConstraint] {
	return pulumix.Output[[]PipeTargetParametersEcsTaskParametersPlacementConstraint]{
		OutputState: o.OutputState,
	}
}

func (o PipeTargetParametersEcsTaskParametersPlacementConstraintArrayOutput) Index(i pulumi.IntInput) PipeTargetParametersEcsTaskParametersPlacementConstraintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipeTargetParametersEcsTaskParametersPlacementConstraint {
		return vs[0].([]PipeTargetParametersEcsTaskParametersPlacementConstraint)[vs[1].(int)]
	}).(PipeTargetParametersEcsTaskParametersPlacementConstraintOutput)
}

type PipeTargetParametersEcsTaskParametersPlacementStrategy struct {
	// The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or host, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are cpu and memory. For the random placement strategy, this field is not used. Maximum length of 255.
	Field *string `pulumi:"field"`
	// The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task). Valid Values: random, spread, binpack.
	Type *string `pulumi:"type"`
}

// PipeTargetParametersEcsTaskParametersPlacementStrategyInput is an input type that accepts PipeTargetParametersEcsTaskParametersPlacementStrategyArgs and PipeTargetParametersEcsTaskParametersPlacementStrategyOutput values.
// You can construct a concrete instance of `PipeTargetParametersEcsTaskParametersPlacementStrategyInput` via:
//
//	PipeTargetParametersEcsTaskParametersPlacementStrategyArgs{...}
type PipeTargetParametersEcsTaskParametersPlacementStrategyInput interface {
	pulumi.Input

	ToPipeTargetParametersEcsTaskParametersPlacementStrategyOutput() PipeTargetParametersEcsTaskParametersPlacementStrategyOutput
	ToPipeTargetParametersEcsTaskParametersPlacementStrategyOutputWithContext(context.Context) PipeTargetParametersEcsTaskParametersPlacementStrategyOutput
}

type PipeTargetParametersEcsTaskParametersPlacementStrategyArgs struct {
	// The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or host, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are cpu and memory. For the random placement strategy, this field is not used. Maximum length of 255.
	Field pulumi.StringPtrInput `pulumi:"field"`
	// The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task). Valid Values: random, spread, binpack.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (PipeTargetParametersEcsTaskParametersPlacementStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersPlacementStrategy)(nil)).Elem()
}

func (i PipeTargetParametersEcsTaskParametersPlacementStrategyArgs) ToPipeTargetParametersEcsTaskParametersPlacementStrategyOutput() PipeTargetParametersEcsTaskParametersPlacementStrategyOutput {
	return i.ToPipeTargetParametersEcsTaskParametersPlacementStrategyOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersPlacementStrategyArgs) ToPipeTargetParametersEcsTaskParametersPlacementStrategyOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersPlacementStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersPlacementStrategyOutput)
}

func (i PipeTargetParametersEcsTaskParametersPlacementStrategyArgs) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParametersPlacementStrategy] {
	return pulumix.Output[PipeTargetParametersEcsTaskParametersPlacementStrategy]{
		OutputState: i.ToPipeTargetParametersEcsTaskParametersPlacementStrategyOutputWithContext(ctx).OutputState,
	}
}

// PipeTargetParametersEcsTaskParametersPlacementStrategyArrayInput is an input type that accepts PipeTargetParametersEcsTaskParametersPlacementStrategyArray and PipeTargetParametersEcsTaskParametersPlacementStrategyArrayOutput values.
// You can construct a concrete instance of `PipeTargetParametersEcsTaskParametersPlacementStrategyArrayInput` via:
//
//	PipeTargetParametersEcsTaskParametersPlacementStrategyArray{ PipeTargetParametersEcsTaskParametersPlacementStrategyArgs{...} }
type PipeTargetParametersEcsTaskParametersPlacementStrategyArrayInput interface {
	pulumi.Input

	ToPipeTargetParametersEcsTaskParametersPlacementStrategyArrayOutput() PipeTargetParametersEcsTaskParametersPlacementStrategyArrayOutput
	ToPipeTargetParametersEcsTaskParametersPlacementStrategyArrayOutputWithContext(context.Context) PipeTargetParametersEcsTaskParametersPlacementStrategyArrayOutput
}

type PipeTargetParametersEcsTaskParametersPlacementStrategyArray []PipeTargetParametersEcsTaskParametersPlacementStrategyInput

func (PipeTargetParametersEcsTaskParametersPlacementStrategyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeTargetParametersEcsTaskParametersPlacementStrategy)(nil)).Elem()
}

func (i PipeTargetParametersEcsTaskParametersPlacementStrategyArray) ToPipeTargetParametersEcsTaskParametersPlacementStrategyArrayOutput() PipeTargetParametersEcsTaskParametersPlacementStrategyArrayOutput {
	return i.ToPipeTargetParametersEcsTaskParametersPlacementStrategyArrayOutputWithContext(context.Background())
}

func (i PipeTargetParametersEcsTaskParametersPlacementStrategyArray) ToPipeTargetParametersEcsTaskParametersPlacementStrategyArrayOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersPlacementStrategyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEcsTaskParametersPlacementStrategyArrayOutput)
}

func (i PipeTargetParametersEcsTaskParametersPlacementStrategyArray) ToOutput(ctx context.Context) pulumix.Output[[]PipeTargetParametersEcsTaskParametersPlacementStrategy] {
	return pulumix.Output[[]PipeTargetParametersEcsTaskParametersPlacementStrategy]{
		OutputState: i.ToPipeTargetParametersEcsTaskParametersPlacementStrategyArrayOutputWithContext(ctx).OutputState,
	}
}

type PipeTargetParametersEcsTaskParametersPlacementStrategyOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersPlacementStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEcsTaskParametersPlacementStrategy)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersPlacementStrategyOutput) ToPipeTargetParametersEcsTaskParametersPlacementStrategyOutput() PipeTargetParametersEcsTaskParametersPlacementStrategyOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersPlacementStrategyOutput) ToPipeTargetParametersEcsTaskParametersPlacementStrategyOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersPlacementStrategyOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersPlacementStrategyOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEcsTaskParametersPlacementStrategy] {
	return pulumix.Output[PipeTargetParametersEcsTaskParametersPlacementStrategy]{
		OutputState: o.OutputState,
	}
}

// The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or host, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are cpu and memory. For the random placement strategy, this field is not used. Maximum length of 255.
func (o PipeTargetParametersEcsTaskParametersPlacementStrategyOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParametersPlacementStrategy) *string { return v.Field }).(pulumi.StringPtrOutput)
}

// The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task). Valid Values: random, spread, binpack.
func (o PipeTargetParametersEcsTaskParametersPlacementStrategyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersEcsTaskParametersPlacementStrategy) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PipeTargetParametersEcsTaskParametersPlacementStrategyArrayOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEcsTaskParametersPlacementStrategyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeTargetParametersEcsTaskParametersPlacementStrategy)(nil)).Elem()
}

func (o PipeTargetParametersEcsTaskParametersPlacementStrategyArrayOutput) ToPipeTargetParametersEcsTaskParametersPlacementStrategyArrayOutput() PipeTargetParametersEcsTaskParametersPlacementStrategyArrayOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersPlacementStrategyArrayOutput) ToPipeTargetParametersEcsTaskParametersPlacementStrategyArrayOutputWithContext(ctx context.Context) PipeTargetParametersEcsTaskParametersPlacementStrategyArrayOutput {
	return o
}

func (o PipeTargetParametersEcsTaskParametersPlacementStrategyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PipeTargetParametersEcsTaskParametersPlacementStrategy] {
	return pulumix.Output[[]PipeTargetParametersEcsTaskParametersPlacementStrategy]{
		OutputState: o.OutputState,
	}
}

func (o PipeTargetParametersEcsTaskParametersPlacementStrategyArrayOutput) Index(i pulumi.IntInput) PipeTargetParametersEcsTaskParametersPlacementStrategyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipeTargetParametersEcsTaskParametersPlacementStrategy {
		return vs[0].([]PipeTargetParametersEcsTaskParametersPlacementStrategy)[vs[1].(int)]
	}).(PipeTargetParametersEcsTaskParametersPlacementStrategyOutput)
}

type PipeTargetParametersEventbridgeEventBusParameters struct {
	// A free-form string, with a maximum of 128 characters, used to decide what fields to expect in the event detail.
	DetailType *string `pulumi:"detailType"`
	// The URL subdomain of the endpoint. For example, if the URL for Endpoint is https://abcde.veo.endpoints.event.amazonaws.com, then the EndpointId is abcde.veo.
	EndpointId *string `pulumi:"endpointId"`
	// List of AWS resources, identified by Amazon Resource Name (ARN), which the event primarily concerns. Any number, including zero, may be present.
	Resources []string `pulumi:"resources"`
	// Source resource of the pipe (typically an ARN).
	Source *string `pulumi:"source"`
	// The time stamp of the event, per RFC3339. If no time stamp is provided, the time stamp of the PutEvents call is used. This is the JSON path to the field in the event e.g. $.detail.timestamp
	Time *string `pulumi:"time"`
}

// PipeTargetParametersEventbridgeEventBusParametersInput is an input type that accepts PipeTargetParametersEventbridgeEventBusParametersArgs and PipeTargetParametersEventbridgeEventBusParametersOutput values.
// You can construct a concrete instance of `PipeTargetParametersEventbridgeEventBusParametersInput` via:
//
//	PipeTargetParametersEventbridgeEventBusParametersArgs{...}
type PipeTargetParametersEventbridgeEventBusParametersInput interface {
	pulumi.Input

	ToPipeTargetParametersEventbridgeEventBusParametersOutput() PipeTargetParametersEventbridgeEventBusParametersOutput
	ToPipeTargetParametersEventbridgeEventBusParametersOutputWithContext(context.Context) PipeTargetParametersEventbridgeEventBusParametersOutput
}

type PipeTargetParametersEventbridgeEventBusParametersArgs struct {
	// A free-form string, with a maximum of 128 characters, used to decide what fields to expect in the event detail.
	DetailType pulumi.StringPtrInput `pulumi:"detailType"`
	// The URL subdomain of the endpoint. For example, if the URL for Endpoint is https://abcde.veo.endpoints.event.amazonaws.com, then the EndpointId is abcde.veo.
	EndpointId pulumi.StringPtrInput `pulumi:"endpointId"`
	// List of AWS resources, identified by Amazon Resource Name (ARN), which the event primarily concerns. Any number, including zero, may be present.
	Resources pulumi.StringArrayInput `pulumi:"resources"`
	// Source resource of the pipe (typically an ARN).
	Source pulumi.StringPtrInput `pulumi:"source"`
	// The time stamp of the event, per RFC3339. If no time stamp is provided, the time stamp of the PutEvents call is used. This is the JSON path to the field in the event e.g. $.detail.timestamp
	Time pulumi.StringPtrInput `pulumi:"time"`
}

func (PipeTargetParametersEventbridgeEventBusParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEventbridgeEventBusParameters)(nil)).Elem()
}

func (i PipeTargetParametersEventbridgeEventBusParametersArgs) ToPipeTargetParametersEventbridgeEventBusParametersOutput() PipeTargetParametersEventbridgeEventBusParametersOutput {
	return i.ToPipeTargetParametersEventbridgeEventBusParametersOutputWithContext(context.Background())
}

func (i PipeTargetParametersEventbridgeEventBusParametersArgs) ToPipeTargetParametersEventbridgeEventBusParametersOutputWithContext(ctx context.Context) PipeTargetParametersEventbridgeEventBusParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEventbridgeEventBusParametersOutput)
}

func (i PipeTargetParametersEventbridgeEventBusParametersArgs) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEventbridgeEventBusParameters] {
	return pulumix.Output[PipeTargetParametersEventbridgeEventBusParameters]{
		OutputState: i.ToPipeTargetParametersEventbridgeEventBusParametersOutputWithContext(ctx).OutputState,
	}
}

func (i PipeTargetParametersEventbridgeEventBusParametersArgs) ToPipeTargetParametersEventbridgeEventBusParametersPtrOutput() PipeTargetParametersEventbridgeEventBusParametersPtrOutput {
	return i.ToPipeTargetParametersEventbridgeEventBusParametersPtrOutputWithContext(context.Background())
}

func (i PipeTargetParametersEventbridgeEventBusParametersArgs) ToPipeTargetParametersEventbridgeEventBusParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersEventbridgeEventBusParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEventbridgeEventBusParametersOutput).ToPipeTargetParametersEventbridgeEventBusParametersPtrOutputWithContext(ctx)
}

// PipeTargetParametersEventbridgeEventBusParametersPtrInput is an input type that accepts PipeTargetParametersEventbridgeEventBusParametersArgs, PipeTargetParametersEventbridgeEventBusParametersPtr and PipeTargetParametersEventbridgeEventBusParametersPtrOutput values.
// You can construct a concrete instance of `PipeTargetParametersEventbridgeEventBusParametersPtrInput` via:
//
//	        PipeTargetParametersEventbridgeEventBusParametersArgs{...}
//
//	or:
//
//	        nil
type PipeTargetParametersEventbridgeEventBusParametersPtrInput interface {
	pulumi.Input

	ToPipeTargetParametersEventbridgeEventBusParametersPtrOutput() PipeTargetParametersEventbridgeEventBusParametersPtrOutput
	ToPipeTargetParametersEventbridgeEventBusParametersPtrOutputWithContext(context.Context) PipeTargetParametersEventbridgeEventBusParametersPtrOutput
}

type pipeTargetParametersEventbridgeEventBusParametersPtrType PipeTargetParametersEventbridgeEventBusParametersArgs

func PipeTargetParametersEventbridgeEventBusParametersPtr(v *PipeTargetParametersEventbridgeEventBusParametersArgs) PipeTargetParametersEventbridgeEventBusParametersPtrInput {
	return (*pipeTargetParametersEventbridgeEventBusParametersPtrType)(v)
}

func (*pipeTargetParametersEventbridgeEventBusParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParametersEventbridgeEventBusParameters)(nil)).Elem()
}

func (i *pipeTargetParametersEventbridgeEventBusParametersPtrType) ToPipeTargetParametersEventbridgeEventBusParametersPtrOutput() PipeTargetParametersEventbridgeEventBusParametersPtrOutput {
	return i.ToPipeTargetParametersEventbridgeEventBusParametersPtrOutputWithContext(context.Background())
}

func (i *pipeTargetParametersEventbridgeEventBusParametersPtrType) ToPipeTargetParametersEventbridgeEventBusParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersEventbridgeEventBusParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersEventbridgeEventBusParametersPtrOutput)
}

func (i *pipeTargetParametersEventbridgeEventBusParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersEventbridgeEventBusParameters] {
	return pulumix.Output[*PipeTargetParametersEventbridgeEventBusParameters]{
		OutputState: i.ToPipeTargetParametersEventbridgeEventBusParametersPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeTargetParametersEventbridgeEventBusParametersOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEventbridgeEventBusParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersEventbridgeEventBusParameters)(nil)).Elem()
}

func (o PipeTargetParametersEventbridgeEventBusParametersOutput) ToPipeTargetParametersEventbridgeEventBusParametersOutput() PipeTargetParametersEventbridgeEventBusParametersOutput {
	return o
}

func (o PipeTargetParametersEventbridgeEventBusParametersOutput) ToPipeTargetParametersEventbridgeEventBusParametersOutputWithContext(ctx context.Context) PipeTargetParametersEventbridgeEventBusParametersOutput {
	return o
}

func (o PipeTargetParametersEventbridgeEventBusParametersOutput) ToPipeTargetParametersEventbridgeEventBusParametersPtrOutput() PipeTargetParametersEventbridgeEventBusParametersPtrOutput {
	return o.ToPipeTargetParametersEventbridgeEventBusParametersPtrOutputWithContext(context.Background())
}

func (o PipeTargetParametersEventbridgeEventBusParametersOutput) ToPipeTargetParametersEventbridgeEventBusParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersEventbridgeEventBusParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeTargetParametersEventbridgeEventBusParameters) *PipeTargetParametersEventbridgeEventBusParameters {
		return &v
	}).(PipeTargetParametersEventbridgeEventBusParametersPtrOutput)
}

func (o PipeTargetParametersEventbridgeEventBusParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersEventbridgeEventBusParameters] {
	return pulumix.Output[PipeTargetParametersEventbridgeEventBusParameters]{
		OutputState: o.OutputState,
	}
}

// A free-form string, with a maximum of 128 characters, used to decide what fields to expect in the event detail.
func (o PipeTargetParametersEventbridgeEventBusParametersOutput) DetailType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersEventbridgeEventBusParameters) *string { return v.DetailType }).(pulumi.StringPtrOutput)
}

// The URL subdomain of the endpoint. For example, if the URL for Endpoint is https://abcde.veo.endpoints.event.amazonaws.com, then the EndpointId is abcde.veo.
func (o PipeTargetParametersEventbridgeEventBusParametersOutput) EndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersEventbridgeEventBusParameters) *string { return v.EndpointId }).(pulumi.StringPtrOutput)
}

// List of AWS resources, identified by Amazon Resource Name (ARN), which the event primarily concerns. Any number, including zero, may be present.
func (o PipeTargetParametersEventbridgeEventBusParametersOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipeTargetParametersEventbridgeEventBusParameters) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

// Source resource of the pipe (typically an ARN).
func (o PipeTargetParametersEventbridgeEventBusParametersOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersEventbridgeEventBusParameters) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// The time stamp of the event, per RFC3339. If no time stamp is provided, the time stamp of the PutEvents call is used. This is the JSON path to the field in the event e.g. $.detail.timestamp
func (o PipeTargetParametersEventbridgeEventBusParametersOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersEventbridgeEventBusParameters) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type PipeTargetParametersEventbridgeEventBusParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersEventbridgeEventBusParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParametersEventbridgeEventBusParameters)(nil)).Elem()
}

func (o PipeTargetParametersEventbridgeEventBusParametersPtrOutput) ToPipeTargetParametersEventbridgeEventBusParametersPtrOutput() PipeTargetParametersEventbridgeEventBusParametersPtrOutput {
	return o
}

func (o PipeTargetParametersEventbridgeEventBusParametersPtrOutput) ToPipeTargetParametersEventbridgeEventBusParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersEventbridgeEventBusParametersPtrOutput {
	return o
}

func (o PipeTargetParametersEventbridgeEventBusParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersEventbridgeEventBusParameters] {
	return pulumix.Output[*PipeTargetParametersEventbridgeEventBusParameters]{
		OutputState: o.OutputState,
	}
}

func (o PipeTargetParametersEventbridgeEventBusParametersPtrOutput) Elem() PipeTargetParametersEventbridgeEventBusParametersOutput {
	return o.ApplyT(func(v *PipeTargetParametersEventbridgeEventBusParameters) PipeTargetParametersEventbridgeEventBusParameters {
		if v != nil {
			return *v
		}
		var ret PipeTargetParametersEventbridgeEventBusParameters
		return ret
	}).(PipeTargetParametersEventbridgeEventBusParametersOutput)
}

// A free-form string, with a maximum of 128 characters, used to decide what fields to expect in the event detail.
func (o PipeTargetParametersEventbridgeEventBusParametersPtrOutput) DetailType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersEventbridgeEventBusParameters) *string {
		if v == nil {
			return nil
		}
		return v.DetailType
	}).(pulumi.StringPtrOutput)
}

// The URL subdomain of the endpoint. For example, if the URL for Endpoint is https://abcde.veo.endpoints.event.amazonaws.com, then the EndpointId is abcde.veo.
func (o PipeTargetParametersEventbridgeEventBusParametersPtrOutput) EndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersEventbridgeEventBusParameters) *string {
		if v == nil {
			return nil
		}
		return v.EndpointId
	}).(pulumi.StringPtrOutput)
}

// List of AWS resources, identified by Amazon Resource Name (ARN), which the event primarily concerns. Any number, including zero, may be present.
func (o PipeTargetParametersEventbridgeEventBusParametersPtrOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PipeTargetParametersEventbridgeEventBusParameters) []string {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(pulumi.StringArrayOutput)
}

// Source resource of the pipe (typically an ARN).
func (o PipeTargetParametersEventbridgeEventBusParametersPtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersEventbridgeEventBusParameters) *string {
		if v == nil {
			return nil
		}
		return v.Source
	}).(pulumi.StringPtrOutput)
}

// The time stamp of the event, per RFC3339. If no time stamp is provided, the time stamp of the PutEvents call is used. This is the JSON path to the field in the event e.g. $.detail.timestamp
func (o PipeTargetParametersEventbridgeEventBusParametersPtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersEventbridgeEventBusParameters) *string {
		if v == nil {
			return nil
		}
		return v.Time
	}).(pulumi.StringPtrOutput)
}

type PipeTargetParametersHttpParameters struct {
	// Key-value mapping of the headers that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
	HeaderParameters map[string]string `pulumi:"headerParameters"`
	// The path parameter values to be used to populate API Gateway REST API or EventBridge ApiDestination path wildcards ("*").
	PathParameterValues *string `pulumi:"pathParameterValues"`
	// Key-value mapping of the query strings that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
	QueryStringParameters map[string]string `pulumi:"queryStringParameters"`
}

// PipeTargetParametersHttpParametersInput is an input type that accepts PipeTargetParametersHttpParametersArgs and PipeTargetParametersHttpParametersOutput values.
// You can construct a concrete instance of `PipeTargetParametersHttpParametersInput` via:
//
//	PipeTargetParametersHttpParametersArgs{...}
type PipeTargetParametersHttpParametersInput interface {
	pulumi.Input

	ToPipeTargetParametersHttpParametersOutput() PipeTargetParametersHttpParametersOutput
	ToPipeTargetParametersHttpParametersOutputWithContext(context.Context) PipeTargetParametersHttpParametersOutput
}

type PipeTargetParametersHttpParametersArgs struct {
	// Key-value mapping of the headers that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
	HeaderParameters pulumi.StringMapInput `pulumi:"headerParameters"`
	// The path parameter values to be used to populate API Gateway REST API or EventBridge ApiDestination path wildcards ("*").
	PathParameterValues pulumi.StringPtrInput `pulumi:"pathParameterValues"`
	// Key-value mapping of the query strings that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
	QueryStringParameters pulumi.StringMapInput `pulumi:"queryStringParameters"`
}

func (PipeTargetParametersHttpParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersHttpParameters)(nil)).Elem()
}

func (i PipeTargetParametersHttpParametersArgs) ToPipeTargetParametersHttpParametersOutput() PipeTargetParametersHttpParametersOutput {
	return i.ToPipeTargetParametersHttpParametersOutputWithContext(context.Background())
}

func (i PipeTargetParametersHttpParametersArgs) ToPipeTargetParametersHttpParametersOutputWithContext(ctx context.Context) PipeTargetParametersHttpParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersHttpParametersOutput)
}

func (i PipeTargetParametersHttpParametersArgs) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersHttpParameters] {
	return pulumix.Output[PipeTargetParametersHttpParameters]{
		OutputState: i.ToPipeTargetParametersHttpParametersOutputWithContext(ctx).OutputState,
	}
}

func (i PipeTargetParametersHttpParametersArgs) ToPipeTargetParametersHttpParametersPtrOutput() PipeTargetParametersHttpParametersPtrOutput {
	return i.ToPipeTargetParametersHttpParametersPtrOutputWithContext(context.Background())
}

func (i PipeTargetParametersHttpParametersArgs) ToPipeTargetParametersHttpParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersHttpParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersHttpParametersOutput).ToPipeTargetParametersHttpParametersPtrOutputWithContext(ctx)
}

// PipeTargetParametersHttpParametersPtrInput is an input type that accepts PipeTargetParametersHttpParametersArgs, PipeTargetParametersHttpParametersPtr and PipeTargetParametersHttpParametersPtrOutput values.
// You can construct a concrete instance of `PipeTargetParametersHttpParametersPtrInput` via:
//
//	        PipeTargetParametersHttpParametersArgs{...}
//
//	or:
//
//	        nil
type PipeTargetParametersHttpParametersPtrInput interface {
	pulumi.Input

	ToPipeTargetParametersHttpParametersPtrOutput() PipeTargetParametersHttpParametersPtrOutput
	ToPipeTargetParametersHttpParametersPtrOutputWithContext(context.Context) PipeTargetParametersHttpParametersPtrOutput
}

type pipeTargetParametersHttpParametersPtrType PipeTargetParametersHttpParametersArgs

func PipeTargetParametersHttpParametersPtr(v *PipeTargetParametersHttpParametersArgs) PipeTargetParametersHttpParametersPtrInput {
	return (*pipeTargetParametersHttpParametersPtrType)(v)
}

func (*pipeTargetParametersHttpParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParametersHttpParameters)(nil)).Elem()
}

func (i *pipeTargetParametersHttpParametersPtrType) ToPipeTargetParametersHttpParametersPtrOutput() PipeTargetParametersHttpParametersPtrOutput {
	return i.ToPipeTargetParametersHttpParametersPtrOutputWithContext(context.Background())
}

func (i *pipeTargetParametersHttpParametersPtrType) ToPipeTargetParametersHttpParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersHttpParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersHttpParametersPtrOutput)
}

func (i *pipeTargetParametersHttpParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersHttpParameters] {
	return pulumix.Output[*PipeTargetParametersHttpParameters]{
		OutputState: i.ToPipeTargetParametersHttpParametersPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeTargetParametersHttpParametersOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersHttpParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersHttpParameters)(nil)).Elem()
}

func (o PipeTargetParametersHttpParametersOutput) ToPipeTargetParametersHttpParametersOutput() PipeTargetParametersHttpParametersOutput {
	return o
}

func (o PipeTargetParametersHttpParametersOutput) ToPipeTargetParametersHttpParametersOutputWithContext(ctx context.Context) PipeTargetParametersHttpParametersOutput {
	return o
}

func (o PipeTargetParametersHttpParametersOutput) ToPipeTargetParametersHttpParametersPtrOutput() PipeTargetParametersHttpParametersPtrOutput {
	return o.ToPipeTargetParametersHttpParametersPtrOutputWithContext(context.Background())
}

func (o PipeTargetParametersHttpParametersOutput) ToPipeTargetParametersHttpParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersHttpParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeTargetParametersHttpParameters) *PipeTargetParametersHttpParameters {
		return &v
	}).(PipeTargetParametersHttpParametersPtrOutput)
}

func (o PipeTargetParametersHttpParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersHttpParameters] {
	return pulumix.Output[PipeTargetParametersHttpParameters]{
		OutputState: o.OutputState,
	}
}

// Key-value mapping of the headers that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
func (o PipeTargetParametersHttpParametersOutput) HeaderParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v PipeTargetParametersHttpParameters) map[string]string { return v.HeaderParameters }).(pulumi.StringMapOutput)
}

// The path parameter values to be used to populate API Gateway REST API or EventBridge ApiDestination path wildcards ("*").
func (o PipeTargetParametersHttpParametersOutput) PathParameterValues() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersHttpParameters) *string { return v.PathParameterValues }).(pulumi.StringPtrOutput)
}

// Key-value mapping of the query strings that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
func (o PipeTargetParametersHttpParametersOutput) QueryStringParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v PipeTargetParametersHttpParameters) map[string]string { return v.QueryStringParameters }).(pulumi.StringMapOutput)
}

type PipeTargetParametersHttpParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersHttpParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParametersHttpParameters)(nil)).Elem()
}

func (o PipeTargetParametersHttpParametersPtrOutput) ToPipeTargetParametersHttpParametersPtrOutput() PipeTargetParametersHttpParametersPtrOutput {
	return o
}

func (o PipeTargetParametersHttpParametersPtrOutput) ToPipeTargetParametersHttpParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersHttpParametersPtrOutput {
	return o
}

func (o PipeTargetParametersHttpParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersHttpParameters] {
	return pulumix.Output[*PipeTargetParametersHttpParameters]{
		OutputState: o.OutputState,
	}
}

func (o PipeTargetParametersHttpParametersPtrOutput) Elem() PipeTargetParametersHttpParametersOutput {
	return o.ApplyT(func(v *PipeTargetParametersHttpParameters) PipeTargetParametersHttpParameters {
		if v != nil {
			return *v
		}
		var ret PipeTargetParametersHttpParameters
		return ret
	}).(PipeTargetParametersHttpParametersOutput)
}

// Key-value mapping of the headers that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
func (o PipeTargetParametersHttpParametersPtrOutput) HeaderParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PipeTargetParametersHttpParameters) map[string]string {
		if v == nil {
			return nil
		}
		return v.HeaderParameters
	}).(pulumi.StringMapOutput)
}

// The path parameter values to be used to populate API Gateway REST API or EventBridge ApiDestination path wildcards ("*").
func (o PipeTargetParametersHttpParametersPtrOutput) PathParameterValues() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersHttpParameters) *string {
		if v == nil {
			return nil
		}
		return v.PathParameterValues
	}).(pulumi.StringPtrOutput)
}

// Key-value mapping of the query strings that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
func (o PipeTargetParametersHttpParametersPtrOutput) QueryStringParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PipeTargetParametersHttpParameters) map[string]string {
		if v == nil {
			return nil
		}
		return v.QueryStringParameters
	}).(pulumi.StringMapOutput)
}

type PipeTargetParametersKinesisStreamParameters struct {
	// Determines which shard in the stream the data record is assigned to. Partition keys are Unicode strings with a maximum length limit of 256 characters for each key. Amazon Kinesis Data Streams uses the partition key as input to a hash function that maps the partition key and associated data to a specific shard. Specifically, an MD5 hash function is used to map partition keys to 128-bit integer values and to map associated data records to shards. As a result of this hashing mechanism, all data records with the same partition key map to the same shard within the stream.
	PartitionKey string `pulumi:"partitionKey"`
}

// PipeTargetParametersKinesisStreamParametersInput is an input type that accepts PipeTargetParametersKinesisStreamParametersArgs and PipeTargetParametersKinesisStreamParametersOutput values.
// You can construct a concrete instance of `PipeTargetParametersKinesisStreamParametersInput` via:
//
//	PipeTargetParametersKinesisStreamParametersArgs{...}
type PipeTargetParametersKinesisStreamParametersInput interface {
	pulumi.Input

	ToPipeTargetParametersKinesisStreamParametersOutput() PipeTargetParametersKinesisStreamParametersOutput
	ToPipeTargetParametersKinesisStreamParametersOutputWithContext(context.Context) PipeTargetParametersKinesisStreamParametersOutput
}

type PipeTargetParametersKinesisStreamParametersArgs struct {
	// Determines which shard in the stream the data record is assigned to. Partition keys are Unicode strings with a maximum length limit of 256 characters for each key. Amazon Kinesis Data Streams uses the partition key as input to a hash function that maps the partition key and associated data to a specific shard. Specifically, an MD5 hash function is used to map partition keys to 128-bit integer values and to map associated data records to shards. As a result of this hashing mechanism, all data records with the same partition key map to the same shard within the stream.
	PartitionKey pulumi.StringInput `pulumi:"partitionKey"`
}

func (PipeTargetParametersKinesisStreamParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersKinesisStreamParameters)(nil)).Elem()
}

func (i PipeTargetParametersKinesisStreamParametersArgs) ToPipeTargetParametersKinesisStreamParametersOutput() PipeTargetParametersKinesisStreamParametersOutput {
	return i.ToPipeTargetParametersKinesisStreamParametersOutputWithContext(context.Background())
}

func (i PipeTargetParametersKinesisStreamParametersArgs) ToPipeTargetParametersKinesisStreamParametersOutputWithContext(ctx context.Context) PipeTargetParametersKinesisStreamParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersKinesisStreamParametersOutput)
}

func (i PipeTargetParametersKinesisStreamParametersArgs) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersKinesisStreamParameters] {
	return pulumix.Output[PipeTargetParametersKinesisStreamParameters]{
		OutputState: i.ToPipeTargetParametersKinesisStreamParametersOutputWithContext(ctx).OutputState,
	}
}

func (i PipeTargetParametersKinesisStreamParametersArgs) ToPipeTargetParametersKinesisStreamParametersPtrOutput() PipeTargetParametersKinesisStreamParametersPtrOutput {
	return i.ToPipeTargetParametersKinesisStreamParametersPtrOutputWithContext(context.Background())
}

func (i PipeTargetParametersKinesisStreamParametersArgs) ToPipeTargetParametersKinesisStreamParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersKinesisStreamParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersKinesisStreamParametersOutput).ToPipeTargetParametersKinesisStreamParametersPtrOutputWithContext(ctx)
}

// PipeTargetParametersKinesisStreamParametersPtrInput is an input type that accepts PipeTargetParametersKinesisStreamParametersArgs, PipeTargetParametersKinesisStreamParametersPtr and PipeTargetParametersKinesisStreamParametersPtrOutput values.
// You can construct a concrete instance of `PipeTargetParametersKinesisStreamParametersPtrInput` via:
//
//	        PipeTargetParametersKinesisStreamParametersArgs{...}
//
//	or:
//
//	        nil
type PipeTargetParametersKinesisStreamParametersPtrInput interface {
	pulumi.Input

	ToPipeTargetParametersKinesisStreamParametersPtrOutput() PipeTargetParametersKinesisStreamParametersPtrOutput
	ToPipeTargetParametersKinesisStreamParametersPtrOutputWithContext(context.Context) PipeTargetParametersKinesisStreamParametersPtrOutput
}

type pipeTargetParametersKinesisStreamParametersPtrType PipeTargetParametersKinesisStreamParametersArgs

func PipeTargetParametersKinesisStreamParametersPtr(v *PipeTargetParametersKinesisStreamParametersArgs) PipeTargetParametersKinesisStreamParametersPtrInput {
	return (*pipeTargetParametersKinesisStreamParametersPtrType)(v)
}

func (*pipeTargetParametersKinesisStreamParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParametersKinesisStreamParameters)(nil)).Elem()
}

func (i *pipeTargetParametersKinesisStreamParametersPtrType) ToPipeTargetParametersKinesisStreamParametersPtrOutput() PipeTargetParametersKinesisStreamParametersPtrOutput {
	return i.ToPipeTargetParametersKinesisStreamParametersPtrOutputWithContext(context.Background())
}

func (i *pipeTargetParametersKinesisStreamParametersPtrType) ToPipeTargetParametersKinesisStreamParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersKinesisStreamParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersKinesisStreamParametersPtrOutput)
}

func (i *pipeTargetParametersKinesisStreamParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersKinesisStreamParameters] {
	return pulumix.Output[*PipeTargetParametersKinesisStreamParameters]{
		OutputState: i.ToPipeTargetParametersKinesisStreamParametersPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeTargetParametersKinesisStreamParametersOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersKinesisStreamParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersKinesisStreamParameters)(nil)).Elem()
}

func (o PipeTargetParametersKinesisStreamParametersOutput) ToPipeTargetParametersKinesisStreamParametersOutput() PipeTargetParametersKinesisStreamParametersOutput {
	return o
}

func (o PipeTargetParametersKinesisStreamParametersOutput) ToPipeTargetParametersKinesisStreamParametersOutputWithContext(ctx context.Context) PipeTargetParametersKinesisStreamParametersOutput {
	return o
}

func (o PipeTargetParametersKinesisStreamParametersOutput) ToPipeTargetParametersKinesisStreamParametersPtrOutput() PipeTargetParametersKinesisStreamParametersPtrOutput {
	return o.ToPipeTargetParametersKinesisStreamParametersPtrOutputWithContext(context.Background())
}

func (o PipeTargetParametersKinesisStreamParametersOutput) ToPipeTargetParametersKinesisStreamParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersKinesisStreamParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeTargetParametersKinesisStreamParameters) *PipeTargetParametersKinesisStreamParameters {
		return &v
	}).(PipeTargetParametersKinesisStreamParametersPtrOutput)
}

func (o PipeTargetParametersKinesisStreamParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersKinesisStreamParameters] {
	return pulumix.Output[PipeTargetParametersKinesisStreamParameters]{
		OutputState: o.OutputState,
	}
}

// Determines which shard in the stream the data record is assigned to. Partition keys are Unicode strings with a maximum length limit of 256 characters for each key. Amazon Kinesis Data Streams uses the partition key as input to a hash function that maps the partition key and associated data to a specific shard. Specifically, an MD5 hash function is used to map partition keys to 128-bit integer values and to map associated data records to shards. As a result of this hashing mechanism, all data records with the same partition key map to the same shard within the stream.
func (o PipeTargetParametersKinesisStreamParametersOutput) PartitionKey() pulumi.StringOutput {
	return o.ApplyT(func(v PipeTargetParametersKinesisStreamParameters) string { return v.PartitionKey }).(pulumi.StringOutput)
}

type PipeTargetParametersKinesisStreamParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersKinesisStreamParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParametersKinesisStreamParameters)(nil)).Elem()
}

func (o PipeTargetParametersKinesisStreamParametersPtrOutput) ToPipeTargetParametersKinesisStreamParametersPtrOutput() PipeTargetParametersKinesisStreamParametersPtrOutput {
	return o
}

func (o PipeTargetParametersKinesisStreamParametersPtrOutput) ToPipeTargetParametersKinesisStreamParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersKinesisStreamParametersPtrOutput {
	return o
}

func (o PipeTargetParametersKinesisStreamParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersKinesisStreamParameters] {
	return pulumix.Output[*PipeTargetParametersKinesisStreamParameters]{
		OutputState: o.OutputState,
	}
}

func (o PipeTargetParametersKinesisStreamParametersPtrOutput) Elem() PipeTargetParametersKinesisStreamParametersOutput {
	return o.ApplyT(func(v *PipeTargetParametersKinesisStreamParameters) PipeTargetParametersKinesisStreamParameters {
		if v != nil {
			return *v
		}
		var ret PipeTargetParametersKinesisStreamParameters
		return ret
	}).(PipeTargetParametersKinesisStreamParametersOutput)
}

// Determines which shard in the stream the data record is assigned to. Partition keys are Unicode strings with a maximum length limit of 256 characters for each key. Amazon Kinesis Data Streams uses the partition key as input to a hash function that maps the partition key and associated data to a specific shard. Specifically, an MD5 hash function is used to map partition keys to 128-bit integer values and to map associated data records to shards. As a result of this hashing mechanism, all data records with the same partition key map to the same shard within the stream.
func (o PipeTargetParametersKinesisStreamParametersPtrOutput) PartitionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersKinesisStreamParameters) *string {
		if v == nil {
			return nil
		}
		return &v.PartitionKey
	}).(pulumi.StringPtrOutput)
}

type PipeTargetParametersLambdaFunctionParameters struct {
	// Specify whether to invoke the function synchronously or asynchronously. Valid Values: REQUEST_RESPONSE, FIRE_AND_FORGET.
	InvocationType string `pulumi:"invocationType"`
}

// PipeTargetParametersLambdaFunctionParametersInput is an input type that accepts PipeTargetParametersLambdaFunctionParametersArgs and PipeTargetParametersLambdaFunctionParametersOutput values.
// You can construct a concrete instance of `PipeTargetParametersLambdaFunctionParametersInput` via:
//
//	PipeTargetParametersLambdaFunctionParametersArgs{...}
type PipeTargetParametersLambdaFunctionParametersInput interface {
	pulumi.Input

	ToPipeTargetParametersLambdaFunctionParametersOutput() PipeTargetParametersLambdaFunctionParametersOutput
	ToPipeTargetParametersLambdaFunctionParametersOutputWithContext(context.Context) PipeTargetParametersLambdaFunctionParametersOutput
}

type PipeTargetParametersLambdaFunctionParametersArgs struct {
	// Specify whether to invoke the function synchronously or asynchronously. Valid Values: REQUEST_RESPONSE, FIRE_AND_FORGET.
	InvocationType pulumi.StringInput `pulumi:"invocationType"`
}

func (PipeTargetParametersLambdaFunctionParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersLambdaFunctionParameters)(nil)).Elem()
}

func (i PipeTargetParametersLambdaFunctionParametersArgs) ToPipeTargetParametersLambdaFunctionParametersOutput() PipeTargetParametersLambdaFunctionParametersOutput {
	return i.ToPipeTargetParametersLambdaFunctionParametersOutputWithContext(context.Background())
}

func (i PipeTargetParametersLambdaFunctionParametersArgs) ToPipeTargetParametersLambdaFunctionParametersOutputWithContext(ctx context.Context) PipeTargetParametersLambdaFunctionParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersLambdaFunctionParametersOutput)
}

func (i PipeTargetParametersLambdaFunctionParametersArgs) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersLambdaFunctionParameters] {
	return pulumix.Output[PipeTargetParametersLambdaFunctionParameters]{
		OutputState: i.ToPipeTargetParametersLambdaFunctionParametersOutputWithContext(ctx).OutputState,
	}
}

func (i PipeTargetParametersLambdaFunctionParametersArgs) ToPipeTargetParametersLambdaFunctionParametersPtrOutput() PipeTargetParametersLambdaFunctionParametersPtrOutput {
	return i.ToPipeTargetParametersLambdaFunctionParametersPtrOutputWithContext(context.Background())
}

func (i PipeTargetParametersLambdaFunctionParametersArgs) ToPipeTargetParametersLambdaFunctionParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersLambdaFunctionParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersLambdaFunctionParametersOutput).ToPipeTargetParametersLambdaFunctionParametersPtrOutputWithContext(ctx)
}

// PipeTargetParametersLambdaFunctionParametersPtrInput is an input type that accepts PipeTargetParametersLambdaFunctionParametersArgs, PipeTargetParametersLambdaFunctionParametersPtr and PipeTargetParametersLambdaFunctionParametersPtrOutput values.
// You can construct a concrete instance of `PipeTargetParametersLambdaFunctionParametersPtrInput` via:
//
//	        PipeTargetParametersLambdaFunctionParametersArgs{...}
//
//	or:
//
//	        nil
type PipeTargetParametersLambdaFunctionParametersPtrInput interface {
	pulumi.Input

	ToPipeTargetParametersLambdaFunctionParametersPtrOutput() PipeTargetParametersLambdaFunctionParametersPtrOutput
	ToPipeTargetParametersLambdaFunctionParametersPtrOutputWithContext(context.Context) PipeTargetParametersLambdaFunctionParametersPtrOutput
}

type pipeTargetParametersLambdaFunctionParametersPtrType PipeTargetParametersLambdaFunctionParametersArgs

func PipeTargetParametersLambdaFunctionParametersPtr(v *PipeTargetParametersLambdaFunctionParametersArgs) PipeTargetParametersLambdaFunctionParametersPtrInput {
	return (*pipeTargetParametersLambdaFunctionParametersPtrType)(v)
}

func (*pipeTargetParametersLambdaFunctionParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParametersLambdaFunctionParameters)(nil)).Elem()
}

func (i *pipeTargetParametersLambdaFunctionParametersPtrType) ToPipeTargetParametersLambdaFunctionParametersPtrOutput() PipeTargetParametersLambdaFunctionParametersPtrOutput {
	return i.ToPipeTargetParametersLambdaFunctionParametersPtrOutputWithContext(context.Background())
}

func (i *pipeTargetParametersLambdaFunctionParametersPtrType) ToPipeTargetParametersLambdaFunctionParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersLambdaFunctionParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersLambdaFunctionParametersPtrOutput)
}

func (i *pipeTargetParametersLambdaFunctionParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersLambdaFunctionParameters] {
	return pulumix.Output[*PipeTargetParametersLambdaFunctionParameters]{
		OutputState: i.ToPipeTargetParametersLambdaFunctionParametersPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeTargetParametersLambdaFunctionParametersOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersLambdaFunctionParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersLambdaFunctionParameters)(nil)).Elem()
}

func (o PipeTargetParametersLambdaFunctionParametersOutput) ToPipeTargetParametersLambdaFunctionParametersOutput() PipeTargetParametersLambdaFunctionParametersOutput {
	return o
}

func (o PipeTargetParametersLambdaFunctionParametersOutput) ToPipeTargetParametersLambdaFunctionParametersOutputWithContext(ctx context.Context) PipeTargetParametersLambdaFunctionParametersOutput {
	return o
}

func (o PipeTargetParametersLambdaFunctionParametersOutput) ToPipeTargetParametersLambdaFunctionParametersPtrOutput() PipeTargetParametersLambdaFunctionParametersPtrOutput {
	return o.ToPipeTargetParametersLambdaFunctionParametersPtrOutputWithContext(context.Background())
}

func (o PipeTargetParametersLambdaFunctionParametersOutput) ToPipeTargetParametersLambdaFunctionParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersLambdaFunctionParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeTargetParametersLambdaFunctionParameters) *PipeTargetParametersLambdaFunctionParameters {
		return &v
	}).(PipeTargetParametersLambdaFunctionParametersPtrOutput)
}

func (o PipeTargetParametersLambdaFunctionParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersLambdaFunctionParameters] {
	return pulumix.Output[PipeTargetParametersLambdaFunctionParameters]{
		OutputState: o.OutputState,
	}
}

// Specify whether to invoke the function synchronously or asynchronously. Valid Values: REQUEST_RESPONSE, FIRE_AND_FORGET.
func (o PipeTargetParametersLambdaFunctionParametersOutput) InvocationType() pulumi.StringOutput {
	return o.ApplyT(func(v PipeTargetParametersLambdaFunctionParameters) string { return v.InvocationType }).(pulumi.StringOutput)
}

type PipeTargetParametersLambdaFunctionParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersLambdaFunctionParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParametersLambdaFunctionParameters)(nil)).Elem()
}

func (o PipeTargetParametersLambdaFunctionParametersPtrOutput) ToPipeTargetParametersLambdaFunctionParametersPtrOutput() PipeTargetParametersLambdaFunctionParametersPtrOutput {
	return o
}

func (o PipeTargetParametersLambdaFunctionParametersPtrOutput) ToPipeTargetParametersLambdaFunctionParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersLambdaFunctionParametersPtrOutput {
	return o
}

func (o PipeTargetParametersLambdaFunctionParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersLambdaFunctionParameters] {
	return pulumix.Output[*PipeTargetParametersLambdaFunctionParameters]{
		OutputState: o.OutputState,
	}
}

func (o PipeTargetParametersLambdaFunctionParametersPtrOutput) Elem() PipeTargetParametersLambdaFunctionParametersOutput {
	return o.ApplyT(func(v *PipeTargetParametersLambdaFunctionParameters) PipeTargetParametersLambdaFunctionParameters {
		if v != nil {
			return *v
		}
		var ret PipeTargetParametersLambdaFunctionParameters
		return ret
	}).(PipeTargetParametersLambdaFunctionParametersOutput)
}

// Specify whether to invoke the function synchronously or asynchronously. Valid Values: REQUEST_RESPONSE, FIRE_AND_FORGET.
func (o PipeTargetParametersLambdaFunctionParametersPtrOutput) InvocationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersLambdaFunctionParameters) *string {
		if v == nil {
			return nil
		}
		return &v.InvocationType
	}).(pulumi.StringPtrOutput)
}

type PipeTargetParametersRedshiftDataParameters struct {
	// The name of the database. Required when authenticating using temporary credentials.
	Database string `pulumi:"database"`
	// The database user name. Required when authenticating using temporary credentials.
	DbUser *string `pulumi:"dbUser"`
	// The name or ARN of the secret that enables access to the database. Required when authenticating using Secrets Manager.
	SecretManagerArn *string `pulumi:"secretManagerArn"`
	// List of SQL statements text to run, each of maximum length of 100,000.
	Sqls []string `pulumi:"sqls"`
	// The name of the SQL statement. You can name the SQL statement when you create it to identify the query.
	StatementName *string `pulumi:"statementName"`
	// Indicates whether to send an event back to EventBridge after the SQL statement runs.
	WithEvent *bool `pulumi:"withEvent"`
}

// PipeTargetParametersRedshiftDataParametersInput is an input type that accepts PipeTargetParametersRedshiftDataParametersArgs and PipeTargetParametersRedshiftDataParametersOutput values.
// You can construct a concrete instance of `PipeTargetParametersRedshiftDataParametersInput` via:
//
//	PipeTargetParametersRedshiftDataParametersArgs{...}
type PipeTargetParametersRedshiftDataParametersInput interface {
	pulumi.Input

	ToPipeTargetParametersRedshiftDataParametersOutput() PipeTargetParametersRedshiftDataParametersOutput
	ToPipeTargetParametersRedshiftDataParametersOutputWithContext(context.Context) PipeTargetParametersRedshiftDataParametersOutput
}

type PipeTargetParametersRedshiftDataParametersArgs struct {
	// The name of the database. Required when authenticating using temporary credentials.
	Database pulumi.StringInput `pulumi:"database"`
	// The database user name. Required when authenticating using temporary credentials.
	DbUser pulumi.StringPtrInput `pulumi:"dbUser"`
	// The name or ARN of the secret that enables access to the database. Required when authenticating using Secrets Manager.
	SecretManagerArn pulumi.StringPtrInput `pulumi:"secretManagerArn"`
	// List of SQL statements text to run, each of maximum length of 100,000.
	Sqls pulumi.StringArrayInput `pulumi:"sqls"`
	// The name of the SQL statement. You can name the SQL statement when you create it to identify the query.
	StatementName pulumi.StringPtrInput `pulumi:"statementName"`
	// Indicates whether to send an event back to EventBridge after the SQL statement runs.
	WithEvent pulumi.BoolPtrInput `pulumi:"withEvent"`
}

func (PipeTargetParametersRedshiftDataParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersRedshiftDataParameters)(nil)).Elem()
}

func (i PipeTargetParametersRedshiftDataParametersArgs) ToPipeTargetParametersRedshiftDataParametersOutput() PipeTargetParametersRedshiftDataParametersOutput {
	return i.ToPipeTargetParametersRedshiftDataParametersOutputWithContext(context.Background())
}

func (i PipeTargetParametersRedshiftDataParametersArgs) ToPipeTargetParametersRedshiftDataParametersOutputWithContext(ctx context.Context) PipeTargetParametersRedshiftDataParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersRedshiftDataParametersOutput)
}

func (i PipeTargetParametersRedshiftDataParametersArgs) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersRedshiftDataParameters] {
	return pulumix.Output[PipeTargetParametersRedshiftDataParameters]{
		OutputState: i.ToPipeTargetParametersRedshiftDataParametersOutputWithContext(ctx).OutputState,
	}
}

func (i PipeTargetParametersRedshiftDataParametersArgs) ToPipeTargetParametersRedshiftDataParametersPtrOutput() PipeTargetParametersRedshiftDataParametersPtrOutput {
	return i.ToPipeTargetParametersRedshiftDataParametersPtrOutputWithContext(context.Background())
}

func (i PipeTargetParametersRedshiftDataParametersArgs) ToPipeTargetParametersRedshiftDataParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersRedshiftDataParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersRedshiftDataParametersOutput).ToPipeTargetParametersRedshiftDataParametersPtrOutputWithContext(ctx)
}

// PipeTargetParametersRedshiftDataParametersPtrInput is an input type that accepts PipeTargetParametersRedshiftDataParametersArgs, PipeTargetParametersRedshiftDataParametersPtr and PipeTargetParametersRedshiftDataParametersPtrOutput values.
// You can construct a concrete instance of `PipeTargetParametersRedshiftDataParametersPtrInput` via:
//
//	        PipeTargetParametersRedshiftDataParametersArgs{...}
//
//	or:
//
//	        nil
type PipeTargetParametersRedshiftDataParametersPtrInput interface {
	pulumi.Input

	ToPipeTargetParametersRedshiftDataParametersPtrOutput() PipeTargetParametersRedshiftDataParametersPtrOutput
	ToPipeTargetParametersRedshiftDataParametersPtrOutputWithContext(context.Context) PipeTargetParametersRedshiftDataParametersPtrOutput
}

type pipeTargetParametersRedshiftDataParametersPtrType PipeTargetParametersRedshiftDataParametersArgs

func PipeTargetParametersRedshiftDataParametersPtr(v *PipeTargetParametersRedshiftDataParametersArgs) PipeTargetParametersRedshiftDataParametersPtrInput {
	return (*pipeTargetParametersRedshiftDataParametersPtrType)(v)
}

func (*pipeTargetParametersRedshiftDataParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParametersRedshiftDataParameters)(nil)).Elem()
}

func (i *pipeTargetParametersRedshiftDataParametersPtrType) ToPipeTargetParametersRedshiftDataParametersPtrOutput() PipeTargetParametersRedshiftDataParametersPtrOutput {
	return i.ToPipeTargetParametersRedshiftDataParametersPtrOutputWithContext(context.Background())
}

func (i *pipeTargetParametersRedshiftDataParametersPtrType) ToPipeTargetParametersRedshiftDataParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersRedshiftDataParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersRedshiftDataParametersPtrOutput)
}

func (i *pipeTargetParametersRedshiftDataParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersRedshiftDataParameters] {
	return pulumix.Output[*PipeTargetParametersRedshiftDataParameters]{
		OutputState: i.ToPipeTargetParametersRedshiftDataParametersPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeTargetParametersRedshiftDataParametersOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersRedshiftDataParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersRedshiftDataParameters)(nil)).Elem()
}

func (o PipeTargetParametersRedshiftDataParametersOutput) ToPipeTargetParametersRedshiftDataParametersOutput() PipeTargetParametersRedshiftDataParametersOutput {
	return o
}

func (o PipeTargetParametersRedshiftDataParametersOutput) ToPipeTargetParametersRedshiftDataParametersOutputWithContext(ctx context.Context) PipeTargetParametersRedshiftDataParametersOutput {
	return o
}

func (o PipeTargetParametersRedshiftDataParametersOutput) ToPipeTargetParametersRedshiftDataParametersPtrOutput() PipeTargetParametersRedshiftDataParametersPtrOutput {
	return o.ToPipeTargetParametersRedshiftDataParametersPtrOutputWithContext(context.Background())
}

func (o PipeTargetParametersRedshiftDataParametersOutput) ToPipeTargetParametersRedshiftDataParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersRedshiftDataParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeTargetParametersRedshiftDataParameters) *PipeTargetParametersRedshiftDataParameters {
		return &v
	}).(PipeTargetParametersRedshiftDataParametersPtrOutput)
}

func (o PipeTargetParametersRedshiftDataParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersRedshiftDataParameters] {
	return pulumix.Output[PipeTargetParametersRedshiftDataParameters]{
		OutputState: o.OutputState,
	}
}

// The name of the database. Required when authenticating using temporary credentials.
func (o PipeTargetParametersRedshiftDataParametersOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v PipeTargetParametersRedshiftDataParameters) string { return v.Database }).(pulumi.StringOutput)
}

// The database user name. Required when authenticating using temporary credentials.
func (o PipeTargetParametersRedshiftDataParametersOutput) DbUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersRedshiftDataParameters) *string { return v.DbUser }).(pulumi.StringPtrOutput)
}

// The name or ARN of the secret that enables access to the database. Required when authenticating using Secrets Manager.
func (o PipeTargetParametersRedshiftDataParametersOutput) SecretManagerArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersRedshiftDataParameters) *string { return v.SecretManagerArn }).(pulumi.StringPtrOutput)
}

// List of SQL statements text to run, each of maximum length of 100,000.
func (o PipeTargetParametersRedshiftDataParametersOutput) Sqls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipeTargetParametersRedshiftDataParameters) []string { return v.Sqls }).(pulumi.StringArrayOutput)
}

// The name of the SQL statement. You can name the SQL statement when you create it to identify the query.
func (o PipeTargetParametersRedshiftDataParametersOutput) StatementName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersRedshiftDataParameters) *string { return v.StatementName }).(pulumi.StringPtrOutput)
}

// Indicates whether to send an event back to EventBridge after the SQL statement runs.
func (o PipeTargetParametersRedshiftDataParametersOutput) WithEvent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersRedshiftDataParameters) *bool { return v.WithEvent }).(pulumi.BoolPtrOutput)
}

type PipeTargetParametersRedshiftDataParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersRedshiftDataParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParametersRedshiftDataParameters)(nil)).Elem()
}

func (o PipeTargetParametersRedshiftDataParametersPtrOutput) ToPipeTargetParametersRedshiftDataParametersPtrOutput() PipeTargetParametersRedshiftDataParametersPtrOutput {
	return o
}

func (o PipeTargetParametersRedshiftDataParametersPtrOutput) ToPipeTargetParametersRedshiftDataParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersRedshiftDataParametersPtrOutput {
	return o
}

func (o PipeTargetParametersRedshiftDataParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersRedshiftDataParameters] {
	return pulumix.Output[*PipeTargetParametersRedshiftDataParameters]{
		OutputState: o.OutputState,
	}
}

func (o PipeTargetParametersRedshiftDataParametersPtrOutput) Elem() PipeTargetParametersRedshiftDataParametersOutput {
	return o.ApplyT(func(v *PipeTargetParametersRedshiftDataParameters) PipeTargetParametersRedshiftDataParameters {
		if v != nil {
			return *v
		}
		var ret PipeTargetParametersRedshiftDataParameters
		return ret
	}).(PipeTargetParametersRedshiftDataParametersOutput)
}

// The name of the database. Required when authenticating using temporary credentials.
func (o PipeTargetParametersRedshiftDataParametersPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersRedshiftDataParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// The database user name. Required when authenticating using temporary credentials.
func (o PipeTargetParametersRedshiftDataParametersPtrOutput) DbUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersRedshiftDataParameters) *string {
		if v == nil {
			return nil
		}
		return v.DbUser
	}).(pulumi.StringPtrOutput)
}

// The name or ARN of the secret that enables access to the database. Required when authenticating using Secrets Manager.
func (o PipeTargetParametersRedshiftDataParametersPtrOutput) SecretManagerArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersRedshiftDataParameters) *string {
		if v == nil {
			return nil
		}
		return v.SecretManagerArn
	}).(pulumi.StringPtrOutput)
}

// List of SQL statements text to run, each of maximum length of 100,000.
func (o PipeTargetParametersRedshiftDataParametersPtrOutput) Sqls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PipeTargetParametersRedshiftDataParameters) []string {
		if v == nil {
			return nil
		}
		return v.Sqls
	}).(pulumi.StringArrayOutput)
}

// The name of the SQL statement. You can name the SQL statement when you create it to identify the query.
func (o PipeTargetParametersRedshiftDataParametersPtrOutput) StatementName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersRedshiftDataParameters) *string {
		if v == nil {
			return nil
		}
		return v.StatementName
	}).(pulumi.StringPtrOutput)
}

// Indicates whether to send an event back to EventBridge after the SQL statement runs.
func (o PipeTargetParametersRedshiftDataParametersPtrOutput) WithEvent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersRedshiftDataParameters) *bool {
		if v == nil {
			return nil
		}
		return v.WithEvent
	}).(pulumi.BoolPtrOutput)
}

type PipeTargetParametersSagemakerPipelineParameters struct {
	// List of Parameter names and values for SageMaker Model Building Pipeline execution. Detailed below.
	PipelineParameters []PipeTargetParametersSagemakerPipelineParametersPipelineParameter `pulumi:"pipelineParameters"`
}

// PipeTargetParametersSagemakerPipelineParametersInput is an input type that accepts PipeTargetParametersSagemakerPipelineParametersArgs and PipeTargetParametersSagemakerPipelineParametersOutput values.
// You can construct a concrete instance of `PipeTargetParametersSagemakerPipelineParametersInput` via:
//
//	PipeTargetParametersSagemakerPipelineParametersArgs{...}
type PipeTargetParametersSagemakerPipelineParametersInput interface {
	pulumi.Input

	ToPipeTargetParametersSagemakerPipelineParametersOutput() PipeTargetParametersSagemakerPipelineParametersOutput
	ToPipeTargetParametersSagemakerPipelineParametersOutputWithContext(context.Context) PipeTargetParametersSagemakerPipelineParametersOutput
}

type PipeTargetParametersSagemakerPipelineParametersArgs struct {
	// List of Parameter names and values for SageMaker Model Building Pipeline execution. Detailed below.
	PipelineParameters PipeTargetParametersSagemakerPipelineParametersPipelineParameterArrayInput `pulumi:"pipelineParameters"`
}

func (PipeTargetParametersSagemakerPipelineParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersSagemakerPipelineParameters)(nil)).Elem()
}

func (i PipeTargetParametersSagemakerPipelineParametersArgs) ToPipeTargetParametersSagemakerPipelineParametersOutput() PipeTargetParametersSagemakerPipelineParametersOutput {
	return i.ToPipeTargetParametersSagemakerPipelineParametersOutputWithContext(context.Background())
}

func (i PipeTargetParametersSagemakerPipelineParametersArgs) ToPipeTargetParametersSagemakerPipelineParametersOutputWithContext(ctx context.Context) PipeTargetParametersSagemakerPipelineParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersSagemakerPipelineParametersOutput)
}

func (i PipeTargetParametersSagemakerPipelineParametersArgs) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersSagemakerPipelineParameters] {
	return pulumix.Output[PipeTargetParametersSagemakerPipelineParameters]{
		OutputState: i.ToPipeTargetParametersSagemakerPipelineParametersOutputWithContext(ctx).OutputState,
	}
}

func (i PipeTargetParametersSagemakerPipelineParametersArgs) ToPipeTargetParametersSagemakerPipelineParametersPtrOutput() PipeTargetParametersSagemakerPipelineParametersPtrOutput {
	return i.ToPipeTargetParametersSagemakerPipelineParametersPtrOutputWithContext(context.Background())
}

func (i PipeTargetParametersSagemakerPipelineParametersArgs) ToPipeTargetParametersSagemakerPipelineParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersSagemakerPipelineParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersSagemakerPipelineParametersOutput).ToPipeTargetParametersSagemakerPipelineParametersPtrOutputWithContext(ctx)
}

// PipeTargetParametersSagemakerPipelineParametersPtrInput is an input type that accepts PipeTargetParametersSagemakerPipelineParametersArgs, PipeTargetParametersSagemakerPipelineParametersPtr and PipeTargetParametersSagemakerPipelineParametersPtrOutput values.
// You can construct a concrete instance of `PipeTargetParametersSagemakerPipelineParametersPtrInput` via:
//
//	        PipeTargetParametersSagemakerPipelineParametersArgs{...}
//
//	or:
//
//	        nil
type PipeTargetParametersSagemakerPipelineParametersPtrInput interface {
	pulumi.Input

	ToPipeTargetParametersSagemakerPipelineParametersPtrOutput() PipeTargetParametersSagemakerPipelineParametersPtrOutput
	ToPipeTargetParametersSagemakerPipelineParametersPtrOutputWithContext(context.Context) PipeTargetParametersSagemakerPipelineParametersPtrOutput
}

type pipeTargetParametersSagemakerPipelineParametersPtrType PipeTargetParametersSagemakerPipelineParametersArgs

func PipeTargetParametersSagemakerPipelineParametersPtr(v *PipeTargetParametersSagemakerPipelineParametersArgs) PipeTargetParametersSagemakerPipelineParametersPtrInput {
	return (*pipeTargetParametersSagemakerPipelineParametersPtrType)(v)
}

func (*pipeTargetParametersSagemakerPipelineParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParametersSagemakerPipelineParameters)(nil)).Elem()
}

func (i *pipeTargetParametersSagemakerPipelineParametersPtrType) ToPipeTargetParametersSagemakerPipelineParametersPtrOutput() PipeTargetParametersSagemakerPipelineParametersPtrOutput {
	return i.ToPipeTargetParametersSagemakerPipelineParametersPtrOutputWithContext(context.Background())
}

func (i *pipeTargetParametersSagemakerPipelineParametersPtrType) ToPipeTargetParametersSagemakerPipelineParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersSagemakerPipelineParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersSagemakerPipelineParametersPtrOutput)
}

func (i *pipeTargetParametersSagemakerPipelineParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersSagemakerPipelineParameters] {
	return pulumix.Output[*PipeTargetParametersSagemakerPipelineParameters]{
		OutputState: i.ToPipeTargetParametersSagemakerPipelineParametersPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeTargetParametersSagemakerPipelineParametersOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersSagemakerPipelineParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersSagemakerPipelineParameters)(nil)).Elem()
}

func (o PipeTargetParametersSagemakerPipelineParametersOutput) ToPipeTargetParametersSagemakerPipelineParametersOutput() PipeTargetParametersSagemakerPipelineParametersOutput {
	return o
}

func (o PipeTargetParametersSagemakerPipelineParametersOutput) ToPipeTargetParametersSagemakerPipelineParametersOutputWithContext(ctx context.Context) PipeTargetParametersSagemakerPipelineParametersOutput {
	return o
}

func (o PipeTargetParametersSagemakerPipelineParametersOutput) ToPipeTargetParametersSagemakerPipelineParametersPtrOutput() PipeTargetParametersSagemakerPipelineParametersPtrOutput {
	return o.ToPipeTargetParametersSagemakerPipelineParametersPtrOutputWithContext(context.Background())
}

func (o PipeTargetParametersSagemakerPipelineParametersOutput) ToPipeTargetParametersSagemakerPipelineParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersSagemakerPipelineParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeTargetParametersSagemakerPipelineParameters) *PipeTargetParametersSagemakerPipelineParameters {
		return &v
	}).(PipeTargetParametersSagemakerPipelineParametersPtrOutput)
}

func (o PipeTargetParametersSagemakerPipelineParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersSagemakerPipelineParameters] {
	return pulumix.Output[PipeTargetParametersSagemakerPipelineParameters]{
		OutputState: o.OutputState,
	}
}

// List of Parameter names and values for SageMaker Model Building Pipeline execution. Detailed below.
func (o PipeTargetParametersSagemakerPipelineParametersOutput) PipelineParameters() PipeTargetParametersSagemakerPipelineParametersPipelineParameterArrayOutput {
	return o.ApplyT(func(v PipeTargetParametersSagemakerPipelineParameters) []PipeTargetParametersSagemakerPipelineParametersPipelineParameter {
		return v.PipelineParameters
	}).(PipeTargetParametersSagemakerPipelineParametersPipelineParameterArrayOutput)
}

type PipeTargetParametersSagemakerPipelineParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersSagemakerPipelineParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParametersSagemakerPipelineParameters)(nil)).Elem()
}

func (o PipeTargetParametersSagemakerPipelineParametersPtrOutput) ToPipeTargetParametersSagemakerPipelineParametersPtrOutput() PipeTargetParametersSagemakerPipelineParametersPtrOutput {
	return o
}

func (o PipeTargetParametersSagemakerPipelineParametersPtrOutput) ToPipeTargetParametersSagemakerPipelineParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersSagemakerPipelineParametersPtrOutput {
	return o
}

func (o PipeTargetParametersSagemakerPipelineParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersSagemakerPipelineParameters] {
	return pulumix.Output[*PipeTargetParametersSagemakerPipelineParameters]{
		OutputState: o.OutputState,
	}
}

func (o PipeTargetParametersSagemakerPipelineParametersPtrOutput) Elem() PipeTargetParametersSagemakerPipelineParametersOutput {
	return o.ApplyT(func(v *PipeTargetParametersSagemakerPipelineParameters) PipeTargetParametersSagemakerPipelineParameters {
		if v != nil {
			return *v
		}
		var ret PipeTargetParametersSagemakerPipelineParameters
		return ret
	}).(PipeTargetParametersSagemakerPipelineParametersOutput)
}

// List of Parameter names and values for SageMaker Model Building Pipeline execution. Detailed below.
func (o PipeTargetParametersSagemakerPipelineParametersPtrOutput) PipelineParameters() PipeTargetParametersSagemakerPipelineParametersPipelineParameterArrayOutput {
	return o.ApplyT(func(v *PipeTargetParametersSagemakerPipelineParameters) []PipeTargetParametersSagemakerPipelineParametersPipelineParameter {
		if v == nil {
			return nil
		}
		return v.PipelineParameters
	}).(PipeTargetParametersSagemakerPipelineParametersPipelineParameterArrayOutput)
}

type PipeTargetParametersSagemakerPipelineParametersPipelineParameter struct {
	// Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name string `pulumi:"name"`
	// Value of parameter to start execution of a SageMaker Model Building Pipeline. Maximum length of 1024.
	Value string `pulumi:"value"`
}

// PipeTargetParametersSagemakerPipelineParametersPipelineParameterInput is an input type that accepts PipeTargetParametersSagemakerPipelineParametersPipelineParameterArgs and PipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput values.
// You can construct a concrete instance of `PipeTargetParametersSagemakerPipelineParametersPipelineParameterInput` via:
//
//	PipeTargetParametersSagemakerPipelineParametersPipelineParameterArgs{...}
type PipeTargetParametersSagemakerPipelineParametersPipelineParameterInput interface {
	pulumi.Input

	ToPipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput() PipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput
	ToPipeTargetParametersSagemakerPipelineParametersPipelineParameterOutputWithContext(context.Context) PipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput
}

type PipeTargetParametersSagemakerPipelineParametersPipelineParameterArgs struct {
	// Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumi.StringInput `pulumi:"name"`
	// Value of parameter to start execution of a SageMaker Model Building Pipeline. Maximum length of 1024.
	Value pulumi.StringInput `pulumi:"value"`
}

func (PipeTargetParametersSagemakerPipelineParametersPipelineParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersSagemakerPipelineParametersPipelineParameter)(nil)).Elem()
}

func (i PipeTargetParametersSagemakerPipelineParametersPipelineParameterArgs) ToPipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput() PipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput {
	return i.ToPipeTargetParametersSagemakerPipelineParametersPipelineParameterOutputWithContext(context.Background())
}

func (i PipeTargetParametersSagemakerPipelineParametersPipelineParameterArgs) ToPipeTargetParametersSagemakerPipelineParametersPipelineParameterOutputWithContext(ctx context.Context) PipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput)
}

func (i PipeTargetParametersSagemakerPipelineParametersPipelineParameterArgs) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersSagemakerPipelineParametersPipelineParameter] {
	return pulumix.Output[PipeTargetParametersSagemakerPipelineParametersPipelineParameter]{
		OutputState: i.ToPipeTargetParametersSagemakerPipelineParametersPipelineParameterOutputWithContext(ctx).OutputState,
	}
}

// PipeTargetParametersSagemakerPipelineParametersPipelineParameterArrayInput is an input type that accepts PipeTargetParametersSagemakerPipelineParametersPipelineParameterArray and PipeTargetParametersSagemakerPipelineParametersPipelineParameterArrayOutput values.
// You can construct a concrete instance of `PipeTargetParametersSagemakerPipelineParametersPipelineParameterArrayInput` via:
//
//	PipeTargetParametersSagemakerPipelineParametersPipelineParameterArray{ PipeTargetParametersSagemakerPipelineParametersPipelineParameterArgs{...} }
type PipeTargetParametersSagemakerPipelineParametersPipelineParameterArrayInput interface {
	pulumi.Input

	ToPipeTargetParametersSagemakerPipelineParametersPipelineParameterArrayOutput() PipeTargetParametersSagemakerPipelineParametersPipelineParameterArrayOutput
	ToPipeTargetParametersSagemakerPipelineParametersPipelineParameterArrayOutputWithContext(context.Context) PipeTargetParametersSagemakerPipelineParametersPipelineParameterArrayOutput
}

type PipeTargetParametersSagemakerPipelineParametersPipelineParameterArray []PipeTargetParametersSagemakerPipelineParametersPipelineParameterInput

func (PipeTargetParametersSagemakerPipelineParametersPipelineParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeTargetParametersSagemakerPipelineParametersPipelineParameter)(nil)).Elem()
}

func (i PipeTargetParametersSagemakerPipelineParametersPipelineParameterArray) ToPipeTargetParametersSagemakerPipelineParametersPipelineParameterArrayOutput() PipeTargetParametersSagemakerPipelineParametersPipelineParameterArrayOutput {
	return i.ToPipeTargetParametersSagemakerPipelineParametersPipelineParameterArrayOutputWithContext(context.Background())
}

func (i PipeTargetParametersSagemakerPipelineParametersPipelineParameterArray) ToPipeTargetParametersSagemakerPipelineParametersPipelineParameterArrayOutputWithContext(ctx context.Context) PipeTargetParametersSagemakerPipelineParametersPipelineParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersSagemakerPipelineParametersPipelineParameterArrayOutput)
}

func (i PipeTargetParametersSagemakerPipelineParametersPipelineParameterArray) ToOutput(ctx context.Context) pulumix.Output[[]PipeTargetParametersSagemakerPipelineParametersPipelineParameter] {
	return pulumix.Output[[]PipeTargetParametersSagemakerPipelineParametersPipelineParameter]{
		OutputState: i.ToPipeTargetParametersSagemakerPipelineParametersPipelineParameterArrayOutputWithContext(ctx).OutputState,
	}
}

type PipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersSagemakerPipelineParametersPipelineParameter)(nil)).Elem()
}

func (o PipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput) ToPipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput() PipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput {
	return o
}

func (o PipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput) ToPipeTargetParametersSagemakerPipelineParametersPipelineParameterOutputWithContext(ctx context.Context) PipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput {
	return o
}

func (o PipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersSagemakerPipelineParametersPipelineParameter] {
	return pulumix.Output[PipeTargetParametersSagemakerPipelineParametersPipelineParameter]{
		OutputState: o.OutputState,
	}
}

// Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
func (o PipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PipeTargetParametersSagemakerPipelineParametersPipelineParameter) string { return v.Name }).(pulumi.StringOutput)
}

// Value of parameter to start execution of a SageMaker Model Building Pipeline. Maximum length of 1024.
func (o PipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v PipeTargetParametersSagemakerPipelineParametersPipelineParameter) string { return v.Value }).(pulumi.StringOutput)
}

type PipeTargetParametersSagemakerPipelineParametersPipelineParameterArrayOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersSagemakerPipelineParametersPipelineParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeTargetParametersSagemakerPipelineParametersPipelineParameter)(nil)).Elem()
}

func (o PipeTargetParametersSagemakerPipelineParametersPipelineParameterArrayOutput) ToPipeTargetParametersSagemakerPipelineParametersPipelineParameterArrayOutput() PipeTargetParametersSagemakerPipelineParametersPipelineParameterArrayOutput {
	return o
}

func (o PipeTargetParametersSagemakerPipelineParametersPipelineParameterArrayOutput) ToPipeTargetParametersSagemakerPipelineParametersPipelineParameterArrayOutputWithContext(ctx context.Context) PipeTargetParametersSagemakerPipelineParametersPipelineParameterArrayOutput {
	return o
}

func (o PipeTargetParametersSagemakerPipelineParametersPipelineParameterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PipeTargetParametersSagemakerPipelineParametersPipelineParameter] {
	return pulumix.Output[[]PipeTargetParametersSagemakerPipelineParametersPipelineParameter]{
		OutputState: o.OutputState,
	}
}

func (o PipeTargetParametersSagemakerPipelineParametersPipelineParameterArrayOutput) Index(i pulumi.IntInput) PipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipeTargetParametersSagemakerPipelineParametersPipelineParameter {
		return vs[0].([]PipeTargetParametersSagemakerPipelineParametersPipelineParameter)[vs[1].(int)]
	}).(PipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput)
}

type PipeTargetParametersSqsQueueParameters struct {
	// This parameter applies only to FIFO (first-in-first-out) queues. The token used for deduplication of sent messages.
	MessageDeduplicationId *string `pulumi:"messageDeduplicationId"`
	// The FIFO message group ID to use as the target.
	MessageGroupId *string `pulumi:"messageGroupId"`
}

// PipeTargetParametersSqsQueueParametersInput is an input type that accepts PipeTargetParametersSqsQueueParametersArgs and PipeTargetParametersSqsQueueParametersOutput values.
// You can construct a concrete instance of `PipeTargetParametersSqsQueueParametersInput` via:
//
//	PipeTargetParametersSqsQueueParametersArgs{...}
type PipeTargetParametersSqsQueueParametersInput interface {
	pulumi.Input

	ToPipeTargetParametersSqsQueueParametersOutput() PipeTargetParametersSqsQueueParametersOutput
	ToPipeTargetParametersSqsQueueParametersOutputWithContext(context.Context) PipeTargetParametersSqsQueueParametersOutput
}

type PipeTargetParametersSqsQueueParametersArgs struct {
	// This parameter applies only to FIFO (first-in-first-out) queues. The token used for deduplication of sent messages.
	MessageDeduplicationId pulumi.StringPtrInput `pulumi:"messageDeduplicationId"`
	// The FIFO message group ID to use as the target.
	MessageGroupId pulumi.StringPtrInput `pulumi:"messageGroupId"`
}

func (PipeTargetParametersSqsQueueParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersSqsQueueParameters)(nil)).Elem()
}

func (i PipeTargetParametersSqsQueueParametersArgs) ToPipeTargetParametersSqsQueueParametersOutput() PipeTargetParametersSqsQueueParametersOutput {
	return i.ToPipeTargetParametersSqsQueueParametersOutputWithContext(context.Background())
}

func (i PipeTargetParametersSqsQueueParametersArgs) ToPipeTargetParametersSqsQueueParametersOutputWithContext(ctx context.Context) PipeTargetParametersSqsQueueParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersSqsQueueParametersOutput)
}

func (i PipeTargetParametersSqsQueueParametersArgs) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersSqsQueueParameters] {
	return pulumix.Output[PipeTargetParametersSqsQueueParameters]{
		OutputState: i.ToPipeTargetParametersSqsQueueParametersOutputWithContext(ctx).OutputState,
	}
}

func (i PipeTargetParametersSqsQueueParametersArgs) ToPipeTargetParametersSqsQueueParametersPtrOutput() PipeTargetParametersSqsQueueParametersPtrOutput {
	return i.ToPipeTargetParametersSqsQueueParametersPtrOutputWithContext(context.Background())
}

func (i PipeTargetParametersSqsQueueParametersArgs) ToPipeTargetParametersSqsQueueParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersSqsQueueParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersSqsQueueParametersOutput).ToPipeTargetParametersSqsQueueParametersPtrOutputWithContext(ctx)
}

// PipeTargetParametersSqsQueueParametersPtrInput is an input type that accepts PipeTargetParametersSqsQueueParametersArgs, PipeTargetParametersSqsQueueParametersPtr and PipeTargetParametersSqsQueueParametersPtrOutput values.
// You can construct a concrete instance of `PipeTargetParametersSqsQueueParametersPtrInput` via:
//
//	        PipeTargetParametersSqsQueueParametersArgs{...}
//
//	or:
//
//	        nil
type PipeTargetParametersSqsQueueParametersPtrInput interface {
	pulumi.Input

	ToPipeTargetParametersSqsQueueParametersPtrOutput() PipeTargetParametersSqsQueueParametersPtrOutput
	ToPipeTargetParametersSqsQueueParametersPtrOutputWithContext(context.Context) PipeTargetParametersSqsQueueParametersPtrOutput
}

type pipeTargetParametersSqsQueueParametersPtrType PipeTargetParametersSqsQueueParametersArgs

func PipeTargetParametersSqsQueueParametersPtr(v *PipeTargetParametersSqsQueueParametersArgs) PipeTargetParametersSqsQueueParametersPtrInput {
	return (*pipeTargetParametersSqsQueueParametersPtrType)(v)
}

func (*pipeTargetParametersSqsQueueParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParametersSqsQueueParameters)(nil)).Elem()
}

func (i *pipeTargetParametersSqsQueueParametersPtrType) ToPipeTargetParametersSqsQueueParametersPtrOutput() PipeTargetParametersSqsQueueParametersPtrOutput {
	return i.ToPipeTargetParametersSqsQueueParametersPtrOutputWithContext(context.Background())
}

func (i *pipeTargetParametersSqsQueueParametersPtrType) ToPipeTargetParametersSqsQueueParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersSqsQueueParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersSqsQueueParametersPtrOutput)
}

func (i *pipeTargetParametersSqsQueueParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersSqsQueueParameters] {
	return pulumix.Output[*PipeTargetParametersSqsQueueParameters]{
		OutputState: i.ToPipeTargetParametersSqsQueueParametersPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeTargetParametersSqsQueueParametersOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersSqsQueueParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersSqsQueueParameters)(nil)).Elem()
}

func (o PipeTargetParametersSqsQueueParametersOutput) ToPipeTargetParametersSqsQueueParametersOutput() PipeTargetParametersSqsQueueParametersOutput {
	return o
}

func (o PipeTargetParametersSqsQueueParametersOutput) ToPipeTargetParametersSqsQueueParametersOutputWithContext(ctx context.Context) PipeTargetParametersSqsQueueParametersOutput {
	return o
}

func (o PipeTargetParametersSqsQueueParametersOutput) ToPipeTargetParametersSqsQueueParametersPtrOutput() PipeTargetParametersSqsQueueParametersPtrOutput {
	return o.ToPipeTargetParametersSqsQueueParametersPtrOutputWithContext(context.Background())
}

func (o PipeTargetParametersSqsQueueParametersOutput) ToPipeTargetParametersSqsQueueParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersSqsQueueParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeTargetParametersSqsQueueParameters) *PipeTargetParametersSqsQueueParameters {
		return &v
	}).(PipeTargetParametersSqsQueueParametersPtrOutput)
}

func (o PipeTargetParametersSqsQueueParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersSqsQueueParameters] {
	return pulumix.Output[PipeTargetParametersSqsQueueParameters]{
		OutputState: o.OutputState,
	}
}

// This parameter applies only to FIFO (first-in-first-out) queues. The token used for deduplication of sent messages.
func (o PipeTargetParametersSqsQueueParametersOutput) MessageDeduplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersSqsQueueParameters) *string { return v.MessageDeduplicationId }).(pulumi.StringPtrOutput)
}

// The FIFO message group ID to use as the target.
func (o PipeTargetParametersSqsQueueParametersOutput) MessageGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParametersSqsQueueParameters) *string { return v.MessageGroupId }).(pulumi.StringPtrOutput)
}

type PipeTargetParametersSqsQueueParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersSqsQueueParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParametersSqsQueueParameters)(nil)).Elem()
}

func (o PipeTargetParametersSqsQueueParametersPtrOutput) ToPipeTargetParametersSqsQueueParametersPtrOutput() PipeTargetParametersSqsQueueParametersPtrOutput {
	return o
}

func (o PipeTargetParametersSqsQueueParametersPtrOutput) ToPipeTargetParametersSqsQueueParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersSqsQueueParametersPtrOutput {
	return o
}

func (o PipeTargetParametersSqsQueueParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersSqsQueueParameters] {
	return pulumix.Output[*PipeTargetParametersSqsQueueParameters]{
		OutputState: o.OutputState,
	}
}

func (o PipeTargetParametersSqsQueueParametersPtrOutput) Elem() PipeTargetParametersSqsQueueParametersOutput {
	return o.ApplyT(func(v *PipeTargetParametersSqsQueueParameters) PipeTargetParametersSqsQueueParameters {
		if v != nil {
			return *v
		}
		var ret PipeTargetParametersSqsQueueParameters
		return ret
	}).(PipeTargetParametersSqsQueueParametersOutput)
}

// This parameter applies only to FIFO (first-in-first-out) queues. The token used for deduplication of sent messages.
func (o PipeTargetParametersSqsQueueParametersPtrOutput) MessageDeduplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersSqsQueueParameters) *string {
		if v == nil {
			return nil
		}
		return v.MessageDeduplicationId
	}).(pulumi.StringPtrOutput)
}

// The FIFO message group ID to use as the target.
func (o PipeTargetParametersSqsQueueParametersPtrOutput) MessageGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersSqsQueueParameters) *string {
		if v == nil {
			return nil
		}
		return v.MessageGroupId
	}).(pulumi.StringPtrOutput)
}

type PipeTargetParametersStepFunctionStateMachineParameters struct {
	// Specify whether to invoke the function synchronously or asynchronously. Valid Values: REQUEST_RESPONSE, FIRE_AND_FORGET.
	InvocationType string `pulumi:"invocationType"`
}

// PipeTargetParametersStepFunctionStateMachineParametersInput is an input type that accepts PipeTargetParametersStepFunctionStateMachineParametersArgs and PipeTargetParametersStepFunctionStateMachineParametersOutput values.
// You can construct a concrete instance of `PipeTargetParametersStepFunctionStateMachineParametersInput` via:
//
//	PipeTargetParametersStepFunctionStateMachineParametersArgs{...}
type PipeTargetParametersStepFunctionStateMachineParametersInput interface {
	pulumi.Input

	ToPipeTargetParametersStepFunctionStateMachineParametersOutput() PipeTargetParametersStepFunctionStateMachineParametersOutput
	ToPipeTargetParametersStepFunctionStateMachineParametersOutputWithContext(context.Context) PipeTargetParametersStepFunctionStateMachineParametersOutput
}

type PipeTargetParametersStepFunctionStateMachineParametersArgs struct {
	// Specify whether to invoke the function synchronously or asynchronously. Valid Values: REQUEST_RESPONSE, FIRE_AND_FORGET.
	InvocationType pulumi.StringInput `pulumi:"invocationType"`
}

func (PipeTargetParametersStepFunctionStateMachineParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersStepFunctionStateMachineParameters)(nil)).Elem()
}

func (i PipeTargetParametersStepFunctionStateMachineParametersArgs) ToPipeTargetParametersStepFunctionStateMachineParametersOutput() PipeTargetParametersStepFunctionStateMachineParametersOutput {
	return i.ToPipeTargetParametersStepFunctionStateMachineParametersOutputWithContext(context.Background())
}

func (i PipeTargetParametersStepFunctionStateMachineParametersArgs) ToPipeTargetParametersStepFunctionStateMachineParametersOutputWithContext(ctx context.Context) PipeTargetParametersStepFunctionStateMachineParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersStepFunctionStateMachineParametersOutput)
}

func (i PipeTargetParametersStepFunctionStateMachineParametersArgs) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersStepFunctionStateMachineParameters] {
	return pulumix.Output[PipeTargetParametersStepFunctionStateMachineParameters]{
		OutputState: i.ToPipeTargetParametersStepFunctionStateMachineParametersOutputWithContext(ctx).OutputState,
	}
}

func (i PipeTargetParametersStepFunctionStateMachineParametersArgs) ToPipeTargetParametersStepFunctionStateMachineParametersPtrOutput() PipeTargetParametersStepFunctionStateMachineParametersPtrOutput {
	return i.ToPipeTargetParametersStepFunctionStateMachineParametersPtrOutputWithContext(context.Background())
}

func (i PipeTargetParametersStepFunctionStateMachineParametersArgs) ToPipeTargetParametersStepFunctionStateMachineParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersStepFunctionStateMachineParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersStepFunctionStateMachineParametersOutput).ToPipeTargetParametersStepFunctionStateMachineParametersPtrOutputWithContext(ctx)
}

// PipeTargetParametersStepFunctionStateMachineParametersPtrInput is an input type that accepts PipeTargetParametersStepFunctionStateMachineParametersArgs, PipeTargetParametersStepFunctionStateMachineParametersPtr and PipeTargetParametersStepFunctionStateMachineParametersPtrOutput values.
// You can construct a concrete instance of `PipeTargetParametersStepFunctionStateMachineParametersPtrInput` via:
//
//	        PipeTargetParametersStepFunctionStateMachineParametersArgs{...}
//
//	or:
//
//	        nil
type PipeTargetParametersStepFunctionStateMachineParametersPtrInput interface {
	pulumi.Input

	ToPipeTargetParametersStepFunctionStateMachineParametersPtrOutput() PipeTargetParametersStepFunctionStateMachineParametersPtrOutput
	ToPipeTargetParametersStepFunctionStateMachineParametersPtrOutputWithContext(context.Context) PipeTargetParametersStepFunctionStateMachineParametersPtrOutput
}

type pipeTargetParametersStepFunctionStateMachineParametersPtrType PipeTargetParametersStepFunctionStateMachineParametersArgs

func PipeTargetParametersStepFunctionStateMachineParametersPtr(v *PipeTargetParametersStepFunctionStateMachineParametersArgs) PipeTargetParametersStepFunctionStateMachineParametersPtrInput {
	return (*pipeTargetParametersStepFunctionStateMachineParametersPtrType)(v)
}

func (*pipeTargetParametersStepFunctionStateMachineParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParametersStepFunctionStateMachineParameters)(nil)).Elem()
}

func (i *pipeTargetParametersStepFunctionStateMachineParametersPtrType) ToPipeTargetParametersStepFunctionStateMachineParametersPtrOutput() PipeTargetParametersStepFunctionStateMachineParametersPtrOutput {
	return i.ToPipeTargetParametersStepFunctionStateMachineParametersPtrOutputWithContext(context.Background())
}

func (i *pipeTargetParametersStepFunctionStateMachineParametersPtrType) ToPipeTargetParametersStepFunctionStateMachineParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersStepFunctionStateMachineParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersStepFunctionStateMachineParametersPtrOutput)
}

func (i *pipeTargetParametersStepFunctionStateMachineParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersStepFunctionStateMachineParameters] {
	return pulumix.Output[*PipeTargetParametersStepFunctionStateMachineParameters]{
		OutputState: i.ToPipeTargetParametersStepFunctionStateMachineParametersPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeTargetParametersStepFunctionStateMachineParametersOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersStepFunctionStateMachineParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParametersStepFunctionStateMachineParameters)(nil)).Elem()
}

func (o PipeTargetParametersStepFunctionStateMachineParametersOutput) ToPipeTargetParametersStepFunctionStateMachineParametersOutput() PipeTargetParametersStepFunctionStateMachineParametersOutput {
	return o
}

func (o PipeTargetParametersStepFunctionStateMachineParametersOutput) ToPipeTargetParametersStepFunctionStateMachineParametersOutputWithContext(ctx context.Context) PipeTargetParametersStepFunctionStateMachineParametersOutput {
	return o
}

func (o PipeTargetParametersStepFunctionStateMachineParametersOutput) ToPipeTargetParametersStepFunctionStateMachineParametersPtrOutput() PipeTargetParametersStepFunctionStateMachineParametersPtrOutput {
	return o.ToPipeTargetParametersStepFunctionStateMachineParametersPtrOutputWithContext(context.Background())
}

func (o PipeTargetParametersStepFunctionStateMachineParametersOutput) ToPipeTargetParametersStepFunctionStateMachineParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersStepFunctionStateMachineParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeTargetParametersStepFunctionStateMachineParameters) *PipeTargetParametersStepFunctionStateMachineParameters {
		return &v
	}).(PipeTargetParametersStepFunctionStateMachineParametersPtrOutput)
}

func (o PipeTargetParametersStepFunctionStateMachineParametersOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetParametersStepFunctionStateMachineParameters] {
	return pulumix.Output[PipeTargetParametersStepFunctionStateMachineParameters]{
		OutputState: o.OutputState,
	}
}

// Specify whether to invoke the function synchronously or asynchronously. Valid Values: REQUEST_RESPONSE, FIRE_AND_FORGET.
func (o PipeTargetParametersStepFunctionStateMachineParametersOutput) InvocationType() pulumi.StringOutput {
	return o.ApplyT(func(v PipeTargetParametersStepFunctionStateMachineParameters) string { return v.InvocationType }).(pulumi.StringOutput)
}

type PipeTargetParametersStepFunctionStateMachineParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersStepFunctionStateMachineParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParametersStepFunctionStateMachineParameters)(nil)).Elem()
}

func (o PipeTargetParametersStepFunctionStateMachineParametersPtrOutput) ToPipeTargetParametersStepFunctionStateMachineParametersPtrOutput() PipeTargetParametersStepFunctionStateMachineParametersPtrOutput {
	return o
}

func (o PipeTargetParametersStepFunctionStateMachineParametersPtrOutput) ToPipeTargetParametersStepFunctionStateMachineParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersStepFunctionStateMachineParametersPtrOutput {
	return o
}

func (o PipeTargetParametersStepFunctionStateMachineParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetParametersStepFunctionStateMachineParameters] {
	return pulumix.Output[*PipeTargetParametersStepFunctionStateMachineParameters]{
		OutputState: o.OutputState,
	}
}

func (o PipeTargetParametersStepFunctionStateMachineParametersPtrOutput) Elem() PipeTargetParametersStepFunctionStateMachineParametersOutput {
	return o.ApplyT(func(v *PipeTargetParametersStepFunctionStateMachineParameters) PipeTargetParametersStepFunctionStateMachineParameters {
		if v != nil {
			return *v
		}
		var ret PipeTargetParametersStepFunctionStateMachineParameters
		return ret
	}).(PipeTargetParametersStepFunctionStateMachineParametersOutput)
}

// Specify whether to invoke the function synchronously or asynchronously. Valid Values: REQUEST_RESPONSE, FIRE_AND_FORGET.
func (o PipeTargetParametersStepFunctionStateMachineParametersPtrOutput) InvocationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetParametersStepFunctionStateMachineParameters) *string {
		if v == nil {
			return nil
		}
		return &v.InvocationType
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PipeEnrichmentParametersInput)(nil)).Elem(), PipeEnrichmentParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeEnrichmentParametersPtrInput)(nil)).Elem(), PipeEnrichmentParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeEnrichmentParametersHttpParametersInput)(nil)).Elem(), PipeEnrichmentParametersHttpParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeEnrichmentParametersHttpParametersPtrInput)(nil)).Elem(), PipeEnrichmentParametersHttpParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersInput)(nil)).Elem(), PipeSourceParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersPtrInput)(nil)).Elem(), PipeSourceParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersActivemqBrokerParametersInput)(nil)).Elem(), PipeSourceParametersActivemqBrokerParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersActivemqBrokerParametersPtrInput)(nil)).Elem(), PipeSourceParametersActivemqBrokerParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersActivemqBrokerParametersCredentialsInput)(nil)).Elem(), PipeSourceParametersActivemqBrokerParametersCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersActivemqBrokerParametersCredentialsPtrInput)(nil)).Elem(), PipeSourceParametersActivemqBrokerParametersCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersDynamodbStreamParametersInput)(nil)).Elem(), PipeSourceParametersDynamodbStreamParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersDynamodbStreamParametersPtrInput)(nil)).Elem(), PipeSourceParametersDynamodbStreamParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersDynamodbStreamParametersDeadLetterConfigInput)(nil)).Elem(), PipeSourceParametersDynamodbStreamParametersDeadLetterConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrInput)(nil)).Elem(), PipeSourceParametersDynamodbStreamParametersDeadLetterConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersFilterCriteriaInput)(nil)).Elem(), PipeSourceParametersFilterCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersFilterCriteriaPtrInput)(nil)).Elem(), PipeSourceParametersFilterCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersFilterCriteriaFilterInput)(nil)).Elem(), PipeSourceParametersFilterCriteriaFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersFilterCriteriaFilterArrayInput)(nil)).Elem(), PipeSourceParametersFilterCriteriaFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersKinesisStreamParametersInput)(nil)).Elem(), PipeSourceParametersKinesisStreamParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersKinesisStreamParametersPtrInput)(nil)).Elem(), PipeSourceParametersKinesisStreamParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersKinesisStreamParametersDeadLetterConfigInput)(nil)).Elem(), PipeSourceParametersKinesisStreamParametersDeadLetterConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrInput)(nil)).Elem(), PipeSourceParametersKinesisStreamParametersDeadLetterConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersManagedStreamingKafkaParametersInput)(nil)).Elem(), PipeSourceParametersManagedStreamingKafkaParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersManagedStreamingKafkaParametersPtrInput)(nil)).Elem(), PipeSourceParametersManagedStreamingKafkaParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersManagedStreamingKafkaParametersCredentialsInput)(nil)).Elem(), PipeSourceParametersManagedStreamingKafkaParametersCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrInput)(nil)).Elem(), PipeSourceParametersManagedStreamingKafkaParametersCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersRabbitmqBrokerParametersInput)(nil)).Elem(), PipeSourceParametersRabbitmqBrokerParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersRabbitmqBrokerParametersPtrInput)(nil)).Elem(), PipeSourceParametersRabbitmqBrokerParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersRabbitmqBrokerParametersCredentialsInput)(nil)).Elem(), PipeSourceParametersRabbitmqBrokerParametersCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersRabbitmqBrokerParametersCredentialsPtrInput)(nil)).Elem(), PipeSourceParametersRabbitmqBrokerParametersCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersSelfManagedKafkaParametersInput)(nil)).Elem(), PipeSourceParametersSelfManagedKafkaParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersSelfManagedKafkaParametersPtrInput)(nil)).Elem(), PipeSourceParametersSelfManagedKafkaParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersSelfManagedKafkaParametersCredentialsInput)(nil)).Elem(), PipeSourceParametersSelfManagedKafkaParametersCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersSelfManagedKafkaParametersCredentialsPtrInput)(nil)).Elem(), PipeSourceParametersSelfManagedKafkaParametersCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersSelfManagedKafkaParametersVpcInput)(nil)).Elem(), PipeSourceParametersSelfManagedKafkaParametersVpcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersSelfManagedKafkaParametersVpcPtrInput)(nil)).Elem(), PipeSourceParametersSelfManagedKafkaParametersVpcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersSqsQueueParametersInput)(nil)).Elem(), PipeSourceParametersSqsQueueParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersSqsQueueParametersPtrInput)(nil)).Elem(), PipeSourceParametersSqsQueueParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersInput)(nil)).Elem(), PipeTargetParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersPtrInput)(nil)).Elem(), PipeTargetParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersBatchJobParametersInput)(nil)).Elem(), PipeTargetParametersBatchJobParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersBatchJobParametersPtrInput)(nil)).Elem(), PipeTargetParametersBatchJobParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersBatchJobParametersArrayPropertiesInput)(nil)).Elem(), PipeTargetParametersBatchJobParametersArrayPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersBatchJobParametersArrayPropertiesPtrInput)(nil)).Elem(), PipeTargetParametersBatchJobParametersArrayPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersBatchJobParametersContainerOverridesInput)(nil)).Elem(), PipeTargetParametersBatchJobParametersContainerOverridesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersBatchJobParametersContainerOverridesPtrInput)(nil)).Elem(), PipeTargetParametersBatchJobParametersContainerOverridesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentInput)(nil)).Elem(), PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArrayInput)(nil)).Elem(), PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementInput)(nil)).Elem(), PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArrayInput)(nil)).Elem(), PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersBatchJobParametersDependsOnInput)(nil)).Elem(), PipeTargetParametersBatchJobParametersDependsOnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersBatchJobParametersDependsOnArrayInput)(nil)).Elem(), PipeTargetParametersBatchJobParametersDependsOnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersBatchJobParametersRetryStrategyInput)(nil)).Elem(), PipeTargetParametersBatchJobParametersRetryStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersBatchJobParametersRetryStrategyPtrInput)(nil)).Elem(), PipeTargetParametersBatchJobParametersRetryStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersCloudwatchLogsParametersInput)(nil)).Elem(), PipeTargetParametersCloudwatchLogsParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersCloudwatchLogsParametersPtrInput)(nil)).Elem(), PipeTargetParametersCloudwatchLogsParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersEcsTaskParametersInput)(nil)).Elem(), PipeTargetParametersEcsTaskParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersEcsTaskParametersPtrInput)(nil)).Elem(), PipeTargetParametersEcsTaskParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersEcsTaskParametersCapacityProviderStrategyInput)(nil)).Elem(), PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArrayInput)(nil)).Elem(), PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersEcsTaskParametersNetworkConfigurationInput)(nil)).Elem(), PipeTargetParametersEcsTaskParametersNetworkConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersEcsTaskParametersNetworkConfigurationPtrInput)(nil)).Elem(), PipeTargetParametersEcsTaskParametersNetworkConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationInput)(nil)).Elem(), PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrInput)(nil)).Elem(), PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesInput)(nil)).Elem(), PipeTargetParametersEcsTaskParametersOverridesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesPtrInput)(nil)).Elem(), PipeTargetParametersEcsTaskParametersOverridesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesContainerOverrideInput)(nil)).Elem(), PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArrayInput)(nil)).Elem(), PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentInput)(nil)).Elem(), PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArrayInput)(nil)).Elem(), PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileInput)(nil)).Elem(), PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArrayInput)(nil)).Elem(), PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementInput)(nil)).Elem(), PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArrayInput)(nil)).Elem(), PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageInput)(nil)).Elem(), PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrInput)(nil)).Elem(), PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideInput)(nil)).Elem(), PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArrayInput)(nil)).Elem(), PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersEcsTaskParametersPlacementConstraintInput)(nil)).Elem(), PipeTargetParametersEcsTaskParametersPlacementConstraintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersEcsTaskParametersPlacementConstraintArrayInput)(nil)).Elem(), PipeTargetParametersEcsTaskParametersPlacementConstraintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersEcsTaskParametersPlacementStrategyInput)(nil)).Elem(), PipeTargetParametersEcsTaskParametersPlacementStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersEcsTaskParametersPlacementStrategyArrayInput)(nil)).Elem(), PipeTargetParametersEcsTaskParametersPlacementStrategyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersEventbridgeEventBusParametersInput)(nil)).Elem(), PipeTargetParametersEventbridgeEventBusParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersEventbridgeEventBusParametersPtrInput)(nil)).Elem(), PipeTargetParametersEventbridgeEventBusParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersHttpParametersInput)(nil)).Elem(), PipeTargetParametersHttpParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersHttpParametersPtrInput)(nil)).Elem(), PipeTargetParametersHttpParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersKinesisStreamParametersInput)(nil)).Elem(), PipeTargetParametersKinesisStreamParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersKinesisStreamParametersPtrInput)(nil)).Elem(), PipeTargetParametersKinesisStreamParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersLambdaFunctionParametersInput)(nil)).Elem(), PipeTargetParametersLambdaFunctionParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersLambdaFunctionParametersPtrInput)(nil)).Elem(), PipeTargetParametersLambdaFunctionParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersRedshiftDataParametersInput)(nil)).Elem(), PipeTargetParametersRedshiftDataParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersRedshiftDataParametersPtrInput)(nil)).Elem(), PipeTargetParametersRedshiftDataParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersSagemakerPipelineParametersInput)(nil)).Elem(), PipeTargetParametersSagemakerPipelineParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersSagemakerPipelineParametersPtrInput)(nil)).Elem(), PipeTargetParametersSagemakerPipelineParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersSagemakerPipelineParametersPipelineParameterInput)(nil)).Elem(), PipeTargetParametersSagemakerPipelineParametersPipelineParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersSagemakerPipelineParametersPipelineParameterArrayInput)(nil)).Elem(), PipeTargetParametersSagemakerPipelineParametersPipelineParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersSqsQueueParametersInput)(nil)).Elem(), PipeTargetParametersSqsQueueParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersSqsQueueParametersPtrInput)(nil)).Elem(), PipeTargetParametersSqsQueueParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersStepFunctionStateMachineParametersInput)(nil)).Elem(), PipeTargetParametersStepFunctionStateMachineParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersStepFunctionStateMachineParametersPtrInput)(nil)).Elem(), PipeTargetParametersStepFunctionStateMachineParametersArgs{})
	pulumi.RegisterOutputType(PipeEnrichmentParametersOutput{})
	pulumi.RegisterOutputType(PipeEnrichmentParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeEnrichmentParametersHttpParametersOutput{})
	pulumi.RegisterOutputType(PipeEnrichmentParametersHttpParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersActivemqBrokerParametersOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersActivemqBrokerParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersActivemqBrokerParametersCredentialsOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersActivemqBrokerParametersCredentialsPtrOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersDynamodbStreamParametersOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersDynamodbStreamParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersDynamodbStreamParametersDeadLetterConfigOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersDynamodbStreamParametersDeadLetterConfigPtrOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersFilterCriteriaOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersFilterCriteriaPtrOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersFilterCriteriaFilterOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersFilterCriteriaFilterArrayOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersKinesisStreamParametersOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersKinesisStreamParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersKinesisStreamParametersDeadLetterConfigOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersKinesisStreamParametersDeadLetterConfigPtrOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersManagedStreamingKafkaParametersOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersManagedStreamingKafkaParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersManagedStreamingKafkaParametersCredentialsOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersManagedStreamingKafkaParametersCredentialsPtrOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersRabbitmqBrokerParametersOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersRabbitmqBrokerParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersRabbitmqBrokerParametersCredentialsOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersRabbitmqBrokerParametersCredentialsPtrOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersSelfManagedKafkaParametersOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersSelfManagedKafkaParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersSelfManagedKafkaParametersCredentialsOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersSelfManagedKafkaParametersCredentialsPtrOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersSelfManagedKafkaParametersVpcOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersSelfManagedKafkaParametersVpcPtrOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersSqsQueueParametersOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersSqsQueueParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersBatchJobParametersOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersBatchJobParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersBatchJobParametersArrayPropertiesOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersBatchJobParametersArrayPropertiesPtrOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersBatchJobParametersContainerOverridesOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersBatchJobParametersContainerOverridesPtrOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersBatchJobParametersContainerOverridesEnvironmentArrayOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirementArrayOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersBatchJobParametersDependsOnOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersBatchJobParametersDependsOnArrayOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersBatchJobParametersRetryStrategyOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersBatchJobParametersRetryStrategyPtrOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersCloudwatchLogsParametersOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersCloudwatchLogsParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersCapacityProviderStrategyOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersCapacityProviderStrategyArrayOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersNetworkConfigurationOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersNetworkConfigurationPtrOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfigurationPtrOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersOverridesOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersOverridesPtrOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideArrayOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentArrayOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFileArrayOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirementArrayOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersOverridesEphemeralStorageOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersOverridesEphemeralStoragePtrOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverrideArrayOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersPlacementConstraintOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersPlacementConstraintArrayOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersPlacementStrategyOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEcsTaskParametersPlacementStrategyArrayOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEventbridgeEventBusParametersOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersEventbridgeEventBusParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersHttpParametersOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersHttpParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersKinesisStreamParametersOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersKinesisStreamParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersLambdaFunctionParametersOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersLambdaFunctionParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersRedshiftDataParametersOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersRedshiftDataParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersSagemakerPipelineParametersOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersSagemakerPipelineParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersSagemakerPipelineParametersPipelineParameterOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersSagemakerPipelineParametersPipelineParameterArrayOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersSqsQueueParametersOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersSqsQueueParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersStepFunctionStateMachineParametersOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersStepFunctionStateMachineParametersPtrOutput{})
}
