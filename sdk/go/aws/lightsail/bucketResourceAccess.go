// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lightsail

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a lightsail resource access to a bucket.
//
// ## Import
//
// terraform import {
//
//	to = aws_lightsail_bucket_resource_access.test
//
//	id = "example-bucket,example-instance" } Using `pulumi import`, import `aws_lightsail_bucket_resource_access` using the `id` attribute. For exampleconsole % pulumi import aws_lightsail_bucket_resource_access.test example-bucket,example-instance
type BucketResourceAccess struct {
	pulumi.CustomResourceState

	// The name of the bucket to grant access to.
	BucketName pulumi.StringOutput `pulumi:"bucketName"`
	// The name of the resource to be granted bucket access.
	ResourceName pulumi.StringOutput `pulumi:"resourceName"`
}

// NewBucketResourceAccess registers a new resource with the given unique name, arguments, and options.
func NewBucketResourceAccess(ctx *pulumi.Context,
	name string, args *BucketResourceAccessArgs, opts ...pulumi.ResourceOption) (*BucketResourceAccess, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BucketName == nil {
		return nil, errors.New("invalid value for required argument 'BucketName'")
	}
	if args.ResourceName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BucketResourceAccess
	err := ctx.RegisterResource("aws:lightsail/bucketResourceAccess:BucketResourceAccess", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketResourceAccess gets an existing BucketResourceAccess resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketResourceAccess(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketResourceAccessState, opts ...pulumi.ResourceOption) (*BucketResourceAccess, error) {
	var resource BucketResourceAccess
	err := ctx.ReadResource("aws:lightsail/bucketResourceAccess:BucketResourceAccess", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketResourceAccess resources.
type bucketResourceAccessState struct {
	// The name of the bucket to grant access to.
	BucketName *string `pulumi:"bucketName"`
	// The name of the resource to be granted bucket access.
	ResourceName *string `pulumi:"resourceName"`
}

type BucketResourceAccessState struct {
	// The name of the bucket to grant access to.
	BucketName pulumi.StringPtrInput
	// The name of the resource to be granted bucket access.
	ResourceName pulumi.StringPtrInput
}

func (BucketResourceAccessState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketResourceAccessState)(nil)).Elem()
}

type bucketResourceAccessArgs struct {
	// The name of the bucket to grant access to.
	BucketName string `pulumi:"bucketName"`
	// The name of the resource to be granted bucket access.
	ResourceName string `pulumi:"resourceName"`
}

// The set of arguments for constructing a BucketResourceAccess resource.
type BucketResourceAccessArgs struct {
	// The name of the bucket to grant access to.
	BucketName pulumi.StringInput
	// The name of the resource to be granted bucket access.
	ResourceName pulumi.StringInput
}

func (BucketResourceAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketResourceAccessArgs)(nil)).Elem()
}

type BucketResourceAccessInput interface {
	pulumi.Input

	ToBucketResourceAccessOutput() BucketResourceAccessOutput
	ToBucketResourceAccessOutputWithContext(ctx context.Context) BucketResourceAccessOutput
}

func (*BucketResourceAccess) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketResourceAccess)(nil)).Elem()
}

func (i *BucketResourceAccess) ToBucketResourceAccessOutput() BucketResourceAccessOutput {
	return i.ToBucketResourceAccessOutputWithContext(context.Background())
}

func (i *BucketResourceAccess) ToBucketResourceAccessOutputWithContext(ctx context.Context) BucketResourceAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketResourceAccessOutput)
}

// BucketResourceAccessArrayInput is an input type that accepts BucketResourceAccessArray and BucketResourceAccessArrayOutput values.
// You can construct a concrete instance of `BucketResourceAccessArrayInput` via:
//
//	BucketResourceAccessArray{ BucketResourceAccessArgs{...} }
type BucketResourceAccessArrayInput interface {
	pulumi.Input

	ToBucketResourceAccessArrayOutput() BucketResourceAccessArrayOutput
	ToBucketResourceAccessArrayOutputWithContext(context.Context) BucketResourceAccessArrayOutput
}

type BucketResourceAccessArray []BucketResourceAccessInput

func (BucketResourceAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketResourceAccess)(nil)).Elem()
}

func (i BucketResourceAccessArray) ToBucketResourceAccessArrayOutput() BucketResourceAccessArrayOutput {
	return i.ToBucketResourceAccessArrayOutputWithContext(context.Background())
}

func (i BucketResourceAccessArray) ToBucketResourceAccessArrayOutputWithContext(ctx context.Context) BucketResourceAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketResourceAccessArrayOutput)
}

// BucketResourceAccessMapInput is an input type that accepts BucketResourceAccessMap and BucketResourceAccessMapOutput values.
// You can construct a concrete instance of `BucketResourceAccessMapInput` via:
//
//	BucketResourceAccessMap{ "key": BucketResourceAccessArgs{...} }
type BucketResourceAccessMapInput interface {
	pulumi.Input

	ToBucketResourceAccessMapOutput() BucketResourceAccessMapOutput
	ToBucketResourceAccessMapOutputWithContext(context.Context) BucketResourceAccessMapOutput
}

type BucketResourceAccessMap map[string]BucketResourceAccessInput

func (BucketResourceAccessMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketResourceAccess)(nil)).Elem()
}

func (i BucketResourceAccessMap) ToBucketResourceAccessMapOutput() BucketResourceAccessMapOutput {
	return i.ToBucketResourceAccessMapOutputWithContext(context.Background())
}

func (i BucketResourceAccessMap) ToBucketResourceAccessMapOutputWithContext(ctx context.Context) BucketResourceAccessMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketResourceAccessMapOutput)
}

type BucketResourceAccessOutput struct{ *pulumi.OutputState }

func (BucketResourceAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketResourceAccess)(nil)).Elem()
}

func (o BucketResourceAccessOutput) ToBucketResourceAccessOutput() BucketResourceAccessOutput {
	return o
}

func (o BucketResourceAccessOutput) ToBucketResourceAccessOutputWithContext(ctx context.Context) BucketResourceAccessOutput {
	return o
}

// The name of the bucket to grant access to.
func (o BucketResourceAccessOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketResourceAccess) pulumi.StringOutput { return v.BucketName }).(pulumi.StringOutput)
}

// The name of the resource to be granted bucket access.
func (o BucketResourceAccessOutput) ResourceName() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketResourceAccess) pulumi.StringOutput { return v.ResourceName }).(pulumi.StringOutput)
}

type BucketResourceAccessArrayOutput struct{ *pulumi.OutputState }

func (BucketResourceAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketResourceAccess)(nil)).Elem()
}

func (o BucketResourceAccessArrayOutput) ToBucketResourceAccessArrayOutput() BucketResourceAccessArrayOutput {
	return o
}

func (o BucketResourceAccessArrayOutput) ToBucketResourceAccessArrayOutputWithContext(ctx context.Context) BucketResourceAccessArrayOutput {
	return o
}

func (o BucketResourceAccessArrayOutput) Index(i pulumi.IntInput) BucketResourceAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BucketResourceAccess {
		return vs[0].([]*BucketResourceAccess)[vs[1].(int)]
	}).(BucketResourceAccessOutput)
}

type BucketResourceAccessMapOutput struct{ *pulumi.OutputState }

func (BucketResourceAccessMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketResourceAccess)(nil)).Elem()
}

func (o BucketResourceAccessMapOutput) ToBucketResourceAccessMapOutput() BucketResourceAccessMapOutput {
	return o
}

func (o BucketResourceAccessMapOutput) ToBucketResourceAccessMapOutputWithContext(ctx context.Context) BucketResourceAccessMapOutput {
	return o
}

func (o BucketResourceAccessMapOutput) MapIndex(k pulumi.StringInput) BucketResourceAccessOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BucketResourceAccess {
		return vs[0].(map[string]*BucketResourceAccess)[vs[1].(string)]
	}).(BucketResourceAccessOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BucketResourceAccessInput)(nil)).Elem(), &BucketResourceAccess{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketResourceAccessArrayInput)(nil)).Elem(), BucketResourceAccessArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketResourceAccessMapInput)(nil)).Elem(), BucketResourceAccessMap{})
	pulumi.RegisterOutputType(BucketResourceAccessOutput{})
	pulumi.RegisterOutputType(BucketResourceAccessArrayOutput{})
	pulumi.RegisterOutputType(BucketResourceAccessMapOutput{})
}
