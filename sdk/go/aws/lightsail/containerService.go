// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lightsail

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ContainerService struct {
	pulumi.CustomResourceState

	Arn                   pulumi.StringOutput                         `pulumi:"arn"`
	AvailabilityZone      pulumi.StringOutput                         `pulumi:"availabilityZone"`
	CreatedAt             pulumi.StringOutput                         `pulumi:"createdAt"`
	IsDisabled            pulumi.BoolPtrOutput                        `pulumi:"isDisabled"`
	Name                  pulumi.StringOutput                         `pulumi:"name"`
	Power                 pulumi.StringOutput                         `pulumi:"power"`
	PowerId               pulumi.StringOutput                         `pulumi:"powerId"`
	PrincipalArn          pulumi.StringOutput                         `pulumi:"principalArn"`
	PrivateDomainName     pulumi.StringOutput                         `pulumi:"privateDomainName"`
	PrivateRegistryAccess ContainerServicePrivateRegistryAccessOutput `pulumi:"privateRegistryAccess"`
	PublicDomainNames     ContainerServicePublicDomainNamesPtrOutput  `pulumi:"publicDomainNames"`
	ResourceType          pulumi.StringOutput                         `pulumi:"resourceType"`
	Scale                 pulumi.IntOutput                            `pulumi:"scale"`
	State                 pulumi.StringOutput                         `pulumi:"state"`
	Tags                  pulumi.StringMapOutput                      `pulumi:"tags"`
	TagsAll               pulumi.StringMapOutput                      `pulumi:"tagsAll"`
	Url                   pulumi.StringOutput                         `pulumi:"url"`
}

// NewContainerService registers a new resource with the given unique name, arguments, and options.
func NewContainerService(ctx *pulumi.Context,
	name string, args *ContainerServiceArgs, opts ...pulumi.ResourceOption) (*ContainerService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Power == nil {
		return nil, errors.New("invalid value for required argument 'Power'")
	}
	if args.Scale == nil {
		return nil, errors.New("invalid value for required argument 'Scale'")
	}
	var resource ContainerService
	err := ctx.RegisterResource("aws:lightsail/containerService:ContainerService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContainerService gets an existing ContainerService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainerService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContainerServiceState, opts ...pulumi.ResourceOption) (*ContainerService, error) {
	var resource ContainerService
	err := ctx.ReadResource("aws:lightsail/containerService:ContainerService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContainerService resources.
type containerServiceState struct {
	Arn                   *string                                `pulumi:"arn"`
	AvailabilityZone      *string                                `pulumi:"availabilityZone"`
	CreatedAt             *string                                `pulumi:"createdAt"`
	IsDisabled            *bool                                  `pulumi:"isDisabled"`
	Name                  *string                                `pulumi:"name"`
	Power                 *string                                `pulumi:"power"`
	PowerId               *string                                `pulumi:"powerId"`
	PrincipalArn          *string                                `pulumi:"principalArn"`
	PrivateDomainName     *string                                `pulumi:"privateDomainName"`
	PrivateRegistryAccess *ContainerServicePrivateRegistryAccess `pulumi:"privateRegistryAccess"`
	PublicDomainNames     *ContainerServicePublicDomainNames     `pulumi:"publicDomainNames"`
	ResourceType          *string                                `pulumi:"resourceType"`
	Scale                 *int                                   `pulumi:"scale"`
	State                 *string                                `pulumi:"state"`
	Tags                  map[string]string                      `pulumi:"tags"`
	TagsAll               map[string]string                      `pulumi:"tagsAll"`
	Url                   *string                                `pulumi:"url"`
}

type ContainerServiceState struct {
	Arn                   pulumi.StringPtrInput
	AvailabilityZone      pulumi.StringPtrInput
	CreatedAt             pulumi.StringPtrInput
	IsDisabled            pulumi.BoolPtrInput
	Name                  pulumi.StringPtrInput
	Power                 pulumi.StringPtrInput
	PowerId               pulumi.StringPtrInput
	PrincipalArn          pulumi.StringPtrInput
	PrivateDomainName     pulumi.StringPtrInput
	PrivateRegistryAccess ContainerServicePrivateRegistryAccessPtrInput
	PublicDomainNames     ContainerServicePublicDomainNamesPtrInput
	ResourceType          pulumi.StringPtrInput
	Scale                 pulumi.IntPtrInput
	State                 pulumi.StringPtrInput
	Tags                  pulumi.StringMapInput
	TagsAll               pulumi.StringMapInput
	Url                   pulumi.StringPtrInput
}

func (ContainerServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*containerServiceState)(nil)).Elem()
}

type containerServiceArgs struct {
	IsDisabled            *bool                                  `pulumi:"isDisabled"`
	Name                  *string                                `pulumi:"name"`
	Power                 string                                 `pulumi:"power"`
	PrivateRegistryAccess *ContainerServicePrivateRegistryAccess `pulumi:"privateRegistryAccess"`
	PublicDomainNames     *ContainerServicePublicDomainNames     `pulumi:"publicDomainNames"`
	Scale                 int                                    `pulumi:"scale"`
	Tags                  map[string]string                      `pulumi:"tags"`
}

// The set of arguments for constructing a ContainerService resource.
type ContainerServiceArgs struct {
	IsDisabled            pulumi.BoolPtrInput
	Name                  pulumi.StringPtrInput
	Power                 pulumi.StringInput
	PrivateRegistryAccess ContainerServicePrivateRegistryAccessPtrInput
	PublicDomainNames     ContainerServicePublicDomainNamesPtrInput
	Scale                 pulumi.IntInput
	Tags                  pulumi.StringMapInput
}

func (ContainerServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*containerServiceArgs)(nil)).Elem()
}

type ContainerServiceInput interface {
	pulumi.Input

	ToContainerServiceOutput() ContainerServiceOutput
	ToContainerServiceOutputWithContext(ctx context.Context) ContainerServiceOutput
}

func (*ContainerService) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerService)(nil)).Elem()
}

func (i *ContainerService) ToContainerServiceOutput() ContainerServiceOutput {
	return i.ToContainerServiceOutputWithContext(context.Background())
}

func (i *ContainerService) ToContainerServiceOutputWithContext(ctx context.Context) ContainerServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerServiceOutput)
}

// ContainerServiceArrayInput is an input type that accepts ContainerServiceArray and ContainerServiceArrayOutput values.
// You can construct a concrete instance of `ContainerServiceArrayInput` via:
//
//	ContainerServiceArray{ ContainerServiceArgs{...} }
type ContainerServiceArrayInput interface {
	pulumi.Input

	ToContainerServiceArrayOutput() ContainerServiceArrayOutput
	ToContainerServiceArrayOutputWithContext(context.Context) ContainerServiceArrayOutput
}

type ContainerServiceArray []ContainerServiceInput

func (ContainerServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContainerService)(nil)).Elem()
}

func (i ContainerServiceArray) ToContainerServiceArrayOutput() ContainerServiceArrayOutput {
	return i.ToContainerServiceArrayOutputWithContext(context.Background())
}

func (i ContainerServiceArray) ToContainerServiceArrayOutputWithContext(ctx context.Context) ContainerServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerServiceArrayOutput)
}

// ContainerServiceMapInput is an input type that accepts ContainerServiceMap and ContainerServiceMapOutput values.
// You can construct a concrete instance of `ContainerServiceMapInput` via:
//
//	ContainerServiceMap{ "key": ContainerServiceArgs{...} }
type ContainerServiceMapInput interface {
	pulumi.Input

	ToContainerServiceMapOutput() ContainerServiceMapOutput
	ToContainerServiceMapOutputWithContext(context.Context) ContainerServiceMapOutput
}

type ContainerServiceMap map[string]ContainerServiceInput

func (ContainerServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContainerService)(nil)).Elem()
}

func (i ContainerServiceMap) ToContainerServiceMapOutput() ContainerServiceMapOutput {
	return i.ToContainerServiceMapOutputWithContext(context.Background())
}

func (i ContainerServiceMap) ToContainerServiceMapOutputWithContext(ctx context.Context) ContainerServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerServiceMapOutput)
}

type ContainerServiceOutput struct{ *pulumi.OutputState }

func (ContainerServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerService)(nil)).Elem()
}

func (o ContainerServiceOutput) ToContainerServiceOutput() ContainerServiceOutput {
	return o
}

func (o ContainerServiceOutput) ToContainerServiceOutputWithContext(ctx context.Context) ContainerServiceOutput {
	return o
}

func (o ContainerServiceOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerService) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ContainerServiceOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerService) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

func (o ContainerServiceOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerService) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o ContainerServiceOutput) IsDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerService) pulumi.BoolPtrOutput { return v.IsDisabled }).(pulumi.BoolPtrOutput)
}

func (o ContainerServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerService) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ContainerServiceOutput) Power() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerService) pulumi.StringOutput { return v.Power }).(pulumi.StringOutput)
}

func (o ContainerServiceOutput) PowerId() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerService) pulumi.StringOutput { return v.PowerId }).(pulumi.StringOutput)
}

func (o ContainerServiceOutput) PrincipalArn() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerService) pulumi.StringOutput { return v.PrincipalArn }).(pulumi.StringOutput)
}

func (o ContainerServiceOutput) PrivateDomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerService) pulumi.StringOutput { return v.PrivateDomainName }).(pulumi.StringOutput)
}

func (o ContainerServiceOutput) PrivateRegistryAccess() ContainerServicePrivateRegistryAccessOutput {
	return o.ApplyT(func(v *ContainerService) ContainerServicePrivateRegistryAccessOutput { return v.PrivateRegistryAccess }).(ContainerServicePrivateRegistryAccessOutput)
}

func (o ContainerServiceOutput) PublicDomainNames() ContainerServicePublicDomainNamesPtrOutput {
	return o.ApplyT(func(v *ContainerService) ContainerServicePublicDomainNamesPtrOutput { return v.PublicDomainNames }).(ContainerServicePublicDomainNamesPtrOutput)
}

func (o ContainerServiceOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerService) pulumi.StringOutput { return v.ResourceType }).(pulumi.StringOutput)
}

func (o ContainerServiceOutput) Scale() pulumi.IntOutput {
	return o.ApplyT(func(v *ContainerService) pulumi.IntOutput { return v.Scale }).(pulumi.IntOutput)
}

func (o ContainerServiceOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerService) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o ContainerServiceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ContainerService) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ContainerServiceOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ContainerService) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o ContainerServiceOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerService) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type ContainerServiceArrayOutput struct{ *pulumi.OutputState }

func (ContainerServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContainerService)(nil)).Elem()
}

func (o ContainerServiceArrayOutput) ToContainerServiceArrayOutput() ContainerServiceArrayOutput {
	return o
}

func (o ContainerServiceArrayOutput) ToContainerServiceArrayOutputWithContext(ctx context.Context) ContainerServiceArrayOutput {
	return o
}

func (o ContainerServiceArrayOutput) Index(i pulumi.IntInput) ContainerServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ContainerService {
		return vs[0].([]*ContainerService)[vs[1].(int)]
	}).(ContainerServiceOutput)
}

type ContainerServiceMapOutput struct{ *pulumi.OutputState }

func (ContainerServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContainerService)(nil)).Elem()
}

func (o ContainerServiceMapOutput) ToContainerServiceMapOutput() ContainerServiceMapOutput {
	return o
}

func (o ContainerServiceMapOutput) ToContainerServiceMapOutputWithContext(ctx context.Context) ContainerServiceMapOutput {
	return o
}

func (o ContainerServiceMapOutput) MapIndex(k pulumi.StringInput) ContainerServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ContainerService {
		return vs[0].(map[string]*ContainerService)[vs[1].(string)]
	}).(ContainerServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerServiceInput)(nil)).Elem(), &ContainerService{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerServiceArrayInput)(nil)).Elem(), ContainerServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerServiceMapInput)(nil)).Elem(), ContainerServiceMap{})
	pulumi.RegisterOutputType(ContainerServiceOutput{})
	pulumi.RegisterOutputType(ContainerServiceArrayOutput{})
	pulumi.RegisterOutputType(ContainerServiceMapOutput{})
}
