// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lightsail

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Attaches a Lightsail Load Balancer Certificate to a Lightsail Load Balancer.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/lightsail"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testLb, err := lightsail.NewLb(ctx, "testLb", &lightsail.LbArgs{
//				HealthCheckPath: pulumi.String("/"),
//				InstancePort:    pulumi.Int(80),
//				Tags: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			testLbCertificate, err := lightsail.NewLbCertificate(ctx, "testLbCertificate", &lightsail.LbCertificateArgs{
//				LbName:     testLb.ID(),
//				DomainName: pulumi.String("test.com"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = lightsail.NewLbCertificateAttachment(ctx, "testLbCertificateAttachment", &lightsail.LbCertificateAttachmentArgs{
//				LbName:          testLb.Name,
//				CertificateName: testLbCertificate.Name,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// `aws_lightsail_lb_certificate_attachment` can be imported by using the name attribute, e.g.,
//
// ```sh
//
//	$ pulumi import aws:lightsail/lbCertificateAttachment:LbCertificateAttachment test example-load-balancer,example-certificate
//
// ```
type LbCertificateAttachment struct {
	pulumi.CustomResourceState

	// The name of your SSL/TLS certificate.
	CertificateName pulumi.StringOutput `pulumi:"certificateName"`
	// The name of the load balancer to which you want to associate the SSL/TLS certificate.
	LbName pulumi.StringOutput `pulumi:"lbName"`
}

// NewLbCertificateAttachment registers a new resource with the given unique name, arguments, and options.
func NewLbCertificateAttachment(ctx *pulumi.Context,
	name string, args *LbCertificateAttachmentArgs, opts ...pulumi.ResourceOption) (*LbCertificateAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateName == nil {
		return nil, errors.New("invalid value for required argument 'CertificateName'")
	}
	if args.LbName == nil {
		return nil, errors.New("invalid value for required argument 'LbName'")
	}
	var resource LbCertificateAttachment
	err := ctx.RegisterResource("aws:lightsail/lbCertificateAttachment:LbCertificateAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLbCertificateAttachment gets an existing LbCertificateAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLbCertificateAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LbCertificateAttachmentState, opts ...pulumi.ResourceOption) (*LbCertificateAttachment, error) {
	var resource LbCertificateAttachment
	err := ctx.ReadResource("aws:lightsail/lbCertificateAttachment:LbCertificateAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LbCertificateAttachment resources.
type lbCertificateAttachmentState struct {
	// The name of your SSL/TLS certificate.
	CertificateName *string `pulumi:"certificateName"`
	// The name of the load balancer to which you want to associate the SSL/TLS certificate.
	LbName *string `pulumi:"lbName"`
}

type LbCertificateAttachmentState struct {
	// The name of your SSL/TLS certificate.
	CertificateName pulumi.StringPtrInput
	// The name of the load balancer to which you want to associate the SSL/TLS certificate.
	LbName pulumi.StringPtrInput
}

func (LbCertificateAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*lbCertificateAttachmentState)(nil)).Elem()
}

type lbCertificateAttachmentArgs struct {
	// The name of your SSL/TLS certificate.
	CertificateName string `pulumi:"certificateName"`
	// The name of the load balancer to which you want to associate the SSL/TLS certificate.
	LbName string `pulumi:"lbName"`
}

// The set of arguments for constructing a LbCertificateAttachment resource.
type LbCertificateAttachmentArgs struct {
	// The name of your SSL/TLS certificate.
	CertificateName pulumi.StringInput
	// The name of the load balancer to which you want to associate the SSL/TLS certificate.
	LbName pulumi.StringInput
}

func (LbCertificateAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lbCertificateAttachmentArgs)(nil)).Elem()
}

type LbCertificateAttachmentInput interface {
	pulumi.Input

	ToLbCertificateAttachmentOutput() LbCertificateAttachmentOutput
	ToLbCertificateAttachmentOutputWithContext(ctx context.Context) LbCertificateAttachmentOutput
}

func (*LbCertificateAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**LbCertificateAttachment)(nil)).Elem()
}

func (i *LbCertificateAttachment) ToLbCertificateAttachmentOutput() LbCertificateAttachmentOutput {
	return i.ToLbCertificateAttachmentOutputWithContext(context.Background())
}

func (i *LbCertificateAttachment) ToLbCertificateAttachmentOutputWithContext(ctx context.Context) LbCertificateAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbCertificateAttachmentOutput)
}

// LbCertificateAttachmentArrayInput is an input type that accepts LbCertificateAttachmentArray and LbCertificateAttachmentArrayOutput values.
// You can construct a concrete instance of `LbCertificateAttachmentArrayInput` via:
//
//	LbCertificateAttachmentArray{ LbCertificateAttachmentArgs{...} }
type LbCertificateAttachmentArrayInput interface {
	pulumi.Input

	ToLbCertificateAttachmentArrayOutput() LbCertificateAttachmentArrayOutput
	ToLbCertificateAttachmentArrayOutputWithContext(context.Context) LbCertificateAttachmentArrayOutput
}

type LbCertificateAttachmentArray []LbCertificateAttachmentInput

func (LbCertificateAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LbCertificateAttachment)(nil)).Elem()
}

func (i LbCertificateAttachmentArray) ToLbCertificateAttachmentArrayOutput() LbCertificateAttachmentArrayOutput {
	return i.ToLbCertificateAttachmentArrayOutputWithContext(context.Background())
}

func (i LbCertificateAttachmentArray) ToLbCertificateAttachmentArrayOutputWithContext(ctx context.Context) LbCertificateAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbCertificateAttachmentArrayOutput)
}

// LbCertificateAttachmentMapInput is an input type that accepts LbCertificateAttachmentMap and LbCertificateAttachmentMapOutput values.
// You can construct a concrete instance of `LbCertificateAttachmentMapInput` via:
//
//	LbCertificateAttachmentMap{ "key": LbCertificateAttachmentArgs{...} }
type LbCertificateAttachmentMapInput interface {
	pulumi.Input

	ToLbCertificateAttachmentMapOutput() LbCertificateAttachmentMapOutput
	ToLbCertificateAttachmentMapOutputWithContext(context.Context) LbCertificateAttachmentMapOutput
}

type LbCertificateAttachmentMap map[string]LbCertificateAttachmentInput

func (LbCertificateAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LbCertificateAttachment)(nil)).Elem()
}

func (i LbCertificateAttachmentMap) ToLbCertificateAttachmentMapOutput() LbCertificateAttachmentMapOutput {
	return i.ToLbCertificateAttachmentMapOutputWithContext(context.Background())
}

func (i LbCertificateAttachmentMap) ToLbCertificateAttachmentMapOutputWithContext(ctx context.Context) LbCertificateAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbCertificateAttachmentMapOutput)
}

type LbCertificateAttachmentOutput struct{ *pulumi.OutputState }

func (LbCertificateAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LbCertificateAttachment)(nil)).Elem()
}

func (o LbCertificateAttachmentOutput) ToLbCertificateAttachmentOutput() LbCertificateAttachmentOutput {
	return o
}

func (o LbCertificateAttachmentOutput) ToLbCertificateAttachmentOutputWithContext(ctx context.Context) LbCertificateAttachmentOutput {
	return o
}

// The name of your SSL/TLS certificate.
func (o LbCertificateAttachmentOutput) CertificateName() pulumi.StringOutput {
	return o.ApplyT(func(v *LbCertificateAttachment) pulumi.StringOutput { return v.CertificateName }).(pulumi.StringOutput)
}

// The name of the load balancer to which you want to associate the SSL/TLS certificate.
func (o LbCertificateAttachmentOutput) LbName() pulumi.StringOutput {
	return o.ApplyT(func(v *LbCertificateAttachment) pulumi.StringOutput { return v.LbName }).(pulumi.StringOutput)
}

type LbCertificateAttachmentArrayOutput struct{ *pulumi.OutputState }

func (LbCertificateAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LbCertificateAttachment)(nil)).Elem()
}

func (o LbCertificateAttachmentArrayOutput) ToLbCertificateAttachmentArrayOutput() LbCertificateAttachmentArrayOutput {
	return o
}

func (o LbCertificateAttachmentArrayOutput) ToLbCertificateAttachmentArrayOutputWithContext(ctx context.Context) LbCertificateAttachmentArrayOutput {
	return o
}

func (o LbCertificateAttachmentArrayOutput) Index(i pulumi.IntInput) LbCertificateAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LbCertificateAttachment {
		return vs[0].([]*LbCertificateAttachment)[vs[1].(int)]
	}).(LbCertificateAttachmentOutput)
}

type LbCertificateAttachmentMapOutput struct{ *pulumi.OutputState }

func (LbCertificateAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LbCertificateAttachment)(nil)).Elem()
}

func (o LbCertificateAttachmentMapOutput) ToLbCertificateAttachmentMapOutput() LbCertificateAttachmentMapOutput {
	return o
}

func (o LbCertificateAttachmentMapOutput) ToLbCertificateAttachmentMapOutputWithContext(ctx context.Context) LbCertificateAttachmentMapOutput {
	return o
}

func (o LbCertificateAttachmentMapOutput) MapIndex(k pulumi.StringInput) LbCertificateAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LbCertificateAttachment {
		return vs[0].(map[string]*LbCertificateAttachment)[vs[1].(string)]
	}).(LbCertificateAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LbCertificateAttachmentInput)(nil)).Elem(), &LbCertificateAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbCertificateAttachmentArrayInput)(nil)).Elem(), LbCertificateAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbCertificateAttachmentMapInput)(nil)).Elem(), LbCertificateAttachmentMap{})
	pulumi.RegisterOutputType(LbCertificateAttachmentOutput{})
	pulumi.RegisterOutputType(LbCertificateAttachmentArrayOutput{})
	pulumi.RegisterOutputType(LbCertificateAttachmentMapOutput{})
}
