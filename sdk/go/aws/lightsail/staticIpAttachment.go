// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package lightsail

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a static IP address attachment - relationship between a Lightsail static IP & Lightsail instance.
// 
// ~> **Note:** Lightsail is currently only supported in a limited number of AWS Regions, please see ["Regions and Availability Zones in Amazon Lightsail"](https://lightsail.aws.amazon.com/ls/docs/overview/article/understanding-regions-and-availability-zones-in-amazon-lightsail) for more details
type StaticIpAttachment struct {
	s *pulumi.ResourceState
}

// NewStaticIpAttachment registers a new resource with the given unique name, arguments, and options.
func NewStaticIpAttachment(ctx *pulumi.Context,
	name string, args *StaticIpAttachmentArgs, opts ...pulumi.ResourceOpt) (*StaticIpAttachment, error) {
	if args == nil || args.InstanceName == nil {
		return nil, errors.New("missing required argument 'InstanceName'")
	}
	if args == nil || args.StaticIpName == nil {
		return nil, errors.New("missing required argument 'StaticIpName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["instanceName"] = nil
		inputs["staticIpName"] = nil
	} else {
		inputs["instanceName"] = args.InstanceName
		inputs["staticIpName"] = args.StaticIpName
	}
	s, err := ctx.RegisterResource("aws:lightsail/staticIpAttachment:StaticIpAttachment", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &StaticIpAttachment{s: s}, nil
}

// GetStaticIpAttachment gets an existing StaticIpAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStaticIpAttachment(ctx *pulumi.Context,
	name string, id pulumi.ID, state *StaticIpAttachmentState, opts ...pulumi.ResourceOpt) (*StaticIpAttachment, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["instanceName"] = state.InstanceName
		inputs["staticIpName"] = state.StaticIpName
	}
	s, err := ctx.ReadResource("aws:lightsail/staticIpAttachment:StaticIpAttachment", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &StaticIpAttachment{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *StaticIpAttachment) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *StaticIpAttachment) ID() *pulumi.IDOutput {
	return r.s.ID
}

// The name of the Lightsail instance to attach the IP to
func (r *StaticIpAttachment) InstanceName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["instanceName"])
}

// The name of the allocated static IP
func (r *StaticIpAttachment) StaticIpName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["staticIpName"])
}

// Input properties used for looking up and filtering StaticIpAttachment resources.
type StaticIpAttachmentState struct {
	// The name of the Lightsail instance to attach the IP to
	InstanceName interface{}
	// The name of the allocated static IP
	StaticIpName interface{}
}

// The set of arguments for constructing a StaticIpAttachment resource.
type StaticIpAttachmentArgs struct {
	// The name of the Lightsail instance to attach the IP to
	InstanceName interface{}
	// The name of the allocated static IP
	StaticIpName interface{}
}
