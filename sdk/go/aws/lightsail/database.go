// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lightsail

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Database struct {
	pulumi.CustomResourceState

	ApplyImmediately           pulumi.BoolOutput      `pulumi:"applyImmediately"`
	Arn                        pulumi.StringOutput    `pulumi:"arn"`
	AvailabilityZone           pulumi.StringOutput    `pulumi:"availabilityZone"`
	BackupRetentionEnabled     pulumi.BoolPtrOutput   `pulumi:"backupRetentionEnabled"`
	BlueprintId                pulumi.StringOutput    `pulumi:"blueprintId"`
	BundleId                   pulumi.StringOutput    `pulumi:"bundleId"`
	CaCertificateIdentifier    pulumi.StringOutput    `pulumi:"caCertificateIdentifier"`
	CpuCount                   pulumi.IntOutput       `pulumi:"cpuCount"`
	CreatedAt                  pulumi.StringOutput    `pulumi:"createdAt"`
	DiskSize                   pulumi.Float64Output   `pulumi:"diskSize"`
	Engine                     pulumi.StringOutput    `pulumi:"engine"`
	EngineVersion              pulumi.StringOutput    `pulumi:"engineVersion"`
	FinalSnapshotName          pulumi.StringPtrOutput `pulumi:"finalSnapshotName"`
	MasterDatabaseName         pulumi.StringOutput    `pulumi:"masterDatabaseName"`
	MasterEndpointAddress      pulumi.StringOutput    `pulumi:"masterEndpointAddress"`
	MasterEndpointPort         pulumi.IntOutput       `pulumi:"masterEndpointPort"`
	MasterPassword             pulumi.StringOutput    `pulumi:"masterPassword"`
	MasterUsername             pulumi.StringOutput    `pulumi:"masterUsername"`
	PreferredBackupWindow      pulumi.StringOutput    `pulumi:"preferredBackupWindow"`
	PreferredMaintenanceWindow pulumi.StringOutput    `pulumi:"preferredMaintenanceWindow"`
	PubliclyAccessible         pulumi.BoolPtrOutput   `pulumi:"publiclyAccessible"`
	RamSize                    pulumi.Float64Output   `pulumi:"ramSize"`
	RelationalDatabaseName     pulumi.StringOutput    `pulumi:"relationalDatabaseName"`
	SecondaryAvailabilityZone  pulumi.StringOutput    `pulumi:"secondaryAvailabilityZone"`
	SkipFinalSnapshot          pulumi.BoolPtrOutput   `pulumi:"skipFinalSnapshot"`
	SupportCode                pulumi.StringOutput    `pulumi:"supportCode"`
	Tags                       pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll                    pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewDatabase registers a new resource with the given unique name, arguments, and options.
func NewDatabase(ctx *pulumi.Context,
	name string, args *DatabaseArgs, opts ...pulumi.ResourceOption) (*Database, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BlueprintId == nil {
		return nil, errors.New("invalid value for required argument 'BlueprintId'")
	}
	if args.BundleId == nil {
		return nil, errors.New("invalid value for required argument 'BundleId'")
	}
	if args.MasterDatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'MasterDatabaseName'")
	}
	if args.MasterPassword == nil {
		return nil, errors.New("invalid value for required argument 'MasterPassword'")
	}
	if args.MasterUsername == nil {
		return nil, errors.New("invalid value for required argument 'MasterUsername'")
	}
	if args.RelationalDatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'RelationalDatabaseName'")
	}
	if args.MasterPassword != nil {
		args.MasterPassword = pulumi.ToSecret(args.MasterPassword).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"masterPassword",
	})
	opts = append(opts, secrets)
	var resource Database
	err := ctx.RegisterResource("aws:lightsail/database:Database", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabase gets an existing Database resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseState, opts ...pulumi.ResourceOption) (*Database, error) {
	var resource Database
	err := ctx.ReadResource("aws:lightsail/database:Database", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Database resources.
type databaseState struct {
	ApplyImmediately           *bool             `pulumi:"applyImmediately"`
	Arn                        *string           `pulumi:"arn"`
	AvailabilityZone           *string           `pulumi:"availabilityZone"`
	BackupRetentionEnabled     *bool             `pulumi:"backupRetentionEnabled"`
	BlueprintId                *string           `pulumi:"blueprintId"`
	BundleId                   *string           `pulumi:"bundleId"`
	CaCertificateIdentifier    *string           `pulumi:"caCertificateIdentifier"`
	CpuCount                   *int              `pulumi:"cpuCount"`
	CreatedAt                  *string           `pulumi:"createdAt"`
	DiskSize                   *float64          `pulumi:"diskSize"`
	Engine                     *string           `pulumi:"engine"`
	EngineVersion              *string           `pulumi:"engineVersion"`
	FinalSnapshotName          *string           `pulumi:"finalSnapshotName"`
	MasterDatabaseName         *string           `pulumi:"masterDatabaseName"`
	MasterEndpointAddress      *string           `pulumi:"masterEndpointAddress"`
	MasterEndpointPort         *int              `pulumi:"masterEndpointPort"`
	MasterPassword             *string           `pulumi:"masterPassword"`
	MasterUsername             *string           `pulumi:"masterUsername"`
	PreferredBackupWindow      *string           `pulumi:"preferredBackupWindow"`
	PreferredMaintenanceWindow *string           `pulumi:"preferredMaintenanceWindow"`
	PubliclyAccessible         *bool             `pulumi:"publiclyAccessible"`
	RamSize                    *float64          `pulumi:"ramSize"`
	RelationalDatabaseName     *string           `pulumi:"relationalDatabaseName"`
	SecondaryAvailabilityZone  *string           `pulumi:"secondaryAvailabilityZone"`
	SkipFinalSnapshot          *bool             `pulumi:"skipFinalSnapshot"`
	SupportCode                *string           `pulumi:"supportCode"`
	Tags                       map[string]string `pulumi:"tags"`
	TagsAll                    map[string]string `pulumi:"tagsAll"`
}

type DatabaseState struct {
	ApplyImmediately           pulumi.BoolPtrInput
	Arn                        pulumi.StringPtrInput
	AvailabilityZone           pulumi.StringPtrInput
	BackupRetentionEnabled     pulumi.BoolPtrInput
	BlueprintId                pulumi.StringPtrInput
	BundleId                   pulumi.StringPtrInput
	CaCertificateIdentifier    pulumi.StringPtrInput
	CpuCount                   pulumi.IntPtrInput
	CreatedAt                  pulumi.StringPtrInput
	DiskSize                   pulumi.Float64PtrInput
	Engine                     pulumi.StringPtrInput
	EngineVersion              pulumi.StringPtrInput
	FinalSnapshotName          pulumi.StringPtrInput
	MasterDatabaseName         pulumi.StringPtrInput
	MasterEndpointAddress      pulumi.StringPtrInput
	MasterEndpointPort         pulumi.IntPtrInput
	MasterPassword             pulumi.StringPtrInput
	MasterUsername             pulumi.StringPtrInput
	PreferredBackupWindow      pulumi.StringPtrInput
	PreferredMaintenanceWindow pulumi.StringPtrInput
	PubliclyAccessible         pulumi.BoolPtrInput
	RamSize                    pulumi.Float64PtrInput
	RelationalDatabaseName     pulumi.StringPtrInput
	SecondaryAvailabilityZone  pulumi.StringPtrInput
	SkipFinalSnapshot          pulumi.BoolPtrInput
	SupportCode                pulumi.StringPtrInput
	Tags                       pulumi.StringMapInput
	TagsAll                    pulumi.StringMapInput
}

func (DatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseState)(nil)).Elem()
}

type databaseArgs struct {
	ApplyImmediately           *bool             `pulumi:"applyImmediately"`
	AvailabilityZone           *string           `pulumi:"availabilityZone"`
	BackupRetentionEnabled     *bool             `pulumi:"backupRetentionEnabled"`
	BlueprintId                string            `pulumi:"blueprintId"`
	BundleId                   string            `pulumi:"bundleId"`
	FinalSnapshotName          *string           `pulumi:"finalSnapshotName"`
	MasterDatabaseName         string            `pulumi:"masterDatabaseName"`
	MasterPassword             string            `pulumi:"masterPassword"`
	MasterUsername             string            `pulumi:"masterUsername"`
	PreferredBackupWindow      *string           `pulumi:"preferredBackupWindow"`
	PreferredMaintenanceWindow *string           `pulumi:"preferredMaintenanceWindow"`
	PubliclyAccessible         *bool             `pulumi:"publiclyAccessible"`
	RelationalDatabaseName     string            `pulumi:"relationalDatabaseName"`
	SkipFinalSnapshot          *bool             `pulumi:"skipFinalSnapshot"`
	Tags                       map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Database resource.
type DatabaseArgs struct {
	ApplyImmediately           pulumi.BoolPtrInput
	AvailabilityZone           pulumi.StringPtrInput
	BackupRetentionEnabled     pulumi.BoolPtrInput
	BlueprintId                pulumi.StringInput
	BundleId                   pulumi.StringInput
	FinalSnapshotName          pulumi.StringPtrInput
	MasterDatabaseName         pulumi.StringInput
	MasterPassword             pulumi.StringInput
	MasterUsername             pulumi.StringInput
	PreferredBackupWindow      pulumi.StringPtrInput
	PreferredMaintenanceWindow pulumi.StringPtrInput
	PubliclyAccessible         pulumi.BoolPtrInput
	RelationalDatabaseName     pulumi.StringInput
	SkipFinalSnapshot          pulumi.BoolPtrInput
	Tags                       pulumi.StringMapInput
}

func (DatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseArgs)(nil)).Elem()
}

type DatabaseInput interface {
	pulumi.Input

	ToDatabaseOutput() DatabaseOutput
	ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput
}

func (*Database) ElementType() reflect.Type {
	return reflect.TypeOf((**Database)(nil)).Elem()
}

func (i *Database) ToDatabaseOutput() DatabaseOutput {
	return i.ToDatabaseOutputWithContext(context.Background())
}

func (i *Database) ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOutput)
}

// DatabaseArrayInput is an input type that accepts DatabaseArray and DatabaseArrayOutput values.
// You can construct a concrete instance of `DatabaseArrayInput` via:
//
//	DatabaseArray{ DatabaseArgs{...} }
type DatabaseArrayInput interface {
	pulumi.Input

	ToDatabaseArrayOutput() DatabaseArrayOutput
	ToDatabaseArrayOutputWithContext(context.Context) DatabaseArrayOutput
}

type DatabaseArray []DatabaseInput

func (DatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Database)(nil)).Elem()
}

func (i DatabaseArray) ToDatabaseArrayOutput() DatabaseArrayOutput {
	return i.ToDatabaseArrayOutputWithContext(context.Background())
}

func (i DatabaseArray) ToDatabaseArrayOutputWithContext(ctx context.Context) DatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseArrayOutput)
}

// DatabaseMapInput is an input type that accepts DatabaseMap and DatabaseMapOutput values.
// You can construct a concrete instance of `DatabaseMapInput` via:
//
//	DatabaseMap{ "key": DatabaseArgs{...} }
type DatabaseMapInput interface {
	pulumi.Input

	ToDatabaseMapOutput() DatabaseMapOutput
	ToDatabaseMapOutputWithContext(context.Context) DatabaseMapOutput
}

type DatabaseMap map[string]DatabaseInput

func (DatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Database)(nil)).Elem()
}

func (i DatabaseMap) ToDatabaseMapOutput() DatabaseMapOutput {
	return i.ToDatabaseMapOutputWithContext(context.Background())
}

func (i DatabaseMap) ToDatabaseMapOutputWithContext(ctx context.Context) DatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMapOutput)
}

type DatabaseOutput struct{ *pulumi.OutputState }

func (DatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Database)(nil)).Elem()
}

func (o DatabaseOutput) ToDatabaseOutput() DatabaseOutput {
	return o
}

func (o DatabaseOutput) ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput {
	return o
}

func (o DatabaseOutput) ApplyImmediately() pulumi.BoolOutput {
	return o.ApplyT(func(v *Database) pulumi.BoolOutput { return v.ApplyImmediately }).(pulumi.BoolOutput)
}

func (o DatabaseOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o DatabaseOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

func (o DatabaseOutput) BackupRetentionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Database) pulumi.BoolPtrOutput { return v.BackupRetentionEnabled }).(pulumi.BoolPtrOutput)
}

func (o DatabaseOutput) BlueprintId() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.BlueprintId }).(pulumi.StringOutput)
}

func (o DatabaseOutput) BundleId() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.BundleId }).(pulumi.StringOutput)
}

func (o DatabaseOutput) CaCertificateIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.CaCertificateIdentifier }).(pulumi.StringOutput)
}

func (o DatabaseOutput) CpuCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Database) pulumi.IntOutput { return v.CpuCount }).(pulumi.IntOutput)
}

func (o DatabaseOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o DatabaseOutput) DiskSize() pulumi.Float64Output {
	return o.ApplyT(func(v *Database) pulumi.Float64Output { return v.DiskSize }).(pulumi.Float64Output)
}

func (o DatabaseOutput) Engine() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Engine }).(pulumi.StringOutput)
}

func (o DatabaseOutput) EngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.EngineVersion }).(pulumi.StringOutput)
}

func (o DatabaseOutput) FinalSnapshotName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Database) pulumi.StringPtrOutput { return v.FinalSnapshotName }).(pulumi.StringPtrOutput)
}

func (o DatabaseOutput) MasterDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.MasterDatabaseName }).(pulumi.StringOutput)
}

func (o DatabaseOutput) MasterEndpointAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.MasterEndpointAddress }).(pulumi.StringOutput)
}

func (o DatabaseOutput) MasterEndpointPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Database) pulumi.IntOutput { return v.MasterEndpointPort }).(pulumi.IntOutput)
}

func (o DatabaseOutput) MasterPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.MasterPassword }).(pulumi.StringOutput)
}

func (o DatabaseOutput) MasterUsername() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.MasterUsername }).(pulumi.StringOutput)
}

func (o DatabaseOutput) PreferredBackupWindow() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.PreferredBackupWindow }).(pulumi.StringOutput)
}

func (o DatabaseOutput) PreferredMaintenanceWindow() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.PreferredMaintenanceWindow }).(pulumi.StringOutput)
}

func (o DatabaseOutput) PubliclyAccessible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Database) pulumi.BoolPtrOutput { return v.PubliclyAccessible }).(pulumi.BoolPtrOutput)
}

func (o DatabaseOutput) RamSize() pulumi.Float64Output {
	return o.ApplyT(func(v *Database) pulumi.Float64Output { return v.RamSize }).(pulumi.Float64Output)
}

func (o DatabaseOutput) RelationalDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.RelationalDatabaseName }).(pulumi.StringOutput)
}

func (o DatabaseOutput) SecondaryAvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.SecondaryAvailabilityZone }).(pulumi.StringOutput)
}

func (o DatabaseOutput) SkipFinalSnapshot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Database) pulumi.BoolPtrOutput { return v.SkipFinalSnapshot }).(pulumi.BoolPtrOutput)
}

func (o DatabaseOutput) SupportCode() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.SupportCode }).(pulumi.StringOutput)
}

func (o DatabaseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Database) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o DatabaseOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Database) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type DatabaseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Database)(nil)).Elem()
}

func (o DatabaseArrayOutput) ToDatabaseArrayOutput() DatabaseArrayOutput {
	return o
}

func (o DatabaseArrayOutput) ToDatabaseArrayOutputWithContext(ctx context.Context) DatabaseArrayOutput {
	return o
}

func (o DatabaseArrayOutput) Index(i pulumi.IntInput) DatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Database {
		return vs[0].([]*Database)[vs[1].(int)]
	}).(DatabaseOutput)
}

type DatabaseMapOutput struct{ *pulumi.OutputState }

func (DatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Database)(nil)).Elem()
}

func (o DatabaseMapOutput) ToDatabaseMapOutput() DatabaseMapOutput {
	return o
}

func (o DatabaseMapOutput) ToDatabaseMapOutputWithContext(ctx context.Context) DatabaseMapOutput {
	return o
}

func (o DatabaseMapOutput) MapIndex(k pulumi.StringInput) DatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Database {
		return vs[0].(map[string]*Database)[vs[1].(string)]
	}).(DatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseInput)(nil)).Elem(), &Database{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseArrayInput)(nil)).Elem(), DatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseMapInput)(nil)).Elem(), DatabaseMap{})
	pulumi.RegisterOutputType(DatabaseOutput{})
	pulumi.RegisterOutputType(DatabaseArrayOutput{})
	pulumi.RegisterOutputType(DatabaseMapOutput{})
}
