// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lightsail

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Attaches a Lightsail disk to a Lightsail Instance
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/lightsail"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			available, err := aws.GetAvailabilityZones(ctx, &aws.GetAvailabilityZonesArgs{
//				State: pulumi.StringRef("available"),
//				Filters: []aws.GetAvailabilityZonesFilter{
//					{
//						Name: "opt-in-status",
//						Values: []string{
//							"opt-in-not-required",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			test, err := lightsail.NewDisk(ctx, "test", &lightsail.DiskArgs{
//				Name:             pulumi.String("test-disk"),
//				SizeInGb:         pulumi.Int(8),
//				AvailabilityZone: pulumi.String(available.Names[0]),
//			})
//			if err != nil {
//				return err
//			}
//			testInstance, err := lightsail.NewInstance(ctx, "test", &lightsail.InstanceArgs{
//				Name:             pulumi.String("test-instance"),
//				AvailabilityZone: pulumi.String(available.Names[0]),
//				BlueprintId:      pulumi.String("amazon_linux_2"),
//				BundleId:         pulumi.String("nano_3_0"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = lightsail.NewDisk_attachment(ctx, "test", &lightsail.Disk_attachmentArgs{
//				DiskName:     test.Name,
//				InstanceName: testInstance.Name,
//				DiskPath:     pulumi.String("/dev/xvdf"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import `aws_lightsail_disk` using the id attribute. For example:
//
// ```sh
// $ pulumi import aws:lightsail/disk_attachment:Disk_attachment test test-disk,test-instance
// ```
type DiskAttachment struct {
	pulumi.CustomResourceState

	// The name of the Lightsail Disk.
	DiskName pulumi.StringOutput `pulumi:"diskName"`
	// The disk path to expose to the instance.
	DiskPath pulumi.StringOutput `pulumi:"diskPath"`
	// The name of the Lightsail Instance to attach to.
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
}

// NewDiskAttachment registers a new resource with the given unique name, arguments, and options.
func NewDiskAttachment(ctx *pulumi.Context,
	name string, args *DiskAttachmentArgs, opts ...pulumi.ResourceOption) (*DiskAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DiskName == nil {
		return nil, errors.New("invalid value for required argument 'DiskName'")
	}
	if args.DiskPath == nil {
		return nil, errors.New("invalid value for required argument 'DiskPath'")
	}
	if args.InstanceName == nil {
		return nil, errors.New("invalid value for required argument 'InstanceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DiskAttachment
	err := ctx.RegisterResource("aws:lightsail/disk_attachment:Disk_attachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDiskAttachment gets an existing DiskAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDiskAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DiskAttachmentState, opts ...pulumi.ResourceOption) (*DiskAttachment, error) {
	var resource DiskAttachment
	err := ctx.ReadResource("aws:lightsail/disk_attachment:Disk_attachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DiskAttachment resources.
type diskAttachmentState struct {
	// The name of the Lightsail Disk.
	DiskName *string `pulumi:"diskName"`
	// The disk path to expose to the instance.
	DiskPath *string `pulumi:"diskPath"`
	// The name of the Lightsail Instance to attach to.
	InstanceName *string `pulumi:"instanceName"`
}

type DiskAttachmentState struct {
	// The name of the Lightsail Disk.
	DiskName pulumi.StringPtrInput
	// The disk path to expose to the instance.
	DiskPath pulumi.StringPtrInput
	// The name of the Lightsail Instance to attach to.
	InstanceName pulumi.StringPtrInput
}

func (DiskAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*diskAttachmentState)(nil)).Elem()
}

type diskAttachmentArgs struct {
	// The name of the Lightsail Disk.
	DiskName string `pulumi:"diskName"`
	// The disk path to expose to the instance.
	DiskPath string `pulumi:"diskPath"`
	// The name of the Lightsail Instance to attach to.
	InstanceName string `pulumi:"instanceName"`
}

// The set of arguments for constructing a DiskAttachment resource.
type DiskAttachmentArgs struct {
	// The name of the Lightsail Disk.
	DiskName pulumi.StringInput
	// The disk path to expose to the instance.
	DiskPath pulumi.StringInput
	// The name of the Lightsail Instance to attach to.
	InstanceName pulumi.StringInput
}

func (DiskAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*diskAttachmentArgs)(nil)).Elem()
}

type DiskAttachmentInput interface {
	pulumi.Input

	ToDiskAttachmentOutput() DiskAttachmentOutput
	ToDiskAttachmentOutputWithContext(ctx context.Context) DiskAttachmentOutput
}

func (*DiskAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskAttachment)(nil)).Elem()
}

func (i *DiskAttachment) ToDiskAttachmentOutput() DiskAttachmentOutput {
	return i.ToDiskAttachmentOutputWithContext(context.Background())
}

func (i *DiskAttachment) ToDiskAttachmentOutputWithContext(ctx context.Context) DiskAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskAttachmentOutput)
}

// DiskAttachmentArrayInput is an input type that accepts DiskAttachmentArray and DiskAttachmentArrayOutput values.
// You can construct a concrete instance of `DiskAttachmentArrayInput` via:
//
//	DiskAttachmentArray{ DiskAttachmentArgs{...} }
type DiskAttachmentArrayInput interface {
	pulumi.Input

	ToDiskAttachmentArrayOutput() DiskAttachmentArrayOutput
	ToDiskAttachmentArrayOutputWithContext(context.Context) DiskAttachmentArrayOutput
}

type DiskAttachmentArray []DiskAttachmentInput

func (DiskAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DiskAttachment)(nil)).Elem()
}

func (i DiskAttachmentArray) ToDiskAttachmentArrayOutput() DiskAttachmentArrayOutput {
	return i.ToDiskAttachmentArrayOutputWithContext(context.Background())
}

func (i DiskAttachmentArray) ToDiskAttachmentArrayOutputWithContext(ctx context.Context) DiskAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskAttachmentArrayOutput)
}

// DiskAttachmentMapInput is an input type that accepts DiskAttachmentMap and DiskAttachmentMapOutput values.
// You can construct a concrete instance of `DiskAttachmentMapInput` via:
//
//	DiskAttachmentMap{ "key": DiskAttachmentArgs{...} }
type DiskAttachmentMapInput interface {
	pulumi.Input

	ToDiskAttachmentMapOutput() DiskAttachmentMapOutput
	ToDiskAttachmentMapOutputWithContext(context.Context) DiskAttachmentMapOutput
}

type DiskAttachmentMap map[string]DiskAttachmentInput

func (DiskAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DiskAttachment)(nil)).Elem()
}

func (i DiskAttachmentMap) ToDiskAttachmentMapOutput() DiskAttachmentMapOutput {
	return i.ToDiskAttachmentMapOutputWithContext(context.Background())
}

func (i DiskAttachmentMap) ToDiskAttachmentMapOutputWithContext(ctx context.Context) DiskAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskAttachmentMapOutput)
}

type DiskAttachmentOutput struct{ *pulumi.OutputState }

func (DiskAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskAttachment)(nil)).Elem()
}

func (o DiskAttachmentOutput) ToDiskAttachmentOutput() DiskAttachmentOutput {
	return o
}

func (o DiskAttachmentOutput) ToDiskAttachmentOutputWithContext(ctx context.Context) DiskAttachmentOutput {
	return o
}

// The name of the Lightsail Disk.
func (o DiskAttachmentOutput) DiskName() pulumi.StringOutput {
	return o.ApplyT(func(v *DiskAttachment) pulumi.StringOutput { return v.DiskName }).(pulumi.StringOutput)
}

// The disk path to expose to the instance.
func (o DiskAttachmentOutput) DiskPath() pulumi.StringOutput {
	return o.ApplyT(func(v *DiskAttachment) pulumi.StringOutput { return v.DiskPath }).(pulumi.StringOutput)
}

// The name of the Lightsail Instance to attach to.
func (o DiskAttachmentOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *DiskAttachment) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

type DiskAttachmentArrayOutput struct{ *pulumi.OutputState }

func (DiskAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DiskAttachment)(nil)).Elem()
}

func (o DiskAttachmentArrayOutput) ToDiskAttachmentArrayOutput() DiskAttachmentArrayOutput {
	return o
}

func (o DiskAttachmentArrayOutput) ToDiskAttachmentArrayOutputWithContext(ctx context.Context) DiskAttachmentArrayOutput {
	return o
}

func (o DiskAttachmentArrayOutput) Index(i pulumi.IntInput) DiskAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DiskAttachment {
		return vs[0].([]*DiskAttachment)[vs[1].(int)]
	}).(DiskAttachmentOutput)
}

type DiskAttachmentMapOutput struct{ *pulumi.OutputState }

func (DiskAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DiskAttachment)(nil)).Elem()
}

func (o DiskAttachmentMapOutput) ToDiskAttachmentMapOutput() DiskAttachmentMapOutput {
	return o
}

func (o DiskAttachmentMapOutput) ToDiskAttachmentMapOutputWithContext(ctx context.Context) DiskAttachmentMapOutput {
	return o
}

func (o DiskAttachmentMapOutput) MapIndex(k pulumi.StringInput) DiskAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DiskAttachment {
		return vs[0].(map[string]*DiskAttachment)[vs[1].(string)]
	}).(DiskAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DiskAttachmentInput)(nil)).Elem(), &DiskAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiskAttachmentArrayInput)(nil)).Elem(), DiskAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiskAttachmentMapInput)(nil)).Elem(), DiskAttachmentMap{})
	pulumi.RegisterOutputType(DiskAttachmentOutput{})
	pulumi.RegisterOutputType(DiskAttachmentArrayOutput{})
	pulumi.RegisterOutputType(DiskAttachmentMapOutput{})
}
