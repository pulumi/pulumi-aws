// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lightsail

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Lb struct {
	pulumi.CustomResourceState

	Arn             pulumi.StringOutput    `pulumi:"arn"`
	CreatedAt       pulumi.StringOutput    `pulumi:"createdAt"`
	DnsName         pulumi.StringOutput    `pulumi:"dnsName"`
	HealthCheckPath pulumi.StringPtrOutput `pulumi:"healthCheckPath"`
	InstancePort    pulumi.IntOutput       `pulumi:"instancePort"`
	IpAddressType   pulumi.StringPtrOutput `pulumi:"ipAddressType"`
	Name            pulumi.StringOutput    `pulumi:"name"`
	Protocol        pulumi.StringOutput    `pulumi:"protocol"`
	PublicPorts     pulumi.IntArrayOutput  `pulumi:"publicPorts"`
	SupportCode     pulumi.StringOutput    `pulumi:"supportCode"`
	Tags            pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll         pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewLb registers a new resource with the given unique name, arguments, and options.
func NewLb(ctx *pulumi.Context,
	name string, args *LbArgs, opts ...pulumi.ResourceOption) (*Lb, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstancePort == nil {
		return nil, errors.New("invalid value for required argument 'InstancePort'")
	}
	var resource Lb
	err := ctx.RegisterResource("aws:lightsail/lb:Lb", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLb gets an existing Lb resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLb(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LbState, opts ...pulumi.ResourceOption) (*Lb, error) {
	var resource Lb
	err := ctx.ReadResource("aws:lightsail/lb:Lb", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Lb resources.
type lbState struct {
	Arn             *string           `pulumi:"arn"`
	CreatedAt       *string           `pulumi:"createdAt"`
	DnsName         *string           `pulumi:"dnsName"`
	HealthCheckPath *string           `pulumi:"healthCheckPath"`
	InstancePort    *int              `pulumi:"instancePort"`
	IpAddressType   *string           `pulumi:"ipAddressType"`
	Name            *string           `pulumi:"name"`
	Protocol        *string           `pulumi:"protocol"`
	PublicPorts     []int             `pulumi:"publicPorts"`
	SupportCode     *string           `pulumi:"supportCode"`
	Tags            map[string]string `pulumi:"tags"`
	TagsAll         map[string]string `pulumi:"tagsAll"`
}

type LbState struct {
	Arn             pulumi.StringPtrInput
	CreatedAt       pulumi.StringPtrInput
	DnsName         pulumi.StringPtrInput
	HealthCheckPath pulumi.StringPtrInput
	InstancePort    pulumi.IntPtrInput
	IpAddressType   pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	Protocol        pulumi.StringPtrInput
	PublicPorts     pulumi.IntArrayInput
	SupportCode     pulumi.StringPtrInput
	Tags            pulumi.StringMapInput
	TagsAll         pulumi.StringMapInput
}

func (LbState) ElementType() reflect.Type {
	return reflect.TypeOf((*lbState)(nil)).Elem()
}

type lbArgs struct {
	HealthCheckPath *string           `pulumi:"healthCheckPath"`
	InstancePort    int               `pulumi:"instancePort"`
	IpAddressType   *string           `pulumi:"ipAddressType"`
	Name            *string           `pulumi:"name"`
	Tags            map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Lb resource.
type LbArgs struct {
	HealthCheckPath pulumi.StringPtrInput
	InstancePort    pulumi.IntInput
	IpAddressType   pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	Tags            pulumi.StringMapInput
}

func (LbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lbArgs)(nil)).Elem()
}

type LbInput interface {
	pulumi.Input

	ToLbOutput() LbOutput
	ToLbOutputWithContext(ctx context.Context) LbOutput
}

func (*Lb) ElementType() reflect.Type {
	return reflect.TypeOf((**Lb)(nil)).Elem()
}

func (i *Lb) ToLbOutput() LbOutput {
	return i.ToLbOutputWithContext(context.Background())
}

func (i *Lb) ToLbOutputWithContext(ctx context.Context) LbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbOutput)
}

// LbArrayInput is an input type that accepts LbArray and LbArrayOutput values.
// You can construct a concrete instance of `LbArrayInput` via:
//
//	LbArray{ LbArgs{...} }
type LbArrayInput interface {
	pulumi.Input

	ToLbArrayOutput() LbArrayOutput
	ToLbArrayOutputWithContext(context.Context) LbArrayOutput
}

type LbArray []LbInput

func (LbArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Lb)(nil)).Elem()
}

func (i LbArray) ToLbArrayOutput() LbArrayOutput {
	return i.ToLbArrayOutputWithContext(context.Background())
}

func (i LbArray) ToLbArrayOutputWithContext(ctx context.Context) LbArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbArrayOutput)
}

// LbMapInput is an input type that accepts LbMap and LbMapOutput values.
// You can construct a concrete instance of `LbMapInput` via:
//
//	LbMap{ "key": LbArgs{...} }
type LbMapInput interface {
	pulumi.Input

	ToLbMapOutput() LbMapOutput
	ToLbMapOutputWithContext(context.Context) LbMapOutput
}

type LbMap map[string]LbInput

func (LbMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Lb)(nil)).Elem()
}

func (i LbMap) ToLbMapOutput() LbMapOutput {
	return i.ToLbMapOutputWithContext(context.Background())
}

func (i LbMap) ToLbMapOutputWithContext(ctx context.Context) LbMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbMapOutput)
}

type LbOutput struct{ *pulumi.OutputState }

func (LbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Lb)(nil)).Elem()
}

func (o LbOutput) ToLbOutput() LbOutput {
	return o
}

func (o LbOutput) ToLbOutputWithContext(ctx context.Context) LbOutput {
	return o
}

func (o LbOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Lb) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o LbOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Lb) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o LbOutput) DnsName() pulumi.StringOutput {
	return o.ApplyT(func(v *Lb) pulumi.StringOutput { return v.DnsName }).(pulumi.StringOutput)
}

func (o LbOutput) HealthCheckPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Lb) pulumi.StringPtrOutput { return v.HealthCheckPath }).(pulumi.StringPtrOutput)
}

func (o LbOutput) InstancePort() pulumi.IntOutput {
	return o.ApplyT(func(v *Lb) pulumi.IntOutput { return v.InstancePort }).(pulumi.IntOutput)
}

func (o LbOutput) IpAddressType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Lb) pulumi.StringPtrOutput { return v.IpAddressType }).(pulumi.StringPtrOutput)
}

func (o LbOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Lb) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o LbOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *Lb) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

func (o LbOutput) PublicPorts() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Lb) pulumi.IntArrayOutput { return v.PublicPorts }).(pulumi.IntArrayOutput)
}

func (o LbOutput) SupportCode() pulumi.StringOutput {
	return o.ApplyT(func(v *Lb) pulumi.StringOutput { return v.SupportCode }).(pulumi.StringOutput)
}

func (o LbOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Lb) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o LbOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Lb) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type LbArrayOutput struct{ *pulumi.OutputState }

func (LbArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Lb)(nil)).Elem()
}

func (o LbArrayOutput) ToLbArrayOutput() LbArrayOutput {
	return o
}

func (o LbArrayOutput) ToLbArrayOutputWithContext(ctx context.Context) LbArrayOutput {
	return o
}

func (o LbArrayOutput) Index(i pulumi.IntInput) LbOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Lb {
		return vs[0].([]*Lb)[vs[1].(int)]
	}).(LbOutput)
}

type LbMapOutput struct{ *pulumi.OutputState }

func (LbMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Lb)(nil)).Elem()
}

func (o LbMapOutput) ToLbMapOutput() LbMapOutput {
	return o
}

func (o LbMapOutput) ToLbMapOutputWithContext(ctx context.Context) LbMapOutput {
	return o
}

func (o LbMapOutput) MapIndex(k pulumi.StringInput) LbOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Lb {
		return vs[0].(map[string]*Lb)[vs[1].(string)]
	}).(LbOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LbInput)(nil)).Elem(), &Lb{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbArrayInput)(nil)).Elem(), LbArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbMapInput)(nil)).Elem(), LbMap{})
	pulumi.RegisterOutputType(LbOutput{})
	pulumi.RegisterOutputType(LbArrayOutput{})
	pulumi.RegisterOutputType(LbMapOutput{})
}
