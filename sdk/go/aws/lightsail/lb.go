// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lightsail

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a Lightsail load balancer resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/lightsail"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := lightsail.NewLb(ctx, "test", &lightsail.LbArgs{
//				HealthCheckPath: pulumi.String("/"),
//				InstancePort:    pulumi.Int(80),
//				Tags: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import `aws_lightsail_lb` using the name attribute. For example:
//
// ```sh
//
//	$ pulumi import aws:lightsail/lb:Lb test example-load-balancer
//
// ```
type Lb struct {
	pulumi.CustomResourceState

	// The ARN of the Lightsail load balancer.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The timestamp when the load balancer was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The DNS name of the load balancer.
	DnsName pulumi.StringOutput `pulumi:"dnsName"`
	// The health check path of the load balancer. Default value "/".
	HealthCheckPath pulumi.StringPtrOutput `pulumi:"healthCheckPath"`
	// The instance port the load balancer will connect.
	InstancePort  pulumi.IntOutput       `pulumi:"instancePort"`
	IpAddressType pulumi.StringPtrOutput `pulumi:"ipAddressType"`
	// The name of the Lightsail load balancer.
	Name pulumi.StringOutput `pulumi:"name"`
	// The protocol of the load balancer.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// The public ports of the load balancer.
	PublicPorts pulumi.IntArrayOutput `pulumi:"publicPorts"`
	// The support code for the database. Include this code in your email to support when you have questions about a database in Lightsail. This code enables our support team to look up your Lightsail information more easily.
	SupportCode pulumi.StringOutput `pulumi:"supportCode"`
	// A map of tags to assign to the resource. To create a key-only tag, use an empty string as the value. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewLb registers a new resource with the given unique name, arguments, and options.
func NewLb(ctx *pulumi.Context,
	name string, args *LbArgs, opts ...pulumi.ResourceOption) (*Lb, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstancePort == nil {
		return nil, errors.New("invalid value for required argument 'InstancePort'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"tagsAll",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Lb
	err := ctx.RegisterResource("aws:lightsail/lb:Lb", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLb gets an existing Lb resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLb(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LbState, opts ...pulumi.ResourceOption) (*Lb, error) {
	var resource Lb
	err := ctx.ReadResource("aws:lightsail/lb:Lb", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Lb resources.
type lbState struct {
	// The ARN of the Lightsail load balancer.
	Arn *string `pulumi:"arn"`
	// The timestamp when the load balancer was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The DNS name of the load balancer.
	DnsName *string `pulumi:"dnsName"`
	// The health check path of the load balancer. Default value "/".
	HealthCheckPath *string `pulumi:"healthCheckPath"`
	// The instance port the load balancer will connect.
	InstancePort  *int    `pulumi:"instancePort"`
	IpAddressType *string `pulumi:"ipAddressType"`
	// The name of the Lightsail load balancer.
	Name *string `pulumi:"name"`
	// The protocol of the load balancer.
	Protocol *string `pulumi:"protocol"`
	// The public ports of the load balancer.
	PublicPorts []int `pulumi:"publicPorts"`
	// The support code for the database. Include this code in your email to support when you have questions about a database in Lightsail. This code enables our support team to look up your Lightsail information more easily.
	SupportCode *string `pulumi:"supportCode"`
	// A map of tags to assign to the resource. To create a key-only tag, use an empty string as the value. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type LbState struct {
	// The ARN of the Lightsail load balancer.
	Arn pulumi.StringPtrInput
	// The timestamp when the load balancer was created.
	CreatedAt pulumi.StringPtrInput
	// The DNS name of the load balancer.
	DnsName pulumi.StringPtrInput
	// The health check path of the load balancer. Default value "/".
	HealthCheckPath pulumi.StringPtrInput
	// The instance port the load balancer will connect.
	InstancePort  pulumi.IntPtrInput
	IpAddressType pulumi.StringPtrInput
	// The name of the Lightsail load balancer.
	Name pulumi.StringPtrInput
	// The protocol of the load balancer.
	Protocol pulumi.StringPtrInput
	// The public ports of the load balancer.
	PublicPorts pulumi.IntArrayInput
	// The support code for the database. Include this code in your email to support when you have questions about a database in Lightsail. This code enables our support team to look up your Lightsail information more easily.
	SupportCode pulumi.StringPtrInput
	// A map of tags to assign to the resource. To create a key-only tag, use an empty string as the value. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
}

func (LbState) ElementType() reflect.Type {
	return reflect.TypeOf((*lbState)(nil)).Elem()
}

type lbArgs struct {
	// The health check path of the load balancer. Default value "/".
	HealthCheckPath *string `pulumi:"healthCheckPath"`
	// The instance port the load balancer will connect.
	InstancePort  int     `pulumi:"instancePort"`
	IpAddressType *string `pulumi:"ipAddressType"`
	// The name of the Lightsail load balancer.
	Name *string `pulumi:"name"`
	// A map of tags to assign to the resource. To create a key-only tag, use an empty string as the value. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Lb resource.
type LbArgs struct {
	// The health check path of the load balancer. Default value "/".
	HealthCheckPath pulumi.StringPtrInput
	// The instance port the load balancer will connect.
	InstancePort  pulumi.IntInput
	IpAddressType pulumi.StringPtrInput
	// The name of the Lightsail load balancer.
	Name pulumi.StringPtrInput
	// A map of tags to assign to the resource. To create a key-only tag, use an empty string as the value. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
}

func (LbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lbArgs)(nil)).Elem()
}

type LbInput interface {
	pulumi.Input

	ToLbOutput() LbOutput
	ToLbOutputWithContext(ctx context.Context) LbOutput
}

func (*Lb) ElementType() reflect.Type {
	return reflect.TypeOf((**Lb)(nil)).Elem()
}

func (i *Lb) ToLbOutput() LbOutput {
	return i.ToLbOutputWithContext(context.Background())
}

func (i *Lb) ToLbOutputWithContext(ctx context.Context) LbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbOutput)
}

// LbArrayInput is an input type that accepts LbArray and LbArrayOutput values.
// You can construct a concrete instance of `LbArrayInput` via:
//
//	LbArray{ LbArgs{...} }
type LbArrayInput interface {
	pulumi.Input

	ToLbArrayOutput() LbArrayOutput
	ToLbArrayOutputWithContext(context.Context) LbArrayOutput
}

type LbArray []LbInput

func (LbArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Lb)(nil)).Elem()
}

func (i LbArray) ToLbArrayOutput() LbArrayOutput {
	return i.ToLbArrayOutputWithContext(context.Background())
}

func (i LbArray) ToLbArrayOutputWithContext(ctx context.Context) LbArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbArrayOutput)
}

// LbMapInput is an input type that accepts LbMap and LbMapOutput values.
// You can construct a concrete instance of `LbMapInput` via:
//
//	LbMap{ "key": LbArgs{...} }
type LbMapInput interface {
	pulumi.Input

	ToLbMapOutput() LbMapOutput
	ToLbMapOutputWithContext(context.Context) LbMapOutput
}

type LbMap map[string]LbInput

func (LbMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Lb)(nil)).Elem()
}

func (i LbMap) ToLbMapOutput() LbMapOutput {
	return i.ToLbMapOutputWithContext(context.Background())
}

func (i LbMap) ToLbMapOutputWithContext(ctx context.Context) LbMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbMapOutput)
}

type LbOutput struct{ *pulumi.OutputState }

func (LbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Lb)(nil)).Elem()
}

func (o LbOutput) ToLbOutput() LbOutput {
	return o
}

func (o LbOutput) ToLbOutputWithContext(ctx context.Context) LbOutput {
	return o
}

// The ARN of the Lightsail load balancer.
func (o LbOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Lb) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The timestamp when the load balancer was created.
func (o LbOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Lb) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The DNS name of the load balancer.
func (o LbOutput) DnsName() pulumi.StringOutput {
	return o.ApplyT(func(v *Lb) pulumi.StringOutput { return v.DnsName }).(pulumi.StringOutput)
}

// The health check path of the load balancer. Default value "/".
func (o LbOutput) HealthCheckPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Lb) pulumi.StringPtrOutput { return v.HealthCheckPath }).(pulumi.StringPtrOutput)
}

// The instance port the load balancer will connect.
func (o LbOutput) InstancePort() pulumi.IntOutput {
	return o.ApplyT(func(v *Lb) pulumi.IntOutput { return v.InstancePort }).(pulumi.IntOutput)
}

func (o LbOutput) IpAddressType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Lb) pulumi.StringPtrOutput { return v.IpAddressType }).(pulumi.StringPtrOutput)
}

// The name of the Lightsail load balancer.
func (o LbOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Lb) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The protocol of the load balancer.
func (o LbOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *Lb) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// The public ports of the load balancer.
func (o LbOutput) PublicPorts() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Lb) pulumi.IntArrayOutput { return v.PublicPorts }).(pulumi.IntArrayOutput)
}

// The support code for the database. Include this code in your email to support when you have questions about a database in Lightsail. This code enables our support team to look up your Lightsail information more easily.
func (o LbOutput) SupportCode() pulumi.StringOutput {
	return o.ApplyT(func(v *Lb) pulumi.StringOutput { return v.SupportCode }).(pulumi.StringOutput)
}

// A map of tags to assign to the resource. To create a key-only tag, use an empty string as the value. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o LbOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Lb) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o LbOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Lb) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type LbArrayOutput struct{ *pulumi.OutputState }

func (LbArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Lb)(nil)).Elem()
}

func (o LbArrayOutput) ToLbArrayOutput() LbArrayOutput {
	return o
}

func (o LbArrayOutput) ToLbArrayOutputWithContext(ctx context.Context) LbArrayOutput {
	return o
}

func (o LbArrayOutput) Index(i pulumi.IntInput) LbOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Lb {
		return vs[0].([]*Lb)[vs[1].(int)]
	}).(LbOutput)
}

type LbMapOutput struct{ *pulumi.OutputState }

func (LbMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Lb)(nil)).Elem()
}

func (o LbMapOutput) ToLbMapOutput() LbMapOutput {
	return o
}

func (o LbMapOutput) ToLbMapOutputWithContext(ctx context.Context) LbMapOutput {
	return o
}

func (o LbMapOutput) MapIndex(k pulumi.StringInput) LbOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Lb {
		return vs[0].(map[string]*Lb)[vs[1].(string)]
	}).(LbOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LbInput)(nil)).Elem(), &Lb{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbArrayInput)(nil)).Elem(), LbArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbMapInput)(nil)).Elem(), LbMap{})
	pulumi.RegisterOutputType(LbOutput{})
	pulumi.RegisterOutputType(LbArrayOutput{})
	pulumi.RegisterOutputType(LbMapOutput{})
}
