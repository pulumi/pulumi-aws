// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lightsail

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configures Session Stickiness for a Lightsail Load Balancer.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/lightsail"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testLb, err := lightsail.NewLb(ctx, "testLb", &lightsail.LbArgs{
//				HealthCheckPath: pulumi.String("/"),
//				InstancePort:    pulumi.Int(80),
//				Tags: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = lightsail.NewLbStickinessPolicy(ctx, "testLbStickinessPolicy", &lightsail.LbStickinessPolicyArgs{
//				LbName:         testLb.Name,
//				CookieDuration: pulumi.Int(900),
//				Enabled:        pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// terraform import {
//
//	to = aws_lightsail_lb_stickiness_policy.test
//
//	id = "example-load-balancer" } Using `pulumi import`, import `aws_lightsail_lb_stickiness_policy` using the `lb_name` attribute. For exampleconsole % pulumi import aws_lightsail_lb_stickiness_policy.test example-load-balancer
type LbStickinessPolicy struct {
	pulumi.CustomResourceState

	// The cookie duration in seconds. This determines the length of the session stickiness.
	CookieDuration pulumi.IntOutput `pulumi:"cookieDuration"`
	// The Session Stickiness state of the load balancer. `true` to activate session stickiness or `false` to deactivate session stickiness.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The name of the load balancer to which you want to enable session stickiness.
	LbName pulumi.StringOutput `pulumi:"lbName"`
}

// NewLbStickinessPolicy registers a new resource with the given unique name, arguments, and options.
func NewLbStickinessPolicy(ctx *pulumi.Context,
	name string, args *LbStickinessPolicyArgs, opts ...pulumi.ResourceOption) (*LbStickinessPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CookieDuration == nil {
		return nil, errors.New("invalid value for required argument 'CookieDuration'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.LbName == nil {
		return nil, errors.New("invalid value for required argument 'LbName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LbStickinessPolicy
	err := ctx.RegisterResource("aws:lightsail/lbStickinessPolicy:LbStickinessPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLbStickinessPolicy gets an existing LbStickinessPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLbStickinessPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LbStickinessPolicyState, opts ...pulumi.ResourceOption) (*LbStickinessPolicy, error) {
	var resource LbStickinessPolicy
	err := ctx.ReadResource("aws:lightsail/lbStickinessPolicy:LbStickinessPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LbStickinessPolicy resources.
type lbStickinessPolicyState struct {
	// The cookie duration in seconds. This determines the length of the session stickiness.
	CookieDuration *int `pulumi:"cookieDuration"`
	// The Session Stickiness state of the load balancer. `true` to activate session stickiness or `false` to deactivate session stickiness.
	Enabled *bool `pulumi:"enabled"`
	// The name of the load balancer to which you want to enable session stickiness.
	LbName *string `pulumi:"lbName"`
}

type LbStickinessPolicyState struct {
	// The cookie duration in seconds. This determines the length of the session stickiness.
	CookieDuration pulumi.IntPtrInput
	// The Session Stickiness state of the load balancer. `true` to activate session stickiness or `false` to deactivate session stickiness.
	Enabled pulumi.BoolPtrInput
	// The name of the load balancer to which you want to enable session stickiness.
	LbName pulumi.StringPtrInput
}

func (LbStickinessPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*lbStickinessPolicyState)(nil)).Elem()
}

type lbStickinessPolicyArgs struct {
	// The cookie duration in seconds. This determines the length of the session stickiness.
	CookieDuration int `pulumi:"cookieDuration"`
	// The Session Stickiness state of the load balancer. `true` to activate session stickiness or `false` to deactivate session stickiness.
	Enabled bool `pulumi:"enabled"`
	// The name of the load balancer to which you want to enable session stickiness.
	LbName string `pulumi:"lbName"`
}

// The set of arguments for constructing a LbStickinessPolicy resource.
type LbStickinessPolicyArgs struct {
	// The cookie duration in seconds. This determines the length of the session stickiness.
	CookieDuration pulumi.IntInput
	// The Session Stickiness state of the load balancer. `true` to activate session stickiness or `false` to deactivate session stickiness.
	Enabled pulumi.BoolInput
	// The name of the load balancer to which you want to enable session stickiness.
	LbName pulumi.StringInput
}

func (LbStickinessPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lbStickinessPolicyArgs)(nil)).Elem()
}

type LbStickinessPolicyInput interface {
	pulumi.Input

	ToLbStickinessPolicyOutput() LbStickinessPolicyOutput
	ToLbStickinessPolicyOutputWithContext(ctx context.Context) LbStickinessPolicyOutput
}

func (*LbStickinessPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**LbStickinessPolicy)(nil)).Elem()
}

func (i *LbStickinessPolicy) ToLbStickinessPolicyOutput() LbStickinessPolicyOutput {
	return i.ToLbStickinessPolicyOutputWithContext(context.Background())
}

func (i *LbStickinessPolicy) ToLbStickinessPolicyOutputWithContext(ctx context.Context) LbStickinessPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbStickinessPolicyOutput)
}

// LbStickinessPolicyArrayInput is an input type that accepts LbStickinessPolicyArray and LbStickinessPolicyArrayOutput values.
// You can construct a concrete instance of `LbStickinessPolicyArrayInput` via:
//
//	LbStickinessPolicyArray{ LbStickinessPolicyArgs{...} }
type LbStickinessPolicyArrayInput interface {
	pulumi.Input

	ToLbStickinessPolicyArrayOutput() LbStickinessPolicyArrayOutput
	ToLbStickinessPolicyArrayOutputWithContext(context.Context) LbStickinessPolicyArrayOutput
}

type LbStickinessPolicyArray []LbStickinessPolicyInput

func (LbStickinessPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LbStickinessPolicy)(nil)).Elem()
}

func (i LbStickinessPolicyArray) ToLbStickinessPolicyArrayOutput() LbStickinessPolicyArrayOutput {
	return i.ToLbStickinessPolicyArrayOutputWithContext(context.Background())
}

func (i LbStickinessPolicyArray) ToLbStickinessPolicyArrayOutputWithContext(ctx context.Context) LbStickinessPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbStickinessPolicyArrayOutput)
}

// LbStickinessPolicyMapInput is an input type that accepts LbStickinessPolicyMap and LbStickinessPolicyMapOutput values.
// You can construct a concrete instance of `LbStickinessPolicyMapInput` via:
//
//	LbStickinessPolicyMap{ "key": LbStickinessPolicyArgs{...} }
type LbStickinessPolicyMapInput interface {
	pulumi.Input

	ToLbStickinessPolicyMapOutput() LbStickinessPolicyMapOutput
	ToLbStickinessPolicyMapOutputWithContext(context.Context) LbStickinessPolicyMapOutput
}

type LbStickinessPolicyMap map[string]LbStickinessPolicyInput

func (LbStickinessPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LbStickinessPolicy)(nil)).Elem()
}

func (i LbStickinessPolicyMap) ToLbStickinessPolicyMapOutput() LbStickinessPolicyMapOutput {
	return i.ToLbStickinessPolicyMapOutputWithContext(context.Background())
}

func (i LbStickinessPolicyMap) ToLbStickinessPolicyMapOutputWithContext(ctx context.Context) LbStickinessPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbStickinessPolicyMapOutput)
}

type LbStickinessPolicyOutput struct{ *pulumi.OutputState }

func (LbStickinessPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LbStickinessPolicy)(nil)).Elem()
}

func (o LbStickinessPolicyOutput) ToLbStickinessPolicyOutput() LbStickinessPolicyOutput {
	return o
}

func (o LbStickinessPolicyOutput) ToLbStickinessPolicyOutputWithContext(ctx context.Context) LbStickinessPolicyOutput {
	return o
}

// The cookie duration in seconds. This determines the length of the session stickiness.
func (o LbStickinessPolicyOutput) CookieDuration() pulumi.IntOutput {
	return o.ApplyT(func(v *LbStickinessPolicy) pulumi.IntOutput { return v.CookieDuration }).(pulumi.IntOutput)
}

// The Session Stickiness state of the load balancer. `true` to activate session stickiness or `false` to deactivate session stickiness.
func (o LbStickinessPolicyOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *LbStickinessPolicy) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The name of the load balancer to which you want to enable session stickiness.
func (o LbStickinessPolicyOutput) LbName() pulumi.StringOutput {
	return o.ApplyT(func(v *LbStickinessPolicy) pulumi.StringOutput { return v.LbName }).(pulumi.StringOutput)
}

type LbStickinessPolicyArrayOutput struct{ *pulumi.OutputState }

func (LbStickinessPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LbStickinessPolicy)(nil)).Elem()
}

func (o LbStickinessPolicyArrayOutput) ToLbStickinessPolicyArrayOutput() LbStickinessPolicyArrayOutput {
	return o
}

func (o LbStickinessPolicyArrayOutput) ToLbStickinessPolicyArrayOutputWithContext(ctx context.Context) LbStickinessPolicyArrayOutput {
	return o
}

func (o LbStickinessPolicyArrayOutput) Index(i pulumi.IntInput) LbStickinessPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LbStickinessPolicy {
		return vs[0].([]*LbStickinessPolicy)[vs[1].(int)]
	}).(LbStickinessPolicyOutput)
}

type LbStickinessPolicyMapOutput struct{ *pulumi.OutputState }

func (LbStickinessPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LbStickinessPolicy)(nil)).Elem()
}

func (o LbStickinessPolicyMapOutput) ToLbStickinessPolicyMapOutput() LbStickinessPolicyMapOutput {
	return o
}

func (o LbStickinessPolicyMapOutput) ToLbStickinessPolicyMapOutputWithContext(ctx context.Context) LbStickinessPolicyMapOutput {
	return o
}

func (o LbStickinessPolicyMapOutput) MapIndex(k pulumi.StringInput) LbStickinessPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LbStickinessPolicy {
		return vs[0].(map[string]*LbStickinessPolicy)[vs[1].(string)]
	}).(LbStickinessPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LbStickinessPolicyInput)(nil)).Elem(), &LbStickinessPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbStickinessPolicyArrayInput)(nil)).Elem(), LbStickinessPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbStickinessPolicyMapInput)(nil)).Elem(), LbStickinessPolicyMap{})
	pulumi.RegisterOutputType(LbStickinessPolicyOutput{})
	pulumi.RegisterOutputType(LbStickinessPolicyArrayOutput{})
	pulumi.RegisterOutputType(LbStickinessPolicyMapOutput{})
}
