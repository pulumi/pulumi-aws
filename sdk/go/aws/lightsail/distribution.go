// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lightsail

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS Lightsail Distribution.
//
// ## Example Usage
// ### Basic Usage
//
// Below is a basic example with a bucket as an origin.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/lightsail"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testBucket, err := lightsail.NewBucket(ctx, "testBucket", &lightsail.BucketArgs{
//				BundleId: pulumi.String("small_1_0"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = lightsail.NewDistribution(ctx, "testDistribution", &lightsail.DistributionArgs{
//				BundleId: pulumi.String("small_1_0"),
//				Origin: &lightsail.DistributionOriginArgs{
//					Name:       testBucket.Name,
//					RegionName: testBucket.Region,
//				},
//				DefaultCacheBehavior: &lightsail.DistributionDefaultCacheBehaviorArgs{
//					Behavior: pulumi.String("cache"),
//				},
//				CacheBehaviorSettings: &lightsail.DistributionCacheBehaviorSettingsArgs{
//					AllowedHttpMethods: pulumi.String("GET,HEAD,OPTIONS,PUT,PATCH,POST,DELETE"),
//					CachedHttpMethods:  pulumi.String("GET,HEAD"),
//					DefaultTtl:         pulumi.Int(86400),
//					MaximumTtl:         pulumi.Int(31536000),
//					MinimumTtl:         pulumi.Int(0),
//					ForwardedCookies: &lightsail.DistributionCacheBehaviorSettingsForwardedCookiesArgs{
//						Option: pulumi.String("none"),
//					},
//					ForwardedHeaders: &lightsail.DistributionCacheBehaviorSettingsForwardedHeadersArgs{
//						Option: pulumi.String("default"),
//					},
//					ForwardedQueryStrings: &lightsail.DistributionCacheBehaviorSettingsForwardedQueryStringsArgs{
//						Option: pulumi.Bool(false),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### instance origin example
//
// Below is an example of an instance as the origin.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws"
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/lightsail"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			available, err := aws.GetAvailabilityZones(ctx, &aws.GetAvailabilityZonesArgs{
//				State: pulumi.StringRef("available"),
//				Filters: []aws.GetAvailabilityZonesFilter{
//					{
//						Name: "opt-in-status",
//						Values: []string{
//							"opt-in-not-required",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			testStaticIp, err := lightsail.NewStaticIp(ctx, "testStaticIp", nil)
//			if err != nil {
//				return err
//			}
//			testInstance, err := lightsail.NewInstance(ctx, "testInstance", &lightsail.InstanceArgs{
//				AvailabilityZone: *pulumi.String(available.Names[0]),
//				BlueprintId:      pulumi.String("amazon_linux_2"),
//				BundleId:         pulumi.String("micro_1_0"),
//			})
//			if err != nil {
//				return err
//			}
//			testStaticIpAttachment, err := lightsail.NewStaticIpAttachment(ctx, "testStaticIpAttachment", &lightsail.StaticIpAttachmentArgs{
//				StaticIpName: testStaticIp.Name,
//				InstanceName: testInstance.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = lightsail.NewDistribution(ctx, "testDistribution", &lightsail.DistributionArgs{
//				BundleId: pulumi.String("small_1_0"),
//				Origin: &lightsail.DistributionOriginArgs{
//					Name:       testInstance.Name,
//					RegionName: *pulumi.String(available.Id),
//				},
//				DefaultCacheBehavior: &lightsail.DistributionDefaultCacheBehaviorArgs{
//					Behavior: pulumi.String("cache"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				testStaticIpAttachment,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### lb origin example
//
// # Below is an example with a load balancer as an origin
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws"
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/lightsail"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			available, err := aws.GetAvailabilityZones(ctx, &aws.GetAvailabilityZonesArgs{
//				State: pulumi.StringRef("available"),
//				Filters: []aws.GetAvailabilityZonesFilter{
//					{
//						Name: "opt-in-status",
//						Values: []string{
//							"opt-in-not-required",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			testLb, err := lightsail.NewLb(ctx, "testLb", &lightsail.LbArgs{
//				HealthCheckPath: pulumi.String("/"),
//				InstancePort:    pulumi.Int(80),
//				Tags: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			testInstance, err := lightsail.NewInstance(ctx, "testInstance", &lightsail.InstanceArgs{
//				AvailabilityZone: *pulumi.String(available.Names[0]),
//				BlueprintId:      pulumi.String("amazon_linux_2"),
//				BundleId:         pulumi.String("nano_1_0"),
//			})
//			if err != nil {
//				return err
//			}
//			testLbAttachment, err := lightsail.NewLbAttachment(ctx, "testLbAttachment", &lightsail.LbAttachmentArgs{
//				LbName:       testLb.Name,
//				InstanceName: testInstance.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = lightsail.NewDistribution(ctx, "testDistribution", &lightsail.DistributionArgs{
//				BundleId: pulumi.String("small_1_0"),
//				Origin: &lightsail.DistributionOriginArgs{
//					Name:       testLb.Name,
//					RegionName: *pulumi.String(available.Id),
//				},
//				DefaultCacheBehavior: &lightsail.DistributionDefaultCacheBehaviorArgs{
//					Behavior: pulumi.String("cache"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				testLbAttachment,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Lightsail Distribution can be imported using the `id`, e.g.,
//
// ```sh
//
//	$ pulumi import aws:lightsail/distribution:Distribution example rft-8012925589
//
// ```
type Distribution struct {
	pulumi.CustomResourceState

	// The alternate domain names of the distribution.
	AlternativeDomainNames pulumi.StringArrayOutput `pulumi:"alternativeDomainNames"`
	// The Amazon Resource Name (ARN) of the distribution.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Bundle ID to use for the distribution.
	BundleId pulumi.StringOutput `pulumi:"bundleId"`
	// An object that describes the cache behavior settings of the distribution. Detailed below
	CacheBehaviorSettings DistributionCacheBehaviorSettingsPtrOutput `pulumi:"cacheBehaviorSettings"`
	// A set of configuration blocks that describe the per-path cache behavior of the distribution. Detailed below
	CacheBehaviors DistributionCacheBehaviorArrayOutput `pulumi:"cacheBehaviors"`
	// The name of the SSL/TLS certificate attached to the distribution, if any.
	CertificateName pulumi.StringPtrOutput `pulumi:"certificateName"`
	// The timestamp when the distribution was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Object that describes the default cache behavior of the distribution. Detailed below
	DefaultCacheBehavior DistributionDefaultCacheBehaviorOutput `pulumi:"defaultCacheBehavior"`
	// The domain name of the distribution.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// The IP address type of the distribution. Default: `dualstack`.
	IpAddressType pulumi.StringPtrOutput `pulumi:"ipAddressType"`
	// Indicates whether the distribution is enabled. Default: `true`.
	IsEnabled pulumi.BoolPtrOutput `pulumi:"isEnabled"`
	// An object that describes the location of the distribution, such as the AWS Region and Availability Zone. Detailed below
	Locations DistributionLocationArrayOutput `pulumi:"locations"`
	// Name of the distribution.
	Name pulumi.StringOutput `pulumi:"name"`
	// Object that describes the origin resource of the distribution, such as a Lightsail instance, bucket, or load balancer. Detailed below
	Origin DistributionOriginOutput `pulumi:"origin"`
	// The public DNS of the origin.
	OriginPublicDns pulumi.StringOutput `pulumi:"originPublicDns"`
	// The resource type of the origin resource (e.g., Instance).
	ResourceType pulumi.StringOutput `pulumi:"resourceType"`
	// The status of the distribution.
	Status pulumi.StringOutput `pulumi:"status"`
	// The support code. Include this code in your email to support when you have questions about your Lightsail distribution. This code enables our support team to look up your Lightsail information more easily.
	SupportCode pulumi.StringOutput `pulumi:"supportCode"`
	// Map of tags for the Lightsail Distribution. If
	// configured with a provider
	// `defaultTags` configuration block
	// present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewDistribution registers a new resource with the given unique name, arguments, and options.
func NewDistribution(ctx *pulumi.Context,
	name string, args *DistributionArgs, opts ...pulumi.ResourceOption) (*Distribution, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BundleId == nil {
		return nil, errors.New("invalid value for required argument 'BundleId'")
	}
	if args.DefaultCacheBehavior == nil {
		return nil, errors.New("invalid value for required argument 'DefaultCacheBehavior'")
	}
	if args.Origin == nil {
		return nil, errors.New("invalid value for required argument 'Origin'")
	}
	var resource Distribution
	err := ctx.RegisterResource("aws:lightsail/distribution:Distribution", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDistribution gets an existing Distribution resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDistribution(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DistributionState, opts ...pulumi.ResourceOption) (*Distribution, error) {
	var resource Distribution
	err := ctx.ReadResource("aws:lightsail/distribution:Distribution", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Distribution resources.
type distributionState struct {
	// The alternate domain names of the distribution.
	AlternativeDomainNames []string `pulumi:"alternativeDomainNames"`
	// The Amazon Resource Name (ARN) of the distribution.
	Arn *string `pulumi:"arn"`
	// Bundle ID to use for the distribution.
	BundleId *string `pulumi:"bundleId"`
	// An object that describes the cache behavior settings of the distribution. Detailed below
	CacheBehaviorSettings *DistributionCacheBehaviorSettings `pulumi:"cacheBehaviorSettings"`
	// A set of configuration blocks that describe the per-path cache behavior of the distribution. Detailed below
	CacheBehaviors []DistributionCacheBehavior `pulumi:"cacheBehaviors"`
	// The name of the SSL/TLS certificate attached to the distribution, if any.
	CertificateName *string `pulumi:"certificateName"`
	// The timestamp when the distribution was created.
	CreatedAt *string `pulumi:"createdAt"`
	// Object that describes the default cache behavior of the distribution. Detailed below
	DefaultCacheBehavior *DistributionDefaultCacheBehavior `pulumi:"defaultCacheBehavior"`
	// The domain name of the distribution.
	DomainName *string `pulumi:"domainName"`
	// The IP address type of the distribution. Default: `dualstack`.
	IpAddressType *string `pulumi:"ipAddressType"`
	// Indicates whether the distribution is enabled. Default: `true`.
	IsEnabled *bool `pulumi:"isEnabled"`
	// An object that describes the location of the distribution, such as the AWS Region and Availability Zone. Detailed below
	Locations []DistributionLocation `pulumi:"locations"`
	// Name of the distribution.
	Name *string `pulumi:"name"`
	// Object that describes the origin resource of the distribution, such as a Lightsail instance, bucket, or load balancer. Detailed below
	Origin *DistributionOrigin `pulumi:"origin"`
	// The public DNS of the origin.
	OriginPublicDns *string `pulumi:"originPublicDns"`
	// The resource type of the origin resource (e.g., Instance).
	ResourceType *string `pulumi:"resourceType"`
	// The status of the distribution.
	Status *string `pulumi:"status"`
	// The support code. Include this code in your email to support when you have questions about your Lightsail distribution. This code enables our support team to look up your Lightsail information more easily.
	SupportCode *string `pulumi:"supportCode"`
	// Map of tags for the Lightsail Distribution. If
	// configured with a provider
	// `defaultTags` configuration block
	// present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type DistributionState struct {
	// The alternate domain names of the distribution.
	AlternativeDomainNames pulumi.StringArrayInput
	// The Amazon Resource Name (ARN) of the distribution.
	Arn pulumi.StringPtrInput
	// Bundle ID to use for the distribution.
	BundleId pulumi.StringPtrInput
	// An object that describes the cache behavior settings of the distribution. Detailed below
	CacheBehaviorSettings DistributionCacheBehaviorSettingsPtrInput
	// A set of configuration blocks that describe the per-path cache behavior of the distribution. Detailed below
	CacheBehaviors DistributionCacheBehaviorArrayInput
	// The name of the SSL/TLS certificate attached to the distribution, if any.
	CertificateName pulumi.StringPtrInput
	// The timestamp when the distribution was created.
	CreatedAt pulumi.StringPtrInput
	// Object that describes the default cache behavior of the distribution. Detailed below
	DefaultCacheBehavior DistributionDefaultCacheBehaviorPtrInput
	// The domain name of the distribution.
	DomainName pulumi.StringPtrInput
	// The IP address type of the distribution. Default: `dualstack`.
	IpAddressType pulumi.StringPtrInput
	// Indicates whether the distribution is enabled. Default: `true`.
	IsEnabled pulumi.BoolPtrInput
	// An object that describes the location of the distribution, such as the AWS Region and Availability Zone. Detailed below
	Locations DistributionLocationArrayInput
	// Name of the distribution.
	Name pulumi.StringPtrInput
	// Object that describes the origin resource of the distribution, such as a Lightsail instance, bucket, or load balancer. Detailed below
	Origin DistributionOriginPtrInput
	// The public DNS of the origin.
	OriginPublicDns pulumi.StringPtrInput
	// The resource type of the origin resource (e.g., Instance).
	ResourceType pulumi.StringPtrInput
	// The status of the distribution.
	Status pulumi.StringPtrInput
	// The support code. Include this code in your email to support when you have questions about your Lightsail distribution. This code enables our support team to look up your Lightsail information more easily.
	SupportCode pulumi.StringPtrInput
	// Map of tags for the Lightsail Distribution. If
	// configured with a provider
	// `defaultTags` configuration block
	// present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapInput
}

func (DistributionState) ElementType() reflect.Type {
	return reflect.TypeOf((*distributionState)(nil)).Elem()
}

type distributionArgs struct {
	// Bundle ID to use for the distribution.
	BundleId string `pulumi:"bundleId"`
	// An object that describes the cache behavior settings of the distribution. Detailed below
	CacheBehaviorSettings *DistributionCacheBehaviorSettings `pulumi:"cacheBehaviorSettings"`
	// A set of configuration blocks that describe the per-path cache behavior of the distribution. Detailed below
	CacheBehaviors []DistributionCacheBehavior `pulumi:"cacheBehaviors"`
	// The name of the SSL/TLS certificate attached to the distribution, if any.
	CertificateName *string `pulumi:"certificateName"`
	// Object that describes the default cache behavior of the distribution. Detailed below
	DefaultCacheBehavior DistributionDefaultCacheBehavior `pulumi:"defaultCacheBehavior"`
	// The IP address type of the distribution. Default: `dualstack`.
	IpAddressType *string `pulumi:"ipAddressType"`
	// Indicates whether the distribution is enabled. Default: `true`.
	IsEnabled *bool `pulumi:"isEnabled"`
	// Name of the distribution.
	Name *string `pulumi:"name"`
	// Object that describes the origin resource of the distribution, such as a Lightsail instance, bucket, or load balancer. Detailed below
	Origin DistributionOrigin `pulumi:"origin"`
	// Map of tags for the Lightsail Distribution. If
	// configured with a provider
	// `defaultTags` configuration block
	// present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Distribution resource.
type DistributionArgs struct {
	// Bundle ID to use for the distribution.
	BundleId pulumi.StringInput
	// An object that describes the cache behavior settings of the distribution. Detailed below
	CacheBehaviorSettings DistributionCacheBehaviorSettingsPtrInput
	// A set of configuration blocks that describe the per-path cache behavior of the distribution. Detailed below
	CacheBehaviors DistributionCacheBehaviorArrayInput
	// The name of the SSL/TLS certificate attached to the distribution, if any.
	CertificateName pulumi.StringPtrInput
	// Object that describes the default cache behavior of the distribution. Detailed below
	DefaultCacheBehavior DistributionDefaultCacheBehaviorInput
	// The IP address type of the distribution. Default: `dualstack`.
	IpAddressType pulumi.StringPtrInput
	// Indicates whether the distribution is enabled. Default: `true`.
	IsEnabled pulumi.BoolPtrInput
	// Name of the distribution.
	Name pulumi.StringPtrInput
	// Object that describes the origin resource of the distribution, such as a Lightsail instance, bucket, or load balancer. Detailed below
	Origin DistributionOriginInput
	// Map of tags for the Lightsail Distribution. If
	// configured with a provider
	// `defaultTags` configuration block
	// present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
}

func (DistributionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*distributionArgs)(nil)).Elem()
}

type DistributionInput interface {
	pulumi.Input

	ToDistributionOutput() DistributionOutput
	ToDistributionOutputWithContext(ctx context.Context) DistributionOutput
}

func (*Distribution) ElementType() reflect.Type {
	return reflect.TypeOf((**Distribution)(nil)).Elem()
}

func (i *Distribution) ToDistributionOutput() DistributionOutput {
	return i.ToDistributionOutputWithContext(context.Background())
}

func (i *Distribution) ToDistributionOutputWithContext(ctx context.Context) DistributionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionOutput)
}

// DistributionArrayInput is an input type that accepts DistributionArray and DistributionArrayOutput values.
// You can construct a concrete instance of `DistributionArrayInput` via:
//
//	DistributionArray{ DistributionArgs{...} }
type DistributionArrayInput interface {
	pulumi.Input

	ToDistributionArrayOutput() DistributionArrayOutput
	ToDistributionArrayOutputWithContext(context.Context) DistributionArrayOutput
}

type DistributionArray []DistributionInput

func (DistributionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Distribution)(nil)).Elem()
}

func (i DistributionArray) ToDistributionArrayOutput() DistributionArrayOutput {
	return i.ToDistributionArrayOutputWithContext(context.Background())
}

func (i DistributionArray) ToDistributionArrayOutputWithContext(ctx context.Context) DistributionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionArrayOutput)
}

// DistributionMapInput is an input type that accepts DistributionMap and DistributionMapOutput values.
// You can construct a concrete instance of `DistributionMapInput` via:
//
//	DistributionMap{ "key": DistributionArgs{...} }
type DistributionMapInput interface {
	pulumi.Input

	ToDistributionMapOutput() DistributionMapOutput
	ToDistributionMapOutputWithContext(context.Context) DistributionMapOutput
}

type DistributionMap map[string]DistributionInput

func (DistributionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Distribution)(nil)).Elem()
}

func (i DistributionMap) ToDistributionMapOutput() DistributionMapOutput {
	return i.ToDistributionMapOutputWithContext(context.Background())
}

func (i DistributionMap) ToDistributionMapOutputWithContext(ctx context.Context) DistributionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionMapOutput)
}

type DistributionOutput struct{ *pulumi.OutputState }

func (DistributionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Distribution)(nil)).Elem()
}

func (o DistributionOutput) ToDistributionOutput() DistributionOutput {
	return o
}

func (o DistributionOutput) ToDistributionOutputWithContext(ctx context.Context) DistributionOutput {
	return o
}

// The alternate domain names of the distribution.
func (o DistributionOutput) AlternativeDomainNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Distribution) pulumi.StringArrayOutput { return v.AlternativeDomainNames }).(pulumi.StringArrayOutput)
}

// The Amazon Resource Name (ARN) of the distribution.
func (o DistributionOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Distribution) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Bundle ID to use for the distribution.
func (o DistributionOutput) BundleId() pulumi.StringOutput {
	return o.ApplyT(func(v *Distribution) pulumi.StringOutput { return v.BundleId }).(pulumi.StringOutput)
}

// An object that describes the cache behavior settings of the distribution. Detailed below
func (o DistributionOutput) CacheBehaviorSettings() DistributionCacheBehaviorSettingsPtrOutput {
	return o.ApplyT(func(v *Distribution) DistributionCacheBehaviorSettingsPtrOutput { return v.CacheBehaviorSettings }).(DistributionCacheBehaviorSettingsPtrOutput)
}

// A set of configuration blocks that describe the per-path cache behavior of the distribution. Detailed below
func (o DistributionOutput) CacheBehaviors() DistributionCacheBehaviorArrayOutput {
	return o.ApplyT(func(v *Distribution) DistributionCacheBehaviorArrayOutput { return v.CacheBehaviors }).(DistributionCacheBehaviorArrayOutput)
}

// The name of the SSL/TLS certificate attached to the distribution, if any.
func (o DistributionOutput) CertificateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Distribution) pulumi.StringPtrOutput { return v.CertificateName }).(pulumi.StringPtrOutput)
}

// The timestamp when the distribution was created.
func (o DistributionOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Distribution) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Object that describes the default cache behavior of the distribution. Detailed below
func (o DistributionOutput) DefaultCacheBehavior() DistributionDefaultCacheBehaviorOutput {
	return o.ApplyT(func(v *Distribution) DistributionDefaultCacheBehaviorOutput { return v.DefaultCacheBehavior }).(DistributionDefaultCacheBehaviorOutput)
}

// The domain name of the distribution.
func (o DistributionOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *Distribution) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

// The IP address type of the distribution. Default: `dualstack`.
func (o DistributionOutput) IpAddressType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Distribution) pulumi.StringPtrOutput { return v.IpAddressType }).(pulumi.StringPtrOutput)
}

// Indicates whether the distribution is enabled. Default: `true`.
func (o DistributionOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Distribution) pulumi.BoolPtrOutput { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// An object that describes the location of the distribution, such as the AWS Region and Availability Zone. Detailed below
func (o DistributionOutput) Locations() DistributionLocationArrayOutput {
	return o.ApplyT(func(v *Distribution) DistributionLocationArrayOutput { return v.Locations }).(DistributionLocationArrayOutput)
}

// Name of the distribution.
func (o DistributionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Distribution) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Object that describes the origin resource of the distribution, such as a Lightsail instance, bucket, or load balancer. Detailed below
func (o DistributionOutput) Origin() DistributionOriginOutput {
	return o.ApplyT(func(v *Distribution) DistributionOriginOutput { return v.Origin }).(DistributionOriginOutput)
}

// The public DNS of the origin.
func (o DistributionOutput) OriginPublicDns() pulumi.StringOutput {
	return o.ApplyT(func(v *Distribution) pulumi.StringOutput { return v.OriginPublicDns }).(pulumi.StringOutput)
}

// The resource type of the origin resource (e.g., Instance).
func (o DistributionOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Distribution) pulumi.StringOutput { return v.ResourceType }).(pulumi.StringOutput)
}

// The status of the distribution.
func (o DistributionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Distribution) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The support code. Include this code in your email to support when you have questions about your Lightsail distribution. This code enables our support team to look up your Lightsail information more easily.
func (o DistributionOutput) SupportCode() pulumi.StringOutput {
	return o.ApplyT(func(v *Distribution) pulumi.StringOutput { return v.SupportCode }).(pulumi.StringOutput)
}

// Map of tags for the Lightsail Distribution. If
// configured with a provider
// `defaultTags` configuration block
// present, tags with matching keys will overwrite those defined at the provider-level.
func (o DistributionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Distribution) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o DistributionOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Distribution) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type DistributionArrayOutput struct{ *pulumi.OutputState }

func (DistributionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Distribution)(nil)).Elem()
}

func (o DistributionArrayOutput) ToDistributionArrayOutput() DistributionArrayOutput {
	return o
}

func (o DistributionArrayOutput) ToDistributionArrayOutputWithContext(ctx context.Context) DistributionArrayOutput {
	return o
}

func (o DistributionArrayOutput) Index(i pulumi.IntInput) DistributionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Distribution {
		return vs[0].([]*Distribution)[vs[1].(int)]
	}).(DistributionOutput)
}

type DistributionMapOutput struct{ *pulumi.OutputState }

func (DistributionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Distribution)(nil)).Elem()
}

func (o DistributionMapOutput) ToDistributionMapOutput() DistributionMapOutput {
	return o
}

func (o DistributionMapOutput) ToDistributionMapOutputWithContext(ctx context.Context) DistributionMapOutput {
	return o
}

func (o DistributionMapOutput) MapIndex(k pulumi.StringInput) DistributionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Distribution {
		return vs[0].(map[string]*Distribution)[vs[1].(string)]
	}).(DistributionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DistributionInput)(nil)).Elem(), &Distribution{})
	pulumi.RegisterInputType(reflect.TypeOf((*DistributionArrayInput)(nil)).Elem(), DistributionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DistributionMapInput)(nil)).Elem(), DistributionMap{})
	pulumi.RegisterOutputType(DistributionOutput{})
	pulumi.RegisterOutputType(DistributionArrayOutput{})
	pulumi.RegisterOutputType(DistributionMapOutput{})
}
