// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package costexplorer

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AnomalySubscription struct {
	pulumi.CustomResourceState

	AccountId       pulumi.StringOutput                      `pulumi:"accountId"`
	Arn             pulumi.StringOutput                      `pulumi:"arn"`
	Frequency       pulumi.StringOutput                      `pulumi:"frequency"`
	MonitorArnLists pulumi.StringArrayOutput                 `pulumi:"monitorArnLists"`
	Name            pulumi.StringOutput                      `pulumi:"name"`
	Subscribers     AnomalySubscriptionSubscriberArrayOutput `pulumi:"subscribers"`
	Tags            pulumi.StringMapOutput                   `pulumi:"tags"`
	TagsAll         pulumi.StringMapOutput                   `pulumi:"tagsAll"`
	Threshold       pulumi.Float64Output                     `pulumi:"threshold"`
}

// NewAnomalySubscription registers a new resource with the given unique name, arguments, and options.
func NewAnomalySubscription(ctx *pulumi.Context,
	name string, args *AnomalySubscriptionArgs, opts ...pulumi.ResourceOption) (*AnomalySubscription, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Frequency == nil {
		return nil, errors.New("invalid value for required argument 'Frequency'")
	}
	if args.MonitorArnLists == nil {
		return nil, errors.New("invalid value for required argument 'MonitorArnLists'")
	}
	if args.Subscribers == nil {
		return nil, errors.New("invalid value for required argument 'Subscribers'")
	}
	if args.Threshold == nil {
		return nil, errors.New("invalid value for required argument 'Threshold'")
	}
	var resource AnomalySubscription
	err := ctx.RegisterResource("aws:costexplorer/anomalySubscription:AnomalySubscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAnomalySubscription gets an existing AnomalySubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAnomalySubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AnomalySubscriptionState, opts ...pulumi.ResourceOption) (*AnomalySubscription, error) {
	var resource AnomalySubscription
	err := ctx.ReadResource("aws:costexplorer/anomalySubscription:AnomalySubscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AnomalySubscription resources.
type anomalySubscriptionState struct {
	AccountId       *string                         `pulumi:"accountId"`
	Arn             *string                         `pulumi:"arn"`
	Frequency       *string                         `pulumi:"frequency"`
	MonitorArnLists []string                        `pulumi:"monitorArnLists"`
	Name            *string                         `pulumi:"name"`
	Subscribers     []AnomalySubscriptionSubscriber `pulumi:"subscribers"`
	Tags            map[string]string               `pulumi:"tags"`
	TagsAll         map[string]string               `pulumi:"tagsAll"`
	Threshold       *float64                        `pulumi:"threshold"`
}

type AnomalySubscriptionState struct {
	AccountId       pulumi.StringPtrInput
	Arn             pulumi.StringPtrInput
	Frequency       pulumi.StringPtrInput
	MonitorArnLists pulumi.StringArrayInput
	Name            pulumi.StringPtrInput
	Subscribers     AnomalySubscriptionSubscriberArrayInput
	Tags            pulumi.StringMapInput
	TagsAll         pulumi.StringMapInput
	Threshold       pulumi.Float64PtrInput
}

func (AnomalySubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*anomalySubscriptionState)(nil)).Elem()
}

type anomalySubscriptionArgs struct {
	AccountId       *string                         `pulumi:"accountId"`
	Frequency       string                          `pulumi:"frequency"`
	MonitorArnLists []string                        `pulumi:"monitorArnLists"`
	Name            *string                         `pulumi:"name"`
	Subscribers     []AnomalySubscriptionSubscriber `pulumi:"subscribers"`
	Tags            map[string]string               `pulumi:"tags"`
	Threshold       float64                         `pulumi:"threshold"`
}

// The set of arguments for constructing a AnomalySubscription resource.
type AnomalySubscriptionArgs struct {
	AccountId       pulumi.StringPtrInput
	Frequency       pulumi.StringInput
	MonitorArnLists pulumi.StringArrayInput
	Name            pulumi.StringPtrInput
	Subscribers     AnomalySubscriptionSubscriberArrayInput
	Tags            pulumi.StringMapInput
	Threshold       pulumi.Float64Input
}

func (AnomalySubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*anomalySubscriptionArgs)(nil)).Elem()
}

type AnomalySubscriptionInput interface {
	pulumi.Input

	ToAnomalySubscriptionOutput() AnomalySubscriptionOutput
	ToAnomalySubscriptionOutputWithContext(ctx context.Context) AnomalySubscriptionOutput
}

func (*AnomalySubscription) ElementType() reflect.Type {
	return reflect.TypeOf((**AnomalySubscription)(nil)).Elem()
}

func (i *AnomalySubscription) ToAnomalySubscriptionOutput() AnomalySubscriptionOutput {
	return i.ToAnomalySubscriptionOutputWithContext(context.Background())
}

func (i *AnomalySubscription) ToAnomalySubscriptionOutputWithContext(ctx context.Context) AnomalySubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionOutput)
}

// AnomalySubscriptionArrayInput is an input type that accepts AnomalySubscriptionArray and AnomalySubscriptionArrayOutput values.
// You can construct a concrete instance of `AnomalySubscriptionArrayInput` via:
//
//	AnomalySubscriptionArray{ AnomalySubscriptionArgs{...} }
type AnomalySubscriptionArrayInput interface {
	pulumi.Input

	ToAnomalySubscriptionArrayOutput() AnomalySubscriptionArrayOutput
	ToAnomalySubscriptionArrayOutputWithContext(context.Context) AnomalySubscriptionArrayOutput
}

type AnomalySubscriptionArray []AnomalySubscriptionInput

func (AnomalySubscriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AnomalySubscription)(nil)).Elem()
}

func (i AnomalySubscriptionArray) ToAnomalySubscriptionArrayOutput() AnomalySubscriptionArrayOutput {
	return i.ToAnomalySubscriptionArrayOutputWithContext(context.Background())
}

func (i AnomalySubscriptionArray) ToAnomalySubscriptionArrayOutputWithContext(ctx context.Context) AnomalySubscriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionArrayOutput)
}

// AnomalySubscriptionMapInput is an input type that accepts AnomalySubscriptionMap and AnomalySubscriptionMapOutput values.
// You can construct a concrete instance of `AnomalySubscriptionMapInput` via:
//
//	AnomalySubscriptionMap{ "key": AnomalySubscriptionArgs{...} }
type AnomalySubscriptionMapInput interface {
	pulumi.Input

	ToAnomalySubscriptionMapOutput() AnomalySubscriptionMapOutput
	ToAnomalySubscriptionMapOutputWithContext(context.Context) AnomalySubscriptionMapOutput
}

type AnomalySubscriptionMap map[string]AnomalySubscriptionInput

func (AnomalySubscriptionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AnomalySubscription)(nil)).Elem()
}

func (i AnomalySubscriptionMap) ToAnomalySubscriptionMapOutput() AnomalySubscriptionMapOutput {
	return i.ToAnomalySubscriptionMapOutputWithContext(context.Background())
}

func (i AnomalySubscriptionMap) ToAnomalySubscriptionMapOutputWithContext(ctx context.Context) AnomalySubscriptionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionMapOutput)
}

type AnomalySubscriptionOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnomalySubscription)(nil)).Elem()
}

func (o AnomalySubscriptionOutput) ToAnomalySubscriptionOutput() AnomalySubscriptionOutput {
	return o
}

func (o AnomalySubscriptionOutput) ToAnomalySubscriptionOutputWithContext(ctx context.Context) AnomalySubscriptionOutput {
	return o
}

func (o AnomalySubscriptionOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *AnomalySubscription) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

func (o AnomalySubscriptionOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *AnomalySubscription) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o AnomalySubscriptionOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v *AnomalySubscription) pulumi.StringOutput { return v.Frequency }).(pulumi.StringOutput)
}

func (o AnomalySubscriptionOutput) MonitorArnLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AnomalySubscription) pulumi.StringArrayOutput { return v.MonitorArnLists }).(pulumi.StringArrayOutput)
}

func (o AnomalySubscriptionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AnomalySubscription) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o AnomalySubscriptionOutput) Subscribers() AnomalySubscriptionSubscriberArrayOutput {
	return o.ApplyT(func(v *AnomalySubscription) AnomalySubscriptionSubscriberArrayOutput { return v.Subscribers }).(AnomalySubscriptionSubscriberArrayOutput)
}

func (o AnomalySubscriptionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AnomalySubscription) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o AnomalySubscriptionOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AnomalySubscription) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o AnomalySubscriptionOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v *AnomalySubscription) pulumi.Float64Output { return v.Threshold }).(pulumi.Float64Output)
}

type AnomalySubscriptionArrayOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AnomalySubscription)(nil)).Elem()
}

func (o AnomalySubscriptionArrayOutput) ToAnomalySubscriptionArrayOutput() AnomalySubscriptionArrayOutput {
	return o
}

func (o AnomalySubscriptionArrayOutput) ToAnomalySubscriptionArrayOutputWithContext(ctx context.Context) AnomalySubscriptionArrayOutput {
	return o
}

func (o AnomalySubscriptionArrayOutput) Index(i pulumi.IntInput) AnomalySubscriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AnomalySubscription {
		return vs[0].([]*AnomalySubscription)[vs[1].(int)]
	}).(AnomalySubscriptionOutput)
}

type AnomalySubscriptionMapOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AnomalySubscription)(nil)).Elem()
}

func (o AnomalySubscriptionMapOutput) ToAnomalySubscriptionMapOutput() AnomalySubscriptionMapOutput {
	return o
}

func (o AnomalySubscriptionMapOutput) ToAnomalySubscriptionMapOutputWithContext(ctx context.Context) AnomalySubscriptionMapOutput {
	return o
}

func (o AnomalySubscriptionMapOutput) MapIndex(k pulumi.StringInput) AnomalySubscriptionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AnomalySubscription {
		return vs[0].(map[string]*AnomalySubscription)[vs[1].(string)]
	}).(AnomalySubscriptionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalySubscriptionInput)(nil)).Elem(), &AnomalySubscription{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalySubscriptionArrayInput)(nil)).Elem(), AnomalySubscriptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalySubscriptionMapInput)(nil)).Elem(), AnomalySubscriptionMap{})
	pulumi.RegisterOutputType(AnomalySubscriptionOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionArrayOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionMapOutput{})
}
