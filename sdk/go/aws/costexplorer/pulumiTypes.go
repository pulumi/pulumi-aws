// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package costexplorer

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type AnomalySubscriptionSubscriber struct {
	// The address of the subscriber. If type is `SNS`, this will be the arn of the sns topic. If type is `EMAIL`, this will be the destination email address.
	Address string `pulumi:"address"`
	// The type of subscription. Valid Values: `SNS` | `EMAIL`.
	Type string `pulumi:"type"`
}

// AnomalySubscriptionSubscriberInput is an input type that accepts AnomalySubscriptionSubscriberArgs and AnomalySubscriptionSubscriberOutput values.
// You can construct a concrete instance of `AnomalySubscriptionSubscriberInput` via:
//
//	AnomalySubscriptionSubscriberArgs{...}
type AnomalySubscriptionSubscriberInput interface {
	pulumi.Input

	ToAnomalySubscriptionSubscriberOutput() AnomalySubscriptionSubscriberOutput
	ToAnomalySubscriptionSubscriberOutputWithContext(context.Context) AnomalySubscriptionSubscriberOutput
}

type AnomalySubscriptionSubscriberArgs struct {
	// The address of the subscriber. If type is `SNS`, this will be the arn of the sns topic. If type is `EMAIL`, this will be the destination email address.
	Address pulumi.StringInput `pulumi:"address"`
	// The type of subscription. Valid Values: `SNS` | `EMAIL`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AnomalySubscriptionSubscriberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionSubscriber)(nil)).Elem()
}

func (i AnomalySubscriptionSubscriberArgs) ToAnomalySubscriptionSubscriberOutput() AnomalySubscriptionSubscriberOutput {
	return i.ToAnomalySubscriptionSubscriberOutputWithContext(context.Background())
}

func (i AnomalySubscriptionSubscriberArgs) ToAnomalySubscriptionSubscriberOutputWithContext(ctx context.Context) AnomalySubscriptionSubscriberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionSubscriberOutput)
}

// AnomalySubscriptionSubscriberArrayInput is an input type that accepts AnomalySubscriptionSubscriberArray and AnomalySubscriptionSubscriberArrayOutput values.
// You can construct a concrete instance of `AnomalySubscriptionSubscriberArrayInput` via:
//
//	AnomalySubscriptionSubscriberArray{ AnomalySubscriptionSubscriberArgs{...} }
type AnomalySubscriptionSubscriberArrayInput interface {
	pulumi.Input

	ToAnomalySubscriptionSubscriberArrayOutput() AnomalySubscriptionSubscriberArrayOutput
	ToAnomalySubscriptionSubscriberArrayOutputWithContext(context.Context) AnomalySubscriptionSubscriberArrayOutput
}

type AnomalySubscriptionSubscriberArray []AnomalySubscriptionSubscriberInput

func (AnomalySubscriptionSubscriberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnomalySubscriptionSubscriber)(nil)).Elem()
}

func (i AnomalySubscriptionSubscriberArray) ToAnomalySubscriptionSubscriberArrayOutput() AnomalySubscriptionSubscriberArrayOutput {
	return i.ToAnomalySubscriptionSubscriberArrayOutputWithContext(context.Background())
}

func (i AnomalySubscriptionSubscriberArray) ToAnomalySubscriptionSubscriberArrayOutputWithContext(ctx context.Context) AnomalySubscriptionSubscriberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionSubscriberArrayOutput)
}

type AnomalySubscriptionSubscriberOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionSubscriberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionSubscriber)(nil)).Elem()
}

func (o AnomalySubscriptionSubscriberOutput) ToAnomalySubscriptionSubscriberOutput() AnomalySubscriptionSubscriberOutput {
	return o
}

func (o AnomalySubscriptionSubscriberOutput) ToAnomalySubscriptionSubscriberOutputWithContext(ctx context.Context) AnomalySubscriptionSubscriberOutput {
	return o
}

// The address of the subscriber. If type is `SNS`, this will be the arn of the sns topic. If type is `EMAIL`, this will be the destination email address.
func (o AnomalySubscriptionSubscriberOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v AnomalySubscriptionSubscriber) string { return v.Address }).(pulumi.StringOutput)
}

// The type of subscription. Valid Values: `SNS` | `EMAIL`.
func (o AnomalySubscriptionSubscriberOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AnomalySubscriptionSubscriber) string { return v.Type }).(pulumi.StringOutput)
}

type AnomalySubscriptionSubscriberArrayOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionSubscriberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnomalySubscriptionSubscriber)(nil)).Elem()
}

func (o AnomalySubscriptionSubscriberArrayOutput) ToAnomalySubscriptionSubscriberArrayOutput() AnomalySubscriptionSubscriberArrayOutput {
	return o
}

func (o AnomalySubscriptionSubscriberArrayOutput) ToAnomalySubscriptionSubscriberArrayOutputWithContext(ctx context.Context) AnomalySubscriptionSubscriberArrayOutput {
	return o
}

func (o AnomalySubscriptionSubscriberArrayOutput) Index(i pulumi.IntInput) AnomalySubscriptionSubscriberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AnomalySubscriptionSubscriber {
		return vs[0].([]AnomalySubscriptionSubscriber)[vs[1].(int)]
	}).(AnomalySubscriptionSubscriberOutput)
}

type AnomalySubscriptionThresholdExpression struct {
	// Return results that match both Dimension objects.
	Ands []AnomalySubscriptionThresholdExpressionAnd `pulumi:"ands"`
	// Configuration block for the filter that's based on  values. See Cost Category below.
	CostCategory *AnomalySubscriptionThresholdExpressionCostCategory `pulumi:"costCategory"`
	// Configuration block for the specific Dimension to use for.
	Dimension *AnomalySubscriptionThresholdExpressionDimension `pulumi:"dimension"`
	// Return results that match both Dimension object.
	Not *AnomalySubscriptionThresholdExpressionNot `pulumi:"not"`
	// Return results that match both Dimension object.
	Ors []AnomalySubscriptionThresholdExpressionOr `pulumi:"ors"`
	// Configuration block for the specific Tag to use for. See Tags below.
	Tags *AnomalySubscriptionThresholdExpressionTags `pulumi:"tags"`
}

// AnomalySubscriptionThresholdExpressionInput is an input type that accepts AnomalySubscriptionThresholdExpressionArgs and AnomalySubscriptionThresholdExpressionOutput values.
// You can construct a concrete instance of `AnomalySubscriptionThresholdExpressionInput` via:
//
//	AnomalySubscriptionThresholdExpressionArgs{...}
type AnomalySubscriptionThresholdExpressionInput interface {
	pulumi.Input

	ToAnomalySubscriptionThresholdExpressionOutput() AnomalySubscriptionThresholdExpressionOutput
	ToAnomalySubscriptionThresholdExpressionOutputWithContext(context.Context) AnomalySubscriptionThresholdExpressionOutput
}

type AnomalySubscriptionThresholdExpressionArgs struct {
	// Return results that match both Dimension objects.
	Ands AnomalySubscriptionThresholdExpressionAndArrayInput `pulumi:"ands"`
	// Configuration block for the filter that's based on  values. See Cost Category below.
	CostCategory AnomalySubscriptionThresholdExpressionCostCategoryPtrInput `pulumi:"costCategory"`
	// Configuration block for the specific Dimension to use for.
	Dimension AnomalySubscriptionThresholdExpressionDimensionPtrInput `pulumi:"dimension"`
	// Return results that match both Dimension object.
	Not AnomalySubscriptionThresholdExpressionNotPtrInput `pulumi:"not"`
	// Return results that match both Dimension object.
	Ors AnomalySubscriptionThresholdExpressionOrArrayInput `pulumi:"ors"`
	// Configuration block for the specific Tag to use for. See Tags below.
	Tags AnomalySubscriptionThresholdExpressionTagsPtrInput `pulumi:"tags"`
}

func (AnomalySubscriptionThresholdExpressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpression)(nil)).Elem()
}

func (i AnomalySubscriptionThresholdExpressionArgs) ToAnomalySubscriptionThresholdExpressionOutput() AnomalySubscriptionThresholdExpressionOutput {
	return i.ToAnomalySubscriptionThresholdExpressionOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionArgs) ToAnomalySubscriptionThresholdExpressionOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionOutput)
}

func (i AnomalySubscriptionThresholdExpressionArgs) ToAnomalySubscriptionThresholdExpressionPtrOutput() AnomalySubscriptionThresholdExpressionPtrOutput {
	return i.ToAnomalySubscriptionThresholdExpressionPtrOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionArgs) ToAnomalySubscriptionThresholdExpressionPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionOutput).ToAnomalySubscriptionThresholdExpressionPtrOutputWithContext(ctx)
}

// AnomalySubscriptionThresholdExpressionPtrInput is an input type that accepts AnomalySubscriptionThresholdExpressionArgs, AnomalySubscriptionThresholdExpressionPtr and AnomalySubscriptionThresholdExpressionPtrOutput values.
// You can construct a concrete instance of `AnomalySubscriptionThresholdExpressionPtrInput` via:
//
//	        AnomalySubscriptionThresholdExpressionArgs{...}
//
//	or:
//
//	        nil
type AnomalySubscriptionThresholdExpressionPtrInput interface {
	pulumi.Input

	ToAnomalySubscriptionThresholdExpressionPtrOutput() AnomalySubscriptionThresholdExpressionPtrOutput
	ToAnomalySubscriptionThresholdExpressionPtrOutputWithContext(context.Context) AnomalySubscriptionThresholdExpressionPtrOutput
}

type anomalySubscriptionThresholdExpressionPtrType AnomalySubscriptionThresholdExpressionArgs

func AnomalySubscriptionThresholdExpressionPtr(v *AnomalySubscriptionThresholdExpressionArgs) AnomalySubscriptionThresholdExpressionPtrInput {
	return (*anomalySubscriptionThresholdExpressionPtrType)(v)
}

func (*anomalySubscriptionThresholdExpressionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnomalySubscriptionThresholdExpression)(nil)).Elem()
}

func (i *anomalySubscriptionThresholdExpressionPtrType) ToAnomalySubscriptionThresholdExpressionPtrOutput() AnomalySubscriptionThresholdExpressionPtrOutput {
	return i.ToAnomalySubscriptionThresholdExpressionPtrOutputWithContext(context.Background())
}

func (i *anomalySubscriptionThresholdExpressionPtrType) ToAnomalySubscriptionThresholdExpressionPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionPtrOutput)
}

type AnomalySubscriptionThresholdExpressionOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpression)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionOutput) ToAnomalySubscriptionThresholdExpressionOutput() AnomalySubscriptionThresholdExpressionOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionOutput) ToAnomalySubscriptionThresholdExpressionOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionOutput) ToAnomalySubscriptionThresholdExpressionPtrOutput() AnomalySubscriptionThresholdExpressionPtrOutput {
	return o.ToAnomalySubscriptionThresholdExpressionPtrOutputWithContext(context.Background())
}

func (o AnomalySubscriptionThresholdExpressionOutput) ToAnomalySubscriptionThresholdExpressionPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnomalySubscriptionThresholdExpression) *AnomalySubscriptionThresholdExpression {
		return &v
	}).(AnomalySubscriptionThresholdExpressionPtrOutput)
}

// Return results that match both Dimension objects.
func (o AnomalySubscriptionThresholdExpressionOutput) Ands() AnomalySubscriptionThresholdExpressionAndArrayOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpression) []AnomalySubscriptionThresholdExpressionAnd {
		return v.Ands
	}).(AnomalySubscriptionThresholdExpressionAndArrayOutput)
}

// Configuration block for the filter that's based on  values. See Cost Category below.
func (o AnomalySubscriptionThresholdExpressionOutput) CostCategory() AnomalySubscriptionThresholdExpressionCostCategoryPtrOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpression) *AnomalySubscriptionThresholdExpressionCostCategory {
		return v.CostCategory
	}).(AnomalySubscriptionThresholdExpressionCostCategoryPtrOutput)
}

// Configuration block for the specific Dimension to use for.
func (o AnomalySubscriptionThresholdExpressionOutput) Dimension() AnomalySubscriptionThresholdExpressionDimensionPtrOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpression) *AnomalySubscriptionThresholdExpressionDimension {
		return v.Dimension
	}).(AnomalySubscriptionThresholdExpressionDimensionPtrOutput)
}

// Return results that match both Dimension object.
func (o AnomalySubscriptionThresholdExpressionOutput) Not() AnomalySubscriptionThresholdExpressionNotPtrOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpression) *AnomalySubscriptionThresholdExpressionNot {
		return v.Not
	}).(AnomalySubscriptionThresholdExpressionNotPtrOutput)
}

// Return results that match both Dimension object.
func (o AnomalySubscriptionThresholdExpressionOutput) Ors() AnomalySubscriptionThresholdExpressionOrArrayOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpression) []AnomalySubscriptionThresholdExpressionOr {
		return v.Ors
	}).(AnomalySubscriptionThresholdExpressionOrArrayOutput)
}

// Configuration block for the specific Tag to use for. See Tags below.
func (o AnomalySubscriptionThresholdExpressionOutput) Tags() AnomalySubscriptionThresholdExpressionTagsPtrOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpression) *AnomalySubscriptionThresholdExpressionTags {
		return v.Tags
	}).(AnomalySubscriptionThresholdExpressionTagsPtrOutput)
}

type AnomalySubscriptionThresholdExpressionPtrOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnomalySubscriptionThresholdExpression)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionPtrOutput) ToAnomalySubscriptionThresholdExpressionPtrOutput() AnomalySubscriptionThresholdExpressionPtrOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionPtrOutput) ToAnomalySubscriptionThresholdExpressionPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionPtrOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionPtrOutput) Elem() AnomalySubscriptionThresholdExpressionOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpression) AnomalySubscriptionThresholdExpression {
		if v != nil {
			return *v
		}
		var ret AnomalySubscriptionThresholdExpression
		return ret
	}).(AnomalySubscriptionThresholdExpressionOutput)
}

// Return results that match both Dimension objects.
func (o AnomalySubscriptionThresholdExpressionPtrOutput) Ands() AnomalySubscriptionThresholdExpressionAndArrayOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpression) []AnomalySubscriptionThresholdExpressionAnd {
		if v == nil {
			return nil
		}
		return v.Ands
	}).(AnomalySubscriptionThresholdExpressionAndArrayOutput)
}

// Configuration block for the filter that's based on  values. See Cost Category below.
func (o AnomalySubscriptionThresholdExpressionPtrOutput) CostCategory() AnomalySubscriptionThresholdExpressionCostCategoryPtrOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpression) *AnomalySubscriptionThresholdExpressionCostCategory {
		if v == nil {
			return nil
		}
		return v.CostCategory
	}).(AnomalySubscriptionThresholdExpressionCostCategoryPtrOutput)
}

// Configuration block for the specific Dimension to use for.
func (o AnomalySubscriptionThresholdExpressionPtrOutput) Dimension() AnomalySubscriptionThresholdExpressionDimensionPtrOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpression) *AnomalySubscriptionThresholdExpressionDimension {
		if v == nil {
			return nil
		}
		return v.Dimension
	}).(AnomalySubscriptionThresholdExpressionDimensionPtrOutput)
}

// Return results that match both Dimension object.
func (o AnomalySubscriptionThresholdExpressionPtrOutput) Not() AnomalySubscriptionThresholdExpressionNotPtrOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpression) *AnomalySubscriptionThresholdExpressionNot {
		if v == nil {
			return nil
		}
		return v.Not
	}).(AnomalySubscriptionThresholdExpressionNotPtrOutput)
}

// Return results that match both Dimension object.
func (o AnomalySubscriptionThresholdExpressionPtrOutput) Ors() AnomalySubscriptionThresholdExpressionOrArrayOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpression) []AnomalySubscriptionThresholdExpressionOr {
		if v == nil {
			return nil
		}
		return v.Ors
	}).(AnomalySubscriptionThresholdExpressionOrArrayOutput)
}

// Configuration block for the specific Tag to use for. See Tags below.
func (o AnomalySubscriptionThresholdExpressionPtrOutput) Tags() AnomalySubscriptionThresholdExpressionTagsPtrOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpression) *AnomalySubscriptionThresholdExpressionTags {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(AnomalySubscriptionThresholdExpressionTagsPtrOutput)
}

type AnomalySubscriptionThresholdExpressionAnd struct {
	// Configuration block for the filter that's based on  values. See Cost Category below.
	CostCategory *AnomalySubscriptionThresholdExpressionAndCostCategory `pulumi:"costCategory"`
	// Configuration block for the specific Dimension to use for.
	Dimension *AnomalySubscriptionThresholdExpressionAndDimension `pulumi:"dimension"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags *AnomalySubscriptionThresholdExpressionAndTags `pulumi:"tags"`
}

// AnomalySubscriptionThresholdExpressionAndInput is an input type that accepts AnomalySubscriptionThresholdExpressionAndArgs and AnomalySubscriptionThresholdExpressionAndOutput values.
// You can construct a concrete instance of `AnomalySubscriptionThresholdExpressionAndInput` via:
//
//	AnomalySubscriptionThresholdExpressionAndArgs{...}
type AnomalySubscriptionThresholdExpressionAndInput interface {
	pulumi.Input

	ToAnomalySubscriptionThresholdExpressionAndOutput() AnomalySubscriptionThresholdExpressionAndOutput
	ToAnomalySubscriptionThresholdExpressionAndOutputWithContext(context.Context) AnomalySubscriptionThresholdExpressionAndOutput
}

type AnomalySubscriptionThresholdExpressionAndArgs struct {
	// Configuration block for the filter that's based on  values. See Cost Category below.
	CostCategory AnomalySubscriptionThresholdExpressionAndCostCategoryPtrInput `pulumi:"costCategory"`
	// Configuration block for the specific Dimension to use for.
	Dimension AnomalySubscriptionThresholdExpressionAndDimensionPtrInput `pulumi:"dimension"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags AnomalySubscriptionThresholdExpressionAndTagsPtrInput `pulumi:"tags"`
}

func (AnomalySubscriptionThresholdExpressionAndArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionAnd)(nil)).Elem()
}

func (i AnomalySubscriptionThresholdExpressionAndArgs) ToAnomalySubscriptionThresholdExpressionAndOutput() AnomalySubscriptionThresholdExpressionAndOutput {
	return i.ToAnomalySubscriptionThresholdExpressionAndOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionAndArgs) ToAnomalySubscriptionThresholdExpressionAndOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionAndOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionAndOutput)
}

// AnomalySubscriptionThresholdExpressionAndArrayInput is an input type that accepts AnomalySubscriptionThresholdExpressionAndArray and AnomalySubscriptionThresholdExpressionAndArrayOutput values.
// You can construct a concrete instance of `AnomalySubscriptionThresholdExpressionAndArrayInput` via:
//
//	AnomalySubscriptionThresholdExpressionAndArray{ AnomalySubscriptionThresholdExpressionAndArgs{...} }
type AnomalySubscriptionThresholdExpressionAndArrayInput interface {
	pulumi.Input

	ToAnomalySubscriptionThresholdExpressionAndArrayOutput() AnomalySubscriptionThresholdExpressionAndArrayOutput
	ToAnomalySubscriptionThresholdExpressionAndArrayOutputWithContext(context.Context) AnomalySubscriptionThresholdExpressionAndArrayOutput
}

type AnomalySubscriptionThresholdExpressionAndArray []AnomalySubscriptionThresholdExpressionAndInput

func (AnomalySubscriptionThresholdExpressionAndArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnomalySubscriptionThresholdExpressionAnd)(nil)).Elem()
}

func (i AnomalySubscriptionThresholdExpressionAndArray) ToAnomalySubscriptionThresholdExpressionAndArrayOutput() AnomalySubscriptionThresholdExpressionAndArrayOutput {
	return i.ToAnomalySubscriptionThresholdExpressionAndArrayOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionAndArray) ToAnomalySubscriptionThresholdExpressionAndArrayOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionAndArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionAndArrayOutput)
}

type AnomalySubscriptionThresholdExpressionAndOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionAndOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionAnd)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionAndOutput) ToAnomalySubscriptionThresholdExpressionAndOutput() AnomalySubscriptionThresholdExpressionAndOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionAndOutput) ToAnomalySubscriptionThresholdExpressionAndOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionAndOutput {
	return o
}

// Configuration block for the filter that's based on  values. See Cost Category below.
func (o AnomalySubscriptionThresholdExpressionAndOutput) CostCategory() AnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionAnd) *AnomalySubscriptionThresholdExpressionAndCostCategory {
		return v.CostCategory
	}).(AnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutput)
}

// Configuration block for the specific Dimension to use for.
func (o AnomalySubscriptionThresholdExpressionAndOutput) Dimension() AnomalySubscriptionThresholdExpressionAndDimensionPtrOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionAnd) *AnomalySubscriptionThresholdExpressionAndDimension {
		return v.Dimension
	}).(AnomalySubscriptionThresholdExpressionAndDimensionPtrOutput)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o AnomalySubscriptionThresholdExpressionAndOutput) Tags() AnomalySubscriptionThresholdExpressionAndTagsPtrOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionAnd) *AnomalySubscriptionThresholdExpressionAndTags {
		return v.Tags
	}).(AnomalySubscriptionThresholdExpressionAndTagsPtrOutput)
}

type AnomalySubscriptionThresholdExpressionAndArrayOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionAndArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnomalySubscriptionThresholdExpressionAnd)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionAndArrayOutput) ToAnomalySubscriptionThresholdExpressionAndArrayOutput() AnomalySubscriptionThresholdExpressionAndArrayOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionAndArrayOutput) ToAnomalySubscriptionThresholdExpressionAndArrayOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionAndArrayOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionAndArrayOutput) Index(i pulumi.IntInput) AnomalySubscriptionThresholdExpressionAndOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AnomalySubscriptionThresholdExpressionAnd {
		return vs[0].([]AnomalySubscriptionThresholdExpressionAnd)[vs[1].(int)]
	}).(AnomalySubscriptionThresholdExpressionAndOutput)
}

type AnomalySubscriptionThresholdExpressionAndCostCategory struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

// AnomalySubscriptionThresholdExpressionAndCostCategoryInput is an input type that accepts AnomalySubscriptionThresholdExpressionAndCostCategoryArgs and AnomalySubscriptionThresholdExpressionAndCostCategoryOutput values.
// You can construct a concrete instance of `AnomalySubscriptionThresholdExpressionAndCostCategoryInput` via:
//
//	AnomalySubscriptionThresholdExpressionAndCostCategoryArgs{...}
type AnomalySubscriptionThresholdExpressionAndCostCategoryInput interface {
	pulumi.Input

	ToAnomalySubscriptionThresholdExpressionAndCostCategoryOutput() AnomalySubscriptionThresholdExpressionAndCostCategoryOutput
	ToAnomalySubscriptionThresholdExpressionAndCostCategoryOutputWithContext(context.Context) AnomalySubscriptionThresholdExpressionAndCostCategoryOutput
}

type AnomalySubscriptionThresholdExpressionAndCostCategoryArgs struct {
	// Unique name of the Cost Category.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AnomalySubscriptionThresholdExpressionAndCostCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionAndCostCategory)(nil)).Elem()
}

func (i AnomalySubscriptionThresholdExpressionAndCostCategoryArgs) ToAnomalySubscriptionThresholdExpressionAndCostCategoryOutput() AnomalySubscriptionThresholdExpressionAndCostCategoryOutput {
	return i.ToAnomalySubscriptionThresholdExpressionAndCostCategoryOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionAndCostCategoryArgs) ToAnomalySubscriptionThresholdExpressionAndCostCategoryOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionAndCostCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionAndCostCategoryOutput)
}

func (i AnomalySubscriptionThresholdExpressionAndCostCategoryArgs) ToAnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutput() AnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutput {
	return i.ToAnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionAndCostCategoryArgs) ToAnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionAndCostCategoryOutput).ToAnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutputWithContext(ctx)
}

// AnomalySubscriptionThresholdExpressionAndCostCategoryPtrInput is an input type that accepts AnomalySubscriptionThresholdExpressionAndCostCategoryArgs, AnomalySubscriptionThresholdExpressionAndCostCategoryPtr and AnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutput values.
// You can construct a concrete instance of `AnomalySubscriptionThresholdExpressionAndCostCategoryPtrInput` via:
//
//	        AnomalySubscriptionThresholdExpressionAndCostCategoryArgs{...}
//
//	or:
//
//	        nil
type AnomalySubscriptionThresholdExpressionAndCostCategoryPtrInput interface {
	pulumi.Input

	ToAnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutput() AnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutput
	ToAnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutputWithContext(context.Context) AnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutput
}

type anomalySubscriptionThresholdExpressionAndCostCategoryPtrType AnomalySubscriptionThresholdExpressionAndCostCategoryArgs

func AnomalySubscriptionThresholdExpressionAndCostCategoryPtr(v *AnomalySubscriptionThresholdExpressionAndCostCategoryArgs) AnomalySubscriptionThresholdExpressionAndCostCategoryPtrInput {
	return (*anomalySubscriptionThresholdExpressionAndCostCategoryPtrType)(v)
}

func (*anomalySubscriptionThresholdExpressionAndCostCategoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnomalySubscriptionThresholdExpressionAndCostCategory)(nil)).Elem()
}

func (i *anomalySubscriptionThresholdExpressionAndCostCategoryPtrType) ToAnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutput() AnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutput {
	return i.ToAnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutputWithContext(context.Background())
}

func (i *anomalySubscriptionThresholdExpressionAndCostCategoryPtrType) ToAnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutput)
}

type AnomalySubscriptionThresholdExpressionAndCostCategoryOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionAndCostCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionAndCostCategory)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionAndCostCategoryOutput) ToAnomalySubscriptionThresholdExpressionAndCostCategoryOutput() AnomalySubscriptionThresholdExpressionAndCostCategoryOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionAndCostCategoryOutput) ToAnomalySubscriptionThresholdExpressionAndCostCategoryOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionAndCostCategoryOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionAndCostCategoryOutput) ToAnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutput() AnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutput {
	return o.ToAnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutputWithContext(context.Background())
}

func (o AnomalySubscriptionThresholdExpressionAndCostCategoryOutput) ToAnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnomalySubscriptionThresholdExpressionAndCostCategory) *AnomalySubscriptionThresholdExpressionAndCostCategory {
		return &v
	}).(AnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutput)
}

// Unique name of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionAndCostCategoryOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionAndCostCategory) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o AnomalySubscriptionThresholdExpressionAndCostCategoryOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionAndCostCategory) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionAndCostCategoryOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionAndCostCategory) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnomalySubscriptionThresholdExpressionAndCostCategory)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutput) ToAnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutput() AnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutput) ToAnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutput) Elem() AnomalySubscriptionThresholdExpressionAndCostCategoryOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionAndCostCategory) AnomalySubscriptionThresholdExpressionAndCostCategory {
		if v != nil {
			return *v
		}
		var ret AnomalySubscriptionThresholdExpressionAndCostCategory
		return ret
	}).(AnomalySubscriptionThresholdExpressionAndCostCategoryOutput)
}

// Unique name of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionAndCostCategory) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o AnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionAndCostCategory) []string {
		if v == nil {
			return nil
		}
		return v.MatchOptions
	}).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionAndCostCategory) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AnomalySubscriptionThresholdExpressionAndDimension struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

// AnomalySubscriptionThresholdExpressionAndDimensionInput is an input type that accepts AnomalySubscriptionThresholdExpressionAndDimensionArgs and AnomalySubscriptionThresholdExpressionAndDimensionOutput values.
// You can construct a concrete instance of `AnomalySubscriptionThresholdExpressionAndDimensionInput` via:
//
//	AnomalySubscriptionThresholdExpressionAndDimensionArgs{...}
type AnomalySubscriptionThresholdExpressionAndDimensionInput interface {
	pulumi.Input

	ToAnomalySubscriptionThresholdExpressionAndDimensionOutput() AnomalySubscriptionThresholdExpressionAndDimensionOutput
	ToAnomalySubscriptionThresholdExpressionAndDimensionOutputWithContext(context.Context) AnomalySubscriptionThresholdExpressionAndDimensionOutput
}

type AnomalySubscriptionThresholdExpressionAndDimensionArgs struct {
	// Unique name of the Cost Category.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AnomalySubscriptionThresholdExpressionAndDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionAndDimension)(nil)).Elem()
}

func (i AnomalySubscriptionThresholdExpressionAndDimensionArgs) ToAnomalySubscriptionThresholdExpressionAndDimensionOutput() AnomalySubscriptionThresholdExpressionAndDimensionOutput {
	return i.ToAnomalySubscriptionThresholdExpressionAndDimensionOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionAndDimensionArgs) ToAnomalySubscriptionThresholdExpressionAndDimensionOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionAndDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionAndDimensionOutput)
}

func (i AnomalySubscriptionThresholdExpressionAndDimensionArgs) ToAnomalySubscriptionThresholdExpressionAndDimensionPtrOutput() AnomalySubscriptionThresholdExpressionAndDimensionPtrOutput {
	return i.ToAnomalySubscriptionThresholdExpressionAndDimensionPtrOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionAndDimensionArgs) ToAnomalySubscriptionThresholdExpressionAndDimensionPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionAndDimensionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionAndDimensionOutput).ToAnomalySubscriptionThresholdExpressionAndDimensionPtrOutputWithContext(ctx)
}

// AnomalySubscriptionThresholdExpressionAndDimensionPtrInput is an input type that accepts AnomalySubscriptionThresholdExpressionAndDimensionArgs, AnomalySubscriptionThresholdExpressionAndDimensionPtr and AnomalySubscriptionThresholdExpressionAndDimensionPtrOutput values.
// You can construct a concrete instance of `AnomalySubscriptionThresholdExpressionAndDimensionPtrInput` via:
//
//	        AnomalySubscriptionThresholdExpressionAndDimensionArgs{...}
//
//	or:
//
//	        nil
type AnomalySubscriptionThresholdExpressionAndDimensionPtrInput interface {
	pulumi.Input

	ToAnomalySubscriptionThresholdExpressionAndDimensionPtrOutput() AnomalySubscriptionThresholdExpressionAndDimensionPtrOutput
	ToAnomalySubscriptionThresholdExpressionAndDimensionPtrOutputWithContext(context.Context) AnomalySubscriptionThresholdExpressionAndDimensionPtrOutput
}

type anomalySubscriptionThresholdExpressionAndDimensionPtrType AnomalySubscriptionThresholdExpressionAndDimensionArgs

func AnomalySubscriptionThresholdExpressionAndDimensionPtr(v *AnomalySubscriptionThresholdExpressionAndDimensionArgs) AnomalySubscriptionThresholdExpressionAndDimensionPtrInput {
	return (*anomalySubscriptionThresholdExpressionAndDimensionPtrType)(v)
}

func (*anomalySubscriptionThresholdExpressionAndDimensionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnomalySubscriptionThresholdExpressionAndDimension)(nil)).Elem()
}

func (i *anomalySubscriptionThresholdExpressionAndDimensionPtrType) ToAnomalySubscriptionThresholdExpressionAndDimensionPtrOutput() AnomalySubscriptionThresholdExpressionAndDimensionPtrOutput {
	return i.ToAnomalySubscriptionThresholdExpressionAndDimensionPtrOutputWithContext(context.Background())
}

func (i *anomalySubscriptionThresholdExpressionAndDimensionPtrType) ToAnomalySubscriptionThresholdExpressionAndDimensionPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionAndDimensionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionAndDimensionPtrOutput)
}

type AnomalySubscriptionThresholdExpressionAndDimensionOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionAndDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionAndDimension)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionAndDimensionOutput) ToAnomalySubscriptionThresholdExpressionAndDimensionOutput() AnomalySubscriptionThresholdExpressionAndDimensionOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionAndDimensionOutput) ToAnomalySubscriptionThresholdExpressionAndDimensionOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionAndDimensionOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionAndDimensionOutput) ToAnomalySubscriptionThresholdExpressionAndDimensionPtrOutput() AnomalySubscriptionThresholdExpressionAndDimensionPtrOutput {
	return o.ToAnomalySubscriptionThresholdExpressionAndDimensionPtrOutputWithContext(context.Background())
}

func (o AnomalySubscriptionThresholdExpressionAndDimensionOutput) ToAnomalySubscriptionThresholdExpressionAndDimensionPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionAndDimensionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnomalySubscriptionThresholdExpressionAndDimension) *AnomalySubscriptionThresholdExpressionAndDimension {
		return &v
	}).(AnomalySubscriptionThresholdExpressionAndDimensionPtrOutput)
}

// Unique name of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionAndDimensionOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionAndDimension) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o AnomalySubscriptionThresholdExpressionAndDimensionOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionAndDimension) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionAndDimensionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionAndDimension) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AnomalySubscriptionThresholdExpressionAndDimensionPtrOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionAndDimensionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnomalySubscriptionThresholdExpressionAndDimension)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionAndDimensionPtrOutput) ToAnomalySubscriptionThresholdExpressionAndDimensionPtrOutput() AnomalySubscriptionThresholdExpressionAndDimensionPtrOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionAndDimensionPtrOutput) ToAnomalySubscriptionThresholdExpressionAndDimensionPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionAndDimensionPtrOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionAndDimensionPtrOutput) Elem() AnomalySubscriptionThresholdExpressionAndDimensionOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionAndDimension) AnomalySubscriptionThresholdExpressionAndDimension {
		if v != nil {
			return *v
		}
		var ret AnomalySubscriptionThresholdExpressionAndDimension
		return ret
	}).(AnomalySubscriptionThresholdExpressionAndDimensionOutput)
}

// Unique name of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionAndDimensionPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionAndDimension) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o AnomalySubscriptionThresholdExpressionAndDimensionPtrOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionAndDimension) []string {
		if v == nil {
			return nil
		}
		return v.MatchOptions
	}).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionAndDimensionPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionAndDimension) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AnomalySubscriptionThresholdExpressionAndTags struct {
	// Key for the tag.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

// AnomalySubscriptionThresholdExpressionAndTagsInput is an input type that accepts AnomalySubscriptionThresholdExpressionAndTagsArgs and AnomalySubscriptionThresholdExpressionAndTagsOutput values.
// You can construct a concrete instance of `AnomalySubscriptionThresholdExpressionAndTagsInput` via:
//
//	AnomalySubscriptionThresholdExpressionAndTagsArgs{...}
type AnomalySubscriptionThresholdExpressionAndTagsInput interface {
	pulumi.Input

	ToAnomalySubscriptionThresholdExpressionAndTagsOutput() AnomalySubscriptionThresholdExpressionAndTagsOutput
	ToAnomalySubscriptionThresholdExpressionAndTagsOutputWithContext(context.Context) AnomalySubscriptionThresholdExpressionAndTagsOutput
}

type AnomalySubscriptionThresholdExpressionAndTagsArgs struct {
	// Key for the tag.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AnomalySubscriptionThresholdExpressionAndTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionAndTags)(nil)).Elem()
}

func (i AnomalySubscriptionThresholdExpressionAndTagsArgs) ToAnomalySubscriptionThresholdExpressionAndTagsOutput() AnomalySubscriptionThresholdExpressionAndTagsOutput {
	return i.ToAnomalySubscriptionThresholdExpressionAndTagsOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionAndTagsArgs) ToAnomalySubscriptionThresholdExpressionAndTagsOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionAndTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionAndTagsOutput)
}

func (i AnomalySubscriptionThresholdExpressionAndTagsArgs) ToAnomalySubscriptionThresholdExpressionAndTagsPtrOutput() AnomalySubscriptionThresholdExpressionAndTagsPtrOutput {
	return i.ToAnomalySubscriptionThresholdExpressionAndTagsPtrOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionAndTagsArgs) ToAnomalySubscriptionThresholdExpressionAndTagsPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionAndTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionAndTagsOutput).ToAnomalySubscriptionThresholdExpressionAndTagsPtrOutputWithContext(ctx)
}

// AnomalySubscriptionThresholdExpressionAndTagsPtrInput is an input type that accepts AnomalySubscriptionThresholdExpressionAndTagsArgs, AnomalySubscriptionThresholdExpressionAndTagsPtr and AnomalySubscriptionThresholdExpressionAndTagsPtrOutput values.
// You can construct a concrete instance of `AnomalySubscriptionThresholdExpressionAndTagsPtrInput` via:
//
//	        AnomalySubscriptionThresholdExpressionAndTagsArgs{...}
//
//	or:
//
//	        nil
type AnomalySubscriptionThresholdExpressionAndTagsPtrInput interface {
	pulumi.Input

	ToAnomalySubscriptionThresholdExpressionAndTagsPtrOutput() AnomalySubscriptionThresholdExpressionAndTagsPtrOutput
	ToAnomalySubscriptionThresholdExpressionAndTagsPtrOutputWithContext(context.Context) AnomalySubscriptionThresholdExpressionAndTagsPtrOutput
}

type anomalySubscriptionThresholdExpressionAndTagsPtrType AnomalySubscriptionThresholdExpressionAndTagsArgs

func AnomalySubscriptionThresholdExpressionAndTagsPtr(v *AnomalySubscriptionThresholdExpressionAndTagsArgs) AnomalySubscriptionThresholdExpressionAndTagsPtrInput {
	return (*anomalySubscriptionThresholdExpressionAndTagsPtrType)(v)
}

func (*anomalySubscriptionThresholdExpressionAndTagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnomalySubscriptionThresholdExpressionAndTags)(nil)).Elem()
}

func (i *anomalySubscriptionThresholdExpressionAndTagsPtrType) ToAnomalySubscriptionThresholdExpressionAndTagsPtrOutput() AnomalySubscriptionThresholdExpressionAndTagsPtrOutput {
	return i.ToAnomalySubscriptionThresholdExpressionAndTagsPtrOutputWithContext(context.Background())
}

func (i *anomalySubscriptionThresholdExpressionAndTagsPtrType) ToAnomalySubscriptionThresholdExpressionAndTagsPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionAndTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionAndTagsPtrOutput)
}

type AnomalySubscriptionThresholdExpressionAndTagsOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionAndTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionAndTags)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionAndTagsOutput) ToAnomalySubscriptionThresholdExpressionAndTagsOutput() AnomalySubscriptionThresholdExpressionAndTagsOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionAndTagsOutput) ToAnomalySubscriptionThresholdExpressionAndTagsOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionAndTagsOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionAndTagsOutput) ToAnomalySubscriptionThresholdExpressionAndTagsPtrOutput() AnomalySubscriptionThresholdExpressionAndTagsPtrOutput {
	return o.ToAnomalySubscriptionThresholdExpressionAndTagsPtrOutputWithContext(context.Background())
}

func (o AnomalySubscriptionThresholdExpressionAndTagsOutput) ToAnomalySubscriptionThresholdExpressionAndTagsPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionAndTagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnomalySubscriptionThresholdExpressionAndTags) *AnomalySubscriptionThresholdExpressionAndTags {
		return &v
	}).(AnomalySubscriptionThresholdExpressionAndTagsPtrOutput)
}

// Key for the tag.
func (o AnomalySubscriptionThresholdExpressionAndTagsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionAndTags) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o AnomalySubscriptionThresholdExpressionAndTagsOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionAndTags) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionAndTagsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionAndTags) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AnomalySubscriptionThresholdExpressionAndTagsPtrOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionAndTagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnomalySubscriptionThresholdExpressionAndTags)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionAndTagsPtrOutput) ToAnomalySubscriptionThresholdExpressionAndTagsPtrOutput() AnomalySubscriptionThresholdExpressionAndTagsPtrOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionAndTagsPtrOutput) ToAnomalySubscriptionThresholdExpressionAndTagsPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionAndTagsPtrOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionAndTagsPtrOutput) Elem() AnomalySubscriptionThresholdExpressionAndTagsOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionAndTags) AnomalySubscriptionThresholdExpressionAndTags {
		if v != nil {
			return *v
		}
		var ret AnomalySubscriptionThresholdExpressionAndTags
		return ret
	}).(AnomalySubscriptionThresholdExpressionAndTagsOutput)
}

// Key for the tag.
func (o AnomalySubscriptionThresholdExpressionAndTagsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionAndTags) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o AnomalySubscriptionThresholdExpressionAndTagsPtrOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionAndTags) []string {
		if v == nil {
			return nil
		}
		return v.MatchOptions
	}).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionAndTagsPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionAndTags) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AnomalySubscriptionThresholdExpressionCostCategory struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

// AnomalySubscriptionThresholdExpressionCostCategoryInput is an input type that accepts AnomalySubscriptionThresholdExpressionCostCategoryArgs and AnomalySubscriptionThresholdExpressionCostCategoryOutput values.
// You can construct a concrete instance of `AnomalySubscriptionThresholdExpressionCostCategoryInput` via:
//
//	AnomalySubscriptionThresholdExpressionCostCategoryArgs{...}
type AnomalySubscriptionThresholdExpressionCostCategoryInput interface {
	pulumi.Input

	ToAnomalySubscriptionThresholdExpressionCostCategoryOutput() AnomalySubscriptionThresholdExpressionCostCategoryOutput
	ToAnomalySubscriptionThresholdExpressionCostCategoryOutputWithContext(context.Context) AnomalySubscriptionThresholdExpressionCostCategoryOutput
}

type AnomalySubscriptionThresholdExpressionCostCategoryArgs struct {
	// Unique name of the Cost Category.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AnomalySubscriptionThresholdExpressionCostCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionCostCategory)(nil)).Elem()
}

func (i AnomalySubscriptionThresholdExpressionCostCategoryArgs) ToAnomalySubscriptionThresholdExpressionCostCategoryOutput() AnomalySubscriptionThresholdExpressionCostCategoryOutput {
	return i.ToAnomalySubscriptionThresholdExpressionCostCategoryOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionCostCategoryArgs) ToAnomalySubscriptionThresholdExpressionCostCategoryOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionCostCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionCostCategoryOutput)
}

func (i AnomalySubscriptionThresholdExpressionCostCategoryArgs) ToAnomalySubscriptionThresholdExpressionCostCategoryPtrOutput() AnomalySubscriptionThresholdExpressionCostCategoryPtrOutput {
	return i.ToAnomalySubscriptionThresholdExpressionCostCategoryPtrOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionCostCategoryArgs) ToAnomalySubscriptionThresholdExpressionCostCategoryPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionCostCategoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionCostCategoryOutput).ToAnomalySubscriptionThresholdExpressionCostCategoryPtrOutputWithContext(ctx)
}

// AnomalySubscriptionThresholdExpressionCostCategoryPtrInput is an input type that accepts AnomalySubscriptionThresholdExpressionCostCategoryArgs, AnomalySubscriptionThresholdExpressionCostCategoryPtr and AnomalySubscriptionThresholdExpressionCostCategoryPtrOutput values.
// You can construct a concrete instance of `AnomalySubscriptionThresholdExpressionCostCategoryPtrInput` via:
//
//	        AnomalySubscriptionThresholdExpressionCostCategoryArgs{...}
//
//	or:
//
//	        nil
type AnomalySubscriptionThresholdExpressionCostCategoryPtrInput interface {
	pulumi.Input

	ToAnomalySubscriptionThresholdExpressionCostCategoryPtrOutput() AnomalySubscriptionThresholdExpressionCostCategoryPtrOutput
	ToAnomalySubscriptionThresholdExpressionCostCategoryPtrOutputWithContext(context.Context) AnomalySubscriptionThresholdExpressionCostCategoryPtrOutput
}

type anomalySubscriptionThresholdExpressionCostCategoryPtrType AnomalySubscriptionThresholdExpressionCostCategoryArgs

func AnomalySubscriptionThresholdExpressionCostCategoryPtr(v *AnomalySubscriptionThresholdExpressionCostCategoryArgs) AnomalySubscriptionThresholdExpressionCostCategoryPtrInput {
	return (*anomalySubscriptionThresholdExpressionCostCategoryPtrType)(v)
}

func (*anomalySubscriptionThresholdExpressionCostCategoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnomalySubscriptionThresholdExpressionCostCategory)(nil)).Elem()
}

func (i *anomalySubscriptionThresholdExpressionCostCategoryPtrType) ToAnomalySubscriptionThresholdExpressionCostCategoryPtrOutput() AnomalySubscriptionThresholdExpressionCostCategoryPtrOutput {
	return i.ToAnomalySubscriptionThresholdExpressionCostCategoryPtrOutputWithContext(context.Background())
}

func (i *anomalySubscriptionThresholdExpressionCostCategoryPtrType) ToAnomalySubscriptionThresholdExpressionCostCategoryPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionCostCategoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionCostCategoryPtrOutput)
}

type AnomalySubscriptionThresholdExpressionCostCategoryOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionCostCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionCostCategory)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionCostCategoryOutput) ToAnomalySubscriptionThresholdExpressionCostCategoryOutput() AnomalySubscriptionThresholdExpressionCostCategoryOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionCostCategoryOutput) ToAnomalySubscriptionThresholdExpressionCostCategoryOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionCostCategoryOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionCostCategoryOutput) ToAnomalySubscriptionThresholdExpressionCostCategoryPtrOutput() AnomalySubscriptionThresholdExpressionCostCategoryPtrOutput {
	return o.ToAnomalySubscriptionThresholdExpressionCostCategoryPtrOutputWithContext(context.Background())
}

func (o AnomalySubscriptionThresholdExpressionCostCategoryOutput) ToAnomalySubscriptionThresholdExpressionCostCategoryPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionCostCategoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnomalySubscriptionThresholdExpressionCostCategory) *AnomalySubscriptionThresholdExpressionCostCategory {
		return &v
	}).(AnomalySubscriptionThresholdExpressionCostCategoryPtrOutput)
}

// Unique name of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionCostCategoryOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionCostCategory) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o AnomalySubscriptionThresholdExpressionCostCategoryOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionCostCategory) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionCostCategoryOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionCostCategory) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AnomalySubscriptionThresholdExpressionCostCategoryPtrOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionCostCategoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnomalySubscriptionThresholdExpressionCostCategory)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionCostCategoryPtrOutput) ToAnomalySubscriptionThresholdExpressionCostCategoryPtrOutput() AnomalySubscriptionThresholdExpressionCostCategoryPtrOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionCostCategoryPtrOutput) ToAnomalySubscriptionThresholdExpressionCostCategoryPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionCostCategoryPtrOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionCostCategoryPtrOutput) Elem() AnomalySubscriptionThresholdExpressionCostCategoryOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionCostCategory) AnomalySubscriptionThresholdExpressionCostCategory {
		if v != nil {
			return *v
		}
		var ret AnomalySubscriptionThresholdExpressionCostCategory
		return ret
	}).(AnomalySubscriptionThresholdExpressionCostCategoryOutput)
}

// Unique name of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionCostCategoryPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionCostCategory) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o AnomalySubscriptionThresholdExpressionCostCategoryPtrOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionCostCategory) []string {
		if v == nil {
			return nil
		}
		return v.MatchOptions
	}).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionCostCategoryPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionCostCategory) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AnomalySubscriptionThresholdExpressionDimension struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

// AnomalySubscriptionThresholdExpressionDimensionInput is an input type that accepts AnomalySubscriptionThresholdExpressionDimensionArgs and AnomalySubscriptionThresholdExpressionDimensionOutput values.
// You can construct a concrete instance of `AnomalySubscriptionThresholdExpressionDimensionInput` via:
//
//	AnomalySubscriptionThresholdExpressionDimensionArgs{...}
type AnomalySubscriptionThresholdExpressionDimensionInput interface {
	pulumi.Input

	ToAnomalySubscriptionThresholdExpressionDimensionOutput() AnomalySubscriptionThresholdExpressionDimensionOutput
	ToAnomalySubscriptionThresholdExpressionDimensionOutputWithContext(context.Context) AnomalySubscriptionThresholdExpressionDimensionOutput
}

type AnomalySubscriptionThresholdExpressionDimensionArgs struct {
	// Unique name of the Cost Category.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AnomalySubscriptionThresholdExpressionDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionDimension)(nil)).Elem()
}

func (i AnomalySubscriptionThresholdExpressionDimensionArgs) ToAnomalySubscriptionThresholdExpressionDimensionOutput() AnomalySubscriptionThresholdExpressionDimensionOutput {
	return i.ToAnomalySubscriptionThresholdExpressionDimensionOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionDimensionArgs) ToAnomalySubscriptionThresholdExpressionDimensionOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionDimensionOutput)
}

func (i AnomalySubscriptionThresholdExpressionDimensionArgs) ToAnomalySubscriptionThresholdExpressionDimensionPtrOutput() AnomalySubscriptionThresholdExpressionDimensionPtrOutput {
	return i.ToAnomalySubscriptionThresholdExpressionDimensionPtrOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionDimensionArgs) ToAnomalySubscriptionThresholdExpressionDimensionPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionDimensionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionDimensionOutput).ToAnomalySubscriptionThresholdExpressionDimensionPtrOutputWithContext(ctx)
}

// AnomalySubscriptionThresholdExpressionDimensionPtrInput is an input type that accepts AnomalySubscriptionThresholdExpressionDimensionArgs, AnomalySubscriptionThresholdExpressionDimensionPtr and AnomalySubscriptionThresholdExpressionDimensionPtrOutput values.
// You can construct a concrete instance of `AnomalySubscriptionThresholdExpressionDimensionPtrInput` via:
//
//	        AnomalySubscriptionThresholdExpressionDimensionArgs{...}
//
//	or:
//
//	        nil
type AnomalySubscriptionThresholdExpressionDimensionPtrInput interface {
	pulumi.Input

	ToAnomalySubscriptionThresholdExpressionDimensionPtrOutput() AnomalySubscriptionThresholdExpressionDimensionPtrOutput
	ToAnomalySubscriptionThresholdExpressionDimensionPtrOutputWithContext(context.Context) AnomalySubscriptionThresholdExpressionDimensionPtrOutput
}

type anomalySubscriptionThresholdExpressionDimensionPtrType AnomalySubscriptionThresholdExpressionDimensionArgs

func AnomalySubscriptionThresholdExpressionDimensionPtr(v *AnomalySubscriptionThresholdExpressionDimensionArgs) AnomalySubscriptionThresholdExpressionDimensionPtrInput {
	return (*anomalySubscriptionThresholdExpressionDimensionPtrType)(v)
}

func (*anomalySubscriptionThresholdExpressionDimensionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnomalySubscriptionThresholdExpressionDimension)(nil)).Elem()
}

func (i *anomalySubscriptionThresholdExpressionDimensionPtrType) ToAnomalySubscriptionThresholdExpressionDimensionPtrOutput() AnomalySubscriptionThresholdExpressionDimensionPtrOutput {
	return i.ToAnomalySubscriptionThresholdExpressionDimensionPtrOutputWithContext(context.Background())
}

func (i *anomalySubscriptionThresholdExpressionDimensionPtrType) ToAnomalySubscriptionThresholdExpressionDimensionPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionDimensionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionDimensionPtrOutput)
}

type AnomalySubscriptionThresholdExpressionDimensionOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionDimension)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionDimensionOutput) ToAnomalySubscriptionThresholdExpressionDimensionOutput() AnomalySubscriptionThresholdExpressionDimensionOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionDimensionOutput) ToAnomalySubscriptionThresholdExpressionDimensionOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionDimensionOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionDimensionOutput) ToAnomalySubscriptionThresholdExpressionDimensionPtrOutput() AnomalySubscriptionThresholdExpressionDimensionPtrOutput {
	return o.ToAnomalySubscriptionThresholdExpressionDimensionPtrOutputWithContext(context.Background())
}

func (o AnomalySubscriptionThresholdExpressionDimensionOutput) ToAnomalySubscriptionThresholdExpressionDimensionPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionDimensionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnomalySubscriptionThresholdExpressionDimension) *AnomalySubscriptionThresholdExpressionDimension {
		return &v
	}).(AnomalySubscriptionThresholdExpressionDimensionPtrOutput)
}

// Unique name of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionDimensionOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionDimension) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o AnomalySubscriptionThresholdExpressionDimensionOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionDimension) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionDimensionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionDimension) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AnomalySubscriptionThresholdExpressionDimensionPtrOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionDimensionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnomalySubscriptionThresholdExpressionDimension)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionDimensionPtrOutput) ToAnomalySubscriptionThresholdExpressionDimensionPtrOutput() AnomalySubscriptionThresholdExpressionDimensionPtrOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionDimensionPtrOutput) ToAnomalySubscriptionThresholdExpressionDimensionPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionDimensionPtrOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionDimensionPtrOutput) Elem() AnomalySubscriptionThresholdExpressionDimensionOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionDimension) AnomalySubscriptionThresholdExpressionDimension {
		if v != nil {
			return *v
		}
		var ret AnomalySubscriptionThresholdExpressionDimension
		return ret
	}).(AnomalySubscriptionThresholdExpressionDimensionOutput)
}

// Unique name of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionDimensionPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionDimension) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o AnomalySubscriptionThresholdExpressionDimensionPtrOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionDimension) []string {
		if v == nil {
			return nil
		}
		return v.MatchOptions
	}).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionDimensionPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionDimension) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AnomalySubscriptionThresholdExpressionNot struct {
	// Configuration block for the filter that's based on  values. See Cost Category below.
	CostCategory *AnomalySubscriptionThresholdExpressionNotCostCategory `pulumi:"costCategory"`
	// Configuration block for the specific Dimension to use for.
	Dimension *AnomalySubscriptionThresholdExpressionNotDimension `pulumi:"dimension"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags *AnomalySubscriptionThresholdExpressionNotTags `pulumi:"tags"`
}

// AnomalySubscriptionThresholdExpressionNotInput is an input type that accepts AnomalySubscriptionThresholdExpressionNotArgs and AnomalySubscriptionThresholdExpressionNotOutput values.
// You can construct a concrete instance of `AnomalySubscriptionThresholdExpressionNotInput` via:
//
//	AnomalySubscriptionThresholdExpressionNotArgs{...}
type AnomalySubscriptionThresholdExpressionNotInput interface {
	pulumi.Input

	ToAnomalySubscriptionThresholdExpressionNotOutput() AnomalySubscriptionThresholdExpressionNotOutput
	ToAnomalySubscriptionThresholdExpressionNotOutputWithContext(context.Context) AnomalySubscriptionThresholdExpressionNotOutput
}

type AnomalySubscriptionThresholdExpressionNotArgs struct {
	// Configuration block for the filter that's based on  values. See Cost Category below.
	CostCategory AnomalySubscriptionThresholdExpressionNotCostCategoryPtrInput `pulumi:"costCategory"`
	// Configuration block for the specific Dimension to use for.
	Dimension AnomalySubscriptionThresholdExpressionNotDimensionPtrInput `pulumi:"dimension"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags AnomalySubscriptionThresholdExpressionNotTagsPtrInput `pulumi:"tags"`
}

func (AnomalySubscriptionThresholdExpressionNotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionNot)(nil)).Elem()
}

func (i AnomalySubscriptionThresholdExpressionNotArgs) ToAnomalySubscriptionThresholdExpressionNotOutput() AnomalySubscriptionThresholdExpressionNotOutput {
	return i.ToAnomalySubscriptionThresholdExpressionNotOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionNotArgs) ToAnomalySubscriptionThresholdExpressionNotOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionNotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionNotOutput)
}

func (i AnomalySubscriptionThresholdExpressionNotArgs) ToAnomalySubscriptionThresholdExpressionNotPtrOutput() AnomalySubscriptionThresholdExpressionNotPtrOutput {
	return i.ToAnomalySubscriptionThresholdExpressionNotPtrOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionNotArgs) ToAnomalySubscriptionThresholdExpressionNotPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionNotPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionNotOutput).ToAnomalySubscriptionThresholdExpressionNotPtrOutputWithContext(ctx)
}

// AnomalySubscriptionThresholdExpressionNotPtrInput is an input type that accepts AnomalySubscriptionThresholdExpressionNotArgs, AnomalySubscriptionThresholdExpressionNotPtr and AnomalySubscriptionThresholdExpressionNotPtrOutput values.
// You can construct a concrete instance of `AnomalySubscriptionThresholdExpressionNotPtrInput` via:
//
//	        AnomalySubscriptionThresholdExpressionNotArgs{...}
//
//	or:
//
//	        nil
type AnomalySubscriptionThresholdExpressionNotPtrInput interface {
	pulumi.Input

	ToAnomalySubscriptionThresholdExpressionNotPtrOutput() AnomalySubscriptionThresholdExpressionNotPtrOutput
	ToAnomalySubscriptionThresholdExpressionNotPtrOutputWithContext(context.Context) AnomalySubscriptionThresholdExpressionNotPtrOutput
}

type anomalySubscriptionThresholdExpressionNotPtrType AnomalySubscriptionThresholdExpressionNotArgs

func AnomalySubscriptionThresholdExpressionNotPtr(v *AnomalySubscriptionThresholdExpressionNotArgs) AnomalySubscriptionThresholdExpressionNotPtrInput {
	return (*anomalySubscriptionThresholdExpressionNotPtrType)(v)
}

func (*anomalySubscriptionThresholdExpressionNotPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnomalySubscriptionThresholdExpressionNot)(nil)).Elem()
}

func (i *anomalySubscriptionThresholdExpressionNotPtrType) ToAnomalySubscriptionThresholdExpressionNotPtrOutput() AnomalySubscriptionThresholdExpressionNotPtrOutput {
	return i.ToAnomalySubscriptionThresholdExpressionNotPtrOutputWithContext(context.Background())
}

func (i *anomalySubscriptionThresholdExpressionNotPtrType) ToAnomalySubscriptionThresholdExpressionNotPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionNotPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionNotPtrOutput)
}

type AnomalySubscriptionThresholdExpressionNotOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionNotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionNot)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionNotOutput) ToAnomalySubscriptionThresholdExpressionNotOutput() AnomalySubscriptionThresholdExpressionNotOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionNotOutput) ToAnomalySubscriptionThresholdExpressionNotOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionNotOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionNotOutput) ToAnomalySubscriptionThresholdExpressionNotPtrOutput() AnomalySubscriptionThresholdExpressionNotPtrOutput {
	return o.ToAnomalySubscriptionThresholdExpressionNotPtrOutputWithContext(context.Background())
}

func (o AnomalySubscriptionThresholdExpressionNotOutput) ToAnomalySubscriptionThresholdExpressionNotPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionNotPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnomalySubscriptionThresholdExpressionNot) *AnomalySubscriptionThresholdExpressionNot {
		return &v
	}).(AnomalySubscriptionThresholdExpressionNotPtrOutput)
}

// Configuration block for the filter that's based on  values. See Cost Category below.
func (o AnomalySubscriptionThresholdExpressionNotOutput) CostCategory() AnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionNot) *AnomalySubscriptionThresholdExpressionNotCostCategory {
		return v.CostCategory
	}).(AnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutput)
}

// Configuration block for the specific Dimension to use for.
func (o AnomalySubscriptionThresholdExpressionNotOutput) Dimension() AnomalySubscriptionThresholdExpressionNotDimensionPtrOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionNot) *AnomalySubscriptionThresholdExpressionNotDimension {
		return v.Dimension
	}).(AnomalySubscriptionThresholdExpressionNotDimensionPtrOutput)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o AnomalySubscriptionThresholdExpressionNotOutput) Tags() AnomalySubscriptionThresholdExpressionNotTagsPtrOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionNot) *AnomalySubscriptionThresholdExpressionNotTags {
		return v.Tags
	}).(AnomalySubscriptionThresholdExpressionNotTagsPtrOutput)
}

type AnomalySubscriptionThresholdExpressionNotPtrOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionNotPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnomalySubscriptionThresholdExpressionNot)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionNotPtrOutput) ToAnomalySubscriptionThresholdExpressionNotPtrOutput() AnomalySubscriptionThresholdExpressionNotPtrOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionNotPtrOutput) ToAnomalySubscriptionThresholdExpressionNotPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionNotPtrOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionNotPtrOutput) Elem() AnomalySubscriptionThresholdExpressionNotOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionNot) AnomalySubscriptionThresholdExpressionNot {
		if v != nil {
			return *v
		}
		var ret AnomalySubscriptionThresholdExpressionNot
		return ret
	}).(AnomalySubscriptionThresholdExpressionNotOutput)
}

// Configuration block for the filter that's based on  values. See Cost Category below.
func (o AnomalySubscriptionThresholdExpressionNotPtrOutput) CostCategory() AnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionNot) *AnomalySubscriptionThresholdExpressionNotCostCategory {
		if v == nil {
			return nil
		}
		return v.CostCategory
	}).(AnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutput)
}

// Configuration block for the specific Dimension to use for.
func (o AnomalySubscriptionThresholdExpressionNotPtrOutput) Dimension() AnomalySubscriptionThresholdExpressionNotDimensionPtrOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionNot) *AnomalySubscriptionThresholdExpressionNotDimension {
		if v == nil {
			return nil
		}
		return v.Dimension
	}).(AnomalySubscriptionThresholdExpressionNotDimensionPtrOutput)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o AnomalySubscriptionThresholdExpressionNotPtrOutput) Tags() AnomalySubscriptionThresholdExpressionNotTagsPtrOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionNot) *AnomalySubscriptionThresholdExpressionNotTags {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(AnomalySubscriptionThresholdExpressionNotTagsPtrOutput)
}

type AnomalySubscriptionThresholdExpressionNotCostCategory struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

// AnomalySubscriptionThresholdExpressionNotCostCategoryInput is an input type that accepts AnomalySubscriptionThresholdExpressionNotCostCategoryArgs and AnomalySubscriptionThresholdExpressionNotCostCategoryOutput values.
// You can construct a concrete instance of `AnomalySubscriptionThresholdExpressionNotCostCategoryInput` via:
//
//	AnomalySubscriptionThresholdExpressionNotCostCategoryArgs{...}
type AnomalySubscriptionThresholdExpressionNotCostCategoryInput interface {
	pulumi.Input

	ToAnomalySubscriptionThresholdExpressionNotCostCategoryOutput() AnomalySubscriptionThresholdExpressionNotCostCategoryOutput
	ToAnomalySubscriptionThresholdExpressionNotCostCategoryOutputWithContext(context.Context) AnomalySubscriptionThresholdExpressionNotCostCategoryOutput
}

type AnomalySubscriptionThresholdExpressionNotCostCategoryArgs struct {
	// Unique name of the Cost Category.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AnomalySubscriptionThresholdExpressionNotCostCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionNotCostCategory)(nil)).Elem()
}

func (i AnomalySubscriptionThresholdExpressionNotCostCategoryArgs) ToAnomalySubscriptionThresholdExpressionNotCostCategoryOutput() AnomalySubscriptionThresholdExpressionNotCostCategoryOutput {
	return i.ToAnomalySubscriptionThresholdExpressionNotCostCategoryOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionNotCostCategoryArgs) ToAnomalySubscriptionThresholdExpressionNotCostCategoryOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionNotCostCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionNotCostCategoryOutput)
}

func (i AnomalySubscriptionThresholdExpressionNotCostCategoryArgs) ToAnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutput() AnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutput {
	return i.ToAnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionNotCostCategoryArgs) ToAnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionNotCostCategoryOutput).ToAnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutputWithContext(ctx)
}

// AnomalySubscriptionThresholdExpressionNotCostCategoryPtrInput is an input type that accepts AnomalySubscriptionThresholdExpressionNotCostCategoryArgs, AnomalySubscriptionThresholdExpressionNotCostCategoryPtr and AnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutput values.
// You can construct a concrete instance of `AnomalySubscriptionThresholdExpressionNotCostCategoryPtrInput` via:
//
//	        AnomalySubscriptionThresholdExpressionNotCostCategoryArgs{...}
//
//	or:
//
//	        nil
type AnomalySubscriptionThresholdExpressionNotCostCategoryPtrInput interface {
	pulumi.Input

	ToAnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutput() AnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutput
	ToAnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutputWithContext(context.Context) AnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutput
}

type anomalySubscriptionThresholdExpressionNotCostCategoryPtrType AnomalySubscriptionThresholdExpressionNotCostCategoryArgs

func AnomalySubscriptionThresholdExpressionNotCostCategoryPtr(v *AnomalySubscriptionThresholdExpressionNotCostCategoryArgs) AnomalySubscriptionThresholdExpressionNotCostCategoryPtrInput {
	return (*anomalySubscriptionThresholdExpressionNotCostCategoryPtrType)(v)
}

func (*anomalySubscriptionThresholdExpressionNotCostCategoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnomalySubscriptionThresholdExpressionNotCostCategory)(nil)).Elem()
}

func (i *anomalySubscriptionThresholdExpressionNotCostCategoryPtrType) ToAnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutput() AnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutput {
	return i.ToAnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutputWithContext(context.Background())
}

func (i *anomalySubscriptionThresholdExpressionNotCostCategoryPtrType) ToAnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutput)
}

type AnomalySubscriptionThresholdExpressionNotCostCategoryOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionNotCostCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionNotCostCategory)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionNotCostCategoryOutput) ToAnomalySubscriptionThresholdExpressionNotCostCategoryOutput() AnomalySubscriptionThresholdExpressionNotCostCategoryOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionNotCostCategoryOutput) ToAnomalySubscriptionThresholdExpressionNotCostCategoryOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionNotCostCategoryOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionNotCostCategoryOutput) ToAnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutput() AnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutput {
	return o.ToAnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutputWithContext(context.Background())
}

func (o AnomalySubscriptionThresholdExpressionNotCostCategoryOutput) ToAnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnomalySubscriptionThresholdExpressionNotCostCategory) *AnomalySubscriptionThresholdExpressionNotCostCategory {
		return &v
	}).(AnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutput)
}

// Unique name of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionNotCostCategoryOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionNotCostCategory) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o AnomalySubscriptionThresholdExpressionNotCostCategoryOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionNotCostCategory) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionNotCostCategoryOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionNotCostCategory) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnomalySubscriptionThresholdExpressionNotCostCategory)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutput) ToAnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutput() AnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutput) ToAnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutput) Elem() AnomalySubscriptionThresholdExpressionNotCostCategoryOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionNotCostCategory) AnomalySubscriptionThresholdExpressionNotCostCategory {
		if v != nil {
			return *v
		}
		var ret AnomalySubscriptionThresholdExpressionNotCostCategory
		return ret
	}).(AnomalySubscriptionThresholdExpressionNotCostCategoryOutput)
}

// Unique name of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionNotCostCategory) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o AnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionNotCostCategory) []string {
		if v == nil {
			return nil
		}
		return v.MatchOptions
	}).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionNotCostCategory) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AnomalySubscriptionThresholdExpressionNotDimension struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

// AnomalySubscriptionThresholdExpressionNotDimensionInput is an input type that accepts AnomalySubscriptionThresholdExpressionNotDimensionArgs and AnomalySubscriptionThresholdExpressionNotDimensionOutput values.
// You can construct a concrete instance of `AnomalySubscriptionThresholdExpressionNotDimensionInput` via:
//
//	AnomalySubscriptionThresholdExpressionNotDimensionArgs{...}
type AnomalySubscriptionThresholdExpressionNotDimensionInput interface {
	pulumi.Input

	ToAnomalySubscriptionThresholdExpressionNotDimensionOutput() AnomalySubscriptionThresholdExpressionNotDimensionOutput
	ToAnomalySubscriptionThresholdExpressionNotDimensionOutputWithContext(context.Context) AnomalySubscriptionThresholdExpressionNotDimensionOutput
}

type AnomalySubscriptionThresholdExpressionNotDimensionArgs struct {
	// Unique name of the Cost Category.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AnomalySubscriptionThresholdExpressionNotDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionNotDimension)(nil)).Elem()
}

func (i AnomalySubscriptionThresholdExpressionNotDimensionArgs) ToAnomalySubscriptionThresholdExpressionNotDimensionOutput() AnomalySubscriptionThresholdExpressionNotDimensionOutput {
	return i.ToAnomalySubscriptionThresholdExpressionNotDimensionOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionNotDimensionArgs) ToAnomalySubscriptionThresholdExpressionNotDimensionOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionNotDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionNotDimensionOutput)
}

func (i AnomalySubscriptionThresholdExpressionNotDimensionArgs) ToAnomalySubscriptionThresholdExpressionNotDimensionPtrOutput() AnomalySubscriptionThresholdExpressionNotDimensionPtrOutput {
	return i.ToAnomalySubscriptionThresholdExpressionNotDimensionPtrOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionNotDimensionArgs) ToAnomalySubscriptionThresholdExpressionNotDimensionPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionNotDimensionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionNotDimensionOutput).ToAnomalySubscriptionThresholdExpressionNotDimensionPtrOutputWithContext(ctx)
}

// AnomalySubscriptionThresholdExpressionNotDimensionPtrInput is an input type that accepts AnomalySubscriptionThresholdExpressionNotDimensionArgs, AnomalySubscriptionThresholdExpressionNotDimensionPtr and AnomalySubscriptionThresholdExpressionNotDimensionPtrOutput values.
// You can construct a concrete instance of `AnomalySubscriptionThresholdExpressionNotDimensionPtrInput` via:
//
//	        AnomalySubscriptionThresholdExpressionNotDimensionArgs{...}
//
//	or:
//
//	        nil
type AnomalySubscriptionThresholdExpressionNotDimensionPtrInput interface {
	pulumi.Input

	ToAnomalySubscriptionThresholdExpressionNotDimensionPtrOutput() AnomalySubscriptionThresholdExpressionNotDimensionPtrOutput
	ToAnomalySubscriptionThresholdExpressionNotDimensionPtrOutputWithContext(context.Context) AnomalySubscriptionThresholdExpressionNotDimensionPtrOutput
}

type anomalySubscriptionThresholdExpressionNotDimensionPtrType AnomalySubscriptionThresholdExpressionNotDimensionArgs

func AnomalySubscriptionThresholdExpressionNotDimensionPtr(v *AnomalySubscriptionThresholdExpressionNotDimensionArgs) AnomalySubscriptionThresholdExpressionNotDimensionPtrInput {
	return (*anomalySubscriptionThresholdExpressionNotDimensionPtrType)(v)
}

func (*anomalySubscriptionThresholdExpressionNotDimensionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnomalySubscriptionThresholdExpressionNotDimension)(nil)).Elem()
}

func (i *anomalySubscriptionThresholdExpressionNotDimensionPtrType) ToAnomalySubscriptionThresholdExpressionNotDimensionPtrOutput() AnomalySubscriptionThresholdExpressionNotDimensionPtrOutput {
	return i.ToAnomalySubscriptionThresholdExpressionNotDimensionPtrOutputWithContext(context.Background())
}

func (i *anomalySubscriptionThresholdExpressionNotDimensionPtrType) ToAnomalySubscriptionThresholdExpressionNotDimensionPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionNotDimensionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionNotDimensionPtrOutput)
}

type AnomalySubscriptionThresholdExpressionNotDimensionOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionNotDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionNotDimension)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionNotDimensionOutput) ToAnomalySubscriptionThresholdExpressionNotDimensionOutput() AnomalySubscriptionThresholdExpressionNotDimensionOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionNotDimensionOutput) ToAnomalySubscriptionThresholdExpressionNotDimensionOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionNotDimensionOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionNotDimensionOutput) ToAnomalySubscriptionThresholdExpressionNotDimensionPtrOutput() AnomalySubscriptionThresholdExpressionNotDimensionPtrOutput {
	return o.ToAnomalySubscriptionThresholdExpressionNotDimensionPtrOutputWithContext(context.Background())
}

func (o AnomalySubscriptionThresholdExpressionNotDimensionOutput) ToAnomalySubscriptionThresholdExpressionNotDimensionPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionNotDimensionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnomalySubscriptionThresholdExpressionNotDimension) *AnomalySubscriptionThresholdExpressionNotDimension {
		return &v
	}).(AnomalySubscriptionThresholdExpressionNotDimensionPtrOutput)
}

// Unique name of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionNotDimensionOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionNotDimension) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o AnomalySubscriptionThresholdExpressionNotDimensionOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionNotDimension) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionNotDimensionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionNotDimension) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AnomalySubscriptionThresholdExpressionNotDimensionPtrOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionNotDimensionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnomalySubscriptionThresholdExpressionNotDimension)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionNotDimensionPtrOutput) ToAnomalySubscriptionThresholdExpressionNotDimensionPtrOutput() AnomalySubscriptionThresholdExpressionNotDimensionPtrOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionNotDimensionPtrOutput) ToAnomalySubscriptionThresholdExpressionNotDimensionPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionNotDimensionPtrOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionNotDimensionPtrOutput) Elem() AnomalySubscriptionThresholdExpressionNotDimensionOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionNotDimension) AnomalySubscriptionThresholdExpressionNotDimension {
		if v != nil {
			return *v
		}
		var ret AnomalySubscriptionThresholdExpressionNotDimension
		return ret
	}).(AnomalySubscriptionThresholdExpressionNotDimensionOutput)
}

// Unique name of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionNotDimensionPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionNotDimension) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o AnomalySubscriptionThresholdExpressionNotDimensionPtrOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionNotDimension) []string {
		if v == nil {
			return nil
		}
		return v.MatchOptions
	}).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionNotDimensionPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionNotDimension) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AnomalySubscriptionThresholdExpressionNotTags struct {
	// Key for the tag.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

// AnomalySubscriptionThresholdExpressionNotTagsInput is an input type that accepts AnomalySubscriptionThresholdExpressionNotTagsArgs and AnomalySubscriptionThresholdExpressionNotTagsOutput values.
// You can construct a concrete instance of `AnomalySubscriptionThresholdExpressionNotTagsInput` via:
//
//	AnomalySubscriptionThresholdExpressionNotTagsArgs{...}
type AnomalySubscriptionThresholdExpressionNotTagsInput interface {
	pulumi.Input

	ToAnomalySubscriptionThresholdExpressionNotTagsOutput() AnomalySubscriptionThresholdExpressionNotTagsOutput
	ToAnomalySubscriptionThresholdExpressionNotTagsOutputWithContext(context.Context) AnomalySubscriptionThresholdExpressionNotTagsOutput
}

type AnomalySubscriptionThresholdExpressionNotTagsArgs struct {
	// Key for the tag.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AnomalySubscriptionThresholdExpressionNotTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionNotTags)(nil)).Elem()
}

func (i AnomalySubscriptionThresholdExpressionNotTagsArgs) ToAnomalySubscriptionThresholdExpressionNotTagsOutput() AnomalySubscriptionThresholdExpressionNotTagsOutput {
	return i.ToAnomalySubscriptionThresholdExpressionNotTagsOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionNotTagsArgs) ToAnomalySubscriptionThresholdExpressionNotTagsOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionNotTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionNotTagsOutput)
}

func (i AnomalySubscriptionThresholdExpressionNotTagsArgs) ToAnomalySubscriptionThresholdExpressionNotTagsPtrOutput() AnomalySubscriptionThresholdExpressionNotTagsPtrOutput {
	return i.ToAnomalySubscriptionThresholdExpressionNotTagsPtrOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionNotTagsArgs) ToAnomalySubscriptionThresholdExpressionNotTagsPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionNotTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionNotTagsOutput).ToAnomalySubscriptionThresholdExpressionNotTagsPtrOutputWithContext(ctx)
}

// AnomalySubscriptionThresholdExpressionNotTagsPtrInput is an input type that accepts AnomalySubscriptionThresholdExpressionNotTagsArgs, AnomalySubscriptionThresholdExpressionNotTagsPtr and AnomalySubscriptionThresholdExpressionNotTagsPtrOutput values.
// You can construct a concrete instance of `AnomalySubscriptionThresholdExpressionNotTagsPtrInput` via:
//
//	        AnomalySubscriptionThresholdExpressionNotTagsArgs{...}
//
//	or:
//
//	        nil
type AnomalySubscriptionThresholdExpressionNotTagsPtrInput interface {
	pulumi.Input

	ToAnomalySubscriptionThresholdExpressionNotTagsPtrOutput() AnomalySubscriptionThresholdExpressionNotTagsPtrOutput
	ToAnomalySubscriptionThresholdExpressionNotTagsPtrOutputWithContext(context.Context) AnomalySubscriptionThresholdExpressionNotTagsPtrOutput
}

type anomalySubscriptionThresholdExpressionNotTagsPtrType AnomalySubscriptionThresholdExpressionNotTagsArgs

func AnomalySubscriptionThresholdExpressionNotTagsPtr(v *AnomalySubscriptionThresholdExpressionNotTagsArgs) AnomalySubscriptionThresholdExpressionNotTagsPtrInput {
	return (*anomalySubscriptionThresholdExpressionNotTagsPtrType)(v)
}

func (*anomalySubscriptionThresholdExpressionNotTagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnomalySubscriptionThresholdExpressionNotTags)(nil)).Elem()
}

func (i *anomalySubscriptionThresholdExpressionNotTagsPtrType) ToAnomalySubscriptionThresholdExpressionNotTagsPtrOutput() AnomalySubscriptionThresholdExpressionNotTagsPtrOutput {
	return i.ToAnomalySubscriptionThresholdExpressionNotTagsPtrOutputWithContext(context.Background())
}

func (i *anomalySubscriptionThresholdExpressionNotTagsPtrType) ToAnomalySubscriptionThresholdExpressionNotTagsPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionNotTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionNotTagsPtrOutput)
}

type AnomalySubscriptionThresholdExpressionNotTagsOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionNotTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionNotTags)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionNotTagsOutput) ToAnomalySubscriptionThresholdExpressionNotTagsOutput() AnomalySubscriptionThresholdExpressionNotTagsOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionNotTagsOutput) ToAnomalySubscriptionThresholdExpressionNotTagsOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionNotTagsOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionNotTagsOutput) ToAnomalySubscriptionThresholdExpressionNotTagsPtrOutput() AnomalySubscriptionThresholdExpressionNotTagsPtrOutput {
	return o.ToAnomalySubscriptionThresholdExpressionNotTagsPtrOutputWithContext(context.Background())
}

func (o AnomalySubscriptionThresholdExpressionNotTagsOutput) ToAnomalySubscriptionThresholdExpressionNotTagsPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionNotTagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnomalySubscriptionThresholdExpressionNotTags) *AnomalySubscriptionThresholdExpressionNotTags {
		return &v
	}).(AnomalySubscriptionThresholdExpressionNotTagsPtrOutput)
}

// Key for the tag.
func (o AnomalySubscriptionThresholdExpressionNotTagsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionNotTags) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o AnomalySubscriptionThresholdExpressionNotTagsOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionNotTags) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionNotTagsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionNotTags) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AnomalySubscriptionThresholdExpressionNotTagsPtrOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionNotTagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnomalySubscriptionThresholdExpressionNotTags)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionNotTagsPtrOutput) ToAnomalySubscriptionThresholdExpressionNotTagsPtrOutput() AnomalySubscriptionThresholdExpressionNotTagsPtrOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionNotTagsPtrOutput) ToAnomalySubscriptionThresholdExpressionNotTagsPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionNotTagsPtrOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionNotTagsPtrOutput) Elem() AnomalySubscriptionThresholdExpressionNotTagsOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionNotTags) AnomalySubscriptionThresholdExpressionNotTags {
		if v != nil {
			return *v
		}
		var ret AnomalySubscriptionThresholdExpressionNotTags
		return ret
	}).(AnomalySubscriptionThresholdExpressionNotTagsOutput)
}

// Key for the tag.
func (o AnomalySubscriptionThresholdExpressionNotTagsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionNotTags) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o AnomalySubscriptionThresholdExpressionNotTagsPtrOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionNotTags) []string {
		if v == nil {
			return nil
		}
		return v.MatchOptions
	}).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionNotTagsPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionNotTags) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AnomalySubscriptionThresholdExpressionOr struct {
	// Configuration block for the filter that's based on  values. See Cost Category below.
	CostCategory *AnomalySubscriptionThresholdExpressionOrCostCategory `pulumi:"costCategory"`
	// Configuration block for the specific Dimension to use for.
	Dimension *AnomalySubscriptionThresholdExpressionOrDimension `pulumi:"dimension"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags *AnomalySubscriptionThresholdExpressionOrTags `pulumi:"tags"`
}

// AnomalySubscriptionThresholdExpressionOrInput is an input type that accepts AnomalySubscriptionThresholdExpressionOrArgs and AnomalySubscriptionThresholdExpressionOrOutput values.
// You can construct a concrete instance of `AnomalySubscriptionThresholdExpressionOrInput` via:
//
//	AnomalySubscriptionThresholdExpressionOrArgs{...}
type AnomalySubscriptionThresholdExpressionOrInput interface {
	pulumi.Input

	ToAnomalySubscriptionThresholdExpressionOrOutput() AnomalySubscriptionThresholdExpressionOrOutput
	ToAnomalySubscriptionThresholdExpressionOrOutputWithContext(context.Context) AnomalySubscriptionThresholdExpressionOrOutput
}

type AnomalySubscriptionThresholdExpressionOrArgs struct {
	// Configuration block for the filter that's based on  values. See Cost Category below.
	CostCategory AnomalySubscriptionThresholdExpressionOrCostCategoryPtrInput `pulumi:"costCategory"`
	// Configuration block for the specific Dimension to use for.
	Dimension AnomalySubscriptionThresholdExpressionOrDimensionPtrInput `pulumi:"dimension"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags AnomalySubscriptionThresholdExpressionOrTagsPtrInput `pulumi:"tags"`
}

func (AnomalySubscriptionThresholdExpressionOrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionOr)(nil)).Elem()
}

func (i AnomalySubscriptionThresholdExpressionOrArgs) ToAnomalySubscriptionThresholdExpressionOrOutput() AnomalySubscriptionThresholdExpressionOrOutput {
	return i.ToAnomalySubscriptionThresholdExpressionOrOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionOrArgs) ToAnomalySubscriptionThresholdExpressionOrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionOrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionOrOutput)
}

// AnomalySubscriptionThresholdExpressionOrArrayInput is an input type that accepts AnomalySubscriptionThresholdExpressionOrArray and AnomalySubscriptionThresholdExpressionOrArrayOutput values.
// You can construct a concrete instance of `AnomalySubscriptionThresholdExpressionOrArrayInput` via:
//
//	AnomalySubscriptionThresholdExpressionOrArray{ AnomalySubscriptionThresholdExpressionOrArgs{...} }
type AnomalySubscriptionThresholdExpressionOrArrayInput interface {
	pulumi.Input

	ToAnomalySubscriptionThresholdExpressionOrArrayOutput() AnomalySubscriptionThresholdExpressionOrArrayOutput
	ToAnomalySubscriptionThresholdExpressionOrArrayOutputWithContext(context.Context) AnomalySubscriptionThresholdExpressionOrArrayOutput
}

type AnomalySubscriptionThresholdExpressionOrArray []AnomalySubscriptionThresholdExpressionOrInput

func (AnomalySubscriptionThresholdExpressionOrArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnomalySubscriptionThresholdExpressionOr)(nil)).Elem()
}

func (i AnomalySubscriptionThresholdExpressionOrArray) ToAnomalySubscriptionThresholdExpressionOrArrayOutput() AnomalySubscriptionThresholdExpressionOrArrayOutput {
	return i.ToAnomalySubscriptionThresholdExpressionOrArrayOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionOrArray) ToAnomalySubscriptionThresholdExpressionOrArrayOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionOrArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionOrArrayOutput)
}

type AnomalySubscriptionThresholdExpressionOrOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionOrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionOr)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionOrOutput) ToAnomalySubscriptionThresholdExpressionOrOutput() AnomalySubscriptionThresholdExpressionOrOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionOrOutput) ToAnomalySubscriptionThresholdExpressionOrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionOrOutput {
	return o
}

// Configuration block for the filter that's based on  values. See Cost Category below.
func (o AnomalySubscriptionThresholdExpressionOrOutput) CostCategory() AnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionOr) *AnomalySubscriptionThresholdExpressionOrCostCategory {
		return v.CostCategory
	}).(AnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutput)
}

// Configuration block for the specific Dimension to use for.
func (o AnomalySubscriptionThresholdExpressionOrOutput) Dimension() AnomalySubscriptionThresholdExpressionOrDimensionPtrOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionOr) *AnomalySubscriptionThresholdExpressionOrDimension {
		return v.Dimension
	}).(AnomalySubscriptionThresholdExpressionOrDimensionPtrOutput)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o AnomalySubscriptionThresholdExpressionOrOutput) Tags() AnomalySubscriptionThresholdExpressionOrTagsPtrOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionOr) *AnomalySubscriptionThresholdExpressionOrTags {
		return v.Tags
	}).(AnomalySubscriptionThresholdExpressionOrTagsPtrOutput)
}

type AnomalySubscriptionThresholdExpressionOrArrayOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionOrArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnomalySubscriptionThresholdExpressionOr)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionOrArrayOutput) ToAnomalySubscriptionThresholdExpressionOrArrayOutput() AnomalySubscriptionThresholdExpressionOrArrayOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionOrArrayOutput) ToAnomalySubscriptionThresholdExpressionOrArrayOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionOrArrayOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionOrArrayOutput) Index(i pulumi.IntInput) AnomalySubscriptionThresholdExpressionOrOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AnomalySubscriptionThresholdExpressionOr {
		return vs[0].([]AnomalySubscriptionThresholdExpressionOr)[vs[1].(int)]
	}).(AnomalySubscriptionThresholdExpressionOrOutput)
}

type AnomalySubscriptionThresholdExpressionOrCostCategory struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

// AnomalySubscriptionThresholdExpressionOrCostCategoryInput is an input type that accepts AnomalySubscriptionThresholdExpressionOrCostCategoryArgs and AnomalySubscriptionThresholdExpressionOrCostCategoryOutput values.
// You can construct a concrete instance of `AnomalySubscriptionThresholdExpressionOrCostCategoryInput` via:
//
//	AnomalySubscriptionThresholdExpressionOrCostCategoryArgs{...}
type AnomalySubscriptionThresholdExpressionOrCostCategoryInput interface {
	pulumi.Input

	ToAnomalySubscriptionThresholdExpressionOrCostCategoryOutput() AnomalySubscriptionThresholdExpressionOrCostCategoryOutput
	ToAnomalySubscriptionThresholdExpressionOrCostCategoryOutputWithContext(context.Context) AnomalySubscriptionThresholdExpressionOrCostCategoryOutput
}

type AnomalySubscriptionThresholdExpressionOrCostCategoryArgs struct {
	// Unique name of the Cost Category.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AnomalySubscriptionThresholdExpressionOrCostCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionOrCostCategory)(nil)).Elem()
}

func (i AnomalySubscriptionThresholdExpressionOrCostCategoryArgs) ToAnomalySubscriptionThresholdExpressionOrCostCategoryOutput() AnomalySubscriptionThresholdExpressionOrCostCategoryOutput {
	return i.ToAnomalySubscriptionThresholdExpressionOrCostCategoryOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionOrCostCategoryArgs) ToAnomalySubscriptionThresholdExpressionOrCostCategoryOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionOrCostCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionOrCostCategoryOutput)
}

func (i AnomalySubscriptionThresholdExpressionOrCostCategoryArgs) ToAnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutput() AnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutput {
	return i.ToAnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionOrCostCategoryArgs) ToAnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionOrCostCategoryOutput).ToAnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutputWithContext(ctx)
}

// AnomalySubscriptionThresholdExpressionOrCostCategoryPtrInput is an input type that accepts AnomalySubscriptionThresholdExpressionOrCostCategoryArgs, AnomalySubscriptionThresholdExpressionOrCostCategoryPtr and AnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutput values.
// You can construct a concrete instance of `AnomalySubscriptionThresholdExpressionOrCostCategoryPtrInput` via:
//
//	        AnomalySubscriptionThresholdExpressionOrCostCategoryArgs{...}
//
//	or:
//
//	        nil
type AnomalySubscriptionThresholdExpressionOrCostCategoryPtrInput interface {
	pulumi.Input

	ToAnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutput() AnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutput
	ToAnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutputWithContext(context.Context) AnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutput
}

type anomalySubscriptionThresholdExpressionOrCostCategoryPtrType AnomalySubscriptionThresholdExpressionOrCostCategoryArgs

func AnomalySubscriptionThresholdExpressionOrCostCategoryPtr(v *AnomalySubscriptionThresholdExpressionOrCostCategoryArgs) AnomalySubscriptionThresholdExpressionOrCostCategoryPtrInput {
	return (*anomalySubscriptionThresholdExpressionOrCostCategoryPtrType)(v)
}

func (*anomalySubscriptionThresholdExpressionOrCostCategoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnomalySubscriptionThresholdExpressionOrCostCategory)(nil)).Elem()
}

func (i *anomalySubscriptionThresholdExpressionOrCostCategoryPtrType) ToAnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutput() AnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutput {
	return i.ToAnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutputWithContext(context.Background())
}

func (i *anomalySubscriptionThresholdExpressionOrCostCategoryPtrType) ToAnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutput)
}

type AnomalySubscriptionThresholdExpressionOrCostCategoryOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionOrCostCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionOrCostCategory)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionOrCostCategoryOutput) ToAnomalySubscriptionThresholdExpressionOrCostCategoryOutput() AnomalySubscriptionThresholdExpressionOrCostCategoryOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionOrCostCategoryOutput) ToAnomalySubscriptionThresholdExpressionOrCostCategoryOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionOrCostCategoryOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionOrCostCategoryOutput) ToAnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutput() AnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutput {
	return o.ToAnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutputWithContext(context.Background())
}

func (o AnomalySubscriptionThresholdExpressionOrCostCategoryOutput) ToAnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnomalySubscriptionThresholdExpressionOrCostCategory) *AnomalySubscriptionThresholdExpressionOrCostCategory {
		return &v
	}).(AnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutput)
}

// Unique name of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionOrCostCategoryOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionOrCostCategory) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o AnomalySubscriptionThresholdExpressionOrCostCategoryOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionOrCostCategory) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionOrCostCategoryOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionOrCostCategory) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnomalySubscriptionThresholdExpressionOrCostCategory)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutput) ToAnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutput() AnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutput) ToAnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutput) Elem() AnomalySubscriptionThresholdExpressionOrCostCategoryOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionOrCostCategory) AnomalySubscriptionThresholdExpressionOrCostCategory {
		if v != nil {
			return *v
		}
		var ret AnomalySubscriptionThresholdExpressionOrCostCategory
		return ret
	}).(AnomalySubscriptionThresholdExpressionOrCostCategoryOutput)
}

// Unique name of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionOrCostCategory) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o AnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionOrCostCategory) []string {
		if v == nil {
			return nil
		}
		return v.MatchOptions
	}).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionOrCostCategory) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AnomalySubscriptionThresholdExpressionOrDimension struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

// AnomalySubscriptionThresholdExpressionOrDimensionInput is an input type that accepts AnomalySubscriptionThresholdExpressionOrDimensionArgs and AnomalySubscriptionThresholdExpressionOrDimensionOutput values.
// You can construct a concrete instance of `AnomalySubscriptionThresholdExpressionOrDimensionInput` via:
//
//	AnomalySubscriptionThresholdExpressionOrDimensionArgs{...}
type AnomalySubscriptionThresholdExpressionOrDimensionInput interface {
	pulumi.Input

	ToAnomalySubscriptionThresholdExpressionOrDimensionOutput() AnomalySubscriptionThresholdExpressionOrDimensionOutput
	ToAnomalySubscriptionThresholdExpressionOrDimensionOutputWithContext(context.Context) AnomalySubscriptionThresholdExpressionOrDimensionOutput
}

type AnomalySubscriptionThresholdExpressionOrDimensionArgs struct {
	// Unique name of the Cost Category.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AnomalySubscriptionThresholdExpressionOrDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionOrDimension)(nil)).Elem()
}

func (i AnomalySubscriptionThresholdExpressionOrDimensionArgs) ToAnomalySubscriptionThresholdExpressionOrDimensionOutput() AnomalySubscriptionThresholdExpressionOrDimensionOutput {
	return i.ToAnomalySubscriptionThresholdExpressionOrDimensionOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionOrDimensionArgs) ToAnomalySubscriptionThresholdExpressionOrDimensionOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionOrDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionOrDimensionOutput)
}

func (i AnomalySubscriptionThresholdExpressionOrDimensionArgs) ToAnomalySubscriptionThresholdExpressionOrDimensionPtrOutput() AnomalySubscriptionThresholdExpressionOrDimensionPtrOutput {
	return i.ToAnomalySubscriptionThresholdExpressionOrDimensionPtrOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionOrDimensionArgs) ToAnomalySubscriptionThresholdExpressionOrDimensionPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionOrDimensionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionOrDimensionOutput).ToAnomalySubscriptionThresholdExpressionOrDimensionPtrOutputWithContext(ctx)
}

// AnomalySubscriptionThresholdExpressionOrDimensionPtrInput is an input type that accepts AnomalySubscriptionThresholdExpressionOrDimensionArgs, AnomalySubscriptionThresholdExpressionOrDimensionPtr and AnomalySubscriptionThresholdExpressionOrDimensionPtrOutput values.
// You can construct a concrete instance of `AnomalySubscriptionThresholdExpressionOrDimensionPtrInput` via:
//
//	        AnomalySubscriptionThresholdExpressionOrDimensionArgs{...}
//
//	or:
//
//	        nil
type AnomalySubscriptionThresholdExpressionOrDimensionPtrInput interface {
	pulumi.Input

	ToAnomalySubscriptionThresholdExpressionOrDimensionPtrOutput() AnomalySubscriptionThresholdExpressionOrDimensionPtrOutput
	ToAnomalySubscriptionThresholdExpressionOrDimensionPtrOutputWithContext(context.Context) AnomalySubscriptionThresholdExpressionOrDimensionPtrOutput
}

type anomalySubscriptionThresholdExpressionOrDimensionPtrType AnomalySubscriptionThresholdExpressionOrDimensionArgs

func AnomalySubscriptionThresholdExpressionOrDimensionPtr(v *AnomalySubscriptionThresholdExpressionOrDimensionArgs) AnomalySubscriptionThresholdExpressionOrDimensionPtrInput {
	return (*anomalySubscriptionThresholdExpressionOrDimensionPtrType)(v)
}

func (*anomalySubscriptionThresholdExpressionOrDimensionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnomalySubscriptionThresholdExpressionOrDimension)(nil)).Elem()
}

func (i *anomalySubscriptionThresholdExpressionOrDimensionPtrType) ToAnomalySubscriptionThresholdExpressionOrDimensionPtrOutput() AnomalySubscriptionThresholdExpressionOrDimensionPtrOutput {
	return i.ToAnomalySubscriptionThresholdExpressionOrDimensionPtrOutputWithContext(context.Background())
}

func (i *anomalySubscriptionThresholdExpressionOrDimensionPtrType) ToAnomalySubscriptionThresholdExpressionOrDimensionPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionOrDimensionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionOrDimensionPtrOutput)
}

type AnomalySubscriptionThresholdExpressionOrDimensionOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionOrDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionOrDimension)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionOrDimensionOutput) ToAnomalySubscriptionThresholdExpressionOrDimensionOutput() AnomalySubscriptionThresholdExpressionOrDimensionOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionOrDimensionOutput) ToAnomalySubscriptionThresholdExpressionOrDimensionOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionOrDimensionOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionOrDimensionOutput) ToAnomalySubscriptionThresholdExpressionOrDimensionPtrOutput() AnomalySubscriptionThresholdExpressionOrDimensionPtrOutput {
	return o.ToAnomalySubscriptionThresholdExpressionOrDimensionPtrOutputWithContext(context.Background())
}

func (o AnomalySubscriptionThresholdExpressionOrDimensionOutput) ToAnomalySubscriptionThresholdExpressionOrDimensionPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionOrDimensionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnomalySubscriptionThresholdExpressionOrDimension) *AnomalySubscriptionThresholdExpressionOrDimension {
		return &v
	}).(AnomalySubscriptionThresholdExpressionOrDimensionPtrOutput)
}

// Unique name of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionOrDimensionOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionOrDimension) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o AnomalySubscriptionThresholdExpressionOrDimensionOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionOrDimension) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionOrDimensionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionOrDimension) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AnomalySubscriptionThresholdExpressionOrDimensionPtrOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionOrDimensionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnomalySubscriptionThresholdExpressionOrDimension)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionOrDimensionPtrOutput) ToAnomalySubscriptionThresholdExpressionOrDimensionPtrOutput() AnomalySubscriptionThresholdExpressionOrDimensionPtrOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionOrDimensionPtrOutput) ToAnomalySubscriptionThresholdExpressionOrDimensionPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionOrDimensionPtrOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionOrDimensionPtrOutput) Elem() AnomalySubscriptionThresholdExpressionOrDimensionOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionOrDimension) AnomalySubscriptionThresholdExpressionOrDimension {
		if v != nil {
			return *v
		}
		var ret AnomalySubscriptionThresholdExpressionOrDimension
		return ret
	}).(AnomalySubscriptionThresholdExpressionOrDimensionOutput)
}

// Unique name of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionOrDimensionPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionOrDimension) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o AnomalySubscriptionThresholdExpressionOrDimensionPtrOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionOrDimension) []string {
		if v == nil {
			return nil
		}
		return v.MatchOptions
	}).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionOrDimensionPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionOrDimension) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AnomalySubscriptionThresholdExpressionOrTags struct {
	// Key for the tag.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

// AnomalySubscriptionThresholdExpressionOrTagsInput is an input type that accepts AnomalySubscriptionThresholdExpressionOrTagsArgs and AnomalySubscriptionThresholdExpressionOrTagsOutput values.
// You can construct a concrete instance of `AnomalySubscriptionThresholdExpressionOrTagsInput` via:
//
//	AnomalySubscriptionThresholdExpressionOrTagsArgs{...}
type AnomalySubscriptionThresholdExpressionOrTagsInput interface {
	pulumi.Input

	ToAnomalySubscriptionThresholdExpressionOrTagsOutput() AnomalySubscriptionThresholdExpressionOrTagsOutput
	ToAnomalySubscriptionThresholdExpressionOrTagsOutputWithContext(context.Context) AnomalySubscriptionThresholdExpressionOrTagsOutput
}

type AnomalySubscriptionThresholdExpressionOrTagsArgs struct {
	// Key for the tag.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AnomalySubscriptionThresholdExpressionOrTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionOrTags)(nil)).Elem()
}

func (i AnomalySubscriptionThresholdExpressionOrTagsArgs) ToAnomalySubscriptionThresholdExpressionOrTagsOutput() AnomalySubscriptionThresholdExpressionOrTagsOutput {
	return i.ToAnomalySubscriptionThresholdExpressionOrTagsOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionOrTagsArgs) ToAnomalySubscriptionThresholdExpressionOrTagsOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionOrTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionOrTagsOutput)
}

func (i AnomalySubscriptionThresholdExpressionOrTagsArgs) ToAnomalySubscriptionThresholdExpressionOrTagsPtrOutput() AnomalySubscriptionThresholdExpressionOrTagsPtrOutput {
	return i.ToAnomalySubscriptionThresholdExpressionOrTagsPtrOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionOrTagsArgs) ToAnomalySubscriptionThresholdExpressionOrTagsPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionOrTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionOrTagsOutput).ToAnomalySubscriptionThresholdExpressionOrTagsPtrOutputWithContext(ctx)
}

// AnomalySubscriptionThresholdExpressionOrTagsPtrInput is an input type that accepts AnomalySubscriptionThresholdExpressionOrTagsArgs, AnomalySubscriptionThresholdExpressionOrTagsPtr and AnomalySubscriptionThresholdExpressionOrTagsPtrOutput values.
// You can construct a concrete instance of `AnomalySubscriptionThresholdExpressionOrTagsPtrInput` via:
//
//	        AnomalySubscriptionThresholdExpressionOrTagsArgs{...}
//
//	or:
//
//	        nil
type AnomalySubscriptionThresholdExpressionOrTagsPtrInput interface {
	pulumi.Input

	ToAnomalySubscriptionThresholdExpressionOrTagsPtrOutput() AnomalySubscriptionThresholdExpressionOrTagsPtrOutput
	ToAnomalySubscriptionThresholdExpressionOrTagsPtrOutputWithContext(context.Context) AnomalySubscriptionThresholdExpressionOrTagsPtrOutput
}

type anomalySubscriptionThresholdExpressionOrTagsPtrType AnomalySubscriptionThresholdExpressionOrTagsArgs

func AnomalySubscriptionThresholdExpressionOrTagsPtr(v *AnomalySubscriptionThresholdExpressionOrTagsArgs) AnomalySubscriptionThresholdExpressionOrTagsPtrInput {
	return (*anomalySubscriptionThresholdExpressionOrTagsPtrType)(v)
}

func (*anomalySubscriptionThresholdExpressionOrTagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnomalySubscriptionThresholdExpressionOrTags)(nil)).Elem()
}

func (i *anomalySubscriptionThresholdExpressionOrTagsPtrType) ToAnomalySubscriptionThresholdExpressionOrTagsPtrOutput() AnomalySubscriptionThresholdExpressionOrTagsPtrOutput {
	return i.ToAnomalySubscriptionThresholdExpressionOrTagsPtrOutputWithContext(context.Background())
}

func (i *anomalySubscriptionThresholdExpressionOrTagsPtrType) ToAnomalySubscriptionThresholdExpressionOrTagsPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionOrTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionOrTagsPtrOutput)
}

type AnomalySubscriptionThresholdExpressionOrTagsOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionOrTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionOrTags)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionOrTagsOutput) ToAnomalySubscriptionThresholdExpressionOrTagsOutput() AnomalySubscriptionThresholdExpressionOrTagsOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionOrTagsOutput) ToAnomalySubscriptionThresholdExpressionOrTagsOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionOrTagsOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionOrTagsOutput) ToAnomalySubscriptionThresholdExpressionOrTagsPtrOutput() AnomalySubscriptionThresholdExpressionOrTagsPtrOutput {
	return o.ToAnomalySubscriptionThresholdExpressionOrTagsPtrOutputWithContext(context.Background())
}

func (o AnomalySubscriptionThresholdExpressionOrTagsOutput) ToAnomalySubscriptionThresholdExpressionOrTagsPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionOrTagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnomalySubscriptionThresholdExpressionOrTags) *AnomalySubscriptionThresholdExpressionOrTags {
		return &v
	}).(AnomalySubscriptionThresholdExpressionOrTagsPtrOutput)
}

// Key for the tag.
func (o AnomalySubscriptionThresholdExpressionOrTagsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionOrTags) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o AnomalySubscriptionThresholdExpressionOrTagsOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionOrTags) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionOrTagsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionOrTags) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AnomalySubscriptionThresholdExpressionOrTagsPtrOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionOrTagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnomalySubscriptionThresholdExpressionOrTags)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionOrTagsPtrOutput) ToAnomalySubscriptionThresholdExpressionOrTagsPtrOutput() AnomalySubscriptionThresholdExpressionOrTagsPtrOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionOrTagsPtrOutput) ToAnomalySubscriptionThresholdExpressionOrTagsPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionOrTagsPtrOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionOrTagsPtrOutput) Elem() AnomalySubscriptionThresholdExpressionOrTagsOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionOrTags) AnomalySubscriptionThresholdExpressionOrTags {
		if v != nil {
			return *v
		}
		var ret AnomalySubscriptionThresholdExpressionOrTags
		return ret
	}).(AnomalySubscriptionThresholdExpressionOrTagsOutput)
}

// Key for the tag.
func (o AnomalySubscriptionThresholdExpressionOrTagsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionOrTags) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o AnomalySubscriptionThresholdExpressionOrTagsPtrOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionOrTags) []string {
		if v == nil {
			return nil
		}
		return v.MatchOptions
	}).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionOrTagsPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionOrTags) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AnomalySubscriptionThresholdExpressionTags struct {
	// Key for the tag.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

// AnomalySubscriptionThresholdExpressionTagsInput is an input type that accepts AnomalySubscriptionThresholdExpressionTagsArgs and AnomalySubscriptionThresholdExpressionTagsOutput values.
// You can construct a concrete instance of `AnomalySubscriptionThresholdExpressionTagsInput` via:
//
//	AnomalySubscriptionThresholdExpressionTagsArgs{...}
type AnomalySubscriptionThresholdExpressionTagsInput interface {
	pulumi.Input

	ToAnomalySubscriptionThresholdExpressionTagsOutput() AnomalySubscriptionThresholdExpressionTagsOutput
	ToAnomalySubscriptionThresholdExpressionTagsOutputWithContext(context.Context) AnomalySubscriptionThresholdExpressionTagsOutput
}

type AnomalySubscriptionThresholdExpressionTagsArgs struct {
	// Key for the tag.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AnomalySubscriptionThresholdExpressionTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionTags)(nil)).Elem()
}

func (i AnomalySubscriptionThresholdExpressionTagsArgs) ToAnomalySubscriptionThresholdExpressionTagsOutput() AnomalySubscriptionThresholdExpressionTagsOutput {
	return i.ToAnomalySubscriptionThresholdExpressionTagsOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionTagsArgs) ToAnomalySubscriptionThresholdExpressionTagsOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionTagsOutput)
}

func (i AnomalySubscriptionThresholdExpressionTagsArgs) ToAnomalySubscriptionThresholdExpressionTagsPtrOutput() AnomalySubscriptionThresholdExpressionTagsPtrOutput {
	return i.ToAnomalySubscriptionThresholdExpressionTagsPtrOutputWithContext(context.Background())
}

func (i AnomalySubscriptionThresholdExpressionTagsArgs) ToAnomalySubscriptionThresholdExpressionTagsPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionTagsOutput).ToAnomalySubscriptionThresholdExpressionTagsPtrOutputWithContext(ctx)
}

// AnomalySubscriptionThresholdExpressionTagsPtrInput is an input type that accepts AnomalySubscriptionThresholdExpressionTagsArgs, AnomalySubscriptionThresholdExpressionTagsPtr and AnomalySubscriptionThresholdExpressionTagsPtrOutput values.
// You can construct a concrete instance of `AnomalySubscriptionThresholdExpressionTagsPtrInput` via:
//
//	        AnomalySubscriptionThresholdExpressionTagsArgs{...}
//
//	or:
//
//	        nil
type AnomalySubscriptionThresholdExpressionTagsPtrInput interface {
	pulumi.Input

	ToAnomalySubscriptionThresholdExpressionTagsPtrOutput() AnomalySubscriptionThresholdExpressionTagsPtrOutput
	ToAnomalySubscriptionThresholdExpressionTagsPtrOutputWithContext(context.Context) AnomalySubscriptionThresholdExpressionTagsPtrOutput
}

type anomalySubscriptionThresholdExpressionTagsPtrType AnomalySubscriptionThresholdExpressionTagsArgs

func AnomalySubscriptionThresholdExpressionTagsPtr(v *AnomalySubscriptionThresholdExpressionTagsArgs) AnomalySubscriptionThresholdExpressionTagsPtrInput {
	return (*anomalySubscriptionThresholdExpressionTagsPtrType)(v)
}

func (*anomalySubscriptionThresholdExpressionTagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnomalySubscriptionThresholdExpressionTags)(nil)).Elem()
}

func (i *anomalySubscriptionThresholdExpressionTagsPtrType) ToAnomalySubscriptionThresholdExpressionTagsPtrOutput() AnomalySubscriptionThresholdExpressionTagsPtrOutput {
	return i.ToAnomalySubscriptionThresholdExpressionTagsPtrOutputWithContext(context.Background())
}

func (i *anomalySubscriptionThresholdExpressionTagsPtrType) ToAnomalySubscriptionThresholdExpressionTagsPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalySubscriptionThresholdExpressionTagsPtrOutput)
}

type AnomalySubscriptionThresholdExpressionTagsOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscriptionThresholdExpressionTags)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionTagsOutput) ToAnomalySubscriptionThresholdExpressionTagsOutput() AnomalySubscriptionThresholdExpressionTagsOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionTagsOutput) ToAnomalySubscriptionThresholdExpressionTagsOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionTagsOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionTagsOutput) ToAnomalySubscriptionThresholdExpressionTagsPtrOutput() AnomalySubscriptionThresholdExpressionTagsPtrOutput {
	return o.ToAnomalySubscriptionThresholdExpressionTagsPtrOutputWithContext(context.Background())
}

func (o AnomalySubscriptionThresholdExpressionTagsOutput) ToAnomalySubscriptionThresholdExpressionTagsPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionTagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnomalySubscriptionThresholdExpressionTags) *AnomalySubscriptionThresholdExpressionTags {
		return &v
	}).(AnomalySubscriptionThresholdExpressionTagsPtrOutput)
}

// Key for the tag.
func (o AnomalySubscriptionThresholdExpressionTagsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionTags) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o AnomalySubscriptionThresholdExpressionTagsOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionTags) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionTagsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnomalySubscriptionThresholdExpressionTags) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AnomalySubscriptionThresholdExpressionTagsPtrOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionThresholdExpressionTagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnomalySubscriptionThresholdExpressionTags)(nil)).Elem()
}

func (o AnomalySubscriptionThresholdExpressionTagsPtrOutput) ToAnomalySubscriptionThresholdExpressionTagsPtrOutput() AnomalySubscriptionThresholdExpressionTagsPtrOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionTagsPtrOutput) ToAnomalySubscriptionThresholdExpressionTagsPtrOutputWithContext(ctx context.Context) AnomalySubscriptionThresholdExpressionTagsPtrOutput {
	return o
}

func (o AnomalySubscriptionThresholdExpressionTagsPtrOutput) Elem() AnomalySubscriptionThresholdExpressionTagsOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionTags) AnomalySubscriptionThresholdExpressionTags {
		if v != nil {
			return *v
		}
		var ret AnomalySubscriptionThresholdExpressionTags
		return ret
	}).(AnomalySubscriptionThresholdExpressionTagsOutput)
}

// Key for the tag.
func (o AnomalySubscriptionThresholdExpressionTagsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionTags) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o AnomalySubscriptionThresholdExpressionTagsPtrOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionTags) []string {
		if v == nil {
			return nil
		}
		return v.MatchOptions
	}).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o AnomalySubscriptionThresholdExpressionTagsPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AnomalySubscriptionThresholdExpressionTags) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type CostCategoryRule struct {
	// Configuration block for the value the line item is categorized as if the line item contains the matched dimension. See below.
	InheritedValue *CostCategoryRuleInheritedValue `pulumi:"inheritedValue"`
	// Configuration block for the `Expression` object used to categorize costs. See below.
	Rule *CostCategoryRuleRule `pulumi:"rule"`
	// You can define the CostCategoryRule rule type as either `REGULAR` or `INHERITED_VALUE`.
	Type *string `pulumi:"type"`
	// Default value for the cost category.
	Value *string `pulumi:"value"`
}

// CostCategoryRuleInput is an input type that accepts CostCategoryRuleArgs and CostCategoryRuleOutput values.
// You can construct a concrete instance of `CostCategoryRuleInput` via:
//
//	CostCategoryRuleArgs{...}
type CostCategoryRuleInput interface {
	pulumi.Input

	ToCostCategoryRuleOutput() CostCategoryRuleOutput
	ToCostCategoryRuleOutputWithContext(context.Context) CostCategoryRuleOutput
}

type CostCategoryRuleArgs struct {
	// Configuration block for the value the line item is categorized as if the line item contains the matched dimension. See below.
	InheritedValue CostCategoryRuleInheritedValuePtrInput `pulumi:"inheritedValue"`
	// Configuration block for the `Expression` object used to categorize costs. See below.
	Rule CostCategoryRuleRulePtrInput `pulumi:"rule"`
	// You can define the CostCategoryRule rule type as either `REGULAR` or `INHERITED_VALUE`.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Default value for the cost category.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CostCategoryRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRule)(nil)).Elem()
}

func (i CostCategoryRuleArgs) ToCostCategoryRuleOutput() CostCategoryRuleOutput {
	return i.ToCostCategoryRuleOutputWithContext(context.Background())
}

func (i CostCategoryRuleArgs) ToCostCategoryRuleOutputWithContext(ctx context.Context) CostCategoryRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleOutput)
}

// CostCategoryRuleArrayInput is an input type that accepts CostCategoryRuleArray and CostCategoryRuleArrayOutput values.
// You can construct a concrete instance of `CostCategoryRuleArrayInput` via:
//
//	CostCategoryRuleArray{ CostCategoryRuleArgs{...} }
type CostCategoryRuleArrayInput interface {
	pulumi.Input

	ToCostCategoryRuleArrayOutput() CostCategoryRuleArrayOutput
	ToCostCategoryRuleArrayOutputWithContext(context.Context) CostCategoryRuleArrayOutput
}

type CostCategoryRuleArray []CostCategoryRuleInput

func (CostCategoryRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CostCategoryRule)(nil)).Elem()
}

func (i CostCategoryRuleArray) ToCostCategoryRuleArrayOutput() CostCategoryRuleArrayOutput {
	return i.ToCostCategoryRuleArrayOutputWithContext(context.Background())
}

func (i CostCategoryRuleArray) ToCostCategoryRuleArrayOutputWithContext(ctx context.Context) CostCategoryRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleArrayOutput)
}

type CostCategoryRuleOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRule)(nil)).Elem()
}

func (o CostCategoryRuleOutput) ToCostCategoryRuleOutput() CostCategoryRuleOutput {
	return o
}

func (o CostCategoryRuleOutput) ToCostCategoryRuleOutputWithContext(ctx context.Context) CostCategoryRuleOutput {
	return o
}

// Configuration block for the value the line item is categorized as if the line item contains the matched dimension. See below.
func (o CostCategoryRuleOutput) InheritedValue() CostCategoryRuleInheritedValuePtrOutput {
	return o.ApplyT(func(v CostCategoryRule) *CostCategoryRuleInheritedValue { return v.InheritedValue }).(CostCategoryRuleInheritedValuePtrOutput)
}

// Configuration block for the `Expression` object used to categorize costs. See below.
func (o CostCategoryRuleOutput) Rule() CostCategoryRuleRulePtrOutput {
	return o.ApplyT(func(v CostCategoryRule) *CostCategoryRuleRule { return v.Rule }).(CostCategoryRuleRulePtrOutput)
}

// You can define the CostCategoryRule rule type as either `REGULAR` or `INHERITED_VALUE`.
func (o CostCategoryRuleOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CostCategoryRule) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Default value for the cost category.
func (o CostCategoryRuleOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CostCategoryRule) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CostCategoryRuleArrayOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CostCategoryRule)(nil)).Elem()
}

func (o CostCategoryRuleArrayOutput) ToCostCategoryRuleArrayOutput() CostCategoryRuleArrayOutput {
	return o
}

func (o CostCategoryRuleArrayOutput) ToCostCategoryRuleArrayOutputWithContext(ctx context.Context) CostCategoryRuleArrayOutput {
	return o
}

func (o CostCategoryRuleArrayOutput) Index(i pulumi.IntInput) CostCategoryRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CostCategoryRule {
		return vs[0].([]CostCategoryRule)[vs[1].(int)]
	}).(CostCategoryRuleOutput)
}

type CostCategoryRuleInheritedValue struct {
	// Key to extract cost category values.
	DimensionKey *string `pulumi:"dimensionKey"`
	// Name of the dimension that's used to group costs. If you specify `LINKED_ACCOUNT_NAME`, the cost category value is based on account name. If you specify `TAG`, the cost category value will be based on the value of the specified tag key. Valid values are `LINKED_ACCOUNT_NAME`, `TAG`
	DimensionName *string `pulumi:"dimensionName"`
}

// CostCategoryRuleInheritedValueInput is an input type that accepts CostCategoryRuleInheritedValueArgs and CostCategoryRuleInheritedValueOutput values.
// You can construct a concrete instance of `CostCategoryRuleInheritedValueInput` via:
//
//	CostCategoryRuleInheritedValueArgs{...}
type CostCategoryRuleInheritedValueInput interface {
	pulumi.Input

	ToCostCategoryRuleInheritedValueOutput() CostCategoryRuleInheritedValueOutput
	ToCostCategoryRuleInheritedValueOutputWithContext(context.Context) CostCategoryRuleInheritedValueOutput
}

type CostCategoryRuleInheritedValueArgs struct {
	// Key to extract cost category values.
	DimensionKey pulumi.StringPtrInput `pulumi:"dimensionKey"`
	// Name of the dimension that's used to group costs. If you specify `LINKED_ACCOUNT_NAME`, the cost category value is based on account name. If you specify `TAG`, the cost category value will be based on the value of the specified tag key. Valid values are `LINKED_ACCOUNT_NAME`, `TAG`
	DimensionName pulumi.StringPtrInput `pulumi:"dimensionName"`
}

func (CostCategoryRuleInheritedValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleInheritedValue)(nil)).Elem()
}

func (i CostCategoryRuleInheritedValueArgs) ToCostCategoryRuleInheritedValueOutput() CostCategoryRuleInheritedValueOutput {
	return i.ToCostCategoryRuleInheritedValueOutputWithContext(context.Background())
}

func (i CostCategoryRuleInheritedValueArgs) ToCostCategoryRuleInheritedValueOutputWithContext(ctx context.Context) CostCategoryRuleInheritedValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleInheritedValueOutput)
}

func (i CostCategoryRuleInheritedValueArgs) ToCostCategoryRuleInheritedValuePtrOutput() CostCategoryRuleInheritedValuePtrOutput {
	return i.ToCostCategoryRuleInheritedValuePtrOutputWithContext(context.Background())
}

func (i CostCategoryRuleInheritedValueArgs) ToCostCategoryRuleInheritedValuePtrOutputWithContext(ctx context.Context) CostCategoryRuleInheritedValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleInheritedValueOutput).ToCostCategoryRuleInheritedValuePtrOutputWithContext(ctx)
}

// CostCategoryRuleInheritedValuePtrInput is an input type that accepts CostCategoryRuleInheritedValueArgs, CostCategoryRuleInheritedValuePtr and CostCategoryRuleInheritedValuePtrOutput values.
// You can construct a concrete instance of `CostCategoryRuleInheritedValuePtrInput` via:
//
//	        CostCategoryRuleInheritedValueArgs{...}
//
//	or:
//
//	        nil
type CostCategoryRuleInheritedValuePtrInput interface {
	pulumi.Input

	ToCostCategoryRuleInheritedValuePtrOutput() CostCategoryRuleInheritedValuePtrOutput
	ToCostCategoryRuleInheritedValuePtrOutputWithContext(context.Context) CostCategoryRuleInheritedValuePtrOutput
}

type costCategoryRuleInheritedValuePtrType CostCategoryRuleInheritedValueArgs

func CostCategoryRuleInheritedValuePtr(v *CostCategoryRuleInheritedValueArgs) CostCategoryRuleInheritedValuePtrInput {
	return (*costCategoryRuleInheritedValuePtrType)(v)
}

func (*costCategoryRuleInheritedValuePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CostCategoryRuleInheritedValue)(nil)).Elem()
}

func (i *costCategoryRuleInheritedValuePtrType) ToCostCategoryRuleInheritedValuePtrOutput() CostCategoryRuleInheritedValuePtrOutput {
	return i.ToCostCategoryRuleInheritedValuePtrOutputWithContext(context.Background())
}

func (i *costCategoryRuleInheritedValuePtrType) ToCostCategoryRuleInheritedValuePtrOutputWithContext(ctx context.Context) CostCategoryRuleInheritedValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleInheritedValuePtrOutput)
}

type CostCategoryRuleInheritedValueOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleInheritedValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleInheritedValue)(nil)).Elem()
}

func (o CostCategoryRuleInheritedValueOutput) ToCostCategoryRuleInheritedValueOutput() CostCategoryRuleInheritedValueOutput {
	return o
}

func (o CostCategoryRuleInheritedValueOutput) ToCostCategoryRuleInheritedValueOutputWithContext(ctx context.Context) CostCategoryRuleInheritedValueOutput {
	return o
}

func (o CostCategoryRuleInheritedValueOutput) ToCostCategoryRuleInheritedValuePtrOutput() CostCategoryRuleInheritedValuePtrOutput {
	return o.ToCostCategoryRuleInheritedValuePtrOutputWithContext(context.Background())
}

func (o CostCategoryRuleInheritedValueOutput) ToCostCategoryRuleInheritedValuePtrOutputWithContext(ctx context.Context) CostCategoryRuleInheritedValuePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CostCategoryRuleInheritedValue) *CostCategoryRuleInheritedValue {
		return &v
	}).(CostCategoryRuleInheritedValuePtrOutput)
}

// Key to extract cost category values.
func (o CostCategoryRuleInheritedValueOutput) DimensionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CostCategoryRuleInheritedValue) *string { return v.DimensionKey }).(pulumi.StringPtrOutput)
}

// Name of the dimension that's used to group costs. If you specify `LINKED_ACCOUNT_NAME`, the cost category value is based on account name. If you specify `TAG`, the cost category value will be based on the value of the specified tag key. Valid values are `LINKED_ACCOUNT_NAME`, `TAG`
func (o CostCategoryRuleInheritedValueOutput) DimensionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CostCategoryRuleInheritedValue) *string { return v.DimensionName }).(pulumi.StringPtrOutput)
}

type CostCategoryRuleInheritedValuePtrOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleInheritedValuePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CostCategoryRuleInheritedValue)(nil)).Elem()
}

func (o CostCategoryRuleInheritedValuePtrOutput) ToCostCategoryRuleInheritedValuePtrOutput() CostCategoryRuleInheritedValuePtrOutput {
	return o
}

func (o CostCategoryRuleInheritedValuePtrOutput) ToCostCategoryRuleInheritedValuePtrOutputWithContext(ctx context.Context) CostCategoryRuleInheritedValuePtrOutput {
	return o
}

func (o CostCategoryRuleInheritedValuePtrOutput) Elem() CostCategoryRuleInheritedValueOutput {
	return o.ApplyT(func(v *CostCategoryRuleInheritedValue) CostCategoryRuleInheritedValue {
		if v != nil {
			return *v
		}
		var ret CostCategoryRuleInheritedValue
		return ret
	}).(CostCategoryRuleInheritedValueOutput)
}

// Key to extract cost category values.
func (o CostCategoryRuleInheritedValuePtrOutput) DimensionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CostCategoryRuleInheritedValue) *string {
		if v == nil {
			return nil
		}
		return v.DimensionKey
	}).(pulumi.StringPtrOutput)
}

// Name of the dimension that's used to group costs. If you specify `LINKED_ACCOUNT_NAME`, the cost category value is based on account name. If you specify `TAG`, the cost category value will be based on the value of the specified tag key. Valid values are `LINKED_ACCOUNT_NAME`, `TAG`
func (o CostCategoryRuleInheritedValuePtrOutput) DimensionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CostCategoryRuleInheritedValue) *string {
		if v == nil {
			return nil
		}
		return v.DimensionName
	}).(pulumi.StringPtrOutput)
}

type CostCategoryRuleRule struct {
	// Return results that match both `Dimension` objects.
	Ands []CostCategoryRuleRuleAnd `pulumi:"ands"`
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategory *CostCategoryRuleRuleCostCategory `pulumi:"costCategory"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimension *CostCategoryRuleRuleDimension `pulumi:"dimension"`
	// Return results that match both `Dimension` object.
	Not *CostCategoryRuleRuleNot `pulumi:"not"`
	// Return results that match both `Dimension` object.
	Ors []CostCategoryRuleRuleOr `pulumi:"ors"`
	// Configuration block for the specific `Tag` to use for `Expression`. See below.
	Tags *CostCategoryRuleRuleTags `pulumi:"tags"`
}

// CostCategoryRuleRuleInput is an input type that accepts CostCategoryRuleRuleArgs and CostCategoryRuleRuleOutput values.
// You can construct a concrete instance of `CostCategoryRuleRuleInput` via:
//
//	CostCategoryRuleRuleArgs{...}
type CostCategoryRuleRuleInput interface {
	pulumi.Input

	ToCostCategoryRuleRuleOutput() CostCategoryRuleRuleOutput
	ToCostCategoryRuleRuleOutputWithContext(context.Context) CostCategoryRuleRuleOutput
}

type CostCategoryRuleRuleArgs struct {
	// Return results that match both `Dimension` objects.
	Ands CostCategoryRuleRuleAndArrayInput `pulumi:"ands"`
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategory CostCategoryRuleRuleCostCategoryPtrInput `pulumi:"costCategory"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimension CostCategoryRuleRuleDimensionPtrInput `pulumi:"dimension"`
	// Return results that match both `Dimension` object.
	Not CostCategoryRuleRuleNotPtrInput `pulumi:"not"`
	// Return results that match both `Dimension` object.
	Ors CostCategoryRuleRuleOrArrayInput `pulumi:"ors"`
	// Configuration block for the specific `Tag` to use for `Expression`. See below.
	Tags CostCategoryRuleRuleTagsPtrInput `pulumi:"tags"`
}

func (CostCategoryRuleRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRule)(nil)).Elem()
}

func (i CostCategoryRuleRuleArgs) ToCostCategoryRuleRuleOutput() CostCategoryRuleRuleOutput {
	return i.ToCostCategoryRuleRuleOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleArgs) ToCostCategoryRuleRuleOutputWithContext(ctx context.Context) CostCategoryRuleRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleOutput)
}

func (i CostCategoryRuleRuleArgs) ToCostCategoryRuleRulePtrOutput() CostCategoryRuleRulePtrOutput {
	return i.ToCostCategoryRuleRulePtrOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleArgs) ToCostCategoryRuleRulePtrOutputWithContext(ctx context.Context) CostCategoryRuleRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleOutput).ToCostCategoryRuleRulePtrOutputWithContext(ctx)
}

// CostCategoryRuleRulePtrInput is an input type that accepts CostCategoryRuleRuleArgs, CostCategoryRuleRulePtr and CostCategoryRuleRulePtrOutput values.
// You can construct a concrete instance of `CostCategoryRuleRulePtrInput` via:
//
//	        CostCategoryRuleRuleArgs{...}
//
//	or:
//
//	        nil
type CostCategoryRuleRulePtrInput interface {
	pulumi.Input

	ToCostCategoryRuleRulePtrOutput() CostCategoryRuleRulePtrOutput
	ToCostCategoryRuleRulePtrOutputWithContext(context.Context) CostCategoryRuleRulePtrOutput
}

type costCategoryRuleRulePtrType CostCategoryRuleRuleArgs

func CostCategoryRuleRulePtr(v *CostCategoryRuleRuleArgs) CostCategoryRuleRulePtrInput {
	return (*costCategoryRuleRulePtrType)(v)
}

func (*costCategoryRuleRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CostCategoryRuleRule)(nil)).Elem()
}

func (i *costCategoryRuleRulePtrType) ToCostCategoryRuleRulePtrOutput() CostCategoryRuleRulePtrOutput {
	return i.ToCostCategoryRuleRulePtrOutputWithContext(context.Background())
}

func (i *costCategoryRuleRulePtrType) ToCostCategoryRuleRulePtrOutputWithContext(ctx context.Context) CostCategoryRuleRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRulePtrOutput)
}

type CostCategoryRuleRuleOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRule)(nil)).Elem()
}

func (o CostCategoryRuleRuleOutput) ToCostCategoryRuleRuleOutput() CostCategoryRuleRuleOutput {
	return o
}

func (o CostCategoryRuleRuleOutput) ToCostCategoryRuleRuleOutputWithContext(ctx context.Context) CostCategoryRuleRuleOutput {
	return o
}

func (o CostCategoryRuleRuleOutput) ToCostCategoryRuleRulePtrOutput() CostCategoryRuleRulePtrOutput {
	return o.ToCostCategoryRuleRulePtrOutputWithContext(context.Background())
}

func (o CostCategoryRuleRuleOutput) ToCostCategoryRuleRulePtrOutputWithContext(ctx context.Context) CostCategoryRuleRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CostCategoryRuleRule) *CostCategoryRuleRule {
		return &v
	}).(CostCategoryRuleRulePtrOutput)
}

// Return results that match both `Dimension` objects.
func (o CostCategoryRuleRuleOutput) Ands() CostCategoryRuleRuleAndArrayOutput {
	return o.ApplyT(func(v CostCategoryRuleRule) []CostCategoryRuleRuleAnd { return v.Ands }).(CostCategoryRuleRuleAndArrayOutput)
}

// Configuration block for the filter that's based on `CostCategory` values. See below.
func (o CostCategoryRuleRuleOutput) CostCategory() CostCategoryRuleRuleCostCategoryPtrOutput {
	return o.ApplyT(func(v CostCategoryRuleRule) *CostCategoryRuleRuleCostCategory { return v.CostCategory }).(CostCategoryRuleRuleCostCategoryPtrOutput)
}

// Configuration block for the specific `Dimension` to use for `Expression`. See below.
func (o CostCategoryRuleRuleOutput) Dimension() CostCategoryRuleRuleDimensionPtrOutput {
	return o.ApplyT(func(v CostCategoryRuleRule) *CostCategoryRuleRuleDimension { return v.Dimension }).(CostCategoryRuleRuleDimensionPtrOutput)
}

// Return results that match both `Dimension` object.
func (o CostCategoryRuleRuleOutput) Not() CostCategoryRuleRuleNotPtrOutput {
	return o.ApplyT(func(v CostCategoryRuleRule) *CostCategoryRuleRuleNot { return v.Not }).(CostCategoryRuleRuleNotPtrOutput)
}

// Return results that match both `Dimension` object.
func (o CostCategoryRuleRuleOutput) Ors() CostCategoryRuleRuleOrArrayOutput {
	return o.ApplyT(func(v CostCategoryRuleRule) []CostCategoryRuleRuleOr { return v.Ors }).(CostCategoryRuleRuleOrArrayOutput)
}

// Configuration block for the specific `Tag` to use for `Expression`. See below.
func (o CostCategoryRuleRuleOutput) Tags() CostCategoryRuleRuleTagsPtrOutput {
	return o.ApplyT(func(v CostCategoryRuleRule) *CostCategoryRuleRuleTags { return v.Tags }).(CostCategoryRuleRuleTagsPtrOutput)
}

type CostCategoryRuleRulePtrOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CostCategoryRuleRule)(nil)).Elem()
}

func (o CostCategoryRuleRulePtrOutput) ToCostCategoryRuleRulePtrOutput() CostCategoryRuleRulePtrOutput {
	return o
}

func (o CostCategoryRuleRulePtrOutput) ToCostCategoryRuleRulePtrOutputWithContext(ctx context.Context) CostCategoryRuleRulePtrOutput {
	return o
}

func (o CostCategoryRuleRulePtrOutput) Elem() CostCategoryRuleRuleOutput {
	return o.ApplyT(func(v *CostCategoryRuleRule) CostCategoryRuleRule {
		if v != nil {
			return *v
		}
		var ret CostCategoryRuleRule
		return ret
	}).(CostCategoryRuleRuleOutput)
}

// Return results that match both `Dimension` objects.
func (o CostCategoryRuleRulePtrOutput) Ands() CostCategoryRuleRuleAndArrayOutput {
	return o.ApplyT(func(v *CostCategoryRuleRule) []CostCategoryRuleRuleAnd {
		if v == nil {
			return nil
		}
		return v.Ands
	}).(CostCategoryRuleRuleAndArrayOutput)
}

// Configuration block for the filter that's based on `CostCategory` values. See below.
func (o CostCategoryRuleRulePtrOutput) CostCategory() CostCategoryRuleRuleCostCategoryPtrOutput {
	return o.ApplyT(func(v *CostCategoryRuleRule) *CostCategoryRuleRuleCostCategory {
		if v == nil {
			return nil
		}
		return v.CostCategory
	}).(CostCategoryRuleRuleCostCategoryPtrOutput)
}

// Configuration block for the specific `Dimension` to use for `Expression`. See below.
func (o CostCategoryRuleRulePtrOutput) Dimension() CostCategoryRuleRuleDimensionPtrOutput {
	return o.ApplyT(func(v *CostCategoryRuleRule) *CostCategoryRuleRuleDimension {
		if v == nil {
			return nil
		}
		return v.Dimension
	}).(CostCategoryRuleRuleDimensionPtrOutput)
}

// Return results that match both `Dimension` object.
func (o CostCategoryRuleRulePtrOutput) Not() CostCategoryRuleRuleNotPtrOutput {
	return o.ApplyT(func(v *CostCategoryRuleRule) *CostCategoryRuleRuleNot {
		if v == nil {
			return nil
		}
		return v.Not
	}).(CostCategoryRuleRuleNotPtrOutput)
}

// Return results that match both `Dimension` object.
func (o CostCategoryRuleRulePtrOutput) Ors() CostCategoryRuleRuleOrArrayOutput {
	return o.ApplyT(func(v *CostCategoryRuleRule) []CostCategoryRuleRuleOr {
		if v == nil {
			return nil
		}
		return v.Ors
	}).(CostCategoryRuleRuleOrArrayOutput)
}

// Configuration block for the specific `Tag` to use for `Expression`. See below.
func (o CostCategoryRuleRulePtrOutput) Tags() CostCategoryRuleRuleTagsPtrOutput {
	return o.ApplyT(func(v *CostCategoryRuleRule) *CostCategoryRuleRuleTags {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(CostCategoryRuleRuleTagsPtrOutput)
}

type CostCategoryRuleRuleAnd struct {
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategory *CostCategoryRuleRuleAndCostCategory `pulumi:"costCategory"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimension *CostCategoryRuleRuleAndDimension `pulumi:"dimension"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags *CostCategoryRuleRuleAndTags `pulumi:"tags"`
}

// CostCategoryRuleRuleAndInput is an input type that accepts CostCategoryRuleRuleAndArgs and CostCategoryRuleRuleAndOutput values.
// You can construct a concrete instance of `CostCategoryRuleRuleAndInput` via:
//
//	CostCategoryRuleRuleAndArgs{...}
type CostCategoryRuleRuleAndInput interface {
	pulumi.Input

	ToCostCategoryRuleRuleAndOutput() CostCategoryRuleRuleAndOutput
	ToCostCategoryRuleRuleAndOutputWithContext(context.Context) CostCategoryRuleRuleAndOutput
}

type CostCategoryRuleRuleAndArgs struct {
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategory CostCategoryRuleRuleAndCostCategoryPtrInput `pulumi:"costCategory"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimension CostCategoryRuleRuleAndDimensionPtrInput `pulumi:"dimension"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags CostCategoryRuleRuleAndTagsPtrInput `pulumi:"tags"`
}

func (CostCategoryRuleRuleAndArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleAnd)(nil)).Elem()
}

func (i CostCategoryRuleRuleAndArgs) ToCostCategoryRuleRuleAndOutput() CostCategoryRuleRuleAndOutput {
	return i.ToCostCategoryRuleRuleAndOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleAndArgs) ToCostCategoryRuleRuleAndOutputWithContext(ctx context.Context) CostCategoryRuleRuleAndOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleAndOutput)
}

// CostCategoryRuleRuleAndArrayInput is an input type that accepts CostCategoryRuleRuleAndArray and CostCategoryRuleRuleAndArrayOutput values.
// You can construct a concrete instance of `CostCategoryRuleRuleAndArrayInput` via:
//
//	CostCategoryRuleRuleAndArray{ CostCategoryRuleRuleAndArgs{...} }
type CostCategoryRuleRuleAndArrayInput interface {
	pulumi.Input

	ToCostCategoryRuleRuleAndArrayOutput() CostCategoryRuleRuleAndArrayOutput
	ToCostCategoryRuleRuleAndArrayOutputWithContext(context.Context) CostCategoryRuleRuleAndArrayOutput
}

type CostCategoryRuleRuleAndArray []CostCategoryRuleRuleAndInput

func (CostCategoryRuleRuleAndArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CostCategoryRuleRuleAnd)(nil)).Elem()
}

func (i CostCategoryRuleRuleAndArray) ToCostCategoryRuleRuleAndArrayOutput() CostCategoryRuleRuleAndArrayOutput {
	return i.ToCostCategoryRuleRuleAndArrayOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleAndArray) ToCostCategoryRuleRuleAndArrayOutputWithContext(ctx context.Context) CostCategoryRuleRuleAndArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleAndArrayOutput)
}

type CostCategoryRuleRuleAndOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleAndOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleAnd)(nil)).Elem()
}

func (o CostCategoryRuleRuleAndOutput) ToCostCategoryRuleRuleAndOutput() CostCategoryRuleRuleAndOutput {
	return o
}

func (o CostCategoryRuleRuleAndOutput) ToCostCategoryRuleRuleAndOutputWithContext(ctx context.Context) CostCategoryRuleRuleAndOutput {
	return o
}

// Configuration block for the filter that's based on `CostCategory` values. See below.
func (o CostCategoryRuleRuleAndOutput) CostCategory() CostCategoryRuleRuleAndCostCategoryPtrOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleAnd) *CostCategoryRuleRuleAndCostCategory { return v.CostCategory }).(CostCategoryRuleRuleAndCostCategoryPtrOutput)
}

// Configuration block for the specific `Dimension` to use for `Expression`. See below.
func (o CostCategoryRuleRuleAndOutput) Dimension() CostCategoryRuleRuleAndDimensionPtrOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleAnd) *CostCategoryRuleRuleAndDimension { return v.Dimension }).(CostCategoryRuleRuleAndDimensionPtrOutput)
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o CostCategoryRuleRuleAndOutput) Tags() CostCategoryRuleRuleAndTagsPtrOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleAnd) *CostCategoryRuleRuleAndTags { return v.Tags }).(CostCategoryRuleRuleAndTagsPtrOutput)
}

type CostCategoryRuleRuleAndArrayOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleAndArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CostCategoryRuleRuleAnd)(nil)).Elem()
}

func (o CostCategoryRuleRuleAndArrayOutput) ToCostCategoryRuleRuleAndArrayOutput() CostCategoryRuleRuleAndArrayOutput {
	return o
}

func (o CostCategoryRuleRuleAndArrayOutput) ToCostCategoryRuleRuleAndArrayOutputWithContext(ctx context.Context) CostCategoryRuleRuleAndArrayOutput {
	return o
}

func (o CostCategoryRuleRuleAndArrayOutput) Index(i pulumi.IntInput) CostCategoryRuleRuleAndOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CostCategoryRuleRuleAnd {
		return vs[0].([]CostCategoryRuleRuleAnd)[vs[1].(int)]
	}).(CostCategoryRuleRuleAndOutput)
}

type CostCategoryRuleRuleAndCostCategory struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

// CostCategoryRuleRuleAndCostCategoryInput is an input type that accepts CostCategoryRuleRuleAndCostCategoryArgs and CostCategoryRuleRuleAndCostCategoryOutput values.
// You can construct a concrete instance of `CostCategoryRuleRuleAndCostCategoryInput` via:
//
//	CostCategoryRuleRuleAndCostCategoryArgs{...}
type CostCategoryRuleRuleAndCostCategoryInput interface {
	pulumi.Input

	ToCostCategoryRuleRuleAndCostCategoryOutput() CostCategoryRuleRuleAndCostCategoryOutput
	ToCostCategoryRuleRuleAndCostCategoryOutputWithContext(context.Context) CostCategoryRuleRuleAndCostCategoryOutput
}

type CostCategoryRuleRuleAndCostCategoryArgs struct {
	// Unique name of the Cost Category.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (CostCategoryRuleRuleAndCostCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleAndCostCategory)(nil)).Elem()
}

func (i CostCategoryRuleRuleAndCostCategoryArgs) ToCostCategoryRuleRuleAndCostCategoryOutput() CostCategoryRuleRuleAndCostCategoryOutput {
	return i.ToCostCategoryRuleRuleAndCostCategoryOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleAndCostCategoryArgs) ToCostCategoryRuleRuleAndCostCategoryOutputWithContext(ctx context.Context) CostCategoryRuleRuleAndCostCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleAndCostCategoryOutput)
}

func (i CostCategoryRuleRuleAndCostCategoryArgs) ToCostCategoryRuleRuleAndCostCategoryPtrOutput() CostCategoryRuleRuleAndCostCategoryPtrOutput {
	return i.ToCostCategoryRuleRuleAndCostCategoryPtrOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleAndCostCategoryArgs) ToCostCategoryRuleRuleAndCostCategoryPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleAndCostCategoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleAndCostCategoryOutput).ToCostCategoryRuleRuleAndCostCategoryPtrOutputWithContext(ctx)
}

// CostCategoryRuleRuleAndCostCategoryPtrInput is an input type that accepts CostCategoryRuleRuleAndCostCategoryArgs, CostCategoryRuleRuleAndCostCategoryPtr and CostCategoryRuleRuleAndCostCategoryPtrOutput values.
// You can construct a concrete instance of `CostCategoryRuleRuleAndCostCategoryPtrInput` via:
//
//	        CostCategoryRuleRuleAndCostCategoryArgs{...}
//
//	or:
//
//	        nil
type CostCategoryRuleRuleAndCostCategoryPtrInput interface {
	pulumi.Input

	ToCostCategoryRuleRuleAndCostCategoryPtrOutput() CostCategoryRuleRuleAndCostCategoryPtrOutput
	ToCostCategoryRuleRuleAndCostCategoryPtrOutputWithContext(context.Context) CostCategoryRuleRuleAndCostCategoryPtrOutput
}

type costCategoryRuleRuleAndCostCategoryPtrType CostCategoryRuleRuleAndCostCategoryArgs

func CostCategoryRuleRuleAndCostCategoryPtr(v *CostCategoryRuleRuleAndCostCategoryArgs) CostCategoryRuleRuleAndCostCategoryPtrInput {
	return (*costCategoryRuleRuleAndCostCategoryPtrType)(v)
}

func (*costCategoryRuleRuleAndCostCategoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CostCategoryRuleRuleAndCostCategory)(nil)).Elem()
}

func (i *costCategoryRuleRuleAndCostCategoryPtrType) ToCostCategoryRuleRuleAndCostCategoryPtrOutput() CostCategoryRuleRuleAndCostCategoryPtrOutput {
	return i.ToCostCategoryRuleRuleAndCostCategoryPtrOutputWithContext(context.Background())
}

func (i *costCategoryRuleRuleAndCostCategoryPtrType) ToCostCategoryRuleRuleAndCostCategoryPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleAndCostCategoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleAndCostCategoryPtrOutput)
}

type CostCategoryRuleRuleAndCostCategoryOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleAndCostCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleAndCostCategory)(nil)).Elem()
}

func (o CostCategoryRuleRuleAndCostCategoryOutput) ToCostCategoryRuleRuleAndCostCategoryOutput() CostCategoryRuleRuleAndCostCategoryOutput {
	return o
}

func (o CostCategoryRuleRuleAndCostCategoryOutput) ToCostCategoryRuleRuleAndCostCategoryOutputWithContext(ctx context.Context) CostCategoryRuleRuleAndCostCategoryOutput {
	return o
}

func (o CostCategoryRuleRuleAndCostCategoryOutput) ToCostCategoryRuleRuleAndCostCategoryPtrOutput() CostCategoryRuleRuleAndCostCategoryPtrOutput {
	return o.ToCostCategoryRuleRuleAndCostCategoryPtrOutputWithContext(context.Background())
}

func (o CostCategoryRuleRuleAndCostCategoryOutput) ToCostCategoryRuleRuleAndCostCategoryPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleAndCostCategoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CostCategoryRuleRuleAndCostCategory) *CostCategoryRuleRuleAndCostCategory {
		return &v
	}).(CostCategoryRuleRuleAndCostCategoryPtrOutput)
}

// Unique name of the Cost Category.
func (o CostCategoryRuleRuleAndCostCategoryOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleAndCostCategory) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o CostCategoryRuleRuleAndCostCategoryOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleAndCostCategory) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o CostCategoryRuleRuleAndCostCategoryOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleAndCostCategory) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type CostCategoryRuleRuleAndCostCategoryPtrOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleAndCostCategoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CostCategoryRuleRuleAndCostCategory)(nil)).Elem()
}

func (o CostCategoryRuleRuleAndCostCategoryPtrOutput) ToCostCategoryRuleRuleAndCostCategoryPtrOutput() CostCategoryRuleRuleAndCostCategoryPtrOutput {
	return o
}

func (o CostCategoryRuleRuleAndCostCategoryPtrOutput) ToCostCategoryRuleRuleAndCostCategoryPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleAndCostCategoryPtrOutput {
	return o
}

func (o CostCategoryRuleRuleAndCostCategoryPtrOutput) Elem() CostCategoryRuleRuleAndCostCategoryOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleAndCostCategory) CostCategoryRuleRuleAndCostCategory {
		if v != nil {
			return *v
		}
		var ret CostCategoryRuleRuleAndCostCategory
		return ret
	}).(CostCategoryRuleRuleAndCostCategoryOutput)
}

// Unique name of the Cost Category.
func (o CostCategoryRuleRuleAndCostCategoryPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleAndCostCategory) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o CostCategoryRuleRuleAndCostCategoryPtrOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleAndCostCategory) []string {
		if v == nil {
			return nil
		}
		return v.MatchOptions
	}).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o CostCategoryRuleRuleAndCostCategoryPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleAndCostCategory) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type CostCategoryRuleRuleAndDimension struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

// CostCategoryRuleRuleAndDimensionInput is an input type that accepts CostCategoryRuleRuleAndDimensionArgs and CostCategoryRuleRuleAndDimensionOutput values.
// You can construct a concrete instance of `CostCategoryRuleRuleAndDimensionInput` via:
//
//	CostCategoryRuleRuleAndDimensionArgs{...}
type CostCategoryRuleRuleAndDimensionInput interface {
	pulumi.Input

	ToCostCategoryRuleRuleAndDimensionOutput() CostCategoryRuleRuleAndDimensionOutput
	ToCostCategoryRuleRuleAndDimensionOutputWithContext(context.Context) CostCategoryRuleRuleAndDimensionOutput
}

type CostCategoryRuleRuleAndDimensionArgs struct {
	// Unique name of the Cost Category.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (CostCategoryRuleRuleAndDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleAndDimension)(nil)).Elem()
}

func (i CostCategoryRuleRuleAndDimensionArgs) ToCostCategoryRuleRuleAndDimensionOutput() CostCategoryRuleRuleAndDimensionOutput {
	return i.ToCostCategoryRuleRuleAndDimensionOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleAndDimensionArgs) ToCostCategoryRuleRuleAndDimensionOutputWithContext(ctx context.Context) CostCategoryRuleRuleAndDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleAndDimensionOutput)
}

func (i CostCategoryRuleRuleAndDimensionArgs) ToCostCategoryRuleRuleAndDimensionPtrOutput() CostCategoryRuleRuleAndDimensionPtrOutput {
	return i.ToCostCategoryRuleRuleAndDimensionPtrOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleAndDimensionArgs) ToCostCategoryRuleRuleAndDimensionPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleAndDimensionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleAndDimensionOutput).ToCostCategoryRuleRuleAndDimensionPtrOutputWithContext(ctx)
}

// CostCategoryRuleRuleAndDimensionPtrInput is an input type that accepts CostCategoryRuleRuleAndDimensionArgs, CostCategoryRuleRuleAndDimensionPtr and CostCategoryRuleRuleAndDimensionPtrOutput values.
// You can construct a concrete instance of `CostCategoryRuleRuleAndDimensionPtrInput` via:
//
//	        CostCategoryRuleRuleAndDimensionArgs{...}
//
//	or:
//
//	        nil
type CostCategoryRuleRuleAndDimensionPtrInput interface {
	pulumi.Input

	ToCostCategoryRuleRuleAndDimensionPtrOutput() CostCategoryRuleRuleAndDimensionPtrOutput
	ToCostCategoryRuleRuleAndDimensionPtrOutputWithContext(context.Context) CostCategoryRuleRuleAndDimensionPtrOutput
}

type costCategoryRuleRuleAndDimensionPtrType CostCategoryRuleRuleAndDimensionArgs

func CostCategoryRuleRuleAndDimensionPtr(v *CostCategoryRuleRuleAndDimensionArgs) CostCategoryRuleRuleAndDimensionPtrInput {
	return (*costCategoryRuleRuleAndDimensionPtrType)(v)
}

func (*costCategoryRuleRuleAndDimensionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CostCategoryRuleRuleAndDimension)(nil)).Elem()
}

func (i *costCategoryRuleRuleAndDimensionPtrType) ToCostCategoryRuleRuleAndDimensionPtrOutput() CostCategoryRuleRuleAndDimensionPtrOutput {
	return i.ToCostCategoryRuleRuleAndDimensionPtrOutputWithContext(context.Background())
}

func (i *costCategoryRuleRuleAndDimensionPtrType) ToCostCategoryRuleRuleAndDimensionPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleAndDimensionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleAndDimensionPtrOutput)
}

type CostCategoryRuleRuleAndDimensionOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleAndDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleAndDimension)(nil)).Elem()
}

func (o CostCategoryRuleRuleAndDimensionOutput) ToCostCategoryRuleRuleAndDimensionOutput() CostCategoryRuleRuleAndDimensionOutput {
	return o
}

func (o CostCategoryRuleRuleAndDimensionOutput) ToCostCategoryRuleRuleAndDimensionOutputWithContext(ctx context.Context) CostCategoryRuleRuleAndDimensionOutput {
	return o
}

func (o CostCategoryRuleRuleAndDimensionOutput) ToCostCategoryRuleRuleAndDimensionPtrOutput() CostCategoryRuleRuleAndDimensionPtrOutput {
	return o.ToCostCategoryRuleRuleAndDimensionPtrOutputWithContext(context.Background())
}

func (o CostCategoryRuleRuleAndDimensionOutput) ToCostCategoryRuleRuleAndDimensionPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleAndDimensionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CostCategoryRuleRuleAndDimension) *CostCategoryRuleRuleAndDimension {
		return &v
	}).(CostCategoryRuleRuleAndDimensionPtrOutput)
}

// Unique name of the Cost Category.
func (o CostCategoryRuleRuleAndDimensionOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleAndDimension) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o CostCategoryRuleRuleAndDimensionOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleAndDimension) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o CostCategoryRuleRuleAndDimensionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleAndDimension) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type CostCategoryRuleRuleAndDimensionPtrOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleAndDimensionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CostCategoryRuleRuleAndDimension)(nil)).Elem()
}

func (o CostCategoryRuleRuleAndDimensionPtrOutput) ToCostCategoryRuleRuleAndDimensionPtrOutput() CostCategoryRuleRuleAndDimensionPtrOutput {
	return o
}

func (o CostCategoryRuleRuleAndDimensionPtrOutput) ToCostCategoryRuleRuleAndDimensionPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleAndDimensionPtrOutput {
	return o
}

func (o CostCategoryRuleRuleAndDimensionPtrOutput) Elem() CostCategoryRuleRuleAndDimensionOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleAndDimension) CostCategoryRuleRuleAndDimension {
		if v != nil {
			return *v
		}
		var ret CostCategoryRuleRuleAndDimension
		return ret
	}).(CostCategoryRuleRuleAndDimensionOutput)
}

// Unique name of the Cost Category.
func (o CostCategoryRuleRuleAndDimensionPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleAndDimension) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o CostCategoryRuleRuleAndDimensionPtrOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleAndDimension) []string {
		if v == nil {
			return nil
		}
		return v.MatchOptions
	}).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o CostCategoryRuleRuleAndDimensionPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleAndDimension) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type CostCategoryRuleRuleAndTags struct {
	// Key for the tag.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

// CostCategoryRuleRuleAndTagsInput is an input type that accepts CostCategoryRuleRuleAndTagsArgs and CostCategoryRuleRuleAndTagsOutput values.
// You can construct a concrete instance of `CostCategoryRuleRuleAndTagsInput` via:
//
//	CostCategoryRuleRuleAndTagsArgs{...}
type CostCategoryRuleRuleAndTagsInput interface {
	pulumi.Input

	ToCostCategoryRuleRuleAndTagsOutput() CostCategoryRuleRuleAndTagsOutput
	ToCostCategoryRuleRuleAndTagsOutputWithContext(context.Context) CostCategoryRuleRuleAndTagsOutput
}

type CostCategoryRuleRuleAndTagsArgs struct {
	// Key for the tag.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (CostCategoryRuleRuleAndTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleAndTags)(nil)).Elem()
}

func (i CostCategoryRuleRuleAndTagsArgs) ToCostCategoryRuleRuleAndTagsOutput() CostCategoryRuleRuleAndTagsOutput {
	return i.ToCostCategoryRuleRuleAndTagsOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleAndTagsArgs) ToCostCategoryRuleRuleAndTagsOutputWithContext(ctx context.Context) CostCategoryRuleRuleAndTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleAndTagsOutput)
}

func (i CostCategoryRuleRuleAndTagsArgs) ToCostCategoryRuleRuleAndTagsPtrOutput() CostCategoryRuleRuleAndTagsPtrOutput {
	return i.ToCostCategoryRuleRuleAndTagsPtrOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleAndTagsArgs) ToCostCategoryRuleRuleAndTagsPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleAndTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleAndTagsOutput).ToCostCategoryRuleRuleAndTagsPtrOutputWithContext(ctx)
}

// CostCategoryRuleRuleAndTagsPtrInput is an input type that accepts CostCategoryRuleRuleAndTagsArgs, CostCategoryRuleRuleAndTagsPtr and CostCategoryRuleRuleAndTagsPtrOutput values.
// You can construct a concrete instance of `CostCategoryRuleRuleAndTagsPtrInput` via:
//
//	        CostCategoryRuleRuleAndTagsArgs{...}
//
//	or:
//
//	        nil
type CostCategoryRuleRuleAndTagsPtrInput interface {
	pulumi.Input

	ToCostCategoryRuleRuleAndTagsPtrOutput() CostCategoryRuleRuleAndTagsPtrOutput
	ToCostCategoryRuleRuleAndTagsPtrOutputWithContext(context.Context) CostCategoryRuleRuleAndTagsPtrOutput
}

type costCategoryRuleRuleAndTagsPtrType CostCategoryRuleRuleAndTagsArgs

func CostCategoryRuleRuleAndTagsPtr(v *CostCategoryRuleRuleAndTagsArgs) CostCategoryRuleRuleAndTagsPtrInput {
	return (*costCategoryRuleRuleAndTagsPtrType)(v)
}

func (*costCategoryRuleRuleAndTagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CostCategoryRuleRuleAndTags)(nil)).Elem()
}

func (i *costCategoryRuleRuleAndTagsPtrType) ToCostCategoryRuleRuleAndTagsPtrOutput() CostCategoryRuleRuleAndTagsPtrOutput {
	return i.ToCostCategoryRuleRuleAndTagsPtrOutputWithContext(context.Background())
}

func (i *costCategoryRuleRuleAndTagsPtrType) ToCostCategoryRuleRuleAndTagsPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleAndTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleAndTagsPtrOutput)
}

type CostCategoryRuleRuleAndTagsOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleAndTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleAndTags)(nil)).Elem()
}

func (o CostCategoryRuleRuleAndTagsOutput) ToCostCategoryRuleRuleAndTagsOutput() CostCategoryRuleRuleAndTagsOutput {
	return o
}

func (o CostCategoryRuleRuleAndTagsOutput) ToCostCategoryRuleRuleAndTagsOutputWithContext(ctx context.Context) CostCategoryRuleRuleAndTagsOutput {
	return o
}

func (o CostCategoryRuleRuleAndTagsOutput) ToCostCategoryRuleRuleAndTagsPtrOutput() CostCategoryRuleRuleAndTagsPtrOutput {
	return o.ToCostCategoryRuleRuleAndTagsPtrOutputWithContext(context.Background())
}

func (o CostCategoryRuleRuleAndTagsOutput) ToCostCategoryRuleRuleAndTagsPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleAndTagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CostCategoryRuleRuleAndTags) *CostCategoryRuleRuleAndTags {
		return &v
	}).(CostCategoryRuleRuleAndTagsPtrOutput)
}

// Key for the tag.
func (o CostCategoryRuleRuleAndTagsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleAndTags) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o CostCategoryRuleRuleAndTagsOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleAndTags) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o CostCategoryRuleRuleAndTagsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleAndTags) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type CostCategoryRuleRuleAndTagsPtrOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleAndTagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CostCategoryRuleRuleAndTags)(nil)).Elem()
}

func (o CostCategoryRuleRuleAndTagsPtrOutput) ToCostCategoryRuleRuleAndTagsPtrOutput() CostCategoryRuleRuleAndTagsPtrOutput {
	return o
}

func (o CostCategoryRuleRuleAndTagsPtrOutput) ToCostCategoryRuleRuleAndTagsPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleAndTagsPtrOutput {
	return o
}

func (o CostCategoryRuleRuleAndTagsPtrOutput) Elem() CostCategoryRuleRuleAndTagsOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleAndTags) CostCategoryRuleRuleAndTags {
		if v != nil {
			return *v
		}
		var ret CostCategoryRuleRuleAndTags
		return ret
	}).(CostCategoryRuleRuleAndTagsOutput)
}

// Key for the tag.
func (o CostCategoryRuleRuleAndTagsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleAndTags) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o CostCategoryRuleRuleAndTagsPtrOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleAndTags) []string {
		if v == nil {
			return nil
		}
		return v.MatchOptions
	}).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o CostCategoryRuleRuleAndTagsPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleAndTags) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type CostCategoryRuleRuleCostCategory struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

// CostCategoryRuleRuleCostCategoryInput is an input type that accepts CostCategoryRuleRuleCostCategoryArgs and CostCategoryRuleRuleCostCategoryOutput values.
// You can construct a concrete instance of `CostCategoryRuleRuleCostCategoryInput` via:
//
//	CostCategoryRuleRuleCostCategoryArgs{...}
type CostCategoryRuleRuleCostCategoryInput interface {
	pulumi.Input

	ToCostCategoryRuleRuleCostCategoryOutput() CostCategoryRuleRuleCostCategoryOutput
	ToCostCategoryRuleRuleCostCategoryOutputWithContext(context.Context) CostCategoryRuleRuleCostCategoryOutput
}

type CostCategoryRuleRuleCostCategoryArgs struct {
	// Unique name of the Cost Category.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (CostCategoryRuleRuleCostCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleCostCategory)(nil)).Elem()
}

func (i CostCategoryRuleRuleCostCategoryArgs) ToCostCategoryRuleRuleCostCategoryOutput() CostCategoryRuleRuleCostCategoryOutput {
	return i.ToCostCategoryRuleRuleCostCategoryOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleCostCategoryArgs) ToCostCategoryRuleRuleCostCategoryOutputWithContext(ctx context.Context) CostCategoryRuleRuleCostCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleCostCategoryOutput)
}

func (i CostCategoryRuleRuleCostCategoryArgs) ToCostCategoryRuleRuleCostCategoryPtrOutput() CostCategoryRuleRuleCostCategoryPtrOutput {
	return i.ToCostCategoryRuleRuleCostCategoryPtrOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleCostCategoryArgs) ToCostCategoryRuleRuleCostCategoryPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleCostCategoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleCostCategoryOutput).ToCostCategoryRuleRuleCostCategoryPtrOutputWithContext(ctx)
}

// CostCategoryRuleRuleCostCategoryPtrInput is an input type that accepts CostCategoryRuleRuleCostCategoryArgs, CostCategoryRuleRuleCostCategoryPtr and CostCategoryRuleRuleCostCategoryPtrOutput values.
// You can construct a concrete instance of `CostCategoryRuleRuleCostCategoryPtrInput` via:
//
//	        CostCategoryRuleRuleCostCategoryArgs{...}
//
//	or:
//
//	        nil
type CostCategoryRuleRuleCostCategoryPtrInput interface {
	pulumi.Input

	ToCostCategoryRuleRuleCostCategoryPtrOutput() CostCategoryRuleRuleCostCategoryPtrOutput
	ToCostCategoryRuleRuleCostCategoryPtrOutputWithContext(context.Context) CostCategoryRuleRuleCostCategoryPtrOutput
}

type costCategoryRuleRuleCostCategoryPtrType CostCategoryRuleRuleCostCategoryArgs

func CostCategoryRuleRuleCostCategoryPtr(v *CostCategoryRuleRuleCostCategoryArgs) CostCategoryRuleRuleCostCategoryPtrInput {
	return (*costCategoryRuleRuleCostCategoryPtrType)(v)
}

func (*costCategoryRuleRuleCostCategoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CostCategoryRuleRuleCostCategory)(nil)).Elem()
}

func (i *costCategoryRuleRuleCostCategoryPtrType) ToCostCategoryRuleRuleCostCategoryPtrOutput() CostCategoryRuleRuleCostCategoryPtrOutput {
	return i.ToCostCategoryRuleRuleCostCategoryPtrOutputWithContext(context.Background())
}

func (i *costCategoryRuleRuleCostCategoryPtrType) ToCostCategoryRuleRuleCostCategoryPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleCostCategoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleCostCategoryPtrOutput)
}

type CostCategoryRuleRuleCostCategoryOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleCostCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleCostCategory)(nil)).Elem()
}

func (o CostCategoryRuleRuleCostCategoryOutput) ToCostCategoryRuleRuleCostCategoryOutput() CostCategoryRuleRuleCostCategoryOutput {
	return o
}

func (o CostCategoryRuleRuleCostCategoryOutput) ToCostCategoryRuleRuleCostCategoryOutputWithContext(ctx context.Context) CostCategoryRuleRuleCostCategoryOutput {
	return o
}

func (o CostCategoryRuleRuleCostCategoryOutput) ToCostCategoryRuleRuleCostCategoryPtrOutput() CostCategoryRuleRuleCostCategoryPtrOutput {
	return o.ToCostCategoryRuleRuleCostCategoryPtrOutputWithContext(context.Background())
}

func (o CostCategoryRuleRuleCostCategoryOutput) ToCostCategoryRuleRuleCostCategoryPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleCostCategoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CostCategoryRuleRuleCostCategory) *CostCategoryRuleRuleCostCategory {
		return &v
	}).(CostCategoryRuleRuleCostCategoryPtrOutput)
}

// Unique name of the Cost Category.
func (o CostCategoryRuleRuleCostCategoryOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleCostCategory) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o CostCategoryRuleRuleCostCategoryOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleCostCategory) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o CostCategoryRuleRuleCostCategoryOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleCostCategory) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type CostCategoryRuleRuleCostCategoryPtrOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleCostCategoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CostCategoryRuleRuleCostCategory)(nil)).Elem()
}

func (o CostCategoryRuleRuleCostCategoryPtrOutput) ToCostCategoryRuleRuleCostCategoryPtrOutput() CostCategoryRuleRuleCostCategoryPtrOutput {
	return o
}

func (o CostCategoryRuleRuleCostCategoryPtrOutput) ToCostCategoryRuleRuleCostCategoryPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleCostCategoryPtrOutput {
	return o
}

func (o CostCategoryRuleRuleCostCategoryPtrOutput) Elem() CostCategoryRuleRuleCostCategoryOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleCostCategory) CostCategoryRuleRuleCostCategory {
		if v != nil {
			return *v
		}
		var ret CostCategoryRuleRuleCostCategory
		return ret
	}).(CostCategoryRuleRuleCostCategoryOutput)
}

// Unique name of the Cost Category.
func (o CostCategoryRuleRuleCostCategoryPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleCostCategory) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o CostCategoryRuleRuleCostCategoryPtrOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleCostCategory) []string {
		if v == nil {
			return nil
		}
		return v.MatchOptions
	}).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o CostCategoryRuleRuleCostCategoryPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleCostCategory) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type CostCategoryRuleRuleDimension struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

// CostCategoryRuleRuleDimensionInput is an input type that accepts CostCategoryRuleRuleDimensionArgs and CostCategoryRuleRuleDimensionOutput values.
// You can construct a concrete instance of `CostCategoryRuleRuleDimensionInput` via:
//
//	CostCategoryRuleRuleDimensionArgs{...}
type CostCategoryRuleRuleDimensionInput interface {
	pulumi.Input

	ToCostCategoryRuleRuleDimensionOutput() CostCategoryRuleRuleDimensionOutput
	ToCostCategoryRuleRuleDimensionOutputWithContext(context.Context) CostCategoryRuleRuleDimensionOutput
}

type CostCategoryRuleRuleDimensionArgs struct {
	// Unique name of the Cost Category.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (CostCategoryRuleRuleDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleDimension)(nil)).Elem()
}

func (i CostCategoryRuleRuleDimensionArgs) ToCostCategoryRuleRuleDimensionOutput() CostCategoryRuleRuleDimensionOutput {
	return i.ToCostCategoryRuleRuleDimensionOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleDimensionArgs) ToCostCategoryRuleRuleDimensionOutputWithContext(ctx context.Context) CostCategoryRuleRuleDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleDimensionOutput)
}

func (i CostCategoryRuleRuleDimensionArgs) ToCostCategoryRuleRuleDimensionPtrOutput() CostCategoryRuleRuleDimensionPtrOutput {
	return i.ToCostCategoryRuleRuleDimensionPtrOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleDimensionArgs) ToCostCategoryRuleRuleDimensionPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleDimensionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleDimensionOutput).ToCostCategoryRuleRuleDimensionPtrOutputWithContext(ctx)
}

// CostCategoryRuleRuleDimensionPtrInput is an input type that accepts CostCategoryRuleRuleDimensionArgs, CostCategoryRuleRuleDimensionPtr and CostCategoryRuleRuleDimensionPtrOutput values.
// You can construct a concrete instance of `CostCategoryRuleRuleDimensionPtrInput` via:
//
//	        CostCategoryRuleRuleDimensionArgs{...}
//
//	or:
//
//	        nil
type CostCategoryRuleRuleDimensionPtrInput interface {
	pulumi.Input

	ToCostCategoryRuleRuleDimensionPtrOutput() CostCategoryRuleRuleDimensionPtrOutput
	ToCostCategoryRuleRuleDimensionPtrOutputWithContext(context.Context) CostCategoryRuleRuleDimensionPtrOutput
}

type costCategoryRuleRuleDimensionPtrType CostCategoryRuleRuleDimensionArgs

func CostCategoryRuleRuleDimensionPtr(v *CostCategoryRuleRuleDimensionArgs) CostCategoryRuleRuleDimensionPtrInput {
	return (*costCategoryRuleRuleDimensionPtrType)(v)
}

func (*costCategoryRuleRuleDimensionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CostCategoryRuleRuleDimension)(nil)).Elem()
}

func (i *costCategoryRuleRuleDimensionPtrType) ToCostCategoryRuleRuleDimensionPtrOutput() CostCategoryRuleRuleDimensionPtrOutput {
	return i.ToCostCategoryRuleRuleDimensionPtrOutputWithContext(context.Background())
}

func (i *costCategoryRuleRuleDimensionPtrType) ToCostCategoryRuleRuleDimensionPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleDimensionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleDimensionPtrOutput)
}

type CostCategoryRuleRuleDimensionOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleDimension)(nil)).Elem()
}

func (o CostCategoryRuleRuleDimensionOutput) ToCostCategoryRuleRuleDimensionOutput() CostCategoryRuleRuleDimensionOutput {
	return o
}

func (o CostCategoryRuleRuleDimensionOutput) ToCostCategoryRuleRuleDimensionOutputWithContext(ctx context.Context) CostCategoryRuleRuleDimensionOutput {
	return o
}

func (o CostCategoryRuleRuleDimensionOutput) ToCostCategoryRuleRuleDimensionPtrOutput() CostCategoryRuleRuleDimensionPtrOutput {
	return o.ToCostCategoryRuleRuleDimensionPtrOutputWithContext(context.Background())
}

func (o CostCategoryRuleRuleDimensionOutput) ToCostCategoryRuleRuleDimensionPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleDimensionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CostCategoryRuleRuleDimension) *CostCategoryRuleRuleDimension {
		return &v
	}).(CostCategoryRuleRuleDimensionPtrOutput)
}

// Unique name of the Cost Category.
func (o CostCategoryRuleRuleDimensionOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleDimension) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o CostCategoryRuleRuleDimensionOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleDimension) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o CostCategoryRuleRuleDimensionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleDimension) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type CostCategoryRuleRuleDimensionPtrOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleDimensionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CostCategoryRuleRuleDimension)(nil)).Elem()
}

func (o CostCategoryRuleRuleDimensionPtrOutput) ToCostCategoryRuleRuleDimensionPtrOutput() CostCategoryRuleRuleDimensionPtrOutput {
	return o
}

func (o CostCategoryRuleRuleDimensionPtrOutput) ToCostCategoryRuleRuleDimensionPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleDimensionPtrOutput {
	return o
}

func (o CostCategoryRuleRuleDimensionPtrOutput) Elem() CostCategoryRuleRuleDimensionOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleDimension) CostCategoryRuleRuleDimension {
		if v != nil {
			return *v
		}
		var ret CostCategoryRuleRuleDimension
		return ret
	}).(CostCategoryRuleRuleDimensionOutput)
}

// Unique name of the Cost Category.
func (o CostCategoryRuleRuleDimensionPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleDimension) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o CostCategoryRuleRuleDimensionPtrOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleDimension) []string {
		if v == nil {
			return nil
		}
		return v.MatchOptions
	}).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o CostCategoryRuleRuleDimensionPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleDimension) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type CostCategoryRuleRuleNot struct {
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategory *CostCategoryRuleRuleNotCostCategory `pulumi:"costCategory"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimension *CostCategoryRuleRuleNotDimension `pulumi:"dimension"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags *CostCategoryRuleRuleNotTags `pulumi:"tags"`
}

// CostCategoryRuleRuleNotInput is an input type that accepts CostCategoryRuleRuleNotArgs and CostCategoryRuleRuleNotOutput values.
// You can construct a concrete instance of `CostCategoryRuleRuleNotInput` via:
//
//	CostCategoryRuleRuleNotArgs{...}
type CostCategoryRuleRuleNotInput interface {
	pulumi.Input

	ToCostCategoryRuleRuleNotOutput() CostCategoryRuleRuleNotOutput
	ToCostCategoryRuleRuleNotOutputWithContext(context.Context) CostCategoryRuleRuleNotOutput
}

type CostCategoryRuleRuleNotArgs struct {
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategory CostCategoryRuleRuleNotCostCategoryPtrInput `pulumi:"costCategory"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimension CostCategoryRuleRuleNotDimensionPtrInput `pulumi:"dimension"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags CostCategoryRuleRuleNotTagsPtrInput `pulumi:"tags"`
}

func (CostCategoryRuleRuleNotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleNot)(nil)).Elem()
}

func (i CostCategoryRuleRuleNotArgs) ToCostCategoryRuleRuleNotOutput() CostCategoryRuleRuleNotOutput {
	return i.ToCostCategoryRuleRuleNotOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleNotArgs) ToCostCategoryRuleRuleNotOutputWithContext(ctx context.Context) CostCategoryRuleRuleNotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleNotOutput)
}

func (i CostCategoryRuleRuleNotArgs) ToCostCategoryRuleRuleNotPtrOutput() CostCategoryRuleRuleNotPtrOutput {
	return i.ToCostCategoryRuleRuleNotPtrOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleNotArgs) ToCostCategoryRuleRuleNotPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleNotPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleNotOutput).ToCostCategoryRuleRuleNotPtrOutputWithContext(ctx)
}

// CostCategoryRuleRuleNotPtrInput is an input type that accepts CostCategoryRuleRuleNotArgs, CostCategoryRuleRuleNotPtr and CostCategoryRuleRuleNotPtrOutput values.
// You can construct a concrete instance of `CostCategoryRuleRuleNotPtrInput` via:
//
//	        CostCategoryRuleRuleNotArgs{...}
//
//	or:
//
//	        nil
type CostCategoryRuleRuleNotPtrInput interface {
	pulumi.Input

	ToCostCategoryRuleRuleNotPtrOutput() CostCategoryRuleRuleNotPtrOutput
	ToCostCategoryRuleRuleNotPtrOutputWithContext(context.Context) CostCategoryRuleRuleNotPtrOutput
}

type costCategoryRuleRuleNotPtrType CostCategoryRuleRuleNotArgs

func CostCategoryRuleRuleNotPtr(v *CostCategoryRuleRuleNotArgs) CostCategoryRuleRuleNotPtrInput {
	return (*costCategoryRuleRuleNotPtrType)(v)
}

func (*costCategoryRuleRuleNotPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CostCategoryRuleRuleNot)(nil)).Elem()
}

func (i *costCategoryRuleRuleNotPtrType) ToCostCategoryRuleRuleNotPtrOutput() CostCategoryRuleRuleNotPtrOutput {
	return i.ToCostCategoryRuleRuleNotPtrOutputWithContext(context.Background())
}

func (i *costCategoryRuleRuleNotPtrType) ToCostCategoryRuleRuleNotPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleNotPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleNotPtrOutput)
}

type CostCategoryRuleRuleNotOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleNotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleNot)(nil)).Elem()
}

func (o CostCategoryRuleRuleNotOutput) ToCostCategoryRuleRuleNotOutput() CostCategoryRuleRuleNotOutput {
	return o
}

func (o CostCategoryRuleRuleNotOutput) ToCostCategoryRuleRuleNotOutputWithContext(ctx context.Context) CostCategoryRuleRuleNotOutput {
	return o
}

func (o CostCategoryRuleRuleNotOutput) ToCostCategoryRuleRuleNotPtrOutput() CostCategoryRuleRuleNotPtrOutput {
	return o.ToCostCategoryRuleRuleNotPtrOutputWithContext(context.Background())
}

func (o CostCategoryRuleRuleNotOutput) ToCostCategoryRuleRuleNotPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleNotPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CostCategoryRuleRuleNot) *CostCategoryRuleRuleNot {
		return &v
	}).(CostCategoryRuleRuleNotPtrOutput)
}

// Configuration block for the filter that's based on `CostCategory` values. See below.
func (o CostCategoryRuleRuleNotOutput) CostCategory() CostCategoryRuleRuleNotCostCategoryPtrOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleNot) *CostCategoryRuleRuleNotCostCategory { return v.CostCategory }).(CostCategoryRuleRuleNotCostCategoryPtrOutput)
}

// Configuration block for the specific `Dimension` to use for `Expression`. See below.
func (o CostCategoryRuleRuleNotOutput) Dimension() CostCategoryRuleRuleNotDimensionPtrOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleNot) *CostCategoryRuleRuleNotDimension { return v.Dimension }).(CostCategoryRuleRuleNotDimensionPtrOutput)
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o CostCategoryRuleRuleNotOutput) Tags() CostCategoryRuleRuleNotTagsPtrOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleNot) *CostCategoryRuleRuleNotTags { return v.Tags }).(CostCategoryRuleRuleNotTagsPtrOutput)
}

type CostCategoryRuleRuleNotPtrOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleNotPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CostCategoryRuleRuleNot)(nil)).Elem()
}

func (o CostCategoryRuleRuleNotPtrOutput) ToCostCategoryRuleRuleNotPtrOutput() CostCategoryRuleRuleNotPtrOutput {
	return o
}

func (o CostCategoryRuleRuleNotPtrOutput) ToCostCategoryRuleRuleNotPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleNotPtrOutput {
	return o
}

func (o CostCategoryRuleRuleNotPtrOutput) Elem() CostCategoryRuleRuleNotOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleNot) CostCategoryRuleRuleNot {
		if v != nil {
			return *v
		}
		var ret CostCategoryRuleRuleNot
		return ret
	}).(CostCategoryRuleRuleNotOutput)
}

// Configuration block for the filter that's based on `CostCategory` values. See below.
func (o CostCategoryRuleRuleNotPtrOutput) CostCategory() CostCategoryRuleRuleNotCostCategoryPtrOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleNot) *CostCategoryRuleRuleNotCostCategory {
		if v == nil {
			return nil
		}
		return v.CostCategory
	}).(CostCategoryRuleRuleNotCostCategoryPtrOutput)
}

// Configuration block for the specific `Dimension` to use for `Expression`. See below.
func (o CostCategoryRuleRuleNotPtrOutput) Dimension() CostCategoryRuleRuleNotDimensionPtrOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleNot) *CostCategoryRuleRuleNotDimension {
		if v == nil {
			return nil
		}
		return v.Dimension
	}).(CostCategoryRuleRuleNotDimensionPtrOutput)
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o CostCategoryRuleRuleNotPtrOutput) Tags() CostCategoryRuleRuleNotTagsPtrOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleNot) *CostCategoryRuleRuleNotTags {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(CostCategoryRuleRuleNotTagsPtrOutput)
}

type CostCategoryRuleRuleNotCostCategory struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

// CostCategoryRuleRuleNotCostCategoryInput is an input type that accepts CostCategoryRuleRuleNotCostCategoryArgs and CostCategoryRuleRuleNotCostCategoryOutput values.
// You can construct a concrete instance of `CostCategoryRuleRuleNotCostCategoryInput` via:
//
//	CostCategoryRuleRuleNotCostCategoryArgs{...}
type CostCategoryRuleRuleNotCostCategoryInput interface {
	pulumi.Input

	ToCostCategoryRuleRuleNotCostCategoryOutput() CostCategoryRuleRuleNotCostCategoryOutput
	ToCostCategoryRuleRuleNotCostCategoryOutputWithContext(context.Context) CostCategoryRuleRuleNotCostCategoryOutput
}

type CostCategoryRuleRuleNotCostCategoryArgs struct {
	// Unique name of the Cost Category.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (CostCategoryRuleRuleNotCostCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleNotCostCategory)(nil)).Elem()
}

func (i CostCategoryRuleRuleNotCostCategoryArgs) ToCostCategoryRuleRuleNotCostCategoryOutput() CostCategoryRuleRuleNotCostCategoryOutput {
	return i.ToCostCategoryRuleRuleNotCostCategoryOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleNotCostCategoryArgs) ToCostCategoryRuleRuleNotCostCategoryOutputWithContext(ctx context.Context) CostCategoryRuleRuleNotCostCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleNotCostCategoryOutput)
}

func (i CostCategoryRuleRuleNotCostCategoryArgs) ToCostCategoryRuleRuleNotCostCategoryPtrOutput() CostCategoryRuleRuleNotCostCategoryPtrOutput {
	return i.ToCostCategoryRuleRuleNotCostCategoryPtrOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleNotCostCategoryArgs) ToCostCategoryRuleRuleNotCostCategoryPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleNotCostCategoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleNotCostCategoryOutput).ToCostCategoryRuleRuleNotCostCategoryPtrOutputWithContext(ctx)
}

// CostCategoryRuleRuleNotCostCategoryPtrInput is an input type that accepts CostCategoryRuleRuleNotCostCategoryArgs, CostCategoryRuleRuleNotCostCategoryPtr and CostCategoryRuleRuleNotCostCategoryPtrOutput values.
// You can construct a concrete instance of `CostCategoryRuleRuleNotCostCategoryPtrInput` via:
//
//	        CostCategoryRuleRuleNotCostCategoryArgs{...}
//
//	or:
//
//	        nil
type CostCategoryRuleRuleNotCostCategoryPtrInput interface {
	pulumi.Input

	ToCostCategoryRuleRuleNotCostCategoryPtrOutput() CostCategoryRuleRuleNotCostCategoryPtrOutput
	ToCostCategoryRuleRuleNotCostCategoryPtrOutputWithContext(context.Context) CostCategoryRuleRuleNotCostCategoryPtrOutput
}

type costCategoryRuleRuleNotCostCategoryPtrType CostCategoryRuleRuleNotCostCategoryArgs

func CostCategoryRuleRuleNotCostCategoryPtr(v *CostCategoryRuleRuleNotCostCategoryArgs) CostCategoryRuleRuleNotCostCategoryPtrInput {
	return (*costCategoryRuleRuleNotCostCategoryPtrType)(v)
}

func (*costCategoryRuleRuleNotCostCategoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CostCategoryRuleRuleNotCostCategory)(nil)).Elem()
}

func (i *costCategoryRuleRuleNotCostCategoryPtrType) ToCostCategoryRuleRuleNotCostCategoryPtrOutput() CostCategoryRuleRuleNotCostCategoryPtrOutput {
	return i.ToCostCategoryRuleRuleNotCostCategoryPtrOutputWithContext(context.Background())
}

func (i *costCategoryRuleRuleNotCostCategoryPtrType) ToCostCategoryRuleRuleNotCostCategoryPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleNotCostCategoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleNotCostCategoryPtrOutput)
}

type CostCategoryRuleRuleNotCostCategoryOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleNotCostCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleNotCostCategory)(nil)).Elem()
}

func (o CostCategoryRuleRuleNotCostCategoryOutput) ToCostCategoryRuleRuleNotCostCategoryOutput() CostCategoryRuleRuleNotCostCategoryOutput {
	return o
}

func (o CostCategoryRuleRuleNotCostCategoryOutput) ToCostCategoryRuleRuleNotCostCategoryOutputWithContext(ctx context.Context) CostCategoryRuleRuleNotCostCategoryOutput {
	return o
}

func (o CostCategoryRuleRuleNotCostCategoryOutput) ToCostCategoryRuleRuleNotCostCategoryPtrOutput() CostCategoryRuleRuleNotCostCategoryPtrOutput {
	return o.ToCostCategoryRuleRuleNotCostCategoryPtrOutputWithContext(context.Background())
}

func (o CostCategoryRuleRuleNotCostCategoryOutput) ToCostCategoryRuleRuleNotCostCategoryPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleNotCostCategoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CostCategoryRuleRuleNotCostCategory) *CostCategoryRuleRuleNotCostCategory {
		return &v
	}).(CostCategoryRuleRuleNotCostCategoryPtrOutput)
}

// Unique name of the Cost Category.
func (o CostCategoryRuleRuleNotCostCategoryOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleNotCostCategory) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o CostCategoryRuleRuleNotCostCategoryOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleNotCostCategory) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o CostCategoryRuleRuleNotCostCategoryOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleNotCostCategory) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type CostCategoryRuleRuleNotCostCategoryPtrOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleNotCostCategoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CostCategoryRuleRuleNotCostCategory)(nil)).Elem()
}

func (o CostCategoryRuleRuleNotCostCategoryPtrOutput) ToCostCategoryRuleRuleNotCostCategoryPtrOutput() CostCategoryRuleRuleNotCostCategoryPtrOutput {
	return o
}

func (o CostCategoryRuleRuleNotCostCategoryPtrOutput) ToCostCategoryRuleRuleNotCostCategoryPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleNotCostCategoryPtrOutput {
	return o
}

func (o CostCategoryRuleRuleNotCostCategoryPtrOutput) Elem() CostCategoryRuleRuleNotCostCategoryOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleNotCostCategory) CostCategoryRuleRuleNotCostCategory {
		if v != nil {
			return *v
		}
		var ret CostCategoryRuleRuleNotCostCategory
		return ret
	}).(CostCategoryRuleRuleNotCostCategoryOutput)
}

// Unique name of the Cost Category.
func (o CostCategoryRuleRuleNotCostCategoryPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleNotCostCategory) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o CostCategoryRuleRuleNotCostCategoryPtrOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleNotCostCategory) []string {
		if v == nil {
			return nil
		}
		return v.MatchOptions
	}).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o CostCategoryRuleRuleNotCostCategoryPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleNotCostCategory) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type CostCategoryRuleRuleNotDimension struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

// CostCategoryRuleRuleNotDimensionInput is an input type that accepts CostCategoryRuleRuleNotDimensionArgs and CostCategoryRuleRuleNotDimensionOutput values.
// You can construct a concrete instance of `CostCategoryRuleRuleNotDimensionInput` via:
//
//	CostCategoryRuleRuleNotDimensionArgs{...}
type CostCategoryRuleRuleNotDimensionInput interface {
	pulumi.Input

	ToCostCategoryRuleRuleNotDimensionOutput() CostCategoryRuleRuleNotDimensionOutput
	ToCostCategoryRuleRuleNotDimensionOutputWithContext(context.Context) CostCategoryRuleRuleNotDimensionOutput
}

type CostCategoryRuleRuleNotDimensionArgs struct {
	// Unique name of the Cost Category.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (CostCategoryRuleRuleNotDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleNotDimension)(nil)).Elem()
}

func (i CostCategoryRuleRuleNotDimensionArgs) ToCostCategoryRuleRuleNotDimensionOutput() CostCategoryRuleRuleNotDimensionOutput {
	return i.ToCostCategoryRuleRuleNotDimensionOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleNotDimensionArgs) ToCostCategoryRuleRuleNotDimensionOutputWithContext(ctx context.Context) CostCategoryRuleRuleNotDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleNotDimensionOutput)
}

func (i CostCategoryRuleRuleNotDimensionArgs) ToCostCategoryRuleRuleNotDimensionPtrOutput() CostCategoryRuleRuleNotDimensionPtrOutput {
	return i.ToCostCategoryRuleRuleNotDimensionPtrOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleNotDimensionArgs) ToCostCategoryRuleRuleNotDimensionPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleNotDimensionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleNotDimensionOutput).ToCostCategoryRuleRuleNotDimensionPtrOutputWithContext(ctx)
}

// CostCategoryRuleRuleNotDimensionPtrInput is an input type that accepts CostCategoryRuleRuleNotDimensionArgs, CostCategoryRuleRuleNotDimensionPtr and CostCategoryRuleRuleNotDimensionPtrOutput values.
// You can construct a concrete instance of `CostCategoryRuleRuleNotDimensionPtrInput` via:
//
//	        CostCategoryRuleRuleNotDimensionArgs{...}
//
//	or:
//
//	        nil
type CostCategoryRuleRuleNotDimensionPtrInput interface {
	pulumi.Input

	ToCostCategoryRuleRuleNotDimensionPtrOutput() CostCategoryRuleRuleNotDimensionPtrOutput
	ToCostCategoryRuleRuleNotDimensionPtrOutputWithContext(context.Context) CostCategoryRuleRuleNotDimensionPtrOutput
}

type costCategoryRuleRuleNotDimensionPtrType CostCategoryRuleRuleNotDimensionArgs

func CostCategoryRuleRuleNotDimensionPtr(v *CostCategoryRuleRuleNotDimensionArgs) CostCategoryRuleRuleNotDimensionPtrInput {
	return (*costCategoryRuleRuleNotDimensionPtrType)(v)
}

func (*costCategoryRuleRuleNotDimensionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CostCategoryRuleRuleNotDimension)(nil)).Elem()
}

func (i *costCategoryRuleRuleNotDimensionPtrType) ToCostCategoryRuleRuleNotDimensionPtrOutput() CostCategoryRuleRuleNotDimensionPtrOutput {
	return i.ToCostCategoryRuleRuleNotDimensionPtrOutputWithContext(context.Background())
}

func (i *costCategoryRuleRuleNotDimensionPtrType) ToCostCategoryRuleRuleNotDimensionPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleNotDimensionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleNotDimensionPtrOutput)
}

type CostCategoryRuleRuleNotDimensionOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleNotDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleNotDimension)(nil)).Elem()
}

func (o CostCategoryRuleRuleNotDimensionOutput) ToCostCategoryRuleRuleNotDimensionOutput() CostCategoryRuleRuleNotDimensionOutput {
	return o
}

func (o CostCategoryRuleRuleNotDimensionOutput) ToCostCategoryRuleRuleNotDimensionOutputWithContext(ctx context.Context) CostCategoryRuleRuleNotDimensionOutput {
	return o
}

func (o CostCategoryRuleRuleNotDimensionOutput) ToCostCategoryRuleRuleNotDimensionPtrOutput() CostCategoryRuleRuleNotDimensionPtrOutput {
	return o.ToCostCategoryRuleRuleNotDimensionPtrOutputWithContext(context.Background())
}

func (o CostCategoryRuleRuleNotDimensionOutput) ToCostCategoryRuleRuleNotDimensionPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleNotDimensionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CostCategoryRuleRuleNotDimension) *CostCategoryRuleRuleNotDimension {
		return &v
	}).(CostCategoryRuleRuleNotDimensionPtrOutput)
}

// Unique name of the Cost Category.
func (o CostCategoryRuleRuleNotDimensionOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleNotDimension) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o CostCategoryRuleRuleNotDimensionOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleNotDimension) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o CostCategoryRuleRuleNotDimensionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleNotDimension) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type CostCategoryRuleRuleNotDimensionPtrOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleNotDimensionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CostCategoryRuleRuleNotDimension)(nil)).Elem()
}

func (o CostCategoryRuleRuleNotDimensionPtrOutput) ToCostCategoryRuleRuleNotDimensionPtrOutput() CostCategoryRuleRuleNotDimensionPtrOutput {
	return o
}

func (o CostCategoryRuleRuleNotDimensionPtrOutput) ToCostCategoryRuleRuleNotDimensionPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleNotDimensionPtrOutput {
	return o
}

func (o CostCategoryRuleRuleNotDimensionPtrOutput) Elem() CostCategoryRuleRuleNotDimensionOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleNotDimension) CostCategoryRuleRuleNotDimension {
		if v != nil {
			return *v
		}
		var ret CostCategoryRuleRuleNotDimension
		return ret
	}).(CostCategoryRuleRuleNotDimensionOutput)
}

// Unique name of the Cost Category.
func (o CostCategoryRuleRuleNotDimensionPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleNotDimension) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o CostCategoryRuleRuleNotDimensionPtrOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleNotDimension) []string {
		if v == nil {
			return nil
		}
		return v.MatchOptions
	}).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o CostCategoryRuleRuleNotDimensionPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleNotDimension) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type CostCategoryRuleRuleNotTags struct {
	// Key for the tag.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

// CostCategoryRuleRuleNotTagsInput is an input type that accepts CostCategoryRuleRuleNotTagsArgs and CostCategoryRuleRuleNotTagsOutput values.
// You can construct a concrete instance of `CostCategoryRuleRuleNotTagsInput` via:
//
//	CostCategoryRuleRuleNotTagsArgs{...}
type CostCategoryRuleRuleNotTagsInput interface {
	pulumi.Input

	ToCostCategoryRuleRuleNotTagsOutput() CostCategoryRuleRuleNotTagsOutput
	ToCostCategoryRuleRuleNotTagsOutputWithContext(context.Context) CostCategoryRuleRuleNotTagsOutput
}

type CostCategoryRuleRuleNotTagsArgs struct {
	// Key for the tag.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (CostCategoryRuleRuleNotTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleNotTags)(nil)).Elem()
}

func (i CostCategoryRuleRuleNotTagsArgs) ToCostCategoryRuleRuleNotTagsOutput() CostCategoryRuleRuleNotTagsOutput {
	return i.ToCostCategoryRuleRuleNotTagsOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleNotTagsArgs) ToCostCategoryRuleRuleNotTagsOutputWithContext(ctx context.Context) CostCategoryRuleRuleNotTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleNotTagsOutput)
}

func (i CostCategoryRuleRuleNotTagsArgs) ToCostCategoryRuleRuleNotTagsPtrOutput() CostCategoryRuleRuleNotTagsPtrOutput {
	return i.ToCostCategoryRuleRuleNotTagsPtrOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleNotTagsArgs) ToCostCategoryRuleRuleNotTagsPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleNotTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleNotTagsOutput).ToCostCategoryRuleRuleNotTagsPtrOutputWithContext(ctx)
}

// CostCategoryRuleRuleNotTagsPtrInput is an input type that accepts CostCategoryRuleRuleNotTagsArgs, CostCategoryRuleRuleNotTagsPtr and CostCategoryRuleRuleNotTagsPtrOutput values.
// You can construct a concrete instance of `CostCategoryRuleRuleNotTagsPtrInput` via:
//
//	        CostCategoryRuleRuleNotTagsArgs{...}
//
//	or:
//
//	        nil
type CostCategoryRuleRuleNotTagsPtrInput interface {
	pulumi.Input

	ToCostCategoryRuleRuleNotTagsPtrOutput() CostCategoryRuleRuleNotTagsPtrOutput
	ToCostCategoryRuleRuleNotTagsPtrOutputWithContext(context.Context) CostCategoryRuleRuleNotTagsPtrOutput
}

type costCategoryRuleRuleNotTagsPtrType CostCategoryRuleRuleNotTagsArgs

func CostCategoryRuleRuleNotTagsPtr(v *CostCategoryRuleRuleNotTagsArgs) CostCategoryRuleRuleNotTagsPtrInput {
	return (*costCategoryRuleRuleNotTagsPtrType)(v)
}

func (*costCategoryRuleRuleNotTagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CostCategoryRuleRuleNotTags)(nil)).Elem()
}

func (i *costCategoryRuleRuleNotTagsPtrType) ToCostCategoryRuleRuleNotTagsPtrOutput() CostCategoryRuleRuleNotTagsPtrOutput {
	return i.ToCostCategoryRuleRuleNotTagsPtrOutputWithContext(context.Background())
}

func (i *costCategoryRuleRuleNotTagsPtrType) ToCostCategoryRuleRuleNotTagsPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleNotTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleNotTagsPtrOutput)
}

type CostCategoryRuleRuleNotTagsOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleNotTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleNotTags)(nil)).Elem()
}

func (o CostCategoryRuleRuleNotTagsOutput) ToCostCategoryRuleRuleNotTagsOutput() CostCategoryRuleRuleNotTagsOutput {
	return o
}

func (o CostCategoryRuleRuleNotTagsOutput) ToCostCategoryRuleRuleNotTagsOutputWithContext(ctx context.Context) CostCategoryRuleRuleNotTagsOutput {
	return o
}

func (o CostCategoryRuleRuleNotTagsOutput) ToCostCategoryRuleRuleNotTagsPtrOutput() CostCategoryRuleRuleNotTagsPtrOutput {
	return o.ToCostCategoryRuleRuleNotTagsPtrOutputWithContext(context.Background())
}

func (o CostCategoryRuleRuleNotTagsOutput) ToCostCategoryRuleRuleNotTagsPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleNotTagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CostCategoryRuleRuleNotTags) *CostCategoryRuleRuleNotTags {
		return &v
	}).(CostCategoryRuleRuleNotTagsPtrOutput)
}

// Key for the tag.
func (o CostCategoryRuleRuleNotTagsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleNotTags) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o CostCategoryRuleRuleNotTagsOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleNotTags) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o CostCategoryRuleRuleNotTagsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleNotTags) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type CostCategoryRuleRuleNotTagsPtrOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleNotTagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CostCategoryRuleRuleNotTags)(nil)).Elem()
}

func (o CostCategoryRuleRuleNotTagsPtrOutput) ToCostCategoryRuleRuleNotTagsPtrOutput() CostCategoryRuleRuleNotTagsPtrOutput {
	return o
}

func (o CostCategoryRuleRuleNotTagsPtrOutput) ToCostCategoryRuleRuleNotTagsPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleNotTagsPtrOutput {
	return o
}

func (o CostCategoryRuleRuleNotTagsPtrOutput) Elem() CostCategoryRuleRuleNotTagsOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleNotTags) CostCategoryRuleRuleNotTags {
		if v != nil {
			return *v
		}
		var ret CostCategoryRuleRuleNotTags
		return ret
	}).(CostCategoryRuleRuleNotTagsOutput)
}

// Key for the tag.
func (o CostCategoryRuleRuleNotTagsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleNotTags) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o CostCategoryRuleRuleNotTagsPtrOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleNotTags) []string {
		if v == nil {
			return nil
		}
		return v.MatchOptions
	}).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o CostCategoryRuleRuleNotTagsPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleNotTags) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type CostCategoryRuleRuleOr struct {
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategory *CostCategoryRuleRuleOrCostCategory `pulumi:"costCategory"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimension *CostCategoryRuleRuleOrDimension `pulumi:"dimension"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags *CostCategoryRuleRuleOrTags `pulumi:"tags"`
}

// CostCategoryRuleRuleOrInput is an input type that accepts CostCategoryRuleRuleOrArgs and CostCategoryRuleRuleOrOutput values.
// You can construct a concrete instance of `CostCategoryRuleRuleOrInput` via:
//
//	CostCategoryRuleRuleOrArgs{...}
type CostCategoryRuleRuleOrInput interface {
	pulumi.Input

	ToCostCategoryRuleRuleOrOutput() CostCategoryRuleRuleOrOutput
	ToCostCategoryRuleRuleOrOutputWithContext(context.Context) CostCategoryRuleRuleOrOutput
}

type CostCategoryRuleRuleOrArgs struct {
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategory CostCategoryRuleRuleOrCostCategoryPtrInput `pulumi:"costCategory"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimension CostCategoryRuleRuleOrDimensionPtrInput `pulumi:"dimension"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags CostCategoryRuleRuleOrTagsPtrInput `pulumi:"tags"`
}

func (CostCategoryRuleRuleOrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleOr)(nil)).Elem()
}

func (i CostCategoryRuleRuleOrArgs) ToCostCategoryRuleRuleOrOutput() CostCategoryRuleRuleOrOutput {
	return i.ToCostCategoryRuleRuleOrOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleOrArgs) ToCostCategoryRuleRuleOrOutputWithContext(ctx context.Context) CostCategoryRuleRuleOrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleOrOutput)
}

// CostCategoryRuleRuleOrArrayInput is an input type that accepts CostCategoryRuleRuleOrArray and CostCategoryRuleRuleOrArrayOutput values.
// You can construct a concrete instance of `CostCategoryRuleRuleOrArrayInput` via:
//
//	CostCategoryRuleRuleOrArray{ CostCategoryRuleRuleOrArgs{...} }
type CostCategoryRuleRuleOrArrayInput interface {
	pulumi.Input

	ToCostCategoryRuleRuleOrArrayOutput() CostCategoryRuleRuleOrArrayOutput
	ToCostCategoryRuleRuleOrArrayOutputWithContext(context.Context) CostCategoryRuleRuleOrArrayOutput
}

type CostCategoryRuleRuleOrArray []CostCategoryRuleRuleOrInput

func (CostCategoryRuleRuleOrArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CostCategoryRuleRuleOr)(nil)).Elem()
}

func (i CostCategoryRuleRuleOrArray) ToCostCategoryRuleRuleOrArrayOutput() CostCategoryRuleRuleOrArrayOutput {
	return i.ToCostCategoryRuleRuleOrArrayOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleOrArray) ToCostCategoryRuleRuleOrArrayOutputWithContext(ctx context.Context) CostCategoryRuleRuleOrArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleOrArrayOutput)
}

type CostCategoryRuleRuleOrOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleOrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleOr)(nil)).Elem()
}

func (o CostCategoryRuleRuleOrOutput) ToCostCategoryRuleRuleOrOutput() CostCategoryRuleRuleOrOutput {
	return o
}

func (o CostCategoryRuleRuleOrOutput) ToCostCategoryRuleRuleOrOutputWithContext(ctx context.Context) CostCategoryRuleRuleOrOutput {
	return o
}

// Configuration block for the filter that's based on `CostCategory` values. See below.
func (o CostCategoryRuleRuleOrOutput) CostCategory() CostCategoryRuleRuleOrCostCategoryPtrOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleOr) *CostCategoryRuleRuleOrCostCategory { return v.CostCategory }).(CostCategoryRuleRuleOrCostCategoryPtrOutput)
}

// Configuration block for the specific `Dimension` to use for `Expression`. See below.
func (o CostCategoryRuleRuleOrOutput) Dimension() CostCategoryRuleRuleOrDimensionPtrOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleOr) *CostCategoryRuleRuleOrDimension { return v.Dimension }).(CostCategoryRuleRuleOrDimensionPtrOutput)
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o CostCategoryRuleRuleOrOutput) Tags() CostCategoryRuleRuleOrTagsPtrOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleOr) *CostCategoryRuleRuleOrTags { return v.Tags }).(CostCategoryRuleRuleOrTagsPtrOutput)
}

type CostCategoryRuleRuleOrArrayOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleOrArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CostCategoryRuleRuleOr)(nil)).Elem()
}

func (o CostCategoryRuleRuleOrArrayOutput) ToCostCategoryRuleRuleOrArrayOutput() CostCategoryRuleRuleOrArrayOutput {
	return o
}

func (o CostCategoryRuleRuleOrArrayOutput) ToCostCategoryRuleRuleOrArrayOutputWithContext(ctx context.Context) CostCategoryRuleRuleOrArrayOutput {
	return o
}

func (o CostCategoryRuleRuleOrArrayOutput) Index(i pulumi.IntInput) CostCategoryRuleRuleOrOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CostCategoryRuleRuleOr {
		return vs[0].([]CostCategoryRuleRuleOr)[vs[1].(int)]
	}).(CostCategoryRuleRuleOrOutput)
}

type CostCategoryRuleRuleOrCostCategory struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

// CostCategoryRuleRuleOrCostCategoryInput is an input type that accepts CostCategoryRuleRuleOrCostCategoryArgs and CostCategoryRuleRuleOrCostCategoryOutput values.
// You can construct a concrete instance of `CostCategoryRuleRuleOrCostCategoryInput` via:
//
//	CostCategoryRuleRuleOrCostCategoryArgs{...}
type CostCategoryRuleRuleOrCostCategoryInput interface {
	pulumi.Input

	ToCostCategoryRuleRuleOrCostCategoryOutput() CostCategoryRuleRuleOrCostCategoryOutput
	ToCostCategoryRuleRuleOrCostCategoryOutputWithContext(context.Context) CostCategoryRuleRuleOrCostCategoryOutput
}

type CostCategoryRuleRuleOrCostCategoryArgs struct {
	// Unique name of the Cost Category.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (CostCategoryRuleRuleOrCostCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleOrCostCategory)(nil)).Elem()
}

func (i CostCategoryRuleRuleOrCostCategoryArgs) ToCostCategoryRuleRuleOrCostCategoryOutput() CostCategoryRuleRuleOrCostCategoryOutput {
	return i.ToCostCategoryRuleRuleOrCostCategoryOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleOrCostCategoryArgs) ToCostCategoryRuleRuleOrCostCategoryOutputWithContext(ctx context.Context) CostCategoryRuleRuleOrCostCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleOrCostCategoryOutput)
}

func (i CostCategoryRuleRuleOrCostCategoryArgs) ToCostCategoryRuleRuleOrCostCategoryPtrOutput() CostCategoryRuleRuleOrCostCategoryPtrOutput {
	return i.ToCostCategoryRuleRuleOrCostCategoryPtrOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleOrCostCategoryArgs) ToCostCategoryRuleRuleOrCostCategoryPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleOrCostCategoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleOrCostCategoryOutput).ToCostCategoryRuleRuleOrCostCategoryPtrOutputWithContext(ctx)
}

// CostCategoryRuleRuleOrCostCategoryPtrInput is an input type that accepts CostCategoryRuleRuleOrCostCategoryArgs, CostCategoryRuleRuleOrCostCategoryPtr and CostCategoryRuleRuleOrCostCategoryPtrOutput values.
// You can construct a concrete instance of `CostCategoryRuleRuleOrCostCategoryPtrInput` via:
//
//	        CostCategoryRuleRuleOrCostCategoryArgs{...}
//
//	or:
//
//	        nil
type CostCategoryRuleRuleOrCostCategoryPtrInput interface {
	pulumi.Input

	ToCostCategoryRuleRuleOrCostCategoryPtrOutput() CostCategoryRuleRuleOrCostCategoryPtrOutput
	ToCostCategoryRuleRuleOrCostCategoryPtrOutputWithContext(context.Context) CostCategoryRuleRuleOrCostCategoryPtrOutput
}

type costCategoryRuleRuleOrCostCategoryPtrType CostCategoryRuleRuleOrCostCategoryArgs

func CostCategoryRuleRuleOrCostCategoryPtr(v *CostCategoryRuleRuleOrCostCategoryArgs) CostCategoryRuleRuleOrCostCategoryPtrInput {
	return (*costCategoryRuleRuleOrCostCategoryPtrType)(v)
}

func (*costCategoryRuleRuleOrCostCategoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CostCategoryRuleRuleOrCostCategory)(nil)).Elem()
}

func (i *costCategoryRuleRuleOrCostCategoryPtrType) ToCostCategoryRuleRuleOrCostCategoryPtrOutput() CostCategoryRuleRuleOrCostCategoryPtrOutput {
	return i.ToCostCategoryRuleRuleOrCostCategoryPtrOutputWithContext(context.Background())
}

func (i *costCategoryRuleRuleOrCostCategoryPtrType) ToCostCategoryRuleRuleOrCostCategoryPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleOrCostCategoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleOrCostCategoryPtrOutput)
}

type CostCategoryRuleRuleOrCostCategoryOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleOrCostCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleOrCostCategory)(nil)).Elem()
}

func (o CostCategoryRuleRuleOrCostCategoryOutput) ToCostCategoryRuleRuleOrCostCategoryOutput() CostCategoryRuleRuleOrCostCategoryOutput {
	return o
}

func (o CostCategoryRuleRuleOrCostCategoryOutput) ToCostCategoryRuleRuleOrCostCategoryOutputWithContext(ctx context.Context) CostCategoryRuleRuleOrCostCategoryOutput {
	return o
}

func (o CostCategoryRuleRuleOrCostCategoryOutput) ToCostCategoryRuleRuleOrCostCategoryPtrOutput() CostCategoryRuleRuleOrCostCategoryPtrOutput {
	return o.ToCostCategoryRuleRuleOrCostCategoryPtrOutputWithContext(context.Background())
}

func (o CostCategoryRuleRuleOrCostCategoryOutput) ToCostCategoryRuleRuleOrCostCategoryPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleOrCostCategoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CostCategoryRuleRuleOrCostCategory) *CostCategoryRuleRuleOrCostCategory {
		return &v
	}).(CostCategoryRuleRuleOrCostCategoryPtrOutput)
}

// Unique name of the Cost Category.
func (o CostCategoryRuleRuleOrCostCategoryOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleOrCostCategory) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o CostCategoryRuleRuleOrCostCategoryOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleOrCostCategory) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o CostCategoryRuleRuleOrCostCategoryOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleOrCostCategory) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type CostCategoryRuleRuleOrCostCategoryPtrOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleOrCostCategoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CostCategoryRuleRuleOrCostCategory)(nil)).Elem()
}

func (o CostCategoryRuleRuleOrCostCategoryPtrOutput) ToCostCategoryRuleRuleOrCostCategoryPtrOutput() CostCategoryRuleRuleOrCostCategoryPtrOutput {
	return o
}

func (o CostCategoryRuleRuleOrCostCategoryPtrOutput) ToCostCategoryRuleRuleOrCostCategoryPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleOrCostCategoryPtrOutput {
	return o
}

func (o CostCategoryRuleRuleOrCostCategoryPtrOutput) Elem() CostCategoryRuleRuleOrCostCategoryOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleOrCostCategory) CostCategoryRuleRuleOrCostCategory {
		if v != nil {
			return *v
		}
		var ret CostCategoryRuleRuleOrCostCategory
		return ret
	}).(CostCategoryRuleRuleOrCostCategoryOutput)
}

// Unique name of the Cost Category.
func (o CostCategoryRuleRuleOrCostCategoryPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleOrCostCategory) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o CostCategoryRuleRuleOrCostCategoryPtrOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleOrCostCategory) []string {
		if v == nil {
			return nil
		}
		return v.MatchOptions
	}).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o CostCategoryRuleRuleOrCostCategoryPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleOrCostCategory) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type CostCategoryRuleRuleOrDimension struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

// CostCategoryRuleRuleOrDimensionInput is an input type that accepts CostCategoryRuleRuleOrDimensionArgs and CostCategoryRuleRuleOrDimensionOutput values.
// You can construct a concrete instance of `CostCategoryRuleRuleOrDimensionInput` via:
//
//	CostCategoryRuleRuleOrDimensionArgs{...}
type CostCategoryRuleRuleOrDimensionInput interface {
	pulumi.Input

	ToCostCategoryRuleRuleOrDimensionOutput() CostCategoryRuleRuleOrDimensionOutput
	ToCostCategoryRuleRuleOrDimensionOutputWithContext(context.Context) CostCategoryRuleRuleOrDimensionOutput
}

type CostCategoryRuleRuleOrDimensionArgs struct {
	// Unique name of the Cost Category.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (CostCategoryRuleRuleOrDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleOrDimension)(nil)).Elem()
}

func (i CostCategoryRuleRuleOrDimensionArgs) ToCostCategoryRuleRuleOrDimensionOutput() CostCategoryRuleRuleOrDimensionOutput {
	return i.ToCostCategoryRuleRuleOrDimensionOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleOrDimensionArgs) ToCostCategoryRuleRuleOrDimensionOutputWithContext(ctx context.Context) CostCategoryRuleRuleOrDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleOrDimensionOutput)
}

func (i CostCategoryRuleRuleOrDimensionArgs) ToCostCategoryRuleRuleOrDimensionPtrOutput() CostCategoryRuleRuleOrDimensionPtrOutput {
	return i.ToCostCategoryRuleRuleOrDimensionPtrOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleOrDimensionArgs) ToCostCategoryRuleRuleOrDimensionPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleOrDimensionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleOrDimensionOutput).ToCostCategoryRuleRuleOrDimensionPtrOutputWithContext(ctx)
}

// CostCategoryRuleRuleOrDimensionPtrInput is an input type that accepts CostCategoryRuleRuleOrDimensionArgs, CostCategoryRuleRuleOrDimensionPtr and CostCategoryRuleRuleOrDimensionPtrOutput values.
// You can construct a concrete instance of `CostCategoryRuleRuleOrDimensionPtrInput` via:
//
//	        CostCategoryRuleRuleOrDimensionArgs{...}
//
//	or:
//
//	        nil
type CostCategoryRuleRuleOrDimensionPtrInput interface {
	pulumi.Input

	ToCostCategoryRuleRuleOrDimensionPtrOutput() CostCategoryRuleRuleOrDimensionPtrOutput
	ToCostCategoryRuleRuleOrDimensionPtrOutputWithContext(context.Context) CostCategoryRuleRuleOrDimensionPtrOutput
}

type costCategoryRuleRuleOrDimensionPtrType CostCategoryRuleRuleOrDimensionArgs

func CostCategoryRuleRuleOrDimensionPtr(v *CostCategoryRuleRuleOrDimensionArgs) CostCategoryRuleRuleOrDimensionPtrInput {
	return (*costCategoryRuleRuleOrDimensionPtrType)(v)
}

func (*costCategoryRuleRuleOrDimensionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CostCategoryRuleRuleOrDimension)(nil)).Elem()
}

func (i *costCategoryRuleRuleOrDimensionPtrType) ToCostCategoryRuleRuleOrDimensionPtrOutput() CostCategoryRuleRuleOrDimensionPtrOutput {
	return i.ToCostCategoryRuleRuleOrDimensionPtrOutputWithContext(context.Background())
}

func (i *costCategoryRuleRuleOrDimensionPtrType) ToCostCategoryRuleRuleOrDimensionPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleOrDimensionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleOrDimensionPtrOutput)
}

type CostCategoryRuleRuleOrDimensionOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleOrDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleOrDimension)(nil)).Elem()
}

func (o CostCategoryRuleRuleOrDimensionOutput) ToCostCategoryRuleRuleOrDimensionOutput() CostCategoryRuleRuleOrDimensionOutput {
	return o
}

func (o CostCategoryRuleRuleOrDimensionOutput) ToCostCategoryRuleRuleOrDimensionOutputWithContext(ctx context.Context) CostCategoryRuleRuleOrDimensionOutput {
	return o
}

func (o CostCategoryRuleRuleOrDimensionOutput) ToCostCategoryRuleRuleOrDimensionPtrOutput() CostCategoryRuleRuleOrDimensionPtrOutput {
	return o.ToCostCategoryRuleRuleOrDimensionPtrOutputWithContext(context.Background())
}

func (o CostCategoryRuleRuleOrDimensionOutput) ToCostCategoryRuleRuleOrDimensionPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleOrDimensionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CostCategoryRuleRuleOrDimension) *CostCategoryRuleRuleOrDimension {
		return &v
	}).(CostCategoryRuleRuleOrDimensionPtrOutput)
}

// Unique name of the Cost Category.
func (o CostCategoryRuleRuleOrDimensionOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleOrDimension) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o CostCategoryRuleRuleOrDimensionOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleOrDimension) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o CostCategoryRuleRuleOrDimensionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleOrDimension) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type CostCategoryRuleRuleOrDimensionPtrOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleOrDimensionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CostCategoryRuleRuleOrDimension)(nil)).Elem()
}

func (o CostCategoryRuleRuleOrDimensionPtrOutput) ToCostCategoryRuleRuleOrDimensionPtrOutput() CostCategoryRuleRuleOrDimensionPtrOutput {
	return o
}

func (o CostCategoryRuleRuleOrDimensionPtrOutput) ToCostCategoryRuleRuleOrDimensionPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleOrDimensionPtrOutput {
	return o
}

func (o CostCategoryRuleRuleOrDimensionPtrOutput) Elem() CostCategoryRuleRuleOrDimensionOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleOrDimension) CostCategoryRuleRuleOrDimension {
		if v != nil {
			return *v
		}
		var ret CostCategoryRuleRuleOrDimension
		return ret
	}).(CostCategoryRuleRuleOrDimensionOutput)
}

// Unique name of the Cost Category.
func (o CostCategoryRuleRuleOrDimensionPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleOrDimension) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o CostCategoryRuleRuleOrDimensionPtrOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleOrDimension) []string {
		if v == nil {
			return nil
		}
		return v.MatchOptions
	}).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o CostCategoryRuleRuleOrDimensionPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleOrDimension) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type CostCategoryRuleRuleOrTags struct {
	// Key for the tag.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

// CostCategoryRuleRuleOrTagsInput is an input type that accepts CostCategoryRuleRuleOrTagsArgs and CostCategoryRuleRuleOrTagsOutput values.
// You can construct a concrete instance of `CostCategoryRuleRuleOrTagsInput` via:
//
//	CostCategoryRuleRuleOrTagsArgs{...}
type CostCategoryRuleRuleOrTagsInput interface {
	pulumi.Input

	ToCostCategoryRuleRuleOrTagsOutput() CostCategoryRuleRuleOrTagsOutput
	ToCostCategoryRuleRuleOrTagsOutputWithContext(context.Context) CostCategoryRuleRuleOrTagsOutput
}

type CostCategoryRuleRuleOrTagsArgs struct {
	// Key for the tag.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (CostCategoryRuleRuleOrTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleOrTags)(nil)).Elem()
}

func (i CostCategoryRuleRuleOrTagsArgs) ToCostCategoryRuleRuleOrTagsOutput() CostCategoryRuleRuleOrTagsOutput {
	return i.ToCostCategoryRuleRuleOrTagsOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleOrTagsArgs) ToCostCategoryRuleRuleOrTagsOutputWithContext(ctx context.Context) CostCategoryRuleRuleOrTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleOrTagsOutput)
}

func (i CostCategoryRuleRuleOrTagsArgs) ToCostCategoryRuleRuleOrTagsPtrOutput() CostCategoryRuleRuleOrTagsPtrOutput {
	return i.ToCostCategoryRuleRuleOrTagsPtrOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleOrTagsArgs) ToCostCategoryRuleRuleOrTagsPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleOrTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleOrTagsOutput).ToCostCategoryRuleRuleOrTagsPtrOutputWithContext(ctx)
}

// CostCategoryRuleRuleOrTagsPtrInput is an input type that accepts CostCategoryRuleRuleOrTagsArgs, CostCategoryRuleRuleOrTagsPtr and CostCategoryRuleRuleOrTagsPtrOutput values.
// You can construct a concrete instance of `CostCategoryRuleRuleOrTagsPtrInput` via:
//
//	        CostCategoryRuleRuleOrTagsArgs{...}
//
//	or:
//
//	        nil
type CostCategoryRuleRuleOrTagsPtrInput interface {
	pulumi.Input

	ToCostCategoryRuleRuleOrTagsPtrOutput() CostCategoryRuleRuleOrTagsPtrOutput
	ToCostCategoryRuleRuleOrTagsPtrOutputWithContext(context.Context) CostCategoryRuleRuleOrTagsPtrOutput
}

type costCategoryRuleRuleOrTagsPtrType CostCategoryRuleRuleOrTagsArgs

func CostCategoryRuleRuleOrTagsPtr(v *CostCategoryRuleRuleOrTagsArgs) CostCategoryRuleRuleOrTagsPtrInput {
	return (*costCategoryRuleRuleOrTagsPtrType)(v)
}

func (*costCategoryRuleRuleOrTagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CostCategoryRuleRuleOrTags)(nil)).Elem()
}

func (i *costCategoryRuleRuleOrTagsPtrType) ToCostCategoryRuleRuleOrTagsPtrOutput() CostCategoryRuleRuleOrTagsPtrOutput {
	return i.ToCostCategoryRuleRuleOrTagsPtrOutputWithContext(context.Background())
}

func (i *costCategoryRuleRuleOrTagsPtrType) ToCostCategoryRuleRuleOrTagsPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleOrTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleOrTagsPtrOutput)
}

type CostCategoryRuleRuleOrTagsOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleOrTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleOrTags)(nil)).Elem()
}

func (o CostCategoryRuleRuleOrTagsOutput) ToCostCategoryRuleRuleOrTagsOutput() CostCategoryRuleRuleOrTagsOutput {
	return o
}

func (o CostCategoryRuleRuleOrTagsOutput) ToCostCategoryRuleRuleOrTagsOutputWithContext(ctx context.Context) CostCategoryRuleRuleOrTagsOutput {
	return o
}

func (o CostCategoryRuleRuleOrTagsOutput) ToCostCategoryRuleRuleOrTagsPtrOutput() CostCategoryRuleRuleOrTagsPtrOutput {
	return o.ToCostCategoryRuleRuleOrTagsPtrOutputWithContext(context.Background())
}

func (o CostCategoryRuleRuleOrTagsOutput) ToCostCategoryRuleRuleOrTagsPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleOrTagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CostCategoryRuleRuleOrTags) *CostCategoryRuleRuleOrTags {
		return &v
	}).(CostCategoryRuleRuleOrTagsPtrOutput)
}

// Key for the tag.
func (o CostCategoryRuleRuleOrTagsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleOrTags) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o CostCategoryRuleRuleOrTagsOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleOrTags) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o CostCategoryRuleRuleOrTagsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleOrTags) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type CostCategoryRuleRuleOrTagsPtrOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleOrTagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CostCategoryRuleRuleOrTags)(nil)).Elem()
}

func (o CostCategoryRuleRuleOrTagsPtrOutput) ToCostCategoryRuleRuleOrTagsPtrOutput() CostCategoryRuleRuleOrTagsPtrOutput {
	return o
}

func (o CostCategoryRuleRuleOrTagsPtrOutput) ToCostCategoryRuleRuleOrTagsPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleOrTagsPtrOutput {
	return o
}

func (o CostCategoryRuleRuleOrTagsPtrOutput) Elem() CostCategoryRuleRuleOrTagsOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleOrTags) CostCategoryRuleRuleOrTags {
		if v != nil {
			return *v
		}
		var ret CostCategoryRuleRuleOrTags
		return ret
	}).(CostCategoryRuleRuleOrTagsOutput)
}

// Key for the tag.
func (o CostCategoryRuleRuleOrTagsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleOrTags) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o CostCategoryRuleRuleOrTagsPtrOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleOrTags) []string {
		if v == nil {
			return nil
		}
		return v.MatchOptions
	}).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o CostCategoryRuleRuleOrTagsPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleOrTags) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type CostCategoryRuleRuleTags struct {
	// Key for the tag.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

// CostCategoryRuleRuleTagsInput is an input type that accepts CostCategoryRuleRuleTagsArgs and CostCategoryRuleRuleTagsOutput values.
// You can construct a concrete instance of `CostCategoryRuleRuleTagsInput` via:
//
//	CostCategoryRuleRuleTagsArgs{...}
type CostCategoryRuleRuleTagsInput interface {
	pulumi.Input

	ToCostCategoryRuleRuleTagsOutput() CostCategoryRuleRuleTagsOutput
	ToCostCategoryRuleRuleTagsOutputWithContext(context.Context) CostCategoryRuleRuleTagsOutput
}

type CostCategoryRuleRuleTagsArgs struct {
	// Key for the tag.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (CostCategoryRuleRuleTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleTags)(nil)).Elem()
}

func (i CostCategoryRuleRuleTagsArgs) ToCostCategoryRuleRuleTagsOutput() CostCategoryRuleRuleTagsOutput {
	return i.ToCostCategoryRuleRuleTagsOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleTagsArgs) ToCostCategoryRuleRuleTagsOutputWithContext(ctx context.Context) CostCategoryRuleRuleTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleTagsOutput)
}

func (i CostCategoryRuleRuleTagsArgs) ToCostCategoryRuleRuleTagsPtrOutput() CostCategoryRuleRuleTagsPtrOutput {
	return i.ToCostCategoryRuleRuleTagsPtrOutputWithContext(context.Background())
}

func (i CostCategoryRuleRuleTagsArgs) ToCostCategoryRuleRuleTagsPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleTagsOutput).ToCostCategoryRuleRuleTagsPtrOutputWithContext(ctx)
}

// CostCategoryRuleRuleTagsPtrInput is an input type that accepts CostCategoryRuleRuleTagsArgs, CostCategoryRuleRuleTagsPtr and CostCategoryRuleRuleTagsPtrOutput values.
// You can construct a concrete instance of `CostCategoryRuleRuleTagsPtrInput` via:
//
//	        CostCategoryRuleRuleTagsArgs{...}
//
//	or:
//
//	        nil
type CostCategoryRuleRuleTagsPtrInput interface {
	pulumi.Input

	ToCostCategoryRuleRuleTagsPtrOutput() CostCategoryRuleRuleTagsPtrOutput
	ToCostCategoryRuleRuleTagsPtrOutputWithContext(context.Context) CostCategoryRuleRuleTagsPtrOutput
}

type costCategoryRuleRuleTagsPtrType CostCategoryRuleRuleTagsArgs

func CostCategoryRuleRuleTagsPtr(v *CostCategoryRuleRuleTagsArgs) CostCategoryRuleRuleTagsPtrInput {
	return (*costCategoryRuleRuleTagsPtrType)(v)
}

func (*costCategoryRuleRuleTagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CostCategoryRuleRuleTags)(nil)).Elem()
}

func (i *costCategoryRuleRuleTagsPtrType) ToCostCategoryRuleRuleTagsPtrOutput() CostCategoryRuleRuleTagsPtrOutput {
	return i.ToCostCategoryRuleRuleTagsPtrOutputWithContext(context.Background())
}

func (i *costCategoryRuleRuleTagsPtrType) ToCostCategoryRuleRuleTagsPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryRuleRuleTagsPtrOutput)
}

type CostCategoryRuleRuleTagsOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategoryRuleRuleTags)(nil)).Elem()
}

func (o CostCategoryRuleRuleTagsOutput) ToCostCategoryRuleRuleTagsOutput() CostCategoryRuleRuleTagsOutput {
	return o
}

func (o CostCategoryRuleRuleTagsOutput) ToCostCategoryRuleRuleTagsOutputWithContext(ctx context.Context) CostCategoryRuleRuleTagsOutput {
	return o
}

func (o CostCategoryRuleRuleTagsOutput) ToCostCategoryRuleRuleTagsPtrOutput() CostCategoryRuleRuleTagsPtrOutput {
	return o.ToCostCategoryRuleRuleTagsPtrOutputWithContext(context.Background())
}

func (o CostCategoryRuleRuleTagsOutput) ToCostCategoryRuleRuleTagsPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleTagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CostCategoryRuleRuleTags) *CostCategoryRuleRuleTags {
		return &v
	}).(CostCategoryRuleRuleTagsPtrOutput)
}

// Key for the tag.
func (o CostCategoryRuleRuleTagsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleTags) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o CostCategoryRuleRuleTagsOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleTags) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o CostCategoryRuleRuleTagsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CostCategoryRuleRuleTags) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type CostCategoryRuleRuleTagsPtrOutput struct{ *pulumi.OutputState }

func (CostCategoryRuleRuleTagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CostCategoryRuleRuleTags)(nil)).Elem()
}

func (o CostCategoryRuleRuleTagsPtrOutput) ToCostCategoryRuleRuleTagsPtrOutput() CostCategoryRuleRuleTagsPtrOutput {
	return o
}

func (o CostCategoryRuleRuleTagsPtrOutput) ToCostCategoryRuleRuleTagsPtrOutputWithContext(ctx context.Context) CostCategoryRuleRuleTagsPtrOutput {
	return o
}

func (o CostCategoryRuleRuleTagsPtrOutput) Elem() CostCategoryRuleRuleTagsOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleTags) CostCategoryRuleRuleTags {
		if v != nil {
			return *v
		}
		var ret CostCategoryRuleRuleTags
		return ret
	}).(CostCategoryRuleRuleTagsOutput)
}

// Key for the tag.
func (o CostCategoryRuleRuleTagsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleTags) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o CostCategoryRuleRuleTagsPtrOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleTags) []string {
		if v == nil {
			return nil
		}
		return v.MatchOptions
	}).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o CostCategoryRuleRuleTagsPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CostCategoryRuleRuleTags) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type CostCategorySplitChargeRule struct {
	// Method that's used to define how to split your source costs across your targets. Valid values are `FIXED`, `PROPORTIONAL`, `EVEN`
	Method string `pulumi:"method"`
	// Configuration block for the parameters for a split charge method. This is only required for the `FIXED` method. See below.
	Parameters []CostCategorySplitChargeRuleParameter `pulumi:"parameters"`
	// Cost Category value that you want to split.
	Source string `pulumi:"source"`
	// Cost Category values that you want to split costs across. These values can't be used as a source in other split charge rules.
	Targets []string `pulumi:"targets"`
}

// CostCategorySplitChargeRuleInput is an input type that accepts CostCategorySplitChargeRuleArgs and CostCategorySplitChargeRuleOutput values.
// You can construct a concrete instance of `CostCategorySplitChargeRuleInput` via:
//
//	CostCategorySplitChargeRuleArgs{...}
type CostCategorySplitChargeRuleInput interface {
	pulumi.Input

	ToCostCategorySplitChargeRuleOutput() CostCategorySplitChargeRuleOutput
	ToCostCategorySplitChargeRuleOutputWithContext(context.Context) CostCategorySplitChargeRuleOutput
}

type CostCategorySplitChargeRuleArgs struct {
	// Method that's used to define how to split your source costs across your targets. Valid values are `FIXED`, `PROPORTIONAL`, `EVEN`
	Method pulumi.StringInput `pulumi:"method"`
	// Configuration block for the parameters for a split charge method. This is only required for the `FIXED` method. See below.
	Parameters CostCategorySplitChargeRuleParameterArrayInput `pulumi:"parameters"`
	// Cost Category value that you want to split.
	Source pulumi.StringInput `pulumi:"source"`
	// Cost Category values that you want to split costs across. These values can't be used as a source in other split charge rules.
	Targets pulumi.StringArrayInput `pulumi:"targets"`
}

func (CostCategorySplitChargeRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategorySplitChargeRule)(nil)).Elem()
}

func (i CostCategorySplitChargeRuleArgs) ToCostCategorySplitChargeRuleOutput() CostCategorySplitChargeRuleOutput {
	return i.ToCostCategorySplitChargeRuleOutputWithContext(context.Background())
}

func (i CostCategorySplitChargeRuleArgs) ToCostCategorySplitChargeRuleOutputWithContext(ctx context.Context) CostCategorySplitChargeRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategorySplitChargeRuleOutput)
}

// CostCategorySplitChargeRuleArrayInput is an input type that accepts CostCategorySplitChargeRuleArray and CostCategorySplitChargeRuleArrayOutput values.
// You can construct a concrete instance of `CostCategorySplitChargeRuleArrayInput` via:
//
//	CostCategorySplitChargeRuleArray{ CostCategorySplitChargeRuleArgs{...} }
type CostCategorySplitChargeRuleArrayInput interface {
	pulumi.Input

	ToCostCategorySplitChargeRuleArrayOutput() CostCategorySplitChargeRuleArrayOutput
	ToCostCategorySplitChargeRuleArrayOutputWithContext(context.Context) CostCategorySplitChargeRuleArrayOutput
}

type CostCategorySplitChargeRuleArray []CostCategorySplitChargeRuleInput

func (CostCategorySplitChargeRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CostCategorySplitChargeRule)(nil)).Elem()
}

func (i CostCategorySplitChargeRuleArray) ToCostCategorySplitChargeRuleArrayOutput() CostCategorySplitChargeRuleArrayOutput {
	return i.ToCostCategorySplitChargeRuleArrayOutputWithContext(context.Background())
}

func (i CostCategorySplitChargeRuleArray) ToCostCategorySplitChargeRuleArrayOutputWithContext(ctx context.Context) CostCategorySplitChargeRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategorySplitChargeRuleArrayOutput)
}

type CostCategorySplitChargeRuleOutput struct{ *pulumi.OutputState }

func (CostCategorySplitChargeRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategorySplitChargeRule)(nil)).Elem()
}

func (o CostCategorySplitChargeRuleOutput) ToCostCategorySplitChargeRuleOutput() CostCategorySplitChargeRuleOutput {
	return o
}

func (o CostCategorySplitChargeRuleOutput) ToCostCategorySplitChargeRuleOutputWithContext(ctx context.Context) CostCategorySplitChargeRuleOutput {
	return o
}

// Method that's used to define how to split your source costs across your targets. Valid values are `FIXED`, `PROPORTIONAL`, `EVEN`
func (o CostCategorySplitChargeRuleOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v CostCategorySplitChargeRule) string { return v.Method }).(pulumi.StringOutput)
}

// Configuration block for the parameters for a split charge method. This is only required for the `FIXED` method. See below.
func (o CostCategorySplitChargeRuleOutput) Parameters() CostCategorySplitChargeRuleParameterArrayOutput {
	return o.ApplyT(func(v CostCategorySplitChargeRule) []CostCategorySplitChargeRuleParameter { return v.Parameters }).(CostCategorySplitChargeRuleParameterArrayOutput)
}

// Cost Category value that you want to split.
func (o CostCategorySplitChargeRuleOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v CostCategorySplitChargeRule) string { return v.Source }).(pulumi.StringOutput)
}

// Cost Category values that you want to split costs across. These values can't be used as a source in other split charge rules.
func (o CostCategorySplitChargeRuleOutput) Targets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CostCategorySplitChargeRule) []string { return v.Targets }).(pulumi.StringArrayOutput)
}

type CostCategorySplitChargeRuleArrayOutput struct{ *pulumi.OutputState }

func (CostCategorySplitChargeRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CostCategorySplitChargeRule)(nil)).Elem()
}

func (o CostCategorySplitChargeRuleArrayOutput) ToCostCategorySplitChargeRuleArrayOutput() CostCategorySplitChargeRuleArrayOutput {
	return o
}

func (o CostCategorySplitChargeRuleArrayOutput) ToCostCategorySplitChargeRuleArrayOutputWithContext(ctx context.Context) CostCategorySplitChargeRuleArrayOutput {
	return o
}

func (o CostCategorySplitChargeRuleArrayOutput) Index(i pulumi.IntInput) CostCategorySplitChargeRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CostCategorySplitChargeRule {
		return vs[0].([]CostCategorySplitChargeRule)[vs[1].(int)]
	}).(CostCategorySplitChargeRuleOutput)
}

type CostCategorySplitChargeRuleParameter struct {
	// Parameter type.
	Type *string `pulumi:"type"`
	// Parameter values.
	Values []string `pulumi:"values"`
}

// CostCategorySplitChargeRuleParameterInput is an input type that accepts CostCategorySplitChargeRuleParameterArgs and CostCategorySplitChargeRuleParameterOutput values.
// You can construct a concrete instance of `CostCategorySplitChargeRuleParameterInput` via:
//
//	CostCategorySplitChargeRuleParameterArgs{...}
type CostCategorySplitChargeRuleParameterInput interface {
	pulumi.Input

	ToCostCategorySplitChargeRuleParameterOutput() CostCategorySplitChargeRuleParameterOutput
	ToCostCategorySplitChargeRuleParameterOutputWithContext(context.Context) CostCategorySplitChargeRuleParameterOutput
}

type CostCategorySplitChargeRuleParameterArgs struct {
	// Parameter type.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Parameter values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (CostCategorySplitChargeRuleParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategorySplitChargeRuleParameter)(nil)).Elem()
}

func (i CostCategorySplitChargeRuleParameterArgs) ToCostCategorySplitChargeRuleParameterOutput() CostCategorySplitChargeRuleParameterOutput {
	return i.ToCostCategorySplitChargeRuleParameterOutputWithContext(context.Background())
}

func (i CostCategorySplitChargeRuleParameterArgs) ToCostCategorySplitChargeRuleParameterOutputWithContext(ctx context.Context) CostCategorySplitChargeRuleParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategorySplitChargeRuleParameterOutput)
}

// CostCategorySplitChargeRuleParameterArrayInput is an input type that accepts CostCategorySplitChargeRuleParameterArray and CostCategorySplitChargeRuleParameterArrayOutput values.
// You can construct a concrete instance of `CostCategorySplitChargeRuleParameterArrayInput` via:
//
//	CostCategorySplitChargeRuleParameterArray{ CostCategorySplitChargeRuleParameterArgs{...} }
type CostCategorySplitChargeRuleParameterArrayInput interface {
	pulumi.Input

	ToCostCategorySplitChargeRuleParameterArrayOutput() CostCategorySplitChargeRuleParameterArrayOutput
	ToCostCategorySplitChargeRuleParameterArrayOutputWithContext(context.Context) CostCategorySplitChargeRuleParameterArrayOutput
}

type CostCategorySplitChargeRuleParameterArray []CostCategorySplitChargeRuleParameterInput

func (CostCategorySplitChargeRuleParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CostCategorySplitChargeRuleParameter)(nil)).Elem()
}

func (i CostCategorySplitChargeRuleParameterArray) ToCostCategorySplitChargeRuleParameterArrayOutput() CostCategorySplitChargeRuleParameterArrayOutput {
	return i.ToCostCategorySplitChargeRuleParameterArrayOutputWithContext(context.Background())
}

func (i CostCategorySplitChargeRuleParameterArray) ToCostCategorySplitChargeRuleParameterArrayOutputWithContext(ctx context.Context) CostCategorySplitChargeRuleParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategorySplitChargeRuleParameterArrayOutput)
}

type CostCategorySplitChargeRuleParameterOutput struct{ *pulumi.OutputState }

func (CostCategorySplitChargeRuleParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostCategorySplitChargeRuleParameter)(nil)).Elem()
}

func (o CostCategorySplitChargeRuleParameterOutput) ToCostCategorySplitChargeRuleParameterOutput() CostCategorySplitChargeRuleParameterOutput {
	return o
}

func (o CostCategorySplitChargeRuleParameterOutput) ToCostCategorySplitChargeRuleParameterOutputWithContext(ctx context.Context) CostCategorySplitChargeRuleParameterOutput {
	return o
}

// Parameter type.
func (o CostCategorySplitChargeRuleParameterOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CostCategorySplitChargeRuleParameter) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Parameter values.
func (o CostCategorySplitChargeRuleParameterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CostCategorySplitChargeRuleParameter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type CostCategorySplitChargeRuleParameterArrayOutput struct{ *pulumi.OutputState }

func (CostCategorySplitChargeRuleParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CostCategorySplitChargeRuleParameter)(nil)).Elem()
}

func (o CostCategorySplitChargeRuleParameterArrayOutput) ToCostCategorySplitChargeRuleParameterArrayOutput() CostCategorySplitChargeRuleParameterArrayOutput {
	return o
}

func (o CostCategorySplitChargeRuleParameterArrayOutput) ToCostCategorySplitChargeRuleParameterArrayOutputWithContext(ctx context.Context) CostCategorySplitChargeRuleParameterArrayOutput {
	return o
}

func (o CostCategorySplitChargeRuleParameterArrayOutput) Index(i pulumi.IntInput) CostCategorySplitChargeRuleParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CostCategorySplitChargeRuleParameter {
		return vs[0].([]CostCategorySplitChargeRuleParameter)[vs[1].(int)]
	}).(CostCategorySplitChargeRuleParameterOutput)
}

type GetCostCategoryRule struct {
	// Configuration block for the value the line item is categorized as if the line item contains the matched dimension. See below.
	InheritedValues []GetCostCategoryRuleInheritedValue `pulumi:"inheritedValues"`
	// Configuration block for the `Expression` object used to categorize costs. See below.
	Rules []GetCostCategoryRuleRule `pulumi:"rules"`
	// Parameter type.
	Type string `pulumi:"type"`
	// Default value for the cost category.
	Value string `pulumi:"value"`
}

// GetCostCategoryRuleInput is an input type that accepts GetCostCategoryRuleArgs and GetCostCategoryRuleOutput values.
// You can construct a concrete instance of `GetCostCategoryRuleInput` via:
//
//	GetCostCategoryRuleArgs{...}
type GetCostCategoryRuleInput interface {
	pulumi.Input

	ToGetCostCategoryRuleOutput() GetCostCategoryRuleOutput
	ToGetCostCategoryRuleOutputWithContext(context.Context) GetCostCategoryRuleOutput
}

type GetCostCategoryRuleArgs struct {
	// Configuration block for the value the line item is categorized as if the line item contains the matched dimension. See below.
	InheritedValues GetCostCategoryRuleInheritedValueArrayInput `pulumi:"inheritedValues"`
	// Configuration block for the `Expression` object used to categorize costs. See below.
	Rules GetCostCategoryRuleRuleArrayInput `pulumi:"rules"`
	// Parameter type.
	Type pulumi.StringInput `pulumi:"type"`
	// Default value for the cost category.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetCostCategoryRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRule)(nil)).Elem()
}

func (i GetCostCategoryRuleArgs) ToGetCostCategoryRuleOutput() GetCostCategoryRuleOutput {
	return i.ToGetCostCategoryRuleOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleArgs) ToGetCostCategoryRuleOutputWithContext(ctx context.Context) GetCostCategoryRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleOutput)
}

// GetCostCategoryRuleArrayInput is an input type that accepts GetCostCategoryRuleArray and GetCostCategoryRuleArrayOutput values.
// You can construct a concrete instance of `GetCostCategoryRuleArrayInput` via:
//
//	GetCostCategoryRuleArray{ GetCostCategoryRuleArgs{...} }
type GetCostCategoryRuleArrayInput interface {
	pulumi.Input

	ToGetCostCategoryRuleArrayOutput() GetCostCategoryRuleArrayOutput
	ToGetCostCategoryRuleArrayOutputWithContext(context.Context) GetCostCategoryRuleArrayOutput
}

type GetCostCategoryRuleArray []GetCostCategoryRuleInput

func (GetCostCategoryRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategoryRule)(nil)).Elem()
}

func (i GetCostCategoryRuleArray) ToGetCostCategoryRuleArrayOutput() GetCostCategoryRuleArrayOutput {
	return i.ToGetCostCategoryRuleArrayOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleArray) ToGetCostCategoryRuleArrayOutputWithContext(ctx context.Context) GetCostCategoryRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleArrayOutput)
}

type GetCostCategoryRuleOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRule)(nil)).Elem()
}

func (o GetCostCategoryRuleOutput) ToGetCostCategoryRuleOutput() GetCostCategoryRuleOutput {
	return o
}

func (o GetCostCategoryRuleOutput) ToGetCostCategoryRuleOutputWithContext(ctx context.Context) GetCostCategoryRuleOutput {
	return o
}

// Configuration block for the value the line item is categorized as if the line item contains the matched dimension. See below.
func (o GetCostCategoryRuleOutput) InheritedValues() GetCostCategoryRuleInheritedValueArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRule) []GetCostCategoryRuleInheritedValue { return v.InheritedValues }).(GetCostCategoryRuleInheritedValueArrayOutput)
}

// Configuration block for the `Expression` object used to categorize costs. See below.
func (o GetCostCategoryRuleOutput) Rules() GetCostCategoryRuleRuleArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRule) []GetCostCategoryRuleRule { return v.Rules }).(GetCostCategoryRuleRuleArrayOutput)
}

// Parameter type.
func (o GetCostCategoryRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetCostCategoryRule) string { return v.Type }).(pulumi.StringOutput)
}

// Default value for the cost category.
func (o GetCostCategoryRuleOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetCostCategoryRule) string { return v.Value }).(pulumi.StringOutput)
}

type GetCostCategoryRuleArrayOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategoryRule)(nil)).Elem()
}

func (o GetCostCategoryRuleArrayOutput) ToGetCostCategoryRuleArrayOutput() GetCostCategoryRuleArrayOutput {
	return o
}

func (o GetCostCategoryRuleArrayOutput) ToGetCostCategoryRuleArrayOutputWithContext(ctx context.Context) GetCostCategoryRuleArrayOutput {
	return o
}

func (o GetCostCategoryRuleArrayOutput) Index(i pulumi.IntInput) GetCostCategoryRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCostCategoryRule {
		return vs[0].([]GetCostCategoryRule)[vs[1].(int)]
	}).(GetCostCategoryRuleOutput)
}

type GetCostCategoryRuleInheritedValue struct {
	// Key to extract cost category values.
	DimensionKey string `pulumi:"dimensionKey"`
	// Name of the dimension that's used to group costs. If you specify `LINKED_ACCOUNT_NAME`, the cost category value is based on account name. If you specify `TAG`, the cost category value will be based on the value of the specified tag key. Valid values are `LINKED_ACCOUNT_NAME`, `TAG`
	DimensionName string `pulumi:"dimensionName"`
}

// GetCostCategoryRuleInheritedValueInput is an input type that accepts GetCostCategoryRuleInheritedValueArgs and GetCostCategoryRuleInheritedValueOutput values.
// You can construct a concrete instance of `GetCostCategoryRuleInheritedValueInput` via:
//
//	GetCostCategoryRuleInheritedValueArgs{...}
type GetCostCategoryRuleInheritedValueInput interface {
	pulumi.Input

	ToGetCostCategoryRuleInheritedValueOutput() GetCostCategoryRuleInheritedValueOutput
	ToGetCostCategoryRuleInheritedValueOutputWithContext(context.Context) GetCostCategoryRuleInheritedValueOutput
}

type GetCostCategoryRuleInheritedValueArgs struct {
	// Key to extract cost category values.
	DimensionKey pulumi.StringInput `pulumi:"dimensionKey"`
	// Name of the dimension that's used to group costs. If you specify `LINKED_ACCOUNT_NAME`, the cost category value is based on account name. If you specify `TAG`, the cost category value will be based on the value of the specified tag key. Valid values are `LINKED_ACCOUNT_NAME`, `TAG`
	DimensionName pulumi.StringInput `pulumi:"dimensionName"`
}

func (GetCostCategoryRuleInheritedValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleInheritedValue)(nil)).Elem()
}

func (i GetCostCategoryRuleInheritedValueArgs) ToGetCostCategoryRuleInheritedValueOutput() GetCostCategoryRuleInheritedValueOutput {
	return i.ToGetCostCategoryRuleInheritedValueOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleInheritedValueArgs) ToGetCostCategoryRuleInheritedValueOutputWithContext(ctx context.Context) GetCostCategoryRuleInheritedValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleInheritedValueOutput)
}

// GetCostCategoryRuleInheritedValueArrayInput is an input type that accepts GetCostCategoryRuleInheritedValueArray and GetCostCategoryRuleInheritedValueArrayOutput values.
// You can construct a concrete instance of `GetCostCategoryRuleInheritedValueArrayInput` via:
//
//	GetCostCategoryRuleInheritedValueArray{ GetCostCategoryRuleInheritedValueArgs{...} }
type GetCostCategoryRuleInheritedValueArrayInput interface {
	pulumi.Input

	ToGetCostCategoryRuleInheritedValueArrayOutput() GetCostCategoryRuleInheritedValueArrayOutput
	ToGetCostCategoryRuleInheritedValueArrayOutputWithContext(context.Context) GetCostCategoryRuleInheritedValueArrayOutput
}

type GetCostCategoryRuleInheritedValueArray []GetCostCategoryRuleInheritedValueInput

func (GetCostCategoryRuleInheritedValueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategoryRuleInheritedValue)(nil)).Elem()
}

func (i GetCostCategoryRuleInheritedValueArray) ToGetCostCategoryRuleInheritedValueArrayOutput() GetCostCategoryRuleInheritedValueArrayOutput {
	return i.ToGetCostCategoryRuleInheritedValueArrayOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleInheritedValueArray) ToGetCostCategoryRuleInheritedValueArrayOutputWithContext(ctx context.Context) GetCostCategoryRuleInheritedValueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleInheritedValueArrayOutput)
}

type GetCostCategoryRuleInheritedValueOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleInheritedValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleInheritedValue)(nil)).Elem()
}

func (o GetCostCategoryRuleInheritedValueOutput) ToGetCostCategoryRuleInheritedValueOutput() GetCostCategoryRuleInheritedValueOutput {
	return o
}

func (o GetCostCategoryRuleInheritedValueOutput) ToGetCostCategoryRuleInheritedValueOutputWithContext(ctx context.Context) GetCostCategoryRuleInheritedValueOutput {
	return o
}

// Key to extract cost category values.
func (o GetCostCategoryRuleInheritedValueOutput) DimensionKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetCostCategoryRuleInheritedValue) string { return v.DimensionKey }).(pulumi.StringOutput)
}

// Name of the dimension that's used to group costs. If you specify `LINKED_ACCOUNT_NAME`, the cost category value is based on account name. If you specify `TAG`, the cost category value will be based on the value of the specified tag key. Valid values are `LINKED_ACCOUNT_NAME`, `TAG`
func (o GetCostCategoryRuleInheritedValueOutput) DimensionName() pulumi.StringOutput {
	return o.ApplyT(func(v GetCostCategoryRuleInheritedValue) string { return v.DimensionName }).(pulumi.StringOutput)
}

type GetCostCategoryRuleInheritedValueArrayOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleInheritedValueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategoryRuleInheritedValue)(nil)).Elem()
}

func (o GetCostCategoryRuleInheritedValueArrayOutput) ToGetCostCategoryRuleInheritedValueArrayOutput() GetCostCategoryRuleInheritedValueArrayOutput {
	return o
}

func (o GetCostCategoryRuleInheritedValueArrayOutput) ToGetCostCategoryRuleInheritedValueArrayOutputWithContext(ctx context.Context) GetCostCategoryRuleInheritedValueArrayOutput {
	return o
}

func (o GetCostCategoryRuleInheritedValueArrayOutput) Index(i pulumi.IntInput) GetCostCategoryRuleInheritedValueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCostCategoryRuleInheritedValue {
		return vs[0].([]GetCostCategoryRuleInheritedValue)[vs[1].(int)]
	}).(GetCostCategoryRuleInheritedValueOutput)
}

type GetCostCategoryRuleRule struct {
	// Return results that match both `Dimension` objects.
	Ands []GetCostCategoryRuleRuleAnd `pulumi:"ands"`
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategories []GetCostCategoryRuleRuleCostCategory `pulumi:"costCategories"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimensions []GetCostCategoryRuleRuleDimension `pulumi:"dimensions"`
	// Return results that do not match the `Dimension` object.
	Nots []GetCostCategoryRuleRuleNot `pulumi:"nots"`
	// Return results that match either `Dimension` object.
	Ors []GetCostCategoryRuleRuleOr `pulumi:"ors"`
	// Configuration block for the specific `Tag` to use for `Expression`. See below.
	Tags []GetCostCategoryRuleRuleTag `pulumi:"tags"`
}

// GetCostCategoryRuleRuleInput is an input type that accepts GetCostCategoryRuleRuleArgs and GetCostCategoryRuleRuleOutput values.
// You can construct a concrete instance of `GetCostCategoryRuleRuleInput` via:
//
//	GetCostCategoryRuleRuleArgs{...}
type GetCostCategoryRuleRuleInput interface {
	pulumi.Input

	ToGetCostCategoryRuleRuleOutput() GetCostCategoryRuleRuleOutput
	ToGetCostCategoryRuleRuleOutputWithContext(context.Context) GetCostCategoryRuleRuleOutput
}

type GetCostCategoryRuleRuleArgs struct {
	// Return results that match both `Dimension` objects.
	Ands GetCostCategoryRuleRuleAndArrayInput `pulumi:"ands"`
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategories GetCostCategoryRuleRuleCostCategoryArrayInput `pulumi:"costCategories"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimensions GetCostCategoryRuleRuleDimensionArrayInput `pulumi:"dimensions"`
	// Return results that do not match the `Dimension` object.
	Nots GetCostCategoryRuleRuleNotArrayInput `pulumi:"nots"`
	// Return results that match either `Dimension` object.
	Ors GetCostCategoryRuleRuleOrArrayInput `pulumi:"ors"`
	// Configuration block for the specific `Tag` to use for `Expression`. See below.
	Tags GetCostCategoryRuleRuleTagArrayInput `pulumi:"tags"`
}

func (GetCostCategoryRuleRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRule)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleArgs) ToGetCostCategoryRuleRuleOutput() GetCostCategoryRuleRuleOutput {
	return i.ToGetCostCategoryRuleRuleOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleArgs) ToGetCostCategoryRuleRuleOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleOutput)
}

// GetCostCategoryRuleRuleArrayInput is an input type that accepts GetCostCategoryRuleRuleArray and GetCostCategoryRuleRuleArrayOutput values.
// You can construct a concrete instance of `GetCostCategoryRuleRuleArrayInput` via:
//
//	GetCostCategoryRuleRuleArray{ GetCostCategoryRuleRuleArgs{...} }
type GetCostCategoryRuleRuleArrayInput interface {
	pulumi.Input

	ToGetCostCategoryRuleRuleArrayOutput() GetCostCategoryRuleRuleArrayOutput
	ToGetCostCategoryRuleRuleArrayOutputWithContext(context.Context) GetCostCategoryRuleRuleArrayOutput
}

type GetCostCategoryRuleRuleArray []GetCostCategoryRuleRuleInput

func (GetCostCategoryRuleRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategoryRuleRule)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleArray) ToGetCostCategoryRuleRuleArrayOutput() GetCostCategoryRuleRuleArrayOutput {
	return i.ToGetCostCategoryRuleRuleArrayOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleArray) ToGetCostCategoryRuleRuleArrayOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleArrayOutput)
}

type GetCostCategoryRuleRuleOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRule)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleOutput) ToGetCostCategoryRuleRuleOutput() GetCostCategoryRuleRuleOutput {
	return o
}

func (o GetCostCategoryRuleRuleOutput) ToGetCostCategoryRuleRuleOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleOutput {
	return o
}

// Return results that match both `Dimension` objects.
func (o GetCostCategoryRuleRuleOutput) Ands() GetCostCategoryRuleRuleAndArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRule) []GetCostCategoryRuleRuleAnd { return v.Ands }).(GetCostCategoryRuleRuleAndArrayOutput)
}

// Configuration block for the filter that's based on `CostCategory` values. See below.
func (o GetCostCategoryRuleRuleOutput) CostCategories() GetCostCategoryRuleRuleCostCategoryArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRule) []GetCostCategoryRuleRuleCostCategory { return v.CostCategories }).(GetCostCategoryRuleRuleCostCategoryArrayOutput)
}

// Configuration block for the specific `Dimension` to use for `Expression`. See below.
func (o GetCostCategoryRuleRuleOutput) Dimensions() GetCostCategoryRuleRuleDimensionArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRule) []GetCostCategoryRuleRuleDimension { return v.Dimensions }).(GetCostCategoryRuleRuleDimensionArrayOutput)
}

// Return results that do not match the `Dimension` object.
func (o GetCostCategoryRuleRuleOutput) Nots() GetCostCategoryRuleRuleNotArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRule) []GetCostCategoryRuleRuleNot { return v.Nots }).(GetCostCategoryRuleRuleNotArrayOutput)
}

// Return results that match either `Dimension` object.
func (o GetCostCategoryRuleRuleOutput) Ors() GetCostCategoryRuleRuleOrArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRule) []GetCostCategoryRuleRuleOr { return v.Ors }).(GetCostCategoryRuleRuleOrArrayOutput)
}

// Configuration block for the specific `Tag` to use for `Expression`. See below.
func (o GetCostCategoryRuleRuleOutput) Tags() GetCostCategoryRuleRuleTagArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRule) []GetCostCategoryRuleRuleTag { return v.Tags }).(GetCostCategoryRuleRuleTagArrayOutput)
}

type GetCostCategoryRuleRuleArrayOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategoryRuleRule)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleArrayOutput) ToGetCostCategoryRuleRuleArrayOutput() GetCostCategoryRuleRuleArrayOutput {
	return o
}

func (o GetCostCategoryRuleRuleArrayOutput) ToGetCostCategoryRuleRuleArrayOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleArrayOutput {
	return o
}

func (o GetCostCategoryRuleRuleArrayOutput) Index(i pulumi.IntInput) GetCostCategoryRuleRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCostCategoryRuleRule {
		return vs[0].([]GetCostCategoryRuleRule)[vs[1].(int)]
	}).(GetCostCategoryRuleRuleOutput)
}

type GetCostCategoryRuleRuleAnd struct {
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategories []GetCostCategoryRuleRuleAndCostCategory `pulumi:"costCategories"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimensions []GetCostCategoryRuleRuleAndDimension `pulumi:"dimensions"`
	// Configuration block for the specific `Tag` to use for `Expression`. See below.
	Tags []GetCostCategoryRuleRuleAndTag `pulumi:"tags"`
}

// GetCostCategoryRuleRuleAndInput is an input type that accepts GetCostCategoryRuleRuleAndArgs and GetCostCategoryRuleRuleAndOutput values.
// You can construct a concrete instance of `GetCostCategoryRuleRuleAndInput` via:
//
//	GetCostCategoryRuleRuleAndArgs{...}
type GetCostCategoryRuleRuleAndInput interface {
	pulumi.Input

	ToGetCostCategoryRuleRuleAndOutput() GetCostCategoryRuleRuleAndOutput
	ToGetCostCategoryRuleRuleAndOutputWithContext(context.Context) GetCostCategoryRuleRuleAndOutput
}

type GetCostCategoryRuleRuleAndArgs struct {
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategories GetCostCategoryRuleRuleAndCostCategoryArrayInput `pulumi:"costCategories"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimensions GetCostCategoryRuleRuleAndDimensionArrayInput `pulumi:"dimensions"`
	// Configuration block for the specific `Tag` to use for `Expression`. See below.
	Tags GetCostCategoryRuleRuleAndTagArrayInput `pulumi:"tags"`
}

func (GetCostCategoryRuleRuleAndArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleAnd)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleAndArgs) ToGetCostCategoryRuleRuleAndOutput() GetCostCategoryRuleRuleAndOutput {
	return i.ToGetCostCategoryRuleRuleAndOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleAndArgs) ToGetCostCategoryRuleRuleAndOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleAndOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleAndOutput)
}

// GetCostCategoryRuleRuleAndArrayInput is an input type that accepts GetCostCategoryRuleRuleAndArray and GetCostCategoryRuleRuleAndArrayOutput values.
// You can construct a concrete instance of `GetCostCategoryRuleRuleAndArrayInput` via:
//
//	GetCostCategoryRuleRuleAndArray{ GetCostCategoryRuleRuleAndArgs{...} }
type GetCostCategoryRuleRuleAndArrayInput interface {
	pulumi.Input

	ToGetCostCategoryRuleRuleAndArrayOutput() GetCostCategoryRuleRuleAndArrayOutput
	ToGetCostCategoryRuleRuleAndArrayOutputWithContext(context.Context) GetCostCategoryRuleRuleAndArrayOutput
}

type GetCostCategoryRuleRuleAndArray []GetCostCategoryRuleRuleAndInput

func (GetCostCategoryRuleRuleAndArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategoryRuleRuleAnd)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleAndArray) ToGetCostCategoryRuleRuleAndArrayOutput() GetCostCategoryRuleRuleAndArrayOutput {
	return i.ToGetCostCategoryRuleRuleAndArrayOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleAndArray) ToGetCostCategoryRuleRuleAndArrayOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleAndArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleAndArrayOutput)
}

type GetCostCategoryRuleRuleAndOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleAndOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleAnd)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleAndOutput) ToGetCostCategoryRuleRuleAndOutput() GetCostCategoryRuleRuleAndOutput {
	return o
}

func (o GetCostCategoryRuleRuleAndOutput) ToGetCostCategoryRuleRuleAndOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleAndOutput {
	return o
}

// Configuration block for the filter that's based on `CostCategory` values. See below.
func (o GetCostCategoryRuleRuleAndOutput) CostCategories() GetCostCategoryRuleRuleAndCostCategoryArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleAnd) []GetCostCategoryRuleRuleAndCostCategory { return v.CostCategories }).(GetCostCategoryRuleRuleAndCostCategoryArrayOutput)
}

// Configuration block for the specific `Dimension` to use for `Expression`. See below.
func (o GetCostCategoryRuleRuleAndOutput) Dimensions() GetCostCategoryRuleRuleAndDimensionArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleAnd) []GetCostCategoryRuleRuleAndDimension { return v.Dimensions }).(GetCostCategoryRuleRuleAndDimensionArrayOutput)
}

// Configuration block for the specific `Tag` to use for `Expression`. See below.
func (o GetCostCategoryRuleRuleAndOutput) Tags() GetCostCategoryRuleRuleAndTagArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleAnd) []GetCostCategoryRuleRuleAndTag { return v.Tags }).(GetCostCategoryRuleRuleAndTagArrayOutput)
}

type GetCostCategoryRuleRuleAndArrayOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleAndArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategoryRuleRuleAnd)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleAndArrayOutput) ToGetCostCategoryRuleRuleAndArrayOutput() GetCostCategoryRuleRuleAndArrayOutput {
	return o
}

func (o GetCostCategoryRuleRuleAndArrayOutput) ToGetCostCategoryRuleRuleAndArrayOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleAndArrayOutput {
	return o
}

func (o GetCostCategoryRuleRuleAndArrayOutput) Index(i pulumi.IntInput) GetCostCategoryRuleRuleAndOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCostCategoryRuleRuleAnd {
		return vs[0].([]GetCostCategoryRuleRuleAnd)[vs[1].(int)]
	}).(GetCostCategoryRuleRuleAndOutput)
}

type GetCostCategoryRuleRuleAndCostCategory struct {
	// Key for the tag.
	Key string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Parameter values.
	Values []string `pulumi:"values"`
}

// GetCostCategoryRuleRuleAndCostCategoryInput is an input type that accepts GetCostCategoryRuleRuleAndCostCategoryArgs and GetCostCategoryRuleRuleAndCostCategoryOutput values.
// You can construct a concrete instance of `GetCostCategoryRuleRuleAndCostCategoryInput` via:
//
//	GetCostCategoryRuleRuleAndCostCategoryArgs{...}
type GetCostCategoryRuleRuleAndCostCategoryInput interface {
	pulumi.Input

	ToGetCostCategoryRuleRuleAndCostCategoryOutput() GetCostCategoryRuleRuleAndCostCategoryOutput
	ToGetCostCategoryRuleRuleAndCostCategoryOutputWithContext(context.Context) GetCostCategoryRuleRuleAndCostCategoryOutput
}

type GetCostCategoryRuleRuleAndCostCategoryArgs struct {
	// Key for the tag.
	Key pulumi.StringInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Parameter values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetCostCategoryRuleRuleAndCostCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleAndCostCategory)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleAndCostCategoryArgs) ToGetCostCategoryRuleRuleAndCostCategoryOutput() GetCostCategoryRuleRuleAndCostCategoryOutput {
	return i.ToGetCostCategoryRuleRuleAndCostCategoryOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleAndCostCategoryArgs) ToGetCostCategoryRuleRuleAndCostCategoryOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleAndCostCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleAndCostCategoryOutput)
}

// GetCostCategoryRuleRuleAndCostCategoryArrayInput is an input type that accepts GetCostCategoryRuleRuleAndCostCategoryArray and GetCostCategoryRuleRuleAndCostCategoryArrayOutput values.
// You can construct a concrete instance of `GetCostCategoryRuleRuleAndCostCategoryArrayInput` via:
//
//	GetCostCategoryRuleRuleAndCostCategoryArray{ GetCostCategoryRuleRuleAndCostCategoryArgs{...} }
type GetCostCategoryRuleRuleAndCostCategoryArrayInput interface {
	pulumi.Input

	ToGetCostCategoryRuleRuleAndCostCategoryArrayOutput() GetCostCategoryRuleRuleAndCostCategoryArrayOutput
	ToGetCostCategoryRuleRuleAndCostCategoryArrayOutputWithContext(context.Context) GetCostCategoryRuleRuleAndCostCategoryArrayOutput
}

type GetCostCategoryRuleRuleAndCostCategoryArray []GetCostCategoryRuleRuleAndCostCategoryInput

func (GetCostCategoryRuleRuleAndCostCategoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategoryRuleRuleAndCostCategory)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleAndCostCategoryArray) ToGetCostCategoryRuleRuleAndCostCategoryArrayOutput() GetCostCategoryRuleRuleAndCostCategoryArrayOutput {
	return i.ToGetCostCategoryRuleRuleAndCostCategoryArrayOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleAndCostCategoryArray) ToGetCostCategoryRuleRuleAndCostCategoryArrayOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleAndCostCategoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleAndCostCategoryArrayOutput)
}

type GetCostCategoryRuleRuleAndCostCategoryOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleAndCostCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleAndCostCategory)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleAndCostCategoryOutput) ToGetCostCategoryRuleRuleAndCostCategoryOutput() GetCostCategoryRuleRuleAndCostCategoryOutput {
	return o
}

func (o GetCostCategoryRuleRuleAndCostCategoryOutput) ToGetCostCategoryRuleRuleAndCostCategoryOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleAndCostCategoryOutput {
	return o
}

// Key for the tag.
func (o GetCostCategoryRuleRuleAndCostCategoryOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleAndCostCategory) string { return v.Key }).(pulumi.StringOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetCostCategoryRuleRuleAndCostCategoryOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleAndCostCategory) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Parameter values.
func (o GetCostCategoryRuleRuleAndCostCategoryOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleAndCostCategory) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetCostCategoryRuleRuleAndCostCategoryArrayOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleAndCostCategoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategoryRuleRuleAndCostCategory)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleAndCostCategoryArrayOutput) ToGetCostCategoryRuleRuleAndCostCategoryArrayOutput() GetCostCategoryRuleRuleAndCostCategoryArrayOutput {
	return o
}

func (o GetCostCategoryRuleRuleAndCostCategoryArrayOutput) ToGetCostCategoryRuleRuleAndCostCategoryArrayOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleAndCostCategoryArrayOutput {
	return o
}

func (o GetCostCategoryRuleRuleAndCostCategoryArrayOutput) Index(i pulumi.IntInput) GetCostCategoryRuleRuleAndCostCategoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCostCategoryRuleRuleAndCostCategory {
		return vs[0].([]GetCostCategoryRuleRuleAndCostCategory)[vs[1].(int)]
	}).(GetCostCategoryRuleRuleAndCostCategoryOutput)
}

type GetCostCategoryRuleRuleAndDimension struct {
	// Key for the tag.
	Key string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Parameter values.
	Values []string `pulumi:"values"`
}

// GetCostCategoryRuleRuleAndDimensionInput is an input type that accepts GetCostCategoryRuleRuleAndDimensionArgs and GetCostCategoryRuleRuleAndDimensionOutput values.
// You can construct a concrete instance of `GetCostCategoryRuleRuleAndDimensionInput` via:
//
//	GetCostCategoryRuleRuleAndDimensionArgs{...}
type GetCostCategoryRuleRuleAndDimensionInput interface {
	pulumi.Input

	ToGetCostCategoryRuleRuleAndDimensionOutput() GetCostCategoryRuleRuleAndDimensionOutput
	ToGetCostCategoryRuleRuleAndDimensionOutputWithContext(context.Context) GetCostCategoryRuleRuleAndDimensionOutput
}

type GetCostCategoryRuleRuleAndDimensionArgs struct {
	// Key for the tag.
	Key pulumi.StringInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Parameter values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetCostCategoryRuleRuleAndDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleAndDimension)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleAndDimensionArgs) ToGetCostCategoryRuleRuleAndDimensionOutput() GetCostCategoryRuleRuleAndDimensionOutput {
	return i.ToGetCostCategoryRuleRuleAndDimensionOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleAndDimensionArgs) ToGetCostCategoryRuleRuleAndDimensionOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleAndDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleAndDimensionOutput)
}

// GetCostCategoryRuleRuleAndDimensionArrayInput is an input type that accepts GetCostCategoryRuleRuleAndDimensionArray and GetCostCategoryRuleRuleAndDimensionArrayOutput values.
// You can construct a concrete instance of `GetCostCategoryRuleRuleAndDimensionArrayInput` via:
//
//	GetCostCategoryRuleRuleAndDimensionArray{ GetCostCategoryRuleRuleAndDimensionArgs{...} }
type GetCostCategoryRuleRuleAndDimensionArrayInput interface {
	pulumi.Input

	ToGetCostCategoryRuleRuleAndDimensionArrayOutput() GetCostCategoryRuleRuleAndDimensionArrayOutput
	ToGetCostCategoryRuleRuleAndDimensionArrayOutputWithContext(context.Context) GetCostCategoryRuleRuleAndDimensionArrayOutput
}

type GetCostCategoryRuleRuleAndDimensionArray []GetCostCategoryRuleRuleAndDimensionInput

func (GetCostCategoryRuleRuleAndDimensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategoryRuleRuleAndDimension)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleAndDimensionArray) ToGetCostCategoryRuleRuleAndDimensionArrayOutput() GetCostCategoryRuleRuleAndDimensionArrayOutput {
	return i.ToGetCostCategoryRuleRuleAndDimensionArrayOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleAndDimensionArray) ToGetCostCategoryRuleRuleAndDimensionArrayOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleAndDimensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleAndDimensionArrayOutput)
}

type GetCostCategoryRuleRuleAndDimensionOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleAndDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleAndDimension)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleAndDimensionOutput) ToGetCostCategoryRuleRuleAndDimensionOutput() GetCostCategoryRuleRuleAndDimensionOutput {
	return o
}

func (o GetCostCategoryRuleRuleAndDimensionOutput) ToGetCostCategoryRuleRuleAndDimensionOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleAndDimensionOutput {
	return o
}

// Key for the tag.
func (o GetCostCategoryRuleRuleAndDimensionOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleAndDimension) string { return v.Key }).(pulumi.StringOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetCostCategoryRuleRuleAndDimensionOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleAndDimension) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Parameter values.
func (o GetCostCategoryRuleRuleAndDimensionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleAndDimension) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetCostCategoryRuleRuleAndDimensionArrayOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleAndDimensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategoryRuleRuleAndDimension)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleAndDimensionArrayOutput) ToGetCostCategoryRuleRuleAndDimensionArrayOutput() GetCostCategoryRuleRuleAndDimensionArrayOutput {
	return o
}

func (o GetCostCategoryRuleRuleAndDimensionArrayOutput) ToGetCostCategoryRuleRuleAndDimensionArrayOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleAndDimensionArrayOutput {
	return o
}

func (o GetCostCategoryRuleRuleAndDimensionArrayOutput) Index(i pulumi.IntInput) GetCostCategoryRuleRuleAndDimensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCostCategoryRuleRuleAndDimension {
		return vs[0].([]GetCostCategoryRuleRuleAndDimension)[vs[1].(int)]
	}).(GetCostCategoryRuleRuleAndDimensionOutput)
}

type GetCostCategoryRuleRuleAndTag struct {
	// Key for the tag.
	Key string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Parameter values.
	Values []string `pulumi:"values"`
}

// GetCostCategoryRuleRuleAndTagInput is an input type that accepts GetCostCategoryRuleRuleAndTagArgs and GetCostCategoryRuleRuleAndTagOutput values.
// You can construct a concrete instance of `GetCostCategoryRuleRuleAndTagInput` via:
//
//	GetCostCategoryRuleRuleAndTagArgs{...}
type GetCostCategoryRuleRuleAndTagInput interface {
	pulumi.Input

	ToGetCostCategoryRuleRuleAndTagOutput() GetCostCategoryRuleRuleAndTagOutput
	ToGetCostCategoryRuleRuleAndTagOutputWithContext(context.Context) GetCostCategoryRuleRuleAndTagOutput
}

type GetCostCategoryRuleRuleAndTagArgs struct {
	// Key for the tag.
	Key pulumi.StringInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Parameter values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetCostCategoryRuleRuleAndTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleAndTag)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleAndTagArgs) ToGetCostCategoryRuleRuleAndTagOutput() GetCostCategoryRuleRuleAndTagOutput {
	return i.ToGetCostCategoryRuleRuleAndTagOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleAndTagArgs) ToGetCostCategoryRuleRuleAndTagOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleAndTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleAndTagOutput)
}

// GetCostCategoryRuleRuleAndTagArrayInput is an input type that accepts GetCostCategoryRuleRuleAndTagArray and GetCostCategoryRuleRuleAndTagArrayOutput values.
// You can construct a concrete instance of `GetCostCategoryRuleRuleAndTagArrayInput` via:
//
//	GetCostCategoryRuleRuleAndTagArray{ GetCostCategoryRuleRuleAndTagArgs{...} }
type GetCostCategoryRuleRuleAndTagArrayInput interface {
	pulumi.Input

	ToGetCostCategoryRuleRuleAndTagArrayOutput() GetCostCategoryRuleRuleAndTagArrayOutput
	ToGetCostCategoryRuleRuleAndTagArrayOutputWithContext(context.Context) GetCostCategoryRuleRuleAndTagArrayOutput
}

type GetCostCategoryRuleRuleAndTagArray []GetCostCategoryRuleRuleAndTagInput

func (GetCostCategoryRuleRuleAndTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategoryRuleRuleAndTag)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleAndTagArray) ToGetCostCategoryRuleRuleAndTagArrayOutput() GetCostCategoryRuleRuleAndTagArrayOutput {
	return i.ToGetCostCategoryRuleRuleAndTagArrayOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleAndTagArray) ToGetCostCategoryRuleRuleAndTagArrayOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleAndTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleAndTagArrayOutput)
}

type GetCostCategoryRuleRuleAndTagOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleAndTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleAndTag)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleAndTagOutput) ToGetCostCategoryRuleRuleAndTagOutput() GetCostCategoryRuleRuleAndTagOutput {
	return o
}

func (o GetCostCategoryRuleRuleAndTagOutput) ToGetCostCategoryRuleRuleAndTagOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleAndTagOutput {
	return o
}

// Key for the tag.
func (o GetCostCategoryRuleRuleAndTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleAndTag) string { return v.Key }).(pulumi.StringOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetCostCategoryRuleRuleAndTagOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleAndTag) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Parameter values.
func (o GetCostCategoryRuleRuleAndTagOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleAndTag) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetCostCategoryRuleRuleAndTagArrayOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleAndTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategoryRuleRuleAndTag)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleAndTagArrayOutput) ToGetCostCategoryRuleRuleAndTagArrayOutput() GetCostCategoryRuleRuleAndTagArrayOutput {
	return o
}

func (o GetCostCategoryRuleRuleAndTagArrayOutput) ToGetCostCategoryRuleRuleAndTagArrayOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleAndTagArrayOutput {
	return o
}

func (o GetCostCategoryRuleRuleAndTagArrayOutput) Index(i pulumi.IntInput) GetCostCategoryRuleRuleAndTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCostCategoryRuleRuleAndTag {
		return vs[0].([]GetCostCategoryRuleRuleAndTag)[vs[1].(int)]
	}).(GetCostCategoryRuleRuleAndTagOutput)
}

type GetCostCategoryRuleRuleCostCategory struct {
	// Key for the tag.
	Key string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Parameter values.
	Values []string `pulumi:"values"`
}

// GetCostCategoryRuleRuleCostCategoryInput is an input type that accepts GetCostCategoryRuleRuleCostCategoryArgs and GetCostCategoryRuleRuleCostCategoryOutput values.
// You can construct a concrete instance of `GetCostCategoryRuleRuleCostCategoryInput` via:
//
//	GetCostCategoryRuleRuleCostCategoryArgs{...}
type GetCostCategoryRuleRuleCostCategoryInput interface {
	pulumi.Input

	ToGetCostCategoryRuleRuleCostCategoryOutput() GetCostCategoryRuleRuleCostCategoryOutput
	ToGetCostCategoryRuleRuleCostCategoryOutputWithContext(context.Context) GetCostCategoryRuleRuleCostCategoryOutput
}

type GetCostCategoryRuleRuleCostCategoryArgs struct {
	// Key for the tag.
	Key pulumi.StringInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Parameter values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetCostCategoryRuleRuleCostCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleCostCategory)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleCostCategoryArgs) ToGetCostCategoryRuleRuleCostCategoryOutput() GetCostCategoryRuleRuleCostCategoryOutput {
	return i.ToGetCostCategoryRuleRuleCostCategoryOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleCostCategoryArgs) ToGetCostCategoryRuleRuleCostCategoryOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleCostCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleCostCategoryOutput)
}

// GetCostCategoryRuleRuleCostCategoryArrayInput is an input type that accepts GetCostCategoryRuleRuleCostCategoryArray and GetCostCategoryRuleRuleCostCategoryArrayOutput values.
// You can construct a concrete instance of `GetCostCategoryRuleRuleCostCategoryArrayInput` via:
//
//	GetCostCategoryRuleRuleCostCategoryArray{ GetCostCategoryRuleRuleCostCategoryArgs{...} }
type GetCostCategoryRuleRuleCostCategoryArrayInput interface {
	pulumi.Input

	ToGetCostCategoryRuleRuleCostCategoryArrayOutput() GetCostCategoryRuleRuleCostCategoryArrayOutput
	ToGetCostCategoryRuleRuleCostCategoryArrayOutputWithContext(context.Context) GetCostCategoryRuleRuleCostCategoryArrayOutput
}

type GetCostCategoryRuleRuleCostCategoryArray []GetCostCategoryRuleRuleCostCategoryInput

func (GetCostCategoryRuleRuleCostCategoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategoryRuleRuleCostCategory)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleCostCategoryArray) ToGetCostCategoryRuleRuleCostCategoryArrayOutput() GetCostCategoryRuleRuleCostCategoryArrayOutput {
	return i.ToGetCostCategoryRuleRuleCostCategoryArrayOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleCostCategoryArray) ToGetCostCategoryRuleRuleCostCategoryArrayOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleCostCategoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleCostCategoryArrayOutput)
}

type GetCostCategoryRuleRuleCostCategoryOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleCostCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleCostCategory)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleCostCategoryOutput) ToGetCostCategoryRuleRuleCostCategoryOutput() GetCostCategoryRuleRuleCostCategoryOutput {
	return o
}

func (o GetCostCategoryRuleRuleCostCategoryOutput) ToGetCostCategoryRuleRuleCostCategoryOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleCostCategoryOutput {
	return o
}

// Key for the tag.
func (o GetCostCategoryRuleRuleCostCategoryOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleCostCategory) string { return v.Key }).(pulumi.StringOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetCostCategoryRuleRuleCostCategoryOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleCostCategory) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Parameter values.
func (o GetCostCategoryRuleRuleCostCategoryOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleCostCategory) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetCostCategoryRuleRuleCostCategoryArrayOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleCostCategoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategoryRuleRuleCostCategory)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleCostCategoryArrayOutput) ToGetCostCategoryRuleRuleCostCategoryArrayOutput() GetCostCategoryRuleRuleCostCategoryArrayOutput {
	return o
}

func (o GetCostCategoryRuleRuleCostCategoryArrayOutput) ToGetCostCategoryRuleRuleCostCategoryArrayOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleCostCategoryArrayOutput {
	return o
}

func (o GetCostCategoryRuleRuleCostCategoryArrayOutput) Index(i pulumi.IntInput) GetCostCategoryRuleRuleCostCategoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCostCategoryRuleRuleCostCategory {
		return vs[0].([]GetCostCategoryRuleRuleCostCategory)[vs[1].(int)]
	}).(GetCostCategoryRuleRuleCostCategoryOutput)
}

type GetCostCategoryRuleRuleDimension struct {
	// Key for the tag.
	Key string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Parameter values.
	Values []string `pulumi:"values"`
}

// GetCostCategoryRuleRuleDimensionInput is an input type that accepts GetCostCategoryRuleRuleDimensionArgs and GetCostCategoryRuleRuleDimensionOutput values.
// You can construct a concrete instance of `GetCostCategoryRuleRuleDimensionInput` via:
//
//	GetCostCategoryRuleRuleDimensionArgs{...}
type GetCostCategoryRuleRuleDimensionInput interface {
	pulumi.Input

	ToGetCostCategoryRuleRuleDimensionOutput() GetCostCategoryRuleRuleDimensionOutput
	ToGetCostCategoryRuleRuleDimensionOutputWithContext(context.Context) GetCostCategoryRuleRuleDimensionOutput
}

type GetCostCategoryRuleRuleDimensionArgs struct {
	// Key for the tag.
	Key pulumi.StringInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Parameter values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetCostCategoryRuleRuleDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleDimension)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleDimensionArgs) ToGetCostCategoryRuleRuleDimensionOutput() GetCostCategoryRuleRuleDimensionOutput {
	return i.ToGetCostCategoryRuleRuleDimensionOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleDimensionArgs) ToGetCostCategoryRuleRuleDimensionOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleDimensionOutput)
}

// GetCostCategoryRuleRuleDimensionArrayInput is an input type that accepts GetCostCategoryRuleRuleDimensionArray and GetCostCategoryRuleRuleDimensionArrayOutput values.
// You can construct a concrete instance of `GetCostCategoryRuleRuleDimensionArrayInput` via:
//
//	GetCostCategoryRuleRuleDimensionArray{ GetCostCategoryRuleRuleDimensionArgs{...} }
type GetCostCategoryRuleRuleDimensionArrayInput interface {
	pulumi.Input

	ToGetCostCategoryRuleRuleDimensionArrayOutput() GetCostCategoryRuleRuleDimensionArrayOutput
	ToGetCostCategoryRuleRuleDimensionArrayOutputWithContext(context.Context) GetCostCategoryRuleRuleDimensionArrayOutput
}

type GetCostCategoryRuleRuleDimensionArray []GetCostCategoryRuleRuleDimensionInput

func (GetCostCategoryRuleRuleDimensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategoryRuleRuleDimension)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleDimensionArray) ToGetCostCategoryRuleRuleDimensionArrayOutput() GetCostCategoryRuleRuleDimensionArrayOutput {
	return i.ToGetCostCategoryRuleRuleDimensionArrayOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleDimensionArray) ToGetCostCategoryRuleRuleDimensionArrayOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleDimensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleDimensionArrayOutput)
}

type GetCostCategoryRuleRuleDimensionOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleDimension)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleDimensionOutput) ToGetCostCategoryRuleRuleDimensionOutput() GetCostCategoryRuleRuleDimensionOutput {
	return o
}

func (o GetCostCategoryRuleRuleDimensionOutput) ToGetCostCategoryRuleRuleDimensionOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleDimensionOutput {
	return o
}

// Key for the tag.
func (o GetCostCategoryRuleRuleDimensionOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleDimension) string { return v.Key }).(pulumi.StringOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetCostCategoryRuleRuleDimensionOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleDimension) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Parameter values.
func (o GetCostCategoryRuleRuleDimensionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleDimension) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetCostCategoryRuleRuleDimensionArrayOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleDimensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategoryRuleRuleDimension)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleDimensionArrayOutput) ToGetCostCategoryRuleRuleDimensionArrayOutput() GetCostCategoryRuleRuleDimensionArrayOutput {
	return o
}

func (o GetCostCategoryRuleRuleDimensionArrayOutput) ToGetCostCategoryRuleRuleDimensionArrayOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleDimensionArrayOutput {
	return o
}

func (o GetCostCategoryRuleRuleDimensionArrayOutput) Index(i pulumi.IntInput) GetCostCategoryRuleRuleDimensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCostCategoryRuleRuleDimension {
		return vs[0].([]GetCostCategoryRuleRuleDimension)[vs[1].(int)]
	}).(GetCostCategoryRuleRuleDimensionOutput)
}

type GetCostCategoryRuleRuleNot struct {
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategories []GetCostCategoryRuleRuleNotCostCategory `pulumi:"costCategories"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimensions []GetCostCategoryRuleRuleNotDimension `pulumi:"dimensions"`
	// Configuration block for the specific `Tag` to use for `Expression`. See below.
	Tags []GetCostCategoryRuleRuleNotTag `pulumi:"tags"`
}

// GetCostCategoryRuleRuleNotInput is an input type that accepts GetCostCategoryRuleRuleNotArgs and GetCostCategoryRuleRuleNotOutput values.
// You can construct a concrete instance of `GetCostCategoryRuleRuleNotInput` via:
//
//	GetCostCategoryRuleRuleNotArgs{...}
type GetCostCategoryRuleRuleNotInput interface {
	pulumi.Input

	ToGetCostCategoryRuleRuleNotOutput() GetCostCategoryRuleRuleNotOutput
	ToGetCostCategoryRuleRuleNotOutputWithContext(context.Context) GetCostCategoryRuleRuleNotOutput
}

type GetCostCategoryRuleRuleNotArgs struct {
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategories GetCostCategoryRuleRuleNotCostCategoryArrayInput `pulumi:"costCategories"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimensions GetCostCategoryRuleRuleNotDimensionArrayInput `pulumi:"dimensions"`
	// Configuration block for the specific `Tag` to use for `Expression`. See below.
	Tags GetCostCategoryRuleRuleNotTagArrayInput `pulumi:"tags"`
}

func (GetCostCategoryRuleRuleNotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleNot)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleNotArgs) ToGetCostCategoryRuleRuleNotOutput() GetCostCategoryRuleRuleNotOutput {
	return i.ToGetCostCategoryRuleRuleNotOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleNotArgs) ToGetCostCategoryRuleRuleNotOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleNotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleNotOutput)
}

// GetCostCategoryRuleRuleNotArrayInput is an input type that accepts GetCostCategoryRuleRuleNotArray and GetCostCategoryRuleRuleNotArrayOutput values.
// You can construct a concrete instance of `GetCostCategoryRuleRuleNotArrayInput` via:
//
//	GetCostCategoryRuleRuleNotArray{ GetCostCategoryRuleRuleNotArgs{...} }
type GetCostCategoryRuleRuleNotArrayInput interface {
	pulumi.Input

	ToGetCostCategoryRuleRuleNotArrayOutput() GetCostCategoryRuleRuleNotArrayOutput
	ToGetCostCategoryRuleRuleNotArrayOutputWithContext(context.Context) GetCostCategoryRuleRuleNotArrayOutput
}

type GetCostCategoryRuleRuleNotArray []GetCostCategoryRuleRuleNotInput

func (GetCostCategoryRuleRuleNotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategoryRuleRuleNot)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleNotArray) ToGetCostCategoryRuleRuleNotArrayOutput() GetCostCategoryRuleRuleNotArrayOutput {
	return i.ToGetCostCategoryRuleRuleNotArrayOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleNotArray) ToGetCostCategoryRuleRuleNotArrayOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleNotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleNotArrayOutput)
}

type GetCostCategoryRuleRuleNotOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleNotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleNot)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleNotOutput) ToGetCostCategoryRuleRuleNotOutput() GetCostCategoryRuleRuleNotOutput {
	return o
}

func (o GetCostCategoryRuleRuleNotOutput) ToGetCostCategoryRuleRuleNotOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleNotOutput {
	return o
}

// Configuration block for the filter that's based on `CostCategory` values. See below.
func (o GetCostCategoryRuleRuleNotOutput) CostCategories() GetCostCategoryRuleRuleNotCostCategoryArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleNot) []GetCostCategoryRuleRuleNotCostCategory { return v.CostCategories }).(GetCostCategoryRuleRuleNotCostCategoryArrayOutput)
}

// Configuration block for the specific `Dimension` to use for `Expression`. See below.
func (o GetCostCategoryRuleRuleNotOutput) Dimensions() GetCostCategoryRuleRuleNotDimensionArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleNot) []GetCostCategoryRuleRuleNotDimension { return v.Dimensions }).(GetCostCategoryRuleRuleNotDimensionArrayOutput)
}

// Configuration block for the specific `Tag` to use for `Expression`. See below.
func (o GetCostCategoryRuleRuleNotOutput) Tags() GetCostCategoryRuleRuleNotTagArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleNot) []GetCostCategoryRuleRuleNotTag { return v.Tags }).(GetCostCategoryRuleRuleNotTagArrayOutput)
}

type GetCostCategoryRuleRuleNotArrayOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleNotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategoryRuleRuleNot)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleNotArrayOutput) ToGetCostCategoryRuleRuleNotArrayOutput() GetCostCategoryRuleRuleNotArrayOutput {
	return o
}

func (o GetCostCategoryRuleRuleNotArrayOutput) ToGetCostCategoryRuleRuleNotArrayOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleNotArrayOutput {
	return o
}

func (o GetCostCategoryRuleRuleNotArrayOutput) Index(i pulumi.IntInput) GetCostCategoryRuleRuleNotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCostCategoryRuleRuleNot {
		return vs[0].([]GetCostCategoryRuleRuleNot)[vs[1].(int)]
	}).(GetCostCategoryRuleRuleNotOutput)
}

type GetCostCategoryRuleRuleNotCostCategory struct {
	// Key for the tag.
	Key string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Parameter values.
	Values []string `pulumi:"values"`
}

// GetCostCategoryRuleRuleNotCostCategoryInput is an input type that accepts GetCostCategoryRuleRuleNotCostCategoryArgs and GetCostCategoryRuleRuleNotCostCategoryOutput values.
// You can construct a concrete instance of `GetCostCategoryRuleRuleNotCostCategoryInput` via:
//
//	GetCostCategoryRuleRuleNotCostCategoryArgs{...}
type GetCostCategoryRuleRuleNotCostCategoryInput interface {
	pulumi.Input

	ToGetCostCategoryRuleRuleNotCostCategoryOutput() GetCostCategoryRuleRuleNotCostCategoryOutput
	ToGetCostCategoryRuleRuleNotCostCategoryOutputWithContext(context.Context) GetCostCategoryRuleRuleNotCostCategoryOutput
}

type GetCostCategoryRuleRuleNotCostCategoryArgs struct {
	// Key for the tag.
	Key pulumi.StringInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Parameter values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetCostCategoryRuleRuleNotCostCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleNotCostCategory)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleNotCostCategoryArgs) ToGetCostCategoryRuleRuleNotCostCategoryOutput() GetCostCategoryRuleRuleNotCostCategoryOutput {
	return i.ToGetCostCategoryRuleRuleNotCostCategoryOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleNotCostCategoryArgs) ToGetCostCategoryRuleRuleNotCostCategoryOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleNotCostCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleNotCostCategoryOutput)
}

// GetCostCategoryRuleRuleNotCostCategoryArrayInput is an input type that accepts GetCostCategoryRuleRuleNotCostCategoryArray and GetCostCategoryRuleRuleNotCostCategoryArrayOutput values.
// You can construct a concrete instance of `GetCostCategoryRuleRuleNotCostCategoryArrayInput` via:
//
//	GetCostCategoryRuleRuleNotCostCategoryArray{ GetCostCategoryRuleRuleNotCostCategoryArgs{...} }
type GetCostCategoryRuleRuleNotCostCategoryArrayInput interface {
	pulumi.Input

	ToGetCostCategoryRuleRuleNotCostCategoryArrayOutput() GetCostCategoryRuleRuleNotCostCategoryArrayOutput
	ToGetCostCategoryRuleRuleNotCostCategoryArrayOutputWithContext(context.Context) GetCostCategoryRuleRuleNotCostCategoryArrayOutput
}

type GetCostCategoryRuleRuleNotCostCategoryArray []GetCostCategoryRuleRuleNotCostCategoryInput

func (GetCostCategoryRuleRuleNotCostCategoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategoryRuleRuleNotCostCategory)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleNotCostCategoryArray) ToGetCostCategoryRuleRuleNotCostCategoryArrayOutput() GetCostCategoryRuleRuleNotCostCategoryArrayOutput {
	return i.ToGetCostCategoryRuleRuleNotCostCategoryArrayOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleNotCostCategoryArray) ToGetCostCategoryRuleRuleNotCostCategoryArrayOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleNotCostCategoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleNotCostCategoryArrayOutput)
}

type GetCostCategoryRuleRuleNotCostCategoryOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleNotCostCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleNotCostCategory)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleNotCostCategoryOutput) ToGetCostCategoryRuleRuleNotCostCategoryOutput() GetCostCategoryRuleRuleNotCostCategoryOutput {
	return o
}

func (o GetCostCategoryRuleRuleNotCostCategoryOutput) ToGetCostCategoryRuleRuleNotCostCategoryOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleNotCostCategoryOutput {
	return o
}

// Key for the tag.
func (o GetCostCategoryRuleRuleNotCostCategoryOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleNotCostCategory) string { return v.Key }).(pulumi.StringOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetCostCategoryRuleRuleNotCostCategoryOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleNotCostCategory) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Parameter values.
func (o GetCostCategoryRuleRuleNotCostCategoryOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleNotCostCategory) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetCostCategoryRuleRuleNotCostCategoryArrayOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleNotCostCategoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategoryRuleRuleNotCostCategory)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleNotCostCategoryArrayOutput) ToGetCostCategoryRuleRuleNotCostCategoryArrayOutput() GetCostCategoryRuleRuleNotCostCategoryArrayOutput {
	return o
}

func (o GetCostCategoryRuleRuleNotCostCategoryArrayOutput) ToGetCostCategoryRuleRuleNotCostCategoryArrayOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleNotCostCategoryArrayOutput {
	return o
}

func (o GetCostCategoryRuleRuleNotCostCategoryArrayOutput) Index(i pulumi.IntInput) GetCostCategoryRuleRuleNotCostCategoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCostCategoryRuleRuleNotCostCategory {
		return vs[0].([]GetCostCategoryRuleRuleNotCostCategory)[vs[1].(int)]
	}).(GetCostCategoryRuleRuleNotCostCategoryOutput)
}

type GetCostCategoryRuleRuleNotDimension struct {
	// Key for the tag.
	Key string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Parameter values.
	Values []string `pulumi:"values"`
}

// GetCostCategoryRuleRuleNotDimensionInput is an input type that accepts GetCostCategoryRuleRuleNotDimensionArgs and GetCostCategoryRuleRuleNotDimensionOutput values.
// You can construct a concrete instance of `GetCostCategoryRuleRuleNotDimensionInput` via:
//
//	GetCostCategoryRuleRuleNotDimensionArgs{...}
type GetCostCategoryRuleRuleNotDimensionInput interface {
	pulumi.Input

	ToGetCostCategoryRuleRuleNotDimensionOutput() GetCostCategoryRuleRuleNotDimensionOutput
	ToGetCostCategoryRuleRuleNotDimensionOutputWithContext(context.Context) GetCostCategoryRuleRuleNotDimensionOutput
}

type GetCostCategoryRuleRuleNotDimensionArgs struct {
	// Key for the tag.
	Key pulumi.StringInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Parameter values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetCostCategoryRuleRuleNotDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleNotDimension)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleNotDimensionArgs) ToGetCostCategoryRuleRuleNotDimensionOutput() GetCostCategoryRuleRuleNotDimensionOutput {
	return i.ToGetCostCategoryRuleRuleNotDimensionOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleNotDimensionArgs) ToGetCostCategoryRuleRuleNotDimensionOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleNotDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleNotDimensionOutput)
}

// GetCostCategoryRuleRuleNotDimensionArrayInput is an input type that accepts GetCostCategoryRuleRuleNotDimensionArray and GetCostCategoryRuleRuleNotDimensionArrayOutput values.
// You can construct a concrete instance of `GetCostCategoryRuleRuleNotDimensionArrayInput` via:
//
//	GetCostCategoryRuleRuleNotDimensionArray{ GetCostCategoryRuleRuleNotDimensionArgs{...} }
type GetCostCategoryRuleRuleNotDimensionArrayInput interface {
	pulumi.Input

	ToGetCostCategoryRuleRuleNotDimensionArrayOutput() GetCostCategoryRuleRuleNotDimensionArrayOutput
	ToGetCostCategoryRuleRuleNotDimensionArrayOutputWithContext(context.Context) GetCostCategoryRuleRuleNotDimensionArrayOutput
}

type GetCostCategoryRuleRuleNotDimensionArray []GetCostCategoryRuleRuleNotDimensionInput

func (GetCostCategoryRuleRuleNotDimensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategoryRuleRuleNotDimension)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleNotDimensionArray) ToGetCostCategoryRuleRuleNotDimensionArrayOutput() GetCostCategoryRuleRuleNotDimensionArrayOutput {
	return i.ToGetCostCategoryRuleRuleNotDimensionArrayOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleNotDimensionArray) ToGetCostCategoryRuleRuleNotDimensionArrayOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleNotDimensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleNotDimensionArrayOutput)
}

type GetCostCategoryRuleRuleNotDimensionOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleNotDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleNotDimension)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleNotDimensionOutput) ToGetCostCategoryRuleRuleNotDimensionOutput() GetCostCategoryRuleRuleNotDimensionOutput {
	return o
}

func (o GetCostCategoryRuleRuleNotDimensionOutput) ToGetCostCategoryRuleRuleNotDimensionOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleNotDimensionOutput {
	return o
}

// Key for the tag.
func (o GetCostCategoryRuleRuleNotDimensionOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleNotDimension) string { return v.Key }).(pulumi.StringOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetCostCategoryRuleRuleNotDimensionOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleNotDimension) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Parameter values.
func (o GetCostCategoryRuleRuleNotDimensionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleNotDimension) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetCostCategoryRuleRuleNotDimensionArrayOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleNotDimensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategoryRuleRuleNotDimension)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleNotDimensionArrayOutput) ToGetCostCategoryRuleRuleNotDimensionArrayOutput() GetCostCategoryRuleRuleNotDimensionArrayOutput {
	return o
}

func (o GetCostCategoryRuleRuleNotDimensionArrayOutput) ToGetCostCategoryRuleRuleNotDimensionArrayOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleNotDimensionArrayOutput {
	return o
}

func (o GetCostCategoryRuleRuleNotDimensionArrayOutput) Index(i pulumi.IntInput) GetCostCategoryRuleRuleNotDimensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCostCategoryRuleRuleNotDimension {
		return vs[0].([]GetCostCategoryRuleRuleNotDimension)[vs[1].(int)]
	}).(GetCostCategoryRuleRuleNotDimensionOutput)
}

type GetCostCategoryRuleRuleNotTag struct {
	// Key for the tag.
	Key string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Parameter values.
	Values []string `pulumi:"values"`
}

// GetCostCategoryRuleRuleNotTagInput is an input type that accepts GetCostCategoryRuleRuleNotTagArgs and GetCostCategoryRuleRuleNotTagOutput values.
// You can construct a concrete instance of `GetCostCategoryRuleRuleNotTagInput` via:
//
//	GetCostCategoryRuleRuleNotTagArgs{...}
type GetCostCategoryRuleRuleNotTagInput interface {
	pulumi.Input

	ToGetCostCategoryRuleRuleNotTagOutput() GetCostCategoryRuleRuleNotTagOutput
	ToGetCostCategoryRuleRuleNotTagOutputWithContext(context.Context) GetCostCategoryRuleRuleNotTagOutput
}

type GetCostCategoryRuleRuleNotTagArgs struct {
	// Key for the tag.
	Key pulumi.StringInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Parameter values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetCostCategoryRuleRuleNotTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleNotTag)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleNotTagArgs) ToGetCostCategoryRuleRuleNotTagOutput() GetCostCategoryRuleRuleNotTagOutput {
	return i.ToGetCostCategoryRuleRuleNotTagOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleNotTagArgs) ToGetCostCategoryRuleRuleNotTagOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleNotTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleNotTagOutput)
}

// GetCostCategoryRuleRuleNotTagArrayInput is an input type that accepts GetCostCategoryRuleRuleNotTagArray and GetCostCategoryRuleRuleNotTagArrayOutput values.
// You can construct a concrete instance of `GetCostCategoryRuleRuleNotTagArrayInput` via:
//
//	GetCostCategoryRuleRuleNotTagArray{ GetCostCategoryRuleRuleNotTagArgs{...} }
type GetCostCategoryRuleRuleNotTagArrayInput interface {
	pulumi.Input

	ToGetCostCategoryRuleRuleNotTagArrayOutput() GetCostCategoryRuleRuleNotTagArrayOutput
	ToGetCostCategoryRuleRuleNotTagArrayOutputWithContext(context.Context) GetCostCategoryRuleRuleNotTagArrayOutput
}

type GetCostCategoryRuleRuleNotTagArray []GetCostCategoryRuleRuleNotTagInput

func (GetCostCategoryRuleRuleNotTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategoryRuleRuleNotTag)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleNotTagArray) ToGetCostCategoryRuleRuleNotTagArrayOutput() GetCostCategoryRuleRuleNotTagArrayOutput {
	return i.ToGetCostCategoryRuleRuleNotTagArrayOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleNotTagArray) ToGetCostCategoryRuleRuleNotTagArrayOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleNotTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleNotTagArrayOutput)
}

type GetCostCategoryRuleRuleNotTagOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleNotTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleNotTag)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleNotTagOutput) ToGetCostCategoryRuleRuleNotTagOutput() GetCostCategoryRuleRuleNotTagOutput {
	return o
}

func (o GetCostCategoryRuleRuleNotTagOutput) ToGetCostCategoryRuleRuleNotTagOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleNotTagOutput {
	return o
}

// Key for the tag.
func (o GetCostCategoryRuleRuleNotTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleNotTag) string { return v.Key }).(pulumi.StringOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetCostCategoryRuleRuleNotTagOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleNotTag) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Parameter values.
func (o GetCostCategoryRuleRuleNotTagOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleNotTag) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetCostCategoryRuleRuleNotTagArrayOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleNotTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategoryRuleRuleNotTag)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleNotTagArrayOutput) ToGetCostCategoryRuleRuleNotTagArrayOutput() GetCostCategoryRuleRuleNotTagArrayOutput {
	return o
}

func (o GetCostCategoryRuleRuleNotTagArrayOutput) ToGetCostCategoryRuleRuleNotTagArrayOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleNotTagArrayOutput {
	return o
}

func (o GetCostCategoryRuleRuleNotTagArrayOutput) Index(i pulumi.IntInput) GetCostCategoryRuleRuleNotTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCostCategoryRuleRuleNotTag {
		return vs[0].([]GetCostCategoryRuleRuleNotTag)[vs[1].(int)]
	}).(GetCostCategoryRuleRuleNotTagOutput)
}

type GetCostCategoryRuleRuleOr struct {
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategories []GetCostCategoryRuleRuleOrCostCategory `pulumi:"costCategories"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimensions []GetCostCategoryRuleRuleOrDimension `pulumi:"dimensions"`
	// Configuration block for the specific `Tag` to use for `Expression`. See below.
	Tags []GetCostCategoryRuleRuleOrTag `pulumi:"tags"`
}

// GetCostCategoryRuleRuleOrInput is an input type that accepts GetCostCategoryRuleRuleOrArgs and GetCostCategoryRuleRuleOrOutput values.
// You can construct a concrete instance of `GetCostCategoryRuleRuleOrInput` via:
//
//	GetCostCategoryRuleRuleOrArgs{...}
type GetCostCategoryRuleRuleOrInput interface {
	pulumi.Input

	ToGetCostCategoryRuleRuleOrOutput() GetCostCategoryRuleRuleOrOutput
	ToGetCostCategoryRuleRuleOrOutputWithContext(context.Context) GetCostCategoryRuleRuleOrOutput
}

type GetCostCategoryRuleRuleOrArgs struct {
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategories GetCostCategoryRuleRuleOrCostCategoryArrayInput `pulumi:"costCategories"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimensions GetCostCategoryRuleRuleOrDimensionArrayInput `pulumi:"dimensions"`
	// Configuration block for the specific `Tag` to use for `Expression`. See below.
	Tags GetCostCategoryRuleRuleOrTagArrayInput `pulumi:"tags"`
}

func (GetCostCategoryRuleRuleOrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleOr)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleOrArgs) ToGetCostCategoryRuleRuleOrOutput() GetCostCategoryRuleRuleOrOutput {
	return i.ToGetCostCategoryRuleRuleOrOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleOrArgs) ToGetCostCategoryRuleRuleOrOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleOrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleOrOutput)
}

// GetCostCategoryRuleRuleOrArrayInput is an input type that accepts GetCostCategoryRuleRuleOrArray and GetCostCategoryRuleRuleOrArrayOutput values.
// You can construct a concrete instance of `GetCostCategoryRuleRuleOrArrayInput` via:
//
//	GetCostCategoryRuleRuleOrArray{ GetCostCategoryRuleRuleOrArgs{...} }
type GetCostCategoryRuleRuleOrArrayInput interface {
	pulumi.Input

	ToGetCostCategoryRuleRuleOrArrayOutput() GetCostCategoryRuleRuleOrArrayOutput
	ToGetCostCategoryRuleRuleOrArrayOutputWithContext(context.Context) GetCostCategoryRuleRuleOrArrayOutput
}

type GetCostCategoryRuleRuleOrArray []GetCostCategoryRuleRuleOrInput

func (GetCostCategoryRuleRuleOrArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategoryRuleRuleOr)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleOrArray) ToGetCostCategoryRuleRuleOrArrayOutput() GetCostCategoryRuleRuleOrArrayOutput {
	return i.ToGetCostCategoryRuleRuleOrArrayOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleOrArray) ToGetCostCategoryRuleRuleOrArrayOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleOrArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleOrArrayOutput)
}

type GetCostCategoryRuleRuleOrOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleOrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleOr)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleOrOutput) ToGetCostCategoryRuleRuleOrOutput() GetCostCategoryRuleRuleOrOutput {
	return o
}

func (o GetCostCategoryRuleRuleOrOutput) ToGetCostCategoryRuleRuleOrOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleOrOutput {
	return o
}

// Configuration block for the filter that's based on `CostCategory` values. See below.
func (o GetCostCategoryRuleRuleOrOutput) CostCategories() GetCostCategoryRuleRuleOrCostCategoryArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleOr) []GetCostCategoryRuleRuleOrCostCategory { return v.CostCategories }).(GetCostCategoryRuleRuleOrCostCategoryArrayOutput)
}

// Configuration block for the specific `Dimension` to use for `Expression`. See below.
func (o GetCostCategoryRuleRuleOrOutput) Dimensions() GetCostCategoryRuleRuleOrDimensionArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleOr) []GetCostCategoryRuleRuleOrDimension { return v.Dimensions }).(GetCostCategoryRuleRuleOrDimensionArrayOutput)
}

// Configuration block for the specific `Tag` to use for `Expression`. See below.
func (o GetCostCategoryRuleRuleOrOutput) Tags() GetCostCategoryRuleRuleOrTagArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleOr) []GetCostCategoryRuleRuleOrTag { return v.Tags }).(GetCostCategoryRuleRuleOrTagArrayOutput)
}

type GetCostCategoryRuleRuleOrArrayOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleOrArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategoryRuleRuleOr)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleOrArrayOutput) ToGetCostCategoryRuleRuleOrArrayOutput() GetCostCategoryRuleRuleOrArrayOutput {
	return o
}

func (o GetCostCategoryRuleRuleOrArrayOutput) ToGetCostCategoryRuleRuleOrArrayOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleOrArrayOutput {
	return o
}

func (o GetCostCategoryRuleRuleOrArrayOutput) Index(i pulumi.IntInput) GetCostCategoryRuleRuleOrOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCostCategoryRuleRuleOr {
		return vs[0].([]GetCostCategoryRuleRuleOr)[vs[1].(int)]
	}).(GetCostCategoryRuleRuleOrOutput)
}

type GetCostCategoryRuleRuleOrCostCategory struct {
	// Key for the tag.
	Key string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Parameter values.
	Values []string `pulumi:"values"`
}

// GetCostCategoryRuleRuleOrCostCategoryInput is an input type that accepts GetCostCategoryRuleRuleOrCostCategoryArgs and GetCostCategoryRuleRuleOrCostCategoryOutput values.
// You can construct a concrete instance of `GetCostCategoryRuleRuleOrCostCategoryInput` via:
//
//	GetCostCategoryRuleRuleOrCostCategoryArgs{...}
type GetCostCategoryRuleRuleOrCostCategoryInput interface {
	pulumi.Input

	ToGetCostCategoryRuleRuleOrCostCategoryOutput() GetCostCategoryRuleRuleOrCostCategoryOutput
	ToGetCostCategoryRuleRuleOrCostCategoryOutputWithContext(context.Context) GetCostCategoryRuleRuleOrCostCategoryOutput
}

type GetCostCategoryRuleRuleOrCostCategoryArgs struct {
	// Key for the tag.
	Key pulumi.StringInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Parameter values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetCostCategoryRuleRuleOrCostCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleOrCostCategory)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleOrCostCategoryArgs) ToGetCostCategoryRuleRuleOrCostCategoryOutput() GetCostCategoryRuleRuleOrCostCategoryOutput {
	return i.ToGetCostCategoryRuleRuleOrCostCategoryOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleOrCostCategoryArgs) ToGetCostCategoryRuleRuleOrCostCategoryOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleOrCostCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleOrCostCategoryOutput)
}

// GetCostCategoryRuleRuleOrCostCategoryArrayInput is an input type that accepts GetCostCategoryRuleRuleOrCostCategoryArray and GetCostCategoryRuleRuleOrCostCategoryArrayOutput values.
// You can construct a concrete instance of `GetCostCategoryRuleRuleOrCostCategoryArrayInput` via:
//
//	GetCostCategoryRuleRuleOrCostCategoryArray{ GetCostCategoryRuleRuleOrCostCategoryArgs{...} }
type GetCostCategoryRuleRuleOrCostCategoryArrayInput interface {
	pulumi.Input

	ToGetCostCategoryRuleRuleOrCostCategoryArrayOutput() GetCostCategoryRuleRuleOrCostCategoryArrayOutput
	ToGetCostCategoryRuleRuleOrCostCategoryArrayOutputWithContext(context.Context) GetCostCategoryRuleRuleOrCostCategoryArrayOutput
}

type GetCostCategoryRuleRuleOrCostCategoryArray []GetCostCategoryRuleRuleOrCostCategoryInput

func (GetCostCategoryRuleRuleOrCostCategoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategoryRuleRuleOrCostCategory)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleOrCostCategoryArray) ToGetCostCategoryRuleRuleOrCostCategoryArrayOutput() GetCostCategoryRuleRuleOrCostCategoryArrayOutput {
	return i.ToGetCostCategoryRuleRuleOrCostCategoryArrayOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleOrCostCategoryArray) ToGetCostCategoryRuleRuleOrCostCategoryArrayOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleOrCostCategoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleOrCostCategoryArrayOutput)
}

type GetCostCategoryRuleRuleOrCostCategoryOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleOrCostCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleOrCostCategory)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleOrCostCategoryOutput) ToGetCostCategoryRuleRuleOrCostCategoryOutput() GetCostCategoryRuleRuleOrCostCategoryOutput {
	return o
}

func (o GetCostCategoryRuleRuleOrCostCategoryOutput) ToGetCostCategoryRuleRuleOrCostCategoryOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleOrCostCategoryOutput {
	return o
}

// Key for the tag.
func (o GetCostCategoryRuleRuleOrCostCategoryOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleOrCostCategory) string { return v.Key }).(pulumi.StringOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetCostCategoryRuleRuleOrCostCategoryOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleOrCostCategory) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Parameter values.
func (o GetCostCategoryRuleRuleOrCostCategoryOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleOrCostCategory) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetCostCategoryRuleRuleOrCostCategoryArrayOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleOrCostCategoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategoryRuleRuleOrCostCategory)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleOrCostCategoryArrayOutput) ToGetCostCategoryRuleRuleOrCostCategoryArrayOutput() GetCostCategoryRuleRuleOrCostCategoryArrayOutput {
	return o
}

func (o GetCostCategoryRuleRuleOrCostCategoryArrayOutput) ToGetCostCategoryRuleRuleOrCostCategoryArrayOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleOrCostCategoryArrayOutput {
	return o
}

func (o GetCostCategoryRuleRuleOrCostCategoryArrayOutput) Index(i pulumi.IntInput) GetCostCategoryRuleRuleOrCostCategoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCostCategoryRuleRuleOrCostCategory {
		return vs[0].([]GetCostCategoryRuleRuleOrCostCategory)[vs[1].(int)]
	}).(GetCostCategoryRuleRuleOrCostCategoryOutput)
}

type GetCostCategoryRuleRuleOrDimension struct {
	// Key for the tag.
	Key string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Parameter values.
	Values []string `pulumi:"values"`
}

// GetCostCategoryRuleRuleOrDimensionInput is an input type that accepts GetCostCategoryRuleRuleOrDimensionArgs and GetCostCategoryRuleRuleOrDimensionOutput values.
// You can construct a concrete instance of `GetCostCategoryRuleRuleOrDimensionInput` via:
//
//	GetCostCategoryRuleRuleOrDimensionArgs{...}
type GetCostCategoryRuleRuleOrDimensionInput interface {
	pulumi.Input

	ToGetCostCategoryRuleRuleOrDimensionOutput() GetCostCategoryRuleRuleOrDimensionOutput
	ToGetCostCategoryRuleRuleOrDimensionOutputWithContext(context.Context) GetCostCategoryRuleRuleOrDimensionOutput
}

type GetCostCategoryRuleRuleOrDimensionArgs struct {
	// Key for the tag.
	Key pulumi.StringInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Parameter values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetCostCategoryRuleRuleOrDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleOrDimension)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleOrDimensionArgs) ToGetCostCategoryRuleRuleOrDimensionOutput() GetCostCategoryRuleRuleOrDimensionOutput {
	return i.ToGetCostCategoryRuleRuleOrDimensionOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleOrDimensionArgs) ToGetCostCategoryRuleRuleOrDimensionOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleOrDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleOrDimensionOutput)
}

// GetCostCategoryRuleRuleOrDimensionArrayInput is an input type that accepts GetCostCategoryRuleRuleOrDimensionArray and GetCostCategoryRuleRuleOrDimensionArrayOutput values.
// You can construct a concrete instance of `GetCostCategoryRuleRuleOrDimensionArrayInput` via:
//
//	GetCostCategoryRuleRuleOrDimensionArray{ GetCostCategoryRuleRuleOrDimensionArgs{...} }
type GetCostCategoryRuleRuleOrDimensionArrayInput interface {
	pulumi.Input

	ToGetCostCategoryRuleRuleOrDimensionArrayOutput() GetCostCategoryRuleRuleOrDimensionArrayOutput
	ToGetCostCategoryRuleRuleOrDimensionArrayOutputWithContext(context.Context) GetCostCategoryRuleRuleOrDimensionArrayOutput
}

type GetCostCategoryRuleRuleOrDimensionArray []GetCostCategoryRuleRuleOrDimensionInput

func (GetCostCategoryRuleRuleOrDimensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategoryRuleRuleOrDimension)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleOrDimensionArray) ToGetCostCategoryRuleRuleOrDimensionArrayOutput() GetCostCategoryRuleRuleOrDimensionArrayOutput {
	return i.ToGetCostCategoryRuleRuleOrDimensionArrayOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleOrDimensionArray) ToGetCostCategoryRuleRuleOrDimensionArrayOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleOrDimensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleOrDimensionArrayOutput)
}

type GetCostCategoryRuleRuleOrDimensionOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleOrDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleOrDimension)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleOrDimensionOutput) ToGetCostCategoryRuleRuleOrDimensionOutput() GetCostCategoryRuleRuleOrDimensionOutput {
	return o
}

func (o GetCostCategoryRuleRuleOrDimensionOutput) ToGetCostCategoryRuleRuleOrDimensionOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleOrDimensionOutput {
	return o
}

// Key for the tag.
func (o GetCostCategoryRuleRuleOrDimensionOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleOrDimension) string { return v.Key }).(pulumi.StringOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetCostCategoryRuleRuleOrDimensionOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleOrDimension) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Parameter values.
func (o GetCostCategoryRuleRuleOrDimensionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleOrDimension) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetCostCategoryRuleRuleOrDimensionArrayOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleOrDimensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategoryRuleRuleOrDimension)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleOrDimensionArrayOutput) ToGetCostCategoryRuleRuleOrDimensionArrayOutput() GetCostCategoryRuleRuleOrDimensionArrayOutput {
	return o
}

func (o GetCostCategoryRuleRuleOrDimensionArrayOutput) ToGetCostCategoryRuleRuleOrDimensionArrayOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleOrDimensionArrayOutput {
	return o
}

func (o GetCostCategoryRuleRuleOrDimensionArrayOutput) Index(i pulumi.IntInput) GetCostCategoryRuleRuleOrDimensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCostCategoryRuleRuleOrDimension {
		return vs[0].([]GetCostCategoryRuleRuleOrDimension)[vs[1].(int)]
	}).(GetCostCategoryRuleRuleOrDimensionOutput)
}

type GetCostCategoryRuleRuleOrTag struct {
	// Key for the tag.
	Key string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Parameter values.
	Values []string `pulumi:"values"`
}

// GetCostCategoryRuleRuleOrTagInput is an input type that accepts GetCostCategoryRuleRuleOrTagArgs and GetCostCategoryRuleRuleOrTagOutput values.
// You can construct a concrete instance of `GetCostCategoryRuleRuleOrTagInput` via:
//
//	GetCostCategoryRuleRuleOrTagArgs{...}
type GetCostCategoryRuleRuleOrTagInput interface {
	pulumi.Input

	ToGetCostCategoryRuleRuleOrTagOutput() GetCostCategoryRuleRuleOrTagOutput
	ToGetCostCategoryRuleRuleOrTagOutputWithContext(context.Context) GetCostCategoryRuleRuleOrTagOutput
}

type GetCostCategoryRuleRuleOrTagArgs struct {
	// Key for the tag.
	Key pulumi.StringInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Parameter values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetCostCategoryRuleRuleOrTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleOrTag)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleOrTagArgs) ToGetCostCategoryRuleRuleOrTagOutput() GetCostCategoryRuleRuleOrTagOutput {
	return i.ToGetCostCategoryRuleRuleOrTagOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleOrTagArgs) ToGetCostCategoryRuleRuleOrTagOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleOrTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleOrTagOutput)
}

// GetCostCategoryRuleRuleOrTagArrayInput is an input type that accepts GetCostCategoryRuleRuleOrTagArray and GetCostCategoryRuleRuleOrTagArrayOutput values.
// You can construct a concrete instance of `GetCostCategoryRuleRuleOrTagArrayInput` via:
//
//	GetCostCategoryRuleRuleOrTagArray{ GetCostCategoryRuleRuleOrTagArgs{...} }
type GetCostCategoryRuleRuleOrTagArrayInput interface {
	pulumi.Input

	ToGetCostCategoryRuleRuleOrTagArrayOutput() GetCostCategoryRuleRuleOrTagArrayOutput
	ToGetCostCategoryRuleRuleOrTagArrayOutputWithContext(context.Context) GetCostCategoryRuleRuleOrTagArrayOutput
}

type GetCostCategoryRuleRuleOrTagArray []GetCostCategoryRuleRuleOrTagInput

func (GetCostCategoryRuleRuleOrTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategoryRuleRuleOrTag)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleOrTagArray) ToGetCostCategoryRuleRuleOrTagArrayOutput() GetCostCategoryRuleRuleOrTagArrayOutput {
	return i.ToGetCostCategoryRuleRuleOrTagArrayOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleOrTagArray) ToGetCostCategoryRuleRuleOrTagArrayOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleOrTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleOrTagArrayOutput)
}

type GetCostCategoryRuleRuleOrTagOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleOrTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleOrTag)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleOrTagOutput) ToGetCostCategoryRuleRuleOrTagOutput() GetCostCategoryRuleRuleOrTagOutput {
	return o
}

func (o GetCostCategoryRuleRuleOrTagOutput) ToGetCostCategoryRuleRuleOrTagOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleOrTagOutput {
	return o
}

// Key for the tag.
func (o GetCostCategoryRuleRuleOrTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleOrTag) string { return v.Key }).(pulumi.StringOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetCostCategoryRuleRuleOrTagOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleOrTag) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Parameter values.
func (o GetCostCategoryRuleRuleOrTagOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleOrTag) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetCostCategoryRuleRuleOrTagArrayOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleOrTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategoryRuleRuleOrTag)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleOrTagArrayOutput) ToGetCostCategoryRuleRuleOrTagArrayOutput() GetCostCategoryRuleRuleOrTagArrayOutput {
	return o
}

func (o GetCostCategoryRuleRuleOrTagArrayOutput) ToGetCostCategoryRuleRuleOrTagArrayOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleOrTagArrayOutput {
	return o
}

func (o GetCostCategoryRuleRuleOrTagArrayOutput) Index(i pulumi.IntInput) GetCostCategoryRuleRuleOrTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCostCategoryRuleRuleOrTag {
		return vs[0].([]GetCostCategoryRuleRuleOrTag)[vs[1].(int)]
	}).(GetCostCategoryRuleRuleOrTagOutput)
}

type GetCostCategoryRuleRuleTag struct {
	// Key for the tag.
	Key string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Parameter values.
	Values []string `pulumi:"values"`
}

// GetCostCategoryRuleRuleTagInput is an input type that accepts GetCostCategoryRuleRuleTagArgs and GetCostCategoryRuleRuleTagOutput values.
// You can construct a concrete instance of `GetCostCategoryRuleRuleTagInput` via:
//
//	GetCostCategoryRuleRuleTagArgs{...}
type GetCostCategoryRuleRuleTagInput interface {
	pulumi.Input

	ToGetCostCategoryRuleRuleTagOutput() GetCostCategoryRuleRuleTagOutput
	ToGetCostCategoryRuleRuleTagOutputWithContext(context.Context) GetCostCategoryRuleRuleTagOutput
}

type GetCostCategoryRuleRuleTagArgs struct {
	// Key for the tag.
	Key pulumi.StringInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Parameter values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetCostCategoryRuleRuleTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleTag)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleTagArgs) ToGetCostCategoryRuleRuleTagOutput() GetCostCategoryRuleRuleTagOutput {
	return i.ToGetCostCategoryRuleRuleTagOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleTagArgs) ToGetCostCategoryRuleRuleTagOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleTagOutput)
}

// GetCostCategoryRuleRuleTagArrayInput is an input type that accepts GetCostCategoryRuleRuleTagArray and GetCostCategoryRuleRuleTagArrayOutput values.
// You can construct a concrete instance of `GetCostCategoryRuleRuleTagArrayInput` via:
//
//	GetCostCategoryRuleRuleTagArray{ GetCostCategoryRuleRuleTagArgs{...} }
type GetCostCategoryRuleRuleTagArrayInput interface {
	pulumi.Input

	ToGetCostCategoryRuleRuleTagArrayOutput() GetCostCategoryRuleRuleTagArrayOutput
	ToGetCostCategoryRuleRuleTagArrayOutputWithContext(context.Context) GetCostCategoryRuleRuleTagArrayOutput
}

type GetCostCategoryRuleRuleTagArray []GetCostCategoryRuleRuleTagInput

func (GetCostCategoryRuleRuleTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategoryRuleRuleTag)(nil)).Elem()
}

func (i GetCostCategoryRuleRuleTagArray) ToGetCostCategoryRuleRuleTagArrayOutput() GetCostCategoryRuleRuleTagArrayOutput {
	return i.ToGetCostCategoryRuleRuleTagArrayOutputWithContext(context.Background())
}

func (i GetCostCategoryRuleRuleTagArray) ToGetCostCategoryRuleRuleTagArrayOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategoryRuleRuleTagArrayOutput)
}

type GetCostCategoryRuleRuleTagOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategoryRuleRuleTag)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleTagOutput) ToGetCostCategoryRuleRuleTagOutput() GetCostCategoryRuleRuleTagOutput {
	return o
}

func (o GetCostCategoryRuleRuleTagOutput) ToGetCostCategoryRuleRuleTagOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleTagOutput {
	return o
}

// Key for the tag.
func (o GetCostCategoryRuleRuleTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleTag) string { return v.Key }).(pulumi.StringOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetCostCategoryRuleRuleTagOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleTag) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Parameter values.
func (o GetCostCategoryRuleRuleTagOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCostCategoryRuleRuleTag) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetCostCategoryRuleRuleTagArrayOutput struct{ *pulumi.OutputState }

func (GetCostCategoryRuleRuleTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategoryRuleRuleTag)(nil)).Elem()
}

func (o GetCostCategoryRuleRuleTagArrayOutput) ToGetCostCategoryRuleRuleTagArrayOutput() GetCostCategoryRuleRuleTagArrayOutput {
	return o
}

func (o GetCostCategoryRuleRuleTagArrayOutput) ToGetCostCategoryRuleRuleTagArrayOutputWithContext(ctx context.Context) GetCostCategoryRuleRuleTagArrayOutput {
	return o
}

func (o GetCostCategoryRuleRuleTagArrayOutput) Index(i pulumi.IntInput) GetCostCategoryRuleRuleTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCostCategoryRuleRuleTag {
		return vs[0].([]GetCostCategoryRuleRuleTag)[vs[1].(int)]
	}).(GetCostCategoryRuleRuleTagOutput)
}

type GetCostCategorySplitChargeRule struct {
	// Method that's used to define how to split your source costs across your targets. Valid values are `FIXED`, `PROPORTIONAL`, `EVEN`
	Method string `pulumi:"method"`
	// Configuration block for the parameters for a split charge method. This is only required for the `FIXED` method. See below.
	Parameters []GetCostCategorySplitChargeRuleParameter `pulumi:"parameters"`
	// Cost Category value that you want to split.
	Source string `pulumi:"source"`
	// Cost Category values that you want to split costs across. These values can't be used as a source in other split charge rules.
	Targets []string `pulumi:"targets"`
}

// GetCostCategorySplitChargeRuleInput is an input type that accepts GetCostCategorySplitChargeRuleArgs and GetCostCategorySplitChargeRuleOutput values.
// You can construct a concrete instance of `GetCostCategorySplitChargeRuleInput` via:
//
//	GetCostCategorySplitChargeRuleArgs{...}
type GetCostCategorySplitChargeRuleInput interface {
	pulumi.Input

	ToGetCostCategorySplitChargeRuleOutput() GetCostCategorySplitChargeRuleOutput
	ToGetCostCategorySplitChargeRuleOutputWithContext(context.Context) GetCostCategorySplitChargeRuleOutput
}

type GetCostCategorySplitChargeRuleArgs struct {
	// Method that's used to define how to split your source costs across your targets. Valid values are `FIXED`, `PROPORTIONAL`, `EVEN`
	Method pulumi.StringInput `pulumi:"method"`
	// Configuration block for the parameters for a split charge method. This is only required for the `FIXED` method. See below.
	Parameters GetCostCategorySplitChargeRuleParameterArrayInput `pulumi:"parameters"`
	// Cost Category value that you want to split.
	Source pulumi.StringInput `pulumi:"source"`
	// Cost Category values that you want to split costs across. These values can't be used as a source in other split charge rules.
	Targets pulumi.StringArrayInput `pulumi:"targets"`
}

func (GetCostCategorySplitChargeRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategorySplitChargeRule)(nil)).Elem()
}

func (i GetCostCategorySplitChargeRuleArgs) ToGetCostCategorySplitChargeRuleOutput() GetCostCategorySplitChargeRuleOutput {
	return i.ToGetCostCategorySplitChargeRuleOutputWithContext(context.Background())
}

func (i GetCostCategorySplitChargeRuleArgs) ToGetCostCategorySplitChargeRuleOutputWithContext(ctx context.Context) GetCostCategorySplitChargeRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategorySplitChargeRuleOutput)
}

// GetCostCategorySplitChargeRuleArrayInput is an input type that accepts GetCostCategorySplitChargeRuleArray and GetCostCategorySplitChargeRuleArrayOutput values.
// You can construct a concrete instance of `GetCostCategorySplitChargeRuleArrayInput` via:
//
//	GetCostCategorySplitChargeRuleArray{ GetCostCategorySplitChargeRuleArgs{...} }
type GetCostCategorySplitChargeRuleArrayInput interface {
	pulumi.Input

	ToGetCostCategorySplitChargeRuleArrayOutput() GetCostCategorySplitChargeRuleArrayOutput
	ToGetCostCategorySplitChargeRuleArrayOutputWithContext(context.Context) GetCostCategorySplitChargeRuleArrayOutput
}

type GetCostCategorySplitChargeRuleArray []GetCostCategorySplitChargeRuleInput

func (GetCostCategorySplitChargeRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategorySplitChargeRule)(nil)).Elem()
}

func (i GetCostCategorySplitChargeRuleArray) ToGetCostCategorySplitChargeRuleArrayOutput() GetCostCategorySplitChargeRuleArrayOutput {
	return i.ToGetCostCategorySplitChargeRuleArrayOutputWithContext(context.Background())
}

func (i GetCostCategorySplitChargeRuleArray) ToGetCostCategorySplitChargeRuleArrayOutputWithContext(ctx context.Context) GetCostCategorySplitChargeRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategorySplitChargeRuleArrayOutput)
}

type GetCostCategorySplitChargeRuleOutput struct{ *pulumi.OutputState }

func (GetCostCategorySplitChargeRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategorySplitChargeRule)(nil)).Elem()
}

func (o GetCostCategorySplitChargeRuleOutput) ToGetCostCategorySplitChargeRuleOutput() GetCostCategorySplitChargeRuleOutput {
	return o
}

func (o GetCostCategorySplitChargeRuleOutput) ToGetCostCategorySplitChargeRuleOutputWithContext(ctx context.Context) GetCostCategorySplitChargeRuleOutput {
	return o
}

// Method that's used to define how to split your source costs across your targets. Valid values are `FIXED`, `PROPORTIONAL`, `EVEN`
func (o GetCostCategorySplitChargeRuleOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v GetCostCategorySplitChargeRule) string { return v.Method }).(pulumi.StringOutput)
}

// Configuration block for the parameters for a split charge method. This is only required for the `FIXED` method. See below.
func (o GetCostCategorySplitChargeRuleOutput) Parameters() GetCostCategorySplitChargeRuleParameterArrayOutput {
	return o.ApplyT(func(v GetCostCategorySplitChargeRule) []GetCostCategorySplitChargeRuleParameter { return v.Parameters }).(GetCostCategorySplitChargeRuleParameterArrayOutput)
}

// Cost Category value that you want to split.
func (o GetCostCategorySplitChargeRuleOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v GetCostCategorySplitChargeRule) string { return v.Source }).(pulumi.StringOutput)
}

// Cost Category values that you want to split costs across. These values can't be used as a source in other split charge rules.
func (o GetCostCategorySplitChargeRuleOutput) Targets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCostCategorySplitChargeRule) []string { return v.Targets }).(pulumi.StringArrayOutput)
}

type GetCostCategorySplitChargeRuleArrayOutput struct{ *pulumi.OutputState }

func (GetCostCategorySplitChargeRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategorySplitChargeRule)(nil)).Elem()
}

func (o GetCostCategorySplitChargeRuleArrayOutput) ToGetCostCategorySplitChargeRuleArrayOutput() GetCostCategorySplitChargeRuleArrayOutput {
	return o
}

func (o GetCostCategorySplitChargeRuleArrayOutput) ToGetCostCategorySplitChargeRuleArrayOutputWithContext(ctx context.Context) GetCostCategorySplitChargeRuleArrayOutput {
	return o
}

func (o GetCostCategorySplitChargeRuleArrayOutput) Index(i pulumi.IntInput) GetCostCategorySplitChargeRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCostCategorySplitChargeRule {
		return vs[0].([]GetCostCategorySplitChargeRule)[vs[1].(int)]
	}).(GetCostCategorySplitChargeRuleOutput)
}

type GetCostCategorySplitChargeRuleParameter struct {
	// Parameter type.
	Type string `pulumi:"type"`
	// Parameter values.
	Values []string `pulumi:"values"`
}

// GetCostCategorySplitChargeRuleParameterInput is an input type that accepts GetCostCategorySplitChargeRuleParameterArgs and GetCostCategorySplitChargeRuleParameterOutput values.
// You can construct a concrete instance of `GetCostCategorySplitChargeRuleParameterInput` via:
//
//	GetCostCategorySplitChargeRuleParameterArgs{...}
type GetCostCategorySplitChargeRuleParameterInput interface {
	pulumi.Input

	ToGetCostCategorySplitChargeRuleParameterOutput() GetCostCategorySplitChargeRuleParameterOutput
	ToGetCostCategorySplitChargeRuleParameterOutputWithContext(context.Context) GetCostCategorySplitChargeRuleParameterOutput
}

type GetCostCategorySplitChargeRuleParameterArgs struct {
	// Parameter type.
	Type pulumi.StringInput `pulumi:"type"`
	// Parameter values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetCostCategorySplitChargeRuleParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategorySplitChargeRuleParameter)(nil)).Elem()
}

func (i GetCostCategorySplitChargeRuleParameterArgs) ToGetCostCategorySplitChargeRuleParameterOutput() GetCostCategorySplitChargeRuleParameterOutput {
	return i.ToGetCostCategorySplitChargeRuleParameterOutputWithContext(context.Background())
}

func (i GetCostCategorySplitChargeRuleParameterArgs) ToGetCostCategorySplitChargeRuleParameterOutputWithContext(ctx context.Context) GetCostCategorySplitChargeRuleParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategorySplitChargeRuleParameterOutput)
}

// GetCostCategorySplitChargeRuleParameterArrayInput is an input type that accepts GetCostCategorySplitChargeRuleParameterArray and GetCostCategorySplitChargeRuleParameterArrayOutput values.
// You can construct a concrete instance of `GetCostCategorySplitChargeRuleParameterArrayInput` via:
//
//	GetCostCategorySplitChargeRuleParameterArray{ GetCostCategorySplitChargeRuleParameterArgs{...} }
type GetCostCategorySplitChargeRuleParameterArrayInput interface {
	pulumi.Input

	ToGetCostCategorySplitChargeRuleParameterArrayOutput() GetCostCategorySplitChargeRuleParameterArrayOutput
	ToGetCostCategorySplitChargeRuleParameterArrayOutputWithContext(context.Context) GetCostCategorySplitChargeRuleParameterArrayOutput
}

type GetCostCategorySplitChargeRuleParameterArray []GetCostCategorySplitChargeRuleParameterInput

func (GetCostCategorySplitChargeRuleParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategorySplitChargeRuleParameter)(nil)).Elem()
}

func (i GetCostCategorySplitChargeRuleParameterArray) ToGetCostCategorySplitChargeRuleParameterArrayOutput() GetCostCategorySplitChargeRuleParameterArrayOutput {
	return i.ToGetCostCategorySplitChargeRuleParameterArrayOutputWithContext(context.Background())
}

func (i GetCostCategorySplitChargeRuleParameterArray) ToGetCostCategorySplitChargeRuleParameterArrayOutputWithContext(ctx context.Context) GetCostCategorySplitChargeRuleParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCostCategorySplitChargeRuleParameterArrayOutput)
}

type GetCostCategorySplitChargeRuleParameterOutput struct{ *pulumi.OutputState }

func (GetCostCategorySplitChargeRuleParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCostCategorySplitChargeRuleParameter)(nil)).Elem()
}

func (o GetCostCategorySplitChargeRuleParameterOutput) ToGetCostCategorySplitChargeRuleParameterOutput() GetCostCategorySplitChargeRuleParameterOutput {
	return o
}

func (o GetCostCategorySplitChargeRuleParameterOutput) ToGetCostCategorySplitChargeRuleParameterOutputWithContext(ctx context.Context) GetCostCategorySplitChargeRuleParameterOutput {
	return o
}

// Parameter type.
func (o GetCostCategorySplitChargeRuleParameterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetCostCategorySplitChargeRuleParameter) string { return v.Type }).(pulumi.StringOutput)
}

// Parameter values.
func (o GetCostCategorySplitChargeRuleParameterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCostCategorySplitChargeRuleParameter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetCostCategorySplitChargeRuleParameterArrayOutput struct{ *pulumi.OutputState }

func (GetCostCategorySplitChargeRuleParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCostCategorySplitChargeRuleParameter)(nil)).Elem()
}

func (o GetCostCategorySplitChargeRuleParameterArrayOutput) ToGetCostCategorySplitChargeRuleParameterArrayOutput() GetCostCategorySplitChargeRuleParameterArrayOutput {
	return o
}

func (o GetCostCategorySplitChargeRuleParameterArrayOutput) ToGetCostCategorySplitChargeRuleParameterArrayOutputWithContext(ctx context.Context) GetCostCategorySplitChargeRuleParameterArrayOutput {
	return o
}

func (o GetCostCategorySplitChargeRuleParameterArrayOutput) Index(i pulumi.IntInput) GetCostCategorySplitChargeRuleParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCostCategorySplitChargeRuleParameter {
		return vs[0].([]GetCostCategorySplitChargeRuleParameter)[vs[1].(int)]
	}).(GetCostCategorySplitChargeRuleParameterOutput)
}

type GetTagsFilter struct {
	// Return results that match both `Dimension` objects.
	Ands []GetTagsFilterAnd `pulumi:"ands"`
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategory *GetTagsFilterCostCategory `pulumi:"costCategory"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimension *GetTagsFilterDimension `pulumi:"dimension"`
	// Return results that match both `Dimension` object.
	Not *GetTagsFilterNot `pulumi:"not"`
	// Return results that match both `Dimension` object.
	Ors []GetTagsFilterOr `pulumi:"ors"`
	// Tags that match your request.
	Tags *GetTagsFilterTags `pulumi:"tags"`
}

// GetTagsFilterInput is an input type that accepts GetTagsFilterArgs and GetTagsFilterOutput values.
// You can construct a concrete instance of `GetTagsFilterInput` via:
//
//	GetTagsFilterArgs{...}
type GetTagsFilterInput interface {
	pulumi.Input

	ToGetTagsFilterOutput() GetTagsFilterOutput
	ToGetTagsFilterOutputWithContext(context.Context) GetTagsFilterOutput
}

type GetTagsFilterArgs struct {
	// Return results that match both `Dimension` objects.
	Ands GetTagsFilterAndArrayInput `pulumi:"ands"`
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategory GetTagsFilterCostCategoryPtrInput `pulumi:"costCategory"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimension GetTagsFilterDimensionPtrInput `pulumi:"dimension"`
	// Return results that match both `Dimension` object.
	Not GetTagsFilterNotPtrInput `pulumi:"not"`
	// Return results that match both `Dimension` object.
	Ors GetTagsFilterOrArrayInput `pulumi:"ors"`
	// Tags that match your request.
	Tags GetTagsFilterTagsPtrInput `pulumi:"tags"`
}

func (GetTagsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilter)(nil)).Elem()
}

func (i GetTagsFilterArgs) ToGetTagsFilterOutput() GetTagsFilterOutput {
	return i.ToGetTagsFilterOutputWithContext(context.Background())
}

func (i GetTagsFilterArgs) ToGetTagsFilterOutputWithContext(ctx context.Context) GetTagsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterOutput)
}

func (i GetTagsFilterArgs) ToGetTagsFilterPtrOutput() GetTagsFilterPtrOutput {
	return i.ToGetTagsFilterPtrOutputWithContext(context.Background())
}

func (i GetTagsFilterArgs) ToGetTagsFilterPtrOutputWithContext(ctx context.Context) GetTagsFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterOutput).ToGetTagsFilterPtrOutputWithContext(ctx)
}

// GetTagsFilterPtrInput is an input type that accepts GetTagsFilterArgs, GetTagsFilterPtr and GetTagsFilterPtrOutput values.
// You can construct a concrete instance of `GetTagsFilterPtrInput` via:
//
//	        GetTagsFilterArgs{...}
//
//	or:
//
//	        nil
type GetTagsFilterPtrInput interface {
	pulumi.Input

	ToGetTagsFilterPtrOutput() GetTagsFilterPtrOutput
	ToGetTagsFilterPtrOutputWithContext(context.Context) GetTagsFilterPtrOutput
}

type getTagsFilterPtrType GetTagsFilterArgs

func GetTagsFilterPtr(v *GetTagsFilterArgs) GetTagsFilterPtrInput {
	return (*getTagsFilterPtrType)(v)
}

func (*getTagsFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTagsFilter)(nil)).Elem()
}

func (i *getTagsFilterPtrType) ToGetTagsFilterPtrOutput() GetTagsFilterPtrOutput {
	return i.ToGetTagsFilterPtrOutputWithContext(context.Background())
}

func (i *getTagsFilterPtrType) ToGetTagsFilterPtrOutputWithContext(ctx context.Context) GetTagsFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterPtrOutput)
}

type GetTagsFilterOutput struct{ *pulumi.OutputState }

func (GetTagsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilter)(nil)).Elem()
}

func (o GetTagsFilterOutput) ToGetTagsFilterOutput() GetTagsFilterOutput {
	return o
}

func (o GetTagsFilterOutput) ToGetTagsFilterOutputWithContext(ctx context.Context) GetTagsFilterOutput {
	return o
}

func (o GetTagsFilterOutput) ToGetTagsFilterPtrOutput() GetTagsFilterPtrOutput {
	return o.ToGetTagsFilterPtrOutputWithContext(context.Background())
}

func (o GetTagsFilterOutput) ToGetTagsFilterPtrOutputWithContext(ctx context.Context) GetTagsFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetTagsFilter) *GetTagsFilter {
		return &v
	}).(GetTagsFilterPtrOutput)
}

// Return results that match both `Dimension` objects.
func (o GetTagsFilterOutput) Ands() GetTagsFilterAndArrayOutput {
	return o.ApplyT(func(v GetTagsFilter) []GetTagsFilterAnd { return v.Ands }).(GetTagsFilterAndArrayOutput)
}

// Configuration block for the filter that's based on `CostCategory` values. See below.
func (o GetTagsFilterOutput) CostCategory() GetTagsFilterCostCategoryPtrOutput {
	return o.ApplyT(func(v GetTagsFilter) *GetTagsFilterCostCategory { return v.CostCategory }).(GetTagsFilterCostCategoryPtrOutput)
}

// Configuration block for the specific `Dimension` to use for `Expression`. See below.
func (o GetTagsFilterOutput) Dimension() GetTagsFilterDimensionPtrOutput {
	return o.ApplyT(func(v GetTagsFilter) *GetTagsFilterDimension { return v.Dimension }).(GetTagsFilterDimensionPtrOutput)
}

// Return results that match both `Dimension` object.
func (o GetTagsFilterOutput) Not() GetTagsFilterNotPtrOutput {
	return o.ApplyT(func(v GetTagsFilter) *GetTagsFilterNot { return v.Not }).(GetTagsFilterNotPtrOutput)
}

// Return results that match both `Dimension` object.
func (o GetTagsFilterOutput) Ors() GetTagsFilterOrArrayOutput {
	return o.ApplyT(func(v GetTagsFilter) []GetTagsFilterOr { return v.Ors }).(GetTagsFilterOrArrayOutput)
}

// Tags that match your request.
func (o GetTagsFilterOutput) Tags() GetTagsFilterTagsPtrOutput {
	return o.ApplyT(func(v GetTagsFilter) *GetTagsFilterTags { return v.Tags }).(GetTagsFilterTagsPtrOutput)
}

type GetTagsFilterPtrOutput struct{ *pulumi.OutputState }

func (GetTagsFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTagsFilter)(nil)).Elem()
}

func (o GetTagsFilterPtrOutput) ToGetTagsFilterPtrOutput() GetTagsFilterPtrOutput {
	return o
}

func (o GetTagsFilterPtrOutput) ToGetTagsFilterPtrOutputWithContext(ctx context.Context) GetTagsFilterPtrOutput {
	return o
}

func (o GetTagsFilterPtrOutput) Elem() GetTagsFilterOutput {
	return o.ApplyT(func(v *GetTagsFilter) GetTagsFilter {
		if v != nil {
			return *v
		}
		var ret GetTagsFilter
		return ret
	}).(GetTagsFilterOutput)
}

// Return results that match both `Dimension` objects.
func (o GetTagsFilterPtrOutput) Ands() GetTagsFilterAndArrayOutput {
	return o.ApplyT(func(v *GetTagsFilter) []GetTagsFilterAnd {
		if v == nil {
			return nil
		}
		return v.Ands
	}).(GetTagsFilterAndArrayOutput)
}

// Configuration block for the filter that's based on `CostCategory` values. See below.
func (o GetTagsFilterPtrOutput) CostCategory() GetTagsFilterCostCategoryPtrOutput {
	return o.ApplyT(func(v *GetTagsFilter) *GetTagsFilterCostCategory {
		if v == nil {
			return nil
		}
		return v.CostCategory
	}).(GetTagsFilterCostCategoryPtrOutput)
}

// Configuration block for the specific `Dimension` to use for `Expression`. See below.
func (o GetTagsFilterPtrOutput) Dimension() GetTagsFilterDimensionPtrOutput {
	return o.ApplyT(func(v *GetTagsFilter) *GetTagsFilterDimension {
		if v == nil {
			return nil
		}
		return v.Dimension
	}).(GetTagsFilterDimensionPtrOutput)
}

// Return results that match both `Dimension` object.
func (o GetTagsFilterPtrOutput) Not() GetTagsFilterNotPtrOutput {
	return o.ApplyT(func(v *GetTagsFilter) *GetTagsFilterNot {
		if v == nil {
			return nil
		}
		return v.Not
	}).(GetTagsFilterNotPtrOutput)
}

// Return results that match both `Dimension` object.
func (o GetTagsFilterPtrOutput) Ors() GetTagsFilterOrArrayOutput {
	return o.ApplyT(func(v *GetTagsFilter) []GetTagsFilterOr {
		if v == nil {
			return nil
		}
		return v.Ors
	}).(GetTagsFilterOrArrayOutput)
}

// Tags that match your request.
func (o GetTagsFilterPtrOutput) Tags() GetTagsFilterTagsPtrOutput {
	return o.ApplyT(func(v *GetTagsFilter) *GetTagsFilterTags {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(GetTagsFilterTagsPtrOutput)
}

type GetTagsFilterAnd struct {
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategory *GetTagsFilterAndCostCategory `pulumi:"costCategory"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimension *GetTagsFilterAndDimension `pulumi:"dimension"`
	// Tags that match your request.
	Tags *GetTagsFilterAndTags `pulumi:"tags"`
}

// GetTagsFilterAndInput is an input type that accepts GetTagsFilterAndArgs and GetTagsFilterAndOutput values.
// You can construct a concrete instance of `GetTagsFilterAndInput` via:
//
//	GetTagsFilterAndArgs{...}
type GetTagsFilterAndInput interface {
	pulumi.Input

	ToGetTagsFilterAndOutput() GetTagsFilterAndOutput
	ToGetTagsFilterAndOutputWithContext(context.Context) GetTagsFilterAndOutput
}

type GetTagsFilterAndArgs struct {
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategory GetTagsFilterAndCostCategoryPtrInput `pulumi:"costCategory"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimension GetTagsFilterAndDimensionPtrInput `pulumi:"dimension"`
	// Tags that match your request.
	Tags GetTagsFilterAndTagsPtrInput `pulumi:"tags"`
}

func (GetTagsFilterAndArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterAnd)(nil)).Elem()
}

func (i GetTagsFilterAndArgs) ToGetTagsFilterAndOutput() GetTagsFilterAndOutput {
	return i.ToGetTagsFilterAndOutputWithContext(context.Background())
}

func (i GetTagsFilterAndArgs) ToGetTagsFilterAndOutputWithContext(ctx context.Context) GetTagsFilterAndOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterAndOutput)
}

// GetTagsFilterAndArrayInput is an input type that accepts GetTagsFilterAndArray and GetTagsFilterAndArrayOutput values.
// You can construct a concrete instance of `GetTagsFilterAndArrayInput` via:
//
//	GetTagsFilterAndArray{ GetTagsFilterAndArgs{...} }
type GetTagsFilterAndArrayInput interface {
	pulumi.Input

	ToGetTagsFilterAndArrayOutput() GetTagsFilterAndArrayOutput
	ToGetTagsFilterAndArrayOutputWithContext(context.Context) GetTagsFilterAndArrayOutput
}

type GetTagsFilterAndArray []GetTagsFilterAndInput

func (GetTagsFilterAndArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTagsFilterAnd)(nil)).Elem()
}

func (i GetTagsFilterAndArray) ToGetTagsFilterAndArrayOutput() GetTagsFilterAndArrayOutput {
	return i.ToGetTagsFilterAndArrayOutputWithContext(context.Background())
}

func (i GetTagsFilterAndArray) ToGetTagsFilterAndArrayOutputWithContext(ctx context.Context) GetTagsFilterAndArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterAndArrayOutput)
}

type GetTagsFilterAndOutput struct{ *pulumi.OutputState }

func (GetTagsFilterAndOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterAnd)(nil)).Elem()
}

func (o GetTagsFilterAndOutput) ToGetTagsFilterAndOutput() GetTagsFilterAndOutput {
	return o
}

func (o GetTagsFilterAndOutput) ToGetTagsFilterAndOutputWithContext(ctx context.Context) GetTagsFilterAndOutput {
	return o
}

// Configuration block for the filter that's based on `CostCategory` values. See below.
func (o GetTagsFilterAndOutput) CostCategory() GetTagsFilterAndCostCategoryPtrOutput {
	return o.ApplyT(func(v GetTagsFilterAnd) *GetTagsFilterAndCostCategory { return v.CostCategory }).(GetTagsFilterAndCostCategoryPtrOutput)
}

// Configuration block for the specific `Dimension` to use for `Expression`. See below.
func (o GetTagsFilterAndOutput) Dimension() GetTagsFilterAndDimensionPtrOutput {
	return o.ApplyT(func(v GetTagsFilterAnd) *GetTagsFilterAndDimension { return v.Dimension }).(GetTagsFilterAndDimensionPtrOutput)
}

// Tags that match your request.
func (o GetTagsFilterAndOutput) Tags() GetTagsFilterAndTagsPtrOutput {
	return o.ApplyT(func(v GetTagsFilterAnd) *GetTagsFilterAndTags { return v.Tags }).(GetTagsFilterAndTagsPtrOutput)
}

type GetTagsFilterAndArrayOutput struct{ *pulumi.OutputState }

func (GetTagsFilterAndArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTagsFilterAnd)(nil)).Elem()
}

func (o GetTagsFilterAndArrayOutput) ToGetTagsFilterAndArrayOutput() GetTagsFilterAndArrayOutput {
	return o
}

func (o GetTagsFilterAndArrayOutput) ToGetTagsFilterAndArrayOutputWithContext(ctx context.Context) GetTagsFilterAndArrayOutput {
	return o
}

func (o GetTagsFilterAndArrayOutput) Index(i pulumi.IntInput) GetTagsFilterAndOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTagsFilterAnd {
		return vs[0].([]GetTagsFilterAnd)[vs[1].(int)]
	}).(GetTagsFilterAndOutput)
}

type GetTagsFilterAndCostCategory struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

// GetTagsFilterAndCostCategoryInput is an input type that accepts GetTagsFilterAndCostCategoryArgs and GetTagsFilterAndCostCategoryOutput values.
// You can construct a concrete instance of `GetTagsFilterAndCostCategoryInput` via:
//
//	GetTagsFilterAndCostCategoryArgs{...}
type GetTagsFilterAndCostCategoryInput interface {
	pulumi.Input

	ToGetTagsFilterAndCostCategoryOutput() GetTagsFilterAndCostCategoryOutput
	ToGetTagsFilterAndCostCategoryOutputWithContext(context.Context) GetTagsFilterAndCostCategoryOutput
}

type GetTagsFilterAndCostCategoryArgs struct {
	// Unique name of the Cost Category.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetTagsFilterAndCostCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterAndCostCategory)(nil)).Elem()
}

func (i GetTagsFilterAndCostCategoryArgs) ToGetTagsFilterAndCostCategoryOutput() GetTagsFilterAndCostCategoryOutput {
	return i.ToGetTagsFilterAndCostCategoryOutputWithContext(context.Background())
}

func (i GetTagsFilterAndCostCategoryArgs) ToGetTagsFilterAndCostCategoryOutputWithContext(ctx context.Context) GetTagsFilterAndCostCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterAndCostCategoryOutput)
}

func (i GetTagsFilterAndCostCategoryArgs) ToGetTagsFilterAndCostCategoryPtrOutput() GetTagsFilterAndCostCategoryPtrOutput {
	return i.ToGetTagsFilterAndCostCategoryPtrOutputWithContext(context.Background())
}

func (i GetTagsFilterAndCostCategoryArgs) ToGetTagsFilterAndCostCategoryPtrOutputWithContext(ctx context.Context) GetTagsFilterAndCostCategoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterAndCostCategoryOutput).ToGetTagsFilterAndCostCategoryPtrOutputWithContext(ctx)
}

// GetTagsFilterAndCostCategoryPtrInput is an input type that accepts GetTagsFilterAndCostCategoryArgs, GetTagsFilterAndCostCategoryPtr and GetTagsFilterAndCostCategoryPtrOutput values.
// You can construct a concrete instance of `GetTagsFilterAndCostCategoryPtrInput` via:
//
//	        GetTagsFilterAndCostCategoryArgs{...}
//
//	or:
//
//	        nil
type GetTagsFilterAndCostCategoryPtrInput interface {
	pulumi.Input

	ToGetTagsFilterAndCostCategoryPtrOutput() GetTagsFilterAndCostCategoryPtrOutput
	ToGetTagsFilterAndCostCategoryPtrOutputWithContext(context.Context) GetTagsFilterAndCostCategoryPtrOutput
}

type getTagsFilterAndCostCategoryPtrType GetTagsFilterAndCostCategoryArgs

func GetTagsFilterAndCostCategoryPtr(v *GetTagsFilterAndCostCategoryArgs) GetTagsFilterAndCostCategoryPtrInput {
	return (*getTagsFilterAndCostCategoryPtrType)(v)
}

func (*getTagsFilterAndCostCategoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTagsFilterAndCostCategory)(nil)).Elem()
}

func (i *getTagsFilterAndCostCategoryPtrType) ToGetTagsFilterAndCostCategoryPtrOutput() GetTagsFilterAndCostCategoryPtrOutput {
	return i.ToGetTagsFilterAndCostCategoryPtrOutputWithContext(context.Background())
}

func (i *getTagsFilterAndCostCategoryPtrType) ToGetTagsFilterAndCostCategoryPtrOutputWithContext(ctx context.Context) GetTagsFilterAndCostCategoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterAndCostCategoryPtrOutput)
}

type GetTagsFilterAndCostCategoryOutput struct{ *pulumi.OutputState }

func (GetTagsFilterAndCostCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterAndCostCategory)(nil)).Elem()
}

func (o GetTagsFilterAndCostCategoryOutput) ToGetTagsFilterAndCostCategoryOutput() GetTagsFilterAndCostCategoryOutput {
	return o
}

func (o GetTagsFilterAndCostCategoryOutput) ToGetTagsFilterAndCostCategoryOutputWithContext(ctx context.Context) GetTagsFilterAndCostCategoryOutput {
	return o
}

func (o GetTagsFilterAndCostCategoryOutput) ToGetTagsFilterAndCostCategoryPtrOutput() GetTagsFilterAndCostCategoryPtrOutput {
	return o.ToGetTagsFilterAndCostCategoryPtrOutputWithContext(context.Background())
}

func (o GetTagsFilterAndCostCategoryOutput) ToGetTagsFilterAndCostCategoryPtrOutputWithContext(ctx context.Context) GetTagsFilterAndCostCategoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetTagsFilterAndCostCategory) *GetTagsFilterAndCostCategory {
		return &v
	}).(GetTagsFilterAndCostCategoryPtrOutput)
}

// Unique name of the Cost Category.
func (o GetTagsFilterAndCostCategoryOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTagsFilterAndCostCategory) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetTagsFilterAndCostCategoryOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTagsFilterAndCostCategory) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o GetTagsFilterAndCostCategoryOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTagsFilterAndCostCategory) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetTagsFilterAndCostCategoryPtrOutput struct{ *pulumi.OutputState }

func (GetTagsFilterAndCostCategoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTagsFilterAndCostCategory)(nil)).Elem()
}

func (o GetTagsFilterAndCostCategoryPtrOutput) ToGetTagsFilterAndCostCategoryPtrOutput() GetTagsFilterAndCostCategoryPtrOutput {
	return o
}

func (o GetTagsFilterAndCostCategoryPtrOutput) ToGetTagsFilterAndCostCategoryPtrOutputWithContext(ctx context.Context) GetTagsFilterAndCostCategoryPtrOutput {
	return o
}

func (o GetTagsFilterAndCostCategoryPtrOutput) Elem() GetTagsFilterAndCostCategoryOutput {
	return o.ApplyT(func(v *GetTagsFilterAndCostCategory) GetTagsFilterAndCostCategory {
		if v != nil {
			return *v
		}
		var ret GetTagsFilterAndCostCategory
		return ret
	}).(GetTagsFilterAndCostCategoryOutput)
}

// Unique name of the Cost Category.
func (o GetTagsFilterAndCostCategoryPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetTagsFilterAndCostCategory) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetTagsFilterAndCostCategoryPtrOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetTagsFilterAndCostCategory) []string {
		if v == nil {
			return nil
		}
		return v.MatchOptions
	}).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o GetTagsFilterAndCostCategoryPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetTagsFilterAndCostCategory) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type GetTagsFilterAndDimension struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

// GetTagsFilterAndDimensionInput is an input type that accepts GetTagsFilterAndDimensionArgs and GetTagsFilterAndDimensionOutput values.
// You can construct a concrete instance of `GetTagsFilterAndDimensionInput` via:
//
//	GetTagsFilterAndDimensionArgs{...}
type GetTagsFilterAndDimensionInput interface {
	pulumi.Input

	ToGetTagsFilterAndDimensionOutput() GetTagsFilterAndDimensionOutput
	ToGetTagsFilterAndDimensionOutputWithContext(context.Context) GetTagsFilterAndDimensionOutput
}

type GetTagsFilterAndDimensionArgs struct {
	// Unique name of the Cost Category.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetTagsFilterAndDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterAndDimension)(nil)).Elem()
}

func (i GetTagsFilterAndDimensionArgs) ToGetTagsFilterAndDimensionOutput() GetTagsFilterAndDimensionOutput {
	return i.ToGetTagsFilterAndDimensionOutputWithContext(context.Background())
}

func (i GetTagsFilterAndDimensionArgs) ToGetTagsFilterAndDimensionOutputWithContext(ctx context.Context) GetTagsFilterAndDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterAndDimensionOutput)
}

func (i GetTagsFilterAndDimensionArgs) ToGetTagsFilterAndDimensionPtrOutput() GetTagsFilterAndDimensionPtrOutput {
	return i.ToGetTagsFilterAndDimensionPtrOutputWithContext(context.Background())
}

func (i GetTagsFilterAndDimensionArgs) ToGetTagsFilterAndDimensionPtrOutputWithContext(ctx context.Context) GetTagsFilterAndDimensionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterAndDimensionOutput).ToGetTagsFilterAndDimensionPtrOutputWithContext(ctx)
}

// GetTagsFilterAndDimensionPtrInput is an input type that accepts GetTagsFilterAndDimensionArgs, GetTagsFilterAndDimensionPtr and GetTagsFilterAndDimensionPtrOutput values.
// You can construct a concrete instance of `GetTagsFilterAndDimensionPtrInput` via:
//
//	        GetTagsFilterAndDimensionArgs{...}
//
//	or:
//
//	        nil
type GetTagsFilterAndDimensionPtrInput interface {
	pulumi.Input

	ToGetTagsFilterAndDimensionPtrOutput() GetTagsFilterAndDimensionPtrOutput
	ToGetTagsFilterAndDimensionPtrOutputWithContext(context.Context) GetTagsFilterAndDimensionPtrOutput
}

type getTagsFilterAndDimensionPtrType GetTagsFilterAndDimensionArgs

func GetTagsFilterAndDimensionPtr(v *GetTagsFilterAndDimensionArgs) GetTagsFilterAndDimensionPtrInput {
	return (*getTagsFilterAndDimensionPtrType)(v)
}

func (*getTagsFilterAndDimensionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTagsFilterAndDimension)(nil)).Elem()
}

func (i *getTagsFilterAndDimensionPtrType) ToGetTagsFilterAndDimensionPtrOutput() GetTagsFilterAndDimensionPtrOutput {
	return i.ToGetTagsFilterAndDimensionPtrOutputWithContext(context.Background())
}

func (i *getTagsFilterAndDimensionPtrType) ToGetTagsFilterAndDimensionPtrOutputWithContext(ctx context.Context) GetTagsFilterAndDimensionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterAndDimensionPtrOutput)
}

type GetTagsFilterAndDimensionOutput struct{ *pulumi.OutputState }

func (GetTagsFilterAndDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterAndDimension)(nil)).Elem()
}

func (o GetTagsFilterAndDimensionOutput) ToGetTagsFilterAndDimensionOutput() GetTagsFilterAndDimensionOutput {
	return o
}

func (o GetTagsFilterAndDimensionOutput) ToGetTagsFilterAndDimensionOutputWithContext(ctx context.Context) GetTagsFilterAndDimensionOutput {
	return o
}

func (o GetTagsFilterAndDimensionOutput) ToGetTagsFilterAndDimensionPtrOutput() GetTagsFilterAndDimensionPtrOutput {
	return o.ToGetTagsFilterAndDimensionPtrOutputWithContext(context.Background())
}

func (o GetTagsFilterAndDimensionOutput) ToGetTagsFilterAndDimensionPtrOutputWithContext(ctx context.Context) GetTagsFilterAndDimensionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetTagsFilterAndDimension) *GetTagsFilterAndDimension {
		return &v
	}).(GetTagsFilterAndDimensionPtrOutput)
}

// Unique name of the Cost Category.
func (o GetTagsFilterAndDimensionOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTagsFilterAndDimension) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetTagsFilterAndDimensionOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTagsFilterAndDimension) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o GetTagsFilterAndDimensionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTagsFilterAndDimension) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetTagsFilterAndDimensionPtrOutput struct{ *pulumi.OutputState }

func (GetTagsFilterAndDimensionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTagsFilterAndDimension)(nil)).Elem()
}

func (o GetTagsFilterAndDimensionPtrOutput) ToGetTagsFilterAndDimensionPtrOutput() GetTagsFilterAndDimensionPtrOutput {
	return o
}

func (o GetTagsFilterAndDimensionPtrOutput) ToGetTagsFilterAndDimensionPtrOutputWithContext(ctx context.Context) GetTagsFilterAndDimensionPtrOutput {
	return o
}

func (o GetTagsFilterAndDimensionPtrOutput) Elem() GetTagsFilterAndDimensionOutput {
	return o.ApplyT(func(v *GetTagsFilterAndDimension) GetTagsFilterAndDimension {
		if v != nil {
			return *v
		}
		var ret GetTagsFilterAndDimension
		return ret
	}).(GetTagsFilterAndDimensionOutput)
}

// Unique name of the Cost Category.
func (o GetTagsFilterAndDimensionPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetTagsFilterAndDimension) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetTagsFilterAndDimensionPtrOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetTagsFilterAndDimension) []string {
		if v == nil {
			return nil
		}
		return v.MatchOptions
	}).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o GetTagsFilterAndDimensionPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetTagsFilterAndDimension) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type GetTagsFilterAndTags struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

// GetTagsFilterAndTagsInput is an input type that accepts GetTagsFilterAndTagsArgs and GetTagsFilterAndTagsOutput values.
// You can construct a concrete instance of `GetTagsFilterAndTagsInput` via:
//
//	GetTagsFilterAndTagsArgs{...}
type GetTagsFilterAndTagsInput interface {
	pulumi.Input

	ToGetTagsFilterAndTagsOutput() GetTagsFilterAndTagsOutput
	ToGetTagsFilterAndTagsOutputWithContext(context.Context) GetTagsFilterAndTagsOutput
}

type GetTagsFilterAndTagsArgs struct {
	// Unique name of the Cost Category.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetTagsFilterAndTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterAndTags)(nil)).Elem()
}

func (i GetTagsFilterAndTagsArgs) ToGetTagsFilterAndTagsOutput() GetTagsFilterAndTagsOutput {
	return i.ToGetTagsFilterAndTagsOutputWithContext(context.Background())
}

func (i GetTagsFilterAndTagsArgs) ToGetTagsFilterAndTagsOutputWithContext(ctx context.Context) GetTagsFilterAndTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterAndTagsOutput)
}

func (i GetTagsFilterAndTagsArgs) ToGetTagsFilterAndTagsPtrOutput() GetTagsFilterAndTagsPtrOutput {
	return i.ToGetTagsFilterAndTagsPtrOutputWithContext(context.Background())
}

func (i GetTagsFilterAndTagsArgs) ToGetTagsFilterAndTagsPtrOutputWithContext(ctx context.Context) GetTagsFilterAndTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterAndTagsOutput).ToGetTagsFilterAndTagsPtrOutputWithContext(ctx)
}

// GetTagsFilterAndTagsPtrInput is an input type that accepts GetTagsFilterAndTagsArgs, GetTagsFilterAndTagsPtr and GetTagsFilterAndTagsPtrOutput values.
// You can construct a concrete instance of `GetTagsFilterAndTagsPtrInput` via:
//
//	        GetTagsFilterAndTagsArgs{...}
//
//	or:
//
//	        nil
type GetTagsFilterAndTagsPtrInput interface {
	pulumi.Input

	ToGetTagsFilterAndTagsPtrOutput() GetTagsFilterAndTagsPtrOutput
	ToGetTagsFilterAndTagsPtrOutputWithContext(context.Context) GetTagsFilterAndTagsPtrOutput
}

type getTagsFilterAndTagsPtrType GetTagsFilterAndTagsArgs

func GetTagsFilterAndTagsPtr(v *GetTagsFilterAndTagsArgs) GetTagsFilterAndTagsPtrInput {
	return (*getTagsFilterAndTagsPtrType)(v)
}

func (*getTagsFilterAndTagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTagsFilterAndTags)(nil)).Elem()
}

func (i *getTagsFilterAndTagsPtrType) ToGetTagsFilterAndTagsPtrOutput() GetTagsFilterAndTagsPtrOutput {
	return i.ToGetTagsFilterAndTagsPtrOutputWithContext(context.Background())
}

func (i *getTagsFilterAndTagsPtrType) ToGetTagsFilterAndTagsPtrOutputWithContext(ctx context.Context) GetTagsFilterAndTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterAndTagsPtrOutput)
}

type GetTagsFilterAndTagsOutput struct{ *pulumi.OutputState }

func (GetTagsFilterAndTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterAndTags)(nil)).Elem()
}

func (o GetTagsFilterAndTagsOutput) ToGetTagsFilterAndTagsOutput() GetTagsFilterAndTagsOutput {
	return o
}

func (o GetTagsFilterAndTagsOutput) ToGetTagsFilterAndTagsOutputWithContext(ctx context.Context) GetTagsFilterAndTagsOutput {
	return o
}

func (o GetTagsFilterAndTagsOutput) ToGetTagsFilterAndTagsPtrOutput() GetTagsFilterAndTagsPtrOutput {
	return o.ToGetTagsFilterAndTagsPtrOutputWithContext(context.Background())
}

func (o GetTagsFilterAndTagsOutput) ToGetTagsFilterAndTagsPtrOutputWithContext(ctx context.Context) GetTagsFilterAndTagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetTagsFilterAndTags) *GetTagsFilterAndTags {
		return &v
	}).(GetTagsFilterAndTagsPtrOutput)
}

// Unique name of the Cost Category.
func (o GetTagsFilterAndTagsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTagsFilterAndTags) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetTagsFilterAndTagsOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTagsFilterAndTags) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o GetTagsFilterAndTagsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTagsFilterAndTags) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetTagsFilterAndTagsPtrOutput struct{ *pulumi.OutputState }

func (GetTagsFilterAndTagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTagsFilterAndTags)(nil)).Elem()
}

func (o GetTagsFilterAndTagsPtrOutput) ToGetTagsFilterAndTagsPtrOutput() GetTagsFilterAndTagsPtrOutput {
	return o
}

func (o GetTagsFilterAndTagsPtrOutput) ToGetTagsFilterAndTagsPtrOutputWithContext(ctx context.Context) GetTagsFilterAndTagsPtrOutput {
	return o
}

func (o GetTagsFilterAndTagsPtrOutput) Elem() GetTagsFilterAndTagsOutput {
	return o.ApplyT(func(v *GetTagsFilterAndTags) GetTagsFilterAndTags {
		if v != nil {
			return *v
		}
		var ret GetTagsFilterAndTags
		return ret
	}).(GetTagsFilterAndTagsOutput)
}

// Unique name of the Cost Category.
func (o GetTagsFilterAndTagsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetTagsFilterAndTags) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetTagsFilterAndTagsPtrOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetTagsFilterAndTags) []string {
		if v == nil {
			return nil
		}
		return v.MatchOptions
	}).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o GetTagsFilterAndTagsPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetTagsFilterAndTags) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type GetTagsFilterCostCategory struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

// GetTagsFilterCostCategoryInput is an input type that accepts GetTagsFilterCostCategoryArgs and GetTagsFilterCostCategoryOutput values.
// You can construct a concrete instance of `GetTagsFilterCostCategoryInput` via:
//
//	GetTagsFilterCostCategoryArgs{...}
type GetTagsFilterCostCategoryInput interface {
	pulumi.Input

	ToGetTagsFilterCostCategoryOutput() GetTagsFilterCostCategoryOutput
	ToGetTagsFilterCostCategoryOutputWithContext(context.Context) GetTagsFilterCostCategoryOutput
}

type GetTagsFilterCostCategoryArgs struct {
	// Unique name of the Cost Category.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetTagsFilterCostCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterCostCategory)(nil)).Elem()
}

func (i GetTagsFilterCostCategoryArgs) ToGetTagsFilterCostCategoryOutput() GetTagsFilterCostCategoryOutput {
	return i.ToGetTagsFilterCostCategoryOutputWithContext(context.Background())
}

func (i GetTagsFilterCostCategoryArgs) ToGetTagsFilterCostCategoryOutputWithContext(ctx context.Context) GetTagsFilterCostCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterCostCategoryOutput)
}

func (i GetTagsFilterCostCategoryArgs) ToGetTagsFilterCostCategoryPtrOutput() GetTagsFilterCostCategoryPtrOutput {
	return i.ToGetTagsFilterCostCategoryPtrOutputWithContext(context.Background())
}

func (i GetTagsFilterCostCategoryArgs) ToGetTagsFilterCostCategoryPtrOutputWithContext(ctx context.Context) GetTagsFilterCostCategoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterCostCategoryOutput).ToGetTagsFilterCostCategoryPtrOutputWithContext(ctx)
}

// GetTagsFilterCostCategoryPtrInput is an input type that accepts GetTagsFilterCostCategoryArgs, GetTagsFilterCostCategoryPtr and GetTagsFilterCostCategoryPtrOutput values.
// You can construct a concrete instance of `GetTagsFilterCostCategoryPtrInput` via:
//
//	        GetTagsFilterCostCategoryArgs{...}
//
//	or:
//
//	        nil
type GetTagsFilterCostCategoryPtrInput interface {
	pulumi.Input

	ToGetTagsFilterCostCategoryPtrOutput() GetTagsFilterCostCategoryPtrOutput
	ToGetTagsFilterCostCategoryPtrOutputWithContext(context.Context) GetTagsFilterCostCategoryPtrOutput
}

type getTagsFilterCostCategoryPtrType GetTagsFilterCostCategoryArgs

func GetTagsFilterCostCategoryPtr(v *GetTagsFilterCostCategoryArgs) GetTagsFilterCostCategoryPtrInput {
	return (*getTagsFilterCostCategoryPtrType)(v)
}

func (*getTagsFilterCostCategoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTagsFilterCostCategory)(nil)).Elem()
}

func (i *getTagsFilterCostCategoryPtrType) ToGetTagsFilterCostCategoryPtrOutput() GetTagsFilterCostCategoryPtrOutput {
	return i.ToGetTagsFilterCostCategoryPtrOutputWithContext(context.Background())
}

func (i *getTagsFilterCostCategoryPtrType) ToGetTagsFilterCostCategoryPtrOutputWithContext(ctx context.Context) GetTagsFilterCostCategoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterCostCategoryPtrOutput)
}

type GetTagsFilterCostCategoryOutput struct{ *pulumi.OutputState }

func (GetTagsFilterCostCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterCostCategory)(nil)).Elem()
}

func (o GetTagsFilterCostCategoryOutput) ToGetTagsFilterCostCategoryOutput() GetTagsFilterCostCategoryOutput {
	return o
}

func (o GetTagsFilterCostCategoryOutput) ToGetTagsFilterCostCategoryOutputWithContext(ctx context.Context) GetTagsFilterCostCategoryOutput {
	return o
}

func (o GetTagsFilterCostCategoryOutput) ToGetTagsFilterCostCategoryPtrOutput() GetTagsFilterCostCategoryPtrOutput {
	return o.ToGetTagsFilterCostCategoryPtrOutputWithContext(context.Background())
}

func (o GetTagsFilterCostCategoryOutput) ToGetTagsFilterCostCategoryPtrOutputWithContext(ctx context.Context) GetTagsFilterCostCategoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetTagsFilterCostCategory) *GetTagsFilterCostCategory {
		return &v
	}).(GetTagsFilterCostCategoryPtrOutput)
}

// Unique name of the Cost Category.
func (o GetTagsFilterCostCategoryOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTagsFilterCostCategory) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetTagsFilterCostCategoryOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTagsFilterCostCategory) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o GetTagsFilterCostCategoryOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTagsFilterCostCategory) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetTagsFilterCostCategoryPtrOutput struct{ *pulumi.OutputState }

func (GetTagsFilterCostCategoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTagsFilterCostCategory)(nil)).Elem()
}

func (o GetTagsFilterCostCategoryPtrOutput) ToGetTagsFilterCostCategoryPtrOutput() GetTagsFilterCostCategoryPtrOutput {
	return o
}

func (o GetTagsFilterCostCategoryPtrOutput) ToGetTagsFilterCostCategoryPtrOutputWithContext(ctx context.Context) GetTagsFilterCostCategoryPtrOutput {
	return o
}

func (o GetTagsFilterCostCategoryPtrOutput) Elem() GetTagsFilterCostCategoryOutput {
	return o.ApplyT(func(v *GetTagsFilterCostCategory) GetTagsFilterCostCategory {
		if v != nil {
			return *v
		}
		var ret GetTagsFilterCostCategory
		return ret
	}).(GetTagsFilterCostCategoryOutput)
}

// Unique name of the Cost Category.
func (o GetTagsFilterCostCategoryPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetTagsFilterCostCategory) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetTagsFilterCostCategoryPtrOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetTagsFilterCostCategory) []string {
		if v == nil {
			return nil
		}
		return v.MatchOptions
	}).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o GetTagsFilterCostCategoryPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetTagsFilterCostCategory) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type GetTagsFilterDimension struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

// GetTagsFilterDimensionInput is an input type that accepts GetTagsFilterDimensionArgs and GetTagsFilterDimensionOutput values.
// You can construct a concrete instance of `GetTagsFilterDimensionInput` via:
//
//	GetTagsFilterDimensionArgs{...}
type GetTagsFilterDimensionInput interface {
	pulumi.Input

	ToGetTagsFilterDimensionOutput() GetTagsFilterDimensionOutput
	ToGetTagsFilterDimensionOutputWithContext(context.Context) GetTagsFilterDimensionOutput
}

type GetTagsFilterDimensionArgs struct {
	// Unique name of the Cost Category.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetTagsFilterDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterDimension)(nil)).Elem()
}

func (i GetTagsFilterDimensionArgs) ToGetTagsFilterDimensionOutput() GetTagsFilterDimensionOutput {
	return i.ToGetTagsFilterDimensionOutputWithContext(context.Background())
}

func (i GetTagsFilterDimensionArgs) ToGetTagsFilterDimensionOutputWithContext(ctx context.Context) GetTagsFilterDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterDimensionOutput)
}

func (i GetTagsFilterDimensionArgs) ToGetTagsFilterDimensionPtrOutput() GetTagsFilterDimensionPtrOutput {
	return i.ToGetTagsFilterDimensionPtrOutputWithContext(context.Background())
}

func (i GetTagsFilterDimensionArgs) ToGetTagsFilterDimensionPtrOutputWithContext(ctx context.Context) GetTagsFilterDimensionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterDimensionOutput).ToGetTagsFilterDimensionPtrOutputWithContext(ctx)
}

// GetTagsFilterDimensionPtrInput is an input type that accepts GetTagsFilterDimensionArgs, GetTagsFilterDimensionPtr and GetTagsFilterDimensionPtrOutput values.
// You can construct a concrete instance of `GetTagsFilterDimensionPtrInput` via:
//
//	        GetTagsFilterDimensionArgs{...}
//
//	or:
//
//	        nil
type GetTagsFilterDimensionPtrInput interface {
	pulumi.Input

	ToGetTagsFilterDimensionPtrOutput() GetTagsFilterDimensionPtrOutput
	ToGetTagsFilterDimensionPtrOutputWithContext(context.Context) GetTagsFilterDimensionPtrOutput
}

type getTagsFilterDimensionPtrType GetTagsFilterDimensionArgs

func GetTagsFilterDimensionPtr(v *GetTagsFilterDimensionArgs) GetTagsFilterDimensionPtrInput {
	return (*getTagsFilterDimensionPtrType)(v)
}

func (*getTagsFilterDimensionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTagsFilterDimension)(nil)).Elem()
}

func (i *getTagsFilterDimensionPtrType) ToGetTagsFilterDimensionPtrOutput() GetTagsFilterDimensionPtrOutput {
	return i.ToGetTagsFilterDimensionPtrOutputWithContext(context.Background())
}

func (i *getTagsFilterDimensionPtrType) ToGetTagsFilterDimensionPtrOutputWithContext(ctx context.Context) GetTagsFilterDimensionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterDimensionPtrOutput)
}

type GetTagsFilterDimensionOutput struct{ *pulumi.OutputState }

func (GetTagsFilterDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterDimension)(nil)).Elem()
}

func (o GetTagsFilterDimensionOutput) ToGetTagsFilterDimensionOutput() GetTagsFilterDimensionOutput {
	return o
}

func (o GetTagsFilterDimensionOutput) ToGetTagsFilterDimensionOutputWithContext(ctx context.Context) GetTagsFilterDimensionOutput {
	return o
}

func (o GetTagsFilterDimensionOutput) ToGetTagsFilterDimensionPtrOutput() GetTagsFilterDimensionPtrOutput {
	return o.ToGetTagsFilterDimensionPtrOutputWithContext(context.Background())
}

func (o GetTagsFilterDimensionOutput) ToGetTagsFilterDimensionPtrOutputWithContext(ctx context.Context) GetTagsFilterDimensionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetTagsFilterDimension) *GetTagsFilterDimension {
		return &v
	}).(GetTagsFilterDimensionPtrOutput)
}

// Unique name of the Cost Category.
func (o GetTagsFilterDimensionOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTagsFilterDimension) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetTagsFilterDimensionOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTagsFilterDimension) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o GetTagsFilterDimensionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTagsFilterDimension) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetTagsFilterDimensionPtrOutput struct{ *pulumi.OutputState }

func (GetTagsFilterDimensionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTagsFilterDimension)(nil)).Elem()
}

func (o GetTagsFilterDimensionPtrOutput) ToGetTagsFilterDimensionPtrOutput() GetTagsFilterDimensionPtrOutput {
	return o
}

func (o GetTagsFilterDimensionPtrOutput) ToGetTagsFilterDimensionPtrOutputWithContext(ctx context.Context) GetTagsFilterDimensionPtrOutput {
	return o
}

func (o GetTagsFilterDimensionPtrOutput) Elem() GetTagsFilterDimensionOutput {
	return o.ApplyT(func(v *GetTagsFilterDimension) GetTagsFilterDimension {
		if v != nil {
			return *v
		}
		var ret GetTagsFilterDimension
		return ret
	}).(GetTagsFilterDimensionOutput)
}

// Unique name of the Cost Category.
func (o GetTagsFilterDimensionPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetTagsFilterDimension) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetTagsFilterDimensionPtrOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetTagsFilterDimension) []string {
		if v == nil {
			return nil
		}
		return v.MatchOptions
	}).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o GetTagsFilterDimensionPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetTagsFilterDimension) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type GetTagsFilterNot struct {
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategory *GetTagsFilterNotCostCategory `pulumi:"costCategory"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimension *GetTagsFilterNotDimension `pulumi:"dimension"`
	// Tags that match your request.
	Tags *GetTagsFilterNotTags `pulumi:"tags"`
}

// GetTagsFilterNotInput is an input type that accepts GetTagsFilterNotArgs and GetTagsFilterNotOutput values.
// You can construct a concrete instance of `GetTagsFilterNotInput` via:
//
//	GetTagsFilterNotArgs{...}
type GetTagsFilterNotInput interface {
	pulumi.Input

	ToGetTagsFilterNotOutput() GetTagsFilterNotOutput
	ToGetTagsFilterNotOutputWithContext(context.Context) GetTagsFilterNotOutput
}

type GetTagsFilterNotArgs struct {
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategory GetTagsFilterNotCostCategoryPtrInput `pulumi:"costCategory"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimension GetTagsFilterNotDimensionPtrInput `pulumi:"dimension"`
	// Tags that match your request.
	Tags GetTagsFilterNotTagsPtrInput `pulumi:"tags"`
}

func (GetTagsFilterNotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterNot)(nil)).Elem()
}

func (i GetTagsFilterNotArgs) ToGetTagsFilterNotOutput() GetTagsFilterNotOutput {
	return i.ToGetTagsFilterNotOutputWithContext(context.Background())
}

func (i GetTagsFilterNotArgs) ToGetTagsFilterNotOutputWithContext(ctx context.Context) GetTagsFilterNotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterNotOutput)
}

func (i GetTagsFilterNotArgs) ToGetTagsFilterNotPtrOutput() GetTagsFilterNotPtrOutput {
	return i.ToGetTagsFilterNotPtrOutputWithContext(context.Background())
}

func (i GetTagsFilterNotArgs) ToGetTagsFilterNotPtrOutputWithContext(ctx context.Context) GetTagsFilterNotPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterNotOutput).ToGetTagsFilterNotPtrOutputWithContext(ctx)
}

// GetTagsFilterNotPtrInput is an input type that accepts GetTagsFilterNotArgs, GetTagsFilterNotPtr and GetTagsFilterNotPtrOutput values.
// You can construct a concrete instance of `GetTagsFilterNotPtrInput` via:
//
//	        GetTagsFilterNotArgs{...}
//
//	or:
//
//	        nil
type GetTagsFilterNotPtrInput interface {
	pulumi.Input

	ToGetTagsFilterNotPtrOutput() GetTagsFilterNotPtrOutput
	ToGetTagsFilterNotPtrOutputWithContext(context.Context) GetTagsFilterNotPtrOutput
}

type getTagsFilterNotPtrType GetTagsFilterNotArgs

func GetTagsFilterNotPtr(v *GetTagsFilterNotArgs) GetTagsFilterNotPtrInput {
	return (*getTagsFilterNotPtrType)(v)
}

func (*getTagsFilterNotPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTagsFilterNot)(nil)).Elem()
}

func (i *getTagsFilterNotPtrType) ToGetTagsFilterNotPtrOutput() GetTagsFilterNotPtrOutput {
	return i.ToGetTagsFilterNotPtrOutputWithContext(context.Background())
}

func (i *getTagsFilterNotPtrType) ToGetTagsFilterNotPtrOutputWithContext(ctx context.Context) GetTagsFilterNotPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterNotPtrOutput)
}

type GetTagsFilterNotOutput struct{ *pulumi.OutputState }

func (GetTagsFilterNotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterNot)(nil)).Elem()
}

func (o GetTagsFilterNotOutput) ToGetTagsFilterNotOutput() GetTagsFilterNotOutput {
	return o
}

func (o GetTagsFilterNotOutput) ToGetTagsFilterNotOutputWithContext(ctx context.Context) GetTagsFilterNotOutput {
	return o
}

func (o GetTagsFilterNotOutput) ToGetTagsFilterNotPtrOutput() GetTagsFilterNotPtrOutput {
	return o.ToGetTagsFilterNotPtrOutputWithContext(context.Background())
}

func (o GetTagsFilterNotOutput) ToGetTagsFilterNotPtrOutputWithContext(ctx context.Context) GetTagsFilterNotPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetTagsFilterNot) *GetTagsFilterNot {
		return &v
	}).(GetTagsFilterNotPtrOutput)
}

// Configuration block for the filter that's based on `CostCategory` values. See below.
func (o GetTagsFilterNotOutput) CostCategory() GetTagsFilterNotCostCategoryPtrOutput {
	return o.ApplyT(func(v GetTagsFilterNot) *GetTagsFilterNotCostCategory { return v.CostCategory }).(GetTagsFilterNotCostCategoryPtrOutput)
}

// Configuration block for the specific `Dimension` to use for `Expression`. See below.
func (o GetTagsFilterNotOutput) Dimension() GetTagsFilterNotDimensionPtrOutput {
	return o.ApplyT(func(v GetTagsFilterNot) *GetTagsFilterNotDimension { return v.Dimension }).(GetTagsFilterNotDimensionPtrOutput)
}

// Tags that match your request.
func (o GetTagsFilterNotOutput) Tags() GetTagsFilterNotTagsPtrOutput {
	return o.ApplyT(func(v GetTagsFilterNot) *GetTagsFilterNotTags { return v.Tags }).(GetTagsFilterNotTagsPtrOutput)
}

type GetTagsFilterNotPtrOutput struct{ *pulumi.OutputState }

func (GetTagsFilterNotPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTagsFilterNot)(nil)).Elem()
}

func (o GetTagsFilterNotPtrOutput) ToGetTagsFilterNotPtrOutput() GetTagsFilterNotPtrOutput {
	return o
}

func (o GetTagsFilterNotPtrOutput) ToGetTagsFilterNotPtrOutputWithContext(ctx context.Context) GetTagsFilterNotPtrOutput {
	return o
}

func (o GetTagsFilterNotPtrOutput) Elem() GetTagsFilterNotOutput {
	return o.ApplyT(func(v *GetTagsFilterNot) GetTagsFilterNot {
		if v != nil {
			return *v
		}
		var ret GetTagsFilterNot
		return ret
	}).(GetTagsFilterNotOutput)
}

// Configuration block for the filter that's based on `CostCategory` values. See below.
func (o GetTagsFilterNotPtrOutput) CostCategory() GetTagsFilterNotCostCategoryPtrOutput {
	return o.ApplyT(func(v *GetTagsFilterNot) *GetTagsFilterNotCostCategory {
		if v == nil {
			return nil
		}
		return v.CostCategory
	}).(GetTagsFilterNotCostCategoryPtrOutput)
}

// Configuration block for the specific `Dimension` to use for `Expression`. See below.
func (o GetTagsFilterNotPtrOutput) Dimension() GetTagsFilterNotDimensionPtrOutput {
	return o.ApplyT(func(v *GetTagsFilterNot) *GetTagsFilterNotDimension {
		if v == nil {
			return nil
		}
		return v.Dimension
	}).(GetTagsFilterNotDimensionPtrOutput)
}

// Tags that match your request.
func (o GetTagsFilterNotPtrOutput) Tags() GetTagsFilterNotTagsPtrOutput {
	return o.ApplyT(func(v *GetTagsFilterNot) *GetTagsFilterNotTags {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(GetTagsFilterNotTagsPtrOutput)
}

type GetTagsFilterNotCostCategory struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

// GetTagsFilterNotCostCategoryInput is an input type that accepts GetTagsFilterNotCostCategoryArgs and GetTagsFilterNotCostCategoryOutput values.
// You can construct a concrete instance of `GetTagsFilterNotCostCategoryInput` via:
//
//	GetTagsFilterNotCostCategoryArgs{...}
type GetTagsFilterNotCostCategoryInput interface {
	pulumi.Input

	ToGetTagsFilterNotCostCategoryOutput() GetTagsFilterNotCostCategoryOutput
	ToGetTagsFilterNotCostCategoryOutputWithContext(context.Context) GetTagsFilterNotCostCategoryOutput
}

type GetTagsFilterNotCostCategoryArgs struct {
	// Unique name of the Cost Category.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetTagsFilterNotCostCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterNotCostCategory)(nil)).Elem()
}

func (i GetTagsFilterNotCostCategoryArgs) ToGetTagsFilterNotCostCategoryOutput() GetTagsFilterNotCostCategoryOutput {
	return i.ToGetTagsFilterNotCostCategoryOutputWithContext(context.Background())
}

func (i GetTagsFilterNotCostCategoryArgs) ToGetTagsFilterNotCostCategoryOutputWithContext(ctx context.Context) GetTagsFilterNotCostCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterNotCostCategoryOutput)
}

func (i GetTagsFilterNotCostCategoryArgs) ToGetTagsFilterNotCostCategoryPtrOutput() GetTagsFilterNotCostCategoryPtrOutput {
	return i.ToGetTagsFilterNotCostCategoryPtrOutputWithContext(context.Background())
}

func (i GetTagsFilterNotCostCategoryArgs) ToGetTagsFilterNotCostCategoryPtrOutputWithContext(ctx context.Context) GetTagsFilterNotCostCategoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterNotCostCategoryOutput).ToGetTagsFilterNotCostCategoryPtrOutputWithContext(ctx)
}

// GetTagsFilterNotCostCategoryPtrInput is an input type that accepts GetTagsFilterNotCostCategoryArgs, GetTagsFilterNotCostCategoryPtr and GetTagsFilterNotCostCategoryPtrOutput values.
// You can construct a concrete instance of `GetTagsFilterNotCostCategoryPtrInput` via:
//
//	        GetTagsFilterNotCostCategoryArgs{...}
//
//	or:
//
//	        nil
type GetTagsFilterNotCostCategoryPtrInput interface {
	pulumi.Input

	ToGetTagsFilterNotCostCategoryPtrOutput() GetTagsFilterNotCostCategoryPtrOutput
	ToGetTagsFilterNotCostCategoryPtrOutputWithContext(context.Context) GetTagsFilterNotCostCategoryPtrOutput
}

type getTagsFilterNotCostCategoryPtrType GetTagsFilterNotCostCategoryArgs

func GetTagsFilterNotCostCategoryPtr(v *GetTagsFilterNotCostCategoryArgs) GetTagsFilterNotCostCategoryPtrInput {
	return (*getTagsFilterNotCostCategoryPtrType)(v)
}

func (*getTagsFilterNotCostCategoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTagsFilterNotCostCategory)(nil)).Elem()
}

func (i *getTagsFilterNotCostCategoryPtrType) ToGetTagsFilterNotCostCategoryPtrOutput() GetTagsFilterNotCostCategoryPtrOutput {
	return i.ToGetTagsFilterNotCostCategoryPtrOutputWithContext(context.Background())
}

func (i *getTagsFilterNotCostCategoryPtrType) ToGetTagsFilterNotCostCategoryPtrOutputWithContext(ctx context.Context) GetTagsFilterNotCostCategoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterNotCostCategoryPtrOutput)
}

type GetTagsFilterNotCostCategoryOutput struct{ *pulumi.OutputState }

func (GetTagsFilterNotCostCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterNotCostCategory)(nil)).Elem()
}

func (o GetTagsFilterNotCostCategoryOutput) ToGetTagsFilterNotCostCategoryOutput() GetTagsFilterNotCostCategoryOutput {
	return o
}

func (o GetTagsFilterNotCostCategoryOutput) ToGetTagsFilterNotCostCategoryOutputWithContext(ctx context.Context) GetTagsFilterNotCostCategoryOutput {
	return o
}

func (o GetTagsFilterNotCostCategoryOutput) ToGetTagsFilterNotCostCategoryPtrOutput() GetTagsFilterNotCostCategoryPtrOutput {
	return o.ToGetTagsFilterNotCostCategoryPtrOutputWithContext(context.Background())
}

func (o GetTagsFilterNotCostCategoryOutput) ToGetTagsFilterNotCostCategoryPtrOutputWithContext(ctx context.Context) GetTagsFilterNotCostCategoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetTagsFilterNotCostCategory) *GetTagsFilterNotCostCategory {
		return &v
	}).(GetTagsFilterNotCostCategoryPtrOutput)
}

// Unique name of the Cost Category.
func (o GetTagsFilterNotCostCategoryOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTagsFilterNotCostCategory) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetTagsFilterNotCostCategoryOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTagsFilterNotCostCategory) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o GetTagsFilterNotCostCategoryOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTagsFilterNotCostCategory) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetTagsFilterNotCostCategoryPtrOutput struct{ *pulumi.OutputState }

func (GetTagsFilterNotCostCategoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTagsFilterNotCostCategory)(nil)).Elem()
}

func (o GetTagsFilterNotCostCategoryPtrOutput) ToGetTagsFilterNotCostCategoryPtrOutput() GetTagsFilterNotCostCategoryPtrOutput {
	return o
}

func (o GetTagsFilterNotCostCategoryPtrOutput) ToGetTagsFilterNotCostCategoryPtrOutputWithContext(ctx context.Context) GetTagsFilterNotCostCategoryPtrOutput {
	return o
}

func (o GetTagsFilterNotCostCategoryPtrOutput) Elem() GetTagsFilterNotCostCategoryOutput {
	return o.ApplyT(func(v *GetTagsFilterNotCostCategory) GetTagsFilterNotCostCategory {
		if v != nil {
			return *v
		}
		var ret GetTagsFilterNotCostCategory
		return ret
	}).(GetTagsFilterNotCostCategoryOutput)
}

// Unique name of the Cost Category.
func (o GetTagsFilterNotCostCategoryPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetTagsFilterNotCostCategory) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetTagsFilterNotCostCategoryPtrOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetTagsFilterNotCostCategory) []string {
		if v == nil {
			return nil
		}
		return v.MatchOptions
	}).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o GetTagsFilterNotCostCategoryPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetTagsFilterNotCostCategory) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type GetTagsFilterNotDimension struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

// GetTagsFilterNotDimensionInput is an input type that accepts GetTagsFilterNotDimensionArgs and GetTagsFilterNotDimensionOutput values.
// You can construct a concrete instance of `GetTagsFilterNotDimensionInput` via:
//
//	GetTagsFilterNotDimensionArgs{...}
type GetTagsFilterNotDimensionInput interface {
	pulumi.Input

	ToGetTagsFilterNotDimensionOutput() GetTagsFilterNotDimensionOutput
	ToGetTagsFilterNotDimensionOutputWithContext(context.Context) GetTagsFilterNotDimensionOutput
}

type GetTagsFilterNotDimensionArgs struct {
	// Unique name of the Cost Category.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetTagsFilterNotDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterNotDimension)(nil)).Elem()
}

func (i GetTagsFilterNotDimensionArgs) ToGetTagsFilterNotDimensionOutput() GetTagsFilterNotDimensionOutput {
	return i.ToGetTagsFilterNotDimensionOutputWithContext(context.Background())
}

func (i GetTagsFilterNotDimensionArgs) ToGetTagsFilterNotDimensionOutputWithContext(ctx context.Context) GetTagsFilterNotDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterNotDimensionOutput)
}

func (i GetTagsFilterNotDimensionArgs) ToGetTagsFilterNotDimensionPtrOutput() GetTagsFilterNotDimensionPtrOutput {
	return i.ToGetTagsFilterNotDimensionPtrOutputWithContext(context.Background())
}

func (i GetTagsFilterNotDimensionArgs) ToGetTagsFilterNotDimensionPtrOutputWithContext(ctx context.Context) GetTagsFilterNotDimensionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterNotDimensionOutput).ToGetTagsFilterNotDimensionPtrOutputWithContext(ctx)
}

// GetTagsFilterNotDimensionPtrInput is an input type that accepts GetTagsFilterNotDimensionArgs, GetTagsFilterNotDimensionPtr and GetTagsFilterNotDimensionPtrOutput values.
// You can construct a concrete instance of `GetTagsFilterNotDimensionPtrInput` via:
//
//	        GetTagsFilterNotDimensionArgs{...}
//
//	or:
//
//	        nil
type GetTagsFilterNotDimensionPtrInput interface {
	pulumi.Input

	ToGetTagsFilterNotDimensionPtrOutput() GetTagsFilterNotDimensionPtrOutput
	ToGetTagsFilterNotDimensionPtrOutputWithContext(context.Context) GetTagsFilterNotDimensionPtrOutput
}

type getTagsFilterNotDimensionPtrType GetTagsFilterNotDimensionArgs

func GetTagsFilterNotDimensionPtr(v *GetTagsFilterNotDimensionArgs) GetTagsFilterNotDimensionPtrInput {
	return (*getTagsFilterNotDimensionPtrType)(v)
}

func (*getTagsFilterNotDimensionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTagsFilterNotDimension)(nil)).Elem()
}

func (i *getTagsFilterNotDimensionPtrType) ToGetTagsFilterNotDimensionPtrOutput() GetTagsFilterNotDimensionPtrOutput {
	return i.ToGetTagsFilterNotDimensionPtrOutputWithContext(context.Background())
}

func (i *getTagsFilterNotDimensionPtrType) ToGetTagsFilterNotDimensionPtrOutputWithContext(ctx context.Context) GetTagsFilterNotDimensionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterNotDimensionPtrOutput)
}

type GetTagsFilterNotDimensionOutput struct{ *pulumi.OutputState }

func (GetTagsFilterNotDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterNotDimension)(nil)).Elem()
}

func (o GetTagsFilterNotDimensionOutput) ToGetTagsFilterNotDimensionOutput() GetTagsFilterNotDimensionOutput {
	return o
}

func (o GetTagsFilterNotDimensionOutput) ToGetTagsFilterNotDimensionOutputWithContext(ctx context.Context) GetTagsFilterNotDimensionOutput {
	return o
}

func (o GetTagsFilterNotDimensionOutput) ToGetTagsFilterNotDimensionPtrOutput() GetTagsFilterNotDimensionPtrOutput {
	return o.ToGetTagsFilterNotDimensionPtrOutputWithContext(context.Background())
}

func (o GetTagsFilterNotDimensionOutput) ToGetTagsFilterNotDimensionPtrOutputWithContext(ctx context.Context) GetTagsFilterNotDimensionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetTagsFilterNotDimension) *GetTagsFilterNotDimension {
		return &v
	}).(GetTagsFilterNotDimensionPtrOutput)
}

// Unique name of the Cost Category.
func (o GetTagsFilterNotDimensionOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTagsFilterNotDimension) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetTagsFilterNotDimensionOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTagsFilterNotDimension) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o GetTagsFilterNotDimensionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTagsFilterNotDimension) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetTagsFilterNotDimensionPtrOutput struct{ *pulumi.OutputState }

func (GetTagsFilterNotDimensionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTagsFilterNotDimension)(nil)).Elem()
}

func (o GetTagsFilterNotDimensionPtrOutput) ToGetTagsFilterNotDimensionPtrOutput() GetTagsFilterNotDimensionPtrOutput {
	return o
}

func (o GetTagsFilterNotDimensionPtrOutput) ToGetTagsFilterNotDimensionPtrOutputWithContext(ctx context.Context) GetTagsFilterNotDimensionPtrOutput {
	return o
}

func (o GetTagsFilterNotDimensionPtrOutput) Elem() GetTagsFilterNotDimensionOutput {
	return o.ApplyT(func(v *GetTagsFilterNotDimension) GetTagsFilterNotDimension {
		if v != nil {
			return *v
		}
		var ret GetTagsFilterNotDimension
		return ret
	}).(GetTagsFilterNotDimensionOutput)
}

// Unique name of the Cost Category.
func (o GetTagsFilterNotDimensionPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetTagsFilterNotDimension) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetTagsFilterNotDimensionPtrOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetTagsFilterNotDimension) []string {
		if v == nil {
			return nil
		}
		return v.MatchOptions
	}).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o GetTagsFilterNotDimensionPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetTagsFilterNotDimension) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type GetTagsFilterNotTags struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

// GetTagsFilterNotTagsInput is an input type that accepts GetTagsFilterNotTagsArgs and GetTagsFilterNotTagsOutput values.
// You can construct a concrete instance of `GetTagsFilterNotTagsInput` via:
//
//	GetTagsFilterNotTagsArgs{...}
type GetTagsFilterNotTagsInput interface {
	pulumi.Input

	ToGetTagsFilterNotTagsOutput() GetTagsFilterNotTagsOutput
	ToGetTagsFilterNotTagsOutputWithContext(context.Context) GetTagsFilterNotTagsOutput
}

type GetTagsFilterNotTagsArgs struct {
	// Unique name of the Cost Category.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetTagsFilterNotTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterNotTags)(nil)).Elem()
}

func (i GetTagsFilterNotTagsArgs) ToGetTagsFilterNotTagsOutput() GetTagsFilterNotTagsOutput {
	return i.ToGetTagsFilterNotTagsOutputWithContext(context.Background())
}

func (i GetTagsFilterNotTagsArgs) ToGetTagsFilterNotTagsOutputWithContext(ctx context.Context) GetTagsFilterNotTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterNotTagsOutput)
}

func (i GetTagsFilterNotTagsArgs) ToGetTagsFilterNotTagsPtrOutput() GetTagsFilterNotTagsPtrOutput {
	return i.ToGetTagsFilterNotTagsPtrOutputWithContext(context.Background())
}

func (i GetTagsFilterNotTagsArgs) ToGetTagsFilterNotTagsPtrOutputWithContext(ctx context.Context) GetTagsFilterNotTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterNotTagsOutput).ToGetTagsFilterNotTagsPtrOutputWithContext(ctx)
}

// GetTagsFilterNotTagsPtrInput is an input type that accepts GetTagsFilterNotTagsArgs, GetTagsFilterNotTagsPtr and GetTagsFilterNotTagsPtrOutput values.
// You can construct a concrete instance of `GetTagsFilterNotTagsPtrInput` via:
//
//	        GetTagsFilterNotTagsArgs{...}
//
//	or:
//
//	        nil
type GetTagsFilterNotTagsPtrInput interface {
	pulumi.Input

	ToGetTagsFilterNotTagsPtrOutput() GetTagsFilterNotTagsPtrOutput
	ToGetTagsFilterNotTagsPtrOutputWithContext(context.Context) GetTagsFilterNotTagsPtrOutput
}

type getTagsFilterNotTagsPtrType GetTagsFilterNotTagsArgs

func GetTagsFilterNotTagsPtr(v *GetTagsFilterNotTagsArgs) GetTagsFilterNotTagsPtrInput {
	return (*getTagsFilterNotTagsPtrType)(v)
}

func (*getTagsFilterNotTagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTagsFilterNotTags)(nil)).Elem()
}

func (i *getTagsFilterNotTagsPtrType) ToGetTagsFilterNotTagsPtrOutput() GetTagsFilterNotTagsPtrOutput {
	return i.ToGetTagsFilterNotTagsPtrOutputWithContext(context.Background())
}

func (i *getTagsFilterNotTagsPtrType) ToGetTagsFilterNotTagsPtrOutputWithContext(ctx context.Context) GetTagsFilterNotTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterNotTagsPtrOutput)
}

type GetTagsFilterNotTagsOutput struct{ *pulumi.OutputState }

func (GetTagsFilterNotTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterNotTags)(nil)).Elem()
}

func (o GetTagsFilterNotTagsOutput) ToGetTagsFilterNotTagsOutput() GetTagsFilterNotTagsOutput {
	return o
}

func (o GetTagsFilterNotTagsOutput) ToGetTagsFilterNotTagsOutputWithContext(ctx context.Context) GetTagsFilterNotTagsOutput {
	return o
}

func (o GetTagsFilterNotTagsOutput) ToGetTagsFilterNotTagsPtrOutput() GetTagsFilterNotTagsPtrOutput {
	return o.ToGetTagsFilterNotTagsPtrOutputWithContext(context.Background())
}

func (o GetTagsFilterNotTagsOutput) ToGetTagsFilterNotTagsPtrOutputWithContext(ctx context.Context) GetTagsFilterNotTagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetTagsFilterNotTags) *GetTagsFilterNotTags {
		return &v
	}).(GetTagsFilterNotTagsPtrOutput)
}

// Unique name of the Cost Category.
func (o GetTagsFilterNotTagsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTagsFilterNotTags) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetTagsFilterNotTagsOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTagsFilterNotTags) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o GetTagsFilterNotTagsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTagsFilterNotTags) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetTagsFilterNotTagsPtrOutput struct{ *pulumi.OutputState }

func (GetTagsFilterNotTagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTagsFilterNotTags)(nil)).Elem()
}

func (o GetTagsFilterNotTagsPtrOutput) ToGetTagsFilterNotTagsPtrOutput() GetTagsFilterNotTagsPtrOutput {
	return o
}

func (o GetTagsFilterNotTagsPtrOutput) ToGetTagsFilterNotTagsPtrOutputWithContext(ctx context.Context) GetTagsFilterNotTagsPtrOutput {
	return o
}

func (o GetTagsFilterNotTagsPtrOutput) Elem() GetTagsFilterNotTagsOutput {
	return o.ApplyT(func(v *GetTagsFilterNotTags) GetTagsFilterNotTags {
		if v != nil {
			return *v
		}
		var ret GetTagsFilterNotTags
		return ret
	}).(GetTagsFilterNotTagsOutput)
}

// Unique name of the Cost Category.
func (o GetTagsFilterNotTagsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetTagsFilterNotTags) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetTagsFilterNotTagsPtrOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetTagsFilterNotTags) []string {
		if v == nil {
			return nil
		}
		return v.MatchOptions
	}).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o GetTagsFilterNotTagsPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetTagsFilterNotTags) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type GetTagsFilterOr struct {
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategory *GetTagsFilterOrCostCategory `pulumi:"costCategory"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimension *GetTagsFilterOrDimension `pulumi:"dimension"`
	// Tags that match your request.
	Tags *GetTagsFilterOrTags `pulumi:"tags"`
}

// GetTagsFilterOrInput is an input type that accepts GetTagsFilterOrArgs and GetTagsFilterOrOutput values.
// You can construct a concrete instance of `GetTagsFilterOrInput` via:
//
//	GetTagsFilterOrArgs{...}
type GetTagsFilterOrInput interface {
	pulumi.Input

	ToGetTagsFilterOrOutput() GetTagsFilterOrOutput
	ToGetTagsFilterOrOutputWithContext(context.Context) GetTagsFilterOrOutput
}

type GetTagsFilterOrArgs struct {
	// Configuration block for the filter that's based on `CostCategory` values. See below.
	CostCategory GetTagsFilterOrCostCategoryPtrInput `pulumi:"costCategory"`
	// Configuration block for the specific `Dimension` to use for `Expression`. See below.
	Dimension GetTagsFilterOrDimensionPtrInput `pulumi:"dimension"`
	// Tags that match your request.
	Tags GetTagsFilterOrTagsPtrInput `pulumi:"tags"`
}

func (GetTagsFilterOrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterOr)(nil)).Elem()
}

func (i GetTagsFilterOrArgs) ToGetTagsFilterOrOutput() GetTagsFilterOrOutput {
	return i.ToGetTagsFilterOrOutputWithContext(context.Background())
}

func (i GetTagsFilterOrArgs) ToGetTagsFilterOrOutputWithContext(ctx context.Context) GetTagsFilterOrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterOrOutput)
}

// GetTagsFilterOrArrayInput is an input type that accepts GetTagsFilterOrArray and GetTagsFilterOrArrayOutput values.
// You can construct a concrete instance of `GetTagsFilterOrArrayInput` via:
//
//	GetTagsFilterOrArray{ GetTagsFilterOrArgs{...} }
type GetTagsFilterOrArrayInput interface {
	pulumi.Input

	ToGetTagsFilterOrArrayOutput() GetTagsFilterOrArrayOutput
	ToGetTagsFilterOrArrayOutputWithContext(context.Context) GetTagsFilterOrArrayOutput
}

type GetTagsFilterOrArray []GetTagsFilterOrInput

func (GetTagsFilterOrArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTagsFilterOr)(nil)).Elem()
}

func (i GetTagsFilterOrArray) ToGetTagsFilterOrArrayOutput() GetTagsFilterOrArrayOutput {
	return i.ToGetTagsFilterOrArrayOutputWithContext(context.Background())
}

func (i GetTagsFilterOrArray) ToGetTagsFilterOrArrayOutputWithContext(ctx context.Context) GetTagsFilterOrArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterOrArrayOutput)
}

type GetTagsFilterOrOutput struct{ *pulumi.OutputState }

func (GetTagsFilterOrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterOr)(nil)).Elem()
}

func (o GetTagsFilterOrOutput) ToGetTagsFilterOrOutput() GetTagsFilterOrOutput {
	return o
}

func (o GetTagsFilterOrOutput) ToGetTagsFilterOrOutputWithContext(ctx context.Context) GetTagsFilterOrOutput {
	return o
}

// Configuration block for the filter that's based on `CostCategory` values. See below.
func (o GetTagsFilterOrOutput) CostCategory() GetTagsFilterOrCostCategoryPtrOutput {
	return o.ApplyT(func(v GetTagsFilterOr) *GetTagsFilterOrCostCategory { return v.CostCategory }).(GetTagsFilterOrCostCategoryPtrOutput)
}

// Configuration block for the specific `Dimension` to use for `Expression`. See below.
func (o GetTagsFilterOrOutput) Dimension() GetTagsFilterOrDimensionPtrOutput {
	return o.ApplyT(func(v GetTagsFilterOr) *GetTagsFilterOrDimension { return v.Dimension }).(GetTagsFilterOrDimensionPtrOutput)
}

// Tags that match your request.
func (o GetTagsFilterOrOutput) Tags() GetTagsFilterOrTagsPtrOutput {
	return o.ApplyT(func(v GetTagsFilterOr) *GetTagsFilterOrTags { return v.Tags }).(GetTagsFilterOrTagsPtrOutput)
}

type GetTagsFilterOrArrayOutput struct{ *pulumi.OutputState }

func (GetTagsFilterOrArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTagsFilterOr)(nil)).Elem()
}

func (o GetTagsFilterOrArrayOutput) ToGetTagsFilterOrArrayOutput() GetTagsFilterOrArrayOutput {
	return o
}

func (o GetTagsFilterOrArrayOutput) ToGetTagsFilterOrArrayOutputWithContext(ctx context.Context) GetTagsFilterOrArrayOutput {
	return o
}

func (o GetTagsFilterOrArrayOutput) Index(i pulumi.IntInput) GetTagsFilterOrOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTagsFilterOr {
		return vs[0].([]GetTagsFilterOr)[vs[1].(int)]
	}).(GetTagsFilterOrOutput)
}

type GetTagsFilterOrCostCategory struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

// GetTagsFilterOrCostCategoryInput is an input type that accepts GetTagsFilterOrCostCategoryArgs and GetTagsFilterOrCostCategoryOutput values.
// You can construct a concrete instance of `GetTagsFilterOrCostCategoryInput` via:
//
//	GetTagsFilterOrCostCategoryArgs{...}
type GetTagsFilterOrCostCategoryInput interface {
	pulumi.Input

	ToGetTagsFilterOrCostCategoryOutput() GetTagsFilterOrCostCategoryOutput
	ToGetTagsFilterOrCostCategoryOutputWithContext(context.Context) GetTagsFilterOrCostCategoryOutput
}

type GetTagsFilterOrCostCategoryArgs struct {
	// Unique name of the Cost Category.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetTagsFilterOrCostCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterOrCostCategory)(nil)).Elem()
}

func (i GetTagsFilterOrCostCategoryArgs) ToGetTagsFilterOrCostCategoryOutput() GetTagsFilterOrCostCategoryOutput {
	return i.ToGetTagsFilterOrCostCategoryOutputWithContext(context.Background())
}

func (i GetTagsFilterOrCostCategoryArgs) ToGetTagsFilterOrCostCategoryOutputWithContext(ctx context.Context) GetTagsFilterOrCostCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterOrCostCategoryOutput)
}

func (i GetTagsFilterOrCostCategoryArgs) ToGetTagsFilterOrCostCategoryPtrOutput() GetTagsFilterOrCostCategoryPtrOutput {
	return i.ToGetTagsFilterOrCostCategoryPtrOutputWithContext(context.Background())
}

func (i GetTagsFilterOrCostCategoryArgs) ToGetTagsFilterOrCostCategoryPtrOutputWithContext(ctx context.Context) GetTagsFilterOrCostCategoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterOrCostCategoryOutput).ToGetTagsFilterOrCostCategoryPtrOutputWithContext(ctx)
}

// GetTagsFilterOrCostCategoryPtrInput is an input type that accepts GetTagsFilterOrCostCategoryArgs, GetTagsFilterOrCostCategoryPtr and GetTagsFilterOrCostCategoryPtrOutput values.
// You can construct a concrete instance of `GetTagsFilterOrCostCategoryPtrInput` via:
//
//	        GetTagsFilterOrCostCategoryArgs{...}
//
//	or:
//
//	        nil
type GetTagsFilterOrCostCategoryPtrInput interface {
	pulumi.Input

	ToGetTagsFilterOrCostCategoryPtrOutput() GetTagsFilterOrCostCategoryPtrOutput
	ToGetTagsFilterOrCostCategoryPtrOutputWithContext(context.Context) GetTagsFilterOrCostCategoryPtrOutput
}

type getTagsFilterOrCostCategoryPtrType GetTagsFilterOrCostCategoryArgs

func GetTagsFilterOrCostCategoryPtr(v *GetTagsFilterOrCostCategoryArgs) GetTagsFilterOrCostCategoryPtrInput {
	return (*getTagsFilterOrCostCategoryPtrType)(v)
}

func (*getTagsFilterOrCostCategoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTagsFilterOrCostCategory)(nil)).Elem()
}

func (i *getTagsFilterOrCostCategoryPtrType) ToGetTagsFilterOrCostCategoryPtrOutput() GetTagsFilterOrCostCategoryPtrOutput {
	return i.ToGetTagsFilterOrCostCategoryPtrOutputWithContext(context.Background())
}

func (i *getTagsFilterOrCostCategoryPtrType) ToGetTagsFilterOrCostCategoryPtrOutputWithContext(ctx context.Context) GetTagsFilterOrCostCategoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterOrCostCategoryPtrOutput)
}

type GetTagsFilterOrCostCategoryOutput struct{ *pulumi.OutputState }

func (GetTagsFilterOrCostCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterOrCostCategory)(nil)).Elem()
}

func (o GetTagsFilterOrCostCategoryOutput) ToGetTagsFilterOrCostCategoryOutput() GetTagsFilterOrCostCategoryOutput {
	return o
}

func (o GetTagsFilterOrCostCategoryOutput) ToGetTagsFilterOrCostCategoryOutputWithContext(ctx context.Context) GetTagsFilterOrCostCategoryOutput {
	return o
}

func (o GetTagsFilterOrCostCategoryOutput) ToGetTagsFilterOrCostCategoryPtrOutput() GetTagsFilterOrCostCategoryPtrOutput {
	return o.ToGetTagsFilterOrCostCategoryPtrOutputWithContext(context.Background())
}

func (o GetTagsFilterOrCostCategoryOutput) ToGetTagsFilterOrCostCategoryPtrOutputWithContext(ctx context.Context) GetTagsFilterOrCostCategoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetTagsFilterOrCostCategory) *GetTagsFilterOrCostCategory {
		return &v
	}).(GetTagsFilterOrCostCategoryPtrOutput)
}

// Unique name of the Cost Category.
func (o GetTagsFilterOrCostCategoryOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTagsFilterOrCostCategory) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetTagsFilterOrCostCategoryOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTagsFilterOrCostCategory) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o GetTagsFilterOrCostCategoryOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTagsFilterOrCostCategory) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetTagsFilterOrCostCategoryPtrOutput struct{ *pulumi.OutputState }

func (GetTagsFilterOrCostCategoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTagsFilterOrCostCategory)(nil)).Elem()
}

func (o GetTagsFilterOrCostCategoryPtrOutput) ToGetTagsFilterOrCostCategoryPtrOutput() GetTagsFilterOrCostCategoryPtrOutput {
	return o
}

func (o GetTagsFilterOrCostCategoryPtrOutput) ToGetTagsFilterOrCostCategoryPtrOutputWithContext(ctx context.Context) GetTagsFilterOrCostCategoryPtrOutput {
	return o
}

func (o GetTagsFilterOrCostCategoryPtrOutput) Elem() GetTagsFilterOrCostCategoryOutput {
	return o.ApplyT(func(v *GetTagsFilterOrCostCategory) GetTagsFilterOrCostCategory {
		if v != nil {
			return *v
		}
		var ret GetTagsFilterOrCostCategory
		return ret
	}).(GetTagsFilterOrCostCategoryOutput)
}

// Unique name of the Cost Category.
func (o GetTagsFilterOrCostCategoryPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetTagsFilterOrCostCategory) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetTagsFilterOrCostCategoryPtrOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetTagsFilterOrCostCategory) []string {
		if v == nil {
			return nil
		}
		return v.MatchOptions
	}).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o GetTagsFilterOrCostCategoryPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetTagsFilterOrCostCategory) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type GetTagsFilterOrDimension struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

// GetTagsFilterOrDimensionInput is an input type that accepts GetTagsFilterOrDimensionArgs and GetTagsFilterOrDimensionOutput values.
// You can construct a concrete instance of `GetTagsFilterOrDimensionInput` via:
//
//	GetTagsFilterOrDimensionArgs{...}
type GetTagsFilterOrDimensionInput interface {
	pulumi.Input

	ToGetTagsFilterOrDimensionOutput() GetTagsFilterOrDimensionOutput
	ToGetTagsFilterOrDimensionOutputWithContext(context.Context) GetTagsFilterOrDimensionOutput
}

type GetTagsFilterOrDimensionArgs struct {
	// Unique name of the Cost Category.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetTagsFilterOrDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterOrDimension)(nil)).Elem()
}

func (i GetTagsFilterOrDimensionArgs) ToGetTagsFilterOrDimensionOutput() GetTagsFilterOrDimensionOutput {
	return i.ToGetTagsFilterOrDimensionOutputWithContext(context.Background())
}

func (i GetTagsFilterOrDimensionArgs) ToGetTagsFilterOrDimensionOutputWithContext(ctx context.Context) GetTagsFilterOrDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterOrDimensionOutput)
}

func (i GetTagsFilterOrDimensionArgs) ToGetTagsFilterOrDimensionPtrOutput() GetTagsFilterOrDimensionPtrOutput {
	return i.ToGetTagsFilterOrDimensionPtrOutputWithContext(context.Background())
}

func (i GetTagsFilterOrDimensionArgs) ToGetTagsFilterOrDimensionPtrOutputWithContext(ctx context.Context) GetTagsFilterOrDimensionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterOrDimensionOutput).ToGetTagsFilterOrDimensionPtrOutputWithContext(ctx)
}

// GetTagsFilterOrDimensionPtrInput is an input type that accepts GetTagsFilterOrDimensionArgs, GetTagsFilterOrDimensionPtr and GetTagsFilterOrDimensionPtrOutput values.
// You can construct a concrete instance of `GetTagsFilterOrDimensionPtrInput` via:
//
//	        GetTagsFilterOrDimensionArgs{...}
//
//	or:
//
//	        nil
type GetTagsFilterOrDimensionPtrInput interface {
	pulumi.Input

	ToGetTagsFilterOrDimensionPtrOutput() GetTagsFilterOrDimensionPtrOutput
	ToGetTagsFilterOrDimensionPtrOutputWithContext(context.Context) GetTagsFilterOrDimensionPtrOutput
}

type getTagsFilterOrDimensionPtrType GetTagsFilterOrDimensionArgs

func GetTagsFilterOrDimensionPtr(v *GetTagsFilterOrDimensionArgs) GetTagsFilterOrDimensionPtrInput {
	return (*getTagsFilterOrDimensionPtrType)(v)
}

func (*getTagsFilterOrDimensionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTagsFilterOrDimension)(nil)).Elem()
}

func (i *getTagsFilterOrDimensionPtrType) ToGetTagsFilterOrDimensionPtrOutput() GetTagsFilterOrDimensionPtrOutput {
	return i.ToGetTagsFilterOrDimensionPtrOutputWithContext(context.Background())
}

func (i *getTagsFilterOrDimensionPtrType) ToGetTagsFilterOrDimensionPtrOutputWithContext(ctx context.Context) GetTagsFilterOrDimensionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterOrDimensionPtrOutput)
}

type GetTagsFilterOrDimensionOutput struct{ *pulumi.OutputState }

func (GetTagsFilterOrDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterOrDimension)(nil)).Elem()
}

func (o GetTagsFilterOrDimensionOutput) ToGetTagsFilterOrDimensionOutput() GetTagsFilterOrDimensionOutput {
	return o
}

func (o GetTagsFilterOrDimensionOutput) ToGetTagsFilterOrDimensionOutputWithContext(ctx context.Context) GetTagsFilterOrDimensionOutput {
	return o
}

func (o GetTagsFilterOrDimensionOutput) ToGetTagsFilterOrDimensionPtrOutput() GetTagsFilterOrDimensionPtrOutput {
	return o.ToGetTagsFilterOrDimensionPtrOutputWithContext(context.Background())
}

func (o GetTagsFilterOrDimensionOutput) ToGetTagsFilterOrDimensionPtrOutputWithContext(ctx context.Context) GetTagsFilterOrDimensionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetTagsFilterOrDimension) *GetTagsFilterOrDimension {
		return &v
	}).(GetTagsFilterOrDimensionPtrOutput)
}

// Unique name of the Cost Category.
func (o GetTagsFilterOrDimensionOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTagsFilterOrDimension) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetTagsFilterOrDimensionOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTagsFilterOrDimension) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o GetTagsFilterOrDimensionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTagsFilterOrDimension) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetTagsFilterOrDimensionPtrOutput struct{ *pulumi.OutputState }

func (GetTagsFilterOrDimensionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTagsFilterOrDimension)(nil)).Elem()
}

func (o GetTagsFilterOrDimensionPtrOutput) ToGetTagsFilterOrDimensionPtrOutput() GetTagsFilterOrDimensionPtrOutput {
	return o
}

func (o GetTagsFilterOrDimensionPtrOutput) ToGetTagsFilterOrDimensionPtrOutputWithContext(ctx context.Context) GetTagsFilterOrDimensionPtrOutput {
	return o
}

func (o GetTagsFilterOrDimensionPtrOutput) Elem() GetTagsFilterOrDimensionOutput {
	return o.ApplyT(func(v *GetTagsFilterOrDimension) GetTagsFilterOrDimension {
		if v != nil {
			return *v
		}
		var ret GetTagsFilterOrDimension
		return ret
	}).(GetTagsFilterOrDimensionOutput)
}

// Unique name of the Cost Category.
func (o GetTagsFilterOrDimensionPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetTagsFilterOrDimension) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetTagsFilterOrDimensionPtrOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetTagsFilterOrDimension) []string {
		if v == nil {
			return nil
		}
		return v.MatchOptions
	}).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o GetTagsFilterOrDimensionPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetTagsFilterOrDimension) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type GetTagsFilterOrTags struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

// GetTagsFilterOrTagsInput is an input type that accepts GetTagsFilterOrTagsArgs and GetTagsFilterOrTagsOutput values.
// You can construct a concrete instance of `GetTagsFilterOrTagsInput` via:
//
//	GetTagsFilterOrTagsArgs{...}
type GetTagsFilterOrTagsInput interface {
	pulumi.Input

	ToGetTagsFilterOrTagsOutput() GetTagsFilterOrTagsOutput
	ToGetTagsFilterOrTagsOutputWithContext(context.Context) GetTagsFilterOrTagsOutput
}

type GetTagsFilterOrTagsArgs struct {
	// Unique name of the Cost Category.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetTagsFilterOrTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterOrTags)(nil)).Elem()
}

func (i GetTagsFilterOrTagsArgs) ToGetTagsFilterOrTagsOutput() GetTagsFilterOrTagsOutput {
	return i.ToGetTagsFilterOrTagsOutputWithContext(context.Background())
}

func (i GetTagsFilterOrTagsArgs) ToGetTagsFilterOrTagsOutputWithContext(ctx context.Context) GetTagsFilterOrTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterOrTagsOutput)
}

func (i GetTagsFilterOrTagsArgs) ToGetTagsFilterOrTagsPtrOutput() GetTagsFilterOrTagsPtrOutput {
	return i.ToGetTagsFilterOrTagsPtrOutputWithContext(context.Background())
}

func (i GetTagsFilterOrTagsArgs) ToGetTagsFilterOrTagsPtrOutputWithContext(ctx context.Context) GetTagsFilterOrTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterOrTagsOutput).ToGetTagsFilterOrTagsPtrOutputWithContext(ctx)
}

// GetTagsFilterOrTagsPtrInput is an input type that accepts GetTagsFilterOrTagsArgs, GetTagsFilterOrTagsPtr and GetTagsFilterOrTagsPtrOutput values.
// You can construct a concrete instance of `GetTagsFilterOrTagsPtrInput` via:
//
//	        GetTagsFilterOrTagsArgs{...}
//
//	or:
//
//	        nil
type GetTagsFilterOrTagsPtrInput interface {
	pulumi.Input

	ToGetTagsFilterOrTagsPtrOutput() GetTagsFilterOrTagsPtrOutput
	ToGetTagsFilterOrTagsPtrOutputWithContext(context.Context) GetTagsFilterOrTagsPtrOutput
}

type getTagsFilterOrTagsPtrType GetTagsFilterOrTagsArgs

func GetTagsFilterOrTagsPtr(v *GetTagsFilterOrTagsArgs) GetTagsFilterOrTagsPtrInput {
	return (*getTagsFilterOrTagsPtrType)(v)
}

func (*getTagsFilterOrTagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTagsFilterOrTags)(nil)).Elem()
}

func (i *getTagsFilterOrTagsPtrType) ToGetTagsFilterOrTagsPtrOutput() GetTagsFilterOrTagsPtrOutput {
	return i.ToGetTagsFilterOrTagsPtrOutputWithContext(context.Background())
}

func (i *getTagsFilterOrTagsPtrType) ToGetTagsFilterOrTagsPtrOutputWithContext(ctx context.Context) GetTagsFilterOrTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterOrTagsPtrOutput)
}

type GetTagsFilterOrTagsOutput struct{ *pulumi.OutputState }

func (GetTagsFilterOrTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterOrTags)(nil)).Elem()
}

func (o GetTagsFilterOrTagsOutput) ToGetTagsFilterOrTagsOutput() GetTagsFilterOrTagsOutput {
	return o
}

func (o GetTagsFilterOrTagsOutput) ToGetTagsFilterOrTagsOutputWithContext(ctx context.Context) GetTagsFilterOrTagsOutput {
	return o
}

func (o GetTagsFilterOrTagsOutput) ToGetTagsFilterOrTagsPtrOutput() GetTagsFilterOrTagsPtrOutput {
	return o.ToGetTagsFilterOrTagsPtrOutputWithContext(context.Background())
}

func (o GetTagsFilterOrTagsOutput) ToGetTagsFilterOrTagsPtrOutputWithContext(ctx context.Context) GetTagsFilterOrTagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetTagsFilterOrTags) *GetTagsFilterOrTags {
		return &v
	}).(GetTagsFilterOrTagsPtrOutput)
}

// Unique name of the Cost Category.
func (o GetTagsFilterOrTagsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTagsFilterOrTags) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetTagsFilterOrTagsOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTagsFilterOrTags) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o GetTagsFilterOrTagsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTagsFilterOrTags) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetTagsFilterOrTagsPtrOutput struct{ *pulumi.OutputState }

func (GetTagsFilterOrTagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTagsFilterOrTags)(nil)).Elem()
}

func (o GetTagsFilterOrTagsPtrOutput) ToGetTagsFilterOrTagsPtrOutput() GetTagsFilterOrTagsPtrOutput {
	return o
}

func (o GetTagsFilterOrTagsPtrOutput) ToGetTagsFilterOrTagsPtrOutputWithContext(ctx context.Context) GetTagsFilterOrTagsPtrOutput {
	return o
}

func (o GetTagsFilterOrTagsPtrOutput) Elem() GetTagsFilterOrTagsOutput {
	return o.ApplyT(func(v *GetTagsFilterOrTags) GetTagsFilterOrTags {
		if v != nil {
			return *v
		}
		var ret GetTagsFilterOrTags
		return ret
	}).(GetTagsFilterOrTagsOutput)
}

// Unique name of the Cost Category.
func (o GetTagsFilterOrTagsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetTagsFilterOrTags) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetTagsFilterOrTagsPtrOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetTagsFilterOrTags) []string {
		if v == nil {
			return nil
		}
		return v.MatchOptions
	}).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o GetTagsFilterOrTagsPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetTagsFilterOrTags) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type GetTagsFilterTags struct {
	// Unique name of the Cost Category.
	Key *string `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions []string `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values []string `pulumi:"values"`
}

// GetTagsFilterTagsInput is an input type that accepts GetTagsFilterTagsArgs and GetTagsFilterTagsOutput values.
// You can construct a concrete instance of `GetTagsFilterTagsInput` via:
//
//	GetTagsFilterTagsArgs{...}
type GetTagsFilterTagsInput interface {
	pulumi.Input

	ToGetTagsFilterTagsOutput() GetTagsFilterTagsOutput
	ToGetTagsFilterTagsOutputWithContext(context.Context) GetTagsFilterTagsOutput
}

type GetTagsFilterTagsArgs struct {
	// Unique name of the Cost Category.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
	MatchOptions pulumi.StringArrayInput `pulumi:"matchOptions"`
	// Specific value of the Cost Category.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetTagsFilterTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterTags)(nil)).Elem()
}

func (i GetTagsFilterTagsArgs) ToGetTagsFilterTagsOutput() GetTagsFilterTagsOutput {
	return i.ToGetTagsFilterTagsOutputWithContext(context.Background())
}

func (i GetTagsFilterTagsArgs) ToGetTagsFilterTagsOutputWithContext(ctx context.Context) GetTagsFilterTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterTagsOutput)
}

func (i GetTagsFilterTagsArgs) ToGetTagsFilterTagsPtrOutput() GetTagsFilterTagsPtrOutput {
	return i.ToGetTagsFilterTagsPtrOutputWithContext(context.Background())
}

func (i GetTagsFilterTagsArgs) ToGetTagsFilterTagsPtrOutputWithContext(ctx context.Context) GetTagsFilterTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterTagsOutput).ToGetTagsFilterTagsPtrOutputWithContext(ctx)
}

// GetTagsFilterTagsPtrInput is an input type that accepts GetTagsFilterTagsArgs, GetTagsFilterTagsPtr and GetTagsFilterTagsPtrOutput values.
// You can construct a concrete instance of `GetTagsFilterTagsPtrInput` via:
//
//	        GetTagsFilterTagsArgs{...}
//
//	or:
//
//	        nil
type GetTagsFilterTagsPtrInput interface {
	pulumi.Input

	ToGetTagsFilterTagsPtrOutput() GetTagsFilterTagsPtrOutput
	ToGetTagsFilterTagsPtrOutputWithContext(context.Context) GetTagsFilterTagsPtrOutput
}

type getTagsFilterTagsPtrType GetTagsFilterTagsArgs

func GetTagsFilterTagsPtr(v *GetTagsFilterTagsArgs) GetTagsFilterTagsPtrInput {
	return (*getTagsFilterTagsPtrType)(v)
}

func (*getTagsFilterTagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTagsFilterTags)(nil)).Elem()
}

func (i *getTagsFilterTagsPtrType) ToGetTagsFilterTagsPtrOutput() GetTagsFilterTagsPtrOutput {
	return i.ToGetTagsFilterTagsPtrOutputWithContext(context.Background())
}

func (i *getTagsFilterTagsPtrType) ToGetTagsFilterTagsPtrOutputWithContext(ctx context.Context) GetTagsFilterTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsFilterTagsPtrOutput)
}

type GetTagsFilterTagsOutput struct{ *pulumi.OutputState }

func (GetTagsFilterTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsFilterTags)(nil)).Elem()
}

func (o GetTagsFilterTagsOutput) ToGetTagsFilterTagsOutput() GetTagsFilterTagsOutput {
	return o
}

func (o GetTagsFilterTagsOutput) ToGetTagsFilterTagsOutputWithContext(ctx context.Context) GetTagsFilterTagsOutput {
	return o
}

func (o GetTagsFilterTagsOutput) ToGetTagsFilterTagsPtrOutput() GetTagsFilterTagsPtrOutput {
	return o.ToGetTagsFilterTagsPtrOutputWithContext(context.Background())
}

func (o GetTagsFilterTagsOutput) ToGetTagsFilterTagsPtrOutputWithContext(ctx context.Context) GetTagsFilterTagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetTagsFilterTags) *GetTagsFilterTags {
		return &v
	}).(GetTagsFilterTagsPtrOutput)
}

// Unique name of the Cost Category.
func (o GetTagsFilterTagsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTagsFilterTags) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetTagsFilterTagsOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTagsFilterTags) []string { return v.MatchOptions }).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o GetTagsFilterTagsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTagsFilterTags) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetTagsFilterTagsPtrOutput struct{ *pulumi.OutputState }

func (GetTagsFilterTagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTagsFilterTags)(nil)).Elem()
}

func (o GetTagsFilterTagsPtrOutput) ToGetTagsFilterTagsPtrOutput() GetTagsFilterTagsPtrOutput {
	return o
}

func (o GetTagsFilterTagsPtrOutput) ToGetTagsFilterTagsPtrOutputWithContext(ctx context.Context) GetTagsFilterTagsPtrOutput {
	return o
}

func (o GetTagsFilterTagsPtrOutput) Elem() GetTagsFilterTagsOutput {
	return o.ApplyT(func(v *GetTagsFilterTags) GetTagsFilterTags {
		if v != nil {
			return *v
		}
		var ret GetTagsFilterTags
		return ret
	}).(GetTagsFilterTagsOutput)
}

// Unique name of the Cost Category.
func (o GetTagsFilterTagsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetTagsFilterTags) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
func (o GetTagsFilterTagsPtrOutput) MatchOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetTagsFilterTags) []string {
		if v == nil {
			return nil
		}
		return v.MatchOptions
	}).(pulumi.StringArrayOutput)
}

// Specific value of the Cost Category.
func (o GetTagsFilterTagsPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetTagsFilterTags) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type GetTagsSortBy struct {
	// key that's used to sort the data. Valid values are: `BlendedCost`,  `UnblendedCost`, `AmortizedCost`, `NetAmortizedCost`, `NetUnblendedCost`, `UsageQuantity`, `NormalizedUsageAmount`.
	Key *string `pulumi:"key"`
	// order that's used to sort the data. Valid values are: `ASCENDING`,  `DESCENDING`.
	SortOrder *string `pulumi:"sortOrder"`
}

// GetTagsSortByInput is an input type that accepts GetTagsSortByArgs and GetTagsSortByOutput values.
// You can construct a concrete instance of `GetTagsSortByInput` via:
//
//	GetTagsSortByArgs{...}
type GetTagsSortByInput interface {
	pulumi.Input

	ToGetTagsSortByOutput() GetTagsSortByOutput
	ToGetTagsSortByOutputWithContext(context.Context) GetTagsSortByOutput
}

type GetTagsSortByArgs struct {
	// key that's used to sort the data. Valid values are: `BlendedCost`,  `UnblendedCost`, `AmortizedCost`, `NetAmortizedCost`, `NetUnblendedCost`, `UsageQuantity`, `NormalizedUsageAmount`.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// order that's used to sort the data. Valid values are: `ASCENDING`,  `DESCENDING`.
	SortOrder pulumi.StringPtrInput `pulumi:"sortOrder"`
}

func (GetTagsSortByArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsSortBy)(nil)).Elem()
}

func (i GetTagsSortByArgs) ToGetTagsSortByOutput() GetTagsSortByOutput {
	return i.ToGetTagsSortByOutputWithContext(context.Background())
}

func (i GetTagsSortByArgs) ToGetTagsSortByOutputWithContext(ctx context.Context) GetTagsSortByOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsSortByOutput)
}

// GetTagsSortByArrayInput is an input type that accepts GetTagsSortByArray and GetTagsSortByArrayOutput values.
// You can construct a concrete instance of `GetTagsSortByArrayInput` via:
//
//	GetTagsSortByArray{ GetTagsSortByArgs{...} }
type GetTagsSortByArrayInput interface {
	pulumi.Input

	ToGetTagsSortByArrayOutput() GetTagsSortByArrayOutput
	ToGetTagsSortByArrayOutputWithContext(context.Context) GetTagsSortByArrayOutput
}

type GetTagsSortByArray []GetTagsSortByInput

func (GetTagsSortByArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTagsSortBy)(nil)).Elem()
}

func (i GetTagsSortByArray) ToGetTagsSortByArrayOutput() GetTagsSortByArrayOutput {
	return i.ToGetTagsSortByArrayOutputWithContext(context.Background())
}

func (i GetTagsSortByArray) ToGetTagsSortByArrayOutputWithContext(ctx context.Context) GetTagsSortByArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsSortByArrayOutput)
}

type GetTagsSortByOutput struct{ *pulumi.OutputState }

func (GetTagsSortByOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsSortBy)(nil)).Elem()
}

func (o GetTagsSortByOutput) ToGetTagsSortByOutput() GetTagsSortByOutput {
	return o
}

func (o GetTagsSortByOutput) ToGetTagsSortByOutputWithContext(ctx context.Context) GetTagsSortByOutput {
	return o
}

// key that's used to sort the data. Valid values are: `BlendedCost`,  `UnblendedCost`, `AmortizedCost`, `NetAmortizedCost`, `NetUnblendedCost`, `UsageQuantity`, `NormalizedUsageAmount`.
func (o GetTagsSortByOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTagsSortBy) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// order that's used to sort the data. Valid values are: `ASCENDING`,  `DESCENDING`.
func (o GetTagsSortByOutput) SortOrder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTagsSortBy) *string { return v.SortOrder }).(pulumi.StringPtrOutput)
}

type GetTagsSortByArrayOutput struct{ *pulumi.OutputState }

func (GetTagsSortByArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTagsSortBy)(nil)).Elem()
}

func (o GetTagsSortByArrayOutput) ToGetTagsSortByArrayOutput() GetTagsSortByArrayOutput {
	return o
}

func (o GetTagsSortByArrayOutput) ToGetTagsSortByArrayOutputWithContext(ctx context.Context) GetTagsSortByArrayOutput {
	return o
}

func (o GetTagsSortByArrayOutput) Index(i pulumi.IntInput) GetTagsSortByOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTagsSortBy {
		return vs[0].([]GetTagsSortBy)[vs[1].(int)]
	}).(GetTagsSortByOutput)
}

type GetTagsTimePeriod struct {
	// Beginning of the time period.
	End string `pulumi:"end"`
	// End of the time period.
	Start string `pulumi:"start"`
}

// GetTagsTimePeriodInput is an input type that accepts GetTagsTimePeriodArgs and GetTagsTimePeriodOutput values.
// You can construct a concrete instance of `GetTagsTimePeriodInput` via:
//
//	GetTagsTimePeriodArgs{...}
type GetTagsTimePeriodInput interface {
	pulumi.Input

	ToGetTagsTimePeriodOutput() GetTagsTimePeriodOutput
	ToGetTagsTimePeriodOutputWithContext(context.Context) GetTagsTimePeriodOutput
}

type GetTagsTimePeriodArgs struct {
	// Beginning of the time period.
	End pulumi.StringInput `pulumi:"end"`
	// End of the time period.
	Start pulumi.StringInput `pulumi:"start"`
}

func (GetTagsTimePeriodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsTimePeriod)(nil)).Elem()
}

func (i GetTagsTimePeriodArgs) ToGetTagsTimePeriodOutput() GetTagsTimePeriodOutput {
	return i.ToGetTagsTimePeriodOutputWithContext(context.Background())
}

func (i GetTagsTimePeriodArgs) ToGetTagsTimePeriodOutputWithContext(ctx context.Context) GetTagsTimePeriodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsTimePeriodOutput)
}

type GetTagsTimePeriodOutput struct{ *pulumi.OutputState }

func (GetTagsTimePeriodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsTimePeriod)(nil)).Elem()
}

func (o GetTagsTimePeriodOutput) ToGetTagsTimePeriodOutput() GetTagsTimePeriodOutput {
	return o
}

func (o GetTagsTimePeriodOutput) ToGetTagsTimePeriodOutputWithContext(ctx context.Context) GetTagsTimePeriodOutput {
	return o
}

// Beginning of the time period.
func (o GetTagsTimePeriodOutput) End() pulumi.StringOutput {
	return o.ApplyT(func(v GetTagsTimePeriod) string { return v.End }).(pulumi.StringOutput)
}

// End of the time period.
func (o GetTagsTimePeriodOutput) Start() pulumi.StringOutput {
	return o.ApplyT(func(v GetTagsTimePeriod) string { return v.Start }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalySubscriptionSubscriberInput)(nil)).Elem(), AnomalySubscriptionSubscriberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalySubscriptionSubscriberArrayInput)(nil)).Elem(), AnomalySubscriptionSubscriberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalySubscriptionThresholdExpressionInput)(nil)).Elem(), AnomalySubscriptionThresholdExpressionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalySubscriptionThresholdExpressionPtrInput)(nil)).Elem(), AnomalySubscriptionThresholdExpressionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalySubscriptionThresholdExpressionAndInput)(nil)).Elem(), AnomalySubscriptionThresholdExpressionAndArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalySubscriptionThresholdExpressionAndArrayInput)(nil)).Elem(), AnomalySubscriptionThresholdExpressionAndArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalySubscriptionThresholdExpressionAndCostCategoryInput)(nil)).Elem(), AnomalySubscriptionThresholdExpressionAndCostCategoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalySubscriptionThresholdExpressionAndCostCategoryPtrInput)(nil)).Elem(), AnomalySubscriptionThresholdExpressionAndCostCategoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalySubscriptionThresholdExpressionAndDimensionInput)(nil)).Elem(), AnomalySubscriptionThresholdExpressionAndDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalySubscriptionThresholdExpressionAndDimensionPtrInput)(nil)).Elem(), AnomalySubscriptionThresholdExpressionAndDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalySubscriptionThresholdExpressionAndTagsInput)(nil)).Elem(), AnomalySubscriptionThresholdExpressionAndTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalySubscriptionThresholdExpressionAndTagsPtrInput)(nil)).Elem(), AnomalySubscriptionThresholdExpressionAndTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalySubscriptionThresholdExpressionCostCategoryInput)(nil)).Elem(), AnomalySubscriptionThresholdExpressionCostCategoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalySubscriptionThresholdExpressionCostCategoryPtrInput)(nil)).Elem(), AnomalySubscriptionThresholdExpressionCostCategoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalySubscriptionThresholdExpressionDimensionInput)(nil)).Elem(), AnomalySubscriptionThresholdExpressionDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalySubscriptionThresholdExpressionDimensionPtrInput)(nil)).Elem(), AnomalySubscriptionThresholdExpressionDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalySubscriptionThresholdExpressionNotInput)(nil)).Elem(), AnomalySubscriptionThresholdExpressionNotArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalySubscriptionThresholdExpressionNotPtrInput)(nil)).Elem(), AnomalySubscriptionThresholdExpressionNotArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalySubscriptionThresholdExpressionNotCostCategoryInput)(nil)).Elem(), AnomalySubscriptionThresholdExpressionNotCostCategoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalySubscriptionThresholdExpressionNotCostCategoryPtrInput)(nil)).Elem(), AnomalySubscriptionThresholdExpressionNotCostCategoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalySubscriptionThresholdExpressionNotDimensionInput)(nil)).Elem(), AnomalySubscriptionThresholdExpressionNotDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalySubscriptionThresholdExpressionNotDimensionPtrInput)(nil)).Elem(), AnomalySubscriptionThresholdExpressionNotDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalySubscriptionThresholdExpressionNotTagsInput)(nil)).Elem(), AnomalySubscriptionThresholdExpressionNotTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalySubscriptionThresholdExpressionNotTagsPtrInput)(nil)).Elem(), AnomalySubscriptionThresholdExpressionNotTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalySubscriptionThresholdExpressionOrInput)(nil)).Elem(), AnomalySubscriptionThresholdExpressionOrArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalySubscriptionThresholdExpressionOrArrayInput)(nil)).Elem(), AnomalySubscriptionThresholdExpressionOrArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalySubscriptionThresholdExpressionOrCostCategoryInput)(nil)).Elem(), AnomalySubscriptionThresholdExpressionOrCostCategoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalySubscriptionThresholdExpressionOrCostCategoryPtrInput)(nil)).Elem(), AnomalySubscriptionThresholdExpressionOrCostCategoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalySubscriptionThresholdExpressionOrDimensionInput)(nil)).Elem(), AnomalySubscriptionThresholdExpressionOrDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalySubscriptionThresholdExpressionOrDimensionPtrInput)(nil)).Elem(), AnomalySubscriptionThresholdExpressionOrDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalySubscriptionThresholdExpressionOrTagsInput)(nil)).Elem(), AnomalySubscriptionThresholdExpressionOrTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalySubscriptionThresholdExpressionOrTagsPtrInput)(nil)).Elem(), AnomalySubscriptionThresholdExpressionOrTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalySubscriptionThresholdExpressionTagsInput)(nil)).Elem(), AnomalySubscriptionThresholdExpressionTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalySubscriptionThresholdExpressionTagsPtrInput)(nil)).Elem(), AnomalySubscriptionThresholdExpressionTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryRuleInput)(nil)).Elem(), CostCategoryRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryRuleArrayInput)(nil)).Elem(), CostCategoryRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryRuleInheritedValueInput)(nil)).Elem(), CostCategoryRuleInheritedValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryRuleInheritedValuePtrInput)(nil)).Elem(), CostCategoryRuleInheritedValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryRuleRuleInput)(nil)).Elem(), CostCategoryRuleRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryRuleRulePtrInput)(nil)).Elem(), CostCategoryRuleRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryRuleRuleAndInput)(nil)).Elem(), CostCategoryRuleRuleAndArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryRuleRuleAndArrayInput)(nil)).Elem(), CostCategoryRuleRuleAndArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryRuleRuleAndCostCategoryInput)(nil)).Elem(), CostCategoryRuleRuleAndCostCategoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryRuleRuleAndCostCategoryPtrInput)(nil)).Elem(), CostCategoryRuleRuleAndCostCategoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryRuleRuleAndDimensionInput)(nil)).Elem(), CostCategoryRuleRuleAndDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryRuleRuleAndDimensionPtrInput)(nil)).Elem(), CostCategoryRuleRuleAndDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryRuleRuleAndTagsInput)(nil)).Elem(), CostCategoryRuleRuleAndTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryRuleRuleAndTagsPtrInput)(nil)).Elem(), CostCategoryRuleRuleAndTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryRuleRuleCostCategoryInput)(nil)).Elem(), CostCategoryRuleRuleCostCategoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryRuleRuleCostCategoryPtrInput)(nil)).Elem(), CostCategoryRuleRuleCostCategoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryRuleRuleDimensionInput)(nil)).Elem(), CostCategoryRuleRuleDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryRuleRuleDimensionPtrInput)(nil)).Elem(), CostCategoryRuleRuleDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryRuleRuleNotInput)(nil)).Elem(), CostCategoryRuleRuleNotArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryRuleRuleNotPtrInput)(nil)).Elem(), CostCategoryRuleRuleNotArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryRuleRuleNotCostCategoryInput)(nil)).Elem(), CostCategoryRuleRuleNotCostCategoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryRuleRuleNotCostCategoryPtrInput)(nil)).Elem(), CostCategoryRuleRuleNotCostCategoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryRuleRuleNotDimensionInput)(nil)).Elem(), CostCategoryRuleRuleNotDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryRuleRuleNotDimensionPtrInput)(nil)).Elem(), CostCategoryRuleRuleNotDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryRuleRuleNotTagsInput)(nil)).Elem(), CostCategoryRuleRuleNotTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryRuleRuleNotTagsPtrInput)(nil)).Elem(), CostCategoryRuleRuleNotTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryRuleRuleOrInput)(nil)).Elem(), CostCategoryRuleRuleOrArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryRuleRuleOrArrayInput)(nil)).Elem(), CostCategoryRuleRuleOrArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryRuleRuleOrCostCategoryInput)(nil)).Elem(), CostCategoryRuleRuleOrCostCategoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryRuleRuleOrCostCategoryPtrInput)(nil)).Elem(), CostCategoryRuleRuleOrCostCategoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryRuleRuleOrDimensionInput)(nil)).Elem(), CostCategoryRuleRuleOrDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryRuleRuleOrDimensionPtrInput)(nil)).Elem(), CostCategoryRuleRuleOrDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryRuleRuleOrTagsInput)(nil)).Elem(), CostCategoryRuleRuleOrTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryRuleRuleOrTagsPtrInput)(nil)).Elem(), CostCategoryRuleRuleOrTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryRuleRuleTagsInput)(nil)).Elem(), CostCategoryRuleRuleTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryRuleRuleTagsPtrInput)(nil)).Elem(), CostCategoryRuleRuleTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategorySplitChargeRuleInput)(nil)).Elem(), CostCategorySplitChargeRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategorySplitChargeRuleArrayInput)(nil)).Elem(), CostCategorySplitChargeRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategorySplitChargeRuleParameterInput)(nil)).Elem(), CostCategorySplitChargeRuleParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategorySplitChargeRuleParameterArrayInput)(nil)).Elem(), CostCategorySplitChargeRuleParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategoryRuleInput)(nil)).Elem(), GetCostCategoryRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategoryRuleArrayInput)(nil)).Elem(), GetCostCategoryRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategoryRuleInheritedValueInput)(nil)).Elem(), GetCostCategoryRuleInheritedValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategoryRuleInheritedValueArrayInput)(nil)).Elem(), GetCostCategoryRuleInheritedValueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategoryRuleRuleInput)(nil)).Elem(), GetCostCategoryRuleRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategoryRuleRuleArrayInput)(nil)).Elem(), GetCostCategoryRuleRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategoryRuleRuleAndInput)(nil)).Elem(), GetCostCategoryRuleRuleAndArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategoryRuleRuleAndArrayInput)(nil)).Elem(), GetCostCategoryRuleRuleAndArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategoryRuleRuleAndCostCategoryInput)(nil)).Elem(), GetCostCategoryRuleRuleAndCostCategoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategoryRuleRuleAndCostCategoryArrayInput)(nil)).Elem(), GetCostCategoryRuleRuleAndCostCategoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategoryRuleRuleAndDimensionInput)(nil)).Elem(), GetCostCategoryRuleRuleAndDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategoryRuleRuleAndDimensionArrayInput)(nil)).Elem(), GetCostCategoryRuleRuleAndDimensionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategoryRuleRuleAndTagInput)(nil)).Elem(), GetCostCategoryRuleRuleAndTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategoryRuleRuleAndTagArrayInput)(nil)).Elem(), GetCostCategoryRuleRuleAndTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategoryRuleRuleCostCategoryInput)(nil)).Elem(), GetCostCategoryRuleRuleCostCategoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategoryRuleRuleCostCategoryArrayInput)(nil)).Elem(), GetCostCategoryRuleRuleCostCategoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategoryRuleRuleDimensionInput)(nil)).Elem(), GetCostCategoryRuleRuleDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategoryRuleRuleDimensionArrayInput)(nil)).Elem(), GetCostCategoryRuleRuleDimensionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategoryRuleRuleNotInput)(nil)).Elem(), GetCostCategoryRuleRuleNotArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategoryRuleRuleNotArrayInput)(nil)).Elem(), GetCostCategoryRuleRuleNotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategoryRuleRuleNotCostCategoryInput)(nil)).Elem(), GetCostCategoryRuleRuleNotCostCategoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategoryRuleRuleNotCostCategoryArrayInput)(nil)).Elem(), GetCostCategoryRuleRuleNotCostCategoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategoryRuleRuleNotDimensionInput)(nil)).Elem(), GetCostCategoryRuleRuleNotDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategoryRuleRuleNotDimensionArrayInput)(nil)).Elem(), GetCostCategoryRuleRuleNotDimensionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategoryRuleRuleNotTagInput)(nil)).Elem(), GetCostCategoryRuleRuleNotTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategoryRuleRuleNotTagArrayInput)(nil)).Elem(), GetCostCategoryRuleRuleNotTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategoryRuleRuleOrInput)(nil)).Elem(), GetCostCategoryRuleRuleOrArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategoryRuleRuleOrArrayInput)(nil)).Elem(), GetCostCategoryRuleRuleOrArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategoryRuleRuleOrCostCategoryInput)(nil)).Elem(), GetCostCategoryRuleRuleOrCostCategoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategoryRuleRuleOrCostCategoryArrayInput)(nil)).Elem(), GetCostCategoryRuleRuleOrCostCategoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategoryRuleRuleOrDimensionInput)(nil)).Elem(), GetCostCategoryRuleRuleOrDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategoryRuleRuleOrDimensionArrayInput)(nil)).Elem(), GetCostCategoryRuleRuleOrDimensionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategoryRuleRuleOrTagInput)(nil)).Elem(), GetCostCategoryRuleRuleOrTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategoryRuleRuleOrTagArrayInput)(nil)).Elem(), GetCostCategoryRuleRuleOrTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategoryRuleRuleTagInput)(nil)).Elem(), GetCostCategoryRuleRuleTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategoryRuleRuleTagArrayInput)(nil)).Elem(), GetCostCategoryRuleRuleTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategorySplitChargeRuleInput)(nil)).Elem(), GetCostCategorySplitChargeRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategorySplitChargeRuleArrayInput)(nil)).Elem(), GetCostCategorySplitChargeRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategorySplitChargeRuleParameterInput)(nil)).Elem(), GetCostCategorySplitChargeRuleParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCostCategorySplitChargeRuleParameterArrayInput)(nil)).Elem(), GetCostCategorySplitChargeRuleParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsFilterInput)(nil)).Elem(), GetTagsFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsFilterPtrInput)(nil)).Elem(), GetTagsFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsFilterAndInput)(nil)).Elem(), GetTagsFilterAndArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsFilterAndArrayInput)(nil)).Elem(), GetTagsFilterAndArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsFilterAndCostCategoryInput)(nil)).Elem(), GetTagsFilterAndCostCategoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsFilterAndCostCategoryPtrInput)(nil)).Elem(), GetTagsFilterAndCostCategoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsFilterAndDimensionInput)(nil)).Elem(), GetTagsFilterAndDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsFilterAndDimensionPtrInput)(nil)).Elem(), GetTagsFilterAndDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsFilterAndTagsInput)(nil)).Elem(), GetTagsFilterAndTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsFilterAndTagsPtrInput)(nil)).Elem(), GetTagsFilterAndTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsFilterCostCategoryInput)(nil)).Elem(), GetTagsFilterCostCategoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsFilterCostCategoryPtrInput)(nil)).Elem(), GetTagsFilterCostCategoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsFilterDimensionInput)(nil)).Elem(), GetTagsFilterDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsFilterDimensionPtrInput)(nil)).Elem(), GetTagsFilterDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsFilterNotInput)(nil)).Elem(), GetTagsFilterNotArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsFilterNotPtrInput)(nil)).Elem(), GetTagsFilterNotArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsFilterNotCostCategoryInput)(nil)).Elem(), GetTagsFilterNotCostCategoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsFilterNotCostCategoryPtrInput)(nil)).Elem(), GetTagsFilterNotCostCategoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsFilterNotDimensionInput)(nil)).Elem(), GetTagsFilterNotDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsFilterNotDimensionPtrInput)(nil)).Elem(), GetTagsFilterNotDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsFilterNotTagsInput)(nil)).Elem(), GetTagsFilterNotTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsFilterNotTagsPtrInput)(nil)).Elem(), GetTagsFilterNotTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsFilterOrInput)(nil)).Elem(), GetTagsFilterOrArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsFilterOrArrayInput)(nil)).Elem(), GetTagsFilterOrArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsFilterOrCostCategoryInput)(nil)).Elem(), GetTagsFilterOrCostCategoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsFilterOrCostCategoryPtrInput)(nil)).Elem(), GetTagsFilterOrCostCategoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsFilterOrDimensionInput)(nil)).Elem(), GetTagsFilterOrDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsFilterOrDimensionPtrInput)(nil)).Elem(), GetTagsFilterOrDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsFilterOrTagsInput)(nil)).Elem(), GetTagsFilterOrTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsFilterOrTagsPtrInput)(nil)).Elem(), GetTagsFilterOrTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsFilterTagsInput)(nil)).Elem(), GetTagsFilterTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsFilterTagsPtrInput)(nil)).Elem(), GetTagsFilterTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsSortByInput)(nil)).Elem(), GetTagsSortByArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsSortByArrayInput)(nil)).Elem(), GetTagsSortByArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsTimePeriodInput)(nil)).Elem(), GetTagsTimePeriodArgs{})
	pulumi.RegisterOutputType(AnomalySubscriptionSubscriberOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionSubscriberArrayOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionPtrOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionAndOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionAndArrayOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionAndCostCategoryOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionAndCostCategoryPtrOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionAndDimensionOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionAndDimensionPtrOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionAndTagsOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionAndTagsPtrOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionCostCategoryOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionCostCategoryPtrOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionDimensionOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionDimensionPtrOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionNotOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionNotPtrOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionNotCostCategoryOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionNotCostCategoryPtrOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionNotDimensionOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionNotDimensionPtrOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionNotTagsOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionNotTagsPtrOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionOrOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionOrArrayOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionOrCostCategoryOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionOrCostCategoryPtrOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionOrDimensionOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionOrDimensionPtrOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionOrTagsOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionOrTagsPtrOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionTagsOutput{})
	pulumi.RegisterOutputType(AnomalySubscriptionThresholdExpressionTagsPtrOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleArrayOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleInheritedValueOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleInheritedValuePtrOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRulePtrOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleAndOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleAndArrayOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleAndCostCategoryOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleAndCostCategoryPtrOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleAndDimensionOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleAndDimensionPtrOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleAndTagsOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleAndTagsPtrOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleCostCategoryOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleCostCategoryPtrOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleDimensionOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleDimensionPtrOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleNotOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleNotPtrOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleNotCostCategoryOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleNotCostCategoryPtrOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleNotDimensionOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleNotDimensionPtrOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleNotTagsOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleNotTagsPtrOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleOrOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleOrArrayOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleOrCostCategoryOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleOrCostCategoryPtrOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleOrDimensionOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleOrDimensionPtrOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleOrTagsOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleOrTagsPtrOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleTagsOutput{})
	pulumi.RegisterOutputType(CostCategoryRuleRuleTagsPtrOutput{})
	pulumi.RegisterOutputType(CostCategorySplitChargeRuleOutput{})
	pulumi.RegisterOutputType(CostCategorySplitChargeRuleArrayOutput{})
	pulumi.RegisterOutputType(CostCategorySplitChargeRuleParameterOutput{})
	pulumi.RegisterOutputType(CostCategorySplitChargeRuleParameterArrayOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleArrayOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleInheritedValueOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleInheritedValueArrayOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleArrayOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleAndOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleAndArrayOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleAndCostCategoryOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleAndCostCategoryArrayOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleAndDimensionOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleAndDimensionArrayOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleAndTagOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleAndTagArrayOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleCostCategoryOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleCostCategoryArrayOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleDimensionOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleDimensionArrayOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleNotOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleNotArrayOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleNotCostCategoryOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleNotCostCategoryArrayOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleNotDimensionOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleNotDimensionArrayOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleNotTagOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleNotTagArrayOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleOrOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleOrArrayOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleOrCostCategoryOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleOrCostCategoryArrayOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleOrDimensionOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleOrDimensionArrayOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleOrTagOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleOrTagArrayOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleTagOutput{})
	pulumi.RegisterOutputType(GetCostCategoryRuleRuleTagArrayOutput{})
	pulumi.RegisterOutputType(GetCostCategorySplitChargeRuleOutput{})
	pulumi.RegisterOutputType(GetCostCategorySplitChargeRuleArrayOutput{})
	pulumi.RegisterOutputType(GetCostCategorySplitChargeRuleParameterOutput{})
	pulumi.RegisterOutputType(GetCostCategorySplitChargeRuleParameterArrayOutput{})
	pulumi.RegisterOutputType(GetTagsFilterOutput{})
	pulumi.RegisterOutputType(GetTagsFilterPtrOutput{})
	pulumi.RegisterOutputType(GetTagsFilterAndOutput{})
	pulumi.RegisterOutputType(GetTagsFilterAndArrayOutput{})
	pulumi.RegisterOutputType(GetTagsFilterAndCostCategoryOutput{})
	pulumi.RegisterOutputType(GetTagsFilterAndCostCategoryPtrOutput{})
	pulumi.RegisterOutputType(GetTagsFilterAndDimensionOutput{})
	pulumi.RegisterOutputType(GetTagsFilterAndDimensionPtrOutput{})
	pulumi.RegisterOutputType(GetTagsFilterAndTagsOutput{})
	pulumi.RegisterOutputType(GetTagsFilterAndTagsPtrOutput{})
	pulumi.RegisterOutputType(GetTagsFilterCostCategoryOutput{})
	pulumi.RegisterOutputType(GetTagsFilterCostCategoryPtrOutput{})
	pulumi.RegisterOutputType(GetTagsFilterDimensionOutput{})
	pulumi.RegisterOutputType(GetTagsFilterDimensionPtrOutput{})
	pulumi.RegisterOutputType(GetTagsFilterNotOutput{})
	pulumi.RegisterOutputType(GetTagsFilterNotPtrOutput{})
	pulumi.RegisterOutputType(GetTagsFilterNotCostCategoryOutput{})
	pulumi.RegisterOutputType(GetTagsFilterNotCostCategoryPtrOutput{})
	pulumi.RegisterOutputType(GetTagsFilterNotDimensionOutput{})
	pulumi.RegisterOutputType(GetTagsFilterNotDimensionPtrOutput{})
	pulumi.RegisterOutputType(GetTagsFilterNotTagsOutput{})
	pulumi.RegisterOutputType(GetTagsFilterNotTagsPtrOutput{})
	pulumi.RegisterOutputType(GetTagsFilterOrOutput{})
	pulumi.RegisterOutputType(GetTagsFilterOrArrayOutput{})
	pulumi.RegisterOutputType(GetTagsFilterOrCostCategoryOutput{})
	pulumi.RegisterOutputType(GetTagsFilterOrCostCategoryPtrOutput{})
	pulumi.RegisterOutputType(GetTagsFilterOrDimensionOutput{})
	pulumi.RegisterOutputType(GetTagsFilterOrDimensionPtrOutput{})
	pulumi.RegisterOutputType(GetTagsFilterOrTagsOutput{})
	pulumi.RegisterOutputType(GetTagsFilterOrTagsPtrOutput{})
	pulumi.RegisterOutputType(GetTagsFilterTagsOutput{})
	pulumi.RegisterOutputType(GetTagsFilterTagsPtrOutput{})
	pulumi.RegisterOutputType(GetTagsSortByOutput{})
	pulumi.RegisterOutputType(GetTagsSortByArrayOutput{})
	pulumi.RegisterOutputType(GetTagsTimePeriodOutput{})
}
