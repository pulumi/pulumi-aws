// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package costexplorer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a CE Cost Allocation Tag.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/costexplorer"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := costexplorer.NewCostAllocationTag(ctx, "example", &costexplorer.CostAllocationTagArgs{
//				Status: pulumi.String("Active"),
//				TagKey: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// `aws_ce_cost_allocation_tag` can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import aws:costexplorer/costAllocationTag:CostAllocationTag example key
//
// ```
type CostAllocationTag struct {
	pulumi.CustomResourceState

	// The status of a cost allocation tag. Valid values are `Active` and `Inactive`.
	Status pulumi.StringOutput `pulumi:"status"`
	// The key for the cost allocation tag.
	TagKey pulumi.StringOutput `pulumi:"tagKey"`
	// The type of cost allocation tag.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewCostAllocationTag registers a new resource with the given unique name, arguments, and options.
func NewCostAllocationTag(ctx *pulumi.Context,
	name string, args *CostAllocationTagArgs, opts ...pulumi.ResourceOption) (*CostAllocationTag, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	if args.TagKey == nil {
		return nil, errors.New("invalid value for required argument 'TagKey'")
	}
	var resource CostAllocationTag
	err := ctx.RegisterResource("aws:costexplorer/costAllocationTag:CostAllocationTag", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCostAllocationTag gets an existing CostAllocationTag resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCostAllocationTag(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CostAllocationTagState, opts ...pulumi.ResourceOption) (*CostAllocationTag, error) {
	var resource CostAllocationTag
	err := ctx.ReadResource("aws:costexplorer/costAllocationTag:CostAllocationTag", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CostAllocationTag resources.
type costAllocationTagState struct {
	// The status of a cost allocation tag. Valid values are `Active` and `Inactive`.
	Status *string `pulumi:"status"`
	// The key for the cost allocation tag.
	TagKey *string `pulumi:"tagKey"`
	// The type of cost allocation tag.
	Type *string `pulumi:"type"`
}

type CostAllocationTagState struct {
	// The status of a cost allocation tag. Valid values are `Active` and `Inactive`.
	Status pulumi.StringPtrInput
	// The key for the cost allocation tag.
	TagKey pulumi.StringPtrInput
	// The type of cost allocation tag.
	Type pulumi.StringPtrInput
}

func (CostAllocationTagState) ElementType() reflect.Type {
	return reflect.TypeOf((*costAllocationTagState)(nil)).Elem()
}

type costAllocationTagArgs struct {
	// The status of a cost allocation tag. Valid values are `Active` and `Inactive`.
	Status string `pulumi:"status"`
	// The key for the cost allocation tag.
	TagKey string `pulumi:"tagKey"`
}

// The set of arguments for constructing a CostAllocationTag resource.
type CostAllocationTagArgs struct {
	// The status of a cost allocation tag. Valid values are `Active` and `Inactive`.
	Status pulumi.StringInput
	// The key for the cost allocation tag.
	TagKey pulumi.StringInput
}

func (CostAllocationTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*costAllocationTagArgs)(nil)).Elem()
}

type CostAllocationTagInput interface {
	pulumi.Input

	ToCostAllocationTagOutput() CostAllocationTagOutput
	ToCostAllocationTagOutputWithContext(ctx context.Context) CostAllocationTagOutput
}

func (*CostAllocationTag) ElementType() reflect.Type {
	return reflect.TypeOf((**CostAllocationTag)(nil)).Elem()
}

func (i *CostAllocationTag) ToCostAllocationTagOutput() CostAllocationTagOutput {
	return i.ToCostAllocationTagOutputWithContext(context.Background())
}

func (i *CostAllocationTag) ToCostAllocationTagOutputWithContext(ctx context.Context) CostAllocationTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostAllocationTagOutput)
}

// CostAllocationTagArrayInput is an input type that accepts CostAllocationTagArray and CostAllocationTagArrayOutput values.
// You can construct a concrete instance of `CostAllocationTagArrayInput` via:
//
//	CostAllocationTagArray{ CostAllocationTagArgs{...} }
type CostAllocationTagArrayInput interface {
	pulumi.Input

	ToCostAllocationTagArrayOutput() CostAllocationTagArrayOutput
	ToCostAllocationTagArrayOutputWithContext(context.Context) CostAllocationTagArrayOutput
}

type CostAllocationTagArray []CostAllocationTagInput

func (CostAllocationTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CostAllocationTag)(nil)).Elem()
}

func (i CostAllocationTagArray) ToCostAllocationTagArrayOutput() CostAllocationTagArrayOutput {
	return i.ToCostAllocationTagArrayOutputWithContext(context.Background())
}

func (i CostAllocationTagArray) ToCostAllocationTagArrayOutputWithContext(ctx context.Context) CostAllocationTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostAllocationTagArrayOutput)
}

// CostAllocationTagMapInput is an input type that accepts CostAllocationTagMap and CostAllocationTagMapOutput values.
// You can construct a concrete instance of `CostAllocationTagMapInput` via:
//
//	CostAllocationTagMap{ "key": CostAllocationTagArgs{...} }
type CostAllocationTagMapInput interface {
	pulumi.Input

	ToCostAllocationTagMapOutput() CostAllocationTagMapOutput
	ToCostAllocationTagMapOutputWithContext(context.Context) CostAllocationTagMapOutput
}

type CostAllocationTagMap map[string]CostAllocationTagInput

func (CostAllocationTagMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CostAllocationTag)(nil)).Elem()
}

func (i CostAllocationTagMap) ToCostAllocationTagMapOutput() CostAllocationTagMapOutput {
	return i.ToCostAllocationTagMapOutputWithContext(context.Background())
}

func (i CostAllocationTagMap) ToCostAllocationTagMapOutputWithContext(ctx context.Context) CostAllocationTagMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostAllocationTagMapOutput)
}

type CostAllocationTagOutput struct{ *pulumi.OutputState }

func (CostAllocationTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CostAllocationTag)(nil)).Elem()
}

func (o CostAllocationTagOutput) ToCostAllocationTagOutput() CostAllocationTagOutput {
	return o
}

func (o CostAllocationTagOutput) ToCostAllocationTagOutputWithContext(ctx context.Context) CostAllocationTagOutput {
	return o
}

// The status of a cost allocation tag. Valid values are `Active` and `Inactive`.
func (o CostAllocationTagOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *CostAllocationTag) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The key for the cost allocation tag.
func (o CostAllocationTagOutput) TagKey() pulumi.StringOutput {
	return o.ApplyT(func(v *CostAllocationTag) pulumi.StringOutput { return v.TagKey }).(pulumi.StringOutput)
}

// The type of cost allocation tag.
func (o CostAllocationTagOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *CostAllocationTag) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type CostAllocationTagArrayOutput struct{ *pulumi.OutputState }

func (CostAllocationTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CostAllocationTag)(nil)).Elem()
}

func (o CostAllocationTagArrayOutput) ToCostAllocationTagArrayOutput() CostAllocationTagArrayOutput {
	return o
}

func (o CostAllocationTagArrayOutput) ToCostAllocationTagArrayOutputWithContext(ctx context.Context) CostAllocationTagArrayOutput {
	return o
}

func (o CostAllocationTagArrayOutput) Index(i pulumi.IntInput) CostAllocationTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CostAllocationTag {
		return vs[0].([]*CostAllocationTag)[vs[1].(int)]
	}).(CostAllocationTagOutput)
}

type CostAllocationTagMapOutput struct{ *pulumi.OutputState }

func (CostAllocationTagMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CostAllocationTag)(nil)).Elem()
}

func (o CostAllocationTagMapOutput) ToCostAllocationTagMapOutput() CostAllocationTagMapOutput {
	return o
}

func (o CostAllocationTagMapOutput) ToCostAllocationTagMapOutputWithContext(ctx context.Context) CostAllocationTagMapOutput {
	return o
}

func (o CostAllocationTagMapOutput) MapIndex(k pulumi.StringInput) CostAllocationTagOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CostAllocationTag {
		return vs[0].(map[string]*CostAllocationTag)[vs[1].(string)]
	}).(CostAllocationTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CostAllocationTagInput)(nil)).Elem(), &CostAllocationTag{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostAllocationTagArrayInput)(nil)).Elem(), CostAllocationTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostAllocationTagMapInput)(nil)).Elem(), CostAllocationTagMap{})
	pulumi.RegisterOutputType(CostAllocationTagOutput{})
	pulumi.RegisterOutputType(CostAllocationTagArrayOutput{})
	pulumi.RegisterOutputType(CostAllocationTagMapOutput{})
}
