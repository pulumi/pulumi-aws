// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package costexplorer

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CostCategory struct {
	pulumi.CustomResourceState

	Arn              pulumi.StringOutput                    `pulumi:"arn"`
	DefaultValue     pulumi.StringPtrOutput                 `pulumi:"defaultValue"`
	EffectiveEnd     pulumi.StringOutput                    `pulumi:"effectiveEnd"`
	EffectiveStart   pulumi.StringOutput                    `pulumi:"effectiveStart"`
	Name             pulumi.StringOutput                    `pulumi:"name"`
	RuleVersion      pulumi.StringOutput                    `pulumi:"ruleVersion"`
	Rules            CostCategoryRuleArrayOutput            `pulumi:"rules"`
	SplitChargeRules CostCategorySplitChargeRuleArrayOutput `pulumi:"splitChargeRules"`
	Tags             pulumi.StringMapOutput                 `pulumi:"tags"`
	TagsAll          pulumi.StringMapOutput                 `pulumi:"tagsAll"`
}

// NewCostCategory registers a new resource with the given unique name, arguments, and options.
func NewCostCategory(ctx *pulumi.Context,
	name string, args *CostCategoryArgs, opts ...pulumi.ResourceOption) (*CostCategory, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RuleVersion == nil {
		return nil, errors.New("invalid value for required argument 'RuleVersion'")
	}
	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	var resource CostCategory
	err := ctx.RegisterResource("aws:costexplorer/costCategory:CostCategory", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCostCategory gets an existing CostCategory resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCostCategory(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CostCategoryState, opts ...pulumi.ResourceOption) (*CostCategory, error) {
	var resource CostCategory
	err := ctx.ReadResource("aws:costexplorer/costCategory:CostCategory", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CostCategory resources.
type costCategoryState struct {
	Arn              *string                       `pulumi:"arn"`
	DefaultValue     *string                       `pulumi:"defaultValue"`
	EffectiveEnd     *string                       `pulumi:"effectiveEnd"`
	EffectiveStart   *string                       `pulumi:"effectiveStart"`
	Name             *string                       `pulumi:"name"`
	RuleVersion      *string                       `pulumi:"ruleVersion"`
	Rules            []CostCategoryRule            `pulumi:"rules"`
	SplitChargeRules []CostCategorySplitChargeRule `pulumi:"splitChargeRules"`
	Tags             map[string]string             `pulumi:"tags"`
	TagsAll          map[string]string             `pulumi:"tagsAll"`
}

type CostCategoryState struct {
	Arn              pulumi.StringPtrInput
	DefaultValue     pulumi.StringPtrInput
	EffectiveEnd     pulumi.StringPtrInput
	EffectiveStart   pulumi.StringPtrInput
	Name             pulumi.StringPtrInput
	RuleVersion      pulumi.StringPtrInput
	Rules            CostCategoryRuleArrayInput
	SplitChargeRules CostCategorySplitChargeRuleArrayInput
	Tags             pulumi.StringMapInput
	TagsAll          pulumi.StringMapInput
}

func (CostCategoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*costCategoryState)(nil)).Elem()
}

type costCategoryArgs struct {
	DefaultValue     *string                       `pulumi:"defaultValue"`
	EffectiveStart   *string                       `pulumi:"effectiveStart"`
	Name             *string                       `pulumi:"name"`
	RuleVersion      string                        `pulumi:"ruleVersion"`
	Rules            []CostCategoryRule            `pulumi:"rules"`
	SplitChargeRules []CostCategorySplitChargeRule `pulumi:"splitChargeRules"`
	Tags             map[string]string             `pulumi:"tags"`
}

// The set of arguments for constructing a CostCategory resource.
type CostCategoryArgs struct {
	DefaultValue     pulumi.StringPtrInput
	EffectiveStart   pulumi.StringPtrInput
	Name             pulumi.StringPtrInput
	RuleVersion      pulumi.StringInput
	Rules            CostCategoryRuleArrayInput
	SplitChargeRules CostCategorySplitChargeRuleArrayInput
	Tags             pulumi.StringMapInput
}

func (CostCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*costCategoryArgs)(nil)).Elem()
}

type CostCategoryInput interface {
	pulumi.Input

	ToCostCategoryOutput() CostCategoryOutput
	ToCostCategoryOutputWithContext(ctx context.Context) CostCategoryOutput
}

func (*CostCategory) ElementType() reflect.Type {
	return reflect.TypeOf((**CostCategory)(nil)).Elem()
}

func (i *CostCategory) ToCostCategoryOutput() CostCategoryOutput {
	return i.ToCostCategoryOutputWithContext(context.Background())
}

func (i *CostCategory) ToCostCategoryOutputWithContext(ctx context.Context) CostCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryOutput)
}

// CostCategoryArrayInput is an input type that accepts CostCategoryArray and CostCategoryArrayOutput values.
// You can construct a concrete instance of `CostCategoryArrayInput` via:
//
//	CostCategoryArray{ CostCategoryArgs{...} }
type CostCategoryArrayInput interface {
	pulumi.Input

	ToCostCategoryArrayOutput() CostCategoryArrayOutput
	ToCostCategoryArrayOutputWithContext(context.Context) CostCategoryArrayOutput
}

type CostCategoryArray []CostCategoryInput

func (CostCategoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CostCategory)(nil)).Elem()
}

func (i CostCategoryArray) ToCostCategoryArrayOutput() CostCategoryArrayOutput {
	return i.ToCostCategoryArrayOutputWithContext(context.Background())
}

func (i CostCategoryArray) ToCostCategoryArrayOutputWithContext(ctx context.Context) CostCategoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryArrayOutput)
}

// CostCategoryMapInput is an input type that accepts CostCategoryMap and CostCategoryMapOutput values.
// You can construct a concrete instance of `CostCategoryMapInput` via:
//
//	CostCategoryMap{ "key": CostCategoryArgs{...} }
type CostCategoryMapInput interface {
	pulumi.Input

	ToCostCategoryMapOutput() CostCategoryMapOutput
	ToCostCategoryMapOutputWithContext(context.Context) CostCategoryMapOutput
}

type CostCategoryMap map[string]CostCategoryInput

func (CostCategoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CostCategory)(nil)).Elem()
}

func (i CostCategoryMap) ToCostCategoryMapOutput() CostCategoryMapOutput {
	return i.ToCostCategoryMapOutputWithContext(context.Background())
}

func (i CostCategoryMap) ToCostCategoryMapOutputWithContext(ctx context.Context) CostCategoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostCategoryMapOutput)
}

type CostCategoryOutput struct{ *pulumi.OutputState }

func (CostCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CostCategory)(nil)).Elem()
}

func (o CostCategoryOutput) ToCostCategoryOutput() CostCategoryOutput {
	return o
}

func (o CostCategoryOutput) ToCostCategoryOutputWithContext(ctx context.Context) CostCategoryOutput {
	return o
}

func (o CostCategoryOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *CostCategory) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o CostCategoryOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CostCategory) pulumi.StringPtrOutput { return v.DefaultValue }).(pulumi.StringPtrOutput)
}

func (o CostCategoryOutput) EffectiveEnd() pulumi.StringOutput {
	return o.ApplyT(func(v *CostCategory) pulumi.StringOutput { return v.EffectiveEnd }).(pulumi.StringOutput)
}

func (o CostCategoryOutput) EffectiveStart() pulumi.StringOutput {
	return o.ApplyT(func(v *CostCategory) pulumi.StringOutput { return v.EffectiveStart }).(pulumi.StringOutput)
}

func (o CostCategoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CostCategory) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CostCategoryOutput) RuleVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *CostCategory) pulumi.StringOutput { return v.RuleVersion }).(pulumi.StringOutput)
}

func (o CostCategoryOutput) Rules() CostCategoryRuleArrayOutput {
	return o.ApplyT(func(v *CostCategory) CostCategoryRuleArrayOutput { return v.Rules }).(CostCategoryRuleArrayOutput)
}

func (o CostCategoryOutput) SplitChargeRules() CostCategorySplitChargeRuleArrayOutput {
	return o.ApplyT(func(v *CostCategory) CostCategorySplitChargeRuleArrayOutput { return v.SplitChargeRules }).(CostCategorySplitChargeRuleArrayOutput)
}

func (o CostCategoryOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CostCategory) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o CostCategoryOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CostCategory) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type CostCategoryArrayOutput struct{ *pulumi.OutputState }

func (CostCategoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CostCategory)(nil)).Elem()
}

func (o CostCategoryArrayOutput) ToCostCategoryArrayOutput() CostCategoryArrayOutput {
	return o
}

func (o CostCategoryArrayOutput) ToCostCategoryArrayOutputWithContext(ctx context.Context) CostCategoryArrayOutput {
	return o
}

func (o CostCategoryArrayOutput) Index(i pulumi.IntInput) CostCategoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CostCategory {
		return vs[0].([]*CostCategory)[vs[1].(int)]
	}).(CostCategoryOutput)
}

type CostCategoryMapOutput struct{ *pulumi.OutputState }

func (CostCategoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CostCategory)(nil)).Elem()
}

func (o CostCategoryMapOutput) ToCostCategoryMapOutput() CostCategoryMapOutput {
	return o
}

func (o CostCategoryMapOutput) ToCostCategoryMapOutputWithContext(ctx context.Context) CostCategoryMapOutput {
	return o
}

func (o CostCategoryMapOutput) MapIndex(k pulumi.StringInput) CostCategoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CostCategory {
		return vs[0].(map[string]*CostCategory)[vs[1].(string)]
	}).(CostCategoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryInput)(nil)).Elem(), &CostCategory{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryArrayInput)(nil)).Elem(), CostCategoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostCategoryMapInput)(nil)).Elem(), CostCategoryMap{})
	pulumi.RegisterOutputType(CostCategoryOutput{})
	pulumi.RegisterOutputType(CostCategoryArrayOutput{})
	pulumi.RegisterOutputType(CostCategoryMapOutput{})
}
