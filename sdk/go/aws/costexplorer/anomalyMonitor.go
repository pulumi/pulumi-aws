// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package costexplorer

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AnomalyMonitor struct {
	pulumi.CustomResourceState

	Arn                  pulumi.StringOutput    `pulumi:"arn"`
	MonitorDimension     pulumi.StringPtrOutput `pulumi:"monitorDimension"`
	MonitorSpecification pulumi.StringPtrOutput `pulumi:"monitorSpecification"`
	MonitorType          pulumi.StringOutput    `pulumi:"monitorType"`
	Name                 pulumi.StringOutput    `pulumi:"name"`
	Tags                 pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll              pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewAnomalyMonitor registers a new resource with the given unique name, arguments, and options.
func NewAnomalyMonitor(ctx *pulumi.Context,
	name string, args *AnomalyMonitorArgs, opts ...pulumi.ResourceOption) (*AnomalyMonitor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MonitorType == nil {
		return nil, errors.New("invalid value for required argument 'MonitorType'")
	}
	var resource AnomalyMonitor
	err := ctx.RegisterResource("aws:costexplorer/anomalyMonitor:AnomalyMonitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAnomalyMonitor gets an existing AnomalyMonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAnomalyMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AnomalyMonitorState, opts ...pulumi.ResourceOption) (*AnomalyMonitor, error) {
	var resource AnomalyMonitor
	err := ctx.ReadResource("aws:costexplorer/anomalyMonitor:AnomalyMonitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AnomalyMonitor resources.
type anomalyMonitorState struct {
	Arn                  *string           `pulumi:"arn"`
	MonitorDimension     *string           `pulumi:"monitorDimension"`
	MonitorSpecification *string           `pulumi:"monitorSpecification"`
	MonitorType          *string           `pulumi:"monitorType"`
	Name                 *string           `pulumi:"name"`
	Tags                 map[string]string `pulumi:"tags"`
	TagsAll              map[string]string `pulumi:"tagsAll"`
}

type AnomalyMonitorState struct {
	Arn                  pulumi.StringPtrInput
	MonitorDimension     pulumi.StringPtrInput
	MonitorSpecification pulumi.StringPtrInput
	MonitorType          pulumi.StringPtrInput
	Name                 pulumi.StringPtrInput
	Tags                 pulumi.StringMapInput
	TagsAll              pulumi.StringMapInput
}

func (AnomalyMonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*anomalyMonitorState)(nil)).Elem()
}

type anomalyMonitorArgs struct {
	MonitorDimension     *string           `pulumi:"monitorDimension"`
	MonitorSpecification *string           `pulumi:"monitorSpecification"`
	MonitorType          string            `pulumi:"monitorType"`
	Name                 *string           `pulumi:"name"`
	Tags                 map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a AnomalyMonitor resource.
type AnomalyMonitorArgs struct {
	MonitorDimension     pulumi.StringPtrInput
	MonitorSpecification pulumi.StringPtrInput
	MonitorType          pulumi.StringInput
	Name                 pulumi.StringPtrInput
	Tags                 pulumi.StringMapInput
}

func (AnomalyMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*anomalyMonitorArgs)(nil)).Elem()
}

type AnomalyMonitorInput interface {
	pulumi.Input

	ToAnomalyMonitorOutput() AnomalyMonitorOutput
	ToAnomalyMonitorOutputWithContext(ctx context.Context) AnomalyMonitorOutput
}

func (*AnomalyMonitor) ElementType() reflect.Type {
	return reflect.TypeOf((**AnomalyMonitor)(nil)).Elem()
}

func (i *AnomalyMonitor) ToAnomalyMonitorOutput() AnomalyMonitorOutput {
	return i.ToAnomalyMonitorOutputWithContext(context.Background())
}

func (i *AnomalyMonitor) ToAnomalyMonitorOutputWithContext(ctx context.Context) AnomalyMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalyMonitorOutput)
}

// AnomalyMonitorArrayInput is an input type that accepts AnomalyMonitorArray and AnomalyMonitorArrayOutput values.
// You can construct a concrete instance of `AnomalyMonitorArrayInput` via:
//
//	AnomalyMonitorArray{ AnomalyMonitorArgs{...} }
type AnomalyMonitorArrayInput interface {
	pulumi.Input

	ToAnomalyMonitorArrayOutput() AnomalyMonitorArrayOutput
	ToAnomalyMonitorArrayOutputWithContext(context.Context) AnomalyMonitorArrayOutput
}

type AnomalyMonitorArray []AnomalyMonitorInput

func (AnomalyMonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AnomalyMonitor)(nil)).Elem()
}

func (i AnomalyMonitorArray) ToAnomalyMonitorArrayOutput() AnomalyMonitorArrayOutput {
	return i.ToAnomalyMonitorArrayOutputWithContext(context.Background())
}

func (i AnomalyMonitorArray) ToAnomalyMonitorArrayOutputWithContext(ctx context.Context) AnomalyMonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalyMonitorArrayOutput)
}

// AnomalyMonitorMapInput is an input type that accepts AnomalyMonitorMap and AnomalyMonitorMapOutput values.
// You can construct a concrete instance of `AnomalyMonitorMapInput` via:
//
//	AnomalyMonitorMap{ "key": AnomalyMonitorArgs{...} }
type AnomalyMonitorMapInput interface {
	pulumi.Input

	ToAnomalyMonitorMapOutput() AnomalyMonitorMapOutput
	ToAnomalyMonitorMapOutputWithContext(context.Context) AnomalyMonitorMapOutput
}

type AnomalyMonitorMap map[string]AnomalyMonitorInput

func (AnomalyMonitorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AnomalyMonitor)(nil)).Elem()
}

func (i AnomalyMonitorMap) ToAnomalyMonitorMapOutput() AnomalyMonitorMapOutput {
	return i.ToAnomalyMonitorMapOutputWithContext(context.Background())
}

func (i AnomalyMonitorMap) ToAnomalyMonitorMapOutputWithContext(ctx context.Context) AnomalyMonitorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalyMonitorMapOutput)
}

type AnomalyMonitorOutput struct{ *pulumi.OutputState }

func (AnomalyMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnomalyMonitor)(nil)).Elem()
}

func (o AnomalyMonitorOutput) ToAnomalyMonitorOutput() AnomalyMonitorOutput {
	return o
}

func (o AnomalyMonitorOutput) ToAnomalyMonitorOutputWithContext(ctx context.Context) AnomalyMonitorOutput {
	return o
}

func (o AnomalyMonitorOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *AnomalyMonitor) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o AnomalyMonitorOutput) MonitorDimension() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnomalyMonitor) pulumi.StringPtrOutput { return v.MonitorDimension }).(pulumi.StringPtrOutput)
}

func (o AnomalyMonitorOutput) MonitorSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnomalyMonitor) pulumi.StringPtrOutput { return v.MonitorSpecification }).(pulumi.StringPtrOutput)
}

func (o AnomalyMonitorOutput) MonitorType() pulumi.StringOutput {
	return o.ApplyT(func(v *AnomalyMonitor) pulumi.StringOutput { return v.MonitorType }).(pulumi.StringOutput)
}

func (o AnomalyMonitorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AnomalyMonitor) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o AnomalyMonitorOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AnomalyMonitor) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o AnomalyMonitorOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AnomalyMonitor) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type AnomalyMonitorArrayOutput struct{ *pulumi.OutputState }

func (AnomalyMonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AnomalyMonitor)(nil)).Elem()
}

func (o AnomalyMonitorArrayOutput) ToAnomalyMonitorArrayOutput() AnomalyMonitorArrayOutput {
	return o
}

func (o AnomalyMonitorArrayOutput) ToAnomalyMonitorArrayOutputWithContext(ctx context.Context) AnomalyMonitorArrayOutput {
	return o
}

func (o AnomalyMonitorArrayOutput) Index(i pulumi.IntInput) AnomalyMonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AnomalyMonitor {
		return vs[0].([]*AnomalyMonitor)[vs[1].(int)]
	}).(AnomalyMonitorOutput)
}

type AnomalyMonitorMapOutput struct{ *pulumi.OutputState }

func (AnomalyMonitorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AnomalyMonitor)(nil)).Elem()
}

func (o AnomalyMonitorMapOutput) ToAnomalyMonitorMapOutput() AnomalyMonitorMapOutput {
	return o
}

func (o AnomalyMonitorMapOutput) ToAnomalyMonitorMapOutputWithContext(ctx context.Context) AnomalyMonitorMapOutput {
	return o
}

func (o AnomalyMonitorMapOutput) MapIndex(k pulumi.StringInput) AnomalyMonitorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AnomalyMonitor {
		return vs[0].(map[string]*AnomalyMonitor)[vs[1].(string)]
	}).(AnomalyMonitorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalyMonitorInput)(nil)).Elem(), &AnomalyMonitor{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalyMonitorArrayInput)(nil)).Elem(), AnomalyMonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalyMonitorMapInput)(nil)).Elem(), AnomalyMonitorMap{})
	pulumi.RegisterOutputType(AnomalyMonitorOutput{})
	pulumi.RegisterOutputType(AnomalyMonitorArrayOutput{})
	pulumi.RegisterOutputType(AnomalyMonitorMapOutput{})
}
