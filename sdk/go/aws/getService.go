// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to compose and decompose AWS service DNS names.
//
// ## Example Usage
// ### Get Service DNS Name
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := aws.GetRegion(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = aws.GetService(ctx, &aws.GetServiceArgs{
//				Region:    pulumi.StringRef(current.Name),
//				ServiceId: pulumi.StringRef("ec2"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Use Service Reverse DNS Name to Get Components
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aws.GetService(ctx, &aws.GetServiceArgs{
//				ReverseDnsName: pulumi.StringRef("cn.com.amazonaws.cn-north-1.s3"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Determine Regional Support for a Service
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aws.GetService(ctx, &aws.GetServiceArgs{
//				ReverseDnsName: pulumi.StringRef("com.amazonaws.us-gov-west-1.waf"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetService(ctx *pulumi.Context, args *GetServiceArgs, opts ...pulumi.InvokeOption) (*GetServiceResult, error) {
	var rv GetServiceResult
	err := ctx.Invoke("aws:index/getService:getService", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getService.
type GetServiceArgs struct {
	// DNS name of the service (_e.g.,_ `rds.us-east-1.amazonaws.com`). One of `dnsName`, `reverseDnsName`, or `serviceId` is required.
	DnsName *string `pulumi:"dnsName"`
	// Region of the service (_e.g.,_ `us-west-2`, `ap-northeast-1`).
	Region *string `pulumi:"region"`
	// Reverse DNS name of the service (_e.g.,_ `com.amazonaws.us-west-2.s3`). One of `dnsName`, `reverseDnsName`, or `serviceId` is required.
	ReverseDnsName *string `pulumi:"reverseDnsName"`
	// Prefix of the service (_e.g.,_ `com.amazonaws` in AWS Commercial, `cn.com.amazonaws` in AWS China).
	ReverseDnsPrefix *string `pulumi:"reverseDnsPrefix"`
	// Service (_e.g.,_ `s3`, `rds`, `ec2`). One of `dnsName`, `reverseDnsName`, or `serviceId` is required.
	ServiceId *string `pulumi:"serviceId"`
}

// A collection of values returned by getService.
type GetServiceResult struct {
	DnsName string `pulumi:"dnsName"`
	// The provider-assigned unique ID for this managed resource.
	Id               string `pulumi:"id"`
	Partition        string `pulumi:"partition"`
	Region           string `pulumi:"region"`
	ReverseDnsName   string `pulumi:"reverseDnsName"`
	ReverseDnsPrefix string `pulumi:"reverseDnsPrefix"`
	ServiceId        string `pulumi:"serviceId"`
	// Whether the service is supported in the region's partition. New services may not be listed immediately as supported.
	Supported bool `pulumi:"supported"`
}

func GetServiceOutput(ctx *pulumi.Context, args GetServiceOutputArgs, opts ...pulumi.InvokeOption) GetServiceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetServiceResult, error) {
			args := v.(GetServiceArgs)
			r, err := GetService(ctx, &args, opts...)
			var s GetServiceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetServiceResultOutput)
}

// A collection of arguments for invoking getService.
type GetServiceOutputArgs struct {
	// DNS name of the service (_e.g.,_ `rds.us-east-1.amazonaws.com`). One of `dnsName`, `reverseDnsName`, or `serviceId` is required.
	DnsName pulumi.StringPtrInput `pulumi:"dnsName"`
	// Region of the service (_e.g.,_ `us-west-2`, `ap-northeast-1`).
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Reverse DNS name of the service (_e.g.,_ `com.amazonaws.us-west-2.s3`). One of `dnsName`, `reverseDnsName`, or `serviceId` is required.
	ReverseDnsName pulumi.StringPtrInput `pulumi:"reverseDnsName"`
	// Prefix of the service (_e.g.,_ `com.amazonaws` in AWS Commercial, `cn.com.amazonaws` in AWS China).
	ReverseDnsPrefix pulumi.StringPtrInput `pulumi:"reverseDnsPrefix"`
	// Service (_e.g.,_ `s3`, `rds`, `ec2`). One of `dnsName`, `reverseDnsName`, or `serviceId` is required.
	ServiceId pulumi.StringPtrInput `pulumi:"serviceId"`
}

func (GetServiceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceArgs)(nil)).Elem()
}

// A collection of values returned by getService.
type GetServiceResultOutput struct{ *pulumi.OutputState }

func (GetServiceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceResult)(nil)).Elem()
}

func (o GetServiceResultOutput) ToGetServiceResultOutput() GetServiceResultOutput {
	return o
}

func (o GetServiceResultOutput) ToGetServiceResultOutputWithContext(ctx context.Context) GetServiceResultOutput {
	return o
}

func (o GetServiceResultOutput) DnsName() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceResult) string { return v.DnsName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetServiceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetServiceResultOutput) Partition() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceResult) string { return v.Partition }).(pulumi.StringOutput)
}

func (o GetServiceResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceResult) string { return v.Region }).(pulumi.StringOutput)
}

func (o GetServiceResultOutput) ReverseDnsName() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceResult) string { return v.ReverseDnsName }).(pulumi.StringOutput)
}

func (o GetServiceResultOutput) ReverseDnsPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceResult) string { return v.ReverseDnsPrefix }).(pulumi.StringOutput)
}

func (o GetServiceResultOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceResult) string { return v.ServiceId }).(pulumi.StringOutput)
}

// Whether the service is supported in the region's partition. New services may not be listed immediately as supported.
func (o GetServiceResultOutput) Supported() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServiceResult) bool { return v.Supported }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(GetServiceResultOutput{})
}
