// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package inspector

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Inspector assessment template
type AssessmentTemplate struct {
	s *pulumi.ResourceState
}

// NewAssessmentTemplate registers a new resource with the given unique name, arguments, and options.
func NewAssessmentTemplate(ctx *pulumi.Context,
	name string, args *AssessmentTemplateArgs, opts ...pulumi.ResourceOpt) (*AssessmentTemplate, error) {
	if args == nil || args.Duration == nil {
		return nil, errors.New("missing required argument 'Duration'")
	}
	if args == nil || args.RulesPackageArns == nil {
		return nil, errors.New("missing required argument 'RulesPackageArns'")
	}
	if args == nil || args.TargetArn == nil {
		return nil, errors.New("missing required argument 'TargetArn'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["duration"] = nil
		inputs["name"] = nil
		inputs["rulesPackageArns"] = nil
		inputs["targetArn"] = nil
	} else {
		inputs["duration"] = args.Duration
		inputs["name"] = args.Name
		inputs["rulesPackageArns"] = args.RulesPackageArns
		inputs["targetArn"] = args.TargetArn
	}
	inputs["arn"] = nil
	s, err := ctx.RegisterResource("aws:inspector/assessmentTemplate:AssessmentTemplate", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AssessmentTemplate{s: s}, nil
}

// GetAssessmentTemplate gets an existing AssessmentTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssessmentTemplate(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AssessmentTemplateState, opts ...pulumi.ResourceOpt) (*AssessmentTemplate, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["duration"] = state.Duration
		inputs["name"] = state.Name
		inputs["rulesPackageArns"] = state.RulesPackageArns
		inputs["targetArn"] = state.TargetArn
	}
	s, err := ctx.ReadResource("aws:inspector/assessmentTemplate:AssessmentTemplate", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AssessmentTemplate{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AssessmentTemplate) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AssessmentTemplate) ID() *pulumi.IDOutput {
	return r.s.ID
}

// The template assessment ARN.
func (r *AssessmentTemplate) Arn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["arn"])
}

// The duration of the inspector run.
func (r *AssessmentTemplate) Duration() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["duration"])
}

// The name of the assessment template.
func (r *AssessmentTemplate) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The rules to be used during the run.
func (r *AssessmentTemplate) RulesPackageArns() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["rulesPackageArns"])
}

// The assessment target ARN to attach the template to.
func (r *AssessmentTemplate) TargetArn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["targetArn"])
}

// Input properties used for looking up and filtering AssessmentTemplate resources.
type AssessmentTemplateState struct {
	// The template assessment ARN.
	Arn interface{}
	// The duration of the inspector run.
	Duration interface{}
	// The name of the assessment template.
	Name interface{}
	// The rules to be used during the run.
	RulesPackageArns interface{}
	// The assessment target ARN to attach the template to.
	TargetArn interface{}
}

// The set of arguments for constructing a AssessmentTemplate resource.
type AssessmentTemplateArgs struct {
	// The duration of the inspector run.
	Duration interface{}
	// The name of the assessment template.
	Name interface{}
	// The rules to be used during the run.
	RulesPackageArns interface{}
	// The assessment target ARN to attach the template to.
	TargetArn interface{}
}
