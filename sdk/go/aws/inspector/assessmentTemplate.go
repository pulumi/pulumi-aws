// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package inspector

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AssessmentTemplate struct {
	pulumi.CustomResourceState

	Arn                pulumi.StringOutput                            `pulumi:"arn"`
	Duration           pulumi.IntOutput                               `pulumi:"duration"`
	EventSubscriptions AssessmentTemplateEventSubscriptionArrayOutput `pulumi:"eventSubscriptions"`
	Name               pulumi.StringOutput                            `pulumi:"name"`
	RulesPackageArns   pulumi.StringArrayOutput                       `pulumi:"rulesPackageArns"`
	Tags               pulumi.StringMapOutput                         `pulumi:"tags"`
	TagsAll            pulumi.StringMapOutput                         `pulumi:"tagsAll"`
	TargetArn          pulumi.StringOutput                            `pulumi:"targetArn"`
}

// NewAssessmentTemplate registers a new resource with the given unique name, arguments, and options.
func NewAssessmentTemplate(ctx *pulumi.Context,
	name string, args *AssessmentTemplateArgs, opts ...pulumi.ResourceOption) (*AssessmentTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Duration == nil {
		return nil, errors.New("invalid value for required argument 'Duration'")
	}
	if args.RulesPackageArns == nil {
		return nil, errors.New("invalid value for required argument 'RulesPackageArns'")
	}
	if args.TargetArn == nil {
		return nil, errors.New("invalid value for required argument 'TargetArn'")
	}
	var resource AssessmentTemplate
	err := ctx.RegisterResource("aws:inspector/assessmentTemplate:AssessmentTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssessmentTemplate gets an existing AssessmentTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssessmentTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssessmentTemplateState, opts ...pulumi.ResourceOption) (*AssessmentTemplate, error) {
	var resource AssessmentTemplate
	err := ctx.ReadResource("aws:inspector/assessmentTemplate:AssessmentTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AssessmentTemplate resources.
type assessmentTemplateState struct {
	Arn                *string                               `pulumi:"arn"`
	Duration           *int                                  `pulumi:"duration"`
	EventSubscriptions []AssessmentTemplateEventSubscription `pulumi:"eventSubscriptions"`
	Name               *string                               `pulumi:"name"`
	RulesPackageArns   []string                              `pulumi:"rulesPackageArns"`
	Tags               map[string]string                     `pulumi:"tags"`
	TagsAll            map[string]string                     `pulumi:"tagsAll"`
	TargetArn          *string                               `pulumi:"targetArn"`
}

type AssessmentTemplateState struct {
	Arn                pulumi.StringPtrInput
	Duration           pulumi.IntPtrInput
	EventSubscriptions AssessmentTemplateEventSubscriptionArrayInput
	Name               pulumi.StringPtrInput
	RulesPackageArns   pulumi.StringArrayInput
	Tags               pulumi.StringMapInput
	TagsAll            pulumi.StringMapInput
	TargetArn          pulumi.StringPtrInput
}

func (AssessmentTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*assessmentTemplateState)(nil)).Elem()
}

type assessmentTemplateArgs struct {
	Duration           int                                   `pulumi:"duration"`
	EventSubscriptions []AssessmentTemplateEventSubscription `pulumi:"eventSubscriptions"`
	Name               *string                               `pulumi:"name"`
	RulesPackageArns   []string                              `pulumi:"rulesPackageArns"`
	Tags               map[string]string                     `pulumi:"tags"`
	TargetArn          string                                `pulumi:"targetArn"`
}

// The set of arguments for constructing a AssessmentTemplate resource.
type AssessmentTemplateArgs struct {
	Duration           pulumi.IntInput
	EventSubscriptions AssessmentTemplateEventSubscriptionArrayInput
	Name               pulumi.StringPtrInput
	RulesPackageArns   pulumi.StringArrayInput
	Tags               pulumi.StringMapInput
	TargetArn          pulumi.StringInput
}

func (AssessmentTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assessmentTemplateArgs)(nil)).Elem()
}

type AssessmentTemplateInput interface {
	pulumi.Input

	ToAssessmentTemplateOutput() AssessmentTemplateOutput
	ToAssessmentTemplateOutputWithContext(ctx context.Context) AssessmentTemplateOutput
}

func (*AssessmentTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**AssessmentTemplate)(nil)).Elem()
}

func (i *AssessmentTemplate) ToAssessmentTemplateOutput() AssessmentTemplateOutput {
	return i.ToAssessmentTemplateOutputWithContext(context.Background())
}

func (i *AssessmentTemplate) ToAssessmentTemplateOutputWithContext(ctx context.Context) AssessmentTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentTemplateOutput)
}

// AssessmentTemplateArrayInput is an input type that accepts AssessmentTemplateArray and AssessmentTemplateArrayOutput values.
// You can construct a concrete instance of `AssessmentTemplateArrayInput` via:
//
//	AssessmentTemplateArray{ AssessmentTemplateArgs{...} }
type AssessmentTemplateArrayInput interface {
	pulumi.Input

	ToAssessmentTemplateArrayOutput() AssessmentTemplateArrayOutput
	ToAssessmentTemplateArrayOutputWithContext(context.Context) AssessmentTemplateArrayOutput
}

type AssessmentTemplateArray []AssessmentTemplateInput

func (AssessmentTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AssessmentTemplate)(nil)).Elem()
}

func (i AssessmentTemplateArray) ToAssessmentTemplateArrayOutput() AssessmentTemplateArrayOutput {
	return i.ToAssessmentTemplateArrayOutputWithContext(context.Background())
}

func (i AssessmentTemplateArray) ToAssessmentTemplateArrayOutputWithContext(ctx context.Context) AssessmentTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentTemplateArrayOutput)
}

// AssessmentTemplateMapInput is an input type that accepts AssessmentTemplateMap and AssessmentTemplateMapOutput values.
// You can construct a concrete instance of `AssessmentTemplateMapInput` via:
//
//	AssessmentTemplateMap{ "key": AssessmentTemplateArgs{...} }
type AssessmentTemplateMapInput interface {
	pulumi.Input

	ToAssessmentTemplateMapOutput() AssessmentTemplateMapOutput
	ToAssessmentTemplateMapOutputWithContext(context.Context) AssessmentTemplateMapOutput
}

type AssessmentTemplateMap map[string]AssessmentTemplateInput

func (AssessmentTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AssessmentTemplate)(nil)).Elem()
}

func (i AssessmentTemplateMap) ToAssessmentTemplateMapOutput() AssessmentTemplateMapOutput {
	return i.ToAssessmentTemplateMapOutputWithContext(context.Background())
}

func (i AssessmentTemplateMap) ToAssessmentTemplateMapOutputWithContext(ctx context.Context) AssessmentTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentTemplateMapOutput)
}

type AssessmentTemplateOutput struct{ *pulumi.OutputState }

func (AssessmentTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssessmentTemplate)(nil)).Elem()
}

func (o AssessmentTemplateOutput) ToAssessmentTemplateOutput() AssessmentTemplateOutput {
	return o
}

func (o AssessmentTemplateOutput) ToAssessmentTemplateOutputWithContext(ctx context.Context) AssessmentTemplateOutput {
	return o
}

func (o AssessmentTemplateOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *AssessmentTemplate) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o AssessmentTemplateOutput) Duration() pulumi.IntOutput {
	return o.ApplyT(func(v *AssessmentTemplate) pulumi.IntOutput { return v.Duration }).(pulumi.IntOutput)
}

func (o AssessmentTemplateOutput) EventSubscriptions() AssessmentTemplateEventSubscriptionArrayOutput {
	return o.ApplyT(func(v *AssessmentTemplate) AssessmentTemplateEventSubscriptionArrayOutput {
		return v.EventSubscriptions
	}).(AssessmentTemplateEventSubscriptionArrayOutput)
}

func (o AssessmentTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AssessmentTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o AssessmentTemplateOutput) RulesPackageArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AssessmentTemplate) pulumi.StringArrayOutput { return v.RulesPackageArns }).(pulumi.StringArrayOutput)
}

func (o AssessmentTemplateOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AssessmentTemplate) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o AssessmentTemplateOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AssessmentTemplate) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o AssessmentTemplateOutput) TargetArn() pulumi.StringOutput {
	return o.ApplyT(func(v *AssessmentTemplate) pulumi.StringOutput { return v.TargetArn }).(pulumi.StringOutput)
}

type AssessmentTemplateArrayOutput struct{ *pulumi.OutputState }

func (AssessmentTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AssessmentTemplate)(nil)).Elem()
}

func (o AssessmentTemplateArrayOutput) ToAssessmentTemplateArrayOutput() AssessmentTemplateArrayOutput {
	return o
}

func (o AssessmentTemplateArrayOutput) ToAssessmentTemplateArrayOutputWithContext(ctx context.Context) AssessmentTemplateArrayOutput {
	return o
}

func (o AssessmentTemplateArrayOutput) Index(i pulumi.IntInput) AssessmentTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AssessmentTemplate {
		return vs[0].([]*AssessmentTemplate)[vs[1].(int)]
	}).(AssessmentTemplateOutput)
}

type AssessmentTemplateMapOutput struct{ *pulumi.OutputState }

func (AssessmentTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AssessmentTemplate)(nil)).Elem()
}

func (o AssessmentTemplateMapOutput) ToAssessmentTemplateMapOutput() AssessmentTemplateMapOutput {
	return o
}

func (o AssessmentTemplateMapOutput) ToAssessmentTemplateMapOutputWithContext(ctx context.Context) AssessmentTemplateMapOutput {
	return o
}

func (o AssessmentTemplateMapOutput) MapIndex(k pulumi.StringInput) AssessmentTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AssessmentTemplate {
		return vs[0].(map[string]*AssessmentTemplate)[vs[1].(string)]
	}).(AssessmentTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AssessmentTemplateInput)(nil)).Elem(), &AssessmentTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssessmentTemplateArrayInput)(nil)).Elem(), AssessmentTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssessmentTemplateMapInput)(nil)).Elem(), AssessmentTemplateMap{})
	pulumi.RegisterOutputType(AssessmentTemplateOutput{})
	pulumi.RegisterOutputType(AssessmentTemplateArrayOutput{})
	pulumi.RegisterOutputType(AssessmentTemplateMapOutput{})
}
