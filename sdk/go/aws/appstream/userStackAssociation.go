// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package appstream

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an AppStream User Stack association.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/appstream"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		testStack, err := appstream.NewStack(ctx, "testStack", nil)
// 		if err != nil {
// 			return err
// 		}
// 		testUser, err := appstream.NewUser(ctx, "testUser", &appstream.UserArgs{
// 			AuthenticationType: pulumi.String("USERPOOL"),
// 			UserName:           pulumi.String("EMAIL"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = appstream.NewUserStackAssociation(ctx, "testUserStackAssociation", &appstream.UserStackAssociationArgs{
// 			AuthenticationType: testUser.AuthenticationType,
// 			StackName:          testStack.Name,
// 			UserName:           testUser.UserName,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// AppStream User Stack Association can be imported by using the `user_name`, `authentication_type`, and `stack_name`, separated by a slash (`/`), e.g.,
//
// ```sh
//  $ pulumi import aws:appstream/userStackAssociation:UserStackAssociation example userName/auhtenticationType/stackName
// ```
type UserStackAssociation struct {
	pulumi.CustomResourceState

	// Authentication type for the user.
	AuthenticationType pulumi.StringOutput `pulumi:"authenticationType"`
	// Specifies whether a welcome email is sent to a user after the user is created in the user pool.
	SendEmailNotification pulumi.BoolPtrOutput `pulumi:"sendEmailNotification"`
	// Name of the stack that is associated with the user.
	StackName pulumi.StringOutput `pulumi:"stackName"`
	// Email address of the user who is associated with the stack.
	UserName pulumi.StringOutput `pulumi:"userName"`
}

// NewUserStackAssociation registers a new resource with the given unique name, arguments, and options.
func NewUserStackAssociation(ctx *pulumi.Context,
	name string, args *UserStackAssociationArgs, opts ...pulumi.ResourceOption) (*UserStackAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthenticationType == nil {
		return nil, errors.New("invalid value for required argument 'AuthenticationType'")
	}
	if args.StackName == nil {
		return nil, errors.New("invalid value for required argument 'StackName'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	var resource UserStackAssociation
	err := ctx.RegisterResource("aws:appstream/userStackAssociation:UserStackAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserStackAssociation gets an existing UserStackAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserStackAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserStackAssociationState, opts ...pulumi.ResourceOption) (*UserStackAssociation, error) {
	var resource UserStackAssociation
	err := ctx.ReadResource("aws:appstream/userStackAssociation:UserStackAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserStackAssociation resources.
type userStackAssociationState struct {
	// Authentication type for the user.
	AuthenticationType *string `pulumi:"authenticationType"`
	// Specifies whether a welcome email is sent to a user after the user is created in the user pool.
	SendEmailNotification *bool `pulumi:"sendEmailNotification"`
	// Name of the stack that is associated with the user.
	StackName *string `pulumi:"stackName"`
	// Email address of the user who is associated with the stack.
	UserName *string `pulumi:"userName"`
}

type UserStackAssociationState struct {
	// Authentication type for the user.
	AuthenticationType pulumi.StringPtrInput
	// Specifies whether a welcome email is sent to a user after the user is created in the user pool.
	SendEmailNotification pulumi.BoolPtrInput
	// Name of the stack that is associated with the user.
	StackName pulumi.StringPtrInput
	// Email address of the user who is associated with the stack.
	UserName pulumi.StringPtrInput
}

func (UserStackAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*userStackAssociationState)(nil)).Elem()
}

type userStackAssociationArgs struct {
	// Authentication type for the user.
	AuthenticationType string `pulumi:"authenticationType"`
	// Specifies whether a welcome email is sent to a user after the user is created in the user pool.
	SendEmailNotification *bool `pulumi:"sendEmailNotification"`
	// Name of the stack that is associated with the user.
	StackName string `pulumi:"stackName"`
	// Email address of the user who is associated with the stack.
	UserName string `pulumi:"userName"`
}

// The set of arguments for constructing a UserStackAssociation resource.
type UserStackAssociationArgs struct {
	// Authentication type for the user.
	AuthenticationType pulumi.StringInput
	// Specifies whether a welcome email is sent to a user after the user is created in the user pool.
	SendEmailNotification pulumi.BoolPtrInput
	// Name of the stack that is associated with the user.
	StackName pulumi.StringInput
	// Email address of the user who is associated with the stack.
	UserName pulumi.StringInput
}

func (UserStackAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userStackAssociationArgs)(nil)).Elem()
}

type UserStackAssociationInput interface {
	pulumi.Input

	ToUserStackAssociationOutput() UserStackAssociationOutput
	ToUserStackAssociationOutputWithContext(ctx context.Context) UserStackAssociationOutput
}

func (*UserStackAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**UserStackAssociation)(nil)).Elem()
}

func (i *UserStackAssociation) ToUserStackAssociationOutput() UserStackAssociationOutput {
	return i.ToUserStackAssociationOutputWithContext(context.Background())
}

func (i *UserStackAssociation) ToUserStackAssociationOutputWithContext(ctx context.Context) UserStackAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserStackAssociationOutput)
}

// UserStackAssociationArrayInput is an input type that accepts UserStackAssociationArray and UserStackAssociationArrayOutput values.
// You can construct a concrete instance of `UserStackAssociationArrayInput` via:
//
//          UserStackAssociationArray{ UserStackAssociationArgs{...} }
type UserStackAssociationArrayInput interface {
	pulumi.Input

	ToUserStackAssociationArrayOutput() UserStackAssociationArrayOutput
	ToUserStackAssociationArrayOutputWithContext(context.Context) UserStackAssociationArrayOutput
}

type UserStackAssociationArray []UserStackAssociationInput

func (UserStackAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserStackAssociation)(nil)).Elem()
}

func (i UserStackAssociationArray) ToUserStackAssociationArrayOutput() UserStackAssociationArrayOutput {
	return i.ToUserStackAssociationArrayOutputWithContext(context.Background())
}

func (i UserStackAssociationArray) ToUserStackAssociationArrayOutputWithContext(ctx context.Context) UserStackAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserStackAssociationArrayOutput)
}

// UserStackAssociationMapInput is an input type that accepts UserStackAssociationMap and UserStackAssociationMapOutput values.
// You can construct a concrete instance of `UserStackAssociationMapInput` via:
//
//          UserStackAssociationMap{ "key": UserStackAssociationArgs{...} }
type UserStackAssociationMapInput interface {
	pulumi.Input

	ToUserStackAssociationMapOutput() UserStackAssociationMapOutput
	ToUserStackAssociationMapOutputWithContext(context.Context) UserStackAssociationMapOutput
}

type UserStackAssociationMap map[string]UserStackAssociationInput

func (UserStackAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserStackAssociation)(nil)).Elem()
}

func (i UserStackAssociationMap) ToUserStackAssociationMapOutput() UserStackAssociationMapOutput {
	return i.ToUserStackAssociationMapOutputWithContext(context.Background())
}

func (i UserStackAssociationMap) ToUserStackAssociationMapOutputWithContext(ctx context.Context) UserStackAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserStackAssociationMapOutput)
}

type UserStackAssociationOutput struct{ *pulumi.OutputState }

func (UserStackAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserStackAssociation)(nil)).Elem()
}

func (o UserStackAssociationOutput) ToUserStackAssociationOutput() UserStackAssociationOutput {
	return o
}

func (o UserStackAssociationOutput) ToUserStackAssociationOutputWithContext(ctx context.Context) UserStackAssociationOutput {
	return o
}

type UserStackAssociationArrayOutput struct{ *pulumi.OutputState }

func (UserStackAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserStackAssociation)(nil)).Elem()
}

func (o UserStackAssociationArrayOutput) ToUserStackAssociationArrayOutput() UserStackAssociationArrayOutput {
	return o
}

func (o UserStackAssociationArrayOutput) ToUserStackAssociationArrayOutputWithContext(ctx context.Context) UserStackAssociationArrayOutput {
	return o
}

func (o UserStackAssociationArrayOutput) Index(i pulumi.IntInput) UserStackAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserStackAssociation {
		return vs[0].([]*UserStackAssociation)[vs[1].(int)]
	}).(UserStackAssociationOutput)
}

type UserStackAssociationMapOutput struct{ *pulumi.OutputState }

func (UserStackAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserStackAssociation)(nil)).Elem()
}

func (o UserStackAssociationMapOutput) ToUserStackAssociationMapOutput() UserStackAssociationMapOutput {
	return o
}

func (o UserStackAssociationMapOutput) ToUserStackAssociationMapOutputWithContext(ctx context.Context) UserStackAssociationMapOutput {
	return o
}

func (o UserStackAssociationMapOutput) MapIndex(k pulumi.StringInput) UserStackAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserStackAssociation {
		return vs[0].(map[string]*UserStackAssociation)[vs[1].(string)]
	}).(UserStackAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserStackAssociationInput)(nil)).Elem(), &UserStackAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserStackAssociationArrayInput)(nil)).Elem(), UserStackAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserStackAssociationMapInput)(nil)).Elem(), UserStackAssociationMap{})
	pulumi.RegisterOutputType(UserStackAssociationOutput{})
	pulumi.RegisterOutputType(UserStackAssociationArrayOutput{})
	pulumi.RegisterOutputType(UserStackAssociationMapOutput{})
}
