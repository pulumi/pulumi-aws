// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appstream

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for managing an AWS AppStream 2.0 Image.
func GetImage(ctx *pulumi.Context, args *GetImageArgs, opts ...pulumi.InvokeOption) (*GetImageResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetImageResult
	err := ctx.Invoke("aws:appstream/getImage:getImage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getImage.
type GetImageArgs struct {
	// Arn of the image being searched for. Cannot be used with nameRegex or name.
	Arn *string `pulumi:"arn"`
	// Boolean that if it is set to true and there are multiple images returned the most recent will be returned. If it is set to false and there are multiple images return the datasource will error.
	MostRecent *bool `pulumi:"mostRecent"`
	// Name of the image being searched for. Cannot be used with nameRegex or arn.
	Name *string `pulumi:"name"`
	// Regular expression name of the image being searched for. Cannot be used with arn or name.
	NameRegex *string `pulumi:"nameRegex"`
	// The type of image which must be (PUBLIC, PRIVATE, or SHARED).
	Type *string `pulumi:"type"`
}

// A collection of values returned by getImage.
type GetImageResult struct {
	Applications []GetImageApplication `pulumi:"applications"`
	// Version of the AppStream 2.0 agent to use for instances that are launched from this image. Has a maximum length of 100 characters.
	AppstreamAgentVersion string `pulumi:"appstreamAgentVersion"`
	// ARN of the image.
	Arn string `pulumi:"arn"`
	// ARN of the image from which the image was created.
	BaseImageArn string `pulumi:"baseImageArn"`
	// Time at which this image was created.
	CreatedTime string `pulumi:"createdTime"`
	// Description of image.
	Description string `pulumi:"description"`
	// Image name to display.
	DisplayName string `pulumi:"displayName"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name of the image builder that was used to created the private image. If the image is sharedthen the value is null.
	ImageBuilderName string `pulumi:"imageBuilderName"`
	// Boolean to indicate whether an image builder can be launched from this image.
	// * `image error` - Resource error object that describes the error containing the following:
	ImageBuilderSupported bool `pulumi:"imageBuilderSupported"`
	// List of strings describing the image permissions containing the following:
	ImagePermissions []GetImageImagePermission `pulumi:"imagePermissions"`
	MostRecent       *bool                     `pulumi:"mostRecent"`
	Name             string                    `pulumi:"name"`
	NameRegex        *string                   `pulumi:"nameRegex"`
	// Operating system platform of the image. Values will be from: WINDOWS | WINDOWS_SERVER_2016 | WINDOWS_SERVER_2019 | WINDOWS_SERVER_2022 | AMAZON_LINUX2
	Platform                    string `pulumi:"platform"`
	PublicBaseImageReleasedDate string `pulumi:"publicBaseImageReleasedDate"`
	// Current state of image. Image starts in PENDING state which changes to AVAILABLE if creation passes and FAILED if it fails. Values will be from: PENDING | AVAILABLE | FAILED | COPYING | DELETING | CREATING | IMPORTING.
	State              string                      `pulumi:"state"`
	StateChangeReasons []GetImageStateChangeReason `pulumi:"stateChangeReasons"`
	Type               *string                     `pulumi:"type"`
}

func GetImageOutput(ctx *pulumi.Context, args GetImageOutputArgs, opts ...pulumi.InvokeOption) GetImageResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetImageResultOutput, error) {
			args := v.(GetImageArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws:appstream/getImage:getImage", args, GetImageResultOutput{}, options).(GetImageResultOutput), nil
		}).(GetImageResultOutput)
}

// A collection of arguments for invoking getImage.
type GetImageOutputArgs struct {
	// Arn of the image being searched for. Cannot be used with nameRegex or name.
	Arn pulumi.StringPtrInput `pulumi:"arn"`
	// Boolean that if it is set to true and there are multiple images returned the most recent will be returned. If it is set to false and there are multiple images return the datasource will error.
	MostRecent pulumi.BoolPtrInput `pulumi:"mostRecent"`
	// Name of the image being searched for. Cannot be used with nameRegex or arn.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Regular expression name of the image being searched for. Cannot be used with arn or name.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// The type of image which must be (PUBLIC, PRIVATE, or SHARED).
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GetImageOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageArgs)(nil)).Elem()
}

// A collection of values returned by getImage.
type GetImageResultOutput struct{ *pulumi.OutputState }

func (GetImageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageResult)(nil)).Elem()
}

func (o GetImageResultOutput) ToGetImageResultOutput() GetImageResultOutput {
	return o
}

func (o GetImageResultOutput) ToGetImageResultOutputWithContext(ctx context.Context) GetImageResultOutput {
	return o
}

func (o GetImageResultOutput) Applications() GetImageApplicationArrayOutput {
	return o.ApplyT(func(v GetImageResult) []GetImageApplication { return v.Applications }).(GetImageApplicationArrayOutput)
}

// Version of the AppStream 2.0 agent to use for instances that are launched from this image. Has a maximum length of 100 characters.
func (o GetImageResultOutput) AppstreamAgentVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageResult) string { return v.AppstreamAgentVersion }).(pulumi.StringOutput)
}

// ARN of the image.
func (o GetImageResultOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageResult) string { return v.Arn }).(pulumi.StringOutput)
}

// ARN of the image from which the image was created.
func (o GetImageResultOutput) BaseImageArn() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageResult) string { return v.BaseImageArn }).(pulumi.StringOutput)
}

// Time at which this image was created.
func (o GetImageResultOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageResult) string { return v.CreatedTime }).(pulumi.StringOutput)
}

// Description of image.
func (o GetImageResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageResult) string { return v.Description }).(pulumi.StringOutput)
}

// Image name to display.
func (o GetImageResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetImageResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the image builder that was used to created the private image. If the image is sharedthen the value is null.
func (o GetImageResultOutput) ImageBuilderName() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageResult) string { return v.ImageBuilderName }).(pulumi.StringOutput)
}

// Boolean to indicate whether an image builder can be launched from this image.
// * `image error` - Resource error object that describes the error containing the following:
func (o GetImageResultOutput) ImageBuilderSupported() pulumi.BoolOutput {
	return o.ApplyT(func(v GetImageResult) bool { return v.ImageBuilderSupported }).(pulumi.BoolOutput)
}

// List of strings describing the image permissions containing the following:
func (o GetImageResultOutput) ImagePermissions() GetImageImagePermissionArrayOutput {
	return o.ApplyT(func(v GetImageResult) []GetImageImagePermission { return v.ImagePermissions }).(GetImageImagePermissionArrayOutput)
}

func (o GetImageResultOutput) MostRecent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetImageResult) *bool { return v.MostRecent }).(pulumi.BoolPtrOutput)
}

func (o GetImageResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetImageResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetImageResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

// Operating system platform of the image. Values will be from: WINDOWS | WINDOWS_SERVER_2016 | WINDOWS_SERVER_2019 | WINDOWS_SERVER_2022 | AMAZON_LINUX2
func (o GetImageResultOutput) Platform() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageResult) string { return v.Platform }).(pulumi.StringOutput)
}

func (o GetImageResultOutput) PublicBaseImageReleasedDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageResult) string { return v.PublicBaseImageReleasedDate }).(pulumi.StringOutput)
}

// Current state of image. Image starts in PENDING state which changes to AVAILABLE if creation passes and FAILED if it fails. Values will be from: PENDING | AVAILABLE | FAILED | COPYING | DELETING | CREATING | IMPORTING.
func (o GetImageResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageResult) string { return v.State }).(pulumi.StringOutput)
}

func (o GetImageResultOutput) StateChangeReasons() GetImageStateChangeReasonArrayOutput {
	return o.ApplyT(func(v GetImageResult) []GetImageStateChangeReason { return v.StateChangeReasons }).(GetImageStateChangeReasonArrayOutput)
}

func (o GetImageResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetImageResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetImageResultOutput{})
}
