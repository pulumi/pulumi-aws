// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS QuickSight VPC Connection.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/iam"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/quicksight"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"Version": "2012-10-17",
//				"Statement": []map[string]interface{}{
//					map[string]interface{}{
//						"Effect": "Allow",
//						"Action": "sts:AssumeRole",
//						"Principal": map[string]interface{}{
//							"Service": "quicksight.amazonaws.com",
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			tmpJSON1, err := json.Marshal(map[string]interface{}{
//				"Version": "2012-10-17",
//				"Statement": []map[string]interface{}{
//					map[string]interface{}{
//						"Effect": "Allow",
//						"Action": []string{
//							"ec2:CreateNetworkInterface",
//							"ec2:ModifyNetworkInterfaceAttribute",
//							"ec2:DeleteNetworkInterface",
//							"ec2:DescribeSubnets",
//							"ec2:DescribeSecurityGroups",
//						},
//						"Resource": []string{
//							"*",
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json1 := string(tmpJSON1)
//			vpcConnectionRole, err := iam.NewRole(ctx, "vpcConnectionRole", &iam.RoleArgs{
//				AssumeRolePolicy: pulumi.String(json0),
//				InlinePolicies: iam.RoleInlinePolicyArray{
//					&iam.RoleInlinePolicyArgs{
//						Name:   pulumi.String("QuickSightVPCConnectionRolePolicy"),
//						Policy: pulumi.String(json1),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = quicksight.NewVpcConnection(ctx, "example", &quicksight.VpcConnectionArgs{
//				VpcConnectionId: pulumi.String("example-connection-id"),
//				RoleArn:         vpcConnectionRole.Arn,
//				SecurityGroupIds: pulumi.StringArray{
//					pulumi.String("sg-00000000000000000"),
//				},
//				SubnetIds: pulumi.StringArray{
//					pulumi.String("subnet-00000000000000000"),
//					pulumi.String("subnet-00000000000000001"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// terraform import {
//
//	to = aws_quicksight_vpc_connection.example
//
//	id = "123456789012,example" } Using `pulumi import`, import QuickSight VPC connection using the AWS account ID and VPC connection ID separated by commas (`,`). For exampleconsole % pulumi import aws_quicksight_vpc_connection.example 123456789012,example
type VpcConnection struct {
	pulumi.CustomResourceState

	// ARN of the VPC connection.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The availability status of the VPC connection. Valid values are `AVAILABLE`, `UNAVAILABLE` or `PARTIALLY_AVAILABLE`.
	AvailabilityStatus pulumi.StringOutput `pulumi:"availabilityStatus"`
	// AWS account ID.
	AwsAccountId pulumi.StringOutput `pulumi:"awsAccountId"`
	// A list of IP addresses of DNS resolver endpoints for the VPC connection.
	DnsResolvers pulumi.StringArrayOutput `pulumi:"dnsResolvers"`
	// The display name for the VPC connection.
	Name pulumi.StringOutput `pulumi:"name"`
	// The IAM role to associate with the VPC connection.
	RoleArn pulumi.StringOutput `pulumi:"roleArn"`
	// A list of security group IDs for the VPC connection.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// A list of subnet IDs for the VPC connection.
	//
	// The following arguments are optional:
	SubnetIds pulumi.StringArrayOutput `pulumi:"subnetIds"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll  pulumi.StringMapOutput         `pulumi:"tagsAll"`
	Timeouts VpcConnectionTimeoutsPtrOutput `pulumi:"timeouts"`
	// The ID of the VPC connection.
	VpcConnectionId pulumi.StringOutput `pulumi:"vpcConnectionId"`
}

// NewVpcConnection registers a new resource with the given unique name, arguments, and options.
func NewVpcConnection(ctx *pulumi.Context,
	name string, args *VpcConnectionArgs, opts ...pulumi.ResourceOption) (*VpcConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	if args.SecurityGroupIds == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroupIds'")
	}
	if args.SubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'SubnetIds'")
	}
	if args.VpcConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'VpcConnectionId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcConnection
	err := ctx.RegisterResource("aws:quicksight/vpcConnection:VpcConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcConnection gets an existing VpcConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcConnectionState, opts ...pulumi.ResourceOption) (*VpcConnection, error) {
	var resource VpcConnection
	err := ctx.ReadResource("aws:quicksight/vpcConnection:VpcConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcConnection resources.
type vpcConnectionState struct {
	// ARN of the VPC connection.
	Arn *string `pulumi:"arn"`
	// The availability status of the VPC connection. Valid values are `AVAILABLE`, `UNAVAILABLE` or `PARTIALLY_AVAILABLE`.
	AvailabilityStatus *string `pulumi:"availabilityStatus"`
	// AWS account ID.
	AwsAccountId *string `pulumi:"awsAccountId"`
	// A list of IP addresses of DNS resolver endpoints for the VPC connection.
	DnsResolvers []string `pulumi:"dnsResolvers"`
	// The display name for the VPC connection.
	Name *string `pulumi:"name"`
	// The IAM role to associate with the VPC connection.
	RoleArn *string `pulumi:"roleArn"`
	// A list of security group IDs for the VPC connection.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// A list of subnet IDs for the VPC connection.
	//
	// The following arguments are optional:
	SubnetIds []string `pulumi:"subnetIds"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll  map[string]string      `pulumi:"tagsAll"`
	Timeouts *VpcConnectionTimeouts `pulumi:"timeouts"`
	// The ID of the VPC connection.
	VpcConnectionId *string `pulumi:"vpcConnectionId"`
}

type VpcConnectionState struct {
	// ARN of the VPC connection.
	Arn pulumi.StringPtrInput
	// The availability status of the VPC connection. Valid values are `AVAILABLE`, `UNAVAILABLE` or `PARTIALLY_AVAILABLE`.
	AvailabilityStatus pulumi.StringPtrInput
	// AWS account ID.
	AwsAccountId pulumi.StringPtrInput
	// A list of IP addresses of DNS resolver endpoints for the VPC connection.
	DnsResolvers pulumi.StringArrayInput
	// The display name for the VPC connection.
	Name pulumi.StringPtrInput
	// The IAM role to associate with the VPC connection.
	RoleArn pulumi.StringPtrInput
	// A list of security group IDs for the VPC connection.
	SecurityGroupIds pulumi.StringArrayInput
	// A list of subnet IDs for the VPC connection.
	//
	// The following arguments are optional:
	SubnetIds pulumi.StringArrayInput
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll  pulumi.StringMapInput
	Timeouts VpcConnectionTimeoutsPtrInput
	// The ID of the VPC connection.
	VpcConnectionId pulumi.StringPtrInput
}

func (VpcConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcConnectionState)(nil)).Elem()
}

type vpcConnectionArgs struct {
	// AWS account ID.
	AwsAccountId *string `pulumi:"awsAccountId"`
	// A list of IP addresses of DNS resolver endpoints for the VPC connection.
	DnsResolvers []string `pulumi:"dnsResolvers"`
	// The display name for the VPC connection.
	Name *string `pulumi:"name"`
	// The IAM role to associate with the VPC connection.
	RoleArn string `pulumi:"roleArn"`
	// A list of security group IDs for the VPC connection.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// A list of subnet IDs for the VPC connection.
	//
	// The following arguments are optional:
	SubnetIds []string `pulumi:"subnetIds"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     map[string]string      `pulumi:"tags"`
	Timeouts *VpcConnectionTimeouts `pulumi:"timeouts"`
	// The ID of the VPC connection.
	VpcConnectionId string `pulumi:"vpcConnectionId"`
}

// The set of arguments for constructing a VpcConnection resource.
type VpcConnectionArgs struct {
	// AWS account ID.
	AwsAccountId pulumi.StringPtrInput
	// A list of IP addresses of DNS resolver endpoints for the VPC connection.
	DnsResolvers pulumi.StringArrayInput
	// The display name for the VPC connection.
	Name pulumi.StringPtrInput
	// The IAM role to associate with the VPC connection.
	RoleArn pulumi.StringInput
	// A list of security group IDs for the VPC connection.
	SecurityGroupIds pulumi.StringArrayInput
	// A list of subnet IDs for the VPC connection.
	//
	// The following arguments are optional:
	SubnetIds pulumi.StringArrayInput
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     pulumi.StringMapInput
	Timeouts VpcConnectionTimeoutsPtrInput
	// The ID of the VPC connection.
	VpcConnectionId pulumi.StringInput
}

func (VpcConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcConnectionArgs)(nil)).Elem()
}

type VpcConnectionInput interface {
	pulumi.Input

	ToVpcConnectionOutput() VpcConnectionOutput
	ToVpcConnectionOutputWithContext(ctx context.Context) VpcConnectionOutput
}

func (*VpcConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcConnection)(nil)).Elem()
}

func (i *VpcConnection) ToVpcConnectionOutput() VpcConnectionOutput {
	return i.ToVpcConnectionOutputWithContext(context.Background())
}

func (i *VpcConnection) ToVpcConnectionOutputWithContext(ctx context.Context) VpcConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcConnectionOutput)
}

// VpcConnectionArrayInput is an input type that accepts VpcConnectionArray and VpcConnectionArrayOutput values.
// You can construct a concrete instance of `VpcConnectionArrayInput` via:
//
//	VpcConnectionArray{ VpcConnectionArgs{...} }
type VpcConnectionArrayInput interface {
	pulumi.Input

	ToVpcConnectionArrayOutput() VpcConnectionArrayOutput
	ToVpcConnectionArrayOutputWithContext(context.Context) VpcConnectionArrayOutput
}

type VpcConnectionArray []VpcConnectionInput

func (VpcConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcConnection)(nil)).Elem()
}

func (i VpcConnectionArray) ToVpcConnectionArrayOutput() VpcConnectionArrayOutput {
	return i.ToVpcConnectionArrayOutputWithContext(context.Background())
}

func (i VpcConnectionArray) ToVpcConnectionArrayOutputWithContext(ctx context.Context) VpcConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcConnectionArrayOutput)
}

// VpcConnectionMapInput is an input type that accepts VpcConnectionMap and VpcConnectionMapOutput values.
// You can construct a concrete instance of `VpcConnectionMapInput` via:
//
//	VpcConnectionMap{ "key": VpcConnectionArgs{...} }
type VpcConnectionMapInput interface {
	pulumi.Input

	ToVpcConnectionMapOutput() VpcConnectionMapOutput
	ToVpcConnectionMapOutputWithContext(context.Context) VpcConnectionMapOutput
}

type VpcConnectionMap map[string]VpcConnectionInput

func (VpcConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcConnection)(nil)).Elem()
}

func (i VpcConnectionMap) ToVpcConnectionMapOutput() VpcConnectionMapOutput {
	return i.ToVpcConnectionMapOutputWithContext(context.Background())
}

func (i VpcConnectionMap) ToVpcConnectionMapOutputWithContext(ctx context.Context) VpcConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcConnectionMapOutput)
}

type VpcConnectionOutput struct{ *pulumi.OutputState }

func (VpcConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcConnection)(nil)).Elem()
}

func (o VpcConnectionOutput) ToVpcConnectionOutput() VpcConnectionOutput {
	return o
}

func (o VpcConnectionOutput) ToVpcConnectionOutputWithContext(ctx context.Context) VpcConnectionOutput {
	return o
}

// ARN of the VPC connection.
func (o VpcConnectionOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcConnection) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The availability status of the VPC connection. Valid values are `AVAILABLE`, `UNAVAILABLE` or `PARTIALLY_AVAILABLE`.
func (o VpcConnectionOutput) AvailabilityStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcConnection) pulumi.StringOutput { return v.AvailabilityStatus }).(pulumi.StringOutput)
}

// AWS account ID.
func (o VpcConnectionOutput) AwsAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcConnection) pulumi.StringOutput { return v.AwsAccountId }).(pulumi.StringOutput)
}

// A list of IP addresses of DNS resolver endpoints for the VPC connection.
func (o VpcConnectionOutput) DnsResolvers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VpcConnection) pulumi.StringArrayOutput { return v.DnsResolvers }).(pulumi.StringArrayOutput)
}

// The display name for the VPC connection.
func (o VpcConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The IAM role to associate with the VPC connection.
func (o VpcConnectionOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcConnection) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

// A list of security group IDs for the VPC connection.
func (o VpcConnectionOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VpcConnection) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// A list of subnet IDs for the VPC connection.
//
// The following arguments are optional:
func (o VpcConnectionOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VpcConnection) pulumi.StringArrayOutput { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o VpcConnectionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VpcConnection) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o VpcConnectionOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VpcConnection) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o VpcConnectionOutput) Timeouts() VpcConnectionTimeoutsPtrOutput {
	return o.ApplyT(func(v *VpcConnection) VpcConnectionTimeoutsPtrOutput { return v.Timeouts }).(VpcConnectionTimeoutsPtrOutput)
}

// The ID of the VPC connection.
func (o VpcConnectionOutput) VpcConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcConnection) pulumi.StringOutput { return v.VpcConnectionId }).(pulumi.StringOutput)
}

type VpcConnectionArrayOutput struct{ *pulumi.OutputState }

func (VpcConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcConnection)(nil)).Elem()
}

func (o VpcConnectionArrayOutput) ToVpcConnectionArrayOutput() VpcConnectionArrayOutput {
	return o
}

func (o VpcConnectionArrayOutput) ToVpcConnectionArrayOutputWithContext(ctx context.Context) VpcConnectionArrayOutput {
	return o
}

func (o VpcConnectionArrayOutput) Index(i pulumi.IntInput) VpcConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpcConnection {
		return vs[0].([]*VpcConnection)[vs[1].(int)]
	}).(VpcConnectionOutput)
}

type VpcConnectionMapOutput struct{ *pulumi.OutputState }

func (VpcConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcConnection)(nil)).Elem()
}

func (o VpcConnectionMapOutput) ToVpcConnectionMapOutput() VpcConnectionMapOutput {
	return o
}

func (o VpcConnectionMapOutput) ToVpcConnectionMapOutputWithContext(ctx context.Context) VpcConnectionMapOutput {
	return o
}

func (o VpcConnectionMapOutput) MapIndex(k pulumi.StringInput) VpcConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpcConnection {
		return vs[0].(map[string]*VpcConnection)[vs[1].(string)]
	}).(VpcConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcConnectionInput)(nil)).Elem(), &VpcConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcConnectionArrayInput)(nil)).Elem(), VpcConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcConnectionMapInput)(nil)).Elem(), VpcConnectionMap{})
	pulumi.RegisterOutputType(VpcConnectionOutput{})
	pulumi.RegisterOutputType(VpcConnectionArrayOutput{})
	pulumi.RegisterOutputType(VpcConnectionMapOutput{})
}
