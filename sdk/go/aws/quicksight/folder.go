// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing a QuickSight Folder.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/quicksight"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := quicksight.NewFolder(ctx, "example", &quicksight.FolderArgs{
//				FolderId: pulumi.String("example-id"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### With Permissions
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/quicksight"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := quicksight.NewFolder(ctx, "example", &quicksight.FolderArgs{
//				FolderId: pulumi.String("example-id"),
//				Permissions: quicksight.FolderPermissionArray{
//					&quicksight.FolderPermissionArgs{
//						Actions: pulumi.StringArray{
//							pulumi.String("quicksight:CreateFolder"),
//							pulumi.String("quicksight:DescribeFolder"),
//							pulumi.String("quicksight:UpdateFolder"),
//							pulumi.String("quicksight:DeleteFolder"),
//							pulumi.String("quicksight:CreateFolderMembership"),
//							pulumi.String("quicksight:DeleteFolderMembership"),
//							pulumi.String("quicksight:DescribeFolderPermissions"),
//							pulumi.String("quicksight:UpdateFolderPermissions"),
//						},
//						Principal: pulumi.Any(aws_quicksight_user.Example.Arn),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### With Parent Folder
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/quicksight"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			parent, err := quicksight.NewFolder(ctx, "parent", &quicksight.FolderArgs{
//				FolderId: pulumi.String("parent-id"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = quicksight.NewFolder(ctx, "example", &quicksight.FolderArgs{
//				FolderId:        pulumi.String("example-id"),
//				ParentFolderArn: parent.Arn,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// A QuickSight folder can be imported using the AWS account ID and folder ID name separated by a comma (`,`) e.g.,
//
// ```sh
//
//	$ pulumi import aws:quicksight/folder:Folder example 123456789012,example-id
//
// ```
type Folder struct {
	pulumi.CustomResourceState

	// ARN of the folder.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// AWS account ID.
	AwsAccountId pulumi.StringOutput `pulumi:"awsAccountId"`
	// The time that the folder was created.
	CreatedTime pulumi.StringOutput `pulumi:"createdTime"`
	// Identifier for the folder.
	FolderId pulumi.StringOutput `pulumi:"folderId"`
	// An array of ancestor ARN strings for the folder. Empty for root-level folders.
	FolderPaths pulumi.StringArrayOutput `pulumi:"folderPaths"`
	// The type of folder. By default, it is `SHARED`. Valid values are: `SHARED`.
	FolderType pulumi.StringPtrOutput `pulumi:"folderType"`
	// The time that the folder was last updated.
	LastUpdatedTime pulumi.StringOutput `pulumi:"lastUpdatedTime"`
	// Display name for the folder.
	//
	// The following arguments are optional:
	Name pulumi.StringOutput `pulumi:"name"`
	// The Amazon Resource Name (ARN) for the parent folder. If not set, creates a root-level folder.
	ParentFolderArn pulumi.StringPtrOutput `pulumi:"parentFolderArn"`
	// A set of resource permissions on the folder. Maximum of 64 items. See permissions.
	Permissions FolderPermissionArrayOutput `pulumi:"permissions"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewFolder registers a new resource with the given unique name, arguments, and options.
func NewFolder(ctx *pulumi.Context,
	name string, args *FolderArgs, opts ...pulumi.ResourceOption) (*Folder, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FolderId == nil {
		return nil, errors.New("invalid value for required argument 'FolderId'")
	}
	var resource Folder
	err := ctx.RegisterResource("aws:quicksight/folder:Folder", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFolder gets an existing Folder resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFolder(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FolderState, opts ...pulumi.ResourceOption) (*Folder, error) {
	var resource Folder
	err := ctx.ReadResource("aws:quicksight/folder:Folder", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Folder resources.
type folderState struct {
	// ARN of the folder.
	Arn *string `pulumi:"arn"`
	// AWS account ID.
	AwsAccountId *string `pulumi:"awsAccountId"`
	// The time that the folder was created.
	CreatedTime *string `pulumi:"createdTime"`
	// Identifier for the folder.
	FolderId *string `pulumi:"folderId"`
	// An array of ancestor ARN strings for the folder. Empty for root-level folders.
	FolderPaths []string `pulumi:"folderPaths"`
	// The type of folder. By default, it is `SHARED`. Valid values are: `SHARED`.
	FolderType *string `pulumi:"folderType"`
	// The time that the folder was last updated.
	LastUpdatedTime *string `pulumi:"lastUpdatedTime"`
	// Display name for the folder.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// The Amazon Resource Name (ARN) for the parent folder. If not set, creates a root-level folder.
	ParentFolderArn *string `pulumi:"parentFolderArn"`
	// A set of resource permissions on the folder. Maximum of 64 items. See permissions.
	Permissions []FolderPermission `pulumi:"permissions"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type FolderState struct {
	// ARN of the folder.
	Arn pulumi.StringPtrInput
	// AWS account ID.
	AwsAccountId pulumi.StringPtrInput
	// The time that the folder was created.
	CreatedTime pulumi.StringPtrInput
	// Identifier for the folder.
	FolderId pulumi.StringPtrInput
	// An array of ancestor ARN strings for the folder. Empty for root-level folders.
	FolderPaths pulumi.StringArrayInput
	// The type of folder. By default, it is `SHARED`. Valid values are: `SHARED`.
	FolderType pulumi.StringPtrInput
	// The time that the folder was last updated.
	LastUpdatedTime pulumi.StringPtrInput
	// Display name for the folder.
	//
	// The following arguments are optional:
	Name pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) for the parent folder. If not set, creates a root-level folder.
	ParentFolderArn pulumi.StringPtrInput
	// A set of resource permissions on the folder. Maximum of 64 items. See permissions.
	Permissions FolderPermissionArrayInput
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapInput
}

func (FolderState) ElementType() reflect.Type {
	return reflect.TypeOf((*folderState)(nil)).Elem()
}

type folderArgs struct {
	// AWS account ID.
	AwsAccountId *string `pulumi:"awsAccountId"`
	// Identifier for the folder.
	FolderId string `pulumi:"folderId"`
	// The type of folder. By default, it is `SHARED`. Valid values are: `SHARED`.
	FolderType *string `pulumi:"folderType"`
	// Display name for the folder.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// The Amazon Resource Name (ARN) for the parent folder. If not set, creates a root-level folder.
	ParentFolderArn *string `pulumi:"parentFolderArn"`
	// A set of resource permissions on the folder. Maximum of 64 items. See permissions.
	Permissions []FolderPermission `pulumi:"permissions"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Folder resource.
type FolderArgs struct {
	// AWS account ID.
	AwsAccountId pulumi.StringPtrInput
	// Identifier for the folder.
	FolderId pulumi.StringInput
	// The type of folder. By default, it is `SHARED`. Valid values are: `SHARED`.
	FolderType pulumi.StringPtrInput
	// Display name for the folder.
	//
	// The following arguments are optional:
	Name pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) for the parent folder. If not set, creates a root-level folder.
	ParentFolderArn pulumi.StringPtrInput
	// A set of resource permissions on the folder. Maximum of 64 items. See permissions.
	Permissions FolderPermissionArrayInput
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
}

func (FolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*folderArgs)(nil)).Elem()
}

type FolderInput interface {
	pulumi.Input

	ToFolderOutput() FolderOutput
	ToFolderOutputWithContext(ctx context.Context) FolderOutput
}

func (*Folder) ElementType() reflect.Type {
	return reflect.TypeOf((**Folder)(nil)).Elem()
}

func (i *Folder) ToFolderOutput() FolderOutput {
	return i.ToFolderOutputWithContext(context.Background())
}

func (i *Folder) ToFolderOutputWithContext(ctx context.Context) FolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderOutput)
}

// FolderArrayInput is an input type that accepts FolderArray and FolderArrayOutput values.
// You can construct a concrete instance of `FolderArrayInput` via:
//
//	FolderArray{ FolderArgs{...} }
type FolderArrayInput interface {
	pulumi.Input

	ToFolderArrayOutput() FolderArrayOutput
	ToFolderArrayOutputWithContext(context.Context) FolderArrayOutput
}

type FolderArray []FolderInput

func (FolderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Folder)(nil)).Elem()
}

func (i FolderArray) ToFolderArrayOutput() FolderArrayOutput {
	return i.ToFolderArrayOutputWithContext(context.Background())
}

func (i FolderArray) ToFolderArrayOutputWithContext(ctx context.Context) FolderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderArrayOutput)
}

// FolderMapInput is an input type that accepts FolderMap and FolderMapOutput values.
// You can construct a concrete instance of `FolderMapInput` via:
//
//	FolderMap{ "key": FolderArgs{...} }
type FolderMapInput interface {
	pulumi.Input

	ToFolderMapOutput() FolderMapOutput
	ToFolderMapOutputWithContext(context.Context) FolderMapOutput
}

type FolderMap map[string]FolderInput

func (FolderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Folder)(nil)).Elem()
}

func (i FolderMap) ToFolderMapOutput() FolderMapOutput {
	return i.ToFolderMapOutputWithContext(context.Background())
}

func (i FolderMap) ToFolderMapOutputWithContext(ctx context.Context) FolderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderMapOutput)
}

type FolderOutput struct{ *pulumi.OutputState }

func (FolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Folder)(nil)).Elem()
}

func (o FolderOutput) ToFolderOutput() FolderOutput {
	return o
}

func (o FolderOutput) ToFolderOutputWithContext(ctx context.Context) FolderOutput {
	return o
}

// ARN of the folder.
func (o FolderOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Folder) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// AWS account ID.
func (o FolderOutput) AwsAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Folder) pulumi.StringOutput { return v.AwsAccountId }).(pulumi.StringOutput)
}

// The time that the folder was created.
func (o FolderOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Folder) pulumi.StringOutput { return v.CreatedTime }).(pulumi.StringOutput)
}

// Identifier for the folder.
func (o FolderOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v *Folder) pulumi.StringOutput { return v.FolderId }).(pulumi.StringOutput)
}

// An array of ancestor ARN strings for the folder. Empty for root-level folders.
func (o FolderOutput) FolderPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Folder) pulumi.StringArrayOutput { return v.FolderPaths }).(pulumi.StringArrayOutput)
}

// The type of folder. By default, it is `SHARED`. Valid values are: `SHARED`.
func (o FolderOutput) FolderType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Folder) pulumi.StringPtrOutput { return v.FolderType }).(pulumi.StringPtrOutput)
}

// The time that the folder was last updated.
func (o FolderOutput) LastUpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Folder) pulumi.StringOutput { return v.LastUpdatedTime }).(pulumi.StringOutput)
}

// Display name for the folder.
//
// The following arguments are optional:
func (o FolderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Folder) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) for the parent folder. If not set, creates a root-level folder.
func (o FolderOutput) ParentFolderArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Folder) pulumi.StringPtrOutput { return v.ParentFolderArn }).(pulumi.StringPtrOutput)
}

// A set of resource permissions on the folder. Maximum of 64 items. See permissions.
func (o FolderOutput) Permissions() FolderPermissionArrayOutput {
	return o.ApplyT(func(v *Folder) FolderPermissionArrayOutput { return v.Permissions }).(FolderPermissionArrayOutput)
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o FolderOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Folder) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o FolderOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Folder) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type FolderArrayOutput struct{ *pulumi.OutputState }

func (FolderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Folder)(nil)).Elem()
}

func (o FolderArrayOutput) ToFolderArrayOutput() FolderArrayOutput {
	return o
}

func (o FolderArrayOutput) ToFolderArrayOutputWithContext(ctx context.Context) FolderArrayOutput {
	return o
}

func (o FolderArrayOutput) Index(i pulumi.IntInput) FolderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Folder {
		return vs[0].([]*Folder)[vs[1].(int)]
	}).(FolderOutput)
}

type FolderMapOutput struct{ *pulumi.OutputState }

func (FolderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Folder)(nil)).Elem()
}

func (o FolderMapOutput) ToFolderMapOutput() FolderMapOutput {
	return o
}

func (o FolderMapOutput) ToFolderMapOutputWithContext(ctx context.Context) FolderMapOutput {
	return o
}

func (o FolderMapOutput) MapIndex(k pulumi.StringInput) FolderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Folder {
		return vs[0].(map[string]*Folder)[vs[1].(string)]
	}).(FolderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FolderInput)(nil)).Elem(), &Folder{})
	pulumi.RegisterInputType(reflect.TypeOf((*FolderArrayInput)(nil)).Elem(), FolderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FolderMapInput)(nil)).Elem(), FolderMap{})
	pulumi.RegisterOutputType(FolderOutput{})
	pulumi.RegisterOutputType(FolderArrayOutput{})
	pulumi.RegisterOutputType(FolderMapOutput{})
}
