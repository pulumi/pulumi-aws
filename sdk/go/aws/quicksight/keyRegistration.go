// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Registers customer managed keys in a Amazon QuickSight account.
//
// > Deletion of this resource clears all CMK registrations from a QuickSight account. QuickSight then uses AWS owned keys to encrypt your resources.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/quicksight"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := quicksight.NewKeyRegistration(ctx, "example", &quicksight.KeyRegistrationArgs{
//				KeyRegistrations: quicksight.KeyRegistrationKeyRegistrationArray{
//					&quicksight.KeyRegistrationKeyRegistrationArgs{
//						KeyArn: pulumi.Any(example1.Arn),
//					},
//					&quicksight.KeyRegistrationKeyRegistrationArgs{
//						KeyArn:     pulumi.Any(example2.Arn),
//						DefaultKey: pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import QuickSight key registration using the AWS account ID. For example:
//
// ```sh
// $ pulumi import aws:quicksight/keyRegistration:KeyRegistration example "012345678901"
// ```
type KeyRegistration struct {
	pulumi.CustomResourceState

	AwsAccountId pulumi.StringOutput `pulumi:"awsAccountId"`
	// Registered keys. See key_registration.
	KeyRegistrations KeyRegistrationKeyRegistrationArrayOutput `pulumi:"keyRegistrations"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewKeyRegistration registers a new resource with the given unique name, arguments, and options.
func NewKeyRegistration(ctx *pulumi.Context,
	name string, args *KeyRegistrationArgs, opts ...pulumi.ResourceOption) (*KeyRegistration, error) {
	if args == nil {
		args = &KeyRegistrationArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KeyRegistration
	err := ctx.RegisterResource("aws:quicksight/keyRegistration:KeyRegistration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeyRegistration gets an existing KeyRegistration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeyRegistration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyRegistrationState, opts ...pulumi.ResourceOption) (*KeyRegistration, error) {
	var resource KeyRegistration
	err := ctx.ReadResource("aws:quicksight/keyRegistration:KeyRegistration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KeyRegistration resources.
type keyRegistrationState struct {
	AwsAccountId *string `pulumi:"awsAccountId"`
	// Registered keys. See key_registration.
	KeyRegistrations []KeyRegistrationKeyRegistration `pulumi:"keyRegistrations"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
}

type KeyRegistrationState struct {
	AwsAccountId pulumi.StringPtrInput
	// Registered keys. See key_registration.
	KeyRegistrations KeyRegistrationKeyRegistrationArrayInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
}

func (KeyRegistrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyRegistrationState)(nil)).Elem()
}

type keyRegistrationArgs struct {
	AwsAccountId *string `pulumi:"awsAccountId"`
	// Registered keys. See key_registration.
	KeyRegistrations []KeyRegistrationKeyRegistration `pulumi:"keyRegistrations"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a KeyRegistration resource.
type KeyRegistrationArgs struct {
	AwsAccountId pulumi.StringPtrInput
	// Registered keys. See key_registration.
	KeyRegistrations KeyRegistrationKeyRegistrationArrayInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
}

func (KeyRegistrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyRegistrationArgs)(nil)).Elem()
}

type KeyRegistrationInput interface {
	pulumi.Input

	ToKeyRegistrationOutput() KeyRegistrationOutput
	ToKeyRegistrationOutputWithContext(ctx context.Context) KeyRegistrationOutput
}

func (*KeyRegistration) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyRegistration)(nil)).Elem()
}

func (i *KeyRegistration) ToKeyRegistrationOutput() KeyRegistrationOutput {
	return i.ToKeyRegistrationOutputWithContext(context.Background())
}

func (i *KeyRegistration) ToKeyRegistrationOutputWithContext(ctx context.Context) KeyRegistrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRegistrationOutput)
}

// KeyRegistrationArrayInput is an input type that accepts KeyRegistrationArray and KeyRegistrationArrayOutput values.
// You can construct a concrete instance of `KeyRegistrationArrayInput` via:
//
//	KeyRegistrationArray{ KeyRegistrationArgs{...} }
type KeyRegistrationArrayInput interface {
	pulumi.Input

	ToKeyRegistrationArrayOutput() KeyRegistrationArrayOutput
	ToKeyRegistrationArrayOutputWithContext(context.Context) KeyRegistrationArrayOutput
}

type KeyRegistrationArray []KeyRegistrationInput

func (KeyRegistrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeyRegistration)(nil)).Elem()
}

func (i KeyRegistrationArray) ToKeyRegistrationArrayOutput() KeyRegistrationArrayOutput {
	return i.ToKeyRegistrationArrayOutputWithContext(context.Background())
}

func (i KeyRegistrationArray) ToKeyRegistrationArrayOutputWithContext(ctx context.Context) KeyRegistrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRegistrationArrayOutput)
}

// KeyRegistrationMapInput is an input type that accepts KeyRegistrationMap and KeyRegistrationMapOutput values.
// You can construct a concrete instance of `KeyRegistrationMapInput` via:
//
//	KeyRegistrationMap{ "key": KeyRegistrationArgs{...} }
type KeyRegistrationMapInput interface {
	pulumi.Input

	ToKeyRegistrationMapOutput() KeyRegistrationMapOutput
	ToKeyRegistrationMapOutputWithContext(context.Context) KeyRegistrationMapOutput
}

type KeyRegistrationMap map[string]KeyRegistrationInput

func (KeyRegistrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeyRegistration)(nil)).Elem()
}

func (i KeyRegistrationMap) ToKeyRegistrationMapOutput() KeyRegistrationMapOutput {
	return i.ToKeyRegistrationMapOutputWithContext(context.Background())
}

func (i KeyRegistrationMap) ToKeyRegistrationMapOutputWithContext(ctx context.Context) KeyRegistrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRegistrationMapOutput)
}

type KeyRegistrationOutput struct{ *pulumi.OutputState }

func (KeyRegistrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyRegistration)(nil)).Elem()
}

func (o KeyRegistrationOutput) ToKeyRegistrationOutput() KeyRegistrationOutput {
	return o
}

func (o KeyRegistrationOutput) ToKeyRegistrationOutputWithContext(ctx context.Context) KeyRegistrationOutput {
	return o
}

func (o KeyRegistrationOutput) AwsAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyRegistration) pulumi.StringOutput { return v.AwsAccountId }).(pulumi.StringOutput)
}

// Registered keys. See key_registration.
func (o KeyRegistrationOutput) KeyRegistrations() KeyRegistrationKeyRegistrationArrayOutput {
	return o.ApplyT(func(v *KeyRegistration) KeyRegistrationKeyRegistrationArrayOutput { return v.KeyRegistrations }).(KeyRegistrationKeyRegistrationArrayOutput)
}

// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
func (o KeyRegistrationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyRegistration) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type KeyRegistrationArrayOutput struct{ *pulumi.OutputState }

func (KeyRegistrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeyRegistration)(nil)).Elem()
}

func (o KeyRegistrationArrayOutput) ToKeyRegistrationArrayOutput() KeyRegistrationArrayOutput {
	return o
}

func (o KeyRegistrationArrayOutput) ToKeyRegistrationArrayOutputWithContext(ctx context.Context) KeyRegistrationArrayOutput {
	return o
}

func (o KeyRegistrationArrayOutput) Index(i pulumi.IntInput) KeyRegistrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KeyRegistration {
		return vs[0].([]*KeyRegistration)[vs[1].(int)]
	}).(KeyRegistrationOutput)
}

type KeyRegistrationMapOutput struct{ *pulumi.OutputState }

func (KeyRegistrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeyRegistration)(nil)).Elem()
}

func (o KeyRegistrationMapOutput) ToKeyRegistrationMapOutput() KeyRegistrationMapOutput {
	return o
}

func (o KeyRegistrationMapOutput) ToKeyRegistrationMapOutputWithContext(ctx context.Context) KeyRegistrationMapOutput {
	return o
}

func (o KeyRegistrationMapOutput) MapIndex(k pulumi.StringInput) KeyRegistrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KeyRegistration {
		return vs[0].(map[string]*KeyRegistration)[vs[1].(string)]
	}).(KeyRegistrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeyRegistrationInput)(nil)).Elem(), &KeyRegistration{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyRegistrationArrayInput)(nil)).Elem(), KeyRegistrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyRegistrationMapInput)(nil)).Elem(), KeyRegistrationMap{})
	pulumi.RegisterOutputType(KeyRegistrationOutput{})
	pulumi.RegisterOutputType(KeyRegistrationArrayOutput{})
	pulumi.RegisterOutputType(KeyRegistrationMapOutput{})
}
