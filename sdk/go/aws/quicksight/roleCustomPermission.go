// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages the custom permissions that are associated with a role.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/quicksight"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := quicksight.NewRoleCustomPermission(ctx, "example", &quicksight.RoleCustomPermissionArgs{
//				Role:                  pulumi.String("READER"),
//				CustomPermissionsName: pulumi.Any(exampleAwsQuicksightCustomPermissions.CustomPermissionsName),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import QuickSight role custom permissions using a comma-delimited string combining the `aws_account_id`, `namespace`, and `role`. For example:
//
// ```sh
// $ pulumi import aws:quicksight/roleCustomPermission:RoleCustomPermission example 012345678901,default,READER
// ```
type RoleCustomPermission struct {
	pulumi.CustomResourceState

	AwsAccountId pulumi.StringOutput `pulumi:"awsAccountId"`
	// Custom permissions profile name.
	CustomPermissionsName pulumi.StringOutput `pulumi:"customPermissionsName"`
	// Namespace containing the role. Defaults to `default`.
	Namespace pulumi.StringOutput `pulumi:"namespace"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
	// Role. Valid values are `ADMIN`, `AUTHOR`, `READER`, `ADMIN_PRO`, `AUTHOR_PRO`, and `READER_PRO`.
	//
	// The following arguments are optional:
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewRoleCustomPermission registers a new resource with the given unique name, arguments, and options.
func NewRoleCustomPermission(ctx *pulumi.Context,
	name string, args *RoleCustomPermissionArgs, opts ...pulumi.ResourceOption) (*RoleCustomPermission, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CustomPermissionsName == nil {
		return nil, errors.New("invalid value for required argument 'CustomPermissionsName'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RoleCustomPermission
	err := ctx.RegisterResource("aws:quicksight/roleCustomPermission:RoleCustomPermission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoleCustomPermission gets an existing RoleCustomPermission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoleCustomPermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoleCustomPermissionState, opts ...pulumi.ResourceOption) (*RoleCustomPermission, error) {
	var resource RoleCustomPermission
	err := ctx.ReadResource("aws:quicksight/roleCustomPermission:RoleCustomPermission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RoleCustomPermission resources.
type roleCustomPermissionState struct {
	AwsAccountId *string `pulumi:"awsAccountId"`
	// Custom permissions profile name.
	CustomPermissionsName *string `pulumi:"customPermissionsName"`
	// Namespace containing the role. Defaults to `default`.
	Namespace *string `pulumi:"namespace"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// Role. Valid values are `ADMIN`, `AUTHOR`, `READER`, `ADMIN_PRO`, `AUTHOR_PRO`, and `READER_PRO`.
	//
	// The following arguments are optional:
	Role *string `pulumi:"role"`
}

type RoleCustomPermissionState struct {
	AwsAccountId pulumi.StringPtrInput
	// Custom permissions profile name.
	CustomPermissionsName pulumi.StringPtrInput
	// Namespace containing the role. Defaults to `default`.
	Namespace pulumi.StringPtrInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// Role. Valid values are `ADMIN`, `AUTHOR`, `READER`, `ADMIN_PRO`, `AUTHOR_PRO`, and `READER_PRO`.
	//
	// The following arguments are optional:
	Role pulumi.StringPtrInput
}

func (RoleCustomPermissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*roleCustomPermissionState)(nil)).Elem()
}

type roleCustomPermissionArgs struct {
	AwsAccountId *string `pulumi:"awsAccountId"`
	// Custom permissions profile name.
	CustomPermissionsName string `pulumi:"customPermissionsName"`
	// Namespace containing the role. Defaults to `default`.
	Namespace *string `pulumi:"namespace"`
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region *string `pulumi:"region"`
	// Role. Valid values are `ADMIN`, `AUTHOR`, `READER`, `ADMIN_PRO`, `AUTHOR_PRO`, and `READER_PRO`.
	//
	// The following arguments are optional:
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a RoleCustomPermission resource.
type RoleCustomPermissionArgs struct {
	AwsAccountId pulumi.StringPtrInput
	// Custom permissions profile name.
	CustomPermissionsName pulumi.StringInput
	// Namespace containing the role. Defaults to `default`.
	Namespace pulumi.StringPtrInput
	// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
	Region pulumi.StringPtrInput
	// Role. Valid values are `ADMIN`, `AUTHOR`, `READER`, `ADMIN_PRO`, `AUTHOR_PRO`, and `READER_PRO`.
	//
	// The following arguments are optional:
	Role pulumi.StringInput
}

func (RoleCustomPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roleCustomPermissionArgs)(nil)).Elem()
}

type RoleCustomPermissionInput interface {
	pulumi.Input

	ToRoleCustomPermissionOutput() RoleCustomPermissionOutput
	ToRoleCustomPermissionOutputWithContext(ctx context.Context) RoleCustomPermissionOutput
}

func (*RoleCustomPermission) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleCustomPermission)(nil)).Elem()
}

func (i *RoleCustomPermission) ToRoleCustomPermissionOutput() RoleCustomPermissionOutput {
	return i.ToRoleCustomPermissionOutputWithContext(context.Background())
}

func (i *RoleCustomPermission) ToRoleCustomPermissionOutputWithContext(ctx context.Context) RoleCustomPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleCustomPermissionOutput)
}

// RoleCustomPermissionArrayInput is an input type that accepts RoleCustomPermissionArray and RoleCustomPermissionArrayOutput values.
// You can construct a concrete instance of `RoleCustomPermissionArrayInput` via:
//
//	RoleCustomPermissionArray{ RoleCustomPermissionArgs{...} }
type RoleCustomPermissionArrayInput interface {
	pulumi.Input

	ToRoleCustomPermissionArrayOutput() RoleCustomPermissionArrayOutput
	ToRoleCustomPermissionArrayOutputWithContext(context.Context) RoleCustomPermissionArrayOutput
}

type RoleCustomPermissionArray []RoleCustomPermissionInput

func (RoleCustomPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoleCustomPermission)(nil)).Elem()
}

func (i RoleCustomPermissionArray) ToRoleCustomPermissionArrayOutput() RoleCustomPermissionArrayOutput {
	return i.ToRoleCustomPermissionArrayOutputWithContext(context.Background())
}

func (i RoleCustomPermissionArray) ToRoleCustomPermissionArrayOutputWithContext(ctx context.Context) RoleCustomPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleCustomPermissionArrayOutput)
}

// RoleCustomPermissionMapInput is an input type that accepts RoleCustomPermissionMap and RoleCustomPermissionMapOutput values.
// You can construct a concrete instance of `RoleCustomPermissionMapInput` via:
//
//	RoleCustomPermissionMap{ "key": RoleCustomPermissionArgs{...} }
type RoleCustomPermissionMapInput interface {
	pulumi.Input

	ToRoleCustomPermissionMapOutput() RoleCustomPermissionMapOutput
	ToRoleCustomPermissionMapOutputWithContext(context.Context) RoleCustomPermissionMapOutput
}

type RoleCustomPermissionMap map[string]RoleCustomPermissionInput

func (RoleCustomPermissionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoleCustomPermission)(nil)).Elem()
}

func (i RoleCustomPermissionMap) ToRoleCustomPermissionMapOutput() RoleCustomPermissionMapOutput {
	return i.ToRoleCustomPermissionMapOutputWithContext(context.Background())
}

func (i RoleCustomPermissionMap) ToRoleCustomPermissionMapOutputWithContext(ctx context.Context) RoleCustomPermissionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleCustomPermissionMapOutput)
}

type RoleCustomPermissionOutput struct{ *pulumi.OutputState }

func (RoleCustomPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleCustomPermission)(nil)).Elem()
}

func (o RoleCustomPermissionOutput) ToRoleCustomPermissionOutput() RoleCustomPermissionOutput {
	return o
}

func (o RoleCustomPermissionOutput) ToRoleCustomPermissionOutputWithContext(ctx context.Context) RoleCustomPermissionOutput {
	return o
}

func (o RoleCustomPermissionOutput) AwsAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleCustomPermission) pulumi.StringOutput { return v.AwsAccountId }).(pulumi.StringOutput)
}

// Custom permissions profile name.
func (o RoleCustomPermissionOutput) CustomPermissionsName() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleCustomPermission) pulumi.StringOutput { return v.CustomPermissionsName }).(pulumi.StringOutput)
}

// Namespace containing the role. Defaults to `default`.
func (o RoleCustomPermissionOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleCustomPermission) pulumi.StringOutput { return v.Namespace }).(pulumi.StringOutput)
}

// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
func (o RoleCustomPermissionOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleCustomPermission) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Role. Valid values are `ADMIN`, `AUTHOR`, `READER`, `ADMIN_PRO`, `AUTHOR_PRO`, and `READER_PRO`.
//
// The following arguments are optional:
func (o RoleCustomPermissionOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleCustomPermission) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type RoleCustomPermissionArrayOutput struct{ *pulumi.OutputState }

func (RoleCustomPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoleCustomPermission)(nil)).Elem()
}

func (o RoleCustomPermissionArrayOutput) ToRoleCustomPermissionArrayOutput() RoleCustomPermissionArrayOutput {
	return o
}

func (o RoleCustomPermissionArrayOutput) ToRoleCustomPermissionArrayOutputWithContext(ctx context.Context) RoleCustomPermissionArrayOutput {
	return o
}

func (o RoleCustomPermissionArrayOutput) Index(i pulumi.IntInput) RoleCustomPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RoleCustomPermission {
		return vs[0].([]*RoleCustomPermission)[vs[1].(int)]
	}).(RoleCustomPermissionOutput)
}

type RoleCustomPermissionMapOutput struct{ *pulumi.OutputState }

func (RoleCustomPermissionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoleCustomPermission)(nil)).Elem()
}

func (o RoleCustomPermissionMapOutput) ToRoleCustomPermissionMapOutput() RoleCustomPermissionMapOutput {
	return o
}

func (o RoleCustomPermissionMapOutput) ToRoleCustomPermissionMapOutputWithContext(ctx context.Context) RoleCustomPermissionMapOutput {
	return o
}

func (o RoleCustomPermissionMapOutput) MapIndex(k pulumi.StringInput) RoleCustomPermissionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RoleCustomPermission {
		return vs[0].(map[string]*RoleCustomPermission)[vs[1].(string)]
	}).(RoleCustomPermissionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoleCustomPermissionInput)(nil)).Elem(), &RoleCustomPermission{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleCustomPermissionArrayInput)(nil)).Elem(), RoleCustomPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleCustomPermissionMapInput)(nil)).Elem(), RoleCustomPermissionMap{})
	pulumi.RegisterOutputType(RoleCustomPermissionOutput{})
	pulumi.RegisterOutputType(RoleCustomPermissionArrayOutput{})
	pulumi.RegisterOutputType(RoleCustomPermissionMapOutput{})
}
