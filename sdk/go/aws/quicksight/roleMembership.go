// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS QuickSight Role Membership.
//
// > The role membership APIs are disabled for identities managed by QuickSight. This resource can only be used when the QuickSight account subscription uses the Active Directory or IAM Identity Center authentication method.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/quicksight"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := quicksight.NewRoleMembership(ctx, "example", &quicksight.RoleMembershipArgs{
//				MemberName: pulumi.String("example-group"),
//				Role:       pulumi.String("READER"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import QuickSight Role Membership using a comma-delimited string combining the `aws_account_id`, `namespace`, `role`, and `member_name`. For example:
//
// ```sh
// $ pulumi import aws:quicksight/roleMembership:RoleMembership example 012345678901,default,READER,example-group
// ```
type RoleMembership struct {
	pulumi.CustomResourceState

	// AWS account ID. Defaults to the account of the caller identity if not configured.
	AwsAccountId pulumi.StringOutput `pulumi:"awsAccountId"`
	// Name of the group to be added to the role.
	MemberName pulumi.StringOutput `pulumi:"memberName"`
	// Name of the namespace. Defaults to `default`.
	Namespace pulumi.StringOutput `pulumi:"namespace"`
	// Role to add the group to. Valid values are `ADMIN`, `AUTHOR`, `READER`, `ADMIN_PRO`, `AUTHOR_PRO`, and `READER_PRO`.
	//
	// The following arguments are optional:
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewRoleMembership registers a new resource with the given unique name, arguments, and options.
func NewRoleMembership(ctx *pulumi.Context,
	name string, args *RoleMembershipArgs, opts ...pulumi.ResourceOption) (*RoleMembership, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MemberName == nil {
		return nil, errors.New("invalid value for required argument 'MemberName'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RoleMembership
	err := ctx.RegisterResource("aws:quicksight/roleMembership:RoleMembership", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoleMembership gets an existing RoleMembership resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoleMembership(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoleMembershipState, opts ...pulumi.ResourceOption) (*RoleMembership, error) {
	var resource RoleMembership
	err := ctx.ReadResource("aws:quicksight/roleMembership:RoleMembership", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RoleMembership resources.
type roleMembershipState struct {
	// AWS account ID. Defaults to the account of the caller identity if not configured.
	AwsAccountId *string `pulumi:"awsAccountId"`
	// Name of the group to be added to the role.
	MemberName *string `pulumi:"memberName"`
	// Name of the namespace. Defaults to `default`.
	Namespace *string `pulumi:"namespace"`
	// Role to add the group to. Valid values are `ADMIN`, `AUTHOR`, `READER`, `ADMIN_PRO`, `AUTHOR_PRO`, and `READER_PRO`.
	//
	// The following arguments are optional:
	Role *string `pulumi:"role"`
}

type RoleMembershipState struct {
	// AWS account ID. Defaults to the account of the caller identity if not configured.
	AwsAccountId pulumi.StringPtrInput
	// Name of the group to be added to the role.
	MemberName pulumi.StringPtrInput
	// Name of the namespace. Defaults to `default`.
	Namespace pulumi.StringPtrInput
	// Role to add the group to. Valid values are `ADMIN`, `AUTHOR`, `READER`, `ADMIN_PRO`, `AUTHOR_PRO`, and `READER_PRO`.
	//
	// The following arguments are optional:
	Role pulumi.StringPtrInput
}

func (RoleMembershipState) ElementType() reflect.Type {
	return reflect.TypeOf((*roleMembershipState)(nil)).Elem()
}

type roleMembershipArgs struct {
	// AWS account ID. Defaults to the account of the caller identity if not configured.
	AwsAccountId *string `pulumi:"awsAccountId"`
	// Name of the group to be added to the role.
	MemberName string `pulumi:"memberName"`
	// Name of the namespace. Defaults to `default`.
	Namespace *string `pulumi:"namespace"`
	// Role to add the group to. Valid values are `ADMIN`, `AUTHOR`, `READER`, `ADMIN_PRO`, `AUTHOR_PRO`, and `READER_PRO`.
	//
	// The following arguments are optional:
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a RoleMembership resource.
type RoleMembershipArgs struct {
	// AWS account ID. Defaults to the account of the caller identity if not configured.
	AwsAccountId pulumi.StringPtrInput
	// Name of the group to be added to the role.
	MemberName pulumi.StringInput
	// Name of the namespace. Defaults to `default`.
	Namespace pulumi.StringPtrInput
	// Role to add the group to. Valid values are `ADMIN`, `AUTHOR`, `READER`, `ADMIN_PRO`, `AUTHOR_PRO`, and `READER_PRO`.
	//
	// The following arguments are optional:
	Role pulumi.StringInput
}

func (RoleMembershipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roleMembershipArgs)(nil)).Elem()
}

type RoleMembershipInput interface {
	pulumi.Input

	ToRoleMembershipOutput() RoleMembershipOutput
	ToRoleMembershipOutputWithContext(ctx context.Context) RoleMembershipOutput
}

func (*RoleMembership) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleMembership)(nil)).Elem()
}

func (i *RoleMembership) ToRoleMembershipOutput() RoleMembershipOutput {
	return i.ToRoleMembershipOutputWithContext(context.Background())
}

func (i *RoleMembership) ToRoleMembershipOutputWithContext(ctx context.Context) RoleMembershipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleMembershipOutput)
}

// RoleMembershipArrayInput is an input type that accepts RoleMembershipArray and RoleMembershipArrayOutput values.
// You can construct a concrete instance of `RoleMembershipArrayInput` via:
//
//	RoleMembershipArray{ RoleMembershipArgs{...} }
type RoleMembershipArrayInput interface {
	pulumi.Input

	ToRoleMembershipArrayOutput() RoleMembershipArrayOutput
	ToRoleMembershipArrayOutputWithContext(context.Context) RoleMembershipArrayOutput
}

type RoleMembershipArray []RoleMembershipInput

func (RoleMembershipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoleMembership)(nil)).Elem()
}

func (i RoleMembershipArray) ToRoleMembershipArrayOutput() RoleMembershipArrayOutput {
	return i.ToRoleMembershipArrayOutputWithContext(context.Background())
}

func (i RoleMembershipArray) ToRoleMembershipArrayOutputWithContext(ctx context.Context) RoleMembershipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleMembershipArrayOutput)
}

// RoleMembershipMapInput is an input type that accepts RoleMembershipMap and RoleMembershipMapOutput values.
// You can construct a concrete instance of `RoleMembershipMapInput` via:
//
//	RoleMembershipMap{ "key": RoleMembershipArgs{...} }
type RoleMembershipMapInput interface {
	pulumi.Input

	ToRoleMembershipMapOutput() RoleMembershipMapOutput
	ToRoleMembershipMapOutputWithContext(context.Context) RoleMembershipMapOutput
}

type RoleMembershipMap map[string]RoleMembershipInput

func (RoleMembershipMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoleMembership)(nil)).Elem()
}

func (i RoleMembershipMap) ToRoleMembershipMapOutput() RoleMembershipMapOutput {
	return i.ToRoleMembershipMapOutputWithContext(context.Background())
}

func (i RoleMembershipMap) ToRoleMembershipMapOutputWithContext(ctx context.Context) RoleMembershipMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleMembershipMapOutput)
}

type RoleMembershipOutput struct{ *pulumi.OutputState }

func (RoleMembershipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleMembership)(nil)).Elem()
}

func (o RoleMembershipOutput) ToRoleMembershipOutput() RoleMembershipOutput {
	return o
}

func (o RoleMembershipOutput) ToRoleMembershipOutputWithContext(ctx context.Context) RoleMembershipOutput {
	return o
}

// AWS account ID. Defaults to the account of the caller identity if not configured.
func (o RoleMembershipOutput) AwsAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleMembership) pulumi.StringOutput { return v.AwsAccountId }).(pulumi.StringOutput)
}

// Name of the group to be added to the role.
func (o RoleMembershipOutput) MemberName() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleMembership) pulumi.StringOutput { return v.MemberName }).(pulumi.StringOutput)
}

// Name of the namespace. Defaults to `default`.
func (o RoleMembershipOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleMembership) pulumi.StringOutput { return v.Namespace }).(pulumi.StringOutput)
}

// Role to add the group to. Valid values are `ADMIN`, `AUTHOR`, `READER`, `ADMIN_PRO`, `AUTHOR_PRO`, and `READER_PRO`.
//
// The following arguments are optional:
func (o RoleMembershipOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleMembership) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type RoleMembershipArrayOutput struct{ *pulumi.OutputState }

func (RoleMembershipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoleMembership)(nil)).Elem()
}

func (o RoleMembershipArrayOutput) ToRoleMembershipArrayOutput() RoleMembershipArrayOutput {
	return o
}

func (o RoleMembershipArrayOutput) ToRoleMembershipArrayOutputWithContext(ctx context.Context) RoleMembershipArrayOutput {
	return o
}

func (o RoleMembershipArrayOutput) Index(i pulumi.IntInput) RoleMembershipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RoleMembership {
		return vs[0].([]*RoleMembership)[vs[1].(int)]
	}).(RoleMembershipOutput)
}

type RoleMembershipMapOutput struct{ *pulumi.OutputState }

func (RoleMembershipMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoleMembership)(nil)).Elem()
}

func (o RoleMembershipMapOutput) ToRoleMembershipMapOutput() RoleMembershipMapOutput {
	return o
}

func (o RoleMembershipMapOutput) ToRoleMembershipMapOutputWithContext(ctx context.Context) RoleMembershipMapOutput {
	return o
}

func (o RoleMembershipMapOutput) MapIndex(k pulumi.StringInput) RoleMembershipOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RoleMembership {
		return vs[0].(map[string]*RoleMembership)[vs[1].(string)]
	}).(RoleMembershipOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoleMembershipInput)(nil)).Elem(), &RoleMembership{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleMembershipArrayInput)(nil)).Elem(), RoleMembershipArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleMembershipMapInput)(nil)).Elem(), RoleMembershipMap{})
	pulumi.RegisterOutputType(RoleMembershipOutput{})
	pulumi.RegisterOutputType(RoleMembershipArrayOutput{})
	pulumi.RegisterOutputType(RoleMembershipMapOutput{})
}
