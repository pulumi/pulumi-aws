// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing a QuickSight Refresh Schedule.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/quicksight"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := quicksight.NewRefreshSchedule(ctx, "example", &quicksight.RefreshScheduleArgs{
//				DataSetId: pulumi.String("dataset-id"),
//				Schedule: &quicksight.RefreshScheduleScheduleArgs{
//					RefreshType: pulumi.String("FULL_REFRESH"),
//					ScheduleFrequency: &quicksight.RefreshScheduleScheduleScheduleFrequencyArgs{
//						Interval: pulumi.String("HOURLY"),
//					},
//				},
//				ScheduleId: pulumi.String("schedule-id"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### With Weekly Refresh
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/quicksight"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := quicksight.NewRefreshSchedule(ctx, "example", &quicksight.RefreshScheduleArgs{
//				DataSetId: pulumi.String("dataset-id"),
//				Schedule: &quicksight.RefreshScheduleScheduleArgs{
//					RefreshType: pulumi.String("INCREMENTAL_REFRESH"),
//					ScheduleFrequency: &quicksight.RefreshScheduleScheduleScheduleFrequencyArgs{
//						Interval: pulumi.String("WEEKLY"),
//						RefreshOnDay: &quicksight.RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs{
//							DayOfWeek: pulumi.String("MONDAY"),
//						},
//						TimeOfTheDay: pulumi.String("01:00"),
//						Timezone:     pulumi.String("Europe/London"),
//					},
//				},
//				ScheduleId: pulumi.String("schedule-id"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### With Monthly Refresh
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/quicksight"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := quicksight.NewRefreshSchedule(ctx, "example", &quicksight.RefreshScheduleArgs{
//				DataSetId: pulumi.String("dataset-id"),
//				Schedule: &quicksight.RefreshScheduleScheduleArgs{
//					RefreshType: pulumi.String("INCREMENTAL_REFRESH"),
//					ScheduleFrequency: &quicksight.RefreshScheduleScheduleScheduleFrequencyArgs{
//						Interval: pulumi.String("MONTHLY"),
//						RefreshOnDay: &quicksight.RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs{
//							DayOfMonth: pulumi.String("1"),
//						},
//						TimeOfTheDay: pulumi.String("01:00"),
//						Timezone:     pulumi.String("Europe/London"),
//					},
//				},
//				ScheduleId: pulumi.String("schedule-id"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// A QuickSight Refresh Schedule can be imported using the AWS account ID, data set ID and schedule ID separated by commas (`,`) e.g.,
//
// ```sh
//
//	$ pulumi import aws:quicksight/refreshSchedule:RefreshSchedule example 123456789012,dataset-id,schedule-id
//
// ```
type RefreshSchedule struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the refresh schedule.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// AWS account ID.
	AwsAccountId pulumi.StringOutput `pulumi:"awsAccountId"`
	// The ID of the dataset.
	DataSetId pulumi.StringOutput `pulumi:"dataSetId"`
	// The [refresh schedule](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_RefreshSchedule.html). See schedule
	//
	// The following arguments are optional:
	Schedule RefreshScheduleSchedulePtrOutput `pulumi:"schedule"`
	// The ID of the refresh schedule.
	ScheduleId pulumi.StringOutput `pulumi:"scheduleId"`
}

// NewRefreshSchedule registers a new resource with the given unique name, arguments, and options.
func NewRefreshSchedule(ctx *pulumi.Context,
	name string, args *RefreshScheduleArgs, opts ...pulumi.ResourceOption) (*RefreshSchedule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataSetId == nil {
		return nil, errors.New("invalid value for required argument 'DataSetId'")
	}
	if args.ScheduleId == nil {
		return nil, errors.New("invalid value for required argument 'ScheduleId'")
	}
	var resource RefreshSchedule
	err := ctx.RegisterResource("aws:quicksight/refreshSchedule:RefreshSchedule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRefreshSchedule gets an existing RefreshSchedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRefreshSchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RefreshScheduleState, opts ...pulumi.ResourceOption) (*RefreshSchedule, error) {
	var resource RefreshSchedule
	err := ctx.ReadResource("aws:quicksight/refreshSchedule:RefreshSchedule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RefreshSchedule resources.
type refreshScheduleState struct {
	// Amazon Resource Name (ARN) of the refresh schedule.
	Arn *string `pulumi:"arn"`
	// AWS account ID.
	AwsAccountId *string `pulumi:"awsAccountId"`
	// The ID of the dataset.
	DataSetId *string `pulumi:"dataSetId"`
	// The [refresh schedule](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_RefreshSchedule.html). See schedule
	//
	// The following arguments are optional:
	Schedule *RefreshScheduleSchedule `pulumi:"schedule"`
	// The ID of the refresh schedule.
	ScheduleId *string `pulumi:"scheduleId"`
}

type RefreshScheduleState struct {
	// Amazon Resource Name (ARN) of the refresh schedule.
	Arn pulumi.StringPtrInput
	// AWS account ID.
	AwsAccountId pulumi.StringPtrInput
	// The ID of the dataset.
	DataSetId pulumi.StringPtrInput
	// The [refresh schedule](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_RefreshSchedule.html). See schedule
	//
	// The following arguments are optional:
	Schedule RefreshScheduleSchedulePtrInput
	// The ID of the refresh schedule.
	ScheduleId pulumi.StringPtrInput
}

func (RefreshScheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*refreshScheduleState)(nil)).Elem()
}

type refreshScheduleArgs struct {
	// AWS account ID.
	AwsAccountId *string `pulumi:"awsAccountId"`
	// The ID of the dataset.
	DataSetId string `pulumi:"dataSetId"`
	// The [refresh schedule](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_RefreshSchedule.html). See schedule
	//
	// The following arguments are optional:
	Schedule *RefreshScheduleSchedule `pulumi:"schedule"`
	// The ID of the refresh schedule.
	ScheduleId string `pulumi:"scheduleId"`
}

// The set of arguments for constructing a RefreshSchedule resource.
type RefreshScheduleArgs struct {
	// AWS account ID.
	AwsAccountId pulumi.StringPtrInput
	// The ID of the dataset.
	DataSetId pulumi.StringInput
	// The [refresh schedule](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_RefreshSchedule.html). See schedule
	//
	// The following arguments are optional:
	Schedule RefreshScheduleSchedulePtrInput
	// The ID of the refresh schedule.
	ScheduleId pulumi.StringInput
}

func (RefreshScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*refreshScheduleArgs)(nil)).Elem()
}

type RefreshScheduleInput interface {
	pulumi.Input

	ToRefreshScheduleOutput() RefreshScheduleOutput
	ToRefreshScheduleOutputWithContext(ctx context.Context) RefreshScheduleOutput
}

func (*RefreshSchedule) ElementType() reflect.Type {
	return reflect.TypeOf((**RefreshSchedule)(nil)).Elem()
}

func (i *RefreshSchedule) ToRefreshScheduleOutput() RefreshScheduleOutput {
	return i.ToRefreshScheduleOutputWithContext(context.Background())
}

func (i *RefreshSchedule) ToRefreshScheduleOutputWithContext(ctx context.Context) RefreshScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RefreshScheduleOutput)
}

// RefreshScheduleArrayInput is an input type that accepts RefreshScheduleArray and RefreshScheduleArrayOutput values.
// You can construct a concrete instance of `RefreshScheduleArrayInput` via:
//
//	RefreshScheduleArray{ RefreshScheduleArgs{...} }
type RefreshScheduleArrayInput interface {
	pulumi.Input

	ToRefreshScheduleArrayOutput() RefreshScheduleArrayOutput
	ToRefreshScheduleArrayOutputWithContext(context.Context) RefreshScheduleArrayOutput
}

type RefreshScheduleArray []RefreshScheduleInput

func (RefreshScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RefreshSchedule)(nil)).Elem()
}

func (i RefreshScheduleArray) ToRefreshScheduleArrayOutput() RefreshScheduleArrayOutput {
	return i.ToRefreshScheduleArrayOutputWithContext(context.Background())
}

func (i RefreshScheduleArray) ToRefreshScheduleArrayOutputWithContext(ctx context.Context) RefreshScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RefreshScheduleArrayOutput)
}

// RefreshScheduleMapInput is an input type that accepts RefreshScheduleMap and RefreshScheduleMapOutput values.
// You can construct a concrete instance of `RefreshScheduleMapInput` via:
//
//	RefreshScheduleMap{ "key": RefreshScheduleArgs{...} }
type RefreshScheduleMapInput interface {
	pulumi.Input

	ToRefreshScheduleMapOutput() RefreshScheduleMapOutput
	ToRefreshScheduleMapOutputWithContext(context.Context) RefreshScheduleMapOutput
}

type RefreshScheduleMap map[string]RefreshScheduleInput

func (RefreshScheduleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RefreshSchedule)(nil)).Elem()
}

func (i RefreshScheduleMap) ToRefreshScheduleMapOutput() RefreshScheduleMapOutput {
	return i.ToRefreshScheduleMapOutputWithContext(context.Background())
}

func (i RefreshScheduleMap) ToRefreshScheduleMapOutputWithContext(ctx context.Context) RefreshScheduleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RefreshScheduleMapOutput)
}

type RefreshScheduleOutput struct{ *pulumi.OutputState }

func (RefreshScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RefreshSchedule)(nil)).Elem()
}

func (o RefreshScheduleOutput) ToRefreshScheduleOutput() RefreshScheduleOutput {
	return o
}

func (o RefreshScheduleOutput) ToRefreshScheduleOutputWithContext(ctx context.Context) RefreshScheduleOutput {
	return o
}

// Amazon Resource Name (ARN) of the refresh schedule.
func (o RefreshScheduleOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *RefreshSchedule) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// AWS account ID.
func (o RefreshScheduleOutput) AwsAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *RefreshSchedule) pulumi.StringOutput { return v.AwsAccountId }).(pulumi.StringOutput)
}

// The ID of the dataset.
func (o RefreshScheduleOutput) DataSetId() pulumi.StringOutput {
	return o.ApplyT(func(v *RefreshSchedule) pulumi.StringOutput { return v.DataSetId }).(pulumi.StringOutput)
}

// The [refresh schedule](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_RefreshSchedule.html). See schedule
//
// The following arguments are optional:
func (o RefreshScheduleOutput) Schedule() RefreshScheduleSchedulePtrOutput {
	return o.ApplyT(func(v *RefreshSchedule) RefreshScheduleSchedulePtrOutput { return v.Schedule }).(RefreshScheduleSchedulePtrOutput)
}

// The ID of the refresh schedule.
func (o RefreshScheduleOutput) ScheduleId() pulumi.StringOutput {
	return o.ApplyT(func(v *RefreshSchedule) pulumi.StringOutput { return v.ScheduleId }).(pulumi.StringOutput)
}

type RefreshScheduleArrayOutput struct{ *pulumi.OutputState }

func (RefreshScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RefreshSchedule)(nil)).Elem()
}

func (o RefreshScheduleArrayOutput) ToRefreshScheduleArrayOutput() RefreshScheduleArrayOutput {
	return o
}

func (o RefreshScheduleArrayOutput) ToRefreshScheduleArrayOutputWithContext(ctx context.Context) RefreshScheduleArrayOutput {
	return o
}

func (o RefreshScheduleArrayOutput) Index(i pulumi.IntInput) RefreshScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RefreshSchedule {
		return vs[0].([]*RefreshSchedule)[vs[1].(int)]
	}).(RefreshScheduleOutput)
}

type RefreshScheduleMapOutput struct{ *pulumi.OutputState }

func (RefreshScheduleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RefreshSchedule)(nil)).Elem()
}

func (o RefreshScheduleMapOutput) ToRefreshScheduleMapOutput() RefreshScheduleMapOutput {
	return o
}

func (o RefreshScheduleMapOutput) ToRefreshScheduleMapOutputWithContext(ctx context.Context) RefreshScheduleMapOutput {
	return o
}

func (o RefreshScheduleMapOutput) MapIndex(k pulumi.StringInput) RefreshScheduleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RefreshSchedule {
		return vs[0].(map[string]*RefreshSchedule)[vs[1].(string)]
	}).(RefreshScheduleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RefreshScheduleInput)(nil)).Elem(), &RefreshSchedule{})
	pulumi.RegisterInputType(reflect.TypeOf((*RefreshScheduleArrayInput)(nil)).Elem(), RefreshScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RefreshScheduleMapInput)(nil)).Elem(), RefreshScheduleMap{})
	pulumi.RegisterOutputType(RefreshScheduleOutput{})
	pulumi.RegisterOutputType(RefreshScheduleArrayOutput{})
	pulumi.RegisterOutputType(RefreshScheduleMapOutput{})
}
