// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FolderPermission struct {
	// List of IAM actions to grant or revoke permissions on.
	Actions []string `pulumi:"actions"`
	// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
	Principal string `pulumi:"principal"`
}

// FolderPermissionInput is an input type that accepts FolderPermissionArgs and FolderPermissionOutput values.
// You can construct a concrete instance of `FolderPermissionInput` via:
//
//	FolderPermissionArgs{...}
type FolderPermissionInput interface {
	pulumi.Input

	ToFolderPermissionOutput() FolderPermissionOutput
	ToFolderPermissionOutputWithContext(context.Context) FolderPermissionOutput
}

type FolderPermissionArgs struct {
	// List of IAM actions to grant or revoke permissions on.
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
	Principal pulumi.StringInput `pulumi:"principal"`
}

func (FolderPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FolderPermission)(nil)).Elem()
}

func (i FolderPermissionArgs) ToFolderPermissionOutput() FolderPermissionOutput {
	return i.ToFolderPermissionOutputWithContext(context.Background())
}

func (i FolderPermissionArgs) ToFolderPermissionOutputWithContext(ctx context.Context) FolderPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderPermissionOutput)
}

// FolderPermissionArrayInput is an input type that accepts FolderPermissionArray and FolderPermissionArrayOutput values.
// You can construct a concrete instance of `FolderPermissionArrayInput` via:
//
//	FolderPermissionArray{ FolderPermissionArgs{...} }
type FolderPermissionArrayInput interface {
	pulumi.Input

	ToFolderPermissionArrayOutput() FolderPermissionArrayOutput
	ToFolderPermissionArrayOutputWithContext(context.Context) FolderPermissionArrayOutput
}

type FolderPermissionArray []FolderPermissionInput

func (FolderPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FolderPermission)(nil)).Elem()
}

func (i FolderPermissionArray) ToFolderPermissionArrayOutput() FolderPermissionArrayOutput {
	return i.ToFolderPermissionArrayOutputWithContext(context.Background())
}

func (i FolderPermissionArray) ToFolderPermissionArrayOutputWithContext(ctx context.Context) FolderPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderPermissionArrayOutput)
}

type FolderPermissionOutput struct{ *pulumi.OutputState }

func (FolderPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FolderPermission)(nil)).Elem()
}

func (o FolderPermissionOutput) ToFolderPermissionOutput() FolderPermissionOutput {
	return o
}

func (o FolderPermissionOutput) ToFolderPermissionOutputWithContext(ctx context.Context) FolderPermissionOutput {
	return o
}

// List of IAM actions to grant or revoke permissions on.
func (o FolderPermissionOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FolderPermission) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
func (o FolderPermissionOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v FolderPermission) string { return v.Principal }).(pulumi.StringOutput)
}

type FolderPermissionArrayOutput struct{ *pulumi.OutputState }

func (FolderPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FolderPermission)(nil)).Elem()
}

func (o FolderPermissionArrayOutput) ToFolderPermissionArrayOutput() FolderPermissionArrayOutput {
	return o
}

func (o FolderPermissionArrayOutput) ToFolderPermissionArrayOutputWithContext(ctx context.Context) FolderPermissionArrayOutput {
	return o
}

func (o FolderPermissionArrayOutput) Index(i pulumi.IntInput) FolderPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FolderPermission {
		return vs[0].([]FolderPermission)[vs[1].(int)]
	}).(FolderPermissionOutput)
}

type IamPolicyAssignmentIdentities struct {
	Groups []string `pulumi:"groups"`
	// Array of Quicksight user names to assign the policy to.
	Users []string `pulumi:"users"`
}

// IamPolicyAssignmentIdentitiesInput is an input type that accepts IamPolicyAssignmentIdentitiesArgs and IamPolicyAssignmentIdentitiesOutput values.
// You can construct a concrete instance of `IamPolicyAssignmentIdentitiesInput` via:
//
//	IamPolicyAssignmentIdentitiesArgs{...}
type IamPolicyAssignmentIdentitiesInput interface {
	pulumi.Input

	ToIamPolicyAssignmentIdentitiesOutput() IamPolicyAssignmentIdentitiesOutput
	ToIamPolicyAssignmentIdentitiesOutputWithContext(context.Context) IamPolicyAssignmentIdentitiesOutput
}

type IamPolicyAssignmentIdentitiesArgs struct {
	Groups pulumi.StringArrayInput `pulumi:"groups"`
	// Array of Quicksight user names to assign the policy to.
	Users pulumi.StringArrayInput `pulumi:"users"`
}

func (IamPolicyAssignmentIdentitiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IamPolicyAssignmentIdentities)(nil)).Elem()
}

func (i IamPolicyAssignmentIdentitiesArgs) ToIamPolicyAssignmentIdentitiesOutput() IamPolicyAssignmentIdentitiesOutput {
	return i.ToIamPolicyAssignmentIdentitiesOutputWithContext(context.Background())
}

func (i IamPolicyAssignmentIdentitiesArgs) ToIamPolicyAssignmentIdentitiesOutputWithContext(ctx context.Context) IamPolicyAssignmentIdentitiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamPolicyAssignmentIdentitiesOutput)
}

func (i IamPolicyAssignmentIdentitiesArgs) ToIamPolicyAssignmentIdentitiesPtrOutput() IamPolicyAssignmentIdentitiesPtrOutput {
	return i.ToIamPolicyAssignmentIdentitiesPtrOutputWithContext(context.Background())
}

func (i IamPolicyAssignmentIdentitiesArgs) ToIamPolicyAssignmentIdentitiesPtrOutputWithContext(ctx context.Context) IamPolicyAssignmentIdentitiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamPolicyAssignmentIdentitiesOutput).ToIamPolicyAssignmentIdentitiesPtrOutputWithContext(ctx)
}

// IamPolicyAssignmentIdentitiesPtrInput is an input type that accepts IamPolicyAssignmentIdentitiesArgs, IamPolicyAssignmentIdentitiesPtr and IamPolicyAssignmentIdentitiesPtrOutput values.
// You can construct a concrete instance of `IamPolicyAssignmentIdentitiesPtrInput` via:
//
//	        IamPolicyAssignmentIdentitiesArgs{...}
//
//	or:
//
//	        nil
type IamPolicyAssignmentIdentitiesPtrInput interface {
	pulumi.Input

	ToIamPolicyAssignmentIdentitiesPtrOutput() IamPolicyAssignmentIdentitiesPtrOutput
	ToIamPolicyAssignmentIdentitiesPtrOutputWithContext(context.Context) IamPolicyAssignmentIdentitiesPtrOutput
}

type iamPolicyAssignmentIdentitiesPtrType IamPolicyAssignmentIdentitiesArgs

func IamPolicyAssignmentIdentitiesPtr(v *IamPolicyAssignmentIdentitiesArgs) IamPolicyAssignmentIdentitiesPtrInput {
	return (*iamPolicyAssignmentIdentitiesPtrType)(v)
}

func (*iamPolicyAssignmentIdentitiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IamPolicyAssignmentIdentities)(nil)).Elem()
}

func (i *iamPolicyAssignmentIdentitiesPtrType) ToIamPolicyAssignmentIdentitiesPtrOutput() IamPolicyAssignmentIdentitiesPtrOutput {
	return i.ToIamPolicyAssignmentIdentitiesPtrOutputWithContext(context.Background())
}

func (i *iamPolicyAssignmentIdentitiesPtrType) ToIamPolicyAssignmentIdentitiesPtrOutputWithContext(ctx context.Context) IamPolicyAssignmentIdentitiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamPolicyAssignmentIdentitiesPtrOutput)
}

type IamPolicyAssignmentIdentitiesOutput struct{ *pulumi.OutputState }

func (IamPolicyAssignmentIdentitiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IamPolicyAssignmentIdentities)(nil)).Elem()
}

func (o IamPolicyAssignmentIdentitiesOutput) ToIamPolicyAssignmentIdentitiesOutput() IamPolicyAssignmentIdentitiesOutput {
	return o
}

func (o IamPolicyAssignmentIdentitiesOutput) ToIamPolicyAssignmentIdentitiesOutputWithContext(ctx context.Context) IamPolicyAssignmentIdentitiesOutput {
	return o
}

func (o IamPolicyAssignmentIdentitiesOutput) ToIamPolicyAssignmentIdentitiesPtrOutput() IamPolicyAssignmentIdentitiesPtrOutput {
	return o.ToIamPolicyAssignmentIdentitiesPtrOutputWithContext(context.Background())
}

func (o IamPolicyAssignmentIdentitiesOutput) ToIamPolicyAssignmentIdentitiesPtrOutputWithContext(ctx context.Context) IamPolicyAssignmentIdentitiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IamPolicyAssignmentIdentities) *IamPolicyAssignmentIdentities {
		return &v
	}).(IamPolicyAssignmentIdentitiesPtrOutput)
}

func (o IamPolicyAssignmentIdentitiesOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IamPolicyAssignmentIdentities) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

// Array of Quicksight user names to assign the policy to.
func (o IamPolicyAssignmentIdentitiesOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IamPolicyAssignmentIdentities) []string { return v.Users }).(pulumi.StringArrayOutput)
}

type IamPolicyAssignmentIdentitiesPtrOutput struct{ *pulumi.OutputState }

func (IamPolicyAssignmentIdentitiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IamPolicyAssignmentIdentities)(nil)).Elem()
}

func (o IamPolicyAssignmentIdentitiesPtrOutput) ToIamPolicyAssignmentIdentitiesPtrOutput() IamPolicyAssignmentIdentitiesPtrOutput {
	return o
}

func (o IamPolicyAssignmentIdentitiesPtrOutput) ToIamPolicyAssignmentIdentitiesPtrOutputWithContext(ctx context.Context) IamPolicyAssignmentIdentitiesPtrOutput {
	return o
}

func (o IamPolicyAssignmentIdentitiesPtrOutput) Elem() IamPolicyAssignmentIdentitiesOutput {
	return o.ApplyT(func(v *IamPolicyAssignmentIdentities) IamPolicyAssignmentIdentities {
		if v != nil {
			return *v
		}
		var ret IamPolicyAssignmentIdentities
		return ret
	}).(IamPolicyAssignmentIdentitiesOutput)
}

func (o IamPolicyAssignmentIdentitiesPtrOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IamPolicyAssignmentIdentities) []string {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(pulumi.StringArrayOutput)
}

// Array of Quicksight user names to assign the policy to.
func (o IamPolicyAssignmentIdentitiesPtrOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IamPolicyAssignmentIdentities) []string {
		if v == nil {
			return nil
		}
		return v.Users
	}).(pulumi.StringArrayOutput)
}

type NamespaceTimeouts struct {
	Create *string `pulumi:"create"`
	Delete *string `pulumi:"delete"`
}

// NamespaceTimeoutsInput is an input type that accepts NamespaceTimeoutsArgs and NamespaceTimeoutsOutput values.
// You can construct a concrete instance of `NamespaceTimeoutsInput` via:
//
//	NamespaceTimeoutsArgs{...}
type NamespaceTimeoutsInput interface {
	pulumi.Input

	ToNamespaceTimeoutsOutput() NamespaceTimeoutsOutput
	ToNamespaceTimeoutsOutputWithContext(context.Context) NamespaceTimeoutsOutput
}

type NamespaceTimeoutsArgs struct {
	Create pulumi.StringPtrInput `pulumi:"create"`
	Delete pulumi.StringPtrInput `pulumi:"delete"`
}

func (NamespaceTimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceTimeouts)(nil)).Elem()
}

func (i NamespaceTimeoutsArgs) ToNamespaceTimeoutsOutput() NamespaceTimeoutsOutput {
	return i.ToNamespaceTimeoutsOutputWithContext(context.Background())
}

func (i NamespaceTimeoutsArgs) ToNamespaceTimeoutsOutputWithContext(ctx context.Context) NamespaceTimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceTimeoutsOutput)
}

func (i NamespaceTimeoutsArgs) ToNamespaceTimeoutsPtrOutput() NamespaceTimeoutsPtrOutput {
	return i.ToNamespaceTimeoutsPtrOutputWithContext(context.Background())
}

func (i NamespaceTimeoutsArgs) ToNamespaceTimeoutsPtrOutputWithContext(ctx context.Context) NamespaceTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceTimeoutsOutput).ToNamespaceTimeoutsPtrOutputWithContext(ctx)
}

// NamespaceTimeoutsPtrInput is an input type that accepts NamespaceTimeoutsArgs, NamespaceTimeoutsPtr and NamespaceTimeoutsPtrOutput values.
// You can construct a concrete instance of `NamespaceTimeoutsPtrInput` via:
//
//	        NamespaceTimeoutsArgs{...}
//
//	or:
//
//	        nil
type NamespaceTimeoutsPtrInput interface {
	pulumi.Input

	ToNamespaceTimeoutsPtrOutput() NamespaceTimeoutsPtrOutput
	ToNamespaceTimeoutsPtrOutputWithContext(context.Context) NamespaceTimeoutsPtrOutput
}

type namespaceTimeoutsPtrType NamespaceTimeoutsArgs

func NamespaceTimeoutsPtr(v *NamespaceTimeoutsArgs) NamespaceTimeoutsPtrInput {
	return (*namespaceTimeoutsPtrType)(v)
}

func (*namespaceTimeoutsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceTimeouts)(nil)).Elem()
}

func (i *namespaceTimeoutsPtrType) ToNamespaceTimeoutsPtrOutput() NamespaceTimeoutsPtrOutput {
	return i.ToNamespaceTimeoutsPtrOutputWithContext(context.Background())
}

func (i *namespaceTimeoutsPtrType) ToNamespaceTimeoutsPtrOutputWithContext(ctx context.Context) NamespaceTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceTimeoutsPtrOutput)
}

type NamespaceTimeoutsOutput struct{ *pulumi.OutputState }

func (NamespaceTimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceTimeouts)(nil)).Elem()
}

func (o NamespaceTimeoutsOutput) ToNamespaceTimeoutsOutput() NamespaceTimeoutsOutput {
	return o
}

func (o NamespaceTimeoutsOutput) ToNamespaceTimeoutsOutputWithContext(ctx context.Context) NamespaceTimeoutsOutput {
	return o
}

func (o NamespaceTimeoutsOutput) ToNamespaceTimeoutsPtrOutput() NamespaceTimeoutsPtrOutput {
	return o.ToNamespaceTimeoutsPtrOutputWithContext(context.Background())
}

func (o NamespaceTimeoutsOutput) ToNamespaceTimeoutsPtrOutputWithContext(ctx context.Context) NamespaceTimeoutsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NamespaceTimeouts) *NamespaceTimeouts {
		return &v
	}).(NamespaceTimeoutsPtrOutput)
}

func (o NamespaceTimeoutsOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceTimeouts) *string { return v.Create }).(pulumi.StringPtrOutput)
}

func (o NamespaceTimeoutsOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceTimeouts) *string { return v.Delete }).(pulumi.StringPtrOutput)
}

type NamespaceTimeoutsPtrOutput struct{ *pulumi.OutputState }

func (NamespaceTimeoutsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceTimeouts)(nil)).Elem()
}

func (o NamespaceTimeoutsPtrOutput) ToNamespaceTimeoutsPtrOutput() NamespaceTimeoutsPtrOutput {
	return o
}

func (o NamespaceTimeoutsPtrOutput) ToNamespaceTimeoutsPtrOutputWithContext(ctx context.Context) NamespaceTimeoutsPtrOutput {
	return o
}

func (o NamespaceTimeoutsPtrOutput) Elem() NamespaceTimeoutsOutput {
	return o.ApplyT(func(v *NamespaceTimeouts) NamespaceTimeouts {
		if v != nil {
			return *v
		}
		var ret NamespaceTimeouts
		return ret
	}).(NamespaceTimeoutsOutput)
}

func (o NamespaceTimeoutsPtrOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Create
	}).(pulumi.StringPtrOutput)
}

func (o NamespaceTimeoutsPtrOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Delete
	}).(pulumi.StringPtrOutput)
}

type RefreshScheduleSchedule struct {
	// The type of refresh that the dataset undergoes. Valid values are `INCREMENTAL_REFRESH` and `FULL_REFRESH`.
	RefreshType string `pulumi:"refreshType"`
	// The configuration of the [schedule frequency](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_RefreshFrequency.html). See schedule_frequency.
	ScheduleFrequency *RefreshScheduleScheduleScheduleFrequency `pulumi:"scheduleFrequency"`
	// Time after which the refresh schedule can be started, expressed in `YYYY-MM-DDTHH:MM:SS` format.
	StartAfterDateTime *string `pulumi:"startAfterDateTime"`
}

// RefreshScheduleScheduleInput is an input type that accepts RefreshScheduleScheduleArgs and RefreshScheduleScheduleOutput values.
// You can construct a concrete instance of `RefreshScheduleScheduleInput` via:
//
//	RefreshScheduleScheduleArgs{...}
type RefreshScheduleScheduleInput interface {
	pulumi.Input

	ToRefreshScheduleScheduleOutput() RefreshScheduleScheduleOutput
	ToRefreshScheduleScheduleOutputWithContext(context.Context) RefreshScheduleScheduleOutput
}

type RefreshScheduleScheduleArgs struct {
	// The type of refresh that the dataset undergoes. Valid values are `INCREMENTAL_REFRESH` and `FULL_REFRESH`.
	RefreshType pulumi.StringInput `pulumi:"refreshType"`
	// The configuration of the [schedule frequency](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_RefreshFrequency.html). See schedule_frequency.
	ScheduleFrequency RefreshScheduleScheduleScheduleFrequencyPtrInput `pulumi:"scheduleFrequency"`
	// Time after which the refresh schedule can be started, expressed in `YYYY-MM-DDTHH:MM:SS` format.
	StartAfterDateTime pulumi.StringPtrInput `pulumi:"startAfterDateTime"`
}

func (RefreshScheduleScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RefreshScheduleSchedule)(nil)).Elem()
}

func (i RefreshScheduleScheduleArgs) ToRefreshScheduleScheduleOutput() RefreshScheduleScheduleOutput {
	return i.ToRefreshScheduleScheduleOutputWithContext(context.Background())
}

func (i RefreshScheduleScheduleArgs) ToRefreshScheduleScheduleOutputWithContext(ctx context.Context) RefreshScheduleScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RefreshScheduleScheduleOutput)
}

func (i RefreshScheduleScheduleArgs) ToRefreshScheduleSchedulePtrOutput() RefreshScheduleSchedulePtrOutput {
	return i.ToRefreshScheduleSchedulePtrOutputWithContext(context.Background())
}

func (i RefreshScheduleScheduleArgs) ToRefreshScheduleSchedulePtrOutputWithContext(ctx context.Context) RefreshScheduleSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RefreshScheduleScheduleOutput).ToRefreshScheduleSchedulePtrOutputWithContext(ctx)
}

// RefreshScheduleSchedulePtrInput is an input type that accepts RefreshScheduleScheduleArgs, RefreshScheduleSchedulePtr and RefreshScheduleSchedulePtrOutput values.
// You can construct a concrete instance of `RefreshScheduleSchedulePtrInput` via:
//
//	        RefreshScheduleScheduleArgs{...}
//
//	or:
//
//	        nil
type RefreshScheduleSchedulePtrInput interface {
	pulumi.Input

	ToRefreshScheduleSchedulePtrOutput() RefreshScheduleSchedulePtrOutput
	ToRefreshScheduleSchedulePtrOutputWithContext(context.Context) RefreshScheduleSchedulePtrOutput
}

type refreshScheduleSchedulePtrType RefreshScheduleScheduleArgs

func RefreshScheduleSchedulePtr(v *RefreshScheduleScheduleArgs) RefreshScheduleSchedulePtrInput {
	return (*refreshScheduleSchedulePtrType)(v)
}

func (*refreshScheduleSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RefreshScheduleSchedule)(nil)).Elem()
}

func (i *refreshScheduleSchedulePtrType) ToRefreshScheduleSchedulePtrOutput() RefreshScheduleSchedulePtrOutput {
	return i.ToRefreshScheduleSchedulePtrOutputWithContext(context.Background())
}

func (i *refreshScheduleSchedulePtrType) ToRefreshScheduleSchedulePtrOutputWithContext(ctx context.Context) RefreshScheduleSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RefreshScheduleSchedulePtrOutput)
}

type RefreshScheduleScheduleOutput struct{ *pulumi.OutputState }

func (RefreshScheduleScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RefreshScheduleSchedule)(nil)).Elem()
}

func (o RefreshScheduleScheduleOutput) ToRefreshScheduleScheduleOutput() RefreshScheduleScheduleOutput {
	return o
}

func (o RefreshScheduleScheduleOutput) ToRefreshScheduleScheduleOutputWithContext(ctx context.Context) RefreshScheduleScheduleOutput {
	return o
}

func (o RefreshScheduleScheduleOutput) ToRefreshScheduleSchedulePtrOutput() RefreshScheduleSchedulePtrOutput {
	return o.ToRefreshScheduleSchedulePtrOutputWithContext(context.Background())
}

func (o RefreshScheduleScheduleOutput) ToRefreshScheduleSchedulePtrOutputWithContext(ctx context.Context) RefreshScheduleSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RefreshScheduleSchedule) *RefreshScheduleSchedule {
		return &v
	}).(RefreshScheduleSchedulePtrOutput)
}

// The type of refresh that the dataset undergoes. Valid values are `INCREMENTAL_REFRESH` and `FULL_REFRESH`.
func (o RefreshScheduleScheduleOutput) RefreshType() pulumi.StringOutput {
	return o.ApplyT(func(v RefreshScheduleSchedule) string { return v.RefreshType }).(pulumi.StringOutput)
}

// The configuration of the [schedule frequency](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_RefreshFrequency.html). See schedule_frequency.
func (o RefreshScheduleScheduleOutput) ScheduleFrequency() RefreshScheduleScheduleScheduleFrequencyPtrOutput {
	return o.ApplyT(func(v RefreshScheduleSchedule) *RefreshScheduleScheduleScheduleFrequency { return v.ScheduleFrequency }).(RefreshScheduleScheduleScheduleFrequencyPtrOutput)
}

// Time after which the refresh schedule can be started, expressed in `YYYY-MM-DDTHH:MM:SS` format.
func (o RefreshScheduleScheduleOutput) StartAfterDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RefreshScheduleSchedule) *string { return v.StartAfterDateTime }).(pulumi.StringPtrOutput)
}

type RefreshScheduleSchedulePtrOutput struct{ *pulumi.OutputState }

func (RefreshScheduleSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RefreshScheduleSchedule)(nil)).Elem()
}

func (o RefreshScheduleSchedulePtrOutput) ToRefreshScheduleSchedulePtrOutput() RefreshScheduleSchedulePtrOutput {
	return o
}

func (o RefreshScheduleSchedulePtrOutput) ToRefreshScheduleSchedulePtrOutputWithContext(ctx context.Context) RefreshScheduleSchedulePtrOutput {
	return o
}

func (o RefreshScheduleSchedulePtrOutput) Elem() RefreshScheduleScheduleOutput {
	return o.ApplyT(func(v *RefreshScheduleSchedule) RefreshScheduleSchedule {
		if v != nil {
			return *v
		}
		var ret RefreshScheduleSchedule
		return ret
	}).(RefreshScheduleScheduleOutput)
}

// The type of refresh that the dataset undergoes. Valid values are `INCREMENTAL_REFRESH` and `FULL_REFRESH`.
func (o RefreshScheduleSchedulePtrOutput) RefreshType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RefreshScheduleSchedule) *string {
		if v == nil {
			return nil
		}
		return &v.RefreshType
	}).(pulumi.StringPtrOutput)
}

// The configuration of the [schedule frequency](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_RefreshFrequency.html). See schedule_frequency.
func (o RefreshScheduleSchedulePtrOutput) ScheduleFrequency() RefreshScheduleScheduleScheduleFrequencyPtrOutput {
	return o.ApplyT(func(v *RefreshScheduleSchedule) *RefreshScheduleScheduleScheduleFrequency {
		if v == nil {
			return nil
		}
		return v.ScheduleFrequency
	}).(RefreshScheduleScheduleScheduleFrequencyPtrOutput)
}

// Time after which the refresh schedule can be started, expressed in `YYYY-MM-DDTHH:MM:SS` format.
func (o RefreshScheduleSchedulePtrOutput) StartAfterDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RefreshScheduleSchedule) *string {
		if v == nil {
			return nil
		}
		return v.StartAfterDateTime
	}).(pulumi.StringPtrOutput)
}

type RefreshScheduleScheduleScheduleFrequency struct {
	// The interval between scheduled refreshes. Valid values are `MINUTE15`, `MINUTE30`, `HOURLY`, `DAILY`, `WEEKLY` and `MONTHLY`.
	Interval string `pulumi:"interval"`
	// The [refresh on entity](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ScheduleRefreshOnEntity.html) configuration for weekly or monthly schedules. See refresh_on_day.
	RefreshOnDay *RefreshScheduleScheduleScheduleFrequencyRefreshOnDay `pulumi:"refreshOnDay"`
	// The time of day that you want the dataset to refresh. This value is expressed in `HH:MM` format. This field is not required for schedules that refresh hourly.
	TimeOfTheDay *string `pulumi:"timeOfTheDay"`
	// The timezone that you want the refresh schedule to use.
	Timezone *string `pulumi:"timezone"`
}

// RefreshScheduleScheduleScheduleFrequencyInput is an input type that accepts RefreshScheduleScheduleScheduleFrequencyArgs and RefreshScheduleScheduleScheduleFrequencyOutput values.
// You can construct a concrete instance of `RefreshScheduleScheduleScheduleFrequencyInput` via:
//
//	RefreshScheduleScheduleScheduleFrequencyArgs{...}
type RefreshScheduleScheduleScheduleFrequencyInput interface {
	pulumi.Input

	ToRefreshScheduleScheduleScheduleFrequencyOutput() RefreshScheduleScheduleScheduleFrequencyOutput
	ToRefreshScheduleScheduleScheduleFrequencyOutputWithContext(context.Context) RefreshScheduleScheduleScheduleFrequencyOutput
}

type RefreshScheduleScheduleScheduleFrequencyArgs struct {
	// The interval between scheduled refreshes. Valid values are `MINUTE15`, `MINUTE30`, `HOURLY`, `DAILY`, `WEEKLY` and `MONTHLY`.
	Interval pulumi.StringInput `pulumi:"interval"`
	// The [refresh on entity](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ScheduleRefreshOnEntity.html) configuration for weekly or monthly schedules. See refresh_on_day.
	RefreshOnDay RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrInput `pulumi:"refreshOnDay"`
	// The time of day that you want the dataset to refresh. This value is expressed in `HH:MM` format. This field is not required for schedules that refresh hourly.
	TimeOfTheDay pulumi.StringPtrInput `pulumi:"timeOfTheDay"`
	// The timezone that you want the refresh schedule to use.
	Timezone pulumi.StringPtrInput `pulumi:"timezone"`
}

func (RefreshScheduleScheduleScheduleFrequencyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RefreshScheduleScheduleScheduleFrequency)(nil)).Elem()
}

func (i RefreshScheduleScheduleScheduleFrequencyArgs) ToRefreshScheduleScheduleScheduleFrequencyOutput() RefreshScheduleScheduleScheduleFrequencyOutput {
	return i.ToRefreshScheduleScheduleScheduleFrequencyOutputWithContext(context.Background())
}

func (i RefreshScheduleScheduleScheduleFrequencyArgs) ToRefreshScheduleScheduleScheduleFrequencyOutputWithContext(ctx context.Context) RefreshScheduleScheduleScheduleFrequencyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RefreshScheduleScheduleScheduleFrequencyOutput)
}

func (i RefreshScheduleScheduleScheduleFrequencyArgs) ToRefreshScheduleScheduleScheduleFrequencyPtrOutput() RefreshScheduleScheduleScheduleFrequencyPtrOutput {
	return i.ToRefreshScheduleScheduleScheduleFrequencyPtrOutputWithContext(context.Background())
}

func (i RefreshScheduleScheduleScheduleFrequencyArgs) ToRefreshScheduleScheduleScheduleFrequencyPtrOutputWithContext(ctx context.Context) RefreshScheduleScheduleScheduleFrequencyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RefreshScheduleScheduleScheduleFrequencyOutput).ToRefreshScheduleScheduleScheduleFrequencyPtrOutputWithContext(ctx)
}

// RefreshScheduleScheduleScheduleFrequencyPtrInput is an input type that accepts RefreshScheduleScheduleScheduleFrequencyArgs, RefreshScheduleScheduleScheduleFrequencyPtr and RefreshScheduleScheduleScheduleFrequencyPtrOutput values.
// You can construct a concrete instance of `RefreshScheduleScheduleScheduleFrequencyPtrInput` via:
//
//	        RefreshScheduleScheduleScheduleFrequencyArgs{...}
//
//	or:
//
//	        nil
type RefreshScheduleScheduleScheduleFrequencyPtrInput interface {
	pulumi.Input

	ToRefreshScheduleScheduleScheduleFrequencyPtrOutput() RefreshScheduleScheduleScheduleFrequencyPtrOutput
	ToRefreshScheduleScheduleScheduleFrequencyPtrOutputWithContext(context.Context) RefreshScheduleScheduleScheduleFrequencyPtrOutput
}

type refreshScheduleScheduleScheduleFrequencyPtrType RefreshScheduleScheduleScheduleFrequencyArgs

func RefreshScheduleScheduleScheduleFrequencyPtr(v *RefreshScheduleScheduleScheduleFrequencyArgs) RefreshScheduleScheduleScheduleFrequencyPtrInput {
	return (*refreshScheduleScheduleScheduleFrequencyPtrType)(v)
}

func (*refreshScheduleScheduleScheduleFrequencyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RefreshScheduleScheduleScheduleFrequency)(nil)).Elem()
}

func (i *refreshScheduleScheduleScheduleFrequencyPtrType) ToRefreshScheduleScheduleScheduleFrequencyPtrOutput() RefreshScheduleScheduleScheduleFrequencyPtrOutput {
	return i.ToRefreshScheduleScheduleScheduleFrequencyPtrOutputWithContext(context.Background())
}

func (i *refreshScheduleScheduleScheduleFrequencyPtrType) ToRefreshScheduleScheduleScheduleFrequencyPtrOutputWithContext(ctx context.Context) RefreshScheduleScheduleScheduleFrequencyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RefreshScheduleScheduleScheduleFrequencyPtrOutput)
}

type RefreshScheduleScheduleScheduleFrequencyOutput struct{ *pulumi.OutputState }

func (RefreshScheduleScheduleScheduleFrequencyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RefreshScheduleScheduleScheduleFrequency)(nil)).Elem()
}

func (o RefreshScheduleScheduleScheduleFrequencyOutput) ToRefreshScheduleScheduleScheduleFrequencyOutput() RefreshScheduleScheduleScheduleFrequencyOutput {
	return o
}

func (o RefreshScheduleScheduleScheduleFrequencyOutput) ToRefreshScheduleScheduleScheduleFrequencyOutputWithContext(ctx context.Context) RefreshScheduleScheduleScheduleFrequencyOutput {
	return o
}

func (o RefreshScheduleScheduleScheduleFrequencyOutput) ToRefreshScheduleScheduleScheduleFrequencyPtrOutput() RefreshScheduleScheduleScheduleFrequencyPtrOutput {
	return o.ToRefreshScheduleScheduleScheduleFrequencyPtrOutputWithContext(context.Background())
}

func (o RefreshScheduleScheduleScheduleFrequencyOutput) ToRefreshScheduleScheduleScheduleFrequencyPtrOutputWithContext(ctx context.Context) RefreshScheduleScheduleScheduleFrequencyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RefreshScheduleScheduleScheduleFrequency) *RefreshScheduleScheduleScheduleFrequency {
		return &v
	}).(RefreshScheduleScheduleScheduleFrequencyPtrOutput)
}

// The interval between scheduled refreshes. Valid values are `MINUTE15`, `MINUTE30`, `HOURLY`, `DAILY`, `WEEKLY` and `MONTHLY`.
func (o RefreshScheduleScheduleScheduleFrequencyOutput) Interval() pulumi.StringOutput {
	return o.ApplyT(func(v RefreshScheduleScheduleScheduleFrequency) string { return v.Interval }).(pulumi.StringOutput)
}

// The [refresh on entity](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ScheduleRefreshOnEntity.html) configuration for weekly or monthly schedules. See refresh_on_day.
func (o RefreshScheduleScheduleScheduleFrequencyOutput) RefreshOnDay() RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput {
	return o.ApplyT(func(v RefreshScheduleScheduleScheduleFrequency) *RefreshScheduleScheduleScheduleFrequencyRefreshOnDay {
		return v.RefreshOnDay
	}).(RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput)
}

// The time of day that you want the dataset to refresh. This value is expressed in `HH:MM` format. This field is not required for schedules that refresh hourly.
func (o RefreshScheduleScheduleScheduleFrequencyOutput) TimeOfTheDay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RefreshScheduleScheduleScheduleFrequency) *string { return v.TimeOfTheDay }).(pulumi.StringPtrOutput)
}

// The timezone that you want the refresh schedule to use.
func (o RefreshScheduleScheduleScheduleFrequencyOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RefreshScheduleScheduleScheduleFrequency) *string { return v.Timezone }).(pulumi.StringPtrOutput)
}

type RefreshScheduleScheduleScheduleFrequencyPtrOutput struct{ *pulumi.OutputState }

func (RefreshScheduleScheduleScheduleFrequencyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RefreshScheduleScheduleScheduleFrequency)(nil)).Elem()
}

func (o RefreshScheduleScheduleScheduleFrequencyPtrOutput) ToRefreshScheduleScheduleScheduleFrequencyPtrOutput() RefreshScheduleScheduleScheduleFrequencyPtrOutput {
	return o
}

func (o RefreshScheduleScheduleScheduleFrequencyPtrOutput) ToRefreshScheduleScheduleScheduleFrequencyPtrOutputWithContext(ctx context.Context) RefreshScheduleScheduleScheduleFrequencyPtrOutput {
	return o
}

func (o RefreshScheduleScheduleScheduleFrequencyPtrOutput) Elem() RefreshScheduleScheduleScheduleFrequencyOutput {
	return o.ApplyT(func(v *RefreshScheduleScheduleScheduleFrequency) RefreshScheduleScheduleScheduleFrequency {
		if v != nil {
			return *v
		}
		var ret RefreshScheduleScheduleScheduleFrequency
		return ret
	}).(RefreshScheduleScheduleScheduleFrequencyOutput)
}

// The interval between scheduled refreshes. Valid values are `MINUTE15`, `MINUTE30`, `HOURLY`, `DAILY`, `WEEKLY` and `MONTHLY`.
func (o RefreshScheduleScheduleScheduleFrequencyPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RefreshScheduleScheduleScheduleFrequency) *string {
		if v == nil {
			return nil
		}
		return &v.Interval
	}).(pulumi.StringPtrOutput)
}

// The [refresh on entity](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ScheduleRefreshOnEntity.html) configuration for weekly or monthly schedules. See refresh_on_day.
func (o RefreshScheduleScheduleScheduleFrequencyPtrOutput) RefreshOnDay() RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput {
	return o.ApplyT(func(v *RefreshScheduleScheduleScheduleFrequency) *RefreshScheduleScheduleScheduleFrequencyRefreshOnDay {
		if v == nil {
			return nil
		}
		return v.RefreshOnDay
	}).(RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput)
}

// The time of day that you want the dataset to refresh. This value is expressed in `HH:MM` format. This field is not required for schedules that refresh hourly.
func (o RefreshScheduleScheduleScheduleFrequencyPtrOutput) TimeOfTheDay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RefreshScheduleScheduleScheduleFrequency) *string {
		if v == nil {
			return nil
		}
		return v.TimeOfTheDay
	}).(pulumi.StringPtrOutput)
}

// The timezone that you want the refresh schedule to use.
func (o RefreshScheduleScheduleScheduleFrequencyPtrOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RefreshScheduleScheduleScheduleFrequency) *string {
		if v == nil {
			return nil
		}
		return v.Timezone
	}).(pulumi.StringPtrOutput)
}

type RefreshScheduleScheduleScheduleFrequencyRefreshOnDay struct {
	// The day of the month that you want to schedule refresh on.
	DayOfMonth *string `pulumi:"dayOfMonth"`
	// The day of the week that you want to schedule a refresh on. Valid values are `SUNDAY`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY` and `SATURDAY`.
	DayOfWeek *string `pulumi:"dayOfWeek"`
}

// RefreshScheduleScheduleScheduleFrequencyRefreshOnDayInput is an input type that accepts RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs and RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput values.
// You can construct a concrete instance of `RefreshScheduleScheduleScheduleFrequencyRefreshOnDayInput` via:
//
//	RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs{...}
type RefreshScheduleScheduleScheduleFrequencyRefreshOnDayInput interface {
	pulumi.Input

	ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput() RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput
	ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutputWithContext(context.Context) RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput
}

type RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs struct {
	// The day of the month that you want to schedule refresh on.
	DayOfMonth pulumi.StringPtrInput `pulumi:"dayOfMonth"`
	// The day of the week that you want to schedule a refresh on. Valid values are `SUNDAY`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY` and `SATURDAY`.
	DayOfWeek pulumi.StringPtrInput `pulumi:"dayOfWeek"`
}

func (RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RefreshScheduleScheduleScheduleFrequencyRefreshOnDay)(nil)).Elem()
}

func (i RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs) ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput() RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput {
	return i.ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutputWithContext(context.Background())
}

func (i RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs) ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutputWithContext(ctx context.Context) RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput)
}

func (i RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs) ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput() RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput {
	return i.ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutputWithContext(context.Background())
}

func (i RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs) ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutputWithContext(ctx context.Context) RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput).ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutputWithContext(ctx)
}

// RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrInput is an input type that accepts RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs, RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtr and RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput values.
// You can construct a concrete instance of `RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrInput` via:
//
//	        RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs{...}
//
//	or:
//
//	        nil
type RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrInput interface {
	pulumi.Input

	ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput() RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput
	ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutputWithContext(context.Context) RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput
}

type refreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrType RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs

func RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtr(v *RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs) RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrInput {
	return (*refreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrType)(v)
}

func (*refreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RefreshScheduleScheduleScheduleFrequencyRefreshOnDay)(nil)).Elem()
}

func (i *refreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrType) ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput() RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput {
	return i.ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutputWithContext(context.Background())
}

func (i *refreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrType) ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutputWithContext(ctx context.Context) RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput)
}

type RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput struct{ *pulumi.OutputState }

func (RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RefreshScheduleScheduleScheduleFrequencyRefreshOnDay)(nil)).Elem()
}

func (o RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput) ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput() RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput {
	return o
}

func (o RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput) ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutputWithContext(ctx context.Context) RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput {
	return o
}

func (o RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput) ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput() RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput {
	return o.ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutputWithContext(context.Background())
}

func (o RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput) ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutputWithContext(ctx context.Context) RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RefreshScheduleScheduleScheduleFrequencyRefreshOnDay) *RefreshScheduleScheduleScheduleFrequencyRefreshOnDay {
		return &v
	}).(RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput)
}

// The day of the month that you want to schedule refresh on.
func (o RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput) DayOfMonth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RefreshScheduleScheduleScheduleFrequencyRefreshOnDay) *string { return v.DayOfMonth }).(pulumi.StringPtrOutput)
}

// The day of the week that you want to schedule a refresh on. Valid values are `SUNDAY`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY` and `SATURDAY`.
func (o RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput) DayOfWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RefreshScheduleScheduleScheduleFrequencyRefreshOnDay) *string { return v.DayOfWeek }).(pulumi.StringPtrOutput)
}

type RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput struct{ *pulumi.OutputState }

func (RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RefreshScheduleScheduleScheduleFrequencyRefreshOnDay)(nil)).Elem()
}

func (o RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput) ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput() RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput {
	return o
}

func (o RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput) ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutputWithContext(ctx context.Context) RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput {
	return o
}

func (o RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput) Elem() RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput {
	return o.ApplyT(func(v *RefreshScheduleScheduleScheduleFrequencyRefreshOnDay) RefreshScheduleScheduleScheduleFrequencyRefreshOnDay {
		if v != nil {
			return *v
		}
		var ret RefreshScheduleScheduleScheduleFrequencyRefreshOnDay
		return ret
	}).(RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput)
}

// The day of the month that you want to schedule refresh on.
func (o RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput) DayOfMonth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RefreshScheduleScheduleScheduleFrequencyRefreshOnDay) *string {
		if v == nil {
			return nil
		}
		return v.DayOfMonth
	}).(pulumi.StringPtrOutput)
}

// The day of the week that you want to schedule a refresh on. Valid values are `SUNDAY`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY` and `SATURDAY`.
func (o RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput) DayOfWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RefreshScheduleScheduleScheduleFrequencyRefreshOnDay) *string {
		if v == nil {
			return nil
		}
		return v.DayOfWeek
	}).(pulumi.StringPtrOutput)
}

type VpcConnectionTimeouts struct {
	Create *string `pulumi:"create"`
	Delete *string `pulumi:"delete"`
	Update *string `pulumi:"update"`
}

// VpcConnectionTimeoutsInput is an input type that accepts VpcConnectionTimeoutsArgs and VpcConnectionTimeoutsOutput values.
// You can construct a concrete instance of `VpcConnectionTimeoutsInput` via:
//
//	VpcConnectionTimeoutsArgs{...}
type VpcConnectionTimeoutsInput interface {
	pulumi.Input

	ToVpcConnectionTimeoutsOutput() VpcConnectionTimeoutsOutput
	ToVpcConnectionTimeoutsOutputWithContext(context.Context) VpcConnectionTimeoutsOutput
}

type VpcConnectionTimeoutsArgs struct {
	Create pulumi.StringPtrInput `pulumi:"create"`
	Delete pulumi.StringPtrInput `pulumi:"delete"`
	Update pulumi.StringPtrInput `pulumi:"update"`
}

func (VpcConnectionTimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcConnectionTimeouts)(nil)).Elem()
}

func (i VpcConnectionTimeoutsArgs) ToVpcConnectionTimeoutsOutput() VpcConnectionTimeoutsOutput {
	return i.ToVpcConnectionTimeoutsOutputWithContext(context.Background())
}

func (i VpcConnectionTimeoutsArgs) ToVpcConnectionTimeoutsOutputWithContext(ctx context.Context) VpcConnectionTimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcConnectionTimeoutsOutput)
}

func (i VpcConnectionTimeoutsArgs) ToVpcConnectionTimeoutsPtrOutput() VpcConnectionTimeoutsPtrOutput {
	return i.ToVpcConnectionTimeoutsPtrOutputWithContext(context.Background())
}

func (i VpcConnectionTimeoutsArgs) ToVpcConnectionTimeoutsPtrOutputWithContext(ctx context.Context) VpcConnectionTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcConnectionTimeoutsOutput).ToVpcConnectionTimeoutsPtrOutputWithContext(ctx)
}

// VpcConnectionTimeoutsPtrInput is an input type that accepts VpcConnectionTimeoutsArgs, VpcConnectionTimeoutsPtr and VpcConnectionTimeoutsPtrOutput values.
// You can construct a concrete instance of `VpcConnectionTimeoutsPtrInput` via:
//
//	        VpcConnectionTimeoutsArgs{...}
//
//	or:
//
//	        nil
type VpcConnectionTimeoutsPtrInput interface {
	pulumi.Input

	ToVpcConnectionTimeoutsPtrOutput() VpcConnectionTimeoutsPtrOutput
	ToVpcConnectionTimeoutsPtrOutputWithContext(context.Context) VpcConnectionTimeoutsPtrOutput
}

type vpcConnectionTimeoutsPtrType VpcConnectionTimeoutsArgs

func VpcConnectionTimeoutsPtr(v *VpcConnectionTimeoutsArgs) VpcConnectionTimeoutsPtrInput {
	return (*vpcConnectionTimeoutsPtrType)(v)
}

func (*vpcConnectionTimeoutsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcConnectionTimeouts)(nil)).Elem()
}

func (i *vpcConnectionTimeoutsPtrType) ToVpcConnectionTimeoutsPtrOutput() VpcConnectionTimeoutsPtrOutput {
	return i.ToVpcConnectionTimeoutsPtrOutputWithContext(context.Background())
}

func (i *vpcConnectionTimeoutsPtrType) ToVpcConnectionTimeoutsPtrOutputWithContext(ctx context.Context) VpcConnectionTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcConnectionTimeoutsPtrOutput)
}

type VpcConnectionTimeoutsOutput struct{ *pulumi.OutputState }

func (VpcConnectionTimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcConnectionTimeouts)(nil)).Elem()
}

func (o VpcConnectionTimeoutsOutput) ToVpcConnectionTimeoutsOutput() VpcConnectionTimeoutsOutput {
	return o
}

func (o VpcConnectionTimeoutsOutput) ToVpcConnectionTimeoutsOutputWithContext(ctx context.Context) VpcConnectionTimeoutsOutput {
	return o
}

func (o VpcConnectionTimeoutsOutput) ToVpcConnectionTimeoutsPtrOutput() VpcConnectionTimeoutsPtrOutput {
	return o.ToVpcConnectionTimeoutsPtrOutputWithContext(context.Background())
}

func (o VpcConnectionTimeoutsOutput) ToVpcConnectionTimeoutsPtrOutputWithContext(ctx context.Context) VpcConnectionTimeoutsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VpcConnectionTimeouts) *VpcConnectionTimeouts {
		return &v
	}).(VpcConnectionTimeoutsPtrOutput)
}

func (o VpcConnectionTimeoutsOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcConnectionTimeouts) *string { return v.Create }).(pulumi.StringPtrOutput)
}

func (o VpcConnectionTimeoutsOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcConnectionTimeouts) *string { return v.Delete }).(pulumi.StringPtrOutput)
}

func (o VpcConnectionTimeoutsOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcConnectionTimeouts) *string { return v.Update }).(pulumi.StringPtrOutput)
}

type VpcConnectionTimeoutsPtrOutput struct{ *pulumi.OutputState }

func (VpcConnectionTimeoutsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcConnectionTimeouts)(nil)).Elem()
}

func (o VpcConnectionTimeoutsPtrOutput) ToVpcConnectionTimeoutsPtrOutput() VpcConnectionTimeoutsPtrOutput {
	return o
}

func (o VpcConnectionTimeoutsPtrOutput) ToVpcConnectionTimeoutsPtrOutputWithContext(ctx context.Context) VpcConnectionTimeoutsPtrOutput {
	return o
}

func (o VpcConnectionTimeoutsPtrOutput) Elem() VpcConnectionTimeoutsOutput {
	return o.ApplyT(func(v *VpcConnectionTimeouts) VpcConnectionTimeouts {
		if v != nil {
			return *v
		}
		var ret VpcConnectionTimeouts
		return ret
	}).(VpcConnectionTimeoutsOutput)
}

func (o VpcConnectionTimeoutsPtrOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcConnectionTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Create
	}).(pulumi.StringPtrOutput)
}

func (o VpcConnectionTimeoutsPtrOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcConnectionTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Delete
	}).(pulumi.StringPtrOutput)
}

func (o VpcConnectionTimeoutsPtrOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcConnectionTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Update
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FolderPermissionInput)(nil)).Elem(), FolderPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FolderPermissionArrayInput)(nil)).Elem(), FolderPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamPolicyAssignmentIdentitiesInput)(nil)).Elem(), IamPolicyAssignmentIdentitiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamPolicyAssignmentIdentitiesPtrInput)(nil)).Elem(), IamPolicyAssignmentIdentitiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceTimeoutsInput)(nil)).Elem(), NamespaceTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceTimeoutsPtrInput)(nil)).Elem(), NamespaceTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RefreshScheduleScheduleInput)(nil)).Elem(), RefreshScheduleScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RefreshScheduleSchedulePtrInput)(nil)).Elem(), RefreshScheduleScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RefreshScheduleScheduleScheduleFrequencyInput)(nil)).Elem(), RefreshScheduleScheduleScheduleFrequencyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RefreshScheduleScheduleScheduleFrequencyPtrInput)(nil)).Elem(), RefreshScheduleScheduleScheduleFrequencyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RefreshScheduleScheduleScheduleFrequencyRefreshOnDayInput)(nil)).Elem(), RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrInput)(nil)).Elem(), RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcConnectionTimeoutsInput)(nil)).Elem(), VpcConnectionTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcConnectionTimeoutsPtrInput)(nil)).Elem(), VpcConnectionTimeoutsArgs{})
	pulumi.RegisterOutputType(FolderPermissionOutput{})
	pulumi.RegisterOutputType(FolderPermissionArrayOutput{})
	pulumi.RegisterOutputType(IamPolicyAssignmentIdentitiesOutput{})
	pulumi.RegisterOutputType(IamPolicyAssignmentIdentitiesPtrOutput{})
	pulumi.RegisterOutputType(NamespaceTimeoutsOutput{})
	pulumi.RegisterOutputType(NamespaceTimeoutsPtrOutput{})
	pulumi.RegisterOutputType(RefreshScheduleScheduleOutput{})
	pulumi.RegisterOutputType(RefreshScheduleSchedulePtrOutput{})
	pulumi.RegisterOutputType(RefreshScheduleScheduleScheduleFrequencyOutput{})
	pulumi.RegisterOutputType(RefreshScheduleScheduleScheduleFrequencyPtrOutput{})
	pulumi.RegisterOutputType(RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput{})
	pulumi.RegisterOutputType(RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput{})
	pulumi.RegisterOutputType(VpcConnectionTimeoutsOutput{})
	pulumi.RegisterOutputType(VpcConnectionTimeoutsPtrOutput{})
}
