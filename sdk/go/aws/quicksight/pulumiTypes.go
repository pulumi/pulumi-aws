// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DataSourceCredentials struct {
	// - The Amazon Resource Name (ARN) of a data source that has the credential pair that you want to use.
	//   When the value is not null, the `credentialPair` from the data source in the ARN is used.
	CopySourceArn *string `pulumi:"copySourceArn"`
	// - Credential pair. See Credential Pair below for more details.
	CredentialPair *DataSourceCredentialsCredentialPair `pulumi:"credentialPair"`
}

// DataSourceCredentialsInput is an input type that accepts DataSourceCredentialsArgs and DataSourceCredentialsOutput values.
// You can construct a concrete instance of `DataSourceCredentialsInput` via:
//
//          DataSourceCredentialsArgs{...}
type DataSourceCredentialsInput interface {
	pulumi.Input

	ToDataSourceCredentialsOutput() DataSourceCredentialsOutput
	ToDataSourceCredentialsOutputWithContext(context.Context) DataSourceCredentialsOutput
}

type DataSourceCredentialsArgs struct {
	// - The Amazon Resource Name (ARN) of a data source that has the credential pair that you want to use.
	//   When the value is not null, the `credentialPair` from the data source in the ARN is used.
	CopySourceArn pulumi.StringPtrInput `pulumi:"copySourceArn"`
	// - Credential pair. See Credential Pair below for more details.
	CredentialPair DataSourceCredentialsCredentialPairPtrInput `pulumi:"credentialPair"`
}

func (DataSourceCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceCredentials)(nil)).Elem()
}

func (i DataSourceCredentialsArgs) ToDataSourceCredentialsOutput() DataSourceCredentialsOutput {
	return i.ToDataSourceCredentialsOutputWithContext(context.Background())
}

func (i DataSourceCredentialsArgs) ToDataSourceCredentialsOutputWithContext(ctx context.Context) DataSourceCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceCredentialsOutput)
}

func (i DataSourceCredentialsArgs) ToDataSourceCredentialsPtrOutput() DataSourceCredentialsPtrOutput {
	return i.ToDataSourceCredentialsPtrOutputWithContext(context.Background())
}

func (i DataSourceCredentialsArgs) ToDataSourceCredentialsPtrOutputWithContext(ctx context.Context) DataSourceCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceCredentialsOutput).ToDataSourceCredentialsPtrOutputWithContext(ctx)
}

// DataSourceCredentialsPtrInput is an input type that accepts DataSourceCredentialsArgs, DataSourceCredentialsPtr and DataSourceCredentialsPtrOutput values.
// You can construct a concrete instance of `DataSourceCredentialsPtrInput` via:
//
//          DataSourceCredentialsArgs{...}
//
//  or:
//
//          nil
type DataSourceCredentialsPtrInput interface {
	pulumi.Input

	ToDataSourceCredentialsPtrOutput() DataSourceCredentialsPtrOutput
	ToDataSourceCredentialsPtrOutputWithContext(context.Context) DataSourceCredentialsPtrOutput
}

type dataSourceCredentialsPtrType DataSourceCredentialsArgs

func DataSourceCredentialsPtr(v *DataSourceCredentialsArgs) DataSourceCredentialsPtrInput {
	return (*dataSourceCredentialsPtrType)(v)
}

func (*dataSourceCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceCredentials)(nil)).Elem()
}

func (i *dataSourceCredentialsPtrType) ToDataSourceCredentialsPtrOutput() DataSourceCredentialsPtrOutput {
	return i.ToDataSourceCredentialsPtrOutputWithContext(context.Background())
}

func (i *dataSourceCredentialsPtrType) ToDataSourceCredentialsPtrOutputWithContext(ctx context.Context) DataSourceCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceCredentialsPtrOutput)
}

type DataSourceCredentialsOutput struct{ *pulumi.OutputState }

func (DataSourceCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceCredentials)(nil)).Elem()
}

func (o DataSourceCredentialsOutput) ToDataSourceCredentialsOutput() DataSourceCredentialsOutput {
	return o
}

func (o DataSourceCredentialsOutput) ToDataSourceCredentialsOutputWithContext(ctx context.Context) DataSourceCredentialsOutput {
	return o
}

func (o DataSourceCredentialsOutput) ToDataSourceCredentialsPtrOutput() DataSourceCredentialsPtrOutput {
	return o.ToDataSourceCredentialsPtrOutputWithContext(context.Background())
}

func (o DataSourceCredentialsOutput) ToDataSourceCredentialsPtrOutputWithContext(ctx context.Context) DataSourceCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceCredentials) *DataSourceCredentials {
		return &v
	}).(DataSourceCredentialsPtrOutput)
}

// - The Amazon Resource Name (ARN) of a data source that has the credential pair that you want to use.
//   When the value is not null, the `credentialPair` from the data source in the ARN is used.
func (o DataSourceCredentialsOutput) CopySourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceCredentials) *string { return v.CopySourceArn }).(pulumi.StringPtrOutput)
}

// - Credential pair. See Credential Pair below for more details.
func (o DataSourceCredentialsOutput) CredentialPair() DataSourceCredentialsCredentialPairPtrOutput {
	return o.ApplyT(func(v DataSourceCredentials) *DataSourceCredentialsCredentialPair { return v.CredentialPair }).(DataSourceCredentialsCredentialPairPtrOutput)
}

type DataSourceCredentialsPtrOutput struct{ *pulumi.OutputState }

func (DataSourceCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceCredentials)(nil)).Elem()
}

func (o DataSourceCredentialsPtrOutput) ToDataSourceCredentialsPtrOutput() DataSourceCredentialsPtrOutput {
	return o
}

func (o DataSourceCredentialsPtrOutput) ToDataSourceCredentialsPtrOutputWithContext(ctx context.Context) DataSourceCredentialsPtrOutput {
	return o
}

func (o DataSourceCredentialsPtrOutput) Elem() DataSourceCredentialsOutput {
	return o.ApplyT(func(v *DataSourceCredentials) DataSourceCredentials {
		if v != nil {
			return *v
		}
		var ret DataSourceCredentials
		return ret
	}).(DataSourceCredentialsOutput)
}

// - The Amazon Resource Name (ARN) of a data source that has the credential pair that you want to use.
//   When the value is not null, the `credentialPair` from the data source in the ARN is used.
func (o DataSourceCredentialsPtrOutput) CopySourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceCredentials) *string {
		if v == nil {
			return nil
		}
		return v.CopySourceArn
	}).(pulumi.StringPtrOutput)
}

// - Credential pair. See Credential Pair below for more details.
func (o DataSourceCredentialsPtrOutput) CredentialPair() DataSourceCredentialsCredentialPairPtrOutput {
	return o.ApplyT(func(v *DataSourceCredentials) *DataSourceCredentialsCredentialPair {
		if v == nil {
			return nil
		}
		return v.CredentialPair
	}).(DataSourceCredentialsCredentialPairPtrOutput)
}

type DataSourceCredentialsCredentialPair struct {
	// Password, maximum length of 1024 characters.
	Password string `pulumi:"password"`
	// User name, maximum length of 64 characters.
	Username string `pulumi:"username"`
}

// DataSourceCredentialsCredentialPairInput is an input type that accepts DataSourceCredentialsCredentialPairArgs and DataSourceCredentialsCredentialPairOutput values.
// You can construct a concrete instance of `DataSourceCredentialsCredentialPairInput` via:
//
//          DataSourceCredentialsCredentialPairArgs{...}
type DataSourceCredentialsCredentialPairInput interface {
	pulumi.Input

	ToDataSourceCredentialsCredentialPairOutput() DataSourceCredentialsCredentialPairOutput
	ToDataSourceCredentialsCredentialPairOutputWithContext(context.Context) DataSourceCredentialsCredentialPairOutput
}

type DataSourceCredentialsCredentialPairArgs struct {
	// Password, maximum length of 1024 characters.
	Password pulumi.StringInput `pulumi:"password"`
	// User name, maximum length of 64 characters.
	Username pulumi.StringInput `pulumi:"username"`
}

func (DataSourceCredentialsCredentialPairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceCredentialsCredentialPair)(nil)).Elem()
}

func (i DataSourceCredentialsCredentialPairArgs) ToDataSourceCredentialsCredentialPairOutput() DataSourceCredentialsCredentialPairOutput {
	return i.ToDataSourceCredentialsCredentialPairOutputWithContext(context.Background())
}

func (i DataSourceCredentialsCredentialPairArgs) ToDataSourceCredentialsCredentialPairOutputWithContext(ctx context.Context) DataSourceCredentialsCredentialPairOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceCredentialsCredentialPairOutput)
}

func (i DataSourceCredentialsCredentialPairArgs) ToDataSourceCredentialsCredentialPairPtrOutput() DataSourceCredentialsCredentialPairPtrOutput {
	return i.ToDataSourceCredentialsCredentialPairPtrOutputWithContext(context.Background())
}

func (i DataSourceCredentialsCredentialPairArgs) ToDataSourceCredentialsCredentialPairPtrOutputWithContext(ctx context.Context) DataSourceCredentialsCredentialPairPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceCredentialsCredentialPairOutput).ToDataSourceCredentialsCredentialPairPtrOutputWithContext(ctx)
}

// DataSourceCredentialsCredentialPairPtrInput is an input type that accepts DataSourceCredentialsCredentialPairArgs, DataSourceCredentialsCredentialPairPtr and DataSourceCredentialsCredentialPairPtrOutput values.
// You can construct a concrete instance of `DataSourceCredentialsCredentialPairPtrInput` via:
//
//          DataSourceCredentialsCredentialPairArgs{...}
//
//  or:
//
//          nil
type DataSourceCredentialsCredentialPairPtrInput interface {
	pulumi.Input

	ToDataSourceCredentialsCredentialPairPtrOutput() DataSourceCredentialsCredentialPairPtrOutput
	ToDataSourceCredentialsCredentialPairPtrOutputWithContext(context.Context) DataSourceCredentialsCredentialPairPtrOutput
}

type dataSourceCredentialsCredentialPairPtrType DataSourceCredentialsCredentialPairArgs

func DataSourceCredentialsCredentialPairPtr(v *DataSourceCredentialsCredentialPairArgs) DataSourceCredentialsCredentialPairPtrInput {
	return (*dataSourceCredentialsCredentialPairPtrType)(v)
}

func (*dataSourceCredentialsCredentialPairPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceCredentialsCredentialPair)(nil)).Elem()
}

func (i *dataSourceCredentialsCredentialPairPtrType) ToDataSourceCredentialsCredentialPairPtrOutput() DataSourceCredentialsCredentialPairPtrOutput {
	return i.ToDataSourceCredentialsCredentialPairPtrOutputWithContext(context.Background())
}

func (i *dataSourceCredentialsCredentialPairPtrType) ToDataSourceCredentialsCredentialPairPtrOutputWithContext(ctx context.Context) DataSourceCredentialsCredentialPairPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceCredentialsCredentialPairPtrOutput)
}

type DataSourceCredentialsCredentialPairOutput struct{ *pulumi.OutputState }

func (DataSourceCredentialsCredentialPairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceCredentialsCredentialPair)(nil)).Elem()
}

func (o DataSourceCredentialsCredentialPairOutput) ToDataSourceCredentialsCredentialPairOutput() DataSourceCredentialsCredentialPairOutput {
	return o
}

func (o DataSourceCredentialsCredentialPairOutput) ToDataSourceCredentialsCredentialPairOutputWithContext(ctx context.Context) DataSourceCredentialsCredentialPairOutput {
	return o
}

func (o DataSourceCredentialsCredentialPairOutput) ToDataSourceCredentialsCredentialPairPtrOutput() DataSourceCredentialsCredentialPairPtrOutput {
	return o.ToDataSourceCredentialsCredentialPairPtrOutputWithContext(context.Background())
}

func (o DataSourceCredentialsCredentialPairOutput) ToDataSourceCredentialsCredentialPairPtrOutputWithContext(ctx context.Context) DataSourceCredentialsCredentialPairPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceCredentialsCredentialPair) *DataSourceCredentialsCredentialPair {
		return &v
	}).(DataSourceCredentialsCredentialPairPtrOutput)
}

// Password, maximum length of 1024 characters.
func (o DataSourceCredentialsCredentialPairOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceCredentialsCredentialPair) string { return v.Password }).(pulumi.StringOutput)
}

// User name, maximum length of 64 characters.
func (o DataSourceCredentialsCredentialPairOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceCredentialsCredentialPair) string { return v.Username }).(pulumi.StringOutput)
}

type DataSourceCredentialsCredentialPairPtrOutput struct{ *pulumi.OutputState }

func (DataSourceCredentialsCredentialPairPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceCredentialsCredentialPair)(nil)).Elem()
}

func (o DataSourceCredentialsCredentialPairPtrOutput) ToDataSourceCredentialsCredentialPairPtrOutput() DataSourceCredentialsCredentialPairPtrOutput {
	return o
}

func (o DataSourceCredentialsCredentialPairPtrOutput) ToDataSourceCredentialsCredentialPairPtrOutputWithContext(ctx context.Context) DataSourceCredentialsCredentialPairPtrOutput {
	return o
}

func (o DataSourceCredentialsCredentialPairPtrOutput) Elem() DataSourceCredentialsCredentialPairOutput {
	return o.ApplyT(func(v *DataSourceCredentialsCredentialPair) DataSourceCredentialsCredentialPair {
		if v != nil {
			return *v
		}
		var ret DataSourceCredentialsCredentialPair
		return ret
	}).(DataSourceCredentialsCredentialPairOutput)
}

// Password, maximum length of 1024 characters.
func (o DataSourceCredentialsCredentialPairPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceCredentialsCredentialPair) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// User name, maximum length of 64 characters.
func (o DataSourceCredentialsCredentialPairPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceCredentialsCredentialPair) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type DataSourceParameters struct {
	// Parameters for connecting to Amazon Elasticsearch.
	AmazonElasticsearch *DataSourceParametersAmazonElasticsearch `pulumi:"amazonElasticsearch"`
	// Parameters for connecting to Athena.
	Athena *DataSourceParametersAthena `pulumi:"athena"`
	// Parameters for connecting to Aurora MySQL.
	Aurora *DataSourceParametersAurora `pulumi:"aurora"`
	// Parameters for connecting to Aurora Postgresql.
	AuroraPostgresql *DataSourceParametersAuroraPostgresql `pulumi:"auroraPostgresql"`
	// Parameters for connecting to AWS IOT Analytics.
	AwsIotAnalytics *DataSourceParametersAwsIotAnalytics `pulumi:"awsIotAnalytics"`
	// Parameters for connecting to Jira.
	Jira *DataSourceParametersJira `pulumi:"jira"`
	// Parameters for connecting to MariaDB.
	MariaDb *DataSourceParametersMariaDb `pulumi:"mariaDb"`
	// Parameters for connecting to MySQL.
	Mysql *DataSourceParametersMysql `pulumi:"mysql"`
	// Parameters for connecting to Oracle.
	Oracle *DataSourceParametersOracle `pulumi:"oracle"`
	// Parameters for connecting to Postgresql.
	Postgresql *DataSourceParametersPostgresql `pulumi:"postgresql"`
	// Parameters for connecting to Presto.
	Presto *DataSourceParametersPresto `pulumi:"presto"`
	// Parameters for connecting to RDS.
	Rds *DataSourceParametersRds `pulumi:"rds"`
	// Parameters for connecting to Redshift.
	Redshift *DataSourceParametersRedshift `pulumi:"redshift"`
	// Parameters for connecting to S3.
	S3 *DataSourceParametersS3 `pulumi:"s3"`
	// Parameters for connecting to ServiceNow.
	ServiceNow *DataSourceParametersServiceNow `pulumi:"serviceNow"`
	// Parameters for connecting to Snowflake.
	Snowflake *DataSourceParametersSnowflake `pulumi:"snowflake"`
	// Parameters for connecting to Spark.
	Spark *DataSourceParametersSpark `pulumi:"spark"`
	// Parameters for connecting to SQL Server.
	SqlServer *DataSourceParametersSqlServer `pulumi:"sqlServer"`
	// Parameters for connecting to Teradata.
	Teradata *DataSourceParametersTeradata `pulumi:"teradata"`
	// Parameters for connecting to Twitter.
	Twitter *DataSourceParametersTwitter `pulumi:"twitter"`
}

// DataSourceParametersInput is an input type that accepts DataSourceParametersArgs and DataSourceParametersOutput values.
// You can construct a concrete instance of `DataSourceParametersInput` via:
//
//          DataSourceParametersArgs{...}
type DataSourceParametersInput interface {
	pulumi.Input

	ToDataSourceParametersOutput() DataSourceParametersOutput
	ToDataSourceParametersOutputWithContext(context.Context) DataSourceParametersOutput
}

type DataSourceParametersArgs struct {
	// Parameters for connecting to Amazon Elasticsearch.
	AmazonElasticsearch DataSourceParametersAmazonElasticsearchPtrInput `pulumi:"amazonElasticsearch"`
	// Parameters for connecting to Athena.
	Athena DataSourceParametersAthenaPtrInput `pulumi:"athena"`
	// Parameters for connecting to Aurora MySQL.
	Aurora DataSourceParametersAuroraPtrInput `pulumi:"aurora"`
	// Parameters for connecting to Aurora Postgresql.
	AuroraPostgresql DataSourceParametersAuroraPostgresqlPtrInput `pulumi:"auroraPostgresql"`
	// Parameters for connecting to AWS IOT Analytics.
	AwsIotAnalytics DataSourceParametersAwsIotAnalyticsPtrInput `pulumi:"awsIotAnalytics"`
	// Parameters for connecting to Jira.
	Jira DataSourceParametersJiraPtrInput `pulumi:"jira"`
	// Parameters for connecting to MariaDB.
	MariaDb DataSourceParametersMariaDbPtrInput `pulumi:"mariaDb"`
	// Parameters for connecting to MySQL.
	Mysql DataSourceParametersMysqlPtrInput `pulumi:"mysql"`
	// Parameters for connecting to Oracle.
	Oracle DataSourceParametersOraclePtrInput `pulumi:"oracle"`
	// Parameters for connecting to Postgresql.
	Postgresql DataSourceParametersPostgresqlPtrInput `pulumi:"postgresql"`
	// Parameters for connecting to Presto.
	Presto DataSourceParametersPrestoPtrInput `pulumi:"presto"`
	// Parameters for connecting to RDS.
	Rds DataSourceParametersRdsPtrInput `pulumi:"rds"`
	// Parameters for connecting to Redshift.
	Redshift DataSourceParametersRedshiftPtrInput `pulumi:"redshift"`
	// Parameters for connecting to S3.
	S3 DataSourceParametersS3PtrInput `pulumi:"s3"`
	// Parameters for connecting to ServiceNow.
	ServiceNow DataSourceParametersServiceNowPtrInput `pulumi:"serviceNow"`
	// Parameters for connecting to Snowflake.
	Snowflake DataSourceParametersSnowflakePtrInput `pulumi:"snowflake"`
	// Parameters for connecting to Spark.
	Spark DataSourceParametersSparkPtrInput `pulumi:"spark"`
	// Parameters for connecting to SQL Server.
	SqlServer DataSourceParametersSqlServerPtrInput `pulumi:"sqlServer"`
	// Parameters for connecting to Teradata.
	Teradata DataSourceParametersTeradataPtrInput `pulumi:"teradata"`
	// Parameters for connecting to Twitter.
	Twitter DataSourceParametersTwitterPtrInput `pulumi:"twitter"`
}

func (DataSourceParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParameters)(nil)).Elem()
}

func (i DataSourceParametersArgs) ToDataSourceParametersOutput() DataSourceParametersOutput {
	return i.ToDataSourceParametersOutputWithContext(context.Background())
}

func (i DataSourceParametersArgs) ToDataSourceParametersOutputWithContext(ctx context.Context) DataSourceParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersOutput)
}

func (i DataSourceParametersArgs) ToDataSourceParametersPtrOutput() DataSourceParametersPtrOutput {
	return i.ToDataSourceParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersArgs) ToDataSourceParametersPtrOutputWithContext(ctx context.Context) DataSourceParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersOutput).ToDataSourceParametersPtrOutputWithContext(ctx)
}

// DataSourceParametersPtrInput is an input type that accepts DataSourceParametersArgs, DataSourceParametersPtr and DataSourceParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersPtrInput` via:
//
//          DataSourceParametersArgs{...}
//
//  or:
//
//          nil
type DataSourceParametersPtrInput interface {
	pulumi.Input

	ToDataSourceParametersPtrOutput() DataSourceParametersPtrOutput
	ToDataSourceParametersPtrOutputWithContext(context.Context) DataSourceParametersPtrOutput
}

type dataSourceParametersPtrType DataSourceParametersArgs

func DataSourceParametersPtr(v *DataSourceParametersArgs) DataSourceParametersPtrInput {
	return (*dataSourceParametersPtrType)(v)
}

func (*dataSourceParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParameters)(nil)).Elem()
}

func (i *dataSourceParametersPtrType) ToDataSourceParametersPtrOutput() DataSourceParametersPtrOutput {
	return i.ToDataSourceParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersPtrType) ToDataSourceParametersPtrOutputWithContext(ctx context.Context) DataSourceParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersPtrOutput)
}

type DataSourceParametersOutput struct{ *pulumi.OutputState }

func (DataSourceParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParameters)(nil)).Elem()
}

func (o DataSourceParametersOutput) ToDataSourceParametersOutput() DataSourceParametersOutput {
	return o
}

func (o DataSourceParametersOutput) ToDataSourceParametersOutputWithContext(ctx context.Context) DataSourceParametersOutput {
	return o
}

func (o DataSourceParametersOutput) ToDataSourceParametersPtrOutput() DataSourceParametersPtrOutput {
	return o.ToDataSourceParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersOutput) ToDataSourceParametersPtrOutputWithContext(ctx context.Context) DataSourceParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParameters) *DataSourceParameters {
		return &v
	}).(DataSourceParametersPtrOutput)
}

// Parameters for connecting to Amazon Elasticsearch.
func (o DataSourceParametersOutput) AmazonElasticsearch() DataSourceParametersAmazonElasticsearchPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersAmazonElasticsearch { return v.AmazonElasticsearch }).(DataSourceParametersAmazonElasticsearchPtrOutput)
}

// Parameters for connecting to Athena.
func (o DataSourceParametersOutput) Athena() DataSourceParametersAthenaPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersAthena { return v.Athena }).(DataSourceParametersAthenaPtrOutput)
}

// Parameters for connecting to Aurora MySQL.
func (o DataSourceParametersOutput) Aurora() DataSourceParametersAuroraPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersAurora { return v.Aurora }).(DataSourceParametersAuroraPtrOutput)
}

// Parameters for connecting to Aurora Postgresql.
func (o DataSourceParametersOutput) AuroraPostgresql() DataSourceParametersAuroraPostgresqlPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersAuroraPostgresql { return v.AuroraPostgresql }).(DataSourceParametersAuroraPostgresqlPtrOutput)
}

// Parameters for connecting to AWS IOT Analytics.
func (o DataSourceParametersOutput) AwsIotAnalytics() DataSourceParametersAwsIotAnalyticsPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersAwsIotAnalytics { return v.AwsIotAnalytics }).(DataSourceParametersAwsIotAnalyticsPtrOutput)
}

// Parameters for connecting to Jira.
func (o DataSourceParametersOutput) Jira() DataSourceParametersJiraPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersJira { return v.Jira }).(DataSourceParametersJiraPtrOutput)
}

// Parameters for connecting to MariaDB.
func (o DataSourceParametersOutput) MariaDb() DataSourceParametersMariaDbPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersMariaDb { return v.MariaDb }).(DataSourceParametersMariaDbPtrOutput)
}

// Parameters for connecting to MySQL.
func (o DataSourceParametersOutput) Mysql() DataSourceParametersMysqlPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersMysql { return v.Mysql }).(DataSourceParametersMysqlPtrOutput)
}

// Parameters for connecting to Oracle.
func (o DataSourceParametersOutput) Oracle() DataSourceParametersOraclePtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersOracle { return v.Oracle }).(DataSourceParametersOraclePtrOutput)
}

// Parameters for connecting to Postgresql.
func (o DataSourceParametersOutput) Postgresql() DataSourceParametersPostgresqlPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersPostgresql { return v.Postgresql }).(DataSourceParametersPostgresqlPtrOutput)
}

// Parameters for connecting to Presto.
func (o DataSourceParametersOutput) Presto() DataSourceParametersPrestoPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersPresto { return v.Presto }).(DataSourceParametersPrestoPtrOutput)
}

// Parameters for connecting to RDS.
func (o DataSourceParametersOutput) Rds() DataSourceParametersRdsPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersRds { return v.Rds }).(DataSourceParametersRdsPtrOutput)
}

// Parameters for connecting to Redshift.
func (o DataSourceParametersOutput) Redshift() DataSourceParametersRedshiftPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersRedshift { return v.Redshift }).(DataSourceParametersRedshiftPtrOutput)
}

// Parameters for connecting to S3.
func (o DataSourceParametersOutput) S3() DataSourceParametersS3PtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersS3 { return v.S3 }).(DataSourceParametersS3PtrOutput)
}

// Parameters for connecting to ServiceNow.
func (o DataSourceParametersOutput) ServiceNow() DataSourceParametersServiceNowPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersServiceNow { return v.ServiceNow }).(DataSourceParametersServiceNowPtrOutput)
}

// Parameters for connecting to Snowflake.
func (o DataSourceParametersOutput) Snowflake() DataSourceParametersSnowflakePtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersSnowflake { return v.Snowflake }).(DataSourceParametersSnowflakePtrOutput)
}

// Parameters for connecting to Spark.
func (o DataSourceParametersOutput) Spark() DataSourceParametersSparkPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersSpark { return v.Spark }).(DataSourceParametersSparkPtrOutput)
}

// Parameters for connecting to SQL Server.
func (o DataSourceParametersOutput) SqlServer() DataSourceParametersSqlServerPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersSqlServer { return v.SqlServer }).(DataSourceParametersSqlServerPtrOutput)
}

// Parameters for connecting to Teradata.
func (o DataSourceParametersOutput) Teradata() DataSourceParametersTeradataPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersTeradata { return v.Teradata }).(DataSourceParametersTeradataPtrOutput)
}

// Parameters for connecting to Twitter.
func (o DataSourceParametersOutput) Twitter() DataSourceParametersTwitterPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersTwitter { return v.Twitter }).(DataSourceParametersTwitterPtrOutput)
}

type DataSourceParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParameters)(nil)).Elem()
}

func (o DataSourceParametersPtrOutput) ToDataSourceParametersPtrOutput() DataSourceParametersPtrOutput {
	return o
}

func (o DataSourceParametersPtrOutput) ToDataSourceParametersPtrOutputWithContext(ctx context.Context) DataSourceParametersPtrOutput {
	return o
}

func (o DataSourceParametersPtrOutput) Elem() DataSourceParametersOutput {
	return o.ApplyT(func(v *DataSourceParameters) DataSourceParameters {
		if v != nil {
			return *v
		}
		var ret DataSourceParameters
		return ret
	}).(DataSourceParametersOutput)
}

// Parameters for connecting to Amazon Elasticsearch.
func (o DataSourceParametersPtrOutput) AmazonElasticsearch() DataSourceParametersAmazonElasticsearchPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersAmazonElasticsearch {
		if v == nil {
			return nil
		}
		return v.AmazonElasticsearch
	}).(DataSourceParametersAmazonElasticsearchPtrOutput)
}

// Parameters for connecting to Athena.
func (o DataSourceParametersPtrOutput) Athena() DataSourceParametersAthenaPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersAthena {
		if v == nil {
			return nil
		}
		return v.Athena
	}).(DataSourceParametersAthenaPtrOutput)
}

// Parameters for connecting to Aurora MySQL.
func (o DataSourceParametersPtrOutput) Aurora() DataSourceParametersAuroraPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersAurora {
		if v == nil {
			return nil
		}
		return v.Aurora
	}).(DataSourceParametersAuroraPtrOutput)
}

// Parameters for connecting to Aurora Postgresql.
func (o DataSourceParametersPtrOutput) AuroraPostgresql() DataSourceParametersAuroraPostgresqlPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersAuroraPostgresql {
		if v == nil {
			return nil
		}
		return v.AuroraPostgresql
	}).(DataSourceParametersAuroraPostgresqlPtrOutput)
}

// Parameters for connecting to AWS IOT Analytics.
func (o DataSourceParametersPtrOutput) AwsIotAnalytics() DataSourceParametersAwsIotAnalyticsPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersAwsIotAnalytics {
		if v == nil {
			return nil
		}
		return v.AwsIotAnalytics
	}).(DataSourceParametersAwsIotAnalyticsPtrOutput)
}

// Parameters for connecting to Jira.
func (o DataSourceParametersPtrOutput) Jira() DataSourceParametersJiraPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersJira {
		if v == nil {
			return nil
		}
		return v.Jira
	}).(DataSourceParametersJiraPtrOutput)
}

// Parameters for connecting to MariaDB.
func (o DataSourceParametersPtrOutput) MariaDb() DataSourceParametersMariaDbPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersMariaDb {
		if v == nil {
			return nil
		}
		return v.MariaDb
	}).(DataSourceParametersMariaDbPtrOutput)
}

// Parameters for connecting to MySQL.
func (o DataSourceParametersPtrOutput) Mysql() DataSourceParametersMysqlPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersMysql {
		if v == nil {
			return nil
		}
		return v.Mysql
	}).(DataSourceParametersMysqlPtrOutput)
}

// Parameters for connecting to Oracle.
func (o DataSourceParametersPtrOutput) Oracle() DataSourceParametersOraclePtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersOracle {
		if v == nil {
			return nil
		}
		return v.Oracle
	}).(DataSourceParametersOraclePtrOutput)
}

// Parameters for connecting to Postgresql.
func (o DataSourceParametersPtrOutput) Postgresql() DataSourceParametersPostgresqlPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersPostgresql {
		if v == nil {
			return nil
		}
		return v.Postgresql
	}).(DataSourceParametersPostgresqlPtrOutput)
}

// Parameters for connecting to Presto.
func (o DataSourceParametersPtrOutput) Presto() DataSourceParametersPrestoPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersPresto {
		if v == nil {
			return nil
		}
		return v.Presto
	}).(DataSourceParametersPrestoPtrOutput)
}

// Parameters for connecting to RDS.
func (o DataSourceParametersPtrOutput) Rds() DataSourceParametersRdsPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersRds {
		if v == nil {
			return nil
		}
		return v.Rds
	}).(DataSourceParametersRdsPtrOutput)
}

// Parameters for connecting to Redshift.
func (o DataSourceParametersPtrOutput) Redshift() DataSourceParametersRedshiftPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersRedshift {
		if v == nil {
			return nil
		}
		return v.Redshift
	}).(DataSourceParametersRedshiftPtrOutput)
}

// Parameters for connecting to S3.
func (o DataSourceParametersPtrOutput) S3() DataSourceParametersS3PtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersS3 {
		if v == nil {
			return nil
		}
		return v.S3
	}).(DataSourceParametersS3PtrOutput)
}

// Parameters for connecting to ServiceNow.
func (o DataSourceParametersPtrOutput) ServiceNow() DataSourceParametersServiceNowPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersServiceNow {
		if v == nil {
			return nil
		}
		return v.ServiceNow
	}).(DataSourceParametersServiceNowPtrOutput)
}

// Parameters for connecting to Snowflake.
func (o DataSourceParametersPtrOutput) Snowflake() DataSourceParametersSnowflakePtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersSnowflake {
		if v == nil {
			return nil
		}
		return v.Snowflake
	}).(DataSourceParametersSnowflakePtrOutput)
}

// Parameters for connecting to Spark.
func (o DataSourceParametersPtrOutput) Spark() DataSourceParametersSparkPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersSpark {
		if v == nil {
			return nil
		}
		return v.Spark
	}).(DataSourceParametersSparkPtrOutput)
}

// Parameters for connecting to SQL Server.
func (o DataSourceParametersPtrOutput) SqlServer() DataSourceParametersSqlServerPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersSqlServer {
		if v == nil {
			return nil
		}
		return v.SqlServer
	}).(DataSourceParametersSqlServerPtrOutput)
}

// Parameters for connecting to Teradata.
func (o DataSourceParametersPtrOutput) Teradata() DataSourceParametersTeradataPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersTeradata {
		if v == nil {
			return nil
		}
		return v.Teradata
	}).(DataSourceParametersTeradataPtrOutput)
}

// Parameters for connecting to Twitter.
func (o DataSourceParametersPtrOutput) Twitter() DataSourceParametersTwitterPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersTwitter {
		if v == nil {
			return nil
		}
		return v.Twitter
	}).(DataSourceParametersTwitterPtrOutput)
}

type DataSourceParametersAmazonElasticsearch struct {
	// The OpenSearch domain.
	Domain string `pulumi:"domain"`
}

// DataSourceParametersAmazonElasticsearchInput is an input type that accepts DataSourceParametersAmazonElasticsearchArgs and DataSourceParametersAmazonElasticsearchOutput values.
// You can construct a concrete instance of `DataSourceParametersAmazonElasticsearchInput` via:
//
//          DataSourceParametersAmazonElasticsearchArgs{...}
type DataSourceParametersAmazonElasticsearchInput interface {
	pulumi.Input

	ToDataSourceParametersAmazonElasticsearchOutput() DataSourceParametersAmazonElasticsearchOutput
	ToDataSourceParametersAmazonElasticsearchOutputWithContext(context.Context) DataSourceParametersAmazonElasticsearchOutput
}

type DataSourceParametersAmazonElasticsearchArgs struct {
	// The OpenSearch domain.
	Domain pulumi.StringInput `pulumi:"domain"`
}

func (DataSourceParametersAmazonElasticsearchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersAmazonElasticsearch)(nil)).Elem()
}

func (i DataSourceParametersAmazonElasticsearchArgs) ToDataSourceParametersAmazonElasticsearchOutput() DataSourceParametersAmazonElasticsearchOutput {
	return i.ToDataSourceParametersAmazonElasticsearchOutputWithContext(context.Background())
}

func (i DataSourceParametersAmazonElasticsearchArgs) ToDataSourceParametersAmazonElasticsearchOutputWithContext(ctx context.Context) DataSourceParametersAmazonElasticsearchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersAmazonElasticsearchOutput)
}

func (i DataSourceParametersAmazonElasticsearchArgs) ToDataSourceParametersAmazonElasticsearchPtrOutput() DataSourceParametersAmazonElasticsearchPtrOutput {
	return i.ToDataSourceParametersAmazonElasticsearchPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersAmazonElasticsearchArgs) ToDataSourceParametersAmazonElasticsearchPtrOutputWithContext(ctx context.Context) DataSourceParametersAmazonElasticsearchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersAmazonElasticsearchOutput).ToDataSourceParametersAmazonElasticsearchPtrOutputWithContext(ctx)
}

// DataSourceParametersAmazonElasticsearchPtrInput is an input type that accepts DataSourceParametersAmazonElasticsearchArgs, DataSourceParametersAmazonElasticsearchPtr and DataSourceParametersAmazonElasticsearchPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersAmazonElasticsearchPtrInput` via:
//
//          DataSourceParametersAmazonElasticsearchArgs{...}
//
//  or:
//
//          nil
type DataSourceParametersAmazonElasticsearchPtrInput interface {
	pulumi.Input

	ToDataSourceParametersAmazonElasticsearchPtrOutput() DataSourceParametersAmazonElasticsearchPtrOutput
	ToDataSourceParametersAmazonElasticsearchPtrOutputWithContext(context.Context) DataSourceParametersAmazonElasticsearchPtrOutput
}

type dataSourceParametersAmazonElasticsearchPtrType DataSourceParametersAmazonElasticsearchArgs

func DataSourceParametersAmazonElasticsearchPtr(v *DataSourceParametersAmazonElasticsearchArgs) DataSourceParametersAmazonElasticsearchPtrInput {
	return (*dataSourceParametersAmazonElasticsearchPtrType)(v)
}

func (*dataSourceParametersAmazonElasticsearchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersAmazonElasticsearch)(nil)).Elem()
}

func (i *dataSourceParametersAmazonElasticsearchPtrType) ToDataSourceParametersAmazonElasticsearchPtrOutput() DataSourceParametersAmazonElasticsearchPtrOutput {
	return i.ToDataSourceParametersAmazonElasticsearchPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersAmazonElasticsearchPtrType) ToDataSourceParametersAmazonElasticsearchPtrOutputWithContext(ctx context.Context) DataSourceParametersAmazonElasticsearchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersAmazonElasticsearchPtrOutput)
}

type DataSourceParametersAmazonElasticsearchOutput struct{ *pulumi.OutputState }

func (DataSourceParametersAmazonElasticsearchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersAmazonElasticsearch)(nil)).Elem()
}

func (o DataSourceParametersAmazonElasticsearchOutput) ToDataSourceParametersAmazonElasticsearchOutput() DataSourceParametersAmazonElasticsearchOutput {
	return o
}

func (o DataSourceParametersAmazonElasticsearchOutput) ToDataSourceParametersAmazonElasticsearchOutputWithContext(ctx context.Context) DataSourceParametersAmazonElasticsearchOutput {
	return o
}

func (o DataSourceParametersAmazonElasticsearchOutput) ToDataSourceParametersAmazonElasticsearchPtrOutput() DataSourceParametersAmazonElasticsearchPtrOutput {
	return o.ToDataSourceParametersAmazonElasticsearchPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersAmazonElasticsearchOutput) ToDataSourceParametersAmazonElasticsearchPtrOutputWithContext(ctx context.Context) DataSourceParametersAmazonElasticsearchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersAmazonElasticsearch) *DataSourceParametersAmazonElasticsearch {
		return &v
	}).(DataSourceParametersAmazonElasticsearchPtrOutput)
}

// The OpenSearch domain.
func (o DataSourceParametersAmazonElasticsearchOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersAmazonElasticsearch) string { return v.Domain }).(pulumi.StringOutput)
}

type DataSourceParametersAmazonElasticsearchPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersAmazonElasticsearchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersAmazonElasticsearch)(nil)).Elem()
}

func (o DataSourceParametersAmazonElasticsearchPtrOutput) ToDataSourceParametersAmazonElasticsearchPtrOutput() DataSourceParametersAmazonElasticsearchPtrOutput {
	return o
}

func (o DataSourceParametersAmazonElasticsearchPtrOutput) ToDataSourceParametersAmazonElasticsearchPtrOutputWithContext(ctx context.Context) DataSourceParametersAmazonElasticsearchPtrOutput {
	return o
}

func (o DataSourceParametersAmazonElasticsearchPtrOutput) Elem() DataSourceParametersAmazonElasticsearchOutput {
	return o.ApplyT(func(v *DataSourceParametersAmazonElasticsearch) DataSourceParametersAmazonElasticsearch {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersAmazonElasticsearch
		return ret
	}).(DataSourceParametersAmazonElasticsearchOutput)
}

// The OpenSearch domain.
func (o DataSourceParametersAmazonElasticsearchPtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersAmazonElasticsearch) *string {
		if v == nil {
			return nil
		}
		return &v.Domain
	}).(pulumi.StringPtrOutput)
}

type DataSourceParametersAthena struct {
	// The work-group to which to connect.
	WorkGroup *string `pulumi:"workGroup"`
}

// DataSourceParametersAthenaInput is an input type that accepts DataSourceParametersAthenaArgs and DataSourceParametersAthenaOutput values.
// You can construct a concrete instance of `DataSourceParametersAthenaInput` via:
//
//          DataSourceParametersAthenaArgs{...}
type DataSourceParametersAthenaInput interface {
	pulumi.Input

	ToDataSourceParametersAthenaOutput() DataSourceParametersAthenaOutput
	ToDataSourceParametersAthenaOutputWithContext(context.Context) DataSourceParametersAthenaOutput
}

type DataSourceParametersAthenaArgs struct {
	// The work-group to which to connect.
	WorkGroup pulumi.StringPtrInput `pulumi:"workGroup"`
}

func (DataSourceParametersAthenaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersAthena)(nil)).Elem()
}

func (i DataSourceParametersAthenaArgs) ToDataSourceParametersAthenaOutput() DataSourceParametersAthenaOutput {
	return i.ToDataSourceParametersAthenaOutputWithContext(context.Background())
}

func (i DataSourceParametersAthenaArgs) ToDataSourceParametersAthenaOutputWithContext(ctx context.Context) DataSourceParametersAthenaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersAthenaOutput)
}

func (i DataSourceParametersAthenaArgs) ToDataSourceParametersAthenaPtrOutput() DataSourceParametersAthenaPtrOutput {
	return i.ToDataSourceParametersAthenaPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersAthenaArgs) ToDataSourceParametersAthenaPtrOutputWithContext(ctx context.Context) DataSourceParametersAthenaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersAthenaOutput).ToDataSourceParametersAthenaPtrOutputWithContext(ctx)
}

// DataSourceParametersAthenaPtrInput is an input type that accepts DataSourceParametersAthenaArgs, DataSourceParametersAthenaPtr and DataSourceParametersAthenaPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersAthenaPtrInput` via:
//
//          DataSourceParametersAthenaArgs{...}
//
//  or:
//
//          nil
type DataSourceParametersAthenaPtrInput interface {
	pulumi.Input

	ToDataSourceParametersAthenaPtrOutput() DataSourceParametersAthenaPtrOutput
	ToDataSourceParametersAthenaPtrOutputWithContext(context.Context) DataSourceParametersAthenaPtrOutput
}

type dataSourceParametersAthenaPtrType DataSourceParametersAthenaArgs

func DataSourceParametersAthenaPtr(v *DataSourceParametersAthenaArgs) DataSourceParametersAthenaPtrInput {
	return (*dataSourceParametersAthenaPtrType)(v)
}

func (*dataSourceParametersAthenaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersAthena)(nil)).Elem()
}

func (i *dataSourceParametersAthenaPtrType) ToDataSourceParametersAthenaPtrOutput() DataSourceParametersAthenaPtrOutput {
	return i.ToDataSourceParametersAthenaPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersAthenaPtrType) ToDataSourceParametersAthenaPtrOutputWithContext(ctx context.Context) DataSourceParametersAthenaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersAthenaPtrOutput)
}

type DataSourceParametersAthenaOutput struct{ *pulumi.OutputState }

func (DataSourceParametersAthenaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersAthena)(nil)).Elem()
}

func (o DataSourceParametersAthenaOutput) ToDataSourceParametersAthenaOutput() DataSourceParametersAthenaOutput {
	return o
}

func (o DataSourceParametersAthenaOutput) ToDataSourceParametersAthenaOutputWithContext(ctx context.Context) DataSourceParametersAthenaOutput {
	return o
}

func (o DataSourceParametersAthenaOutput) ToDataSourceParametersAthenaPtrOutput() DataSourceParametersAthenaPtrOutput {
	return o.ToDataSourceParametersAthenaPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersAthenaOutput) ToDataSourceParametersAthenaPtrOutputWithContext(ctx context.Context) DataSourceParametersAthenaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersAthena) *DataSourceParametersAthena {
		return &v
	}).(DataSourceParametersAthenaPtrOutput)
}

// The work-group to which to connect.
func (o DataSourceParametersAthenaOutput) WorkGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceParametersAthena) *string { return v.WorkGroup }).(pulumi.StringPtrOutput)
}

type DataSourceParametersAthenaPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersAthenaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersAthena)(nil)).Elem()
}

func (o DataSourceParametersAthenaPtrOutput) ToDataSourceParametersAthenaPtrOutput() DataSourceParametersAthenaPtrOutput {
	return o
}

func (o DataSourceParametersAthenaPtrOutput) ToDataSourceParametersAthenaPtrOutputWithContext(ctx context.Context) DataSourceParametersAthenaPtrOutput {
	return o
}

func (o DataSourceParametersAthenaPtrOutput) Elem() DataSourceParametersAthenaOutput {
	return o.ApplyT(func(v *DataSourceParametersAthena) DataSourceParametersAthena {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersAthena
		return ret
	}).(DataSourceParametersAthenaOutput)
}

// The work-group to which to connect.
func (o DataSourceParametersAthenaPtrOutput) WorkGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersAthena) *string {
		if v == nil {
			return nil
		}
		return v.WorkGroup
	}).(pulumi.StringPtrOutput)
}

type DataSourceParametersAurora struct {
	// The database to which to connect.
	Database string `pulumi:"database"`
	// The host to which to connect.
	Host string `pulumi:"host"`
	// The port to which to connect.
	Port int `pulumi:"port"`
}

// DataSourceParametersAuroraInput is an input type that accepts DataSourceParametersAuroraArgs and DataSourceParametersAuroraOutput values.
// You can construct a concrete instance of `DataSourceParametersAuroraInput` via:
//
//          DataSourceParametersAuroraArgs{...}
type DataSourceParametersAuroraInput interface {
	pulumi.Input

	ToDataSourceParametersAuroraOutput() DataSourceParametersAuroraOutput
	ToDataSourceParametersAuroraOutputWithContext(context.Context) DataSourceParametersAuroraOutput
}

type DataSourceParametersAuroraArgs struct {
	// The database to which to connect.
	Database pulumi.StringInput `pulumi:"database"`
	// The host to which to connect.
	Host pulumi.StringInput `pulumi:"host"`
	// The port to which to connect.
	Port pulumi.IntInput `pulumi:"port"`
}

func (DataSourceParametersAuroraArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersAurora)(nil)).Elem()
}

func (i DataSourceParametersAuroraArgs) ToDataSourceParametersAuroraOutput() DataSourceParametersAuroraOutput {
	return i.ToDataSourceParametersAuroraOutputWithContext(context.Background())
}

func (i DataSourceParametersAuroraArgs) ToDataSourceParametersAuroraOutputWithContext(ctx context.Context) DataSourceParametersAuroraOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersAuroraOutput)
}

func (i DataSourceParametersAuroraArgs) ToDataSourceParametersAuroraPtrOutput() DataSourceParametersAuroraPtrOutput {
	return i.ToDataSourceParametersAuroraPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersAuroraArgs) ToDataSourceParametersAuroraPtrOutputWithContext(ctx context.Context) DataSourceParametersAuroraPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersAuroraOutput).ToDataSourceParametersAuroraPtrOutputWithContext(ctx)
}

// DataSourceParametersAuroraPtrInput is an input type that accepts DataSourceParametersAuroraArgs, DataSourceParametersAuroraPtr and DataSourceParametersAuroraPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersAuroraPtrInput` via:
//
//          DataSourceParametersAuroraArgs{...}
//
//  or:
//
//          nil
type DataSourceParametersAuroraPtrInput interface {
	pulumi.Input

	ToDataSourceParametersAuroraPtrOutput() DataSourceParametersAuroraPtrOutput
	ToDataSourceParametersAuroraPtrOutputWithContext(context.Context) DataSourceParametersAuroraPtrOutput
}

type dataSourceParametersAuroraPtrType DataSourceParametersAuroraArgs

func DataSourceParametersAuroraPtr(v *DataSourceParametersAuroraArgs) DataSourceParametersAuroraPtrInput {
	return (*dataSourceParametersAuroraPtrType)(v)
}

func (*dataSourceParametersAuroraPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersAurora)(nil)).Elem()
}

func (i *dataSourceParametersAuroraPtrType) ToDataSourceParametersAuroraPtrOutput() DataSourceParametersAuroraPtrOutput {
	return i.ToDataSourceParametersAuroraPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersAuroraPtrType) ToDataSourceParametersAuroraPtrOutputWithContext(ctx context.Context) DataSourceParametersAuroraPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersAuroraPtrOutput)
}

type DataSourceParametersAuroraOutput struct{ *pulumi.OutputState }

func (DataSourceParametersAuroraOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersAurora)(nil)).Elem()
}

func (o DataSourceParametersAuroraOutput) ToDataSourceParametersAuroraOutput() DataSourceParametersAuroraOutput {
	return o
}

func (o DataSourceParametersAuroraOutput) ToDataSourceParametersAuroraOutputWithContext(ctx context.Context) DataSourceParametersAuroraOutput {
	return o
}

func (o DataSourceParametersAuroraOutput) ToDataSourceParametersAuroraPtrOutput() DataSourceParametersAuroraPtrOutput {
	return o.ToDataSourceParametersAuroraPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersAuroraOutput) ToDataSourceParametersAuroraPtrOutputWithContext(ctx context.Context) DataSourceParametersAuroraPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersAurora) *DataSourceParametersAurora {
		return &v
	}).(DataSourceParametersAuroraPtrOutput)
}

// The database to which to connect.
func (o DataSourceParametersAuroraOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersAurora) string { return v.Database }).(pulumi.StringOutput)
}

// The host to which to connect.
func (o DataSourceParametersAuroraOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersAurora) string { return v.Host }).(pulumi.StringOutput)
}

// The port to which to connect.
func (o DataSourceParametersAuroraOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v DataSourceParametersAurora) int { return v.Port }).(pulumi.IntOutput)
}

type DataSourceParametersAuroraPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersAuroraPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersAurora)(nil)).Elem()
}

func (o DataSourceParametersAuroraPtrOutput) ToDataSourceParametersAuroraPtrOutput() DataSourceParametersAuroraPtrOutput {
	return o
}

func (o DataSourceParametersAuroraPtrOutput) ToDataSourceParametersAuroraPtrOutputWithContext(ctx context.Context) DataSourceParametersAuroraPtrOutput {
	return o
}

func (o DataSourceParametersAuroraPtrOutput) Elem() DataSourceParametersAuroraOutput {
	return o.ApplyT(func(v *DataSourceParametersAurora) DataSourceParametersAurora {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersAurora
		return ret
	}).(DataSourceParametersAuroraOutput)
}

// The database to which to connect.
func (o DataSourceParametersAuroraPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersAurora) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// The host to which to connect.
func (o DataSourceParametersAuroraPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersAurora) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The port to which to connect.
func (o DataSourceParametersAuroraPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersAurora) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

type DataSourceParametersAuroraPostgresql struct {
	// The database to which to connect.
	Database string `pulumi:"database"`
	// The host to which to connect.
	Host string `pulumi:"host"`
	// The port to which to connect.
	Port int `pulumi:"port"`
}

// DataSourceParametersAuroraPostgresqlInput is an input type that accepts DataSourceParametersAuroraPostgresqlArgs and DataSourceParametersAuroraPostgresqlOutput values.
// You can construct a concrete instance of `DataSourceParametersAuroraPostgresqlInput` via:
//
//          DataSourceParametersAuroraPostgresqlArgs{...}
type DataSourceParametersAuroraPostgresqlInput interface {
	pulumi.Input

	ToDataSourceParametersAuroraPostgresqlOutput() DataSourceParametersAuroraPostgresqlOutput
	ToDataSourceParametersAuroraPostgresqlOutputWithContext(context.Context) DataSourceParametersAuroraPostgresqlOutput
}

type DataSourceParametersAuroraPostgresqlArgs struct {
	// The database to which to connect.
	Database pulumi.StringInput `pulumi:"database"`
	// The host to which to connect.
	Host pulumi.StringInput `pulumi:"host"`
	// The port to which to connect.
	Port pulumi.IntInput `pulumi:"port"`
}

func (DataSourceParametersAuroraPostgresqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersAuroraPostgresql)(nil)).Elem()
}

func (i DataSourceParametersAuroraPostgresqlArgs) ToDataSourceParametersAuroraPostgresqlOutput() DataSourceParametersAuroraPostgresqlOutput {
	return i.ToDataSourceParametersAuroraPostgresqlOutputWithContext(context.Background())
}

func (i DataSourceParametersAuroraPostgresqlArgs) ToDataSourceParametersAuroraPostgresqlOutputWithContext(ctx context.Context) DataSourceParametersAuroraPostgresqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersAuroraPostgresqlOutput)
}

func (i DataSourceParametersAuroraPostgresqlArgs) ToDataSourceParametersAuroraPostgresqlPtrOutput() DataSourceParametersAuroraPostgresqlPtrOutput {
	return i.ToDataSourceParametersAuroraPostgresqlPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersAuroraPostgresqlArgs) ToDataSourceParametersAuroraPostgresqlPtrOutputWithContext(ctx context.Context) DataSourceParametersAuroraPostgresqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersAuroraPostgresqlOutput).ToDataSourceParametersAuroraPostgresqlPtrOutputWithContext(ctx)
}

// DataSourceParametersAuroraPostgresqlPtrInput is an input type that accepts DataSourceParametersAuroraPostgresqlArgs, DataSourceParametersAuroraPostgresqlPtr and DataSourceParametersAuroraPostgresqlPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersAuroraPostgresqlPtrInput` via:
//
//          DataSourceParametersAuroraPostgresqlArgs{...}
//
//  or:
//
//          nil
type DataSourceParametersAuroraPostgresqlPtrInput interface {
	pulumi.Input

	ToDataSourceParametersAuroraPostgresqlPtrOutput() DataSourceParametersAuroraPostgresqlPtrOutput
	ToDataSourceParametersAuroraPostgresqlPtrOutputWithContext(context.Context) DataSourceParametersAuroraPostgresqlPtrOutput
}

type dataSourceParametersAuroraPostgresqlPtrType DataSourceParametersAuroraPostgresqlArgs

func DataSourceParametersAuroraPostgresqlPtr(v *DataSourceParametersAuroraPostgresqlArgs) DataSourceParametersAuroraPostgresqlPtrInput {
	return (*dataSourceParametersAuroraPostgresqlPtrType)(v)
}

func (*dataSourceParametersAuroraPostgresqlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersAuroraPostgresql)(nil)).Elem()
}

func (i *dataSourceParametersAuroraPostgresqlPtrType) ToDataSourceParametersAuroraPostgresqlPtrOutput() DataSourceParametersAuroraPostgresqlPtrOutput {
	return i.ToDataSourceParametersAuroraPostgresqlPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersAuroraPostgresqlPtrType) ToDataSourceParametersAuroraPostgresqlPtrOutputWithContext(ctx context.Context) DataSourceParametersAuroraPostgresqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersAuroraPostgresqlPtrOutput)
}

type DataSourceParametersAuroraPostgresqlOutput struct{ *pulumi.OutputState }

func (DataSourceParametersAuroraPostgresqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersAuroraPostgresql)(nil)).Elem()
}

func (o DataSourceParametersAuroraPostgresqlOutput) ToDataSourceParametersAuroraPostgresqlOutput() DataSourceParametersAuroraPostgresqlOutput {
	return o
}

func (o DataSourceParametersAuroraPostgresqlOutput) ToDataSourceParametersAuroraPostgresqlOutputWithContext(ctx context.Context) DataSourceParametersAuroraPostgresqlOutput {
	return o
}

func (o DataSourceParametersAuroraPostgresqlOutput) ToDataSourceParametersAuroraPostgresqlPtrOutput() DataSourceParametersAuroraPostgresqlPtrOutput {
	return o.ToDataSourceParametersAuroraPostgresqlPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersAuroraPostgresqlOutput) ToDataSourceParametersAuroraPostgresqlPtrOutputWithContext(ctx context.Context) DataSourceParametersAuroraPostgresqlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersAuroraPostgresql) *DataSourceParametersAuroraPostgresql {
		return &v
	}).(DataSourceParametersAuroraPostgresqlPtrOutput)
}

// The database to which to connect.
func (o DataSourceParametersAuroraPostgresqlOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersAuroraPostgresql) string { return v.Database }).(pulumi.StringOutput)
}

// The host to which to connect.
func (o DataSourceParametersAuroraPostgresqlOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersAuroraPostgresql) string { return v.Host }).(pulumi.StringOutput)
}

// The port to which to connect.
func (o DataSourceParametersAuroraPostgresqlOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v DataSourceParametersAuroraPostgresql) int { return v.Port }).(pulumi.IntOutput)
}

type DataSourceParametersAuroraPostgresqlPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersAuroraPostgresqlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersAuroraPostgresql)(nil)).Elem()
}

func (o DataSourceParametersAuroraPostgresqlPtrOutput) ToDataSourceParametersAuroraPostgresqlPtrOutput() DataSourceParametersAuroraPostgresqlPtrOutput {
	return o
}

func (o DataSourceParametersAuroraPostgresqlPtrOutput) ToDataSourceParametersAuroraPostgresqlPtrOutputWithContext(ctx context.Context) DataSourceParametersAuroraPostgresqlPtrOutput {
	return o
}

func (o DataSourceParametersAuroraPostgresqlPtrOutput) Elem() DataSourceParametersAuroraPostgresqlOutput {
	return o.ApplyT(func(v *DataSourceParametersAuroraPostgresql) DataSourceParametersAuroraPostgresql {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersAuroraPostgresql
		return ret
	}).(DataSourceParametersAuroraPostgresqlOutput)
}

// The database to which to connect.
func (o DataSourceParametersAuroraPostgresqlPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersAuroraPostgresql) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// The host to which to connect.
func (o DataSourceParametersAuroraPostgresqlPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersAuroraPostgresql) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The port to which to connect.
func (o DataSourceParametersAuroraPostgresqlPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersAuroraPostgresql) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

type DataSourceParametersAwsIotAnalytics struct {
	// The name of the data set to which to connect.
	DataSetName string `pulumi:"dataSetName"`
}

// DataSourceParametersAwsIotAnalyticsInput is an input type that accepts DataSourceParametersAwsIotAnalyticsArgs and DataSourceParametersAwsIotAnalyticsOutput values.
// You can construct a concrete instance of `DataSourceParametersAwsIotAnalyticsInput` via:
//
//          DataSourceParametersAwsIotAnalyticsArgs{...}
type DataSourceParametersAwsIotAnalyticsInput interface {
	pulumi.Input

	ToDataSourceParametersAwsIotAnalyticsOutput() DataSourceParametersAwsIotAnalyticsOutput
	ToDataSourceParametersAwsIotAnalyticsOutputWithContext(context.Context) DataSourceParametersAwsIotAnalyticsOutput
}

type DataSourceParametersAwsIotAnalyticsArgs struct {
	// The name of the data set to which to connect.
	DataSetName pulumi.StringInput `pulumi:"dataSetName"`
}

func (DataSourceParametersAwsIotAnalyticsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersAwsIotAnalytics)(nil)).Elem()
}

func (i DataSourceParametersAwsIotAnalyticsArgs) ToDataSourceParametersAwsIotAnalyticsOutput() DataSourceParametersAwsIotAnalyticsOutput {
	return i.ToDataSourceParametersAwsIotAnalyticsOutputWithContext(context.Background())
}

func (i DataSourceParametersAwsIotAnalyticsArgs) ToDataSourceParametersAwsIotAnalyticsOutputWithContext(ctx context.Context) DataSourceParametersAwsIotAnalyticsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersAwsIotAnalyticsOutput)
}

func (i DataSourceParametersAwsIotAnalyticsArgs) ToDataSourceParametersAwsIotAnalyticsPtrOutput() DataSourceParametersAwsIotAnalyticsPtrOutput {
	return i.ToDataSourceParametersAwsIotAnalyticsPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersAwsIotAnalyticsArgs) ToDataSourceParametersAwsIotAnalyticsPtrOutputWithContext(ctx context.Context) DataSourceParametersAwsIotAnalyticsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersAwsIotAnalyticsOutput).ToDataSourceParametersAwsIotAnalyticsPtrOutputWithContext(ctx)
}

// DataSourceParametersAwsIotAnalyticsPtrInput is an input type that accepts DataSourceParametersAwsIotAnalyticsArgs, DataSourceParametersAwsIotAnalyticsPtr and DataSourceParametersAwsIotAnalyticsPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersAwsIotAnalyticsPtrInput` via:
//
//          DataSourceParametersAwsIotAnalyticsArgs{...}
//
//  or:
//
//          nil
type DataSourceParametersAwsIotAnalyticsPtrInput interface {
	pulumi.Input

	ToDataSourceParametersAwsIotAnalyticsPtrOutput() DataSourceParametersAwsIotAnalyticsPtrOutput
	ToDataSourceParametersAwsIotAnalyticsPtrOutputWithContext(context.Context) DataSourceParametersAwsIotAnalyticsPtrOutput
}

type dataSourceParametersAwsIotAnalyticsPtrType DataSourceParametersAwsIotAnalyticsArgs

func DataSourceParametersAwsIotAnalyticsPtr(v *DataSourceParametersAwsIotAnalyticsArgs) DataSourceParametersAwsIotAnalyticsPtrInput {
	return (*dataSourceParametersAwsIotAnalyticsPtrType)(v)
}

func (*dataSourceParametersAwsIotAnalyticsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersAwsIotAnalytics)(nil)).Elem()
}

func (i *dataSourceParametersAwsIotAnalyticsPtrType) ToDataSourceParametersAwsIotAnalyticsPtrOutput() DataSourceParametersAwsIotAnalyticsPtrOutput {
	return i.ToDataSourceParametersAwsIotAnalyticsPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersAwsIotAnalyticsPtrType) ToDataSourceParametersAwsIotAnalyticsPtrOutputWithContext(ctx context.Context) DataSourceParametersAwsIotAnalyticsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersAwsIotAnalyticsPtrOutput)
}

type DataSourceParametersAwsIotAnalyticsOutput struct{ *pulumi.OutputState }

func (DataSourceParametersAwsIotAnalyticsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersAwsIotAnalytics)(nil)).Elem()
}

func (o DataSourceParametersAwsIotAnalyticsOutput) ToDataSourceParametersAwsIotAnalyticsOutput() DataSourceParametersAwsIotAnalyticsOutput {
	return o
}

func (o DataSourceParametersAwsIotAnalyticsOutput) ToDataSourceParametersAwsIotAnalyticsOutputWithContext(ctx context.Context) DataSourceParametersAwsIotAnalyticsOutput {
	return o
}

func (o DataSourceParametersAwsIotAnalyticsOutput) ToDataSourceParametersAwsIotAnalyticsPtrOutput() DataSourceParametersAwsIotAnalyticsPtrOutput {
	return o.ToDataSourceParametersAwsIotAnalyticsPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersAwsIotAnalyticsOutput) ToDataSourceParametersAwsIotAnalyticsPtrOutputWithContext(ctx context.Context) DataSourceParametersAwsIotAnalyticsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersAwsIotAnalytics) *DataSourceParametersAwsIotAnalytics {
		return &v
	}).(DataSourceParametersAwsIotAnalyticsPtrOutput)
}

// The name of the data set to which to connect.
func (o DataSourceParametersAwsIotAnalyticsOutput) DataSetName() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersAwsIotAnalytics) string { return v.DataSetName }).(pulumi.StringOutput)
}

type DataSourceParametersAwsIotAnalyticsPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersAwsIotAnalyticsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersAwsIotAnalytics)(nil)).Elem()
}

func (o DataSourceParametersAwsIotAnalyticsPtrOutput) ToDataSourceParametersAwsIotAnalyticsPtrOutput() DataSourceParametersAwsIotAnalyticsPtrOutput {
	return o
}

func (o DataSourceParametersAwsIotAnalyticsPtrOutput) ToDataSourceParametersAwsIotAnalyticsPtrOutputWithContext(ctx context.Context) DataSourceParametersAwsIotAnalyticsPtrOutput {
	return o
}

func (o DataSourceParametersAwsIotAnalyticsPtrOutput) Elem() DataSourceParametersAwsIotAnalyticsOutput {
	return o.ApplyT(func(v *DataSourceParametersAwsIotAnalytics) DataSourceParametersAwsIotAnalytics {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersAwsIotAnalytics
		return ret
	}).(DataSourceParametersAwsIotAnalyticsOutput)
}

// The name of the data set to which to connect.
func (o DataSourceParametersAwsIotAnalyticsPtrOutput) DataSetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersAwsIotAnalytics) *string {
		if v == nil {
			return nil
		}
		return &v.DataSetName
	}).(pulumi.StringPtrOutput)
}

type DataSourceParametersJira struct {
	// The base URL of the Jira instance's site to which to connect.
	SiteBaseUrl string `pulumi:"siteBaseUrl"`
}

// DataSourceParametersJiraInput is an input type that accepts DataSourceParametersJiraArgs and DataSourceParametersJiraOutput values.
// You can construct a concrete instance of `DataSourceParametersJiraInput` via:
//
//          DataSourceParametersJiraArgs{...}
type DataSourceParametersJiraInput interface {
	pulumi.Input

	ToDataSourceParametersJiraOutput() DataSourceParametersJiraOutput
	ToDataSourceParametersJiraOutputWithContext(context.Context) DataSourceParametersJiraOutput
}

type DataSourceParametersJiraArgs struct {
	// The base URL of the Jira instance's site to which to connect.
	SiteBaseUrl pulumi.StringInput `pulumi:"siteBaseUrl"`
}

func (DataSourceParametersJiraArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersJira)(nil)).Elem()
}

func (i DataSourceParametersJiraArgs) ToDataSourceParametersJiraOutput() DataSourceParametersJiraOutput {
	return i.ToDataSourceParametersJiraOutputWithContext(context.Background())
}

func (i DataSourceParametersJiraArgs) ToDataSourceParametersJiraOutputWithContext(ctx context.Context) DataSourceParametersJiraOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersJiraOutput)
}

func (i DataSourceParametersJiraArgs) ToDataSourceParametersJiraPtrOutput() DataSourceParametersJiraPtrOutput {
	return i.ToDataSourceParametersJiraPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersJiraArgs) ToDataSourceParametersJiraPtrOutputWithContext(ctx context.Context) DataSourceParametersJiraPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersJiraOutput).ToDataSourceParametersJiraPtrOutputWithContext(ctx)
}

// DataSourceParametersJiraPtrInput is an input type that accepts DataSourceParametersJiraArgs, DataSourceParametersJiraPtr and DataSourceParametersJiraPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersJiraPtrInput` via:
//
//          DataSourceParametersJiraArgs{...}
//
//  or:
//
//          nil
type DataSourceParametersJiraPtrInput interface {
	pulumi.Input

	ToDataSourceParametersJiraPtrOutput() DataSourceParametersJiraPtrOutput
	ToDataSourceParametersJiraPtrOutputWithContext(context.Context) DataSourceParametersJiraPtrOutput
}

type dataSourceParametersJiraPtrType DataSourceParametersJiraArgs

func DataSourceParametersJiraPtr(v *DataSourceParametersJiraArgs) DataSourceParametersJiraPtrInput {
	return (*dataSourceParametersJiraPtrType)(v)
}

func (*dataSourceParametersJiraPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersJira)(nil)).Elem()
}

func (i *dataSourceParametersJiraPtrType) ToDataSourceParametersJiraPtrOutput() DataSourceParametersJiraPtrOutput {
	return i.ToDataSourceParametersJiraPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersJiraPtrType) ToDataSourceParametersJiraPtrOutputWithContext(ctx context.Context) DataSourceParametersJiraPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersJiraPtrOutput)
}

type DataSourceParametersJiraOutput struct{ *pulumi.OutputState }

func (DataSourceParametersJiraOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersJira)(nil)).Elem()
}

func (o DataSourceParametersJiraOutput) ToDataSourceParametersJiraOutput() DataSourceParametersJiraOutput {
	return o
}

func (o DataSourceParametersJiraOutput) ToDataSourceParametersJiraOutputWithContext(ctx context.Context) DataSourceParametersJiraOutput {
	return o
}

func (o DataSourceParametersJiraOutput) ToDataSourceParametersJiraPtrOutput() DataSourceParametersJiraPtrOutput {
	return o.ToDataSourceParametersJiraPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersJiraOutput) ToDataSourceParametersJiraPtrOutputWithContext(ctx context.Context) DataSourceParametersJiraPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersJira) *DataSourceParametersJira {
		return &v
	}).(DataSourceParametersJiraPtrOutput)
}

// The base URL of the Jira instance's site to which to connect.
func (o DataSourceParametersJiraOutput) SiteBaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersJira) string { return v.SiteBaseUrl }).(pulumi.StringOutput)
}

type DataSourceParametersJiraPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersJiraPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersJira)(nil)).Elem()
}

func (o DataSourceParametersJiraPtrOutput) ToDataSourceParametersJiraPtrOutput() DataSourceParametersJiraPtrOutput {
	return o
}

func (o DataSourceParametersJiraPtrOutput) ToDataSourceParametersJiraPtrOutputWithContext(ctx context.Context) DataSourceParametersJiraPtrOutput {
	return o
}

func (o DataSourceParametersJiraPtrOutput) Elem() DataSourceParametersJiraOutput {
	return o.ApplyT(func(v *DataSourceParametersJira) DataSourceParametersJira {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersJira
		return ret
	}).(DataSourceParametersJiraOutput)
}

// The base URL of the Jira instance's site to which to connect.
func (o DataSourceParametersJiraPtrOutput) SiteBaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersJira) *string {
		if v == nil {
			return nil
		}
		return &v.SiteBaseUrl
	}).(pulumi.StringPtrOutput)
}

type DataSourceParametersMariaDb struct {
	// The database to which to connect.
	Database string `pulumi:"database"`
	// The host to which to connect.
	Host string `pulumi:"host"`
	// The port to which to connect.
	Port int `pulumi:"port"`
}

// DataSourceParametersMariaDbInput is an input type that accepts DataSourceParametersMariaDbArgs and DataSourceParametersMariaDbOutput values.
// You can construct a concrete instance of `DataSourceParametersMariaDbInput` via:
//
//          DataSourceParametersMariaDbArgs{...}
type DataSourceParametersMariaDbInput interface {
	pulumi.Input

	ToDataSourceParametersMariaDbOutput() DataSourceParametersMariaDbOutput
	ToDataSourceParametersMariaDbOutputWithContext(context.Context) DataSourceParametersMariaDbOutput
}

type DataSourceParametersMariaDbArgs struct {
	// The database to which to connect.
	Database pulumi.StringInput `pulumi:"database"`
	// The host to which to connect.
	Host pulumi.StringInput `pulumi:"host"`
	// The port to which to connect.
	Port pulumi.IntInput `pulumi:"port"`
}

func (DataSourceParametersMariaDbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersMariaDb)(nil)).Elem()
}

func (i DataSourceParametersMariaDbArgs) ToDataSourceParametersMariaDbOutput() DataSourceParametersMariaDbOutput {
	return i.ToDataSourceParametersMariaDbOutputWithContext(context.Background())
}

func (i DataSourceParametersMariaDbArgs) ToDataSourceParametersMariaDbOutputWithContext(ctx context.Context) DataSourceParametersMariaDbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersMariaDbOutput)
}

func (i DataSourceParametersMariaDbArgs) ToDataSourceParametersMariaDbPtrOutput() DataSourceParametersMariaDbPtrOutput {
	return i.ToDataSourceParametersMariaDbPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersMariaDbArgs) ToDataSourceParametersMariaDbPtrOutputWithContext(ctx context.Context) DataSourceParametersMariaDbPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersMariaDbOutput).ToDataSourceParametersMariaDbPtrOutputWithContext(ctx)
}

// DataSourceParametersMariaDbPtrInput is an input type that accepts DataSourceParametersMariaDbArgs, DataSourceParametersMariaDbPtr and DataSourceParametersMariaDbPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersMariaDbPtrInput` via:
//
//          DataSourceParametersMariaDbArgs{...}
//
//  or:
//
//          nil
type DataSourceParametersMariaDbPtrInput interface {
	pulumi.Input

	ToDataSourceParametersMariaDbPtrOutput() DataSourceParametersMariaDbPtrOutput
	ToDataSourceParametersMariaDbPtrOutputWithContext(context.Context) DataSourceParametersMariaDbPtrOutput
}

type dataSourceParametersMariaDbPtrType DataSourceParametersMariaDbArgs

func DataSourceParametersMariaDbPtr(v *DataSourceParametersMariaDbArgs) DataSourceParametersMariaDbPtrInput {
	return (*dataSourceParametersMariaDbPtrType)(v)
}

func (*dataSourceParametersMariaDbPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersMariaDb)(nil)).Elem()
}

func (i *dataSourceParametersMariaDbPtrType) ToDataSourceParametersMariaDbPtrOutput() DataSourceParametersMariaDbPtrOutput {
	return i.ToDataSourceParametersMariaDbPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersMariaDbPtrType) ToDataSourceParametersMariaDbPtrOutputWithContext(ctx context.Context) DataSourceParametersMariaDbPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersMariaDbPtrOutput)
}

type DataSourceParametersMariaDbOutput struct{ *pulumi.OutputState }

func (DataSourceParametersMariaDbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersMariaDb)(nil)).Elem()
}

func (o DataSourceParametersMariaDbOutput) ToDataSourceParametersMariaDbOutput() DataSourceParametersMariaDbOutput {
	return o
}

func (o DataSourceParametersMariaDbOutput) ToDataSourceParametersMariaDbOutputWithContext(ctx context.Context) DataSourceParametersMariaDbOutput {
	return o
}

func (o DataSourceParametersMariaDbOutput) ToDataSourceParametersMariaDbPtrOutput() DataSourceParametersMariaDbPtrOutput {
	return o.ToDataSourceParametersMariaDbPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersMariaDbOutput) ToDataSourceParametersMariaDbPtrOutputWithContext(ctx context.Context) DataSourceParametersMariaDbPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersMariaDb) *DataSourceParametersMariaDb {
		return &v
	}).(DataSourceParametersMariaDbPtrOutput)
}

// The database to which to connect.
func (o DataSourceParametersMariaDbOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersMariaDb) string { return v.Database }).(pulumi.StringOutput)
}

// The host to which to connect.
func (o DataSourceParametersMariaDbOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersMariaDb) string { return v.Host }).(pulumi.StringOutput)
}

// The port to which to connect.
func (o DataSourceParametersMariaDbOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v DataSourceParametersMariaDb) int { return v.Port }).(pulumi.IntOutput)
}

type DataSourceParametersMariaDbPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersMariaDbPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersMariaDb)(nil)).Elem()
}

func (o DataSourceParametersMariaDbPtrOutput) ToDataSourceParametersMariaDbPtrOutput() DataSourceParametersMariaDbPtrOutput {
	return o
}

func (o DataSourceParametersMariaDbPtrOutput) ToDataSourceParametersMariaDbPtrOutputWithContext(ctx context.Context) DataSourceParametersMariaDbPtrOutput {
	return o
}

func (o DataSourceParametersMariaDbPtrOutput) Elem() DataSourceParametersMariaDbOutput {
	return o.ApplyT(func(v *DataSourceParametersMariaDb) DataSourceParametersMariaDb {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersMariaDb
		return ret
	}).(DataSourceParametersMariaDbOutput)
}

// The database to which to connect.
func (o DataSourceParametersMariaDbPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersMariaDb) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// The host to which to connect.
func (o DataSourceParametersMariaDbPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersMariaDb) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The port to which to connect.
func (o DataSourceParametersMariaDbPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersMariaDb) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

type DataSourceParametersMysql struct {
	// The database to which to connect.
	Database string `pulumi:"database"`
	// The host to which to connect.
	Host string `pulumi:"host"`
	// The port to which to connect.
	Port int `pulumi:"port"`
}

// DataSourceParametersMysqlInput is an input type that accepts DataSourceParametersMysqlArgs and DataSourceParametersMysqlOutput values.
// You can construct a concrete instance of `DataSourceParametersMysqlInput` via:
//
//          DataSourceParametersMysqlArgs{...}
type DataSourceParametersMysqlInput interface {
	pulumi.Input

	ToDataSourceParametersMysqlOutput() DataSourceParametersMysqlOutput
	ToDataSourceParametersMysqlOutputWithContext(context.Context) DataSourceParametersMysqlOutput
}

type DataSourceParametersMysqlArgs struct {
	// The database to which to connect.
	Database pulumi.StringInput `pulumi:"database"`
	// The host to which to connect.
	Host pulumi.StringInput `pulumi:"host"`
	// The port to which to connect.
	Port pulumi.IntInput `pulumi:"port"`
}

func (DataSourceParametersMysqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersMysql)(nil)).Elem()
}

func (i DataSourceParametersMysqlArgs) ToDataSourceParametersMysqlOutput() DataSourceParametersMysqlOutput {
	return i.ToDataSourceParametersMysqlOutputWithContext(context.Background())
}

func (i DataSourceParametersMysqlArgs) ToDataSourceParametersMysqlOutputWithContext(ctx context.Context) DataSourceParametersMysqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersMysqlOutput)
}

func (i DataSourceParametersMysqlArgs) ToDataSourceParametersMysqlPtrOutput() DataSourceParametersMysqlPtrOutput {
	return i.ToDataSourceParametersMysqlPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersMysqlArgs) ToDataSourceParametersMysqlPtrOutputWithContext(ctx context.Context) DataSourceParametersMysqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersMysqlOutput).ToDataSourceParametersMysqlPtrOutputWithContext(ctx)
}

// DataSourceParametersMysqlPtrInput is an input type that accepts DataSourceParametersMysqlArgs, DataSourceParametersMysqlPtr and DataSourceParametersMysqlPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersMysqlPtrInput` via:
//
//          DataSourceParametersMysqlArgs{...}
//
//  or:
//
//          nil
type DataSourceParametersMysqlPtrInput interface {
	pulumi.Input

	ToDataSourceParametersMysqlPtrOutput() DataSourceParametersMysqlPtrOutput
	ToDataSourceParametersMysqlPtrOutputWithContext(context.Context) DataSourceParametersMysqlPtrOutput
}

type dataSourceParametersMysqlPtrType DataSourceParametersMysqlArgs

func DataSourceParametersMysqlPtr(v *DataSourceParametersMysqlArgs) DataSourceParametersMysqlPtrInput {
	return (*dataSourceParametersMysqlPtrType)(v)
}

func (*dataSourceParametersMysqlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersMysql)(nil)).Elem()
}

func (i *dataSourceParametersMysqlPtrType) ToDataSourceParametersMysqlPtrOutput() DataSourceParametersMysqlPtrOutput {
	return i.ToDataSourceParametersMysqlPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersMysqlPtrType) ToDataSourceParametersMysqlPtrOutputWithContext(ctx context.Context) DataSourceParametersMysqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersMysqlPtrOutput)
}

type DataSourceParametersMysqlOutput struct{ *pulumi.OutputState }

func (DataSourceParametersMysqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersMysql)(nil)).Elem()
}

func (o DataSourceParametersMysqlOutput) ToDataSourceParametersMysqlOutput() DataSourceParametersMysqlOutput {
	return o
}

func (o DataSourceParametersMysqlOutput) ToDataSourceParametersMysqlOutputWithContext(ctx context.Context) DataSourceParametersMysqlOutput {
	return o
}

func (o DataSourceParametersMysqlOutput) ToDataSourceParametersMysqlPtrOutput() DataSourceParametersMysqlPtrOutput {
	return o.ToDataSourceParametersMysqlPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersMysqlOutput) ToDataSourceParametersMysqlPtrOutputWithContext(ctx context.Context) DataSourceParametersMysqlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersMysql) *DataSourceParametersMysql {
		return &v
	}).(DataSourceParametersMysqlPtrOutput)
}

// The database to which to connect.
func (o DataSourceParametersMysqlOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersMysql) string { return v.Database }).(pulumi.StringOutput)
}

// The host to which to connect.
func (o DataSourceParametersMysqlOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersMysql) string { return v.Host }).(pulumi.StringOutput)
}

// The port to which to connect.
func (o DataSourceParametersMysqlOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v DataSourceParametersMysql) int { return v.Port }).(pulumi.IntOutput)
}

type DataSourceParametersMysqlPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersMysqlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersMysql)(nil)).Elem()
}

func (o DataSourceParametersMysqlPtrOutput) ToDataSourceParametersMysqlPtrOutput() DataSourceParametersMysqlPtrOutput {
	return o
}

func (o DataSourceParametersMysqlPtrOutput) ToDataSourceParametersMysqlPtrOutputWithContext(ctx context.Context) DataSourceParametersMysqlPtrOutput {
	return o
}

func (o DataSourceParametersMysqlPtrOutput) Elem() DataSourceParametersMysqlOutput {
	return o.ApplyT(func(v *DataSourceParametersMysql) DataSourceParametersMysql {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersMysql
		return ret
	}).(DataSourceParametersMysqlOutput)
}

// The database to which to connect.
func (o DataSourceParametersMysqlPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersMysql) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// The host to which to connect.
func (o DataSourceParametersMysqlPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersMysql) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The port to which to connect.
func (o DataSourceParametersMysqlPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersMysql) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

type DataSourceParametersOracle struct {
	// The database to which to connect.
	Database string `pulumi:"database"`
	// The host to which to connect.
	Host string `pulumi:"host"`
	// The port to which to connect.
	Port int `pulumi:"port"`
}

// DataSourceParametersOracleInput is an input type that accepts DataSourceParametersOracleArgs and DataSourceParametersOracleOutput values.
// You can construct a concrete instance of `DataSourceParametersOracleInput` via:
//
//          DataSourceParametersOracleArgs{...}
type DataSourceParametersOracleInput interface {
	pulumi.Input

	ToDataSourceParametersOracleOutput() DataSourceParametersOracleOutput
	ToDataSourceParametersOracleOutputWithContext(context.Context) DataSourceParametersOracleOutput
}

type DataSourceParametersOracleArgs struct {
	// The database to which to connect.
	Database pulumi.StringInput `pulumi:"database"`
	// The host to which to connect.
	Host pulumi.StringInput `pulumi:"host"`
	// The port to which to connect.
	Port pulumi.IntInput `pulumi:"port"`
}

func (DataSourceParametersOracleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersOracle)(nil)).Elem()
}

func (i DataSourceParametersOracleArgs) ToDataSourceParametersOracleOutput() DataSourceParametersOracleOutput {
	return i.ToDataSourceParametersOracleOutputWithContext(context.Background())
}

func (i DataSourceParametersOracleArgs) ToDataSourceParametersOracleOutputWithContext(ctx context.Context) DataSourceParametersOracleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersOracleOutput)
}

func (i DataSourceParametersOracleArgs) ToDataSourceParametersOraclePtrOutput() DataSourceParametersOraclePtrOutput {
	return i.ToDataSourceParametersOraclePtrOutputWithContext(context.Background())
}

func (i DataSourceParametersOracleArgs) ToDataSourceParametersOraclePtrOutputWithContext(ctx context.Context) DataSourceParametersOraclePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersOracleOutput).ToDataSourceParametersOraclePtrOutputWithContext(ctx)
}

// DataSourceParametersOraclePtrInput is an input type that accepts DataSourceParametersOracleArgs, DataSourceParametersOraclePtr and DataSourceParametersOraclePtrOutput values.
// You can construct a concrete instance of `DataSourceParametersOraclePtrInput` via:
//
//          DataSourceParametersOracleArgs{...}
//
//  or:
//
//          nil
type DataSourceParametersOraclePtrInput interface {
	pulumi.Input

	ToDataSourceParametersOraclePtrOutput() DataSourceParametersOraclePtrOutput
	ToDataSourceParametersOraclePtrOutputWithContext(context.Context) DataSourceParametersOraclePtrOutput
}

type dataSourceParametersOraclePtrType DataSourceParametersOracleArgs

func DataSourceParametersOraclePtr(v *DataSourceParametersOracleArgs) DataSourceParametersOraclePtrInput {
	return (*dataSourceParametersOraclePtrType)(v)
}

func (*dataSourceParametersOraclePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersOracle)(nil)).Elem()
}

func (i *dataSourceParametersOraclePtrType) ToDataSourceParametersOraclePtrOutput() DataSourceParametersOraclePtrOutput {
	return i.ToDataSourceParametersOraclePtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersOraclePtrType) ToDataSourceParametersOraclePtrOutputWithContext(ctx context.Context) DataSourceParametersOraclePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersOraclePtrOutput)
}

type DataSourceParametersOracleOutput struct{ *pulumi.OutputState }

func (DataSourceParametersOracleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersOracle)(nil)).Elem()
}

func (o DataSourceParametersOracleOutput) ToDataSourceParametersOracleOutput() DataSourceParametersOracleOutput {
	return o
}

func (o DataSourceParametersOracleOutput) ToDataSourceParametersOracleOutputWithContext(ctx context.Context) DataSourceParametersOracleOutput {
	return o
}

func (o DataSourceParametersOracleOutput) ToDataSourceParametersOraclePtrOutput() DataSourceParametersOraclePtrOutput {
	return o.ToDataSourceParametersOraclePtrOutputWithContext(context.Background())
}

func (o DataSourceParametersOracleOutput) ToDataSourceParametersOraclePtrOutputWithContext(ctx context.Context) DataSourceParametersOraclePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersOracle) *DataSourceParametersOracle {
		return &v
	}).(DataSourceParametersOraclePtrOutput)
}

// The database to which to connect.
func (o DataSourceParametersOracleOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersOracle) string { return v.Database }).(pulumi.StringOutput)
}

// The host to which to connect.
func (o DataSourceParametersOracleOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersOracle) string { return v.Host }).(pulumi.StringOutput)
}

// The port to which to connect.
func (o DataSourceParametersOracleOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v DataSourceParametersOracle) int { return v.Port }).(pulumi.IntOutput)
}

type DataSourceParametersOraclePtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersOraclePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersOracle)(nil)).Elem()
}

func (o DataSourceParametersOraclePtrOutput) ToDataSourceParametersOraclePtrOutput() DataSourceParametersOraclePtrOutput {
	return o
}

func (o DataSourceParametersOraclePtrOutput) ToDataSourceParametersOraclePtrOutputWithContext(ctx context.Context) DataSourceParametersOraclePtrOutput {
	return o
}

func (o DataSourceParametersOraclePtrOutput) Elem() DataSourceParametersOracleOutput {
	return o.ApplyT(func(v *DataSourceParametersOracle) DataSourceParametersOracle {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersOracle
		return ret
	}).(DataSourceParametersOracleOutput)
}

// The database to which to connect.
func (o DataSourceParametersOraclePtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersOracle) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// The host to which to connect.
func (o DataSourceParametersOraclePtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersOracle) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The port to which to connect.
func (o DataSourceParametersOraclePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersOracle) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

type DataSourceParametersPostgresql struct {
	// The database to which to connect.
	Database string `pulumi:"database"`
	// The host to which to connect.
	Host string `pulumi:"host"`
	// The port to which to connect.
	Port int `pulumi:"port"`
}

// DataSourceParametersPostgresqlInput is an input type that accepts DataSourceParametersPostgresqlArgs and DataSourceParametersPostgresqlOutput values.
// You can construct a concrete instance of `DataSourceParametersPostgresqlInput` via:
//
//          DataSourceParametersPostgresqlArgs{...}
type DataSourceParametersPostgresqlInput interface {
	pulumi.Input

	ToDataSourceParametersPostgresqlOutput() DataSourceParametersPostgresqlOutput
	ToDataSourceParametersPostgresqlOutputWithContext(context.Context) DataSourceParametersPostgresqlOutput
}

type DataSourceParametersPostgresqlArgs struct {
	// The database to which to connect.
	Database pulumi.StringInput `pulumi:"database"`
	// The host to which to connect.
	Host pulumi.StringInput `pulumi:"host"`
	// The port to which to connect.
	Port pulumi.IntInput `pulumi:"port"`
}

func (DataSourceParametersPostgresqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersPostgresql)(nil)).Elem()
}

func (i DataSourceParametersPostgresqlArgs) ToDataSourceParametersPostgresqlOutput() DataSourceParametersPostgresqlOutput {
	return i.ToDataSourceParametersPostgresqlOutputWithContext(context.Background())
}

func (i DataSourceParametersPostgresqlArgs) ToDataSourceParametersPostgresqlOutputWithContext(ctx context.Context) DataSourceParametersPostgresqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersPostgresqlOutput)
}

func (i DataSourceParametersPostgresqlArgs) ToDataSourceParametersPostgresqlPtrOutput() DataSourceParametersPostgresqlPtrOutput {
	return i.ToDataSourceParametersPostgresqlPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersPostgresqlArgs) ToDataSourceParametersPostgresqlPtrOutputWithContext(ctx context.Context) DataSourceParametersPostgresqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersPostgresqlOutput).ToDataSourceParametersPostgresqlPtrOutputWithContext(ctx)
}

// DataSourceParametersPostgresqlPtrInput is an input type that accepts DataSourceParametersPostgresqlArgs, DataSourceParametersPostgresqlPtr and DataSourceParametersPostgresqlPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersPostgresqlPtrInput` via:
//
//          DataSourceParametersPostgresqlArgs{...}
//
//  or:
//
//          nil
type DataSourceParametersPostgresqlPtrInput interface {
	pulumi.Input

	ToDataSourceParametersPostgresqlPtrOutput() DataSourceParametersPostgresqlPtrOutput
	ToDataSourceParametersPostgresqlPtrOutputWithContext(context.Context) DataSourceParametersPostgresqlPtrOutput
}

type dataSourceParametersPostgresqlPtrType DataSourceParametersPostgresqlArgs

func DataSourceParametersPostgresqlPtr(v *DataSourceParametersPostgresqlArgs) DataSourceParametersPostgresqlPtrInput {
	return (*dataSourceParametersPostgresqlPtrType)(v)
}

func (*dataSourceParametersPostgresqlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersPostgresql)(nil)).Elem()
}

func (i *dataSourceParametersPostgresqlPtrType) ToDataSourceParametersPostgresqlPtrOutput() DataSourceParametersPostgresqlPtrOutput {
	return i.ToDataSourceParametersPostgresqlPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersPostgresqlPtrType) ToDataSourceParametersPostgresqlPtrOutputWithContext(ctx context.Context) DataSourceParametersPostgresqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersPostgresqlPtrOutput)
}

type DataSourceParametersPostgresqlOutput struct{ *pulumi.OutputState }

func (DataSourceParametersPostgresqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersPostgresql)(nil)).Elem()
}

func (o DataSourceParametersPostgresqlOutput) ToDataSourceParametersPostgresqlOutput() DataSourceParametersPostgresqlOutput {
	return o
}

func (o DataSourceParametersPostgresqlOutput) ToDataSourceParametersPostgresqlOutputWithContext(ctx context.Context) DataSourceParametersPostgresqlOutput {
	return o
}

func (o DataSourceParametersPostgresqlOutput) ToDataSourceParametersPostgresqlPtrOutput() DataSourceParametersPostgresqlPtrOutput {
	return o.ToDataSourceParametersPostgresqlPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersPostgresqlOutput) ToDataSourceParametersPostgresqlPtrOutputWithContext(ctx context.Context) DataSourceParametersPostgresqlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersPostgresql) *DataSourceParametersPostgresql {
		return &v
	}).(DataSourceParametersPostgresqlPtrOutput)
}

// The database to which to connect.
func (o DataSourceParametersPostgresqlOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersPostgresql) string { return v.Database }).(pulumi.StringOutput)
}

// The host to which to connect.
func (o DataSourceParametersPostgresqlOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersPostgresql) string { return v.Host }).(pulumi.StringOutput)
}

// The port to which to connect.
func (o DataSourceParametersPostgresqlOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v DataSourceParametersPostgresql) int { return v.Port }).(pulumi.IntOutput)
}

type DataSourceParametersPostgresqlPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersPostgresqlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersPostgresql)(nil)).Elem()
}

func (o DataSourceParametersPostgresqlPtrOutput) ToDataSourceParametersPostgresqlPtrOutput() DataSourceParametersPostgresqlPtrOutput {
	return o
}

func (o DataSourceParametersPostgresqlPtrOutput) ToDataSourceParametersPostgresqlPtrOutputWithContext(ctx context.Context) DataSourceParametersPostgresqlPtrOutput {
	return o
}

func (o DataSourceParametersPostgresqlPtrOutput) Elem() DataSourceParametersPostgresqlOutput {
	return o.ApplyT(func(v *DataSourceParametersPostgresql) DataSourceParametersPostgresql {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersPostgresql
		return ret
	}).(DataSourceParametersPostgresqlOutput)
}

// The database to which to connect.
func (o DataSourceParametersPostgresqlPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersPostgresql) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// The host to which to connect.
func (o DataSourceParametersPostgresqlPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersPostgresql) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The port to which to connect.
func (o DataSourceParametersPostgresqlPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersPostgresql) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

type DataSourceParametersPresto struct {
	// The catalog to which to connect.
	Catalog string `pulumi:"catalog"`
	// The host to which to connect.
	Host string `pulumi:"host"`
	// The port to which to connect.
	Port int `pulumi:"port"`
}

// DataSourceParametersPrestoInput is an input type that accepts DataSourceParametersPrestoArgs and DataSourceParametersPrestoOutput values.
// You can construct a concrete instance of `DataSourceParametersPrestoInput` via:
//
//          DataSourceParametersPrestoArgs{...}
type DataSourceParametersPrestoInput interface {
	pulumi.Input

	ToDataSourceParametersPrestoOutput() DataSourceParametersPrestoOutput
	ToDataSourceParametersPrestoOutputWithContext(context.Context) DataSourceParametersPrestoOutput
}

type DataSourceParametersPrestoArgs struct {
	// The catalog to which to connect.
	Catalog pulumi.StringInput `pulumi:"catalog"`
	// The host to which to connect.
	Host pulumi.StringInput `pulumi:"host"`
	// The port to which to connect.
	Port pulumi.IntInput `pulumi:"port"`
}

func (DataSourceParametersPrestoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersPresto)(nil)).Elem()
}

func (i DataSourceParametersPrestoArgs) ToDataSourceParametersPrestoOutput() DataSourceParametersPrestoOutput {
	return i.ToDataSourceParametersPrestoOutputWithContext(context.Background())
}

func (i DataSourceParametersPrestoArgs) ToDataSourceParametersPrestoOutputWithContext(ctx context.Context) DataSourceParametersPrestoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersPrestoOutput)
}

func (i DataSourceParametersPrestoArgs) ToDataSourceParametersPrestoPtrOutput() DataSourceParametersPrestoPtrOutput {
	return i.ToDataSourceParametersPrestoPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersPrestoArgs) ToDataSourceParametersPrestoPtrOutputWithContext(ctx context.Context) DataSourceParametersPrestoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersPrestoOutput).ToDataSourceParametersPrestoPtrOutputWithContext(ctx)
}

// DataSourceParametersPrestoPtrInput is an input type that accepts DataSourceParametersPrestoArgs, DataSourceParametersPrestoPtr and DataSourceParametersPrestoPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersPrestoPtrInput` via:
//
//          DataSourceParametersPrestoArgs{...}
//
//  or:
//
//          nil
type DataSourceParametersPrestoPtrInput interface {
	pulumi.Input

	ToDataSourceParametersPrestoPtrOutput() DataSourceParametersPrestoPtrOutput
	ToDataSourceParametersPrestoPtrOutputWithContext(context.Context) DataSourceParametersPrestoPtrOutput
}

type dataSourceParametersPrestoPtrType DataSourceParametersPrestoArgs

func DataSourceParametersPrestoPtr(v *DataSourceParametersPrestoArgs) DataSourceParametersPrestoPtrInput {
	return (*dataSourceParametersPrestoPtrType)(v)
}

func (*dataSourceParametersPrestoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersPresto)(nil)).Elem()
}

func (i *dataSourceParametersPrestoPtrType) ToDataSourceParametersPrestoPtrOutput() DataSourceParametersPrestoPtrOutput {
	return i.ToDataSourceParametersPrestoPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersPrestoPtrType) ToDataSourceParametersPrestoPtrOutputWithContext(ctx context.Context) DataSourceParametersPrestoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersPrestoPtrOutput)
}

type DataSourceParametersPrestoOutput struct{ *pulumi.OutputState }

func (DataSourceParametersPrestoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersPresto)(nil)).Elem()
}

func (o DataSourceParametersPrestoOutput) ToDataSourceParametersPrestoOutput() DataSourceParametersPrestoOutput {
	return o
}

func (o DataSourceParametersPrestoOutput) ToDataSourceParametersPrestoOutputWithContext(ctx context.Context) DataSourceParametersPrestoOutput {
	return o
}

func (o DataSourceParametersPrestoOutput) ToDataSourceParametersPrestoPtrOutput() DataSourceParametersPrestoPtrOutput {
	return o.ToDataSourceParametersPrestoPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersPrestoOutput) ToDataSourceParametersPrestoPtrOutputWithContext(ctx context.Context) DataSourceParametersPrestoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersPresto) *DataSourceParametersPresto {
		return &v
	}).(DataSourceParametersPrestoPtrOutput)
}

// The catalog to which to connect.
func (o DataSourceParametersPrestoOutput) Catalog() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersPresto) string { return v.Catalog }).(pulumi.StringOutput)
}

// The host to which to connect.
func (o DataSourceParametersPrestoOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersPresto) string { return v.Host }).(pulumi.StringOutput)
}

// The port to which to connect.
func (o DataSourceParametersPrestoOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v DataSourceParametersPresto) int { return v.Port }).(pulumi.IntOutput)
}

type DataSourceParametersPrestoPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersPrestoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersPresto)(nil)).Elem()
}

func (o DataSourceParametersPrestoPtrOutput) ToDataSourceParametersPrestoPtrOutput() DataSourceParametersPrestoPtrOutput {
	return o
}

func (o DataSourceParametersPrestoPtrOutput) ToDataSourceParametersPrestoPtrOutputWithContext(ctx context.Context) DataSourceParametersPrestoPtrOutput {
	return o
}

func (o DataSourceParametersPrestoPtrOutput) Elem() DataSourceParametersPrestoOutput {
	return o.ApplyT(func(v *DataSourceParametersPresto) DataSourceParametersPresto {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersPresto
		return ret
	}).(DataSourceParametersPrestoOutput)
}

// The catalog to which to connect.
func (o DataSourceParametersPrestoPtrOutput) Catalog() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersPresto) *string {
		if v == nil {
			return nil
		}
		return &v.Catalog
	}).(pulumi.StringPtrOutput)
}

// The host to which to connect.
func (o DataSourceParametersPrestoPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersPresto) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The port to which to connect.
func (o DataSourceParametersPrestoPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersPresto) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

type DataSourceParametersRds struct {
	// The database to which to connect.
	Database string `pulumi:"database"`
	// The instance ID to which to connect.
	InstanceId string `pulumi:"instanceId"`
}

// DataSourceParametersRdsInput is an input type that accepts DataSourceParametersRdsArgs and DataSourceParametersRdsOutput values.
// You can construct a concrete instance of `DataSourceParametersRdsInput` via:
//
//          DataSourceParametersRdsArgs{...}
type DataSourceParametersRdsInput interface {
	pulumi.Input

	ToDataSourceParametersRdsOutput() DataSourceParametersRdsOutput
	ToDataSourceParametersRdsOutputWithContext(context.Context) DataSourceParametersRdsOutput
}

type DataSourceParametersRdsArgs struct {
	// The database to which to connect.
	Database pulumi.StringInput `pulumi:"database"`
	// The instance ID to which to connect.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
}

func (DataSourceParametersRdsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersRds)(nil)).Elem()
}

func (i DataSourceParametersRdsArgs) ToDataSourceParametersRdsOutput() DataSourceParametersRdsOutput {
	return i.ToDataSourceParametersRdsOutputWithContext(context.Background())
}

func (i DataSourceParametersRdsArgs) ToDataSourceParametersRdsOutputWithContext(ctx context.Context) DataSourceParametersRdsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersRdsOutput)
}

func (i DataSourceParametersRdsArgs) ToDataSourceParametersRdsPtrOutput() DataSourceParametersRdsPtrOutput {
	return i.ToDataSourceParametersRdsPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersRdsArgs) ToDataSourceParametersRdsPtrOutputWithContext(ctx context.Context) DataSourceParametersRdsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersRdsOutput).ToDataSourceParametersRdsPtrOutputWithContext(ctx)
}

// DataSourceParametersRdsPtrInput is an input type that accepts DataSourceParametersRdsArgs, DataSourceParametersRdsPtr and DataSourceParametersRdsPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersRdsPtrInput` via:
//
//          DataSourceParametersRdsArgs{...}
//
//  or:
//
//          nil
type DataSourceParametersRdsPtrInput interface {
	pulumi.Input

	ToDataSourceParametersRdsPtrOutput() DataSourceParametersRdsPtrOutput
	ToDataSourceParametersRdsPtrOutputWithContext(context.Context) DataSourceParametersRdsPtrOutput
}

type dataSourceParametersRdsPtrType DataSourceParametersRdsArgs

func DataSourceParametersRdsPtr(v *DataSourceParametersRdsArgs) DataSourceParametersRdsPtrInput {
	return (*dataSourceParametersRdsPtrType)(v)
}

func (*dataSourceParametersRdsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersRds)(nil)).Elem()
}

func (i *dataSourceParametersRdsPtrType) ToDataSourceParametersRdsPtrOutput() DataSourceParametersRdsPtrOutput {
	return i.ToDataSourceParametersRdsPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersRdsPtrType) ToDataSourceParametersRdsPtrOutputWithContext(ctx context.Context) DataSourceParametersRdsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersRdsPtrOutput)
}

type DataSourceParametersRdsOutput struct{ *pulumi.OutputState }

func (DataSourceParametersRdsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersRds)(nil)).Elem()
}

func (o DataSourceParametersRdsOutput) ToDataSourceParametersRdsOutput() DataSourceParametersRdsOutput {
	return o
}

func (o DataSourceParametersRdsOutput) ToDataSourceParametersRdsOutputWithContext(ctx context.Context) DataSourceParametersRdsOutput {
	return o
}

func (o DataSourceParametersRdsOutput) ToDataSourceParametersRdsPtrOutput() DataSourceParametersRdsPtrOutput {
	return o.ToDataSourceParametersRdsPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersRdsOutput) ToDataSourceParametersRdsPtrOutputWithContext(ctx context.Context) DataSourceParametersRdsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersRds) *DataSourceParametersRds {
		return &v
	}).(DataSourceParametersRdsPtrOutput)
}

// The database to which to connect.
func (o DataSourceParametersRdsOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersRds) string { return v.Database }).(pulumi.StringOutput)
}

// The instance ID to which to connect.
func (o DataSourceParametersRdsOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersRds) string { return v.InstanceId }).(pulumi.StringOutput)
}

type DataSourceParametersRdsPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersRdsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersRds)(nil)).Elem()
}

func (o DataSourceParametersRdsPtrOutput) ToDataSourceParametersRdsPtrOutput() DataSourceParametersRdsPtrOutput {
	return o
}

func (o DataSourceParametersRdsPtrOutput) ToDataSourceParametersRdsPtrOutputWithContext(ctx context.Context) DataSourceParametersRdsPtrOutput {
	return o
}

func (o DataSourceParametersRdsPtrOutput) Elem() DataSourceParametersRdsOutput {
	return o.ApplyT(func(v *DataSourceParametersRds) DataSourceParametersRds {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersRds
		return ret
	}).(DataSourceParametersRdsOutput)
}

// The database to which to connect.
func (o DataSourceParametersRdsPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersRds) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// The instance ID to which to connect.
func (o DataSourceParametersRdsPtrOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersRds) *string {
		if v == nil {
			return nil
		}
		return &v.InstanceId
	}).(pulumi.StringPtrOutput)
}

type DataSourceParametersRedshift struct {
	// The ID of the cluster to which to connect.
	ClusterId *string `pulumi:"clusterId"`
	// The database to which to connect.
	Database string `pulumi:"database"`
	// The host to which to connect.
	Host *string `pulumi:"host"`
	// The port to which to connect.
	Port *int `pulumi:"port"`
}

// DataSourceParametersRedshiftInput is an input type that accepts DataSourceParametersRedshiftArgs and DataSourceParametersRedshiftOutput values.
// You can construct a concrete instance of `DataSourceParametersRedshiftInput` via:
//
//          DataSourceParametersRedshiftArgs{...}
type DataSourceParametersRedshiftInput interface {
	pulumi.Input

	ToDataSourceParametersRedshiftOutput() DataSourceParametersRedshiftOutput
	ToDataSourceParametersRedshiftOutputWithContext(context.Context) DataSourceParametersRedshiftOutput
}

type DataSourceParametersRedshiftArgs struct {
	// The ID of the cluster to which to connect.
	ClusterId pulumi.StringPtrInput `pulumi:"clusterId"`
	// The database to which to connect.
	Database pulumi.StringInput `pulumi:"database"`
	// The host to which to connect.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// The port to which to connect.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (DataSourceParametersRedshiftArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersRedshift)(nil)).Elem()
}

func (i DataSourceParametersRedshiftArgs) ToDataSourceParametersRedshiftOutput() DataSourceParametersRedshiftOutput {
	return i.ToDataSourceParametersRedshiftOutputWithContext(context.Background())
}

func (i DataSourceParametersRedshiftArgs) ToDataSourceParametersRedshiftOutputWithContext(ctx context.Context) DataSourceParametersRedshiftOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersRedshiftOutput)
}

func (i DataSourceParametersRedshiftArgs) ToDataSourceParametersRedshiftPtrOutput() DataSourceParametersRedshiftPtrOutput {
	return i.ToDataSourceParametersRedshiftPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersRedshiftArgs) ToDataSourceParametersRedshiftPtrOutputWithContext(ctx context.Context) DataSourceParametersRedshiftPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersRedshiftOutput).ToDataSourceParametersRedshiftPtrOutputWithContext(ctx)
}

// DataSourceParametersRedshiftPtrInput is an input type that accepts DataSourceParametersRedshiftArgs, DataSourceParametersRedshiftPtr and DataSourceParametersRedshiftPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersRedshiftPtrInput` via:
//
//          DataSourceParametersRedshiftArgs{...}
//
//  or:
//
//          nil
type DataSourceParametersRedshiftPtrInput interface {
	pulumi.Input

	ToDataSourceParametersRedshiftPtrOutput() DataSourceParametersRedshiftPtrOutput
	ToDataSourceParametersRedshiftPtrOutputWithContext(context.Context) DataSourceParametersRedshiftPtrOutput
}

type dataSourceParametersRedshiftPtrType DataSourceParametersRedshiftArgs

func DataSourceParametersRedshiftPtr(v *DataSourceParametersRedshiftArgs) DataSourceParametersRedshiftPtrInput {
	return (*dataSourceParametersRedshiftPtrType)(v)
}

func (*dataSourceParametersRedshiftPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersRedshift)(nil)).Elem()
}

func (i *dataSourceParametersRedshiftPtrType) ToDataSourceParametersRedshiftPtrOutput() DataSourceParametersRedshiftPtrOutput {
	return i.ToDataSourceParametersRedshiftPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersRedshiftPtrType) ToDataSourceParametersRedshiftPtrOutputWithContext(ctx context.Context) DataSourceParametersRedshiftPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersRedshiftPtrOutput)
}

type DataSourceParametersRedshiftOutput struct{ *pulumi.OutputState }

func (DataSourceParametersRedshiftOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersRedshift)(nil)).Elem()
}

func (o DataSourceParametersRedshiftOutput) ToDataSourceParametersRedshiftOutput() DataSourceParametersRedshiftOutput {
	return o
}

func (o DataSourceParametersRedshiftOutput) ToDataSourceParametersRedshiftOutputWithContext(ctx context.Context) DataSourceParametersRedshiftOutput {
	return o
}

func (o DataSourceParametersRedshiftOutput) ToDataSourceParametersRedshiftPtrOutput() DataSourceParametersRedshiftPtrOutput {
	return o.ToDataSourceParametersRedshiftPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersRedshiftOutput) ToDataSourceParametersRedshiftPtrOutputWithContext(ctx context.Context) DataSourceParametersRedshiftPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersRedshift) *DataSourceParametersRedshift {
		return &v
	}).(DataSourceParametersRedshiftPtrOutput)
}

// The ID of the cluster to which to connect.
func (o DataSourceParametersRedshiftOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceParametersRedshift) *string { return v.ClusterId }).(pulumi.StringPtrOutput)
}

// The database to which to connect.
func (o DataSourceParametersRedshiftOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersRedshift) string { return v.Database }).(pulumi.StringOutput)
}

// The host to which to connect.
func (o DataSourceParametersRedshiftOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceParametersRedshift) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// The port to which to connect.
func (o DataSourceParametersRedshiftOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DataSourceParametersRedshift) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type DataSourceParametersRedshiftPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersRedshiftPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersRedshift)(nil)).Elem()
}

func (o DataSourceParametersRedshiftPtrOutput) ToDataSourceParametersRedshiftPtrOutput() DataSourceParametersRedshiftPtrOutput {
	return o
}

func (o DataSourceParametersRedshiftPtrOutput) ToDataSourceParametersRedshiftPtrOutputWithContext(ctx context.Context) DataSourceParametersRedshiftPtrOutput {
	return o
}

func (o DataSourceParametersRedshiftPtrOutput) Elem() DataSourceParametersRedshiftOutput {
	return o.ApplyT(func(v *DataSourceParametersRedshift) DataSourceParametersRedshift {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersRedshift
		return ret
	}).(DataSourceParametersRedshiftOutput)
}

// The ID of the cluster to which to connect.
func (o DataSourceParametersRedshiftPtrOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersRedshift) *string {
		if v == nil {
			return nil
		}
		return v.ClusterId
	}).(pulumi.StringPtrOutput)
}

// The database to which to connect.
func (o DataSourceParametersRedshiftPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersRedshift) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// The host to which to connect.
func (o DataSourceParametersRedshiftPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersRedshift) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// The port to which to connect.
func (o DataSourceParametersRedshiftPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersRedshift) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

type DataSourceParametersS3 struct {
	// An object containing the S3 location of the S3 manifest file.
	ManifestFileLocation DataSourceParametersS3ManifestFileLocation `pulumi:"manifestFileLocation"`
}

// DataSourceParametersS3Input is an input type that accepts DataSourceParametersS3Args and DataSourceParametersS3Output values.
// You can construct a concrete instance of `DataSourceParametersS3Input` via:
//
//          DataSourceParametersS3Args{...}
type DataSourceParametersS3Input interface {
	pulumi.Input

	ToDataSourceParametersS3Output() DataSourceParametersS3Output
	ToDataSourceParametersS3OutputWithContext(context.Context) DataSourceParametersS3Output
}

type DataSourceParametersS3Args struct {
	// An object containing the S3 location of the S3 manifest file.
	ManifestFileLocation DataSourceParametersS3ManifestFileLocationInput `pulumi:"manifestFileLocation"`
}

func (DataSourceParametersS3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersS3)(nil)).Elem()
}

func (i DataSourceParametersS3Args) ToDataSourceParametersS3Output() DataSourceParametersS3Output {
	return i.ToDataSourceParametersS3OutputWithContext(context.Background())
}

func (i DataSourceParametersS3Args) ToDataSourceParametersS3OutputWithContext(ctx context.Context) DataSourceParametersS3Output {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersS3Output)
}

func (i DataSourceParametersS3Args) ToDataSourceParametersS3PtrOutput() DataSourceParametersS3PtrOutput {
	return i.ToDataSourceParametersS3PtrOutputWithContext(context.Background())
}

func (i DataSourceParametersS3Args) ToDataSourceParametersS3PtrOutputWithContext(ctx context.Context) DataSourceParametersS3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersS3Output).ToDataSourceParametersS3PtrOutputWithContext(ctx)
}

// DataSourceParametersS3PtrInput is an input type that accepts DataSourceParametersS3Args, DataSourceParametersS3Ptr and DataSourceParametersS3PtrOutput values.
// You can construct a concrete instance of `DataSourceParametersS3PtrInput` via:
//
//          DataSourceParametersS3Args{...}
//
//  or:
//
//          nil
type DataSourceParametersS3PtrInput interface {
	pulumi.Input

	ToDataSourceParametersS3PtrOutput() DataSourceParametersS3PtrOutput
	ToDataSourceParametersS3PtrOutputWithContext(context.Context) DataSourceParametersS3PtrOutput
}

type dataSourceParametersS3PtrType DataSourceParametersS3Args

func DataSourceParametersS3Ptr(v *DataSourceParametersS3Args) DataSourceParametersS3PtrInput {
	return (*dataSourceParametersS3PtrType)(v)
}

func (*dataSourceParametersS3PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersS3)(nil)).Elem()
}

func (i *dataSourceParametersS3PtrType) ToDataSourceParametersS3PtrOutput() DataSourceParametersS3PtrOutput {
	return i.ToDataSourceParametersS3PtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersS3PtrType) ToDataSourceParametersS3PtrOutputWithContext(ctx context.Context) DataSourceParametersS3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersS3PtrOutput)
}

type DataSourceParametersS3Output struct{ *pulumi.OutputState }

func (DataSourceParametersS3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersS3)(nil)).Elem()
}

func (o DataSourceParametersS3Output) ToDataSourceParametersS3Output() DataSourceParametersS3Output {
	return o
}

func (o DataSourceParametersS3Output) ToDataSourceParametersS3OutputWithContext(ctx context.Context) DataSourceParametersS3Output {
	return o
}

func (o DataSourceParametersS3Output) ToDataSourceParametersS3PtrOutput() DataSourceParametersS3PtrOutput {
	return o.ToDataSourceParametersS3PtrOutputWithContext(context.Background())
}

func (o DataSourceParametersS3Output) ToDataSourceParametersS3PtrOutputWithContext(ctx context.Context) DataSourceParametersS3PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersS3) *DataSourceParametersS3 {
		return &v
	}).(DataSourceParametersS3PtrOutput)
}

// An object containing the S3 location of the S3 manifest file.
func (o DataSourceParametersS3Output) ManifestFileLocation() DataSourceParametersS3ManifestFileLocationOutput {
	return o.ApplyT(func(v DataSourceParametersS3) DataSourceParametersS3ManifestFileLocation {
		return v.ManifestFileLocation
	}).(DataSourceParametersS3ManifestFileLocationOutput)
}

type DataSourceParametersS3PtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersS3PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersS3)(nil)).Elem()
}

func (o DataSourceParametersS3PtrOutput) ToDataSourceParametersS3PtrOutput() DataSourceParametersS3PtrOutput {
	return o
}

func (o DataSourceParametersS3PtrOutput) ToDataSourceParametersS3PtrOutputWithContext(ctx context.Context) DataSourceParametersS3PtrOutput {
	return o
}

func (o DataSourceParametersS3PtrOutput) Elem() DataSourceParametersS3Output {
	return o.ApplyT(func(v *DataSourceParametersS3) DataSourceParametersS3 {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersS3
		return ret
	}).(DataSourceParametersS3Output)
}

// An object containing the S3 location of the S3 manifest file.
func (o DataSourceParametersS3PtrOutput) ManifestFileLocation() DataSourceParametersS3ManifestFileLocationPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersS3) *DataSourceParametersS3ManifestFileLocation {
		if v == nil {
			return nil
		}
		return &v.ManifestFileLocation
	}).(DataSourceParametersS3ManifestFileLocationPtrOutput)
}

type DataSourceParametersS3ManifestFileLocation struct {
	// The name of the bucket that contains the manifest file.
	Bucket string `pulumi:"bucket"`
	// The key of the manifest file within the bucket.
	Key string `pulumi:"key"`
}

// DataSourceParametersS3ManifestFileLocationInput is an input type that accepts DataSourceParametersS3ManifestFileLocationArgs and DataSourceParametersS3ManifestFileLocationOutput values.
// You can construct a concrete instance of `DataSourceParametersS3ManifestFileLocationInput` via:
//
//          DataSourceParametersS3ManifestFileLocationArgs{...}
type DataSourceParametersS3ManifestFileLocationInput interface {
	pulumi.Input

	ToDataSourceParametersS3ManifestFileLocationOutput() DataSourceParametersS3ManifestFileLocationOutput
	ToDataSourceParametersS3ManifestFileLocationOutputWithContext(context.Context) DataSourceParametersS3ManifestFileLocationOutput
}

type DataSourceParametersS3ManifestFileLocationArgs struct {
	// The name of the bucket that contains the manifest file.
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// The key of the manifest file within the bucket.
	Key pulumi.StringInput `pulumi:"key"`
}

func (DataSourceParametersS3ManifestFileLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersS3ManifestFileLocation)(nil)).Elem()
}

func (i DataSourceParametersS3ManifestFileLocationArgs) ToDataSourceParametersS3ManifestFileLocationOutput() DataSourceParametersS3ManifestFileLocationOutput {
	return i.ToDataSourceParametersS3ManifestFileLocationOutputWithContext(context.Background())
}

func (i DataSourceParametersS3ManifestFileLocationArgs) ToDataSourceParametersS3ManifestFileLocationOutputWithContext(ctx context.Context) DataSourceParametersS3ManifestFileLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersS3ManifestFileLocationOutput)
}

func (i DataSourceParametersS3ManifestFileLocationArgs) ToDataSourceParametersS3ManifestFileLocationPtrOutput() DataSourceParametersS3ManifestFileLocationPtrOutput {
	return i.ToDataSourceParametersS3ManifestFileLocationPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersS3ManifestFileLocationArgs) ToDataSourceParametersS3ManifestFileLocationPtrOutputWithContext(ctx context.Context) DataSourceParametersS3ManifestFileLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersS3ManifestFileLocationOutput).ToDataSourceParametersS3ManifestFileLocationPtrOutputWithContext(ctx)
}

// DataSourceParametersS3ManifestFileLocationPtrInput is an input type that accepts DataSourceParametersS3ManifestFileLocationArgs, DataSourceParametersS3ManifestFileLocationPtr and DataSourceParametersS3ManifestFileLocationPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersS3ManifestFileLocationPtrInput` via:
//
//          DataSourceParametersS3ManifestFileLocationArgs{...}
//
//  or:
//
//          nil
type DataSourceParametersS3ManifestFileLocationPtrInput interface {
	pulumi.Input

	ToDataSourceParametersS3ManifestFileLocationPtrOutput() DataSourceParametersS3ManifestFileLocationPtrOutput
	ToDataSourceParametersS3ManifestFileLocationPtrOutputWithContext(context.Context) DataSourceParametersS3ManifestFileLocationPtrOutput
}

type dataSourceParametersS3ManifestFileLocationPtrType DataSourceParametersS3ManifestFileLocationArgs

func DataSourceParametersS3ManifestFileLocationPtr(v *DataSourceParametersS3ManifestFileLocationArgs) DataSourceParametersS3ManifestFileLocationPtrInput {
	return (*dataSourceParametersS3ManifestFileLocationPtrType)(v)
}

func (*dataSourceParametersS3ManifestFileLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersS3ManifestFileLocation)(nil)).Elem()
}

func (i *dataSourceParametersS3ManifestFileLocationPtrType) ToDataSourceParametersS3ManifestFileLocationPtrOutput() DataSourceParametersS3ManifestFileLocationPtrOutput {
	return i.ToDataSourceParametersS3ManifestFileLocationPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersS3ManifestFileLocationPtrType) ToDataSourceParametersS3ManifestFileLocationPtrOutputWithContext(ctx context.Context) DataSourceParametersS3ManifestFileLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersS3ManifestFileLocationPtrOutput)
}

type DataSourceParametersS3ManifestFileLocationOutput struct{ *pulumi.OutputState }

func (DataSourceParametersS3ManifestFileLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersS3ManifestFileLocation)(nil)).Elem()
}

func (o DataSourceParametersS3ManifestFileLocationOutput) ToDataSourceParametersS3ManifestFileLocationOutput() DataSourceParametersS3ManifestFileLocationOutput {
	return o
}

func (o DataSourceParametersS3ManifestFileLocationOutput) ToDataSourceParametersS3ManifestFileLocationOutputWithContext(ctx context.Context) DataSourceParametersS3ManifestFileLocationOutput {
	return o
}

func (o DataSourceParametersS3ManifestFileLocationOutput) ToDataSourceParametersS3ManifestFileLocationPtrOutput() DataSourceParametersS3ManifestFileLocationPtrOutput {
	return o.ToDataSourceParametersS3ManifestFileLocationPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersS3ManifestFileLocationOutput) ToDataSourceParametersS3ManifestFileLocationPtrOutputWithContext(ctx context.Context) DataSourceParametersS3ManifestFileLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersS3ManifestFileLocation) *DataSourceParametersS3ManifestFileLocation {
		return &v
	}).(DataSourceParametersS3ManifestFileLocationPtrOutput)
}

// The name of the bucket that contains the manifest file.
func (o DataSourceParametersS3ManifestFileLocationOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersS3ManifestFileLocation) string { return v.Bucket }).(pulumi.StringOutput)
}

// The key of the manifest file within the bucket.
func (o DataSourceParametersS3ManifestFileLocationOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersS3ManifestFileLocation) string { return v.Key }).(pulumi.StringOutput)
}

type DataSourceParametersS3ManifestFileLocationPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersS3ManifestFileLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersS3ManifestFileLocation)(nil)).Elem()
}

func (o DataSourceParametersS3ManifestFileLocationPtrOutput) ToDataSourceParametersS3ManifestFileLocationPtrOutput() DataSourceParametersS3ManifestFileLocationPtrOutput {
	return o
}

func (o DataSourceParametersS3ManifestFileLocationPtrOutput) ToDataSourceParametersS3ManifestFileLocationPtrOutputWithContext(ctx context.Context) DataSourceParametersS3ManifestFileLocationPtrOutput {
	return o
}

func (o DataSourceParametersS3ManifestFileLocationPtrOutput) Elem() DataSourceParametersS3ManifestFileLocationOutput {
	return o.ApplyT(func(v *DataSourceParametersS3ManifestFileLocation) DataSourceParametersS3ManifestFileLocation {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersS3ManifestFileLocation
		return ret
	}).(DataSourceParametersS3ManifestFileLocationOutput)
}

// The name of the bucket that contains the manifest file.
func (o DataSourceParametersS3ManifestFileLocationPtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersS3ManifestFileLocation) *string {
		if v == nil {
			return nil
		}
		return &v.Bucket
	}).(pulumi.StringPtrOutput)
}

// The key of the manifest file within the bucket.
func (o DataSourceParametersS3ManifestFileLocationPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersS3ManifestFileLocation) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

type DataSourceParametersServiceNow struct {
	// The base URL of the Jira instance's site to which to connect.
	SiteBaseUrl string `pulumi:"siteBaseUrl"`
}

// DataSourceParametersServiceNowInput is an input type that accepts DataSourceParametersServiceNowArgs and DataSourceParametersServiceNowOutput values.
// You can construct a concrete instance of `DataSourceParametersServiceNowInput` via:
//
//          DataSourceParametersServiceNowArgs{...}
type DataSourceParametersServiceNowInput interface {
	pulumi.Input

	ToDataSourceParametersServiceNowOutput() DataSourceParametersServiceNowOutput
	ToDataSourceParametersServiceNowOutputWithContext(context.Context) DataSourceParametersServiceNowOutput
}

type DataSourceParametersServiceNowArgs struct {
	// The base URL of the Jira instance's site to which to connect.
	SiteBaseUrl pulumi.StringInput `pulumi:"siteBaseUrl"`
}

func (DataSourceParametersServiceNowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersServiceNow)(nil)).Elem()
}

func (i DataSourceParametersServiceNowArgs) ToDataSourceParametersServiceNowOutput() DataSourceParametersServiceNowOutput {
	return i.ToDataSourceParametersServiceNowOutputWithContext(context.Background())
}

func (i DataSourceParametersServiceNowArgs) ToDataSourceParametersServiceNowOutputWithContext(ctx context.Context) DataSourceParametersServiceNowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersServiceNowOutput)
}

func (i DataSourceParametersServiceNowArgs) ToDataSourceParametersServiceNowPtrOutput() DataSourceParametersServiceNowPtrOutput {
	return i.ToDataSourceParametersServiceNowPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersServiceNowArgs) ToDataSourceParametersServiceNowPtrOutputWithContext(ctx context.Context) DataSourceParametersServiceNowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersServiceNowOutput).ToDataSourceParametersServiceNowPtrOutputWithContext(ctx)
}

// DataSourceParametersServiceNowPtrInput is an input type that accepts DataSourceParametersServiceNowArgs, DataSourceParametersServiceNowPtr and DataSourceParametersServiceNowPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersServiceNowPtrInput` via:
//
//          DataSourceParametersServiceNowArgs{...}
//
//  or:
//
//          nil
type DataSourceParametersServiceNowPtrInput interface {
	pulumi.Input

	ToDataSourceParametersServiceNowPtrOutput() DataSourceParametersServiceNowPtrOutput
	ToDataSourceParametersServiceNowPtrOutputWithContext(context.Context) DataSourceParametersServiceNowPtrOutput
}

type dataSourceParametersServiceNowPtrType DataSourceParametersServiceNowArgs

func DataSourceParametersServiceNowPtr(v *DataSourceParametersServiceNowArgs) DataSourceParametersServiceNowPtrInput {
	return (*dataSourceParametersServiceNowPtrType)(v)
}

func (*dataSourceParametersServiceNowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersServiceNow)(nil)).Elem()
}

func (i *dataSourceParametersServiceNowPtrType) ToDataSourceParametersServiceNowPtrOutput() DataSourceParametersServiceNowPtrOutput {
	return i.ToDataSourceParametersServiceNowPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersServiceNowPtrType) ToDataSourceParametersServiceNowPtrOutputWithContext(ctx context.Context) DataSourceParametersServiceNowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersServiceNowPtrOutput)
}

type DataSourceParametersServiceNowOutput struct{ *pulumi.OutputState }

func (DataSourceParametersServiceNowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersServiceNow)(nil)).Elem()
}

func (o DataSourceParametersServiceNowOutput) ToDataSourceParametersServiceNowOutput() DataSourceParametersServiceNowOutput {
	return o
}

func (o DataSourceParametersServiceNowOutput) ToDataSourceParametersServiceNowOutputWithContext(ctx context.Context) DataSourceParametersServiceNowOutput {
	return o
}

func (o DataSourceParametersServiceNowOutput) ToDataSourceParametersServiceNowPtrOutput() DataSourceParametersServiceNowPtrOutput {
	return o.ToDataSourceParametersServiceNowPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersServiceNowOutput) ToDataSourceParametersServiceNowPtrOutputWithContext(ctx context.Context) DataSourceParametersServiceNowPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersServiceNow) *DataSourceParametersServiceNow {
		return &v
	}).(DataSourceParametersServiceNowPtrOutput)
}

// The base URL of the Jira instance's site to which to connect.
func (o DataSourceParametersServiceNowOutput) SiteBaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersServiceNow) string { return v.SiteBaseUrl }).(pulumi.StringOutput)
}

type DataSourceParametersServiceNowPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersServiceNowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersServiceNow)(nil)).Elem()
}

func (o DataSourceParametersServiceNowPtrOutput) ToDataSourceParametersServiceNowPtrOutput() DataSourceParametersServiceNowPtrOutput {
	return o
}

func (o DataSourceParametersServiceNowPtrOutput) ToDataSourceParametersServiceNowPtrOutputWithContext(ctx context.Context) DataSourceParametersServiceNowPtrOutput {
	return o
}

func (o DataSourceParametersServiceNowPtrOutput) Elem() DataSourceParametersServiceNowOutput {
	return o.ApplyT(func(v *DataSourceParametersServiceNow) DataSourceParametersServiceNow {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersServiceNow
		return ret
	}).(DataSourceParametersServiceNowOutput)
}

// The base URL of the Jira instance's site to which to connect.
func (o DataSourceParametersServiceNowPtrOutput) SiteBaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersServiceNow) *string {
		if v == nil {
			return nil
		}
		return &v.SiteBaseUrl
	}).(pulumi.StringPtrOutput)
}

type DataSourceParametersSnowflake struct {
	// The database to which to connect.
	Database string `pulumi:"database"`
	// The host to which to connect.
	Host string `pulumi:"host"`
	// The warehouse to which to connect.
	Warehouse string `pulumi:"warehouse"`
}

// DataSourceParametersSnowflakeInput is an input type that accepts DataSourceParametersSnowflakeArgs and DataSourceParametersSnowflakeOutput values.
// You can construct a concrete instance of `DataSourceParametersSnowflakeInput` via:
//
//          DataSourceParametersSnowflakeArgs{...}
type DataSourceParametersSnowflakeInput interface {
	pulumi.Input

	ToDataSourceParametersSnowflakeOutput() DataSourceParametersSnowflakeOutput
	ToDataSourceParametersSnowflakeOutputWithContext(context.Context) DataSourceParametersSnowflakeOutput
}

type DataSourceParametersSnowflakeArgs struct {
	// The database to which to connect.
	Database pulumi.StringInput `pulumi:"database"`
	// The host to which to connect.
	Host pulumi.StringInput `pulumi:"host"`
	// The warehouse to which to connect.
	Warehouse pulumi.StringInput `pulumi:"warehouse"`
}

func (DataSourceParametersSnowflakeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersSnowflake)(nil)).Elem()
}

func (i DataSourceParametersSnowflakeArgs) ToDataSourceParametersSnowflakeOutput() DataSourceParametersSnowflakeOutput {
	return i.ToDataSourceParametersSnowflakeOutputWithContext(context.Background())
}

func (i DataSourceParametersSnowflakeArgs) ToDataSourceParametersSnowflakeOutputWithContext(ctx context.Context) DataSourceParametersSnowflakeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersSnowflakeOutput)
}

func (i DataSourceParametersSnowflakeArgs) ToDataSourceParametersSnowflakePtrOutput() DataSourceParametersSnowflakePtrOutput {
	return i.ToDataSourceParametersSnowflakePtrOutputWithContext(context.Background())
}

func (i DataSourceParametersSnowflakeArgs) ToDataSourceParametersSnowflakePtrOutputWithContext(ctx context.Context) DataSourceParametersSnowflakePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersSnowflakeOutput).ToDataSourceParametersSnowflakePtrOutputWithContext(ctx)
}

// DataSourceParametersSnowflakePtrInput is an input type that accepts DataSourceParametersSnowflakeArgs, DataSourceParametersSnowflakePtr and DataSourceParametersSnowflakePtrOutput values.
// You can construct a concrete instance of `DataSourceParametersSnowflakePtrInput` via:
//
//          DataSourceParametersSnowflakeArgs{...}
//
//  or:
//
//          nil
type DataSourceParametersSnowflakePtrInput interface {
	pulumi.Input

	ToDataSourceParametersSnowflakePtrOutput() DataSourceParametersSnowflakePtrOutput
	ToDataSourceParametersSnowflakePtrOutputWithContext(context.Context) DataSourceParametersSnowflakePtrOutput
}

type dataSourceParametersSnowflakePtrType DataSourceParametersSnowflakeArgs

func DataSourceParametersSnowflakePtr(v *DataSourceParametersSnowflakeArgs) DataSourceParametersSnowflakePtrInput {
	return (*dataSourceParametersSnowflakePtrType)(v)
}

func (*dataSourceParametersSnowflakePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersSnowflake)(nil)).Elem()
}

func (i *dataSourceParametersSnowflakePtrType) ToDataSourceParametersSnowflakePtrOutput() DataSourceParametersSnowflakePtrOutput {
	return i.ToDataSourceParametersSnowflakePtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersSnowflakePtrType) ToDataSourceParametersSnowflakePtrOutputWithContext(ctx context.Context) DataSourceParametersSnowflakePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersSnowflakePtrOutput)
}

type DataSourceParametersSnowflakeOutput struct{ *pulumi.OutputState }

func (DataSourceParametersSnowflakeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersSnowflake)(nil)).Elem()
}

func (o DataSourceParametersSnowflakeOutput) ToDataSourceParametersSnowflakeOutput() DataSourceParametersSnowflakeOutput {
	return o
}

func (o DataSourceParametersSnowflakeOutput) ToDataSourceParametersSnowflakeOutputWithContext(ctx context.Context) DataSourceParametersSnowflakeOutput {
	return o
}

func (o DataSourceParametersSnowflakeOutput) ToDataSourceParametersSnowflakePtrOutput() DataSourceParametersSnowflakePtrOutput {
	return o.ToDataSourceParametersSnowflakePtrOutputWithContext(context.Background())
}

func (o DataSourceParametersSnowflakeOutput) ToDataSourceParametersSnowflakePtrOutputWithContext(ctx context.Context) DataSourceParametersSnowflakePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersSnowflake) *DataSourceParametersSnowflake {
		return &v
	}).(DataSourceParametersSnowflakePtrOutput)
}

// The database to which to connect.
func (o DataSourceParametersSnowflakeOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersSnowflake) string { return v.Database }).(pulumi.StringOutput)
}

// The host to which to connect.
func (o DataSourceParametersSnowflakeOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersSnowflake) string { return v.Host }).(pulumi.StringOutput)
}

// The warehouse to which to connect.
func (o DataSourceParametersSnowflakeOutput) Warehouse() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersSnowflake) string { return v.Warehouse }).(pulumi.StringOutput)
}

type DataSourceParametersSnowflakePtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersSnowflakePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersSnowflake)(nil)).Elem()
}

func (o DataSourceParametersSnowflakePtrOutput) ToDataSourceParametersSnowflakePtrOutput() DataSourceParametersSnowflakePtrOutput {
	return o
}

func (o DataSourceParametersSnowflakePtrOutput) ToDataSourceParametersSnowflakePtrOutputWithContext(ctx context.Context) DataSourceParametersSnowflakePtrOutput {
	return o
}

func (o DataSourceParametersSnowflakePtrOutput) Elem() DataSourceParametersSnowflakeOutput {
	return o.ApplyT(func(v *DataSourceParametersSnowflake) DataSourceParametersSnowflake {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersSnowflake
		return ret
	}).(DataSourceParametersSnowflakeOutput)
}

// The database to which to connect.
func (o DataSourceParametersSnowflakePtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersSnowflake) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// The host to which to connect.
func (o DataSourceParametersSnowflakePtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersSnowflake) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The warehouse to which to connect.
func (o DataSourceParametersSnowflakePtrOutput) Warehouse() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersSnowflake) *string {
		if v == nil {
			return nil
		}
		return &v.Warehouse
	}).(pulumi.StringPtrOutput)
}

type DataSourceParametersSpark struct {
	// The host to which to connect.
	Host string `pulumi:"host"`
	// The warehouse to which to connect.
	Port int `pulumi:"port"`
}

// DataSourceParametersSparkInput is an input type that accepts DataSourceParametersSparkArgs and DataSourceParametersSparkOutput values.
// You can construct a concrete instance of `DataSourceParametersSparkInput` via:
//
//          DataSourceParametersSparkArgs{...}
type DataSourceParametersSparkInput interface {
	pulumi.Input

	ToDataSourceParametersSparkOutput() DataSourceParametersSparkOutput
	ToDataSourceParametersSparkOutputWithContext(context.Context) DataSourceParametersSparkOutput
}

type DataSourceParametersSparkArgs struct {
	// The host to which to connect.
	Host pulumi.StringInput `pulumi:"host"`
	// The warehouse to which to connect.
	Port pulumi.IntInput `pulumi:"port"`
}

func (DataSourceParametersSparkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersSpark)(nil)).Elem()
}

func (i DataSourceParametersSparkArgs) ToDataSourceParametersSparkOutput() DataSourceParametersSparkOutput {
	return i.ToDataSourceParametersSparkOutputWithContext(context.Background())
}

func (i DataSourceParametersSparkArgs) ToDataSourceParametersSparkOutputWithContext(ctx context.Context) DataSourceParametersSparkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersSparkOutput)
}

func (i DataSourceParametersSparkArgs) ToDataSourceParametersSparkPtrOutput() DataSourceParametersSparkPtrOutput {
	return i.ToDataSourceParametersSparkPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersSparkArgs) ToDataSourceParametersSparkPtrOutputWithContext(ctx context.Context) DataSourceParametersSparkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersSparkOutput).ToDataSourceParametersSparkPtrOutputWithContext(ctx)
}

// DataSourceParametersSparkPtrInput is an input type that accepts DataSourceParametersSparkArgs, DataSourceParametersSparkPtr and DataSourceParametersSparkPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersSparkPtrInput` via:
//
//          DataSourceParametersSparkArgs{...}
//
//  or:
//
//          nil
type DataSourceParametersSparkPtrInput interface {
	pulumi.Input

	ToDataSourceParametersSparkPtrOutput() DataSourceParametersSparkPtrOutput
	ToDataSourceParametersSparkPtrOutputWithContext(context.Context) DataSourceParametersSparkPtrOutput
}

type dataSourceParametersSparkPtrType DataSourceParametersSparkArgs

func DataSourceParametersSparkPtr(v *DataSourceParametersSparkArgs) DataSourceParametersSparkPtrInput {
	return (*dataSourceParametersSparkPtrType)(v)
}

func (*dataSourceParametersSparkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersSpark)(nil)).Elem()
}

func (i *dataSourceParametersSparkPtrType) ToDataSourceParametersSparkPtrOutput() DataSourceParametersSparkPtrOutput {
	return i.ToDataSourceParametersSparkPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersSparkPtrType) ToDataSourceParametersSparkPtrOutputWithContext(ctx context.Context) DataSourceParametersSparkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersSparkPtrOutput)
}

type DataSourceParametersSparkOutput struct{ *pulumi.OutputState }

func (DataSourceParametersSparkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersSpark)(nil)).Elem()
}

func (o DataSourceParametersSparkOutput) ToDataSourceParametersSparkOutput() DataSourceParametersSparkOutput {
	return o
}

func (o DataSourceParametersSparkOutput) ToDataSourceParametersSparkOutputWithContext(ctx context.Context) DataSourceParametersSparkOutput {
	return o
}

func (o DataSourceParametersSparkOutput) ToDataSourceParametersSparkPtrOutput() DataSourceParametersSparkPtrOutput {
	return o.ToDataSourceParametersSparkPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersSparkOutput) ToDataSourceParametersSparkPtrOutputWithContext(ctx context.Context) DataSourceParametersSparkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersSpark) *DataSourceParametersSpark {
		return &v
	}).(DataSourceParametersSparkPtrOutput)
}

// The host to which to connect.
func (o DataSourceParametersSparkOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersSpark) string { return v.Host }).(pulumi.StringOutput)
}

// The warehouse to which to connect.
func (o DataSourceParametersSparkOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v DataSourceParametersSpark) int { return v.Port }).(pulumi.IntOutput)
}

type DataSourceParametersSparkPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersSparkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersSpark)(nil)).Elem()
}

func (o DataSourceParametersSparkPtrOutput) ToDataSourceParametersSparkPtrOutput() DataSourceParametersSparkPtrOutput {
	return o
}

func (o DataSourceParametersSparkPtrOutput) ToDataSourceParametersSparkPtrOutputWithContext(ctx context.Context) DataSourceParametersSparkPtrOutput {
	return o
}

func (o DataSourceParametersSparkPtrOutput) Elem() DataSourceParametersSparkOutput {
	return o.ApplyT(func(v *DataSourceParametersSpark) DataSourceParametersSpark {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersSpark
		return ret
	}).(DataSourceParametersSparkOutput)
}

// The host to which to connect.
func (o DataSourceParametersSparkPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersSpark) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The warehouse to which to connect.
func (o DataSourceParametersSparkPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersSpark) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

type DataSourceParametersSqlServer struct {
	// The database to which to connect.
	Database string `pulumi:"database"`
	// The host to which to connect.
	Host string `pulumi:"host"`
	// The warehouse to which to connect.
	Port int `pulumi:"port"`
}

// DataSourceParametersSqlServerInput is an input type that accepts DataSourceParametersSqlServerArgs and DataSourceParametersSqlServerOutput values.
// You can construct a concrete instance of `DataSourceParametersSqlServerInput` via:
//
//          DataSourceParametersSqlServerArgs{...}
type DataSourceParametersSqlServerInput interface {
	pulumi.Input

	ToDataSourceParametersSqlServerOutput() DataSourceParametersSqlServerOutput
	ToDataSourceParametersSqlServerOutputWithContext(context.Context) DataSourceParametersSqlServerOutput
}

type DataSourceParametersSqlServerArgs struct {
	// The database to which to connect.
	Database pulumi.StringInput `pulumi:"database"`
	// The host to which to connect.
	Host pulumi.StringInput `pulumi:"host"`
	// The warehouse to which to connect.
	Port pulumi.IntInput `pulumi:"port"`
}

func (DataSourceParametersSqlServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersSqlServer)(nil)).Elem()
}

func (i DataSourceParametersSqlServerArgs) ToDataSourceParametersSqlServerOutput() DataSourceParametersSqlServerOutput {
	return i.ToDataSourceParametersSqlServerOutputWithContext(context.Background())
}

func (i DataSourceParametersSqlServerArgs) ToDataSourceParametersSqlServerOutputWithContext(ctx context.Context) DataSourceParametersSqlServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersSqlServerOutput)
}

func (i DataSourceParametersSqlServerArgs) ToDataSourceParametersSqlServerPtrOutput() DataSourceParametersSqlServerPtrOutput {
	return i.ToDataSourceParametersSqlServerPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersSqlServerArgs) ToDataSourceParametersSqlServerPtrOutputWithContext(ctx context.Context) DataSourceParametersSqlServerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersSqlServerOutput).ToDataSourceParametersSqlServerPtrOutputWithContext(ctx)
}

// DataSourceParametersSqlServerPtrInput is an input type that accepts DataSourceParametersSqlServerArgs, DataSourceParametersSqlServerPtr and DataSourceParametersSqlServerPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersSqlServerPtrInput` via:
//
//          DataSourceParametersSqlServerArgs{...}
//
//  or:
//
//          nil
type DataSourceParametersSqlServerPtrInput interface {
	pulumi.Input

	ToDataSourceParametersSqlServerPtrOutput() DataSourceParametersSqlServerPtrOutput
	ToDataSourceParametersSqlServerPtrOutputWithContext(context.Context) DataSourceParametersSqlServerPtrOutput
}

type dataSourceParametersSqlServerPtrType DataSourceParametersSqlServerArgs

func DataSourceParametersSqlServerPtr(v *DataSourceParametersSqlServerArgs) DataSourceParametersSqlServerPtrInput {
	return (*dataSourceParametersSqlServerPtrType)(v)
}

func (*dataSourceParametersSqlServerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersSqlServer)(nil)).Elem()
}

func (i *dataSourceParametersSqlServerPtrType) ToDataSourceParametersSqlServerPtrOutput() DataSourceParametersSqlServerPtrOutput {
	return i.ToDataSourceParametersSqlServerPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersSqlServerPtrType) ToDataSourceParametersSqlServerPtrOutputWithContext(ctx context.Context) DataSourceParametersSqlServerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersSqlServerPtrOutput)
}

type DataSourceParametersSqlServerOutput struct{ *pulumi.OutputState }

func (DataSourceParametersSqlServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersSqlServer)(nil)).Elem()
}

func (o DataSourceParametersSqlServerOutput) ToDataSourceParametersSqlServerOutput() DataSourceParametersSqlServerOutput {
	return o
}

func (o DataSourceParametersSqlServerOutput) ToDataSourceParametersSqlServerOutputWithContext(ctx context.Context) DataSourceParametersSqlServerOutput {
	return o
}

func (o DataSourceParametersSqlServerOutput) ToDataSourceParametersSqlServerPtrOutput() DataSourceParametersSqlServerPtrOutput {
	return o.ToDataSourceParametersSqlServerPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersSqlServerOutput) ToDataSourceParametersSqlServerPtrOutputWithContext(ctx context.Context) DataSourceParametersSqlServerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersSqlServer) *DataSourceParametersSqlServer {
		return &v
	}).(DataSourceParametersSqlServerPtrOutput)
}

// The database to which to connect.
func (o DataSourceParametersSqlServerOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersSqlServer) string { return v.Database }).(pulumi.StringOutput)
}

// The host to which to connect.
func (o DataSourceParametersSqlServerOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersSqlServer) string { return v.Host }).(pulumi.StringOutput)
}

// The warehouse to which to connect.
func (o DataSourceParametersSqlServerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v DataSourceParametersSqlServer) int { return v.Port }).(pulumi.IntOutput)
}

type DataSourceParametersSqlServerPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersSqlServerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersSqlServer)(nil)).Elem()
}

func (o DataSourceParametersSqlServerPtrOutput) ToDataSourceParametersSqlServerPtrOutput() DataSourceParametersSqlServerPtrOutput {
	return o
}

func (o DataSourceParametersSqlServerPtrOutput) ToDataSourceParametersSqlServerPtrOutputWithContext(ctx context.Context) DataSourceParametersSqlServerPtrOutput {
	return o
}

func (o DataSourceParametersSqlServerPtrOutput) Elem() DataSourceParametersSqlServerOutput {
	return o.ApplyT(func(v *DataSourceParametersSqlServer) DataSourceParametersSqlServer {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersSqlServer
		return ret
	}).(DataSourceParametersSqlServerOutput)
}

// The database to which to connect.
func (o DataSourceParametersSqlServerPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersSqlServer) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// The host to which to connect.
func (o DataSourceParametersSqlServerPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersSqlServer) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The warehouse to which to connect.
func (o DataSourceParametersSqlServerPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersSqlServer) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

type DataSourceParametersTeradata struct {
	// The database to which to connect.
	Database string `pulumi:"database"`
	// The host to which to connect.
	Host string `pulumi:"host"`
	// The warehouse to which to connect.
	Port int `pulumi:"port"`
}

// DataSourceParametersTeradataInput is an input type that accepts DataSourceParametersTeradataArgs and DataSourceParametersTeradataOutput values.
// You can construct a concrete instance of `DataSourceParametersTeradataInput` via:
//
//          DataSourceParametersTeradataArgs{...}
type DataSourceParametersTeradataInput interface {
	pulumi.Input

	ToDataSourceParametersTeradataOutput() DataSourceParametersTeradataOutput
	ToDataSourceParametersTeradataOutputWithContext(context.Context) DataSourceParametersTeradataOutput
}

type DataSourceParametersTeradataArgs struct {
	// The database to which to connect.
	Database pulumi.StringInput `pulumi:"database"`
	// The host to which to connect.
	Host pulumi.StringInput `pulumi:"host"`
	// The warehouse to which to connect.
	Port pulumi.IntInput `pulumi:"port"`
}

func (DataSourceParametersTeradataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersTeradata)(nil)).Elem()
}

func (i DataSourceParametersTeradataArgs) ToDataSourceParametersTeradataOutput() DataSourceParametersTeradataOutput {
	return i.ToDataSourceParametersTeradataOutputWithContext(context.Background())
}

func (i DataSourceParametersTeradataArgs) ToDataSourceParametersTeradataOutputWithContext(ctx context.Context) DataSourceParametersTeradataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersTeradataOutput)
}

func (i DataSourceParametersTeradataArgs) ToDataSourceParametersTeradataPtrOutput() DataSourceParametersTeradataPtrOutput {
	return i.ToDataSourceParametersTeradataPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersTeradataArgs) ToDataSourceParametersTeradataPtrOutputWithContext(ctx context.Context) DataSourceParametersTeradataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersTeradataOutput).ToDataSourceParametersTeradataPtrOutputWithContext(ctx)
}

// DataSourceParametersTeradataPtrInput is an input type that accepts DataSourceParametersTeradataArgs, DataSourceParametersTeradataPtr and DataSourceParametersTeradataPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersTeradataPtrInput` via:
//
//          DataSourceParametersTeradataArgs{...}
//
//  or:
//
//          nil
type DataSourceParametersTeradataPtrInput interface {
	pulumi.Input

	ToDataSourceParametersTeradataPtrOutput() DataSourceParametersTeradataPtrOutput
	ToDataSourceParametersTeradataPtrOutputWithContext(context.Context) DataSourceParametersTeradataPtrOutput
}

type dataSourceParametersTeradataPtrType DataSourceParametersTeradataArgs

func DataSourceParametersTeradataPtr(v *DataSourceParametersTeradataArgs) DataSourceParametersTeradataPtrInput {
	return (*dataSourceParametersTeradataPtrType)(v)
}

func (*dataSourceParametersTeradataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersTeradata)(nil)).Elem()
}

func (i *dataSourceParametersTeradataPtrType) ToDataSourceParametersTeradataPtrOutput() DataSourceParametersTeradataPtrOutput {
	return i.ToDataSourceParametersTeradataPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersTeradataPtrType) ToDataSourceParametersTeradataPtrOutputWithContext(ctx context.Context) DataSourceParametersTeradataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersTeradataPtrOutput)
}

type DataSourceParametersTeradataOutput struct{ *pulumi.OutputState }

func (DataSourceParametersTeradataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersTeradata)(nil)).Elem()
}

func (o DataSourceParametersTeradataOutput) ToDataSourceParametersTeradataOutput() DataSourceParametersTeradataOutput {
	return o
}

func (o DataSourceParametersTeradataOutput) ToDataSourceParametersTeradataOutputWithContext(ctx context.Context) DataSourceParametersTeradataOutput {
	return o
}

func (o DataSourceParametersTeradataOutput) ToDataSourceParametersTeradataPtrOutput() DataSourceParametersTeradataPtrOutput {
	return o.ToDataSourceParametersTeradataPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersTeradataOutput) ToDataSourceParametersTeradataPtrOutputWithContext(ctx context.Context) DataSourceParametersTeradataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersTeradata) *DataSourceParametersTeradata {
		return &v
	}).(DataSourceParametersTeradataPtrOutput)
}

// The database to which to connect.
func (o DataSourceParametersTeradataOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersTeradata) string { return v.Database }).(pulumi.StringOutput)
}

// The host to which to connect.
func (o DataSourceParametersTeradataOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersTeradata) string { return v.Host }).(pulumi.StringOutput)
}

// The warehouse to which to connect.
func (o DataSourceParametersTeradataOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v DataSourceParametersTeradata) int { return v.Port }).(pulumi.IntOutput)
}

type DataSourceParametersTeradataPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersTeradataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersTeradata)(nil)).Elem()
}

func (o DataSourceParametersTeradataPtrOutput) ToDataSourceParametersTeradataPtrOutput() DataSourceParametersTeradataPtrOutput {
	return o
}

func (o DataSourceParametersTeradataPtrOutput) ToDataSourceParametersTeradataPtrOutputWithContext(ctx context.Context) DataSourceParametersTeradataPtrOutput {
	return o
}

func (o DataSourceParametersTeradataPtrOutput) Elem() DataSourceParametersTeradataOutput {
	return o.ApplyT(func(v *DataSourceParametersTeradata) DataSourceParametersTeradata {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersTeradata
		return ret
	}).(DataSourceParametersTeradataOutput)
}

// The database to which to connect.
func (o DataSourceParametersTeradataPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersTeradata) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// The host to which to connect.
func (o DataSourceParametersTeradataPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersTeradata) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The warehouse to which to connect.
func (o DataSourceParametersTeradataPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersTeradata) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

type DataSourceParametersTwitter struct {
	// The maximum number of rows to query.
	MaxRows int `pulumi:"maxRows"`
	// The Twitter query to retrieve the data.
	Query string `pulumi:"query"`
}

// DataSourceParametersTwitterInput is an input type that accepts DataSourceParametersTwitterArgs and DataSourceParametersTwitterOutput values.
// You can construct a concrete instance of `DataSourceParametersTwitterInput` via:
//
//          DataSourceParametersTwitterArgs{...}
type DataSourceParametersTwitterInput interface {
	pulumi.Input

	ToDataSourceParametersTwitterOutput() DataSourceParametersTwitterOutput
	ToDataSourceParametersTwitterOutputWithContext(context.Context) DataSourceParametersTwitterOutput
}

type DataSourceParametersTwitterArgs struct {
	// The maximum number of rows to query.
	MaxRows pulumi.IntInput `pulumi:"maxRows"`
	// The Twitter query to retrieve the data.
	Query pulumi.StringInput `pulumi:"query"`
}

func (DataSourceParametersTwitterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersTwitter)(nil)).Elem()
}

func (i DataSourceParametersTwitterArgs) ToDataSourceParametersTwitterOutput() DataSourceParametersTwitterOutput {
	return i.ToDataSourceParametersTwitterOutputWithContext(context.Background())
}

func (i DataSourceParametersTwitterArgs) ToDataSourceParametersTwitterOutputWithContext(ctx context.Context) DataSourceParametersTwitterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersTwitterOutput)
}

func (i DataSourceParametersTwitterArgs) ToDataSourceParametersTwitterPtrOutput() DataSourceParametersTwitterPtrOutput {
	return i.ToDataSourceParametersTwitterPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersTwitterArgs) ToDataSourceParametersTwitterPtrOutputWithContext(ctx context.Context) DataSourceParametersTwitterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersTwitterOutput).ToDataSourceParametersTwitterPtrOutputWithContext(ctx)
}

// DataSourceParametersTwitterPtrInput is an input type that accepts DataSourceParametersTwitterArgs, DataSourceParametersTwitterPtr and DataSourceParametersTwitterPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersTwitterPtrInput` via:
//
//          DataSourceParametersTwitterArgs{...}
//
//  or:
//
//          nil
type DataSourceParametersTwitterPtrInput interface {
	pulumi.Input

	ToDataSourceParametersTwitterPtrOutput() DataSourceParametersTwitterPtrOutput
	ToDataSourceParametersTwitterPtrOutputWithContext(context.Context) DataSourceParametersTwitterPtrOutput
}

type dataSourceParametersTwitterPtrType DataSourceParametersTwitterArgs

func DataSourceParametersTwitterPtr(v *DataSourceParametersTwitterArgs) DataSourceParametersTwitterPtrInput {
	return (*dataSourceParametersTwitterPtrType)(v)
}

func (*dataSourceParametersTwitterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersTwitter)(nil)).Elem()
}

func (i *dataSourceParametersTwitterPtrType) ToDataSourceParametersTwitterPtrOutput() DataSourceParametersTwitterPtrOutput {
	return i.ToDataSourceParametersTwitterPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersTwitterPtrType) ToDataSourceParametersTwitterPtrOutputWithContext(ctx context.Context) DataSourceParametersTwitterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersTwitterPtrOutput)
}

type DataSourceParametersTwitterOutput struct{ *pulumi.OutputState }

func (DataSourceParametersTwitterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersTwitter)(nil)).Elem()
}

func (o DataSourceParametersTwitterOutput) ToDataSourceParametersTwitterOutput() DataSourceParametersTwitterOutput {
	return o
}

func (o DataSourceParametersTwitterOutput) ToDataSourceParametersTwitterOutputWithContext(ctx context.Context) DataSourceParametersTwitterOutput {
	return o
}

func (o DataSourceParametersTwitterOutput) ToDataSourceParametersTwitterPtrOutput() DataSourceParametersTwitterPtrOutput {
	return o.ToDataSourceParametersTwitterPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersTwitterOutput) ToDataSourceParametersTwitterPtrOutputWithContext(ctx context.Context) DataSourceParametersTwitterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersTwitter) *DataSourceParametersTwitter {
		return &v
	}).(DataSourceParametersTwitterPtrOutput)
}

// The maximum number of rows to query.
func (o DataSourceParametersTwitterOutput) MaxRows() pulumi.IntOutput {
	return o.ApplyT(func(v DataSourceParametersTwitter) int { return v.MaxRows }).(pulumi.IntOutput)
}

// The Twitter query to retrieve the data.
func (o DataSourceParametersTwitterOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersTwitter) string { return v.Query }).(pulumi.StringOutput)
}

type DataSourceParametersTwitterPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersTwitterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersTwitter)(nil)).Elem()
}

func (o DataSourceParametersTwitterPtrOutput) ToDataSourceParametersTwitterPtrOutput() DataSourceParametersTwitterPtrOutput {
	return o
}

func (o DataSourceParametersTwitterPtrOutput) ToDataSourceParametersTwitterPtrOutputWithContext(ctx context.Context) DataSourceParametersTwitterPtrOutput {
	return o
}

func (o DataSourceParametersTwitterPtrOutput) Elem() DataSourceParametersTwitterOutput {
	return o.ApplyT(func(v *DataSourceParametersTwitter) DataSourceParametersTwitter {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersTwitter
		return ret
	}).(DataSourceParametersTwitterOutput)
}

// The maximum number of rows to query.
func (o DataSourceParametersTwitterPtrOutput) MaxRows() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersTwitter) *int {
		if v == nil {
			return nil
		}
		return &v.MaxRows
	}).(pulumi.IntPtrOutput)
}

// The Twitter query to retrieve the data.
func (o DataSourceParametersTwitterPtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersTwitter) *string {
		if v == nil {
			return nil
		}
		return &v.Query
	}).(pulumi.StringPtrOutput)
}

type DataSourcePermission struct {
	// Set of IAM actions to grant or revoke permissions on. Max of 16 items.
	Actions []string `pulumi:"actions"`
	// The Amazon Resource Name (ARN) of the principal.
	Principal string `pulumi:"principal"`
}

// DataSourcePermissionInput is an input type that accepts DataSourcePermissionArgs and DataSourcePermissionOutput values.
// You can construct a concrete instance of `DataSourcePermissionInput` via:
//
//          DataSourcePermissionArgs{...}
type DataSourcePermissionInput interface {
	pulumi.Input

	ToDataSourcePermissionOutput() DataSourcePermissionOutput
	ToDataSourcePermissionOutputWithContext(context.Context) DataSourcePermissionOutput
}

type DataSourcePermissionArgs struct {
	// Set of IAM actions to grant or revoke permissions on. Max of 16 items.
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// The Amazon Resource Name (ARN) of the principal.
	Principal pulumi.StringInput `pulumi:"principal"`
}

func (DataSourcePermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourcePermission)(nil)).Elem()
}

func (i DataSourcePermissionArgs) ToDataSourcePermissionOutput() DataSourcePermissionOutput {
	return i.ToDataSourcePermissionOutputWithContext(context.Background())
}

func (i DataSourcePermissionArgs) ToDataSourcePermissionOutputWithContext(ctx context.Context) DataSourcePermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourcePermissionOutput)
}

// DataSourcePermissionArrayInput is an input type that accepts DataSourcePermissionArray and DataSourcePermissionArrayOutput values.
// You can construct a concrete instance of `DataSourcePermissionArrayInput` via:
//
//          DataSourcePermissionArray{ DataSourcePermissionArgs{...} }
type DataSourcePermissionArrayInput interface {
	pulumi.Input

	ToDataSourcePermissionArrayOutput() DataSourcePermissionArrayOutput
	ToDataSourcePermissionArrayOutputWithContext(context.Context) DataSourcePermissionArrayOutput
}

type DataSourcePermissionArray []DataSourcePermissionInput

func (DataSourcePermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSourcePermission)(nil)).Elem()
}

func (i DataSourcePermissionArray) ToDataSourcePermissionArrayOutput() DataSourcePermissionArrayOutput {
	return i.ToDataSourcePermissionArrayOutputWithContext(context.Background())
}

func (i DataSourcePermissionArray) ToDataSourcePermissionArrayOutputWithContext(ctx context.Context) DataSourcePermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourcePermissionArrayOutput)
}

type DataSourcePermissionOutput struct{ *pulumi.OutputState }

func (DataSourcePermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourcePermission)(nil)).Elem()
}

func (o DataSourcePermissionOutput) ToDataSourcePermissionOutput() DataSourcePermissionOutput {
	return o
}

func (o DataSourcePermissionOutput) ToDataSourcePermissionOutputWithContext(ctx context.Context) DataSourcePermissionOutput {
	return o
}

// Set of IAM actions to grant or revoke permissions on. Max of 16 items.
func (o DataSourcePermissionOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataSourcePermission) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// The Amazon Resource Name (ARN) of the principal.
func (o DataSourcePermissionOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourcePermission) string { return v.Principal }).(pulumi.StringOutput)
}

type DataSourcePermissionArrayOutput struct{ *pulumi.OutputState }

func (DataSourcePermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSourcePermission)(nil)).Elem()
}

func (o DataSourcePermissionArrayOutput) ToDataSourcePermissionArrayOutput() DataSourcePermissionArrayOutput {
	return o
}

func (o DataSourcePermissionArrayOutput) ToDataSourcePermissionArrayOutputWithContext(ctx context.Context) DataSourcePermissionArrayOutput {
	return o
}

func (o DataSourcePermissionArrayOutput) Index(i pulumi.IntInput) DataSourcePermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSourcePermission {
		return vs[0].([]DataSourcePermission)[vs[1].(int)]
	}).(DataSourcePermissionOutput)
}

type DataSourceSslProperties struct {
	// A Boolean option to control whether SSL should be disabled.
	DisableSsl bool `pulumi:"disableSsl"`
}

// DataSourceSslPropertiesInput is an input type that accepts DataSourceSslPropertiesArgs and DataSourceSslPropertiesOutput values.
// You can construct a concrete instance of `DataSourceSslPropertiesInput` via:
//
//          DataSourceSslPropertiesArgs{...}
type DataSourceSslPropertiesInput interface {
	pulumi.Input

	ToDataSourceSslPropertiesOutput() DataSourceSslPropertiesOutput
	ToDataSourceSslPropertiesOutputWithContext(context.Context) DataSourceSslPropertiesOutput
}

type DataSourceSslPropertiesArgs struct {
	// A Boolean option to control whether SSL should be disabled.
	DisableSsl pulumi.BoolInput `pulumi:"disableSsl"`
}

func (DataSourceSslPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceSslProperties)(nil)).Elem()
}

func (i DataSourceSslPropertiesArgs) ToDataSourceSslPropertiesOutput() DataSourceSslPropertiesOutput {
	return i.ToDataSourceSslPropertiesOutputWithContext(context.Background())
}

func (i DataSourceSslPropertiesArgs) ToDataSourceSslPropertiesOutputWithContext(ctx context.Context) DataSourceSslPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceSslPropertiesOutput)
}

func (i DataSourceSslPropertiesArgs) ToDataSourceSslPropertiesPtrOutput() DataSourceSslPropertiesPtrOutput {
	return i.ToDataSourceSslPropertiesPtrOutputWithContext(context.Background())
}

func (i DataSourceSslPropertiesArgs) ToDataSourceSslPropertiesPtrOutputWithContext(ctx context.Context) DataSourceSslPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceSslPropertiesOutput).ToDataSourceSslPropertiesPtrOutputWithContext(ctx)
}

// DataSourceSslPropertiesPtrInput is an input type that accepts DataSourceSslPropertiesArgs, DataSourceSslPropertiesPtr and DataSourceSslPropertiesPtrOutput values.
// You can construct a concrete instance of `DataSourceSslPropertiesPtrInput` via:
//
//          DataSourceSslPropertiesArgs{...}
//
//  or:
//
//          nil
type DataSourceSslPropertiesPtrInput interface {
	pulumi.Input

	ToDataSourceSslPropertiesPtrOutput() DataSourceSslPropertiesPtrOutput
	ToDataSourceSslPropertiesPtrOutputWithContext(context.Context) DataSourceSslPropertiesPtrOutput
}

type dataSourceSslPropertiesPtrType DataSourceSslPropertiesArgs

func DataSourceSslPropertiesPtr(v *DataSourceSslPropertiesArgs) DataSourceSslPropertiesPtrInput {
	return (*dataSourceSslPropertiesPtrType)(v)
}

func (*dataSourceSslPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceSslProperties)(nil)).Elem()
}

func (i *dataSourceSslPropertiesPtrType) ToDataSourceSslPropertiesPtrOutput() DataSourceSslPropertiesPtrOutput {
	return i.ToDataSourceSslPropertiesPtrOutputWithContext(context.Background())
}

func (i *dataSourceSslPropertiesPtrType) ToDataSourceSslPropertiesPtrOutputWithContext(ctx context.Context) DataSourceSslPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceSslPropertiesPtrOutput)
}

type DataSourceSslPropertiesOutput struct{ *pulumi.OutputState }

func (DataSourceSslPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceSslProperties)(nil)).Elem()
}

func (o DataSourceSslPropertiesOutput) ToDataSourceSslPropertiesOutput() DataSourceSslPropertiesOutput {
	return o
}

func (o DataSourceSslPropertiesOutput) ToDataSourceSslPropertiesOutputWithContext(ctx context.Context) DataSourceSslPropertiesOutput {
	return o
}

func (o DataSourceSslPropertiesOutput) ToDataSourceSslPropertiesPtrOutput() DataSourceSslPropertiesPtrOutput {
	return o.ToDataSourceSslPropertiesPtrOutputWithContext(context.Background())
}

func (o DataSourceSslPropertiesOutput) ToDataSourceSslPropertiesPtrOutputWithContext(ctx context.Context) DataSourceSslPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceSslProperties) *DataSourceSslProperties {
		return &v
	}).(DataSourceSslPropertiesPtrOutput)
}

// A Boolean option to control whether SSL should be disabled.
func (o DataSourceSslPropertiesOutput) DisableSsl() pulumi.BoolOutput {
	return o.ApplyT(func(v DataSourceSslProperties) bool { return v.DisableSsl }).(pulumi.BoolOutput)
}

type DataSourceSslPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DataSourceSslPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceSslProperties)(nil)).Elem()
}

func (o DataSourceSslPropertiesPtrOutput) ToDataSourceSslPropertiesPtrOutput() DataSourceSslPropertiesPtrOutput {
	return o
}

func (o DataSourceSslPropertiesPtrOutput) ToDataSourceSslPropertiesPtrOutputWithContext(ctx context.Context) DataSourceSslPropertiesPtrOutput {
	return o
}

func (o DataSourceSslPropertiesPtrOutput) Elem() DataSourceSslPropertiesOutput {
	return o.ApplyT(func(v *DataSourceSslProperties) DataSourceSslProperties {
		if v != nil {
			return *v
		}
		var ret DataSourceSslProperties
		return ret
	}).(DataSourceSslPropertiesOutput)
}

// A Boolean option to control whether SSL should be disabled.
func (o DataSourceSslPropertiesPtrOutput) DisableSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataSourceSslProperties) *bool {
		if v == nil {
			return nil
		}
		return &v.DisableSsl
	}).(pulumi.BoolPtrOutput)
}

type DataSourceVpcConnectionProperties struct {
	// The Amazon Resource Name (ARN) for the VPC connection.
	VpcConnectionArn string `pulumi:"vpcConnectionArn"`
}

// DataSourceVpcConnectionPropertiesInput is an input type that accepts DataSourceVpcConnectionPropertiesArgs and DataSourceVpcConnectionPropertiesOutput values.
// You can construct a concrete instance of `DataSourceVpcConnectionPropertiesInput` via:
//
//          DataSourceVpcConnectionPropertiesArgs{...}
type DataSourceVpcConnectionPropertiesInput interface {
	pulumi.Input

	ToDataSourceVpcConnectionPropertiesOutput() DataSourceVpcConnectionPropertiesOutput
	ToDataSourceVpcConnectionPropertiesOutputWithContext(context.Context) DataSourceVpcConnectionPropertiesOutput
}

type DataSourceVpcConnectionPropertiesArgs struct {
	// The Amazon Resource Name (ARN) for the VPC connection.
	VpcConnectionArn pulumi.StringInput `pulumi:"vpcConnectionArn"`
}

func (DataSourceVpcConnectionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceVpcConnectionProperties)(nil)).Elem()
}

func (i DataSourceVpcConnectionPropertiesArgs) ToDataSourceVpcConnectionPropertiesOutput() DataSourceVpcConnectionPropertiesOutput {
	return i.ToDataSourceVpcConnectionPropertiesOutputWithContext(context.Background())
}

func (i DataSourceVpcConnectionPropertiesArgs) ToDataSourceVpcConnectionPropertiesOutputWithContext(ctx context.Context) DataSourceVpcConnectionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceVpcConnectionPropertiesOutput)
}

func (i DataSourceVpcConnectionPropertiesArgs) ToDataSourceVpcConnectionPropertiesPtrOutput() DataSourceVpcConnectionPropertiesPtrOutput {
	return i.ToDataSourceVpcConnectionPropertiesPtrOutputWithContext(context.Background())
}

func (i DataSourceVpcConnectionPropertiesArgs) ToDataSourceVpcConnectionPropertiesPtrOutputWithContext(ctx context.Context) DataSourceVpcConnectionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceVpcConnectionPropertiesOutput).ToDataSourceVpcConnectionPropertiesPtrOutputWithContext(ctx)
}

// DataSourceVpcConnectionPropertiesPtrInput is an input type that accepts DataSourceVpcConnectionPropertiesArgs, DataSourceVpcConnectionPropertiesPtr and DataSourceVpcConnectionPropertiesPtrOutput values.
// You can construct a concrete instance of `DataSourceVpcConnectionPropertiesPtrInput` via:
//
//          DataSourceVpcConnectionPropertiesArgs{...}
//
//  or:
//
//          nil
type DataSourceVpcConnectionPropertiesPtrInput interface {
	pulumi.Input

	ToDataSourceVpcConnectionPropertiesPtrOutput() DataSourceVpcConnectionPropertiesPtrOutput
	ToDataSourceVpcConnectionPropertiesPtrOutputWithContext(context.Context) DataSourceVpcConnectionPropertiesPtrOutput
}

type dataSourceVpcConnectionPropertiesPtrType DataSourceVpcConnectionPropertiesArgs

func DataSourceVpcConnectionPropertiesPtr(v *DataSourceVpcConnectionPropertiesArgs) DataSourceVpcConnectionPropertiesPtrInput {
	return (*dataSourceVpcConnectionPropertiesPtrType)(v)
}

func (*dataSourceVpcConnectionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceVpcConnectionProperties)(nil)).Elem()
}

func (i *dataSourceVpcConnectionPropertiesPtrType) ToDataSourceVpcConnectionPropertiesPtrOutput() DataSourceVpcConnectionPropertiesPtrOutput {
	return i.ToDataSourceVpcConnectionPropertiesPtrOutputWithContext(context.Background())
}

func (i *dataSourceVpcConnectionPropertiesPtrType) ToDataSourceVpcConnectionPropertiesPtrOutputWithContext(ctx context.Context) DataSourceVpcConnectionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceVpcConnectionPropertiesPtrOutput)
}

type DataSourceVpcConnectionPropertiesOutput struct{ *pulumi.OutputState }

func (DataSourceVpcConnectionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceVpcConnectionProperties)(nil)).Elem()
}

func (o DataSourceVpcConnectionPropertiesOutput) ToDataSourceVpcConnectionPropertiesOutput() DataSourceVpcConnectionPropertiesOutput {
	return o
}

func (o DataSourceVpcConnectionPropertiesOutput) ToDataSourceVpcConnectionPropertiesOutputWithContext(ctx context.Context) DataSourceVpcConnectionPropertiesOutput {
	return o
}

func (o DataSourceVpcConnectionPropertiesOutput) ToDataSourceVpcConnectionPropertiesPtrOutput() DataSourceVpcConnectionPropertiesPtrOutput {
	return o.ToDataSourceVpcConnectionPropertiesPtrOutputWithContext(context.Background())
}

func (o DataSourceVpcConnectionPropertiesOutput) ToDataSourceVpcConnectionPropertiesPtrOutputWithContext(ctx context.Context) DataSourceVpcConnectionPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceVpcConnectionProperties) *DataSourceVpcConnectionProperties {
		return &v
	}).(DataSourceVpcConnectionPropertiesPtrOutput)
}

// The Amazon Resource Name (ARN) for the VPC connection.
func (o DataSourceVpcConnectionPropertiesOutput) VpcConnectionArn() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceVpcConnectionProperties) string { return v.VpcConnectionArn }).(pulumi.StringOutput)
}

type DataSourceVpcConnectionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DataSourceVpcConnectionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceVpcConnectionProperties)(nil)).Elem()
}

func (o DataSourceVpcConnectionPropertiesPtrOutput) ToDataSourceVpcConnectionPropertiesPtrOutput() DataSourceVpcConnectionPropertiesPtrOutput {
	return o
}

func (o DataSourceVpcConnectionPropertiesPtrOutput) ToDataSourceVpcConnectionPropertiesPtrOutputWithContext(ctx context.Context) DataSourceVpcConnectionPropertiesPtrOutput {
	return o
}

func (o DataSourceVpcConnectionPropertiesPtrOutput) Elem() DataSourceVpcConnectionPropertiesOutput {
	return o.ApplyT(func(v *DataSourceVpcConnectionProperties) DataSourceVpcConnectionProperties {
		if v != nil {
			return *v
		}
		var ret DataSourceVpcConnectionProperties
		return ret
	}).(DataSourceVpcConnectionPropertiesOutput)
}

// The Amazon Resource Name (ARN) for the VPC connection.
func (o DataSourceVpcConnectionPropertiesPtrOutput) VpcConnectionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceVpcConnectionProperties) *string {
		if v == nil {
			return nil
		}
		return &v.VpcConnectionArn
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceCredentialsInput)(nil)).Elem(), DataSourceCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceCredentialsPtrInput)(nil)).Elem(), DataSourceCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceCredentialsCredentialPairInput)(nil)).Elem(), DataSourceCredentialsCredentialPairArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceCredentialsCredentialPairPtrInput)(nil)).Elem(), DataSourceCredentialsCredentialPairArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersInput)(nil)).Elem(), DataSourceParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersPtrInput)(nil)).Elem(), DataSourceParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersAmazonElasticsearchInput)(nil)).Elem(), DataSourceParametersAmazonElasticsearchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersAmazonElasticsearchPtrInput)(nil)).Elem(), DataSourceParametersAmazonElasticsearchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersAthenaInput)(nil)).Elem(), DataSourceParametersAthenaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersAthenaPtrInput)(nil)).Elem(), DataSourceParametersAthenaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersAuroraInput)(nil)).Elem(), DataSourceParametersAuroraArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersAuroraPtrInput)(nil)).Elem(), DataSourceParametersAuroraArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersAuroraPostgresqlInput)(nil)).Elem(), DataSourceParametersAuroraPostgresqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersAuroraPostgresqlPtrInput)(nil)).Elem(), DataSourceParametersAuroraPostgresqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersAwsIotAnalyticsInput)(nil)).Elem(), DataSourceParametersAwsIotAnalyticsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersAwsIotAnalyticsPtrInput)(nil)).Elem(), DataSourceParametersAwsIotAnalyticsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersJiraInput)(nil)).Elem(), DataSourceParametersJiraArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersJiraPtrInput)(nil)).Elem(), DataSourceParametersJiraArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersMariaDbInput)(nil)).Elem(), DataSourceParametersMariaDbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersMariaDbPtrInput)(nil)).Elem(), DataSourceParametersMariaDbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersMysqlInput)(nil)).Elem(), DataSourceParametersMysqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersMysqlPtrInput)(nil)).Elem(), DataSourceParametersMysqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersOracleInput)(nil)).Elem(), DataSourceParametersOracleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersOraclePtrInput)(nil)).Elem(), DataSourceParametersOracleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersPostgresqlInput)(nil)).Elem(), DataSourceParametersPostgresqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersPostgresqlPtrInput)(nil)).Elem(), DataSourceParametersPostgresqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersPrestoInput)(nil)).Elem(), DataSourceParametersPrestoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersPrestoPtrInput)(nil)).Elem(), DataSourceParametersPrestoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersRdsInput)(nil)).Elem(), DataSourceParametersRdsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersRdsPtrInput)(nil)).Elem(), DataSourceParametersRdsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersRedshiftInput)(nil)).Elem(), DataSourceParametersRedshiftArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersRedshiftPtrInput)(nil)).Elem(), DataSourceParametersRedshiftArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersS3Input)(nil)).Elem(), DataSourceParametersS3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersS3PtrInput)(nil)).Elem(), DataSourceParametersS3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersS3ManifestFileLocationInput)(nil)).Elem(), DataSourceParametersS3ManifestFileLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersS3ManifestFileLocationPtrInput)(nil)).Elem(), DataSourceParametersS3ManifestFileLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersServiceNowInput)(nil)).Elem(), DataSourceParametersServiceNowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersServiceNowPtrInput)(nil)).Elem(), DataSourceParametersServiceNowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersSnowflakeInput)(nil)).Elem(), DataSourceParametersSnowflakeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersSnowflakePtrInput)(nil)).Elem(), DataSourceParametersSnowflakeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersSparkInput)(nil)).Elem(), DataSourceParametersSparkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersSparkPtrInput)(nil)).Elem(), DataSourceParametersSparkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersSqlServerInput)(nil)).Elem(), DataSourceParametersSqlServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersSqlServerPtrInput)(nil)).Elem(), DataSourceParametersSqlServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersTeradataInput)(nil)).Elem(), DataSourceParametersTeradataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersTeradataPtrInput)(nil)).Elem(), DataSourceParametersTeradataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersTwitterInput)(nil)).Elem(), DataSourceParametersTwitterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersTwitterPtrInput)(nil)).Elem(), DataSourceParametersTwitterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourcePermissionInput)(nil)).Elem(), DataSourcePermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourcePermissionArrayInput)(nil)).Elem(), DataSourcePermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceSslPropertiesInput)(nil)).Elem(), DataSourceSslPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceSslPropertiesPtrInput)(nil)).Elem(), DataSourceSslPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceVpcConnectionPropertiesInput)(nil)).Elem(), DataSourceVpcConnectionPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceVpcConnectionPropertiesPtrInput)(nil)).Elem(), DataSourceVpcConnectionPropertiesArgs{})
	pulumi.RegisterOutputType(DataSourceCredentialsOutput{})
	pulumi.RegisterOutputType(DataSourceCredentialsPtrOutput{})
	pulumi.RegisterOutputType(DataSourceCredentialsCredentialPairOutput{})
	pulumi.RegisterOutputType(DataSourceCredentialsCredentialPairPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersOutput{})
	pulumi.RegisterOutputType(DataSourceParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersAmazonElasticsearchOutput{})
	pulumi.RegisterOutputType(DataSourceParametersAmazonElasticsearchPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersAthenaOutput{})
	pulumi.RegisterOutputType(DataSourceParametersAthenaPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersAuroraOutput{})
	pulumi.RegisterOutputType(DataSourceParametersAuroraPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersAuroraPostgresqlOutput{})
	pulumi.RegisterOutputType(DataSourceParametersAuroraPostgresqlPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersAwsIotAnalyticsOutput{})
	pulumi.RegisterOutputType(DataSourceParametersAwsIotAnalyticsPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersJiraOutput{})
	pulumi.RegisterOutputType(DataSourceParametersJiraPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersMariaDbOutput{})
	pulumi.RegisterOutputType(DataSourceParametersMariaDbPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersMysqlOutput{})
	pulumi.RegisterOutputType(DataSourceParametersMysqlPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersOracleOutput{})
	pulumi.RegisterOutputType(DataSourceParametersOraclePtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersPostgresqlOutput{})
	pulumi.RegisterOutputType(DataSourceParametersPostgresqlPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersPrestoOutput{})
	pulumi.RegisterOutputType(DataSourceParametersPrestoPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersRdsOutput{})
	pulumi.RegisterOutputType(DataSourceParametersRdsPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersRedshiftOutput{})
	pulumi.RegisterOutputType(DataSourceParametersRedshiftPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersS3Output{})
	pulumi.RegisterOutputType(DataSourceParametersS3PtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersS3ManifestFileLocationOutput{})
	pulumi.RegisterOutputType(DataSourceParametersS3ManifestFileLocationPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersServiceNowOutput{})
	pulumi.RegisterOutputType(DataSourceParametersServiceNowPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersSnowflakeOutput{})
	pulumi.RegisterOutputType(DataSourceParametersSnowflakePtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersSparkOutput{})
	pulumi.RegisterOutputType(DataSourceParametersSparkPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersSqlServerOutput{})
	pulumi.RegisterOutputType(DataSourceParametersSqlServerPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersTeradataOutput{})
	pulumi.RegisterOutputType(DataSourceParametersTeradataPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersTwitterOutput{})
	pulumi.RegisterOutputType(DataSourceParametersTwitterPtrOutput{})
	pulumi.RegisterOutputType(DataSourcePermissionOutput{})
	pulumi.RegisterOutputType(DataSourcePermissionArrayOutput{})
	pulumi.RegisterOutputType(DataSourceSslPropertiesOutput{})
	pulumi.RegisterOutputType(DataSourceSslPropertiesPtrOutput{})
	pulumi.RegisterOutputType(DataSourceVpcConnectionPropertiesOutput{})
	pulumi.RegisterOutputType(DataSourceVpcConnectionPropertiesPtrOutput{})
}
