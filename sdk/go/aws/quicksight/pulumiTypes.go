// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type AnalysisParameters struct {
	// A list of parameters that have a data type of date-time. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DateTimeParameter.html).
	DateTimeParameters []AnalysisParametersDateTimeParameter `pulumi:"dateTimeParameters"`
	// A list of parameters that have a data type of decimal. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DecimalParameter.html).
	DecimalParameters []AnalysisParametersDecimalParameter `pulumi:"decimalParameters"`
	// A list of parameters that have a data type of integer. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_IntegerParameter.html).
	IntegerParameters []AnalysisParametersIntegerParameter `pulumi:"integerParameters"`
	// A list of parameters that have a data type of string. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_StringParameter.html).
	StringParameters []AnalysisParametersStringParameter `pulumi:"stringParameters"`
}

// AnalysisParametersInput is an input type that accepts AnalysisParametersArgs and AnalysisParametersOutput values.
// You can construct a concrete instance of `AnalysisParametersInput` via:
//
//	AnalysisParametersArgs{...}
type AnalysisParametersInput interface {
	pulumi.Input

	ToAnalysisParametersOutput() AnalysisParametersOutput
	ToAnalysisParametersOutputWithContext(context.Context) AnalysisParametersOutput
}

type AnalysisParametersArgs struct {
	// A list of parameters that have a data type of date-time. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DateTimeParameter.html).
	DateTimeParameters AnalysisParametersDateTimeParameterArrayInput `pulumi:"dateTimeParameters"`
	// A list of parameters that have a data type of decimal. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DecimalParameter.html).
	DecimalParameters AnalysisParametersDecimalParameterArrayInput `pulumi:"decimalParameters"`
	// A list of parameters that have a data type of integer. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_IntegerParameter.html).
	IntegerParameters AnalysisParametersIntegerParameterArrayInput `pulumi:"integerParameters"`
	// A list of parameters that have a data type of string. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_StringParameter.html).
	StringParameters AnalysisParametersStringParameterArrayInput `pulumi:"stringParameters"`
}

func (AnalysisParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisParameters)(nil)).Elem()
}

func (i AnalysisParametersArgs) ToAnalysisParametersOutput() AnalysisParametersOutput {
	return i.ToAnalysisParametersOutputWithContext(context.Background())
}

func (i AnalysisParametersArgs) ToAnalysisParametersOutputWithContext(ctx context.Context) AnalysisParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisParametersOutput)
}

func (i AnalysisParametersArgs) ToAnalysisParametersPtrOutput() AnalysisParametersPtrOutput {
	return i.ToAnalysisParametersPtrOutputWithContext(context.Background())
}

func (i AnalysisParametersArgs) ToAnalysisParametersPtrOutputWithContext(ctx context.Context) AnalysisParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisParametersOutput).ToAnalysisParametersPtrOutputWithContext(ctx)
}

// AnalysisParametersPtrInput is an input type that accepts AnalysisParametersArgs, AnalysisParametersPtr and AnalysisParametersPtrOutput values.
// You can construct a concrete instance of `AnalysisParametersPtrInput` via:
//
//	        AnalysisParametersArgs{...}
//
//	or:
//
//	        nil
type AnalysisParametersPtrInput interface {
	pulumi.Input

	ToAnalysisParametersPtrOutput() AnalysisParametersPtrOutput
	ToAnalysisParametersPtrOutputWithContext(context.Context) AnalysisParametersPtrOutput
}

type analysisParametersPtrType AnalysisParametersArgs

func AnalysisParametersPtr(v *AnalysisParametersArgs) AnalysisParametersPtrInput {
	return (*analysisParametersPtrType)(v)
}

func (*analysisParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalysisParameters)(nil)).Elem()
}

func (i *analysisParametersPtrType) ToAnalysisParametersPtrOutput() AnalysisParametersPtrOutput {
	return i.ToAnalysisParametersPtrOutputWithContext(context.Background())
}

func (i *analysisParametersPtrType) ToAnalysisParametersPtrOutputWithContext(ctx context.Context) AnalysisParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisParametersPtrOutput)
}

type AnalysisParametersOutput struct{ *pulumi.OutputState }

func (AnalysisParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisParameters)(nil)).Elem()
}

func (o AnalysisParametersOutput) ToAnalysisParametersOutput() AnalysisParametersOutput {
	return o
}

func (o AnalysisParametersOutput) ToAnalysisParametersOutputWithContext(ctx context.Context) AnalysisParametersOutput {
	return o
}

func (o AnalysisParametersOutput) ToAnalysisParametersPtrOutput() AnalysisParametersPtrOutput {
	return o.ToAnalysisParametersPtrOutputWithContext(context.Background())
}

func (o AnalysisParametersOutput) ToAnalysisParametersPtrOutputWithContext(ctx context.Context) AnalysisParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnalysisParameters) *AnalysisParameters {
		return &v
	}).(AnalysisParametersPtrOutput)
}

// A list of parameters that have a data type of date-time. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DateTimeParameter.html).
func (o AnalysisParametersOutput) DateTimeParameters() AnalysisParametersDateTimeParameterArrayOutput {
	return o.ApplyT(func(v AnalysisParameters) []AnalysisParametersDateTimeParameter { return v.DateTimeParameters }).(AnalysisParametersDateTimeParameterArrayOutput)
}

// A list of parameters that have a data type of decimal. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DecimalParameter.html).
func (o AnalysisParametersOutput) DecimalParameters() AnalysisParametersDecimalParameterArrayOutput {
	return o.ApplyT(func(v AnalysisParameters) []AnalysisParametersDecimalParameter { return v.DecimalParameters }).(AnalysisParametersDecimalParameterArrayOutput)
}

// A list of parameters that have a data type of integer. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_IntegerParameter.html).
func (o AnalysisParametersOutput) IntegerParameters() AnalysisParametersIntegerParameterArrayOutput {
	return o.ApplyT(func(v AnalysisParameters) []AnalysisParametersIntegerParameter { return v.IntegerParameters }).(AnalysisParametersIntegerParameterArrayOutput)
}

// A list of parameters that have a data type of string. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_StringParameter.html).
func (o AnalysisParametersOutput) StringParameters() AnalysisParametersStringParameterArrayOutput {
	return o.ApplyT(func(v AnalysisParameters) []AnalysisParametersStringParameter { return v.StringParameters }).(AnalysisParametersStringParameterArrayOutput)
}

type AnalysisParametersPtrOutput struct{ *pulumi.OutputState }

func (AnalysisParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalysisParameters)(nil)).Elem()
}

func (o AnalysisParametersPtrOutput) ToAnalysisParametersPtrOutput() AnalysisParametersPtrOutput {
	return o
}

func (o AnalysisParametersPtrOutput) ToAnalysisParametersPtrOutputWithContext(ctx context.Context) AnalysisParametersPtrOutput {
	return o
}

func (o AnalysisParametersPtrOutput) Elem() AnalysisParametersOutput {
	return o.ApplyT(func(v *AnalysisParameters) AnalysisParameters {
		if v != nil {
			return *v
		}
		var ret AnalysisParameters
		return ret
	}).(AnalysisParametersOutput)
}

// A list of parameters that have a data type of date-time. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DateTimeParameter.html).
func (o AnalysisParametersPtrOutput) DateTimeParameters() AnalysisParametersDateTimeParameterArrayOutput {
	return o.ApplyT(func(v *AnalysisParameters) []AnalysisParametersDateTimeParameter {
		if v == nil {
			return nil
		}
		return v.DateTimeParameters
	}).(AnalysisParametersDateTimeParameterArrayOutput)
}

// A list of parameters that have a data type of decimal. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DecimalParameter.html).
func (o AnalysisParametersPtrOutput) DecimalParameters() AnalysisParametersDecimalParameterArrayOutput {
	return o.ApplyT(func(v *AnalysisParameters) []AnalysisParametersDecimalParameter {
		if v == nil {
			return nil
		}
		return v.DecimalParameters
	}).(AnalysisParametersDecimalParameterArrayOutput)
}

// A list of parameters that have a data type of integer. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_IntegerParameter.html).
func (o AnalysisParametersPtrOutput) IntegerParameters() AnalysisParametersIntegerParameterArrayOutput {
	return o.ApplyT(func(v *AnalysisParameters) []AnalysisParametersIntegerParameter {
		if v == nil {
			return nil
		}
		return v.IntegerParameters
	}).(AnalysisParametersIntegerParameterArrayOutput)
}

// A list of parameters that have a data type of string. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_StringParameter.html).
func (o AnalysisParametersPtrOutput) StringParameters() AnalysisParametersStringParameterArrayOutput {
	return o.ApplyT(func(v *AnalysisParameters) []AnalysisParametersStringParameter {
		if v == nil {
			return nil
		}
		return v.StringParameters
	}).(AnalysisParametersStringParameterArrayOutput)
}

type AnalysisParametersDateTimeParameter struct {
	// Display name for the analysis.
	//
	// The following arguments are optional:
	Name   string   `pulumi:"name"`
	Values []string `pulumi:"values"`
}

// AnalysisParametersDateTimeParameterInput is an input type that accepts AnalysisParametersDateTimeParameterArgs and AnalysisParametersDateTimeParameterOutput values.
// You can construct a concrete instance of `AnalysisParametersDateTimeParameterInput` via:
//
//	AnalysisParametersDateTimeParameterArgs{...}
type AnalysisParametersDateTimeParameterInput interface {
	pulumi.Input

	ToAnalysisParametersDateTimeParameterOutput() AnalysisParametersDateTimeParameterOutput
	ToAnalysisParametersDateTimeParameterOutputWithContext(context.Context) AnalysisParametersDateTimeParameterOutput
}

type AnalysisParametersDateTimeParameterArgs struct {
	// Display name for the analysis.
	//
	// The following arguments are optional:
	Name   pulumi.StringInput      `pulumi:"name"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AnalysisParametersDateTimeParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisParametersDateTimeParameter)(nil)).Elem()
}

func (i AnalysisParametersDateTimeParameterArgs) ToAnalysisParametersDateTimeParameterOutput() AnalysisParametersDateTimeParameterOutput {
	return i.ToAnalysisParametersDateTimeParameterOutputWithContext(context.Background())
}

func (i AnalysisParametersDateTimeParameterArgs) ToAnalysisParametersDateTimeParameterOutputWithContext(ctx context.Context) AnalysisParametersDateTimeParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisParametersDateTimeParameterOutput)
}

// AnalysisParametersDateTimeParameterArrayInput is an input type that accepts AnalysisParametersDateTimeParameterArray and AnalysisParametersDateTimeParameterArrayOutput values.
// You can construct a concrete instance of `AnalysisParametersDateTimeParameterArrayInput` via:
//
//	AnalysisParametersDateTimeParameterArray{ AnalysisParametersDateTimeParameterArgs{...} }
type AnalysisParametersDateTimeParameterArrayInput interface {
	pulumi.Input

	ToAnalysisParametersDateTimeParameterArrayOutput() AnalysisParametersDateTimeParameterArrayOutput
	ToAnalysisParametersDateTimeParameterArrayOutputWithContext(context.Context) AnalysisParametersDateTimeParameterArrayOutput
}

type AnalysisParametersDateTimeParameterArray []AnalysisParametersDateTimeParameterInput

func (AnalysisParametersDateTimeParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalysisParametersDateTimeParameter)(nil)).Elem()
}

func (i AnalysisParametersDateTimeParameterArray) ToAnalysisParametersDateTimeParameterArrayOutput() AnalysisParametersDateTimeParameterArrayOutput {
	return i.ToAnalysisParametersDateTimeParameterArrayOutputWithContext(context.Background())
}

func (i AnalysisParametersDateTimeParameterArray) ToAnalysisParametersDateTimeParameterArrayOutputWithContext(ctx context.Context) AnalysisParametersDateTimeParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisParametersDateTimeParameterArrayOutput)
}

type AnalysisParametersDateTimeParameterOutput struct{ *pulumi.OutputState }

func (AnalysisParametersDateTimeParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisParametersDateTimeParameter)(nil)).Elem()
}

func (o AnalysisParametersDateTimeParameterOutput) ToAnalysisParametersDateTimeParameterOutput() AnalysisParametersDateTimeParameterOutput {
	return o
}

func (o AnalysisParametersDateTimeParameterOutput) ToAnalysisParametersDateTimeParameterOutputWithContext(ctx context.Context) AnalysisParametersDateTimeParameterOutput {
	return o
}

// Display name for the analysis.
//
// The following arguments are optional:
func (o AnalysisParametersDateTimeParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AnalysisParametersDateTimeParameter) string { return v.Name }).(pulumi.StringOutput)
}

func (o AnalysisParametersDateTimeParameterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnalysisParametersDateTimeParameter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AnalysisParametersDateTimeParameterArrayOutput struct{ *pulumi.OutputState }

func (AnalysisParametersDateTimeParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalysisParametersDateTimeParameter)(nil)).Elem()
}

func (o AnalysisParametersDateTimeParameterArrayOutput) ToAnalysisParametersDateTimeParameterArrayOutput() AnalysisParametersDateTimeParameterArrayOutput {
	return o
}

func (o AnalysisParametersDateTimeParameterArrayOutput) ToAnalysisParametersDateTimeParameterArrayOutputWithContext(ctx context.Context) AnalysisParametersDateTimeParameterArrayOutput {
	return o
}

func (o AnalysisParametersDateTimeParameterArrayOutput) Index(i pulumi.IntInput) AnalysisParametersDateTimeParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AnalysisParametersDateTimeParameter {
		return vs[0].([]AnalysisParametersDateTimeParameter)[vs[1].(int)]
	}).(AnalysisParametersDateTimeParameterOutput)
}

type AnalysisParametersDecimalParameter struct {
	// Display name for the analysis.
	//
	// The following arguments are optional:
	Name   string    `pulumi:"name"`
	Values []float64 `pulumi:"values"`
}

// AnalysisParametersDecimalParameterInput is an input type that accepts AnalysisParametersDecimalParameterArgs and AnalysisParametersDecimalParameterOutput values.
// You can construct a concrete instance of `AnalysisParametersDecimalParameterInput` via:
//
//	AnalysisParametersDecimalParameterArgs{...}
type AnalysisParametersDecimalParameterInput interface {
	pulumi.Input

	ToAnalysisParametersDecimalParameterOutput() AnalysisParametersDecimalParameterOutput
	ToAnalysisParametersDecimalParameterOutputWithContext(context.Context) AnalysisParametersDecimalParameterOutput
}

type AnalysisParametersDecimalParameterArgs struct {
	// Display name for the analysis.
	//
	// The following arguments are optional:
	Name   pulumi.StringInput       `pulumi:"name"`
	Values pulumi.Float64ArrayInput `pulumi:"values"`
}

func (AnalysisParametersDecimalParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisParametersDecimalParameter)(nil)).Elem()
}

func (i AnalysisParametersDecimalParameterArgs) ToAnalysisParametersDecimalParameterOutput() AnalysisParametersDecimalParameterOutput {
	return i.ToAnalysisParametersDecimalParameterOutputWithContext(context.Background())
}

func (i AnalysisParametersDecimalParameterArgs) ToAnalysisParametersDecimalParameterOutputWithContext(ctx context.Context) AnalysisParametersDecimalParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisParametersDecimalParameterOutput)
}

// AnalysisParametersDecimalParameterArrayInput is an input type that accepts AnalysisParametersDecimalParameterArray and AnalysisParametersDecimalParameterArrayOutput values.
// You can construct a concrete instance of `AnalysisParametersDecimalParameterArrayInput` via:
//
//	AnalysisParametersDecimalParameterArray{ AnalysisParametersDecimalParameterArgs{...} }
type AnalysisParametersDecimalParameterArrayInput interface {
	pulumi.Input

	ToAnalysisParametersDecimalParameterArrayOutput() AnalysisParametersDecimalParameterArrayOutput
	ToAnalysisParametersDecimalParameterArrayOutputWithContext(context.Context) AnalysisParametersDecimalParameterArrayOutput
}

type AnalysisParametersDecimalParameterArray []AnalysisParametersDecimalParameterInput

func (AnalysisParametersDecimalParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalysisParametersDecimalParameter)(nil)).Elem()
}

func (i AnalysisParametersDecimalParameterArray) ToAnalysisParametersDecimalParameterArrayOutput() AnalysisParametersDecimalParameterArrayOutput {
	return i.ToAnalysisParametersDecimalParameterArrayOutputWithContext(context.Background())
}

func (i AnalysisParametersDecimalParameterArray) ToAnalysisParametersDecimalParameterArrayOutputWithContext(ctx context.Context) AnalysisParametersDecimalParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisParametersDecimalParameterArrayOutput)
}

type AnalysisParametersDecimalParameterOutput struct{ *pulumi.OutputState }

func (AnalysisParametersDecimalParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisParametersDecimalParameter)(nil)).Elem()
}

func (o AnalysisParametersDecimalParameterOutput) ToAnalysisParametersDecimalParameterOutput() AnalysisParametersDecimalParameterOutput {
	return o
}

func (o AnalysisParametersDecimalParameterOutput) ToAnalysisParametersDecimalParameterOutputWithContext(ctx context.Context) AnalysisParametersDecimalParameterOutput {
	return o
}

// Display name for the analysis.
//
// The following arguments are optional:
func (o AnalysisParametersDecimalParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AnalysisParametersDecimalParameter) string { return v.Name }).(pulumi.StringOutput)
}

func (o AnalysisParametersDecimalParameterOutput) Values() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v AnalysisParametersDecimalParameter) []float64 { return v.Values }).(pulumi.Float64ArrayOutput)
}

type AnalysisParametersDecimalParameterArrayOutput struct{ *pulumi.OutputState }

func (AnalysisParametersDecimalParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalysisParametersDecimalParameter)(nil)).Elem()
}

func (o AnalysisParametersDecimalParameterArrayOutput) ToAnalysisParametersDecimalParameterArrayOutput() AnalysisParametersDecimalParameterArrayOutput {
	return o
}

func (o AnalysisParametersDecimalParameterArrayOutput) ToAnalysisParametersDecimalParameterArrayOutputWithContext(ctx context.Context) AnalysisParametersDecimalParameterArrayOutput {
	return o
}

func (o AnalysisParametersDecimalParameterArrayOutput) Index(i pulumi.IntInput) AnalysisParametersDecimalParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AnalysisParametersDecimalParameter {
		return vs[0].([]AnalysisParametersDecimalParameter)[vs[1].(int)]
	}).(AnalysisParametersDecimalParameterOutput)
}

type AnalysisParametersIntegerParameter struct {
	// Display name for the analysis.
	//
	// The following arguments are optional:
	Name   string `pulumi:"name"`
	Values []int  `pulumi:"values"`
}

// AnalysisParametersIntegerParameterInput is an input type that accepts AnalysisParametersIntegerParameterArgs and AnalysisParametersIntegerParameterOutput values.
// You can construct a concrete instance of `AnalysisParametersIntegerParameterInput` via:
//
//	AnalysisParametersIntegerParameterArgs{...}
type AnalysisParametersIntegerParameterInput interface {
	pulumi.Input

	ToAnalysisParametersIntegerParameterOutput() AnalysisParametersIntegerParameterOutput
	ToAnalysisParametersIntegerParameterOutputWithContext(context.Context) AnalysisParametersIntegerParameterOutput
}

type AnalysisParametersIntegerParameterArgs struct {
	// Display name for the analysis.
	//
	// The following arguments are optional:
	Name   pulumi.StringInput   `pulumi:"name"`
	Values pulumi.IntArrayInput `pulumi:"values"`
}

func (AnalysisParametersIntegerParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisParametersIntegerParameter)(nil)).Elem()
}

func (i AnalysisParametersIntegerParameterArgs) ToAnalysisParametersIntegerParameterOutput() AnalysisParametersIntegerParameterOutput {
	return i.ToAnalysisParametersIntegerParameterOutputWithContext(context.Background())
}

func (i AnalysisParametersIntegerParameterArgs) ToAnalysisParametersIntegerParameterOutputWithContext(ctx context.Context) AnalysisParametersIntegerParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisParametersIntegerParameterOutput)
}

// AnalysisParametersIntegerParameterArrayInput is an input type that accepts AnalysisParametersIntegerParameterArray and AnalysisParametersIntegerParameterArrayOutput values.
// You can construct a concrete instance of `AnalysisParametersIntegerParameterArrayInput` via:
//
//	AnalysisParametersIntegerParameterArray{ AnalysisParametersIntegerParameterArgs{...} }
type AnalysisParametersIntegerParameterArrayInput interface {
	pulumi.Input

	ToAnalysisParametersIntegerParameterArrayOutput() AnalysisParametersIntegerParameterArrayOutput
	ToAnalysisParametersIntegerParameterArrayOutputWithContext(context.Context) AnalysisParametersIntegerParameterArrayOutput
}

type AnalysisParametersIntegerParameterArray []AnalysisParametersIntegerParameterInput

func (AnalysisParametersIntegerParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalysisParametersIntegerParameter)(nil)).Elem()
}

func (i AnalysisParametersIntegerParameterArray) ToAnalysisParametersIntegerParameterArrayOutput() AnalysisParametersIntegerParameterArrayOutput {
	return i.ToAnalysisParametersIntegerParameterArrayOutputWithContext(context.Background())
}

func (i AnalysisParametersIntegerParameterArray) ToAnalysisParametersIntegerParameterArrayOutputWithContext(ctx context.Context) AnalysisParametersIntegerParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisParametersIntegerParameterArrayOutput)
}

type AnalysisParametersIntegerParameterOutput struct{ *pulumi.OutputState }

func (AnalysisParametersIntegerParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisParametersIntegerParameter)(nil)).Elem()
}

func (o AnalysisParametersIntegerParameterOutput) ToAnalysisParametersIntegerParameterOutput() AnalysisParametersIntegerParameterOutput {
	return o
}

func (o AnalysisParametersIntegerParameterOutput) ToAnalysisParametersIntegerParameterOutputWithContext(ctx context.Context) AnalysisParametersIntegerParameterOutput {
	return o
}

// Display name for the analysis.
//
// The following arguments are optional:
func (o AnalysisParametersIntegerParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AnalysisParametersIntegerParameter) string { return v.Name }).(pulumi.StringOutput)
}

func (o AnalysisParametersIntegerParameterOutput) Values() pulumi.IntArrayOutput {
	return o.ApplyT(func(v AnalysisParametersIntegerParameter) []int { return v.Values }).(pulumi.IntArrayOutput)
}

type AnalysisParametersIntegerParameterArrayOutput struct{ *pulumi.OutputState }

func (AnalysisParametersIntegerParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalysisParametersIntegerParameter)(nil)).Elem()
}

func (o AnalysisParametersIntegerParameterArrayOutput) ToAnalysisParametersIntegerParameterArrayOutput() AnalysisParametersIntegerParameterArrayOutput {
	return o
}

func (o AnalysisParametersIntegerParameterArrayOutput) ToAnalysisParametersIntegerParameterArrayOutputWithContext(ctx context.Context) AnalysisParametersIntegerParameterArrayOutput {
	return o
}

func (o AnalysisParametersIntegerParameterArrayOutput) Index(i pulumi.IntInput) AnalysisParametersIntegerParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AnalysisParametersIntegerParameter {
		return vs[0].([]AnalysisParametersIntegerParameter)[vs[1].(int)]
	}).(AnalysisParametersIntegerParameterOutput)
}

type AnalysisParametersStringParameter struct {
	// Display name for the analysis.
	//
	// The following arguments are optional:
	Name   string   `pulumi:"name"`
	Values []string `pulumi:"values"`
}

// AnalysisParametersStringParameterInput is an input type that accepts AnalysisParametersStringParameterArgs and AnalysisParametersStringParameterOutput values.
// You can construct a concrete instance of `AnalysisParametersStringParameterInput` via:
//
//	AnalysisParametersStringParameterArgs{...}
type AnalysisParametersStringParameterInput interface {
	pulumi.Input

	ToAnalysisParametersStringParameterOutput() AnalysisParametersStringParameterOutput
	ToAnalysisParametersStringParameterOutputWithContext(context.Context) AnalysisParametersStringParameterOutput
}

type AnalysisParametersStringParameterArgs struct {
	// Display name for the analysis.
	//
	// The following arguments are optional:
	Name   pulumi.StringInput      `pulumi:"name"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AnalysisParametersStringParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisParametersStringParameter)(nil)).Elem()
}

func (i AnalysisParametersStringParameterArgs) ToAnalysisParametersStringParameterOutput() AnalysisParametersStringParameterOutput {
	return i.ToAnalysisParametersStringParameterOutputWithContext(context.Background())
}

func (i AnalysisParametersStringParameterArgs) ToAnalysisParametersStringParameterOutputWithContext(ctx context.Context) AnalysisParametersStringParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisParametersStringParameterOutput)
}

// AnalysisParametersStringParameterArrayInput is an input type that accepts AnalysisParametersStringParameterArray and AnalysisParametersStringParameterArrayOutput values.
// You can construct a concrete instance of `AnalysisParametersStringParameterArrayInput` via:
//
//	AnalysisParametersStringParameterArray{ AnalysisParametersStringParameterArgs{...} }
type AnalysisParametersStringParameterArrayInput interface {
	pulumi.Input

	ToAnalysisParametersStringParameterArrayOutput() AnalysisParametersStringParameterArrayOutput
	ToAnalysisParametersStringParameterArrayOutputWithContext(context.Context) AnalysisParametersStringParameterArrayOutput
}

type AnalysisParametersStringParameterArray []AnalysisParametersStringParameterInput

func (AnalysisParametersStringParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalysisParametersStringParameter)(nil)).Elem()
}

func (i AnalysisParametersStringParameterArray) ToAnalysisParametersStringParameterArrayOutput() AnalysisParametersStringParameterArrayOutput {
	return i.ToAnalysisParametersStringParameterArrayOutputWithContext(context.Background())
}

func (i AnalysisParametersStringParameterArray) ToAnalysisParametersStringParameterArrayOutputWithContext(ctx context.Context) AnalysisParametersStringParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisParametersStringParameterArrayOutput)
}

type AnalysisParametersStringParameterOutput struct{ *pulumi.OutputState }

func (AnalysisParametersStringParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisParametersStringParameter)(nil)).Elem()
}

func (o AnalysisParametersStringParameterOutput) ToAnalysisParametersStringParameterOutput() AnalysisParametersStringParameterOutput {
	return o
}

func (o AnalysisParametersStringParameterOutput) ToAnalysisParametersStringParameterOutputWithContext(ctx context.Context) AnalysisParametersStringParameterOutput {
	return o
}

// Display name for the analysis.
//
// The following arguments are optional:
func (o AnalysisParametersStringParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AnalysisParametersStringParameter) string { return v.Name }).(pulumi.StringOutput)
}

func (o AnalysisParametersStringParameterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnalysisParametersStringParameter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AnalysisParametersStringParameterArrayOutput struct{ *pulumi.OutputState }

func (AnalysisParametersStringParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalysisParametersStringParameter)(nil)).Elem()
}

func (o AnalysisParametersStringParameterArrayOutput) ToAnalysisParametersStringParameterArrayOutput() AnalysisParametersStringParameterArrayOutput {
	return o
}

func (o AnalysisParametersStringParameterArrayOutput) ToAnalysisParametersStringParameterArrayOutputWithContext(ctx context.Context) AnalysisParametersStringParameterArrayOutput {
	return o
}

func (o AnalysisParametersStringParameterArrayOutput) Index(i pulumi.IntInput) AnalysisParametersStringParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AnalysisParametersStringParameter {
		return vs[0].([]AnalysisParametersStringParameter)[vs[1].(int)]
	}).(AnalysisParametersStringParameterOutput)
}

type AnalysisPermission struct {
	// List of IAM actions to grant or revoke permissions on.
	Actions []string `pulumi:"actions"`
	// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
	Principal string `pulumi:"principal"`
}

// AnalysisPermissionInput is an input type that accepts AnalysisPermissionArgs and AnalysisPermissionOutput values.
// You can construct a concrete instance of `AnalysisPermissionInput` via:
//
//	AnalysisPermissionArgs{...}
type AnalysisPermissionInput interface {
	pulumi.Input

	ToAnalysisPermissionOutput() AnalysisPermissionOutput
	ToAnalysisPermissionOutputWithContext(context.Context) AnalysisPermissionOutput
}

type AnalysisPermissionArgs struct {
	// List of IAM actions to grant or revoke permissions on.
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
	Principal pulumi.StringInput `pulumi:"principal"`
}

func (AnalysisPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisPermission)(nil)).Elem()
}

func (i AnalysisPermissionArgs) ToAnalysisPermissionOutput() AnalysisPermissionOutput {
	return i.ToAnalysisPermissionOutputWithContext(context.Background())
}

func (i AnalysisPermissionArgs) ToAnalysisPermissionOutputWithContext(ctx context.Context) AnalysisPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisPermissionOutput)
}

// AnalysisPermissionArrayInput is an input type that accepts AnalysisPermissionArray and AnalysisPermissionArrayOutput values.
// You can construct a concrete instance of `AnalysisPermissionArrayInput` via:
//
//	AnalysisPermissionArray{ AnalysisPermissionArgs{...} }
type AnalysisPermissionArrayInput interface {
	pulumi.Input

	ToAnalysisPermissionArrayOutput() AnalysisPermissionArrayOutput
	ToAnalysisPermissionArrayOutputWithContext(context.Context) AnalysisPermissionArrayOutput
}

type AnalysisPermissionArray []AnalysisPermissionInput

func (AnalysisPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalysisPermission)(nil)).Elem()
}

func (i AnalysisPermissionArray) ToAnalysisPermissionArrayOutput() AnalysisPermissionArrayOutput {
	return i.ToAnalysisPermissionArrayOutputWithContext(context.Background())
}

func (i AnalysisPermissionArray) ToAnalysisPermissionArrayOutputWithContext(ctx context.Context) AnalysisPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisPermissionArrayOutput)
}

type AnalysisPermissionOutput struct{ *pulumi.OutputState }

func (AnalysisPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisPermission)(nil)).Elem()
}

func (o AnalysisPermissionOutput) ToAnalysisPermissionOutput() AnalysisPermissionOutput {
	return o
}

func (o AnalysisPermissionOutput) ToAnalysisPermissionOutputWithContext(ctx context.Context) AnalysisPermissionOutput {
	return o
}

// List of IAM actions to grant or revoke permissions on.
func (o AnalysisPermissionOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnalysisPermission) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
func (o AnalysisPermissionOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v AnalysisPermission) string { return v.Principal }).(pulumi.StringOutput)
}

type AnalysisPermissionArrayOutput struct{ *pulumi.OutputState }

func (AnalysisPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalysisPermission)(nil)).Elem()
}

func (o AnalysisPermissionArrayOutput) ToAnalysisPermissionArrayOutput() AnalysisPermissionArrayOutput {
	return o
}

func (o AnalysisPermissionArrayOutput) ToAnalysisPermissionArrayOutputWithContext(ctx context.Context) AnalysisPermissionArrayOutput {
	return o
}

func (o AnalysisPermissionArrayOutput) Index(i pulumi.IntInput) AnalysisPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AnalysisPermission {
		return vs[0].([]AnalysisPermission)[vs[1].(int)]
	}).(AnalysisPermissionOutput)
}

type AnalysisSourceEntity struct {
	// The source template. See source_template.
	SourceTemplate *AnalysisSourceEntitySourceTemplate `pulumi:"sourceTemplate"`
}

// AnalysisSourceEntityInput is an input type that accepts AnalysisSourceEntityArgs and AnalysisSourceEntityOutput values.
// You can construct a concrete instance of `AnalysisSourceEntityInput` via:
//
//	AnalysisSourceEntityArgs{...}
type AnalysisSourceEntityInput interface {
	pulumi.Input

	ToAnalysisSourceEntityOutput() AnalysisSourceEntityOutput
	ToAnalysisSourceEntityOutputWithContext(context.Context) AnalysisSourceEntityOutput
}

type AnalysisSourceEntityArgs struct {
	// The source template. See source_template.
	SourceTemplate AnalysisSourceEntitySourceTemplatePtrInput `pulumi:"sourceTemplate"`
}

func (AnalysisSourceEntityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisSourceEntity)(nil)).Elem()
}

func (i AnalysisSourceEntityArgs) ToAnalysisSourceEntityOutput() AnalysisSourceEntityOutput {
	return i.ToAnalysisSourceEntityOutputWithContext(context.Background())
}

func (i AnalysisSourceEntityArgs) ToAnalysisSourceEntityOutputWithContext(ctx context.Context) AnalysisSourceEntityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisSourceEntityOutput)
}

func (i AnalysisSourceEntityArgs) ToAnalysisSourceEntityPtrOutput() AnalysisSourceEntityPtrOutput {
	return i.ToAnalysisSourceEntityPtrOutputWithContext(context.Background())
}

func (i AnalysisSourceEntityArgs) ToAnalysisSourceEntityPtrOutputWithContext(ctx context.Context) AnalysisSourceEntityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisSourceEntityOutput).ToAnalysisSourceEntityPtrOutputWithContext(ctx)
}

// AnalysisSourceEntityPtrInput is an input type that accepts AnalysisSourceEntityArgs, AnalysisSourceEntityPtr and AnalysisSourceEntityPtrOutput values.
// You can construct a concrete instance of `AnalysisSourceEntityPtrInput` via:
//
//	        AnalysisSourceEntityArgs{...}
//
//	or:
//
//	        nil
type AnalysisSourceEntityPtrInput interface {
	pulumi.Input

	ToAnalysisSourceEntityPtrOutput() AnalysisSourceEntityPtrOutput
	ToAnalysisSourceEntityPtrOutputWithContext(context.Context) AnalysisSourceEntityPtrOutput
}

type analysisSourceEntityPtrType AnalysisSourceEntityArgs

func AnalysisSourceEntityPtr(v *AnalysisSourceEntityArgs) AnalysisSourceEntityPtrInput {
	return (*analysisSourceEntityPtrType)(v)
}

func (*analysisSourceEntityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalysisSourceEntity)(nil)).Elem()
}

func (i *analysisSourceEntityPtrType) ToAnalysisSourceEntityPtrOutput() AnalysisSourceEntityPtrOutput {
	return i.ToAnalysisSourceEntityPtrOutputWithContext(context.Background())
}

func (i *analysisSourceEntityPtrType) ToAnalysisSourceEntityPtrOutputWithContext(ctx context.Context) AnalysisSourceEntityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisSourceEntityPtrOutput)
}

type AnalysisSourceEntityOutput struct{ *pulumi.OutputState }

func (AnalysisSourceEntityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisSourceEntity)(nil)).Elem()
}

func (o AnalysisSourceEntityOutput) ToAnalysisSourceEntityOutput() AnalysisSourceEntityOutput {
	return o
}

func (o AnalysisSourceEntityOutput) ToAnalysisSourceEntityOutputWithContext(ctx context.Context) AnalysisSourceEntityOutput {
	return o
}

func (o AnalysisSourceEntityOutput) ToAnalysisSourceEntityPtrOutput() AnalysisSourceEntityPtrOutput {
	return o.ToAnalysisSourceEntityPtrOutputWithContext(context.Background())
}

func (o AnalysisSourceEntityOutput) ToAnalysisSourceEntityPtrOutputWithContext(ctx context.Context) AnalysisSourceEntityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnalysisSourceEntity) *AnalysisSourceEntity {
		return &v
	}).(AnalysisSourceEntityPtrOutput)
}

// The source template. See source_template.
func (o AnalysisSourceEntityOutput) SourceTemplate() AnalysisSourceEntitySourceTemplatePtrOutput {
	return o.ApplyT(func(v AnalysisSourceEntity) *AnalysisSourceEntitySourceTemplate { return v.SourceTemplate }).(AnalysisSourceEntitySourceTemplatePtrOutput)
}

type AnalysisSourceEntityPtrOutput struct{ *pulumi.OutputState }

func (AnalysisSourceEntityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalysisSourceEntity)(nil)).Elem()
}

func (o AnalysisSourceEntityPtrOutput) ToAnalysisSourceEntityPtrOutput() AnalysisSourceEntityPtrOutput {
	return o
}

func (o AnalysisSourceEntityPtrOutput) ToAnalysisSourceEntityPtrOutputWithContext(ctx context.Context) AnalysisSourceEntityPtrOutput {
	return o
}

func (o AnalysisSourceEntityPtrOutput) Elem() AnalysisSourceEntityOutput {
	return o.ApplyT(func(v *AnalysisSourceEntity) AnalysisSourceEntity {
		if v != nil {
			return *v
		}
		var ret AnalysisSourceEntity
		return ret
	}).(AnalysisSourceEntityOutput)
}

// The source template. See source_template.
func (o AnalysisSourceEntityPtrOutput) SourceTemplate() AnalysisSourceEntitySourceTemplatePtrOutput {
	return o.ApplyT(func(v *AnalysisSourceEntity) *AnalysisSourceEntitySourceTemplate {
		if v == nil {
			return nil
		}
		return v.SourceTemplate
	}).(AnalysisSourceEntitySourceTemplatePtrOutput)
}

type AnalysisSourceEntitySourceTemplate struct {
	// The Amazon Resource Name (ARN) of the resource.
	Arn string `pulumi:"arn"`
	// List of dataset references. See data_set_references.
	DataSetReferences []AnalysisSourceEntitySourceTemplateDataSetReference `pulumi:"dataSetReferences"`
}

// AnalysisSourceEntitySourceTemplateInput is an input type that accepts AnalysisSourceEntitySourceTemplateArgs and AnalysisSourceEntitySourceTemplateOutput values.
// You can construct a concrete instance of `AnalysisSourceEntitySourceTemplateInput` via:
//
//	AnalysisSourceEntitySourceTemplateArgs{...}
type AnalysisSourceEntitySourceTemplateInput interface {
	pulumi.Input

	ToAnalysisSourceEntitySourceTemplateOutput() AnalysisSourceEntitySourceTemplateOutput
	ToAnalysisSourceEntitySourceTemplateOutputWithContext(context.Context) AnalysisSourceEntitySourceTemplateOutput
}

type AnalysisSourceEntitySourceTemplateArgs struct {
	// The Amazon Resource Name (ARN) of the resource.
	Arn pulumi.StringInput `pulumi:"arn"`
	// List of dataset references. See data_set_references.
	DataSetReferences AnalysisSourceEntitySourceTemplateDataSetReferenceArrayInput `pulumi:"dataSetReferences"`
}

func (AnalysisSourceEntitySourceTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisSourceEntitySourceTemplate)(nil)).Elem()
}

func (i AnalysisSourceEntitySourceTemplateArgs) ToAnalysisSourceEntitySourceTemplateOutput() AnalysisSourceEntitySourceTemplateOutput {
	return i.ToAnalysisSourceEntitySourceTemplateOutputWithContext(context.Background())
}

func (i AnalysisSourceEntitySourceTemplateArgs) ToAnalysisSourceEntitySourceTemplateOutputWithContext(ctx context.Context) AnalysisSourceEntitySourceTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisSourceEntitySourceTemplateOutput)
}

func (i AnalysisSourceEntitySourceTemplateArgs) ToAnalysisSourceEntitySourceTemplatePtrOutput() AnalysisSourceEntitySourceTemplatePtrOutput {
	return i.ToAnalysisSourceEntitySourceTemplatePtrOutputWithContext(context.Background())
}

func (i AnalysisSourceEntitySourceTemplateArgs) ToAnalysisSourceEntitySourceTemplatePtrOutputWithContext(ctx context.Context) AnalysisSourceEntitySourceTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisSourceEntitySourceTemplateOutput).ToAnalysisSourceEntitySourceTemplatePtrOutputWithContext(ctx)
}

// AnalysisSourceEntitySourceTemplatePtrInput is an input type that accepts AnalysisSourceEntitySourceTemplateArgs, AnalysisSourceEntitySourceTemplatePtr and AnalysisSourceEntitySourceTemplatePtrOutput values.
// You can construct a concrete instance of `AnalysisSourceEntitySourceTemplatePtrInput` via:
//
//	        AnalysisSourceEntitySourceTemplateArgs{...}
//
//	or:
//
//	        nil
type AnalysisSourceEntitySourceTemplatePtrInput interface {
	pulumi.Input

	ToAnalysisSourceEntitySourceTemplatePtrOutput() AnalysisSourceEntitySourceTemplatePtrOutput
	ToAnalysisSourceEntitySourceTemplatePtrOutputWithContext(context.Context) AnalysisSourceEntitySourceTemplatePtrOutput
}

type analysisSourceEntitySourceTemplatePtrType AnalysisSourceEntitySourceTemplateArgs

func AnalysisSourceEntitySourceTemplatePtr(v *AnalysisSourceEntitySourceTemplateArgs) AnalysisSourceEntitySourceTemplatePtrInput {
	return (*analysisSourceEntitySourceTemplatePtrType)(v)
}

func (*analysisSourceEntitySourceTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalysisSourceEntitySourceTemplate)(nil)).Elem()
}

func (i *analysisSourceEntitySourceTemplatePtrType) ToAnalysisSourceEntitySourceTemplatePtrOutput() AnalysisSourceEntitySourceTemplatePtrOutput {
	return i.ToAnalysisSourceEntitySourceTemplatePtrOutputWithContext(context.Background())
}

func (i *analysisSourceEntitySourceTemplatePtrType) ToAnalysisSourceEntitySourceTemplatePtrOutputWithContext(ctx context.Context) AnalysisSourceEntitySourceTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisSourceEntitySourceTemplatePtrOutput)
}

type AnalysisSourceEntitySourceTemplateOutput struct{ *pulumi.OutputState }

func (AnalysisSourceEntitySourceTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisSourceEntitySourceTemplate)(nil)).Elem()
}

func (o AnalysisSourceEntitySourceTemplateOutput) ToAnalysisSourceEntitySourceTemplateOutput() AnalysisSourceEntitySourceTemplateOutput {
	return o
}

func (o AnalysisSourceEntitySourceTemplateOutput) ToAnalysisSourceEntitySourceTemplateOutputWithContext(ctx context.Context) AnalysisSourceEntitySourceTemplateOutput {
	return o
}

func (o AnalysisSourceEntitySourceTemplateOutput) ToAnalysisSourceEntitySourceTemplatePtrOutput() AnalysisSourceEntitySourceTemplatePtrOutput {
	return o.ToAnalysisSourceEntitySourceTemplatePtrOutputWithContext(context.Background())
}

func (o AnalysisSourceEntitySourceTemplateOutput) ToAnalysisSourceEntitySourceTemplatePtrOutputWithContext(ctx context.Context) AnalysisSourceEntitySourceTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnalysisSourceEntitySourceTemplate) *AnalysisSourceEntitySourceTemplate {
		return &v
	}).(AnalysisSourceEntitySourceTemplatePtrOutput)
}

// The Amazon Resource Name (ARN) of the resource.
func (o AnalysisSourceEntitySourceTemplateOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v AnalysisSourceEntitySourceTemplate) string { return v.Arn }).(pulumi.StringOutput)
}

// List of dataset references. See data_set_references.
func (o AnalysisSourceEntitySourceTemplateOutput) DataSetReferences() AnalysisSourceEntitySourceTemplateDataSetReferenceArrayOutput {
	return o.ApplyT(func(v AnalysisSourceEntitySourceTemplate) []AnalysisSourceEntitySourceTemplateDataSetReference {
		return v.DataSetReferences
	}).(AnalysisSourceEntitySourceTemplateDataSetReferenceArrayOutput)
}

type AnalysisSourceEntitySourceTemplatePtrOutput struct{ *pulumi.OutputState }

func (AnalysisSourceEntitySourceTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalysisSourceEntitySourceTemplate)(nil)).Elem()
}

func (o AnalysisSourceEntitySourceTemplatePtrOutput) ToAnalysisSourceEntitySourceTemplatePtrOutput() AnalysisSourceEntitySourceTemplatePtrOutput {
	return o
}

func (o AnalysisSourceEntitySourceTemplatePtrOutput) ToAnalysisSourceEntitySourceTemplatePtrOutputWithContext(ctx context.Context) AnalysisSourceEntitySourceTemplatePtrOutput {
	return o
}

func (o AnalysisSourceEntitySourceTemplatePtrOutput) Elem() AnalysisSourceEntitySourceTemplateOutput {
	return o.ApplyT(func(v *AnalysisSourceEntitySourceTemplate) AnalysisSourceEntitySourceTemplate {
		if v != nil {
			return *v
		}
		var ret AnalysisSourceEntitySourceTemplate
		return ret
	}).(AnalysisSourceEntitySourceTemplateOutput)
}

// The Amazon Resource Name (ARN) of the resource.
func (o AnalysisSourceEntitySourceTemplatePtrOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnalysisSourceEntitySourceTemplate) *string {
		if v == nil {
			return nil
		}
		return &v.Arn
	}).(pulumi.StringPtrOutput)
}

// List of dataset references. See data_set_references.
func (o AnalysisSourceEntitySourceTemplatePtrOutput) DataSetReferences() AnalysisSourceEntitySourceTemplateDataSetReferenceArrayOutput {
	return o.ApplyT(func(v *AnalysisSourceEntitySourceTemplate) []AnalysisSourceEntitySourceTemplateDataSetReference {
		if v == nil {
			return nil
		}
		return v.DataSetReferences
	}).(AnalysisSourceEntitySourceTemplateDataSetReferenceArrayOutput)
}

type AnalysisSourceEntitySourceTemplateDataSetReference struct {
	// Dataset Amazon Resource Name (ARN).
	DataSetArn string `pulumi:"dataSetArn"`
	// Dataset placeholder.
	DataSetPlaceholder string `pulumi:"dataSetPlaceholder"`
}

// AnalysisSourceEntitySourceTemplateDataSetReferenceInput is an input type that accepts AnalysisSourceEntitySourceTemplateDataSetReferenceArgs and AnalysisSourceEntitySourceTemplateDataSetReferenceOutput values.
// You can construct a concrete instance of `AnalysisSourceEntitySourceTemplateDataSetReferenceInput` via:
//
//	AnalysisSourceEntitySourceTemplateDataSetReferenceArgs{...}
type AnalysisSourceEntitySourceTemplateDataSetReferenceInput interface {
	pulumi.Input

	ToAnalysisSourceEntitySourceTemplateDataSetReferenceOutput() AnalysisSourceEntitySourceTemplateDataSetReferenceOutput
	ToAnalysisSourceEntitySourceTemplateDataSetReferenceOutputWithContext(context.Context) AnalysisSourceEntitySourceTemplateDataSetReferenceOutput
}

type AnalysisSourceEntitySourceTemplateDataSetReferenceArgs struct {
	// Dataset Amazon Resource Name (ARN).
	DataSetArn pulumi.StringInput `pulumi:"dataSetArn"`
	// Dataset placeholder.
	DataSetPlaceholder pulumi.StringInput `pulumi:"dataSetPlaceholder"`
}

func (AnalysisSourceEntitySourceTemplateDataSetReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisSourceEntitySourceTemplateDataSetReference)(nil)).Elem()
}

func (i AnalysisSourceEntitySourceTemplateDataSetReferenceArgs) ToAnalysisSourceEntitySourceTemplateDataSetReferenceOutput() AnalysisSourceEntitySourceTemplateDataSetReferenceOutput {
	return i.ToAnalysisSourceEntitySourceTemplateDataSetReferenceOutputWithContext(context.Background())
}

func (i AnalysisSourceEntitySourceTemplateDataSetReferenceArgs) ToAnalysisSourceEntitySourceTemplateDataSetReferenceOutputWithContext(ctx context.Context) AnalysisSourceEntitySourceTemplateDataSetReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisSourceEntitySourceTemplateDataSetReferenceOutput)
}

// AnalysisSourceEntitySourceTemplateDataSetReferenceArrayInput is an input type that accepts AnalysisSourceEntitySourceTemplateDataSetReferenceArray and AnalysisSourceEntitySourceTemplateDataSetReferenceArrayOutput values.
// You can construct a concrete instance of `AnalysisSourceEntitySourceTemplateDataSetReferenceArrayInput` via:
//
//	AnalysisSourceEntitySourceTemplateDataSetReferenceArray{ AnalysisSourceEntitySourceTemplateDataSetReferenceArgs{...} }
type AnalysisSourceEntitySourceTemplateDataSetReferenceArrayInput interface {
	pulumi.Input

	ToAnalysisSourceEntitySourceTemplateDataSetReferenceArrayOutput() AnalysisSourceEntitySourceTemplateDataSetReferenceArrayOutput
	ToAnalysisSourceEntitySourceTemplateDataSetReferenceArrayOutputWithContext(context.Context) AnalysisSourceEntitySourceTemplateDataSetReferenceArrayOutput
}

type AnalysisSourceEntitySourceTemplateDataSetReferenceArray []AnalysisSourceEntitySourceTemplateDataSetReferenceInput

func (AnalysisSourceEntitySourceTemplateDataSetReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalysisSourceEntitySourceTemplateDataSetReference)(nil)).Elem()
}

func (i AnalysisSourceEntitySourceTemplateDataSetReferenceArray) ToAnalysisSourceEntitySourceTemplateDataSetReferenceArrayOutput() AnalysisSourceEntitySourceTemplateDataSetReferenceArrayOutput {
	return i.ToAnalysisSourceEntitySourceTemplateDataSetReferenceArrayOutputWithContext(context.Background())
}

func (i AnalysisSourceEntitySourceTemplateDataSetReferenceArray) ToAnalysisSourceEntitySourceTemplateDataSetReferenceArrayOutputWithContext(ctx context.Context) AnalysisSourceEntitySourceTemplateDataSetReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisSourceEntitySourceTemplateDataSetReferenceArrayOutput)
}

type AnalysisSourceEntitySourceTemplateDataSetReferenceOutput struct{ *pulumi.OutputState }

func (AnalysisSourceEntitySourceTemplateDataSetReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisSourceEntitySourceTemplateDataSetReference)(nil)).Elem()
}

func (o AnalysisSourceEntitySourceTemplateDataSetReferenceOutput) ToAnalysisSourceEntitySourceTemplateDataSetReferenceOutput() AnalysisSourceEntitySourceTemplateDataSetReferenceOutput {
	return o
}

func (o AnalysisSourceEntitySourceTemplateDataSetReferenceOutput) ToAnalysisSourceEntitySourceTemplateDataSetReferenceOutputWithContext(ctx context.Context) AnalysisSourceEntitySourceTemplateDataSetReferenceOutput {
	return o
}

// Dataset Amazon Resource Name (ARN).
func (o AnalysisSourceEntitySourceTemplateDataSetReferenceOutput) DataSetArn() pulumi.StringOutput {
	return o.ApplyT(func(v AnalysisSourceEntitySourceTemplateDataSetReference) string { return v.DataSetArn }).(pulumi.StringOutput)
}

// Dataset placeholder.
func (o AnalysisSourceEntitySourceTemplateDataSetReferenceOutput) DataSetPlaceholder() pulumi.StringOutput {
	return o.ApplyT(func(v AnalysisSourceEntitySourceTemplateDataSetReference) string { return v.DataSetPlaceholder }).(pulumi.StringOutput)
}

type AnalysisSourceEntitySourceTemplateDataSetReferenceArrayOutput struct{ *pulumi.OutputState }

func (AnalysisSourceEntitySourceTemplateDataSetReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalysisSourceEntitySourceTemplateDataSetReference)(nil)).Elem()
}

func (o AnalysisSourceEntitySourceTemplateDataSetReferenceArrayOutput) ToAnalysisSourceEntitySourceTemplateDataSetReferenceArrayOutput() AnalysisSourceEntitySourceTemplateDataSetReferenceArrayOutput {
	return o
}

func (o AnalysisSourceEntitySourceTemplateDataSetReferenceArrayOutput) ToAnalysisSourceEntitySourceTemplateDataSetReferenceArrayOutputWithContext(ctx context.Context) AnalysisSourceEntitySourceTemplateDataSetReferenceArrayOutput {
	return o
}

func (o AnalysisSourceEntitySourceTemplateDataSetReferenceArrayOutput) Index(i pulumi.IntInput) AnalysisSourceEntitySourceTemplateDataSetReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AnalysisSourceEntitySourceTemplateDataSetReference {
		return vs[0].([]AnalysisSourceEntitySourceTemplateDataSetReference)[vs[1].(int)]
	}).(AnalysisSourceEntitySourceTemplateDataSetReferenceOutput)
}

type DashboardDashboardPublishOptions struct {
	// Ad hoc (one-time) filtering option. See ad_hoc_filtering_option.
	AdHocFilteringOption *DashboardDashboardPublishOptionsAdHocFilteringOption `pulumi:"adHocFilteringOption"`
	// The drill-down options of data points in a dashboard. See data_point_drill_up_down_option.
	DataPointDrillUpDownOption *DashboardDashboardPublishOptionsDataPointDrillUpDownOption `pulumi:"dataPointDrillUpDownOption"`
	// The data point menu label options of a dashboard. See data_point_menu_label_option.
	DataPointMenuLabelOption *DashboardDashboardPublishOptionsDataPointMenuLabelOption `pulumi:"dataPointMenuLabelOption"`
	// The data point tool tip options of a dashboard. See data_point_tooltip_option.
	DataPointTooltipOption *DashboardDashboardPublishOptionsDataPointTooltipOption `pulumi:"dataPointTooltipOption"`
	// Export to .csv option. See export_to_csv_option.
	ExportToCsvOption *DashboardDashboardPublishOptionsExportToCsvOption `pulumi:"exportToCsvOption"`
	// Determines if hidden fields are exported with a dashboard. See export_with_hidden_fields_option.
	ExportWithHiddenFieldsOption *DashboardDashboardPublishOptionsExportWithHiddenFieldsOption `pulumi:"exportWithHiddenFieldsOption"`
	// Sheet controls option. See sheet_controls_option.
	SheetControlsOption *DashboardDashboardPublishOptionsSheetControlsOption `pulumi:"sheetControlsOption"`
	// The sheet layout maximization options of a dashboard. See sheet_layout_element_maximization_option.
	SheetLayoutElementMaximizationOption *DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOption `pulumi:"sheetLayoutElementMaximizationOption"`
	// The axis sort options of a dashboard. See visual_axis_sort_option.
	VisualAxisSortOption *DashboardDashboardPublishOptionsVisualAxisSortOption `pulumi:"visualAxisSortOption"`
	// The menu options of a visual in a dashboard. See visual_menu_option.
	VisualMenuOption *DashboardDashboardPublishOptionsVisualMenuOption `pulumi:"visualMenuOption"`
}

// DashboardDashboardPublishOptionsInput is an input type that accepts DashboardDashboardPublishOptionsArgs and DashboardDashboardPublishOptionsOutput values.
// You can construct a concrete instance of `DashboardDashboardPublishOptionsInput` via:
//
//	DashboardDashboardPublishOptionsArgs{...}
type DashboardDashboardPublishOptionsInput interface {
	pulumi.Input

	ToDashboardDashboardPublishOptionsOutput() DashboardDashboardPublishOptionsOutput
	ToDashboardDashboardPublishOptionsOutputWithContext(context.Context) DashboardDashboardPublishOptionsOutput
}

type DashboardDashboardPublishOptionsArgs struct {
	// Ad hoc (one-time) filtering option. See ad_hoc_filtering_option.
	AdHocFilteringOption DashboardDashboardPublishOptionsAdHocFilteringOptionPtrInput `pulumi:"adHocFilteringOption"`
	// The drill-down options of data points in a dashboard. See data_point_drill_up_down_option.
	DataPointDrillUpDownOption DashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrInput `pulumi:"dataPointDrillUpDownOption"`
	// The data point menu label options of a dashboard. See data_point_menu_label_option.
	DataPointMenuLabelOption DashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrInput `pulumi:"dataPointMenuLabelOption"`
	// The data point tool tip options of a dashboard. See data_point_tooltip_option.
	DataPointTooltipOption DashboardDashboardPublishOptionsDataPointTooltipOptionPtrInput `pulumi:"dataPointTooltipOption"`
	// Export to .csv option. See export_to_csv_option.
	ExportToCsvOption DashboardDashboardPublishOptionsExportToCsvOptionPtrInput `pulumi:"exportToCsvOption"`
	// Determines if hidden fields are exported with a dashboard. See export_with_hidden_fields_option.
	ExportWithHiddenFieldsOption DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrInput `pulumi:"exportWithHiddenFieldsOption"`
	// Sheet controls option. See sheet_controls_option.
	SheetControlsOption DashboardDashboardPublishOptionsSheetControlsOptionPtrInput `pulumi:"sheetControlsOption"`
	// The sheet layout maximization options of a dashboard. See sheet_layout_element_maximization_option.
	SheetLayoutElementMaximizationOption DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrInput `pulumi:"sheetLayoutElementMaximizationOption"`
	// The axis sort options of a dashboard. See visual_axis_sort_option.
	VisualAxisSortOption DashboardDashboardPublishOptionsVisualAxisSortOptionPtrInput `pulumi:"visualAxisSortOption"`
	// The menu options of a visual in a dashboard. See visual_menu_option.
	VisualMenuOption DashboardDashboardPublishOptionsVisualMenuOptionPtrInput `pulumi:"visualMenuOption"`
}

func (DashboardDashboardPublishOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptions)(nil)).Elem()
}

func (i DashboardDashboardPublishOptionsArgs) ToDashboardDashboardPublishOptionsOutput() DashboardDashboardPublishOptionsOutput {
	return i.ToDashboardDashboardPublishOptionsOutputWithContext(context.Background())
}

func (i DashboardDashboardPublishOptionsArgs) ToDashboardDashboardPublishOptionsOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsOutput)
}

func (i DashboardDashboardPublishOptionsArgs) ToDashboardDashboardPublishOptionsPtrOutput() DashboardDashboardPublishOptionsPtrOutput {
	return i.ToDashboardDashboardPublishOptionsPtrOutputWithContext(context.Background())
}

func (i DashboardDashboardPublishOptionsArgs) ToDashboardDashboardPublishOptionsPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsOutput).ToDashboardDashboardPublishOptionsPtrOutputWithContext(ctx)
}

// DashboardDashboardPublishOptionsPtrInput is an input type that accepts DashboardDashboardPublishOptionsArgs, DashboardDashboardPublishOptionsPtr and DashboardDashboardPublishOptionsPtrOutput values.
// You can construct a concrete instance of `DashboardDashboardPublishOptionsPtrInput` via:
//
//	        DashboardDashboardPublishOptionsArgs{...}
//
//	or:
//
//	        nil
type DashboardDashboardPublishOptionsPtrInput interface {
	pulumi.Input

	ToDashboardDashboardPublishOptionsPtrOutput() DashboardDashboardPublishOptionsPtrOutput
	ToDashboardDashboardPublishOptionsPtrOutputWithContext(context.Context) DashboardDashboardPublishOptionsPtrOutput
}

type dashboardDashboardPublishOptionsPtrType DashboardDashboardPublishOptionsArgs

func DashboardDashboardPublishOptionsPtr(v *DashboardDashboardPublishOptionsArgs) DashboardDashboardPublishOptionsPtrInput {
	return (*dashboardDashboardPublishOptionsPtrType)(v)
}

func (*dashboardDashboardPublishOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardDashboardPublishOptions)(nil)).Elem()
}

func (i *dashboardDashboardPublishOptionsPtrType) ToDashboardDashboardPublishOptionsPtrOutput() DashboardDashboardPublishOptionsPtrOutput {
	return i.ToDashboardDashboardPublishOptionsPtrOutputWithContext(context.Background())
}

func (i *dashboardDashboardPublishOptionsPtrType) ToDashboardDashboardPublishOptionsPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsPtrOutput)
}

type DashboardDashboardPublishOptionsOutput struct{ *pulumi.OutputState }

func (DashboardDashboardPublishOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptions)(nil)).Elem()
}

func (o DashboardDashboardPublishOptionsOutput) ToDashboardDashboardPublishOptionsOutput() DashboardDashboardPublishOptionsOutput {
	return o
}

func (o DashboardDashboardPublishOptionsOutput) ToDashboardDashboardPublishOptionsOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsOutput {
	return o
}

func (o DashboardDashboardPublishOptionsOutput) ToDashboardDashboardPublishOptionsPtrOutput() DashboardDashboardPublishOptionsPtrOutput {
	return o.ToDashboardDashboardPublishOptionsPtrOutputWithContext(context.Background())
}

func (o DashboardDashboardPublishOptionsOutput) ToDashboardDashboardPublishOptionsPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardDashboardPublishOptions) *DashboardDashboardPublishOptions {
		return &v
	}).(DashboardDashboardPublishOptionsPtrOutput)
}

// Ad hoc (one-time) filtering option. See ad_hoc_filtering_option.
func (o DashboardDashboardPublishOptionsOutput) AdHocFilteringOption() DashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutput {
	return o.ApplyT(func(v DashboardDashboardPublishOptions) *DashboardDashboardPublishOptionsAdHocFilteringOption {
		return v.AdHocFilteringOption
	}).(DashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutput)
}

// The drill-down options of data points in a dashboard. See data_point_drill_up_down_option.
func (o DashboardDashboardPublishOptionsOutput) DataPointDrillUpDownOption() DashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutput {
	return o.ApplyT(func(v DashboardDashboardPublishOptions) *DashboardDashboardPublishOptionsDataPointDrillUpDownOption {
		return v.DataPointDrillUpDownOption
	}).(DashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutput)
}

// The data point menu label options of a dashboard. See data_point_menu_label_option.
func (o DashboardDashboardPublishOptionsOutput) DataPointMenuLabelOption() DashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutput {
	return o.ApplyT(func(v DashboardDashboardPublishOptions) *DashboardDashboardPublishOptionsDataPointMenuLabelOption {
		return v.DataPointMenuLabelOption
	}).(DashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutput)
}

// The data point tool tip options of a dashboard. See data_point_tooltip_option.
func (o DashboardDashboardPublishOptionsOutput) DataPointTooltipOption() DashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutput {
	return o.ApplyT(func(v DashboardDashboardPublishOptions) *DashboardDashboardPublishOptionsDataPointTooltipOption {
		return v.DataPointTooltipOption
	}).(DashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutput)
}

// Export to .csv option. See export_to_csv_option.
func (o DashboardDashboardPublishOptionsOutput) ExportToCsvOption() DashboardDashboardPublishOptionsExportToCsvOptionPtrOutput {
	return o.ApplyT(func(v DashboardDashboardPublishOptions) *DashboardDashboardPublishOptionsExportToCsvOption {
		return v.ExportToCsvOption
	}).(DashboardDashboardPublishOptionsExportToCsvOptionPtrOutput)
}

// Determines if hidden fields are exported with a dashboard. See export_with_hidden_fields_option.
func (o DashboardDashboardPublishOptionsOutput) ExportWithHiddenFieldsOption() DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutput {
	return o.ApplyT(func(v DashboardDashboardPublishOptions) *DashboardDashboardPublishOptionsExportWithHiddenFieldsOption {
		return v.ExportWithHiddenFieldsOption
	}).(DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutput)
}

// Sheet controls option. See sheet_controls_option.
func (o DashboardDashboardPublishOptionsOutput) SheetControlsOption() DashboardDashboardPublishOptionsSheetControlsOptionPtrOutput {
	return o.ApplyT(func(v DashboardDashboardPublishOptions) *DashboardDashboardPublishOptionsSheetControlsOption {
		return v.SheetControlsOption
	}).(DashboardDashboardPublishOptionsSheetControlsOptionPtrOutput)
}

// The sheet layout maximization options of a dashboard. See sheet_layout_element_maximization_option.
func (o DashboardDashboardPublishOptionsOutput) SheetLayoutElementMaximizationOption() DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutput {
	return o.ApplyT(func(v DashboardDashboardPublishOptions) *DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOption {
		return v.SheetLayoutElementMaximizationOption
	}).(DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutput)
}

// The axis sort options of a dashboard. See visual_axis_sort_option.
func (o DashboardDashboardPublishOptionsOutput) VisualAxisSortOption() DashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutput {
	return o.ApplyT(func(v DashboardDashboardPublishOptions) *DashboardDashboardPublishOptionsVisualAxisSortOption {
		return v.VisualAxisSortOption
	}).(DashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutput)
}

// The menu options of a visual in a dashboard. See visual_menu_option.
func (o DashboardDashboardPublishOptionsOutput) VisualMenuOption() DashboardDashboardPublishOptionsVisualMenuOptionPtrOutput {
	return o.ApplyT(func(v DashboardDashboardPublishOptions) *DashboardDashboardPublishOptionsVisualMenuOption {
		return v.VisualMenuOption
	}).(DashboardDashboardPublishOptionsVisualMenuOptionPtrOutput)
}

type DashboardDashboardPublishOptionsPtrOutput struct{ *pulumi.OutputState }

func (DashboardDashboardPublishOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardDashboardPublishOptions)(nil)).Elem()
}

func (o DashboardDashboardPublishOptionsPtrOutput) ToDashboardDashboardPublishOptionsPtrOutput() DashboardDashboardPublishOptionsPtrOutput {
	return o
}

func (o DashboardDashboardPublishOptionsPtrOutput) ToDashboardDashboardPublishOptionsPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsPtrOutput {
	return o
}

func (o DashboardDashboardPublishOptionsPtrOutput) Elem() DashboardDashboardPublishOptionsOutput {
	return o.ApplyT(func(v *DashboardDashboardPublishOptions) DashboardDashboardPublishOptions {
		if v != nil {
			return *v
		}
		var ret DashboardDashboardPublishOptions
		return ret
	}).(DashboardDashboardPublishOptionsOutput)
}

// Ad hoc (one-time) filtering option. See ad_hoc_filtering_option.
func (o DashboardDashboardPublishOptionsPtrOutput) AdHocFilteringOption() DashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutput {
	return o.ApplyT(func(v *DashboardDashboardPublishOptions) *DashboardDashboardPublishOptionsAdHocFilteringOption {
		if v == nil {
			return nil
		}
		return v.AdHocFilteringOption
	}).(DashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutput)
}

// The drill-down options of data points in a dashboard. See data_point_drill_up_down_option.
func (o DashboardDashboardPublishOptionsPtrOutput) DataPointDrillUpDownOption() DashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutput {
	return o.ApplyT(func(v *DashboardDashboardPublishOptions) *DashboardDashboardPublishOptionsDataPointDrillUpDownOption {
		if v == nil {
			return nil
		}
		return v.DataPointDrillUpDownOption
	}).(DashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutput)
}

// The data point menu label options of a dashboard. See data_point_menu_label_option.
func (o DashboardDashboardPublishOptionsPtrOutput) DataPointMenuLabelOption() DashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutput {
	return o.ApplyT(func(v *DashboardDashboardPublishOptions) *DashboardDashboardPublishOptionsDataPointMenuLabelOption {
		if v == nil {
			return nil
		}
		return v.DataPointMenuLabelOption
	}).(DashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutput)
}

// The data point tool tip options of a dashboard. See data_point_tooltip_option.
func (o DashboardDashboardPublishOptionsPtrOutput) DataPointTooltipOption() DashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutput {
	return o.ApplyT(func(v *DashboardDashboardPublishOptions) *DashboardDashboardPublishOptionsDataPointTooltipOption {
		if v == nil {
			return nil
		}
		return v.DataPointTooltipOption
	}).(DashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutput)
}

// Export to .csv option. See export_to_csv_option.
func (o DashboardDashboardPublishOptionsPtrOutput) ExportToCsvOption() DashboardDashboardPublishOptionsExportToCsvOptionPtrOutput {
	return o.ApplyT(func(v *DashboardDashboardPublishOptions) *DashboardDashboardPublishOptionsExportToCsvOption {
		if v == nil {
			return nil
		}
		return v.ExportToCsvOption
	}).(DashboardDashboardPublishOptionsExportToCsvOptionPtrOutput)
}

// Determines if hidden fields are exported with a dashboard. See export_with_hidden_fields_option.
func (o DashboardDashboardPublishOptionsPtrOutput) ExportWithHiddenFieldsOption() DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutput {
	return o.ApplyT(func(v *DashboardDashboardPublishOptions) *DashboardDashboardPublishOptionsExportWithHiddenFieldsOption {
		if v == nil {
			return nil
		}
		return v.ExportWithHiddenFieldsOption
	}).(DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutput)
}

// Sheet controls option. See sheet_controls_option.
func (o DashboardDashboardPublishOptionsPtrOutput) SheetControlsOption() DashboardDashboardPublishOptionsSheetControlsOptionPtrOutput {
	return o.ApplyT(func(v *DashboardDashboardPublishOptions) *DashboardDashboardPublishOptionsSheetControlsOption {
		if v == nil {
			return nil
		}
		return v.SheetControlsOption
	}).(DashboardDashboardPublishOptionsSheetControlsOptionPtrOutput)
}

// The sheet layout maximization options of a dashboard. See sheet_layout_element_maximization_option.
func (o DashboardDashboardPublishOptionsPtrOutput) SheetLayoutElementMaximizationOption() DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutput {
	return o.ApplyT(func(v *DashboardDashboardPublishOptions) *DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOption {
		if v == nil {
			return nil
		}
		return v.SheetLayoutElementMaximizationOption
	}).(DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutput)
}

// The axis sort options of a dashboard. See visual_axis_sort_option.
func (o DashboardDashboardPublishOptionsPtrOutput) VisualAxisSortOption() DashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutput {
	return o.ApplyT(func(v *DashboardDashboardPublishOptions) *DashboardDashboardPublishOptionsVisualAxisSortOption {
		if v == nil {
			return nil
		}
		return v.VisualAxisSortOption
	}).(DashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutput)
}

// The menu options of a visual in a dashboard. See visual_menu_option.
func (o DashboardDashboardPublishOptionsPtrOutput) VisualMenuOption() DashboardDashboardPublishOptionsVisualMenuOptionPtrOutput {
	return o.ApplyT(func(v *DashboardDashboardPublishOptions) *DashboardDashboardPublishOptionsVisualMenuOption {
		if v == nil {
			return nil
		}
		return v.VisualMenuOption
	}).(DashboardDashboardPublishOptionsVisualMenuOptionPtrOutput)
}

type DashboardDashboardPublishOptionsAdHocFilteringOption struct {
	// Availability status. Possibles values: ENABLED, DISABLED.
	AvailabilityStatus *string `pulumi:"availabilityStatus"`
}

// DashboardDashboardPublishOptionsAdHocFilteringOptionInput is an input type that accepts DashboardDashboardPublishOptionsAdHocFilteringOptionArgs and DashboardDashboardPublishOptionsAdHocFilteringOptionOutput values.
// You can construct a concrete instance of `DashboardDashboardPublishOptionsAdHocFilteringOptionInput` via:
//
//	DashboardDashboardPublishOptionsAdHocFilteringOptionArgs{...}
type DashboardDashboardPublishOptionsAdHocFilteringOptionInput interface {
	pulumi.Input

	ToDashboardDashboardPublishOptionsAdHocFilteringOptionOutput() DashboardDashboardPublishOptionsAdHocFilteringOptionOutput
	ToDashboardDashboardPublishOptionsAdHocFilteringOptionOutputWithContext(context.Context) DashboardDashboardPublishOptionsAdHocFilteringOptionOutput
}

type DashboardDashboardPublishOptionsAdHocFilteringOptionArgs struct {
	// Availability status. Possibles values: ENABLED, DISABLED.
	AvailabilityStatus pulumi.StringPtrInput `pulumi:"availabilityStatus"`
}

func (DashboardDashboardPublishOptionsAdHocFilteringOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsAdHocFilteringOption)(nil)).Elem()
}

func (i DashboardDashboardPublishOptionsAdHocFilteringOptionArgs) ToDashboardDashboardPublishOptionsAdHocFilteringOptionOutput() DashboardDashboardPublishOptionsAdHocFilteringOptionOutput {
	return i.ToDashboardDashboardPublishOptionsAdHocFilteringOptionOutputWithContext(context.Background())
}

func (i DashboardDashboardPublishOptionsAdHocFilteringOptionArgs) ToDashboardDashboardPublishOptionsAdHocFilteringOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsAdHocFilteringOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsAdHocFilteringOptionOutput)
}

func (i DashboardDashboardPublishOptionsAdHocFilteringOptionArgs) ToDashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutput() DashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutput {
	return i.ToDashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutputWithContext(context.Background())
}

func (i DashboardDashboardPublishOptionsAdHocFilteringOptionArgs) ToDashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsAdHocFilteringOptionOutput).ToDashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutputWithContext(ctx)
}

// DashboardDashboardPublishOptionsAdHocFilteringOptionPtrInput is an input type that accepts DashboardDashboardPublishOptionsAdHocFilteringOptionArgs, DashboardDashboardPublishOptionsAdHocFilteringOptionPtr and DashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutput values.
// You can construct a concrete instance of `DashboardDashboardPublishOptionsAdHocFilteringOptionPtrInput` via:
//
//	        DashboardDashboardPublishOptionsAdHocFilteringOptionArgs{...}
//
//	or:
//
//	        nil
type DashboardDashboardPublishOptionsAdHocFilteringOptionPtrInput interface {
	pulumi.Input

	ToDashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutput() DashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutput
	ToDashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutputWithContext(context.Context) DashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutput
}

type dashboardDashboardPublishOptionsAdHocFilteringOptionPtrType DashboardDashboardPublishOptionsAdHocFilteringOptionArgs

func DashboardDashboardPublishOptionsAdHocFilteringOptionPtr(v *DashboardDashboardPublishOptionsAdHocFilteringOptionArgs) DashboardDashboardPublishOptionsAdHocFilteringOptionPtrInput {
	return (*dashboardDashboardPublishOptionsAdHocFilteringOptionPtrType)(v)
}

func (*dashboardDashboardPublishOptionsAdHocFilteringOptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardDashboardPublishOptionsAdHocFilteringOption)(nil)).Elem()
}

func (i *dashboardDashboardPublishOptionsAdHocFilteringOptionPtrType) ToDashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutput() DashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutput {
	return i.ToDashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutputWithContext(context.Background())
}

func (i *dashboardDashboardPublishOptionsAdHocFilteringOptionPtrType) ToDashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutput)
}

type DashboardDashboardPublishOptionsAdHocFilteringOptionOutput struct{ *pulumi.OutputState }

func (DashboardDashboardPublishOptionsAdHocFilteringOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsAdHocFilteringOption)(nil)).Elem()
}

func (o DashboardDashboardPublishOptionsAdHocFilteringOptionOutput) ToDashboardDashboardPublishOptionsAdHocFilteringOptionOutput() DashboardDashboardPublishOptionsAdHocFilteringOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsAdHocFilteringOptionOutput) ToDashboardDashboardPublishOptionsAdHocFilteringOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsAdHocFilteringOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsAdHocFilteringOptionOutput) ToDashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutput() DashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutput {
	return o.ToDashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutputWithContext(context.Background())
}

func (o DashboardDashboardPublishOptionsAdHocFilteringOptionOutput) ToDashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardDashboardPublishOptionsAdHocFilteringOption) *DashboardDashboardPublishOptionsAdHocFilteringOption {
		return &v
	}).(DashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutput)
}

// Availability status. Possibles values: ENABLED, DISABLED.
func (o DashboardDashboardPublishOptionsAdHocFilteringOptionOutput) AvailabilityStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardDashboardPublishOptionsAdHocFilteringOption) *string { return v.AvailabilityStatus }).(pulumi.StringPtrOutput)
}

type DashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutput struct{ *pulumi.OutputState }

func (DashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardDashboardPublishOptionsAdHocFilteringOption)(nil)).Elem()
}

func (o DashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutput) ToDashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutput() DashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutput {
	return o
}

func (o DashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutput) ToDashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutput {
	return o
}

func (o DashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutput) Elem() DashboardDashboardPublishOptionsAdHocFilteringOptionOutput {
	return o.ApplyT(func(v *DashboardDashboardPublishOptionsAdHocFilteringOption) DashboardDashboardPublishOptionsAdHocFilteringOption {
		if v != nil {
			return *v
		}
		var ret DashboardDashboardPublishOptionsAdHocFilteringOption
		return ret
	}).(DashboardDashboardPublishOptionsAdHocFilteringOptionOutput)
}

// Availability status. Possibles values: ENABLED, DISABLED.
func (o DashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutput) AvailabilityStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardDashboardPublishOptionsAdHocFilteringOption) *string {
		if v == nil {
			return nil
		}
		return v.AvailabilityStatus
	}).(pulumi.StringPtrOutput)
}

type DashboardDashboardPublishOptionsDataPointDrillUpDownOption struct {
	// Availability status. Possibles values: ENABLED, DISABLED.
	AvailabilityStatus *string `pulumi:"availabilityStatus"`
}

// DashboardDashboardPublishOptionsDataPointDrillUpDownOptionInput is an input type that accepts DashboardDashboardPublishOptionsDataPointDrillUpDownOptionArgs and DashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput values.
// You can construct a concrete instance of `DashboardDashboardPublishOptionsDataPointDrillUpDownOptionInput` via:
//
//	DashboardDashboardPublishOptionsDataPointDrillUpDownOptionArgs{...}
type DashboardDashboardPublishOptionsDataPointDrillUpDownOptionInput interface {
	pulumi.Input

	ToDashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput() DashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput
	ToDashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutputWithContext(context.Context) DashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput
}

type DashboardDashboardPublishOptionsDataPointDrillUpDownOptionArgs struct {
	// Availability status. Possibles values: ENABLED, DISABLED.
	AvailabilityStatus pulumi.StringPtrInput `pulumi:"availabilityStatus"`
}

func (DashboardDashboardPublishOptionsDataPointDrillUpDownOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsDataPointDrillUpDownOption)(nil)).Elem()
}

func (i DashboardDashboardPublishOptionsDataPointDrillUpDownOptionArgs) ToDashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput() DashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput {
	return i.ToDashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutputWithContext(context.Background())
}

func (i DashboardDashboardPublishOptionsDataPointDrillUpDownOptionArgs) ToDashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput)
}

func (i DashboardDashboardPublishOptionsDataPointDrillUpDownOptionArgs) ToDashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutput() DashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutput {
	return i.ToDashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutputWithContext(context.Background())
}

func (i DashboardDashboardPublishOptionsDataPointDrillUpDownOptionArgs) ToDashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput).ToDashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutputWithContext(ctx)
}

// DashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrInput is an input type that accepts DashboardDashboardPublishOptionsDataPointDrillUpDownOptionArgs, DashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtr and DashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutput values.
// You can construct a concrete instance of `DashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrInput` via:
//
//	        DashboardDashboardPublishOptionsDataPointDrillUpDownOptionArgs{...}
//
//	or:
//
//	        nil
type DashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrInput interface {
	pulumi.Input

	ToDashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutput() DashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutput
	ToDashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutputWithContext(context.Context) DashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutput
}

type dashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrType DashboardDashboardPublishOptionsDataPointDrillUpDownOptionArgs

func DashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtr(v *DashboardDashboardPublishOptionsDataPointDrillUpDownOptionArgs) DashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrInput {
	return (*dashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrType)(v)
}

func (*dashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardDashboardPublishOptionsDataPointDrillUpDownOption)(nil)).Elem()
}

func (i *dashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrType) ToDashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutput() DashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutput {
	return i.ToDashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutputWithContext(context.Background())
}

func (i *dashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrType) ToDashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutput)
}

type DashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput struct{ *pulumi.OutputState }

func (DashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsDataPointDrillUpDownOption)(nil)).Elem()
}

func (o DashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput) ToDashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput() DashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput) ToDashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput) ToDashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutput() DashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutput {
	return o.ToDashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutputWithContext(context.Background())
}

func (o DashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput) ToDashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardDashboardPublishOptionsDataPointDrillUpDownOption) *DashboardDashboardPublishOptionsDataPointDrillUpDownOption {
		return &v
	}).(DashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutput)
}

// Availability status. Possibles values: ENABLED, DISABLED.
func (o DashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput) AvailabilityStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardDashboardPublishOptionsDataPointDrillUpDownOption) *string {
		return v.AvailabilityStatus
	}).(pulumi.StringPtrOutput)
}

type DashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutput struct{ *pulumi.OutputState }

func (DashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardDashboardPublishOptionsDataPointDrillUpDownOption)(nil)).Elem()
}

func (o DashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutput) ToDashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutput() DashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutput {
	return o
}

func (o DashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutput) ToDashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutput {
	return o
}

func (o DashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutput) Elem() DashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput {
	return o.ApplyT(func(v *DashboardDashboardPublishOptionsDataPointDrillUpDownOption) DashboardDashboardPublishOptionsDataPointDrillUpDownOption {
		if v != nil {
			return *v
		}
		var ret DashboardDashboardPublishOptionsDataPointDrillUpDownOption
		return ret
	}).(DashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput)
}

// Availability status. Possibles values: ENABLED, DISABLED.
func (o DashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutput) AvailabilityStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardDashboardPublishOptionsDataPointDrillUpDownOption) *string {
		if v == nil {
			return nil
		}
		return v.AvailabilityStatus
	}).(pulumi.StringPtrOutput)
}

type DashboardDashboardPublishOptionsDataPointMenuLabelOption struct {
	// Availability status. Possibles values: ENABLED, DISABLED.
	AvailabilityStatus *string `pulumi:"availabilityStatus"`
}

// DashboardDashboardPublishOptionsDataPointMenuLabelOptionInput is an input type that accepts DashboardDashboardPublishOptionsDataPointMenuLabelOptionArgs and DashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput values.
// You can construct a concrete instance of `DashboardDashboardPublishOptionsDataPointMenuLabelOptionInput` via:
//
//	DashboardDashboardPublishOptionsDataPointMenuLabelOptionArgs{...}
type DashboardDashboardPublishOptionsDataPointMenuLabelOptionInput interface {
	pulumi.Input

	ToDashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput() DashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput
	ToDashboardDashboardPublishOptionsDataPointMenuLabelOptionOutputWithContext(context.Context) DashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput
}

type DashboardDashboardPublishOptionsDataPointMenuLabelOptionArgs struct {
	// Availability status. Possibles values: ENABLED, DISABLED.
	AvailabilityStatus pulumi.StringPtrInput `pulumi:"availabilityStatus"`
}

func (DashboardDashboardPublishOptionsDataPointMenuLabelOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsDataPointMenuLabelOption)(nil)).Elem()
}

func (i DashboardDashboardPublishOptionsDataPointMenuLabelOptionArgs) ToDashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput() DashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput {
	return i.ToDashboardDashboardPublishOptionsDataPointMenuLabelOptionOutputWithContext(context.Background())
}

func (i DashboardDashboardPublishOptionsDataPointMenuLabelOptionArgs) ToDashboardDashboardPublishOptionsDataPointMenuLabelOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput)
}

func (i DashboardDashboardPublishOptionsDataPointMenuLabelOptionArgs) ToDashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutput() DashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutput {
	return i.ToDashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutputWithContext(context.Background())
}

func (i DashboardDashboardPublishOptionsDataPointMenuLabelOptionArgs) ToDashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput).ToDashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutputWithContext(ctx)
}

// DashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrInput is an input type that accepts DashboardDashboardPublishOptionsDataPointMenuLabelOptionArgs, DashboardDashboardPublishOptionsDataPointMenuLabelOptionPtr and DashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutput values.
// You can construct a concrete instance of `DashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrInput` via:
//
//	        DashboardDashboardPublishOptionsDataPointMenuLabelOptionArgs{...}
//
//	or:
//
//	        nil
type DashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrInput interface {
	pulumi.Input

	ToDashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutput() DashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutput
	ToDashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutputWithContext(context.Context) DashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutput
}

type dashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrType DashboardDashboardPublishOptionsDataPointMenuLabelOptionArgs

func DashboardDashboardPublishOptionsDataPointMenuLabelOptionPtr(v *DashboardDashboardPublishOptionsDataPointMenuLabelOptionArgs) DashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrInput {
	return (*dashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrType)(v)
}

func (*dashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardDashboardPublishOptionsDataPointMenuLabelOption)(nil)).Elem()
}

func (i *dashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrType) ToDashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutput() DashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutput {
	return i.ToDashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutputWithContext(context.Background())
}

func (i *dashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrType) ToDashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutput)
}

type DashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput struct{ *pulumi.OutputState }

func (DashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsDataPointMenuLabelOption)(nil)).Elem()
}

func (o DashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput) ToDashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput() DashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput) ToDashboardDashboardPublishOptionsDataPointMenuLabelOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput) ToDashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutput() DashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutput {
	return o.ToDashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutputWithContext(context.Background())
}

func (o DashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput) ToDashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardDashboardPublishOptionsDataPointMenuLabelOption) *DashboardDashboardPublishOptionsDataPointMenuLabelOption {
		return &v
	}).(DashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutput)
}

// Availability status. Possibles values: ENABLED, DISABLED.
func (o DashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput) AvailabilityStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardDashboardPublishOptionsDataPointMenuLabelOption) *string { return v.AvailabilityStatus }).(pulumi.StringPtrOutput)
}

type DashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutput struct{ *pulumi.OutputState }

func (DashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardDashboardPublishOptionsDataPointMenuLabelOption)(nil)).Elem()
}

func (o DashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutput) ToDashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutput() DashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutput {
	return o
}

func (o DashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutput) ToDashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutput {
	return o
}

func (o DashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutput) Elem() DashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput {
	return o.ApplyT(func(v *DashboardDashboardPublishOptionsDataPointMenuLabelOption) DashboardDashboardPublishOptionsDataPointMenuLabelOption {
		if v != nil {
			return *v
		}
		var ret DashboardDashboardPublishOptionsDataPointMenuLabelOption
		return ret
	}).(DashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput)
}

// Availability status. Possibles values: ENABLED, DISABLED.
func (o DashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutput) AvailabilityStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardDashboardPublishOptionsDataPointMenuLabelOption) *string {
		if v == nil {
			return nil
		}
		return v.AvailabilityStatus
	}).(pulumi.StringPtrOutput)
}

type DashboardDashboardPublishOptionsDataPointTooltipOption struct {
	// Availability status. Possibles values: ENABLED, DISABLED.
	AvailabilityStatus *string `pulumi:"availabilityStatus"`
}

// DashboardDashboardPublishOptionsDataPointTooltipOptionInput is an input type that accepts DashboardDashboardPublishOptionsDataPointTooltipOptionArgs and DashboardDashboardPublishOptionsDataPointTooltipOptionOutput values.
// You can construct a concrete instance of `DashboardDashboardPublishOptionsDataPointTooltipOptionInput` via:
//
//	DashboardDashboardPublishOptionsDataPointTooltipOptionArgs{...}
type DashboardDashboardPublishOptionsDataPointTooltipOptionInput interface {
	pulumi.Input

	ToDashboardDashboardPublishOptionsDataPointTooltipOptionOutput() DashboardDashboardPublishOptionsDataPointTooltipOptionOutput
	ToDashboardDashboardPublishOptionsDataPointTooltipOptionOutputWithContext(context.Context) DashboardDashboardPublishOptionsDataPointTooltipOptionOutput
}

type DashboardDashboardPublishOptionsDataPointTooltipOptionArgs struct {
	// Availability status. Possibles values: ENABLED, DISABLED.
	AvailabilityStatus pulumi.StringPtrInput `pulumi:"availabilityStatus"`
}

func (DashboardDashboardPublishOptionsDataPointTooltipOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsDataPointTooltipOption)(nil)).Elem()
}

func (i DashboardDashboardPublishOptionsDataPointTooltipOptionArgs) ToDashboardDashboardPublishOptionsDataPointTooltipOptionOutput() DashboardDashboardPublishOptionsDataPointTooltipOptionOutput {
	return i.ToDashboardDashboardPublishOptionsDataPointTooltipOptionOutputWithContext(context.Background())
}

func (i DashboardDashboardPublishOptionsDataPointTooltipOptionArgs) ToDashboardDashboardPublishOptionsDataPointTooltipOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsDataPointTooltipOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsDataPointTooltipOptionOutput)
}

func (i DashboardDashboardPublishOptionsDataPointTooltipOptionArgs) ToDashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutput() DashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutput {
	return i.ToDashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutputWithContext(context.Background())
}

func (i DashboardDashboardPublishOptionsDataPointTooltipOptionArgs) ToDashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsDataPointTooltipOptionOutput).ToDashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutputWithContext(ctx)
}

// DashboardDashboardPublishOptionsDataPointTooltipOptionPtrInput is an input type that accepts DashboardDashboardPublishOptionsDataPointTooltipOptionArgs, DashboardDashboardPublishOptionsDataPointTooltipOptionPtr and DashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutput values.
// You can construct a concrete instance of `DashboardDashboardPublishOptionsDataPointTooltipOptionPtrInput` via:
//
//	        DashboardDashboardPublishOptionsDataPointTooltipOptionArgs{...}
//
//	or:
//
//	        nil
type DashboardDashboardPublishOptionsDataPointTooltipOptionPtrInput interface {
	pulumi.Input

	ToDashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutput() DashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutput
	ToDashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutputWithContext(context.Context) DashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutput
}

type dashboardDashboardPublishOptionsDataPointTooltipOptionPtrType DashboardDashboardPublishOptionsDataPointTooltipOptionArgs

func DashboardDashboardPublishOptionsDataPointTooltipOptionPtr(v *DashboardDashboardPublishOptionsDataPointTooltipOptionArgs) DashboardDashboardPublishOptionsDataPointTooltipOptionPtrInput {
	return (*dashboardDashboardPublishOptionsDataPointTooltipOptionPtrType)(v)
}

func (*dashboardDashboardPublishOptionsDataPointTooltipOptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardDashboardPublishOptionsDataPointTooltipOption)(nil)).Elem()
}

func (i *dashboardDashboardPublishOptionsDataPointTooltipOptionPtrType) ToDashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutput() DashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutput {
	return i.ToDashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutputWithContext(context.Background())
}

func (i *dashboardDashboardPublishOptionsDataPointTooltipOptionPtrType) ToDashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutput)
}

type DashboardDashboardPublishOptionsDataPointTooltipOptionOutput struct{ *pulumi.OutputState }

func (DashboardDashboardPublishOptionsDataPointTooltipOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsDataPointTooltipOption)(nil)).Elem()
}

func (o DashboardDashboardPublishOptionsDataPointTooltipOptionOutput) ToDashboardDashboardPublishOptionsDataPointTooltipOptionOutput() DashboardDashboardPublishOptionsDataPointTooltipOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsDataPointTooltipOptionOutput) ToDashboardDashboardPublishOptionsDataPointTooltipOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsDataPointTooltipOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsDataPointTooltipOptionOutput) ToDashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutput() DashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutput {
	return o.ToDashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutputWithContext(context.Background())
}

func (o DashboardDashboardPublishOptionsDataPointTooltipOptionOutput) ToDashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardDashboardPublishOptionsDataPointTooltipOption) *DashboardDashboardPublishOptionsDataPointTooltipOption {
		return &v
	}).(DashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutput)
}

// Availability status. Possibles values: ENABLED, DISABLED.
func (o DashboardDashboardPublishOptionsDataPointTooltipOptionOutput) AvailabilityStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardDashboardPublishOptionsDataPointTooltipOption) *string { return v.AvailabilityStatus }).(pulumi.StringPtrOutput)
}

type DashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutput struct{ *pulumi.OutputState }

func (DashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardDashboardPublishOptionsDataPointTooltipOption)(nil)).Elem()
}

func (o DashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutput) ToDashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutput() DashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutput {
	return o
}

func (o DashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutput) ToDashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutput {
	return o
}

func (o DashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutput) Elem() DashboardDashboardPublishOptionsDataPointTooltipOptionOutput {
	return o.ApplyT(func(v *DashboardDashboardPublishOptionsDataPointTooltipOption) DashboardDashboardPublishOptionsDataPointTooltipOption {
		if v != nil {
			return *v
		}
		var ret DashboardDashboardPublishOptionsDataPointTooltipOption
		return ret
	}).(DashboardDashboardPublishOptionsDataPointTooltipOptionOutput)
}

// Availability status. Possibles values: ENABLED, DISABLED.
func (o DashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutput) AvailabilityStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardDashboardPublishOptionsDataPointTooltipOption) *string {
		if v == nil {
			return nil
		}
		return v.AvailabilityStatus
	}).(pulumi.StringPtrOutput)
}

type DashboardDashboardPublishOptionsExportToCsvOption struct {
	// Availability status. Possibles values: ENABLED, DISABLED.
	AvailabilityStatus *string `pulumi:"availabilityStatus"`
}

// DashboardDashboardPublishOptionsExportToCsvOptionInput is an input type that accepts DashboardDashboardPublishOptionsExportToCsvOptionArgs and DashboardDashboardPublishOptionsExportToCsvOptionOutput values.
// You can construct a concrete instance of `DashboardDashboardPublishOptionsExportToCsvOptionInput` via:
//
//	DashboardDashboardPublishOptionsExportToCsvOptionArgs{...}
type DashboardDashboardPublishOptionsExportToCsvOptionInput interface {
	pulumi.Input

	ToDashboardDashboardPublishOptionsExportToCsvOptionOutput() DashboardDashboardPublishOptionsExportToCsvOptionOutput
	ToDashboardDashboardPublishOptionsExportToCsvOptionOutputWithContext(context.Context) DashboardDashboardPublishOptionsExportToCsvOptionOutput
}

type DashboardDashboardPublishOptionsExportToCsvOptionArgs struct {
	// Availability status. Possibles values: ENABLED, DISABLED.
	AvailabilityStatus pulumi.StringPtrInput `pulumi:"availabilityStatus"`
}

func (DashboardDashboardPublishOptionsExportToCsvOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsExportToCsvOption)(nil)).Elem()
}

func (i DashboardDashboardPublishOptionsExportToCsvOptionArgs) ToDashboardDashboardPublishOptionsExportToCsvOptionOutput() DashboardDashboardPublishOptionsExportToCsvOptionOutput {
	return i.ToDashboardDashboardPublishOptionsExportToCsvOptionOutputWithContext(context.Background())
}

func (i DashboardDashboardPublishOptionsExportToCsvOptionArgs) ToDashboardDashboardPublishOptionsExportToCsvOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsExportToCsvOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsExportToCsvOptionOutput)
}

func (i DashboardDashboardPublishOptionsExportToCsvOptionArgs) ToDashboardDashboardPublishOptionsExportToCsvOptionPtrOutput() DashboardDashboardPublishOptionsExportToCsvOptionPtrOutput {
	return i.ToDashboardDashboardPublishOptionsExportToCsvOptionPtrOutputWithContext(context.Background())
}

func (i DashboardDashboardPublishOptionsExportToCsvOptionArgs) ToDashboardDashboardPublishOptionsExportToCsvOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsExportToCsvOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsExportToCsvOptionOutput).ToDashboardDashboardPublishOptionsExportToCsvOptionPtrOutputWithContext(ctx)
}

// DashboardDashboardPublishOptionsExportToCsvOptionPtrInput is an input type that accepts DashboardDashboardPublishOptionsExportToCsvOptionArgs, DashboardDashboardPublishOptionsExportToCsvOptionPtr and DashboardDashboardPublishOptionsExportToCsvOptionPtrOutput values.
// You can construct a concrete instance of `DashboardDashboardPublishOptionsExportToCsvOptionPtrInput` via:
//
//	        DashboardDashboardPublishOptionsExportToCsvOptionArgs{...}
//
//	or:
//
//	        nil
type DashboardDashboardPublishOptionsExportToCsvOptionPtrInput interface {
	pulumi.Input

	ToDashboardDashboardPublishOptionsExportToCsvOptionPtrOutput() DashboardDashboardPublishOptionsExportToCsvOptionPtrOutput
	ToDashboardDashboardPublishOptionsExportToCsvOptionPtrOutputWithContext(context.Context) DashboardDashboardPublishOptionsExportToCsvOptionPtrOutput
}

type dashboardDashboardPublishOptionsExportToCsvOptionPtrType DashboardDashboardPublishOptionsExportToCsvOptionArgs

func DashboardDashboardPublishOptionsExportToCsvOptionPtr(v *DashboardDashboardPublishOptionsExportToCsvOptionArgs) DashboardDashboardPublishOptionsExportToCsvOptionPtrInput {
	return (*dashboardDashboardPublishOptionsExportToCsvOptionPtrType)(v)
}

func (*dashboardDashboardPublishOptionsExportToCsvOptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardDashboardPublishOptionsExportToCsvOption)(nil)).Elem()
}

func (i *dashboardDashboardPublishOptionsExportToCsvOptionPtrType) ToDashboardDashboardPublishOptionsExportToCsvOptionPtrOutput() DashboardDashboardPublishOptionsExportToCsvOptionPtrOutput {
	return i.ToDashboardDashboardPublishOptionsExportToCsvOptionPtrOutputWithContext(context.Background())
}

func (i *dashboardDashboardPublishOptionsExportToCsvOptionPtrType) ToDashboardDashboardPublishOptionsExportToCsvOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsExportToCsvOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsExportToCsvOptionPtrOutput)
}

type DashboardDashboardPublishOptionsExportToCsvOptionOutput struct{ *pulumi.OutputState }

func (DashboardDashboardPublishOptionsExportToCsvOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsExportToCsvOption)(nil)).Elem()
}

func (o DashboardDashboardPublishOptionsExportToCsvOptionOutput) ToDashboardDashboardPublishOptionsExportToCsvOptionOutput() DashboardDashboardPublishOptionsExportToCsvOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsExportToCsvOptionOutput) ToDashboardDashboardPublishOptionsExportToCsvOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsExportToCsvOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsExportToCsvOptionOutput) ToDashboardDashboardPublishOptionsExportToCsvOptionPtrOutput() DashboardDashboardPublishOptionsExportToCsvOptionPtrOutput {
	return o.ToDashboardDashboardPublishOptionsExportToCsvOptionPtrOutputWithContext(context.Background())
}

func (o DashboardDashboardPublishOptionsExportToCsvOptionOutput) ToDashboardDashboardPublishOptionsExportToCsvOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsExportToCsvOptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardDashboardPublishOptionsExportToCsvOption) *DashboardDashboardPublishOptionsExportToCsvOption {
		return &v
	}).(DashboardDashboardPublishOptionsExportToCsvOptionPtrOutput)
}

// Availability status. Possibles values: ENABLED, DISABLED.
func (o DashboardDashboardPublishOptionsExportToCsvOptionOutput) AvailabilityStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardDashboardPublishOptionsExportToCsvOption) *string { return v.AvailabilityStatus }).(pulumi.StringPtrOutput)
}

type DashboardDashboardPublishOptionsExportToCsvOptionPtrOutput struct{ *pulumi.OutputState }

func (DashboardDashboardPublishOptionsExportToCsvOptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardDashboardPublishOptionsExportToCsvOption)(nil)).Elem()
}

func (o DashboardDashboardPublishOptionsExportToCsvOptionPtrOutput) ToDashboardDashboardPublishOptionsExportToCsvOptionPtrOutput() DashboardDashboardPublishOptionsExportToCsvOptionPtrOutput {
	return o
}

func (o DashboardDashboardPublishOptionsExportToCsvOptionPtrOutput) ToDashboardDashboardPublishOptionsExportToCsvOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsExportToCsvOptionPtrOutput {
	return o
}

func (o DashboardDashboardPublishOptionsExportToCsvOptionPtrOutput) Elem() DashboardDashboardPublishOptionsExportToCsvOptionOutput {
	return o.ApplyT(func(v *DashboardDashboardPublishOptionsExportToCsvOption) DashboardDashboardPublishOptionsExportToCsvOption {
		if v != nil {
			return *v
		}
		var ret DashboardDashboardPublishOptionsExportToCsvOption
		return ret
	}).(DashboardDashboardPublishOptionsExportToCsvOptionOutput)
}

// Availability status. Possibles values: ENABLED, DISABLED.
func (o DashboardDashboardPublishOptionsExportToCsvOptionPtrOutput) AvailabilityStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardDashboardPublishOptionsExportToCsvOption) *string {
		if v == nil {
			return nil
		}
		return v.AvailabilityStatus
	}).(pulumi.StringPtrOutput)
}

type DashboardDashboardPublishOptionsExportWithHiddenFieldsOption struct {
	// Availability status. Possibles values: ENABLED, DISABLED.
	AvailabilityStatus *string `pulumi:"availabilityStatus"`
}

// DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionInput is an input type that accepts DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionArgs and DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput values.
// You can construct a concrete instance of `DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionInput` via:
//
//	DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionArgs{...}
type DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionInput interface {
	pulumi.Input

	ToDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput() DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput
	ToDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutputWithContext(context.Context) DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput
}

type DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionArgs struct {
	// Availability status. Possibles values: ENABLED, DISABLED.
	AvailabilityStatus pulumi.StringPtrInput `pulumi:"availabilityStatus"`
}

func (DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsExportWithHiddenFieldsOption)(nil)).Elem()
}

func (i DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionArgs) ToDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput() DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput {
	return i.ToDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutputWithContext(context.Background())
}

func (i DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionArgs) ToDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput)
}

func (i DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionArgs) ToDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutput() DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutput {
	return i.ToDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutputWithContext(context.Background())
}

func (i DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionArgs) ToDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput).ToDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutputWithContext(ctx)
}

// DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrInput is an input type that accepts DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionArgs, DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtr and DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutput values.
// You can construct a concrete instance of `DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrInput` via:
//
//	        DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionArgs{...}
//
//	or:
//
//	        nil
type DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrInput interface {
	pulumi.Input

	ToDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutput() DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutput
	ToDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutputWithContext(context.Context) DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutput
}

type dashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrType DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionArgs

func DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtr(v *DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionArgs) DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrInput {
	return (*dashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrType)(v)
}

func (*dashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardDashboardPublishOptionsExportWithHiddenFieldsOption)(nil)).Elem()
}

func (i *dashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrType) ToDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutput() DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutput {
	return i.ToDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutputWithContext(context.Background())
}

func (i *dashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrType) ToDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutput)
}

type DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput struct{ *pulumi.OutputState }

func (DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsExportWithHiddenFieldsOption)(nil)).Elem()
}

func (o DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput) ToDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput() DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput) ToDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput) ToDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutput() DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutput {
	return o.ToDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutputWithContext(context.Background())
}

func (o DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput) ToDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardDashboardPublishOptionsExportWithHiddenFieldsOption) *DashboardDashboardPublishOptionsExportWithHiddenFieldsOption {
		return &v
	}).(DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutput)
}

// Availability status. Possibles values: ENABLED, DISABLED.
func (o DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput) AvailabilityStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardDashboardPublishOptionsExportWithHiddenFieldsOption) *string {
		return v.AvailabilityStatus
	}).(pulumi.StringPtrOutput)
}

type DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutput struct{ *pulumi.OutputState }

func (DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardDashboardPublishOptionsExportWithHiddenFieldsOption)(nil)).Elem()
}

func (o DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutput) ToDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutput() DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutput {
	return o
}

func (o DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutput) ToDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutput {
	return o
}

func (o DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutput) Elem() DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput {
	return o.ApplyT(func(v *DashboardDashboardPublishOptionsExportWithHiddenFieldsOption) DashboardDashboardPublishOptionsExportWithHiddenFieldsOption {
		if v != nil {
			return *v
		}
		var ret DashboardDashboardPublishOptionsExportWithHiddenFieldsOption
		return ret
	}).(DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput)
}

// Availability status. Possibles values: ENABLED, DISABLED.
func (o DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutput) AvailabilityStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardDashboardPublishOptionsExportWithHiddenFieldsOption) *string {
		if v == nil {
			return nil
		}
		return v.AvailabilityStatus
	}).(pulumi.StringPtrOutput)
}

type DashboardDashboardPublishOptionsSheetControlsOption struct {
	// Visibility state. Possibles values: EXPANDED, COLLAPSED.
	VisibilityState *string `pulumi:"visibilityState"`
}

// DashboardDashboardPublishOptionsSheetControlsOptionInput is an input type that accepts DashboardDashboardPublishOptionsSheetControlsOptionArgs and DashboardDashboardPublishOptionsSheetControlsOptionOutput values.
// You can construct a concrete instance of `DashboardDashboardPublishOptionsSheetControlsOptionInput` via:
//
//	DashboardDashboardPublishOptionsSheetControlsOptionArgs{...}
type DashboardDashboardPublishOptionsSheetControlsOptionInput interface {
	pulumi.Input

	ToDashboardDashboardPublishOptionsSheetControlsOptionOutput() DashboardDashboardPublishOptionsSheetControlsOptionOutput
	ToDashboardDashboardPublishOptionsSheetControlsOptionOutputWithContext(context.Context) DashboardDashboardPublishOptionsSheetControlsOptionOutput
}

type DashboardDashboardPublishOptionsSheetControlsOptionArgs struct {
	// Visibility state. Possibles values: EXPANDED, COLLAPSED.
	VisibilityState pulumi.StringPtrInput `pulumi:"visibilityState"`
}

func (DashboardDashboardPublishOptionsSheetControlsOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsSheetControlsOption)(nil)).Elem()
}

func (i DashboardDashboardPublishOptionsSheetControlsOptionArgs) ToDashboardDashboardPublishOptionsSheetControlsOptionOutput() DashboardDashboardPublishOptionsSheetControlsOptionOutput {
	return i.ToDashboardDashboardPublishOptionsSheetControlsOptionOutputWithContext(context.Background())
}

func (i DashboardDashboardPublishOptionsSheetControlsOptionArgs) ToDashboardDashboardPublishOptionsSheetControlsOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsSheetControlsOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsSheetControlsOptionOutput)
}

func (i DashboardDashboardPublishOptionsSheetControlsOptionArgs) ToDashboardDashboardPublishOptionsSheetControlsOptionPtrOutput() DashboardDashboardPublishOptionsSheetControlsOptionPtrOutput {
	return i.ToDashboardDashboardPublishOptionsSheetControlsOptionPtrOutputWithContext(context.Background())
}

func (i DashboardDashboardPublishOptionsSheetControlsOptionArgs) ToDashboardDashboardPublishOptionsSheetControlsOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsSheetControlsOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsSheetControlsOptionOutput).ToDashboardDashboardPublishOptionsSheetControlsOptionPtrOutputWithContext(ctx)
}

// DashboardDashboardPublishOptionsSheetControlsOptionPtrInput is an input type that accepts DashboardDashboardPublishOptionsSheetControlsOptionArgs, DashboardDashboardPublishOptionsSheetControlsOptionPtr and DashboardDashboardPublishOptionsSheetControlsOptionPtrOutput values.
// You can construct a concrete instance of `DashboardDashboardPublishOptionsSheetControlsOptionPtrInput` via:
//
//	        DashboardDashboardPublishOptionsSheetControlsOptionArgs{...}
//
//	or:
//
//	        nil
type DashboardDashboardPublishOptionsSheetControlsOptionPtrInput interface {
	pulumi.Input

	ToDashboardDashboardPublishOptionsSheetControlsOptionPtrOutput() DashboardDashboardPublishOptionsSheetControlsOptionPtrOutput
	ToDashboardDashboardPublishOptionsSheetControlsOptionPtrOutputWithContext(context.Context) DashboardDashboardPublishOptionsSheetControlsOptionPtrOutput
}

type dashboardDashboardPublishOptionsSheetControlsOptionPtrType DashboardDashboardPublishOptionsSheetControlsOptionArgs

func DashboardDashboardPublishOptionsSheetControlsOptionPtr(v *DashboardDashboardPublishOptionsSheetControlsOptionArgs) DashboardDashboardPublishOptionsSheetControlsOptionPtrInput {
	return (*dashboardDashboardPublishOptionsSheetControlsOptionPtrType)(v)
}

func (*dashboardDashboardPublishOptionsSheetControlsOptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardDashboardPublishOptionsSheetControlsOption)(nil)).Elem()
}

func (i *dashboardDashboardPublishOptionsSheetControlsOptionPtrType) ToDashboardDashboardPublishOptionsSheetControlsOptionPtrOutput() DashboardDashboardPublishOptionsSheetControlsOptionPtrOutput {
	return i.ToDashboardDashboardPublishOptionsSheetControlsOptionPtrOutputWithContext(context.Background())
}

func (i *dashboardDashboardPublishOptionsSheetControlsOptionPtrType) ToDashboardDashboardPublishOptionsSheetControlsOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsSheetControlsOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsSheetControlsOptionPtrOutput)
}

type DashboardDashboardPublishOptionsSheetControlsOptionOutput struct{ *pulumi.OutputState }

func (DashboardDashboardPublishOptionsSheetControlsOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsSheetControlsOption)(nil)).Elem()
}

func (o DashboardDashboardPublishOptionsSheetControlsOptionOutput) ToDashboardDashboardPublishOptionsSheetControlsOptionOutput() DashboardDashboardPublishOptionsSheetControlsOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsSheetControlsOptionOutput) ToDashboardDashboardPublishOptionsSheetControlsOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsSheetControlsOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsSheetControlsOptionOutput) ToDashboardDashboardPublishOptionsSheetControlsOptionPtrOutput() DashboardDashboardPublishOptionsSheetControlsOptionPtrOutput {
	return o.ToDashboardDashboardPublishOptionsSheetControlsOptionPtrOutputWithContext(context.Background())
}

func (o DashboardDashboardPublishOptionsSheetControlsOptionOutput) ToDashboardDashboardPublishOptionsSheetControlsOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsSheetControlsOptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardDashboardPublishOptionsSheetControlsOption) *DashboardDashboardPublishOptionsSheetControlsOption {
		return &v
	}).(DashboardDashboardPublishOptionsSheetControlsOptionPtrOutput)
}

// Visibility state. Possibles values: EXPANDED, COLLAPSED.
func (o DashboardDashboardPublishOptionsSheetControlsOptionOutput) VisibilityState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardDashboardPublishOptionsSheetControlsOption) *string { return v.VisibilityState }).(pulumi.StringPtrOutput)
}

type DashboardDashboardPublishOptionsSheetControlsOptionPtrOutput struct{ *pulumi.OutputState }

func (DashboardDashboardPublishOptionsSheetControlsOptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardDashboardPublishOptionsSheetControlsOption)(nil)).Elem()
}

func (o DashboardDashboardPublishOptionsSheetControlsOptionPtrOutput) ToDashboardDashboardPublishOptionsSheetControlsOptionPtrOutput() DashboardDashboardPublishOptionsSheetControlsOptionPtrOutput {
	return o
}

func (o DashboardDashboardPublishOptionsSheetControlsOptionPtrOutput) ToDashboardDashboardPublishOptionsSheetControlsOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsSheetControlsOptionPtrOutput {
	return o
}

func (o DashboardDashboardPublishOptionsSheetControlsOptionPtrOutput) Elem() DashboardDashboardPublishOptionsSheetControlsOptionOutput {
	return o.ApplyT(func(v *DashboardDashboardPublishOptionsSheetControlsOption) DashboardDashboardPublishOptionsSheetControlsOption {
		if v != nil {
			return *v
		}
		var ret DashboardDashboardPublishOptionsSheetControlsOption
		return ret
	}).(DashboardDashboardPublishOptionsSheetControlsOptionOutput)
}

// Visibility state. Possibles values: EXPANDED, COLLAPSED.
func (o DashboardDashboardPublishOptionsSheetControlsOptionPtrOutput) VisibilityState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardDashboardPublishOptionsSheetControlsOption) *string {
		if v == nil {
			return nil
		}
		return v.VisibilityState
	}).(pulumi.StringPtrOutput)
}

type DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOption struct {
	// Availability status. Possibles values: ENABLED, DISABLED.
	AvailabilityStatus *string `pulumi:"availabilityStatus"`
}

// DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionInput is an input type that accepts DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionArgs and DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput values.
// You can construct a concrete instance of `DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionInput` via:
//
//	DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionArgs{...}
type DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionInput interface {
	pulumi.Input

	ToDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput() DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput
	ToDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutputWithContext(context.Context) DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput
}

type DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionArgs struct {
	// Availability status. Possibles values: ENABLED, DISABLED.
	AvailabilityStatus pulumi.StringPtrInput `pulumi:"availabilityStatus"`
}

func (DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOption)(nil)).Elem()
}

func (i DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionArgs) ToDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput() DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput {
	return i.ToDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutputWithContext(context.Background())
}

func (i DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionArgs) ToDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput)
}

func (i DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionArgs) ToDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutput() DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutput {
	return i.ToDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutputWithContext(context.Background())
}

func (i DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionArgs) ToDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput).ToDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutputWithContext(ctx)
}

// DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrInput is an input type that accepts DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionArgs, DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtr and DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutput values.
// You can construct a concrete instance of `DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrInput` via:
//
//	        DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionArgs{...}
//
//	or:
//
//	        nil
type DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrInput interface {
	pulumi.Input

	ToDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutput() DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutput
	ToDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutputWithContext(context.Context) DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutput
}

type dashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrType DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionArgs

func DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtr(v *DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionArgs) DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrInput {
	return (*dashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrType)(v)
}

func (*dashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOption)(nil)).Elem()
}

func (i *dashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrType) ToDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutput() DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutput {
	return i.ToDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutputWithContext(context.Background())
}

func (i *dashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrType) ToDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutput)
}

type DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput struct{ *pulumi.OutputState }

func (DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOption)(nil)).Elem()
}

func (o DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput) ToDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput() DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput) ToDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput) ToDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutput() DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutput {
	return o.ToDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutputWithContext(context.Background())
}

func (o DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput) ToDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOption) *DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOption {
		return &v
	}).(DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutput)
}

// Availability status. Possibles values: ENABLED, DISABLED.
func (o DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput) AvailabilityStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOption) *string {
		return v.AvailabilityStatus
	}).(pulumi.StringPtrOutput)
}

type DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutput struct{ *pulumi.OutputState }

func (DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOption)(nil)).Elem()
}

func (o DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutput) ToDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutput() DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutput {
	return o
}

func (o DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutput) ToDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutput {
	return o
}

func (o DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutput) Elem() DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput {
	return o.ApplyT(func(v *DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOption) DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOption {
		if v != nil {
			return *v
		}
		var ret DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOption
		return ret
	}).(DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput)
}

// Availability status. Possibles values: ENABLED, DISABLED.
func (o DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutput) AvailabilityStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOption) *string {
		if v == nil {
			return nil
		}
		return v.AvailabilityStatus
	}).(pulumi.StringPtrOutput)
}

type DashboardDashboardPublishOptionsVisualAxisSortOption struct {
	// Availability status. Possibles values: ENABLED, DISABLED.
	AvailabilityStatus *string `pulumi:"availabilityStatus"`
}

// DashboardDashboardPublishOptionsVisualAxisSortOptionInput is an input type that accepts DashboardDashboardPublishOptionsVisualAxisSortOptionArgs and DashboardDashboardPublishOptionsVisualAxisSortOptionOutput values.
// You can construct a concrete instance of `DashboardDashboardPublishOptionsVisualAxisSortOptionInput` via:
//
//	DashboardDashboardPublishOptionsVisualAxisSortOptionArgs{...}
type DashboardDashboardPublishOptionsVisualAxisSortOptionInput interface {
	pulumi.Input

	ToDashboardDashboardPublishOptionsVisualAxisSortOptionOutput() DashboardDashboardPublishOptionsVisualAxisSortOptionOutput
	ToDashboardDashboardPublishOptionsVisualAxisSortOptionOutputWithContext(context.Context) DashboardDashboardPublishOptionsVisualAxisSortOptionOutput
}

type DashboardDashboardPublishOptionsVisualAxisSortOptionArgs struct {
	// Availability status. Possibles values: ENABLED, DISABLED.
	AvailabilityStatus pulumi.StringPtrInput `pulumi:"availabilityStatus"`
}

func (DashboardDashboardPublishOptionsVisualAxisSortOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsVisualAxisSortOption)(nil)).Elem()
}

func (i DashboardDashboardPublishOptionsVisualAxisSortOptionArgs) ToDashboardDashboardPublishOptionsVisualAxisSortOptionOutput() DashboardDashboardPublishOptionsVisualAxisSortOptionOutput {
	return i.ToDashboardDashboardPublishOptionsVisualAxisSortOptionOutputWithContext(context.Background())
}

func (i DashboardDashboardPublishOptionsVisualAxisSortOptionArgs) ToDashboardDashboardPublishOptionsVisualAxisSortOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsVisualAxisSortOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsVisualAxisSortOptionOutput)
}

func (i DashboardDashboardPublishOptionsVisualAxisSortOptionArgs) ToDashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutput() DashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutput {
	return i.ToDashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutputWithContext(context.Background())
}

func (i DashboardDashboardPublishOptionsVisualAxisSortOptionArgs) ToDashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsVisualAxisSortOptionOutput).ToDashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutputWithContext(ctx)
}

// DashboardDashboardPublishOptionsVisualAxisSortOptionPtrInput is an input type that accepts DashboardDashboardPublishOptionsVisualAxisSortOptionArgs, DashboardDashboardPublishOptionsVisualAxisSortOptionPtr and DashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutput values.
// You can construct a concrete instance of `DashboardDashboardPublishOptionsVisualAxisSortOptionPtrInput` via:
//
//	        DashboardDashboardPublishOptionsVisualAxisSortOptionArgs{...}
//
//	or:
//
//	        nil
type DashboardDashboardPublishOptionsVisualAxisSortOptionPtrInput interface {
	pulumi.Input

	ToDashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutput() DashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutput
	ToDashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutputWithContext(context.Context) DashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutput
}

type dashboardDashboardPublishOptionsVisualAxisSortOptionPtrType DashboardDashboardPublishOptionsVisualAxisSortOptionArgs

func DashboardDashboardPublishOptionsVisualAxisSortOptionPtr(v *DashboardDashboardPublishOptionsVisualAxisSortOptionArgs) DashboardDashboardPublishOptionsVisualAxisSortOptionPtrInput {
	return (*dashboardDashboardPublishOptionsVisualAxisSortOptionPtrType)(v)
}

func (*dashboardDashboardPublishOptionsVisualAxisSortOptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardDashboardPublishOptionsVisualAxisSortOption)(nil)).Elem()
}

func (i *dashboardDashboardPublishOptionsVisualAxisSortOptionPtrType) ToDashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutput() DashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutput {
	return i.ToDashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutputWithContext(context.Background())
}

func (i *dashboardDashboardPublishOptionsVisualAxisSortOptionPtrType) ToDashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutput)
}

type DashboardDashboardPublishOptionsVisualAxisSortOptionOutput struct{ *pulumi.OutputState }

func (DashboardDashboardPublishOptionsVisualAxisSortOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsVisualAxisSortOption)(nil)).Elem()
}

func (o DashboardDashboardPublishOptionsVisualAxisSortOptionOutput) ToDashboardDashboardPublishOptionsVisualAxisSortOptionOutput() DashboardDashboardPublishOptionsVisualAxisSortOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsVisualAxisSortOptionOutput) ToDashboardDashboardPublishOptionsVisualAxisSortOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsVisualAxisSortOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsVisualAxisSortOptionOutput) ToDashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutput() DashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutput {
	return o.ToDashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutputWithContext(context.Background())
}

func (o DashboardDashboardPublishOptionsVisualAxisSortOptionOutput) ToDashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardDashboardPublishOptionsVisualAxisSortOption) *DashboardDashboardPublishOptionsVisualAxisSortOption {
		return &v
	}).(DashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutput)
}

// Availability status. Possibles values: ENABLED, DISABLED.
func (o DashboardDashboardPublishOptionsVisualAxisSortOptionOutput) AvailabilityStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardDashboardPublishOptionsVisualAxisSortOption) *string { return v.AvailabilityStatus }).(pulumi.StringPtrOutput)
}

type DashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutput struct{ *pulumi.OutputState }

func (DashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardDashboardPublishOptionsVisualAxisSortOption)(nil)).Elem()
}

func (o DashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutput) ToDashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutput() DashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutput {
	return o
}

func (o DashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutput) ToDashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutput {
	return o
}

func (o DashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutput) Elem() DashboardDashboardPublishOptionsVisualAxisSortOptionOutput {
	return o.ApplyT(func(v *DashboardDashboardPublishOptionsVisualAxisSortOption) DashboardDashboardPublishOptionsVisualAxisSortOption {
		if v != nil {
			return *v
		}
		var ret DashboardDashboardPublishOptionsVisualAxisSortOption
		return ret
	}).(DashboardDashboardPublishOptionsVisualAxisSortOptionOutput)
}

// Availability status. Possibles values: ENABLED, DISABLED.
func (o DashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutput) AvailabilityStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardDashboardPublishOptionsVisualAxisSortOption) *string {
		if v == nil {
			return nil
		}
		return v.AvailabilityStatus
	}).(pulumi.StringPtrOutput)
}

type DashboardDashboardPublishOptionsVisualMenuOption struct {
	// Availability status. Possibles values: ENABLED, DISABLED.
	AvailabilityStatus *string `pulumi:"availabilityStatus"`
}

// DashboardDashboardPublishOptionsVisualMenuOptionInput is an input type that accepts DashboardDashboardPublishOptionsVisualMenuOptionArgs and DashboardDashboardPublishOptionsVisualMenuOptionOutput values.
// You can construct a concrete instance of `DashboardDashboardPublishOptionsVisualMenuOptionInput` via:
//
//	DashboardDashboardPublishOptionsVisualMenuOptionArgs{...}
type DashboardDashboardPublishOptionsVisualMenuOptionInput interface {
	pulumi.Input

	ToDashboardDashboardPublishOptionsVisualMenuOptionOutput() DashboardDashboardPublishOptionsVisualMenuOptionOutput
	ToDashboardDashboardPublishOptionsVisualMenuOptionOutputWithContext(context.Context) DashboardDashboardPublishOptionsVisualMenuOptionOutput
}

type DashboardDashboardPublishOptionsVisualMenuOptionArgs struct {
	// Availability status. Possibles values: ENABLED, DISABLED.
	AvailabilityStatus pulumi.StringPtrInput `pulumi:"availabilityStatus"`
}

func (DashboardDashboardPublishOptionsVisualMenuOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsVisualMenuOption)(nil)).Elem()
}

func (i DashboardDashboardPublishOptionsVisualMenuOptionArgs) ToDashboardDashboardPublishOptionsVisualMenuOptionOutput() DashboardDashboardPublishOptionsVisualMenuOptionOutput {
	return i.ToDashboardDashboardPublishOptionsVisualMenuOptionOutputWithContext(context.Background())
}

func (i DashboardDashboardPublishOptionsVisualMenuOptionArgs) ToDashboardDashboardPublishOptionsVisualMenuOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsVisualMenuOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsVisualMenuOptionOutput)
}

func (i DashboardDashboardPublishOptionsVisualMenuOptionArgs) ToDashboardDashboardPublishOptionsVisualMenuOptionPtrOutput() DashboardDashboardPublishOptionsVisualMenuOptionPtrOutput {
	return i.ToDashboardDashboardPublishOptionsVisualMenuOptionPtrOutputWithContext(context.Background())
}

func (i DashboardDashboardPublishOptionsVisualMenuOptionArgs) ToDashboardDashboardPublishOptionsVisualMenuOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsVisualMenuOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsVisualMenuOptionOutput).ToDashboardDashboardPublishOptionsVisualMenuOptionPtrOutputWithContext(ctx)
}

// DashboardDashboardPublishOptionsVisualMenuOptionPtrInput is an input type that accepts DashboardDashboardPublishOptionsVisualMenuOptionArgs, DashboardDashboardPublishOptionsVisualMenuOptionPtr and DashboardDashboardPublishOptionsVisualMenuOptionPtrOutput values.
// You can construct a concrete instance of `DashboardDashboardPublishOptionsVisualMenuOptionPtrInput` via:
//
//	        DashboardDashboardPublishOptionsVisualMenuOptionArgs{...}
//
//	or:
//
//	        nil
type DashboardDashboardPublishOptionsVisualMenuOptionPtrInput interface {
	pulumi.Input

	ToDashboardDashboardPublishOptionsVisualMenuOptionPtrOutput() DashboardDashboardPublishOptionsVisualMenuOptionPtrOutput
	ToDashboardDashboardPublishOptionsVisualMenuOptionPtrOutputWithContext(context.Context) DashboardDashboardPublishOptionsVisualMenuOptionPtrOutput
}

type dashboardDashboardPublishOptionsVisualMenuOptionPtrType DashboardDashboardPublishOptionsVisualMenuOptionArgs

func DashboardDashboardPublishOptionsVisualMenuOptionPtr(v *DashboardDashboardPublishOptionsVisualMenuOptionArgs) DashboardDashboardPublishOptionsVisualMenuOptionPtrInput {
	return (*dashboardDashboardPublishOptionsVisualMenuOptionPtrType)(v)
}

func (*dashboardDashboardPublishOptionsVisualMenuOptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardDashboardPublishOptionsVisualMenuOption)(nil)).Elem()
}

func (i *dashboardDashboardPublishOptionsVisualMenuOptionPtrType) ToDashboardDashboardPublishOptionsVisualMenuOptionPtrOutput() DashboardDashboardPublishOptionsVisualMenuOptionPtrOutput {
	return i.ToDashboardDashboardPublishOptionsVisualMenuOptionPtrOutputWithContext(context.Background())
}

func (i *dashboardDashboardPublishOptionsVisualMenuOptionPtrType) ToDashboardDashboardPublishOptionsVisualMenuOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsVisualMenuOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDashboardPublishOptionsVisualMenuOptionPtrOutput)
}

type DashboardDashboardPublishOptionsVisualMenuOptionOutput struct{ *pulumi.OutputState }

func (DashboardDashboardPublishOptionsVisualMenuOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDashboardPublishOptionsVisualMenuOption)(nil)).Elem()
}

func (o DashboardDashboardPublishOptionsVisualMenuOptionOutput) ToDashboardDashboardPublishOptionsVisualMenuOptionOutput() DashboardDashboardPublishOptionsVisualMenuOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsVisualMenuOptionOutput) ToDashboardDashboardPublishOptionsVisualMenuOptionOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsVisualMenuOptionOutput {
	return o
}

func (o DashboardDashboardPublishOptionsVisualMenuOptionOutput) ToDashboardDashboardPublishOptionsVisualMenuOptionPtrOutput() DashboardDashboardPublishOptionsVisualMenuOptionPtrOutput {
	return o.ToDashboardDashboardPublishOptionsVisualMenuOptionPtrOutputWithContext(context.Background())
}

func (o DashboardDashboardPublishOptionsVisualMenuOptionOutput) ToDashboardDashboardPublishOptionsVisualMenuOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsVisualMenuOptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardDashboardPublishOptionsVisualMenuOption) *DashboardDashboardPublishOptionsVisualMenuOption {
		return &v
	}).(DashboardDashboardPublishOptionsVisualMenuOptionPtrOutput)
}

// Availability status. Possibles values: ENABLED, DISABLED.
func (o DashboardDashboardPublishOptionsVisualMenuOptionOutput) AvailabilityStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardDashboardPublishOptionsVisualMenuOption) *string { return v.AvailabilityStatus }).(pulumi.StringPtrOutput)
}

type DashboardDashboardPublishOptionsVisualMenuOptionPtrOutput struct{ *pulumi.OutputState }

func (DashboardDashboardPublishOptionsVisualMenuOptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardDashboardPublishOptionsVisualMenuOption)(nil)).Elem()
}

func (o DashboardDashboardPublishOptionsVisualMenuOptionPtrOutput) ToDashboardDashboardPublishOptionsVisualMenuOptionPtrOutput() DashboardDashboardPublishOptionsVisualMenuOptionPtrOutput {
	return o
}

func (o DashboardDashboardPublishOptionsVisualMenuOptionPtrOutput) ToDashboardDashboardPublishOptionsVisualMenuOptionPtrOutputWithContext(ctx context.Context) DashboardDashboardPublishOptionsVisualMenuOptionPtrOutput {
	return o
}

func (o DashboardDashboardPublishOptionsVisualMenuOptionPtrOutput) Elem() DashboardDashboardPublishOptionsVisualMenuOptionOutput {
	return o.ApplyT(func(v *DashboardDashboardPublishOptionsVisualMenuOption) DashboardDashboardPublishOptionsVisualMenuOption {
		if v != nil {
			return *v
		}
		var ret DashboardDashboardPublishOptionsVisualMenuOption
		return ret
	}).(DashboardDashboardPublishOptionsVisualMenuOptionOutput)
}

// Availability status. Possibles values: ENABLED, DISABLED.
func (o DashboardDashboardPublishOptionsVisualMenuOptionPtrOutput) AvailabilityStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardDashboardPublishOptionsVisualMenuOption) *string {
		if v == nil {
			return nil
		}
		return v.AvailabilityStatus
	}).(pulumi.StringPtrOutput)
}

type DashboardParameters struct {
	// A list of parameters that have a data type of date-time. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DateTimeParameter.html).
	DateTimeParameters []DashboardParametersDateTimeParameter `pulumi:"dateTimeParameters"`
	// A list of parameters that have a data type of decimal. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DecimalParameter.html).
	DecimalParameters []DashboardParametersDecimalParameter `pulumi:"decimalParameters"`
	// A list of parameters that have a data type of integer. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_IntegerParameter.html).
	IntegerParameters []DashboardParametersIntegerParameter `pulumi:"integerParameters"`
	// A list of parameters that have a data type of string. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_StringParameter.html).
	StringParameters []DashboardParametersStringParameter `pulumi:"stringParameters"`
}

// DashboardParametersInput is an input type that accepts DashboardParametersArgs and DashboardParametersOutput values.
// You can construct a concrete instance of `DashboardParametersInput` via:
//
//	DashboardParametersArgs{...}
type DashboardParametersInput interface {
	pulumi.Input

	ToDashboardParametersOutput() DashboardParametersOutput
	ToDashboardParametersOutputWithContext(context.Context) DashboardParametersOutput
}

type DashboardParametersArgs struct {
	// A list of parameters that have a data type of date-time. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DateTimeParameter.html).
	DateTimeParameters DashboardParametersDateTimeParameterArrayInput `pulumi:"dateTimeParameters"`
	// A list of parameters that have a data type of decimal. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DecimalParameter.html).
	DecimalParameters DashboardParametersDecimalParameterArrayInput `pulumi:"decimalParameters"`
	// A list of parameters that have a data type of integer. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_IntegerParameter.html).
	IntegerParameters DashboardParametersIntegerParameterArrayInput `pulumi:"integerParameters"`
	// A list of parameters that have a data type of string. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_StringParameter.html).
	StringParameters DashboardParametersStringParameterArrayInput `pulumi:"stringParameters"`
}

func (DashboardParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardParameters)(nil)).Elem()
}

func (i DashboardParametersArgs) ToDashboardParametersOutput() DashboardParametersOutput {
	return i.ToDashboardParametersOutputWithContext(context.Background())
}

func (i DashboardParametersArgs) ToDashboardParametersOutputWithContext(ctx context.Context) DashboardParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardParametersOutput)
}

func (i DashboardParametersArgs) ToDashboardParametersPtrOutput() DashboardParametersPtrOutput {
	return i.ToDashboardParametersPtrOutputWithContext(context.Background())
}

func (i DashboardParametersArgs) ToDashboardParametersPtrOutputWithContext(ctx context.Context) DashboardParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardParametersOutput).ToDashboardParametersPtrOutputWithContext(ctx)
}

// DashboardParametersPtrInput is an input type that accepts DashboardParametersArgs, DashboardParametersPtr and DashboardParametersPtrOutput values.
// You can construct a concrete instance of `DashboardParametersPtrInput` via:
//
//	        DashboardParametersArgs{...}
//
//	or:
//
//	        nil
type DashboardParametersPtrInput interface {
	pulumi.Input

	ToDashboardParametersPtrOutput() DashboardParametersPtrOutput
	ToDashboardParametersPtrOutputWithContext(context.Context) DashboardParametersPtrOutput
}

type dashboardParametersPtrType DashboardParametersArgs

func DashboardParametersPtr(v *DashboardParametersArgs) DashboardParametersPtrInput {
	return (*dashboardParametersPtrType)(v)
}

func (*dashboardParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardParameters)(nil)).Elem()
}

func (i *dashboardParametersPtrType) ToDashboardParametersPtrOutput() DashboardParametersPtrOutput {
	return i.ToDashboardParametersPtrOutputWithContext(context.Background())
}

func (i *dashboardParametersPtrType) ToDashboardParametersPtrOutputWithContext(ctx context.Context) DashboardParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardParametersPtrOutput)
}

type DashboardParametersOutput struct{ *pulumi.OutputState }

func (DashboardParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardParameters)(nil)).Elem()
}

func (o DashboardParametersOutput) ToDashboardParametersOutput() DashboardParametersOutput {
	return o
}

func (o DashboardParametersOutput) ToDashboardParametersOutputWithContext(ctx context.Context) DashboardParametersOutput {
	return o
}

func (o DashboardParametersOutput) ToDashboardParametersPtrOutput() DashboardParametersPtrOutput {
	return o.ToDashboardParametersPtrOutputWithContext(context.Background())
}

func (o DashboardParametersOutput) ToDashboardParametersPtrOutputWithContext(ctx context.Context) DashboardParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardParameters) *DashboardParameters {
		return &v
	}).(DashboardParametersPtrOutput)
}

// A list of parameters that have a data type of date-time. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DateTimeParameter.html).
func (o DashboardParametersOutput) DateTimeParameters() DashboardParametersDateTimeParameterArrayOutput {
	return o.ApplyT(func(v DashboardParameters) []DashboardParametersDateTimeParameter { return v.DateTimeParameters }).(DashboardParametersDateTimeParameterArrayOutput)
}

// A list of parameters that have a data type of decimal. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DecimalParameter.html).
func (o DashboardParametersOutput) DecimalParameters() DashboardParametersDecimalParameterArrayOutput {
	return o.ApplyT(func(v DashboardParameters) []DashboardParametersDecimalParameter { return v.DecimalParameters }).(DashboardParametersDecimalParameterArrayOutput)
}

// A list of parameters that have a data type of integer. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_IntegerParameter.html).
func (o DashboardParametersOutput) IntegerParameters() DashboardParametersIntegerParameterArrayOutput {
	return o.ApplyT(func(v DashboardParameters) []DashboardParametersIntegerParameter { return v.IntegerParameters }).(DashboardParametersIntegerParameterArrayOutput)
}

// A list of parameters that have a data type of string. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_StringParameter.html).
func (o DashboardParametersOutput) StringParameters() DashboardParametersStringParameterArrayOutput {
	return o.ApplyT(func(v DashboardParameters) []DashboardParametersStringParameter { return v.StringParameters }).(DashboardParametersStringParameterArrayOutput)
}

type DashboardParametersPtrOutput struct{ *pulumi.OutputState }

func (DashboardParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardParameters)(nil)).Elem()
}

func (o DashboardParametersPtrOutput) ToDashboardParametersPtrOutput() DashboardParametersPtrOutput {
	return o
}

func (o DashboardParametersPtrOutput) ToDashboardParametersPtrOutputWithContext(ctx context.Context) DashboardParametersPtrOutput {
	return o
}

func (o DashboardParametersPtrOutput) Elem() DashboardParametersOutput {
	return o.ApplyT(func(v *DashboardParameters) DashboardParameters {
		if v != nil {
			return *v
		}
		var ret DashboardParameters
		return ret
	}).(DashboardParametersOutput)
}

// A list of parameters that have a data type of date-time. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DateTimeParameter.html).
func (o DashboardParametersPtrOutput) DateTimeParameters() DashboardParametersDateTimeParameterArrayOutput {
	return o.ApplyT(func(v *DashboardParameters) []DashboardParametersDateTimeParameter {
		if v == nil {
			return nil
		}
		return v.DateTimeParameters
	}).(DashboardParametersDateTimeParameterArrayOutput)
}

// A list of parameters that have a data type of decimal. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DecimalParameter.html).
func (o DashboardParametersPtrOutput) DecimalParameters() DashboardParametersDecimalParameterArrayOutput {
	return o.ApplyT(func(v *DashboardParameters) []DashboardParametersDecimalParameter {
		if v == nil {
			return nil
		}
		return v.DecimalParameters
	}).(DashboardParametersDecimalParameterArrayOutput)
}

// A list of parameters that have a data type of integer. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_IntegerParameter.html).
func (o DashboardParametersPtrOutput) IntegerParameters() DashboardParametersIntegerParameterArrayOutput {
	return o.ApplyT(func(v *DashboardParameters) []DashboardParametersIntegerParameter {
		if v == nil {
			return nil
		}
		return v.IntegerParameters
	}).(DashboardParametersIntegerParameterArrayOutput)
}

// A list of parameters that have a data type of string. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_StringParameter.html).
func (o DashboardParametersPtrOutput) StringParameters() DashboardParametersStringParameterArrayOutput {
	return o.ApplyT(func(v *DashboardParameters) []DashboardParametersStringParameter {
		if v == nil {
			return nil
		}
		return v.StringParameters
	}).(DashboardParametersStringParameterArrayOutput)
}

type DashboardParametersDateTimeParameter struct {
	// Display name for the dashboard.
	Name   string   `pulumi:"name"`
	Values []string `pulumi:"values"`
}

// DashboardParametersDateTimeParameterInput is an input type that accepts DashboardParametersDateTimeParameterArgs and DashboardParametersDateTimeParameterOutput values.
// You can construct a concrete instance of `DashboardParametersDateTimeParameterInput` via:
//
//	DashboardParametersDateTimeParameterArgs{...}
type DashboardParametersDateTimeParameterInput interface {
	pulumi.Input

	ToDashboardParametersDateTimeParameterOutput() DashboardParametersDateTimeParameterOutput
	ToDashboardParametersDateTimeParameterOutputWithContext(context.Context) DashboardParametersDateTimeParameterOutput
}

type DashboardParametersDateTimeParameterArgs struct {
	// Display name for the dashboard.
	Name   pulumi.StringInput      `pulumi:"name"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (DashboardParametersDateTimeParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardParametersDateTimeParameter)(nil)).Elem()
}

func (i DashboardParametersDateTimeParameterArgs) ToDashboardParametersDateTimeParameterOutput() DashboardParametersDateTimeParameterOutput {
	return i.ToDashboardParametersDateTimeParameterOutputWithContext(context.Background())
}

func (i DashboardParametersDateTimeParameterArgs) ToDashboardParametersDateTimeParameterOutputWithContext(ctx context.Context) DashboardParametersDateTimeParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardParametersDateTimeParameterOutput)
}

// DashboardParametersDateTimeParameterArrayInput is an input type that accepts DashboardParametersDateTimeParameterArray and DashboardParametersDateTimeParameterArrayOutput values.
// You can construct a concrete instance of `DashboardParametersDateTimeParameterArrayInput` via:
//
//	DashboardParametersDateTimeParameterArray{ DashboardParametersDateTimeParameterArgs{...} }
type DashboardParametersDateTimeParameterArrayInput interface {
	pulumi.Input

	ToDashboardParametersDateTimeParameterArrayOutput() DashboardParametersDateTimeParameterArrayOutput
	ToDashboardParametersDateTimeParameterArrayOutputWithContext(context.Context) DashboardParametersDateTimeParameterArrayOutput
}

type DashboardParametersDateTimeParameterArray []DashboardParametersDateTimeParameterInput

func (DashboardParametersDateTimeParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardParametersDateTimeParameter)(nil)).Elem()
}

func (i DashboardParametersDateTimeParameterArray) ToDashboardParametersDateTimeParameterArrayOutput() DashboardParametersDateTimeParameterArrayOutput {
	return i.ToDashboardParametersDateTimeParameterArrayOutputWithContext(context.Background())
}

func (i DashboardParametersDateTimeParameterArray) ToDashboardParametersDateTimeParameterArrayOutputWithContext(ctx context.Context) DashboardParametersDateTimeParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardParametersDateTimeParameterArrayOutput)
}

type DashboardParametersDateTimeParameterOutput struct{ *pulumi.OutputState }

func (DashboardParametersDateTimeParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardParametersDateTimeParameter)(nil)).Elem()
}

func (o DashboardParametersDateTimeParameterOutput) ToDashboardParametersDateTimeParameterOutput() DashboardParametersDateTimeParameterOutput {
	return o
}

func (o DashboardParametersDateTimeParameterOutput) ToDashboardParametersDateTimeParameterOutputWithContext(ctx context.Context) DashboardParametersDateTimeParameterOutput {
	return o
}

// Display name for the dashboard.
func (o DashboardParametersDateTimeParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardParametersDateTimeParameter) string { return v.Name }).(pulumi.StringOutput)
}

func (o DashboardParametersDateTimeParameterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardParametersDateTimeParameter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type DashboardParametersDateTimeParameterArrayOutput struct{ *pulumi.OutputState }

func (DashboardParametersDateTimeParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardParametersDateTimeParameter)(nil)).Elem()
}

func (o DashboardParametersDateTimeParameterArrayOutput) ToDashboardParametersDateTimeParameterArrayOutput() DashboardParametersDateTimeParameterArrayOutput {
	return o
}

func (o DashboardParametersDateTimeParameterArrayOutput) ToDashboardParametersDateTimeParameterArrayOutputWithContext(ctx context.Context) DashboardParametersDateTimeParameterArrayOutput {
	return o
}

func (o DashboardParametersDateTimeParameterArrayOutput) Index(i pulumi.IntInput) DashboardParametersDateTimeParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardParametersDateTimeParameter {
		return vs[0].([]DashboardParametersDateTimeParameter)[vs[1].(int)]
	}).(DashboardParametersDateTimeParameterOutput)
}

type DashboardParametersDecimalParameter struct {
	// Display name for the dashboard.
	Name   string    `pulumi:"name"`
	Values []float64 `pulumi:"values"`
}

// DashboardParametersDecimalParameterInput is an input type that accepts DashboardParametersDecimalParameterArgs and DashboardParametersDecimalParameterOutput values.
// You can construct a concrete instance of `DashboardParametersDecimalParameterInput` via:
//
//	DashboardParametersDecimalParameterArgs{...}
type DashboardParametersDecimalParameterInput interface {
	pulumi.Input

	ToDashboardParametersDecimalParameterOutput() DashboardParametersDecimalParameterOutput
	ToDashboardParametersDecimalParameterOutputWithContext(context.Context) DashboardParametersDecimalParameterOutput
}

type DashboardParametersDecimalParameterArgs struct {
	// Display name for the dashboard.
	Name   pulumi.StringInput       `pulumi:"name"`
	Values pulumi.Float64ArrayInput `pulumi:"values"`
}

func (DashboardParametersDecimalParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardParametersDecimalParameter)(nil)).Elem()
}

func (i DashboardParametersDecimalParameterArgs) ToDashboardParametersDecimalParameterOutput() DashboardParametersDecimalParameterOutput {
	return i.ToDashboardParametersDecimalParameterOutputWithContext(context.Background())
}

func (i DashboardParametersDecimalParameterArgs) ToDashboardParametersDecimalParameterOutputWithContext(ctx context.Context) DashboardParametersDecimalParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardParametersDecimalParameterOutput)
}

// DashboardParametersDecimalParameterArrayInput is an input type that accepts DashboardParametersDecimalParameterArray and DashboardParametersDecimalParameterArrayOutput values.
// You can construct a concrete instance of `DashboardParametersDecimalParameterArrayInput` via:
//
//	DashboardParametersDecimalParameterArray{ DashboardParametersDecimalParameterArgs{...} }
type DashboardParametersDecimalParameterArrayInput interface {
	pulumi.Input

	ToDashboardParametersDecimalParameterArrayOutput() DashboardParametersDecimalParameterArrayOutput
	ToDashboardParametersDecimalParameterArrayOutputWithContext(context.Context) DashboardParametersDecimalParameterArrayOutput
}

type DashboardParametersDecimalParameterArray []DashboardParametersDecimalParameterInput

func (DashboardParametersDecimalParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardParametersDecimalParameter)(nil)).Elem()
}

func (i DashboardParametersDecimalParameterArray) ToDashboardParametersDecimalParameterArrayOutput() DashboardParametersDecimalParameterArrayOutput {
	return i.ToDashboardParametersDecimalParameterArrayOutputWithContext(context.Background())
}

func (i DashboardParametersDecimalParameterArray) ToDashboardParametersDecimalParameterArrayOutputWithContext(ctx context.Context) DashboardParametersDecimalParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardParametersDecimalParameterArrayOutput)
}

type DashboardParametersDecimalParameterOutput struct{ *pulumi.OutputState }

func (DashboardParametersDecimalParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardParametersDecimalParameter)(nil)).Elem()
}

func (o DashboardParametersDecimalParameterOutput) ToDashboardParametersDecimalParameterOutput() DashboardParametersDecimalParameterOutput {
	return o
}

func (o DashboardParametersDecimalParameterOutput) ToDashboardParametersDecimalParameterOutputWithContext(ctx context.Context) DashboardParametersDecimalParameterOutput {
	return o
}

// Display name for the dashboard.
func (o DashboardParametersDecimalParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardParametersDecimalParameter) string { return v.Name }).(pulumi.StringOutput)
}

func (o DashboardParametersDecimalParameterOutput) Values() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v DashboardParametersDecimalParameter) []float64 { return v.Values }).(pulumi.Float64ArrayOutput)
}

type DashboardParametersDecimalParameterArrayOutput struct{ *pulumi.OutputState }

func (DashboardParametersDecimalParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardParametersDecimalParameter)(nil)).Elem()
}

func (o DashboardParametersDecimalParameterArrayOutput) ToDashboardParametersDecimalParameterArrayOutput() DashboardParametersDecimalParameterArrayOutput {
	return o
}

func (o DashboardParametersDecimalParameterArrayOutput) ToDashboardParametersDecimalParameterArrayOutputWithContext(ctx context.Context) DashboardParametersDecimalParameterArrayOutput {
	return o
}

func (o DashboardParametersDecimalParameterArrayOutput) Index(i pulumi.IntInput) DashboardParametersDecimalParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardParametersDecimalParameter {
		return vs[0].([]DashboardParametersDecimalParameter)[vs[1].(int)]
	}).(DashboardParametersDecimalParameterOutput)
}

type DashboardParametersIntegerParameter struct {
	// Display name for the dashboard.
	Name   string `pulumi:"name"`
	Values []int  `pulumi:"values"`
}

// DashboardParametersIntegerParameterInput is an input type that accepts DashboardParametersIntegerParameterArgs and DashboardParametersIntegerParameterOutput values.
// You can construct a concrete instance of `DashboardParametersIntegerParameterInput` via:
//
//	DashboardParametersIntegerParameterArgs{...}
type DashboardParametersIntegerParameterInput interface {
	pulumi.Input

	ToDashboardParametersIntegerParameterOutput() DashboardParametersIntegerParameterOutput
	ToDashboardParametersIntegerParameterOutputWithContext(context.Context) DashboardParametersIntegerParameterOutput
}

type DashboardParametersIntegerParameterArgs struct {
	// Display name for the dashboard.
	Name   pulumi.StringInput   `pulumi:"name"`
	Values pulumi.IntArrayInput `pulumi:"values"`
}

func (DashboardParametersIntegerParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardParametersIntegerParameter)(nil)).Elem()
}

func (i DashboardParametersIntegerParameterArgs) ToDashboardParametersIntegerParameterOutput() DashboardParametersIntegerParameterOutput {
	return i.ToDashboardParametersIntegerParameterOutputWithContext(context.Background())
}

func (i DashboardParametersIntegerParameterArgs) ToDashboardParametersIntegerParameterOutputWithContext(ctx context.Context) DashboardParametersIntegerParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardParametersIntegerParameterOutput)
}

// DashboardParametersIntegerParameterArrayInput is an input type that accepts DashboardParametersIntegerParameterArray and DashboardParametersIntegerParameterArrayOutput values.
// You can construct a concrete instance of `DashboardParametersIntegerParameterArrayInput` via:
//
//	DashboardParametersIntegerParameterArray{ DashboardParametersIntegerParameterArgs{...} }
type DashboardParametersIntegerParameterArrayInput interface {
	pulumi.Input

	ToDashboardParametersIntegerParameterArrayOutput() DashboardParametersIntegerParameterArrayOutput
	ToDashboardParametersIntegerParameterArrayOutputWithContext(context.Context) DashboardParametersIntegerParameterArrayOutput
}

type DashboardParametersIntegerParameterArray []DashboardParametersIntegerParameterInput

func (DashboardParametersIntegerParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardParametersIntegerParameter)(nil)).Elem()
}

func (i DashboardParametersIntegerParameterArray) ToDashboardParametersIntegerParameterArrayOutput() DashboardParametersIntegerParameterArrayOutput {
	return i.ToDashboardParametersIntegerParameterArrayOutputWithContext(context.Background())
}

func (i DashboardParametersIntegerParameterArray) ToDashboardParametersIntegerParameterArrayOutputWithContext(ctx context.Context) DashboardParametersIntegerParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardParametersIntegerParameterArrayOutput)
}

type DashboardParametersIntegerParameterOutput struct{ *pulumi.OutputState }

func (DashboardParametersIntegerParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardParametersIntegerParameter)(nil)).Elem()
}

func (o DashboardParametersIntegerParameterOutput) ToDashboardParametersIntegerParameterOutput() DashboardParametersIntegerParameterOutput {
	return o
}

func (o DashboardParametersIntegerParameterOutput) ToDashboardParametersIntegerParameterOutputWithContext(ctx context.Context) DashboardParametersIntegerParameterOutput {
	return o
}

// Display name for the dashboard.
func (o DashboardParametersIntegerParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardParametersIntegerParameter) string { return v.Name }).(pulumi.StringOutput)
}

func (o DashboardParametersIntegerParameterOutput) Values() pulumi.IntArrayOutput {
	return o.ApplyT(func(v DashboardParametersIntegerParameter) []int { return v.Values }).(pulumi.IntArrayOutput)
}

type DashboardParametersIntegerParameterArrayOutput struct{ *pulumi.OutputState }

func (DashboardParametersIntegerParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardParametersIntegerParameter)(nil)).Elem()
}

func (o DashboardParametersIntegerParameterArrayOutput) ToDashboardParametersIntegerParameterArrayOutput() DashboardParametersIntegerParameterArrayOutput {
	return o
}

func (o DashboardParametersIntegerParameterArrayOutput) ToDashboardParametersIntegerParameterArrayOutputWithContext(ctx context.Context) DashboardParametersIntegerParameterArrayOutput {
	return o
}

func (o DashboardParametersIntegerParameterArrayOutput) Index(i pulumi.IntInput) DashboardParametersIntegerParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardParametersIntegerParameter {
		return vs[0].([]DashboardParametersIntegerParameter)[vs[1].(int)]
	}).(DashboardParametersIntegerParameterOutput)
}

type DashboardParametersStringParameter struct {
	// Display name for the dashboard.
	Name   string   `pulumi:"name"`
	Values []string `pulumi:"values"`
}

// DashboardParametersStringParameterInput is an input type that accepts DashboardParametersStringParameterArgs and DashboardParametersStringParameterOutput values.
// You can construct a concrete instance of `DashboardParametersStringParameterInput` via:
//
//	DashboardParametersStringParameterArgs{...}
type DashboardParametersStringParameterInput interface {
	pulumi.Input

	ToDashboardParametersStringParameterOutput() DashboardParametersStringParameterOutput
	ToDashboardParametersStringParameterOutputWithContext(context.Context) DashboardParametersStringParameterOutput
}

type DashboardParametersStringParameterArgs struct {
	// Display name for the dashboard.
	Name   pulumi.StringInput      `pulumi:"name"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (DashboardParametersStringParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardParametersStringParameter)(nil)).Elem()
}

func (i DashboardParametersStringParameterArgs) ToDashboardParametersStringParameterOutput() DashboardParametersStringParameterOutput {
	return i.ToDashboardParametersStringParameterOutputWithContext(context.Background())
}

func (i DashboardParametersStringParameterArgs) ToDashboardParametersStringParameterOutputWithContext(ctx context.Context) DashboardParametersStringParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardParametersStringParameterOutput)
}

// DashboardParametersStringParameterArrayInput is an input type that accepts DashboardParametersStringParameterArray and DashboardParametersStringParameterArrayOutput values.
// You can construct a concrete instance of `DashboardParametersStringParameterArrayInput` via:
//
//	DashboardParametersStringParameterArray{ DashboardParametersStringParameterArgs{...} }
type DashboardParametersStringParameterArrayInput interface {
	pulumi.Input

	ToDashboardParametersStringParameterArrayOutput() DashboardParametersStringParameterArrayOutput
	ToDashboardParametersStringParameterArrayOutputWithContext(context.Context) DashboardParametersStringParameterArrayOutput
}

type DashboardParametersStringParameterArray []DashboardParametersStringParameterInput

func (DashboardParametersStringParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardParametersStringParameter)(nil)).Elem()
}

func (i DashboardParametersStringParameterArray) ToDashboardParametersStringParameterArrayOutput() DashboardParametersStringParameterArrayOutput {
	return i.ToDashboardParametersStringParameterArrayOutputWithContext(context.Background())
}

func (i DashboardParametersStringParameterArray) ToDashboardParametersStringParameterArrayOutputWithContext(ctx context.Context) DashboardParametersStringParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardParametersStringParameterArrayOutput)
}

type DashboardParametersStringParameterOutput struct{ *pulumi.OutputState }

func (DashboardParametersStringParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardParametersStringParameter)(nil)).Elem()
}

func (o DashboardParametersStringParameterOutput) ToDashboardParametersStringParameterOutput() DashboardParametersStringParameterOutput {
	return o
}

func (o DashboardParametersStringParameterOutput) ToDashboardParametersStringParameterOutputWithContext(ctx context.Context) DashboardParametersStringParameterOutput {
	return o
}

// Display name for the dashboard.
func (o DashboardParametersStringParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardParametersStringParameter) string { return v.Name }).(pulumi.StringOutput)
}

func (o DashboardParametersStringParameterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardParametersStringParameter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type DashboardParametersStringParameterArrayOutput struct{ *pulumi.OutputState }

func (DashboardParametersStringParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardParametersStringParameter)(nil)).Elem()
}

func (o DashboardParametersStringParameterArrayOutput) ToDashboardParametersStringParameterArrayOutput() DashboardParametersStringParameterArrayOutput {
	return o
}

func (o DashboardParametersStringParameterArrayOutput) ToDashboardParametersStringParameterArrayOutputWithContext(ctx context.Context) DashboardParametersStringParameterArrayOutput {
	return o
}

func (o DashboardParametersStringParameterArrayOutput) Index(i pulumi.IntInput) DashboardParametersStringParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardParametersStringParameter {
		return vs[0].([]DashboardParametersStringParameter)[vs[1].(int)]
	}).(DashboardParametersStringParameterOutput)
}

type DashboardPermission struct {
	// List of IAM actions to grant or revoke permissions on.
	Actions []string `pulumi:"actions"`
	// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
	Principal string `pulumi:"principal"`
}

// DashboardPermissionInput is an input type that accepts DashboardPermissionArgs and DashboardPermissionOutput values.
// You can construct a concrete instance of `DashboardPermissionInput` via:
//
//	DashboardPermissionArgs{...}
type DashboardPermissionInput interface {
	pulumi.Input

	ToDashboardPermissionOutput() DashboardPermissionOutput
	ToDashboardPermissionOutputWithContext(context.Context) DashboardPermissionOutput
}

type DashboardPermissionArgs struct {
	// List of IAM actions to grant or revoke permissions on.
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
	Principal pulumi.StringInput `pulumi:"principal"`
}

func (DashboardPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardPermission)(nil)).Elem()
}

func (i DashboardPermissionArgs) ToDashboardPermissionOutput() DashboardPermissionOutput {
	return i.ToDashboardPermissionOutputWithContext(context.Background())
}

func (i DashboardPermissionArgs) ToDashboardPermissionOutputWithContext(ctx context.Context) DashboardPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardPermissionOutput)
}

// DashboardPermissionArrayInput is an input type that accepts DashboardPermissionArray and DashboardPermissionArrayOutput values.
// You can construct a concrete instance of `DashboardPermissionArrayInput` via:
//
//	DashboardPermissionArray{ DashboardPermissionArgs{...} }
type DashboardPermissionArrayInput interface {
	pulumi.Input

	ToDashboardPermissionArrayOutput() DashboardPermissionArrayOutput
	ToDashboardPermissionArrayOutputWithContext(context.Context) DashboardPermissionArrayOutput
}

type DashboardPermissionArray []DashboardPermissionInput

func (DashboardPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardPermission)(nil)).Elem()
}

func (i DashboardPermissionArray) ToDashboardPermissionArrayOutput() DashboardPermissionArrayOutput {
	return i.ToDashboardPermissionArrayOutputWithContext(context.Background())
}

func (i DashboardPermissionArray) ToDashboardPermissionArrayOutputWithContext(ctx context.Context) DashboardPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardPermissionArrayOutput)
}

type DashboardPermissionOutput struct{ *pulumi.OutputState }

func (DashboardPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardPermission)(nil)).Elem()
}

func (o DashboardPermissionOutput) ToDashboardPermissionOutput() DashboardPermissionOutput {
	return o
}

func (o DashboardPermissionOutput) ToDashboardPermissionOutputWithContext(ctx context.Context) DashboardPermissionOutput {
	return o
}

// List of IAM actions to grant or revoke permissions on.
func (o DashboardPermissionOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardPermission) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
func (o DashboardPermissionOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardPermission) string { return v.Principal }).(pulumi.StringOutput)
}

type DashboardPermissionArrayOutput struct{ *pulumi.OutputState }

func (DashboardPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardPermission)(nil)).Elem()
}

func (o DashboardPermissionArrayOutput) ToDashboardPermissionArrayOutput() DashboardPermissionArrayOutput {
	return o
}

func (o DashboardPermissionArrayOutput) ToDashboardPermissionArrayOutputWithContext(ctx context.Context) DashboardPermissionArrayOutput {
	return o
}

func (o DashboardPermissionArrayOutput) Index(i pulumi.IntInput) DashboardPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardPermission {
		return vs[0].([]DashboardPermission)[vs[1].(int)]
	}).(DashboardPermissionOutput)
}

type DashboardSourceEntity struct {
	// The source template. See source_template.
	SourceTemplate *DashboardSourceEntitySourceTemplate `pulumi:"sourceTemplate"`
}

// DashboardSourceEntityInput is an input type that accepts DashboardSourceEntityArgs and DashboardSourceEntityOutput values.
// You can construct a concrete instance of `DashboardSourceEntityInput` via:
//
//	DashboardSourceEntityArgs{...}
type DashboardSourceEntityInput interface {
	pulumi.Input

	ToDashboardSourceEntityOutput() DashboardSourceEntityOutput
	ToDashboardSourceEntityOutputWithContext(context.Context) DashboardSourceEntityOutput
}

type DashboardSourceEntityArgs struct {
	// The source template. See source_template.
	SourceTemplate DashboardSourceEntitySourceTemplatePtrInput `pulumi:"sourceTemplate"`
}

func (DashboardSourceEntityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSourceEntity)(nil)).Elem()
}

func (i DashboardSourceEntityArgs) ToDashboardSourceEntityOutput() DashboardSourceEntityOutput {
	return i.ToDashboardSourceEntityOutputWithContext(context.Background())
}

func (i DashboardSourceEntityArgs) ToDashboardSourceEntityOutputWithContext(ctx context.Context) DashboardSourceEntityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSourceEntityOutput)
}

func (i DashboardSourceEntityArgs) ToDashboardSourceEntityPtrOutput() DashboardSourceEntityPtrOutput {
	return i.ToDashboardSourceEntityPtrOutputWithContext(context.Background())
}

func (i DashboardSourceEntityArgs) ToDashboardSourceEntityPtrOutputWithContext(ctx context.Context) DashboardSourceEntityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSourceEntityOutput).ToDashboardSourceEntityPtrOutputWithContext(ctx)
}

// DashboardSourceEntityPtrInput is an input type that accepts DashboardSourceEntityArgs, DashboardSourceEntityPtr and DashboardSourceEntityPtrOutput values.
// You can construct a concrete instance of `DashboardSourceEntityPtrInput` via:
//
//	        DashboardSourceEntityArgs{...}
//
//	or:
//
//	        nil
type DashboardSourceEntityPtrInput interface {
	pulumi.Input

	ToDashboardSourceEntityPtrOutput() DashboardSourceEntityPtrOutput
	ToDashboardSourceEntityPtrOutputWithContext(context.Context) DashboardSourceEntityPtrOutput
}

type dashboardSourceEntityPtrType DashboardSourceEntityArgs

func DashboardSourceEntityPtr(v *DashboardSourceEntityArgs) DashboardSourceEntityPtrInput {
	return (*dashboardSourceEntityPtrType)(v)
}

func (*dashboardSourceEntityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSourceEntity)(nil)).Elem()
}

func (i *dashboardSourceEntityPtrType) ToDashboardSourceEntityPtrOutput() DashboardSourceEntityPtrOutput {
	return i.ToDashboardSourceEntityPtrOutputWithContext(context.Background())
}

func (i *dashboardSourceEntityPtrType) ToDashboardSourceEntityPtrOutputWithContext(ctx context.Context) DashboardSourceEntityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSourceEntityPtrOutput)
}

type DashboardSourceEntityOutput struct{ *pulumi.OutputState }

func (DashboardSourceEntityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSourceEntity)(nil)).Elem()
}

func (o DashboardSourceEntityOutput) ToDashboardSourceEntityOutput() DashboardSourceEntityOutput {
	return o
}

func (o DashboardSourceEntityOutput) ToDashboardSourceEntityOutputWithContext(ctx context.Context) DashboardSourceEntityOutput {
	return o
}

func (o DashboardSourceEntityOutput) ToDashboardSourceEntityPtrOutput() DashboardSourceEntityPtrOutput {
	return o.ToDashboardSourceEntityPtrOutputWithContext(context.Background())
}

func (o DashboardSourceEntityOutput) ToDashboardSourceEntityPtrOutputWithContext(ctx context.Context) DashboardSourceEntityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardSourceEntity) *DashboardSourceEntity {
		return &v
	}).(DashboardSourceEntityPtrOutput)
}

// The source template. See source_template.
func (o DashboardSourceEntityOutput) SourceTemplate() DashboardSourceEntitySourceTemplatePtrOutput {
	return o.ApplyT(func(v DashboardSourceEntity) *DashboardSourceEntitySourceTemplate { return v.SourceTemplate }).(DashboardSourceEntitySourceTemplatePtrOutput)
}

type DashboardSourceEntityPtrOutput struct{ *pulumi.OutputState }

func (DashboardSourceEntityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSourceEntity)(nil)).Elem()
}

func (o DashboardSourceEntityPtrOutput) ToDashboardSourceEntityPtrOutput() DashboardSourceEntityPtrOutput {
	return o
}

func (o DashboardSourceEntityPtrOutput) ToDashboardSourceEntityPtrOutputWithContext(ctx context.Context) DashboardSourceEntityPtrOutput {
	return o
}

func (o DashboardSourceEntityPtrOutput) Elem() DashboardSourceEntityOutput {
	return o.ApplyT(func(v *DashboardSourceEntity) DashboardSourceEntity {
		if v != nil {
			return *v
		}
		var ret DashboardSourceEntity
		return ret
	}).(DashboardSourceEntityOutput)
}

// The source template. See source_template.
func (o DashboardSourceEntityPtrOutput) SourceTemplate() DashboardSourceEntitySourceTemplatePtrOutput {
	return o.ApplyT(func(v *DashboardSourceEntity) *DashboardSourceEntitySourceTemplate {
		if v == nil {
			return nil
		}
		return v.SourceTemplate
	}).(DashboardSourceEntitySourceTemplatePtrOutput)
}

type DashboardSourceEntitySourceTemplate struct {
	// The Amazon Resource Name (ARN) of the resource.
	Arn string `pulumi:"arn"`
	// List of dataset references. See data_set_references.
	DataSetReferences []DashboardSourceEntitySourceTemplateDataSetReference `pulumi:"dataSetReferences"`
}

// DashboardSourceEntitySourceTemplateInput is an input type that accepts DashboardSourceEntitySourceTemplateArgs and DashboardSourceEntitySourceTemplateOutput values.
// You can construct a concrete instance of `DashboardSourceEntitySourceTemplateInput` via:
//
//	DashboardSourceEntitySourceTemplateArgs{...}
type DashboardSourceEntitySourceTemplateInput interface {
	pulumi.Input

	ToDashboardSourceEntitySourceTemplateOutput() DashboardSourceEntitySourceTemplateOutput
	ToDashboardSourceEntitySourceTemplateOutputWithContext(context.Context) DashboardSourceEntitySourceTemplateOutput
}

type DashboardSourceEntitySourceTemplateArgs struct {
	// The Amazon Resource Name (ARN) of the resource.
	Arn pulumi.StringInput `pulumi:"arn"`
	// List of dataset references. See data_set_references.
	DataSetReferences DashboardSourceEntitySourceTemplateDataSetReferenceArrayInput `pulumi:"dataSetReferences"`
}

func (DashboardSourceEntitySourceTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSourceEntitySourceTemplate)(nil)).Elem()
}

func (i DashboardSourceEntitySourceTemplateArgs) ToDashboardSourceEntitySourceTemplateOutput() DashboardSourceEntitySourceTemplateOutput {
	return i.ToDashboardSourceEntitySourceTemplateOutputWithContext(context.Background())
}

func (i DashboardSourceEntitySourceTemplateArgs) ToDashboardSourceEntitySourceTemplateOutputWithContext(ctx context.Context) DashboardSourceEntitySourceTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSourceEntitySourceTemplateOutput)
}

func (i DashboardSourceEntitySourceTemplateArgs) ToDashboardSourceEntitySourceTemplatePtrOutput() DashboardSourceEntitySourceTemplatePtrOutput {
	return i.ToDashboardSourceEntitySourceTemplatePtrOutputWithContext(context.Background())
}

func (i DashboardSourceEntitySourceTemplateArgs) ToDashboardSourceEntitySourceTemplatePtrOutputWithContext(ctx context.Context) DashboardSourceEntitySourceTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSourceEntitySourceTemplateOutput).ToDashboardSourceEntitySourceTemplatePtrOutputWithContext(ctx)
}

// DashboardSourceEntitySourceTemplatePtrInput is an input type that accepts DashboardSourceEntitySourceTemplateArgs, DashboardSourceEntitySourceTemplatePtr and DashboardSourceEntitySourceTemplatePtrOutput values.
// You can construct a concrete instance of `DashboardSourceEntitySourceTemplatePtrInput` via:
//
//	        DashboardSourceEntitySourceTemplateArgs{...}
//
//	or:
//
//	        nil
type DashboardSourceEntitySourceTemplatePtrInput interface {
	pulumi.Input

	ToDashboardSourceEntitySourceTemplatePtrOutput() DashboardSourceEntitySourceTemplatePtrOutput
	ToDashboardSourceEntitySourceTemplatePtrOutputWithContext(context.Context) DashboardSourceEntitySourceTemplatePtrOutput
}

type dashboardSourceEntitySourceTemplatePtrType DashboardSourceEntitySourceTemplateArgs

func DashboardSourceEntitySourceTemplatePtr(v *DashboardSourceEntitySourceTemplateArgs) DashboardSourceEntitySourceTemplatePtrInput {
	return (*dashboardSourceEntitySourceTemplatePtrType)(v)
}

func (*dashboardSourceEntitySourceTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSourceEntitySourceTemplate)(nil)).Elem()
}

func (i *dashboardSourceEntitySourceTemplatePtrType) ToDashboardSourceEntitySourceTemplatePtrOutput() DashboardSourceEntitySourceTemplatePtrOutput {
	return i.ToDashboardSourceEntitySourceTemplatePtrOutputWithContext(context.Background())
}

func (i *dashboardSourceEntitySourceTemplatePtrType) ToDashboardSourceEntitySourceTemplatePtrOutputWithContext(ctx context.Context) DashboardSourceEntitySourceTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSourceEntitySourceTemplatePtrOutput)
}

type DashboardSourceEntitySourceTemplateOutput struct{ *pulumi.OutputState }

func (DashboardSourceEntitySourceTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSourceEntitySourceTemplate)(nil)).Elem()
}

func (o DashboardSourceEntitySourceTemplateOutput) ToDashboardSourceEntitySourceTemplateOutput() DashboardSourceEntitySourceTemplateOutput {
	return o
}

func (o DashboardSourceEntitySourceTemplateOutput) ToDashboardSourceEntitySourceTemplateOutputWithContext(ctx context.Context) DashboardSourceEntitySourceTemplateOutput {
	return o
}

func (o DashboardSourceEntitySourceTemplateOutput) ToDashboardSourceEntitySourceTemplatePtrOutput() DashboardSourceEntitySourceTemplatePtrOutput {
	return o.ToDashboardSourceEntitySourceTemplatePtrOutputWithContext(context.Background())
}

func (o DashboardSourceEntitySourceTemplateOutput) ToDashboardSourceEntitySourceTemplatePtrOutputWithContext(ctx context.Context) DashboardSourceEntitySourceTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardSourceEntitySourceTemplate) *DashboardSourceEntitySourceTemplate {
		return &v
	}).(DashboardSourceEntitySourceTemplatePtrOutput)
}

// The Amazon Resource Name (ARN) of the resource.
func (o DashboardSourceEntitySourceTemplateOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardSourceEntitySourceTemplate) string { return v.Arn }).(pulumi.StringOutput)
}

// List of dataset references. See data_set_references.
func (o DashboardSourceEntitySourceTemplateOutput) DataSetReferences() DashboardSourceEntitySourceTemplateDataSetReferenceArrayOutput {
	return o.ApplyT(func(v DashboardSourceEntitySourceTemplate) []DashboardSourceEntitySourceTemplateDataSetReference {
		return v.DataSetReferences
	}).(DashboardSourceEntitySourceTemplateDataSetReferenceArrayOutput)
}

type DashboardSourceEntitySourceTemplatePtrOutput struct{ *pulumi.OutputState }

func (DashboardSourceEntitySourceTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSourceEntitySourceTemplate)(nil)).Elem()
}

func (o DashboardSourceEntitySourceTemplatePtrOutput) ToDashboardSourceEntitySourceTemplatePtrOutput() DashboardSourceEntitySourceTemplatePtrOutput {
	return o
}

func (o DashboardSourceEntitySourceTemplatePtrOutput) ToDashboardSourceEntitySourceTemplatePtrOutputWithContext(ctx context.Context) DashboardSourceEntitySourceTemplatePtrOutput {
	return o
}

func (o DashboardSourceEntitySourceTemplatePtrOutput) Elem() DashboardSourceEntitySourceTemplateOutput {
	return o.ApplyT(func(v *DashboardSourceEntitySourceTemplate) DashboardSourceEntitySourceTemplate {
		if v != nil {
			return *v
		}
		var ret DashboardSourceEntitySourceTemplate
		return ret
	}).(DashboardSourceEntitySourceTemplateOutput)
}

// The Amazon Resource Name (ARN) of the resource.
func (o DashboardSourceEntitySourceTemplatePtrOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardSourceEntitySourceTemplate) *string {
		if v == nil {
			return nil
		}
		return &v.Arn
	}).(pulumi.StringPtrOutput)
}

// List of dataset references. See data_set_references.
func (o DashboardSourceEntitySourceTemplatePtrOutput) DataSetReferences() DashboardSourceEntitySourceTemplateDataSetReferenceArrayOutput {
	return o.ApplyT(func(v *DashboardSourceEntitySourceTemplate) []DashboardSourceEntitySourceTemplateDataSetReference {
		if v == nil {
			return nil
		}
		return v.DataSetReferences
	}).(DashboardSourceEntitySourceTemplateDataSetReferenceArrayOutput)
}

type DashboardSourceEntitySourceTemplateDataSetReference struct {
	// Dataset Amazon Resource Name (ARN).
	DataSetArn string `pulumi:"dataSetArn"`
	// Dataset placeholder.
	DataSetPlaceholder string `pulumi:"dataSetPlaceholder"`
}

// DashboardSourceEntitySourceTemplateDataSetReferenceInput is an input type that accepts DashboardSourceEntitySourceTemplateDataSetReferenceArgs and DashboardSourceEntitySourceTemplateDataSetReferenceOutput values.
// You can construct a concrete instance of `DashboardSourceEntitySourceTemplateDataSetReferenceInput` via:
//
//	DashboardSourceEntitySourceTemplateDataSetReferenceArgs{...}
type DashboardSourceEntitySourceTemplateDataSetReferenceInput interface {
	pulumi.Input

	ToDashboardSourceEntitySourceTemplateDataSetReferenceOutput() DashboardSourceEntitySourceTemplateDataSetReferenceOutput
	ToDashboardSourceEntitySourceTemplateDataSetReferenceOutputWithContext(context.Context) DashboardSourceEntitySourceTemplateDataSetReferenceOutput
}

type DashboardSourceEntitySourceTemplateDataSetReferenceArgs struct {
	// Dataset Amazon Resource Name (ARN).
	DataSetArn pulumi.StringInput `pulumi:"dataSetArn"`
	// Dataset placeholder.
	DataSetPlaceholder pulumi.StringInput `pulumi:"dataSetPlaceholder"`
}

func (DashboardSourceEntitySourceTemplateDataSetReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSourceEntitySourceTemplateDataSetReference)(nil)).Elem()
}

func (i DashboardSourceEntitySourceTemplateDataSetReferenceArgs) ToDashboardSourceEntitySourceTemplateDataSetReferenceOutput() DashboardSourceEntitySourceTemplateDataSetReferenceOutput {
	return i.ToDashboardSourceEntitySourceTemplateDataSetReferenceOutputWithContext(context.Background())
}

func (i DashboardSourceEntitySourceTemplateDataSetReferenceArgs) ToDashboardSourceEntitySourceTemplateDataSetReferenceOutputWithContext(ctx context.Context) DashboardSourceEntitySourceTemplateDataSetReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSourceEntitySourceTemplateDataSetReferenceOutput)
}

// DashboardSourceEntitySourceTemplateDataSetReferenceArrayInput is an input type that accepts DashboardSourceEntitySourceTemplateDataSetReferenceArray and DashboardSourceEntitySourceTemplateDataSetReferenceArrayOutput values.
// You can construct a concrete instance of `DashboardSourceEntitySourceTemplateDataSetReferenceArrayInput` via:
//
//	DashboardSourceEntitySourceTemplateDataSetReferenceArray{ DashboardSourceEntitySourceTemplateDataSetReferenceArgs{...} }
type DashboardSourceEntitySourceTemplateDataSetReferenceArrayInput interface {
	pulumi.Input

	ToDashboardSourceEntitySourceTemplateDataSetReferenceArrayOutput() DashboardSourceEntitySourceTemplateDataSetReferenceArrayOutput
	ToDashboardSourceEntitySourceTemplateDataSetReferenceArrayOutputWithContext(context.Context) DashboardSourceEntitySourceTemplateDataSetReferenceArrayOutput
}

type DashboardSourceEntitySourceTemplateDataSetReferenceArray []DashboardSourceEntitySourceTemplateDataSetReferenceInput

func (DashboardSourceEntitySourceTemplateDataSetReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardSourceEntitySourceTemplateDataSetReference)(nil)).Elem()
}

func (i DashboardSourceEntitySourceTemplateDataSetReferenceArray) ToDashboardSourceEntitySourceTemplateDataSetReferenceArrayOutput() DashboardSourceEntitySourceTemplateDataSetReferenceArrayOutput {
	return i.ToDashboardSourceEntitySourceTemplateDataSetReferenceArrayOutputWithContext(context.Background())
}

func (i DashboardSourceEntitySourceTemplateDataSetReferenceArray) ToDashboardSourceEntitySourceTemplateDataSetReferenceArrayOutputWithContext(ctx context.Context) DashboardSourceEntitySourceTemplateDataSetReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSourceEntitySourceTemplateDataSetReferenceArrayOutput)
}

type DashboardSourceEntitySourceTemplateDataSetReferenceOutput struct{ *pulumi.OutputState }

func (DashboardSourceEntitySourceTemplateDataSetReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSourceEntitySourceTemplateDataSetReference)(nil)).Elem()
}

func (o DashboardSourceEntitySourceTemplateDataSetReferenceOutput) ToDashboardSourceEntitySourceTemplateDataSetReferenceOutput() DashboardSourceEntitySourceTemplateDataSetReferenceOutput {
	return o
}

func (o DashboardSourceEntitySourceTemplateDataSetReferenceOutput) ToDashboardSourceEntitySourceTemplateDataSetReferenceOutputWithContext(ctx context.Context) DashboardSourceEntitySourceTemplateDataSetReferenceOutput {
	return o
}

// Dataset Amazon Resource Name (ARN).
func (o DashboardSourceEntitySourceTemplateDataSetReferenceOutput) DataSetArn() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardSourceEntitySourceTemplateDataSetReference) string { return v.DataSetArn }).(pulumi.StringOutput)
}

// Dataset placeholder.
func (o DashboardSourceEntitySourceTemplateDataSetReferenceOutput) DataSetPlaceholder() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardSourceEntitySourceTemplateDataSetReference) string { return v.DataSetPlaceholder }).(pulumi.StringOutput)
}

type DashboardSourceEntitySourceTemplateDataSetReferenceArrayOutput struct{ *pulumi.OutputState }

func (DashboardSourceEntitySourceTemplateDataSetReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardSourceEntitySourceTemplateDataSetReference)(nil)).Elem()
}

func (o DashboardSourceEntitySourceTemplateDataSetReferenceArrayOutput) ToDashboardSourceEntitySourceTemplateDataSetReferenceArrayOutput() DashboardSourceEntitySourceTemplateDataSetReferenceArrayOutput {
	return o
}

func (o DashboardSourceEntitySourceTemplateDataSetReferenceArrayOutput) ToDashboardSourceEntitySourceTemplateDataSetReferenceArrayOutputWithContext(ctx context.Context) DashboardSourceEntitySourceTemplateDataSetReferenceArrayOutput {
	return o
}

func (o DashboardSourceEntitySourceTemplateDataSetReferenceArrayOutput) Index(i pulumi.IntInput) DashboardSourceEntitySourceTemplateDataSetReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardSourceEntitySourceTemplateDataSetReference {
		return vs[0].([]DashboardSourceEntitySourceTemplateDataSetReference)[vs[1].(int)]
	}).(DashboardSourceEntitySourceTemplateDataSetReferenceOutput)
}

type DataSetColumnGroup struct {
	// Geospatial column group that denotes a hierarchy. See geo_spatial_column_group.
	GeoSpatialColumnGroup *DataSetColumnGroupGeoSpatialColumnGroup `pulumi:"geoSpatialColumnGroup"`
}

// DataSetColumnGroupInput is an input type that accepts DataSetColumnGroupArgs and DataSetColumnGroupOutput values.
// You can construct a concrete instance of `DataSetColumnGroupInput` via:
//
//	DataSetColumnGroupArgs{...}
type DataSetColumnGroupInput interface {
	pulumi.Input

	ToDataSetColumnGroupOutput() DataSetColumnGroupOutput
	ToDataSetColumnGroupOutputWithContext(context.Context) DataSetColumnGroupOutput
}

type DataSetColumnGroupArgs struct {
	// Geospatial column group that denotes a hierarchy. See geo_spatial_column_group.
	GeoSpatialColumnGroup DataSetColumnGroupGeoSpatialColumnGroupPtrInput `pulumi:"geoSpatialColumnGroup"`
}

func (DataSetColumnGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetColumnGroup)(nil)).Elem()
}

func (i DataSetColumnGroupArgs) ToDataSetColumnGroupOutput() DataSetColumnGroupOutput {
	return i.ToDataSetColumnGroupOutputWithContext(context.Background())
}

func (i DataSetColumnGroupArgs) ToDataSetColumnGroupOutputWithContext(ctx context.Context) DataSetColumnGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetColumnGroupOutput)
}

// DataSetColumnGroupArrayInput is an input type that accepts DataSetColumnGroupArray and DataSetColumnGroupArrayOutput values.
// You can construct a concrete instance of `DataSetColumnGroupArrayInput` via:
//
//	DataSetColumnGroupArray{ DataSetColumnGroupArgs{...} }
type DataSetColumnGroupArrayInput interface {
	pulumi.Input

	ToDataSetColumnGroupArrayOutput() DataSetColumnGroupArrayOutput
	ToDataSetColumnGroupArrayOutputWithContext(context.Context) DataSetColumnGroupArrayOutput
}

type DataSetColumnGroupArray []DataSetColumnGroupInput

func (DataSetColumnGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetColumnGroup)(nil)).Elem()
}

func (i DataSetColumnGroupArray) ToDataSetColumnGroupArrayOutput() DataSetColumnGroupArrayOutput {
	return i.ToDataSetColumnGroupArrayOutputWithContext(context.Background())
}

func (i DataSetColumnGroupArray) ToDataSetColumnGroupArrayOutputWithContext(ctx context.Context) DataSetColumnGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetColumnGroupArrayOutput)
}

type DataSetColumnGroupOutput struct{ *pulumi.OutputState }

func (DataSetColumnGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetColumnGroup)(nil)).Elem()
}

func (o DataSetColumnGroupOutput) ToDataSetColumnGroupOutput() DataSetColumnGroupOutput {
	return o
}

func (o DataSetColumnGroupOutput) ToDataSetColumnGroupOutputWithContext(ctx context.Context) DataSetColumnGroupOutput {
	return o
}

// Geospatial column group that denotes a hierarchy. See geo_spatial_column_group.
func (o DataSetColumnGroupOutput) GeoSpatialColumnGroup() DataSetColumnGroupGeoSpatialColumnGroupPtrOutput {
	return o.ApplyT(func(v DataSetColumnGroup) *DataSetColumnGroupGeoSpatialColumnGroup { return v.GeoSpatialColumnGroup }).(DataSetColumnGroupGeoSpatialColumnGroupPtrOutput)
}

type DataSetColumnGroupArrayOutput struct{ *pulumi.OutputState }

func (DataSetColumnGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetColumnGroup)(nil)).Elem()
}

func (o DataSetColumnGroupArrayOutput) ToDataSetColumnGroupArrayOutput() DataSetColumnGroupArrayOutput {
	return o
}

func (o DataSetColumnGroupArrayOutput) ToDataSetColumnGroupArrayOutputWithContext(ctx context.Context) DataSetColumnGroupArrayOutput {
	return o
}

func (o DataSetColumnGroupArrayOutput) Index(i pulumi.IntInput) DataSetColumnGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSetColumnGroup {
		return vs[0].([]DataSetColumnGroup)[vs[1].(int)]
	}).(DataSetColumnGroupOutput)
}

type DataSetColumnGroupGeoSpatialColumnGroup struct {
	// Columns in this hierarchy.
	Columns []string `pulumi:"columns"`
	// Country code. Valid values are `US`.
	CountryCode string `pulumi:"countryCode"`
	// A display name for the hierarchy.
	Name string `pulumi:"name"`
}

// DataSetColumnGroupGeoSpatialColumnGroupInput is an input type that accepts DataSetColumnGroupGeoSpatialColumnGroupArgs and DataSetColumnGroupGeoSpatialColumnGroupOutput values.
// You can construct a concrete instance of `DataSetColumnGroupGeoSpatialColumnGroupInput` via:
//
//	DataSetColumnGroupGeoSpatialColumnGroupArgs{...}
type DataSetColumnGroupGeoSpatialColumnGroupInput interface {
	pulumi.Input

	ToDataSetColumnGroupGeoSpatialColumnGroupOutput() DataSetColumnGroupGeoSpatialColumnGroupOutput
	ToDataSetColumnGroupGeoSpatialColumnGroupOutputWithContext(context.Context) DataSetColumnGroupGeoSpatialColumnGroupOutput
}

type DataSetColumnGroupGeoSpatialColumnGroupArgs struct {
	// Columns in this hierarchy.
	Columns pulumi.StringArrayInput `pulumi:"columns"`
	// Country code. Valid values are `US`.
	CountryCode pulumi.StringInput `pulumi:"countryCode"`
	// A display name for the hierarchy.
	Name pulumi.StringInput `pulumi:"name"`
}

func (DataSetColumnGroupGeoSpatialColumnGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetColumnGroupGeoSpatialColumnGroup)(nil)).Elem()
}

func (i DataSetColumnGroupGeoSpatialColumnGroupArgs) ToDataSetColumnGroupGeoSpatialColumnGroupOutput() DataSetColumnGroupGeoSpatialColumnGroupOutput {
	return i.ToDataSetColumnGroupGeoSpatialColumnGroupOutputWithContext(context.Background())
}

func (i DataSetColumnGroupGeoSpatialColumnGroupArgs) ToDataSetColumnGroupGeoSpatialColumnGroupOutputWithContext(ctx context.Context) DataSetColumnGroupGeoSpatialColumnGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetColumnGroupGeoSpatialColumnGroupOutput)
}

func (i DataSetColumnGroupGeoSpatialColumnGroupArgs) ToDataSetColumnGroupGeoSpatialColumnGroupPtrOutput() DataSetColumnGroupGeoSpatialColumnGroupPtrOutput {
	return i.ToDataSetColumnGroupGeoSpatialColumnGroupPtrOutputWithContext(context.Background())
}

func (i DataSetColumnGroupGeoSpatialColumnGroupArgs) ToDataSetColumnGroupGeoSpatialColumnGroupPtrOutputWithContext(ctx context.Context) DataSetColumnGroupGeoSpatialColumnGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetColumnGroupGeoSpatialColumnGroupOutput).ToDataSetColumnGroupGeoSpatialColumnGroupPtrOutputWithContext(ctx)
}

// DataSetColumnGroupGeoSpatialColumnGroupPtrInput is an input type that accepts DataSetColumnGroupGeoSpatialColumnGroupArgs, DataSetColumnGroupGeoSpatialColumnGroupPtr and DataSetColumnGroupGeoSpatialColumnGroupPtrOutput values.
// You can construct a concrete instance of `DataSetColumnGroupGeoSpatialColumnGroupPtrInput` via:
//
//	        DataSetColumnGroupGeoSpatialColumnGroupArgs{...}
//
//	or:
//
//	        nil
type DataSetColumnGroupGeoSpatialColumnGroupPtrInput interface {
	pulumi.Input

	ToDataSetColumnGroupGeoSpatialColumnGroupPtrOutput() DataSetColumnGroupGeoSpatialColumnGroupPtrOutput
	ToDataSetColumnGroupGeoSpatialColumnGroupPtrOutputWithContext(context.Context) DataSetColumnGroupGeoSpatialColumnGroupPtrOutput
}

type dataSetColumnGroupGeoSpatialColumnGroupPtrType DataSetColumnGroupGeoSpatialColumnGroupArgs

func DataSetColumnGroupGeoSpatialColumnGroupPtr(v *DataSetColumnGroupGeoSpatialColumnGroupArgs) DataSetColumnGroupGeoSpatialColumnGroupPtrInput {
	return (*dataSetColumnGroupGeoSpatialColumnGroupPtrType)(v)
}

func (*dataSetColumnGroupGeoSpatialColumnGroupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetColumnGroupGeoSpatialColumnGroup)(nil)).Elem()
}

func (i *dataSetColumnGroupGeoSpatialColumnGroupPtrType) ToDataSetColumnGroupGeoSpatialColumnGroupPtrOutput() DataSetColumnGroupGeoSpatialColumnGroupPtrOutput {
	return i.ToDataSetColumnGroupGeoSpatialColumnGroupPtrOutputWithContext(context.Background())
}

func (i *dataSetColumnGroupGeoSpatialColumnGroupPtrType) ToDataSetColumnGroupGeoSpatialColumnGroupPtrOutputWithContext(ctx context.Context) DataSetColumnGroupGeoSpatialColumnGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetColumnGroupGeoSpatialColumnGroupPtrOutput)
}

type DataSetColumnGroupGeoSpatialColumnGroupOutput struct{ *pulumi.OutputState }

func (DataSetColumnGroupGeoSpatialColumnGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetColumnGroupGeoSpatialColumnGroup)(nil)).Elem()
}

func (o DataSetColumnGroupGeoSpatialColumnGroupOutput) ToDataSetColumnGroupGeoSpatialColumnGroupOutput() DataSetColumnGroupGeoSpatialColumnGroupOutput {
	return o
}

func (o DataSetColumnGroupGeoSpatialColumnGroupOutput) ToDataSetColumnGroupGeoSpatialColumnGroupOutputWithContext(ctx context.Context) DataSetColumnGroupGeoSpatialColumnGroupOutput {
	return o
}

func (o DataSetColumnGroupGeoSpatialColumnGroupOutput) ToDataSetColumnGroupGeoSpatialColumnGroupPtrOutput() DataSetColumnGroupGeoSpatialColumnGroupPtrOutput {
	return o.ToDataSetColumnGroupGeoSpatialColumnGroupPtrOutputWithContext(context.Background())
}

func (o DataSetColumnGroupGeoSpatialColumnGroupOutput) ToDataSetColumnGroupGeoSpatialColumnGroupPtrOutputWithContext(ctx context.Context) DataSetColumnGroupGeoSpatialColumnGroupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetColumnGroupGeoSpatialColumnGroup) *DataSetColumnGroupGeoSpatialColumnGroup {
		return &v
	}).(DataSetColumnGroupGeoSpatialColumnGroupPtrOutput)
}

// Columns in this hierarchy.
func (o DataSetColumnGroupGeoSpatialColumnGroupOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataSetColumnGroupGeoSpatialColumnGroup) []string { return v.Columns }).(pulumi.StringArrayOutput)
}

// Country code. Valid values are `US`.
func (o DataSetColumnGroupGeoSpatialColumnGroupOutput) CountryCode() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetColumnGroupGeoSpatialColumnGroup) string { return v.CountryCode }).(pulumi.StringOutput)
}

// A display name for the hierarchy.
func (o DataSetColumnGroupGeoSpatialColumnGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetColumnGroupGeoSpatialColumnGroup) string { return v.Name }).(pulumi.StringOutput)
}

type DataSetColumnGroupGeoSpatialColumnGroupPtrOutput struct{ *pulumi.OutputState }

func (DataSetColumnGroupGeoSpatialColumnGroupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetColumnGroupGeoSpatialColumnGroup)(nil)).Elem()
}

func (o DataSetColumnGroupGeoSpatialColumnGroupPtrOutput) ToDataSetColumnGroupGeoSpatialColumnGroupPtrOutput() DataSetColumnGroupGeoSpatialColumnGroupPtrOutput {
	return o
}

func (o DataSetColumnGroupGeoSpatialColumnGroupPtrOutput) ToDataSetColumnGroupGeoSpatialColumnGroupPtrOutputWithContext(ctx context.Context) DataSetColumnGroupGeoSpatialColumnGroupPtrOutput {
	return o
}

func (o DataSetColumnGroupGeoSpatialColumnGroupPtrOutput) Elem() DataSetColumnGroupGeoSpatialColumnGroupOutput {
	return o.ApplyT(func(v *DataSetColumnGroupGeoSpatialColumnGroup) DataSetColumnGroupGeoSpatialColumnGroup {
		if v != nil {
			return *v
		}
		var ret DataSetColumnGroupGeoSpatialColumnGroup
		return ret
	}).(DataSetColumnGroupGeoSpatialColumnGroupOutput)
}

// Columns in this hierarchy.
func (o DataSetColumnGroupGeoSpatialColumnGroupPtrOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DataSetColumnGroupGeoSpatialColumnGroup) []string {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(pulumi.StringArrayOutput)
}

// Country code. Valid values are `US`.
func (o DataSetColumnGroupGeoSpatialColumnGroupPtrOutput) CountryCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetColumnGroupGeoSpatialColumnGroup) *string {
		if v == nil {
			return nil
		}
		return &v.CountryCode
	}).(pulumi.StringPtrOutput)
}

// A display name for the hierarchy.
func (o DataSetColumnGroupGeoSpatialColumnGroupPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetColumnGroupGeoSpatialColumnGroup) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

type DataSetColumnLevelPermissionRule struct {
	// An array of column names.
	ColumnNames []string `pulumi:"columnNames"`
	// An array of ARNs for Amazon QuickSight users or groups.
	Principals []string `pulumi:"principals"`
}

// DataSetColumnLevelPermissionRuleInput is an input type that accepts DataSetColumnLevelPermissionRuleArgs and DataSetColumnLevelPermissionRuleOutput values.
// You can construct a concrete instance of `DataSetColumnLevelPermissionRuleInput` via:
//
//	DataSetColumnLevelPermissionRuleArgs{...}
type DataSetColumnLevelPermissionRuleInput interface {
	pulumi.Input

	ToDataSetColumnLevelPermissionRuleOutput() DataSetColumnLevelPermissionRuleOutput
	ToDataSetColumnLevelPermissionRuleOutputWithContext(context.Context) DataSetColumnLevelPermissionRuleOutput
}

type DataSetColumnLevelPermissionRuleArgs struct {
	// An array of column names.
	ColumnNames pulumi.StringArrayInput `pulumi:"columnNames"`
	// An array of ARNs for Amazon QuickSight users or groups.
	Principals pulumi.StringArrayInput `pulumi:"principals"`
}

func (DataSetColumnLevelPermissionRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetColumnLevelPermissionRule)(nil)).Elem()
}

func (i DataSetColumnLevelPermissionRuleArgs) ToDataSetColumnLevelPermissionRuleOutput() DataSetColumnLevelPermissionRuleOutput {
	return i.ToDataSetColumnLevelPermissionRuleOutputWithContext(context.Background())
}

func (i DataSetColumnLevelPermissionRuleArgs) ToDataSetColumnLevelPermissionRuleOutputWithContext(ctx context.Context) DataSetColumnLevelPermissionRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetColumnLevelPermissionRuleOutput)
}

// DataSetColumnLevelPermissionRuleArrayInput is an input type that accepts DataSetColumnLevelPermissionRuleArray and DataSetColumnLevelPermissionRuleArrayOutput values.
// You can construct a concrete instance of `DataSetColumnLevelPermissionRuleArrayInput` via:
//
//	DataSetColumnLevelPermissionRuleArray{ DataSetColumnLevelPermissionRuleArgs{...} }
type DataSetColumnLevelPermissionRuleArrayInput interface {
	pulumi.Input

	ToDataSetColumnLevelPermissionRuleArrayOutput() DataSetColumnLevelPermissionRuleArrayOutput
	ToDataSetColumnLevelPermissionRuleArrayOutputWithContext(context.Context) DataSetColumnLevelPermissionRuleArrayOutput
}

type DataSetColumnLevelPermissionRuleArray []DataSetColumnLevelPermissionRuleInput

func (DataSetColumnLevelPermissionRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetColumnLevelPermissionRule)(nil)).Elem()
}

func (i DataSetColumnLevelPermissionRuleArray) ToDataSetColumnLevelPermissionRuleArrayOutput() DataSetColumnLevelPermissionRuleArrayOutput {
	return i.ToDataSetColumnLevelPermissionRuleArrayOutputWithContext(context.Background())
}

func (i DataSetColumnLevelPermissionRuleArray) ToDataSetColumnLevelPermissionRuleArrayOutputWithContext(ctx context.Context) DataSetColumnLevelPermissionRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetColumnLevelPermissionRuleArrayOutput)
}

type DataSetColumnLevelPermissionRuleOutput struct{ *pulumi.OutputState }

func (DataSetColumnLevelPermissionRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetColumnLevelPermissionRule)(nil)).Elem()
}

func (o DataSetColumnLevelPermissionRuleOutput) ToDataSetColumnLevelPermissionRuleOutput() DataSetColumnLevelPermissionRuleOutput {
	return o
}

func (o DataSetColumnLevelPermissionRuleOutput) ToDataSetColumnLevelPermissionRuleOutputWithContext(ctx context.Context) DataSetColumnLevelPermissionRuleOutput {
	return o
}

// An array of column names.
func (o DataSetColumnLevelPermissionRuleOutput) ColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataSetColumnLevelPermissionRule) []string { return v.ColumnNames }).(pulumi.StringArrayOutput)
}

// An array of ARNs for Amazon QuickSight users or groups.
func (o DataSetColumnLevelPermissionRuleOutput) Principals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataSetColumnLevelPermissionRule) []string { return v.Principals }).(pulumi.StringArrayOutput)
}

type DataSetColumnLevelPermissionRuleArrayOutput struct{ *pulumi.OutputState }

func (DataSetColumnLevelPermissionRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetColumnLevelPermissionRule)(nil)).Elem()
}

func (o DataSetColumnLevelPermissionRuleArrayOutput) ToDataSetColumnLevelPermissionRuleArrayOutput() DataSetColumnLevelPermissionRuleArrayOutput {
	return o
}

func (o DataSetColumnLevelPermissionRuleArrayOutput) ToDataSetColumnLevelPermissionRuleArrayOutputWithContext(ctx context.Context) DataSetColumnLevelPermissionRuleArrayOutput {
	return o
}

func (o DataSetColumnLevelPermissionRuleArrayOutput) Index(i pulumi.IntInput) DataSetColumnLevelPermissionRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSetColumnLevelPermissionRule {
		return vs[0].([]DataSetColumnLevelPermissionRule)[vs[1].(int)]
	}).(DataSetColumnLevelPermissionRuleOutput)
}

type DataSetDataSetUsageConfiguration struct {
	// Controls whether a child dataset of a direct query can use this dataset as a source.
	DisableUseAsDirectQuerySource *bool `pulumi:"disableUseAsDirectQuerySource"`
	// Controls whether a child dataset that's stored in QuickSight can use this dataset as a source.
	DisableUseAsImportedSource *bool `pulumi:"disableUseAsImportedSource"`
}

// DataSetDataSetUsageConfigurationInput is an input type that accepts DataSetDataSetUsageConfigurationArgs and DataSetDataSetUsageConfigurationOutput values.
// You can construct a concrete instance of `DataSetDataSetUsageConfigurationInput` via:
//
//	DataSetDataSetUsageConfigurationArgs{...}
type DataSetDataSetUsageConfigurationInput interface {
	pulumi.Input

	ToDataSetDataSetUsageConfigurationOutput() DataSetDataSetUsageConfigurationOutput
	ToDataSetDataSetUsageConfigurationOutputWithContext(context.Context) DataSetDataSetUsageConfigurationOutput
}

type DataSetDataSetUsageConfigurationArgs struct {
	// Controls whether a child dataset of a direct query can use this dataset as a source.
	DisableUseAsDirectQuerySource pulumi.BoolPtrInput `pulumi:"disableUseAsDirectQuerySource"`
	// Controls whether a child dataset that's stored in QuickSight can use this dataset as a source.
	DisableUseAsImportedSource pulumi.BoolPtrInput `pulumi:"disableUseAsImportedSource"`
}

func (DataSetDataSetUsageConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetDataSetUsageConfiguration)(nil)).Elem()
}

func (i DataSetDataSetUsageConfigurationArgs) ToDataSetDataSetUsageConfigurationOutput() DataSetDataSetUsageConfigurationOutput {
	return i.ToDataSetDataSetUsageConfigurationOutputWithContext(context.Background())
}

func (i DataSetDataSetUsageConfigurationArgs) ToDataSetDataSetUsageConfigurationOutputWithContext(ctx context.Context) DataSetDataSetUsageConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetDataSetUsageConfigurationOutput)
}

func (i DataSetDataSetUsageConfigurationArgs) ToDataSetDataSetUsageConfigurationPtrOutput() DataSetDataSetUsageConfigurationPtrOutput {
	return i.ToDataSetDataSetUsageConfigurationPtrOutputWithContext(context.Background())
}

func (i DataSetDataSetUsageConfigurationArgs) ToDataSetDataSetUsageConfigurationPtrOutputWithContext(ctx context.Context) DataSetDataSetUsageConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetDataSetUsageConfigurationOutput).ToDataSetDataSetUsageConfigurationPtrOutputWithContext(ctx)
}

// DataSetDataSetUsageConfigurationPtrInput is an input type that accepts DataSetDataSetUsageConfigurationArgs, DataSetDataSetUsageConfigurationPtr and DataSetDataSetUsageConfigurationPtrOutput values.
// You can construct a concrete instance of `DataSetDataSetUsageConfigurationPtrInput` via:
//
//	        DataSetDataSetUsageConfigurationArgs{...}
//
//	or:
//
//	        nil
type DataSetDataSetUsageConfigurationPtrInput interface {
	pulumi.Input

	ToDataSetDataSetUsageConfigurationPtrOutput() DataSetDataSetUsageConfigurationPtrOutput
	ToDataSetDataSetUsageConfigurationPtrOutputWithContext(context.Context) DataSetDataSetUsageConfigurationPtrOutput
}

type dataSetDataSetUsageConfigurationPtrType DataSetDataSetUsageConfigurationArgs

func DataSetDataSetUsageConfigurationPtr(v *DataSetDataSetUsageConfigurationArgs) DataSetDataSetUsageConfigurationPtrInput {
	return (*dataSetDataSetUsageConfigurationPtrType)(v)
}

func (*dataSetDataSetUsageConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetDataSetUsageConfiguration)(nil)).Elem()
}

func (i *dataSetDataSetUsageConfigurationPtrType) ToDataSetDataSetUsageConfigurationPtrOutput() DataSetDataSetUsageConfigurationPtrOutput {
	return i.ToDataSetDataSetUsageConfigurationPtrOutputWithContext(context.Background())
}

func (i *dataSetDataSetUsageConfigurationPtrType) ToDataSetDataSetUsageConfigurationPtrOutputWithContext(ctx context.Context) DataSetDataSetUsageConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetDataSetUsageConfigurationPtrOutput)
}

type DataSetDataSetUsageConfigurationOutput struct{ *pulumi.OutputState }

func (DataSetDataSetUsageConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetDataSetUsageConfiguration)(nil)).Elem()
}

func (o DataSetDataSetUsageConfigurationOutput) ToDataSetDataSetUsageConfigurationOutput() DataSetDataSetUsageConfigurationOutput {
	return o
}

func (o DataSetDataSetUsageConfigurationOutput) ToDataSetDataSetUsageConfigurationOutputWithContext(ctx context.Context) DataSetDataSetUsageConfigurationOutput {
	return o
}

func (o DataSetDataSetUsageConfigurationOutput) ToDataSetDataSetUsageConfigurationPtrOutput() DataSetDataSetUsageConfigurationPtrOutput {
	return o.ToDataSetDataSetUsageConfigurationPtrOutputWithContext(context.Background())
}

func (o DataSetDataSetUsageConfigurationOutput) ToDataSetDataSetUsageConfigurationPtrOutputWithContext(ctx context.Context) DataSetDataSetUsageConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetDataSetUsageConfiguration) *DataSetDataSetUsageConfiguration {
		return &v
	}).(DataSetDataSetUsageConfigurationPtrOutput)
}

// Controls whether a child dataset of a direct query can use this dataset as a source.
func (o DataSetDataSetUsageConfigurationOutput) DisableUseAsDirectQuerySource() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataSetDataSetUsageConfiguration) *bool { return v.DisableUseAsDirectQuerySource }).(pulumi.BoolPtrOutput)
}

// Controls whether a child dataset that's stored in QuickSight can use this dataset as a source.
func (o DataSetDataSetUsageConfigurationOutput) DisableUseAsImportedSource() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataSetDataSetUsageConfiguration) *bool { return v.DisableUseAsImportedSource }).(pulumi.BoolPtrOutput)
}

type DataSetDataSetUsageConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DataSetDataSetUsageConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetDataSetUsageConfiguration)(nil)).Elem()
}

func (o DataSetDataSetUsageConfigurationPtrOutput) ToDataSetDataSetUsageConfigurationPtrOutput() DataSetDataSetUsageConfigurationPtrOutput {
	return o
}

func (o DataSetDataSetUsageConfigurationPtrOutput) ToDataSetDataSetUsageConfigurationPtrOutputWithContext(ctx context.Context) DataSetDataSetUsageConfigurationPtrOutput {
	return o
}

func (o DataSetDataSetUsageConfigurationPtrOutput) Elem() DataSetDataSetUsageConfigurationOutput {
	return o.ApplyT(func(v *DataSetDataSetUsageConfiguration) DataSetDataSetUsageConfiguration {
		if v != nil {
			return *v
		}
		var ret DataSetDataSetUsageConfiguration
		return ret
	}).(DataSetDataSetUsageConfigurationOutput)
}

// Controls whether a child dataset of a direct query can use this dataset as a source.
func (o DataSetDataSetUsageConfigurationPtrOutput) DisableUseAsDirectQuerySource() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataSetDataSetUsageConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.DisableUseAsDirectQuerySource
	}).(pulumi.BoolPtrOutput)
}

// Controls whether a child dataset that's stored in QuickSight can use this dataset as a source.
func (o DataSetDataSetUsageConfigurationPtrOutput) DisableUseAsImportedSource() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataSetDataSetUsageConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.DisableUseAsImportedSource
	}).(pulumi.BoolPtrOutput)
}

type DataSetFieldFolder struct {
	// An array of column names to add to the folder. A column can only be in one folder.
	Columns []string `pulumi:"columns"`
	// Field folder description.
	Description *string `pulumi:"description"`
	// Key of the field folder map.
	FieldFoldersId string `pulumi:"fieldFoldersId"`
}

// DataSetFieldFolderInput is an input type that accepts DataSetFieldFolderArgs and DataSetFieldFolderOutput values.
// You can construct a concrete instance of `DataSetFieldFolderInput` via:
//
//	DataSetFieldFolderArgs{...}
type DataSetFieldFolderInput interface {
	pulumi.Input

	ToDataSetFieldFolderOutput() DataSetFieldFolderOutput
	ToDataSetFieldFolderOutputWithContext(context.Context) DataSetFieldFolderOutput
}

type DataSetFieldFolderArgs struct {
	// An array of column names to add to the folder. A column can only be in one folder.
	Columns pulumi.StringArrayInput `pulumi:"columns"`
	// Field folder description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Key of the field folder map.
	FieldFoldersId pulumi.StringInput `pulumi:"fieldFoldersId"`
}

func (DataSetFieldFolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetFieldFolder)(nil)).Elem()
}

func (i DataSetFieldFolderArgs) ToDataSetFieldFolderOutput() DataSetFieldFolderOutput {
	return i.ToDataSetFieldFolderOutputWithContext(context.Background())
}

func (i DataSetFieldFolderArgs) ToDataSetFieldFolderOutputWithContext(ctx context.Context) DataSetFieldFolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetFieldFolderOutput)
}

// DataSetFieldFolderArrayInput is an input type that accepts DataSetFieldFolderArray and DataSetFieldFolderArrayOutput values.
// You can construct a concrete instance of `DataSetFieldFolderArrayInput` via:
//
//	DataSetFieldFolderArray{ DataSetFieldFolderArgs{...} }
type DataSetFieldFolderArrayInput interface {
	pulumi.Input

	ToDataSetFieldFolderArrayOutput() DataSetFieldFolderArrayOutput
	ToDataSetFieldFolderArrayOutputWithContext(context.Context) DataSetFieldFolderArrayOutput
}

type DataSetFieldFolderArray []DataSetFieldFolderInput

func (DataSetFieldFolderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetFieldFolder)(nil)).Elem()
}

func (i DataSetFieldFolderArray) ToDataSetFieldFolderArrayOutput() DataSetFieldFolderArrayOutput {
	return i.ToDataSetFieldFolderArrayOutputWithContext(context.Background())
}

func (i DataSetFieldFolderArray) ToDataSetFieldFolderArrayOutputWithContext(ctx context.Context) DataSetFieldFolderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetFieldFolderArrayOutput)
}

type DataSetFieldFolderOutput struct{ *pulumi.OutputState }

func (DataSetFieldFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetFieldFolder)(nil)).Elem()
}

func (o DataSetFieldFolderOutput) ToDataSetFieldFolderOutput() DataSetFieldFolderOutput {
	return o
}

func (o DataSetFieldFolderOutput) ToDataSetFieldFolderOutputWithContext(ctx context.Context) DataSetFieldFolderOutput {
	return o
}

// An array of column names to add to the folder. A column can only be in one folder.
func (o DataSetFieldFolderOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataSetFieldFolder) []string { return v.Columns }).(pulumi.StringArrayOutput)
}

// Field folder description.
func (o DataSetFieldFolderOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSetFieldFolder) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Key of the field folder map.
func (o DataSetFieldFolderOutput) FieldFoldersId() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetFieldFolder) string { return v.FieldFoldersId }).(pulumi.StringOutput)
}

type DataSetFieldFolderArrayOutput struct{ *pulumi.OutputState }

func (DataSetFieldFolderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetFieldFolder)(nil)).Elem()
}

func (o DataSetFieldFolderArrayOutput) ToDataSetFieldFolderArrayOutput() DataSetFieldFolderArrayOutput {
	return o
}

func (o DataSetFieldFolderArrayOutput) ToDataSetFieldFolderArrayOutputWithContext(ctx context.Context) DataSetFieldFolderArrayOutput {
	return o
}

func (o DataSetFieldFolderArrayOutput) Index(i pulumi.IntInput) DataSetFieldFolderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSetFieldFolder {
		return vs[0].([]DataSetFieldFolder)[vs[1].(int)]
	}).(DataSetFieldFolderOutput)
}

type DataSetLogicalTableMap struct {
	// A display name for the logical table.
	Alias string `pulumi:"alias"`
	// Transform operations that act on this logical table. For this structure to be valid, only one of the attributes can be non-null. See data_transforms.
	DataTransforms []DataSetLogicalTableMapDataTransform `pulumi:"dataTransforms"`
	// Key of the logical table map.
	LogicalTableMapId string `pulumi:"logicalTableMapId"`
	// Source of this logical table. See source.
	Source DataSetLogicalTableMapSource `pulumi:"source"`
}

// DataSetLogicalTableMapInput is an input type that accepts DataSetLogicalTableMap and DataSetLogicalTableMapOutput values.
// You can construct a concrete instance of `DataSetLogicalTableMapInput` via:
//
//	DataSetLogicalTableMap{ "key": DataSetLogicalTableArgs{...} }
type DataSetLogicalTableMapInput interface {
	pulumi.Input

	ToDataSetLogicalTableMapOutput() DataSetLogicalTableMapOutput
	ToDataSetLogicalTableMapOutputWithContext(context.Context) DataSetLogicalTableMapOutput
}

type DataSetLogicalTableMapArgs struct {
	// A display name for the logical table.
	Alias pulumi.StringInput `pulumi:"alias"`
	// Transform operations that act on this logical table. For this structure to be valid, only one of the attributes can be non-null. See data_transforms.
	DataTransforms DataSetLogicalTableMapDataTransformArrayInput `pulumi:"dataTransforms"`
	// Key of the logical table map.
	LogicalTableMapId pulumi.StringInput `pulumi:"logicalTableMapId"`
	// Source of this logical table. See source.
	Source DataSetLogicalTableMapSourceInput `pulumi:"source"`
}

func (DataSetLogicalTableMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMap)(nil)).Elem()
}

func (i DataSetLogicalTableMapArgs) ToDataSetLogicalTableMapOutput() DataSetLogicalTableMapOutput {
	return i.ToDataSetLogicalTableMapOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapArgs) ToDataSetLogicalTableMapOutputWithContext(ctx context.Context) DataSetLogicalTableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapOutput)
}

// DataSetLogicalTableMapArrayInput is an input type that accepts DataSetLogicalTableMapArray and DataSetLogicalTableMapArrayOutput values.
// You can construct a concrete instance of `DataSetLogicalTableMapArrayInput` via:
//
//	DataSetLogicalTableMapArray{ DataSetLogicalTableMapArgs{...} }
type DataSetLogicalTableMapArrayInput interface {
	pulumi.Input

	ToDataSetLogicalTableMapArrayOutput() DataSetLogicalTableMapArrayOutput
	ToDataSetLogicalTableMapArrayOutputWithContext(context.Context) DataSetLogicalTableMapArrayOutput
}

type DataSetLogicalTableMapArray []DataSetLogicalTableMapInput

func (DataSetLogicalTableMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetLogicalTableMap)(nil)).Elem()
}

func (i DataSetLogicalTableMapArray) ToDataSetLogicalTableMapArrayOutput() DataSetLogicalTableMapArrayOutput {
	return i.ToDataSetLogicalTableMapArrayOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapArray) ToDataSetLogicalTableMapArrayOutputWithContext(ctx context.Context) DataSetLogicalTableMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapArrayOutput)
}

type DataSetLogicalTableMapOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMap)(nil)).Elem()
}

func (o DataSetLogicalTableMapOutput) ToDataSetLogicalTableMapOutput() DataSetLogicalTableMapOutput {
	return o
}

func (o DataSetLogicalTableMapOutput) ToDataSetLogicalTableMapOutputWithContext(ctx context.Context) DataSetLogicalTableMapOutput {
	return o
}

// A display name for the logical table.
func (o DataSetLogicalTableMapOutput) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetLogicalTableMap) string { return v.Alias }).(pulumi.StringOutput)
}

// Transform operations that act on this logical table. For this structure to be valid, only one of the attributes can be non-null. See data_transforms.
func (o DataSetLogicalTableMapOutput) DataTransforms() DataSetLogicalTableMapDataTransformArrayOutput {
	return o.ApplyT(func(v DataSetLogicalTableMap) []DataSetLogicalTableMapDataTransform { return v.DataTransforms }).(DataSetLogicalTableMapDataTransformArrayOutput)
}

// Key of the logical table map.
func (o DataSetLogicalTableMapOutput) LogicalTableMapId() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetLogicalTableMap) string { return v.LogicalTableMapId }).(pulumi.StringOutput)
}

// Source of this logical table. See source.
func (o DataSetLogicalTableMapOutput) Source() DataSetLogicalTableMapSourceOutput {
	return o.ApplyT(func(v DataSetLogicalTableMap) DataSetLogicalTableMapSource { return v.Source }).(DataSetLogicalTableMapSourceOutput)
}

type DataSetLogicalTableMapArrayOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetLogicalTableMap)(nil)).Elem()
}

func (o DataSetLogicalTableMapArrayOutput) ToDataSetLogicalTableMapArrayOutput() DataSetLogicalTableMapArrayOutput {
	return o
}

func (o DataSetLogicalTableMapArrayOutput) ToDataSetLogicalTableMapArrayOutputWithContext(ctx context.Context) DataSetLogicalTableMapArrayOutput {
	return o
}

func (o DataSetLogicalTableMapArrayOutput) Index(i pulumi.IntInput) DataSetLogicalTableMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSetLogicalTableMap {
		return vs[0].([]DataSetLogicalTableMap)[vs[1].(int)]
	}).(DataSetLogicalTableMapOutput)
}

type DataSetLogicalTableMapDataTransform struct {
	// A transform operation that casts a column to a different type. See cast_column_type_operation.
	CastColumnTypeOperation *DataSetLogicalTableMapDataTransformCastColumnTypeOperation `pulumi:"castColumnTypeOperation"`
	// An operation that creates calculated columns. Columns created in one such operation form a lexical closure. See create_columns_operation.
	CreateColumnsOperation *DataSetLogicalTableMapDataTransformCreateColumnsOperation `pulumi:"createColumnsOperation"`
	// An operation that filters rows based on some condition. See filter_operation.
	FilterOperation *DataSetLogicalTableMapDataTransformFilterOperation `pulumi:"filterOperation"`
	// An operation that projects columns. Operations that come after a projection can only refer to projected columns. See project_operation.
	ProjectOperation *DataSetLogicalTableMapDataTransformProjectOperation `pulumi:"projectOperation"`
	// An operation that renames a column. See rename_column_operation.
	RenameColumnOperation *DataSetLogicalTableMapDataTransformRenameColumnOperation `pulumi:"renameColumnOperation"`
	// An operation that tags a column with additional information. See tag_column_operation.
	TagColumnOperation *DataSetLogicalTableMapDataTransformTagColumnOperation `pulumi:"tagColumnOperation"`
	// A transform operation that removes tags associated with a column. See untag_column_operation.
	UntagColumnOperation *DataSetLogicalTableMapDataTransformUntagColumnOperation `pulumi:"untagColumnOperation"`
}

// DataSetLogicalTableMapDataTransformInput is an input type that accepts DataSetLogicalTableMapDataTransformArgs and DataSetLogicalTableMapDataTransformOutput values.
// You can construct a concrete instance of `DataSetLogicalTableMapDataTransformInput` via:
//
//	DataSetLogicalTableMapDataTransformArgs{...}
type DataSetLogicalTableMapDataTransformInput interface {
	pulumi.Input

	ToDataSetLogicalTableMapDataTransformOutput() DataSetLogicalTableMapDataTransformOutput
	ToDataSetLogicalTableMapDataTransformOutputWithContext(context.Context) DataSetLogicalTableMapDataTransformOutput
}

type DataSetLogicalTableMapDataTransformArgs struct {
	// A transform operation that casts a column to a different type. See cast_column_type_operation.
	CastColumnTypeOperation DataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrInput `pulumi:"castColumnTypeOperation"`
	// An operation that creates calculated columns. Columns created in one such operation form a lexical closure. See create_columns_operation.
	CreateColumnsOperation DataSetLogicalTableMapDataTransformCreateColumnsOperationPtrInput `pulumi:"createColumnsOperation"`
	// An operation that filters rows based on some condition. See filter_operation.
	FilterOperation DataSetLogicalTableMapDataTransformFilterOperationPtrInput `pulumi:"filterOperation"`
	// An operation that projects columns. Operations that come after a projection can only refer to projected columns. See project_operation.
	ProjectOperation DataSetLogicalTableMapDataTransformProjectOperationPtrInput `pulumi:"projectOperation"`
	// An operation that renames a column. See rename_column_operation.
	RenameColumnOperation DataSetLogicalTableMapDataTransformRenameColumnOperationPtrInput `pulumi:"renameColumnOperation"`
	// An operation that tags a column with additional information. See tag_column_operation.
	TagColumnOperation DataSetLogicalTableMapDataTransformTagColumnOperationPtrInput `pulumi:"tagColumnOperation"`
	// A transform operation that removes tags associated with a column. See untag_column_operation.
	UntagColumnOperation DataSetLogicalTableMapDataTransformUntagColumnOperationPtrInput `pulumi:"untagColumnOperation"`
}

func (DataSetLogicalTableMapDataTransformArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransform)(nil)).Elem()
}

func (i DataSetLogicalTableMapDataTransformArgs) ToDataSetLogicalTableMapDataTransformOutput() DataSetLogicalTableMapDataTransformOutput {
	return i.ToDataSetLogicalTableMapDataTransformOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapDataTransformArgs) ToDataSetLogicalTableMapDataTransformOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformOutput)
}

// DataSetLogicalTableMapDataTransformArrayInput is an input type that accepts DataSetLogicalTableMapDataTransformArray and DataSetLogicalTableMapDataTransformArrayOutput values.
// You can construct a concrete instance of `DataSetLogicalTableMapDataTransformArrayInput` via:
//
//	DataSetLogicalTableMapDataTransformArray{ DataSetLogicalTableMapDataTransformArgs{...} }
type DataSetLogicalTableMapDataTransformArrayInput interface {
	pulumi.Input

	ToDataSetLogicalTableMapDataTransformArrayOutput() DataSetLogicalTableMapDataTransformArrayOutput
	ToDataSetLogicalTableMapDataTransformArrayOutputWithContext(context.Context) DataSetLogicalTableMapDataTransformArrayOutput
}

type DataSetLogicalTableMapDataTransformArray []DataSetLogicalTableMapDataTransformInput

func (DataSetLogicalTableMapDataTransformArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetLogicalTableMapDataTransform)(nil)).Elem()
}

func (i DataSetLogicalTableMapDataTransformArray) ToDataSetLogicalTableMapDataTransformArrayOutput() DataSetLogicalTableMapDataTransformArrayOutput {
	return i.ToDataSetLogicalTableMapDataTransformArrayOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapDataTransformArray) ToDataSetLogicalTableMapDataTransformArrayOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformArrayOutput)
}

type DataSetLogicalTableMapDataTransformOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapDataTransformOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransform)(nil)).Elem()
}

func (o DataSetLogicalTableMapDataTransformOutput) ToDataSetLogicalTableMapDataTransformOutput() DataSetLogicalTableMapDataTransformOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformOutput) ToDataSetLogicalTableMapDataTransformOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformOutput {
	return o
}

// A transform operation that casts a column to a different type. See cast_column_type_operation.
func (o DataSetLogicalTableMapDataTransformOutput) CastColumnTypeOperation() DataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutput {
	return o.ApplyT(func(v DataSetLogicalTableMapDataTransform) *DataSetLogicalTableMapDataTransformCastColumnTypeOperation {
		return v.CastColumnTypeOperation
	}).(DataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutput)
}

// An operation that creates calculated columns. Columns created in one such operation form a lexical closure. See create_columns_operation.
func (o DataSetLogicalTableMapDataTransformOutput) CreateColumnsOperation() DataSetLogicalTableMapDataTransformCreateColumnsOperationPtrOutput {
	return o.ApplyT(func(v DataSetLogicalTableMapDataTransform) *DataSetLogicalTableMapDataTransformCreateColumnsOperation {
		return v.CreateColumnsOperation
	}).(DataSetLogicalTableMapDataTransformCreateColumnsOperationPtrOutput)
}

// An operation that filters rows based on some condition. See filter_operation.
func (o DataSetLogicalTableMapDataTransformOutput) FilterOperation() DataSetLogicalTableMapDataTransformFilterOperationPtrOutput {
	return o.ApplyT(func(v DataSetLogicalTableMapDataTransform) *DataSetLogicalTableMapDataTransformFilterOperation {
		return v.FilterOperation
	}).(DataSetLogicalTableMapDataTransformFilterOperationPtrOutput)
}

// An operation that projects columns. Operations that come after a projection can only refer to projected columns. See project_operation.
func (o DataSetLogicalTableMapDataTransformOutput) ProjectOperation() DataSetLogicalTableMapDataTransformProjectOperationPtrOutput {
	return o.ApplyT(func(v DataSetLogicalTableMapDataTransform) *DataSetLogicalTableMapDataTransformProjectOperation {
		return v.ProjectOperation
	}).(DataSetLogicalTableMapDataTransformProjectOperationPtrOutput)
}

// An operation that renames a column. See rename_column_operation.
func (o DataSetLogicalTableMapDataTransformOutput) RenameColumnOperation() DataSetLogicalTableMapDataTransformRenameColumnOperationPtrOutput {
	return o.ApplyT(func(v DataSetLogicalTableMapDataTransform) *DataSetLogicalTableMapDataTransformRenameColumnOperation {
		return v.RenameColumnOperation
	}).(DataSetLogicalTableMapDataTransformRenameColumnOperationPtrOutput)
}

// An operation that tags a column with additional information. See tag_column_operation.
func (o DataSetLogicalTableMapDataTransformOutput) TagColumnOperation() DataSetLogicalTableMapDataTransformTagColumnOperationPtrOutput {
	return o.ApplyT(func(v DataSetLogicalTableMapDataTransform) *DataSetLogicalTableMapDataTransformTagColumnOperation {
		return v.TagColumnOperation
	}).(DataSetLogicalTableMapDataTransformTagColumnOperationPtrOutput)
}

// A transform operation that removes tags associated with a column. See untag_column_operation.
func (o DataSetLogicalTableMapDataTransformOutput) UntagColumnOperation() DataSetLogicalTableMapDataTransformUntagColumnOperationPtrOutput {
	return o.ApplyT(func(v DataSetLogicalTableMapDataTransform) *DataSetLogicalTableMapDataTransformUntagColumnOperation {
		return v.UntagColumnOperation
	}).(DataSetLogicalTableMapDataTransformUntagColumnOperationPtrOutput)
}

type DataSetLogicalTableMapDataTransformArrayOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapDataTransformArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetLogicalTableMapDataTransform)(nil)).Elem()
}

func (o DataSetLogicalTableMapDataTransformArrayOutput) ToDataSetLogicalTableMapDataTransformArrayOutput() DataSetLogicalTableMapDataTransformArrayOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformArrayOutput) ToDataSetLogicalTableMapDataTransformArrayOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformArrayOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformArrayOutput) Index(i pulumi.IntInput) DataSetLogicalTableMapDataTransformOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSetLogicalTableMapDataTransform {
		return vs[0].([]DataSetLogicalTableMapDataTransform)[vs[1].(int)]
	}).(DataSetLogicalTableMapDataTransformOutput)
}

type DataSetLogicalTableMapDataTransformCastColumnTypeOperation struct {
	// Column name.
	ColumnName string `pulumi:"columnName"`
	// When casting a column from string to datetime type, you can supply a string in a format supported by Amazon QuickSight to denote the source data format.
	Format *string `pulumi:"format"`
	// New column data type. Valid values are `STRING`, `INTEGER`, `DECIMAL`, `DATETIME`.
	NewColumnType string `pulumi:"newColumnType"`
}

// DataSetLogicalTableMapDataTransformCastColumnTypeOperationInput is an input type that accepts DataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs and DataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput values.
// You can construct a concrete instance of `DataSetLogicalTableMapDataTransformCastColumnTypeOperationInput` via:
//
//	DataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs{...}
type DataSetLogicalTableMapDataTransformCastColumnTypeOperationInput interface {
	pulumi.Input

	ToDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput() DataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput
	ToDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutputWithContext(context.Context) DataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput
}

type DataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs struct {
	// Column name.
	ColumnName pulumi.StringInput `pulumi:"columnName"`
	// When casting a column from string to datetime type, you can supply a string in a format supported by Amazon QuickSight to denote the source data format.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// New column data type. Valid values are `STRING`, `INTEGER`, `DECIMAL`, `DATETIME`.
	NewColumnType pulumi.StringInput `pulumi:"newColumnType"`
}

func (DataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformCastColumnTypeOperation)(nil)).Elem()
}

func (i DataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs) ToDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput() DataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput {
	return i.ToDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs) ToDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput)
}

func (i DataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs) ToDataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutput() DataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutput {
	return i.ToDataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs) ToDataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput).ToDataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutputWithContext(ctx)
}

// DataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrInput is an input type that accepts DataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs, DataSetLogicalTableMapDataTransformCastColumnTypeOperationPtr and DataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutput values.
// You can construct a concrete instance of `DataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrInput` via:
//
//	        DataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs{...}
//
//	or:
//
//	        nil
type DataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrInput interface {
	pulumi.Input

	ToDataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutput() DataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutput
	ToDataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutputWithContext(context.Context) DataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutput
}

type dataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrType DataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs

func DataSetLogicalTableMapDataTransformCastColumnTypeOperationPtr(v *DataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs) DataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrInput {
	return (*dataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrType)(v)
}

func (*dataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetLogicalTableMapDataTransformCastColumnTypeOperation)(nil)).Elem()
}

func (i *dataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrType) ToDataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutput() DataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutput {
	return i.ToDataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutputWithContext(context.Background())
}

func (i *dataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrType) ToDataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutput)
}

type DataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformCastColumnTypeOperation)(nil)).Elem()
}

func (o DataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput) ToDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput() DataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput) ToDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput) ToDataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutput() DataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutput {
	return o.ToDataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutputWithContext(context.Background())
}

func (o DataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput) ToDataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetLogicalTableMapDataTransformCastColumnTypeOperation) *DataSetLogicalTableMapDataTransformCastColumnTypeOperation {
		return &v
	}).(DataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutput)
}

// Column name.
func (o DataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetLogicalTableMapDataTransformCastColumnTypeOperation) string { return v.ColumnName }).(pulumi.StringOutput)
}

// When casting a column from string to datetime type, you can supply a string in a format supported by Amazon QuickSight to denote the source data format.
func (o DataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSetLogicalTableMapDataTransformCastColumnTypeOperation) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// New column data type. Valid values are `STRING`, `INTEGER`, `DECIMAL`, `DATETIME`.
func (o DataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput) NewColumnType() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetLogicalTableMapDataTransformCastColumnTypeOperation) string { return v.NewColumnType }).(pulumi.StringOutput)
}

type DataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetLogicalTableMapDataTransformCastColumnTypeOperation)(nil)).Elem()
}

func (o DataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutput) ToDataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutput() DataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutput) ToDataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutput) Elem() DataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput {
	return o.ApplyT(func(v *DataSetLogicalTableMapDataTransformCastColumnTypeOperation) DataSetLogicalTableMapDataTransformCastColumnTypeOperation {
		if v != nil {
			return *v
		}
		var ret DataSetLogicalTableMapDataTransformCastColumnTypeOperation
		return ret
	}).(DataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput)
}

// Column name.
func (o DataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutput) ColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetLogicalTableMapDataTransformCastColumnTypeOperation) *string {
		if v == nil {
			return nil
		}
		return &v.ColumnName
	}).(pulumi.StringPtrOutput)
}

// When casting a column from string to datetime type, you can supply a string in a format supported by Amazon QuickSight to denote the source data format.
func (o DataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetLogicalTableMapDataTransformCastColumnTypeOperation) *string {
		if v == nil {
			return nil
		}
		return v.Format
	}).(pulumi.StringPtrOutput)
}

// New column data type. Valid values are `STRING`, `INTEGER`, `DECIMAL`, `DATETIME`.
func (o DataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutput) NewColumnType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetLogicalTableMapDataTransformCastColumnTypeOperation) *string {
		if v == nil {
			return nil
		}
		return &v.NewColumnType
	}).(pulumi.StringPtrOutput)
}

type DataSetLogicalTableMapDataTransformCreateColumnsOperation struct {
	// Calculated columns to create. See columns.
	Columns []DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn `pulumi:"columns"`
}

// DataSetLogicalTableMapDataTransformCreateColumnsOperationInput is an input type that accepts DataSetLogicalTableMapDataTransformCreateColumnsOperationArgs and DataSetLogicalTableMapDataTransformCreateColumnsOperationOutput values.
// You can construct a concrete instance of `DataSetLogicalTableMapDataTransformCreateColumnsOperationInput` via:
//
//	DataSetLogicalTableMapDataTransformCreateColumnsOperationArgs{...}
type DataSetLogicalTableMapDataTransformCreateColumnsOperationInput interface {
	pulumi.Input

	ToDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput() DataSetLogicalTableMapDataTransformCreateColumnsOperationOutput
	ToDataSetLogicalTableMapDataTransformCreateColumnsOperationOutputWithContext(context.Context) DataSetLogicalTableMapDataTransformCreateColumnsOperationOutput
}

type DataSetLogicalTableMapDataTransformCreateColumnsOperationArgs struct {
	// Calculated columns to create. See columns.
	Columns DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayInput `pulumi:"columns"`
}

func (DataSetLogicalTableMapDataTransformCreateColumnsOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformCreateColumnsOperation)(nil)).Elem()
}

func (i DataSetLogicalTableMapDataTransformCreateColumnsOperationArgs) ToDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput() DataSetLogicalTableMapDataTransformCreateColumnsOperationOutput {
	return i.ToDataSetLogicalTableMapDataTransformCreateColumnsOperationOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapDataTransformCreateColumnsOperationArgs) ToDataSetLogicalTableMapDataTransformCreateColumnsOperationOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformCreateColumnsOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformCreateColumnsOperationOutput)
}

func (i DataSetLogicalTableMapDataTransformCreateColumnsOperationArgs) ToDataSetLogicalTableMapDataTransformCreateColumnsOperationPtrOutput() DataSetLogicalTableMapDataTransformCreateColumnsOperationPtrOutput {
	return i.ToDataSetLogicalTableMapDataTransformCreateColumnsOperationPtrOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapDataTransformCreateColumnsOperationArgs) ToDataSetLogicalTableMapDataTransformCreateColumnsOperationPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformCreateColumnsOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformCreateColumnsOperationOutput).ToDataSetLogicalTableMapDataTransformCreateColumnsOperationPtrOutputWithContext(ctx)
}

// DataSetLogicalTableMapDataTransformCreateColumnsOperationPtrInput is an input type that accepts DataSetLogicalTableMapDataTransformCreateColumnsOperationArgs, DataSetLogicalTableMapDataTransformCreateColumnsOperationPtr and DataSetLogicalTableMapDataTransformCreateColumnsOperationPtrOutput values.
// You can construct a concrete instance of `DataSetLogicalTableMapDataTransformCreateColumnsOperationPtrInput` via:
//
//	        DataSetLogicalTableMapDataTransformCreateColumnsOperationArgs{...}
//
//	or:
//
//	        nil
type DataSetLogicalTableMapDataTransformCreateColumnsOperationPtrInput interface {
	pulumi.Input

	ToDataSetLogicalTableMapDataTransformCreateColumnsOperationPtrOutput() DataSetLogicalTableMapDataTransformCreateColumnsOperationPtrOutput
	ToDataSetLogicalTableMapDataTransformCreateColumnsOperationPtrOutputWithContext(context.Context) DataSetLogicalTableMapDataTransformCreateColumnsOperationPtrOutput
}

type dataSetLogicalTableMapDataTransformCreateColumnsOperationPtrType DataSetLogicalTableMapDataTransformCreateColumnsOperationArgs

func DataSetLogicalTableMapDataTransformCreateColumnsOperationPtr(v *DataSetLogicalTableMapDataTransformCreateColumnsOperationArgs) DataSetLogicalTableMapDataTransformCreateColumnsOperationPtrInput {
	return (*dataSetLogicalTableMapDataTransformCreateColumnsOperationPtrType)(v)
}

func (*dataSetLogicalTableMapDataTransformCreateColumnsOperationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetLogicalTableMapDataTransformCreateColumnsOperation)(nil)).Elem()
}

func (i *dataSetLogicalTableMapDataTransformCreateColumnsOperationPtrType) ToDataSetLogicalTableMapDataTransformCreateColumnsOperationPtrOutput() DataSetLogicalTableMapDataTransformCreateColumnsOperationPtrOutput {
	return i.ToDataSetLogicalTableMapDataTransformCreateColumnsOperationPtrOutputWithContext(context.Background())
}

func (i *dataSetLogicalTableMapDataTransformCreateColumnsOperationPtrType) ToDataSetLogicalTableMapDataTransformCreateColumnsOperationPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformCreateColumnsOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformCreateColumnsOperationPtrOutput)
}

type DataSetLogicalTableMapDataTransformCreateColumnsOperationOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapDataTransformCreateColumnsOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformCreateColumnsOperation)(nil)).Elem()
}

func (o DataSetLogicalTableMapDataTransformCreateColumnsOperationOutput) ToDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput() DataSetLogicalTableMapDataTransformCreateColumnsOperationOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformCreateColumnsOperationOutput) ToDataSetLogicalTableMapDataTransformCreateColumnsOperationOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformCreateColumnsOperationOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformCreateColumnsOperationOutput) ToDataSetLogicalTableMapDataTransformCreateColumnsOperationPtrOutput() DataSetLogicalTableMapDataTransformCreateColumnsOperationPtrOutput {
	return o.ToDataSetLogicalTableMapDataTransformCreateColumnsOperationPtrOutputWithContext(context.Background())
}

func (o DataSetLogicalTableMapDataTransformCreateColumnsOperationOutput) ToDataSetLogicalTableMapDataTransformCreateColumnsOperationPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformCreateColumnsOperationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetLogicalTableMapDataTransformCreateColumnsOperation) *DataSetLogicalTableMapDataTransformCreateColumnsOperation {
		return &v
	}).(DataSetLogicalTableMapDataTransformCreateColumnsOperationPtrOutput)
}

// Calculated columns to create. See columns.
func (o DataSetLogicalTableMapDataTransformCreateColumnsOperationOutput) Columns() DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput {
	return o.ApplyT(func(v DataSetLogicalTableMapDataTransformCreateColumnsOperation) []DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn {
		return v.Columns
	}).(DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput)
}

type DataSetLogicalTableMapDataTransformCreateColumnsOperationPtrOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapDataTransformCreateColumnsOperationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetLogicalTableMapDataTransformCreateColumnsOperation)(nil)).Elem()
}

func (o DataSetLogicalTableMapDataTransformCreateColumnsOperationPtrOutput) ToDataSetLogicalTableMapDataTransformCreateColumnsOperationPtrOutput() DataSetLogicalTableMapDataTransformCreateColumnsOperationPtrOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformCreateColumnsOperationPtrOutput) ToDataSetLogicalTableMapDataTransformCreateColumnsOperationPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformCreateColumnsOperationPtrOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformCreateColumnsOperationPtrOutput) Elem() DataSetLogicalTableMapDataTransformCreateColumnsOperationOutput {
	return o.ApplyT(func(v *DataSetLogicalTableMapDataTransformCreateColumnsOperation) DataSetLogicalTableMapDataTransformCreateColumnsOperation {
		if v != nil {
			return *v
		}
		var ret DataSetLogicalTableMapDataTransformCreateColumnsOperation
		return ret
	}).(DataSetLogicalTableMapDataTransformCreateColumnsOperationOutput)
}

// Calculated columns to create. See columns.
func (o DataSetLogicalTableMapDataTransformCreateColumnsOperationPtrOutput) Columns() DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput {
	return o.ApplyT(func(v *DataSetLogicalTableMapDataTransformCreateColumnsOperation) []DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput)
}

type DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn struct {
	// A unique ID to identify a calculated column. During a dataset update, if the column ID of a calculated column matches that of an existing calculated column, Amazon QuickSight preserves the existing calculated column.
	ColumnId string `pulumi:"columnId"`
	// Column name.
	ColumnName string `pulumi:"columnName"`
	// An expression that defines the calculated column.
	Expression string `pulumi:"expression"`
}

// DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnInput is an input type that accepts DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs and DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput values.
// You can construct a concrete instance of `DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnInput` via:
//
//	DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs{...}
type DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnInput interface {
	pulumi.Input

	ToDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput() DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput
	ToDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutputWithContext(context.Context) DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput
}

type DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs struct {
	// A unique ID to identify a calculated column. During a dataset update, if the column ID of a calculated column matches that of an existing calculated column, Amazon QuickSight preserves the existing calculated column.
	ColumnId pulumi.StringInput `pulumi:"columnId"`
	// Column name.
	ColumnName pulumi.StringInput `pulumi:"columnName"`
	// An expression that defines the calculated column.
	Expression pulumi.StringInput `pulumi:"expression"`
}

func (DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn)(nil)).Elem()
}

func (i DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs) ToDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput() DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput {
	return i.ToDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs) ToDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput)
}

// DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayInput is an input type that accepts DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArray and DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput values.
// You can construct a concrete instance of `DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayInput` via:
//
//	DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArray{ DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs{...} }
type DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayInput interface {
	pulumi.Input

	ToDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput() DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput
	ToDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutputWithContext(context.Context) DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput
}

type DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArray []DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnInput

func (DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn)(nil)).Elem()
}

func (i DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArray) ToDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput() DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput {
	return i.ToDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArray) ToDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput)
}

type DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn)(nil)).Elem()
}

func (o DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput) ToDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput() DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput) ToDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput {
	return o
}

// A unique ID to identify a calculated column. During a dataset update, if the column ID of a calculated column matches that of an existing calculated column, Amazon QuickSight preserves the existing calculated column.
func (o DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput) ColumnId() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn) string { return v.ColumnId }).(pulumi.StringOutput)
}

// Column name.
func (o DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn) string { return v.ColumnName }).(pulumi.StringOutput)
}

// An expression that defines the calculated column.
func (o DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn) string { return v.Expression }).(pulumi.StringOutput)
}

type DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn)(nil)).Elem()
}

func (o DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput) ToDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput() DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput) ToDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput) Index(i pulumi.IntInput) DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn {
		return vs[0].([]DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn)[vs[1].(int)]
	}).(DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput)
}

type DataSetLogicalTableMapDataTransformFilterOperation struct {
	// An expression that must evaluate to a Boolean value. Rows for which the expression evaluates to true are kept in the dataset.
	ConditionExpression string `pulumi:"conditionExpression"`
}

// DataSetLogicalTableMapDataTransformFilterOperationInput is an input type that accepts DataSetLogicalTableMapDataTransformFilterOperationArgs and DataSetLogicalTableMapDataTransformFilterOperationOutput values.
// You can construct a concrete instance of `DataSetLogicalTableMapDataTransformFilterOperationInput` via:
//
//	DataSetLogicalTableMapDataTransformFilterOperationArgs{...}
type DataSetLogicalTableMapDataTransformFilterOperationInput interface {
	pulumi.Input

	ToDataSetLogicalTableMapDataTransformFilterOperationOutput() DataSetLogicalTableMapDataTransformFilterOperationOutput
	ToDataSetLogicalTableMapDataTransformFilterOperationOutputWithContext(context.Context) DataSetLogicalTableMapDataTransformFilterOperationOutput
}

type DataSetLogicalTableMapDataTransformFilterOperationArgs struct {
	// An expression that must evaluate to a Boolean value. Rows for which the expression evaluates to true are kept in the dataset.
	ConditionExpression pulumi.StringInput `pulumi:"conditionExpression"`
}

func (DataSetLogicalTableMapDataTransformFilterOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformFilterOperation)(nil)).Elem()
}

func (i DataSetLogicalTableMapDataTransformFilterOperationArgs) ToDataSetLogicalTableMapDataTransformFilterOperationOutput() DataSetLogicalTableMapDataTransformFilterOperationOutput {
	return i.ToDataSetLogicalTableMapDataTransformFilterOperationOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapDataTransformFilterOperationArgs) ToDataSetLogicalTableMapDataTransformFilterOperationOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformFilterOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformFilterOperationOutput)
}

func (i DataSetLogicalTableMapDataTransformFilterOperationArgs) ToDataSetLogicalTableMapDataTransformFilterOperationPtrOutput() DataSetLogicalTableMapDataTransformFilterOperationPtrOutput {
	return i.ToDataSetLogicalTableMapDataTransformFilterOperationPtrOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapDataTransformFilterOperationArgs) ToDataSetLogicalTableMapDataTransformFilterOperationPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformFilterOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformFilterOperationOutput).ToDataSetLogicalTableMapDataTransformFilterOperationPtrOutputWithContext(ctx)
}

// DataSetLogicalTableMapDataTransformFilterOperationPtrInput is an input type that accepts DataSetLogicalTableMapDataTransformFilterOperationArgs, DataSetLogicalTableMapDataTransformFilterOperationPtr and DataSetLogicalTableMapDataTransformFilterOperationPtrOutput values.
// You can construct a concrete instance of `DataSetLogicalTableMapDataTransformFilterOperationPtrInput` via:
//
//	        DataSetLogicalTableMapDataTransformFilterOperationArgs{...}
//
//	or:
//
//	        nil
type DataSetLogicalTableMapDataTransformFilterOperationPtrInput interface {
	pulumi.Input

	ToDataSetLogicalTableMapDataTransformFilterOperationPtrOutput() DataSetLogicalTableMapDataTransformFilterOperationPtrOutput
	ToDataSetLogicalTableMapDataTransformFilterOperationPtrOutputWithContext(context.Context) DataSetLogicalTableMapDataTransformFilterOperationPtrOutput
}

type dataSetLogicalTableMapDataTransformFilterOperationPtrType DataSetLogicalTableMapDataTransformFilterOperationArgs

func DataSetLogicalTableMapDataTransformFilterOperationPtr(v *DataSetLogicalTableMapDataTransformFilterOperationArgs) DataSetLogicalTableMapDataTransformFilterOperationPtrInput {
	return (*dataSetLogicalTableMapDataTransformFilterOperationPtrType)(v)
}

func (*dataSetLogicalTableMapDataTransformFilterOperationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetLogicalTableMapDataTransformFilterOperation)(nil)).Elem()
}

func (i *dataSetLogicalTableMapDataTransformFilterOperationPtrType) ToDataSetLogicalTableMapDataTransformFilterOperationPtrOutput() DataSetLogicalTableMapDataTransformFilterOperationPtrOutput {
	return i.ToDataSetLogicalTableMapDataTransformFilterOperationPtrOutputWithContext(context.Background())
}

func (i *dataSetLogicalTableMapDataTransformFilterOperationPtrType) ToDataSetLogicalTableMapDataTransformFilterOperationPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformFilterOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformFilterOperationPtrOutput)
}

type DataSetLogicalTableMapDataTransformFilterOperationOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapDataTransformFilterOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformFilterOperation)(nil)).Elem()
}

func (o DataSetLogicalTableMapDataTransformFilterOperationOutput) ToDataSetLogicalTableMapDataTransformFilterOperationOutput() DataSetLogicalTableMapDataTransformFilterOperationOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformFilterOperationOutput) ToDataSetLogicalTableMapDataTransformFilterOperationOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformFilterOperationOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformFilterOperationOutput) ToDataSetLogicalTableMapDataTransformFilterOperationPtrOutput() DataSetLogicalTableMapDataTransformFilterOperationPtrOutput {
	return o.ToDataSetLogicalTableMapDataTransformFilterOperationPtrOutputWithContext(context.Background())
}

func (o DataSetLogicalTableMapDataTransformFilterOperationOutput) ToDataSetLogicalTableMapDataTransformFilterOperationPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformFilterOperationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetLogicalTableMapDataTransformFilterOperation) *DataSetLogicalTableMapDataTransformFilterOperation {
		return &v
	}).(DataSetLogicalTableMapDataTransformFilterOperationPtrOutput)
}

// An expression that must evaluate to a Boolean value. Rows for which the expression evaluates to true are kept in the dataset.
func (o DataSetLogicalTableMapDataTransformFilterOperationOutput) ConditionExpression() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetLogicalTableMapDataTransformFilterOperation) string { return v.ConditionExpression }).(pulumi.StringOutput)
}

type DataSetLogicalTableMapDataTransformFilterOperationPtrOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapDataTransformFilterOperationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetLogicalTableMapDataTransformFilterOperation)(nil)).Elem()
}

func (o DataSetLogicalTableMapDataTransformFilterOperationPtrOutput) ToDataSetLogicalTableMapDataTransformFilterOperationPtrOutput() DataSetLogicalTableMapDataTransformFilterOperationPtrOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformFilterOperationPtrOutput) ToDataSetLogicalTableMapDataTransformFilterOperationPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformFilterOperationPtrOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformFilterOperationPtrOutput) Elem() DataSetLogicalTableMapDataTransformFilterOperationOutput {
	return o.ApplyT(func(v *DataSetLogicalTableMapDataTransformFilterOperation) DataSetLogicalTableMapDataTransformFilterOperation {
		if v != nil {
			return *v
		}
		var ret DataSetLogicalTableMapDataTransformFilterOperation
		return ret
	}).(DataSetLogicalTableMapDataTransformFilterOperationOutput)
}

// An expression that must evaluate to a Boolean value. Rows for which the expression evaluates to true are kept in the dataset.
func (o DataSetLogicalTableMapDataTransformFilterOperationPtrOutput) ConditionExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetLogicalTableMapDataTransformFilterOperation) *string {
		if v == nil {
			return nil
		}
		return &v.ConditionExpression
	}).(pulumi.StringPtrOutput)
}

type DataSetLogicalTableMapDataTransformProjectOperation struct {
	// Projected columns.
	ProjectedColumns []string `pulumi:"projectedColumns"`
}

// DataSetLogicalTableMapDataTransformProjectOperationInput is an input type that accepts DataSetLogicalTableMapDataTransformProjectOperationArgs and DataSetLogicalTableMapDataTransformProjectOperationOutput values.
// You can construct a concrete instance of `DataSetLogicalTableMapDataTransformProjectOperationInput` via:
//
//	DataSetLogicalTableMapDataTransformProjectOperationArgs{...}
type DataSetLogicalTableMapDataTransformProjectOperationInput interface {
	pulumi.Input

	ToDataSetLogicalTableMapDataTransformProjectOperationOutput() DataSetLogicalTableMapDataTransformProjectOperationOutput
	ToDataSetLogicalTableMapDataTransformProjectOperationOutputWithContext(context.Context) DataSetLogicalTableMapDataTransformProjectOperationOutput
}

type DataSetLogicalTableMapDataTransformProjectOperationArgs struct {
	// Projected columns.
	ProjectedColumns pulumi.StringArrayInput `pulumi:"projectedColumns"`
}

func (DataSetLogicalTableMapDataTransformProjectOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformProjectOperation)(nil)).Elem()
}

func (i DataSetLogicalTableMapDataTransformProjectOperationArgs) ToDataSetLogicalTableMapDataTransformProjectOperationOutput() DataSetLogicalTableMapDataTransformProjectOperationOutput {
	return i.ToDataSetLogicalTableMapDataTransformProjectOperationOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapDataTransformProjectOperationArgs) ToDataSetLogicalTableMapDataTransformProjectOperationOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformProjectOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformProjectOperationOutput)
}

func (i DataSetLogicalTableMapDataTransformProjectOperationArgs) ToDataSetLogicalTableMapDataTransformProjectOperationPtrOutput() DataSetLogicalTableMapDataTransformProjectOperationPtrOutput {
	return i.ToDataSetLogicalTableMapDataTransformProjectOperationPtrOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapDataTransformProjectOperationArgs) ToDataSetLogicalTableMapDataTransformProjectOperationPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformProjectOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformProjectOperationOutput).ToDataSetLogicalTableMapDataTransformProjectOperationPtrOutputWithContext(ctx)
}

// DataSetLogicalTableMapDataTransformProjectOperationPtrInput is an input type that accepts DataSetLogicalTableMapDataTransformProjectOperationArgs, DataSetLogicalTableMapDataTransformProjectOperationPtr and DataSetLogicalTableMapDataTransformProjectOperationPtrOutput values.
// You can construct a concrete instance of `DataSetLogicalTableMapDataTransformProjectOperationPtrInput` via:
//
//	        DataSetLogicalTableMapDataTransformProjectOperationArgs{...}
//
//	or:
//
//	        nil
type DataSetLogicalTableMapDataTransformProjectOperationPtrInput interface {
	pulumi.Input

	ToDataSetLogicalTableMapDataTransformProjectOperationPtrOutput() DataSetLogicalTableMapDataTransformProjectOperationPtrOutput
	ToDataSetLogicalTableMapDataTransformProjectOperationPtrOutputWithContext(context.Context) DataSetLogicalTableMapDataTransformProjectOperationPtrOutput
}

type dataSetLogicalTableMapDataTransformProjectOperationPtrType DataSetLogicalTableMapDataTransformProjectOperationArgs

func DataSetLogicalTableMapDataTransformProjectOperationPtr(v *DataSetLogicalTableMapDataTransformProjectOperationArgs) DataSetLogicalTableMapDataTransformProjectOperationPtrInput {
	return (*dataSetLogicalTableMapDataTransformProjectOperationPtrType)(v)
}

func (*dataSetLogicalTableMapDataTransformProjectOperationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetLogicalTableMapDataTransformProjectOperation)(nil)).Elem()
}

func (i *dataSetLogicalTableMapDataTransformProjectOperationPtrType) ToDataSetLogicalTableMapDataTransformProjectOperationPtrOutput() DataSetLogicalTableMapDataTransformProjectOperationPtrOutput {
	return i.ToDataSetLogicalTableMapDataTransformProjectOperationPtrOutputWithContext(context.Background())
}

func (i *dataSetLogicalTableMapDataTransformProjectOperationPtrType) ToDataSetLogicalTableMapDataTransformProjectOperationPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformProjectOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformProjectOperationPtrOutput)
}

type DataSetLogicalTableMapDataTransformProjectOperationOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapDataTransformProjectOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformProjectOperation)(nil)).Elem()
}

func (o DataSetLogicalTableMapDataTransformProjectOperationOutput) ToDataSetLogicalTableMapDataTransformProjectOperationOutput() DataSetLogicalTableMapDataTransformProjectOperationOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformProjectOperationOutput) ToDataSetLogicalTableMapDataTransformProjectOperationOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformProjectOperationOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformProjectOperationOutput) ToDataSetLogicalTableMapDataTransformProjectOperationPtrOutput() DataSetLogicalTableMapDataTransformProjectOperationPtrOutput {
	return o.ToDataSetLogicalTableMapDataTransformProjectOperationPtrOutputWithContext(context.Background())
}

func (o DataSetLogicalTableMapDataTransformProjectOperationOutput) ToDataSetLogicalTableMapDataTransformProjectOperationPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformProjectOperationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetLogicalTableMapDataTransformProjectOperation) *DataSetLogicalTableMapDataTransformProjectOperation {
		return &v
	}).(DataSetLogicalTableMapDataTransformProjectOperationPtrOutput)
}

// Projected columns.
func (o DataSetLogicalTableMapDataTransformProjectOperationOutput) ProjectedColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataSetLogicalTableMapDataTransformProjectOperation) []string { return v.ProjectedColumns }).(pulumi.StringArrayOutput)
}

type DataSetLogicalTableMapDataTransformProjectOperationPtrOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapDataTransformProjectOperationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetLogicalTableMapDataTransformProjectOperation)(nil)).Elem()
}

func (o DataSetLogicalTableMapDataTransformProjectOperationPtrOutput) ToDataSetLogicalTableMapDataTransformProjectOperationPtrOutput() DataSetLogicalTableMapDataTransformProjectOperationPtrOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformProjectOperationPtrOutput) ToDataSetLogicalTableMapDataTransformProjectOperationPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformProjectOperationPtrOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformProjectOperationPtrOutput) Elem() DataSetLogicalTableMapDataTransformProjectOperationOutput {
	return o.ApplyT(func(v *DataSetLogicalTableMapDataTransformProjectOperation) DataSetLogicalTableMapDataTransformProjectOperation {
		if v != nil {
			return *v
		}
		var ret DataSetLogicalTableMapDataTransformProjectOperation
		return ret
	}).(DataSetLogicalTableMapDataTransformProjectOperationOutput)
}

// Projected columns.
func (o DataSetLogicalTableMapDataTransformProjectOperationPtrOutput) ProjectedColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DataSetLogicalTableMapDataTransformProjectOperation) []string {
		if v == nil {
			return nil
		}
		return v.ProjectedColumns
	}).(pulumi.StringArrayOutput)
}

type DataSetLogicalTableMapDataTransformRenameColumnOperation struct {
	// Column to be renamed.
	ColumnName string `pulumi:"columnName"`
	// New name for the column.
	NewColumnName string `pulumi:"newColumnName"`
}

// DataSetLogicalTableMapDataTransformRenameColumnOperationInput is an input type that accepts DataSetLogicalTableMapDataTransformRenameColumnOperationArgs and DataSetLogicalTableMapDataTransformRenameColumnOperationOutput values.
// You can construct a concrete instance of `DataSetLogicalTableMapDataTransformRenameColumnOperationInput` via:
//
//	DataSetLogicalTableMapDataTransformRenameColumnOperationArgs{...}
type DataSetLogicalTableMapDataTransformRenameColumnOperationInput interface {
	pulumi.Input

	ToDataSetLogicalTableMapDataTransformRenameColumnOperationOutput() DataSetLogicalTableMapDataTransformRenameColumnOperationOutput
	ToDataSetLogicalTableMapDataTransformRenameColumnOperationOutputWithContext(context.Context) DataSetLogicalTableMapDataTransformRenameColumnOperationOutput
}

type DataSetLogicalTableMapDataTransformRenameColumnOperationArgs struct {
	// Column to be renamed.
	ColumnName pulumi.StringInput `pulumi:"columnName"`
	// New name for the column.
	NewColumnName pulumi.StringInput `pulumi:"newColumnName"`
}

func (DataSetLogicalTableMapDataTransformRenameColumnOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformRenameColumnOperation)(nil)).Elem()
}

func (i DataSetLogicalTableMapDataTransformRenameColumnOperationArgs) ToDataSetLogicalTableMapDataTransformRenameColumnOperationOutput() DataSetLogicalTableMapDataTransformRenameColumnOperationOutput {
	return i.ToDataSetLogicalTableMapDataTransformRenameColumnOperationOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapDataTransformRenameColumnOperationArgs) ToDataSetLogicalTableMapDataTransformRenameColumnOperationOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformRenameColumnOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformRenameColumnOperationOutput)
}

func (i DataSetLogicalTableMapDataTransformRenameColumnOperationArgs) ToDataSetLogicalTableMapDataTransformRenameColumnOperationPtrOutput() DataSetLogicalTableMapDataTransformRenameColumnOperationPtrOutput {
	return i.ToDataSetLogicalTableMapDataTransformRenameColumnOperationPtrOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapDataTransformRenameColumnOperationArgs) ToDataSetLogicalTableMapDataTransformRenameColumnOperationPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformRenameColumnOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformRenameColumnOperationOutput).ToDataSetLogicalTableMapDataTransformRenameColumnOperationPtrOutputWithContext(ctx)
}

// DataSetLogicalTableMapDataTransformRenameColumnOperationPtrInput is an input type that accepts DataSetLogicalTableMapDataTransformRenameColumnOperationArgs, DataSetLogicalTableMapDataTransformRenameColumnOperationPtr and DataSetLogicalTableMapDataTransformRenameColumnOperationPtrOutput values.
// You can construct a concrete instance of `DataSetLogicalTableMapDataTransformRenameColumnOperationPtrInput` via:
//
//	        DataSetLogicalTableMapDataTransformRenameColumnOperationArgs{...}
//
//	or:
//
//	        nil
type DataSetLogicalTableMapDataTransformRenameColumnOperationPtrInput interface {
	pulumi.Input

	ToDataSetLogicalTableMapDataTransformRenameColumnOperationPtrOutput() DataSetLogicalTableMapDataTransformRenameColumnOperationPtrOutput
	ToDataSetLogicalTableMapDataTransformRenameColumnOperationPtrOutputWithContext(context.Context) DataSetLogicalTableMapDataTransformRenameColumnOperationPtrOutput
}

type dataSetLogicalTableMapDataTransformRenameColumnOperationPtrType DataSetLogicalTableMapDataTransformRenameColumnOperationArgs

func DataSetLogicalTableMapDataTransformRenameColumnOperationPtr(v *DataSetLogicalTableMapDataTransformRenameColumnOperationArgs) DataSetLogicalTableMapDataTransformRenameColumnOperationPtrInput {
	return (*dataSetLogicalTableMapDataTransformRenameColumnOperationPtrType)(v)
}

func (*dataSetLogicalTableMapDataTransformRenameColumnOperationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetLogicalTableMapDataTransformRenameColumnOperation)(nil)).Elem()
}

func (i *dataSetLogicalTableMapDataTransformRenameColumnOperationPtrType) ToDataSetLogicalTableMapDataTransformRenameColumnOperationPtrOutput() DataSetLogicalTableMapDataTransformRenameColumnOperationPtrOutput {
	return i.ToDataSetLogicalTableMapDataTransformRenameColumnOperationPtrOutputWithContext(context.Background())
}

func (i *dataSetLogicalTableMapDataTransformRenameColumnOperationPtrType) ToDataSetLogicalTableMapDataTransformRenameColumnOperationPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformRenameColumnOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformRenameColumnOperationPtrOutput)
}

type DataSetLogicalTableMapDataTransformRenameColumnOperationOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapDataTransformRenameColumnOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformRenameColumnOperation)(nil)).Elem()
}

func (o DataSetLogicalTableMapDataTransformRenameColumnOperationOutput) ToDataSetLogicalTableMapDataTransformRenameColumnOperationOutput() DataSetLogicalTableMapDataTransformRenameColumnOperationOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformRenameColumnOperationOutput) ToDataSetLogicalTableMapDataTransformRenameColumnOperationOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformRenameColumnOperationOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformRenameColumnOperationOutput) ToDataSetLogicalTableMapDataTransformRenameColumnOperationPtrOutput() DataSetLogicalTableMapDataTransformRenameColumnOperationPtrOutput {
	return o.ToDataSetLogicalTableMapDataTransformRenameColumnOperationPtrOutputWithContext(context.Background())
}

func (o DataSetLogicalTableMapDataTransformRenameColumnOperationOutput) ToDataSetLogicalTableMapDataTransformRenameColumnOperationPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformRenameColumnOperationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetLogicalTableMapDataTransformRenameColumnOperation) *DataSetLogicalTableMapDataTransformRenameColumnOperation {
		return &v
	}).(DataSetLogicalTableMapDataTransformRenameColumnOperationPtrOutput)
}

// Column to be renamed.
func (o DataSetLogicalTableMapDataTransformRenameColumnOperationOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetLogicalTableMapDataTransformRenameColumnOperation) string { return v.ColumnName }).(pulumi.StringOutput)
}

// New name for the column.
func (o DataSetLogicalTableMapDataTransformRenameColumnOperationOutput) NewColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetLogicalTableMapDataTransformRenameColumnOperation) string { return v.NewColumnName }).(pulumi.StringOutput)
}

type DataSetLogicalTableMapDataTransformRenameColumnOperationPtrOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapDataTransformRenameColumnOperationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetLogicalTableMapDataTransformRenameColumnOperation)(nil)).Elem()
}

func (o DataSetLogicalTableMapDataTransformRenameColumnOperationPtrOutput) ToDataSetLogicalTableMapDataTransformRenameColumnOperationPtrOutput() DataSetLogicalTableMapDataTransformRenameColumnOperationPtrOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformRenameColumnOperationPtrOutput) ToDataSetLogicalTableMapDataTransformRenameColumnOperationPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformRenameColumnOperationPtrOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformRenameColumnOperationPtrOutput) Elem() DataSetLogicalTableMapDataTransformRenameColumnOperationOutput {
	return o.ApplyT(func(v *DataSetLogicalTableMapDataTransformRenameColumnOperation) DataSetLogicalTableMapDataTransformRenameColumnOperation {
		if v != nil {
			return *v
		}
		var ret DataSetLogicalTableMapDataTransformRenameColumnOperation
		return ret
	}).(DataSetLogicalTableMapDataTransformRenameColumnOperationOutput)
}

// Column to be renamed.
func (o DataSetLogicalTableMapDataTransformRenameColumnOperationPtrOutput) ColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetLogicalTableMapDataTransformRenameColumnOperation) *string {
		if v == nil {
			return nil
		}
		return &v.ColumnName
	}).(pulumi.StringPtrOutput)
}

// New name for the column.
func (o DataSetLogicalTableMapDataTransformRenameColumnOperationPtrOutput) NewColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetLogicalTableMapDataTransformRenameColumnOperation) *string {
		if v == nil {
			return nil
		}
		return &v.NewColumnName
	}).(pulumi.StringPtrOutput)
}

type DataSetLogicalTableMapDataTransformTagColumnOperation struct {
	// Column name.
	ColumnName string `pulumi:"columnName"`
	// The dataset column tag, currently only used for geospatial type tagging. See tags.
	Tags []DataSetLogicalTableMapDataTransformTagColumnOperationTag `pulumi:"tags"`
}

// DataSetLogicalTableMapDataTransformTagColumnOperationInput is an input type that accepts DataSetLogicalTableMapDataTransformTagColumnOperationArgs and DataSetLogicalTableMapDataTransformTagColumnOperationOutput values.
// You can construct a concrete instance of `DataSetLogicalTableMapDataTransformTagColumnOperationInput` via:
//
//	DataSetLogicalTableMapDataTransformTagColumnOperationArgs{...}
type DataSetLogicalTableMapDataTransformTagColumnOperationInput interface {
	pulumi.Input

	ToDataSetLogicalTableMapDataTransformTagColumnOperationOutput() DataSetLogicalTableMapDataTransformTagColumnOperationOutput
	ToDataSetLogicalTableMapDataTransformTagColumnOperationOutputWithContext(context.Context) DataSetLogicalTableMapDataTransformTagColumnOperationOutput
}

type DataSetLogicalTableMapDataTransformTagColumnOperationArgs struct {
	// Column name.
	ColumnName pulumi.StringInput `pulumi:"columnName"`
	// The dataset column tag, currently only used for geospatial type tagging. See tags.
	Tags DataSetLogicalTableMapDataTransformTagColumnOperationTagArrayInput `pulumi:"tags"`
}

func (DataSetLogicalTableMapDataTransformTagColumnOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformTagColumnOperation)(nil)).Elem()
}

func (i DataSetLogicalTableMapDataTransformTagColumnOperationArgs) ToDataSetLogicalTableMapDataTransformTagColumnOperationOutput() DataSetLogicalTableMapDataTransformTagColumnOperationOutput {
	return i.ToDataSetLogicalTableMapDataTransformTagColumnOperationOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapDataTransformTagColumnOperationArgs) ToDataSetLogicalTableMapDataTransformTagColumnOperationOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformTagColumnOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformTagColumnOperationOutput)
}

func (i DataSetLogicalTableMapDataTransformTagColumnOperationArgs) ToDataSetLogicalTableMapDataTransformTagColumnOperationPtrOutput() DataSetLogicalTableMapDataTransformTagColumnOperationPtrOutput {
	return i.ToDataSetLogicalTableMapDataTransformTagColumnOperationPtrOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapDataTransformTagColumnOperationArgs) ToDataSetLogicalTableMapDataTransformTagColumnOperationPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformTagColumnOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformTagColumnOperationOutput).ToDataSetLogicalTableMapDataTransformTagColumnOperationPtrOutputWithContext(ctx)
}

// DataSetLogicalTableMapDataTransformTagColumnOperationPtrInput is an input type that accepts DataSetLogicalTableMapDataTransformTagColumnOperationArgs, DataSetLogicalTableMapDataTransformTagColumnOperationPtr and DataSetLogicalTableMapDataTransformTagColumnOperationPtrOutput values.
// You can construct a concrete instance of `DataSetLogicalTableMapDataTransformTagColumnOperationPtrInput` via:
//
//	        DataSetLogicalTableMapDataTransformTagColumnOperationArgs{...}
//
//	or:
//
//	        nil
type DataSetLogicalTableMapDataTransformTagColumnOperationPtrInput interface {
	pulumi.Input

	ToDataSetLogicalTableMapDataTransformTagColumnOperationPtrOutput() DataSetLogicalTableMapDataTransformTagColumnOperationPtrOutput
	ToDataSetLogicalTableMapDataTransformTagColumnOperationPtrOutputWithContext(context.Context) DataSetLogicalTableMapDataTransformTagColumnOperationPtrOutput
}

type dataSetLogicalTableMapDataTransformTagColumnOperationPtrType DataSetLogicalTableMapDataTransformTagColumnOperationArgs

func DataSetLogicalTableMapDataTransformTagColumnOperationPtr(v *DataSetLogicalTableMapDataTransformTagColumnOperationArgs) DataSetLogicalTableMapDataTransformTagColumnOperationPtrInput {
	return (*dataSetLogicalTableMapDataTransformTagColumnOperationPtrType)(v)
}

func (*dataSetLogicalTableMapDataTransformTagColumnOperationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetLogicalTableMapDataTransformTagColumnOperation)(nil)).Elem()
}

func (i *dataSetLogicalTableMapDataTransformTagColumnOperationPtrType) ToDataSetLogicalTableMapDataTransformTagColumnOperationPtrOutput() DataSetLogicalTableMapDataTransformTagColumnOperationPtrOutput {
	return i.ToDataSetLogicalTableMapDataTransformTagColumnOperationPtrOutputWithContext(context.Background())
}

func (i *dataSetLogicalTableMapDataTransformTagColumnOperationPtrType) ToDataSetLogicalTableMapDataTransformTagColumnOperationPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformTagColumnOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformTagColumnOperationPtrOutput)
}

type DataSetLogicalTableMapDataTransformTagColumnOperationOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapDataTransformTagColumnOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformTagColumnOperation)(nil)).Elem()
}

func (o DataSetLogicalTableMapDataTransformTagColumnOperationOutput) ToDataSetLogicalTableMapDataTransformTagColumnOperationOutput() DataSetLogicalTableMapDataTransformTagColumnOperationOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformTagColumnOperationOutput) ToDataSetLogicalTableMapDataTransformTagColumnOperationOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformTagColumnOperationOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformTagColumnOperationOutput) ToDataSetLogicalTableMapDataTransformTagColumnOperationPtrOutput() DataSetLogicalTableMapDataTransformTagColumnOperationPtrOutput {
	return o.ToDataSetLogicalTableMapDataTransformTagColumnOperationPtrOutputWithContext(context.Background())
}

func (o DataSetLogicalTableMapDataTransformTagColumnOperationOutput) ToDataSetLogicalTableMapDataTransformTagColumnOperationPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformTagColumnOperationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetLogicalTableMapDataTransformTagColumnOperation) *DataSetLogicalTableMapDataTransformTagColumnOperation {
		return &v
	}).(DataSetLogicalTableMapDataTransformTagColumnOperationPtrOutput)
}

// Column name.
func (o DataSetLogicalTableMapDataTransformTagColumnOperationOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetLogicalTableMapDataTransformTagColumnOperation) string { return v.ColumnName }).(pulumi.StringOutput)
}

// The dataset column tag, currently only used for geospatial type tagging. See tags.
func (o DataSetLogicalTableMapDataTransformTagColumnOperationOutput) Tags() DataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput {
	return o.ApplyT(func(v DataSetLogicalTableMapDataTransformTagColumnOperation) []DataSetLogicalTableMapDataTransformTagColumnOperationTag {
		return v.Tags
	}).(DataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput)
}

type DataSetLogicalTableMapDataTransformTagColumnOperationPtrOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapDataTransformTagColumnOperationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetLogicalTableMapDataTransformTagColumnOperation)(nil)).Elem()
}

func (o DataSetLogicalTableMapDataTransformTagColumnOperationPtrOutput) ToDataSetLogicalTableMapDataTransformTagColumnOperationPtrOutput() DataSetLogicalTableMapDataTransformTagColumnOperationPtrOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformTagColumnOperationPtrOutput) ToDataSetLogicalTableMapDataTransformTagColumnOperationPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformTagColumnOperationPtrOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformTagColumnOperationPtrOutput) Elem() DataSetLogicalTableMapDataTransformTagColumnOperationOutput {
	return o.ApplyT(func(v *DataSetLogicalTableMapDataTransformTagColumnOperation) DataSetLogicalTableMapDataTransformTagColumnOperation {
		if v != nil {
			return *v
		}
		var ret DataSetLogicalTableMapDataTransformTagColumnOperation
		return ret
	}).(DataSetLogicalTableMapDataTransformTagColumnOperationOutput)
}

// Column name.
func (o DataSetLogicalTableMapDataTransformTagColumnOperationPtrOutput) ColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetLogicalTableMapDataTransformTagColumnOperation) *string {
		if v == nil {
			return nil
		}
		return &v.ColumnName
	}).(pulumi.StringPtrOutput)
}

// The dataset column tag, currently only used for geospatial type tagging. See tags.
func (o DataSetLogicalTableMapDataTransformTagColumnOperationPtrOutput) Tags() DataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput {
	return o.ApplyT(func(v *DataSetLogicalTableMapDataTransformTagColumnOperation) []DataSetLogicalTableMapDataTransformTagColumnOperationTag {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(DataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput)
}

type DataSetLogicalTableMapDataTransformTagColumnOperationTag struct {
	// A description for a column. See column_description.
	ColumnDescription *DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription `pulumi:"columnDescription"`
	// A geospatial role for a column. Valid values are `COUNTRY`, `STATE`, `COUNTY`, `CITY`, `POSTCODE`, `LONGITUDE`, and `LATITUDE`.
	ColumnGeographicRole *string `pulumi:"columnGeographicRole"`
}

// DataSetLogicalTableMapDataTransformTagColumnOperationTagInput is an input type that accepts DataSetLogicalTableMapDataTransformTagColumnOperationTagArgs and DataSetLogicalTableMapDataTransformTagColumnOperationTagOutput values.
// You can construct a concrete instance of `DataSetLogicalTableMapDataTransformTagColumnOperationTagInput` via:
//
//	DataSetLogicalTableMapDataTransformTagColumnOperationTagArgs{...}
type DataSetLogicalTableMapDataTransformTagColumnOperationTagInput interface {
	pulumi.Input

	ToDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput() DataSetLogicalTableMapDataTransformTagColumnOperationTagOutput
	ToDataSetLogicalTableMapDataTransformTagColumnOperationTagOutputWithContext(context.Context) DataSetLogicalTableMapDataTransformTagColumnOperationTagOutput
}

type DataSetLogicalTableMapDataTransformTagColumnOperationTagArgs struct {
	// A description for a column. See column_description.
	ColumnDescription DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrInput `pulumi:"columnDescription"`
	// A geospatial role for a column. Valid values are `COUNTRY`, `STATE`, `COUNTY`, `CITY`, `POSTCODE`, `LONGITUDE`, and `LATITUDE`.
	ColumnGeographicRole pulumi.StringPtrInput `pulumi:"columnGeographicRole"`
}

func (DataSetLogicalTableMapDataTransformTagColumnOperationTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformTagColumnOperationTag)(nil)).Elem()
}

func (i DataSetLogicalTableMapDataTransformTagColumnOperationTagArgs) ToDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput() DataSetLogicalTableMapDataTransformTagColumnOperationTagOutput {
	return i.ToDataSetLogicalTableMapDataTransformTagColumnOperationTagOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapDataTransformTagColumnOperationTagArgs) ToDataSetLogicalTableMapDataTransformTagColumnOperationTagOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformTagColumnOperationTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformTagColumnOperationTagOutput)
}

// DataSetLogicalTableMapDataTransformTagColumnOperationTagArrayInput is an input type that accepts DataSetLogicalTableMapDataTransformTagColumnOperationTagArray and DataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput values.
// You can construct a concrete instance of `DataSetLogicalTableMapDataTransformTagColumnOperationTagArrayInput` via:
//
//	DataSetLogicalTableMapDataTransformTagColumnOperationTagArray{ DataSetLogicalTableMapDataTransformTagColumnOperationTagArgs{...} }
type DataSetLogicalTableMapDataTransformTagColumnOperationTagArrayInput interface {
	pulumi.Input

	ToDataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput() DataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput
	ToDataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutputWithContext(context.Context) DataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput
}

type DataSetLogicalTableMapDataTransformTagColumnOperationTagArray []DataSetLogicalTableMapDataTransformTagColumnOperationTagInput

func (DataSetLogicalTableMapDataTransformTagColumnOperationTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetLogicalTableMapDataTransformTagColumnOperationTag)(nil)).Elem()
}

func (i DataSetLogicalTableMapDataTransformTagColumnOperationTagArray) ToDataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput() DataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput {
	return i.ToDataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapDataTransformTagColumnOperationTagArray) ToDataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput)
}

type DataSetLogicalTableMapDataTransformTagColumnOperationTagOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapDataTransformTagColumnOperationTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformTagColumnOperationTag)(nil)).Elem()
}

func (o DataSetLogicalTableMapDataTransformTagColumnOperationTagOutput) ToDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput() DataSetLogicalTableMapDataTransformTagColumnOperationTagOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformTagColumnOperationTagOutput) ToDataSetLogicalTableMapDataTransformTagColumnOperationTagOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformTagColumnOperationTagOutput {
	return o
}

// A description for a column. See column_description.
func (o DataSetLogicalTableMapDataTransformTagColumnOperationTagOutput) ColumnDescription() DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrOutput {
	return o.ApplyT(func(v DataSetLogicalTableMapDataTransformTagColumnOperationTag) *DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription {
		return v.ColumnDescription
	}).(DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrOutput)
}

// A geospatial role for a column. Valid values are `COUNTRY`, `STATE`, `COUNTY`, `CITY`, `POSTCODE`, `LONGITUDE`, and `LATITUDE`.
func (o DataSetLogicalTableMapDataTransformTagColumnOperationTagOutput) ColumnGeographicRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSetLogicalTableMapDataTransformTagColumnOperationTag) *string {
		return v.ColumnGeographicRole
	}).(pulumi.StringPtrOutput)
}

type DataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetLogicalTableMapDataTransformTagColumnOperationTag)(nil)).Elem()
}

func (o DataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput) ToDataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput() DataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput) ToDataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput) Index(i pulumi.IntInput) DataSetLogicalTableMapDataTransformTagColumnOperationTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSetLogicalTableMapDataTransformTagColumnOperationTag {
		return vs[0].([]DataSetLogicalTableMapDataTransformTagColumnOperationTag)[vs[1].(int)]
	}).(DataSetLogicalTableMapDataTransformTagColumnOperationTagOutput)
}

type DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription struct {
	// The text of a description for a column.
	Text *string `pulumi:"text"`
}

// DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionInput is an input type that accepts DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs and DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput values.
// You can construct a concrete instance of `DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionInput` via:
//
//	DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs{...}
type DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionInput interface {
	pulumi.Input

	ToDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput() DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput
	ToDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutputWithContext(context.Context) DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput
}

type DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs struct {
	// The text of a description for a column.
	Text pulumi.StringPtrInput `pulumi:"text"`
}

func (DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription)(nil)).Elem()
}

func (i DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs) ToDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput() DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput {
	return i.ToDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs) ToDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput)
}

func (i DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs) ToDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrOutput() DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrOutput {
	return i.ToDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs) ToDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput).ToDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrOutputWithContext(ctx)
}

// DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrInput is an input type that accepts DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs, DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtr and DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrOutput values.
// You can construct a concrete instance of `DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrInput` via:
//
//	        DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs{...}
//
//	or:
//
//	        nil
type DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrInput interface {
	pulumi.Input

	ToDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrOutput() DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrOutput
	ToDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrOutputWithContext(context.Context) DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrOutput
}

type dataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrType DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs

func DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtr(v *DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs) DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrInput {
	return (*dataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrType)(v)
}

func (*dataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription)(nil)).Elem()
}

func (i *dataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrType) ToDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrOutput() DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrOutput {
	return i.ToDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrOutputWithContext(context.Background())
}

func (i *dataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrType) ToDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrOutput)
}

type DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription)(nil)).Elem()
}

func (o DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput) ToDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput() DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput) ToDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput) ToDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrOutput() DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrOutput {
	return o.ToDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrOutputWithContext(context.Background())
}

func (o DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput) ToDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription) *DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription {
		return &v
	}).(DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrOutput)
}

// The text of a description for a column.
func (o DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription) *string {
		return v.Text
	}).(pulumi.StringPtrOutput)
}

type DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription)(nil)).Elem()
}

func (o DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrOutput) ToDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrOutput() DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrOutput) ToDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrOutput) Elem() DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput {
	return o.ApplyT(func(v *DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription) DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription {
		if v != nil {
			return *v
		}
		var ret DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription
		return ret
	}).(DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput)
}

// The text of a description for a column.
func (o DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription) *string {
		if v == nil {
			return nil
		}
		return v.Text
	}).(pulumi.StringPtrOutput)
}

type DataSetLogicalTableMapDataTransformUntagColumnOperation struct {
	// Column name.
	ColumnName string `pulumi:"columnName"`
	// The column tags to remove from this column.
	TagNames []string `pulumi:"tagNames"`
}

// DataSetLogicalTableMapDataTransformUntagColumnOperationInput is an input type that accepts DataSetLogicalTableMapDataTransformUntagColumnOperationArgs and DataSetLogicalTableMapDataTransformUntagColumnOperationOutput values.
// You can construct a concrete instance of `DataSetLogicalTableMapDataTransformUntagColumnOperationInput` via:
//
//	DataSetLogicalTableMapDataTransformUntagColumnOperationArgs{...}
type DataSetLogicalTableMapDataTransformUntagColumnOperationInput interface {
	pulumi.Input

	ToDataSetLogicalTableMapDataTransformUntagColumnOperationOutput() DataSetLogicalTableMapDataTransformUntagColumnOperationOutput
	ToDataSetLogicalTableMapDataTransformUntagColumnOperationOutputWithContext(context.Context) DataSetLogicalTableMapDataTransformUntagColumnOperationOutput
}

type DataSetLogicalTableMapDataTransformUntagColumnOperationArgs struct {
	// Column name.
	ColumnName pulumi.StringInput `pulumi:"columnName"`
	// The column tags to remove from this column.
	TagNames pulumi.StringArrayInput `pulumi:"tagNames"`
}

func (DataSetLogicalTableMapDataTransformUntagColumnOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformUntagColumnOperation)(nil)).Elem()
}

func (i DataSetLogicalTableMapDataTransformUntagColumnOperationArgs) ToDataSetLogicalTableMapDataTransformUntagColumnOperationOutput() DataSetLogicalTableMapDataTransformUntagColumnOperationOutput {
	return i.ToDataSetLogicalTableMapDataTransformUntagColumnOperationOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapDataTransformUntagColumnOperationArgs) ToDataSetLogicalTableMapDataTransformUntagColumnOperationOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformUntagColumnOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformUntagColumnOperationOutput)
}

func (i DataSetLogicalTableMapDataTransformUntagColumnOperationArgs) ToDataSetLogicalTableMapDataTransformUntagColumnOperationPtrOutput() DataSetLogicalTableMapDataTransformUntagColumnOperationPtrOutput {
	return i.ToDataSetLogicalTableMapDataTransformUntagColumnOperationPtrOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapDataTransformUntagColumnOperationArgs) ToDataSetLogicalTableMapDataTransformUntagColumnOperationPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformUntagColumnOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformUntagColumnOperationOutput).ToDataSetLogicalTableMapDataTransformUntagColumnOperationPtrOutputWithContext(ctx)
}

// DataSetLogicalTableMapDataTransformUntagColumnOperationPtrInput is an input type that accepts DataSetLogicalTableMapDataTransformUntagColumnOperationArgs, DataSetLogicalTableMapDataTransformUntagColumnOperationPtr and DataSetLogicalTableMapDataTransformUntagColumnOperationPtrOutput values.
// You can construct a concrete instance of `DataSetLogicalTableMapDataTransformUntagColumnOperationPtrInput` via:
//
//	        DataSetLogicalTableMapDataTransformUntagColumnOperationArgs{...}
//
//	or:
//
//	        nil
type DataSetLogicalTableMapDataTransformUntagColumnOperationPtrInput interface {
	pulumi.Input

	ToDataSetLogicalTableMapDataTransformUntagColumnOperationPtrOutput() DataSetLogicalTableMapDataTransformUntagColumnOperationPtrOutput
	ToDataSetLogicalTableMapDataTransformUntagColumnOperationPtrOutputWithContext(context.Context) DataSetLogicalTableMapDataTransformUntagColumnOperationPtrOutput
}

type dataSetLogicalTableMapDataTransformUntagColumnOperationPtrType DataSetLogicalTableMapDataTransformUntagColumnOperationArgs

func DataSetLogicalTableMapDataTransformUntagColumnOperationPtr(v *DataSetLogicalTableMapDataTransformUntagColumnOperationArgs) DataSetLogicalTableMapDataTransformUntagColumnOperationPtrInput {
	return (*dataSetLogicalTableMapDataTransformUntagColumnOperationPtrType)(v)
}

func (*dataSetLogicalTableMapDataTransformUntagColumnOperationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetLogicalTableMapDataTransformUntagColumnOperation)(nil)).Elem()
}

func (i *dataSetLogicalTableMapDataTransformUntagColumnOperationPtrType) ToDataSetLogicalTableMapDataTransformUntagColumnOperationPtrOutput() DataSetLogicalTableMapDataTransformUntagColumnOperationPtrOutput {
	return i.ToDataSetLogicalTableMapDataTransformUntagColumnOperationPtrOutputWithContext(context.Background())
}

func (i *dataSetLogicalTableMapDataTransformUntagColumnOperationPtrType) ToDataSetLogicalTableMapDataTransformUntagColumnOperationPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformUntagColumnOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapDataTransformUntagColumnOperationPtrOutput)
}

type DataSetLogicalTableMapDataTransformUntagColumnOperationOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapDataTransformUntagColumnOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapDataTransformUntagColumnOperation)(nil)).Elem()
}

func (o DataSetLogicalTableMapDataTransformUntagColumnOperationOutput) ToDataSetLogicalTableMapDataTransformUntagColumnOperationOutput() DataSetLogicalTableMapDataTransformUntagColumnOperationOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformUntagColumnOperationOutput) ToDataSetLogicalTableMapDataTransformUntagColumnOperationOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformUntagColumnOperationOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformUntagColumnOperationOutput) ToDataSetLogicalTableMapDataTransformUntagColumnOperationPtrOutput() DataSetLogicalTableMapDataTransformUntagColumnOperationPtrOutput {
	return o.ToDataSetLogicalTableMapDataTransformUntagColumnOperationPtrOutputWithContext(context.Background())
}

func (o DataSetLogicalTableMapDataTransformUntagColumnOperationOutput) ToDataSetLogicalTableMapDataTransformUntagColumnOperationPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformUntagColumnOperationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetLogicalTableMapDataTransformUntagColumnOperation) *DataSetLogicalTableMapDataTransformUntagColumnOperation {
		return &v
	}).(DataSetLogicalTableMapDataTransformUntagColumnOperationPtrOutput)
}

// Column name.
func (o DataSetLogicalTableMapDataTransformUntagColumnOperationOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetLogicalTableMapDataTransformUntagColumnOperation) string { return v.ColumnName }).(pulumi.StringOutput)
}

// The column tags to remove from this column.
func (o DataSetLogicalTableMapDataTransformUntagColumnOperationOutput) TagNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataSetLogicalTableMapDataTransformUntagColumnOperation) []string { return v.TagNames }).(pulumi.StringArrayOutput)
}

type DataSetLogicalTableMapDataTransformUntagColumnOperationPtrOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapDataTransformUntagColumnOperationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetLogicalTableMapDataTransformUntagColumnOperation)(nil)).Elem()
}

func (o DataSetLogicalTableMapDataTransformUntagColumnOperationPtrOutput) ToDataSetLogicalTableMapDataTransformUntagColumnOperationPtrOutput() DataSetLogicalTableMapDataTransformUntagColumnOperationPtrOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformUntagColumnOperationPtrOutput) ToDataSetLogicalTableMapDataTransformUntagColumnOperationPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapDataTransformUntagColumnOperationPtrOutput {
	return o
}

func (o DataSetLogicalTableMapDataTransformUntagColumnOperationPtrOutput) Elem() DataSetLogicalTableMapDataTransformUntagColumnOperationOutput {
	return o.ApplyT(func(v *DataSetLogicalTableMapDataTransformUntagColumnOperation) DataSetLogicalTableMapDataTransformUntagColumnOperation {
		if v != nil {
			return *v
		}
		var ret DataSetLogicalTableMapDataTransformUntagColumnOperation
		return ret
	}).(DataSetLogicalTableMapDataTransformUntagColumnOperationOutput)
}

// Column name.
func (o DataSetLogicalTableMapDataTransformUntagColumnOperationPtrOutput) ColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetLogicalTableMapDataTransformUntagColumnOperation) *string {
		if v == nil {
			return nil
		}
		return &v.ColumnName
	}).(pulumi.StringPtrOutput)
}

// The column tags to remove from this column.
func (o DataSetLogicalTableMapDataTransformUntagColumnOperationPtrOutput) TagNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DataSetLogicalTableMapDataTransformUntagColumnOperation) []string {
		if v == nil {
			return nil
		}
		return v.TagNames
	}).(pulumi.StringArrayOutput)
}

type DataSetLogicalTableMapSource struct {
	// ARN of the parent data set.
	DataSetArn *string `pulumi:"dataSetArn"`
	// Specifies the result of a join of two logical tables. See join_instruction.
	JoinInstruction *DataSetLogicalTableMapSourceJoinInstruction `pulumi:"joinInstruction"`
	// Physical table ID.
	PhysicalTableId *string `pulumi:"physicalTableId"`
}

// DataSetLogicalTableMapSourceInput is an input type that accepts DataSetLogicalTableMapSourceArgs and DataSetLogicalTableMapSourceOutput values.
// You can construct a concrete instance of `DataSetLogicalTableMapSourceInput` via:
//
//	DataSetLogicalTableMapSourceArgs{...}
type DataSetLogicalTableMapSourceInput interface {
	pulumi.Input

	ToDataSetLogicalTableMapSourceOutput() DataSetLogicalTableMapSourceOutput
	ToDataSetLogicalTableMapSourceOutputWithContext(context.Context) DataSetLogicalTableMapSourceOutput
}

type DataSetLogicalTableMapSourceArgs struct {
	// ARN of the parent data set.
	DataSetArn pulumi.StringPtrInput `pulumi:"dataSetArn"`
	// Specifies the result of a join of two logical tables. See join_instruction.
	JoinInstruction DataSetLogicalTableMapSourceJoinInstructionPtrInput `pulumi:"joinInstruction"`
	// Physical table ID.
	PhysicalTableId pulumi.StringPtrInput `pulumi:"physicalTableId"`
}

func (DataSetLogicalTableMapSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapSource)(nil)).Elem()
}

func (i DataSetLogicalTableMapSourceArgs) ToDataSetLogicalTableMapSourceOutput() DataSetLogicalTableMapSourceOutput {
	return i.ToDataSetLogicalTableMapSourceOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapSourceArgs) ToDataSetLogicalTableMapSourceOutputWithContext(ctx context.Context) DataSetLogicalTableMapSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapSourceOutput)
}

type DataSetLogicalTableMapSourceOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapSource)(nil)).Elem()
}

func (o DataSetLogicalTableMapSourceOutput) ToDataSetLogicalTableMapSourceOutput() DataSetLogicalTableMapSourceOutput {
	return o
}

func (o DataSetLogicalTableMapSourceOutput) ToDataSetLogicalTableMapSourceOutputWithContext(ctx context.Context) DataSetLogicalTableMapSourceOutput {
	return o
}

// ARN of the parent data set.
func (o DataSetLogicalTableMapSourceOutput) DataSetArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSetLogicalTableMapSource) *string { return v.DataSetArn }).(pulumi.StringPtrOutput)
}

// Specifies the result of a join of two logical tables. See join_instruction.
func (o DataSetLogicalTableMapSourceOutput) JoinInstruction() DataSetLogicalTableMapSourceJoinInstructionPtrOutput {
	return o.ApplyT(func(v DataSetLogicalTableMapSource) *DataSetLogicalTableMapSourceJoinInstruction {
		return v.JoinInstruction
	}).(DataSetLogicalTableMapSourceJoinInstructionPtrOutput)
}

// Physical table ID.
func (o DataSetLogicalTableMapSourceOutput) PhysicalTableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSetLogicalTableMapSource) *string { return v.PhysicalTableId }).(pulumi.StringPtrOutput)
}

type DataSetLogicalTableMapSourceJoinInstruction struct {
	// Join key properties of the left operand. See left_join_key_properties.
	LeftJoinKeyProperties *DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperties `pulumi:"leftJoinKeyProperties"`
	// Operand on the left side of a join.
	LeftOperand string `pulumi:"leftOperand"`
	// Join instructions provided in the ON clause of a join.
	OnClause string `pulumi:"onClause"`
	// Join key properties of the right operand. See right_join_key_properties.
	RightJoinKeyProperties *DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperties `pulumi:"rightJoinKeyProperties"`
	// Operand on the right side of a join.
	RightOperand string `pulumi:"rightOperand"`
	// Type of join. Valid values are `INNER`, `OUTER`, `LEFT`, and `RIGHT`.
	Type string `pulumi:"type"`
}

// DataSetLogicalTableMapSourceJoinInstructionInput is an input type that accepts DataSetLogicalTableMapSourceJoinInstructionArgs and DataSetLogicalTableMapSourceJoinInstructionOutput values.
// You can construct a concrete instance of `DataSetLogicalTableMapSourceJoinInstructionInput` via:
//
//	DataSetLogicalTableMapSourceJoinInstructionArgs{...}
type DataSetLogicalTableMapSourceJoinInstructionInput interface {
	pulumi.Input

	ToDataSetLogicalTableMapSourceJoinInstructionOutput() DataSetLogicalTableMapSourceJoinInstructionOutput
	ToDataSetLogicalTableMapSourceJoinInstructionOutputWithContext(context.Context) DataSetLogicalTableMapSourceJoinInstructionOutput
}

type DataSetLogicalTableMapSourceJoinInstructionArgs struct {
	// Join key properties of the left operand. See left_join_key_properties.
	LeftJoinKeyProperties DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrInput `pulumi:"leftJoinKeyProperties"`
	// Operand on the left side of a join.
	LeftOperand pulumi.StringInput `pulumi:"leftOperand"`
	// Join instructions provided in the ON clause of a join.
	OnClause pulumi.StringInput `pulumi:"onClause"`
	// Join key properties of the right operand. See right_join_key_properties.
	RightJoinKeyProperties DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrInput `pulumi:"rightJoinKeyProperties"`
	// Operand on the right side of a join.
	RightOperand pulumi.StringInput `pulumi:"rightOperand"`
	// Type of join. Valid values are `INNER`, `OUTER`, `LEFT`, and `RIGHT`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DataSetLogicalTableMapSourceJoinInstructionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapSourceJoinInstruction)(nil)).Elem()
}

func (i DataSetLogicalTableMapSourceJoinInstructionArgs) ToDataSetLogicalTableMapSourceJoinInstructionOutput() DataSetLogicalTableMapSourceJoinInstructionOutput {
	return i.ToDataSetLogicalTableMapSourceJoinInstructionOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapSourceJoinInstructionArgs) ToDataSetLogicalTableMapSourceJoinInstructionOutputWithContext(ctx context.Context) DataSetLogicalTableMapSourceJoinInstructionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapSourceJoinInstructionOutput)
}

func (i DataSetLogicalTableMapSourceJoinInstructionArgs) ToDataSetLogicalTableMapSourceJoinInstructionPtrOutput() DataSetLogicalTableMapSourceJoinInstructionPtrOutput {
	return i.ToDataSetLogicalTableMapSourceJoinInstructionPtrOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapSourceJoinInstructionArgs) ToDataSetLogicalTableMapSourceJoinInstructionPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapSourceJoinInstructionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapSourceJoinInstructionOutput).ToDataSetLogicalTableMapSourceJoinInstructionPtrOutputWithContext(ctx)
}

// DataSetLogicalTableMapSourceJoinInstructionPtrInput is an input type that accepts DataSetLogicalTableMapSourceJoinInstructionArgs, DataSetLogicalTableMapSourceJoinInstructionPtr and DataSetLogicalTableMapSourceJoinInstructionPtrOutput values.
// You can construct a concrete instance of `DataSetLogicalTableMapSourceJoinInstructionPtrInput` via:
//
//	        DataSetLogicalTableMapSourceJoinInstructionArgs{...}
//
//	or:
//
//	        nil
type DataSetLogicalTableMapSourceJoinInstructionPtrInput interface {
	pulumi.Input

	ToDataSetLogicalTableMapSourceJoinInstructionPtrOutput() DataSetLogicalTableMapSourceJoinInstructionPtrOutput
	ToDataSetLogicalTableMapSourceJoinInstructionPtrOutputWithContext(context.Context) DataSetLogicalTableMapSourceJoinInstructionPtrOutput
}

type dataSetLogicalTableMapSourceJoinInstructionPtrType DataSetLogicalTableMapSourceJoinInstructionArgs

func DataSetLogicalTableMapSourceJoinInstructionPtr(v *DataSetLogicalTableMapSourceJoinInstructionArgs) DataSetLogicalTableMapSourceJoinInstructionPtrInput {
	return (*dataSetLogicalTableMapSourceJoinInstructionPtrType)(v)
}

func (*dataSetLogicalTableMapSourceJoinInstructionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetLogicalTableMapSourceJoinInstruction)(nil)).Elem()
}

func (i *dataSetLogicalTableMapSourceJoinInstructionPtrType) ToDataSetLogicalTableMapSourceJoinInstructionPtrOutput() DataSetLogicalTableMapSourceJoinInstructionPtrOutput {
	return i.ToDataSetLogicalTableMapSourceJoinInstructionPtrOutputWithContext(context.Background())
}

func (i *dataSetLogicalTableMapSourceJoinInstructionPtrType) ToDataSetLogicalTableMapSourceJoinInstructionPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapSourceJoinInstructionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapSourceJoinInstructionPtrOutput)
}

type DataSetLogicalTableMapSourceJoinInstructionOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapSourceJoinInstructionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapSourceJoinInstruction)(nil)).Elem()
}

func (o DataSetLogicalTableMapSourceJoinInstructionOutput) ToDataSetLogicalTableMapSourceJoinInstructionOutput() DataSetLogicalTableMapSourceJoinInstructionOutput {
	return o
}

func (o DataSetLogicalTableMapSourceJoinInstructionOutput) ToDataSetLogicalTableMapSourceJoinInstructionOutputWithContext(ctx context.Context) DataSetLogicalTableMapSourceJoinInstructionOutput {
	return o
}

func (o DataSetLogicalTableMapSourceJoinInstructionOutput) ToDataSetLogicalTableMapSourceJoinInstructionPtrOutput() DataSetLogicalTableMapSourceJoinInstructionPtrOutput {
	return o.ToDataSetLogicalTableMapSourceJoinInstructionPtrOutputWithContext(context.Background())
}

func (o DataSetLogicalTableMapSourceJoinInstructionOutput) ToDataSetLogicalTableMapSourceJoinInstructionPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapSourceJoinInstructionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetLogicalTableMapSourceJoinInstruction) *DataSetLogicalTableMapSourceJoinInstruction {
		return &v
	}).(DataSetLogicalTableMapSourceJoinInstructionPtrOutput)
}

// Join key properties of the left operand. See left_join_key_properties.
func (o DataSetLogicalTableMapSourceJoinInstructionOutput) LeftJoinKeyProperties() DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutput {
	return o.ApplyT(func(v DataSetLogicalTableMapSourceJoinInstruction) *DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperties {
		return v.LeftJoinKeyProperties
	}).(DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutput)
}

// Operand on the left side of a join.
func (o DataSetLogicalTableMapSourceJoinInstructionOutput) LeftOperand() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetLogicalTableMapSourceJoinInstruction) string { return v.LeftOperand }).(pulumi.StringOutput)
}

// Join instructions provided in the ON clause of a join.
func (o DataSetLogicalTableMapSourceJoinInstructionOutput) OnClause() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetLogicalTableMapSourceJoinInstruction) string { return v.OnClause }).(pulumi.StringOutput)
}

// Join key properties of the right operand. See right_join_key_properties.
func (o DataSetLogicalTableMapSourceJoinInstructionOutput) RightJoinKeyProperties() DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutput {
	return o.ApplyT(func(v DataSetLogicalTableMapSourceJoinInstruction) *DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperties {
		return v.RightJoinKeyProperties
	}).(DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutput)
}

// Operand on the right side of a join.
func (o DataSetLogicalTableMapSourceJoinInstructionOutput) RightOperand() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetLogicalTableMapSourceJoinInstruction) string { return v.RightOperand }).(pulumi.StringOutput)
}

// Type of join. Valid values are `INNER`, `OUTER`, `LEFT`, and `RIGHT`.
func (o DataSetLogicalTableMapSourceJoinInstructionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetLogicalTableMapSourceJoinInstruction) string { return v.Type }).(pulumi.StringOutput)
}

type DataSetLogicalTableMapSourceJoinInstructionPtrOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapSourceJoinInstructionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetLogicalTableMapSourceJoinInstruction)(nil)).Elem()
}

func (o DataSetLogicalTableMapSourceJoinInstructionPtrOutput) ToDataSetLogicalTableMapSourceJoinInstructionPtrOutput() DataSetLogicalTableMapSourceJoinInstructionPtrOutput {
	return o
}

func (o DataSetLogicalTableMapSourceJoinInstructionPtrOutput) ToDataSetLogicalTableMapSourceJoinInstructionPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapSourceJoinInstructionPtrOutput {
	return o
}

func (o DataSetLogicalTableMapSourceJoinInstructionPtrOutput) Elem() DataSetLogicalTableMapSourceJoinInstructionOutput {
	return o.ApplyT(func(v *DataSetLogicalTableMapSourceJoinInstruction) DataSetLogicalTableMapSourceJoinInstruction {
		if v != nil {
			return *v
		}
		var ret DataSetLogicalTableMapSourceJoinInstruction
		return ret
	}).(DataSetLogicalTableMapSourceJoinInstructionOutput)
}

// Join key properties of the left operand. See left_join_key_properties.
func (o DataSetLogicalTableMapSourceJoinInstructionPtrOutput) LeftJoinKeyProperties() DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutput {
	return o.ApplyT(func(v *DataSetLogicalTableMapSourceJoinInstruction) *DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperties {
		if v == nil {
			return nil
		}
		return v.LeftJoinKeyProperties
	}).(DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutput)
}

// Operand on the left side of a join.
func (o DataSetLogicalTableMapSourceJoinInstructionPtrOutput) LeftOperand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetLogicalTableMapSourceJoinInstruction) *string {
		if v == nil {
			return nil
		}
		return &v.LeftOperand
	}).(pulumi.StringPtrOutput)
}

// Join instructions provided in the ON clause of a join.
func (o DataSetLogicalTableMapSourceJoinInstructionPtrOutput) OnClause() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetLogicalTableMapSourceJoinInstruction) *string {
		if v == nil {
			return nil
		}
		return &v.OnClause
	}).(pulumi.StringPtrOutput)
}

// Join key properties of the right operand. See right_join_key_properties.
func (o DataSetLogicalTableMapSourceJoinInstructionPtrOutput) RightJoinKeyProperties() DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutput {
	return o.ApplyT(func(v *DataSetLogicalTableMapSourceJoinInstruction) *DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperties {
		if v == nil {
			return nil
		}
		return v.RightJoinKeyProperties
	}).(DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutput)
}

// Operand on the right side of a join.
func (o DataSetLogicalTableMapSourceJoinInstructionPtrOutput) RightOperand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetLogicalTableMapSourceJoinInstruction) *string {
		if v == nil {
			return nil
		}
		return &v.RightOperand
	}).(pulumi.StringPtrOutput)
}

// Type of join. Valid values are `INNER`, `OUTER`, `LEFT`, and `RIGHT`.
func (o DataSetLogicalTableMapSourceJoinInstructionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetLogicalTableMapSourceJoinInstruction) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperties struct {
	// A value that indicates that a row in a table is uniquely identified by the columns in a join key. This is used by Amazon QuickSight to optimize query performance.
	UniqueKey *bool `pulumi:"uniqueKey"`
}

// DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesInput is an input type that accepts DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesArgs and DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput values.
// You can construct a concrete instance of `DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesInput` via:
//
//	DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesArgs{...}
type DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesInput interface {
	pulumi.Input

	ToDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput() DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput
	ToDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutputWithContext(context.Context) DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput
}

type DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesArgs struct {
	// A value that indicates that a row in a table is uniquely identified by the columns in a join key. This is used by Amazon QuickSight to optimize query performance.
	UniqueKey pulumi.BoolPtrInput `pulumi:"uniqueKey"`
}

func (DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperties)(nil)).Elem()
}

func (i DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesArgs) ToDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput() DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput {
	return i.ToDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesArgs) ToDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutputWithContext(ctx context.Context) DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput)
}

func (i DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesArgs) ToDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutput() DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutput {
	return i.ToDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesArgs) ToDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput).ToDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutputWithContext(ctx)
}

// DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrInput is an input type that accepts DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesArgs, DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtr and DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutput values.
// You can construct a concrete instance of `DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrInput` via:
//
//	        DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesArgs{...}
//
//	or:
//
//	        nil
type DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrInput interface {
	pulumi.Input

	ToDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutput() DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutput
	ToDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutputWithContext(context.Context) DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutput
}

type dataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrType DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesArgs

func DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtr(v *DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesArgs) DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrInput {
	return (*dataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrType)(v)
}

func (*dataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperties)(nil)).Elem()
}

func (i *dataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrType) ToDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutput() DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutput {
	return i.ToDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutputWithContext(context.Background())
}

func (i *dataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrType) ToDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutput)
}

type DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperties)(nil)).Elem()
}

func (o DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput) ToDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput() DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput {
	return o
}

func (o DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput) ToDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutputWithContext(ctx context.Context) DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput {
	return o
}

func (o DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput) ToDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutput() DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutput {
	return o.ToDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutputWithContext(context.Background())
}

func (o DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput) ToDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperties) *DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperties {
		return &v
	}).(DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutput)
}

// A value that indicates that a row in a table is uniquely identified by the columns in a join key. This is used by Amazon QuickSight to optimize query performance.
func (o DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput) UniqueKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperties) *bool { return v.UniqueKey }).(pulumi.BoolPtrOutput)
}

type DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperties)(nil)).Elem()
}

func (o DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutput) ToDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutput() DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutput {
	return o
}

func (o DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutput) ToDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutput {
	return o
}

func (o DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutput) Elem() DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput {
	return o.ApplyT(func(v *DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperties) DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperties {
		if v != nil {
			return *v
		}
		var ret DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperties
		return ret
	}).(DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput)
}

// A value that indicates that a row in a table is uniquely identified by the columns in a join key. This is used by Amazon QuickSight to optimize query performance.
func (o DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutput) UniqueKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperties) *bool {
		if v == nil {
			return nil
		}
		return v.UniqueKey
	}).(pulumi.BoolPtrOutput)
}

type DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperties struct {
	// A value that indicates that a row in a table is uniquely identified by the columns in a join key. This is used by Amazon QuickSight to optimize query performance.
	UniqueKey *bool `pulumi:"uniqueKey"`
}

// DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesInput is an input type that accepts DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesArgs and DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput values.
// You can construct a concrete instance of `DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesInput` via:
//
//	DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesArgs{...}
type DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesInput interface {
	pulumi.Input

	ToDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput() DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput
	ToDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutputWithContext(context.Context) DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput
}

type DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesArgs struct {
	// A value that indicates that a row in a table is uniquely identified by the columns in a join key. This is used by Amazon QuickSight to optimize query performance.
	UniqueKey pulumi.BoolPtrInput `pulumi:"uniqueKey"`
}

func (DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperties)(nil)).Elem()
}

func (i DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesArgs) ToDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput() DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput {
	return i.ToDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesArgs) ToDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutputWithContext(ctx context.Context) DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput)
}

func (i DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesArgs) ToDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutput() DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutput {
	return i.ToDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesArgs) ToDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput).ToDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutputWithContext(ctx)
}

// DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrInput is an input type that accepts DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesArgs, DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtr and DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutput values.
// You can construct a concrete instance of `DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrInput` via:
//
//	        DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesArgs{...}
//
//	or:
//
//	        nil
type DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrInput interface {
	pulumi.Input

	ToDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutput() DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutput
	ToDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutputWithContext(context.Context) DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutput
}

type dataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrType DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesArgs

func DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtr(v *DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesArgs) DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrInput {
	return (*dataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrType)(v)
}

func (*dataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperties)(nil)).Elem()
}

func (i *dataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrType) ToDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutput() DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutput {
	return i.ToDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutputWithContext(context.Background())
}

func (i *dataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrType) ToDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutput)
}

type DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperties)(nil)).Elem()
}

func (o DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput) ToDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput() DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput {
	return o
}

func (o DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput) ToDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutputWithContext(ctx context.Context) DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput {
	return o
}

func (o DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput) ToDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutput() DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutput {
	return o.ToDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutputWithContext(context.Background())
}

func (o DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput) ToDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperties) *DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperties {
		return &v
	}).(DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutput)
}

// A value that indicates that a row in a table is uniquely identified by the columns in a join key. This is used by Amazon QuickSight to optimize query performance.
func (o DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput) UniqueKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperties) *bool { return v.UniqueKey }).(pulumi.BoolPtrOutput)
}

type DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperties)(nil)).Elem()
}

func (o DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutput) ToDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutput() DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutput {
	return o
}

func (o DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutput) ToDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutput {
	return o
}

func (o DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutput) Elem() DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput {
	return o.ApplyT(func(v *DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperties) DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperties {
		if v != nil {
			return *v
		}
		var ret DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperties
		return ret
	}).(DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput)
}

// A value that indicates that a row in a table is uniquely identified by the columns in a join key. This is used by Amazon QuickSight to optimize query performance.
func (o DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutput) UniqueKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperties) *bool {
		if v == nil {
			return nil
		}
		return v.UniqueKey
	}).(pulumi.BoolPtrOutput)
}

type DataSetOutputColumn struct {
	// Field folder description.
	Description *string `pulumi:"description"`
	// Display name for the dataset.
	Name *string `pulumi:"name"`
	// Data type of the column.
	Type *string `pulumi:"type"`
}

// DataSetOutputColumnInput is an input type that accepts DataSetOutputColumnArgs and DataSetOutputColumnOutput values.
// You can construct a concrete instance of `DataSetOutputColumnInput` via:
//
//	DataSetOutputColumnArgs{...}
type DataSetOutputColumnInput interface {
	pulumi.Input

	ToDataSetOutputColumnOutput() DataSetOutputColumnOutput
	ToDataSetOutputColumnOutputWithContext(context.Context) DataSetOutputColumnOutput
}

type DataSetOutputColumnArgs struct {
	// Field folder description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Display name for the dataset.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Data type of the column.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DataSetOutputColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetOutputColumn)(nil)).Elem()
}

func (i DataSetOutputColumnArgs) ToDataSetOutputColumnOutput() DataSetOutputColumnOutput {
	return i.ToDataSetOutputColumnOutputWithContext(context.Background())
}

func (i DataSetOutputColumnArgs) ToDataSetOutputColumnOutputWithContext(ctx context.Context) DataSetOutputColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetOutputColumnOutput)
}

// DataSetOutputColumnArrayInput is an input type that accepts DataSetOutputColumnArray and DataSetOutputColumnArrayOutput values.
// You can construct a concrete instance of `DataSetOutputColumnArrayInput` via:
//
//	DataSetOutputColumnArray{ DataSetOutputColumnArgs{...} }
type DataSetOutputColumnArrayInput interface {
	pulumi.Input

	ToDataSetOutputColumnArrayOutput() DataSetOutputColumnArrayOutput
	ToDataSetOutputColumnArrayOutputWithContext(context.Context) DataSetOutputColumnArrayOutput
}

type DataSetOutputColumnArray []DataSetOutputColumnInput

func (DataSetOutputColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetOutputColumn)(nil)).Elem()
}

func (i DataSetOutputColumnArray) ToDataSetOutputColumnArrayOutput() DataSetOutputColumnArrayOutput {
	return i.ToDataSetOutputColumnArrayOutputWithContext(context.Background())
}

func (i DataSetOutputColumnArray) ToDataSetOutputColumnArrayOutputWithContext(ctx context.Context) DataSetOutputColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetOutputColumnArrayOutput)
}

type DataSetOutputColumnOutput struct{ *pulumi.OutputState }

func (DataSetOutputColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetOutputColumn)(nil)).Elem()
}

func (o DataSetOutputColumnOutput) ToDataSetOutputColumnOutput() DataSetOutputColumnOutput {
	return o
}

func (o DataSetOutputColumnOutput) ToDataSetOutputColumnOutputWithContext(ctx context.Context) DataSetOutputColumnOutput {
	return o
}

// Field folder description.
func (o DataSetOutputColumnOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSetOutputColumn) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name for the dataset.
func (o DataSetOutputColumnOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSetOutputColumn) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Data type of the column.
func (o DataSetOutputColumnOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSetOutputColumn) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DataSetOutputColumnArrayOutput struct{ *pulumi.OutputState }

func (DataSetOutputColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetOutputColumn)(nil)).Elem()
}

func (o DataSetOutputColumnArrayOutput) ToDataSetOutputColumnArrayOutput() DataSetOutputColumnArrayOutput {
	return o
}

func (o DataSetOutputColumnArrayOutput) ToDataSetOutputColumnArrayOutputWithContext(ctx context.Context) DataSetOutputColumnArrayOutput {
	return o
}

func (o DataSetOutputColumnArrayOutput) Index(i pulumi.IntInput) DataSetOutputColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSetOutputColumn {
		return vs[0].([]DataSetOutputColumn)[vs[1].(int)]
	}).(DataSetOutputColumnOutput)
}

type DataSetPermission struct {
	// List of IAM actions to grant or revoke permissions on.
	Actions []string `pulumi:"actions"`
	// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
	Principal string `pulumi:"principal"`
}

// DataSetPermissionInput is an input type that accepts DataSetPermissionArgs and DataSetPermissionOutput values.
// You can construct a concrete instance of `DataSetPermissionInput` via:
//
//	DataSetPermissionArgs{...}
type DataSetPermissionInput interface {
	pulumi.Input

	ToDataSetPermissionOutput() DataSetPermissionOutput
	ToDataSetPermissionOutputWithContext(context.Context) DataSetPermissionOutput
}

type DataSetPermissionArgs struct {
	// List of IAM actions to grant or revoke permissions on.
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
	Principal pulumi.StringInput `pulumi:"principal"`
}

func (DataSetPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPermission)(nil)).Elem()
}

func (i DataSetPermissionArgs) ToDataSetPermissionOutput() DataSetPermissionOutput {
	return i.ToDataSetPermissionOutputWithContext(context.Background())
}

func (i DataSetPermissionArgs) ToDataSetPermissionOutputWithContext(ctx context.Context) DataSetPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPermissionOutput)
}

// DataSetPermissionArrayInput is an input type that accepts DataSetPermissionArray and DataSetPermissionArrayOutput values.
// You can construct a concrete instance of `DataSetPermissionArrayInput` via:
//
//	DataSetPermissionArray{ DataSetPermissionArgs{...} }
type DataSetPermissionArrayInput interface {
	pulumi.Input

	ToDataSetPermissionArrayOutput() DataSetPermissionArrayOutput
	ToDataSetPermissionArrayOutputWithContext(context.Context) DataSetPermissionArrayOutput
}

type DataSetPermissionArray []DataSetPermissionInput

func (DataSetPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetPermission)(nil)).Elem()
}

func (i DataSetPermissionArray) ToDataSetPermissionArrayOutput() DataSetPermissionArrayOutput {
	return i.ToDataSetPermissionArrayOutputWithContext(context.Background())
}

func (i DataSetPermissionArray) ToDataSetPermissionArrayOutputWithContext(ctx context.Context) DataSetPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPermissionArrayOutput)
}

type DataSetPermissionOutput struct{ *pulumi.OutputState }

func (DataSetPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPermission)(nil)).Elem()
}

func (o DataSetPermissionOutput) ToDataSetPermissionOutput() DataSetPermissionOutput {
	return o
}

func (o DataSetPermissionOutput) ToDataSetPermissionOutputWithContext(ctx context.Context) DataSetPermissionOutput {
	return o
}

// List of IAM actions to grant or revoke permissions on.
func (o DataSetPermissionOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataSetPermission) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
func (o DataSetPermissionOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetPermission) string { return v.Principal }).(pulumi.StringOutput)
}

type DataSetPermissionArrayOutput struct{ *pulumi.OutputState }

func (DataSetPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetPermission)(nil)).Elem()
}

func (o DataSetPermissionArrayOutput) ToDataSetPermissionArrayOutput() DataSetPermissionArrayOutput {
	return o
}

func (o DataSetPermissionArrayOutput) ToDataSetPermissionArrayOutputWithContext(ctx context.Context) DataSetPermissionArrayOutput {
	return o
}

func (o DataSetPermissionArrayOutput) Index(i pulumi.IntInput) DataSetPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSetPermission {
		return vs[0].([]DataSetPermission)[vs[1].(int)]
	}).(DataSetPermissionOutput)
}

type DataSetPhysicalTableMap struct {
	// A physical table type built from the results of the custom SQL query. See custom_sql.
	CustomSql *DataSetPhysicalTableMapCustomSql `pulumi:"customSql"`
	// Key of the physical table map.
	PhysicalTableMapId string `pulumi:"physicalTableMapId"`
	// A physical table type for relational data sources. See relational_table.
	RelationalTable *DataSetPhysicalTableMapRelationalTable `pulumi:"relationalTable"`
	// A physical table type for as S3 data source. See s3_source.
	S3Source *DataSetPhysicalTableMapS3Source `pulumi:"s3Source"`
}

// DataSetPhysicalTableMapInput is an input type that accepts DataSetPhysicalTableMap and DataSetPhysicalTableMapOutput values.
// You can construct a concrete instance of `DataSetPhysicalTableMapInput` via:
//
//	DataSetPhysicalTableMap{ "key": DataSetPhysicalTableArgs{...} }
type DataSetPhysicalTableMapInput interface {
	pulumi.Input

	ToDataSetPhysicalTableMapOutput() DataSetPhysicalTableMapOutput
	ToDataSetPhysicalTableMapOutputWithContext(context.Context) DataSetPhysicalTableMapOutput
}

type DataSetPhysicalTableMapArgs struct {
	// A physical table type built from the results of the custom SQL query. See custom_sql.
	CustomSql DataSetPhysicalTableMapCustomSqlPtrInput `pulumi:"customSql"`
	// Key of the physical table map.
	PhysicalTableMapId pulumi.StringInput `pulumi:"physicalTableMapId"`
	// A physical table type for relational data sources. See relational_table.
	RelationalTable DataSetPhysicalTableMapRelationalTablePtrInput `pulumi:"relationalTable"`
	// A physical table type for as S3 data source. See s3_source.
	S3Source DataSetPhysicalTableMapS3SourcePtrInput `pulumi:"s3Source"`
}

func (DataSetPhysicalTableMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPhysicalTableMap)(nil)).Elem()
}

func (i DataSetPhysicalTableMapArgs) ToDataSetPhysicalTableMapOutput() DataSetPhysicalTableMapOutput {
	return i.ToDataSetPhysicalTableMapOutputWithContext(context.Background())
}

func (i DataSetPhysicalTableMapArgs) ToDataSetPhysicalTableMapOutputWithContext(ctx context.Context) DataSetPhysicalTableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPhysicalTableMapOutput)
}

// DataSetPhysicalTableMapArrayInput is an input type that accepts DataSetPhysicalTableMapArray and DataSetPhysicalTableMapArrayOutput values.
// You can construct a concrete instance of `DataSetPhysicalTableMapArrayInput` via:
//
//	DataSetPhysicalTableMapArray{ DataSetPhysicalTableMapArgs{...} }
type DataSetPhysicalTableMapArrayInput interface {
	pulumi.Input

	ToDataSetPhysicalTableMapArrayOutput() DataSetPhysicalTableMapArrayOutput
	ToDataSetPhysicalTableMapArrayOutputWithContext(context.Context) DataSetPhysicalTableMapArrayOutput
}

type DataSetPhysicalTableMapArray []DataSetPhysicalTableMapInput

func (DataSetPhysicalTableMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetPhysicalTableMap)(nil)).Elem()
}

func (i DataSetPhysicalTableMapArray) ToDataSetPhysicalTableMapArrayOutput() DataSetPhysicalTableMapArrayOutput {
	return i.ToDataSetPhysicalTableMapArrayOutputWithContext(context.Background())
}

func (i DataSetPhysicalTableMapArray) ToDataSetPhysicalTableMapArrayOutputWithContext(ctx context.Context) DataSetPhysicalTableMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPhysicalTableMapArrayOutput)
}

type DataSetPhysicalTableMapOutput struct{ *pulumi.OutputState }

func (DataSetPhysicalTableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPhysicalTableMap)(nil)).Elem()
}

func (o DataSetPhysicalTableMapOutput) ToDataSetPhysicalTableMapOutput() DataSetPhysicalTableMapOutput {
	return o
}

func (o DataSetPhysicalTableMapOutput) ToDataSetPhysicalTableMapOutputWithContext(ctx context.Context) DataSetPhysicalTableMapOutput {
	return o
}

// A physical table type built from the results of the custom SQL query. See custom_sql.
func (o DataSetPhysicalTableMapOutput) CustomSql() DataSetPhysicalTableMapCustomSqlPtrOutput {
	return o.ApplyT(func(v DataSetPhysicalTableMap) *DataSetPhysicalTableMapCustomSql { return v.CustomSql }).(DataSetPhysicalTableMapCustomSqlPtrOutput)
}

// Key of the physical table map.
func (o DataSetPhysicalTableMapOutput) PhysicalTableMapId() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetPhysicalTableMap) string { return v.PhysicalTableMapId }).(pulumi.StringOutput)
}

// A physical table type for relational data sources. See relational_table.
func (o DataSetPhysicalTableMapOutput) RelationalTable() DataSetPhysicalTableMapRelationalTablePtrOutput {
	return o.ApplyT(func(v DataSetPhysicalTableMap) *DataSetPhysicalTableMapRelationalTable { return v.RelationalTable }).(DataSetPhysicalTableMapRelationalTablePtrOutput)
}

// A physical table type for as S3 data source. See s3_source.
func (o DataSetPhysicalTableMapOutput) S3Source() DataSetPhysicalTableMapS3SourcePtrOutput {
	return o.ApplyT(func(v DataSetPhysicalTableMap) *DataSetPhysicalTableMapS3Source { return v.S3Source }).(DataSetPhysicalTableMapS3SourcePtrOutput)
}

type DataSetPhysicalTableMapArrayOutput struct{ *pulumi.OutputState }

func (DataSetPhysicalTableMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetPhysicalTableMap)(nil)).Elem()
}

func (o DataSetPhysicalTableMapArrayOutput) ToDataSetPhysicalTableMapArrayOutput() DataSetPhysicalTableMapArrayOutput {
	return o
}

func (o DataSetPhysicalTableMapArrayOutput) ToDataSetPhysicalTableMapArrayOutputWithContext(ctx context.Context) DataSetPhysicalTableMapArrayOutput {
	return o
}

func (o DataSetPhysicalTableMapArrayOutput) Index(i pulumi.IntInput) DataSetPhysicalTableMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSetPhysicalTableMap {
		return vs[0].([]DataSetPhysicalTableMap)[vs[1].(int)]
	}).(DataSetPhysicalTableMapOutput)
}

type DataSetPhysicalTableMapCustomSql struct {
	// Column schema from the SQL query result set. See columns.
	Columns []DataSetPhysicalTableMapCustomSqlColumn `pulumi:"columns"`
	// ARN of the data source.
	DataSourceArn string `pulumi:"dataSourceArn"`
	// Display name for the SQL query result.
	Name string `pulumi:"name"`
	// SQL query.
	SqlQuery string `pulumi:"sqlQuery"`
}

// DataSetPhysicalTableMapCustomSqlInput is an input type that accepts DataSetPhysicalTableMapCustomSqlArgs and DataSetPhysicalTableMapCustomSqlOutput values.
// You can construct a concrete instance of `DataSetPhysicalTableMapCustomSqlInput` via:
//
//	DataSetPhysicalTableMapCustomSqlArgs{...}
type DataSetPhysicalTableMapCustomSqlInput interface {
	pulumi.Input

	ToDataSetPhysicalTableMapCustomSqlOutput() DataSetPhysicalTableMapCustomSqlOutput
	ToDataSetPhysicalTableMapCustomSqlOutputWithContext(context.Context) DataSetPhysicalTableMapCustomSqlOutput
}

type DataSetPhysicalTableMapCustomSqlArgs struct {
	// Column schema from the SQL query result set. See columns.
	Columns DataSetPhysicalTableMapCustomSqlColumnArrayInput `pulumi:"columns"`
	// ARN of the data source.
	DataSourceArn pulumi.StringInput `pulumi:"dataSourceArn"`
	// Display name for the SQL query result.
	Name pulumi.StringInput `pulumi:"name"`
	// SQL query.
	SqlQuery pulumi.StringInput `pulumi:"sqlQuery"`
}

func (DataSetPhysicalTableMapCustomSqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPhysicalTableMapCustomSql)(nil)).Elem()
}

func (i DataSetPhysicalTableMapCustomSqlArgs) ToDataSetPhysicalTableMapCustomSqlOutput() DataSetPhysicalTableMapCustomSqlOutput {
	return i.ToDataSetPhysicalTableMapCustomSqlOutputWithContext(context.Background())
}

func (i DataSetPhysicalTableMapCustomSqlArgs) ToDataSetPhysicalTableMapCustomSqlOutputWithContext(ctx context.Context) DataSetPhysicalTableMapCustomSqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPhysicalTableMapCustomSqlOutput)
}

func (i DataSetPhysicalTableMapCustomSqlArgs) ToDataSetPhysicalTableMapCustomSqlPtrOutput() DataSetPhysicalTableMapCustomSqlPtrOutput {
	return i.ToDataSetPhysicalTableMapCustomSqlPtrOutputWithContext(context.Background())
}

func (i DataSetPhysicalTableMapCustomSqlArgs) ToDataSetPhysicalTableMapCustomSqlPtrOutputWithContext(ctx context.Context) DataSetPhysicalTableMapCustomSqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPhysicalTableMapCustomSqlOutput).ToDataSetPhysicalTableMapCustomSqlPtrOutputWithContext(ctx)
}

// DataSetPhysicalTableMapCustomSqlPtrInput is an input type that accepts DataSetPhysicalTableMapCustomSqlArgs, DataSetPhysicalTableMapCustomSqlPtr and DataSetPhysicalTableMapCustomSqlPtrOutput values.
// You can construct a concrete instance of `DataSetPhysicalTableMapCustomSqlPtrInput` via:
//
//	        DataSetPhysicalTableMapCustomSqlArgs{...}
//
//	or:
//
//	        nil
type DataSetPhysicalTableMapCustomSqlPtrInput interface {
	pulumi.Input

	ToDataSetPhysicalTableMapCustomSqlPtrOutput() DataSetPhysicalTableMapCustomSqlPtrOutput
	ToDataSetPhysicalTableMapCustomSqlPtrOutputWithContext(context.Context) DataSetPhysicalTableMapCustomSqlPtrOutput
}

type dataSetPhysicalTableMapCustomSqlPtrType DataSetPhysicalTableMapCustomSqlArgs

func DataSetPhysicalTableMapCustomSqlPtr(v *DataSetPhysicalTableMapCustomSqlArgs) DataSetPhysicalTableMapCustomSqlPtrInput {
	return (*dataSetPhysicalTableMapCustomSqlPtrType)(v)
}

func (*dataSetPhysicalTableMapCustomSqlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetPhysicalTableMapCustomSql)(nil)).Elem()
}

func (i *dataSetPhysicalTableMapCustomSqlPtrType) ToDataSetPhysicalTableMapCustomSqlPtrOutput() DataSetPhysicalTableMapCustomSqlPtrOutput {
	return i.ToDataSetPhysicalTableMapCustomSqlPtrOutputWithContext(context.Background())
}

func (i *dataSetPhysicalTableMapCustomSqlPtrType) ToDataSetPhysicalTableMapCustomSqlPtrOutputWithContext(ctx context.Context) DataSetPhysicalTableMapCustomSqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPhysicalTableMapCustomSqlPtrOutput)
}

type DataSetPhysicalTableMapCustomSqlOutput struct{ *pulumi.OutputState }

func (DataSetPhysicalTableMapCustomSqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPhysicalTableMapCustomSql)(nil)).Elem()
}

func (o DataSetPhysicalTableMapCustomSqlOutput) ToDataSetPhysicalTableMapCustomSqlOutput() DataSetPhysicalTableMapCustomSqlOutput {
	return o
}

func (o DataSetPhysicalTableMapCustomSqlOutput) ToDataSetPhysicalTableMapCustomSqlOutputWithContext(ctx context.Context) DataSetPhysicalTableMapCustomSqlOutput {
	return o
}

func (o DataSetPhysicalTableMapCustomSqlOutput) ToDataSetPhysicalTableMapCustomSqlPtrOutput() DataSetPhysicalTableMapCustomSqlPtrOutput {
	return o.ToDataSetPhysicalTableMapCustomSqlPtrOutputWithContext(context.Background())
}

func (o DataSetPhysicalTableMapCustomSqlOutput) ToDataSetPhysicalTableMapCustomSqlPtrOutputWithContext(ctx context.Context) DataSetPhysicalTableMapCustomSqlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetPhysicalTableMapCustomSql) *DataSetPhysicalTableMapCustomSql {
		return &v
	}).(DataSetPhysicalTableMapCustomSqlPtrOutput)
}

// Column schema from the SQL query result set. See columns.
func (o DataSetPhysicalTableMapCustomSqlOutput) Columns() DataSetPhysicalTableMapCustomSqlColumnArrayOutput {
	return o.ApplyT(func(v DataSetPhysicalTableMapCustomSql) []DataSetPhysicalTableMapCustomSqlColumn { return v.Columns }).(DataSetPhysicalTableMapCustomSqlColumnArrayOutput)
}

// ARN of the data source.
func (o DataSetPhysicalTableMapCustomSqlOutput) DataSourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetPhysicalTableMapCustomSql) string { return v.DataSourceArn }).(pulumi.StringOutput)
}

// Display name for the SQL query result.
func (o DataSetPhysicalTableMapCustomSqlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetPhysicalTableMapCustomSql) string { return v.Name }).(pulumi.StringOutput)
}

// SQL query.
func (o DataSetPhysicalTableMapCustomSqlOutput) SqlQuery() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetPhysicalTableMapCustomSql) string { return v.SqlQuery }).(pulumi.StringOutput)
}

type DataSetPhysicalTableMapCustomSqlPtrOutput struct{ *pulumi.OutputState }

func (DataSetPhysicalTableMapCustomSqlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetPhysicalTableMapCustomSql)(nil)).Elem()
}

func (o DataSetPhysicalTableMapCustomSqlPtrOutput) ToDataSetPhysicalTableMapCustomSqlPtrOutput() DataSetPhysicalTableMapCustomSqlPtrOutput {
	return o
}

func (o DataSetPhysicalTableMapCustomSqlPtrOutput) ToDataSetPhysicalTableMapCustomSqlPtrOutputWithContext(ctx context.Context) DataSetPhysicalTableMapCustomSqlPtrOutput {
	return o
}

func (o DataSetPhysicalTableMapCustomSqlPtrOutput) Elem() DataSetPhysicalTableMapCustomSqlOutput {
	return o.ApplyT(func(v *DataSetPhysicalTableMapCustomSql) DataSetPhysicalTableMapCustomSql {
		if v != nil {
			return *v
		}
		var ret DataSetPhysicalTableMapCustomSql
		return ret
	}).(DataSetPhysicalTableMapCustomSqlOutput)
}

// Column schema from the SQL query result set. See columns.
func (o DataSetPhysicalTableMapCustomSqlPtrOutput) Columns() DataSetPhysicalTableMapCustomSqlColumnArrayOutput {
	return o.ApplyT(func(v *DataSetPhysicalTableMapCustomSql) []DataSetPhysicalTableMapCustomSqlColumn {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(DataSetPhysicalTableMapCustomSqlColumnArrayOutput)
}

// ARN of the data source.
func (o DataSetPhysicalTableMapCustomSqlPtrOutput) DataSourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetPhysicalTableMapCustomSql) *string {
		if v == nil {
			return nil
		}
		return &v.DataSourceArn
	}).(pulumi.StringPtrOutput)
}

// Display name for the SQL query result.
func (o DataSetPhysicalTableMapCustomSqlPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetPhysicalTableMapCustomSql) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// SQL query.
func (o DataSetPhysicalTableMapCustomSqlPtrOutput) SqlQuery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetPhysicalTableMapCustomSql) *string {
		if v == nil {
			return nil
		}
		return &v.SqlQuery
	}).(pulumi.StringPtrOutput)
}

type DataSetPhysicalTableMapCustomSqlColumn struct {
	// Name of this column in the underlying data source.
	Name string `pulumi:"name"`
	// Data type of the column.
	Type string `pulumi:"type"`
}

// DataSetPhysicalTableMapCustomSqlColumnInput is an input type that accepts DataSetPhysicalTableMapCustomSqlColumnArgs and DataSetPhysicalTableMapCustomSqlColumnOutput values.
// You can construct a concrete instance of `DataSetPhysicalTableMapCustomSqlColumnInput` via:
//
//	DataSetPhysicalTableMapCustomSqlColumnArgs{...}
type DataSetPhysicalTableMapCustomSqlColumnInput interface {
	pulumi.Input

	ToDataSetPhysicalTableMapCustomSqlColumnOutput() DataSetPhysicalTableMapCustomSqlColumnOutput
	ToDataSetPhysicalTableMapCustomSqlColumnOutputWithContext(context.Context) DataSetPhysicalTableMapCustomSqlColumnOutput
}

type DataSetPhysicalTableMapCustomSqlColumnArgs struct {
	// Name of this column in the underlying data source.
	Name pulumi.StringInput `pulumi:"name"`
	// Data type of the column.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DataSetPhysicalTableMapCustomSqlColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPhysicalTableMapCustomSqlColumn)(nil)).Elem()
}

func (i DataSetPhysicalTableMapCustomSqlColumnArgs) ToDataSetPhysicalTableMapCustomSqlColumnOutput() DataSetPhysicalTableMapCustomSqlColumnOutput {
	return i.ToDataSetPhysicalTableMapCustomSqlColumnOutputWithContext(context.Background())
}

func (i DataSetPhysicalTableMapCustomSqlColumnArgs) ToDataSetPhysicalTableMapCustomSqlColumnOutputWithContext(ctx context.Context) DataSetPhysicalTableMapCustomSqlColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPhysicalTableMapCustomSqlColumnOutput)
}

// DataSetPhysicalTableMapCustomSqlColumnArrayInput is an input type that accepts DataSetPhysicalTableMapCustomSqlColumnArray and DataSetPhysicalTableMapCustomSqlColumnArrayOutput values.
// You can construct a concrete instance of `DataSetPhysicalTableMapCustomSqlColumnArrayInput` via:
//
//	DataSetPhysicalTableMapCustomSqlColumnArray{ DataSetPhysicalTableMapCustomSqlColumnArgs{...} }
type DataSetPhysicalTableMapCustomSqlColumnArrayInput interface {
	pulumi.Input

	ToDataSetPhysicalTableMapCustomSqlColumnArrayOutput() DataSetPhysicalTableMapCustomSqlColumnArrayOutput
	ToDataSetPhysicalTableMapCustomSqlColumnArrayOutputWithContext(context.Context) DataSetPhysicalTableMapCustomSqlColumnArrayOutput
}

type DataSetPhysicalTableMapCustomSqlColumnArray []DataSetPhysicalTableMapCustomSqlColumnInput

func (DataSetPhysicalTableMapCustomSqlColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetPhysicalTableMapCustomSqlColumn)(nil)).Elem()
}

func (i DataSetPhysicalTableMapCustomSqlColumnArray) ToDataSetPhysicalTableMapCustomSqlColumnArrayOutput() DataSetPhysicalTableMapCustomSqlColumnArrayOutput {
	return i.ToDataSetPhysicalTableMapCustomSqlColumnArrayOutputWithContext(context.Background())
}

func (i DataSetPhysicalTableMapCustomSqlColumnArray) ToDataSetPhysicalTableMapCustomSqlColumnArrayOutputWithContext(ctx context.Context) DataSetPhysicalTableMapCustomSqlColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPhysicalTableMapCustomSqlColumnArrayOutput)
}

type DataSetPhysicalTableMapCustomSqlColumnOutput struct{ *pulumi.OutputState }

func (DataSetPhysicalTableMapCustomSqlColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPhysicalTableMapCustomSqlColumn)(nil)).Elem()
}

func (o DataSetPhysicalTableMapCustomSqlColumnOutput) ToDataSetPhysicalTableMapCustomSqlColumnOutput() DataSetPhysicalTableMapCustomSqlColumnOutput {
	return o
}

func (o DataSetPhysicalTableMapCustomSqlColumnOutput) ToDataSetPhysicalTableMapCustomSqlColumnOutputWithContext(ctx context.Context) DataSetPhysicalTableMapCustomSqlColumnOutput {
	return o
}

// Name of this column in the underlying data source.
func (o DataSetPhysicalTableMapCustomSqlColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetPhysicalTableMapCustomSqlColumn) string { return v.Name }).(pulumi.StringOutput)
}

// Data type of the column.
func (o DataSetPhysicalTableMapCustomSqlColumnOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetPhysicalTableMapCustomSqlColumn) string { return v.Type }).(pulumi.StringOutput)
}

type DataSetPhysicalTableMapCustomSqlColumnArrayOutput struct{ *pulumi.OutputState }

func (DataSetPhysicalTableMapCustomSqlColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetPhysicalTableMapCustomSqlColumn)(nil)).Elem()
}

func (o DataSetPhysicalTableMapCustomSqlColumnArrayOutput) ToDataSetPhysicalTableMapCustomSqlColumnArrayOutput() DataSetPhysicalTableMapCustomSqlColumnArrayOutput {
	return o
}

func (o DataSetPhysicalTableMapCustomSqlColumnArrayOutput) ToDataSetPhysicalTableMapCustomSqlColumnArrayOutputWithContext(ctx context.Context) DataSetPhysicalTableMapCustomSqlColumnArrayOutput {
	return o
}

func (o DataSetPhysicalTableMapCustomSqlColumnArrayOutput) Index(i pulumi.IntInput) DataSetPhysicalTableMapCustomSqlColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSetPhysicalTableMapCustomSqlColumn {
		return vs[0].([]DataSetPhysicalTableMapCustomSqlColumn)[vs[1].(int)]
	}).(DataSetPhysicalTableMapCustomSqlColumnOutput)
}

type DataSetPhysicalTableMapRelationalTable struct {
	// Catalog associated with the table.
	Catalog *string `pulumi:"catalog"`
	// ARN of the data source.
	DataSourceArn string `pulumi:"dataSourceArn"`
	// Column schema of the table. See input_columns.
	InputColumns []DataSetPhysicalTableMapRelationalTableInputColumn `pulumi:"inputColumns"`
	// Name of the relational table.
	Name string `pulumi:"name"`
	// Schema name. This name applies to certain relational database engines.
	Schema *string `pulumi:"schema"`
}

// DataSetPhysicalTableMapRelationalTableInput is an input type that accepts DataSetPhysicalTableMapRelationalTableArgs and DataSetPhysicalTableMapRelationalTableOutput values.
// You can construct a concrete instance of `DataSetPhysicalTableMapRelationalTableInput` via:
//
//	DataSetPhysicalTableMapRelationalTableArgs{...}
type DataSetPhysicalTableMapRelationalTableInput interface {
	pulumi.Input

	ToDataSetPhysicalTableMapRelationalTableOutput() DataSetPhysicalTableMapRelationalTableOutput
	ToDataSetPhysicalTableMapRelationalTableOutputWithContext(context.Context) DataSetPhysicalTableMapRelationalTableOutput
}

type DataSetPhysicalTableMapRelationalTableArgs struct {
	// Catalog associated with the table.
	Catalog pulumi.StringPtrInput `pulumi:"catalog"`
	// ARN of the data source.
	DataSourceArn pulumi.StringInput `pulumi:"dataSourceArn"`
	// Column schema of the table. See input_columns.
	InputColumns DataSetPhysicalTableMapRelationalTableInputColumnArrayInput `pulumi:"inputColumns"`
	// Name of the relational table.
	Name pulumi.StringInput `pulumi:"name"`
	// Schema name. This name applies to certain relational database engines.
	Schema pulumi.StringPtrInput `pulumi:"schema"`
}

func (DataSetPhysicalTableMapRelationalTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPhysicalTableMapRelationalTable)(nil)).Elem()
}

func (i DataSetPhysicalTableMapRelationalTableArgs) ToDataSetPhysicalTableMapRelationalTableOutput() DataSetPhysicalTableMapRelationalTableOutput {
	return i.ToDataSetPhysicalTableMapRelationalTableOutputWithContext(context.Background())
}

func (i DataSetPhysicalTableMapRelationalTableArgs) ToDataSetPhysicalTableMapRelationalTableOutputWithContext(ctx context.Context) DataSetPhysicalTableMapRelationalTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPhysicalTableMapRelationalTableOutput)
}

func (i DataSetPhysicalTableMapRelationalTableArgs) ToDataSetPhysicalTableMapRelationalTablePtrOutput() DataSetPhysicalTableMapRelationalTablePtrOutput {
	return i.ToDataSetPhysicalTableMapRelationalTablePtrOutputWithContext(context.Background())
}

func (i DataSetPhysicalTableMapRelationalTableArgs) ToDataSetPhysicalTableMapRelationalTablePtrOutputWithContext(ctx context.Context) DataSetPhysicalTableMapRelationalTablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPhysicalTableMapRelationalTableOutput).ToDataSetPhysicalTableMapRelationalTablePtrOutputWithContext(ctx)
}

// DataSetPhysicalTableMapRelationalTablePtrInput is an input type that accepts DataSetPhysicalTableMapRelationalTableArgs, DataSetPhysicalTableMapRelationalTablePtr and DataSetPhysicalTableMapRelationalTablePtrOutput values.
// You can construct a concrete instance of `DataSetPhysicalTableMapRelationalTablePtrInput` via:
//
//	        DataSetPhysicalTableMapRelationalTableArgs{...}
//
//	or:
//
//	        nil
type DataSetPhysicalTableMapRelationalTablePtrInput interface {
	pulumi.Input

	ToDataSetPhysicalTableMapRelationalTablePtrOutput() DataSetPhysicalTableMapRelationalTablePtrOutput
	ToDataSetPhysicalTableMapRelationalTablePtrOutputWithContext(context.Context) DataSetPhysicalTableMapRelationalTablePtrOutput
}

type dataSetPhysicalTableMapRelationalTablePtrType DataSetPhysicalTableMapRelationalTableArgs

func DataSetPhysicalTableMapRelationalTablePtr(v *DataSetPhysicalTableMapRelationalTableArgs) DataSetPhysicalTableMapRelationalTablePtrInput {
	return (*dataSetPhysicalTableMapRelationalTablePtrType)(v)
}

func (*dataSetPhysicalTableMapRelationalTablePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetPhysicalTableMapRelationalTable)(nil)).Elem()
}

func (i *dataSetPhysicalTableMapRelationalTablePtrType) ToDataSetPhysicalTableMapRelationalTablePtrOutput() DataSetPhysicalTableMapRelationalTablePtrOutput {
	return i.ToDataSetPhysicalTableMapRelationalTablePtrOutputWithContext(context.Background())
}

func (i *dataSetPhysicalTableMapRelationalTablePtrType) ToDataSetPhysicalTableMapRelationalTablePtrOutputWithContext(ctx context.Context) DataSetPhysicalTableMapRelationalTablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPhysicalTableMapRelationalTablePtrOutput)
}

type DataSetPhysicalTableMapRelationalTableOutput struct{ *pulumi.OutputState }

func (DataSetPhysicalTableMapRelationalTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPhysicalTableMapRelationalTable)(nil)).Elem()
}

func (o DataSetPhysicalTableMapRelationalTableOutput) ToDataSetPhysicalTableMapRelationalTableOutput() DataSetPhysicalTableMapRelationalTableOutput {
	return o
}

func (o DataSetPhysicalTableMapRelationalTableOutput) ToDataSetPhysicalTableMapRelationalTableOutputWithContext(ctx context.Context) DataSetPhysicalTableMapRelationalTableOutput {
	return o
}

func (o DataSetPhysicalTableMapRelationalTableOutput) ToDataSetPhysicalTableMapRelationalTablePtrOutput() DataSetPhysicalTableMapRelationalTablePtrOutput {
	return o.ToDataSetPhysicalTableMapRelationalTablePtrOutputWithContext(context.Background())
}

func (o DataSetPhysicalTableMapRelationalTableOutput) ToDataSetPhysicalTableMapRelationalTablePtrOutputWithContext(ctx context.Context) DataSetPhysicalTableMapRelationalTablePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetPhysicalTableMapRelationalTable) *DataSetPhysicalTableMapRelationalTable {
		return &v
	}).(DataSetPhysicalTableMapRelationalTablePtrOutput)
}

// Catalog associated with the table.
func (o DataSetPhysicalTableMapRelationalTableOutput) Catalog() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSetPhysicalTableMapRelationalTable) *string { return v.Catalog }).(pulumi.StringPtrOutput)
}

// ARN of the data source.
func (o DataSetPhysicalTableMapRelationalTableOutput) DataSourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetPhysicalTableMapRelationalTable) string { return v.DataSourceArn }).(pulumi.StringOutput)
}

// Column schema of the table. See input_columns.
func (o DataSetPhysicalTableMapRelationalTableOutput) InputColumns() DataSetPhysicalTableMapRelationalTableInputColumnArrayOutput {
	return o.ApplyT(func(v DataSetPhysicalTableMapRelationalTable) []DataSetPhysicalTableMapRelationalTableInputColumn {
		return v.InputColumns
	}).(DataSetPhysicalTableMapRelationalTableInputColumnArrayOutput)
}

// Name of the relational table.
func (o DataSetPhysicalTableMapRelationalTableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetPhysicalTableMapRelationalTable) string { return v.Name }).(pulumi.StringOutput)
}

// Schema name. This name applies to certain relational database engines.
func (o DataSetPhysicalTableMapRelationalTableOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSetPhysicalTableMapRelationalTable) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

type DataSetPhysicalTableMapRelationalTablePtrOutput struct{ *pulumi.OutputState }

func (DataSetPhysicalTableMapRelationalTablePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetPhysicalTableMapRelationalTable)(nil)).Elem()
}

func (o DataSetPhysicalTableMapRelationalTablePtrOutput) ToDataSetPhysicalTableMapRelationalTablePtrOutput() DataSetPhysicalTableMapRelationalTablePtrOutput {
	return o
}

func (o DataSetPhysicalTableMapRelationalTablePtrOutput) ToDataSetPhysicalTableMapRelationalTablePtrOutputWithContext(ctx context.Context) DataSetPhysicalTableMapRelationalTablePtrOutput {
	return o
}

func (o DataSetPhysicalTableMapRelationalTablePtrOutput) Elem() DataSetPhysicalTableMapRelationalTableOutput {
	return o.ApplyT(func(v *DataSetPhysicalTableMapRelationalTable) DataSetPhysicalTableMapRelationalTable {
		if v != nil {
			return *v
		}
		var ret DataSetPhysicalTableMapRelationalTable
		return ret
	}).(DataSetPhysicalTableMapRelationalTableOutput)
}

// Catalog associated with the table.
func (o DataSetPhysicalTableMapRelationalTablePtrOutput) Catalog() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetPhysicalTableMapRelationalTable) *string {
		if v == nil {
			return nil
		}
		return v.Catalog
	}).(pulumi.StringPtrOutput)
}

// ARN of the data source.
func (o DataSetPhysicalTableMapRelationalTablePtrOutput) DataSourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetPhysicalTableMapRelationalTable) *string {
		if v == nil {
			return nil
		}
		return &v.DataSourceArn
	}).(pulumi.StringPtrOutput)
}

// Column schema of the table. See input_columns.
func (o DataSetPhysicalTableMapRelationalTablePtrOutput) InputColumns() DataSetPhysicalTableMapRelationalTableInputColumnArrayOutput {
	return o.ApplyT(func(v *DataSetPhysicalTableMapRelationalTable) []DataSetPhysicalTableMapRelationalTableInputColumn {
		if v == nil {
			return nil
		}
		return v.InputColumns
	}).(DataSetPhysicalTableMapRelationalTableInputColumnArrayOutput)
}

// Name of the relational table.
func (o DataSetPhysicalTableMapRelationalTablePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetPhysicalTableMapRelationalTable) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Schema name. This name applies to certain relational database engines.
func (o DataSetPhysicalTableMapRelationalTablePtrOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetPhysicalTableMapRelationalTable) *string {
		if v == nil {
			return nil
		}
		return v.Schema
	}).(pulumi.StringPtrOutput)
}

type DataSetPhysicalTableMapRelationalTableInputColumn struct {
	// Name of this column in the underlying data source.
	Name string `pulumi:"name"`
	// Data type of the column.
	Type string `pulumi:"type"`
}

// DataSetPhysicalTableMapRelationalTableInputColumnInput is an input type that accepts DataSetPhysicalTableMapRelationalTableInputColumnArgs and DataSetPhysicalTableMapRelationalTableInputColumnOutput values.
// You can construct a concrete instance of `DataSetPhysicalTableMapRelationalTableInputColumnInput` via:
//
//	DataSetPhysicalTableMapRelationalTableInputColumnArgs{...}
type DataSetPhysicalTableMapRelationalTableInputColumnInput interface {
	pulumi.Input

	ToDataSetPhysicalTableMapRelationalTableInputColumnOutput() DataSetPhysicalTableMapRelationalTableInputColumnOutput
	ToDataSetPhysicalTableMapRelationalTableInputColumnOutputWithContext(context.Context) DataSetPhysicalTableMapRelationalTableInputColumnOutput
}

type DataSetPhysicalTableMapRelationalTableInputColumnArgs struct {
	// Name of this column in the underlying data source.
	Name pulumi.StringInput `pulumi:"name"`
	// Data type of the column.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DataSetPhysicalTableMapRelationalTableInputColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPhysicalTableMapRelationalTableInputColumn)(nil)).Elem()
}

func (i DataSetPhysicalTableMapRelationalTableInputColumnArgs) ToDataSetPhysicalTableMapRelationalTableInputColumnOutput() DataSetPhysicalTableMapRelationalTableInputColumnOutput {
	return i.ToDataSetPhysicalTableMapRelationalTableInputColumnOutputWithContext(context.Background())
}

func (i DataSetPhysicalTableMapRelationalTableInputColumnArgs) ToDataSetPhysicalTableMapRelationalTableInputColumnOutputWithContext(ctx context.Context) DataSetPhysicalTableMapRelationalTableInputColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPhysicalTableMapRelationalTableInputColumnOutput)
}

// DataSetPhysicalTableMapRelationalTableInputColumnArrayInput is an input type that accepts DataSetPhysicalTableMapRelationalTableInputColumnArray and DataSetPhysicalTableMapRelationalTableInputColumnArrayOutput values.
// You can construct a concrete instance of `DataSetPhysicalTableMapRelationalTableInputColumnArrayInput` via:
//
//	DataSetPhysicalTableMapRelationalTableInputColumnArray{ DataSetPhysicalTableMapRelationalTableInputColumnArgs{...} }
type DataSetPhysicalTableMapRelationalTableInputColumnArrayInput interface {
	pulumi.Input

	ToDataSetPhysicalTableMapRelationalTableInputColumnArrayOutput() DataSetPhysicalTableMapRelationalTableInputColumnArrayOutput
	ToDataSetPhysicalTableMapRelationalTableInputColumnArrayOutputWithContext(context.Context) DataSetPhysicalTableMapRelationalTableInputColumnArrayOutput
}

type DataSetPhysicalTableMapRelationalTableInputColumnArray []DataSetPhysicalTableMapRelationalTableInputColumnInput

func (DataSetPhysicalTableMapRelationalTableInputColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetPhysicalTableMapRelationalTableInputColumn)(nil)).Elem()
}

func (i DataSetPhysicalTableMapRelationalTableInputColumnArray) ToDataSetPhysicalTableMapRelationalTableInputColumnArrayOutput() DataSetPhysicalTableMapRelationalTableInputColumnArrayOutput {
	return i.ToDataSetPhysicalTableMapRelationalTableInputColumnArrayOutputWithContext(context.Background())
}

func (i DataSetPhysicalTableMapRelationalTableInputColumnArray) ToDataSetPhysicalTableMapRelationalTableInputColumnArrayOutputWithContext(ctx context.Context) DataSetPhysicalTableMapRelationalTableInputColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPhysicalTableMapRelationalTableInputColumnArrayOutput)
}

type DataSetPhysicalTableMapRelationalTableInputColumnOutput struct{ *pulumi.OutputState }

func (DataSetPhysicalTableMapRelationalTableInputColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPhysicalTableMapRelationalTableInputColumn)(nil)).Elem()
}

func (o DataSetPhysicalTableMapRelationalTableInputColumnOutput) ToDataSetPhysicalTableMapRelationalTableInputColumnOutput() DataSetPhysicalTableMapRelationalTableInputColumnOutput {
	return o
}

func (o DataSetPhysicalTableMapRelationalTableInputColumnOutput) ToDataSetPhysicalTableMapRelationalTableInputColumnOutputWithContext(ctx context.Context) DataSetPhysicalTableMapRelationalTableInputColumnOutput {
	return o
}

// Name of this column in the underlying data source.
func (o DataSetPhysicalTableMapRelationalTableInputColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetPhysicalTableMapRelationalTableInputColumn) string { return v.Name }).(pulumi.StringOutput)
}

// Data type of the column.
func (o DataSetPhysicalTableMapRelationalTableInputColumnOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetPhysicalTableMapRelationalTableInputColumn) string { return v.Type }).(pulumi.StringOutput)
}

type DataSetPhysicalTableMapRelationalTableInputColumnArrayOutput struct{ *pulumi.OutputState }

func (DataSetPhysicalTableMapRelationalTableInputColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetPhysicalTableMapRelationalTableInputColumn)(nil)).Elem()
}

func (o DataSetPhysicalTableMapRelationalTableInputColumnArrayOutput) ToDataSetPhysicalTableMapRelationalTableInputColumnArrayOutput() DataSetPhysicalTableMapRelationalTableInputColumnArrayOutput {
	return o
}

func (o DataSetPhysicalTableMapRelationalTableInputColumnArrayOutput) ToDataSetPhysicalTableMapRelationalTableInputColumnArrayOutputWithContext(ctx context.Context) DataSetPhysicalTableMapRelationalTableInputColumnArrayOutput {
	return o
}

func (o DataSetPhysicalTableMapRelationalTableInputColumnArrayOutput) Index(i pulumi.IntInput) DataSetPhysicalTableMapRelationalTableInputColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSetPhysicalTableMapRelationalTableInputColumn {
		return vs[0].([]DataSetPhysicalTableMapRelationalTableInputColumn)[vs[1].(int)]
	}).(DataSetPhysicalTableMapRelationalTableInputColumnOutput)
}

type DataSetPhysicalTableMapS3Source struct {
	// ARN of the data source.
	DataSourceArn string `pulumi:"dataSourceArn"`
	// Column schema of the table. See input_columns.
	InputColumns []DataSetPhysicalTableMapS3SourceInputColumn `pulumi:"inputColumns"`
	// Information about the format for the S3 source file or files. See upload_settings.
	UploadSettings DataSetPhysicalTableMapS3SourceUploadSettings `pulumi:"uploadSettings"`
}

// DataSetPhysicalTableMapS3SourceInput is an input type that accepts DataSetPhysicalTableMapS3SourceArgs and DataSetPhysicalTableMapS3SourceOutput values.
// You can construct a concrete instance of `DataSetPhysicalTableMapS3SourceInput` via:
//
//	DataSetPhysicalTableMapS3SourceArgs{...}
type DataSetPhysicalTableMapS3SourceInput interface {
	pulumi.Input

	ToDataSetPhysicalTableMapS3SourceOutput() DataSetPhysicalTableMapS3SourceOutput
	ToDataSetPhysicalTableMapS3SourceOutputWithContext(context.Context) DataSetPhysicalTableMapS3SourceOutput
}

type DataSetPhysicalTableMapS3SourceArgs struct {
	// ARN of the data source.
	DataSourceArn pulumi.StringInput `pulumi:"dataSourceArn"`
	// Column schema of the table. See input_columns.
	InputColumns DataSetPhysicalTableMapS3SourceInputColumnArrayInput `pulumi:"inputColumns"`
	// Information about the format for the S3 source file or files. See upload_settings.
	UploadSettings DataSetPhysicalTableMapS3SourceUploadSettingsInput `pulumi:"uploadSettings"`
}

func (DataSetPhysicalTableMapS3SourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPhysicalTableMapS3Source)(nil)).Elem()
}

func (i DataSetPhysicalTableMapS3SourceArgs) ToDataSetPhysicalTableMapS3SourceOutput() DataSetPhysicalTableMapS3SourceOutput {
	return i.ToDataSetPhysicalTableMapS3SourceOutputWithContext(context.Background())
}

func (i DataSetPhysicalTableMapS3SourceArgs) ToDataSetPhysicalTableMapS3SourceOutputWithContext(ctx context.Context) DataSetPhysicalTableMapS3SourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPhysicalTableMapS3SourceOutput)
}

func (i DataSetPhysicalTableMapS3SourceArgs) ToDataSetPhysicalTableMapS3SourcePtrOutput() DataSetPhysicalTableMapS3SourcePtrOutput {
	return i.ToDataSetPhysicalTableMapS3SourcePtrOutputWithContext(context.Background())
}

func (i DataSetPhysicalTableMapS3SourceArgs) ToDataSetPhysicalTableMapS3SourcePtrOutputWithContext(ctx context.Context) DataSetPhysicalTableMapS3SourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPhysicalTableMapS3SourceOutput).ToDataSetPhysicalTableMapS3SourcePtrOutputWithContext(ctx)
}

// DataSetPhysicalTableMapS3SourcePtrInput is an input type that accepts DataSetPhysicalTableMapS3SourceArgs, DataSetPhysicalTableMapS3SourcePtr and DataSetPhysicalTableMapS3SourcePtrOutput values.
// You can construct a concrete instance of `DataSetPhysicalTableMapS3SourcePtrInput` via:
//
//	        DataSetPhysicalTableMapS3SourceArgs{...}
//
//	or:
//
//	        nil
type DataSetPhysicalTableMapS3SourcePtrInput interface {
	pulumi.Input

	ToDataSetPhysicalTableMapS3SourcePtrOutput() DataSetPhysicalTableMapS3SourcePtrOutput
	ToDataSetPhysicalTableMapS3SourcePtrOutputWithContext(context.Context) DataSetPhysicalTableMapS3SourcePtrOutput
}

type dataSetPhysicalTableMapS3SourcePtrType DataSetPhysicalTableMapS3SourceArgs

func DataSetPhysicalTableMapS3SourcePtr(v *DataSetPhysicalTableMapS3SourceArgs) DataSetPhysicalTableMapS3SourcePtrInput {
	return (*dataSetPhysicalTableMapS3SourcePtrType)(v)
}

func (*dataSetPhysicalTableMapS3SourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetPhysicalTableMapS3Source)(nil)).Elem()
}

func (i *dataSetPhysicalTableMapS3SourcePtrType) ToDataSetPhysicalTableMapS3SourcePtrOutput() DataSetPhysicalTableMapS3SourcePtrOutput {
	return i.ToDataSetPhysicalTableMapS3SourcePtrOutputWithContext(context.Background())
}

func (i *dataSetPhysicalTableMapS3SourcePtrType) ToDataSetPhysicalTableMapS3SourcePtrOutputWithContext(ctx context.Context) DataSetPhysicalTableMapS3SourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPhysicalTableMapS3SourcePtrOutput)
}

type DataSetPhysicalTableMapS3SourceOutput struct{ *pulumi.OutputState }

func (DataSetPhysicalTableMapS3SourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPhysicalTableMapS3Source)(nil)).Elem()
}

func (o DataSetPhysicalTableMapS3SourceOutput) ToDataSetPhysicalTableMapS3SourceOutput() DataSetPhysicalTableMapS3SourceOutput {
	return o
}

func (o DataSetPhysicalTableMapS3SourceOutput) ToDataSetPhysicalTableMapS3SourceOutputWithContext(ctx context.Context) DataSetPhysicalTableMapS3SourceOutput {
	return o
}

func (o DataSetPhysicalTableMapS3SourceOutput) ToDataSetPhysicalTableMapS3SourcePtrOutput() DataSetPhysicalTableMapS3SourcePtrOutput {
	return o.ToDataSetPhysicalTableMapS3SourcePtrOutputWithContext(context.Background())
}

func (o DataSetPhysicalTableMapS3SourceOutput) ToDataSetPhysicalTableMapS3SourcePtrOutputWithContext(ctx context.Context) DataSetPhysicalTableMapS3SourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetPhysicalTableMapS3Source) *DataSetPhysicalTableMapS3Source {
		return &v
	}).(DataSetPhysicalTableMapS3SourcePtrOutput)
}

// ARN of the data source.
func (o DataSetPhysicalTableMapS3SourceOutput) DataSourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetPhysicalTableMapS3Source) string { return v.DataSourceArn }).(pulumi.StringOutput)
}

// Column schema of the table. See input_columns.
func (o DataSetPhysicalTableMapS3SourceOutput) InputColumns() DataSetPhysicalTableMapS3SourceInputColumnArrayOutput {
	return o.ApplyT(func(v DataSetPhysicalTableMapS3Source) []DataSetPhysicalTableMapS3SourceInputColumn {
		return v.InputColumns
	}).(DataSetPhysicalTableMapS3SourceInputColumnArrayOutput)
}

// Information about the format for the S3 source file or files. See upload_settings.
func (o DataSetPhysicalTableMapS3SourceOutput) UploadSettings() DataSetPhysicalTableMapS3SourceUploadSettingsOutput {
	return o.ApplyT(func(v DataSetPhysicalTableMapS3Source) DataSetPhysicalTableMapS3SourceUploadSettings {
		return v.UploadSettings
	}).(DataSetPhysicalTableMapS3SourceUploadSettingsOutput)
}

type DataSetPhysicalTableMapS3SourcePtrOutput struct{ *pulumi.OutputState }

func (DataSetPhysicalTableMapS3SourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetPhysicalTableMapS3Source)(nil)).Elem()
}

func (o DataSetPhysicalTableMapS3SourcePtrOutput) ToDataSetPhysicalTableMapS3SourcePtrOutput() DataSetPhysicalTableMapS3SourcePtrOutput {
	return o
}

func (o DataSetPhysicalTableMapS3SourcePtrOutput) ToDataSetPhysicalTableMapS3SourcePtrOutputWithContext(ctx context.Context) DataSetPhysicalTableMapS3SourcePtrOutput {
	return o
}

func (o DataSetPhysicalTableMapS3SourcePtrOutput) Elem() DataSetPhysicalTableMapS3SourceOutput {
	return o.ApplyT(func(v *DataSetPhysicalTableMapS3Source) DataSetPhysicalTableMapS3Source {
		if v != nil {
			return *v
		}
		var ret DataSetPhysicalTableMapS3Source
		return ret
	}).(DataSetPhysicalTableMapS3SourceOutput)
}

// ARN of the data source.
func (o DataSetPhysicalTableMapS3SourcePtrOutput) DataSourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetPhysicalTableMapS3Source) *string {
		if v == nil {
			return nil
		}
		return &v.DataSourceArn
	}).(pulumi.StringPtrOutput)
}

// Column schema of the table. See input_columns.
func (o DataSetPhysicalTableMapS3SourcePtrOutput) InputColumns() DataSetPhysicalTableMapS3SourceInputColumnArrayOutput {
	return o.ApplyT(func(v *DataSetPhysicalTableMapS3Source) []DataSetPhysicalTableMapS3SourceInputColumn {
		if v == nil {
			return nil
		}
		return v.InputColumns
	}).(DataSetPhysicalTableMapS3SourceInputColumnArrayOutput)
}

// Information about the format for the S3 source file or files. See upload_settings.
func (o DataSetPhysicalTableMapS3SourcePtrOutput) UploadSettings() DataSetPhysicalTableMapS3SourceUploadSettingsPtrOutput {
	return o.ApplyT(func(v *DataSetPhysicalTableMapS3Source) *DataSetPhysicalTableMapS3SourceUploadSettings {
		if v == nil {
			return nil
		}
		return &v.UploadSettings
	}).(DataSetPhysicalTableMapS3SourceUploadSettingsPtrOutput)
}

type DataSetPhysicalTableMapS3SourceInputColumn struct {
	// Name of this column in the underlying data source.
	Name string `pulumi:"name"`
	// Data type of the column.
	Type string `pulumi:"type"`
}

// DataSetPhysicalTableMapS3SourceInputColumnInput is an input type that accepts DataSetPhysicalTableMapS3SourceInputColumnArgs and DataSetPhysicalTableMapS3SourceInputColumnOutput values.
// You can construct a concrete instance of `DataSetPhysicalTableMapS3SourceInputColumnInput` via:
//
//	DataSetPhysicalTableMapS3SourceInputColumnArgs{...}
type DataSetPhysicalTableMapS3SourceInputColumnInput interface {
	pulumi.Input

	ToDataSetPhysicalTableMapS3SourceInputColumnOutput() DataSetPhysicalTableMapS3SourceInputColumnOutput
	ToDataSetPhysicalTableMapS3SourceInputColumnOutputWithContext(context.Context) DataSetPhysicalTableMapS3SourceInputColumnOutput
}

type DataSetPhysicalTableMapS3SourceInputColumnArgs struct {
	// Name of this column in the underlying data source.
	Name pulumi.StringInput `pulumi:"name"`
	// Data type of the column.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DataSetPhysicalTableMapS3SourceInputColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPhysicalTableMapS3SourceInputColumn)(nil)).Elem()
}

func (i DataSetPhysicalTableMapS3SourceInputColumnArgs) ToDataSetPhysicalTableMapS3SourceInputColumnOutput() DataSetPhysicalTableMapS3SourceInputColumnOutput {
	return i.ToDataSetPhysicalTableMapS3SourceInputColumnOutputWithContext(context.Background())
}

func (i DataSetPhysicalTableMapS3SourceInputColumnArgs) ToDataSetPhysicalTableMapS3SourceInputColumnOutputWithContext(ctx context.Context) DataSetPhysicalTableMapS3SourceInputColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPhysicalTableMapS3SourceInputColumnOutput)
}

// DataSetPhysicalTableMapS3SourceInputColumnArrayInput is an input type that accepts DataSetPhysicalTableMapS3SourceInputColumnArray and DataSetPhysicalTableMapS3SourceInputColumnArrayOutput values.
// You can construct a concrete instance of `DataSetPhysicalTableMapS3SourceInputColumnArrayInput` via:
//
//	DataSetPhysicalTableMapS3SourceInputColumnArray{ DataSetPhysicalTableMapS3SourceInputColumnArgs{...} }
type DataSetPhysicalTableMapS3SourceInputColumnArrayInput interface {
	pulumi.Input

	ToDataSetPhysicalTableMapS3SourceInputColumnArrayOutput() DataSetPhysicalTableMapS3SourceInputColumnArrayOutput
	ToDataSetPhysicalTableMapS3SourceInputColumnArrayOutputWithContext(context.Context) DataSetPhysicalTableMapS3SourceInputColumnArrayOutput
}

type DataSetPhysicalTableMapS3SourceInputColumnArray []DataSetPhysicalTableMapS3SourceInputColumnInput

func (DataSetPhysicalTableMapS3SourceInputColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetPhysicalTableMapS3SourceInputColumn)(nil)).Elem()
}

func (i DataSetPhysicalTableMapS3SourceInputColumnArray) ToDataSetPhysicalTableMapS3SourceInputColumnArrayOutput() DataSetPhysicalTableMapS3SourceInputColumnArrayOutput {
	return i.ToDataSetPhysicalTableMapS3SourceInputColumnArrayOutputWithContext(context.Background())
}

func (i DataSetPhysicalTableMapS3SourceInputColumnArray) ToDataSetPhysicalTableMapS3SourceInputColumnArrayOutputWithContext(ctx context.Context) DataSetPhysicalTableMapS3SourceInputColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPhysicalTableMapS3SourceInputColumnArrayOutput)
}

type DataSetPhysicalTableMapS3SourceInputColumnOutput struct{ *pulumi.OutputState }

func (DataSetPhysicalTableMapS3SourceInputColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPhysicalTableMapS3SourceInputColumn)(nil)).Elem()
}

func (o DataSetPhysicalTableMapS3SourceInputColumnOutput) ToDataSetPhysicalTableMapS3SourceInputColumnOutput() DataSetPhysicalTableMapS3SourceInputColumnOutput {
	return o
}

func (o DataSetPhysicalTableMapS3SourceInputColumnOutput) ToDataSetPhysicalTableMapS3SourceInputColumnOutputWithContext(ctx context.Context) DataSetPhysicalTableMapS3SourceInputColumnOutput {
	return o
}

// Name of this column in the underlying data source.
func (o DataSetPhysicalTableMapS3SourceInputColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetPhysicalTableMapS3SourceInputColumn) string { return v.Name }).(pulumi.StringOutput)
}

// Data type of the column.
func (o DataSetPhysicalTableMapS3SourceInputColumnOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetPhysicalTableMapS3SourceInputColumn) string { return v.Type }).(pulumi.StringOutput)
}

type DataSetPhysicalTableMapS3SourceInputColumnArrayOutput struct{ *pulumi.OutputState }

func (DataSetPhysicalTableMapS3SourceInputColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetPhysicalTableMapS3SourceInputColumn)(nil)).Elem()
}

func (o DataSetPhysicalTableMapS3SourceInputColumnArrayOutput) ToDataSetPhysicalTableMapS3SourceInputColumnArrayOutput() DataSetPhysicalTableMapS3SourceInputColumnArrayOutput {
	return o
}

func (o DataSetPhysicalTableMapS3SourceInputColumnArrayOutput) ToDataSetPhysicalTableMapS3SourceInputColumnArrayOutputWithContext(ctx context.Context) DataSetPhysicalTableMapS3SourceInputColumnArrayOutput {
	return o
}

func (o DataSetPhysicalTableMapS3SourceInputColumnArrayOutput) Index(i pulumi.IntInput) DataSetPhysicalTableMapS3SourceInputColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSetPhysicalTableMapS3SourceInputColumn {
		return vs[0].([]DataSetPhysicalTableMapS3SourceInputColumn)[vs[1].(int)]
	}).(DataSetPhysicalTableMapS3SourceInputColumnOutput)
}

type DataSetPhysicalTableMapS3SourceUploadSettings struct {
	// Whether the file has a header row, or the files each have a header row.
	ContainsHeader *bool `pulumi:"containsHeader"`
	// Delimiter between values in the file.
	Delimiter *string `pulumi:"delimiter"`
	// File format. Valid values are `CSV`, `TSV`, `CLF`, `ELF`, `XLSX`, and `JSON`.
	Format *string `pulumi:"format"`
	// A row number to start reading data from.
	StartFromRow *int `pulumi:"startFromRow"`
	// Text qualifier. Valid values are `DOUBLE_QUOTE` and `SINGLE_QUOTE`.
	TextQualifier *string `pulumi:"textQualifier"`
}

// DataSetPhysicalTableMapS3SourceUploadSettingsInput is an input type that accepts DataSetPhysicalTableMapS3SourceUploadSettingsArgs and DataSetPhysicalTableMapS3SourceUploadSettingsOutput values.
// You can construct a concrete instance of `DataSetPhysicalTableMapS3SourceUploadSettingsInput` via:
//
//	DataSetPhysicalTableMapS3SourceUploadSettingsArgs{...}
type DataSetPhysicalTableMapS3SourceUploadSettingsInput interface {
	pulumi.Input

	ToDataSetPhysicalTableMapS3SourceUploadSettingsOutput() DataSetPhysicalTableMapS3SourceUploadSettingsOutput
	ToDataSetPhysicalTableMapS3SourceUploadSettingsOutputWithContext(context.Context) DataSetPhysicalTableMapS3SourceUploadSettingsOutput
}

type DataSetPhysicalTableMapS3SourceUploadSettingsArgs struct {
	// Whether the file has a header row, or the files each have a header row.
	ContainsHeader pulumi.BoolPtrInput `pulumi:"containsHeader"`
	// Delimiter between values in the file.
	Delimiter pulumi.StringPtrInput `pulumi:"delimiter"`
	// File format. Valid values are `CSV`, `TSV`, `CLF`, `ELF`, `XLSX`, and `JSON`.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// A row number to start reading data from.
	StartFromRow pulumi.IntPtrInput `pulumi:"startFromRow"`
	// Text qualifier. Valid values are `DOUBLE_QUOTE` and `SINGLE_QUOTE`.
	TextQualifier pulumi.StringPtrInput `pulumi:"textQualifier"`
}

func (DataSetPhysicalTableMapS3SourceUploadSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPhysicalTableMapS3SourceUploadSettings)(nil)).Elem()
}

func (i DataSetPhysicalTableMapS3SourceUploadSettingsArgs) ToDataSetPhysicalTableMapS3SourceUploadSettingsOutput() DataSetPhysicalTableMapS3SourceUploadSettingsOutput {
	return i.ToDataSetPhysicalTableMapS3SourceUploadSettingsOutputWithContext(context.Background())
}

func (i DataSetPhysicalTableMapS3SourceUploadSettingsArgs) ToDataSetPhysicalTableMapS3SourceUploadSettingsOutputWithContext(ctx context.Context) DataSetPhysicalTableMapS3SourceUploadSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPhysicalTableMapS3SourceUploadSettingsOutput)
}

func (i DataSetPhysicalTableMapS3SourceUploadSettingsArgs) ToDataSetPhysicalTableMapS3SourceUploadSettingsPtrOutput() DataSetPhysicalTableMapS3SourceUploadSettingsPtrOutput {
	return i.ToDataSetPhysicalTableMapS3SourceUploadSettingsPtrOutputWithContext(context.Background())
}

func (i DataSetPhysicalTableMapS3SourceUploadSettingsArgs) ToDataSetPhysicalTableMapS3SourceUploadSettingsPtrOutputWithContext(ctx context.Context) DataSetPhysicalTableMapS3SourceUploadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPhysicalTableMapS3SourceUploadSettingsOutput).ToDataSetPhysicalTableMapS3SourceUploadSettingsPtrOutputWithContext(ctx)
}

// DataSetPhysicalTableMapS3SourceUploadSettingsPtrInput is an input type that accepts DataSetPhysicalTableMapS3SourceUploadSettingsArgs, DataSetPhysicalTableMapS3SourceUploadSettingsPtr and DataSetPhysicalTableMapS3SourceUploadSettingsPtrOutput values.
// You can construct a concrete instance of `DataSetPhysicalTableMapS3SourceUploadSettingsPtrInput` via:
//
//	        DataSetPhysicalTableMapS3SourceUploadSettingsArgs{...}
//
//	or:
//
//	        nil
type DataSetPhysicalTableMapS3SourceUploadSettingsPtrInput interface {
	pulumi.Input

	ToDataSetPhysicalTableMapS3SourceUploadSettingsPtrOutput() DataSetPhysicalTableMapS3SourceUploadSettingsPtrOutput
	ToDataSetPhysicalTableMapS3SourceUploadSettingsPtrOutputWithContext(context.Context) DataSetPhysicalTableMapS3SourceUploadSettingsPtrOutput
}

type dataSetPhysicalTableMapS3SourceUploadSettingsPtrType DataSetPhysicalTableMapS3SourceUploadSettingsArgs

func DataSetPhysicalTableMapS3SourceUploadSettingsPtr(v *DataSetPhysicalTableMapS3SourceUploadSettingsArgs) DataSetPhysicalTableMapS3SourceUploadSettingsPtrInput {
	return (*dataSetPhysicalTableMapS3SourceUploadSettingsPtrType)(v)
}

func (*dataSetPhysicalTableMapS3SourceUploadSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetPhysicalTableMapS3SourceUploadSettings)(nil)).Elem()
}

func (i *dataSetPhysicalTableMapS3SourceUploadSettingsPtrType) ToDataSetPhysicalTableMapS3SourceUploadSettingsPtrOutput() DataSetPhysicalTableMapS3SourceUploadSettingsPtrOutput {
	return i.ToDataSetPhysicalTableMapS3SourceUploadSettingsPtrOutputWithContext(context.Background())
}

func (i *dataSetPhysicalTableMapS3SourceUploadSettingsPtrType) ToDataSetPhysicalTableMapS3SourceUploadSettingsPtrOutputWithContext(ctx context.Context) DataSetPhysicalTableMapS3SourceUploadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPhysicalTableMapS3SourceUploadSettingsPtrOutput)
}

type DataSetPhysicalTableMapS3SourceUploadSettingsOutput struct{ *pulumi.OutputState }

func (DataSetPhysicalTableMapS3SourceUploadSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPhysicalTableMapS3SourceUploadSettings)(nil)).Elem()
}

func (o DataSetPhysicalTableMapS3SourceUploadSettingsOutput) ToDataSetPhysicalTableMapS3SourceUploadSettingsOutput() DataSetPhysicalTableMapS3SourceUploadSettingsOutput {
	return o
}

func (o DataSetPhysicalTableMapS3SourceUploadSettingsOutput) ToDataSetPhysicalTableMapS3SourceUploadSettingsOutputWithContext(ctx context.Context) DataSetPhysicalTableMapS3SourceUploadSettingsOutput {
	return o
}

func (o DataSetPhysicalTableMapS3SourceUploadSettingsOutput) ToDataSetPhysicalTableMapS3SourceUploadSettingsPtrOutput() DataSetPhysicalTableMapS3SourceUploadSettingsPtrOutput {
	return o.ToDataSetPhysicalTableMapS3SourceUploadSettingsPtrOutputWithContext(context.Background())
}

func (o DataSetPhysicalTableMapS3SourceUploadSettingsOutput) ToDataSetPhysicalTableMapS3SourceUploadSettingsPtrOutputWithContext(ctx context.Context) DataSetPhysicalTableMapS3SourceUploadSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetPhysicalTableMapS3SourceUploadSettings) *DataSetPhysicalTableMapS3SourceUploadSettings {
		return &v
	}).(DataSetPhysicalTableMapS3SourceUploadSettingsPtrOutput)
}

// Whether the file has a header row, or the files each have a header row.
func (o DataSetPhysicalTableMapS3SourceUploadSettingsOutput) ContainsHeader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataSetPhysicalTableMapS3SourceUploadSettings) *bool { return v.ContainsHeader }).(pulumi.BoolPtrOutput)
}

// Delimiter between values in the file.
func (o DataSetPhysicalTableMapS3SourceUploadSettingsOutput) Delimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSetPhysicalTableMapS3SourceUploadSettings) *string { return v.Delimiter }).(pulumi.StringPtrOutput)
}

// File format. Valid values are `CSV`, `TSV`, `CLF`, `ELF`, `XLSX`, and `JSON`.
func (o DataSetPhysicalTableMapS3SourceUploadSettingsOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSetPhysicalTableMapS3SourceUploadSettings) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// A row number to start reading data from.
func (o DataSetPhysicalTableMapS3SourceUploadSettingsOutput) StartFromRow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DataSetPhysicalTableMapS3SourceUploadSettings) *int { return v.StartFromRow }).(pulumi.IntPtrOutput)
}

// Text qualifier. Valid values are `DOUBLE_QUOTE` and `SINGLE_QUOTE`.
func (o DataSetPhysicalTableMapS3SourceUploadSettingsOutput) TextQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSetPhysicalTableMapS3SourceUploadSettings) *string { return v.TextQualifier }).(pulumi.StringPtrOutput)
}

type DataSetPhysicalTableMapS3SourceUploadSettingsPtrOutput struct{ *pulumi.OutputState }

func (DataSetPhysicalTableMapS3SourceUploadSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetPhysicalTableMapS3SourceUploadSettings)(nil)).Elem()
}

func (o DataSetPhysicalTableMapS3SourceUploadSettingsPtrOutput) ToDataSetPhysicalTableMapS3SourceUploadSettingsPtrOutput() DataSetPhysicalTableMapS3SourceUploadSettingsPtrOutput {
	return o
}

func (o DataSetPhysicalTableMapS3SourceUploadSettingsPtrOutput) ToDataSetPhysicalTableMapS3SourceUploadSettingsPtrOutputWithContext(ctx context.Context) DataSetPhysicalTableMapS3SourceUploadSettingsPtrOutput {
	return o
}

func (o DataSetPhysicalTableMapS3SourceUploadSettingsPtrOutput) Elem() DataSetPhysicalTableMapS3SourceUploadSettingsOutput {
	return o.ApplyT(func(v *DataSetPhysicalTableMapS3SourceUploadSettings) DataSetPhysicalTableMapS3SourceUploadSettings {
		if v != nil {
			return *v
		}
		var ret DataSetPhysicalTableMapS3SourceUploadSettings
		return ret
	}).(DataSetPhysicalTableMapS3SourceUploadSettingsOutput)
}

// Whether the file has a header row, or the files each have a header row.
func (o DataSetPhysicalTableMapS3SourceUploadSettingsPtrOutput) ContainsHeader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataSetPhysicalTableMapS3SourceUploadSettings) *bool {
		if v == nil {
			return nil
		}
		return v.ContainsHeader
	}).(pulumi.BoolPtrOutput)
}

// Delimiter between values in the file.
func (o DataSetPhysicalTableMapS3SourceUploadSettingsPtrOutput) Delimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetPhysicalTableMapS3SourceUploadSettings) *string {
		if v == nil {
			return nil
		}
		return v.Delimiter
	}).(pulumi.StringPtrOutput)
}

// File format. Valid values are `CSV`, `TSV`, `CLF`, `ELF`, `XLSX`, and `JSON`.
func (o DataSetPhysicalTableMapS3SourceUploadSettingsPtrOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetPhysicalTableMapS3SourceUploadSettings) *string {
		if v == nil {
			return nil
		}
		return v.Format
	}).(pulumi.StringPtrOutput)
}

// A row number to start reading data from.
func (o DataSetPhysicalTableMapS3SourceUploadSettingsPtrOutput) StartFromRow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DataSetPhysicalTableMapS3SourceUploadSettings) *int {
		if v == nil {
			return nil
		}
		return v.StartFromRow
	}).(pulumi.IntPtrOutput)
}

// Text qualifier. Valid values are `DOUBLE_QUOTE` and `SINGLE_QUOTE`.
func (o DataSetPhysicalTableMapS3SourceUploadSettingsPtrOutput) TextQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetPhysicalTableMapS3SourceUploadSettings) *string {
		if v == nil {
			return nil
		}
		return v.TextQualifier
	}).(pulumi.StringPtrOutput)
}

type DataSetRefreshProperties struct {
	// The refresh configuration for the data set. See refresh_configuration.
	RefreshConfiguration DataSetRefreshPropertiesRefreshConfiguration `pulumi:"refreshConfiguration"`
}

// DataSetRefreshPropertiesInput is an input type that accepts DataSetRefreshPropertiesArgs and DataSetRefreshPropertiesOutput values.
// You can construct a concrete instance of `DataSetRefreshPropertiesInput` via:
//
//	DataSetRefreshPropertiesArgs{...}
type DataSetRefreshPropertiesInput interface {
	pulumi.Input

	ToDataSetRefreshPropertiesOutput() DataSetRefreshPropertiesOutput
	ToDataSetRefreshPropertiesOutputWithContext(context.Context) DataSetRefreshPropertiesOutput
}

type DataSetRefreshPropertiesArgs struct {
	// The refresh configuration for the data set. See refresh_configuration.
	RefreshConfiguration DataSetRefreshPropertiesRefreshConfigurationInput `pulumi:"refreshConfiguration"`
}

func (DataSetRefreshPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRefreshProperties)(nil)).Elem()
}

func (i DataSetRefreshPropertiesArgs) ToDataSetRefreshPropertiesOutput() DataSetRefreshPropertiesOutput {
	return i.ToDataSetRefreshPropertiesOutputWithContext(context.Background())
}

func (i DataSetRefreshPropertiesArgs) ToDataSetRefreshPropertiesOutputWithContext(ctx context.Context) DataSetRefreshPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRefreshPropertiesOutput)
}

func (i DataSetRefreshPropertiesArgs) ToDataSetRefreshPropertiesPtrOutput() DataSetRefreshPropertiesPtrOutput {
	return i.ToDataSetRefreshPropertiesPtrOutputWithContext(context.Background())
}

func (i DataSetRefreshPropertiesArgs) ToDataSetRefreshPropertiesPtrOutputWithContext(ctx context.Context) DataSetRefreshPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRefreshPropertiesOutput).ToDataSetRefreshPropertiesPtrOutputWithContext(ctx)
}

// DataSetRefreshPropertiesPtrInput is an input type that accepts DataSetRefreshPropertiesArgs, DataSetRefreshPropertiesPtr and DataSetRefreshPropertiesPtrOutput values.
// You can construct a concrete instance of `DataSetRefreshPropertiesPtrInput` via:
//
//	        DataSetRefreshPropertiesArgs{...}
//
//	or:
//
//	        nil
type DataSetRefreshPropertiesPtrInput interface {
	pulumi.Input

	ToDataSetRefreshPropertiesPtrOutput() DataSetRefreshPropertiesPtrOutput
	ToDataSetRefreshPropertiesPtrOutputWithContext(context.Context) DataSetRefreshPropertiesPtrOutput
}

type dataSetRefreshPropertiesPtrType DataSetRefreshPropertiesArgs

func DataSetRefreshPropertiesPtr(v *DataSetRefreshPropertiesArgs) DataSetRefreshPropertiesPtrInput {
	return (*dataSetRefreshPropertiesPtrType)(v)
}

func (*dataSetRefreshPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetRefreshProperties)(nil)).Elem()
}

func (i *dataSetRefreshPropertiesPtrType) ToDataSetRefreshPropertiesPtrOutput() DataSetRefreshPropertiesPtrOutput {
	return i.ToDataSetRefreshPropertiesPtrOutputWithContext(context.Background())
}

func (i *dataSetRefreshPropertiesPtrType) ToDataSetRefreshPropertiesPtrOutputWithContext(ctx context.Context) DataSetRefreshPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRefreshPropertiesPtrOutput)
}

type DataSetRefreshPropertiesOutput struct{ *pulumi.OutputState }

func (DataSetRefreshPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRefreshProperties)(nil)).Elem()
}

func (o DataSetRefreshPropertiesOutput) ToDataSetRefreshPropertiesOutput() DataSetRefreshPropertiesOutput {
	return o
}

func (o DataSetRefreshPropertiesOutput) ToDataSetRefreshPropertiesOutputWithContext(ctx context.Context) DataSetRefreshPropertiesOutput {
	return o
}

func (o DataSetRefreshPropertiesOutput) ToDataSetRefreshPropertiesPtrOutput() DataSetRefreshPropertiesPtrOutput {
	return o.ToDataSetRefreshPropertiesPtrOutputWithContext(context.Background())
}

func (o DataSetRefreshPropertiesOutput) ToDataSetRefreshPropertiesPtrOutputWithContext(ctx context.Context) DataSetRefreshPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetRefreshProperties) *DataSetRefreshProperties {
		return &v
	}).(DataSetRefreshPropertiesPtrOutput)
}

// The refresh configuration for the data set. See refresh_configuration.
func (o DataSetRefreshPropertiesOutput) RefreshConfiguration() DataSetRefreshPropertiesRefreshConfigurationOutput {
	return o.ApplyT(func(v DataSetRefreshProperties) DataSetRefreshPropertiesRefreshConfiguration {
		return v.RefreshConfiguration
	}).(DataSetRefreshPropertiesRefreshConfigurationOutput)
}

type DataSetRefreshPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DataSetRefreshPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetRefreshProperties)(nil)).Elem()
}

func (o DataSetRefreshPropertiesPtrOutput) ToDataSetRefreshPropertiesPtrOutput() DataSetRefreshPropertiesPtrOutput {
	return o
}

func (o DataSetRefreshPropertiesPtrOutput) ToDataSetRefreshPropertiesPtrOutputWithContext(ctx context.Context) DataSetRefreshPropertiesPtrOutput {
	return o
}

func (o DataSetRefreshPropertiesPtrOutput) Elem() DataSetRefreshPropertiesOutput {
	return o.ApplyT(func(v *DataSetRefreshProperties) DataSetRefreshProperties {
		if v != nil {
			return *v
		}
		var ret DataSetRefreshProperties
		return ret
	}).(DataSetRefreshPropertiesOutput)
}

// The refresh configuration for the data set. See refresh_configuration.
func (o DataSetRefreshPropertiesPtrOutput) RefreshConfiguration() DataSetRefreshPropertiesRefreshConfigurationPtrOutput {
	return o.ApplyT(func(v *DataSetRefreshProperties) *DataSetRefreshPropertiesRefreshConfiguration {
		if v == nil {
			return nil
		}
		return &v.RefreshConfiguration
	}).(DataSetRefreshPropertiesRefreshConfigurationPtrOutput)
}

type DataSetRefreshPropertiesRefreshConfiguration struct {
	// The incremental refresh for the data set. See incremental_refresh.
	IncrementalRefresh DataSetRefreshPropertiesRefreshConfigurationIncrementalRefresh `pulumi:"incrementalRefresh"`
}

// DataSetRefreshPropertiesRefreshConfigurationInput is an input type that accepts DataSetRefreshPropertiesRefreshConfigurationArgs and DataSetRefreshPropertiesRefreshConfigurationOutput values.
// You can construct a concrete instance of `DataSetRefreshPropertiesRefreshConfigurationInput` via:
//
//	DataSetRefreshPropertiesRefreshConfigurationArgs{...}
type DataSetRefreshPropertiesRefreshConfigurationInput interface {
	pulumi.Input

	ToDataSetRefreshPropertiesRefreshConfigurationOutput() DataSetRefreshPropertiesRefreshConfigurationOutput
	ToDataSetRefreshPropertiesRefreshConfigurationOutputWithContext(context.Context) DataSetRefreshPropertiesRefreshConfigurationOutput
}

type DataSetRefreshPropertiesRefreshConfigurationArgs struct {
	// The incremental refresh for the data set. See incremental_refresh.
	IncrementalRefresh DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshInput `pulumi:"incrementalRefresh"`
}

func (DataSetRefreshPropertiesRefreshConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRefreshPropertiesRefreshConfiguration)(nil)).Elem()
}

func (i DataSetRefreshPropertiesRefreshConfigurationArgs) ToDataSetRefreshPropertiesRefreshConfigurationOutput() DataSetRefreshPropertiesRefreshConfigurationOutput {
	return i.ToDataSetRefreshPropertiesRefreshConfigurationOutputWithContext(context.Background())
}

func (i DataSetRefreshPropertiesRefreshConfigurationArgs) ToDataSetRefreshPropertiesRefreshConfigurationOutputWithContext(ctx context.Context) DataSetRefreshPropertiesRefreshConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRefreshPropertiesRefreshConfigurationOutput)
}

func (i DataSetRefreshPropertiesRefreshConfigurationArgs) ToDataSetRefreshPropertiesRefreshConfigurationPtrOutput() DataSetRefreshPropertiesRefreshConfigurationPtrOutput {
	return i.ToDataSetRefreshPropertiesRefreshConfigurationPtrOutputWithContext(context.Background())
}

func (i DataSetRefreshPropertiesRefreshConfigurationArgs) ToDataSetRefreshPropertiesRefreshConfigurationPtrOutputWithContext(ctx context.Context) DataSetRefreshPropertiesRefreshConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRefreshPropertiesRefreshConfigurationOutput).ToDataSetRefreshPropertiesRefreshConfigurationPtrOutputWithContext(ctx)
}

// DataSetRefreshPropertiesRefreshConfigurationPtrInput is an input type that accepts DataSetRefreshPropertiesRefreshConfigurationArgs, DataSetRefreshPropertiesRefreshConfigurationPtr and DataSetRefreshPropertiesRefreshConfigurationPtrOutput values.
// You can construct a concrete instance of `DataSetRefreshPropertiesRefreshConfigurationPtrInput` via:
//
//	        DataSetRefreshPropertiesRefreshConfigurationArgs{...}
//
//	or:
//
//	        nil
type DataSetRefreshPropertiesRefreshConfigurationPtrInput interface {
	pulumi.Input

	ToDataSetRefreshPropertiesRefreshConfigurationPtrOutput() DataSetRefreshPropertiesRefreshConfigurationPtrOutput
	ToDataSetRefreshPropertiesRefreshConfigurationPtrOutputWithContext(context.Context) DataSetRefreshPropertiesRefreshConfigurationPtrOutput
}

type dataSetRefreshPropertiesRefreshConfigurationPtrType DataSetRefreshPropertiesRefreshConfigurationArgs

func DataSetRefreshPropertiesRefreshConfigurationPtr(v *DataSetRefreshPropertiesRefreshConfigurationArgs) DataSetRefreshPropertiesRefreshConfigurationPtrInput {
	return (*dataSetRefreshPropertiesRefreshConfigurationPtrType)(v)
}

func (*dataSetRefreshPropertiesRefreshConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetRefreshPropertiesRefreshConfiguration)(nil)).Elem()
}

func (i *dataSetRefreshPropertiesRefreshConfigurationPtrType) ToDataSetRefreshPropertiesRefreshConfigurationPtrOutput() DataSetRefreshPropertiesRefreshConfigurationPtrOutput {
	return i.ToDataSetRefreshPropertiesRefreshConfigurationPtrOutputWithContext(context.Background())
}

func (i *dataSetRefreshPropertiesRefreshConfigurationPtrType) ToDataSetRefreshPropertiesRefreshConfigurationPtrOutputWithContext(ctx context.Context) DataSetRefreshPropertiesRefreshConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRefreshPropertiesRefreshConfigurationPtrOutput)
}

type DataSetRefreshPropertiesRefreshConfigurationOutput struct{ *pulumi.OutputState }

func (DataSetRefreshPropertiesRefreshConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRefreshPropertiesRefreshConfiguration)(nil)).Elem()
}

func (o DataSetRefreshPropertiesRefreshConfigurationOutput) ToDataSetRefreshPropertiesRefreshConfigurationOutput() DataSetRefreshPropertiesRefreshConfigurationOutput {
	return o
}

func (o DataSetRefreshPropertiesRefreshConfigurationOutput) ToDataSetRefreshPropertiesRefreshConfigurationOutputWithContext(ctx context.Context) DataSetRefreshPropertiesRefreshConfigurationOutput {
	return o
}

func (o DataSetRefreshPropertiesRefreshConfigurationOutput) ToDataSetRefreshPropertiesRefreshConfigurationPtrOutput() DataSetRefreshPropertiesRefreshConfigurationPtrOutput {
	return o.ToDataSetRefreshPropertiesRefreshConfigurationPtrOutputWithContext(context.Background())
}

func (o DataSetRefreshPropertiesRefreshConfigurationOutput) ToDataSetRefreshPropertiesRefreshConfigurationPtrOutputWithContext(ctx context.Context) DataSetRefreshPropertiesRefreshConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetRefreshPropertiesRefreshConfiguration) *DataSetRefreshPropertiesRefreshConfiguration {
		return &v
	}).(DataSetRefreshPropertiesRefreshConfigurationPtrOutput)
}

// The incremental refresh for the data set. See incremental_refresh.
func (o DataSetRefreshPropertiesRefreshConfigurationOutput) IncrementalRefresh() DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput {
	return o.ApplyT(func(v DataSetRefreshPropertiesRefreshConfiguration) DataSetRefreshPropertiesRefreshConfigurationIncrementalRefresh {
		return v.IncrementalRefresh
	}).(DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput)
}

type DataSetRefreshPropertiesRefreshConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DataSetRefreshPropertiesRefreshConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetRefreshPropertiesRefreshConfiguration)(nil)).Elem()
}

func (o DataSetRefreshPropertiesRefreshConfigurationPtrOutput) ToDataSetRefreshPropertiesRefreshConfigurationPtrOutput() DataSetRefreshPropertiesRefreshConfigurationPtrOutput {
	return o
}

func (o DataSetRefreshPropertiesRefreshConfigurationPtrOutput) ToDataSetRefreshPropertiesRefreshConfigurationPtrOutputWithContext(ctx context.Context) DataSetRefreshPropertiesRefreshConfigurationPtrOutput {
	return o
}

func (o DataSetRefreshPropertiesRefreshConfigurationPtrOutput) Elem() DataSetRefreshPropertiesRefreshConfigurationOutput {
	return o.ApplyT(func(v *DataSetRefreshPropertiesRefreshConfiguration) DataSetRefreshPropertiesRefreshConfiguration {
		if v != nil {
			return *v
		}
		var ret DataSetRefreshPropertiesRefreshConfiguration
		return ret
	}).(DataSetRefreshPropertiesRefreshConfigurationOutput)
}

// The incremental refresh for the data set. See incremental_refresh.
func (o DataSetRefreshPropertiesRefreshConfigurationPtrOutput) IncrementalRefresh() DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrOutput {
	return o.ApplyT(func(v *DataSetRefreshPropertiesRefreshConfiguration) *DataSetRefreshPropertiesRefreshConfigurationIncrementalRefresh {
		if v == nil {
			return nil
		}
		return &v.IncrementalRefresh
	}).(DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrOutput)
}

type DataSetRefreshPropertiesRefreshConfigurationIncrementalRefresh struct {
	// The lookback window setup for an incremental refresh configuration. See lookback_window.
	LookbackWindow DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow `pulumi:"lookbackWindow"`
}

// DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshInput is an input type that accepts DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshArgs and DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput values.
// You can construct a concrete instance of `DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshInput` via:
//
//	DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshArgs{...}
type DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshInput interface {
	pulumi.Input

	ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput() DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput
	ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutputWithContext(context.Context) DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput
}

type DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshArgs struct {
	// The lookback window setup for an incremental refresh configuration. See lookback_window.
	LookbackWindow DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowInput `pulumi:"lookbackWindow"`
}

func (DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRefreshPropertiesRefreshConfigurationIncrementalRefresh)(nil)).Elem()
}

func (i DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshArgs) ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput() DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput {
	return i.ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutputWithContext(context.Background())
}

func (i DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshArgs) ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutputWithContext(ctx context.Context) DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput)
}

func (i DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshArgs) ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrOutput() DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrOutput {
	return i.ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrOutputWithContext(context.Background())
}

func (i DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshArgs) ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrOutputWithContext(ctx context.Context) DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput).ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrOutputWithContext(ctx)
}

// DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrInput is an input type that accepts DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshArgs, DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtr and DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrOutput values.
// You can construct a concrete instance of `DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrInput` via:
//
//	        DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshArgs{...}
//
//	or:
//
//	        nil
type DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrInput interface {
	pulumi.Input

	ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrOutput() DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrOutput
	ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrOutputWithContext(context.Context) DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrOutput
}

type dataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrType DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshArgs

func DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtr(v *DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshArgs) DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrInput {
	return (*dataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrType)(v)
}

func (*dataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetRefreshPropertiesRefreshConfigurationIncrementalRefresh)(nil)).Elem()
}

func (i *dataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrType) ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrOutput() DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrOutput {
	return i.ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrOutputWithContext(context.Background())
}

func (i *dataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrType) ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrOutputWithContext(ctx context.Context) DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrOutput)
}

type DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput struct{ *pulumi.OutputState }

func (DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRefreshPropertiesRefreshConfigurationIncrementalRefresh)(nil)).Elem()
}

func (o DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput) ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput() DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput {
	return o
}

func (o DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput) ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutputWithContext(ctx context.Context) DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput {
	return o
}

func (o DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput) ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrOutput() DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrOutput {
	return o.ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrOutputWithContext(context.Background())
}

func (o DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput) ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrOutputWithContext(ctx context.Context) DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetRefreshPropertiesRefreshConfigurationIncrementalRefresh) *DataSetRefreshPropertiesRefreshConfigurationIncrementalRefresh {
		return &v
	}).(DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrOutput)
}

// The lookback window setup for an incremental refresh configuration. See lookback_window.
func (o DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput) LookbackWindow() DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput {
	return o.ApplyT(func(v DataSetRefreshPropertiesRefreshConfigurationIncrementalRefresh) DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow {
		return v.LookbackWindow
	}).(DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput)
}

type DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrOutput struct{ *pulumi.OutputState }

func (DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetRefreshPropertiesRefreshConfigurationIncrementalRefresh)(nil)).Elem()
}

func (o DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrOutput) ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrOutput() DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrOutput {
	return o
}

func (o DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrOutput) ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrOutputWithContext(ctx context.Context) DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrOutput {
	return o
}

func (o DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrOutput) Elem() DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput {
	return o.ApplyT(func(v *DataSetRefreshPropertiesRefreshConfigurationIncrementalRefresh) DataSetRefreshPropertiesRefreshConfigurationIncrementalRefresh {
		if v != nil {
			return *v
		}
		var ret DataSetRefreshPropertiesRefreshConfigurationIncrementalRefresh
		return ret
	}).(DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput)
}

// The lookback window setup for an incremental refresh configuration. See lookback_window.
func (o DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrOutput) LookbackWindow() DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutput {
	return o.ApplyT(func(v *DataSetRefreshPropertiesRefreshConfigurationIncrementalRefresh) *DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow {
		if v == nil {
			return nil
		}
		return &v.LookbackWindow
	}).(DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutput)
}

type DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow struct {
	// The name of the lookback window column.
	ColumnName string `pulumi:"columnName"`
	// The lookback window column size.
	Size int `pulumi:"size"`
	// The size unit that is used for the lookback window column. Valid values for this structure are `HOUR`, `DAY`, and `WEEK`.
	SizeUnit string `pulumi:"sizeUnit"`
}

// DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowInput is an input type that accepts DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowArgs and DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput values.
// You can construct a concrete instance of `DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowInput` via:
//
//	DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowArgs{...}
type DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowInput interface {
	pulumi.Input

	ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput() DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput
	ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutputWithContext(context.Context) DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput
}

type DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowArgs struct {
	// The name of the lookback window column.
	ColumnName pulumi.StringInput `pulumi:"columnName"`
	// The lookback window column size.
	Size pulumi.IntInput `pulumi:"size"`
	// The size unit that is used for the lookback window column. Valid values for this structure are `HOUR`, `DAY`, and `WEEK`.
	SizeUnit pulumi.StringInput `pulumi:"sizeUnit"`
}

func (DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow)(nil)).Elem()
}

func (i DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowArgs) ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput() DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput {
	return i.ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutputWithContext(context.Background())
}

func (i DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowArgs) ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutputWithContext(ctx context.Context) DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput)
}

func (i DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowArgs) ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutput() DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutput {
	return i.ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutputWithContext(context.Background())
}

func (i DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowArgs) ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutputWithContext(ctx context.Context) DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput).ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutputWithContext(ctx)
}

// DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrInput is an input type that accepts DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowArgs, DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtr and DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutput values.
// You can construct a concrete instance of `DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrInput` via:
//
//	        DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowArgs{...}
//
//	or:
//
//	        nil
type DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrInput interface {
	pulumi.Input

	ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutput() DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutput
	ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutputWithContext(context.Context) DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutput
}

type dataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrType DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowArgs

func DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtr(v *DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowArgs) DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrInput {
	return (*dataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrType)(v)
}

func (*dataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow)(nil)).Elem()
}

func (i *dataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrType) ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutput() DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutput {
	return i.ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutputWithContext(context.Background())
}

func (i *dataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrType) ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutputWithContext(ctx context.Context) DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutput)
}

type DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput struct{ *pulumi.OutputState }

func (DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow)(nil)).Elem()
}

func (o DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput) ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput() DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput {
	return o
}

func (o DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput) ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutputWithContext(ctx context.Context) DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput {
	return o
}

func (o DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput) ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutput() DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutput {
	return o.ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutputWithContext(context.Background())
}

func (o DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput) ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutputWithContext(ctx context.Context) DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow) *DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow {
		return &v
	}).(DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutput)
}

// The name of the lookback window column.
func (o DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow) string {
		return v.ColumnName
	}).(pulumi.StringOutput)
}

// The lookback window column size.
func (o DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow) int {
		return v.Size
	}).(pulumi.IntOutput)
}

// The size unit that is used for the lookback window column. Valid values for this structure are `HOUR`, `DAY`, and `WEEK`.
func (o DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput) SizeUnit() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow) string {
		return v.SizeUnit
	}).(pulumi.StringOutput)
}

type DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutput struct{ *pulumi.OutputState }

func (DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow)(nil)).Elem()
}

func (o DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutput) ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutput() DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutput {
	return o
}

func (o DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutput) ToDataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutputWithContext(ctx context.Context) DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutput {
	return o
}

func (o DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutput) Elem() DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput {
	return o.ApplyT(func(v *DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow) DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow {
		if v != nil {
			return *v
		}
		var ret DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow
		return ret
	}).(DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput)
}

// The name of the lookback window column.
func (o DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutput) ColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow) *string {
		if v == nil {
			return nil
		}
		return &v.ColumnName
	}).(pulumi.StringPtrOutput)
}

// The lookback window column size.
func (o DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow) *int {
		if v == nil {
			return nil
		}
		return &v.Size
	}).(pulumi.IntPtrOutput)
}

// The size unit that is used for the lookback window column. Valid values for this structure are `HOUR`, `DAY`, and `WEEK`.
func (o DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutput) SizeUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow) *string {
		if v == nil {
			return nil
		}
		return &v.SizeUnit
	}).(pulumi.StringPtrOutput)
}

type DataSetRowLevelPermissionDataSet struct {
	// ARN of the dataset that contains permissions for RLS.
	Arn string `pulumi:"arn"`
	// User or group rules associated with the dataset that contains permissions for RLS.
	FormatVersion *string `pulumi:"formatVersion"`
	// Namespace associated with the dataset that contains permissions for RLS.
	Namespace *string `pulumi:"namespace"`
	// Type of permissions to use when interpreting the permissions for RLS. Valid values are `GRANT_ACCESS` and `DENY_ACCESS`.
	PermissionPolicy string `pulumi:"permissionPolicy"`
	// Status of the row-level security permission dataset. If enabled, the status is `ENABLED`. If disabled, the status is `DISABLED`.
	Status *string `pulumi:"status"`
}

// DataSetRowLevelPermissionDataSetInput is an input type that accepts DataSetRowLevelPermissionDataSetArgs and DataSetRowLevelPermissionDataSetOutput values.
// You can construct a concrete instance of `DataSetRowLevelPermissionDataSetInput` via:
//
//	DataSetRowLevelPermissionDataSetArgs{...}
type DataSetRowLevelPermissionDataSetInput interface {
	pulumi.Input

	ToDataSetRowLevelPermissionDataSetOutput() DataSetRowLevelPermissionDataSetOutput
	ToDataSetRowLevelPermissionDataSetOutputWithContext(context.Context) DataSetRowLevelPermissionDataSetOutput
}

type DataSetRowLevelPermissionDataSetArgs struct {
	// ARN of the dataset that contains permissions for RLS.
	Arn pulumi.StringInput `pulumi:"arn"`
	// User or group rules associated with the dataset that contains permissions for RLS.
	FormatVersion pulumi.StringPtrInput `pulumi:"formatVersion"`
	// Namespace associated with the dataset that contains permissions for RLS.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Type of permissions to use when interpreting the permissions for RLS. Valid values are `GRANT_ACCESS` and `DENY_ACCESS`.
	PermissionPolicy pulumi.StringInput `pulumi:"permissionPolicy"`
	// Status of the row-level security permission dataset. If enabled, the status is `ENABLED`. If disabled, the status is `DISABLED`.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (DataSetRowLevelPermissionDataSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRowLevelPermissionDataSet)(nil)).Elem()
}

func (i DataSetRowLevelPermissionDataSetArgs) ToDataSetRowLevelPermissionDataSetOutput() DataSetRowLevelPermissionDataSetOutput {
	return i.ToDataSetRowLevelPermissionDataSetOutputWithContext(context.Background())
}

func (i DataSetRowLevelPermissionDataSetArgs) ToDataSetRowLevelPermissionDataSetOutputWithContext(ctx context.Context) DataSetRowLevelPermissionDataSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRowLevelPermissionDataSetOutput)
}

func (i DataSetRowLevelPermissionDataSetArgs) ToDataSetRowLevelPermissionDataSetPtrOutput() DataSetRowLevelPermissionDataSetPtrOutput {
	return i.ToDataSetRowLevelPermissionDataSetPtrOutputWithContext(context.Background())
}

func (i DataSetRowLevelPermissionDataSetArgs) ToDataSetRowLevelPermissionDataSetPtrOutputWithContext(ctx context.Context) DataSetRowLevelPermissionDataSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRowLevelPermissionDataSetOutput).ToDataSetRowLevelPermissionDataSetPtrOutputWithContext(ctx)
}

// DataSetRowLevelPermissionDataSetPtrInput is an input type that accepts DataSetRowLevelPermissionDataSetArgs, DataSetRowLevelPermissionDataSetPtr and DataSetRowLevelPermissionDataSetPtrOutput values.
// You can construct a concrete instance of `DataSetRowLevelPermissionDataSetPtrInput` via:
//
//	        DataSetRowLevelPermissionDataSetArgs{...}
//
//	or:
//
//	        nil
type DataSetRowLevelPermissionDataSetPtrInput interface {
	pulumi.Input

	ToDataSetRowLevelPermissionDataSetPtrOutput() DataSetRowLevelPermissionDataSetPtrOutput
	ToDataSetRowLevelPermissionDataSetPtrOutputWithContext(context.Context) DataSetRowLevelPermissionDataSetPtrOutput
}

type dataSetRowLevelPermissionDataSetPtrType DataSetRowLevelPermissionDataSetArgs

func DataSetRowLevelPermissionDataSetPtr(v *DataSetRowLevelPermissionDataSetArgs) DataSetRowLevelPermissionDataSetPtrInput {
	return (*dataSetRowLevelPermissionDataSetPtrType)(v)
}

func (*dataSetRowLevelPermissionDataSetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetRowLevelPermissionDataSet)(nil)).Elem()
}

func (i *dataSetRowLevelPermissionDataSetPtrType) ToDataSetRowLevelPermissionDataSetPtrOutput() DataSetRowLevelPermissionDataSetPtrOutput {
	return i.ToDataSetRowLevelPermissionDataSetPtrOutputWithContext(context.Background())
}

func (i *dataSetRowLevelPermissionDataSetPtrType) ToDataSetRowLevelPermissionDataSetPtrOutputWithContext(ctx context.Context) DataSetRowLevelPermissionDataSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRowLevelPermissionDataSetPtrOutput)
}

type DataSetRowLevelPermissionDataSetOutput struct{ *pulumi.OutputState }

func (DataSetRowLevelPermissionDataSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRowLevelPermissionDataSet)(nil)).Elem()
}

func (o DataSetRowLevelPermissionDataSetOutput) ToDataSetRowLevelPermissionDataSetOutput() DataSetRowLevelPermissionDataSetOutput {
	return o
}

func (o DataSetRowLevelPermissionDataSetOutput) ToDataSetRowLevelPermissionDataSetOutputWithContext(ctx context.Context) DataSetRowLevelPermissionDataSetOutput {
	return o
}

func (o DataSetRowLevelPermissionDataSetOutput) ToDataSetRowLevelPermissionDataSetPtrOutput() DataSetRowLevelPermissionDataSetPtrOutput {
	return o.ToDataSetRowLevelPermissionDataSetPtrOutputWithContext(context.Background())
}

func (o DataSetRowLevelPermissionDataSetOutput) ToDataSetRowLevelPermissionDataSetPtrOutputWithContext(ctx context.Context) DataSetRowLevelPermissionDataSetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetRowLevelPermissionDataSet) *DataSetRowLevelPermissionDataSet {
		return &v
	}).(DataSetRowLevelPermissionDataSetPtrOutput)
}

// ARN of the dataset that contains permissions for RLS.
func (o DataSetRowLevelPermissionDataSetOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetRowLevelPermissionDataSet) string { return v.Arn }).(pulumi.StringOutput)
}

// User or group rules associated with the dataset that contains permissions for RLS.
func (o DataSetRowLevelPermissionDataSetOutput) FormatVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSetRowLevelPermissionDataSet) *string { return v.FormatVersion }).(pulumi.StringPtrOutput)
}

// Namespace associated with the dataset that contains permissions for RLS.
func (o DataSetRowLevelPermissionDataSetOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSetRowLevelPermissionDataSet) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Type of permissions to use when interpreting the permissions for RLS. Valid values are `GRANT_ACCESS` and `DENY_ACCESS`.
func (o DataSetRowLevelPermissionDataSetOutput) PermissionPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetRowLevelPermissionDataSet) string { return v.PermissionPolicy }).(pulumi.StringOutput)
}

// Status of the row-level security permission dataset. If enabled, the status is `ENABLED`. If disabled, the status is `DISABLED`.
func (o DataSetRowLevelPermissionDataSetOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSetRowLevelPermissionDataSet) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type DataSetRowLevelPermissionDataSetPtrOutput struct{ *pulumi.OutputState }

func (DataSetRowLevelPermissionDataSetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetRowLevelPermissionDataSet)(nil)).Elem()
}

func (o DataSetRowLevelPermissionDataSetPtrOutput) ToDataSetRowLevelPermissionDataSetPtrOutput() DataSetRowLevelPermissionDataSetPtrOutput {
	return o
}

func (o DataSetRowLevelPermissionDataSetPtrOutput) ToDataSetRowLevelPermissionDataSetPtrOutputWithContext(ctx context.Context) DataSetRowLevelPermissionDataSetPtrOutput {
	return o
}

func (o DataSetRowLevelPermissionDataSetPtrOutput) Elem() DataSetRowLevelPermissionDataSetOutput {
	return o.ApplyT(func(v *DataSetRowLevelPermissionDataSet) DataSetRowLevelPermissionDataSet {
		if v != nil {
			return *v
		}
		var ret DataSetRowLevelPermissionDataSet
		return ret
	}).(DataSetRowLevelPermissionDataSetOutput)
}

// ARN of the dataset that contains permissions for RLS.
func (o DataSetRowLevelPermissionDataSetPtrOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetRowLevelPermissionDataSet) *string {
		if v == nil {
			return nil
		}
		return &v.Arn
	}).(pulumi.StringPtrOutput)
}

// User or group rules associated with the dataset that contains permissions for RLS.
func (o DataSetRowLevelPermissionDataSetPtrOutput) FormatVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetRowLevelPermissionDataSet) *string {
		if v == nil {
			return nil
		}
		return v.FormatVersion
	}).(pulumi.StringPtrOutput)
}

// Namespace associated with the dataset that contains permissions for RLS.
func (o DataSetRowLevelPermissionDataSetPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetRowLevelPermissionDataSet) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Type of permissions to use when interpreting the permissions for RLS. Valid values are `GRANT_ACCESS` and `DENY_ACCESS`.
func (o DataSetRowLevelPermissionDataSetPtrOutput) PermissionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetRowLevelPermissionDataSet) *string {
		if v == nil {
			return nil
		}
		return &v.PermissionPolicy
	}).(pulumi.StringPtrOutput)
}

// Status of the row-level security permission dataset. If enabled, the status is `ENABLED`. If disabled, the status is `DISABLED`.
func (o DataSetRowLevelPermissionDataSetPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetRowLevelPermissionDataSet) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

type DataSetRowLevelPermissionTagConfiguration struct {
	// The status of row-level security tags. If enabled, the status is `ENABLED`. If disabled, the status is `DISABLED`.
	Status *string `pulumi:"status"`
	// A set of rules associated with row-level security, such as the tag names and columns that they are assigned to. See tag_rules.
	TagRules []DataSetRowLevelPermissionTagConfigurationTagRule `pulumi:"tagRules"`
}

// DataSetRowLevelPermissionTagConfigurationInput is an input type that accepts DataSetRowLevelPermissionTagConfigurationArgs and DataSetRowLevelPermissionTagConfigurationOutput values.
// You can construct a concrete instance of `DataSetRowLevelPermissionTagConfigurationInput` via:
//
//	DataSetRowLevelPermissionTagConfigurationArgs{...}
type DataSetRowLevelPermissionTagConfigurationInput interface {
	pulumi.Input

	ToDataSetRowLevelPermissionTagConfigurationOutput() DataSetRowLevelPermissionTagConfigurationOutput
	ToDataSetRowLevelPermissionTagConfigurationOutputWithContext(context.Context) DataSetRowLevelPermissionTagConfigurationOutput
}

type DataSetRowLevelPermissionTagConfigurationArgs struct {
	// The status of row-level security tags. If enabled, the status is `ENABLED`. If disabled, the status is `DISABLED`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// A set of rules associated with row-level security, such as the tag names and columns that they are assigned to. See tag_rules.
	TagRules DataSetRowLevelPermissionTagConfigurationTagRuleArrayInput `pulumi:"tagRules"`
}

func (DataSetRowLevelPermissionTagConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRowLevelPermissionTagConfiguration)(nil)).Elem()
}

func (i DataSetRowLevelPermissionTagConfigurationArgs) ToDataSetRowLevelPermissionTagConfigurationOutput() DataSetRowLevelPermissionTagConfigurationOutput {
	return i.ToDataSetRowLevelPermissionTagConfigurationOutputWithContext(context.Background())
}

func (i DataSetRowLevelPermissionTagConfigurationArgs) ToDataSetRowLevelPermissionTagConfigurationOutputWithContext(ctx context.Context) DataSetRowLevelPermissionTagConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRowLevelPermissionTagConfigurationOutput)
}

func (i DataSetRowLevelPermissionTagConfigurationArgs) ToDataSetRowLevelPermissionTagConfigurationPtrOutput() DataSetRowLevelPermissionTagConfigurationPtrOutput {
	return i.ToDataSetRowLevelPermissionTagConfigurationPtrOutputWithContext(context.Background())
}

func (i DataSetRowLevelPermissionTagConfigurationArgs) ToDataSetRowLevelPermissionTagConfigurationPtrOutputWithContext(ctx context.Context) DataSetRowLevelPermissionTagConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRowLevelPermissionTagConfigurationOutput).ToDataSetRowLevelPermissionTagConfigurationPtrOutputWithContext(ctx)
}

// DataSetRowLevelPermissionTagConfigurationPtrInput is an input type that accepts DataSetRowLevelPermissionTagConfigurationArgs, DataSetRowLevelPermissionTagConfigurationPtr and DataSetRowLevelPermissionTagConfigurationPtrOutput values.
// You can construct a concrete instance of `DataSetRowLevelPermissionTagConfigurationPtrInput` via:
//
//	        DataSetRowLevelPermissionTagConfigurationArgs{...}
//
//	or:
//
//	        nil
type DataSetRowLevelPermissionTagConfigurationPtrInput interface {
	pulumi.Input

	ToDataSetRowLevelPermissionTagConfigurationPtrOutput() DataSetRowLevelPermissionTagConfigurationPtrOutput
	ToDataSetRowLevelPermissionTagConfigurationPtrOutputWithContext(context.Context) DataSetRowLevelPermissionTagConfigurationPtrOutput
}

type dataSetRowLevelPermissionTagConfigurationPtrType DataSetRowLevelPermissionTagConfigurationArgs

func DataSetRowLevelPermissionTagConfigurationPtr(v *DataSetRowLevelPermissionTagConfigurationArgs) DataSetRowLevelPermissionTagConfigurationPtrInput {
	return (*dataSetRowLevelPermissionTagConfigurationPtrType)(v)
}

func (*dataSetRowLevelPermissionTagConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetRowLevelPermissionTagConfiguration)(nil)).Elem()
}

func (i *dataSetRowLevelPermissionTagConfigurationPtrType) ToDataSetRowLevelPermissionTagConfigurationPtrOutput() DataSetRowLevelPermissionTagConfigurationPtrOutput {
	return i.ToDataSetRowLevelPermissionTagConfigurationPtrOutputWithContext(context.Background())
}

func (i *dataSetRowLevelPermissionTagConfigurationPtrType) ToDataSetRowLevelPermissionTagConfigurationPtrOutputWithContext(ctx context.Context) DataSetRowLevelPermissionTagConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRowLevelPermissionTagConfigurationPtrOutput)
}

type DataSetRowLevelPermissionTagConfigurationOutput struct{ *pulumi.OutputState }

func (DataSetRowLevelPermissionTagConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRowLevelPermissionTagConfiguration)(nil)).Elem()
}

func (o DataSetRowLevelPermissionTagConfigurationOutput) ToDataSetRowLevelPermissionTagConfigurationOutput() DataSetRowLevelPermissionTagConfigurationOutput {
	return o
}

func (o DataSetRowLevelPermissionTagConfigurationOutput) ToDataSetRowLevelPermissionTagConfigurationOutputWithContext(ctx context.Context) DataSetRowLevelPermissionTagConfigurationOutput {
	return o
}

func (o DataSetRowLevelPermissionTagConfigurationOutput) ToDataSetRowLevelPermissionTagConfigurationPtrOutput() DataSetRowLevelPermissionTagConfigurationPtrOutput {
	return o.ToDataSetRowLevelPermissionTagConfigurationPtrOutputWithContext(context.Background())
}

func (o DataSetRowLevelPermissionTagConfigurationOutput) ToDataSetRowLevelPermissionTagConfigurationPtrOutputWithContext(ctx context.Context) DataSetRowLevelPermissionTagConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetRowLevelPermissionTagConfiguration) *DataSetRowLevelPermissionTagConfiguration {
		return &v
	}).(DataSetRowLevelPermissionTagConfigurationPtrOutput)
}

// The status of row-level security tags. If enabled, the status is `ENABLED`. If disabled, the status is `DISABLED`.
func (o DataSetRowLevelPermissionTagConfigurationOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSetRowLevelPermissionTagConfiguration) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// A set of rules associated with row-level security, such as the tag names and columns that they are assigned to. See tag_rules.
func (o DataSetRowLevelPermissionTagConfigurationOutput) TagRules() DataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput {
	return o.ApplyT(func(v DataSetRowLevelPermissionTagConfiguration) []DataSetRowLevelPermissionTagConfigurationTagRule {
		return v.TagRules
	}).(DataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput)
}

type DataSetRowLevelPermissionTagConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DataSetRowLevelPermissionTagConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetRowLevelPermissionTagConfiguration)(nil)).Elem()
}

func (o DataSetRowLevelPermissionTagConfigurationPtrOutput) ToDataSetRowLevelPermissionTagConfigurationPtrOutput() DataSetRowLevelPermissionTagConfigurationPtrOutput {
	return o
}

func (o DataSetRowLevelPermissionTagConfigurationPtrOutput) ToDataSetRowLevelPermissionTagConfigurationPtrOutputWithContext(ctx context.Context) DataSetRowLevelPermissionTagConfigurationPtrOutput {
	return o
}

func (o DataSetRowLevelPermissionTagConfigurationPtrOutput) Elem() DataSetRowLevelPermissionTagConfigurationOutput {
	return o.ApplyT(func(v *DataSetRowLevelPermissionTagConfiguration) DataSetRowLevelPermissionTagConfiguration {
		if v != nil {
			return *v
		}
		var ret DataSetRowLevelPermissionTagConfiguration
		return ret
	}).(DataSetRowLevelPermissionTagConfigurationOutput)
}

// The status of row-level security tags. If enabled, the status is `ENABLED`. If disabled, the status is `DISABLED`.
func (o DataSetRowLevelPermissionTagConfigurationPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetRowLevelPermissionTagConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// A set of rules associated with row-level security, such as the tag names and columns that they are assigned to. See tag_rules.
func (o DataSetRowLevelPermissionTagConfigurationPtrOutput) TagRules() DataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput {
	return o.ApplyT(func(v *DataSetRowLevelPermissionTagConfiguration) []DataSetRowLevelPermissionTagConfigurationTagRule {
		if v == nil {
			return nil
		}
		return v.TagRules
	}).(DataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput)
}

type DataSetRowLevelPermissionTagConfigurationTagRule struct {
	// Column name that a tag key is assigned to.
	ColumnName string `pulumi:"columnName"`
	// A string that you want to use to filter by all the values in a column in the dataset and don’t want to list the values one by one.
	MatchAllValue *string `pulumi:"matchAllValue"`
	// Unique key for a tag.
	TagKey string `pulumi:"tagKey"`
	// A string that you want to use to delimit the values when you pass the values at run time.
	TagMultiValueDelimiter *string `pulumi:"tagMultiValueDelimiter"`
}

// DataSetRowLevelPermissionTagConfigurationTagRuleInput is an input type that accepts DataSetRowLevelPermissionTagConfigurationTagRuleArgs and DataSetRowLevelPermissionTagConfigurationTagRuleOutput values.
// You can construct a concrete instance of `DataSetRowLevelPermissionTagConfigurationTagRuleInput` via:
//
//	DataSetRowLevelPermissionTagConfigurationTagRuleArgs{...}
type DataSetRowLevelPermissionTagConfigurationTagRuleInput interface {
	pulumi.Input

	ToDataSetRowLevelPermissionTagConfigurationTagRuleOutput() DataSetRowLevelPermissionTagConfigurationTagRuleOutput
	ToDataSetRowLevelPermissionTagConfigurationTagRuleOutputWithContext(context.Context) DataSetRowLevelPermissionTagConfigurationTagRuleOutput
}

type DataSetRowLevelPermissionTagConfigurationTagRuleArgs struct {
	// Column name that a tag key is assigned to.
	ColumnName pulumi.StringInput `pulumi:"columnName"`
	// A string that you want to use to filter by all the values in a column in the dataset and don’t want to list the values one by one.
	MatchAllValue pulumi.StringPtrInput `pulumi:"matchAllValue"`
	// Unique key for a tag.
	TagKey pulumi.StringInput `pulumi:"tagKey"`
	// A string that you want to use to delimit the values when you pass the values at run time.
	TagMultiValueDelimiter pulumi.StringPtrInput `pulumi:"tagMultiValueDelimiter"`
}

func (DataSetRowLevelPermissionTagConfigurationTagRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRowLevelPermissionTagConfigurationTagRule)(nil)).Elem()
}

func (i DataSetRowLevelPermissionTagConfigurationTagRuleArgs) ToDataSetRowLevelPermissionTagConfigurationTagRuleOutput() DataSetRowLevelPermissionTagConfigurationTagRuleOutput {
	return i.ToDataSetRowLevelPermissionTagConfigurationTagRuleOutputWithContext(context.Background())
}

func (i DataSetRowLevelPermissionTagConfigurationTagRuleArgs) ToDataSetRowLevelPermissionTagConfigurationTagRuleOutputWithContext(ctx context.Context) DataSetRowLevelPermissionTagConfigurationTagRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRowLevelPermissionTagConfigurationTagRuleOutput)
}

// DataSetRowLevelPermissionTagConfigurationTagRuleArrayInput is an input type that accepts DataSetRowLevelPermissionTagConfigurationTagRuleArray and DataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput values.
// You can construct a concrete instance of `DataSetRowLevelPermissionTagConfigurationTagRuleArrayInput` via:
//
//	DataSetRowLevelPermissionTagConfigurationTagRuleArray{ DataSetRowLevelPermissionTagConfigurationTagRuleArgs{...} }
type DataSetRowLevelPermissionTagConfigurationTagRuleArrayInput interface {
	pulumi.Input

	ToDataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput() DataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput
	ToDataSetRowLevelPermissionTagConfigurationTagRuleArrayOutputWithContext(context.Context) DataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput
}

type DataSetRowLevelPermissionTagConfigurationTagRuleArray []DataSetRowLevelPermissionTagConfigurationTagRuleInput

func (DataSetRowLevelPermissionTagConfigurationTagRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetRowLevelPermissionTagConfigurationTagRule)(nil)).Elem()
}

func (i DataSetRowLevelPermissionTagConfigurationTagRuleArray) ToDataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput() DataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput {
	return i.ToDataSetRowLevelPermissionTagConfigurationTagRuleArrayOutputWithContext(context.Background())
}

func (i DataSetRowLevelPermissionTagConfigurationTagRuleArray) ToDataSetRowLevelPermissionTagConfigurationTagRuleArrayOutputWithContext(ctx context.Context) DataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput)
}

type DataSetRowLevelPermissionTagConfigurationTagRuleOutput struct{ *pulumi.OutputState }

func (DataSetRowLevelPermissionTagConfigurationTagRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRowLevelPermissionTagConfigurationTagRule)(nil)).Elem()
}

func (o DataSetRowLevelPermissionTagConfigurationTagRuleOutput) ToDataSetRowLevelPermissionTagConfigurationTagRuleOutput() DataSetRowLevelPermissionTagConfigurationTagRuleOutput {
	return o
}

func (o DataSetRowLevelPermissionTagConfigurationTagRuleOutput) ToDataSetRowLevelPermissionTagConfigurationTagRuleOutputWithContext(ctx context.Context) DataSetRowLevelPermissionTagConfigurationTagRuleOutput {
	return o
}

// Column name that a tag key is assigned to.
func (o DataSetRowLevelPermissionTagConfigurationTagRuleOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetRowLevelPermissionTagConfigurationTagRule) string { return v.ColumnName }).(pulumi.StringOutput)
}

// A string that you want to use to filter by all the values in a column in the dataset and don’t want to list the values one by one.
func (o DataSetRowLevelPermissionTagConfigurationTagRuleOutput) MatchAllValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSetRowLevelPermissionTagConfigurationTagRule) *string { return v.MatchAllValue }).(pulumi.StringPtrOutput)
}

// Unique key for a tag.
func (o DataSetRowLevelPermissionTagConfigurationTagRuleOutput) TagKey() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetRowLevelPermissionTagConfigurationTagRule) string { return v.TagKey }).(pulumi.StringOutput)
}

// A string that you want to use to delimit the values when you pass the values at run time.
func (o DataSetRowLevelPermissionTagConfigurationTagRuleOutput) TagMultiValueDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSetRowLevelPermissionTagConfigurationTagRule) *string { return v.TagMultiValueDelimiter }).(pulumi.StringPtrOutput)
}

type DataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput struct{ *pulumi.OutputState }

func (DataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetRowLevelPermissionTagConfigurationTagRule)(nil)).Elem()
}

func (o DataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput) ToDataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput() DataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput {
	return o
}

func (o DataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput) ToDataSetRowLevelPermissionTagConfigurationTagRuleArrayOutputWithContext(ctx context.Context) DataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput {
	return o
}

func (o DataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput) Index(i pulumi.IntInput) DataSetRowLevelPermissionTagConfigurationTagRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSetRowLevelPermissionTagConfigurationTagRule {
		return vs[0].([]DataSetRowLevelPermissionTagConfigurationTagRule)[vs[1].(int)]
	}).(DataSetRowLevelPermissionTagConfigurationTagRuleOutput)
}

type DataSourceCredentials struct {
	// The Amazon Resource Name (ARN) of a data source that has the credential pair that you want to use.
	// When the value is not null, the `credentialPair` from the data source in the ARN is used.
	CopySourceArn *string `pulumi:"copySourceArn"`
	// Credential pair. See Credential Pair below for more details.
	CredentialPair *DataSourceCredentialsCredentialPair `pulumi:"credentialPair"`
}

// DataSourceCredentialsInput is an input type that accepts DataSourceCredentialsArgs and DataSourceCredentialsOutput values.
// You can construct a concrete instance of `DataSourceCredentialsInput` via:
//
//	DataSourceCredentialsArgs{...}
type DataSourceCredentialsInput interface {
	pulumi.Input

	ToDataSourceCredentialsOutput() DataSourceCredentialsOutput
	ToDataSourceCredentialsOutputWithContext(context.Context) DataSourceCredentialsOutput
}

type DataSourceCredentialsArgs struct {
	// The Amazon Resource Name (ARN) of a data source that has the credential pair that you want to use.
	// When the value is not null, the `credentialPair` from the data source in the ARN is used.
	CopySourceArn pulumi.StringPtrInput `pulumi:"copySourceArn"`
	// Credential pair. See Credential Pair below for more details.
	CredentialPair DataSourceCredentialsCredentialPairPtrInput `pulumi:"credentialPair"`
}

func (DataSourceCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceCredentials)(nil)).Elem()
}

func (i DataSourceCredentialsArgs) ToDataSourceCredentialsOutput() DataSourceCredentialsOutput {
	return i.ToDataSourceCredentialsOutputWithContext(context.Background())
}

func (i DataSourceCredentialsArgs) ToDataSourceCredentialsOutputWithContext(ctx context.Context) DataSourceCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceCredentialsOutput)
}

func (i DataSourceCredentialsArgs) ToDataSourceCredentialsPtrOutput() DataSourceCredentialsPtrOutput {
	return i.ToDataSourceCredentialsPtrOutputWithContext(context.Background())
}

func (i DataSourceCredentialsArgs) ToDataSourceCredentialsPtrOutputWithContext(ctx context.Context) DataSourceCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceCredentialsOutput).ToDataSourceCredentialsPtrOutputWithContext(ctx)
}

// DataSourceCredentialsPtrInput is an input type that accepts DataSourceCredentialsArgs, DataSourceCredentialsPtr and DataSourceCredentialsPtrOutput values.
// You can construct a concrete instance of `DataSourceCredentialsPtrInput` via:
//
//	        DataSourceCredentialsArgs{...}
//
//	or:
//
//	        nil
type DataSourceCredentialsPtrInput interface {
	pulumi.Input

	ToDataSourceCredentialsPtrOutput() DataSourceCredentialsPtrOutput
	ToDataSourceCredentialsPtrOutputWithContext(context.Context) DataSourceCredentialsPtrOutput
}

type dataSourceCredentialsPtrType DataSourceCredentialsArgs

func DataSourceCredentialsPtr(v *DataSourceCredentialsArgs) DataSourceCredentialsPtrInput {
	return (*dataSourceCredentialsPtrType)(v)
}

func (*dataSourceCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceCredentials)(nil)).Elem()
}

func (i *dataSourceCredentialsPtrType) ToDataSourceCredentialsPtrOutput() DataSourceCredentialsPtrOutput {
	return i.ToDataSourceCredentialsPtrOutputWithContext(context.Background())
}

func (i *dataSourceCredentialsPtrType) ToDataSourceCredentialsPtrOutputWithContext(ctx context.Context) DataSourceCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceCredentialsPtrOutput)
}

type DataSourceCredentialsOutput struct{ *pulumi.OutputState }

func (DataSourceCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceCredentials)(nil)).Elem()
}

func (o DataSourceCredentialsOutput) ToDataSourceCredentialsOutput() DataSourceCredentialsOutput {
	return o
}

func (o DataSourceCredentialsOutput) ToDataSourceCredentialsOutputWithContext(ctx context.Context) DataSourceCredentialsOutput {
	return o
}

func (o DataSourceCredentialsOutput) ToDataSourceCredentialsPtrOutput() DataSourceCredentialsPtrOutput {
	return o.ToDataSourceCredentialsPtrOutputWithContext(context.Background())
}

func (o DataSourceCredentialsOutput) ToDataSourceCredentialsPtrOutputWithContext(ctx context.Context) DataSourceCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceCredentials) *DataSourceCredentials {
		return &v
	}).(DataSourceCredentialsPtrOutput)
}

// The Amazon Resource Name (ARN) of a data source that has the credential pair that you want to use.
// When the value is not null, the `credentialPair` from the data source in the ARN is used.
func (o DataSourceCredentialsOutput) CopySourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceCredentials) *string { return v.CopySourceArn }).(pulumi.StringPtrOutput)
}

// Credential pair. See Credential Pair below for more details.
func (o DataSourceCredentialsOutput) CredentialPair() DataSourceCredentialsCredentialPairPtrOutput {
	return o.ApplyT(func(v DataSourceCredentials) *DataSourceCredentialsCredentialPair { return v.CredentialPair }).(DataSourceCredentialsCredentialPairPtrOutput)
}

type DataSourceCredentialsPtrOutput struct{ *pulumi.OutputState }

func (DataSourceCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceCredentials)(nil)).Elem()
}

func (o DataSourceCredentialsPtrOutput) ToDataSourceCredentialsPtrOutput() DataSourceCredentialsPtrOutput {
	return o
}

func (o DataSourceCredentialsPtrOutput) ToDataSourceCredentialsPtrOutputWithContext(ctx context.Context) DataSourceCredentialsPtrOutput {
	return o
}

func (o DataSourceCredentialsPtrOutput) Elem() DataSourceCredentialsOutput {
	return o.ApplyT(func(v *DataSourceCredentials) DataSourceCredentials {
		if v != nil {
			return *v
		}
		var ret DataSourceCredentials
		return ret
	}).(DataSourceCredentialsOutput)
}

// The Amazon Resource Name (ARN) of a data source that has the credential pair that you want to use.
// When the value is not null, the `credentialPair` from the data source in the ARN is used.
func (o DataSourceCredentialsPtrOutput) CopySourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceCredentials) *string {
		if v == nil {
			return nil
		}
		return v.CopySourceArn
	}).(pulumi.StringPtrOutput)
}

// Credential pair. See Credential Pair below for more details.
func (o DataSourceCredentialsPtrOutput) CredentialPair() DataSourceCredentialsCredentialPairPtrOutput {
	return o.ApplyT(func(v *DataSourceCredentials) *DataSourceCredentialsCredentialPair {
		if v == nil {
			return nil
		}
		return v.CredentialPair
	}).(DataSourceCredentialsCredentialPairPtrOutput)
}

type DataSourceCredentialsCredentialPair struct {
	// Password, maximum length of 1024 characters.
	Password string `pulumi:"password"`
	// User name, maximum length of 64 characters.
	Username string `pulumi:"username"`
}

// DataSourceCredentialsCredentialPairInput is an input type that accepts DataSourceCredentialsCredentialPairArgs and DataSourceCredentialsCredentialPairOutput values.
// You can construct a concrete instance of `DataSourceCredentialsCredentialPairInput` via:
//
//	DataSourceCredentialsCredentialPairArgs{...}
type DataSourceCredentialsCredentialPairInput interface {
	pulumi.Input

	ToDataSourceCredentialsCredentialPairOutput() DataSourceCredentialsCredentialPairOutput
	ToDataSourceCredentialsCredentialPairOutputWithContext(context.Context) DataSourceCredentialsCredentialPairOutput
}

type DataSourceCredentialsCredentialPairArgs struct {
	// Password, maximum length of 1024 characters.
	Password pulumi.StringInput `pulumi:"password"`
	// User name, maximum length of 64 characters.
	Username pulumi.StringInput `pulumi:"username"`
}

func (DataSourceCredentialsCredentialPairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceCredentialsCredentialPair)(nil)).Elem()
}

func (i DataSourceCredentialsCredentialPairArgs) ToDataSourceCredentialsCredentialPairOutput() DataSourceCredentialsCredentialPairOutput {
	return i.ToDataSourceCredentialsCredentialPairOutputWithContext(context.Background())
}

func (i DataSourceCredentialsCredentialPairArgs) ToDataSourceCredentialsCredentialPairOutputWithContext(ctx context.Context) DataSourceCredentialsCredentialPairOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceCredentialsCredentialPairOutput)
}

func (i DataSourceCredentialsCredentialPairArgs) ToDataSourceCredentialsCredentialPairPtrOutput() DataSourceCredentialsCredentialPairPtrOutput {
	return i.ToDataSourceCredentialsCredentialPairPtrOutputWithContext(context.Background())
}

func (i DataSourceCredentialsCredentialPairArgs) ToDataSourceCredentialsCredentialPairPtrOutputWithContext(ctx context.Context) DataSourceCredentialsCredentialPairPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceCredentialsCredentialPairOutput).ToDataSourceCredentialsCredentialPairPtrOutputWithContext(ctx)
}

// DataSourceCredentialsCredentialPairPtrInput is an input type that accepts DataSourceCredentialsCredentialPairArgs, DataSourceCredentialsCredentialPairPtr and DataSourceCredentialsCredentialPairPtrOutput values.
// You can construct a concrete instance of `DataSourceCredentialsCredentialPairPtrInput` via:
//
//	        DataSourceCredentialsCredentialPairArgs{...}
//
//	or:
//
//	        nil
type DataSourceCredentialsCredentialPairPtrInput interface {
	pulumi.Input

	ToDataSourceCredentialsCredentialPairPtrOutput() DataSourceCredentialsCredentialPairPtrOutput
	ToDataSourceCredentialsCredentialPairPtrOutputWithContext(context.Context) DataSourceCredentialsCredentialPairPtrOutput
}

type dataSourceCredentialsCredentialPairPtrType DataSourceCredentialsCredentialPairArgs

func DataSourceCredentialsCredentialPairPtr(v *DataSourceCredentialsCredentialPairArgs) DataSourceCredentialsCredentialPairPtrInput {
	return (*dataSourceCredentialsCredentialPairPtrType)(v)
}

func (*dataSourceCredentialsCredentialPairPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceCredentialsCredentialPair)(nil)).Elem()
}

func (i *dataSourceCredentialsCredentialPairPtrType) ToDataSourceCredentialsCredentialPairPtrOutput() DataSourceCredentialsCredentialPairPtrOutput {
	return i.ToDataSourceCredentialsCredentialPairPtrOutputWithContext(context.Background())
}

func (i *dataSourceCredentialsCredentialPairPtrType) ToDataSourceCredentialsCredentialPairPtrOutputWithContext(ctx context.Context) DataSourceCredentialsCredentialPairPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceCredentialsCredentialPairPtrOutput)
}

type DataSourceCredentialsCredentialPairOutput struct{ *pulumi.OutputState }

func (DataSourceCredentialsCredentialPairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceCredentialsCredentialPair)(nil)).Elem()
}

func (o DataSourceCredentialsCredentialPairOutput) ToDataSourceCredentialsCredentialPairOutput() DataSourceCredentialsCredentialPairOutput {
	return o
}

func (o DataSourceCredentialsCredentialPairOutput) ToDataSourceCredentialsCredentialPairOutputWithContext(ctx context.Context) DataSourceCredentialsCredentialPairOutput {
	return o
}

func (o DataSourceCredentialsCredentialPairOutput) ToDataSourceCredentialsCredentialPairPtrOutput() DataSourceCredentialsCredentialPairPtrOutput {
	return o.ToDataSourceCredentialsCredentialPairPtrOutputWithContext(context.Background())
}

func (o DataSourceCredentialsCredentialPairOutput) ToDataSourceCredentialsCredentialPairPtrOutputWithContext(ctx context.Context) DataSourceCredentialsCredentialPairPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceCredentialsCredentialPair) *DataSourceCredentialsCredentialPair {
		return &v
	}).(DataSourceCredentialsCredentialPairPtrOutput)
}

// Password, maximum length of 1024 characters.
func (o DataSourceCredentialsCredentialPairOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceCredentialsCredentialPair) string { return v.Password }).(pulumi.StringOutput)
}

// User name, maximum length of 64 characters.
func (o DataSourceCredentialsCredentialPairOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceCredentialsCredentialPair) string { return v.Username }).(pulumi.StringOutput)
}

type DataSourceCredentialsCredentialPairPtrOutput struct{ *pulumi.OutputState }

func (DataSourceCredentialsCredentialPairPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceCredentialsCredentialPair)(nil)).Elem()
}

func (o DataSourceCredentialsCredentialPairPtrOutput) ToDataSourceCredentialsCredentialPairPtrOutput() DataSourceCredentialsCredentialPairPtrOutput {
	return o
}

func (o DataSourceCredentialsCredentialPairPtrOutput) ToDataSourceCredentialsCredentialPairPtrOutputWithContext(ctx context.Context) DataSourceCredentialsCredentialPairPtrOutput {
	return o
}

func (o DataSourceCredentialsCredentialPairPtrOutput) Elem() DataSourceCredentialsCredentialPairOutput {
	return o.ApplyT(func(v *DataSourceCredentialsCredentialPair) DataSourceCredentialsCredentialPair {
		if v != nil {
			return *v
		}
		var ret DataSourceCredentialsCredentialPair
		return ret
	}).(DataSourceCredentialsCredentialPairOutput)
}

// Password, maximum length of 1024 characters.
func (o DataSourceCredentialsCredentialPairPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceCredentialsCredentialPair) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// User name, maximum length of 64 characters.
func (o DataSourceCredentialsCredentialPairPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceCredentialsCredentialPair) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type DataSourceParameters struct {
	// Parameters for connecting to Amazon Elasticsearch.
	AmazonElasticsearch *DataSourceParametersAmazonElasticsearch `pulumi:"amazonElasticsearch"`
	// Parameters for connecting to Athena.
	Athena *DataSourceParametersAthena `pulumi:"athena"`
	// Parameters for connecting to Aurora MySQL.
	Aurora *DataSourceParametersAurora `pulumi:"aurora"`
	// Parameters for connecting to Aurora Postgresql.
	AuroraPostgresql *DataSourceParametersAuroraPostgresql `pulumi:"auroraPostgresql"`
	// Parameters for connecting to AWS IOT Analytics.
	AwsIotAnalytics *DataSourceParametersAwsIotAnalytics `pulumi:"awsIotAnalytics"`
	// Parameters for connecting to Jira.
	Jira *DataSourceParametersJira `pulumi:"jira"`
	// Parameters for connecting to MariaDB.
	MariaDb *DataSourceParametersMariaDb `pulumi:"mariaDb"`
	// Parameters for connecting to MySQL.
	Mysql *DataSourceParametersMysql `pulumi:"mysql"`
	// Parameters for connecting to Oracle.
	Oracle *DataSourceParametersOracle `pulumi:"oracle"`
	// Parameters for connecting to Postgresql.
	Postgresql *DataSourceParametersPostgresql `pulumi:"postgresql"`
	// Parameters for connecting to Presto.
	Presto *DataSourceParametersPresto `pulumi:"presto"`
	// Parameters for connecting to RDS.
	Rds *DataSourceParametersRds `pulumi:"rds"`
	// Parameters for connecting to Redshift.
	Redshift *DataSourceParametersRedshift `pulumi:"redshift"`
	// Parameters for connecting to S3.
	S3 *DataSourceParametersS3 `pulumi:"s3"`
	// Parameters for connecting to ServiceNow.
	ServiceNow *DataSourceParametersServiceNow `pulumi:"serviceNow"`
	// Parameters for connecting to Snowflake.
	Snowflake *DataSourceParametersSnowflake `pulumi:"snowflake"`
	// Parameters for connecting to Spark.
	Spark *DataSourceParametersSpark `pulumi:"spark"`
	// Parameters for connecting to SQL Server.
	SqlServer *DataSourceParametersSqlServer `pulumi:"sqlServer"`
	// Parameters for connecting to Teradata.
	Teradata *DataSourceParametersTeradata `pulumi:"teradata"`
	// Parameters for connecting to Twitter.
	Twitter *DataSourceParametersTwitter `pulumi:"twitter"`
}

// DataSourceParametersInput is an input type that accepts DataSourceParametersArgs and DataSourceParametersOutput values.
// You can construct a concrete instance of `DataSourceParametersInput` via:
//
//	DataSourceParametersArgs{...}
type DataSourceParametersInput interface {
	pulumi.Input

	ToDataSourceParametersOutput() DataSourceParametersOutput
	ToDataSourceParametersOutputWithContext(context.Context) DataSourceParametersOutput
}

type DataSourceParametersArgs struct {
	// Parameters for connecting to Amazon Elasticsearch.
	AmazonElasticsearch DataSourceParametersAmazonElasticsearchPtrInput `pulumi:"amazonElasticsearch"`
	// Parameters for connecting to Athena.
	Athena DataSourceParametersAthenaPtrInput `pulumi:"athena"`
	// Parameters for connecting to Aurora MySQL.
	Aurora DataSourceParametersAuroraPtrInput `pulumi:"aurora"`
	// Parameters for connecting to Aurora Postgresql.
	AuroraPostgresql DataSourceParametersAuroraPostgresqlPtrInput `pulumi:"auroraPostgresql"`
	// Parameters for connecting to AWS IOT Analytics.
	AwsIotAnalytics DataSourceParametersAwsIotAnalyticsPtrInput `pulumi:"awsIotAnalytics"`
	// Parameters for connecting to Jira.
	Jira DataSourceParametersJiraPtrInput `pulumi:"jira"`
	// Parameters for connecting to MariaDB.
	MariaDb DataSourceParametersMariaDbPtrInput `pulumi:"mariaDb"`
	// Parameters for connecting to MySQL.
	Mysql DataSourceParametersMysqlPtrInput `pulumi:"mysql"`
	// Parameters for connecting to Oracle.
	Oracle DataSourceParametersOraclePtrInput `pulumi:"oracle"`
	// Parameters for connecting to Postgresql.
	Postgresql DataSourceParametersPostgresqlPtrInput `pulumi:"postgresql"`
	// Parameters for connecting to Presto.
	Presto DataSourceParametersPrestoPtrInput `pulumi:"presto"`
	// Parameters for connecting to RDS.
	Rds DataSourceParametersRdsPtrInput `pulumi:"rds"`
	// Parameters for connecting to Redshift.
	Redshift DataSourceParametersRedshiftPtrInput `pulumi:"redshift"`
	// Parameters for connecting to S3.
	S3 DataSourceParametersS3PtrInput `pulumi:"s3"`
	// Parameters for connecting to ServiceNow.
	ServiceNow DataSourceParametersServiceNowPtrInput `pulumi:"serviceNow"`
	// Parameters for connecting to Snowflake.
	Snowflake DataSourceParametersSnowflakePtrInput `pulumi:"snowflake"`
	// Parameters for connecting to Spark.
	Spark DataSourceParametersSparkPtrInput `pulumi:"spark"`
	// Parameters for connecting to SQL Server.
	SqlServer DataSourceParametersSqlServerPtrInput `pulumi:"sqlServer"`
	// Parameters for connecting to Teradata.
	Teradata DataSourceParametersTeradataPtrInput `pulumi:"teradata"`
	// Parameters for connecting to Twitter.
	Twitter DataSourceParametersTwitterPtrInput `pulumi:"twitter"`
}

func (DataSourceParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParameters)(nil)).Elem()
}

func (i DataSourceParametersArgs) ToDataSourceParametersOutput() DataSourceParametersOutput {
	return i.ToDataSourceParametersOutputWithContext(context.Background())
}

func (i DataSourceParametersArgs) ToDataSourceParametersOutputWithContext(ctx context.Context) DataSourceParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersOutput)
}

func (i DataSourceParametersArgs) ToDataSourceParametersPtrOutput() DataSourceParametersPtrOutput {
	return i.ToDataSourceParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersArgs) ToDataSourceParametersPtrOutputWithContext(ctx context.Context) DataSourceParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersOutput).ToDataSourceParametersPtrOutputWithContext(ctx)
}

// DataSourceParametersPtrInput is an input type that accepts DataSourceParametersArgs, DataSourceParametersPtr and DataSourceParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersPtrInput` via:
//
//	        DataSourceParametersArgs{...}
//
//	or:
//
//	        nil
type DataSourceParametersPtrInput interface {
	pulumi.Input

	ToDataSourceParametersPtrOutput() DataSourceParametersPtrOutput
	ToDataSourceParametersPtrOutputWithContext(context.Context) DataSourceParametersPtrOutput
}

type dataSourceParametersPtrType DataSourceParametersArgs

func DataSourceParametersPtr(v *DataSourceParametersArgs) DataSourceParametersPtrInput {
	return (*dataSourceParametersPtrType)(v)
}

func (*dataSourceParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParameters)(nil)).Elem()
}

func (i *dataSourceParametersPtrType) ToDataSourceParametersPtrOutput() DataSourceParametersPtrOutput {
	return i.ToDataSourceParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersPtrType) ToDataSourceParametersPtrOutputWithContext(ctx context.Context) DataSourceParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersPtrOutput)
}

type DataSourceParametersOutput struct{ *pulumi.OutputState }

func (DataSourceParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParameters)(nil)).Elem()
}

func (o DataSourceParametersOutput) ToDataSourceParametersOutput() DataSourceParametersOutput {
	return o
}

func (o DataSourceParametersOutput) ToDataSourceParametersOutputWithContext(ctx context.Context) DataSourceParametersOutput {
	return o
}

func (o DataSourceParametersOutput) ToDataSourceParametersPtrOutput() DataSourceParametersPtrOutput {
	return o.ToDataSourceParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersOutput) ToDataSourceParametersPtrOutputWithContext(ctx context.Context) DataSourceParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParameters) *DataSourceParameters {
		return &v
	}).(DataSourceParametersPtrOutput)
}

// Parameters for connecting to Amazon Elasticsearch.
func (o DataSourceParametersOutput) AmazonElasticsearch() DataSourceParametersAmazonElasticsearchPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersAmazonElasticsearch { return v.AmazonElasticsearch }).(DataSourceParametersAmazonElasticsearchPtrOutput)
}

// Parameters for connecting to Athena.
func (o DataSourceParametersOutput) Athena() DataSourceParametersAthenaPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersAthena { return v.Athena }).(DataSourceParametersAthenaPtrOutput)
}

// Parameters for connecting to Aurora MySQL.
func (o DataSourceParametersOutput) Aurora() DataSourceParametersAuroraPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersAurora { return v.Aurora }).(DataSourceParametersAuroraPtrOutput)
}

// Parameters for connecting to Aurora Postgresql.
func (o DataSourceParametersOutput) AuroraPostgresql() DataSourceParametersAuroraPostgresqlPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersAuroraPostgresql { return v.AuroraPostgresql }).(DataSourceParametersAuroraPostgresqlPtrOutput)
}

// Parameters for connecting to AWS IOT Analytics.
func (o DataSourceParametersOutput) AwsIotAnalytics() DataSourceParametersAwsIotAnalyticsPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersAwsIotAnalytics { return v.AwsIotAnalytics }).(DataSourceParametersAwsIotAnalyticsPtrOutput)
}

// Parameters for connecting to Jira.
func (o DataSourceParametersOutput) Jira() DataSourceParametersJiraPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersJira { return v.Jira }).(DataSourceParametersJiraPtrOutput)
}

// Parameters for connecting to MariaDB.
func (o DataSourceParametersOutput) MariaDb() DataSourceParametersMariaDbPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersMariaDb { return v.MariaDb }).(DataSourceParametersMariaDbPtrOutput)
}

// Parameters for connecting to MySQL.
func (o DataSourceParametersOutput) Mysql() DataSourceParametersMysqlPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersMysql { return v.Mysql }).(DataSourceParametersMysqlPtrOutput)
}

// Parameters for connecting to Oracle.
func (o DataSourceParametersOutput) Oracle() DataSourceParametersOraclePtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersOracle { return v.Oracle }).(DataSourceParametersOraclePtrOutput)
}

// Parameters for connecting to Postgresql.
func (o DataSourceParametersOutput) Postgresql() DataSourceParametersPostgresqlPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersPostgresql { return v.Postgresql }).(DataSourceParametersPostgresqlPtrOutput)
}

// Parameters for connecting to Presto.
func (o DataSourceParametersOutput) Presto() DataSourceParametersPrestoPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersPresto { return v.Presto }).(DataSourceParametersPrestoPtrOutput)
}

// Parameters for connecting to RDS.
func (o DataSourceParametersOutput) Rds() DataSourceParametersRdsPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersRds { return v.Rds }).(DataSourceParametersRdsPtrOutput)
}

// Parameters for connecting to Redshift.
func (o DataSourceParametersOutput) Redshift() DataSourceParametersRedshiftPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersRedshift { return v.Redshift }).(DataSourceParametersRedshiftPtrOutput)
}

// Parameters for connecting to S3.
func (o DataSourceParametersOutput) S3() DataSourceParametersS3PtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersS3 { return v.S3 }).(DataSourceParametersS3PtrOutput)
}

// Parameters for connecting to ServiceNow.
func (o DataSourceParametersOutput) ServiceNow() DataSourceParametersServiceNowPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersServiceNow { return v.ServiceNow }).(DataSourceParametersServiceNowPtrOutput)
}

// Parameters for connecting to Snowflake.
func (o DataSourceParametersOutput) Snowflake() DataSourceParametersSnowflakePtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersSnowflake { return v.Snowflake }).(DataSourceParametersSnowflakePtrOutput)
}

// Parameters for connecting to Spark.
func (o DataSourceParametersOutput) Spark() DataSourceParametersSparkPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersSpark { return v.Spark }).(DataSourceParametersSparkPtrOutput)
}

// Parameters for connecting to SQL Server.
func (o DataSourceParametersOutput) SqlServer() DataSourceParametersSqlServerPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersSqlServer { return v.SqlServer }).(DataSourceParametersSqlServerPtrOutput)
}

// Parameters for connecting to Teradata.
func (o DataSourceParametersOutput) Teradata() DataSourceParametersTeradataPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersTeradata { return v.Teradata }).(DataSourceParametersTeradataPtrOutput)
}

// Parameters for connecting to Twitter.
func (o DataSourceParametersOutput) Twitter() DataSourceParametersTwitterPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceParametersTwitter { return v.Twitter }).(DataSourceParametersTwitterPtrOutput)
}

type DataSourceParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParameters)(nil)).Elem()
}

func (o DataSourceParametersPtrOutput) ToDataSourceParametersPtrOutput() DataSourceParametersPtrOutput {
	return o
}

func (o DataSourceParametersPtrOutput) ToDataSourceParametersPtrOutputWithContext(ctx context.Context) DataSourceParametersPtrOutput {
	return o
}

func (o DataSourceParametersPtrOutput) Elem() DataSourceParametersOutput {
	return o.ApplyT(func(v *DataSourceParameters) DataSourceParameters {
		if v != nil {
			return *v
		}
		var ret DataSourceParameters
		return ret
	}).(DataSourceParametersOutput)
}

// Parameters for connecting to Amazon Elasticsearch.
func (o DataSourceParametersPtrOutput) AmazonElasticsearch() DataSourceParametersAmazonElasticsearchPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersAmazonElasticsearch {
		if v == nil {
			return nil
		}
		return v.AmazonElasticsearch
	}).(DataSourceParametersAmazonElasticsearchPtrOutput)
}

// Parameters for connecting to Athena.
func (o DataSourceParametersPtrOutput) Athena() DataSourceParametersAthenaPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersAthena {
		if v == nil {
			return nil
		}
		return v.Athena
	}).(DataSourceParametersAthenaPtrOutput)
}

// Parameters for connecting to Aurora MySQL.
func (o DataSourceParametersPtrOutput) Aurora() DataSourceParametersAuroraPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersAurora {
		if v == nil {
			return nil
		}
		return v.Aurora
	}).(DataSourceParametersAuroraPtrOutput)
}

// Parameters for connecting to Aurora Postgresql.
func (o DataSourceParametersPtrOutput) AuroraPostgresql() DataSourceParametersAuroraPostgresqlPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersAuroraPostgresql {
		if v == nil {
			return nil
		}
		return v.AuroraPostgresql
	}).(DataSourceParametersAuroraPostgresqlPtrOutput)
}

// Parameters for connecting to AWS IOT Analytics.
func (o DataSourceParametersPtrOutput) AwsIotAnalytics() DataSourceParametersAwsIotAnalyticsPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersAwsIotAnalytics {
		if v == nil {
			return nil
		}
		return v.AwsIotAnalytics
	}).(DataSourceParametersAwsIotAnalyticsPtrOutput)
}

// Parameters for connecting to Jira.
func (o DataSourceParametersPtrOutput) Jira() DataSourceParametersJiraPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersJira {
		if v == nil {
			return nil
		}
		return v.Jira
	}).(DataSourceParametersJiraPtrOutput)
}

// Parameters for connecting to MariaDB.
func (o DataSourceParametersPtrOutput) MariaDb() DataSourceParametersMariaDbPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersMariaDb {
		if v == nil {
			return nil
		}
		return v.MariaDb
	}).(DataSourceParametersMariaDbPtrOutput)
}

// Parameters for connecting to MySQL.
func (o DataSourceParametersPtrOutput) Mysql() DataSourceParametersMysqlPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersMysql {
		if v == nil {
			return nil
		}
		return v.Mysql
	}).(DataSourceParametersMysqlPtrOutput)
}

// Parameters for connecting to Oracle.
func (o DataSourceParametersPtrOutput) Oracle() DataSourceParametersOraclePtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersOracle {
		if v == nil {
			return nil
		}
		return v.Oracle
	}).(DataSourceParametersOraclePtrOutput)
}

// Parameters for connecting to Postgresql.
func (o DataSourceParametersPtrOutput) Postgresql() DataSourceParametersPostgresqlPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersPostgresql {
		if v == nil {
			return nil
		}
		return v.Postgresql
	}).(DataSourceParametersPostgresqlPtrOutput)
}

// Parameters for connecting to Presto.
func (o DataSourceParametersPtrOutput) Presto() DataSourceParametersPrestoPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersPresto {
		if v == nil {
			return nil
		}
		return v.Presto
	}).(DataSourceParametersPrestoPtrOutput)
}

// Parameters for connecting to RDS.
func (o DataSourceParametersPtrOutput) Rds() DataSourceParametersRdsPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersRds {
		if v == nil {
			return nil
		}
		return v.Rds
	}).(DataSourceParametersRdsPtrOutput)
}

// Parameters for connecting to Redshift.
func (o DataSourceParametersPtrOutput) Redshift() DataSourceParametersRedshiftPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersRedshift {
		if v == nil {
			return nil
		}
		return v.Redshift
	}).(DataSourceParametersRedshiftPtrOutput)
}

// Parameters for connecting to S3.
func (o DataSourceParametersPtrOutput) S3() DataSourceParametersS3PtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersS3 {
		if v == nil {
			return nil
		}
		return v.S3
	}).(DataSourceParametersS3PtrOutput)
}

// Parameters for connecting to ServiceNow.
func (o DataSourceParametersPtrOutput) ServiceNow() DataSourceParametersServiceNowPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersServiceNow {
		if v == nil {
			return nil
		}
		return v.ServiceNow
	}).(DataSourceParametersServiceNowPtrOutput)
}

// Parameters for connecting to Snowflake.
func (o DataSourceParametersPtrOutput) Snowflake() DataSourceParametersSnowflakePtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersSnowflake {
		if v == nil {
			return nil
		}
		return v.Snowflake
	}).(DataSourceParametersSnowflakePtrOutput)
}

// Parameters for connecting to Spark.
func (o DataSourceParametersPtrOutput) Spark() DataSourceParametersSparkPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersSpark {
		if v == nil {
			return nil
		}
		return v.Spark
	}).(DataSourceParametersSparkPtrOutput)
}

// Parameters for connecting to SQL Server.
func (o DataSourceParametersPtrOutput) SqlServer() DataSourceParametersSqlServerPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersSqlServer {
		if v == nil {
			return nil
		}
		return v.SqlServer
	}).(DataSourceParametersSqlServerPtrOutput)
}

// Parameters for connecting to Teradata.
func (o DataSourceParametersPtrOutput) Teradata() DataSourceParametersTeradataPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersTeradata {
		if v == nil {
			return nil
		}
		return v.Teradata
	}).(DataSourceParametersTeradataPtrOutput)
}

// Parameters for connecting to Twitter.
func (o DataSourceParametersPtrOutput) Twitter() DataSourceParametersTwitterPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceParametersTwitter {
		if v == nil {
			return nil
		}
		return v.Twitter
	}).(DataSourceParametersTwitterPtrOutput)
}

type DataSourceParametersAmazonElasticsearch struct {
	// The OpenSearch domain.
	Domain string `pulumi:"domain"`
}

// DataSourceParametersAmazonElasticsearchInput is an input type that accepts DataSourceParametersAmazonElasticsearchArgs and DataSourceParametersAmazonElasticsearchOutput values.
// You can construct a concrete instance of `DataSourceParametersAmazonElasticsearchInput` via:
//
//	DataSourceParametersAmazonElasticsearchArgs{...}
type DataSourceParametersAmazonElasticsearchInput interface {
	pulumi.Input

	ToDataSourceParametersAmazonElasticsearchOutput() DataSourceParametersAmazonElasticsearchOutput
	ToDataSourceParametersAmazonElasticsearchOutputWithContext(context.Context) DataSourceParametersAmazonElasticsearchOutput
}

type DataSourceParametersAmazonElasticsearchArgs struct {
	// The OpenSearch domain.
	Domain pulumi.StringInput `pulumi:"domain"`
}

func (DataSourceParametersAmazonElasticsearchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersAmazonElasticsearch)(nil)).Elem()
}

func (i DataSourceParametersAmazonElasticsearchArgs) ToDataSourceParametersAmazonElasticsearchOutput() DataSourceParametersAmazonElasticsearchOutput {
	return i.ToDataSourceParametersAmazonElasticsearchOutputWithContext(context.Background())
}

func (i DataSourceParametersAmazonElasticsearchArgs) ToDataSourceParametersAmazonElasticsearchOutputWithContext(ctx context.Context) DataSourceParametersAmazonElasticsearchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersAmazonElasticsearchOutput)
}

func (i DataSourceParametersAmazonElasticsearchArgs) ToDataSourceParametersAmazonElasticsearchPtrOutput() DataSourceParametersAmazonElasticsearchPtrOutput {
	return i.ToDataSourceParametersAmazonElasticsearchPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersAmazonElasticsearchArgs) ToDataSourceParametersAmazonElasticsearchPtrOutputWithContext(ctx context.Context) DataSourceParametersAmazonElasticsearchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersAmazonElasticsearchOutput).ToDataSourceParametersAmazonElasticsearchPtrOutputWithContext(ctx)
}

// DataSourceParametersAmazonElasticsearchPtrInput is an input type that accepts DataSourceParametersAmazonElasticsearchArgs, DataSourceParametersAmazonElasticsearchPtr and DataSourceParametersAmazonElasticsearchPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersAmazonElasticsearchPtrInput` via:
//
//	        DataSourceParametersAmazonElasticsearchArgs{...}
//
//	or:
//
//	        nil
type DataSourceParametersAmazonElasticsearchPtrInput interface {
	pulumi.Input

	ToDataSourceParametersAmazonElasticsearchPtrOutput() DataSourceParametersAmazonElasticsearchPtrOutput
	ToDataSourceParametersAmazonElasticsearchPtrOutputWithContext(context.Context) DataSourceParametersAmazonElasticsearchPtrOutput
}

type dataSourceParametersAmazonElasticsearchPtrType DataSourceParametersAmazonElasticsearchArgs

func DataSourceParametersAmazonElasticsearchPtr(v *DataSourceParametersAmazonElasticsearchArgs) DataSourceParametersAmazonElasticsearchPtrInput {
	return (*dataSourceParametersAmazonElasticsearchPtrType)(v)
}

func (*dataSourceParametersAmazonElasticsearchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersAmazonElasticsearch)(nil)).Elem()
}

func (i *dataSourceParametersAmazonElasticsearchPtrType) ToDataSourceParametersAmazonElasticsearchPtrOutput() DataSourceParametersAmazonElasticsearchPtrOutput {
	return i.ToDataSourceParametersAmazonElasticsearchPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersAmazonElasticsearchPtrType) ToDataSourceParametersAmazonElasticsearchPtrOutputWithContext(ctx context.Context) DataSourceParametersAmazonElasticsearchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersAmazonElasticsearchPtrOutput)
}

type DataSourceParametersAmazonElasticsearchOutput struct{ *pulumi.OutputState }

func (DataSourceParametersAmazonElasticsearchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersAmazonElasticsearch)(nil)).Elem()
}

func (o DataSourceParametersAmazonElasticsearchOutput) ToDataSourceParametersAmazonElasticsearchOutput() DataSourceParametersAmazonElasticsearchOutput {
	return o
}

func (o DataSourceParametersAmazonElasticsearchOutput) ToDataSourceParametersAmazonElasticsearchOutputWithContext(ctx context.Context) DataSourceParametersAmazonElasticsearchOutput {
	return o
}

func (o DataSourceParametersAmazonElasticsearchOutput) ToDataSourceParametersAmazonElasticsearchPtrOutput() DataSourceParametersAmazonElasticsearchPtrOutput {
	return o.ToDataSourceParametersAmazonElasticsearchPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersAmazonElasticsearchOutput) ToDataSourceParametersAmazonElasticsearchPtrOutputWithContext(ctx context.Context) DataSourceParametersAmazonElasticsearchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersAmazonElasticsearch) *DataSourceParametersAmazonElasticsearch {
		return &v
	}).(DataSourceParametersAmazonElasticsearchPtrOutput)
}

// The OpenSearch domain.
func (o DataSourceParametersAmazonElasticsearchOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersAmazonElasticsearch) string { return v.Domain }).(pulumi.StringOutput)
}

type DataSourceParametersAmazonElasticsearchPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersAmazonElasticsearchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersAmazonElasticsearch)(nil)).Elem()
}

func (o DataSourceParametersAmazonElasticsearchPtrOutput) ToDataSourceParametersAmazonElasticsearchPtrOutput() DataSourceParametersAmazonElasticsearchPtrOutput {
	return o
}

func (o DataSourceParametersAmazonElasticsearchPtrOutput) ToDataSourceParametersAmazonElasticsearchPtrOutputWithContext(ctx context.Context) DataSourceParametersAmazonElasticsearchPtrOutput {
	return o
}

func (o DataSourceParametersAmazonElasticsearchPtrOutput) Elem() DataSourceParametersAmazonElasticsearchOutput {
	return o.ApplyT(func(v *DataSourceParametersAmazonElasticsearch) DataSourceParametersAmazonElasticsearch {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersAmazonElasticsearch
		return ret
	}).(DataSourceParametersAmazonElasticsearchOutput)
}

// The OpenSearch domain.
func (o DataSourceParametersAmazonElasticsearchPtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersAmazonElasticsearch) *string {
		if v == nil {
			return nil
		}
		return &v.Domain
	}).(pulumi.StringPtrOutput)
}

type DataSourceParametersAthena struct {
	// The work-group to which to connect.
	WorkGroup *string `pulumi:"workGroup"`
}

// DataSourceParametersAthenaInput is an input type that accepts DataSourceParametersAthenaArgs and DataSourceParametersAthenaOutput values.
// You can construct a concrete instance of `DataSourceParametersAthenaInput` via:
//
//	DataSourceParametersAthenaArgs{...}
type DataSourceParametersAthenaInput interface {
	pulumi.Input

	ToDataSourceParametersAthenaOutput() DataSourceParametersAthenaOutput
	ToDataSourceParametersAthenaOutputWithContext(context.Context) DataSourceParametersAthenaOutput
}

type DataSourceParametersAthenaArgs struct {
	// The work-group to which to connect.
	WorkGroup pulumi.StringPtrInput `pulumi:"workGroup"`
}

func (DataSourceParametersAthenaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersAthena)(nil)).Elem()
}

func (i DataSourceParametersAthenaArgs) ToDataSourceParametersAthenaOutput() DataSourceParametersAthenaOutput {
	return i.ToDataSourceParametersAthenaOutputWithContext(context.Background())
}

func (i DataSourceParametersAthenaArgs) ToDataSourceParametersAthenaOutputWithContext(ctx context.Context) DataSourceParametersAthenaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersAthenaOutput)
}

func (i DataSourceParametersAthenaArgs) ToDataSourceParametersAthenaPtrOutput() DataSourceParametersAthenaPtrOutput {
	return i.ToDataSourceParametersAthenaPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersAthenaArgs) ToDataSourceParametersAthenaPtrOutputWithContext(ctx context.Context) DataSourceParametersAthenaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersAthenaOutput).ToDataSourceParametersAthenaPtrOutputWithContext(ctx)
}

// DataSourceParametersAthenaPtrInput is an input type that accepts DataSourceParametersAthenaArgs, DataSourceParametersAthenaPtr and DataSourceParametersAthenaPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersAthenaPtrInput` via:
//
//	        DataSourceParametersAthenaArgs{...}
//
//	or:
//
//	        nil
type DataSourceParametersAthenaPtrInput interface {
	pulumi.Input

	ToDataSourceParametersAthenaPtrOutput() DataSourceParametersAthenaPtrOutput
	ToDataSourceParametersAthenaPtrOutputWithContext(context.Context) DataSourceParametersAthenaPtrOutput
}

type dataSourceParametersAthenaPtrType DataSourceParametersAthenaArgs

func DataSourceParametersAthenaPtr(v *DataSourceParametersAthenaArgs) DataSourceParametersAthenaPtrInput {
	return (*dataSourceParametersAthenaPtrType)(v)
}

func (*dataSourceParametersAthenaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersAthena)(nil)).Elem()
}

func (i *dataSourceParametersAthenaPtrType) ToDataSourceParametersAthenaPtrOutput() DataSourceParametersAthenaPtrOutput {
	return i.ToDataSourceParametersAthenaPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersAthenaPtrType) ToDataSourceParametersAthenaPtrOutputWithContext(ctx context.Context) DataSourceParametersAthenaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersAthenaPtrOutput)
}

type DataSourceParametersAthenaOutput struct{ *pulumi.OutputState }

func (DataSourceParametersAthenaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersAthena)(nil)).Elem()
}

func (o DataSourceParametersAthenaOutput) ToDataSourceParametersAthenaOutput() DataSourceParametersAthenaOutput {
	return o
}

func (o DataSourceParametersAthenaOutput) ToDataSourceParametersAthenaOutputWithContext(ctx context.Context) DataSourceParametersAthenaOutput {
	return o
}

func (o DataSourceParametersAthenaOutput) ToDataSourceParametersAthenaPtrOutput() DataSourceParametersAthenaPtrOutput {
	return o.ToDataSourceParametersAthenaPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersAthenaOutput) ToDataSourceParametersAthenaPtrOutputWithContext(ctx context.Context) DataSourceParametersAthenaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersAthena) *DataSourceParametersAthena {
		return &v
	}).(DataSourceParametersAthenaPtrOutput)
}

// The work-group to which to connect.
func (o DataSourceParametersAthenaOutput) WorkGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceParametersAthena) *string { return v.WorkGroup }).(pulumi.StringPtrOutput)
}

type DataSourceParametersAthenaPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersAthenaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersAthena)(nil)).Elem()
}

func (o DataSourceParametersAthenaPtrOutput) ToDataSourceParametersAthenaPtrOutput() DataSourceParametersAthenaPtrOutput {
	return o
}

func (o DataSourceParametersAthenaPtrOutput) ToDataSourceParametersAthenaPtrOutputWithContext(ctx context.Context) DataSourceParametersAthenaPtrOutput {
	return o
}

func (o DataSourceParametersAthenaPtrOutput) Elem() DataSourceParametersAthenaOutput {
	return o.ApplyT(func(v *DataSourceParametersAthena) DataSourceParametersAthena {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersAthena
		return ret
	}).(DataSourceParametersAthenaOutput)
}

// The work-group to which to connect.
func (o DataSourceParametersAthenaPtrOutput) WorkGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersAthena) *string {
		if v == nil {
			return nil
		}
		return v.WorkGroup
	}).(pulumi.StringPtrOutput)
}

type DataSourceParametersAurora struct {
	// The database to which to connect.
	Database string `pulumi:"database"`
	// The host to which to connect.
	Host string `pulumi:"host"`
	// The port to which to connect.
	Port int `pulumi:"port"`
}

// DataSourceParametersAuroraInput is an input type that accepts DataSourceParametersAuroraArgs and DataSourceParametersAuroraOutput values.
// You can construct a concrete instance of `DataSourceParametersAuroraInput` via:
//
//	DataSourceParametersAuroraArgs{...}
type DataSourceParametersAuroraInput interface {
	pulumi.Input

	ToDataSourceParametersAuroraOutput() DataSourceParametersAuroraOutput
	ToDataSourceParametersAuroraOutputWithContext(context.Context) DataSourceParametersAuroraOutput
}

type DataSourceParametersAuroraArgs struct {
	// The database to which to connect.
	Database pulumi.StringInput `pulumi:"database"`
	// The host to which to connect.
	Host pulumi.StringInput `pulumi:"host"`
	// The port to which to connect.
	Port pulumi.IntInput `pulumi:"port"`
}

func (DataSourceParametersAuroraArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersAurora)(nil)).Elem()
}

func (i DataSourceParametersAuroraArgs) ToDataSourceParametersAuroraOutput() DataSourceParametersAuroraOutput {
	return i.ToDataSourceParametersAuroraOutputWithContext(context.Background())
}

func (i DataSourceParametersAuroraArgs) ToDataSourceParametersAuroraOutputWithContext(ctx context.Context) DataSourceParametersAuroraOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersAuroraOutput)
}

func (i DataSourceParametersAuroraArgs) ToDataSourceParametersAuroraPtrOutput() DataSourceParametersAuroraPtrOutput {
	return i.ToDataSourceParametersAuroraPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersAuroraArgs) ToDataSourceParametersAuroraPtrOutputWithContext(ctx context.Context) DataSourceParametersAuroraPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersAuroraOutput).ToDataSourceParametersAuroraPtrOutputWithContext(ctx)
}

// DataSourceParametersAuroraPtrInput is an input type that accepts DataSourceParametersAuroraArgs, DataSourceParametersAuroraPtr and DataSourceParametersAuroraPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersAuroraPtrInput` via:
//
//	        DataSourceParametersAuroraArgs{...}
//
//	or:
//
//	        nil
type DataSourceParametersAuroraPtrInput interface {
	pulumi.Input

	ToDataSourceParametersAuroraPtrOutput() DataSourceParametersAuroraPtrOutput
	ToDataSourceParametersAuroraPtrOutputWithContext(context.Context) DataSourceParametersAuroraPtrOutput
}

type dataSourceParametersAuroraPtrType DataSourceParametersAuroraArgs

func DataSourceParametersAuroraPtr(v *DataSourceParametersAuroraArgs) DataSourceParametersAuroraPtrInput {
	return (*dataSourceParametersAuroraPtrType)(v)
}

func (*dataSourceParametersAuroraPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersAurora)(nil)).Elem()
}

func (i *dataSourceParametersAuroraPtrType) ToDataSourceParametersAuroraPtrOutput() DataSourceParametersAuroraPtrOutput {
	return i.ToDataSourceParametersAuroraPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersAuroraPtrType) ToDataSourceParametersAuroraPtrOutputWithContext(ctx context.Context) DataSourceParametersAuroraPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersAuroraPtrOutput)
}

type DataSourceParametersAuroraOutput struct{ *pulumi.OutputState }

func (DataSourceParametersAuroraOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersAurora)(nil)).Elem()
}

func (o DataSourceParametersAuroraOutput) ToDataSourceParametersAuroraOutput() DataSourceParametersAuroraOutput {
	return o
}

func (o DataSourceParametersAuroraOutput) ToDataSourceParametersAuroraOutputWithContext(ctx context.Context) DataSourceParametersAuroraOutput {
	return o
}

func (o DataSourceParametersAuroraOutput) ToDataSourceParametersAuroraPtrOutput() DataSourceParametersAuroraPtrOutput {
	return o.ToDataSourceParametersAuroraPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersAuroraOutput) ToDataSourceParametersAuroraPtrOutputWithContext(ctx context.Context) DataSourceParametersAuroraPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersAurora) *DataSourceParametersAurora {
		return &v
	}).(DataSourceParametersAuroraPtrOutput)
}

// The database to which to connect.
func (o DataSourceParametersAuroraOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersAurora) string { return v.Database }).(pulumi.StringOutput)
}

// The host to which to connect.
func (o DataSourceParametersAuroraOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersAurora) string { return v.Host }).(pulumi.StringOutput)
}

// The port to which to connect.
func (o DataSourceParametersAuroraOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v DataSourceParametersAurora) int { return v.Port }).(pulumi.IntOutput)
}

type DataSourceParametersAuroraPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersAuroraPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersAurora)(nil)).Elem()
}

func (o DataSourceParametersAuroraPtrOutput) ToDataSourceParametersAuroraPtrOutput() DataSourceParametersAuroraPtrOutput {
	return o
}

func (o DataSourceParametersAuroraPtrOutput) ToDataSourceParametersAuroraPtrOutputWithContext(ctx context.Context) DataSourceParametersAuroraPtrOutput {
	return o
}

func (o DataSourceParametersAuroraPtrOutput) Elem() DataSourceParametersAuroraOutput {
	return o.ApplyT(func(v *DataSourceParametersAurora) DataSourceParametersAurora {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersAurora
		return ret
	}).(DataSourceParametersAuroraOutput)
}

// The database to which to connect.
func (o DataSourceParametersAuroraPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersAurora) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// The host to which to connect.
func (o DataSourceParametersAuroraPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersAurora) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The port to which to connect.
func (o DataSourceParametersAuroraPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersAurora) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

type DataSourceParametersAuroraPostgresql struct {
	// The database to which to connect.
	Database string `pulumi:"database"`
	// The host to which to connect.
	Host string `pulumi:"host"`
	// The port to which to connect.
	Port int `pulumi:"port"`
}

// DataSourceParametersAuroraPostgresqlInput is an input type that accepts DataSourceParametersAuroraPostgresqlArgs and DataSourceParametersAuroraPostgresqlOutput values.
// You can construct a concrete instance of `DataSourceParametersAuroraPostgresqlInput` via:
//
//	DataSourceParametersAuroraPostgresqlArgs{...}
type DataSourceParametersAuroraPostgresqlInput interface {
	pulumi.Input

	ToDataSourceParametersAuroraPostgresqlOutput() DataSourceParametersAuroraPostgresqlOutput
	ToDataSourceParametersAuroraPostgresqlOutputWithContext(context.Context) DataSourceParametersAuroraPostgresqlOutput
}

type DataSourceParametersAuroraPostgresqlArgs struct {
	// The database to which to connect.
	Database pulumi.StringInput `pulumi:"database"`
	// The host to which to connect.
	Host pulumi.StringInput `pulumi:"host"`
	// The port to which to connect.
	Port pulumi.IntInput `pulumi:"port"`
}

func (DataSourceParametersAuroraPostgresqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersAuroraPostgresql)(nil)).Elem()
}

func (i DataSourceParametersAuroraPostgresqlArgs) ToDataSourceParametersAuroraPostgresqlOutput() DataSourceParametersAuroraPostgresqlOutput {
	return i.ToDataSourceParametersAuroraPostgresqlOutputWithContext(context.Background())
}

func (i DataSourceParametersAuroraPostgresqlArgs) ToDataSourceParametersAuroraPostgresqlOutputWithContext(ctx context.Context) DataSourceParametersAuroraPostgresqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersAuroraPostgresqlOutput)
}

func (i DataSourceParametersAuroraPostgresqlArgs) ToDataSourceParametersAuroraPostgresqlPtrOutput() DataSourceParametersAuroraPostgresqlPtrOutput {
	return i.ToDataSourceParametersAuroraPostgresqlPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersAuroraPostgresqlArgs) ToDataSourceParametersAuroraPostgresqlPtrOutputWithContext(ctx context.Context) DataSourceParametersAuroraPostgresqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersAuroraPostgresqlOutput).ToDataSourceParametersAuroraPostgresqlPtrOutputWithContext(ctx)
}

// DataSourceParametersAuroraPostgresqlPtrInput is an input type that accepts DataSourceParametersAuroraPostgresqlArgs, DataSourceParametersAuroraPostgresqlPtr and DataSourceParametersAuroraPostgresqlPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersAuroraPostgresqlPtrInput` via:
//
//	        DataSourceParametersAuroraPostgresqlArgs{...}
//
//	or:
//
//	        nil
type DataSourceParametersAuroraPostgresqlPtrInput interface {
	pulumi.Input

	ToDataSourceParametersAuroraPostgresqlPtrOutput() DataSourceParametersAuroraPostgresqlPtrOutput
	ToDataSourceParametersAuroraPostgresqlPtrOutputWithContext(context.Context) DataSourceParametersAuroraPostgresqlPtrOutput
}

type dataSourceParametersAuroraPostgresqlPtrType DataSourceParametersAuroraPostgresqlArgs

func DataSourceParametersAuroraPostgresqlPtr(v *DataSourceParametersAuroraPostgresqlArgs) DataSourceParametersAuroraPostgresqlPtrInput {
	return (*dataSourceParametersAuroraPostgresqlPtrType)(v)
}

func (*dataSourceParametersAuroraPostgresqlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersAuroraPostgresql)(nil)).Elem()
}

func (i *dataSourceParametersAuroraPostgresqlPtrType) ToDataSourceParametersAuroraPostgresqlPtrOutput() DataSourceParametersAuroraPostgresqlPtrOutput {
	return i.ToDataSourceParametersAuroraPostgresqlPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersAuroraPostgresqlPtrType) ToDataSourceParametersAuroraPostgresqlPtrOutputWithContext(ctx context.Context) DataSourceParametersAuroraPostgresqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersAuroraPostgresqlPtrOutput)
}

type DataSourceParametersAuroraPostgresqlOutput struct{ *pulumi.OutputState }

func (DataSourceParametersAuroraPostgresqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersAuroraPostgresql)(nil)).Elem()
}

func (o DataSourceParametersAuroraPostgresqlOutput) ToDataSourceParametersAuroraPostgresqlOutput() DataSourceParametersAuroraPostgresqlOutput {
	return o
}

func (o DataSourceParametersAuroraPostgresqlOutput) ToDataSourceParametersAuroraPostgresqlOutputWithContext(ctx context.Context) DataSourceParametersAuroraPostgresqlOutput {
	return o
}

func (o DataSourceParametersAuroraPostgresqlOutput) ToDataSourceParametersAuroraPostgresqlPtrOutput() DataSourceParametersAuroraPostgresqlPtrOutput {
	return o.ToDataSourceParametersAuroraPostgresqlPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersAuroraPostgresqlOutput) ToDataSourceParametersAuroraPostgresqlPtrOutputWithContext(ctx context.Context) DataSourceParametersAuroraPostgresqlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersAuroraPostgresql) *DataSourceParametersAuroraPostgresql {
		return &v
	}).(DataSourceParametersAuroraPostgresqlPtrOutput)
}

// The database to which to connect.
func (o DataSourceParametersAuroraPostgresqlOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersAuroraPostgresql) string { return v.Database }).(pulumi.StringOutput)
}

// The host to which to connect.
func (o DataSourceParametersAuroraPostgresqlOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersAuroraPostgresql) string { return v.Host }).(pulumi.StringOutput)
}

// The port to which to connect.
func (o DataSourceParametersAuroraPostgresqlOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v DataSourceParametersAuroraPostgresql) int { return v.Port }).(pulumi.IntOutput)
}

type DataSourceParametersAuroraPostgresqlPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersAuroraPostgresqlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersAuroraPostgresql)(nil)).Elem()
}

func (o DataSourceParametersAuroraPostgresqlPtrOutput) ToDataSourceParametersAuroraPostgresqlPtrOutput() DataSourceParametersAuroraPostgresqlPtrOutput {
	return o
}

func (o DataSourceParametersAuroraPostgresqlPtrOutput) ToDataSourceParametersAuroraPostgresqlPtrOutputWithContext(ctx context.Context) DataSourceParametersAuroraPostgresqlPtrOutput {
	return o
}

func (o DataSourceParametersAuroraPostgresqlPtrOutput) Elem() DataSourceParametersAuroraPostgresqlOutput {
	return o.ApplyT(func(v *DataSourceParametersAuroraPostgresql) DataSourceParametersAuroraPostgresql {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersAuroraPostgresql
		return ret
	}).(DataSourceParametersAuroraPostgresqlOutput)
}

// The database to which to connect.
func (o DataSourceParametersAuroraPostgresqlPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersAuroraPostgresql) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// The host to which to connect.
func (o DataSourceParametersAuroraPostgresqlPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersAuroraPostgresql) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The port to which to connect.
func (o DataSourceParametersAuroraPostgresqlPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersAuroraPostgresql) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

type DataSourceParametersAwsIotAnalytics struct {
	// The name of the data set to which to connect.
	DataSetName string `pulumi:"dataSetName"`
}

// DataSourceParametersAwsIotAnalyticsInput is an input type that accepts DataSourceParametersAwsIotAnalyticsArgs and DataSourceParametersAwsIotAnalyticsOutput values.
// You can construct a concrete instance of `DataSourceParametersAwsIotAnalyticsInput` via:
//
//	DataSourceParametersAwsIotAnalyticsArgs{...}
type DataSourceParametersAwsIotAnalyticsInput interface {
	pulumi.Input

	ToDataSourceParametersAwsIotAnalyticsOutput() DataSourceParametersAwsIotAnalyticsOutput
	ToDataSourceParametersAwsIotAnalyticsOutputWithContext(context.Context) DataSourceParametersAwsIotAnalyticsOutput
}

type DataSourceParametersAwsIotAnalyticsArgs struct {
	// The name of the data set to which to connect.
	DataSetName pulumi.StringInput `pulumi:"dataSetName"`
}

func (DataSourceParametersAwsIotAnalyticsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersAwsIotAnalytics)(nil)).Elem()
}

func (i DataSourceParametersAwsIotAnalyticsArgs) ToDataSourceParametersAwsIotAnalyticsOutput() DataSourceParametersAwsIotAnalyticsOutput {
	return i.ToDataSourceParametersAwsIotAnalyticsOutputWithContext(context.Background())
}

func (i DataSourceParametersAwsIotAnalyticsArgs) ToDataSourceParametersAwsIotAnalyticsOutputWithContext(ctx context.Context) DataSourceParametersAwsIotAnalyticsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersAwsIotAnalyticsOutput)
}

func (i DataSourceParametersAwsIotAnalyticsArgs) ToDataSourceParametersAwsIotAnalyticsPtrOutput() DataSourceParametersAwsIotAnalyticsPtrOutput {
	return i.ToDataSourceParametersAwsIotAnalyticsPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersAwsIotAnalyticsArgs) ToDataSourceParametersAwsIotAnalyticsPtrOutputWithContext(ctx context.Context) DataSourceParametersAwsIotAnalyticsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersAwsIotAnalyticsOutput).ToDataSourceParametersAwsIotAnalyticsPtrOutputWithContext(ctx)
}

// DataSourceParametersAwsIotAnalyticsPtrInput is an input type that accepts DataSourceParametersAwsIotAnalyticsArgs, DataSourceParametersAwsIotAnalyticsPtr and DataSourceParametersAwsIotAnalyticsPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersAwsIotAnalyticsPtrInput` via:
//
//	        DataSourceParametersAwsIotAnalyticsArgs{...}
//
//	or:
//
//	        nil
type DataSourceParametersAwsIotAnalyticsPtrInput interface {
	pulumi.Input

	ToDataSourceParametersAwsIotAnalyticsPtrOutput() DataSourceParametersAwsIotAnalyticsPtrOutput
	ToDataSourceParametersAwsIotAnalyticsPtrOutputWithContext(context.Context) DataSourceParametersAwsIotAnalyticsPtrOutput
}

type dataSourceParametersAwsIotAnalyticsPtrType DataSourceParametersAwsIotAnalyticsArgs

func DataSourceParametersAwsIotAnalyticsPtr(v *DataSourceParametersAwsIotAnalyticsArgs) DataSourceParametersAwsIotAnalyticsPtrInput {
	return (*dataSourceParametersAwsIotAnalyticsPtrType)(v)
}

func (*dataSourceParametersAwsIotAnalyticsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersAwsIotAnalytics)(nil)).Elem()
}

func (i *dataSourceParametersAwsIotAnalyticsPtrType) ToDataSourceParametersAwsIotAnalyticsPtrOutput() DataSourceParametersAwsIotAnalyticsPtrOutput {
	return i.ToDataSourceParametersAwsIotAnalyticsPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersAwsIotAnalyticsPtrType) ToDataSourceParametersAwsIotAnalyticsPtrOutputWithContext(ctx context.Context) DataSourceParametersAwsIotAnalyticsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersAwsIotAnalyticsPtrOutput)
}

type DataSourceParametersAwsIotAnalyticsOutput struct{ *pulumi.OutputState }

func (DataSourceParametersAwsIotAnalyticsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersAwsIotAnalytics)(nil)).Elem()
}

func (o DataSourceParametersAwsIotAnalyticsOutput) ToDataSourceParametersAwsIotAnalyticsOutput() DataSourceParametersAwsIotAnalyticsOutput {
	return o
}

func (o DataSourceParametersAwsIotAnalyticsOutput) ToDataSourceParametersAwsIotAnalyticsOutputWithContext(ctx context.Context) DataSourceParametersAwsIotAnalyticsOutput {
	return o
}

func (o DataSourceParametersAwsIotAnalyticsOutput) ToDataSourceParametersAwsIotAnalyticsPtrOutput() DataSourceParametersAwsIotAnalyticsPtrOutput {
	return o.ToDataSourceParametersAwsIotAnalyticsPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersAwsIotAnalyticsOutput) ToDataSourceParametersAwsIotAnalyticsPtrOutputWithContext(ctx context.Context) DataSourceParametersAwsIotAnalyticsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersAwsIotAnalytics) *DataSourceParametersAwsIotAnalytics {
		return &v
	}).(DataSourceParametersAwsIotAnalyticsPtrOutput)
}

// The name of the data set to which to connect.
func (o DataSourceParametersAwsIotAnalyticsOutput) DataSetName() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersAwsIotAnalytics) string { return v.DataSetName }).(pulumi.StringOutput)
}

type DataSourceParametersAwsIotAnalyticsPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersAwsIotAnalyticsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersAwsIotAnalytics)(nil)).Elem()
}

func (o DataSourceParametersAwsIotAnalyticsPtrOutput) ToDataSourceParametersAwsIotAnalyticsPtrOutput() DataSourceParametersAwsIotAnalyticsPtrOutput {
	return o
}

func (o DataSourceParametersAwsIotAnalyticsPtrOutput) ToDataSourceParametersAwsIotAnalyticsPtrOutputWithContext(ctx context.Context) DataSourceParametersAwsIotAnalyticsPtrOutput {
	return o
}

func (o DataSourceParametersAwsIotAnalyticsPtrOutput) Elem() DataSourceParametersAwsIotAnalyticsOutput {
	return o.ApplyT(func(v *DataSourceParametersAwsIotAnalytics) DataSourceParametersAwsIotAnalytics {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersAwsIotAnalytics
		return ret
	}).(DataSourceParametersAwsIotAnalyticsOutput)
}

// The name of the data set to which to connect.
func (o DataSourceParametersAwsIotAnalyticsPtrOutput) DataSetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersAwsIotAnalytics) *string {
		if v == nil {
			return nil
		}
		return &v.DataSetName
	}).(pulumi.StringPtrOutput)
}

type DataSourceParametersJira struct {
	// The base URL of the Jira instance's site to which to connect.
	SiteBaseUrl string `pulumi:"siteBaseUrl"`
}

// DataSourceParametersJiraInput is an input type that accepts DataSourceParametersJiraArgs and DataSourceParametersJiraOutput values.
// You can construct a concrete instance of `DataSourceParametersJiraInput` via:
//
//	DataSourceParametersJiraArgs{...}
type DataSourceParametersJiraInput interface {
	pulumi.Input

	ToDataSourceParametersJiraOutput() DataSourceParametersJiraOutput
	ToDataSourceParametersJiraOutputWithContext(context.Context) DataSourceParametersJiraOutput
}

type DataSourceParametersJiraArgs struct {
	// The base URL of the Jira instance's site to which to connect.
	SiteBaseUrl pulumi.StringInput `pulumi:"siteBaseUrl"`
}

func (DataSourceParametersJiraArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersJira)(nil)).Elem()
}

func (i DataSourceParametersJiraArgs) ToDataSourceParametersJiraOutput() DataSourceParametersJiraOutput {
	return i.ToDataSourceParametersJiraOutputWithContext(context.Background())
}

func (i DataSourceParametersJiraArgs) ToDataSourceParametersJiraOutputWithContext(ctx context.Context) DataSourceParametersJiraOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersJiraOutput)
}

func (i DataSourceParametersJiraArgs) ToDataSourceParametersJiraPtrOutput() DataSourceParametersJiraPtrOutput {
	return i.ToDataSourceParametersJiraPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersJiraArgs) ToDataSourceParametersJiraPtrOutputWithContext(ctx context.Context) DataSourceParametersJiraPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersJiraOutput).ToDataSourceParametersJiraPtrOutputWithContext(ctx)
}

// DataSourceParametersJiraPtrInput is an input type that accepts DataSourceParametersJiraArgs, DataSourceParametersJiraPtr and DataSourceParametersJiraPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersJiraPtrInput` via:
//
//	        DataSourceParametersJiraArgs{...}
//
//	or:
//
//	        nil
type DataSourceParametersJiraPtrInput interface {
	pulumi.Input

	ToDataSourceParametersJiraPtrOutput() DataSourceParametersJiraPtrOutput
	ToDataSourceParametersJiraPtrOutputWithContext(context.Context) DataSourceParametersJiraPtrOutput
}

type dataSourceParametersJiraPtrType DataSourceParametersJiraArgs

func DataSourceParametersJiraPtr(v *DataSourceParametersJiraArgs) DataSourceParametersJiraPtrInput {
	return (*dataSourceParametersJiraPtrType)(v)
}

func (*dataSourceParametersJiraPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersJira)(nil)).Elem()
}

func (i *dataSourceParametersJiraPtrType) ToDataSourceParametersJiraPtrOutput() DataSourceParametersJiraPtrOutput {
	return i.ToDataSourceParametersJiraPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersJiraPtrType) ToDataSourceParametersJiraPtrOutputWithContext(ctx context.Context) DataSourceParametersJiraPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersJiraPtrOutput)
}

type DataSourceParametersJiraOutput struct{ *pulumi.OutputState }

func (DataSourceParametersJiraOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersJira)(nil)).Elem()
}

func (o DataSourceParametersJiraOutput) ToDataSourceParametersJiraOutput() DataSourceParametersJiraOutput {
	return o
}

func (o DataSourceParametersJiraOutput) ToDataSourceParametersJiraOutputWithContext(ctx context.Context) DataSourceParametersJiraOutput {
	return o
}

func (o DataSourceParametersJiraOutput) ToDataSourceParametersJiraPtrOutput() DataSourceParametersJiraPtrOutput {
	return o.ToDataSourceParametersJiraPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersJiraOutput) ToDataSourceParametersJiraPtrOutputWithContext(ctx context.Context) DataSourceParametersJiraPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersJira) *DataSourceParametersJira {
		return &v
	}).(DataSourceParametersJiraPtrOutput)
}

// The base URL of the Jira instance's site to which to connect.
func (o DataSourceParametersJiraOutput) SiteBaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersJira) string { return v.SiteBaseUrl }).(pulumi.StringOutput)
}

type DataSourceParametersJiraPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersJiraPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersJira)(nil)).Elem()
}

func (o DataSourceParametersJiraPtrOutput) ToDataSourceParametersJiraPtrOutput() DataSourceParametersJiraPtrOutput {
	return o
}

func (o DataSourceParametersJiraPtrOutput) ToDataSourceParametersJiraPtrOutputWithContext(ctx context.Context) DataSourceParametersJiraPtrOutput {
	return o
}

func (o DataSourceParametersJiraPtrOutput) Elem() DataSourceParametersJiraOutput {
	return o.ApplyT(func(v *DataSourceParametersJira) DataSourceParametersJira {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersJira
		return ret
	}).(DataSourceParametersJiraOutput)
}

// The base URL of the Jira instance's site to which to connect.
func (o DataSourceParametersJiraPtrOutput) SiteBaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersJira) *string {
		if v == nil {
			return nil
		}
		return &v.SiteBaseUrl
	}).(pulumi.StringPtrOutput)
}

type DataSourceParametersMariaDb struct {
	// The database to which to connect.
	Database string `pulumi:"database"`
	// The host to which to connect.
	Host string `pulumi:"host"`
	// The port to which to connect.
	Port int `pulumi:"port"`
}

// DataSourceParametersMariaDbInput is an input type that accepts DataSourceParametersMariaDbArgs and DataSourceParametersMariaDbOutput values.
// You can construct a concrete instance of `DataSourceParametersMariaDbInput` via:
//
//	DataSourceParametersMariaDbArgs{...}
type DataSourceParametersMariaDbInput interface {
	pulumi.Input

	ToDataSourceParametersMariaDbOutput() DataSourceParametersMariaDbOutput
	ToDataSourceParametersMariaDbOutputWithContext(context.Context) DataSourceParametersMariaDbOutput
}

type DataSourceParametersMariaDbArgs struct {
	// The database to which to connect.
	Database pulumi.StringInput `pulumi:"database"`
	// The host to which to connect.
	Host pulumi.StringInput `pulumi:"host"`
	// The port to which to connect.
	Port pulumi.IntInput `pulumi:"port"`
}

func (DataSourceParametersMariaDbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersMariaDb)(nil)).Elem()
}

func (i DataSourceParametersMariaDbArgs) ToDataSourceParametersMariaDbOutput() DataSourceParametersMariaDbOutput {
	return i.ToDataSourceParametersMariaDbOutputWithContext(context.Background())
}

func (i DataSourceParametersMariaDbArgs) ToDataSourceParametersMariaDbOutputWithContext(ctx context.Context) DataSourceParametersMariaDbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersMariaDbOutput)
}

func (i DataSourceParametersMariaDbArgs) ToDataSourceParametersMariaDbPtrOutput() DataSourceParametersMariaDbPtrOutput {
	return i.ToDataSourceParametersMariaDbPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersMariaDbArgs) ToDataSourceParametersMariaDbPtrOutputWithContext(ctx context.Context) DataSourceParametersMariaDbPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersMariaDbOutput).ToDataSourceParametersMariaDbPtrOutputWithContext(ctx)
}

// DataSourceParametersMariaDbPtrInput is an input type that accepts DataSourceParametersMariaDbArgs, DataSourceParametersMariaDbPtr and DataSourceParametersMariaDbPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersMariaDbPtrInput` via:
//
//	        DataSourceParametersMariaDbArgs{...}
//
//	or:
//
//	        nil
type DataSourceParametersMariaDbPtrInput interface {
	pulumi.Input

	ToDataSourceParametersMariaDbPtrOutput() DataSourceParametersMariaDbPtrOutput
	ToDataSourceParametersMariaDbPtrOutputWithContext(context.Context) DataSourceParametersMariaDbPtrOutput
}

type dataSourceParametersMariaDbPtrType DataSourceParametersMariaDbArgs

func DataSourceParametersMariaDbPtr(v *DataSourceParametersMariaDbArgs) DataSourceParametersMariaDbPtrInput {
	return (*dataSourceParametersMariaDbPtrType)(v)
}

func (*dataSourceParametersMariaDbPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersMariaDb)(nil)).Elem()
}

func (i *dataSourceParametersMariaDbPtrType) ToDataSourceParametersMariaDbPtrOutput() DataSourceParametersMariaDbPtrOutput {
	return i.ToDataSourceParametersMariaDbPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersMariaDbPtrType) ToDataSourceParametersMariaDbPtrOutputWithContext(ctx context.Context) DataSourceParametersMariaDbPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersMariaDbPtrOutput)
}

type DataSourceParametersMariaDbOutput struct{ *pulumi.OutputState }

func (DataSourceParametersMariaDbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersMariaDb)(nil)).Elem()
}

func (o DataSourceParametersMariaDbOutput) ToDataSourceParametersMariaDbOutput() DataSourceParametersMariaDbOutput {
	return o
}

func (o DataSourceParametersMariaDbOutput) ToDataSourceParametersMariaDbOutputWithContext(ctx context.Context) DataSourceParametersMariaDbOutput {
	return o
}

func (o DataSourceParametersMariaDbOutput) ToDataSourceParametersMariaDbPtrOutput() DataSourceParametersMariaDbPtrOutput {
	return o.ToDataSourceParametersMariaDbPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersMariaDbOutput) ToDataSourceParametersMariaDbPtrOutputWithContext(ctx context.Context) DataSourceParametersMariaDbPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersMariaDb) *DataSourceParametersMariaDb {
		return &v
	}).(DataSourceParametersMariaDbPtrOutput)
}

// The database to which to connect.
func (o DataSourceParametersMariaDbOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersMariaDb) string { return v.Database }).(pulumi.StringOutput)
}

// The host to which to connect.
func (o DataSourceParametersMariaDbOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersMariaDb) string { return v.Host }).(pulumi.StringOutput)
}

// The port to which to connect.
func (o DataSourceParametersMariaDbOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v DataSourceParametersMariaDb) int { return v.Port }).(pulumi.IntOutput)
}

type DataSourceParametersMariaDbPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersMariaDbPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersMariaDb)(nil)).Elem()
}

func (o DataSourceParametersMariaDbPtrOutput) ToDataSourceParametersMariaDbPtrOutput() DataSourceParametersMariaDbPtrOutput {
	return o
}

func (o DataSourceParametersMariaDbPtrOutput) ToDataSourceParametersMariaDbPtrOutputWithContext(ctx context.Context) DataSourceParametersMariaDbPtrOutput {
	return o
}

func (o DataSourceParametersMariaDbPtrOutput) Elem() DataSourceParametersMariaDbOutput {
	return o.ApplyT(func(v *DataSourceParametersMariaDb) DataSourceParametersMariaDb {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersMariaDb
		return ret
	}).(DataSourceParametersMariaDbOutput)
}

// The database to which to connect.
func (o DataSourceParametersMariaDbPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersMariaDb) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// The host to which to connect.
func (o DataSourceParametersMariaDbPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersMariaDb) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The port to which to connect.
func (o DataSourceParametersMariaDbPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersMariaDb) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

type DataSourceParametersMysql struct {
	// The database to which to connect.
	Database string `pulumi:"database"`
	// The host to which to connect.
	Host string `pulumi:"host"`
	// The port to which to connect.
	Port int `pulumi:"port"`
}

// DataSourceParametersMysqlInput is an input type that accepts DataSourceParametersMysqlArgs and DataSourceParametersMysqlOutput values.
// You can construct a concrete instance of `DataSourceParametersMysqlInput` via:
//
//	DataSourceParametersMysqlArgs{...}
type DataSourceParametersMysqlInput interface {
	pulumi.Input

	ToDataSourceParametersMysqlOutput() DataSourceParametersMysqlOutput
	ToDataSourceParametersMysqlOutputWithContext(context.Context) DataSourceParametersMysqlOutput
}

type DataSourceParametersMysqlArgs struct {
	// The database to which to connect.
	Database pulumi.StringInput `pulumi:"database"`
	// The host to which to connect.
	Host pulumi.StringInput `pulumi:"host"`
	// The port to which to connect.
	Port pulumi.IntInput `pulumi:"port"`
}

func (DataSourceParametersMysqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersMysql)(nil)).Elem()
}

func (i DataSourceParametersMysqlArgs) ToDataSourceParametersMysqlOutput() DataSourceParametersMysqlOutput {
	return i.ToDataSourceParametersMysqlOutputWithContext(context.Background())
}

func (i DataSourceParametersMysqlArgs) ToDataSourceParametersMysqlOutputWithContext(ctx context.Context) DataSourceParametersMysqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersMysqlOutput)
}

func (i DataSourceParametersMysqlArgs) ToDataSourceParametersMysqlPtrOutput() DataSourceParametersMysqlPtrOutput {
	return i.ToDataSourceParametersMysqlPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersMysqlArgs) ToDataSourceParametersMysqlPtrOutputWithContext(ctx context.Context) DataSourceParametersMysqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersMysqlOutput).ToDataSourceParametersMysqlPtrOutputWithContext(ctx)
}

// DataSourceParametersMysqlPtrInput is an input type that accepts DataSourceParametersMysqlArgs, DataSourceParametersMysqlPtr and DataSourceParametersMysqlPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersMysqlPtrInput` via:
//
//	        DataSourceParametersMysqlArgs{...}
//
//	or:
//
//	        nil
type DataSourceParametersMysqlPtrInput interface {
	pulumi.Input

	ToDataSourceParametersMysqlPtrOutput() DataSourceParametersMysqlPtrOutput
	ToDataSourceParametersMysqlPtrOutputWithContext(context.Context) DataSourceParametersMysqlPtrOutput
}

type dataSourceParametersMysqlPtrType DataSourceParametersMysqlArgs

func DataSourceParametersMysqlPtr(v *DataSourceParametersMysqlArgs) DataSourceParametersMysqlPtrInput {
	return (*dataSourceParametersMysqlPtrType)(v)
}

func (*dataSourceParametersMysqlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersMysql)(nil)).Elem()
}

func (i *dataSourceParametersMysqlPtrType) ToDataSourceParametersMysqlPtrOutput() DataSourceParametersMysqlPtrOutput {
	return i.ToDataSourceParametersMysqlPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersMysqlPtrType) ToDataSourceParametersMysqlPtrOutputWithContext(ctx context.Context) DataSourceParametersMysqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersMysqlPtrOutput)
}

type DataSourceParametersMysqlOutput struct{ *pulumi.OutputState }

func (DataSourceParametersMysqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersMysql)(nil)).Elem()
}

func (o DataSourceParametersMysqlOutput) ToDataSourceParametersMysqlOutput() DataSourceParametersMysqlOutput {
	return o
}

func (o DataSourceParametersMysqlOutput) ToDataSourceParametersMysqlOutputWithContext(ctx context.Context) DataSourceParametersMysqlOutput {
	return o
}

func (o DataSourceParametersMysqlOutput) ToDataSourceParametersMysqlPtrOutput() DataSourceParametersMysqlPtrOutput {
	return o.ToDataSourceParametersMysqlPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersMysqlOutput) ToDataSourceParametersMysqlPtrOutputWithContext(ctx context.Context) DataSourceParametersMysqlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersMysql) *DataSourceParametersMysql {
		return &v
	}).(DataSourceParametersMysqlPtrOutput)
}

// The database to which to connect.
func (o DataSourceParametersMysqlOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersMysql) string { return v.Database }).(pulumi.StringOutput)
}

// The host to which to connect.
func (o DataSourceParametersMysqlOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersMysql) string { return v.Host }).(pulumi.StringOutput)
}

// The port to which to connect.
func (o DataSourceParametersMysqlOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v DataSourceParametersMysql) int { return v.Port }).(pulumi.IntOutput)
}

type DataSourceParametersMysqlPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersMysqlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersMysql)(nil)).Elem()
}

func (o DataSourceParametersMysqlPtrOutput) ToDataSourceParametersMysqlPtrOutput() DataSourceParametersMysqlPtrOutput {
	return o
}

func (o DataSourceParametersMysqlPtrOutput) ToDataSourceParametersMysqlPtrOutputWithContext(ctx context.Context) DataSourceParametersMysqlPtrOutput {
	return o
}

func (o DataSourceParametersMysqlPtrOutput) Elem() DataSourceParametersMysqlOutput {
	return o.ApplyT(func(v *DataSourceParametersMysql) DataSourceParametersMysql {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersMysql
		return ret
	}).(DataSourceParametersMysqlOutput)
}

// The database to which to connect.
func (o DataSourceParametersMysqlPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersMysql) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// The host to which to connect.
func (o DataSourceParametersMysqlPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersMysql) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The port to which to connect.
func (o DataSourceParametersMysqlPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersMysql) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

type DataSourceParametersOracle struct {
	// The database to which to connect.
	Database string `pulumi:"database"`
	// The host to which to connect.
	Host string `pulumi:"host"`
	// The port to which to connect.
	Port int `pulumi:"port"`
}

// DataSourceParametersOracleInput is an input type that accepts DataSourceParametersOracleArgs and DataSourceParametersOracleOutput values.
// You can construct a concrete instance of `DataSourceParametersOracleInput` via:
//
//	DataSourceParametersOracleArgs{...}
type DataSourceParametersOracleInput interface {
	pulumi.Input

	ToDataSourceParametersOracleOutput() DataSourceParametersOracleOutput
	ToDataSourceParametersOracleOutputWithContext(context.Context) DataSourceParametersOracleOutput
}

type DataSourceParametersOracleArgs struct {
	// The database to which to connect.
	Database pulumi.StringInput `pulumi:"database"`
	// The host to which to connect.
	Host pulumi.StringInput `pulumi:"host"`
	// The port to which to connect.
	Port pulumi.IntInput `pulumi:"port"`
}

func (DataSourceParametersOracleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersOracle)(nil)).Elem()
}

func (i DataSourceParametersOracleArgs) ToDataSourceParametersOracleOutput() DataSourceParametersOracleOutput {
	return i.ToDataSourceParametersOracleOutputWithContext(context.Background())
}

func (i DataSourceParametersOracleArgs) ToDataSourceParametersOracleOutputWithContext(ctx context.Context) DataSourceParametersOracleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersOracleOutput)
}

func (i DataSourceParametersOracleArgs) ToDataSourceParametersOraclePtrOutput() DataSourceParametersOraclePtrOutput {
	return i.ToDataSourceParametersOraclePtrOutputWithContext(context.Background())
}

func (i DataSourceParametersOracleArgs) ToDataSourceParametersOraclePtrOutputWithContext(ctx context.Context) DataSourceParametersOraclePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersOracleOutput).ToDataSourceParametersOraclePtrOutputWithContext(ctx)
}

// DataSourceParametersOraclePtrInput is an input type that accepts DataSourceParametersOracleArgs, DataSourceParametersOraclePtr and DataSourceParametersOraclePtrOutput values.
// You can construct a concrete instance of `DataSourceParametersOraclePtrInput` via:
//
//	        DataSourceParametersOracleArgs{...}
//
//	or:
//
//	        nil
type DataSourceParametersOraclePtrInput interface {
	pulumi.Input

	ToDataSourceParametersOraclePtrOutput() DataSourceParametersOraclePtrOutput
	ToDataSourceParametersOraclePtrOutputWithContext(context.Context) DataSourceParametersOraclePtrOutput
}

type dataSourceParametersOraclePtrType DataSourceParametersOracleArgs

func DataSourceParametersOraclePtr(v *DataSourceParametersOracleArgs) DataSourceParametersOraclePtrInput {
	return (*dataSourceParametersOraclePtrType)(v)
}

func (*dataSourceParametersOraclePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersOracle)(nil)).Elem()
}

func (i *dataSourceParametersOraclePtrType) ToDataSourceParametersOraclePtrOutput() DataSourceParametersOraclePtrOutput {
	return i.ToDataSourceParametersOraclePtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersOraclePtrType) ToDataSourceParametersOraclePtrOutputWithContext(ctx context.Context) DataSourceParametersOraclePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersOraclePtrOutput)
}

type DataSourceParametersOracleOutput struct{ *pulumi.OutputState }

func (DataSourceParametersOracleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersOracle)(nil)).Elem()
}

func (o DataSourceParametersOracleOutput) ToDataSourceParametersOracleOutput() DataSourceParametersOracleOutput {
	return o
}

func (o DataSourceParametersOracleOutput) ToDataSourceParametersOracleOutputWithContext(ctx context.Context) DataSourceParametersOracleOutput {
	return o
}

func (o DataSourceParametersOracleOutput) ToDataSourceParametersOraclePtrOutput() DataSourceParametersOraclePtrOutput {
	return o.ToDataSourceParametersOraclePtrOutputWithContext(context.Background())
}

func (o DataSourceParametersOracleOutput) ToDataSourceParametersOraclePtrOutputWithContext(ctx context.Context) DataSourceParametersOraclePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersOracle) *DataSourceParametersOracle {
		return &v
	}).(DataSourceParametersOraclePtrOutput)
}

// The database to which to connect.
func (o DataSourceParametersOracleOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersOracle) string { return v.Database }).(pulumi.StringOutput)
}

// The host to which to connect.
func (o DataSourceParametersOracleOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersOracle) string { return v.Host }).(pulumi.StringOutput)
}

// The port to which to connect.
func (o DataSourceParametersOracleOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v DataSourceParametersOracle) int { return v.Port }).(pulumi.IntOutput)
}

type DataSourceParametersOraclePtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersOraclePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersOracle)(nil)).Elem()
}

func (o DataSourceParametersOraclePtrOutput) ToDataSourceParametersOraclePtrOutput() DataSourceParametersOraclePtrOutput {
	return o
}

func (o DataSourceParametersOraclePtrOutput) ToDataSourceParametersOraclePtrOutputWithContext(ctx context.Context) DataSourceParametersOraclePtrOutput {
	return o
}

func (o DataSourceParametersOraclePtrOutput) Elem() DataSourceParametersOracleOutput {
	return o.ApplyT(func(v *DataSourceParametersOracle) DataSourceParametersOracle {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersOracle
		return ret
	}).(DataSourceParametersOracleOutput)
}

// The database to which to connect.
func (o DataSourceParametersOraclePtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersOracle) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// The host to which to connect.
func (o DataSourceParametersOraclePtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersOracle) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The port to which to connect.
func (o DataSourceParametersOraclePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersOracle) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

type DataSourceParametersPostgresql struct {
	// The database to which to connect.
	Database string `pulumi:"database"`
	// The host to which to connect.
	Host string `pulumi:"host"`
	// The port to which to connect.
	Port int `pulumi:"port"`
}

// DataSourceParametersPostgresqlInput is an input type that accepts DataSourceParametersPostgresqlArgs and DataSourceParametersPostgresqlOutput values.
// You can construct a concrete instance of `DataSourceParametersPostgresqlInput` via:
//
//	DataSourceParametersPostgresqlArgs{...}
type DataSourceParametersPostgresqlInput interface {
	pulumi.Input

	ToDataSourceParametersPostgresqlOutput() DataSourceParametersPostgresqlOutput
	ToDataSourceParametersPostgresqlOutputWithContext(context.Context) DataSourceParametersPostgresqlOutput
}

type DataSourceParametersPostgresqlArgs struct {
	// The database to which to connect.
	Database pulumi.StringInput `pulumi:"database"`
	// The host to which to connect.
	Host pulumi.StringInput `pulumi:"host"`
	// The port to which to connect.
	Port pulumi.IntInput `pulumi:"port"`
}

func (DataSourceParametersPostgresqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersPostgresql)(nil)).Elem()
}

func (i DataSourceParametersPostgresqlArgs) ToDataSourceParametersPostgresqlOutput() DataSourceParametersPostgresqlOutput {
	return i.ToDataSourceParametersPostgresqlOutputWithContext(context.Background())
}

func (i DataSourceParametersPostgresqlArgs) ToDataSourceParametersPostgresqlOutputWithContext(ctx context.Context) DataSourceParametersPostgresqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersPostgresqlOutput)
}

func (i DataSourceParametersPostgresqlArgs) ToDataSourceParametersPostgresqlPtrOutput() DataSourceParametersPostgresqlPtrOutput {
	return i.ToDataSourceParametersPostgresqlPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersPostgresqlArgs) ToDataSourceParametersPostgresqlPtrOutputWithContext(ctx context.Context) DataSourceParametersPostgresqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersPostgresqlOutput).ToDataSourceParametersPostgresqlPtrOutputWithContext(ctx)
}

// DataSourceParametersPostgresqlPtrInput is an input type that accepts DataSourceParametersPostgresqlArgs, DataSourceParametersPostgresqlPtr and DataSourceParametersPostgresqlPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersPostgresqlPtrInput` via:
//
//	        DataSourceParametersPostgresqlArgs{...}
//
//	or:
//
//	        nil
type DataSourceParametersPostgresqlPtrInput interface {
	pulumi.Input

	ToDataSourceParametersPostgresqlPtrOutput() DataSourceParametersPostgresqlPtrOutput
	ToDataSourceParametersPostgresqlPtrOutputWithContext(context.Context) DataSourceParametersPostgresqlPtrOutput
}

type dataSourceParametersPostgresqlPtrType DataSourceParametersPostgresqlArgs

func DataSourceParametersPostgresqlPtr(v *DataSourceParametersPostgresqlArgs) DataSourceParametersPostgresqlPtrInput {
	return (*dataSourceParametersPostgresqlPtrType)(v)
}

func (*dataSourceParametersPostgresqlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersPostgresql)(nil)).Elem()
}

func (i *dataSourceParametersPostgresqlPtrType) ToDataSourceParametersPostgresqlPtrOutput() DataSourceParametersPostgresqlPtrOutput {
	return i.ToDataSourceParametersPostgresqlPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersPostgresqlPtrType) ToDataSourceParametersPostgresqlPtrOutputWithContext(ctx context.Context) DataSourceParametersPostgresqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersPostgresqlPtrOutput)
}

type DataSourceParametersPostgresqlOutput struct{ *pulumi.OutputState }

func (DataSourceParametersPostgresqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersPostgresql)(nil)).Elem()
}

func (o DataSourceParametersPostgresqlOutput) ToDataSourceParametersPostgresqlOutput() DataSourceParametersPostgresqlOutput {
	return o
}

func (o DataSourceParametersPostgresqlOutput) ToDataSourceParametersPostgresqlOutputWithContext(ctx context.Context) DataSourceParametersPostgresqlOutput {
	return o
}

func (o DataSourceParametersPostgresqlOutput) ToDataSourceParametersPostgresqlPtrOutput() DataSourceParametersPostgresqlPtrOutput {
	return o.ToDataSourceParametersPostgresqlPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersPostgresqlOutput) ToDataSourceParametersPostgresqlPtrOutputWithContext(ctx context.Context) DataSourceParametersPostgresqlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersPostgresql) *DataSourceParametersPostgresql {
		return &v
	}).(DataSourceParametersPostgresqlPtrOutput)
}

// The database to which to connect.
func (o DataSourceParametersPostgresqlOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersPostgresql) string { return v.Database }).(pulumi.StringOutput)
}

// The host to which to connect.
func (o DataSourceParametersPostgresqlOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersPostgresql) string { return v.Host }).(pulumi.StringOutput)
}

// The port to which to connect.
func (o DataSourceParametersPostgresqlOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v DataSourceParametersPostgresql) int { return v.Port }).(pulumi.IntOutput)
}

type DataSourceParametersPostgresqlPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersPostgresqlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersPostgresql)(nil)).Elem()
}

func (o DataSourceParametersPostgresqlPtrOutput) ToDataSourceParametersPostgresqlPtrOutput() DataSourceParametersPostgresqlPtrOutput {
	return o
}

func (o DataSourceParametersPostgresqlPtrOutput) ToDataSourceParametersPostgresqlPtrOutputWithContext(ctx context.Context) DataSourceParametersPostgresqlPtrOutput {
	return o
}

func (o DataSourceParametersPostgresqlPtrOutput) Elem() DataSourceParametersPostgresqlOutput {
	return o.ApplyT(func(v *DataSourceParametersPostgresql) DataSourceParametersPostgresql {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersPostgresql
		return ret
	}).(DataSourceParametersPostgresqlOutput)
}

// The database to which to connect.
func (o DataSourceParametersPostgresqlPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersPostgresql) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// The host to which to connect.
func (o DataSourceParametersPostgresqlPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersPostgresql) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The port to which to connect.
func (o DataSourceParametersPostgresqlPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersPostgresql) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

type DataSourceParametersPresto struct {
	// The catalog to which to connect.
	Catalog string `pulumi:"catalog"`
	// The host to which to connect.
	Host string `pulumi:"host"`
	// The port to which to connect.
	Port int `pulumi:"port"`
}

// DataSourceParametersPrestoInput is an input type that accepts DataSourceParametersPrestoArgs and DataSourceParametersPrestoOutput values.
// You can construct a concrete instance of `DataSourceParametersPrestoInput` via:
//
//	DataSourceParametersPrestoArgs{...}
type DataSourceParametersPrestoInput interface {
	pulumi.Input

	ToDataSourceParametersPrestoOutput() DataSourceParametersPrestoOutput
	ToDataSourceParametersPrestoOutputWithContext(context.Context) DataSourceParametersPrestoOutput
}

type DataSourceParametersPrestoArgs struct {
	// The catalog to which to connect.
	Catalog pulumi.StringInput `pulumi:"catalog"`
	// The host to which to connect.
	Host pulumi.StringInput `pulumi:"host"`
	// The port to which to connect.
	Port pulumi.IntInput `pulumi:"port"`
}

func (DataSourceParametersPrestoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersPresto)(nil)).Elem()
}

func (i DataSourceParametersPrestoArgs) ToDataSourceParametersPrestoOutput() DataSourceParametersPrestoOutput {
	return i.ToDataSourceParametersPrestoOutputWithContext(context.Background())
}

func (i DataSourceParametersPrestoArgs) ToDataSourceParametersPrestoOutputWithContext(ctx context.Context) DataSourceParametersPrestoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersPrestoOutput)
}

func (i DataSourceParametersPrestoArgs) ToDataSourceParametersPrestoPtrOutput() DataSourceParametersPrestoPtrOutput {
	return i.ToDataSourceParametersPrestoPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersPrestoArgs) ToDataSourceParametersPrestoPtrOutputWithContext(ctx context.Context) DataSourceParametersPrestoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersPrestoOutput).ToDataSourceParametersPrestoPtrOutputWithContext(ctx)
}

// DataSourceParametersPrestoPtrInput is an input type that accepts DataSourceParametersPrestoArgs, DataSourceParametersPrestoPtr and DataSourceParametersPrestoPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersPrestoPtrInput` via:
//
//	        DataSourceParametersPrestoArgs{...}
//
//	or:
//
//	        nil
type DataSourceParametersPrestoPtrInput interface {
	pulumi.Input

	ToDataSourceParametersPrestoPtrOutput() DataSourceParametersPrestoPtrOutput
	ToDataSourceParametersPrestoPtrOutputWithContext(context.Context) DataSourceParametersPrestoPtrOutput
}

type dataSourceParametersPrestoPtrType DataSourceParametersPrestoArgs

func DataSourceParametersPrestoPtr(v *DataSourceParametersPrestoArgs) DataSourceParametersPrestoPtrInput {
	return (*dataSourceParametersPrestoPtrType)(v)
}

func (*dataSourceParametersPrestoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersPresto)(nil)).Elem()
}

func (i *dataSourceParametersPrestoPtrType) ToDataSourceParametersPrestoPtrOutput() DataSourceParametersPrestoPtrOutput {
	return i.ToDataSourceParametersPrestoPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersPrestoPtrType) ToDataSourceParametersPrestoPtrOutputWithContext(ctx context.Context) DataSourceParametersPrestoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersPrestoPtrOutput)
}

type DataSourceParametersPrestoOutput struct{ *pulumi.OutputState }

func (DataSourceParametersPrestoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersPresto)(nil)).Elem()
}

func (o DataSourceParametersPrestoOutput) ToDataSourceParametersPrestoOutput() DataSourceParametersPrestoOutput {
	return o
}

func (o DataSourceParametersPrestoOutput) ToDataSourceParametersPrestoOutputWithContext(ctx context.Context) DataSourceParametersPrestoOutput {
	return o
}

func (o DataSourceParametersPrestoOutput) ToDataSourceParametersPrestoPtrOutput() DataSourceParametersPrestoPtrOutput {
	return o.ToDataSourceParametersPrestoPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersPrestoOutput) ToDataSourceParametersPrestoPtrOutputWithContext(ctx context.Context) DataSourceParametersPrestoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersPresto) *DataSourceParametersPresto {
		return &v
	}).(DataSourceParametersPrestoPtrOutput)
}

// The catalog to which to connect.
func (o DataSourceParametersPrestoOutput) Catalog() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersPresto) string { return v.Catalog }).(pulumi.StringOutput)
}

// The host to which to connect.
func (o DataSourceParametersPrestoOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersPresto) string { return v.Host }).(pulumi.StringOutput)
}

// The port to which to connect.
func (o DataSourceParametersPrestoOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v DataSourceParametersPresto) int { return v.Port }).(pulumi.IntOutput)
}

type DataSourceParametersPrestoPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersPrestoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersPresto)(nil)).Elem()
}

func (o DataSourceParametersPrestoPtrOutput) ToDataSourceParametersPrestoPtrOutput() DataSourceParametersPrestoPtrOutput {
	return o
}

func (o DataSourceParametersPrestoPtrOutput) ToDataSourceParametersPrestoPtrOutputWithContext(ctx context.Context) DataSourceParametersPrestoPtrOutput {
	return o
}

func (o DataSourceParametersPrestoPtrOutput) Elem() DataSourceParametersPrestoOutput {
	return o.ApplyT(func(v *DataSourceParametersPresto) DataSourceParametersPresto {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersPresto
		return ret
	}).(DataSourceParametersPrestoOutput)
}

// The catalog to which to connect.
func (o DataSourceParametersPrestoPtrOutput) Catalog() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersPresto) *string {
		if v == nil {
			return nil
		}
		return &v.Catalog
	}).(pulumi.StringPtrOutput)
}

// The host to which to connect.
func (o DataSourceParametersPrestoPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersPresto) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The port to which to connect.
func (o DataSourceParametersPrestoPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersPresto) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

type DataSourceParametersRds struct {
	// The database to which to connect.
	Database string `pulumi:"database"`
	// The instance ID to which to connect.
	InstanceId string `pulumi:"instanceId"`
}

// DataSourceParametersRdsInput is an input type that accepts DataSourceParametersRdsArgs and DataSourceParametersRdsOutput values.
// You can construct a concrete instance of `DataSourceParametersRdsInput` via:
//
//	DataSourceParametersRdsArgs{...}
type DataSourceParametersRdsInput interface {
	pulumi.Input

	ToDataSourceParametersRdsOutput() DataSourceParametersRdsOutput
	ToDataSourceParametersRdsOutputWithContext(context.Context) DataSourceParametersRdsOutput
}

type DataSourceParametersRdsArgs struct {
	// The database to which to connect.
	Database pulumi.StringInput `pulumi:"database"`
	// The instance ID to which to connect.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
}

func (DataSourceParametersRdsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersRds)(nil)).Elem()
}

func (i DataSourceParametersRdsArgs) ToDataSourceParametersRdsOutput() DataSourceParametersRdsOutput {
	return i.ToDataSourceParametersRdsOutputWithContext(context.Background())
}

func (i DataSourceParametersRdsArgs) ToDataSourceParametersRdsOutputWithContext(ctx context.Context) DataSourceParametersRdsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersRdsOutput)
}

func (i DataSourceParametersRdsArgs) ToDataSourceParametersRdsPtrOutput() DataSourceParametersRdsPtrOutput {
	return i.ToDataSourceParametersRdsPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersRdsArgs) ToDataSourceParametersRdsPtrOutputWithContext(ctx context.Context) DataSourceParametersRdsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersRdsOutput).ToDataSourceParametersRdsPtrOutputWithContext(ctx)
}

// DataSourceParametersRdsPtrInput is an input type that accepts DataSourceParametersRdsArgs, DataSourceParametersRdsPtr and DataSourceParametersRdsPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersRdsPtrInput` via:
//
//	        DataSourceParametersRdsArgs{...}
//
//	or:
//
//	        nil
type DataSourceParametersRdsPtrInput interface {
	pulumi.Input

	ToDataSourceParametersRdsPtrOutput() DataSourceParametersRdsPtrOutput
	ToDataSourceParametersRdsPtrOutputWithContext(context.Context) DataSourceParametersRdsPtrOutput
}

type dataSourceParametersRdsPtrType DataSourceParametersRdsArgs

func DataSourceParametersRdsPtr(v *DataSourceParametersRdsArgs) DataSourceParametersRdsPtrInput {
	return (*dataSourceParametersRdsPtrType)(v)
}

func (*dataSourceParametersRdsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersRds)(nil)).Elem()
}

func (i *dataSourceParametersRdsPtrType) ToDataSourceParametersRdsPtrOutput() DataSourceParametersRdsPtrOutput {
	return i.ToDataSourceParametersRdsPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersRdsPtrType) ToDataSourceParametersRdsPtrOutputWithContext(ctx context.Context) DataSourceParametersRdsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersRdsPtrOutput)
}

type DataSourceParametersRdsOutput struct{ *pulumi.OutputState }

func (DataSourceParametersRdsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersRds)(nil)).Elem()
}

func (o DataSourceParametersRdsOutput) ToDataSourceParametersRdsOutput() DataSourceParametersRdsOutput {
	return o
}

func (o DataSourceParametersRdsOutput) ToDataSourceParametersRdsOutputWithContext(ctx context.Context) DataSourceParametersRdsOutput {
	return o
}

func (o DataSourceParametersRdsOutput) ToDataSourceParametersRdsPtrOutput() DataSourceParametersRdsPtrOutput {
	return o.ToDataSourceParametersRdsPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersRdsOutput) ToDataSourceParametersRdsPtrOutputWithContext(ctx context.Context) DataSourceParametersRdsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersRds) *DataSourceParametersRds {
		return &v
	}).(DataSourceParametersRdsPtrOutput)
}

// The database to which to connect.
func (o DataSourceParametersRdsOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersRds) string { return v.Database }).(pulumi.StringOutput)
}

// The instance ID to which to connect.
func (o DataSourceParametersRdsOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersRds) string { return v.InstanceId }).(pulumi.StringOutput)
}

type DataSourceParametersRdsPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersRdsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersRds)(nil)).Elem()
}

func (o DataSourceParametersRdsPtrOutput) ToDataSourceParametersRdsPtrOutput() DataSourceParametersRdsPtrOutput {
	return o
}

func (o DataSourceParametersRdsPtrOutput) ToDataSourceParametersRdsPtrOutputWithContext(ctx context.Context) DataSourceParametersRdsPtrOutput {
	return o
}

func (o DataSourceParametersRdsPtrOutput) Elem() DataSourceParametersRdsOutput {
	return o.ApplyT(func(v *DataSourceParametersRds) DataSourceParametersRds {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersRds
		return ret
	}).(DataSourceParametersRdsOutput)
}

// The database to which to connect.
func (o DataSourceParametersRdsPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersRds) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// The instance ID to which to connect.
func (o DataSourceParametersRdsPtrOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersRds) *string {
		if v == nil {
			return nil
		}
		return &v.InstanceId
	}).(pulumi.StringPtrOutput)
}

type DataSourceParametersRedshift struct {
	// The ID of the cluster to which to connect.
	ClusterId *string `pulumi:"clusterId"`
	// The database to which to connect.
	Database string `pulumi:"database"`
	// The host to which to connect.
	Host *string `pulumi:"host"`
	// The port to which to connect.
	Port *int `pulumi:"port"`
}

// DataSourceParametersRedshiftInput is an input type that accepts DataSourceParametersRedshiftArgs and DataSourceParametersRedshiftOutput values.
// You can construct a concrete instance of `DataSourceParametersRedshiftInput` via:
//
//	DataSourceParametersRedshiftArgs{...}
type DataSourceParametersRedshiftInput interface {
	pulumi.Input

	ToDataSourceParametersRedshiftOutput() DataSourceParametersRedshiftOutput
	ToDataSourceParametersRedshiftOutputWithContext(context.Context) DataSourceParametersRedshiftOutput
}

type DataSourceParametersRedshiftArgs struct {
	// The ID of the cluster to which to connect.
	ClusterId pulumi.StringPtrInput `pulumi:"clusterId"`
	// The database to which to connect.
	Database pulumi.StringInput `pulumi:"database"`
	// The host to which to connect.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// The port to which to connect.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (DataSourceParametersRedshiftArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersRedshift)(nil)).Elem()
}

func (i DataSourceParametersRedshiftArgs) ToDataSourceParametersRedshiftOutput() DataSourceParametersRedshiftOutput {
	return i.ToDataSourceParametersRedshiftOutputWithContext(context.Background())
}

func (i DataSourceParametersRedshiftArgs) ToDataSourceParametersRedshiftOutputWithContext(ctx context.Context) DataSourceParametersRedshiftOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersRedshiftOutput)
}

func (i DataSourceParametersRedshiftArgs) ToDataSourceParametersRedshiftPtrOutput() DataSourceParametersRedshiftPtrOutput {
	return i.ToDataSourceParametersRedshiftPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersRedshiftArgs) ToDataSourceParametersRedshiftPtrOutputWithContext(ctx context.Context) DataSourceParametersRedshiftPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersRedshiftOutput).ToDataSourceParametersRedshiftPtrOutputWithContext(ctx)
}

// DataSourceParametersRedshiftPtrInput is an input type that accepts DataSourceParametersRedshiftArgs, DataSourceParametersRedshiftPtr and DataSourceParametersRedshiftPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersRedshiftPtrInput` via:
//
//	        DataSourceParametersRedshiftArgs{...}
//
//	or:
//
//	        nil
type DataSourceParametersRedshiftPtrInput interface {
	pulumi.Input

	ToDataSourceParametersRedshiftPtrOutput() DataSourceParametersRedshiftPtrOutput
	ToDataSourceParametersRedshiftPtrOutputWithContext(context.Context) DataSourceParametersRedshiftPtrOutput
}

type dataSourceParametersRedshiftPtrType DataSourceParametersRedshiftArgs

func DataSourceParametersRedshiftPtr(v *DataSourceParametersRedshiftArgs) DataSourceParametersRedshiftPtrInput {
	return (*dataSourceParametersRedshiftPtrType)(v)
}

func (*dataSourceParametersRedshiftPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersRedshift)(nil)).Elem()
}

func (i *dataSourceParametersRedshiftPtrType) ToDataSourceParametersRedshiftPtrOutput() DataSourceParametersRedshiftPtrOutput {
	return i.ToDataSourceParametersRedshiftPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersRedshiftPtrType) ToDataSourceParametersRedshiftPtrOutputWithContext(ctx context.Context) DataSourceParametersRedshiftPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersRedshiftPtrOutput)
}

type DataSourceParametersRedshiftOutput struct{ *pulumi.OutputState }

func (DataSourceParametersRedshiftOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersRedshift)(nil)).Elem()
}

func (o DataSourceParametersRedshiftOutput) ToDataSourceParametersRedshiftOutput() DataSourceParametersRedshiftOutput {
	return o
}

func (o DataSourceParametersRedshiftOutput) ToDataSourceParametersRedshiftOutputWithContext(ctx context.Context) DataSourceParametersRedshiftOutput {
	return o
}

func (o DataSourceParametersRedshiftOutput) ToDataSourceParametersRedshiftPtrOutput() DataSourceParametersRedshiftPtrOutput {
	return o.ToDataSourceParametersRedshiftPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersRedshiftOutput) ToDataSourceParametersRedshiftPtrOutputWithContext(ctx context.Context) DataSourceParametersRedshiftPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersRedshift) *DataSourceParametersRedshift {
		return &v
	}).(DataSourceParametersRedshiftPtrOutput)
}

// The ID of the cluster to which to connect.
func (o DataSourceParametersRedshiftOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceParametersRedshift) *string { return v.ClusterId }).(pulumi.StringPtrOutput)
}

// The database to which to connect.
func (o DataSourceParametersRedshiftOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersRedshift) string { return v.Database }).(pulumi.StringOutput)
}

// The host to which to connect.
func (o DataSourceParametersRedshiftOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceParametersRedshift) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// The port to which to connect.
func (o DataSourceParametersRedshiftOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DataSourceParametersRedshift) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type DataSourceParametersRedshiftPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersRedshiftPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersRedshift)(nil)).Elem()
}

func (o DataSourceParametersRedshiftPtrOutput) ToDataSourceParametersRedshiftPtrOutput() DataSourceParametersRedshiftPtrOutput {
	return o
}

func (o DataSourceParametersRedshiftPtrOutput) ToDataSourceParametersRedshiftPtrOutputWithContext(ctx context.Context) DataSourceParametersRedshiftPtrOutput {
	return o
}

func (o DataSourceParametersRedshiftPtrOutput) Elem() DataSourceParametersRedshiftOutput {
	return o.ApplyT(func(v *DataSourceParametersRedshift) DataSourceParametersRedshift {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersRedshift
		return ret
	}).(DataSourceParametersRedshiftOutput)
}

// The ID of the cluster to which to connect.
func (o DataSourceParametersRedshiftPtrOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersRedshift) *string {
		if v == nil {
			return nil
		}
		return v.ClusterId
	}).(pulumi.StringPtrOutput)
}

// The database to which to connect.
func (o DataSourceParametersRedshiftPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersRedshift) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// The host to which to connect.
func (o DataSourceParametersRedshiftPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersRedshift) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// The port to which to connect.
func (o DataSourceParametersRedshiftPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersRedshift) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

type DataSourceParametersS3 struct {
	// An object containing the S3 location of the S3 manifest file.
	ManifestFileLocation DataSourceParametersS3ManifestFileLocation `pulumi:"manifestFileLocation"`
}

// DataSourceParametersS3Input is an input type that accepts DataSourceParametersS3Args and DataSourceParametersS3Output values.
// You can construct a concrete instance of `DataSourceParametersS3Input` via:
//
//	DataSourceParametersS3Args{...}
type DataSourceParametersS3Input interface {
	pulumi.Input

	ToDataSourceParametersS3Output() DataSourceParametersS3Output
	ToDataSourceParametersS3OutputWithContext(context.Context) DataSourceParametersS3Output
}

type DataSourceParametersS3Args struct {
	// An object containing the S3 location of the S3 manifest file.
	ManifestFileLocation DataSourceParametersS3ManifestFileLocationInput `pulumi:"manifestFileLocation"`
}

func (DataSourceParametersS3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersS3)(nil)).Elem()
}

func (i DataSourceParametersS3Args) ToDataSourceParametersS3Output() DataSourceParametersS3Output {
	return i.ToDataSourceParametersS3OutputWithContext(context.Background())
}

func (i DataSourceParametersS3Args) ToDataSourceParametersS3OutputWithContext(ctx context.Context) DataSourceParametersS3Output {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersS3Output)
}

func (i DataSourceParametersS3Args) ToDataSourceParametersS3PtrOutput() DataSourceParametersS3PtrOutput {
	return i.ToDataSourceParametersS3PtrOutputWithContext(context.Background())
}

func (i DataSourceParametersS3Args) ToDataSourceParametersS3PtrOutputWithContext(ctx context.Context) DataSourceParametersS3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersS3Output).ToDataSourceParametersS3PtrOutputWithContext(ctx)
}

// DataSourceParametersS3PtrInput is an input type that accepts DataSourceParametersS3Args, DataSourceParametersS3Ptr and DataSourceParametersS3PtrOutput values.
// You can construct a concrete instance of `DataSourceParametersS3PtrInput` via:
//
//	        DataSourceParametersS3Args{...}
//
//	or:
//
//	        nil
type DataSourceParametersS3PtrInput interface {
	pulumi.Input

	ToDataSourceParametersS3PtrOutput() DataSourceParametersS3PtrOutput
	ToDataSourceParametersS3PtrOutputWithContext(context.Context) DataSourceParametersS3PtrOutput
}

type dataSourceParametersS3PtrType DataSourceParametersS3Args

func DataSourceParametersS3Ptr(v *DataSourceParametersS3Args) DataSourceParametersS3PtrInput {
	return (*dataSourceParametersS3PtrType)(v)
}

func (*dataSourceParametersS3PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersS3)(nil)).Elem()
}

func (i *dataSourceParametersS3PtrType) ToDataSourceParametersS3PtrOutput() DataSourceParametersS3PtrOutput {
	return i.ToDataSourceParametersS3PtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersS3PtrType) ToDataSourceParametersS3PtrOutputWithContext(ctx context.Context) DataSourceParametersS3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersS3PtrOutput)
}

type DataSourceParametersS3Output struct{ *pulumi.OutputState }

func (DataSourceParametersS3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersS3)(nil)).Elem()
}

func (o DataSourceParametersS3Output) ToDataSourceParametersS3Output() DataSourceParametersS3Output {
	return o
}

func (o DataSourceParametersS3Output) ToDataSourceParametersS3OutputWithContext(ctx context.Context) DataSourceParametersS3Output {
	return o
}

func (o DataSourceParametersS3Output) ToDataSourceParametersS3PtrOutput() DataSourceParametersS3PtrOutput {
	return o.ToDataSourceParametersS3PtrOutputWithContext(context.Background())
}

func (o DataSourceParametersS3Output) ToDataSourceParametersS3PtrOutputWithContext(ctx context.Context) DataSourceParametersS3PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersS3) *DataSourceParametersS3 {
		return &v
	}).(DataSourceParametersS3PtrOutput)
}

// An object containing the S3 location of the S3 manifest file.
func (o DataSourceParametersS3Output) ManifestFileLocation() DataSourceParametersS3ManifestFileLocationOutput {
	return o.ApplyT(func(v DataSourceParametersS3) DataSourceParametersS3ManifestFileLocation {
		return v.ManifestFileLocation
	}).(DataSourceParametersS3ManifestFileLocationOutput)
}

type DataSourceParametersS3PtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersS3PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersS3)(nil)).Elem()
}

func (o DataSourceParametersS3PtrOutput) ToDataSourceParametersS3PtrOutput() DataSourceParametersS3PtrOutput {
	return o
}

func (o DataSourceParametersS3PtrOutput) ToDataSourceParametersS3PtrOutputWithContext(ctx context.Context) DataSourceParametersS3PtrOutput {
	return o
}

func (o DataSourceParametersS3PtrOutput) Elem() DataSourceParametersS3Output {
	return o.ApplyT(func(v *DataSourceParametersS3) DataSourceParametersS3 {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersS3
		return ret
	}).(DataSourceParametersS3Output)
}

// An object containing the S3 location of the S3 manifest file.
func (o DataSourceParametersS3PtrOutput) ManifestFileLocation() DataSourceParametersS3ManifestFileLocationPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersS3) *DataSourceParametersS3ManifestFileLocation {
		if v == nil {
			return nil
		}
		return &v.ManifestFileLocation
	}).(DataSourceParametersS3ManifestFileLocationPtrOutput)
}

type DataSourceParametersS3ManifestFileLocation struct {
	// The name of the bucket that contains the manifest file.
	Bucket string `pulumi:"bucket"`
	// The key of the manifest file within the bucket.
	Key string `pulumi:"key"`
}

// DataSourceParametersS3ManifestFileLocationInput is an input type that accepts DataSourceParametersS3ManifestFileLocationArgs and DataSourceParametersS3ManifestFileLocationOutput values.
// You can construct a concrete instance of `DataSourceParametersS3ManifestFileLocationInput` via:
//
//	DataSourceParametersS3ManifestFileLocationArgs{...}
type DataSourceParametersS3ManifestFileLocationInput interface {
	pulumi.Input

	ToDataSourceParametersS3ManifestFileLocationOutput() DataSourceParametersS3ManifestFileLocationOutput
	ToDataSourceParametersS3ManifestFileLocationOutputWithContext(context.Context) DataSourceParametersS3ManifestFileLocationOutput
}

type DataSourceParametersS3ManifestFileLocationArgs struct {
	// The name of the bucket that contains the manifest file.
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// The key of the manifest file within the bucket.
	Key pulumi.StringInput `pulumi:"key"`
}

func (DataSourceParametersS3ManifestFileLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersS3ManifestFileLocation)(nil)).Elem()
}

func (i DataSourceParametersS3ManifestFileLocationArgs) ToDataSourceParametersS3ManifestFileLocationOutput() DataSourceParametersS3ManifestFileLocationOutput {
	return i.ToDataSourceParametersS3ManifestFileLocationOutputWithContext(context.Background())
}

func (i DataSourceParametersS3ManifestFileLocationArgs) ToDataSourceParametersS3ManifestFileLocationOutputWithContext(ctx context.Context) DataSourceParametersS3ManifestFileLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersS3ManifestFileLocationOutput)
}

func (i DataSourceParametersS3ManifestFileLocationArgs) ToDataSourceParametersS3ManifestFileLocationPtrOutput() DataSourceParametersS3ManifestFileLocationPtrOutput {
	return i.ToDataSourceParametersS3ManifestFileLocationPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersS3ManifestFileLocationArgs) ToDataSourceParametersS3ManifestFileLocationPtrOutputWithContext(ctx context.Context) DataSourceParametersS3ManifestFileLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersS3ManifestFileLocationOutput).ToDataSourceParametersS3ManifestFileLocationPtrOutputWithContext(ctx)
}

// DataSourceParametersS3ManifestFileLocationPtrInput is an input type that accepts DataSourceParametersS3ManifestFileLocationArgs, DataSourceParametersS3ManifestFileLocationPtr and DataSourceParametersS3ManifestFileLocationPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersS3ManifestFileLocationPtrInput` via:
//
//	        DataSourceParametersS3ManifestFileLocationArgs{...}
//
//	or:
//
//	        nil
type DataSourceParametersS3ManifestFileLocationPtrInput interface {
	pulumi.Input

	ToDataSourceParametersS3ManifestFileLocationPtrOutput() DataSourceParametersS3ManifestFileLocationPtrOutput
	ToDataSourceParametersS3ManifestFileLocationPtrOutputWithContext(context.Context) DataSourceParametersS3ManifestFileLocationPtrOutput
}

type dataSourceParametersS3ManifestFileLocationPtrType DataSourceParametersS3ManifestFileLocationArgs

func DataSourceParametersS3ManifestFileLocationPtr(v *DataSourceParametersS3ManifestFileLocationArgs) DataSourceParametersS3ManifestFileLocationPtrInput {
	return (*dataSourceParametersS3ManifestFileLocationPtrType)(v)
}

func (*dataSourceParametersS3ManifestFileLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersS3ManifestFileLocation)(nil)).Elem()
}

func (i *dataSourceParametersS3ManifestFileLocationPtrType) ToDataSourceParametersS3ManifestFileLocationPtrOutput() DataSourceParametersS3ManifestFileLocationPtrOutput {
	return i.ToDataSourceParametersS3ManifestFileLocationPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersS3ManifestFileLocationPtrType) ToDataSourceParametersS3ManifestFileLocationPtrOutputWithContext(ctx context.Context) DataSourceParametersS3ManifestFileLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersS3ManifestFileLocationPtrOutput)
}

type DataSourceParametersS3ManifestFileLocationOutput struct{ *pulumi.OutputState }

func (DataSourceParametersS3ManifestFileLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersS3ManifestFileLocation)(nil)).Elem()
}

func (o DataSourceParametersS3ManifestFileLocationOutput) ToDataSourceParametersS3ManifestFileLocationOutput() DataSourceParametersS3ManifestFileLocationOutput {
	return o
}

func (o DataSourceParametersS3ManifestFileLocationOutput) ToDataSourceParametersS3ManifestFileLocationOutputWithContext(ctx context.Context) DataSourceParametersS3ManifestFileLocationOutput {
	return o
}

func (o DataSourceParametersS3ManifestFileLocationOutput) ToDataSourceParametersS3ManifestFileLocationPtrOutput() DataSourceParametersS3ManifestFileLocationPtrOutput {
	return o.ToDataSourceParametersS3ManifestFileLocationPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersS3ManifestFileLocationOutput) ToDataSourceParametersS3ManifestFileLocationPtrOutputWithContext(ctx context.Context) DataSourceParametersS3ManifestFileLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersS3ManifestFileLocation) *DataSourceParametersS3ManifestFileLocation {
		return &v
	}).(DataSourceParametersS3ManifestFileLocationPtrOutput)
}

// The name of the bucket that contains the manifest file.
func (o DataSourceParametersS3ManifestFileLocationOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersS3ManifestFileLocation) string { return v.Bucket }).(pulumi.StringOutput)
}

// The key of the manifest file within the bucket.
func (o DataSourceParametersS3ManifestFileLocationOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersS3ManifestFileLocation) string { return v.Key }).(pulumi.StringOutput)
}

type DataSourceParametersS3ManifestFileLocationPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersS3ManifestFileLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersS3ManifestFileLocation)(nil)).Elem()
}

func (o DataSourceParametersS3ManifestFileLocationPtrOutput) ToDataSourceParametersS3ManifestFileLocationPtrOutput() DataSourceParametersS3ManifestFileLocationPtrOutput {
	return o
}

func (o DataSourceParametersS3ManifestFileLocationPtrOutput) ToDataSourceParametersS3ManifestFileLocationPtrOutputWithContext(ctx context.Context) DataSourceParametersS3ManifestFileLocationPtrOutput {
	return o
}

func (o DataSourceParametersS3ManifestFileLocationPtrOutput) Elem() DataSourceParametersS3ManifestFileLocationOutput {
	return o.ApplyT(func(v *DataSourceParametersS3ManifestFileLocation) DataSourceParametersS3ManifestFileLocation {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersS3ManifestFileLocation
		return ret
	}).(DataSourceParametersS3ManifestFileLocationOutput)
}

// The name of the bucket that contains the manifest file.
func (o DataSourceParametersS3ManifestFileLocationPtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersS3ManifestFileLocation) *string {
		if v == nil {
			return nil
		}
		return &v.Bucket
	}).(pulumi.StringPtrOutput)
}

// The key of the manifest file within the bucket.
func (o DataSourceParametersS3ManifestFileLocationPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersS3ManifestFileLocation) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

type DataSourceParametersServiceNow struct {
	// The base URL of the Jira instance's site to which to connect.
	SiteBaseUrl string `pulumi:"siteBaseUrl"`
}

// DataSourceParametersServiceNowInput is an input type that accepts DataSourceParametersServiceNowArgs and DataSourceParametersServiceNowOutput values.
// You can construct a concrete instance of `DataSourceParametersServiceNowInput` via:
//
//	DataSourceParametersServiceNowArgs{...}
type DataSourceParametersServiceNowInput interface {
	pulumi.Input

	ToDataSourceParametersServiceNowOutput() DataSourceParametersServiceNowOutput
	ToDataSourceParametersServiceNowOutputWithContext(context.Context) DataSourceParametersServiceNowOutput
}

type DataSourceParametersServiceNowArgs struct {
	// The base URL of the Jira instance's site to which to connect.
	SiteBaseUrl pulumi.StringInput `pulumi:"siteBaseUrl"`
}

func (DataSourceParametersServiceNowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersServiceNow)(nil)).Elem()
}

func (i DataSourceParametersServiceNowArgs) ToDataSourceParametersServiceNowOutput() DataSourceParametersServiceNowOutput {
	return i.ToDataSourceParametersServiceNowOutputWithContext(context.Background())
}

func (i DataSourceParametersServiceNowArgs) ToDataSourceParametersServiceNowOutputWithContext(ctx context.Context) DataSourceParametersServiceNowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersServiceNowOutput)
}

func (i DataSourceParametersServiceNowArgs) ToDataSourceParametersServiceNowPtrOutput() DataSourceParametersServiceNowPtrOutput {
	return i.ToDataSourceParametersServiceNowPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersServiceNowArgs) ToDataSourceParametersServiceNowPtrOutputWithContext(ctx context.Context) DataSourceParametersServiceNowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersServiceNowOutput).ToDataSourceParametersServiceNowPtrOutputWithContext(ctx)
}

// DataSourceParametersServiceNowPtrInput is an input type that accepts DataSourceParametersServiceNowArgs, DataSourceParametersServiceNowPtr and DataSourceParametersServiceNowPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersServiceNowPtrInput` via:
//
//	        DataSourceParametersServiceNowArgs{...}
//
//	or:
//
//	        nil
type DataSourceParametersServiceNowPtrInput interface {
	pulumi.Input

	ToDataSourceParametersServiceNowPtrOutput() DataSourceParametersServiceNowPtrOutput
	ToDataSourceParametersServiceNowPtrOutputWithContext(context.Context) DataSourceParametersServiceNowPtrOutput
}

type dataSourceParametersServiceNowPtrType DataSourceParametersServiceNowArgs

func DataSourceParametersServiceNowPtr(v *DataSourceParametersServiceNowArgs) DataSourceParametersServiceNowPtrInput {
	return (*dataSourceParametersServiceNowPtrType)(v)
}

func (*dataSourceParametersServiceNowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersServiceNow)(nil)).Elem()
}

func (i *dataSourceParametersServiceNowPtrType) ToDataSourceParametersServiceNowPtrOutput() DataSourceParametersServiceNowPtrOutput {
	return i.ToDataSourceParametersServiceNowPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersServiceNowPtrType) ToDataSourceParametersServiceNowPtrOutputWithContext(ctx context.Context) DataSourceParametersServiceNowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersServiceNowPtrOutput)
}

type DataSourceParametersServiceNowOutput struct{ *pulumi.OutputState }

func (DataSourceParametersServiceNowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersServiceNow)(nil)).Elem()
}

func (o DataSourceParametersServiceNowOutput) ToDataSourceParametersServiceNowOutput() DataSourceParametersServiceNowOutput {
	return o
}

func (o DataSourceParametersServiceNowOutput) ToDataSourceParametersServiceNowOutputWithContext(ctx context.Context) DataSourceParametersServiceNowOutput {
	return o
}

func (o DataSourceParametersServiceNowOutput) ToDataSourceParametersServiceNowPtrOutput() DataSourceParametersServiceNowPtrOutput {
	return o.ToDataSourceParametersServiceNowPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersServiceNowOutput) ToDataSourceParametersServiceNowPtrOutputWithContext(ctx context.Context) DataSourceParametersServiceNowPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersServiceNow) *DataSourceParametersServiceNow {
		return &v
	}).(DataSourceParametersServiceNowPtrOutput)
}

// The base URL of the Jira instance's site to which to connect.
func (o DataSourceParametersServiceNowOutput) SiteBaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersServiceNow) string { return v.SiteBaseUrl }).(pulumi.StringOutput)
}

type DataSourceParametersServiceNowPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersServiceNowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersServiceNow)(nil)).Elem()
}

func (o DataSourceParametersServiceNowPtrOutput) ToDataSourceParametersServiceNowPtrOutput() DataSourceParametersServiceNowPtrOutput {
	return o
}

func (o DataSourceParametersServiceNowPtrOutput) ToDataSourceParametersServiceNowPtrOutputWithContext(ctx context.Context) DataSourceParametersServiceNowPtrOutput {
	return o
}

func (o DataSourceParametersServiceNowPtrOutput) Elem() DataSourceParametersServiceNowOutput {
	return o.ApplyT(func(v *DataSourceParametersServiceNow) DataSourceParametersServiceNow {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersServiceNow
		return ret
	}).(DataSourceParametersServiceNowOutput)
}

// The base URL of the Jira instance's site to which to connect.
func (o DataSourceParametersServiceNowPtrOutput) SiteBaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersServiceNow) *string {
		if v == nil {
			return nil
		}
		return &v.SiteBaseUrl
	}).(pulumi.StringPtrOutput)
}

type DataSourceParametersSnowflake struct {
	// The database to which to connect.
	Database string `pulumi:"database"`
	// The host to which to connect.
	Host string `pulumi:"host"`
	// The warehouse to which to connect.
	Warehouse string `pulumi:"warehouse"`
}

// DataSourceParametersSnowflakeInput is an input type that accepts DataSourceParametersSnowflakeArgs and DataSourceParametersSnowflakeOutput values.
// You can construct a concrete instance of `DataSourceParametersSnowflakeInput` via:
//
//	DataSourceParametersSnowflakeArgs{...}
type DataSourceParametersSnowflakeInput interface {
	pulumi.Input

	ToDataSourceParametersSnowflakeOutput() DataSourceParametersSnowflakeOutput
	ToDataSourceParametersSnowflakeOutputWithContext(context.Context) DataSourceParametersSnowflakeOutput
}

type DataSourceParametersSnowflakeArgs struct {
	// The database to which to connect.
	Database pulumi.StringInput `pulumi:"database"`
	// The host to which to connect.
	Host pulumi.StringInput `pulumi:"host"`
	// The warehouse to which to connect.
	Warehouse pulumi.StringInput `pulumi:"warehouse"`
}

func (DataSourceParametersSnowflakeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersSnowflake)(nil)).Elem()
}

func (i DataSourceParametersSnowflakeArgs) ToDataSourceParametersSnowflakeOutput() DataSourceParametersSnowflakeOutput {
	return i.ToDataSourceParametersSnowflakeOutputWithContext(context.Background())
}

func (i DataSourceParametersSnowflakeArgs) ToDataSourceParametersSnowflakeOutputWithContext(ctx context.Context) DataSourceParametersSnowflakeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersSnowflakeOutput)
}

func (i DataSourceParametersSnowflakeArgs) ToDataSourceParametersSnowflakePtrOutput() DataSourceParametersSnowflakePtrOutput {
	return i.ToDataSourceParametersSnowflakePtrOutputWithContext(context.Background())
}

func (i DataSourceParametersSnowflakeArgs) ToDataSourceParametersSnowflakePtrOutputWithContext(ctx context.Context) DataSourceParametersSnowflakePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersSnowflakeOutput).ToDataSourceParametersSnowflakePtrOutputWithContext(ctx)
}

// DataSourceParametersSnowflakePtrInput is an input type that accepts DataSourceParametersSnowflakeArgs, DataSourceParametersSnowflakePtr and DataSourceParametersSnowflakePtrOutput values.
// You can construct a concrete instance of `DataSourceParametersSnowflakePtrInput` via:
//
//	        DataSourceParametersSnowflakeArgs{...}
//
//	or:
//
//	        nil
type DataSourceParametersSnowflakePtrInput interface {
	pulumi.Input

	ToDataSourceParametersSnowflakePtrOutput() DataSourceParametersSnowflakePtrOutput
	ToDataSourceParametersSnowflakePtrOutputWithContext(context.Context) DataSourceParametersSnowflakePtrOutput
}

type dataSourceParametersSnowflakePtrType DataSourceParametersSnowflakeArgs

func DataSourceParametersSnowflakePtr(v *DataSourceParametersSnowflakeArgs) DataSourceParametersSnowflakePtrInput {
	return (*dataSourceParametersSnowflakePtrType)(v)
}

func (*dataSourceParametersSnowflakePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersSnowflake)(nil)).Elem()
}

func (i *dataSourceParametersSnowflakePtrType) ToDataSourceParametersSnowflakePtrOutput() DataSourceParametersSnowflakePtrOutput {
	return i.ToDataSourceParametersSnowflakePtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersSnowflakePtrType) ToDataSourceParametersSnowflakePtrOutputWithContext(ctx context.Context) DataSourceParametersSnowflakePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersSnowflakePtrOutput)
}

type DataSourceParametersSnowflakeOutput struct{ *pulumi.OutputState }

func (DataSourceParametersSnowflakeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersSnowflake)(nil)).Elem()
}

func (o DataSourceParametersSnowflakeOutput) ToDataSourceParametersSnowflakeOutput() DataSourceParametersSnowflakeOutput {
	return o
}

func (o DataSourceParametersSnowflakeOutput) ToDataSourceParametersSnowflakeOutputWithContext(ctx context.Context) DataSourceParametersSnowflakeOutput {
	return o
}

func (o DataSourceParametersSnowflakeOutput) ToDataSourceParametersSnowflakePtrOutput() DataSourceParametersSnowflakePtrOutput {
	return o.ToDataSourceParametersSnowflakePtrOutputWithContext(context.Background())
}

func (o DataSourceParametersSnowflakeOutput) ToDataSourceParametersSnowflakePtrOutputWithContext(ctx context.Context) DataSourceParametersSnowflakePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersSnowflake) *DataSourceParametersSnowflake {
		return &v
	}).(DataSourceParametersSnowflakePtrOutput)
}

// The database to which to connect.
func (o DataSourceParametersSnowflakeOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersSnowflake) string { return v.Database }).(pulumi.StringOutput)
}

// The host to which to connect.
func (o DataSourceParametersSnowflakeOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersSnowflake) string { return v.Host }).(pulumi.StringOutput)
}

// The warehouse to which to connect.
func (o DataSourceParametersSnowflakeOutput) Warehouse() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersSnowflake) string { return v.Warehouse }).(pulumi.StringOutput)
}

type DataSourceParametersSnowflakePtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersSnowflakePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersSnowflake)(nil)).Elem()
}

func (o DataSourceParametersSnowflakePtrOutput) ToDataSourceParametersSnowflakePtrOutput() DataSourceParametersSnowflakePtrOutput {
	return o
}

func (o DataSourceParametersSnowflakePtrOutput) ToDataSourceParametersSnowflakePtrOutputWithContext(ctx context.Context) DataSourceParametersSnowflakePtrOutput {
	return o
}

func (o DataSourceParametersSnowflakePtrOutput) Elem() DataSourceParametersSnowflakeOutput {
	return o.ApplyT(func(v *DataSourceParametersSnowflake) DataSourceParametersSnowflake {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersSnowflake
		return ret
	}).(DataSourceParametersSnowflakeOutput)
}

// The database to which to connect.
func (o DataSourceParametersSnowflakePtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersSnowflake) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// The host to which to connect.
func (o DataSourceParametersSnowflakePtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersSnowflake) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The warehouse to which to connect.
func (o DataSourceParametersSnowflakePtrOutput) Warehouse() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersSnowflake) *string {
		if v == nil {
			return nil
		}
		return &v.Warehouse
	}).(pulumi.StringPtrOutput)
}

type DataSourceParametersSpark struct {
	// The host to which to connect.
	Host string `pulumi:"host"`
	// The warehouse to which to connect.
	Port int `pulumi:"port"`
}

// DataSourceParametersSparkInput is an input type that accepts DataSourceParametersSparkArgs and DataSourceParametersSparkOutput values.
// You can construct a concrete instance of `DataSourceParametersSparkInput` via:
//
//	DataSourceParametersSparkArgs{...}
type DataSourceParametersSparkInput interface {
	pulumi.Input

	ToDataSourceParametersSparkOutput() DataSourceParametersSparkOutput
	ToDataSourceParametersSparkOutputWithContext(context.Context) DataSourceParametersSparkOutput
}

type DataSourceParametersSparkArgs struct {
	// The host to which to connect.
	Host pulumi.StringInput `pulumi:"host"`
	// The warehouse to which to connect.
	Port pulumi.IntInput `pulumi:"port"`
}

func (DataSourceParametersSparkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersSpark)(nil)).Elem()
}

func (i DataSourceParametersSparkArgs) ToDataSourceParametersSparkOutput() DataSourceParametersSparkOutput {
	return i.ToDataSourceParametersSparkOutputWithContext(context.Background())
}

func (i DataSourceParametersSparkArgs) ToDataSourceParametersSparkOutputWithContext(ctx context.Context) DataSourceParametersSparkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersSparkOutput)
}

func (i DataSourceParametersSparkArgs) ToDataSourceParametersSparkPtrOutput() DataSourceParametersSparkPtrOutput {
	return i.ToDataSourceParametersSparkPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersSparkArgs) ToDataSourceParametersSparkPtrOutputWithContext(ctx context.Context) DataSourceParametersSparkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersSparkOutput).ToDataSourceParametersSparkPtrOutputWithContext(ctx)
}

// DataSourceParametersSparkPtrInput is an input type that accepts DataSourceParametersSparkArgs, DataSourceParametersSparkPtr and DataSourceParametersSparkPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersSparkPtrInput` via:
//
//	        DataSourceParametersSparkArgs{...}
//
//	or:
//
//	        nil
type DataSourceParametersSparkPtrInput interface {
	pulumi.Input

	ToDataSourceParametersSparkPtrOutput() DataSourceParametersSparkPtrOutput
	ToDataSourceParametersSparkPtrOutputWithContext(context.Context) DataSourceParametersSparkPtrOutput
}

type dataSourceParametersSparkPtrType DataSourceParametersSparkArgs

func DataSourceParametersSparkPtr(v *DataSourceParametersSparkArgs) DataSourceParametersSparkPtrInput {
	return (*dataSourceParametersSparkPtrType)(v)
}

func (*dataSourceParametersSparkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersSpark)(nil)).Elem()
}

func (i *dataSourceParametersSparkPtrType) ToDataSourceParametersSparkPtrOutput() DataSourceParametersSparkPtrOutput {
	return i.ToDataSourceParametersSparkPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersSparkPtrType) ToDataSourceParametersSparkPtrOutputWithContext(ctx context.Context) DataSourceParametersSparkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersSparkPtrOutput)
}

type DataSourceParametersSparkOutput struct{ *pulumi.OutputState }

func (DataSourceParametersSparkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersSpark)(nil)).Elem()
}

func (o DataSourceParametersSparkOutput) ToDataSourceParametersSparkOutput() DataSourceParametersSparkOutput {
	return o
}

func (o DataSourceParametersSparkOutput) ToDataSourceParametersSparkOutputWithContext(ctx context.Context) DataSourceParametersSparkOutput {
	return o
}

func (o DataSourceParametersSparkOutput) ToDataSourceParametersSparkPtrOutput() DataSourceParametersSparkPtrOutput {
	return o.ToDataSourceParametersSparkPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersSparkOutput) ToDataSourceParametersSparkPtrOutputWithContext(ctx context.Context) DataSourceParametersSparkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersSpark) *DataSourceParametersSpark {
		return &v
	}).(DataSourceParametersSparkPtrOutput)
}

// The host to which to connect.
func (o DataSourceParametersSparkOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersSpark) string { return v.Host }).(pulumi.StringOutput)
}

// The warehouse to which to connect.
func (o DataSourceParametersSparkOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v DataSourceParametersSpark) int { return v.Port }).(pulumi.IntOutput)
}

type DataSourceParametersSparkPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersSparkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersSpark)(nil)).Elem()
}

func (o DataSourceParametersSparkPtrOutput) ToDataSourceParametersSparkPtrOutput() DataSourceParametersSparkPtrOutput {
	return o
}

func (o DataSourceParametersSparkPtrOutput) ToDataSourceParametersSparkPtrOutputWithContext(ctx context.Context) DataSourceParametersSparkPtrOutput {
	return o
}

func (o DataSourceParametersSparkPtrOutput) Elem() DataSourceParametersSparkOutput {
	return o.ApplyT(func(v *DataSourceParametersSpark) DataSourceParametersSpark {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersSpark
		return ret
	}).(DataSourceParametersSparkOutput)
}

// The host to which to connect.
func (o DataSourceParametersSparkPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersSpark) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The warehouse to which to connect.
func (o DataSourceParametersSparkPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersSpark) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

type DataSourceParametersSqlServer struct {
	// The database to which to connect.
	Database string `pulumi:"database"`
	// The host to which to connect.
	Host string `pulumi:"host"`
	// The warehouse to which to connect.
	Port int `pulumi:"port"`
}

// DataSourceParametersSqlServerInput is an input type that accepts DataSourceParametersSqlServerArgs and DataSourceParametersSqlServerOutput values.
// You can construct a concrete instance of `DataSourceParametersSqlServerInput` via:
//
//	DataSourceParametersSqlServerArgs{...}
type DataSourceParametersSqlServerInput interface {
	pulumi.Input

	ToDataSourceParametersSqlServerOutput() DataSourceParametersSqlServerOutput
	ToDataSourceParametersSqlServerOutputWithContext(context.Context) DataSourceParametersSqlServerOutput
}

type DataSourceParametersSqlServerArgs struct {
	// The database to which to connect.
	Database pulumi.StringInput `pulumi:"database"`
	// The host to which to connect.
	Host pulumi.StringInput `pulumi:"host"`
	// The warehouse to which to connect.
	Port pulumi.IntInput `pulumi:"port"`
}

func (DataSourceParametersSqlServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersSqlServer)(nil)).Elem()
}

func (i DataSourceParametersSqlServerArgs) ToDataSourceParametersSqlServerOutput() DataSourceParametersSqlServerOutput {
	return i.ToDataSourceParametersSqlServerOutputWithContext(context.Background())
}

func (i DataSourceParametersSqlServerArgs) ToDataSourceParametersSqlServerOutputWithContext(ctx context.Context) DataSourceParametersSqlServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersSqlServerOutput)
}

func (i DataSourceParametersSqlServerArgs) ToDataSourceParametersSqlServerPtrOutput() DataSourceParametersSqlServerPtrOutput {
	return i.ToDataSourceParametersSqlServerPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersSqlServerArgs) ToDataSourceParametersSqlServerPtrOutputWithContext(ctx context.Context) DataSourceParametersSqlServerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersSqlServerOutput).ToDataSourceParametersSqlServerPtrOutputWithContext(ctx)
}

// DataSourceParametersSqlServerPtrInput is an input type that accepts DataSourceParametersSqlServerArgs, DataSourceParametersSqlServerPtr and DataSourceParametersSqlServerPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersSqlServerPtrInput` via:
//
//	        DataSourceParametersSqlServerArgs{...}
//
//	or:
//
//	        nil
type DataSourceParametersSqlServerPtrInput interface {
	pulumi.Input

	ToDataSourceParametersSqlServerPtrOutput() DataSourceParametersSqlServerPtrOutput
	ToDataSourceParametersSqlServerPtrOutputWithContext(context.Context) DataSourceParametersSqlServerPtrOutput
}

type dataSourceParametersSqlServerPtrType DataSourceParametersSqlServerArgs

func DataSourceParametersSqlServerPtr(v *DataSourceParametersSqlServerArgs) DataSourceParametersSqlServerPtrInput {
	return (*dataSourceParametersSqlServerPtrType)(v)
}

func (*dataSourceParametersSqlServerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersSqlServer)(nil)).Elem()
}

func (i *dataSourceParametersSqlServerPtrType) ToDataSourceParametersSqlServerPtrOutput() DataSourceParametersSqlServerPtrOutput {
	return i.ToDataSourceParametersSqlServerPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersSqlServerPtrType) ToDataSourceParametersSqlServerPtrOutputWithContext(ctx context.Context) DataSourceParametersSqlServerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersSqlServerPtrOutput)
}

type DataSourceParametersSqlServerOutput struct{ *pulumi.OutputState }

func (DataSourceParametersSqlServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersSqlServer)(nil)).Elem()
}

func (o DataSourceParametersSqlServerOutput) ToDataSourceParametersSqlServerOutput() DataSourceParametersSqlServerOutput {
	return o
}

func (o DataSourceParametersSqlServerOutput) ToDataSourceParametersSqlServerOutputWithContext(ctx context.Context) DataSourceParametersSqlServerOutput {
	return o
}

func (o DataSourceParametersSqlServerOutput) ToDataSourceParametersSqlServerPtrOutput() DataSourceParametersSqlServerPtrOutput {
	return o.ToDataSourceParametersSqlServerPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersSqlServerOutput) ToDataSourceParametersSqlServerPtrOutputWithContext(ctx context.Context) DataSourceParametersSqlServerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersSqlServer) *DataSourceParametersSqlServer {
		return &v
	}).(DataSourceParametersSqlServerPtrOutput)
}

// The database to which to connect.
func (o DataSourceParametersSqlServerOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersSqlServer) string { return v.Database }).(pulumi.StringOutput)
}

// The host to which to connect.
func (o DataSourceParametersSqlServerOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersSqlServer) string { return v.Host }).(pulumi.StringOutput)
}

// The warehouse to which to connect.
func (o DataSourceParametersSqlServerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v DataSourceParametersSqlServer) int { return v.Port }).(pulumi.IntOutput)
}

type DataSourceParametersSqlServerPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersSqlServerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersSqlServer)(nil)).Elem()
}

func (o DataSourceParametersSqlServerPtrOutput) ToDataSourceParametersSqlServerPtrOutput() DataSourceParametersSqlServerPtrOutput {
	return o
}

func (o DataSourceParametersSqlServerPtrOutput) ToDataSourceParametersSqlServerPtrOutputWithContext(ctx context.Context) DataSourceParametersSqlServerPtrOutput {
	return o
}

func (o DataSourceParametersSqlServerPtrOutput) Elem() DataSourceParametersSqlServerOutput {
	return o.ApplyT(func(v *DataSourceParametersSqlServer) DataSourceParametersSqlServer {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersSqlServer
		return ret
	}).(DataSourceParametersSqlServerOutput)
}

// The database to which to connect.
func (o DataSourceParametersSqlServerPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersSqlServer) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// The host to which to connect.
func (o DataSourceParametersSqlServerPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersSqlServer) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The warehouse to which to connect.
func (o DataSourceParametersSqlServerPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersSqlServer) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

type DataSourceParametersTeradata struct {
	// The database to which to connect.
	Database string `pulumi:"database"`
	// The host to which to connect.
	Host string `pulumi:"host"`
	// The warehouse to which to connect.
	Port int `pulumi:"port"`
}

// DataSourceParametersTeradataInput is an input type that accepts DataSourceParametersTeradataArgs and DataSourceParametersTeradataOutput values.
// You can construct a concrete instance of `DataSourceParametersTeradataInput` via:
//
//	DataSourceParametersTeradataArgs{...}
type DataSourceParametersTeradataInput interface {
	pulumi.Input

	ToDataSourceParametersTeradataOutput() DataSourceParametersTeradataOutput
	ToDataSourceParametersTeradataOutputWithContext(context.Context) DataSourceParametersTeradataOutput
}

type DataSourceParametersTeradataArgs struct {
	// The database to which to connect.
	Database pulumi.StringInput `pulumi:"database"`
	// The host to which to connect.
	Host pulumi.StringInput `pulumi:"host"`
	// The warehouse to which to connect.
	Port pulumi.IntInput `pulumi:"port"`
}

func (DataSourceParametersTeradataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersTeradata)(nil)).Elem()
}

func (i DataSourceParametersTeradataArgs) ToDataSourceParametersTeradataOutput() DataSourceParametersTeradataOutput {
	return i.ToDataSourceParametersTeradataOutputWithContext(context.Background())
}

func (i DataSourceParametersTeradataArgs) ToDataSourceParametersTeradataOutputWithContext(ctx context.Context) DataSourceParametersTeradataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersTeradataOutput)
}

func (i DataSourceParametersTeradataArgs) ToDataSourceParametersTeradataPtrOutput() DataSourceParametersTeradataPtrOutput {
	return i.ToDataSourceParametersTeradataPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersTeradataArgs) ToDataSourceParametersTeradataPtrOutputWithContext(ctx context.Context) DataSourceParametersTeradataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersTeradataOutput).ToDataSourceParametersTeradataPtrOutputWithContext(ctx)
}

// DataSourceParametersTeradataPtrInput is an input type that accepts DataSourceParametersTeradataArgs, DataSourceParametersTeradataPtr and DataSourceParametersTeradataPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersTeradataPtrInput` via:
//
//	        DataSourceParametersTeradataArgs{...}
//
//	or:
//
//	        nil
type DataSourceParametersTeradataPtrInput interface {
	pulumi.Input

	ToDataSourceParametersTeradataPtrOutput() DataSourceParametersTeradataPtrOutput
	ToDataSourceParametersTeradataPtrOutputWithContext(context.Context) DataSourceParametersTeradataPtrOutput
}

type dataSourceParametersTeradataPtrType DataSourceParametersTeradataArgs

func DataSourceParametersTeradataPtr(v *DataSourceParametersTeradataArgs) DataSourceParametersTeradataPtrInput {
	return (*dataSourceParametersTeradataPtrType)(v)
}

func (*dataSourceParametersTeradataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersTeradata)(nil)).Elem()
}

func (i *dataSourceParametersTeradataPtrType) ToDataSourceParametersTeradataPtrOutput() DataSourceParametersTeradataPtrOutput {
	return i.ToDataSourceParametersTeradataPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersTeradataPtrType) ToDataSourceParametersTeradataPtrOutputWithContext(ctx context.Context) DataSourceParametersTeradataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersTeradataPtrOutput)
}

type DataSourceParametersTeradataOutput struct{ *pulumi.OutputState }

func (DataSourceParametersTeradataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersTeradata)(nil)).Elem()
}

func (o DataSourceParametersTeradataOutput) ToDataSourceParametersTeradataOutput() DataSourceParametersTeradataOutput {
	return o
}

func (o DataSourceParametersTeradataOutput) ToDataSourceParametersTeradataOutputWithContext(ctx context.Context) DataSourceParametersTeradataOutput {
	return o
}

func (o DataSourceParametersTeradataOutput) ToDataSourceParametersTeradataPtrOutput() DataSourceParametersTeradataPtrOutput {
	return o.ToDataSourceParametersTeradataPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersTeradataOutput) ToDataSourceParametersTeradataPtrOutputWithContext(ctx context.Context) DataSourceParametersTeradataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersTeradata) *DataSourceParametersTeradata {
		return &v
	}).(DataSourceParametersTeradataPtrOutput)
}

// The database to which to connect.
func (o DataSourceParametersTeradataOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersTeradata) string { return v.Database }).(pulumi.StringOutput)
}

// The host to which to connect.
func (o DataSourceParametersTeradataOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersTeradata) string { return v.Host }).(pulumi.StringOutput)
}

// The warehouse to which to connect.
func (o DataSourceParametersTeradataOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v DataSourceParametersTeradata) int { return v.Port }).(pulumi.IntOutput)
}

type DataSourceParametersTeradataPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersTeradataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersTeradata)(nil)).Elem()
}

func (o DataSourceParametersTeradataPtrOutput) ToDataSourceParametersTeradataPtrOutput() DataSourceParametersTeradataPtrOutput {
	return o
}

func (o DataSourceParametersTeradataPtrOutput) ToDataSourceParametersTeradataPtrOutputWithContext(ctx context.Context) DataSourceParametersTeradataPtrOutput {
	return o
}

func (o DataSourceParametersTeradataPtrOutput) Elem() DataSourceParametersTeradataOutput {
	return o.ApplyT(func(v *DataSourceParametersTeradata) DataSourceParametersTeradata {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersTeradata
		return ret
	}).(DataSourceParametersTeradataOutput)
}

// The database to which to connect.
func (o DataSourceParametersTeradataPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersTeradata) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// The host to which to connect.
func (o DataSourceParametersTeradataPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersTeradata) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The warehouse to which to connect.
func (o DataSourceParametersTeradataPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersTeradata) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

type DataSourceParametersTwitter struct {
	// The maximum number of rows to query.
	MaxRows int `pulumi:"maxRows"`
	// The Twitter query to retrieve the data.
	Query string `pulumi:"query"`
}

// DataSourceParametersTwitterInput is an input type that accepts DataSourceParametersTwitterArgs and DataSourceParametersTwitterOutput values.
// You can construct a concrete instance of `DataSourceParametersTwitterInput` via:
//
//	DataSourceParametersTwitterArgs{...}
type DataSourceParametersTwitterInput interface {
	pulumi.Input

	ToDataSourceParametersTwitterOutput() DataSourceParametersTwitterOutput
	ToDataSourceParametersTwitterOutputWithContext(context.Context) DataSourceParametersTwitterOutput
}

type DataSourceParametersTwitterArgs struct {
	// The maximum number of rows to query.
	MaxRows pulumi.IntInput `pulumi:"maxRows"`
	// The Twitter query to retrieve the data.
	Query pulumi.StringInput `pulumi:"query"`
}

func (DataSourceParametersTwitterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersTwitter)(nil)).Elem()
}

func (i DataSourceParametersTwitterArgs) ToDataSourceParametersTwitterOutput() DataSourceParametersTwitterOutput {
	return i.ToDataSourceParametersTwitterOutputWithContext(context.Background())
}

func (i DataSourceParametersTwitterArgs) ToDataSourceParametersTwitterOutputWithContext(ctx context.Context) DataSourceParametersTwitterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersTwitterOutput)
}

func (i DataSourceParametersTwitterArgs) ToDataSourceParametersTwitterPtrOutput() DataSourceParametersTwitterPtrOutput {
	return i.ToDataSourceParametersTwitterPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersTwitterArgs) ToDataSourceParametersTwitterPtrOutputWithContext(ctx context.Context) DataSourceParametersTwitterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersTwitterOutput).ToDataSourceParametersTwitterPtrOutputWithContext(ctx)
}

// DataSourceParametersTwitterPtrInput is an input type that accepts DataSourceParametersTwitterArgs, DataSourceParametersTwitterPtr and DataSourceParametersTwitterPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersTwitterPtrInput` via:
//
//	        DataSourceParametersTwitterArgs{...}
//
//	or:
//
//	        nil
type DataSourceParametersTwitterPtrInput interface {
	pulumi.Input

	ToDataSourceParametersTwitterPtrOutput() DataSourceParametersTwitterPtrOutput
	ToDataSourceParametersTwitterPtrOutputWithContext(context.Context) DataSourceParametersTwitterPtrOutput
}

type dataSourceParametersTwitterPtrType DataSourceParametersTwitterArgs

func DataSourceParametersTwitterPtr(v *DataSourceParametersTwitterArgs) DataSourceParametersTwitterPtrInput {
	return (*dataSourceParametersTwitterPtrType)(v)
}

func (*dataSourceParametersTwitterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersTwitter)(nil)).Elem()
}

func (i *dataSourceParametersTwitterPtrType) ToDataSourceParametersTwitterPtrOutput() DataSourceParametersTwitterPtrOutput {
	return i.ToDataSourceParametersTwitterPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersTwitterPtrType) ToDataSourceParametersTwitterPtrOutputWithContext(ctx context.Context) DataSourceParametersTwitterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersTwitterPtrOutput)
}

type DataSourceParametersTwitterOutput struct{ *pulumi.OutputState }

func (DataSourceParametersTwitterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParametersTwitter)(nil)).Elem()
}

func (o DataSourceParametersTwitterOutput) ToDataSourceParametersTwitterOutput() DataSourceParametersTwitterOutput {
	return o
}

func (o DataSourceParametersTwitterOutput) ToDataSourceParametersTwitterOutputWithContext(ctx context.Context) DataSourceParametersTwitterOutput {
	return o
}

func (o DataSourceParametersTwitterOutput) ToDataSourceParametersTwitterPtrOutput() DataSourceParametersTwitterPtrOutput {
	return o.ToDataSourceParametersTwitterPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersTwitterOutput) ToDataSourceParametersTwitterPtrOutputWithContext(ctx context.Context) DataSourceParametersTwitterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParametersTwitter) *DataSourceParametersTwitter {
		return &v
	}).(DataSourceParametersTwitterPtrOutput)
}

// The maximum number of rows to query.
func (o DataSourceParametersTwitterOutput) MaxRows() pulumi.IntOutput {
	return o.ApplyT(func(v DataSourceParametersTwitter) int { return v.MaxRows }).(pulumi.IntOutput)
}

// The Twitter query to retrieve the data.
func (o DataSourceParametersTwitterOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceParametersTwitter) string { return v.Query }).(pulumi.StringOutput)
}

type DataSourceParametersTwitterPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersTwitterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParametersTwitter)(nil)).Elem()
}

func (o DataSourceParametersTwitterPtrOutput) ToDataSourceParametersTwitterPtrOutput() DataSourceParametersTwitterPtrOutput {
	return o
}

func (o DataSourceParametersTwitterPtrOutput) ToDataSourceParametersTwitterPtrOutputWithContext(ctx context.Context) DataSourceParametersTwitterPtrOutput {
	return o
}

func (o DataSourceParametersTwitterPtrOutput) Elem() DataSourceParametersTwitterOutput {
	return o.ApplyT(func(v *DataSourceParametersTwitter) DataSourceParametersTwitter {
		if v != nil {
			return *v
		}
		var ret DataSourceParametersTwitter
		return ret
	}).(DataSourceParametersTwitterOutput)
}

// The maximum number of rows to query.
func (o DataSourceParametersTwitterPtrOutput) MaxRows() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersTwitter) *int {
		if v == nil {
			return nil
		}
		return &v.MaxRows
	}).(pulumi.IntPtrOutput)
}

// The Twitter query to retrieve the data.
func (o DataSourceParametersTwitterPtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceParametersTwitter) *string {
		if v == nil {
			return nil
		}
		return &v.Query
	}).(pulumi.StringPtrOutput)
}

type DataSourcePermission struct {
	// Set of IAM actions to grant or revoke permissions on. Max of 16 items.
	Actions []string `pulumi:"actions"`
	// The Amazon Resource Name (ARN) of the principal.
	Principal string `pulumi:"principal"`
}

// DataSourcePermissionInput is an input type that accepts DataSourcePermissionArgs and DataSourcePermissionOutput values.
// You can construct a concrete instance of `DataSourcePermissionInput` via:
//
//	DataSourcePermissionArgs{...}
type DataSourcePermissionInput interface {
	pulumi.Input

	ToDataSourcePermissionOutput() DataSourcePermissionOutput
	ToDataSourcePermissionOutputWithContext(context.Context) DataSourcePermissionOutput
}

type DataSourcePermissionArgs struct {
	// Set of IAM actions to grant or revoke permissions on. Max of 16 items.
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// The Amazon Resource Name (ARN) of the principal.
	Principal pulumi.StringInput `pulumi:"principal"`
}

func (DataSourcePermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourcePermission)(nil)).Elem()
}

func (i DataSourcePermissionArgs) ToDataSourcePermissionOutput() DataSourcePermissionOutput {
	return i.ToDataSourcePermissionOutputWithContext(context.Background())
}

func (i DataSourcePermissionArgs) ToDataSourcePermissionOutputWithContext(ctx context.Context) DataSourcePermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourcePermissionOutput)
}

// DataSourcePermissionArrayInput is an input type that accepts DataSourcePermissionArray and DataSourcePermissionArrayOutput values.
// You can construct a concrete instance of `DataSourcePermissionArrayInput` via:
//
//	DataSourcePermissionArray{ DataSourcePermissionArgs{...} }
type DataSourcePermissionArrayInput interface {
	pulumi.Input

	ToDataSourcePermissionArrayOutput() DataSourcePermissionArrayOutput
	ToDataSourcePermissionArrayOutputWithContext(context.Context) DataSourcePermissionArrayOutput
}

type DataSourcePermissionArray []DataSourcePermissionInput

func (DataSourcePermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSourcePermission)(nil)).Elem()
}

func (i DataSourcePermissionArray) ToDataSourcePermissionArrayOutput() DataSourcePermissionArrayOutput {
	return i.ToDataSourcePermissionArrayOutputWithContext(context.Background())
}

func (i DataSourcePermissionArray) ToDataSourcePermissionArrayOutputWithContext(ctx context.Context) DataSourcePermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourcePermissionArrayOutput)
}

type DataSourcePermissionOutput struct{ *pulumi.OutputState }

func (DataSourcePermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourcePermission)(nil)).Elem()
}

func (o DataSourcePermissionOutput) ToDataSourcePermissionOutput() DataSourcePermissionOutput {
	return o
}

func (o DataSourcePermissionOutput) ToDataSourcePermissionOutputWithContext(ctx context.Context) DataSourcePermissionOutput {
	return o
}

// Set of IAM actions to grant or revoke permissions on. Max of 16 items.
func (o DataSourcePermissionOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataSourcePermission) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// The Amazon Resource Name (ARN) of the principal.
func (o DataSourcePermissionOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourcePermission) string { return v.Principal }).(pulumi.StringOutput)
}

type DataSourcePermissionArrayOutput struct{ *pulumi.OutputState }

func (DataSourcePermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSourcePermission)(nil)).Elem()
}

func (o DataSourcePermissionArrayOutput) ToDataSourcePermissionArrayOutput() DataSourcePermissionArrayOutput {
	return o
}

func (o DataSourcePermissionArrayOutput) ToDataSourcePermissionArrayOutputWithContext(ctx context.Context) DataSourcePermissionArrayOutput {
	return o
}

func (o DataSourcePermissionArrayOutput) Index(i pulumi.IntInput) DataSourcePermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSourcePermission {
		return vs[0].([]DataSourcePermission)[vs[1].(int)]
	}).(DataSourcePermissionOutput)
}

type DataSourceSslProperties struct {
	// A Boolean option to control whether SSL should be disabled.
	DisableSsl bool `pulumi:"disableSsl"`
}

// DataSourceSslPropertiesInput is an input type that accepts DataSourceSslPropertiesArgs and DataSourceSslPropertiesOutput values.
// You can construct a concrete instance of `DataSourceSslPropertiesInput` via:
//
//	DataSourceSslPropertiesArgs{...}
type DataSourceSslPropertiesInput interface {
	pulumi.Input

	ToDataSourceSslPropertiesOutput() DataSourceSslPropertiesOutput
	ToDataSourceSslPropertiesOutputWithContext(context.Context) DataSourceSslPropertiesOutput
}

type DataSourceSslPropertiesArgs struct {
	// A Boolean option to control whether SSL should be disabled.
	DisableSsl pulumi.BoolInput `pulumi:"disableSsl"`
}

func (DataSourceSslPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceSslProperties)(nil)).Elem()
}

func (i DataSourceSslPropertiesArgs) ToDataSourceSslPropertiesOutput() DataSourceSslPropertiesOutput {
	return i.ToDataSourceSslPropertiesOutputWithContext(context.Background())
}

func (i DataSourceSslPropertiesArgs) ToDataSourceSslPropertiesOutputWithContext(ctx context.Context) DataSourceSslPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceSslPropertiesOutput)
}

func (i DataSourceSslPropertiesArgs) ToDataSourceSslPropertiesPtrOutput() DataSourceSslPropertiesPtrOutput {
	return i.ToDataSourceSslPropertiesPtrOutputWithContext(context.Background())
}

func (i DataSourceSslPropertiesArgs) ToDataSourceSslPropertiesPtrOutputWithContext(ctx context.Context) DataSourceSslPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceSslPropertiesOutput).ToDataSourceSslPropertiesPtrOutputWithContext(ctx)
}

// DataSourceSslPropertiesPtrInput is an input type that accepts DataSourceSslPropertiesArgs, DataSourceSslPropertiesPtr and DataSourceSslPropertiesPtrOutput values.
// You can construct a concrete instance of `DataSourceSslPropertiesPtrInput` via:
//
//	        DataSourceSslPropertiesArgs{...}
//
//	or:
//
//	        nil
type DataSourceSslPropertiesPtrInput interface {
	pulumi.Input

	ToDataSourceSslPropertiesPtrOutput() DataSourceSslPropertiesPtrOutput
	ToDataSourceSslPropertiesPtrOutputWithContext(context.Context) DataSourceSslPropertiesPtrOutput
}

type dataSourceSslPropertiesPtrType DataSourceSslPropertiesArgs

func DataSourceSslPropertiesPtr(v *DataSourceSslPropertiesArgs) DataSourceSslPropertiesPtrInput {
	return (*dataSourceSslPropertiesPtrType)(v)
}

func (*dataSourceSslPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceSslProperties)(nil)).Elem()
}

func (i *dataSourceSslPropertiesPtrType) ToDataSourceSslPropertiesPtrOutput() DataSourceSslPropertiesPtrOutput {
	return i.ToDataSourceSslPropertiesPtrOutputWithContext(context.Background())
}

func (i *dataSourceSslPropertiesPtrType) ToDataSourceSslPropertiesPtrOutputWithContext(ctx context.Context) DataSourceSslPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceSslPropertiesPtrOutput)
}

type DataSourceSslPropertiesOutput struct{ *pulumi.OutputState }

func (DataSourceSslPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceSslProperties)(nil)).Elem()
}

func (o DataSourceSslPropertiesOutput) ToDataSourceSslPropertiesOutput() DataSourceSslPropertiesOutput {
	return o
}

func (o DataSourceSslPropertiesOutput) ToDataSourceSslPropertiesOutputWithContext(ctx context.Context) DataSourceSslPropertiesOutput {
	return o
}

func (o DataSourceSslPropertiesOutput) ToDataSourceSslPropertiesPtrOutput() DataSourceSslPropertiesPtrOutput {
	return o.ToDataSourceSslPropertiesPtrOutputWithContext(context.Background())
}

func (o DataSourceSslPropertiesOutput) ToDataSourceSslPropertiesPtrOutputWithContext(ctx context.Context) DataSourceSslPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceSslProperties) *DataSourceSslProperties {
		return &v
	}).(DataSourceSslPropertiesPtrOutput)
}

// A Boolean option to control whether SSL should be disabled.
func (o DataSourceSslPropertiesOutput) DisableSsl() pulumi.BoolOutput {
	return o.ApplyT(func(v DataSourceSslProperties) bool { return v.DisableSsl }).(pulumi.BoolOutput)
}

type DataSourceSslPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DataSourceSslPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceSslProperties)(nil)).Elem()
}

func (o DataSourceSslPropertiesPtrOutput) ToDataSourceSslPropertiesPtrOutput() DataSourceSslPropertiesPtrOutput {
	return o
}

func (o DataSourceSslPropertiesPtrOutput) ToDataSourceSslPropertiesPtrOutputWithContext(ctx context.Context) DataSourceSslPropertiesPtrOutput {
	return o
}

func (o DataSourceSslPropertiesPtrOutput) Elem() DataSourceSslPropertiesOutput {
	return o.ApplyT(func(v *DataSourceSslProperties) DataSourceSslProperties {
		if v != nil {
			return *v
		}
		var ret DataSourceSslProperties
		return ret
	}).(DataSourceSslPropertiesOutput)
}

// A Boolean option to control whether SSL should be disabled.
func (o DataSourceSslPropertiesPtrOutput) DisableSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataSourceSslProperties) *bool {
		if v == nil {
			return nil
		}
		return &v.DisableSsl
	}).(pulumi.BoolPtrOutput)
}

type DataSourceVpcConnectionProperties struct {
	// The Amazon Resource Name (ARN) for the VPC connection.
	VpcConnectionArn string `pulumi:"vpcConnectionArn"`
}

// DataSourceVpcConnectionPropertiesInput is an input type that accepts DataSourceVpcConnectionPropertiesArgs and DataSourceVpcConnectionPropertiesOutput values.
// You can construct a concrete instance of `DataSourceVpcConnectionPropertiesInput` via:
//
//	DataSourceVpcConnectionPropertiesArgs{...}
type DataSourceVpcConnectionPropertiesInput interface {
	pulumi.Input

	ToDataSourceVpcConnectionPropertiesOutput() DataSourceVpcConnectionPropertiesOutput
	ToDataSourceVpcConnectionPropertiesOutputWithContext(context.Context) DataSourceVpcConnectionPropertiesOutput
}

type DataSourceVpcConnectionPropertiesArgs struct {
	// The Amazon Resource Name (ARN) for the VPC connection.
	VpcConnectionArn pulumi.StringInput `pulumi:"vpcConnectionArn"`
}

func (DataSourceVpcConnectionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceVpcConnectionProperties)(nil)).Elem()
}

func (i DataSourceVpcConnectionPropertiesArgs) ToDataSourceVpcConnectionPropertiesOutput() DataSourceVpcConnectionPropertiesOutput {
	return i.ToDataSourceVpcConnectionPropertiesOutputWithContext(context.Background())
}

func (i DataSourceVpcConnectionPropertiesArgs) ToDataSourceVpcConnectionPropertiesOutputWithContext(ctx context.Context) DataSourceVpcConnectionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceVpcConnectionPropertiesOutput)
}

func (i DataSourceVpcConnectionPropertiesArgs) ToDataSourceVpcConnectionPropertiesPtrOutput() DataSourceVpcConnectionPropertiesPtrOutput {
	return i.ToDataSourceVpcConnectionPropertiesPtrOutputWithContext(context.Background())
}

func (i DataSourceVpcConnectionPropertiesArgs) ToDataSourceVpcConnectionPropertiesPtrOutputWithContext(ctx context.Context) DataSourceVpcConnectionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceVpcConnectionPropertiesOutput).ToDataSourceVpcConnectionPropertiesPtrOutputWithContext(ctx)
}

// DataSourceVpcConnectionPropertiesPtrInput is an input type that accepts DataSourceVpcConnectionPropertiesArgs, DataSourceVpcConnectionPropertiesPtr and DataSourceVpcConnectionPropertiesPtrOutput values.
// You can construct a concrete instance of `DataSourceVpcConnectionPropertiesPtrInput` via:
//
//	        DataSourceVpcConnectionPropertiesArgs{...}
//
//	or:
//
//	        nil
type DataSourceVpcConnectionPropertiesPtrInput interface {
	pulumi.Input

	ToDataSourceVpcConnectionPropertiesPtrOutput() DataSourceVpcConnectionPropertiesPtrOutput
	ToDataSourceVpcConnectionPropertiesPtrOutputWithContext(context.Context) DataSourceVpcConnectionPropertiesPtrOutput
}

type dataSourceVpcConnectionPropertiesPtrType DataSourceVpcConnectionPropertiesArgs

func DataSourceVpcConnectionPropertiesPtr(v *DataSourceVpcConnectionPropertiesArgs) DataSourceVpcConnectionPropertiesPtrInput {
	return (*dataSourceVpcConnectionPropertiesPtrType)(v)
}

func (*dataSourceVpcConnectionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceVpcConnectionProperties)(nil)).Elem()
}

func (i *dataSourceVpcConnectionPropertiesPtrType) ToDataSourceVpcConnectionPropertiesPtrOutput() DataSourceVpcConnectionPropertiesPtrOutput {
	return i.ToDataSourceVpcConnectionPropertiesPtrOutputWithContext(context.Background())
}

func (i *dataSourceVpcConnectionPropertiesPtrType) ToDataSourceVpcConnectionPropertiesPtrOutputWithContext(ctx context.Context) DataSourceVpcConnectionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceVpcConnectionPropertiesPtrOutput)
}

type DataSourceVpcConnectionPropertiesOutput struct{ *pulumi.OutputState }

func (DataSourceVpcConnectionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceVpcConnectionProperties)(nil)).Elem()
}

func (o DataSourceVpcConnectionPropertiesOutput) ToDataSourceVpcConnectionPropertiesOutput() DataSourceVpcConnectionPropertiesOutput {
	return o
}

func (o DataSourceVpcConnectionPropertiesOutput) ToDataSourceVpcConnectionPropertiesOutputWithContext(ctx context.Context) DataSourceVpcConnectionPropertiesOutput {
	return o
}

func (o DataSourceVpcConnectionPropertiesOutput) ToDataSourceVpcConnectionPropertiesPtrOutput() DataSourceVpcConnectionPropertiesPtrOutput {
	return o.ToDataSourceVpcConnectionPropertiesPtrOutputWithContext(context.Background())
}

func (o DataSourceVpcConnectionPropertiesOutput) ToDataSourceVpcConnectionPropertiesPtrOutputWithContext(ctx context.Context) DataSourceVpcConnectionPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceVpcConnectionProperties) *DataSourceVpcConnectionProperties {
		return &v
	}).(DataSourceVpcConnectionPropertiesPtrOutput)
}

// The Amazon Resource Name (ARN) for the VPC connection.
func (o DataSourceVpcConnectionPropertiesOutput) VpcConnectionArn() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceVpcConnectionProperties) string { return v.VpcConnectionArn }).(pulumi.StringOutput)
}

type DataSourceVpcConnectionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DataSourceVpcConnectionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceVpcConnectionProperties)(nil)).Elem()
}

func (o DataSourceVpcConnectionPropertiesPtrOutput) ToDataSourceVpcConnectionPropertiesPtrOutput() DataSourceVpcConnectionPropertiesPtrOutput {
	return o
}

func (o DataSourceVpcConnectionPropertiesPtrOutput) ToDataSourceVpcConnectionPropertiesPtrOutputWithContext(ctx context.Context) DataSourceVpcConnectionPropertiesPtrOutput {
	return o
}

func (o DataSourceVpcConnectionPropertiesPtrOutput) Elem() DataSourceVpcConnectionPropertiesOutput {
	return o.ApplyT(func(v *DataSourceVpcConnectionProperties) DataSourceVpcConnectionProperties {
		if v != nil {
			return *v
		}
		var ret DataSourceVpcConnectionProperties
		return ret
	}).(DataSourceVpcConnectionPropertiesOutput)
}

// The Amazon Resource Name (ARN) for the VPC connection.
func (o DataSourceVpcConnectionPropertiesPtrOutput) VpcConnectionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceVpcConnectionProperties) *string {
		if v == nil {
			return nil
		}
		return &v.VpcConnectionArn
	}).(pulumi.StringPtrOutput)
}

type FolderPermission struct {
	// List of IAM actions to grant or revoke permissions on.
	Actions []string `pulumi:"actions"`
	// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
	Principal string `pulumi:"principal"`
}

// FolderPermissionInput is an input type that accepts FolderPermissionArgs and FolderPermissionOutput values.
// You can construct a concrete instance of `FolderPermissionInput` via:
//
//	FolderPermissionArgs{...}
type FolderPermissionInput interface {
	pulumi.Input

	ToFolderPermissionOutput() FolderPermissionOutput
	ToFolderPermissionOutputWithContext(context.Context) FolderPermissionOutput
}

type FolderPermissionArgs struct {
	// List of IAM actions to grant or revoke permissions on.
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
	Principal pulumi.StringInput `pulumi:"principal"`
}

func (FolderPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FolderPermission)(nil)).Elem()
}

func (i FolderPermissionArgs) ToFolderPermissionOutput() FolderPermissionOutput {
	return i.ToFolderPermissionOutputWithContext(context.Background())
}

func (i FolderPermissionArgs) ToFolderPermissionOutputWithContext(ctx context.Context) FolderPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderPermissionOutput)
}

// FolderPermissionArrayInput is an input type that accepts FolderPermissionArray and FolderPermissionArrayOutput values.
// You can construct a concrete instance of `FolderPermissionArrayInput` via:
//
//	FolderPermissionArray{ FolderPermissionArgs{...} }
type FolderPermissionArrayInput interface {
	pulumi.Input

	ToFolderPermissionArrayOutput() FolderPermissionArrayOutput
	ToFolderPermissionArrayOutputWithContext(context.Context) FolderPermissionArrayOutput
}

type FolderPermissionArray []FolderPermissionInput

func (FolderPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FolderPermission)(nil)).Elem()
}

func (i FolderPermissionArray) ToFolderPermissionArrayOutput() FolderPermissionArrayOutput {
	return i.ToFolderPermissionArrayOutputWithContext(context.Background())
}

func (i FolderPermissionArray) ToFolderPermissionArrayOutputWithContext(ctx context.Context) FolderPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderPermissionArrayOutput)
}

type FolderPermissionOutput struct{ *pulumi.OutputState }

func (FolderPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FolderPermission)(nil)).Elem()
}

func (o FolderPermissionOutput) ToFolderPermissionOutput() FolderPermissionOutput {
	return o
}

func (o FolderPermissionOutput) ToFolderPermissionOutputWithContext(ctx context.Context) FolderPermissionOutput {
	return o
}

// List of IAM actions to grant or revoke permissions on.
func (o FolderPermissionOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FolderPermission) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
func (o FolderPermissionOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v FolderPermission) string { return v.Principal }).(pulumi.StringOutput)
}

type FolderPermissionArrayOutput struct{ *pulumi.OutputState }

func (FolderPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FolderPermission)(nil)).Elem()
}

func (o FolderPermissionArrayOutput) ToFolderPermissionArrayOutput() FolderPermissionArrayOutput {
	return o
}

func (o FolderPermissionArrayOutput) ToFolderPermissionArrayOutputWithContext(ctx context.Context) FolderPermissionArrayOutput {
	return o
}

func (o FolderPermissionArrayOutput) Index(i pulumi.IntInput) FolderPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FolderPermission {
		return vs[0].([]FolderPermission)[vs[1].(int)]
	}).(FolderPermissionOutput)
}

type IamPolicyAssignmentIdentities struct {
	Groups []string `pulumi:"groups"`
	// Array of Quicksight user names to assign the policy to.
	Users []string `pulumi:"users"`
}

// IamPolicyAssignmentIdentitiesInput is an input type that accepts IamPolicyAssignmentIdentitiesArgs and IamPolicyAssignmentIdentitiesOutput values.
// You can construct a concrete instance of `IamPolicyAssignmentIdentitiesInput` via:
//
//	IamPolicyAssignmentIdentitiesArgs{...}
type IamPolicyAssignmentIdentitiesInput interface {
	pulumi.Input

	ToIamPolicyAssignmentIdentitiesOutput() IamPolicyAssignmentIdentitiesOutput
	ToIamPolicyAssignmentIdentitiesOutputWithContext(context.Context) IamPolicyAssignmentIdentitiesOutput
}

type IamPolicyAssignmentIdentitiesArgs struct {
	Groups pulumi.StringArrayInput `pulumi:"groups"`
	// Array of Quicksight user names to assign the policy to.
	Users pulumi.StringArrayInput `pulumi:"users"`
}

func (IamPolicyAssignmentIdentitiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IamPolicyAssignmentIdentities)(nil)).Elem()
}

func (i IamPolicyAssignmentIdentitiesArgs) ToIamPolicyAssignmentIdentitiesOutput() IamPolicyAssignmentIdentitiesOutput {
	return i.ToIamPolicyAssignmentIdentitiesOutputWithContext(context.Background())
}

func (i IamPolicyAssignmentIdentitiesArgs) ToIamPolicyAssignmentIdentitiesOutputWithContext(ctx context.Context) IamPolicyAssignmentIdentitiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamPolicyAssignmentIdentitiesOutput)
}

func (i IamPolicyAssignmentIdentitiesArgs) ToIamPolicyAssignmentIdentitiesPtrOutput() IamPolicyAssignmentIdentitiesPtrOutput {
	return i.ToIamPolicyAssignmentIdentitiesPtrOutputWithContext(context.Background())
}

func (i IamPolicyAssignmentIdentitiesArgs) ToIamPolicyAssignmentIdentitiesPtrOutputWithContext(ctx context.Context) IamPolicyAssignmentIdentitiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamPolicyAssignmentIdentitiesOutput).ToIamPolicyAssignmentIdentitiesPtrOutputWithContext(ctx)
}

// IamPolicyAssignmentIdentitiesPtrInput is an input type that accepts IamPolicyAssignmentIdentitiesArgs, IamPolicyAssignmentIdentitiesPtr and IamPolicyAssignmentIdentitiesPtrOutput values.
// You can construct a concrete instance of `IamPolicyAssignmentIdentitiesPtrInput` via:
//
//	        IamPolicyAssignmentIdentitiesArgs{...}
//
//	or:
//
//	        nil
type IamPolicyAssignmentIdentitiesPtrInput interface {
	pulumi.Input

	ToIamPolicyAssignmentIdentitiesPtrOutput() IamPolicyAssignmentIdentitiesPtrOutput
	ToIamPolicyAssignmentIdentitiesPtrOutputWithContext(context.Context) IamPolicyAssignmentIdentitiesPtrOutput
}

type iamPolicyAssignmentIdentitiesPtrType IamPolicyAssignmentIdentitiesArgs

func IamPolicyAssignmentIdentitiesPtr(v *IamPolicyAssignmentIdentitiesArgs) IamPolicyAssignmentIdentitiesPtrInput {
	return (*iamPolicyAssignmentIdentitiesPtrType)(v)
}

func (*iamPolicyAssignmentIdentitiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IamPolicyAssignmentIdentities)(nil)).Elem()
}

func (i *iamPolicyAssignmentIdentitiesPtrType) ToIamPolicyAssignmentIdentitiesPtrOutput() IamPolicyAssignmentIdentitiesPtrOutput {
	return i.ToIamPolicyAssignmentIdentitiesPtrOutputWithContext(context.Background())
}

func (i *iamPolicyAssignmentIdentitiesPtrType) ToIamPolicyAssignmentIdentitiesPtrOutputWithContext(ctx context.Context) IamPolicyAssignmentIdentitiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamPolicyAssignmentIdentitiesPtrOutput)
}

type IamPolicyAssignmentIdentitiesOutput struct{ *pulumi.OutputState }

func (IamPolicyAssignmentIdentitiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IamPolicyAssignmentIdentities)(nil)).Elem()
}

func (o IamPolicyAssignmentIdentitiesOutput) ToIamPolicyAssignmentIdentitiesOutput() IamPolicyAssignmentIdentitiesOutput {
	return o
}

func (o IamPolicyAssignmentIdentitiesOutput) ToIamPolicyAssignmentIdentitiesOutputWithContext(ctx context.Context) IamPolicyAssignmentIdentitiesOutput {
	return o
}

func (o IamPolicyAssignmentIdentitiesOutput) ToIamPolicyAssignmentIdentitiesPtrOutput() IamPolicyAssignmentIdentitiesPtrOutput {
	return o.ToIamPolicyAssignmentIdentitiesPtrOutputWithContext(context.Background())
}

func (o IamPolicyAssignmentIdentitiesOutput) ToIamPolicyAssignmentIdentitiesPtrOutputWithContext(ctx context.Context) IamPolicyAssignmentIdentitiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IamPolicyAssignmentIdentities) *IamPolicyAssignmentIdentities {
		return &v
	}).(IamPolicyAssignmentIdentitiesPtrOutput)
}

func (o IamPolicyAssignmentIdentitiesOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IamPolicyAssignmentIdentities) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

// Array of Quicksight user names to assign the policy to.
func (o IamPolicyAssignmentIdentitiesOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IamPolicyAssignmentIdentities) []string { return v.Users }).(pulumi.StringArrayOutput)
}

type IamPolicyAssignmentIdentitiesPtrOutput struct{ *pulumi.OutputState }

func (IamPolicyAssignmentIdentitiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IamPolicyAssignmentIdentities)(nil)).Elem()
}

func (o IamPolicyAssignmentIdentitiesPtrOutput) ToIamPolicyAssignmentIdentitiesPtrOutput() IamPolicyAssignmentIdentitiesPtrOutput {
	return o
}

func (o IamPolicyAssignmentIdentitiesPtrOutput) ToIamPolicyAssignmentIdentitiesPtrOutputWithContext(ctx context.Context) IamPolicyAssignmentIdentitiesPtrOutput {
	return o
}

func (o IamPolicyAssignmentIdentitiesPtrOutput) Elem() IamPolicyAssignmentIdentitiesOutput {
	return o.ApplyT(func(v *IamPolicyAssignmentIdentities) IamPolicyAssignmentIdentities {
		if v != nil {
			return *v
		}
		var ret IamPolicyAssignmentIdentities
		return ret
	}).(IamPolicyAssignmentIdentitiesOutput)
}

func (o IamPolicyAssignmentIdentitiesPtrOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IamPolicyAssignmentIdentities) []string {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(pulumi.StringArrayOutput)
}

// Array of Quicksight user names to assign the policy to.
func (o IamPolicyAssignmentIdentitiesPtrOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IamPolicyAssignmentIdentities) []string {
		if v == nil {
			return nil
		}
		return v.Users
	}).(pulumi.StringArrayOutput)
}

type NamespaceTimeouts struct {
	Create *string `pulumi:"create"`
	Delete *string `pulumi:"delete"`
}

// NamespaceTimeoutsInput is an input type that accepts NamespaceTimeoutsArgs and NamespaceTimeoutsOutput values.
// You can construct a concrete instance of `NamespaceTimeoutsInput` via:
//
//	NamespaceTimeoutsArgs{...}
type NamespaceTimeoutsInput interface {
	pulumi.Input

	ToNamespaceTimeoutsOutput() NamespaceTimeoutsOutput
	ToNamespaceTimeoutsOutputWithContext(context.Context) NamespaceTimeoutsOutput
}

type NamespaceTimeoutsArgs struct {
	Create pulumi.StringPtrInput `pulumi:"create"`
	Delete pulumi.StringPtrInput `pulumi:"delete"`
}

func (NamespaceTimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceTimeouts)(nil)).Elem()
}

func (i NamespaceTimeoutsArgs) ToNamespaceTimeoutsOutput() NamespaceTimeoutsOutput {
	return i.ToNamespaceTimeoutsOutputWithContext(context.Background())
}

func (i NamespaceTimeoutsArgs) ToNamespaceTimeoutsOutputWithContext(ctx context.Context) NamespaceTimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceTimeoutsOutput)
}

func (i NamespaceTimeoutsArgs) ToNamespaceTimeoutsPtrOutput() NamespaceTimeoutsPtrOutput {
	return i.ToNamespaceTimeoutsPtrOutputWithContext(context.Background())
}

func (i NamespaceTimeoutsArgs) ToNamespaceTimeoutsPtrOutputWithContext(ctx context.Context) NamespaceTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceTimeoutsOutput).ToNamespaceTimeoutsPtrOutputWithContext(ctx)
}

// NamespaceTimeoutsPtrInput is an input type that accepts NamespaceTimeoutsArgs, NamespaceTimeoutsPtr and NamespaceTimeoutsPtrOutput values.
// You can construct a concrete instance of `NamespaceTimeoutsPtrInput` via:
//
//	        NamespaceTimeoutsArgs{...}
//
//	or:
//
//	        nil
type NamespaceTimeoutsPtrInput interface {
	pulumi.Input

	ToNamespaceTimeoutsPtrOutput() NamespaceTimeoutsPtrOutput
	ToNamespaceTimeoutsPtrOutputWithContext(context.Context) NamespaceTimeoutsPtrOutput
}

type namespaceTimeoutsPtrType NamespaceTimeoutsArgs

func NamespaceTimeoutsPtr(v *NamespaceTimeoutsArgs) NamespaceTimeoutsPtrInput {
	return (*namespaceTimeoutsPtrType)(v)
}

func (*namespaceTimeoutsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceTimeouts)(nil)).Elem()
}

func (i *namespaceTimeoutsPtrType) ToNamespaceTimeoutsPtrOutput() NamespaceTimeoutsPtrOutput {
	return i.ToNamespaceTimeoutsPtrOutputWithContext(context.Background())
}

func (i *namespaceTimeoutsPtrType) ToNamespaceTimeoutsPtrOutputWithContext(ctx context.Context) NamespaceTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceTimeoutsPtrOutput)
}

type NamespaceTimeoutsOutput struct{ *pulumi.OutputState }

func (NamespaceTimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceTimeouts)(nil)).Elem()
}

func (o NamespaceTimeoutsOutput) ToNamespaceTimeoutsOutput() NamespaceTimeoutsOutput {
	return o
}

func (o NamespaceTimeoutsOutput) ToNamespaceTimeoutsOutputWithContext(ctx context.Context) NamespaceTimeoutsOutput {
	return o
}

func (o NamespaceTimeoutsOutput) ToNamespaceTimeoutsPtrOutput() NamespaceTimeoutsPtrOutput {
	return o.ToNamespaceTimeoutsPtrOutputWithContext(context.Background())
}

func (o NamespaceTimeoutsOutput) ToNamespaceTimeoutsPtrOutputWithContext(ctx context.Context) NamespaceTimeoutsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NamespaceTimeouts) *NamespaceTimeouts {
		return &v
	}).(NamespaceTimeoutsPtrOutput)
}

func (o NamespaceTimeoutsOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceTimeouts) *string { return v.Create }).(pulumi.StringPtrOutput)
}

func (o NamespaceTimeoutsOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceTimeouts) *string { return v.Delete }).(pulumi.StringPtrOutput)
}

type NamespaceTimeoutsPtrOutput struct{ *pulumi.OutputState }

func (NamespaceTimeoutsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceTimeouts)(nil)).Elem()
}

func (o NamespaceTimeoutsPtrOutput) ToNamespaceTimeoutsPtrOutput() NamespaceTimeoutsPtrOutput {
	return o
}

func (o NamespaceTimeoutsPtrOutput) ToNamespaceTimeoutsPtrOutputWithContext(ctx context.Context) NamespaceTimeoutsPtrOutput {
	return o
}

func (o NamespaceTimeoutsPtrOutput) Elem() NamespaceTimeoutsOutput {
	return o.ApplyT(func(v *NamespaceTimeouts) NamespaceTimeouts {
		if v != nil {
			return *v
		}
		var ret NamespaceTimeouts
		return ret
	}).(NamespaceTimeoutsOutput)
}

func (o NamespaceTimeoutsPtrOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Create
	}).(pulumi.StringPtrOutput)
}

func (o NamespaceTimeoutsPtrOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Delete
	}).(pulumi.StringPtrOutput)
}

type RefreshScheduleSchedule struct {
	// The type of refresh that the dataset undergoes. Valid values are `INCREMENTAL_REFRESH` and `FULL_REFRESH`.
	RefreshType string `pulumi:"refreshType"`
	// The configuration of the [schedule frequency](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_RefreshFrequency.html). See schedule_frequency.
	ScheduleFrequency *RefreshScheduleScheduleScheduleFrequency `pulumi:"scheduleFrequency"`
	// Time after which the refresh schedule can be started, expressed in `YYYY-MM-DDTHH:MM:SS` format.
	StartAfterDateTime *string `pulumi:"startAfterDateTime"`
}

// RefreshScheduleScheduleInput is an input type that accepts RefreshScheduleScheduleArgs and RefreshScheduleScheduleOutput values.
// You can construct a concrete instance of `RefreshScheduleScheduleInput` via:
//
//	RefreshScheduleScheduleArgs{...}
type RefreshScheduleScheduleInput interface {
	pulumi.Input

	ToRefreshScheduleScheduleOutput() RefreshScheduleScheduleOutput
	ToRefreshScheduleScheduleOutputWithContext(context.Context) RefreshScheduleScheduleOutput
}

type RefreshScheduleScheduleArgs struct {
	// The type of refresh that the dataset undergoes. Valid values are `INCREMENTAL_REFRESH` and `FULL_REFRESH`.
	RefreshType pulumi.StringInput `pulumi:"refreshType"`
	// The configuration of the [schedule frequency](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_RefreshFrequency.html). See schedule_frequency.
	ScheduleFrequency RefreshScheduleScheduleScheduleFrequencyPtrInput `pulumi:"scheduleFrequency"`
	// Time after which the refresh schedule can be started, expressed in `YYYY-MM-DDTHH:MM:SS` format.
	StartAfterDateTime pulumi.StringPtrInput `pulumi:"startAfterDateTime"`
}

func (RefreshScheduleScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RefreshScheduleSchedule)(nil)).Elem()
}

func (i RefreshScheduleScheduleArgs) ToRefreshScheduleScheduleOutput() RefreshScheduleScheduleOutput {
	return i.ToRefreshScheduleScheduleOutputWithContext(context.Background())
}

func (i RefreshScheduleScheduleArgs) ToRefreshScheduleScheduleOutputWithContext(ctx context.Context) RefreshScheduleScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RefreshScheduleScheduleOutput)
}

func (i RefreshScheduleScheduleArgs) ToRefreshScheduleSchedulePtrOutput() RefreshScheduleSchedulePtrOutput {
	return i.ToRefreshScheduleSchedulePtrOutputWithContext(context.Background())
}

func (i RefreshScheduleScheduleArgs) ToRefreshScheduleSchedulePtrOutputWithContext(ctx context.Context) RefreshScheduleSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RefreshScheduleScheduleOutput).ToRefreshScheduleSchedulePtrOutputWithContext(ctx)
}

// RefreshScheduleSchedulePtrInput is an input type that accepts RefreshScheduleScheduleArgs, RefreshScheduleSchedulePtr and RefreshScheduleSchedulePtrOutput values.
// You can construct a concrete instance of `RefreshScheduleSchedulePtrInput` via:
//
//	        RefreshScheduleScheduleArgs{...}
//
//	or:
//
//	        nil
type RefreshScheduleSchedulePtrInput interface {
	pulumi.Input

	ToRefreshScheduleSchedulePtrOutput() RefreshScheduleSchedulePtrOutput
	ToRefreshScheduleSchedulePtrOutputWithContext(context.Context) RefreshScheduleSchedulePtrOutput
}

type refreshScheduleSchedulePtrType RefreshScheduleScheduleArgs

func RefreshScheduleSchedulePtr(v *RefreshScheduleScheduleArgs) RefreshScheduleSchedulePtrInput {
	return (*refreshScheduleSchedulePtrType)(v)
}

func (*refreshScheduleSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RefreshScheduleSchedule)(nil)).Elem()
}

func (i *refreshScheduleSchedulePtrType) ToRefreshScheduleSchedulePtrOutput() RefreshScheduleSchedulePtrOutput {
	return i.ToRefreshScheduleSchedulePtrOutputWithContext(context.Background())
}

func (i *refreshScheduleSchedulePtrType) ToRefreshScheduleSchedulePtrOutputWithContext(ctx context.Context) RefreshScheduleSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RefreshScheduleSchedulePtrOutput)
}

type RefreshScheduleScheduleOutput struct{ *pulumi.OutputState }

func (RefreshScheduleScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RefreshScheduleSchedule)(nil)).Elem()
}

func (o RefreshScheduleScheduleOutput) ToRefreshScheduleScheduleOutput() RefreshScheduleScheduleOutput {
	return o
}

func (o RefreshScheduleScheduleOutput) ToRefreshScheduleScheduleOutputWithContext(ctx context.Context) RefreshScheduleScheduleOutput {
	return o
}

func (o RefreshScheduleScheduleOutput) ToRefreshScheduleSchedulePtrOutput() RefreshScheduleSchedulePtrOutput {
	return o.ToRefreshScheduleSchedulePtrOutputWithContext(context.Background())
}

func (o RefreshScheduleScheduleOutput) ToRefreshScheduleSchedulePtrOutputWithContext(ctx context.Context) RefreshScheduleSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RefreshScheduleSchedule) *RefreshScheduleSchedule {
		return &v
	}).(RefreshScheduleSchedulePtrOutput)
}

// The type of refresh that the dataset undergoes. Valid values are `INCREMENTAL_REFRESH` and `FULL_REFRESH`.
func (o RefreshScheduleScheduleOutput) RefreshType() pulumi.StringOutput {
	return o.ApplyT(func(v RefreshScheduleSchedule) string { return v.RefreshType }).(pulumi.StringOutput)
}

// The configuration of the [schedule frequency](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_RefreshFrequency.html). See schedule_frequency.
func (o RefreshScheduleScheduleOutput) ScheduleFrequency() RefreshScheduleScheduleScheduleFrequencyPtrOutput {
	return o.ApplyT(func(v RefreshScheduleSchedule) *RefreshScheduleScheduleScheduleFrequency { return v.ScheduleFrequency }).(RefreshScheduleScheduleScheduleFrequencyPtrOutput)
}

// Time after which the refresh schedule can be started, expressed in `YYYY-MM-DDTHH:MM:SS` format.
func (o RefreshScheduleScheduleOutput) StartAfterDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RefreshScheduleSchedule) *string { return v.StartAfterDateTime }).(pulumi.StringPtrOutput)
}

type RefreshScheduleSchedulePtrOutput struct{ *pulumi.OutputState }

func (RefreshScheduleSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RefreshScheduleSchedule)(nil)).Elem()
}

func (o RefreshScheduleSchedulePtrOutput) ToRefreshScheduleSchedulePtrOutput() RefreshScheduleSchedulePtrOutput {
	return o
}

func (o RefreshScheduleSchedulePtrOutput) ToRefreshScheduleSchedulePtrOutputWithContext(ctx context.Context) RefreshScheduleSchedulePtrOutput {
	return o
}

func (o RefreshScheduleSchedulePtrOutput) Elem() RefreshScheduleScheduleOutput {
	return o.ApplyT(func(v *RefreshScheduleSchedule) RefreshScheduleSchedule {
		if v != nil {
			return *v
		}
		var ret RefreshScheduleSchedule
		return ret
	}).(RefreshScheduleScheduleOutput)
}

// The type of refresh that the dataset undergoes. Valid values are `INCREMENTAL_REFRESH` and `FULL_REFRESH`.
func (o RefreshScheduleSchedulePtrOutput) RefreshType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RefreshScheduleSchedule) *string {
		if v == nil {
			return nil
		}
		return &v.RefreshType
	}).(pulumi.StringPtrOutput)
}

// The configuration of the [schedule frequency](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_RefreshFrequency.html). See schedule_frequency.
func (o RefreshScheduleSchedulePtrOutput) ScheduleFrequency() RefreshScheduleScheduleScheduleFrequencyPtrOutput {
	return o.ApplyT(func(v *RefreshScheduleSchedule) *RefreshScheduleScheduleScheduleFrequency {
		if v == nil {
			return nil
		}
		return v.ScheduleFrequency
	}).(RefreshScheduleScheduleScheduleFrequencyPtrOutput)
}

// Time after which the refresh schedule can be started, expressed in `YYYY-MM-DDTHH:MM:SS` format.
func (o RefreshScheduleSchedulePtrOutput) StartAfterDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RefreshScheduleSchedule) *string {
		if v == nil {
			return nil
		}
		return v.StartAfterDateTime
	}).(pulumi.StringPtrOutput)
}

type RefreshScheduleScheduleScheduleFrequency struct {
	// The interval between scheduled refreshes. Valid values are `MINUTE15`, `MINUTE30`, `HOURLY`, `DAILY`, `WEEKLY` and `MONTHLY`.
	Interval string `pulumi:"interval"`
	// The [refresh on entity](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ScheduleRefreshOnEntity.html) configuration for weekly or monthly schedules. See refresh_on_day.
	RefreshOnDay *RefreshScheduleScheduleScheduleFrequencyRefreshOnDay `pulumi:"refreshOnDay"`
	// The time of day that you want the dataset to refresh. This value is expressed in `HH:MM` format. This field is not required for schedules that refresh hourly.
	TimeOfTheDay *string `pulumi:"timeOfTheDay"`
	// The timezone that you want the refresh schedule to use.
	Timezone *string `pulumi:"timezone"`
}

// RefreshScheduleScheduleScheduleFrequencyInput is an input type that accepts RefreshScheduleScheduleScheduleFrequencyArgs and RefreshScheduleScheduleScheduleFrequencyOutput values.
// You can construct a concrete instance of `RefreshScheduleScheduleScheduleFrequencyInput` via:
//
//	RefreshScheduleScheduleScheduleFrequencyArgs{...}
type RefreshScheduleScheduleScheduleFrequencyInput interface {
	pulumi.Input

	ToRefreshScheduleScheduleScheduleFrequencyOutput() RefreshScheduleScheduleScheduleFrequencyOutput
	ToRefreshScheduleScheduleScheduleFrequencyOutputWithContext(context.Context) RefreshScheduleScheduleScheduleFrequencyOutput
}

type RefreshScheduleScheduleScheduleFrequencyArgs struct {
	// The interval between scheduled refreshes. Valid values are `MINUTE15`, `MINUTE30`, `HOURLY`, `DAILY`, `WEEKLY` and `MONTHLY`.
	Interval pulumi.StringInput `pulumi:"interval"`
	// The [refresh on entity](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ScheduleRefreshOnEntity.html) configuration for weekly or monthly schedules. See refresh_on_day.
	RefreshOnDay RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrInput `pulumi:"refreshOnDay"`
	// The time of day that you want the dataset to refresh. This value is expressed in `HH:MM` format. This field is not required for schedules that refresh hourly.
	TimeOfTheDay pulumi.StringPtrInput `pulumi:"timeOfTheDay"`
	// The timezone that you want the refresh schedule to use.
	Timezone pulumi.StringPtrInput `pulumi:"timezone"`
}

func (RefreshScheduleScheduleScheduleFrequencyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RefreshScheduleScheduleScheduleFrequency)(nil)).Elem()
}

func (i RefreshScheduleScheduleScheduleFrequencyArgs) ToRefreshScheduleScheduleScheduleFrequencyOutput() RefreshScheduleScheduleScheduleFrequencyOutput {
	return i.ToRefreshScheduleScheduleScheduleFrequencyOutputWithContext(context.Background())
}

func (i RefreshScheduleScheduleScheduleFrequencyArgs) ToRefreshScheduleScheduleScheduleFrequencyOutputWithContext(ctx context.Context) RefreshScheduleScheduleScheduleFrequencyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RefreshScheduleScheduleScheduleFrequencyOutput)
}

func (i RefreshScheduleScheduleScheduleFrequencyArgs) ToRefreshScheduleScheduleScheduleFrequencyPtrOutput() RefreshScheduleScheduleScheduleFrequencyPtrOutput {
	return i.ToRefreshScheduleScheduleScheduleFrequencyPtrOutputWithContext(context.Background())
}

func (i RefreshScheduleScheduleScheduleFrequencyArgs) ToRefreshScheduleScheduleScheduleFrequencyPtrOutputWithContext(ctx context.Context) RefreshScheduleScheduleScheduleFrequencyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RefreshScheduleScheduleScheduleFrequencyOutput).ToRefreshScheduleScheduleScheduleFrequencyPtrOutputWithContext(ctx)
}

// RefreshScheduleScheduleScheduleFrequencyPtrInput is an input type that accepts RefreshScheduleScheduleScheduleFrequencyArgs, RefreshScheduleScheduleScheduleFrequencyPtr and RefreshScheduleScheduleScheduleFrequencyPtrOutput values.
// You can construct a concrete instance of `RefreshScheduleScheduleScheduleFrequencyPtrInput` via:
//
//	        RefreshScheduleScheduleScheduleFrequencyArgs{...}
//
//	or:
//
//	        nil
type RefreshScheduleScheduleScheduleFrequencyPtrInput interface {
	pulumi.Input

	ToRefreshScheduleScheduleScheduleFrequencyPtrOutput() RefreshScheduleScheduleScheduleFrequencyPtrOutput
	ToRefreshScheduleScheduleScheduleFrequencyPtrOutputWithContext(context.Context) RefreshScheduleScheduleScheduleFrequencyPtrOutput
}

type refreshScheduleScheduleScheduleFrequencyPtrType RefreshScheduleScheduleScheduleFrequencyArgs

func RefreshScheduleScheduleScheduleFrequencyPtr(v *RefreshScheduleScheduleScheduleFrequencyArgs) RefreshScheduleScheduleScheduleFrequencyPtrInput {
	return (*refreshScheduleScheduleScheduleFrequencyPtrType)(v)
}

func (*refreshScheduleScheduleScheduleFrequencyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RefreshScheduleScheduleScheduleFrequency)(nil)).Elem()
}

func (i *refreshScheduleScheduleScheduleFrequencyPtrType) ToRefreshScheduleScheduleScheduleFrequencyPtrOutput() RefreshScheduleScheduleScheduleFrequencyPtrOutput {
	return i.ToRefreshScheduleScheduleScheduleFrequencyPtrOutputWithContext(context.Background())
}

func (i *refreshScheduleScheduleScheduleFrequencyPtrType) ToRefreshScheduleScheduleScheduleFrequencyPtrOutputWithContext(ctx context.Context) RefreshScheduleScheduleScheduleFrequencyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RefreshScheduleScheduleScheduleFrequencyPtrOutput)
}

type RefreshScheduleScheduleScheduleFrequencyOutput struct{ *pulumi.OutputState }

func (RefreshScheduleScheduleScheduleFrequencyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RefreshScheduleScheduleScheduleFrequency)(nil)).Elem()
}

func (o RefreshScheduleScheduleScheduleFrequencyOutput) ToRefreshScheduleScheduleScheduleFrequencyOutput() RefreshScheduleScheduleScheduleFrequencyOutput {
	return o
}

func (o RefreshScheduleScheduleScheduleFrequencyOutput) ToRefreshScheduleScheduleScheduleFrequencyOutputWithContext(ctx context.Context) RefreshScheduleScheduleScheduleFrequencyOutput {
	return o
}

func (o RefreshScheduleScheduleScheduleFrequencyOutput) ToRefreshScheduleScheduleScheduleFrequencyPtrOutput() RefreshScheduleScheduleScheduleFrequencyPtrOutput {
	return o.ToRefreshScheduleScheduleScheduleFrequencyPtrOutputWithContext(context.Background())
}

func (o RefreshScheduleScheduleScheduleFrequencyOutput) ToRefreshScheduleScheduleScheduleFrequencyPtrOutputWithContext(ctx context.Context) RefreshScheduleScheduleScheduleFrequencyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RefreshScheduleScheduleScheduleFrequency) *RefreshScheduleScheduleScheduleFrequency {
		return &v
	}).(RefreshScheduleScheduleScheduleFrequencyPtrOutput)
}

// The interval between scheduled refreshes. Valid values are `MINUTE15`, `MINUTE30`, `HOURLY`, `DAILY`, `WEEKLY` and `MONTHLY`.
func (o RefreshScheduleScheduleScheduleFrequencyOutput) Interval() pulumi.StringOutput {
	return o.ApplyT(func(v RefreshScheduleScheduleScheduleFrequency) string { return v.Interval }).(pulumi.StringOutput)
}

// The [refresh on entity](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ScheduleRefreshOnEntity.html) configuration for weekly or monthly schedules. See refresh_on_day.
func (o RefreshScheduleScheduleScheduleFrequencyOutput) RefreshOnDay() RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput {
	return o.ApplyT(func(v RefreshScheduleScheduleScheduleFrequency) *RefreshScheduleScheduleScheduleFrequencyRefreshOnDay {
		return v.RefreshOnDay
	}).(RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput)
}

// The time of day that you want the dataset to refresh. This value is expressed in `HH:MM` format. This field is not required for schedules that refresh hourly.
func (o RefreshScheduleScheduleScheduleFrequencyOutput) TimeOfTheDay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RefreshScheduleScheduleScheduleFrequency) *string { return v.TimeOfTheDay }).(pulumi.StringPtrOutput)
}

// The timezone that you want the refresh schedule to use.
func (o RefreshScheduleScheduleScheduleFrequencyOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RefreshScheduleScheduleScheduleFrequency) *string { return v.Timezone }).(pulumi.StringPtrOutput)
}

type RefreshScheduleScheduleScheduleFrequencyPtrOutput struct{ *pulumi.OutputState }

func (RefreshScheduleScheduleScheduleFrequencyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RefreshScheduleScheduleScheduleFrequency)(nil)).Elem()
}

func (o RefreshScheduleScheduleScheduleFrequencyPtrOutput) ToRefreshScheduleScheduleScheduleFrequencyPtrOutput() RefreshScheduleScheduleScheduleFrequencyPtrOutput {
	return o
}

func (o RefreshScheduleScheduleScheduleFrequencyPtrOutput) ToRefreshScheduleScheduleScheduleFrequencyPtrOutputWithContext(ctx context.Context) RefreshScheduleScheduleScheduleFrequencyPtrOutput {
	return o
}

func (o RefreshScheduleScheduleScheduleFrequencyPtrOutput) Elem() RefreshScheduleScheduleScheduleFrequencyOutput {
	return o.ApplyT(func(v *RefreshScheduleScheduleScheduleFrequency) RefreshScheduleScheduleScheduleFrequency {
		if v != nil {
			return *v
		}
		var ret RefreshScheduleScheduleScheduleFrequency
		return ret
	}).(RefreshScheduleScheduleScheduleFrequencyOutput)
}

// The interval between scheduled refreshes. Valid values are `MINUTE15`, `MINUTE30`, `HOURLY`, `DAILY`, `WEEKLY` and `MONTHLY`.
func (o RefreshScheduleScheduleScheduleFrequencyPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RefreshScheduleScheduleScheduleFrequency) *string {
		if v == nil {
			return nil
		}
		return &v.Interval
	}).(pulumi.StringPtrOutput)
}

// The [refresh on entity](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ScheduleRefreshOnEntity.html) configuration for weekly or monthly schedules. See refresh_on_day.
func (o RefreshScheduleScheduleScheduleFrequencyPtrOutput) RefreshOnDay() RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput {
	return o.ApplyT(func(v *RefreshScheduleScheduleScheduleFrequency) *RefreshScheduleScheduleScheduleFrequencyRefreshOnDay {
		if v == nil {
			return nil
		}
		return v.RefreshOnDay
	}).(RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput)
}

// The time of day that you want the dataset to refresh. This value is expressed in `HH:MM` format. This field is not required for schedules that refresh hourly.
func (o RefreshScheduleScheduleScheduleFrequencyPtrOutput) TimeOfTheDay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RefreshScheduleScheduleScheduleFrequency) *string {
		if v == nil {
			return nil
		}
		return v.TimeOfTheDay
	}).(pulumi.StringPtrOutput)
}

// The timezone that you want the refresh schedule to use.
func (o RefreshScheduleScheduleScheduleFrequencyPtrOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RefreshScheduleScheduleScheduleFrequency) *string {
		if v == nil {
			return nil
		}
		return v.Timezone
	}).(pulumi.StringPtrOutput)
}

type RefreshScheduleScheduleScheduleFrequencyRefreshOnDay struct {
	// The day of the month that you want to schedule refresh on.
	DayOfMonth *string `pulumi:"dayOfMonth"`
	// The day of the week that you want to schedule a refresh on. Valid values are `SUNDAY`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY` and `SATURDAY`.
	DayOfWeek *string `pulumi:"dayOfWeek"`
}

// RefreshScheduleScheduleScheduleFrequencyRefreshOnDayInput is an input type that accepts RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs and RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput values.
// You can construct a concrete instance of `RefreshScheduleScheduleScheduleFrequencyRefreshOnDayInput` via:
//
//	RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs{...}
type RefreshScheduleScheduleScheduleFrequencyRefreshOnDayInput interface {
	pulumi.Input

	ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput() RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput
	ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutputWithContext(context.Context) RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput
}

type RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs struct {
	// The day of the month that you want to schedule refresh on.
	DayOfMonth pulumi.StringPtrInput `pulumi:"dayOfMonth"`
	// The day of the week that you want to schedule a refresh on. Valid values are `SUNDAY`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY` and `SATURDAY`.
	DayOfWeek pulumi.StringPtrInput `pulumi:"dayOfWeek"`
}

func (RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RefreshScheduleScheduleScheduleFrequencyRefreshOnDay)(nil)).Elem()
}

func (i RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs) ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput() RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput {
	return i.ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutputWithContext(context.Background())
}

func (i RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs) ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutputWithContext(ctx context.Context) RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput)
}

func (i RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs) ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput() RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput {
	return i.ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutputWithContext(context.Background())
}

func (i RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs) ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutputWithContext(ctx context.Context) RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput).ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutputWithContext(ctx)
}

// RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrInput is an input type that accepts RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs, RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtr and RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput values.
// You can construct a concrete instance of `RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrInput` via:
//
//	        RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs{...}
//
//	or:
//
//	        nil
type RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrInput interface {
	pulumi.Input

	ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput() RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput
	ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutputWithContext(context.Context) RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput
}

type refreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrType RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs

func RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtr(v *RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs) RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrInput {
	return (*refreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrType)(v)
}

func (*refreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RefreshScheduleScheduleScheduleFrequencyRefreshOnDay)(nil)).Elem()
}

func (i *refreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrType) ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput() RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput {
	return i.ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutputWithContext(context.Background())
}

func (i *refreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrType) ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutputWithContext(ctx context.Context) RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput)
}

type RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput struct{ *pulumi.OutputState }

func (RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RefreshScheduleScheduleScheduleFrequencyRefreshOnDay)(nil)).Elem()
}

func (o RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput) ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput() RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput {
	return o
}

func (o RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput) ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutputWithContext(ctx context.Context) RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput {
	return o
}

func (o RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput) ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput() RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput {
	return o.ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutputWithContext(context.Background())
}

func (o RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput) ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutputWithContext(ctx context.Context) RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RefreshScheduleScheduleScheduleFrequencyRefreshOnDay) *RefreshScheduleScheduleScheduleFrequencyRefreshOnDay {
		return &v
	}).(RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput)
}

// The day of the month that you want to schedule refresh on.
func (o RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput) DayOfMonth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RefreshScheduleScheduleScheduleFrequencyRefreshOnDay) *string { return v.DayOfMonth }).(pulumi.StringPtrOutput)
}

// The day of the week that you want to schedule a refresh on. Valid values are `SUNDAY`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY` and `SATURDAY`.
func (o RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput) DayOfWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RefreshScheduleScheduleScheduleFrequencyRefreshOnDay) *string { return v.DayOfWeek }).(pulumi.StringPtrOutput)
}

type RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput struct{ *pulumi.OutputState }

func (RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RefreshScheduleScheduleScheduleFrequencyRefreshOnDay)(nil)).Elem()
}

func (o RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput) ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput() RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput {
	return o
}

func (o RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput) ToRefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutputWithContext(ctx context.Context) RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput {
	return o
}

func (o RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput) Elem() RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput {
	return o.ApplyT(func(v *RefreshScheduleScheduleScheduleFrequencyRefreshOnDay) RefreshScheduleScheduleScheduleFrequencyRefreshOnDay {
		if v != nil {
			return *v
		}
		var ret RefreshScheduleScheduleScheduleFrequencyRefreshOnDay
		return ret
	}).(RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput)
}

// The day of the month that you want to schedule refresh on.
func (o RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput) DayOfMonth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RefreshScheduleScheduleScheduleFrequencyRefreshOnDay) *string {
		if v == nil {
			return nil
		}
		return v.DayOfMonth
	}).(pulumi.StringPtrOutput)
}

// The day of the week that you want to schedule a refresh on. Valid values are `SUNDAY`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY` and `SATURDAY`.
func (o RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput) DayOfWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RefreshScheduleScheduleScheduleFrequencyRefreshOnDay) *string {
		if v == nil {
			return nil
		}
		return v.DayOfWeek
	}).(pulumi.StringPtrOutput)
}

type TemplatePermission struct {
	// List of IAM actions to grant or revoke permissions on.
	Actions []string `pulumi:"actions"`
	// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
	Principal string `pulumi:"principal"`
}

// TemplatePermissionInput is an input type that accepts TemplatePermissionArgs and TemplatePermissionOutput values.
// You can construct a concrete instance of `TemplatePermissionInput` via:
//
//	TemplatePermissionArgs{...}
type TemplatePermissionInput interface {
	pulumi.Input

	ToTemplatePermissionOutput() TemplatePermissionOutput
	ToTemplatePermissionOutputWithContext(context.Context) TemplatePermissionOutput
}

type TemplatePermissionArgs struct {
	// List of IAM actions to grant or revoke permissions on.
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
	Principal pulumi.StringInput `pulumi:"principal"`
}

func (TemplatePermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePermission)(nil)).Elem()
}

func (i TemplatePermissionArgs) ToTemplatePermissionOutput() TemplatePermissionOutput {
	return i.ToTemplatePermissionOutputWithContext(context.Background())
}

func (i TemplatePermissionArgs) ToTemplatePermissionOutputWithContext(ctx context.Context) TemplatePermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePermissionOutput)
}

// TemplatePermissionArrayInput is an input type that accepts TemplatePermissionArray and TemplatePermissionArrayOutput values.
// You can construct a concrete instance of `TemplatePermissionArrayInput` via:
//
//	TemplatePermissionArray{ TemplatePermissionArgs{...} }
type TemplatePermissionArrayInput interface {
	pulumi.Input

	ToTemplatePermissionArrayOutput() TemplatePermissionArrayOutput
	ToTemplatePermissionArrayOutputWithContext(context.Context) TemplatePermissionArrayOutput
}

type TemplatePermissionArray []TemplatePermissionInput

func (TemplatePermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplatePermission)(nil)).Elem()
}

func (i TemplatePermissionArray) ToTemplatePermissionArrayOutput() TemplatePermissionArrayOutput {
	return i.ToTemplatePermissionArrayOutputWithContext(context.Background())
}

func (i TemplatePermissionArray) ToTemplatePermissionArrayOutputWithContext(ctx context.Context) TemplatePermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePermissionArrayOutput)
}

type TemplatePermissionOutput struct{ *pulumi.OutputState }

func (TemplatePermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePermission)(nil)).Elem()
}

func (o TemplatePermissionOutput) ToTemplatePermissionOutput() TemplatePermissionOutput {
	return o
}

func (o TemplatePermissionOutput) ToTemplatePermissionOutputWithContext(ctx context.Context) TemplatePermissionOutput {
	return o
}

// List of IAM actions to grant or revoke permissions on.
func (o TemplatePermissionOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TemplatePermission) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
func (o TemplatePermissionOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v TemplatePermission) string { return v.Principal }).(pulumi.StringOutput)
}

type TemplatePermissionArrayOutput struct{ *pulumi.OutputState }

func (TemplatePermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplatePermission)(nil)).Elem()
}

func (o TemplatePermissionArrayOutput) ToTemplatePermissionArrayOutput() TemplatePermissionArrayOutput {
	return o
}

func (o TemplatePermissionArrayOutput) ToTemplatePermissionArrayOutputWithContext(ctx context.Context) TemplatePermissionArrayOutput {
	return o
}

func (o TemplatePermissionArrayOutput) Index(i pulumi.IntInput) TemplatePermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplatePermission {
		return vs[0].([]TemplatePermission)[vs[1].(int)]
	}).(TemplatePermissionOutput)
}

type TemplateSourceEntity struct {
	// The source analysis, if it is based on an analysis.. Only one of `sourceAnalysis` or `sourceTemplate` should be configured. See source_analysis.
	SourceAnalysis *TemplateSourceEntitySourceAnalysis `pulumi:"sourceAnalysis"`
	// The source template, if it is based on an template.. Only one of `sourceAnalysis` or `sourceTemplate` should be configured. See source_template.
	SourceTemplate *TemplateSourceEntitySourceTemplate `pulumi:"sourceTemplate"`
}

// TemplateSourceEntityInput is an input type that accepts TemplateSourceEntityArgs and TemplateSourceEntityOutput values.
// You can construct a concrete instance of `TemplateSourceEntityInput` via:
//
//	TemplateSourceEntityArgs{...}
type TemplateSourceEntityInput interface {
	pulumi.Input

	ToTemplateSourceEntityOutput() TemplateSourceEntityOutput
	ToTemplateSourceEntityOutputWithContext(context.Context) TemplateSourceEntityOutput
}

type TemplateSourceEntityArgs struct {
	// The source analysis, if it is based on an analysis.. Only one of `sourceAnalysis` or `sourceTemplate` should be configured. See source_analysis.
	SourceAnalysis TemplateSourceEntitySourceAnalysisPtrInput `pulumi:"sourceAnalysis"`
	// The source template, if it is based on an template.. Only one of `sourceAnalysis` or `sourceTemplate` should be configured. See source_template.
	SourceTemplate TemplateSourceEntitySourceTemplatePtrInput `pulumi:"sourceTemplate"`
}

func (TemplateSourceEntityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSourceEntity)(nil)).Elem()
}

func (i TemplateSourceEntityArgs) ToTemplateSourceEntityOutput() TemplateSourceEntityOutput {
	return i.ToTemplateSourceEntityOutputWithContext(context.Background())
}

func (i TemplateSourceEntityArgs) ToTemplateSourceEntityOutputWithContext(ctx context.Context) TemplateSourceEntityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSourceEntityOutput)
}

func (i TemplateSourceEntityArgs) ToTemplateSourceEntityPtrOutput() TemplateSourceEntityPtrOutput {
	return i.ToTemplateSourceEntityPtrOutputWithContext(context.Background())
}

func (i TemplateSourceEntityArgs) ToTemplateSourceEntityPtrOutputWithContext(ctx context.Context) TemplateSourceEntityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSourceEntityOutput).ToTemplateSourceEntityPtrOutputWithContext(ctx)
}

// TemplateSourceEntityPtrInput is an input type that accepts TemplateSourceEntityArgs, TemplateSourceEntityPtr and TemplateSourceEntityPtrOutput values.
// You can construct a concrete instance of `TemplateSourceEntityPtrInput` via:
//
//	        TemplateSourceEntityArgs{...}
//
//	or:
//
//	        nil
type TemplateSourceEntityPtrInput interface {
	pulumi.Input

	ToTemplateSourceEntityPtrOutput() TemplateSourceEntityPtrOutput
	ToTemplateSourceEntityPtrOutputWithContext(context.Context) TemplateSourceEntityPtrOutput
}

type templateSourceEntityPtrType TemplateSourceEntityArgs

func TemplateSourceEntityPtr(v *TemplateSourceEntityArgs) TemplateSourceEntityPtrInput {
	return (*templateSourceEntityPtrType)(v)
}

func (*templateSourceEntityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSourceEntity)(nil)).Elem()
}

func (i *templateSourceEntityPtrType) ToTemplateSourceEntityPtrOutput() TemplateSourceEntityPtrOutput {
	return i.ToTemplateSourceEntityPtrOutputWithContext(context.Background())
}

func (i *templateSourceEntityPtrType) ToTemplateSourceEntityPtrOutputWithContext(ctx context.Context) TemplateSourceEntityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSourceEntityPtrOutput)
}

type TemplateSourceEntityOutput struct{ *pulumi.OutputState }

func (TemplateSourceEntityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSourceEntity)(nil)).Elem()
}

func (o TemplateSourceEntityOutput) ToTemplateSourceEntityOutput() TemplateSourceEntityOutput {
	return o
}

func (o TemplateSourceEntityOutput) ToTemplateSourceEntityOutputWithContext(ctx context.Context) TemplateSourceEntityOutput {
	return o
}

func (o TemplateSourceEntityOutput) ToTemplateSourceEntityPtrOutput() TemplateSourceEntityPtrOutput {
	return o.ToTemplateSourceEntityPtrOutputWithContext(context.Background())
}

func (o TemplateSourceEntityOutput) ToTemplateSourceEntityPtrOutputWithContext(ctx context.Context) TemplateSourceEntityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateSourceEntity) *TemplateSourceEntity {
		return &v
	}).(TemplateSourceEntityPtrOutput)
}

// The source analysis, if it is based on an analysis.. Only one of `sourceAnalysis` or `sourceTemplate` should be configured. See source_analysis.
func (o TemplateSourceEntityOutput) SourceAnalysis() TemplateSourceEntitySourceAnalysisPtrOutput {
	return o.ApplyT(func(v TemplateSourceEntity) *TemplateSourceEntitySourceAnalysis { return v.SourceAnalysis }).(TemplateSourceEntitySourceAnalysisPtrOutput)
}

// The source template, if it is based on an template.. Only one of `sourceAnalysis` or `sourceTemplate` should be configured. See source_template.
func (o TemplateSourceEntityOutput) SourceTemplate() TemplateSourceEntitySourceTemplatePtrOutput {
	return o.ApplyT(func(v TemplateSourceEntity) *TemplateSourceEntitySourceTemplate { return v.SourceTemplate }).(TemplateSourceEntitySourceTemplatePtrOutput)
}

type TemplateSourceEntityPtrOutput struct{ *pulumi.OutputState }

func (TemplateSourceEntityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSourceEntity)(nil)).Elem()
}

func (o TemplateSourceEntityPtrOutput) ToTemplateSourceEntityPtrOutput() TemplateSourceEntityPtrOutput {
	return o
}

func (o TemplateSourceEntityPtrOutput) ToTemplateSourceEntityPtrOutputWithContext(ctx context.Context) TemplateSourceEntityPtrOutput {
	return o
}

func (o TemplateSourceEntityPtrOutput) Elem() TemplateSourceEntityOutput {
	return o.ApplyT(func(v *TemplateSourceEntity) TemplateSourceEntity {
		if v != nil {
			return *v
		}
		var ret TemplateSourceEntity
		return ret
	}).(TemplateSourceEntityOutput)
}

// The source analysis, if it is based on an analysis.. Only one of `sourceAnalysis` or `sourceTemplate` should be configured. See source_analysis.
func (o TemplateSourceEntityPtrOutput) SourceAnalysis() TemplateSourceEntitySourceAnalysisPtrOutput {
	return o.ApplyT(func(v *TemplateSourceEntity) *TemplateSourceEntitySourceAnalysis {
		if v == nil {
			return nil
		}
		return v.SourceAnalysis
	}).(TemplateSourceEntitySourceAnalysisPtrOutput)
}

// The source template, if it is based on an template.. Only one of `sourceAnalysis` or `sourceTemplate` should be configured. See source_template.
func (o TemplateSourceEntityPtrOutput) SourceTemplate() TemplateSourceEntitySourceTemplatePtrOutput {
	return o.ApplyT(func(v *TemplateSourceEntity) *TemplateSourceEntitySourceTemplate {
		if v == nil {
			return nil
		}
		return v.SourceTemplate
	}).(TemplateSourceEntitySourceTemplatePtrOutput)
}

type TemplateSourceEntitySourceAnalysis struct {
	// The Amazon Resource Name (ARN) of the resource.
	Arn string `pulumi:"arn"`
	// A list of dataset references used as placeholders in the template. See data_set_references.
	DataSetReferences []TemplateSourceEntitySourceAnalysisDataSetReference `pulumi:"dataSetReferences"`
}

// TemplateSourceEntitySourceAnalysisInput is an input type that accepts TemplateSourceEntitySourceAnalysisArgs and TemplateSourceEntitySourceAnalysisOutput values.
// You can construct a concrete instance of `TemplateSourceEntitySourceAnalysisInput` via:
//
//	TemplateSourceEntitySourceAnalysisArgs{...}
type TemplateSourceEntitySourceAnalysisInput interface {
	pulumi.Input

	ToTemplateSourceEntitySourceAnalysisOutput() TemplateSourceEntitySourceAnalysisOutput
	ToTemplateSourceEntitySourceAnalysisOutputWithContext(context.Context) TemplateSourceEntitySourceAnalysisOutput
}

type TemplateSourceEntitySourceAnalysisArgs struct {
	// The Amazon Resource Name (ARN) of the resource.
	Arn pulumi.StringInput `pulumi:"arn"`
	// A list of dataset references used as placeholders in the template. See data_set_references.
	DataSetReferences TemplateSourceEntitySourceAnalysisDataSetReferenceArrayInput `pulumi:"dataSetReferences"`
}

func (TemplateSourceEntitySourceAnalysisArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSourceEntitySourceAnalysis)(nil)).Elem()
}

func (i TemplateSourceEntitySourceAnalysisArgs) ToTemplateSourceEntitySourceAnalysisOutput() TemplateSourceEntitySourceAnalysisOutput {
	return i.ToTemplateSourceEntitySourceAnalysisOutputWithContext(context.Background())
}

func (i TemplateSourceEntitySourceAnalysisArgs) ToTemplateSourceEntitySourceAnalysisOutputWithContext(ctx context.Context) TemplateSourceEntitySourceAnalysisOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSourceEntitySourceAnalysisOutput)
}

func (i TemplateSourceEntitySourceAnalysisArgs) ToTemplateSourceEntitySourceAnalysisPtrOutput() TemplateSourceEntitySourceAnalysisPtrOutput {
	return i.ToTemplateSourceEntitySourceAnalysisPtrOutputWithContext(context.Background())
}

func (i TemplateSourceEntitySourceAnalysisArgs) ToTemplateSourceEntitySourceAnalysisPtrOutputWithContext(ctx context.Context) TemplateSourceEntitySourceAnalysisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSourceEntitySourceAnalysisOutput).ToTemplateSourceEntitySourceAnalysisPtrOutputWithContext(ctx)
}

// TemplateSourceEntitySourceAnalysisPtrInput is an input type that accepts TemplateSourceEntitySourceAnalysisArgs, TemplateSourceEntitySourceAnalysisPtr and TemplateSourceEntitySourceAnalysisPtrOutput values.
// You can construct a concrete instance of `TemplateSourceEntitySourceAnalysisPtrInput` via:
//
//	        TemplateSourceEntitySourceAnalysisArgs{...}
//
//	or:
//
//	        nil
type TemplateSourceEntitySourceAnalysisPtrInput interface {
	pulumi.Input

	ToTemplateSourceEntitySourceAnalysisPtrOutput() TemplateSourceEntitySourceAnalysisPtrOutput
	ToTemplateSourceEntitySourceAnalysisPtrOutputWithContext(context.Context) TemplateSourceEntitySourceAnalysisPtrOutput
}

type templateSourceEntitySourceAnalysisPtrType TemplateSourceEntitySourceAnalysisArgs

func TemplateSourceEntitySourceAnalysisPtr(v *TemplateSourceEntitySourceAnalysisArgs) TemplateSourceEntitySourceAnalysisPtrInput {
	return (*templateSourceEntitySourceAnalysisPtrType)(v)
}

func (*templateSourceEntitySourceAnalysisPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSourceEntitySourceAnalysis)(nil)).Elem()
}

func (i *templateSourceEntitySourceAnalysisPtrType) ToTemplateSourceEntitySourceAnalysisPtrOutput() TemplateSourceEntitySourceAnalysisPtrOutput {
	return i.ToTemplateSourceEntitySourceAnalysisPtrOutputWithContext(context.Background())
}

func (i *templateSourceEntitySourceAnalysisPtrType) ToTemplateSourceEntitySourceAnalysisPtrOutputWithContext(ctx context.Context) TemplateSourceEntitySourceAnalysisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSourceEntitySourceAnalysisPtrOutput)
}

type TemplateSourceEntitySourceAnalysisOutput struct{ *pulumi.OutputState }

func (TemplateSourceEntitySourceAnalysisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSourceEntitySourceAnalysis)(nil)).Elem()
}

func (o TemplateSourceEntitySourceAnalysisOutput) ToTemplateSourceEntitySourceAnalysisOutput() TemplateSourceEntitySourceAnalysisOutput {
	return o
}

func (o TemplateSourceEntitySourceAnalysisOutput) ToTemplateSourceEntitySourceAnalysisOutputWithContext(ctx context.Context) TemplateSourceEntitySourceAnalysisOutput {
	return o
}

func (o TemplateSourceEntitySourceAnalysisOutput) ToTemplateSourceEntitySourceAnalysisPtrOutput() TemplateSourceEntitySourceAnalysisPtrOutput {
	return o.ToTemplateSourceEntitySourceAnalysisPtrOutputWithContext(context.Background())
}

func (o TemplateSourceEntitySourceAnalysisOutput) ToTemplateSourceEntitySourceAnalysisPtrOutputWithContext(ctx context.Context) TemplateSourceEntitySourceAnalysisPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateSourceEntitySourceAnalysis) *TemplateSourceEntitySourceAnalysis {
		return &v
	}).(TemplateSourceEntitySourceAnalysisPtrOutput)
}

// The Amazon Resource Name (ARN) of the resource.
func (o TemplateSourceEntitySourceAnalysisOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateSourceEntitySourceAnalysis) string { return v.Arn }).(pulumi.StringOutput)
}

// A list of dataset references used as placeholders in the template. See data_set_references.
func (o TemplateSourceEntitySourceAnalysisOutput) DataSetReferences() TemplateSourceEntitySourceAnalysisDataSetReferenceArrayOutput {
	return o.ApplyT(func(v TemplateSourceEntitySourceAnalysis) []TemplateSourceEntitySourceAnalysisDataSetReference {
		return v.DataSetReferences
	}).(TemplateSourceEntitySourceAnalysisDataSetReferenceArrayOutput)
}

type TemplateSourceEntitySourceAnalysisPtrOutput struct{ *pulumi.OutputState }

func (TemplateSourceEntitySourceAnalysisPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSourceEntitySourceAnalysis)(nil)).Elem()
}

func (o TemplateSourceEntitySourceAnalysisPtrOutput) ToTemplateSourceEntitySourceAnalysisPtrOutput() TemplateSourceEntitySourceAnalysisPtrOutput {
	return o
}

func (o TemplateSourceEntitySourceAnalysisPtrOutput) ToTemplateSourceEntitySourceAnalysisPtrOutputWithContext(ctx context.Context) TemplateSourceEntitySourceAnalysisPtrOutput {
	return o
}

func (o TemplateSourceEntitySourceAnalysisPtrOutput) Elem() TemplateSourceEntitySourceAnalysisOutput {
	return o.ApplyT(func(v *TemplateSourceEntitySourceAnalysis) TemplateSourceEntitySourceAnalysis {
		if v != nil {
			return *v
		}
		var ret TemplateSourceEntitySourceAnalysis
		return ret
	}).(TemplateSourceEntitySourceAnalysisOutput)
}

// The Amazon Resource Name (ARN) of the resource.
func (o TemplateSourceEntitySourceAnalysisPtrOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateSourceEntitySourceAnalysis) *string {
		if v == nil {
			return nil
		}
		return &v.Arn
	}).(pulumi.StringPtrOutput)
}

// A list of dataset references used as placeholders in the template. See data_set_references.
func (o TemplateSourceEntitySourceAnalysisPtrOutput) DataSetReferences() TemplateSourceEntitySourceAnalysisDataSetReferenceArrayOutput {
	return o.ApplyT(func(v *TemplateSourceEntitySourceAnalysis) []TemplateSourceEntitySourceAnalysisDataSetReference {
		if v == nil {
			return nil
		}
		return v.DataSetReferences
	}).(TemplateSourceEntitySourceAnalysisDataSetReferenceArrayOutput)
}

type TemplateSourceEntitySourceAnalysisDataSetReference struct {
	// Dataset Amazon Resource Name (ARN).
	DataSetArn string `pulumi:"dataSetArn"`
	// Dataset placeholder.
	DataSetPlaceholder string `pulumi:"dataSetPlaceholder"`
}

// TemplateSourceEntitySourceAnalysisDataSetReferenceInput is an input type that accepts TemplateSourceEntitySourceAnalysisDataSetReferenceArgs and TemplateSourceEntitySourceAnalysisDataSetReferenceOutput values.
// You can construct a concrete instance of `TemplateSourceEntitySourceAnalysisDataSetReferenceInput` via:
//
//	TemplateSourceEntitySourceAnalysisDataSetReferenceArgs{...}
type TemplateSourceEntitySourceAnalysisDataSetReferenceInput interface {
	pulumi.Input

	ToTemplateSourceEntitySourceAnalysisDataSetReferenceOutput() TemplateSourceEntitySourceAnalysisDataSetReferenceOutput
	ToTemplateSourceEntitySourceAnalysisDataSetReferenceOutputWithContext(context.Context) TemplateSourceEntitySourceAnalysisDataSetReferenceOutput
}

type TemplateSourceEntitySourceAnalysisDataSetReferenceArgs struct {
	// Dataset Amazon Resource Name (ARN).
	DataSetArn pulumi.StringInput `pulumi:"dataSetArn"`
	// Dataset placeholder.
	DataSetPlaceholder pulumi.StringInput `pulumi:"dataSetPlaceholder"`
}

func (TemplateSourceEntitySourceAnalysisDataSetReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSourceEntitySourceAnalysisDataSetReference)(nil)).Elem()
}

func (i TemplateSourceEntitySourceAnalysisDataSetReferenceArgs) ToTemplateSourceEntitySourceAnalysisDataSetReferenceOutput() TemplateSourceEntitySourceAnalysisDataSetReferenceOutput {
	return i.ToTemplateSourceEntitySourceAnalysisDataSetReferenceOutputWithContext(context.Background())
}

func (i TemplateSourceEntitySourceAnalysisDataSetReferenceArgs) ToTemplateSourceEntitySourceAnalysisDataSetReferenceOutputWithContext(ctx context.Context) TemplateSourceEntitySourceAnalysisDataSetReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSourceEntitySourceAnalysisDataSetReferenceOutput)
}

// TemplateSourceEntitySourceAnalysisDataSetReferenceArrayInput is an input type that accepts TemplateSourceEntitySourceAnalysisDataSetReferenceArray and TemplateSourceEntitySourceAnalysisDataSetReferenceArrayOutput values.
// You can construct a concrete instance of `TemplateSourceEntitySourceAnalysisDataSetReferenceArrayInput` via:
//
//	TemplateSourceEntitySourceAnalysisDataSetReferenceArray{ TemplateSourceEntitySourceAnalysisDataSetReferenceArgs{...} }
type TemplateSourceEntitySourceAnalysisDataSetReferenceArrayInput interface {
	pulumi.Input

	ToTemplateSourceEntitySourceAnalysisDataSetReferenceArrayOutput() TemplateSourceEntitySourceAnalysisDataSetReferenceArrayOutput
	ToTemplateSourceEntitySourceAnalysisDataSetReferenceArrayOutputWithContext(context.Context) TemplateSourceEntitySourceAnalysisDataSetReferenceArrayOutput
}

type TemplateSourceEntitySourceAnalysisDataSetReferenceArray []TemplateSourceEntitySourceAnalysisDataSetReferenceInput

func (TemplateSourceEntitySourceAnalysisDataSetReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateSourceEntitySourceAnalysisDataSetReference)(nil)).Elem()
}

func (i TemplateSourceEntitySourceAnalysisDataSetReferenceArray) ToTemplateSourceEntitySourceAnalysisDataSetReferenceArrayOutput() TemplateSourceEntitySourceAnalysisDataSetReferenceArrayOutput {
	return i.ToTemplateSourceEntitySourceAnalysisDataSetReferenceArrayOutputWithContext(context.Background())
}

func (i TemplateSourceEntitySourceAnalysisDataSetReferenceArray) ToTemplateSourceEntitySourceAnalysisDataSetReferenceArrayOutputWithContext(ctx context.Context) TemplateSourceEntitySourceAnalysisDataSetReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSourceEntitySourceAnalysisDataSetReferenceArrayOutput)
}

type TemplateSourceEntitySourceAnalysisDataSetReferenceOutput struct{ *pulumi.OutputState }

func (TemplateSourceEntitySourceAnalysisDataSetReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSourceEntitySourceAnalysisDataSetReference)(nil)).Elem()
}

func (o TemplateSourceEntitySourceAnalysisDataSetReferenceOutput) ToTemplateSourceEntitySourceAnalysisDataSetReferenceOutput() TemplateSourceEntitySourceAnalysisDataSetReferenceOutput {
	return o
}

func (o TemplateSourceEntitySourceAnalysisDataSetReferenceOutput) ToTemplateSourceEntitySourceAnalysisDataSetReferenceOutputWithContext(ctx context.Context) TemplateSourceEntitySourceAnalysisDataSetReferenceOutput {
	return o
}

// Dataset Amazon Resource Name (ARN).
func (o TemplateSourceEntitySourceAnalysisDataSetReferenceOutput) DataSetArn() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateSourceEntitySourceAnalysisDataSetReference) string { return v.DataSetArn }).(pulumi.StringOutput)
}

// Dataset placeholder.
func (o TemplateSourceEntitySourceAnalysisDataSetReferenceOutput) DataSetPlaceholder() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateSourceEntitySourceAnalysisDataSetReference) string { return v.DataSetPlaceholder }).(pulumi.StringOutput)
}

type TemplateSourceEntitySourceAnalysisDataSetReferenceArrayOutput struct{ *pulumi.OutputState }

func (TemplateSourceEntitySourceAnalysisDataSetReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateSourceEntitySourceAnalysisDataSetReference)(nil)).Elem()
}

func (o TemplateSourceEntitySourceAnalysisDataSetReferenceArrayOutput) ToTemplateSourceEntitySourceAnalysisDataSetReferenceArrayOutput() TemplateSourceEntitySourceAnalysisDataSetReferenceArrayOutput {
	return o
}

func (o TemplateSourceEntitySourceAnalysisDataSetReferenceArrayOutput) ToTemplateSourceEntitySourceAnalysisDataSetReferenceArrayOutputWithContext(ctx context.Context) TemplateSourceEntitySourceAnalysisDataSetReferenceArrayOutput {
	return o
}

func (o TemplateSourceEntitySourceAnalysisDataSetReferenceArrayOutput) Index(i pulumi.IntInput) TemplateSourceEntitySourceAnalysisDataSetReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateSourceEntitySourceAnalysisDataSetReference {
		return vs[0].([]TemplateSourceEntitySourceAnalysisDataSetReference)[vs[1].(int)]
	}).(TemplateSourceEntitySourceAnalysisDataSetReferenceOutput)
}

type TemplateSourceEntitySourceTemplate struct {
	// The Amazon Resource Name (ARN) of the resource.
	Arn string `pulumi:"arn"`
}

// TemplateSourceEntitySourceTemplateInput is an input type that accepts TemplateSourceEntitySourceTemplateArgs and TemplateSourceEntitySourceTemplateOutput values.
// You can construct a concrete instance of `TemplateSourceEntitySourceTemplateInput` via:
//
//	TemplateSourceEntitySourceTemplateArgs{...}
type TemplateSourceEntitySourceTemplateInput interface {
	pulumi.Input

	ToTemplateSourceEntitySourceTemplateOutput() TemplateSourceEntitySourceTemplateOutput
	ToTemplateSourceEntitySourceTemplateOutputWithContext(context.Context) TemplateSourceEntitySourceTemplateOutput
}

type TemplateSourceEntitySourceTemplateArgs struct {
	// The Amazon Resource Name (ARN) of the resource.
	Arn pulumi.StringInput `pulumi:"arn"`
}

func (TemplateSourceEntitySourceTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSourceEntitySourceTemplate)(nil)).Elem()
}

func (i TemplateSourceEntitySourceTemplateArgs) ToTemplateSourceEntitySourceTemplateOutput() TemplateSourceEntitySourceTemplateOutput {
	return i.ToTemplateSourceEntitySourceTemplateOutputWithContext(context.Background())
}

func (i TemplateSourceEntitySourceTemplateArgs) ToTemplateSourceEntitySourceTemplateOutputWithContext(ctx context.Context) TemplateSourceEntitySourceTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSourceEntitySourceTemplateOutput)
}

func (i TemplateSourceEntitySourceTemplateArgs) ToTemplateSourceEntitySourceTemplatePtrOutput() TemplateSourceEntitySourceTemplatePtrOutput {
	return i.ToTemplateSourceEntitySourceTemplatePtrOutputWithContext(context.Background())
}

func (i TemplateSourceEntitySourceTemplateArgs) ToTemplateSourceEntitySourceTemplatePtrOutputWithContext(ctx context.Context) TemplateSourceEntitySourceTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSourceEntitySourceTemplateOutput).ToTemplateSourceEntitySourceTemplatePtrOutputWithContext(ctx)
}

// TemplateSourceEntitySourceTemplatePtrInput is an input type that accepts TemplateSourceEntitySourceTemplateArgs, TemplateSourceEntitySourceTemplatePtr and TemplateSourceEntitySourceTemplatePtrOutput values.
// You can construct a concrete instance of `TemplateSourceEntitySourceTemplatePtrInput` via:
//
//	        TemplateSourceEntitySourceTemplateArgs{...}
//
//	or:
//
//	        nil
type TemplateSourceEntitySourceTemplatePtrInput interface {
	pulumi.Input

	ToTemplateSourceEntitySourceTemplatePtrOutput() TemplateSourceEntitySourceTemplatePtrOutput
	ToTemplateSourceEntitySourceTemplatePtrOutputWithContext(context.Context) TemplateSourceEntitySourceTemplatePtrOutput
}

type templateSourceEntitySourceTemplatePtrType TemplateSourceEntitySourceTemplateArgs

func TemplateSourceEntitySourceTemplatePtr(v *TemplateSourceEntitySourceTemplateArgs) TemplateSourceEntitySourceTemplatePtrInput {
	return (*templateSourceEntitySourceTemplatePtrType)(v)
}

func (*templateSourceEntitySourceTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSourceEntitySourceTemplate)(nil)).Elem()
}

func (i *templateSourceEntitySourceTemplatePtrType) ToTemplateSourceEntitySourceTemplatePtrOutput() TemplateSourceEntitySourceTemplatePtrOutput {
	return i.ToTemplateSourceEntitySourceTemplatePtrOutputWithContext(context.Background())
}

func (i *templateSourceEntitySourceTemplatePtrType) ToTemplateSourceEntitySourceTemplatePtrOutputWithContext(ctx context.Context) TemplateSourceEntitySourceTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSourceEntitySourceTemplatePtrOutput)
}

type TemplateSourceEntitySourceTemplateOutput struct{ *pulumi.OutputState }

func (TemplateSourceEntitySourceTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSourceEntitySourceTemplate)(nil)).Elem()
}

func (o TemplateSourceEntitySourceTemplateOutput) ToTemplateSourceEntitySourceTemplateOutput() TemplateSourceEntitySourceTemplateOutput {
	return o
}

func (o TemplateSourceEntitySourceTemplateOutput) ToTemplateSourceEntitySourceTemplateOutputWithContext(ctx context.Context) TemplateSourceEntitySourceTemplateOutput {
	return o
}

func (o TemplateSourceEntitySourceTemplateOutput) ToTemplateSourceEntitySourceTemplatePtrOutput() TemplateSourceEntitySourceTemplatePtrOutput {
	return o.ToTemplateSourceEntitySourceTemplatePtrOutputWithContext(context.Background())
}

func (o TemplateSourceEntitySourceTemplateOutput) ToTemplateSourceEntitySourceTemplatePtrOutputWithContext(ctx context.Context) TemplateSourceEntitySourceTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateSourceEntitySourceTemplate) *TemplateSourceEntitySourceTemplate {
		return &v
	}).(TemplateSourceEntitySourceTemplatePtrOutput)
}

// The Amazon Resource Name (ARN) of the resource.
func (o TemplateSourceEntitySourceTemplateOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateSourceEntitySourceTemplate) string { return v.Arn }).(pulumi.StringOutput)
}

type TemplateSourceEntitySourceTemplatePtrOutput struct{ *pulumi.OutputState }

func (TemplateSourceEntitySourceTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSourceEntitySourceTemplate)(nil)).Elem()
}

func (o TemplateSourceEntitySourceTemplatePtrOutput) ToTemplateSourceEntitySourceTemplatePtrOutput() TemplateSourceEntitySourceTemplatePtrOutput {
	return o
}

func (o TemplateSourceEntitySourceTemplatePtrOutput) ToTemplateSourceEntitySourceTemplatePtrOutputWithContext(ctx context.Context) TemplateSourceEntitySourceTemplatePtrOutput {
	return o
}

func (o TemplateSourceEntitySourceTemplatePtrOutput) Elem() TemplateSourceEntitySourceTemplateOutput {
	return o.ApplyT(func(v *TemplateSourceEntitySourceTemplate) TemplateSourceEntitySourceTemplate {
		if v != nil {
			return *v
		}
		var ret TemplateSourceEntitySourceTemplate
		return ret
	}).(TemplateSourceEntitySourceTemplateOutput)
}

// The Amazon Resource Name (ARN) of the resource.
func (o TemplateSourceEntitySourceTemplatePtrOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateSourceEntitySourceTemplate) *string {
		if v == nil {
			return nil
		}
		return &v.Arn
	}).(pulumi.StringPtrOutput)
}

type ThemeConfiguration struct {
	// Color properties that apply to chart data colors. See data_color_palette.
	DataColorPalette *ThemeConfigurationDataColorPalette `pulumi:"dataColorPalette"`
	// Display options related to sheets. See sheet.
	Sheet *ThemeConfigurationSheet `pulumi:"sheet"`
	// Determines the typography options. See typography.
	Typography *ThemeConfigurationTypography `pulumi:"typography"`
	// Color properties that apply to the UI and to charts, excluding the colors that apply to data. See ui_color_palette.
	UiColorPalette *ThemeConfigurationUiColorPalette `pulumi:"uiColorPalette"`
}

// ThemeConfigurationInput is an input type that accepts ThemeConfigurationArgs and ThemeConfigurationOutput values.
// You can construct a concrete instance of `ThemeConfigurationInput` via:
//
//	ThemeConfigurationArgs{...}
type ThemeConfigurationInput interface {
	pulumi.Input

	ToThemeConfigurationOutput() ThemeConfigurationOutput
	ToThemeConfigurationOutputWithContext(context.Context) ThemeConfigurationOutput
}

type ThemeConfigurationArgs struct {
	// Color properties that apply to chart data colors. See data_color_palette.
	DataColorPalette ThemeConfigurationDataColorPalettePtrInput `pulumi:"dataColorPalette"`
	// Display options related to sheets. See sheet.
	Sheet ThemeConfigurationSheetPtrInput `pulumi:"sheet"`
	// Determines the typography options. See typography.
	Typography ThemeConfigurationTypographyPtrInput `pulumi:"typography"`
	// Color properties that apply to the UI and to charts, excluding the colors that apply to data. See ui_color_palette.
	UiColorPalette ThemeConfigurationUiColorPalettePtrInput `pulumi:"uiColorPalette"`
}

func (ThemeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfiguration)(nil)).Elem()
}

func (i ThemeConfigurationArgs) ToThemeConfigurationOutput() ThemeConfigurationOutput {
	return i.ToThemeConfigurationOutputWithContext(context.Background())
}

func (i ThemeConfigurationArgs) ToThemeConfigurationOutputWithContext(ctx context.Context) ThemeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationOutput)
}

func (i ThemeConfigurationArgs) ToThemeConfigurationPtrOutput() ThemeConfigurationPtrOutput {
	return i.ToThemeConfigurationPtrOutputWithContext(context.Background())
}

func (i ThemeConfigurationArgs) ToThemeConfigurationPtrOutputWithContext(ctx context.Context) ThemeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationOutput).ToThemeConfigurationPtrOutputWithContext(ctx)
}

// ThemeConfigurationPtrInput is an input type that accepts ThemeConfigurationArgs, ThemeConfigurationPtr and ThemeConfigurationPtrOutput values.
// You can construct a concrete instance of `ThemeConfigurationPtrInput` via:
//
//	        ThemeConfigurationArgs{...}
//
//	or:
//
//	        nil
type ThemeConfigurationPtrInput interface {
	pulumi.Input

	ToThemeConfigurationPtrOutput() ThemeConfigurationPtrOutput
	ToThemeConfigurationPtrOutputWithContext(context.Context) ThemeConfigurationPtrOutput
}

type themeConfigurationPtrType ThemeConfigurationArgs

func ThemeConfigurationPtr(v *ThemeConfigurationArgs) ThemeConfigurationPtrInput {
	return (*themeConfigurationPtrType)(v)
}

func (*themeConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeConfiguration)(nil)).Elem()
}

func (i *themeConfigurationPtrType) ToThemeConfigurationPtrOutput() ThemeConfigurationPtrOutput {
	return i.ToThemeConfigurationPtrOutputWithContext(context.Background())
}

func (i *themeConfigurationPtrType) ToThemeConfigurationPtrOutputWithContext(ctx context.Context) ThemeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationPtrOutput)
}

type ThemeConfigurationOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfiguration)(nil)).Elem()
}

func (o ThemeConfigurationOutput) ToThemeConfigurationOutput() ThemeConfigurationOutput {
	return o
}

func (o ThemeConfigurationOutput) ToThemeConfigurationOutputWithContext(ctx context.Context) ThemeConfigurationOutput {
	return o
}

func (o ThemeConfigurationOutput) ToThemeConfigurationPtrOutput() ThemeConfigurationPtrOutput {
	return o.ToThemeConfigurationPtrOutputWithContext(context.Background())
}

func (o ThemeConfigurationOutput) ToThemeConfigurationPtrOutputWithContext(ctx context.Context) ThemeConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeConfiguration) *ThemeConfiguration {
		return &v
	}).(ThemeConfigurationPtrOutput)
}

// Color properties that apply to chart data colors. See data_color_palette.
func (o ThemeConfigurationOutput) DataColorPalette() ThemeConfigurationDataColorPalettePtrOutput {
	return o.ApplyT(func(v ThemeConfiguration) *ThemeConfigurationDataColorPalette { return v.DataColorPalette }).(ThemeConfigurationDataColorPalettePtrOutput)
}

// Display options related to sheets. See sheet.
func (o ThemeConfigurationOutput) Sheet() ThemeConfigurationSheetPtrOutput {
	return o.ApplyT(func(v ThemeConfiguration) *ThemeConfigurationSheet { return v.Sheet }).(ThemeConfigurationSheetPtrOutput)
}

// Determines the typography options. See typography.
func (o ThemeConfigurationOutput) Typography() ThemeConfigurationTypographyPtrOutput {
	return o.ApplyT(func(v ThemeConfiguration) *ThemeConfigurationTypography { return v.Typography }).(ThemeConfigurationTypographyPtrOutput)
}

// Color properties that apply to the UI and to charts, excluding the colors that apply to data. See ui_color_palette.
func (o ThemeConfigurationOutput) UiColorPalette() ThemeConfigurationUiColorPalettePtrOutput {
	return o.ApplyT(func(v ThemeConfiguration) *ThemeConfigurationUiColorPalette { return v.UiColorPalette }).(ThemeConfigurationUiColorPalettePtrOutput)
}

type ThemeConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeConfiguration)(nil)).Elem()
}

func (o ThemeConfigurationPtrOutput) ToThemeConfigurationPtrOutput() ThemeConfigurationPtrOutput {
	return o
}

func (o ThemeConfigurationPtrOutput) ToThemeConfigurationPtrOutputWithContext(ctx context.Context) ThemeConfigurationPtrOutput {
	return o
}

func (o ThemeConfigurationPtrOutput) Elem() ThemeConfigurationOutput {
	return o.ApplyT(func(v *ThemeConfiguration) ThemeConfiguration {
		if v != nil {
			return *v
		}
		var ret ThemeConfiguration
		return ret
	}).(ThemeConfigurationOutput)
}

// Color properties that apply to chart data colors. See data_color_palette.
func (o ThemeConfigurationPtrOutput) DataColorPalette() ThemeConfigurationDataColorPalettePtrOutput {
	return o.ApplyT(func(v *ThemeConfiguration) *ThemeConfigurationDataColorPalette {
		if v == nil {
			return nil
		}
		return v.DataColorPalette
	}).(ThemeConfigurationDataColorPalettePtrOutput)
}

// Display options related to sheets. See sheet.
func (o ThemeConfigurationPtrOutput) Sheet() ThemeConfigurationSheetPtrOutput {
	return o.ApplyT(func(v *ThemeConfiguration) *ThemeConfigurationSheet {
		if v == nil {
			return nil
		}
		return v.Sheet
	}).(ThemeConfigurationSheetPtrOutput)
}

// Determines the typography options. See typography.
func (o ThemeConfigurationPtrOutput) Typography() ThemeConfigurationTypographyPtrOutput {
	return o.ApplyT(func(v *ThemeConfiguration) *ThemeConfigurationTypography {
		if v == nil {
			return nil
		}
		return v.Typography
	}).(ThemeConfigurationTypographyPtrOutput)
}

// Color properties that apply to the UI and to charts, excluding the colors that apply to data. See ui_color_palette.
func (o ThemeConfigurationPtrOutput) UiColorPalette() ThemeConfigurationUiColorPalettePtrOutput {
	return o.ApplyT(func(v *ThemeConfiguration) *ThemeConfigurationUiColorPalette {
		if v == nil {
			return nil
		}
		return v.UiColorPalette
	}).(ThemeConfigurationUiColorPalettePtrOutput)
}

type ThemeConfigurationDataColorPalette struct {
	// List of hexadecimal codes for the colors. Minimum of 8 items and maximum of 20 items.
	Colors []string `pulumi:"colors"`
	// The hexadecimal code of a color that applies to charts where a lack of data is highlighted.
	EmptyFillColor *string `pulumi:"emptyFillColor"`
	// The minimum and maximum hexadecimal codes that describe a color gradient. List of exactly 2 items.
	MinMaxGradients []string `pulumi:"minMaxGradients"`
}

// ThemeConfigurationDataColorPaletteInput is an input type that accepts ThemeConfigurationDataColorPaletteArgs and ThemeConfigurationDataColorPaletteOutput values.
// You can construct a concrete instance of `ThemeConfigurationDataColorPaletteInput` via:
//
//	ThemeConfigurationDataColorPaletteArgs{...}
type ThemeConfigurationDataColorPaletteInput interface {
	pulumi.Input

	ToThemeConfigurationDataColorPaletteOutput() ThemeConfigurationDataColorPaletteOutput
	ToThemeConfigurationDataColorPaletteOutputWithContext(context.Context) ThemeConfigurationDataColorPaletteOutput
}

type ThemeConfigurationDataColorPaletteArgs struct {
	// List of hexadecimal codes for the colors. Minimum of 8 items and maximum of 20 items.
	Colors pulumi.StringArrayInput `pulumi:"colors"`
	// The hexadecimal code of a color that applies to charts where a lack of data is highlighted.
	EmptyFillColor pulumi.StringPtrInput `pulumi:"emptyFillColor"`
	// The minimum and maximum hexadecimal codes that describe a color gradient. List of exactly 2 items.
	MinMaxGradients pulumi.StringArrayInput `pulumi:"minMaxGradients"`
}

func (ThemeConfigurationDataColorPaletteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationDataColorPalette)(nil)).Elem()
}

func (i ThemeConfigurationDataColorPaletteArgs) ToThemeConfigurationDataColorPaletteOutput() ThemeConfigurationDataColorPaletteOutput {
	return i.ToThemeConfigurationDataColorPaletteOutputWithContext(context.Background())
}

func (i ThemeConfigurationDataColorPaletteArgs) ToThemeConfigurationDataColorPaletteOutputWithContext(ctx context.Context) ThemeConfigurationDataColorPaletteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationDataColorPaletteOutput)
}

func (i ThemeConfigurationDataColorPaletteArgs) ToThemeConfigurationDataColorPalettePtrOutput() ThemeConfigurationDataColorPalettePtrOutput {
	return i.ToThemeConfigurationDataColorPalettePtrOutputWithContext(context.Background())
}

func (i ThemeConfigurationDataColorPaletteArgs) ToThemeConfigurationDataColorPalettePtrOutputWithContext(ctx context.Context) ThemeConfigurationDataColorPalettePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationDataColorPaletteOutput).ToThemeConfigurationDataColorPalettePtrOutputWithContext(ctx)
}

// ThemeConfigurationDataColorPalettePtrInput is an input type that accepts ThemeConfigurationDataColorPaletteArgs, ThemeConfigurationDataColorPalettePtr and ThemeConfigurationDataColorPalettePtrOutput values.
// You can construct a concrete instance of `ThemeConfigurationDataColorPalettePtrInput` via:
//
//	        ThemeConfigurationDataColorPaletteArgs{...}
//
//	or:
//
//	        nil
type ThemeConfigurationDataColorPalettePtrInput interface {
	pulumi.Input

	ToThemeConfigurationDataColorPalettePtrOutput() ThemeConfigurationDataColorPalettePtrOutput
	ToThemeConfigurationDataColorPalettePtrOutputWithContext(context.Context) ThemeConfigurationDataColorPalettePtrOutput
}

type themeConfigurationDataColorPalettePtrType ThemeConfigurationDataColorPaletteArgs

func ThemeConfigurationDataColorPalettePtr(v *ThemeConfigurationDataColorPaletteArgs) ThemeConfigurationDataColorPalettePtrInput {
	return (*themeConfigurationDataColorPalettePtrType)(v)
}

func (*themeConfigurationDataColorPalettePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeConfigurationDataColorPalette)(nil)).Elem()
}

func (i *themeConfigurationDataColorPalettePtrType) ToThemeConfigurationDataColorPalettePtrOutput() ThemeConfigurationDataColorPalettePtrOutput {
	return i.ToThemeConfigurationDataColorPalettePtrOutputWithContext(context.Background())
}

func (i *themeConfigurationDataColorPalettePtrType) ToThemeConfigurationDataColorPalettePtrOutputWithContext(ctx context.Context) ThemeConfigurationDataColorPalettePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationDataColorPalettePtrOutput)
}

type ThemeConfigurationDataColorPaletteOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationDataColorPaletteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationDataColorPalette)(nil)).Elem()
}

func (o ThemeConfigurationDataColorPaletteOutput) ToThemeConfigurationDataColorPaletteOutput() ThemeConfigurationDataColorPaletteOutput {
	return o
}

func (o ThemeConfigurationDataColorPaletteOutput) ToThemeConfigurationDataColorPaletteOutputWithContext(ctx context.Context) ThemeConfigurationDataColorPaletteOutput {
	return o
}

func (o ThemeConfigurationDataColorPaletteOutput) ToThemeConfigurationDataColorPalettePtrOutput() ThemeConfigurationDataColorPalettePtrOutput {
	return o.ToThemeConfigurationDataColorPalettePtrOutputWithContext(context.Background())
}

func (o ThemeConfigurationDataColorPaletteOutput) ToThemeConfigurationDataColorPalettePtrOutputWithContext(ctx context.Context) ThemeConfigurationDataColorPalettePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeConfigurationDataColorPalette) *ThemeConfigurationDataColorPalette {
		return &v
	}).(ThemeConfigurationDataColorPalettePtrOutput)
}

// List of hexadecimal codes for the colors. Minimum of 8 items and maximum of 20 items.
func (o ThemeConfigurationDataColorPaletteOutput) Colors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThemeConfigurationDataColorPalette) []string { return v.Colors }).(pulumi.StringArrayOutput)
}

// The hexadecimal code of a color that applies to charts where a lack of data is highlighted.
func (o ThemeConfigurationDataColorPaletteOutput) EmptyFillColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeConfigurationDataColorPalette) *string { return v.EmptyFillColor }).(pulumi.StringPtrOutput)
}

// The minimum and maximum hexadecimal codes that describe a color gradient. List of exactly 2 items.
func (o ThemeConfigurationDataColorPaletteOutput) MinMaxGradients() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThemeConfigurationDataColorPalette) []string { return v.MinMaxGradients }).(pulumi.StringArrayOutput)
}

type ThemeConfigurationDataColorPalettePtrOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationDataColorPalettePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeConfigurationDataColorPalette)(nil)).Elem()
}

func (o ThemeConfigurationDataColorPalettePtrOutput) ToThemeConfigurationDataColorPalettePtrOutput() ThemeConfigurationDataColorPalettePtrOutput {
	return o
}

func (o ThemeConfigurationDataColorPalettePtrOutput) ToThemeConfigurationDataColorPalettePtrOutputWithContext(ctx context.Context) ThemeConfigurationDataColorPalettePtrOutput {
	return o
}

func (o ThemeConfigurationDataColorPalettePtrOutput) Elem() ThemeConfigurationDataColorPaletteOutput {
	return o.ApplyT(func(v *ThemeConfigurationDataColorPalette) ThemeConfigurationDataColorPalette {
		if v != nil {
			return *v
		}
		var ret ThemeConfigurationDataColorPalette
		return ret
	}).(ThemeConfigurationDataColorPaletteOutput)
}

// List of hexadecimal codes for the colors. Minimum of 8 items and maximum of 20 items.
func (o ThemeConfigurationDataColorPalettePtrOutput) Colors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThemeConfigurationDataColorPalette) []string {
		if v == nil {
			return nil
		}
		return v.Colors
	}).(pulumi.StringArrayOutput)
}

// The hexadecimal code of a color that applies to charts where a lack of data is highlighted.
func (o ThemeConfigurationDataColorPalettePtrOutput) EmptyFillColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeConfigurationDataColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.EmptyFillColor
	}).(pulumi.StringPtrOutput)
}

// The minimum and maximum hexadecimal codes that describe a color gradient. List of exactly 2 items.
func (o ThemeConfigurationDataColorPalettePtrOutput) MinMaxGradients() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThemeConfigurationDataColorPalette) []string {
		if v == nil {
			return nil
		}
		return v.MinMaxGradients
	}).(pulumi.StringArrayOutput)
}

type ThemeConfigurationSheet struct {
	// The display options for tiles. See tile.
	Tile *ThemeConfigurationSheetTile `pulumi:"tile"`
	// The layout options for tiles. See tile_layout.
	TileLayout *ThemeConfigurationSheetTileLayout `pulumi:"tileLayout"`
}

// ThemeConfigurationSheetInput is an input type that accepts ThemeConfigurationSheetArgs and ThemeConfigurationSheetOutput values.
// You can construct a concrete instance of `ThemeConfigurationSheetInput` via:
//
//	ThemeConfigurationSheetArgs{...}
type ThemeConfigurationSheetInput interface {
	pulumi.Input

	ToThemeConfigurationSheetOutput() ThemeConfigurationSheetOutput
	ToThemeConfigurationSheetOutputWithContext(context.Context) ThemeConfigurationSheetOutput
}

type ThemeConfigurationSheetArgs struct {
	// The display options for tiles. See tile.
	Tile ThemeConfigurationSheetTilePtrInput `pulumi:"tile"`
	// The layout options for tiles. See tile_layout.
	TileLayout ThemeConfigurationSheetTileLayoutPtrInput `pulumi:"tileLayout"`
}

func (ThemeConfigurationSheetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationSheet)(nil)).Elem()
}

func (i ThemeConfigurationSheetArgs) ToThemeConfigurationSheetOutput() ThemeConfigurationSheetOutput {
	return i.ToThemeConfigurationSheetOutputWithContext(context.Background())
}

func (i ThemeConfigurationSheetArgs) ToThemeConfigurationSheetOutputWithContext(ctx context.Context) ThemeConfigurationSheetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationSheetOutput)
}

func (i ThemeConfigurationSheetArgs) ToThemeConfigurationSheetPtrOutput() ThemeConfigurationSheetPtrOutput {
	return i.ToThemeConfigurationSheetPtrOutputWithContext(context.Background())
}

func (i ThemeConfigurationSheetArgs) ToThemeConfigurationSheetPtrOutputWithContext(ctx context.Context) ThemeConfigurationSheetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationSheetOutput).ToThemeConfigurationSheetPtrOutputWithContext(ctx)
}

// ThemeConfigurationSheetPtrInput is an input type that accepts ThemeConfigurationSheetArgs, ThemeConfigurationSheetPtr and ThemeConfigurationSheetPtrOutput values.
// You can construct a concrete instance of `ThemeConfigurationSheetPtrInput` via:
//
//	        ThemeConfigurationSheetArgs{...}
//
//	or:
//
//	        nil
type ThemeConfigurationSheetPtrInput interface {
	pulumi.Input

	ToThemeConfigurationSheetPtrOutput() ThemeConfigurationSheetPtrOutput
	ToThemeConfigurationSheetPtrOutputWithContext(context.Context) ThemeConfigurationSheetPtrOutput
}

type themeConfigurationSheetPtrType ThemeConfigurationSheetArgs

func ThemeConfigurationSheetPtr(v *ThemeConfigurationSheetArgs) ThemeConfigurationSheetPtrInput {
	return (*themeConfigurationSheetPtrType)(v)
}

func (*themeConfigurationSheetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeConfigurationSheet)(nil)).Elem()
}

func (i *themeConfigurationSheetPtrType) ToThemeConfigurationSheetPtrOutput() ThemeConfigurationSheetPtrOutput {
	return i.ToThemeConfigurationSheetPtrOutputWithContext(context.Background())
}

func (i *themeConfigurationSheetPtrType) ToThemeConfigurationSheetPtrOutputWithContext(ctx context.Context) ThemeConfigurationSheetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationSheetPtrOutput)
}

type ThemeConfigurationSheetOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationSheetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationSheet)(nil)).Elem()
}

func (o ThemeConfigurationSheetOutput) ToThemeConfigurationSheetOutput() ThemeConfigurationSheetOutput {
	return o
}

func (o ThemeConfigurationSheetOutput) ToThemeConfigurationSheetOutputWithContext(ctx context.Context) ThemeConfigurationSheetOutput {
	return o
}

func (o ThemeConfigurationSheetOutput) ToThemeConfigurationSheetPtrOutput() ThemeConfigurationSheetPtrOutput {
	return o.ToThemeConfigurationSheetPtrOutputWithContext(context.Background())
}

func (o ThemeConfigurationSheetOutput) ToThemeConfigurationSheetPtrOutputWithContext(ctx context.Context) ThemeConfigurationSheetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeConfigurationSheet) *ThemeConfigurationSheet {
		return &v
	}).(ThemeConfigurationSheetPtrOutput)
}

// The display options for tiles. See tile.
func (o ThemeConfigurationSheetOutput) Tile() ThemeConfigurationSheetTilePtrOutput {
	return o.ApplyT(func(v ThemeConfigurationSheet) *ThemeConfigurationSheetTile { return v.Tile }).(ThemeConfigurationSheetTilePtrOutput)
}

// The layout options for tiles. See tile_layout.
func (o ThemeConfigurationSheetOutput) TileLayout() ThemeConfigurationSheetTileLayoutPtrOutput {
	return o.ApplyT(func(v ThemeConfigurationSheet) *ThemeConfigurationSheetTileLayout { return v.TileLayout }).(ThemeConfigurationSheetTileLayoutPtrOutput)
}

type ThemeConfigurationSheetPtrOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationSheetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeConfigurationSheet)(nil)).Elem()
}

func (o ThemeConfigurationSheetPtrOutput) ToThemeConfigurationSheetPtrOutput() ThemeConfigurationSheetPtrOutput {
	return o
}

func (o ThemeConfigurationSheetPtrOutput) ToThemeConfigurationSheetPtrOutputWithContext(ctx context.Context) ThemeConfigurationSheetPtrOutput {
	return o
}

func (o ThemeConfigurationSheetPtrOutput) Elem() ThemeConfigurationSheetOutput {
	return o.ApplyT(func(v *ThemeConfigurationSheet) ThemeConfigurationSheet {
		if v != nil {
			return *v
		}
		var ret ThemeConfigurationSheet
		return ret
	}).(ThemeConfigurationSheetOutput)
}

// The display options for tiles. See tile.
func (o ThemeConfigurationSheetPtrOutput) Tile() ThemeConfigurationSheetTilePtrOutput {
	return o.ApplyT(func(v *ThemeConfigurationSheet) *ThemeConfigurationSheetTile {
		if v == nil {
			return nil
		}
		return v.Tile
	}).(ThemeConfigurationSheetTilePtrOutput)
}

// The layout options for tiles. See tile_layout.
func (o ThemeConfigurationSheetPtrOutput) TileLayout() ThemeConfigurationSheetTileLayoutPtrOutput {
	return o.ApplyT(func(v *ThemeConfigurationSheet) *ThemeConfigurationSheetTileLayout {
		if v == nil {
			return nil
		}
		return v.TileLayout
	}).(ThemeConfigurationSheetTileLayoutPtrOutput)
}

type ThemeConfigurationSheetTile struct {
	// The border around a tile. See border.
	Border *ThemeConfigurationSheetTileBorder `pulumi:"border"`
}

// ThemeConfigurationSheetTileInput is an input type that accepts ThemeConfigurationSheetTileArgs and ThemeConfigurationSheetTileOutput values.
// You can construct a concrete instance of `ThemeConfigurationSheetTileInput` via:
//
//	ThemeConfigurationSheetTileArgs{...}
type ThemeConfigurationSheetTileInput interface {
	pulumi.Input

	ToThemeConfigurationSheetTileOutput() ThemeConfigurationSheetTileOutput
	ToThemeConfigurationSheetTileOutputWithContext(context.Context) ThemeConfigurationSheetTileOutput
}

type ThemeConfigurationSheetTileArgs struct {
	// The border around a tile. See border.
	Border ThemeConfigurationSheetTileBorderPtrInput `pulumi:"border"`
}

func (ThemeConfigurationSheetTileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationSheetTile)(nil)).Elem()
}

func (i ThemeConfigurationSheetTileArgs) ToThemeConfigurationSheetTileOutput() ThemeConfigurationSheetTileOutput {
	return i.ToThemeConfigurationSheetTileOutputWithContext(context.Background())
}

func (i ThemeConfigurationSheetTileArgs) ToThemeConfigurationSheetTileOutputWithContext(ctx context.Context) ThemeConfigurationSheetTileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationSheetTileOutput)
}

func (i ThemeConfigurationSheetTileArgs) ToThemeConfigurationSheetTilePtrOutput() ThemeConfigurationSheetTilePtrOutput {
	return i.ToThemeConfigurationSheetTilePtrOutputWithContext(context.Background())
}

func (i ThemeConfigurationSheetTileArgs) ToThemeConfigurationSheetTilePtrOutputWithContext(ctx context.Context) ThemeConfigurationSheetTilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationSheetTileOutput).ToThemeConfigurationSheetTilePtrOutputWithContext(ctx)
}

// ThemeConfigurationSheetTilePtrInput is an input type that accepts ThemeConfigurationSheetTileArgs, ThemeConfigurationSheetTilePtr and ThemeConfigurationSheetTilePtrOutput values.
// You can construct a concrete instance of `ThemeConfigurationSheetTilePtrInput` via:
//
//	        ThemeConfigurationSheetTileArgs{...}
//
//	or:
//
//	        nil
type ThemeConfigurationSheetTilePtrInput interface {
	pulumi.Input

	ToThemeConfigurationSheetTilePtrOutput() ThemeConfigurationSheetTilePtrOutput
	ToThemeConfigurationSheetTilePtrOutputWithContext(context.Context) ThemeConfigurationSheetTilePtrOutput
}

type themeConfigurationSheetTilePtrType ThemeConfigurationSheetTileArgs

func ThemeConfigurationSheetTilePtr(v *ThemeConfigurationSheetTileArgs) ThemeConfigurationSheetTilePtrInput {
	return (*themeConfigurationSheetTilePtrType)(v)
}

func (*themeConfigurationSheetTilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeConfigurationSheetTile)(nil)).Elem()
}

func (i *themeConfigurationSheetTilePtrType) ToThemeConfigurationSheetTilePtrOutput() ThemeConfigurationSheetTilePtrOutput {
	return i.ToThemeConfigurationSheetTilePtrOutputWithContext(context.Background())
}

func (i *themeConfigurationSheetTilePtrType) ToThemeConfigurationSheetTilePtrOutputWithContext(ctx context.Context) ThemeConfigurationSheetTilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationSheetTilePtrOutput)
}

type ThemeConfigurationSheetTileOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationSheetTileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationSheetTile)(nil)).Elem()
}

func (o ThemeConfigurationSheetTileOutput) ToThemeConfigurationSheetTileOutput() ThemeConfigurationSheetTileOutput {
	return o
}

func (o ThemeConfigurationSheetTileOutput) ToThemeConfigurationSheetTileOutputWithContext(ctx context.Context) ThemeConfigurationSheetTileOutput {
	return o
}

func (o ThemeConfigurationSheetTileOutput) ToThemeConfigurationSheetTilePtrOutput() ThemeConfigurationSheetTilePtrOutput {
	return o.ToThemeConfigurationSheetTilePtrOutputWithContext(context.Background())
}

func (o ThemeConfigurationSheetTileOutput) ToThemeConfigurationSheetTilePtrOutputWithContext(ctx context.Context) ThemeConfigurationSheetTilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeConfigurationSheetTile) *ThemeConfigurationSheetTile {
		return &v
	}).(ThemeConfigurationSheetTilePtrOutput)
}

// The border around a tile. See border.
func (o ThemeConfigurationSheetTileOutput) Border() ThemeConfigurationSheetTileBorderPtrOutput {
	return o.ApplyT(func(v ThemeConfigurationSheetTile) *ThemeConfigurationSheetTileBorder { return v.Border }).(ThemeConfigurationSheetTileBorderPtrOutput)
}

type ThemeConfigurationSheetTilePtrOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationSheetTilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeConfigurationSheetTile)(nil)).Elem()
}

func (o ThemeConfigurationSheetTilePtrOutput) ToThemeConfigurationSheetTilePtrOutput() ThemeConfigurationSheetTilePtrOutput {
	return o
}

func (o ThemeConfigurationSheetTilePtrOutput) ToThemeConfigurationSheetTilePtrOutputWithContext(ctx context.Context) ThemeConfigurationSheetTilePtrOutput {
	return o
}

func (o ThemeConfigurationSheetTilePtrOutput) Elem() ThemeConfigurationSheetTileOutput {
	return o.ApplyT(func(v *ThemeConfigurationSheetTile) ThemeConfigurationSheetTile {
		if v != nil {
			return *v
		}
		var ret ThemeConfigurationSheetTile
		return ret
	}).(ThemeConfigurationSheetTileOutput)
}

// The border around a tile. See border.
func (o ThemeConfigurationSheetTilePtrOutput) Border() ThemeConfigurationSheetTileBorderPtrOutput {
	return o.ApplyT(func(v *ThemeConfigurationSheetTile) *ThemeConfigurationSheetTileBorder {
		if v == nil {
			return nil
		}
		return v.Border
	}).(ThemeConfigurationSheetTileBorderPtrOutput)
}

type ThemeConfigurationSheetTileBorder struct {
	// The option to enable display of borders for visuals.
	Show *bool `pulumi:"show"`
}

// ThemeConfigurationSheetTileBorderInput is an input type that accepts ThemeConfigurationSheetTileBorderArgs and ThemeConfigurationSheetTileBorderOutput values.
// You can construct a concrete instance of `ThemeConfigurationSheetTileBorderInput` via:
//
//	ThemeConfigurationSheetTileBorderArgs{...}
type ThemeConfigurationSheetTileBorderInput interface {
	pulumi.Input

	ToThemeConfigurationSheetTileBorderOutput() ThemeConfigurationSheetTileBorderOutput
	ToThemeConfigurationSheetTileBorderOutputWithContext(context.Context) ThemeConfigurationSheetTileBorderOutput
}

type ThemeConfigurationSheetTileBorderArgs struct {
	// The option to enable display of borders for visuals.
	Show pulumi.BoolPtrInput `pulumi:"show"`
}

func (ThemeConfigurationSheetTileBorderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationSheetTileBorder)(nil)).Elem()
}

func (i ThemeConfigurationSheetTileBorderArgs) ToThemeConfigurationSheetTileBorderOutput() ThemeConfigurationSheetTileBorderOutput {
	return i.ToThemeConfigurationSheetTileBorderOutputWithContext(context.Background())
}

func (i ThemeConfigurationSheetTileBorderArgs) ToThemeConfigurationSheetTileBorderOutputWithContext(ctx context.Context) ThemeConfigurationSheetTileBorderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationSheetTileBorderOutput)
}

func (i ThemeConfigurationSheetTileBorderArgs) ToThemeConfigurationSheetTileBorderPtrOutput() ThemeConfigurationSheetTileBorderPtrOutput {
	return i.ToThemeConfigurationSheetTileBorderPtrOutputWithContext(context.Background())
}

func (i ThemeConfigurationSheetTileBorderArgs) ToThemeConfigurationSheetTileBorderPtrOutputWithContext(ctx context.Context) ThemeConfigurationSheetTileBorderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationSheetTileBorderOutput).ToThemeConfigurationSheetTileBorderPtrOutputWithContext(ctx)
}

// ThemeConfigurationSheetTileBorderPtrInput is an input type that accepts ThemeConfigurationSheetTileBorderArgs, ThemeConfigurationSheetTileBorderPtr and ThemeConfigurationSheetTileBorderPtrOutput values.
// You can construct a concrete instance of `ThemeConfigurationSheetTileBorderPtrInput` via:
//
//	        ThemeConfigurationSheetTileBorderArgs{...}
//
//	or:
//
//	        nil
type ThemeConfigurationSheetTileBorderPtrInput interface {
	pulumi.Input

	ToThemeConfigurationSheetTileBorderPtrOutput() ThemeConfigurationSheetTileBorderPtrOutput
	ToThemeConfigurationSheetTileBorderPtrOutputWithContext(context.Context) ThemeConfigurationSheetTileBorderPtrOutput
}

type themeConfigurationSheetTileBorderPtrType ThemeConfigurationSheetTileBorderArgs

func ThemeConfigurationSheetTileBorderPtr(v *ThemeConfigurationSheetTileBorderArgs) ThemeConfigurationSheetTileBorderPtrInput {
	return (*themeConfigurationSheetTileBorderPtrType)(v)
}

func (*themeConfigurationSheetTileBorderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeConfigurationSheetTileBorder)(nil)).Elem()
}

func (i *themeConfigurationSheetTileBorderPtrType) ToThemeConfigurationSheetTileBorderPtrOutput() ThemeConfigurationSheetTileBorderPtrOutput {
	return i.ToThemeConfigurationSheetTileBorderPtrOutputWithContext(context.Background())
}

func (i *themeConfigurationSheetTileBorderPtrType) ToThemeConfigurationSheetTileBorderPtrOutputWithContext(ctx context.Context) ThemeConfigurationSheetTileBorderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationSheetTileBorderPtrOutput)
}

type ThemeConfigurationSheetTileBorderOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationSheetTileBorderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationSheetTileBorder)(nil)).Elem()
}

func (o ThemeConfigurationSheetTileBorderOutput) ToThemeConfigurationSheetTileBorderOutput() ThemeConfigurationSheetTileBorderOutput {
	return o
}

func (o ThemeConfigurationSheetTileBorderOutput) ToThemeConfigurationSheetTileBorderOutputWithContext(ctx context.Context) ThemeConfigurationSheetTileBorderOutput {
	return o
}

func (o ThemeConfigurationSheetTileBorderOutput) ToThemeConfigurationSheetTileBorderPtrOutput() ThemeConfigurationSheetTileBorderPtrOutput {
	return o.ToThemeConfigurationSheetTileBorderPtrOutputWithContext(context.Background())
}

func (o ThemeConfigurationSheetTileBorderOutput) ToThemeConfigurationSheetTileBorderPtrOutputWithContext(ctx context.Context) ThemeConfigurationSheetTileBorderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeConfigurationSheetTileBorder) *ThemeConfigurationSheetTileBorder {
		return &v
	}).(ThemeConfigurationSheetTileBorderPtrOutput)
}

// The option to enable display of borders for visuals.
func (o ThemeConfigurationSheetTileBorderOutput) Show() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThemeConfigurationSheetTileBorder) *bool { return v.Show }).(pulumi.BoolPtrOutput)
}

type ThemeConfigurationSheetTileBorderPtrOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationSheetTileBorderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeConfigurationSheetTileBorder)(nil)).Elem()
}

func (o ThemeConfigurationSheetTileBorderPtrOutput) ToThemeConfigurationSheetTileBorderPtrOutput() ThemeConfigurationSheetTileBorderPtrOutput {
	return o
}

func (o ThemeConfigurationSheetTileBorderPtrOutput) ToThemeConfigurationSheetTileBorderPtrOutputWithContext(ctx context.Context) ThemeConfigurationSheetTileBorderPtrOutput {
	return o
}

func (o ThemeConfigurationSheetTileBorderPtrOutput) Elem() ThemeConfigurationSheetTileBorderOutput {
	return o.ApplyT(func(v *ThemeConfigurationSheetTileBorder) ThemeConfigurationSheetTileBorder {
		if v != nil {
			return *v
		}
		var ret ThemeConfigurationSheetTileBorder
		return ret
	}).(ThemeConfigurationSheetTileBorderOutput)
}

// The option to enable display of borders for visuals.
func (o ThemeConfigurationSheetTileBorderPtrOutput) Show() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThemeConfigurationSheetTileBorder) *bool {
		if v == nil {
			return nil
		}
		return v.Show
	}).(pulumi.BoolPtrOutput)
}

type ThemeConfigurationSheetTileLayout struct {
	// The gutter settings that apply between tiles. See gutter.
	Gutter *ThemeConfigurationSheetTileLayoutGutter `pulumi:"gutter"`
	// The margin settings that apply around the outside edge of sheets. See margin.
	Margin *ThemeConfigurationSheetTileLayoutMargin `pulumi:"margin"`
}

// ThemeConfigurationSheetTileLayoutInput is an input type that accepts ThemeConfigurationSheetTileLayoutArgs and ThemeConfigurationSheetTileLayoutOutput values.
// You can construct a concrete instance of `ThemeConfigurationSheetTileLayoutInput` via:
//
//	ThemeConfigurationSheetTileLayoutArgs{...}
type ThemeConfigurationSheetTileLayoutInput interface {
	pulumi.Input

	ToThemeConfigurationSheetTileLayoutOutput() ThemeConfigurationSheetTileLayoutOutput
	ToThemeConfigurationSheetTileLayoutOutputWithContext(context.Context) ThemeConfigurationSheetTileLayoutOutput
}

type ThemeConfigurationSheetTileLayoutArgs struct {
	// The gutter settings that apply between tiles. See gutter.
	Gutter ThemeConfigurationSheetTileLayoutGutterPtrInput `pulumi:"gutter"`
	// The margin settings that apply around the outside edge of sheets. See margin.
	Margin ThemeConfigurationSheetTileLayoutMarginPtrInput `pulumi:"margin"`
}

func (ThemeConfigurationSheetTileLayoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationSheetTileLayout)(nil)).Elem()
}

func (i ThemeConfigurationSheetTileLayoutArgs) ToThemeConfigurationSheetTileLayoutOutput() ThemeConfigurationSheetTileLayoutOutput {
	return i.ToThemeConfigurationSheetTileLayoutOutputWithContext(context.Background())
}

func (i ThemeConfigurationSheetTileLayoutArgs) ToThemeConfigurationSheetTileLayoutOutputWithContext(ctx context.Context) ThemeConfigurationSheetTileLayoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationSheetTileLayoutOutput)
}

func (i ThemeConfigurationSheetTileLayoutArgs) ToThemeConfigurationSheetTileLayoutPtrOutput() ThemeConfigurationSheetTileLayoutPtrOutput {
	return i.ToThemeConfigurationSheetTileLayoutPtrOutputWithContext(context.Background())
}

func (i ThemeConfigurationSheetTileLayoutArgs) ToThemeConfigurationSheetTileLayoutPtrOutputWithContext(ctx context.Context) ThemeConfigurationSheetTileLayoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationSheetTileLayoutOutput).ToThemeConfigurationSheetTileLayoutPtrOutputWithContext(ctx)
}

// ThemeConfigurationSheetTileLayoutPtrInput is an input type that accepts ThemeConfigurationSheetTileLayoutArgs, ThemeConfigurationSheetTileLayoutPtr and ThemeConfigurationSheetTileLayoutPtrOutput values.
// You can construct a concrete instance of `ThemeConfigurationSheetTileLayoutPtrInput` via:
//
//	        ThemeConfigurationSheetTileLayoutArgs{...}
//
//	or:
//
//	        nil
type ThemeConfigurationSheetTileLayoutPtrInput interface {
	pulumi.Input

	ToThemeConfigurationSheetTileLayoutPtrOutput() ThemeConfigurationSheetTileLayoutPtrOutput
	ToThemeConfigurationSheetTileLayoutPtrOutputWithContext(context.Context) ThemeConfigurationSheetTileLayoutPtrOutput
}

type themeConfigurationSheetTileLayoutPtrType ThemeConfigurationSheetTileLayoutArgs

func ThemeConfigurationSheetTileLayoutPtr(v *ThemeConfigurationSheetTileLayoutArgs) ThemeConfigurationSheetTileLayoutPtrInput {
	return (*themeConfigurationSheetTileLayoutPtrType)(v)
}

func (*themeConfigurationSheetTileLayoutPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeConfigurationSheetTileLayout)(nil)).Elem()
}

func (i *themeConfigurationSheetTileLayoutPtrType) ToThemeConfigurationSheetTileLayoutPtrOutput() ThemeConfigurationSheetTileLayoutPtrOutput {
	return i.ToThemeConfigurationSheetTileLayoutPtrOutputWithContext(context.Background())
}

func (i *themeConfigurationSheetTileLayoutPtrType) ToThemeConfigurationSheetTileLayoutPtrOutputWithContext(ctx context.Context) ThemeConfigurationSheetTileLayoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationSheetTileLayoutPtrOutput)
}

type ThemeConfigurationSheetTileLayoutOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationSheetTileLayoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationSheetTileLayout)(nil)).Elem()
}

func (o ThemeConfigurationSheetTileLayoutOutput) ToThemeConfigurationSheetTileLayoutOutput() ThemeConfigurationSheetTileLayoutOutput {
	return o
}

func (o ThemeConfigurationSheetTileLayoutOutput) ToThemeConfigurationSheetTileLayoutOutputWithContext(ctx context.Context) ThemeConfigurationSheetTileLayoutOutput {
	return o
}

func (o ThemeConfigurationSheetTileLayoutOutput) ToThemeConfigurationSheetTileLayoutPtrOutput() ThemeConfigurationSheetTileLayoutPtrOutput {
	return o.ToThemeConfigurationSheetTileLayoutPtrOutputWithContext(context.Background())
}

func (o ThemeConfigurationSheetTileLayoutOutput) ToThemeConfigurationSheetTileLayoutPtrOutputWithContext(ctx context.Context) ThemeConfigurationSheetTileLayoutPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeConfigurationSheetTileLayout) *ThemeConfigurationSheetTileLayout {
		return &v
	}).(ThemeConfigurationSheetTileLayoutPtrOutput)
}

// The gutter settings that apply between tiles. See gutter.
func (o ThemeConfigurationSheetTileLayoutOutput) Gutter() ThemeConfigurationSheetTileLayoutGutterPtrOutput {
	return o.ApplyT(func(v ThemeConfigurationSheetTileLayout) *ThemeConfigurationSheetTileLayoutGutter { return v.Gutter }).(ThemeConfigurationSheetTileLayoutGutterPtrOutput)
}

// The margin settings that apply around the outside edge of sheets. See margin.
func (o ThemeConfigurationSheetTileLayoutOutput) Margin() ThemeConfigurationSheetTileLayoutMarginPtrOutput {
	return o.ApplyT(func(v ThemeConfigurationSheetTileLayout) *ThemeConfigurationSheetTileLayoutMargin { return v.Margin }).(ThemeConfigurationSheetTileLayoutMarginPtrOutput)
}

type ThemeConfigurationSheetTileLayoutPtrOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationSheetTileLayoutPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeConfigurationSheetTileLayout)(nil)).Elem()
}

func (o ThemeConfigurationSheetTileLayoutPtrOutput) ToThemeConfigurationSheetTileLayoutPtrOutput() ThemeConfigurationSheetTileLayoutPtrOutput {
	return o
}

func (o ThemeConfigurationSheetTileLayoutPtrOutput) ToThemeConfigurationSheetTileLayoutPtrOutputWithContext(ctx context.Context) ThemeConfigurationSheetTileLayoutPtrOutput {
	return o
}

func (o ThemeConfigurationSheetTileLayoutPtrOutput) Elem() ThemeConfigurationSheetTileLayoutOutput {
	return o.ApplyT(func(v *ThemeConfigurationSheetTileLayout) ThemeConfigurationSheetTileLayout {
		if v != nil {
			return *v
		}
		var ret ThemeConfigurationSheetTileLayout
		return ret
	}).(ThemeConfigurationSheetTileLayoutOutput)
}

// The gutter settings that apply between tiles. See gutter.
func (o ThemeConfigurationSheetTileLayoutPtrOutput) Gutter() ThemeConfigurationSheetTileLayoutGutterPtrOutput {
	return o.ApplyT(func(v *ThemeConfigurationSheetTileLayout) *ThemeConfigurationSheetTileLayoutGutter {
		if v == nil {
			return nil
		}
		return v.Gutter
	}).(ThemeConfigurationSheetTileLayoutGutterPtrOutput)
}

// The margin settings that apply around the outside edge of sheets. See margin.
func (o ThemeConfigurationSheetTileLayoutPtrOutput) Margin() ThemeConfigurationSheetTileLayoutMarginPtrOutput {
	return o.ApplyT(func(v *ThemeConfigurationSheetTileLayout) *ThemeConfigurationSheetTileLayoutMargin {
		if v == nil {
			return nil
		}
		return v.Margin
	}).(ThemeConfigurationSheetTileLayoutMarginPtrOutput)
}

type ThemeConfigurationSheetTileLayoutGutter struct {
	// This Boolean value controls whether to display a gutter space between sheet tiles.
	Show *bool `pulumi:"show"`
}

// ThemeConfigurationSheetTileLayoutGutterInput is an input type that accepts ThemeConfigurationSheetTileLayoutGutterArgs and ThemeConfigurationSheetTileLayoutGutterOutput values.
// You can construct a concrete instance of `ThemeConfigurationSheetTileLayoutGutterInput` via:
//
//	ThemeConfigurationSheetTileLayoutGutterArgs{...}
type ThemeConfigurationSheetTileLayoutGutterInput interface {
	pulumi.Input

	ToThemeConfigurationSheetTileLayoutGutterOutput() ThemeConfigurationSheetTileLayoutGutterOutput
	ToThemeConfigurationSheetTileLayoutGutterOutputWithContext(context.Context) ThemeConfigurationSheetTileLayoutGutterOutput
}

type ThemeConfigurationSheetTileLayoutGutterArgs struct {
	// This Boolean value controls whether to display a gutter space between sheet tiles.
	Show pulumi.BoolPtrInput `pulumi:"show"`
}

func (ThemeConfigurationSheetTileLayoutGutterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationSheetTileLayoutGutter)(nil)).Elem()
}

func (i ThemeConfigurationSheetTileLayoutGutterArgs) ToThemeConfigurationSheetTileLayoutGutterOutput() ThemeConfigurationSheetTileLayoutGutterOutput {
	return i.ToThemeConfigurationSheetTileLayoutGutterOutputWithContext(context.Background())
}

func (i ThemeConfigurationSheetTileLayoutGutterArgs) ToThemeConfigurationSheetTileLayoutGutterOutputWithContext(ctx context.Context) ThemeConfigurationSheetTileLayoutGutterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationSheetTileLayoutGutterOutput)
}

func (i ThemeConfigurationSheetTileLayoutGutterArgs) ToThemeConfigurationSheetTileLayoutGutterPtrOutput() ThemeConfigurationSheetTileLayoutGutterPtrOutput {
	return i.ToThemeConfigurationSheetTileLayoutGutterPtrOutputWithContext(context.Background())
}

func (i ThemeConfigurationSheetTileLayoutGutterArgs) ToThemeConfigurationSheetTileLayoutGutterPtrOutputWithContext(ctx context.Context) ThemeConfigurationSheetTileLayoutGutterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationSheetTileLayoutGutterOutput).ToThemeConfigurationSheetTileLayoutGutterPtrOutputWithContext(ctx)
}

// ThemeConfigurationSheetTileLayoutGutterPtrInput is an input type that accepts ThemeConfigurationSheetTileLayoutGutterArgs, ThemeConfigurationSheetTileLayoutGutterPtr and ThemeConfigurationSheetTileLayoutGutterPtrOutput values.
// You can construct a concrete instance of `ThemeConfigurationSheetTileLayoutGutterPtrInput` via:
//
//	        ThemeConfigurationSheetTileLayoutGutterArgs{...}
//
//	or:
//
//	        nil
type ThemeConfigurationSheetTileLayoutGutterPtrInput interface {
	pulumi.Input

	ToThemeConfigurationSheetTileLayoutGutterPtrOutput() ThemeConfigurationSheetTileLayoutGutterPtrOutput
	ToThemeConfigurationSheetTileLayoutGutterPtrOutputWithContext(context.Context) ThemeConfigurationSheetTileLayoutGutterPtrOutput
}

type themeConfigurationSheetTileLayoutGutterPtrType ThemeConfigurationSheetTileLayoutGutterArgs

func ThemeConfigurationSheetTileLayoutGutterPtr(v *ThemeConfigurationSheetTileLayoutGutterArgs) ThemeConfigurationSheetTileLayoutGutterPtrInput {
	return (*themeConfigurationSheetTileLayoutGutterPtrType)(v)
}

func (*themeConfigurationSheetTileLayoutGutterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeConfigurationSheetTileLayoutGutter)(nil)).Elem()
}

func (i *themeConfigurationSheetTileLayoutGutterPtrType) ToThemeConfigurationSheetTileLayoutGutterPtrOutput() ThemeConfigurationSheetTileLayoutGutterPtrOutput {
	return i.ToThemeConfigurationSheetTileLayoutGutterPtrOutputWithContext(context.Background())
}

func (i *themeConfigurationSheetTileLayoutGutterPtrType) ToThemeConfigurationSheetTileLayoutGutterPtrOutputWithContext(ctx context.Context) ThemeConfigurationSheetTileLayoutGutterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationSheetTileLayoutGutterPtrOutput)
}

type ThemeConfigurationSheetTileLayoutGutterOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationSheetTileLayoutGutterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationSheetTileLayoutGutter)(nil)).Elem()
}

func (o ThemeConfigurationSheetTileLayoutGutterOutput) ToThemeConfigurationSheetTileLayoutGutterOutput() ThemeConfigurationSheetTileLayoutGutterOutput {
	return o
}

func (o ThemeConfigurationSheetTileLayoutGutterOutput) ToThemeConfigurationSheetTileLayoutGutterOutputWithContext(ctx context.Context) ThemeConfigurationSheetTileLayoutGutterOutput {
	return o
}

func (o ThemeConfigurationSheetTileLayoutGutterOutput) ToThemeConfigurationSheetTileLayoutGutterPtrOutput() ThemeConfigurationSheetTileLayoutGutterPtrOutput {
	return o.ToThemeConfigurationSheetTileLayoutGutterPtrOutputWithContext(context.Background())
}

func (o ThemeConfigurationSheetTileLayoutGutterOutput) ToThemeConfigurationSheetTileLayoutGutterPtrOutputWithContext(ctx context.Context) ThemeConfigurationSheetTileLayoutGutterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeConfigurationSheetTileLayoutGutter) *ThemeConfigurationSheetTileLayoutGutter {
		return &v
	}).(ThemeConfigurationSheetTileLayoutGutterPtrOutput)
}

// This Boolean value controls whether to display a gutter space between sheet tiles.
func (o ThemeConfigurationSheetTileLayoutGutterOutput) Show() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThemeConfigurationSheetTileLayoutGutter) *bool { return v.Show }).(pulumi.BoolPtrOutput)
}

type ThemeConfigurationSheetTileLayoutGutterPtrOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationSheetTileLayoutGutterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeConfigurationSheetTileLayoutGutter)(nil)).Elem()
}

func (o ThemeConfigurationSheetTileLayoutGutterPtrOutput) ToThemeConfigurationSheetTileLayoutGutterPtrOutput() ThemeConfigurationSheetTileLayoutGutterPtrOutput {
	return o
}

func (o ThemeConfigurationSheetTileLayoutGutterPtrOutput) ToThemeConfigurationSheetTileLayoutGutterPtrOutputWithContext(ctx context.Context) ThemeConfigurationSheetTileLayoutGutterPtrOutput {
	return o
}

func (o ThemeConfigurationSheetTileLayoutGutterPtrOutput) Elem() ThemeConfigurationSheetTileLayoutGutterOutput {
	return o.ApplyT(func(v *ThemeConfigurationSheetTileLayoutGutter) ThemeConfigurationSheetTileLayoutGutter {
		if v != nil {
			return *v
		}
		var ret ThemeConfigurationSheetTileLayoutGutter
		return ret
	}).(ThemeConfigurationSheetTileLayoutGutterOutput)
}

// This Boolean value controls whether to display a gutter space between sheet tiles.
func (o ThemeConfigurationSheetTileLayoutGutterPtrOutput) Show() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThemeConfigurationSheetTileLayoutGutter) *bool {
		if v == nil {
			return nil
		}
		return v.Show
	}).(pulumi.BoolPtrOutput)
}

type ThemeConfigurationSheetTileLayoutMargin struct {
	// This Boolean value controls whether to display sheet margins.
	Show *bool `pulumi:"show"`
}

// ThemeConfigurationSheetTileLayoutMarginInput is an input type that accepts ThemeConfigurationSheetTileLayoutMarginArgs and ThemeConfigurationSheetTileLayoutMarginOutput values.
// You can construct a concrete instance of `ThemeConfigurationSheetTileLayoutMarginInput` via:
//
//	ThemeConfigurationSheetTileLayoutMarginArgs{...}
type ThemeConfigurationSheetTileLayoutMarginInput interface {
	pulumi.Input

	ToThemeConfigurationSheetTileLayoutMarginOutput() ThemeConfigurationSheetTileLayoutMarginOutput
	ToThemeConfigurationSheetTileLayoutMarginOutputWithContext(context.Context) ThemeConfigurationSheetTileLayoutMarginOutput
}

type ThemeConfigurationSheetTileLayoutMarginArgs struct {
	// This Boolean value controls whether to display sheet margins.
	Show pulumi.BoolPtrInput `pulumi:"show"`
}

func (ThemeConfigurationSheetTileLayoutMarginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationSheetTileLayoutMargin)(nil)).Elem()
}

func (i ThemeConfigurationSheetTileLayoutMarginArgs) ToThemeConfigurationSheetTileLayoutMarginOutput() ThemeConfigurationSheetTileLayoutMarginOutput {
	return i.ToThemeConfigurationSheetTileLayoutMarginOutputWithContext(context.Background())
}

func (i ThemeConfigurationSheetTileLayoutMarginArgs) ToThemeConfigurationSheetTileLayoutMarginOutputWithContext(ctx context.Context) ThemeConfigurationSheetTileLayoutMarginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationSheetTileLayoutMarginOutput)
}

func (i ThemeConfigurationSheetTileLayoutMarginArgs) ToThemeConfigurationSheetTileLayoutMarginPtrOutput() ThemeConfigurationSheetTileLayoutMarginPtrOutput {
	return i.ToThemeConfigurationSheetTileLayoutMarginPtrOutputWithContext(context.Background())
}

func (i ThemeConfigurationSheetTileLayoutMarginArgs) ToThemeConfigurationSheetTileLayoutMarginPtrOutputWithContext(ctx context.Context) ThemeConfigurationSheetTileLayoutMarginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationSheetTileLayoutMarginOutput).ToThemeConfigurationSheetTileLayoutMarginPtrOutputWithContext(ctx)
}

// ThemeConfigurationSheetTileLayoutMarginPtrInput is an input type that accepts ThemeConfigurationSheetTileLayoutMarginArgs, ThemeConfigurationSheetTileLayoutMarginPtr and ThemeConfigurationSheetTileLayoutMarginPtrOutput values.
// You can construct a concrete instance of `ThemeConfigurationSheetTileLayoutMarginPtrInput` via:
//
//	        ThemeConfigurationSheetTileLayoutMarginArgs{...}
//
//	or:
//
//	        nil
type ThemeConfigurationSheetTileLayoutMarginPtrInput interface {
	pulumi.Input

	ToThemeConfigurationSheetTileLayoutMarginPtrOutput() ThemeConfigurationSheetTileLayoutMarginPtrOutput
	ToThemeConfigurationSheetTileLayoutMarginPtrOutputWithContext(context.Context) ThemeConfigurationSheetTileLayoutMarginPtrOutput
}

type themeConfigurationSheetTileLayoutMarginPtrType ThemeConfigurationSheetTileLayoutMarginArgs

func ThemeConfigurationSheetTileLayoutMarginPtr(v *ThemeConfigurationSheetTileLayoutMarginArgs) ThemeConfigurationSheetTileLayoutMarginPtrInput {
	return (*themeConfigurationSheetTileLayoutMarginPtrType)(v)
}

func (*themeConfigurationSheetTileLayoutMarginPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeConfigurationSheetTileLayoutMargin)(nil)).Elem()
}

func (i *themeConfigurationSheetTileLayoutMarginPtrType) ToThemeConfigurationSheetTileLayoutMarginPtrOutput() ThemeConfigurationSheetTileLayoutMarginPtrOutput {
	return i.ToThemeConfigurationSheetTileLayoutMarginPtrOutputWithContext(context.Background())
}

func (i *themeConfigurationSheetTileLayoutMarginPtrType) ToThemeConfigurationSheetTileLayoutMarginPtrOutputWithContext(ctx context.Context) ThemeConfigurationSheetTileLayoutMarginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationSheetTileLayoutMarginPtrOutput)
}

type ThemeConfigurationSheetTileLayoutMarginOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationSheetTileLayoutMarginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationSheetTileLayoutMargin)(nil)).Elem()
}

func (o ThemeConfigurationSheetTileLayoutMarginOutput) ToThemeConfigurationSheetTileLayoutMarginOutput() ThemeConfigurationSheetTileLayoutMarginOutput {
	return o
}

func (o ThemeConfigurationSheetTileLayoutMarginOutput) ToThemeConfigurationSheetTileLayoutMarginOutputWithContext(ctx context.Context) ThemeConfigurationSheetTileLayoutMarginOutput {
	return o
}

func (o ThemeConfigurationSheetTileLayoutMarginOutput) ToThemeConfigurationSheetTileLayoutMarginPtrOutput() ThemeConfigurationSheetTileLayoutMarginPtrOutput {
	return o.ToThemeConfigurationSheetTileLayoutMarginPtrOutputWithContext(context.Background())
}

func (o ThemeConfigurationSheetTileLayoutMarginOutput) ToThemeConfigurationSheetTileLayoutMarginPtrOutputWithContext(ctx context.Context) ThemeConfigurationSheetTileLayoutMarginPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeConfigurationSheetTileLayoutMargin) *ThemeConfigurationSheetTileLayoutMargin {
		return &v
	}).(ThemeConfigurationSheetTileLayoutMarginPtrOutput)
}

// This Boolean value controls whether to display sheet margins.
func (o ThemeConfigurationSheetTileLayoutMarginOutput) Show() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThemeConfigurationSheetTileLayoutMargin) *bool { return v.Show }).(pulumi.BoolPtrOutput)
}

type ThemeConfigurationSheetTileLayoutMarginPtrOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationSheetTileLayoutMarginPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeConfigurationSheetTileLayoutMargin)(nil)).Elem()
}

func (o ThemeConfigurationSheetTileLayoutMarginPtrOutput) ToThemeConfigurationSheetTileLayoutMarginPtrOutput() ThemeConfigurationSheetTileLayoutMarginPtrOutput {
	return o
}

func (o ThemeConfigurationSheetTileLayoutMarginPtrOutput) ToThemeConfigurationSheetTileLayoutMarginPtrOutputWithContext(ctx context.Context) ThemeConfigurationSheetTileLayoutMarginPtrOutput {
	return o
}

func (o ThemeConfigurationSheetTileLayoutMarginPtrOutput) Elem() ThemeConfigurationSheetTileLayoutMarginOutput {
	return o.ApplyT(func(v *ThemeConfigurationSheetTileLayoutMargin) ThemeConfigurationSheetTileLayoutMargin {
		if v != nil {
			return *v
		}
		var ret ThemeConfigurationSheetTileLayoutMargin
		return ret
	}).(ThemeConfigurationSheetTileLayoutMarginOutput)
}

// This Boolean value controls whether to display sheet margins.
func (o ThemeConfigurationSheetTileLayoutMarginPtrOutput) Show() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThemeConfigurationSheetTileLayoutMargin) *bool {
		if v == nil {
			return nil
		}
		return v.Show
	}).(pulumi.BoolPtrOutput)
}

type ThemeConfigurationTypography struct {
	// Determines the list of font families. Maximum number of 5 items. See font_families.
	FontFamilies []ThemeConfigurationTypographyFontFamily `pulumi:"fontFamilies"`
}

// ThemeConfigurationTypographyInput is an input type that accepts ThemeConfigurationTypographyArgs and ThemeConfigurationTypographyOutput values.
// You can construct a concrete instance of `ThemeConfigurationTypographyInput` via:
//
//	ThemeConfigurationTypographyArgs{...}
type ThemeConfigurationTypographyInput interface {
	pulumi.Input

	ToThemeConfigurationTypographyOutput() ThemeConfigurationTypographyOutput
	ToThemeConfigurationTypographyOutputWithContext(context.Context) ThemeConfigurationTypographyOutput
}

type ThemeConfigurationTypographyArgs struct {
	// Determines the list of font families. Maximum number of 5 items. See font_families.
	FontFamilies ThemeConfigurationTypographyFontFamilyArrayInput `pulumi:"fontFamilies"`
}

func (ThemeConfigurationTypographyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationTypography)(nil)).Elem()
}

func (i ThemeConfigurationTypographyArgs) ToThemeConfigurationTypographyOutput() ThemeConfigurationTypographyOutput {
	return i.ToThemeConfigurationTypographyOutputWithContext(context.Background())
}

func (i ThemeConfigurationTypographyArgs) ToThemeConfigurationTypographyOutputWithContext(ctx context.Context) ThemeConfigurationTypographyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationTypographyOutput)
}

func (i ThemeConfigurationTypographyArgs) ToThemeConfigurationTypographyPtrOutput() ThemeConfigurationTypographyPtrOutput {
	return i.ToThemeConfigurationTypographyPtrOutputWithContext(context.Background())
}

func (i ThemeConfigurationTypographyArgs) ToThemeConfigurationTypographyPtrOutputWithContext(ctx context.Context) ThemeConfigurationTypographyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationTypographyOutput).ToThemeConfigurationTypographyPtrOutputWithContext(ctx)
}

// ThemeConfigurationTypographyPtrInput is an input type that accepts ThemeConfigurationTypographyArgs, ThemeConfigurationTypographyPtr and ThemeConfigurationTypographyPtrOutput values.
// You can construct a concrete instance of `ThemeConfigurationTypographyPtrInput` via:
//
//	        ThemeConfigurationTypographyArgs{...}
//
//	or:
//
//	        nil
type ThemeConfigurationTypographyPtrInput interface {
	pulumi.Input

	ToThemeConfigurationTypographyPtrOutput() ThemeConfigurationTypographyPtrOutput
	ToThemeConfigurationTypographyPtrOutputWithContext(context.Context) ThemeConfigurationTypographyPtrOutput
}

type themeConfigurationTypographyPtrType ThemeConfigurationTypographyArgs

func ThemeConfigurationTypographyPtr(v *ThemeConfigurationTypographyArgs) ThemeConfigurationTypographyPtrInput {
	return (*themeConfigurationTypographyPtrType)(v)
}

func (*themeConfigurationTypographyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeConfigurationTypography)(nil)).Elem()
}

func (i *themeConfigurationTypographyPtrType) ToThemeConfigurationTypographyPtrOutput() ThemeConfigurationTypographyPtrOutput {
	return i.ToThemeConfigurationTypographyPtrOutputWithContext(context.Background())
}

func (i *themeConfigurationTypographyPtrType) ToThemeConfigurationTypographyPtrOutputWithContext(ctx context.Context) ThemeConfigurationTypographyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationTypographyPtrOutput)
}

type ThemeConfigurationTypographyOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationTypographyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationTypography)(nil)).Elem()
}

func (o ThemeConfigurationTypographyOutput) ToThemeConfigurationTypographyOutput() ThemeConfigurationTypographyOutput {
	return o
}

func (o ThemeConfigurationTypographyOutput) ToThemeConfigurationTypographyOutputWithContext(ctx context.Context) ThemeConfigurationTypographyOutput {
	return o
}

func (o ThemeConfigurationTypographyOutput) ToThemeConfigurationTypographyPtrOutput() ThemeConfigurationTypographyPtrOutput {
	return o.ToThemeConfigurationTypographyPtrOutputWithContext(context.Background())
}

func (o ThemeConfigurationTypographyOutput) ToThemeConfigurationTypographyPtrOutputWithContext(ctx context.Context) ThemeConfigurationTypographyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeConfigurationTypography) *ThemeConfigurationTypography {
		return &v
	}).(ThemeConfigurationTypographyPtrOutput)
}

// Determines the list of font families. Maximum number of 5 items. See font_families.
func (o ThemeConfigurationTypographyOutput) FontFamilies() ThemeConfigurationTypographyFontFamilyArrayOutput {
	return o.ApplyT(func(v ThemeConfigurationTypography) []ThemeConfigurationTypographyFontFamily { return v.FontFamilies }).(ThemeConfigurationTypographyFontFamilyArrayOutput)
}

type ThemeConfigurationTypographyPtrOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationTypographyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeConfigurationTypography)(nil)).Elem()
}

func (o ThemeConfigurationTypographyPtrOutput) ToThemeConfigurationTypographyPtrOutput() ThemeConfigurationTypographyPtrOutput {
	return o
}

func (o ThemeConfigurationTypographyPtrOutput) ToThemeConfigurationTypographyPtrOutputWithContext(ctx context.Context) ThemeConfigurationTypographyPtrOutput {
	return o
}

func (o ThemeConfigurationTypographyPtrOutput) Elem() ThemeConfigurationTypographyOutput {
	return o.ApplyT(func(v *ThemeConfigurationTypography) ThemeConfigurationTypography {
		if v != nil {
			return *v
		}
		var ret ThemeConfigurationTypography
		return ret
	}).(ThemeConfigurationTypographyOutput)
}

// Determines the list of font families. Maximum number of 5 items. See font_families.
func (o ThemeConfigurationTypographyPtrOutput) FontFamilies() ThemeConfigurationTypographyFontFamilyArrayOutput {
	return o.ApplyT(func(v *ThemeConfigurationTypography) []ThemeConfigurationTypographyFontFamily {
		if v == nil {
			return nil
		}
		return v.FontFamilies
	}).(ThemeConfigurationTypographyFontFamilyArrayOutput)
}

type ThemeConfigurationTypographyFontFamily struct {
	// Font family name.
	FontFamily *string `pulumi:"fontFamily"`
}

// ThemeConfigurationTypographyFontFamilyInput is an input type that accepts ThemeConfigurationTypographyFontFamilyArgs and ThemeConfigurationTypographyFontFamilyOutput values.
// You can construct a concrete instance of `ThemeConfigurationTypographyFontFamilyInput` via:
//
//	ThemeConfigurationTypographyFontFamilyArgs{...}
type ThemeConfigurationTypographyFontFamilyInput interface {
	pulumi.Input

	ToThemeConfigurationTypographyFontFamilyOutput() ThemeConfigurationTypographyFontFamilyOutput
	ToThemeConfigurationTypographyFontFamilyOutputWithContext(context.Context) ThemeConfigurationTypographyFontFamilyOutput
}

type ThemeConfigurationTypographyFontFamilyArgs struct {
	// Font family name.
	FontFamily pulumi.StringPtrInput `pulumi:"fontFamily"`
}

func (ThemeConfigurationTypographyFontFamilyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationTypographyFontFamily)(nil)).Elem()
}

func (i ThemeConfigurationTypographyFontFamilyArgs) ToThemeConfigurationTypographyFontFamilyOutput() ThemeConfigurationTypographyFontFamilyOutput {
	return i.ToThemeConfigurationTypographyFontFamilyOutputWithContext(context.Background())
}

func (i ThemeConfigurationTypographyFontFamilyArgs) ToThemeConfigurationTypographyFontFamilyOutputWithContext(ctx context.Context) ThemeConfigurationTypographyFontFamilyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationTypographyFontFamilyOutput)
}

// ThemeConfigurationTypographyFontFamilyArrayInput is an input type that accepts ThemeConfigurationTypographyFontFamilyArray and ThemeConfigurationTypographyFontFamilyArrayOutput values.
// You can construct a concrete instance of `ThemeConfigurationTypographyFontFamilyArrayInput` via:
//
//	ThemeConfigurationTypographyFontFamilyArray{ ThemeConfigurationTypographyFontFamilyArgs{...} }
type ThemeConfigurationTypographyFontFamilyArrayInput interface {
	pulumi.Input

	ToThemeConfigurationTypographyFontFamilyArrayOutput() ThemeConfigurationTypographyFontFamilyArrayOutput
	ToThemeConfigurationTypographyFontFamilyArrayOutputWithContext(context.Context) ThemeConfigurationTypographyFontFamilyArrayOutput
}

type ThemeConfigurationTypographyFontFamilyArray []ThemeConfigurationTypographyFontFamilyInput

func (ThemeConfigurationTypographyFontFamilyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThemeConfigurationTypographyFontFamily)(nil)).Elem()
}

func (i ThemeConfigurationTypographyFontFamilyArray) ToThemeConfigurationTypographyFontFamilyArrayOutput() ThemeConfigurationTypographyFontFamilyArrayOutput {
	return i.ToThemeConfigurationTypographyFontFamilyArrayOutputWithContext(context.Background())
}

func (i ThemeConfigurationTypographyFontFamilyArray) ToThemeConfigurationTypographyFontFamilyArrayOutputWithContext(ctx context.Context) ThemeConfigurationTypographyFontFamilyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationTypographyFontFamilyArrayOutput)
}

type ThemeConfigurationTypographyFontFamilyOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationTypographyFontFamilyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationTypographyFontFamily)(nil)).Elem()
}

func (o ThemeConfigurationTypographyFontFamilyOutput) ToThemeConfigurationTypographyFontFamilyOutput() ThemeConfigurationTypographyFontFamilyOutput {
	return o
}

func (o ThemeConfigurationTypographyFontFamilyOutput) ToThemeConfigurationTypographyFontFamilyOutputWithContext(ctx context.Context) ThemeConfigurationTypographyFontFamilyOutput {
	return o
}

// Font family name.
func (o ThemeConfigurationTypographyFontFamilyOutput) FontFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeConfigurationTypographyFontFamily) *string { return v.FontFamily }).(pulumi.StringPtrOutput)
}

type ThemeConfigurationTypographyFontFamilyArrayOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationTypographyFontFamilyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThemeConfigurationTypographyFontFamily)(nil)).Elem()
}

func (o ThemeConfigurationTypographyFontFamilyArrayOutput) ToThemeConfigurationTypographyFontFamilyArrayOutput() ThemeConfigurationTypographyFontFamilyArrayOutput {
	return o
}

func (o ThemeConfigurationTypographyFontFamilyArrayOutput) ToThemeConfigurationTypographyFontFamilyArrayOutputWithContext(ctx context.Context) ThemeConfigurationTypographyFontFamilyArrayOutput {
	return o
}

func (o ThemeConfigurationTypographyFontFamilyArrayOutput) Index(i pulumi.IntInput) ThemeConfigurationTypographyFontFamilyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThemeConfigurationTypographyFontFamily {
		return vs[0].([]ThemeConfigurationTypographyFontFamily)[vs[1].(int)]
	}).(ThemeConfigurationTypographyFontFamilyOutput)
}

type ThemeConfigurationUiColorPalette struct {
	// Color (hexadecimal) that applies to selected states and buttons.
	Accent *string `pulumi:"accent"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the accent color.
	AccentForeground *string `pulumi:"accentForeground"`
	// Color (hexadecimal) that applies to error messages.
	Danger *string `pulumi:"danger"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the error color.
	DangerForeground *string `pulumi:"dangerForeground"`
	// Color (hexadecimal) that applies to the names of fields that are identified as dimensions.
	Dimension *string `pulumi:"dimension"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the dimension color.
	DimensionForeground *string `pulumi:"dimensionForeground"`
	// Color (hexadecimal) that applies to the names of fields that are identified as measures.
	Measure *string `pulumi:"measure"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the measure color.
	MeasureForeground *string `pulumi:"measureForeground"`
	// Color (hexadecimal) that applies to visuals and other high emphasis UI.
	PrimaryBackground *string `pulumi:"primaryBackground"`
	// Color (hexadecimal) of text and other foreground elements that appear over the primary background regions, such as grid lines, borders, table banding, icons, and so on.
	PrimaryForeground *string `pulumi:"primaryForeground"`
	// Color (hexadecimal) that applies to the sheet background and sheet controls.
	SecondaryBackground *string `pulumi:"secondaryBackground"`
	// Color (hexadecimal) that applies to any sheet title, sheet control text, or UI that appears over the secondary background.
	SecondaryForeground *string `pulumi:"secondaryForeground"`
	// Color (hexadecimal) that applies to success messages, for example the check mark for a successful download.
	Success *string `pulumi:"success"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the success color.
	SuccessForeground *string `pulumi:"successForeground"`
	// Color (hexadecimal) that applies to warning and informational messages.
	Warning *string `pulumi:"warning"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the warning color.
	WarningForeground *string `pulumi:"warningForeground"`
}

// ThemeConfigurationUiColorPaletteInput is an input type that accepts ThemeConfigurationUiColorPaletteArgs and ThemeConfigurationUiColorPaletteOutput values.
// You can construct a concrete instance of `ThemeConfigurationUiColorPaletteInput` via:
//
//	ThemeConfigurationUiColorPaletteArgs{...}
type ThemeConfigurationUiColorPaletteInput interface {
	pulumi.Input

	ToThemeConfigurationUiColorPaletteOutput() ThemeConfigurationUiColorPaletteOutput
	ToThemeConfigurationUiColorPaletteOutputWithContext(context.Context) ThemeConfigurationUiColorPaletteOutput
}

type ThemeConfigurationUiColorPaletteArgs struct {
	// Color (hexadecimal) that applies to selected states and buttons.
	Accent pulumi.StringPtrInput `pulumi:"accent"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the accent color.
	AccentForeground pulumi.StringPtrInput `pulumi:"accentForeground"`
	// Color (hexadecimal) that applies to error messages.
	Danger pulumi.StringPtrInput `pulumi:"danger"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the error color.
	DangerForeground pulumi.StringPtrInput `pulumi:"dangerForeground"`
	// Color (hexadecimal) that applies to the names of fields that are identified as dimensions.
	Dimension pulumi.StringPtrInput `pulumi:"dimension"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the dimension color.
	DimensionForeground pulumi.StringPtrInput `pulumi:"dimensionForeground"`
	// Color (hexadecimal) that applies to the names of fields that are identified as measures.
	Measure pulumi.StringPtrInput `pulumi:"measure"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the measure color.
	MeasureForeground pulumi.StringPtrInput `pulumi:"measureForeground"`
	// Color (hexadecimal) that applies to visuals and other high emphasis UI.
	PrimaryBackground pulumi.StringPtrInput `pulumi:"primaryBackground"`
	// Color (hexadecimal) of text and other foreground elements that appear over the primary background regions, such as grid lines, borders, table banding, icons, and so on.
	PrimaryForeground pulumi.StringPtrInput `pulumi:"primaryForeground"`
	// Color (hexadecimal) that applies to the sheet background and sheet controls.
	SecondaryBackground pulumi.StringPtrInput `pulumi:"secondaryBackground"`
	// Color (hexadecimal) that applies to any sheet title, sheet control text, or UI that appears over the secondary background.
	SecondaryForeground pulumi.StringPtrInput `pulumi:"secondaryForeground"`
	// Color (hexadecimal) that applies to success messages, for example the check mark for a successful download.
	Success pulumi.StringPtrInput `pulumi:"success"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the success color.
	SuccessForeground pulumi.StringPtrInput `pulumi:"successForeground"`
	// Color (hexadecimal) that applies to warning and informational messages.
	Warning pulumi.StringPtrInput `pulumi:"warning"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the warning color.
	WarningForeground pulumi.StringPtrInput `pulumi:"warningForeground"`
}

func (ThemeConfigurationUiColorPaletteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationUiColorPalette)(nil)).Elem()
}

func (i ThemeConfigurationUiColorPaletteArgs) ToThemeConfigurationUiColorPaletteOutput() ThemeConfigurationUiColorPaletteOutput {
	return i.ToThemeConfigurationUiColorPaletteOutputWithContext(context.Background())
}

func (i ThemeConfigurationUiColorPaletteArgs) ToThemeConfigurationUiColorPaletteOutputWithContext(ctx context.Context) ThemeConfigurationUiColorPaletteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationUiColorPaletteOutput)
}

func (i ThemeConfigurationUiColorPaletteArgs) ToThemeConfigurationUiColorPalettePtrOutput() ThemeConfigurationUiColorPalettePtrOutput {
	return i.ToThemeConfigurationUiColorPalettePtrOutputWithContext(context.Background())
}

func (i ThemeConfigurationUiColorPaletteArgs) ToThemeConfigurationUiColorPalettePtrOutputWithContext(ctx context.Context) ThemeConfigurationUiColorPalettePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationUiColorPaletteOutput).ToThemeConfigurationUiColorPalettePtrOutputWithContext(ctx)
}

// ThemeConfigurationUiColorPalettePtrInput is an input type that accepts ThemeConfigurationUiColorPaletteArgs, ThemeConfigurationUiColorPalettePtr and ThemeConfigurationUiColorPalettePtrOutput values.
// You can construct a concrete instance of `ThemeConfigurationUiColorPalettePtrInput` via:
//
//	        ThemeConfigurationUiColorPaletteArgs{...}
//
//	or:
//
//	        nil
type ThemeConfigurationUiColorPalettePtrInput interface {
	pulumi.Input

	ToThemeConfigurationUiColorPalettePtrOutput() ThemeConfigurationUiColorPalettePtrOutput
	ToThemeConfigurationUiColorPalettePtrOutputWithContext(context.Context) ThemeConfigurationUiColorPalettePtrOutput
}

type themeConfigurationUiColorPalettePtrType ThemeConfigurationUiColorPaletteArgs

func ThemeConfigurationUiColorPalettePtr(v *ThemeConfigurationUiColorPaletteArgs) ThemeConfigurationUiColorPalettePtrInput {
	return (*themeConfigurationUiColorPalettePtrType)(v)
}

func (*themeConfigurationUiColorPalettePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeConfigurationUiColorPalette)(nil)).Elem()
}

func (i *themeConfigurationUiColorPalettePtrType) ToThemeConfigurationUiColorPalettePtrOutput() ThemeConfigurationUiColorPalettePtrOutput {
	return i.ToThemeConfigurationUiColorPalettePtrOutputWithContext(context.Background())
}

func (i *themeConfigurationUiColorPalettePtrType) ToThemeConfigurationUiColorPalettePtrOutputWithContext(ctx context.Context) ThemeConfigurationUiColorPalettePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationUiColorPalettePtrOutput)
}

type ThemeConfigurationUiColorPaletteOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationUiColorPaletteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfigurationUiColorPalette)(nil)).Elem()
}

func (o ThemeConfigurationUiColorPaletteOutput) ToThemeConfigurationUiColorPaletteOutput() ThemeConfigurationUiColorPaletteOutput {
	return o
}

func (o ThemeConfigurationUiColorPaletteOutput) ToThemeConfigurationUiColorPaletteOutputWithContext(ctx context.Context) ThemeConfigurationUiColorPaletteOutput {
	return o
}

func (o ThemeConfigurationUiColorPaletteOutput) ToThemeConfigurationUiColorPalettePtrOutput() ThemeConfigurationUiColorPalettePtrOutput {
	return o.ToThemeConfigurationUiColorPalettePtrOutputWithContext(context.Background())
}

func (o ThemeConfigurationUiColorPaletteOutput) ToThemeConfigurationUiColorPalettePtrOutputWithContext(ctx context.Context) ThemeConfigurationUiColorPalettePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeConfigurationUiColorPalette) *ThemeConfigurationUiColorPalette {
		return &v
	}).(ThemeConfigurationUiColorPalettePtrOutput)
}

// Color (hexadecimal) that applies to selected states and buttons.
func (o ThemeConfigurationUiColorPaletteOutput) Accent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeConfigurationUiColorPalette) *string { return v.Accent }).(pulumi.StringPtrOutput)
}

// Color (hexadecimal) that applies to any text or other elements that appear over the accent color.
func (o ThemeConfigurationUiColorPaletteOutput) AccentForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeConfigurationUiColorPalette) *string { return v.AccentForeground }).(pulumi.StringPtrOutput)
}

// Color (hexadecimal) that applies to error messages.
func (o ThemeConfigurationUiColorPaletteOutput) Danger() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeConfigurationUiColorPalette) *string { return v.Danger }).(pulumi.StringPtrOutput)
}

// Color (hexadecimal) that applies to any text or other elements that appear over the error color.
func (o ThemeConfigurationUiColorPaletteOutput) DangerForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeConfigurationUiColorPalette) *string { return v.DangerForeground }).(pulumi.StringPtrOutput)
}

// Color (hexadecimal) that applies to the names of fields that are identified as dimensions.
func (o ThemeConfigurationUiColorPaletteOutput) Dimension() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeConfigurationUiColorPalette) *string { return v.Dimension }).(pulumi.StringPtrOutput)
}

// Color (hexadecimal) that applies to any text or other elements that appear over the dimension color.
func (o ThemeConfigurationUiColorPaletteOutput) DimensionForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeConfigurationUiColorPalette) *string { return v.DimensionForeground }).(pulumi.StringPtrOutput)
}

// Color (hexadecimal) that applies to the names of fields that are identified as measures.
func (o ThemeConfigurationUiColorPaletteOutput) Measure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeConfigurationUiColorPalette) *string { return v.Measure }).(pulumi.StringPtrOutput)
}

// Color (hexadecimal) that applies to any text or other elements that appear over the measure color.
func (o ThemeConfigurationUiColorPaletteOutput) MeasureForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeConfigurationUiColorPalette) *string { return v.MeasureForeground }).(pulumi.StringPtrOutput)
}

// Color (hexadecimal) that applies to visuals and other high emphasis UI.
func (o ThemeConfigurationUiColorPaletteOutput) PrimaryBackground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeConfigurationUiColorPalette) *string { return v.PrimaryBackground }).(pulumi.StringPtrOutput)
}

// Color (hexadecimal) of text and other foreground elements that appear over the primary background regions, such as grid lines, borders, table banding, icons, and so on.
func (o ThemeConfigurationUiColorPaletteOutput) PrimaryForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeConfigurationUiColorPalette) *string { return v.PrimaryForeground }).(pulumi.StringPtrOutput)
}

// Color (hexadecimal) that applies to the sheet background and sheet controls.
func (o ThemeConfigurationUiColorPaletteOutput) SecondaryBackground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeConfigurationUiColorPalette) *string { return v.SecondaryBackground }).(pulumi.StringPtrOutput)
}

// Color (hexadecimal) that applies to any sheet title, sheet control text, or UI that appears over the secondary background.
func (o ThemeConfigurationUiColorPaletteOutput) SecondaryForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeConfigurationUiColorPalette) *string { return v.SecondaryForeground }).(pulumi.StringPtrOutput)
}

// Color (hexadecimal) that applies to success messages, for example the check mark for a successful download.
func (o ThemeConfigurationUiColorPaletteOutput) Success() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeConfigurationUiColorPalette) *string { return v.Success }).(pulumi.StringPtrOutput)
}

// Color (hexadecimal) that applies to any text or other elements that appear over the success color.
func (o ThemeConfigurationUiColorPaletteOutput) SuccessForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeConfigurationUiColorPalette) *string { return v.SuccessForeground }).(pulumi.StringPtrOutput)
}

// Color (hexadecimal) that applies to warning and informational messages.
func (o ThemeConfigurationUiColorPaletteOutput) Warning() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeConfigurationUiColorPalette) *string { return v.Warning }).(pulumi.StringPtrOutput)
}

// Color (hexadecimal) that applies to any text or other elements that appear over the warning color.
func (o ThemeConfigurationUiColorPaletteOutput) WarningForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeConfigurationUiColorPalette) *string { return v.WarningForeground }).(pulumi.StringPtrOutput)
}

type ThemeConfigurationUiColorPalettePtrOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationUiColorPalettePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeConfigurationUiColorPalette)(nil)).Elem()
}

func (o ThemeConfigurationUiColorPalettePtrOutput) ToThemeConfigurationUiColorPalettePtrOutput() ThemeConfigurationUiColorPalettePtrOutput {
	return o
}

func (o ThemeConfigurationUiColorPalettePtrOutput) ToThemeConfigurationUiColorPalettePtrOutputWithContext(ctx context.Context) ThemeConfigurationUiColorPalettePtrOutput {
	return o
}

func (o ThemeConfigurationUiColorPalettePtrOutput) Elem() ThemeConfigurationUiColorPaletteOutput {
	return o.ApplyT(func(v *ThemeConfigurationUiColorPalette) ThemeConfigurationUiColorPalette {
		if v != nil {
			return *v
		}
		var ret ThemeConfigurationUiColorPalette
		return ret
	}).(ThemeConfigurationUiColorPaletteOutput)
}

// Color (hexadecimal) that applies to selected states and buttons.
func (o ThemeConfigurationUiColorPalettePtrOutput) Accent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeConfigurationUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.Accent
	}).(pulumi.StringPtrOutput)
}

// Color (hexadecimal) that applies to any text or other elements that appear over the accent color.
func (o ThemeConfigurationUiColorPalettePtrOutput) AccentForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeConfigurationUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.AccentForeground
	}).(pulumi.StringPtrOutput)
}

// Color (hexadecimal) that applies to error messages.
func (o ThemeConfigurationUiColorPalettePtrOutput) Danger() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeConfigurationUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.Danger
	}).(pulumi.StringPtrOutput)
}

// Color (hexadecimal) that applies to any text or other elements that appear over the error color.
func (o ThemeConfigurationUiColorPalettePtrOutput) DangerForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeConfigurationUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.DangerForeground
	}).(pulumi.StringPtrOutput)
}

// Color (hexadecimal) that applies to the names of fields that are identified as dimensions.
func (o ThemeConfigurationUiColorPalettePtrOutput) Dimension() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeConfigurationUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.Dimension
	}).(pulumi.StringPtrOutput)
}

// Color (hexadecimal) that applies to any text or other elements that appear over the dimension color.
func (o ThemeConfigurationUiColorPalettePtrOutput) DimensionForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeConfigurationUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.DimensionForeground
	}).(pulumi.StringPtrOutput)
}

// Color (hexadecimal) that applies to the names of fields that are identified as measures.
func (o ThemeConfigurationUiColorPalettePtrOutput) Measure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeConfigurationUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.Measure
	}).(pulumi.StringPtrOutput)
}

// Color (hexadecimal) that applies to any text or other elements that appear over the measure color.
func (o ThemeConfigurationUiColorPalettePtrOutput) MeasureForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeConfigurationUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.MeasureForeground
	}).(pulumi.StringPtrOutput)
}

// Color (hexadecimal) that applies to visuals and other high emphasis UI.
func (o ThemeConfigurationUiColorPalettePtrOutput) PrimaryBackground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeConfigurationUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryBackground
	}).(pulumi.StringPtrOutput)
}

// Color (hexadecimal) of text and other foreground elements that appear over the primary background regions, such as grid lines, borders, table banding, icons, and so on.
func (o ThemeConfigurationUiColorPalettePtrOutput) PrimaryForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeConfigurationUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryForeground
	}).(pulumi.StringPtrOutput)
}

// Color (hexadecimal) that applies to the sheet background and sheet controls.
func (o ThemeConfigurationUiColorPalettePtrOutput) SecondaryBackground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeConfigurationUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.SecondaryBackground
	}).(pulumi.StringPtrOutput)
}

// Color (hexadecimal) that applies to any sheet title, sheet control text, or UI that appears over the secondary background.
func (o ThemeConfigurationUiColorPalettePtrOutput) SecondaryForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeConfigurationUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.SecondaryForeground
	}).(pulumi.StringPtrOutput)
}

// Color (hexadecimal) that applies to success messages, for example the check mark for a successful download.
func (o ThemeConfigurationUiColorPalettePtrOutput) Success() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeConfigurationUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.Success
	}).(pulumi.StringPtrOutput)
}

// Color (hexadecimal) that applies to any text or other elements that appear over the success color.
func (o ThemeConfigurationUiColorPalettePtrOutput) SuccessForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeConfigurationUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.SuccessForeground
	}).(pulumi.StringPtrOutput)
}

// Color (hexadecimal) that applies to warning and informational messages.
func (o ThemeConfigurationUiColorPalettePtrOutput) Warning() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeConfigurationUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.Warning
	}).(pulumi.StringPtrOutput)
}

// Color (hexadecimal) that applies to any text or other elements that appear over the warning color.
func (o ThemeConfigurationUiColorPalettePtrOutput) WarningForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeConfigurationUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.WarningForeground
	}).(pulumi.StringPtrOutput)
}

type ThemePermission struct {
	// List of IAM actions to grant or revoke permissions on.
	Actions []string `pulumi:"actions"`
	// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
	Principal string `pulumi:"principal"`
}

// ThemePermissionInput is an input type that accepts ThemePermissionArgs and ThemePermissionOutput values.
// You can construct a concrete instance of `ThemePermissionInput` via:
//
//	ThemePermissionArgs{...}
type ThemePermissionInput interface {
	pulumi.Input

	ToThemePermissionOutput() ThemePermissionOutput
	ToThemePermissionOutputWithContext(context.Context) ThemePermissionOutput
}

type ThemePermissionArgs struct {
	// List of IAM actions to grant or revoke permissions on.
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
	Principal pulumi.StringInput `pulumi:"principal"`
}

func (ThemePermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemePermission)(nil)).Elem()
}

func (i ThemePermissionArgs) ToThemePermissionOutput() ThemePermissionOutput {
	return i.ToThemePermissionOutputWithContext(context.Background())
}

func (i ThemePermissionArgs) ToThemePermissionOutputWithContext(ctx context.Context) ThemePermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemePermissionOutput)
}

// ThemePermissionArrayInput is an input type that accepts ThemePermissionArray and ThemePermissionArrayOutput values.
// You can construct a concrete instance of `ThemePermissionArrayInput` via:
//
//	ThemePermissionArray{ ThemePermissionArgs{...} }
type ThemePermissionArrayInput interface {
	pulumi.Input

	ToThemePermissionArrayOutput() ThemePermissionArrayOutput
	ToThemePermissionArrayOutputWithContext(context.Context) ThemePermissionArrayOutput
}

type ThemePermissionArray []ThemePermissionInput

func (ThemePermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThemePermission)(nil)).Elem()
}

func (i ThemePermissionArray) ToThemePermissionArrayOutput() ThemePermissionArrayOutput {
	return i.ToThemePermissionArrayOutputWithContext(context.Background())
}

func (i ThemePermissionArray) ToThemePermissionArrayOutputWithContext(ctx context.Context) ThemePermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemePermissionArrayOutput)
}

type ThemePermissionOutput struct{ *pulumi.OutputState }

func (ThemePermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemePermission)(nil)).Elem()
}

func (o ThemePermissionOutput) ToThemePermissionOutput() ThemePermissionOutput {
	return o
}

func (o ThemePermissionOutput) ToThemePermissionOutputWithContext(ctx context.Context) ThemePermissionOutput {
	return o
}

// List of IAM actions to grant or revoke permissions on.
func (o ThemePermissionOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThemePermission) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
func (o ThemePermissionOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v ThemePermission) string { return v.Principal }).(pulumi.StringOutput)
}

type ThemePermissionArrayOutput struct{ *pulumi.OutputState }

func (ThemePermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThemePermission)(nil)).Elem()
}

func (o ThemePermissionArrayOutput) ToThemePermissionArrayOutput() ThemePermissionArrayOutput {
	return o
}

func (o ThemePermissionArrayOutput) ToThemePermissionArrayOutputWithContext(ctx context.Context) ThemePermissionArrayOutput {
	return o
}

func (o ThemePermissionArrayOutput) Index(i pulumi.IntInput) ThemePermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThemePermission {
		return vs[0].([]ThemePermission)[vs[1].(int)]
	}).(ThemePermissionOutput)
}

type VpcConnectionTimeouts struct {
	Create *string `pulumi:"create"`
	Delete *string `pulumi:"delete"`
	Update *string `pulumi:"update"`
}

// VpcConnectionTimeoutsInput is an input type that accepts VpcConnectionTimeoutsArgs and VpcConnectionTimeoutsOutput values.
// You can construct a concrete instance of `VpcConnectionTimeoutsInput` via:
//
//	VpcConnectionTimeoutsArgs{...}
type VpcConnectionTimeoutsInput interface {
	pulumi.Input

	ToVpcConnectionTimeoutsOutput() VpcConnectionTimeoutsOutput
	ToVpcConnectionTimeoutsOutputWithContext(context.Context) VpcConnectionTimeoutsOutput
}

type VpcConnectionTimeoutsArgs struct {
	Create pulumi.StringPtrInput `pulumi:"create"`
	Delete pulumi.StringPtrInput `pulumi:"delete"`
	Update pulumi.StringPtrInput `pulumi:"update"`
}

func (VpcConnectionTimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcConnectionTimeouts)(nil)).Elem()
}

func (i VpcConnectionTimeoutsArgs) ToVpcConnectionTimeoutsOutput() VpcConnectionTimeoutsOutput {
	return i.ToVpcConnectionTimeoutsOutputWithContext(context.Background())
}

func (i VpcConnectionTimeoutsArgs) ToVpcConnectionTimeoutsOutputWithContext(ctx context.Context) VpcConnectionTimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcConnectionTimeoutsOutput)
}

func (i VpcConnectionTimeoutsArgs) ToVpcConnectionTimeoutsPtrOutput() VpcConnectionTimeoutsPtrOutput {
	return i.ToVpcConnectionTimeoutsPtrOutputWithContext(context.Background())
}

func (i VpcConnectionTimeoutsArgs) ToVpcConnectionTimeoutsPtrOutputWithContext(ctx context.Context) VpcConnectionTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcConnectionTimeoutsOutput).ToVpcConnectionTimeoutsPtrOutputWithContext(ctx)
}

// VpcConnectionTimeoutsPtrInput is an input type that accepts VpcConnectionTimeoutsArgs, VpcConnectionTimeoutsPtr and VpcConnectionTimeoutsPtrOutput values.
// You can construct a concrete instance of `VpcConnectionTimeoutsPtrInput` via:
//
//	        VpcConnectionTimeoutsArgs{...}
//
//	or:
//
//	        nil
type VpcConnectionTimeoutsPtrInput interface {
	pulumi.Input

	ToVpcConnectionTimeoutsPtrOutput() VpcConnectionTimeoutsPtrOutput
	ToVpcConnectionTimeoutsPtrOutputWithContext(context.Context) VpcConnectionTimeoutsPtrOutput
}

type vpcConnectionTimeoutsPtrType VpcConnectionTimeoutsArgs

func VpcConnectionTimeoutsPtr(v *VpcConnectionTimeoutsArgs) VpcConnectionTimeoutsPtrInput {
	return (*vpcConnectionTimeoutsPtrType)(v)
}

func (*vpcConnectionTimeoutsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcConnectionTimeouts)(nil)).Elem()
}

func (i *vpcConnectionTimeoutsPtrType) ToVpcConnectionTimeoutsPtrOutput() VpcConnectionTimeoutsPtrOutput {
	return i.ToVpcConnectionTimeoutsPtrOutputWithContext(context.Background())
}

func (i *vpcConnectionTimeoutsPtrType) ToVpcConnectionTimeoutsPtrOutputWithContext(ctx context.Context) VpcConnectionTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcConnectionTimeoutsPtrOutput)
}

type VpcConnectionTimeoutsOutput struct{ *pulumi.OutputState }

func (VpcConnectionTimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcConnectionTimeouts)(nil)).Elem()
}

func (o VpcConnectionTimeoutsOutput) ToVpcConnectionTimeoutsOutput() VpcConnectionTimeoutsOutput {
	return o
}

func (o VpcConnectionTimeoutsOutput) ToVpcConnectionTimeoutsOutputWithContext(ctx context.Context) VpcConnectionTimeoutsOutput {
	return o
}

func (o VpcConnectionTimeoutsOutput) ToVpcConnectionTimeoutsPtrOutput() VpcConnectionTimeoutsPtrOutput {
	return o.ToVpcConnectionTimeoutsPtrOutputWithContext(context.Background())
}

func (o VpcConnectionTimeoutsOutput) ToVpcConnectionTimeoutsPtrOutputWithContext(ctx context.Context) VpcConnectionTimeoutsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VpcConnectionTimeouts) *VpcConnectionTimeouts {
		return &v
	}).(VpcConnectionTimeoutsPtrOutput)
}

func (o VpcConnectionTimeoutsOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcConnectionTimeouts) *string { return v.Create }).(pulumi.StringPtrOutput)
}

func (o VpcConnectionTimeoutsOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcConnectionTimeouts) *string { return v.Delete }).(pulumi.StringPtrOutput)
}

func (o VpcConnectionTimeoutsOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcConnectionTimeouts) *string { return v.Update }).(pulumi.StringPtrOutput)
}

type VpcConnectionTimeoutsPtrOutput struct{ *pulumi.OutputState }

func (VpcConnectionTimeoutsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcConnectionTimeouts)(nil)).Elem()
}

func (o VpcConnectionTimeoutsPtrOutput) ToVpcConnectionTimeoutsPtrOutput() VpcConnectionTimeoutsPtrOutput {
	return o
}

func (o VpcConnectionTimeoutsPtrOutput) ToVpcConnectionTimeoutsPtrOutputWithContext(ctx context.Context) VpcConnectionTimeoutsPtrOutput {
	return o
}

func (o VpcConnectionTimeoutsPtrOutput) Elem() VpcConnectionTimeoutsOutput {
	return o.ApplyT(func(v *VpcConnectionTimeouts) VpcConnectionTimeouts {
		if v != nil {
			return *v
		}
		var ret VpcConnectionTimeouts
		return ret
	}).(VpcConnectionTimeoutsOutput)
}

func (o VpcConnectionTimeoutsPtrOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcConnectionTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Create
	}).(pulumi.StringPtrOutput)
}

func (o VpcConnectionTimeoutsPtrOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcConnectionTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Delete
	}).(pulumi.StringPtrOutput)
}

func (o VpcConnectionTimeoutsPtrOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcConnectionTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Update
	}).(pulumi.StringPtrOutput)
}

type GetDataSetColumnGroup struct {
	GeoSpatialColumnGroups []GetDataSetColumnGroupGeoSpatialColumnGroup `pulumi:"geoSpatialColumnGroups"`
}

// GetDataSetColumnGroupInput is an input type that accepts GetDataSetColumnGroupArgs and GetDataSetColumnGroupOutput values.
// You can construct a concrete instance of `GetDataSetColumnGroupInput` via:
//
//	GetDataSetColumnGroupArgs{...}
type GetDataSetColumnGroupInput interface {
	pulumi.Input

	ToGetDataSetColumnGroupOutput() GetDataSetColumnGroupOutput
	ToGetDataSetColumnGroupOutputWithContext(context.Context) GetDataSetColumnGroupOutput
}

type GetDataSetColumnGroupArgs struct {
	GeoSpatialColumnGroups GetDataSetColumnGroupGeoSpatialColumnGroupArrayInput `pulumi:"geoSpatialColumnGroups"`
}

func (GetDataSetColumnGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetColumnGroup)(nil)).Elem()
}

func (i GetDataSetColumnGroupArgs) ToGetDataSetColumnGroupOutput() GetDataSetColumnGroupOutput {
	return i.ToGetDataSetColumnGroupOutputWithContext(context.Background())
}

func (i GetDataSetColumnGroupArgs) ToGetDataSetColumnGroupOutputWithContext(ctx context.Context) GetDataSetColumnGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetColumnGroupOutput)
}

// GetDataSetColumnGroupArrayInput is an input type that accepts GetDataSetColumnGroupArray and GetDataSetColumnGroupArrayOutput values.
// You can construct a concrete instance of `GetDataSetColumnGroupArrayInput` via:
//
//	GetDataSetColumnGroupArray{ GetDataSetColumnGroupArgs{...} }
type GetDataSetColumnGroupArrayInput interface {
	pulumi.Input

	ToGetDataSetColumnGroupArrayOutput() GetDataSetColumnGroupArrayOutput
	ToGetDataSetColumnGroupArrayOutputWithContext(context.Context) GetDataSetColumnGroupArrayOutput
}

type GetDataSetColumnGroupArray []GetDataSetColumnGroupInput

func (GetDataSetColumnGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetColumnGroup)(nil)).Elem()
}

func (i GetDataSetColumnGroupArray) ToGetDataSetColumnGroupArrayOutput() GetDataSetColumnGroupArrayOutput {
	return i.ToGetDataSetColumnGroupArrayOutputWithContext(context.Background())
}

func (i GetDataSetColumnGroupArray) ToGetDataSetColumnGroupArrayOutputWithContext(ctx context.Context) GetDataSetColumnGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetColumnGroupArrayOutput)
}

type GetDataSetColumnGroupOutput struct{ *pulumi.OutputState }

func (GetDataSetColumnGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetColumnGroup)(nil)).Elem()
}

func (o GetDataSetColumnGroupOutput) ToGetDataSetColumnGroupOutput() GetDataSetColumnGroupOutput {
	return o
}

func (o GetDataSetColumnGroupOutput) ToGetDataSetColumnGroupOutputWithContext(ctx context.Context) GetDataSetColumnGroupOutput {
	return o
}

func (o GetDataSetColumnGroupOutput) GeoSpatialColumnGroups() GetDataSetColumnGroupGeoSpatialColumnGroupArrayOutput {
	return o.ApplyT(func(v GetDataSetColumnGroup) []GetDataSetColumnGroupGeoSpatialColumnGroup {
		return v.GeoSpatialColumnGroups
	}).(GetDataSetColumnGroupGeoSpatialColumnGroupArrayOutput)
}

type GetDataSetColumnGroupArrayOutput struct{ *pulumi.OutputState }

func (GetDataSetColumnGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetColumnGroup)(nil)).Elem()
}

func (o GetDataSetColumnGroupArrayOutput) ToGetDataSetColumnGroupArrayOutput() GetDataSetColumnGroupArrayOutput {
	return o
}

func (o GetDataSetColumnGroupArrayOutput) ToGetDataSetColumnGroupArrayOutputWithContext(ctx context.Context) GetDataSetColumnGroupArrayOutput {
	return o
}

func (o GetDataSetColumnGroupArrayOutput) Index(i pulumi.IntInput) GetDataSetColumnGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataSetColumnGroup {
		return vs[0].([]GetDataSetColumnGroup)[vs[1].(int)]
	}).(GetDataSetColumnGroupOutput)
}

type GetDataSetColumnGroupGeoSpatialColumnGroup struct {
	Columns     []string `pulumi:"columns"`
	CountryCode string   `pulumi:"countryCode"`
	Name        string   `pulumi:"name"`
}

// GetDataSetColumnGroupGeoSpatialColumnGroupInput is an input type that accepts GetDataSetColumnGroupGeoSpatialColumnGroupArgs and GetDataSetColumnGroupGeoSpatialColumnGroupOutput values.
// You can construct a concrete instance of `GetDataSetColumnGroupGeoSpatialColumnGroupInput` via:
//
//	GetDataSetColumnGroupGeoSpatialColumnGroupArgs{...}
type GetDataSetColumnGroupGeoSpatialColumnGroupInput interface {
	pulumi.Input

	ToGetDataSetColumnGroupGeoSpatialColumnGroupOutput() GetDataSetColumnGroupGeoSpatialColumnGroupOutput
	ToGetDataSetColumnGroupGeoSpatialColumnGroupOutputWithContext(context.Context) GetDataSetColumnGroupGeoSpatialColumnGroupOutput
}

type GetDataSetColumnGroupGeoSpatialColumnGroupArgs struct {
	Columns     pulumi.StringArrayInput `pulumi:"columns"`
	CountryCode pulumi.StringInput      `pulumi:"countryCode"`
	Name        pulumi.StringInput      `pulumi:"name"`
}

func (GetDataSetColumnGroupGeoSpatialColumnGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetColumnGroupGeoSpatialColumnGroup)(nil)).Elem()
}

func (i GetDataSetColumnGroupGeoSpatialColumnGroupArgs) ToGetDataSetColumnGroupGeoSpatialColumnGroupOutput() GetDataSetColumnGroupGeoSpatialColumnGroupOutput {
	return i.ToGetDataSetColumnGroupGeoSpatialColumnGroupOutputWithContext(context.Background())
}

func (i GetDataSetColumnGroupGeoSpatialColumnGroupArgs) ToGetDataSetColumnGroupGeoSpatialColumnGroupOutputWithContext(ctx context.Context) GetDataSetColumnGroupGeoSpatialColumnGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetColumnGroupGeoSpatialColumnGroupOutput)
}

// GetDataSetColumnGroupGeoSpatialColumnGroupArrayInput is an input type that accepts GetDataSetColumnGroupGeoSpatialColumnGroupArray and GetDataSetColumnGroupGeoSpatialColumnGroupArrayOutput values.
// You can construct a concrete instance of `GetDataSetColumnGroupGeoSpatialColumnGroupArrayInput` via:
//
//	GetDataSetColumnGroupGeoSpatialColumnGroupArray{ GetDataSetColumnGroupGeoSpatialColumnGroupArgs{...} }
type GetDataSetColumnGroupGeoSpatialColumnGroupArrayInput interface {
	pulumi.Input

	ToGetDataSetColumnGroupGeoSpatialColumnGroupArrayOutput() GetDataSetColumnGroupGeoSpatialColumnGroupArrayOutput
	ToGetDataSetColumnGroupGeoSpatialColumnGroupArrayOutputWithContext(context.Context) GetDataSetColumnGroupGeoSpatialColumnGroupArrayOutput
}

type GetDataSetColumnGroupGeoSpatialColumnGroupArray []GetDataSetColumnGroupGeoSpatialColumnGroupInput

func (GetDataSetColumnGroupGeoSpatialColumnGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetColumnGroupGeoSpatialColumnGroup)(nil)).Elem()
}

func (i GetDataSetColumnGroupGeoSpatialColumnGroupArray) ToGetDataSetColumnGroupGeoSpatialColumnGroupArrayOutput() GetDataSetColumnGroupGeoSpatialColumnGroupArrayOutput {
	return i.ToGetDataSetColumnGroupGeoSpatialColumnGroupArrayOutputWithContext(context.Background())
}

func (i GetDataSetColumnGroupGeoSpatialColumnGroupArray) ToGetDataSetColumnGroupGeoSpatialColumnGroupArrayOutputWithContext(ctx context.Context) GetDataSetColumnGroupGeoSpatialColumnGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetColumnGroupGeoSpatialColumnGroupArrayOutput)
}

type GetDataSetColumnGroupGeoSpatialColumnGroupOutput struct{ *pulumi.OutputState }

func (GetDataSetColumnGroupGeoSpatialColumnGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetColumnGroupGeoSpatialColumnGroup)(nil)).Elem()
}

func (o GetDataSetColumnGroupGeoSpatialColumnGroupOutput) ToGetDataSetColumnGroupGeoSpatialColumnGroupOutput() GetDataSetColumnGroupGeoSpatialColumnGroupOutput {
	return o
}

func (o GetDataSetColumnGroupGeoSpatialColumnGroupOutput) ToGetDataSetColumnGroupGeoSpatialColumnGroupOutputWithContext(ctx context.Context) GetDataSetColumnGroupGeoSpatialColumnGroupOutput {
	return o
}

func (o GetDataSetColumnGroupGeoSpatialColumnGroupOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDataSetColumnGroupGeoSpatialColumnGroup) []string { return v.Columns }).(pulumi.StringArrayOutput)
}

func (o GetDataSetColumnGroupGeoSpatialColumnGroupOutput) CountryCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetColumnGroupGeoSpatialColumnGroup) string { return v.CountryCode }).(pulumi.StringOutput)
}

func (o GetDataSetColumnGroupGeoSpatialColumnGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetColumnGroupGeoSpatialColumnGroup) string { return v.Name }).(pulumi.StringOutput)
}

type GetDataSetColumnGroupGeoSpatialColumnGroupArrayOutput struct{ *pulumi.OutputState }

func (GetDataSetColumnGroupGeoSpatialColumnGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetColumnGroupGeoSpatialColumnGroup)(nil)).Elem()
}

func (o GetDataSetColumnGroupGeoSpatialColumnGroupArrayOutput) ToGetDataSetColumnGroupGeoSpatialColumnGroupArrayOutput() GetDataSetColumnGroupGeoSpatialColumnGroupArrayOutput {
	return o
}

func (o GetDataSetColumnGroupGeoSpatialColumnGroupArrayOutput) ToGetDataSetColumnGroupGeoSpatialColumnGroupArrayOutputWithContext(ctx context.Context) GetDataSetColumnGroupGeoSpatialColumnGroupArrayOutput {
	return o
}

func (o GetDataSetColumnGroupGeoSpatialColumnGroupArrayOutput) Index(i pulumi.IntInput) GetDataSetColumnGroupGeoSpatialColumnGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataSetColumnGroupGeoSpatialColumnGroup {
		return vs[0].([]GetDataSetColumnGroupGeoSpatialColumnGroup)[vs[1].(int)]
	}).(GetDataSetColumnGroupGeoSpatialColumnGroupOutput)
}

type GetDataSetColumnLevelPermissionRule struct {
	ColumnNames []string `pulumi:"columnNames"`
	Principals  []string `pulumi:"principals"`
}

// GetDataSetColumnLevelPermissionRuleInput is an input type that accepts GetDataSetColumnLevelPermissionRuleArgs and GetDataSetColumnLevelPermissionRuleOutput values.
// You can construct a concrete instance of `GetDataSetColumnLevelPermissionRuleInput` via:
//
//	GetDataSetColumnLevelPermissionRuleArgs{...}
type GetDataSetColumnLevelPermissionRuleInput interface {
	pulumi.Input

	ToGetDataSetColumnLevelPermissionRuleOutput() GetDataSetColumnLevelPermissionRuleOutput
	ToGetDataSetColumnLevelPermissionRuleOutputWithContext(context.Context) GetDataSetColumnLevelPermissionRuleOutput
}

type GetDataSetColumnLevelPermissionRuleArgs struct {
	ColumnNames pulumi.StringArrayInput `pulumi:"columnNames"`
	Principals  pulumi.StringArrayInput `pulumi:"principals"`
}

func (GetDataSetColumnLevelPermissionRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetColumnLevelPermissionRule)(nil)).Elem()
}

func (i GetDataSetColumnLevelPermissionRuleArgs) ToGetDataSetColumnLevelPermissionRuleOutput() GetDataSetColumnLevelPermissionRuleOutput {
	return i.ToGetDataSetColumnLevelPermissionRuleOutputWithContext(context.Background())
}

func (i GetDataSetColumnLevelPermissionRuleArgs) ToGetDataSetColumnLevelPermissionRuleOutputWithContext(ctx context.Context) GetDataSetColumnLevelPermissionRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetColumnLevelPermissionRuleOutput)
}

// GetDataSetColumnLevelPermissionRuleArrayInput is an input type that accepts GetDataSetColumnLevelPermissionRuleArray and GetDataSetColumnLevelPermissionRuleArrayOutput values.
// You can construct a concrete instance of `GetDataSetColumnLevelPermissionRuleArrayInput` via:
//
//	GetDataSetColumnLevelPermissionRuleArray{ GetDataSetColumnLevelPermissionRuleArgs{...} }
type GetDataSetColumnLevelPermissionRuleArrayInput interface {
	pulumi.Input

	ToGetDataSetColumnLevelPermissionRuleArrayOutput() GetDataSetColumnLevelPermissionRuleArrayOutput
	ToGetDataSetColumnLevelPermissionRuleArrayOutputWithContext(context.Context) GetDataSetColumnLevelPermissionRuleArrayOutput
}

type GetDataSetColumnLevelPermissionRuleArray []GetDataSetColumnLevelPermissionRuleInput

func (GetDataSetColumnLevelPermissionRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetColumnLevelPermissionRule)(nil)).Elem()
}

func (i GetDataSetColumnLevelPermissionRuleArray) ToGetDataSetColumnLevelPermissionRuleArrayOutput() GetDataSetColumnLevelPermissionRuleArrayOutput {
	return i.ToGetDataSetColumnLevelPermissionRuleArrayOutputWithContext(context.Background())
}

func (i GetDataSetColumnLevelPermissionRuleArray) ToGetDataSetColumnLevelPermissionRuleArrayOutputWithContext(ctx context.Context) GetDataSetColumnLevelPermissionRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetColumnLevelPermissionRuleArrayOutput)
}

type GetDataSetColumnLevelPermissionRuleOutput struct{ *pulumi.OutputState }

func (GetDataSetColumnLevelPermissionRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetColumnLevelPermissionRule)(nil)).Elem()
}

func (o GetDataSetColumnLevelPermissionRuleOutput) ToGetDataSetColumnLevelPermissionRuleOutput() GetDataSetColumnLevelPermissionRuleOutput {
	return o
}

func (o GetDataSetColumnLevelPermissionRuleOutput) ToGetDataSetColumnLevelPermissionRuleOutputWithContext(ctx context.Context) GetDataSetColumnLevelPermissionRuleOutput {
	return o
}

func (o GetDataSetColumnLevelPermissionRuleOutput) ColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDataSetColumnLevelPermissionRule) []string { return v.ColumnNames }).(pulumi.StringArrayOutput)
}

func (o GetDataSetColumnLevelPermissionRuleOutput) Principals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDataSetColumnLevelPermissionRule) []string { return v.Principals }).(pulumi.StringArrayOutput)
}

type GetDataSetColumnLevelPermissionRuleArrayOutput struct{ *pulumi.OutputState }

func (GetDataSetColumnLevelPermissionRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetColumnLevelPermissionRule)(nil)).Elem()
}

func (o GetDataSetColumnLevelPermissionRuleArrayOutput) ToGetDataSetColumnLevelPermissionRuleArrayOutput() GetDataSetColumnLevelPermissionRuleArrayOutput {
	return o
}

func (o GetDataSetColumnLevelPermissionRuleArrayOutput) ToGetDataSetColumnLevelPermissionRuleArrayOutputWithContext(ctx context.Context) GetDataSetColumnLevelPermissionRuleArrayOutput {
	return o
}

func (o GetDataSetColumnLevelPermissionRuleArrayOutput) Index(i pulumi.IntInput) GetDataSetColumnLevelPermissionRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataSetColumnLevelPermissionRule {
		return vs[0].([]GetDataSetColumnLevelPermissionRule)[vs[1].(int)]
	}).(GetDataSetColumnLevelPermissionRuleOutput)
}

type GetDataSetDataSetUsageConfiguration struct {
	DisableUseAsDirectQuerySource bool `pulumi:"disableUseAsDirectQuerySource"`
	DisableUseAsImportedSource    bool `pulumi:"disableUseAsImportedSource"`
}

// GetDataSetDataSetUsageConfigurationInput is an input type that accepts GetDataSetDataSetUsageConfigurationArgs and GetDataSetDataSetUsageConfigurationOutput values.
// You can construct a concrete instance of `GetDataSetDataSetUsageConfigurationInput` via:
//
//	GetDataSetDataSetUsageConfigurationArgs{...}
type GetDataSetDataSetUsageConfigurationInput interface {
	pulumi.Input

	ToGetDataSetDataSetUsageConfigurationOutput() GetDataSetDataSetUsageConfigurationOutput
	ToGetDataSetDataSetUsageConfigurationOutputWithContext(context.Context) GetDataSetDataSetUsageConfigurationOutput
}

type GetDataSetDataSetUsageConfigurationArgs struct {
	DisableUseAsDirectQuerySource pulumi.BoolInput `pulumi:"disableUseAsDirectQuerySource"`
	DisableUseAsImportedSource    pulumi.BoolInput `pulumi:"disableUseAsImportedSource"`
}

func (GetDataSetDataSetUsageConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetDataSetUsageConfiguration)(nil)).Elem()
}

func (i GetDataSetDataSetUsageConfigurationArgs) ToGetDataSetDataSetUsageConfigurationOutput() GetDataSetDataSetUsageConfigurationOutput {
	return i.ToGetDataSetDataSetUsageConfigurationOutputWithContext(context.Background())
}

func (i GetDataSetDataSetUsageConfigurationArgs) ToGetDataSetDataSetUsageConfigurationOutputWithContext(ctx context.Context) GetDataSetDataSetUsageConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetDataSetUsageConfigurationOutput)
}

// GetDataSetDataSetUsageConfigurationArrayInput is an input type that accepts GetDataSetDataSetUsageConfigurationArray and GetDataSetDataSetUsageConfigurationArrayOutput values.
// You can construct a concrete instance of `GetDataSetDataSetUsageConfigurationArrayInput` via:
//
//	GetDataSetDataSetUsageConfigurationArray{ GetDataSetDataSetUsageConfigurationArgs{...} }
type GetDataSetDataSetUsageConfigurationArrayInput interface {
	pulumi.Input

	ToGetDataSetDataSetUsageConfigurationArrayOutput() GetDataSetDataSetUsageConfigurationArrayOutput
	ToGetDataSetDataSetUsageConfigurationArrayOutputWithContext(context.Context) GetDataSetDataSetUsageConfigurationArrayOutput
}

type GetDataSetDataSetUsageConfigurationArray []GetDataSetDataSetUsageConfigurationInput

func (GetDataSetDataSetUsageConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetDataSetUsageConfiguration)(nil)).Elem()
}

func (i GetDataSetDataSetUsageConfigurationArray) ToGetDataSetDataSetUsageConfigurationArrayOutput() GetDataSetDataSetUsageConfigurationArrayOutput {
	return i.ToGetDataSetDataSetUsageConfigurationArrayOutputWithContext(context.Background())
}

func (i GetDataSetDataSetUsageConfigurationArray) ToGetDataSetDataSetUsageConfigurationArrayOutputWithContext(ctx context.Context) GetDataSetDataSetUsageConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetDataSetUsageConfigurationArrayOutput)
}

type GetDataSetDataSetUsageConfigurationOutput struct{ *pulumi.OutputState }

func (GetDataSetDataSetUsageConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetDataSetUsageConfiguration)(nil)).Elem()
}

func (o GetDataSetDataSetUsageConfigurationOutput) ToGetDataSetDataSetUsageConfigurationOutput() GetDataSetDataSetUsageConfigurationOutput {
	return o
}

func (o GetDataSetDataSetUsageConfigurationOutput) ToGetDataSetDataSetUsageConfigurationOutputWithContext(ctx context.Context) GetDataSetDataSetUsageConfigurationOutput {
	return o
}

func (o GetDataSetDataSetUsageConfigurationOutput) DisableUseAsDirectQuerySource() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDataSetDataSetUsageConfiguration) bool { return v.DisableUseAsDirectQuerySource }).(pulumi.BoolOutput)
}

func (o GetDataSetDataSetUsageConfigurationOutput) DisableUseAsImportedSource() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDataSetDataSetUsageConfiguration) bool { return v.DisableUseAsImportedSource }).(pulumi.BoolOutput)
}

type GetDataSetDataSetUsageConfigurationArrayOutput struct{ *pulumi.OutputState }

func (GetDataSetDataSetUsageConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetDataSetUsageConfiguration)(nil)).Elem()
}

func (o GetDataSetDataSetUsageConfigurationArrayOutput) ToGetDataSetDataSetUsageConfigurationArrayOutput() GetDataSetDataSetUsageConfigurationArrayOutput {
	return o
}

func (o GetDataSetDataSetUsageConfigurationArrayOutput) ToGetDataSetDataSetUsageConfigurationArrayOutputWithContext(ctx context.Context) GetDataSetDataSetUsageConfigurationArrayOutput {
	return o
}

func (o GetDataSetDataSetUsageConfigurationArrayOutput) Index(i pulumi.IntInput) GetDataSetDataSetUsageConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataSetDataSetUsageConfiguration {
		return vs[0].([]GetDataSetDataSetUsageConfiguration)[vs[1].(int)]
	}).(GetDataSetDataSetUsageConfigurationOutput)
}

type GetDataSetFieldFolder struct {
	Columns        []string `pulumi:"columns"`
	Description    string   `pulumi:"description"`
	FieldFoldersId string   `pulumi:"fieldFoldersId"`
}

// GetDataSetFieldFolderInput is an input type that accepts GetDataSetFieldFolderArgs and GetDataSetFieldFolderOutput values.
// You can construct a concrete instance of `GetDataSetFieldFolderInput` via:
//
//	GetDataSetFieldFolderArgs{...}
type GetDataSetFieldFolderInput interface {
	pulumi.Input

	ToGetDataSetFieldFolderOutput() GetDataSetFieldFolderOutput
	ToGetDataSetFieldFolderOutputWithContext(context.Context) GetDataSetFieldFolderOutput
}

type GetDataSetFieldFolderArgs struct {
	Columns        pulumi.StringArrayInput `pulumi:"columns"`
	Description    pulumi.StringInput      `pulumi:"description"`
	FieldFoldersId pulumi.StringInput      `pulumi:"fieldFoldersId"`
}

func (GetDataSetFieldFolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetFieldFolder)(nil)).Elem()
}

func (i GetDataSetFieldFolderArgs) ToGetDataSetFieldFolderOutput() GetDataSetFieldFolderOutput {
	return i.ToGetDataSetFieldFolderOutputWithContext(context.Background())
}

func (i GetDataSetFieldFolderArgs) ToGetDataSetFieldFolderOutputWithContext(ctx context.Context) GetDataSetFieldFolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetFieldFolderOutput)
}

// GetDataSetFieldFolderArrayInput is an input type that accepts GetDataSetFieldFolderArray and GetDataSetFieldFolderArrayOutput values.
// You can construct a concrete instance of `GetDataSetFieldFolderArrayInput` via:
//
//	GetDataSetFieldFolderArray{ GetDataSetFieldFolderArgs{...} }
type GetDataSetFieldFolderArrayInput interface {
	pulumi.Input

	ToGetDataSetFieldFolderArrayOutput() GetDataSetFieldFolderArrayOutput
	ToGetDataSetFieldFolderArrayOutputWithContext(context.Context) GetDataSetFieldFolderArrayOutput
}

type GetDataSetFieldFolderArray []GetDataSetFieldFolderInput

func (GetDataSetFieldFolderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetFieldFolder)(nil)).Elem()
}

func (i GetDataSetFieldFolderArray) ToGetDataSetFieldFolderArrayOutput() GetDataSetFieldFolderArrayOutput {
	return i.ToGetDataSetFieldFolderArrayOutputWithContext(context.Background())
}

func (i GetDataSetFieldFolderArray) ToGetDataSetFieldFolderArrayOutputWithContext(ctx context.Context) GetDataSetFieldFolderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetFieldFolderArrayOutput)
}

type GetDataSetFieldFolderOutput struct{ *pulumi.OutputState }

func (GetDataSetFieldFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetFieldFolder)(nil)).Elem()
}

func (o GetDataSetFieldFolderOutput) ToGetDataSetFieldFolderOutput() GetDataSetFieldFolderOutput {
	return o
}

func (o GetDataSetFieldFolderOutput) ToGetDataSetFieldFolderOutputWithContext(ctx context.Context) GetDataSetFieldFolderOutput {
	return o
}

func (o GetDataSetFieldFolderOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDataSetFieldFolder) []string { return v.Columns }).(pulumi.StringArrayOutput)
}

func (o GetDataSetFieldFolderOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetFieldFolder) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetDataSetFieldFolderOutput) FieldFoldersId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetFieldFolder) string { return v.FieldFoldersId }).(pulumi.StringOutput)
}

type GetDataSetFieldFolderArrayOutput struct{ *pulumi.OutputState }

func (GetDataSetFieldFolderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetFieldFolder)(nil)).Elem()
}

func (o GetDataSetFieldFolderArrayOutput) ToGetDataSetFieldFolderArrayOutput() GetDataSetFieldFolderArrayOutput {
	return o
}

func (o GetDataSetFieldFolderArrayOutput) ToGetDataSetFieldFolderArrayOutputWithContext(ctx context.Context) GetDataSetFieldFolderArrayOutput {
	return o
}

func (o GetDataSetFieldFolderArrayOutput) Index(i pulumi.IntInput) GetDataSetFieldFolderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataSetFieldFolder {
		return vs[0].([]GetDataSetFieldFolder)[vs[1].(int)]
	}).(GetDataSetFieldFolderOutput)
}

type GetDataSetLogicalTableMap struct {
	Alias             string                                   `pulumi:"alias"`
	DataTransforms    []GetDataSetLogicalTableMapDataTransform `pulumi:"dataTransforms"`
	LogicalTableMapId string                                   `pulumi:"logicalTableMapId"`
	Sources           []GetDataSetLogicalTableMapSource        `pulumi:"sources"`
}

// GetDataSetLogicalTableMapInput is an input type that accepts GetDataSetLogicalTableMap and GetDataSetLogicalTableMapOutput values.
// You can construct a concrete instance of `GetDataSetLogicalTableMapInput` via:
//
//	GetDataSetLogicalTableMap{ "key": GetDataSetLogicalTableArgs{...} }
type GetDataSetLogicalTableMapInput interface {
	pulumi.Input

	ToGetDataSetLogicalTableMapOutput() GetDataSetLogicalTableMapOutput
	ToGetDataSetLogicalTableMapOutputWithContext(context.Context) GetDataSetLogicalTableMapOutput
}

type GetDataSetLogicalTableMapArgs struct {
	Alias             pulumi.StringInput                               `pulumi:"alias"`
	DataTransforms    GetDataSetLogicalTableMapDataTransformArrayInput `pulumi:"dataTransforms"`
	LogicalTableMapId pulumi.StringInput                               `pulumi:"logicalTableMapId"`
	Sources           GetDataSetLogicalTableMapSourceArrayInput        `pulumi:"sources"`
}

func (GetDataSetLogicalTableMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMap)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapArgs) ToGetDataSetLogicalTableMapOutput() GetDataSetLogicalTableMapOutput {
	return i.ToGetDataSetLogicalTableMapOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapArgs) ToGetDataSetLogicalTableMapOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapOutput)
}

// GetDataSetLogicalTableMapArrayInput is an input type that accepts GetDataSetLogicalTableMapArray and GetDataSetLogicalTableMapArrayOutput values.
// You can construct a concrete instance of `GetDataSetLogicalTableMapArrayInput` via:
//
//	GetDataSetLogicalTableMapArray{ GetDataSetLogicalTableMapArgs{...} }
type GetDataSetLogicalTableMapArrayInput interface {
	pulumi.Input

	ToGetDataSetLogicalTableMapArrayOutput() GetDataSetLogicalTableMapArrayOutput
	ToGetDataSetLogicalTableMapArrayOutputWithContext(context.Context) GetDataSetLogicalTableMapArrayOutput
}

type GetDataSetLogicalTableMapArray []GetDataSetLogicalTableMapInput

func (GetDataSetLogicalTableMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetLogicalTableMap)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapArray) ToGetDataSetLogicalTableMapArrayOutput() GetDataSetLogicalTableMapArrayOutput {
	return i.ToGetDataSetLogicalTableMapArrayOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapArray) ToGetDataSetLogicalTableMapArrayOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapArrayOutput)
}

type GetDataSetLogicalTableMapOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMap)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapOutput) ToGetDataSetLogicalTableMapOutput() GetDataSetLogicalTableMapOutput {
	return o
}

func (o GetDataSetLogicalTableMapOutput) ToGetDataSetLogicalTableMapOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapOutput {
	return o
}

func (o GetDataSetLogicalTableMapOutput) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMap) string { return v.Alias }).(pulumi.StringOutput)
}

func (o GetDataSetLogicalTableMapOutput) DataTransforms() GetDataSetLogicalTableMapDataTransformArrayOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMap) []GetDataSetLogicalTableMapDataTransform { return v.DataTransforms }).(GetDataSetLogicalTableMapDataTransformArrayOutput)
}

func (o GetDataSetLogicalTableMapOutput) LogicalTableMapId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMap) string { return v.LogicalTableMapId }).(pulumi.StringOutput)
}

func (o GetDataSetLogicalTableMapOutput) Sources() GetDataSetLogicalTableMapSourceArrayOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMap) []GetDataSetLogicalTableMapSource { return v.Sources }).(GetDataSetLogicalTableMapSourceArrayOutput)
}

type GetDataSetLogicalTableMapArrayOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetLogicalTableMap)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapArrayOutput) ToGetDataSetLogicalTableMapArrayOutput() GetDataSetLogicalTableMapArrayOutput {
	return o
}

func (o GetDataSetLogicalTableMapArrayOutput) ToGetDataSetLogicalTableMapArrayOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapArrayOutput {
	return o
}

func (o GetDataSetLogicalTableMapArrayOutput) Index(i pulumi.IntInput) GetDataSetLogicalTableMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataSetLogicalTableMap {
		return vs[0].([]GetDataSetLogicalTableMap)[vs[1].(int)]
	}).(GetDataSetLogicalTableMapOutput)
}

type GetDataSetLogicalTableMapDataTransform struct {
	CastColumnTypeOperations []GetDataSetLogicalTableMapDataTransformCastColumnTypeOperation `pulumi:"castColumnTypeOperations"`
	CreateColumnsOperations  []GetDataSetLogicalTableMapDataTransformCreateColumnsOperation  `pulumi:"createColumnsOperations"`
	FilterOperations         []GetDataSetLogicalTableMapDataTransformFilterOperation         `pulumi:"filterOperations"`
	ProjectOperations        []GetDataSetLogicalTableMapDataTransformProjectOperation        `pulumi:"projectOperations"`
	RenameColumnOperations   []GetDataSetLogicalTableMapDataTransformRenameColumnOperation   `pulumi:"renameColumnOperations"`
	TagColumnOperations      []GetDataSetLogicalTableMapDataTransformTagColumnOperation      `pulumi:"tagColumnOperations"`
	UntagColumnOperations    []GetDataSetLogicalTableMapDataTransformUntagColumnOperation    `pulumi:"untagColumnOperations"`
}

// GetDataSetLogicalTableMapDataTransformInput is an input type that accepts GetDataSetLogicalTableMapDataTransformArgs and GetDataSetLogicalTableMapDataTransformOutput values.
// You can construct a concrete instance of `GetDataSetLogicalTableMapDataTransformInput` via:
//
//	GetDataSetLogicalTableMapDataTransformArgs{...}
type GetDataSetLogicalTableMapDataTransformInput interface {
	pulumi.Input

	ToGetDataSetLogicalTableMapDataTransformOutput() GetDataSetLogicalTableMapDataTransformOutput
	ToGetDataSetLogicalTableMapDataTransformOutputWithContext(context.Context) GetDataSetLogicalTableMapDataTransformOutput
}

type GetDataSetLogicalTableMapDataTransformArgs struct {
	CastColumnTypeOperations GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArrayInput `pulumi:"castColumnTypeOperations"`
	CreateColumnsOperations  GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArrayInput  `pulumi:"createColumnsOperations"`
	FilterOperations         GetDataSetLogicalTableMapDataTransformFilterOperationArrayInput         `pulumi:"filterOperations"`
	ProjectOperations        GetDataSetLogicalTableMapDataTransformProjectOperationArrayInput        `pulumi:"projectOperations"`
	RenameColumnOperations   GetDataSetLogicalTableMapDataTransformRenameColumnOperationArrayInput   `pulumi:"renameColumnOperations"`
	TagColumnOperations      GetDataSetLogicalTableMapDataTransformTagColumnOperationArrayInput      `pulumi:"tagColumnOperations"`
	UntagColumnOperations    GetDataSetLogicalTableMapDataTransformUntagColumnOperationArrayInput    `pulumi:"untagColumnOperations"`
}

func (GetDataSetLogicalTableMapDataTransformArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransform)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapDataTransformArgs) ToGetDataSetLogicalTableMapDataTransformOutput() GetDataSetLogicalTableMapDataTransformOutput {
	return i.ToGetDataSetLogicalTableMapDataTransformOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapDataTransformArgs) ToGetDataSetLogicalTableMapDataTransformOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapDataTransformOutput)
}

// GetDataSetLogicalTableMapDataTransformArrayInput is an input type that accepts GetDataSetLogicalTableMapDataTransformArray and GetDataSetLogicalTableMapDataTransformArrayOutput values.
// You can construct a concrete instance of `GetDataSetLogicalTableMapDataTransformArrayInput` via:
//
//	GetDataSetLogicalTableMapDataTransformArray{ GetDataSetLogicalTableMapDataTransformArgs{...} }
type GetDataSetLogicalTableMapDataTransformArrayInput interface {
	pulumi.Input

	ToGetDataSetLogicalTableMapDataTransformArrayOutput() GetDataSetLogicalTableMapDataTransformArrayOutput
	ToGetDataSetLogicalTableMapDataTransformArrayOutputWithContext(context.Context) GetDataSetLogicalTableMapDataTransformArrayOutput
}

type GetDataSetLogicalTableMapDataTransformArray []GetDataSetLogicalTableMapDataTransformInput

func (GetDataSetLogicalTableMapDataTransformArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetLogicalTableMapDataTransform)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapDataTransformArray) ToGetDataSetLogicalTableMapDataTransformArrayOutput() GetDataSetLogicalTableMapDataTransformArrayOutput {
	return i.ToGetDataSetLogicalTableMapDataTransformArrayOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapDataTransformArray) ToGetDataSetLogicalTableMapDataTransformArrayOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapDataTransformArrayOutput)
}

type GetDataSetLogicalTableMapDataTransformOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapDataTransformOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransform)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapDataTransformOutput) ToGetDataSetLogicalTableMapDataTransformOutput() GetDataSetLogicalTableMapDataTransformOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformOutput) ToGetDataSetLogicalTableMapDataTransformOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformOutput) CastColumnTypeOperations() GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArrayOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMapDataTransform) []GetDataSetLogicalTableMapDataTransformCastColumnTypeOperation {
		return v.CastColumnTypeOperations
	}).(GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArrayOutput)
}

func (o GetDataSetLogicalTableMapDataTransformOutput) CreateColumnsOperations() GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArrayOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMapDataTransform) []GetDataSetLogicalTableMapDataTransformCreateColumnsOperation {
		return v.CreateColumnsOperations
	}).(GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArrayOutput)
}

func (o GetDataSetLogicalTableMapDataTransformOutput) FilterOperations() GetDataSetLogicalTableMapDataTransformFilterOperationArrayOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMapDataTransform) []GetDataSetLogicalTableMapDataTransformFilterOperation {
		return v.FilterOperations
	}).(GetDataSetLogicalTableMapDataTransformFilterOperationArrayOutput)
}

func (o GetDataSetLogicalTableMapDataTransformOutput) ProjectOperations() GetDataSetLogicalTableMapDataTransformProjectOperationArrayOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMapDataTransform) []GetDataSetLogicalTableMapDataTransformProjectOperation {
		return v.ProjectOperations
	}).(GetDataSetLogicalTableMapDataTransformProjectOperationArrayOutput)
}

func (o GetDataSetLogicalTableMapDataTransformOutput) RenameColumnOperations() GetDataSetLogicalTableMapDataTransformRenameColumnOperationArrayOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMapDataTransform) []GetDataSetLogicalTableMapDataTransformRenameColumnOperation {
		return v.RenameColumnOperations
	}).(GetDataSetLogicalTableMapDataTransformRenameColumnOperationArrayOutput)
}

func (o GetDataSetLogicalTableMapDataTransformOutput) TagColumnOperations() GetDataSetLogicalTableMapDataTransformTagColumnOperationArrayOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMapDataTransform) []GetDataSetLogicalTableMapDataTransformTagColumnOperation {
		return v.TagColumnOperations
	}).(GetDataSetLogicalTableMapDataTransformTagColumnOperationArrayOutput)
}

func (o GetDataSetLogicalTableMapDataTransformOutput) UntagColumnOperations() GetDataSetLogicalTableMapDataTransformUntagColumnOperationArrayOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMapDataTransform) []GetDataSetLogicalTableMapDataTransformUntagColumnOperation {
		return v.UntagColumnOperations
	}).(GetDataSetLogicalTableMapDataTransformUntagColumnOperationArrayOutput)
}

type GetDataSetLogicalTableMapDataTransformArrayOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapDataTransformArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetLogicalTableMapDataTransform)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapDataTransformArrayOutput) ToGetDataSetLogicalTableMapDataTransformArrayOutput() GetDataSetLogicalTableMapDataTransformArrayOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformArrayOutput) ToGetDataSetLogicalTableMapDataTransformArrayOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformArrayOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformArrayOutput) Index(i pulumi.IntInput) GetDataSetLogicalTableMapDataTransformOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataSetLogicalTableMapDataTransform {
		return vs[0].([]GetDataSetLogicalTableMapDataTransform)[vs[1].(int)]
	}).(GetDataSetLogicalTableMapDataTransformOutput)
}

type GetDataSetLogicalTableMapDataTransformCastColumnTypeOperation struct {
	ColumnName    string `pulumi:"columnName"`
	Format        string `pulumi:"format"`
	NewColumnType string `pulumi:"newColumnType"`
}

// GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationInput is an input type that accepts GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs and GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput values.
// You can construct a concrete instance of `GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationInput` via:
//
//	GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs{...}
type GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationInput interface {
	pulumi.Input

	ToGetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput() GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput
	ToGetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutputWithContext(context.Context) GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput
}

type GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs struct {
	ColumnName    pulumi.StringInput `pulumi:"columnName"`
	Format        pulumi.StringInput `pulumi:"format"`
	NewColumnType pulumi.StringInput `pulumi:"newColumnType"`
}

func (GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformCastColumnTypeOperation)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs) ToGetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput() GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput {
	return i.ToGetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs) ToGetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput)
}

// GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArrayInput is an input type that accepts GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArray and GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArrayOutput values.
// You can construct a concrete instance of `GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArrayInput` via:
//
//	GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArray{ GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs{...} }
type GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArrayInput interface {
	pulumi.Input

	ToGetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArrayOutput() GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArrayOutput
	ToGetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArrayOutputWithContext(context.Context) GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArrayOutput
}

type GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArray []GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationInput

func (GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetLogicalTableMapDataTransformCastColumnTypeOperation)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArray) ToGetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArrayOutput() GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArrayOutput {
	return i.ToGetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArrayOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArray) ToGetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArrayOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArrayOutput)
}

type GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformCastColumnTypeOperation)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput) ToGetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput() GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput) ToGetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMapDataTransformCastColumnTypeOperation) string { return v.ColumnName }).(pulumi.StringOutput)
}

func (o GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMapDataTransformCastColumnTypeOperation) string { return v.Format }).(pulumi.StringOutput)
}

func (o GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput) NewColumnType() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMapDataTransformCastColumnTypeOperation) string { return v.NewColumnType }).(pulumi.StringOutput)
}

type GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArrayOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetLogicalTableMapDataTransformCastColumnTypeOperation)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArrayOutput) ToGetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArrayOutput() GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArrayOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArrayOutput) ToGetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArrayOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArrayOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArrayOutput) Index(i pulumi.IntInput) GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataSetLogicalTableMapDataTransformCastColumnTypeOperation {
		return vs[0].([]GetDataSetLogicalTableMapDataTransformCastColumnTypeOperation)[vs[1].(int)]
	}).(GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput)
}

type GetDataSetLogicalTableMapDataTransformCreateColumnsOperation struct {
	Columns []GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumn `pulumi:"columns"`
}

// GetDataSetLogicalTableMapDataTransformCreateColumnsOperationInput is an input type that accepts GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArgs and GetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput values.
// You can construct a concrete instance of `GetDataSetLogicalTableMapDataTransformCreateColumnsOperationInput` via:
//
//	GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArgs{...}
type GetDataSetLogicalTableMapDataTransformCreateColumnsOperationInput interface {
	pulumi.Input

	ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput() GetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput
	ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutputWithContext(context.Context) GetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput
}

type GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArgs struct {
	Columns GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayInput `pulumi:"columns"`
}

func (GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformCreateColumnsOperation)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArgs) ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput() GetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput {
	return i.ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArgs) ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput)
}

// GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArrayInput is an input type that accepts GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArray and GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArrayOutput values.
// You can construct a concrete instance of `GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArrayInput` via:
//
//	GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArray{ GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArgs{...} }
type GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArrayInput interface {
	pulumi.Input

	ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationArrayOutput() GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArrayOutput
	ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationArrayOutputWithContext(context.Context) GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArrayOutput
}

type GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArray []GetDataSetLogicalTableMapDataTransformCreateColumnsOperationInput

func (GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetLogicalTableMapDataTransformCreateColumnsOperation)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArray) ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationArrayOutput() GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArrayOutput {
	return i.ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationArrayOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArray) ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationArrayOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArrayOutput)
}

type GetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformCreateColumnsOperation)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput) ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput() GetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput) ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput) Columns() GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMapDataTransformCreateColumnsOperation) []GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumn {
		return v.Columns
	}).(GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput)
}

type GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArrayOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetLogicalTableMapDataTransformCreateColumnsOperation)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArrayOutput) ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationArrayOutput() GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArrayOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArrayOutput) ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationArrayOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArrayOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArrayOutput) Index(i pulumi.IntInput) GetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataSetLogicalTableMapDataTransformCreateColumnsOperation {
		return vs[0].([]GetDataSetLogicalTableMapDataTransformCreateColumnsOperation)[vs[1].(int)]
	}).(GetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput)
}

type GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumn struct {
	ColumnId   string `pulumi:"columnId"`
	ColumnName string `pulumi:"columnName"`
	Expression string `pulumi:"expression"`
}

// GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnInput is an input type that accepts GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs and GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput values.
// You can construct a concrete instance of `GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnInput` via:
//
//	GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs{...}
type GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnInput interface {
	pulumi.Input

	ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput() GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput
	ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutputWithContext(context.Context) GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput
}

type GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs struct {
	ColumnId   pulumi.StringInput `pulumi:"columnId"`
	ColumnName pulumi.StringInput `pulumi:"columnName"`
	Expression pulumi.StringInput `pulumi:"expression"`
}

func (GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumn)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs) ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput() GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput {
	return i.ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs) ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput)
}

// GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayInput is an input type that accepts GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArray and GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput values.
// You can construct a concrete instance of `GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayInput` via:
//
//	GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArray{ GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs{...} }
type GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayInput interface {
	pulumi.Input

	ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput() GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput
	ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutputWithContext(context.Context) GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput
}

type GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArray []GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnInput

func (GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumn)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArray) ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput() GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput {
	return i.ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArray) ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput)
}

type GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumn)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput) ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput() GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput) ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput) ColumnId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumn) string { return v.ColumnId }).(pulumi.StringOutput)
}

func (o GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumn) string { return v.ColumnName }).(pulumi.StringOutput)
}

func (o GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumn) string { return v.Expression }).(pulumi.StringOutput)
}

type GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumn)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput) ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput() GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput) ToGetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput) Index(i pulumi.IntInput) GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumn {
		return vs[0].([]GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumn)[vs[1].(int)]
	}).(GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput)
}

type GetDataSetLogicalTableMapDataTransformFilterOperation struct {
	ConditionExpression string `pulumi:"conditionExpression"`
}

// GetDataSetLogicalTableMapDataTransformFilterOperationInput is an input type that accepts GetDataSetLogicalTableMapDataTransformFilterOperationArgs and GetDataSetLogicalTableMapDataTransformFilterOperationOutput values.
// You can construct a concrete instance of `GetDataSetLogicalTableMapDataTransformFilterOperationInput` via:
//
//	GetDataSetLogicalTableMapDataTransformFilterOperationArgs{...}
type GetDataSetLogicalTableMapDataTransformFilterOperationInput interface {
	pulumi.Input

	ToGetDataSetLogicalTableMapDataTransformFilterOperationOutput() GetDataSetLogicalTableMapDataTransformFilterOperationOutput
	ToGetDataSetLogicalTableMapDataTransformFilterOperationOutputWithContext(context.Context) GetDataSetLogicalTableMapDataTransformFilterOperationOutput
}

type GetDataSetLogicalTableMapDataTransformFilterOperationArgs struct {
	ConditionExpression pulumi.StringInput `pulumi:"conditionExpression"`
}

func (GetDataSetLogicalTableMapDataTransformFilterOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformFilterOperation)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapDataTransformFilterOperationArgs) ToGetDataSetLogicalTableMapDataTransformFilterOperationOutput() GetDataSetLogicalTableMapDataTransformFilterOperationOutput {
	return i.ToGetDataSetLogicalTableMapDataTransformFilterOperationOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapDataTransformFilterOperationArgs) ToGetDataSetLogicalTableMapDataTransformFilterOperationOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformFilterOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapDataTransformFilterOperationOutput)
}

// GetDataSetLogicalTableMapDataTransformFilterOperationArrayInput is an input type that accepts GetDataSetLogicalTableMapDataTransformFilterOperationArray and GetDataSetLogicalTableMapDataTransformFilterOperationArrayOutput values.
// You can construct a concrete instance of `GetDataSetLogicalTableMapDataTransformFilterOperationArrayInput` via:
//
//	GetDataSetLogicalTableMapDataTransformFilterOperationArray{ GetDataSetLogicalTableMapDataTransformFilterOperationArgs{...} }
type GetDataSetLogicalTableMapDataTransformFilterOperationArrayInput interface {
	pulumi.Input

	ToGetDataSetLogicalTableMapDataTransformFilterOperationArrayOutput() GetDataSetLogicalTableMapDataTransformFilterOperationArrayOutput
	ToGetDataSetLogicalTableMapDataTransformFilterOperationArrayOutputWithContext(context.Context) GetDataSetLogicalTableMapDataTransformFilterOperationArrayOutput
}

type GetDataSetLogicalTableMapDataTransformFilterOperationArray []GetDataSetLogicalTableMapDataTransformFilterOperationInput

func (GetDataSetLogicalTableMapDataTransformFilterOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetLogicalTableMapDataTransformFilterOperation)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapDataTransformFilterOperationArray) ToGetDataSetLogicalTableMapDataTransformFilterOperationArrayOutput() GetDataSetLogicalTableMapDataTransformFilterOperationArrayOutput {
	return i.ToGetDataSetLogicalTableMapDataTransformFilterOperationArrayOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapDataTransformFilterOperationArray) ToGetDataSetLogicalTableMapDataTransformFilterOperationArrayOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformFilterOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapDataTransformFilterOperationArrayOutput)
}

type GetDataSetLogicalTableMapDataTransformFilterOperationOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapDataTransformFilterOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformFilterOperation)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapDataTransformFilterOperationOutput) ToGetDataSetLogicalTableMapDataTransformFilterOperationOutput() GetDataSetLogicalTableMapDataTransformFilterOperationOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformFilterOperationOutput) ToGetDataSetLogicalTableMapDataTransformFilterOperationOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformFilterOperationOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformFilterOperationOutput) ConditionExpression() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMapDataTransformFilterOperation) string { return v.ConditionExpression }).(pulumi.StringOutput)
}

type GetDataSetLogicalTableMapDataTransformFilterOperationArrayOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapDataTransformFilterOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetLogicalTableMapDataTransformFilterOperation)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapDataTransformFilterOperationArrayOutput) ToGetDataSetLogicalTableMapDataTransformFilterOperationArrayOutput() GetDataSetLogicalTableMapDataTransformFilterOperationArrayOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformFilterOperationArrayOutput) ToGetDataSetLogicalTableMapDataTransformFilterOperationArrayOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformFilterOperationArrayOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformFilterOperationArrayOutput) Index(i pulumi.IntInput) GetDataSetLogicalTableMapDataTransformFilterOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataSetLogicalTableMapDataTransformFilterOperation {
		return vs[0].([]GetDataSetLogicalTableMapDataTransformFilterOperation)[vs[1].(int)]
	}).(GetDataSetLogicalTableMapDataTransformFilterOperationOutput)
}

type GetDataSetLogicalTableMapDataTransformProjectOperation struct {
	ProjectedColumns []string `pulumi:"projectedColumns"`
}

// GetDataSetLogicalTableMapDataTransformProjectOperationInput is an input type that accepts GetDataSetLogicalTableMapDataTransformProjectOperationArgs and GetDataSetLogicalTableMapDataTransformProjectOperationOutput values.
// You can construct a concrete instance of `GetDataSetLogicalTableMapDataTransformProjectOperationInput` via:
//
//	GetDataSetLogicalTableMapDataTransformProjectOperationArgs{...}
type GetDataSetLogicalTableMapDataTransformProjectOperationInput interface {
	pulumi.Input

	ToGetDataSetLogicalTableMapDataTransformProjectOperationOutput() GetDataSetLogicalTableMapDataTransformProjectOperationOutput
	ToGetDataSetLogicalTableMapDataTransformProjectOperationOutputWithContext(context.Context) GetDataSetLogicalTableMapDataTransformProjectOperationOutput
}

type GetDataSetLogicalTableMapDataTransformProjectOperationArgs struct {
	ProjectedColumns pulumi.StringArrayInput `pulumi:"projectedColumns"`
}

func (GetDataSetLogicalTableMapDataTransformProjectOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformProjectOperation)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapDataTransformProjectOperationArgs) ToGetDataSetLogicalTableMapDataTransformProjectOperationOutput() GetDataSetLogicalTableMapDataTransformProjectOperationOutput {
	return i.ToGetDataSetLogicalTableMapDataTransformProjectOperationOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapDataTransformProjectOperationArgs) ToGetDataSetLogicalTableMapDataTransformProjectOperationOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformProjectOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapDataTransformProjectOperationOutput)
}

// GetDataSetLogicalTableMapDataTransformProjectOperationArrayInput is an input type that accepts GetDataSetLogicalTableMapDataTransformProjectOperationArray and GetDataSetLogicalTableMapDataTransformProjectOperationArrayOutput values.
// You can construct a concrete instance of `GetDataSetLogicalTableMapDataTransformProjectOperationArrayInput` via:
//
//	GetDataSetLogicalTableMapDataTransformProjectOperationArray{ GetDataSetLogicalTableMapDataTransformProjectOperationArgs{...} }
type GetDataSetLogicalTableMapDataTransformProjectOperationArrayInput interface {
	pulumi.Input

	ToGetDataSetLogicalTableMapDataTransformProjectOperationArrayOutput() GetDataSetLogicalTableMapDataTransformProjectOperationArrayOutput
	ToGetDataSetLogicalTableMapDataTransformProjectOperationArrayOutputWithContext(context.Context) GetDataSetLogicalTableMapDataTransformProjectOperationArrayOutput
}

type GetDataSetLogicalTableMapDataTransformProjectOperationArray []GetDataSetLogicalTableMapDataTransformProjectOperationInput

func (GetDataSetLogicalTableMapDataTransformProjectOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetLogicalTableMapDataTransformProjectOperation)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapDataTransformProjectOperationArray) ToGetDataSetLogicalTableMapDataTransformProjectOperationArrayOutput() GetDataSetLogicalTableMapDataTransformProjectOperationArrayOutput {
	return i.ToGetDataSetLogicalTableMapDataTransformProjectOperationArrayOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapDataTransformProjectOperationArray) ToGetDataSetLogicalTableMapDataTransformProjectOperationArrayOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformProjectOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapDataTransformProjectOperationArrayOutput)
}

type GetDataSetLogicalTableMapDataTransformProjectOperationOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapDataTransformProjectOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformProjectOperation)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapDataTransformProjectOperationOutput) ToGetDataSetLogicalTableMapDataTransformProjectOperationOutput() GetDataSetLogicalTableMapDataTransformProjectOperationOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformProjectOperationOutput) ToGetDataSetLogicalTableMapDataTransformProjectOperationOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformProjectOperationOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformProjectOperationOutput) ProjectedColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMapDataTransformProjectOperation) []string { return v.ProjectedColumns }).(pulumi.StringArrayOutput)
}

type GetDataSetLogicalTableMapDataTransformProjectOperationArrayOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapDataTransformProjectOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetLogicalTableMapDataTransformProjectOperation)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapDataTransformProjectOperationArrayOutput) ToGetDataSetLogicalTableMapDataTransformProjectOperationArrayOutput() GetDataSetLogicalTableMapDataTransformProjectOperationArrayOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformProjectOperationArrayOutput) ToGetDataSetLogicalTableMapDataTransformProjectOperationArrayOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformProjectOperationArrayOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformProjectOperationArrayOutput) Index(i pulumi.IntInput) GetDataSetLogicalTableMapDataTransformProjectOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataSetLogicalTableMapDataTransformProjectOperation {
		return vs[0].([]GetDataSetLogicalTableMapDataTransformProjectOperation)[vs[1].(int)]
	}).(GetDataSetLogicalTableMapDataTransformProjectOperationOutput)
}

type GetDataSetLogicalTableMapDataTransformRenameColumnOperation struct {
	ColumnName    string `pulumi:"columnName"`
	NewColumnName string `pulumi:"newColumnName"`
}

// GetDataSetLogicalTableMapDataTransformRenameColumnOperationInput is an input type that accepts GetDataSetLogicalTableMapDataTransformRenameColumnOperationArgs and GetDataSetLogicalTableMapDataTransformRenameColumnOperationOutput values.
// You can construct a concrete instance of `GetDataSetLogicalTableMapDataTransformRenameColumnOperationInput` via:
//
//	GetDataSetLogicalTableMapDataTransformRenameColumnOperationArgs{...}
type GetDataSetLogicalTableMapDataTransformRenameColumnOperationInput interface {
	pulumi.Input

	ToGetDataSetLogicalTableMapDataTransformRenameColumnOperationOutput() GetDataSetLogicalTableMapDataTransformRenameColumnOperationOutput
	ToGetDataSetLogicalTableMapDataTransformRenameColumnOperationOutputWithContext(context.Context) GetDataSetLogicalTableMapDataTransformRenameColumnOperationOutput
}

type GetDataSetLogicalTableMapDataTransformRenameColumnOperationArgs struct {
	ColumnName    pulumi.StringInput `pulumi:"columnName"`
	NewColumnName pulumi.StringInput `pulumi:"newColumnName"`
}

func (GetDataSetLogicalTableMapDataTransformRenameColumnOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformRenameColumnOperation)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapDataTransformRenameColumnOperationArgs) ToGetDataSetLogicalTableMapDataTransformRenameColumnOperationOutput() GetDataSetLogicalTableMapDataTransformRenameColumnOperationOutput {
	return i.ToGetDataSetLogicalTableMapDataTransformRenameColumnOperationOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapDataTransformRenameColumnOperationArgs) ToGetDataSetLogicalTableMapDataTransformRenameColumnOperationOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformRenameColumnOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapDataTransformRenameColumnOperationOutput)
}

// GetDataSetLogicalTableMapDataTransformRenameColumnOperationArrayInput is an input type that accepts GetDataSetLogicalTableMapDataTransformRenameColumnOperationArray and GetDataSetLogicalTableMapDataTransformRenameColumnOperationArrayOutput values.
// You can construct a concrete instance of `GetDataSetLogicalTableMapDataTransformRenameColumnOperationArrayInput` via:
//
//	GetDataSetLogicalTableMapDataTransformRenameColumnOperationArray{ GetDataSetLogicalTableMapDataTransformRenameColumnOperationArgs{...} }
type GetDataSetLogicalTableMapDataTransformRenameColumnOperationArrayInput interface {
	pulumi.Input

	ToGetDataSetLogicalTableMapDataTransformRenameColumnOperationArrayOutput() GetDataSetLogicalTableMapDataTransformRenameColumnOperationArrayOutput
	ToGetDataSetLogicalTableMapDataTransformRenameColumnOperationArrayOutputWithContext(context.Context) GetDataSetLogicalTableMapDataTransformRenameColumnOperationArrayOutput
}

type GetDataSetLogicalTableMapDataTransformRenameColumnOperationArray []GetDataSetLogicalTableMapDataTransformRenameColumnOperationInput

func (GetDataSetLogicalTableMapDataTransformRenameColumnOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetLogicalTableMapDataTransformRenameColumnOperation)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapDataTransformRenameColumnOperationArray) ToGetDataSetLogicalTableMapDataTransformRenameColumnOperationArrayOutput() GetDataSetLogicalTableMapDataTransformRenameColumnOperationArrayOutput {
	return i.ToGetDataSetLogicalTableMapDataTransformRenameColumnOperationArrayOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapDataTransformRenameColumnOperationArray) ToGetDataSetLogicalTableMapDataTransformRenameColumnOperationArrayOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformRenameColumnOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapDataTransformRenameColumnOperationArrayOutput)
}

type GetDataSetLogicalTableMapDataTransformRenameColumnOperationOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapDataTransformRenameColumnOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformRenameColumnOperation)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapDataTransformRenameColumnOperationOutput) ToGetDataSetLogicalTableMapDataTransformRenameColumnOperationOutput() GetDataSetLogicalTableMapDataTransformRenameColumnOperationOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformRenameColumnOperationOutput) ToGetDataSetLogicalTableMapDataTransformRenameColumnOperationOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformRenameColumnOperationOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformRenameColumnOperationOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMapDataTransformRenameColumnOperation) string { return v.ColumnName }).(pulumi.StringOutput)
}

func (o GetDataSetLogicalTableMapDataTransformRenameColumnOperationOutput) NewColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMapDataTransformRenameColumnOperation) string { return v.NewColumnName }).(pulumi.StringOutput)
}

type GetDataSetLogicalTableMapDataTransformRenameColumnOperationArrayOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapDataTransformRenameColumnOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetLogicalTableMapDataTransformRenameColumnOperation)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapDataTransformRenameColumnOperationArrayOutput) ToGetDataSetLogicalTableMapDataTransformRenameColumnOperationArrayOutput() GetDataSetLogicalTableMapDataTransformRenameColumnOperationArrayOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformRenameColumnOperationArrayOutput) ToGetDataSetLogicalTableMapDataTransformRenameColumnOperationArrayOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformRenameColumnOperationArrayOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformRenameColumnOperationArrayOutput) Index(i pulumi.IntInput) GetDataSetLogicalTableMapDataTransformRenameColumnOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataSetLogicalTableMapDataTransformRenameColumnOperation {
		return vs[0].([]GetDataSetLogicalTableMapDataTransformRenameColumnOperation)[vs[1].(int)]
	}).(GetDataSetLogicalTableMapDataTransformRenameColumnOperationOutput)
}

type GetDataSetLogicalTableMapDataTransformTagColumnOperation struct {
	ColumnName string                                                        `pulumi:"columnName"`
	Tags       []GetDataSetLogicalTableMapDataTransformTagColumnOperationTag `pulumi:"tags"`
}

// GetDataSetLogicalTableMapDataTransformTagColumnOperationInput is an input type that accepts GetDataSetLogicalTableMapDataTransformTagColumnOperationArgs and GetDataSetLogicalTableMapDataTransformTagColumnOperationOutput values.
// You can construct a concrete instance of `GetDataSetLogicalTableMapDataTransformTagColumnOperationInput` via:
//
//	GetDataSetLogicalTableMapDataTransformTagColumnOperationArgs{...}
type GetDataSetLogicalTableMapDataTransformTagColumnOperationInput interface {
	pulumi.Input

	ToGetDataSetLogicalTableMapDataTransformTagColumnOperationOutput() GetDataSetLogicalTableMapDataTransformTagColumnOperationOutput
	ToGetDataSetLogicalTableMapDataTransformTagColumnOperationOutputWithContext(context.Context) GetDataSetLogicalTableMapDataTransformTagColumnOperationOutput
}

type GetDataSetLogicalTableMapDataTransformTagColumnOperationArgs struct {
	ColumnName pulumi.StringInput                                                    `pulumi:"columnName"`
	Tags       GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArrayInput `pulumi:"tags"`
}

func (GetDataSetLogicalTableMapDataTransformTagColumnOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformTagColumnOperation)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapDataTransformTagColumnOperationArgs) ToGetDataSetLogicalTableMapDataTransformTagColumnOperationOutput() GetDataSetLogicalTableMapDataTransformTagColumnOperationOutput {
	return i.ToGetDataSetLogicalTableMapDataTransformTagColumnOperationOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapDataTransformTagColumnOperationArgs) ToGetDataSetLogicalTableMapDataTransformTagColumnOperationOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformTagColumnOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapDataTransformTagColumnOperationOutput)
}

// GetDataSetLogicalTableMapDataTransformTagColumnOperationArrayInput is an input type that accepts GetDataSetLogicalTableMapDataTransformTagColumnOperationArray and GetDataSetLogicalTableMapDataTransformTagColumnOperationArrayOutput values.
// You can construct a concrete instance of `GetDataSetLogicalTableMapDataTransformTagColumnOperationArrayInput` via:
//
//	GetDataSetLogicalTableMapDataTransformTagColumnOperationArray{ GetDataSetLogicalTableMapDataTransformTagColumnOperationArgs{...} }
type GetDataSetLogicalTableMapDataTransformTagColumnOperationArrayInput interface {
	pulumi.Input

	ToGetDataSetLogicalTableMapDataTransformTagColumnOperationArrayOutput() GetDataSetLogicalTableMapDataTransformTagColumnOperationArrayOutput
	ToGetDataSetLogicalTableMapDataTransformTagColumnOperationArrayOutputWithContext(context.Context) GetDataSetLogicalTableMapDataTransformTagColumnOperationArrayOutput
}

type GetDataSetLogicalTableMapDataTransformTagColumnOperationArray []GetDataSetLogicalTableMapDataTransformTagColumnOperationInput

func (GetDataSetLogicalTableMapDataTransformTagColumnOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetLogicalTableMapDataTransformTagColumnOperation)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapDataTransformTagColumnOperationArray) ToGetDataSetLogicalTableMapDataTransformTagColumnOperationArrayOutput() GetDataSetLogicalTableMapDataTransformTagColumnOperationArrayOutput {
	return i.ToGetDataSetLogicalTableMapDataTransformTagColumnOperationArrayOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapDataTransformTagColumnOperationArray) ToGetDataSetLogicalTableMapDataTransformTagColumnOperationArrayOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformTagColumnOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapDataTransformTagColumnOperationArrayOutput)
}

type GetDataSetLogicalTableMapDataTransformTagColumnOperationOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapDataTransformTagColumnOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformTagColumnOperation)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapDataTransformTagColumnOperationOutput) ToGetDataSetLogicalTableMapDataTransformTagColumnOperationOutput() GetDataSetLogicalTableMapDataTransformTagColumnOperationOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformTagColumnOperationOutput) ToGetDataSetLogicalTableMapDataTransformTagColumnOperationOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformTagColumnOperationOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformTagColumnOperationOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMapDataTransformTagColumnOperation) string { return v.ColumnName }).(pulumi.StringOutput)
}

func (o GetDataSetLogicalTableMapDataTransformTagColumnOperationOutput) Tags() GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMapDataTransformTagColumnOperation) []GetDataSetLogicalTableMapDataTransformTagColumnOperationTag {
		return v.Tags
	}).(GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput)
}

type GetDataSetLogicalTableMapDataTransformTagColumnOperationArrayOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapDataTransformTagColumnOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetLogicalTableMapDataTransformTagColumnOperation)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapDataTransformTagColumnOperationArrayOutput) ToGetDataSetLogicalTableMapDataTransformTagColumnOperationArrayOutput() GetDataSetLogicalTableMapDataTransformTagColumnOperationArrayOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformTagColumnOperationArrayOutput) ToGetDataSetLogicalTableMapDataTransformTagColumnOperationArrayOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformTagColumnOperationArrayOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformTagColumnOperationArrayOutput) Index(i pulumi.IntInput) GetDataSetLogicalTableMapDataTransformTagColumnOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataSetLogicalTableMapDataTransformTagColumnOperation {
		return vs[0].([]GetDataSetLogicalTableMapDataTransformTagColumnOperation)[vs[1].(int)]
	}).(GetDataSetLogicalTableMapDataTransformTagColumnOperationOutput)
}

type GetDataSetLogicalTableMapDataTransformTagColumnOperationTag struct {
	ColumnDescriptions   []GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription `pulumi:"columnDescriptions"`
	ColumnGeographicRole string                                                                         `pulumi:"columnGeographicRole"`
}

// GetDataSetLogicalTableMapDataTransformTagColumnOperationTagInput is an input type that accepts GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArgs and GetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput values.
// You can construct a concrete instance of `GetDataSetLogicalTableMapDataTransformTagColumnOperationTagInput` via:
//
//	GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArgs{...}
type GetDataSetLogicalTableMapDataTransformTagColumnOperationTagInput interface {
	pulumi.Input

	ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput() GetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput
	ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutputWithContext(context.Context) GetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput
}

type GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArgs struct {
	ColumnDescriptions   GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArrayInput `pulumi:"columnDescriptions"`
	ColumnGeographicRole pulumi.StringInput                                                                     `pulumi:"columnGeographicRole"`
}

func (GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformTagColumnOperationTag)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArgs) ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput() GetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput {
	return i.ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArgs) ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput)
}

// GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArrayInput is an input type that accepts GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArray and GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput values.
// You can construct a concrete instance of `GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArrayInput` via:
//
//	GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArray{ GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArgs{...} }
type GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArrayInput interface {
	pulumi.Input

	ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput() GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput
	ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutputWithContext(context.Context) GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput
}

type GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArray []GetDataSetLogicalTableMapDataTransformTagColumnOperationTagInput

func (GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetLogicalTableMapDataTransformTagColumnOperationTag)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArray) ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput() GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput {
	return i.ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArray) ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput)
}

type GetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformTagColumnOperationTag)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput) ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput() GetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput) ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput) ColumnDescriptions() GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArrayOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMapDataTransformTagColumnOperationTag) []GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription {
		return v.ColumnDescriptions
	}).(GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArrayOutput)
}

func (o GetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput) ColumnGeographicRole() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMapDataTransformTagColumnOperationTag) string {
		return v.ColumnGeographicRole
	}).(pulumi.StringOutput)
}

type GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetLogicalTableMapDataTransformTagColumnOperationTag)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput) ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput() GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput) ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput) Index(i pulumi.IntInput) GetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataSetLogicalTableMapDataTransformTagColumnOperationTag {
		return vs[0].([]GetDataSetLogicalTableMapDataTransformTagColumnOperationTag)[vs[1].(int)]
	}).(GetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput)
}

type GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription struct {
	Text string `pulumi:"text"`
}

// GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionInput is an input type that accepts GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs and GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput values.
// You can construct a concrete instance of `GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionInput` via:
//
//	GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs{...}
type GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionInput interface {
	pulumi.Input

	ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput() GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput
	ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutputWithContext(context.Context) GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput
}

type GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs struct {
	Text pulumi.StringInput `pulumi:"text"`
}

func (GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs) ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput() GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput {
	return i.ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs) ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput)
}

// GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArrayInput is an input type that accepts GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArray and GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArrayOutput values.
// You can construct a concrete instance of `GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArrayInput` via:
//
//	GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArray{ GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs{...} }
type GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArrayInput interface {
	pulumi.Input

	ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArrayOutput() GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArrayOutput
	ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArrayOutputWithContext(context.Context) GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArrayOutput
}

type GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArray []GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionInput

func (GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArray) ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArrayOutput() GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArrayOutput {
	return i.ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArrayOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArray) ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArrayOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArrayOutput)
}

type GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput) ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput() GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput) ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput) Text() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription) string {
		return v.Text
	}).(pulumi.StringOutput)
}

type GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArrayOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArrayOutput) ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArrayOutput() GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArrayOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArrayOutput) ToGetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArrayOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArrayOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArrayOutput) Index(i pulumi.IntInput) GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription {
		return vs[0].([]GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription)[vs[1].(int)]
	}).(GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput)
}

type GetDataSetLogicalTableMapDataTransformUntagColumnOperation struct {
	ColumnName string   `pulumi:"columnName"`
	TagNames   []string `pulumi:"tagNames"`
}

// GetDataSetLogicalTableMapDataTransformUntagColumnOperationInput is an input type that accepts GetDataSetLogicalTableMapDataTransformUntagColumnOperationArgs and GetDataSetLogicalTableMapDataTransformUntagColumnOperationOutput values.
// You can construct a concrete instance of `GetDataSetLogicalTableMapDataTransformUntagColumnOperationInput` via:
//
//	GetDataSetLogicalTableMapDataTransformUntagColumnOperationArgs{...}
type GetDataSetLogicalTableMapDataTransformUntagColumnOperationInput interface {
	pulumi.Input

	ToGetDataSetLogicalTableMapDataTransformUntagColumnOperationOutput() GetDataSetLogicalTableMapDataTransformUntagColumnOperationOutput
	ToGetDataSetLogicalTableMapDataTransformUntagColumnOperationOutputWithContext(context.Context) GetDataSetLogicalTableMapDataTransformUntagColumnOperationOutput
}

type GetDataSetLogicalTableMapDataTransformUntagColumnOperationArgs struct {
	ColumnName pulumi.StringInput      `pulumi:"columnName"`
	TagNames   pulumi.StringArrayInput `pulumi:"tagNames"`
}

func (GetDataSetLogicalTableMapDataTransformUntagColumnOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformUntagColumnOperation)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapDataTransformUntagColumnOperationArgs) ToGetDataSetLogicalTableMapDataTransformUntagColumnOperationOutput() GetDataSetLogicalTableMapDataTransformUntagColumnOperationOutput {
	return i.ToGetDataSetLogicalTableMapDataTransformUntagColumnOperationOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapDataTransformUntagColumnOperationArgs) ToGetDataSetLogicalTableMapDataTransformUntagColumnOperationOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformUntagColumnOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapDataTransformUntagColumnOperationOutput)
}

// GetDataSetLogicalTableMapDataTransformUntagColumnOperationArrayInput is an input type that accepts GetDataSetLogicalTableMapDataTransformUntagColumnOperationArray and GetDataSetLogicalTableMapDataTransformUntagColumnOperationArrayOutput values.
// You can construct a concrete instance of `GetDataSetLogicalTableMapDataTransformUntagColumnOperationArrayInput` via:
//
//	GetDataSetLogicalTableMapDataTransformUntagColumnOperationArray{ GetDataSetLogicalTableMapDataTransformUntagColumnOperationArgs{...} }
type GetDataSetLogicalTableMapDataTransformUntagColumnOperationArrayInput interface {
	pulumi.Input

	ToGetDataSetLogicalTableMapDataTransformUntagColumnOperationArrayOutput() GetDataSetLogicalTableMapDataTransformUntagColumnOperationArrayOutput
	ToGetDataSetLogicalTableMapDataTransformUntagColumnOperationArrayOutputWithContext(context.Context) GetDataSetLogicalTableMapDataTransformUntagColumnOperationArrayOutput
}

type GetDataSetLogicalTableMapDataTransformUntagColumnOperationArray []GetDataSetLogicalTableMapDataTransformUntagColumnOperationInput

func (GetDataSetLogicalTableMapDataTransformUntagColumnOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetLogicalTableMapDataTransformUntagColumnOperation)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapDataTransformUntagColumnOperationArray) ToGetDataSetLogicalTableMapDataTransformUntagColumnOperationArrayOutput() GetDataSetLogicalTableMapDataTransformUntagColumnOperationArrayOutput {
	return i.ToGetDataSetLogicalTableMapDataTransformUntagColumnOperationArrayOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapDataTransformUntagColumnOperationArray) ToGetDataSetLogicalTableMapDataTransformUntagColumnOperationArrayOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformUntagColumnOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapDataTransformUntagColumnOperationArrayOutput)
}

type GetDataSetLogicalTableMapDataTransformUntagColumnOperationOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapDataTransformUntagColumnOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformUntagColumnOperation)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapDataTransformUntagColumnOperationOutput) ToGetDataSetLogicalTableMapDataTransformUntagColumnOperationOutput() GetDataSetLogicalTableMapDataTransformUntagColumnOperationOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformUntagColumnOperationOutput) ToGetDataSetLogicalTableMapDataTransformUntagColumnOperationOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformUntagColumnOperationOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformUntagColumnOperationOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMapDataTransformUntagColumnOperation) string { return v.ColumnName }).(pulumi.StringOutput)
}

func (o GetDataSetLogicalTableMapDataTransformUntagColumnOperationOutput) TagNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMapDataTransformUntagColumnOperation) []string { return v.TagNames }).(pulumi.StringArrayOutput)
}

type GetDataSetLogicalTableMapDataTransformUntagColumnOperationArrayOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapDataTransformUntagColumnOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetLogicalTableMapDataTransformUntagColumnOperation)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapDataTransformUntagColumnOperationArrayOutput) ToGetDataSetLogicalTableMapDataTransformUntagColumnOperationArrayOutput() GetDataSetLogicalTableMapDataTransformUntagColumnOperationArrayOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformUntagColumnOperationArrayOutput) ToGetDataSetLogicalTableMapDataTransformUntagColumnOperationArrayOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapDataTransformUntagColumnOperationArrayOutput {
	return o
}

func (o GetDataSetLogicalTableMapDataTransformUntagColumnOperationArrayOutput) Index(i pulumi.IntInput) GetDataSetLogicalTableMapDataTransformUntagColumnOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataSetLogicalTableMapDataTransformUntagColumnOperation {
		return vs[0].([]GetDataSetLogicalTableMapDataTransformUntagColumnOperation)[vs[1].(int)]
	}).(GetDataSetLogicalTableMapDataTransformUntagColumnOperationOutput)
}

type GetDataSetLogicalTableMapSource struct {
	DataSetArn       string                                           `pulumi:"dataSetArn"`
	JoinInstructions []GetDataSetLogicalTableMapSourceJoinInstruction `pulumi:"joinInstructions"`
	PhysicalTableId  string                                           `pulumi:"physicalTableId"`
}

// GetDataSetLogicalTableMapSourceInput is an input type that accepts GetDataSetLogicalTableMapSourceArgs and GetDataSetLogicalTableMapSourceOutput values.
// You can construct a concrete instance of `GetDataSetLogicalTableMapSourceInput` via:
//
//	GetDataSetLogicalTableMapSourceArgs{...}
type GetDataSetLogicalTableMapSourceInput interface {
	pulumi.Input

	ToGetDataSetLogicalTableMapSourceOutput() GetDataSetLogicalTableMapSourceOutput
	ToGetDataSetLogicalTableMapSourceOutputWithContext(context.Context) GetDataSetLogicalTableMapSourceOutput
}

type GetDataSetLogicalTableMapSourceArgs struct {
	DataSetArn       pulumi.StringInput                                       `pulumi:"dataSetArn"`
	JoinInstructions GetDataSetLogicalTableMapSourceJoinInstructionArrayInput `pulumi:"joinInstructions"`
	PhysicalTableId  pulumi.StringInput                                       `pulumi:"physicalTableId"`
}

func (GetDataSetLogicalTableMapSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapSource)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapSourceArgs) ToGetDataSetLogicalTableMapSourceOutput() GetDataSetLogicalTableMapSourceOutput {
	return i.ToGetDataSetLogicalTableMapSourceOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapSourceArgs) ToGetDataSetLogicalTableMapSourceOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapSourceOutput)
}

// GetDataSetLogicalTableMapSourceArrayInput is an input type that accepts GetDataSetLogicalTableMapSourceArray and GetDataSetLogicalTableMapSourceArrayOutput values.
// You can construct a concrete instance of `GetDataSetLogicalTableMapSourceArrayInput` via:
//
//	GetDataSetLogicalTableMapSourceArray{ GetDataSetLogicalTableMapSourceArgs{...} }
type GetDataSetLogicalTableMapSourceArrayInput interface {
	pulumi.Input

	ToGetDataSetLogicalTableMapSourceArrayOutput() GetDataSetLogicalTableMapSourceArrayOutput
	ToGetDataSetLogicalTableMapSourceArrayOutputWithContext(context.Context) GetDataSetLogicalTableMapSourceArrayOutput
}

type GetDataSetLogicalTableMapSourceArray []GetDataSetLogicalTableMapSourceInput

func (GetDataSetLogicalTableMapSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetLogicalTableMapSource)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapSourceArray) ToGetDataSetLogicalTableMapSourceArrayOutput() GetDataSetLogicalTableMapSourceArrayOutput {
	return i.ToGetDataSetLogicalTableMapSourceArrayOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapSourceArray) ToGetDataSetLogicalTableMapSourceArrayOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapSourceArrayOutput)
}

type GetDataSetLogicalTableMapSourceOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapSource)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapSourceOutput) ToGetDataSetLogicalTableMapSourceOutput() GetDataSetLogicalTableMapSourceOutput {
	return o
}

func (o GetDataSetLogicalTableMapSourceOutput) ToGetDataSetLogicalTableMapSourceOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapSourceOutput {
	return o
}

func (o GetDataSetLogicalTableMapSourceOutput) DataSetArn() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMapSource) string { return v.DataSetArn }).(pulumi.StringOutput)
}

func (o GetDataSetLogicalTableMapSourceOutput) JoinInstructions() GetDataSetLogicalTableMapSourceJoinInstructionArrayOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMapSource) []GetDataSetLogicalTableMapSourceJoinInstruction {
		return v.JoinInstructions
	}).(GetDataSetLogicalTableMapSourceJoinInstructionArrayOutput)
}

func (o GetDataSetLogicalTableMapSourceOutput) PhysicalTableId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMapSource) string { return v.PhysicalTableId }).(pulumi.StringOutput)
}

type GetDataSetLogicalTableMapSourceArrayOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetLogicalTableMapSource)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapSourceArrayOutput) ToGetDataSetLogicalTableMapSourceArrayOutput() GetDataSetLogicalTableMapSourceArrayOutput {
	return o
}

func (o GetDataSetLogicalTableMapSourceArrayOutput) ToGetDataSetLogicalTableMapSourceArrayOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapSourceArrayOutput {
	return o
}

func (o GetDataSetLogicalTableMapSourceArrayOutput) Index(i pulumi.IntInput) GetDataSetLogicalTableMapSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataSetLogicalTableMapSource {
		return vs[0].([]GetDataSetLogicalTableMapSource)[vs[1].(int)]
	}).(GetDataSetLogicalTableMapSourceOutput)
}

type GetDataSetLogicalTableMapSourceJoinInstruction struct {
	LeftJoinKeyProperties  []GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperty  `pulumi:"leftJoinKeyProperties"`
	LeftOperand            string                                                               `pulumi:"leftOperand"`
	OnClause               string                                                               `pulumi:"onClause"`
	RightJoinKeyProperties []GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperty `pulumi:"rightJoinKeyProperties"`
	RightOperand           string                                                               `pulumi:"rightOperand"`
	Type                   string                                                               `pulumi:"type"`
}

// GetDataSetLogicalTableMapSourceJoinInstructionInput is an input type that accepts GetDataSetLogicalTableMapSourceJoinInstructionArgs and GetDataSetLogicalTableMapSourceJoinInstructionOutput values.
// You can construct a concrete instance of `GetDataSetLogicalTableMapSourceJoinInstructionInput` via:
//
//	GetDataSetLogicalTableMapSourceJoinInstructionArgs{...}
type GetDataSetLogicalTableMapSourceJoinInstructionInput interface {
	pulumi.Input

	ToGetDataSetLogicalTableMapSourceJoinInstructionOutput() GetDataSetLogicalTableMapSourceJoinInstructionOutput
	ToGetDataSetLogicalTableMapSourceJoinInstructionOutputWithContext(context.Context) GetDataSetLogicalTableMapSourceJoinInstructionOutput
}

type GetDataSetLogicalTableMapSourceJoinInstructionArgs struct {
	LeftJoinKeyProperties  GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArrayInput  `pulumi:"leftJoinKeyProperties"`
	LeftOperand            pulumi.StringInput                                                           `pulumi:"leftOperand"`
	OnClause               pulumi.StringInput                                                           `pulumi:"onClause"`
	RightJoinKeyProperties GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArrayInput `pulumi:"rightJoinKeyProperties"`
	RightOperand           pulumi.StringInput                                                           `pulumi:"rightOperand"`
	Type                   pulumi.StringInput                                                           `pulumi:"type"`
}

func (GetDataSetLogicalTableMapSourceJoinInstructionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapSourceJoinInstruction)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapSourceJoinInstructionArgs) ToGetDataSetLogicalTableMapSourceJoinInstructionOutput() GetDataSetLogicalTableMapSourceJoinInstructionOutput {
	return i.ToGetDataSetLogicalTableMapSourceJoinInstructionOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapSourceJoinInstructionArgs) ToGetDataSetLogicalTableMapSourceJoinInstructionOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapSourceJoinInstructionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapSourceJoinInstructionOutput)
}

// GetDataSetLogicalTableMapSourceJoinInstructionArrayInput is an input type that accepts GetDataSetLogicalTableMapSourceJoinInstructionArray and GetDataSetLogicalTableMapSourceJoinInstructionArrayOutput values.
// You can construct a concrete instance of `GetDataSetLogicalTableMapSourceJoinInstructionArrayInput` via:
//
//	GetDataSetLogicalTableMapSourceJoinInstructionArray{ GetDataSetLogicalTableMapSourceJoinInstructionArgs{...} }
type GetDataSetLogicalTableMapSourceJoinInstructionArrayInput interface {
	pulumi.Input

	ToGetDataSetLogicalTableMapSourceJoinInstructionArrayOutput() GetDataSetLogicalTableMapSourceJoinInstructionArrayOutput
	ToGetDataSetLogicalTableMapSourceJoinInstructionArrayOutputWithContext(context.Context) GetDataSetLogicalTableMapSourceJoinInstructionArrayOutput
}

type GetDataSetLogicalTableMapSourceJoinInstructionArray []GetDataSetLogicalTableMapSourceJoinInstructionInput

func (GetDataSetLogicalTableMapSourceJoinInstructionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetLogicalTableMapSourceJoinInstruction)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapSourceJoinInstructionArray) ToGetDataSetLogicalTableMapSourceJoinInstructionArrayOutput() GetDataSetLogicalTableMapSourceJoinInstructionArrayOutput {
	return i.ToGetDataSetLogicalTableMapSourceJoinInstructionArrayOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapSourceJoinInstructionArray) ToGetDataSetLogicalTableMapSourceJoinInstructionArrayOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapSourceJoinInstructionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapSourceJoinInstructionArrayOutput)
}

type GetDataSetLogicalTableMapSourceJoinInstructionOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapSourceJoinInstructionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapSourceJoinInstruction)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionOutput) ToGetDataSetLogicalTableMapSourceJoinInstructionOutput() GetDataSetLogicalTableMapSourceJoinInstructionOutput {
	return o
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionOutput) ToGetDataSetLogicalTableMapSourceJoinInstructionOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapSourceJoinInstructionOutput {
	return o
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionOutput) LeftJoinKeyProperties() GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArrayOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMapSourceJoinInstruction) []GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperty {
		return v.LeftJoinKeyProperties
	}).(GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArrayOutput)
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionOutput) LeftOperand() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMapSourceJoinInstruction) string { return v.LeftOperand }).(pulumi.StringOutput)
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionOutput) OnClause() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMapSourceJoinInstruction) string { return v.OnClause }).(pulumi.StringOutput)
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionOutput) RightJoinKeyProperties() GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArrayOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMapSourceJoinInstruction) []GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperty {
		return v.RightJoinKeyProperties
	}).(GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArrayOutput)
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionOutput) RightOperand() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMapSourceJoinInstruction) string { return v.RightOperand }).(pulumi.StringOutput)
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMapSourceJoinInstruction) string { return v.Type }).(pulumi.StringOutput)
}

type GetDataSetLogicalTableMapSourceJoinInstructionArrayOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapSourceJoinInstructionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetLogicalTableMapSourceJoinInstruction)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionArrayOutput) ToGetDataSetLogicalTableMapSourceJoinInstructionArrayOutput() GetDataSetLogicalTableMapSourceJoinInstructionArrayOutput {
	return o
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionArrayOutput) ToGetDataSetLogicalTableMapSourceJoinInstructionArrayOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapSourceJoinInstructionArrayOutput {
	return o
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionArrayOutput) Index(i pulumi.IntInput) GetDataSetLogicalTableMapSourceJoinInstructionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataSetLogicalTableMapSourceJoinInstruction {
		return vs[0].([]GetDataSetLogicalTableMapSourceJoinInstruction)[vs[1].(int)]
	}).(GetDataSetLogicalTableMapSourceJoinInstructionOutput)
}

type GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperty struct {
	UniqueKey bool `pulumi:"uniqueKey"`
}

// GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyInput is an input type that accepts GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArgs and GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutput values.
// You can construct a concrete instance of `GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyInput` via:
//
//	GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArgs{...}
type GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyInput interface {
	pulumi.Input

	ToGetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutput() GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutput
	ToGetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutputWithContext(context.Context) GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutput
}

type GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArgs struct {
	UniqueKey pulumi.BoolInput `pulumi:"uniqueKey"`
}

func (GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperty)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArgs) ToGetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutput() GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutput {
	return i.ToGetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArgs) ToGetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutput)
}

// GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArrayInput is an input type that accepts GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArray and GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArrayOutput values.
// You can construct a concrete instance of `GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArrayInput` via:
//
//	GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArray{ GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArgs{...} }
type GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArrayInput interface {
	pulumi.Input

	ToGetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArrayOutput() GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArrayOutput
	ToGetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArrayOutputWithContext(context.Context) GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArrayOutput
}

type GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArray []GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyInput

func (GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperty)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArray) ToGetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArrayOutput() GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArrayOutput {
	return i.ToGetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArrayOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArray) ToGetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArrayOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArrayOutput)
}

type GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperty)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutput) ToGetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutput() GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutput {
	return o
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutput) ToGetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutput {
	return o
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutput) UniqueKey() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperty) bool { return v.UniqueKey }).(pulumi.BoolOutput)
}

type GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArrayOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperty)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArrayOutput) ToGetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArrayOutput() GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArrayOutput {
	return o
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArrayOutput) ToGetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArrayOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArrayOutput {
	return o
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArrayOutput) Index(i pulumi.IntInput) GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperty {
		return vs[0].([]GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperty)[vs[1].(int)]
	}).(GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutput)
}

type GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperty struct {
	UniqueKey bool `pulumi:"uniqueKey"`
}

// GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyInput is an input type that accepts GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArgs and GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutput values.
// You can construct a concrete instance of `GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyInput` via:
//
//	GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArgs{...}
type GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyInput interface {
	pulumi.Input

	ToGetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutput() GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutput
	ToGetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutputWithContext(context.Context) GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutput
}

type GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArgs struct {
	UniqueKey pulumi.BoolInput `pulumi:"uniqueKey"`
}

func (GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperty)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArgs) ToGetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutput() GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutput {
	return i.ToGetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArgs) ToGetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutput)
}

// GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArrayInput is an input type that accepts GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArray and GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArrayOutput values.
// You can construct a concrete instance of `GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArrayInput` via:
//
//	GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArray{ GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArgs{...} }
type GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArrayInput interface {
	pulumi.Input

	ToGetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArrayOutput() GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArrayOutput
	ToGetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArrayOutputWithContext(context.Context) GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArrayOutput
}

type GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArray []GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyInput

func (GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperty)(nil)).Elem()
}

func (i GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArray) ToGetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArrayOutput() GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArrayOutput {
	return i.ToGetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArrayOutputWithContext(context.Background())
}

func (i GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArray) ToGetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArrayOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArrayOutput)
}

type GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperty)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutput) ToGetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutput() GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutput {
	return o
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutput) ToGetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutput {
	return o
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutput) UniqueKey() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperty) bool { return v.UniqueKey }).(pulumi.BoolOutput)
}

type GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArrayOutput struct{ *pulumi.OutputState }

func (GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperty)(nil)).Elem()
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArrayOutput) ToGetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArrayOutput() GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArrayOutput {
	return o
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArrayOutput) ToGetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArrayOutputWithContext(ctx context.Context) GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArrayOutput {
	return o
}

func (o GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArrayOutput) Index(i pulumi.IntInput) GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperty {
		return vs[0].([]GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperty)[vs[1].(int)]
	}).(GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutput)
}

type GetDataSetPermission struct {
	Actions   []string `pulumi:"actions"`
	Principal string   `pulumi:"principal"`
}

// GetDataSetPermissionInput is an input type that accepts GetDataSetPermissionArgs and GetDataSetPermissionOutput values.
// You can construct a concrete instance of `GetDataSetPermissionInput` via:
//
//	GetDataSetPermissionArgs{...}
type GetDataSetPermissionInput interface {
	pulumi.Input

	ToGetDataSetPermissionOutput() GetDataSetPermissionOutput
	ToGetDataSetPermissionOutputWithContext(context.Context) GetDataSetPermissionOutput
}

type GetDataSetPermissionArgs struct {
	Actions   pulumi.StringArrayInput `pulumi:"actions"`
	Principal pulumi.StringInput      `pulumi:"principal"`
}

func (GetDataSetPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetPermission)(nil)).Elem()
}

func (i GetDataSetPermissionArgs) ToGetDataSetPermissionOutput() GetDataSetPermissionOutput {
	return i.ToGetDataSetPermissionOutputWithContext(context.Background())
}

func (i GetDataSetPermissionArgs) ToGetDataSetPermissionOutputWithContext(ctx context.Context) GetDataSetPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetPermissionOutput)
}

// GetDataSetPermissionArrayInput is an input type that accepts GetDataSetPermissionArray and GetDataSetPermissionArrayOutput values.
// You can construct a concrete instance of `GetDataSetPermissionArrayInput` via:
//
//	GetDataSetPermissionArray{ GetDataSetPermissionArgs{...} }
type GetDataSetPermissionArrayInput interface {
	pulumi.Input

	ToGetDataSetPermissionArrayOutput() GetDataSetPermissionArrayOutput
	ToGetDataSetPermissionArrayOutputWithContext(context.Context) GetDataSetPermissionArrayOutput
}

type GetDataSetPermissionArray []GetDataSetPermissionInput

func (GetDataSetPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetPermission)(nil)).Elem()
}

func (i GetDataSetPermissionArray) ToGetDataSetPermissionArrayOutput() GetDataSetPermissionArrayOutput {
	return i.ToGetDataSetPermissionArrayOutputWithContext(context.Background())
}

func (i GetDataSetPermissionArray) ToGetDataSetPermissionArrayOutputWithContext(ctx context.Context) GetDataSetPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetPermissionArrayOutput)
}

type GetDataSetPermissionOutput struct{ *pulumi.OutputState }

func (GetDataSetPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetPermission)(nil)).Elem()
}

func (o GetDataSetPermissionOutput) ToGetDataSetPermissionOutput() GetDataSetPermissionOutput {
	return o
}

func (o GetDataSetPermissionOutput) ToGetDataSetPermissionOutputWithContext(ctx context.Context) GetDataSetPermissionOutput {
	return o
}

func (o GetDataSetPermissionOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDataSetPermission) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

func (o GetDataSetPermissionOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetPermission) string { return v.Principal }).(pulumi.StringOutput)
}

type GetDataSetPermissionArrayOutput struct{ *pulumi.OutputState }

func (GetDataSetPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetPermission)(nil)).Elem()
}

func (o GetDataSetPermissionArrayOutput) ToGetDataSetPermissionArrayOutput() GetDataSetPermissionArrayOutput {
	return o
}

func (o GetDataSetPermissionArrayOutput) ToGetDataSetPermissionArrayOutputWithContext(ctx context.Context) GetDataSetPermissionArrayOutput {
	return o
}

func (o GetDataSetPermissionArrayOutput) Index(i pulumi.IntInput) GetDataSetPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataSetPermission {
		return vs[0].([]GetDataSetPermission)[vs[1].(int)]
	}).(GetDataSetPermissionOutput)
}

type GetDataSetPhysicalTableMap struct {
	CustomSqls         []GetDataSetPhysicalTableMapCustomSql       `pulumi:"customSqls"`
	PhysicalTableMapId string                                      `pulumi:"physicalTableMapId"`
	RelationalTables   []GetDataSetPhysicalTableMapRelationalTable `pulumi:"relationalTables"`
	S3Sources          []GetDataSetPhysicalTableMapS3Source        `pulumi:"s3Sources"`
}

// GetDataSetPhysicalTableMapInput is an input type that accepts GetDataSetPhysicalTableMap and GetDataSetPhysicalTableMapOutput values.
// You can construct a concrete instance of `GetDataSetPhysicalTableMapInput` via:
//
//	GetDataSetPhysicalTableMap{ "key": GetDataSetPhysicalTableArgs{...} }
type GetDataSetPhysicalTableMapInput interface {
	pulumi.Input

	ToGetDataSetPhysicalTableMapOutput() GetDataSetPhysicalTableMapOutput
	ToGetDataSetPhysicalTableMapOutputWithContext(context.Context) GetDataSetPhysicalTableMapOutput
}

type GetDataSetPhysicalTableMapArgs struct {
	CustomSqls         GetDataSetPhysicalTableMapCustomSqlArrayInput       `pulumi:"customSqls"`
	PhysicalTableMapId pulumi.StringInput                                  `pulumi:"physicalTableMapId"`
	RelationalTables   GetDataSetPhysicalTableMapRelationalTableArrayInput `pulumi:"relationalTables"`
	S3Sources          GetDataSetPhysicalTableMapS3SourceArrayInput        `pulumi:"s3Sources"`
}

func (GetDataSetPhysicalTableMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetPhysicalTableMap)(nil)).Elem()
}

func (i GetDataSetPhysicalTableMapArgs) ToGetDataSetPhysicalTableMapOutput() GetDataSetPhysicalTableMapOutput {
	return i.ToGetDataSetPhysicalTableMapOutputWithContext(context.Background())
}

func (i GetDataSetPhysicalTableMapArgs) ToGetDataSetPhysicalTableMapOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetPhysicalTableMapOutput)
}

// GetDataSetPhysicalTableMapArrayInput is an input type that accepts GetDataSetPhysicalTableMapArray and GetDataSetPhysicalTableMapArrayOutput values.
// You can construct a concrete instance of `GetDataSetPhysicalTableMapArrayInput` via:
//
//	GetDataSetPhysicalTableMapArray{ GetDataSetPhysicalTableMapArgs{...} }
type GetDataSetPhysicalTableMapArrayInput interface {
	pulumi.Input

	ToGetDataSetPhysicalTableMapArrayOutput() GetDataSetPhysicalTableMapArrayOutput
	ToGetDataSetPhysicalTableMapArrayOutputWithContext(context.Context) GetDataSetPhysicalTableMapArrayOutput
}

type GetDataSetPhysicalTableMapArray []GetDataSetPhysicalTableMapInput

func (GetDataSetPhysicalTableMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetPhysicalTableMap)(nil)).Elem()
}

func (i GetDataSetPhysicalTableMapArray) ToGetDataSetPhysicalTableMapArrayOutput() GetDataSetPhysicalTableMapArrayOutput {
	return i.ToGetDataSetPhysicalTableMapArrayOutputWithContext(context.Background())
}

func (i GetDataSetPhysicalTableMapArray) ToGetDataSetPhysicalTableMapArrayOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetPhysicalTableMapArrayOutput)
}

type GetDataSetPhysicalTableMapOutput struct{ *pulumi.OutputState }

func (GetDataSetPhysicalTableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetPhysicalTableMap)(nil)).Elem()
}

func (o GetDataSetPhysicalTableMapOutput) ToGetDataSetPhysicalTableMapOutput() GetDataSetPhysicalTableMapOutput {
	return o
}

func (o GetDataSetPhysicalTableMapOutput) ToGetDataSetPhysicalTableMapOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapOutput {
	return o
}

func (o GetDataSetPhysicalTableMapOutput) CustomSqls() GetDataSetPhysicalTableMapCustomSqlArrayOutput {
	return o.ApplyT(func(v GetDataSetPhysicalTableMap) []GetDataSetPhysicalTableMapCustomSql { return v.CustomSqls }).(GetDataSetPhysicalTableMapCustomSqlArrayOutput)
}

func (o GetDataSetPhysicalTableMapOutput) PhysicalTableMapId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetPhysicalTableMap) string { return v.PhysicalTableMapId }).(pulumi.StringOutput)
}

func (o GetDataSetPhysicalTableMapOutput) RelationalTables() GetDataSetPhysicalTableMapRelationalTableArrayOutput {
	return o.ApplyT(func(v GetDataSetPhysicalTableMap) []GetDataSetPhysicalTableMapRelationalTable {
		return v.RelationalTables
	}).(GetDataSetPhysicalTableMapRelationalTableArrayOutput)
}

func (o GetDataSetPhysicalTableMapOutput) S3Sources() GetDataSetPhysicalTableMapS3SourceArrayOutput {
	return o.ApplyT(func(v GetDataSetPhysicalTableMap) []GetDataSetPhysicalTableMapS3Source { return v.S3Sources }).(GetDataSetPhysicalTableMapS3SourceArrayOutput)
}

type GetDataSetPhysicalTableMapArrayOutput struct{ *pulumi.OutputState }

func (GetDataSetPhysicalTableMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetPhysicalTableMap)(nil)).Elem()
}

func (o GetDataSetPhysicalTableMapArrayOutput) ToGetDataSetPhysicalTableMapArrayOutput() GetDataSetPhysicalTableMapArrayOutput {
	return o
}

func (o GetDataSetPhysicalTableMapArrayOutput) ToGetDataSetPhysicalTableMapArrayOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapArrayOutput {
	return o
}

func (o GetDataSetPhysicalTableMapArrayOutput) Index(i pulumi.IntInput) GetDataSetPhysicalTableMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataSetPhysicalTableMap {
		return vs[0].([]GetDataSetPhysicalTableMap)[vs[1].(int)]
	}).(GetDataSetPhysicalTableMapOutput)
}

type GetDataSetPhysicalTableMapCustomSql struct {
	Columns       []GetDataSetPhysicalTableMapCustomSqlColumn `pulumi:"columns"`
	DataSourceArn string                                      `pulumi:"dataSourceArn"`
	Name          string                                      `pulumi:"name"`
	SqlQuery      string                                      `pulumi:"sqlQuery"`
}

// GetDataSetPhysicalTableMapCustomSqlInput is an input type that accepts GetDataSetPhysicalTableMapCustomSqlArgs and GetDataSetPhysicalTableMapCustomSqlOutput values.
// You can construct a concrete instance of `GetDataSetPhysicalTableMapCustomSqlInput` via:
//
//	GetDataSetPhysicalTableMapCustomSqlArgs{...}
type GetDataSetPhysicalTableMapCustomSqlInput interface {
	pulumi.Input

	ToGetDataSetPhysicalTableMapCustomSqlOutput() GetDataSetPhysicalTableMapCustomSqlOutput
	ToGetDataSetPhysicalTableMapCustomSqlOutputWithContext(context.Context) GetDataSetPhysicalTableMapCustomSqlOutput
}

type GetDataSetPhysicalTableMapCustomSqlArgs struct {
	Columns       GetDataSetPhysicalTableMapCustomSqlColumnArrayInput `pulumi:"columns"`
	DataSourceArn pulumi.StringInput                                  `pulumi:"dataSourceArn"`
	Name          pulumi.StringInput                                  `pulumi:"name"`
	SqlQuery      pulumi.StringInput                                  `pulumi:"sqlQuery"`
}

func (GetDataSetPhysicalTableMapCustomSqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetPhysicalTableMapCustomSql)(nil)).Elem()
}

func (i GetDataSetPhysicalTableMapCustomSqlArgs) ToGetDataSetPhysicalTableMapCustomSqlOutput() GetDataSetPhysicalTableMapCustomSqlOutput {
	return i.ToGetDataSetPhysicalTableMapCustomSqlOutputWithContext(context.Background())
}

func (i GetDataSetPhysicalTableMapCustomSqlArgs) ToGetDataSetPhysicalTableMapCustomSqlOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapCustomSqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetPhysicalTableMapCustomSqlOutput)
}

// GetDataSetPhysicalTableMapCustomSqlArrayInput is an input type that accepts GetDataSetPhysicalTableMapCustomSqlArray and GetDataSetPhysicalTableMapCustomSqlArrayOutput values.
// You can construct a concrete instance of `GetDataSetPhysicalTableMapCustomSqlArrayInput` via:
//
//	GetDataSetPhysicalTableMapCustomSqlArray{ GetDataSetPhysicalTableMapCustomSqlArgs{...} }
type GetDataSetPhysicalTableMapCustomSqlArrayInput interface {
	pulumi.Input

	ToGetDataSetPhysicalTableMapCustomSqlArrayOutput() GetDataSetPhysicalTableMapCustomSqlArrayOutput
	ToGetDataSetPhysicalTableMapCustomSqlArrayOutputWithContext(context.Context) GetDataSetPhysicalTableMapCustomSqlArrayOutput
}

type GetDataSetPhysicalTableMapCustomSqlArray []GetDataSetPhysicalTableMapCustomSqlInput

func (GetDataSetPhysicalTableMapCustomSqlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetPhysicalTableMapCustomSql)(nil)).Elem()
}

func (i GetDataSetPhysicalTableMapCustomSqlArray) ToGetDataSetPhysicalTableMapCustomSqlArrayOutput() GetDataSetPhysicalTableMapCustomSqlArrayOutput {
	return i.ToGetDataSetPhysicalTableMapCustomSqlArrayOutputWithContext(context.Background())
}

func (i GetDataSetPhysicalTableMapCustomSqlArray) ToGetDataSetPhysicalTableMapCustomSqlArrayOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapCustomSqlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetPhysicalTableMapCustomSqlArrayOutput)
}

type GetDataSetPhysicalTableMapCustomSqlOutput struct{ *pulumi.OutputState }

func (GetDataSetPhysicalTableMapCustomSqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetPhysicalTableMapCustomSql)(nil)).Elem()
}

func (o GetDataSetPhysicalTableMapCustomSqlOutput) ToGetDataSetPhysicalTableMapCustomSqlOutput() GetDataSetPhysicalTableMapCustomSqlOutput {
	return o
}

func (o GetDataSetPhysicalTableMapCustomSqlOutput) ToGetDataSetPhysicalTableMapCustomSqlOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapCustomSqlOutput {
	return o
}

func (o GetDataSetPhysicalTableMapCustomSqlOutput) Columns() GetDataSetPhysicalTableMapCustomSqlColumnArrayOutput {
	return o.ApplyT(func(v GetDataSetPhysicalTableMapCustomSql) []GetDataSetPhysicalTableMapCustomSqlColumn {
		return v.Columns
	}).(GetDataSetPhysicalTableMapCustomSqlColumnArrayOutput)
}

func (o GetDataSetPhysicalTableMapCustomSqlOutput) DataSourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetPhysicalTableMapCustomSql) string { return v.DataSourceArn }).(pulumi.StringOutput)
}

func (o GetDataSetPhysicalTableMapCustomSqlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetPhysicalTableMapCustomSql) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetDataSetPhysicalTableMapCustomSqlOutput) SqlQuery() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetPhysicalTableMapCustomSql) string { return v.SqlQuery }).(pulumi.StringOutput)
}

type GetDataSetPhysicalTableMapCustomSqlArrayOutput struct{ *pulumi.OutputState }

func (GetDataSetPhysicalTableMapCustomSqlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetPhysicalTableMapCustomSql)(nil)).Elem()
}

func (o GetDataSetPhysicalTableMapCustomSqlArrayOutput) ToGetDataSetPhysicalTableMapCustomSqlArrayOutput() GetDataSetPhysicalTableMapCustomSqlArrayOutput {
	return o
}

func (o GetDataSetPhysicalTableMapCustomSqlArrayOutput) ToGetDataSetPhysicalTableMapCustomSqlArrayOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapCustomSqlArrayOutput {
	return o
}

func (o GetDataSetPhysicalTableMapCustomSqlArrayOutput) Index(i pulumi.IntInput) GetDataSetPhysicalTableMapCustomSqlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataSetPhysicalTableMapCustomSql {
		return vs[0].([]GetDataSetPhysicalTableMapCustomSql)[vs[1].(int)]
	}).(GetDataSetPhysicalTableMapCustomSqlOutput)
}

type GetDataSetPhysicalTableMapCustomSqlColumn struct {
	Name string `pulumi:"name"`
	Type string `pulumi:"type"`
}

// GetDataSetPhysicalTableMapCustomSqlColumnInput is an input type that accepts GetDataSetPhysicalTableMapCustomSqlColumnArgs and GetDataSetPhysicalTableMapCustomSqlColumnOutput values.
// You can construct a concrete instance of `GetDataSetPhysicalTableMapCustomSqlColumnInput` via:
//
//	GetDataSetPhysicalTableMapCustomSqlColumnArgs{...}
type GetDataSetPhysicalTableMapCustomSqlColumnInput interface {
	pulumi.Input

	ToGetDataSetPhysicalTableMapCustomSqlColumnOutput() GetDataSetPhysicalTableMapCustomSqlColumnOutput
	ToGetDataSetPhysicalTableMapCustomSqlColumnOutputWithContext(context.Context) GetDataSetPhysicalTableMapCustomSqlColumnOutput
}

type GetDataSetPhysicalTableMapCustomSqlColumnArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetDataSetPhysicalTableMapCustomSqlColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetPhysicalTableMapCustomSqlColumn)(nil)).Elem()
}

func (i GetDataSetPhysicalTableMapCustomSqlColumnArgs) ToGetDataSetPhysicalTableMapCustomSqlColumnOutput() GetDataSetPhysicalTableMapCustomSqlColumnOutput {
	return i.ToGetDataSetPhysicalTableMapCustomSqlColumnOutputWithContext(context.Background())
}

func (i GetDataSetPhysicalTableMapCustomSqlColumnArgs) ToGetDataSetPhysicalTableMapCustomSqlColumnOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapCustomSqlColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetPhysicalTableMapCustomSqlColumnOutput)
}

// GetDataSetPhysicalTableMapCustomSqlColumnArrayInput is an input type that accepts GetDataSetPhysicalTableMapCustomSqlColumnArray and GetDataSetPhysicalTableMapCustomSqlColumnArrayOutput values.
// You can construct a concrete instance of `GetDataSetPhysicalTableMapCustomSqlColumnArrayInput` via:
//
//	GetDataSetPhysicalTableMapCustomSqlColumnArray{ GetDataSetPhysicalTableMapCustomSqlColumnArgs{...} }
type GetDataSetPhysicalTableMapCustomSqlColumnArrayInput interface {
	pulumi.Input

	ToGetDataSetPhysicalTableMapCustomSqlColumnArrayOutput() GetDataSetPhysicalTableMapCustomSqlColumnArrayOutput
	ToGetDataSetPhysicalTableMapCustomSqlColumnArrayOutputWithContext(context.Context) GetDataSetPhysicalTableMapCustomSqlColumnArrayOutput
}

type GetDataSetPhysicalTableMapCustomSqlColumnArray []GetDataSetPhysicalTableMapCustomSqlColumnInput

func (GetDataSetPhysicalTableMapCustomSqlColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetPhysicalTableMapCustomSqlColumn)(nil)).Elem()
}

func (i GetDataSetPhysicalTableMapCustomSqlColumnArray) ToGetDataSetPhysicalTableMapCustomSqlColumnArrayOutput() GetDataSetPhysicalTableMapCustomSqlColumnArrayOutput {
	return i.ToGetDataSetPhysicalTableMapCustomSqlColumnArrayOutputWithContext(context.Background())
}

func (i GetDataSetPhysicalTableMapCustomSqlColumnArray) ToGetDataSetPhysicalTableMapCustomSqlColumnArrayOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapCustomSqlColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetPhysicalTableMapCustomSqlColumnArrayOutput)
}

type GetDataSetPhysicalTableMapCustomSqlColumnOutput struct{ *pulumi.OutputState }

func (GetDataSetPhysicalTableMapCustomSqlColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetPhysicalTableMapCustomSqlColumn)(nil)).Elem()
}

func (o GetDataSetPhysicalTableMapCustomSqlColumnOutput) ToGetDataSetPhysicalTableMapCustomSqlColumnOutput() GetDataSetPhysicalTableMapCustomSqlColumnOutput {
	return o
}

func (o GetDataSetPhysicalTableMapCustomSqlColumnOutput) ToGetDataSetPhysicalTableMapCustomSqlColumnOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapCustomSqlColumnOutput {
	return o
}

func (o GetDataSetPhysicalTableMapCustomSqlColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetPhysicalTableMapCustomSqlColumn) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetDataSetPhysicalTableMapCustomSqlColumnOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetPhysicalTableMapCustomSqlColumn) string { return v.Type }).(pulumi.StringOutput)
}

type GetDataSetPhysicalTableMapCustomSqlColumnArrayOutput struct{ *pulumi.OutputState }

func (GetDataSetPhysicalTableMapCustomSqlColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetPhysicalTableMapCustomSqlColumn)(nil)).Elem()
}

func (o GetDataSetPhysicalTableMapCustomSqlColumnArrayOutput) ToGetDataSetPhysicalTableMapCustomSqlColumnArrayOutput() GetDataSetPhysicalTableMapCustomSqlColumnArrayOutput {
	return o
}

func (o GetDataSetPhysicalTableMapCustomSqlColumnArrayOutput) ToGetDataSetPhysicalTableMapCustomSqlColumnArrayOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapCustomSqlColumnArrayOutput {
	return o
}

func (o GetDataSetPhysicalTableMapCustomSqlColumnArrayOutput) Index(i pulumi.IntInput) GetDataSetPhysicalTableMapCustomSqlColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataSetPhysicalTableMapCustomSqlColumn {
		return vs[0].([]GetDataSetPhysicalTableMapCustomSqlColumn)[vs[1].(int)]
	}).(GetDataSetPhysicalTableMapCustomSqlColumnOutput)
}

type GetDataSetPhysicalTableMapRelationalTable struct {
	Catalog       string                                                 `pulumi:"catalog"`
	DataSourceArn string                                                 `pulumi:"dataSourceArn"`
	InputColumns  []GetDataSetPhysicalTableMapRelationalTableInputColumn `pulumi:"inputColumns"`
	Name          string                                                 `pulumi:"name"`
	Schema        string                                                 `pulumi:"schema"`
}

// GetDataSetPhysicalTableMapRelationalTableInput is an input type that accepts GetDataSetPhysicalTableMapRelationalTableArgs and GetDataSetPhysicalTableMapRelationalTableOutput values.
// You can construct a concrete instance of `GetDataSetPhysicalTableMapRelationalTableInput` via:
//
//	GetDataSetPhysicalTableMapRelationalTableArgs{...}
type GetDataSetPhysicalTableMapRelationalTableInput interface {
	pulumi.Input

	ToGetDataSetPhysicalTableMapRelationalTableOutput() GetDataSetPhysicalTableMapRelationalTableOutput
	ToGetDataSetPhysicalTableMapRelationalTableOutputWithContext(context.Context) GetDataSetPhysicalTableMapRelationalTableOutput
}

type GetDataSetPhysicalTableMapRelationalTableArgs struct {
	Catalog       pulumi.StringInput                                             `pulumi:"catalog"`
	DataSourceArn pulumi.StringInput                                             `pulumi:"dataSourceArn"`
	InputColumns  GetDataSetPhysicalTableMapRelationalTableInputColumnArrayInput `pulumi:"inputColumns"`
	Name          pulumi.StringInput                                             `pulumi:"name"`
	Schema        pulumi.StringInput                                             `pulumi:"schema"`
}

func (GetDataSetPhysicalTableMapRelationalTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetPhysicalTableMapRelationalTable)(nil)).Elem()
}

func (i GetDataSetPhysicalTableMapRelationalTableArgs) ToGetDataSetPhysicalTableMapRelationalTableOutput() GetDataSetPhysicalTableMapRelationalTableOutput {
	return i.ToGetDataSetPhysicalTableMapRelationalTableOutputWithContext(context.Background())
}

func (i GetDataSetPhysicalTableMapRelationalTableArgs) ToGetDataSetPhysicalTableMapRelationalTableOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapRelationalTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetPhysicalTableMapRelationalTableOutput)
}

// GetDataSetPhysicalTableMapRelationalTableArrayInput is an input type that accepts GetDataSetPhysicalTableMapRelationalTableArray and GetDataSetPhysicalTableMapRelationalTableArrayOutput values.
// You can construct a concrete instance of `GetDataSetPhysicalTableMapRelationalTableArrayInput` via:
//
//	GetDataSetPhysicalTableMapRelationalTableArray{ GetDataSetPhysicalTableMapRelationalTableArgs{...} }
type GetDataSetPhysicalTableMapRelationalTableArrayInput interface {
	pulumi.Input

	ToGetDataSetPhysicalTableMapRelationalTableArrayOutput() GetDataSetPhysicalTableMapRelationalTableArrayOutput
	ToGetDataSetPhysicalTableMapRelationalTableArrayOutputWithContext(context.Context) GetDataSetPhysicalTableMapRelationalTableArrayOutput
}

type GetDataSetPhysicalTableMapRelationalTableArray []GetDataSetPhysicalTableMapRelationalTableInput

func (GetDataSetPhysicalTableMapRelationalTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetPhysicalTableMapRelationalTable)(nil)).Elem()
}

func (i GetDataSetPhysicalTableMapRelationalTableArray) ToGetDataSetPhysicalTableMapRelationalTableArrayOutput() GetDataSetPhysicalTableMapRelationalTableArrayOutput {
	return i.ToGetDataSetPhysicalTableMapRelationalTableArrayOutputWithContext(context.Background())
}

func (i GetDataSetPhysicalTableMapRelationalTableArray) ToGetDataSetPhysicalTableMapRelationalTableArrayOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapRelationalTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetPhysicalTableMapRelationalTableArrayOutput)
}

type GetDataSetPhysicalTableMapRelationalTableOutput struct{ *pulumi.OutputState }

func (GetDataSetPhysicalTableMapRelationalTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetPhysicalTableMapRelationalTable)(nil)).Elem()
}

func (o GetDataSetPhysicalTableMapRelationalTableOutput) ToGetDataSetPhysicalTableMapRelationalTableOutput() GetDataSetPhysicalTableMapRelationalTableOutput {
	return o
}

func (o GetDataSetPhysicalTableMapRelationalTableOutput) ToGetDataSetPhysicalTableMapRelationalTableOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapRelationalTableOutput {
	return o
}

func (o GetDataSetPhysicalTableMapRelationalTableOutput) Catalog() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetPhysicalTableMapRelationalTable) string { return v.Catalog }).(pulumi.StringOutput)
}

func (o GetDataSetPhysicalTableMapRelationalTableOutput) DataSourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetPhysicalTableMapRelationalTable) string { return v.DataSourceArn }).(pulumi.StringOutput)
}

func (o GetDataSetPhysicalTableMapRelationalTableOutput) InputColumns() GetDataSetPhysicalTableMapRelationalTableInputColumnArrayOutput {
	return o.ApplyT(func(v GetDataSetPhysicalTableMapRelationalTable) []GetDataSetPhysicalTableMapRelationalTableInputColumn {
		return v.InputColumns
	}).(GetDataSetPhysicalTableMapRelationalTableInputColumnArrayOutput)
}

func (o GetDataSetPhysicalTableMapRelationalTableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetPhysicalTableMapRelationalTable) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetDataSetPhysicalTableMapRelationalTableOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetPhysicalTableMapRelationalTable) string { return v.Schema }).(pulumi.StringOutput)
}

type GetDataSetPhysicalTableMapRelationalTableArrayOutput struct{ *pulumi.OutputState }

func (GetDataSetPhysicalTableMapRelationalTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetPhysicalTableMapRelationalTable)(nil)).Elem()
}

func (o GetDataSetPhysicalTableMapRelationalTableArrayOutput) ToGetDataSetPhysicalTableMapRelationalTableArrayOutput() GetDataSetPhysicalTableMapRelationalTableArrayOutput {
	return o
}

func (o GetDataSetPhysicalTableMapRelationalTableArrayOutput) ToGetDataSetPhysicalTableMapRelationalTableArrayOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapRelationalTableArrayOutput {
	return o
}

func (o GetDataSetPhysicalTableMapRelationalTableArrayOutput) Index(i pulumi.IntInput) GetDataSetPhysicalTableMapRelationalTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataSetPhysicalTableMapRelationalTable {
		return vs[0].([]GetDataSetPhysicalTableMapRelationalTable)[vs[1].(int)]
	}).(GetDataSetPhysicalTableMapRelationalTableOutput)
}

type GetDataSetPhysicalTableMapRelationalTableInputColumn struct {
	Name string `pulumi:"name"`
	Type string `pulumi:"type"`
}

// GetDataSetPhysicalTableMapRelationalTableInputColumnInput is an input type that accepts GetDataSetPhysicalTableMapRelationalTableInputColumnArgs and GetDataSetPhysicalTableMapRelationalTableInputColumnOutput values.
// You can construct a concrete instance of `GetDataSetPhysicalTableMapRelationalTableInputColumnInput` via:
//
//	GetDataSetPhysicalTableMapRelationalTableInputColumnArgs{...}
type GetDataSetPhysicalTableMapRelationalTableInputColumnInput interface {
	pulumi.Input

	ToGetDataSetPhysicalTableMapRelationalTableInputColumnOutput() GetDataSetPhysicalTableMapRelationalTableInputColumnOutput
	ToGetDataSetPhysicalTableMapRelationalTableInputColumnOutputWithContext(context.Context) GetDataSetPhysicalTableMapRelationalTableInputColumnOutput
}

type GetDataSetPhysicalTableMapRelationalTableInputColumnArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetDataSetPhysicalTableMapRelationalTableInputColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetPhysicalTableMapRelationalTableInputColumn)(nil)).Elem()
}

func (i GetDataSetPhysicalTableMapRelationalTableInputColumnArgs) ToGetDataSetPhysicalTableMapRelationalTableInputColumnOutput() GetDataSetPhysicalTableMapRelationalTableInputColumnOutput {
	return i.ToGetDataSetPhysicalTableMapRelationalTableInputColumnOutputWithContext(context.Background())
}

func (i GetDataSetPhysicalTableMapRelationalTableInputColumnArgs) ToGetDataSetPhysicalTableMapRelationalTableInputColumnOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapRelationalTableInputColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetPhysicalTableMapRelationalTableInputColumnOutput)
}

// GetDataSetPhysicalTableMapRelationalTableInputColumnArrayInput is an input type that accepts GetDataSetPhysicalTableMapRelationalTableInputColumnArray and GetDataSetPhysicalTableMapRelationalTableInputColumnArrayOutput values.
// You can construct a concrete instance of `GetDataSetPhysicalTableMapRelationalTableInputColumnArrayInput` via:
//
//	GetDataSetPhysicalTableMapRelationalTableInputColumnArray{ GetDataSetPhysicalTableMapRelationalTableInputColumnArgs{...} }
type GetDataSetPhysicalTableMapRelationalTableInputColumnArrayInput interface {
	pulumi.Input

	ToGetDataSetPhysicalTableMapRelationalTableInputColumnArrayOutput() GetDataSetPhysicalTableMapRelationalTableInputColumnArrayOutput
	ToGetDataSetPhysicalTableMapRelationalTableInputColumnArrayOutputWithContext(context.Context) GetDataSetPhysicalTableMapRelationalTableInputColumnArrayOutput
}

type GetDataSetPhysicalTableMapRelationalTableInputColumnArray []GetDataSetPhysicalTableMapRelationalTableInputColumnInput

func (GetDataSetPhysicalTableMapRelationalTableInputColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetPhysicalTableMapRelationalTableInputColumn)(nil)).Elem()
}

func (i GetDataSetPhysicalTableMapRelationalTableInputColumnArray) ToGetDataSetPhysicalTableMapRelationalTableInputColumnArrayOutput() GetDataSetPhysicalTableMapRelationalTableInputColumnArrayOutput {
	return i.ToGetDataSetPhysicalTableMapRelationalTableInputColumnArrayOutputWithContext(context.Background())
}

func (i GetDataSetPhysicalTableMapRelationalTableInputColumnArray) ToGetDataSetPhysicalTableMapRelationalTableInputColumnArrayOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapRelationalTableInputColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetPhysicalTableMapRelationalTableInputColumnArrayOutput)
}

type GetDataSetPhysicalTableMapRelationalTableInputColumnOutput struct{ *pulumi.OutputState }

func (GetDataSetPhysicalTableMapRelationalTableInputColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetPhysicalTableMapRelationalTableInputColumn)(nil)).Elem()
}

func (o GetDataSetPhysicalTableMapRelationalTableInputColumnOutput) ToGetDataSetPhysicalTableMapRelationalTableInputColumnOutput() GetDataSetPhysicalTableMapRelationalTableInputColumnOutput {
	return o
}

func (o GetDataSetPhysicalTableMapRelationalTableInputColumnOutput) ToGetDataSetPhysicalTableMapRelationalTableInputColumnOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapRelationalTableInputColumnOutput {
	return o
}

func (o GetDataSetPhysicalTableMapRelationalTableInputColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetPhysicalTableMapRelationalTableInputColumn) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetDataSetPhysicalTableMapRelationalTableInputColumnOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetPhysicalTableMapRelationalTableInputColumn) string { return v.Type }).(pulumi.StringOutput)
}

type GetDataSetPhysicalTableMapRelationalTableInputColumnArrayOutput struct{ *pulumi.OutputState }

func (GetDataSetPhysicalTableMapRelationalTableInputColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetPhysicalTableMapRelationalTableInputColumn)(nil)).Elem()
}

func (o GetDataSetPhysicalTableMapRelationalTableInputColumnArrayOutput) ToGetDataSetPhysicalTableMapRelationalTableInputColumnArrayOutput() GetDataSetPhysicalTableMapRelationalTableInputColumnArrayOutput {
	return o
}

func (o GetDataSetPhysicalTableMapRelationalTableInputColumnArrayOutput) ToGetDataSetPhysicalTableMapRelationalTableInputColumnArrayOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapRelationalTableInputColumnArrayOutput {
	return o
}

func (o GetDataSetPhysicalTableMapRelationalTableInputColumnArrayOutput) Index(i pulumi.IntInput) GetDataSetPhysicalTableMapRelationalTableInputColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataSetPhysicalTableMapRelationalTableInputColumn {
		return vs[0].([]GetDataSetPhysicalTableMapRelationalTableInputColumn)[vs[1].(int)]
	}).(GetDataSetPhysicalTableMapRelationalTableInputColumnOutput)
}

type GetDataSetPhysicalTableMapS3Source struct {
	DataSourceArn  string                                            `pulumi:"dataSourceArn"`
	InputColumns   []GetDataSetPhysicalTableMapS3SourceInputColumn   `pulumi:"inputColumns"`
	UploadSettings []GetDataSetPhysicalTableMapS3SourceUploadSetting `pulumi:"uploadSettings"`
}

// GetDataSetPhysicalTableMapS3SourceInput is an input type that accepts GetDataSetPhysicalTableMapS3SourceArgs and GetDataSetPhysicalTableMapS3SourceOutput values.
// You can construct a concrete instance of `GetDataSetPhysicalTableMapS3SourceInput` via:
//
//	GetDataSetPhysicalTableMapS3SourceArgs{...}
type GetDataSetPhysicalTableMapS3SourceInput interface {
	pulumi.Input

	ToGetDataSetPhysicalTableMapS3SourceOutput() GetDataSetPhysicalTableMapS3SourceOutput
	ToGetDataSetPhysicalTableMapS3SourceOutputWithContext(context.Context) GetDataSetPhysicalTableMapS3SourceOutput
}

type GetDataSetPhysicalTableMapS3SourceArgs struct {
	DataSourceArn  pulumi.StringInput                                        `pulumi:"dataSourceArn"`
	InputColumns   GetDataSetPhysicalTableMapS3SourceInputColumnArrayInput   `pulumi:"inputColumns"`
	UploadSettings GetDataSetPhysicalTableMapS3SourceUploadSettingArrayInput `pulumi:"uploadSettings"`
}

func (GetDataSetPhysicalTableMapS3SourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetPhysicalTableMapS3Source)(nil)).Elem()
}

func (i GetDataSetPhysicalTableMapS3SourceArgs) ToGetDataSetPhysicalTableMapS3SourceOutput() GetDataSetPhysicalTableMapS3SourceOutput {
	return i.ToGetDataSetPhysicalTableMapS3SourceOutputWithContext(context.Background())
}

func (i GetDataSetPhysicalTableMapS3SourceArgs) ToGetDataSetPhysicalTableMapS3SourceOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapS3SourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetPhysicalTableMapS3SourceOutput)
}

// GetDataSetPhysicalTableMapS3SourceArrayInput is an input type that accepts GetDataSetPhysicalTableMapS3SourceArray and GetDataSetPhysicalTableMapS3SourceArrayOutput values.
// You can construct a concrete instance of `GetDataSetPhysicalTableMapS3SourceArrayInput` via:
//
//	GetDataSetPhysicalTableMapS3SourceArray{ GetDataSetPhysicalTableMapS3SourceArgs{...} }
type GetDataSetPhysicalTableMapS3SourceArrayInput interface {
	pulumi.Input

	ToGetDataSetPhysicalTableMapS3SourceArrayOutput() GetDataSetPhysicalTableMapS3SourceArrayOutput
	ToGetDataSetPhysicalTableMapS3SourceArrayOutputWithContext(context.Context) GetDataSetPhysicalTableMapS3SourceArrayOutput
}

type GetDataSetPhysicalTableMapS3SourceArray []GetDataSetPhysicalTableMapS3SourceInput

func (GetDataSetPhysicalTableMapS3SourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetPhysicalTableMapS3Source)(nil)).Elem()
}

func (i GetDataSetPhysicalTableMapS3SourceArray) ToGetDataSetPhysicalTableMapS3SourceArrayOutput() GetDataSetPhysicalTableMapS3SourceArrayOutput {
	return i.ToGetDataSetPhysicalTableMapS3SourceArrayOutputWithContext(context.Background())
}

func (i GetDataSetPhysicalTableMapS3SourceArray) ToGetDataSetPhysicalTableMapS3SourceArrayOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapS3SourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetPhysicalTableMapS3SourceArrayOutput)
}

type GetDataSetPhysicalTableMapS3SourceOutput struct{ *pulumi.OutputState }

func (GetDataSetPhysicalTableMapS3SourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetPhysicalTableMapS3Source)(nil)).Elem()
}

func (o GetDataSetPhysicalTableMapS3SourceOutput) ToGetDataSetPhysicalTableMapS3SourceOutput() GetDataSetPhysicalTableMapS3SourceOutput {
	return o
}

func (o GetDataSetPhysicalTableMapS3SourceOutput) ToGetDataSetPhysicalTableMapS3SourceOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapS3SourceOutput {
	return o
}

func (o GetDataSetPhysicalTableMapS3SourceOutput) DataSourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetPhysicalTableMapS3Source) string { return v.DataSourceArn }).(pulumi.StringOutput)
}

func (o GetDataSetPhysicalTableMapS3SourceOutput) InputColumns() GetDataSetPhysicalTableMapS3SourceInputColumnArrayOutput {
	return o.ApplyT(func(v GetDataSetPhysicalTableMapS3Source) []GetDataSetPhysicalTableMapS3SourceInputColumn {
		return v.InputColumns
	}).(GetDataSetPhysicalTableMapS3SourceInputColumnArrayOutput)
}

func (o GetDataSetPhysicalTableMapS3SourceOutput) UploadSettings() GetDataSetPhysicalTableMapS3SourceUploadSettingArrayOutput {
	return o.ApplyT(func(v GetDataSetPhysicalTableMapS3Source) []GetDataSetPhysicalTableMapS3SourceUploadSetting {
		return v.UploadSettings
	}).(GetDataSetPhysicalTableMapS3SourceUploadSettingArrayOutput)
}

type GetDataSetPhysicalTableMapS3SourceArrayOutput struct{ *pulumi.OutputState }

func (GetDataSetPhysicalTableMapS3SourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetPhysicalTableMapS3Source)(nil)).Elem()
}

func (o GetDataSetPhysicalTableMapS3SourceArrayOutput) ToGetDataSetPhysicalTableMapS3SourceArrayOutput() GetDataSetPhysicalTableMapS3SourceArrayOutput {
	return o
}

func (o GetDataSetPhysicalTableMapS3SourceArrayOutput) ToGetDataSetPhysicalTableMapS3SourceArrayOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapS3SourceArrayOutput {
	return o
}

func (o GetDataSetPhysicalTableMapS3SourceArrayOutput) Index(i pulumi.IntInput) GetDataSetPhysicalTableMapS3SourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataSetPhysicalTableMapS3Source {
		return vs[0].([]GetDataSetPhysicalTableMapS3Source)[vs[1].(int)]
	}).(GetDataSetPhysicalTableMapS3SourceOutput)
}

type GetDataSetPhysicalTableMapS3SourceInputColumn struct {
	Name string `pulumi:"name"`
	Type string `pulumi:"type"`
}

// GetDataSetPhysicalTableMapS3SourceInputColumnInput is an input type that accepts GetDataSetPhysicalTableMapS3SourceInputColumnArgs and GetDataSetPhysicalTableMapS3SourceInputColumnOutput values.
// You can construct a concrete instance of `GetDataSetPhysicalTableMapS3SourceInputColumnInput` via:
//
//	GetDataSetPhysicalTableMapS3SourceInputColumnArgs{...}
type GetDataSetPhysicalTableMapS3SourceInputColumnInput interface {
	pulumi.Input

	ToGetDataSetPhysicalTableMapS3SourceInputColumnOutput() GetDataSetPhysicalTableMapS3SourceInputColumnOutput
	ToGetDataSetPhysicalTableMapS3SourceInputColumnOutputWithContext(context.Context) GetDataSetPhysicalTableMapS3SourceInputColumnOutput
}

type GetDataSetPhysicalTableMapS3SourceInputColumnArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetDataSetPhysicalTableMapS3SourceInputColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetPhysicalTableMapS3SourceInputColumn)(nil)).Elem()
}

func (i GetDataSetPhysicalTableMapS3SourceInputColumnArgs) ToGetDataSetPhysicalTableMapS3SourceInputColumnOutput() GetDataSetPhysicalTableMapS3SourceInputColumnOutput {
	return i.ToGetDataSetPhysicalTableMapS3SourceInputColumnOutputWithContext(context.Background())
}

func (i GetDataSetPhysicalTableMapS3SourceInputColumnArgs) ToGetDataSetPhysicalTableMapS3SourceInputColumnOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapS3SourceInputColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetPhysicalTableMapS3SourceInputColumnOutput)
}

// GetDataSetPhysicalTableMapS3SourceInputColumnArrayInput is an input type that accepts GetDataSetPhysicalTableMapS3SourceInputColumnArray and GetDataSetPhysicalTableMapS3SourceInputColumnArrayOutput values.
// You can construct a concrete instance of `GetDataSetPhysicalTableMapS3SourceInputColumnArrayInput` via:
//
//	GetDataSetPhysicalTableMapS3SourceInputColumnArray{ GetDataSetPhysicalTableMapS3SourceInputColumnArgs{...} }
type GetDataSetPhysicalTableMapS3SourceInputColumnArrayInput interface {
	pulumi.Input

	ToGetDataSetPhysicalTableMapS3SourceInputColumnArrayOutput() GetDataSetPhysicalTableMapS3SourceInputColumnArrayOutput
	ToGetDataSetPhysicalTableMapS3SourceInputColumnArrayOutputWithContext(context.Context) GetDataSetPhysicalTableMapS3SourceInputColumnArrayOutput
}

type GetDataSetPhysicalTableMapS3SourceInputColumnArray []GetDataSetPhysicalTableMapS3SourceInputColumnInput

func (GetDataSetPhysicalTableMapS3SourceInputColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetPhysicalTableMapS3SourceInputColumn)(nil)).Elem()
}

func (i GetDataSetPhysicalTableMapS3SourceInputColumnArray) ToGetDataSetPhysicalTableMapS3SourceInputColumnArrayOutput() GetDataSetPhysicalTableMapS3SourceInputColumnArrayOutput {
	return i.ToGetDataSetPhysicalTableMapS3SourceInputColumnArrayOutputWithContext(context.Background())
}

func (i GetDataSetPhysicalTableMapS3SourceInputColumnArray) ToGetDataSetPhysicalTableMapS3SourceInputColumnArrayOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapS3SourceInputColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetPhysicalTableMapS3SourceInputColumnArrayOutput)
}

type GetDataSetPhysicalTableMapS3SourceInputColumnOutput struct{ *pulumi.OutputState }

func (GetDataSetPhysicalTableMapS3SourceInputColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetPhysicalTableMapS3SourceInputColumn)(nil)).Elem()
}

func (o GetDataSetPhysicalTableMapS3SourceInputColumnOutput) ToGetDataSetPhysicalTableMapS3SourceInputColumnOutput() GetDataSetPhysicalTableMapS3SourceInputColumnOutput {
	return o
}

func (o GetDataSetPhysicalTableMapS3SourceInputColumnOutput) ToGetDataSetPhysicalTableMapS3SourceInputColumnOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapS3SourceInputColumnOutput {
	return o
}

func (o GetDataSetPhysicalTableMapS3SourceInputColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetPhysicalTableMapS3SourceInputColumn) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetDataSetPhysicalTableMapS3SourceInputColumnOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetPhysicalTableMapS3SourceInputColumn) string { return v.Type }).(pulumi.StringOutput)
}

type GetDataSetPhysicalTableMapS3SourceInputColumnArrayOutput struct{ *pulumi.OutputState }

func (GetDataSetPhysicalTableMapS3SourceInputColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetPhysicalTableMapS3SourceInputColumn)(nil)).Elem()
}

func (o GetDataSetPhysicalTableMapS3SourceInputColumnArrayOutput) ToGetDataSetPhysicalTableMapS3SourceInputColumnArrayOutput() GetDataSetPhysicalTableMapS3SourceInputColumnArrayOutput {
	return o
}

func (o GetDataSetPhysicalTableMapS3SourceInputColumnArrayOutput) ToGetDataSetPhysicalTableMapS3SourceInputColumnArrayOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapS3SourceInputColumnArrayOutput {
	return o
}

func (o GetDataSetPhysicalTableMapS3SourceInputColumnArrayOutput) Index(i pulumi.IntInput) GetDataSetPhysicalTableMapS3SourceInputColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataSetPhysicalTableMapS3SourceInputColumn {
		return vs[0].([]GetDataSetPhysicalTableMapS3SourceInputColumn)[vs[1].(int)]
	}).(GetDataSetPhysicalTableMapS3SourceInputColumnOutput)
}

type GetDataSetPhysicalTableMapS3SourceUploadSetting struct {
	ContainsHeader bool   `pulumi:"containsHeader"`
	Delimiter      string `pulumi:"delimiter"`
	Format         string `pulumi:"format"`
	StartFromRow   int    `pulumi:"startFromRow"`
	TextQualifier  string `pulumi:"textQualifier"`
}

// GetDataSetPhysicalTableMapS3SourceUploadSettingInput is an input type that accepts GetDataSetPhysicalTableMapS3SourceUploadSettingArgs and GetDataSetPhysicalTableMapS3SourceUploadSettingOutput values.
// You can construct a concrete instance of `GetDataSetPhysicalTableMapS3SourceUploadSettingInput` via:
//
//	GetDataSetPhysicalTableMapS3SourceUploadSettingArgs{...}
type GetDataSetPhysicalTableMapS3SourceUploadSettingInput interface {
	pulumi.Input

	ToGetDataSetPhysicalTableMapS3SourceUploadSettingOutput() GetDataSetPhysicalTableMapS3SourceUploadSettingOutput
	ToGetDataSetPhysicalTableMapS3SourceUploadSettingOutputWithContext(context.Context) GetDataSetPhysicalTableMapS3SourceUploadSettingOutput
}

type GetDataSetPhysicalTableMapS3SourceUploadSettingArgs struct {
	ContainsHeader pulumi.BoolInput   `pulumi:"containsHeader"`
	Delimiter      pulumi.StringInput `pulumi:"delimiter"`
	Format         pulumi.StringInput `pulumi:"format"`
	StartFromRow   pulumi.IntInput    `pulumi:"startFromRow"`
	TextQualifier  pulumi.StringInput `pulumi:"textQualifier"`
}

func (GetDataSetPhysicalTableMapS3SourceUploadSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetPhysicalTableMapS3SourceUploadSetting)(nil)).Elem()
}

func (i GetDataSetPhysicalTableMapS3SourceUploadSettingArgs) ToGetDataSetPhysicalTableMapS3SourceUploadSettingOutput() GetDataSetPhysicalTableMapS3SourceUploadSettingOutput {
	return i.ToGetDataSetPhysicalTableMapS3SourceUploadSettingOutputWithContext(context.Background())
}

func (i GetDataSetPhysicalTableMapS3SourceUploadSettingArgs) ToGetDataSetPhysicalTableMapS3SourceUploadSettingOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapS3SourceUploadSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetPhysicalTableMapS3SourceUploadSettingOutput)
}

// GetDataSetPhysicalTableMapS3SourceUploadSettingArrayInput is an input type that accepts GetDataSetPhysicalTableMapS3SourceUploadSettingArray and GetDataSetPhysicalTableMapS3SourceUploadSettingArrayOutput values.
// You can construct a concrete instance of `GetDataSetPhysicalTableMapS3SourceUploadSettingArrayInput` via:
//
//	GetDataSetPhysicalTableMapS3SourceUploadSettingArray{ GetDataSetPhysicalTableMapS3SourceUploadSettingArgs{...} }
type GetDataSetPhysicalTableMapS3SourceUploadSettingArrayInput interface {
	pulumi.Input

	ToGetDataSetPhysicalTableMapS3SourceUploadSettingArrayOutput() GetDataSetPhysicalTableMapS3SourceUploadSettingArrayOutput
	ToGetDataSetPhysicalTableMapS3SourceUploadSettingArrayOutputWithContext(context.Context) GetDataSetPhysicalTableMapS3SourceUploadSettingArrayOutput
}

type GetDataSetPhysicalTableMapS3SourceUploadSettingArray []GetDataSetPhysicalTableMapS3SourceUploadSettingInput

func (GetDataSetPhysicalTableMapS3SourceUploadSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetPhysicalTableMapS3SourceUploadSetting)(nil)).Elem()
}

func (i GetDataSetPhysicalTableMapS3SourceUploadSettingArray) ToGetDataSetPhysicalTableMapS3SourceUploadSettingArrayOutput() GetDataSetPhysicalTableMapS3SourceUploadSettingArrayOutput {
	return i.ToGetDataSetPhysicalTableMapS3SourceUploadSettingArrayOutputWithContext(context.Background())
}

func (i GetDataSetPhysicalTableMapS3SourceUploadSettingArray) ToGetDataSetPhysicalTableMapS3SourceUploadSettingArrayOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapS3SourceUploadSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetPhysicalTableMapS3SourceUploadSettingArrayOutput)
}

type GetDataSetPhysicalTableMapS3SourceUploadSettingOutput struct{ *pulumi.OutputState }

func (GetDataSetPhysicalTableMapS3SourceUploadSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetPhysicalTableMapS3SourceUploadSetting)(nil)).Elem()
}

func (o GetDataSetPhysicalTableMapS3SourceUploadSettingOutput) ToGetDataSetPhysicalTableMapS3SourceUploadSettingOutput() GetDataSetPhysicalTableMapS3SourceUploadSettingOutput {
	return o
}

func (o GetDataSetPhysicalTableMapS3SourceUploadSettingOutput) ToGetDataSetPhysicalTableMapS3SourceUploadSettingOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapS3SourceUploadSettingOutput {
	return o
}

func (o GetDataSetPhysicalTableMapS3SourceUploadSettingOutput) ContainsHeader() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDataSetPhysicalTableMapS3SourceUploadSetting) bool { return v.ContainsHeader }).(pulumi.BoolOutput)
}

func (o GetDataSetPhysicalTableMapS3SourceUploadSettingOutput) Delimiter() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetPhysicalTableMapS3SourceUploadSetting) string { return v.Delimiter }).(pulumi.StringOutput)
}

func (o GetDataSetPhysicalTableMapS3SourceUploadSettingOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetPhysicalTableMapS3SourceUploadSetting) string { return v.Format }).(pulumi.StringOutput)
}

func (o GetDataSetPhysicalTableMapS3SourceUploadSettingOutput) StartFromRow() pulumi.IntOutput {
	return o.ApplyT(func(v GetDataSetPhysicalTableMapS3SourceUploadSetting) int { return v.StartFromRow }).(pulumi.IntOutput)
}

func (o GetDataSetPhysicalTableMapS3SourceUploadSettingOutput) TextQualifier() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetPhysicalTableMapS3SourceUploadSetting) string { return v.TextQualifier }).(pulumi.StringOutput)
}

type GetDataSetPhysicalTableMapS3SourceUploadSettingArrayOutput struct{ *pulumi.OutputState }

func (GetDataSetPhysicalTableMapS3SourceUploadSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetPhysicalTableMapS3SourceUploadSetting)(nil)).Elem()
}

func (o GetDataSetPhysicalTableMapS3SourceUploadSettingArrayOutput) ToGetDataSetPhysicalTableMapS3SourceUploadSettingArrayOutput() GetDataSetPhysicalTableMapS3SourceUploadSettingArrayOutput {
	return o
}

func (o GetDataSetPhysicalTableMapS3SourceUploadSettingArrayOutput) ToGetDataSetPhysicalTableMapS3SourceUploadSettingArrayOutputWithContext(ctx context.Context) GetDataSetPhysicalTableMapS3SourceUploadSettingArrayOutput {
	return o
}

func (o GetDataSetPhysicalTableMapS3SourceUploadSettingArrayOutput) Index(i pulumi.IntInput) GetDataSetPhysicalTableMapS3SourceUploadSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataSetPhysicalTableMapS3SourceUploadSetting {
		return vs[0].([]GetDataSetPhysicalTableMapS3SourceUploadSetting)[vs[1].(int)]
	}).(GetDataSetPhysicalTableMapS3SourceUploadSettingOutput)
}

type GetDataSetRowLevelPermissionDataSet struct {
	Arn              string `pulumi:"arn"`
	FormatVersion    string `pulumi:"formatVersion"`
	Namespace        string `pulumi:"namespace"`
	PermissionPolicy string `pulumi:"permissionPolicy"`
	Status           string `pulumi:"status"`
}

// GetDataSetRowLevelPermissionDataSetInput is an input type that accepts GetDataSetRowLevelPermissionDataSetArgs and GetDataSetRowLevelPermissionDataSetOutput values.
// You can construct a concrete instance of `GetDataSetRowLevelPermissionDataSetInput` via:
//
//	GetDataSetRowLevelPermissionDataSetArgs{...}
type GetDataSetRowLevelPermissionDataSetInput interface {
	pulumi.Input

	ToGetDataSetRowLevelPermissionDataSetOutput() GetDataSetRowLevelPermissionDataSetOutput
	ToGetDataSetRowLevelPermissionDataSetOutputWithContext(context.Context) GetDataSetRowLevelPermissionDataSetOutput
}

type GetDataSetRowLevelPermissionDataSetArgs struct {
	Arn              pulumi.StringInput `pulumi:"arn"`
	FormatVersion    pulumi.StringInput `pulumi:"formatVersion"`
	Namespace        pulumi.StringInput `pulumi:"namespace"`
	PermissionPolicy pulumi.StringInput `pulumi:"permissionPolicy"`
	Status           pulumi.StringInput `pulumi:"status"`
}

func (GetDataSetRowLevelPermissionDataSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetRowLevelPermissionDataSet)(nil)).Elem()
}

func (i GetDataSetRowLevelPermissionDataSetArgs) ToGetDataSetRowLevelPermissionDataSetOutput() GetDataSetRowLevelPermissionDataSetOutput {
	return i.ToGetDataSetRowLevelPermissionDataSetOutputWithContext(context.Background())
}

func (i GetDataSetRowLevelPermissionDataSetArgs) ToGetDataSetRowLevelPermissionDataSetOutputWithContext(ctx context.Context) GetDataSetRowLevelPermissionDataSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetRowLevelPermissionDataSetOutput)
}

// GetDataSetRowLevelPermissionDataSetArrayInput is an input type that accepts GetDataSetRowLevelPermissionDataSetArray and GetDataSetRowLevelPermissionDataSetArrayOutput values.
// You can construct a concrete instance of `GetDataSetRowLevelPermissionDataSetArrayInput` via:
//
//	GetDataSetRowLevelPermissionDataSetArray{ GetDataSetRowLevelPermissionDataSetArgs{...} }
type GetDataSetRowLevelPermissionDataSetArrayInput interface {
	pulumi.Input

	ToGetDataSetRowLevelPermissionDataSetArrayOutput() GetDataSetRowLevelPermissionDataSetArrayOutput
	ToGetDataSetRowLevelPermissionDataSetArrayOutputWithContext(context.Context) GetDataSetRowLevelPermissionDataSetArrayOutput
}

type GetDataSetRowLevelPermissionDataSetArray []GetDataSetRowLevelPermissionDataSetInput

func (GetDataSetRowLevelPermissionDataSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetRowLevelPermissionDataSet)(nil)).Elem()
}

func (i GetDataSetRowLevelPermissionDataSetArray) ToGetDataSetRowLevelPermissionDataSetArrayOutput() GetDataSetRowLevelPermissionDataSetArrayOutput {
	return i.ToGetDataSetRowLevelPermissionDataSetArrayOutputWithContext(context.Background())
}

func (i GetDataSetRowLevelPermissionDataSetArray) ToGetDataSetRowLevelPermissionDataSetArrayOutputWithContext(ctx context.Context) GetDataSetRowLevelPermissionDataSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetRowLevelPermissionDataSetArrayOutput)
}

type GetDataSetRowLevelPermissionDataSetOutput struct{ *pulumi.OutputState }

func (GetDataSetRowLevelPermissionDataSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetRowLevelPermissionDataSet)(nil)).Elem()
}

func (o GetDataSetRowLevelPermissionDataSetOutput) ToGetDataSetRowLevelPermissionDataSetOutput() GetDataSetRowLevelPermissionDataSetOutput {
	return o
}

func (o GetDataSetRowLevelPermissionDataSetOutput) ToGetDataSetRowLevelPermissionDataSetOutputWithContext(ctx context.Context) GetDataSetRowLevelPermissionDataSetOutput {
	return o
}

func (o GetDataSetRowLevelPermissionDataSetOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetRowLevelPermissionDataSet) string { return v.Arn }).(pulumi.StringOutput)
}

func (o GetDataSetRowLevelPermissionDataSetOutput) FormatVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetRowLevelPermissionDataSet) string { return v.FormatVersion }).(pulumi.StringOutput)
}

func (o GetDataSetRowLevelPermissionDataSetOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetRowLevelPermissionDataSet) string { return v.Namespace }).(pulumi.StringOutput)
}

func (o GetDataSetRowLevelPermissionDataSetOutput) PermissionPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetRowLevelPermissionDataSet) string { return v.PermissionPolicy }).(pulumi.StringOutput)
}

func (o GetDataSetRowLevelPermissionDataSetOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetRowLevelPermissionDataSet) string { return v.Status }).(pulumi.StringOutput)
}

type GetDataSetRowLevelPermissionDataSetArrayOutput struct{ *pulumi.OutputState }

func (GetDataSetRowLevelPermissionDataSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetRowLevelPermissionDataSet)(nil)).Elem()
}

func (o GetDataSetRowLevelPermissionDataSetArrayOutput) ToGetDataSetRowLevelPermissionDataSetArrayOutput() GetDataSetRowLevelPermissionDataSetArrayOutput {
	return o
}

func (o GetDataSetRowLevelPermissionDataSetArrayOutput) ToGetDataSetRowLevelPermissionDataSetArrayOutputWithContext(ctx context.Context) GetDataSetRowLevelPermissionDataSetArrayOutput {
	return o
}

func (o GetDataSetRowLevelPermissionDataSetArrayOutput) Index(i pulumi.IntInput) GetDataSetRowLevelPermissionDataSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataSetRowLevelPermissionDataSet {
		return vs[0].([]GetDataSetRowLevelPermissionDataSet)[vs[1].(int)]
	}).(GetDataSetRowLevelPermissionDataSetOutput)
}

type GetDataSetRowLevelPermissionTagConfiguration struct {
	Status   string                                                `pulumi:"status"`
	TagRules []GetDataSetRowLevelPermissionTagConfigurationTagRule `pulumi:"tagRules"`
}

// GetDataSetRowLevelPermissionTagConfigurationInput is an input type that accepts GetDataSetRowLevelPermissionTagConfigurationArgs and GetDataSetRowLevelPermissionTagConfigurationOutput values.
// You can construct a concrete instance of `GetDataSetRowLevelPermissionTagConfigurationInput` via:
//
//	GetDataSetRowLevelPermissionTagConfigurationArgs{...}
type GetDataSetRowLevelPermissionTagConfigurationInput interface {
	pulumi.Input

	ToGetDataSetRowLevelPermissionTagConfigurationOutput() GetDataSetRowLevelPermissionTagConfigurationOutput
	ToGetDataSetRowLevelPermissionTagConfigurationOutputWithContext(context.Context) GetDataSetRowLevelPermissionTagConfigurationOutput
}

type GetDataSetRowLevelPermissionTagConfigurationArgs struct {
	Status   pulumi.StringInput                                            `pulumi:"status"`
	TagRules GetDataSetRowLevelPermissionTagConfigurationTagRuleArrayInput `pulumi:"tagRules"`
}

func (GetDataSetRowLevelPermissionTagConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetRowLevelPermissionTagConfiguration)(nil)).Elem()
}

func (i GetDataSetRowLevelPermissionTagConfigurationArgs) ToGetDataSetRowLevelPermissionTagConfigurationOutput() GetDataSetRowLevelPermissionTagConfigurationOutput {
	return i.ToGetDataSetRowLevelPermissionTagConfigurationOutputWithContext(context.Background())
}

func (i GetDataSetRowLevelPermissionTagConfigurationArgs) ToGetDataSetRowLevelPermissionTagConfigurationOutputWithContext(ctx context.Context) GetDataSetRowLevelPermissionTagConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetRowLevelPermissionTagConfigurationOutput)
}

// GetDataSetRowLevelPermissionTagConfigurationArrayInput is an input type that accepts GetDataSetRowLevelPermissionTagConfigurationArray and GetDataSetRowLevelPermissionTagConfigurationArrayOutput values.
// You can construct a concrete instance of `GetDataSetRowLevelPermissionTagConfigurationArrayInput` via:
//
//	GetDataSetRowLevelPermissionTagConfigurationArray{ GetDataSetRowLevelPermissionTagConfigurationArgs{...} }
type GetDataSetRowLevelPermissionTagConfigurationArrayInput interface {
	pulumi.Input

	ToGetDataSetRowLevelPermissionTagConfigurationArrayOutput() GetDataSetRowLevelPermissionTagConfigurationArrayOutput
	ToGetDataSetRowLevelPermissionTagConfigurationArrayOutputWithContext(context.Context) GetDataSetRowLevelPermissionTagConfigurationArrayOutput
}

type GetDataSetRowLevelPermissionTagConfigurationArray []GetDataSetRowLevelPermissionTagConfigurationInput

func (GetDataSetRowLevelPermissionTagConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetRowLevelPermissionTagConfiguration)(nil)).Elem()
}

func (i GetDataSetRowLevelPermissionTagConfigurationArray) ToGetDataSetRowLevelPermissionTagConfigurationArrayOutput() GetDataSetRowLevelPermissionTagConfigurationArrayOutput {
	return i.ToGetDataSetRowLevelPermissionTagConfigurationArrayOutputWithContext(context.Background())
}

func (i GetDataSetRowLevelPermissionTagConfigurationArray) ToGetDataSetRowLevelPermissionTagConfigurationArrayOutputWithContext(ctx context.Context) GetDataSetRowLevelPermissionTagConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetRowLevelPermissionTagConfigurationArrayOutput)
}

type GetDataSetRowLevelPermissionTagConfigurationOutput struct{ *pulumi.OutputState }

func (GetDataSetRowLevelPermissionTagConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetRowLevelPermissionTagConfiguration)(nil)).Elem()
}

func (o GetDataSetRowLevelPermissionTagConfigurationOutput) ToGetDataSetRowLevelPermissionTagConfigurationOutput() GetDataSetRowLevelPermissionTagConfigurationOutput {
	return o
}

func (o GetDataSetRowLevelPermissionTagConfigurationOutput) ToGetDataSetRowLevelPermissionTagConfigurationOutputWithContext(ctx context.Context) GetDataSetRowLevelPermissionTagConfigurationOutput {
	return o
}

func (o GetDataSetRowLevelPermissionTagConfigurationOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetRowLevelPermissionTagConfiguration) string { return v.Status }).(pulumi.StringOutput)
}

func (o GetDataSetRowLevelPermissionTagConfigurationOutput) TagRules() GetDataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput {
	return o.ApplyT(func(v GetDataSetRowLevelPermissionTagConfiguration) []GetDataSetRowLevelPermissionTagConfigurationTagRule {
		return v.TagRules
	}).(GetDataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput)
}

type GetDataSetRowLevelPermissionTagConfigurationArrayOutput struct{ *pulumi.OutputState }

func (GetDataSetRowLevelPermissionTagConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetRowLevelPermissionTagConfiguration)(nil)).Elem()
}

func (o GetDataSetRowLevelPermissionTagConfigurationArrayOutput) ToGetDataSetRowLevelPermissionTagConfigurationArrayOutput() GetDataSetRowLevelPermissionTagConfigurationArrayOutput {
	return o
}

func (o GetDataSetRowLevelPermissionTagConfigurationArrayOutput) ToGetDataSetRowLevelPermissionTagConfigurationArrayOutputWithContext(ctx context.Context) GetDataSetRowLevelPermissionTagConfigurationArrayOutput {
	return o
}

func (o GetDataSetRowLevelPermissionTagConfigurationArrayOutput) Index(i pulumi.IntInput) GetDataSetRowLevelPermissionTagConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataSetRowLevelPermissionTagConfiguration {
		return vs[0].([]GetDataSetRowLevelPermissionTagConfiguration)[vs[1].(int)]
	}).(GetDataSetRowLevelPermissionTagConfigurationOutput)
}

type GetDataSetRowLevelPermissionTagConfigurationTagRule struct {
	ColumnName             string `pulumi:"columnName"`
	MatchAllValue          string `pulumi:"matchAllValue"`
	TagKey                 string `pulumi:"tagKey"`
	TagMultiValueDelimiter string `pulumi:"tagMultiValueDelimiter"`
}

// GetDataSetRowLevelPermissionTagConfigurationTagRuleInput is an input type that accepts GetDataSetRowLevelPermissionTagConfigurationTagRuleArgs and GetDataSetRowLevelPermissionTagConfigurationTagRuleOutput values.
// You can construct a concrete instance of `GetDataSetRowLevelPermissionTagConfigurationTagRuleInput` via:
//
//	GetDataSetRowLevelPermissionTagConfigurationTagRuleArgs{...}
type GetDataSetRowLevelPermissionTagConfigurationTagRuleInput interface {
	pulumi.Input

	ToGetDataSetRowLevelPermissionTagConfigurationTagRuleOutput() GetDataSetRowLevelPermissionTagConfigurationTagRuleOutput
	ToGetDataSetRowLevelPermissionTagConfigurationTagRuleOutputWithContext(context.Context) GetDataSetRowLevelPermissionTagConfigurationTagRuleOutput
}

type GetDataSetRowLevelPermissionTagConfigurationTagRuleArgs struct {
	ColumnName             pulumi.StringInput `pulumi:"columnName"`
	MatchAllValue          pulumi.StringInput `pulumi:"matchAllValue"`
	TagKey                 pulumi.StringInput `pulumi:"tagKey"`
	TagMultiValueDelimiter pulumi.StringInput `pulumi:"tagMultiValueDelimiter"`
}

func (GetDataSetRowLevelPermissionTagConfigurationTagRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetRowLevelPermissionTagConfigurationTagRule)(nil)).Elem()
}

func (i GetDataSetRowLevelPermissionTagConfigurationTagRuleArgs) ToGetDataSetRowLevelPermissionTagConfigurationTagRuleOutput() GetDataSetRowLevelPermissionTagConfigurationTagRuleOutput {
	return i.ToGetDataSetRowLevelPermissionTagConfigurationTagRuleOutputWithContext(context.Background())
}

func (i GetDataSetRowLevelPermissionTagConfigurationTagRuleArgs) ToGetDataSetRowLevelPermissionTagConfigurationTagRuleOutputWithContext(ctx context.Context) GetDataSetRowLevelPermissionTagConfigurationTagRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetRowLevelPermissionTagConfigurationTagRuleOutput)
}

// GetDataSetRowLevelPermissionTagConfigurationTagRuleArrayInput is an input type that accepts GetDataSetRowLevelPermissionTagConfigurationTagRuleArray and GetDataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput values.
// You can construct a concrete instance of `GetDataSetRowLevelPermissionTagConfigurationTagRuleArrayInput` via:
//
//	GetDataSetRowLevelPermissionTagConfigurationTagRuleArray{ GetDataSetRowLevelPermissionTagConfigurationTagRuleArgs{...} }
type GetDataSetRowLevelPermissionTagConfigurationTagRuleArrayInput interface {
	pulumi.Input

	ToGetDataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput() GetDataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput
	ToGetDataSetRowLevelPermissionTagConfigurationTagRuleArrayOutputWithContext(context.Context) GetDataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput
}

type GetDataSetRowLevelPermissionTagConfigurationTagRuleArray []GetDataSetRowLevelPermissionTagConfigurationTagRuleInput

func (GetDataSetRowLevelPermissionTagConfigurationTagRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetRowLevelPermissionTagConfigurationTagRule)(nil)).Elem()
}

func (i GetDataSetRowLevelPermissionTagConfigurationTagRuleArray) ToGetDataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput() GetDataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput {
	return i.ToGetDataSetRowLevelPermissionTagConfigurationTagRuleArrayOutputWithContext(context.Background())
}

func (i GetDataSetRowLevelPermissionTagConfigurationTagRuleArray) ToGetDataSetRowLevelPermissionTagConfigurationTagRuleArrayOutputWithContext(ctx context.Context) GetDataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput)
}

type GetDataSetRowLevelPermissionTagConfigurationTagRuleOutput struct{ *pulumi.OutputState }

func (GetDataSetRowLevelPermissionTagConfigurationTagRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSetRowLevelPermissionTagConfigurationTagRule)(nil)).Elem()
}

func (o GetDataSetRowLevelPermissionTagConfigurationTagRuleOutput) ToGetDataSetRowLevelPermissionTagConfigurationTagRuleOutput() GetDataSetRowLevelPermissionTagConfigurationTagRuleOutput {
	return o
}

func (o GetDataSetRowLevelPermissionTagConfigurationTagRuleOutput) ToGetDataSetRowLevelPermissionTagConfigurationTagRuleOutputWithContext(ctx context.Context) GetDataSetRowLevelPermissionTagConfigurationTagRuleOutput {
	return o
}

func (o GetDataSetRowLevelPermissionTagConfigurationTagRuleOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetRowLevelPermissionTagConfigurationTagRule) string { return v.ColumnName }).(pulumi.StringOutput)
}

func (o GetDataSetRowLevelPermissionTagConfigurationTagRuleOutput) MatchAllValue() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetRowLevelPermissionTagConfigurationTagRule) string { return v.MatchAllValue }).(pulumi.StringOutput)
}

func (o GetDataSetRowLevelPermissionTagConfigurationTagRuleOutput) TagKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetRowLevelPermissionTagConfigurationTagRule) string { return v.TagKey }).(pulumi.StringOutput)
}

func (o GetDataSetRowLevelPermissionTagConfigurationTagRuleOutput) TagMultiValueDelimiter() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSetRowLevelPermissionTagConfigurationTagRule) string { return v.TagMultiValueDelimiter }).(pulumi.StringOutput)
}

type GetDataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput struct{ *pulumi.OutputState }

func (GetDataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataSetRowLevelPermissionTagConfigurationTagRule)(nil)).Elem()
}

func (o GetDataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput) ToGetDataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput() GetDataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput {
	return o
}

func (o GetDataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput) ToGetDataSetRowLevelPermissionTagConfigurationTagRuleArrayOutputWithContext(ctx context.Context) GetDataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput {
	return o
}

func (o GetDataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput) Index(i pulumi.IntInput) GetDataSetRowLevelPermissionTagConfigurationTagRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataSetRowLevelPermissionTagConfigurationTagRule {
		return vs[0].([]GetDataSetRowLevelPermissionTagConfigurationTagRule)[vs[1].(int)]
	}).(GetDataSetRowLevelPermissionTagConfigurationTagRuleOutput)
}

type GetThemeConfiguration struct {
	// Color properties that apply to chart data colors. See data_color_palette.
	DataColorPalettes []GetThemeConfigurationDataColorPalette `pulumi:"dataColorPalettes"`
	// Display options related to sheets. See sheet.
	Sheets []GetThemeConfigurationSheet `pulumi:"sheets"`
	// Determines the typography options. See typography.
	Typographies []GetThemeConfigurationTypography `pulumi:"typographies"`
	// Color properties that apply to the UI and to charts, excluding the colors that apply to data. See ui_color_palette.
	UiColorPalettes []GetThemeConfigurationUiColorPalette `pulumi:"uiColorPalettes"`
}

// GetThemeConfigurationInput is an input type that accepts GetThemeConfigurationArgs and GetThemeConfigurationOutput values.
// You can construct a concrete instance of `GetThemeConfigurationInput` via:
//
//	GetThemeConfigurationArgs{...}
type GetThemeConfigurationInput interface {
	pulumi.Input

	ToGetThemeConfigurationOutput() GetThemeConfigurationOutput
	ToGetThemeConfigurationOutputWithContext(context.Context) GetThemeConfigurationOutput
}

type GetThemeConfigurationArgs struct {
	// Color properties that apply to chart data colors. See data_color_palette.
	DataColorPalettes GetThemeConfigurationDataColorPaletteArrayInput `pulumi:"dataColorPalettes"`
	// Display options related to sheets. See sheet.
	Sheets GetThemeConfigurationSheetArrayInput `pulumi:"sheets"`
	// Determines the typography options. See typography.
	Typographies GetThemeConfigurationTypographyArrayInput `pulumi:"typographies"`
	// Color properties that apply to the UI and to charts, excluding the colors that apply to data. See ui_color_palette.
	UiColorPalettes GetThemeConfigurationUiColorPaletteArrayInput `pulumi:"uiColorPalettes"`
}

func (GetThemeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfiguration)(nil)).Elem()
}

func (i GetThemeConfigurationArgs) ToGetThemeConfigurationOutput() GetThemeConfigurationOutput {
	return i.ToGetThemeConfigurationOutputWithContext(context.Background())
}

func (i GetThemeConfigurationArgs) ToGetThemeConfigurationOutputWithContext(ctx context.Context) GetThemeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetThemeConfigurationOutput)
}

// GetThemeConfigurationArrayInput is an input type that accepts GetThemeConfigurationArray and GetThemeConfigurationArrayOutput values.
// You can construct a concrete instance of `GetThemeConfigurationArrayInput` via:
//
//	GetThemeConfigurationArray{ GetThemeConfigurationArgs{...} }
type GetThemeConfigurationArrayInput interface {
	pulumi.Input

	ToGetThemeConfigurationArrayOutput() GetThemeConfigurationArrayOutput
	ToGetThemeConfigurationArrayOutputWithContext(context.Context) GetThemeConfigurationArrayOutput
}

type GetThemeConfigurationArray []GetThemeConfigurationInput

func (GetThemeConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetThemeConfiguration)(nil)).Elem()
}

func (i GetThemeConfigurationArray) ToGetThemeConfigurationArrayOutput() GetThemeConfigurationArrayOutput {
	return i.ToGetThemeConfigurationArrayOutputWithContext(context.Background())
}

func (i GetThemeConfigurationArray) ToGetThemeConfigurationArrayOutputWithContext(ctx context.Context) GetThemeConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetThemeConfigurationArrayOutput)
}

type GetThemeConfigurationOutput struct{ *pulumi.OutputState }

func (GetThemeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfiguration)(nil)).Elem()
}

func (o GetThemeConfigurationOutput) ToGetThemeConfigurationOutput() GetThemeConfigurationOutput {
	return o
}

func (o GetThemeConfigurationOutput) ToGetThemeConfigurationOutputWithContext(ctx context.Context) GetThemeConfigurationOutput {
	return o
}

// Color properties that apply to chart data colors. See data_color_palette.
func (o GetThemeConfigurationOutput) DataColorPalettes() GetThemeConfigurationDataColorPaletteArrayOutput {
	return o.ApplyT(func(v GetThemeConfiguration) []GetThemeConfigurationDataColorPalette { return v.DataColorPalettes }).(GetThemeConfigurationDataColorPaletteArrayOutput)
}

// Display options related to sheets. See sheet.
func (o GetThemeConfigurationOutput) Sheets() GetThemeConfigurationSheetArrayOutput {
	return o.ApplyT(func(v GetThemeConfiguration) []GetThemeConfigurationSheet { return v.Sheets }).(GetThemeConfigurationSheetArrayOutput)
}

// Determines the typography options. See typography.
func (o GetThemeConfigurationOutput) Typographies() GetThemeConfigurationTypographyArrayOutput {
	return o.ApplyT(func(v GetThemeConfiguration) []GetThemeConfigurationTypography { return v.Typographies }).(GetThemeConfigurationTypographyArrayOutput)
}

// Color properties that apply to the UI and to charts, excluding the colors that apply to data. See ui_color_palette.
func (o GetThemeConfigurationOutput) UiColorPalettes() GetThemeConfigurationUiColorPaletteArrayOutput {
	return o.ApplyT(func(v GetThemeConfiguration) []GetThemeConfigurationUiColorPalette { return v.UiColorPalettes }).(GetThemeConfigurationUiColorPaletteArrayOutput)
}

type GetThemeConfigurationArrayOutput struct{ *pulumi.OutputState }

func (GetThemeConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetThemeConfiguration)(nil)).Elem()
}

func (o GetThemeConfigurationArrayOutput) ToGetThemeConfigurationArrayOutput() GetThemeConfigurationArrayOutput {
	return o
}

func (o GetThemeConfigurationArrayOutput) ToGetThemeConfigurationArrayOutputWithContext(ctx context.Context) GetThemeConfigurationArrayOutput {
	return o
}

func (o GetThemeConfigurationArrayOutput) Index(i pulumi.IntInput) GetThemeConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetThemeConfiguration {
		return vs[0].([]GetThemeConfiguration)[vs[1].(int)]
	}).(GetThemeConfigurationOutput)
}

type GetThemeConfigurationDataColorPalette struct {
	// List of hexadecimal codes for the colors. Minimum of 8 items and maximum of 20 items.
	Colors []string `pulumi:"colors"`
	// The hexadecimal code of a color that applies to charts where a lack of data is highlighted.
	EmptyFillColor string `pulumi:"emptyFillColor"`
	// The minimum and maximum hexadecimal codes that describe a color gradient. List of exactly 2 items.
	MinMaxGradients []string `pulumi:"minMaxGradients"`
}

// GetThemeConfigurationDataColorPaletteInput is an input type that accepts GetThemeConfigurationDataColorPaletteArgs and GetThemeConfigurationDataColorPaletteOutput values.
// You can construct a concrete instance of `GetThemeConfigurationDataColorPaletteInput` via:
//
//	GetThemeConfigurationDataColorPaletteArgs{...}
type GetThemeConfigurationDataColorPaletteInput interface {
	pulumi.Input

	ToGetThemeConfigurationDataColorPaletteOutput() GetThemeConfigurationDataColorPaletteOutput
	ToGetThemeConfigurationDataColorPaletteOutputWithContext(context.Context) GetThemeConfigurationDataColorPaletteOutput
}

type GetThemeConfigurationDataColorPaletteArgs struct {
	// List of hexadecimal codes for the colors. Minimum of 8 items and maximum of 20 items.
	Colors pulumi.StringArrayInput `pulumi:"colors"`
	// The hexadecimal code of a color that applies to charts where a lack of data is highlighted.
	EmptyFillColor pulumi.StringInput `pulumi:"emptyFillColor"`
	// The minimum and maximum hexadecimal codes that describe a color gradient. List of exactly 2 items.
	MinMaxGradients pulumi.StringArrayInput `pulumi:"minMaxGradients"`
}

func (GetThemeConfigurationDataColorPaletteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationDataColorPalette)(nil)).Elem()
}

func (i GetThemeConfigurationDataColorPaletteArgs) ToGetThemeConfigurationDataColorPaletteOutput() GetThemeConfigurationDataColorPaletteOutput {
	return i.ToGetThemeConfigurationDataColorPaletteOutputWithContext(context.Background())
}

func (i GetThemeConfigurationDataColorPaletteArgs) ToGetThemeConfigurationDataColorPaletteOutputWithContext(ctx context.Context) GetThemeConfigurationDataColorPaletteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetThemeConfigurationDataColorPaletteOutput)
}

// GetThemeConfigurationDataColorPaletteArrayInput is an input type that accepts GetThemeConfigurationDataColorPaletteArray and GetThemeConfigurationDataColorPaletteArrayOutput values.
// You can construct a concrete instance of `GetThemeConfigurationDataColorPaletteArrayInput` via:
//
//	GetThemeConfigurationDataColorPaletteArray{ GetThemeConfigurationDataColorPaletteArgs{...} }
type GetThemeConfigurationDataColorPaletteArrayInput interface {
	pulumi.Input

	ToGetThemeConfigurationDataColorPaletteArrayOutput() GetThemeConfigurationDataColorPaletteArrayOutput
	ToGetThemeConfigurationDataColorPaletteArrayOutputWithContext(context.Context) GetThemeConfigurationDataColorPaletteArrayOutput
}

type GetThemeConfigurationDataColorPaletteArray []GetThemeConfigurationDataColorPaletteInput

func (GetThemeConfigurationDataColorPaletteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetThemeConfigurationDataColorPalette)(nil)).Elem()
}

func (i GetThemeConfigurationDataColorPaletteArray) ToGetThemeConfigurationDataColorPaletteArrayOutput() GetThemeConfigurationDataColorPaletteArrayOutput {
	return i.ToGetThemeConfigurationDataColorPaletteArrayOutputWithContext(context.Background())
}

func (i GetThemeConfigurationDataColorPaletteArray) ToGetThemeConfigurationDataColorPaletteArrayOutputWithContext(ctx context.Context) GetThemeConfigurationDataColorPaletteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetThemeConfigurationDataColorPaletteArrayOutput)
}

type GetThemeConfigurationDataColorPaletteOutput struct{ *pulumi.OutputState }

func (GetThemeConfigurationDataColorPaletteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationDataColorPalette)(nil)).Elem()
}

func (o GetThemeConfigurationDataColorPaletteOutput) ToGetThemeConfigurationDataColorPaletteOutput() GetThemeConfigurationDataColorPaletteOutput {
	return o
}

func (o GetThemeConfigurationDataColorPaletteOutput) ToGetThemeConfigurationDataColorPaletteOutputWithContext(ctx context.Context) GetThemeConfigurationDataColorPaletteOutput {
	return o
}

// List of hexadecimal codes for the colors. Minimum of 8 items and maximum of 20 items.
func (o GetThemeConfigurationDataColorPaletteOutput) Colors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetThemeConfigurationDataColorPalette) []string { return v.Colors }).(pulumi.StringArrayOutput)
}

// The hexadecimal code of a color that applies to charts where a lack of data is highlighted.
func (o GetThemeConfigurationDataColorPaletteOutput) EmptyFillColor() pulumi.StringOutput {
	return o.ApplyT(func(v GetThemeConfigurationDataColorPalette) string { return v.EmptyFillColor }).(pulumi.StringOutput)
}

// The minimum and maximum hexadecimal codes that describe a color gradient. List of exactly 2 items.
func (o GetThemeConfigurationDataColorPaletteOutput) MinMaxGradients() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetThemeConfigurationDataColorPalette) []string { return v.MinMaxGradients }).(pulumi.StringArrayOutput)
}

type GetThemeConfigurationDataColorPaletteArrayOutput struct{ *pulumi.OutputState }

func (GetThemeConfigurationDataColorPaletteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetThemeConfigurationDataColorPalette)(nil)).Elem()
}

func (o GetThemeConfigurationDataColorPaletteArrayOutput) ToGetThemeConfigurationDataColorPaletteArrayOutput() GetThemeConfigurationDataColorPaletteArrayOutput {
	return o
}

func (o GetThemeConfigurationDataColorPaletteArrayOutput) ToGetThemeConfigurationDataColorPaletteArrayOutputWithContext(ctx context.Context) GetThemeConfigurationDataColorPaletteArrayOutput {
	return o
}

func (o GetThemeConfigurationDataColorPaletteArrayOutput) Index(i pulumi.IntInput) GetThemeConfigurationDataColorPaletteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetThemeConfigurationDataColorPalette {
		return vs[0].([]GetThemeConfigurationDataColorPalette)[vs[1].(int)]
	}).(GetThemeConfigurationDataColorPaletteOutput)
}

type GetThemeConfigurationSheet struct {
	// The layout options for tiles. See tile_layout.
	TileLayouts []GetThemeConfigurationSheetTileLayout `pulumi:"tileLayouts"`
	// The display options for tiles. See tile.
	Tiles []GetThemeConfigurationSheetTile `pulumi:"tiles"`
}

// GetThemeConfigurationSheetInput is an input type that accepts GetThemeConfigurationSheetArgs and GetThemeConfigurationSheetOutput values.
// You can construct a concrete instance of `GetThemeConfigurationSheetInput` via:
//
//	GetThemeConfigurationSheetArgs{...}
type GetThemeConfigurationSheetInput interface {
	pulumi.Input

	ToGetThemeConfigurationSheetOutput() GetThemeConfigurationSheetOutput
	ToGetThemeConfigurationSheetOutputWithContext(context.Context) GetThemeConfigurationSheetOutput
}

type GetThemeConfigurationSheetArgs struct {
	// The layout options for tiles. See tile_layout.
	TileLayouts GetThemeConfigurationSheetTileLayoutArrayInput `pulumi:"tileLayouts"`
	// The display options for tiles. See tile.
	Tiles GetThemeConfigurationSheetTileArrayInput `pulumi:"tiles"`
}

func (GetThemeConfigurationSheetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationSheet)(nil)).Elem()
}

func (i GetThemeConfigurationSheetArgs) ToGetThemeConfigurationSheetOutput() GetThemeConfigurationSheetOutput {
	return i.ToGetThemeConfigurationSheetOutputWithContext(context.Background())
}

func (i GetThemeConfigurationSheetArgs) ToGetThemeConfigurationSheetOutputWithContext(ctx context.Context) GetThemeConfigurationSheetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetThemeConfigurationSheetOutput)
}

// GetThemeConfigurationSheetArrayInput is an input type that accepts GetThemeConfigurationSheetArray and GetThemeConfigurationSheetArrayOutput values.
// You can construct a concrete instance of `GetThemeConfigurationSheetArrayInput` via:
//
//	GetThemeConfigurationSheetArray{ GetThemeConfigurationSheetArgs{...} }
type GetThemeConfigurationSheetArrayInput interface {
	pulumi.Input

	ToGetThemeConfigurationSheetArrayOutput() GetThemeConfigurationSheetArrayOutput
	ToGetThemeConfigurationSheetArrayOutputWithContext(context.Context) GetThemeConfigurationSheetArrayOutput
}

type GetThemeConfigurationSheetArray []GetThemeConfigurationSheetInput

func (GetThemeConfigurationSheetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetThemeConfigurationSheet)(nil)).Elem()
}

func (i GetThemeConfigurationSheetArray) ToGetThemeConfigurationSheetArrayOutput() GetThemeConfigurationSheetArrayOutput {
	return i.ToGetThemeConfigurationSheetArrayOutputWithContext(context.Background())
}

func (i GetThemeConfigurationSheetArray) ToGetThemeConfigurationSheetArrayOutputWithContext(ctx context.Context) GetThemeConfigurationSheetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetThemeConfigurationSheetArrayOutput)
}

type GetThemeConfigurationSheetOutput struct{ *pulumi.OutputState }

func (GetThemeConfigurationSheetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationSheet)(nil)).Elem()
}

func (o GetThemeConfigurationSheetOutput) ToGetThemeConfigurationSheetOutput() GetThemeConfigurationSheetOutput {
	return o
}

func (o GetThemeConfigurationSheetOutput) ToGetThemeConfigurationSheetOutputWithContext(ctx context.Context) GetThemeConfigurationSheetOutput {
	return o
}

// The layout options for tiles. See tile_layout.
func (o GetThemeConfigurationSheetOutput) TileLayouts() GetThemeConfigurationSheetTileLayoutArrayOutput {
	return o.ApplyT(func(v GetThemeConfigurationSheet) []GetThemeConfigurationSheetTileLayout { return v.TileLayouts }).(GetThemeConfigurationSheetTileLayoutArrayOutput)
}

// The display options for tiles. See tile.
func (o GetThemeConfigurationSheetOutput) Tiles() GetThemeConfigurationSheetTileArrayOutput {
	return o.ApplyT(func(v GetThemeConfigurationSheet) []GetThemeConfigurationSheetTile { return v.Tiles }).(GetThemeConfigurationSheetTileArrayOutput)
}

type GetThemeConfigurationSheetArrayOutput struct{ *pulumi.OutputState }

func (GetThemeConfigurationSheetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetThemeConfigurationSheet)(nil)).Elem()
}

func (o GetThemeConfigurationSheetArrayOutput) ToGetThemeConfigurationSheetArrayOutput() GetThemeConfigurationSheetArrayOutput {
	return o
}

func (o GetThemeConfigurationSheetArrayOutput) ToGetThemeConfigurationSheetArrayOutputWithContext(ctx context.Context) GetThemeConfigurationSheetArrayOutput {
	return o
}

func (o GetThemeConfigurationSheetArrayOutput) Index(i pulumi.IntInput) GetThemeConfigurationSheetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetThemeConfigurationSheet {
		return vs[0].([]GetThemeConfigurationSheet)[vs[1].(int)]
	}).(GetThemeConfigurationSheetOutput)
}

type GetThemeConfigurationSheetTile struct {
	// The border around a tile. See border.
	Borders []GetThemeConfigurationSheetTileBorder `pulumi:"borders"`
}

// GetThemeConfigurationSheetTileInput is an input type that accepts GetThemeConfigurationSheetTileArgs and GetThemeConfigurationSheetTileOutput values.
// You can construct a concrete instance of `GetThemeConfigurationSheetTileInput` via:
//
//	GetThemeConfigurationSheetTileArgs{...}
type GetThemeConfigurationSheetTileInput interface {
	pulumi.Input

	ToGetThemeConfigurationSheetTileOutput() GetThemeConfigurationSheetTileOutput
	ToGetThemeConfigurationSheetTileOutputWithContext(context.Context) GetThemeConfigurationSheetTileOutput
}

type GetThemeConfigurationSheetTileArgs struct {
	// The border around a tile. See border.
	Borders GetThemeConfigurationSheetTileBorderArrayInput `pulumi:"borders"`
}

func (GetThemeConfigurationSheetTileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationSheetTile)(nil)).Elem()
}

func (i GetThemeConfigurationSheetTileArgs) ToGetThemeConfigurationSheetTileOutput() GetThemeConfigurationSheetTileOutput {
	return i.ToGetThemeConfigurationSheetTileOutputWithContext(context.Background())
}

func (i GetThemeConfigurationSheetTileArgs) ToGetThemeConfigurationSheetTileOutputWithContext(ctx context.Context) GetThemeConfigurationSheetTileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetThemeConfigurationSheetTileOutput)
}

// GetThemeConfigurationSheetTileArrayInput is an input type that accepts GetThemeConfigurationSheetTileArray and GetThemeConfigurationSheetTileArrayOutput values.
// You can construct a concrete instance of `GetThemeConfigurationSheetTileArrayInput` via:
//
//	GetThemeConfigurationSheetTileArray{ GetThemeConfigurationSheetTileArgs{...} }
type GetThemeConfigurationSheetTileArrayInput interface {
	pulumi.Input

	ToGetThemeConfigurationSheetTileArrayOutput() GetThemeConfigurationSheetTileArrayOutput
	ToGetThemeConfigurationSheetTileArrayOutputWithContext(context.Context) GetThemeConfigurationSheetTileArrayOutput
}

type GetThemeConfigurationSheetTileArray []GetThemeConfigurationSheetTileInput

func (GetThemeConfigurationSheetTileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetThemeConfigurationSheetTile)(nil)).Elem()
}

func (i GetThemeConfigurationSheetTileArray) ToGetThemeConfigurationSheetTileArrayOutput() GetThemeConfigurationSheetTileArrayOutput {
	return i.ToGetThemeConfigurationSheetTileArrayOutputWithContext(context.Background())
}

func (i GetThemeConfigurationSheetTileArray) ToGetThemeConfigurationSheetTileArrayOutputWithContext(ctx context.Context) GetThemeConfigurationSheetTileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetThemeConfigurationSheetTileArrayOutput)
}

type GetThemeConfigurationSheetTileOutput struct{ *pulumi.OutputState }

func (GetThemeConfigurationSheetTileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationSheetTile)(nil)).Elem()
}

func (o GetThemeConfigurationSheetTileOutput) ToGetThemeConfigurationSheetTileOutput() GetThemeConfigurationSheetTileOutput {
	return o
}

func (o GetThemeConfigurationSheetTileOutput) ToGetThemeConfigurationSheetTileOutputWithContext(ctx context.Context) GetThemeConfigurationSheetTileOutput {
	return o
}

// The border around a tile. See border.
func (o GetThemeConfigurationSheetTileOutput) Borders() GetThemeConfigurationSheetTileBorderArrayOutput {
	return o.ApplyT(func(v GetThemeConfigurationSheetTile) []GetThemeConfigurationSheetTileBorder { return v.Borders }).(GetThemeConfigurationSheetTileBorderArrayOutput)
}

type GetThemeConfigurationSheetTileArrayOutput struct{ *pulumi.OutputState }

func (GetThemeConfigurationSheetTileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetThemeConfigurationSheetTile)(nil)).Elem()
}

func (o GetThemeConfigurationSheetTileArrayOutput) ToGetThemeConfigurationSheetTileArrayOutput() GetThemeConfigurationSheetTileArrayOutput {
	return o
}

func (o GetThemeConfigurationSheetTileArrayOutput) ToGetThemeConfigurationSheetTileArrayOutputWithContext(ctx context.Context) GetThemeConfigurationSheetTileArrayOutput {
	return o
}

func (o GetThemeConfigurationSheetTileArrayOutput) Index(i pulumi.IntInput) GetThemeConfigurationSheetTileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetThemeConfigurationSheetTile {
		return vs[0].([]GetThemeConfigurationSheetTile)[vs[1].(int)]
	}).(GetThemeConfigurationSheetTileOutput)
}

type GetThemeConfigurationSheetTileBorder struct {
	// This Boolean value controls whether to display sheet margins.
	Show bool `pulumi:"show"`
}

// GetThemeConfigurationSheetTileBorderInput is an input type that accepts GetThemeConfigurationSheetTileBorderArgs and GetThemeConfigurationSheetTileBorderOutput values.
// You can construct a concrete instance of `GetThemeConfigurationSheetTileBorderInput` via:
//
//	GetThemeConfigurationSheetTileBorderArgs{...}
type GetThemeConfigurationSheetTileBorderInput interface {
	pulumi.Input

	ToGetThemeConfigurationSheetTileBorderOutput() GetThemeConfigurationSheetTileBorderOutput
	ToGetThemeConfigurationSheetTileBorderOutputWithContext(context.Context) GetThemeConfigurationSheetTileBorderOutput
}

type GetThemeConfigurationSheetTileBorderArgs struct {
	// This Boolean value controls whether to display sheet margins.
	Show pulumi.BoolInput `pulumi:"show"`
}

func (GetThemeConfigurationSheetTileBorderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationSheetTileBorder)(nil)).Elem()
}

func (i GetThemeConfigurationSheetTileBorderArgs) ToGetThemeConfigurationSheetTileBorderOutput() GetThemeConfigurationSheetTileBorderOutput {
	return i.ToGetThemeConfigurationSheetTileBorderOutputWithContext(context.Background())
}

func (i GetThemeConfigurationSheetTileBorderArgs) ToGetThemeConfigurationSheetTileBorderOutputWithContext(ctx context.Context) GetThemeConfigurationSheetTileBorderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetThemeConfigurationSheetTileBorderOutput)
}

// GetThemeConfigurationSheetTileBorderArrayInput is an input type that accepts GetThemeConfigurationSheetTileBorderArray and GetThemeConfigurationSheetTileBorderArrayOutput values.
// You can construct a concrete instance of `GetThemeConfigurationSheetTileBorderArrayInput` via:
//
//	GetThemeConfigurationSheetTileBorderArray{ GetThemeConfigurationSheetTileBorderArgs{...} }
type GetThemeConfigurationSheetTileBorderArrayInput interface {
	pulumi.Input

	ToGetThemeConfigurationSheetTileBorderArrayOutput() GetThemeConfigurationSheetTileBorderArrayOutput
	ToGetThemeConfigurationSheetTileBorderArrayOutputWithContext(context.Context) GetThemeConfigurationSheetTileBorderArrayOutput
}

type GetThemeConfigurationSheetTileBorderArray []GetThemeConfigurationSheetTileBorderInput

func (GetThemeConfigurationSheetTileBorderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetThemeConfigurationSheetTileBorder)(nil)).Elem()
}

func (i GetThemeConfigurationSheetTileBorderArray) ToGetThemeConfigurationSheetTileBorderArrayOutput() GetThemeConfigurationSheetTileBorderArrayOutput {
	return i.ToGetThemeConfigurationSheetTileBorderArrayOutputWithContext(context.Background())
}

func (i GetThemeConfigurationSheetTileBorderArray) ToGetThemeConfigurationSheetTileBorderArrayOutputWithContext(ctx context.Context) GetThemeConfigurationSheetTileBorderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetThemeConfigurationSheetTileBorderArrayOutput)
}

type GetThemeConfigurationSheetTileBorderOutput struct{ *pulumi.OutputState }

func (GetThemeConfigurationSheetTileBorderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationSheetTileBorder)(nil)).Elem()
}

func (o GetThemeConfigurationSheetTileBorderOutput) ToGetThemeConfigurationSheetTileBorderOutput() GetThemeConfigurationSheetTileBorderOutput {
	return o
}

func (o GetThemeConfigurationSheetTileBorderOutput) ToGetThemeConfigurationSheetTileBorderOutputWithContext(ctx context.Context) GetThemeConfigurationSheetTileBorderOutput {
	return o
}

// This Boolean value controls whether to display sheet margins.
func (o GetThemeConfigurationSheetTileBorderOutput) Show() pulumi.BoolOutput {
	return o.ApplyT(func(v GetThemeConfigurationSheetTileBorder) bool { return v.Show }).(pulumi.BoolOutput)
}

type GetThemeConfigurationSheetTileBorderArrayOutput struct{ *pulumi.OutputState }

func (GetThemeConfigurationSheetTileBorderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetThemeConfigurationSheetTileBorder)(nil)).Elem()
}

func (o GetThemeConfigurationSheetTileBorderArrayOutput) ToGetThemeConfigurationSheetTileBorderArrayOutput() GetThemeConfigurationSheetTileBorderArrayOutput {
	return o
}

func (o GetThemeConfigurationSheetTileBorderArrayOutput) ToGetThemeConfigurationSheetTileBorderArrayOutputWithContext(ctx context.Context) GetThemeConfigurationSheetTileBorderArrayOutput {
	return o
}

func (o GetThemeConfigurationSheetTileBorderArrayOutput) Index(i pulumi.IntInput) GetThemeConfigurationSheetTileBorderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetThemeConfigurationSheetTileBorder {
		return vs[0].([]GetThemeConfigurationSheetTileBorder)[vs[1].(int)]
	}).(GetThemeConfigurationSheetTileBorderOutput)
}

type GetThemeConfigurationSheetTileLayout struct {
	// The gutter settings that apply between tiles. See gutter.
	Gutters []GetThemeConfigurationSheetTileLayoutGutter `pulumi:"gutters"`
	// The margin settings that apply around the outside edge of sheets. See margin.
	Margins []GetThemeConfigurationSheetTileLayoutMargin `pulumi:"margins"`
}

// GetThemeConfigurationSheetTileLayoutInput is an input type that accepts GetThemeConfigurationSheetTileLayoutArgs and GetThemeConfigurationSheetTileLayoutOutput values.
// You can construct a concrete instance of `GetThemeConfigurationSheetTileLayoutInput` via:
//
//	GetThemeConfigurationSheetTileLayoutArgs{...}
type GetThemeConfigurationSheetTileLayoutInput interface {
	pulumi.Input

	ToGetThemeConfigurationSheetTileLayoutOutput() GetThemeConfigurationSheetTileLayoutOutput
	ToGetThemeConfigurationSheetTileLayoutOutputWithContext(context.Context) GetThemeConfigurationSheetTileLayoutOutput
}

type GetThemeConfigurationSheetTileLayoutArgs struct {
	// The gutter settings that apply between tiles. See gutter.
	Gutters GetThemeConfigurationSheetTileLayoutGutterArrayInput `pulumi:"gutters"`
	// The margin settings that apply around the outside edge of sheets. See margin.
	Margins GetThemeConfigurationSheetTileLayoutMarginArrayInput `pulumi:"margins"`
}

func (GetThemeConfigurationSheetTileLayoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationSheetTileLayout)(nil)).Elem()
}

func (i GetThemeConfigurationSheetTileLayoutArgs) ToGetThemeConfigurationSheetTileLayoutOutput() GetThemeConfigurationSheetTileLayoutOutput {
	return i.ToGetThemeConfigurationSheetTileLayoutOutputWithContext(context.Background())
}

func (i GetThemeConfigurationSheetTileLayoutArgs) ToGetThemeConfigurationSheetTileLayoutOutputWithContext(ctx context.Context) GetThemeConfigurationSheetTileLayoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetThemeConfigurationSheetTileLayoutOutput)
}

// GetThemeConfigurationSheetTileLayoutArrayInput is an input type that accepts GetThemeConfigurationSheetTileLayoutArray and GetThemeConfigurationSheetTileLayoutArrayOutput values.
// You can construct a concrete instance of `GetThemeConfigurationSheetTileLayoutArrayInput` via:
//
//	GetThemeConfigurationSheetTileLayoutArray{ GetThemeConfigurationSheetTileLayoutArgs{...} }
type GetThemeConfigurationSheetTileLayoutArrayInput interface {
	pulumi.Input

	ToGetThemeConfigurationSheetTileLayoutArrayOutput() GetThemeConfigurationSheetTileLayoutArrayOutput
	ToGetThemeConfigurationSheetTileLayoutArrayOutputWithContext(context.Context) GetThemeConfigurationSheetTileLayoutArrayOutput
}

type GetThemeConfigurationSheetTileLayoutArray []GetThemeConfigurationSheetTileLayoutInput

func (GetThemeConfigurationSheetTileLayoutArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetThemeConfigurationSheetTileLayout)(nil)).Elem()
}

func (i GetThemeConfigurationSheetTileLayoutArray) ToGetThemeConfigurationSheetTileLayoutArrayOutput() GetThemeConfigurationSheetTileLayoutArrayOutput {
	return i.ToGetThemeConfigurationSheetTileLayoutArrayOutputWithContext(context.Background())
}

func (i GetThemeConfigurationSheetTileLayoutArray) ToGetThemeConfigurationSheetTileLayoutArrayOutputWithContext(ctx context.Context) GetThemeConfigurationSheetTileLayoutArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetThemeConfigurationSheetTileLayoutArrayOutput)
}

type GetThemeConfigurationSheetTileLayoutOutput struct{ *pulumi.OutputState }

func (GetThemeConfigurationSheetTileLayoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationSheetTileLayout)(nil)).Elem()
}

func (o GetThemeConfigurationSheetTileLayoutOutput) ToGetThemeConfigurationSheetTileLayoutOutput() GetThemeConfigurationSheetTileLayoutOutput {
	return o
}

func (o GetThemeConfigurationSheetTileLayoutOutput) ToGetThemeConfigurationSheetTileLayoutOutputWithContext(ctx context.Context) GetThemeConfigurationSheetTileLayoutOutput {
	return o
}

// The gutter settings that apply between tiles. See gutter.
func (o GetThemeConfigurationSheetTileLayoutOutput) Gutters() GetThemeConfigurationSheetTileLayoutGutterArrayOutput {
	return o.ApplyT(func(v GetThemeConfigurationSheetTileLayout) []GetThemeConfigurationSheetTileLayoutGutter {
		return v.Gutters
	}).(GetThemeConfigurationSheetTileLayoutGutterArrayOutput)
}

// The margin settings that apply around the outside edge of sheets. See margin.
func (o GetThemeConfigurationSheetTileLayoutOutput) Margins() GetThemeConfigurationSheetTileLayoutMarginArrayOutput {
	return o.ApplyT(func(v GetThemeConfigurationSheetTileLayout) []GetThemeConfigurationSheetTileLayoutMargin {
		return v.Margins
	}).(GetThemeConfigurationSheetTileLayoutMarginArrayOutput)
}

type GetThemeConfigurationSheetTileLayoutArrayOutput struct{ *pulumi.OutputState }

func (GetThemeConfigurationSheetTileLayoutArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetThemeConfigurationSheetTileLayout)(nil)).Elem()
}

func (o GetThemeConfigurationSheetTileLayoutArrayOutput) ToGetThemeConfigurationSheetTileLayoutArrayOutput() GetThemeConfigurationSheetTileLayoutArrayOutput {
	return o
}

func (o GetThemeConfigurationSheetTileLayoutArrayOutput) ToGetThemeConfigurationSheetTileLayoutArrayOutputWithContext(ctx context.Context) GetThemeConfigurationSheetTileLayoutArrayOutput {
	return o
}

func (o GetThemeConfigurationSheetTileLayoutArrayOutput) Index(i pulumi.IntInput) GetThemeConfigurationSheetTileLayoutOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetThemeConfigurationSheetTileLayout {
		return vs[0].([]GetThemeConfigurationSheetTileLayout)[vs[1].(int)]
	}).(GetThemeConfigurationSheetTileLayoutOutput)
}

type GetThemeConfigurationSheetTileLayoutGutter struct {
	// This Boolean value controls whether to display sheet margins.
	Show bool `pulumi:"show"`
}

// GetThemeConfigurationSheetTileLayoutGutterInput is an input type that accepts GetThemeConfigurationSheetTileLayoutGutterArgs and GetThemeConfigurationSheetTileLayoutGutterOutput values.
// You can construct a concrete instance of `GetThemeConfigurationSheetTileLayoutGutterInput` via:
//
//	GetThemeConfigurationSheetTileLayoutGutterArgs{...}
type GetThemeConfigurationSheetTileLayoutGutterInput interface {
	pulumi.Input

	ToGetThemeConfigurationSheetTileLayoutGutterOutput() GetThemeConfigurationSheetTileLayoutGutterOutput
	ToGetThemeConfigurationSheetTileLayoutGutterOutputWithContext(context.Context) GetThemeConfigurationSheetTileLayoutGutterOutput
}

type GetThemeConfigurationSheetTileLayoutGutterArgs struct {
	// This Boolean value controls whether to display sheet margins.
	Show pulumi.BoolInput `pulumi:"show"`
}

func (GetThemeConfigurationSheetTileLayoutGutterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationSheetTileLayoutGutter)(nil)).Elem()
}

func (i GetThemeConfigurationSheetTileLayoutGutterArgs) ToGetThemeConfigurationSheetTileLayoutGutterOutput() GetThemeConfigurationSheetTileLayoutGutterOutput {
	return i.ToGetThemeConfigurationSheetTileLayoutGutterOutputWithContext(context.Background())
}

func (i GetThemeConfigurationSheetTileLayoutGutterArgs) ToGetThemeConfigurationSheetTileLayoutGutterOutputWithContext(ctx context.Context) GetThemeConfigurationSheetTileLayoutGutterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetThemeConfigurationSheetTileLayoutGutterOutput)
}

// GetThemeConfigurationSheetTileLayoutGutterArrayInput is an input type that accepts GetThemeConfigurationSheetTileLayoutGutterArray and GetThemeConfigurationSheetTileLayoutGutterArrayOutput values.
// You can construct a concrete instance of `GetThemeConfigurationSheetTileLayoutGutterArrayInput` via:
//
//	GetThemeConfigurationSheetTileLayoutGutterArray{ GetThemeConfigurationSheetTileLayoutGutterArgs{...} }
type GetThemeConfigurationSheetTileLayoutGutterArrayInput interface {
	pulumi.Input

	ToGetThemeConfigurationSheetTileLayoutGutterArrayOutput() GetThemeConfigurationSheetTileLayoutGutterArrayOutput
	ToGetThemeConfigurationSheetTileLayoutGutterArrayOutputWithContext(context.Context) GetThemeConfigurationSheetTileLayoutGutterArrayOutput
}

type GetThemeConfigurationSheetTileLayoutGutterArray []GetThemeConfigurationSheetTileLayoutGutterInput

func (GetThemeConfigurationSheetTileLayoutGutterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetThemeConfigurationSheetTileLayoutGutter)(nil)).Elem()
}

func (i GetThemeConfigurationSheetTileLayoutGutterArray) ToGetThemeConfigurationSheetTileLayoutGutterArrayOutput() GetThemeConfigurationSheetTileLayoutGutterArrayOutput {
	return i.ToGetThemeConfigurationSheetTileLayoutGutterArrayOutputWithContext(context.Background())
}

func (i GetThemeConfigurationSheetTileLayoutGutterArray) ToGetThemeConfigurationSheetTileLayoutGutterArrayOutputWithContext(ctx context.Context) GetThemeConfigurationSheetTileLayoutGutterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetThemeConfigurationSheetTileLayoutGutterArrayOutput)
}

type GetThemeConfigurationSheetTileLayoutGutterOutput struct{ *pulumi.OutputState }

func (GetThemeConfigurationSheetTileLayoutGutterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationSheetTileLayoutGutter)(nil)).Elem()
}

func (o GetThemeConfigurationSheetTileLayoutGutterOutput) ToGetThemeConfigurationSheetTileLayoutGutterOutput() GetThemeConfigurationSheetTileLayoutGutterOutput {
	return o
}

func (o GetThemeConfigurationSheetTileLayoutGutterOutput) ToGetThemeConfigurationSheetTileLayoutGutterOutputWithContext(ctx context.Context) GetThemeConfigurationSheetTileLayoutGutterOutput {
	return o
}

// This Boolean value controls whether to display sheet margins.
func (o GetThemeConfigurationSheetTileLayoutGutterOutput) Show() pulumi.BoolOutput {
	return o.ApplyT(func(v GetThemeConfigurationSheetTileLayoutGutter) bool { return v.Show }).(pulumi.BoolOutput)
}

type GetThemeConfigurationSheetTileLayoutGutterArrayOutput struct{ *pulumi.OutputState }

func (GetThemeConfigurationSheetTileLayoutGutterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetThemeConfigurationSheetTileLayoutGutter)(nil)).Elem()
}

func (o GetThemeConfigurationSheetTileLayoutGutterArrayOutput) ToGetThemeConfigurationSheetTileLayoutGutterArrayOutput() GetThemeConfigurationSheetTileLayoutGutterArrayOutput {
	return o
}

func (o GetThemeConfigurationSheetTileLayoutGutterArrayOutput) ToGetThemeConfigurationSheetTileLayoutGutterArrayOutputWithContext(ctx context.Context) GetThemeConfigurationSheetTileLayoutGutterArrayOutput {
	return o
}

func (o GetThemeConfigurationSheetTileLayoutGutterArrayOutput) Index(i pulumi.IntInput) GetThemeConfigurationSheetTileLayoutGutterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetThemeConfigurationSheetTileLayoutGutter {
		return vs[0].([]GetThemeConfigurationSheetTileLayoutGutter)[vs[1].(int)]
	}).(GetThemeConfigurationSheetTileLayoutGutterOutput)
}

type GetThemeConfigurationSheetTileLayoutMargin struct {
	// This Boolean value controls whether to display sheet margins.
	Show bool `pulumi:"show"`
}

// GetThemeConfigurationSheetTileLayoutMarginInput is an input type that accepts GetThemeConfigurationSheetTileLayoutMarginArgs and GetThemeConfigurationSheetTileLayoutMarginOutput values.
// You can construct a concrete instance of `GetThemeConfigurationSheetTileLayoutMarginInput` via:
//
//	GetThemeConfigurationSheetTileLayoutMarginArgs{...}
type GetThemeConfigurationSheetTileLayoutMarginInput interface {
	pulumi.Input

	ToGetThemeConfigurationSheetTileLayoutMarginOutput() GetThemeConfigurationSheetTileLayoutMarginOutput
	ToGetThemeConfigurationSheetTileLayoutMarginOutputWithContext(context.Context) GetThemeConfigurationSheetTileLayoutMarginOutput
}

type GetThemeConfigurationSheetTileLayoutMarginArgs struct {
	// This Boolean value controls whether to display sheet margins.
	Show pulumi.BoolInput `pulumi:"show"`
}

func (GetThemeConfigurationSheetTileLayoutMarginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationSheetTileLayoutMargin)(nil)).Elem()
}

func (i GetThemeConfigurationSheetTileLayoutMarginArgs) ToGetThemeConfigurationSheetTileLayoutMarginOutput() GetThemeConfigurationSheetTileLayoutMarginOutput {
	return i.ToGetThemeConfigurationSheetTileLayoutMarginOutputWithContext(context.Background())
}

func (i GetThemeConfigurationSheetTileLayoutMarginArgs) ToGetThemeConfigurationSheetTileLayoutMarginOutputWithContext(ctx context.Context) GetThemeConfigurationSheetTileLayoutMarginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetThemeConfigurationSheetTileLayoutMarginOutput)
}

// GetThemeConfigurationSheetTileLayoutMarginArrayInput is an input type that accepts GetThemeConfigurationSheetTileLayoutMarginArray and GetThemeConfigurationSheetTileLayoutMarginArrayOutput values.
// You can construct a concrete instance of `GetThemeConfigurationSheetTileLayoutMarginArrayInput` via:
//
//	GetThemeConfigurationSheetTileLayoutMarginArray{ GetThemeConfigurationSheetTileLayoutMarginArgs{...} }
type GetThemeConfigurationSheetTileLayoutMarginArrayInput interface {
	pulumi.Input

	ToGetThemeConfigurationSheetTileLayoutMarginArrayOutput() GetThemeConfigurationSheetTileLayoutMarginArrayOutput
	ToGetThemeConfigurationSheetTileLayoutMarginArrayOutputWithContext(context.Context) GetThemeConfigurationSheetTileLayoutMarginArrayOutput
}

type GetThemeConfigurationSheetTileLayoutMarginArray []GetThemeConfigurationSheetTileLayoutMarginInput

func (GetThemeConfigurationSheetTileLayoutMarginArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetThemeConfigurationSheetTileLayoutMargin)(nil)).Elem()
}

func (i GetThemeConfigurationSheetTileLayoutMarginArray) ToGetThemeConfigurationSheetTileLayoutMarginArrayOutput() GetThemeConfigurationSheetTileLayoutMarginArrayOutput {
	return i.ToGetThemeConfigurationSheetTileLayoutMarginArrayOutputWithContext(context.Background())
}

func (i GetThemeConfigurationSheetTileLayoutMarginArray) ToGetThemeConfigurationSheetTileLayoutMarginArrayOutputWithContext(ctx context.Context) GetThemeConfigurationSheetTileLayoutMarginArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetThemeConfigurationSheetTileLayoutMarginArrayOutput)
}

type GetThemeConfigurationSheetTileLayoutMarginOutput struct{ *pulumi.OutputState }

func (GetThemeConfigurationSheetTileLayoutMarginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationSheetTileLayoutMargin)(nil)).Elem()
}

func (o GetThemeConfigurationSheetTileLayoutMarginOutput) ToGetThemeConfigurationSheetTileLayoutMarginOutput() GetThemeConfigurationSheetTileLayoutMarginOutput {
	return o
}

func (o GetThemeConfigurationSheetTileLayoutMarginOutput) ToGetThemeConfigurationSheetTileLayoutMarginOutputWithContext(ctx context.Context) GetThemeConfigurationSheetTileLayoutMarginOutput {
	return o
}

// This Boolean value controls whether to display sheet margins.
func (o GetThemeConfigurationSheetTileLayoutMarginOutput) Show() pulumi.BoolOutput {
	return o.ApplyT(func(v GetThemeConfigurationSheetTileLayoutMargin) bool { return v.Show }).(pulumi.BoolOutput)
}

type GetThemeConfigurationSheetTileLayoutMarginArrayOutput struct{ *pulumi.OutputState }

func (GetThemeConfigurationSheetTileLayoutMarginArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetThemeConfigurationSheetTileLayoutMargin)(nil)).Elem()
}

func (o GetThemeConfigurationSheetTileLayoutMarginArrayOutput) ToGetThemeConfigurationSheetTileLayoutMarginArrayOutput() GetThemeConfigurationSheetTileLayoutMarginArrayOutput {
	return o
}

func (o GetThemeConfigurationSheetTileLayoutMarginArrayOutput) ToGetThemeConfigurationSheetTileLayoutMarginArrayOutputWithContext(ctx context.Context) GetThemeConfigurationSheetTileLayoutMarginArrayOutput {
	return o
}

func (o GetThemeConfigurationSheetTileLayoutMarginArrayOutput) Index(i pulumi.IntInput) GetThemeConfigurationSheetTileLayoutMarginOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetThemeConfigurationSheetTileLayoutMargin {
		return vs[0].([]GetThemeConfigurationSheetTileLayoutMargin)[vs[1].(int)]
	}).(GetThemeConfigurationSheetTileLayoutMarginOutput)
}

type GetThemeConfigurationTypography struct {
	// Determines the list of font families. Maximum number of 5 items. See font_families.
	FontFamilies []GetThemeConfigurationTypographyFontFamily `pulumi:"fontFamilies"`
}

// GetThemeConfigurationTypographyInput is an input type that accepts GetThemeConfigurationTypographyArgs and GetThemeConfigurationTypographyOutput values.
// You can construct a concrete instance of `GetThemeConfigurationTypographyInput` via:
//
//	GetThemeConfigurationTypographyArgs{...}
type GetThemeConfigurationTypographyInput interface {
	pulumi.Input

	ToGetThemeConfigurationTypographyOutput() GetThemeConfigurationTypographyOutput
	ToGetThemeConfigurationTypographyOutputWithContext(context.Context) GetThemeConfigurationTypographyOutput
}

type GetThemeConfigurationTypographyArgs struct {
	// Determines the list of font families. Maximum number of 5 items. See font_families.
	FontFamilies GetThemeConfigurationTypographyFontFamilyArrayInput `pulumi:"fontFamilies"`
}

func (GetThemeConfigurationTypographyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationTypography)(nil)).Elem()
}

func (i GetThemeConfigurationTypographyArgs) ToGetThemeConfigurationTypographyOutput() GetThemeConfigurationTypographyOutput {
	return i.ToGetThemeConfigurationTypographyOutputWithContext(context.Background())
}

func (i GetThemeConfigurationTypographyArgs) ToGetThemeConfigurationTypographyOutputWithContext(ctx context.Context) GetThemeConfigurationTypographyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetThemeConfigurationTypographyOutput)
}

// GetThemeConfigurationTypographyArrayInput is an input type that accepts GetThemeConfigurationTypographyArray and GetThemeConfigurationTypographyArrayOutput values.
// You can construct a concrete instance of `GetThemeConfigurationTypographyArrayInput` via:
//
//	GetThemeConfigurationTypographyArray{ GetThemeConfigurationTypographyArgs{...} }
type GetThemeConfigurationTypographyArrayInput interface {
	pulumi.Input

	ToGetThemeConfigurationTypographyArrayOutput() GetThemeConfigurationTypographyArrayOutput
	ToGetThemeConfigurationTypographyArrayOutputWithContext(context.Context) GetThemeConfigurationTypographyArrayOutput
}

type GetThemeConfigurationTypographyArray []GetThemeConfigurationTypographyInput

func (GetThemeConfigurationTypographyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetThemeConfigurationTypography)(nil)).Elem()
}

func (i GetThemeConfigurationTypographyArray) ToGetThemeConfigurationTypographyArrayOutput() GetThemeConfigurationTypographyArrayOutput {
	return i.ToGetThemeConfigurationTypographyArrayOutputWithContext(context.Background())
}

func (i GetThemeConfigurationTypographyArray) ToGetThemeConfigurationTypographyArrayOutputWithContext(ctx context.Context) GetThemeConfigurationTypographyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetThemeConfigurationTypographyArrayOutput)
}

type GetThemeConfigurationTypographyOutput struct{ *pulumi.OutputState }

func (GetThemeConfigurationTypographyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationTypography)(nil)).Elem()
}

func (o GetThemeConfigurationTypographyOutput) ToGetThemeConfigurationTypographyOutput() GetThemeConfigurationTypographyOutput {
	return o
}

func (o GetThemeConfigurationTypographyOutput) ToGetThemeConfigurationTypographyOutputWithContext(ctx context.Context) GetThemeConfigurationTypographyOutput {
	return o
}

// Determines the list of font families. Maximum number of 5 items. See font_families.
func (o GetThemeConfigurationTypographyOutput) FontFamilies() GetThemeConfigurationTypographyFontFamilyArrayOutput {
	return o.ApplyT(func(v GetThemeConfigurationTypography) []GetThemeConfigurationTypographyFontFamily {
		return v.FontFamilies
	}).(GetThemeConfigurationTypographyFontFamilyArrayOutput)
}

type GetThemeConfigurationTypographyArrayOutput struct{ *pulumi.OutputState }

func (GetThemeConfigurationTypographyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetThemeConfigurationTypography)(nil)).Elem()
}

func (o GetThemeConfigurationTypographyArrayOutput) ToGetThemeConfigurationTypographyArrayOutput() GetThemeConfigurationTypographyArrayOutput {
	return o
}

func (o GetThemeConfigurationTypographyArrayOutput) ToGetThemeConfigurationTypographyArrayOutputWithContext(ctx context.Context) GetThemeConfigurationTypographyArrayOutput {
	return o
}

func (o GetThemeConfigurationTypographyArrayOutput) Index(i pulumi.IntInput) GetThemeConfigurationTypographyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetThemeConfigurationTypography {
		return vs[0].([]GetThemeConfigurationTypography)[vs[1].(int)]
	}).(GetThemeConfigurationTypographyOutput)
}

type GetThemeConfigurationTypographyFontFamily struct {
	// Font family name.
	FontFamily string `pulumi:"fontFamily"`
}

// GetThemeConfigurationTypographyFontFamilyInput is an input type that accepts GetThemeConfigurationTypographyFontFamilyArgs and GetThemeConfigurationTypographyFontFamilyOutput values.
// You can construct a concrete instance of `GetThemeConfigurationTypographyFontFamilyInput` via:
//
//	GetThemeConfigurationTypographyFontFamilyArgs{...}
type GetThemeConfigurationTypographyFontFamilyInput interface {
	pulumi.Input

	ToGetThemeConfigurationTypographyFontFamilyOutput() GetThemeConfigurationTypographyFontFamilyOutput
	ToGetThemeConfigurationTypographyFontFamilyOutputWithContext(context.Context) GetThemeConfigurationTypographyFontFamilyOutput
}

type GetThemeConfigurationTypographyFontFamilyArgs struct {
	// Font family name.
	FontFamily pulumi.StringInput `pulumi:"fontFamily"`
}

func (GetThemeConfigurationTypographyFontFamilyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationTypographyFontFamily)(nil)).Elem()
}

func (i GetThemeConfigurationTypographyFontFamilyArgs) ToGetThemeConfigurationTypographyFontFamilyOutput() GetThemeConfigurationTypographyFontFamilyOutput {
	return i.ToGetThemeConfigurationTypographyFontFamilyOutputWithContext(context.Background())
}

func (i GetThemeConfigurationTypographyFontFamilyArgs) ToGetThemeConfigurationTypographyFontFamilyOutputWithContext(ctx context.Context) GetThemeConfigurationTypographyFontFamilyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetThemeConfigurationTypographyFontFamilyOutput)
}

// GetThemeConfigurationTypographyFontFamilyArrayInput is an input type that accepts GetThemeConfigurationTypographyFontFamilyArray and GetThemeConfigurationTypographyFontFamilyArrayOutput values.
// You can construct a concrete instance of `GetThemeConfigurationTypographyFontFamilyArrayInput` via:
//
//	GetThemeConfigurationTypographyFontFamilyArray{ GetThemeConfigurationTypographyFontFamilyArgs{...} }
type GetThemeConfigurationTypographyFontFamilyArrayInput interface {
	pulumi.Input

	ToGetThemeConfigurationTypographyFontFamilyArrayOutput() GetThemeConfigurationTypographyFontFamilyArrayOutput
	ToGetThemeConfigurationTypographyFontFamilyArrayOutputWithContext(context.Context) GetThemeConfigurationTypographyFontFamilyArrayOutput
}

type GetThemeConfigurationTypographyFontFamilyArray []GetThemeConfigurationTypographyFontFamilyInput

func (GetThemeConfigurationTypographyFontFamilyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetThemeConfigurationTypographyFontFamily)(nil)).Elem()
}

func (i GetThemeConfigurationTypographyFontFamilyArray) ToGetThemeConfigurationTypographyFontFamilyArrayOutput() GetThemeConfigurationTypographyFontFamilyArrayOutput {
	return i.ToGetThemeConfigurationTypographyFontFamilyArrayOutputWithContext(context.Background())
}

func (i GetThemeConfigurationTypographyFontFamilyArray) ToGetThemeConfigurationTypographyFontFamilyArrayOutputWithContext(ctx context.Context) GetThemeConfigurationTypographyFontFamilyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetThemeConfigurationTypographyFontFamilyArrayOutput)
}

type GetThemeConfigurationTypographyFontFamilyOutput struct{ *pulumi.OutputState }

func (GetThemeConfigurationTypographyFontFamilyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationTypographyFontFamily)(nil)).Elem()
}

func (o GetThemeConfigurationTypographyFontFamilyOutput) ToGetThemeConfigurationTypographyFontFamilyOutput() GetThemeConfigurationTypographyFontFamilyOutput {
	return o
}

func (o GetThemeConfigurationTypographyFontFamilyOutput) ToGetThemeConfigurationTypographyFontFamilyOutputWithContext(ctx context.Context) GetThemeConfigurationTypographyFontFamilyOutput {
	return o
}

// Font family name.
func (o GetThemeConfigurationTypographyFontFamilyOutput) FontFamily() pulumi.StringOutput {
	return o.ApplyT(func(v GetThemeConfigurationTypographyFontFamily) string { return v.FontFamily }).(pulumi.StringOutput)
}

type GetThemeConfigurationTypographyFontFamilyArrayOutput struct{ *pulumi.OutputState }

func (GetThemeConfigurationTypographyFontFamilyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetThemeConfigurationTypographyFontFamily)(nil)).Elem()
}

func (o GetThemeConfigurationTypographyFontFamilyArrayOutput) ToGetThemeConfigurationTypographyFontFamilyArrayOutput() GetThemeConfigurationTypographyFontFamilyArrayOutput {
	return o
}

func (o GetThemeConfigurationTypographyFontFamilyArrayOutput) ToGetThemeConfigurationTypographyFontFamilyArrayOutputWithContext(ctx context.Context) GetThemeConfigurationTypographyFontFamilyArrayOutput {
	return o
}

func (o GetThemeConfigurationTypographyFontFamilyArrayOutput) Index(i pulumi.IntInput) GetThemeConfigurationTypographyFontFamilyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetThemeConfigurationTypographyFontFamily {
		return vs[0].([]GetThemeConfigurationTypographyFontFamily)[vs[1].(int)]
	}).(GetThemeConfigurationTypographyFontFamilyOutput)
}

type GetThemeConfigurationUiColorPalette struct {
	// Color (hexadecimal) that applies to selected states and buttons.
	Accent string `pulumi:"accent"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the accent color.
	AccentForeground string `pulumi:"accentForeground"`
	// Color (hexadecimal) that applies to error messages.
	Danger string `pulumi:"danger"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the error color.
	DangerForeground string `pulumi:"dangerForeground"`
	// Color (hexadecimal) that applies to the names of fields that are identified as dimensions.
	Dimension string `pulumi:"dimension"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the dimension color.
	DimensionForeground string `pulumi:"dimensionForeground"`
	// Color (hexadecimal) that applies to the names of fields that are identified as measures.
	Measure string `pulumi:"measure"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the measure color.
	MeasureForeground string `pulumi:"measureForeground"`
	// Color (hexadecimal) that applies to visuals and other high emphasis UI.
	PrimaryBackground string `pulumi:"primaryBackground"`
	// Color (hexadecimal) of text and other foreground elements that appear over the primary background regions, such as grid lines, borders, table banding, icons, and so on.
	PrimaryForeground string `pulumi:"primaryForeground"`
	// Color (hexadecimal) that applies to the sheet background and sheet controls.
	SecondaryBackground string `pulumi:"secondaryBackground"`
	// Color (hexadecimal) that applies to any sheet title, sheet control text, or UI that appears over the secondary background.
	SecondaryForeground string `pulumi:"secondaryForeground"`
	// Color (hexadecimal) that applies to success messages, for example the check mark for a successful download.
	Success string `pulumi:"success"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the success color.
	SuccessForeground string `pulumi:"successForeground"`
	// Color (hexadecimal) that applies to warning and informational messages.
	Warning string `pulumi:"warning"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the warning color.
	WarningForeground string `pulumi:"warningForeground"`
}

// GetThemeConfigurationUiColorPaletteInput is an input type that accepts GetThemeConfigurationUiColorPaletteArgs and GetThemeConfigurationUiColorPaletteOutput values.
// You can construct a concrete instance of `GetThemeConfigurationUiColorPaletteInput` via:
//
//	GetThemeConfigurationUiColorPaletteArgs{...}
type GetThemeConfigurationUiColorPaletteInput interface {
	pulumi.Input

	ToGetThemeConfigurationUiColorPaletteOutput() GetThemeConfigurationUiColorPaletteOutput
	ToGetThemeConfigurationUiColorPaletteOutputWithContext(context.Context) GetThemeConfigurationUiColorPaletteOutput
}

type GetThemeConfigurationUiColorPaletteArgs struct {
	// Color (hexadecimal) that applies to selected states and buttons.
	Accent pulumi.StringInput `pulumi:"accent"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the accent color.
	AccentForeground pulumi.StringInput `pulumi:"accentForeground"`
	// Color (hexadecimal) that applies to error messages.
	Danger pulumi.StringInput `pulumi:"danger"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the error color.
	DangerForeground pulumi.StringInput `pulumi:"dangerForeground"`
	// Color (hexadecimal) that applies to the names of fields that are identified as dimensions.
	Dimension pulumi.StringInput `pulumi:"dimension"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the dimension color.
	DimensionForeground pulumi.StringInput `pulumi:"dimensionForeground"`
	// Color (hexadecimal) that applies to the names of fields that are identified as measures.
	Measure pulumi.StringInput `pulumi:"measure"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the measure color.
	MeasureForeground pulumi.StringInput `pulumi:"measureForeground"`
	// Color (hexadecimal) that applies to visuals and other high emphasis UI.
	PrimaryBackground pulumi.StringInput `pulumi:"primaryBackground"`
	// Color (hexadecimal) of text and other foreground elements that appear over the primary background regions, such as grid lines, borders, table banding, icons, and so on.
	PrimaryForeground pulumi.StringInput `pulumi:"primaryForeground"`
	// Color (hexadecimal) that applies to the sheet background and sheet controls.
	SecondaryBackground pulumi.StringInput `pulumi:"secondaryBackground"`
	// Color (hexadecimal) that applies to any sheet title, sheet control text, or UI that appears over the secondary background.
	SecondaryForeground pulumi.StringInput `pulumi:"secondaryForeground"`
	// Color (hexadecimal) that applies to success messages, for example the check mark for a successful download.
	Success pulumi.StringInput `pulumi:"success"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the success color.
	SuccessForeground pulumi.StringInput `pulumi:"successForeground"`
	// Color (hexadecimal) that applies to warning and informational messages.
	Warning pulumi.StringInput `pulumi:"warning"`
	// Color (hexadecimal) that applies to any text or other elements that appear over the warning color.
	WarningForeground pulumi.StringInput `pulumi:"warningForeground"`
}

func (GetThemeConfigurationUiColorPaletteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationUiColorPalette)(nil)).Elem()
}

func (i GetThemeConfigurationUiColorPaletteArgs) ToGetThemeConfigurationUiColorPaletteOutput() GetThemeConfigurationUiColorPaletteOutput {
	return i.ToGetThemeConfigurationUiColorPaletteOutputWithContext(context.Background())
}

func (i GetThemeConfigurationUiColorPaletteArgs) ToGetThemeConfigurationUiColorPaletteOutputWithContext(ctx context.Context) GetThemeConfigurationUiColorPaletteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetThemeConfigurationUiColorPaletteOutput)
}

// GetThemeConfigurationUiColorPaletteArrayInput is an input type that accepts GetThemeConfigurationUiColorPaletteArray and GetThemeConfigurationUiColorPaletteArrayOutput values.
// You can construct a concrete instance of `GetThemeConfigurationUiColorPaletteArrayInput` via:
//
//	GetThemeConfigurationUiColorPaletteArray{ GetThemeConfigurationUiColorPaletteArgs{...} }
type GetThemeConfigurationUiColorPaletteArrayInput interface {
	pulumi.Input

	ToGetThemeConfigurationUiColorPaletteArrayOutput() GetThemeConfigurationUiColorPaletteArrayOutput
	ToGetThemeConfigurationUiColorPaletteArrayOutputWithContext(context.Context) GetThemeConfigurationUiColorPaletteArrayOutput
}

type GetThemeConfigurationUiColorPaletteArray []GetThemeConfigurationUiColorPaletteInput

func (GetThemeConfigurationUiColorPaletteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetThemeConfigurationUiColorPalette)(nil)).Elem()
}

func (i GetThemeConfigurationUiColorPaletteArray) ToGetThemeConfigurationUiColorPaletteArrayOutput() GetThemeConfigurationUiColorPaletteArrayOutput {
	return i.ToGetThemeConfigurationUiColorPaletteArrayOutputWithContext(context.Background())
}

func (i GetThemeConfigurationUiColorPaletteArray) ToGetThemeConfigurationUiColorPaletteArrayOutputWithContext(ctx context.Context) GetThemeConfigurationUiColorPaletteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetThemeConfigurationUiColorPaletteArrayOutput)
}

type GetThemeConfigurationUiColorPaletteOutput struct{ *pulumi.OutputState }

func (GetThemeConfigurationUiColorPaletteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemeConfigurationUiColorPalette)(nil)).Elem()
}

func (o GetThemeConfigurationUiColorPaletteOutput) ToGetThemeConfigurationUiColorPaletteOutput() GetThemeConfigurationUiColorPaletteOutput {
	return o
}

func (o GetThemeConfigurationUiColorPaletteOutput) ToGetThemeConfigurationUiColorPaletteOutputWithContext(ctx context.Context) GetThemeConfigurationUiColorPaletteOutput {
	return o
}

// Color (hexadecimal) that applies to selected states and buttons.
func (o GetThemeConfigurationUiColorPaletteOutput) Accent() pulumi.StringOutput {
	return o.ApplyT(func(v GetThemeConfigurationUiColorPalette) string { return v.Accent }).(pulumi.StringOutput)
}

// Color (hexadecimal) that applies to any text or other elements that appear over the accent color.
func (o GetThemeConfigurationUiColorPaletteOutput) AccentForeground() pulumi.StringOutput {
	return o.ApplyT(func(v GetThemeConfigurationUiColorPalette) string { return v.AccentForeground }).(pulumi.StringOutput)
}

// Color (hexadecimal) that applies to error messages.
func (o GetThemeConfigurationUiColorPaletteOutput) Danger() pulumi.StringOutput {
	return o.ApplyT(func(v GetThemeConfigurationUiColorPalette) string { return v.Danger }).(pulumi.StringOutput)
}

// Color (hexadecimal) that applies to any text or other elements that appear over the error color.
func (o GetThemeConfigurationUiColorPaletteOutput) DangerForeground() pulumi.StringOutput {
	return o.ApplyT(func(v GetThemeConfigurationUiColorPalette) string { return v.DangerForeground }).(pulumi.StringOutput)
}

// Color (hexadecimal) that applies to the names of fields that are identified as dimensions.
func (o GetThemeConfigurationUiColorPaletteOutput) Dimension() pulumi.StringOutput {
	return o.ApplyT(func(v GetThemeConfigurationUiColorPalette) string { return v.Dimension }).(pulumi.StringOutput)
}

// Color (hexadecimal) that applies to any text or other elements that appear over the dimension color.
func (o GetThemeConfigurationUiColorPaletteOutput) DimensionForeground() pulumi.StringOutput {
	return o.ApplyT(func(v GetThemeConfigurationUiColorPalette) string { return v.DimensionForeground }).(pulumi.StringOutput)
}

// Color (hexadecimal) that applies to the names of fields that are identified as measures.
func (o GetThemeConfigurationUiColorPaletteOutput) Measure() pulumi.StringOutput {
	return o.ApplyT(func(v GetThemeConfigurationUiColorPalette) string { return v.Measure }).(pulumi.StringOutput)
}

// Color (hexadecimal) that applies to any text or other elements that appear over the measure color.
func (o GetThemeConfigurationUiColorPaletteOutput) MeasureForeground() pulumi.StringOutput {
	return o.ApplyT(func(v GetThemeConfigurationUiColorPalette) string { return v.MeasureForeground }).(pulumi.StringOutput)
}

// Color (hexadecimal) that applies to visuals and other high emphasis UI.
func (o GetThemeConfigurationUiColorPaletteOutput) PrimaryBackground() pulumi.StringOutput {
	return o.ApplyT(func(v GetThemeConfigurationUiColorPalette) string { return v.PrimaryBackground }).(pulumi.StringOutput)
}

// Color (hexadecimal) of text and other foreground elements that appear over the primary background regions, such as grid lines, borders, table banding, icons, and so on.
func (o GetThemeConfigurationUiColorPaletteOutput) PrimaryForeground() pulumi.StringOutput {
	return o.ApplyT(func(v GetThemeConfigurationUiColorPalette) string { return v.PrimaryForeground }).(pulumi.StringOutput)
}

// Color (hexadecimal) that applies to the sheet background and sheet controls.
func (o GetThemeConfigurationUiColorPaletteOutput) SecondaryBackground() pulumi.StringOutput {
	return o.ApplyT(func(v GetThemeConfigurationUiColorPalette) string { return v.SecondaryBackground }).(pulumi.StringOutput)
}

// Color (hexadecimal) that applies to any sheet title, sheet control text, or UI that appears over the secondary background.
func (o GetThemeConfigurationUiColorPaletteOutput) SecondaryForeground() pulumi.StringOutput {
	return o.ApplyT(func(v GetThemeConfigurationUiColorPalette) string { return v.SecondaryForeground }).(pulumi.StringOutput)
}

// Color (hexadecimal) that applies to success messages, for example the check mark for a successful download.
func (o GetThemeConfigurationUiColorPaletteOutput) Success() pulumi.StringOutput {
	return o.ApplyT(func(v GetThemeConfigurationUiColorPalette) string { return v.Success }).(pulumi.StringOutput)
}

// Color (hexadecimal) that applies to any text or other elements that appear over the success color.
func (o GetThemeConfigurationUiColorPaletteOutput) SuccessForeground() pulumi.StringOutput {
	return o.ApplyT(func(v GetThemeConfigurationUiColorPalette) string { return v.SuccessForeground }).(pulumi.StringOutput)
}

// Color (hexadecimal) that applies to warning and informational messages.
func (o GetThemeConfigurationUiColorPaletteOutput) Warning() pulumi.StringOutput {
	return o.ApplyT(func(v GetThemeConfigurationUiColorPalette) string { return v.Warning }).(pulumi.StringOutput)
}

// Color (hexadecimal) that applies to any text or other elements that appear over the warning color.
func (o GetThemeConfigurationUiColorPaletteOutput) WarningForeground() pulumi.StringOutput {
	return o.ApplyT(func(v GetThemeConfigurationUiColorPalette) string { return v.WarningForeground }).(pulumi.StringOutput)
}

type GetThemeConfigurationUiColorPaletteArrayOutput struct{ *pulumi.OutputState }

func (GetThemeConfigurationUiColorPaletteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetThemeConfigurationUiColorPalette)(nil)).Elem()
}

func (o GetThemeConfigurationUiColorPaletteArrayOutput) ToGetThemeConfigurationUiColorPaletteArrayOutput() GetThemeConfigurationUiColorPaletteArrayOutput {
	return o
}

func (o GetThemeConfigurationUiColorPaletteArrayOutput) ToGetThemeConfigurationUiColorPaletteArrayOutputWithContext(ctx context.Context) GetThemeConfigurationUiColorPaletteArrayOutput {
	return o
}

func (o GetThemeConfigurationUiColorPaletteArrayOutput) Index(i pulumi.IntInput) GetThemeConfigurationUiColorPaletteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetThemeConfigurationUiColorPalette {
		return vs[0].([]GetThemeConfigurationUiColorPalette)[vs[1].(int)]
	}).(GetThemeConfigurationUiColorPaletteOutput)
}

type GetThemePermission struct {
	// List of IAM actions to grant or revoke permissions on.
	Actions []string `pulumi:"actions"`
	// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
	Principal string `pulumi:"principal"`
}

// GetThemePermissionInput is an input type that accepts GetThemePermissionArgs and GetThemePermissionOutput values.
// You can construct a concrete instance of `GetThemePermissionInput` via:
//
//	GetThemePermissionArgs{...}
type GetThemePermissionInput interface {
	pulumi.Input

	ToGetThemePermissionOutput() GetThemePermissionOutput
	ToGetThemePermissionOutputWithContext(context.Context) GetThemePermissionOutput
}

type GetThemePermissionArgs struct {
	// List of IAM actions to grant or revoke permissions on.
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
	Principal pulumi.StringInput `pulumi:"principal"`
}

func (GetThemePermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemePermission)(nil)).Elem()
}

func (i GetThemePermissionArgs) ToGetThemePermissionOutput() GetThemePermissionOutput {
	return i.ToGetThemePermissionOutputWithContext(context.Background())
}

func (i GetThemePermissionArgs) ToGetThemePermissionOutputWithContext(ctx context.Context) GetThemePermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetThemePermissionOutput)
}

// GetThemePermissionArrayInput is an input type that accepts GetThemePermissionArray and GetThemePermissionArrayOutput values.
// You can construct a concrete instance of `GetThemePermissionArrayInput` via:
//
//	GetThemePermissionArray{ GetThemePermissionArgs{...} }
type GetThemePermissionArrayInput interface {
	pulumi.Input

	ToGetThemePermissionArrayOutput() GetThemePermissionArrayOutput
	ToGetThemePermissionArrayOutputWithContext(context.Context) GetThemePermissionArrayOutput
}

type GetThemePermissionArray []GetThemePermissionInput

func (GetThemePermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetThemePermission)(nil)).Elem()
}

func (i GetThemePermissionArray) ToGetThemePermissionArrayOutput() GetThemePermissionArrayOutput {
	return i.ToGetThemePermissionArrayOutputWithContext(context.Background())
}

func (i GetThemePermissionArray) ToGetThemePermissionArrayOutputWithContext(ctx context.Context) GetThemePermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetThemePermissionArrayOutput)
}

type GetThemePermissionOutput struct{ *pulumi.OutputState }

func (GetThemePermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThemePermission)(nil)).Elem()
}

func (o GetThemePermissionOutput) ToGetThemePermissionOutput() GetThemePermissionOutput {
	return o
}

func (o GetThemePermissionOutput) ToGetThemePermissionOutputWithContext(ctx context.Context) GetThemePermissionOutput {
	return o
}

// List of IAM actions to grant or revoke permissions on.
func (o GetThemePermissionOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetThemePermission) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
func (o GetThemePermissionOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v GetThemePermission) string { return v.Principal }).(pulumi.StringOutput)
}

type GetThemePermissionArrayOutput struct{ *pulumi.OutputState }

func (GetThemePermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetThemePermission)(nil)).Elem()
}

func (o GetThemePermissionArrayOutput) ToGetThemePermissionArrayOutput() GetThemePermissionArrayOutput {
	return o
}

func (o GetThemePermissionArrayOutput) ToGetThemePermissionArrayOutputWithContext(ctx context.Context) GetThemePermissionArrayOutput {
	return o
}

func (o GetThemePermissionArrayOutput) Index(i pulumi.IntInput) GetThemePermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetThemePermission {
		return vs[0].([]GetThemePermission)[vs[1].(int)]
	}).(GetThemePermissionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisParametersInput)(nil)).Elem(), AnalysisParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisParametersPtrInput)(nil)).Elem(), AnalysisParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisParametersDateTimeParameterInput)(nil)).Elem(), AnalysisParametersDateTimeParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisParametersDateTimeParameterArrayInput)(nil)).Elem(), AnalysisParametersDateTimeParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisParametersDecimalParameterInput)(nil)).Elem(), AnalysisParametersDecimalParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisParametersDecimalParameterArrayInput)(nil)).Elem(), AnalysisParametersDecimalParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisParametersIntegerParameterInput)(nil)).Elem(), AnalysisParametersIntegerParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisParametersIntegerParameterArrayInput)(nil)).Elem(), AnalysisParametersIntegerParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisParametersStringParameterInput)(nil)).Elem(), AnalysisParametersStringParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisParametersStringParameterArrayInput)(nil)).Elem(), AnalysisParametersStringParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisPermissionInput)(nil)).Elem(), AnalysisPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisPermissionArrayInput)(nil)).Elem(), AnalysisPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisSourceEntityInput)(nil)).Elem(), AnalysisSourceEntityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisSourceEntityPtrInput)(nil)).Elem(), AnalysisSourceEntityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisSourceEntitySourceTemplateInput)(nil)).Elem(), AnalysisSourceEntitySourceTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisSourceEntitySourceTemplatePtrInput)(nil)).Elem(), AnalysisSourceEntitySourceTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisSourceEntitySourceTemplateDataSetReferenceInput)(nil)).Elem(), AnalysisSourceEntitySourceTemplateDataSetReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisSourceEntitySourceTemplateDataSetReferenceArrayInput)(nil)).Elem(), AnalysisSourceEntitySourceTemplateDataSetReferenceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardDashboardPublishOptionsInput)(nil)).Elem(), DashboardDashboardPublishOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardDashboardPublishOptionsPtrInput)(nil)).Elem(), DashboardDashboardPublishOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardDashboardPublishOptionsAdHocFilteringOptionInput)(nil)).Elem(), DashboardDashboardPublishOptionsAdHocFilteringOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardDashboardPublishOptionsAdHocFilteringOptionPtrInput)(nil)).Elem(), DashboardDashboardPublishOptionsAdHocFilteringOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardDashboardPublishOptionsDataPointDrillUpDownOptionInput)(nil)).Elem(), DashboardDashboardPublishOptionsDataPointDrillUpDownOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrInput)(nil)).Elem(), DashboardDashboardPublishOptionsDataPointDrillUpDownOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardDashboardPublishOptionsDataPointMenuLabelOptionInput)(nil)).Elem(), DashboardDashboardPublishOptionsDataPointMenuLabelOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrInput)(nil)).Elem(), DashboardDashboardPublishOptionsDataPointMenuLabelOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardDashboardPublishOptionsDataPointTooltipOptionInput)(nil)).Elem(), DashboardDashboardPublishOptionsDataPointTooltipOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardDashboardPublishOptionsDataPointTooltipOptionPtrInput)(nil)).Elem(), DashboardDashboardPublishOptionsDataPointTooltipOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardDashboardPublishOptionsExportToCsvOptionInput)(nil)).Elem(), DashboardDashboardPublishOptionsExportToCsvOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardDashboardPublishOptionsExportToCsvOptionPtrInput)(nil)).Elem(), DashboardDashboardPublishOptionsExportToCsvOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionInput)(nil)).Elem(), DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrInput)(nil)).Elem(), DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardDashboardPublishOptionsSheetControlsOptionInput)(nil)).Elem(), DashboardDashboardPublishOptionsSheetControlsOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardDashboardPublishOptionsSheetControlsOptionPtrInput)(nil)).Elem(), DashboardDashboardPublishOptionsSheetControlsOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionInput)(nil)).Elem(), DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrInput)(nil)).Elem(), DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardDashboardPublishOptionsVisualAxisSortOptionInput)(nil)).Elem(), DashboardDashboardPublishOptionsVisualAxisSortOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardDashboardPublishOptionsVisualAxisSortOptionPtrInput)(nil)).Elem(), DashboardDashboardPublishOptionsVisualAxisSortOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardDashboardPublishOptionsVisualMenuOptionInput)(nil)).Elem(), DashboardDashboardPublishOptionsVisualMenuOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardDashboardPublishOptionsVisualMenuOptionPtrInput)(nil)).Elem(), DashboardDashboardPublishOptionsVisualMenuOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardParametersInput)(nil)).Elem(), DashboardParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardParametersPtrInput)(nil)).Elem(), DashboardParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardParametersDateTimeParameterInput)(nil)).Elem(), DashboardParametersDateTimeParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardParametersDateTimeParameterArrayInput)(nil)).Elem(), DashboardParametersDateTimeParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardParametersDecimalParameterInput)(nil)).Elem(), DashboardParametersDecimalParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardParametersDecimalParameterArrayInput)(nil)).Elem(), DashboardParametersDecimalParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardParametersIntegerParameterInput)(nil)).Elem(), DashboardParametersIntegerParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardParametersIntegerParameterArrayInput)(nil)).Elem(), DashboardParametersIntegerParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardParametersStringParameterInput)(nil)).Elem(), DashboardParametersStringParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardParametersStringParameterArrayInput)(nil)).Elem(), DashboardParametersStringParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardPermissionInput)(nil)).Elem(), DashboardPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardPermissionArrayInput)(nil)).Elem(), DashboardPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSourceEntityInput)(nil)).Elem(), DashboardSourceEntityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSourceEntityPtrInput)(nil)).Elem(), DashboardSourceEntityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSourceEntitySourceTemplateInput)(nil)).Elem(), DashboardSourceEntitySourceTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSourceEntitySourceTemplatePtrInput)(nil)).Elem(), DashboardSourceEntitySourceTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSourceEntitySourceTemplateDataSetReferenceInput)(nil)).Elem(), DashboardSourceEntitySourceTemplateDataSetReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSourceEntitySourceTemplateDataSetReferenceArrayInput)(nil)).Elem(), DashboardSourceEntitySourceTemplateDataSetReferenceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetColumnGroupInput)(nil)).Elem(), DataSetColumnGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetColumnGroupArrayInput)(nil)).Elem(), DataSetColumnGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetColumnGroupGeoSpatialColumnGroupInput)(nil)).Elem(), DataSetColumnGroupGeoSpatialColumnGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetColumnGroupGeoSpatialColumnGroupPtrInput)(nil)).Elem(), DataSetColumnGroupGeoSpatialColumnGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetColumnLevelPermissionRuleInput)(nil)).Elem(), DataSetColumnLevelPermissionRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetColumnLevelPermissionRuleArrayInput)(nil)).Elem(), DataSetColumnLevelPermissionRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetDataSetUsageConfigurationInput)(nil)).Elem(), DataSetDataSetUsageConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetDataSetUsageConfigurationPtrInput)(nil)).Elem(), DataSetDataSetUsageConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetFieldFolderInput)(nil)).Elem(), DataSetFieldFolderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetFieldFolderArrayInput)(nil)).Elem(), DataSetFieldFolderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetLogicalTableMapInput)(nil)).Elem(), DataSetLogicalTableMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetLogicalTableMapArrayInput)(nil)).Elem(), DataSetLogicalTableMapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetLogicalTableMapDataTransformInput)(nil)).Elem(), DataSetLogicalTableMapDataTransformArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetLogicalTableMapDataTransformArrayInput)(nil)).Elem(), DataSetLogicalTableMapDataTransformArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetLogicalTableMapDataTransformCastColumnTypeOperationInput)(nil)).Elem(), DataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrInput)(nil)).Elem(), DataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetLogicalTableMapDataTransformCreateColumnsOperationInput)(nil)).Elem(), DataSetLogicalTableMapDataTransformCreateColumnsOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetLogicalTableMapDataTransformCreateColumnsOperationPtrInput)(nil)).Elem(), DataSetLogicalTableMapDataTransformCreateColumnsOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnInput)(nil)).Elem(), DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayInput)(nil)).Elem(), DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetLogicalTableMapDataTransformFilterOperationInput)(nil)).Elem(), DataSetLogicalTableMapDataTransformFilterOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetLogicalTableMapDataTransformFilterOperationPtrInput)(nil)).Elem(), DataSetLogicalTableMapDataTransformFilterOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetLogicalTableMapDataTransformProjectOperationInput)(nil)).Elem(), DataSetLogicalTableMapDataTransformProjectOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetLogicalTableMapDataTransformProjectOperationPtrInput)(nil)).Elem(), DataSetLogicalTableMapDataTransformProjectOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetLogicalTableMapDataTransformRenameColumnOperationInput)(nil)).Elem(), DataSetLogicalTableMapDataTransformRenameColumnOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetLogicalTableMapDataTransformRenameColumnOperationPtrInput)(nil)).Elem(), DataSetLogicalTableMapDataTransformRenameColumnOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetLogicalTableMapDataTransformTagColumnOperationInput)(nil)).Elem(), DataSetLogicalTableMapDataTransformTagColumnOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetLogicalTableMapDataTransformTagColumnOperationPtrInput)(nil)).Elem(), DataSetLogicalTableMapDataTransformTagColumnOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetLogicalTableMapDataTransformTagColumnOperationTagInput)(nil)).Elem(), DataSetLogicalTableMapDataTransformTagColumnOperationTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetLogicalTableMapDataTransformTagColumnOperationTagArrayInput)(nil)).Elem(), DataSetLogicalTableMapDataTransformTagColumnOperationTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionInput)(nil)).Elem(), DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrInput)(nil)).Elem(), DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetLogicalTableMapDataTransformUntagColumnOperationInput)(nil)).Elem(), DataSetLogicalTableMapDataTransformUntagColumnOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetLogicalTableMapDataTransformUntagColumnOperationPtrInput)(nil)).Elem(), DataSetLogicalTableMapDataTransformUntagColumnOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetLogicalTableMapSourceInput)(nil)).Elem(), DataSetLogicalTableMapSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetLogicalTableMapSourceJoinInstructionInput)(nil)).Elem(), DataSetLogicalTableMapSourceJoinInstructionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetLogicalTableMapSourceJoinInstructionPtrInput)(nil)).Elem(), DataSetLogicalTableMapSourceJoinInstructionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesInput)(nil)).Elem(), DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrInput)(nil)).Elem(), DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesInput)(nil)).Elem(), DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrInput)(nil)).Elem(), DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetOutputColumnInput)(nil)).Elem(), DataSetOutputColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetOutputColumnArrayInput)(nil)).Elem(), DataSetOutputColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetPermissionInput)(nil)).Elem(), DataSetPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetPermissionArrayInput)(nil)).Elem(), DataSetPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetPhysicalTableMapInput)(nil)).Elem(), DataSetPhysicalTableMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetPhysicalTableMapArrayInput)(nil)).Elem(), DataSetPhysicalTableMapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetPhysicalTableMapCustomSqlInput)(nil)).Elem(), DataSetPhysicalTableMapCustomSqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetPhysicalTableMapCustomSqlPtrInput)(nil)).Elem(), DataSetPhysicalTableMapCustomSqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetPhysicalTableMapCustomSqlColumnInput)(nil)).Elem(), DataSetPhysicalTableMapCustomSqlColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetPhysicalTableMapCustomSqlColumnArrayInput)(nil)).Elem(), DataSetPhysicalTableMapCustomSqlColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetPhysicalTableMapRelationalTableInput)(nil)).Elem(), DataSetPhysicalTableMapRelationalTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetPhysicalTableMapRelationalTablePtrInput)(nil)).Elem(), DataSetPhysicalTableMapRelationalTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetPhysicalTableMapRelationalTableInputColumnInput)(nil)).Elem(), DataSetPhysicalTableMapRelationalTableInputColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetPhysicalTableMapRelationalTableInputColumnArrayInput)(nil)).Elem(), DataSetPhysicalTableMapRelationalTableInputColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetPhysicalTableMapS3SourceInput)(nil)).Elem(), DataSetPhysicalTableMapS3SourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetPhysicalTableMapS3SourcePtrInput)(nil)).Elem(), DataSetPhysicalTableMapS3SourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetPhysicalTableMapS3SourceInputColumnInput)(nil)).Elem(), DataSetPhysicalTableMapS3SourceInputColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetPhysicalTableMapS3SourceInputColumnArrayInput)(nil)).Elem(), DataSetPhysicalTableMapS3SourceInputColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetPhysicalTableMapS3SourceUploadSettingsInput)(nil)).Elem(), DataSetPhysicalTableMapS3SourceUploadSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetPhysicalTableMapS3SourceUploadSettingsPtrInput)(nil)).Elem(), DataSetPhysicalTableMapS3SourceUploadSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetRefreshPropertiesInput)(nil)).Elem(), DataSetRefreshPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetRefreshPropertiesPtrInput)(nil)).Elem(), DataSetRefreshPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetRefreshPropertiesRefreshConfigurationInput)(nil)).Elem(), DataSetRefreshPropertiesRefreshConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetRefreshPropertiesRefreshConfigurationPtrInput)(nil)).Elem(), DataSetRefreshPropertiesRefreshConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshInput)(nil)).Elem(), DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrInput)(nil)).Elem(), DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowInput)(nil)).Elem(), DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrInput)(nil)).Elem(), DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetRowLevelPermissionDataSetInput)(nil)).Elem(), DataSetRowLevelPermissionDataSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetRowLevelPermissionDataSetPtrInput)(nil)).Elem(), DataSetRowLevelPermissionDataSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetRowLevelPermissionTagConfigurationInput)(nil)).Elem(), DataSetRowLevelPermissionTagConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetRowLevelPermissionTagConfigurationPtrInput)(nil)).Elem(), DataSetRowLevelPermissionTagConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetRowLevelPermissionTagConfigurationTagRuleInput)(nil)).Elem(), DataSetRowLevelPermissionTagConfigurationTagRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetRowLevelPermissionTagConfigurationTagRuleArrayInput)(nil)).Elem(), DataSetRowLevelPermissionTagConfigurationTagRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceCredentialsInput)(nil)).Elem(), DataSourceCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceCredentialsPtrInput)(nil)).Elem(), DataSourceCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceCredentialsCredentialPairInput)(nil)).Elem(), DataSourceCredentialsCredentialPairArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceCredentialsCredentialPairPtrInput)(nil)).Elem(), DataSourceCredentialsCredentialPairArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersInput)(nil)).Elem(), DataSourceParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersPtrInput)(nil)).Elem(), DataSourceParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersAmazonElasticsearchInput)(nil)).Elem(), DataSourceParametersAmazonElasticsearchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersAmazonElasticsearchPtrInput)(nil)).Elem(), DataSourceParametersAmazonElasticsearchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersAthenaInput)(nil)).Elem(), DataSourceParametersAthenaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersAthenaPtrInput)(nil)).Elem(), DataSourceParametersAthenaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersAuroraInput)(nil)).Elem(), DataSourceParametersAuroraArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersAuroraPtrInput)(nil)).Elem(), DataSourceParametersAuroraArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersAuroraPostgresqlInput)(nil)).Elem(), DataSourceParametersAuroraPostgresqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersAuroraPostgresqlPtrInput)(nil)).Elem(), DataSourceParametersAuroraPostgresqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersAwsIotAnalyticsInput)(nil)).Elem(), DataSourceParametersAwsIotAnalyticsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersAwsIotAnalyticsPtrInput)(nil)).Elem(), DataSourceParametersAwsIotAnalyticsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersJiraInput)(nil)).Elem(), DataSourceParametersJiraArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersJiraPtrInput)(nil)).Elem(), DataSourceParametersJiraArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersMariaDbInput)(nil)).Elem(), DataSourceParametersMariaDbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersMariaDbPtrInput)(nil)).Elem(), DataSourceParametersMariaDbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersMysqlInput)(nil)).Elem(), DataSourceParametersMysqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersMysqlPtrInput)(nil)).Elem(), DataSourceParametersMysqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersOracleInput)(nil)).Elem(), DataSourceParametersOracleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersOraclePtrInput)(nil)).Elem(), DataSourceParametersOracleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersPostgresqlInput)(nil)).Elem(), DataSourceParametersPostgresqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersPostgresqlPtrInput)(nil)).Elem(), DataSourceParametersPostgresqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersPrestoInput)(nil)).Elem(), DataSourceParametersPrestoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersPrestoPtrInput)(nil)).Elem(), DataSourceParametersPrestoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersRdsInput)(nil)).Elem(), DataSourceParametersRdsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersRdsPtrInput)(nil)).Elem(), DataSourceParametersRdsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersRedshiftInput)(nil)).Elem(), DataSourceParametersRedshiftArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersRedshiftPtrInput)(nil)).Elem(), DataSourceParametersRedshiftArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersS3Input)(nil)).Elem(), DataSourceParametersS3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersS3PtrInput)(nil)).Elem(), DataSourceParametersS3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersS3ManifestFileLocationInput)(nil)).Elem(), DataSourceParametersS3ManifestFileLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersS3ManifestFileLocationPtrInput)(nil)).Elem(), DataSourceParametersS3ManifestFileLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersServiceNowInput)(nil)).Elem(), DataSourceParametersServiceNowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersServiceNowPtrInput)(nil)).Elem(), DataSourceParametersServiceNowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersSnowflakeInput)(nil)).Elem(), DataSourceParametersSnowflakeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersSnowflakePtrInput)(nil)).Elem(), DataSourceParametersSnowflakeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersSparkInput)(nil)).Elem(), DataSourceParametersSparkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersSparkPtrInput)(nil)).Elem(), DataSourceParametersSparkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersSqlServerInput)(nil)).Elem(), DataSourceParametersSqlServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersSqlServerPtrInput)(nil)).Elem(), DataSourceParametersSqlServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersTeradataInput)(nil)).Elem(), DataSourceParametersTeradataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersTeradataPtrInput)(nil)).Elem(), DataSourceParametersTeradataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersTwitterInput)(nil)).Elem(), DataSourceParametersTwitterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersTwitterPtrInput)(nil)).Elem(), DataSourceParametersTwitterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourcePermissionInput)(nil)).Elem(), DataSourcePermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourcePermissionArrayInput)(nil)).Elem(), DataSourcePermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceSslPropertiesInput)(nil)).Elem(), DataSourceSslPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceSslPropertiesPtrInput)(nil)).Elem(), DataSourceSslPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceVpcConnectionPropertiesInput)(nil)).Elem(), DataSourceVpcConnectionPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceVpcConnectionPropertiesPtrInput)(nil)).Elem(), DataSourceVpcConnectionPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FolderPermissionInput)(nil)).Elem(), FolderPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FolderPermissionArrayInput)(nil)).Elem(), FolderPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamPolicyAssignmentIdentitiesInput)(nil)).Elem(), IamPolicyAssignmentIdentitiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamPolicyAssignmentIdentitiesPtrInput)(nil)).Elem(), IamPolicyAssignmentIdentitiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceTimeoutsInput)(nil)).Elem(), NamespaceTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceTimeoutsPtrInput)(nil)).Elem(), NamespaceTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RefreshScheduleScheduleInput)(nil)).Elem(), RefreshScheduleScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RefreshScheduleSchedulePtrInput)(nil)).Elem(), RefreshScheduleScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RefreshScheduleScheduleScheduleFrequencyInput)(nil)).Elem(), RefreshScheduleScheduleScheduleFrequencyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RefreshScheduleScheduleScheduleFrequencyPtrInput)(nil)).Elem(), RefreshScheduleScheduleScheduleFrequencyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RefreshScheduleScheduleScheduleFrequencyRefreshOnDayInput)(nil)).Elem(), RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrInput)(nil)).Elem(), RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePermissionInput)(nil)).Elem(), TemplatePermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePermissionArrayInput)(nil)).Elem(), TemplatePermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSourceEntityInput)(nil)).Elem(), TemplateSourceEntityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSourceEntityPtrInput)(nil)).Elem(), TemplateSourceEntityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSourceEntitySourceAnalysisInput)(nil)).Elem(), TemplateSourceEntitySourceAnalysisArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSourceEntitySourceAnalysisPtrInput)(nil)).Elem(), TemplateSourceEntitySourceAnalysisArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSourceEntitySourceAnalysisDataSetReferenceInput)(nil)).Elem(), TemplateSourceEntitySourceAnalysisDataSetReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSourceEntitySourceAnalysisDataSetReferenceArrayInput)(nil)).Elem(), TemplateSourceEntitySourceAnalysisDataSetReferenceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSourceEntitySourceTemplateInput)(nil)).Elem(), TemplateSourceEntitySourceTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSourceEntitySourceTemplatePtrInput)(nil)).Elem(), TemplateSourceEntitySourceTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeConfigurationInput)(nil)).Elem(), ThemeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeConfigurationPtrInput)(nil)).Elem(), ThemeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeConfigurationDataColorPaletteInput)(nil)).Elem(), ThemeConfigurationDataColorPaletteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeConfigurationDataColorPalettePtrInput)(nil)).Elem(), ThemeConfigurationDataColorPaletteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeConfigurationSheetInput)(nil)).Elem(), ThemeConfigurationSheetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeConfigurationSheetPtrInput)(nil)).Elem(), ThemeConfigurationSheetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeConfigurationSheetTileInput)(nil)).Elem(), ThemeConfigurationSheetTileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeConfigurationSheetTilePtrInput)(nil)).Elem(), ThemeConfigurationSheetTileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeConfigurationSheetTileBorderInput)(nil)).Elem(), ThemeConfigurationSheetTileBorderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeConfigurationSheetTileBorderPtrInput)(nil)).Elem(), ThemeConfigurationSheetTileBorderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeConfigurationSheetTileLayoutInput)(nil)).Elem(), ThemeConfigurationSheetTileLayoutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeConfigurationSheetTileLayoutPtrInput)(nil)).Elem(), ThemeConfigurationSheetTileLayoutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeConfigurationSheetTileLayoutGutterInput)(nil)).Elem(), ThemeConfigurationSheetTileLayoutGutterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeConfigurationSheetTileLayoutGutterPtrInput)(nil)).Elem(), ThemeConfigurationSheetTileLayoutGutterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeConfigurationSheetTileLayoutMarginInput)(nil)).Elem(), ThemeConfigurationSheetTileLayoutMarginArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeConfigurationSheetTileLayoutMarginPtrInput)(nil)).Elem(), ThemeConfigurationSheetTileLayoutMarginArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeConfigurationTypographyInput)(nil)).Elem(), ThemeConfigurationTypographyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeConfigurationTypographyPtrInput)(nil)).Elem(), ThemeConfigurationTypographyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeConfigurationTypographyFontFamilyInput)(nil)).Elem(), ThemeConfigurationTypographyFontFamilyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeConfigurationTypographyFontFamilyArrayInput)(nil)).Elem(), ThemeConfigurationTypographyFontFamilyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeConfigurationUiColorPaletteInput)(nil)).Elem(), ThemeConfigurationUiColorPaletteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeConfigurationUiColorPalettePtrInput)(nil)).Elem(), ThemeConfigurationUiColorPaletteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemePermissionInput)(nil)).Elem(), ThemePermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemePermissionArrayInput)(nil)).Elem(), ThemePermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcConnectionTimeoutsInput)(nil)).Elem(), VpcConnectionTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcConnectionTimeoutsPtrInput)(nil)).Elem(), VpcConnectionTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetColumnGroupInput)(nil)).Elem(), GetDataSetColumnGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetColumnGroupArrayInput)(nil)).Elem(), GetDataSetColumnGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetColumnGroupGeoSpatialColumnGroupInput)(nil)).Elem(), GetDataSetColumnGroupGeoSpatialColumnGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetColumnGroupGeoSpatialColumnGroupArrayInput)(nil)).Elem(), GetDataSetColumnGroupGeoSpatialColumnGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetColumnLevelPermissionRuleInput)(nil)).Elem(), GetDataSetColumnLevelPermissionRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetColumnLevelPermissionRuleArrayInput)(nil)).Elem(), GetDataSetColumnLevelPermissionRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetDataSetUsageConfigurationInput)(nil)).Elem(), GetDataSetDataSetUsageConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetDataSetUsageConfigurationArrayInput)(nil)).Elem(), GetDataSetDataSetUsageConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetFieldFolderInput)(nil)).Elem(), GetDataSetFieldFolderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetFieldFolderArrayInput)(nil)).Elem(), GetDataSetFieldFolderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetLogicalTableMapInput)(nil)).Elem(), GetDataSetLogicalTableMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetLogicalTableMapArrayInput)(nil)).Elem(), GetDataSetLogicalTableMapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformInput)(nil)).Elem(), GetDataSetLogicalTableMapDataTransformArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformArrayInput)(nil)).Elem(), GetDataSetLogicalTableMapDataTransformArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationInput)(nil)).Elem(), GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArrayInput)(nil)).Elem(), GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformCreateColumnsOperationInput)(nil)).Elem(), GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArrayInput)(nil)).Elem(), GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnInput)(nil)).Elem(), GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayInput)(nil)).Elem(), GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformFilterOperationInput)(nil)).Elem(), GetDataSetLogicalTableMapDataTransformFilterOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformFilterOperationArrayInput)(nil)).Elem(), GetDataSetLogicalTableMapDataTransformFilterOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformProjectOperationInput)(nil)).Elem(), GetDataSetLogicalTableMapDataTransformProjectOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformProjectOperationArrayInput)(nil)).Elem(), GetDataSetLogicalTableMapDataTransformProjectOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformRenameColumnOperationInput)(nil)).Elem(), GetDataSetLogicalTableMapDataTransformRenameColumnOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformRenameColumnOperationArrayInput)(nil)).Elem(), GetDataSetLogicalTableMapDataTransformRenameColumnOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformTagColumnOperationInput)(nil)).Elem(), GetDataSetLogicalTableMapDataTransformTagColumnOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformTagColumnOperationArrayInput)(nil)).Elem(), GetDataSetLogicalTableMapDataTransformTagColumnOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformTagColumnOperationTagInput)(nil)).Elem(), GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArrayInput)(nil)).Elem(), GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionInput)(nil)).Elem(), GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArrayInput)(nil)).Elem(), GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformUntagColumnOperationInput)(nil)).Elem(), GetDataSetLogicalTableMapDataTransformUntagColumnOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetLogicalTableMapDataTransformUntagColumnOperationArrayInput)(nil)).Elem(), GetDataSetLogicalTableMapDataTransformUntagColumnOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetLogicalTableMapSourceInput)(nil)).Elem(), GetDataSetLogicalTableMapSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetLogicalTableMapSourceArrayInput)(nil)).Elem(), GetDataSetLogicalTableMapSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetLogicalTableMapSourceJoinInstructionInput)(nil)).Elem(), GetDataSetLogicalTableMapSourceJoinInstructionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetLogicalTableMapSourceJoinInstructionArrayInput)(nil)).Elem(), GetDataSetLogicalTableMapSourceJoinInstructionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyInput)(nil)).Elem(), GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArrayInput)(nil)).Elem(), GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyInput)(nil)).Elem(), GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArrayInput)(nil)).Elem(), GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetPermissionInput)(nil)).Elem(), GetDataSetPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetPermissionArrayInput)(nil)).Elem(), GetDataSetPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetPhysicalTableMapInput)(nil)).Elem(), GetDataSetPhysicalTableMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetPhysicalTableMapArrayInput)(nil)).Elem(), GetDataSetPhysicalTableMapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetPhysicalTableMapCustomSqlInput)(nil)).Elem(), GetDataSetPhysicalTableMapCustomSqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetPhysicalTableMapCustomSqlArrayInput)(nil)).Elem(), GetDataSetPhysicalTableMapCustomSqlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetPhysicalTableMapCustomSqlColumnInput)(nil)).Elem(), GetDataSetPhysicalTableMapCustomSqlColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetPhysicalTableMapCustomSqlColumnArrayInput)(nil)).Elem(), GetDataSetPhysicalTableMapCustomSqlColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetPhysicalTableMapRelationalTableInput)(nil)).Elem(), GetDataSetPhysicalTableMapRelationalTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetPhysicalTableMapRelationalTableArrayInput)(nil)).Elem(), GetDataSetPhysicalTableMapRelationalTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetPhysicalTableMapRelationalTableInputColumnInput)(nil)).Elem(), GetDataSetPhysicalTableMapRelationalTableInputColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetPhysicalTableMapRelationalTableInputColumnArrayInput)(nil)).Elem(), GetDataSetPhysicalTableMapRelationalTableInputColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetPhysicalTableMapS3SourceInput)(nil)).Elem(), GetDataSetPhysicalTableMapS3SourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetPhysicalTableMapS3SourceArrayInput)(nil)).Elem(), GetDataSetPhysicalTableMapS3SourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetPhysicalTableMapS3SourceInputColumnInput)(nil)).Elem(), GetDataSetPhysicalTableMapS3SourceInputColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetPhysicalTableMapS3SourceInputColumnArrayInput)(nil)).Elem(), GetDataSetPhysicalTableMapS3SourceInputColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetPhysicalTableMapS3SourceUploadSettingInput)(nil)).Elem(), GetDataSetPhysicalTableMapS3SourceUploadSettingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetPhysicalTableMapS3SourceUploadSettingArrayInput)(nil)).Elem(), GetDataSetPhysicalTableMapS3SourceUploadSettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetRowLevelPermissionDataSetInput)(nil)).Elem(), GetDataSetRowLevelPermissionDataSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetRowLevelPermissionDataSetArrayInput)(nil)).Elem(), GetDataSetRowLevelPermissionDataSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetRowLevelPermissionTagConfigurationInput)(nil)).Elem(), GetDataSetRowLevelPermissionTagConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetRowLevelPermissionTagConfigurationArrayInput)(nil)).Elem(), GetDataSetRowLevelPermissionTagConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetRowLevelPermissionTagConfigurationTagRuleInput)(nil)).Elem(), GetDataSetRowLevelPermissionTagConfigurationTagRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataSetRowLevelPermissionTagConfigurationTagRuleArrayInput)(nil)).Elem(), GetDataSetRowLevelPermissionTagConfigurationTagRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetThemeConfigurationInput)(nil)).Elem(), GetThemeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetThemeConfigurationArrayInput)(nil)).Elem(), GetThemeConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetThemeConfigurationDataColorPaletteInput)(nil)).Elem(), GetThemeConfigurationDataColorPaletteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetThemeConfigurationDataColorPaletteArrayInput)(nil)).Elem(), GetThemeConfigurationDataColorPaletteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetThemeConfigurationSheetInput)(nil)).Elem(), GetThemeConfigurationSheetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetThemeConfigurationSheetArrayInput)(nil)).Elem(), GetThemeConfigurationSheetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetThemeConfigurationSheetTileInput)(nil)).Elem(), GetThemeConfigurationSheetTileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetThemeConfigurationSheetTileArrayInput)(nil)).Elem(), GetThemeConfigurationSheetTileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetThemeConfigurationSheetTileBorderInput)(nil)).Elem(), GetThemeConfigurationSheetTileBorderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetThemeConfigurationSheetTileBorderArrayInput)(nil)).Elem(), GetThemeConfigurationSheetTileBorderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetThemeConfigurationSheetTileLayoutInput)(nil)).Elem(), GetThemeConfigurationSheetTileLayoutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetThemeConfigurationSheetTileLayoutArrayInput)(nil)).Elem(), GetThemeConfigurationSheetTileLayoutArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetThemeConfigurationSheetTileLayoutGutterInput)(nil)).Elem(), GetThemeConfigurationSheetTileLayoutGutterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetThemeConfigurationSheetTileLayoutGutterArrayInput)(nil)).Elem(), GetThemeConfigurationSheetTileLayoutGutterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetThemeConfigurationSheetTileLayoutMarginInput)(nil)).Elem(), GetThemeConfigurationSheetTileLayoutMarginArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetThemeConfigurationSheetTileLayoutMarginArrayInput)(nil)).Elem(), GetThemeConfigurationSheetTileLayoutMarginArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetThemeConfigurationTypographyInput)(nil)).Elem(), GetThemeConfigurationTypographyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetThemeConfigurationTypographyArrayInput)(nil)).Elem(), GetThemeConfigurationTypographyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetThemeConfigurationTypographyFontFamilyInput)(nil)).Elem(), GetThemeConfigurationTypographyFontFamilyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetThemeConfigurationTypographyFontFamilyArrayInput)(nil)).Elem(), GetThemeConfigurationTypographyFontFamilyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetThemeConfigurationUiColorPaletteInput)(nil)).Elem(), GetThemeConfigurationUiColorPaletteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetThemeConfigurationUiColorPaletteArrayInput)(nil)).Elem(), GetThemeConfigurationUiColorPaletteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetThemePermissionInput)(nil)).Elem(), GetThemePermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetThemePermissionArrayInput)(nil)).Elem(), GetThemePermissionArray{})
	pulumi.RegisterOutputType(AnalysisParametersOutput{})
	pulumi.RegisterOutputType(AnalysisParametersPtrOutput{})
	pulumi.RegisterOutputType(AnalysisParametersDateTimeParameterOutput{})
	pulumi.RegisterOutputType(AnalysisParametersDateTimeParameterArrayOutput{})
	pulumi.RegisterOutputType(AnalysisParametersDecimalParameterOutput{})
	pulumi.RegisterOutputType(AnalysisParametersDecimalParameterArrayOutput{})
	pulumi.RegisterOutputType(AnalysisParametersIntegerParameterOutput{})
	pulumi.RegisterOutputType(AnalysisParametersIntegerParameterArrayOutput{})
	pulumi.RegisterOutputType(AnalysisParametersStringParameterOutput{})
	pulumi.RegisterOutputType(AnalysisParametersStringParameterArrayOutput{})
	pulumi.RegisterOutputType(AnalysisPermissionOutput{})
	pulumi.RegisterOutputType(AnalysisPermissionArrayOutput{})
	pulumi.RegisterOutputType(AnalysisSourceEntityOutput{})
	pulumi.RegisterOutputType(AnalysisSourceEntityPtrOutput{})
	pulumi.RegisterOutputType(AnalysisSourceEntitySourceTemplateOutput{})
	pulumi.RegisterOutputType(AnalysisSourceEntitySourceTemplatePtrOutput{})
	pulumi.RegisterOutputType(AnalysisSourceEntitySourceTemplateDataSetReferenceOutput{})
	pulumi.RegisterOutputType(AnalysisSourceEntitySourceTemplateDataSetReferenceArrayOutput{})
	pulumi.RegisterOutputType(DashboardDashboardPublishOptionsOutput{})
	pulumi.RegisterOutputType(DashboardDashboardPublishOptionsPtrOutput{})
	pulumi.RegisterOutputType(DashboardDashboardPublishOptionsAdHocFilteringOptionOutput{})
	pulumi.RegisterOutputType(DashboardDashboardPublishOptionsAdHocFilteringOptionPtrOutput{})
	pulumi.RegisterOutputType(DashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutput{})
	pulumi.RegisterOutputType(DashboardDashboardPublishOptionsDataPointDrillUpDownOptionPtrOutput{})
	pulumi.RegisterOutputType(DashboardDashboardPublishOptionsDataPointMenuLabelOptionOutput{})
	pulumi.RegisterOutputType(DashboardDashboardPublishOptionsDataPointMenuLabelOptionPtrOutput{})
	pulumi.RegisterOutputType(DashboardDashboardPublishOptionsDataPointTooltipOptionOutput{})
	pulumi.RegisterOutputType(DashboardDashboardPublishOptionsDataPointTooltipOptionPtrOutput{})
	pulumi.RegisterOutputType(DashboardDashboardPublishOptionsExportToCsvOptionOutput{})
	pulumi.RegisterOutputType(DashboardDashboardPublishOptionsExportToCsvOptionPtrOutput{})
	pulumi.RegisterOutputType(DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutput{})
	pulumi.RegisterOutputType(DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionPtrOutput{})
	pulumi.RegisterOutputType(DashboardDashboardPublishOptionsSheetControlsOptionOutput{})
	pulumi.RegisterOutputType(DashboardDashboardPublishOptionsSheetControlsOptionPtrOutput{})
	pulumi.RegisterOutputType(DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutput{})
	pulumi.RegisterOutputType(DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionPtrOutput{})
	pulumi.RegisterOutputType(DashboardDashboardPublishOptionsVisualAxisSortOptionOutput{})
	pulumi.RegisterOutputType(DashboardDashboardPublishOptionsVisualAxisSortOptionPtrOutput{})
	pulumi.RegisterOutputType(DashboardDashboardPublishOptionsVisualMenuOptionOutput{})
	pulumi.RegisterOutputType(DashboardDashboardPublishOptionsVisualMenuOptionPtrOutput{})
	pulumi.RegisterOutputType(DashboardParametersOutput{})
	pulumi.RegisterOutputType(DashboardParametersPtrOutput{})
	pulumi.RegisterOutputType(DashboardParametersDateTimeParameterOutput{})
	pulumi.RegisterOutputType(DashboardParametersDateTimeParameterArrayOutput{})
	pulumi.RegisterOutputType(DashboardParametersDecimalParameterOutput{})
	pulumi.RegisterOutputType(DashboardParametersDecimalParameterArrayOutput{})
	pulumi.RegisterOutputType(DashboardParametersIntegerParameterOutput{})
	pulumi.RegisterOutputType(DashboardParametersIntegerParameterArrayOutput{})
	pulumi.RegisterOutputType(DashboardParametersStringParameterOutput{})
	pulumi.RegisterOutputType(DashboardParametersStringParameterArrayOutput{})
	pulumi.RegisterOutputType(DashboardPermissionOutput{})
	pulumi.RegisterOutputType(DashboardPermissionArrayOutput{})
	pulumi.RegisterOutputType(DashboardSourceEntityOutput{})
	pulumi.RegisterOutputType(DashboardSourceEntityPtrOutput{})
	pulumi.RegisterOutputType(DashboardSourceEntitySourceTemplateOutput{})
	pulumi.RegisterOutputType(DashboardSourceEntitySourceTemplatePtrOutput{})
	pulumi.RegisterOutputType(DashboardSourceEntitySourceTemplateDataSetReferenceOutput{})
	pulumi.RegisterOutputType(DashboardSourceEntitySourceTemplateDataSetReferenceArrayOutput{})
	pulumi.RegisterOutputType(DataSetColumnGroupOutput{})
	pulumi.RegisterOutputType(DataSetColumnGroupArrayOutput{})
	pulumi.RegisterOutputType(DataSetColumnGroupGeoSpatialColumnGroupOutput{})
	pulumi.RegisterOutputType(DataSetColumnGroupGeoSpatialColumnGroupPtrOutput{})
	pulumi.RegisterOutputType(DataSetColumnLevelPermissionRuleOutput{})
	pulumi.RegisterOutputType(DataSetColumnLevelPermissionRuleArrayOutput{})
	pulumi.RegisterOutputType(DataSetDataSetUsageConfigurationOutput{})
	pulumi.RegisterOutputType(DataSetDataSetUsageConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DataSetFieldFolderOutput{})
	pulumi.RegisterOutputType(DataSetFieldFolderArrayOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapArrayOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapDataTransformOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapDataTransformArrayOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapDataTransformCastColumnTypeOperationPtrOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapDataTransformCreateColumnsOperationOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapDataTransformCreateColumnsOperationPtrOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapDataTransformFilterOperationOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapDataTransformFilterOperationPtrOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapDataTransformProjectOperationOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapDataTransformProjectOperationPtrOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapDataTransformRenameColumnOperationOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapDataTransformRenameColumnOperationPtrOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapDataTransformTagColumnOperationOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapDataTransformTagColumnOperationPtrOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapDataTransformTagColumnOperationTagOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionPtrOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapDataTransformUntagColumnOperationOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapDataTransformUntagColumnOperationPtrOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapSourceOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapSourceJoinInstructionOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapSourceJoinInstructionPtrOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesPtrOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesPtrOutput{})
	pulumi.RegisterOutputType(DataSetOutputColumnOutput{})
	pulumi.RegisterOutputType(DataSetOutputColumnArrayOutput{})
	pulumi.RegisterOutputType(DataSetPermissionOutput{})
	pulumi.RegisterOutputType(DataSetPermissionArrayOutput{})
	pulumi.RegisterOutputType(DataSetPhysicalTableMapOutput{})
	pulumi.RegisterOutputType(DataSetPhysicalTableMapArrayOutput{})
	pulumi.RegisterOutputType(DataSetPhysicalTableMapCustomSqlOutput{})
	pulumi.RegisterOutputType(DataSetPhysicalTableMapCustomSqlPtrOutput{})
	pulumi.RegisterOutputType(DataSetPhysicalTableMapCustomSqlColumnOutput{})
	pulumi.RegisterOutputType(DataSetPhysicalTableMapCustomSqlColumnArrayOutput{})
	pulumi.RegisterOutputType(DataSetPhysicalTableMapRelationalTableOutput{})
	pulumi.RegisterOutputType(DataSetPhysicalTableMapRelationalTablePtrOutput{})
	pulumi.RegisterOutputType(DataSetPhysicalTableMapRelationalTableInputColumnOutput{})
	pulumi.RegisterOutputType(DataSetPhysicalTableMapRelationalTableInputColumnArrayOutput{})
	pulumi.RegisterOutputType(DataSetPhysicalTableMapS3SourceOutput{})
	pulumi.RegisterOutputType(DataSetPhysicalTableMapS3SourcePtrOutput{})
	pulumi.RegisterOutputType(DataSetPhysicalTableMapS3SourceInputColumnOutput{})
	pulumi.RegisterOutputType(DataSetPhysicalTableMapS3SourceInputColumnArrayOutput{})
	pulumi.RegisterOutputType(DataSetPhysicalTableMapS3SourceUploadSettingsOutput{})
	pulumi.RegisterOutputType(DataSetPhysicalTableMapS3SourceUploadSettingsPtrOutput{})
	pulumi.RegisterOutputType(DataSetRefreshPropertiesOutput{})
	pulumi.RegisterOutputType(DataSetRefreshPropertiesPtrOutput{})
	pulumi.RegisterOutputType(DataSetRefreshPropertiesRefreshConfigurationOutput{})
	pulumi.RegisterOutputType(DataSetRefreshPropertiesRefreshConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshOutput{})
	pulumi.RegisterOutputType(DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshPtrOutput{})
	pulumi.RegisterOutputType(DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowOutput{})
	pulumi.RegisterOutputType(DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowPtrOutput{})
	pulumi.RegisterOutputType(DataSetRowLevelPermissionDataSetOutput{})
	pulumi.RegisterOutputType(DataSetRowLevelPermissionDataSetPtrOutput{})
	pulumi.RegisterOutputType(DataSetRowLevelPermissionTagConfigurationOutput{})
	pulumi.RegisterOutputType(DataSetRowLevelPermissionTagConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DataSetRowLevelPermissionTagConfigurationTagRuleOutput{})
	pulumi.RegisterOutputType(DataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput{})
	pulumi.RegisterOutputType(DataSourceCredentialsOutput{})
	pulumi.RegisterOutputType(DataSourceCredentialsPtrOutput{})
	pulumi.RegisterOutputType(DataSourceCredentialsCredentialPairOutput{})
	pulumi.RegisterOutputType(DataSourceCredentialsCredentialPairPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersOutput{})
	pulumi.RegisterOutputType(DataSourceParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersAmazonElasticsearchOutput{})
	pulumi.RegisterOutputType(DataSourceParametersAmazonElasticsearchPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersAthenaOutput{})
	pulumi.RegisterOutputType(DataSourceParametersAthenaPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersAuroraOutput{})
	pulumi.RegisterOutputType(DataSourceParametersAuroraPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersAuroraPostgresqlOutput{})
	pulumi.RegisterOutputType(DataSourceParametersAuroraPostgresqlPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersAwsIotAnalyticsOutput{})
	pulumi.RegisterOutputType(DataSourceParametersAwsIotAnalyticsPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersJiraOutput{})
	pulumi.RegisterOutputType(DataSourceParametersJiraPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersMariaDbOutput{})
	pulumi.RegisterOutputType(DataSourceParametersMariaDbPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersMysqlOutput{})
	pulumi.RegisterOutputType(DataSourceParametersMysqlPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersOracleOutput{})
	pulumi.RegisterOutputType(DataSourceParametersOraclePtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersPostgresqlOutput{})
	pulumi.RegisterOutputType(DataSourceParametersPostgresqlPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersPrestoOutput{})
	pulumi.RegisterOutputType(DataSourceParametersPrestoPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersRdsOutput{})
	pulumi.RegisterOutputType(DataSourceParametersRdsPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersRedshiftOutput{})
	pulumi.RegisterOutputType(DataSourceParametersRedshiftPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersS3Output{})
	pulumi.RegisterOutputType(DataSourceParametersS3PtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersS3ManifestFileLocationOutput{})
	pulumi.RegisterOutputType(DataSourceParametersS3ManifestFileLocationPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersServiceNowOutput{})
	pulumi.RegisterOutputType(DataSourceParametersServiceNowPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersSnowflakeOutput{})
	pulumi.RegisterOutputType(DataSourceParametersSnowflakePtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersSparkOutput{})
	pulumi.RegisterOutputType(DataSourceParametersSparkPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersSqlServerOutput{})
	pulumi.RegisterOutputType(DataSourceParametersSqlServerPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersTeradataOutput{})
	pulumi.RegisterOutputType(DataSourceParametersTeradataPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersTwitterOutput{})
	pulumi.RegisterOutputType(DataSourceParametersTwitterPtrOutput{})
	pulumi.RegisterOutputType(DataSourcePermissionOutput{})
	pulumi.RegisterOutputType(DataSourcePermissionArrayOutput{})
	pulumi.RegisterOutputType(DataSourceSslPropertiesOutput{})
	pulumi.RegisterOutputType(DataSourceSslPropertiesPtrOutput{})
	pulumi.RegisterOutputType(DataSourceVpcConnectionPropertiesOutput{})
	pulumi.RegisterOutputType(DataSourceVpcConnectionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(FolderPermissionOutput{})
	pulumi.RegisterOutputType(FolderPermissionArrayOutput{})
	pulumi.RegisterOutputType(IamPolicyAssignmentIdentitiesOutput{})
	pulumi.RegisterOutputType(IamPolicyAssignmentIdentitiesPtrOutput{})
	pulumi.RegisterOutputType(NamespaceTimeoutsOutput{})
	pulumi.RegisterOutputType(NamespaceTimeoutsPtrOutput{})
	pulumi.RegisterOutputType(RefreshScheduleScheduleOutput{})
	pulumi.RegisterOutputType(RefreshScheduleSchedulePtrOutput{})
	pulumi.RegisterOutputType(RefreshScheduleScheduleScheduleFrequencyOutput{})
	pulumi.RegisterOutputType(RefreshScheduleScheduleScheduleFrequencyPtrOutput{})
	pulumi.RegisterOutputType(RefreshScheduleScheduleScheduleFrequencyRefreshOnDayOutput{})
	pulumi.RegisterOutputType(RefreshScheduleScheduleScheduleFrequencyRefreshOnDayPtrOutput{})
	pulumi.RegisterOutputType(TemplatePermissionOutput{})
	pulumi.RegisterOutputType(TemplatePermissionArrayOutput{})
	pulumi.RegisterOutputType(TemplateSourceEntityOutput{})
	pulumi.RegisterOutputType(TemplateSourceEntityPtrOutput{})
	pulumi.RegisterOutputType(TemplateSourceEntitySourceAnalysisOutput{})
	pulumi.RegisterOutputType(TemplateSourceEntitySourceAnalysisPtrOutput{})
	pulumi.RegisterOutputType(TemplateSourceEntitySourceAnalysisDataSetReferenceOutput{})
	pulumi.RegisterOutputType(TemplateSourceEntitySourceAnalysisDataSetReferenceArrayOutput{})
	pulumi.RegisterOutputType(TemplateSourceEntitySourceTemplateOutput{})
	pulumi.RegisterOutputType(TemplateSourceEntitySourceTemplatePtrOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationDataColorPaletteOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationDataColorPalettePtrOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationSheetOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationSheetPtrOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationSheetTileOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationSheetTilePtrOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationSheetTileBorderOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationSheetTileBorderPtrOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationSheetTileLayoutOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationSheetTileLayoutPtrOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationSheetTileLayoutGutterOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationSheetTileLayoutGutterPtrOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationSheetTileLayoutMarginOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationSheetTileLayoutMarginPtrOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationTypographyOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationTypographyPtrOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationTypographyFontFamilyOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationTypographyFontFamilyArrayOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationUiColorPaletteOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationUiColorPalettePtrOutput{})
	pulumi.RegisterOutputType(ThemePermissionOutput{})
	pulumi.RegisterOutputType(ThemePermissionArrayOutput{})
	pulumi.RegisterOutputType(VpcConnectionTimeoutsOutput{})
	pulumi.RegisterOutputType(VpcConnectionTimeoutsPtrOutput{})
	pulumi.RegisterOutputType(GetDataSetColumnGroupOutput{})
	pulumi.RegisterOutputType(GetDataSetColumnGroupArrayOutput{})
	pulumi.RegisterOutputType(GetDataSetColumnGroupGeoSpatialColumnGroupOutput{})
	pulumi.RegisterOutputType(GetDataSetColumnGroupGeoSpatialColumnGroupArrayOutput{})
	pulumi.RegisterOutputType(GetDataSetColumnLevelPermissionRuleOutput{})
	pulumi.RegisterOutputType(GetDataSetColumnLevelPermissionRuleArrayOutput{})
	pulumi.RegisterOutputType(GetDataSetDataSetUsageConfigurationOutput{})
	pulumi.RegisterOutputType(GetDataSetDataSetUsageConfigurationArrayOutput{})
	pulumi.RegisterOutputType(GetDataSetFieldFolderOutput{})
	pulumi.RegisterOutputType(GetDataSetFieldFolderArrayOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapArrayOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapDataTransformOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapDataTransformArrayOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationArrayOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapDataTransformCreateColumnsOperationOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapDataTransformCreateColumnsOperationArrayOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArrayOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapDataTransformFilterOperationOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapDataTransformFilterOperationArrayOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapDataTransformProjectOperationOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapDataTransformProjectOperationArrayOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapDataTransformRenameColumnOperationOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapDataTransformRenameColumnOperationArrayOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapDataTransformTagColumnOperationOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapDataTransformTagColumnOperationArrayOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapDataTransformTagColumnOperationTagOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapDataTransformTagColumnOperationTagArrayOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArrayOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapDataTransformUntagColumnOperationOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapDataTransformUntagColumnOperationArrayOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapSourceOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapSourceArrayOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapSourceJoinInstructionOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapSourceJoinInstructionArrayOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyArrayOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyOutput{})
	pulumi.RegisterOutputType(GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyArrayOutput{})
	pulumi.RegisterOutputType(GetDataSetPermissionOutput{})
	pulumi.RegisterOutputType(GetDataSetPermissionArrayOutput{})
	pulumi.RegisterOutputType(GetDataSetPhysicalTableMapOutput{})
	pulumi.RegisterOutputType(GetDataSetPhysicalTableMapArrayOutput{})
	pulumi.RegisterOutputType(GetDataSetPhysicalTableMapCustomSqlOutput{})
	pulumi.RegisterOutputType(GetDataSetPhysicalTableMapCustomSqlArrayOutput{})
	pulumi.RegisterOutputType(GetDataSetPhysicalTableMapCustomSqlColumnOutput{})
	pulumi.RegisterOutputType(GetDataSetPhysicalTableMapCustomSqlColumnArrayOutput{})
	pulumi.RegisterOutputType(GetDataSetPhysicalTableMapRelationalTableOutput{})
	pulumi.RegisterOutputType(GetDataSetPhysicalTableMapRelationalTableArrayOutput{})
	pulumi.RegisterOutputType(GetDataSetPhysicalTableMapRelationalTableInputColumnOutput{})
	pulumi.RegisterOutputType(GetDataSetPhysicalTableMapRelationalTableInputColumnArrayOutput{})
	pulumi.RegisterOutputType(GetDataSetPhysicalTableMapS3SourceOutput{})
	pulumi.RegisterOutputType(GetDataSetPhysicalTableMapS3SourceArrayOutput{})
	pulumi.RegisterOutputType(GetDataSetPhysicalTableMapS3SourceInputColumnOutput{})
	pulumi.RegisterOutputType(GetDataSetPhysicalTableMapS3SourceInputColumnArrayOutput{})
	pulumi.RegisterOutputType(GetDataSetPhysicalTableMapS3SourceUploadSettingOutput{})
	pulumi.RegisterOutputType(GetDataSetPhysicalTableMapS3SourceUploadSettingArrayOutput{})
	pulumi.RegisterOutputType(GetDataSetRowLevelPermissionDataSetOutput{})
	pulumi.RegisterOutputType(GetDataSetRowLevelPermissionDataSetArrayOutput{})
	pulumi.RegisterOutputType(GetDataSetRowLevelPermissionTagConfigurationOutput{})
	pulumi.RegisterOutputType(GetDataSetRowLevelPermissionTagConfigurationArrayOutput{})
	pulumi.RegisterOutputType(GetDataSetRowLevelPermissionTagConfigurationTagRuleOutput{})
	pulumi.RegisterOutputType(GetDataSetRowLevelPermissionTagConfigurationTagRuleArrayOutput{})
	pulumi.RegisterOutputType(GetThemeConfigurationOutput{})
	pulumi.RegisterOutputType(GetThemeConfigurationArrayOutput{})
	pulumi.RegisterOutputType(GetThemeConfigurationDataColorPaletteOutput{})
	pulumi.RegisterOutputType(GetThemeConfigurationDataColorPaletteArrayOutput{})
	pulumi.RegisterOutputType(GetThemeConfigurationSheetOutput{})
	pulumi.RegisterOutputType(GetThemeConfigurationSheetArrayOutput{})
	pulumi.RegisterOutputType(GetThemeConfigurationSheetTileOutput{})
	pulumi.RegisterOutputType(GetThemeConfigurationSheetTileArrayOutput{})
	pulumi.RegisterOutputType(GetThemeConfigurationSheetTileBorderOutput{})
	pulumi.RegisterOutputType(GetThemeConfigurationSheetTileBorderArrayOutput{})
	pulumi.RegisterOutputType(GetThemeConfigurationSheetTileLayoutOutput{})
	pulumi.RegisterOutputType(GetThemeConfigurationSheetTileLayoutArrayOutput{})
	pulumi.RegisterOutputType(GetThemeConfigurationSheetTileLayoutGutterOutput{})
	pulumi.RegisterOutputType(GetThemeConfigurationSheetTileLayoutGutterArrayOutput{})
	pulumi.RegisterOutputType(GetThemeConfigurationSheetTileLayoutMarginOutput{})
	pulumi.RegisterOutputType(GetThemeConfigurationSheetTileLayoutMarginArrayOutput{})
	pulumi.RegisterOutputType(GetThemeConfigurationTypographyOutput{})
	pulumi.RegisterOutputType(GetThemeConfigurationTypographyArrayOutput{})
	pulumi.RegisterOutputType(GetThemeConfigurationTypographyFontFamilyOutput{})
	pulumi.RegisterOutputType(GetThemeConfigurationTypographyFontFamilyArrayOutput{})
	pulumi.RegisterOutputType(GetThemeConfigurationUiColorPaletteOutput{})
	pulumi.RegisterOutputType(GetThemeConfigurationUiColorPaletteArrayOutput{})
	pulumi.RegisterOutputType(GetThemePermissionOutput{})
	pulumi.RegisterOutputType(GetThemePermissionArrayOutput{})
}
