// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing a QuickSight Theme.
//
// ## Example Usage
//
// ## Import
//
// A QuickSight Theme can be imported using the AWS account ID and theme ID separated by a comma (`,`) e.g.,
//
// ```sh
//
//	$ pulumi import aws:quicksight/theme:Theme example 123456789012,example-id
//
// ```
type Theme struct {
	pulumi.CustomResourceState
}

// NewTheme registers a new resource with the given unique name, arguments, and options.
func NewTheme(ctx *pulumi.Context,
	name string, args *ThemeArgs, opts ...pulumi.ResourceOption) (*Theme, error) {
	if args == nil {
		args = &ThemeArgs{}
	}

	var resource Theme
	err := ctx.RegisterResource("aws:quicksight/theme:Theme", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTheme gets an existing Theme resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTheme(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ThemeState, opts ...pulumi.ResourceOption) (*Theme, error) {
	var resource Theme
	err := ctx.ReadResource("aws:quicksight/theme:Theme", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Theme resources.
type themeState struct {
}

type ThemeState struct {
}

func (ThemeState) ElementType() reflect.Type {
	return reflect.TypeOf((*themeState)(nil)).Elem()
}

type themeArgs struct {
}

// The set of arguments for constructing a Theme resource.
type ThemeArgs struct {
}

func (ThemeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*themeArgs)(nil)).Elem()
}

type ThemeInput interface {
	pulumi.Input

	ToThemeOutput() ThemeOutput
	ToThemeOutputWithContext(ctx context.Context) ThemeOutput
}

func (*Theme) ElementType() reflect.Type {
	return reflect.TypeOf((**Theme)(nil)).Elem()
}

func (i *Theme) ToThemeOutput() ThemeOutput {
	return i.ToThemeOutputWithContext(context.Background())
}

func (i *Theme) ToThemeOutputWithContext(ctx context.Context) ThemeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeOutput)
}

// ThemeArrayInput is an input type that accepts ThemeArray and ThemeArrayOutput values.
// You can construct a concrete instance of `ThemeArrayInput` via:
//
//	ThemeArray{ ThemeArgs{...} }
type ThemeArrayInput interface {
	pulumi.Input

	ToThemeArrayOutput() ThemeArrayOutput
	ToThemeArrayOutputWithContext(context.Context) ThemeArrayOutput
}

type ThemeArray []ThemeInput

func (ThemeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Theme)(nil)).Elem()
}

func (i ThemeArray) ToThemeArrayOutput() ThemeArrayOutput {
	return i.ToThemeArrayOutputWithContext(context.Background())
}

func (i ThemeArray) ToThemeArrayOutputWithContext(ctx context.Context) ThemeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeArrayOutput)
}

// ThemeMapInput is an input type that accepts ThemeMap and ThemeMapOutput values.
// You can construct a concrete instance of `ThemeMapInput` via:
//
//	ThemeMap{ "key": ThemeArgs{...} }
type ThemeMapInput interface {
	pulumi.Input

	ToThemeMapOutput() ThemeMapOutput
	ToThemeMapOutputWithContext(context.Context) ThemeMapOutput
}

type ThemeMap map[string]ThemeInput

func (ThemeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Theme)(nil)).Elem()
}

func (i ThemeMap) ToThemeMapOutput() ThemeMapOutput {
	return i.ToThemeMapOutputWithContext(context.Background())
}

func (i ThemeMap) ToThemeMapOutputWithContext(ctx context.Context) ThemeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeMapOutput)
}

type ThemeOutput struct{ *pulumi.OutputState }

func (ThemeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Theme)(nil)).Elem()
}

func (o ThemeOutput) ToThemeOutput() ThemeOutput {
	return o
}

func (o ThemeOutput) ToThemeOutputWithContext(ctx context.Context) ThemeOutput {
	return o
}

type ThemeArrayOutput struct{ *pulumi.OutputState }

func (ThemeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Theme)(nil)).Elem()
}

func (o ThemeArrayOutput) ToThemeArrayOutput() ThemeArrayOutput {
	return o
}

func (o ThemeArrayOutput) ToThemeArrayOutputWithContext(ctx context.Context) ThemeArrayOutput {
	return o
}

func (o ThemeArrayOutput) Index(i pulumi.IntInput) ThemeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Theme {
		return vs[0].([]*Theme)[vs[1].(int)]
	}).(ThemeOutput)
}

type ThemeMapOutput struct{ *pulumi.OutputState }

func (ThemeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Theme)(nil)).Elem()
}

func (o ThemeMapOutput) ToThemeMapOutput() ThemeMapOutput {
	return o
}

func (o ThemeMapOutput) ToThemeMapOutputWithContext(ctx context.Context) ThemeMapOutput {
	return o
}

func (o ThemeMapOutput) MapIndex(k pulumi.StringInput) ThemeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Theme {
		return vs[0].(map[string]*Theme)[vs[1].(string)]
	}).(ThemeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeInput)(nil)).Elem(), &Theme{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeArrayInput)(nil)).Elem(), ThemeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeMapInput)(nil)).Elem(), ThemeMap{})
	pulumi.RegisterOutputType(ThemeOutput{})
	pulumi.RegisterOutputType(ThemeArrayOutput{})
	pulumi.RegisterOutputType(ThemeMapOutput{})
}
