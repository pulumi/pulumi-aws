// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkmonitor

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS Network Monitor Probe.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/networkmonitor"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networkmonitor.NewMonitor(ctx, "example", &networkmonitor.MonitorArgs{
//				AggregationPeriod: pulumi.Int(30),
//				MonitorName:       pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = networkmonitor.NewProbe(ctx, "example", &networkmonitor.ProbeArgs{
//				MonitorName:     example.MonitorName,
//				Destination:     pulumi.String("127.0.0.1"),
//				DestinationPort: pulumi.Int(80),
//				Protocol:        pulumi.String("TCP"),
//				SourceArn:       pulumi.Any(exampleAwsSubnet.Arn),
//				PacketSize:      pulumi.Int(200),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import `aws_networkmonitor_probe` using the monitor name and probe id. For example:
//
// ```sh
// $ pulumi import aws:networkmonitor/probe:Probe example monitor-7786087912324693644,probe-3qm8p693i4fi1h8lqylzkbp42e
// ```
type Probe struct {
	pulumi.CustomResourceState

	AddressFamily pulumi.StringOutput `pulumi:"addressFamily"`
	// The ARN of the attachment.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The destination IP address. This must be either IPV4 or IPV6.
	Destination pulumi.StringOutput `pulumi:"destination"`
	// The port associated with the destination. This is required only if the protocol is TCP and must be a number between 1 and 65536.
	DestinationPort pulumi.IntPtrOutput `pulumi:"destinationPort"`
	// The name of the monitor.
	MonitorName pulumi.StringOutput `pulumi:"monitorName"`
	// The size of the packets sent between the source and destination. This must be a number between 56 and 8500.
	//
	// The following arguments are optional:
	PacketSize pulumi.IntOutput    `pulumi:"packetSize"`
	ProbeId    pulumi.StringOutput `pulumi:"probeId"`
	// The protocol used for the network traffic between the source and destination. This must be either TCP or ICMP.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// The ARN of the subnet.
	SourceArn pulumi.StringOutput `pulumi:"sourceArn"`
	// Key-value tags for the monitor. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	VpcId   pulumi.StringOutput    `pulumi:"vpcId"`
}

// NewProbe registers a new resource with the given unique name, arguments, and options.
func NewProbe(ctx *pulumi.Context,
	name string, args *ProbeArgs, opts ...pulumi.ResourceOption) (*Probe, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Destination == nil {
		return nil, errors.New("invalid value for required argument 'Destination'")
	}
	if args.MonitorName == nil {
		return nil, errors.New("invalid value for required argument 'MonitorName'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.SourceArn == nil {
		return nil, errors.New("invalid value for required argument 'SourceArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Probe
	err := ctx.RegisterResource("aws:networkmonitor/probe:Probe", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProbe gets an existing Probe resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProbe(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProbeState, opts ...pulumi.ResourceOption) (*Probe, error) {
	var resource Probe
	err := ctx.ReadResource("aws:networkmonitor/probe:Probe", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Probe resources.
type probeState struct {
	AddressFamily *string `pulumi:"addressFamily"`
	// The ARN of the attachment.
	Arn *string `pulumi:"arn"`
	// The destination IP address. This must be either IPV4 or IPV6.
	Destination *string `pulumi:"destination"`
	// The port associated with the destination. This is required only if the protocol is TCP and must be a number between 1 and 65536.
	DestinationPort *int `pulumi:"destinationPort"`
	// The name of the monitor.
	MonitorName *string `pulumi:"monitorName"`
	// The size of the packets sent between the source and destination. This must be a number between 56 and 8500.
	//
	// The following arguments are optional:
	PacketSize *int    `pulumi:"packetSize"`
	ProbeId    *string `pulumi:"probeId"`
	// The protocol used for the network traffic between the source and destination. This must be either TCP or ICMP.
	Protocol *string `pulumi:"protocol"`
	// The ARN of the subnet.
	SourceArn *string `pulumi:"sourceArn"`
	// Key-value tags for the monitor. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
	VpcId   *string           `pulumi:"vpcId"`
}

type ProbeState struct {
	AddressFamily pulumi.StringPtrInput
	// The ARN of the attachment.
	Arn pulumi.StringPtrInput
	// The destination IP address. This must be either IPV4 or IPV6.
	Destination pulumi.StringPtrInput
	// The port associated with the destination. This is required only if the protocol is TCP and must be a number between 1 and 65536.
	DestinationPort pulumi.IntPtrInput
	// The name of the monitor.
	MonitorName pulumi.StringPtrInput
	// The size of the packets sent between the source and destination. This must be a number between 56 and 8500.
	//
	// The following arguments are optional:
	PacketSize pulumi.IntPtrInput
	ProbeId    pulumi.StringPtrInput
	// The protocol used for the network traffic between the source and destination. This must be either TCP or ICMP.
	Protocol pulumi.StringPtrInput
	// The ARN of the subnet.
	SourceArn pulumi.StringPtrInput
	// Key-value tags for the monitor. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
	VpcId   pulumi.StringPtrInput
}

func (ProbeState) ElementType() reflect.Type {
	return reflect.TypeOf((*probeState)(nil)).Elem()
}

type probeArgs struct {
	// The destination IP address. This must be either IPV4 or IPV6.
	Destination string `pulumi:"destination"`
	// The port associated with the destination. This is required only if the protocol is TCP and must be a number between 1 and 65536.
	DestinationPort *int `pulumi:"destinationPort"`
	// The name of the monitor.
	MonitorName string `pulumi:"monitorName"`
	// The size of the packets sent between the source and destination. This must be a number between 56 and 8500.
	//
	// The following arguments are optional:
	PacketSize *int `pulumi:"packetSize"`
	// The protocol used for the network traffic between the source and destination. This must be either TCP or ICMP.
	Protocol string `pulumi:"protocol"`
	// The ARN of the subnet.
	SourceArn string `pulumi:"sourceArn"`
	// Key-value tags for the monitor. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Probe resource.
type ProbeArgs struct {
	// The destination IP address. This must be either IPV4 or IPV6.
	Destination pulumi.StringInput
	// The port associated with the destination. This is required only if the protocol is TCP and must be a number between 1 and 65536.
	DestinationPort pulumi.IntPtrInput
	// The name of the monitor.
	MonitorName pulumi.StringInput
	// The size of the packets sent between the source and destination. This must be a number between 56 and 8500.
	//
	// The following arguments are optional:
	PacketSize pulumi.IntPtrInput
	// The protocol used for the network traffic between the source and destination. This must be either TCP or ICMP.
	Protocol pulumi.StringInput
	// The ARN of the subnet.
	SourceArn pulumi.StringInput
	// Key-value tags for the monitor. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
}

func (ProbeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*probeArgs)(nil)).Elem()
}

type ProbeInput interface {
	pulumi.Input

	ToProbeOutput() ProbeOutput
	ToProbeOutputWithContext(ctx context.Context) ProbeOutput
}

func (*Probe) ElementType() reflect.Type {
	return reflect.TypeOf((**Probe)(nil)).Elem()
}

func (i *Probe) ToProbeOutput() ProbeOutput {
	return i.ToProbeOutputWithContext(context.Background())
}

func (i *Probe) ToProbeOutputWithContext(ctx context.Context) ProbeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProbeOutput)
}

// ProbeArrayInput is an input type that accepts ProbeArray and ProbeArrayOutput values.
// You can construct a concrete instance of `ProbeArrayInput` via:
//
//	ProbeArray{ ProbeArgs{...} }
type ProbeArrayInput interface {
	pulumi.Input

	ToProbeArrayOutput() ProbeArrayOutput
	ToProbeArrayOutputWithContext(context.Context) ProbeArrayOutput
}

type ProbeArray []ProbeInput

func (ProbeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Probe)(nil)).Elem()
}

func (i ProbeArray) ToProbeArrayOutput() ProbeArrayOutput {
	return i.ToProbeArrayOutputWithContext(context.Background())
}

func (i ProbeArray) ToProbeArrayOutputWithContext(ctx context.Context) ProbeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProbeArrayOutput)
}

// ProbeMapInput is an input type that accepts ProbeMap and ProbeMapOutput values.
// You can construct a concrete instance of `ProbeMapInput` via:
//
//	ProbeMap{ "key": ProbeArgs{...} }
type ProbeMapInput interface {
	pulumi.Input

	ToProbeMapOutput() ProbeMapOutput
	ToProbeMapOutputWithContext(context.Context) ProbeMapOutput
}

type ProbeMap map[string]ProbeInput

func (ProbeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Probe)(nil)).Elem()
}

func (i ProbeMap) ToProbeMapOutput() ProbeMapOutput {
	return i.ToProbeMapOutputWithContext(context.Background())
}

func (i ProbeMap) ToProbeMapOutputWithContext(ctx context.Context) ProbeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProbeMapOutput)
}

type ProbeOutput struct{ *pulumi.OutputState }

func (ProbeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Probe)(nil)).Elem()
}

func (o ProbeOutput) ToProbeOutput() ProbeOutput {
	return o
}

func (o ProbeOutput) ToProbeOutputWithContext(ctx context.Context) ProbeOutput {
	return o
}

func (o ProbeOutput) AddressFamily() pulumi.StringOutput {
	return o.ApplyT(func(v *Probe) pulumi.StringOutput { return v.AddressFamily }).(pulumi.StringOutput)
}

// The ARN of the attachment.
func (o ProbeOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Probe) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The destination IP address. This must be either IPV4 or IPV6.
func (o ProbeOutput) Destination() pulumi.StringOutput {
	return o.ApplyT(func(v *Probe) pulumi.StringOutput { return v.Destination }).(pulumi.StringOutput)
}

// The port associated with the destination. This is required only if the protocol is TCP and must be a number between 1 and 65536.
func (o ProbeOutput) DestinationPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Probe) pulumi.IntPtrOutput { return v.DestinationPort }).(pulumi.IntPtrOutput)
}

// The name of the monitor.
func (o ProbeOutput) MonitorName() pulumi.StringOutput {
	return o.ApplyT(func(v *Probe) pulumi.StringOutput { return v.MonitorName }).(pulumi.StringOutput)
}

// The size of the packets sent between the source and destination. This must be a number between 56 and 8500.
//
// The following arguments are optional:
func (o ProbeOutput) PacketSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Probe) pulumi.IntOutput { return v.PacketSize }).(pulumi.IntOutput)
}

func (o ProbeOutput) ProbeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Probe) pulumi.StringOutput { return v.ProbeId }).(pulumi.StringOutput)
}

// The protocol used for the network traffic between the source and destination. This must be either TCP or ICMP.
func (o ProbeOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *Probe) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// The ARN of the subnet.
func (o ProbeOutput) SourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Probe) pulumi.StringOutput { return v.SourceArn }).(pulumi.StringOutput)
}

// Key-value tags for the monitor. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ProbeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Probe) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o ProbeOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Probe) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o ProbeOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Probe) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type ProbeArrayOutput struct{ *pulumi.OutputState }

func (ProbeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Probe)(nil)).Elem()
}

func (o ProbeArrayOutput) ToProbeArrayOutput() ProbeArrayOutput {
	return o
}

func (o ProbeArrayOutput) ToProbeArrayOutputWithContext(ctx context.Context) ProbeArrayOutput {
	return o
}

func (o ProbeArrayOutput) Index(i pulumi.IntInput) ProbeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Probe {
		return vs[0].([]*Probe)[vs[1].(int)]
	}).(ProbeOutput)
}

type ProbeMapOutput struct{ *pulumi.OutputState }

func (ProbeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Probe)(nil)).Elem()
}

func (o ProbeMapOutput) ToProbeMapOutput() ProbeMapOutput {
	return o
}

func (o ProbeMapOutput) ToProbeMapOutputWithContext(ctx context.Context) ProbeMapOutput {
	return o
}

func (o ProbeMapOutput) MapIndex(k pulumi.StringInput) ProbeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Probe {
		return vs[0].(map[string]*Probe)[vs[1].(string)]
	}).(ProbeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProbeInput)(nil)).Elem(), &Probe{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProbeArrayInput)(nil)).Elem(), ProbeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProbeMapInput)(nil)).Elem(), ProbeMap{})
	pulumi.RegisterOutputType(ProbeOutput{})
	pulumi.RegisterOutputType(ProbeArrayOutput{})
	pulumi.RegisterOutputType(ProbeMapOutput{})
}
