// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package organizations

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type OrganizationAccount struct {
	// ARN of the root
	Arn *string `pulumi:"arn"`
	// Email of the account
	Email *string `pulumi:"email"`
	// Identifier of the root
	Id *string `pulumi:"id"`
	// The name of the policy type
	Name *string `pulumi:"name"`
	// The status of the policy type as it relates to the associated root
	Status *string `pulumi:"status"`
}

// OrganizationAccountInput is an input type that accepts OrganizationAccountArgs and OrganizationAccountOutput values.
// You can construct a concrete instance of `OrganizationAccountInput` via:
//
// 		 OrganizationAccountArgs{...}
//
type OrganizationAccountInput interface {
	pulumi.Input

	ToOrganizationAccountOutput() OrganizationAccountOutput
	ToOrganizationAccountOutputWithContext(context.Context) OrganizationAccountOutput
}

type OrganizationAccountArgs struct {
	// ARN of the root
	Arn pulumi.StringPtrInput `pulumi:"arn"`
	// Email of the account
	Email pulumi.StringPtrInput `pulumi:"email"`
	// Identifier of the root
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the policy type
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The status of the policy type as it relates to the associated root
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (OrganizationAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationAccount)(nil)).Elem()
}

func (i OrganizationAccountArgs) ToOrganizationAccountOutput() OrganizationAccountOutput {
	return i.ToOrganizationAccountOutputWithContext(context.Background())
}

func (i OrganizationAccountArgs) ToOrganizationAccountOutputWithContext(ctx context.Context) OrganizationAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationAccountOutput)
}

// OrganizationAccountArrayInput is an input type that accepts OrganizationAccountArray and OrganizationAccountArrayOutput values.
// You can construct a concrete instance of `OrganizationAccountArrayInput` via:
//
// 		 OrganizationAccountArray{ OrganizationAccountArgs{...} }
//
type OrganizationAccountArrayInput interface {
	pulumi.Input

	ToOrganizationAccountArrayOutput() OrganizationAccountArrayOutput
	ToOrganizationAccountArrayOutputWithContext(context.Context) OrganizationAccountArrayOutput
}

type OrganizationAccountArray []OrganizationAccountInput

func (OrganizationAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OrganizationAccount)(nil)).Elem()
}

func (i OrganizationAccountArray) ToOrganizationAccountArrayOutput() OrganizationAccountArrayOutput {
	return i.ToOrganizationAccountArrayOutputWithContext(context.Background())
}

func (i OrganizationAccountArray) ToOrganizationAccountArrayOutputWithContext(ctx context.Context) OrganizationAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationAccountArrayOutput)
}

type OrganizationAccountOutput struct{ *pulumi.OutputState }

func (OrganizationAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationAccount)(nil)).Elem()
}

func (o OrganizationAccountOutput) ToOrganizationAccountOutput() OrganizationAccountOutput {
	return o
}

func (o OrganizationAccountOutput) ToOrganizationAccountOutputWithContext(ctx context.Context) OrganizationAccountOutput {
	return o
}

// ARN of the root
func (o OrganizationAccountOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrganizationAccount) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// Email of the account
func (o OrganizationAccountOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrganizationAccount) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// Identifier of the root
func (o OrganizationAccountOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrganizationAccount) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the policy type
func (o OrganizationAccountOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrganizationAccount) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The status of the policy type as it relates to the associated root
func (o OrganizationAccountOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrganizationAccount) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type OrganizationAccountArrayOutput struct{ *pulumi.OutputState }

func (OrganizationAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OrganizationAccount)(nil)).Elem()
}

func (o OrganizationAccountArrayOutput) ToOrganizationAccountArrayOutput() OrganizationAccountArrayOutput {
	return o
}

func (o OrganizationAccountArrayOutput) ToOrganizationAccountArrayOutputWithContext(ctx context.Context) OrganizationAccountArrayOutput {
	return o
}

func (o OrganizationAccountArrayOutput) Index(i pulumi.IntInput) OrganizationAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OrganizationAccount {
		return vs[0].([]OrganizationAccount)[vs[1].(int)]
	}).(OrganizationAccountOutput)
}

type OrganizationNonMasterAccount struct {
	// ARN of the root
	Arn *string `pulumi:"arn"`
	// Email of the account
	Email *string `pulumi:"email"`
	// Identifier of the root
	Id *string `pulumi:"id"`
	// The name of the policy type
	Name *string `pulumi:"name"`
	// The status of the policy type as it relates to the associated root
	Status *string `pulumi:"status"`
}

// OrganizationNonMasterAccountInput is an input type that accepts OrganizationNonMasterAccountArgs and OrganizationNonMasterAccountOutput values.
// You can construct a concrete instance of `OrganizationNonMasterAccountInput` via:
//
// 		 OrganizationNonMasterAccountArgs{...}
//
type OrganizationNonMasterAccountInput interface {
	pulumi.Input

	ToOrganizationNonMasterAccountOutput() OrganizationNonMasterAccountOutput
	ToOrganizationNonMasterAccountOutputWithContext(context.Context) OrganizationNonMasterAccountOutput
}

type OrganizationNonMasterAccountArgs struct {
	// ARN of the root
	Arn pulumi.StringPtrInput `pulumi:"arn"`
	// Email of the account
	Email pulumi.StringPtrInput `pulumi:"email"`
	// Identifier of the root
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the policy type
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The status of the policy type as it relates to the associated root
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (OrganizationNonMasterAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationNonMasterAccount)(nil)).Elem()
}

func (i OrganizationNonMasterAccountArgs) ToOrganizationNonMasterAccountOutput() OrganizationNonMasterAccountOutput {
	return i.ToOrganizationNonMasterAccountOutputWithContext(context.Background())
}

func (i OrganizationNonMasterAccountArgs) ToOrganizationNonMasterAccountOutputWithContext(ctx context.Context) OrganizationNonMasterAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationNonMasterAccountOutput)
}

// OrganizationNonMasterAccountArrayInput is an input type that accepts OrganizationNonMasterAccountArray and OrganizationNonMasterAccountArrayOutput values.
// You can construct a concrete instance of `OrganizationNonMasterAccountArrayInput` via:
//
// 		 OrganizationNonMasterAccountArray{ OrganizationNonMasterAccountArgs{...} }
//
type OrganizationNonMasterAccountArrayInput interface {
	pulumi.Input

	ToOrganizationNonMasterAccountArrayOutput() OrganizationNonMasterAccountArrayOutput
	ToOrganizationNonMasterAccountArrayOutputWithContext(context.Context) OrganizationNonMasterAccountArrayOutput
}

type OrganizationNonMasterAccountArray []OrganizationNonMasterAccountInput

func (OrganizationNonMasterAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OrganizationNonMasterAccount)(nil)).Elem()
}

func (i OrganizationNonMasterAccountArray) ToOrganizationNonMasterAccountArrayOutput() OrganizationNonMasterAccountArrayOutput {
	return i.ToOrganizationNonMasterAccountArrayOutputWithContext(context.Background())
}

func (i OrganizationNonMasterAccountArray) ToOrganizationNonMasterAccountArrayOutputWithContext(ctx context.Context) OrganizationNonMasterAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationNonMasterAccountArrayOutput)
}

type OrganizationNonMasterAccountOutput struct{ *pulumi.OutputState }

func (OrganizationNonMasterAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationNonMasterAccount)(nil)).Elem()
}

func (o OrganizationNonMasterAccountOutput) ToOrganizationNonMasterAccountOutput() OrganizationNonMasterAccountOutput {
	return o
}

func (o OrganizationNonMasterAccountOutput) ToOrganizationNonMasterAccountOutputWithContext(ctx context.Context) OrganizationNonMasterAccountOutput {
	return o
}

// ARN of the root
func (o OrganizationNonMasterAccountOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrganizationNonMasterAccount) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// Email of the account
func (o OrganizationNonMasterAccountOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrganizationNonMasterAccount) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// Identifier of the root
func (o OrganizationNonMasterAccountOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrganizationNonMasterAccount) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the policy type
func (o OrganizationNonMasterAccountOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrganizationNonMasterAccount) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The status of the policy type as it relates to the associated root
func (o OrganizationNonMasterAccountOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrganizationNonMasterAccount) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type OrganizationNonMasterAccountArrayOutput struct{ *pulumi.OutputState }

func (OrganizationNonMasterAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OrganizationNonMasterAccount)(nil)).Elem()
}

func (o OrganizationNonMasterAccountArrayOutput) ToOrganizationNonMasterAccountArrayOutput() OrganizationNonMasterAccountArrayOutput {
	return o
}

func (o OrganizationNonMasterAccountArrayOutput) ToOrganizationNonMasterAccountArrayOutputWithContext(ctx context.Context) OrganizationNonMasterAccountArrayOutput {
	return o
}

func (o OrganizationNonMasterAccountArrayOutput) Index(i pulumi.IntInput) OrganizationNonMasterAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OrganizationNonMasterAccount {
		return vs[0].([]OrganizationNonMasterAccount)[vs[1].(int)]
	}).(OrganizationNonMasterAccountOutput)
}

type OrganizationRoot struct {
	// ARN of the root
	Arn *string `pulumi:"arn"`
	// Identifier of the root
	Id *string `pulumi:"id"`
	// The name of the policy type
	Name *string `pulumi:"name"`
	// List of policy types enabled for this root. All elements have these attributes:
	PolicyTypes []OrganizationRootPolicyType `pulumi:"policyTypes"`
}

// OrganizationRootInput is an input type that accepts OrganizationRootArgs and OrganizationRootOutput values.
// You can construct a concrete instance of `OrganizationRootInput` via:
//
// 		 OrganizationRootArgs{...}
//
type OrganizationRootInput interface {
	pulumi.Input

	ToOrganizationRootOutput() OrganizationRootOutput
	ToOrganizationRootOutputWithContext(context.Context) OrganizationRootOutput
}

type OrganizationRootArgs struct {
	// ARN of the root
	Arn pulumi.StringPtrInput `pulumi:"arn"`
	// Identifier of the root
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the policy type
	Name pulumi.StringPtrInput `pulumi:"name"`
	// List of policy types enabled for this root. All elements have these attributes:
	PolicyTypes OrganizationRootPolicyTypeArrayInput `pulumi:"policyTypes"`
}

func (OrganizationRootArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationRoot)(nil)).Elem()
}

func (i OrganizationRootArgs) ToOrganizationRootOutput() OrganizationRootOutput {
	return i.ToOrganizationRootOutputWithContext(context.Background())
}

func (i OrganizationRootArgs) ToOrganizationRootOutputWithContext(ctx context.Context) OrganizationRootOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRootOutput)
}

// OrganizationRootArrayInput is an input type that accepts OrganizationRootArray and OrganizationRootArrayOutput values.
// You can construct a concrete instance of `OrganizationRootArrayInput` via:
//
// 		 OrganizationRootArray{ OrganizationRootArgs{...} }
//
type OrganizationRootArrayInput interface {
	pulumi.Input

	ToOrganizationRootArrayOutput() OrganizationRootArrayOutput
	ToOrganizationRootArrayOutputWithContext(context.Context) OrganizationRootArrayOutput
}

type OrganizationRootArray []OrganizationRootInput

func (OrganizationRootArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OrganizationRoot)(nil)).Elem()
}

func (i OrganizationRootArray) ToOrganizationRootArrayOutput() OrganizationRootArrayOutput {
	return i.ToOrganizationRootArrayOutputWithContext(context.Background())
}

func (i OrganizationRootArray) ToOrganizationRootArrayOutputWithContext(ctx context.Context) OrganizationRootArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRootArrayOutput)
}

type OrganizationRootOutput struct{ *pulumi.OutputState }

func (OrganizationRootOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationRoot)(nil)).Elem()
}

func (o OrganizationRootOutput) ToOrganizationRootOutput() OrganizationRootOutput {
	return o
}

func (o OrganizationRootOutput) ToOrganizationRootOutputWithContext(ctx context.Context) OrganizationRootOutput {
	return o
}

// ARN of the root
func (o OrganizationRootOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrganizationRoot) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// Identifier of the root
func (o OrganizationRootOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrganizationRoot) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the policy type
func (o OrganizationRootOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrganizationRoot) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of policy types enabled for this root. All elements have these attributes:
func (o OrganizationRootOutput) PolicyTypes() OrganizationRootPolicyTypeArrayOutput {
	return o.ApplyT(func(v OrganizationRoot) []OrganizationRootPolicyType { return v.PolicyTypes }).(OrganizationRootPolicyTypeArrayOutput)
}

type OrganizationRootArrayOutput struct{ *pulumi.OutputState }

func (OrganizationRootArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OrganizationRoot)(nil)).Elem()
}

func (o OrganizationRootArrayOutput) ToOrganizationRootArrayOutput() OrganizationRootArrayOutput {
	return o
}

func (o OrganizationRootArrayOutput) ToOrganizationRootArrayOutputWithContext(ctx context.Context) OrganizationRootArrayOutput {
	return o
}

func (o OrganizationRootArrayOutput) Index(i pulumi.IntInput) OrganizationRootOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OrganizationRoot {
		return vs[0].([]OrganizationRoot)[vs[1].(int)]
	}).(OrganizationRootOutput)
}

type OrganizationRootPolicyType struct {
	// The status of the policy type as it relates to the associated root
	Status *string `pulumi:"status"`
	Type   *string `pulumi:"type"`
}

// OrganizationRootPolicyTypeInput is an input type that accepts OrganizationRootPolicyTypeArgs and OrganizationRootPolicyTypeOutput values.
// You can construct a concrete instance of `OrganizationRootPolicyTypeInput` via:
//
// 		 OrganizationRootPolicyTypeArgs{...}
//
type OrganizationRootPolicyTypeInput interface {
	pulumi.Input

	ToOrganizationRootPolicyTypeOutput() OrganizationRootPolicyTypeOutput
	ToOrganizationRootPolicyTypeOutputWithContext(context.Context) OrganizationRootPolicyTypeOutput
}

type OrganizationRootPolicyTypeArgs struct {
	// The status of the policy type as it relates to the associated root
	Status pulumi.StringPtrInput `pulumi:"status"`
	Type   pulumi.StringPtrInput `pulumi:"type"`
}

func (OrganizationRootPolicyTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationRootPolicyType)(nil)).Elem()
}

func (i OrganizationRootPolicyTypeArgs) ToOrganizationRootPolicyTypeOutput() OrganizationRootPolicyTypeOutput {
	return i.ToOrganizationRootPolicyTypeOutputWithContext(context.Background())
}

func (i OrganizationRootPolicyTypeArgs) ToOrganizationRootPolicyTypeOutputWithContext(ctx context.Context) OrganizationRootPolicyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRootPolicyTypeOutput)
}

// OrganizationRootPolicyTypeArrayInput is an input type that accepts OrganizationRootPolicyTypeArray and OrganizationRootPolicyTypeArrayOutput values.
// You can construct a concrete instance of `OrganizationRootPolicyTypeArrayInput` via:
//
// 		 OrganizationRootPolicyTypeArray{ OrganizationRootPolicyTypeArgs{...} }
//
type OrganizationRootPolicyTypeArrayInput interface {
	pulumi.Input

	ToOrganizationRootPolicyTypeArrayOutput() OrganizationRootPolicyTypeArrayOutput
	ToOrganizationRootPolicyTypeArrayOutputWithContext(context.Context) OrganizationRootPolicyTypeArrayOutput
}

type OrganizationRootPolicyTypeArray []OrganizationRootPolicyTypeInput

func (OrganizationRootPolicyTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OrganizationRootPolicyType)(nil)).Elem()
}

func (i OrganizationRootPolicyTypeArray) ToOrganizationRootPolicyTypeArrayOutput() OrganizationRootPolicyTypeArrayOutput {
	return i.ToOrganizationRootPolicyTypeArrayOutputWithContext(context.Background())
}

func (i OrganizationRootPolicyTypeArray) ToOrganizationRootPolicyTypeArrayOutputWithContext(ctx context.Context) OrganizationRootPolicyTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRootPolicyTypeArrayOutput)
}

type OrganizationRootPolicyTypeOutput struct{ *pulumi.OutputState }

func (OrganizationRootPolicyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationRootPolicyType)(nil)).Elem()
}

func (o OrganizationRootPolicyTypeOutput) ToOrganizationRootPolicyTypeOutput() OrganizationRootPolicyTypeOutput {
	return o
}

func (o OrganizationRootPolicyTypeOutput) ToOrganizationRootPolicyTypeOutputWithContext(ctx context.Context) OrganizationRootPolicyTypeOutput {
	return o
}

// The status of the policy type as it relates to the associated root
func (o OrganizationRootPolicyTypeOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrganizationRootPolicyType) *string { return v.Status }).(pulumi.StringPtrOutput)
}

func (o OrganizationRootPolicyTypeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrganizationRootPolicyType) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type OrganizationRootPolicyTypeArrayOutput struct{ *pulumi.OutputState }

func (OrganizationRootPolicyTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OrganizationRootPolicyType)(nil)).Elem()
}

func (o OrganizationRootPolicyTypeArrayOutput) ToOrganizationRootPolicyTypeArrayOutput() OrganizationRootPolicyTypeArrayOutput {
	return o
}

func (o OrganizationRootPolicyTypeArrayOutput) ToOrganizationRootPolicyTypeArrayOutputWithContext(ctx context.Context) OrganizationRootPolicyTypeArrayOutput {
	return o
}

func (o OrganizationRootPolicyTypeArrayOutput) Index(i pulumi.IntInput) OrganizationRootPolicyTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OrganizationRootPolicyType {
		return vs[0].([]OrganizationRootPolicyType)[vs[1].(int)]
	}).(OrganizationRootPolicyTypeOutput)
}

type OrganizationalUnitAccount struct {
	// ARN of the organizational unit
	Arn *string `pulumi:"arn"`
	// Email of the account
	Email *string `pulumi:"email"`
	// Identifier of the organization unit
	Id *string `pulumi:"id"`
	// The name for the organizational unit
	Name *string `pulumi:"name"`
}

// OrganizationalUnitAccountInput is an input type that accepts OrganizationalUnitAccountArgs and OrganizationalUnitAccountOutput values.
// You can construct a concrete instance of `OrganizationalUnitAccountInput` via:
//
// 		 OrganizationalUnitAccountArgs{...}
//
type OrganizationalUnitAccountInput interface {
	pulumi.Input

	ToOrganizationalUnitAccountOutput() OrganizationalUnitAccountOutput
	ToOrganizationalUnitAccountOutputWithContext(context.Context) OrganizationalUnitAccountOutput
}

type OrganizationalUnitAccountArgs struct {
	// ARN of the organizational unit
	Arn pulumi.StringPtrInput `pulumi:"arn"`
	// Email of the account
	Email pulumi.StringPtrInput `pulumi:"email"`
	// Identifier of the organization unit
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name for the organizational unit
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (OrganizationalUnitAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationalUnitAccount)(nil)).Elem()
}

func (i OrganizationalUnitAccountArgs) ToOrganizationalUnitAccountOutput() OrganizationalUnitAccountOutput {
	return i.ToOrganizationalUnitAccountOutputWithContext(context.Background())
}

func (i OrganizationalUnitAccountArgs) ToOrganizationalUnitAccountOutputWithContext(ctx context.Context) OrganizationalUnitAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationalUnitAccountOutput)
}

// OrganizationalUnitAccountArrayInput is an input type that accepts OrganizationalUnitAccountArray and OrganizationalUnitAccountArrayOutput values.
// You can construct a concrete instance of `OrganizationalUnitAccountArrayInput` via:
//
// 		 OrganizationalUnitAccountArray{ OrganizationalUnitAccountArgs{...} }
//
type OrganizationalUnitAccountArrayInput interface {
	pulumi.Input

	ToOrganizationalUnitAccountArrayOutput() OrganizationalUnitAccountArrayOutput
	ToOrganizationalUnitAccountArrayOutputWithContext(context.Context) OrganizationalUnitAccountArrayOutput
}

type OrganizationalUnitAccountArray []OrganizationalUnitAccountInput

func (OrganizationalUnitAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OrganizationalUnitAccount)(nil)).Elem()
}

func (i OrganizationalUnitAccountArray) ToOrganizationalUnitAccountArrayOutput() OrganizationalUnitAccountArrayOutput {
	return i.ToOrganizationalUnitAccountArrayOutputWithContext(context.Background())
}

func (i OrganizationalUnitAccountArray) ToOrganizationalUnitAccountArrayOutputWithContext(ctx context.Context) OrganizationalUnitAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationalUnitAccountArrayOutput)
}

type OrganizationalUnitAccountOutput struct{ *pulumi.OutputState }

func (OrganizationalUnitAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationalUnitAccount)(nil)).Elem()
}

func (o OrganizationalUnitAccountOutput) ToOrganizationalUnitAccountOutput() OrganizationalUnitAccountOutput {
	return o
}

func (o OrganizationalUnitAccountOutput) ToOrganizationalUnitAccountOutputWithContext(ctx context.Context) OrganizationalUnitAccountOutput {
	return o
}

// ARN of the organizational unit
func (o OrganizationalUnitAccountOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrganizationalUnitAccount) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// Email of the account
func (o OrganizationalUnitAccountOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrganizationalUnitAccount) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// Identifier of the organization unit
func (o OrganizationalUnitAccountOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrganizationalUnitAccount) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name for the organizational unit
func (o OrganizationalUnitAccountOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrganizationalUnitAccount) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type OrganizationalUnitAccountArrayOutput struct{ *pulumi.OutputState }

func (OrganizationalUnitAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OrganizationalUnitAccount)(nil)).Elem()
}

func (o OrganizationalUnitAccountArrayOutput) ToOrganizationalUnitAccountArrayOutput() OrganizationalUnitAccountArrayOutput {
	return o
}

func (o OrganizationalUnitAccountArrayOutput) ToOrganizationalUnitAccountArrayOutputWithContext(ctx context.Context) OrganizationalUnitAccountArrayOutput {
	return o
}

func (o OrganizationalUnitAccountArrayOutput) Index(i pulumi.IntInput) OrganizationalUnitAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OrganizationalUnitAccount {
		return vs[0].([]OrganizationalUnitAccount)[vs[1].(int)]
	}).(OrganizationalUnitAccountOutput)
}

type GetOrganizationAccount struct {
	// ARN of the root
	Arn string `pulumi:"arn"`
	// Email of the account
	Email string `pulumi:"email"`
	// Identifier of the root
	Id string `pulumi:"id"`
	// The name of the policy type
	Name string `pulumi:"name"`
	// The status of the policy type as it relates to the associated root
	Status string `pulumi:"status"`
}

// GetOrganizationAccountInput is an input type that accepts GetOrganizationAccountArgs and GetOrganizationAccountOutput values.
// You can construct a concrete instance of `GetOrganizationAccountInput` via:
//
// 		 GetOrganizationAccountArgs{...}
//
type GetOrganizationAccountInput interface {
	pulumi.Input

	ToGetOrganizationAccountOutput() GetOrganizationAccountOutput
	ToGetOrganizationAccountOutputWithContext(context.Context) GetOrganizationAccountOutput
}

type GetOrganizationAccountArgs struct {
	// ARN of the root
	Arn pulumi.StringInput `pulumi:"arn"`
	// Email of the account
	Email pulumi.StringInput `pulumi:"email"`
	// Identifier of the root
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the policy type
	Name pulumi.StringInput `pulumi:"name"`
	// The status of the policy type as it relates to the associated root
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetOrganizationAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationAccount)(nil)).Elem()
}

func (i GetOrganizationAccountArgs) ToGetOrganizationAccountOutput() GetOrganizationAccountOutput {
	return i.ToGetOrganizationAccountOutputWithContext(context.Background())
}

func (i GetOrganizationAccountArgs) ToGetOrganizationAccountOutputWithContext(ctx context.Context) GetOrganizationAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrganizationAccountOutput)
}

// GetOrganizationAccountArrayInput is an input type that accepts GetOrganizationAccountArray and GetOrganizationAccountArrayOutput values.
// You can construct a concrete instance of `GetOrganizationAccountArrayInput` via:
//
// 		 GetOrganizationAccountArray{ GetOrganizationAccountArgs{...} }
//
type GetOrganizationAccountArrayInput interface {
	pulumi.Input

	ToGetOrganizationAccountArrayOutput() GetOrganizationAccountArrayOutput
	ToGetOrganizationAccountArrayOutputWithContext(context.Context) GetOrganizationAccountArrayOutput
}

type GetOrganizationAccountArray []GetOrganizationAccountInput

func (GetOrganizationAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOrganizationAccount)(nil)).Elem()
}

func (i GetOrganizationAccountArray) ToGetOrganizationAccountArrayOutput() GetOrganizationAccountArrayOutput {
	return i.ToGetOrganizationAccountArrayOutputWithContext(context.Background())
}

func (i GetOrganizationAccountArray) ToGetOrganizationAccountArrayOutputWithContext(ctx context.Context) GetOrganizationAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrganizationAccountArrayOutput)
}

type GetOrganizationAccountOutput struct{ *pulumi.OutputState }

func (GetOrganizationAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationAccount)(nil)).Elem()
}

func (o GetOrganizationAccountOutput) ToGetOrganizationAccountOutput() GetOrganizationAccountOutput {
	return o
}

func (o GetOrganizationAccountOutput) ToGetOrganizationAccountOutputWithContext(ctx context.Context) GetOrganizationAccountOutput {
	return o
}

// ARN of the root
func (o GetOrganizationAccountOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationAccount) string { return v.Arn }).(pulumi.StringOutput)
}

// Email of the account
func (o GetOrganizationAccountOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationAccount) string { return v.Email }).(pulumi.StringOutput)
}

// Identifier of the root
func (o GetOrganizationAccountOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationAccount) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the policy type
func (o GetOrganizationAccountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationAccount) string { return v.Name }).(pulumi.StringOutput)
}

// The status of the policy type as it relates to the associated root
func (o GetOrganizationAccountOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationAccount) string { return v.Status }).(pulumi.StringOutput)
}

type GetOrganizationAccountArrayOutput struct{ *pulumi.OutputState }

func (GetOrganizationAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOrganizationAccount)(nil)).Elem()
}

func (o GetOrganizationAccountArrayOutput) ToGetOrganizationAccountArrayOutput() GetOrganizationAccountArrayOutput {
	return o
}

func (o GetOrganizationAccountArrayOutput) ToGetOrganizationAccountArrayOutputWithContext(ctx context.Context) GetOrganizationAccountArrayOutput {
	return o
}

func (o GetOrganizationAccountArrayOutput) Index(i pulumi.IntInput) GetOrganizationAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetOrganizationAccount {
		return vs[0].([]GetOrganizationAccount)[vs[1].(int)]
	}).(GetOrganizationAccountOutput)
}

type GetOrganizationNonMasterAccount struct {
	// ARN of the root
	Arn string `pulumi:"arn"`
	// Email of the account
	Email string `pulumi:"email"`
	// Identifier of the root
	Id string `pulumi:"id"`
	// The name of the policy type
	Name string `pulumi:"name"`
	// The status of the policy type as it relates to the associated root
	Status string `pulumi:"status"`
}

// GetOrganizationNonMasterAccountInput is an input type that accepts GetOrganizationNonMasterAccountArgs and GetOrganizationNonMasterAccountOutput values.
// You can construct a concrete instance of `GetOrganizationNonMasterAccountInput` via:
//
// 		 GetOrganizationNonMasterAccountArgs{...}
//
type GetOrganizationNonMasterAccountInput interface {
	pulumi.Input

	ToGetOrganizationNonMasterAccountOutput() GetOrganizationNonMasterAccountOutput
	ToGetOrganizationNonMasterAccountOutputWithContext(context.Context) GetOrganizationNonMasterAccountOutput
}

type GetOrganizationNonMasterAccountArgs struct {
	// ARN of the root
	Arn pulumi.StringInput `pulumi:"arn"`
	// Email of the account
	Email pulumi.StringInput `pulumi:"email"`
	// Identifier of the root
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the policy type
	Name pulumi.StringInput `pulumi:"name"`
	// The status of the policy type as it relates to the associated root
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetOrganizationNonMasterAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationNonMasterAccount)(nil)).Elem()
}

func (i GetOrganizationNonMasterAccountArgs) ToGetOrganizationNonMasterAccountOutput() GetOrganizationNonMasterAccountOutput {
	return i.ToGetOrganizationNonMasterAccountOutputWithContext(context.Background())
}

func (i GetOrganizationNonMasterAccountArgs) ToGetOrganizationNonMasterAccountOutputWithContext(ctx context.Context) GetOrganizationNonMasterAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrganizationNonMasterAccountOutput)
}

// GetOrganizationNonMasterAccountArrayInput is an input type that accepts GetOrganizationNonMasterAccountArray and GetOrganizationNonMasterAccountArrayOutput values.
// You can construct a concrete instance of `GetOrganizationNonMasterAccountArrayInput` via:
//
// 		 GetOrganizationNonMasterAccountArray{ GetOrganizationNonMasterAccountArgs{...} }
//
type GetOrganizationNonMasterAccountArrayInput interface {
	pulumi.Input

	ToGetOrganizationNonMasterAccountArrayOutput() GetOrganizationNonMasterAccountArrayOutput
	ToGetOrganizationNonMasterAccountArrayOutputWithContext(context.Context) GetOrganizationNonMasterAccountArrayOutput
}

type GetOrganizationNonMasterAccountArray []GetOrganizationNonMasterAccountInput

func (GetOrganizationNonMasterAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOrganizationNonMasterAccount)(nil)).Elem()
}

func (i GetOrganizationNonMasterAccountArray) ToGetOrganizationNonMasterAccountArrayOutput() GetOrganizationNonMasterAccountArrayOutput {
	return i.ToGetOrganizationNonMasterAccountArrayOutputWithContext(context.Background())
}

func (i GetOrganizationNonMasterAccountArray) ToGetOrganizationNonMasterAccountArrayOutputWithContext(ctx context.Context) GetOrganizationNonMasterAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrganizationNonMasterAccountArrayOutput)
}

type GetOrganizationNonMasterAccountOutput struct{ *pulumi.OutputState }

func (GetOrganizationNonMasterAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationNonMasterAccount)(nil)).Elem()
}

func (o GetOrganizationNonMasterAccountOutput) ToGetOrganizationNonMasterAccountOutput() GetOrganizationNonMasterAccountOutput {
	return o
}

func (o GetOrganizationNonMasterAccountOutput) ToGetOrganizationNonMasterAccountOutputWithContext(ctx context.Context) GetOrganizationNonMasterAccountOutput {
	return o
}

// ARN of the root
func (o GetOrganizationNonMasterAccountOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationNonMasterAccount) string { return v.Arn }).(pulumi.StringOutput)
}

// Email of the account
func (o GetOrganizationNonMasterAccountOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationNonMasterAccount) string { return v.Email }).(pulumi.StringOutput)
}

// Identifier of the root
func (o GetOrganizationNonMasterAccountOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationNonMasterAccount) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the policy type
func (o GetOrganizationNonMasterAccountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationNonMasterAccount) string { return v.Name }).(pulumi.StringOutput)
}

// The status of the policy type as it relates to the associated root
func (o GetOrganizationNonMasterAccountOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationNonMasterAccount) string { return v.Status }).(pulumi.StringOutput)
}

type GetOrganizationNonMasterAccountArrayOutput struct{ *pulumi.OutputState }

func (GetOrganizationNonMasterAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOrganizationNonMasterAccount)(nil)).Elem()
}

func (o GetOrganizationNonMasterAccountArrayOutput) ToGetOrganizationNonMasterAccountArrayOutput() GetOrganizationNonMasterAccountArrayOutput {
	return o
}

func (o GetOrganizationNonMasterAccountArrayOutput) ToGetOrganizationNonMasterAccountArrayOutputWithContext(ctx context.Context) GetOrganizationNonMasterAccountArrayOutput {
	return o
}

func (o GetOrganizationNonMasterAccountArrayOutput) Index(i pulumi.IntInput) GetOrganizationNonMasterAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetOrganizationNonMasterAccount {
		return vs[0].([]GetOrganizationNonMasterAccount)[vs[1].(int)]
	}).(GetOrganizationNonMasterAccountOutput)
}

type GetOrganizationRoot struct {
	// ARN of the root
	Arn string `pulumi:"arn"`
	// Identifier of the root
	Id string `pulumi:"id"`
	// The name of the policy type
	Name string `pulumi:"name"`
	// List of policy types enabled for this root. All elements have these attributes:
	PolicyTypes []GetOrganizationRootPolicyType `pulumi:"policyTypes"`
}

// GetOrganizationRootInput is an input type that accepts GetOrganizationRootArgs and GetOrganizationRootOutput values.
// You can construct a concrete instance of `GetOrganizationRootInput` via:
//
// 		 GetOrganizationRootArgs{...}
//
type GetOrganizationRootInput interface {
	pulumi.Input

	ToGetOrganizationRootOutput() GetOrganizationRootOutput
	ToGetOrganizationRootOutputWithContext(context.Context) GetOrganizationRootOutput
}

type GetOrganizationRootArgs struct {
	// ARN of the root
	Arn pulumi.StringInput `pulumi:"arn"`
	// Identifier of the root
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the policy type
	Name pulumi.StringInput `pulumi:"name"`
	// List of policy types enabled for this root. All elements have these attributes:
	PolicyTypes GetOrganizationRootPolicyTypeArrayInput `pulumi:"policyTypes"`
}

func (GetOrganizationRootArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationRoot)(nil)).Elem()
}

func (i GetOrganizationRootArgs) ToGetOrganizationRootOutput() GetOrganizationRootOutput {
	return i.ToGetOrganizationRootOutputWithContext(context.Background())
}

func (i GetOrganizationRootArgs) ToGetOrganizationRootOutputWithContext(ctx context.Context) GetOrganizationRootOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrganizationRootOutput)
}

// GetOrganizationRootArrayInput is an input type that accepts GetOrganizationRootArray and GetOrganizationRootArrayOutput values.
// You can construct a concrete instance of `GetOrganizationRootArrayInput` via:
//
// 		 GetOrganizationRootArray{ GetOrganizationRootArgs{...} }
//
type GetOrganizationRootArrayInput interface {
	pulumi.Input

	ToGetOrganizationRootArrayOutput() GetOrganizationRootArrayOutput
	ToGetOrganizationRootArrayOutputWithContext(context.Context) GetOrganizationRootArrayOutput
}

type GetOrganizationRootArray []GetOrganizationRootInput

func (GetOrganizationRootArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOrganizationRoot)(nil)).Elem()
}

func (i GetOrganizationRootArray) ToGetOrganizationRootArrayOutput() GetOrganizationRootArrayOutput {
	return i.ToGetOrganizationRootArrayOutputWithContext(context.Background())
}

func (i GetOrganizationRootArray) ToGetOrganizationRootArrayOutputWithContext(ctx context.Context) GetOrganizationRootArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrganizationRootArrayOutput)
}

type GetOrganizationRootOutput struct{ *pulumi.OutputState }

func (GetOrganizationRootOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationRoot)(nil)).Elem()
}

func (o GetOrganizationRootOutput) ToGetOrganizationRootOutput() GetOrganizationRootOutput {
	return o
}

func (o GetOrganizationRootOutput) ToGetOrganizationRootOutputWithContext(ctx context.Context) GetOrganizationRootOutput {
	return o
}

// ARN of the root
func (o GetOrganizationRootOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationRoot) string { return v.Arn }).(pulumi.StringOutput)
}

// Identifier of the root
func (o GetOrganizationRootOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationRoot) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the policy type
func (o GetOrganizationRootOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationRoot) string { return v.Name }).(pulumi.StringOutput)
}

// List of policy types enabled for this root. All elements have these attributes:
func (o GetOrganizationRootOutput) PolicyTypes() GetOrganizationRootPolicyTypeArrayOutput {
	return o.ApplyT(func(v GetOrganizationRoot) []GetOrganizationRootPolicyType { return v.PolicyTypes }).(GetOrganizationRootPolicyTypeArrayOutput)
}

type GetOrganizationRootArrayOutput struct{ *pulumi.OutputState }

func (GetOrganizationRootArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOrganizationRoot)(nil)).Elem()
}

func (o GetOrganizationRootArrayOutput) ToGetOrganizationRootArrayOutput() GetOrganizationRootArrayOutput {
	return o
}

func (o GetOrganizationRootArrayOutput) ToGetOrganizationRootArrayOutputWithContext(ctx context.Context) GetOrganizationRootArrayOutput {
	return o
}

func (o GetOrganizationRootArrayOutput) Index(i pulumi.IntInput) GetOrganizationRootOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetOrganizationRoot {
		return vs[0].([]GetOrganizationRoot)[vs[1].(int)]
	}).(GetOrganizationRootOutput)
}

type GetOrganizationRootPolicyType struct {
	// The status of the policy type as it relates to the associated root
	Status string `pulumi:"status"`
	Type   string `pulumi:"type"`
}

// GetOrganizationRootPolicyTypeInput is an input type that accepts GetOrganizationRootPolicyTypeArgs and GetOrganizationRootPolicyTypeOutput values.
// You can construct a concrete instance of `GetOrganizationRootPolicyTypeInput` via:
//
// 		 GetOrganizationRootPolicyTypeArgs{...}
//
type GetOrganizationRootPolicyTypeInput interface {
	pulumi.Input

	ToGetOrganizationRootPolicyTypeOutput() GetOrganizationRootPolicyTypeOutput
	ToGetOrganizationRootPolicyTypeOutputWithContext(context.Context) GetOrganizationRootPolicyTypeOutput
}

type GetOrganizationRootPolicyTypeArgs struct {
	// The status of the policy type as it relates to the associated root
	Status pulumi.StringInput `pulumi:"status"`
	Type   pulumi.StringInput `pulumi:"type"`
}

func (GetOrganizationRootPolicyTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationRootPolicyType)(nil)).Elem()
}

func (i GetOrganizationRootPolicyTypeArgs) ToGetOrganizationRootPolicyTypeOutput() GetOrganizationRootPolicyTypeOutput {
	return i.ToGetOrganizationRootPolicyTypeOutputWithContext(context.Background())
}

func (i GetOrganizationRootPolicyTypeArgs) ToGetOrganizationRootPolicyTypeOutputWithContext(ctx context.Context) GetOrganizationRootPolicyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrganizationRootPolicyTypeOutput)
}

// GetOrganizationRootPolicyTypeArrayInput is an input type that accepts GetOrganizationRootPolicyTypeArray and GetOrganizationRootPolicyTypeArrayOutput values.
// You can construct a concrete instance of `GetOrganizationRootPolicyTypeArrayInput` via:
//
// 		 GetOrganizationRootPolicyTypeArray{ GetOrganizationRootPolicyTypeArgs{...} }
//
type GetOrganizationRootPolicyTypeArrayInput interface {
	pulumi.Input

	ToGetOrganizationRootPolicyTypeArrayOutput() GetOrganizationRootPolicyTypeArrayOutput
	ToGetOrganizationRootPolicyTypeArrayOutputWithContext(context.Context) GetOrganizationRootPolicyTypeArrayOutput
}

type GetOrganizationRootPolicyTypeArray []GetOrganizationRootPolicyTypeInput

func (GetOrganizationRootPolicyTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOrganizationRootPolicyType)(nil)).Elem()
}

func (i GetOrganizationRootPolicyTypeArray) ToGetOrganizationRootPolicyTypeArrayOutput() GetOrganizationRootPolicyTypeArrayOutput {
	return i.ToGetOrganizationRootPolicyTypeArrayOutputWithContext(context.Background())
}

func (i GetOrganizationRootPolicyTypeArray) ToGetOrganizationRootPolicyTypeArrayOutputWithContext(ctx context.Context) GetOrganizationRootPolicyTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrganizationRootPolicyTypeArrayOutput)
}

type GetOrganizationRootPolicyTypeOutput struct{ *pulumi.OutputState }

func (GetOrganizationRootPolicyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationRootPolicyType)(nil)).Elem()
}

func (o GetOrganizationRootPolicyTypeOutput) ToGetOrganizationRootPolicyTypeOutput() GetOrganizationRootPolicyTypeOutput {
	return o
}

func (o GetOrganizationRootPolicyTypeOutput) ToGetOrganizationRootPolicyTypeOutputWithContext(ctx context.Context) GetOrganizationRootPolicyTypeOutput {
	return o
}

// The status of the policy type as it relates to the associated root
func (o GetOrganizationRootPolicyTypeOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationRootPolicyType) string { return v.Status }).(pulumi.StringOutput)
}

func (o GetOrganizationRootPolicyTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationRootPolicyType) string { return v.Type }).(pulumi.StringOutput)
}

type GetOrganizationRootPolicyTypeArrayOutput struct{ *pulumi.OutputState }

func (GetOrganizationRootPolicyTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOrganizationRootPolicyType)(nil)).Elem()
}

func (o GetOrganizationRootPolicyTypeArrayOutput) ToGetOrganizationRootPolicyTypeArrayOutput() GetOrganizationRootPolicyTypeArrayOutput {
	return o
}

func (o GetOrganizationRootPolicyTypeArrayOutput) ToGetOrganizationRootPolicyTypeArrayOutputWithContext(ctx context.Context) GetOrganizationRootPolicyTypeArrayOutput {
	return o
}

func (o GetOrganizationRootPolicyTypeArrayOutput) Index(i pulumi.IntInput) GetOrganizationRootPolicyTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetOrganizationRootPolicyType {
		return vs[0].([]GetOrganizationRootPolicyType)[vs[1].(int)]
	}).(GetOrganizationRootPolicyTypeOutput)
}

type GetOrganizationalUnitsChildren struct {
	// ARN of the organizational unit
	Arn string `pulumi:"arn"`
	// ID of the organizational unit
	Id string `pulumi:"id"`
	// Name of the organizational unit
	Name string `pulumi:"name"`
}

// GetOrganizationalUnitsChildrenInput is an input type that accepts GetOrganizationalUnitsChildrenArgs and GetOrganizationalUnitsChildrenOutput values.
// You can construct a concrete instance of `GetOrganizationalUnitsChildrenInput` via:
//
// 		 GetOrganizationalUnitsChildrenArgs{...}
//
type GetOrganizationalUnitsChildrenInput interface {
	pulumi.Input

	ToGetOrganizationalUnitsChildrenOutput() GetOrganizationalUnitsChildrenOutput
	ToGetOrganizationalUnitsChildrenOutputWithContext(context.Context) GetOrganizationalUnitsChildrenOutput
}

type GetOrganizationalUnitsChildrenArgs struct {
	// ARN of the organizational unit
	Arn pulumi.StringInput `pulumi:"arn"`
	// ID of the organizational unit
	Id pulumi.StringInput `pulumi:"id"`
	// Name of the organizational unit
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetOrganizationalUnitsChildrenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationalUnitsChildren)(nil)).Elem()
}

func (i GetOrganizationalUnitsChildrenArgs) ToGetOrganizationalUnitsChildrenOutput() GetOrganizationalUnitsChildrenOutput {
	return i.ToGetOrganizationalUnitsChildrenOutputWithContext(context.Background())
}

func (i GetOrganizationalUnitsChildrenArgs) ToGetOrganizationalUnitsChildrenOutputWithContext(ctx context.Context) GetOrganizationalUnitsChildrenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrganizationalUnitsChildrenOutput)
}

// GetOrganizationalUnitsChildrenArrayInput is an input type that accepts GetOrganizationalUnitsChildrenArray and GetOrganizationalUnitsChildrenArrayOutput values.
// You can construct a concrete instance of `GetOrganizationalUnitsChildrenArrayInput` via:
//
// 		 GetOrganizationalUnitsChildrenArray{ GetOrganizationalUnitsChildrenArgs{...} }
//
type GetOrganizationalUnitsChildrenArrayInput interface {
	pulumi.Input

	ToGetOrganizationalUnitsChildrenArrayOutput() GetOrganizationalUnitsChildrenArrayOutput
	ToGetOrganizationalUnitsChildrenArrayOutputWithContext(context.Context) GetOrganizationalUnitsChildrenArrayOutput
}

type GetOrganizationalUnitsChildrenArray []GetOrganizationalUnitsChildrenInput

func (GetOrganizationalUnitsChildrenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOrganizationalUnitsChildren)(nil)).Elem()
}

func (i GetOrganizationalUnitsChildrenArray) ToGetOrganizationalUnitsChildrenArrayOutput() GetOrganizationalUnitsChildrenArrayOutput {
	return i.ToGetOrganizationalUnitsChildrenArrayOutputWithContext(context.Background())
}

func (i GetOrganizationalUnitsChildrenArray) ToGetOrganizationalUnitsChildrenArrayOutputWithContext(ctx context.Context) GetOrganizationalUnitsChildrenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrganizationalUnitsChildrenArrayOutput)
}

type GetOrganizationalUnitsChildrenOutput struct{ *pulumi.OutputState }

func (GetOrganizationalUnitsChildrenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationalUnitsChildren)(nil)).Elem()
}

func (o GetOrganizationalUnitsChildrenOutput) ToGetOrganizationalUnitsChildrenOutput() GetOrganizationalUnitsChildrenOutput {
	return o
}

func (o GetOrganizationalUnitsChildrenOutput) ToGetOrganizationalUnitsChildrenOutputWithContext(ctx context.Context) GetOrganizationalUnitsChildrenOutput {
	return o
}

// ARN of the organizational unit
func (o GetOrganizationalUnitsChildrenOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationalUnitsChildren) string { return v.Arn }).(pulumi.StringOutput)
}

// ID of the organizational unit
func (o GetOrganizationalUnitsChildrenOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationalUnitsChildren) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the organizational unit
func (o GetOrganizationalUnitsChildrenOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationalUnitsChildren) string { return v.Name }).(pulumi.StringOutput)
}

type GetOrganizationalUnitsChildrenArrayOutput struct{ *pulumi.OutputState }

func (GetOrganizationalUnitsChildrenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOrganizationalUnitsChildren)(nil)).Elem()
}

func (o GetOrganizationalUnitsChildrenArrayOutput) ToGetOrganizationalUnitsChildrenArrayOutput() GetOrganizationalUnitsChildrenArrayOutput {
	return o
}

func (o GetOrganizationalUnitsChildrenArrayOutput) ToGetOrganizationalUnitsChildrenArrayOutputWithContext(ctx context.Context) GetOrganizationalUnitsChildrenArrayOutput {
	return o
}

func (o GetOrganizationalUnitsChildrenArrayOutput) Index(i pulumi.IntInput) GetOrganizationalUnitsChildrenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetOrganizationalUnitsChildren {
		return vs[0].([]GetOrganizationalUnitsChildren)[vs[1].(int)]
	}).(GetOrganizationalUnitsChildrenOutput)
}

func init() {
	pulumi.RegisterOutputType(OrganizationAccountOutput{})
	pulumi.RegisterOutputType(OrganizationAccountArrayOutput{})
	pulumi.RegisterOutputType(OrganizationNonMasterAccountOutput{})
	pulumi.RegisterOutputType(OrganizationNonMasterAccountArrayOutput{})
	pulumi.RegisterOutputType(OrganizationRootOutput{})
	pulumi.RegisterOutputType(OrganizationRootArrayOutput{})
	pulumi.RegisterOutputType(OrganizationRootPolicyTypeOutput{})
	pulumi.RegisterOutputType(OrganizationRootPolicyTypeArrayOutput{})
	pulumi.RegisterOutputType(OrganizationalUnitAccountOutput{})
	pulumi.RegisterOutputType(OrganizationalUnitAccountArrayOutput{})
	pulumi.RegisterOutputType(GetOrganizationAccountOutput{})
	pulumi.RegisterOutputType(GetOrganizationAccountArrayOutput{})
	pulumi.RegisterOutputType(GetOrganizationNonMasterAccountOutput{})
	pulumi.RegisterOutputType(GetOrganizationNonMasterAccountArrayOutput{})
	pulumi.RegisterOutputType(GetOrganizationRootOutput{})
	pulumi.RegisterOutputType(GetOrganizationRootArrayOutput{})
	pulumi.RegisterOutputType(GetOrganizationRootPolicyTypeOutput{})
	pulumi.RegisterOutputType(GetOrganizationRootPolicyTypeArrayOutput{})
	pulumi.RegisterOutputType(GetOrganizationalUnitsChildrenOutput{})
	pulumi.RegisterOutputType(GetOrganizationalUnitsChildrenArrayOutput{})
}
