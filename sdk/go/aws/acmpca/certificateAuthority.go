// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package acmpca

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource to manage AWS Certificate Manager Private Certificate Authorities (ACM PCA Certificate Authorities).
// 
// ~> **NOTE:** Creating this resource will leave the certificate authority in a `PENDING_CERTIFICATE` status, which means it cannot yet issue certificates. To complete this setup, you must fully sign the certificate authority CSR available in the `certificate_signing_request` attribute and import the signed certificate outside of Terraform. Terraform can support another resource to manage that workflow automatically in the future.
type CertificateAuthority struct {
	s *pulumi.ResourceState
}

// NewCertificateAuthority registers a new resource with the given unique name, arguments, and options.
func NewCertificateAuthority(ctx *pulumi.Context,
	name string, args *CertificateAuthorityArgs, opts ...pulumi.ResourceOpt) (*CertificateAuthority, error) {
	if args == nil || args.CertificateAuthorityConfiguration == nil {
		return nil, errors.New("missing required argument 'CertificateAuthorityConfiguration'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["certificateAuthorityConfiguration"] = nil
		inputs["enabled"] = nil
		inputs["revocationConfiguration"] = nil
		inputs["tags"] = nil
		inputs["type"] = nil
	} else {
		inputs["certificateAuthorityConfiguration"] = args.CertificateAuthorityConfiguration
		inputs["enabled"] = args.Enabled
		inputs["revocationConfiguration"] = args.RevocationConfiguration
		inputs["tags"] = args.Tags
		inputs["type"] = args.Type
	}
	inputs["arn"] = nil
	inputs["certificate"] = nil
	inputs["certificateChain"] = nil
	inputs["certificateSigningRequest"] = nil
	inputs["notAfter"] = nil
	inputs["notBefore"] = nil
	inputs["serial"] = nil
	inputs["status"] = nil
	s, err := ctx.RegisterResource("aws:acmpca/certificateAuthority:CertificateAuthority", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &CertificateAuthority{s: s}, nil
}

// GetCertificateAuthority gets an existing CertificateAuthority resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificateAuthority(ctx *pulumi.Context,
	name string, id pulumi.ID, state *CertificateAuthorityState, opts ...pulumi.ResourceOpt) (*CertificateAuthority, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["certificate"] = state.Certificate
		inputs["certificateAuthorityConfiguration"] = state.CertificateAuthorityConfiguration
		inputs["certificateChain"] = state.CertificateChain
		inputs["certificateSigningRequest"] = state.CertificateSigningRequest
		inputs["enabled"] = state.Enabled
		inputs["notAfter"] = state.NotAfter
		inputs["notBefore"] = state.NotBefore
		inputs["revocationConfiguration"] = state.RevocationConfiguration
		inputs["serial"] = state.Serial
		inputs["status"] = state.Status
		inputs["tags"] = state.Tags
		inputs["type"] = state.Type
	}
	s, err := ctx.ReadResource("aws:acmpca/certificateAuthority:CertificateAuthority", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &CertificateAuthority{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *CertificateAuthority) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *CertificateAuthority) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Amazon Resource Name (ARN) of the certificate authority.
func (r *CertificateAuthority) Arn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["arn"])
}

// Base64-encoded certificate authority (CA) certificate. Only available after the certificate authority certificate has been imported.
func (r *CertificateAuthority) Certificate() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["certificate"])
}

// Nested argument containing algorithms and certificate subject information. Defined below.
func (r *CertificateAuthority) CertificateAuthorityConfiguration() *pulumi.Output {
	return r.s.State["certificateAuthorityConfiguration"]
}

// Base64-encoded certificate chain that includes any intermediate certificates and chains up to root on-premises certificate that you used to sign your private CA certificate. The chain does not include your private CA certificate. Only available after the certificate authority certificate has been imported.
func (r *CertificateAuthority) CertificateChain() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["certificateChain"])
}

// The base64 PEM-encoded certificate signing request (CSR) for your private CA certificate.
func (r *CertificateAuthority) CertificateSigningRequest() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["certificateSigningRequest"])
}

// Boolean value that specifies whether certificate revocation lists (CRLs) are enabled. Defaults to `false`.
func (r *CertificateAuthority) Enabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enabled"])
}

// Date and time after which the certificate authority is not valid. Only available after the certificate authority certificate has been imported.
func (r *CertificateAuthority) NotAfter() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["notAfter"])
}

// Date and time before which the certificate authority is not valid. Only available after the certificate authority certificate has been imported.
func (r *CertificateAuthority) NotBefore() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["notBefore"])
}

// Nested argument containing revocation configuration. Defined below.
func (r *CertificateAuthority) RevocationConfiguration() *pulumi.Output {
	return r.s.State["revocationConfiguration"]
}

// Serial number of the certificate authority. Only available after the certificate authority certificate has been imported.
func (r *CertificateAuthority) Serial() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["serial"])
}

// Status of the certificate authority.
func (r *CertificateAuthority) Status() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["status"])
}

// Specifies a key-value map of user-defined tags that are attached to the certificate authority.
func (r *CertificateAuthority) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// The type of the certificate authority. Currently, this must be `SUBORDINATE`.
func (r *CertificateAuthority) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

// Input properties used for looking up and filtering CertificateAuthority resources.
type CertificateAuthorityState struct {
	// Amazon Resource Name (ARN) of the certificate authority.
	Arn interface{}
	// Base64-encoded certificate authority (CA) certificate. Only available after the certificate authority certificate has been imported.
	Certificate interface{}
	// Nested argument containing algorithms and certificate subject information. Defined below.
	CertificateAuthorityConfiguration interface{}
	// Base64-encoded certificate chain that includes any intermediate certificates and chains up to root on-premises certificate that you used to sign your private CA certificate. The chain does not include your private CA certificate. Only available after the certificate authority certificate has been imported.
	CertificateChain interface{}
	// The base64 PEM-encoded certificate signing request (CSR) for your private CA certificate.
	CertificateSigningRequest interface{}
	// Boolean value that specifies whether certificate revocation lists (CRLs) are enabled. Defaults to `false`.
	Enabled interface{}
	// Date and time after which the certificate authority is not valid. Only available after the certificate authority certificate has been imported.
	NotAfter interface{}
	// Date and time before which the certificate authority is not valid. Only available after the certificate authority certificate has been imported.
	NotBefore interface{}
	// Nested argument containing revocation configuration. Defined below.
	RevocationConfiguration interface{}
	// Serial number of the certificate authority. Only available after the certificate authority certificate has been imported.
	Serial interface{}
	// Status of the certificate authority.
	Status interface{}
	// Specifies a key-value map of user-defined tags that are attached to the certificate authority.
	Tags interface{}
	// The type of the certificate authority. Currently, this must be `SUBORDINATE`.
	Type interface{}
}

// The set of arguments for constructing a CertificateAuthority resource.
type CertificateAuthorityArgs struct {
	// Nested argument containing algorithms and certificate subject information. Defined below.
	CertificateAuthorityConfiguration interface{}
	// Boolean value that specifies whether certificate revocation lists (CRLs) are enabled. Defaults to `false`.
	Enabled interface{}
	// Nested argument containing revocation configuration. Defined below.
	RevocationConfiguration interface{}
	// Specifies a key-value map of user-defined tags that are attached to the certificate authority.
	Tags interface{}
	// The type of the certificate authority. Currently, this must be `SUBORDINATE`.
	Type interface{}
}
