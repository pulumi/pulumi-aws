// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kinesis

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VideoStream struct {
	pulumi.CustomResourceState

	Arn                  pulumi.StringOutput    `pulumi:"arn"`
	CreationTime         pulumi.StringOutput    `pulumi:"creationTime"`
	DataRetentionInHours pulumi.IntPtrOutput    `pulumi:"dataRetentionInHours"`
	DeviceName           pulumi.StringPtrOutput `pulumi:"deviceName"`
	KmsKeyId             pulumi.StringOutput    `pulumi:"kmsKeyId"`
	MediaType            pulumi.StringPtrOutput `pulumi:"mediaType"`
	Name                 pulumi.StringOutput    `pulumi:"name"`
	Tags                 pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll              pulumi.StringMapOutput `pulumi:"tagsAll"`
	Version              pulumi.StringOutput    `pulumi:"version"`
}

// NewVideoStream registers a new resource with the given unique name, arguments, and options.
func NewVideoStream(ctx *pulumi.Context,
	name string, args *VideoStreamArgs, opts ...pulumi.ResourceOption) (*VideoStream, error) {
	if args == nil {
		args = &VideoStreamArgs{}
	}

	var resource VideoStream
	err := ctx.RegisterResource("aws:kinesis/videoStream:VideoStream", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVideoStream gets an existing VideoStream resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVideoStream(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VideoStreamState, opts ...pulumi.ResourceOption) (*VideoStream, error) {
	var resource VideoStream
	err := ctx.ReadResource("aws:kinesis/videoStream:VideoStream", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VideoStream resources.
type videoStreamState struct {
	Arn                  *string           `pulumi:"arn"`
	CreationTime         *string           `pulumi:"creationTime"`
	DataRetentionInHours *int              `pulumi:"dataRetentionInHours"`
	DeviceName           *string           `pulumi:"deviceName"`
	KmsKeyId             *string           `pulumi:"kmsKeyId"`
	MediaType            *string           `pulumi:"mediaType"`
	Name                 *string           `pulumi:"name"`
	Tags                 map[string]string `pulumi:"tags"`
	TagsAll              map[string]string `pulumi:"tagsAll"`
	Version              *string           `pulumi:"version"`
}

type VideoStreamState struct {
	Arn                  pulumi.StringPtrInput
	CreationTime         pulumi.StringPtrInput
	DataRetentionInHours pulumi.IntPtrInput
	DeviceName           pulumi.StringPtrInput
	KmsKeyId             pulumi.StringPtrInput
	MediaType            pulumi.StringPtrInput
	Name                 pulumi.StringPtrInput
	Tags                 pulumi.StringMapInput
	TagsAll              pulumi.StringMapInput
	Version              pulumi.StringPtrInput
}

func (VideoStreamState) ElementType() reflect.Type {
	return reflect.TypeOf((*videoStreamState)(nil)).Elem()
}

type videoStreamArgs struct {
	DataRetentionInHours *int              `pulumi:"dataRetentionInHours"`
	DeviceName           *string           `pulumi:"deviceName"`
	KmsKeyId             *string           `pulumi:"kmsKeyId"`
	MediaType            *string           `pulumi:"mediaType"`
	Name                 *string           `pulumi:"name"`
	Tags                 map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a VideoStream resource.
type VideoStreamArgs struct {
	DataRetentionInHours pulumi.IntPtrInput
	DeviceName           pulumi.StringPtrInput
	KmsKeyId             pulumi.StringPtrInput
	MediaType            pulumi.StringPtrInput
	Name                 pulumi.StringPtrInput
	Tags                 pulumi.StringMapInput
}

func (VideoStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*videoStreamArgs)(nil)).Elem()
}

type VideoStreamInput interface {
	pulumi.Input

	ToVideoStreamOutput() VideoStreamOutput
	ToVideoStreamOutputWithContext(ctx context.Context) VideoStreamOutput
}

func (*VideoStream) ElementType() reflect.Type {
	return reflect.TypeOf((**VideoStream)(nil)).Elem()
}

func (i *VideoStream) ToVideoStreamOutput() VideoStreamOutput {
	return i.ToVideoStreamOutputWithContext(context.Background())
}

func (i *VideoStream) ToVideoStreamOutputWithContext(ctx context.Context) VideoStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VideoStreamOutput)
}

// VideoStreamArrayInput is an input type that accepts VideoStreamArray and VideoStreamArrayOutput values.
// You can construct a concrete instance of `VideoStreamArrayInput` via:
//
//	VideoStreamArray{ VideoStreamArgs{...} }
type VideoStreamArrayInput interface {
	pulumi.Input

	ToVideoStreamArrayOutput() VideoStreamArrayOutput
	ToVideoStreamArrayOutputWithContext(context.Context) VideoStreamArrayOutput
}

type VideoStreamArray []VideoStreamInput

func (VideoStreamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VideoStream)(nil)).Elem()
}

func (i VideoStreamArray) ToVideoStreamArrayOutput() VideoStreamArrayOutput {
	return i.ToVideoStreamArrayOutputWithContext(context.Background())
}

func (i VideoStreamArray) ToVideoStreamArrayOutputWithContext(ctx context.Context) VideoStreamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VideoStreamArrayOutput)
}

// VideoStreamMapInput is an input type that accepts VideoStreamMap and VideoStreamMapOutput values.
// You can construct a concrete instance of `VideoStreamMapInput` via:
//
//	VideoStreamMap{ "key": VideoStreamArgs{...} }
type VideoStreamMapInput interface {
	pulumi.Input

	ToVideoStreamMapOutput() VideoStreamMapOutput
	ToVideoStreamMapOutputWithContext(context.Context) VideoStreamMapOutput
}

type VideoStreamMap map[string]VideoStreamInput

func (VideoStreamMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VideoStream)(nil)).Elem()
}

func (i VideoStreamMap) ToVideoStreamMapOutput() VideoStreamMapOutput {
	return i.ToVideoStreamMapOutputWithContext(context.Background())
}

func (i VideoStreamMap) ToVideoStreamMapOutputWithContext(ctx context.Context) VideoStreamMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VideoStreamMapOutput)
}

type VideoStreamOutput struct{ *pulumi.OutputState }

func (VideoStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VideoStream)(nil)).Elem()
}

func (o VideoStreamOutput) ToVideoStreamOutput() VideoStreamOutput {
	return o
}

func (o VideoStreamOutput) ToVideoStreamOutputWithContext(ctx context.Context) VideoStreamOutput {
	return o
}

func (o VideoStreamOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *VideoStream) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o VideoStreamOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *VideoStream) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

func (o VideoStreamOutput) DataRetentionInHours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VideoStream) pulumi.IntPtrOutput { return v.DataRetentionInHours }).(pulumi.IntPtrOutput)
}

func (o VideoStreamOutput) DeviceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VideoStream) pulumi.StringPtrOutput { return v.DeviceName }).(pulumi.StringPtrOutput)
}

func (o VideoStreamOutput) KmsKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *VideoStream) pulumi.StringOutput { return v.KmsKeyId }).(pulumi.StringOutput)
}

func (o VideoStreamOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VideoStream) pulumi.StringPtrOutput { return v.MediaType }).(pulumi.StringPtrOutput)
}

func (o VideoStreamOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VideoStream) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o VideoStreamOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VideoStream) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o VideoStreamOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VideoStream) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o VideoStreamOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *VideoStream) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type VideoStreamArrayOutput struct{ *pulumi.OutputState }

func (VideoStreamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VideoStream)(nil)).Elem()
}

func (o VideoStreamArrayOutput) ToVideoStreamArrayOutput() VideoStreamArrayOutput {
	return o
}

func (o VideoStreamArrayOutput) ToVideoStreamArrayOutputWithContext(ctx context.Context) VideoStreamArrayOutput {
	return o
}

func (o VideoStreamArrayOutput) Index(i pulumi.IntInput) VideoStreamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VideoStream {
		return vs[0].([]*VideoStream)[vs[1].(int)]
	}).(VideoStreamOutput)
}

type VideoStreamMapOutput struct{ *pulumi.OutputState }

func (VideoStreamMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VideoStream)(nil)).Elem()
}

func (o VideoStreamMapOutput) ToVideoStreamMapOutput() VideoStreamMapOutput {
	return o
}

func (o VideoStreamMapOutput) ToVideoStreamMapOutputWithContext(ctx context.Context) VideoStreamMapOutput {
	return o
}

func (o VideoStreamMapOutput) MapIndex(k pulumi.StringInput) VideoStreamOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VideoStream {
		return vs[0].(map[string]*VideoStream)[vs[1].(string)]
	}).(VideoStreamOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VideoStreamInput)(nil)).Elem(), &VideoStream{})
	pulumi.RegisterInputType(reflect.TypeOf((*VideoStreamArrayInput)(nil)).Elem(), VideoStreamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VideoStreamMapInput)(nil)).Elem(), VideoStreamMap{})
	pulumi.RegisterOutputType(VideoStreamOutput{})
	pulumi.RegisterOutputType(VideoStreamArrayOutput{})
	pulumi.RegisterOutputType(VideoStreamMapOutput{})
}
