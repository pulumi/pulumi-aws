// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kinesis

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Stream struct {
	pulumi.CustomResourceState

	Arn                     pulumi.StringOutput           `pulumi:"arn"`
	EncryptionType          pulumi.StringPtrOutput        `pulumi:"encryptionType"`
	EnforceConsumerDeletion pulumi.BoolPtrOutput          `pulumi:"enforceConsumerDeletion"`
	KmsKeyId                pulumi.StringPtrOutput        `pulumi:"kmsKeyId"`
	Name                    pulumi.StringOutput           `pulumi:"name"`
	RetentionPeriod         pulumi.IntPtrOutput           `pulumi:"retentionPeriod"`
	ShardCount              pulumi.IntPtrOutput           `pulumi:"shardCount"`
	ShardLevelMetrics       pulumi.StringArrayOutput      `pulumi:"shardLevelMetrics"`
	StreamModeDetails       StreamStreamModeDetailsOutput `pulumi:"streamModeDetails"`
	Tags                    pulumi.StringMapOutput        `pulumi:"tags"`
	TagsAll                 pulumi.StringMapOutput        `pulumi:"tagsAll"`
}

// NewStream registers a new resource with the given unique name, arguments, and options.
func NewStream(ctx *pulumi.Context,
	name string, args *StreamArgs, opts ...pulumi.ResourceOption) (*Stream, error) {
	if args == nil {
		args = &StreamArgs{}
	}

	var resource Stream
	err := ctx.RegisterResource("aws:kinesis/stream:Stream", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStream gets an existing Stream resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStream(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamState, opts ...pulumi.ResourceOption) (*Stream, error) {
	var resource Stream
	err := ctx.ReadResource("aws:kinesis/stream:Stream", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Stream resources.
type streamState struct {
	Arn                     *string                  `pulumi:"arn"`
	EncryptionType          *string                  `pulumi:"encryptionType"`
	EnforceConsumerDeletion *bool                    `pulumi:"enforceConsumerDeletion"`
	KmsKeyId                *string                  `pulumi:"kmsKeyId"`
	Name                    *string                  `pulumi:"name"`
	RetentionPeriod         *int                     `pulumi:"retentionPeriod"`
	ShardCount              *int                     `pulumi:"shardCount"`
	ShardLevelMetrics       []string                 `pulumi:"shardLevelMetrics"`
	StreamModeDetails       *StreamStreamModeDetails `pulumi:"streamModeDetails"`
	Tags                    map[string]string        `pulumi:"tags"`
	TagsAll                 map[string]string        `pulumi:"tagsAll"`
}

type StreamState struct {
	Arn                     pulumi.StringPtrInput
	EncryptionType          pulumi.StringPtrInput
	EnforceConsumerDeletion pulumi.BoolPtrInput
	KmsKeyId                pulumi.StringPtrInput
	Name                    pulumi.StringPtrInput
	RetentionPeriod         pulumi.IntPtrInput
	ShardCount              pulumi.IntPtrInput
	ShardLevelMetrics       pulumi.StringArrayInput
	StreamModeDetails       StreamStreamModeDetailsPtrInput
	Tags                    pulumi.StringMapInput
	TagsAll                 pulumi.StringMapInput
}

func (StreamState) ElementType() reflect.Type {
	return reflect.TypeOf((*streamState)(nil)).Elem()
}

type streamArgs struct {
	Arn                     *string                  `pulumi:"arn"`
	EncryptionType          *string                  `pulumi:"encryptionType"`
	EnforceConsumerDeletion *bool                    `pulumi:"enforceConsumerDeletion"`
	KmsKeyId                *string                  `pulumi:"kmsKeyId"`
	Name                    *string                  `pulumi:"name"`
	RetentionPeriod         *int                     `pulumi:"retentionPeriod"`
	ShardCount              *int                     `pulumi:"shardCount"`
	ShardLevelMetrics       []string                 `pulumi:"shardLevelMetrics"`
	StreamModeDetails       *StreamStreamModeDetails `pulumi:"streamModeDetails"`
	Tags                    map[string]string        `pulumi:"tags"`
}

// The set of arguments for constructing a Stream resource.
type StreamArgs struct {
	Arn                     pulumi.StringPtrInput
	EncryptionType          pulumi.StringPtrInput
	EnforceConsumerDeletion pulumi.BoolPtrInput
	KmsKeyId                pulumi.StringPtrInput
	Name                    pulumi.StringPtrInput
	RetentionPeriod         pulumi.IntPtrInput
	ShardCount              pulumi.IntPtrInput
	ShardLevelMetrics       pulumi.StringArrayInput
	StreamModeDetails       StreamStreamModeDetailsPtrInput
	Tags                    pulumi.StringMapInput
}

func (StreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*streamArgs)(nil)).Elem()
}

type StreamInput interface {
	pulumi.Input

	ToStreamOutput() StreamOutput
	ToStreamOutputWithContext(ctx context.Context) StreamOutput
}

func (*Stream) ElementType() reflect.Type {
	return reflect.TypeOf((**Stream)(nil)).Elem()
}

func (i *Stream) ToStreamOutput() StreamOutput {
	return i.ToStreamOutputWithContext(context.Background())
}

func (i *Stream) ToStreamOutputWithContext(ctx context.Context) StreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamOutput)
}

// StreamArrayInput is an input type that accepts StreamArray and StreamArrayOutput values.
// You can construct a concrete instance of `StreamArrayInput` via:
//
//	StreamArray{ StreamArgs{...} }
type StreamArrayInput interface {
	pulumi.Input

	ToStreamArrayOutput() StreamArrayOutput
	ToStreamArrayOutputWithContext(context.Context) StreamArrayOutput
}

type StreamArray []StreamInput

func (StreamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Stream)(nil)).Elem()
}

func (i StreamArray) ToStreamArrayOutput() StreamArrayOutput {
	return i.ToStreamArrayOutputWithContext(context.Background())
}

func (i StreamArray) ToStreamArrayOutputWithContext(ctx context.Context) StreamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamArrayOutput)
}

// StreamMapInput is an input type that accepts StreamMap and StreamMapOutput values.
// You can construct a concrete instance of `StreamMapInput` via:
//
//	StreamMap{ "key": StreamArgs{...} }
type StreamMapInput interface {
	pulumi.Input

	ToStreamMapOutput() StreamMapOutput
	ToStreamMapOutputWithContext(context.Context) StreamMapOutput
}

type StreamMap map[string]StreamInput

func (StreamMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Stream)(nil)).Elem()
}

func (i StreamMap) ToStreamMapOutput() StreamMapOutput {
	return i.ToStreamMapOutputWithContext(context.Background())
}

func (i StreamMap) ToStreamMapOutputWithContext(ctx context.Context) StreamMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamMapOutput)
}

type StreamOutput struct{ *pulumi.OutputState }

func (StreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Stream)(nil)).Elem()
}

func (o StreamOutput) ToStreamOutput() StreamOutput {
	return o
}

func (o StreamOutput) ToStreamOutputWithContext(ctx context.Context) StreamOutput {
	return o
}

func (o StreamOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Stream) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o StreamOutput) EncryptionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Stream) pulumi.StringPtrOutput { return v.EncryptionType }).(pulumi.StringPtrOutput)
}

func (o StreamOutput) EnforceConsumerDeletion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Stream) pulumi.BoolPtrOutput { return v.EnforceConsumerDeletion }).(pulumi.BoolPtrOutput)
}

func (o StreamOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Stream) pulumi.StringPtrOutput { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

func (o StreamOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Stream) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o StreamOutput) RetentionPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Stream) pulumi.IntPtrOutput { return v.RetentionPeriod }).(pulumi.IntPtrOutput)
}

func (o StreamOutput) ShardCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Stream) pulumi.IntPtrOutput { return v.ShardCount }).(pulumi.IntPtrOutput)
}

func (o StreamOutput) ShardLevelMetrics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Stream) pulumi.StringArrayOutput { return v.ShardLevelMetrics }).(pulumi.StringArrayOutput)
}

func (o StreamOutput) StreamModeDetails() StreamStreamModeDetailsOutput {
	return o.ApplyT(func(v *Stream) StreamStreamModeDetailsOutput { return v.StreamModeDetails }).(StreamStreamModeDetailsOutput)
}

func (o StreamOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Stream) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o StreamOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Stream) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type StreamArrayOutput struct{ *pulumi.OutputState }

func (StreamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Stream)(nil)).Elem()
}

func (o StreamArrayOutput) ToStreamArrayOutput() StreamArrayOutput {
	return o
}

func (o StreamArrayOutput) ToStreamArrayOutputWithContext(ctx context.Context) StreamArrayOutput {
	return o
}

func (o StreamArrayOutput) Index(i pulumi.IntInput) StreamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Stream {
		return vs[0].([]*Stream)[vs[1].(int)]
	}).(StreamOutput)
}

type StreamMapOutput struct{ *pulumi.OutputState }

func (StreamMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Stream)(nil)).Elem()
}

func (o StreamMapOutput) ToStreamMapOutput() StreamMapOutput {
	return o
}

func (o StreamMapOutput) ToStreamMapOutputWithContext(ctx context.Context) StreamMapOutput {
	return o
}

func (o StreamMapOutput) MapIndex(k pulumi.StringInput) StreamOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Stream {
		return vs[0].(map[string]*Stream)[vs[1].(string)]
	}).(StreamOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StreamInput)(nil)).Elem(), &Stream{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamArrayInput)(nil)).Elem(), StreamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamMapInput)(nil)).Elem(), StreamMap{})
	pulumi.RegisterOutputType(StreamOutput{})
	pulumi.RegisterOutputType(StreamArrayOutput{})
	pulumi.RegisterOutputType(StreamMapOutput{})
}
