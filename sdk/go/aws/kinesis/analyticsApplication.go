// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kinesis

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AnalyticsApplication struct {
	pulumi.CustomResourceState

	Arn                      pulumi.StringOutput                                   `pulumi:"arn"`
	CloudwatchLoggingOptions AnalyticsApplicationCloudwatchLoggingOptionsPtrOutput `pulumi:"cloudwatchLoggingOptions"`
	Code                     pulumi.StringPtrOutput                                `pulumi:"code"`
	CreateTimestamp          pulumi.StringOutput                                   `pulumi:"createTimestamp"`
	Description              pulumi.StringPtrOutput                                `pulumi:"description"`
	Inputs                   AnalyticsApplicationInputsPtrOutput                   `pulumi:"inputs"`
	LastUpdateTimestamp      pulumi.StringOutput                                   `pulumi:"lastUpdateTimestamp"`
	Name                     pulumi.StringOutput                                   `pulumi:"name"`
	Outputs                  AnalyticsApplicationOutputTypeArrayOutput             `pulumi:"outputs"`
	ReferenceDataSources     AnalyticsApplicationReferenceDataSourcesPtrOutput     `pulumi:"referenceDataSources"`
	StartApplication         pulumi.BoolPtrOutput                                  `pulumi:"startApplication"`
	Status                   pulumi.StringOutput                                   `pulumi:"status"`
	Tags                     pulumi.StringMapOutput                                `pulumi:"tags"`
	TagsAll                  pulumi.StringMapOutput                                `pulumi:"tagsAll"`
	Version                  pulumi.IntOutput                                      `pulumi:"version"`
}

// NewAnalyticsApplication registers a new resource with the given unique name, arguments, and options.
func NewAnalyticsApplication(ctx *pulumi.Context,
	name string, args *AnalyticsApplicationArgs, opts ...pulumi.ResourceOption) (*AnalyticsApplication, error) {
	if args == nil {
		args = &AnalyticsApplicationArgs{}
	}

	var resource AnalyticsApplication
	err := ctx.RegisterResource("aws:kinesis/analyticsApplication:AnalyticsApplication", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAnalyticsApplication gets an existing AnalyticsApplication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAnalyticsApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AnalyticsApplicationState, opts ...pulumi.ResourceOption) (*AnalyticsApplication, error) {
	var resource AnalyticsApplication
	err := ctx.ReadResource("aws:kinesis/analyticsApplication:AnalyticsApplication", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AnalyticsApplication resources.
type analyticsApplicationState struct {
	Arn                      *string                                       `pulumi:"arn"`
	CloudwatchLoggingOptions *AnalyticsApplicationCloudwatchLoggingOptions `pulumi:"cloudwatchLoggingOptions"`
	Code                     *string                                       `pulumi:"code"`
	CreateTimestamp          *string                                       `pulumi:"createTimestamp"`
	Description              *string                                       `pulumi:"description"`
	Inputs                   *AnalyticsApplicationInputs                   `pulumi:"inputs"`
	LastUpdateTimestamp      *string                                       `pulumi:"lastUpdateTimestamp"`
	Name                     *string                                       `pulumi:"name"`
	Outputs                  []AnalyticsApplicationOutputType              `pulumi:"outputs"`
	ReferenceDataSources     *AnalyticsApplicationReferenceDataSources     `pulumi:"referenceDataSources"`
	StartApplication         *bool                                         `pulumi:"startApplication"`
	Status                   *string                                       `pulumi:"status"`
	Tags                     map[string]string                             `pulumi:"tags"`
	TagsAll                  map[string]string                             `pulumi:"tagsAll"`
	Version                  *int                                          `pulumi:"version"`
}

type AnalyticsApplicationState struct {
	Arn                      pulumi.StringPtrInput
	CloudwatchLoggingOptions AnalyticsApplicationCloudwatchLoggingOptionsPtrInput
	Code                     pulumi.StringPtrInput
	CreateTimestamp          pulumi.StringPtrInput
	Description              pulumi.StringPtrInput
	Inputs                   AnalyticsApplicationInputsPtrInput
	LastUpdateTimestamp      pulumi.StringPtrInput
	Name                     pulumi.StringPtrInput
	Outputs                  AnalyticsApplicationOutputTypeArrayInput
	ReferenceDataSources     AnalyticsApplicationReferenceDataSourcesPtrInput
	StartApplication         pulumi.BoolPtrInput
	Status                   pulumi.StringPtrInput
	Tags                     pulumi.StringMapInput
	TagsAll                  pulumi.StringMapInput
	Version                  pulumi.IntPtrInput
}

func (AnalyticsApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*analyticsApplicationState)(nil)).Elem()
}

type analyticsApplicationArgs struct {
	CloudwatchLoggingOptions *AnalyticsApplicationCloudwatchLoggingOptions `pulumi:"cloudwatchLoggingOptions"`
	Code                     *string                                       `pulumi:"code"`
	Description              *string                                       `pulumi:"description"`
	Inputs                   *AnalyticsApplicationInputs                   `pulumi:"inputs"`
	Name                     *string                                       `pulumi:"name"`
	Outputs                  []AnalyticsApplicationOutputType              `pulumi:"outputs"`
	ReferenceDataSources     *AnalyticsApplicationReferenceDataSources     `pulumi:"referenceDataSources"`
	StartApplication         *bool                                         `pulumi:"startApplication"`
	Tags                     map[string]string                             `pulumi:"tags"`
}

// The set of arguments for constructing a AnalyticsApplication resource.
type AnalyticsApplicationArgs struct {
	CloudwatchLoggingOptions AnalyticsApplicationCloudwatchLoggingOptionsPtrInput
	Code                     pulumi.StringPtrInput
	Description              pulumi.StringPtrInput
	Inputs                   AnalyticsApplicationInputsPtrInput
	Name                     pulumi.StringPtrInput
	Outputs                  AnalyticsApplicationOutputTypeArrayInput
	ReferenceDataSources     AnalyticsApplicationReferenceDataSourcesPtrInput
	StartApplication         pulumi.BoolPtrInput
	Tags                     pulumi.StringMapInput
}

func (AnalyticsApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*analyticsApplicationArgs)(nil)).Elem()
}

type AnalyticsApplicationInput interface {
	pulumi.Input

	ToAnalyticsApplicationOutput() AnalyticsApplicationOutput
	ToAnalyticsApplicationOutputWithContext(ctx context.Context) AnalyticsApplicationOutput
}

func (*AnalyticsApplication) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalyticsApplication)(nil)).Elem()
}

func (i *AnalyticsApplication) ToAnalyticsApplicationOutput() AnalyticsApplicationOutput {
	return i.ToAnalyticsApplicationOutputWithContext(context.Background())
}

func (i *AnalyticsApplication) ToAnalyticsApplicationOutputWithContext(ctx context.Context) AnalyticsApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsApplicationOutput)
}

// AnalyticsApplicationArrayInput is an input type that accepts AnalyticsApplicationArray and AnalyticsApplicationArrayOutput values.
// You can construct a concrete instance of `AnalyticsApplicationArrayInput` via:
//
//	AnalyticsApplicationArray{ AnalyticsApplicationArgs{...} }
type AnalyticsApplicationArrayInput interface {
	pulumi.Input

	ToAnalyticsApplicationArrayOutput() AnalyticsApplicationArrayOutput
	ToAnalyticsApplicationArrayOutputWithContext(context.Context) AnalyticsApplicationArrayOutput
}

type AnalyticsApplicationArray []AnalyticsApplicationInput

func (AnalyticsApplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AnalyticsApplication)(nil)).Elem()
}

func (i AnalyticsApplicationArray) ToAnalyticsApplicationArrayOutput() AnalyticsApplicationArrayOutput {
	return i.ToAnalyticsApplicationArrayOutputWithContext(context.Background())
}

func (i AnalyticsApplicationArray) ToAnalyticsApplicationArrayOutputWithContext(ctx context.Context) AnalyticsApplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsApplicationArrayOutput)
}

// AnalyticsApplicationMapInput is an input type that accepts AnalyticsApplicationMap and AnalyticsApplicationMapOutput values.
// You can construct a concrete instance of `AnalyticsApplicationMapInput` via:
//
//	AnalyticsApplicationMap{ "key": AnalyticsApplicationArgs{...} }
type AnalyticsApplicationMapInput interface {
	pulumi.Input

	ToAnalyticsApplicationMapOutput() AnalyticsApplicationMapOutput
	ToAnalyticsApplicationMapOutputWithContext(context.Context) AnalyticsApplicationMapOutput
}

type AnalyticsApplicationMap map[string]AnalyticsApplicationInput

func (AnalyticsApplicationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AnalyticsApplication)(nil)).Elem()
}

func (i AnalyticsApplicationMap) ToAnalyticsApplicationMapOutput() AnalyticsApplicationMapOutput {
	return i.ToAnalyticsApplicationMapOutputWithContext(context.Background())
}

func (i AnalyticsApplicationMap) ToAnalyticsApplicationMapOutputWithContext(ctx context.Context) AnalyticsApplicationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsApplicationMapOutput)
}

type AnalyticsApplicationOutput struct{ *pulumi.OutputState }

func (AnalyticsApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalyticsApplication)(nil)).Elem()
}

func (o AnalyticsApplicationOutput) ToAnalyticsApplicationOutput() AnalyticsApplicationOutput {
	return o
}

func (o AnalyticsApplicationOutput) ToAnalyticsApplicationOutputWithContext(ctx context.Context) AnalyticsApplicationOutput {
	return o
}

func (o AnalyticsApplicationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *AnalyticsApplication) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o AnalyticsApplicationOutput) CloudwatchLoggingOptions() AnalyticsApplicationCloudwatchLoggingOptionsPtrOutput {
	return o.ApplyT(func(v *AnalyticsApplication) AnalyticsApplicationCloudwatchLoggingOptionsPtrOutput {
		return v.CloudwatchLoggingOptions
	}).(AnalyticsApplicationCloudwatchLoggingOptionsPtrOutput)
}

func (o AnalyticsApplicationOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnalyticsApplication) pulumi.StringPtrOutput { return v.Code }).(pulumi.StringPtrOutput)
}

func (o AnalyticsApplicationOutput) CreateTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *AnalyticsApplication) pulumi.StringOutput { return v.CreateTimestamp }).(pulumi.StringOutput)
}

func (o AnalyticsApplicationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnalyticsApplication) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o AnalyticsApplicationOutput) Inputs() AnalyticsApplicationInputsPtrOutput {
	return o.ApplyT(func(v *AnalyticsApplication) AnalyticsApplicationInputsPtrOutput { return v.Inputs }).(AnalyticsApplicationInputsPtrOutput)
}

func (o AnalyticsApplicationOutput) LastUpdateTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *AnalyticsApplication) pulumi.StringOutput { return v.LastUpdateTimestamp }).(pulumi.StringOutput)
}

func (o AnalyticsApplicationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AnalyticsApplication) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o AnalyticsApplicationOutput) Outputs() AnalyticsApplicationOutputTypeArrayOutput {
	return o.ApplyT(func(v *AnalyticsApplication) AnalyticsApplicationOutputTypeArrayOutput { return v.Outputs }).(AnalyticsApplicationOutputTypeArrayOutput)
}

func (o AnalyticsApplicationOutput) ReferenceDataSources() AnalyticsApplicationReferenceDataSourcesPtrOutput {
	return o.ApplyT(func(v *AnalyticsApplication) AnalyticsApplicationReferenceDataSourcesPtrOutput {
		return v.ReferenceDataSources
	}).(AnalyticsApplicationReferenceDataSourcesPtrOutput)
}

func (o AnalyticsApplicationOutput) StartApplication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AnalyticsApplication) pulumi.BoolPtrOutput { return v.StartApplication }).(pulumi.BoolPtrOutput)
}

func (o AnalyticsApplicationOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *AnalyticsApplication) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o AnalyticsApplicationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AnalyticsApplication) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o AnalyticsApplicationOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AnalyticsApplication) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o AnalyticsApplicationOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *AnalyticsApplication) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type AnalyticsApplicationArrayOutput struct{ *pulumi.OutputState }

func (AnalyticsApplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AnalyticsApplication)(nil)).Elem()
}

func (o AnalyticsApplicationArrayOutput) ToAnalyticsApplicationArrayOutput() AnalyticsApplicationArrayOutput {
	return o
}

func (o AnalyticsApplicationArrayOutput) ToAnalyticsApplicationArrayOutputWithContext(ctx context.Context) AnalyticsApplicationArrayOutput {
	return o
}

func (o AnalyticsApplicationArrayOutput) Index(i pulumi.IntInput) AnalyticsApplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AnalyticsApplication {
		return vs[0].([]*AnalyticsApplication)[vs[1].(int)]
	}).(AnalyticsApplicationOutput)
}

type AnalyticsApplicationMapOutput struct{ *pulumi.OutputState }

func (AnalyticsApplicationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AnalyticsApplication)(nil)).Elem()
}

func (o AnalyticsApplicationMapOutput) ToAnalyticsApplicationMapOutput() AnalyticsApplicationMapOutput {
	return o
}

func (o AnalyticsApplicationMapOutput) ToAnalyticsApplicationMapOutputWithContext(ctx context.Context) AnalyticsApplicationMapOutput {
	return o
}

func (o AnalyticsApplicationMapOutput) MapIndex(k pulumi.StringInput) AnalyticsApplicationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AnalyticsApplication {
		return vs[0].(map[string]*AnalyticsApplication)[vs[1].(string)]
	}).(AnalyticsApplicationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AnalyticsApplicationInput)(nil)).Elem(), &AnalyticsApplication{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalyticsApplicationArrayInput)(nil)).Elem(), AnalyticsApplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalyticsApplicationMapInput)(nil)).Elem(), AnalyticsApplicationMap{})
	pulumi.RegisterOutputType(AnalyticsApplicationOutput{})
	pulumi.RegisterOutputType(AnalyticsApplicationArrayOutput{})
	pulumi.RegisterOutputType(AnalyticsApplicationMapOutput{})
}
