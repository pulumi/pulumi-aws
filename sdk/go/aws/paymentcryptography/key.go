// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package paymentcryptography

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS Payment Cryptography Control Plane Key.
//
// ## Example Usage
//
// ## Import
//
// Using `pulumi import`, import Payment Cryptography Control Plane Key using the `arn:aws:payment-cryptography:us-east-1:123456789012:key/qtbojf64yshyvyzf`. For example:
//
// ```sh
// $ pulumi import aws:paymentcryptography/key:Key example arn:aws:payment-cryptography:us-east-1:123456789012:key/qtbojf64yshyvyzf
// ```
type Key struct {
	pulumi.CustomResourceState

	// ARN of the key.
	Arn                  pulumi.StringOutput `pulumi:"arn"`
	DeletionWindowInDays pulumi.IntOutput    `pulumi:"deletionWindowInDays"`
	// Whether to enable the key.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Whether the key is exportable from the service.
	Exportable pulumi.BoolOutput `pulumi:"exportable"`
	// Role of the key, the algorithm it supports, and the cryptographic operations allowed with the key.
	//
	// The following arguments are optional:
	KeyAttributes KeyKeyAttributesPtrOutput `pulumi:"keyAttributes"`
	// Key check value (KCV) is used to check if all parties holding a given key have the same key or to detect that a key has changed.
	KeyCheckValue pulumi.StringOutput `pulumi:"keyCheckValue"`
	// Algorithm that AWS Payment Cryptography uses to calculate the key check value (KCV).
	KeyCheckValueAlgorithm pulumi.StringOutput `pulumi:"keyCheckValueAlgorithm"`
	// Source of the key material.
	KeyOrigin pulumi.StringOutput `pulumi:"keyOrigin"`
	// State of key that is being created or deleted.
	KeyState pulumi.StringOutput `pulumi:"keyState"`
	// Map of tags assigned to the WorkSpaces Connection Alias. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapOutput `pulumi:"tagsAll"`
	Timeouts KeyTimeoutsPtrOutput   `pulumi:"timeouts"`
}

// NewKey registers a new resource with the given unique name, arguments, and options.
func NewKey(ctx *pulumi.Context,
	name string, args *KeyArgs, opts ...pulumi.ResourceOption) (*Key, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Exportable == nil {
		return nil, errors.New("invalid value for required argument 'Exportable'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Key
	err := ctx.RegisterResource("aws:paymentcryptography/key:Key", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKey gets an existing Key resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyState, opts ...pulumi.ResourceOption) (*Key, error) {
	var resource Key
	err := ctx.ReadResource("aws:paymentcryptography/key:Key", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Key resources.
type keyState struct {
	// ARN of the key.
	Arn                  *string `pulumi:"arn"`
	DeletionWindowInDays *int    `pulumi:"deletionWindowInDays"`
	// Whether to enable the key.
	Enabled *bool `pulumi:"enabled"`
	// Whether the key is exportable from the service.
	Exportable *bool `pulumi:"exportable"`
	// Role of the key, the algorithm it supports, and the cryptographic operations allowed with the key.
	//
	// The following arguments are optional:
	KeyAttributes *KeyKeyAttributes `pulumi:"keyAttributes"`
	// Key check value (KCV) is used to check if all parties holding a given key have the same key or to detect that a key has changed.
	KeyCheckValue *string `pulumi:"keyCheckValue"`
	// Algorithm that AWS Payment Cryptography uses to calculate the key check value (KCV).
	KeyCheckValueAlgorithm *string `pulumi:"keyCheckValueAlgorithm"`
	// Source of the key material.
	KeyOrigin *string `pulumi:"keyOrigin"`
	// State of key that is being created or deleted.
	KeyState *string `pulumi:"keyState"`
	// Map of tags assigned to the WorkSpaces Connection Alias. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  map[string]string `pulumi:"tagsAll"`
	Timeouts *KeyTimeouts      `pulumi:"timeouts"`
}

type KeyState struct {
	// ARN of the key.
	Arn                  pulumi.StringPtrInput
	DeletionWindowInDays pulumi.IntPtrInput
	// Whether to enable the key.
	Enabled pulumi.BoolPtrInput
	// Whether the key is exportable from the service.
	Exportable pulumi.BoolPtrInput
	// Role of the key, the algorithm it supports, and the cryptographic operations allowed with the key.
	//
	// The following arguments are optional:
	KeyAttributes KeyKeyAttributesPtrInput
	// Key check value (KCV) is used to check if all parties holding a given key have the same key or to detect that a key has changed.
	KeyCheckValue pulumi.StringPtrInput
	// Algorithm that AWS Payment Cryptography uses to calculate the key check value (KCV).
	KeyCheckValueAlgorithm pulumi.StringPtrInput
	// Source of the key material.
	KeyOrigin pulumi.StringPtrInput
	// State of key that is being created or deleted.
	KeyState pulumi.StringPtrInput
	// Map of tags assigned to the WorkSpaces Connection Alias. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapInput
	Timeouts KeyTimeoutsPtrInput
}

func (KeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyState)(nil)).Elem()
}

type keyArgs struct {
	DeletionWindowInDays *int `pulumi:"deletionWindowInDays"`
	// Whether to enable the key.
	Enabled *bool `pulumi:"enabled"`
	// Whether the key is exportable from the service.
	Exportable bool `pulumi:"exportable"`
	// Role of the key, the algorithm it supports, and the cryptographic operations allowed with the key.
	//
	// The following arguments are optional:
	KeyAttributes *KeyKeyAttributes `pulumi:"keyAttributes"`
	// Algorithm that AWS Payment Cryptography uses to calculate the key check value (KCV).
	KeyCheckValueAlgorithm *string `pulumi:"keyCheckValueAlgorithm"`
	// Map of tags assigned to the WorkSpaces Connection Alias. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     map[string]string `pulumi:"tags"`
	Timeouts *KeyTimeouts      `pulumi:"timeouts"`
}

// The set of arguments for constructing a Key resource.
type KeyArgs struct {
	DeletionWindowInDays pulumi.IntPtrInput
	// Whether to enable the key.
	Enabled pulumi.BoolPtrInput
	// Whether the key is exportable from the service.
	Exportable pulumi.BoolInput
	// Role of the key, the algorithm it supports, and the cryptographic operations allowed with the key.
	//
	// The following arguments are optional:
	KeyAttributes KeyKeyAttributesPtrInput
	// Algorithm that AWS Payment Cryptography uses to calculate the key check value (KCV).
	KeyCheckValueAlgorithm pulumi.StringPtrInput
	// Map of tags assigned to the WorkSpaces Connection Alias. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     pulumi.StringMapInput
	Timeouts KeyTimeoutsPtrInput
}

func (KeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyArgs)(nil)).Elem()
}

type KeyInput interface {
	pulumi.Input

	ToKeyOutput() KeyOutput
	ToKeyOutputWithContext(ctx context.Context) KeyOutput
}

func (*Key) ElementType() reflect.Type {
	return reflect.TypeOf((**Key)(nil)).Elem()
}

func (i *Key) ToKeyOutput() KeyOutput {
	return i.ToKeyOutputWithContext(context.Background())
}

func (i *Key) ToKeyOutputWithContext(ctx context.Context) KeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyOutput)
}

// KeyArrayInput is an input type that accepts KeyArray and KeyArrayOutput values.
// You can construct a concrete instance of `KeyArrayInput` via:
//
//	KeyArray{ KeyArgs{...} }
type KeyArrayInput interface {
	pulumi.Input

	ToKeyArrayOutput() KeyArrayOutput
	ToKeyArrayOutputWithContext(context.Context) KeyArrayOutput
}

type KeyArray []KeyInput

func (KeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Key)(nil)).Elem()
}

func (i KeyArray) ToKeyArrayOutput() KeyArrayOutput {
	return i.ToKeyArrayOutputWithContext(context.Background())
}

func (i KeyArray) ToKeyArrayOutputWithContext(ctx context.Context) KeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyArrayOutput)
}

// KeyMapInput is an input type that accepts KeyMap and KeyMapOutput values.
// You can construct a concrete instance of `KeyMapInput` via:
//
//	KeyMap{ "key": KeyArgs{...} }
type KeyMapInput interface {
	pulumi.Input

	ToKeyMapOutput() KeyMapOutput
	ToKeyMapOutputWithContext(context.Context) KeyMapOutput
}

type KeyMap map[string]KeyInput

func (KeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Key)(nil)).Elem()
}

func (i KeyMap) ToKeyMapOutput() KeyMapOutput {
	return i.ToKeyMapOutputWithContext(context.Background())
}

func (i KeyMap) ToKeyMapOutputWithContext(ctx context.Context) KeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyMapOutput)
}

type KeyOutput struct{ *pulumi.OutputState }

func (KeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Key)(nil)).Elem()
}

func (o KeyOutput) ToKeyOutput() KeyOutput {
	return o
}

func (o KeyOutput) ToKeyOutputWithContext(ctx context.Context) KeyOutput {
	return o
}

// ARN of the key.
func (o KeyOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o KeyOutput) DeletionWindowInDays() pulumi.IntOutput {
	return o.ApplyT(func(v *Key) pulumi.IntOutput { return v.DeletionWindowInDays }).(pulumi.IntOutput)
}

// Whether to enable the key.
func (o KeyOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Key) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Whether the key is exportable from the service.
func (o KeyOutput) Exportable() pulumi.BoolOutput {
	return o.ApplyT(func(v *Key) pulumi.BoolOutput { return v.Exportable }).(pulumi.BoolOutput)
}

// Role of the key, the algorithm it supports, and the cryptographic operations allowed with the key.
//
// The following arguments are optional:
func (o KeyOutput) KeyAttributes() KeyKeyAttributesPtrOutput {
	return o.ApplyT(func(v *Key) KeyKeyAttributesPtrOutput { return v.KeyAttributes }).(KeyKeyAttributesPtrOutput)
}

// Key check value (KCV) is used to check if all parties holding a given key have the same key or to detect that a key has changed.
func (o KeyOutput) KeyCheckValue() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.KeyCheckValue }).(pulumi.StringOutput)
}

// Algorithm that AWS Payment Cryptography uses to calculate the key check value (KCV).
func (o KeyOutput) KeyCheckValueAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.KeyCheckValueAlgorithm }).(pulumi.StringOutput)
}

// Source of the key material.
func (o KeyOutput) KeyOrigin() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.KeyOrigin }).(pulumi.StringOutput)
}

// State of key that is being created or deleted.
func (o KeyOutput) KeyState() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.KeyState }).(pulumi.StringOutput)
}

// Map of tags assigned to the WorkSpaces Connection Alias. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o KeyOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Key) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o KeyOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Key) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o KeyOutput) Timeouts() KeyTimeoutsPtrOutput {
	return o.ApplyT(func(v *Key) KeyTimeoutsPtrOutput { return v.Timeouts }).(KeyTimeoutsPtrOutput)
}

type KeyArrayOutput struct{ *pulumi.OutputState }

func (KeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Key)(nil)).Elem()
}

func (o KeyArrayOutput) ToKeyArrayOutput() KeyArrayOutput {
	return o
}

func (o KeyArrayOutput) ToKeyArrayOutputWithContext(ctx context.Context) KeyArrayOutput {
	return o
}

func (o KeyArrayOutput) Index(i pulumi.IntInput) KeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Key {
		return vs[0].([]*Key)[vs[1].(int)]
	}).(KeyOutput)
}

type KeyMapOutput struct{ *pulumi.OutputState }

func (KeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Key)(nil)).Elem()
}

func (o KeyMapOutput) ToKeyMapOutput() KeyMapOutput {
	return o
}

func (o KeyMapOutput) ToKeyMapOutputWithContext(ctx context.Context) KeyMapOutput {
	return o
}

func (o KeyMapOutput) MapIndex(k pulumi.StringInput) KeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Key {
		return vs[0].(map[string]*Key)[vs[1].(string)]
	}).(KeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeyInput)(nil)).Elem(), &Key{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyArrayInput)(nil)).Elem(), KeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyMapInput)(nil)).Elem(), KeyMap{})
	pulumi.RegisterOutputType(KeyOutput{})
	pulumi.RegisterOutputType(KeyArrayOutput{})
	pulumi.RegisterOutputType(KeyMapOutput{})
}
