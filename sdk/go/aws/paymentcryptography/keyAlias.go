// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package paymentcryptography

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS Payment Cryptography Control Plane Key Alias.
//
// ## Example Usage
//
// ## Import
//
// Using `pulumi import`, import Payment Cryptography Control Plane Key Alias using the `alias/4681482429376900170`. For example:
//
// ```sh
// $ pulumi import aws:paymentcryptography/keyAlias:KeyAlias example alias/4681482429376900170
// ```
type KeyAlias struct {
	pulumi.CustomResourceState

	// Name of the Key Alias.
	//
	// The following arguments are optional:
	AliasName pulumi.StringOutput `pulumi:"aliasName"`
	// ARN of the key.
	KeyArn pulumi.StringPtrOutput `pulumi:"keyArn"`
}

// NewKeyAlias registers a new resource with the given unique name, arguments, and options.
func NewKeyAlias(ctx *pulumi.Context,
	name string, args *KeyAliasArgs, opts ...pulumi.ResourceOption) (*KeyAlias, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AliasName == nil {
		return nil, errors.New("invalid value for required argument 'AliasName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KeyAlias
	err := ctx.RegisterResource("aws:paymentcryptography/keyAlias:KeyAlias", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeyAlias gets an existing KeyAlias resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeyAlias(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyAliasState, opts ...pulumi.ResourceOption) (*KeyAlias, error) {
	var resource KeyAlias
	err := ctx.ReadResource("aws:paymentcryptography/keyAlias:KeyAlias", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KeyAlias resources.
type keyAliasState struct {
	// Name of the Key Alias.
	//
	// The following arguments are optional:
	AliasName *string `pulumi:"aliasName"`
	// ARN of the key.
	KeyArn *string `pulumi:"keyArn"`
}

type KeyAliasState struct {
	// Name of the Key Alias.
	//
	// The following arguments are optional:
	AliasName pulumi.StringPtrInput
	// ARN of the key.
	KeyArn pulumi.StringPtrInput
}

func (KeyAliasState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyAliasState)(nil)).Elem()
}

type keyAliasArgs struct {
	// Name of the Key Alias.
	//
	// The following arguments are optional:
	AliasName string `pulumi:"aliasName"`
	// ARN of the key.
	KeyArn *string `pulumi:"keyArn"`
}

// The set of arguments for constructing a KeyAlias resource.
type KeyAliasArgs struct {
	// Name of the Key Alias.
	//
	// The following arguments are optional:
	AliasName pulumi.StringInput
	// ARN of the key.
	KeyArn pulumi.StringPtrInput
}

func (KeyAliasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyAliasArgs)(nil)).Elem()
}

type KeyAliasInput interface {
	pulumi.Input

	ToKeyAliasOutput() KeyAliasOutput
	ToKeyAliasOutputWithContext(ctx context.Context) KeyAliasOutput
}

func (*KeyAlias) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyAlias)(nil)).Elem()
}

func (i *KeyAlias) ToKeyAliasOutput() KeyAliasOutput {
	return i.ToKeyAliasOutputWithContext(context.Background())
}

func (i *KeyAlias) ToKeyAliasOutputWithContext(ctx context.Context) KeyAliasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyAliasOutput)
}

// KeyAliasArrayInput is an input type that accepts KeyAliasArray and KeyAliasArrayOutput values.
// You can construct a concrete instance of `KeyAliasArrayInput` via:
//
//	KeyAliasArray{ KeyAliasArgs{...} }
type KeyAliasArrayInput interface {
	pulumi.Input

	ToKeyAliasArrayOutput() KeyAliasArrayOutput
	ToKeyAliasArrayOutputWithContext(context.Context) KeyAliasArrayOutput
}

type KeyAliasArray []KeyAliasInput

func (KeyAliasArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeyAlias)(nil)).Elem()
}

func (i KeyAliasArray) ToKeyAliasArrayOutput() KeyAliasArrayOutput {
	return i.ToKeyAliasArrayOutputWithContext(context.Background())
}

func (i KeyAliasArray) ToKeyAliasArrayOutputWithContext(ctx context.Context) KeyAliasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyAliasArrayOutput)
}

// KeyAliasMapInput is an input type that accepts KeyAliasMap and KeyAliasMapOutput values.
// You can construct a concrete instance of `KeyAliasMapInput` via:
//
//	KeyAliasMap{ "key": KeyAliasArgs{...} }
type KeyAliasMapInput interface {
	pulumi.Input

	ToKeyAliasMapOutput() KeyAliasMapOutput
	ToKeyAliasMapOutputWithContext(context.Context) KeyAliasMapOutput
}

type KeyAliasMap map[string]KeyAliasInput

func (KeyAliasMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeyAlias)(nil)).Elem()
}

func (i KeyAliasMap) ToKeyAliasMapOutput() KeyAliasMapOutput {
	return i.ToKeyAliasMapOutputWithContext(context.Background())
}

func (i KeyAliasMap) ToKeyAliasMapOutputWithContext(ctx context.Context) KeyAliasMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyAliasMapOutput)
}

type KeyAliasOutput struct{ *pulumi.OutputState }

func (KeyAliasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyAlias)(nil)).Elem()
}

func (o KeyAliasOutput) ToKeyAliasOutput() KeyAliasOutput {
	return o
}

func (o KeyAliasOutput) ToKeyAliasOutputWithContext(ctx context.Context) KeyAliasOutput {
	return o
}

// Name of the Key Alias.
//
// The following arguments are optional:
func (o KeyAliasOutput) AliasName() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyAlias) pulumi.StringOutput { return v.AliasName }).(pulumi.StringOutput)
}

// ARN of the key.
func (o KeyAliasOutput) KeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyAlias) pulumi.StringPtrOutput { return v.KeyArn }).(pulumi.StringPtrOutput)
}

type KeyAliasArrayOutput struct{ *pulumi.OutputState }

func (KeyAliasArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeyAlias)(nil)).Elem()
}

func (o KeyAliasArrayOutput) ToKeyAliasArrayOutput() KeyAliasArrayOutput {
	return o
}

func (o KeyAliasArrayOutput) ToKeyAliasArrayOutputWithContext(ctx context.Context) KeyAliasArrayOutput {
	return o
}

func (o KeyAliasArrayOutput) Index(i pulumi.IntInput) KeyAliasOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KeyAlias {
		return vs[0].([]*KeyAlias)[vs[1].(int)]
	}).(KeyAliasOutput)
}

type KeyAliasMapOutput struct{ *pulumi.OutputState }

func (KeyAliasMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeyAlias)(nil)).Elem()
}

func (o KeyAliasMapOutput) ToKeyAliasMapOutput() KeyAliasMapOutput {
	return o
}

func (o KeyAliasMapOutput) ToKeyAliasMapOutputWithContext(ctx context.Context) KeyAliasMapOutput {
	return o
}

func (o KeyAliasMapOutput) MapIndex(k pulumi.StringInput) KeyAliasOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KeyAlias {
		return vs[0].(map[string]*KeyAlias)[vs[1].(string)]
	}).(KeyAliasOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeyAliasInput)(nil)).Elem(), &KeyAlias{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyAliasArrayInput)(nil)).Elem(), KeyAliasArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyAliasMapInput)(nil)).Elem(), KeyAliasMap{})
	pulumi.RegisterOutputType(KeyAliasOutput{})
	pulumi.RegisterOutputType(KeyAliasArrayOutput{})
	pulumi.RegisterOutputType(KeyAliasMapOutput{})
}
