// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package paymentcryptography

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type KeyKeyAttributes struct {
	// Key algorithm to be use during creation of an AWS Payment Cryptography key.
	KeyAlgorithm string `pulumi:"keyAlgorithm"`
	// Type of AWS Payment Cryptography key to create.
	KeyClass string `pulumi:"keyClass"`
	// List of cryptographic operations that you can perform using the key.
	KeyModesOfUse *KeyKeyAttributesKeyModesOfUse `pulumi:"keyModesOfUse"`
	// Cryptographic usage of an AWS Payment Cryptography key as defined in section A.5.2 of the TR-31 spec.
	KeyUsage string `pulumi:"keyUsage"`
}

// KeyKeyAttributesInput is an input type that accepts KeyKeyAttributesArgs and KeyKeyAttributesOutput values.
// You can construct a concrete instance of `KeyKeyAttributesInput` via:
//
//	KeyKeyAttributesArgs{...}
type KeyKeyAttributesInput interface {
	pulumi.Input

	ToKeyKeyAttributesOutput() KeyKeyAttributesOutput
	ToKeyKeyAttributesOutputWithContext(context.Context) KeyKeyAttributesOutput
}

type KeyKeyAttributesArgs struct {
	// Key algorithm to be use during creation of an AWS Payment Cryptography key.
	KeyAlgorithm pulumi.StringInput `pulumi:"keyAlgorithm"`
	// Type of AWS Payment Cryptography key to create.
	KeyClass pulumi.StringInput `pulumi:"keyClass"`
	// List of cryptographic operations that you can perform using the key.
	KeyModesOfUse KeyKeyAttributesKeyModesOfUsePtrInput `pulumi:"keyModesOfUse"`
	// Cryptographic usage of an AWS Payment Cryptography key as defined in section A.5.2 of the TR-31 spec.
	KeyUsage pulumi.StringInput `pulumi:"keyUsage"`
}

func (KeyKeyAttributesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyKeyAttributes)(nil)).Elem()
}

func (i KeyKeyAttributesArgs) ToKeyKeyAttributesOutput() KeyKeyAttributesOutput {
	return i.ToKeyKeyAttributesOutputWithContext(context.Background())
}

func (i KeyKeyAttributesArgs) ToKeyKeyAttributesOutputWithContext(ctx context.Context) KeyKeyAttributesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyKeyAttributesOutput)
}

func (i KeyKeyAttributesArgs) ToKeyKeyAttributesPtrOutput() KeyKeyAttributesPtrOutput {
	return i.ToKeyKeyAttributesPtrOutputWithContext(context.Background())
}

func (i KeyKeyAttributesArgs) ToKeyKeyAttributesPtrOutputWithContext(ctx context.Context) KeyKeyAttributesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyKeyAttributesOutput).ToKeyKeyAttributesPtrOutputWithContext(ctx)
}

// KeyKeyAttributesPtrInput is an input type that accepts KeyKeyAttributesArgs, KeyKeyAttributesPtr and KeyKeyAttributesPtrOutput values.
// You can construct a concrete instance of `KeyKeyAttributesPtrInput` via:
//
//	        KeyKeyAttributesArgs{...}
//
//	or:
//
//	        nil
type KeyKeyAttributesPtrInput interface {
	pulumi.Input

	ToKeyKeyAttributesPtrOutput() KeyKeyAttributesPtrOutput
	ToKeyKeyAttributesPtrOutputWithContext(context.Context) KeyKeyAttributesPtrOutput
}

type keyKeyAttributesPtrType KeyKeyAttributesArgs

func KeyKeyAttributesPtr(v *KeyKeyAttributesArgs) KeyKeyAttributesPtrInput {
	return (*keyKeyAttributesPtrType)(v)
}

func (*keyKeyAttributesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyKeyAttributes)(nil)).Elem()
}

func (i *keyKeyAttributesPtrType) ToKeyKeyAttributesPtrOutput() KeyKeyAttributesPtrOutput {
	return i.ToKeyKeyAttributesPtrOutputWithContext(context.Background())
}

func (i *keyKeyAttributesPtrType) ToKeyKeyAttributesPtrOutputWithContext(ctx context.Context) KeyKeyAttributesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyKeyAttributesPtrOutput)
}

type KeyKeyAttributesOutput struct{ *pulumi.OutputState }

func (KeyKeyAttributesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyKeyAttributes)(nil)).Elem()
}

func (o KeyKeyAttributesOutput) ToKeyKeyAttributesOutput() KeyKeyAttributesOutput {
	return o
}

func (o KeyKeyAttributesOutput) ToKeyKeyAttributesOutputWithContext(ctx context.Context) KeyKeyAttributesOutput {
	return o
}

func (o KeyKeyAttributesOutput) ToKeyKeyAttributesPtrOutput() KeyKeyAttributesPtrOutput {
	return o.ToKeyKeyAttributesPtrOutputWithContext(context.Background())
}

func (o KeyKeyAttributesOutput) ToKeyKeyAttributesPtrOutputWithContext(ctx context.Context) KeyKeyAttributesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KeyKeyAttributes) *KeyKeyAttributes {
		return &v
	}).(KeyKeyAttributesPtrOutput)
}

// Key algorithm to be use during creation of an AWS Payment Cryptography key.
func (o KeyKeyAttributesOutput) KeyAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v KeyKeyAttributes) string { return v.KeyAlgorithm }).(pulumi.StringOutput)
}

// Type of AWS Payment Cryptography key to create.
func (o KeyKeyAttributesOutput) KeyClass() pulumi.StringOutput {
	return o.ApplyT(func(v KeyKeyAttributes) string { return v.KeyClass }).(pulumi.StringOutput)
}

// List of cryptographic operations that you can perform using the key.
func (o KeyKeyAttributesOutput) KeyModesOfUse() KeyKeyAttributesKeyModesOfUsePtrOutput {
	return o.ApplyT(func(v KeyKeyAttributes) *KeyKeyAttributesKeyModesOfUse { return v.KeyModesOfUse }).(KeyKeyAttributesKeyModesOfUsePtrOutput)
}

// Cryptographic usage of an AWS Payment Cryptography key as defined in section A.5.2 of the TR-31 spec.
func (o KeyKeyAttributesOutput) KeyUsage() pulumi.StringOutput {
	return o.ApplyT(func(v KeyKeyAttributes) string { return v.KeyUsage }).(pulumi.StringOutput)
}

type KeyKeyAttributesPtrOutput struct{ *pulumi.OutputState }

func (KeyKeyAttributesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyKeyAttributes)(nil)).Elem()
}

func (o KeyKeyAttributesPtrOutput) ToKeyKeyAttributesPtrOutput() KeyKeyAttributesPtrOutput {
	return o
}

func (o KeyKeyAttributesPtrOutput) ToKeyKeyAttributesPtrOutputWithContext(ctx context.Context) KeyKeyAttributesPtrOutput {
	return o
}

func (o KeyKeyAttributesPtrOutput) Elem() KeyKeyAttributesOutput {
	return o.ApplyT(func(v *KeyKeyAttributes) KeyKeyAttributes {
		if v != nil {
			return *v
		}
		var ret KeyKeyAttributes
		return ret
	}).(KeyKeyAttributesOutput)
}

// Key algorithm to be use during creation of an AWS Payment Cryptography key.
func (o KeyKeyAttributesPtrOutput) KeyAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyKeyAttributes) *string {
		if v == nil {
			return nil
		}
		return &v.KeyAlgorithm
	}).(pulumi.StringPtrOutput)
}

// Type of AWS Payment Cryptography key to create.
func (o KeyKeyAttributesPtrOutput) KeyClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyKeyAttributes) *string {
		if v == nil {
			return nil
		}
		return &v.KeyClass
	}).(pulumi.StringPtrOutput)
}

// List of cryptographic operations that you can perform using the key.
func (o KeyKeyAttributesPtrOutput) KeyModesOfUse() KeyKeyAttributesKeyModesOfUsePtrOutput {
	return o.ApplyT(func(v *KeyKeyAttributes) *KeyKeyAttributesKeyModesOfUse {
		if v == nil {
			return nil
		}
		return v.KeyModesOfUse
	}).(KeyKeyAttributesKeyModesOfUsePtrOutput)
}

// Cryptographic usage of an AWS Payment Cryptography key as defined in section A.5.2 of the TR-31 spec.
func (o KeyKeyAttributesPtrOutput) KeyUsage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyKeyAttributes) *string {
		if v == nil {
			return nil
		}
		return &v.KeyUsage
	}).(pulumi.StringPtrOutput)
}

type KeyKeyAttributesKeyModesOfUse struct {
	// Whether an AWS Payment Cryptography key can be used to decrypt data.
	Decrypt *bool `pulumi:"decrypt"`
	// Whether an AWS Payment Cryptography key can be used to derive new keys.
	DeriveKey *bool `pulumi:"deriveKey"`
	// Whether an AWS Payment Cryptography key can be used to encrypt data.
	Encrypt *bool `pulumi:"encrypt"`
	// Whether an AWS Payment Cryptography key can be used to generate and verify other card and PIN verification keys.
	Generate *bool `pulumi:"generate"`
	// Whether an AWS Payment Cryptography key has no special restrictions other than the restrictions implied by KeyUsage.
	NoRestrictions *bool `pulumi:"noRestrictions"`
	// Whether an AWS Payment Cryptography key can be used for signing.
	Sign *bool `pulumi:"sign"`
	// Whether an AWS Payment Cryptography key can be used to unwrap other keys.
	Unwrap *bool `pulumi:"unwrap"`
	// Whether an AWS Payment Cryptography key can be used to verify signatures.
	Verify *bool `pulumi:"verify"`
	// Whether an AWS Payment Cryptography key can be used to wrap other keys.
	Wrap *bool `pulumi:"wrap"`
}

// KeyKeyAttributesKeyModesOfUseInput is an input type that accepts KeyKeyAttributesKeyModesOfUseArgs and KeyKeyAttributesKeyModesOfUseOutput values.
// You can construct a concrete instance of `KeyKeyAttributesKeyModesOfUseInput` via:
//
//	KeyKeyAttributesKeyModesOfUseArgs{...}
type KeyKeyAttributesKeyModesOfUseInput interface {
	pulumi.Input

	ToKeyKeyAttributesKeyModesOfUseOutput() KeyKeyAttributesKeyModesOfUseOutput
	ToKeyKeyAttributesKeyModesOfUseOutputWithContext(context.Context) KeyKeyAttributesKeyModesOfUseOutput
}

type KeyKeyAttributesKeyModesOfUseArgs struct {
	// Whether an AWS Payment Cryptography key can be used to decrypt data.
	Decrypt pulumi.BoolPtrInput `pulumi:"decrypt"`
	// Whether an AWS Payment Cryptography key can be used to derive new keys.
	DeriveKey pulumi.BoolPtrInput `pulumi:"deriveKey"`
	// Whether an AWS Payment Cryptography key can be used to encrypt data.
	Encrypt pulumi.BoolPtrInput `pulumi:"encrypt"`
	// Whether an AWS Payment Cryptography key can be used to generate and verify other card and PIN verification keys.
	Generate pulumi.BoolPtrInput `pulumi:"generate"`
	// Whether an AWS Payment Cryptography key has no special restrictions other than the restrictions implied by KeyUsage.
	NoRestrictions pulumi.BoolPtrInput `pulumi:"noRestrictions"`
	// Whether an AWS Payment Cryptography key can be used for signing.
	Sign pulumi.BoolPtrInput `pulumi:"sign"`
	// Whether an AWS Payment Cryptography key can be used to unwrap other keys.
	Unwrap pulumi.BoolPtrInput `pulumi:"unwrap"`
	// Whether an AWS Payment Cryptography key can be used to verify signatures.
	Verify pulumi.BoolPtrInput `pulumi:"verify"`
	// Whether an AWS Payment Cryptography key can be used to wrap other keys.
	Wrap pulumi.BoolPtrInput `pulumi:"wrap"`
}

func (KeyKeyAttributesKeyModesOfUseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyKeyAttributesKeyModesOfUse)(nil)).Elem()
}

func (i KeyKeyAttributesKeyModesOfUseArgs) ToKeyKeyAttributesKeyModesOfUseOutput() KeyKeyAttributesKeyModesOfUseOutput {
	return i.ToKeyKeyAttributesKeyModesOfUseOutputWithContext(context.Background())
}

func (i KeyKeyAttributesKeyModesOfUseArgs) ToKeyKeyAttributesKeyModesOfUseOutputWithContext(ctx context.Context) KeyKeyAttributesKeyModesOfUseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyKeyAttributesKeyModesOfUseOutput)
}

func (i KeyKeyAttributesKeyModesOfUseArgs) ToKeyKeyAttributesKeyModesOfUsePtrOutput() KeyKeyAttributesKeyModesOfUsePtrOutput {
	return i.ToKeyKeyAttributesKeyModesOfUsePtrOutputWithContext(context.Background())
}

func (i KeyKeyAttributesKeyModesOfUseArgs) ToKeyKeyAttributesKeyModesOfUsePtrOutputWithContext(ctx context.Context) KeyKeyAttributesKeyModesOfUsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyKeyAttributesKeyModesOfUseOutput).ToKeyKeyAttributesKeyModesOfUsePtrOutputWithContext(ctx)
}

// KeyKeyAttributesKeyModesOfUsePtrInput is an input type that accepts KeyKeyAttributesKeyModesOfUseArgs, KeyKeyAttributesKeyModesOfUsePtr and KeyKeyAttributesKeyModesOfUsePtrOutput values.
// You can construct a concrete instance of `KeyKeyAttributesKeyModesOfUsePtrInput` via:
//
//	        KeyKeyAttributesKeyModesOfUseArgs{...}
//
//	or:
//
//	        nil
type KeyKeyAttributesKeyModesOfUsePtrInput interface {
	pulumi.Input

	ToKeyKeyAttributesKeyModesOfUsePtrOutput() KeyKeyAttributesKeyModesOfUsePtrOutput
	ToKeyKeyAttributesKeyModesOfUsePtrOutputWithContext(context.Context) KeyKeyAttributesKeyModesOfUsePtrOutput
}

type keyKeyAttributesKeyModesOfUsePtrType KeyKeyAttributesKeyModesOfUseArgs

func KeyKeyAttributesKeyModesOfUsePtr(v *KeyKeyAttributesKeyModesOfUseArgs) KeyKeyAttributesKeyModesOfUsePtrInput {
	return (*keyKeyAttributesKeyModesOfUsePtrType)(v)
}

func (*keyKeyAttributesKeyModesOfUsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyKeyAttributesKeyModesOfUse)(nil)).Elem()
}

func (i *keyKeyAttributesKeyModesOfUsePtrType) ToKeyKeyAttributesKeyModesOfUsePtrOutput() KeyKeyAttributesKeyModesOfUsePtrOutput {
	return i.ToKeyKeyAttributesKeyModesOfUsePtrOutputWithContext(context.Background())
}

func (i *keyKeyAttributesKeyModesOfUsePtrType) ToKeyKeyAttributesKeyModesOfUsePtrOutputWithContext(ctx context.Context) KeyKeyAttributesKeyModesOfUsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyKeyAttributesKeyModesOfUsePtrOutput)
}

type KeyKeyAttributesKeyModesOfUseOutput struct{ *pulumi.OutputState }

func (KeyKeyAttributesKeyModesOfUseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyKeyAttributesKeyModesOfUse)(nil)).Elem()
}

func (o KeyKeyAttributesKeyModesOfUseOutput) ToKeyKeyAttributesKeyModesOfUseOutput() KeyKeyAttributesKeyModesOfUseOutput {
	return o
}

func (o KeyKeyAttributesKeyModesOfUseOutput) ToKeyKeyAttributesKeyModesOfUseOutputWithContext(ctx context.Context) KeyKeyAttributesKeyModesOfUseOutput {
	return o
}

func (o KeyKeyAttributesKeyModesOfUseOutput) ToKeyKeyAttributesKeyModesOfUsePtrOutput() KeyKeyAttributesKeyModesOfUsePtrOutput {
	return o.ToKeyKeyAttributesKeyModesOfUsePtrOutputWithContext(context.Background())
}

func (o KeyKeyAttributesKeyModesOfUseOutput) ToKeyKeyAttributesKeyModesOfUsePtrOutputWithContext(ctx context.Context) KeyKeyAttributesKeyModesOfUsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KeyKeyAttributesKeyModesOfUse) *KeyKeyAttributesKeyModesOfUse {
		return &v
	}).(KeyKeyAttributesKeyModesOfUsePtrOutput)
}

// Whether an AWS Payment Cryptography key can be used to decrypt data.
func (o KeyKeyAttributesKeyModesOfUseOutput) Decrypt() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeyKeyAttributesKeyModesOfUse) *bool { return v.Decrypt }).(pulumi.BoolPtrOutput)
}

// Whether an AWS Payment Cryptography key can be used to derive new keys.
func (o KeyKeyAttributesKeyModesOfUseOutput) DeriveKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeyKeyAttributesKeyModesOfUse) *bool { return v.DeriveKey }).(pulumi.BoolPtrOutput)
}

// Whether an AWS Payment Cryptography key can be used to encrypt data.
func (o KeyKeyAttributesKeyModesOfUseOutput) Encrypt() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeyKeyAttributesKeyModesOfUse) *bool { return v.Encrypt }).(pulumi.BoolPtrOutput)
}

// Whether an AWS Payment Cryptography key can be used to generate and verify other card and PIN verification keys.
func (o KeyKeyAttributesKeyModesOfUseOutput) Generate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeyKeyAttributesKeyModesOfUse) *bool { return v.Generate }).(pulumi.BoolPtrOutput)
}

// Whether an AWS Payment Cryptography key has no special restrictions other than the restrictions implied by KeyUsage.
func (o KeyKeyAttributesKeyModesOfUseOutput) NoRestrictions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeyKeyAttributesKeyModesOfUse) *bool { return v.NoRestrictions }).(pulumi.BoolPtrOutput)
}

// Whether an AWS Payment Cryptography key can be used for signing.
func (o KeyKeyAttributesKeyModesOfUseOutput) Sign() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeyKeyAttributesKeyModesOfUse) *bool { return v.Sign }).(pulumi.BoolPtrOutput)
}

// Whether an AWS Payment Cryptography key can be used to unwrap other keys.
func (o KeyKeyAttributesKeyModesOfUseOutput) Unwrap() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeyKeyAttributesKeyModesOfUse) *bool { return v.Unwrap }).(pulumi.BoolPtrOutput)
}

// Whether an AWS Payment Cryptography key can be used to verify signatures.
func (o KeyKeyAttributesKeyModesOfUseOutput) Verify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeyKeyAttributesKeyModesOfUse) *bool { return v.Verify }).(pulumi.BoolPtrOutput)
}

// Whether an AWS Payment Cryptography key can be used to wrap other keys.
func (o KeyKeyAttributesKeyModesOfUseOutput) Wrap() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeyKeyAttributesKeyModesOfUse) *bool { return v.Wrap }).(pulumi.BoolPtrOutput)
}

type KeyKeyAttributesKeyModesOfUsePtrOutput struct{ *pulumi.OutputState }

func (KeyKeyAttributesKeyModesOfUsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyKeyAttributesKeyModesOfUse)(nil)).Elem()
}

func (o KeyKeyAttributesKeyModesOfUsePtrOutput) ToKeyKeyAttributesKeyModesOfUsePtrOutput() KeyKeyAttributesKeyModesOfUsePtrOutput {
	return o
}

func (o KeyKeyAttributesKeyModesOfUsePtrOutput) ToKeyKeyAttributesKeyModesOfUsePtrOutputWithContext(ctx context.Context) KeyKeyAttributesKeyModesOfUsePtrOutput {
	return o
}

func (o KeyKeyAttributesKeyModesOfUsePtrOutput) Elem() KeyKeyAttributesKeyModesOfUseOutput {
	return o.ApplyT(func(v *KeyKeyAttributesKeyModesOfUse) KeyKeyAttributesKeyModesOfUse {
		if v != nil {
			return *v
		}
		var ret KeyKeyAttributesKeyModesOfUse
		return ret
	}).(KeyKeyAttributesKeyModesOfUseOutput)
}

// Whether an AWS Payment Cryptography key can be used to decrypt data.
func (o KeyKeyAttributesKeyModesOfUsePtrOutput) Decrypt() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyKeyAttributesKeyModesOfUse) *bool {
		if v == nil {
			return nil
		}
		return v.Decrypt
	}).(pulumi.BoolPtrOutput)
}

// Whether an AWS Payment Cryptography key can be used to derive new keys.
func (o KeyKeyAttributesKeyModesOfUsePtrOutput) DeriveKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyKeyAttributesKeyModesOfUse) *bool {
		if v == nil {
			return nil
		}
		return v.DeriveKey
	}).(pulumi.BoolPtrOutput)
}

// Whether an AWS Payment Cryptography key can be used to encrypt data.
func (o KeyKeyAttributesKeyModesOfUsePtrOutput) Encrypt() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyKeyAttributesKeyModesOfUse) *bool {
		if v == nil {
			return nil
		}
		return v.Encrypt
	}).(pulumi.BoolPtrOutput)
}

// Whether an AWS Payment Cryptography key can be used to generate and verify other card and PIN verification keys.
func (o KeyKeyAttributesKeyModesOfUsePtrOutput) Generate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyKeyAttributesKeyModesOfUse) *bool {
		if v == nil {
			return nil
		}
		return v.Generate
	}).(pulumi.BoolPtrOutput)
}

// Whether an AWS Payment Cryptography key has no special restrictions other than the restrictions implied by KeyUsage.
func (o KeyKeyAttributesKeyModesOfUsePtrOutput) NoRestrictions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyKeyAttributesKeyModesOfUse) *bool {
		if v == nil {
			return nil
		}
		return v.NoRestrictions
	}).(pulumi.BoolPtrOutput)
}

// Whether an AWS Payment Cryptography key can be used for signing.
func (o KeyKeyAttributesKeyModesOfUsePtrOutput) Sign() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyKeyAttributesKeyModesOfUse) *bool {
		if v == nil {
			return nil
		}
		return v.Sign
	}).(pulumi.BoolPtrOutput)
}

// Whether an AWS Payment Cryptography key can be used to unwrap other keys.
func (o KeyKeyAttributesKeyModesOfUsePtrOutput) Unwrap() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyKeyAttributesKeyModesOfUse) *bool {
		if v == nil {
			return nil
		}
		return v.Unwrap
	}).(pulumi.BoolPtrOutput)
}

// Whether an AWS Payment Cryptography key can be used to verify signatures.
func (o KeyKeyAttributesKeyModesOfUsePtrOutput) Verify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyKeyAttributesKeyModesOfUse) *bool {
		if v == nil {
			return nil
		}
		return v.Verify
	}).(pulumi.BoolPtrOutput)
}

// Whether an AWS Payment Cryptography key can be used to wrap other keys.
func (o KeyKeyAttributesKeyModesOfUsePtrOutput) Wrap() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyKeyAttributesKeyModesOfUse) *bool {
		if v == nil {
			return nil
		}
		return v.Wrap
	}).(pulumi.BoolPtrOutput)
}

type KeyTimeouts struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create *string `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete *string `pulumi:"delete"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Update *string `pulumi:"update"`
}

// KeyTimeoutsInput is an input type that accepts KeyTimeoutsArgs and KeyTimeoutsOutput values.
// You can construct a concrete instance of `KeyTimeoutsInput` via:
//
//	KeyTimeoutsArgs{...}
type KeyTimeoutsInput interface {
	pulumi.Input

	ToKeyTimeoutsOutput() KeyTimeoutsOutput
	ToKeyTimeoutsOutputWithContext(context.Context) KeyTimeoutsOutput
}

type KeyTimeoutsArgs struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create pulumi.StringPtrInput `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete pulumi.StringPtrInput `pulumi:"delete"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Update pulumi.StringPtrInput `pulumi:"update"`
}

func (KeyTimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyTimeouts)(nil)).Elem()
}

func (i KeyTimeoutsArgs) ToKeyTimeoutsOutput() KeyTimeoutsOutput {
	return i.ToKeyTimeoutsOutputWithContext(context.Background())
}

func (i KeyTimeoutsArgs) ToKeyTimeoutsOutputWithContext(ctx context.Context) KeyTimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyTimeoutsOutput)
}

func (i KeyTimeoutsArgs) ToKeyTimeoutsPtrOutput() KeyTimeoutsPtrOutput {
	return i.ToKeyTimeoutsPtrOutputWithContext(context.Background())
}

func (i KeyTimeoutsArgs) ToKeyTimeoutsPtrOutputWithContext(ctx context.Context) KeyTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyTimeoutsOutput).ToKeyTimeoutsPtrOutputWithContext(ctx)
}

// KeyTimeoutsPtrInput is an input type that accepts KeyTimeoutsArgs, KeyTimeoutsPtr and KeyTimeoutsPtrOutput values.
// You can construct a concrete instance of `KeyTimeoutsPtrInput` via:
//
//	        KeyTimeoutsArgs{...}
//
//	or:
//
//	        nil
type KeyTimeoutsPtrInput interface {
	pulumi.Input

	ToKeyTimeoutsPtrOutput() KeyTimeoutsPtrOutput
	ToKeyTimeoutsPtrOutputWithContext(context.Context) KeyTimeoutsPtrOutput
}

type keyTimeoutsPtrType KeyTimeoutsArgs

func KeyTimeoutsPtr(v *KeyTimeoutsArgs) KeyTimeoutsPtrInput {
	return (*keyTimeoutsPtrType)(v)
}

func (*keyTimeoutsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyTimeouts)(nil)).Elem()
}

func (i *keyTimeoutsPtrType) ToKeyTimeoutsPtrOutput() KeyTimeoutsPtrOutput {
	return i.ToKeyTimeoutsPtrOutputWithContext(context.Background())
}

func (i *keyTimeoutsPtrType) ToKeyTimeoutsPtrOutputWithContext(ctx context.Context) KeyTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyTimeoutsPtrOutput)
}

type KeyTimeoutsOutput struct{ *pulumi.OutputState }

func (KeyTimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyTimeouts)(nil)).Elem()
}

func (o KeyTimeoutsOutput) ToKeyTimeoutsOutput() KeyTimeoutsOutput {
	return o
}

func (o KeyTimeoutsOutput) ToKeyTimeoutsOutputWithContext(ctx context.Context) KeyTimeoutsOutput {
	return o
}

func (o KeyTimeoutsOutput) ToKeyTimeoutsPtrOutput() KeyTimeoutsPtrOutput {
	return o.ToKeyTimeoutsPtrOutputWithContext(context.Background())
}

func (o KeyTimeoutsOutput) ToKeyTimeoutsPtrOutputWithContext(ctx context.Context) KeyTimeoutsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KeyTimeouts) *KeyTimeouts {
		return &v
	}).(KeyTimeoutsPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o KeyTimeoutsOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyTimeouts) *string { return v.Create }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o KeyTimeoutsOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyTimeouts) *string { return v.Delete }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o KeyTimeoutsOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyTimeouts) *string { return v.Update }).(pulumi.StringPtrOutput)
}

type KeyTimeoutsPtrOutput struct{ *pulumi.OutputState }

func (KeyTimeoutsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyTimeouts)(nil)).Elem()
}

func (o KeyTimeoutsPtrOutput) ToKeyTimeoutsPtrOutput() KeyTimeoutsPtrOutput {
	return o
}

func (o KeyTimeoutsPtrOutput) ToKeyTimeoutsPtrOutputWithContext(ctx context.Context) KeyTimeoutsPtrOutput {
	return o
}

func (o KeyTimeoutsPtrOutput) Elem() KeyTimeoutsOutput {
	return o.ApplyT(func(v *KeyTimeouts) KeyTimeouts {
		if v != nil {
			return *v
		}
		var ret KeyTimeouts
		return ret
	}).(KeyTimeoutsOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o KeyTimeoutsPtrOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Create
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o KeyTimeoutsPtrOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Delete
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o KeyTimeoutsPtrOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Update
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeyKeyAttributesInput)(nil)).Elem(), KeyKeyAttributesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyKeyAttributesPtrInput)(nil)).Elem(), KeyKeyAttributesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyKeyAttributesKeyModesOfUseInput)(nil)).Elem(), KeyKeyAttributesKeyModesOfUseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyKeyAttributesKeyModesOfUsePtrInput)(nil)).Elem(), KeyKeyAttributesKeyModesOfUseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyTimeoutsInput)(nil)).Elem(), KeyTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyTimeoutsPtrInput)(nil)).Elem(), KeyTimeoutsArgs{})
	pulumi.RegisterOutputType(KeyKeyAttributesOutput{})
	pulumi.RegisterOutputType(KeyKeyAttributesPtrOutput{})
	pulumi.RegisterOutputType(KeyKeyAttributesKeyModesOfUseOutput{})
	pulumi.RegisterOutputType(KeyKeyAttributesKeyModesOfUsePtrOutput{})
	pulumi.RegisterOutputType(KeyTimeoutsOutput{})
	pulumi.RegisterOutputType(KeyTimeoutsPtrOutput{})
}
