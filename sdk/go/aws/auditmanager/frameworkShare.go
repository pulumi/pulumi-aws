// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auditmanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS Audit Manager Framework Share.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/auditmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := auditmanager.NewFrameworkShare(ctx, "example", &auditmanager.FrameworkShareArgs{
//				DestinationAccount: pulumi.String("012345678901"),
//				DestinationRegion:  pulumi.String("us-east-1"),
//				FrameworkId:        pulumi.Any(aws_auditmanager_framework.Example.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Audit Manager Framework Share using the `id`. For example:
//
// ```sh
//
//	$ pulumi import aws:auditmanager/frameworkShare:FrameworkShare example abcdef-123456
//
// ```
type FrameworkShare struct {
	pulumi.CustomResourceState

	// Comment from the sender about the share request.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Amazon Web Services account of the recipient.
	DestinationAccount pulumi.StringOutput `pulumi:"destinationAccount"`
	// Amazon Web Services region of the recipient.
	DestinationRegion pulumi.StringOutput `pulumi:"destinationRegion"`
	// Unique identifier for the shared custom framework.
	//
	// The following arguments are optional:
	FrameworkId pulumi.StringOutput `pulumi:"frameworkId"`
	// Status of the share request.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewFrameworkShare registers a new resource with the given unique name, arguments, and options.
func NewFrameworkShare(ctx *pulumi.Context,
	name string, args *FrameworkShareArgs, opts ...pulumi.ResourceOption) (*FrameworkShare, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationAccount == nil {
		return nil, errors.New("invalid value for required argument 'DestinationAccount'")
	}
	if args.DestinationRegion == nil {
		return nil, errors.New("invalid value for required argument 'DestinationRegion'")
	}
	if args.FrameworkId == nil {
		return nil, errors.New("invalid value for required argument 'FrameworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FrameworkShare
	err := ctx.RegisterResource("aws:auditmanager/frameworkShare:FrameworkShare", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFrameworkShare gets an existing FrameworkShare resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFrameworkShare(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FrameworkShareState, opts ...pulumi.ResourceOption) (*FrameworkShare, error) {
	var resource FrameworkShare
	err := ctx.ReadResource("aws:auditmanager/frameworkShare:FrameworkShare", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FrameworkShare resources.
type frameworkShareState struct {
	// Comment from the sender about the share request.
	Comment *string `pulumi:"comment"`
	// Amazon Web Services account of the recipient.
	DestinationAccount *string `pulumi:"destinationAccount"`
	// Amazon Web Services region of the recipient.
	DestinationRegion *string `pulumi:"destinationRegion"`
	// Unique identifier for the shared custom framework.
	//
	// The following arguments are optional:
	FrameworkId *string `pulumi:"frameworkId"`
	// Status of the share request.
	Status *string `pulumi:"status"`
}

type FrameworkShareState struct {
	// Comment from the sender about the share request.
	Comment pulumi.StringPtrInput
	// Amazon Web Services account of the recipient.
	DestinationAccount pulumi.StringPtrInput
	// Amazon Web Services region of the recipient.
	DestinationRegion pulumi.StringPtrInput
	// Unique identifier for the shared custom framework.
	//
	// The following arguments are optional:
	FrameworkId pulumi.StringPtrInput
	// Status of the share request.
	Status pulumi.StringPtrInput
}

func (FrameworkShareState) ElementType() reflect.Type {
	return reflect.TypeOf((*frameworkShareState)(nil)).Elem()
}

type frameworkShareArgs struct {
	// Comment from the sender about the share request.
	Comment *string `pulumi:"comment"`
	// Amazon Web Services account of the recipient.
	DestinationAccount string `pulumi:"destinationAccount"`
	// Amazon Web Services region of the recipient.
	DestinationRegion string `pulumi:"destinationRegion"`
	// Unique identifier for the shared custom framework.
	//
	// The following arguments are optional:
	FrameworkId string `pulumi:"frameworkId"`
}

// The set of arguments for constructing a FrameworkShare resource.
type FrameworkShareArgs struct {
	// Comment from the sender about the share request.
	Comment pulumi.StringPtrInput
	// Amazon Web Services account of the recipient.
	DestinationAccount pulumi.StringInput
	// Amazon Web Services region of the recipient.
	DestinationRegion pulumi.StringInput
	// Unique identifier for the shared custom framework.
	//
	// The following arguments are optional:
	FrameworkId pulumi.StringInput
}

func (FrameworkShareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*frameworkShareArgs)(nil)).Elem()
}

type FrameworkShareInput interface {
	pulumi.Input

	ToFrameworkShareOutput() FrameworkShareOutput
	ToFrameworkShareOutputWithContext(ctx context.Context) FrameworkShareOutput
}

func (*FrameworkShare) ElementType() reflect.Type {
	return reflect.TypeOf((**FrameworkShare)(nil)).Elem()
}

func (i *FrameworkShare) ToFrameworkShareOutput() FrameworkShareOutput {
	return i.ToFrameworkShareOutputWithContext(context.Background())
}

func (i *FrameworkShare) ToFrameworkShareOutputWithContext(ctx context.Context) FrameworkShareOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrameworkShareOutput)
}

func (i *FrameworkShare) ToOutput(ctx context.Context) pulumix.Output[*FrameworkShare] {
	return pulumix.Output[*FrameworkShare]{
		OutputState: i.ToFrameworkShareOutputWithContext(ctx).OutputState,
	}
}

// FrameworkShareArrayInput is an input type that accepts FrameworkShareArray and FrameworkShareArrayOutput values.
// You can construct a concrete instance of `FrameworkShareArrayInput` via:
//
//	FrameworkShareArray{ FrameworkShareArgs{...} }
type FrameworkShareArrayInput interface {
	pulumi.Input

	ToFrameworkShareArrayOutput() FrameworkShareArrayOutput
	ToFrameworkShareArrayOutputWithContext(context.Context) FrameworkShareArrayOutput
}

type FrameworkShareArray []FrameworkShareInput

func (FrameworkShareArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FrameworkShare)(nil)).Elem()
}

func (i FrameworkShareArray) ToFrameworkShareArrayOutput() FrameworkShareArrayOutput {
	return i.ToFrameworkShareArrayOutputWithContext(context.Background())
}

func (i FrameworkShareArray) ToFrameworkShareArrayOutputWithContext(ctx context.Context) FrameworkShareArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrameworkShareArrayOutput)
}

func (i FrameworkShareArray) ToOutput(ctx context.Context) pulumix.Output[[]*FrameworkShare] {
	return pulumix.Output[[]*FrameworkShare]{
		OutputState: i.ToFrameworkShareArrayOutputWithContext(ctx).OutputState,
	}
}

// FrameworkShareMapInput is an input type that accepts FrameworkShareMap and FrameworkShareMapOutput values.
// You can construct a concrete instance of `FrameworkShareMapInput` via:
//
//	FrameworkShareMap{ "key": FrameworkShareArgs{...} }
type FrameworkShareMapInput interface {
	pulumi.Input

	ToFrameworkShareMapOutput() FrameworkShareMapOutput
	ToFrameworkShareMapOutputWithContext(context.Context) FrameworkShareMapOutput
}

type FrameworkShareMap map[string]FrameworkShareInput

func (FrameworkShareMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FrameworkShare)(nil)).Elem()
}

func (i FrameworkShareMap) ToFrameworkShareMapOutput() FrameworkShareMapOutput {
	return i.ToFrameworkShareMapOutputWithContext(context.Background())
}

func (i FrameworkShareMap) ToFrameworkShareMapOutputWithContext(ctx context.Context) FrameworkShareMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrameworkShareMapOutput)
}

func (i FrameworkShareMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*FrameworkShare] {
	return pulumix.Output[map[string]*FrameworkShare]{
		OutputState: i.ToFrameworkShareMapOutputWithContext(ctx).OutputState,
	}
}

type FrameworkShareOutput struct{ *pulumi.OutputState }

func (FrameworkShareOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FrameworkShare)(nil)).Elem()
}

func (o FrameworkShareOutput) ToFrameworkShareOutput() FrameworkShareOutput {
	return o
}

func (o FrameworkShareOutput) ToFrameworkShareOutputWithContext(ctx context.Context) FrameworkShareOutput {
	return o
}

func (o FrameworkShareOutput) ToOutput(ctx context.Context) pulumix.Output[*FrameworkShare] {
	return pulumix.Output[*FrameworkShare]{
		OutputState: o.OutputState,
	}
}

// Comment from the sender about the share request.
func (o FrameworkShareOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FrameworkShare) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Amazon Web Services account of the recipient.
func (o FrameworkShareOutput) DestinationAccount() pulumi.StringOutput {
	return o.ApplyT(func(v *FrameworkShare) pulumi.StringOutput { return v.DestinationAccount }).(pulumi.StringOutput)
}

// Amazon Web Services region of the recipient.
func (o FrameworkShareOutput) DestinationRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *FrameworkShare) pulumi.StringOutput { return v.DestinationRegion }).(pulumi.StringOutput)
}

// Unique identifier for the shared custom framework.
//
// The following arguments are optional:
func (o FrameworkShareOutput) FrameworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *FrameworkShare) pulumi.StringOutput { return v.FrameworkId }).(pulumi.StringOutput)
}

// Status of the share request.
func (o FrameworkShareOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *FrameworkShare) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type FrameworkShareArrayOutput struct{ *pulumi.OutputState }

func (FrameworkShareArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FrameworkShare)(nil)).Elem()
}

func (o FrameworkShareArrayOutput) ToFrameworkShareArrayOutput() FrameworkShareArrayOutput {
	return o
}

func (o FrameworkShareArrayOutput) ToFrameworkShareArrayOutputWithContext(ctx context.Context) FrameworkShareArrayOutput {
	return o
}

func (o FrameworkShareArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*FrameworkShare] {
	return pulumix.Output[[]*FrameworkShare]{
		OutputState: o.OutputState,
	}
}

func (o FrameworkShareArrayOutput) Index(i pulumi.IntInput) FrameworkShareOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FrameworkShare {
		return vs[0].([]*FrameworkShare)[vs[1].(int)]
	}).(FrameworkShareOutput)
}

type FrameworkShareMapOutput struct{ *pulumi.OutputState }

func (FrameworkShareMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FrameworkShare)(nil)).Elem()
}

func (o FrameworkShareMapOutput) ToFrameworkShareMapOutput() FrameworkShareMapOutput {
	return o
}

func (o FrameworkShareMapOutput) ToFrameworkShareMapOutputWithContext(ctx context.Context) FrameworkShareMapOutput {
	return o
}

func (o FrameworkShareMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*FrameworkShare] {
	return pulumix.Output[map[string]*FrameworkShare]{
		OutputState: o.OutputState,
	}
}

func (o FrameworkShareMapOutput) MapIndex(k pulumi.StringInput) FrameworkShareOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FrameworkShare {
		return vs[0].(map[string]*FrameworkShare)[vs[1].(string)]
	}).(FrameworkShareOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FrameworkShareInput)(nil)).Elem(), &FrameworkShare{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrameworkShareArrayInput)(nil)).Elem(), FrameworkShareArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrameworkShareMapInput)(nil)).Elem(), FrameworkShareMap{})
	pulumi.RegisterOutputType(FrameworkShareOutput{})
	pulumi.RegisterOutputType(FrameworkShareArrayOutput{})
	pulumi.RegisterOutputType(FrameworkShareMapOutput{})
}
