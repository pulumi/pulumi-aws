// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auditmanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type AssessmentAssessmentReportsDestination struct {
	// Destination of the assessment report. This value be in the form `s3://{bucket_name}`.
	Destination string `pulumi:"destination"`
	// Destination type. Currently, `S3` is the only valid value.
	DestinationType string `pulumi:"destinationType"`
}

// AssessmentAssessmentReportsDestinationInput is an input type that accepts AssessmentAssessmentReportsDestinationArgs and AssessmentAssessmentReportsDestinationOutput values.
// You can construct a concrete instance of `AssessmentAssessmentReportsDestinationInput` via:
//
//	AssessmentAssessmentReportsDestinationArgs{...}
type AssessmentAssessmentReportsDestinationInput interface {
	pulumi.Input

	ToAssessmentAssessmentReportsDestinationOutput() AssessmentAssessmentReportsDestinationOutput
	ToAssessmentAssessmentReportsDestinationOutputWithContext(context.Context) AssessmentAssessmentReportsDestinationOutput
}

type AssessmentAssessmentReportsDestinationArgs struct {
	// Destination of the assessment report. This value be in the form `s3://{bucket_name}`.
	Destination pulumi.StringInput `pulumi:"destination"`
	// Destination type. Currently, `S3` is the only valid value.
	DestinationType pulumi.StringInput `pulumi:"destinationType"`
}

func (AssessmentAssessmentReportsDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentAssessmentReportsDestination)(nil)).Elem()
}

func (i AssessmentAssessmentReportsDestinationArgs) ToAssessmentAssessmentReportsDestinationOutput() AssessmentAssessmentReportsDestinationOutput {
	return i.ToAssessmentAssessmentReportsDestinationOutputWithContext(context.Background())
}

func (i AssessmentAssessmentReportsDestinationArgs) ToAssessmentAssessmentReportsDestinationOutputWithContext(ctx context.Context) AssessmentAssessmentReportsDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentAssessmentReportsDestinationOutput)
}

func (i AssessmentAssessmentReportsDestinationArgs) ToOutput(ctx context.Context) pulumix.Output[AssessmentAssessmentReportsDestination] {
	return pulumix.Output[AssessmentAssessmentReportsDestination]{
		OutputState: i.ToAssessmentAssessmentReportsDestinationOutputWithContext(ctx).OutputState,
	}
}

func (i AssessmentAssessmentReportsDestinationArgs) ToAssessmentAssessmentReportsDestinationPtrOutput() AssessmentAssessmentReportsDestinationPtrOutput {
	return i.ToAssessmentAssessmentReportsDestinationPtrOutputWithContext(context.Background())
}

func (i AssessmentAssessmentReportsDestinationArgs) ToAssessmentAssessmentReportsDestinationPtrOutputWithContext(ctx context.Context) AssessmentAssessmentReportsDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentAssessmentReportsDestinationOutput).ToAssessmentAssessmentReportsDestinationPtrOutputWithContext(ctx)
}

// AssessmentAssessmentReportsDestinationPtrInput is an input type that accepts AssessmentAssessmentReportsDestinationArgs, AssessmentAssessmentReportsDestinationPtr and AssessmentAssessmentReportsDestinationPtrOutput values.
// You can construct a concrete instance of `AssessmentAssessmentReportsDestinationPtrInput` via:
//
//	        AssessmentAssessmentReportsDestinationArgs{...}
//
//	or:
//
//	        nil
type AssessmentAssessmentReportsDestinationPtrInput interface {
	pulumi.Input

	ToAssessmentAssessmentReportsDestinationPtrOutput() AssessmentAssessmentReportsDestinationPtrOutput
	ToAssessmentAssessmentReportsDestinationPtrOutputWithContext(context.Context) AssessmentAssessmentReportsDestinationPtrOutput
}

type assessmentAssessmentReportsDestinationPtrType AssessmentAssessmentReportsDestinationArgs

func AssessmentAssessmentReportsDestinationPtr(v *AssessmentAssessmentReportsDestinationArgs) AssessmentAssessmentReportsDestinationPtrInput {
	return (*assessmentAssessmentReportsDestinationPtrType)(v)
}

func (*assessmentAssessmentReportsDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AssessmentAssessmentReportsDestination)(nil)).Elem()
}

func (i *assessmentAssessmentReportsDestinationPtrType) ToAssessmentAssessmentReportsDestinationPtrOutput() AssessmentAssessmentReportsDestinationPtrOutput {
	return i.ToAssessmentAssessmentReportsDestinationPtrOutputWithContext(context.Background())
}

func (i *assessmentAssessmentReportsDestinationPtrType) ToAssessmentAssessmentReportsDestinationPtrOutputWithContext(ctx context.Context) AssessmentAssessmentReportsDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentAssessmentReportsDestinationPtrOutput)
}

func (i *assessmentAssessmentReportsDestinationPtrType) ToOutput(ctx context.Context) pulumix.Output[*AssessmentAssessmentReportsDestination] {
	return pulumix.Output[*AssessmentAssessmentReportsDestination]{
		OutputState: i.ToAssessmentAssessmentReportsDestinationPtrOutputWithContext(ctx).OutputState,
	}
}

type AssessmentAssessmentReportsDestinationOutput struct{ *pulumi.OutputState }

func (AssessmentAssessmentReportsDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentAssessmentReportsDestination)(nil)).Elem()
}

func (o AssessmentAssessmentReportsDestinationOutput) ToAssessmentAssessmentReportsDestinationOutput() AssessmentAssessmentReportsDestinationOutput {
	return o
}

func (o AssessmentAssessmentReportsDestinationOutput) ToAssessmentAssessmentReportsDestinationOutputWithContext(ctx context.Context) AssessmentAssessmentReportsDestinationOutput {
	return o
}

func (o AssessmentAssessmentReportsDestinationOutput) ToAssessmentAssessmentReportsDestinationPtrOutput() AssessmentAssessmentReportsDestinationPtrOutput {
	return o.ToAssessmentAssessmentReportsDestinationPtrOutputWithContext(context.Background())
}

func (o AssessmentAssessmentReportsDestinationOutput) ToAssessmentAssessmentReportsDestinationPtrOutputWithContext(ctx context.Context) AssessmentAssessmentReportsDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AssessmentAssessmentReportsDestination) *AssessmentAssessmentReportsDestination {
		return &v
	}).(AssessmentAssessmentReportsDestinationPtrOutput)
}

func (o AssessmentAssessmentReportsDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[AssessmentAssessmentReportsDestination] {
	return pulumix.Output[AssessmentAssessmentReportsDestination]{
		OutputState: o.OutputState,
	}
}

// Destination of the assessment report. This value be in the form `s3://{bucket_name}`.
func (o AssessmentAssessmentReportsDestinationOutput) Destination() pulumi.StringOutput {
	return o.ApplyT(func(v AssessmentAssessmentReportsDestination) string { return v.Destination }).(pulumi.StringOutput)
}

// Destination type. Currently, `S3` is the only valid value.
func (o AssessmentAssessmentReportsDestinationOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v AssessmentAssessmentReportsDestination) string { return v.DestinationType }).(pulumi.StringOutput)
}

type AssessmentAssessmentReportsDestinationPtrOutput struct{ *pulumi.OutputState }

func (AssessmentAssessmentReportsDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssessmentAssessmentReportsDestination)(nil)).Elem()
}

func (o AssessmentAssessmentReportsDestinationPtrOutput) ToAssessmentAssessmentReportsDestinationPtrOutput() AssessmentAssessmentReportsDestinationPtrOutput {
	return o
}

func (o AssessmentAssessmentReportsDestinationPtrOutput) ToAssessmentAssessmentReportsDestinationPtrOutputWithContext(ctx context.Context) AssessmentAssessmentReportsDestinationPtrOutput {
	return o
}

func (o AssessmentAssessmentReportsDestinationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AssessmentAssessmentReportsDestination] {
	return pulumix.Output[*AssessmentAssessmentReportsDestination]{
		OutputState: o.OutputState,
	}
}

func (o AssessmentAssessmentReportsDestinationPtrOutput) Elem() AssessmentAssessmentReportsDestinationOutput {
	return o.ApplyT(func(v *AssessmentAssessmentReportsDestination) AssessmentAssessmentReportsDestination {
		if v != nil {
			return *v
		}
		var ret AssessmentAssessmentReportsDestination
		return ret
	}).(AssessmentAssessmentReportsDestinationOutput)
}

// Destination of the assessment report. This value be in the form `s3://{bucket_name}`.
func (o AssessmentAssessmentReportsDestinationPtrOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssessmentAssessmentReportsDestination) *string {
		if v == nil {
			return nil
		}
		return &v.Destination
	}).(pulumi.StringPtrOutput)
}

// Destination type. Currently, `S3` is the only valid value.
func (o AssessmentAssessmentReportsDestinationPtrOutput) DestinationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssessmentAssessmentReportsDestination) *string {
		if v == nil {
			return nil
		}
		return &v.DestinationType
	}).(pulumi.StringPtrOutput)
}

type AssessmentRole struct {
	// Amazon Resource Name (ARN) of the IAM role.
	RoleArn string `pulumi:"roleArn"`
	// Type of customer persona. For assessment creation, type must always be `PROCESS_OWNER`.
	RoleType string `pulumi:"roleType"`
}

// AssessmentRoleInput is an input type that accepts AssessmentRoleArgs and AssessmentRoleOutput values.
// You can construct a concrete instance of `AssessmentRoleInput` via:
//
//	AssessmentRoleArgs{...}
type AssessmentRoleInput interface {
	pulumi.Input

	ToAssessmentRoleOutput() AssessmentRoleOutput
	ToAssessmentRoleOutputWithContext(context.Context) AssessmentRoleOutput
}

type AssessmentRoleArgs struct {
	// Amazon Resource Name (ARN) of the IAM role.
	RoleArn pulumi.StringInput `pulumi:"roleArn"`
	// Type of customer persona. For assessment creation, type must always be `PROCESS_OWNER`.
	RoleType pulumi.StringInput `pulumi:"roleType"`
}

func (AssessmentRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentRole)(nil)).Elem()
}

func (i AssessmentRoleArgs) ToAssessmentRoleOutput() AssessmentRoleOutput {
	return i.ToAssessmentRoleOutputWithContext(context.Background())
}

func (i AssessmentRoleArgs) ToAssessmentRoleOutputWithContext(ctx context.Context) AssessmentRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentRoleOutput)
}

func (i AssessmentRoleArgs) ToOutput(ctx context.Context) pulumix.Output[AssessmentRole] {
	return pulumix.Output[AssessmentRole]{
		OutputState: i.ToAssessmentRoleOutputWithContext(ctx).OutputState,
	}
}

// AssessmentRoleArrayInput is an input type that accepts AssessmentRoleArray and AssessmentRoleArrayOutput values.
// You can construct a concrete instance of `AssessmentRoleArrayInput` via:
//
//	AssessmentRoleArray{ AssessmentRoleArgs{...} }
type AssessmentRoleArrayInput interface {
	pulumi.Input

	ToAssessmentRoleArrayOutput() AssessmentRoleArrayOutput
	ToAssessmentRoleArrayOutputWithContext(context.Context) AssessmentRoleArrayOutput
}

type AssessmentRoleArray []AssessmentRoleInput

func (AssessmentRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssessmentRole)(nil)).Elem()
}

func (i AssessmentRoleArray) ToAssessmentRoleArrayOutput() AssessmentRoleArrayOutput {
	return i.ToAssessmentRoleArrayOutputWithContext(context.Background())
}

func (i AssessmentRoleArray) ToAssessmentRoleArrayOutputWithContext(ctx context.Context) AssessmentRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentRoleArrayOutput)
}

func (i AssessmentRoleArray) ToOutput(ctx context.Context) pulumix.Output[[]AssessmentRole] {
	return pulumix.Output[[]AssessmentRole]{
		OutputState: i.ToAssessmentRoleArrayOutputWithContext(ctx).OutputState,
	}
}

type AssessmentRoleOutput struct{ *pulumi.OutputState }

func (AssessmentRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentRole)(nil)).Elem()
}

func (o AssessmentRoleOutput) ToAssessmentRoleOutput() AssessmentRoleOutput {
	return o
}

func (o AssessmentRoleOutput) ToAssessmentRoleOutputWithContext(ctx context.Context) AssessmentRoleOutput {
	return o
}

func (o AssessmentRoleOutput) ToOutput(ctx context.Context) pulumix.Output[AssessmentRole] {
	return pulumix.Output[AssessmentRole]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the IAM role.
func (o AssessmentRoleOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v AssessmentRole) string { return v.RoleArn }).(pulumi.StringOutput)
}

// Type of customer persona. For assessment creation, type must always be `PROCESS_OWNER`.
func (o AssessmentRoleOutput) RoleType() pulumi.StringOutput {
	return o.ApplyT(func(v AssessmentRole) string { return v.RoleType }).(pulumi.StringOutput)
}

type AssessmentRoleArrayOutput struct{ *pulumi.OutputState }

func (AssessmentRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssessmentRole)(nil)).Elem()
}

func (o AssessmentRoleArrayOutput) ToAssessmentRoleArrayOutput() AssessmentRoleArrayOutput {
	return o
}

func (o AssessmentRoleArrayOutput) ToAssessmentRoleArrayOutputWithContext(ctx context.Context) AssessmentRoleArrayOutput {
	return o
}

func (o AssessmentRoleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AssessmentRole] {
	return pulumix.Output[[]AssessmentRole]{
		OutputState: o.OutputState,
	}
}

func (o AssessmentRoleArrayOutput) Index(i pulumi.IntInput) AssessmentRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AssessmentRole {
		return vs[0].([]AssessmentRole)[vs[1].(int)]
	}).(AssessmentRoleOutput)
}

type AssessmentRolesAll struct {
	// Amazon Resource Name (ARN) of the IAM role.
	RoleArn string `pulumi:"roleArn"`
	// Type of customer persona. For assessment creation, type must always be `PROCESS_OWNER`.
	RoleType string `pulumi:"roleType"`
}

// AssessmentRolesAllInput is an input type that accepts AssessmentRolesAllArgs and AssessmentRolesAllOutput values.
// You can construct a concrete instance of `AssessmentRolesAllInput` via:
//
//	AssessmentRolesAllArgs{...}
type AssessmentRolesAllInput interface {
	pulumi.Input

	ToAssessmentRolesAllOutput() AssessmentRolesAllOutput
	ToAssessmentRolesAllOutputWithContext(context.Context) AssessmentRolesAllOutput
}

type AssessmentRolesAllArgs struct {
	// Amazon Resource Name (ARN) of the IAM role.
	RoleArn pulumi.StringInput `pulumi:"roleArn"`
	// Type of customer persona. For assessment creation, type must always be `PROCESS_OWNER`.
	RoleType pulumi.StringInput `pulumi:"roleType"`
}

func (AssessmentRolesAllArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentRolesAll)(nil)).Elem()
}

func (i AssessmentRolesAllArgs) ToAssessmentRolesAllOutput() AssessmentRolesAllOutput {
	return i.ToAssessmentRolesAllOutputWithContext(context.Background())
}

func (i AssessmentRolesAllArgs) ToAssessmentRolesAllOutputWithContext(ctx context.Context) AssessmentRolesAllOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentRolesAllOutput)
}

func (i AssessmentRolesAllArgs) ToOutput(ctx context.Context) pulumix.Output[AssessmentRolesAll] {
	return pulumix.Output[AssessmentRolesAll]{
		OutputState: i.ToAssessmentRolesAllOutputWithContext(ctx).OutputState,
	}
}

// AssessmentRolesAllArrayInput is an input type that accepts AssessmentRolesAllArray and AssessmentRolesAllArrayOutput values.
// You can construct a concrete instance of `AssessmentRolesAllArrayInput` via:
//
//	AssessmentRolesAllArray{ AssessmentRolesAllArgs{...} }
type AssessmentRolesAllArrayInput interface {
	pulumi.Input

	ToAssessmentRolesAllArrayOutput() AssessmentRolesAllArrayOutput
	ToAssessmentRolesAllArrayOutputWithContext(context.Context) AssessmentRolesAllArrayOutput
}

type AssessmentRolesAllArray []AssessmentRolesAllInput

func (AssessmentRolesAllArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssessmentRolesAll)(nil)).Elem()
}

func (i AssessmentRolesAllArray) ToAssessmentRolesAllArrayOutput() AssessmentRolesAllArrayOutput {
	return i.ToAssessmentRolesAllArrayOutputWithContext(context.Background())
}

func (i AssessmentRolesAllArray) ToAssessmentRolesAllArrayOutputWithContext(ctx context.Context) AssessmentRolesAllArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentRolesAllArrayOutput)
}

func (i AssessmentRolesAllArray) ToOutput(ctx context.Context) pulumix.Output[[]AssessmentRolesAll] {
	return pulumix.Output[[]AssessmentRolesAll]{
		OutputState: i.ToAssessmentRolesAllArrayOutputWithContext(ctx).OutputState,
	}
}

type AssessmentRolesAllOutput struct{ *pulumi.OutputState }

func (AssessmentRolesAllOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentRolesAll)(nil)).Elem()
}

func (o AssessmentRolesAllOutput) ToAssessmentRolesAllOutput() AssessmentRolesAllOutput {
	return o
}

func (o AssessmentRolesAllOutput) ToAssessmentRolesAllOutputWithContext(ctx context.Context) AssessmentRolesAllOutput {
	return o
}

func (o AssessmentRolesAllOutput) ToOutput(ctx context.Context) pulumix.Output[AssessmentRolesAll] {
	return pulumix.Output[AssessmentRolesAll]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the IAM role.
func (o AssessmentRolesAllOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v AssessmentRolesAll) string { return v.RoleArn }).(pulumi.StringOutput)
}

// Type of customer persona. For assessment creation, type must always be `PROCESS_OWNER`.
func (o AssessmentRolesAllOutput) RoleType() pulumi.StringOutput {
	return o.ApplyT(func(v AssessmentRolesAll) string { return v.RoleType }).(pulumi.StringOutput)
}

type AssessmentRolesAllArrayOutput struct{ *pulumi.OutputState }

func (AssessmentRolesAllArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssessmentRolesAll)(nil)).Elem()
}

func (o AssessmentRolesAllArrayOutput) ToAssessmentRolesAllArrayOutput() AssessmentRolesAllArrayOutput {
	return o
}

func (o AssessmentRolesAllArrayOutput) ToAssessmentRolesAllArrayOutputWithContext(ctx context.Context) AssessmentRolesAllArrayOutput {
	return o
}

func (o AssessmentRolesAllArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AssessmentRolesAll] {
	return pulumix.Output[[]AssessmentRolesAll]{
		OutputState: o.OutputState,
	}
}

func (o AssessmentRolesAllArrayOutput) Index(i pulumi.IntInput) AssessmentRolesAllOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AssessmentRolesAll {
		return vs[0].([]AssessmentRolesAll)[vs[1].(int)]
	}).(AssessmentRolesAllOutput)
}

type AssessmentScope struct {
	// Amazon Web Services accounts that are in scope for the assessment. See `awsAccounts` below.
	AwsAccounts []AssessmentScopeAwsAccount `pulumi:"awsAccounts"`
	// Amazon Web Services services that are included in the scope of the assessment. See `awsServices` below.
	AwsServices []AssessmentScopeAwsService `pulumi:"awsServices"`
}

// AssessmentScopeInput is an input type that accepts AssessmentScopeArgs and AssessmentScopeOutput values.
// You can construct a concrete instance of `AssessmentScopeInput` via:
//
//	AssessmentScopeArgs{...}
type AssessmentScopeInput interface {
	pulumi.Input

	ToAssessmentScopeOutput() AssessmentScopeOutput
	ToAssessmentScopeOutputWithContext(context.Context) AssessmentScopeOutput
}

type AssessmentScopeArgs struct {
	// Amazon Web Services accounts that are in scope for the assessment. See `awsAccounts` below.
	AwsAccounts AssessmentScopeAwsAccountArrayInput `pulumi:"awsAccounts"`
	// Amazon Web Services services that are included in the scope of the assessment. See `awsServices` below.
	AwsServices AssessmentScopeAwsServiceArrayInput `pulumi:"awsServices"`
}

func (AssessmentScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentScope)(nil)).Elem()
}

func (i AssessmentScopeArgs) ToAssessmentScopeOutput() AssessmentScopeOutput {
	return i.ToAssessmentScopeOutputWithContext(context.Background())
}

func (i AssessmentScopeArgs) ToAssessmentScopeOutputWithContext(ctx context.Context) AssessmentScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentScopeOutput)
}

func (i AssessmentScopeArgs) ToOutput(ctx context.Context) pulumix.Output[AssessmentScope] {
	return pulumix.Output[AssessmentScope]{
		OutputState: i.ToAssessmentScopeOutputWithContext(ctx).OutputState,
	}
}

func (i AssessmentScopeArgs) ToAssessmentScopePtrOutput() AssessmentScopePtrOutput {
	return i.ToAssessmentScopePtrOutputWithContext(context.Background())
}

func (i AssessmentScopeArgs) ToAssessmentScopePtrOutputWithContext(ctx context.Context) AssessmentScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentScopeOutput).ToAssessmentScopePtrOutputWithContext(ctx)
}

// AssessmentScopePtrInput is an input type that accepts AssessmentScopeArgs, AssessmentScopePtr and AssessmentScopePtrOutput values.
// You can construct a concrete instance of `AssessmentScopePtrInput` via:
//
//	        AssessmentScopeArgs{...}
//
//	or:
//
//	        nil
type AssessmentScopePtrInput interface {
	pulumi.Input

	ToAssessmentScopePtrOutput() AssessmentScopePtrOutput
	ToAssessmentScopePtrOutputWithContext(context.Context) AssessmentScopePtrOutput
}

type assessmentScopePtrType AssessmentScopeArgs

func AssessmentScopePtr(v *AssessmentScopeArgs) AssessmentScopePtrInput {
	return (*assessmentScopePtrType)(v)
}

func (*assessmentScopePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AssessmentScope)(nil)).Elem()
}

func (i *assessmentScopePtrType) ToAssessmentScopePtrOutput() AssessmentScopePtrOutput {
	return i.ToAssessmentScopePtrOutputWithContext(context.Background())
}

func (i *assessmentScopePtrType) ToAssessmentScopePtrOutputWithContext(ctx context.Context) AssessmentScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentScopePtrOutput)
}

func (i *assessmentScopePtrType) ToOutput(ctx context.Context) pulumix.Output[*AssessmentScope] {
	return pulumix.Output[*AssessmentScope]{
		OutputState: i.ToAssessmentScopePtrOutputWithContext(ctx).OutputState,
	}
}

type AssessmentScopeOutput struct{ *pulumi.OutputState }

func (AssessmentScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentScope)(nil)).Elem()
}

func (o AssessmentScopeOutput) ToAssessmentScopeOutput() AssessmentScopeOutput {
	return o
}

func (o AssessmentScopeOutput) ToAssessmentScopeOutputWithContext(ctx context.Context) AssessmentScopeOutput {
	return o
}

func (o AssessmentScopeOutput) ToAssessmentScopePtrOutput() AssessmentScopePtrOutput {
	return o.ToAssessmentScopePtrOutputWithContext(context.Background())
}

func (o AssessmentScopeOutput) ToAssessmentScopePtrOutputWithContext(ctx context.Context) AssessmentScopePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AssessmentScope) *AssessmentScope {
		return &v
	}).(AssessmentScopePtrOutput)
}

func (o AssessmentScopeOutput) ToOutput(ctx context.Context) pulumix.Output[AssessmentScope] {
	return pulumix.Output[AssessmentScope]{
		OutputState: o.OutputState,
	}
}

// Amazon Web Services accounts that are in scope for the assessment. See `awsAccounts` below.
func (o AssessmentScopeOutput) AwsAccounts() AssessmentScopeAwsAccountArrayOutput {
	return o.ApplyT(func(v AssessmentScope) []AssessmentScopeAwsAccount { return v.AwsAccounts }).(AssessmentScopeAwsAccountArrayOutput)
}

// Amazon Web Services services that are included in the scope of the assessment. See `awsServices` below.
func (o AssessmentScopeOutput) AwsServices() AssessmentScopeAwsServiceArrayOutput {
	return o.ApplyT(func(v AssessmentScope) []AssessmentScopeAwsService { return v.AwsServices }).(AssessmentScopeAwsServiceArrayOutput)
}

type AssessmentScopePtrOutput struct{ *pulumi.OutputState }

func (AssessmentScopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssessmentScope)(nil)).Elem()
}

func (o AssessmentScopePtrOutput) ToAssessmentScopePtrOutput() AssessmentScopePtrOutput {
	return o
}

func (o AssessmentScopePtrOutput) ToAssessmentScopePtrOutputWithContext(ctx context.Context) AssessmentScopePtrOutput {
	return o
}

func (o AssessmentScopePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AssessmentScope] {
	return pulumix.Output[*AssessmentScope]{
		OutputState: o.OutputState,
	}
}

func (o AssessmentScopePtrOutput) Elem() AssessmentScopeOutput {
	return o.ApplyT(func(v *AssessmentScope) AssessmentScope {
		if v != nil {
			return *v
		}
		var ret AssessmentScope
		return ret
	}).(AssessmentScopeOutput)
}

// Amazon Web Services accounts that are in scope for the assessment. See `awsAccounts` below.
func (o AssessmentScopePtrOutput) AwsAccounts() AssessmentScopeAwsAccountArrayOutput {
	return o.ApplyT(func(v *AssessmentScope) []AssessmentScopeAwsAccount {
		if v == nil {
			return nil
		}
		return v.AwsAccounts
	}).(AssessmentScopeAwsAccountArrayOutput)
}

// Amazon Web Services services that are included in the scope of the assessment. See `awsServices` below.
func (o AssessmentScopePtrOutput) AwsServices() AssessmentScopeAwsServiceArrayOutput {
	return o.ApplyT(func(v *AssessmentScope) []AssessmentScopeAwsService {
		if v == nil {
			return nil
		}
		return v.AwsServices
	}).(AssessmentScopeAwsServiceArrayOutput)
}

type AssessmentScopeAwsAccount struct {
	// Identifier for the Amazon Web Services account.
	Id string `pulumi:"id"`
}

// AssessmentScopeAwsAccountInput is an input type that accepts AssessmentScopeAwsAccountArgs and AssessmentScopeAwsAccountOutput values.
// You can construct a concrete instance of `AssessmentScopeAwsAccountInput` via:
//
//	AssessmentScopeAwsAccountArgs{...}
type AssessmentScopeAwsAccountInput interface {
	pulumi.Input

	ToAssessmentScopeAwsAccountOutput() AssessmentScopeAwsAccountOutput
	ToAssessmentScopeAwsAccountOutputWithContext(context.Context) AssessmentScopeAwsAccountOutput
}

type AssessmentScopeAwsAccountArgs struct {
	// Identifier for the Amazon Web Services account.
	Id pulumi.StringInput `pulumi:"id"`
}

func (AssessmentScopeAwsAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentScopeAwsAccount)(nil)).Elem()
}

func (i AssessmentScopeAwsAccountArgs) ToAssessmentScopeAwsAccountOutput() AssessmentScopeAwsAccountOutput {
	return i.ToAssessmentScopeAwsAccountOutputWithContext(context.Background())
}

func (i AssessmentScopeAwsAccountArgs) ToAssessmentScopeAwsAccountOutputWithContext(ctx context.Context) AssessmentScopeAwsAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentScopeAwsAccountOutput)
}

func (i AssessmentScopeAwsAccountArgs) ToOutput(ctx context.Context) pulumix.Output[AssessmentScopeAwsAccount] {
	return pulumix.Output[AssessmentScopeAwsAccount]{
		OutputState: i.ToAssessmentScopeAwsAccountOutputWithContext(ctx).OutputState,
	}
}

// AssessmentScopeAwsAccountArrayInput is an input type that accepts AssessmentScopeAwsAccountArray and AssessmentScopeAwsAccountArrayOutput values.
// You can construct a concrete instance of `AssessmentScopeAwsAccountArrayInput` via:
//
//	AssessmentScopeAwsAccountArray{ AssessmentScopeAwsAccountArgs{...} }
type AssessmentScopeAwsAccountArrayInput interface {
	pulumi.Input

	ToAssessmentScopeAwsAccountArrayOutput() AssessmentScopeAwsAccountArrayOutput
	ToAssessmentScopeAwsAccountArrayOutputWithContext(context.Context) AssessmentScopeAwsAccountArrayOutput
}

type AssessmentScopeAwsAccountArray []AssessmentScopeAwsAccountInput

func (AssessmentScopeAwsAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssessmentScopeAwsAccount)(nil)).Elem()
}

func (i AssessmentScopeAwsAccountArray) ToAssessmentScopeAwsAccountArrayOutput() AssessmentScopeAwsAccountArrayOutput {
	return i.ToAssessmentScopeAwsAccountArrayOutputWithContext(context.Background())
}

func (i AssessmentScopeAwsAccountArray) ToAssessmentScopeAwsAccountArrayOutputWithContext(ctx context.Context) AssessmentScopeAwsAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentScopeAwsAccountArrayOutput)
}

func (i AssessmentScopeAwsAccountArray) ToOutput(ctx context.Context) pulumix.Output[[]AssessmentScopeAwsAccount] {
	return pulumix.Output[[]AssessmentScopeAwsAccount]{
		OutputState: i.ToAssessmentScopeAwsAccountArrayOutputWithContext(ctx).OutputState,
	}
}

type AssessmentScopeAwsAccountOutput struct{ *pulumi.OutputState }

func (AssessmentScopeAwsAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentScopeAwsAccount)(nil)).Elem()
}

func (o AssessmentScopeAwsAccountOutput) ToAssessmentScopeAwsAccountOutput() AssessmentScopeAwsAccountOutput {
	return o
}

func (o AssessmentScopeAwsAccountOutput) ToAssessmentScopeAwsAccountOutputWithContext(ctx context.Context) AssessmentScopeAwsAccountOutput {
	return o
}

func (o AssessmentScopeAwsAccountOutput) ToOutput(ctx context.Context) pulumix.Output[AssessmentScopeAwsAccount] {
	return pulumix.Output[AssessmentScopeAwsAccount]{
		OutputState: o.OutputState,
	}
}

// Identifier for the Amazon Web Services account.
func (o AssessmentScopeAwsAccountOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v AssessmentScopeAwsAccount) string { return v.Id }).(pulumi.StringOutput)
}

type AssessmentScopeAwsAccountArrayOutput struct{ *pulumi.OutputState }

func (AssessmentScopeAwsAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssessmentScopeAwsAccount)(nil)).Elem()
}

func (o AssessmentScopeAwsAccountArrayOutput) ToAssessmentScopeAwsAccountArrayOutput() AssessmentScopeAwsAccountArrayOutput {
	return o
}

func (o AssessmentScopeAwsAccountArrayOutput) ToAssessmentScopeAwsAccountArrayOutputWithContext(ctx context.Context) AssessmentScopeAwsAccountArrayOutput {
	return o
}

func (o AssessmentScopeAwsAccountArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AssessmentScopeAwsAccount] {
	return pulumix.Output[[]AssessmentScopeAwsAccount]{
		OutputState: o.OutputState,
	}
}

func (o AssessmentScopeAwsAccountArrayOutput) Index(i pulumi.IntInput) AssessmentScopeAwsAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AssessmentScopeAwsAccount {
		return vs[0].([]AssessmentScopeAwsAccount)[vs[1].(int)]
	}).(AssessmentScopeAwsAccountOutput)
}

type AssessmentScopeAwsService struct {
	// Name of the Amazon Web Service.
	ServiceName string `pulumi:"serviceName"`
}

// AssessmentScopeAwsServiceInput is an input type that accepts AssessmentScopeAwsServiceArgs and AssessmentScopeAwsServiceOutput values.
// You can construct a concrete instance of `AssessmentScopeAwsServiceInput` via:
//
//	AssessmentScopeAwsServiceArgs{...}
type AssessmentScopeAwsServiceInput interface {
	pulumi.Input

	ToAssessmentScopeAwsServiceOutput() AssessmentScopeAwsServiceOutput
	ToAssessmentScopeAwsServiceOutputWithContext(context.Context) AssessmentScopeAwsServiceOutput
}

type AssessmentScopeAwsServiceArgs struct {
	// Name of the Amazon Web Service.
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
}

func (AssessmentScopeAwsServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentScopeAwsService)(nil)).Elem()
}

func (i AssessmentScopeAwsServiceArgs) ToAssessmentScopeAwsServiceOutput() AssessmentScopeAwsServiceOutput {
	return i.ToAssessmentScopeAwsServiceOutputWithContext(context.Background())
}

func (i AssessmentScopeAwsServiceArgs) ToAssessmentScopeAwsServiceOutputWithContext(ctx context.Context) AssessmentScopeAwsServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentScopeAwsServiceOutput)
}

func (i AssessmentScopeAwsServiceArgs) ToOutput(ctx context.Context) pulumix.Output[AssessmentScopeAwsService] {
	return pulumix.Output[AssessmentScopeAwsService]{
		OutputState: i.ToAssessmentScopeAwsServiceOutputWithContext(ctx).OutputState,
	}
}

// AssessmentScopeAwsServiceArrayInput is an input type that accepts AssessmentScopeAwsServiceArray and AssessmentScopeAwsServiceArrayOutput values.
// You can construct a concrete instance of `AssessmentScopeAwsServiceArrayInput` via:
//
//	AssessmentScopeAwsServiceArray{ AssessmentScopeAwsServiceArgs{...} }
type AssessmentScopeAwsServiceArrayInput interface {
	pulumi.Input

	ToAssessmentScopeAwsServiceArrayOutput() AssessmentScopeAwsServiceArrayOutput
	ToAssessmentScopeAwsServiceArrayOutputWithContext(context.Context) AssessmentScopeAwsServiceArrayOutput
}

type AssessmentScopeAwsServiceArray []AssessmentScopeAwsServiceInput

func (AssessmentScopeAwsServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssessmentScopeAwsService)(nil)).Elem()
}

func (i AssessmentScopeAwsServiceArray) ToAssessmentScopeAwsServiceArrayOutput() AssessmentScopeAwsServiceArrayOutput {
	return i.ToAssessmentScopeAwsServiceArrayOutputWithContext(context.Background())
}

func (i AssessmentScopeAwsServiceArray) ToAssessmentScopeAwsServiceArrayOutputWithContext(ctx context.Context) AssessmentScopeAwsServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentScopeAwsServiceArrayOutput)
}

func (i AssessmentScopeAwsServiceArray) ToOutput(ctx context.Context) pulumix.Output[[]AssessmentScopeAwsService] {
	return pulumix.Output[[]AssessmentScopeAwsService]{
		OutputState: i.ToAssessmentScopeAwsServiceArrayOutputWithContext(ctx).OutputState,
	}
}

type AssessmentScopeAwsServiceOutput struct{ *pulumi.OutputState }

func (AssessmentScopeAwsServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentScopeAwsService)(nil)).Elem()
}

func (o AssessmentScopeAwsServiceOutput) ToAssessmentScopeAwsServiceOutput() AssessmentScopeAwsServiceOutput {
	return o
}

func (o AssessmentScopeAwsServiceOutput) ToAssessmentScopeAwsServiceOutputWithContext(ctx context.Context) AssessmentScopeAwsServiceOutput {
	return o
}

func (o AssessmentScopeAwsServiceOutput) ToOutput(ctx context.Context) pulumix.Output[AssessmentScopeAwsService] {
	return pulumix.Output[AssessmentScopeAwsService]{
		OutputState: o.OutputState,
	}
}

// Name of the Amazon Web Service.
func (o AssessmentScopeAwsServiceOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v AssessmentScopeAwsService) string { return v.ServiceName }).(pulumi.StringOutput)
}

type AssessmentScopeAwsServiceArrayOutput struct{ *pulumi.OutputState }

func (AssessmentScopeAwsServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssessmentScopeAwsService)(nil)).Elem()
}

func (o AssessmentScopeAwsServiceArrayOutput) ToAssessmentScopeAwsServiceArrayOutput() AssessmentScopeAwsServiceArrayOutput {
	return o
}

func (o AssessmentScopeAwsServiceArrayOutput) ToAssessmentScopeAwsServiceArrayOutputWithContext(ctx context.Context) AssessmentScopeAwsServiceArrayOutput {
	return o
}

func (o AssessmentScopeAwsServiceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AssessmentScopeAwsService] {
	return pulumix.Output[[]AssessmentScopeAwsService]{
		OutputState: o.OutputState,
	}
}

func (o AssessmentScopeAwsServiceArrayOutput) Index(i pulumi.IntInput) AssessmentScopeAwsServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AssessmentScopeAwsService {
		return vs[0].([]AssessmentScopeAwsService)[vs[1].(int)]
	}).(AssessmentScopeAwsServiceOutput)
}

type ControlControlMappingSource struct {
	// Description of the source.
	SourceDescription *string `pulumi:"sourceDescription"`
	// Frequency of evidence collection. Valid values are `DAILY`, `WEEKLY`, or `MONTHLY`.
	SourceFrequency *string `pulumi:"sourceFrequency"`
	SourceId        *string `pulumi:"sourceId"`
	// The keyword to search for in CloudTrail logs, Config rules, Security Hub checks, and Amazon Web Services API names. See `sourceKeyword` below.
	SourceKeyword *ControlControlMappingSourceSourceKeyword `pulumi:"sourceKeyword"`
	// Name of the source.
	SourceName string `pulumi:"sourceName"`
	// The setup option for the data source. This option reflects if the evidence collection is automated or manual. Valid values are `System_Controls_Mapping` (automated) and `Procedural_Controls_Mapping` (manual).
	SourceSetUpOption string `pulumi:"sourceSetUpOption"`
	// Type of data source for evidence collection. If `sourceSetUpOption` is manual, the only valid value is `MANUAL`. If `sourceSetUpOption` is automated, valid values are `AWS_Cloudtrail`, `AWS_Config`, `AWS_Security_Hub`, or `AWS_API_Call`.
	//
	// The following arguments are optional:
	SourceType string `pulumi:"sourceType"`
	// Instructions for troubleshooting the control.
	TroubleshootingText *string `pulumi:"troubleshootingText"`
}

// ControlControlMappingSourceInput is an input type that accepts ControlControlMappingSourceArgs and ControlControlMappingSourceOutput values.
// You can construct a concrete instance of `ControlControlMappingSourceInput` via:
//
//	ControlControlMappingSourceArgs{...}
type ControlControlMappingSourceInput interface {
	pulumi.Input

	ToControlControlMappingSourceOutput() ControlControlMappingSourceOutput
	ToControlControlMappingSourceOutputWithContext(context.Context) ControlControlMappingSourceOutput
}

type ControlControlMappingSourceArgs struct {
	// Description of the source.
	SourceDescription pulumi.StringPtrInput `pulumi:"sourceDescription"`
	// Frequency of evidence collection. Valid values are `DAILY`, `WEEKLY`, or `MONTHLY`.
	SourceFrequency pulumi.StringPtrInput `pulumi:"sourceFrequency"`
	SourceId        pulumi.StringPtrInput `pulumi:"sourceId"`
	// The keyword to search for in CloudTrail logs, Config rules, Security Hub checks, and Amazon Web Services API names. See `sourceKeyword` below.
	SourceKeyword ControlControlMappingSourceSourceKeywordPtrInput `pulumi:"sourceKeyword"`
	// Name of the source.
	SourceName pulumi.StringInput `pulumi:"sourceName"`
	// The setup option for the data source. This option reflects if the evidence collection is automated or manual. Valid values are `System_Controls_Mapping` (automated) and `Procedural_Controls_Mapping` (manual).
	SourceSetUpOption pulumi.StringInput `pulumi:"sourceSetUpOption"`
	// Type of data source for evidence collection. If `sourceSetUpOption` is manual, the only valid value is `MANUAL`. If `sourceSetUpOption` is automated, valid values are `AWS_Cloudtrail`, `AWS_Config`, `AWS_Security_Hub`, or `AWS_API_Call`.
	//
	// The following arguments are optional:
	SourceType pulumi.StringInput `pulumi:"sourceType"`
	// Instructions for troubleshooting the control.
	TroubleshootingText pulumi.StringPtrInput `pulumi:"troubleshootingText"`
}

func (ControlControlMappingSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControlControlMappingSource)(nil)).Elem()
}

func (i ControlControlMappingSourceArgs) ToControlControlMappingSourceOutput() ControlControlMappingSourceOutput {
	return i.ToControlControlMappingSourceOutputWithContext(context.Background())
}

func (i ControlControlMappingSourceArgs) ToControlControlMappingSourceOutputWithContext(ctx context.Context) ControlControlMappingSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlControlMappingSourceOutput)
}

func (i ControlControlMappingSourceArgs) ToOutput(ctx context.Context) pulumix.Output[ControlControlMappingSource] {
	return pulumix.Output[ControlControlMappingSource]{
		OutputState: i.ToControlControlMappingSourceOutputWithContext(ctx).OutputState,
	}
}

// ControlControlMappingSourceArrayInput is an input type that accepts ControlControlMappingSourceArray and ControlControlMappingSourceArrayOutput values.
// You can construct a concrete instance of `ControlControlMappingSourceArrayInput` via:
//
//	ControlControlMappingSourceArray{ ControlControlMappingSourceArgs{...} }
type ControlControlMappingSourceArrayInput interface {
	pulumi.Input

	ToControlControlMappingSourceArrayOutput() ControlControlMappingSourceArrayOutput
	ToControlControlMappingSourceArrayOutputWithContext(context.Context) ControlControlMappingSourceArrayOutput
}

type ControlControlMappingSourceArray []ControlControlMappingSourceInput

func (ControlControlMappingSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ControlControlMappingSource)(nil)).Elem()
}

func (i ControlControlMappingSourceArray) ToControlControlMappingSourceArrayOutput() ControlControlMappingSourceArrayOutput {
	return i.ToControlControlMappingSourceArrayOutputWithContext(context.Background())
}

func (i ControlControlMappingSourceArray) ToControlControlMappingSourceArrayOutputWithContext(ctx context.Context) ControlControlMappingSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlControlMappingSourceArrayOutput)
}

func (i ControlControlMappingSourceArray) ToOutput(ctx context.Context) pulumix.Output[[]ControlControlMappingSource] {
	return pulumix.Output[[]ControlControlMappingSource]{
		OutputState: i.ToControlControlMappingSourceArrayOutputWithContext(ctx).OutputState,
	}
}

type ControlControlMappingSourceOutput struct{ *pulumi.OutputState }

func (ControlControlMappingSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControlControlMappingSource)(nil)).Elem()
}

func (o ControlControlMappingSourceOutput) ToControlControlMappingSourceOutput() ControlControlMappingSourceOutput {
	return o
}

func (o ControlControlMappingSourceOutput) ToControlControlMappingSourceOutputWithContext(ctx context.Context) ControlControlMappingSourceOutput {
	return o
}

func (o ControlControlMappingSourceOutput) ToOutput(ctx context.Context) pulumix.Output[ControlControlMappingSource] {
	return pulumix.Output[ControlControlMappingSource]{
		OutputState: o.OutputState,
	}
}

// Description of the source.
func (o ControlControlMappingSourceOutput) SourceDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControlControlMappingSource) *string { return v.SourceDescription }).(pulumi.StringPtrOutput)
}

// Frequency of evidence collection. Valid values are `DAILY`, `WEEKLY`, or `MONTHLY`.
func (o ControlControlMappingSourceOutput) SourceFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControlControlMappingSource) *string { return v.SourceFrequency }).(pulumi.StringPtrOutput)
}

func (o ControlControlMappingSourceOutput) SourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControlControlMappingSource) *string { return v.SourceId }).(pulumi.StringPtrOutput)
}

// The keyword to search for in CloudTrail logs, Config rules, Security Hub checks, and Amazon Web Services API names. See `sourceKeyword` below.
func (o ControlControlMappingSourceOutput) SourceKeyword() ControlControlMappingSourceSourceKeywordPtrOutput {
	return o.ApplyT(func(v ControlControlMappingSource) *ControlControlMappingSourceSourceKeyword { return v.SourceKeyword }).(ControlControlMappingSourceSourceKeywordPtrOutput)
}

// Name of the source.
func (o ControlControlMappingSourceOutput) SourceName() pulumi.StringOutput {
	return o.ApplyT(func(v ControlControlMappingSource) string { return v.SourceName }).(pulumi.StringOutput)
}

// The setup option for the data source. This option reflects if the evidence collection is automated or manual. Valid values are `System_Controls_Mapping` (automated) and `Procedural_Controls_Mapping` (manual).
func (o ControlControlMappingSourceOutput) SourceSetUpOption() pulumi.StringOutput {
	return o.ApplyT(func(v ControlControlMappingSource) string { return v.SourceSetUpOption }).(pulumi.StringOutput)
}

// Type of data source for evidence collection. If `sourceSetUpOption` is manual, the only valid value is `MANUAL`. If `sourceSetUpOption` is automated, valid values are `AWS_Cloudtrail`, `AWS_Config`, `AWS_Security_Hub`, or `AWS_API_Call`.
//
// The following arguments are optional:
func (o ControlControlMappingSourceOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v ControlControlMappingSource) string { return v.SourceType }).(pulumi.StringOutput)
}

// Instructions for troubleshooting the control.
func (o ControlControlMappingSourceOutput) TroubleshootingText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControlControlMappingSource) *string { return v.TroubleshootingText }).(pulumi.StringPtrOutput)
}

type ControlControlMappingSourceArrayOutput struct{ *pulumi.OutputState }

func (ControlControlMappingSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ControlControlMappingSource)(nil)).Elem()
}

func (o ControlControlMappingSourceArrayOutput) ToControlControlMappingSourceArrayOutput() ControlControlMappingSourceArrayOutput {
	return o
}

func (o ControlControlMappingSourceArrayOutput) ToControlControlMappingSourceArrayOutputWithContext(ctx context.Context) ControlControlMappingSourceArrayOutput {
	return o
}

func (o ControlControlMappingSourceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ControlControlMappingSource] {
	return pulumix.Output[[]ControlControlMappingSource]{
		OutputState: o.OutputState,
	}
}

func (o ControlControlMappingSourceArrayOutput) Index(i pulumi.IntInput) ControlControlMappingSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ControlControlMappingSource {
		return vs[0].([]ControlControlMappingSource)[vs[1].(int)]
	}).(ControlControlMappingSourceOutput)
}

type ControlControlMappingSourceSourceKeyword struct {
	// Input method for the keyword. Valid values are `SELECT_FROM_LIST`.
	KeywordInputType string `pulumi:"keywordInputType"`
	// The value of the keyword that's used when mapping a control data source. For example, this can be a CloudTrail event name, a rule name for Config, a Security Hub control, or the name of an Amazon Web Services API call. See the [Audit Manager supported control data sources documentation](https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources.html) for more information.
	KeywordValue string `pulumi:"keywordValue"`
}

// ControlControlMappingSourceSourceKeywordInput is an input type that accepts ControlControlMappingSourceSourceKeywordArgs and ControlControlMappingSourceSourceKeywordOutput values.
// You can construct a concrete instance of `ControlControlMappingSourceSourceKeywordInput` via:
//
//	ControlControlMappingSourceSourceKeywordArgs{...}
type ControlControlMappingSourceSourceKeywordInput interface {
	pulumi.Input

	ToControlControlMappingSourceSourceKeywordOutput() ControlControlMappingSourceSourceKeywordOutput
	ToControlControlMappingSourceSourceKeywordOutputWithContext(context.Context) ControlControlMappingSourceSourceKeywordOutput
}

type ControlControlMappingSourceSourceKeywordArgs struct {
	// Input method for the keyword. Valid values are `SELECT_FROM_LIST`.
	KeywordInputType pulumi.StringInput `pulumi:"keywordInputType"`
	// The value of the keyword that's used when mapping a control data source. For example, this can be a CloudTrail event name, a rule name for Config, a Security Hub control, or the name of an Amazon Web Services API call. See the [Audit Manager supported control data sources documentation](https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources.html) for more information.
	KeywordValue pulumi.StringInput `pulumi:"keywordValue"`
}

func (ControlControlMappingSourceSourceKeywordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControlControlMappingSourceSourceKeyword)(nil)).Elem()
}

func (i ControlControlMappingSourceSourceKeywordArgs) ToControlControlMappingSourceSourceKeywordOutput() ControlControlMappingSourceSourceKeywordOutput {
	return i.ToControlControlMappingSourceSourceKeywordOutputWithContext(context.Background())
}

func (i ControlControlMappingSourceSourceKeywordArgs) ToControlControlMappingSourceSourceKeywordOutputWithContext(ctx context.Context) ControlControlMappingSourceSourceKeywordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlControlMappingSourceSourceKeywordOutput)
}

func (i ControlControlMappingSourceSourceKeywordArgs) ToOutput(ctx context.Context) pulumix.Output[ControlControlMappingSourceSourceKeyword] {
	return pulumix.Output[ControlControlMappingSourceSourceKeyword]{
		OutputState: i.ToControlControlMappingSourceSourceKeywordOutputWithContext(ctx).OutputState,
	}
}

func (i ControlControlMappingSourceSourceKeywordArgs) ToControlControlMappingSourceSourceKeywordPtrOutput() ControlControlMappingSourceSourceKeywordPtrOutput {
	return i.ToControlControlMappingSourceSourceKeywordPtrOutputWithContext(context.Background())
}

func (i ControlControlMappingSourceSourceKeywordArgs) ToControlControlMappingSourceSourceKeywordPtrOutputWithContext(ctx context.Context) ControlControlMappingSourceSourceKeywordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlControlMappingSourceSourceKeywordOutput).ToControlControlMappingSourceSourceKeywordPtrOutputWithContext(ctx)
}

// ControlControlMappingSourceSourceKeywordPtrInput is an input type that accepts ControlControlMappingSourceSourceKeywordArgs, ControlControlMappingSourceSourceKeywordPtr and ControlControlMappingSourceSourceKeywordPtrOutput values.
// You can construct a concrete instance of `ControlControlMappingSourceSourceKeywordPtrInput` via:
//
//	        ControlControlMappingSourceSourceKeywordArgs{...}
//
//	or:
//
//	        nil
type ControlControlMappingSourceSourceKeywordPtrInput interface {
	pulumi.Input

	ToControlControlMappingSourceSourceKeywordPtrOutput() ControlControlMappingSourceSourceKeywordPtrOutput
	ToControlControlMappingSourceSourceKeywordPtrOutputWithContext(context.Context) ControlControlMappingSourceSourceKeywordPtrOutput
}

type controlControlMappingSourceSourceKeywordPtrType ControlControlMappingSourceSourceKeywordArgs

func ControlControlMappingSourceSourceKeywordPtr(v *ControlControlMappingSourceSourceKeywordArgs) ControlControlMappingSourceSourceKeywordPtrInput {
	return (*controlControlMappingSourceSourceKeywordPtrType)(v)
}

func (*controlControlMappingSourceSourceKeywordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ControlControlMappingSourceSourceKeyword)(nil)).Elem()
}

func (i *controlControlMappingSourceSourceKeywordPtrType) ToControlControlMappingSourceSourceKeywordPtrOutput() ControlControlMappingSourceSourceKeywordPtrOutput {
	return i.ToControlControlMappingSourceSourceKeywordPtrOutputWithContext(context.Background())
}

func (i *controlControlMappingSourceSourceKeywordPtrType) ToControlControlMappingSourceSourceKeywordPtrOutputWithContext(ctx context.Context) ControlControlMappingSourceSourceKeywordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlControlMappingSourceSourceKeywordPtrOutput)
}

func (i *controlControlMappingSourceSourceKeywordPtrType) ToOutput(ctx context.Context) pulumix.Output[*ControlControlMappingSourceSourceKeyword] {
	return pulumix.Output[*ControlControlMappingSourceSourceKeyword]{
		OutputState: i.ToControlControlMappingSourceSourceKeywordPtrOutputWithContext(ctx).OutputState,
	}
}

type ControlControlMappingSourceSourceKeywordOutput struct{ *pulumi.OutputState }

func (ControlControlMappingSourceSourceKeywordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControlControlMappingSourceSourceKeyword)(nil)).Elem()
}

func (o ControlControlMappingSourceSourceKeywordOutput) ToControlControlMappingSourceSourceKeywordOutput() ControlControlMappingSourceSourceKeywordOutput {
	return o
}

func (o ControlControlMappingSourceSourceKeywordOutput) ToControlControlMappingSourceSourceKeywordOutputWithContext(ctx context.Context) ControlControlMappingSourceSourceKeywordOutput {
	return o
}

func (o ControlControlMappingSourceSourceKeywordOutput) ToControlControlMappingSourceSourceKeywordPtrOutput() ControlControlMappingSourceSourceKeywordPtrOutput {
	return o.ToControlControlMappingSourceSourceKeywordPtrOutputWithContext(context.Background())
}

func (o ControlControlMappingSourceSourceKeywordOutput) ToControlControlMappingSourceSourceKeywordPtrOutputWithContext(ctx context.Context) ControlControlMappingSourceSourceKeywordPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ControlControlMappingSourceSourceKeyword) *ControlControlMappingSourceSourceKeyword {
		return &v
	}).(ControlControlMappingSourceSourceKeywordPtrOutput)
}

func (o ControlControlMappingSourceSourceKeywordOutput) ToOutput(ctx context.Context) pulumix.Output[ControlControlMappingSourceSourceKeyword] {
	return pulumix.Output[ControlControlMappingSourceSourceKeyword]{
		OutputState: o.OutputState,
	}
}

// Input method for the keyword. Valid values are `SELECT_FROM_LIST`.
func (o ControlControlMappingSourceSourceKeywordOutput) KeywordInputType() pulumi.StringOutput {
	return o.ApplyT(func(v ControlControlMappingSourceSourceKeyword) string { return v.KeywordInputType }).(pulumi.StringOutput)
}

// The value of the keyword that's used when mapping a control data source. For example, this can be a CloudTrail event name, a rule name for Config, a Security Hub control, or the name of an Amazon Web Services API call. See the [Audit Manager supported control data sources documentation](https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources.html) for more information.
func (o ControlControlMappingSourceSourceKeywordOutput) KeywordValue() pulumi.StringOutput {
	return o.ApplyT(func(v ControlControlMappingSourceSourceKeyword) string { return v.KeywordValue }).(pulumi.StringOutput)
}

type ControlControlMappingSourceSourceKeywordPtrOutput struct{ *pulumi.OutputState }

func (ControlControlMappingSourceSourceKeywordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControlControlMappingSourceSourceKeyword)(nil)).Elem()
}

func (o ControlControlMappingSourceSourceKeywordPtrOutput) ToControlControlMappingSourceSourceKeywordPtrOutput() ControlControlMappingSourceSourceKeywordPtrOutput {
	return o
}

func (o ControlControlMappingSourceSourceKeywordPtrOutput) ToControlControlMappingSourceSourceKeywordPtrOutputWithContext(ctx context.Context) ControlControlMappingSourceSourceKeywordPtrOutput {
	return o
}

func (o ControlControlMappingSourceSourceKeywordPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ControlControlMappingSourceSourceKeyword] {
	return pulumix.Output[*ControlControlMappingSourceSourceKeyword]{
		OutputState: o.OutputState,
	}
}

func (o ControlControlMappingSourceSourceKeywordPtrOutput) Elem() ControlControlMappingSourceSourceKeywordOutput {
	return o.ApplyT(func(v *ControlControlMappingSourceSourceKeyword) ControlControlMappingSourceSourceKeyword {
		if v != nil {
			return *v
		}
		var ret ControlControlMappingSourceSourceKeyword
		return ret
	}).(ControlControlMappingSourceSourceKeywordOutput)
}

// Input method for the keyword. Valid values are `SELECT_FROM_LIST`.
func (o ControlControlMappingSourceSourceKeywordPtrOutput) KeywordInputType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControlControlMappingSourceSourceKeyword) *string {
		if v == nil {
			return nil
		}
		return &v.KeywordInputType
	}).(pulumi.StringPtrOutput)
}

// The value of the keyword that's used when mapping a control data source. For example, this can be a CloudTrail event name, a rule name for Config, a Security Hub control, or the name of an Amazon Web Services API call. See the [Audit Manager supported control data sources documentation](https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources.html) for more information.
func (o ControlControlMappingSourceSourceKeywordPtrOutput) KeywordValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControlControlMappingSourceSourceKeyword) *string {
		if v == nil {
			return nil
		}
		return &v.KeywordValue
	}).(pulumi.StringPtrOutput)
}

type FrameworkControlSet struct {
	// List of controls within the control set. See `controls` below.
	Controls []FrameworkControlSetControl `pulumi:"controls"`
	// Unique identifier of the control.
	Id *string `pulumi:"id"`
	// Name of the control set.
	Name string `pulumi:"name"`
}

// FrameworkControlSetInput is an input type that accepts FrameworkControlSetArgs and FrameworkControlSetOutput values.
// You can construct a concrete instance of `FrameworkControlSetInput` via:
//
//	FrameworkControlSetArgs{...}
type FrameworkControlSetInput interface {
	pulumi.Input

	ToFrameworkControlSetOutput() FrameworkControlSetOutput
	ToFrameworkControlSetOutputWithContext(context.Context) FrameworkControlSetOutput
}

type FrameworkControlSetArgs struct {
	// List of controls within the control set. See `controls` below.
	Controls FrameworkControlSetControlArrayInput `pulumi:"controls"`
	// Unique identifier of the control.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name of the control set.
	Name pulumi.StringInput `pulumi:"name"`
}

func (FrameworkControlSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrameworkControlSet)(nil)).Elem()
}

func (i FrameworkControlSetArgs) ToFrameworkControlSetOutput() FrameworkControlSetOutput {
	return i.ToFrameworkControlSetOutputWithContext(context.Background())
}

func (i FrameworkControlSetArgs) ToFrameworkControlSetOutputWithContext(ctx context.Context) FrameworkControlSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrameworkControlSetOutput)
}

func (i FrameworkControlSetArgs) ToOutput(ctx context.Context) pulumix.Output[FrameworkControlSet] {
	return pulumix.Output[FrameworkControlSet]{
		OutputState: i.ToFrameworkControlSetOutputWithContext(ctx).OutputState,
	}
}

// FrameworkControlSetArrayInput is an input type that accepts FrameworkControlSetArray and FrameworkControlSetArrayOutput values.
// You can construct a concrete instance of `FrameworkControlSetArrayInput` via:
//
//	FrameworkControlSetArray{ FrameworkControlSetArgs{...} }
type FrameworkControlSetArrayInput interface {
	pulumi.Input

	ToFrameworkControlSetArrayOutput() FrameworkControlSetArrayOutput
	ToFrameworkControlSetArrayOutputWithContext(context.Context) FrameworkControlSetArrayOutput
}

type FrameworkControlSetArray []FrameworkControlSetInput

func (FrameworkControlSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrameworkControlSet)(nil)).Elem()
}

func (i FrameworkControlSetArray) ToFrameworkControlSetArrayOutput() FrameworkControlSetArrayOutput {
	return i.ToFrameworkControlSetArrayOutputWithContext(context.Background())
}

func (i FrameworkControlSetArray) ToFrameworkControlSetArrayOutputWithContext(ctx context.Context) FrameworkControlSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrameworkControlSetArrayOutput)
}

func (i FrameworkControlSetArray) ToOutput(ctx context.Context) pulumix.Output[[]FrameworkControlSet] {
	return pulumix.Output[[]FrameworkControlSet]{
		OutputState: i.ToFrameworkControlSetArrayOutputWithContext(ctx).OutputState,
	}
}

type FrameworkControlSetOutput struct{ *pulumi.OutputState }

func (FrameworkControlSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrameworkControlSet)(nil)).Elem()
}

func (o FrameworkControlSetOutput) ToFrameworkControlSetOutput() FrameworkControlSetOutput {
	return o
}

func (o FrameworkControlSetOutput) ToFrameworkControlSetOutputWithContext(ctx context.Context) FrameworkControlSetOutput {
	return o
}

func (o FrameworkControlSetOutput) ToOutput(ctx context.Context) pulumix.Output[FrameworkControlSet] {
	return pulumix.Output[FrameworkControlSet]{
		OutputState: o.OutputState,
	}
}

// List of controls within the control set. See `controls` below.
func (o FrameworkControlSetOutput) Controls() FrameworkControlSetControlArrayOutput {
	return o.ApplyT(func(v FrameworkControlSet) []FrameworkControlSetControl { return v.Controls }).(FrameworkControlSetControlArrayOutput)
}

// Unique identifier of the control.
func (o FrameworkControlSetOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrameworkControlSet) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Name of the control set.
func (o FrameworkControlSetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FrameworkControlSet) string { return v.Name }).(pulumi.StringOutput)
}

type FrameworkControlSetArrayOutput struct{ *pulumi.OutputState }

func (FrameworkControlSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrameworkControlSet)(nil)).Elem()
}

func (o FrameworkControlSetArrayOutput) ToFrameworkControlSetArrayOutput() FrameworkControlSetArrayOutput {
	return o
}

func (o FrameworkControlSetArrayOutput) ToFrameworkControlSetArrayOutputWithContext(ctx context.Context) FrameworkControlSetArrayOutput {
	return o
}

func (o FrameworkControlSetArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FrameworkControlSet] {
	return pulumix.Output[[]FrameworkControlSet]{
		OutputState: o.OutputState,
	}
}

func (o FrameworkControlSetArrayOutput) Index(i pulumi.IntInput) FrameworkControlSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FrameworkControlSet {
		return vs[0].([]FrameworkControlSet)[vs[1].(int)]
	}).(FrameworkControlSetOutput)
}

type FrameworkControlSetControl struct {
	// Unique identifier of the control.
	Id string `pulumi:"id"`
}

// FrameworkControlSetControlInput is an input type that accepts FrameworkControlSetControlArgs and FrameworkControlSetControlOutput values.
// You can construct a concrete instance of `FrameworkControlSetControlInput` via:
//
//	FrameworkControlSetControlArgs{...}
type FrameworkControlSetControlInput interface {
	pulumi.Input

	ToFrameworkControlSetControlOutput() FrameworkControlSetControlOutput
	ToFrameworkControlSetControlOutputWithContext(context.Context) FrameworkControlSetControlOutput
}

type FrameworkControlSetControlArgs struct {
	// Unique identifier of the control.
	Id pulumi.StringInput `pulumi:"id"`
}

func (FrameworkControlSetControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrameworkControlSetControl)(nil)).Elem()
}

func (i FrameworkControlSetControlArgs) ToFrameworkControlSetControlOutput() FrameworkControlSetControlOutput {
	return i.ToFrameworkControlSetControlOutputWithContext(context.Background())
}

func (i FrameworkControlSetControlArgs) ToFrameworkControlSetControlOutputWithContext(ctx context.Context) FrameworkControlSetControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrameworkControlSetControlOutput)
}

func (i FrameworkControlSetControlArgs) ToOutput(ctx context.Context) pulumix.Output[FrameworkControlSetControl] {
	return pulumix.Output[FrameworkControlSetControl]{
		OutputState: i.ToFrameworkControlSetControlOutputWithContext(ctx).OutputState,
	}
}

// FrameworkControlSetControlArrayInput is an input type that accepts FrameworkControlSetControlArray and FrameworkControlSetControlArrayOutput values.
// You can construct a concrete instance of `FrameworkControlSetControlArrayInput` via:
//
//	FrameworkControlSetControlArray{ FrameworkControlSetControlArgs{...} }
type FrameworkControlSetControlArrayInput interface {
	pulumi.Input

	ToFrameworkControlSetControlArrayOutput() FrameworkControlSetControlArrayOutput
	ToFrameworkControlSetControlArrayOutputWithContext(context.Context) FrameworkControlSetControlArrayOutput
}

type FrameworkControlSetControlArray []FrameworkControlSetControlInput

func (FrameworkControlSetControlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrameworkControlSetControl)(nil)).Elem()
}

func (i FrameworkControlSetControlArray) ToFrameworkControlSetControlArrayOutput() FrameworkControlSetControlArrayOutput {
	return i.ToFrameworkControlSetControlArrayOutputWithContext(context.Background())
}

func (i FrameworkControlSetControlArray) ToFrameworkControlSetControlArrayOutputWithContext(ctx context.Context) FrameworkControlSetControlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrameworkControlSetControlArrayOutput)
}

func (i FrameworkControlSetControlArray) ToOutput(ctx context.Context) pulumix.Output[[]FrameworkControlSetControl] {
	return pulumix.Output[[]FrameworkControlSetControl]{
		OutputState: i.ToFrameworkControlSetControlArrayOutputWithContext(ctx).OutputState,
	}
}

type FrameworkControlSetControlOutput struct{ *pulumi.OutputState }

func (FrameworkControlSetControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrameworkControlSetControl)(nil)).Elem()
}

func (o FrameworkControlSetControlOutput) ToFrameworkControlSetControlOutput() FrameworkControlSetControlOutput {
	return o
}

func (o FrameworkControlSetControlOutput) ToFrameworkControlSetControlOutputWithContext(ctx context.Context) FrameworkControlSetControlOutput {
	return o
}

func (o FrameworkControlSetControlOutput) ToOutput(ctx context.Context) pulumix.Output[FrameworkControlSetControl] {
	return pulumix.Output[FrameworkControlSetControl]{
		OutputState: o.OutputState,
	}
}

// Unique identifier of the control.
func (o FrameworkControlSetControlOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v FrameworkControlSetControl) string { return v.Id }).(pulumi.StringOutput)
}

type FrameworkControlSetControlArrayOutput struct{ *pulumi.OutputState }

func (FrameworkControlSetControlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrameworkControlSetControl)(nil)).Elem()
}

func (o FrameworkControlSetControlArrayOutput) ToFrameworkControlSetControlArrayOutput() FrameworkControlSetControlArrayOutput {
	return o
}

func (o FrameworkControlSetControlArrayOutput) ToFrameworkControlSetControlArrayOutputWithContext(ctx context.Context) FrameworkControlSetControlArrayOutput {
	return o
}

func (o FrameworkControlSetControlArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FrameworkControlSetControl] {
	return pulumix.Output[[]FrameworkControlSetControl]{
		OutputState: o.OutputState,
	}
}

func (o FrameworkControlSetControlArrayOutput) Index(i pulumi.IntInput) FrameworkControlSetControlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FrameworkControlSetControl {
		return vs[0].([]FrameworkControlSetControl)[vs[1].(int)]
	}).(FrameworkControlSetControlOutput)
}

type GetControlControlMappingSource struct {
	SourceDescription   string                                       `pulumi:"sourceDescription"`
	SourceFrequency     string                                       `pulumi:"sourceFrequency"`
	SourceId            string                                       `pulumi:"sourceId"`
	SourceKeyword       *GetControlControlMappingSourceSourceKeyword `pulumi:"sourceKeyword"`
	SourceName          string                                       `pulumi:"sourceName"`
	SourceSetUpOption   string                                       `pulumi:"sourceSetUpOption"`
	SourceType          string                                       `pulumi:"sourceType"`
	TroubleshootingText string                                       `pulumi:"troubleshootingText"`
}

// GetControlControlMappingSourceInput is an input type that accepts GetControlControlMappingSourceArgs and GetControlControlMappingSourceOutput values.
// You can construct a concrete instance of `GetControlControlMappingSourceInput` via:
//
//	GetControlControlMappingSourceArgs{...}
type GetControlControlMappingSourceInput interface {
	pulumi.Input

	ToGetControlControlMappingSourceOutput() GetControlControlMappingSourceOutput
	ToGetControlControlMappingSourceOutputWithContext(context.Context) GetControlControlMappingSourceOutput
}

type GetControlControlMappingSourceArgs struct {
	SourceDescription   pulumi.StringInput                                  `pulumi:"sourceDescription"`
	SourceFrequency     pulumi.StringInput                                  `pulumi:"sourceFrequency"`
	SourceId            pulumi.StringInput                                  `pulumi:"sourceId"`
	SourceKeyword       GetControlControlMappingSourceSourceKeywordPtrInput `pulumi:"sourceKeyword"`
	SourceName          pulumi.StringInput                                  `pulumi:"sourceName"`
	SourceSetUpOption   pulumi.StringInput                                  `pulumi:"sourceSetUpOption"`
	SourceType          pulumi.StringInput                                  `pulumi:"sourceType"`
	TroubleshootingText pulumi.StringInput                                  `pulumi:"troubleshootingText"`
}

func (GetControlControlMappingSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetControlControlMappingSource)(nil)).Elem()
}

func (i GetControlControlMappingSourceArgs) ToGetControlControlMappingSourceOutput() GetControlControlMappingSourceOutput {
	return i.ToGetControlControlMappingSourceOutputWithContext(context.Background())
}

func (i GetControlControlMappingSourceArgs) ToGetControlControlMappingSourceOutputWithContext(ctx context.Context) GetControlControlMappingSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetControlControlMappingSourceOutput)
}

func (i GetControlControlMappingSourceArgs) ToOutput(ctx context.Context) pulumix.Output[GetControlControlMappingSource] {
	return pulumix.Output[GetControlControlMappingSource]{
		OutputState: i.ToGetControlControlMappingSourceOutputWithContext(ctx).OutputState,
	}
}

// GetControlControlMappingSourceArrayInput is an input type that accepts GetControlControlMappingSourceArray and GetControlControlMappingSourceArrayOutput values.
// You can construct a concrete instance of `GetControlControlMappingSourceArrayInput` via:
//
//	GetControlControlMappingSourceArray{ GetControlControlMappingSourceArgs{...} }
type GetControlControlMappingSourceArrayInput interface {
	pulumi.Input

	ToGetControlControlMappingSourceArrayOutput() GetControlControlMappingSourceArrayOutput
	ToGetControlControlMappingSourceArrayOutputWithContext(context.Context) GetControlControlMappingSourceArrayOutput
}

type GetControlControlMappingSourceArray []GetControlControlMappingSourceInput

func (GetControlControlMappingSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetControlControlMappingSource)(nil)).Elem()
}

func (i GetControlControlMappingSourceArray) ToGetControlControlMappingSourceArrayOutput() GetControlControlMappingSourceArrayOutput {
	return i.ToGetControlControlMappingSourceArrayOutputWithContext(context.Background())
}

func (i GetControlControlMappingSourceArray) ToGetControlControlMappingSourceArrayOutputWithContext(ctx context.Context) GetControlControlMappingSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetControlControlMappingSourceArrayOutput)
}

func (i GetControlControlMappingSourceArray) ToOutput(ctx context.Context) pulumix.Output[[]GetControlControlMappingSource] {
	return pulumix.Output[[]GetControlControlMappingSource]{
		OutputState: i.ToGetControlControlMappingSourceArrayOutputWithContext(ctx).OutputState,
	}
}

type GetControlControlMappingSourceOutput struct{ *pulumi.OutputState }

func (GetControlControlMappingSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetControlControlMappingSource)(nil)).Elem()
}

func (o GetControlControlMappingSourceOutput) ToGetControlControlMappingSourceOutput() GetControlControlMappingSourceOutput {
	return o
}

func (o GetControlControlMappingSourceOutput) ToGetControlControlMappingSourceOutputWithContext(ctx context.Context) GetControlControlMappingSourceOutput {
	return o
}

func (o GetControlControlMappingSourceOutput) ToOutput(ctx context.Context) pulumix.Output[GetControlControlMappingSource] {
	return pulumix.Output[GetControlControlMappingSource]{
		OutputState: o.OutputState,
	}
}

func (o GetControlControlMappingSourceOutput) SourceDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetControlControlMappingSource) string { return v.SourceDescription }).(pulumi.StringOutput)
}

func (o GetControlControlMappingSourceOutput) SourceFrequency() pulumi.StringOutput {
	return o.ApplyT(func(v GetControlControlMappingSource) string { return v.SourceFrequency }).(pulumi.StringOutput)
}

func (o GetControlControlMappingSourceOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetControlControlMappingSource) string { return v.SourceId }).(pulumi.StringOutput)
}

func (o GetControlControlMappingSourceOutput) SourceKeyword() GetControlControlMappingSourceSourceKeywordPtrOutput {
	return o.ApplyT(func(v GetControlControlMappingSource) *GetControlControlMappingSourceSourceKeyword {
		return v.SourceKeyword
	}).(GetControlControlMappingSourceSourceKeywordPtrOutput)
}

func (o GetControlControlMappingSourceOutput) SourceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetControlControlMappingSource) string { return v.SourceName }).(pulumi.StringOutput)
}

func (o GetControlControlMappingSourceOutput) SourceSetUpOption() pulumi.StringOutput {
	return o.ApplyT(func(v GetControlControlMappingSource) string { return v.SourceSetUpOption }).(pulumi.StringOutput)
}

func (o GetControlControlMappingSourceOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetControlControlMappingSource) string { return v.SourceType }).(pulumi.StringOutput)
}

func (o GetControlControlMappingSourceOutput) TroubleshootingText() pulumi.StringOutput {
	return o.ApplyT(func(v GetControlControlMappingSource) string { return v.TroubleshootingText }).(pulumi.StringOutput)
}

type GetControlControlMappingSourceArrayOutput struct{ *pulumi.OutputState }

func (GetControlControlMappingSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetControlControlMappingSource)(nil)).Elem()
}

func (o GetControlControlMappingSourceArrayOutput) ToGetControlControlMappingSourceArrayOutput() GetControlControlMappingSourceArrayOutput {
	return o
}

func (o GetControlControlMappingSourceArrayOutput) ToGetControlControlMappingSourceArrayOutputWithContext(ctx context.Context) GetControlControlMappingSourceArrayOutput {
	return o
}

func (o GetControlControlMappingSourceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetControlControlMappingSource] {
	return pulumix.Output[[]GetControlControlMappingSource]{
		OutputState: o.OutputState,
	}
}

func (o GetControlControlMappingSourceArrayOutput) Index(i pulumi.IntInput) GetControlControlMappingSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetControlControlMappingSource {
		return vs[0].([]GetControlControlMappingSource)[vs[1].(int)]
	}).(GetControlControlMappingSourceOutput)
}

type GetControlControlMappingSourceSourceKeyword struct {
	KeywordInputType string `pulumi:"keywordInputType"`
	KeywordValue     string `pulumi:"keywordValue"`
}

// GetControlControlMappingSourceSourceKeywordInput is an input type that accepts GetControlControlMappingSourceSourceKeywordArgs and GetControlControlMappingSourceSourceKeywordOutput values.
// You can construct a concrete instance of `GetControlControlMappingSourceSourceKeywordInput` via:
//
//	GetControlControlMappingSourceSourceKeywordArgs{...}
type GetControlControlMappingSourceSourceKeywordInput interface {
	pulumi.Input

	ToGetControlControlMappingSourceSourceKeywordOutput() GetControlControlMappingSourceSourceKeywordOutput
	ToGetControlControlMappingSourceSourceKeywordOutputWithContext(context.Context) GetControlControlMappingSourceSourceKeywordOutput
}

type GetControlControlMappingSourceSourceKeywordArgs struct {
	KeywordInputType pulumi.StringInput `pulumi:"keywordInputType"`
	KeywordValue     pulumi.StringInput `pulumi:"keywordValue"`
}

func (GetControlControlMappingSourceSourceKeywordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetControlControlMappingSourceSourceKeyword)(nil)).Elem()
}

func (i GetControlControlMappingSourceSourceKeywordArgs) ToGetControlControlMappingSourceSourceKeywordOutput() GetControlControlMappingSourceSourceKeywordOutput {
	return i.ToGetControlControlMappingSourceSourceKeywordOutputWithContext(context.Background())
}

func (i GetControlControlMappingSourceSourceKeywordArgs) ToGetControlControlMappingSourceSourceKeywordOutputWithContext(ctx context.Context) GetControlControlMappingSourceSourceKeywordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetControlControlMappingSourceSourceKeywordOutput)
}

func (i GetControlControlMappingSourceSourceKeywordArgs) ToOutput(ctx context.Context) pulumix.Output[GetControlControlMappingSourceSourceKeyword] {
	return pulumix.Output[GetControlControlMappingSourceSourceKeyword]{
		OutputState: i.ToGetControlControlMappingSourceSourceKeywordOutputWithContext(ctx).OutputState,
	}
}

func (i GetControlControlMappingSourceSourceKeywordArgs) ToGetControlControlMappingSourceSourceKeywordPtrOutput() GetControlControlMappingSourceSourceKeywordPtrOutput {
	return i.ToGetControlControlMappingSourceSourceKeywordPtrOutputWithContext(context.Background())
}

func (i GetControlControlMappingSourceSourceKeywordArgs) ToGetControlControlMappingSourceSourceKeywordPtrOutputWithContext(ctx context.Context) GetControlControlMappingSourceSourceKeywordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetControlControlMappingSourceSourceKeywordOutput).ToGetControlControlMappingSourceSourceKeywordPtrOutputWithContext(ctx)
}

// GetControlControlMappingSourceSourceKeywordPtrInput is an input type that accepts GetControlControlMappingSourceSourceKeywordArgs, GetControlControlMappingSourceSourceKeywordPtr and GetControlControlMappingSourceSourceKeywordPtrOutput values.
// You can construct a concrete instance of `GetControlControlMappingSourceSourceKeywordPtrInput` via:
//
//	        GetControlControlMappingSourceSourceKeywordArgs{...}
//
//	or:
//
//	        nil
type GetControlControlMappingSourceSourceKeywordPtrInput interface {
	pulumi.Input

	ToGetControlControlMappingSourceSourceKeywordPtrOutput() GetControlControlMappingSourceSourceKeywordPtrOutput
	ToGetControlControlMappingSourceSourceKeywordPtrOutputWithContext(context.Context) GetControlControlMappingSourceSourceKeywordPtrOutput
}

type getControlControlMappingSourceSourceKeywordPtrType GetControlControlMappingSourceSourceKeywordArgs

func GetControlControlMappingSourceSourceKeywordPtr(v *GetControlControlMappingSourceSourceKeywordArgs) GetControlControlMappingSourceSourceKeywordPtrInput {
	return (*getControlControlMappingSourceSourceKeywordPtrType)(v)
}

func (*getControlControlMappingSourceSourceKeywordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetControlControlMappingSourceSourceKeyword)(nil)).Elem()
}

func (i *getControlControlMappingSourceSourceKeywordPtrType) ToGetControlControlMappingSourceSourceKeywordPtrOutput() GetControlControlMappingSourceSourceKeywordPtrOutput {
	return i.ToGetControlControlMappingSourceSourceKeywordPtrOutputWithContext(context.Background())
}

func (i *getControlControlMappingSourceSourceKeywordPtrType) ToGetControlControlMappingSourceSourceKeywordPtrOutputWithContext(ctx context.Context) GetControlControlMappingSourceSourceKeywordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetControlControlMappingSourceSourceKeywordPtrOutput)
}

func (i *getControlControlMappingSourceSourceKeywordPtrType) ToOutput(ctx context.Context) pulumix.Output[*GetControlControlMappingSourceSourceKeyword] {
	return pulumix.Output[*GetControlControlMappingSourceSourceKeyword]{
		OutputState: i.ToGetControlControlMappingSourceSourceKeywordPtrOutputWithContext(ctx).OutputState,
	}
}

type GetControlControlMappingSourceSourceKeywordOutput struct{ *pulumi.OutputState }

func (GetControlControlMappingSourceSourceKeywordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetControlControlMappingSourceSourceKeyword)(nil)).Elem()
}

func (o GetControlControlMappingSourceSourceKeywordOutput) ToGetControlControlMappingSourceSourceKeywordOutput() GetControlControlMappingSourceSourceKeywordOutput {
	return o
}

func (o GetControlControlMappingSourceSourceKeywordOutput) ToGetControlControlMappingSourceSourceKeywordOutputWithContext(ctx context.Context) GetControlControlMappingSourceSourceKeywordOutput {
	return o
}

func (o GetControlControlMappingSourceSourceKeywordOutput) ToGetControlControlMappingSourceSourceKeywordPtrOutput() GetControlControlMappingSourceSourceKeywordPtrOutput {
	return o.ToGetControlControlMappingSourceSourceKeywordPtrOutputWithContext(context.Background())
}

func (o GetControlControlMappingSourceSourceKeywordOutput) ToGetControlControlMappingSourceSourceKeywordPtrOutputWithContext(ctx context.Context) GetControlControlMappingSourceSourceKeywordPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetControlControlMappingSourceSourceKeyword) *GetControlControlMappingSourceSourceKeyword {
		return &v
	}).(GetControlControlMappingSourceSourceKeywordPtrOutput)
}

func (o GetControlControlMappingSourceSourceKeywordOutput) ToOutput(ctx context.Context) pulumix.Output[GetControlControlMappingSourceSourceKeyword] {
	return pulumix.Output[GetControlControlMappingSourceSourceKeyword]{
		OutputState: o.OutputState,
	}
}

func (o GetControlControlMappingSourceSourceKeywordOutput) KeywordInputType() pulumi.StringOutput {
	return o.ApplyT(func(v GetControlControlMappingSourceSourceKeyword) string { return v.KeywordInputType }).(pulumi.StringOutput)
}

func (o GetControlControlMappingSourceSourceKeywordOutput) KeywordValue() pulumi.StringOutput {
	return o.ApplyT(func(v GetControlControlMappingSourceSourceKeyword) string { return v.KeywordValue }).(pulumi.StringOutput)
}

type GetControlControlMappingSourceSourceKeywordPtrOutput struct{ *pulumi.OutputState }

func (GetControlControlMappingSourceSourceKeywordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetControlControlMappingSourceSourceKeyword)(nil)).Elem()
}

func (o GetControlControlMappingSourceSourceKeywordPtrOutput) ToGetControlControlMappingSourceSourceKeywordPtrOutput() GetControlControlMappingSourceSourceKeywordPtrOutput {
	return o
}

func (o GetControlControlMappingSourceSourceKeywordPtrOutput) ToGetControlControlMappingSourceSourceKeywordPtrOutputWithContext(ctx context.Context) GetControlControlMappingSourceSourceKeywordPtrOutput {
	return o
}

func (o GetControlControlMappingSourceSourceKeywordPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GetControlControlMappingSourceSourceKeyword] {
	return pulumix.Output[*GetControlControlMappingSourceSourceKeyword]{
		OutputState: o.OutputState,
	}
}

func (o GetControlControlMappingSourceSourceKeywordPtrOutput) Elem() GetControlControlMappingSourceSourceKeywordOutput {
	return o.ApplyT(func(v *GetControlControlMappingSourceSourceKeyword) GetControlControlMappingSourceSourceKeyword {
		if v != nil {
			return *v
		}
		var ret GetControlControlMappingSourceSourceKeyword
		return ret
	}).(GetControlControlMappingSourceSourceKeywordOutput)
}

func (o GetControlControlMappingSourceSourceKeywordPtrOutput) KeywordInputType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetControlControlMappingSourceSourceKeyword) *string {
		if v == nil {
			return nil
		}
		return &v.KeywordInputType
	}).(pulumi.StringPtrOutput)
}

func (o GetControlControlMappingSourceSourceKeywordPtrOutput) KeywordValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetControlControlMappingSourceSourceKeyword) *string {
		if v == nil {
			return nil
		}
		return &v.KeywordValue
	}).(pulumi.StringPtrOutput)
}

type GetFrameworkControlSet struct {
	Controls []GetFrameworkControlSetControl `pulumi:"controls"`
	Id       string                          `pulumi:"id"`
	// Name of the framework.
	Name string `pulumi:"name"`
}

// GetFrameworkControlSetInput is an input type that accepts GetFrameworkControlSetArgs and GetFrameworkControlSetOutput values.
// You can construct a concrete instance of `GetFrameworkControlSetInput` via:
//
//	GetFrameworkControlSetArgs{...}
type GetFrameworkControlSetInput interface {
	pulumi.Input

	ToGetFrameworkControlSetOutput() GetFrameworkControlSetOutput
	ToGetFrameworkControlSetOutputWithContext(context.Context) GetFrameworkControlSetOutput
}

type GetFrameworkControlSetArgs struct {
	Controls GetFrameworkControlSetControlArrayInput `pulumi:"controls"`
	Id       pulumi.StringInput                      `pulumi:"id"`
	// Name of the framework.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetFrameworkControlSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrameworkControlSet)(nil)).Elem()
}

func (i GetFrameworkControlSetArgs) ToGetFrameworkControlSetOutput() GetFrameworkControlSetOutput {
	return i.ToGetFrameworkControlSetOutputWithContext(context.Background())
}

func (i GetFrameworkControlSetArgs) ToGetFrameworkControlSetOutputWithContext(ctx context.Context) GetFrameworkControlSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFrameworkControlSetOutput)
}

func (i GetFrameworkControlSetArgs) ToOutput(ctx context.Context) pulumix.Output[GetFrameworkControlSet] {
	return pulumix.Output[GetFrameworkControlSet]{
		OutputState: i.ToGetFrameworkControlSetOutputWithContext(ctx).OutputState,
	}
}

// GetFrameworkControlSetArrayInput is an input type that accepts GetFrameworkControlSetArray and GetFrameworkControlSetArrayOutput values.
// You can construct a concrete instance of `GetFrameworkControlSetArrayInput` via:
//
//	GetFrameworkControlSetArray{ GetFrameworkControlSetArgs{...} }
type GetFrameworkControlSetArrayInput interface {
	pulumi.Input

	ToGetFrameworkControlSetArrayOutput() GetFrameworkControlSetArrayOutput
	ToGetFrameworkControlSetArrayOutputWithContext(context.Context) GetFrameworkControlSetArrayOutput
}

type GetFrameworkControlSetArray []GetFrameworkControlSetInput

func (GetFrameworkControlSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFrameworkControlSet)(nil)).Elem()
}

func (i GetFrameworkControlSetArray) ToGetFrameworkControlSetArrayOutput() GetFrameworkControlSetArrayOutput {
	return i.ToGetFrameworkControlSetArrayOutputWithContext(context.Background())
}

func (i GetFrameworkControlSetArray) ToGetFrameworkControlSetArrayOutputWithContext(ctx context.Context) GetFrameworkControlSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFrameworkControlSetArrayOutput)
}

func (i GetFrameworkControlSetArray) ToOutput(ctx context.Context) pulumix.Output[[]GetFrameworkControlSet] {
	return pulumix.Output[[]GetFrameworkControlSet]{
		OutputState: i.ToGetFrameworkControlSetArrayOutputWithContext(ctx).OutputState,
	}
}

type GetFrameworkControlSetOutput struct{ *pulumi.OutputState }

func (GetFrameworkControlSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrameworkControlSet)(nil)).Elem()
}

func (o GetFrameworkControlSetOutput) ToGetFrameworkControlSetOutput() GetFrameworkControlSetOutput {
	return o
}

func (o GetFrameworkControlSetOutput) ToGetFrameworkControlSetOutputWithContext(ctx context.Context) GetFrameworkControlSetOutput {
	return o
}

func (o GetFrameworkControlSetOutput) ToOutput(ctx context.Context) pulumix.Output[GetFrameworkControlSet] {
	return pulumix.Output[GetFrameworkControlSet]{
		OutputState: o.OutputState,
	}
}

func (o GetFrameworkControlSetOutput) Controls() GetFrameworkControlSetControlArrayOutput {
	return o.ApplyT(func(v GetFrameworkControlSet) []GetFrameworkControlSetControl { return v.Controls }).(GetFrameworkControlSetControlArrayOutput)
}

func (o GetFrameworkControlSetOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrameworkControlSet) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the framework.
func (o GetFrameworkControlSetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrameworkControlSet) string { return v.Name }).(pulumi.StringOutput)
}

type GetFrameworkControlSetArrayOutput struct{ *pulumi.OutputState }

func (GetFrameworkControlSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFrameworkControlSet)(nil)).Elem()
}

func (o GetFrameworkControlSetArrayOutput) ToGetFrameworkControlSetArrayOutput() GetFrameworkControlSetArrayOutput {
	return o
}

func (o GetFrameworkControlSetArrayOutput) ToGetFrameworkControlSetArrayOutputWithContext(ctx context.Context) GetFrameworkControlSetArrayOutput {
	return o
}

func (o GetFrameworkControlSetArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetFrameworkControlSet] {
	return pulumix.Output[[]GetFrameworkControlSet]{
		OutputState: o.OutputState,
	}
}

func (o GetFrameworkControlSetArrayOutput) Index(i pulumi.IntInput) GetFrameworkControlSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFrameworkControlSet {
		return vs[0].([]GetFrameworkControlSet)[vs[1].(int)]
	}).(GetFrameworkControlSetOutput)
}

type GetFrameworkControlSetControl struct {
	Id string `pulumi:"id"`
}

// GetFrameworkControlSetControlInput is an input type that accepts GetFrameworkControlSetControlArgs and GetFrameworkControlSetControlOutput values.
// You can construct a concrete instance of `GetFrameworkControlSetControlInput` via:
//
//	GetFrameworkControlSetControlArgs{...}
type GetFrameworkControlSetControlInput interface {
	pulumi.Input

	ToGetFrameworkControlSetControlOutput() GetFrameworkControlSetControlOutput
	ToGetFrameworkControlSetControlOutputWithContext(context.Context) GetFrameworkControlSetControlOutput
}

type GetFrameworkControlSetControlArgs struct {
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetFrameworkControlSetControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrameworkControlSetControl)(nil)).Elem()
}

func (i GetFrameworkControlSetControlArgs) ToGetFrameworkControlSetControlOutput() GetFrameworkControlSetControlOutput {
	return i.ToGetFrameworkControlSetControlOutputWithContext(context.Background())
}

func (i GetFrameworkControlSetControlArgs) ToGetFrameworkControlSetControlOutputWithContext(ctx context.Context) GetFrameworkControlSetControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFrameworkControlSetControlOutput)
}

func (i GetFrameworkControlSetControlArgs) ToOutput(ctx context.Context) pulumix.Output[GetFrameworkControlSetControl] {
	return pulumix.Output[GetFrameworkControlSetControl]{
		OutputState: i.ToGetFrameworkControlSetControlOutputWithContext(ctx).OutputState,
	}
}

// GetFrameworkControlSetControlArrayInput is an input type that accepts GetFrameworkControlSetControlArray and GetFrameworkControlSetControlArrayOutput values.
// You can construct a concrete instance of `GetFrameworkControlSetControlArrayInput` via:
//
//	GetFrameworkControlSetControlArray{ GetFrameworkControlSetControlArgs{...} }
type GetFrameworkControlSetControlArrayInput interface {
	pulumi.Input

	ToGetFrameworkControlSetControlArrayOutput() GetFrameworkControlSetControlArrayOutput
	ToGetFrameworkControlSetControlArrayOutputWithContext(context.Context) GetFrameworkControlSetControlArrayOutput
}

type GetFrameworkControlSetControlArray []GetFrameworkControlSetControlInput

func (GetFrameworkControlSetControlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFrameworkControlSetControl)(nil)).Elem()
}

func (i GetFrameworkControlSetControlArray) ToGetFrameworkControlSetControlArrayOutput() GetFrameworkControlSetControlArrayOutput {
	return i.ToGetFrameworkControlSetControlArrayOutputWithContext(context.Background())
}

func (i GetFrameworkControlSetControlArray) ToGetFrameworkControlSetControlArrayOutputWithContext(ctx context.Context) GetFrameworkControlSetControlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFrameworkControlSetControlArrayOutput)
}

func (i GetFrameworkControlSetControlArray) ToOutput(ctx context.Context) pulumix.Output[[]GetFrameworkControlSetControl] {
	return pulumix.Output[[]GetFrameworkControlSetControl]{
		OutputState: i.ToGetFrameworkControlSetControlArrayOutputWithContext(ctx).OutputState,
	}
}

type GetFrameworkControlSetControlOutput struct{ *pulumi.OutputState }

func (GetFrameworkControlSetControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrameworkControlSetControl)(nil)).Elem()
}

func (o GetFrameworkControlSetControlOutput) ToGetFrameworkControlSetControlOutput() GetFrameworkControlSetControlOutput {
	return o
}

func (o GetFrameworkControlSetControlOutput) ToGetFrameworkControlSetControlOutputWithContext(ctx context.Context) GetFrameworkControlSetControlOutput {
	return o
}

func (o GetFrameworkControlSetControlOutput) ToOutput(ctx context.Context) pulumix.Output[GetFrameworkControlSetControl] {
	return pulumix.Output[GetFrameworkControlSetControl]{
		OutputState: o.OutputState,
	}
}

func (o GetFrameworkControlSetControlOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrameworkControlSetControl) string { return v.Id }).(pulumi.StringOutput)
}

type GetFrameworkControlSetControlArrayOutput struct{ *pulumi.OutputState }

func (GetFrameworkControlSetControlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFrameworkControlSetControl)(nil)).Elem()
}

func (o GetFrameworkControlSetControlArrayOutput) ToGetFrameworkControlSetControlArrayOutput() GetFrameworkControlSetControlArrayOutput {
	return o
}

func (o GetFrameworkControlSetControlArrayOutput) ToGetFrameworkControlSetControlArrayOutputWithContext(ctx context.Context) GetFrameworkControlSetControlArrayOutput {
	return o
}

func (o GetFrameworkControlSetControlArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetFrameworkControlSetControl] {
	return pulumix.Output[[]GetFrameworkControlSetControl]{
		OutputState: o.OutputState,
	}
}

func (o GetFrameworkControlSetControlArrayOutput) Index(i pulumi.IntInput) GetFrameworkControlSetControlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFrameworkControlSetControl {
		return vs[0].([]GetFrameworkControlSetControl)[vs[1].(int)]
	}).(GetFrameworkControlSetControlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AssessmentAssessmentReportsDestinationInput)(nil)).Elem(), AssessmentAssessmentReportsDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssessmentAssessmentReportsDestinationPtrInput)(nil)).Elem(), AssessmentAssessmentReportsDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssessmentRoleInput)(nil)).Elem(), AssessmentRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssessmentRoleArrayInput)(nil)).Elem(), AssessmentRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssessmentRolesAllInput)(nil)).Elem(), AssessmentRolesAllArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssessmentRolesAllArrayInput)(nil)).Elem(), AssessmentRolesAllArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssessmentScopeInput)(nil)).Elem(), AssessmentScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssessmentScopePtrInput)(nil)).Elem(), AssessmentScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssessmentScopeAwsAccountInput)(nil)).Elem(), AssessmentScopeAwsAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssessmentScopeAwsAccountArrayInput)(nil)).Elem(), AssessmentScopeAwsAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssessmentScopeAwsServiceInput)(nil)).Elem(), AssessmentScopeAwsServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssessmentScopeAwsServiceArrayInput)(nil)).Elem(), AssessmentScopeAwsServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControlControlMappingSourceInput)(nil)).Elem(), ControlControlMappingSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControlControlMappingSourceArrayInput)(nil)).Elem(), ControlControlMappingSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControlControlMappingSourceSourceKeywordInput)(nil)).Elem(), ControlControlMappingSourceSourceKeywordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControlControlMappingSourceSourceKeywordPtrInput)(nil)).Elem(), ControlControlMappingSourceSourceKeywordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrameworkControlSetInput)(nil)).Elem(), FrameworkControlSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrameworkControlSetArrayInput)(nil)).Elem(), FrameworkControlSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrameworkControlSetControlInput)(nil)).Elem(), FrameworkControlSetControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrameworkControlSetControlArrayInput)(nil)).Elem(), FrameworkControlSetControlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetControlControlMappingSourceInput)(nil)).Elem(), GetControlControlMappingSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetControlControlMappingSourceArrayInput)(nil)).Elem(), GetControlControlMappingSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetControlControlMappingSourceSourceKeywordInput)(nil)).Elem(), GetControlControlMappingSourceSourceKeywordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetControlControlMappingSourceSourceKeywordPtrInput)(nil)).Elem(), GetControlControlMappingSourceSourceKeywordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFrameworkControlSetInput)(nil)).Elem(), GetFrameworkControlSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFrameworkControlSetArrayInput)(nil)).Elem(), GetFrameworkControlSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFrameworkControlSetControlInput)(nil)).Elem(), GetFrameworkControlSetControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFrameworkControlSetControlArrayInput)(nil)).Elem(), GetFrameworkControlSetControlArray{})
	pulumi.RegisterOutputType(AssessmentAssessmentReportsDestinationOutput{})
	pulumi.RegisterOutputType(AssessmentAssessmentReportsDestinationPtrOutput{})
	pulumi.RegisterOutputType(AssessmentRoleOutput{})
	pulumi.RegisterOutputType(AssessmentRoleArrayOutput{})
	pulumi.RegisterOutputType(AssessmentRolesAllOutput{})
	pulumi.RegisterOutputType(AssessmentRolesAllArrayOutput{})
	pulumi.RegisterOutputType(AssessmentScopeOutput{})
	pulumi.RegisterOutputType(AssessmentScopePtrOutput{})
	pulumi.RegisterOutputType(AssessmentScopeAwsAccountOutput{})
	pulumi.RegisterOutputType(AssessmentScopeAwsAccountArrayOutput{})
	pulumi.RegisterOutputType(AssessmentScopeAwsServiceOutput{})
	pulumi.RegisterOutputType(AssessmentScopeAwsServiceArrayOutput{})
	pulumi.RegisterOutputType(ControlControlMappingSourceOutput{})
	pulumi.RegisterOutputType(ControlControlMappingSourceArrayOutput{})
	pulumi.RegisterOutputType(ControlControlMappingSourceSourceKeywordOutput{})
	pulumi.RegisterOutputType(ControlControlMappingSourceSourceKeywordPtrOutput{})
	pulumi.RegisterOutputType(FrameworkControlSetOutput{})
	pulumi.RegisterOutputType(FrameworkControlSetArrayOutput{})
	pulumi.RegisterOutputType(FrameworkControlSetControlOutput{})
	pulumi.RegisterOutputType(FrameworkControlSetControlArrayOutput{})
	pulumi.RegisterOutputType(GetControlControlMappingSourceOutput{})
	pulumi.RegisterOutputType(GetControlControlMappingSourceArrayOutput{})
	pulumi.RegisterOutputType(GetControlControlMappingSourceSourceKeywordOutput{})
	pulumi.RegisterOutputType(GetControlControlMappingSourceSourceKeywordPtrOutput{})
	pulumi.RegisterOutputType(GetFrameworkControlSetOutput{})
	pulumi.RegisterOutputType(GetFrameworkControlSetArrayOutput{})
	pulumi.RegisterOutputType(GetFrameworkControlSetControlOutput{})
	pulumi.RegisterOutputType(GetFrameworkControlSetControlArrayOutput{})
}
