// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auditmanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS Audit Manager Control.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/auditmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := auditmanager.NewControl(ctx, "example", &auditmanager.ControlArgs{
//				ControlMappingSources: auditmanager.ControlControlMappingSourceArray{
//					&auditmanager.ControlControlMappingSourceArgs{
//						SourceName:        pulumi.String("example"),
//						SourceSetUpOption: pulumi.String("Procedural_Controls_Mapping"),
//						SourceType:        pulumi.String("MANUAL"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// terraform import {
//
//	to = aws_auditmanager_control.example
//
//	id = "abc123-de45" } Using `pulumi import`, import an Audit Manager Control using the `id`. For exampleconsole % pulumi import aws_auditmanager_control.example abc123-de45
type Control struct {
	pulumi.CustomResourceState

	// Recommended actions to carry out if the control isn't fulfilled.
	ActionPlanInstructions pulumi.StringPtrOutput `pulumi:"actionPlanInstructions"`
	// Title of the action plan for remediating the control.
	ActionPlanTitle pulumi.StringPtrOutput `pulumi:"actionPlanTitle"`
	// Amazon Resource Name (ARN) of the control.
	// * `control_mapping_sources.*.source_id` - Unique identifier for the source.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Data mapping sources. See `controlMappingSources` below.
	//
	// The following arguments are optional:
	ControlMappingSources ControlControlMappingSourceArrayOutput `pulumi:"controlMappingSources"`
	// Description of the control.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Name of the control.
	Name pulumi.StringOutput `pulumi:"name"`
	// A map of tags to assign to the control. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// Steps to follow to determine if the control is satisfied.
	TestingInformation pulumi.StringPtrOutput `pulumi:"testingInformation"`
	// Type of control, such as a custom control or a standard control.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewControl registers a new resource with the given unique name, arguments, and options.
func NewControl(ctx *pulumi.Context,
	name string, args *ControlArgs, opts ...pulumi.ResourceOption) (*Control, error) {
	if args == nil {
		args = &ControlArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Control
	err := ctx.RegisterResource("aws:auditmanager/control:Control", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetControl gets an existing Control resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetControl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ControlState, opts ...pulumi.ResourceOption) (*Control, error) {
	var resource Control
	err := ctx.ReadResource("aws:auditmanager/control:Control", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Control resources.
type controlState struct {
	// Recommended actions to carry out if the control isn't fulfilled.
	ActionPlanInstructions *string `pulumi:"actionPlanInstructions"`
	// Title of the action plan for remediating the control.
	ActionPlanTitle *string `pulumi:"actionPlanTitle"`
	// Amazon Resource Name (ARN) of the control.
	// * `control_mapping_sources.*.source_id` - Unique identifier for the source.
	Arn *string `pulumi:"arn"`
	// Data mapping sources. See `controlMappingSources` below.
	//
	// The following arguments are optional:
	ControlMappingSources []ControlControlMappingSource `pulumi:"controlMappingSources"`
	// Description of the control.
	Description *string `pulumi:"description"`
	// Name of the control.
	Name *string `pulumi:"name"`
	// A map of tags to assign to the control. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Steps to follow to determine if the control is satisfied.
	TestingInformation *string `pulumi:"testingInformation"`
	// Type of control, such as a custom control or a standard control.
	Type *string `pulumi:"type"`
}

type ControlState struct {
	// Recommended actions to carry out if the control isn't fulfilled.
	ActionPlanInstructions pulumi.StringPtrInput
	// Title of the action plan for remediating the control.
	ActionPlanTitle pulumi.StringPtrInput
	// Amazon Resource Name (ARN) of the control.
	// * `control_mapping_sources.*.source_id` - Unique identifier for the source.
	Arn pulumi.StringPtrInput
	// Data mapping sources. See `controlMappingSources` below.
	//
	// The following arguments are optional:
	ControlMappingSources ControlControlMappingSourceArrayInput
	// Description of the control.
	Description pulumi.StringPtrInput
	// Name of the control.
	Name pulumi.StringPtrInput
	// A map of tags to assign to the control. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumi.StringMapInput
	TagsAll pulumi.StringMapInput
	// Steps to follow to determine if the control is satisfied.
	TestingInformation pulumi.StringPtrInput
	// Type of control, such as a custom control or a standard control.
	Type pulumi.StringPtrInput
}

func (ControlState) ElementType() reflect.Type {
	return reflect.TypeOf((*controlState)(nil)).Elem()
}

type controlArgs struct {
	// Recommended actions to carry out if the control isn't fulfilled.
	ActionPlanInstructions *string `pulumi:"actionPlanInstructions"`
	// Title of the action plan for remediating the control.
	ActionPlanTitle *string `pulumi:"actionPlanTitle"`
	// Data mapping sources. See `controlMappingSources` below.
	//
	// The following arguments are optional:
	ControlMappingSources []ControlControlMappingSource `pulumi:"controlMappingSources"`
	// Description of the control.
	Description *string `pulumi:"description"`
	// Name of the control.
	Name *string `pulumi:"name"`
	// A map of tags to assign to the control. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Steps to follow to determine if the control is satisfied.
	TestingInformation *string `pulumi:"testingInformation"`
}

// The set of arguments for constructing a Control resource.
type ControlArgs struct {
	// Recommended actions to carry out if the control isn't fulfilled.
	ActionPlanInstructions pulumi.StringPtrInput
	// Title of the action plan for remediating the control.
	ActionPlanTitle pulumi.StringPtrInput
	// Data mapping sources. See `controlMappingSources` below.
	//
	// The following arguments are optional:
	ControlMappingSources ControlControlMappingSourceArrayInput
	// Description of the control.
	Description pulumi.StringPtrInput
	// Name of the control.
	Name pulumi.StringPtrInput
	// A map of tags to assign to the control. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Steps to follow to determine if the control is satisfied.
	TestingInformation pulumi.StringPtrInput
}

func (ControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*controlArgs)(nil)).Elem()
}

type ControlInput interface {
	pulumi.Input

	ToControlOutput() ControlOutput
	ToControlOutputWithContext(ctx context.Context) ControlOutput
}

func (*Control) ElementType() reflect.Type {
	return reflect.TypeOf((**Control)(nil)).Elem()
}

func (i *Control) ToControlOutput() ControlOutput {
	return i.ToControlOutputWithContext(context.Background())
}

func (i *Control) ToControlOutputWithContext(ctx context.Context) ControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlOutput)
}

// ControlArrayInput is an input type that accepts ControlArray and ControlArrayOutput values.
// You can construct a concrete instance of `ControlArrayInput` via:
//
//	ControlArray{ ControlArgs{...} }
type ControlArrayInput interface {
	pulumi.Input

	ToControlArrayOutput() ControlArrayOutput
	ToControlArrayOutputWithContext(context.Context) ControlArrayOutput
}

type ControlArray []ControlInput

func (ControlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Control)(nil)).Elem()
}

func (i ControlArray) ToControlArrayOutput() ControlArrayOutput {
	return i.ToControlArrayOutputWithContext(context.Background())
}

func (i ControlArray) ToControlArrayOutputWithContext(ctx context.Context) ControlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlArrayOutput)
}

// ControlMapInput is an input type that accepts ControlMap and ControlMapOutput values.
// You can construct a concrete instance of `ControlMapInput` via:
//
//	ControlMap{ "key": ControlArgs{...} }
type ControlMapInput interface {
	pulumi.Input

	ToControlMapOutput() ControlMapOutput
	ToControlMapOutputWithContext(context.Context) ControlMapOutput
}

type ControlMap map[string]ControlInput

func (ControlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Control)(nil)).Elem()
}

func (i ControlMap) ToControlMapOutput() ControlMapOutput {
	return i.ToControlMapOutputWithContext(context.Background())
}

func (i ControlMap) ToControlMapOutputWithContext(ctx context.Context) ControlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlMapOutput)
}

type ControlOutput struct{ *pulumi.OutputState }

func (ControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Control)(nil)).Elem()
}

func (o ControlOutput) ToControlOutput() ControlOutput {
	return o
}

func (o ControlOutput) ToControlOutputWithContext(ctx context.Context) ControlOutput {
	return o
}

// Recommended actions to carry out if the control isn't fulfilled.
func (o ControlOutput) ActionPlanInstructions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Control) pulumi.StringPtrOutput { return v.ActionPlanInstructions }).(pulumi.StringPtrOutput)
}

// Title of the action plan for remediating the control.
func (o ControlOutput) ActionPlanTitle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Control) pulumi.StringPtrOutput { return v.ActionPlanTitle }).(pulumi.StringPtrOutput)
}

// Amazon Resource Name (ARN) of the control.
// * `control_mapping_sources.*.source_id` - Unique identifier for the source.
func (o ControlOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Control) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Data mapping sources. See `controlMappingSources` below.
//
// The following arguments are optional:
func (o ControlOutput) ControlMappingSources() ControlControlMappingSourceArrayOutput {
	return o.ApplyT(func(v *Control) ControlControlMappingSourceArrayOutput { return v.ControlMappingSources }).(ControlControlMappingSourceArrayOutput)
}

// Description of the control.
func (o ControlOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Control) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Name of the control.
func (o ControlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Control) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A map of tags to assign to the control. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ControlOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Control) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ControlOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Control) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// Steps to follow to determine if the control is satisfied.
func (o ControlOutput) TestingInformation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Control) pulumi.StringPtrOutput { return v.TestingInformation }).(pulumi.StringPtrOutput)
}

// Type of control, such as a custom control or a standard control.
func (o ControlOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Control) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type ControlArrayOutput struct{ *pulumi.OutputState }

func (ControlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Control)(nil)).Elem()
}

func (o ControlArrayOutput) ToControlArrayOutput() ControlArrayOutput {
	return o
}

func (o ControlArrayOutput) ToControlArrayOutputWithContext(ctx context.Context) ControlArrayOutput {
	return o
}

func (o ControlArrayOutput) Index(i pulumi.IntInput) ControlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Control {
		return vs[0].([]*Control)[vs[1].(int)]
	}).(ControlOutput)
}

type ControlMapOutput struct{ *pulumi.OutputState }

func (ControlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Control)(nil)).Elem()
}

func (o ControlMapOutput) ToControlMapOutput() ControlMapOutput {
	return o
}

func (o ControlMapOutput) ToControlMapOutputWithContext(ctx context.Context) ControlMapOutput {
	return o
}

func (o ControlMapOutput) MapIndex(k pulumi.StringInput) ControlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Control {
		return vs[0].(map[string]*Control)[vs[1].(string)]
	}).(ControlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ControlInput)(nil)).Elem(), &Control{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControlArrayInput)(nil)).Elem(), ControlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControlMapInput)(nil)).Elem(), ControlMap{})
	pulumi.RegisterOutputType(ControlOutput{})
	pulumi.RegisterOutputType(ControlArrayOutput{})
	pulumi.RegisterOutputType(ControlMapOutput{})
}
