// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auditmanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS Audit Manager Framework.
//
// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/auditmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := auditmanager.NewFramework(ctx, "test", &auditmanager.FrameworkArgs{
//				ControlSets: auditmanager.FrameworkControlSetArray{
//					&auditmanager.FrameworkControlSetArgs{
//						Name: pulumi.String("example"),
//						Controls: auditmanager.FrameworkControlSetControlArray{
//							&auditmanager.FrameworkControlSetControlArgs{
//								Id: pulumi.Any(aws_auditmanager_control.Test.Id),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Audit Manager Framework using the framework `id`. For example:
//
// ```sh
//
//	$ pulumi import aws:auditmanager/framework:Framework example abc123-de45
//
// ```
type Framework struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the framework.
	// * `control_sets[*].id` - Unique identifier for the framework control set.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Compliance type that the new custom framework supports, such as `CIS` or `HIPAA`.
	ComplianceType pulumi.StringPtrOutput `pulumi:"complianceType"`
	// Control sets that are associated with the framework. See `controlSets` below.
	//
	// The following arguments are optional:
	ControlSets FrameworkControlSetArrayOutput `pulumi:"controlSets"`
	// Description of the framework.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Framework type, such as a custom framework or a standard framework.
	FrameworkType pulumi.StringOutput `pulumi:"frameworkType"`
	// Name of the framework.
	Name pulumi.StringOutput `pulumi:"name"`
	// A map of tags to assign to the framework. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewFramework registers a new resource with the given unique name, arguments, and options.
func NewFramework(ctx *pulumi.Context,
	name string, args *FrameworkArgs, opts ...pulumi.ResourceOption) (*Framework, error) {
	if args == nil {
		args = &FrameworkArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Framework
	err := ctx.RegisterResource("aws:auditmanager/framework:Framework", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFramework gets an existing Framework resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFramework(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FrameworkState, opts ...pulumi.ResourceOption) (*Framework, error) {
	var resource Framework
	err := ctx.ReadResource("aws:auditmanager/framework:Framework", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Framework resources.
type frameworkState struct {
	// Amazon Resource Name (ARN) of the framework.
	// * `control_sets[*].id` - Unique identifier for the framework control set.
	Arn *string `pulumi:"arn"`
	// Compliance type that the new custom framework supports, such as `CIS` or `HIPAA`.
	ComplianceType *string `pulumi:"complianceType"`
	// Control sets that are associated with the framework. See `controlSets` below.
	//
	// The following arguments are optional:
	ControlSets []FrameworkControlSet `pulumi:"controlSets"`
	// Description of the framework.
	Description *string `pulumi:"description"`
	// Framework type, such as a custom framework or a standard framework.
	FrameworkType *string `pulumi:"frameworkType"`
	// Name of the framework.
	Name *string `pulumi:"name"`
	// A map of tags to assign to the framework. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type FrameworkState struct {
	// Amazon Resource Name (ARN) of the framework.
	// * `control_sets[*].id` - Unique identifier for the framework control set.
	Arn pulumi.StringPtrInput
	// Compliance type that the new custom framework supports, such as `CIS` or `HIPAA`.
	ComplianceType pulumi.StringPtrInput
	// Control sets that are associated with the framework. See `controlSets` below.
	//
	// The following arguments are optional:
	ControlSets FrameworkControlSetArrayInput
	// Description of the framework.
	Description pulumi.StringPtrInput
	// Framework type, such as a custom framework or a standard framework.
	FrameworkType pulumi.StringPtrInput
	// Name of the framework.
	Name pulumi.StringPtrInput
	// A map of tags to assign to the framework. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumi.StringMapInput
	TagsAll pulumi.StringMapInput
}

func (FrameworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*frameworkState)(nil)).Elem()
}

type frameworkArgs struct {
	// Compliance type that the new custom framework supports, such as `CIS` or `HIPAA`.
	ComplianceType *string `pulumi:"complianceType"`
	// Control sets that are associated with the framework. See `controlSets` below.
	//
	// The following arguments are optional:
	ControlSets []FrameworkControlSet `pulumi:"controlSets"`
	// Description of the framework.
	Description *string `pulumi:"description"`
	// Name of the framework.
	Name *string `pulumi:"name"`
	// A map of tags to assign to the framework. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Framework resource.
type FrameworkArgs struct {
	// Compliance type that the new custom framework supports, such as `CIS` or `HIPAA`.
	ComplianceType pulumi.StringPtrInput
	// Control sets that are associated with the framework. See `controlSets` below.
	//
	// The following arguments are optional:
	ControlSets FrameworkControlSetArrayInput
	// Description of the framework.
	Description pulumi.StringPtrInput
	// Name of the framework.
	Name pulumi.StringPtrInput
	// A map of tags to assign to the framework. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
}

func (FrameworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*frameworkArgs)(nil)).Elem()
}

type FrameworkInput interface {
	pulumi.Input

	ToFrameworkOutput() FrameworkOutput
	ToFrameworkOutputWithContext(ctx context.Context) FrameworkOutput
}

func (*Framework) ElementType() reflect.Type {
	return reflect.TypeOf((**Framework)(nil)).Elem()
}

func (i *Framework) ToFrameworkOutput() FrameworkOutput {
	return i.ToFrameworkOutputWithContext(context.Background())
}

func (i *Framework) ToFrameworkOutputWithContext(ctx context.Context) FrameworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrameworkOutput)
}

func (i *Framework) ToOutput(ctx context.Context) pulumix.Output[*Framework] {
	return pulumix.Output[*Framework]{
		OutputState: i.ToFrameworkOutputWithContext(ctx).OutputState,
	}
}

// FrameworkArrayInput is an input type that accepts FrameworkArray and FrameworkArrayOutput values.
// You can construct a concrete instance of `FrameworkArrayInput` via:
//
//	FrameworkArray{ FrameworkArgs{...} }
type FrameworkArrayInput interface {
	pulumi.Input

	ToFrameworkArrayOutput() FrameworkArrayOutput
	ToFrameworkArrayOutputWithContext(context.Context) FrameworkArrayOutput
}

type FrameworkArray []FrameworkInput

func (FrameworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Framework)(nil)).Elem()
}

func (i FrameworkArray) ToFrameworkArrayOutput() FrameworkArrayOutput {
	return i.ToFrameworkArrayOutputWithContext(context.Background())
}

func (i FrameworkArray) ToFrameworkArrayOutputWithContext(ctx context.Context) FrameworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrameworkArrayOutput)
}

func (i FrameworkArray) ToOutput(ctx context.Context) pulumix.Output[[]*Framework] {
	return pulumix.Output[[]*Framework]{
		OutputState: i.ToFrameworkArrayOutputWithContext(ctx).OutputState,
	}
}

// FrameworkMapInput is an input type that accepts FrameworkMap and FrameworkMapOutput values.
// You can construct a concrete instance of `FrameworkMapInput` via:
//
//	FrameworkMap{ "key": FrameworkArgs{...} }
type FrameworkMapInput interface {
	pulumi.Input

	ToFrameworkMapOutput() FrameworkMapOutput
	ToFrameworkMapOutputWithContext(context.Context) FrameworkMapOutput
}

type FrameworkMap map[string]FrameworkInput

func (FrameworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Framework)(nil)).Elem()
}

func (i FrameworkMap) ToFrameworkMapOutput() FrameworkMapOutput {
	return i.ToFrameworkMapOutputWithContext(context.Background())
}

func (i FrameworkMap) ToFrameworkMapOutputWithContext(ctx context.Context) FrameworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrameworkMapOutput)
}

func (i FrameworkMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Framework] {
	return pulumix.Output[map[string]*Framework]{
		OutputState: i.ToFrameworkMapOutputWithContext(ctx).OutputState,
	}
}

type FrameworkOutput struct{ *pulumi.OutputState }

func (FrameworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Framework)(nil)).Elem()
}

func (o FrameworkOutput) ToFrameworkOutput() FrameworkOutput {
	return o
}

func (o FrameworkOutput) ToFrameworkOutputWithContext(ctx context.Context) FrameworkOutput {
	return o
}

func (o FrameworkOutput) ToOutput(ctx context.Context) pulumix.Output[*Framework] {
	return pulumix.Output[*Framework]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the framework.
// * `control_sets[*].id` - Unique identifier for the framework control set.
func (o FrameworkOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Framework) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Compliance type that the new custom framework supports, such as `CIS` or `HIPAA`.
func (o FrameworkOutput) ComplianceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Framework) pulumi.StringPtrOutput { return v.ComplianceType }).(pulumi.StringPtrOutput)
}

// Control sets that are associated with the framework. See `controlSets` below.
//
// The following arguments are optional:
func (o FrameworkOutput) ControlSets() FrameworkControlSetArrayOutput {
	return o.ApplyT(func(v *Framework) FrameworkControlSetArrayOutput { return v.ControlSets }).(FrameworkControlSetArrayOutput)
}

// Description of the framework.
func (o FrameworkOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Framework) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Framework type, such as a custom framework or a standard framework.
func (o FrameworkOutput) FrameworkType() pulumi.StringOutput {
	return o.ApplyT(func(v *Framework) pulumi.StringOutput { return v.FrameworkType }).(pulumi.StringOutput)
}

// Name of the framework.
func (o FrameworkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Framework) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A map of tags to assign to the framework. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o FrameworkOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Framework) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o FrameworkOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Framework) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type FrameworkArrayOutput struct{ *pulumi.OutputState }

func (FrameworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Framework)(nil)).Elem()
}

func (o FrameworkArrayOutput) ToFrameworkArrayOutput() FrameworkArrayOutput {
	return o
}

func (o FrameworkArrayOutput) ToFrameworkArrayOutputWithContext(ctx context.Context) FrameworkArrayOutput {
	return o
}

func (o FrameworkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Framework] {
	return pulumix.Output[[]*Framework]{
		OutputState: o.OutputState,
	}
}

func (o FrameworkArrayOutput) Index(i pulumi.IntInput) FrameworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Framework {
		return vs[0].([]*Framework)[vs[1].(int)]
	}).(FrameworkOutput)
}

type FrameworkMapOutput struct{ *pulumi.OutputState }

func (FrameworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Framework)(nil)).Elem()
}

func (o FrameworkMapOutput) ToFrameworkMapOutput() FrameworkMapOutput {
	return o
}

func (o FrameworkMapOutput) ToFrameworkMapOutputWithContext(ctx context.Context) FrameworkMapOutput {
	return o
}

func (o FrameworkMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Framework] {
	return pulumix.Output[map[string]*Framework]{
		OutputState: o.OutputState,
	}
}

func (o FrameworkMapOutput) MapIndex(k pulumi.StringInput) FrameworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Framework {
		return vs[0].(map[string]*Framework)[vs[1].(string)]
	}).(FrameworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FrameworkInput)(nil)).Elem(), &Framework{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrameworkArrayInput)(nil)).Elem(), FrameworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrameworkMapInput)(nil)).Elem(), FrameworkMap{})
	pulumi.RegisterOutputType(FrameworkOutput{})
	pulumi.RegisterOutputType(FrameworkArrayOutput{})
	pulumi.RegisterOutputType(FrameworkMapOutput{})
}
