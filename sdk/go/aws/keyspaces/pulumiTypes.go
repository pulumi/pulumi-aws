// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package keyspaces

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TableCapacitySpecification struct {
	// The throughput capacity specified for read operations defined in read capacity units (RCUs).
	ReadCapacityUnits *int `pulumi:"readCapacityUnits"`
	// The read/write throughput capacity mode for a table. Valid values: `PAY_PER_REQUEST`, `PROVISIONED`. The default value is `PAY_PER_REQUEST`.
	ThroughputMode *string `pulumi:"throughputMode"`
	// The throughput capacity specified for write operations defined in write capacity units (WCUs).
	WriteCapacityUnits *int `pulumi:"writeCapacityUnits"`
}

// TableCapacitySpecificationInput is an input type that accepts TableCapacitySpecificationArgs and TableCapacitySpecificationOutput values.
// You can construct a concrete instance of `TableCapacitySpecificationInput` via:
//
//          TableCapacitySpecificationArgs{...}
type TableCapacitySpecificationInput interface {
	pulumi.Input

	ToTableCapacitySpecificationOutput() TableCapacitySpecificationOutput
	ToTableCapacitySpecificationOutputWithContext(context.Context) TableCapacitySpecificationOutput
}

type TableCapacitySpecificationArgs struct {
	// The throughput capacity specified for read operations defined in read capacity units (RCUs).
	ReadCapacityUnits pulumi.IntPtrInput `pulumi:"readCapacityUnits"`
	// The read/write throughput capacity mode for a table. Valid values: `PAY_PER_REQUEST`, `PROVISIONED`. The default value is `PAY_PER_REQUEST`.
	ThroughputMode pulumi.StringPtrInput `pulumi:"throughputMode"`
	// The throughput capacity specified for write operations defined in write capacity units (WCUs).
	WriteCapacityUnits pulumi.IntPtrInput `pulumi:"writeCapacityUnits"`
}

func (TableCapacitySpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableCapacitySpecification)(nil)).Elem()
}

func (i TableCapacitySpecificationArgs) ToTableCapacitySpecificationOutput() TableCapacitySpecificationOutput {
	return i.ToTableCapacitySpecificationOutputWithContext(context.Background())
}

func (i TableCapacitySpecificationArgs) ToTableCapacitySpecificationOutputWithContext(ctx context.Context) TableCapacitySpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableCapacitySpecificationOutput)
}

func (i TableCapacitySpecificationArgs) ToTableCapacitySpecificationPtrOutput() TableCapacitySpecificationPtrOutput {
	return i.ToTableCapacitySpecificationPtrOutputWithContext(context.Background())
}

func (i TableCapacitySpecificationArgs) ToTableCapacitySpecificationPtrOutputWithContext(ctx context.Context) TableCapacitySpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableCapacitySpecificationOutput).ToTableCapacitySpecificationPtrOutputWithContext(ctx)
}

// TableCapacitySpecificationPtrInput is an input type that accepts TableCapacitySpecificationArgs, TableCapacitySpecificationPtr and TableCapacitySpecificationPtrOutput values.
// You can construct a concrete instance of `TableCapacitySpecificationPtrInput` via:
//
//          TableCapacitySpecificationArgs{...}
//
//  or:
//
//          nil
type TableCapacitySpecificationPtrInput interface {
	pulumi.Input

	ToTableCapacitySpecificationPtrOutput() TableCapacitySpecificationPtrOutput
	ToTableCapacitySpecificationPtrOutputWithContext(context.Context) TableCapacitySpecificationPtrOutput
}

type tableCapacitySpecificationPtrType TableCapacitySpecificationArgs

func TableCapacitySpecificationPtr(v *TableCapacitySpecificationArgs) TableCapacitySpecificationPtrInput {
	return (*tableCapacitySpecificationPtrType)(v)
}

func (*tableCapacitySpecificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableCapacitySpecification)(nil)).Elem()
}

func (i *tableCapacitySpecificationPtrType) ToTableCapacitySpecificationPtrOutput() TableCapacitySpecificationPtrOutput {
	return i.ToTableCapacitySpecificationPtrOutputWithContext(context.Background())
}

func (i *tableCapacitySpecificationPtrType) ToTableCapacitySpecificationPtrOutputWithContext(ctx context.Context) TableCapacitySpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableCapacitySpecificationPtrOutput)
}

type TableCapacitySpecificationOutput struct{ *pulumi.OutputState }

func (TableCapacitySpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableCapacitySpecification)(nil)).Elem()
}

func (o TableCapacitySpecificationOutput) ToTableCapacitySpecificationOutput() TableCapacitySpecificationOutput {
	return o
}

func (o TableCapacitySpecificationOutput) ToTableCapacitySpecificationOutputWithContext(ctx context.Context) TableCapacitySpecificationOutput {
	return o
}

func (o TableCapacitySpecificationOutput) ToTableCapacitySpecificationPtrOutput() TableCapacitySpecificationPtrOutput {
	return o.ToTableCapacitySpecificationPtrOutputWithContext(context.Background())
}

func (o TableCapacitySpecificationOutput) ToTableCapacitySpecificationPtrOutputWithContext(ctx context.Context) TableCapacitySpecificationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableCapacitySpecification) *TableCapacitySpecification {
		return &v
	}).(TableCapacitySpecificationPtrOutput)
}

// The throughput capacity specified for read operations defined in read capacity units (RCUs).
func (o TableCapacitySpecificationOutput) ReadCapacityUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableCapacitySpecification) *int { return v.ReadCapacityUnits }).(pulumi.IntPtrOutput)
}

// The read/write throughput capacity mode for a table. Valid values: `PAY_PER_REQUEST`, `PROVISIONED`. The default value is `PAY_PER_REQUEST`.
func (o TableCapacitySpecificationOutput) ThroughputMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableCapacitySpecification) *string { return v.ThroughputMode }).(pulumi.StringPtrOutput)
}

// The throughput capacity specified for write operations defined in write capacity units (WCUs).
func (o TableCapacitySpecificationOutput) WriteCapacityUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableCapacitySpecification) *int { return v.WriteCapacityUnits }).(pulumi.IntPtrOutput)
}

type TableCapacitySpecificationPtrOutput struct{ *pulumi.OutputState }

func (TableCapacitySpecificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableCapacitySpecification)(nil)).Elem()
}

func (o TableCapacitySpecificationPtrOutput) ToTableCapacitySpecificationPtrOutput() TableCapacitySpecificationPtrOutput {
	return o
}

func (o TableCapacitySpecificationPtrOutput) ToTableCapacitySpecificationPtrOutputWithContext(ctx context.Context) TableCapacitySpecificationPtrOutput {
	return o
}

func (o TableCapacitySpecificationPtrOutput) Elem() TableCapacitySpecificationOutput {
	return o.ApplyT(func(v *TableCapacitySpecification) TableCapacitySpecification {
		if v != nil {
			return *v
		}
		var ret TableCapacitySpecification
		return ret
	}).(TableCapacitySpecificationOutput)
}

// The throughput capacity specified for read operations defined in read capacity units (RCUs).
func (o TableCapacitySpecificationPtrOutput) ReadCapacityUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableCapacitySpecification) *int {
		if v == nil {
			return nil
		}
		return v.ReadCapacityUnits
	}).(pulumi.IntPtrOutput)
}

// The read/write throughput capacity mode for a table. Valid values: `PAY_PER_REQUEST`, `PROVISIONED`. The default value is `PAY_PER_REQUEST`.
func (o TableCapacitySpecificationPtrOutput) ThroughputMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableCapacitySpecification) *string {
		if v == nil {
			return nil
		}
		return v.ThroughputMode
	}).(pulumi.StringPtrOutput)
}

// The throughput capacity specified for write operations defined in write capacity units (WCUs).
func (o TableCapacitySpecificationPtrOutput) WriteCapacityUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableCapacitySpecification) *int {
		if v == nil {
			return nil
		}
		return v.WriteCapacityUnits
	}).(pulumi.IntPtrOutput)
}

type TableComment struct {
	// A description of the table.
	Message *string `pulumi:"message"`
}

// TableCommentInput is an input type that accepts TableCommentArgs and TableCommentOutput values.
// You can construct a concrete instance of `TableCommentInput` via:
//
//          TableCommentArgs{...}
type TableCommentInput interface {
	pulumi.Input

	ToTableCommentOutput() TableCommentOutput
	ToTableCommentOutputWithContext(context.Context) TableCommentOutput
}

type TableCommentArgs struct {
	// A description of the table.
	Message pulumi.StringPtrInput `pulumi:"message"`
}

func (TableCommentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableComment)(nil)).Elem()
}

func (i TableCommentArgs) ToTableCommentOutput() TableCommentOutput {
	return i.ToTableCommentOutputWithContext(context.Background())
}

func (i TableCommentArgs) ToTableCommentOutputWithContext(ctx context.Context) TableCommentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableCommentOutput)
}

func (i TableCommentArgs) ToTableCommentPtrOutput() TableCommentPtrOutput {
	return i.ToTableCommentPtrOutputWithContext(context.Background())
}

func (i TableCommentArgs) ToTableCommentPtrOutputWithContext(ctx context.Context) TableCommentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableCommentOutput).ToTableCommentPtrOutputWithContext(ctx)
}

// TableCommentPtrInput is an input type that accepts TableCommentArgs, TableCommentPtr and TableCommentPtrOutput values.
// You can construct a concrete instance of `TableCommentPtrInput` via:
//
//          TableCommentArgs{...}
//
//  or:
//
//          nil
type TableCommentPtrInput interface {
	pulumi.Input

	ToTableCommentPtrOutput() TableCommentPtrOutput
	ToTableCommentPtrOutputWithContext(context.Context) TableCommentPtrOutput
}

type tableCommentPtrType TableCommentArgs

func TableCommentPtr(v *TableCommentArgs) TableCommentPtrInput {
	return (*tableCommentPtrType)(v)
}

func (*tableCommentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableComment)(nil)).Elem()
}

func (i *tableCommentPtrType) ToTableCommentPtrOutput() TableCommentPtrOutput {
	return i.ToTableCommentPtrOutputWithContext(context.Background())
}

func (i *tableCommentPtrType) ToTableCommentPtrOutputWithContext(ctx context.Context) TableCommentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableCommentPtrOutput)
}

type TableCommentOutput struct{ *pulumi.OutputState }

func (TableCommentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableComment)(nil)).Elem()
}

func (o TableCommentOutput) ToTableCommentOutput() TableCommentOutput {
	return o
}

func (o TableCommentOutput) ToTableCommentOutputWithContext(ctx context.Context) TableCommentOutput {
	return o
}

func (o TableCommentOutput) ToTableCommentPtrOutput() TableCommentPtrOutput {
	return o.ToTableCommentPtrOutputWithContext(context.Background())
}

func (o TableCommentOutput) ToTableCommentPtrOutputWithContext(ctx context.Context) TableCommentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableComment) *TableComment {
		return &v
	}).(TableCommentPtrOutput)
}

// A description of the table.
func (o TableCommentOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableComment) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type TableCommentPtrOutput struct{ *pulumi.OutputState }

func (TableCommentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableComment)(nil)).Elem()
}

func (o TableCommentPtrOutput) ToTableCommentPtrOutput() TableCommentPtrOutput {
	return o
}

func (o TableCommentPtrOutput) ToTableCommentPtrOutputWithContext(ctx context.Context) TableCommentPtrOutput {
	return o
}

func (o TableCommentPtrOutput) Elem() TableCommentOutput {
	return o.ApplyT(func(v *TableComment) TableComment {
		if v != nil {
			return *v
		}
		var ret TableComment
		return ret
	}).(TableCommentOutput)
}

// A description of the table.
func (o TableCommentPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableComment) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

type TableEncryptionSpecification struct {
	// The Amazon Resource Name (ARN) of the customer managed KMS key.
	KmsKeyIdentifier *string `pulumi:"kmsKeyIdentifier"`
	// The encryption option specified for the table. Valid values: `AWS_OWNED_KMS_KEY`, `CUSTOMER_MANAGED_KMS_KEY`. The default value is `AWS_OWNED_KMS_KEY`.
	Type *string `pulumi:"type"`
}

// TableEncryptionSpecificationInput is an input type that accepts TableEncryptionSpecificationArgs and TableEncryptionSpecificationOutput values.
// You can construct a concrete instance of `TableEncryptionSpecificationInput` via:
//
//          TableEncryptionSpecificationArgs{...}
type TableEncryptionSpecificationInput interface {
	pulumi.Input

	ToTableEncryptionSpecificationOutput() TableEncryptionSpecificationOutput
	ToTableEncryptionSpecificationOutputWithContext(context.Context) TableEncryptionSpecificationOutput
}

type TableEncryptionSpecificationArgs struct {
	// The Amazon Resource Name (ARN) of the customer managed KMS key.
	KmsKeyIdentifier pulumi.StringPtrInput `pulumi:"kmsKeyIdentifier"`
	// The encryption option specified for the table. Valid values: `AWS_OWNED_KMS_KEY`, `CUSTOMER_MANAGED_KMS_KEY`. The default value is `AWS_OWNED_KMS_KEY`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (TableEncryptionSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableEncryptionSpecification)(nil)).Elem()
}

func (i TableEncryptionSpecificationArgs) ToTableEncryptionSpecificationOutput() TableEncryptionSpecificationOutput {
	return i.ToTableEncryptionSpecificationOutputWithContext(context.Background())
}

func (i TableEncryptionSpecificationArgs) ToTableEncryptionSpecificationOutputWithContext(ctx context.Context) TableEncryptionSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableEncryptionSpecificationOutput)
}

func (i TableEncryptionSpecificationArgs) ToTableEncryptionSpecificationPtrOutput() TableEncryptionSpecificationPtrOutput {
	return i.ToTableEncryptionSpecificationPtrOutputWithContext(context.Background())
}

func (i TableEncryptionSpecificationArgs) ToTableEncryptionSpecificationPtrOutputWithContext(ctx context.Context) TableEncryptionSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableEncryptionSpecificationOutput).ToTableEncryptionSpecificationPtrOutputWithContext(ctx)
}

// TableEncryptionSpecificationPtrInput is an input type that accepts TableEncryptionSpecificationArgs, TableEncryptionSpecificationPtr and TableEncryptionSpecificationPtrOutput values.
// You can construct a concrete instance of `TableEncryptionSpecificationPtrInput` via:
//
//          TableEncryptionSpecificationArgs{...}
//
//  or:
//
//          nil
type TableEncryptionSpecificationPtrInput interface {
	pulumi.Input

	ToTableEncryptionSpecificationPtrOutput() TableEncryptionSpecificationPtrOutput
	ToTableEncryptionSpecificationPtrOutputWithContext(context.Context) TableEncryptionSpecificationPtrOutput
}

type tableEncryptionSpecificationPtrType TableEncryptionSpecificationArgs

func TableEncryptionSpecificationPtr(v *TableEncryptionSpecificationArgs) TableEncryptionSpecificationPtrInput {
	return (*tableEncryptionSpecificationPtrType)(v)
}

func (*tableEncryptionSpecificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableEncryptionSpecification)(nil)).Elem()
}

func (i *tableEncryptionSpecificationPtrType) ToTableEncryptionSpecificationPtrOutput() TableEncryptionSpecificationPtrOutput {
	return i.ToTableEncryptionSpecificationPtrOutputWithContext(context.Background())
}

func (i *tableEncryptionSpecificationPtrType) ToTableEncryptionSpecificationPtrOutputWithContext(ctx context.Context) TableEncryptionSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableEncryptionSpecificationPtrOutput)
}

type TableEncryptionSpecificationOutput struct{ *pulumi.OutputState }

func (TableEncryptionSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableEncryptionSpecification)(nil)).Elem()
}

func (o TableEncryptionSpecificationOutput) ToTableEncryptionSpecificationOutput() TableEncryptionSpecificationOutput {
	return o
}

func (o TableEncryptionSpecificationOutput) ToTableEncryptionSpecificationOutputWithContext(ctx context.Context) TableEncryptionSpecificationOutput {
	return o
}

func (o TableEncryptionSpecificationOutput) ToTableEncryptionSpecificationPtrOutput() TableEncryptionSpecificationPtrOutput {
	return o.ToTableEncryptionSpecificationPtrOutputWithContext(context.Background())
}

func (o TableEncryptionSpecificationOutput) ToTableEncryptionSpecificationPtrOutputWithContext(ctx context.Context) TableEncryptionSpecificationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableEncryptionSpecification) *TableEncryptionSpecification {
		return &v
	}).(TableEncryptionSpecificationPtrOutput)
}

// The Amazon Resource Name (ARN) of the customer managed KMS key.
func (o TableEncryptionSpecificationOutput) KmsKeyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableEncryptionSpecification) *string { return v.KmsKeyIdentifier }).(pulumi.StringPtrOutput)
}

// The encryption option specified for the table. Valid values: `AWS_OWNED_KMS_KEY`, `CUSTOMER_MANAGED_KMS_KEY`. The default value is `AWS_OWNED_KMS_KEY`.
func (o TableEncryptionSpecificationOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableEncryptionSpecification) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type TableEncryptionSpecificationPtrOutput struct{ *pulumi.OutputState }

func (TableEncryptionSpecificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableEncryptionSpecification)(nil)).Elem()
}

func (o TableEncryptionSpecificationPtrOutput) ToTableEncryptionSpecificationPtrOutput() TableEncryptionSpecificationPtrOutput {
	return o
}

func (o TableEncryptionSpecificationPtrOutput) ToTableEncryptionSpecificationPtrOutputWithContext(ctx context.Context) TableEncryptionSpecificationPtrOutput {
	return o
}

func (o TableEncryptionSpecificationPtrOutput) Elem() TableEncryptionSpecificationOutput {
	return o.ApplyT(func(v *TableEncryptionSpecification) TableEncryptionSpecification {
		if v != nil {
			return *v
		}
		var ret TableEncryptionSpecification
		return ret
	}).(TableEncryptionSpecificationOutput)
}

// The Amazon Resource Name (ARN) of the customer managed KMS key.
func (o TableEncryptionSpecificationPtrOutput) KmsKeyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableEncryptionSpecification) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyIdentifier
	}).(pulumi.StringPtrOutput)
}

// The encryption option specified for the table. Valid values: `AWS_OWNED_KMS_KEY`, `CUSTOMER_MANAGED_KMS_KEY`. The default value is `AWS_OWNED_KMS_KEY`.
func (o TableEncryptionSpecificationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableEncryptionSpecification) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type TablePointInTimeRecovery struct {
	// Valid values: `ENABLED`, `DISABLED`. The default value is `DISABLED`.
	Status *string `pulumi:"status"`
}

// TablePointInTimeRecoveryInput is an input type that accepts TablePointInTimeRecoveryArgs and TablePointInTimeRecoveryOutput values.
// You can construct a concrete instance of `TablePointInTimeRecoveryInput` via:
//
//          TablePointInTimeRecoveryArgs{...}
type TablePointInTimeRecoveryInput interface {
	pulumi.Input

	ToTablePointInTimeRecoveryOutput() TablePointInTimeRecoveryOutput
	ToTablePointInTimeRecoveryOutputWithContext(context.Context) TablePointInTimeRecoveryOutput
}

type TablePointInTimeRecoveryArgs struct {
	// Valid values: `ENABLED`, `DISABLED`. The default value is `DISABLED`.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (TablePointInTimeRecoveryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TablePointInTimeRecovery)(nil)).Elem()
}

func (i TablePointInTimeRecoveryArgs) ToTablePointInTimeRecoveryOutput() TablePointInTimeRecoveryOutput {
	return i.ToTablePointInTimeRecoveryOutputWithContext(context.Background())
}

func (i TablePointInTimeRecoveryArgs) ToTablePointInTimeRecoveryOutputWithContext(ctx context.Context) TablePointInTimeRecoveryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TablePointInTimeRecoveryOutput)
}

func (i TablePointInTimeRecoveryArgs) ToTablePointInTimeRecoveryPtrOutput() TablePointInTimeRecoveryPtrOutput {
	return i.ToTablePointInTimeRecoveryPtrOutputWithContext(context.Background())
}

func (i TablePointInTimeRecoveryArgs) ToTablePointInTimeRecoveryPtrOutputWithContext(ctx context.Context) TablePointInTimeRecoveryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TablePointInTimeRecoveryOutput).ToTablePointInTimeRecoveryPtrOutputWithContext(ctx)
}

// TablePointInTimeRecoveryPtrInput is an input type that accepts TablePointInTimeRecoveryArgs, TablePointInTimeRecoveryPtr and TablePointInTimeRecoveryPtrOutput values.
// You can construct a concrete instance of `TablePointInTimeRecoveryPtrInput` via:
//
//          TablePointInTimeRecoveryArgs{...}
//
//  or:
//
//          nil
type TablePointInTimeRecoveryPtrInput interface {
	pulumi.Input

	ToTablePointInTimeRecoveryPtrOutput() TablePointInTimeRecoveryPtrOutput
	ToTablePointInTimeRecoveryPtrOutputWithContext(context.Context) TablePointInTimeRecoveryPtrOutput
}

type tablePointInTimeRecoveryPtrType TablePointInTimeRecoveryArgs

func TablePointInTimeRecoveryPtr(v *TablePointInTimeRecoveryArgs) TablePointInTimeRecoveryPtrInput {
	return (*tablePointInTimeRecoveryPtrType)(v)
}

func (*tablePointInTimeRecoveryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TablePointInTimeRecovery)(nil)).Elem()
}

func (i *tablePointInTimeRecoveryPtrType) ToTablePointInTimeRecoveryPtrOutput() TablePointInTimeRecoveryPtrOutput {
	return i.ToTablePointInTimeRecoveryPtrOutputWithContext(context.Background())
}

func (i *tablePointInTimeRecoveryPtrType) ToTablePointInTimeRecoveryPtrOutputWithContext(ctx context.Context) TablePointInTimeRecoveryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TablePointInTimeRecoveryPtrOutput)
}

type TablePointInTimeRecoveryOutput struct{ *pulumi.OutputState }

func (TablePointInTimeRecoveryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TablePointInTimeRecovery)(nil)).Elem()
}

func (o TablePointInTimeRecoveryOutput) ToTablePointInTimeRecoveryOutput() TablePointInTimeRecoveryOutput {
	return o
}

func (o TablePointInTimeRecoveryOutput) ToTablePointInTimeRecoveryOutputWithContext(ctx context.Context) TablePointInTimeRecoveryOutput {
	return o
}

func (o TablePointInTimeRecoveryOutput) ToTablePointInTimeRecoveryPtrOutput() TablePointInTimeRecoveryPtrOutput {
	return o.ToTablePointInTimeRecoveryPtrOutputWithContext(context.Background())
}

func (o TablePointInTimeRecoveryOutput) ToTablePointInTimeRecoveryPtrOutputWithContext(ctx context.Context) TablePointInTimeRecoveryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TablePointInTimeRecovery) *TablePointInTimeRecovery {
		return &v
	}).(TablePointInTimeRecoveryPtrOutput)
}

// Valid values: `ENABLED`, `DISABLED`. The default value is `DISABLED`.
func (o TablePointInTimeRecoveryOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TablePointInTimeRecovery) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type TablePointInTimeRecoveryPtrOutput struct{ *pulumi.OutputState }

func (TablePointInTimeRecoveryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TablePointInTimeRecovery)(nil)).Elem()
}

func (o TablePointInTimeRecoveryPtrOutput) ToTablePointInTimeRecoveryPtrOutput() TablePointInTimeRecoveryPtrOutput {
	return o
}

func (o TablePointInTimeRecoveryPtrOutput) ToTablePointInTimeRecoveryPtrOutputWithContext(ctx context.Context) TablePointInTimeRecoveryPtrOutput {
	return o
}

func (o TablePointInTimeRecoveryPtrOutput) Elem() TablePointInTimeRecoveryOutput {
	return o.ApplyT(func(v *TablePointInTimeRecovery) TablePointInTimeRecovery {
		if v != nil {
			return *v
		}
		var ret TablePointInTimeRecovery
		return ret
	}).(TablePointInTimeRecoveryOutput)
}

// Valid values: `ENABLED`, `DISABLED`. The default value is `DISABLED`.
func (o TablePointInTimeRecoveryPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TablePointInTimeRecovery) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

type TableSchemaDefinition struct {
	// The columns that are part of the clustering key of the table.
	ClusteringKeys []TableSchemaDefinitionClusteringKey `pulumi:"clusteringKeys"`
	// The regular columns of the table.
	Columns []TableSchemaDefinitionColumn `pulumi:"columns"`
	// The columns that are part of the partition key of the table .
	PartitionKeys []TableSchemaDefinitionPartitionKey `pulumi:"partitionKeys"`
	// The columns that have been defined as `STATIC`. Static columns store values that are shared by all rows in the same partition.
	StaticColumns []TableSchemaDefinitionStaticColumn `pulumi:"staticColumns"`
}

// TableSchemaDefinitionInput is an input type that accepts TableSchemaDefinitionArgs and TableSchemaDefinitionOutput values.
// You can construct a concrete instance of `TableSchemaDefinitionInput` via:
//
//          TableSchemaDefinitionArgs{...}
type TableSchemaDefinitionInput interface {
	pulumi.Input

	ToTableSchemaDefinitionOutput() TableSchemaDefinitionOutput
	ToTableSchemaDefinitionOutputWithContext(context.Context) TableSchemaDefinitionOutput
}

type TableSchemaDefinitionArgs struct {
	// The columns that are part of the clustering key of the table.
	ClusteringKeys TableSchemaDefinitionClusteringKeyArrayInput `pulumi:"clusteringKeys"`
	// The regular columns of the table.
	Columns TableSchemaDefinitionColumnArrayInput `pulumi:"columns"`
	// The columns that are part of the partition key of the table .
	PartitionKeys TableSchemaDefinitionPartitionKeyArrayInput `pulumi:"partitionKeys"`
	// The columns that have been defined as `STATIC`. Static columns store values that are shared by all rows in the same partition.
	StaticColumns TableSchemaDefinitionStaticColumnArrayInput `pulumi:"staticColumns"`
}

func (TableSchemaDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchemaDefinition)(nil)).Elem()
}

func (i TableSchemaDefinitionArgs) ToTableSchemaDefinitionOutput() TableSchemaDefinitionOutput {
	return i.ToTableSchemaDefinitionOutputWithContext(context.Background())
}

func (i TableSchemaDefinitionArgs) ToTableSchemaDefinitionOutputWithContext(ctx context.Context) TableSchemaDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaDefinitionOutput)
}

func (i TableSchemaDefinitionArgs) ToTableSchemaDefinitionPtrOutput() TableSchemaDefinitionPtrOutput {
	return i.ToTableSchemaDefinitionPtrOutputWithContext(context.Background())
}

func (i TableSchemaDefinitionArgs) ToTableSchemaDefinitionPtrOutputWithContext(ctx context.Context) TableSchemaDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaDefinitionOutput).ToTableSchemaDefinitionPtrOutputWithContext(ctx)
}

// TableSchemaDefinitionPtrInput is an input type that accepts TableSchemaDefinitionArgs, TableSchemaDefinitionPtr and TableSchemaDefinitionPtrOutput values.
// You can construct a concrete instance of `TableSchemaDefinitionPtrInput` via:
//
//          TableSchemaDefinitionArgs{...}
//
//  or:
//
//          nil
type TableSchemaDefinitionPtrInput interface {
	pulumi.Input

	ToTableSchemaDefinitionPtrOutput() TableSchemaDefinitionPtrOutput
	ToTableSchemaDefinitionPtrOutputWithContext(context.Context) TableSchemaDefinitionPtrOutput
}

type tableSchemaDefinitionPtrType TableSchemaDefinitionArgs

func TableSchemaDefinitionPtr(v *TableSchemaDefinitionArgs) TableSchemaDefinitionPtrInput {
	return (*tableSchemaDefinitionPtrType)(v)
}

func (*tableSchemaDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableSchemaDefinition)(nil)).Elem()
}

func (i *tableSchemaDefinitionPtrType) ToTableSchemaDefinitionPtrOutput() TableSchemaDefinitionPtrOutput {
	return i.ToTableSchemaDefinitionPtrOutputWithContext(context.Background())
}

func (i *tableSchemaDefinitionPtrType) ToTableSchemaDefinitionPtrOutputWithContext(ctx context.Context) TableSchemaDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaDefinitionPtrOutput)
}

type TableSchemaDefinitionOutput struct{ *pulumi.OutputState }

func (TableSchemaDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchemaDefinition)(nil)).Elem()
}

func (o TableSchemaDefinitionOutput) ToTableSchemaDefinitionOutput() TableSchemaDefinitionOutput {
	return o
}

func (o TableSchemaDefinitionOutput) ToTableSchemaDefinitionOutputWithContext(ctx context.Context) TableSchemaDefinitionOutput {
	return o
}

func (o TableSchemaDefinitionOutput) ToTableSchemaDefinitionPtrOutput() TableSchemaDefinitionPtrOutput {
	return o.ToTableSchemaDefinitionPtrOutputWithContext(context.Background())
}

func (o TableSchemaDefinitionOutput) ToTableSchemaDefinitionPtrOutputWithContext(ctx context.Context) TableSchemaDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableSchemaDefinition) *TableSchemaDefinition {
		return &v
	}).(TableSchemaDefinitionPtrOutput)
}

// The columns that are part of the clustering key of the table.
func (o TableSchemaDefinitionOutput) ClusteringKeys() TableSchemaDefinitionClusteringKeyArrayOutput {
	return o.ApplyT(func(v TableSchemaDefinition) []TableSchemaDefinitionClusteringKey { return v.ClusteringKeys }).(TableSchemaDefinitionClusteringKeyArrayOutput)
}

// The regular columns of the table.
func (o TableSchemaDefinitionOutput) Columns() TableSchemaDefinitionColumnArrayOutput {
	return o.ApplyT(func(v TableSchemaDefinition) []TableSchemaDefinitionColumn { return v.Columns }).(TableSchemaDefinitionColumnArrayOutput)
}

// The columns that are part of the partition key of the table .
func (o TableSchemaDefinitionOutput) PartitionKeys() TableSchemaDefinitionPartitionKeyArrayOutput {
	return o.ApplyT(func(v TableSchemaDefinition) []TableSchemaDefinitionPartitionKey { return v.PartitionKeys }).(TableSchemaDefinitionPartitionKeyArrayOutput)
}

// The columns that have been defined as `STATIC`. Static columns store values that are shared by all rows in the same partition.
func (o TableSchemaDefinitionOutput) StaticColumns() TableSchemaDefinitionStaticColumnArrayOutput {
	return o.ApplyT(func(v TableSchemaDefinition) []TableSchemaDefinitionStaticColumn { return v.StaticColumns }).(TableSchemaDefinitionStaticColumnArrayOutput)
}

type TableSchemaDefinitionPtrOutput struct{ *pulumi.OutputState }

func (TableSchemaDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableSchemaDefinition)(nil)).Elem()
}

func (o TableSchemaDefinitionPtrOutput) ToTableSchemaDefinitionPtrOutput() TableSchemaDefinitionPtrOutput {
	return o
}

func (o TableSchemaDefinitionPtrOutput) ToTableSchemaDefinitionPtrOutputWithContext(ctx context.Context) TableSchemaDefinitionPtrOutput {
	return o
}

func (o TableSchemaDefinitionPtrOutput) Elem() TableSchemaDefinitionOutput {
	return o.ApplyT(func(v *TableSchemaDefinition) TableSchemaDefinition {
		if v != nil {
			return *v
		}
		var ret TableSchemaDefinition
		return ret
	}).(TableSchemaDefinitionOutput)
}

// The columns that are part of the clustering key of the table.
func (o TableSchemaDefinitionPtrOutput) ClusteringKeys() TableSchemaDefinitionClusteringKeyArrayOutput {
	return o.ApplyT(func(v *TableSchemaDefinition) []TableSchemaDefinitionClusteringKey {
		if v == nil {
			return nil
		}
		return v.ClusteringKeys
	}).(TableSchemaDefinitionClusteringKeyArrayOutput)
}

// The regular columns of the table.
func (o TableSchemaDefinitionPtrOutput) Columns() TableSchemaDefinitionColumnArrayOutput {
	return o.ApplyT(func(v *TableSchemaDefinition) []TableSchemaDefinitionColumn {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(TableSchemaDefinitionColumnArrayOutput)
}

// The columns that are part of the partition key of the table .
func (o TableSchemaDefinitionPtrOutput) PartitionKeys() TableSchemaDefinitionPartitionKeyArrayOutput {
	return o.ApplyT(func(v *TableSchemaDefinition) []TableSchemaDefinitionPartitionKey {
		if v == nil {
			return nil
		}
		return v.PartitionKeys
	}).(TableSchemaDefinitionPartitionKeyArrayOutput)
}

// The columns that have been defined as `STATIC`. Static columns store values that are shared by all rows in the same partition.
func (o TableSchemaDefinitionPtrOutput) StaticColumns() TableSchemaDefinitionStaticColumnArrayOutput {
	return o.ApplyT(func(v *TableSchemaDefinition) []TableSchemaDefinitionStaticColumn {
		if v == nil {
			return nil
		}
		return v.StaticColumns
	}).(TableSchemaDefinitionStaticColumnArrayOutput)
}

type TableSchemaDefinitionClusteringKey struct {
	// The name of the clustering key column.
	Name string `pulumi:"name"`
	// The order modifier. Valid values: `ASC`, `DESC`.
	OrderBy string `pulumi:"orderBy"`
}

// TableSchemaDefinitionClusteringKeyInput is an input type that accepts TableSchemaDefinitionClusteringKeyArgs and TableSchemaDefinitionClusteringKeyOutput values.
// You can construct a concrete instance of `TableSchemaDefinitionClusteringKeyInput` via:
//
//          TableSchemaDefinitionClusteringKeyArgs{...}
type TableSchemaDefinitionClusteringKeyInput interface {
	pulumi.Input

	ToTableSchemaDefinitionClusteringKeyOutput() TableSchemaDefinitionClusteringKeyOutput
	ToTableSchemaDefinitionClusteringKeyOutputWithContext(context.Context) TableSchemaDefinitionClusteringKeyOutput
}

type TableSchemaDefinitionClusteringKeyArgs struct {
	// The name of the clustering key column.
	Name pulumi.StringInput `pulumi:"name"`
	// The order modifier. Valid values: `ASC`, `DESC`.
	OrderBy pulumi.StringInput `pulumi:"orderBy"`
}

func (TableSchemaDefinitionClusteringKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchemaDefinitionClusteringKey)(nil)).Elem()
}

func (i TableSchemaDefinitionClusteringKeyArgs) ToTableSchemaDefinitionClusteringKeyOutput() TableSchemaDefinitionClusteringKeyOutput {
	return i.ToTableSchemaDefinitionClusteringKeyOutputWithContext(context.Background())
}

func (i TableSchemaDefinitionClusteringKeyArgs) ToTableSchemaDefinitionClusteringKeyOutputWithContext(ctx context.Context) TableSchemaDefinitionClusteringKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaDefinitionClusteringKeyOutput)
}

// TableSchemaDefinitionClusteringKeyArrayInput is an input type that accepts TableSchemaDefinitionClusteringKeyArray and TableSchemaDefinitionClusteringKeyArrayOutput values.
// You can construct a concrete instance of `TableSchemaDefinitionClusteringKeyArrayInput` via:
//
//          TableSchemaDefinitionClusteringKeyArray{ TableSchemaDefinitionClusteringKeyArgs{...} }
type TableSchemaDefinitionClusteringKeyArrayInput interface {
	pulumi.Input

	ToTableSchemaDefinitionClusteringKeyArrayOutput() TableSchemaDefinitionClusteringKeyArrayOutput
	ToTableSchemaDefinitionClusteringKeyArrayOutputWithContext(context.Context) TableSchemaDefinitionClusteringKeyArrayOutput
}

type TableSchemaDefinitionClusteringKeyArray []TableSchemaDefinitionClusteringKeyInput

func (TableSchemaDefinitionClusteringKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableSchemaDefinitionClusteringKey)(nil)).Elem()
}

func (i TableSchemaDefinitionClusteringKeyArray) ToTableSchemaDefinitionClusteringKeyArrayOutput() TableSchemaDefinitionClusteringKeyArrayOutput {
	return i.ToTableSchemaDefinitionClusteringKeyArrayOutputWithContext(context.Background())
}

func (i TableSchemaDefinitionClusteringKeyArray) ToTableSchemaDefinitionClusteringKeyArrayOutputWithContext(ctx context.Context) TableSchemaDefinitionClusteringKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaDefinitionClusteringKeyArrayOutput)
}

type TableSchemaDefinitionClusteringKeyOutput struct{ *pulumi.OutputState }

func (TableSchemaDefinitionClusteringKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchemaDefinitionClusteringKey)(nil)).Elem()
}

func (o TableSchemaDefinitionClusteringKeyOutput) ToTableSchemaDefinitionClusteringKeyOutput() TableSchemaDefinitionClusteringKeyOutput {
	return o
}

func (o TableSchemaDefinitionClusteringKeyOutput) ToTableSchemaDefinitionClusteringKeyOutputWithContext(ctx context.Context) TableSchemaDefinitionClusteringKeyOutput {
	return o
}

// The name of the clustering key column.
func (o TableSchemaDefinitionClusteringKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TableSchemaDefinitionClusteringKey) string { return v.Name }).(pulumi.StringOutput)
}

// The order modifier. Valid values: `ASC`, `DESC`.
func (o TableSchemaDefinitionClusteringKeyOutput) OrderBy() pulumi.StringOutput {
	return o.ApplyT(func(v TableSchemaDefinitionClusteringKey) string { return v.OrderBy }).(pulumi.StringOutput)
}

type TableSchemaDefinitionClusteringKeyArrayOutput struct{ *pulumi.OutputState }

func (TableSchemaDefinitionClusteringKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableSchemaDefinitionClusteringKey)(nil)).Elem()
}

func (o TableSchemaDefinitionClusteringKeyArrayOutput) ToTableSchemaDefinitionClusteringKeyArrayOutput() TableSchemaDefinitionClusteringKeyArrayOutput {
	return o
}

func (o TableSchemaDefinitionClusteringKeyArrayOutput) ToTableSchemaDefinitionClusteringKeyArrayOutputWithContext(ctx context.Context) TableSchemaDefinitionClusteringKeyArrayOutput {
	return o
}

func (o TableSchemaDefinitionClusteringKeyArrayOutput) Index(i pulumi.IntInput) TableSchemaDefinitionClusteringKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableSchemaDefinitionClusteringKey {
		return vs[0].([]TableSchemaDefinitionClusteringKey)[vs[1].(int)]
	}).(TableSchemaDefinitionClusteringKeyOutput)
}

type TableSchemaDefinitionColumn struct {
	// The name of the column.
	Name string `pulumi:"name"`
	// The data type of the column. See the [Developer Guide](https://docs.aws.amazon.com/keyspaces/latest/devguide/cql.elements.html#cql.data-types) for a list of available data types.
	Type string `pulumi:"type"`
}

// TableSchemaDefinitionColumnInput is an input type that accepts TableSchemaDefinitionColumnArgs and TableSchemaDefinitionColumnOutput values.
// You can construct a concrete instance of `TableSchemaDefinitionColumnInput` via:
//
//          TableSchemaDefinitionColumnArgs{...}
type TableSchemaDefinitionColumnInput interface {
	pulumi.Input

	ToTableSchemaDefinitionColumnOutput() TableSchemaDefinitionColumnOutput
	ToTableSchemaDefinitionColumnOutputWithContext(context.Context) TableSchemaDefinitionColumnOutput
}

type TableSchemaDefinitionColumnArgs struct {
	// The name of the column.
	Name pulumi.StringInput `pulumi:"name"`
	// The data type of the column. See the [Developer Guide](https://docs.aws.amazon.com/keyspaces/latest/devguide/cql.elements.html#cql.data-types) for a list of available data types.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TableSchemaDefinitionColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchemaDefinitionColumn)(nil)).Elem()
}

func (i TableSchemaDefinitionColumnArgs) ToTableSchemaDefinitionColumnOutput() TableSchemaDefinitionColumnOutput {
	return i.ToTableSchemaDefinitionColumnOutputWithContext(context.Background())
}

func (i TableSchemaDefinitionColumnArgs) ToTableSchemaDefinitionColumnOutputWithContext(ctx context.Context) TableSchemaDefinitionColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaDefinitionColumnOutput)
}

// TableSchemaDefinitionColumnArrayInput is an input type that accepts TableSchemaDefinitionColumnArray and TableSchemaDefinitionColumnArrayOutput values.
// You can construct a concrete instance of `TableSchemaDefinitionColumnArrayInput` via:
//
//          TableSchemaDefinitionColumnArray{ TableSchemaDefinitionColumnArgs{...} }
type TableSchemaDefinitionColumnArrayInput interface {
	pulumi.Input

	ToTableSchemaDefinitionColumnArrayOutput() TableSchemaDefinitionColumnArrayOutput
	ToTableSchemaDefinitionColumnArrayOutputWithContext(context.Context) TableSchemaDefinitionColumnArrayOutput
}

type TableSchemaDefinitionColumnArray []TableSchemaDefinitionColumnInput

func (TableSchemaDefinitionColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableSchemaDefinitionColumn)(nil)).Elem()
}

func (i TableSchemaDefinitionColumnArray) ToTableSchemaDefinitionColumnArrayOutput() TableSchemaDefinitionColumnArrayOutput {
	return i.ToTableSchemaDefinitionColumnArrayOutputWithContext(context.Background())
}

func (i TableSchemaDefinitionColumnArray) ToTableSchemaDefinitionColumnArrayOutputWithContext(ctx context.Context) TableSchemaDefinitionColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaDefinitionColumnArrayOutput)
}

type TableSchemaDefinitionColumnOutput struct{ *pulumi.OutputState }

func (TableSchemaDefinitionColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchemaDefinitionColumn)(nil)).Elem()
}

func (o TableSchemaDefinitionColumnOutput) ToTableSchemaDefinitionColumnOutput() TableSchemaDefinitionColumnOutput {
	return o
}

func (o TableSchemaDefinitionColumnOutput) ToTableSchemaDefinitionColumnOutputWithContext(ctx context.Context) TableSchemaDefinitionColumnOutput {
	return o
}

// The name of the column.
func (o TableSchemaDefinitionColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TableSchemaDefinitionColumn) string { return v.Name }).(pulumi.StringOutput)
}

// The data type of the column. See the [Developer Guide](https://docs.aws.amazon.com/keyspaces/latest/devguide/cql.elements.html#cql.data-types) for a list of available data types.
func (o TableSchemaDefinitionColumnOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TableSchemaDefinitionColumn) string { return v.Type }).(pulumi.StringOutput)
}

type TableSchemaDefinitionColumnArrayOutput struct{ *pulumi.OutputState }

func (TableSchemaDefinitionColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableSchemaDefinitionColumn)(nil)).Elem()
}

func (o TableSchemaDefinitionColumnArrayOutput) ToTableSchemaDefinitionColumnArrayOutput() TableSchemaDefinitionColumnArrayOutput {
	return o
}

func (o TableSchemaDefinitionColumnArrayOutput) ToTableSchemaDefinitionColumnArrayOutputWithContext(ctx context.Context) TableSchemaDefinitionColumnArrayOutput {
	return o
}

func (o TableSchemaDefinitionColumnArrayOutput) Index(i pulumi.IntInput) TableSchemaDefinitionColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableSchemaDefinitionColumn {
		return vs[0].([]TableSchemaDefinitionColumn)[vs[1].(int)]
	}).(TableSchemaDefinitionColumnOutput)
}

type TableSchemaDefinitionPartitionKey struct {
	// The name of the partition key column.
	Name string `pulumi:"name"`
}

// TableSchemaDefinitionPartitionKeyInput is an input type that accepts TableSchemaDefinitionPartitionKeyArgs and TableSchemaDefinitionPartitionKeyOutput values.
// You can construct a concrete instance of `TableSchemaDefinitionPartitionKeyInput` via:
//
//          TableSchemaDefinitionPartitionKeyArgs{...}
type TableSchemaDefinitionPartitionKeyInput interface {
	pulumi.Input

	ToTableSchemaDefinitionPartitionKeyOutput() TableSchemaDefinitionPartitionKeyOutput
	ToTableSchemaDefinitionPartitionKeyOutputWithContext(context.Context) TableSchemaDefinitionPartitionKeyOutput
}

type TableSchemaDefinitionPartitionKeyArgs struct {
	// The name of the partition key column.
	Name pulumi.StringInput `pulumi:"name"`
}

func (TableSchemaDefinitionPartitionKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchemaDefinitionPartitionKey)(nil)).Elem()
}

func (i TableSchemaDefinitionPartitionKeyArgs) ToTableSchemaDefinitionPartitionKeyOutput() TableSchemaDefinitionPartitionKeyOutput {
	return i.ToTableSchemaDefinitionPartitionKeyOutputWithContext(context.Background())
}

func (i TableSchemaDefinitionPartitionKeyArgs) ToTableSchemaDefinitionPartitionKeyOutputWithContext(ctx context.Context) TableSchemaDefinitionPartitionKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaDefinitionPartitionKeyOutput)
}

// TableSchemaDefinitionPartitionKeyArrayInput is an input type that accepts TableSchemaDefinitionPartitionKeyArray and TableSchemaDefinitionPartitionKeyArrayOutput values.
// You can construct a concrete instance of `TableSchemaDefinitionPartitionKeyArrayInput` via:
//
//          TableSchemaDefinitionPartitionKeyArray{ TableSchemaDefinitionPartitionKeyArgs{...} }
type TableSchemaDefinitionPartitionKeyArrayInput interface {
	pulumi.Input

	ToTableSchemaDefinitionPartitionKeyArrayOutput() TableSchemaDefinitionPartitionKeyArrayOutput
	ToTableSchemaDefinitionPartitionKeyArrayOutputWithContext(context.Context) TableSchemaDefinitionPartitionKeyArrayOutput
}

type TableSchemaDefinitionPartitionKeyArray []TableSchemaDefinitionPartitionKeyInput

func (TableSchemaDefinitionPartitionKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableSchemaDefinitionPartitionKey)(nil)).Elem()
}

func (i TableSchemaDefinitionPartitionKeyArray) ToTableSchemaDefinitionPartitionKeyArrayOutput() TableSchemaDefinitionPartitionKeyArrayOutput {
	return i.ToTableSchemaDefinitionPartitionKeyArrayOutputWithContext(context.Background())
}

func (i TableSchemaDefinitionPartitionKeyArray) ToTableSchemaDefinitionPartitionKeyArrayOutputWithContext(ctx context.Context) TableSchemaDefinitionPartitionKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaDefinitionPartitionKeyArrayOutput)
}

type TableSchemaDefinitionPartitionKeyOutput struct{ *pulumi.OutputState }

func (TableSchemaDefinitionPartitionKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchemaDefinitionPartitionKey)(nil)).Elem()
}

func (o TableSchemaDefinitionPartitionKeyOutput) ToTableSchemaDefinitionPartitionKeyOutput() TableSchemaDefinitionPartitionKeyOutput {
	return o
}

func (o TableSchemaDefinitionPartitionKeyOutput) ToTableSchemaDefinitionPartitionKeyOutputWithContext(ctx context.Context) TableSchemaDefinitionPartitionKeyOutput {
	return o
}

// The name of the partition key column.
func (o TableSchemaDefinitionPartitionKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TableSchemaDefinitionPartitionKey) string { return v.Name }).(pulumi.StringOutput)
}

type TableSchemaDefinitionPartitionKeyArrayOutput struct{ *pulumi.OutputState }

func (TableSchemaDefinitionPartitionKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableSchemaDefinitionPartitionKey)(nil)).Elem()
}

func (o TableSchemaDefinitionPartitionKeyArrayOutput) ToTableSchemaDefinitionPartitionKeyArrayOutput() TableSchemaDefinitionPartitionKeyArrayOutput {
	return o
}

func (o TableSchemaDefinitionPartitionKeyArrayOutput) ToTableSchemaDefinitionPartitionKeyArrayOutputWithContext(ctx context.Context) TableSchemaDefinitionPartitionKeyArrayOutput {
	return o
}

func (o TableSchemaDefinitionPartitionKeyArrayOutput) Index(i pulumi.IntInput) TableSchemaDefinitionPartitionKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableSchemaDefinitionPartitionKey {
		return vs[0].([]TableSchemaDefinitionPartitionKey)[vs[1].(int)]
	}).(TableSchemaDefinitionPartitionKeyOutput)
}

type TableSchemaDefinitionStaticColumn struct {
	// The name of the static column.
	Name string `pulumi:"name"`
}

// TableSchemaDefinitionStaticColumnInput is an input type that accepts TableSchemaDefinitionStaticColumnArgs and TableSchemaDefinitionStaticColumnOutput values.
// You can construct a concrete instance of `TableSchemaDefinitionStaticColumnInput` via:
//
//          TableSchemaDefinitionStaticColumnArgs{...}
type TableSchemaDefinitionStaticColumnInput interface {
	pulumi.Input

	ToTableSchemaDefinitionStaticColumnOutput() TableSchemaDefinitionStaticColumnOutput
	ToTableSchemaDefinitionStaticColumnOutputWithContext(context.Context) TableSchemaDefinitionStaticColumnOutput
}

type TableSchemaDefinitionStaticColumnArgs struct {
	// The name of the static column.
	Name pulumi.StringInput `pulumi:"name"`
}

func (TableSchemaDefinitionStaticColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchemaDefinitionStaticColumn)(nil)).Elem()
}

func (i TableSchemaDefinitionStaticColumnArgs) ToTableSchemaDefinitionStaticColumnOutput() TableSchemaDefinitionStaticColumnOutput {
	return i.ToTableSchemaDefinitionStaticColumnOutputWithContext(context.Background())
}

func (i TableSchemaDefinitionStaticColumnArgs) ToTableSchemaDefinitionStaticColumnOutputWithContext(ctx context.Context) TableSchemaDefinitionStaticColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaDefinitionStaticColumnOutput)
}

// TableSchemaDefinitionStaticColumnArrayInput is an input type that accepts TableSchemaDefinitionStaticColumnArray and TableSchemaDefinitionStaticColumnArrayOutput values.
// You can construct a concrete instance of `TableSchemaDefinitionStaticColumnArrayInput` via:
//
//          TableSchemaDefinitionStaticColumnArray{ TableSchemaDefinitionStaticColumnArgs{...} }
type TableSchemaDefinitionStaticColumnArrayInput interface {
	pulumi.Input

	ToTableSchemaDefinitionStaticColumnArrayOutput() TableSchemaDefinitionStaticColumnArrayOutput
	ToTableSchemaDefinitionStaticColumnArrayOutputWithContext(context.Context) TableSchemaDefinitionStaticColumnArrayOutput
}

type TableSchemaDefinitionStaticColumnArray []TableSchemaDefinitionStaticColumnInput

func (TableSchemaDefinitionStaticColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableSchemaDefinitionStaticColumn)(nil)).Elem()
}

func (i TableSchemaDefinitionStaticColumnArray) ToTableSchemaDefinitionStaticColumnArrayOutput() TableSchemaDefinitionStaticColumnArrayOutput {
	return i.ToTableSchemaDefinitionStaticColumnArrayOutputWithContext(context.Background())
}

func (i TableSchemaDefinitionStaticColumnArray) ToTableSchemaDefinitionStaticColumnArrayOutputWithContext(ctx context.Context) TableSchemaDefinitionStaticColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaDefinitionStaticColumnArrayOutput)
}

type TableSchemaDefinitionStaticColumnOutput struct{ *pulumi.OutputState }

func (TableSchemaDefinitionStaticColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchemaDefinitionStaticColumn)(nil)).Elem()
}

func (o TableSchemaDefinitionStaticColumnOutput) ToTableSchemaDefinitionStaticColumnOutput() TableSchemaDefinitionStaticColumnOutput {
	return o
}

func (o TableSchemaDefinitionStaticColumnOutput) ToTableSchemaDefinitionStaticColumnOutputWithContext(ctx context.Context) TableSchemaDefinitionStaticColumnOutput {
	return o
}

// The name of the static column.
func (o TableSchemaDefinitionStaticColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TableSchemaDefinitionStaticColumn) string { return v.Name }).(pulumi.StringOutput)
}

type TableSchemaDefinitionStaticColumnArrayOutput struct{ *pulumi.OutputState }

func (TableSchemaDefinitionStaticColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableSchemaDefinitionStaticColumn)(nil)).Elem()
}

func (o TableSchemaDefinitionStaticColumnArrayOutput) ToTableSchemaDefinitionStaticColumnArrayOutput() TableSchemaDefinitionStaticColumnArrayOutput {
	return o
}

func (o TableSchemaDefinitionStaticColumnArrayOutput) ToTableSchemaDefinitionStaticColumnArrayOutputWithContext(ctx context.Context) TableSchemaDefinitionStaticColumnArrayOutput {
	return o
}

func (o TableSchemaDefinitionStaticColumnArrayOutput) Index(i pulumi.IntInput) TableSchemaDefinitionStaticColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableSchemaDefinitionStaticColumn {
		return vs[0].([]TableSchemaDefinitionStaticColumn)[vs[1].(int)]
	}).(TableSchemaDefinitionStaticColumnOutput)
}

type TableTtl struct {
	// Valid values: `ENABLED`.
	Status string `pulumi:"status"`
}

// TableTtlInput is an input type that accepts TableTtlArgs and TableTtlOutput values.
// You can construct a concrete instance of `TableTtlInput` via:
//
//          TableTtlArgs{...}
type TableTtlInput interface {
	pulumi.Input

	ToTableTtlOutput() TableTtlOutput
	ToTableTtlOutputWithContext(context.Context) TableTtlOutput
}

type TableTtlArgs struct {
	// Valid values: `ENABLED`.
	Status pulumi.StringInput `pulumi:"status"`
}

func (TableTtlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableTtl)(nil)).Elem()
}

func (i TableTtlArgs) ToTableTtlOutput() TableTtlOutput {
	return i.ToTableTtlOutputWithContext(context.Background())
}

func (i TableTtlArgs) ToTableTtlOutputWithContext(ctx context.Context) TableTtlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableTtlOutput)
}

func (i TableTtlArgs) ToTableTtlPtrOutput() TableTtlPtrOutput {
	return i.ToTableTtlPtrOutputWithContext(context.Background())
}

func (i TableTtlArgs) ToTableTtlPtrOutputWithContext(ctx context.Context) TableTtlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableTtlOutput).ToTableTtlPtrOutputWithContext(ctx)
}

// TableTtlPtrInput is an input type that accepts TableTtlArgs, TableTtlPtr and TableTtlPtrOutput values.
// You can construct a concrete instance of `TableTtlPtrInput` via:
//
//          TableTtlArgs{...}
//
//  or:
//
//          nil
type TableTtlPtrInput interface {
	pulumi.Input

	ToTableTtlPtrOutput() TableTtlPtrOutput
	ToTableTtlPtrOutputWithContext(context.Context) TableTtlPtrOutput
}

type tableTtlPtrType TableTtlArgs

func TableTtlPtr(v *TableTtlArgs) TableTtlPtrInput {
	return (*tableTtlPtrType)(v)
}

func (*tableTtlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableTtl)(nil)).Elem()
}

func (i *tableTtlPtrType) ToTableTtlPtrOutput() TableTtlPtrOutput {
	return i.ToTableTtlPtrOutputWithContext(context.Background())
}

func (i *tableTtlPtrType) ToTableTtlPtrOutputWithContext(ctx context.Context) TableTtlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableTtlPtrOutput)
}

type TableTtlOutput struct{ *pulumi.OutputState }

func (TableTtlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableTtl)(nil)).Elem()
}

func (o TableTtlOutput) ToTableTtlOutput() TableTtlOutput {
	return o
}

func (o TableTtlOutput) ToTableTtlOutputWithContext(ctx context.Context) TableTtlOutput {
	return o
}

func (o TableTtlOutput) ToTableTtlPtrOutput() TableTtlPtrOutput {
	return o.ToTableTtlPtrOutputWithContext(context.Background())
}

func (o TableTtlOutput) ToTableTtlPtrOutputWithContext(ctx context.Context) TableTtlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableTtl) *TableTtl {
		return &v
	}).(TableTtlPtrOutput)
}

// Valid values: `ENABLED`.
func (o TableTtlOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v TableTtl) string { return v.Status }).(pulumi.StringOutput)
}

type TableTtlPtrOutput struct{ *pulumi.OutputState }

func (TableTtlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableTtl)(nil)).Elem()
}

func (o TableTtlPtrOutput) ToTableTtlPtrOutput() TableTtlPtrOutput {
	return o
}

func (o TableTtlPtrOutput) ToTableTtlPtrOutputWithContext(ctx context.Context) TableTtlPtrOutput {
	return o
}

func (o TableTtlPtrOutput) Elem() TableTtlOutput {
	return o.ApplyT(func(v *TableTtl) TableTtl {
		if v != nil {
			return *v
		}
		var ret TableTtl
		return ret
	}).(TableTtlOutput)
}

// Valid values: `ENABLED`.
func (o TableTtlPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableTtl) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TableCapacitySpecificationInput)(nil)).Elem(), TableCapacitySpecificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableCapacitySpecificationPtrInput)(nil)).Elem(), TableCapacitySpecificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableCommentInput)(nil)).Elem(), TableCommentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableCommentPtrInput)(nil)).Elem(), TableCommentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableEncryptionSpecificationInput)(nil)).Elem(), TableEncryptionSpecificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableEncryptionSpecificationPtrInput)(nil)).Elem(), TableEncryptionSpecificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TablePointInTimeRecoveryInput)(nil)).Elem(), TablePointInTimeRecoveryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TablePointInTimeRecoveryPtrInput)(nil)).Elem(), TablePointInTimeRecoveryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableSchemaDefinitionInput)(nil)).Elem(), TableSchemaDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableSchemaDefinitionPtrInput)(nil)).Elem(), TableSchemaDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableSchemaDefinitionClusteringKeyInput)(nil)).Elem(), TableSchemaDefinitionClusteringKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableSchemaDefinitionClusteringKeyArrayInput)(nil)).Elem(), TableSchemaDefinitionClusteringKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableSchemaDefinitionColumnInput)(nil)).Elem(), TableSchemaDefinitionColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableSchemaDefinitionColumnArrayInput)(nil)).Elem(), TableSchemaDefinitionColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableSchemaDefinitionPartitionKeyInput)(nil)).Elem(), TableSchemaDefinitionPartitionKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableSchemaDefinitionPartitionKeyArrayInput)(nil)).Elem(), TableSchemaDefinitionPartitionKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableSchemaDefinitionStaticColumnInput)(nil)).Elem(), TableSchemaDefinitionStaticColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableSchemaDefinitionStaticColumnArrayInput)(nil)).Elem(), TableSchemaDefinitionStaticColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableTtlInput)(nil)).Elem(), TableTtlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableTtlPtrInput)(nil)).Elem(), TableTtlArgs{})
	pulumi.RegisterOutputType(TableCapacitySpecificationOutput{})
	pulumi.RegisterOutputType(TableCapacitySpecificationPtrOutput{})
	pulumi.RegisterOutputType(TableCommentOutput{})
	pulumi.RegisterOutputType(TableCommentPtrOutput{})
	pulumi.RegisterOutputType(TableEncryptionSpecificationOutput{})
	pulumi.RegisterOutputType(TableEncryptionSpecificationPtrOutput{})
	pulumi.RegisterOutputType(TablePointInTimeRecoveryOutput{})
	pulumi.RegisterOutputType(TablePointInTimeRecoveryPtrOutput{})
	pulumi.RegisterOutputType(TableSchemaDefinitionOutput{})
	pulumi.RegisterOutputType(TableSchemaDefinitionPtrOutput{})
	pulumi.RegisterOutputType(TableSchemaDefinitionClusteringKeyOutput{})
	pulumi.RegisterOutputType(TableSchemaDefinitionClusteringKeyArrayOutput{})
	pulumi.RegisterOutputType(TableSchemaDefinitionColumnOutput{})
	pulumi.RegisterOutputType(TableSchemaDefinitionColumnArrayOutput{})
	pulumi.RegisterOutputType(TableSchemaDefinitionPartitionKeyOutput{})
	pulumi.RegisterOutputType(TableSchemaDefinitionPartitionKeyArrayOutput{})
	pulumi.RegisterOutputType(TableSchemaDefinitionStaticColumnOutput{})
	pulumi.RegisterOutputType(TableSchemaDefinitionStaticColumnArrayOutput{})
	pulumi.RegisterOutputType(TableTtlOutput{})
	pulumi.RegisterOutputType(TableTtlPtrOutput{})
}
