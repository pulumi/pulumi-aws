// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package keyspaces

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Keyspaces Keyspace.
//
// More information about keyspaces can be found in the [Keyspaces User Guide](https://docs.aws.amazon.com/keyspaces/latest/devguide/what-is-keyspaces.html).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/keyspaces"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := keyspaces.NewKeyspace(ctx, "example", nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Use the `name` to import a keyspace. For example
//
// ```sh
//  $ pulumi import aws:keyspaces/keyspace:Keyspace example my_keyspace
// ```
type Keyspace struct {
	pulumi.CustomResourceState

	// The ARN of the keyspace.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The name of the keyspace to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewKeyspace registers a new resource with the given unique name, arguments, and options.
func NewKeyspace(ctx *pulumi.Context,
	name string, args *KeyspaceArgs, opts ...pulumi.ResourceOption) (*Keyspace, error) {
	if args == nil {
		args = &KeyspaceArgs{}
	}

	var resource Keyspace
	err := ctx.RegisterResource("aws:keyspaces/keyspace:Keyspace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeyspace gets an existing Keyspace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeyspace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyspaceState, opts ...pulumi.ResourceOption) (*Keyspace, error) {
	var resource Keyspace
	err := ctx.ReadResource("aws:keyspaces/keyspace:Keyspace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Keyspace resources.
type keyspaceState struct {
	// The ARN of the keyspace.
	Arn *string `pulumi:"arn"`
	// The name of the keyspace to be created.
	Name *string `pulumi:"name"`
	// A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type KeyspaceState struct {
	// The ARN of the keyspace.
	Arn pulumi.StringPtrInput
	// The name of the keyspace to be created.
	Name pulumi.StringPtrInput
	// A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).
	TagsAll pulumi.StringMapInput
}

func (KeyspaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyspaceState)(nil)).Elem()
}

type keyspaceArgs struct {
	// The name of the keyspace to be created.
	Name *string `pulumi:"name"`
	// A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).
	TagsAll map[string]string `pulumi:"tagsAll"`
}

// The set of arguments for constructing a Keyspace resource.
type KeyspaceArgs struct {
	// The name of the keyspace to be created.
	Name pulumi.StringPtrInput
	// A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).
	TagsAll pulumi.StringMapInput
}

func (KeyspaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyspaceArgs)(nil)).Elem()
}

type KeyspaceInput interface {
	pulumi.Input

	ToKeyspaceOutput() KeyspaceOutput
	ToKeyspaceOutputWithContext(ctx context.Context) KeyspaceOutput
}

func (*Keyspace) ElementType() reflect.Type {
	return reflect.TypeOf((**Keyspace)(nil)).Elem()
}

func (i *Keyspace) ToKeyspaceOutput() KeyspaceOutput {
	return i.ToKeyspaceOutputWithContext(context.Background())
}

func (i *Keyspace) ToKeyspaceOutputWithContext(ctx context.Context) KeyspaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyspaceOutput)
}

// KeyspaceArrayInput is an input type that accepts KeyspaceArray and KeyspaceArrayOutput values.
// You can construct a concrete instance of `KeyspaceArrayInput` via:
//
//          KeyspaceArray{ KeyspaceArgs{...} }
type KeyspaceArrayInput interface {
	pulumi.Input

	ToKeyspaceArrayOutput() KeyspaceArrayOutput
	ToKeyspaceArrayOutputWithContext(context.Context) KeyspaceArrayOutput
}

type KeyspaceArray []KeyspaceInput

func (KeyspaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Keyspace)(nil)).Elem()
}

func (i KeyspaceArray) ToKeyspaceArrayOutput() KeyspaceArrayOutput {
	return i.ToKeyspaceArrayOutputWithContext(context.Background())
}

func (i KeyspaceArray) ToKeyspaceArrayOutputWithContext(ctx context.Context) KeyspaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyspaceArrayOutput)
}

// KeyspaceMapInput is an input type that accepts KeyspaceMap and KeyspaceMapOutput values.
// You can construct a concrete instance of `KeyspaceMapInput` via:
//
//          KeyspaceMap{ "key": KeyspaceArgs{...} }
type KeyspaceMapInput interface {
	pulumi.Input

	ToKeyspaceMapOutput() KeyspaceMapOutput
	ToKeyspaceMapOutputWithContext(context.Context) KeyspaceMapOutput
}

type KeyspaceMap map[string]KeyspaceInput

func (KeyspaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Keyspace)(nil)).Elem()
}

func (i KeyspaceMap) ToKeyspaceMapOutput() KeyspaceMapOutput {
	return i.ToKeyspaceMapOutputWithContext(context.Background())
}

func (i KeyspaceMap) ToKeyspaceMapOutputWithContext(ctx context.Context) KeyspaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyspaceMapOutput)
}

type KeyspaceOutput struct{ *pulumi.OutputState }

func (KeyspaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Keyspace)(nil)).Elem()
}

func (o KeyspaceOutput) ToKeyspaceOutput() KeyspaceOutput {
	return o
}

func (o KeyspaceOutput) ToKeyspaceOutputWithContext(ctx context.Context) KeyspaceOutput {
	return o
}

// The ARN of the keyspace.
func (o KeyspaceOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Keyspace) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The name of the keyspace to be created.
func (o KeyspaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Keyspace) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
func (o KeyspaceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Keyspace) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).
func (o KeyspaceOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Keyspace) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type KeyspaceArrayOutput struct{ *pulumi.OutputState }

func (KeyspaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Keyspace)(nil)).Elem()
}

func (o KeyspaceArrayOutput) ToKeyspaceArrayOutput() KeyspaceArrayOutput {
	return o
}

func (o KeyspaceArrayOutput) ToKeyspaceArrayOutputWithContext(ctx context.Context) KeyspaceArrayOutput {
	return o
}

func (o KeyspaceArrayOutput) Index(i pulumi.IntInput) KeyspaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Keyspace {
		return vs[0].([]*Keyspace)[vs[1].(int)]
	}).(KeyspaceOutput)
}

type KeyspaceMapOutput struct{ *pulumi.OutputState }

func (KeyspaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Keyspace)(nil)).Elem()
}

func (o KeyspaceMapOutput) ToKeyspaceMapOutput() KeyspaceMapOutput {
	return o
}

func (o KeyspaceMapOutput) ToKeyspaceMapOutputWithContext(ctx context.Context) KeyspaceMapOutput {
	return o
}

func (o KeyspaceMapOutput) MapIndex(k pulumi.StringInput) KeyspaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Keyspace {
		return vs[0].(map[string]*Keyspace)[vs[1].(string)]
	}).(KeyspaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeyspaceInput)(nil)).Elem(), &Keyspace{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyspaceArrayInput)(nil)).Elem(), KeyspaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyspaceMapInput)(nil)).Elem(), KeyspaceMap{})
	pulumi.RegisterOutputType(KeyspaceOutput{})
	pulumi.RegisterOutputType(KeyspaceArrayOutput{})
	pulumi.RegisterOutputType(KeyspaceMapOutput{})
}
