// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package keyspaces

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Table struct {
	pulumi.CustomResourceState

	Arn                     pulumi.StringOutput                `pulumi:"arn"`
	CapacitySpecification   TableCapacitySpecificationOutput   `pulumi:"capacitySpecification"`
	Comment                 TableCommentOutput                 `pulumi:"comment"`
	DefaultTimeToLive       pulumi.IntPtrOutput                `pulumi:"defaultTimeToLive"`
	EncryptionSpecification TableEncryptionSpecificationOutput `pulumi:"encryptionSpecification"`
	KeyspaceName            pulumi.StringOutput                `pulumi:"keyspaceName"`
	PointInTimeRecovery     TablePointInTimeRecoveryOutput     `pulumi:"pointInTimeRecovery"`
	SchemaDefinition        TableSchemaDefinitionOutput        `pulumi:"schemaDefinition"`
	TableName               pulumi.StringOutput                `pulumi:"tableName"`
	Tags                    pulumi.StringMapOutput             `pulumi:"tags"`
	TagsAll                 pulumi.StringMapOutput             `pulumi:"tagsAll"`
	Ttl                     TableTtlPtrOutput                  `pulumi:"ttl"`
}

// NewTable registers a new resource with the given unique name, arguments, and options.
func NewTable(ctx *pulumi.Context,
	name string, args *TableArgs, opts ...pulumi.ResourceOption) (*Table, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KeyspaceName == nil {
		return nil, errors.New("invalid value for required argument 'KeyspaceName'")
	}
	if args.SchemaDefinition == nil {
		return nil, errors.New("invalid value for required argument 'SchemaDefinition'")
	}
	if args.TableName == nil {
		return nil, errors.New("invalid value for required argument 'TableName'")
	}
	var resource Table
	err := ctx.RegisterResource("aws:keyspaces/table:Table", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTable gets an existing Table resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TableState, opts ...pulumi.ResourceOption) (*Table, error) {
	var resource Table
	err := ctx.ReadResource("aws:keyspaces/table:Table", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Table resources.
type tableState struct {
	Arn                     *string                       `pulumi:"arn"`
	CapacitySpecification   *TableCapacitySpecification   `pulumi:"capacitySpecification"`
	Comment                 *TableComment                 `pulumi:"comment"`
	DefaultTimeToLive       *int                          `pulumi:"defaultTimeToLive"`
	EncryptionSpecification *TableEncryptionSpecification `pulumi:"encryptionSpecification"`
	KeyspaceName            *string                       `pulumi:"keyspaceName"`
	PointInTimeRecovery     *TablePointInTimeRecovery     `pulumi:"pointInTimeRecovery"`
	SchemaDefinition        *TableSchemaDefinition        `pulumi:"schemaDefinition"`
	TableName               *string                       `pulumi:"tableName"`
	Tags                    map[string]string             `pulumi:"tags"`
	TagsAll                 map[string]string             `pulumi:"tagsAll"`
	Ttl                     *TableTtl                     `pulumi:"ttl"`
}

type TableState struct {
	Arn                     pulumi.StringPtrInput
	CapacitySpecification   TableCapacitySpecificationPtrInput
	Comment                 TableCommentPtrInput
	DefaultTimeToLive       pulumi.IntPtrInput
	EncryptionSpecification TableEncryptionSpecificationPtrInput
	KeyspaceName            pulumi.StringPtrInput
	PointInTimeRecovery     TablePointInTimeRecoveryPtrInput
	SchemaDefinition        TableSchemaDefinitionPtrInput
	TableName               pulumi.StringPtrInput
	Tags                    pulumi.StringMapInput
	TagsAll                 pulumi.StringMapInput
	Ttl                     TableTtlPtrInput
}

func (TableState) ElementType() reflect.Type {
	return reflect.TypeOf((*tableState)(nil)).Elem()
}

type tableArgs struct {
	CapacitySpecification   *TableCapacitySpecification   `pulumi:"capacitySpecification"`
	Comment                 *TableComment                 `pulumi:"comment"`
	DefaultTimeToLive       *int                          `pulumi:"defaultTimeToLive"`
	EncryptionSpecification *TableEncryptionSpecification `pulumi:"encryptionSpecification"`
	KeyspaceName            string                        `pulumi:"keyspaceName"`
	PointInTimeRecovery     *TablePointInTimeRecovery     `pulumi:"pointInTimeRecovery"`
	SchemaDefinition        TableSchemaDefinition         `pulumi:"schemaDefinition"`
	TableName               string                        `pulumi:"tableName"`
	Tags                    map[string]string             `pulumi:"tags"`
	Ttl                     *TableTtl                     `pulumi:"ttl"`
}

// The set of arguments for constructing a Table resource.
type TableArgs struct {
	CapacitySpecification   TableCapacitySpecificationPtrInput
	Comment                 TableCommentPtrInput
	DefaultTimeToLive       pulumi.IntPtrInput
	EncryptionSpecification TableEncryptionSpecificationPtrInput
	KeyspaceName            pulumi.StringInput
	PointInTimeRecovery     TablePointInTimeRecoveryPtrInput
	SchemaDefinition        TableSchemaDefinitionInput
	TableName               pulumi.StringInput
	Tags                    pulumi.StringMapInput
	Ttl                     TableTtlPtrInput
}

func (TableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tableArgs)(nil)).Elem()
}

type TableInput interface {
	pulumi.Input

	ToTableOutput() TableOutput
	ToTableOutputWithContext(ctx context.Context) TableOutput
}

func (*Table) ElementType() reflect.Type {
	return reflect.TypeOf((**Table)(nil)).Elem()
}

func (i *Table) ToTableOutput() TableOutput {
	return i.ToTableOutputWithContext(context.Background())
}

func (i *Table) ToTableOutputWithContext(ctx context.Context) TableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableOutput)
}

// TableArrayInput is an input type that accepts TableArray and TableArrayOutput values.
// You can construct a concrete instance of `TableArrayInput` via:
//
//	TableArray{ TableArgs{...} }
type TableArrayInput interface {
	pulumi.Input

	ToTableArrayOutput() TableArrayOutput
	ToTableArrayOutputWithContext(context.Context) TableArrayOutput
}

type TableArray []TableInput

func (TableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Table)(nil)).Elem()
}

func (i TableArray) ToTableArrayOutput() TableArrayOutput {
	return i.ToTableArrayOutputWithContext(context.Background())
}

func (i TableArray) ToTableArrayOutputWithContext(ctx context.Context) TableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableArrayOutput)
}

// TableMapInput is an input type that accepts TableMap and TableMapOutput values.
// You can construct a concrete instance of `TableMapInput` via:
//
//	TableMap{ "key": TableArgs{...} }
type TableMapInput interface {
	pulumi.Input

	ToTableMapOutput() TableMapOutput
	ToTableMapOutputWithContext(context.Context) TableMapOutput
}

type TableMap map[string]TableInput

func (TableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Table)(nil)).Elem()
}

func (i TableMap) ToTableMapOutput() TableMapOutput {
	return i.ToTableMapOutputWithContext(context.Background())
}

func (i TableMap) ToTableMapOutputWithContext(ctx context.Context) TableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableMapOutput)
}

type TableOutput struct{ *pulumi.OutputState }

func (TableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Table)(nil)).Elem()
}

func (o TableOutput) ToTableOutput() TableOutput {
	return o
}

func (o TableOutput) ToTableOutputWithContext(ctx context.Context) TableOutput {
	return o
}

func (o TableOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o TableOutput) CapacitySpecification() TableCapacitySpecificationOutput {
	return o.ApplyT(func(v *Table) TableCapacitySpecificationOutput { return v.CapacitySpecification }).(TableCapacitySpecificationOutput)
}

func (o TableOutput) Comment() TableCommentOutput {
	return o.ApplyT(func(v *Table) TableCommentOutput { return v.Comment }).(TableCommentOutput)
}

func (o TableOutput) DefaultTimeToLive() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Table) pulumi.IntPtrOutput { return v.DefaultTimeToLive }).(pulumi.IntPtrOutput)
}

func (o TableOutput) EncryptionSpecification() TableEncryptionSpecificationOutput {
	return o.ApplyT(func(v *Table) TableEncryptionSpecificationOutput { return v.EncryptionSpecification }).(TableEncryptionSpecificationOutput)
}

func (o TableOutput) KeyspaceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.KeyspaceName }).(pulumi.StringOutput)
}

func (o TableOutput) PointInTimeRecovery() TablePointInTimeRecoveryOutput {
	return o.ApplyT(func(v *Table) TablePointInTimeRecoveryOutput { return v.PointInTimeRecovery }).(TablePointInTimeRecoveryOutput)
}

func (o TableOutput) SchemaDefinition() TableSchemaDefinitionOutput {
	return o.ApplyT(func(v *Table) TableSchemaDefinitionOutput { return v.SchemaDefinition }).(TableSchemaDefinitionOutput)
}

func (o TableOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.TableName }).(pulumi.StringOutput)
}

func (o TableOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Table) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o TableOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Table) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o TableOutput) Ttl() TableTtlPtrOutput {
	return o.ApplyT(func(v *Table) TableTtlPtrOutput { return v.Ttl }).(TableTtlPtrOutput)
}

type TableArrayOutput struct{ *pulumi.OutputState }

func (TableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Table)(nil)).Elem()
}

func (o TableArrayOutput) ToTableArrayOutput() TableArrayOutput {
	return o
}

func (o TableArrayOutput) ToTableArrayOutputWithContext(ctx context.Context) TableArrayOutput {
	return o
}

func (o TableArrayOutput) Index(i pulumi.IntInput) TableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Table {
		return vs[0].([]*Table)[vs[1].(int)]
	}).(TableOutput)
}

type TableMapOutput struct{ *pulumi.OutputState }

func (TableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Table)(nil)).Elem()
}

func (o TableMapOutput) ToTableMapOutput() TableMapOutput {
	return o
}

func (o TableMapOutput) ToTableMapOutputWithContext(ctx context.Context) TableMapOutput {
	return o
}

func (o TableMapOutput) MapIndex(k pulumi.StringInput) TableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Table {
		return vs[0].(map[string]*Table)[vs[1].(string)]
	}).(TableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TableInput)(nil)).Elem(), &Table{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableArrayInput)(nil)).Elem(), TableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableMapInput)(nil)).Elem(), TableMap{})
	pulumi.RegisterOutputType(TableOutput{})
	pulumi.RegisterOutputType(TableArrayOutput{})
	pulumi.RegisterOutputType(TableMapOutput{})
}
