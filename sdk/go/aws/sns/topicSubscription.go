// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sns

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TopicSubscription struct {
	pulumi.CustomResourceState

	Arn                          pulumi.StringOutput    `pulumi:"arn"`
	ConfirmationTimeoutInMinutes pulumi.IntPtrOutput    `pulumi:"confirmationTimeoutInMinutes"`
	ConfirmationWasAuthenticated pulumi.BoolOutput      `pulumi:"confirmationWasAuthenticated"`
	DeliveryPolicy               pulumi.StringPtrOutput `pulumi:"deliveryPolicy"`
	Endpoint                     pulumi.StringOutput    `pulumi:"endpoint"`
	EndpointAutoConfirms         pulumi.BoolPtrOutput   `pulumi:"endpointAutoConfirms"`
	FilterPolicy                 pulumi.StringPtrOutput `pulumi:"filterPolicy"`
	FilterPolicyScope            pulumi.StringOutput    `pulumi:"filterPolicyScope"`
	OwnerId                      pulumi.StringOutput    `pulumi:"ownerId"`
	PendingConfirmation          pulumi.BoolOutput      `pulumi:"pendingConfirmation"`
	Protocol                     pulumi.StringOutput    `pulumi:"protocol"`
	RawMessageDelivery           pulumi.BoolPtrOutput   `pulumi:"rawMessageDelivery"`
	RedrivePolicy                pulumi.StringPtrOutput `pulumi:"redrivePolicy"`
	SubscriptionRoleArn          pulumi.StringPtrOutput `pulumi:"subscriptionRoleArn"`
	Topic                        pulumi.StringOutput    `pulumi:"topic"`
}

// NewTopicSubscription registers a new resource with the given unique name, arguments, and options.
func NewTopicSubscription(ctx *pulumi.Context,
	name string, args *TopicSubscriptionArgs, opts ...pulumi.ResourceOption) (*TopicSubscription, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Endpoint == nil {
		return nil, errors.New("invalid value for required argument 'Endpoint'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.Topic == nil {
		return nil, errors.New("invalid value for required argument 'Topic'")
	}
	var resource TopicSubscription
	err := ctx.RegisterResource("aws:sns/topicSubscription:TopicSubscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTopicSubscription gets an existing TopicSubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTopicSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TopicSubscriptionState, opts ...pulumi.ResourceOption) (*TopicSubscription, error) {
	var resource TopicSubscription
	err := ctx.ReadResource("aws:sns/topicSubscription:TopicSubscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TopicSubscription resources.
type topicSubscriptionState struct {
	Arn                          *string     `pulumi:"arn"`
	ConfirmationTimeoutInMinutes *int        `pulumi:"confirmationTimeoutInMinutes"`
	ConfirmationWasAuthenticated *bool       `pulumi:"confirmationWasAuthenticated"`
	DeliveryPolicy               *string     `pulumi:"deliveryPolicy"`
	Endpoint                     *string     `pulumi:"endpoint"`
	EndpointAutoConfirms         *bool       `pulumi:"endpointAutoConfirms"`
	FilterPolicy                 *string     `pulumi:"filterPolicy"`
	FilterPolicyScope            *string     `pulumi:"filterPolicyScope"`
	OwnerId                      *string     `pulumi:"ownerId"`
	PendingConfirmation          *bool       `pulumi:"pendingConfirmation"`
	Protocol                     *string     `pulumi:"protocol"`
	RawMessageDelivery           *bool       `pulumi:"rawMessageDelivery"`
	RedrivePolicy                *string     `pulumi:"redrivePolicy"`
	SubscriptionRoleArn          *string     `pulumi:"subscriptionRoleArn"`
	Topic                        interface{} `pulumi:"topic"`
}

type TopicSubscriptionState struct {
	Arn                          pulumi.StringPtrInput
	ConfirmationTimeoutInMinutes pulumi.IntPtrInput
	ConfirmationWasAuthenticated pulumi.BoolPtrInput
	DeliveryPolicy               pulumi.StringPtrInput
	Endpoint                     pulumi.StringPtrInput
	EndpointAutoConfirms         pulumi.BoolPtrInput
	FilterPolicy                 pulumi.StringPtrInput
	FilterPolicyScope            pulumi.StringPtrInput
	OwnerId                      pulumi.StringPtrInput
	PendingConfirmation          pulumi.BoolPtrInput
	Protocol                     pulumi.StringPtrInput
	RawMessageDelivery           pulumi.BoolPtrInput
	RedrivePolicy                pulumi.StringPtrInput
	SubscriptionRoleArn          pulumi.StringPtrInput
	Topic                        pulumi.Input
}

func (TopicSubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*topicSubscriptionState)(nil)).Elem()
}

type topicSubscriptionArgs struct {
	ConfirmationTimeoutInMinutes *int        `pulumi:"confirmationTimeoutInMinutes"`
	DeliveryPolicy               *string     `pulumi:"deliveryPolicy"`
	Endpoint                     string      `pulumi:"endpoint"`
	EndpointAutoConfirms         *bool       `pulumi:"endpointAutoConfirms"`
	FilterPolicy                 *string     `pulumi:"filterPolicy"`
	FilterPolicyScope            *string     `pulumi:"filterPolicyScope"`
	Protocol                     string      `pulumi:"protocol"`
	RawMessageDelivery           *bool       `pulumi:"rawMessageDelivery"`
	RedrivePolicy                *string     `pulumi:"redrivePolicy"`
	SubscriptionRoleArn          *string     `pulumi:"subscriptionRoleArn"`
	Topic                        interface{} `pulumi:"topic"`
}

// The set of arguments for constructing a TopicSubscription resource.
type TopicSubscriptionArgs struct {
	ConfirmationTimeoutInMinutes pulumi.IntPtrInput
	DeliveryPolicy               pulumi.StringPtrInput
	Endpoint                     pulumi.StringInput
	EndpointAutoConfirms         pulumi.BoolPtrInput
	FilterPolicy                 pulumi.StringPtrInput
	FilterPolicyScope            pulumi.StringPtrInput
	Protocol                     pulumi.StringInput
	RawMessageDelivery           pulumi.BoolPtrInput
	RedrivePolicy                pulumi.StringPtrInput
	SubscriptionRoleArn          pulumi.StringPtrInput
	Topic                        pulumi.Input
}

func (TopicSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*topicSubscriptionArgs)(nil)).Elem()
}

type TopicSubscriptionInput interface {
	pulumi.Input

	ToTopicSubscriptionOutput() TopicSubscriptionOutput
	ToTopicSubscriptionOutputWithContext(ctx context.Context) TopicSubscriptionOutput
}

func (*TopicSubscription) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSubscription)(nil)).Elem()
}

func (i *TopicSubscription) ToTopicSubscriptionOutput() TopicSubscriptionOutput {
	return i.ToTopicSubscriptionOutputWithContext(context.Background())
}

func (i *TopicSubscription) ToTopicSubscriptionOutputWithContext(ctx context.Context) TopicSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSubscriptionOutput)
}

// TopicSubscriptionArrayInput is an input type that accepts TopicSubscriptionArray and TopicSubscriptionArrayOutput values.
// You can construct a concrete instance of `TopicSubscriptionArrayInput` via:
//
//	TopicSubscriptionArray{ TopicSubscriptionArgs{...} }
type TopicSubscriptionArrayInput interface {
	pulumi.Input

	ToTopicSubscriptionArrayOutput() TopicSubscriptionArrayOutput
	ToTopicSubscriptionArrayOutputWithContext(context.Context) TopicSubscriptionArrayOutput
}

type TopicSubscriptionArray []TopicSubscriptionInput

func (TopicSubscriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TopicSubscription)(nil)).Elem()
}

func (i TopicSubscriptionArray) ToTopicSubscriptionArrayOutput() TopicSubscriptionArrayOutput {
	return i.ToTopicSubscriptionArrayOutputWithContext(context.Background())
}

func (i TopicSubscriptionArray) ToTopicSubscriptionArrayOutputWithContext(ctx context.Context) TopicSubscriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSubscriptionArrayOutput)
}

// TopicSubscriptionMapInput is an input type that accepts TopicSubscriptionMap and TopicSubscriptionMapOutput values.
// You can construct a concrete instance of `TopicSubscriptionMapInput` via:
//
//	TopicSubscriptionMap{ "key": TopicSubscriptionArgs{...} }
type TopicSubscriptionMapInput interface {
	pulumi.Input

	ToTopicSubscriptionMapOutput() TopicSubscriptionMapOutput
	ToTopicSubscriptionMapOutputWithContext(context.Context) TopicSubscriptionMapOutput
}

type TopicSubscriptionMap map[string]TopicSubscriptionInput

func (TopicSubscriptionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TopicSubscription)(nil)).Elem()
}

func (i TopicSubscriptionMap) ToTopicSubscriptionMapOutput() TopicSubscriptionMapOutput {
	return i.ToTopicSubscriptionMapOutputWithContext(context.Background())
}

func (i TopicSubscriptionMap) ToTopicSubscriptionMapOutputWithContext(ctx context.Context) TopicSubscriptionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSubscriptionMapOutput)
}

type TopicSubscriptionOutput struct{ *pulumi.OutputState }

func (TopicSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSubscription)(nil)).Elem()
}

func (o TopicSubscriptionOutput) ToTopicSubscriptionOutput() TopicSubscriptionOutput {
	return o
}

func (o TopicSubscriptionOutput) ToTopicSubscriptionOutputWithContext(ctx context.Context) TopicSubscriptionOutput {
	return o
}

func (o TopicSubscriptionOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *TopicSubscription) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o TopicSubscriptionOutput) ConfirmationTimeoutInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TopicSubscription) pulumi.IntPtrOutput { return v.ConfirmationTimeoutInMinutes }).(pulumi.IntPtrOutput)
}

func (o TopicSubscriptionOutput) ConfirmationWasAuthenticated() pulumi.BoolOutput {
	return o.ApplyT(func(v *TopicSubscription) pulumi.BoolOutput { return v.ConfirmationWasAuthenticated }).(pulumi.BoolOutput)
}

func (o TopicSubscriptionOutput) DeliveryPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSubscription) pulumi.StringPtrOutput { return v.DeliveryPolicy }).(pulumi.StringPtrOutput)
}

func (o TopicSubscriptionOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *TopicSubscription) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

func (o TopicSubscriptionOutput) EndpointAutoConfirms() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TopicSubscription) pulumi.BoolPtrOutput { return v.EndpointAutoConfirms }).(pulumi.BoolPtrOutput)
}

func (o TopicSubscriptionOutput) FilterPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSubscription) pulumi.StringPtrOutput { return v.FilterPolicy }).(pulumi.StringPtrOutput)
}

func (o TopicSubscriptionOutput) FilterPolicyScope() pulumi.StringOutput {
	return o.ApplyT(func(v *TopicSubscription) pulumi.StringOutput { return v.FilterPolicyScope }).(pulumi.StringOutput)
}

func (o TopicSubscriptionOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *TopicSubscription) pulumi.StringOutput { return v.OwnerId }).(pulumi.StringOutput)
}

func (o TopicSubscriptionOutput) PendingConfirmation() pulumi.BoolOutput {
	return o.ApplyT(func(v *TopicSubscription) pulumi.BoolOutput { return v.PendingConfirmation }).(pulumi.BoolOutput)
}

func (o TopicSubscriptionOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *TopicSubscription) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

func (o TopicSubscriptionOutput) RawMessageDelivery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TopicSubscription) pulumi.BoolPtrOutput { return v.RawMessageDelivery }).(pulumi.BoolPtrOutput)
}

func (o TopicSubscriptionOutput) RedrivePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSubscription) pulumi.StringPtrOutput { return v.RedrivePolicy }).(pulumi.StringPtrOutput)
}

func (o TopicSubscriptionOutput) SubscriptionRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSubscription) pulumi.StringPtrOutput { return v.SubscriptionRoleArn }).(pulumi.StringPtrOutput)
}

func (o TopicSubscriptionOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v *TopicSubscription) pulumi.StringOutput { return v.Topic }).(pulumi.StringOutput)
}

type TopicSubscriptionArrayOutput struct{ *pulumi.OutputState }

func (TopicSubscriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TopicSubscription)(nil)).Elem()
}

func (o TopicSubscriptionArrayOutput) ToTopicSubscriptionArrayOutput() TopicSubscriptionArrayOutput {
	return o
}

func (o TopicSubscriptionArrayOutput) ToTopicSubscriptionArrayOutputWithContext(ctx context.Context) TopicSubscriptionArrayOutput {
	return o
}

func (o TopicSubscriptionArrayOutput) Index(i pulumi.IntInput) TopicSubscriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TopicSubscription {
		return vs[0].([]*TopicSubscription)[vs[1].(int)]
	}).(TopicSubscriptionOutput)
}

type TopicSubscriptionMapOutput struct{ *pulumi.OutputState }

func (TopicSubscriptionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TopicSubscription)(nil)).Elem()
}

func (o TopicSubscriptionMapOutput) ToTopicSubscriptionMapOutput() TopicSubscriptionMapOutput {
	return o
}

func (o TopicSubscriptionMapOutput) ToTopicSubscriptionMapOutputWithContext(ctx context.Context) TopicSubscriptionMapOutput {
	return o
}

func (o TopicSubscriptionMapOutput) MapIndex(k pulumi.StringInput) TopicSubscriptionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TopicSubscription {
		return vs[0].(map[string]*TopicSubscription)[vs[1].(string)]
	}).(TopicSubscriptionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TopicSubscriptionInput)(nil)).Elem(), &TopicSubscription{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicSubscriptionArrayInput)(nil)).Elem(), TopicSubscriptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicSubscriptionMapInput)(nil)).Elem(), TopicSubscriptionMap{})
	pulumi.RegisterOutputType(TopicSubscriptionOutput{})
	pulumi.RegisterOutputType(TopicSubscriptionArrayOutput{})
	pulumi.RegisterOutputType(TopicSubscriptionMapOutput{})
}
