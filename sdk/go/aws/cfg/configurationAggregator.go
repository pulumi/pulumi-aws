// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cfg

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ConfigurationAggregator struct {
	pulumi.CustomResourceState

	AccountAggregationSource      ConfigurationAggregatorAccountAggregationSourcePtrOutput      `pulumi:"accountAggregationSource"`
	Arn                           pulumi.StringOutput                                           `pulumi:"arn"`
	Name                          pulumi.StringOutput                                           `pulumi:"name"`
	OrganizationAggregationSource ConfigurationAggregatorOrganizationAggregationSourcePtrOutput `pulumi:"organizationAggregationSource"`
	Tags                          pulumi.StringMapOutput                                        `pulumi:"tags"`
	TagsAll                       pulumi.StringMapOutput                                        `pulumi:"tagsAll"`
}

// NewConfigurationAggregator registers a new resource with the given unique name, arguments, and options.
func NewConfigurationAggregator(ctx *pulumi.Context,
	name string, args *ConfigurationAggregatorArgs, opts ...pulumi.ResourceOption) (*ConfigurationAggregator, error) {
	if args == nil {
		args = &ConfigurationAggregatorArgs{}
	}

	var resource ConfigurationAggregator
	err := ctx.RegisterResource("aws:cfg/configurationAggregator:ConfigurationAggregator", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigurationAggregator gets an existing ConfigurationAggregator resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigurationAggregator(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigurationAggregatorState, opts ...pulumi.ResourceOption) (*ConfigurationAggregator, error) {
	var resource ConfigurationAggregator
	err := ctx.ReadResource("aws:cfg/configurationAggregator:ConfigurationAggregator", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigurationAggregator resources.
type configurationAggregatorState struct {
	AccountAggregationSource      *ConfigurationAggregatorAccountAggregationSource      `pulumi:"accountAggregationSource"`
	Arn                           *string                                               `pulumi:"arn"`
	Name                          *string                                               `pulumi:"name"`
	OrganizationAggregationSource *ConfigurationAggregatorOrganizationAggregationSource `pulumi:"organizationAggregationSource"`
	Tags                          map[string]string                                     `pulumi:"tags"`
	TagsAll                       map[string]string                                     `pulumi:"tagsAll"`
}

type ConfigurationAggregatorState struct {
	AccountAggregationSource      ConfigurationAggregatorAccountAggregationSourcePtrInput
	Arn                           pulumi.StringPtrInput
	Name                          pulumi.StringPtrInput
	OrganizationAggregationSource ConfigurationAggregatorOrganizationAggregationSourcePtrInput
	Tags                          pulumi.StringMapInput
	TagsAll                       pulumi.StringMapInput
}

func (ConfigurationAggregatorState) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationAggregatorState)(nil)).Elem()
}

type configurationAggregatorArgs struct {
	AccountAggregationSource      *ConfigurationAggregatorAccountAggregationSource      `pulumi:"accountAggregationSource"`
	Name                          *string                                               `pulumi:"name"`
	OrganizationAggregationSource *ConfigurationAggregatorOrganizationAggregationSource `pulumi:"organizationAggregationSource"`
	Tags                          map[string]string                                     `pulumi:"tags"`
}

// The set of arguments for constructing a ConfigurationAggregator resource.
type ConfigurationAggregatorArgs struct {
	AccountAggregationSource      ConfigurationAggregatorAccountAggregationSourcePtrInput
	Name                          pulumi.StringPtrInput
	OrganizationAggregationSource ConfigurationAggregatorOrganizationAggregationSourcePtrInput
	Tags                          pulumi.StringMapInput
}

func (ConfigurationAggregatorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationAggregatorArgs)(nil)).Elem()
}

type ConfigurationAggregatorInput interface {
	pulumi.Input

	ToConfigurationAggregatorOutput() ConfigurationAggregatorOutput
	ToConfigurationAggregatorOutputWithContext(ctx context.Context) ConfigurationAggregatorOutput
}

func (*ConfigurationAggregator) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationAggregator)(nil)).Elem()
}

func (i *ConfigurationAggregator) ToConfigurationAggregatorOutput() ConfigurationAggregatorOutput {
	return i.ToConfigurationAggregatorOutputWithContext(context.Background())
}

func (i *ConfigurationAggregator) ToConfigurationAggregatorOutputWithContext(ctx context.Context) ConfigurationAggregatorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationAggregatorOutput)
}

// ConfigurationAggregatorArrayInput is an input type that accepts ConfigurationAggregatorArray and ConfigurationAggregatorArrayOutput values.
// You can construct a concrete instance of `ConfigurationAggregatorArrayInput` via:
//
//	ConfigurationAggregatorArray{ ConfigurationAggregatorArgs{...} }
type ConfigurationAggregatorArrayInput interface {
	pulumi.Input

	ToConfigurationAggregatorArrayOutput() ConfigurationAggregatorArrayOutput
	ToConfigurationAggregatorArrayOutputWithContext(context.Context) ConfigurationAggregatorArrayOutput
}

type ConfigurationAggregatorArray []ConfigurationAggregatorInput

func (ConfigurationAggregatorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigurationAggregator)(nil)).Elem()
}

func (i ConfigurationAggregatorArray) ToConfigurationAggregatorArrayOutput() ConfigurationAggregatorArrayOutput {
	return i.ToConfigurationAggregatorArrayOutputWithContext(context.Background())
}

func (i ConfigurationAggregatorArray) ToConfigurationAggregatorArrayOutputWithContext(ctx context.Context) ConfigurationAggregatorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationAggregatorArrayOutput)
}

// ConfigurationAggregatorMapInput is an input type that accepts ConfigurationAggregatorMap and ConfigurationAggregatorMapOutput values.
// You can construct a concrete instance of `ConfigurationAggregatorMapInput` via:
//
//	ConfigurationAggregatorMap{ "key": ConfigurationAggregatorArgs{...} }
type ConfigurationAggregatorMapInput interface {
	pulumi.Input

	ToConfigurationAggregatorMapOutput() ConfigurationAggregatorMapOutput
	ToConfigurationAggregatorMapOutputWithContext(context.Context) ConfigurationAggregatorMapOutput
}

type ConfigurationAggregatorMap map[string]ConfigurationAggregatorInput

func (ConfigurationAggregatorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigurationAggregator)(nil)).Elem()
}

func (i ConfigurationAggregatorMap) ToConfigurationAggregatorMapOutput() ConfigurationAggregatorMapOutput {
	return i.ToConfigurationAggregatorMapOutputWithContext(context.Background())
}

func (i ConfigurationAggregatorMap) ToConfigurationAggregatorMapOutputWithContext(ctx context.Context) ConfigurationAggregatorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationAggregatorMapOutput)
}

type ConfigurationAggregatorOutput struct{ *pulumi.OutputState }

func (ConfigurationAggregatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationAggregator)(nil)).Elem()
}

func (o ConfigurationAggregatorOutput) ToConfigurationAggregatorOutput() ConfigurationAggregatorOutput {
	return o
}

func (o ConfigurationAggregatorOutput) ToConfigurationAggregatorOutputWithContext(ctx context.Context) ConfigurationAggregatorOutput {
	return o
}

func (o ConfigurationAggregatorOutput) AccountAggregationSource() ConfigurationAggregatorAccountAggregationSourcePtrOutput {
	return o.ApplyT(func(v *ConfigurationAggregator) ConfigurationAggregatorAccountAggregationSourcePtrOutput {
		return v.AccountAggregationSource
	}).(ConfigurationAggregatorAccountAggregationSourcePtrOutput)
}

func (o ConfigurationAggregatorOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigurationAggregator) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ConfigurationAggregatorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigurationAggregator) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ConfigurationAggregatorOutput) OrganizationAggregationSource() ConfigurationAggregatorOrganizationAggregationSourcePtrOutput {
	return o.ApplyT(func(v *ConfigurationAggregator) ConfigurationAggregatorOrganizationAggregationSourcePtrOutput {
		return v.OrganizationAggregationSource
	}).(ConfigurationAggregatorOrganizationAggregationSourcePtrOutput)
}

func (o ConfigurationAggregatorOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConfigurationAggregator) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ConfigurationAggregatorOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConfigurationAggregator) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type ConfigurationAggregatorArrayOutput struct{ *pulumi.OutputState }

func (ConfigurationAggregatorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigurationAggregator)(nil)).Elem()
}

func (o ConfigurationAggregatorArrayOutput) ToConfigurationAggregatorArrayOutput() ConfigurationAggregatorArrayOutput {
	return o
}

func (o ConfigurationAggregatorArrayOutput) ToConfigurationAggregatorArrayOutputWithContext(ctx context.Context) ConfigurationAggregatorArrayOutput {
	return o
}

func (o ConfigurationAggregatorArrayOutput) Index(i pulumi.IntInput) ConfigurationAggregatorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConfigurationAggregator {
		return vs[0].([]*ConfigurationAggregator)[vs[1].(int)]
	}).(ConfigurationAggregatorOutput)
}

type ConfigurationAggregatorMapOutput struct{ *pulumi.OutputState }

func (ConfigurationAggregatorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigurationAggregator)(nil)).Elem()
}

func (o ConfigurationAggregatorMapOutput) ToConfigurationAggregatorMapOutput() ConfigurationAggregatorMapOutput {
	return o
}

func (o ConfigurationAggregatorMapOutput) ToConfigurationAggregatorMapOutputWithContext(ctx context.Context) ConfigurationAggregatorMapOutput {
	return o
}

func (o ConfigurationAggregatorMapOutput) MapIndex(k pulumi.StringInput) ConfigurationAggregatorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConfigurationAggregator {
		return vs[0].(map[string]*ConfigurationAggregator)[vs[1].(string)]
	}).(ConfigurationAggregatorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationAggregatorInput)(nil)).Elem(), &ConfigurationAggregator{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationAggregatorArrayInput)(nil)).Elem(), ConfigurationAggregatorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationAggregatorMapInput)(nil)).Elem(), ConfigurationAggregatorMap{})
	pulumi.RegisterOutputType(ConfigurationAggregatorOutput{})
	pulumi.RegisterOutputType(ConfigurationAggregatorArrayOutput{})
	pulumi.RegisterOutputType(ConfigurationAggregatorMapOutput{})
}
