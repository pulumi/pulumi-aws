// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cfg

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an AWS Config Configuration Aggregator
type ConfigurationAggregator struct {
	s *pulumi.ResourceState
}

// NewConfigurationAggregator registers a new resource with the given unique name, arguments, and options.
func NewConfigurationAggregator(ctx *pulumi.Context,
	name string, args *ConfigurationAggregatorArgs, opts ...pulumi.ResourceOpt) (*ConfigurationAggregator, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accountAggregationSource"] = nil
		inputs["name"] = nil
		inputs["organizationAggregationSource"] = nil
	} else {
		inputs["accountAggregationSource"] = args.AccountAggregationSource
		inputs["name"] = args.Name
		inputs["organizationAggregationSource"] = args.OrganizationAggregationSource
	}
	inputs["arn"] = nil
	s, err := ctx.RegisterResource("aws:cfg/configurationAggregator:ConfigurationAggregator", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ConfigurationAggregator{s: s}, nil
}

// GetConfigurationAggregator gets an existing ConfigurationAggregator resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigurationAggregator(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ConfigurationAggregatorState, opts ...pulumi.ResourceOpt) (*ConfigurationAggregator, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accountAggregationSource"] = state.AccountAggregationSource
		inputs["arn"] = state.Arn
		inputs["name"] = state.Name
		inputs["organizationAggregationSource"] = state.OrganizationAggregationSource
	}
	s, err := ctx.ReadResource("aws:cfg/configurationAggregator:ConfigurationAggregator", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ConfigurationAggregator{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ConfigurationAggregator) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ConfigurationAggregator) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The account(s) to aggregate config data from as documented below.
func (r *ConfigurationAggregator) AccountAggregationSource() *pulumi.Output {
	return r.s.State["accountAggregationSource"]
}

// The ARN of the aggregator
func (r *ConfigurationAggregator) Arn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["arn"])
}

// The name of the configuration aggregator.
func (r *ConfigurationAggregator) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The organization to aggregate config data from as documented below.
func (r *ConfigurationAggregator) OrganizationAggregationSource() *pulumi.Output {
	return r.s.State["organizationAggregationSource"]
}

// Input properties used for looking up and filtering ConfigurationAggregator resources.
type ConfigurationAggregatorState struct {
	// The account(s) to aggregate config data from as documented below.
	AccountAggregationSource interface{}
	// The ARN of the aggregator
	Arn interface{}
	// The name of the configuration aggregator.
	Name interface{}
	// The organization to aggregate config data from as documented below.
	OrganizationAggregationSource interface{}
}

// The set of arguments for constructing a ConfigurationAggregator resource.
type ConfigurationAggregatorArgs struct {
	// The account(s) to aggregate config data from as documented below.
	AccountAggregationSource interface{}
	// The name of the configuration aggregator.
	Name interface{}
	// The organization to aggregate config data from as documented below.
	OrganizationAggregationSource interface{}
}
