// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cfg

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages status (recording / stopped) of an AWS Config Configuration Recorder.
// 
// ~> **Note:** Starting Configuration Recorder requires a [Delivery Channel](https://www.terraform.io/docs/providers/aws/r/config_delivery_channel.html) to be present. Use of `depends_on` (as shown below) is recommended to avoid race conditions.
type RecorderStatus struct {
	s *pulumi.ResourceState
}

// NewRecorderStatus registers a new resource with the given unique name, arguments, and options.
func NewRecorderStatus(ctx *pulumi.Context,
	name string, args *RecorderStatusArgs, opts ...pulumi.ResourceOpt) (*RecorderStatus, error) {
	if args == nil || args.IsEnabled == nil {
		return nil, errors.New("missing required argument 'IsEnabled'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["isEnabled"] = nil
		inputs["name"] = nil
	} else {
		inputs["isEnabled"] = args.IsEnabled
		inputs["name"] = args.Name
	}
	s, err := ctx.RegisterResource("aws:cfg/recorderStatus:RecorderStatus", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RecorderStatus{s: s}, nil
}

// GetRecorderStatus gets an existing RecorderStatus resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRecorderStatus(ctx *pulumi.Context,
	name string, id pulumi.ID, state *RecorderStatusState, opts ...pulumi.ResourceOpt) (*RecorderStatus, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["isEnabled"] = state.IsEnabled
		inputs["name"] = state.Name
	}
	s, err := ctx.ReadResource("aws:cfg/recorderStatus:RecorderStatus", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RecorderStatus{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *RecorderStatus) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *RecorderStatus) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Whether the configuration recorder should be enabled or disabled.
func (r *RecorderStatus) IsEnabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["isEnabled"])
}

// The name of the recorder
func (r *RecorderStatus) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Input properties used for looking up and filtering RecorderStatus resources.
type RecorderStatusState struct {
	// Whether the configuration recorder should be enabled or disabled.
	IsEnabled interface{}
	// The name of the recorder
	Name interface{}
}

// The set of arguments for constructing a RecorderStatus resource.
type RecorderStatusArgs struct {
	// Whether the configuration recorder should be enabled or disabled.
	IsEnabled interface{}
	// The name of the recorder
	Name interface{}
}
