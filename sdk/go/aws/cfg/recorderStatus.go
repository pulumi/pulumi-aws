// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cfg

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages status (recording / stopped) of an AWS Config Configuration Recorder.
//
// > **Note:** Starting Configuration Recorder requires a `Delivery Channel` to be present. Use of `dependsOn` (as shown below) is recommended to avoid race conditions.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-aws/sdk/v3/go/aws/cfg"
// 	"github.com/pulumi/pulumi-aws/sdk/v3/go/aws/iam"
// 	"github.com/pulumi/pulumi-aws/sdk/v3/go/aws/s3"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		bucket, err := s3.NewBucket(ctx, "bucket", nil)
// 		if err != nil {
// 			return err
// 		}
// 		fooDeliveryChannel, err := cfg.NewDeliveryChannel(ctx, "fooDeliveryChannel", &cfg.DeliveryChannelArgs{
// 			S3BucketName: bucket.Bucket,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = cfg.NewRecorderStatus(ctx, "fooRecorderStatus", &cfg.RecorderStatusArgs{
// 			IsEnabled: pulumi.Bool(true),
// 		}, pulumi.DependsOn([]pulumi.Resource{
// 			fooDeliveryChannel,
// 		}))
// 		if err != nil {
// 			return err
// 		}
// 		role, err := iam.NewRole(ctx, "role", &iam.RoleArgs{
// 			AssumeRolePolicy: pulumi.String(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"Version\": \"2012-10-17\",\n", "  \"Statement\": [\n", "    {\n", "      \"Action\": \"sts:AssumeRole\",\n", "      \"Principal\": {\n", "        \"Service\": \"config.amazonaws.com\"\n", "      },\n", "      \"Effect\": \"Allow\",\n", "      \"Sid\": \"\"\n", "    }\n", "  ]\n", "}\n")),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = iam.NewRolePolicyAttachment(ctx, "rolePolicyAttachment", &iam.RolePolicyAttachmentArgs{
// 			Role:      role.Name,
// 			PolicyArn: pulumi.String("arn:aws:iam::aws:policy/service-role/AWSConfigRole"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = cfg.NewRecorder(ctx, "fooRecorder", &cfg.RecorderArgs{
// 			RoleArn: role.Arn,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = iam.NewRolePolicy(ctx, "rolePolicy", &iam.RolePolicyArgs{
// 			Role: role.ID(),
// 			Policy: pulumi.All(bucket.Arn, bucket.Arn).ApplyT(func(_args []interface{}) (string, error) {
// 				bucketArn := _args[0].(string)
// 				bucketArn1 := _args[1].(string)
// 				return fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"Version\": \"2012-10-17\",\n", "  \"Statement\": [\n", "    {\n", "      \"Action\": [\n", "        \"s3:*\"\n", "      ],\n", "      \"Effect\": \"Allow\",\n", "      \"Resource\": [\n", "        \"", bucketArn, "\",\n", "        \"", bucketArn1, "/*\"\n", "      ]\n", "    }\n", "  ]\n", "}\n"), nil
// 			}).(pulumi.StringOutput),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Configuration Recorder Status can be imported using the name of the Configuration Recorder, e.g.
//
// ```sh
//  $ pulumi import aws:cfg/recorderStatus:RecorderStatus foo example
// ```
type RecorderStatus struct {
	pulumi.CustomResourceState

	// Whether the configuration recorder should be enabled or disabled.
	IsEnabled pulumi.BoolOutput `pulumi:"isEnabled"`
	// The name of the recorder
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewRecorderStatus registers a new resource with the given unique name, arguments, and options.
func NewRecorderStatus(ctx *pulumi.Context,
	name string, args *RecorderStatusArgs, opts ...pulumi.ResourceOption) (*RecorderStatus, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IsEnabled == nil {
		return nil, errors.New("invalid value for required argument 'IsEnabled'")
	}
	var resource RecorderStatus
	err := ctx.RegisterResource("aws:cfg/recorderStatus:RecorderStatus", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRecorderStatus gets an existing RecorderStatus resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRecorderStatus(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RecorderStatusState, opts ...pulumi.ResourceOption) (*RecorderStatus, error) {
	var resource RecorderStatus
	err := ctx.ReadResource("aws:cfg/recorderStatus:RecorderStatus", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RecorderStatus resources.
type recorderStatusState struct {
	// Whether the configuration recorder should be enabled or disabled.
	IsEnabled *bool `pulumi:"isEnabled"`
	// The name of the recorder
	Name *string `pulumi:"name"`
}

type RecorderStatusState struct {
	// Whether the configuration recorder should be enabled or disabled.
	IsEnabled pulumi.BoolPtrInput
	// The name of the recorder
	Name pulumi.StringPtrInput
}

func (RecorderStatusState) ElementType() reflect.Type {
	return reflect.TypeOf((*recorderStatusState)(nil)).Elem()
}

type recorderStatusArgs struct {
	// Whether the configuration recorder should be enabled or disabled.
	IsEnabled bool `pulumi:"isEnabled"`
	// The name of the recorder
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a RecorderStatus resource.
type RecorderStatusArgs struct {
	// Whether the configuration recorder should be enabled or disabled.
	IsEnabled pulumi.BoolInput
	// The name of the recorder
	Name pulumi.StringPtrInput
}

func (RecorderStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*recorderStatusArgs)(nil)).Elem()
}

type RecorderStatusInput interface {
	pulumi.Input

	ToRecorderStatusOutput() RecorderStatusOutput
	ToRecorderStatusOutputWithContext(ctx context.Context) RecorderStatusOutput
}

func (RecorderStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*RecorderStatus)(nil)).Elem()
}

func (i RecorderStatus) ToRecorderStatusOutput() RecorderStatusOutput {
	return i.ToRecorderStatusOutputWithContext(context.Background())
}

func (i RecorderStatus) ToRecorderStatusOutputWithContext(ctx context.Context) RecorderStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecorderStatusOutput)
}

type RecorderStatusOutput struct {
	*pulumi.OutputState
}

func (RecorderStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecorderStatusOutput)(nil)).Elem()
}

func (o RecorderStatusOutput) ToRecorderStatusOutput() RecorderStatusOutput {
	return o
}

func (o RecorderStatusOutput) ToRecorderStatusOutputWithContext(ctx context.Context) RecorderStatusOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(RecorderStatusOutput{})
}
