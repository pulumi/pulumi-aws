// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cfg

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an AWS Config Aggregate Authorization
type AggregateAuthorization struct {
	s *pulumi.ResourceState
}

// NewAggregateAuthorization registers a new resource with the given unique name, arguments, and options.
func NewAggregateAuthorization(ctx *pulumi.Context,
	name string, args *AggregateAuthorizationArgs, opts ...pulumi.ResourceOpt) (*AggregateAuthorization, error) {
	if args == nil || args.AccountId == nil {
		return nil, errors.New("missing required argument 'AccountId'")
	}
	if args == nil || args.Region == nil {
		return nil, errors.New("missing required argument 'Region'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accountId"] = nil
		inputs["region"] = nil
	} else {
		inputs["accountId"] = args.AccountId
		inputs["region"] = args.Region
	}
	inputs["arn"] = nil
	s, err := ctx.RegisterResource("aws:cfg/aggregateAuthorization:AggregateAuthorization", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AggregateAuthorization{s: s}, nil
}

// GetAggregateAuthorization gets an existing AggregateAuthorization resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAggregateAuthorization(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AggregateAuthorizationState, opts ...pulumi.ResourceOpt) (*AggregateAuthorization, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accountId"] = state.AccountId
		inputs["arn"] = state.Arn
		inputs["region"] = state.Region
	}
	s, err := ctx.ReadResource("aws:cfg/aggregateAuthorization:AggregateAuthorization", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AggregateAuthorization{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AggregateAuthorization) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AggregateAuthorization) ID() *pulumi.IDOutput {
	return r.s.ID
}

// Account ID
func (r *AggregateAuthorization) AccountId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["accountId"])
}

// The ARN of the authorization
func (r *AggregateAuthorization) Arn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["arn"])
}

// Region
func (r *AggregateAuthorization) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// Input properties used for looking up and filtering AggregateAuthorization resources.
type AggregateAuthorizationState struct {
	// Account ID
	AccountId interface{}
	// The ARN of the authorization
	Arn interface{}
	// Region
	Region interface{}
}

// The set of arguments for constructing a AggregateAuthorization resource.
type AggregateAuthorizationArgs struct {
	// Account ID
	AccountId interface{}
	// Region
	Region interface{}
}
