// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cfg

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Recorder struct {
	pulumi.CustomResourceState

	Name           pulumi.StringOutput          `pulumi:"name"`
	RecordingGroup RecorderRecordingGroupOutput `pulumi:"recordingGroup"`
	RoleArn        pulumi.StringOutput          `pulumi:"roleArn"`
}

// NewRecorder registers a new resource with the given unique name, arguments, and options.
func NewRecorder(ctx *pulumi.Context,
	name string, args *RecorderArgs, opts ...pulumi.ResourceOption) (*Recorder, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	var resource Recorder
	err := ctx.RegisterResource("aws:cfg/recorder:Recorder", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRecorder gets an existing Recorder resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRecorder(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RecorderState, opts ...pulumi.ResourceOption) (*Recorder, error) {
	var resource Recorder
	err := ctx.ReadResource("aws:cfg/recorder:Recorder", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Recorder resources.
type recorderState struct {
	Name           *string                 `pulumi:"name"`
	RecordingGroup *RecorderRecordingGroup `pulumi:"recordingGroup"`
	RoleArn        *string                 `pulumi:"roleArn"`
}

type RecorderState struct {
	Name           pulumi.StringPtrInput
	RecordingGroup RecorderRecordingGroupPtrInput
	RoleArn        pulumi.StringPtrInput
}

func (RecorderState) ElementType() reflect.Type {
	return reflect.TypeOf((*recorderState)(nil)).Elem()
}

type recorderArgs struct {
	Name           *string                 `pulumi:"name"`
	RecordingGroup *RecorderRecordingGroup `pulumi:"recordingGroup"`
	RoleArn        string                  `pulumi:"roleArn"`
}

// The set of arguments for constructing a Recorder resource.
type RecorderArgs struct {
	Name           pulumi.StringPtrInput
	RecordingGroup RecorderRecordingGroupPtrInput
	RoleArn        pulumi.StringInput
}

func (RecorderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*recorderArgs)(nil)).Elem()
}

type RecorderInput interface {
	pulumi.Input

	ToRecorderOutput() RecorderOutput
	ToRecorderOutputWithContext(ctx context.Context) RecorderOutput
}

func (*Recorder) ElementType() reflect.Type {
	return reflect.TypeOf((**Recorder)(nil)).Elem()
}

func (i *Recorder) ToRecorderOutput() RecorderOutput {
	return i.ToRecorderOutputWithContext(context.Background())
}

func (i *Recorder) ToRecorderOutputWithContext(ctx context.Context) RecorderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecorderOutput)
}

// RecorderArrayInput is an input type that accepts RecorderArray and RecorderArrayOutput values.
// You can construct a concrete instance of `RecorderArrayInput` via:
//
//	RecorderArray{ RecorderArgs{...} }
type RecorderArrayInput interface {
	pulumi.Input

	ToRecorderArrayOutput() RecorderArrayOutput
	ToRecorderArrayOutputWithContext(context.Context) RecorderArrayOutput
}

type RecorderArray []RecorderInput

func (RecorderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Recorder)(nil)).Elem()
}

func (i RecorderArray) ToRecorderArrayOutput() RecorderArrayOutput {
	return i.ToRecorderArrayOutputWithContext(context.Background())
}

func (i RecorderArray) ToRecorderArrayOutputWithContext(ctx context.Context) RecorderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecorderArrayOutput)
}

// RecorderMapInput is an input type that accepts RecorderMap and RecorderMapOutput values.
// You can construct a concrete instance of `RecorderMapInput` via:
//
//	RecorderMap{ "key": RecorderArgs{...} }
type RecorderMapInput interface {
	pulumi.Input

	ToRecorderMapOutput() RecorderMapOutput
	ToRecorderMapOutputWithContext(context.Context) RecorderMapOutput
}

type RecorderMap map[string]RecorderInput

func (RecorderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Recorder)(nil)).Elem()
}

func (i RecorderMap) ToRecorderMapOutput() RecorderMapOutput {
	return i.ToRecorderMapOutputWithContext(context.Background())
}

func (i RecorderMap) ToRecorderMapOutputWithContext(ctx context.Context) RecorderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecorderMapOutput)
}

type RecorderOutput struct{ *pulumi.OutputState }

func (RecorderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Recorder)(nil)).Elem()
}

func (o RecorderOutput) ToRecorderOutput() RecorderOutput {
	return o
}

func (o RecorderOutput) ToRecorderOutputWithContext(ctx context.Context) RecorderOutput {
	return o
}

func (o RecorderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Recorder) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RecorderOutput) RecordingGroup() RecorderRecordingGroupOutput {
	return o.ApplyT(func(v *Recorder) RecorderRecordingGroupOutput { return v.RecordingGroup }).(RecorderRecordingGroupOutput)
}

func (o RecorderOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Recorder) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

type RecorderArrayOutput struct{ *pulumi.OutputState }

func (RecorderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Recorder)(nil)).Elem()
}

func (o RecorderArrayOutput) ToRecorderArrayOutput() RecorderArrayOutput {
	return o
}

func (o RecorderArrayOutput) ToRecorderArrayOutputWithContext(ctx context.Context) RecorderArrayOutput {
	return o
}

func (o RecorderArrayOutput) Index(i pulumi.IntInput) RecorderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Recorder {
		return vs[0].([]*Recorder)[vs[1].(int)]
	}).(RecorderOutput)
}

type RecorderMapOutput struct{ *pulumi.OutputState }

func (RecorderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Recorder)(nil)).Elem()
}

func (o RecorderMapOutput) ToRecorderMapOutput() RecorderMapOutput {
	return o
}

func (o RecorderMapOutput) ToRecorderMapOutputWithContext(ctx context.Context) RecorderMapOutput {
	return o
}

func (o RecorderMapOutput) MapIndex(k pulumi.StringInput) RecorderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Recorder {
		return vs[0].(map[string]*Recorder)[vs[1].(string)]
	}).(RecorderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RecorderInput)(nil)).Elem(), &Recorder{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecorderArrayInput)(nil)).Elem(), RecorderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecorderMapInput)(nil)).Elem(), RecorderMap{})
	pulumi.RegisterOutputType(RecorderOutput{})
	pulumi.RegisterOutputType(RecorderArrayOutput{})
	pulumi.RegisterOutputType(RecorderMapOutput{})
}
