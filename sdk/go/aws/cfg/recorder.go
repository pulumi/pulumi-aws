// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cfg

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an AWS Config Configuration Recorder. Please note that this resource **does not start** the created recorder automatically.
// 
// ~> **Note:** _Starting_ the Configuration Recorder requires a [delivery channel](/docs/providers/aws/r/config_delivery_channel.html) (while delivery channel creation requires Configuration Recorder). This is why [`aws_config_configuration_recorder_status`](/docs/providers/aws/r/config_configuration_recorder_status.html) is a separate resource.
type Recorder struct {
	s *pulumi.ResourceState
}

// NewRecorder registers a new resource with the given unique name, arguments, and options.
func NewRecorder(ctx *pulumi.Context,
	name string, args *RecorderArgs, opts ...pulumi.ResourceOpt) (*Recorder, error) {
	if args == nil || args.RoleArn == nil {
		return nil, errors.New("missing required argument 'RoleArn'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["name"] = nil
		inputs["recordingGroup"] = nil
		inputs["roleArn"] = nil
	} else {
		inputs["name"] = args.Name
		inputs["recordingGroup"] = args.RecordingGroup
		inputs["roleArn"] = args.RoleArn
	}
	s, err := ctx.RegisterResource("aws:cfg/recorder:Recorder", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Recorder{s: s}, nil
}

// GetRecorder gets an existing Recorder resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRecorder(ctx *pulumi.Context,
	name string, id pulumi.ID, state *RecorderState, opts ...pulumi.ResourceOpt) (*Recorder, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["name"] = state.Name
		inputs["recordingGroup"] = state.RecordingGroup
		inputs["roleArn"] = state.RoleArn
	}
	s, err := ctx.ReadResource("aws:cfg/recorder:Recorder", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Recorder{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Recorder) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Recorder) ID() *pulumi.IDOutput {
	return r.s.ID
}

// The name of the recorder. Defaults to `default`. Changing it recreates the resource.
func (r *Recorder) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Recording group - see below.
func (r *Recorder) RecordingGroup() *pulumi.Output {
	return r.s.State["recordingGroup"]
}

// Amazon Resource Name (ARN) of the IAM role.
// used to make read or write requests to the delivery channel and to describe the AWS resources associated with the account.
// See [AWS Docs](http://docs.aws.amazon.com/config/latest/developerguide/iamrole-permissions.html) for more details.
func (r *Recorder) RoleArn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["roleArn"])
}

// Input properties used for looking up and filtering Recorder resources.
type RecorderState struct {
	// The name of the recorder. Defaults to `default`. Changing it recreates the resource.
	Name interface{}
	// Recording group - see below.
	RecordingGroup interface{}
	// Amazon Resource Name (ARN) of the IAM role.
	// used to make read or write requests to the delivery channel and to describe the AWS resources associated with the account.
	// See [AWS Docs](http://docs.aws.amazon.com/config/latest/developerguide/iamrole-permissions.html) for more details.
	RoleArn interface{}
}

// The set of arguments for constructing a Recorder resource.
type RecorderArgs struct {
	// The name of the recorder. Defaults to `default`. Changing it recreates the resource.
	Name interface{}
	// Recording group - see below.
	RecordingGroup interface{}
	// Amazon Resource Name (ARN) of the IAM role.
	// used to make read or write requests to the delivery channel and to describe the AWS resources associated with the account.
	// See [AWS Docs](http://docs.aws.amazon.com/config/latest/developerguide/iamrole-permissions.html) for more details.
	RoleArn interface{}
}
