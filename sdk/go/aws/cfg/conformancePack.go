// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cfg

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ConformancePack struct {
	pulumi.CustomResourceState

	Arn                 pulumi.StringOutput                      `pulumi:"arn"`
	DeliveryS3Bucket    pulumi.StringPtrOutput                   `pulumi:"deliveryS3Bucket"`
	DeliveryS3KeyPrefix pulumi.StringPtrOutput                   `pulumi:"deliveryS3KeyPrefix"`
	InputParameters     ConformancePackInputParameterArrayOutput `pulumi:"inputParameters"`
	Name                pulumi.StringOutput                      `pulumi:"name"`
	TemplateBody        pulumi.StringPtrOutput                   `pulumi:"templateBody"`
	TemplateS3Uri       pulumi.StringPtrOutput                   `pulumi:"templateS3Uri"`
}

// NewConformancePack registers a new resource with the given unique name, arguments, and options.
func NewConformancePack(ctx *pulumi.Context,
	name string, args *ConformancePackArgs, opts ...pulumi.ResourceOption) (*ConformancePack, error) {
	if args == nil {
		args = &ConformancePackArgs{}
	}

	var resource ConformancePack
	err := ctx.RegisterResource("aws:cfg/conformancePack:ConformancePack", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConformancePack gets an existing ConformancePack resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConformancePack(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConformancePackState, opts ...pulumi.ResourceOption) (*ConformancePack, error) {
	var resource ConformancePack
	err := ctx.ReadResource("aws:cfg/conformancePack:ConformancePack", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConformancePack resources.
type conformancePackState struct {
	Arn                 *string                         `pulumi:"arn"`
	DeliveryS3Bucket    *string                         `pulumi:"deliveryS3Bucket"`
	DeliveryS3KeyPrefix *string                         `pulumi:"deliveryS3KeyPrefix"`
	InputParameters     []ConformancePackInputParameter `pulumi:"inputParameters"`
	Name                *string                         `pulumi:"name"`
	TemplateBody        *string                         `pulumi:"templateBody"`
	TemplateS3Uri       *string                         `pulumi:"templateS3Uri"`
}

type ConformancePackState struct {
	Arn                 pulumi.StringPtrInput
	DeliveryS3Bucket    pulumi.StringPtrInput
	DeliveryS3KeyPrefix pulumi.StringPtrInput
	InputParameters     ConformancePackInputParameterArrayInput
	Name                pulumi.StringPtrInput
	TemplateBody        pulumi.StringPtrInput
	TemplateS3Uri       pulumi.StringPtrInput
}

func (ConformancePackState) ElementType() reflect.Type {
	return reflect.TypeOf((*conformancePackState)(nil)).Elem()
}

type conformancePackArgs struct {
	DeliveryS3Bucket    *string                         `pulumi:"deliveryS3Bucket"`
	DeliveryS3KeyPrefix *string                         `pulumi:"deliveryS3KeyPrefix"`
	InputParameters     []ConformancePackInputParameter `pulumi:"inputParameters"`
	Name                *string                         `pulumi:"name"`
	TemplateBody        *string                         `pulumi:"templateBody"`
	TemplateS3Uri       *string                         `pulumi:"templateS3Uri"`
}

// The set of arguments for constructing a ConformancePack resource.
type ConformancePackArgs struct {
	DeliveryS3Bucket    pulumi.StringPtrInput
	DeliveryS3KeyPrefix pulumi.StringPtrInput
	InputParameters     ConformancePackInputParameterArrayInput
	Name                pulumi.StringPtrInput
	TemplateBody        pulumi.StringPtrInput
	TemplateS3Uri       pulumi.StringPtrInput
}

func (ConformancePackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*conformancePackArgs)(nil)).Elem()
}

type ConformancePackInput interface {
	pulumi.Input

	ToConformancePackOutput() ConformancePackOutput
	ToConformancePackOutputWithContext(ctx context.Context) ConformancePackOutput
}

func (*ConformancePack) ElementType() reflect.Type {
	return reflect.TypeOf((**ConformancePack)(nil)).Elem()
}

func (i *ConformancePack) ToConformancePackOutput() ConformancePackOutput {
	return i.ToConformancePackOutputWithContext(context.Background())
}

func (i *ConformancePack) ToConformancePackOutputWithContext(ctx context.Context) ConformancePackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConformancePackOutput)
}

// ConformancePackArrayInput is an input type that accepts ConformancePackArray and ConformancePackArrayOutput values.
// You can construct a concrete instance of `ConformancePackArrayInput` via:
//
//	ConformancePackArray{ ConformancePackArgs{...} }
type ConformancePackArrayInput interface {
	pulumi.Input

	ToConformancePackArrayOutput() ConformancePackArrayOutput
	ToConformancePackArrayOutputWithContext(context.Context) ConformancePackArrayOutput
}

type ConformancePackArray []ConformancePackInput

func (ConformancePackArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConformancePack)(nil)).Elem()
}

func (i ConformancePackArray) ToConformancePackArrayOutput() ConformancePackArrayOutput {
	return i.ToConformancePackArrayOutputWithContext(context.Background())
}

func (i ConformancePackArray) ToConformancePackArrayOutputWithContext(ctx context.Context) ConformancePackArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConformancePackArrayOutput)
}

// ConformancePackMapInput is an input type that accepts ConformancePackMap and ConformancePackMapOutput values.
// You can construct a concrete instance of `ConformancePackMapInput` via:
//
//	ConformancePackMap{ "key": ConformancePackArgs{...} }
type ConformancePackMapInput interface {
	pulumi.Input

	ToConformancePackMapOutput() ConformancePackMapOutput
	ToConformancePackMapOutputWithContext(context.Context) ConformancePackMapOutput
}

type ConformancePackMap map[string]ConformancePackInput

func (ConformancePackMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConformancePack)(nil)).Elem()
}

func (i ConformancePackMap) ToConformancePackMapOutput() ConformancePackMapOutput {
	return i.ToConformancePackMapOutputWithContext(context.Background())
}

func (i ConformancePackMap) ToConformancePackMapOutputWithContext(ctx context.Context) ConformancePackMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConformancePackMapOutput)
}

type ConformancePackOutput struct{ *pulumi.OutputState }

func (ConformancePackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConformancePack)(nil)).Elem()
}

func (o ConformancePackOutput) ToConformancePackOutput() ConformancePackOutput {
	return o
}

func (o ConformancePackOutput) ToConformancePackOutputWithContext(ctx context.Context) ConformancePackOutput {
	return o
}

func (o ConformancePackOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ConformancePack) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ConformancePackOutput) DeliveryS3Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConformancePack) pulumi.StringPtrOutput { return v.DeliveryS3Bucket }).(pulumi.StringPtrOutput)
}

func (o ConformancePackOutput) DeliveryS3KeyPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConformancePack) pulumi.StringPtrOutput { return v.DeliveryS3KeyPrefix }).(pulumi.StringPtrOutput)
}

func (o ConformancePackOutput) InputParameters() ConformancePackInputParameterArrayOutput {
	return o.ApplyT(func(v *ConformancePack) ConformancePackInputParameterArrayOutput { return v.InputParameters }).(ConformancePackInputParameterArrayOutput)
}

func (o ConformancePackOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConformancePack) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ConformancePackOutput) TemplateBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConformancePack) pulumi.StringPtrOutput { return v.TemplateBody }).(pulumi.StringPtrOutput)
}

func (o ConformancePackOutput) TemplateS3Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConformancePack) pulumi.StringPtrOutput { return v.TemplateS3Uri }).(pulumi.StringPtrOutput)
}

type ConformancePackArrayOutput struct{ *pulumi.OutputState }

func (ConformancePackArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConformancePack)(nil)).Elem()
}

func (o ConformancePackArrayOutput) ToConformancePackArrayOutput() ConformancePackArrayOutput {
	return o
}

func (o ConformancePackArrayOutput) ToConformancePackArrayOutputWithContext(ctx context.Context) ConformancePackArrayOutput {
	return o
}

func (o ConformancePackArrayOutput) Index(i pulumi.IntInput) ConformancePackOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConformancePack {
		return vs[0].([]*ConformancePack)[vs[1].(int)]
	}).(ConformancePackOutput)
}

type ConformancePackMapOutput struct{ *pulumi.OutputState }

func (ConformancePackMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConformancePack)(nil)).Elem()
}

func (o ConformancePackMapOutput) ToConformancePackMapOutput() ConformancePackMapOutput {
	return o
}

func (o ConformancePackMapOutput) ToConformancePackMapOutputWithContext(ctx context.Context) ConformancePackMapOutput {
	return o
}

func (o ConformancePackMapOutput) MapIndex(k pulumi.StringInput) ConformancePackOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConformancePack {
		return vs[0].(map[string]*ConformancePack)[vs[1].(string)]
	}).(ConformancePackOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConformancePackInput)(nil)).Elem(), &ConformancePack{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConformancePackArrayInput)(nil)).Elem(), ConformancePackArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConformancePackMapInput)(nil)).Elem(), ConformancePackMap{})
	pulumi.RegisterOutputType(ConformancePackOutput{})
	pulumi.RegisterOutputType(ConformancePackArrayOutput{})
	pulumi.RegisterOutputType(ConformancePackMapOutput{})
}
