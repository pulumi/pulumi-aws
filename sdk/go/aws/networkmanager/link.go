// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkmanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a link for a site.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/networkmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := networkmanager.NewLink(ctx, "example", &networkmanager.LinkArgs{
//				GlobalNetworkId: pulumi.Any(aws_networkmanager_global_network.Example.Id),
//				SiteId:          pulumi.Any(aws_networkmanager_site.Example.Id),
//				Bandwidth: &networkmanager.LinkBandwidthArgs{
//					UploadSpeed:   pulumi.Int(10),
//					DownloadSpeed: pulumi.Int(50),
//				},
//				ProviderName: pulumi.String("MegaCorp"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import `aws_networkmanager_link` using the link ARN. For example:
//
// ```sh
//
//	$ pulumi import aws:networkmanager/link:Link example arn:aws:networkmanager::123456789012:link/global-network-0d47f6t230mz46dy4/link-444555aaabbb11223
//
// ```
type Link struct {
	pulumi.CustomResourceState

	// Link Amazon Resource Name (ARN).
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The upload speed and download speed in Mbps. Documented below.
	Bandwidth LinkBandwidthOutput `pulumi:"bandwidth"`
	// A description of the link.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The ID of the global network.
	GlobalNetworkId pulumi.StringOutput `pulumi:"globalNetworkId"`
	// The provider of the link.
	ProviderName pulumi.StringPtrOutput `pulumi:"providerName"`
	// The ID of the site.
	SiteId pulumi.StringOutput `pulumi:"siteId"`
	// Key-value tags for the link. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// The type of the link.
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewLink registers a new resource with the given unique name, arguments, and options.
func NewLink(ctx *pulumi.Context,
	name string, args *LinkArgs, opts ...pulumi.ResourceOption) (*Link, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bandwidth == nil {
		return nil, errors.New("invalid value for required argument 'Bandwidth'")
	}
	if args.GlobalNetworkId == nil {
		return nil, errors.New("invalid value for required argument 'GlobalNetworkId'")
	}
	if args.SiteId == nil {
		return nil, errors.New("invalid value for required argument 'SiteId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"tagsAll",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Link
	err := ctx.RegisterResource("aws:networkmanager/link:Link", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLink gets an existing Link resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LinkState, opts ...pulumi.ResourceOption) (*Link, error) {
	var resource Link
	err := ctx.ReadResource("aws:networkmanager/link:Link", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Link resources.
type linkState struct {
	// Link Amazon Resource Name (ARN).
	Arn *string `pulumi:"arn"`
	// The upload speed and download speed in Mbps. Documented below.
	Bandwidth *LinkBandwidth `pulumi:"bandwidth"`
	// A description of the link.
	Description *string `pulumi:"description"`
	// The ID of the global network.
	GlobalNetworkId *string `pulumi:"globalNetworkId"`
	// The provider of the link.
	ProviderName *string `pulumi:"providerName"`
	// The ID of the site.
	SiteId *string `pulumi:"siteId"`
	// Key-value tags for the link. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The type of the link.
	Type *string `pulumi:"type"`
}

type LinkState struct {
	// Link Amazon Resource Name (ARN).
	Arn pulumi.StringPtrInput
	// The upload speed and download speed in Mbps. Documented below.
	Bandwidth LinkBandwidthPtrInput
	// A description of the link.
	Description pulumi.StringPtrInput
	// The ID of the global network.
	GlobalNetworkId pulumi.StringPtrInput
	// The provider of the link.
	ProviderName pulumi.StringPtrInput
	// The ID of the site.
	SiteId pulumi.StringPtrInput
	// Key-value tags for the link. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
	// The type of the link.
	Type pulumi.StringPtrInput
}

func (LinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*linkState)(nil)).Elem()
}

type linkArgs struct {
	// The upload speed and download speed in Mbps. Documented below.
	Bandwidth LinkBandwidth `pulumi:"bandwidth"`
	// A description of the link.
	Description *string `pulumi:"description"`
	// The ID of the global network.
	GlobalNetworkId string `pulumi:"globalNetworkId"`
	// The provider of the link.
	ProviderName *string `pulumi:"providerName"`
	// The ID of the site.
	SiteId string `pulumi:"siteId"`
	// Key-value tags for the link. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The type of the link.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a Link resource.
type LinkArgs struct {
	// The upload speed and download speed in Mbps. Documented below.
	Bandwidth LinkBandwidthInput
	// A description of the link.
	Description pulumi.StringPtrInput
	// The ID of the global network.
	GlobalNetworkId pulumi.StringInput
	// The provider of the link.
	ProviderName pulumi.StringPtrInput
	// The ID of the site.
	SiteId pulumi.StringInput
	// Key-value tags for the link. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// The type of the link.
	Type pulumi.StringPtrInput
}

func (LinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*linkArgs)(nil)).Elem()
}

type LinkInput interface {
	pulumi.Input

	ToLinkOutput() LinkOutput
	ToLinkOutputWithContext(ctx context.Context) LinkOutput
}

func (*Link) ElementType() reflect.Type {
	return reflect.TypeOf((**Link)(nil)).Elem()
}

func (i *Link) ToLinkOutput() LinkOutput {
	return i.ToLinkOutputWithContext(context.Background())
}

func (i *Link) ToLinkOutputWithContext(ctx context.Context) LinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkOutput)
}

func (i *Link) ToOutput(ctx context.Context) pulumix.Output[*Link] {
	return pulumix.Output[*Link]{
		OutputState: i.ToLinkOutputWithContext(ctx).OutputState,
	}
}

// LinkArrayInput is an input type that accepts LinkArray and LinkArrayOutput values.
// You can construct a concrete instance of `LinkArrayInput` via:
//
//	LinkArray{ LinkArgs{...} }
type LinkArrayInput interface {
	pulumi.Input

	ToLinkArrayOutput() LinkArrayOutput
	ToLinkArrayOutputWithContext(context.Context) LinkArrayOutput
}

type LinkArray []LinkInput

func (LinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Link)(nil)).Elem()
}

func (i LinkArray) ToLinkArrayOutput() LinkArrayOutput {
	return i.ToLinkArrayOutputWithContext(context.Background())
}

func (i LinkArray) ToLinkArrayOutputWithContext(ctx context.Context) LinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkArrayOutput)
}

func (i LinkArray) ToOutput(ctx context.Context) pulumix.Output[[]*Link] {
	return pulumix.Output[[]*Link]{
		OutputState: i.ToLinkArrayOutputWithContext(ctx).OutputState,
	}
}

// LinkMapInput is an input type that accepts LinkMap and LinkMapOutput values.
// You can construct a concrete instance of `LinkMapInput` via:
//
//	LinkMap{ "key": LinkArgs{...} }
type LinkMapInput interface {
	pulumi.Input

	ToLinkMapOutput() LinkMapOutput
	ToLinkMapOutputWithContext(context.Context) LinkMapOutput
}

type LinkMap map[string]LinkInput

func (LinkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Link)(nil)).Elem()
}

func (i LinkMap) ToLinkMapOutput() LinkMapOutput {
	return i.ToLinkMapOutputWithContext(context.Background())
}

func (i LinkMap) ToLinkMapOutputWithContext(ctx context.Context) LinkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkMapOutput)
}

func (i LinkMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Link] {
	return pulumix.Output[map[string]*Link]{
		OutputState: i.ToLinkMapOutputWithContext(ctx).OutputState,
	}
}

type LinkOutput struct{ *pulumi.OutputState }

func (LinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Link)(nil)).Elem()
}

func (o LinkOutput) ToLinkOutput() LinkOutput {
	return o
}

func (o LinkOutput) ToLinkOutputWithContext(ctx context.Context) LinkOutput {
	return o
}

func (o LinkOutput) ToOutput(ctx context.Context) pulumix.Output[*Link] {
	return pulumix.Output[*Link]{
		OutputState: o.OutputState,
	}
}

// Link Amazon Resource Name (ARN).
func (o LinkOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Link) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The upload speed and download speed in Mbps. Documented below.
func (o LinkOutput) Bandwidth() LinkBandwidthOutput {
	return o.ApplyT(func(v *Link) LinkBandwidthOutput { return v.Bandwidth }).(LinkBandwidthOutput)
}

// A description of the link.
func (o LinkOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Link) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The ID of the global network.
func (o LinkOutput) GlobalNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *Link) pulumi.StringOutput { return v.GlobalNetworkId }).(pulumi.StringOutput)
}

// The provider of the link.
func (o LinkOutput) ProviderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Link) pulumi.StringPtrOutput { return v.ProviderName }).(pulumi.StringPtrOutput)
}

// The ID of the site.
func (o LinkOutput) SiteId() pulumi.StringOutput {
	return o.ApplyT(func(v *Link) pulumi.StringOutput { return v.SiteId }).(pulumi.StringOutput)
}

// Key-value tags for the link. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o LinkOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Link) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o LinkOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Link) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// The type of the link.
func (o LinkOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Link) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

type LinkArrayOutput struct{ *pulumi.OutputState }

func (LinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Link)(nil)).Elem()
}

func (o LinkArrayOutput) ToLinkArrayOutput() LinkArrayOutput {
	return o
}

func (o LinkArrayOutput) ToLinkArrayOutputWithContext(ctx context.Context) LinkArrayOutput {
	return o
}

func (o LinkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Link] {
	return pulumix.Output[[]*Link]{
		OutputState: o.OutputState,
	}
}

func (o LinkArrayOutput) Index(i pulumi.IntInput) LinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Link {
		return vs[0].([]*Link)[vs[1].(int)]
	}).(LinkOutput)
}

type LinkMapOutput struct{ *pulumi.OutputState }

func (LinkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Link)(nil)).Elem()
}

func (o LinkMapOutput) ToLinkMapOutput() LinkMapOutput {
	return o
}

func (o LinkMapOutput) ToLinkMapOutputWithContext(ctx context.Context) LinkMapOutput {
	return o
}

func (o LinkMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Link] {
	return pulumix.Output[map[string]*Link]{
		OutputState: o.OutputState,
	}
}

func (o LinkMapOutput) MapIndex(k pulumi.StringInput) LinkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Link {
		return vs[0].(map[string]*Link)[vs[1].(string)]
	}).(LinkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LinkInput)(nil)).Elem(), &Link{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkArrayInput)(nil)).Elem(), LinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkMapInput)(nil)).Elem(), LinkMap{})
	pulumi.RegisterOutputType(LinkOutput{})
	pulumi.RegisterOutputType(LinkArrayOutput{})
	pulumi.RegisterOutputType(LinkMapOutput{})
}
