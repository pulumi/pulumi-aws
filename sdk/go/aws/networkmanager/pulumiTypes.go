// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkmanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DeviceAwsLocation struct {
	// The Amazon Resource Name (ARN) of the subnet that the device is located in.
	SubnetArn *string `pulumi:"subnetArn"`
	// The Zone that the device is located in. Specify the ID of an Availability Zone, Local Zone, Wavelength Zone, or an Outpost.
	Zone *string `pulumi:"zone"`
}

// DeviceAwsLocationInput is an input type that accepts DeviceAwsLocationArgs and DeviceAwsLocationOutput values.
// You can construct a concrete instance of `DeviceAwsLocationInput` via:
//
//	DeviceAwsLocationArgs{...}
type DeviceAwsLocationInput interface {
	pulumi.Input

	ToDeviceAwsLocationOutput() DeviceAwsLocationOutput
	ToDeviceAwsLocationOutputWithContext(context.Context) DeviceAwsLocationOutput
}

type DeviceAwsLocationArgs struct {
	// The Amazon Resource Name (ARN) of the subnet that the device is located in.
	SubnetArn pulumi.StringPtrInput `pulumi:"subnetArn"`
	// The Zone that the device is located in. Specify the ID of an Availability Zone, Local Zone, Wavelength Zone, or an Outpost.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (DeviceAwsLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceAwsLocation)(nil)).Elem()
}

func (i DeviceAwsLocationArgs) ToDeviceAwsLocationOutput() DeviceAwsLocationOutput {
	return i.ToDeviceAwsLocationOutputWithContext(context.Background())
}

func (i DeviceAwsLocationArgs) ToDeviceAwsLocationOutputWithContext(ctx context.Context) DeviceAwsLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceAwsLocationOutput)
}

func (i DeviceAwsLocationArgs) ToDeviceAwsLocationPtrOutput() DeviceAwsLocationPtrOutput {
	return i.ToDeviceAwsLocationPtrOutputWithContext(context.Background())
}

func (i DeviceAwsLocationArgs) ToDeviceAwsLocationPtrOutputWithContext(ctx context.Context) DeviceAwsLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceAwsLocationOutput).ToDeviceAwsLocationPtrOutputWithContext(ctx)
}

// DeviceAwsLocationPtrInput is an input type that accepts DeviceAwsLocationArgs, DeviceAwsLocationPtr and DeviceAwsLocationPtrOutput values.
// You can construct a concrete instance of `DeviceAwsLocationPtrInput` via:
//
//	        DeviceAwsLocationArgs{...}
//
//	or:
//
//	        nil
type DeviceAwsLocationPtrInput interface {
	pulumi.Input

	ToDeviceAwsLocationPtrOutput() DeviceAwsLocationPtrOutput
	ToDeviceAwsLocationPtrOutputWithContext(context.Context) DeviceAwsLocationPtrOutput
}

type deviceAwsLocationPtrType DeviceAwsLocationArgs

func DeviceAwsLocationPtr(v *DeviceAwsLocationArgs) DeviceAwsLocationPtrInput {
	return (*deviceAwsLocationPtrType)(v)
}

func (*deviceAwsLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceAwsLocation)(nil)).Elem()
}

func (i *deviceAwsLocationPtrType) ToDeviceAwsLocationPtrOutput() DeviceAwsLocationPtrOutput {
	return i.ToDeviceAwsLocationPtrOutputWithContext(context.Background())
}

func (i *deviceAwsLocationPtrType) ToDeviceAwsLocationPtrOutputWithContext(ctx context.Context) DeviceAwsLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceAwsLocationPtrOutput)
}

type DeviceAwsLocationOutput struct{ *pulumi.OutputState }

func (DeviceAwsLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceAwsLocation)(nil)).Elem()
}

func (o DeviceAwsLocationOutput) ToDeviceAwsLocationOutput() DeviceAwsLocationOutput {
	return o
}

func (o DeviceAwsLocationOutput) ToDeviceAwsLocationOutputWithContext(ctx context.Context) DeviceAwsLocationOutput {
	return o
}

func (o DeviceAwsLocationOutput) ToDeviceAwsLocationPtrOutput() DeviceAwsLocationPtrOutput {
	return o.ToDeviceAwsLocationPtrOutputWithContext(context.Background())
}

func (o DeviceAwsLocationOutput) ToDeviceAwsLocationPtrOutputWithContext(ctx context.Context) DeviceAwsLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceAwsLocation) *DeviceAwsLocation {
		return &v
	}).(DeviceAwsLocationPtrOutput)
}

// The Amazon Resource Name (ARN) of the subnet that the device is located in.
func (o DeviceAwsLocationOutput) SubnetArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceAwsLocation) *string { return v.SubnetArn }).(pulumi.StringPtrOutput)
}

// The Zone that the device is located in. Specify the ID of an Availability Zone, Local Zone, Wavelength Zone, or an Outpost.
func (o DeviceAwsLocationOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceAwsLocation) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type DeviceAwsLocationPtrOutput struct{ *pulumi.OutputState }

func (DeviceAwsLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceAwsLocation)(nil)).Elem()
}

func (o DeviceAwsLocationPtrOutput) ToDeviceAwsLocationPtrOutput() DeviceAwsLocationPtrOutput {
	return o
}

func (o DeviceAwsLocationPtrOutput) ToDeviceAwsLocationPtrOutputWithContext(ctx context.Context) DeviceAwsLocationPtrOutput {
	return o
}

func (o DeviceAwsLocationPtrOutput) Elem() DeviceAwsLocationOutput {
	return o.ApplyT(func(v *DeviceAwsLocation) DeviceAwsLocation {
		if v != nil {
			return *v
		}
		var ret DeviceAwsLocation
		return ret
	}).(DeviceAwsLocationOutput)
}

// The Amazon Resource Name (ARN) of the subnet that the device is located in.
func (o DeviceAwsLocationPtrOutput) SubnetArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceAwsLocation) *string {
		if v == nil {
			return nil
		}
		return v.SubnetArn
	}).(pulumi.StringPtrOutput)
}

// The Zone that the device is located in. Specify the ID of an Availability Zone, Local Zone, Wavelength Zone, or an Outpost.
func (o DeviceAwsLocationPtrOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceAwsLocation) *string {
		if v == nil {
			return nil
		}
		return v.Zone
	}).(pulumi.StringPtrOutput)
}

type DeviceLocation struct {
	// The physical address.
	Address *string `pulumi:"address"`
	// The latitude.
	Latitude *string `pulumi:"latitude"`
	// The longitude.
	Longitude *string `pulumi:"longitude"`
}

// DeviceLocationInput is an input type that accepts DeviceLocationArgs and DeviceLocationOutput values.
// You can construct a concrete instance of `DeviceLocationInput` via:
//
//	DeviceLocationArgs{...}
type DeviceLocationInput interface {
	pulumi.Input

	ToDeviceLocationOutput() DeviceLocationOutput
	ToDeviceLocationOutputWithContext(context.Context) DeviceLocationOutput
}

type DeviceLocationArgs struct {
	// The physical address.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The latitude.
	Latitude pulumi.StringPtrInput `pulumi:"latitude"`
	// The longitude.
	Longitude pulumi.StringPtrInput `pulumi:"longitude"`
}

func (DeviceLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceLocation)(nil)).Elem()
}

func (i DeviceLocationArgs) ToDeviceLocationOutput() DeviceLocationOutput {
	return i.ToDeviceLocationOutputWithContext(context.Background())
}

func (i DeviceLocationArgs) ToDeviceLocationOutputWithContext(ctx context.Context) DeviceLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceLocationOutput)
}

func (i DeviceLocationArgs) ToDeviceLocationPtrOutput() DeviceLocationPtrOutput {
	return i.ToDeviceLocationPtrOutputWithContext(context.Background())
}

func (i DeviceLocationArgs) ToDeviceLocationPtrOutputWithContext(ctx context.Context) DeviceLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceLocationOutput).ToDeviceLocationPtrOutputWithContext(ctx)
}

// DeviceLocationPtrInput is an input type that accepts DeviceLocationArgs, DeviceLocationPtr and DeviceLocationPtrOutput values.
// You can construct a concrete instance of `DeviceLocationPtrInput` via:
//
//	        DeviceLocationArgs{...}
//
//	or:
//
//	        nil
type DeviceLocationPtrInput interface {
	pulumi.Input

	ToDeviceLocationPtrOutput() DeviceLocationPtrOutput
	ToDeviceLocationPtrOutputWithContext(context.Context) DeviceLocationPtrOutput
}

type deviceLocationPtrType DeviceLocationArgs

func DeviceLocationPtr(v *DeviceLocationArgs) DeviceLocationPtrInput {
	return (*deviceLocationPtrType)(v)
}

func (*deviceLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceLocation)(nil)).Elem()
}

func (i *deviceLocationPtrType) ToDeviceLocationPtrOutput() DeviceLocationPtrOutput {
	return i.ToDeviceLocationPtrOutputWithContext(context.Background())
}

func (i *deviceLocationPtrType) ToDeviceLocationPtrOutputWithContext(ctx context.Context) DeviceLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceLocationPtrOutput)
}

type DeviceLocationOutput struct{ *pulumi.OutputState }

func (DeviceLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceLocation)(nil)).Elem()
}

func (o DeviceLocationOutput) ToDeviceLocationOutput() DeviceLocationOutput {
	return o
}

func (o DeviceLocationOutput) ToDeviceLocationOutputWithContext(ctx context.Context) DeviceLocationOutput {
	return o
}

func (o DeviceLocationOutput) ToDeviceLocationPtrOutput() DeviceLocationPtrOutput {
	return o.ToDeviceLocationPtrOutputWithContext(context.Background())
}

func (o DeviceLocationOutput) ToDeviceLocationPtrOutputWithContext(ctx context.Context) DeviceLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceLocation) *DeviceLocation {
		return &v
	}).(DeviceLocationPtrOutput)
}

// The physical address.
func (o DeviceLocationOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceLocation) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The latitude.
func (o DeviceLocationOutput) Latitude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceLocation) *string { return v.Latitude }).(pulumi.StringPtrOutput)
}

// The longitude.
func (o DeviceLocationOutput) Longitude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceLocation) *string { return v.Longitude }).(pulumi.StringPtrOutput)
}

type DeviceLocationPtrOutput struct{ *pulumi.OutputState }

func (DeviceLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceLocation)(nil)).Elem()
}

func (o DeviceLocationPtrOutput) ToDeviceLocationPtrOutput() DeviceLocationPtrOutput {
	return o
}

func (o DeviceLocationPtrOutput) ToDeviceLocationPtrOutputWithContext(ctx context.Context) DeviceLocationPtrOutput {
	return o
}

func (o DeviceLocationPtrOutput) Elem() DeviceLocationOutput {
	return o.ApplyT(func(v *DeviceLocation) DeviceLocation {
		if v != nil {
			return *v
		}
		var ret DeviceLocation
		return ret
	}).(DeviceLocationOutput)
}

// The physical address.
func (o DeviceLocationPtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceLocation) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

// The latitude.
func (o DeviceLocationPtrOutput) Latitude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceLocation) *string {
		if v == nil {
			return nil
		}
		return v.Latitude
	}).(pulumi.StringPtrOutput)
}

// The longitude.
func (o DeviceLocationPtrOutput) Longitude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceLocation) *string {
		if v == nil {
			return nil
		}
		return v.Longitude
	}).(pulumi.StringPtrOutput)
}

type LinkBandwidth struct {
	// Download speed in Mbps.
	DownloadSpeed *int `pulumi:"downloadSpeed"`
	// Upload speed in Mbps.
	UploadSpeed *int `pulumi:"uploadSpeed"`
}

// LinkBandwidthInput is an input type that accepts LinkBandwidthArgs and LinkBandwidthOutput values.
// You can construct a concrete instance of `LinkBandwidthInput` via:
//
//	LinkBandwidthArgs{...}
type LinkBandwidthInput interface {
	pulumi.Input

	ToLinkBandwidthOutput() LinkBandwidthOutput
	ToLinkBandwidthOutputWithContext(context.Context) LinkBandwidthOutput
}

type LinkBandwidthArgs struct {
	// Download speed in Mbps.
	DownloadSpeed pulumi.IntPtrInput `pulumi:"downloadSpeed"`
	// Upload speed in Mbps.
	UploadSpeed pulumi.IntPtrInput `pulumi:"uploadSpeed"`
}

func (LinkBandwidthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkBandwidth)(nil)).Elem()
}

func (i LinkBandwidthArgs) ToLinkBandwidthOutput() LinkBandwidthOutput {
	return i.ToLinkBandwidthOutputWithContext(context.Background())
}

func (i LinkBandwidthArgs) ToLinkBandwidthOutputWithContext(ctx context.Context) LinkBandwidthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkBandwidthOutput)
}

func (i LinkBandwidthArgs) ToLinkBandwidthPtrOutput() LinkBandwidthPtrOutput {
	return i.ToLinkBandwidthPtrOutputWithContext(context.Background())
}

func (i LinkBandwidthArgs) ToLinkBandwidthPtrOutputWithContext(ctx context.Context) LinkBandwidthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkBandwidthOutput).ToLinkBandwidthPtrOutputWithContext(ctx)
}

// LinkBandwidthPtrInput is an input type that accepts LinkBandwidthArgs, LinkBandwidthPtr and LinkBandwidthPtrOutput values.
// You can construct a concrete instance of `LinkBandwidthPtrInput` via:
//
//	        LinkBandwidthArgs{...}
//
//	or:
//
//	        nil
type LinkBandwidthPtrInput interface {
	pulumi.Input

	ToLinkBandwidthPtrOutput() LinkBandwidthPtrOutput
	ToLinkBandwidthPtrOutputWithContext(context.Context) LinkBandwidthPtrOutput
}

type linkBandwidthPtrType LinkBandwidthArgs

func LinkBandwidthPtr(v *LinkBandwidthArgs) LinkBandwidthPtrInput {
	return (*linkBandwidthPtrType)(v)
}

func (*linkBandwidthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkBandwidth)(nil)).Elem()
}

func (i *linkBandwidthPtrType) ToLinkBandwidthPtrOutput() LinkBandwidthPtrOutput {
	return i.ToLinkBandwidthPtrOutputWithContext(context.Background())
}

func (i *linkBandwidthPtrType) ToLinkBandwidthPtrOutputWithContext(ctx context.Context) LinkBandwidthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkBandwidthPtrOutput)
}

type LinkBandwidthOutput struct{ *pulumi.OutputState }

func (LinkBandwidthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkBandwidth)(nil)).Elem()
}

func (o LinkBandwidthOutput) ToLinkBandwidthOutput() LinkBandwidthOutput {
	return o
}

func (o LinkBandwidthOutput) ToLinkBandwidthOutputWithContext(ctx context.Context) LinkBandwidthOutput {
	return o
}

func (o LinkBandwidthOutput) ToLinkBandwidthPtrOutput() LinkBandwidthPtrOutput {
	return o.ToLinkBandwidthPtrOutputWithContext(context.Background())
}

func (o LinkBandwidthOutput) ToLinkBandwidthPtrOutputWithContext(ctx context.Context) LinkBandwidthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LinkBandwidth) *LinkBandwidth {
		return &v
	}).(LinkBandwidthPtrOutput)
}

// Download speed in Mbps.
func (o LinkBandwidthOutput) DownloadSpeed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LinkBandwidth) *int { return v.DownloadSpeed }).(pulumi.IntPtrOutput)
}

// Upload speed in Mbps.
func (o LinkBandwidthOutput) UploadSpeed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LinkBandwidth) *int { return v.UploadSpeed }).(pulumi.IntPtrOutput)
}

type LinkBandwidthPtrOutput struct{ *pulumi.OutputState }

func (LinkBandwidthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkBandwidth)(nil)).Elem()
}

func (o LinkBandwidthPtrOutput) ToLinkBandwidthPtrOutput() LinkBandwidthPtrOutput {
	return o
}

func (o LinkBandwidthPtrOutput) ToLinkBandwidthPtrOutputWithContext(ctx context.Context) LinkBandwidthPtrOutput {
	return o
}

func (o LinkBandwidthPtrOutput) Elem() LinkBandwidthOutput {
	return o.ApplyT(func(v *LinkBandwidth) LinkBandwidth {
		if v != nil {
			return *v
		}
		var ret LinkBandwidth
		return ret
	}).(LinkBandwidthOutput)
}

// Download speed in Mbps.
func (o LinkBandwidthPtrOutput) DownloadSpeed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LinkBandwidth) *int {
		if v == nil {
			return nil
		}
		return v.DownloadSpeed
	}).(pulumi.IntPtrOutput)
}

// Upload speed in Mbps.
func (o LinkBandwidthPtrOutput) UploadSpeed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LinkBandwidth) *int {
		if v == nil {
			return nil
		}
		return v.UploadSpeed
	}).(pulumi.IntPtrOutput)
}

type SiteLocation struct {
	// Address of the location.
	Address *string `pulumi:"address"`
	// Latitude of the location.
	Latitude *string `pulumi:"latitude"`
	// Longitude of the location.
	Longitude *string `pulumi:"longitude"`
}

// SiteLocationInput is an input type that accepts SiteLocationArgs and SiteLocationOutput values.
// You can construct a concrete instance of `SiteLocationInput` via:
//
//	SiteLocationArgs{...}
type SiteLocationInput interface {
	pulumi.Input

	ToSiteLocationOutput() SiteLocationOutput
	ToSiteLocationOutputWithContext(context.Context) SiteLocationOutput
}

type SiteLocationArgs struct {
	// Address of the location.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// Latitude of the location.
	Latitude pulumi.StringPtrInput `pulumi:"latitude"`
	// Longitude of the location.
	Longitude pulumi.StringPtrInput `pulumi:"longitude"`
}

func (SiteLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SiteLocation)(nil)).Elem()
}

func (i SiteLocationArgs) ToSiteLocationOutput() SiteLocationOutput {
	return i.ToSiteLocationOutputWithContext(context.Background())
}

func (i SiteLocationArgs) ToSiteLocationOutputWithContext(ctx context.Context) SiteLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SiteLocationOutput)
}

func (i SiteLocationArgs) ToSiteLocationPtrOutput() SiteLocationPtrOutput {
	return i.ToSiteLocationPtrOutputWithContext(context.Background())
}

func (i SiteLocationArgs) ToSiteLocationPtrOutputWithContext(ctx context.Context) SiteLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SiteLocationOutput).ToSiteLocationPtrOutputWithContext(ctx)
}

// SiteLocationPtrInput is an input type that accepts SiteLocationArgs, SiteLocationPtr and SiteLocationPtrOutput values.
// You can construct a concrete instance of `SiteLocationPtrInput` via:
//
//	        SiteLocationArgs{...}
//
//	or:
//
//	        nil
type SiteLocationPtrInput interface {
	pulumi.Input

	ToSiteLocationPtrOutput() SiteLocationPtrOutput
	ToSiteLocationPtrOutputWithContext(context.Context) SiteLocationPtrOutput
}

type siteLocationPtrType SiteLocationArgs

func SiteLocationPtr(v *SiteLocationArgs) SiteLocationPtrInput {
	return (*siteLocationPtrType)(v)
}

func (*siteLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SiteLocation)(nil)).Elem()
}

func (i *siteLocationPtrType) ToSiteLocationPtrOutput() SiteLocationPtrOutput {
	return i.ToSiteLocationPtrOutputWithContext(context.Background())
}

func (i *siteLocationPtrType) ToSiteLocationPtrOutputWithContext(ctx context.Context) SiteLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SiteLocationPtrOutput)
}

type SiteLocationOutput struct{ *pulumi.OutputState }

func (SiteLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SiteLocation)(nil)).Elem()
}

func (o SiteLocationOutput) ToSiteLocationOutput() SiteLocationOutput {
	return o
}

func (o SiteLocationOutput) ToSiteLocationOutputWithContext(ctx context.Context) SiteLocationOutput {
	return o
}

func (o SiteLocationOutput) ToSiteLocationPtrOutput() SiteLocationPtrOutput {
	return o.ToSiteLocationPtrOutputWithContext(context.Background())
}

func (o SiteLocationOutput) ToSiteLocationPtrOutputWithContext(ctx context.Context) SiteLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SiteLocation) *SiteLocation {
		return &v
	}).(SiteLocationPtrOutput)
}

// Address of the location.
func (o SiteLocationOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SiteLocation) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// Latitude of the location.
func (o SiteLocationOutput) Latitude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SiteLocation) *string { return v.Latitude }).(pulumi.StringPtrOutput)
}

// Longitude of the location.
func (o SiteLocationOutput) Longitude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SiteLocation) *string { return v.Longitude }).(pulumi.StringPtrOutput)
}

type SiteLocationPtrOutput struct{ *pulumi.OutputState }

func (SiteLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SiteLocation)(nil)).Elem()
}

func (o SiteLocationPtrOutput) ToSiteLocationPtrOutput() SiteLocationPtrOutput {
	return o
}

func (o SiteLocationPtrOutput) ToSiteLocationPtrOutputWithContext(ctx context.Context) SiteLocationPtrOutput {
	return o
}

func (o SiteLocationPtrOutput) Elem() SiteLocationOutput {
	return o.ApplyT(func(v *SiteLocation) SiteLocation {
		if v != nil {
			return *v
		}
		var ret SiteLocation
		return ret
	}).(SiteLocationOutput)
}

// Address of the location.
func (o SiteLocationPtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SiteLocation) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

// Latitude of the location.
func (o SiteLocationPtrOutput) Latitude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SiteLocation) *string {
		if v == nil {
			return nil
		}
		return v.Latitude
	}).(pulumi.StringPtrOutput)
}

// Longitude of the location.
func (o SiteLocationPtrOutput) Longitude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SiteLocation) *string {
		if v == nil {
			return nil
		}
		return v.Longitude
	}).(pulumi.StringPtrOutput)
}

type VpcAttachmentOptions struct {
	// Indicates whether IPv6 is supported.
	Ipv6Support bool `pulumi:"ipv6Support"`
}

// VpcAttachmentOptionsInput is an input type that accepts VpcAttachmentOptionsArgs and VpcAttachmentOptionsOutput values.
// You can construct a concrete instance of `VpcAttachmentOptionsInput` via:
//
//	VpcAttachmentOptionsArgs{...}
type VpcAttachmentOptionsInput interface {
	pulumi.Input

	ToVpcAttachmentOptionsOutput() VpcAttachmentOptionsOutput
	ToVpcAttachmentOptionsOutputWithContext(context.Context) VpcAttachmentOptionsOutput
}

type VpcAttachmentOptionsArgs struct {
	// Indicates whether IPv6 is supported.
	Ipv6Support pulumi.BoolInput `pulumi:"ipv6Support"`
}

func (VpcAttachmentOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcAttachmentOptions)(nil)).Elem()
}

func (i VpcAttachmentOptionsArgs) ToVpcAttachmentOptionsOutput() VpcAttachmentOptionsOutput {
	return i.ToVpcAttachmentOptionsOutputWithContext(context.Background())
}

func (i VpcAttachmentOptionsArgs) ToVpcAttachmentOptionsOutputWithContext(ctx context.Context) VpcAttachmentOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcAttachmentOptionsOutput)
}

func (i VpcAttachmentOptionsArgs) ToVpcAttachmentOptionsPtrOutput() VpcAttachmentOptionsPtrOutput {
	return i.ToVpcAttachmentOptionsPtrOutputWithContext(context.Background())
}

func (i VpcAttachmentOptionsArgs) ToVpcAttachmentOptionsPtrOutputWithContext(ctx context.Context) VpcAttachmentOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcAttachmentOptionsOutput).ToVpcAttachmentOptionsPtrOutputWithContext(ctx)
}

// VpcAttachmentOptionsPtrInput is an input type that accepts VpcAttachmentOptionsArgs, VpcAttachmentOptionsPtr and VpcAttachmentOptionsPtrOutput values.
// You can construct a concrete instance of `VpcAttachmentOptionsPtrInput` via:
//
//	        VpcAttachmentOptionsArgs{...}
//
//	or:
//
//	        nil
type VpcAttachmentOptionsPtrInput interface {
	pulumi.Input

	ToVpcAttachmentOptionsPtrOutput() VpcAttachmentOptionsPtrOutput
	ToVpcAttachmentOptionsPtrOutputWithContext(context.Context) VpcAttachmentOptionsPtrOutput
}

type vpcAttachmentOptionsPtrType VpcAttachmentOptionsArgs

func VpcAttachmentOptionsPtr(v *VpcAttachmentOptionsArgs) VpcAttachmentOptionsPtrInput {
	return (*vpcAttachmentOptionsPtrType)(v)
}

func (*vpcAttachmentOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcAttachmentOptions)(nil)).Elem()
}

func (i *vpcAttachmentOptionsPtrType) ToVpcAttachmentOptionsPtrOutput() VpcAttachmentOptionsPtrOutput {
	return i.ToVpcAttachmentOptionsPtrOutputWithContext(context.Background())
}

func (i *vpcAttachmentOptionsPtrType) ToVpcAttachmentOptionsPtrOutputWithContext(ctx context.Context) VpcAttachmentOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcAttachmentOptionsPtrOutput)
}

type VpcAttachmentOptionsOutput struct{ *pulumi.OutputState }

func (VpcAttachmentOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcAttachmentOptions)(nil)).Elem()
}

func (o VpcAttachmentOptionsOutput) ToVpcAttachmentOptionsOutput() VpcAttachmentOptionsOutput {
	return o
}

func (o VpcAttachmentOptionsOutput) ToVpcAttachmentOptionsOutputWithContext(ctx context.Context) VpcAttachmentOptionsOutput {
	return o
}

func (o VpcAttachmentOptionsOutput) ToVpcAttachmentOptionsPtrOutput() VpcAttachmentOptionsPtrOutput {
	return o.ToVpcAttachmentOptionsPtrOutputWithContext(context.Background())
}

func (o VpcAttachmentOptionsOutput) ToVpcAttachmentOptionsPtrOutputWithContext(ctx context.Context) VpcAttachmentOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VpcAttachmentOptions) *VpcAttachmentOptions {
		return &v
	}).(VpcAttachmentOptionsPtrOutput)
}

// Indicates whether IPv6 is supported.
func (o VpcAttachmentOptionsOutput) Ipv6Support() pulumi.BoolOutput {
	return o.ApplyT(func(v VpcAttachmentOptions) bool { return v.Ipv6Support }).(pulumi.BoolOutput)
}

type VpcAttachmentOptionsPtrOutput struct{ *pulumi.OutputState }

func (VpcAttachmentOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcAttachmentOptions)(nil)).Elem()
}

func (o VpcAttachmentOptionsPtrOutput) ToVpcAttachmentOptionsPtrOutput() VpcAttachmentOptionsPtrOutput {
	return o
}

func (o VpcAttachmentOptionsPtrOutput) ToVpcAttachmentOptionsPtrOutputWithContext(ctx context.Context) VpcAttachmentOptionsPtrOutput {
	return o
}

func (o VpcAttachmentOptionsPtrOutput) Elem() VpcAttachmentOptionsOutput {
	return o.ApplyT(func(v *VpcAttachmentOptions) VpcAttachmentOptions {
		if v != nil {
			return *v
		}
		var ret VpcAttachmentOptions
		return ret
	}).(VpcAttachmentOptionsOutput)
}

// Indicates whether IPv6 is supported.
func (o VpcAttachmentOptionsPtrOutput) Ipv6Support() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VpcAttachmentOptions) *bool {
		if v == nil {
			return nil
		}
		return &v.Ipv6Support
	}).(pulumi.BoolPtrOutput)
}

type GetCoreNetworkPolicyDocumentAttachmentPolicy struct {
	// Action to take for the chosen segment. Valid values `create-route` or `share`.
	Action GetCoreNetworkPolicyDocumentAttachmentPolicyAction `pulumi:"action"`
	// Valid values include `and` or `or`. This is a mandatory parameter only if you have more than one condition. The `conditionLogic` apply to all of the conditions for a rule, which also means nested conditions of `and` or `or` are not supported. Use `or` if you want to associate the attachment with the segment by either the segment name or attachment tag value, or by the chosen conditions. Use `and` if you want to associate the attachment with the segment by either the segment name or attachment tag value and by the chosen conditions. Detailed Below.
	ConditionLogic *string `pulumi:"conditionLogic"`
	// A block argument. Detailed Below.
	Conditions []GetCoreNetworkPolicyDocumentAttachmentPolicyCondition `pulumi:"conditions"`
	// A user-defined string describing the segment action.
	Description *string `pulumi:"description"`
	// An integer from `1` to `65535` indicating the rule's order number. Rules are processed in order from the lowest numbered rule to the highest. Rules stop processing when a rule is matched. It's important to make sure that you number your rules in the exact order that you want them processed.
	RuleNumber int `pulumi:"ruleNumber"`
}

// GetCoreNetworkPolicyDocumentAttachmentPolicyInput is an input type that accepts GetCoreNetworkPolicyDocumentAttachmentPolicyArgs and GetCoreNetworkPolicyDocumentAttachmentPolicyOutput values.
// You can construct a concrete instance of `GetCoreNetworkPolicyDocumentAttachmentPolicyInput` via:
//
//	GetCoreNetworkPolicyDocumentAttachmentPolicyArgs{...}
type GetCoreNetworkPolicyDocumentAttachmentPolicyInput interface {
	pulumi.Input

	ToGetCoreNetworkPolicyDocumentAttachmentPolicyOutput() GetCoreNetworkPolicyDocumentAttachmentPolicyOutput
	ToGetCoreNetworkPolicyDocumentAttachmentPolicyOutputWithContext(context.Context) GetCoreNetworkPolicyDocumentAttachmentPolicyOutput
}

type GetCoreNetworkPolicyDocumentAttachmentPolicyArgs struct {
	// Action to take for the chosen segment. Valid values `create-route` or `share`.
	Action GetCoreNetworkPolicyDocumentAttachmentPolicyActionInput `pulumi:"action"`
	// Valid values include `and` or `or`. This is a mandatory parameter only if you have more than one condition. The `conditionLogic` apply to all of the conditions for a rule, which also means nested conditions of `and` or `or` are not supported. Use `or` if you want to associate the attachment with the segment by either the segment name or attachment tag value, or by the chosen conditions. Use `and` if you want to associate the attachment with the segment by either the segment name or attachment tag value and by the chosen conditions. Detailed Below.
	ConditionLogic pulumi.StringPtrInput `pulumi:"conditionLogic"`
	// A block argument. Detailed Below.
	Conditions GetCoreNetworkPolicyDocumentAttachmentPolicyConditionArrayInput `pulumi:"conditions"`
	// A user-defined string describing the segment action.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// An integer from `1` to `65535` indicating the rule's order number. Rules are processed in order from the lowest numbered rule to the highest. Rules stop processing when a rule is matched. It's important to make sure that you number your rules in the exact order that you want them processed.
	RuleNumber pulumi.IntInput `pulumi:"ruleNumber"`
}

func (GetCoreNetworkPolicyDocumentAttachmentPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCoreNetworkPolicyDocumentAttachmentPolicy)(nil)).Elem()
}

func (i GetCoreNetworkPolicyDocumentAttachmentPolicyArgs) ToGetCoreNetworkPolicyDocumentAttachmentPolicyOutput() GetCoreNetworkPolicyDocumentAttachmentPolicyOutput {
	return i.ToGetCoreNetworkPolicyDocumentAttachmentPolicyOutputWithContext(context.Background())
}

func (i GetCoreNetworkPolicyDocumentAttachmentPolicyArgs) ToGetCoreNetworkPolicyDocumentAttachmentPolicyOutputWithContext(ctx context.Context) GetCoreNetworkPolicyDocumentAttachmentPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCoreNetworkPolicyDocumentAttachmentPolicyOutput)
}

// GetCoreNetworkPolicyDocumentAttachmentPolicyArrayInput is an input type that accepts GetCoreNetworkPolicyDocumentAttachmentPolicyArray and GetCoreNetworkPolicyDocumentAttachmentPolicyArrayOutput values.
// You can construct a concrete instance of `GetCoreNetworkPolicyDocumentAttachmentPolicyArrayInput` via:
//
//	GetCoreNetworkPolicyDocumentAttachmentPolicyArray{ GetCoreNetworkPolicyDocumentAttachmentPolicyArgs{...} }
type GetCoreNetworkPolicyDocumentAttachmentPolicyArrayInput interface {
	pulumi.Input

	ToGetCoreNetworkPolicyDocumentAttachmentPolicyArrayOutput() GetCoreNetworkPolicyDocumentAttachmentPolicyArrayOutput
	ToGetCoreNetworkPolicyDocumentAttachmentPolicyArrayOutputWithContext(context.Context) GetCoreNetworkPolicyDocumentAttachmentPolicyArrayOutput
}

type GetCoreNetworkPolicyDocumentAttachmentPolicyArray []GetCoreNetworkPolicyDocumentAttachmentPolicyInput

func (GetCoreNetworkPolicyDocumentAttachmentPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCoreNetworkPolicyDocumentAttachmentPolicy)(nil)).Elem()
}

func (i GetCoreNetworkPolicyDocumentAttachmentPolicyArray) ToGetCoreNetworkPolicyDocumentAttachmentPolicyArrayOutput() GetCoreNetworkPolicyDocumentAttachmentPolicyArrayOutput {
	return i.ToGetCoreNetworkPolicyDocumentAttachmentPolicyArrayOutputWithContext(context.Background())
}

func (i GetCoreNetworkPolicyDocumentAttachmentPolicyArray) ToGetCoreNetworkPolicyDocumentAttachmentPolicyArrayOutputWithContext(ctx context.Context) GetCoreNetworkPolicyDocumentAttachmentPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCoreNetworkPolicyDocumentAttachmentPolicyArrayOutput)
}

type GetCoreNetworkPolicyDocumentAttachmentPolicyOutput struct{ *pulumi.OutputState }

func (GetCoreNetworkPolicyDocumentAttachmentPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCoreNetworkPolicyDocumentAttachmentPolicy)(nil)).Elem()
}

func (o GetCoreNetworkPolicyDocumentAttachmentPolicyOutput) ToGetCoreNetworkPolicyDocumentAttachmentPolicyOutput() GetCoreNetworkPolicyDocumentAttachmentPolicyOutput {
	return o
}

func (o GetCoreNetworkPolicyDocumentAttachmentPolicyOutput) ToGetCoreNetworkPolicyDocumentAttachmentPolicyOutputWithContext(ctx context.Context) GetCoreNetworkPolicyDocumentAttachmentPolicyOutput {
	return o
}

// Action to take for the chosen segment. Valid values `create-route` or `share`.
func (o GetCoreNetworkPolicyDocumentAttachmentPolicyOutput) Action() GetCoreNetworkPolicyDocumentAttachmentPolicyActionOutput {
	return o.ApplyT(func(v GetCoreNetworkPolicyDocumentAttachmentPolicy) GetCoreNetworkPolicyDocumentAttachmentPolicyAction {
		return v.Action
	}).(GetCoreNetworkPolicyDocumentAttachmentPolicyActionOutput)
}

// Valid values include `and` or `or`. This is a mandatory parameter only if you have more than one condition. The `conditionLogic` apply to all of the conditions for a rule, which also means nested conditions of `and` or `or` are not supported. Use `or` if you want to associate the attachment with the segment by either the segment name or attachment tag value, or by the chosen conditions. Use `and` if you want to associate the attachment with the segment by either the segment name or attachment tag value and by the chosen conditions. Detailed Below.
func (o GetCoreNetworkPolicyDocumentAttachmentPolicyOutput) ConditionLogic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCoreNetworkPolicyDocumentAttachmentPolicy) *string { return v.ConditionLogic }).(pulumi.StringPtrOutput)
}

// A block argument. Detailed Below.
func (o GetCoreNetworkPolicyDocumentAttachmentPolicyOutput) Conditions() GetCoreNetworkPolicyDocumentAttachmentPolicyConditionArrayOutput {
	return o.ApplyT(func(v GetCoreNetworkPolicyDocumentAttachmentPolicy) []GetCoreNetworkPolicyDocumentAttachmentPolicyCondition {
		return v.Conditions
	}).(GetCoreNetworkPolicyDocumentAttachmentPolicyConditionArrayOutput)
}

// A user-defined string describing the segment action.
func (o GetCoreNetworkPolicyDocumentAttachmentPolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCoreNetworkPolicyDocumentAttachmentPolicy) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// An integer from `1` to `65535` indicating the rule's order number. Rules are processed in order from the lowest numbered rule to the highest. Rules stop processing when a rule is matched. It's important to make sure that you number your rules in the exact order that you want them processed.
func (o GetCoreNetworkPolicyDocumentAttachmentPolicyOutput) RuleNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GetCoreNetworkPolicyDocumentAttachmentPolicy) int { return v.RuleNumber }).(pulumi.IntOutput)
}

type GetCoreNetworkPolicyDocumentAttachmentPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetCoreNetworkPolicyDocumentAttachmentPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCoreNetworkPolicyDocumentAttachmentPolicy)(nil)).Elem()
}

func (o GetCoreNetworkPolicyDocumentAttachmentPolicyArrayOutput) ToGetCoreNetworkPolicyDocumentAttachmentPolicyArrayOutput() GetCoreNetworkPolicyDocumentAttachmentPolicyArrayOutput {
	return o
}

func (o GetCoreNetworkPolicyDocumentAttachmentPolicyArrayOutput) ToGetCoreNetworkPolicyDocumentAttachmentPolicyArrayOutputWithContext(ctx context.Context) GetCoreNetworkPolicyDocumentAttachmentPolicyArrayOutput {
	return o
}

func (o GetCoreNetworkPolicyDocumentAttachmentPolicyArrayOutput) Index(i pulumi.IntInput) GetCoreNetworkPolicyDocumentAttachmentPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCoreNetworkPolicyDocumentAttachmentPolicy {
		return vs[0].([]GetCoreNetworkPolicyDocumentAttachmentPolicy)[vs[1].(int)]
	}).(GetCoreNetworkPolicyDocumentAttachmentPolicyOutput)
}

type GetCoreNetworkPolicyDocumentAttachmentPolicyAction struct {
	// Defines how a segment is mapped. Values can be `constant` or `tag`. `constant` statically defines the segment to associate the attachment to. `tag` uses the value of a tag to dynamically try to map to a segment.reference_policies_elements_condition_operators.html) to evaluate.
	AssociationMethod string `pulumi:"associationMethod"`
	// Determines if this mapping should override the segment value for `requireAttachmentAcceptance`. You can only set this to `true`, indicating that this setting applies only to segments that have `requireAttachmentAcceptance` set to `false`. If the segment already has the default `requireAttachmentAcceptance`, you can set this to inherit segment’s acceptance value.
	RequireAcceptance *bool `pulumi:"requireAcceptance"`
	// Name of the segment.
	Segment *string `pulumi:"segment"`
	// Maps the attachment to the value of a known key. This is used with the `associationMethod` is `tag`. For example a `tag` of `stage = “test”`, will map to a segment named `test`. The value must exactly match the name of a segment. This allows you to have many segments, but use only a single rule without having to define multiple nearly identical conditions. This prevents creating many similar conditions that all use the same keys to map to segments.
	TagValueOfKey *string `pulumi:"tagValueOfKey"`
}

// GetCoreNetworkPolicyDocumentAttachmentPolicyActionInput is an input type that accepts GetCoreNetworkPolicyDocumentAttachmentPolicyActionArgs and GetCoreNetworkPolicyDocumentAttachmentPolicyActionOutput values.
// You can construct a concrete instance of `GetCoreNetworkPolicyDocumentAttachmentPolicyActionInput` via:
//
//	GetCoreNetworkPolicyDocumentAttachmentPolicyActionArgs{...}
type GetCoreNetworkPolicyDocumentAttachmentPolicyActionInput interface {
	pulumi.Input

	ToGetCoreNetworkPolicyDocumentAttachmentPolicyActionOutput() GetCoreNetworkPolicyDocumentAttachmentPolicyActionOutput
	ToGetCoreNetworkPolicyDocumentAttachmentPolicyActionOutputWithContext(context.Context) GetCoreNetworkPolicyDocumentAttachmentPolicyActionOutput
}

type GetCoreNetworkPolicyDocumentAttachmentPolicyActionArgs struct {
	// Defines how a segment is mapped. Values can be `constant` or `tag`. `constant` statically defines the segment to associate the attachment to. `tag` uses the value of a tag to dynamically try to map to a segment.reference_policies_elements_condition_operators.html) to evaluate.
	AssociationMethod pulumi.StringInput `pulumi:"associationMethod"`
	// Determines if this mapping should override the segment value for `requireAttachmentAcceptance`. You can only set this to `true`, indicating that this setting applies only to segments that have `requireAttachmentAcceptance` set to `false`. If the segment already has the default `requireAttachmentAcceptance`, you can set this to inherit segment’s acceptance value.
	RequireAcceptance pulumi.BoolPtrInput `pulumi:"requireAcceptance"`
	// Name of the segment.
	Segment pulumi.StringPtrInput `pulumi:"segment"`
	// Maps the attachment to the value of a known key. This is used with the `associationMethod` is `tag`. For example a `tag` of `stage = “test”`, will map to a segment named `test`. The value must exactly match the name of a segment. This allows you to have many segments, but use only a single rule without having to define multiple nearly identical conditions. This prevents creating many similar conditions that all use the same keys to map to segments.
	TagValueOfKey pulumi.StringPtrInput `pulumi:"tagValueOfKey"`
}

func (GetCoreNetworkPolicyDocumentAttachmentPolicyActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCoreNetworkPolicyDocumentAttachmentPolicyAction)(nil)).Elem()
}

func (i GetCoreNetworkPolicyDocumentAttachmentPolicyActionArgs) ToGetCoreNetworkPolicyDocumentAttachmentPolicyActionOutput() GetCoreNetworkPolicyDocumentAttachmentPolicyActionOutput {
	return i.ToGetCoreNetworkPolicyDocumentAttachmentPolicyActionOutputWithContext(context.Background())
}

func (i GetCoreNetworkPolicyDocumentAttachmentPolicyActionArgs) ToGetCoreNetworkPolicyDocumentAttachmentPolicyActionOutputWithContext(ctx context.Context) GetCoreNetworkPolicyDocumentAttachmentPolicyActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCoreNetworkPolicyDocumentAttachmentPolicyActionOutput)
}

type GetCoreNetworkPolicyDocumentAttachmentPolicyActionOutput struct{ *pulumi.OutputState }

func (GetCoreNetworkPolicyDocumentAttachmentPolicyActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCoreNetworkPolicyDocumentAttachmentPolicyAction)(nil)).Elem()
}

func (o GetCoreNetworkPolicyDocumentAttachmentPolicyActionOutput) ToGetCoreNetworkPolicyDocumentAttachmentPolicyActionOutput() GetCoreNetworkPolicyDocumentAttachmentPolicyActionOutput {
	return o
}

func (o GetCoreNetworkPolicyDocumentAttachmentPolicyActionOutput) ToGetCoreNetworkPolicyDocumentAttachmentPolicyActionOutputWithContext(ctx context.Context) GetCoreNetworkPolicyDocumentAttachmentPolicyActionOutput {
	return o
}

// Defines how a segment is mapped. Values can be `constant` or `tag`. `constant` statically defines the segment to associate the attachment to. `tag` uses the value of a tag to dynamically try to map to a segment.reference_policies_elements_condition_operators.html) to evaluate.
func (o GetCoreNetworkPolicyDocumentAttachmentPolicyActionOutput) AssociationMethod() pulumi.StringOutput {
	return o.ApplyT(func(v GetCoreNetworkPolicyDocumentAttachmentPolicyAction) string { return v.AssociationMethod }).(pulumi.StringOutput)
}

// Determines if this mapping should override the segment value for `requireAttachmentAcceptance`. You can only set this to `true`, indicating that this setting applies only to segments that have `requireAttachmentAcceptance` set to `false`. If the segment already has the default `requireAttachmentAcceptance`, you can set this to inherit segment’s acceptance value.
func (o GetCoreNetworkPolicyDocumentAttachmentPolicyActionOutput) RequireAcceptance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetCoreNetworkPolicyDocumentAttachmentPolicyAction) *bool { return v.RequireAcceptance }).(pulumi.BoolPtrOutput)
}

// Name of the segment.
func (o GetCoreNetworkPolicyDocumentAttachmentPolicyActionOutput) Segment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCoreNetworkPolicyDocumentAttachmentPolicyAction) *string { return v.Segment }).(pulumi.StringPtrOutput)
}

// Maps the attachment to the value of a known key. This is used with the `associationMethod` is `tag`. For example a `tag` of `stage = “test”`, will map to a segment named `test`. The value must exactly match the name of a segment. This allows you to have many segments, but use only a single rule without having to define multiple nearly identical conditions. This prevents creating many similar conditions that all use the same keys to map to segments.
func (o GetCoreNetworkPolicyDocumentAttachmentPolicyActionOutput) TagValueOfKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCoreNetworkPolicyDocumentAttachmentPolicyAction) *string { return v.TagValueOfKey }).(pulumi.StringPtrOutput)
}

type GetCoreNetworkPolicyDocumentAttachmentPolicyCondition struct {
	// string value
	Key *string `pulumi:"key"`
	// Valid values include: `equals`, `not-equals`, `contains`, `begins-with`.
	Operator *string `pulumi:"operator"`
	// Valid values include: `account-id`, `any`, `tag-value`, `tag-exists`, `resource-id`, `region`, `attachment-type`.
	Type string `pulumi:"type"`
	// string value
	Value *string `pulumi:"value"`
}

// GetCoreNetworkPolicyDocumentAttachmentPolicyConditionInput is an input type that accepts GetCoreNetworkPolicyDocumentAttachmentPolicyConditionArgs and GetCoreNetworkPolicyDocumentAttachmentPolicyConditionOutput values.
// You can construct a concrete instance of `GetCoreNetworkPolicyDocumentAttachmentPolicyConditionInput` via:
//
//	GetCoreNetworkPolicyDocumentAttachmentPolicyConditionArgs{...}
type GetCoreNetworkPolicyDocumentAttachmentPolicyConditionInput interface {
	pulumi.Input

	ToGetCoreNetworkPolicyDocumentAttachmentPolicyConditionOutput() GetCoreNetworkPolicyDocumentAttachmentPolicyConditionOutput
	ToGetCoreNetworkPolicyDocumentAttachmentPolicyConditionOutputWithContext(context.Context) GetCoreNetworkPolicyDocumentAttachmentPolicyConditionOutput
}

type GetCoreNetworkPolicyDocumentAttachmentPolicyConditionArgs struct {
	// string value
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Valid values include: `equals`, `not-equals`, `contains`, `begins-with`.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// Valid values include: `account-id`, `any`, `tag-value`, `tag-exists`, `resource-id`, `region`, `attachment-type`.
	Type pulumi.StringInput `pulumi:"type"`
	// string value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (GetCoreNetworkPolicyDocumentAttachmentPolicyConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCoreNetworkPolicyDocumentAttachmentPolicyCondition)(nil)).Elem()
}

func (i GetCoreNetworkPolicyDocumentAttachmentPolicyConditionArgs) ToGetCoreNetworkPolicyDocumentAttachmentPolicyConditionOutput() GetCoreNetworkPolicyDocumentAttachmentPolicyConditionOutput {
	return i.ToGetCoreNetworkPolicyDocumentAttachmentPolicyConditionOutputWithContext(context.Background())
}

func (i GetCoreNetworkPolicyDocumentAttachmentPolicyConditionArgs) ToGetCoreNetworkPolicyDocumentAttachmentPolicyConditionOutputWithContext(ctx context.Context) GetCoreNetworkPolicyDocumentAttachmentPolicyConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCoreNetworkPolicyDocumentAttachmentPolicyConditionOutput)
}

// GetCoreNetworkPolicyDocumentAttachmentPolicyConditionArrayInput is an input type that accepts GetCoreNetworkPolicyDocumentAttachmentPolicyConditionArray and GetCoreNetworkPolicyDocumentAttachmentPolicyConditionArrayOutput values.
// You can construct a concrete instance of `GetCoreNetworkPolicyDocumentAttachmentPolicyConditionArrayInput` via:
//
//	GetCoreNetworkPolicyDocumentAttachmentPolicyConditionArray{ GetCoreNetworkPolicyDocumentAttachmentPolicyConditionArgs{...} }
type GetCoreNetworkPolicyDocumentAttachmentPolicyConditionArrayInput interface {
	pulumi.Input

	ToGetCoreNetworkPolicyDocumentAttachmentPolicyConditionArrayOutput() GetCoreNetworkPolicyDocumentAttachmentPolicyConditionArrayOutput
	ToGetCoreNetworkPolicyDocumentAttachmentPolicyConditionArrayOutputWithContext(context.Context) GetCoreNetworkPolicyDocumentAttachmentPolicyConditionArrayOutput
}

type GetCoreNetworkPolicyDocumentAttachmentPolicyConditionArray []GetCoreNetworkPolicyDocumentAttachmentPolicyConditionInput

func (GetCoreNetworkPolicyDocumentAttachmentPolicyConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCoreNetworkPolicyDocumentAttachmentPolicyCondition)(nil)).Elem()
}

func (i GetCoreNetworkPolicyDocumentAttachmentPolicyConditionArray) ToGetCoreNetworkPolicyDocumentAttachmentPolicyConditionArrayOutput() GetCoreNetworkPolicyDocumentAttachmentPolicyConditionArrayOutput {
	return i.ToGetCoreNetworkPolicyDocumentAttachmentPolicyConditionArrayOutputWithContext(context.Background())
}

func (i GetCoreNetworkPolicyDocumentAttachmentPolicyConditionArray) ToGetCoreNetworkPolicyDocumentAttachmentPolicyConditionArrayOutputWithContext(ctx context.Context) GetCoreNetworkPolicyDocumentAttachmentPolicyConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCoreNetworkPolicyDocumentAttachmentPolicyConditionArrayOutput)
}

type GetCoreNetworkPolicyDocumentAttachmentPolicyConditionOutput struct{ *pulumi.OutputState }

func (GetCoreNetworkPolicyDocumentAttachmentPolicyConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCoreNetworkPolicyDocumentAttachmentPolicyCondition)(nil)).Elem()
}

func (o GetCoreNetworkPolicyDocumentAttachmentPolicyConditionOutput) ToGetCoreNetworkPolicyDocumentAttachmentPolicyConditionOutput() GetCoreNetworkPolicyDocumentAttachmentPolicyConditionOutput {
	return o
}

func (o GetCoreNetworkPolicyDocumentAttachmentPolicyConditionOutput) ToGetCoreNetworkPolicyDocumentAttachmentPolicyConditionOutputWithContext(ctx context.Context) GetCoreNetworkPolicyDocumentAttachmentPolicyConditionOutput {
	return o
}

// string value
func (o GetCoreNetworkPolicyDocumentAttachmentPolicyConditionOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCoreNetworkPolicyDocumentAttachmentPolicyCondition) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Valid values include: `equals`, `not-equals`, `contains`, `begins-with`.
func (o GetCoreNetworkPolicyDocumentAttachmentPolicyConditionOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCoreNetworkPolicyDocumentAttachmentPolicyCondition) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// Valid values include: `account-id`, `any`, `tag-value`, `tag-exists`, `resource-id`, `region`, `attachment-type`.
func (o GetCoreNetworkPolicyDocumentAttachmentPolicyConditionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetCoreNetworkPolicyDocumentAttachmentPolicyCondition) string { return v.Type }).(pulumi.StringOutput)
}

// string value
func (o GetCoreNetworkPolicyDocumentAttachmentPolicyConditionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCoreNetworkPolicyDocumentAttachmentPolicyCondition) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GetCoreNetworkPolicyDocumentAttachmentPolicyConditionArrayOutput struct{ *pulumi.OutputState }

func (GetCoreNetworkPolicyDocumentAttachmentPolicyConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCoreNetworkPolicyDocumentAttachmentPolicyCondition)(nil)).Elem()
}

func (o GetCoreNetworkPolicyDocumentAttachmentPolicyConditionArrayOutput) ToGetCoreNetworkPolicyDocumentAttachmentPolicyConditionArrayOutput() GetCoreNetworkPolicyDocumentAttachmentPolicyConditionArrayOutput {
	return o
}

func (o GetCoreNetworkPolicyDocumentAttachmentPolicyConditionArrayOutput) ToGetCoreNetworkPolicyDocumentAttachmentPolicyConditionArrayOutputWithContext(ctx context.Context) GetCoreNetworkPolicyDocumentAttachmentPolicyConditionArrayOutput {
	return o
}

func (o GetCoreNetworkPolicyDocumentAttachmentPolicyConditionArrayOutput) Index(i pulumi.IntInput) GetCoreNetworkPolicyDocumentAttachmentPolicyConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCoreNetworkPolicyDocumentAttachmentPolicyCondition {
		return vs[0].([]GetCoreNetworkPolicyDocumentAttachmentPolicyCondition)[vs[1].(int)]
	}).(GetCoreNetworkPolicyDocumentAttachmentPolicyConditionOutput)
}

type GetCoreNetworkPolicyDocumentCoreNetworkConfiguration struct {
	// List of strings containing Autonomous System Numbers (ASNs) to assign to Core Network Edges. By default, the core network automatically assigns an ASN for each Core Network Edge but you can optionally define the ASN in the edge-locations for each Region. The ASN uses an array of integer ranges only from `64512` to `65534` and `4200000000` to `4294967294` expressed as a string like `"64512-65534"`. No other ASN ranges can be used.
	AsnRanges []string `pulumi:"asnRanges"`
	// A list of strings of AWS Region names. Allows you to define a more restrictive set of Regions for a segment. The edge location must be a subset of the locations that are defined for `edgeLocations` in the `coreNetworkConfiguration`.
	EdgeLocations []GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocation `pulumi:"edgeLocations"`
	// The local CIDR blocks for this Core Network Edge for AWS Transit Gateway Connect attachments. By default, this CIDR block will be one or more optional IPv4 and IPv6 CIDR prefixes auto-assigned from `insideCidrBlocks`.
	InsideCidrBlocks []string `pulumi:"insideCidrBlocks"`
	// Indicates whether the core network forwards traffic over multiple equal-cost routes using VPN. The value can be either `true` or `false`. The default is `true`.
	VpnEcmpSupport *bool `pulumi:"vpnEcmpSupport"`
}

// GetCoreNetworkPolicyDocumentCoreNetworkConfigurationInput is an input type that accepts GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArgs and GetCoreNetworkPolicyDocumentCoreNetworkConfigurationOutput values.
// You can construct a concrete instance of `GetCoreNetworkPolicyDocumentCoreNetworkConfigurationInput` via:
//
//	GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArgs{...}
type GetCoreNetworkPolicyDocumentCoreNetworkConfigurationInput interface {
	pulumi.Input

	ToGetCoreNetworkPolicyDocumentCoreNetworkConfigurationOutput() GetCoreNetworkPolicyDocumentCoreNetworkConfigurationOutput
	ToGetCoreNetworkPolicyDocumentCoreNetworkConfigurationOutputWithContext(context.Context) GetCoreNetworkPolicyDocumentCoreNetworkConfigurationOutput
}

type GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArgs struct {
	// List of strings containing Autonomous System Numbers (ASNs) to assign to Core Network Edges. By default, the core network automatically assigns an ASN for each Core Network Edge but you can optionally define the ASN in the edge-locations for each Region. The ASN uses an array of integer ranges only from `64512` to `65534` and `4200000000` to `4294967294` expressed as a string like `"64512-65534"`. No other ASN ranges can be used.
	AsnRanges pulumi.StringArrayInput `pulumi:"asnRanges"`
	// A list of strings of AWS Region names. Allows you to define a more restrictive set of Regions for a segment. The edge location must be a subset of the locations that are defined for `edgeLocations` in the `coreNetworkConfiguration`.
	EdgeLocations GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArrayInput `pulumi:"edgeLocations"`
	// The local CIDR blocks for this Core Network Edge for AWS Transit Gateway Connect attachments. By default, this CIDR block will be one or more optional IPv4 and IPv6 CIDR prefixes auto-assigned from `insideCidrBlocks`.
	InsideCidrBlocks pulumi.StringArrayInput `pulumi:"insideCidrBlocks"`
	// Indicates whether the core network forwards traffic over multiple equal-cost routes using VPN. The value can be either `true` or `false`. The default is `true`.
	VpnEcmpSupport pulumi.BoolPtrInput `pulumi:"vpnEcmpSupport"`
}

func (GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCoreNetworkPolicyDocumentCoreNetworkConfiguration)(nil)).Elem()
}

func (i GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArgs) ToGetCoreNetworkPolicyDocumentCoreNetworkConfigurationOutput() GetCoreNetworkPolicyDocumentCoreNetworkConfigurationOutput {
	return i.ToGetCoreNetworkPolicyDocumentCoreNetworkConfigurationOutputWithContext(context.Background())
}

func (i GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArgs) ToGetCoreNetworkPolicyDocumentCoreNetworkConfigurationOutputWithContext(ctx context.Context) GetCoreNetworkPolicyDocumentCoreNetworkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCoreNetworkPolicyDocumentCoreNetworkConfigurationOutput)
}

// GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArrayInput is an input type that accepts GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArray and GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArrayOutput values.
// You can construct a concrete instance of `GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArrayInput` via:
//
//	GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArray{ GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArgs{...} }
type GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArrayInput interface {
	pulumi.Input

	ToGetCoreNetworkPolicyDocumentCoreNetworkConfigurationArrayOutput() GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArrayOutput
	ToGetCoreNetworkPolicyDocumentCoreNetworkConfigurationArrayOutputWithContext(context.Context) GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArrayOutput
}

type GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArray []GetCoreNetworkPolicyDocumentCoreNetworkConfigurationInput

func (GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCoreNetworkPolicyDocumentCoreNetworkConfiguration)(nil)).Elem()
}

func (i GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArray) ToGetCoreNetworkPolicyDocumentCoreNetworkConfigurationArrayOutput() GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArrayOutput {
	return i.ToGetCoreNetworkPolicyDocumentCoreNetworkConfigurationArrayOutputWithContext(context.Background())
}

func (i GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArray) ToGetCoreNetworkPolicyDocumentCoreNetworkConfigurationArrayOutputWithContext(ctx context.Context) GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArrayOutput)
}

type GetCoreNetworkPolicyDocumentCoreNetworkConfigurationOutput struct{ *pulumi.OutputState }

func (GetCoreNetworkPolicyDocumentCoreNetworkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCoreNetworkPolicyDocumentCoreNetworkConfiguration)(nil)).Elem()
}

func (o GetCoreNetworkPolicyDocumentCoreNetworkConfigurationOutput) ToGetCoreNetworkPolicyDocumentCoreNetworkConfigurationOutput() GetCoreNetworkPolicyDocumentCoreNetworkConfigurationOutput {
	return o
}

func (o GetCoreNetworkPolicyDocumentCoreNetworkConfigurationOutput) ToGetCoreNetworkPolicyDocumentCoreNetworkConfigurationOutputWithContext(ctx context.Context) GetCoreNetworkPolicyDocumentCoreNetworkConfigurationOutput {
	return o
}

// List of strings containing Autonomous System Numbers (ASNs) to assign to Core Network Edges. By default, the core network automatically assigns an ASN for each Core Network Edge but you can optionally define the ASN in the edge-locations for each Region. The ASN uses an array of integer ranges only from `64512` to `65534` and `4200000000` to `4294967294` expressed as a string like `"64512-65534"`. No other ASN ranges can be used.
func (o GetCoreNetworkPolicyDocumentCoreNetworkConfigurationOutput) AsnRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCoreNetworkPolicyDocumentCoreNetworkConfiguration) []string { return v.AsnRanges }).(pulumi.StringArrayOutput)
}

// A list of strings of AWS Region names. Allows you to define a more restrictive set of Regions for a segment. The edge location must be a subset of the locations that are defined for `edgeLocations` in the `coreNetworkConfiguration`.
func (o GetCoreNetworkPolicyDocumentCoreNetworkConfigurationOutput) EdgeLocations() GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArrayOutput {
	return o.ApplyT(func(v GetCoreNetworkPolicyDocumentCoreNetworkConfiguration) []GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocation {
		return v.EdgeLocations
	}).(GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArrayOutput)
}

// The local CIDR blocks for this Core Network Edge for AWS Transit Gateway Connect attachments. By default, this CIDR block will be one or more optional IPv4 and IPv6 CIDR prefixes auto-assigned from `insideCidrBlocks`.
func (o GetCoreNetworkPolicyDocumentCoreNetworkConfigurationOutput) InsideCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCoreNetworkPolicyDocumentCoreNetworkConfiguration) []string { return v.InsideCidrBlocks }).(pulumi.StringArrayOutput)
}

// Indicates whether the core network forwards traffic over multiple equal-cost routes using VPN. The value can be either `true` or `false`. The default is `true`.
func (o GetCoreNetworkPolicyDocumentCoreNetworkConfigurationOutput) VpnEcmpSupport() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetCoreNetworkPolicyDocumentCoreNetworkConfiguration) *bool { return v.VpnEcmpSupport }).(pulumi.BoolPtrOutput)
}

type GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArrayOutput struct{ *pulumi.OutputState }

func (GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCoreNetworkPolicyDocumentCoreNetworkConfiguration)(nil)).Elem()
}

func (o GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArrayOutput) ToGetCoreNetworkPolicyDocumentCoreNetworkConfigurationArrayOutput() GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArrayOutput {
	return o
}

func (o GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArrayOutput) ToGetCoreNetworkPolicyDocumentCoreNetworkConfigurationArrayOutputWithContext(ctx context.Context) GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArrayOutput {
	return o
}

func (o GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArrayOutput) Index(i pulumi.IntInput) GetCoreNetworkPolicyDocumentCoreNetworkConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCoreNetworkPolicyDocumentCoreNetworkConfiguration {
		return vs[0].([]GetCoreNetworkPolicyDocumentCoreNetworkConfiguration)[vs[1].(int)]
	}).(GetCoreNetworkPolicyDocumentCoreNetworkConfigurationOutput)
}

type GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocation struct {
	// ASN of the Core Network Edge in an AWS Region. By default, the ASN will be a single integer automatically assigned from `asnRanges`
	Asn *string `pulumi:"asn"`
	// The local CIDR blocks for this Core Network Edge for AWS Transit Gateway Connect attachments. By default, this CIDR block will be one or more optional IPv4 and IPv6 CIDR prefixes auto-assigned from `insideCidrBlocks`.
	InsideCidrBlocks []string `pulumi:"insideCidrBlocks"`
	Location         string   `pulumi:"location"`
}

// GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationInput is an input type that accepts GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArgs and GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationOutput values.
// You can construct a concrete instance of `GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationInput` via:
//
//	GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArgs{...}
type GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationInput interface {
	pulumi.Input

	ToGetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationOutput() GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationOutput
	ToGetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationOutputWithContext(context.Context) GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationOutput
}

type GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArgs struct {
	// ASN of the Core Network Edge in an AWS Region. By default, the ASN will be a single integer automatically assigned from `asnRanges`
	Asn pulumi.StringPtrInput `pulumi:"asn"`
	// The local CIDR blocks for this Core Network Edge for AWS Transit Gateway Connect attachments. By default, this CIDR block will be one or more optional IPv4 and IPv6 CIDR prefixes auto-assigned from `insideCidrBlocks`.
	InsideCidrBlocks pulumi.StringArrayInput `pulumi:"insideCidrBlocks"`
	Location         pulumi.StringInput      `pulumi:"location"`
}

func (GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocation)(nil)).Elem()
}

func (i GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArgs) ToGetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationOutput() GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationOutput {
	return i.ToGetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationOutputWithContext(context.Background())
}

func (i GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArgs) ToGetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationOutputWithContext(ctx context.Context) GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationOutput)
}

// GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArrayInput is an input type that accepts GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArray and GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArrayOutput values.
// You can construct a concrete instance of `GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArrayInput` via:
//
//	GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArray{ GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArgs{...} }
type GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArrayInput interface {
	pulumi.Input

	ToGetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArrayOutput() GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArrayOutput
	ToGetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArrayOutputWithContext(context.Context) GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArrayOutput
}

type GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArray []GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationInput

func (GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocation)(nil)).Elem()
}

func (i GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArray) ToGetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArrayOutput() GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArrayOutput {
	return i.ToGetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArrayOutputWithContext(context.Background())
}

func (i GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArray) ToGetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArrayOutputWithContext(ctx context.Context) GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArrayOutput)
}

type GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationOutput struct{ *pulumi.OutputState }

func (GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocation)(nil)).Elem()
}

func (o GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationOutput) ToGetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationOutput() GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationOutput {
	return o
}

func (o GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationOutput) ToGetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationOutputWithContext(ctx context.Context) GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationOutput {
	return o
}

// ASN of the Core Network Edge in an AWS Region. By default, the ASN will be a single integer automatically assigned from `asnRanges`
func (o GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationOutput) Asn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocation) *string { return v.Asn }).(pulumi.StringPtrOutput)
}

// The local CIDR blocks for this Core Network Edge for AWS Transit Gateway Connect attachments. By default, this CIDR block will be one or more optional IPv4 and IPv6 CIDR prefixes auto-assigned from `insideCidrBlocks`.
func (o GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationOutput) InsideCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocation) []string {
		return v.InsideCidrBlocks
	}).(pulumi.StringArrayOutput)
}

func (o GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocation) string { return v.Location }).(pulumi.StringOutput)
}

type GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArrayOutput struct{ *pulumi.OutputState }

func (GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocation)(nil)).Elem()
}

func (o GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArrayOutput) ToGetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArrayOutput() GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArrayOutput {
	return o
}

func (o GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArrayOutput) ToGetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArrayOutputWithContext(ctx context.Context) GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArrayOutput {
	return o
}

func (o GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArrayOutput) Index(i pulumi.IntInput) GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocation {
		return vs[0].([]GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocation)[vs[1].(int)]
	}).(GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationOutput)
}

type GetCoreNetworkPolicyDocumentSegment struct {
	// List of strings of segment names that explicitly allows only routes from the segments that are listed in the array. Use the `allowFilter` setting if a segment has a well-defined group of other segments that connectivity should be restricted to. It is applied after routes have been shared in `segmentActions`. If a segment is listed in `allowFilter`, attachments between the two segments will have routes if they are also shared in the segment-actions area. For example, you might have a segment named "video-producer" that should only ever share routes with a "video-distributor" segment, no matter how many other share statements are created.
	AllowFilters []string `pulumi:"allowFilters"`
	// An array of segments that disallows routes from the segments listed in the array. It is applied only after routes have been shared in `segmentActions`. If a segment is listed in the `denyFilter`, attachments between the two segments will never have routes shared across them. For example, you might have a "financial" payment segment that should never share routes with a "development" segment, regardless of how many other share statements are created. Adding the payments segment to the deny-filter parameter prevents any shared routes from being created with other segments.
	DenyFilters []string `pulumi:"denyFilters"`
	// A user-defined string describing the segment action.
	Description *string `pulumi:"description"`
	// A list of strings of AWS Region names. Allows you to define a more restrictive set of Regions for a segment. The edge location must be a subset of the locations that are defined for `edgeLocations` in the `coreNetworkConfiguration`.
	EdgeLocations []string `pulumi:"edgeLocations"`
	// This Boolean setting determines whether attachments on the same segment can communicate with each other. If set to `true`, the only routes available will be either shared routes through the share actions, which are attachments in other segments, or static routes. The default value is `false`. For example, you might have a segment dedicated to "development" that should never allow VPCs to talk to each other, even if they’re on the same segment. In this example, you would keep the default parameter of `false`.
	IsolateAttachments *bool `pulumi:"isolateAttachments"`
	// Unique name for a segment. The name is a string used in other parts of the policy document, as well as in the console for metrics and other reference points. Valid characters are a–z, and 0–9.
	Name string `pulumi:"name"`
	// This Boolean setting determines whether attachment requests are automatically approved or require acceptance. The default is `true`, indicating that attachment requests require acceptance. For example, you might use this setting to allow a "sandbox" segment to allow any attachment request so that a core network or attachment administrator does not need to review and approve attachment requests. In this example, `requireAttachmentAcceptance` is set to `false`.
	RequireAttachmentAcceptance *bool `pulumi:"requireAttachmentAcceptance"`
}

// GetCoreNetworkPolicyDocumentSegmentInput is an input type that accepts GetCoreNetworkPolicyDocumentSegmentArgs and GetCoreNetworkPolicyDocumentSegmentOutput values.
// You can construct a concrete instance of `GetCoreNetworkPolicyDocumentSegmentInput` via:
//
//	GetCoreNetworkPolicyDocumentSegmentArgs{...}
type GetCoreNetworkPolicyDocumentSegmentInput interface {
	pulumi.Input

	ToGetCoreNetworkPolicyDocumentSegmentOutput() GetCoreNetworkPolicyDocumentSegmentOutput
	ToGetCoreNetworkPolicyDocumentSegmentOutputWithContext(context.Context) GetCoreNetworkPolicyDocumentSegmentOutput
}

type GetCoreNetworkPolicyDocumentSegmentArgs struct {
	// List of strings of segment names that explicitly allows only routes from the segments that are listed in the array. Use the `allowFilter` setting if a segment has a well-defined group of other segments that connectivity should be restricted to. It is applied after routes have been shared in `segmentActions`. If a segment is listed in `allowFilter`, attachments between the two segments will have routes if they are also shared in the segment-actions area. For example, you might have a segment named "video-producer" that should only ever share routes with a "video-distributor" segment, no matter how many other share statements are created.
	AllowFilters pulumi.StringArrayInput `pulumi:"allowFilters"`
	// An array of segments that disallows routes from the segments listed in the array. It is applied only after routes have been shared in `segmentActions`. If a segment is listed in the `denyFilter`, attachments between the two segments will never have routes shared across them. For example, you might have a "financial" payment segment that should never share routes with a "development" segment, regardless of how many other share statements are created. Adding the payments segment to the deny-filter parameter prevents any shared routes from being created with other segments.
	DenyFilters pulumi.StringArrayInput `pulumi:"denyFilters"`
	// A user-defined string describing the segment action.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// A list of strings of AWS Region names. Allows you to define a more restrictive set of Regions for a segment. The edge location must be a subset of the locations that are defined for `edgeLocations` in the `coreNetworkConfiguration`.
	EdgeLocations pulumi.StringArrayInput `pulumi:"edgeLocations"`
	// This Boolean setting determines whether attachments on the same segment can communicate with each other. If set to `true`, the only routes available will be either shared routes through the share actions, which are attachments in other segments, or static routes. The default value is `false`. For example, you might have a segment dedicated to "development" that should never allow VPCs to talk to each other, even if they’re on the same segment. In this example, you would keep the default parameter of `false`.
	IsolateAttachments pulumi.BoolPtrInput `pulumi:"isolateAttachments"`
	// Unique name for a segment. The name is a string used in other parts of the policy document, as well as in the console for metrics and other reference points. Valid characters are a–z, and 0–9.
	Name pulumi.StringInput `pulumi:"name"`
	// This Boolean setting determines whether attachment requests are automatically approved or require acceptance. The default is `true`, indicating that attachment requests require acceptance. For example, you might use this setting to allow a "sandbox" segment to allow any attachment request so that a core network or attachment administrator does not need to review and approve attachment requests. In this example, `requireAttachmentAcceptance` is set to `false`.
	RequireAttachmentAcceptance pulumi.BoolPtrInput `pulumi:"requireAttachmentAcceptance"`
}

func (GetCoreNetworkPolicyDocumentSegmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCoreNetworkPolicyDocumentSegment)(nil)).Elem()
}

func (i GetCoreNetworkPolicyDocumentSegmentArgs) ToGetCoreNetworkPolicyDocumentSegmentOutput() GetCoreNetworkPolicyDocumentSegmentOutput {
	return i.ToGetCoreNetworkPolicyDocumentSegmentOutputWithContext(context.Background())
}

func (i GetCoreNetworkPolicyDocumentSegmentArgs) ToGetCoreNetworkPolicyDocumentSegmentOutputWithContext(ctx context.Context) GetCoreNetworkPolicyDocumentSegmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCoreNetworkPolicyDocumentSegmentOutput)
}

// GetCoreNetworkPolicyDocumentSegmentArrayInput is an input type that accepts GetCoreNetworkPolicyDocumentSegmentArray and GetCoreNetworkPolicyDocumentSegmentArrayOutput values.
// You can construct a concrete instance of `GetCoreNetworkPolicyDocumentSegmentArrayInput` via:
//
//	GetCoreNetworkPolicyDocumentSegmentArray{ GetCoreNetworkPolicyDocumentSegmentArgs{...} }
type GetCoreNetworkPolicyDocumentSegmentArrayInput interface {
	pulumi.Input

	ToGetCoreNetworkPolicyDocumentSegmentArrayOutput() GetCoreNetworkPolicyDocumentSegmentArrayOutput
	ToGetCoreNetworkPolicyDocumentSegmentArrayOutputWithContext(context.Context) GetCoreNetworkPolicyDocumentSegmentArrayOutput
}

type GetCoreNetworkPolicyDocumentSegmentArray []GetCoreNetworkPolicyDocumentSegmentInput

func (GetCoreNetworkPolicyDocumentSegmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCoreNetworkPolicyDocumentSegment)(nil)).Elem()
}

func (i GetCoreNetworkPolicyDocumentSegmentArray) ToGetCoreNetworkPolicyDocumentSegmentArrayOutput() GetCoreNetworkPolicyDocumentSegmentArrayOutput {
	return i.ToGetCoreNetworkPolicyDocumentSegmentArrayOutputWithContext(context.Background())
}

func (i GetCoreNetworkPolicyDocumentSegmentArray) ToGetCoreNetworkPolicyDocumentSegmentArrayOutputWithContext(ctx context.Context) GetCoreNetworkPolicyDocumentSegmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCoreNetworkPolicyDocumentSegmentArrayOutput)
}

type GetCoreNetworkPolicyDocumentSegmentOutput struct{ *pulumi.OutputState }

func (GetCoreNetworkPolicyDocumentSegmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCoreNetworkPolicyDocumentSegment)(nil)).Elem()
}

func (o GetCoreNetworkPolicyDocumentSegmentOutput) ToGetCoreNetworkPolicyDocumentSegmentOutput() GetCoreNetworkPolicyDocumentSegmentOutput {
	return o
}

func (o GetCoreNetworkPolicyDocumentSegmentOutput) ToGetCoreNetworkPolicyDocumentSegmentOutputWithContext(ctx context.Context) GetCoreNetworkPolicyDocumentSegmentOutput {
	return o
}

// List of strings of segment names that explicitly allows only routes from the segments that are listed in the array. Use the `allowFilter` setting if a segment has a well-defined group of other segments that connectivity should be restricted to. It is applied after routes have been shared in `segmentActions`. If a segment is listed in `allowFilter`, attachments between the two segments will have routes if they are also shared in the segment-actions area. For example, you might have a segment named "video-producer" that should only ever share routes with a "video-distributor" segment, no matter how many other share statements are created.
func (o GetCoreNetworkPolicyDocumentSegmentOutput) AllowFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCoreNetworkPolicyDocumentSegment) []string { return v.AllowFilters }).(pulumi.StringArrayOutput)
}

// An array of segments that disallows routes from the segments listed in the array. It is applied only after routes have been shared in `segmentActions`. If a segment is listed in the `denyFilter`, attachments between the two segments will never have routes shared across them. For example, you might have a "financial" payment segment that should never share routes with a "development" segment, regardless of how many other share statements are created. Adding the payments segment to the deny-filter parameter prevents any shared routes from being created with other segments.
func (o GetCoreNetworkPolicyDocumentSegmentOutput) DenyFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCoreNetworkPolicyDocumentSegment) []string { return v.DenyFilters }).(pulumi.StringArrayOutput)
}

// A user-defined string describing the segment action.
func (o GetCoreNetworkPolicyDocumentSegmentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCoreNetworkPolicyDocumentSegment) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// A list of strings of AWS Region names. Allows you to define a more restrictive set of Regions for a segment. The edge location must be a subset of the locations that are defined for `edgeLocations` in the `coreNetworkConfiguration`.
func (o GetCoreNetworkPolicyDocumentSegmentOutput) EdgeLocations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCoreNetworkPolicyDocumentSegment) []string { return v.EdgeLocations }).(pulumi.StringArrayOutput)
}

// This Boolean setting determines whether attachments on the same segment can communicate with each other. If set to `true`, the only routes available will be either shared routes through the share actions, which are attachments in other segments, or static routes. The default value is `false`. For example, you might have a segment dedicated to "development" that should never allow VPCs to talk to each other, even if they’re on the same segment. In this example, you would keep the default parameter of `false`.
func (o GetCoreNetworkPolicyDocumentSegmentOutput) IsolateAttachments() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetCoreNetworkPolicyDocumentSegment) *bool { return v.IsolateAttachments }).(pulumi.BoolPtrOutput)
}

// Unique name for a segment. The name is a string used in other parts of the policy document, as well as in the console for metrics and other reference points. Valid characters are a–z, and 0–9.
func (o GetCoreNetworkPolicyDocumentSegmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetCoreNetworkPolicyDocumentSegment) string { return v.Name }).(pulumi.StringOutput)
}

// This Boolean setting determines whether attachment requests are automatically approved or require acceptance. The default is `true`, indicating that attachment requests require acceptance. For example, you might use this setting to allow a "sandbox" segment to allow any attachment request so that a core network or attachment administrator does not need to review and approve attachment requests. In this example, `requireAttachmentAcceptance` is set to `false`.
func (o GetCoreNetworkPolicyDocumentSegmentOutput) RequireAttachmentAcceptance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetCoreNetworkPolicyDocumentSegment) *bool { return v.RequireAttachmentAcceptance }).(pulumi.BoolPtrOutput)
}

type GetCoreNetworkPolicyDocumentSegmentArrayOutput struct{ *pulumi.OutputState }

func (GetCoreNetworkPolicyDocumentSegmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCoreNetworkPolicyDocumentSegment)(nil)).Elem()
}

func (o GetCoreNetworkPolicyDocumentSegmentArrayOutput) ToGetCoreNetworkPolicyDocumentSegmentArrayOutput() GetCoreNetworkPolicyDocumentSegmentArrayOutput {
	return o
}

func (o GetCoreNetworkPolicyDocumentSegmentArrayOutput) ToGetCoreNetworkPolicyDocumentSegmentArrayOutputWithContext(ctx context.Context) GetCoreNetworkPolicyDocumentSegmentArrayOutput {
	return o
}

func (o GetCoreNetworkPolicyDocumentSegmentArrayOutput) Index(i pulumi.IntInput) GetCoreNetworkPolicyDocumentSegmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCoreNetworkPolicyDocumentSegment {
		return vs[0].([]GetCoreNetworkPolicyDocumentSegment)[vs[1].(int)]
	}).(GetCoreNetworkPolicyDocumentSegmentOutput)
}

type GetCoreNetworkPolicyDocumentSegmentAction struct {
	// Action to take for the chosen segment. Valid values `create-route` or `share`.
	Action string `pulumi:"action"`
	// A user-defined string describing the segment action.
	Description *string `pulumi:"description"`
	// List of strings containing CIDRs. You can define the IPv4 and IPv6 CIDR notation for each AWS Region. For example, `10.1.0.0/16` or `2001:db8::/56`. This is an array of CIDR notation strings.
	DestinationCidrBlocks []string `pulumi:"destinationCidrBlocks"`
	// A list of strings. Valid values include `["blackhole"]` or a list of attachment ids.
	Destinations []string `pulumi:"destinations"`
	// String. This mode places the attachment and return routes in each of the `shareWith` segments. Valid values include: `attachment-route`.
	Mode *string `pulumi:"mode"`
	// Name of the segment.
	Segment string `pulumi:"segment"`
	// A set subtraction of segments to not share with.
	ShareWithExcepts []string `pulumi:"shareWithExcepts"`
	// A list of strings to share with. Must be a substring is all segments. Valid values include: `["*"]` or `["<segment-names>"]`.
	ShareWiths []string `pulumi:"shareWiths"`
}

// GetCoreNetworkPolicyDocumentSegmentActionInput is an input type that accepts GetCoreNetworkPolicyDocumentSegmentActionArgs and GetCoreNetworkPolicyDocumentSegmentActionOutput values.
// You can construct a concrete instance of `GetCoreNetworkPolicyDocumentSegmentActionInput` via:
//
//	GetCoreNetworkPolicyDocumentSegmentActionArgs{...}
type GetCoreNetworkPolicyDocumentSegmentActionInput interface {
	pulumi.Input

	ToGetCoreNetworkPolicyDocumentSegmentActionOutput() GetCoreNetworkPolicyDocumentSegmentActionOutput
	ToGetCoreNetworkPolicyDocumentSegmentActionOutputWithContext(context.Context) GetCoreNetworkPolicyDocumentSegmentActionOutput
}

type GetCoreNetworkPolicyDocumentSegmentActionArgs struct {
	// Action to take for the chosen segment. Valid values `create-route` or `share`.
	Action pulumi.StringInput `pulumi:"action"`
	// A user-defined string describing the segment action.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// List of strings containing CIDRs. You can define the IPv4 and IPv6 CIDR notation for each AWS Region. For example, `10.1.0.0/16` or `2001:db8::/56`. This is an array of CIDR notation strings.
	DestinationCidrBlocks pulumi.StringArrayInput `pulumi:"destinationCidrBlocks"`
	// A list of strings. Valid values include `["blackhole"]` or a list of attachment ids.
	Destinations pulumi.StringArrayInput `pulumi:"destinations"`
	// String. This mode places the attachment and return routes in each of the `shareWith` segments. Valid values include: `attachment-route`.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Name of the segment.
	Segment pulumi.StringInput `pulumi:"segment"`
	// A set subtraction of segments to not share with.
	ShareWithExcepts pulumi.StringArrayInput `pulumi:"shareWithExcepts"`
	// A list of strings to share with. Must be a substring is all segments. Valid values include: `["*"]` or `["<segment-names>"]`.
	ShareWiths pulumi.StringArrayInput `pulumi:"shareWiths"`
}

func (GetCoreNetworkPolicyDocumentSegmentActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCoreNetworkPolicyDocumentSegmentAction)(nil)).Elem()
}

func (i GetCoreNetworkPolicyDocumentSegmentActionArgs) ToGetCoreNetworkPolicyDocumentSegmentActionOutput() GetCoreNetworkPolicyDocumentSegmentActionOutput {
	return i.ToGetCoreNetworkPolicyDocumentSegmentActionOutputWithContext(context.Background())
}

func (i GetCoreNetworkPolicyDocumentSegmentActionArgs) ToGetCoreNetworkPolicyDocumentSegmentActionOutputWithContext(ctx context.Context) GetCoreNetworkPolicyDocumentSegmentActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCoreNetworkPolicyDocumentSegmentActionOutput)
}

// GetCoreNetworkPolicyDocumentSegmentActionArrayInput is an input type that accepts GetCoreNetworkPolicyDocumentSegmentActionArray and GetCoreNetworkPolicyDocumentSegmentActionArrayOutput values.
// You can construct a concrete instance of `GetCoreNetworkPolicyDocumentSegmentActionArrayInput` via:
//
//	GetCoreNetworkPolicyDocumentSegmentActionArray{ GetCoreNetworkPolicyDocumentSegmentActionArgs{...} }
type GetCoreNetworkPolicyDocumentSegmentActionArrayInput interface {
	pulumi.Input

	ToGetCoreNetworkPolicyDocumentSegmentActionArrayOutput() GetCoreNetworkPolicyDocumentSegmentActionArrayOutput
	ToGetCoreNetworkPolicyDocumentSegmentActionArrayOutputWithContext(context.Context) GetCoreNetworkPolicyDocumentSegmentActionArrayOutput
}

type GetCoreNetworkPolicyDocumentSegmentActionArray []GetCoreNetworkPolicyDocumentSegmentActionInput

func (GetCoreNetworkPolicyDocumentSegmentActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCoreNetworkPolicyDocumentSegmentAction)(nil)).Elem()
}

func (i GetCoreNetworkPolicyDocumentSegmentActionArray) ToGetCoreNetworkPolicyDocumentSegmentActionArrayOutput() GetCoreNetworkPolicyDocumentSegmentActionArrayOutput {
	return i.ToGetCoreNetworkPolicyDocumentSegmentActionArrayOutputWithContext(context.Background())
}

func (i GetCoreNetworkPolicyDocumentSegmentActionArray) ToGetCoreNetworkPolicyDocumentSegmentActionArrayOutputWithContext(ctx context.Context) GetCoreNetworkPolicyDocumentSegmentActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCoreNetworkPolicyDocumentSegmentActionArrayOutput)
}

type GetCoreNetworkPolicyDocumentSegmentActionOutput struct{ *pulumi.OutputState }

func (GetCoreNetworkPolicyDocumentSegmentActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCoreNetworkPolicyDocumentSegmentAction)(nil)).Elem()
}

func (o GetCoreNetworkPolicyDocumentSegmentActionOutput) ToGetCoreNetworkPolicyDocumentSegmentActionOutput() GetCoreNetworkPolicyDocumentSegmentActionOutput {
	return o
}

func (o GetCoreNetworkPolicyDocumentSegmentActionOutput) ToGetCoreNetworkPolicyDocumentSegmentActionOutputWithContext(ctx context.Context) GetCoreNetworkPolicyDocumentSegmentActionOutput {
	return o
}

// Action to take for the chosen segment. Valid values `create-route` or `share`.
func (o GetCoreNetworkPolicyDocumentSegmentActionOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v GetCoreNetworkPolicyDocumentSegmentAction) string { return v.Action }).(pulumi.StringOutput)
}

// A user-defined string describing the segment action.
func (o GetCoreNetworkPolicyDocumentSegmentActionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCoreNetworkPolicyDocumentSegmentAction) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// List of strings containing CIDRs. You can define the IPv4 and IPv6 CIDR notation for each AWS Region. For example, `10.1.0.0/16` or `2001:db8::/56`. This is an array of CIDR notation strings.
func (o GetCoreNetworkPolicyDocumentSegmentActionOutput) DestinationCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCoreNetworkPolicyDocumentSegmentAction) []string { return v.DestinationCidrBlocks }).(pulumi.StringArrayOutput)
}

// A list of strings. Valid values include `["blackhole"]` or a list of attachment ids.
func (o GetCoreNetworkPolicyDocumentSegmentActionOutput) Destinations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCoreNetworkPolicyDocumentSegmentAction) []string { return v.Destinations }).(pulumi.StringArrayOutput)
}

// String. This mode places the attachment and return routes in each of the `shareWith` segments. Valid values include: `attachment-route`.
func (o GetCoreNetworkPolicyDocumentSegmentActionOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCoreNetworkPolicyDocumentSegmentAction) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Name of the segment.
func (o GetCoreNetworkPolicyDocumentSegmentActionOutput) Segment() pulumi.StringOutput {
	return o.ApplyT(func(v GetCoreNetworkPolicyDocumentSegmentAction) string { return v.Segment }).(pulumi.StringOutput)
}

// A set subtraction of segments to not share with.
func (o GetCoreNetworkPolicyDocumentSegmentActionOutput) ShareWithExcepts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCoreNetworkPolicyDocumentSegmentAction) []string { return v.ShareWithExcepts }).(pulumi.StringArrayOutput)
}

// A list of strings to share with. Must be a substring is all segments. Valid values include: `["*"]` or `["<segment-names>"]`.
func (o GetCoreNetworkPolicyDocumentSegmentActionOutput) ShareWiths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCoreNetworkPolicyDocumentSegmentAction) []string { return v.ShareWiths }).(pulumi.StringArrayOutput)
}

type GetCoreNetworkPolicyDocumentSegmentActionArrayOutput struct{ *pulumi.OutputState }

func (GetCoreNetworkPolicyDocumentSegmentActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCoreNetworkPolicyDocumentSegmentAction)(nil)).Elem()
}

func (o GetCoreNetworkPolicyDocumentSegmentActionArrayOutput) ToGetCoreNetworkPolicyDocumentSegmentActionArrayOutput() GetCoreNetworkPolicyDocumentSegmentActionArrayOutput {
	return o
}

func (o GetCoreNetworkPolicyDocumentSegmentActionArrayOutput) ToGetCoreNetworkPolicyDocumentSegmentActionArrayOutputWithContext(ctx context.Context) GetCoreNetworkPolicyDocumentSegmentActionArrayOutput {
	return o
}

func (o GetCoreNetworkPolicyDocumentSegmentActionArrayOutput) Index(i pulumi.IntInput) GetCoreNetworkPolicyDocumentSegmentActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCoreNetworkPolicyDocumentSegmentAction {
		return vs[0].([]GetCoreNetworkPolicyDocumentSegmentAction)[vs[1].(int)]
	}).(GetCoreNetworkPolicyDocumentSegmentActionOutput)
}

type GetDeviceAwsLocation struct {
	// ARN of the subnet that the device is located in.
	SubnetArn string `pulumi:"subnetArn"`
	// Zone that the device is located in.
	Zone string `pulumi:"zone"`
}

// GetDeviceAwsLocationInput is an input type that accepts GetDeviceAwsLocationArgs and GetDeviceAwsLocationOutput values.
// You can construct a concrete instance of `GetDeviceAwsLocationInput` via:
//
//	GetDeviceAwsLocationArgs{...}
type GetDeviceAwsLocationInput interface {
	pulumi.Input

	ToGetDeviceAwsLocationOutput() GetDeviceAwsLocationOutput
	ToGetDeviceAwsLocationOutputWithContext(context.Context) GetDeviceAwsLocationOutput
}

type GetDeviceAwsLocationArgs struct {
	// ARN of the subnet that the device is located in.
	SubnetArn pulumi.StringInput `pulumi:"subnetArn"`
	// Zone that the device is located in.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (GetDeviceAwsLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceAwsLocation)(nil)).Elem()
}

func (i GetDeviceAwsLocationArgs) ToGetDeviceAwsLocationOutput() GetDeviceAwsLocationOutput {
	return i.ToGetDeviceAwsLocationOutputWithContext(context.Background())
}

func (i GetDeviceAwsLocationArgs) ToGetDeviceAwsLocationOutputWithContext(ctx context.Context) GetDeviceAwsLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceAwsLocationOutput)
}

// GetDeviceAwsLocationArrayInput is an input type that accepts GetDeviceAwsLocationArray and GetDeviceAwsLocationArrayOutput values.
// You can construct a concrete instance of `GetDeviceAwsLocationArrayInput` via:
//
//	GetDeviceAwsLocationArray{ GetDeviceAwsLocationArgs{...} }
type GetDeviceAwsLocationArrayInput interface {
	pulumi.Input

	ToGetDeviceAwsLocationArrayOutput() GetDeviceAwsLocationArrayOutput
	ToGetDeviceAwsLocationArrayOutputWithContext(context.Context) GetDeviceAwsLocationArrayOutput
}

type GetDeviceAwsLocationArray []GetDeviceAwsLocationInput

func (GetDeviceAwsLocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceAwsLocation)(nil)).Elem()
}

func (i GetDeviceAwsLocationArray) ToGetDeviceAwsLocationArrayOutput() GetDeviceAwsLocationArrayOutput {
	return i.ToGetDeviceAwsLocationArrayOutputWithContext(context.Background())
}

func (i GetDeviceAwsLocationArray) ToGetDeviceAwsLocationArrayOutputWithContext(ctx context.Context) GetDeviceAwsLocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceAwsLocationArrayOutput)
}

type GetDeviceAwsLocationOutput struct{ *pulumi.OutputState }

func (GetDeviceAwsLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceAwsLocation)(nil)).Elem()
}

func (o GetDeviceAwsLocationOutput) ToGetDeviceAwsLocationOutput() GetDeviceAwsLocationOutput {
	return o
}

func (o GetDeviceAwsLocationOutput) ToGetDeviceAwsLocationOutputWithContext(ctx context.Context) GetDeviceAwsLocationOutput {
	return o
}

// ARN of the subnet that the device is located in.
func (o GetDeviceAwsLocationOutput) SubnetArn() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceAwsLocation) string { return v.SubnetArn }).(pulumi.StringOutput)
}

// Zone that the device is located in.
func (o GetDeviceAwsLocationOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceAwsLocation) string { return v.Zone }).(pulumi.StringOutput)
}

type GetDeviceAwsLocationArrayOutput struct{ *pulumi.OutputState }

func (GetDeviceAwsLocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceAwsLocation)(nil)).Elem()
}

func (o GetDeviceAwsLocationArrayOutput) ToGetDeviceAwsLocationArrayOutput() GetDeviceAwsLocationArrayOutput {
	return o
}

func (o GetDeviceAwsLocationArrayOutput) ToGetDeviceAwsLocationArrayOutputWithContext(ctx context.Context) GetDeviceAwsLocationArrayOutput {
	return o
}

func (o GetDeviceAwsLocationArrayOutput) Index(i pulumi.IntInput) GetDeviceAwsLocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDeviceAwsLocation {
		return vs[0].([]GetDeviceAwsLocation)[vs[1].(int)]
	}).(GetDeviceAwsLocationOutput)
}

type GetDeviceLocation struct {
	// Physical address.
	Address string `pulumi:"address"`
	// Latitude.
	Latitude string `pulumi:"latitude"`
	// Longitude.
	Longitude string `pulumi:"longitude"`
}

// GetDeviceLocationInput is an input type that accepts GetDeviceLocationArgs and GetDeviceLocationOutput values.
// You can construct a concrete instance of `GetDeviceLocationInput` via:
//
//	GetDeviceLocationArgs{...}
type GetDeviceLocationInput interface {
	pulumi.Input

	ToGetDeviceLocationOutput() GetDeviceLocationOutput
	ToGetDeviceLocationOutputWithContext(context.Context) GetDeviceLocationOutput
}

type GetDeviceLocationArgs struct {
	// Physical address.
	Address pulumi.StringInput `pulumi:"address"`
	// Latitude.
	Latitude pulumi.StringInput `pulumi:"latitude"`
	// Longitude.
	Longitude pulumi.StringInput `pulumi:"longitude"`
}

func (GetDeviceLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceLocation)(nil)).Elem()
}

func (i GetDeviceLocationArgs) ToGetDeviceLocationOutput() GetDeviceLocationOutput {
	return i.ToGetDeviceLocationOutputWithContext(context.Background())
}

func (i GetDeviceLocationArgs) ToGetDeviceLocationOutputWithContext(ctx context.Context) GetDeviceLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceLocationOutput)
}

// GetDeviceLocationArrayInput is an input type that accepts GetDeviceLocationArray and GetDeviceLocationArrayOutput values.
// You can construct a concrete instance of `GetDeviceLocationArrayInput` via:
//
//	GetDeviceLocationArray{ GetDeviceLocationArgs{...} }
type GetDeviceLocationArrayInput interface {
	pulumi.Input

	ToGetDeviceLocationArrayOutput() GetDeviceLocationArrayOutput
	ToGetDeviceLocationArrayOutputWithContext(context.Context) GetDeviceLocationArrayOutput
}

type GetDeviceLocationArray []GetDeviceLocationInput

func (GetDeviceLocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceLocation)(nil)).Elem()
}

func (i GetDeviceLocationArray) ToGetDeviceLocationArrayOutput() GetDeviceLocationArrayOutput {
	return i.ToGetDeviceLocationArrayOutputWithContext(context.Background())
}

func (i GetDeviceLocationArray) ToGetDeviceLocationArrayOutputWithContext(ctx context.Context) GetDeviceLocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceLocationArrayOutput)
}

type GetDeviceLocationOutput struct{ *pulumi.OutputState }

func (GetDeviceLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceLocation)(nil)).Elem()
}

func (o GetDeviceLocationOutput) ToGetDeviceLocationOutput() GetDeviceLocationOutput {
	return o
}

func (o GetDeviceLocationOutput) ToGetDeviceLocationOutputWithContext(ctx context.Context) GetDeviceLocationOutput {
	return o
}

// Physical address.
func (o GetDeviceLocationOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceLocation) string { return v.Address }).(pulumi.StringOutput)
}

// Latitude.
func (o GetDeviceLocationOutput) Latitude() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceLocation) string { return v.Latitude }).(pulumi.StringOutput)
}

// Longitude.
func (o GetDeviceLocationOutput) Longitude() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceLocation) string { return v.Longitude }).(pulumi.StringOutput)
}

type GetDeviceLocationArrayOutput struct{ *pulumi.OutputState }

func (GetDeviceLocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceLocation)(nil)).Elem()
}

func (o GetDeviceLocationArrayOutput) ToGetDeviceLocationArrayOutput() GetDeviceLocationArrayOutput {
	return o
}

func (o GetDeviceLocationArrayOutput) ToGetDeviceLocationArrayOutputWithContext(ctx context.Context) GetDeviceLocationArrayOutput {
	return o
}

func (o GetDeviceLocationArrayOutput) Index(i pulumi.IntInput) GetDeviceLocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDeviceLocation {
		return vs[0].([]GetDeviceLocation)[vs[1].(int)]
	}).(GetDeviceLocationOutput)
}

type GetLinkBandwidth struct {
	// Download speed in Mbps.
	DownloadSpeed int `pulumi:"downloadSpeed"`
	// Upload speed in Mbps.
	UploadSpeed int `pulumi:"uploadSpeed"`
}

// GetLinkBandwidthInput is an input type that accepts GetLinkBandwidthArgs and GetLinkBandwidthOutput values.
// You can construct a concrete instance of `GetLinkBandwidthInput` via:
//
//	GetLinkBandwidthArgs{...}
type GetLinkBandwidthInput interface {
	pulumi.Input

	ToGetLinkBandwidthOutput() GetLinkBandwidthOutput
	ToGetLinkBandwidthOutputWithContext(context.Context) GetLinkBandwidthOutput
}

type GetLinkBandwidthArgs struct {
	// Download speed in Mbps.
	DownloadSpeed pulumi.IntInput `pulumi:"downloadSpeed"`
	// Upload speed in Mbps.
	UploadSpeed pulumi.IntInput `pulumi:"uploadSpeed"`
}

func (GetLinkBandwidthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLinkBandwidth)(nil)).Elem()
}

func (i GetLinkBandwidthArgs) ToGetLinkBandwidthOutput() GetLinkBandwidthOutput {
	return i.ToGetLinkBandwidthOutputWithContext(context.Background())
}

func (i GetLinkBandwidthArgs) ToGetLinkBandwidthOutputWithContext(ctx context.Context) GetLinkBandwidthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLinkBandwidthOutput)
}

// GetLinkBandwidthArrayInput is an input type that accepts GetLinkBandwidthArray and GetLinkBandwidthArrayOutput values.
// You can construct a concrete instance of `GetLinkBandwidthArrayInput` via:
//
//	GetLinkBandwidthArray{ GetLinkBandwidthArgs{...} }
type GetLinkBandwidthArrayInput interface {
	pulumi.Input

	ToGetLinkBandwidthArrayOutput() GetLinkBandwidthArrayOutput
	ToGetLinkBandwidthArrayOutputWithContext(context.Context) GetLinkBandwidthArrayOutput
}

type GetLinkBandwidthArray []GetLinkBandwidthInput

func (GetLinkBandwidthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLinkBandwidth)(nil)).Elem()
}

func (i GetLinkBandwidthArray) ToGetLinkBandwidthArrayOutput() GetLinkBandwidthArrayOutput {
	return i.ToGetLinkBandwidthArrayOutputWithContext(context.Background())
}

func (i GetLinkBandwidthArray) ToGetLinkBandwidthArrayOutputWithContext(ctx context.Context) GetLinkBandwidthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLinkBandwidthArrayOutput)
}

type GetLinkBandwidthOutput struct{ *pulumi.OutputState }

func (GetLinkBandwidthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLinkBandwidth)(nil)).Elem()
}

func (o GetLinkBandwidthOutput) ToGetLinkBandwidthOutput() GetLinkBandwidthOutput {
	return o
}

func (o GetLinkBandwidthOutput) ToGetLinkBandwidthOutputWithContext(ctx context.Context) GetLinkBandwidthOutput {
	return o
}

// Download speed in Mbps.
func (o GetLinkBandwidthOutput) DownloadSpeed() pulumi.IntOutput {
	return o.ApplyT(func(v GetLinkBandwidth) int { return v.DownloadSpeed }).(pulumi.IntOutput)
}

// Upload speed in Mbps.
func (o GetLinkBandwidthOutput) UploadSpeed() pulumi.IntOutput {
	return o.ApplyT(func(v GetLinkBandwidth) int { return v.UploadSpeed }).(pulumi.IntOutput)
}

type GetLinkBandwidthArrayOutput struct{ *pulumi.OutputState }

func (GetLinkBandwidthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLinkBandwidth)(nil)).Elem()
}

func (o GetLinkBandwidthArrayOutput) ToGetLinkBandwidthArrayOutput() GetLinkBandwidthArrayOutput {
	return o
}

func (o GetLinkBandwidthArrayOutput) ToGetLinkBandwidthArrayOutputWithContext(ctx context.Context) GetLinkBandwidthArrayOutput {
	return o
}

func (o GetLinkBandwidthArrayOutput) Index(i pulumi.IntInput) GetLinkBandwidthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLinkBandwidth {
		return vs[0].([]GetLinkBandwidth)[vs[1].(int)]
	}).(GetLinkBandwidthOutput)
}

type GetSiteLocation struct {
	// Address of the location.
	Address string `pulumi:"address"`
	// Latitude of the location.
	Latitude string `pulumi:"latitude"`
	// Longitude of the location.
	Longitude string `pulumi:"longitude"`
}

// GetSiteLocationInput is an input type that accepts GetSiteLocationArgs and GetSiteLocationOutput values.
// You can construct a concrete instance of `GetSiteLocationInput` via:
//
//	GetSiteLocationArgs{...}
type GetSiteLocationInput interface {
	pulumi.Input

	ToGetSiteLocationOutput() GetSiteLocationOutput
	ToGetSiteLocationOutputWithContext(context.Context) GetSiteLocationOutput
}

type GetSiteLocationArgs struct {
	// Address of the location.
	Address pulumi.StringInput `pulumi:"address"`
	// Latitude of the location.
	Latitude pulumi.StringInput `pulumi:"latitude"`
	// Longitude of the location.
	Longitude pulumi.StringInput `pulumi:"longitude"`
}

func (GetSiteLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSiteLocation)(nil)).Elem()
}

func (i GetSiteLocationArgs) ToGetSiteLocationOutput() GetSiteLocationOutput {
	return i.ToGetSiteLocationOutputWithContext(context.Background())
}

func (i GetSiteLocationArgs) ToGetSiteLocationOutputWithContext(ctx context.Context) GetSiteLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSiteLocationOutput)
}

// GetSiteLocationArrayInput is an input type that accepts GetSiteLocationArray and GetSiteLocationArrayOutput values.
// You can construct a concrete instance of `GetSiteLocationArrayInput` via:
//
//	GetSiteLocationArray{ GetSiteLocationArgs{...} }
type GetSiteLocationArrayInput interface {
	pulumi.Input

	ToGetSiteLocationArrayOutput() GetSiteLocationArrayOutput
	ToGetSiteLocationArrayOutputWithContext(context.Context) GetSiteLocationArrayOutput
}

type GetSiteLocationArray []GetSiteLocationInput

func (GetSiteLocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSiteLocation)(nil)).Elem()
}

func (i GetSiteLocationArray) ToGetSiteLocationArrayOutput() GetSiteLocationArrayOutput {
	return i.ToGetSiteLocationArrayOutputWithContext(context.Background())
}

func (i GetSiteLocationArray) ToGetSiteLocationArrayOutputWithContext(ctx context.Context) GetSiteLocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSiteLocationArrayOutput)
}

type GetSiteLocationOutput struct{ *pulumi.OutputState }

func (GetSiteLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSiteLocation)(nil)).Elem()
}

func (o GetSiteLocationOutput) ToGetSiteLocationOutput() GetSiteLocationOutput {
	return o
}

func (o GetSiteLocationOutput) ToGetSiteLocationOutputWithContext(ctx context.Context) GetSiteLocationOutput {
	return o
}

// Address of the location.
func (o GetSiteLocationOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetSiteLocation) string { return v.Address }).(pulumi.StringOutput)
}

// Latitude of the location.
func (o GetSiteLocationOutput) Latitude() pulumi.StringOutput {
	return o.ApplyT(func(v GetSiteLocation) string { return v.Latitude }).(pulumi.StringOutput)
}

// Longitude of the location.
func (o GetSiteLocationOutput) Longitude() pulumi.StringOutput {
	return o.ApplyT(func(v GetSiteLocation) string { return v.Longitude }).(pulumi.StringOutput)
}

type GetSiteLocationArrayOutput struct{ *pulumi.OutputState }

func (GetSiteLocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSiteLocation)(nil)).Elem()
}

func (o GetSiteLocationArrayOutput) ToGetSiteLocationArrayOutput() GetSiteLocationArrayOutput {
	return o
}

func (o GetSiteLocationArrayOutput) ToGetSiteLocationArrayOutputWithContext(ctx context.Context) GetSiteLocationArrayOutput {
	return o
}

func (o GetSiteLocationArrayOutput) Index(i pulumi.IntInput) GetSiteLocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSiteLocation {
		return vs[0].([]GetSiteLocation)[vs[1].(int)]
	}).(GetSiteLocationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceAwsLocationInput)(nil)).Elem(), DeviceAwsLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceAwsLocationPtrInput)(nil)).Elem(), DeviceAwsLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceLocationInput)(nil)).Elem(), DeviceLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceLocationPtrInput)(nil)).Elem(), DeviceLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkBandwidthInput)(nil)).Elem(), LinkBandwidthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkBandwidthPtrInput)(nil)).Elem(), LinkBandwidthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SiteLocationInput)(nil)).Elem(), SiteLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SiteLocationPtrInput)(nil)).Elem(), SiteLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcAttachmentOptionsInput)(nil)).Elem(), VpcAttachmentOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcAttachmentOptionsPtrInput)(nil)).Elem(), VpcAttachmentOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCoreNetworkPolicyDocumentAttachmentPolicyInput)(nil)).Elem(), GetCoreNetworkPolicyDocumentAttachmentPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCoreNetworkPolicyDocumentAttachmentPolicyArrayInput)(nil)).Elem(), GetCoreNetworkPolicyDocumentAttachmentPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCoreNetworkPolicyDocumentAttachmentPolicyActionInput)(nil)).Elem(), GetCoreNetworkPolicyDocumentAttachmentPolicyActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCoreNetworkPolicyDocumentAttachmentPolicyConditionInput)(nil)).Elem(), GetCoreNetworkPolicyDocumentAttachmentPolicyConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCoreNetworkPolicyDocumentAttachmentPolicyConditionArrayInput)(nil)).Elem(), GetCoreNetworkPolicyDocumentAttachmentPolicyConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCoreNetworkPolicyDocumentCoreNetworkConfigurationInput)(nil)).Elem(), GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArrayInput)(nil)).Elem(), GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationInput)(nil)).Elem(), GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArrayInput)(nil)).Elem(), GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCoreNetworkPolicyDocumentSegmentInput)(nil)).Elem(), GetCoreNetworkPolicyDocumentSegmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCoreNetworkPolicyDocumentSegmentArrayInput)(nil)).Elem(), GetCoreNetworkPolicyDocumentSegmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCoreNetworkPolicyDocumentSegmentActionInput)(nil)).Elem(), GetCoreNetworkPolicyDocumentSegmentActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCoreNetworkPolicyDocumentSegmentActionArrayInput)(nil)).Elem(), GetCoreNetworkPolicyDocumentSegmentActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceAwsLocationInput)(nil)).Elem(), GetDeviceAwsLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceAwsLocationArrayInput)(nil)).Elem(), GetDeviceAwsLocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceLocationInput)(nil)).Elem(), GetDeviceLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceLocationArrayInput)(nil)).Elem(), GetDeviceLocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLinkBandwidthInput)(nil)).Elem(), GetLinkBandwidthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLinkBandwidthArrayInput)(nil)).Elem(), GetLinkBandwidthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSiteLocationInput)(nil)).Elem(), GetSiteLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSiteLocationArrayInput)(nil)).Elem(), GetSiteLocationArray{})
	pulumi.RegisterOutputType(DeviceAwsLocationOutput{})
	pulumi.RegisterOutputType(DeviceAwsLocationPtrOutput{})
	pulumi.RegisterOutputType(DeviceLocationOutput{})
	pulumi.RegisterOutputType(DeviceLocationPtrOutput{})
	pulumi.RegisterOutputType(LinkBandwidthOutput{})
	pulumi.RegisterOutputType(LinkBandwidthPtrOutput{})
	pulumi.RegisterOutputType(SiteLocationOutput{})
	pulumi.RegisterOutputType(SiteLocationPtrOutput{})
	pulumi.RegisterOutputType(VpcAttachmentOptionsOutput{})
	pulumi.RegisterOutputType(VpcAttachmentOptionsPtrOutput{})
	pulumi.RegisterOutputType(GetCoreNetworkPolicyDocumentAttachmentPolicyOutput{})
	pulumi.RegisterOutputType(GetCoreNetworkPolicyDocumentAttachmentPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetCoreNetworkPolicyDocumentAttachmentPolicyActionOutput{})
	pulumi.RegisterOutputType(GetCoreNetworkPolicyDocumentAttachmentPolicyConditionOutput{})
	pulumi.RegisterOutputType(GetCoreNetworkPolicyDocumentAttachmentPolicyConditionArrayOutput{})
	pulumi.RegisterOutputType(GetCoreNetworkPolicyDocumentCoreNetworkConfigurationOutput{})
	pulumi.RegisterOutputType(GetCoreNetworkPolicyDocumentCoreNetworkConfigurationArrayOutput{})
	pulumi.RegisterOutputType(GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationOutput{})
	pulumi.RegisterOutputType(GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationArrayOutput{})
	pulumi.RegisterOutputType(GetCoreNetworkPolicyDocumentSegmentOutput{})
	pulumi.RegisterOutputType(GetCoreNetworkPolicyDocumentSegmentArrayOutput{})
	pulumi.RegisterOutputType(GetCoreNetworkPolicyDocumentSegmentActionOutput{})
	pulumi.RegisterOutputType(GetCoreNetworkPolicyDocumentSegmentActionArrayOutput{})
	pulumi.RegisterOutputType(GetDeviceAwsLocationOutput{})
	pulumi.RegisterOutputType(GetDeviceAwsLocationArrayOutput{})
	pulumi.RegisterOutputType(GetDeviceLocationOutput{})
	pulumi.RegisterOutputType(GetDeviceLocationArrayOutput{})
	pulumi.RegisterOutputType(GetLinkBandwidthOutput{})
	pulumi.RegisterOutputType(GetLinkBandwidthArrayOutput{})
	pulumi.RegisterOutputType(GetSiteLocationOutput{})
	pulumi.RegisterOutputType(GetSiteLocationArrayOutput{})
}
