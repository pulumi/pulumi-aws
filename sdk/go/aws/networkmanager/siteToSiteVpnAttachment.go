// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkmanager

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SiteToSiteVpnAttachment struct {
	pulumi.CustomResourceState

	Arn                        pulumi.StringOutput    `pulumi:"arn"`
	AttachmentPolicyRuleNumber pulumi.IntOutput       `pulumi:"attachmentPolicyRuleNumber"`
	AttachmentType             pulumi.StringOutput    `pulumi:"attachmentType"`
	CoreNetworkArn             pulumi.StringOutput    `pulumi:"coreNetworkArn"`
	CoreNetworkId              pulumi.StringOutput    `pulumi:"coreNetworkId"`
	EdgeLocation               pulumi.StringOutput    `pulumi:"edgeLocation"`
	OwnerAccountId             pulumi.StringOutput    `pulumi:"ownerAccountId"`
	ResourceArn                pulumi.StringOutput    `pulumi:"resourceArn"`
	SegmentName                pulumi.StringOutput    `pulumi:"segmentName"`
	State                      pulumi.StringOutput    `pulumi:"state"`
	Tags                       pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll                    pulumi.StringMapOutput `pulumi:"tagsAll"`
	VpnConnectionArn           pulumi.StringOutput    `pulumi:"vpnConnectionArn"`
}

// NewSiteToSiteVpnAttachment registers a new resource with the given unique name, arguments, and options.
func NewSiteToSiteVpnAttachment(ctx *pulumi.Context,
	name string, args *SiteToSiteVpnAttachmentArgs, opts ...pulumi.ResourceOption) (*SiteToSiteVpnAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CoreNetworkId == nil {
		return nil, errors.New("invalid value for required argument 'CoreNetworkId'")
	}
	if args.VpnConnectionArn == nil {
		return nil, errors.New("invalid value for required argument 'VpnConnectionArn'")
	}
	var resource SiteToSiteVpnAttachment
	err := ctx.RegisterResource("aws:networkmanager/siteToSiteVpnAttachment:SiteToSiteVpnAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSiteToSiteVpnAttachment gets an existing SiteToSiteVpnAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSiteToSiteVpnAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SiteToSiteVpnAttachmentState, opts ...pulumi.ResourceOption) (*SiteToSiteVpnAttachment, error) {
	var resource SiteToSiteVpnAttachment
	err := ctx.ReadResource("aws:networkmanager/siteToSiteVpnAttachment:SiteToSiteVpnAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SiteToSiteVpnAttachment resources.
type siteToSiteVpnAttachmentState struct {
	Arn                        *string           `pulumi:"arn"`
	AttachmentPolicyRuleNumber *int              `pulumi:"attachmentPolicyRuleNumber"`
	AttachmentType             *string           `pulumi:"attachmentType"`
	CoreNetworkArn             *string           `pulumi:"coreNetworkArn"`
	CoreNetworkId              *string           `pulumi:"coreNetworkId"`
	EdgeLocation               *string           `pulumi:"edgeLocation"`
	OwnerAccountId             *string           `pulumi:"ownerAccountId"`
	ResourceArn                *string           `pulumi:"resourceArn"`
	SegmentName                *string           `pulumi:"segmentName"`
	State                      *string           `pulumi:"state"`
	Tags                       map[string]string `pulumi:"tags"`
	TagsAll                    map[string]string `pulumi:"tagsAll"`
	VpnConnectionArn           *string           `pulumi:"vpnConnectionArn"`
}

type SiteToSiteVpnAttachmentState struct {
	Arn                        pulumi.StringPtrInput
	AttachmentPolicyRuleNumber pulumi.IntPtrInput
	AttachmentType             pulumi.StringPtrInput
	CoreNetworkArn             pulumi.StringPtrInput
	CoreNetworkId              pulumi.StringPtrInput
	EdgeLocation               pulumi.StringPtrInput
	OwnerAccountId             pulumi.StringPtrInput
	ResourceArn                pulumi.StringPtrInput
	SegmentName                pulumi.StringPtrInput
	State                      pulumi.StringPtrInput
	Tags                       pulumi.StringMapInput
	TagsAll                    pulumi.StringMapInput
	VpnConnectionArn           pulumi.StringPtrInput
}

func (SiteToSiteVpnAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*siteToSiteVpnAttachmentState)(nil)).Elem()
}

type siteToSiteVpnAttachmentArgs struct {
	CoreNetworkId    string            `pulumi:"coreNetworkId"`
	Tags             map[string]string `pulumi:"tags"`
	VpnConnectionArn string            `pulumi:"vpnConnectionArn"`
}

// The set of arguments for constructing a SiteToSiteVpnAttachment resource.
type SiteToSiteVpnAttachmentArgs struct {
	CoreNetworkId    pulumi.StringInput
	Tags             pulumi.StringMapInput
	VpnConnectionArn pulumi.StringInput
}

func (SiteToSiteVpnAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*siteToSiteVpnAttachmentArgs)(nil)).Elem()
}

type SiteToSiteVpnAttachmentInput interface {
	pulumi.Input

	ToSiteToSiteVpnAttachmentOutput() SiteToSiteVpnAttachmentOutput
	ToSiteToSiteVpnAttachmentOutputWithContext(ctx context.Context) SiteToSiteVpnAttachmentOutput
}

func (*SiteToSiteVpnAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**SiteToSiteVpnAttachment)(nil)).Elem()
}

func (i *SiteToSiteVpnAttachment) ToSiteToSiteVpnAttachmentOutput() SiteToSiteVpnAttachmentOutput {
	return i.ToSiteToSiteVpnAttachmentOutputWithContext(context.Background())
}

func (i *SiteToSiteVpnAttachment) ToSiteToSiteVpnAttachmentOutputWithContext(ctx context.Context) SiteToSiteVpnAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SiteToSiteVpnAttachmentOutput)
}

// SiteToSiteVpnAttachmentArrayInput is an input type that accepts SiteToSiteVpnAttachmentArray and SiteToSiteVpnAttachmentArrayOutput values.
// You can construct a concrete instance of `SiteToSiteVpnAttachmentArrayInput` via:
//
//	SiteToSiteVpnAttachmentArray{ SiteToSiteVpnAttachmentArgs{...} }
type SiteToSiteVpnAttachmentArrayInput interface {
	pulumi.Input

	ToSiteToSiteVpnAttachmentArrayOutput() SiteToSiteVpnAttachmentArrayOutput
	ToSiteToSiteVpnAttachmentArrayOutputWithContext(context.Context) SiteToSiteVpnAttachmentArrayOutput
}

type SiteToSiteVpnAttachmentArray []SiteToSiteVpnAttachmentInput

func (SiteToSiteVpnAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SiteToSiteVpnAttachment)(nil)).Elem()
}

func (i SiteToSiteVpnAttachmentArray) ToSiteToSiteVpnAttachmentArrayOutput() SiteToSiteVpnAttachmentArrayOutput {
	return i.ToSiteToSiteVpnAttachmentArrayOutputWithContext(context.Background())
}

func (i SiteToSiteVpnAttachmentArray) ToSiteToSiteVpnAttachmentArrayOutputWithContext(ctx context.Context) SiteToSiteVpnAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SiteToSiteVpnAttachmentArrayOutput)
}

// SiteToSiteVpnAttachmentMapInput is an input type that accepts SiteToSiteVpnAttachmentMap and SiteToSiteVpnAttachmentMapOutput values.
// You can construct a concrete instance of `SiteToSiteVpnAttachmentMapInput` via:
//
//	SiteToSiteVpnAttachmentMap{ "key": SiteToSiteVpnAttachmentArgs{...} }
type SiteToSiteVpnAttachmentMapInput interface {
	pulumi.Input

	ToSiteToSiteVpnAttachmentMapOutput() SiteToSiteVpnAttachmentMapOutput
	ToSiteToSiteVpnAttachmentMapOutputWithContext(context.Context) SiteToSiteVpnAttachmentMapOutput
}

type SiteToSiteVpnAttachmentMap map[string]SiteToSiteVpnAttachmentInput

func (SiteToSiteVpnAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SiteToSiteVpnAttachment)(nil)).Elem()
}

func (i SiteToSiteVpnAttachmentMap) ToSiteToSiteVpnAttachmentMapOutput() SiteToSiteVpnAttachmentMapOutput {
	return i.ToSiteToSiteVpnAttachmentMapOutputWithContext(context.Background())
}

func (i SiteToSiteVpnAttachmentMap) ToSiteToSiteVpnAttachmentMapOutputWithContext(ctx context.Context) SiteToSiteVpnAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SiteToSiteVpnAttachmentMapOutput)
}

type SiteToSiteVpnAttachmentOutput struct{ *pulumi.OutputState }

func (SiteToSiteVpnAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SiteToSiteVpnAttachment)(nil)).Elem()
}

func (o SiteToSiteVpnAttachmentOutput) ToSiteToSiteVpnAttachmentOutput() SiteToSiteVpnAttachmentOutput {
	return o
}

func (o SiteToSiteVpnAttachmentOutput) ToSiteToSiteVpnAttachmentOutputWithContext(ctx context.Context) SiteToSiteVpnAttachmentOutput {
	return o
}

func (o SiteToSiteVpnAttachmentOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *SiteToSiteVpnAttachment) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o SiteToSiteVpnAttachmentOutput) AttachmentPolicyRuleNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *SiteToSiteVpnAttachment) pulumi.IntOutput { return v.AttachmentPolicyRuleNumber }).(pulumi.IntOutput)
}

func (o SiteToSiteVpnAttachmentOutput) AttachmentType() pulumi.StringOutput {
	return o.ApplyT(func(v *SiteToSiteVpnAttachment) pulumi.StringOutput { return v.AttachmentType }).(pulumi.StringOutput)
}

func (o SiteToSiteVpnAttachmentOutput) CoreNetworkArn() pulumi.StringOutput {
	return o.ApplyT(func(v *SiteToSiteVpnAttachment) pulumi.StringOutput { return v.CoreNetworkArn }).(pulumi.StringOutput)
}

func (o SiteToSiteVpnAttachmentOutput) CoreNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *SiteToSiteVpnAttachment) pulumi.StringOutput { return v.CoreNetworkId }).(pulumi.StringOutput)
}

func (o SiteToSiteVpnAttachmentOutput) EdgeLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *SiteToSiteVpnAttachment) pulumi.StringOutput { return v.EdgeLocation }).(pulumi.StringOutput)
}

func (o SiteToSiteVpnAttachmentOutput) OwnerAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *SiteToSiteVpnAttachment) pulumi.StringOutput { return v.OwnerAccountId }).(pulumi.StringOutput)
}

func (o SiteToSiteVpnAttachmentOutput) ResourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v *SiteToSiteVpnAttachment) pulumi.StringOutput { return v.ResourceArn }).(pulumi.StringOutput)
}

func (o SiteToSiteVpnAttachmentOutput) SegmentName() pulumi.StringOutput {
	return o.ApplyT(func(v *SiteToSiteVpnAttachment) pulumi.StringOutput { return v.SegmentName }).(pulumi.StringOutput)
}

func (o SiteToSiteVpnAttachmentOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *SiteToSiteVpnAttachment) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o SiteToSiteVpnAttachmentOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SiteToSiteVpnAttachment) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o SiteToSiteVpnAttachmentOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SiteToSiteVpnAttachment) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o SiteToSiteVpnAttachmentOutput) VpnConnectionArn() pulumi.StringOutput {
	return o.ApplyT(func(v *SiteToSiteVpnAttachment) pulumi.StringOutput { return v.VpnConnectionArn }).(pulumi.StringOutput)
}

type SiteToSiteVpnAttachmentArrayOutput struct{ *pulumi.OutputState }

func (SiteToSiteVpnAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SiteToSiteVpnAttachment)(nil)).Elem()
}

func (o SiteToSiteVpnAttachmentArrayOutput) ToSiteToSiteVpnAttachmentArrayOutput() SiteToSiteVpnAttachmentArrayOutput {
	return o
}

func (o SiteToSiteVpnAttachmentArrayOutput) ToSiteToSiteVpnAttachmentArrayOutputWithContext(ctx context.Context) SiteToSiteVpnAttachmentArrayOutput {
	return o
}

func (o SiteToSiteVpnAttachmentArrayOutput) Index(i pulumi.IntInput) SiteToSiteVpnAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SiteToSiteVpnAttachment {
		return vs[0].([]*SiteToSiteVpnAttachment)[vs[1].(int)]
	}).(SiteToSiteVpnAttachmentOutput)
}

type SiteToSiteVpnAttachmentMapOutput struct{ *pulumi.OutputState }

func (SiteToSiteVpnAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SiteToSiteVpnAttachment)(nil)).Elem()
}

func (o SiteToSiteVpnAttachmentMapOutput) ToSiteToSiteVpnAttachmentMapOutput() SiteToSiteVpnAttachmentMapOutput {
	return o
}

func (o SiteToSiteVpnAttachmentMapOutput) ToSiteToSiteVpnAttachmentMapOutputWithContext(ctx context.Context) SiteToSiteVpnAttachmentMapOutput {
	return o
}

func (o SiteToSiteVpnAttachmentMapOutput) MapIndex(k pulumi.StringInput) SiteToSiteVpnAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SiteToSiteVpnAttachment {
		return vs[0].(map[string]*SiteToSiteVpnAttachment)[vs[1].(string)]
	}).(SiteToSiteVpnAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SiteToSiteVpnAttachmentInput)(nil)).Elem(), &SiteToSiteVpnAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*SiteToSiteVpnAttachmentArrayInput)(nil)).Elem(), SiteToSiteVpnAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SiteToSiteVpnAttachmentMapInput)(nil)).Elem(), SiteToSiteVpnAttachmentMap{})
	pulumi.RegisterOutputType(SiteToSiteVpnAttachmentOutput{})
	pulumi.RegisterOutputType(SiteToSiteVpnAttachmentArrayOutput{})
	pulumi.RegisterOutputType(SiteToSiteVpnAttachmentMapOutput{})
}
