// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkmanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing an AWS Network Manager Direct Connect (DX) Gateway Attachment.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/networkmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := networkmanager.NewDxGatewayAttachment(ctx, "test", &networkmanager.DxGatewayAttachmentArgs{
//				CoreNetworkId:           pulumi.Any(testAwsNetworkmanagerCoreNetworkPolicyAttachment.CoreNetworkId),
//				DirectConnectGatewayArn: pulumi.Sprintf("arn:aws:directconnect::%v:dx-gateway/%v", current.AccountId, testAwsDxGateway.Id),
//				EdgeLocations: pulumi.StringArray{
//					currentAwsRegion.Name,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import Network Manager DX Gateway Attachment using the `id`. For example:
//
// ```sh
// $ pulumi import aws:networkmanager/dxGatewayAttachment:DxGatewayAttachment example attachment-1a2b3c4d5e6f7g
// ```
type DxGatewayAttachment struct {
	pulumi.CustomResourceState

	Arn pulumi.StringOutput `pulumi:"arn"`
	// Policy rule number associated with the attachment.
	AttachmentPolicyRuleNumber pulumi.IntOutput `pulumi:"attachmentPolicyRuleNumber"`
	// Type of attachment.
	AttachmentType pulumi.StringOutput `pulumi:"attachmentType"`
	// ARN of the core network for the attachment.
	CoreNetworkArn pulumi.StringOutput `pulumi:"coreNetworkArn"`
	// ID of the Cloud WAN core network to which the Direct Connect gateway attachment should be attached.
	CoreNetworkId pulumi.StringOutput `pulumi:"coreNetworkId"`
	// ARN of the Direct Connect gateway attachment.
	DirectConnectGatewayArn pulumi.StringOutput `pulumi:"directConnectGatewayArn"`
	// One or more core network edge locations to associate with the Direct Connect gateway attachment.
	//
	// The following arguments are optional:
	EdgeLocations pulumi.StringArrayOutput `pulumi:"edgeLocations"`
	// ID of the attachment account owner.
	OwnerAccountId pulumi.StringOutput `pulumi:"ownerAccountId"`
	// Name of the segment attachment.
	SegmentName pulumi.StringOutput `pulumi:"segmentName"`
	// State of the attachment.
	State pulumi.StringOutput `pulumi:"state"`
	// Key-value tags for the attachment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapOutput               `pulumi:"tagsAll"`
	Timeouts DxGatewayAttachmentTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewDxGatewayAttachment registers a new resource with the given unique name, arguments, and options.
func NewDxGatewayAttachment(ctx *pulumi.Context,
	name string, args *DxGatewayAttachmentArgs, opts ...pulumi.ResourceOption) (*DxGatewayAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CoreNetworkId == nil {
		return nil, errors.New("invalid value for required argument 'CoreNetworkId'")
	}
	if args.DirectConnectGatewayArn == nil {
		return nil, errors.New("invalid value for required argument 'DirectConnectGatewayArn'")
	}
	if args.EdgeLocations == nil {
		return nil, errors.New("invalid value for required argument 'EdgeLocations'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DxGatewayAttachment
	err := ctx.RegisterResource("aws:networkmanager/dxGatewayAttachment:DxGatewayAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDxGatewayAttachment gets an existing DxGatewayAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDxGatewayAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DxGatewayAttachmentState, opts ...pulumi.ResourceOption) (*DxGatewayAttachment, error) {
	var resource DxGatewayAttachment
	err := ctx.ReadResource("aws:networkmanager/dxGatewayAttachment:DxGatewayAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DxGatewayAttachment resources.
type dxGatewayAttachmentState struct {
	Arn *string `pulumi:"arn"`
	// Policy rule number associated with the attachment.
	AttachmentPolicyRuleNumber *int `pulumi:"attachmentPolicyRuleNumber"`
	// Type of attachment.
	AttachmentType *string `pulumi:"attachmentType"`
	// ARN of the core network for the attachment.
	CoreNetworkArn *string `pulumi:"coreNetworkArn"`
	// ID of the Cloud WAN core network to which the Direct Connect gateway attachment should be attached.
	CoreNetworkId *string `pulumi:"coreNetworkId"`
	// ARN of the Direct Connect gateway attachment.
	DirectConnectGatewayArn *string `pulumi:"directConnectGatewayArn"`
	// One or more core network edge locations to associate with the Direct Connect gateway attachment.
	//
	// The following arguments are optional:
	EdgeLocations []string `pulumi:"edgeLocations"`
	// ID of the attachment account owner.
	OwnerAccountId *string `pulumi:"ownerAccountId"`
	// Name of the segment attachment.
	SegmentName *string `pulumi:"segmentName"`
	// State of the attachment.
	State *string `pulumi:"state"`
	// Key-value tags for the attachment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  map[string]string            `pulumi:"tagsAll"`
	Timeouts *DxGatewayAttachmentTimeouts `pulumi:"timeouts"`
}

type DxGatewayAttachmentState struct {
	Arn pulumi.StringPtrInput
	// Policy rule number associated with the attachment.
	AttachmentPolicyRuleNumber pulumi.IntPtrInput
	// Type of attachment.
	AttachmentType pulumi.StringPtrInput
	// ARN of the core network for the attachment.
	CoreNetworkArn pulumi.StringPtrInput
	// ID of the Cloud WAN core network to which the Direct Connect gateway attachment should be attached.
	CoreNetworkId pulumi.StringPtrInput
	// ARN of the Direct Connect gateway attachment.
	DirectConnectGatewayArn pulumi.StringPtrInput
	// One or more core network edge locations to associate with the Direct Connect gateway attachment.
	//
	// The following arguments are optional:
	EdgeLocations pulumi.StringArrayInput
	// ID of the attachment account owner.
	OwnerAccountId pulumi.StringPtrInput
	// Name of the segment attachment.
	SegmentName pulumi.StringPtrInput
	// State of the attachment.
	State pulumi.StringPtrInput
	// Key-value tags for the attachment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapInput
	Timeouts DxGatewayAttachmentTimeoutsPtrInput
}

func (DxGatewayAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*dxGatewayAttachmentState)(nil)).Elem()
}

type dxGatewayAttachmentArgs struct {
	// ID of the Cloud WAN core network to which the Direct Connect gateway attachment should be attached.
	CoreNetworkId string `pulumi:"coreNetworkId"`
	// ARN of the Direct Connect gateway attachment.
	DirectConnectGatewayArn string `pulumi:"directConnectGatewayArn"`
	// One or more core network edge locations to associate with the Direct Connect gateway attachment.
	//
	// The following arguments are optional:
	EdgeLocations []string `pulumi:"edgeLocations"`
	// Key-value tags for the attachment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     map[string]string            `pulumi:"tags"`
	Timeouts *DxGatewayAttachmentTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a DxGatewayAttachment resource.
type DxGatewayAttachmentArgs struct {
	// ID of the Cloud WAN core network to which the Direct Connect gateway attachment should be attached.
	CoreNetworkId pulumi.StringInput
	// ARN of the Direct Connect gateway attachment.
	DirectConnectGatewayArn pulumi.StringInput
	// One or more core network edge locations to associate with the Direct Connect gateway attachment.
	//
	// The following arguments are optional:
	EdgeLocations pulumi.StringArrayInput
	// Key-value tags for the attachment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     pulumi.StringMapInput
	Timeouts DxGatewayAttachmentTimeoutsPtrInput
}

func (DxGatewayAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dxGatewayAttachmentArgs)(nil)).Elem()
}

type DxGatewayAttachmentInput interface {
	pulumi.Input

	ToDxGatewayAttachmentOutput() DxGatewayAttachmentOutput
	ToDxGatewayAttachmentOutputWithContext(ctx context.Context) DxGatewayAttachmentOutput
}

func (*DxGatewayAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**DxGatewayAttachment)(nil)).Elem()
}

func (i *DxGatewayAttachment) ToDxGatewayAttachmentOutput() DxGatewayAttachmentOutput {
	return i.ToDxGatewayAttachmentOutputWithContext(context.Background())
}

func (i *DxGatewayAttachment) ToDxGatewayAttachmentOutputWithContext(ctx context.Context) DxGatewayAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DxGatewayAttachmentOutput)
}

// DxGatewayAttachmentArrayInput is an input type that accepts DxGatewayAttachmentArray and DxGatewayAttachmentArrayOutput values.
// You can construct a concrete instance of `DxGatewayAttachmentArrayInput` via:
//
//	DxGatewayAttachmentArray{ DxGatewayAttachmentArgs{...} }
type DxGatewayAttachmentArrayInput interface {
	pulumi.Input

	ToDxGatewayAttachmentArrayOutput() DxGatewayAttachmentArrayOutput
	ToDxGatewayAttachmentArrayOutputWithContext(context.Context) DxGatewayAttachmentArrayOutput
}

type DxGatewayAttachmentArray []DxGatewayAttachmentInput

func (DxGatewayAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DxGatewayAttachment)(nil)).Elem()
}

func (i DxGatewayAttachmentArray) ToDxGatewayAttachmentArrayOutput() DxGatewayAttachmentArrayOutput {
	return i.ToDxGatewayAttachmentArrayOutputWithContext(context.Background())
}

func (i DxGatewayAttachmentArray) ToDxGatewayAttachmentArrayOutputWithContext(ctx context.Context) DxGatewayAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DxGatewayAttachmentArrayOutput)
}

// DxGatewayAttachmentMapInput is an input type that accepts DxGatewayAttachmentMap and DxGatewayAttachmentMapOutput values.
// You can construct a concrete instance of `DxGatewayAttachmentMapInput` via:
//
//	DxGatewayAttachmentMap{ "key": DxGatewayAttachmentArgs{...} }
type DxGatewayAttachmentMapInput interface {
	pulumi.Input

	ToDxGatewayAttachmentMapOutput() DxGatewayAttachmentMapOutput
	ToDxGatewayAttachmentMapOutputWithContext(context.Context) DxGatewayAttachmentMapOutput
}

type DxGatewayAttachmentMap map[string]DxGatewayAttachmentInput

func (DxGatewayAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DxGatewayAttachment)(nil)).Elem()
}

func (i DxGatewayAttachmentMap) ToDxGatewayAttachmentMapOutput() DxGatewayAttachmentMapOutput {
	return i.ToDxGatewayAttachmentMapOutputWithContext(context.Background())
}

func (i DxGatewayAttachmentMap) ToDxGatewayAttachmentMapOutputWithContext(ctx context.Context) DxGatewayAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DxGatewayAttachmentMapOutput)
}

type DxGatewayAttachmentOutput struct{ *pulumi.OutputState }

func (DxGatewayAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DxGatewayAttachment)(nil)).Elem()
}

func (o DxGatewayAttachmentOutput) ToDxGatewayAttachmentOutput() DxGatewayAttachmentOutput {
	return o
}

func (o DxGatewayAttachmentOutput) ToDxGatewayAttachmentOutputWithContext(ctx context.Context) DxGatewayAttachmentOutput {
	return o
}

func (o DxGatewayAttachmentOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *DxGatewayAttachment) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Policy rule number associated with the attachment.
func (o DxGatewayAttachmentOutput) AttachmentPolicyRuleNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *DxGatewayAttachment) pulumi.IntOutput { return v.AttachmentPolicyRuleNumber }).(pulumi.IntOutput)
}

// Type of attachment.
func (o DxGatewayAttachmentOutput) AttachmentType() pulumi.StringOutput {
	return o.ApplyT(func(v *DxGatewayAttachment) pulumi.StringOutput { return v.AttachmentType }).(pulumi.StringOutput)
}

// ARN of the core network for the attachment.
func (o DxGatewayAttachmentOutput) CoreNetworkArn() pulumi.StringOutput {
	return o.ApplyT(func(v *DxGatewayAttachment) pulumi.StringOutput { return v.CoreNetworkArn }).(pulumi.StringOutput)
}

// ID of the Cloud WAN core network to which the Direct Connect gateway attachment should be attached.
func (o DxGatewayAttachmentOutput) CoreNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *DxGatewayAttachment) pulumi.StringOutput { return v.CoreNetworkId }).(pulumi.StringOutput)
}

// ARN of the Direct Connect gateway attachment.
func (o DxGatewayAttachmentOutput) DirectConnectGatewayArn() pulumi.StringOutput {
	return o.ApplyT(func(v *DxGatewayAttachment) pulumi.StringOutput { return v.DirectConnectGatewayArn }).(pulumi.StringOutput)
}

// One or more core network edge locations to associate with the Direct Connect gateway attachment.
//
// The following arguments are optional:
func (o DxGatewayAttachmentOutput) EdgeLocations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DxGatewayAttachment) pulumi.StringArrayOutput { return v.EdgeLocations }).(pulumi.StringArrayOutput)
}

// ID of the attachment account owner.
func (o DxGatewayAttachmentOutput) OwnerAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *DxGatewayAttachment) pulumi.StringOutput { return v.OwnerAccountId }).(pulumi.StringOutput)
}

// Name of the segment attachment.
func (o DxGatewayAttachmentOutput) SegmentName() pulumi.StringOutput {
	return o.ApplyT(func(v *DxGatewayAttachment) pulumi.StringOutput { return v.SegmentName }).(pulumi.StringOutput)
}

// State of the attachment.
func (o DxGatewayAttachmentOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *DxGatewayAttachment) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Key-value tags for the attachment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o DxGatewayAttachmentOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DxGatewayAttachment) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o DxGatewayAttachmentOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DxGatewayAttachment) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o DxGatewayAttachmentOutput) Timeouts() DxGatewayAttachmentTimeoutsPtrOutput {
	return o.ApplyT(func(v *DxGatewayAttachment) DxGatewayAttachmentTimeoutsPtrOutput { return v.Timeouts }).(DxGatewayAttachmentTimeoutsPtrOutput)
}

type DxGatewayAttachmentArrayOutput struct{ *pulumi.OutputState }

func (DxGatewayAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DxGatewayAttachment)(nil)).Elem()
}

func (o DxGatewayAttachmentArrayOutput) ToDxGatewayAttachmentArrayOutput() DxGatewayAttachmentArrayOutput {
	return o
}

func (o DxGatewayAttachmentArrayOutput) ToDxGatewayAttachmentArrayOutputWithContext(ctx context.Context) DxGatewayAttachmentArrayOutput {
	return o
}

func (o DxGatewayAttachmentArrayOutput) Index(i pulumi.IntInput) DxGatewayAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DxGatewayAttachment {
		return vs[0].([]*DxGatewayAttachment)[vs[1].(int)]
	}).(DxGatewayAttachmentOutput)
}

type DxGatewayAttachmentMapOutput struct{ *pulumi.OutputState }

func (DxGatewayAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DxGatewayAttachment)(nil)).Elem()
}

func (o DxGatewayAttachmentMapOutput) ToDxGatewayAttachmentMapOutput() DxGatewayAttachmentMapOutput {
	return o
}

func (o DxGatewayAttachmentMapOutput) ToDxGatewayAttachmentMapOutputWithContext(ctx context.Context) DxGatewayAttachmentMapOutput {
	return o
}

func (o DxGatewayAttachmentMapOutput) MapIndex(k pulumi.StringInput) DxGatewayAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DxGatewayAttachment {
		return vs[0].(map[string]*DxGatewayAttachment)[vs[1].(string)]
	}).(DxGatewayAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DxGatewayAttachmentInput)(nil)).Elem(), &DxGatewayAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*DxGatewayAttachmentArrayInput)(nil)).Elem(), DxGatewayAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DxGatewayAttachmentMapInput)(nil)).Elem(), DxGatewayAttachmentMap{})
	pulumi.RegisterOutputType(DxGatewayAttachmentOutput{})
	pulumi.RegisterOutputType(DxGatewayAttachmentArrayOutput{})
	pulumi.RegisterOutputType(DxGatewayAttachmentMapOutput{})
}
