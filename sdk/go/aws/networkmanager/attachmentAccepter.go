// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkmanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an AWS Network Manager Attachment Accepter.
//
// Use this resource to accept cross-account attachments in AWS Network Manager. When an attachment is created in one account and needs to be accepted by another account that owns the core network, this resource handles the acceptance process.
//
// ## Example Usage
//
// ### VPC Attachment
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/networkmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := networkmanager.NewAttachmentAccepter(ctx, "example", &networkmanager.AttachmentAccepterArgs{
//				AttachmentId:   pulumi.Any(exampleAwsNetworkmanagerVpcAttachment.Id),
//				AttachmentType: pulumi.Any(exampleAwsNetworkmanagerVpcAttachment.AttachmentType),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Site-to-Site VPN Attachment
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/networkmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := networkmanager.NewAttachmentAccepter(ctx, "example", &networkmanager.AttachmentAccepterArgs{
//				AttachmentId:   pulumi.Any(exampleAwsNetworkmanagerSiteToSiteVpnAttachment.Id),
//				AttachmentType: pulumi.Any(exampleAwsNetworkmanagerSiteToSiteVpnAttachment.AttachmentType),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Connect Attachment
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/networkmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := networkmanager.NewAttachmentAccepter(ctx, "example", &networkmanager.AttachmentAccepterArgs{
//				AttachmentId:   pulumi.Any(exampleAwsNetworkmanagerConnectAttachment.Id),
//				AttachmentType: pulumi.Any(exampleAwsNetworkmanagerConnectAttachment.AttachmentType),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Transit Gateway Route Table Attachment
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/networkmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := networkmanager.NewAttachmentAccepter(ctx, "example", &networkmanager.AttachmentAccepterArgs{
//				AttachmentId:   pulumi.Any(exampleAwsNetworkmanagerTransitGatewayRouteTableAttachment.Id),
//				AttachmentType: pulumi.Any(exampleAwsNetworkmanagerTransitGatewayRouteTableAttachment.AttachmentType),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Direct Connect Gateway Attachment
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/networkmanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := networkmanager.NewAttachmentAccepter(ctx, "example", &networkmanager.AttachmentAccepterArgs{
//				AttachmentId:   pulumi.Any(exampleAwsNetworkmanagerDxGatewayAttachment.Id),
//				AttachmentType: pulumi.Any(exampleAwsNetworkmanagerDxGatewayAttachment.AttachmentType),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type AttachmentAccepter struct {
	pulumi.CustomResourceState

	// ID of the attachment.
	AttachmentId pulumi.StringOutput `pulumi:"attachmentId"`
	// Policy rule number associated with the attachment.
	AttachmentPolicyRuleNumber pulumi.IntOutput `pulumi:"attachmentPolicyRuleNumber"`
	// Type of attachment. Valid values: `CONNECT`, `DIRECT_CONNECT_GATEWAY`, `SITE_TO_SITE_VPN`, `TRANSIT_GATEWAY_ROUTE_TABLE`, `VPC`.
	AttachmentType pulumi.StringOutput `pulumi:"attachmentType"`
	// ARN of the core network.
	CoreNetworkArn pulumi.StringOutput `pulumi:"coreNetworkArn"`
	// ID of the core network.
	CoreNetworkId pulumi.StringOutput `pulumi:"coreNetworkId"`
	// Region where the edge is located. This is returned for all attachment types except Direct Connect gateway attachments, which instead return `edgeLocations`.
	EdgeLocation pulumi.StringOutput `pulumi:"edgeLocation"`
	// Edge locations that the Direct Connect gateway is associated with. This is returned only for Direct Connect gateway attachments. All other attachment types return `edgeLocation`.
	EdgeLocations pulumi.StringArrayOutput `pulumi:"edgeLocations"`
	// ID of the attachment account owner.
	OwnerAccountId pulumi.StringOutput `pulumi:"ownerAccountId"`
	// Attachment resource ARN.
	ResourceArn pulumi.StringOutput `pulumi:"resourceArn"`
	// Name of the segment attachment.
	SegmentName pulumi.StringOutput `pulumi:"segmentName"`
	// State of the attachment.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewAttachmentAccepter registers a new resource with the given unique name, arguments, and options.
func NewAttachmentAccepter(ctx *pulumi.Context,
	name string, args *AttachmentAccepterArgs, opts ...pulumi.ResourceOption) (*AttachmentAccepter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AttachmentId == nil {
		return nil, errors.New("invalid value for required argument 'AttachmentId'")
	}
	if args.AttachmentType == nil {
		return nil, errors.New("invalid value for required argument 'AttachmentType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AttachmentAccepter
	err := ctx.RegisterResource("aws:networkmanager/attachmentAccepter:AttachmentAccepter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAttachmentAccepter gets an existing AttachmentAccepter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAttachmentAccepter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AttachmentAccepterState, opts ...pulumi.ResourceOption) (*AttachmentAccepter, error) {
	var resource AttachmentAccepter
	err := ctx.ReadResource("aws:networkmanager/attachmentAccepter:AttachmentAccepter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AttachmentAccepter resources.
type attachmentAccepterState struct {
	// ID of the attachment.
	AttachmentId *string `pulumi:"attachmentId"`
	// Policy rule number associated with the attachment.
	AttachmentPolicyRuleNumber *int `pulumi:"attachmentPolicyRuleNumber"`
	// Type of attachment. Valid values: `CONNECT`, `DIRECT_CONNECT_GATEWAY`, `SITE_TO_SITE_VPN`, `TRANSIT_GATEWAY_ROUTE_TABLE`, `VPC`.
	AttachmentType *string `pulumi:"attachmentType"`
	// ARN of the core network.
	CoreNetworkArn *string `pulumi:"coreNetworkArn"`
	// ID of the core network.
	CoreNetworkId *string `pulumi:"coreNetworkId"`
	// Region where the edge is located. This is returned for all attachment types except Direct Connect gateway attachments, which instead return `edgeLocations`.
	EdgeLocation *string `pulumi:"edgeLocation"`
	// Edge locations that the Direct Connect gateway is associated with. This is returned only for Direct Connect gateway attachments. All other attachment types return `edgeLocation`.
	EdgeLocations []string `pulumi:"edgeLocations"`
	// ID of the attachment account owner.
	OwnerAccountId *string `pulumi:"ownerAccountId"`
	// Attachment resource ARN.
	ResourceArn *string `pulumi:"resourceArn"`
	// Name of the segment attachment.
	SegmentName *string `pulumi:"segmentName"`
	// State of the attachment.
	State *string `pulumi:"state"`
}

type AttachmentAccepterState struct {
	// ID of the attachment.
	AttachmentId pulumi.StringPtrInput
	// Policy rule number associated with the attachment.
	AttachmentPolicyRuleNumber pulumi.IntPtrInput
	// Type of attachment. Valid values: `CONNECT`, `DIRECT_CONNECT_GATEWAY`, `SITE_TO_SITE_VPN`, `TRANSIT_GATEWAY_ROUTE_TABLE`, `VPC`.
	AttachmentType pulumi.StringPtrInput
	// ARN of the core network.
	CoreNetworkArn pulumi.StringPtrInput
	// ID of the core network.
	CoreNetworkId pulumi.StringPtrInput
	// Region where the edge is located. This is returned for all attachment types except Direct Connect gateway attachments, which instead return `edgeLocations`.
	EdgeLocation pulumi.StringPtrInput
	// Edge locations that the Direct Connect gateway is associated with. This is returned only for Direct Connect gateway attachments. All other attachment types return `edgeLocation`.
	EdgeLocations pulumi.StringArrayInput
	// ID of the attachment account owner.
	OwnerAccountId pulumi.StringPtrInput
	// Attachment resource ARN.
	ResourceArn pulumi.StringPtrInput
	// Name of the segment attachment.
	SegmentName pulumi.StringPtrInput
	// State of the attachment.
	State pulumi.StringPtrInput
}

func (AttachmentAccepterState) ElementType() reflect.Type {
	return reflect.TypeOf((*attachmentAccepterState)(nil)).Elem()
}

type attachmentAccepterArgs struct {
	// ID of the attachment.
	AttachmentId string `pulumi:"attachmentId"`
	// Type of attachment. Valid values: `CONNECT`, `DIRECT_CONNECT_GATEWAY`, `SITE_TO_SITE_VPN`, `TRANSIT_GATEWAY_ROUTE_TABLE`, `VPC`.
	AttachmentType string `pulumi:"attachmentType"`
}

// The set of arguments for constructing a AttachmentAccepter resource.
type AttachmentAccepterArgs struct {
	// ID of the attachment.
	AttachmentId pulumi.StringInput
	// Type of attachment. Valid values: `CONNECT`, `DIRECT_CONNECT_GATEWAY`, `SITE_TO_SITE_VPN`, `TRANSIT_GATEWAY_ROUTE_TABLE`, `VPC`.
	AttachmentType pulumi.StringInput
}

func (AttachmentAccepterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*attachmentAccepterArgs)(nil)).Elem()
}

type AttachmentAccepterInput interface {
	pulumi.Input

	ToAttachmentAccepterOutput() AttachmentAccepterOutput
	ToAttachmentAccepterOutputWithContext(ctx context.Context) AttachmentAccepterOutput
}

func (*AttachmentAccepter) ElementType() reflect.Type {
	return reflect.TypeOf((**AttachmentAccepter)(nil)).Elem()
}

func (i *AttachmentAccepter) ToAttachmentAccepterOutput() AttachmentAccepterOutput {
	return i.ToAttachmentAccepterOutputWithContext(context.Background())
}

func (i *AttachmentAccepter) ToAttachmentAccepterOutputWithContext(ctx context.Context) AttachmentAccepterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachmentAccepterOutput)
}

// AttachmentAccepterArrayInput is an input type that accepts AttachmentAccepterArray and AttachmentAccepterArrayOutput values.
// You can construct a concrete instance of `AttachmentAccepterArrayInput` via:
//
//	AttachmentAccepterArray{ AttachmentAccepterArgs{...} }
type AttachmentAccepterArrayInput interface {
	pulumi.Input

	ToAttachmentAccepterArrayOutput() AttachmentAccepterArrayOutput
	ToAttachmentAccepterArrayOutputWithContext(context.Context) AttachmentAccepterArrayOutput
}

type AttachmentAccepterArray []AttachmentAccepterInput

func (AttachmentAccepterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AttachmentAccepter)(nil)).Elem()
}

func (i AttachmentAccepterArray) ToAttachmentAccepterArrayOutput() AttachmentAccepterArrayOutput {
	return i.ToAttachmentAccepterArrayOutputWithContext(context.Background())
}

func (i AttachmentAccepterArray) ToAttachmentAccepterArrayOutputWithContext(ctx context.Context) AttachmentAccepterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachmentAccepterArrayOutput)
}

// AttachmentAccepterMapInput is an input type that accepts AttachmentAccepterMap and AttachmentAccepterMapOutput values.
// You can construct a concrete instance of `AttachmentAccepterMapInput` via:
//
//	AttachmentAccepterMap{ "key": AttachmentAccepterArgs{...} }
type AttachmentAccepterMapInput interface {
	pulumi.Input

	ToAttachmentAccepterMapOutput() AttachmentAccepterMapOutput
	ToAttachmentAccepterMapOutputWithContext(context.Context) AttachmentAccepterMapOutput
}

type AttachmentAccepterMap map[string]AttachmentAccepterInput

func (AttachmentAccepterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AttachmentAccepter)(nil)).Elem()
}

func (i AttachmentAccepterMap) ToAttachmentAccepterMapOutput() AttachmentAccepterMapOutput {
	return i.ToAttachmentAccepterMapOutputWithContext(context.Background())
}

func (i AttachmentAccepterMap) ToAttachmentAccepterMapOutputWithContext(ctx context.Context) AttachmentAccepterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachmentAccepterMapOutput)
}

type AttachmentAccepterOutput struct{ *pulumi.OutputState }

func (AttachmentAccepterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AttachmentAccepter)(nil)).Elem()
}

func (o AttachmentAccepterOutput) ToAttachmentAccepterOutput() AttachmentAccepterOutput {
	return o
}

func (o AttachmentAccepterOutput) ToAttachmentAccepterOutputWithContext(ctx context.Context) AttachmentAccepterOutput {
	return o
}

// ID of the attachment.
func (o AttachmentAccepterOutput) AttachmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *AttachmentAccepter) pulumi.StringOutput { return v.AttachmentId }).(pulumi.StringOutput)
}

// Policy rule number associated with the attachment.
func (o AttachmentAccepterOutput) AttachmentPolicyRuleNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *AttachmentAccepter) pulumi.IntOutput { return v.AttachmentPolicyRuleNumber }).(pulumi.IntOutput)
}

// Type of attachment. Valid values: `CONNECT`, `DIRECT_CONNECT_GATEWAY`, `SITE_TO_SITE_VPN`, `TRANSIT_GATEWAY_ROUTE_TABLE`, `VPC`.
func (o AttachmentAccepterOutput) AttachmentType() pulumi.StringOutput {
	return o.ApplyT(func(v *AttachmentAccepter) pulumi.StringOutput { return v.AttachmentType }).(pulumi.StringOutput)
}

// ARN of the core network.
func (o AttachmentAccepterOutput) CoreNetworkArn() pulumi.StringOutput {
	return o.ApplyT(func(v *AttachmentAccepter) pulumi.StringOutput { return v.CoreNetworkArn }).(pulumi.StringOutput)
}

// ID of the core network.
func (o AttachmentAccepterOutput) CoreNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *AttachmentAccepter) pulumi.StringOutput { return v.CoreNetworkId }).(pulumi.StringOutput)
}

// Region where the edge is located. This is returned for all attachment types except Direct Connect gateway attachments, which instead return `edgeLocations`.
func (o AttachmentAccepterOutput) EdgeLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *AttachmentAccepter) pulumi.StringOutput { return v.EdgeLocation }).(pulumi.StringOutput)
}

// Edge locations that the Direct Connect gateway is associated with. This is returned only for Direct Connect gateway attachments. All other attachment types return `edgeLocation`.
func (o AttachmentAccepterOutput) EdgeLocations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AttachmentAccepter) pulumi.StringArrayOutput { return v.EdgeLocations }).(pulumi.StringArrayOutput)
}

// ID of the attachment account owner.
func (o AttachmentAccepterOutput) OwnerAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *AttachmentAccepter) pulumi.StringOutput { return v.OwnerAccountId }).(pulumi.StringOutput)
}

// Attachment resource ARN.
func (o AttachmentAccepterOutput) ResourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v *AttachmentAccepter) pulumi.StringOutput { return v.ResourceArn }).(pulumi.StringOutput)
}

// Name of the segment attachment.
func (o AttachmentAccepterOutput) SegmentName() pulumi.StringOutput {
	return o.ApplyT(func(v *AttachmentAccepter) pulumi.StringOutput { return v.SegmentName }).(pulumi.StringOutput)
}

// State of the attachment.
func (o AttachmentAccepterOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *AttachmentAccepter) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

type AttachmentAccepterArrayOutput struct{ *pulumi.OutputState }

func (AttachmentAccepterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AttachmentAccepter)(nil)).Elem()
}

func (o AttachmentAccepterArrayOutput) ToAttachmentAccepterArrayOutput() AttachmentAccepterArrayOutput {
	return o
}

func (o AttachmentAccepterArrayOutput) ToAttachmentAccepterArrayOutputWithContext(ctx context.Context) AttachmentAccepterArrayOutput {
	return o
}

func (o AttachmentAccepterArrayOutput) Index(i pulumi.IntInput) AttachmentAccepterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AttachmentAccepter {
		return vs[0].([]*AttachmentAccepter)[vs[1].(int)]
	}).(AttachmentAccepterOutput)
}

type AttachmentAccepterMapOutput struct{ *pulumi.OutputState }

func (AttachmentAccepterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AttachmentAccepter)(nil)).Elem()
}

func (o AttachmentAccepterMapOutput) ToAttachmentAccepterMapOutput() AttachmentAccepterMapOutput {
	return o
}

func (o AttachmentAccepterMapOutput) ToAttachmentAccepterMapOutputWithContext(ctx context.Context) AttachmentAccepterMapOutput {
	return o
}

func (o AttachmentAccepterMapOutput) MapIndex(k pulumi.StringInput) AttachmentAccepterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AttachmentAccepter {
		return vs[0].(map[string]*AttachmentAccepter)[vs[1].(string)]
	}).(AttachmentAccepterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AttachmentAccepterInput)(nil)).Elem(), &AttachmentAccepter{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttachmentAccepterArrayInput)(nil)).Elem(), AttachmentAccepterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttachmentAccepterMapInput)(nil)).Elem(), AttachmentAccepterMap{})
	pulumi.RegisterOutputType(AttachmentAccepterOutput{})
	pulumi.RegisterOutputType(AttachmentAccepterArrayOutput{})
	pulumi.RegisterOutputType(AttachmentAccepterMapOutput{})
}
