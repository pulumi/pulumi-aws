// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkmanager

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CoreNetwork struct {
	pulumi.CustomResourceState

	Arn             pulumi.StringOutput           `pulumi:"arn"`
	CreatedAt       pulumi.StringOutput           `pulumi:"createdAt"`
	Description     pulumi.StringPtrOutput        `pulumi:"description"`
	Edges           CoreNetworkEdgeArrayOutput    `pulumi:"edges"`
	GlobalNetworkId pulumi.StringOutput           `pulumi:"globalNetworkId"`
	PolicyDocument  pulumi.StringPtrOutput        `pulumi:"policyDocument"`
	Segments        CoreNetworkSegmentArrayOutput `pulumi:"segments"`
	State           pulumi.StringOutput           `pulumi:"state"`
	Tags            pulumi.StringMapOutput        `pulumi:"tags"`
	TagsAll         pulumi.StringMapOutput        `pulumi:"tagsAll"`
}

// NewCoreNetwork registers a new resource with the given unique name, arguments, and options.
func NewCoreNetwork(ctx *pulumi.Context,
	name string, args *CoreNetworkArgs, opts ...pulumi.ResourceOption) (*CoreNetwork, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GlobalNetworkId == nil {
		return nil, errors.New("invalid value for required argument 'GlobalNetworkId'")
	}
	var resource CoreNetwork
	err := ctx.RegisterResource("aws:networkmanager/coreNetwork:CoreNetwork", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCoreNetwork gets an existing CoreNetwork resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCoreNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CoreNetworkState, opts ...pulumi.ResourceOption) (*CoreNetwork, error) {
	var resource CoreNetwork
	err := ctx.ReadResource("aws:networkmanager/coreNetwork:CoreNetwork", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CoreNetwork resources.
type coreNetworkState struct {
	Arn             *string              `pulumi:"arn"`
	CreatedAt       *string              `pulumi:"createdAt"`
	Description     *string              `pulumi:"description"`
	Edges           []CoreNetworkEdge    `pulumi:"edges"`
	GlobalNetworkId *string              `pulumi:"globalNetworkId"`
	PolicyDocument  *string              `pulumi:"policyDocument"`
	Segments        []CoreNetworkSegment `pulumi:"segments"`
	State           *string              `pulumi:"state"`
	Tags            map[string]string    `pulumi:"tags"`
	TagsAll         map[string]string    `pulumi:"tagsAll"`
}

type CoreNetworkState struct {
	Arn             pulumi.StringPtrInput
	CreatedAt       pulumi.StringPtrInput
	Description     pulumi.StringPtrInput
	Edges           CoreNetworkEdgeArrayInput
	GlobalNetworkId pulumi.StringPtrInput
	PolicyDocument  pulumi.StringPtrInput
	Segments        CoreNetworkSegmentArrayInput
	State           pulumi.StringPtrInput
	Tags            pulumi.StringMapInput
	TagsAll         pulumi.StringMapInput
}

func (CoreNetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*coreNetworkState)(nil)).Elem()
}

type coreNetworkArgs struct {
	Description     *string           `pulumi:"description"`
	GlobalNetworkId string            `pulumi:"globalNetworkId"`
	PolicyDocument  *string           `pulumi:"policyDocument"`
	Tags            map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a CoreNetwork resource.
type CoreNetworkArgs struct {
	Description     pulumi.StringPtrInput
	GlobalNetworkId pulumi.StringInput
	PolicyDocument  pulumi.StringPtrInput
	Tags            pulumi.StringMapInput
}

func (CoreNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*coreNetworkArgs)(nil)).Elem()
}

type CoreNetworkInput interface {
	pulumi.Input

	ToCoreNetworkOutput() CoreNetworkOutput
	ToCoreNetworkOutputWithContext(ctx context.Context) CoreNetworkOutput
}

func (*CoreNetwork) ElementType() reflect.Type {
	return reflect.TypeOf((**CoreNetwork)(nil)).Elem()
}

func (i *CoreNetwork) ToCoreNetworkOutput() CoreNetworkOutput {
	return i.ToCoreNetworkOutputWithContext(context.Background())
}

func (i *CoreNetwork) ToCoreNetworkOutputWithContext(ctx context.Context) CoreNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreNetworkOutput)
}

// CoreNetworkArrayInput is an input type that accepts CoreNetworkArray and CoreNetworkArrayOutput values.
// You can construct a concrete instance of `CoreNetworkArrayInput` via:
//
//	CoreNetworkArray{ CoreNetworkArgs{...} }
type CoreNetworkArrayInput interface {
	pulumi.Input

	ToCoreNetworkArrayOutput() CoreNetworkArrayOutput
	ToCoreNetworkArrayOutputWithContext(context.Context) CoreNetworkArrayOutput
}

type CoreNetworkArray []CoreNetworkInput

func (CoreNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CoreNetwork)(nil)).Elem()
}

func (i CoreNetworkArray) ToCoreNetworkArrayOutput() CoreNetworkArrayOutput {
	return i.ToCoreNetworkArrayOutputWithContext(context.Background())
}

func (i CoreNetworkArray) ToCoreNetworkArrayOutputWithContext(ctx context.Context) CoreNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreNetworkArrayOutput)
}

// CoreNetworkMapInput is an input type that accepts CoreNetworkMap and CoreNetworkMapOutput values.
// You can construct a concrete instance of `CoreNetworkMapInput` via:
//
//	CoreNetworkMap{ "key": CoreNetworkArgs{...} }
type CoreNetworkMapInput interface {
	pulumi.Input

	ToCoreNetworkMapOutput() CoreNetworkMapOutput
	ToCoreNetworkMapOutputWithContext(context.Context) CoreNetworkMapOutput
}

type CoreNetworkMap map[string]CoreNetworkInput

func (CoreNetworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CoreNetwork)(nil)).Elem()
}

func (i CoreNetworkMap) ToCoreNetworkMapOutput() CoreNetworkMapOutput {
	return i.ToCoreNetworkMapOutputWithContext(context.Background())
}

func (i CoreNetworkMap) ToCoreNetworkMapOutputWithContext(ctx context.Context) CoreNetworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreNetworkMapOutput)
}

type CoreNetworkOutput struct{ *pulumi.OutputState }

func (CoreNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CoreNetwork)(nil)).Elem()
}

func (o CoreNetworkOutput) ToCoreNetworkOutput() CoreNetworkOutput {
	return o
}

func (o CoreNetworkOutput) ToCoreNetworkOutputWithContext(ctx context.Context) CoreNetworkOutput {
	return o
}

func (o CoreNetworkOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *CoreNetwork) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o CoreNetworkOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *CoreNetwork) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o CoreNetworkOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CoreNetwork) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o CoreNetworkOutput) Edges() CoreNetworkEdgeArrayOutput {
	return o.ApplyT(func(v *CoreNetwork) CoreNetworkEdgeArrayOutput { return v.Edges }).(CoreNetworkEdgeArrayOutput)
}

func (o CoreNetworkOutput) GlobalNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *CoreNetwork) pulumi.StringOutput { return v.GlobalNetworkId }).(pulumi.StringOutput)
}

func (o CoreNetworkOutput) PolicyDocument() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CoreNetwork) pulumi.StringPtrOutput { return v.PolicyDocument }).(pulumi.StringPtrOutput)
}

func (o CoreNetworkOutput) Segments() CoreNetworkSegmentArrayOutput {
	return o.ApplyT(func(v *CoreNetwork) CoreNetworkSegmentArrayOutput { return v.Segments }).(CoreNetworkSegmentArrayOutput)
}

func (o CoreNetworkOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *CoreNetwork) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o CoreNetworkOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CoreNetwork) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o CoreNetworkOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CoreNetwork) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type CoreNetworkArrayOutput struct{ *pulumi.OutputState }

func (CoreNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CoreNetwork)(nil)).Elem()
}

func (o CoreNetworkArrayOutput) ToCoreNetworkArrayOutput() CoreNetworkArrayOutput {
	return o
}

func (o CoreNetworkArrayOutput) ToCoreNetworkArrayOutputWithContext(ctx context.Context) CoreNetworkArrayOutput {
	return o
}

func (o CoreNetworkArrayOutput) Index(i pulumi.IntInput) CoreNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CoreNetwork {
		return vs[0].([]*CoreNetwork)[vs[1].(int)]
	}).(CoreNetworkOutput)
}

type CoreNetworkMapOutput struct{ *pulumi.OutputState }

func (CoreNetworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CoreNetwork)(nil)).Elem()
}

func (o CoreNetworkMapOutput) ToCoreNetworkMapOutput() CoreNetworkMapOutput {
	return o
}

func (o CoreNetworkMapOutput) ToCoreNetworkMapOutputWithContext(ctx context.Context) CoreNetworkMapOutput {
	return o
}

func (o CoreNetworkMapOutput) MapIndex(k pulumi.StringInput) CoreNetworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CoreNetwork {
		return vs[0].(map[string]*CoreNetwork)[vs[1].(string)]
	}).(CoreNetworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CoreNetworkInput)(nil)).Elem(), &CoreNetwork{})
	pulumi.RegisterInputType(reflect.TypeOf((*CoreNetworkArrayInput)(nil)).Elem(), CoreNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CoreNetworkMapInput)(nil)).Elem(), CoreNetworkMap{})
	pulumi.RegisterOutputType(CoreNetworkOutput{})
	pulumi.RegisterOutputType(CoreNetworkArrayOutput{})
	pulumi.RegisterOutputType(CoreNetworkMapOutput{})
}
