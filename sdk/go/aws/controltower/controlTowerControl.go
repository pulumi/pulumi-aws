// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package controltower

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ControlTowerControl struct {
	pulumi.CustomResourceState

	ControlIdentifier pulumi.StringOutput `pulumi:"controlIdentifier"`
	TargetIdentifier  pulumi.StringOutput `pulumi:"targetIdentifier"`
}

// NewControlTowerControl registers a new resource with the given unique name, arguments, and options.
func NewControlTowerControl(ctx *pulumi.Context,
	name string, args *ControlTowerControlArgs, opts ...pulumi.ResourceOption) (*ControlTowerControl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ControlIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'ControlIdentifier'")
	}
	if args.TargetIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'TargetIdentifier'")
	}
	var resource ControlTowerControl
	err := ctx.RegisterResource("aws:controltower/controlTowerControl:ControlTowerControl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetControlTowerControl gets an existing ControlTowerControl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetControlTowerControl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ControlTowerControlState, opts ...pulumi.ResourceOption) (*ControlTowerControl, error) {
	var resource ControlTowerControl
	err := ctx.ReadResource("aws:controltower/controlTowerControl:ControlTowerControl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ControlTowerControl resources.
type controlTowerControlState struct {
	ControlIdentifier *string `pulumi:"controlIdentifier"`
	TargetIdentifier  *string `pulumi:"targetIdentifier"`
}

type ControlTowerControlState struct {
	ControlIdentifier pulumi.StringPtrInput
	TargetIdentifier  pulumi.StringPtrInput
}

func (ControlTowerControlState) ElementType() reflect.Type {
	return reflect.TypeOf((*controlTowerControlState)(nil)).Elem()
}

type controlTowerControlArgs struct {
	ControlIdentifier string `pulumi:"controlIdentifier"`
	TargetIdentifier  string `pulumi:"targetIdentifier"`
}

// The set of arguments for constructing a ControlTowerControl resource.
type ControlTowerControlArgs struct {
	ControlIdentifier pulumi.StringInput
	TargetIdentifier  pulumi.StringInput
}

func (ControlTowerControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*controlTowerControlArgs)(nil)).Elem()
}

type ControlTowerControlInput interface {
	pulumi.Input

	ToControlTowerControlOutput() ControlTowerControlOutput
	ToControlTowerControlOutputWithContext(ctx context.Context) ControlTowerControlOutput
}

func (*ControlTowerControl) ElementType() reflect.Type {
	return reflect.TypeOf((**ControlTowerControl)(nil)).Elem()
}

func (i *ControlTowerControl) ToControlTowerControlOutput() ControlTowerControlOutput {
	return i.ToControlTowerControlOutputWithContext(context.Background())
}

func (i *ControlTowerControl) ToControlTowerControlOutputWithContext(ctx context.Context) ControlTowerControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlTowerControlOutput)
}

// ControlTowerControlArrayInput is an input type that accepts ControlTowerControlArray and ControlTowerControlArrayOutput values.
// You can construct a concrete instance of `ControlTowerControlArrayInput` via:
//
//	ControlTowerControlArray{ ControlTowerControlArgs{...} }
type ControlTowerControlArrayInput interface {
	pulumi.Input

	ToControlTowerControlArrayOutput() ControlTowerControlArrayOutput
	ToControlTowerControlArrayOutputWithContext(context.Context) ControlTowerControlArrayOutput
}

type ControlTowerControlArray []ControlTowerControlInput

func (ControlTowerControlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ControlTowerControl)(nil)).Elem()
}

func (i ControlTowerControlArray) ToControlTowerControlArrayOutput() ControlTowerControlArrayOutput {
	return i.ToControlTowerControlArrayOutputWithContext(context.Background())
}

func (i ControlTowerControlArray) ToControlTowerControlArrayOutputWithContext(ctx context.Context) ControlTowerControlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlTowerControlArrayOutput)
}

// ControlTowerControlMapInput is an input type that accepts ControlTowerControlMap and ControlTowerControlMapOutput values.
// You can construct a concrete instance of `ControlTowerControlMapInput` via:
//
//	ControlTowerControlMap{ "key": ControlTowerControlArgs{...} }
type ControlTowerControlMapInput interface {
	pulumi.Input

	ToControlTowerControlMapOutput() ControlTowerControlMapOutput
	ToControlTowerControlMapOutputWithContext(context.Context) ControlTowerControlMapOutput
}

type ControlTowerControlMap map[string]ControlTowerControlInput

func (ControlTowerControlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ControlTowerControl)(nil)).Elem()
}

func (i ControlTowerControlMap) ToControlTowerControlMapOutput() ControlTowerControlMapOutput {
	return i.ToControlTowerControlMapOutputWithContext(context.Background())
}

func (i ControlTowerControlMap) ToControlTowerControlMapOutputWithContext(ctx context.Context) ControlTowerControlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlTowerControlMapOutput)
}

type ControlTowerControlOutput struct{ *pulumi.OutputState }

func (ControlTowerControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControlTowerControl)(nil)).Elem()
}

func (o ControlTowerControlOutput) ToControlTowerControlOutput() ControlTowerControlOutput {
	return o
}

func (o ControlTowerControlOutput) ToControlTowerControlOutputWithContext(ctx context.Context) ControlTowerControlOutput {
	return o
}

func (o ControlTowerControlOutput) ControlIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ControlTowerControl) pulumi.StringOutput { return v.ControlIdentifier }).(pulumi.StringOutput)
}

func (o ControlTowerControlOutput) TargetIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ControlTowerControl) pulumi.StringOutput { return v.TargetIdentifier }).(pulumi.StringOutput)
}

type ControlTowerControlArrayOutput struct{ *pulumi.OutputState }

func (ControlTowerControlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ControlTowerControl)(nil)).Elem()
}

func (o ControlTowerControlArrayOutput) ToControlTowerControlArrayOutput() ControlTowerControlArrayOutput {
	return o
}

func (o ControlTowerControlArrayOutput) ToControlTowerControlArrayOutputWithContext(ctx context.Context) ControlTowerControlArrayOutput {
	return o
}

func (o ControlTowerControlArrayOutput) Index(i pulumi.IntInput) ControlTowerControlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ControlTowerControl {
		return vs[0].([]*ControlTowerControl)[vs[1].(int)]
	}).(ControlTowerControlOutput)
}

type ControlTowerControlMapOutput struct{ *pulumi.OutputState }

func (ControlTowerControlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ControlTowerControl)(nil)).Elem()
}

func (o ControlTowerControlMapOutput) ToControlTowerControlMapOutput() ControlTowerControlMapOutput {
	return o
}

func (o ControlTowerControlMapOutput) ToControlTowerControlMapOutputWithContext(ctx context.Context) ControlTowerControlMapOutput {
	return o
}

func (o ControlTowerControlMapOutput) MapIndex(k pulumi.StringInput) ControlTowerControlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ControlTowerControl {
		return vs[0].(map[string]*ControlTowerControl)[vs[1].(string)]
	}).(ControlTowerControlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ControlTowerControlInput)(nil)).Elem(), &ControlTowerControl{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControlTowerControlArrayInput)(nil)).Elem(), ControlTowerControlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControlTowerControlMapInput)(nil)).Elem(), ControlTowerControlMap{})
	pulumi.RegisterOutputType(ControlTowerControlOutput{})
	pulumi.RegisterOutputType(ControlTowerControlArrayOutput{})
	pulumi.RegisterOutputType(ControlTowerControlMapOutput{})
}
