// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package controltower

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ControlTowerControlParameter struct {
	// The name of the parameter.
	Key string `pulumi:"key"`
	// The value of the parameter.
	Value string `pulumi:"value"`
}

// ControlTowerControlParameterInput is an input type that accepts ControlTowerControlParameterArgs and ControlTowerControlParameterOutput values.
// You can construct a concrete instance of `ControlTowerControlParameterInput` via:
//
//	ControlTowerControlParameterArgs{...}
type ControlTowerControlParameterInput interface {
	pulumi.Input

	ToControlTowerControlParameterOutput() ControlTowerControlParameterOutput
	ToControlTowerControlParameterOutputWithContext(context.Context) ControlTowerControlParameterOutput
}

type ControlTowerControlParameterArgs struct {
	// The name of the parameter.
	Key pulumi.StringInput `pulumi:"key"`
	// The value of the parameter.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ControlTowerControlParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControlTowerControlParameter)(nil)).Elem()
}

func (i ControlTowerControlParameterArgs) ToControlTowerControlParameterOutput() ControlTowerControlParameterOutput {
	return i.ToControlTowerControlParameterOutputWithContext(context.Background())
}

func (i ControlTowerControlParameterArgs) ToControlTowerControlParameterOutputWithContext(ctx context.Context) ControlTowerControlParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlTowerControlParameterOutput)
}

// ControlTowerControlParameterArrayInput is an input type that accepts ControlTowerControlParameterArray and ControlTowerControlParameterArrayOutput values.
// You can construct a concrete instance of `ControlTowerControlParameterArrayInput` via:
//
//	ControlTowerControlParameterArray{ ControlTowerControlParameterArgs{...} }
type ControlTowerControlParameterArrayInput interface {
	pulumi.Input

	ToControlTowerControlParameterArrayOutput() ControlTowerControlParameterArrayOutput
	ToControlTowerControlParameterArrayOutputWithContext(context.Context) ControlTowerControlParameterArrayOutput
}

type ControlTowerControlParameterArray []ControlTowerControlParameterInput

func (ControlTowerControlParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ControlTowerControlParameter)(nil)).Elem()
}

func (i ControlTowerControlParameterArray) ToControlTowerControlParameterArrayOutput() ControlTowerControlParameterArrayOutput {
	return i.ToControlTowerControlParameterArrayOutputWithContext(context.Background())
}

func (i ControlTowerControlParameterArray) ToControlTowerControlParameterArrayOutputWithContext(ctx context.Context) ControlTowerControlParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlTowerControlParameterArrayOutput)
}

type ControlTowerControlParameterOutput struct{ *pulumi.OutputState }

func (ControlTowerControlParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControlTowerControlParameter)(nil)).Elem()
}

func (o ControlTowerControlParameterOutput) ToControlTowerControlParameterOutput() ControlTowerControlParameterOutput {
	return o
}

func (o ControlTowerControlParameterOutput) ToControlTowerControlParameterOutputWithContext(ctx context.Context) ControlTowerControlParameterOutput {
	return o
}

// The name of the parameter.
func (o ControlTowerControlParameterOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ControlTowerControlParameter) string { return v.Key }).(pulumi.StringOutput)
}

// The value of the parameter.
func (o ControlTowerControlParameterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ControlTowerControlParameter) string { return v.Value }).(pulumi.StringOutput)
}

type ControlTowerControlParameterArrayOutput struct{ *pulumi.OutputState }

func (ControlTowerControlParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ControlTowerControlParameter)(nil)).Elem()
}

func (o ControlTowerControlParameterArrayOutput) ToControlTowerControlParameterArrayOutput() ControlTowerControlParameterArrayOutput {
	return o
}

func (o ControlTowerControlParameterArrayOutput) ToControlTowerControlParameterArrayOutputWithContext(ctx context.Context) ControlTowerControlParameterArrayOutput {
	return o
}

func (o ControlTowerControlParameterArrayOutput) Index(i pulumi.IntInput) ControlTowerControlParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ControlTowerControlParameter {
		return vs[0].([]ControlTowerControlParameter)[vs[1].(int)]
	}).(ControlTowerControlParameterOutput)
}

type LandingZoneDriftStatus struct {
	// The drift status of the landing zone.
	Status *string `pulumi:"status"`
}

// LandingZoneDriftStatusInput is an input type that accepts LandingZoneDriftStatusArgs and LandingZoneDriftStatusOutput values.
// You can construct a concrete instance of `LandingZoneDriftStatusInput` via:
//
//	LandingZoneDriftStatusArgs{...}
type LandingZoneDriftStatusInput interface {
	pulumi.Input

	ToLandingZoneDriftStatusOutput() LandingZoneDriftStatusOutput
	ToLandingZoneDriftStatusOutputWithContext(context.Context) LandingZoneDriftStatusOutput
}

type LandingZoneDriftStatusArgs struct {
	// The drift status of the landing zone.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (LandingZoneDriftStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LandingZoneDriftStatus)(nil)).Elem()
}

func (i LandingZoneDriftStatusArgs) ToLandingZoneDriftStatusOutput() LandingZoneDriftStatusOutput {
	return i.ToLandingZoneDriftStatusOutputWithContext(context.Background())
}

func (i LandingZoneDriftStatusArgs) ToLandingZoneDriftStatusOutputWithContext(ctx context.Context) LandingZoneDriftStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LandingZoneDriftStatusOutput)
}

// LandingZoneDriftStatusArrayInput is an input type that accepts LandingZoneDriftStatusArray and LandingZoneDriftStatusArrayOutput values.
// You can construct a concrete instance of `LandingZoneDriftStatusArrayInput` via:
//
//	LandingZoneDriftStatusArray{ LandingZoneDriftStatusArgs{...} }
type LandingZoneDriftStatusArrayInput interface {
	pulumi.Input

	ToLandingZoneDriftStatusArrayOutput() LandingZoneDriftStatusArrayOutput
	ToLandingZoneDriftStatusArrayOutputWithContext(context.Context) LandingZoneDriftStatusArrayOutput
}

type LandingZoneDriftStatusArray []LandingZoneDriftStatusInput

func (LandingZoneDriftStatusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LandingZoneDriftStatus)(nil)).Elem()
}

func (i LandingZoneDriftStatusArray) ToLandingZoneDriftStatusArrayOutput() LandingZoneDriftStatusArrayOutput {
	return i.ToLandingZoneDriftStatusArrayOutputWithContext(context.Background())
}

func (i LandingZoneDriftStatusArray) ToLandingZoneDriftStatusArrayOutputWithContext(ctx context.Context) LandingZoneDriftStatusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LandingZoneDriftStatusArrayOutput)
}

type LandingZoneDriftStatusOutput struct{ *pulumi.OutputState }

func (LandingZoneDriftStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LandingZoneDriftStatus)(nil)).Elem()
}

func (o LandingZoneDriftStatusOutput) ToLandingZoneDriftStatusOutput() LandingZoneDriftStatusOutput {
	return o
}

func (o LandingZoneDriftStatusOutput) ToLandingZoneDriftStatusOutputWithContext(ctx context.Context) LandingZoneDriftStatusOutput {
	return o
}

// The drift status of the landing zone.
func (o LandingZoneDriftStatusOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LandingZoneDriftStatus) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type LandingZoneDriftStatusArrayOutput struct{ *pulumi.OutputState }

func (LandingZoneDriftStatusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LandingZoneDriftStatus)(nil)).Elem()
}

func (o LandingZoneDriftStatusArrayOutput) ToLandingZoneDriftStatusArrayOutput() LandingZoneDriftStatusArrayOutput {
	return o
}

func (o LandingZoneDriftStatusArrayOutput) ToLandingZoneDriftStatusArrayOutputWithContext(ctx context.Context) LandingZoneDriftStatusArrayOutput {
	return o
}

func (o LandingZoneDriftStatusArrayOutput) Index(i pulumi.IntInput) LandingZoneDriftStatusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LandingZoneDriftStatus {
		return vs[0].([]LandingZoneDriftStatus)[vs[1].(int)]
	}).(LandingZoneDriftStatusOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ControlTowerControlParameterInput)(nil)).Elem(), ControlTowerControlParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControlTowerControlParameterArrayInput)(nil)).Elem(), ControlTowerControlParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LandingZoneDriftStatusInput)(nil)).Elem(), LandingZoneDriftStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LandingZoneDriftStatusArrayInput)(nil)).Elem(), LandingZoneDriftStatusArray{})
	pulumi.RegisterOutputType(ControlTowerControlParameterOutput{})
	pulumi.RegisterOutputType(ControlTowerControlParameterArrayOutput{})
	pulumi.RegisterOutputType(LandingZoneDriftStatusOutput{})
	pulumi.RegisterOutputType(LandingZoneDriftStatusArrayOutput{})
}
