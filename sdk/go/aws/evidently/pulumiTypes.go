// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package evidently

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FeatureEvaluationRule struct {
	// The name for the new feature. Minimum length of `1`. Maximum length of `127`.
	Name *string `pulumi:"name"`
	// This value is `aws.evidently.splits` if this is an evaluation rule for a launch, and it is `aws.evidently.onlineab` if this is an evaluation rule for an experiment.
	Type *string `pulumi:"type"`
}

// FeatureEvaluationRuleInput is an input type that accepts FeatureEvaluationRuleArgs and FeatureEvaluationRuleOutput values.
// You can construct a concrete instance of `FeatureEvaluationRuleInput` via:
//
//	FeatureEvaluationRuleArgs{...}
type FeatureEvaluationRuleInput interface {
	pulumi.Input

	ToFeatureEvaluationRuleOutput() FeatureEvaluationRuleOutput
	ToFeatureEvaluationRuleOutputWithContext(context.Context) FeatureEvaluationRuleOutput
}

type FeatureEvaluationRuleArgs struct {
	// The name for the new feature. Minimum length of `1`. Maximum length of `127`.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// This value is `aws.evidently.splits` if this is an evaluation rule for a launch, and it is `aws.evidently.onlineab` if this is an evaluation rule for an experiment.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (FeatureEvaluationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureEvaluationRule)(nil)).Elem()
}

func (i FeatureEvaluationRuleArgs) ToFeatureEvaluationRuleOutput() FeatureEvaluationRuleOutput {
	return i.ToFeatureEvaluationRuleOutputWithContext(context.Background())
}

func (i FeatureEvaluationRuleArgs) ToFeatureEvaluationRuleOutputWithContext(ctx context.Context) FeatureEvaluationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureEvaluationRuleOutput)
}

// FeatureEvaluationRuleArrayInput is an input type that accepts FeatureEvaluationRuleArray and FeatureEvaluationRuleArrayOutput values.
// You can construct a concrete instance of `FeatureEvaluationRuleArrayInput` via:
//
//	FeatureEvaluationRuleArray{ FeatureEvaluationRuleArgs{...} }
type FeatureEvaluationRuleArrayInput interface {
	pulumi.Input

	ToFeatureEvaluationRuleArrayOutput() FeatureEvaluationRuleArrayOutput
	ToFeatureEvaluationRuleArrayOutputWithContext(context.Context) FeatureEvaluationRuleArrayOutput
}

type FeatureEvaluationRuleArray []FeatureEvaluationRuleInput

func (FeatureEvaluationRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FeatureEvaluationRule)(nil)).Elem()
}

func (i FeatureEvaluationRuleArray) ToFeatureEvaluationRuleArrayOutput() FeatureEvaluationRuleArrayOutput {
	return i.ToFeatureEvaluationRuleArrayOutputWithContext(context.Background())
}

func (i FeatureEvaluationRuleArray) ToFeatureEvaluationRuleArrayOutputWithContext(ctx context.Context) FeatureEvaluationRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureEvaluationRuleArrayOutput)
}

type FeatureEvaluationRuleOutput struct{ *pulumi.OutputState }

func (FeatureEvaluationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureEvaluationRule)(nil)).Elem()
}

func (o FeatureEvaluationRuleOutput) ToFeatureEvaluationRuleOutput() FeatureEvaluationRuleOutput {
	return o
}

func (o FeatureEvaluationRuleOutput) ToFeatureEvaluationRuleOutputWithContext(ctx context.Context) FeatureEvaluationRuleOutput {
	return o
}

// The name for the new feature. Minimum length of `1`. Maximum length of `127`.
func (o FeatureEvaluationRuleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureEvaluationRule) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// This value is `aws.evidently.splits` if this is an evaluation rule for a launch, and it is `aws.evidently.onlineab` if this is an evaluation rule for an experiment.
func (o FeatureEvaluationRuleOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureEvaluationRule) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type FeatureEvaluationRuleArrayOutput struct{ *pulumi.OutputState }

func (FeatureEvaluationRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FeatureEvaluationRule)(nil)).Elem()
}

func (o FeatureEvaluationRuleArrayOutput) ToFeatureEvaluationRuleArrayOutput() FeatureEvaluationRuleArrayOutput {
	return o
}

func (o FeatureEvaluationRuleArrayOutput) ToFeatureEvaluationRuleArrayOutputWithContext(ctx context.Context) FeatureEvaluationRuleArrayOutput {
	return o
}

func (o FeatureEvaluationRuleArrayOutput) Index(i pulumi.IntInput) FeatureEvaluationRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FeatureEvaluationRule {
		return vs[0].([]FeatureEvaluationRule)[vs[1].(int)]
	}).(FeatureEvaluationRuleOutput)
}

type FeatureVariation struct {
	// The name of the variation. Minimum length of `1`. Maximum length of `127`.
	Name string `pulumi:"name"`
	// A block that specifies the value assigned to this variation. Detailed below
	Value FeatureVariationValue `pulumi:"value"`
}

// FeatureVariationInput is an input type that accepts FeatureVariationArgs and FeatureVariationOutput values.
// You can construct a concrete instance of `FeatureVariationInput` via:
//
//	FeatureVariationArgs{...}
type FeatureVariationInput interface {
	pulumi.Input

	ToFeatureVariationOutput() FeatureVariationOutput
	ToFeatureVariationOutputWithContext(context.Context) FeatureVariationOutput
}

type FeatureVariationArgs struct {
	// The name of the variation. Minimum length of `1`. Maximum length of `127`.
	Name pulumi.StringInput `pulumi:"name"`
	// A block that specifies the value assigned to this variation. Detailed below
	Value FeatureVariationValueInput `pulumi:"value"`
}

func (FeatureVariationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureVariation)(nil)).Elem()
}

func (i FeatureVariationArgs) ToFeatureVariationOutput() FeatureVariationOutput {
	return i.ToFeatureVariationOutputWithContext(context.Background())
}

func (i FeatureVariationArgs) ToFeatureVariationOutputWithContext(ctx context.Context) FeatureVariationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureVariationOutput)
}

// FeatureVariationArrayInput is an input type that accepts FeatureVariationArray and FeatureVariationArrayOutput values.
// You can construct a concrete instance of `FeatureVariationArrayInput` via:
//
//	FeatureVariationArray{ FeatureVariationArgs{...} }
type FeatureVariationArrayInput interface {
	pulumi.Input

	ToFeatureVariationArrayOutput() FeatureVariationArrayOutput
	ToFeatureVariationArrayOutputWithContext(context.Context) FeatureVariationArrayOutput
}

type FeatureVariationArray []FeatureVariationInput

func (FeatureVariationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FeatureVariation)(nil)).Elem()
}

func (i FeatureVariationArray) ToFeatureVariationArrayOutput() FeatureVariationArrayOutput {
	return i.ToFeatureVariationArrayOutputWithContext(context.Background())
}

func (i FeatureVariationArray) ToFeatureVariationArrayOutputWithContext(ctx context.Context) FeatureVariationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureVariationArrayOutput)
}

type FeatureVariationOutput struct{ *pulumi.OutputState }

func (FeatureVariationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureVariation)(nil)).Elem()
}

func (o FeatureVariationOutput) ToFeatureVariationOutput() FeatureVariationOutput {
	return o
}

func (o FeatureVariationOutput) ToFeatureVariationOutputWithContext(ctx context.Context) FeatureVariationOutput {
	return o
}

// The name of the variation. Minimum length of `1`. Maximum length of `127`.
func (o FeatureVariationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FeatureVariation) string { return v.Name }).(pulumi.StringOutput)
}

// A block that specifies the value assigned to this variation. Detailed below
func (o FeatureVariationOutput) Value() FeatureVariationValueOutput {
	return o.ApplyT(func(v FeatureVariation) FeatureVariationValue { return v.Value }).(FeatureVariationValueOutput)
}

type FeatureVariationArrayOutput struct{ *pulumi.OutputState }

func (FeatureVariationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FeatureVariation)(nil)).Elem()
}

func (o FeatureVariationArrayOutput) ToFeatureVariationArrayOutput() FeatureVariationArrayOutput {
	return o
}

func (o FeatureVariationArrayOutput) ToFeatureVariationArrayOutputWithContext(ctx context.Context) FeatureVariationArrayOutput {
	return o
}

func (o FeatureVariationArrayOutput) Index(i pulumi.IntInput) FeatureVariationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FeatureVariation {
		return vs[0].([]FeatureVariation)[vs[1].(int)]
	}).(FeatureVariationOutput)
}

type FeatureVariationValue struct {
	// If this feature uses the Boolean variation type, this field contains the Boolean value of this variation.
	BoolValue *string `pulumi:"boolValue"`
	// If this feature uses the double integer variation type, this field contains the double integer value of this variation.
	DoubleValue *string `pulumi:"doubleValue"`
	// If this feature uses the long variation type, this field contains the long value of this variation. Minimum value of `-9007199254740991`. Maximum value of `9007199254740991`.
	LongValue *string `pulumi:"longValue"`
	// If this feature uses the string variation type, this field contains the string value of this variation. Minimum length of `0`. Maximum length of `512`.
	StringValue *string `pulumi:"stringValue"`
}

// FeatureVariationValueInput is an input type that accepts FeatureVariationValueArgs and FeatureVariationValueOutput values.
// You can construct a concrete instance of `FeatureVariationValueInput` via:
//
//	FeatureVariationValueArgs{...}
type FeatureVariationValueInput interface {
	pulumi.Input

	ToFeatureVariationValueOutput() FeatureVariationValueOutput
	ToFeatureVariationValueOutputWithContext(context.Context) FeatureVariationValueOutput
}

type FeatureVariationValueArgs struct {
	// If this feature uses the Boolean variation type, this field contains the Boolean value of this variation.
	BoolValue pulumi.StringPtrInput `pulumi:"boolValue"`
	// If this feature uses the double integer variation type, this field contains the double integer value of this variation.
	DoubleValue pulumi.StringPtrInput `pulumi:"doubleValue"`
	// If this feature uses the long variation type, this field contains the long value of this variation. Minimum value of `-9007199254740991`. Maximum value of `9007199254740991`.
	LongValue pulumi.StringPtrInput `pulumi:"longValue"`
	// If this feature uses the string variation type, this field contains the string value of this variation. Minimum length of `0`. Maximum length of `512`.
	StringValue pulumi.StringPtrInput `pulumi:"stringValue"`
}

func (FeatureVariationValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureVariationValue)(nil)).Elem()
}

func (i FeatureVariationValueArgs) ToFeatureVariationValueOutput() FeatureVariationValueOutput {
	return i.ToFeatureVariationValueOutputWithContext(context.Background())
}

func (i FeatureVariationValueArgs) ToFeatureVariationValueOutputWithContext(ctx context.Context) FeatureVariationValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureVariationValueOutput)
}

type FeatureVariationValueOutput struct{ *pulumi.OutputState }

func (FeatureVariationValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureVariationValue)(nil)).Elem()
}

func (o FeatureVariationValueOutput) ToFeatureVariationValueOutput() FeatureVariationValueOutput {
	return o
}

func (o FeatureVariationValueOutput) ToFeatureVariationValueOutputWithContext(ctx context.Context) FeatureVariationValueOutput {
	return o
}

// If this feature uses the Boolean variation type, this field contains the Boolean value of this variation.
func (o FeatureVariationValueOutput) BoolValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureVariationValue) *string { return v.BoolValue }).(pulumi.StringPtrOutput)
}

// If this feature uses the double integer variation type, this field contains the double integer value of this variation.
func (o FeatureVariationValueOutput) DoubleValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureVariationValue) *string { return v.DoubleValue }).(pulumi.StringPtrOutput)
}

// If this feature uses the long variation type, this field contains the long value of this variation. Minimum value of `-9007199254740991`. Maximum value of `9007199254740991`.
func (o FeatureVariationValueOutput) LongValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureVariationValue) *string { return v.LongValue }).(pulumi.StringPtrOutput)
}

// If this feature uses the string variation type, this field contains the string value of this variation. Minimum length of `0`. Maximum length of `512`.
func (o FeatureVariationValueOutput) StringValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureVariationValue) *string { return v.StringValue }).(pulumi.StringPtrOutput)
}

type LaunchExecution struct {
	// The date and time that the launch ended.
	EndedTime *string `pulumi:"endedTime"`
	// The date and time that the launch started.
	StartedTime *string `pulumi:"startedTime"`
}

// LaunchExecutionInput is an input type that accepts LaunchExecutionArgs and LaunchExecutionOutput values.
// You can construct a concrete instance of `LaunchExecutionInput` via:
//
//	LaunchExecutionArgs{...}
type LaunchExecutionInput interface {
	pulumi.Input

	ToLaunchExecutionOutput() LaunchExecutionOutput
	ToLaunchExecutionOutputWithContext(context.Context) LaunchExecutionOutput
}

type LaunchExecutionArgs struct {
	// The date and time that the launch ended.
	EndedTime pulumi.StringPtrInput `pulumi:"endedTime"`
	// The date and time that the launch started.
	StartedTime pulumi.StringPtrInput `pulumi:"startedTime"`
}

func (LaunchExecutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchExecution)(nil)).Elem()
}

func (i LaunchExecutionArgs) ToLaunchExecutionOutput() LaunchExecutionOutput {
	return i.ToLaunchExecutionOutputWithContext(context.Background())
}

func (i LaunchExecutionArgs) ToLaunchExecutionOutputWithContext(ctx context.Context) LaunchExecutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchExecutionOutput)
}

// LaunchExecutionArrayInput is an input type that accepts LaunchExecutionArray and LaunchExecutionArrayOutput values.
// You can construct a concrete instance of `LaunchExecutionArrayInput` via:
//
//	LaunchExecutionArray{ LaunchExecutionArgs{...} }
type LaunchExecutionArrayInput interface {
	pulumi.Input

	ToLaunchExecutionArrayOutput() LaunchExecutionArrayOutput
	ToLaunchExecutionArrayOutputWithContext(context.Context) LaunchExecutionArrayOutput
}

type LaunchExecutionArray []LaunchExecutionInput

func (LaunchExecutionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchExecution)(nil)).Elem()
}

func (i LaunchExecutionArray) ToLaunchExecutionArrayOutput() LaunchExecutionArrayOutput {
	return i.ToLaunchExecutionArrayOutputWithContext(context.Background())
}

func (i LaunchExecutionArray) ToLaunchExecutionArrayOutputWithContext(ctx context.Context) LaunchExecutionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchExecutionArrayOutput)
}

type LaunchExecutionOutput struct{ *pulumi.OutputState }

func (LaunchExecutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchExecution)(nil)).Elem()
}

func (o LaunchExecutionOutput) ToLaunchExecutionOutput() LaunchExecutionOutput {
	return o
}

func (o LaunchExecutionOutput) ToLaunchExecutionOutputWithContext(ctx context.Context) LaunchExecutionOutput {
	return o
}

// The date and time that the launch ended.
func (o LaunchExecutionOutput) EndedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LaunchExecution) *string { return v.EndedTime }).(pulumi.StringPtrOutput)
}

// The date and time that the launch started.
func (o LaunchExecutionOutput) StartedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LaunchExecution) *string { return v.StartedTime }).(pulumi.StringPtrOutput)
}

type LaunchExecutionArrayOutput struct{ *pulumi.OutputState }

func (LaunchExecutionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchExecution)(nil)).Elem()
}

func (o LaunchExecutionArrayOutput) ToLaunchExecutionArrayOutput() LaunchExecutionArrayOutput {
	return o
}

func (o LaunchExecutionArrayOutput) ToLaunchExecutionArrayOutputWithContext(ctx context.Context) LaunchExecutionArrayOutput {
	return o
}

func (o LaunchExecutionArrayOutput) Index(i pulumi.IntInput) LaunchExecutionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LaunchExecution {
		return vs[0].([]LaunchExecution)[vs[1].(int)]
	}).(LaunchExecutionOutput)
}

type LaunchGroup struct {
	// Specifies the description of the launch group.
	Description *string `pulumi:"description"`
	// Specifies the name of the feature that the launch is using.
	Feature string `pulumi:"feature"`
	// Specifies the name of the lahnch group.
	Name string `pulumi:"name"`
	// Specifies the feature variation to use for this launch group.
	Variation string `pulumi:"variation"`
}

// LaunchGroupInput is an input type that accepts LaunchGroupArgs and LaunchGroupOutput values.
// You can construct a concrete instance of `LaunchGroupInput` via:
//
//	LaunchGroupArgs{...}
type LaunchGroupInput interface {
	pulumi.Input

	ToLaunchGroupOutput() LaunchGroupOutput
	ToLaunchGroupOutputWithContext(context.Context) LaunchGroupOutput
}

type LaunchGroupArgs struct {
	// Specifies the description of the launch group.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies the name of the feature that the launch is using.
	Feature pulumi.StringInput `pulumi:"feature"`
	// Specifies the name of the lahnch group.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the feature variation to use for this launch group.
	Variation pulumi.StringInput `pulumi:"variation"`
}

func (LaunchGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchGroup)(nil)).Elem()
}

func (i LaunchGroupArgs) ToLaunchGroupOutput() LaunchGroupOutput {
	return i.ToLaunchGroupOutputWithContext(context.Background())
}

func (i LaunchGroupArgs) ToLaunchGroupOutputWithContext(ctx context.Context) LaunchGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchGroupOutput)
}

// LaunchGroupArrayInput is an input type that accepts LaunchGroupArray and LaunchGroupArrayOutput values.
// You can construct a concrete instance of `LaunchGroupArrayInput` via:
//
//	LaunchGroupArray{ LaunchGroupArgs{...} }
type LaunchGroupArrayInput interface {
	pulumi.Input

	ToLaunchGroupArrayOutput() LaunchGroupArrayOutput
	ToLaunchGroupArrayOutputWithContext(context.Context) LaunchGroupArrayOutput
}

type LaunchGroupArray []LaunchGroupInput

func (LaunchGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchGroup)(nil)).Elem()
}

func (i LaunchGroupArray) ToLaunchGroupArrayOutput() LaunchGroupArrayOutput {
	return i.ToLaunchGroupArrayOutputWithContext(context.Background())
}

func (i LaunchGroupArray) ToLaunchGroupArrayOutputWithContext(ctx context.Context) LaunchGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchGroupArrayOutput)
}

type LaunchGroupOutput struct{ *pulumi.OutputState }

func (LaunchGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchGroup)(nil)).Elem()
}

func (o LaunchGroupOutput) ToLaunchGroupOutput() LaunchGroupOutput {
	return o
}

func (o LaunchGroupOutput) ToLaunchGroupOutputWithContext(ctx context.Context) LaunchGroupOutput {
	return o
}

// Specifies the description of the launch group.
func (o LaunchGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LaunchGroup) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the name of the feature that the launch is using.
func (o LaunchGroupOutput) Feature() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchGroup) string { return v.Feature }).(pulumi.StringOutput)
}

// Specifies the name of the lahnch group.
func (o LaunchGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchGroup) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies the feature variation to use for this launch group.
func (o LaunchGroupOutput) Variation() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchGroup) string { return v.Variation }).(pulumi.StringOutput)
}

type LaunchGroupArrayOutput struct{ *pulumi.OutputState }

func (LaunchGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchGroup)(nil)).Elem()
}

func (o LaunchGroupArrayOutput) ToLaunchGroupArrayOutput() LaunchGroupArrayOutput {
	return o
}

func (o LaunchGroupArrayOutput) ToLaunchGroupArrayOutputWithContext(ctx context.Context) LaunchGroupArrayOutput {
	return o
}

func (o LaunchGroupArrayOutput) Index(i pulumi.IntInput) LaunchGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LaunchGroup {
		return vs[0].([]LaunchGroup)[vs[1].(int)]
	}).(LaunchGroupOutput)
}

type LaunchMetricMonitor struct {
	// A block that defines the metric. Detailed below.
	MetricDefinition LaunchMetricMonitorMetricDefinition `pulumi:"metricDefinition"`
}

// LaunchMetricMonitorInput is an input type that accepts LaunchMetricMonitorArgs and LaunchMetricMonitorOutput values.
// You can construct a concrete instance of `LaunchMetricMonitorInput` via:
//
//	LaunchMetricMonitorArgs{...}
type LaunchMetricMonitorInput interface {
	pulumi.Input

	ToLaunchMetricMonitorOutput() LaunchMetricMonitorOutput
	ToLaunchMetricMonitorOutputWithContext(context.Context) LaunchMetricMonitorOutput
}

type LaunchMetricMonitorArgs struct {
	// A block that defines the metric. Detailed below.
	MetricDefinition LaunchMetricMonitorMetricDefinitionInput `pulumi:"metricDefinition"`
}

func (LaunchMetricMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchMetricMonitor)(nil)).Elem()
}

func (i LaunchMetricMonitorArgs) ToLaunchMetricMonitorOutput() LaunchMetricMonitorOutput {
	return i.ToLaunchMetricMonitorOutputWithContext(context.Background())
}

func (i LaunchMetricMonitorArgs) ToLaunchMetricMonitorOutputWithContext(ctx context.Context) LaunchMetricMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchMetricMonitorOutput)
}

// LaunchMetricMonitorArrayInput is an input type that accepts LaunchMetricMonitorArray and LaunchMetricMonitorArrayOutput values.
// You can construct a concrete instance of `LaunchMetricMonitorArrayInput` via:
//
//	LaunchMetricMonitorArray{ LaunchMetricMonitorArgs{...} }
type LaunchMetricMonitorArrayInput interface {
	pulumi.Input

	ToLaunchMetricMonitorArrayOutput() LaunchMetricMonitorArrayOutput
	ToLaunchMetricMonitorArrayOutputWithContext(context.Context) LaunchMetricMonitorArrayOutput
}

type LaunchMetricMonitorArray []LaunchMetricMonitorInput

func (LaunchMetricMonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchMetricMonitor)(nil)).Elem()
}

func (i LaunchMetricMonitorArray) ToLaunchMetricMonitorArrayOutput() LaunchMetricMonitorArrayOutput {
	return i.ToLaunchMetricMonitorArrayOutputWithContext(context.Background())
}

func (i LaunchMetricMonitorArray) ToLaunchMetricMonitorArrayOutputWithContext(ctx context.Context) LaunchMetricMonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchMetricMonitorArrayOutput)
}

type LaunchMetricMonitorOutput struct{ *pulumi.OutputState }

func (LaunchMetricMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchMetricMonitor)(nil)).Elem()
}

func (o LaunchMetricMonitorOutput) ToLaunchMetricMonitorOutput() LaunchMetricMonitorOutput {
	return o
}

func (o LaunchMetricMonitorOutput) ToLaunchMetricMonitorOutputWithContext(ctx context.Context) LaunchMetricMonitorOutput {
	return o
}

// A block that defines the metric. Detailed below.
func (o LaunchMetricMonitorOutput) MetricDefinition() LaunchMetricMonitorMetricDefinitionOutput {
	return o.ApplyT(func(v LaunchMetricMonitor) LaunchMetricMonitorMetricDefinition { return v.MetricDefinition }).(LaunchMetricMonitorMetricDefinitionOutput)
}

type LaunchMetricMonitorArrayOutput struct{ *pulumi.OutputState }

func (LaunchMetricMonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchMetricMonitor)(nil)).Elem()
}

func (o LaunchMetricMonitorArrayOutput) ToLaunchMetricMonitorArrayOutput() LaunchMetricMonitorArrayOutput {
	return o
}

func (o LaunchMetricMonitorArrayOutput) ToLaunchMetricMonitorArrayOutputWithContext(ctx context.Context) LaunchMetricMonitorArrayOutput {
	return o
}

func (o LaunchMetricMonitorArrayOutput) Index(i pulumi.IntInput) LaunchMetricMonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LaunchMetricMonitor {
		return vs[0].([]LaunchMetricMonitor)[vs[1].(int)]
	}).(LaunchMetricMonitorOutput)
}

type LaunchMetricMonitorMetricDefinition struct {
	// Specifies the entity, such as a user or session, that does an action that causes a metric value to be recorded. An example is `userDetails.userID`.
	EntityIdKey string `pulumi:"entityIdKey"`
	// Specifies The EventBridge event pattern that defines how the metric is recorded.
	EventPattern *string `pulumi:"eventPattern"`
	// Specifies the name for the metric.
	Name string `pulumi:"name"`
	// Specifies a label for the units that the metric is measuring.
	UnitLabel *string `pulumi:"unitLabel"`
	// Specifies the value that is tracked to produce the metric.
	ValueKey string `pulumi:"valueKey"`
}

// LaunchMetricMonitorMetricDefinitionInput is an input type that accepts LaunchMetricMonitorMetricDefinitionArgs and LaunchMetricMonitorMetricDefinitionOutput values.
// You can construct a concrete instance of `LaunchMetricMonitorMetricDefinitionInput` via:
//
//	LaunchMetricMonitorMetricDefinitionArgs{...}
type LaunchMetricMonitorMetricDefinitionInput interface {
	pulumi.Input

	ToLaunchMetricMonitorMetricDefinitionOutput() LaunchMetricMonitorMetricDefinitionOutput
	ToLaunchMetricMonitorMetricDefinitionOutputWithContext(context.Context) LaunchMetricMonitorMetricDefinitionOutput
}

type LaunchMetricMonitorMetricDefinitionArgs struct {
	// Specifies the entity, such as a user or session, that does an action that causes a metric value to be recorded. An example is `userDetails.userID`.
	EntityIdKey pulumi.StringInput `pulumi:"entityIdKey"`
	// Specifies The EventBridge event pattern that defines how the metric is recorded.
	EventPattern pulumi.StringPtrInput `pulumi:"eventPattern"`
	// Specifies the name for the metric.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies a label for the units that the metric is measuring.
	UnitLabel pulumi.StringPtrInput `pulumi:"unitLabel"`
	// Specifies the value that is tracked to produce the metric.
	ValueKey pulumi.StringInput `pulumi:"valueKey"`
}

func (LaunchMetricMonitorMetricDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchMetricMonitorMetricDefinition)(nil)).Elem()
}

func (i LaunchMetricMonitorMetricDefinitionArgs) ToLaunchMetricMonitorMetricDefinitionOutput() LaunchMetricMonitorMetricDefinitionOutput {
	return i.ToLaunchMetricMonitorMetricDefinitionOutputWithContext(context.Background())
}

func (i LaunchMetricMonitorMetricDefinitionArgs) ToLaunchMetricMonitorMetricDefinitionOutputWithContext(ctx context.Context) LaunchMetricMonitorMetricDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchMetricMonitorMetricDefinitionOutput)
}

type LaunchMetricMonitorMetricDefinitionOutput struct{ *pulumi.OutputState }

func (LaunchMetricMonitorMetricDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchMetricMonitorMetricDefinition)(nil)).Elem()
}

func (o LaunchMetricMonitorMetricDefinitionOutput) ToLaunchMetricMonitorMetricDefinitionOutput() LaunchMetricMonitorMetricDefinitionOutput {
	return o
}

func (o LaunchMetricMonitorMetricDefinitionOutput) ToLaunchMetricMonitorMetricDefinitionOutputWithContext(ctx context.Context) LaunchMetricMonitorMetricDefinitionOutput {
	return o
}

// Specifies the entity, such as a user or session, that does an action that causes a metric value to be recorded. An example is `userDetails.userID`.
func (o LaunchMetricMonitorMetricDefinitionOutput) EntityIdKey() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchMetricMonitorMetricDefinition) string { return v.EntityIdKey }).(pulumi.StringOutput)
}

// Specifies The EventBridge event pattern that defines how the metric is recorded.
func (o LaunchMetricMonitorMetricDefinitionOutput) EventPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LaunchMetricMonitorMetricDefinition) *string { return v.EventPattern }).(pulumi.StringPtrOutput)
}

// Specifies the name for the metric.
func (o LaunchMetricMonitorMetricDefinitionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchMetricMonitorMetricDefinition) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies a label for the units that the metric is measuring.
func (o LaunchMetricMonitorMetricDefinitionOutput) UnitLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LaunchMetricMonitorMetricDefinition) *string { return v.UnitLabel }).(pulumi.StringPtrOutput)
}

// Specifies the value that is tracked to produce the metric.
func (o LaunchMetricMonitorMetricDefinitionOutput) ValueKey() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchMetricMonitorMetricDefinition) string { return v.ValueKey }).(pulumi.StringOutput)
}

type LaunchScheduledSplitsConfig struct {
	// One or up to six blocks that define the traffic allocation percentages among the feature variations during each step of the launch. This also defines the start time of each step. Detailed below.
	Steps []LaunchScheduledSplitsConfigStep `pulumi:"steps"`
}

// LaunchScheduledSplitsConfigInput is an input type that accepts LaunchScheduledSplitsConfigArgs and LaunchScheduledSplitsConfigOutput values.
// You can construct a concrete instance of `LaunchScheduledSplitsConfigInput` via:
//
//	LaunchScheduledSplitsConfigArgs{...}
type LaunchScheduledSplitsConfigInput interface {
	pulumi.Input

	ToLaunchScheduledSplitsConfigOutput() LaunchScheduledSplitsConfigOutput
	ToLaunchScheduledSplitsConfigOutputWithContext(context.Context) LaunchScheduledSplitsConfigOutput
}

type LaunchScheduledSplitsConfigArgs struct {
	// One or up to six blocks that define the traffic allocation percentages among the feature variations during each step of the launch. This also defines the start time of each step. Detailed below.
	Steps LaunchScheduledSplitsConfigStepArrayInput `pulumi:"steps"`
}

func (LaunchScheduledSplitsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchScheduledSplitsConfig)(nil)).Elem()
}

func (i LaunchScheduledSplitsConfigArgs) ToLaunchScheduledSplitsConfigOutput() LaunchScheduledSplitsConfigOutput {
	return i.ToLaunchScheduledSplitsConfigOutputWithContext(context.Background())
}

func (i LaunchScheduledSplitsConfigArgs) ToLaunchScheduledSplitsConfigOutputWithContext(ctx context.Context) LaunchScheduledSplitsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchScheduledSplitsConfigOutput)
}

func (i LaunchScheduledSplitsConfigArgs) ToLaunchScheduledSplitsConfigPtrOutput() LaunchScheduledSplitsConfigPtrOutput {
	return i.ToLaunchScheduledSplitsConfigPtrOutputWithContext(context.Background())
}

func (i LaunchScheduledSplitsConfigArgs) ToLaunchScheduledSplitsConfigPtrOutputWithContext(ctx context.Context) LaunchScheduledSplitsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchScheduledSplitsConfigOutput).ToLaunchScheduledSplitsConfigPtrOutputWithContext(ctx)
}

// LaunchScheduledSplitsConfigPtrInput is an input type that accepts LaunchScheduledSplitsConfigArgs, LaunchScheduledSplitsConfigPtr and LaunchScheduledSplitsConfigPtrOutput values.
// You can construct a concrete instance of `LaunchScheduledSplitsConfigPtrInput` via:
//
//	        LaunchScheduledSplitsConfigArgs{...}
//
//	or:
//
//	        nil
type LaunchScheduledSplitsConfigPtrInput interface {
	pulumi.Input

	ToLaunchScheduledSplitsConfigPtrOutput() LaunchScheduledSplitsConfigPtrOutput
	ToLaunchScheduledSplitsConfigPtrOutputWithContext(context.Context) LaunchScheduledSplitsConfigPtrOutput
}

type launchScheduledSplitsConfigPtrType LaunchScheduledSplitsConfigArgs

func LaunchScheduledSplitsConfigPtr(v *LaunchScheduledSplitsConfigArgs) LaunchScheduledSplitsConfigPtrInput {
	return (*launchScheduledSplitsConfigPtrType)(v)
}

func (*launchScheduledSplitsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LaunchScheduledSplitsConfig)(nil)).Elem()
}

func (i *launchScheduledSplitsConfigPtrType) ToLaunchScheduledSplitsConfigPtrOutput() LaunchScheduledSplitsConfigPtrOutput {
	return i.ToLaunchScheduledSplitsConfigPtrOutputWithContext(context.Background())
}

func (i *launchScheduledSplitsConfigPtrType) ToLaunchScheduledSplitsConfigPtrOutputWithContext(ctx context.Context) LaunchScheduledSplitsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchScheduledSplitsConfigPtrOutput)
}

type LaunchScheduledSplitsConfigOutput struct{ *pulumi.OutputState }

func (LaunchScheduledSplitsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchScheduledSplitsConfig)(nil)).Elem()
}

func (o LaunchScheduledSplitsConfigOutput) ToLaunchScheduledSplitsConfigOutput() LaunchScheduledSplitsConfigOutput {
	return o
}

func (o LaunchScheduledSplitsConfigOutput) ToLaunchScheduledSplitsConfigOutputWithContext(ctx context.Context) LaunchScheduledSplitsConfigOutput {
	return o
}

func (o LaunchScheduledSplitsConfigOutput) ToLaunchScheduledSplitsConfigPtrOutput() LaunchScheduledSplitsConfigPtrOutput {
	return o.ToLaunchScheduledSplitsConfigPtrOutputWithContext(context.Background())
}

func (o LaunchScheduledSplitsConfigOutput) ToLaunchScheduledSplitsConfigPtrOutputWithContext(ctx context.Context) LaunchScheduledSplitsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LaunchScheduledSplitsConfig) *LaunchScheduledSplitsConfig {
		return &v
	}).(LaunchScheduledSplitsConfigPtrOutput)
}

// One or up to six blocks that define the traffic allocation percentages among the feature variations during each step of the launch. This also defines the start time of each step. Detailed below.
func (o LaunchScheduledSplitsConfigOutput) Steps() LaunchScheduledSplitsConfigStepArrayOutput {
	return o.ApplyT(func(v LaunchScheduledSplitsConfig) []LaunchScheduledSplitsConfigStep { return v.Steps }).(LaunchScheduledSplitsConfigStepArrayOutput)
}

type LaunchScheduledSplitsConfigPtrOutput struct{ *pulumi.OutputState }

func (LaunchScheduledSplitsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LaunchScheduledSplitsConfig)(nil)).Elem()
}

func (o LaunchScheduledSplitsConfigPtrOutput) ToLaunchScheduledSplitsConfigPtrOutput() LaunchScheduledSplitsConfigPtrOutput {
	return o
}

func (o LaunchScheduledSplitsConfigPtrOutput) ToLaunchScheduledSplitsConfigPtrOutputWithContext(ctx context.Context) LaunchScheduledSplitsConfigPtrOutput {
	return o
}

func (o LaunchScheduledSplitsConfigPtrOutput) Elem() LaunchScheduledSplitsConfigOutput {
	return o.ApplyT(func(v *LaunchScheduledSplitsConfig) LaunchScheduledSplitsConfig {
		if v != nil {
			return *v
		}
		var ret LaunchScheduledSplitsConfig
		return ret
	}).(LaunchScheduledSplitsConfigOutput)
}

// One or up to six blocks that define the traffic allocation percentages among the feature variations during each step of the launch. This also defines the start time of each step. Detailed below.
func (o LaunchScheduledSplitsConfigPtrOutput) Steps() LaunchScheduledSplitsConfigStepArrayOutput {
	return o.ApplyT(func(v *LaunchScheduledSplitsConfig) []LaunchScheduledSplitsConfigStep {
		if v == nil {
			return nil
		}
		return v.Steps
	}).(LaunchScheduledSplitsConfigStepArrayOutput)
}

type LaunchScheduledSplitsConfigStep struct {
	// The traffic allocation percentages among the feature variations during one step of a launch. This is a set of key-value pairs. The keys are variation names. The values represent the percentage of traffic to allocate to that variation during this step. For more information, refer to the [AWS documentation for ScheduledSplitConfig groupWeights](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_ScheduledSplitConfig.html).
	GroupWeights map[string]int `pulumi:"groupWeights"`
	// One or up to six blocks that specify different traffic splits for one or more audience segments. A segment is a portion of your audience that share one or more characteristics. Examples could be Chrome browser users, users in Europe, or Firefox browser users in Europe who also fit other criteria that your application collects, such as age. Detailed below.
	SegmentOverrides []LaunchScheduledSplitsConfigStepSegmentOverride `pulumi:"segmentOverrides"`
	// Specifies the date and time that this step of the launch starts.
	StartTime string `pulumi:"startTime"`
}

// LaunchScheduledSplitsConfigStepInput is an input type that accepts LaunchScheduledSplitsConfigStepArgs and LaunchScheduledSplitsConfigStepOutput values.
// You can construct a concrete instance of `LaunchScheduledSplitsConfigStepInput` via:
//
//	LaunchScheduledSplitsConfigStepArgs{...}
type LaunchScheduledSplitsConfigStepInput interface {
	pulumi.Input

	ToLaunchScheduledSplitsConfigStepOutput() LaunchScheduledSplitsConfigStepOutput
	ToLaunchScheduledSplitsConfigStepOutputWithContext(context.Context) LaunchScheduledSplitsConfigStepOutput
}

type LaunchScheduledSplitsConfigStepArgs struct {
	// The traffic allocation percentages among the feature variations during one step of a launch. This is a set of key-value pairs. The keys are variation names. The values represent the percentage of traffic to allocate to that variation during this step. For more information, refer to the [AWS documentation for ScheduledSplitConfig groupWeights](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_ScheduledSplitConfig.html).
	GroupWeights pulumi.IntMapInput `pulumi:"groupWeights"`
	// One or up to six blocks that specify different traffic splits for one or more audience segments. A segment is a portion of your audience that share one or more characteristics. Examples could be Chrome browser users, users in Europe, or Firefox browser users in Europe who also fit other criteria that your application collects, such as age. Detailed below.
	SegmentOverrides LaunchScheduledSplitsConfigStepSegmentOverrideArrayInput `pulumi:"segmentOverrides"`
	// Specifies the date and time that this step of the launch starts.
	StartTime pulumi.StringInput `pulumi:"startTime"`
}

func (LaunchScheduledSplitsConfigStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchScheduledSplitsConfigStep)(nil)).Elem()
}

func (i LaunchScheduledSplitsConfigStepArgs) ToLaunchScheduledSplitsConfigStepOutput() LaunchScheduledSplitsConfigStepOutput {
	return i.ToLaunchScheduledSplitsConfigStepOutputWithContext(context.Background())
}

func (i LaunchScheduledSplitsConfigStepArgs) ToLaunchScheduledSplitsConfigStepOutputWithContext(ctx context.Context) LaunchScheduledSplitsConfigStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchScheduledSplitsConfigStepOutput)
}

// LaunchScheduledSplitsConfigStepArrayInput is an input type that accepts LaunchScheduledSplitsConfigStepArray and LaunchScheduledSplitsConfigStepArrayOutput values.
// You can construct a concrete instance of `LaunchScheduledSplitsConfigStepArrayInput` via:
//
//	LaunchScheduledSplitsConfigStepArray{ LaunchScheduledSplitsConfigStepArgs{...} }
type LaunchScheduledSplitsConfigStepArrayInput interface {
	pulumi.Input

	ToLaunchScheduledSplitsConfigStepArrayOutput() LaunchScheduledSplitsConfigStepArrayOutput
	ToLaunchScheduledSplitsConfigStepArrayOutputWithContext(context.Context) LaunchScheduledSplitsConfigStepArrayOutput
}

type LaunchScheduledSplitsConfigStepArray []LaunchScheduledSplitsConfigStepInput

func (LaunchScheduledSplitsConfigStepArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchScheduledSplitsConfigStep)(nil)).Elem()
}

func (i LaunchScheduledSplitsConfigStepArray) ToLaunchScheduledSplitsConfigStepArrayOutput() LaunchScheduledSplitsConfigStepArrayOutput {
	return i.ToLaunchScheduledSplitsConfigStepArrayOutputWithContext(context.Background())
}

func (i LaunchScheduledSplitsConfigStepArray) ToLaunchScheduledSplitsConfigStepArrayOutputWithContext(ctx context.Context) LaunchScheduledSplitsConfigStepArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchScheduledSplitsConfigStepArrayOutput)
}

type LaunchScheduledSplitsConfigStepOutput struct{ *pulumi.OutputState }

func (LaunchScheduledSplitsConfigStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchScheduledSplitsConfigStep)(nil)).Elem()
}

func (o LaunchScheduledSplitsConfigStepOutput) ToLaunchScheduledSplitsConfigStepOutput() LaunchScheduledSplitsConfigStepOutput {
	return o
}

func (o LaunchScheduledSplitsConfigStepOutput) ToLaunchScheduledSplitsConfigStepOutputWithContext(ctx context.Context) LaunchScheduledSplitsConfigStepOutput {
	return o
}

// The traffic allocation percentages among the feature variations during one step of a launch. This is a set of key-value pairs. The keys are variation names. The values represent the percentage of traffic to allocate to that variation during this step. For more information, refer to the [AWS documentation for ScheduledSplitConfig groupWeights](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_ScheduledSplitConfig.html).
func (o LaunchScheduledSplitsConfigStepOutput) GroupWeights() pulumi.IntMapOutput {
	return o.ApplyT(func(v LaunchScheduledSplitsConfigStep) map[string]int { return v.GroupWeights }).(pulumi.IntMapOutput)
}

// One or up to six blocks that specify different traffic splits for one or more audience segments. A segment is a portion of your audience that share one or more characteristics. Examples could be Chrome browser users, users in Europe, or Firefox browser users in Europe who also fit other criteria that your application collects, such as age. Detailed below.
func (o LaunchScheduledSplitsConfigStepOutput) SegmentOverrides() LaunchScheduledSplitsConfigStepSegmentOverrideArrayOutput {
	return o.ApplyT(func(v LaunchScheduledSplitsConfigStep) []LaunchScheduledSplitsConfigStepSegmentOverride {
		return v.SegmentOverrides
	}).(LaunchScheduledSplitsConfigStepSegmentOverrideArrayOutput)
}

// Specifies the date and time that this step of the launch starts.
func (o LaunchScheduledSplitsConfigStepOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchScheduledSplitsConfigStep) string { return v.StartTime }).(pulumi.StringOutput)
}

type LaunchScheduledSplitsConfigStepArrayOutput struct{ *pulumi.OutputState }

func (LaunchScheduledSplitsConfigStepArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchScheduledSplitsConfigStep)(nil)).Elem()
}

func (o LaunchScheduledSplitsConfigStepArrayOutput) ToLaunchScheduledSplitsConfigStepArrayOutput() LaunchScheduledSplitsConfigStepArrayOutput {
	return o
}

func (o LaunchScheduledSplitsConfigStepArrayOutput) ToLaunchScheduledSplitsConfigStepArrayOutputWithContext(ctx context.Context) LaunchScheduledSplitsConfigStepArrayOutput {
	return o
}

func (o LaunchScheduledSplitsConfigStepArrayOutput) Index(i pulumi.IntInput) LaunchScheduledSplitsConfigStepOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LaunchScheduledSplitsConfigStep {
		return vs[0].([]LaunchScheduledSplitsConfigStep)[vs[1].(int)]
	}).(LaunchScheduledSplitsConfigStepOutput)
}

type LaunchScheduledSplitsConfigStepSegmentOverride struct {
	// Specifies a number indicating the order to use to evaluate segment overrides, if there are more than one. Segment overrides with lower numbers are evaluated first.
	EvaluationOrder int `pulumi:"evaluationOrder"`
	// The name or ARN of the segment to use.
	Segment string `pulumi:"segment"`
	// The traffic allocation percentages among the feature variations to assign to this segment. This is a set of key-value pairs. The keys are variation names. The values represent the amount of traffic to allocate to that variation for this segment. This is expressed in thousandths of a percent, so a weight of 50000 represents 50% of traffic.
	Weights map[string]int `pulumi:"weights"`
}

// LaunchScheduledSplitsConfigStepSegmentOverrideInput is an input type that accepts LaunchScheduledSplitsConfigStepSegmentOverrideArgs and LaunchScheduledSplitsConfigStepSegmentOverrideOutput values.
// You can construct a concrete instance of `LaunchScheduledSplitsConfigStepSegmentOverrideInput` via:
//
//	LaunchScheduledSplitsConfigStepSegmentOverrideArgs{...}
type LaunchScheduledSplitsConfigStepSegmentOverrideInput interface {
	pulumi.Input

	ToLaunchScheduledSplitsConfigStepSegmentOverrideOutput() LaunchScheduledSplitsConfigStepSegmentOverrideOutput
	ToLaunchScheduledSplitsConfigStepSegmentOverrideOutputWithContext(context.Context) LaunchScheduledSplitsConfigStepSegmentOverrideOutput
}

type LaunchScheduledSplitsConfigStepSegmentOverrideArgs struct {
	// Specifies a number indicating the order to use to evaluate segment overrides, if there are more than one. Segment overrides with lower numbers are evaluated first.
	EvaluationOrder pulumi.IntInput `pulumi:"evaluationOrder"`
	// The name or ARN of the segment to use.
	Segment pulumi.StringInput `pulumi:"segment"`
	// The traffic allocation percentages among the feature variations to assign to this segment. This is a set of key-value pairs. The keys are variation names. The values represent the amount of traffic to allocate to that variation for this segment. This is expressed in thousandths of a percent, so a weight of 50000 represents 50% of traffic.
	Weights pulumi.IntMapInput `pulumi:"weights"`
}

func (LaunchScheduledSplitsConfigStepSegmentOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchScheduledSplitsConfigStepSegmentOverride)(nil)).Elem()
}

func (i LaunchScheduledSplitsConfigStepSegmentOverrideArgs) ToLaunchScheduledSplitsConfigStepSegmentOverrideOutput() LaunchScheduledSplitsConfigStepSegmentOverrideOutput {
	return i.ToLaunchScheduledSplitsConfigStepSegmentOverrideOutputWithContext(context.Background())
}

func (i LaunchScheduledSplitsConfigStepSegmentOverrideArgs) ToLaunchScheduledSplitsConfigStepSegmentOverrideOutputWithContext(ctx context.Context) LaunchScheduledSplitsConfigStepSegmentOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchScheduledSplitsConfigStepSegmentOverrideOutput)
}

// LaunchScheduledSplitsConfigStepSegmentOverrideArrayInput is an input type that accepts LaunchScheduledSplitsConfigStepSegmentOverrideArray and LaunchScheduledSplitsConfigStepSegmentOverrideArrayOutput values.
// You can construct a concrete instance of `LaunchScheduledSplitsConfigStepSegmentOverrideArrayInput` via:
//
//	LaunchScheduledSplitsConfigStepSegmentOverrideArray{ LaunchScheduledSplitsConfigStepSegmentOverrideArgs{...} }
type LaunchScheduledSplitsConfigStepSegmentOverrideArrayInput interface {
	pulumi.Input

	ToLaunchScheduledSplitsConfigStepSegmentOverrideArrayOutput() LaunchScheduledSplitsConfigStepSegmentOverrideArrayOutput
	ToLaunchScheduledSplitsConfigStepSegmentOverrideArrayOutputWithContext(context.Context) LaunchScheduledSplitsConfigStepSegmentOverrideArrayOutput
}

type LaunchScheduledSplitsConfigStepSegmentOverrideArray []LaunchScheduledSplitsConfigStepSegmentOverrideInput

func (LaunchScheduledSplitsConfigStepSegmentOverrideArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchScheduledSplitsConfigStepSegmentOverride)(nil)).Elem()
}

func (i LaunchScheduledSplitsConfigStepSegmentOverrideArray) ToLaunchScheduledSplitsConfigStepSegmentOverrideArrayOutput() LaunchScheduledSplitsConfigStepSegmentOverrideArrayOutput {
	return i.ToLaunchScheduledSplitsConfigStepSegmentOverrideArrayOutputWithContext(context.Background())
}

func (i LaunchScheduledSplitsConfigStepSegmentOverrideArray) ToLaunchScheduledSplitsConfigStepSegmentOverrideArrayOutputWithContext(ctx context.Context) LaunchScheduledSplitsConfigStepSegmentOverrideArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchScheduledSplitsConfigStepSegmentOverrideArrayOutput)
}

type LaunchScheduledSplitsConfigStepSegmentOverrideOutput struct{ *pulumi.OutputState }

func (LaunchScheduledSplitsConfigStepSegmentOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchScheduledSplitsConfigStepSegmentOverride)(nil)).Elem()
}

func (o LaunchScheduledSplitsConfigStepSegmentOverrideOutput) ToLaunchScheduledSplitsConfigStepSegmentOverrideOutput() LaunchScheduledSplitsConfigStepSegmentOverrideOutput {
	return o
}

func (o LaunchScheduledSplitsConfigStepSegmentOverrideOutput) ToLaunchScheduledSplitsConfigStepSegmentOverrideOutputWithContext(ctx context.Context) LaunchScheduledSplitsConfigStepSegmentOverrideOutput {
	return o
}

// Specifies a number indicating the order to use to evaluate segment overrides, if there are more than one. Segment overrides with lower numbers are evaluated first.
func (o LaunchScheduledSplitsConfigStepSegmentOverrideOutput) EvaluationOrder() pulumi.IntOutput {
	return o.ApplyT(func(v LaunchScheduledSplitsConfigStepSegmentOverride) int { return v.EvaluationOrder }).(pulumi.IntOutput)
}

// The name or ARN of the segment to use.
func (o LaunchScheduledSplitsConfigStepSegmentOverrideOutput) Segment() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchScheduledSplitsConfigStepSegmentOverride) string { return v.Segment }).(pulumi.StringOutput)
}

// The traffic allocation percentages among the feature variations to assign to this segment. This is a set of key-value pairs. The keys are variation names. The values represent the amount of traffic to allocate to that variation for this segment. This is expressed in thousandths of a percent, so a weight of 50000 represents 50% of traffic.
func (o LaunchScheduledSplitsConfigStepSegmentOverrideOutput) Weights() pulumi.IntMapOutput {
	return o.ApplyT(func(v LaunchScheduledSplitsConfigStepSegmentOverride) map[string]int { return v.Weights }).(pulumi.IntMapOutput)
}

type LaunchScheduledSplitsConfigStepSegmentOverrideArrayOutput struct{ *pulumi.OutputState }

func (LaunchScheduledSplitsConfigStepSegmentOverrideArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchScheduledSplitsConfigStepSegmentOverride)(nil)).Elem()
}

func (o LaunchScheduledSplitsConfigStepSegmentOverrideArrayOutput) ToLaunchScheduledSplitsConfigStepSegmentOverrideArrayOutput() LaunchScheduledSplitsConfigStepSegmentOverrideArrayOutput {
	return o
}

func (o LaunchScheduledSplitsConfigStepSegmentOverrideArrayOutput) ToLaunchScheduledSplitsConfigStepSegmentOverrideArrayOutputWithContext(ctx context.Context) LaunchScheduledSplitsConfigStepSegmentOverrideArrayOutput {
	return o
}

func (o LaunchScheduledSplitsConfigStepSegmentOverrideArrayOutput) Index(i pulumi.IntInput) LaunchScheduledSplitsConfigStepSegmentOverrideOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LaunchScheduledSplitsConfigStepSegmentOverride {
		return vs[0].([]LaunchScheduledSplitsConfigStepSegmentOverride)[vs[1].(int)]
	}).(LaunchScheduledSplitsConfigStepSegmentOverrideOutput)
}

type ProjectDataDelivery struct {
	// A block that defines the CloudWatch Log Group that stores the evaluation events. See below.
	CloudwatchLogs *ProjectDataDeliveryCloudwatchLogs `pulumi:"cloudwatchLogs"`
	// A block that defines the S3 bucket and prefix that stores the evaluation events. See below.
	S3Destination *ProjectDataDeliveryS3Destination `pulumi:"s3Destination"`
}

// ProjectDataDeliveryInput is an input type that accepts ProjectDataDeliveryArgs and ProjectDataDeliveryOutput values.
// You can construct a concrete instance of `ProjectDataDeliveryInput` via:
//
//	ProjectDataDeliveryArgs{...}
type ProjectDataDeliveryInput interface {
	pulumi.Input

	ToProjectDataDeliveryOutput() ProjectDataDeliveryOutput
	ToProjectDataDeliveryOutputWithContext(context.Context) ProjectDataDeliveryOutput
}

type ProjectDataDeliveryArgs struct {
	// A block that defines the CloudWatch Log Group that stores the evaluation events. See below.
	CloudwatchLogs ProjectDataDeliveryCloudwatchLogsPtrInput `pulumi:"cloudwatchLogs"`
	// A block that defines the S3 bucket and prefix that stores the evaluation events. See below.
	S3Destination ProjectDataDeliveryS3DestinationPtrInput `pulumi:"s3Destination"`
}

func (ProjectDataDeliveryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectDataDelivery)(nil)).Elem()
}

func (i ProjectDataDeliveryArgs) ToProjectDataDeliveryOutput() ProjectDataDeliveryOutput {
	return i.ToProjectDataDeliveryOutputWithContext(context.Background())
}

func (i ProjectDataDeliveryArgs) ToProjectDataDeliveryOutputWithContext(ctx context.Context) ProjectDataDeliveryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDataDeliveryOutput)
}

func (i ProjectDataDeliveryArgs) ToProjectDataDeliveryPtrOutput() ProjectDataDeliveryPtrOutput {
	return i.ToProjectDataDeliveryPtrOutputWithContext(context.Background())
}

func (i ProjectDataDeliveryArgs) ToProjectDataDeliveryPtrOutputWithContext(ctx context.Context) ProjectDataDeliveryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDataDeliveryOutput).ToProjectDataDeliveryPtrOutputWithContext(ctx)
}

// ProjectDataDeliveryPtrInput is an input type that accepts ProjectDataDeliveryArgs, ProjectDataDeliveryPtr and ProjectDataDeliveryPtrOutput values.
// You can construct a concrete instance of `ProjectDataDeliveryPtrInput` via:
//
//	        ProjectDataDeliveryArgs{...}
//
//	or:
//
//	        nil
type ProjectDataDeliveryPtrInput interface {
	pulumi.Input

	ToProjectDataDeliveryPtrOutput() ProjectDataDeliveryPtrOutput
	ToProjectDataDeliveryPtrOutputWithContext(context.Context) ProjectDataDeliveryPtrOutput
}

type projectDataDeliveryPtrType ProjectDataDeliveryArgs

func ProjectDataDeliveryPtr(v *ProjectDataDeliveryArgs) ProjectDataDeliveryPtrInput {
	return (*projectDataDeliveryPtrType)(v)
}

func (*projectDataDeliveryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectDataDelivery)(nil)).Elem()
}

func (i *projectDataDeliveryPtrType) ToProjectDataDeliveryPtrOutput() ProjectDataDeliveryPtrOutput {
	return i.ToProjectDataDeliveryPtrOutputWithContext(context.Background())
}

func (i *projectDataDeliveryPtrType) ToProjectDataDeliveryPtrOutputWithContext(ctx context.Context) ProjectDataDeliveryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDataDeliveryPtrOutput)
}

type ProjectDataDeliveryOutput struct{ *pulumi.OutputState }

func (ProjectDataDeliveryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectDataDelivery)(nil)).Elem()
}

func (o ProjectDataDeliveryOutput) ToProjectDataDeliveryOutput() ProjectDataDeliveryOutput {
	return o
}

func (o ProjectDataDeliveryOutput) ToProjectDataDeliveryOutputWithContext(ctx context.Context) ProjectDataDeliveryOutput {
	return o
}

func (o ProjectDataDeliveryOutput) ToProjectDataDeliveryPtrOutput() ProjectDataDeliveryPtrOutput {
	return o.ToProjectDataDeliveryPtrOutputWithContext(context.Background())
}

func (o ProjectDataDeliveryOutput) ToProjectDataDeliveryPtrOutputWithContext(ctx context.Context) ProjectDataDeliveryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectDataDelivery) *ProjectDataDelivery {
		return &v
	}).(ProjectDataDeliveryPtrOutput)
}

// A block that defines the CloudWatch Log Group that stores the evaluation events. See below.
func (o ProjectDataDeliveryOutput) CloudwatchLogs() ProjectDataDeliveryCloudwatchLogsPtrOutput {
	return o.ApplyT(func(v ProjectDataDelivery) *ProjectDataDeliveryCloudwatchLogs { return v.CloudwatchLogs }).(ProjectDataDeliveryCloudwatchLogsPtrOutput)
}

// A block that defines the S3 bucket and prefix that stores the evaluation events. See below.
func (o ProjectDataDeliveryOutput) S3Destination() ProjectDataDeliveryS3DestinationPtrOutput {
	return o.ApplyT(func(v ProjectDataDelivery) *ProjectDataDeliveryS3Destination { return v.S3Destination }).(ProjectDataDeliveryS3DestinationPtrOutput)
}

type ProjectDataDeliveryPtrOutput struct{ *pulumi.OutputState }

func (ProjectDataDeliveryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectDataDelivery)(nil)).Elem()
}

func (o ProjectDataDeliveryPtrOutput) ToProjectDataDeliveryPtrOutput() ProjectDataDeliveryPtrOutput {
	return o
}

func (o ProjectDataDeliveryPtrOutput) ToProjectDataDeliveryPtrOutputWithContext(ctx context.Context) ProjectDataDeliveryPtrOutput {
	return o
}

func (o ProjectDataDeliveryPtrOutput) Elem() ProjectDataDeliveryOutput {
	return o.ApplyT(func(v *ProjectDataDelivery) ProjectDataDelivery {
		if v != nil {
			return *v
		}
		var ret ProjectDataDelivery
		return ret
	}).(ProjectDataDeliveryOutput)
}

// A block that defines the CloudWatch Log Group that stores the evaluation events. See below.
func (o ProjectDataDeliveryPtrOutput) CloudwatchLogs() ProjectDataDeliveryCloudwatchLogsPtrOutput {
	return o.ApplyT(func(v *ProjectDataDelivery) *ProjectDataDeliveryCloudwatchLogs {
		if v == nil {
			return nil
		}
		return v.CloudwatchLogs
	}).(ProjectDataDeliveryCloudwatchLogsPtrOutput)
}

// A block that defines the S3 bucket and prefix that stores the evaluation events. See below.
func (o ProjectDataDeliveryPtrOutput) S3Destination() ProjectDataDeliveryS3DestinationPtrOutput {
	return o.ApplyT(func(v *ProjectDataDelivery) *ProjectDataDeliveryS3Destination {
		if v == nil {
			return nil
		}
		return v.S3Destination
	}).(ProjectDataDeliveryS3DestinationPtrOutput)
}

type ProjectDataDeliveryCloudwatchLogs struct {
	// The name of the log group where the project stores evaluation events.
	//
	// The `s3Destination` block supports the following arguments:
	LogGroup *string `pulumi:"logGroup"`
}

// ProjectDataDeliveryCloudwatchLogsInput is an input type that accepts ProjectDataDeliveryCloudwatchLogsArgs and ProjectDataDeliveryCloudwatchLogsOutput values.
// You can construct a concrete instance of `ProjectDataDeliveryCloudwatchLogsInput` via:
//
//	ProjectDataDeliveryCloudwatchLogsArgs{...}
type ProjectDataDeliveryCloudwatchLogsInput interface {
	pulumi.Input

	ToProjectDataDeliveryCloudwatchLogsOutput() ProjectDataDeliveryCloudwatchLogsOutput
	ToProjectDataDeliveryCloudwatchLogsOutputWithContext(context.Context) ProjectDataDeliveryCloudwatchLogsOutput
}

type ProjectDataDeliveryCloudwatchLogsArgs struct {
	// The name of the log group where the project stores evaluation events.
	//
	// The `s3Destination` block supports the following arguments:
	LogGroup pulumi.StringPtrInput `pulumi:"logGroup"`
}

func (ProjectDataDeliveryCloudwatchLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectDataDeliveryCloudwatchLogs)(nil)).Elem()
}

func (i ProjectDataDeliveryCloudwatchLogsArgs) ToProjectDataDeliveryCloudwatchLogsOutput() ProjectDataDeliveryCloudwatchLogsOutput {
	return i.ToProjectDataDeliveryCloudwatchLogsOutputWithContext(context.Background())
}

func (i ProjectDataDeliveryCloudwatchLogsArgs) ToProjectDataDeliveryCloudwatchLogsOutputWithContext(ctx context.Context) ProjectDataDeliveryCloudwatchLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDataDeliveryCloudwatchLogsOutput)
}

func (i ProjectDataDeliveryCloudwatchLogsArgs) ToProjectDataDeliveryCloudwatchLogsPtrOutput() ProjectDataDeliveryCloudwatchLogsPtrOutput {
	return i.ToProjectDataDeliveryCloudwatchLogsPtrOutputWithContext(context.Background())
}

func (i ProjectDataDeliveryCloudwatchLogsArgs) ToProjectDataDeliveryCloudwatchLogsPtrOutputWithContext(ctx context.Context) ProjectDataDeliveryCloudwatchLogsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDataDeliveryCloudwatchLogsOutput).ToProjectDataDeliveryCloudwatchLogsPtrOutputWithContext(ctx)
}

// ProjectDataDeliveryCloudwatchLogsPtrInput is an input type that accepts ProjectDataDeliveryCloudwatchLogsArgs, ProjectDataDeliveryCloudwatchLogsPtr and ProjectDataDeliveryCloudwatchLogsPtrOutput values.
// You can construct a concrete instance of `ProjectDataDeliveryCloudwatchLogsPtrInput` via:
//
//	        ProjectDataDeliveryCloudwatchLogsArgs{...}
//
//	or:
//
//	        nil
type ProjectDataDeliveryCloudwatchLogsPtrInput interface {
	pulumi.Input

	ToProjectDataDeliveryCloudwatchLogsPtrOutput() ProjectDataDeliveryCloudwatchLogsPtrOutput
	ToProjectDataDeliveryCloudwatchLogsPtrOutputWithContext(context.Context) ProjectDataDeliveryCloudwatchLogsPtrOutput
}

type projectDataDeliveryCloudwatchLogsPtrType ProjectDataDeliveryCloudwatchLogsArgs

func ProjectDataDeliveryCloudwatchLogsPtr(v *ProjectDataDeliveryCloudwatchLogsArgs) ProjectDataDeliveryCloudwatchLogsPtrInput {
	return (*projectDataDeliveryCloudwatchLogsPtrType)(v)
}

func (*projectDataDeliveryCloudwatchLogsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectDataDeliveryCloudwatchLogs)(nil)).Elem()
}

func (i *projectDataDeliveryCloudwatchLogsPtrType) ToProjectDataDeliveryCloudwatchLogsPtrOutput() ProjectDataDeliveryCloudwatchLogsPtrOutput {
	return i.ToProjectDataDeliveryCloudwatchLogsPtrOutputWithContext(context.Background())
}

func (i *projectDataDeliveryCloudwatchLogsPtrType) ToProjectDataDeliveryCloudwatchLogsPtrOutputWithContext(ctx context.Context) ProjectDataDeliveryCloudwatchLogsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDataDeliveryCloudwatchLogsPtrOutput)
}

type ProjectDataDeliveryCloudwatchLogsOutput struct{ *pulumi.OutputState }

func (ProjectDataDeliveryCloudwatchLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectDataDeliveryCloudwatchLogs)(nil)).Elem()
}

func (o ProjectDataDeliveryCloudwatchLogsOutput) ToProjectDataDeliveryCloudwatchLogsOutput() ProjectDataDeliveryCloudwatchLogsOutput {
	return o
}

func (o ProjectDataDeliveryCloudwatchLogsOutput) ToProjectDataDeliveryCloudwatchLogsOutputWithContext(ctx context.Context) ProjectDataDeliveryCloudwatchLogsOutput {
	return o
}

func (o ProjectDataDeliveryCloudwatchLogsOutput) ToProjectDataDeliveryCloudwatchLogsPtrOutput() ProjectDataDeliveryCloudwatchLogsPtrOutput {
	return o.ToProjectDataDeliveryCloudwatchLogsPtrOutputWithContext(context.Background())
}

func (o ProjectDataDeliveryCloudwatchLogsOutput) ToProjectDataDeliveryCloudwatchLogsPtrOutputWithContext(ctx context.Context) ProjectDataDeliveryCloudwatchLogsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectDataDeliveryCloudwatchLogs) *ProjectDataDeliveryCloudwatchLogs {
		return &v
	}).(ProjectDataDeliveryCloudwatchLogsPtrOutput)
}

// The name of the log group where the project stores evaluation events.
//
// The `s3Destination` block supports the following arguments:
func (o ProjectDataDeliveryCloudwatchLogsOutput) LogGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectDataDeliveryCloudwatchLogs) *string { return v.LogGroup }).(pulumi.StringPtrOutput)
}

type ProjectDataDeliveryCloudwatchLogsPtrOutput struct{ *pulumi.OutputState }

func (ProjectDataDeliveryCloudwatchLogsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectDataDeliveryCloudwatchLogs)(nil)).Elem()
}

func (o ProjectDataDeliveryCloudwatchLogsPtrOutput) ToProjectDataDeliveryCloudwatchLogsPtrOutput() ProjectDataDeliveryCloudwatchLogsPtrOutput {
	return o
}

func (o ProjectDataDeliveryCloudwatchLogsPtrOutput) ToProjectDataDeliveryCloudwatchLogsPtrOutputWithContext(ctx context.Context) ProjectDataDeliveryCloudwatchLogsPtrOutput {
	return o
}

func (o ProjectDataDeliveryCloudwatchLogsPtrOutput) Elem() ProjectDataDeliveryCloudwatchLogsOutput {
	return o.ApplyT(func(v *ProjectDataDeliveryCloudwatchLogs) ProjectDataDeliveryCloudwatchLogs {
		if v != nil {
			return *v
		}
		var ret ProjectDataDeliveryCloudwatchLogs
		return ret
	}).(ProjectDataDeliveryCloudwatchLogsOutput)
}

// The name of the log group where the project stores evaluation events.
//
// The `s3Destination` block supports the following arguments:
func (o ProjectDataDeliveryCloudwatchLogsPtrOutput) LogGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectDataDeliveryCloudwatchLogs) *string {
		if v == nil {
			return nil
		}
		return v.LogGroup
	}).(pulumi.StringPtrOutput)
}

type ProjectDataDeliveryS3Destination struct {
	// The name of the bucket in which Evidently stores evaluation events.
	Bucket *string `pulumi:"bucket"`
	// The bucket prefix in which Evidently stores evaluation events.
	Prefix *string `pulumi:"prefix"`
}

// ProjectDataDeliveryS3DestinationInput is an input type that accepts ProjectDataDeliveryS3DestinationArgs and ProjectDataDeliveryS3DestinationOutput values.
// You can construct a concrete instance of `ProjectDataDeliveryS3DestinationInput` via:
//
//	ProjectDataDeliveryS3DestinationArgs{...}
type ProjectDataDeliveryS3DestinationInput interface {
	pulumi.Input

	ToProjectDataDeliveryS3DestinationOutput() ProjectDataDeliveryS3DestinationOutput
	ToProjectDataDeliveryS3DestinationOutputWithContext(context.Context) ProjectDataDeliveryS3DestinationOutput
}

type ProjectDataDeliveryS3DestinationArgs struct {
	// The name of the bucket in which Evidently stores evaluation events.
	Bucket pulumi.StringPtrInput `pulumi:"bucket"`
	// The bucket prefix in which Evidently stores evaluation events.
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
}

func (ProjectDataDeliveryS3DestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectDataDeliveryS3Destination)(nil)).Elem()
}

func (i ProjectDataDeliveryS3DestinationArgs) ToProjectDataDeliveryS3DestinationOutput() ProjectDataDeliveryS3DestinationOutput {
	return i.ToProjectDataDeliveryS3DestinationOutputWithContext(context.Background())
}

func (i ProjectDataDeliveryS3DestinationArgs) ToProjectDataDeliveryS3DestinationOutputWithContext(ctx context.Context) ProjectDataDeliveryS3DestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDataDeliveryS3DestinationOutput)
}

func (i ProjectDataDeliveryS3DestinationArgs) ToProjectDataDeliveryS3DestinationPtrOutput() ProjectDataDeliveryS3DestinationPtrOutput {
	return i.ToProjectDataDeliveryS3DestinationPtrOutputWithContext(context.Background())
}

func (i ProjectDataDeliveryS3DestinationArgs) ToProjectDataDeliveryS3DestinationPtrOutputWithContext(ctx context.Context) ProjectDataDeliveryS3DestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDataDeliveryS3DestinationOutput).ToProjectDataDeliveryS3DestinationPtrOutputWithContext(ctx)
}

// ProjectDataDeliveryS3DestinationPtrInput is an input type that accepts ProjectDataDeliveryS3DestinationArgs, ProjectDataDeliveryS3DestinationPtr and ProjectDataDeliveryS3DestinationPtrOutput values.
// You can construct a concrete instance of `ProjectDataDeliveryS3DestinationPtrInput` via:
//
//	        ProjectDataDeliveryS3DestinationArgs{...}
//
//	or:
//
//	        nil
type ProjectDataDeliveryS3DestinationPtrInput interface {
	pulumi.Input

	ToProjectDataDeliveryS3DestinationPtrOutput() ProjectDataDeliveryS3DestinationPtrOutput
	ToProjectDataDeliveryS3DestinationPtrOutputWithContext(context.Context) ProjectDataDeliveryS3DestinationPtrOutput
}

type projectDataDeliveryS3DestinationPtrType ProjectDataDeliveryS3DestinationArgs

func ProjectDataDeliveryS3DestinationPtr(v *ProjectDataDeliveryS3DestinationArgs) ProjectDataDeliveryS3DestinationPtrInput {
	return (*projectDataDeliveryS3DestinationPtrType)(v)
}

func (*projectDataDeliveryS3DestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectDataDeliveryS3Destination)(nil)).Elem()
}

func (i *projectDataDeliveryS3DestinationPtrType) ToProjectDataDeliveryS3DestinationPtrOutput() ProjectDataDeliveryS3DestinationPtrOutput {
	return i.ToProjectDataDeliveryS3DestinationPtrOutputWithContext(context.Background())
}

func (i *projectDataDeliveryS3DestinationPtrType) ToProjectDataDeliveryS3DestinationPtrOutputWithContext(ctx context.Context) ProjectDataDeliveryS3DestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDataDeliveryS3DestinationPtrOutput)
}

type ProjectDataDeliveryS3DestinationOutput struct{ *pulumi.OutputState }

func (ProjectDataDeliveryS3DestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectDataDeliveryS3Destination)(nil)).Elem()
}

func (o ProjectDataDeliveryS3DestinationOutput) ToProjectDataDeliveryS3DestinationOutput() ProjectDataDeliveryS3DestinationOutput {
	return o
}

func (o ProjectDataDeliveryS3DestinationOutput) ToProjectDataDeliveryS3DestinationOutputWithContext(ctx context.Context) ProjectDataDeliveryS3DestinationOutput {
	return o
}

func (o ProjectDataDeliveryS3DestinationOutput) ToProjectDataDeliveryS3DestinationPtrOutput() ProjectDataDeliveryS3DestinationPtrOutput {
	return o.ToProjectDataDeliveryS3DestinationPtrOutputWithContext(context.Background())
}

func (o ProjectDataDeliveryS3DestinationOutput) ToProjectDataDeliveryS3DestinationPtrOutputWithContext(ctx context.Context) ProjectDataDeliveryS3DestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectDataDeliveryS3Destination) *ProjectDataDeliveryS3Destination {
		return &v
	}).(ProjectDataDeliveryS3DestinationPtrOutput)
}

// The name of the bucket in which Evidently stores evaluation events.
func (o ProjectDataDeliveryS3DestinationOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectDataDeliveryS3Destination) *string { return v.Bucket }).(pulumi.StringPtrOutput)
}

// The bucket prefix in which Evidently stores evaluation events.
func (o ProjectDataDeliveryS3DestinationOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectDataDeliveryS3Destination) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

type ProjectDataDeliveryS3DestinationPtrOutput struct{ *pulumi.OutputState }

func (ProjectDataDeliveryS3DestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectDataDeliveryS3Destination)(nil)).Elem()
}

func (o ProjectDataDeliveryS3DestinationPtrOutput) ToProjectDataDeliveryS3DestinationPtrOutput() ProjectDataDeliveryS3DestinationPtrOutput {
	return o
}

func (o ProjectDataDeliveryS3DestinationPtrOutput) ToProjectDataDeliveryS3DestinationPtrOutputWithContext(ctx context.Context) ProjectDataDeliveryS3DestinationPtrOutput {
	return o
}

func (o ProjectDataDeliveryS3DestinationPtrOutput) Elem() ProjectDataDeliveryS3DestinationOutput {
	return o.ApplyT(func(v *ProjectDataDeliveryS3Destination) ProjectDataDeliveryS3Destination {
		if v != nil {
			return *v
		}
		var ret ProjectDataDeliveryS3Destination
		return ret
	}).(ProjectDataDeliveryS3DestinationOutput)
}

// The name of the bucket in which Evidently stores evaluation events.
func (o ProjectDataDeliveryS3DestinationPtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectDataDeliveryS3Destination) *string {
		if v == nil {
			return nil
		}
		return v.Bucket
	}).(pulumi.StringPtrOutput)
}

// The bucket prefix in which Evidently stores evaluation events.
func (o ProjectDataDeliveryS3DestinationPtrOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectDataDeliveryS3Destination) *string {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureEvaluationRuleInput)(nil)).Elem(), FeatureEvaluationRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureEvaluationRuleArrayInput)(nil)).Elem(), FeatureEvaluationRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureVariationInput)(nil)).Elem(), FeatureVariationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureVariationArrayInput)(nil)).Elem(), FeatureVariationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureVariationValueInput)(nil)).Elem(), FeatureVariationValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchExecutionInput)(nil)).Elem(), LaunchExecutionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchExecutionArrayInput)(nil)).Elem(), LaunchExecutionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchGroupInput)(nil)).Elem(), LaunchGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchGroupArrayInput)(nil)).Elem(), LaunchGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchMetricMonitorInput)(nil)).Elem(), LaunchMetricMonitorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchMetricMonitorArrayInput)(nil)).Elem(), LaunchMetricMonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchMetricMonitorMetricDefinitionInput)(nil)).Elem(), LaunchMetricMonitorMetricDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchScheduledSplitsConfigInput)(nil)).Elem(), LaunchScheduledSplitsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchScheduledSplitsConfigPtrInput)(nil)).Elem(), LaunchScheduledSplitsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchScheduledSplitsConfigStepInput)(nil)).Elem(), LaunchScheduledSplitsConfigStepArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchScheduledSplitsConfigStepArrayInput)(nil)).Elem(), LaunchScheduledSplitsConfigStepArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchScheduledSplitsConfigStepSegmentOverrideInput)(nil)).Elem(), LaunchScheduledSplitsConfigStepSegmentOverrideArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchScheduledSplitsConfigStepSegmentOverrideArrayInput)(nil)).Elem(), LaunchScheduledSplitsConfigStepSegmentOverrideArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectDataDeliveryInput)(nil)).Elem(), ProjectDataDeliveryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectDataDeliveryPtrInput)(nil)).Elem(), ProjectDataDeliveryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectDataDeliveryCloudwatchLogsInput)(nil)).Elem(), ProjectDataDeliveryCloudwatchLogsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectDataDeliveryCloudwatchLogsPtrInput)(nil)).Elem(), ProjectDataDeliveryCloudwatchLogsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectDataDeliveryS3DestinationInput)(nil)).Elem(), ProjectDataDeliveryS3DestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectDataDeliveryS3DestinationPtrInput)(nil)).Elem(), ProjectDataDeliveryS3DestinationArgs{})
	pulumi.RegisterOutputType(FeatureEvaluationRuleOutput{})
	pulumi.RegisterOutputType(FeatureEvaluationRuleArrayOutput{})
	pulumi.RegisterOutputType(FeatureVariationOutput{})
	pulumi.RegisterOutputType(FeatureVariationArrayOutput{})
	pulumi.RegisterOutputType(FeatureVariationValueOutput{})
	pulumi.RegisterOutputType(LaunchExecutionOutput{})
	pulumi.RegisterOutputType(LaunchExecutionArrayOutput{})
	pulumi.RegisterOutputType(LaunchGroupOutput{})
	pulumi.RegisterOutputType(LaunchGroupArrayOutput{})
	pulumi.RegisterOutputType(LaunchMetricMonitorOutput{})
	pulumi.RegisterOutputType(LaunchMetricMonitorArrayOutput{})
	pulumi.RegisterOutputType(LaunchMetricMonitorMetricDefinitionOutput{})
	pulumi.RegisterOutputType(LaunchScheduledSplitsConfigOutput{})
	pulumi.RegisterOutputType(LaunchScheduledSplitsConfigPtrOutput{})
	pulumi.RegisterOutputType(LaunchScheduledSplitsConfigStepOutput{})
	pulumi.RegisterOutputType(LaunchScheduledSplitsConfigStepArrayOutput{})
	pulumi.RegisterOutputType(LaunchScheduledSplitsConfigStepSegmentOverrideOutput{})
	pulumi.RegisterOutputType(LaunchScheduledSplitsConfigStepSegmentOverrideArrayOutput{})
	pulumi.RegisterOutputType(ProjectDataDeliveryOutput{})
	pulumi.RegisterOutputType(ProjectDataDeliveryPtrOutput{})
	pulumi.RegisterOutputType(ProjectDataDeliveryCloudwatchLogsOutput{})
	pulumi.RegisterOutputType(ProjectDataDeliveryCloudwatchLogsPtrOutput{})
	pulumi.RegisterOutputType(ProjectDataDeliveryS3DestinationOutput{})
	pulumi.RegisterOutputType(ProjectDataDeliveryS3DestinationPtrOutput{})
}
