// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package evidently

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a CloudWatch Evidently Feature resource.
//
// ## Example Usage
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/evidently"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := evidently.NewFeature(ctx, "example", &evidently.FeatureArgs{
//				Project:     pulumi.Any(aws_evidently_project.Example.Name),
//				Description: pulumi.String("example description"),
//				Variations: evidently.FeatureVariationArray{
//					&evidently.FeatureVariationArgs{
//						Name: pulumi.String("Variation1"),
//						Value: &evidently.FeatureVariationValueArgs{
//							StringValue: pulumi.String("example"),
//						},
//					},
//				},
//				Tags: pulumi.StringMap{
//					"Key1": pulumi.String("example Feature"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### With default variation
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/evidently"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := evidently.NewFeature(ctx, "example", &evidently.FeatureArgs{
//				Project:          pulumi.Any(aws_evidently_project.Example.Name),
//				DefaultVariation: pulumi.String("Variation2"),
//				Variations: evidently.FeatureVariationArray{
//					&evidently.FeatureVariationArgs{
//						Name: pulumi.String("Variation1"),
//						Value: &evidently.FeatureVariationValueArgs{
//							StringValue: pulumi.String("exampleval1"),
//						},
//					},
//					&evidently.FeatureVariationArgs{
//						Name: pulumi.String("Variation2"),
//						Value: &evidently.FeatureVariationValueArgs{
//							StringValue: pulumi.String("exampleval2"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### With entity overrides
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/evidently"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := evidently.NewFeature(ctx, "example", &evidently.FeatureArgs{
//				Project: pulumi.Any(aws_evidently_project.Example.Name),
//				EntityOverrides: pulumi.StringMap{
//					"test1": pulumi.String("Variation1"),
//				},
//				Variations: evidently.FeatureVariationArray{
//					&evidently.FeatureVariationArgs{
//						Name: pulumi.String("Variation1"),
//						Value: &evidently.FeatureVariationValueArgs{
//							StringValue: pulumi.String("exampleval1"),
//						},
//					},
//					&evidently.FeatureVariationArgs{
//						Name: pulumi.String("Variation2"),
//						Value: &evidently.FeatureVariationValueArgs{
//							StringValue: pulumi.String("exampleval2"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### With evaluation strategy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/evidently"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := evidently.NewFeature(ctx, "example", &evidently.FeatureArgs{
//				Project:            pulumi.Any(aws_evidently_project.Example.Name),
//				EvaluationStrategy: pulumi.String("ALL_RULES"),
//				EntityOverrides: pulumi.StringMap{
//					"test1": pulumi.String("Variation1"),
//				},
//				Variations: evidently.FeatureVariationArray{
//					&evidently.FeatureVariationArgs{
//						Name: pulumi.String("Variation1"),
//						Value: &evidently.FeatureVariationValueArgs{
//							StringValue: pulumi.String("exampleval1"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import CloudWatch Evidently Feature using the feature `name` and `name` or `arn` of the hosting CloudWatch Evidently Project separated by a `:`. For example:
//
// ```sh
//
//	$ pulumi import aws:evidently/feature:Feature example exampleFeatureName:arn:aws:evidently:us-east-1:123456789012:project/example
//
// ```
type Feature struct {
	pulumi.CustomResourceState

	// The ARN of the feature.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The date and time that the feature is created.
	CreatedTime pulumi.StringOutput `pulumi:"createdTime"`
	// The name of the variation to use as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature. This variation must also be listed in the `variations` structure. If you omit `defaultVariation`, the first variation listed in the `variations` structure is used as the default variation.
	DefaultVariation pulumi.StringOutput `pulumi:"defaultVariation"`
	// Specifies the description of the feature.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specify users that should always be served a specific variation of a feature. Each user is specified by a key-value pair . For each key, specify a user by entering their user ID, account ID, or some other identifier. For the value, specify the name of the variation that they are to be served.
	EntityOverrides pulumi.StringMapOutput `pulumi:"entityOverrides"`
	// One or more blocks that define the evaluation rules for the feature. Detailed below
	EvaluationRules FeatureEvaluationRuleArrayOutput `pulumi:"evaluationRules"`
	// Specify `ALL_RULES` to activate the traffic allocation specified by any ongoing launches or experiments. Specify `DEFAULT_VARIATION` to serve the default variation to all users instead.
	EvaluationStrategy pulumi.StringOutput `pulumi:"evaluationStrategy"`
	// The date and time that the feature was most recently updated.
	LastUpdatedTime pulumi.StringOutput `pulumi:"lastUpdatedTime"`
	// The name for the new feature. Minimum length of `1`. Maximum length of `127`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name or ARN of the project that is to contain the new feature.
	Project pulumi.StringOutput `pulumi:"project"`
	// The current state of the feature. Valid values are `AVAILABLE` and `UPDATING`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Tags to apply to the feature. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
	// Defines the type of value used to define the different feature variations. Valid Values: `STRING`, `LONG`, `DOUBLE`, `BOOLEAN`.
	ValueType pulumi.StringOutput `pulumi:"valueType"`
	// One or more blocks that contain the configuration of the feature's different variations. Detailed below
	Variations FeatureVariationArrayOutput `pulumi:"variations"`
}

// NewFeature registers a new resource with the given unique name, arguments, and options.
func NewFeature(ctx *pulumi.Context,
	name string, args *FeatureArgs, opts ...pulumi.ResourceOption) (*Feature, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Variations == nil {
		return nil, errors.New("invalid value for required argument 'Variations'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"tagsAll",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Feature
	err := ctx.RegisterResource("aws:evidently/feature:Feature", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFeature gets an existing Feature resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFeature(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FeatureState, opts ...pulumi.ResourceOption) (*Feature, error) {
	var resource Feature
	err := ctx.ReadResource("aws:evidently/feature:Feature", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Feature resources.
type featureState struct {
	// The ARN of the feature.
	Arn *string `pulumi:"arn"`
	// The date and time that the feature is created.
	CreatedTime *string `pulumi:"createdTime"`
	// The name of the variation to use as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature. This variation must also be listed in the `variations` structure. If you omit `defaultVariation`, the first variation listed in the `variations` structure is used as the default variation.
	DefaultVariation *string `pulumi:"defaultVariation"`
	// Specifies the description of the feature.
	Description *string `pulumi:"description"`
	// Specify users that should always be served a specific variation of a feature. Each user is specified by a key-value pair . For each key, specify a user by entering their user ID, account ID, or some other identifier. For the value, specify the name of the variation that they are to be served.
	EntityOverrides map[string]string `pulumi:"entityOverrides"`
	// One or more blocks that define the evaluation rules for the feature. Detailed below
	EvaluationRules []FeatureEvaluationRule `pulumi:"evaluationRules"`
	// Specify `ALL_RULES` to activate the traffic allocation specified by any ongoing launches or experiments. Specify `DEFAULT_VARIATION` to serve the default variation to all users instead.
	EvaluationStrategy *string `pulumi:"evaluationStrategy"`
	// The date and time that the feature was most recently updated.
	LastUpdatedTime *string `pulumi:"lastUpdatedTime"`
	// The name for the new feature. Minimum length of `1`. Maximum length of `127`.
	Name *string `pulumi:"name"`
	// The name or ARN of the project that is to contain the new feature.
	Project *string `pulumi:"project"`
	// The current state of the feature. Valid values are `AVAILABLE` and `UPDATING`.
	Status *string `pulumi:"status"`
	// Tags to apply to the feature. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Defines the type of value used to define the different feature variations. Valid Values: `STRING`, `LONG`, `DOUBLE`, `BOOLEAN`.
	ValueType *string `pulumi:"valueType"`
	// One or more blocks that contain the configuration of the feature's different variations. Detailed below
	Variations []FeatureVariation `pulumi:"variations"`
}

type FeatureState struct {
	// The ARN of the feature.
	Arn pulumi.StringPtrInput
	// The date and time that the feature is created.
	CreatedTime pulumi.StringPtrInput
	// The name of the variation to use as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature. This variation must also be listed in the `variations` structure. If you omit `defaultVariation`, the first variation listed in the `variations` structure is used as the default variation.
	DefaultVariation pulumi.StringPtrInput
	// Specifies the description of the feature.
	Description pulumi.StringPtrInput
	// Specify users that should always be served a specific variation of a feature. Each user is specified by a key-value pair . For each key, specify a user by entering their user ID, account ID, or some other identifier. For the value, specify the name of the variation that they are to be served.
	EntityOverrides pulumi.StringMapInput
	// One or more blocks that define the evaluation rules for the feature. Detailed below
	EvaluationRules FeatureEvaluationRuleArrayInput
	// Specify `ALL_RULES` to activate the traffic allocation specified by any ongoing launches or experiments. Specify `DEFAULT_VARIATION` to serve the default variation to all users instead.
	EvaluationStrategy pulumi.StringPtrInput
	// The date and time that the feature was most recently updated.
	LastUpdatedTime pulumi.StringPtrInput
	// The name for the new feature. Minimum length of `1`. Maximum length of `127`.
	Name pulumi.StringPtrInput
	// The name or ARN of the project that is to contain the new feature.
	Project pulumi.StringPtrInput
	// The current state of the feature. Valid values are `AVAILABLE` and `UPDATING`.
	Status pulumi.StringPtrInput
	// Tags to apply to the feature. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll pulumi.StringMapInput
	// Defines the type of value used to define the different feature variations. Valid Values: `STRING`, `LONG`, `DOUBLE`, `BOOLEAN`.
	ValueType pulumi.StringPtrInput
	// One or more blocks that contain the configuration of the feature's different variations. Detailed below
	Variations FeatureVariationArrayInput
}

func (FeatureState) ElementType() reflect.Type {
	return reflect.TypeOf((*featureState)(nil)).Elem()
}

type featureArgs struct {
	// The name of the variation to use as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature. This variation must also be listed in the `variations` structure. If you omit `defaultVariation`, the first variation listed in the `variations` structure is used as the default variation.
	DefaultVariation *string `pulumi:"defaultVariation"`
	// Specifies the description of the feature.
	Description *string `pulumi:"description"`
	// Specify users that should always be served a specific variation of a feature. Each user is specified by a key-value pair . For each key, specify a user by entering their user ID, account ID, or some other identifier. For the value, specify the name of the variation that they are to be served.
	EntityOverrides map[string]string `pulumi:"entityOverrides"`
	// Specify `ALL_RULES` to activate the traffic allocation specified by any ongoing launches or experiments. Specify `DEFAULT_VARIATION` to serve the default variation to all users instead.
	EvaluationStrategy *string `pulumi:"evaluationStrategy"`
	// The name for the new feature. Minimum length of `1`. Maximum length of `127`.
	Name *string `pulumi:"name"`
	// The name or ARN of the project that is to contain the new feature.
	Project string `pulumi:"project"`
	// Tags to apply to the feature. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// One or more blocks that contain the configuration of the feature's different variations. Detailed below
	Variations []FeatureVariation `pulumi:"variations"`
}

// The set of arguments for constructing a Feature resource.
type FeatureArgs struct {
	// The name of the variation to use as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature. This variation must also be listed in the `variations` structure. If you omit `defaultVariation`, the first variation listed in the `variations` structure is used as the default variation.
	DefaultVariation pulumi.StringPtrInput
	// Specifies the description of the feature.
	Description pulumi.StringPtrInput
	// Specify users that should always be served a specific variation of a feature. Each user is specified by a key-value pair . For each key, specify a user by entering their user ID, account ID, or some other identifier. For the value, specify the name of the variation that they are to be served.
	EntityOverrides pulumi.StringMapInput
	// Specify `ALL_RULES` to activate the traffic allocation specified by any ongoing launches or experiments. Specify `DEFAULT_VARIATION` to serve the default variation to all users instead.
	EvaluationStrategy pulumi.StringPtrInput
	// The name for the new feature. Minimum length of `1`. Maximum length of `127`.
	Name pulumi.StringPtrInput
	// The name or ARN of the project that is to contain the new feature.
	Project pulumi.StringInput
	// Tags to apply to the feature. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// One or more blocks that contain the configuration of the feature's different variations. Detailed below
	Variations FeatureVariationArrayInput
}

func (FeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*featureArgs)(nil)).Elem()
}

type FeatureInput interface {
	pulumi.Input

	ToFeatureOutput() FeatureOutput
	ToFeatureOutputWithContext(ctx context.Context) FeatureOutput
}

func (*Feature) ElementType() reflect.Type {
	return reflect.TypeOf((**Feature)(nil)).Elem()
}

func (i *Feature) ToFeatureOutput() FeatureOutput {
	return i.ToFeatureOutputWithContext(context.Background())
}

func (i *Feature) ToFeatureOutputWithContext(ctx context.Context) FeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureOutput)
}

func (i *Feature) ToOutput(ctx context.Context) pulumix.Output[*Feature] {
	return pulumix.Output[*Feature]{
		OutputState: i.ToFeatureOutputWithContext(ctx).OutputState,
	}
}

// FeatureArrayInput is an input type that accepts FeatureArray and FeatureArrayOutput values.
// You can construct a concrete instance of `FeatureArrayInput` via:
//
//	FeatureArray{ FeatureArgs{...} }
type FeatureArrayInput interface {
	pulumi.Input

	ToFeatureArrayOutput() FeatureArrayOutput
	ToFeatureArrayOutputWithContext(context.Context) FeatureArrayOutput
}

type FeatureArray []FeatureInput

func (FeatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Feature)(nil)).Elem()
}

func (i FeatureArray) ToFeatureArrayOutput() FeatureArrayOutput {
	return i.ToFeatureArrayOutputWithContext(context.Background())
}

func (i FeatureArray) ToFeatureArrayOutputWithContext(ctx context.Context) FeatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureArrayOutput)
}

func (i FeatureArray) ToOutput(ctx context.Context) pulumix.Output[[]*Feature] {
	return pulumix.Output[[]*Feature]{
		OutputState: i.ToFeatureArrayOutputWithContext(ctx).OutputState,
	}
}

// FeatureMapInput is an input type that accepts FeatureMap and FeatureMapOutput values.
// You can construct a concrete instance of `FeatureMapInput` via:
//
//	FeatureMap{ "key": FeatureArgs{...} }
type FeatureMapInput interface {
	pulumi.Input

	ToFeatureMapOutput() FeatureMapOutput
	ToFeatureMapOutputWithContext(context.Context) FeatureMapOutput
}

type FeatureMap map[string]FeatureInput

func (FeatureMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Feature)(nil)).Elem()
}

func (i FeatureMap) ToFeatureMapOutput() FeatureMapOutput {
	return i.ToFeatureMapOutputWithContext(context.Background())
}

func (i FeatureMap) ToFeatureMapOutputWithContext(ctx context.Context) FeatureMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureMapOutput)
}

func (i FeatureMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Feature] {
	return pulumix.Output[map[string]*Feature]{
		OutputState: i.ToFeatureMapOutputWithContext(ctx).OutputState,
	}
}

type FeatureOutput struct{ *pulumi.OutputState }

func (FeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Feature)(nil)).Elem()
}

func (o FeatureOutput) ToFeatureOutput() FeatureOutput {
	return o
}

func (o FeatureOutput) ToFeatureOutputWithContext(ctx context.Context) FeatureOutput {
	return o
}

func (o FeatureOutput) ToOutput(ctx context.Context) pulumix.Output[*Feature] {
	return pulumix.Output[*Feature]{
		OutputState: o.OutputState,
	}
}

// The ARN of the feature.
func (o FeatureOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Feature) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The date and time that the feature is created.
func (o FeatureOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Feature) pulumi.StringOutput { return v.CreatedTime }).(pulumi.StringOutput)
}

// The name of the variation to use as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature. This variation must also be listed in the `variations` structure. If you omit `defaultVariation`, the first variation listed in the `variations` structure is used as the default variation.
func (o FeatureOutput) DefaultVariation() pulumi.StringOutput {
	return o.ApplyT(func(v *Feature) pulumi.StringOutput { return v.DefaultVariation }).(pulumi.StringOutput)
}

// Specifies the description of the feature.
func (o FeatureOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Feature) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specify users that should always be served a specific variation of a feature. Each user is specified by a key-value pair . For each key, specify a user by entering their user ID, account ID, or some other identifier. For the value, specify the name of the variation that they are to be served.
func (o FeatureOutput) EntityOverrides() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Feature) pulumi.StringMapOutput { return v.EntityOverrides }).(pulumi.StringMapOutput)
}

// One or more blocks that define the evaluation rules for the feature. Detailed below
func (o FeatureOutput) EvaluationRules() FeatureEvaluationRuleArrayOutput {
	return o.ApplyT(func(v *Feature) FeatureEvaluationRuleArrayOutput { return v.EvaluationRules }).(FeatureEvaluationRuleArrayOutput)
}

// Specify `ALL_RULES` to activate the traffic allocation specified by any ongoing launches or experiments. Specify `DEFAULT_VARIATION` to serve the default variation to all users instead.
func (o FeatureOutput) EvaluationStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v *Feature) pulumi.StringOutput { return v.EvaluationStrategy }).(pulumi.StringOutput)
}

// The date and time that the feature was most recently updated.
func (o FeatureOutput) LastUpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Feature) pulumi.StringOutput { return v.LastUpdatedTime }).(pulumi.StringOutput)
}

// The name for the new feature. Minimum length of `1`. Maximum length of `127`.
func (o FeatureOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Feature) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name or ARN of the project that is to contain the new feature.
func (o FeatureOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Feature) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The current state of the feature. Valid values are `AVAILABLE` and `UPDATING`.
func (o FeatureOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Feature) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Tags to apply to the feature. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o FeatureOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Feature) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o FeatureOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Feature) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

// Defines the type of value used to define the different feature variations. Valid Values: `STRING`, `LONG`, `DOUBLE`, `BOOLEAN`.
func (o FeatureOutput) ValueType() pulumi.StringOutput {
	return o.ApplyT(func(v *Feature) pulumi.StringOutput { return v.ValueType }).(pulumi.StringOutput)
}

// One or more blocks that contain the configuration of the feature's different variations. Detailed below
func (o FeatureOutput) Variations() FeatureVariationArrayOutput {
	return o.ApplyT(func(v *Feature) FeatureVariationArrayOutput { return v.Variations }).(FeatureVariationArrayOutput)
}

type FeatureArrayOutput struct{ *pulumi.OutputState }

func (FeatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Feature)(nil)).Elem()
}

func (o FeatureArrayOutput) ToFeatureArrayOutput() FeatureArrayOutput {
	return o
}

func (o FeatureArrayOutput) ToFeatureArrayOutputWithContext(ctx context.Context) FeatureArrayOutput {
	return o
}

func (o FeatureArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Feature] {
	return pulumix.Output[[]*Feature]{
		OutputState: o.OutputState,
	}
}

func (o FeatureArrayOutput) Index(i pulumi.IntInput) FeatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Feature {
		return vs[0].([]*Feature)[vs[1].(int)]
	}).(FeatureOutput)
}

type FeatureMapOutput struct{ *pulumi.OutputState }

func (FeatureMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Feature)(nil)).Elem()
}

func (o FeatureMapOutput) ToFeatureMapOutput() FeatureMapOutput {
	return o
}

func (o FeatureMapOutput) ToFeatureMapOutputWithContext(ctx context.Context) FeatureMapOutput {
	return o
}

func (o FeatureMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Feature] {
	return pulumix.Output[map[string]*Feature]{
		OutputState: o.OutputState,
	}
}

func (o FeatureMapOutput) MapIndex(k pulumi.StringInput) FeatureOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Feature {
		return vs[0].(map[string]*Feature)[vs[1].(string)]
	}).(FeatureOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureInput)(nil)).Elem(), &Feature{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureArrayInput)(nil)).Elem(), FeatureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureMapInput)(nil)).Elem(), FeatureMap{})
	pulumi.RegisterOutputType(FeatureOutput{})
	pulumi.RegisterOutputType(FeatureArrayOutput{})
	pulumi.RegisterOutputType(FeatureMapOutput{})
}
