// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package elasticsearch

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Allows setting policy to an Elasticsearch domain while referencing domain attributes (e.g. ARN)
type DomainPolicy struct {
	s *pulumi.ResourceState
}

// NewDomainPolicy registers a new resource with the given unique name, arguments, and options.
func NewDomainPolicy(ctx *pulumi.Context,
	name string, args *DomainPolicyArgs, opts ...pulumi.ResourceOpt) (*DomainPolicy, error) {
	if args == nil || args.AccessPolicies == nil {
		return nil, errors.New("missing required argument 'AccessPolicies'")
	}
	if args == nil || args.DomainName == nil {
		return nil, errors.New("missing required argument 'DomainName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accessPolicies"] = nil
		inputs["domainName"] = nil
	} else {
		inputs["accessPolicies"] = args.AccessPolicies
		inputs["domainName"] = args.DomainName
	}
	s, err := ctx.RegisterResource("aws:elasticsearch/domainPolicy:DomainPolicy", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DomainPolicy{s: s}, nil
}

// GetDomainPolicy gets an existing DomainPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainPolicy(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DomainPolicyState, opts ...pulumi.ResourceOpt) (*DomainPolicy, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accessPolicies"] = state.AccessPolicies
		inputs["domainName"] = state.DomainName
	}
	s, err := ctx.ReadResource("aws:elasticsearch/domainPolicy:DomainPolicy", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DomainPolicy{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *DomainPolicy) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *DomainPolicy) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// IAM policy document specifying the access policies for the domain
func (r *DomainPolicy) AccessPolicies() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["accessPolicies"])
}

// Name of the domain.
func (r *DomainPolicy) DomainName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["domainName"])
}

// Input properties used for looking up and filtering DomainPolicy resources.
type DomainPolicyState struct {
	// IAM policy document specifying the access policies for the domain
	AccessPolicies interface{}
	// Name of the domain.
	DomainName interface{}
}

// The set of arguments for constructing a DomainPolicy resource.
type DomainPolicyArgs struct {
	// IAM policy document specifying the access policies for the domain
	AccessPolicies interface{}
	// Name of the domain.
	DomainName interface{}
}
