// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package elasticsearch

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Allows setting policy to an Elasticsearch domain while referencing domain attributes (e.g. ARN)
type DomainPolicy struct {
	pulumi.CustomResourceState

	// IAM policy document specifying the access policies for the domain
	AccessPolicies pulumi.StringOutput `pulumi:"accessPolicies"`
	// Name of the domain.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
}

// NewDomainPolicy registers a new resource with the given unique name, arguments, and options.
func NewDomainPolicy(ctx *pulumi.Context,
	name string, args *DomainPolicyArgs, opts ...pulumi.ResourceOption) (*DomainPolicy, error) {
	if args == nil || args.AccessPolicies == nil {
		return nil, errors.New("missing required argument 'AccessPolicies'")
	}
	if args == nil || args.DomainName == nil {
		return nil, errors.New("missing required argument 'DomainName'")
	}
	if args == nil {
		args = &DomainPolicyArgs{}
	}
	var resource DomainPolicy
	err := ctx.RegisterResource("aws:elasticsearch/domainPolicy:DomainPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainPolicy gets an existing DomainPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainPolicyState, opts ...pulumi.ResourceOption) (*DomainPolicy, error) {
	var resource DomainPolicy
	err := ctx.ReadResource("aws:elasticsearch/domainPolicy:DomainPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainPolicy resources.
type domainPolicyState struct {
	// IAM policy document specifying the access policies for the domain
	AccessPolicies *string `pulumi:"accessPolicies"`
	// Name of the domain.
	DomainName *string `pulumi:"domainName"`
}

type DomainPolicyState struct {
	// IAM policy document specifying the access policies for the domain
	AccessPolicies pulumi.StringPtrInput
	// Name of the domain.
	DomainName pulumi.StringPtrInput
}

func (DomainPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainPolicyState)(nil)).Elem()
}

type domainPolicyArgs struct {
	// IAM policy document specifying the access policies for the domain
	AccessPolicies interface{} `pulumi:"accessPolicies"`
	// Name of the domain.
	DomainName string `pulumi:"domainName"`
}

// The set of arguments for constructing a DomainPolicy resource.
type DomainPolicyArgs struct {
	// IAM policy document specifying the access policies for the domain
	AccessPolicies pulumi.Input
	// Name of the domain.
	DomainName pulumi.StringInput
}

func (DomainPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainPolicyArgs)(nil)).Elem()
}
