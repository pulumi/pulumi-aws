// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datapipeline

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a DataPipeline Pipeline Definition resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/datapipeline"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datapipeline.NewPipeline(ctx, "default", nil)
//			if err != nil {
//				return err
//			}
//			_, err = datapipeline.NewPipelineDefinition(ctx, "example", &datapipeline.PipelineDefinitionArgs{
//				PipelineId: _default.ID(),
//				PipelineObjects: datapipeline.PipelineDefinitionPipelineObjectArray{
//					&datapipeline.PipelineDefinitionPipelineObjectArgs{
//						Id:   pulumi.String("Default"),
//						Name: pulumi.String("Default"),
//						Fields: datapipeline.PipelineDefinitionPipelineObjectFieldArray{
//							&datapipeline.PipelineDefinitionPipelineObjectFieldArgs{
//								Key:         pulumi.String("workerGroup"),
//								StringValue: pulumi.String("workerGroup"),
//							},
//						},
//					},
//					&datapipeline.PipelineDefinitionPipelineObjectArgs{
//						Id:   pulumi.String("Schedule"),
//						Name: pulumi.String("Schedule"),
//						Fields: datapipeline.PipelineDefinitionPipelineObjectFieldArray{
//							&datapipeline.PipelineDefinitionPipelineObjectFieldArgs{
//								Key:         pulumi.String("startDateTime"),
//								StringValue: pulumi.String("2012-12-12T00:00:00"),
//							},
//							&datapipeline.PipelineDefinitionPipelineObjectFieldArgs{
//								Key:         pulumi.String("type"),
//								StringValue: pulumi.String("Schedule"),
//							},
//							&datapipeline.PipelineDefinitionPipelineObjectFieldArgs{
//								Key:         pulumi.String("period"),
//								StringValue: pulumi.String("1 hour"),
//							},
//							&datapipeline.PipelineDefinitionPipelineObjectFieldArgs{
//								Key:         pulumi.String("endDateTime"),
//								StringValue: pulumi.String("2012-12-21T18:00:00"),
//							},
//						},
//					},
//					&datapipeline.PipelineDefinitionPipelineObjectArgs{
//						Id:   pulumi.String("SayHello"),
//						Name: pulumi.String("SayHello"),
//						Fields: datapipeline.PipelineDefinitionPipelineObjectFieldArray{
//							&datapipeline.PipelineDefinitionPipelineObjectFieldArgs{
//								Key:         pulumi.String("type"),
//								StringValue: pulumi.String("ShellCommandActivity"),
//							},
//							&datapipeline.PipelineDefinitionPipelineObjectFieldArgs{
//								Key:         pulumi.String("command"),
//								StringValue: pulumi.String("echo hello"),
//							},
//							&datapipeline.PipelineDefinitionPipelineObjectFieldArgs{
//								Key:         pulumi.String("parent"),
//								StringValue: pulumi.String("Default"),
//							},
//							&datapipeline.PipelineDefinitionPipelineObjectFieldArgs{
//								Key:         pulumi.String("schedule"),
//								StringValue: pulumi.String("Schedule"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import `aws_datapipeline_pipeline_definition` using the id. For example:
//
// ```sh
//
//	$ pulumi import aws:datapipeline/pipelineDefinition:PipelineDefinition example df-1234567890
//
// ```
type PipelineDefinition struct {
	pulumi.CustomResourceState

	// Configuration block for the parameter objects used in the pipeline definition. See below
	ParameterObjects PipelineDefinitionParameterObjectArrayOutput `pulumi:"parameterObjects"`
	// Configuration block for the parameter values used in the pipeline definition. See below
	ParameterValues PipelineDefinitionParameterValueArrayOutput `pulumi:"parameterValues"`
	// ID of the pipeline.
	PipelineId pulumi.StringOutput `pulumi:"pipelineId"`
	// Configuration block for the objects that define the pipeline. See below
	//
	// The following arguments are optional:
	PipelineObjects PipelineDefinitionPipelineObjectArrayOutput `pulumi:"pipelineObjects"`
}

// NewPipelineDefinition registers a new resource with the given unique name, arguments, and options.
func NewPipelineDefinition(ctx *pulumi.Context,
	name string, args *PipelineDefinitionArgs, opts ...pulumi.ResourceOption) (*PipelineDefinition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PipelineId == nil {
		return nil, errors.New("invalid value for required argument 'PipelineId'")
	}
	if args.PipelineObjects == nil {
		return nil, errors.New("invalid value for required argument 'PipelineObjects'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PipelineDefinition
	err := ctx.RegisterResource("aws:datapipeline/pipelineDefinition:PipelineDefinition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPipelineDefinition gets an existing PipelineDefinition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPipelineDefinition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PipelineDefinitionState, opts ...pulumi.ResourceOption) (*PipelineDefinition, error) {
	var resource PipelineDefinition
	err := ctx.ReadResource("aws:datapipeline/pipelineDefinition:PipelineDefinition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PipelineDefinition resources.
type pipelineDefinitionState struct {
	// Configuration block for the parameter objects used in the pipeline definition. See below
	ParameterObjects []PipelineDefinitionParameterObject `pulumi:"parameterObjects"`
	// Configuration block for the parameter values used in the pipeline definition. See below
	ParameterValues []PipelineDefinitionParameterValue `pulumi:"parameterValues"`
	// ID of the pipeline.
	PipelineId *string `pulumi:"pipelineId"`
	// Configuration block for the objects that define the pipeline. See below
	//
	// The following arguments are optional:
	PipelineObjects []PipelineDefinitionPipelineObject `pulumi:"pipelineObjects"`
}

type PipelineDefinitionState struct {
	// Configuration block for the parameter objects used in the pipeline definition. See below
	ParameterObjects PipelineDefinitionParameterObjectArrayInput
	// Configuration block for the parameter values used in the pipeline definition. See below
	ParameterValues PipelineDefinitionParameterValueArrayInput
	// ID of the pipeline.
	PipelineId pulumi.StringPtrInput
	// Configuration block for the objects that define the pipeline. See below
	//
	// The following arguments are optional:
	PipelineObjects PipelineDefinitionPipelineObjectArrayInput
}

func (PipelineDefinitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineDefinitionState)(nil)).Elem()
}

type pipelineDefinitionArgs struct {
	// Configuration block for the parameter objects used in the pipeline definition. See below
	ParameterObjects []PipelineDefinitionParameterObject `pulumi:"parameterObjects"`
	// Configuration block for the parameter values used in the pipeline definition. See below
	ParameterValues []PipelineDefinitionParameterValue `pulumi:"parameterValues"`
	// ID of the pipeline.
	PipelineId string `pulumi:"pipelineId"`
	// Configuration block for the objects that define the pipeline. See below
	//
	// The following arguments are optional:
	PipelineObjects []PipelineDefinitionPipelineObject `pulumi:"pipelineObjects"`
}

// The set of arguments for constructing a PipelineDefinition resource.
type PipelineDefinitionArgs struct {
	// Configuration block for the parameter objects used in the pipeline definition. See below
	ParameterObjects PipelineDefinitionParameterObjectArrayInput
	// Configuration block for the parameter values used in the pipeline definition. See below
	ParameterValues PipelineDefinitionParameterValueArrayInput
	// ID of the pipeline.
	PipelineId pulumi.StringInput
	// Configuration block for the objects that define the pipeline. See below
	//
	// The following arguments are optional:
	PipelineObjects PipelineDefinitionPipelineObjectArrayInput
}

func (PipelineDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineDefinitionArgs)(nil)).Elem()
}

type PipelineDefinitionInput interface {
	pulumi.Input

	ToPipelineDefinitionOutput() PipelineDefinitionOutput
	ToPipelineDefinitionOutputWithContext(ctx context.Context) PipelineDefinitionOutput
}

func (*PipelineDefinition) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineDefinition)(nil)).Elem()
}

func (i *PipelineDefinition) ToPipelineDefinitionOutput() PipelineDefinitionOutput {
	return i.ToPipelineDefinitionOutputWithContext(context.Background())
}

func (i *PipelineDefinition) ToPipelineDefinitionOutputWithContext(ctx context.Context) PipelineDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineDefinitionOutput)
}

// PipelineDefinitionArrayInput is an input type that accepts PipelineDefinitionArray and PipelineDefinitionArrayOutput values.
// You can construct a concrete instance of `PipelineDefinitionArrayInput` via:
//
//	PipelineDefinitionArray{ PipelineDefinitionArgs{...} }
type PipelineDefinitionArrayInput interface {
	pulumi.Input

	ToPipelineDefinitionArrayOutput() PipelineDefinitionArrayOutput
	ToPipelineDefinitionArrayOutputWithContext(context.Context) PipelineDefinitionArrayOutput
}

type PipelineDefinitionArray []PipelineDefinitionInput

func (PipelineDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PipelineDefinition)(nil)).Elem()
}

func (i PipelineDefinitionArray) ToPipelineDefinitionArrayOutput() PipelineDefinitionArrayOutput {
	return i.ToPipelineDefinitionArrayOutputWithContext(context.Background())
}

func (i PipelineDefinitionArray) ToPipelineDefinitionArrayOutputWithContext(ctx context.Context) PipelineDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineDefinitionArrayOutput)
}

// PipelineDefinitionMapInput is an input type that accepts PipelineDefinitionMap and PipelineDefinitionMapOutput values.
// You can construct a concrete instance of `PipelineDefinitionMapInput` via:
//
//	PipelineDefinitionMap{ "key": PipelineDefinitionArgs{...} }
type PipelineDefinitionMapInput interface {
	pulumi.Input

	ToPipelineDefinitionMapOutput() PipelineDefinitionMapOutput
	ToPipelineDefinitionMapOutputWithContext(context.Context) PipelineDefinitionMapOutput
}

type PipelineDefinitionMap map[string]PipelineDefinitionInput

func (PipelineDefinitionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PipelineDefinition)(nil)).Elem()
}

func (i PipelineDefinitionMap) ToPipelineDefinitionMapOutput() PipelineDefinitionMapOutput {
	return i.ToPipelineDefinitionMapOutputWithContext(context.Background())
}

func (i PipelineDefinitionMap) ToPipelineDefinitionMapOutputWithContext(ctx context.Context) PipelineDefinitionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineDefinitionMapOutput)
}

type PipelineDefinitionOutput struct{ *pulumi.OutputState }

func (PipelineDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineDefinition)(nil)).Elem()
}

func (o PipelineDefinitionOutput) ToPipelineDefinitionOutput() PipelineDefinitionOutput {
	return o
}

func (o PipelineDefinitionOutput) ToPipelineDefinitionOutputWithContext(ctx context.Context) PipelineDefinitionOutput {
	return o
}

// Configuration block for the parameter objects used in the pipeline definition. See below
func (o PipelineDefinitionOutput) ParameterObjects() PipelineDefinitionParameterObjectArrayOutput {
	return o.ApplyT(func(v *PipelineDefinition) PipelineDefinitionParameterObjectArrayOutput { return v.ParameterObjects }).(PipelineDefinitionParameterObjectArrayOutput)
}

// Configuration block for the parameter values used in the pipeline definition. See below
func (o PipelineDefinitionOutput) ParameterValues() PipelineDefinitionParameterValueArrayOutput {
	return o.ApplyT(func(v *PipelineDefinition) PipelineDefinitionParameterValueArrayOutput { return v.ParameterValues }).(PipelineDefinitionParameterValueArrayOutput)
}

// ID of the pipeline.
func (o PipelineDefinitionOutput) PipelineId() pulumi.StringOutput {
	return o.ApplyT(func(v *PipelineDefinition) pulumi.StringOutput { return v.PipelineId }).(pulumi.StringOutput)
}

// Configuration block for the objects that define the pipeline. See below
//
// The following arguments are optional:
func (o PipelineDefinitionOutput) PipelineObjects() PipelineDefinitionPipelineObjectArrayOutput {
	return o.ApplyT(func(v *PipelineDefinition) PipelineDefinitionPipelineObjectArrayOutput { return v.PipelineObjects }).(PipelineDefinitionPipelineObjectArrayOutput)
}

type PipelineDefinitionArrayOutput struct{ *pulumi.OutputState }

func (PipelineDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PipelineDefinition)(nil)).Elem()
}

func (o PipelineDefinitionArrayOutput) ToPipelineDefinitionArrayOutput() PipelineDefinitionArrayOutput {
	return o
}

func (o PipelineDefinitionArrayOutput) ToPipelineDefinitionArrayOutputWithContext(ctx context.Context) PipelineDefinitionArrayOutput {
	return o
}

func (o PipelineDefinitionArrayOutput) Index(i pulumi.IntInput) PipelineDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PipelineDefinition {
		return vs[0].([]*PipelineDefinition)[vs[1].(int)]
	}).(PipelineDefinitionOutput)
}

type PipelineDefinitionMapOutput struct{ *pulumi.OutputState }

func (PipelineDefinitionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PipelineDefinition)(nil)).Elem()
}

func (o PipelineDefinitionMapOutput) ToPipelineDefinitionMapOutput() PipelineDefinitionMapOutput {
	return o
}

func (o PipelineDefinitionMapOutput) ToPipelineDefinitionMapOutputWithContext(ctx context.Context) PipelineDefinitionMapOutput {
	return o
}

func (o PipelineDefinitionMapOutput) MapIndex(k pulumi.StringInput) PipelineDefinitionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PipelineDefinition {
		return vs[0].(map[string]*PipelineDefinition)[vs[1].(string)]
	}).(PipelineDefinitionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineDefinitionInput)(nil)).Elem(), &PipelineDefinition{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineDefinitionArrayInput)(nil)).Elem(), PipelineDefinitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineDefinitionMapInput)(nil)).Elem(), PipelineDefinitionMap{})
	pulumi.RegisterOutputType(PipelineDefinitionOutput{})
	pulumi.RegisterOutputType(PipelineDefinitionArrayOutput{})
	pulumi.RegisterOutputType(PipelineDefinitionMapOutput{})
}
