// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticache

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Information about a single ElastiCache Reserved Cache Node Offering.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/elasticache"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := elasticache.GetReservedCacheNodeOffering(ctx, &elasticache.GetReservedCacheNodeOfferingArgs{
//				CacheNodeType:      "cache.t4g.small",
//				Duration:           "P1Y",
//				OfferingType:       "No Upfront",
//				ProductDescription: "redis",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetReservedCacheNodeOffering(ctx *pulumi.Context, args *GetReservedCacheNodeOfferingArgs, opts ...pulumi.InvokeOption) (*GetReservedCacheNodeOfferingResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetReservedCacheNodeOfferingResult
	err := ctx.Invoke("aws:elasticache/getReservedCacheNodeOffering:getReservedCacheNodeOffering", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getReservedCacheNodeOffering.
type GetReservedCacheNodeOfferingArgs struct {
	// Node type for the reserved cache node.
	// See AWS documentation for information on [supported node types for Redis](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html) and [guidance on selecting node types for Redis](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes-select-size.html).
	// See AWS documentation for information on [supported node types for Memcached](https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html) and [guidance on selecting node types for Memcached](https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/nodes-select-size.html).
	CacheNodeType string `pulumi:"cacheNodeType"`
	// Duration of the reservation in RFC3339 duration format.
	// Valid values are `P1Y` (one year) and `P3Y` (three years).
	Duration string `pulumi:"duration"`
	// Offering type of this reserved cache node.
	// For the latest generation of nodes (e.g. M5, R5, T4 and newer) valid values are `No Upfront`, `Partial Upfront`, and `All Upfront`.
	// For other current generation nodes (i.e. T2, M3, M4, R3, or R4) the only valid value is `Heavy Utilization`.
	// For previous generation modes (i.e. T1, M1, M2, or C1) valid values are `Heavy Utilization`, `Medium Utilization`, and `Light Utilization`.
	OfferingType string `pulumi:"offeringType"`
	// Engine type for the reserved cache node.
	// Valid values are `redis` and `memcached`.
	ProductDescription string `pulumi:"productDescription"`
}

// A collection of values returned by getReservedCacheNodeOffering.
type GetReservedCacheNodeOfferingResult struct {
	CacheNodeType string `pulumi:"cacheNodeType"`
	Duration      string `pulumi:"duration"`
	// Fixed price charged for this reserved cache node.
	FixedPrice float64 `pulumi:"fixedPrice"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique identifier for the reservation.
	OfferingId         string `pulumi:"offeringId"`
	OfferingType       string `pulumi:"offeringType"`
	ProductDescription string `pulumi:"productDescription"`
}

func GetReservedCacheNodeOfferingOutput(ctx *pulumi.Context, args GetReservedCacheNodeOfferingOutputArgs, opts ...pulumi.InvokeOption) GetReservedCacheNodeOfferingResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetReservedCacheNodeOfferingResultOutput, error) {
			args := v.(GetReservedCacheNodeOfferingArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetReservedCacheNodeOfferingResult
			secret, err := ctx.InvokePackageRaw("aws:elasticache/getReservedCacheNodeOffering:getReservedCacheNodeOffering", args, &rv, "", opts...)
			if err != nil {
				return GetReservedCacheNodeOfferingResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetReservedCacheNodeOfferingResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetReservedCacheNodeOfferingResultOutput), nil
			}
			return output, nil
		}).(GetReservedCacheNodeOfferingResultOutput)
}

// A collection of arguments for invoking getReservedCacheNodeOffering.
type GetReservedCacheNodeOfferingOutputArgs struct {
	// Node type for the reserved cache node.
	// See AWS documentation for information on [supported node types for Redis](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html) and [guidance on selecting node types for Redis](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes-select-size.html).
	// See AWS documentation for information on [supported node types for Memcached](https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html) and [guidance on selecting node types for Memcached](https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/nodes-select-size.html).
	CacheNodeType pulumi.StringInput `pulumi:"cacheNodeType"`
	// Duration of the reservation in RFC3339 duration format.
	// Valid values are `P1Y` (one year) and `P3Y` (three years).
	Duration pulumi.StringInput `pulumi:"duration"`
	// Offering type of this reserved cache node.
	// For the latest generation of nodes (e.g. M5, R5, T4 and newer) valid values are `No Upfront`, `Partial Upfront`, and `All Upfront`.
	// For other current generation nodes (i.e. T2, M3, M4, R3, or R4) the only valid value is `Heavy Utilization`.
	// For previous generation modes (i.e. T1, M1, M2, or C1) valid values are `Heavy Utilization`, `Medium Utilization`, and `Light Utilization`.
	OfferingType pulumi.StringInput `pulumi:"offeringType"`
	// Engine type for the reserved cache node.
	// Valid values are `redis` and `memcached`.
	ProductDescription pulumi.StringInput `pulumi:"productDescription"`
}

func (GetReservedCacheNodeOfferingOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReservedCacheNodeOfferingArgs)(nil)).Elem()
}

// A collection of values returned by getReservedCacheNodeOffering.
type GetReservedCacheNodeOfferingResultOutput struct{ *pulumi.OutputState }

func (GetReservedCacheNodeOfferingResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReservedCacheNodeOfferingResult)(nil)).Elem()
}

func (o GetReservedCacheNodeOfferingResultOutput) ToGetReservedCacheNodeOfferingResultOutput() GetReservedCacheNodeOfferingResultOutput {
	return o
}

func (o GetReservedCacheNodeOfferingResultOutput) ToGetReservedCacheNodeOfferingResultOutputWithContext(ctx context.Context) GetReservedCacheNodeOfferingResultOutput {
	return o
}

func (o GetReservedCacheNodeOfferingResultOutput) CacheNodeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetReservedCacheNodeOfferingResult) string { return v.CacheNodeType }).(pulumi.StringOutput)
}

func (o GetReservedCacheNodeOfferingResultOutput) Duration() pulumi.StringOutput {
	return o.ApplyT(func(v GetReservedCacheNodeOfferingResult) string { return v.Duration }).(pulumi.StringOutput)
}

// Fixed price charged for this reserved cache node.
func (o GetReservedCacheNodeOfferingResultOutput) FixedPrice() pulumi.Float64Output {
	return o.ApplyT(func(v GetReservedCacheNodeOfferingResult) float64 { return v.FixedPrice }).(pulumi.Float64Output)
}

// The provider-assigned unique ID for this managed resource.
func (o GetReservedCacheNodeOfferingResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetReservedCacheNodeOfferingResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique identifier for the reservation.
func (o GetReservedCacheNodeOfferingResultOutput) OfferingId() pulumi.StringOutput {
	return o.ApplyT(func(v GetReservedCacheNodeOfferingResult) string { return v.OfferingId }).(pulumi.StringOutput)
}

func (o GetReservedCacheNodeOfferingResultOutput) OfferingType() pulumi.StringOutput {
	return o.ApplyT(func(v GetReservedCacheNodeOfferingResult) string { return v.OfferingType }).(pulumi.StringOutput)
}

func (o GetReservedCacheNodeOfferingResultOutput) ProductDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetReservedCacheNodeOfferingResult) string { return v.ProductDescription }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetReservedCacheNodeOfferingResultOutput{})
}
