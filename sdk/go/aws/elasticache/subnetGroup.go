// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package elasticache

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an ElastiCache Subnet Group resource.
// 
// ~> **NOTE:** ElastiCache Subnet Groups are only for use when working with an
// ElastiCache cluster **inside** of a VPC. If you are on EC2 Classic, see the
// ElastiCache Security Group resource.
type SubnetGroup struct {
	s *pulumi.ResourceState
}

// NewSubnetGroup registers a new resource with the given unique name, arguments, and options.
func NewSubnetGroup(ctx *pulumi.Context,
	name string, args *SubnetGroupArgs, opts ...pulumi.ResourceOpt) (*SubnetGroup, error) {
	if args == nil || args.SubnetIds == nil {
		return nil, errors.New("missing required argument 'SubnetIds'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["name"] = nil
		inputs["subnetIds"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["name"] = args.Name
		inputs["subnetIds"] = args.SubnetIds
	}
	s, err := ctx.RegisterResource("aws:elasticache/subnetGroup:SubnetGroup", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SubnetGroup{s: s}, nil
}

// GetSubnetGroup gets an existing SubnetGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnetGroup(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SubnetGroupState, opts ...pulumi.ResourceOpt) (*SubnetGroup, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["name"] = state.Name
		inputs["subnetIds"] = state.SubnetIds
	}
	s, err := ctx.ReadResource("aws:elasticache/subnetGroup:SubnetGroup", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SubnetGroup{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SubnetGroup) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SubnetGroup) ID() *pulumi.IDOutput {
	return r.s.ID
}

// Description for the cache subnet group. Defaults to "Managed by Terraform".
func (r *SubnetGroup) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// Name for the cache subnet group. Elasticache converts this name to lowercase.
func (r *SubnetGroup) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// List of VPC Subnet IDs for the cache subnet group
func (r *SubnetGroup) SubnetIds() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["subnetIds"])
}

// Input properties used for looking up and filtering SubnetGroup resources.
type SubnetGroupState struct {
	// Description for the cache subnet group. Defaults to "Managed by Terraform".
	Description interface{}
	// Name for the cache subnet group. Elasticache converts this name to lowercase.
	Name interface{}
	// List of VPC Subnet IDs for the cache subnet group
	SubnetIds interface{}
}

// The set of arguments for constructing a SubnetGroup resource.
type SubnetGroupArgs struct {
	// Description for the cache subnet group. Defaults to "Managed by Terraform".
	Description interface{}
	// Name for the cache subnet group. Elasticache converts this name to lowercase.
	Name interface{}
	// List of VPC Subnet IDs for the cache subnet group
	SubnetIds interface{}
}
