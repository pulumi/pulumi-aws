// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticache

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an ElastiCache Reserved Cache Node.
//
// > **NOTE:** Once created, a reservation is valid for the `duration` of the provided `offeringId` and cannot be deleted. Performing a `destroy` will only remove the resource from state. For more information see [ElastiCache Reserved Nodes Documentation](https://aws.amazon.com/elasticache/reserved-cache-nodes/) and [PurchaseReservedCacheNodesOffering](https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_PurchaseReservedCacheNodesOffering.html).
//
// > **NOTE:** Due to the expense of testing this resource, we provide it as best effort. If you find it useful, and have the ability to help test or notice issues, consider reaching out to us on GitHub.
//
// ## Import
//
// Using `pulumi import`, import ElastiCache Reserved Cache Node using the `id`. For example:
//
// ```sh
// $ pulumi import aws:elasticache/reservedCacheNode:ReservedCacheNode example CustomReservationID
// ```
type ReservedCacheNode struct {
	pulumi.CustomResourceState

	// ARN for the reserved cache node.
	Arn            pulumi.StringOutput  `pulumi:"arn"`
	CacheNodeCount pulumi.Float64Output `pulumi:"cacheNodeCount"`
	// Node type for the reserved cache nodes.
	CacheNodeType pulumi.StringOutput `pulumi:"cacheNodeType"`
	// Duration of the reservation as an RFC3339 duration.
	Duration pulumi.StringOutput `pulumi:"duration"`
	// Fixed price charged for this reserved cache node.
	FixedPrice pulumi.Float64Output `pulumi:"fixedPrice"`
	// Offering type of this reserved cache node.
	OfferingType pulumi.StringOutput `pulumi:"offeringType"`
	// Engine type for the reserved cache node.
	ProductDescription pulumi.StringOutput `pulumi:"productDescription"`
	// Recurring price charged to run this reserved cache node.
	RecurringCharges ReservedCacheNodeRecurringChargeArrayOutput `pulumi:"recurringCharges"`
	// ID of the reserved cache node offering to purchase.
	// To determine an `reservedCacheNodesOfferingId`, see the `elasticache.getReservedCacheNodeOffering` data source.
	//
	// The following arguments are optional:
	ReservedCacheNodesOfferingId pulumi.StringOutput `pulumi:"reservedCacheNodesOfferingId"`
	// Time the reservation started.
	StartTime pulumi.StringOutput `pulumi:"startTime"`
	// State of the reserved cache node.
	State pulumi.StringOutput `pulumi:"state"`
	// Map of tags to assign to the reservation. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapOutput             `pulumi:"tagsAll"`
	Timeouts ReservedCacheNodeTimeoutsPtrOutput `pulumi:"timeouts"`
	// Hourly price charged for this reserved cache node.
	UsagePrice pulumi.Float64Output `pulumi:"usagePrice"`
}

// NewReservedCacheNode registers a new resource with the given unique name, arguments, and options.
func NewReservedCacheNode(ctx *pulumi.Context,
	name string, args *ReservedCacheNodeArgs, opts ...pulumi.ResourceOption) (*ReservedCacheNode, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ReservedCacheNodesOfferingId == nil {
		return nil, errors.New("invalid value for required argument 'ReservedCacheNodesOfferingId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ReservedCacheNode
	err := ctx.RegisterResource("aws:elasticache/reservedCacheNode:ReservedCacheNode", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReservedCacheNode gets an existing ReservedCacheNode resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReservedCacheNode(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReservedCacheNodeState, opts ...pulumi.ResourceOption) (*ReservedCacheNode, error) {
	var resource ReservedCacheNode
	err := ctx.ReadResource("aws:elasticache/reservedCacheNode:ReservedCacheNode", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReservedCacheNode resources.
type reservedCacheNodeState struct {
	// ARN for the reserved cache node.
	Arn            *string  `pulumi:"arn"`
	CacheNodeCount *float64 `pulumi:"cacheNodeCount"`
	// Node type for the reserved cache nodes.
	CacheNodeType *string `pulumi:"cacheNodeType"`
	// Duration of the reservation as an RFC3339 duration.
	Duration *string `pulumi:"duration"`
	// Fixed price charged for this reserved cache node.
	FixedPrice *float64 `pulumi:"fixedPrice"`
	// Offering type of this reserved cache node.
	OfferingType *string `pulumi:"offeringType"`
	// Engine type for the reserved cache node.
	ProductDescription *string `pulumi:"productDescription"`
	// Recurring price charged to run this reserved cache node.
	RecurringCharges []ReservedCacheNodeRecurringCharge `pulumi:"recurringCharges"`
	// ID of the reserved cache node offering to purchase.
	// To determine an `reservedCacheNodesOfferingId`, see the `elasticache.getReservedCacheNodeOffering` data source.
	//
	// The following arguments are optional:
	ReservedCacheNodesOfferingId *string `pulumi:"reservedCacheNodesOfferingId"`
	// Time the reservation started.
	StartTime *string `pulumi:"startTime"`
	// State of the reserved cache node.
	State *string `pulumi:"state"`
	// Map of tags to assign to the reservation. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  map[string]string          `pulumi:"tagsAll"`
	Timeouts *ReservedCacheNodeTimeouts `pulumi:"timeouts"`
	// Hourly price charged for this reserved cache node.
	UsagePrice *float64 `pulumi:"usagePrice"`
}

type ReservedCacheNodeState struct {
	// ARN for the reserved cache node.
	Arn            pulumi.StringPtrInput
	CacheNodeCount pulumi.Float64PtrInput
	// Node type for the reserved cache nodes.
	CacheNodeType pulumi.StringPtrInput
	// Duration of the reservation as an RFC3339 duration.
	Duration pulumi.StringPtrInput
	// Fixed price charged for this reserved cache node.
	FixedPrice pulumi.Float64PtrInput
	// Offering type of this reserved cache node.
	OfferingType pulumi.StringPtrInput
	// Engine type for the reserved cache node.
	ProductDescription pulumi.StringPtrInput
	// Recurring price charged to run this reserved cache node.
	RecurringCharges ReservedCacheNodeRecurringChargeArrayInput
	// ID of the reserved cache node offering to purchase.
	// To determine an `reservedCacheNodesOfferingId`, see the `elasticache.getReservedCacheNodeOffering` data source.
	//
	// The following arguments are optional:
	ReservedCacheNodesOfferingId pulumi.StringPtrInput
	// Time the reservation started.
	StartTime pulumi.StringPtrInput
	// State of the reserved cache node.
	State pulumi.StringPtrInput
	// Map of tags to assign to the reservation. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: Please use `tags` instead.
	TagsAll  pulumi.StringMapInput
	Timeouts ReservedCacheNodeTimeoutsPtrInput
	// Hourly price charged for this reserved cache node.
	UsagePrice pulumi.Float64PtrInput
}

func (ReservedCacheNodeState) ElementType() reflect.Type {
	return reflect.TypeOf((*reservedCacheNodeState)(nil)).Elem()
}

type reservedCacheNodeArgs struct {
	CacheNodeCount *float64 `pulumi:"cacheNodeCount"`
	// ID of the reserved cache node offering to purchase.
	// To determine an `reservedCacheNodesOfferingId`, see the `elasticache.getReservedCacheNodeOffering` data source.
	//
	// The following arguments are optional:
	ReservedCacheNodesOfferingId string `pulumi:"reservedCacheNodesOfferingId"`
	// Map of tags to assign to the reservation. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     map[string]string          `pulumi:"tags"`
	Timeouts *ReservedCacheNodeTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a ReservedCacheNode resource.
type ReservedCacheNodeArgs struct {
	CacheNodeCount pulumi.Float64PtrInput
	// ID of the reserved cache node offering to purchase.
	// To determine an `reservedCacheNodesOfferingId`, see the `elasticache.getReservedCacheNodeOffering` data source.
	//
	// The following arguments are optional:
	ReservedCacheNodesOfferingId pulumi.StringInput
	// Map of tags to assign to the reservation. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     pulumi.StringMapInput
	Timeouts ReservedCacheNodeTimeoutsPtrInput
}

func (ReservedCacheNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*reservedCacheNodeArgs)(nil)).Elem()
}

type ReservedCacheNodeInput interface {
	pulumi.Input

	ToReservedCacheNodeOutput() ReservedCacheNodeOutput
	ToReservedCacheNodeOutputWithContext(ctx context.Context) ReservedCacheNodeOutput
}

func (*ReservedCacheNode) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservedCacheNode)(nil)).Elem()
}

func (i *ReservedCacheNode) ToReservedCacheNodeOutput() ReservedCacheNodeOutput {
	return i.ToReservedCacheNodeOutputWithContext(context.Background())
}

func (i *ReservedCacheNode) ToReservedCacheNodeOutputWithContext(ctx context.Context) ReservedCacheNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservedCacheNodeOutput)
}

// ReservedCacheNodeArrayInput is an input type that accepts ReservedCacheNodeArray and ReservedCacheNodeArrayOutput values.
// You can construct a concrete instance of `ReservedCacheNodeArrayInput` via:
//
//	ReservedCacheNodeArray{ ReservedCacheNodeArgs{...} }
type ReservedCacheNodeArrayInput interface {
	pulumi.Input

	ToReservedCacheNodeArrayOutput() ReservedCacheNodeArrayOutput
	ToReservedCacheNodeArrayOutputWithContext(context.Context) ReservedCacheNodeArrayOutput
}

type ReservedCacheNodeArray []ReservedCacheNodeInput

func (ReservedCacheNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReservedCacheNode)(nil)).Elem()
}

func (i ReservedCacheNodeArray) ToReservedCacheNodeArrayOutput() ReservedCacheNodeArrayOutput {
	return i.ToReservedCacheNodeArrayOutputWithContext(context.Background())
}

func (i ReservedCacheNodeArray) ToReservedCacheNodeArrayOutputWithContext(ctx context.Context) ReservedCacheNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservedCacheNodeArrayOutput)
}

// ReservedCacheNodeMapInput is an input type that accepts ReservedCacheNodeMap and ReservedCacheNodeMapOutput values.
// You can construct a concrete instance of `ReservedCacheNodeMapInput` via:
//
//	ReservedCacheNodeMap{ "key": ReservedCacheNodeArgs{...} }
type ReservedCacheNodeMapInput interface {
	pulumi.Input

	ToReservedCacheNodeMapOutput() ReservedCacheNodeMapOutput
	ToReservedCacheNodeMapOutputWithContext(context.Context) ReservedCacheNodeMapOutput
}

type ReservedCacheNodeMap map[string]ReservedCacheNodeInput

func (ReservedCacheNodeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReservedCacheNode)(nil)).Elem()
}

func (i ReservedCacheNodeMap) ToReservedCacheNodeMapOutput() ReservedCacheNodeMapOutput {
	return i.ToReservedCacheNodeMapOutputWithContext(context.Background())
}

func (i ReservedCacheNodeMap) ToReservedCacheNodeMapOutputWithContext(ctx context.Context) ReservedCacheNodeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservedCacheNodeMapOutput)
}

type ReservedCacheNodeOutput struct{ *pulumi.OutputState }

func (ReservedCacheNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservedCacheNode)(nil)).Elem()
}

func (o ReservedCacheNodeOutput) ToReservedCacheNodeOutput() ReservedCacheNodeOutput {
	return o
}

func (o ReservedCacheNodeOutput) ToReservedCacheNodeOutputWithContext(ctx context.Context) ReservedCacheNodeOutput {
	return o
}

// ARN for the reserved cache node.
func (o ReservedCacheNodeOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservedCacheNode) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ReservedCacheNodeOutput) CacheNodeCount() pulumi.Float64Output {
	return o.ApplyT(func(v *ReservedCacheNode) pulumi.Float64Output { return v.CacheNodeCount }).(pulumi.Float64Output)
}

// Node type for the reserved cache nodes.
func (o ReservedCacheNodeOutput) CacheNodeType() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservedCacheNode) pulumi.StringOutput { return v.CacheNodeType }).(pulumi.StringOutput)
}

// Duration of the reservation as an RFC3339 duration.
func (o ReservedCacheNodeOutput) Duration() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservedCacheNode) pulumi.StringOutput { return v.Duration }).(pulumi.StringOutput)
}

// Fixed price charged for this reserved cache node.
func (o ReservedCacheNodeOutput) FixedPrice() pulumi.Float64Output {
	return o.ApplyT(func(v *ReservedCacheNode) pulumi.Float64Output { return v.FixedPrice }).(pulumi.Float64Output)
}

// Offering type of this reserved cache node.
func (o ReservedCacheNodeOutput) OfferingType() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservedCacheNode) pulumi.StringOutput { return v.OfferingType }).(pulumi.StringOutput)
}

// Engine type for the reserved cache node.
func (o ReservedCacheNodeOutput) ProductDescription() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservedCacheNode) pulumi.StringOutput { return v.ProductDescription }).(pulumi.StringOutput)
}

// Recurring price charged to run this reserved cache node.
func (o ReservedCacheNodeOutput) RecurringCharges() ReservedCacheNodeRecurringChargeArrayOutput {
	return o.ApplyT(func(v *ReservedCacheNode) ReservedCacheNodeRecurringChargeArrayOutput { return v.RecurringCharges }).(ReservedCacheNodeRecurringChargeArrayOutput)
}

// ID of the reserved cache node offering to purchase.
// To determine an `reservedCacheNodesOfferingId`, see the `elasticache.getReservedCacheNodeOffering` data source.
//
// The following arguments are optional:
func (o ReservedCacheNodeOutput) ReservedCacheNodesOfferingId() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservedCacheNode) pulumi.StringOutput { return v.ReservedCacheNodesOfferingId }).(pulumi.StringOutput)
}

// Time the reservation started.
func (o ReservedCacheNodeOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservedCacheNode) pulumi.StringOutput { return v.StartTime }).(pulumi.StringOutput)
}

// State of the reserved cache node.
func (o ReservedCacheNodeOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservedCacheNode) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Map of tags to assign to the reservation. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ReservedCacheNodeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ReservedCacheNode) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
//
// Deprecated: Please use `tags` instead.
func (o ReservedCacheNodeOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ReservedCacheNode) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o ReservedCacheNodeOutput) Timeouts() ReservedCacheNodeTimeoutsPtrOutput {
	return o.ApplyT(func(v *ReservedCacheNode) ReservedCacheNodeTimeoutsPtrOutput { return v.Timeouts }).(ReservedCacheNodeTimeoutsPtrOutput)
}

// Hourly price charged for this reserved cache node.
func (o ReservedCacheNodeOutput) UsagePrice() pulumi.Float64Output {
	return o.ApplyT(func(v *ReservedCacheNode) pulumi.Float64Output { return v.UsagePrice }).(pulumi.Float64Output)
}

type ReservedCacheNodeArrayOutput struct{ *pulumi.OutputState }

func (ReservedCacheNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReservedCacheNode)(nil)).Elem()
}

func (o ReservedCacheNodeArrayOutput) ToReservedCacheNodeArrayOutput() ReservedCacheNodeArrayOutput {
	return o
}

func (o ReservedCacheNodeArrayOutput) ToReservedCacheNodeArrayOutputWithContext(ctx context.Context) ReservedCacheNodeArrayOutput {
	return o
}

func (o ReservedCacheNodeArrayOutput) Index(i pulumi.IntInput) ReservedCacheNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReservedCacheNode {
		return vs[0].([]*ReservedCacheNode)[vs[1].(int)]
	}).(ReservedCacheNodeOutput)
}

type ReservedCacheNodeMapOutput struct{ *pulumi.OutputState }

func (ReservedCacheNodeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReservedCacheNode)(nil)).Elem()
}

func (o ReservedCacheNodeMapOutput) ToReservedCacheNodeMapOutput() ReservedCacheNodeMapOutput {
	return o
}

func (o ReservedCacheNodeMapOutput) ToReservedCacheNodeMapOutputWithContext(ctx context.Context) ReservedCacheNodeMapOutput {
	return o
}

func (o ReservedCacheNodeMapOutput) MapIndex(k pulumi.StringInput) ReservedCacheNodeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReservedCacheNode {
		return vs[0].(map[string]*ReservedCacheNode)[vs[1].(string)]
	}).(ReservedCacheNodeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReservedCacheNodeInput)(nil)).Elem(), &ReservedCacheNode{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReservedCacheNodeArrayInput)(nil)).Elem(), ReservedCacheNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReservedCacheNodeMapInput)(nil)).Elem(), ReservedCacheNodeMap{})
	pulumi.RegisterOutputType(ReservedCacheNodeOutput{})
	pulumi.RegisterOutputType(ReservedCacheNodeArrayOutput{})
	pulumi.RegisterOutputType(ReservedCacheNodeMapOutput{})
}
