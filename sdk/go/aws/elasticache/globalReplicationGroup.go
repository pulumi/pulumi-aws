// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticache

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// ElastiCache Global Replication Groups can be imported using the `global_replication_group_id`, e.g.,
//
// ```sh
//  $ pulumi import aws:elasticache/globalReplicationGroup:GlobalReplicationGroup my_global_replication_group okuqm-global-replication-group-1
// ```
type GlobalReplicationGroup struct {
	pulumi.CustomResourceState

	// The ARN of the ElastiCache Global Replication Group.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// A flag that indicate whether the encryption at rest is enabled.
	AtRestEncryptionEnabled pulumi.BoolOutput `pulumi:"atRestEncryptionEnabled"`
	// A flag that indicate whether AuthToken (password) is enabled.
	AuthTokenEnabled pulumi.BoolOutput `pulumi:"authTokenEnabled"`
	// The instance class used. See AWS documentation for information on [supported node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html) and [guidance on selecting node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes-select-size.html).
	CacheNodeType pulumi.StringOutput `pulumi:"cacheNodeType"`
	// Indicates whether the Global Datastore is cluster enabled.
	ClusterEnabled pulumi.BoolOutput `pulumi:"clusterEnabled"`
	// The name of the cache engine to be used for the clusters in this global replication group.
	Engine pulumi.StringOutput `pulumi:"engine"`
	// Redis version to use for the Global Replication Group.
	// When creating, by default the Global Replication Group inherits the version of the primary replication group.
	// If a version is specified, the Global Replication Group and all member replication groups will be upgraded to this version.
	// Cannot be downgraded without replacing the Global Replication Group and all member replication groups.
	// If the version is 6 or higher, the major and minor version can be set, e.g., `6.2`,
	// or the minor version can be unspecified which will use the latest version at creation time, e.g., `6.x`.
	// The actual engine version used is returned in the attribute `engineVersionActual`, see Attributes Reference below.
	EngineVersion pulumi.StringOutput `pulumi:"engineVersion"`
	// The full version number of the cache engine running on the members of this global replication group.
	EngineVersionActual pulumi.StringOutput `pulumi:"engineVersionActual"`
	// A user-created description for the global replication group.
	GlobalReplicationGroupDescription pulumi.StringPtrOutput `pulumi:"globalReplicationGroupDescription"`
	// The full ID of the global replication group.
	GlobalReplicationGroupId pulumi.StringOutput `pulumi:"globalReplicationGroupId"`
	// The suffix name of a Global Datastore. If `globalReplicationGroupIdSuffix` is changed, creates a new resource.
	GlobalReplicationGroupIdSuffix pulumi.StringOutput `pulumi:"globalReplicationGroupIdSuffix"`
	// An ElastiCache Parameter Group to use for the Global Replication Group.
	// Required when upgrading a major engine version, but will be ignored if left configured after the upgrade is complete.
	// Specifying without a major version upgrade will fail.
	// Note that ElastiCache creates a copy of this parameter group for each member replication group.
	ParameterGroupName pulumi.StringPtrOutput `pulumi:"parameterGroupName"`
	// The ID of the primary cluster that accepts writes and will replicate updates to the secondary cluster. If `primaryReplicationGroupId` is changed, creates a new resource.
	PrimaryReplicationGroupId pulumi.StringOutput `pulumi:"primaryReplicationGroupId"`
	// A flag that indicates whether the encryption in transit is enabled.
	TransitEncryptionEnabled pulumi.BoolOutput `pulumi:"transitEncryptionEnabled"`
}

// NewGlobalReplicationGroup registers a new resource with the given unique name, arguments, and options.
func NewGlobalReplicationGroup(ctx *pulumi.Context,
	name string, args *GlobalReplicationGroupArgs, opts ...pulumi.ResourceOption) (*GlobalReplicationGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GlobalReplicationGroupIdSuffix == nil {
		return nil, errors.New("invalid value for required argument 'GlobalReplicationGroupIdSuffix'")
	}
	if args.PrimaryReplicationGroupId == nil {
		return nil, errors.New("invalid value for required argument 'PrimaryReplicationGroupId'")
	}
	var resource GlobalReplicationGroup
	err := ctx.RegisterResource("aws:elasticache/globalReplicationGroup:GlobalReplicationGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGlobalReplicationGroup gets an existing GlobalReplicationGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGlobalReplicationGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GlobalReplicationGroupState, opts ...pulumi.ResourceOption) (*GlobalReplicationGroup, error) {
	var resource GlobalReplicationGroup
	err := ctx.ReadResource("aws:elasticache/globalReplicationGroup:GlobalReplicationGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GlobalReplicationGroup resources.
type globalReplicationGroupState struct {
	// The ARN of the ElastiCache Global Replication Group.
	Arn *string `pulumi:"arn"`
	// A flag that indicate whether the encryption at rest is enabled.
	AtRestEncryptionEnabled *bool `pulumi:"atRestEncryptionEnabled"`
	// A flag that indicate whether AuthToken (password) is enabled.
	AuthTokenEnabled *bool `pulumi:"authTokenEnabled"`
	// The instance class used. See AWS documentation for information on [supported node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html) and [guidance on selecting node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes-select-size.html).
	CacheNodeType *string `pulumi:"cacheNodeType"`
	// Indicates whether the Global Datastore is cluster enabled.
	ClusterEnabled *bool `pulumi:"clusterEnabled"`
	// The name of the cache engine to be used for the clusters in this global replication group.
	Engine *string `pulumi:"engine"`
	// Redis version to use for the Global Replication Group.
	// When creating, by default the Global Replication Group inherits the version of the primary replication group.
	// If a version is specified, the Global Replication Group and all member replication groups will be upgraded to this version.
	// Cannot be downgraded without replacing the Global Replication Group and all member replication groups.
	// If the version is 6 or higher, the major and minor version can be set, e.g., `6.2`,
	// or the minor version can be unspecified which will use the latest version at creation time, e.g., `6.x`.
	// The actual engine version used is returned in the attribute `engineVersionActual`, see Attributes Reference below.
	EngineVersion *string `pulumi:"engineVersion"`
	// The full version number of the cache engine running on the members of this global replication group.
	EngineVersionActual *string `pulumi:"engineVersionActual"`
	// A user-created description for the global replication group.
	GlobalReplicationGroupDescription *string `pulumi:"globalReplicationGroupDescription"`
	// The full ID of the global replication group.
	GlobalReplicationGroupId *string `pulumi:"globalReplicationGroupId"`
	// The suffix name of a Global Datastore. If `globalReplicationGroupIdSuffix` is changed, creates a new resource.
	GlobalReplicationGroupIdSuffix *string `pulumi:"globalReplicationGroupIdSuffix"`
	// An ElastiCache Parameter Group to use for the Global Replication Group.
	// Required when upgrading a major engine version, but will be ignored if left configured after the upgrade is complete.
	// Specifying without a major version upgrade will fail.
	// Note that ElastiCache creates a copy of this parameter group for each member replication group.
	ParameterGroupName *string `pulumi:"parameterGroupName"`
	// The ID of the primary cluster that accepts writes and will replicate updates to the secondary cluster. If `primaryReplicationGroupId` is changed, creates a new resource.
	PrimaryReplicationGroupId *string `pulumi:"primaryReplicationGroupId"`
	// A flag that indicates whether the encryption in transit is enabled.
	TransitEncryptionEnabled *bool `pulumi:"transitEncryptionEnabled"`
}

type GlobalReplicationGroupState struct {
	// The ARN of the ElastiCache Global Replication Group.
	Arn pulumi.StringPtrInput
	// A flag that indicate whether the encryption at rest is enabled.
	AtRestEncryptionEnabled pulumi.BoolPtrInput
	// A flag that indicate whether AuthToken (password) is enabled.
	AuthTokenEnabled pulumi.BoolPtrInput
	// The instance class used. See AWS documentation for information on [supported node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html) and [guidance on selecting node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes-select-size.html).
	CacheNodeType pulumi.StringPtrInput
	// Indicates whether the Global Datastore is cluster enabled.
	ClusterEnabled pulumi.BoolPtrInput
	// The name of the cache engine to be used for the clusters in this global replication group.
	Engine pulumi.StringPtrInput
	// Redis version to use for the Global Replication Group.
	// When creating, by default the Global Replication Group inherits the version of the primary replication group.
	// If a version is specified, the Global Replication Group and all member replication groups will be upgraded to this version.
	// Cannot be downgraded without replacing the Global Replication Group and all member replication groups.
	// If the version is 6 or higher, the major and minor version can be set, e.g., `6.2`,
	// or the minor version can be unspecified which will use the latest version at creation time, e.g., `6.x`.
	// The actual engine version used is returned in the attribute `engineVersionActual`, see Attributes Reference below.
	EngineVersion pulumi.StringPtrInput
	// The full version number of the cache engine running on the members of this global replication group.
	EngineVersionActual pulumi.StringPtrInput
	// A user-created description for the global replication group.
	GlobalReplicationGroupDescription pulumi.StringPtrInput
	// The full ID of the global replication group.
	GlobalReplicationGroupId pulumi.StringPtrInput
	// The suffix name of a Global Datastore. If `globalReplicationGroupIdSuffix` is changed, creates a new resource.
	GlobalReplicationGroupIdSuffix pulumi.StringPtrInput
	// An ElastiCache Parameter Group to use for the Global Replication Group.
	// Required when upgrading a major engine version, but will be ignored if left configured after the upgrade is complete.
	// Specifying without a major version upgrade will fail.
	// Note that ElastiCache creates a copy of this parameter group for each member replication group.
	ParameterGroupName pulumi.StringPtrInput
	// The ID of the primary cluster that accepts writes and will replicate updates to the secondary cluster. If `primaryReplicationGroupId` is changed, creates a new resource.
	PrimaryReplicationGroupId pulumi.StringPtrInput
	// A flag that indicates whether the encryption in transit is enabled.
	TransitEncryptionEnabled pulumi.BoolPtrInput
}

func (GlobalReplicationGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*globalReplicationGroupState)(nil)).Elem()
}

type globalReplicationGroupArgs struct {
	// Redis version to use for the Global Replication Group.
	// When creating, by default the Global Replication Group inherits the version of the primary replication group.
	// If a version is specified, the Global Replication Group and all member replication groups will be upgraded to this version.
	// Cannot be downgraded without replacing the Global Replication Group and all member replication groups.
	// If the version is 6 or higher, the major and minor version can be set, e.g., `6.2`,
	// or the minor version can be unspecified which will use the latest version at creation time, e.g., `6.x`.
	// The actual engine version used is returned in the attribute `engineVersionActual`, see Attributes Reference below.
	EngineVersion *string `pulumi:"engineVersion"`
	// A user-created description for the global replication group.
	GlobalReplicationGroupDescription *string `pulumi:"globalReplicationGroupDescription"`
	// The suffix name of a Global Datastore. If `globalReplicationGroupIdSuffix` is changed, creates a new resource.
	GlobalReplicationGroupIdSuffix string `pulumi:"globalReplicationGroupIdSuffix"`
	// An ElastiCache Parameter Group to use for the Global Replication Group.
	// Required when upgrading a major engine version, but will be ignored if left configured after the upgrade is complete.
	// Specifying without a major version upgrade will fail.
	// Note that ElastiCache creates a copy of this parameter group for each member replication group.
	ParameterGroupName *string `pulumi:"parameterGroupName"`
	// The ID of the primary cluster that accepts writes and will replicate updates to the secondary cluster. If `primaryReplicationGroupId` is changed, creates a new resource.
	PrimaryReplicationGroupId string `pulumi:"primaryReplicationGroupId"`
}

// The set of arguments for constructing a GlobalReplicationGroup resource.
type GlobalReplicationGroupArgs struct {
	// Redis version to use for the Global Replication Group.
	// When creating, by default the Global Replication Group inherits the version of the primary replication group.
	// If a version is specified, the Global Replication Group and all member replication groups will be upgraded to this version.
	// Cannot be downgraded without replacing the Global Replication Group and all member replication groups.
	// If the version is 6 or higher, the major and minor version can be set, e.g., `6.2`,
	// or the minor version can be unspecified which will use the latest version at creation time, e.g., `6.x`.
	// The actual engine version used is returned in the attribute `engineVersionActual`, see Attributes Reference below.
	EngineVersion pulumi.StringPtrInput
	// A user-created description for the global replication group.
	GlobalReplicationGroupDescription pulumi.StringPtrInput
	// The suffix name of a Global Datastore. If `globalReplicationGroupIdSuffix` is changed, creates a new resource.
	GlobalReplicationGroupIdSuffix pulumi.StringInput
	// An ElastiCache Parameter Group to use for the Global Replication Group.
	// Required when upgrading a major engine version, but will be ignored if left configured after the upgrade is complete.
	// Specifying without a major version upgrade will fail.
	// Note that ElastiCache creates a copy of this parameter group for each member replication group.
	ParameterGroupName pulumi.StringPtrInput
	// The ID of the primary cluster that accepts writes and will replicate updates to the secondary cluster. If `primaryReplicationGroupId` is changed, creates a new resource.
	PrimaryReplicationGroupId pulumi.StringInput
}

func (GlobalReplicationGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*globalReplicationGroupArgs)(nil)).Elem()
}

type GlobalReplicationGroupInput interface {
	pulumi.Input

	ToGlobalReplicationGroupOutput() GlobalReplicationGroupOutput
	ToGlobalReplicationGroupOutputWithContext(ctx context.Context) GlobalReplicationGroupOutput
}

func (*GlobalReplicationGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalReplicationGroup)(nil)).Elem()
}

func (i *GlobalReplicationGroup) ToGlobalReplicationGroupOutput() GlobalReplicationGroupOutput {
	return i.ToGlobalReplicationGroupOutputWithContext(context.Background())
}

func (i *GlobalReplicationGroup) ToGlobalReplicationGroupOutputWithContext(ctx context.Context) GlobalReplicationGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalReplicationGroupOutput)
}

// GlobalReplicationGroupArrayInput is an input type that accepts GlobalReplicationGroupArray and GlobalReplicationGroupArrayOutput values.
// You can construct a concrete instance of `GlobalReplicationGroupArrayInput` via:
//
//          GlobalReplicationGroupArray{ GlobalReplicationGroupArgs{...} }
type GlobalReplicationGroupArrayInput interface {
	pulumi.Input

	ToGlobalReplicationGroupArrayOutput() GlobalReplicationGroupArrayOutput
	ToGlobalReplicationGroupArrayOutputWithContext(context.Context) GlobalReplicationGroupArrayOutput
}

type GlobalReplicationGroupArray []GlobalReplicationGroupInput

func (GlobalReplicationGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GlobalReplicationGroup)(nil)).Elem()
}

func (i GlobalReplicationGroupArray) ToGlobalReplicationGroupArrayOutput() GlobalReplicationGroupArrayOutput {
	return i.ToGlobalReplicationGroupArrayOutputWithContext(context.Background())
}

func (i GlobalReplicationGroupArray) ToGlobalReplicationGroupArrayOutputWithContext(ctx context.Context) GlobalReplicationGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalReplicationGroupArrayOutput)
}

// GlobalReplicationGroupMapInput is an input type that accepts GlobalReplicationGroupMap and GlobalReplicationGroupMapOutput values.
// You can construct a concrete instance of `GlobalReplicationGroupMapInput` via:
//
//          GlobalReplicationGroupMap{ "key": GlobalReplicationGroupArgs{...} }
type GlobalReplicationGroupMapInput interface {
	pulumi.Input

	ToGlobalReplicationGroupMapOutput() GlobalReplicationGroupMapOutput
	ToGlobalReplicationGroupMapOutputWithContext(context.Context) GlobalReplicationGroupMapOutput
}

type GlobalReplicationGroupMap map[string]GlobalReplicationGroupInput

func (GlobalReplicationGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GlobalReplicationGroup)(nil)).Elem()
}

func (i GlobalReplicationGroupMap) ToGlobalReplicationGroupMapOutput() GlobalReplicationGroupMapOutput {
	return i.ToGlobalReplicationGroupMapOutputWithContext(context.Background())
}

func (i GlobalReplicationGroupMap) ToGlobalReplicationGroupMapOutputWithContext(ctx context.Context) GlobalReplicationGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalReplicationGroupMapOutput)
}

type GlobalReplicationGroupOutput struct{ *pulumi.OutputState }

func (GlobalReplicationGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalReplicationGroup)(nil)).Elem()
}

func (o GlobalReplicationGroupOutput) ToGlobalReplicationGroupOutput() GlobalReplicationGroupOutput {
	return o
}

func (o GlobalReplicationGroupOutput) ToGlobalReplicationGroupOutputWithContext(ctx context.Context) GlobalReplicationGroupOutput {
	return o
}

// The ARN of the ElastiCache Global Replication Group.
func (o GlobalReplicationGroupOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *GlobalReplicationGroup) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// A flag that indicate whether the encryption at rest is enabled.
func (o GlobalReplicationGroupOutput) AtRestEncryptionEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *GlobalReplicationGroup) pulumi.BoolOutput { return v.AtRestEncryptionEnabled }).(pulumi.BoolOutput)
}

// A flag that indicate whether AuthToken (password) is enabled.
func (o GlobalReplicationGroupOutput) AuthTokenEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *GlobalReplicationGroup) pulumi.BoolOutput { return v.AuthTokenEnabled }).(pulumi.BoolOutput)
}

// The instance class used. See AWS documentation for information on [supported node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html) and [guidance on selecting node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes-select-size.html).
func (o GlobalReplicationGroupOutput) CacheNodeType() pulumi.StringOutput {
	return o.ApplyT(func(v *GlobalReplicationGroup) pulumi.StringOutput { return v.CacheNodeType }).(pulumi.StringOutput)
}

// Indicates whether the Global Datastore is cluster enabled.
func (o GlobalReplicationGroupOutput) ClusterEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *GlobalReplicationGroup) pulumi.BoolOutput { return v.ClusterEnabled }).(pulumi.BoolOutput)
}

// The name of the cache engine to be used for the clusters in this global replication group.
func (o GlobalReplicationGroupOutput) Engine() pulumi.StringOutput {
	return o.ApplyT(func(v *GlobalReplicationGroup) pulumi.StringOutput { return v.Engine }).(pulumi.StringOutput)
}

// Redis version to use for the Global Replication Group.
// When creating, by default the Global Replication Group inherits the version of the primary replication group.
// If a version is specified, the Global Replication Group and all member replication groups will be upgraded to this version.
// Cannot be downgraded without replacing the Global Replication Group and all member replication groups.
// If the version is 6 or higher, the major and minor version can be set, e.g., `6.2`,
// or the minor version can be unspecified which will use the latest version at creation time, e.g., `6.x`.
// The actual engine version used is returned in the attribute `engineVersionActual`, see Attributes Reference below.
func (o GlobalReplicationGroupOutput) EngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *GlobalReplicationGroup) pulumi.StringOutput { return v.EngineVersion }).(pulumi.StringOutput)
}

// The full version number of the cache engine running on the members of this global replication group.
func (o GlobalReplicationGroupOutput) EngineVersionActual() pulumi.StringOutput {
	return o.ApplyT(func(v *GlobalReplicationGroup) pulumi.StringOutput { return v.EngineVersionActual }).(pulumi.StringOutput)
}

// A user-created description for the global replication group.
func (o GlobalReplicationGroupOutput) GlobalReplicationGroupDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalReplicationGroup) pulumi.StringPtrOutput { return v.GlobalReplicationGroupDescription }).(pulumi.StringPtrOutput)
}

// The full ID of the global replication group.
func (o GlobalReplicationGroupOutput) GlobalReplicationGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *GlobalReplicationGroup) pulumi.StringOutput { return v.GlobalReplicationGroupId }).(pulumi.StringOutput)
}

// The suffix name of a Global Datastore. If `globalReplicationGroupIdSuffix` is changed, creates a new resource.
func (o GlobalReplicationGroupOutput) GlobalReplicationGroupIdSuffix() pulumi.StringOutput {
	return o.ApplyT(func(v *GlobalReplicationGroup) pulumi.StringOutput { return v.GlobalReplicationGroupIdSuffix }).(pulumi.StringOutput)
}

// An ElastiCache Parameter Group to use for the Global Replication Group.
// Required when upgrading a major engine version, but will be ignored if left configured after the upgrade is complete.
// Specifying without a major version upgrade will fail.
// Note that ElastiCache creates a copy of this parameter group for each member replication group.
func (o GlobalReplicationGroupOutput) ParameterGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalReplicationGroup) pulumi.StringPtrOutput { return v.ParameterGroupName }).(pulumi.StringPtrOutput)
}

// The ID of the primary cluster that accepts writes and will replicate updates to the secondary cluster. If `primaryReplicationGroupId` is changed, creates a new resource.
func (o GlobalReplicationGroupOutput) PrimaryReplicationGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *GlobalReplicationGroup) pulumi.StringOutput { return v.PrimaryReplicationGroupId }).(pulumi.StringOutput)
}

// A flag that indicates whether the encryption in transit is enabled.
func (o GlobalReplicationGroupOutput) TransitEncryptionEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *GlobalReplicationGroup) pulumi.BoolOutput { return v.TransitEncryptionEnabled }).(pulumi.BoolOutput)
}

type GlobalReplicationGroupArrayOutput struct{ *pulumi.OutputState }

func (GlobalReplicationGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GlobalReplicationGroup)(nil)).Elem()
}

func (o GlobalReplicationGroupArrayOutput) ToGlobalReplicationGroupArrayOutput() GlobalReplicationGroupArrayOutput {
	return o
}

func (o GlobalReplicationGroupArrayOutput) ToGlobalReplicationGroupArrayOutputWithContext(ctx context.Context) GlobalReplicationGroupArrayOutput {
	return o
}

func (o GlobalReplicationGroupArrayOutput) Index(i pulumi.IntInput) GlobalReplicationGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GlobalReplicationGroup {
		return vs[0].([]*GlobalReplicationGroup)[vs[1].(int)]
	}).(GlobalReplicationGroupOutput)
}

type GlobalReplicationGroupMapOutput struct{ *pulumi.OutputState }

func (GlobalReplicationGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GlobalReplicationGroup)(nil)).Elem()
}

func (o GlobalReplicationGroupMapOutput) ToGlobalReplicationGroupMapOutput() GlobalReplicationGroupMapOutput {
	return o
}

func (o GlobalReplicationGroupMapOutput) ToGlobalReplicationGroupMapOutputWithContext(ctx context.Context) GlobalReplicationGroupMapOutput {
	return o
}

func (o GlobalReplicationGroupMapOutput) MapIndex(k pulumi.StringInput) GlobalReplicationGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GlobalReplicationGroup {
		return vs[0].(map[string]*GlobalReplicationGroup)[vs[1].(string)]
	}).(GlobalReplicationGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalReplicationGroupInput)(nil)).Elem(), &GlobalReplicationGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalReplicationGroupArrayInput)(nil)).Elem(), GlobalReplicationGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalReplicationGroupMapInput)(nil)).Elem(), GlobalReplicationGroupMap{})
	pulumi.RegisterOutputType(GlobalReplicationGroupOutput{})
	pulumi.RegisterOutputType(GlobalReplicationGroupArrayOutput{})
	pulumi.RegisterOutputType(GlobalReplicationGroupMapOutput{})
}
