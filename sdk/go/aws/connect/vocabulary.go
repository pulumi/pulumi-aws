// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package connect

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Vocabulary struct {
	pulumi.CustomResourceState

	Arn              pulumi.StringOutput    `pulumi:"arn"`
	Content          pulumi.StringOutput    `pulumi:"content"`
	FailureReason    pulumi.StringOutput    `pulumi:"failureReason"`
	InstanceId       pulumi.StringOutput    `pulumi:"instanceId"`
	LanguageCode     pulumi.StringOutput    `pulumi:"languageCode"`
	LastModifiedTime pulumi.StringOutput    `pulumi:"lastModifiedTime"`
	Name             pulumi.StringOutput    `pulumi:"name"`
	State            pulumi.StringOutput    `pulumi:"state"`
	Tags             pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll          pulumi.StringMapOutput `pulumi:"tagsAll"`
	VocabularyId     pulumi.StringOutput    `pulumi:"vocabularyId"`
}

// NewVocabulary registers a new resource with the given unique name, arguments, and options.
func NewVocabulary(ctx *pulumi.Context,
	name string, args *VocabularyArgs, opts ...pulumi.ResourceOption) (*Vocabulary, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.LanguageCode == nil {
		return nil, errors.New("invalid value for required argument 'LanguageCode'")
	}
	var resource Vocabulary
	err := ctx.RegisterResource("aws:connect/vocabulary:Vocabulary", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVocabulary gets an existing Vocabulary resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVocabulary(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VocabularyState, opts ...pulumi.ResourceOption) (*Vocabulary, error) {
	var resource Vocabulary
	err := ctx.ReadResource("aws:connect/vocabulary:Vocabulary", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vocabulary resources.
type vocabularyState struct {
	Arn              *string           `pulumi:"arn"`
	Content          *string           `pulumi:"content"`
	FailureReason    *string           `pulumi:"failureReason"`
	InstanceId       *string           `pulumi:"instanceId"`
	LanguageCode     *string           `pulumi:"languageCode"`
	LastModifiedTime *string           `pulumi:"lastModifiedTime"`
	Name             *string           `pulumi:"name"`
	State            *string           `pulumi:"state"`
	Tags             map[string]string `pulumi:"tags"`
	TagsAll          map[string]string `pulumi:"tagsAll"`
	VocabularyId     *string           `pulumi:"vocabularyId"`
}

type VocabularyState struct {
	Arn              pulumi.StringPtrInput
	Content          pulumi.StringPtrInput
	FailureReason    pulumi.StringPtrInput
	InstanceId       pulumi.StringPtrInput
	LanguageCode     pulumi.StringPtrInput
	LastModifiedTime pulumi.StringPtrInput
	Name             pulumi.StringPtrInput
	State            pulumi.StringPtrInput
	Tags             pulumi.StringMapInput
	TagsAll          pulumi.StringMapInput
	VocabularyId     pulumi.StringPtrInput
}

func (VocabularyState) ElementType() reflect.Type {
	return reflect.TypeOf((*vocabularyState)(nil)).Elem()
}

type vocabularyArgs struct {
	Content      string            `pulumi:"content"`
	InstanceId   string            `pulumi:"instanceId"`
	LanguageCode string            `pulumi:"languageCode"`
	Name         *string           `pulumi:"name"`
	Tags         map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Vocabulary resource.
type VocabularyArgs struct {
	Content      pulumi.StringInput
	InstanceId   pulumi.StringInput
	LanguageCode pulumi.StringInput
	Name         pulumi.StringPtrInput
	Tags         pulumi.StringMapInput
}

func (VocabularyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vocabularyArgs)(nil)).Elem()
}

type VocabularyInput interface {
	pulumi.Input

	ToVocabularyOutput() VocabularyOutput
	ToVocabularyOutputWithContext(ctx context.Context) VocabularyOutput
}

func (*Vocabulary) ElementType() reflect.Type {
	return reflect.TypeOf((**Vocabulary)(nil)).Elem()
}

func (i *Vocabulary) ToVocabularyOutput() VocabularyOutput {
	return i.ToVocabularyOutputWithContext(context.Background())
}

func (i *Vocabulary) ToVocabularyOutputWithContext(ctx context.Context) VocabularyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VocabularyOutput)
}

// VocabularyArrayInput is an input type that accepts VocabularyArray and VocabularyArrayOutput values.
// You can construct a concrete instance of `VocabularyArrayInput` via:
//
//	VocabularyArray{ VocabularyArgs{...} }
type VocabularyArrayInput interface {
	pulumi.Input

	ToVocabularyArrayOutput() VocabularyArrayOutput
	ToVocabularyArrayOutputWithContext(context.Context) VocabularyArrayOutput
}

type VocabularyArray []VocabularyInput

func (VocabularyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vocabulary)(nil)).Elem()
}

func (i VocabularyArray) ToVocabularyArrayOutput() VocabularyArrayOutput {
	return i.ToVocabularyArrayOutputWithContext(context.Background())
}

func (i VocabularyArray) ToVocabularyArrayOutputWithContext(ctx context.Context) VocabularyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VocabularyArrayOutput)
}

// VocabularyMapInput is an input type that accepts VocabularyMap and VocabularyMapOutput values.
// You can construct a concrete instance of `VocabularyMapInput` via:
//
//	VocabularyMap{ "key": VocabularyArgs{...} }
type VocabularyMapInput interface {
	pulumi.Input

	ToVocabularyMapOutput() VocabularyMapOutput
	ToVocabularyMapOutputWithContext(context.Context) VocabularyMapOutput
}

type VocabularyMap map[string]VocabularyInput

func (VocabularyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vocabulary)(nil)).Elem()
}

func (i VocabularyMap) ToVocabularyMapOutput() VocabularyMapOutput {
	return i.ToVocabularyMapOutputWithContext(context.Background())
}

func (i VocabularyMap) ToVocabularyMapOutputWithContext(ctx context.Context) VocabularyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VocabularyMapOutput)
}

type VocabularyOutput struct{ *pulumi.OutputState }

func (VocabularyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vocabulary)(nil)).Elem()
}

func (o VocabularyOutput) ToVocabularyOutput() VocabularyOutput {
	return o
}

func (o VocabularyOutput) ToVocabularyOutputWithContext(ctx context.Context) VocabularyOutput {
	return o
}

func (o VocabularyOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Vocabulary) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o VocabularyOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *Vocabulary) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

func (o VocabularyOutput) FailureReason() pulumi.StringOutput {
	return o.ApplyT(func(v *Vocabulary) pulumi.StringOutput { return v.FailureReason }).(pulumi.StringOutput)
}

func (o VocabularyOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vocabulary) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o VocabularyOutput) LanguageCode() pulumi.StringOutput {
	return o.ApplyT(func(v *Vocabulary) pulumi.StringOutput { return v.LanguageCode }).(pulumi.StringOutput)
}

func (o VocabularyOutput) LastModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Vocabulary) pulumi.StringOutput { return v.LastModifiedTime }).(pulumi.StringOutput)
}

func (o VocabularyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Vocabulary) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o VocabularyOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Vocabulary) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o VocabularyOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Vocabulary) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o VocabularyOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Vocabulary) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o VocabularyOutput) VocabularyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vocabulary) pulumi.StringOutput { return v.VocabularyId }).(pulumi.StringOutput)
}

type VocabularyArrayOutput struct{ *pulumi.OutputState }

func (VocabularyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vocabulary)(nil)).Elem()
}

func (o VocabularyArrayOutput) ToVocabularyArrayOutput() VocabularyArrayOutput {
	return o
}

func (o VocabularyArrayOutput) ToVocabularyArrayOutputWithContext(ctx context.Context) VocabularyArrayOutput {
	return o
}

func (o VocabularyArrayOutput) Index(i pulumi.IntInput) VocabularyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vocabulary {
		return vs[0].([]*Vocabulary)[vs[1].(int)]
	}).(VocabularyOutput)
}

type VocabularyMapOutput struct{ *pulumi.OutputState }

func (VocabularyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vocabulary)(nil)).Elem()
}

func (o VocabularyMapOutput) ToVocabularyMapOutput() VocabularyMapOutput {
	return o
}

func (o VocabularyMapOutput) ToVocabularyMapOutputWithContext(ctx context.Context) VocabularyMapOutput {
	return o
}

func (o VocabularyMapOutput) MapIndex(k pulumi.StringInput) VocabularyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vocabulary {
		return vs[0].(map[string]*Vocabulary)[vs[1].(string)]
	}).(VocabularyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VocabularyInput)(nil)).Elem(), &Vocabulary{})
	pulumi.RegisterInputType(reflect.TypeOf((*VocabularyArrayInput)(nil)).Elem(), VocabularyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VocabularyMapInput)(nil)).Elem(), VocabularyMap{})
	pulumi.RegisterOutputType(VocabularyOutput{})
	pulumi.RegisterOutputType(VocabularyArrayOutput{})
	pulumi.RegisterOutputType(VocabularyMapOutput{})
}
