// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package connect

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Amazon Connect Lambda Function Association. For more information see
// [Amazon Connect: Getting Started](https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-get-started.html) and [Invoke AWS Lambda functions](https://docs.aws.amazon.com/connect/latest/adminguide/connect-lambda-functions.html).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/connect"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := connect.NewLambdaFunctionAssociation(ctx, "example", &connect.LambdaFunctionAssociationArgs{
// 			FunctionArn: pulumi.Any(aws_lambda_function.Example.Arn),
// 			InstanceId:  pulumi.Any(aws_connect_instance.Example.Id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// `aws_connect_lambda_function_association` can be imported using the `instance_id` and `function_arn` separated by a comma (`,`) e.g.,
//
// ```sh
//  $ pulumi import aws:connect/lambdaFunctionAssociation:LambdaFunctionAssociation example aaaaaaaa-bbbb-cccc-dddd-111111111111,arn:aws:lambda:us-west-2:123456789123:function:example
// ```
type LambdaFunctionAssociation struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the Lambda Function, omitting any version or alias qualifier.
	FunctionArn pulumi.StringOutput `pulumi:"functionArn"`
	// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
}

// NewLambdaFunctionAssociation registers a new resource with the given unique name, arguments, and options.
func NewLambdaFunctionAssociation(ctx *pulumi.Context,
	name string, args *LambdaFunctionAssociationArgs, opts ...pulumi.ResourceOption) (*LambdaFunctionAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FunctionArn == nil {
		return nil, errors.New("invalid value for required argument 'FunctionArn'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	var resource LambdaFunctionAssociation
	err := ctx.RegisterResource("aws:connect/lambdaFunctionAssociation:LambdaFunctionAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLambdaFunctionAssociation gets an existing LambdaFunctionAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLambdaFunctionAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LambdaFunctionAssociationState, opts ...pulumi.ResourceOption) (*LambdaFunctionAssociation, error) {
	var resource LambdaFunctionAssociation
	err := ctx.ReadResource("aws:connect/lambdaFunctionAssociation:LambdaFunctionAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LambdaFunctionAssociation resources.
type lambdaFunctionAssociationState struct {
	// Amazon Resource Name (ARN) of the Lambda Function, omitting any version or alias qualifier.
	FunctionArn *string `pulumi:"functionArn"`
	// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
	InstanceId *string `pulumi:"instanceId"`
}

type LambdaFunctionAssociationState struct {
	// Amazon Resource Name (ARN) of the Lambda Function, omitting any version or alias qualifier.
	FunctionArn pulumi.StringPtrInput
	// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
	InstanceId pulumi.StringPtrInput
}

func (LambdaFunctionAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*lambdaFunctionAssociationState)(nil)).Elem()
}

type lambdaFunctionAssociationArgs struct {
	// Amazon Resource Name (ARN) of the Lambda Function, omitting any version or alias qualifier.
	FunctionArn string `pulumi:"functionArn"`
	// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a LambdaFunctionAssociation resource.
type LambdaFunctionAssociationArgs struct {
	// Amazon Resource Name (ARN) of the Lambda Function, omitting any version or alias qualifier.
	FunctionArn pulumi.StringInput
	// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
	InstanceId pulumi.StringInput
}

func (LambdaFunctionAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lambdaFunctionAssociationArgs)(nil)).Elem()
}

type LambdaFunctionAssociationInput interface {
	pulumi.Input

	ToLambdaFunctionAssociationOutput() LambdaFunctionAssociationOutput
	ToLambdaFunctionAssociationOutputWithContext(ctx context.Context) LambdaFunctionAssociationOutput
}

func (*LambdaFunctionAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**LambdaFunctionAssociation)(nil)).Elem()
}

func (i *LambdaFunctionAssociation) ToLambdaFunctionAssociationOutput() LambdaFunctionAssociationOutput {
	return i.ToLambdaFunctionAssociationOutputWithContext(context.Background())
}

func (i *LambdaFunctionAssociation) ToLambdaFunctionAssociationOutputWithContext(ctx context.Context) LambdaFunctionAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LambdaFunctionAssociationOutput)
}

// LambdaFunctionAssociationArrayInput is an input type that accepts LambdaFunctionAssociationArray and LambdaFunctionAssociationArrayOutput values.
// You can construct a concrete instance of `LambdaFunctionAssociationArrayInput` via:
//
//          LambdaFunctionAssociationArray{ LambdaFunctionAssociationArgs{...} }
type LambdaFunctionAssociationArrayInput interface {
	pulumi.Input

	ToLambdaFunctionAssociationArrayOutput() LambdaFunctionAssociationArrayOutput
	ToLambdaFunctionAssociationArrayOutputWithContext(context.Context) LambdaFunctionAssociationArrayOutput
}

type LambdaFunctionAssociationArray []LambdaFunctionAssociationInput

func (LambdaFunctionAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LambdaFunctionAssociation)(nil)).Elem()
}

func (i LambdaFunctionAssociationArray) ToLambdaFunctionAssociationArrayOutput() LambdaFunctionAssociationArrayOutput {
	return i.ToLambdaFunctionAssociationArrayOutputWithContext(context.Background())
}

func (i LambdaFunctionAssociationArray) ToLambdaFunctionAssociationArrayOutputWithContext(ctx context.Context) LambdaFunctionAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LambdaFunctionAssociationArrayOutput)
}

// LambdaFunctionAssociationMapInput is an input type that accepts LambdaFunctionAssociationMap and LambdaFunctionAssociationMapOutput values.
// You can construct a concrete instance of `LambdaFunctionAssociationMapInput` via:
//
//          LambdaFunctionAssociationMap{ "key": LambdaFunctionAssociationArgs{...} }
type LambdaFunctionAssociationMapInput interface {
	pulumi.Input

	ToLambdaFunctionAssociationMapOutput() LambdaFunctionAssociationMapOutput
	ToLambdaFunctionAssociationMapOutputWithContext(context.Context) LambdaFunctionAssociationMapOutput
}

type LambdaFunctionAssociationMap map[string]LambdaFunctionAssociationInput

func (LambdaFunctionAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LambdaFunctionAssociation)(nil)).Elem()
}

func (i LambdaFunctionAssociationMap) ToLambdaFunctionAssociationMapOutput() LambdaFunctionAssociationMapOutput {
	return i.ToLambdaFunctionAssociationMapOutputWithContext(context.Background())
}

func (i LambdaFunctionAssociationMap) ToLambdaFunctionAssociationMapOutputWithContext(ctx context.Context) LambdaFunctionAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LambdaFunctionAssociationMapOutput)
}

type LambdaFunctionAssociationOutput struct{ *pulumi.OutputState }

func (LambdaFunctionAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LambdaFunctionAssociation)(nil)).Elem()
}

func (o LambdaFunctionAssociationOutput) ToLambdaFunctionAssociationOutput() LambdaFunctionAssociationOutput {
	return o
}

func (o LambdaFunctionAssociationOutput) ToLambdaFunctionAssociationOutputWithContext(ctx context.Context) LambdaFunctionAssociationOutput {
	return o
}

type LambdaFunctionAssociationArrayOutput struct{ *pulumi.OutputState }

func (LambdaFunctionAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LambdaFunctionAssociation)(nil)).Elem()
}

func (o LambdaFunctionAssociationArrayOutput) ToLambdaFunctionAssociationArrayOutput() LambdaFunctionAssociationArrayOutput {
	return o
}

func (o LambdaFunctionAssociationArrayOutput) ToLambdaFunctionAssociationArrayOutputWithContext(ctx context.Context) LambdaFunctionAssociationArrayOutput {
	return o
}

func (o LambdaFunctionAssociationArrayOutput) Index(i pulumi.IntInput) LambdaFunctionAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LambdaFunctionAssociation {
		return vs[0].([]*LambdaFunctionAssociation)[vs[1].(int)]
	}).(LambdaFunctionAssociationOutput)
}

type LambdaFunctionAssociationMapOutput struct{ *pulumi.OutputState }

func (LambdaFunctionAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LambdaFunctionAssociation)(nil)).Elem()
}

func (o LambdaFunctionAssociationMapOutput) ToLambdaFunctionAssociationMapOutput() LambdaFunctionAssociationMapOutput {
	return o
}

func (o LambdaFunctionAssociationMapOutput) ToLambdaFunctionAssociationMapOutputWithContext(ctx context.Context) LambdaFunctionAssociationMapOutput {
	return o
}

func (o LambdaFunctionAssociationMapOutput) MapIndex(k pulumi.StringInput) LambdaFunctionAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LambdaFunctionAssociation {
		return vs[0].(map[string]*LambdaFunctionAssociation)[vs[1].(string)]
	}).(LambdaFunctionAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LambdaFunctionAssociationInput)(nil)).Elem(), &LambdaFunctionAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*LambdaFunctionAssociationArrayInput)(nil)).Elem(), LambdaFunctionAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LambdaFunctionAssociationMapInput)(nil)).Elem(), LambdaFunctionAssociationMap{})
	pulumi.RegisterOutputType(LambdaFunctionAssociationOutput{})
	pulumi.RegisterOutputType(LambdaFunctionAssociationArrayOutput{})
	pulumi.RegisterOutputType(LambdaFunctionAssociationMapOutput{})
}
