// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package connect

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Allows the specified Amazon Connect instance to access the specified Amazon Lex (V1) bot. For more information see
// [Amazon Connect: Getting Started](https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-get-started.html) and [Add an Amazon Lex bot](https://docs.aws.amazon.com/connect/latest/adminguide/amazon-lex.html).
//
// > **NOTE:** This resource only currently supports Amazon Lex (V1) Associations.
//
// ## Example Usage
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/connect"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := connect.NewBotAssociation(ctx, "example", &connect.BotAssociationArgs{
//				InstanceId: pulumi.Any(aws_connect_instance.Example.Id),
//				LexBot: &connect.BotAssociationLexBotArgs{
//					LexRegion: pulumi.String("us-west-2"),
//					Name:      pulumi.String("Test"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Including a sample Lex bot
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/connect"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/lex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := aws.GetRegion(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			exampleIntent, err := lex.NewIntent(ctx, "exampleIntent", &lex.IntentArgs{
//				CreateVersion: pulumi.Bool(true),
//				Name:          pulumi.String("connect_lex_intent"),
//				FulfillmentActivity: &lex.IntentFulfillmentActivityArgs{
//					Type: pulumi.String("ReturnIntent"),
//				},
//				SampleUtterances: pulumi.StringArray{
//					pulumi.String("I would like to pick up flowers."),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleBot, err := lex.NewBot(ctx, "exampleBot", &lex.BotArgs{
//				AbortStatement: &lex.BotAbortStatementArgs{
//					Messages: lex.BotAbortStatementMessageArray{
//						&lex.BotAbortStatementMessageArgs{
//							Content:     pulumi.String("Sorry, I am not able to assist at this time."),
//							ContentType: pulumi.String("PlainText"),
//						},
//					},
//				},
//				ClarificationPrompt: &lex.BotClarificationPromptArgs{
//					MaxAttempts: pulumi.Int(2),
//					Messages: lex.BotClarificationPromptMessageArray{
//						&lex.BotClarificationPromptMessageArgs{
//							Content:     pulumi.String("I didn't understand you, what would you like to do?"),
//							ContentType: pulumi.String("PlainText"),
//						},
//					},
//				},
//				Intents: lex.BotIntentArray{
//					&lex.BotIntentArgs{
//						IntentName:    exampleIntent.Name,
//						IntentVersion: pulumi.String("1"),
//					},
//				},
//				ChildDirected:   pulumi.Bool(false),
//				Name:            pulumi.String("connect_lex_bot"),
//				ProcessBehavior: pulumi.String("BUILD"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = connect.NewBotAssociation(ctx, "exampleBotAssociation", &connect.BotAssociationArgs{
//				InstanceId: pulumi.Any(aws_connect_instance.Example.Id),
//				LexBot: &connect.BotAssociationLexBotArgs{
//					LexRegion: *pulumi.String(current.Name),
//					Name:      exampleBot.Name,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import `aws_connect_bot_association` using the Amazon Connect instance ID, Lex (V1) bot name, and Lex (V1) bot region separated by colons (`:`). For example:
//
// ```sh
//
//	$ pulumi import aws:connect/botAssociation:BotAssociation example aaaaaaaa-bbbb-cccc-dddd-111111111111:Example:us-west-2
//
// ```
type BotAssociation struct {
	pulumi.CustomResourceState

	// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Configuration information of an Amazon Lex (V1) bot. Detailed below.
	LexBot BotAssociationLexBotOutput `pulumi:"lexBot"`
}

// NewBotAssociation registers a new resource with the given unique name, arguments, and options.
func NewBotAssociation(ctx *pulumi.Context,
	name string, args *BotAssociationArgs, opts ...pulumi.ResourceOption) (*BotAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.LexBot == nil {
		return nil, errors.New("invalid value for required argument 'LexBot'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BotAssociation
	err := ctx.RegisterResource("aws:connect/botAssociation:BotAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBotAssociation gets an existing BotAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBotAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BotAssociationState, opts ...pulumi.ResourceOption) (*BotAssociation, error) {
	var resource BotAssociation
	err := ctx.ReadResource("aws:connect/botAssociation:BotAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BotAssociation resources.
type botAssociationState struct {
	// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
	InstanceId *string `pulumi:"instanceId"`
	// Configuration information of an Amazon Lex (V1) bot. Detailed below.
	LexBot *BotAssociationLexBot `pulumi:"lexBot"`
}

type BotAssociationState struct {
	// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
	InstanceId pulumi.StringPtrInput
	// Configuration information of an Amazon Lex (V1) bot. Detailed below.
	LexBot BotAssociationLexBotPtrInput
}

func (BotAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*botAssociationState)(nil)).Elem()
}

type botAssociationArgs struct {
	// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
	InstanceId string `pulumi:"instanceId"`
	// Configuration information of an Amazon Lex (V1) bot. Detailed below.
	LexBot BotAssociationLexBot `pulumi:"lexBot"`
}

// The set of arguments for constructing a BotAssociation resource.
type BotAssociationArgs struct {
	// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
	InstanceId pulumi.StringInput
	// Configuration information of an Amazon Lex (V1) bot. Detailed below.
	LexBot BotAssociationLexBotInput
}

func (BotAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*botAssociationArgs)(nil)).Elem()
}

type BotAssociationInput interface {
	pulumi.Input

	ToBotAssociationOutput() BotAssociationOutput
	ToBotAssociationOutputWithContext(ctx context.Context) BotAssociationOutput
}

func (*BotAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**BotAssociation)(nil)).Elem()
}

func (i *BotAssociation) ToBotAssociationOutput() BotAssociationOutput {
	return i.ToBotAssociationOutputWithContext(context.Background())
}

func (i *BotAssociation) ToBotAssociationOutputWithContext(ctx context.Context) BotAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotAssociationOutput)
}

// BotAssociationArrayInput is an input type that accepts BotAssociationArray and BotAssociationArrayOutput values.
// You can construct a concrete instance of `BotAssociationArrayInput` via:
//
//	BotAssociationArray{ BotAssociationArgs{...} }
type BotAssociationArrayInput interface {
	pulumi.Input

	ToBotAssociationArrayOutput() BotAssociationArrayOutput
	ToBotAssociationArrayOutputWithContext(context.Context) BotAssociationArrayOutput
}

type BotAssociationArray []BotAssociationInput

func (BotAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BotAssociation)(nil)).Elem()
}

func (i BotAssociationArray) ToBotAssociationArrayOutput() BotAssociationArrayOutput {
	return i.ToBotAssociationArrayOutputWithContext(context.Background())
}

func (i BotAssociationArray) ToBotAssociationArrayOutputWithContext(ctx context.Context) BotAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotAssociationArrayOutput)
}

// BotAssociationMapInput is an input type that accepts BotAssociationMap and BotAssociationMapOutput values.
// You can construct a concrete instance of `BotAssociationMapInput` via:
//
//	BotAssociationMap{ "key": BotAssociationArgs{...} }
type BotAssociationMapInput interface {
	pulumi.Input

	ToBotAssociationMapOutput() BotAssociationMapOutput
	ToBotAssociationMapOutputWithContext(context.Context) BotAssociationMapOutput
}

type BotAssociationMap map[string]BotAssociationInput

func (BotAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BotAssociation)(nil)).Elem()
}

func (i BotAssociationMap) ToBotAssociationMapOutput() BotAssociationMapOutput {
	return i.ToBotAssociationMapOutputWithContext(context.Background())
}

func (i BotAssociationMap) ToBotAssociationMapOutputWithContext(ctx context.Context) BotAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotAssociationMapOutput)
}

type BotAssociationOutput struct{ *pulumi.OutputState }

func (BotAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BotAssociation)(nil)).Elem()
}

func (o BotAssociationOutput) ToBotAssociationOutput() BotAssociationOutput {
	return o
}

func (o BotAssociationOutput) ToBotAssociationOutputWithContext(ctx context.Context) BotAssociationOutput {
	return o
}

// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
func (o BotAssociationOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *BotAssociation) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Configuration information of an Amazon Lex (V1) bot. Detailed below.
func (o BotAssociationOutput) LexBot() BotAssociationLexBotOutput {
	return o.ApplyT(func(v *BotAssociation) BotAssociationLexBotOutput { return v.LexBot }).(BotAssociationLexBotOutput)
}

type BotAssociationArrayOutput struct{ *pulumi.OutputState }

func (BotAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BotAssociation)(nil)).Elem()
}

func (o BotAssociationArrayOutput) ToBotAssociationArrayOutput() BotAssociationArrayOutput {
	return o
}

func (o BotAssociationArrayOutput) ToBotAssociationArrayOutputWithContext(ctx context.Context) BotAssociationArrayOutput {
	return o
}

func (o BotAssociationArrayOutput) Index(i pulumi.IntInput) BotAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BotAssociation {
		return vs[0].([]*BotAssociation)[vs[1].(int)]
	}).(BotAssociationOutput)
}

type BotAssociationMapOutput struct{ *pulumi.OutputState }

func (BotAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BotAssociation)(nil)).Elem()
}

func (o BotAssociationMapOutput) ToBotAssociationMapOutput() BotAssociationMapOutput {
	return o
}

func (o BotAssociationMapOutput) ToBotAssociationMapOutputWithContext(ctx context.Context) BotAssociationMapOutput {
	return o
}

func (o BotAssociationMapOutput) MapIndex(k pulumi.StringInput) BotAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BotAssociation {
		return vs[0].(map[string]*BotAssociation)[vs[1].(string)]
	}).(BotAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BotAssociationInput)(nil)).Elem(), &BotAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*BotAssociationArrayInput)(nil)).Elem(), BotAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BotAssociationMapInput)(nil)).Elem(), BotAssociationMap{})
	pulumi.RegisterOutputType(BotAssociationOutput{})
	pulumi.RegisterOutputType(BotAssociationArrayOutput{})
	pulumi.RegisterOutputType(BotAssociationMapOutput{})
}
