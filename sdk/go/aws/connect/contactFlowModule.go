// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package connect

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ContactFlowModule struct {
	pulumi.CustomResourceState

	Arn                 pulumi.StringOutput    `pulumi:"arn"`
	ContactFlowModuleId pulumi.StringOutput    `pulumi:"contactFlowModuleId"`
	Content             pulumi.StringOutput    `pulumi:"content"`
	ContentHash         pulumi.StringPtrOutput `pulumi:"contentHash"`
	Description         pulumi.StringPtrOutput `pulumi:"description"`
	Filename            pulumi.StringPtrOutput `pulumi:"filename"`
	InstanceId          pulumi.StringOutput    `pulumi:"instanceId"`
	Name                pulumi.StringOutput    `pulumi:"name"`
	Tags                pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll             pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewContactFlowModule registers a new resource with the given unique name, arguments, and options.
func NewContactFlowModule(ctx *pulumi.Context,
	name string, args *ContactFlowModuleArgs, opts ...pulumi.ResourceOption) (*ContactFlowModule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	var resource ContactFlowModule
	err := ctx.RegisterResource("aws:connect/contactFlowModule:ContactFlowModule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContactFlowModule gets an existing ContactFlowModule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContactFlowModule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContactFlowModuleState, opts ...pulumi.ResourceOption) (*ContactFlowModule, error) {
	var resource ContactFlowModule
	err := ctx.ReadResource("aws:connect/contactFlowModule:ContactFlowModule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContactFlowModule resources.
type contactFlowModuleState struct {
	Arn                 *string           `pulumi:"arn"`
	ContactFlowModuleId *string           `pulumi:"contactFlowModuleId"`
	Content             *string           `pulumi:"content"`
	ContentHash         *string           `pulumi:"contentHash"`
	Description         *string           `pulumi:"description"`
	Filename            *string           `pulumi:"filename"`
	InstanceId          *string           `pulumi:"instanceId"`
	Name                *string           `pulumi:"name"`
	Tags                map[string]string `pulumi:"tags"`
	TagsAll             map[string]string `pulumi:"tagsAll"`
}

type ContactFlowModuleState struct {
	Arn                 pulumi.StringPtrInput
	ContactFlowModuleId pulumi.StringPtrInput
	Content             pulumi.StringPtrInput
	ContentHash         pulumi.StringPtrInput
	Description         pulumi.StringPtrInput
	Filename            pulumi.StringPtrInput
	InstanceId          pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Tags                pulumi.StringMapInput
	TagsAll             pulumi.StringMapInput
}

func (ContactFlowModuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*contactFlowModuleState)(nil)).Elem()
}

type contactFlowModuleArgs struct {
	Content     *string           `pulumi:"content"`
	ContentHash *string           `pulumi:"contentHash"`
	Description *string           `pulumi:"description"`
	Filename    *string           `pulumi:"filename"`
	InstanceId  string            `pulumi:"instanceId"`
	Name        *string           `pulumi:"name"`
	Tags        map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ContactFlowModule resource.
type ContactFlowModuleArgs struct {
	Content     pulumi.StringPtrInput
	ContentHash pulumi.StringPtrInput
	Description pulumi.StringPtrInput
	Filename    pulumi.StringPtrInput
	InstanceId  pulumi.StringInput
	Name        pulumi.StringPtrInput
	Tags        pulumi.StringMapInput
}

func (ContactFlowModuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*contactFlowModuleArgs)(nil)).Elem()
}

type ContactFlowModuleInput interface {
	pulumi.Input

	ToContactFlowModuleOutput() ContactFlowModuleOutput
	ToContactFlowModuleOutputWithContext(ctx context.Context) ContactFlowModuleOutput
}

func (*ContactFlowModule) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactFlowModule)(nil)).Elem()
}

func (i *ContactFlowModule) ToContactFlowModuleOutput() ContactFlowModuleOutput {
	return i.ToContactFlowModuleOutputWithContext(context.Background())
}

func (i *ContactFlowModule) ToContactFlowModuleOutputWithContext(ctx context.Context) ContactFlowModuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactFlowModuleOutput)
}

// ContactFlowModuleArrayInput is an input type that accepts ContactFlowModuleArray and ContactFlowModuleArrayOutput values.
// You can construct a concrete instance of `ContactFlowModuleArrayInput` via:
//
//	ContactFlowModuleArray{ ContactFlowModuleArgs{...} }
type ContactFlowModuleArrayInput interface {
	pulumi.Input

	ToContactFlowModuleArrayOutput() ContactFlowModuleArrayOutput
	ToContactFlowModuleArrayOutputWithContext(context.Context) ContactFlowModuleArrayOutput
}

type ContactFlowModuleArray []ContactFlowModuleInput

func (ContactFlowModuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContactFlowModule)(nil)).Elem()
}

func (i ContactFlowModuleArray) ToContactFlowModuleArrayOutput() ContactFlowModuleArrayOutput {
	return i.ToContactFlowModuleArrayOutputWithContext(context.Background())
}

func (i ContactFlowModuleArray) ToContactFlowModuleArrayOutputWithContext(ctx context.Context) ContactFlowModuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactFlowModuleArrayOutput)
}

// ContactFlowModuleMapInput is an input type that accepts ContactFlowModuleMap and ContactFlowModuleMapOutput values.
// You can construct a concrete instance of `ContactFlowModuleMapInput` via:
//
//	ContactFlowModuleMap{ "key": ContactFlowModuleArgs{...} }
type ContactFlowModuleMapInput interface {
	pulumi.Input

	ToContactFlowModuleMapOutput() ContactFlowModuleMapOutput
	ToContactFlowModuleMapOutputWithContext(context.Context) ContactFlowModuleMapOutput
}

type ContactFlowModuleMap map[string]ContactFlowModuleInput

func (ContactFlowModuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContactFlowModule)(nil)).Elem()
}

func (i ContactFlowModuleMap) ToContactFlowModuleMapOutput() ContactFlowModuleMapOutput {
	return i.ToContactFlowModuleMapOutputWithContext(context.Background())
}

func (i ContactFlowModuleMap) ToContactFlowModuleMapOutputWithContext(ctx context.Context) ContactFlowModuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactFlowModuleMapOutput)
}

type ContactFlowModuleOutput struct{ *pulumi.OutputState }

func (ContactFlowModuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactFlowModule)(nil)).Elem()
}

func (o ContactFlowModuleOutput) ToContactFlowModuleOutput() ContactFlowModuleOutput {
	return o
}

func (o ContactFlowModuleOutput) ToContactFlowModuleOutputWithContext(ctx context.Context) ContactFlowModuleOutput {
	return o
}

func (o ContactFlowModuleOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ContactFlowModule) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ContactFlowModuleOutput) ContactFlowModuleId() pulumi.StringOutput {
	return o.ApplyT(func(v *ContactFlowModule) pulumi.StringOutput { return v.ContactFlowModuleId }).(pulumi.StringOutput)
}

func (o ContactFlowModuleOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *ContactFlowModule) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

func (o ContactFlowModuleOutput) ContentHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContactFlowModule) pulumi.StringPtrOutput { return v.ContentHash }).(pulumi.StringPtrOutput)
}

func (o ContactFlowModuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContactFlowModule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ContactFlowModuleOutput) Filename() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContactFlowModule) pulumi.StringPtrOutput { return v.Filename }).(pulumi.StringPtrOutput)
}

func (o ContactFlowModuleOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ContactFlowModule) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o ContactFlowModuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ContactFlowModule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ContactFlowModuleOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ContactFlowModule) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ContactFlowModuleOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ContactFlowModule) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type ContactFlowModuleArrayOutput struct{ *pulumi.OutputState }

func (ContactFlowModuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContactFlowModule)(nil)).Elem()
}

func (o ContactFlowModuleArrayOutput) ToContactFlowModuleArrayOutput() ContactFlowModuleArrayOutput {
	return o
}

func (o ContactFlowModuleArrayOutput) ToContactFlowModuleArrayOutputWithContext(ctx context.Context) ContactFlowModuleArrayOutput {
	return o
}

func (o ContactFlowModuleArrayOutput) Index(i pulumi.IntInput) ContactFlowModuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ContactFlowModule {
		return vs[0].([]*ContactFlowModule)[vs[1].(int)]
	}).(ContactFlowModuleOutput)
}

type ContactFlowModuleMapOutput struct{ *pulumi.OutputState }

func (ContactFlowModuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContactFlowModule)(nil)).Elem()
}

func (o ContactFlowModuleMapOutput) ToContactFlowModuleMapOutput() ContactFlowModuleMapOutput {
	return o
}

func (o ContactFlowModuleMapOutput) ToContactFlowModuleMapOutputWithContext(ctx context.Context) ContactFlowModuleMapOutput {
	return o
}

func (o ContactFlowModuleMapOutput) MapIndex(k pulumi.StringInput) ContactFlowModuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ContactFlowModule {
		return vs[0].(map[string]*ContactFlowModule)[vs[1].(string)]
	}).(ContactFlowModuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContactFlowModuleInput)(nil)).Elem(), &ContactFlowModule{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactFlowModuleArrayInput)(nil)).Elem(), ContactFlowModuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactFlowModuleMapInput)(nil)).Elem(), ContactFlowModuleMap{})
	pulumi.RegisterOutputType(ContactFlowModuleOutput{})
	pulumi.RegisterOutputType(ContactFlowModuleArrayOutput{})
	pulumi.RegisterOutputType(ContactFlowModuleMapOutput{})
}
