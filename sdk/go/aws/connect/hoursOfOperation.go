// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package connect

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type HoursOfOperation struct {
	pulumi.CustomResourceState

	Arn         pulumi.StringOutput               `pulumi:"arn"`
	Configs     HoursOfOperationConfigArrayOutput `pulumi:"configs"`
	Description pulumi.StringPtrOutput            `pulumi:"description"`
	// Deprecated: use 'arn' attribute instead
	HoursOfOperationArn pulumi.StringOutput    `pulumi:"hoursOfOperationArn"`
	HoursOfOperationId  pulumi.StringOutput    `pulumi:"hoursOfOperationId"`
	InstanceId          pulumi.StringOutput    `pulumi:"instanceId"`
	Name                pulumi.StringOutput    `pulumi:"name"`
	Tags                pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll             pulumi.StringMapOutput `pulumi:"tagsAll"`
	TimeZone            pulumi.StringOutput    `pulumi:"timeZone"`
}

// NewHoursOfOperation registers a new resource with the given unique name, arguments, and options.
func NewHoursOfOperation(ctx *pulumi.Context,
	name string, args *HoursOfOperationArgs, opts ...pulumi.ResourceOption) (*HoursOfOperation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configs == nil {
		return nil, errors.New("invalid value for required argument 'Configs'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.TimeZone == nil {
		return nil, errors.New("invalid value for required argument 'TimeZone'")
	}
	var resource HoursOfOperation
	err := ctx.RegisterResource("aws:connect/hoursOfOperation:HoursOfOperation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHoursOfOperation gets an existing HoursOfOperation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHoursOfOperation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HoursOfOperationState, opts ...pulumi.ResourceOption) (*HoursOfOperation, error) {
	var resource HoursOfOperation
	err := ctx.ReadResource("aws:connect/hoursOfOperation:HoursOfOperation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HoursOfOperation resources.
type hoursOfOperationState struct {
	Arn         *string                  `pulumi:"arn"`
	Configs     []HoursOfOperationConfig `pulumi:"configs"`
	Description *string                  `pulumi:"description"`
	// Deprecated: use 'arn' attribute instead
	HoursOfOperationArn *string           `pulumi:"hoursOfOperationArn"`
	HoursOfOperationId  *string           `pulumi:"hoursOfOperationId"`
	InstanceId          *string           `pulumi:"instanceId"`
	Name                *string           `pulumi:"name"`
	Tags                map[string]string `pulumi:"tags"`
	TagsAll             map[string]string `pulumi:"tagsAll"`
	TimeZone            *string           `pulumi:"timeZone"`
}

type HoursOfOperationState struct {
	Arn         pulumi.StringPtrInput
	Configs     HoursOfOperationConfigArrayInput
	Description pulumi.StringPtrInput
	// Deprecated: use 'arn' attribute instead
	HoursOfOperationArn pulumi.StringPtrInput
	HoursOfOperationId  pulumi.StringPtrInput
	InstanceId          pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Tags                pulumi.StringMapInput
	TagsAll             pulumi.StringMapInput
	TimeZone            pulumi.StringPtrInput
}

func (HoursOfOperationState) ElementType() reflect.Type {
	return reflect.TypeOf((*hoursOfOperationState)(nil)).Elem()
}

type hoursOfOperationArgs struct {
	Configs     []HoursOfOperationConfig `pulumi:"configs"`
	Description *string                  `pulumi:"description"`
	InstanceId  string                   `pulumi:"instanceId"`
	Name        *string                  `pulumi:"name"`
	Tags        map[string]string        `pulumi:"tags"`
	TimeZone    string                   `pulumi:"timeZone"`
}

// The set of arguments for constructing a HoursOfOperation resource.
type HoursOfOperationArgs struct {
	Configs     HoursOfOperationConfigArrayInput
	Description pulumi.StringPtrInput
	InstanceId  pulumi.StringInput
	Name        pulumi.StringPtrInput
	Tags        pulumi.StringMapInput
	TimeZone    pulumi.StringInput
}

func (HoursOfOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hoursOfOperationArgs)(nil)).Elem()
}

type HoursOfOperationInput interface {
	pulumi.Input

	ToHoursOfOperationOutput() HoursOfOperationOutput
	ToHoursOfOperationOutputWithContext(ctx context.Context) HoursOfOperationOutput
}

func (*HoursOfOperation) ElementType() reflect.Type {
	return reflect.TypeOf((**HoursOfOperation)(nil)).Elem()
}

func (i *HoursOfOperation) ToHoursOfOperationOutput() HoursOfOperationOutput {
	return i.ToHoursOfOperationOutputWithContext(context.Background())
}

func (i *HoursOfOperation) ToHoursOfOperationOutputWithContext(ctx context.Context) HoursOfOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HoursOfOperationOutput)
}

// HoursOfOperationArrayInput is an input type that accepts HoursOfOperationArray and HoursOfOperationArrayOutput values.
// You can construct a concrete instance of `HoursOfOperationArrayInput` via:
//
//	HoursOfOperationArray{ HoursOfOperationArgs{...} }
type HoursOfOperationArrayInput interface {
	pulumi.Input

	ToHoursOfOperationArrayOutput() HoursOfOperationArrayOutput
	ToHoursOfOperationArrayOutputWithContext(context.Context) HoursOfOperationArrayOutput
}

type HoursOfOperationArray []HoursOfOperationInput

func (HoursOfOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HoursOfOperation)(nil)).Elem()
}

func (i HoursOfOperationArray) ToHoursOfOperationArrayOutput() HoursOfOperationArrayOutput {
	return i.ToHoursOfOperationArrayOutputWithContext(context.Background())
}

func (i HoursOfOperationArray) ToHoursOfOperationArrayOutputWithContext(ctx context.Context) HoursOfOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HoursOfOperationArrayOutput)
}

// HoursOfOperationMapInput is an input type that accepts HoursOfOperationMap and HoursOfOperationMapOutput values.
// You can construct a concrete instance of `HoursOfOperationMapInput` via:
//
//	HoursOfOperationMap{ "key": HoursOfOperationArgs{...} }
type HoursOfOperationMapInput interface {
	pulumi.Input

	ToHoursOfOperationMapOutput() HoursOfOperationMapOutput
	ToHoursOfOperationMapOutputWithContext(context.Context) HoursOfOperationMapOutput
}

type HoursOfOperationMap map[string]HoursOfOperationInput

func (HoursOfOperationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HoursOfOperation)(nil)).Elem()
}

func (i HoursOfOperationMap) ToHoursOfOperationMapOutput() HoursOfOperationMapOutput {
	return i.ToHoursOfOperationMapOutputWithContext(context.Background())
}

func (i HoursOfOperationMap) ToHoursOfOperationMapOutputWithContext(ctx context.Context) HoursOfOperationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HoursOfOperationMapOutput)
}

type HoursOfOperationOutput struct{ *pulumi.OutputState }

func (HoursOfOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HoursOfOperation)(nil)).Elem()
}

func (o HoursOfOperationOutput) ToHoursOfOperationOutput() HoursOfOperationOutput {
	return o
}

func (o HoursOfOperationOutput) ToHoursOfOperationOutputWithContext(ctx context.Context) HoursOfOperationOutput {
	return o
}

func (o HoursOfOperationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *HoursOfOperation) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o HoursOfOperationOutput) Configs() HoursOfOperationConfigArrayOutput {
	return o.ApplyT(func(v *HoursOfOperation) HoursOfOperationConfigArrayOutput { return v.Configs }).(HoursOfOperationConfigArrayOutput)
}

func (o HoursOfOperationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HoursOfOperation) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Deprecated: use 'arn' attribute instead
func (o HoursOfOperationOutput) HoursOfOperationArn() pulumi.StringOutput {
	return o.ApplyT(func(v *HoursOfOperation) pulumi.StringOutput { return v.HoursOfOperationArn }).(pulumi.StringOutput)
}

func (o HoursOfOperationOutput) HoursOfOperationId() pulumi.StringOutput {
	return o.ApplyT(func(v *HoursOfOperation) pulumi.StringOutput { return v.HoursOfOperationId }).(pulumi.StringOutput)
}

func (o HoursOfOperationOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *HoursOfOperation) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o HoursOfOperationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HoursOfOperation) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o HoursOfOperationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HoursOfOperation) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o HoursOfOperationOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HoursOfOperation) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o HoursOfOperationOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v *HoursOfOperation) pulumi.StringOutput { return v.TimeZone }).(pulumi.StringOutput)
}

type HoursOfOperationArrayOutput struct{ *pulumi.OutputState }

func (HoursOfOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HoursOfOperation)(nil)).Elem()
}

func (o HoursOfOperationArrayOutput) ToHoursOfOperationArrayOutput() HoursOfOperationArrayOutput {
	return o
}

func (o HoursOfOperationArrayOutput) ToHoursOfOperationArrayOutputWithContext(ctx context.Context) HoursOfOperationArrayOutput {
	return o
}

func (o HoursOfOperationArrayOutput) Index(i pulumi.IntInput) HoursOfOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HoursOfOperation {
		return vs[0].([]*HoursOfOperation)[vs[1].(int)]
	}).(HoursOfOperationOutput)
}

type HoursOfOperationMapOutput struct{ *pulumi.OutputState }

func (HoursOfOperationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HoursOfOperation)(nil)).Elem()
}

func (o HoursOfOperationMapOutput) ToHoursOfOperationMapOutput() HoursOfOperationMapOutput {
	return o
}

func (o HoursOfOperationMapOutput) ToHoursOfOperationMapOutputWithContext(ctx context.Context) HoursOfOperationMapOutput {
	return o
}

func (o HoursOfOperationMapOutput) MapIndex(k pulumi.StringInput) HoursOfOperationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HoursOfOperation {
		return vs[0].(map[string]*HoursOfOperation)[vs[1].(string)]
	}).(HoursOfOperationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HoursOfOperationInput)(nil)).Elem(), &HoursOfOperation{})
	pulumi.RegisterInputType(reflect.TypeOf((*HoursOfOperationArrayInput)(nil)).Elem(), HoursOfOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HoursOfOperationMapInput)(nil)).Elem(), HoursOfOperationMap{})
	pulumi.RegisterOutputType(HoursOfOperationOutput{})
	pulumi.RegisterOutputType(HoursOfOperationArrayOutput{})
	pulumi.RegisterOutputType(HoursOfOperationMapOutput{})
}
