// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package connect

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Queue struct {
	pulumi.CustomResourceState

	Arn                        pulumi.StringOutput                `pulumi:"arn"`
	Description                pulumi.StringPtrOutput             `pulumi:"description"`
	HoursOfOperationId         pulumi.StringOutput                `pulumi:"hoursOfOperationId"`
	InstanceId                 pulumi.StringOutput                `pulumi:"instanceId"`
	MaxContacts                pulumi.IntPtrOutput                `pulumi:"maxContacts"`
	Name                       pulumi.StringOutput                `pulumi:"name"`
	OutboundCallerConfig       QueueOutboundCallerConfigPtrOutput `pulumi:"outboundCallerConfig"`
	QueueId                    pulumi.StringOutput                `pulumi:"queueId"`
	QuickConnectIds            pulumi.StringArrayOutput           `pulumi:"quickConnectIds"`
	QuickConnectIdsAssociateds pulumi.StringArrayOutput           `pulumi:"quickConnectIdsAssociateds"`
	Status                     pulumi.StringOutput                `pulumi:"status"`
	Tags                       pulumi.StringMapOutput             `pulumi:"tags"`
	TagsAll                    pulumi.StringMapOutput             `pulumi:"tagsAll"`
}

// NewQueue registers a new resource with the given unique name, arguments, and options.
func NewQueue(ctx *pulumi.Context,
	name string, args *QueueArgs, opts ...pulumi.ResourceOption) (*Queue, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HoursOfOperationId == nil {
		return nil, errors.New("invalid value for required argument 'HoursOfOperationId'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	var resource Queue
	err := ctx.RegisterResource("aws:connect/queue:Queue", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQueue gets an existing Queue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQueue(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QueueState, opts ...pulumi.ResourceOption) (*Queue, error) {
	var resource Queue
	err := ctx.ReadResource("aws:connect/queue:Queue", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Queue resources.
type queueState struct {
	Arn                        *string                    `pulumi:"arn"`
	Description                *string                    `pulumi:"description"`
	HoursOfOperationId         *string                    `pulumi:"hoursOfOperationId"`
	InstanceId                 *string                    `pulumi:"instanceId"`
	MaxContacts                *int                       `pulumi:"maxContacts"`
	Name                       *string                    `pulumi:"name"`
	OutboundCallerConfig       *QueueOutboundCallerConfig `pulumi:"outboundCallerConfig"`
	QueueId                    *string                    `pulumi:"queueId"`
	QuickConnectIds            []string                   `pulumi:"quickConnectIds"`
	QuickConnectIdsAssociateds []string                   `pulumi:"quickConnectIdsAssociateds"`
	Status                     *string                    `pulumi:"status"`
	Tags                       map[string]string          `pulumi:"tags"`
	TagsAll                    map[string]string          `pulumi:"tagsAll"`
}

type QueueState struct {
	Arn                        pulumi.StringPtrInput
	Description                pulumi.StringPtrInput
	HoursOfOperationId         pulumi.StringPtrInput
	InstanceId                 pulumi.StringPtrInput
	MaxContacts                pulumi.IntPtrInput
	Name                       pulumi.StringPtrInput
	OutboundCallerConfig       QueueOutboundCallerConfigPtrInput
	QueueId                    pulumi.StringPtrInput
	QuickConnectIds            pulumi.StringArrayInput
	QuickConnectIdsAssociateds pulumi.StringArrayInput
	Status                     pulumi.StringPtrInput
	Tags                       pulumi.StringMapInput
	TagsAll                    pulumi.StringMapInput
}

func (QueueState) ElementType() reflect.Type {
	return reflect.TypeOf((*queueState)(nil)).Elem()
}

type queueArgs struct {
	Description          *string                    `pulumi:"description"`
	HoursOfOperationId   string                     `pulumi:"hoursOfOperationId"`
	InstanceId           string                     `pulumi:"instanceId"`
	MaxContacts          *int                       `pulumi:"maxContacts"`
	Name                 *string                    `pulumi:"name"`
	OutboundCallerConfig *QueueOutboundCallerConfig `pulumi:"outboundCallerConfig"`
	QuickConnectIds      []string                   `pulumi:"quickConnectIds"`
	Status               *string                    `pulumi:"status"`
	Tags                 map[string]string          `pulumi:"tags"`
}

// The set of arguments for constructing a Queue resource.
type QueueArgs struct {
	Description          pulumi.StringPtrInput
	HoursOfOperationId   pulumi.StringInput
	InstanceId           pulumi.StringInput
	MaxContacts          pulumi.IntPtrInput
	Name                 pulumi.StringPtrInput
	OutboundCallerConfig QueueOutboundCallerConfigPtrInput
	QuickConnectIds      pulumi.StringArrayInput
	Status               pulumi.StringPtrInput
	Tags                 pulumi.StringMapInput
}

func (QueueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*queueArgs)(nil)).Elem()
}

type QueueInput interface {
	pulumi.Input

	ToQueueOutput() QueueOutput
	ToQueueOutputWithContext(ctx context.Context) QueueOutput
}

func (*Queue) ElementType() reflect.Type {
	return reflect.TypeOf((**Queue)(nil)).Elem()
}

func (i *Queue) ToQueueOutput() QueueOutput {
	return i.ToQueueOutputWithContext(context.Background())
}

func (i *Queue) ToQueueOutputWithContext(ctx context.Context) QueueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueOutput)
}

// QueueArrayInput is an input type that accepts QueueArray and QueueArrayOutput values.
// You can construct a concrete instance of `QueueArrayInput` via:
//
//	QueueArray{ QueueArgs{...} }
type QueueArrayInput interface {
	pulumi.Input

	ToQueueArrayOutput() QueueArrayOutput
	ToQueueArrayOutputWithContext(context.Context) QueueArrayOutput
}

type QueueArray []QueueInput

func (QueueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Queue)(nil)).Elem()
}

func (i QueueArray) ToQueueArrayOutput() QueueArrayOutput {
	return i.ToQueueArrayOutputWithContext(context.Background())
}

func (i QueueArray) ToQueueArrayOutputWithContext(ctx context.Context) QueueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueArrayOutput)
}

// QueueMapInput is an input type that accepts QueueMap and QueueMapOutput values.
// You can construct a concrete instance of `QueueMapInput` via:
//
//	QueueMap{ "key": QueueArgs{...} }
type QueueMapInput interface {
	pulumi.Input

	ToQueueMapOutput() QueueMapOutput
	ToQueueMapOutputWithContext(context.Context) QueueMapOutput
}

type QueueMap map[string]QueueInput

func (QueueMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Queue)(nil)).Elem()
}

func (i QueueMap) ToQueueMapOutput() QueueMapOutput {
	return i.ToQueueMapOutputWithContext(context.Background())
}

func (i QueueMap) ToQueueMapOutputWithContext(ctx context.Context) QueueMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueMapOutput)
}

type QueueOutput struct{ *pulumi.OutputState }

func (QueueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Queue)(nil)).Elem()
}

func (o QueueOutput) ToQueueOutput() QueueOutput {
	return o
}

func (o QueueOutput) ToQueueOutputWithContext(ctx context.Context) QueueOutput {
	return o
}

func (o QueueOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o QueueOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o QueueOutput) HoursOfOperationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.HoursOfOperationId }).(pulumi.StringOutput)
}

func (o QueueOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o QueueOutput) MaxContacts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Queue) pulumi.IntPtrOutput { return v.MaxContacts }).(pulumi.IntPtrOutput)
}

func (o QueueOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o QueueOutput) OutboundCallerConfig() QueueOutboundCallerConfigPtrOutput {
	return o.ApplyT(func(v *Queue) QueueOutboundCallerConfigPtrOutput { return v.OutboundCallerConfig }).(QueueOutboundCallerConfigPtrOutput)
}

func (o QueueOutput) QueueId() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.QueueId }).(pulumi.StringOutput)
}

func (o QueueOutput) QuickConnectIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringArrayOutput { return v.QuickConnectIds }).(pulumi.StringArrayOutput)
}

func (o QueueOutput) QuickConnectIdsAssociateds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringArrayOutput { return v.QuickConnectIdsAssociateds }).(pulumi.StringArrayOutput)
}

func (o QueueOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o QueueOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o QueueOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type QueueArrayOutput struct{ *pulumi.OutputState }

func (QueueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Queue)(nil)).Elem()
}

func (o QueueArrayOutput) ToQueueArrayOutput() QueueArrayOutput {
	return o
}

func (o QueueArrayOutput) ToQueueArrayOutputWithContext(ctx context.Context) QueueArrayOutput {
	return o
}

func (o QueueArrayOutput) Index(i pulumi.IntInput) QueueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Queue {
		return vs[0].([]*Queue)[vs[1].(int)]
	}).(QueueOutput)
}

type QueueMapOutput struct{ *pulumi.OutputState }

func (QueueMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Queue)(nil)).Elem()
}

func (o QueueMapOutput) ToQueueMapOutput() QueueMapOutput {
	return o
}

func (o QueueMapOutput) ToQueueMapOutputWithContext(ctx context.Context) QueueMapOutput {
	return o
}

func (o QueueMapOutput) MapIndex(k pulumi.StringInput) QueueOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Queue {
		return vs[0].(map[string]*Queue)[vs[1].(string)]
	}).(QueueOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QueueInput)(nil)).Elem(), &Queue{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueueArrayInput)(nil)).Elem(), QueueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueueMapInput)(nil)).Elem(), QueueMap{})
	pulumi.RegisterOutputType(QueueOutput{})
	pulumi.RegisterOutputType(QueueArrayOutput{})
	pulumi.RegisterOutputType(QueueMapOutput{})
}
