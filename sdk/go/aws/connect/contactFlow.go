// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package connect

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ContactFlow struct {
	pulumi.CustomResourceState

	Arn           pulumi.StringOutput    `pulumi:"arn"`
	ContactFlowId pulumi.StringOutput    `pulumi:"contactFlowId"`
	Content       pulumi.StringOutput    `pulumi:"content"`
	ContentHash   pulumi.StringPtrOutput `pulumi:"contentHash"`
	Description   pulumi.StringPtrOutput `pulumi:"description"`
	Filename      pulumi.StringPtrOutput `pulumi:"filename"`
	InstanceId    pulumi.StringOutput    `pulumi:"instanceId"`
	Name          pulumi.StringOutput    `pulumi:"name"`
	Tags          pulumi.StringMapOutput `pulumi:"tags"`
	TagsAll       pulumi.StringMapOutput `pulumi:"tagsAll"`
	Type          pulumi.StringPtrOutput `pulumi:"type"`
}

// NewContactFlow registers a new resource with the given unique name, arguments, and options.
func NewContactFlow(ctx *pulumi.Context,
	name string, args *ContactFlowArgs, opts ...pulumi.ResourceOption) (*ContactFlow, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	var resource ContactFlow
	err := ctx.RegisterResource("aws:connect/contactFlow:ContactFlow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContactFlow gets an existing ContactFlow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContactFlow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContactFlowState, opts ...pulumi.ResourceOption) (*ContactFlow, error) {
	var resource ContactFlow
	err := ctx.ReadResource("aws:connect/contactFlow:ContactFlow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContactFlow resources.
type contactFlowState struct {
	Arn           *string           `pulumi:"arn"`
	ContactFlowId *string           `pulumi:"contactFlowId"`
	Content       *string           `pulumi:"content"`
	ContentHash   *string           `pulumi:"contentHash"`
	Description   *string           `pulumi:"description"`
	Filename      *string           `pulumi:"filename"`
	InstanceId    *string           `pulumi:"instanceId"`
	Name          *string           `pulumi:"name"`
	Tags          map[string]string `pulumi:"tags"`
	TagsAll       map[string]string `pulumi:"tagsAll"`
	Type          *string           `pulumi:"type"`
}

type ContactFlowState struct {
	Arn           pulumi.StringPtrInput
	ContactFlowId pulumi.StringPtrInput
	Content       pulumi.StringPtrInput
	ContentHash   pulumi.StringPtrInput
	Description   pulumi.StringPtrInput
	Filename      pulumi.StringPtrInput
	InstanceId    pulumi.StringPtrInput
	Name          pulumi.StringPtrInput
	Tags          pulumi.StringMapInput
	TagsAll       pulumi.StringMapInput
	Type          pulumi.StringPtrInput
}

func (ContactFlowState) ElementType() reflect.Type {
	return reflect.TypeOf((*contactFlowState)(nil)).Elem()
}

type contactFlowArgs struct {
	Content     *string           `pulumi:"content"`
	ContentHash *string           `pulumi:"contentHash"`
	Description *string           `pulumi:"description"`
	Filename    *string           `pulumi:"filename"`
	InstanceId  string            `pulumi:"instanceId"`
	Name        *string           `pulumi:"name"`
	Tags        map[string]string `pulumi:"tags"`
	Type        *string           `pulumi:"type"`
}

// The set of arguments for constructing a ContactFlow resource.
type ContactFlowArgs struct {
	Content     pulumi.StringPtrInput
	ContentHash pulumi.StringPtrInput
	Description pulumi.StringPtrInput
	Filename    pulumi.StringPtrInput
	InstanceId  pulumi.StringInput
	Name        pulumi.StringPtrInput
	Tags        pulumi.StringMapInput
	Type        pulumi.StringPtrInput
}

func (ContactFlowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*contactFlowArgs)(nil)).Elem()
}

type ContactFlowInput interface {
	pulumi.Input

	ToContactFlowOutput() ContactFlowOutput
	ToContactFlowOutputWithContext(ctx context.Context) ContactFlowOutput
}

func (*ContactFlow) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactFlow)(nil)).Elem()
}

func (i *ContactFlow) ToContactFlowOutput() ContactFlowOutput {
	return i.ToContactFlowOutputWithContext(context.Background())
}

func (i *ContactFlow) ToContactFlowOutputWithContext(ctx context.Context) ContactFlowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactFlowOutput)
}

// ContactFlowArrayInput is an input type that accepts ContactFlowArray and ContactFlowArrayOutput values.
// You can construct a concrete instance of `ContactFlowArrayInput` via:
//
//	ContactFlowArray{ ContactFlowArgs{...} }
type ContactFlowArrayInput interface {
	pulumi.Input

	ToContactFlowArrayOutput() ContactFlowArrayOutput
	ToContactFlowArrayOutputWithContext(context.Context) ContactFlowArrayOutput
}

type ContactFlowArray []ContactFlowInput

func (ContactFlowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContactFlow)(nil)).Elem()
}

func (i ContactFlowArray) ToContactFlowArrayOutput() ContactFlowArrayOutput {
	return i.ToContactFlowArrayOutputWithContext(context.Background())
}

func (i ContactFlowArray) ToContactFlowArrayOutputWithContext(ctx context.Context) ContactFlowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactFlowArrayOutput)
}

// ContactFlowMapInput is an input type that accepts ContactFlowMap and ContactFlowMapOutput values.
// You can construct a concrete instance of `ContactFlowMapInput` via:
//
//	ContactFlowMap{ "key": ContactFlowArgs{...} }
type ContactFlowMapInput interface {
	pulumi.Input

	ToContactFlowMapOutput() ContactFlowMapOutput
	ToContactFlowMapOutputWithContext(context.Context) ContactFlowMapOutput
}

type ContactFlowMap map[string]ContactFlowInput

func (ContactFlowMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContactFlow)(nil)).Elem()
}

func (i ContactFlowMap) ToContactFlowMapOutput() ContactFlowMapOutput {
	return i.ToContactFlowMapOutputWithContext(context.Background())
}

func (i ContactFlowMap) ToContactFlowMapOutputWithContext(ctx context.Context) ContactFlowMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactFlowMapOutput)
}

type ContactFlowOutput struct{ *pulumi.OutputState }

func (ContactFlowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactFlow)(nil)).Elem()
}

func (o ContactFlowOutput) ToContactFlowOutput() ContactFlowOutput {
	return o
}

func (o ContactFlowOutput) ToContactFlowOutputWithContext(ctx context.Context) ContactFlowOutput {
	return o
}

func (o ContactFlowOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ContactFlow) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ContactFlowOutput) ContactFlowId() pulumi.StringOutput {
	return o.ApplyT(func(v *ContactFlow) pulumi.StringOutput { return v.ContactFlowId }).(pulumi.StringOutput)
}

func (o ContactFlowOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *ContactFlow) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

func (o ContactFlowOutput) ContentHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContactFlow) pulumi.StringPtrOutput { return v.ContentHash }).(pulumi.StringPtrOutput)
}

func (o ContactFlowOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContactFlow) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ContactFlowOutput) Filename() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContactFlow) pulumi.StringPtrOutput { return v.Filename }).(pulumi.StringPtrOutput)
}

func (o ContactFlowOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ContactFlow) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o ContactFlowOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ContactFlow) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ContactFlowOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ContactFlow) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ContactFlowOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ContactFlow) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

func (o ContactFlowOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContactFlow) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

type ContactFlowArrayOutput struct{ *pulumi.OutputState }

func (ContactFlowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContactFlow)(nil)).Elem()
}

func (o ContactFlowArrayOutput) ToContactFlowArrayOutput() ContactFlowArrayOutput {
	return o
}

func (o ContactFlowArrayOutput) ToContactFlowArrayOutputWithContext(ctx context.Context) ContactFlowArrayOutput {
	return o
}

func (o ContactFlowArrayOutput) Index(i pulumi.IntInput) ContactFlowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ContactFlow {
		return vs[0].([]*ContactFlow)[vs[1].(int)]
	}).(ContactFlowOutput)
}

type ContactFlowMapOutput struct{ *pulumi.OutputState }

func (ContactFlowMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContactFlow)(nil)).Elem()
}

func (o ContactFlowMapOutput) ToContactFlowMapOutput() ContactFlowMapOutput {
	return o
}

func (o ContactFlowMapOutput) ToContactFlowMapOutputWithContext(ctx context.Context) ContactFlowMapOutput {
	return o
}

func (o ContactFlowMapOutput) MapIndex(k pulumi.StringInput) ContactFlowOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ContactFlow {
		return vs[0].(map[string]*ContactFlow)[vs[1].(string)]
	}).(ContactFlowOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContactFlowInput)(nil)).Elem(), &ContactFlow{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactFlowArrayInput)(nil)).Elem(), ContactFlowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactFlowMapInput)(nil)).Elem(), ContactFlowMap{})
	pulumi.RegisterOutputType(ContactFlowOutput{})
	pulumi.RegisterOutputType(ContactFlowArrayOutput{})
	pulumi.RegisterOutputType(ContactFlowMapOutput{})
}
