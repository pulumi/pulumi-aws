// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package connect

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Amazon Connect User Hierarchy Group resource. For more information see
// [Amazon Connect: Getting Started](https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-get-started.html)
//
// > **NOTE:** The User Hierarchy Structure must be created before creating a User Hierarchy Group.
//
// ## Example Usage
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/connect"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := connect.NewUserHierarchyGroup(ctx, "example", &connect.UserHierarchyGroupArgs{
//				InstanceId: pulumi.String("aaaaaaaa-bbbb-cccc-dddd-111111111111"),
//				Tags: pulumi.StringMap{
//					"Name": pulumi.String("Example User Hierarchy Group"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### With a parent group
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/connect"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			parent, err := connect.NewUserHierarchyGroup(ctx, "parent", &connect.UserHierarchyGroupArgs{
//				InstanceId: pulumi.String("aaaaaaaa-bbbb-cccc-dddd-111111111111"),
//				Tags: pulumi.StringMap{
//					"Name": pulumi.String("Example User Hierarchy Group Parent"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = connect.NewUserHierarchyGroup(ctx, "child", &connect.UserHierarchyGroupArgs{
//				InstanceId:    pulumi.String("aaaaaaaa-bbbb-cccc-dddd-111111111111"),
//				ParentGroupId: parent.HierarchyGroupId,
//				Tags: pulumi.StringMap{
//					"Name": pulumi.String("Example User Hierarchy Group Child"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Amazon Connect User Hierarchy Groups can be imported using the `instance_id` and `hierarchy_group_id` separated by a colon (`:`), e.g.,
//
// ```sh
//
//	$ pulumi import aws:connect/userHierarchyGroup:UserHierarchyGroup example f1288a1f-6193-445a-b47e-af739b2:c1d4e5f6-1b3c-1b3c-1b3c-c1d4e5f6c1d4e5
//
// ```
type UserHierarchyGroup struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the hierarchy group.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The identifier for the hierarchy group.
	HierarchyGroupId pulumi.StringOutput `pulumi:"hierarchyGroupId"`
	// A block that contains information about the levels in the hierarchy group. The `hierarchyPath` block is documented below.
	HierarchyPaths UserHierarchyGroupHierarchyPathArrayOutput `pulumi:"hierarchyPaths"`
	// Specifies the identifier of the hosting Amazon Connect Instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The identifier of the level in the hierarchy group.
	LevelId pulumi.StringOutput `pulumi:"levelId"`
	// The name of the user hierarchy group. Must not be more than 100 characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// The identifier for the parent hierarchy group. The user hierarchy is created at level one if the parent group ID is null.
	ParentGroupId pulumi.StringPtrOutput `pulumi:"parentGroupId"`
	// Tags to apply to the hierarchy group. If configured with a provider
	// `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapOutput `pulumi:"tagsAll"`
}

// NewUserHierarchyGroup registers a new resource with the given unique name, arguments, and options.
func NewUserHierarchyGroup(ctx *pulumi.Context,
	name string, args *UserHierarchyGroupArgs, opts ...pulumi.ResourceOption) (*UserHierarchyGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	var resource UserHierarchyGroup
	err := ctx.RegisterResource("aws:connect/userHierarchyGroup:UserHierarchyGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserHierarchyGroup gets an existing UserHierarchyGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserHierarchyGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserHierarchyGroupState, opts ...pulumi.ResourceOption) (*UserHierarchyGroup, error) {
	var resource UserHierarchyGroup
	err := ctx.ReadResource("aws:connect/userHierarchyGroup:UserHierarchyGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserHierarchyGroup resources.
type userHierarchyGroupState struct {
	// The Amazon Resource Name (ARN) of the hierarchy group.
	Arn *string `pulumi:"arn"`
	// The identifier for the hierarchy group.
	HierarchyGroupId *string `pulumi:"hierarchyGroupId"`
	// A block that contains information about the levels in the hierarchy group. The `hierarchyPath` block is documented below.
	HierarchyPaths []UserHierarchyGroupHierarchyPath `pulumi:"hierarchyPaths"`
	// Specifies the identifier of the hosting Amazon Connect Instance.
	InstanceId *string `pulumi:"instanceId"`
	// The identifier of the level in the hierarchy group.
	LevelId *string `pulumi:"levelId"`
	// The name of the user hierarchy group. Must not be more than 100 characters.
	Name *string `pulumi:"name"`
	// The identifier for the parent hierarchy group. The user hierarchy is created at level one if the parent group ID is null.
	ParentGroupId *string `pulumi:"parentGroupId"`
	// Tags to apply to the hierarchy group. If configured with a provider
	// `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type UserHierarchyGroupState struct {
	// The Amazon Resource Name (ARN) of the hierarchy group.
	Arn pulumi.StringPtrInput
	// The identifier for the hierarchy group.
	HierarchyGroupId pulumi.StringPtrInput
	// A block that contains information about the levels in the hierarchy group. The `hierarchyPath` block is documented below.
	HierarchyPaths UserHierarchyGroupHierarchyPathArrayInput
	// Specifies the identifier of the hosting Amazon Connect Instance.
	InstanceId pulumi.StringPtrInput
	// The identifier of the level in the hierarchy group.
	LevelId pulumi.StringPtrInput
	// The name of the user hierarchy group. Must not be more than 100 characters.
	Name pulumi.StringPtrInput
	// The identifier for the parent hierarchy group. The user hierarchy is created at level one if the parent group ID is null.
	ParentGroupId pulumi.StringPtrInput
	// Tags to apply to the hierarchy group. If configured with a provider
	// `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumi.StringMapInput
}

func (UserHierarchyGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*userHierarchyGroupState)(nil)).Elem()
}

type userHierarchyGroupArgs struct {
	// Specifies the identifier of the hosting Amazon Connect Instance.
	InstanceId string `pulumi:"instanceId"`
	// The name of the user hierarchy group. Must not be more than 100 characters.
	Name *string `pulumi:"name"`
	// The identifier for the parent hierarchy group. The user hierarchy is created at level one if the parent group ID is null.
	ParentGroupId *string `pulumi:"parentGroupId"`
	// Tags to apply to the hierarchy group. If configured with a provider
	// `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a UserHierarchyGroup resource.
type UserHierarchyGroupArgs struct {
	// Specifies the identifier of the hosting Amazon Connect Instance.
	InstanceId pulumi.StringInput
	// The name of the user hierarchy group. Must not be more than 100 characters.
	Name pulumi.StringPtrInput
	// The identifier for the parent hierarchy group. The user hierarchy is created at level one if the parent group ID is null.
	ParentGroupId pulumi.StringPtrInput
	// Tags to apply to the hierarchy group. If configured with a provider
	// `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput
}

func (UserHierarchyGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userHierarchyGroupArgs)(nil)).Elem()
}

type UserHierarchyGroupInput interface {
	pulumi.Input

	ToUserHierarchyGroupOutput() UserHierarchyGroupOutput
	ToUserHierarchyGroupOutputWithContext(ctx context.Context) UserHierarchyGroupOutput
}

func (*UserHierarchyGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**UserHierarchyGroup)(nil)).Elem()
}

func (i *UserHierarchyGroup) ToUserHierarchyGroupOutput() UserHierarchyGroupOutput {
	return i.ToUserHierarchyGroupOutputWithContext(context.Background())
}

func (i *UserHierarchyGroup) ToUserHierarchyGroupOutputWithContext(ctx context.Context) UserHierarchyGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserHierarchyGroupOutput)
}

// UserHierarchyGroupArrayInput is an input type that accepts UserHierarchyGroupArray and UserHierarchyGroupArrayOutput values.
// You can construct a concrete instance of `UserHierarchyGroupArrayInput` via:
//
//	UserHierarchyGroupArray{ UserHierarchyGroupArgs{...} }
type UserHierarchyGroupArrayInput interface {
	pulumi.Input

	ToUserHierarchyGroupArrayOutput() UserHierarchyGroupArrayOutput
	ToUserHierarchyGroupArrayOutputWithContext(context.Context) UserHierarchyGroupArrayOutput
}

type UserHierarchyGroupArray []UserHierarchyGroupInput

func (UserHierarchyGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserHierarchyGroup)(nil)).Elem()
}

func (i UserHierarchyGroupArray) ToUserHierarchyGroupArrayOutput() UserHierarchyGroupArrayOutput {
	return i.ToUserHierarchyGroupArrayOutputWithContext(context.Background())
}

func (i UserHierarchyGroupArray) ToUserHierarchyGroupArrayOutputWithContext(ctx context.Context) UserHierarchyGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserHierarchyGroupArrayOutput)
}

// UserHierarchyGroupMapInput is an input type that accepts UserHierarchyGroupMap and UserHierarchyGroupMapOutput values.
// You can construct a concrete instance of `UserHierarchyGroupMapInput` via:
//
//	UserHierarchyGroupMap{ "key": UserHierarchyGroupArgs{...} }
type UserHierarchyGroupMapInput interface {
	pulumi.Input

	ToUserHierarchyGroupMapOutput() UserHierarchyGroupMapOutput
	ToUserHierarchyGroupMapOutputWithContext(context.Context) UserHierarchyGroupMapOutput
}

type UserHierarchyGroupMap map[string]UserHierarchyGroupInput

func (UserHierarchyGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserHierarchyGroup)(nil)).Elem()
}

func (i UserHierarchyGroupMap) ToUserHierarchyGroupMapOutput() UserHierarchyGroupMapOutput {
	return i.ToUserHierarchyGroupMapOutputWithContext(context.Background())
}

func (i UserHierarchyGroupMap) ToUserHierarchyGroupMapOutputWithContext(ctx context.Context) UserHierarchyGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserHierarchyGroupMapOutput)
}

type UserHierarchyGroupOutput struct{ *pulumi.OutputState }

func (UserHierarchyGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserHierarchyGroup)(nil)).Elem()
}

func (o UserHierarchyGroupOutput) ToUserHierarchyGroupOutput() UserHierarchyGroupOutput {
	return o
}

func (o UserHierarchyGroupOutput) ToUserHierarchyGroupOutputWithContext(ctx context.Context) UserHierarchyGroupOutput {
	return o
}

// The Amazon Resource Name (ARN) of the hierarchy group.
func (o UserHierarchyGroupOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *UserHierarchyGroup) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The identifier for the hierarchy group.
func (o UserHierarchyGroupOutput) HierarchyGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserHierarchyGroup) pulumi.StringOutput { return v.HierarchyGroupId }).(pulumi.StringOutput)
}

// A block that contains information about the levels in the hierarchy group. The `hierarchyPath` block is documented below.
func (o UserHierarchyGroupOutput) HierarchyPaths() UserHierarchyGroupHierarchyPathArrayOutput {
	return o.ApplyT(func(v *UserHierarchyGroup) UserHierarchyGroupHierarchyPathArrayOutput { return v.HierarchyPaths }).(UserHierarchyGroupHierarchyPathArrayOutput)
}

// Specifies the identifier of the hosting Amazon Connect Instance.
func (o UserHierarchyGroupOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserHierarchyGroup) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The identifier of the level in the hierarchy group.
func (o UserHierarchyGroupOutput) LevelId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserHierarchyGroup) pulumi.StringOutput { return v.LevelId }).(pulumi.StringOutput)
}

// The name of the user hierarchy group. Must not be more than 100 characters.
func (o UserHierarchyGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UserHierarchyGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The identifier for the parent hierarchy group. The user hierarchy is created at level one if the parent group ID is null.
func (o UserHierarchyGroupOutput) ParentGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserHierarchyGroup) pulumi.StringPtrOutput { return v.ParentGroupId }).(pulumi.StringPtrOutput)
}

// Tags to apply to the hierarchy group. If configured with a provider
// `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o UserHierarchyGroupOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *UserHierarchyGroup) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o UserHierarchyGroupOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *UserHierarchyGroup) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type UserHierarchyGroupArrayOutput struct{ *pulumi.OutputState }

func (UserHierarchyGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserHierarchyGroup)(nil)).Elem()
}

func (o UserHierarchyGroupArrayOutput) ToUserHierarchyGroupArrayOutput() UserHierarchyGroupArrayOutput {
	return o
}

func (o UserHierarchyGroupArrayOutput) ToUserHierarchyGroupArrayOutputWithContext(ctx context.Context) UserHierarchyGroupArrayOutput {
	return o
}

func (o UserHierarchyGroupArrayOutput) Index(i pulumi.IntInput) UserHierarchyGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserHierarchyGroup {
		return vs[0].([]*UserHierarchyGroup)[vs[1].(int)]
	}).(UserHierarchyGroupOutput)
}

type UserHierarchyGroupMapOutput struct{ *pulumi.OutputState }

func (UserHierarchyGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserHierarchyGroup)(nil)).Elem()
}

func (o UserHierarchyGroupMapOutput) ToUserHierarchyGroupMapOutput() UserHierarchyGroupMapOutput {
	return o
}

func (o UserHierarchyGroupMapOutput) ToUserHierarchyGroupMapOutputWithContext(ctx context.Context) UserHierarchyGroupMapOutput {
	return o
}

func (o UserHierarchyGroupMapOutput) MapIndex(k pulumi.StringInput) UserHierarchyGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserHierarchyGroup {
		return vs[0].(map[string]*UserHierarchyGroup)[vs[1].(string)]
	}).(UserHierarchyGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserHierarchyGroupInput)(nil)).Elem(), &UserHierarchyGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserHierarchyGroupArrayInput)(nil)).Elem(), UserHierarchyGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserHierarchyGroupMapInput)(nil)).Elem(), UserHierarchyGroupMap{})
	pulumi.RegisterOutputType(UserHierarchyGroupOutput{})
	pulumi.RegisterOutputType(UserHierarchyGroupArrayOutput{})
	pulumi.RegisterOutputType(UserHierarchyGroupMapOutput{})
}
