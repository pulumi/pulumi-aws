// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package connect

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RoutingProfile struct {
	pulumi.CustomResourceState

	Arn                     pulumi.StringOutput                             `pulumi:"arn"`
	DefaultOutboundQueueId  pulumi.StringOutput                             `pulumi:"defaultOutboundQueueId"`
	Description             pulumi.StringOutput                             `pulumi:"description"`
	InstanceId              pulumi.StringOutput                             `pulumi:"instanceId"`
	MediaConcurrencies      RoutingProfileMediaConcurrencyArrayOutput       `pulumi:"mediaConcurrencies"`
	Name                    pulumi.StringOutput                             `pulumi:"name"`
	QueueConfigs            RoutingProfileQueueConfigArrayOutput            `pulumi:"queueConfigs"`
	QueueConfigsAssociateds RoutingProfileQueueConfigsAssociatedArrayOutput `pulumi:"queueConfigsAssociateds"`
	RoutingProfileId        pulumi.StringOutput                             `pulumi:"routingProfileId"`
	Tags                    pulumi.StringMapOutput                          `pulumi:"tags"`
	TagsAll                 pulumi.StringMapOutput                          `pulumi:"tagsAll"`
}

// NewRoutingProfile registers a new resource with the given unique name, arguments, and options.
func NewRoutingProfile(ctx *pulumi.Context,
	name string, args *RoutingProfileArgs, opts ...pulumi.ResourceOption) (*RoutingProfile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultOutboundQueueId == nil {
		return nil, errors.New("invalid value for required argument 'DefaultOutboundQueueId'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.MediaConcurrencies == nil {
		return nil, errors.New("invalid value for required argument 'MediaConcurrencies'")
	}
	var resource RoutingProfile
	err := ctx.RegisterResource("aws:connect/routingProfile:RoutingProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoutingProfile gets an existing RoutingProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoutingProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoutingProfileState, opts ...pulumi.ResourceOption) (*RoutingProfile, error) {
	var resource RoutingProfile
	err := ctx.ReadResource("aws:connect/routingProfile:RoutingProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RoutingProfile resources.
type routingProfileState struct {
	Arn                     *string                                `pulumi:"arn"`
	DefaultOutboundQueueId  *string                                `pulumi:"defaultOutboundQueueId"`
	Description             *string                                `pulumi:"description"`
	InstanceId              *string                                `pulumi:"instanceId"`
	MediaConcurrencies      []RoutingProfileMediaConcurrency       `pulumi:"mediaConcurrencies"`
	Name                    *string                                `pulumi:"name"`
	QueueConfigs            []RoutingProfileQueueConfig            `pulumi:"queueConfigs"`
	QueueConfigsAssociateds []RoutingProfileQueueConfigsAssociated `pulumi:"queueConfigsAssociateds"`
	RoutingProfileId        *string                                `pulumi:"routingProfileId"`
	Tags                    map[string]string                      `pulumi:"tags"`
	TagsAll                 map[string]string                      `pulumi:"tagsAll"`
}

type RoutingProfileState struct {
	Arn                     pulumi.StringPtrInput
	DefaultOutboundQueueId  pulumi.StringPtrInput
	Description             pulumi.StringPtrInput
	InstanceId              pulumi.StringPtrInput
	MediaConcurrencies      RoutingProfileMediaConcurrencyArrayInput
	Name                    pulumi.StringPtrInput
	QueueConfigs            RoutingProfileQueueConfigArrayInput
	QueueConfigsAssociateds RoutingProfileQueueConfigsAssociatedArrayInput
	RoutingProfileId        pulumi.StringPtrInput
	Tags                    pulumi.StringMapInput
	TagsAll                 pulumi.StringMapInput
}

func (RoutingProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*routingProfileState)(nil)).Elem()
}

type routingProfileArgs struct {
	DefaultOutboundQueueId string                           `pulumi:"defaultOutboundQueueId"`
	Description            string                           `pulumi:"description"`
	InstanceId             string                           `pulumi:"instanceId"`
	MediaConcurrencies     []RoutingProfileMediaConcurrency `pulumi:"mediaConcurrencies"`
	Name                   *string                          `pulumi:"name"`
	QueueConfigs           []RoutingProfileQueueConfig      `pulumi:"queueConfigs"`
	Tags                   map[string]string                `pulumi:"tags"`
}

// The set of arguments for constructing a RoutingProfile resource.
type RoutingProfileArgs struct {
	DefaultOutboundQueueId pulumi.StringInput
	Description            pulumi.StringInput
	InstanceId             pulumi.StringInput
	MediaConcurrencies     RoutingProfileMediaConcurrencyArrayInput
	Name                   pulumi.StringPtrInput
	QueueConfigs           RoutingProfileQueueConfigArrayInput
	Tags                   pulumi.StringMapInput
}

func (RoutingProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routingProfileArgs)(nil)).Elem()
}

type RoutingProfileInput interface {
	pulumi.Input

	ToRoutingProfileOutput() RoutingProfileOutput
	ToRoutingProfileOutputWithContext(ctx context.Context) RoutingProfileOutput
}

func (*RoutingProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutingProfile)(nil)).Elem()
}

func (i *RoutingProfile) ToRoutingProfileOutput() RoutingProfileOutput {
	return i.ToRoutingProfileOutputWithContext(context.Background())
}

func (i *RoutingProfile) ToRoutingProfileOutputWithContext(ctx context.Context) RoutingProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingProfileOutput)
}

// RoutingProfileArrayInput is an input type that accepts RoutingProfileArray and RoutingProfileArrayOutput values.
// You can construct a concrete instance of `RoutingProfileArrayInput` via:
//
//	RoutingProfileArray{ RoutingProfileArgs{...} }
type RoutingProfileArrayInput interface {
	pulumi.Input

	ToRoutingProfileArrayOutput() RoutingProfileArrayOutput
	ToRoutingProfileArrayOutputWithContext(context.Context) RoutingProfileArrayOutput
}

type RoutingProfileArray []RoutingProfileInput

func (RoutingProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoutingProfile)(nil)).Elem()
}

func (i RoutingProfileArray) ToRoutingProfileArrayOutput() RoutingProfileArrayOutput {
	return i.ToRoutingProfileArrayOutputWithContext(context.Background())
}

func (i RoutingProfileArray) ToRoutingProfileArrayOutputWithContext(ctx context.Context) RoutingProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingProfileArrayOutput)
}

// RoutingProfileMapInput is an input type that accepts RoutingProfileMap and RoutingProfileMapOutput values.
// You can construct a concrete instance of `RoutingProfileMapInput` via:
//
//	RoutingProfileMap{ "key": RoutingProfileArgs{...} }
type RoutingProfileMapInput interface {
	pulumi.Input

	ToRoutingProfileMapOutput() RoutingProfileMapOutput
	ToRoutingProfileMapOutputWithContext(context.Context) RoutingProfileMapOutput
}

type RoutingProfileMap map[string]RoutingProfileInput

func (RoutingProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoutingProfile)(nil)).Elem()
}

func (i RoutingProfileMap) ToRoutingProfileMapOutput() RoutingProfileMapOutput {
	return i.ToRoutingProfileMapOutputWithContext(context.Background())
}

func (i RoutingProfileMap) ToRoutingProfileMapOutputWithContext(ctx context.Context) RoutingProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingProfileMapOutput)
}

type RoutingProfileOutput struct{ *pulumi.OutputState }

func (RoutingProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutingProfile)(nil)).Elem()
}

func (o RoutingProfileOutput) ToRoutingProfileOutput() RoutingProfileOutput {
	return o
}

func (o RoutingProfileOutput) ToRoutingProfileOutputWithContext(ctx context.Context) RoutingProfileOutput {
	return o
}

func (o RoutingProfileOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutingProfile) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o RoutingProfileOutput) DefaultOutboundQueueId() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutingProfile) pulumi.StringOutput { return v.DefaultOutboundQueueId }).(pulumi.StringOutput)
}

func (o RoutingProfileOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutingProfile) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o RoutingProfileOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutingProfile) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o RoutingProfileOutput) MediaConcurrencies() RoutingProfileMediaConcurrencyArrayOutput {
	return o.ApplyT(func(v *RoutingProfile) RoutingProfileMediaConcurrencyArrayOutput { return v.MediaConcurrencies }).(RoutingProfileMediaConcurrencyArrayOutput)
}

func (o RoutingProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutingProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RoutingProfileOutput) QueueConfigs() RoutingProfileQueueConfigArrayOutput {
	return o.ApplyT(func(v *RoutingProfile) RoutingProfileQueueConfigArrayOutput { return v.QueueConfigs }).(RoutingProfileQueueConfigArrayOutput)
}

func (o RoutingProfileOutput) QueueConfigsAssociateds() RoutingProfileQueueConfigsAssociatedArrayOutput {
	return o.ApplyT(func(v *RoutingProfile) RoutingProfileQueueConfigsAssociatedArrayOutput {
		return v.QueueConfigsAssociateds
	}).(RoutingProfileQueueConfigsAssociatedArrayOutput)
}

func (o RoutingProfileOutput) RoutingProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutingProfile) pulumi.StringOutput { return v.RoutingProfileId }).(pulumi.StringOutput)
}

func (o RoutingProfileOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RoutingProfile) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o RoutingProfileOutput) TagsAll() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RoutingProfile) pulumi.StringMapOutput { return v.TagsAll }).(pulumi.StringMapOutput)
}

type RoutingProfileArrayOutput struct{ *pulumi.OutputState }

func (RoutingProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoutingProfile)(nil)).Elem()
}

func (o RoutingProfileArrayOutput) ToRoutingProfileArrayOutput() RoutingProfileArrayOutput {
	return o
}

func (o RoutingProfileArrayOutput) ToRoutingProfileArrayOutputWithContext(ctx context.Context) RoutingProfileArrayOutput {
	return o
}

func (o RoutingProfileArrayOutput) Index(i pulumi.IntInput) RoutingProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RoutingProfile {
		return vs[0].([]*RoutingProfile)[vs[1].(int)]
	}).(RoutingProfileOutput)
}

type RoutingProfileMapOutput struct{ *pulumi.OutputState }

func (RoutingProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoutingProfile)(nil)).Elem()
}

func (o RoutingProfileMapOutput) ToRoutingProfileMapOutput() RoutingProfileMapOutput {
	return o
}

func (o RoutingProfileMapOutput) ToRoutingProfileMapOutputWithContext(ctx context.Context) RoutingProfileMapOutput {
	return o
}

func (o RoutingProfileMapOutput) MapIndex(k pulumi.StringInput) RoutingProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RoutingProfile {
		return vs[0].(map[string]*RoutingProfile)[vs[1].(string)]
	}).(RoutingProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoutingProfileInput)(nil)).Elem(), &RoutingProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutingProfileArrayInput)(nil)).Elem(), RoutingProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutingProfileMapInput)(nil)).Elem(), RoutingProfileMap{})
	pulumi.RegisterOutputType(RoutingProfileOutput{})
	pulumi.RegisterOutputType(RoutingProfileArrayOutput{})
	pulumi.RegisterOutputType(RoutingProfileMapOutput{})
}
