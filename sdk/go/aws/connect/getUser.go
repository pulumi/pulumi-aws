// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package connect

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides details about a specific Amazon Connect User.
//
// ## Example Usage
//
// By `name`
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/connect"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := connect.LookupUser(ctx, &connect.LookupUserArgs{
//				InstanceId: "aaaaaaaa-bbbb-cccc-dddd-111111111111",
//				Name:       pulumi.StringRef("Example"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// By `userId`
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/connect"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := connect.LookupUser(ctx, &connect.LookupUserArgs{
//				InstanceId: "aaaaaaaa-bbbb-cccc-dddd-111111111111",
//				UserId:     pulumi.StringRef("cccccccc-bbbb-cccc-dddd-111111111111"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupUser(ctx *pulumi.Context, args *LookupUserArgs, opts ...pulumi.InvokeOption) (*LookupUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUserResult
	err := ctx.Invoke("aws:connect/getUser:getUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUser.
type LookupUserArgs struct {
	// Reference to the hosting Amazon Connect Instance
	InstanceId string `pulumi:"instanceId"`
	// Returns information on a specific User by name
	Name *string `pulumi:"name"`
	// A map of tags to assign to the User.
	Tags map[string]string `pulumi:"tags"`
	// Returns information on a specific User by User id
	UserId *string `pulumi:"userId"`
}

// A collection of values returned by getUser.
type LookupUserResult struct {
	// The Amazon Resource Name (ARN) of the User.
	Arn string `pulumi:"arn"`
	// The identifier of the user account in the directory used for identity management.
	DirectoryUserId string `pulumi:"directoryUserId"`
	// The identifier of the hierarchy group for the user.
	HierarchyGroupId string `pulumi:"hierarchyGroupId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A block that contains information about the identity of the user. Documented below.
	IdentityInfos []GetUserIdentityInfo `pulumi:"identityInfos"`
	// Specifies the identifier of the hosting Amazon Connect Instance.
	InstanceId string `pulumi:"instanceId"`
	Name       string `pulumi:"name"`
	// A block that contains information about the phone settings for the user. Documented below.
	PhoneConfigs []GetUserPhoneConfig `pulumi:"phoneConfigs"`
	// The identifier of the routing profile for the user.
	RoutingProfileId string `pulumi:"routingProfileId"`
	// A list of identifiers for the security profiles for the user.
	SecurityProfileIds []string `pulumi:"securityProfileIds"`
	// A map of tags to assign to the User.
	Tags   map[string]string `pulumi:"tags"`
	UserId string            `pulumi:"userId"`
}

func LookupUserOutput(ctx *pulumi.Context, args LookupUserOutputArgs, opts ...pulumi.InvokeOption) LookupUserResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupUserResult, error) {
			args := v.(LookupUserArgs)
			r, err := LookupUser(ctx, &args, opts...)
			var s LookupUserResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupUserResultOutput)
}

// A collection of arguments for invoking getUser.
type LookupUserOutputArgs struct {
	// Reference to the hosting Amazon Connect Instance
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Returns information on a specific User by name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A map of tags to assign to the User.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Returns information on a specific User by User id
	UserId pulumi.StringPtrInput `pulumi:"userId"`
}

func (LookupUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserArgs)(nil)).Elem()
}

// A collection of values returned by getUser.
type LookupUserResultOutput struct{ *pulumi.OutputState }

func (LookupUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserResult)(nil)).Elem()
}

func (o LookupUserResultOutput) ToLookupUserResultOutput() LookupUserResultOutput {
	return o
}

func (o LookupUserResultOutput) ToLookupUserResultOutputWithContext(ctx context.Context) LookupUserResultOutput {
	return o
}

func (o LookupUserResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupUserResult] {
	return pulumix.Output[LookupUserResult]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the User.
func (o LookupUserResultOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Arn }).(pulumi.StringOutput)
}

// The identifier of the user account in the directory used for identity management.
func (o LookupUserResultOutput) DirectoryUserId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.DirectoryUserId }).(pulumi.StringOutput)
}

// The identifier of the hierarchy group for the user.
func (o LookupUserResultOutput) HierarchyGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.HierarchyGroupId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Id }).(pulumi.StringOutput)
}

// A block that contains information about the identity of the user. Documented below.
func (o LookupUserResultOutput) IdentityInfos() GetUserIdentityInfoArrayOutput {
	return o.ApplyT(func(v LookupUserResult) []GetUserIdentityInfo { return v.IdentityInfos }).(GetUserIdentityInfoArrayOutput)
}

// Specifies the identifier of the hosting Amazon Connect Instance.
func (o LookupUserResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Name }).(pulumi.StringOutput)
}

// A block that contains information about the phone settings for the user. Documented below.
func (o LookupUserResultOutput) PhoneConfigs() GetUserPhoneConfigArrayOutput {
	return o.ApplyT(func(v LookupUserResult) []GetUserPhoneConfig { return v.PhoneConfigs }).(GetUserPhoneConfigArrayOutput)
}

// The identifier of the routing profile for the user.
func (o LookupUserResultOutput) RoutingProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.RoutingProfileId }).(pulumi.StringOutput)
}

// A list of identifiers for the security profiles for the user.
func (o LookupUserResultOutput) SecurityProfileIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupUserResult) []string { return v.SecurityProfileIds }).(pulumi.StringArrayOutput)
}

// A map of tags to assign to the User.
func (o LookupUserResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupUserResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func (o LookupUserResultOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.UserId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUserResultOutput{})
}
